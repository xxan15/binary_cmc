.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 86A7F7BF6C43DA353059415D4635A49A73587CEE9C659E4FE4851D0AAC10F76E
.text:00401000 ; Input MD5    : 47BA770D80382CBD66DDBA13924C1417
.text:00401000 ; Input CRC32  : E2B37486
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/ls.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A248 (Wed Apr 20 18:41:12 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00029720 ( 169760.)
.text:00401000 ; Section size in file          : 00029800 ( 169984.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401B10+6B↓p
.text:00401040                                         ; .text:00428F90↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_428F30
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_42B000
.text:004010A2                 mov     edx, dword_42B210
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_42B004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_42B230, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_42B230
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_428F00
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_42B000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_42B004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401B10
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_428F30
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aFullIso        db 'full-iso',0         ; DATA XREF: .text:off_4012A0↓o
.text:00401280                                         ; sub_4025F0+BF1↓o
.text:00401289 aLongIso        db 'long-iso',0         ; DATA XREF: .text:004012A4↓o
.text:00401292 aIso            db 'iso',0              ; DATA XREF: .text:004012A8↓o
.text:00401296 aLocale         db 'locale',0           ; DATA XREF: .text:004012AC↓o
.text:0040129D                 align 10h
.text:004012A0 off_4012A0      dd offset aFullIso      ; DATA XREF: sub_4025F0+EBD↓o
.text:004012A0                                         ; "full-iso"
.text:004012A4                 dd offset aLongIso      ; "long-iso"
.text:004012A8                 dd offset aIso          ; "iso"
.text:004012AC                 dd offset aLocale       ; "locale"
.text:004012B0                 dd 0
.text:004012B4 dword_4012B4    dd 0                    ; DATA XREF: sub_4025F0+EB5↓o
.text:004012B4                                         ; sub_4025F0+ED9↓r
.text:004012B8                 dd 1, 2, 3, 0
.text:004012C8 aNone           db 'none',0             ; DATA XREF: .text:004012E0↓o
.text:004012C8                                         ; .text:off_401888↓o ...
.text:004012CD aClassify       db 'classify',0         ; DATA XREF: .text:004012E4↓o
.text:004012CD                                         ; .text:00401660↓o
.text:004012D6 aFileType       db 'file-type',0        ; DATA XREF: .text:004012E8↓o
.text:004012D6                                         ; .text:00401670↓o
.text:004012E0                 dd offset aNone         ; DATA XREF: sub_4025F0+C42↓o
.text:004012E0                                         ; "none"
.text:004012E4                 dd offset aClassify     ; "classify"
.text:004012E8                 dd offset aFileType     ; "file-type"
.text:004012EC                 align 10h
.text:004012F0 dword_4012F0    dd 0                    ; DATA XREF: sub_4025F0+C36↓o
.text:004012F0                                         ; sub_4025F0+C5A↓r
.text:004012F4                 dd 1, 2
.text:004012FC dword_4012FC    dd 7200636Ch, 63650063h, 6F6E00h, 64006966h, 6E6C0069h
.text:004012FC                                         ; DATA XREF: .text:off_401340↓o
.text:004012FC                                         ; .text:00401344↓o ...
.text:004012FC                 dd 697000h, 62006F73h, 64630064h, 696D00h, 6500726Fh, 6F640078h
.text:004012FC                 dd 90909000h, 5 dup(90909090h)
.text:00401340 ; char *const off_401340
.text:00401340 off_401340      dd offset dword_4012FC  ; DATA XREF: sub_403810+229↓r
.text:00401340                                         ; sub_403810+254↓r
.text:00401344                 dd offset dword_4012FC+3
.text:00401348                 dd offset dword_4012FC+6
.text:0040134C                 dd offset dword_4012FC+9
.text:00401350                 dd offset dword_4012FC+0Ch
.text:00401354                 dd offset dword_4012FC+0Fh
.text:00401358                 dd offset dword_4012FC+12h
.text:0040135C                 dd offset dword_4012FC+15h
.text:00401360                 dd offset dword_4012FC+18h
.text:00401364                 dd offset dword_4012FC+1Bh
.text:00401368                 dd offset dword_4012FC+1Eh
.text:0040136C                 dd offset dword_4012FC+21h
.text:00401370                 dd offset dword_4012FC+24h
.text:00401374                 dd offset dword_4012FC+27h
.text:00401378                 dd offset dword_4012FC+2Ah
.text:0040137C                 align 10h
.text:00401380                 dd 6D005B1Bh, 30003000h, 34333B31h
.text:0040138C                 db 0
.text:0040138D a0136           db '01;36',0            ; DATA XREF: .data:off_42B064↓o
.text:00401393 a33             db '33',0
.text:00401396 a0135           db '01;35',0
.text:0040139C a0133           db '01;33',0
.text:004013A2 a0132           db '01;32',0            ; DATA XREF: .data:off_42B09C↓o
.text:004013A8 aBEY            db '%b %e  %Y',0        ; DATA XREF: .data:off_42B0A8↓o
.text:004013B2 aBEHM           db '%b %e %H:%M',0      ; DATA XREF: .data:off_42B0AC↓o
.text:004013BE aAll            db 'all',0              ; DATA XREF: .text:00401560↓o
.text:004013C2 aEscape         db 'escape',0           ; DATA XREF: .text:00401570↓o
.text:004013C9 aDirectory      db 'directory',0        ; DATA XREF: .text:00401580↓o
.text:004013D3 aDired_0        db 'dired',0            ; DATA XREF: .text:00401590↓o
.text:004013D9 aFullTime       db 'full-time',0        ; DATA XREF: .text:004015A0↓o
.text:004013E3 aHumanReadable  db 'human-readable',0   ; DATA XREF: .text:004015B0↓o
.text:004013F2 aInode          db 'inode',0            ; DATA XREF: .text:004015C0↓o
.text:004013F8 aKilobytes      db 'kilobytes',0        ; DATA XREF: .text:004015D0↓o
.text:00401402 aNumericUidGid  db 'numeric-uid-gid',0  ; DATA XREF: .text:004015E0↓o
.text:00401412 aNoGroup        db 'no-group',0         ; DATA XREF: .text:004015F0↓o
.text:0040141B aHideControlCha db 'hide-control-chars',0
.text:0040141B                                         ; DATA XREF: .text:00401600↓o
.text:0040142E aReverse        db 'reverse',0          ; DATA XREF: .text:00401610↓o
.text:00401436 aSize           db 'size',0             ; DATA XREF: .text:00401620↓o
.text:00401436                                         ; .text:00401890↓o
.text:0040143B aWidth          db 'width',0            ; DATA XREF: .text:00401630↓o
.text:00401441 aAlmostAll      db 'almost-all',0       ; DATA XREF: .text:00401640↓o
.text:0040144C aIgnoreBackups  db 'ignore-backups',0   ; DATA XREF: .text:00401650↓o
.text:0040145B aSi             db 'si',0               ; DATA XREF: .text:00401680↓o
.text:0040145E aDereferenceCom db 'dereference-command-line',0
.text:0040145E                                         ; DATA XREF: .text:00401690↓o
.text:00401477                 align 10h
.text:00401480 aDereferenceCom_0 db 'dereference-command-line-symlink-to-dir',0
.text:00401480                                         ; DATA XREF: .text:004016A0↓o
.text:004014A8 aHide           db 'hide',0             ; DATA XREF: .text:004016B0↓o
.text:004014AD aIgnore         db 'ignore',0           ; DATA XREF: .text:004016C0↓o
.text:004014B4 aIndicatorStyle_0 db 'indicator-style',0
.text:004014B4                                         ; DATA XREF: .text:004016D0↓o
.text:004014C4 aDereference    db 'dereference',0      ; DATA XREF: .text:004016E0↓o
.text:004014D0 aLiteral_0      db 'literal',0          ; DATA XREF: .text:004016F0↓o
.text:004014D8 aQuoteName      db 'quote-name',0       ; DATA XREF: .text:00401700↓o
.text:004014E3 aQuotingStyle   db 'quoting-style',0    ; DATA XREF: .text:00401710↓o
.text:004014F1 aRecursive      db 'recursive',0        ; DATA XREF: .text:00401720↓o
.text:004014FB aFormat         db 'format',0           ; DATA XREF: .text:00401730↓o
.text:00401502 aShowControlCha db 'show-control-chars',0
.text:00401502                                         ; DATA XREF: .text:00401740↓o
.text:00401515 aSort           db 'sort',0             ; DATA XREF: .text:00401750↓o
.text:0040151A aTabsize_0      db 'tabsize',0          ; DATA XREF: .text:00401760↓o
.text:00401522 aTime           db 'time',0             ; DATA XREF: .text:00401770↓o
.text:00401522                                         ; .text:0040188C↓o
.text:00401527 aTimeStyle      db 'time-style',0       ; DATA XREF: .text:00401780↓o
.text:00401532 aColor          db 'color',0            ; DATA XREF: .text:00401790↓o
.text:00401538 aBlockSize_1    db 'block-size',0       ; DATA XREF: .text:004017A0↓o
.text:00401543 aAuthor         db 'author',0           ; DATA XREF: .text:004017B0↓o
.text:0040154A aHelp           db 'help',0             ; DATA XREF: .text:004017C0↓o
.text:0040154F aVersion        db 'version',0          ; DATA XREF: .text:004017D0↓o
.text:0040154F                                         ; .text:00401898↓o
.text:00401557                 align 10h
.text:00401560                 dd offset aAll          ; DATA XREF: sub_4025F0+228↓o
.text:00401560                                         ; "all"
.text:00401564                 dd 2 dup(0)
.text:0040156C                 dd 61h
.text:00401570                 dd offset aEscape       ; "escape"
.text:00401574                 dd 2 dup(0)
.text:0040157C                 dd 62h
.text:00401580                 dd offset aDirectory    ; "directory"
.text:00401584                 dd 2 dup(0)
.text:0040158C                 dd 64h
.text:00401590                 dd offset aDired_0      ; "dired"
.text:00401594                 dd 2 dup(0)
.text:0040159C                 dd 44h
.text:004015A0                 dd offset aFullTime     ; "full-time"
.text:004015A4                 dd 2 dup(0)
.text:004015AC                 dd 85h
.text:004015B0                 dd offset aHumanReadable ; "human-readable"
.text:004015B4                 dd 2 dup(0)
.text:004015BC                 dd 68h
.text:004015C0                 dd offset aInode        ; "inode"
.text:004015C4                 dd 2 dup(0)
.text:004015CC                 dd 69h
.text:004015D0                 dd offset aKilobytes    ; "kilobytes"
.text:004015D4                 dd 2 dup(0)
.text:004015DC                 dd 6Bh
.text:004015E0                 dd offset aNumericUidGid ; "numeric-uid-gid"
.text:004015E4                 dd 2 dup(0)
.text:004015EC                 dd 6Eh
.text:004015F0                 dd offset aNoGroup      ; "no-group"
.text:004015F4                 dd 2 dup(0)
.text:004015FC                 dd 47h
.text:00401600                 dd offset aHideControlCha ; "hide-control-chars"
.text:00401604                 dd 2 dup(0)
.text:0040160C                 dd 71h
.text:00401610                 dd offset aReverse      ; "reverse"
.text:00401614                 dd 2 dup(0)
.text:0040161C                 dd 72h
.text:00401620                 dd offset aSize         ; "size"
.text:00401624                 dd 2 dup(0)
.text:0040162C                 dd 73h
.text:00401630                 dd offset aWidth        ; "width"
.text:00401634                 dd 1, 0
.text:0040163C                 dd 77h
.text:00401640                 dd offset aAlmostAll    ; "almost-all"
.text:00401644                 dd 2 dup(0)
.text:0040164C                 dd 41h
.text:00401650                 dd offset aIgnoreBackups ; "ignore-backups"
.text:00401654                 dd 2 dup(0)
.text:0040165C                 dd 42h
.text:00401660                 dd offset aClassify     ; "classify"
.text:00401664                 dd 2 dup(0)
.text:0040166C                 dd 46h
.text:00401670                 dd offset aFileType     ; "file-type"
.text:00401674                 dd 2 dup(0)
.text:0040167C                 dd 70h
.text:00401680                 dd offset aSi           ; "si"
.text:00401684                 dd 2 dup(0)
.text:0040168C                 dd 8Ah
.text:00401690                 dd offset aDereferenceCom ; "dereference-command-line"
.text:00401694                 dd 2 dup(0)
.text:0040169C                 dd 48h
.text:004016A0                 dd offset aDereferenceCom_0 ; "dereference-command-line-symlink-to-dir"
.text:004016A4                 dd 2 dup(0)
.text:004016AC                 dd 83h
.text:004016B0                 dd offset aHide         ; "hide"
.text:004016B4                 dd 1, 0
.text:004016BC                 dd 86h
.text:004016C0                 dd offset aIgnore       ; "ignore"
.text:004016C4                 dd 1, 0
.text:004016CC                 dd 49h
.text:004016D0                 dd offset aIndicatorStyle_0 ; "indicator-style"
.text:004016D4                 dd 1, 0
.text:004016DC                 dd 87h
.text:004016E0                 dd offset aDereference  ; "dereference"
.text:004016E4                 dd 2 dup(0)
.text:004016EC                 dd 4Ch
.text:004016F0                 dd offset aLiteral_0    ; "literal"
.text:004016F4                 dd 2 dup(0)
.text:004016FC                 dd 4Eh
.text:00401700                 dd offset aQuoteName    ; "quote-name"
.text:00401704                 dd 2 dup(0)
.text:0040170C                 dd 51h
.text:00401710                 dd offset aQuotingStyle ; "quoting-style"
.text:00401714                 dd 1, 0
.text:0040171C                 dd 88h
.text:00401720                 dd offset aRecursive    ; "recursive"
.text:00401724                 dd 2 dup(0)
.text:0040172C                 dd 52h
.text:00401730                 dd offset aFormat       ; "format"
.text:00401734                 dd 1, 0
.text:0040173C                 dd 84h
.text:00401740                 dd offset aShowControlCha ; "show-control-chars"
.text:00401744                 dd 2 dup(0)
.text:0040174C                 dd 89h
.text:00401750                 dd offset aSort         ; "sort"
.text:00401754                 dd 1, 0
.text:0040175C                 dd 8Bh
.text:00401760                 dd offset aTabsize_0    ; "tabsize"
.text:00401764                 dd 1, 0
.text:0040176C                 dd 54h
.text:00401770                 dd offset aTime         ; "time"
.text:00401774                 dd 1, 0
.text:0040177C                 dd 8Ch
.text:00401780                 dd offset aTimeStyle    ; "time-style"
.text:00401784                 dd 1, 0
.text:0040178C                 align 10h
.text:00401790                 dd offset aColor        ; "color"
.text:00401794                 dd 2, 0
.text:0040179C                 dd 82h
.text:004017A0                 dd offset aBlockSize_1  ; "block-size"
.text:004017A4                 dd 1, 0
.text:004017AC                 dd 81h
.text:004017B0                 dd offset aAuthor       ; "author"
.text:004017B4                 dd 2 dup(0)
.text:004017BC                 dd 80h
.text:004017C0                 dd offset aHelp         ; "help"
.text:004017C4                 dd 2 dup(0)
.text:004017CC                 dd 0FFFFFF7Eh
.text:004017D0                 dd offset aVersion      ; "version"
.text:004017D4                 dd 2 dup(0)
.text:004017DC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004017F0 aVerbose        db 'verbose',0          ; DATA XREF: .text:off_401840↓o
.text:004017F8 aLong           db 'long',0             ; DATA XREF: .text:00401844↓o
.text:004017FD aCommas         db 'commas',0           ; DATA XREF: .text:00401848↓o
.text:00401804 aHorizontal     db 'horizontal',0       ; DATA XREF: .text:0040184C↓o
.text:0040180F aAcross         db 'across',0           ; DATA XREF: .text:00401850↓o
.text:00401816 aVertical       db 'vertical',0         ; DATA XREF: .text:00401854↓o
.text:0040181F aSingleColumn   db 'single-column',0    ; DATA XREF: .text:00401858↓o
.text:0040182D                 align 20h
.text:00401840 off_401840      dd offset aVerbose      ; DATA XREF: sub_4025F0+BC5↓o
.text:00401840                                         ; "verbose"
.text:00401844                 dd offset aLong         ; "long"
.text:00401848                 dd offset aCommas       ; "commas"
.text:0040184C                 dd offset aHorizontal   ; "horizontal"
.text:00401850                 dd offset aAcross       ; "across"
.text:00401854                 dd offset aVertical     ; "vertical"
.text:00401858                 dd offset aSingleColumn ; "single-column"
.text:0040185C                 align 10h
.text:00401860 dword_401860    dd 0                    ; DATA XREF: sub_4025F0+BB9↓o
.text:00401860                                         ; sub_4025F0+BDD↓r
.text:00401864                 align 8
.text:00401868 dword_401868    dd 4, 2 dup(3), 2, 1, 65747865h, 6F69736Eh, 0F689006Eh
.text:00401888 off_401888      dd offset aNone         ; DATA XREF: sub_4025F0+CF0↓o
.text:00401888                                         ; "none"
.text:0040188C                 dd offset aTime         ; "time"
.text:00401890                 dd offset aSize         ; "size"
.text:00401894                 dd offset dword_401868+14h
.text:00401898                 dd offset aVersion      ; "version"
.text:0040189C                 align 10h
.text:004018A0 dword_4018A0    dd 0                    ; DATA XREF: sub_4025F0+CE4↓o
.text:004018A0                                         ; sub_4025F0+D08↓r
.text:004018A4                 dd 3, 4, 2, 5
.text:004018B4 aAtime          db 'atime',0            ; DATA XREF: .text:off_4018D4↓o
.text:004018BA aAccess         db 'access',0           ; DATA XREF: .text:004018D8↓o
.text:004018C1 aUse            db 'use',0
.text:004018C5 aCtime          db 'ctime',0
.text:004018CB aStatus         db 'status',0
.text:004018D2                 align 4
.text:004018D4 off_4018D4      dd offset aAtime        ; DATA XREF: sub_4025F0+D34↓o
.text:004018D4                                         ; "atime"
.text:004018D8                 dd offset aAccess       ; "access"
.text:004018DC ; ---------------------------------------------------------------------------
.text:004018DC                 rcr     dword ptr [eax], 40h
.text:004018DF                 add     ch, al
.text:004018E1                 sbb     [eax+0], al
.text:004018E4                 retf
.text:004018E4 ; ---------------------------------------------------------------------------
.text:004018E5                 db 18h, 40h, 0
.text:004018E8                 dd 0
.text:004018EC dword_4018EC    dd 2                    ; DATA XREF: sub_4025F0+D28↓o
.text:004018EC                                         ; sub_4025F0+D4C↓r
.text:004018F0                 dd 2 dup(2), 2 dup(1)
.text:00401900 aAlways         db 'always',0           ; DATA XREF: .text:off_401940↓o
.text:00401907 aYes            db 'yes',0              ; DATA XREF: .text:00401944↓o
.text:0040190B aForce          db 'force',0            ; DATA XREF: .text:00401948↓o
.text:00401911 aNever          db 'never',0            ; DATA XREF: .text:0040194C↓o
.text:00401917 aAuto           db 'auto',0             ; DATA XREF: .text:00401958↓o
.text:0040191C aTty            db 'tty',0              ; DATA XREF: .text:0040195C↓o
.text:00401920 aIfTty          db 'if-tty',0           ; DATA XREF: .text:00401960↓o
.text:00401927                 align 20h
.text:00401940 off_401940      dd offset aAlways       ; DATA XREF: sub_4025F0+B70↓o
.text:00401940                                         ; "always"
.text:00401944                 dd offset aYes          ; "yes"
.text:00401948                 dd offset aForce        ; "force"
.text:0040194C                 dd offset aNever        ; "never"
.text:00401950                 dd offset dword_4012FC+9
.text:00401954                 dd offset aNone         ; "none"
.text:00401958                 dd offset aAuto         ; "auto"
.text:0040195C                 dd offset aTty          ; "tty"
.text:00401960                 dd offset aIfTty        ; "if-tty"
.text:00401964                 align 20h
.text:00401980 dword_401980    dd 1                    ; DATA XREF: sub_4025F0+B68↓o
.text:00401980                                         ; sub_4025F0+B8C↓r
.text:00401984                 dd 2 dup(1), 3 dup(0)
.text:00401998                 dd 3 dup(2)
.text:004019A4 ; const int dword_4019A4
.text:004019A4 dword_4019A4    dd 2                    ; DATA XREF: sub_401B10+3BC↓r
.text:004019A4                                         ; sub_401B10+75E↓r ...
.text:004019A8                 dd 0Fh
.text:004019AC ; const char Locale
.text:004019AC Locale          db 0                    ; DATA XREF: sub_401B10+22↓o
.text:004019AC                                         ; sub_401B10:loc_401C90↓o ...
.text:004019AD                 align 20h
.text:004019C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004019C0                                         ; DATA XREF: sub_401B10+3C↓o
.text:004019E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401B10+44↓o
.text:004019E3                                         ; sub_401B10+51↓o
.text:004019ED                 align 20h
.text:00401A00 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/ls.c',0
.text:00401A00                                         ; DATA XREF: sub_401B10+2E0↓o
.text:00401A00                                         ; sub_401B10+3EF↓o ...
.text:00401A23                 align 20h
.text:00401A40 aHashGetNEntrie db 'hash_get_n_entries (active_dir_set) == 0',0
.text:00401A40                                         ; DATA XREF: sub_401B10+2E8↓o
.text:00401A69 ; const char aDired[]
.text:00401A69 aDired          db '//DIRED//',0        ; DATA XREF: sub_401B10+2FC↓o
.text:00401A73 ; const char aSubdired[]
.text:00401A73 aSubdired       db '//SUBDIRED//',0     ; DATA XREF: sub_401B10+310↓o
.text:00401A80 ; const char Format[]
.text:00401A80 Format          db '//DIRED-OPTIONS// --quoting-style=%s',0Ah,0
.text:00401A80                                         ; DATA XREF: sub_401B10+32A↓o
.text:00401AA6 aFound          db 'found',0            ; DATA XREF: sub_401B10+3F7↓o
.text:00401AAC                 align 20h
.text:00401AC0 aSizeofStructDe db 'sizeof (struct dev_ino) <= obstack_object_size (&dev_ino_obstack)'
.text:00401AC0                                         ; DATA XREF: sub_401B10+438↓o
.text:00401AC0                 db 0
.text:00401B02 ; const char asc_401B02[]
.text:00401B02 asc_401B02      db '.',0                ; DATA XREF: sub_401B10+56A↓o
.text:00401B02                                         ; sub_401B10+58B↓o
.text:00401B04 a00             db '00',0               ; DATA XREF: sub_401B10+7B1↓o
.text:00401B04                                         ; sub_401B10+7DB↓o ...
.text:00401B07                 align 10h
.text:00401B10
.text:00401B10 ; =============== S U B R O U T I N E =======================================
.text:00401B10
.text:00401B10 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401B10
.text:00401B10 sub_401B10      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401B10
.text:00401B10 Category        = dword ptr -78h
.text:00401B10 Locale          = dword ptr -74h
.text:00401B10 var_70          = byte ptr -70h
.text:00401B10 var_6C          = dword ptr -6Ch
.text:00401B10 var_68          = dword ptr -68h
.text:00401B10 var_49          = byte ptr -49h
.text:00401B10 var_3A          = byte ptr -3Ah
.text:00401B10 var_38          = dword ptr -38h
.text:00401B10 var_34          = dword ptr -34h
.text:00401B10 var_30          = dword ptr -30h
.text:00401B10 var_2C          = dword ptr -2Ch
.text:00401B10 var_28          = dword ptr -28h
.text:00401B10 var_24          = dword ptr -24h
.text:00401B10 var_20          = dword ptr -20h
.text:00401B10 var_1C          = dword ptr -1Ch
.text:00401B10 arg_0           = dword ptr  8
.text:00401B10 arg_4           = dword ptr  0Ch
.text:00401B10
.text:00401B10                 push    ebp
.text:00401B11                 xor     eax, eax
.text:00401B13                 mov     ebp, esp
.text:00401B15                 push    edi
.text:00401B16                 push    esi
.text:00401B17                 push    ebx
.text:00401B18                 sub     esp, 6Ch
.text:00401B1B                 mov     ebx, 2
.text:00401B20                 and     esp, 0FFFFFFF0h
.text:00401B23                 call    __alloca
.text:00401B28                 call    sub_428FD0
.text:00401B2D                 mov     edi, [ebp+arg_4]
.text:00401B30                 mov     esi, [edi]
.text:00401B32                 mov     [esp+78h+Locale], offset Locale ; Locale
.text:00401B3A                 mov     [esp+78h+Category], 0 ; Category
.text:00401B41                 mov     ds:dword_42D300, esi
.text:00401B47                 call    setlocale
.text:00401B4C                 mov     [esp+78h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401B54                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:00401B5B                 call    ds:libintl_bindtextdomain
.text:00401B61                 mov     [esp+78h+Category], offset aCoreutils ; "coreutils"
.text:00401B68                 call    ds:libintl_textdomain
.text:00401B6E                 mov     dword_42B0F0, ebx
.text:00401B74                 mov     [esp+78h+Category], offset sub_415220 ; void (__cdecl *)()
.text:00401B7B                 call    sub_401040
.text:00401B80                 mov     ds:byte_42C2A0, 1
.text:00401B87                 xor     edx, edx
.text:00401B89                 mov     eax, [ebp+arg_4]
.text:00401B8C                 mov     ds:Block, edx
.text:00401B92                 xor     ecx, ecx
.text:00401B94                 mov     edx, [ebp+arg_0]
.text:00401B97                 mov     ds:Code, ecx
.text:00401B9D                 mov     [esp+78h+Locale], eax
.text:00401BA1                 mov     [esp+78h+Category], edx
.text:00401BA4                 call    sub_4025F0
.text:00401BA9                 cmp     ds:byte_42C1C0, 0
.text:00401BB0                 mov     ebx, eax
.text:00401BB2                 jnz     loc_4021A5
.text:00401BB8
.text:00401BB8 loc_401BB8:                             ; CODE XREF: sub_401B10+6A1↓j
.text:00401BB8                                         ; sub_401B10+7A6↓j
.text:00401BB8                 cmp     ds:dword_42C200, 1
.text:00401BBF                 jz      loc_402173
.text:00401BC5
.text:00401BC5 loc_401BC5:                             ; CODE XREF: sub_401B10+689↓j
.text:00401BC5                 cmp     ds:byte_42C210, 0
.text:00401BCC                 jnz     loc_402109
.text:00401BD2
.text:00401BD2 loc_401BD2:                             ; CODE XREF: sub_401B10+65E↓j
.text:00401BD2                 mov     ecx, ds:dword_42C130
.text:00401BD8                 xor     edx, edx
.text:00401BDA                 sub     ecx, 3
.text:00401BDD                 cmp     ecx, 1
.text:00401BE0                 jbe     short loc_401C10
.text:00401BE2                 mov     eax, ds:dword_42C110
.text:00401BE7                 test    eax, eax
.text:00401BE9                 jz      short loc_401C10
.text:00401BEB                 cmp     ds:dword_42C200, 5
.text:00401BF2                 jz      short loc_401C10
.text:00401BF4                 cmp     ds:byte_42C170, 0
.text:00401BFB                 jnz     short loc_401C10
.text:00401BFD                 cmp     ds:byte_42C1F0, 0
.text:00401C04                 jz      short loc_401C12
.text:00401C06                 lea     esi, [esi+0]
.text:00401C09                 lea     edi, [edi+0]
.text:00401C10
.text:00401C10 loc_401C10:                             ; CODE XREF: sub_401B10+D0↑j
.text:00401C10                                         ; sub_401B10+D9↑j ...
.text:00401C10                 mov     dl, 1
.text:00401C12
.text:00401C12 loc_401C12:                             ; CODE XREF: sub_401B10+F4↑j
.text:00401C12                 mov     ds:byte_42C2C0, dl
.text:00401C18                 xor     eax, eax
.text:00401C1A                 test    dl, dl
.text:00401C1C                 jnz     short loc_401C3C
.text:00401C1E                 cmp     ds:byte_42C210, 0
.text:00401C25                 jnz     short loc_401C3A
.text:00401C27                 cmp     ds:byte_42C1C0, 0
.text:00401C2E                 jnz     short loc_401C3A
.text:00401C30                 mov     edi, ds:dword_42C1B0
.text:00401C36                 test    edi, edi
.text:00401C38                 jz      short loc_401C3C
.text:00401C3A
.text:00401C3A loc_401C3A:                             ; CODE XREF: sub_401B10+115↑j
.text:00401C3A                                         ; sub_401B10+11E↑j
.text:00401C3A                 mov     al, 1
.text:00401C3C
.text:00401C3C loc_401C3C:                             ; CODE XREF: sub_401B10+10C↑j
.text:00401C3C                                         ; sub_401B10+128↑j
.text:00401C3C                 cmp     ds:byte_42C1A0, 0
.text:00401C43                 mov     ds:byte_42C2D0, al
.text:00401C48                 jnz     loc_4020AC
.text:00401C4E
.text:00401C4E loc_401C4E:                             ; CODE XREF: sub_401B10+5F4↓j
.text:00401C4E                 mov     [esp+78h+Locale], 80h ; '€'
.text:00401C56                 mov     esi, 64h ; 'd'
.text:00401C5B                 mov     ds:dword_42C040, esi
.text:00401C61                 mov     [esp+78h+Category], 64h ; 'd'
.text:00401C68                 call    sub_4123E0
.text:00401C6D                 mov     ds:dword_42C030, eax
.text:00401C72                 xor     edx, edx
.text:00401C74                 mov     ds:dword_42C050, edx
.text:00401C7A                 call    sub_404460
.text:00401C7F                 mov     esi, [ebp+arg_0]
.text:00401C82                 sub     esi, ebx
.text:00401C84                 test    esi, esi
.text:00401C86                 jle     loc_402059
.text:00401C8C                 lea     esi, [esi+0]
.text:00401C90
.text:00401C90 loc_401C90:                             ; CODE XREF: sub_401B10+1AA↓j
.text:00401C90                 mov     [esp+78h+var_6C], offset Locale ; char *
.text:00401C98                 mov     eax, [ebp+arg_4]
.text:00401C9B                 mov     dword ptr [esp+78h+var_70], 1 ; char
.text:00401CA3                 mov     [esp+78h+Locale], 0 ; int
.text:00401CAB                 mov     ecx, [eax+ebx*4]
.text:00401CAE                 inc     ebx
.text:00401CAF                 mov     [esp+78h+Category], ecx ; char *
.text:00401CB2                 call    sub_404500
.text:00401CB7                 cmp     ebx, [ebp+arg_0]
.text:00401CBA                 jl      short loc_401C90
.text:00401CBC
.text:00401CBC loc_401CBC:                             ; CODE XREF: sub_401B10+576↓j
.text:00401CBC                                         ; sub_401B10+597↓j
.text:00401CBC                 mov     ebx, ds:dword_42C050
.text:00401CC2                 test    ebx, ebx
.text:00401CC4                 jnz     loc_401FCE
.text:00401CCA
.text:00401CCA loc_401CCA:                             ; CODE XREF: sub_401B10+4D4↓j
.text:00401CCA                 dec     esi
.text:00401CCB                 jle     loc_401FAA
.text:00401CD1
.text:00401CD1 loc_401CD1:                             ; CODE XREF: sub_401B10+513↓j
.text:00401CD1                 mov     eax, ds:Block
.text:00401CD6
.text:00401CD6 loc_401CD6:                             ; CODE XREF: sub_401B10+4AC↓j
.text:00401CD6                                         ; sub_401B10+4B9↓j
.text:00401CD6                 test    eax, eax
.text:00401CD8                 jz      loc_401DA1
.text:00401CDE                 mov     esi, esi
.text:00401CE0
.text:00401CE0 loc_401CE0:                             ; CODE XREF: sub_401B10+28B↓j
.text:00401CE0                 mov     edi, ds:dword_42C020
.text:00401CE6                 mov     esi, eax
.text:00401CE8                 mov     ecx, [eax+0Ch]
.text:00401CEB                 test    edi, edi
.text:00401CED                 mov     ds:Block, ecx
.text:00401CF3                 jz      loc_401F54
.text:00401CF9                 mov     eax, [eax]
.text:00401CFB                 test    eax, eax
.text:00401CFD                 jnz     loc_401F54
.text:00401D03                 mov     edx, ds:dword_42C3BC
.text:00401D09                 mov     eax, ds:dword_42C3B8
.text:00401D0E                 mov     ebx, edx
.text:00401D10                 sub     ebx, eax
.text:00401D12                 cmp     ebx, 0Fh
.text:00401D15                 jbe     loc_401F38
.text:00401D1B                 mov     ecx, ds:dword_42C3C0
.text:00401D21                 sub     ecx, edx
.text:00401D23                 cmp     ecx, 0FFFFFFF0h
.text:00401D26                 jl      loc_401F13
.text:00401D2C
.text:00401D2C loc_401D2C:                             ; CODE XREF: sub_401B10+423↓j
.text:00401D2C                 mov     ebx, [edx-10h]
.text:00401D2F                 lea     eax, [edx-10h]
.text:00401D32                 mov     ds:dword_42C3BC, eax
.text:00401D37                 mov     [ebp+var_38], ebx
.text:00401D3A                 mov     ecx, [eax+4]
.text:00401D3D                 mov     [ebp+var_34], ecx
.text:00401D40                 mov     edx, [eax+8]
.text:00401D43                 mov     [ebp+var_30], edx
.text:00401D46                 mov     eax, [eax+0Ch]
.text:00401D49                 mov     [ebp+var_20], edx
.text:00401D4C                 lea     edx, [ebp+var_28]
.text:00401D4F                 mov     [ebp+var_2C], eax
.text:00401D52                 mov     [ebp+var_28], ebx
.text:00401D55                 mov     [ebp+var_24], ecx
.text:00401D58                 mov     [ebp+var_1C], eax
.text:00401D5B                 mov     [esp+78h+Locale], edx
.text:00401D5F                 mov     [esp+78h+Category], edi
.text:00401D62                 call    sub_414F60
.text:00401D67                 test    eax, eax
.text:00401D69                 jz      loc_401EF7
.text:00401D6F                 mov     [esp+78h+Category], eax ; Block
.text:00401D72                 call    free
.text:00401D77                 mov     eax, [esi]
.text:00401D79                 test    eax, eax
.text:00401D7B                 jnz     loc_401EEA
.text:00401D81
.text:00401D81 loc_401D81:                             ; CODE XREF: sub_401B10+3E2↓j
.text:00401D81                 mov     eax, [esi+4]
.text:00401D84                 test    eax, eax
.text:00401D86                 jnz     loc_401EDD
.text:00401D8C
.text:00401D8C loc_401D8C:                             ; CODE XREF: sub_401B10+3D5↓j
.text:00401D8C                 mov     [esp+78h+Category], esi ; Block
.text:00401D8F                 call    free
.text:00401D94
.text:00401D94 loc_401D94:                             ; CODE XREF: sub_401B10+479↓j
.text:00401D94                 mov     eax, ds:Block
.text:00401D99                 test    eax, eax
.text:00401D9B                 jnz     loc_401CE0
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_401B10+1C8↑j
.text:00401DA1                                         ; sub_401B10+4A1↓j ...
.text:00401DA1                 cmp     ds:byte_42C1C0, 0
.text:00401DA8                 jnz     loc_401E56
.text:00401DAE
.text:00401DAE loc_401DAE:                             ; CODE XREF: sub_401B10+390↓j
.text:00401DAE                                         ; sub_401B10+39E↓j
.text:00401DAE                 cmp     ds:byte_42C1A0, 0
.text:00401DB5                 jnz     short loc_401E04
.text:00401DB7
.text:00401DB7 loc_401DB7:                             ; CODE XREF: sub_401B10+341↓j
.text:00401DB7                 mov     eax, ds:dword_42C020
.text:00401DBC                 test    eax, eax
.text:00401DBE                 jz      short loc_401DDA
.text:00401DC0                 mov     [esp+78h+Category], eax
.text:00401DC3                 call    sub_414AA0
.text:00401DC8                 test    eax, eax
.text:00401DCA                 jnz     short loc_401DE8
.text:00401DCC                 mov     ecx, ds:dword_42C020
.text:00401DD2                 mov     [esp+78h+Category], ecx ; void *
.text:00401DD5                 call    sub_414620
.text:00401DDA
.text:00401DDA loc_401DDA:                             ; CODE XREF: sub_401B10+2AE↑j
.text:00401DDA                 mov     esi, ds:Code
.text:00401DE0                 mov     [esp+78h+Category], esi ; Code
.text:00401DE3                 call    exit
.text:00401DE8 ; ---------------------------------------------------------------------------
.text:00401DE8
.text:00401DE8 loc_401DE8:                             ; CODE XREF: sub_401B10+2BA↑j
.text:00401DE8                 mov     dword ptr [esp+78h+var_70], 53Bh
.text:00401DF0                 mov     [esp+78h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/ls.c"
.text:00401DF8                 mov     [esp+78h+Category], offset aHashGetNEntrie ; "hash_get_n_entries (active_dir_set) == "...
.text:00401DFF
.text:00401DFF loc_401DFF:                             ; CODE XREF: sub_401B10+3FE↓j
.text:00401DFF                                         ; sub_401B10+43F↓j
.text:00401DFF                 call    _assert
.text:00401E04 ; ---------------------------------------------------------------------------
.text:00401E04
.text:00401E04 loc_401E04:                             ; CODE XREF: sub_401B10+2A5↑j
.text:00401E04                 mov     [esp+78h+Locale], offset File ; File
.text:00401E0C                 mov     [esp+78h+Category], offset aDired ; "//DIRED//"
.text:00401E13                 call    sub_409370
.text:00401E18                 mov     [esp+78h+Locale], offset stru_42C380 ; File
.text:00401E20                 mov     [esp+78h+Category], offset aSubdired ; "//SUBDIRED//"
.text:00401E27                 call    sub_409370
.text:00401E2C                 mov     ebx, ds:dword_42C270
.text:00401E32                 mov     [esp+78h+Category], ebx
.text:00401E35                 call    sub_40D670
.text:00401E3A                 mov     [esp+78h+Category], offset Format ; "//DIRED-OPTIONS// --quoting-style=%s\n"
.text:00401E41                 mov     edi, ds:off_40CB40[eax*4] ; "literal"
.text:00401E48                 mov     [esp+78h+Locale], edi
.text:00401E4C                 call    printf
.text:00401E51                 jmp     loc_401DB7
.text:00401E56 ; ---------------------------------------------------------------------------
.text:00401E56
.text:00401E56 loc_401E56:                             ; CODE XREF: sub_401B10+298↑j
.text:00401E56                 mov     [esp+78h+Category], offset unk_42B030
.text:00401E5D                 xor     ebx, ebx
.text:00401E5F                 call    sub_406750
.text:00401E64                 mov     [esp+78h+Category], offset unk_42B038
.text:00401E6B                 call    sub_406750
.text:00401E70                 mov     esi, ds:_iob
.text:00401E76                 add     esi, 20h ; ' '
.text:00401E79                 mov     [esp+78h+Category], esi ; Stream
.text:00401E7C                 call    fflush
.text:00401E81
.text:00401E81 loc_401E81:                             ; CODE XREF: sub_401B10+37C↓j
.text:00401E81                 cmp     [ebp+ebx+var_3A], 0
.text:00401E86                 jnz     short loc_401EC4
.text:00401E88
.text:00401E88 loc_401E88:                             ; CODE XREF: sub_401B10+3CB↓j
.text:00401E88                 inc     ebx
.text:00401E89                 cmp     ebx, 1
.text:00401E8C                 jle     short loc_401E81
.text:00401E8E                 mov     ebx, ds:dword_42C300
.text:00401E94                 test    ebx, ebx
.text:00401E96                 jnz     short loc_401EB3
.text:00401E98
.text:00401E98 loc_401E98:                             ; CODE XREF: sub_401B10+3B2↓j
.text:00401E98                 mov     ebx, ds:Signal
.text:00401E9E                 test    ebx, ebx
.text:00401EA0                 jz      loc_401DAE
.text:00401EA6                 mov     [esp+78h+Category], ebx ; Signal
.text:00401EA9                 call    raise
.text:00401EAE                 jmp     loc_401DAE
.text:00401EB3 ; ---------------------------------------------------------------------------
.text:00401EB3
.text:00401EB3 loc_401EB3:                             ; CODE XREF: sub_401B10+386↑j
.text:00401EB3                                         ; sub_401B10+3B0↓j
.text:00401EB3                 mov     [esp+78h+Category], 0Fh ; Signal
.text:00401EBA                 call    raise
.text:00401EBF                 dec     ebx
.text:00401EC0                 jnz     short loc_401EB3
.text:00401EC2                 jmp     short loc_401E98
.text:00401EC4 ; ---------------------------------------------------------------------------
.text:00401EC4
.text:00401EC4 loc_401EC4:                             ; CODE XREF: sub_401B10+376↑j
.text:00401EC4                 mov     [esp+78h+Locale], 0 ; Function
.text:00401ECC                 mov     edx, ds:dword_4019A4[ebx*4]
.text:00401ED3                 mov     [esp+78h+Category], edx ; Signal
.text:00401ED6                 call    signal
.text:00401EDB                 jmp     short loc_401E88
.text:00401EDD ; ---------------------------------------------------------------------------
.text:00401EDD
.text:00401EDD loc_401EDD:                             ; CODE XREF: sub_401B10+276↑j
.text:00401EDD                 mov     [esp+78h+Category], eax ; Block
.text:00401EE0                 call    free
.text:00401EE5                 jmp     loc_401D8C
.text:00401EEA ; ---------------------------------------------------------------------------
.text:00401EEA
.text:00401EEA loc_401EEA:                             ; CODE XREF: sub_401B10+26B↑j
.text:00401EEA                 mov     [esp+78h+Category], eax ; Block
.text:00401EED                 call    free
.text:00401EF2                 jmp     loc_401D81
.text:00401EF7 ; ---------------------------------------------------------------------------
.text:00401EF7
.text:00401EF7 loc_401EF7:                             ; CODE XREF: sub_401B10+259↑j
.text:00401EF7                 mov     dword ptr [esp+78h+var_70], 503h
.text:00401EFF                 mov     [esp+78h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/ls.c"
.text:00401F07                 mov     [esp+78h+Category], offset aFound ; "found"
.text:00401F0E                 jmp     loc_401DFF
.text:00401F13 ; ---------------------------------------------------------------------------
.text:00401F13
.text:00401F13 loc_401F13:                             ; CODE XREF: sub_401B10+216↑j
.text:00401F13                 mov     [esp+78h+Locale], 0FFFFFFF0h
.text:00401F1B                 mov     [esp+78h+Category], offset unk_42C3B0
.text:00401F22                 call    sub_427730
.text:00401F27                 mov     edi, ds:dword_42C020
.text:00401F2D                 mov     edx, ds:dword_42C3BC
.text:00401F33                 jmp     loc_401D2C
.text:00401F38 ; ---------------------------------------------------------------------------
.text:00401F38
.text:00401F38 loc_401F38:                             ; CODE XREF: sub_401B10+205↑j
.text:00401F38                 mov     dword ptr [esp+78h+var_70], 38Ah
.text:00401F40                 mov     [esp+78h+Locale], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/ls.c"
.text:00401F48                 mov     [esp+78h+Category], offset aSizeofStructDe ; "sizeof (struct dev_ino) <= obstack_obje"...
.text:00401F4F                 jmp     loc_401DFF
.text:00401F54 ; ---------------------------------------------------------------------------
.text:00401F54
.text:00401F54 loc_401F54:                             ; CODE XREF: sub_401B10+1E3↑j
.text:00401F54                                         ; sub_401B10+1ED↑j
.text:00401F54                 movzx   ecx, byte ptr [esi+8]
.text:00401F58                 mov     dword ptr [esp+78h+var_70], ecx ; char
.text:00401F5C                 mov     ebx, [esi+4]
.text:00401F5F                 mov     [esp+78h+Locale], ebx ; char *
.text:00401F63                 mov     edi, [esi]
.text:00401F65                 mov     [esp+78h+Category], edi ; LPCSTR
.text:00401F68                 call    sub_403C30
.text:00401F6D                 mov     eax, [esi]
.text:00401F6F                 test    eax, eax
.text:00401F71                 jnz     short loc_401FA0
.text:00401F73
.text:00401F73 loc_401F73:                             ; CODE XREF: sub_401B10+498↓j
.text:00401F73                 mov     eax, [esi+4]
.text:00401F76                 test    eax, eax
.text:00401F78                 jnz     short loc_401F90
.text:00401F7A
.text:00401F7A loc_401F7A:                             ; CODE XREF: sub_401B10+488↓j
.text:00401F7A                 mov     [esp+78h+Category], esi ; Block
.text:00401F7D                 call    free
.text:00401F82                 mov     ds:byte_42C2A0, 1
.text:00401F89                 jmp     loc_401D94
.text:00401F89 ; ---------------------------------------------------------------------------
.text:00401F8E                 align 10h
.text:00401F90
.text:00401F90 loc_401F90:                             ; CODE XREF: sub_401B10+468↑j
.text:00401F90                 mov     [esp+78h+Category], eax ; Block
.text:00401F93                 call    free
.text:00401F98                 jmp     short loc_401F7A
.text:00401F98 ; ---------------------------------------------------------------------------
.text:00401F9A                 align 10h
.text:00401FA0
.text:00401FA0 loc_401FA0:                             ; CODE XREF: sub_401B10+461↑j
.text:00401FA0                 mov     [esp+78h+Category], eax ; Block
.text:00401FA3                 call    free
.text:00401FA8                 jmp     short loc_401F73
.text:00401FAA ; ---------------------------------------------------------------------------
.text:00401FAA
.text:00401FAA loc_401FAA:                             ; CODE XREF: sub_401B10+1BB↑j
.text:00401FAA                 mov     eax, ds:Block
.text:00401FAF                 test    eax, eax
.text:00401FB1                 jz      loc_401DA1
.text:00401FB7                 mov     edx, [eax+0Ch]
.text:00401FBA                 test    edx, edx
.text:00401FBC                 jnz     loc_401CD6
.text:00401FC2                 mov     ds:byte_42C2A0, 0
.text:00401FC9                 jmp     loc_401CD6
.text:00401FCE ; ---------------------------------------------------------------------------
.text:00401FCE
.text:00401FCE loc_401FCE:                             ; CODE XREF: sub_401B10+1B4↑j
.text:00401FCE                 call    sub_404FA0
.text:00401FD3                 cmp     ds:byte_42C220, 0
.text:00401FDA                 jz      short loc_402043
.text:00401FDC
.text:00401FDC loc_401FDC:                             ; CODE XREF: sub_401B10+547↓j
.text:00401FDC                 mov     edi, ds:dword_42C050
.text:00401FE2                 test    edi, edi
.text:00401FE4                 jz      loc_401CCA
.text:00401FEA                 call    sub_4051F0
.text:00401FEF                 mov     edx, ds:Block
.text:00401FF5                 test    edx, edx
.text:00401FF7                 jz      loc_401DA1
.text:00401FFD                 mov     ecx, ds:_iob
.text:00402003                 mov     esi, [ecx+24h]
.text:00402006                 dec     esi
.text:00402007                 mov     [ecx+24h], esi
.text:0040200A                 test    esi, esi
.text:0040200C                 js      short loc_402028
.text:0040200E                 mov     ebx, ds:_iob
.text:00402014                 mov     eax, [ebx+20h]
.text:00402017                 mov     byte ptr [eax], 0Ah
.text:0040201A                 inc     dword ptr [ebx+20h]
.text:0040201D
.text:0040201D loc_40201D:                             ; CODE XREF: sub_401B10+531↓j
.text:0040201D                 inc     ds:dword_42C340
.text:00402023                 jmp     loc_401CD1
.text:00402028 ; ---------------------------------------------------------------------------
.text:00402028
.text:00402028 loc_402028:                             ; CODE XREF: sub_401B10+4FC↑j
.text:00402028                 mov     [esp+78h+Category], 0Ah ; Ch
.text:0040202F                 mov     edi, ds:_iob
.text:00402035                 add     edi, 20h ; ' '
.text:00402038                 mov     [esp+78h+Locale], edi ; File
.text:0040203C                 call    _flsbuf
.text:00402041                 jmp     short loc_40201D
.text:00402043 ; ---------------------------------------------------------------------------
.text:00402043
.text:00402043 loc_402043:                             ; CODE XREF: sub_401B10+4CA↑j
.text:00402043                 mov     [esp+78h+Locale], 1 ; char
.text:0040204B                 mov     [esp+78h+Category], 0 ; char *
.text:00402052                 call    sub_404DF0
.text:00402057                 jmp     short loc_401FDC
.text:00402059 ; ---------------------------------------------------------------------------
.text:00402059
.text:00402059 loc_402059:                             ; CODE XREF: sub_401B10+176↑j
.text:00402059                 cmp     ds:byte_42C220, 0
.text:00402060                 jz      short loc_40208B
.text:00402062                 mov     [esp+78h+var_6C], offset Locale ; char *
.text:0040206A                 mov     dword ptr [esp+78h+var_70], 1 ; char
.text:00402072                 mov     [esp+78h+Locale], 4 ; int
.text:0040207A                 mov     [esp+78h+Category], offset asc_401B02 ; "."
.text:00402081                 call    sub_404500
.text:00402086                 jmp     loc_401CBC
.text:0040208B ; ---------------------------------------------------------------------------
.text:0040208B
.text:0040208B loc_40208B:                             ; CODE XREF: sub_401B10+550↑j
.text:0040208B                 mov     dword ptr [esp+78h+var_70], 1 ; char
.text:00402093                 mov     [esp+78h+Locale], 0 ; char *
.text:0040209B                 mov     [esp+78h+Category], offset asc_401B02 ; "."
.text:004020A2                 call    sub_403B20
.text:004020A7                 jmp     loc_401CBC
.text:004020AC ; ---------------------------------------------------------------------------
.text:004020AC
.text:004020AC loc_4020AC:                             ; CODE XREF: sub_401B10+138↑j
.text:004020AC                 mov     [esp+78h+var_68], offset free
.text:004020B4                 mov     [esp+78h+var_6C], offset malloc
.text:004020BC                 mov     dword ptr [esp+78h+var_70], 0
.text:004020C4                 mov     [esp+78h+Locale], 0
.text:004020CC                 mov     [esp+78h+Category], offset File
.text:004020D3                 call    sub_427600
.text:004020D8                 mov     [esp+78h+var_68], offset free
.text:004020E0                 mov     [esp+78h+var_6C], offset malloc
.text:004020E8                 mov     dword ptr [esp+78h+var_70], 0
.text:004020F0                 mov     [esp+78h+Locale], 0
.text:004020F8                 mov     [esp+78h+Category], offset stru_42C380
.text:004020FF                 call    sub_427600
.text:00402104                 jmp     loc_401C4E
.text:00402109 ; ---------------------------------------------------------------------------
.text:00402109
.text:00402109 loc_402109:                             ; CODE XREF: sub_401B10+BC↑j
.text:00402109                 mov     [esp+78h+var_68], offset j_free
.text:00402111                 mov     [esp+78h+var_6C], offset sub_409480
.text:00402119                 mov     dword ptr [esp+78h+var_70], offset sub_409450
.text:00402121                 mov     [esp+78h+Locale], 0
.text:00402129                 mov     [esp+78h+Category], 1Eh
.text:00402130                 call    sub_414340
.text:00402135                 mov     ds:dword_42C020, eax
.text:0040213A                 test    eax, eax
.text:0040213C                 jz      loc_402339
.text:00402142                 mov     [esp+78h+var_68], offset free
.text:0040214A                 mov     [esp+78h+var_6C], offset malloc
.text:00402152                 mov     dword ptr [esp+78h+var_70], 0
.text:0040215A                 mov     [esp+78h+Locale], 0
.text:00402162                 mov     [esp+78h+Category], offset unk_42C3B0
.text:00402169                 call    sub_427600
.text:0040216E                 jmp     loc_401BD2
.text:00402173 ; ---------------------------------------------------------------------------
.text:00402173
.text:00402173 loc_402173:                             ; CODE XREF: sub_401B10+AF↑j
.text:00402173                 cmp     ds:byte_42C220, 0
.text:0040217A                 jnz     short loc_40218F
.text:0040217C                 cmp     ds:dword_42C1B0, 1
.text:00402183                 jz      short loc_40218F
.text:00402185                 mov     edi, ds:dword_42C110
.text:0040218B                 test    edi, edi
.text:0040218D                 jnz     short loc_40219E
.text:0040218F
.text:0040218F loc_40218F:                             ; CODE XREF: sub_401B10+66A↑j
.text:0040218F                                         ; sub_401B10+673↑j
.text:0040218F                 mov     eax, 2
.text:00402194
.text:00402194 loc_402194:                             ; CODE XREF: sub_401B10+693↓j
.text:00402194                 mov     ds:dword_42C200, eax
.text:00402199                 jmp     loc_401BC5
.text:0040219E ; ---------------------------------------------------------------------------
.text:0040219E
.text:0040219E loc_40219E:                             ; CODE XREF: sub_401B10+67D↑j
.text:0040219E                 mov     eax, 4
.text:004021A3                 jmp     short loc_402194
.text:004021A5 ; ---------------------------------------------------------------------------
.text:004021A5
.text:004021A5 loc_4021A5:                             ; CODE XREF: sub_401B10+A2↑j
.text:004021A5                 call    sub_403810
.text:004021AA                 cmp     ds:byte_42C1C0, 0
.text:004021B1                 jz      loc_401BB8
.text:004021B7                 mov     [ebp+var_49], 0
.text:004021BB                 mov     eax, dword_42B090
.text:004021C0                 mov     edx, dword_42B094
.text:004021C6                 test    eax, eax
.text:004021C8                 jz      short loc_4021E0
.text:004021CA                 cmp     eax, 1
.text:004021CD                 jz      loc_40232B
.text:004021D3
.text:004021D3 loc_4021D3:                             ; CODE XREF: sub_401B10+824↓j
.text:004021D3                 cmp     eax, 2
.text:004021D6                 jz      loc_40230F
.text:004021DC
.text:004021DC loc_4021DC:                             ; CODE XREF: sub_401B10+816↓j
.text:004021DC                 mov     [ebp+var_49], 1
.text:004021E0
.text:004021E0 loc_4021E0:                             ; CODE XREF: sub_401B10+6B8↑j
.text:004021E0                                         ; sub_401B10+810↓j ...
.text:004021E0                 cmp     [ebp+var_49], 0
.text:004021E4                 jnz     short loc_40224D
.text:004021E6                 mov     [ebp+var_49], 0
.text:004021EA                 mov     eax, dword_42B098
.text:004021EF                 mov     edx, off_42B09C ; "01;32"
.text:004021F5                 test    eax, eax
.text:004021F7                 jz      short loc_40220F
.text:004021F9                 cmp     eax, 1
.text:004021FC                 jz      loc_402301
.text:00402202
.text:00402202 loc_402202:                             ; CODE XREF: sub_401B10+7FA↓j
.text:00402202                 cmp     eax, 2
.text:00402205                 jz      loc_4022E5
.text:0040220B
.text:0040220B loc_40220B:                             ; CODE XREF: sub_401B10+7EC↓j
.text:0040220B                 mov     [ebp+var_49], 1
.text:0040220F
.text:0040220F loc_40220F:                             ; CODE XREF: sub_401B10+6E7↑j
.text:0040220F                                         ; sub_401B10+7E6↓j ...
.text:0040220F                 cmp     [ebp+var_49], 0
.text:00402213                 jnz     short loc_40224D
.text:00402215                 mov     [ebp+var_49], 0
.text:00402219                 mov     eax, dword_42B088
.text:0040221E                 mov     edx, dword_42B08C
.text:00402224                 test    eax, eax
.text:00402226                 jz      short loc_40223E
.text:00402228                 cmp     eax, 1
.text:0040222B                 jz      loc_4022D7
.text:00402231
.text:00402231 loc_402231:                             ; CODE XREF: sub_401B10+7D0↓j
.text:00402231                 cmp     eax, 2
.text:00402234                 jz      loc_4022BB
.text:0040223A
.text:0040223A loc_40223A:                             ; CODE XREF: sub_401B10+7C2↓j
.text:0040223A                 mov     [ebp+var_49], 1
.text:0040223E
.text:0040223E loc_40223E:                             ; CODE XREF: sub_401B10+716↑j
.text:0040223E                                         ; sub_401B10+7BC↓j ...
.text:0040223E                 cmp     [ebp+var_49], 0
.text:00402242                 jz      short loc_402254
.text:00402244                 mov     eax, ds:dword_42C110
.text:00402249                 test    eax, eax
.text:0040224B                 jnz     short loc_402254
.text:0040224D
.text:0040224D loc_40224D:                             ; CODE XREF: sub_401B10+6D4↑j
.text:0040224D                                         ; sub_401B10+703↑j
.text:0040224D                 mov     ds:byte_42C1E0, 1
.text:00402254
.text:00402254 loc_402254:                             ; CODE XREF: sub_401B10+732↑j
.text:00402254                                         ; sub_401B10+73B↑j
.text:00402254                 mov     [esp+78h+Category], 1
.text:0040225B                 call    sub_41A900
.text:00402260                 test    eax, eax
.text:00402262                 js      short loc_4022B1
.text:00402264                 xor     esi, esi
.text:00402266
.text:00402266 loc_402266:                             ; CODE XREF: sub_401B10+79F↓j
.text:00402266                 mov     [esp+78h+Locale], 1 ; Function
.text:0040226E                 mov     edi, ds:dword_4019A4[esi*4]
.text:00402275                 mov     [esp+78h+Category], edi ; Signal
.text:00402278                 call    signal
.text:0040227D                 dec     eax
.text:0040227E                 setnz   dl
.text:00402281                 test    dl, dl
.text:00402283                 mov     [ebp+esi+var_3A], dl
.text:00402287                 jz      short loc_4022AB
.text:00402289                 cmp     edi, 0Fh
.text:0040228C                 mov     eax, offset Function
.text:00402291                 jz      short loc_402298
.text:00402293                 mov     eax, offset sub_409500
.text:00402298
.text:00402298 loc_402298:                             ; CODE XREF: sub_401B10+781↑j
.text:00402298                 mov     [esp+78h+Locale], eax ; Function
.text:0040229C                 mov     ecx, ds:dword_4019A4[esi*4]
.text:004022A3                 mov     [esp+78h+Category], ecx ; Signal
.text:004022A6                 call    signal
.text:004022AB
.text:004022AB loc_4022AB:                             ; CODE XREF: sub_401B10+777↑j
.text:004022AB                 inc     esi
.text:004022AC                 cmp     esi, 1
.text:004022AF                 jle     short loc_402266
.text:004022B1
.text:004022B1 loc_4022B1:                             ; CODE XREF: sub_401B10+752↑j
.text:004022B1                 call    sub_406370
.text:004022B6                 jmp     loc_401BB8
.text:004022BB ; ---------------------------------------------------------------------------
.text:004022BB
.text:004022BB loc_4022BB:                             ; CODE XREF: sub_401B10+724↑j
.text:004022BB                 cld
.text:004022BC                 mov     eax, 2
.text:004022C1                 mov     edi, offset a00 ; "00"
.text:004022C6                 mov     esi, edx
.text:004022C8                 mov     ecx, eax
.text:004022CA                 repe cmpsb
.text:004022CC                 jz      loc_40223E
.text:004022D2                 jmp     loc_40223A
.text:004022D7 ; ---------------------------------------------------------------------------
.text:004022D7
.text:004022D7 loc_4022D7:                             ; CODE XREF: sub_401B10+71B↑j
.text:004022D7                 cmp     byte ptr [edx], 30h ; '0'
.text:004022DA                 jz      loc_40223E
.text:004022E0                 jmp     loc_402231
.text:004022E5 ; ---------------------------------------------------------------------------
.text:004022E5
.text:004022E5 loc_4022E5:                             ; CODE XREF: sub_401B10+6F5↑j
.text:004022E5                 cld
.text:004022E6                 mov     eax, 2
.text:004022EB                 mov     edi, offset a00 ; "00"
.text:004022F0                 mov     esi, edx
.text:004022F2                 mov     ecx, eax
.text:004022F4                 repe cmpsb
.text:004022F6                 jz      loc_40220F
.text:004022FC                 jmp     loc_40220B
.text:00402301 ; ---------------------------------------------------------------------------
.text:00402301
.text:00402301 loc_402301:                             ; CODE XREF: sub_401B10+6EC↑j
.text:00402301                 cmp     byte ptr [edx], 30h ; '0'
.text:00402304                 jz      loc_40220F
.text:0040230A                 jmp     loc_402202
.text:0040230F ; ---------------------------------------------------------------------------
.text:0040230F
.text:0040230F loc_40230F:                             ; CODE XREF: sub_401B10+6C6↑j
.text:0040230F                 cld
.text:00402310                 mov     eax, 2
.text:00402315                 mov     edi, offset a00 ; "00"
.text:0040231A                 mov     esi, edx
.text:0040231C                 mov     ecx, eax
.text:0040231E                 repe cmpsb
.text:00402320                 jz      loc_4021E0
.text:00402326                 jmp     loc_4021DC
.text:0040232B ; ---------------------------------------------------------------------------
.text:0040232B
.text:0040232B loc_40232B:                             ; CODE XREF: sub_401B10+6BD↑j
.text:0040232B                 cmp     byte ptr [edx], 30h ; '0'
.text:0040232E                 jz      loc_4021E0
.text:00402334                 jmp     loc_4021D3
.text:00402339 ; ---------------------------------------------------------------------------
.text:00402339
.text:00402339 loc_402339:                             ; CODE XREF: sub_401B10+62C↑j
.text:00402339                 call    sub_415320
.text:00402339 sub_401B10      endp
.text:00402339
.text:00402339 ; ---------------------------------------------------------------------------
.text:0040233E ; const char Str2[7]
.text:0040233E Str2            db 'posix-',0           ; DATA XREF: sub_4025F0+E68↓o
.text:00402345 ; const char VarName[14]
.text:00402345 VarName         db 'QUOTING_STYLE',0    ; DATA XREF: sub_4025F0+C9↓o
.text:00402353 ; const char aLsBlockSize[14]
.text:00402353 aLsBlockSize    db 'LS_BLOCK_SIZE',0    ; DATA XREF: sub_4025F0:loc_40270A↓o
.text:00402361 ; const char aColumns[8]
.text:00402361 aColumns        db 'COLUMNS',0          ; DATA XREF: sub_4025F0:loc_402755↓o
.text:00402369 ; const char aTabsize[8]
.text:00402369 aTabsize        db 'TABSIZE',0          ; DATA XREF: sub_4025F0:loc_4027AD↓o
.text:00402371                 db 0EBh, 0Dh, 90h
.text:00402374                 align 10h
.text:00402380
.text:00402380 ; =============== S U B R O U T I N E =======================================
.text:00402380
.text:00402380
.text:00402380 sub_402380      proc near               ; DATA XREF: sub_4025F0+230↓o
.text:00402380                 popa
.text:00402381                 bound   esp, [ebx+64h]
.text:00402384                 db      67h
.text:00402384                 push    small 6B69h
.text:00402389                 insb
.text:0040238A                 insd
.text:0040238B                 outsb
.text:0040238C                 outsd
.text:0040238D                 jo      short near ptr loc_4023FE+2
.text:0040238F                 jb      short near ptr loc_402403+1
.text:00402391                 jz      short near ptr loc_402405+3
.text:00402393                 jbe     short loc_40240C
.text:00402395                 cmp     bh, [eax+41h]
.text:00402398                 inc     edx
.text:00402399                 inc     ebx
.text:0040239A                 inc     esp
.text:0040239B                 inc     esi
.text:0040239C                 inc     edi
.text:0040239D                 dec     eax
.text:0040239E                 dec     ecx
.text:0040239F                 cmp     cl, [esi+ecx*2+51h]
.text:004023A3                 push    edx
.text:004023A4                 push    ebx
.text:004023A5                 push    esp
.text:004023A6                 cmp     dl, [ebp+58h]
.text:004023A9                 xor     [eax], eax
.text:004023AB
.text:004023AB loc_4023AB:                             ; DATA XREF: sub_4025F0+6C5↓o
.text:004023AB                 insb
.text:004023AC                 jnb     short $+2
.text:004023AE
.text:004023AE loc_4023AE:                             ; CODE XREF: sub_402380+2C↑j
.text:004023AE                                         ; DATA XREF: sub_4025F0+6CA↓o
.text:004023AE                 inc     esp
.text:004023AF                 popa
.text:004023B0                 jbe     short near ptr loc_40241A+1
.text:004023B2                 and     fs:[ebp+61h], cl
.text:004023B6                 arpl    [ebx+65h], cx
.text:004023B9                 outsb
.text:004023BA                 jp      short loc_402425
.text:004023BC                 add     gs:[edx+69h], dl
.text:004023C0                 arpl    [eax+61h], bp
.text:004023C3                 jb      short near ptr loc_402427+2
.text:004023C5                 and     [ebx+74h], dl
.text:004023C8                 popa
.text:004023C9                 insb
.text:004023CA                 insb
.text:004023CB                 insd
.text:004023CC                 popa
.text:004023CD                 outsb
.text:004023CE                 add     ds:302E332Eh, dh
.text:004023D4                 add     [edi+4Eh], al
.text:004023D7                 push    ebp
.text:004023D8                 and     [ebx+6Fh], ah
.text:004023DB                 jb      short near ptr loc_402440+2
.text:004023DD                 jnz     short near ptr loc_402450+3
.text:004023DF                 imul    ebp, [ebx+esi*2+0], 726964h
.text:004023E7
.text:004023E7 loc_4023E7:                             ; DATA XREF: sub_4025F0+6F9↓o
.text:004023E7                 jbe     short near ptr loc_40244A+3
.text:004023E9                 imul    esi, [edx+0], 2E007E2Ah
.text:004023F0                 sub     bh, [esi+0]
.text:004023F3
.text:004023F3 loc_4023F3:                             ; DATA XREF: sub_4025F0+86F↓o
.text:004023F3                 imul    ebp, [esi+76h], 64696C61h
.text:004023FA                 and     [ecx+62h], dh
.text:004023FE
.text:004023FE loc_4023FE:                             ; CODE XREF: sub_402380+D↑j
.text:004023FE                 and     [ebx+69h], dh
.text:00402401                 jp      short near ptr loc_402466+2
.text:00402403
.text:00402403 loc_402403:                             ; CODE XREF: sub_402380+F↑j
.text:00402403                 cmp     ah, [eax]
.text:00402405
.text:00402405 loc_402405:                             ; CODE XREF: sub_402380+11↑j
.text:00402405                 and     eax, 6E690073h
.text:0040240A                 jbe     short loc_40246D
.text:0040240C
.text:0040240C loc_40240C:                             ; CODE XREF: sub_402380+13↑j
.text:0040240C                 insb
.text:0040240D                 imul    esp, [eax+6Ch], 20656E69h
.text:00402415                 ja      short near ptr loc_40247F+1
.text:00402417                 db      64h
.text:00402417                 jz      short near ptr loc_40247F+3
.text:0040241A
.text:0040241A loc_40241A:                             ; CODE XREF: sub_402380+30↑j
.text:0040241A                 cmp     ah, [eax]
.text:0040241C
.text:0040241C loc_40241C:                             ; DATA XREF: sub_4025F0+B80↓o
.text:0040241C                 and     eax, 2D2D0073h
.text:00402421                 arpl    [edi+6Ch], bp
.text:00402424                 outsd
.text:00402425
.text:00402425 loc_402425:                             ; CODE XREF: sub_402380+3A↑j
.text:00402425                 jb      short $+2
.text:00402427
.text:00402427 loc_402427:                             ; CODE XREF: sub_402380:loc_402425↑j
.text:00402427                                         ; sub_402380+43↑j
.text:00402427                                         ; DATA XREF: ...
.text:00402427                 sub     eax, 726F662Dh
.text:0040242C                 insd
.text:0040242D                 popa
.text:0040242E                 jz      short $+2
.text:00402430
.text:00402430 loc_402430:                             ; CODE XREF: sub_402380+AE↑j
.text:00402430                                         ; DATA XREF: sub_4025F0+C4E↓o
.text:00402430                 sub     eax, 646E692Dh
.text:00402435                 imul    esp, [ebx+61h], 2D726F74h
.text:0040243C                 jnb     short loc_4024B2
.text:0040243E                 jns     short near ptr loc_4024A9+3
.text:00402440
.text:00402440 loc_402440:                             ; CODE XREF: sub_402380+5B↑j
.text:00402440                                         ; DATA XREF: sub_4025F0+C98↓o
.text:00402440                 add     gs:6F75712Dh, ch
.text:00402447                 jz      short loc_4024B2
.text:00402449                 outsb
.text:0040244A
.text:0040244A loc_40244A:                             ; CODE XREF: sub_402380:loc_4023E7↑j
.text:0040244A                 db      67h
.text:0040244A                 sub     eax, 6C797473h
.text:00402450
.text:00402450 loc_402450:                             ; CODE XREF: sub_402380+5D↑j
.text:00402450                                         ; DATA XREF: sub_4025F0+CFC↓o
.text:00402450                 add     gs:726F732Dh, ch
.text:00402457                 jz      short $+2
.text:00402459
.text:00402459 loc_402459:                             ; CODE XREF: sub_402380+D7↑j
.text:00402459                                         ; DATA XREF: sub_4025F0+D40↓o
.text:00402459                 sub     eax, 6D69742Dh
.text:0040245E                 add     gs:[edx], ch
.text:00402461
.text:00402461 loc_402461:                             ; DATA XREF: sub_4025F0+ECD↓o
.text:00402461                 cmp     eax, 74007C40h
.text:00402466
.text:00402466 loc_402466:                             ; CODE XREF: sub_402380+81↑j
.text:00402466                 imul    ebp, [ebp+65h], 79747320h
.text:0040246D
.text:0040246D loc_40246D:                             ; CODE XREF: sub_402380+8A↑j
.text:0040246D                 insb
.text:0040246E                 add     gs:6D252D59h, ah
.text:00402475                 sub     eax, 206425h
.text:0040247A
.text:0040247A loc_40247A:                             ; DATA XREF: sub_4025F0+F41↓o
.text:0040247A                 and     eax, 64252D6Dh
.text:0040247F
.text:0040247F loc_40247F:                             ; CODE XREF: sub_402380+95↑j
.text:0040247F                                         ; sub_402380+97↑j
.text:0040247F                 and     ds:4D253A48h, ah
.text:00402485                 add     ds:6D252D59h, ah
.text:0040248B                 sub     eax, 25206425h
.text:00402490                 dec     eax
.text:00402491                 cmp     ah, ds:53253A4Dh
.text:00402497                 db      2Eh
.text:00402497                 and     eax, 7A25204Eh
.text:0040249D                 add     ds:6D252D59h, ah
.text:004024A3                 sub     eax, 25206425h
.text:004024A8                 dec     eax
.text:004024A9
.text:004024A9 loc_4024A9:                             ; CODE XREF: sub_402380+BE↑j
.text:004024A9                 cmp     ah, ds:6E69004Dh
.text:004024AF                 jbe     short near ptr loc_40250E+4
.text:004024B1                 insb
.text:004024B2
.text:004024B2 loc_4024B2:                             ; CODE XREF: sub_402380+BC↑j
.text:004024B2                                         ; sub_402380+C7↑j
.text:004024B2                 imul    esp, [eax+74h], 20656D69h
.text:004024BA                 jnb     short near ptr loc_40252E+2
.text:004024BC                 jns     short near ptr loc_402529+1
.text:004024BE                 and     gs:[esi+6Fh], ah
.text:004024C2                 jb      short near ptr loc_40252E+3
.text:004024C4                 popa
.text:004024C5                 jz      short loc_4024E7
.text:004024C7
.text:004024C7 loc_4024C7:                             ; DATA XREF: sub_4025F0:loc_4035FC↓o
.text:004024C7                 and     eax, 49540073h
.text:004024CC                 dec     ebp
.text:004024CD                 inc     ebp
.text:004024CE                 pop     edi
.text:004024CF                 push    ebx
.text:004024D0                 push    esp
.text:004024D1                 pop     ecx
.text:004024D2                 dec     esp
.text:004024D3                 inc     ebp
.text:004024D4                 add     [eax+6Fh], dh
.text:004024D7                 jnb     short near ptr loc_402540+2
.text:004024D9                 js      short near ptr loc_402507+1
.text:004024DB                 insb
.text:004024DC                 outsd
.text:004024DD                 outsb
.text:004024DE                 db      67h
.text:004024DE                 sub     eax, 6F7369h
.text:004024E4                 nop
.text:004024E5                 nop
.text:004024E6                 nop
.text:004024E7
.text:004024E7 loc_4024E7:                             ; CODE XREF: sub_402380+145↑j
.text:004024E7                 nop
.text:004024E8                 nop
.text:004024E9                 nop
.text:004024EA                 nop
.text:004024EB                 nop
.text:004024EC                 nop
.text:004024ED                 nop
.text:004024EE                 nop
.text:004024EF                 nop
.text:004024F0                 nop
.text:004024F1                 nop
.text:004024F2                 nop
.text:004024F3                 nop
.text:004024F4                 nop
.text:004024F5                 nop
.text:004024F6                 nop
.text:004024F7                 nop
.text:004024F8                 nop
.text:004024F9                 nop
.text:004024FA                 nop
.text:004024FB                 nop
.text:004024FC                 nop
.text:004024FD                 nop
.text:004024FE                 nop
.text:004024FF                 nop
.text:00402500
.text:00402500 loc_402500:                             ; DATA XREF: sub_4025F0+1066↓o
.text:00402500                 imul    esp, [edi+6Eh], 6E69726Fh
.text:00402507
.text:00402507 loc_402507:                             ; CODE XREF: sub_402380+159↑j
.text:00402507                 and     [bx+di+6Eh], ch
.text:0040250B                 jbe     short near ptr loc_40256B+3
.text:0040250D                 insb
.text:0040250E
.text:0040250E loc_40250E:                             ; CODE XREF: sub_402380+12F↑j
.text:0040250E                 imul    esp, [eax+74h], 73206261h
.text:00402516                 imul    edi, [edx+65h], 206E6920h
.text:0040251D                 outs    dx, byte ptr gs:[esi]
.text:0040251F                 jbe     short near ptr loc_402585+5
.text:00402521                 jb      short loc_402592
.text:00402523                 outsb
.text:00402524                 insd
.text:00402525                 outs    dx, byte ptr gs:[esi]
.text:00402527                 jz      short near ptr loc_402547+2
.text:00402529
.text:00402529 loc_402529:                             ; CODE XREF: sub_402380+13C↑j
.text:00402529                 jbe     short loc_40258C
.text:0040252B                 jb      short loc_402596
.text:0040252D                 popa
.text:0040252E
.text:0040252E loc_40252E:                             ; CODE XREF: sub_402380+13A↑j
.text:0040252E                                         ; sub_402380+142↑j
.text:0040252E                 bound   ebp, [ebp+20h]
.text:00402532                 push    esp
.text:00402533                 inc     ecx
.text:00402534                 inc     edx
.text:00402535                 push    ebx
.text:00402536                 dec     ecx
.text:00402537                 pop     edx
.text:00402538                 inc     ebp
.text:00402539                 cmp     ah, [eax]
.text:0040253B                 and     eax, 0F6890073h
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_402380+157↑j
.text:00402540                                         ; DATA XREF: sub_4025F0+10DC↓o
.text:00402540                 imul    esp, [edi+6Eh], 6E69726Fh
.text:00402547
.text:00402547 loc_402547:                             ; CODE XREF: sub_402380+1A7↑j
.text:00402547                 and     [bx+di+6Eh], ch
.text:0040254B                 jbe     short loc_4025AE
.text:0040254D                 insb
.text:0040254E                 imul    esp, [eax+77h], 68746469h
.text:00402556                 and     [ecx+6Eh], ch
.text:00402559                 and     [ebp+6Eh], ah
.text:0040255C                 jbe     short near ptr loc_4025C6+1
.text:0040255E                 jb      short loc_4025CF
.text:00402560                 outsb
.text:00402561                 insd
.text:00402562                 outs    dx, byte ptr gs:[esi]
.text:00402564                 jz      short near ptr loc_402585+1
.text:00402566                 jbe     short near ptr loc_4025C8+1
.text:00402568                 jb      short loc_4025D3
.text:0040256A                 popa
.text:0040256B
.text:0040256B loc_40256B:                             ; CODE XREF: sub_402380+18B↑j
.text:0040256B                 bound   ebp, [ebp+20h]
.text:0040256F                 inc     ebx
.text:00402570                 dec     edi
.text:00402571                 dec     esp
.text:00402572                 push    ebp
.text:00402573                 dec     ebp
.text:00402574                 dec     esi
.text:00402575                 push    ebx
.text:00402576                 cmp     ah, [eax]
.text:00402578
.text:00402578 loc_402578:                             ; DATA XREF: sub_4025F0:loc_4036FC↓o
.text:00402578                 and     eax, 4C420073h
.text:0040257D                 dec     edi
.text:0040257E                 inc     ebx
.text:0040257F                 dec     ebx
.text:00402580                 pop     edi
.text:00402581                 push    ebx
.text:00402582                 dec     ecx
.text:00402583                 pop     edx
.text:00402584                 inc     ebp
.text:00402585
.text:00402585 loc_402585:                             ; CODE XREF: sub_402380+1E4↑j
.text:00402585                                         ; sub_402380+19F↑j
.text:00402585                 add     [eax-6F6F6F70h], dl
.text:0040258B                 nop
.text:0040258C
.text:0040258C loc_40258C:                             ; CODE XREF: sub_402380:loc_402529↑j
.text:0040258C                 nop
.text:0040258D                 nop
.text:0040258E                 nop
.text:0040258F                 nop
.text:00402590                 nop
.text:00402591                 nop
.text:00402592
.text:00402592 loc_402592:                             ; CODE XREF: sub_402380+1A1↑j
.text:00402592                 nop
.text:00402593                 nop
.text:00402594                 nop
.text:00402595                 nop
.text:00402596
.text:00402596 loc_402596:                             ; CODE XREF: sub_402380+1AB↑j
.text:00402596                 nop
.text:00402597                 nop
.text:00402598                 nop
.text:00402599                 nop
.text:0040259A                 nop
.text:0040259B                 nop
.text:0040259C                 nop
.text:0040259D                 nop
.text:0040259E                 nop
.text:0040259F                 nop
.text:004025A0
.text:004025A0 loc_4025A0:                             ; DATA XREF: sub_4025F0+112D↓o
.text:004025A0                 imul    esp, [edi+6Eh], 6E69726Fh
.text:004025A7                 and     [bx+di+6Eh], ch
.text:004025AB                 jbe     short near ptr loc_40260B+3
.text:004025AD                 insb
.text:004025AE
.text:004025AE loc_4025AE:                             ; CODE XREF: sub_402380+1CB↑j
.text:004025AE                 imul    esp, [eax+76h], 65756C61h
.text:004025B6                 and     [edi+66h], ch
.text:004025B9                 and     [ebp+6Eh], ah
.text:004025BC                 jbe     short loc_402627
.text:004025BE                 jb      short near ptr loc_40262C+3
.text:004025C0                 outsb
.text:004025C1                 insd
.text:004025C2                 outs    dx, byte ptr gs:[esi]
.text:004025C4                 jz      short loc_4025E6
.text:004025C6
.text:004025C6 loc_4025C6:                             ; CODE XREF: sub_402380+1DC↑j
.text:004025C6                 jbe     short near ptr loc_402627+2
.text:004025C8
.text:004025C8 loc_4025C8:                             ; CODE XREF: sub_402380+1E6↑j
.text:004025C8                 jb      short loc_402633
.text:004025CA                 popa
.text:004025CB                 bound   ebp, [ebp+20h]
.text:004025CF
.text:004025CF loc_4025CF:                             ; CODE XREF: sub_402380+1DE↑j
.text:004025CF                 push    ecx
.text:004025D0                 push    ebp
.text:004025D1                 dec     edi
.text:004025D2                 push    esp
.text:004025D3
.text:004025D3 loc_4025D3:                             ; CODE XREF: sub_402380+1E8↑j
.text:004025D3                 dec     ecx
.text:004025D4                 dec     esi
.text:004025D5                 inc     edi
.text:004025D6                 pop     edi
.text:004025D7                 push    ebx
.text:004025D8                 push    esp
.text:004025D9                 pop     ecx
.text:004025DA                 dec     esp
.text:004025DB                 inc     ebp
.text:004025DC                 cmp     ah, [eax]
.text:004025DE                 and     eax, 0DEB0073h
.text:004025E3                 nop
.text:004025E4                 nop
.text:004025E5                 nop
.text:004025E6
.text:004025E6 loc_4025E6:                             ; CODE XREF: sub_402380+244↑j
.text:004025E6                 nop
.text:004025E7                 nop
.text:004025E8                 nop
.text:004025E9                 nop
.text:004025EA                 nop
.text:004025EB                 nop
.text:004025EC                 nop
.text:004025ED                 nop
.text:004025EE                 nop
.text:004025EF                 nop
.text:004025EF sub_402380      endp ; sp-analysis failed
.text:004025EF
.text:004025F0
.text:004025F0 ; =============== S U B R O U T I N E =======================================
.text:004025F0
.text:004025F0
.text:004025F0 sub_4025F0      proc near               ; CODE XREF: sub_401B10+94↑p
.text:004025F0
.text:004025F0 FileHandle      = dword ptr -5Ch
.text:004025F0 Str2            = dword ptr -58h
.text:004025F0 MaxCount        = dword ptr -54h
.text:004025F0 var_50          = byte ptr -50h
.text:004025F0 Str             = dword ptr -4Ch
.text:004025F0 var_48          = dword ptr -48h
.text:004025F0 var_44          = dword ptr -44h
.text:004025F0 var_31          = byte ptr -31h
.text:004025F0 var_30          = dword ptr -30h
.text:004025F0 var_2C          = dword ptr -2Ch
.text:004025F0 var_28          = dword ptr -28h
.text:004025F0 var_24          = byte ptr -24h
.text:004025F0 var_22          = word ptr -22h
.text:004025F0 var_18          = dword ptr -18h
.text:004025F0 arg_0           = dword ptr  4
.text:004025F0 arg_4           = dword ptr  8
.text:004025F0
.text:004025F0                 push    ebp
.text:004025F1                 xor     ebp, ebp
.text:004025F3                 push    edi
.text:004025F4                 push    esi
.text:004025F5                 push    ebx
.text:004025F6                 sub     esp, 4Ch
.text:004025F9                 mov     eax, dword_42B0D0
.text:004025FE                 mov     [esp+5Ch+var_31], 0
.text:00402603                 mov     esi, [esp+5Ch+arg_0]
.text:00402607                 mov     edi, [esp+5Ch+arg_4]
.text:0040260B
.text:0040260B loc_40260B:                             ; CODE XREF: sub_402380+22B↑j
.text:0040260B                 mov     ds:byte_42C260, 0
.text:00402612                 cmp     eax, 2
.text:00402615                 jz      loc_40378E
.text:0040261B                 cmp     eax, 2
.text:0040261E                 jg      loc_403764
.text:00402624                 dec     eax
.text:00402625                 jz      short loc_40262C
.text:00402627
.text:00402627 loc_402627:                             ; CODE XREF: sub_402380+23C↑j
.text:00402627                                         ; sub_4025F0+1177↓j ...
.text:00402627                 call    abort
.text:0040262C ; ---------------------------------------------------------------------------
.text:0040262C
.text:0040262C loc_40262C:                             ; CODE XREF: sub_4025F0+35↑j
.text:0040262C                                         ; sub_402380+23E↑j
.text:0040262C                 mov     [esp+5Ch+FileHandle], 1 ; FileHandle
.text:00402633
.text:00402633 loc_402633:                             ; CODE XREF: sub_402380:loc_4025C8↑j
.text:00402633                 call    _isatty
.text:00402638                 test    eax, eax
.text:0040263A                 jz      loc_40374D
.text:00402640                 mov     ds:byte_42C260, 1
.text:00402647                 mov     ecx, 2
.text:0040264C                 mov     ds:dword_42C110, ecx
.text:00402652
.text:00402652 loc_402652:                             ; CODE XREF: sub_4025F0+116F↓j
.text:00402652                                         ; sub_4025F0+1199↓j
.text:00402652                 mov     ds:byte_42C140, 0
.text:00402659                 xor     ebx, ebx
.text:0040265B                 xor     edx, edx
.text:0040265D                 mov     ds:dword_42C120, ebx
.text:00402663                 mov     ecx, 1
.text:00402668                 xor     eax, eax
.text:0040266A                 mov     ds:dword_42C130, ecx
.text:00402670                 mov     ebx, 1
.text:00402675                 xor     ecx, ecx
.text:00402677                 mov     ds:dword_42C1B0, edx
.text:0040267D                 xor     edx, edx
.text:0040267F                 mov     ds:dword_42C200, ebx
.text:00402685                 mov     ds:byte_42C160, 0
.text:0040268C                 mov     ds:byte_42C170, 0
.text:00402693                 mov     ds:byte_42C1F0, 0
.text:0040269A                 mov     ds:byte_42C210, 0
.text:004026A1                 mov     ds:byte_42C220, 0
.text:004026A8                 mov     ds:dword_42C230, eax
.text:004026AD                 mov     ds:dword_42C240, ecx
.text:004026B3                 mov     ds:dword_42C250, edx
.text:004026B9                 mov     [esp+5Ch+FileHandle], offset VarName ; VarName
.text:004026C0                 call    getenv
.text:004026C5                 test    eax, eax
.text:004026C7                 mov     ebx, eax
.text:004026C9                 jz      short loc_40270A
.text:004026CB                 mov     dword ptr [esp+5Ch+var_50], 4 ; int
.text:004026D3                 mov     [esp+5Ch+MaxCount], offset dword_40CB60 ; int
.text:004026DB                 mov     [esp+5Ch+Str2], offset off_40CB40 ; int
.text:004026E3                 mov     [esp+5Ch+FileHandle], eax ; char *
.text:004026E6                 call    sub_411780
.text:004026EB                 test    eax, eax
.text:004026ED                 js      loc_403715
.text:004026F3                 mov     [esp+5Ch+FileHandle], 0
.text:004026FA                 mov     edx, ds:dword_40CB60[eax*4]
.text:00402701                 mov     [esp+5Ch+Str2], edx
.text:00402705                 call    sub_40D690
.text:0040270A
.text:0040270A loc_40270A:                             ; CODE XREF: sub_4025F0+D9↑j
.text:0040270A                                         ; sub_4025F0+1158↓j
.text:0040270A                 mov     [esp+5Ch+FileHandle], offset aLsBlockSize ; VarName
.text:00402711                 call    getenv
.text:00402716                 mov     [esp+5Ch+FileHandle], eax ; char *
.text:00402719                 mov     ebx, eax
.text:0040271B                 mov     [esp+5Ch+MaxCount], offset dword_42C190 ; int
.text:00402723                 mov     [esp+5Ch+Str2], 0 ; char
.text:0040272B                 call    sub_413320
.text:00402730                 mov     ds:dword_42C180, eax
.text:00402735                 test    ebx, ebx
.text:00402737                 jz      loc_4036FC
.text:0040273D
.text:0040273D loc_40273D:                             ; CODE XREF: sub_4025F0+1120↓j
.text:0040273D                 mov     ebx, ds:dword_42C190
.text:00402743                 mov     ecx, ds:dword_42C194
.text:00402749                 mov     dword_42B020, ebx
.text:0040274F                 mov     dword_42B024, ecx
.text:00402755
.text:00402755 loc_402755:                             ; CODE XREF: sub_4025F0+111A↓j
.text:00402755                 mov     [esp+5Ch+FileHandle], offset aColumns ; VarName
.text:0040275C                 mov     edx, 50h ; 'P'
.text:00402761                 mov     ds:dword_42C2B0, edx
.text:00402767                 call    getenv
.text:0040276C                 test    eax, eax
.text:0040276E                 mov     ebx, eax
.text:00402770                 jz      short loc_40277B
.text:00402772                 cmp     byte ptr [eax], 0
.text:00402775                 jnz     loc_403686
.text:0040277B
.text:0040277B loc_40277B:                             ; CODE XREF: sub_4025F0+180↑j
.text:0040277B                                         ; sub_4025F0+10CF↓j ...
.text:0040277B                 mov     [esp+5Ch+Str2], 40087468h
.text:00402783                 lea     ebx, [esp+5Ch+var_24]
.text:00402787                 mov     [esp+5Ch+MaxCount], ebx
.text:0040278B                 mov     [esp+5Ch+FileHandle], 1
.text:00402792                 call    sub_41A8E0
.text:00402797                 inc     eax
.text:00402798                 jz      short loc_4027AD
.text:0040279A                 movzx   eax, [esp+5Ch+var_22]
.text:0040279F                 test    ax, ax
.text:004027A2                 jz      short loc_4027AD
.text:004027A4                 movzx   edx, ax
.text:004027A7                 mov     ds:dword_42C2B0, edx
.text:004027AD
.text:004027AD loc_4027AD:                             ; CODE XREF: sub_4025F0+1A8↑j
.text:004027AD                                         ; sub_4025F0+1B2↑j
.text:004027AD                 mov     [esp+5Ch+FileHandle], offset aTabsize ; VarName
.text:004027B4                 call    getenv
.text:004027B9                 test    eax, eax
.text:004027BB                 mov     ecx, 8
.text:004027C0                 mov     ebx, eax
.text:004027C2                 mov     ds:dword_42C290, ecx
.text:004027C8                 jz      short loc_402810
.text:004027CA                 mov     [esp+5Ch+Str], 0 ; Str
.text:004027D2                 lea     edx, [esp+5Ch+var_28]
.text:004027D6                 mov     dword ptr [esp+5Ch+var_50], edx ; int
.text:004027DA                 mov     [esp+5Ch+MaxCount], 0 ; int
.text:004027E2                 mov     [esp+5Ch+Str2], 0 ; int
.text:004027EA                 mov     [esp+5Ch+FileHandle], eax ; int
.text:004027ED                 call    sub_413DA0
.text:004027F2                 test    eax, eax
.text:004027F4                 jnz     loc_40364E
.text:004027FA                 mov     eax, [esp+5Ch+var_28]
.text:004027FE
.text:004027FE loc_4027FE:                             ; CODE XREF: sub_4025F0+85C↓j
.text:004027FE                 mov     ds:dword_42C290, eax
.text:00402803                 lea     esi, [esi+0]
.text:00402809                 lea     edi, [edi+0]
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_4025F0+1D8↑j
.text:00402810                                         ; sub_4025F0+6B3↓j ...
.text:00402810                 mov     [esp+5Ch+Str], 0 ; int
.text:00402818                 mov     dword ptr [esp+5Ch+var_50], offset off_401560 ; int
.text:00402820                 mov     [esp+5Ch+MaxCount], offset sub_402380 ; char *
.text:00402828                 mov     [esp+5Ch+Str2], edi ; int
.text:0040282C                 mov     [esp+5Ch+FileHandle], esi ; int
.text:0040282F                 call    sub_413BF0
.text:00402834                 cmp     eax, 0FFFFFFFFh
.text:00402837                 jz      loc_403359
.text:0040283D                 add     eax, 83h ; 'ƒ'  ; switch 273 cases
.text:00402842                 cmp     eax, 110h
.text:00402847                 ja      def_40284D      ; jumptable 0040284D default case, cases -129-48,50-64,69,74,75,77,79,80,86,87,89-96,101,106,121-127
.text:0040284D                 jmp     ds:jpt_40284D[eax*4] ; switch jump
.text:0040284D ; ---------------------------------------------------------------------------
.text:00402854 jpt_40284D      dd offset loc_402CA8, offset loc_402D0F, offset def_40284D
.text:00402854                                         ; DATA XREF: sub_4025F0+25D↑r
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D ; jump table for switch statement
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset loc_402D2A, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset loc_402D47, offset loc_402D64
.text:00402854                 dd offset loc_402D81, offset loc_402D88, offset def_40284D
.text:00402854                 dd offset loc_402D94, offset loc_402DA4, offset loc_402DB0
.text:00402854                 dd offset loc_402DC0, offset def_40284D, offset def_40284D
.text:00402854                 dd offset loc_402DCB, offset def_40284D, offset loc_402DD2
.text:00402854                 dd offset def_40284D, offset def_40284D, offset loc_402DEB
.text:00402854                 dd offset loc_402DF5, offset loc_402E01, offset loc_402E16
.text:00402854                 dd offset loc_402E8C, offset def_40284D, offset def_40284D
.text:00402854                 dd offset loc_402E99, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset loc_402C98, offset loc_402EA9, offset loc_402EB6
.text:00402854                 dd offset loc_402EC6, offset def_40284D, offset loc_402ED2
.text:00402854                 dd offset loc_402F25, offset loc_402F39, offset loc_402F6F
.text:00402854                 dd offset def_40284D, offset loc_402F7B, offset loc_402F2C
.text:00402854                 dd offset loc_402FA3, offset loc_402FB2, offset loc_402FBE
.text:00402854                 dd offset loc_402FCB, offset loc_402FDB, offset loc_402FE7
.text:00402854                 dd offset loc_402FF3, offset loc_402FFF, offset loc_403009
.text:00402854                 dd offset loc_403013, offset loc_40301D, offset loc_40309E
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset def_40284D, offset def_40284D
.text:00402854                 dd offset def_40284D, offset loc_4030B4, offset loc_4030C0
.text:00402854                 dd offset loc_403100, offset loc_403185, offset loc_403195
.text:00402854                 dd offset loc_4031D9, offset loc_4031EB, offset loc_403212
.text:00402854                 dd offset loc_40325C, offset loc_4032A4, offset loc_4032B0
.text:00402854                 dd offset loc_4032C0, offset loc_403304, offset loc_40334E
.text:00402C98 ; ---------------------------------------------------------------------------
.text:00402C98
.text:00402C98 loc_402C98:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402C98                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402C98                 mov     ebx, 2          ; jumptable 0040284D case 97
.text:00402C9D                 mov     ds:dword_42C230, ebx
.text:00402CA3                 jmp     loc_402810
.text:00402CA8 ; ---------------------------------------------------------------------------
.text:00402CA8
.text:00402CA8 loc_402CA8:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402CA8                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402CA8                 mov     [esp+5Ch+var_44], 0 ; jumptable 0040284D case -131
.text:00402CB0                 mov     eax, dword_42B0D0
.text:00402CB5                 mov     edx, offset loc_4023AB
.text:00402CBA                 mov     [esp+5Ch+var_48], offset loc_4023AE
.text:00402CC2                 mov     [esp+5Ch+Str], 4023BEh ; char
.text:00402CCA                 cmp     eax, 1
.text:00402CCD                 mov     dword ptr [esp+5Ch+var_50], 4023CFh ; int
.text:00402CD5                 mov     [esp+5Ch+MaxCount], 4023D5h ; int
.text:00402CDD                 jz      short loc_402CEE
.text:00402CDF                 cmp     eax, 2
.text:00402CE2                 mov     edx, 4023E3h
.text:00402CE7                 jz      short loc_402CEE
.text:00402CE9                 mov     edx, offset loc_4023E7
.text:00402CEE
.text:00402CEE loc_402CEE:                             ; CODE XREF: sub_4025F0+6ED↑j
.text:00402CEE                                         ; sub_4025F0+6F7↑j
.text:00402CEE                 mov     [esp+5Ch+Str2], edx ; FILE *
.text:00402CF2                 mov     esi, ds:_iob
.text:00402CF8                 add     esi, 20h ; ' '
.text:00402CFB                 mov     [esp+5Ch+FileHandle], esi ; FILE *
.text:00402CFE                 call    sub_413BB0
.text:00402D03                 mov     [esp+5Ch+FileHandle], 0 ; Code
.text:00402D0A                 call    exit
.text:00402D0F ; ---------------------------------------------------------------------------
.text:00402D0F
.text:00402D0F loc_402D0F:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D0F                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D0F                 mov     [esp+5Ch+FileHandle], 0 ; jumptable 0040284D case -130
.text:00402D16                 lea     esi, [esi+0]
.text:00402D19                 lea     edi, [edi+0]
.text:00402D20
.text:00402D20 loc_402D20:                             ; CODE XREF: sub_4025F0+ABF↓j
.text:00402D20                 call    sub_409020
.text:00402D20 ; ---------------------------------------------------------------------------
.text:00402D25                 db 0E9h ; é
.text:00402D26                 db 0E6h ; æ
.text:00402D27                 db 0FAh ; ú
.text:00402D28                 db 0FFh ; ÿ
.text:00402D29                 db 0FFh ; ÿ
.text:00402D2A ; ---------------------------------------------------------------------------
.text:00402D2A
.text:00402D2A loc_402D2A:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D2A                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D2A                 mov     eax, ds:dword_42C110 ; jumptable 0040284D case 49
.text:00402D2F                 test    eax, eax
.text:00402D31                 jz      loc_402810
.text:00402D37                 mov     edx, 1
.text:00402D3C
.text:00402D3C loc_402D3C:                             ; CODE XREF: sub_4025F0+796↓j
.text:00402D3C                 mov     ds:dword_42C110, edx
.text:00402D42                 jmp     loc_402810
.text:00402D47 ; ---------------------------------------------------------------------------
.text:00402D47
.text:00402D47 loc_402D47:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D47                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D47                 mov     ecx, ds:dword_42C230 ; jumptable 0040284D case 65
.text:00402D4D                 test    ecx, ecx
.text:00402D4F                 jnz     loc_402810
.text:00402D55                 mov     eax, 1
.text:00402D5A                 mov     ds:dword_42C230, eax
.text:00402D5F                 jmp     loc_402810
.text:00402D64 ; ---------------------------------------------------------------------------
.text:00402D64
.text:00402D64 loc_402D64:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D64                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D64                 mov     [esp+5Ch+FileHandle], 4023ECh ; jumptable 0040284D case 66
.text:00402D6B                 call    sub_404360
.text:00402D70                 mov     [esp+5Ch+FileHandle], 4023EFh
.text:00402D77
.text:00402D77 loc_402D77:                             ; CODE XREF: sub_4025F0+7D9↓j
.text:00402D77                 call    sub_404360
.text:00402D7C                 jmp     loc_402810
.text:00402D81 ; ---------------------------------------------------------------------------
.text:00402D81
.text:00402D81 loc_402D81:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D81                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D81                 mov     edx, 2          ; jumptable 0040284D case 67
.text:00402D86                 jmp     short loc_402D3C
.text:00402D88 ; ---------------------------------------------------------------------------
.text:00402D88
.text:00402D88 loc_402D88:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D88                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D88                 mov     ds:byte_42C1A0, 1 ; jumptable 0040284D case 68
.text:00402D8F                 jmp     loc_402810
.text:00402D94 ; ---------------------------------------------------------------------------
.text:00402D94
.text:00402D94 loc_402D94:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402D94                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402D94                 mov     ebx, 1          ; jumptable 0040284D case 70
.text:00402D99                 mov     ds:dword_42C1B0, ebx
.text:00402D9F                 jmp     loc_402810
.text:00402DA4 ; ---------------------------------------------------------------------------
.text:00402DA4
.text:00402DA4 loc_402DA4:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DA4                                         ; sub_4025F0+9D6↓j
.text:00402DA4                                         ; DATA XREF: ...
.text:00402DA4                 mov     byte_42B019, 0  ; jumptable 0040284D case 71
.text:00402DAB                 jmp     loc_402810
.text:00402DB0 ; ---------------------------------------------------------------------------
.text:00402DB0
.text:00402DB0 loc_402DB0:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DB0                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DB0                 mov     ecx, 3          ; jumptable 0040284D case 72
.text:00402DB5
.text:00402DB5 loc_402DB5:                             ; CODE XREF: sub_4025F0+7E0↓j
.text:00402DB5                 mov     ds:dword_42C200, ecx
.text:00402DBB                 jmp     loc_402810
.text:00402DC0 ; ---------------------------------------------------------------------------
.text:00402DC0
.text:00402DC0 loc_402DC0:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DC0                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DC0                 mov     ebx, ds:dword_42D320 ; jumptable 0040284D case 73
.text:00402DC6                 mov     [esp+5Ch+FileHandle], ebx
.text:00402DC9                 jmp     short loc_402D77
.text:00402DCB ; ---------------------------------------------------------------------------
.text:00402DCB
.text:00402DCB loc_402DCB:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DCB                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DCB                 mov     ecx, 5          ; jumptable 0040284D case 76
.text:00402DD0                 jmp     short loc_402DB5
.text:00402DD2 ; ---------------------------------------------------------------------------
.text:00402DD2
.text:00402DD2 loc_402DD2:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DD2                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DD2                 mov     [esp+5Ch+Str2], 0 ; jumptable 0040284D case 78
.text:00402DDA
.text:00402DDA loc_402DDA:                             ; CODE XREF: sub_4025F0+803↓j
.text:00402DDA                                         ; sub_4025F0+8C1↓j ...
.text:00402DDA                 mov     [esp+5Ch+FileHandle], 0
.text:00402DE1                 call    sub_40D690
.text:00402DE6                 jmp     loc_402810
.text:00402DEB ; ---------------------------------------------------------------------------
.text:00402DEB
.text:00402DEB loc_402DEB:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DEB                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DEB                 mov     [esp+5Ch+Str2], 3 ; jumptable 0040284D case 81
.text:00402DF3                 jmp     short loc_402DDA
.text:00402DF5 ; ---------------------------------------------------------------------------
.text:00402DF5
.text:00402DF5 loc_402DF5:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402DF5                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402DF5                 mov     ds:byte_42C210, 1 ; jumptable 0040284D case 82
.text:00402DFC                 jmp     loc_402810
.text:00402E01 ; ---------------------------------------------------------------------------
.text:00402E01
.text:00402E01 loc_402E01:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402E01                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402E01                 mov     edx, 4          ; jumptable 0040284D case 83
.text:00402E06
.text:00402E06 loc_402E06:                             ; CODE XREF: sub_4025F0+A28↓j
.text:00402E06                                         ; sub_4025F0+D0F↓j
.text:00402E06                 mov     ds:dword_42C130, edx
.text:00402E0C
.text:00402E0C loc_402E0C:                             ; CODE XREF: sub_4025F0+8A4↓j
.text:00402E0C                                         ; sub_4025F0+8B4↓j
.text:00402E0C                 mov     [esp+5Ch+var_31], 1
.text:00402E11                 jmp     loc_402810
.text:00402E16 ; ---------------------------------------------------------------------------
.text:00402E16
.text:00402E16 loc_402E16:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402E16                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402E16                 mov     [esp+5Ch+Str], 0 ; jumptable 0040284D case 84
.text:00402E1E                 mov     ebx, ds:dword_42D320
.text:00402E24                 lea     ecx, [esp+5Ch+var_30]
.text:00402E28                 mov     dword ptr [esp+5Ch+var_50], ecx ; int
.text:00402E2C                 mov     [esp+5Ch+MaxCount], 0 ; int
.text:00402E34                 mov     [esp+5Ch+Str2], 0 ; int
.text:00402E3C                 mov     [esp+5Ch+FileHandle], ebx ; int
.text:00402E3F                 call    sub_413DA0
.text:00402E44                 test    eax, eax
.text:00402E46                 jnz     short loc_402E51
.text:00402E48
.text:00402E48 loc_402E48:                             ; CODE XREF: sub_4025F0+89A↓j
.text:00402E48                 mov     eax, [esp+5Ch+var_30]
.text:00402E4C                 jmp     loc_4027FE
.text:00402E51 ; ---------------------------------------------------------------------------
.text:00402E51
.text:00402E51 loc_402E51:                             ; CODE XREF: sub_4025F0+856↑j
.text:00402E51                 mov     edx, ds:dword_42D320
.text:00402E57                 mov     [esp+5Ch+FileHandle], edx ; char *
.text:00402E5A                 call    sub_40D890
.text:00402E5F                 mov     [esp+5Ch+FileHandle], offset loc_4023F3
.text:00402E66                 mov     ebx, eax
.text:00402E68                 call    ds:libintl_gettext
.text:00402E6E                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:00402E72                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:00402E7A                 mov     [esp+5Ch+FileHandle], 2 ; Code
.text:00402E81                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:00402E85                 call    sub_4161E0
.text:00402E8A                 jmp     short loc_402E48
.text:00402E8C ; ---------------------------------------------------------------------------
.text:00402E8C
.text:00402E8C loc_402E8C:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402E8C                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402E8C                 xor     ebx, ebx        ; jumptable 0040284D case 85
.text:00402E8E
.text:00402E8E loc_402E8E:                             ; CODE XREF: sub_4025F0+A14↓j
.text:00402E8E                 mov     ds:dword_42C130, ebx
.text:00402E94                 jmp     loc_402E0C
.text:00402E99 ; ---------------------------------------------------------------------------
.text:00402E99
.text:00402E99 loc_402E99:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402E99                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402E99                 mov     ecx, 2          ; jumptable 0040284D case 88
.text:00402E9E                 mov     ds:dword_42C130, ecx
.text:00402EA4                 jmp     loc_402E0C
.text:00402EA9 ; ---------------------------------------------------------------------------
.text:00402EA9
.text:00402EA9 loc_402EA9:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402EA9                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402EA9                 mov     [esp+5Ch+Str2], 4 ; jumptable 0040284D case 98
.text:00402EB1                 jmp     loc_402DDA
.text:00402EB6 ; ---------------------------------------------------------------------------
.text:00402EB6
.text:00402EB6 loc_402EB6:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402EB6                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402EB6                 mov     ecx, 1          ; jumptable 0040284D case 99
.text:00402EBB
.text:00402EBB loc_402EBB:                             ; CODE XREF: sub_4025F0+A1E↓j
.text:00402EBB                 mov     ds:dword_42C120, ecx
.text:00402EC1                 jmp     loc_402810
.text:00402EC6 ; ---------------------------------------------------------------------------
.text:00402EC6
.text:00402EC6 loc_402EC6:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402EC6                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402EC6                 mov     ds:byte_42C220, 1 ; jumptable 0040284D case 100
.text:00402ECD                 jmp     loc_402810
.text:00402ED2 ; ---------------------------------------------------------------------------
.text:00402ED2
.text:00402ED2 loc_402ED2:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402ED2                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402ED2                 mov     [esp+5Ch+var_31], 1 ; jumptable 0040284D case 102
.text:00402ED7                 mov     eax, ds:dword_42C110
.text:00402EDC                 xor     edx, edx
.text:00402EDE                 mov     ds:dword_42C130, edx
.text:00402EE4                 mov     ecx, 2
.text:00402EE9                 mov     ds:dword_42C230, ecx
.text:00402EEF                 test    eax, eax
.text:00402EF1                 jz      short loc_402F06
.text:00402EF3
.text:00402EF3 loc_402EF3:                             ; CODE XREF: sub_4025F0+933↓j
.text:00402EF3                 mov     ds:byte_42C170, 0
.text:00402EFA                 mov     ds:byte_42C1C0, 0
.text:00402F01                 jmp     loc_402810
.text:00402F06 ; ---------------------------------------------------------------------------
.text:00402F06
.text:00402F06 loc_402F06:                             ; CODE XREF: sub_4025F0+901↑j
.text:00402F06                 mov     [esp+5Ch+FileHandle], 1 ; FileHandle
.text:00402F0D                 call    _isatty
.text:00402F12                 test    eax, eax
.text:00402F14                 setnz   cl
.text:00402F17                 movzx   edx, cl
.text:00402F1A                 lea     ebx, [edx+1]
.text:00402F1D                 mov     ds:dword_42C110, ebx
.text:00402F23                 jmp     short loc_402EF3
.text:00402F25 ; ---------------------------------------------------------------------------
.text:00402F25
.text:00402F25 loc_402F25:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402F25                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402F25                 mov     byte_42B018, 0  ; jumptable 0040284D case 103
.text:00402F2C
.text:00402F2C loc_402F2C:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402F2C                                         ; sub_4025F0+9C9↓j
.text:00402F2C                                         ; DATA XREF: ...
.text:00402F2C                 xor     ebx, ebx        ; jumptable 0040284D case 108
.text:00402F2E
.text:00402F2E loc_402F2E:                             ; CODE XREF: sub_4025F0+AB3↓j
.text:00402F2E                                         ; sub_4025F0+BE4↓j
.text:00402F2E                 mov     ds:dword_42C110, ebx
.text:00402F34                 jmp     loc_402810
.text:00402F39 ; ---------------------------------------------------------------------------
.text:00402F39
.text:00402F39 loc_402F39:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402F39                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402F39                 mov     edx, 0B0h ; '°' ; jumptable 0040284D case 104
.text:00402F3E                 mov     ds:dword_42C180, edx
.text:00402F44
.text:00402F44 loc_402F44:                             ; CODE XREF: sub_4025F0+CCB↓j
.text:00402F44                 mov     ecx, 1
.text:00402F49                 xor     edx, edx
.text:00402F4B                 mov     ebx, 1
.text:00402F50                 mov     ds:dword_42C190, ecx
.text:00402F56                 mov     ds:dword_42C194, edx
.text:00402F5C                 mov     dword_42B020, ebx
.text:00402F62
.text:00402F62 loc_402F62:                             ; CODE XREF: sub_4025F0+9B1↓j
.text:00402F62                 xor     ebx, ebx
.text:00402F64                 mov     dword_42B024, ebx
.text:00402F6A                 jmp     loc_402810
.text:00402F6F ; ---------------------------------------------------------------------------
.text:00402F6F
.text:00402F6F loc_402F6F:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402F6F                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402F6F                 mov     ds:byte_42C1F0, 1 ; jumptable 0040284D case 105
.text:00402F76                 jmp     loc_402810
.text:00402F7B ; ---------------------------------------------------------------------------
.text:00402F7B
.text:00402F7B loc_402F7B:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402F7B                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402F7B                 xor     ecx, ecx        ; jumptable 0040284D case 107
.text:00402F7D                 mov     edx, 400h
.text:00402F82                 xor     ebx, ebx
.text:00402F84                 mov     ds:dword_42C180, ecx
.text:00402F8A                 mov     ecx, 400h
.text:00402F8F                 mov     ds:dword_42C190, edx
.text:00402F95                 mov     ds:dword_42C194, ebx
.text:00402F9B                 mov     dword_42B020, ecx
.text:00402FA1                 jmp     short loc_402F62
.text:00402FA3 ; ---------------------------------------------------------------------------
.text:00402FA3
.text:00402FA3 loc_402FA3:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FA3                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FA3                 mov     eax, 4          ; jumptable 0040284D case 109
.text:00402FA8                 mov     ds:dword_42C110, eax
.text:00402FAD                 jmp     loc_402810
.text:00402FB2 ; ---------------------------------------------------------------------------
.text:00402FB2
.text:00402FB2 loc_402FB2:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FB2                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FB2                 mov     ds:byte_42C160, 1 ; jumptable 0040284D case 110
.text:00402FB9                 jmp     loc_402F2C      ; jumptable 0040284D case 108
.text:00402FBE ; ---------------------------------------------------------------------------
.text:00402FBE
.text:00402FBE loc_402FBE:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FBE                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FBE                 xor     ecx, ecx        ; jumptable 0040284D case 111
.text:00402FC0                 mov     ds:dword_42C110, ecx
.text:00402FC6                 jmp     loc_402DA4      ; jumptable 0040284D case 71
.text:00402FCB ; ---------------------------------------------------------------------------
.text:00402FCB
.text:00402FCB loc_402FCB:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FCB                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FCB                 mov     edx, 2          ; jumptable 0040284D case 112
.text:00402FD0                 mov     ds:dword_42C1B0, edx
.text:00402FD6                 jmp     loc_402810
.text:00402FDB ; ---------------------------------------------------------------------------
.text:00402FDB
.text:00402FDB loc_402FDB:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FDB                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FDB                 mov     ds:byte_42C260, 1 ; jumptable 0040284D case 113
.text:00402FE2                 jmp     loc_402810
.text:00402FE7 ; ---------------------------------------------------------------------------
.text:00402FE7
.text:00402FE7 loc_402FE7:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FE7                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FE7                 mov     ds:byte_42C140, 1 ; jumptable 0040284D case 114
.text:00402FEE                 jmp     loc_402810
.text:00402FF3 ; ---------------------------------------------------------------------------
.text:00402FF3
.text:00402FF3 loc_402FF3:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FF3                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FF3                 mov     ds:byte_42C170, 1 ; jumptable 0040284D case 115
.text:00402FFA                 jmp     loc_402810
.text:00402FFF ; ---------------------------------------------------------------------------
.text:00402FFF
.text:00402FFF loc_402FFF:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00402FFF                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00402FFF                 mov     ebx, 3          ; jumptable 0040284D case 116
.text:00403004                 jmp     loc_402E8E
.text:00403009 ; ---------------------------------------------------------------------------
.text:00403009
.text:00403009 loc_403009:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403009                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403009                 mov     ecx, 2          ; jumptable 0040284D case 117
.text:0040300E                 jmp     loc_402EBB
.text:00403013 ; ---------------------------------------------------------------------------
.text:00403013
.text:00403013 loc_403013:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403013                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403013                 mov     edx, 5          ; jumptable 0040284D case 118
.text:00403018                 jmp     loc_402E06
.text:0040301D ; ---------------------------------------------------------------------------
.text:0040301D
.text:0040301D loc_40301D:                             ; CODE XREF: sub_4025F0+25D↑j
.text:0040301D                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:0040301D                 mov     [esp+5Ch+Str], 0 ; jumptable 0040284D case 119
.text:00403025                 mov     ebx, ds:dword_42D320
.text:0040302B                 lea     ecx, [esp+5Ch+var_2C]
.text:0040302F                 mov     dword ptr [esp+5Ch+var_50], ecx ; int
.text:00403033                 mov     [esp+5Ch+MaxCount], 0 ; int
.text:0040303B                 mov     [esp+5Ch+Str2], 0 ; int
.text:00403043                 mov     [esp+5Ch+FileHandle], ebx ; int
.text:00403046                 call    sub_413DA0
.text:0040304B                 test    eax, eax
.text:0040304D                 jnz     short loc_403057
.text:0040304F                 mov     eax, [esp+5Ch+var_2C]
.text:00403053                 test    eax, eax
.text:00403055                 jnz     short loc_403094
.text:00403057
.text:00403057 loc_403057:                             ; CODE XREF: sub_4025F0+A5D↑j
.text:00403057                 mov     edx, ds:dword_42D320
.text:0040305D                 mov     [esp+5Ch+FileHandle], edx ; char *
.text:00403060                 call    sub_40D890
.text:00403065                 mov     [esp+5Ch+FileHandle], 402408h
.text:0040306C                 mov     ebx, eax
.text:0040306E                 call    ds:libintl_gettext
.text:00403074                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:00403078                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:00403080                 mov     [esp+5Ch+FileHandle], 2 ; Code
.text:00403087                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:0040308B                 call    sub_4161E0
.text:00403090                 mov     eax, [esp+5Ch+var_2C]
.text:00403094
.text:00403094 loc_403094:                             ; CODE XREF: sub_4025F0+A65↑j
.text:00403094                 mov     ds:dword_42C2B0, eax
.text:00403099                 jmp     loc_402810
.text:0040309E ; ---------------------------------------------------------------------------
.text:0040309E
.text:0040309E loc_40309E:                             ; CODE XREF: sub_4025F0+25D↑j
.text:0040309E                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:0040309E                 mov     ebx, 3          ; jumptable 0040284D case 120
.text:004030A3                 jmp     loc_402F2E
.text:004030A8 ; ---------------------------------------------------------------------------
.text:004030A8
.text:004030A8 def_40284D:                             ; CODE XREF: sub_4025F0+257↑j
.text:004030A8                                         ; sub_4025F0+25D↑j
.text:004030A8                                         ; DATA XREF: ...
.text:004030A8                 mov     [esp+5Ch+FileHandle], 2 ; jumptable 0040284D default case, cases -129-48,50-64,69,74,75,77,79,80,86,87,89-96,101,106,121-127
.text:004030AF                 jmp     loc_402D20
.text:004030B4 ; ---------------------------------------------------------------------------
.text:004030B4
.text:004030B4 loc_4030B4:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004030B4                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004030B4                 mov     ds:byte_42C150, 1 ; jumptable 0040284D case 128
.text:004030BB                 jmp     loc_402810
.text:004030C0 ; ---------------------------------------------------------------------------
.text:004030C0
.text:004030C0 loc_4030C0:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004030C0                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004030C0                 mov     [esp+5Ch+MaxCount], offset dword_42C190 ; jumptable 0040284D case 129
.text:004030C8                 mov     edx, ds:dword_42D320
.text:004030CE                 mov     [esp+5Ch+Str2], 1 ; char
.text:004030D6                 mov     [esp+5Ch+FileHandle], edx ; char *
.text:004030D9                 call    sub_413320
.text:004030DE                 mov     ds:dword_42C180, eax
.text:004030E3                 mov     ebx, ds:dword_42C190
.text:004030E9                 mov     ecx, ds:dword_42C194
.text:004030EF                 mov     dword_42B020, ebx
.text:004030F5                 mov     dword_42B024, ecx
.text:004030FB                 jmp     loc_402810
.text:00403100 ; ---------------------------------------------------------------------------
.text:00403100
.text:00403100 loc_403100:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403100                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403100                 mov     edx, ds:dword_42D320 ; jumptable 0040284D case 130
.text:00403106                 mov     eax, 1
.text:0040310B                 test    edx, edx
.text:0040310D                 jnz     short loc_40314A
.text:0040310F
.text:0040310F loc_40310F:                             ; CODE XREF: sub_4025F0+B93↓j
.text:0040310F                 xor     ebx, ebx
.text:00403111                 cmp     eax, 1
.text:00403114                 jz      short loc_403146
.text:00403116                 cmp     eax, 2
.text:00403119                 jz      short loc_403136
.text:0040311B
.text:0040311B loc_40311B:                             ; CODE XREF: sub_4025F0+B54↓j
.text:0040311B                                         ; sub_4025F0+B58↓j
.text:0040311B                 mov     ds:byte_42C1C0, bl
.text:00403121                 test    bl, bl
.text:00403123                 jz      loc_402810
.text:00403129                 xor     edx, edx
.text:0040312B                 mov     ds:dword_42C290, edx
.text:00403131                 jmp     loc_402810
.text:00403136 ; ---------------------------------------------------------------------------
.text:00403136
.text:00403136 loc_403136:                             ; CODE XREF: sub_4025F0+B29↑j
.text:00403136                 mov     [esp+5Ch+FileHandle], 1 ; FileHandle
.text:0040313D                 call    _isatty
.text:00403142                 test    eax, eax
.text:00403144                 jz      short loc_40311B
.text:00403146
.text:00403146 loc_403146:                             ; CODE XREF: sub_4025F0+B24↑j
.text:00403146                 mov     bl, 1
.text:00403148                 jmp     short loc_40311B
.text:0040314A ; ---------------------------------------------------------------------------
.text:0040314A
.text:0040314A loc_40314A:                             ; CODE XREF: sub_4025F0+B1D↑j
.text:0040314A                 mov     [esp+5Ch+Str], 4 ; int
.text:00403152                 mov     ebx, off_42B110
.text:00403158                 mov     dword ptr [esp+5Ch+var_50], offset dword_401980 ; int
.text:00403160                 mov     [esp+5Ch+MaxCount], offset off_401940 ; int
.text:00403168                 mov     [esp+5Ch+var_48], ebx ; int
.text:0040316C                 mov     [esp+5Ch+Str2], edx ; char *
.text:00403170                 mov     [esp+5Ch+FileHandle], (offset loc_40241C+3) ; char *
.text:00403177                 call    sub_411AA0
.text:0040317C                 mov     eax, ds:dword_401980[eax*4]
.text:00403183                 jmp     short loc_40310F
.text:00403185 ; ---------------------------------------------------------------------------
.text:00403185
.text:00403185 loc_403185:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403185                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403185                 mov     edx, 4          ; jumptable 0040284D case 131
.text:0040318A                 mov     ds:dword_42C200, edx
.text:00403190                 jmp     loc_402810
.text:00403195 ; ---------------------------------------------------------------------------
.text:00403195
.text:00403195 loc_403195:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403195                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403195                 mov     [esp+5Ch+Str], 4 ; jumptable 0040284D case 132
.text:0040319D                 mov     ecx, off_42B110
.text:004031A3                 mov     edx, ds:dword_42D320
.text:004031A9                 mov     dword ptr [esp+5Ch+var_50], offset dword_401860 ; int
.text:004031B1                 mov     [esp+5Ch+var_48], ecx ; int
.text:004031B5                 mov     [esp+5Ch+MaxCount], offset off_401840 ; int
.text:004031BD                 mov     [esp+5Ch+Str2], edx ; char *
.text:004031C1                 mov     [esp+5Ch+FileHandle], offset loc_402427 ; char *
.text:004031C8                 call    sub_411AA0
.text:004031CD                 mov     ebx, ds:dword_401860[eax*4]
.text:004031D4                 jmp     loc_402F2E
.text:004031D9 ; ---------------------------------------------------------------------------
.text:004031D9
.text:004031D9 loc_4031D9:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004031D9                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004031D9                 xor     ebp, ebp        ; jumptable 0040284D case 133
.text:004031DB                 mov     ds:dword_42C110, ebp
.text:004031E1                 mov     ebp, offset aFullIso ; "full-iso"
.text:004031E6                 jmp     loc_402810
.text:004031EB ; ---------------------------------------------------------------------------
.text:004031EB
.text:004031EB loc_4031EB:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004031EB                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004031EB                 mov     [esp+5Ch+FileHandle], 8 ; jumptable 0040284D case 134
.text:004031F2                 call    sub_412420
.text:004031F7                 mov     ebx, ds:dword_42C250
.text:004031FD                 mov     ecx, ds:dword_42D320
.text:00403203                 mov     [eax+4], ebx
.text:00403206                 mov     [eax], ecx
.text:00403208                 mov     ds:dword_42C250, eax
.text:0040320D                 jmp     loc_402810
.text:00403212 ; ---------------------------------------------------------------------------
.text:00403212
.text:00403212 loc_403212:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403212                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403212                 mov     [esp+5Ch+Str], 4 ; jumptable 0040284D case 135
.text:0040321A                 mov     edx, off_42B110
.text:00403220                 mov     ebx, ds:dword_42D320
.text:00403226                 mov     dword ptr [esp+5Ch+var_50], offset dword_4012F0 ; int
.text:0040322E                 mov     [esp+5Ch+var_48], edx ; int
.text:00403232                 mov     [esp+5Ch+MaxCount], offset off_4012E0 ; int
.text:0040323A                 mov     [esp+5Ch+Str2], ebx ; char *
.text:0040323E                 mov     [esp+5Ch+FileHandle], offset loc_402430 ; char *
.text:00403245                 call    sub_411AA0
.text:0040324A                 mov     ecx, ds:dword_4012F0[eax*4]
.text:00403251                 mov     ds:dword_42C1B0, ecx
.text:00403257                 jmp     loc_402810
.text:0040325C ; ---------------------------------------------------------------------------
.text:0040325C
.text:0040325C loc_40325C:                             ; CODE XREF: sub_4025F0+25D↑j
.text:0040325C                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:0040325C                 mov     [esp+5Ch+Str], 4 ; jumptable 0040284D case 136
.text:00403264                 mov     edx, off_42B110
.text:0040326A                 mov     ebx, ds:dword_42D320
.text:00403270                 mov     dword ptr [esp+5Ch+var_50], offset dword_40CB60 ; int
.text:00403278                 mov     [esp+5Ch+var_48], edx ; int
.text:0040327C                 mov     [esp+5Ch+MaxCount], offset off_40CB40 ; int
.text:00403284                 mov     [esp+5Ch+Str2], ebx ; char *
.text:00403288                 mov     [esp+5Ch+FileHandle], (offset loc_402440+2) ; char *
.text:0040328F                 call    sub_411AA0
.text:00403294                 mov     ecx, ds:dword_40CB60[eax*4]
.text:0040329B                 mov     [esp+5Ch+Str2], ecx
.text:0040329F                 jmp     loc_402DDA
.text:004032A4 ; ---------------------------------------------------------------------------
.text:004032A4
.text:004032A4 loc_4032A4:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004032A4                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004032A4                 mov     ds:byte_42C260, 0 ; jumptable 0040284D case 137
.text:004032AB                 jmp     loc_402810
.text:004032B0 ; ---------------------------------------------------------------------------
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004032B0                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004032B0                 mov     ecx, 90h        ; jumptable 0040284D case 138
.text:004032B5                 mov     ds:dword_42C180, ecx
.text:004032BB                 jmp     loc_402F44
.text:004032C0 ; ---------------------------------------------------------------------------
.text:004032C0
.text:004032C0 loc_4032C0:                             ; CODE XREF: sub_4025F0+25D↑j
.text:004032C0                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:004032C0                 mov     [esp+5Ch+Str], 4 ; jumptable 0040284D case 139
.text:004032C8                 mov     ecx, off_42B110
.text:004032CE                 mov     ebx, ds:dword_42D320
.text:004032D4                 mov     dword ptr [esp+5Ch+var_50], offset dword_4018A0 ; int
.text:004032DC                 mov     [esp+5Ch+var_48], ecx ; int
.text:004032E0                 mov     [esp+5Ch+MaxCount], offset off_401888 ; int
.text:004032E8                 mov     [esp+5Ch+Str2], ebx ; char *
.text:004032EC                 mov     [esp+5Ch+FileHandle], (offset loc_402450+2) ; char *
.text:004032F3                 call    sub_411AA0
.text:004032F8                 mov     edx, ds:dword_4018A0[eax*4]
.text:004032FF                 jmp     loc_402E06
.text:00403304 ; ---------------------------------------------------------------------------
.text:00403304
.text:00403304 loc_403304:                             ; CODE XREF: sub_4025F0+25D↑j
.text:00403304                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:00403304                 mov     [esp+5Ch+Str], 4 ; jumptable 0040284D case 140
.text:0040330C                 mov     ecx, off_42B110
.text:00403312                 mov     ebx, ds:dword_42D320
.text:00403318                 mov     dword ptr [esp+5Ch+var_50], offset dword_4018EC ; int
.text:00403320                 mov     [esp+5Ch+var_48], ecx ; int
.text:00403324                 mov     [esp+5Ch+MaxCount], offset off_4018D4 ; int
.text:0040332C                 mov     [esp+5Ch+Str2], ebx ; char *
.text:00403330                 mov     [esp+5Ch+FileHandle], offset loc_402459 ; char *
.text:00403337                 call    sub_411AA0
.text:0040333C                 mov     edx, ds:dword_4018EC[eax*4]
.text:00403343                 mov     ds:dword_42C120, edx
.text:00403349                 jmp     loc_402810
.text:0040334E ; ---------------------------------------------------------------------------
.text:0040334E
.text:0040334E loc_40334E:                             ; CODE XREF: sub_4025F0+25D↑j
.text:0040334E                                         ; DATA XREF: sub_4025F0:jpt_40284D↑o
.text:0040334E                 mov     ebp, ds:dword_42D320 ; jumptable 0040284D case 141
.text:00403354                 jmp     loc_402810
.text:00403359 ; ---------------------------------------------------------------------------
.text:00403359
.text:00403359 loc_403359:                             ; CODE XREF: sub_4025F0+247↑j
.text:00403359                 mov     eax, 0AAAAAAABh
.text:0040335E                 mul     ds:dword_42C2B0
.text:00403364                 mov     eax, edx
.text:00403366                 shr     eax, 1
.text:00403368                 jnz     short loc_40336F
.text:0040336A                 mov     eax, 1
.text:0040336F
.text:0040336F loc_40336F:                             ; CODE XREF: sub_4025F0+D78↑j
.text:0040336F                 mov     ds:dword_42C330, eax
.text:00403374                 mov     [esp+5Ch+FileHandle], 0
.text:0040337B                 call    sub_40D5F0
.text:00403380                 mov     ds:dword_42C270, eax
.text:00403385                 mov     [esp+5Ch+FileHandle], eax
.text:00403388                 call    sub_40D670
.text:0040338D                 cmp     eax, 4
.text:00403390                 jz      loc_40362B
.text:00403396
.text:00403396 loc_403396:                             ; CODE XREF: sub_4025F0+1059↓j
.text:00403396                 mov     eax, ds:dword_42C1B0
.text:0040339B                 test    eax, eax
.text:0040339D                 jz      short loc_4033D5
.text:0040339F                 lea     ebx, [eax+40245Fh]
.text:004033A5                 movzx   eax, byte ptr [eax+40245Fh]
.text:004033AC                 test    al, al
.text:004033AE                 jz      short loc_4033D5
.text:004033B0
.text:004033B0 loc_4033B0:                             ; CODE XREF: sub_4025F0+DE3↓j
.text:004033B0                 mov     [esp+5Ch+MaxCount], 1
.text:004033B8                 mov     edx, ds:dword_42C270
.text:004033BE                 movsx   ecx, al
.text:004033C1                 mov     [esp+5Ch+Str2], ecx
.text:004033C5                 inc     ebx
.text:004033C6                 mov     [esp+5Ch+FileHandle], edx
.text:004033C9                 call    sub_40D6B0
.text:004033CE                 movzx   eax, byte ptr [ebx]
.text:004033D1                 test    al, al
.text:004033D3                 jnz     short loc_4033B0
.text:004033D5
.text:004033D5 loc_4033D5:                             ; CODE XREF: sub_4025F0+DAD↑j
.text:004033D5                                         ; sub_4025F0+DBE↑j
.text:004033D5                 mov     [esp+5Ch+FileHandle], 0
.text:004033DC                 call    sub_40D5F0
.text:004033E1                 mov     ds:dword_42C280, eax
.text:004033E6                 mov     [esp+5Ch+MaxCount], 1
.text:004033EE                 mov     [esp+5Ch+Str2], 3Ah ; ':'
.text:004033F6                 mov     [esp+5Ch+FileHandle], eax
.text:004033F9                 call    sub_40D6B0
.text:004033FE                 cmp     ds:byte_42C1A0, 0
.text:00403405                 jz      loc_403620
.text:0040340B                 mov     edx, ds:dword_42C110
.text:00403411                 test    edx, edx
.text:00403413                 jz      short loc_40341C
.text:00403415                 mov     ds:byte_42C1A0, 0
.text:0040341C
.text:0040341C loc_40341C:                             ; CODE XREF: sub_4025F0+E23↑j
.text:0040341C                                         ; sub_4025F0+1036↓j
.text:0040341C                 mov     ebx, ds:dword_42C120
.text:00403422                 dec     ebx
.text:00403423                 cmp     ebx, 1
.text:00403426                 ja      short loc_40343D
.text:00403428                 cmp     [esp+5Ch+var_31], 0
.text:0040342D                 jnz     short loc_40343D
.text:0040342F                 test    edx, edx
.text:00403431                 jz      short loc_403441
.text:00403433                 mov     eax, 3
.text:00403438                 mov     ds:dword_42C130, eax
.text:0040343D
.text:0040343D loc_40343D:                             ; CODE XREF: sub_4025F0+E36↑j
.text:0040343D                                         ; sub_4025F0+E3D↑j
.text:0040343D                 test    edx, edx
.text:0040343F                 jnz     short loc_403481
.text:00403441
.text:00403441 loc_403441:                             ; CODE XREF: sub_4025F0+E41↑j
.text:00403441                 test    ebp, ebp
.text:00403443                 mov     ebx, ebp
.text:00403445                 jz      loc_4035FC
.text:0040344B                 nop
.text:0040344C                 lea     esi, [esi+0]
.text:00403450
.text:00403450 loc_403450:                             ; CODE XREF: sub_4025F0+E8F↓j
.text:00403450                                         ; sub_4025F0+101C↓j ...
.text:00403450                 mov     [esp+5Ch+MaxCount], 6 ; MaxCount
.text:00403458                 mov     [esp+5Ch+Str2], offset Str2 ; "posix-"
.text:00403460                 mov     [esp+5Ch+FileHandle], ebx ; Str1
.text:00403463                 call    strncmp
.text:00403468                 test    eax, eax
.text:0040346A                 jnz     short loc_40348E
.text:0040346C                 mov     [esp+5Ch+FileHandle], 5
.text:00403473                 call    sub_413680
.text:00403478                 test    al, al
.text:0040347A                 jz      short loc_403481
.text:0040347C                 add     ebx, 6
.text:0040347F                 jmp     short loc_403450
.text:00403481 ; ---------------------------------------------------------------------------
.text:00403481
.text:00403481 loc_403481:                             ; CODE XREF: sub_4025F0+E4F↑j
.text:00403481                                         ; sub_4025F0+E8A↑j ...
.text:00403481                 mov     eax, dword_42B100
.text:00403486                 add     esp, 4Ch
.text:00403489                 pop     ebx
.text:0040348A                 pop     esi
.text:0040348B                 pop     edi
.text:0040348C                 pop     ebp
.text:0040348D                 retn
.text:0040348E ; ---------------------------------------------------------------------------
.text:0040348E
.text:0040348E loc_40348E:                             ; CODE XREF: sub_4025F0+E7A↑j
.text:0040348E                 cmp     byte ptr [ebx], 2Bh ; '+'
.text:00403491                 jz      loc_40357D
.text:00403497                 mov     [esp+5Ch+Str], 4 ; int
.text:0040349F                 mov     ebp, off_42B110
.text:004034A5                 mov     dword ptr [esp+5Ch+var_50], offset dword_4012B4 ; int
.text:004034AD                 mov     [esp+5Ch+MaxCount], offset off_4012A0 ; int
.text:004034B5                 mov     [esp+5Ch+var_48], ebp ; int
.text:004034B9                 mov     [esp+5Ch+Str2], ebx ; char *
.text:004034BD                 mov     [esp+5Ch+FileHandle], (offset loc_402461+4) ; char *
.text:004034C4                 call    sub_411AA0
.text:004034C9                 mov     eax, ds:dword_4012B4[eax*4]
.text:004034D0                 cmp     eax, 1
.text:004034D3                 jz      loc_403562
.text:004034D9                 cmp     eax, 1
.text:004034DC                 jb      short loc_403547
.text:004034DE                 cmp     eax, 2
.text:004034E1                 jz      short loc_40352C
.text:004034E3                 cmp     eax, 3
.text:004034E6                 jnz     short loc_403481
.text:004034E8                 mov     [esp+5Ch+FileHandle], 5
.text:004034EF                 call    sub_413680
.text:004034F4                 test    al, al
.text:004034F6                 jz      short loc_403481
.text:004034F8                 xor     ebx, ebx
.text:004034FA
.text:004034FA loc_4034FA:                             ; CODE XREF: sub_4025F0+F35↓j
.text:004034FA                 mov     [esp+5Ch+MaxCount], 5
.text:00403502                 mov     esi, off_42B0A8[ebx*4] ; "%b %e  %Y"
.text:00403509                 mov     [esp+5Ch+FileHandle], 0
.text:00403510                 mov     [esp+5Ch+Str2], esi
.text:00403514                 call    ds:libintl_dcgettext
.text:0040351A                 mov     off_42B0A8[ebx*4], eax ; "%b %e  %Y"
.text:00403521                 inc     ebx
.text:00403522                 cmp     ebx, 1
.text:00403525                 jle     short loc_4034FA
.text:00403527                 jmp     loc_403481
.text:0040352C ; ---------------------------------------------------------------------------
.text:0040352C
.text:0040352C loc_40352C:                             ; CODE XREF: sub_4025F0+EF1↑j
.text:0040352C                 mov     ebp, 402470h
.text:00403531                 mov     ebx, offset loc_40247A
.text:00403536                 mov     off_42B0A8, ebp ; "%b %e  %Y"
.text:0040353C                 mov     off_42B0AC, ebx ; "%b %e %H:%M"
.text:00403542                 jmp     loc_403481
.text:00403547 ; ---------------------------------------------------------------------------
.text:00403547
.text:00403547 loc_403547:                             ; CODE XREF: sub_4025F0+EEC↑j
.text:00403547                 mov     edi, 402486h
.text:0040354C                 mov     esi, 402486h
.text:00403551                 mov     off_42B0AC, edi ; "%b %e %H:%M"
.text:00403557                 mov     off_42B0A8, esi ; "%b %e  %Y"
.text:0040355D                 jmp     loc_403481
.text:00403562 ; ---------------------------------------------------------------------------
.text:00403562
.text:00403562 loc_403562:                             ; CODE XREF: sub_4025F0+EE3↑j
.text:00403562                 mov     ecx, 40249Eh
.text:00403567                 mov     edx, 40249Eh
.text:0040356C                 mov     off_42B0AC, ecx ; "%b %e %H:%M"
.text:00403572                 mov     off_42B0A8, edx ; "%b %e  %Y"
.text:00403578                 jmp     loc_403481
.text:0040357D ; ---------------------------------------------------------------------------
.text:0040357D
.text:0040357D loc_40357D:                             ; CODE XREF: sub_4025F0+EA1↑j
.text:0040357D                 mov     [esp+5Ch+Str2], 0Ah ; Val
.text:00403585                 lea     edi, [ebx+1]
.text:00403588                 mov     [esp+5Ch+FileHandle], edi ; Str
.text:0040358B                 call    strchr
.text:00403590                 test    eax, eax
.text:00403592                 mov     esi, eax
.text:00403594                 jz      short loc_4035F8
.text:00403596                 mov     [esp+5Ch+Str2], 0Ah ; Val
.text:0040359E                 lea     ebp, [eax+1]
.text:004035A1                 mov     [esp+5Ch+FileHandle], ebp ; Str
.text:004035A4                 call    strchr
.text:004035A9                 test    eax, eax
.text:004035AB                 jnz     short loc_4035C3
.text:004035AD
.text:004035AD loc_4035AD:                             ; CODE XREF: sub_4025F0+1006↓j
.text:004035AD                 mov     byte ptr [esi], 0
.text:004035B0                 mov     esi, ebp
.text:004035B2
.text:004035B2 loc_4035B2:                             ; CODE XREF: sub_4025F0+100A↓j
.text:004035B2                 mov     off_42B0A8, edi ; "%b %e  %Y"
.text:004035B8                 mov     off_42B0AC, esi ; "%b %e %H:%M"
.text:004035BE                 jmp     loc_403481
.text:004035C3 ; ---------------------------------------------------------------------------
.text:004035C3
.text:004035C3 loc_4035C3:                             ; CODE XREF: sub_4025F0+FBB↑j
.text:004035C3                 mov     [esp+5Ch+FileHandle], edi ; char *
.text:004035C6                 call    sub_412100
.text:004035CB                 mov     [esp+5Ch+FileHandle], 4024ADh
.text:004035D2                 mov     ebx, eax
.text:004035D4                 call    ds:libintl_gettext
.text:004035DA                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:004035DE                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:004035E6                 mov     [esp+5Ch+FileHandle], 2 ; Code
.text:004035ED                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:004035F1                 call    sub_4161E0
.text:004035F6                 jmp     short loc_4035AD
.text:004035F8 ; ---------------------------------------------------------------------------
.text:004035F8
.text:004035F8 loc_4035F8:                             ; CODE XREF: sub_4025F0+FA4↑j
.text:004035F8                 mov     esi, edi
.text:004035FA                 jmp     short loc_4035B2
.text:004035FC ; ---------------------------------------------------------------------------
.text:004035FC
.text:004035FC loc_4035FC:                             ; CODE XREF: sub_4025F0+E55↑j
.text:004035FC                 mov     [esp+5Ch+FileHandle], (offset loc_4024C7+3) ; VarName
.text:00403603                 call    getenv
.text:00403608                 test    eax, eax
.text:0040360A                 mov     ebx, eax
.text:0040360C                 jnz     loc_403450
.text:00403612                 mov     ebx, 4024D5h
.text:00403617                 jmp     loc_403450
.text:00403617 ; ---------------------------------------------------------------------------
.text:0040361C                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_4025F0+E15↑j
.text:00403620                 mov     edx, ds:dword_42C110
.text:00403626                 jmp     loc_40341C
.text:0040362B ; ---------------------------------------------------------------------------
.text:0040362B
.text:0040362B loc_40362B:                             ; CODE XREF: sub_4025F0+DA0↑j
.text:0040362B                 mov     [esp+5Ch+MaxCount], 1
.text:00403633                 mov     edi, ds:dword_42C270
.text:00403639                 mov     [esp+5Ch+Str2], 20h ; ' '
.text:00403641                 mov     [esp+5Ch+FileHandle], edi
.text:00403644                 call    sub_40D6B0
.text:00403649                 jmp     loc_403396
.text:0040364E ; ---------------------------------------------------------------------------
.text:0040364E
.text:0040364E loc_40364E:                             ; CODE XREF: sub_4025F0+204↑j
.text:0040364E                 mov     [esp+5Ch+FileHandle], ebx ; char *
.text:00403651                 call    sub_40D890
.text:00403656                 mov     [esp+5Ch+FileHandle], offset loc_402500
.text:0040365D                 mov     ebx, eax
.text:0040365F                 call    ds:libintl_gettext
.text:00403665                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:00403669                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:00403671                 mov     [esp+5Ch+FileHandle], 0 ; Code
.text:00403678                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:0040367C                 call    sub_4161E0
.text:00403681                 jmp     loc_402810
.text:00403686 ; ---------------------------------------------------------------------------
.text:00403686
.text:00403686 loc_403686:                             ; CODE XREF: sub_4025F0+185↑j
.text:00403686                 mov     [esp+5Ch+Str], 0 ; Str
.text:0040368E                 lea     ecx, [esp+5Ch+var_18]
.text:00403692                 mov     dword ptr [esp+5Ch+var_50], ecx ; int
.text:00403696                 mov     [esp+5Ch+MaxCount], 0 ; int
.text:0040369E                 mov     [esp+5Ch+Str2], 0 ; int
.text:004036A6                 mov     [esp+5Ch+FileHandle], eax ; int
.text:004036A9                 call    sub_413DA0
.text:004036AE                 test    eax, eax
.text:004036B0                 jnz     short loc_4036C4
.text:004036B2                 mov     eax, [esp+5Ch+var_18]
.text:004036B6                 test    eax, eax
.text:004036B8                 jz      short loc_4036C4
.text:004036BA                 mov     ds:dword_42C2B0, eax
.text:004036BF                 jmp     loc_40277B
.text:004036C4 ; ---------------------------------------------------------------------------
.text:004036C4
.text:004036C4 loc_4036C4:                             ; CODE XREF: sub_4025F0+10C0↑j
.text:004036C4                                         ; sub_4025F0+10C8↑j
.text:004036C4                 mov     [esp+5Ch+FileHandle], ebx ; char *
.text:004036C7                 call    sub_40D890
.text:004036CC                 mov     [esp+5Ch+FileHandle], offset loc_402540
.text:004036D3                 mov     ebx, eax
.text:004036D5                 call    ds:libintl_gettext
.text:004036DB                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:004036DF                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:004036E7                 mov     [esp+5Ch+FileHandle], 0 ; Code
.text:004036EE                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:004036F2                 call    sub_4161E0
.text:004036F7                 jmp     loc_40277B
.text:004036FC ; ---------------------------------------------------------------------------
.text:004036FC
.text:004036FC loc_4036FC:                             ; CODE XREF: sub_4025F0+147↑j
.text:004036FC                 mov     [esp+5Ch+FileHandle], (offset loc_402578+3) ; VarName
.text:00403703                 call    getenv
.text:00403708                 test    eax, eax
.text:0040370A                 jz      loc_402755
.text:00403710                 jmp     loc_40273D
.text:00403715 ; ---------------------------------------------------------------------------
.text:00403715
.text:00403715 loc_403715:                             ; CODE XREF: sub_4025F0+FD↑j
.text:00403715                 mov     [esp+5Ch+FileHandle], ebx ; char *
.text:00403718                 call    sub_40D890
.text:0040371D                 mov     [esp+5Ch+FileHandle], offset loc_4025A0
.text:00403724                 mov     ebx, eax
.text:00403726                 call    ds:libintl_gettext
.text:0040372C                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:00403730                 mov     [esp+5Ch+Str2], 0 ; ErrorMessage
.text:00403738                 mov     [esp+5Ch+FileHandle], 0 ; Code
.text:0040373F                 mov     [esp+5Ch+MaxCount], eax ; char *
.text:00403743                 call    sub_4161E0
.text:00403748                 jmp     loc_40270A
.text:0040374D ; ---------------------------------------------------------------------------
.text:0040374D
.text:0040374D loc_40374D:                             ; CODE XREF: sub_4025F0+4A↑j
.text:0040374D                 mov     ds:byte_42C260, 0
.text:00403754                 mov     ebx, 1
.text:00403759                 mov     ds:dword_42C110, ebx
.text:0040375F                 jmp     loc_402652
.text:00403764 ; ---------------------------------------------------------------------------
.text:00403764
.text:00403764 loc_403764:                             ; CODE XREF: sub_4025F0+2E↑j
.text:00403764                 cmp     eax, 3
.text:00403767                 jnz     loc_402627
.text:0040376D                 xor     edx, edx
.text:0040376F
.text:0040376F loc_40376F:                             ; CODE XREF: sub_4025F0+11A3↓j
.text:0040376F                 mov     ds:dword_42C110, edx
.text:00403775                 mov     [esp+5Ch+Str2], 4
.text:0040377D                 mov     [esp+5Ch+FileHandle], 0
.text:00403784                 call    sub_40D690
.text:00403789                 jmp     loc_402652
.text:0040378E ; ---------------------------------------------------------------------------
.text:0040378E
.text:0040378E loc_40378E:                             ; CODE XREF: sub_4025F0+25↑j
.text:0040378E                 mov     edx, 2
.text:00403793                 jmp     short loc_40376F
.text:00403793 sub_4025F0      endp
.text:00403793
.text:00403793 ; ---------------------------------------------------------------------------
.text:00403795 ; const char aLsColors[]
.text:00403795 aLsColors       db 'LS_COLORS',0        ; DATA XREF: sub_403810+7↓o
.text:0040379F aTarget         db 'target',0           ; DATA XREF: sub_403810+93↓o
.text:004037A6                 align 20h
.text:004037C0 aUnparsableValu db 'unparsable value for LS_COLORS environment variable',0
.text:004037C0                                         ; DATA XREF: sub_403810:loc_4038C1↓o
.text:004037F4 aUnrecognizedPr db 'unrecognized prefix: %s',0
.text:004037F4                                         ; DATA XREF: sub_403810+274↓o
.text:0040380C                 align 10h
.text:00403810
.text:00403810 ; =============== S U B R O U T I N E =======================================
.text:00403810
.text:00403810
.text:00403810 sub_403810      proc near               ; CODE XREF: sub_401B10:loc_4021A5↑p
.text:00403810
.text:00403810 VarName         = dword ptr -4Ch
.text:00403810 Str2            = dword ptr -48h
.text:00403810 var_44          = dword ptr -44h
.text:00403810 var_40          = byte ptr -40h
.text:00403810 var_38          = dword ptr -38h
.text:00403810 var_34          = dword ptr -34h
.text:00403810 var_30          = dword ptr -30h
.text:00403810 Str1            = byte ptr -2Ch
.text:00403810 var_2A          = byte ptr -2Ah
.text:00403810
.text:00403810                 push    ebp
.text:00403811                 push    edi
.text:00403812                 push    esi
.text:00403813                 push    ebx
.text:00403814                 sub     esp, 3Ch
.text:00403817                 mov     [esp+4Ch+VarName], offset aLsColors ; "LS_COLORS"
.text:0040381E                 call    getenv
.text:00403823                 mov     [esp+4Ch+var_30], eax
.text:00403827                 test    eax, eax
.text:00403829                 jz      short loc_403830
.text:0040382B                 cmp     byte ptr [eax], 0
.text:0040382E                 jnz     short loc_403838
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403810+19↑j
.text:00403830                                         ; sub_403810+8A↓j ...
.text:00403830                 add     esp, 3Ch
.text:00403833                 pop     ebx
.text:00403834                 pop     esi
.text:00403835                 pop     edi
.text:00403836                 pop     ebp
.text:00403837                 retn
.text:00403838 ; ---------------------------------------------------------------------------
.text:00403838
.text:00403838 loc_403838:                             ; CODE XREF: sub_403810+1E↑j
.text:00403838                 mov     [esp+4Ch+var_38], 0
.text:00403840                 mov     word ptr [esp+4Ch+Str1], 3F3Fh
.text:00403847                 mov     [esp+4Ch+var_2A], 0
.text:0040384C                 mov     [esp+4Ch+VarName], eax ; char *
.text:0040384F                 call    sub_4125E0
.text:00403854                 mov     ds:dword_42C1D0, eax
.text:00403859                 mov     [esp+4Ch+var_34], eax
.text:0040385D
.text:0040385D loc_40385D:                             ; CODE XREF: sub_403810+2DA↓j
.text:0040385D                 mov     edi, 1
.text:00403862                 lea     esi, [esi+0]
.text:00403869                 lea     edi, [edi+0]
.text:00403870
.text:00403870 loc_403870:                             ; CODE XREF: sub_403810+7D↓j
.text:00403870                                         ; sub_403810+13C↓j ...
.text:00403870                 cmp     edi, 2
.text:00403873                 jz      loc_403AF0
.text:00403879                 cmp     edi, 2
.text:0040387C                 jg      loc_4039C2
.text:00403882                 cmp     edi, 1
.text:00403885                 jz      loc_403920
.text:0040388B
.text:0040388B loc_40388B:                             ; CODE XREF: sub_403810+14D↓j
.text:0040388B                                         ; sub_403810+1BA↓j ...
.text:0040388B                 test    edi, edi
.text:0040388D                 jg      short loc_403870
.text:0040388F                 test    edi, edi
.text:00403891                 js      short loc_4038C1
.text:00403893
.text:00403893 loc_403893:                             ; CODE XREF: sub_403810+106↓j
.text:00403893                                         ; sub_403810+123↓j
.text:00403893                 cmp     dword_42B060, 6
.text:0040389A                 jnz     short loc_403830
.text:0040389C                 cld
.text:0040389D                 mov     esi, off_42B064 ; "01;36"
.text:004038A3                 mov     edi, offset aTarget ; "target"
.text:004038A8                 mov     ecx, 6
.text:004038AD                 repe cmpsb
.text:004038AF                 jnz     loc_403830
.text:004038B5                 mov     ds:byte_42C060, 1
.text:004038BC                 jmp     loc_403830
.text:004038C1 ; ---------------------------------------------------------------------------
.text:004038C1
.text:004038C1 loc_4038C1:                             ; CODE XREF: sub_403810+81↑j
.text:004038C1                                         ; sub_403810+1AD↓j ...
.text:004038C1                 mov     [esp+4Ch+VarName], offset aUnparsableValu ; "unparsable value for LS_COLORS environm"...
.text:004038C8                 call    ds:libintl_gettext
.text:004038CE                 mov     [esp+4Ch+Str2], 0 ; ErrorMessage
.text:004038D6                 mov     [esp+4Ch+VarName], 0 ; Code
.text:004038DD                 mov     [esp+4Ch+var_44], eax ; char *
.text:004038E1                 call    sub_4161E0
.text:004038E6                 mov     edx, ds:dword_42C1D0
.text:004038EC                 mov     [esp+4Ch+VarName], edx ; Block
.text:004038EF                 call    free
.text:004038F4                 mov     ebx, ds:dword_42C000
.text:004038FA                 test    ebx, ebx
.text:004038FC                 jz      short loc_40390F
.text:004038FE
.text:004038FE loc_4038FE:                             ; CODE XREF: sub_403810+FD↓j
.text:004038FE                 mov     edi, ebx
.text:00403900                 mov     ebx, [ebx+10h]
.text:00403903                 mov     [esp+4Ch+VarName], edi ; Block
.text:00403906                 call    free
.text:0040390B                 test    ebx, ebx
.text:0040390D                 jnz     short loc_4038FE
.text:0040390F
.text:0040390F loc_40390F:                             ; CODE XREF: sub_403810+EC↑j
.text:0040390F                 mov     ds:byte_42C1C0, 0
.text:00403916                 jmp     loc_403893
.text:00403916 ; ---------------------------------------------------------------------------
.text:0040391B                 align 10h
.text:00403920
.text:00403920 loc_403920:                             ; CODE XREF: sub_403810+75↑j
.text:00403920                 mov     edx, [esp+4Ch+var_30]
.text:00403924                 movsx   eax, byte ptr [edx]
.text:00403927                 cmp     eax, 2Ah ; '*'
.text:0040392A                 jz      short loc_403962
.text:0040392C                 cmp     eax, 2Ah ; '*'
.text:0040392F                 jg      short loc_403951
.text:00403931                 test    eax, eax
.text:00403933                 jz      loc_403893
.text:00403939
.text:00403939 loc_403939:                             ; CODE XREF: sub_403810+144↓j
.text:00403939                 movzx   ecx, byte ptr [edx]
.text:0040393C                 lea     ebp, [edx+1]
.text:0040393F                 mov     edi, 2
.text:00403944                 mov     [esp+4Ch+var_30], ebp
.text:00403948                 mov     [esp+4Ch+Str1], cl
.text:0040394C                 jmp     loc_403870
.text:00403951 ; ---------------------------------------------------------------------------
.text:00403951
.text:00403951 loc_403951:                             ; CODE XREF: sub_403810+11F↑j
.text:00403951                 cmp     eax, 3Ah ; ':'
.text:00403954                 jnz     short loc_403939
.text:00403956                 lea     ecx, [edx+1]
.text:00403959                 mov     [esp+4Ch+var_30], ecx
.text:0040395D                 jmp     loc_40388B
.text:00403962 ; ---------------------------------------------------------------------------
.text:00403962
.text:00403962 loc_403962:                             ; CODE XREF: sub_403810+11A↑j
.text:00403962                 mov     [esp+4Ch+VarName], 14h ; size_t
.text:00403969                 call    sub_412420
.text:0040396E                 mov     [esp+4Ch+var_38], eax
.text:00403972                 mov     edi, ds:dword_42C000
.text:00403978                 lea     ecx, [esp+4Ch+var_30]
.text:0040397C                 inc     [esp+4Ch+var_30]
.text:00403980                 lea     edx, [esp+4Ch+var_34]
.text:00403984                 mov     ebx, [esp+4Ch+var_38]
.text:00403988                 mov     esi, [esp+4Ch+var_34]
.text:0040398C                 mov     [ebx+10h], edi
.text:0040398F                 mov     edi, 4
.text:00403994                 mov     [ebx+4], esi
.text:00403997                 mov     ds:dword_42C000, ebx
.text:0040399D                 mov     dword ptr [esp+4Ch+var_40], ebx
.text:004039A1                 mov     [esp+4Ch+var_44], 1
.text:004039A9                 mov     [esp+4Ch+Str2], ecx
.text:004039AD                 mov     [esp+4Ch+VarName], edx
.text:004039B0
.text:004039B0 loc_4039B0:                             ; CODE XREF: sub_403810+20A↓j
.text:004039B0                 call    sub_409580
.text:004039B5                 test    al, al
.text:004039B7                 jnz     loc_403870
.text:004039BD                 jmp     loc_4038C1
.text:004039C2 ; ---------------------------------------------------------------------------
.text:004039C2
.text:004039C2 loc_4039C2:                             ; CODE XREF: sub_403810+6C↑j
.text:004039C2                 cmp     edi, 3
.text:004039C5                 jz      short loc_403A20
.text:004039C7                 cmp     edi, 4
.text:004039CA                 jnz     loc_40388B
.text:004039D0                 mov     ebx, [esp+4Ch+var_30]
.text:004039D4                 lea     edx, [ebx+1]
.text:004039D7                 mov     [esp+4Ch+var_30], edx
.text:004039DB                 cmp     byte ptr [ebx], 3Dh ; '='
.text:004039DE                 jz      short loc_4039EA
.text:004039E0                 mov     edi, 0FFFFFFFFh
.text:004039E5                 jmp     loc_40388B
.text:004039EA ; ---------------------------------------------------------------------------
.text:004039EA
.text:004039EA loc_4039EA:                             ; CODE XREF: sub_403810+1CE↑j
.text:004039EA                 mov     ecx, [esp+4Ch+var_38]
.text:004039EE                 lea     edi, [esp+4Ch+var_34]
.text:004039F2                 mov     ebx, [esp+4Ch+var_34]
.text:004039F6                 lea     ebp, [esp+4Ch+var_30]
.text:004039FA                 mov     esi, ecx
.text:004039FC                 add     esi, 8
.text:004039FF                 mov     [ecx+0Ch], ebx
.text:00403A02                 mov     [esp+4Ch+VarName], edi
.text:00403A05                 mov     edi, 1
.text:00403A0A                 mov     dword ptr [esp+4Ch+var_40], esi
.text:00403A0E                 mov     [esp+4Ch+var_44], 0
.text:00403A16                 mov     [esp+4Ch+Str2], ebp
.text:00403A1A                 jmp     short loc_4039B0
.text:00403A1A ; ---------------------------------------------------------------------------
.text:00403A1C                 align 10h
.text:00403A20
.text:00403A20 loc_403A20:                             ; CODE XREF: sub_403810+1B5↑j
.text:00403A20                 mov     ebx, [esp+4Ch+var_30]
.text:00403A24                 mov     edi, 0FFFFFFFFh
.text:00403A29                 lea     edx, [ebx+1]
.text:00403A2C                 mov     [esp+4Ch+var_30], edx
.text:00403A30                 cmp     byte ptr [ebx], 3Dh ; '='
.text:00403A33                 jnz     loc_4038C1
.text:00403A39                 mov     eax, ds:off_401340
.text:00403A3E                 xor     ebx, ebx
.text:00403A40                 test    eax, eax
.text:00403A42                 jz      short loc_403A78
.text:00403A44                 lea     ebp, [esp+4Ch+Str1]
.text:00403A48                 mov     esi, offset unk_42B030
.text:00403A4D                 lea     esi, [esi+0]
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_403810+25D↓j
.text:00403A50                 mov     [esp+4Ch+Str2], eax ; Str2
.text:00403A54                 mov     [esp+4Ch+VarName], ebp ; Str1
.text:00403A57                 call    strcmp
.text:00403A5C                 test    eax, eax
.text:00403A5E                 jz      short loc_403AB4
.text:00403A60                 inc     ebx
.text:00403A61                 add     esi, 8
.text:00403A64                 mov     eax, ds:off_401340[ebx*4]
.text:00403A6B                 test    eax, eax
.text:00403A6D                 jnz     short loc_403A50
.text:00403A6F                 cmp     edi, 0FFFFFFFFh
.text:00403A72                 jnz     loc_40388B
.text:00403A78
.text:00403A78 loc_403A78:                             ; CODE XREF: sub_403810+232↑j
.text:00403A78                                         ; sub_403810+2D8↓j
.text:00403A78                 lea     ecx, [esp+4Ch+Str1]
.text:00403A7C                 mov     [esp+4Ch+VarName], ecx ; char *
.text:00403A7F                 call    sub_40D890
.text:00403A84                 mov     [esp+4Ch+VarName], offset aUnrecognizedPr ; "unrecognized prefix: %s"
.text:00403A8B                 mov     esi, eax
.text:00403A8D                 call    ds:libintl_gettext
.text:00403A93                 mov     dword ptr [esp+4Ch+var_40], esi ; char
.text:00403A97                 mov     [esp+4Ch+Str2], 0 ; ErrorMessage
.text:00403A9F                 mov     [esp+4Ch+VarName], 0 ; Code
.text:00403AA6                 mov     [esp+4Ch+var_44], eax ; char *
.text:00403AAA                 call    sub_4161E0
.text:00403AAF                 jmp     loc_40388B
.text:00403AB4 ; ---------------------------------------------------------------------------
.text:00403AB4
.text:00403AB4 loc_403AB4:                             ; CODE XREF: sub_403810+24E↑j
.text:00403AB4                 mov     eax, [esp+4Ch+var_34]
.text:00403AB8                 mov     ebp, offset unk_42B030
.text:00403ABD                 lea     edi, [esp+4Ch+var_30]
.text:00403AC1                 mov     [ebp+ebx*8+4], eax
.text:00403AC5                 mov     dword ptr [esp+4Ch+var_40], esi
.text:00403AC9                 lea     esi, [esp+4Ch+var_34]
.text:00403ACD                 mov     [esp+4Ch+Str2], edi
.text:00403AD1                 mov     edi, 0FFFFFFFFh
.text:00403AD6                 mov     [esp+4Ch+var_44], 0
.text:00403ADE                 mov     [esp+4Ch+VarName], esi
.text:00403AE1                 call    sub_409580
.text:00403AE6                 test    al, al
.text:00403AE8                 jz      short loc_403A78
.text:00403AEA                 jmp     loc_40385D
.text:00403AEA ; ---------------------------------------------------------------------------
.text:00403AEF                 align 10h
.text:00403AF0
.text:00403AF0 loc_403AF0:                             ; CODE XREF: sub_403810+63↑j
.text:00403AF0                 mov     eax, [esp+4Ch+var_30]
.text:00403AF4                 movzx   edx, byte ptr [eax]
.text:00403AF7                 test    dl, dl
.text:00403AF9                 jz      loc_4038C1
.text:00403AFF                 mov     [esp+4Ch+Str1+1], dl
.text:00403B03                 inc     eax
.text:00403B04                 mov     edi, 3
.text:00403B09                 mov     [esp+4Ch+var_30], eax
.text:00403B0D                 jmp     loc_403870
.text:00403B0D sub_403810      endp
.text:00403B0D
.text:00403B0D ; ---------------------------------------------------------------------------
.text:00403B12                 align 10h
.text:00403B20
.text:00403B20 ; =============== S U B R O U T I N E =======================================
.text:00403B20
.text:00403B20
.text:00403B20 ; int __cdecl sub_403B20(char *, char *, char)
.text:00403B20 sub_403B20      proc near               ; CODE XREF: sub_401B10+592↑p
.text:00403B20                                         ; sub_404DF0+10A↓p ...
.text:00403B20
.text:00403B20 var_1C          = dword ptr -1Ch
.text:00403B20 var_D           = byte ptr -0Dh
.text:00403B20 var_C           = dword ptr -0Ch
.text:00403B20 var_8           = dword ptr -8
.text:00403B20 var_4           = dword ptr -4
.text:00403B20 arg_0           = dword ptr  4
.text:00403B20 arg_4           = dword ptr  8
.text:00403B20 arg_8           = byte ptr  0Ch
.text:00403B20
.text:00403B20                 sub     esp, 1Ch
.text:00403B23                 movzx   edx, [esp+1Ch+arg_8]
.text:00403B28                 mov     [esp+1Ch+var_8], esi
.text:00403B2C                 mov     esi, [esp+1Ch+arg_4]
.text:00403B30                 mov     [esp+1Ch+var_C], ebx
.text:00403B34                 mov     [esp+1Ch+var_4], edi
.text:00403B38                 mov     edi, [esp+1Ch+arg_0]
.text:00403B3C                 mov     [esp+1Ch+var_D], dl
.text:00403B40                 mov     [esp+1Ch+var_1C], 10h ; size_t
.text:00403B47                 call    sub_412420
.text:00403B4C                 mov     ebx, eax
.text:00403B4E                 xor     eax, eax
.text:00403B50                 test    esi, esi
.text:00403B52                 jz      short loc_403B5C
.text:00403B54                 mov     [esp+1Ch+var_1C], esi ; char *
.text:00403B57                 call    sub_4125E0
.text:00403B5C
.text:00403B5C loc_403B5C:                             ; CODE XREF: sub_403B20+32↑j
.text:00403B5C                 mov     [ebx+4], eax
.text:00403B5F                 xor     eax, eax
.text:00403B61                 test    edi, edi
.text:00403B63                 jz      short loc_403B6D
.text:00403B65                 mov     [esp+1Ch+var_1C], edi ; char *
.text:00403B68                 call    sub_4125E0
.text:00403B6D
.text:00403B6D loc_403B6D:                             ; CODE XREF: sub_403B20+43↑j
.text:00403B6D                 movzx   ecx, [esp+1Ch+var_D]
.text:00403B72                 mov     [ebx], eax
.text:00403B74                 mov     edx, ds:Block
.text:00403B7A                 mov     [ebx+8], cl
.text:00403B7D                 mov     [ebx+0Ch], edx
.text:00403B80                 mov     esi, [esp+1Ch+var_8]
.text:00403B84                 mov     ds:Block, ebx
.text:00403B8A                 mov     edi, [esp+1Ch+var_4]
.text:00403B8E                 mov     ebx, [esp+1Ch+var_C]
.text:00403B92                 add     esp, 1Ch
.text:00403B95                 retn
.text:00403B95 sub_403B20      endp
.text:00403B95
.text:00403B95 ; ---------------------------------------------------------------------------
.text:00403B96 aReadingDirecto db 'reading directory %s',0
.text:00403B96                                         ; DATA XREF: sub_403C30+1E0↓o
.text:00403BAB asc_403BAB      db ':',0Ah,0            ; DATA XREF: sub_403C30+349↓o
.text:00403BAE aTotal          db 'total',0            ; DATA XREF: sub_403C30:loc_403FB6↓o
.text:00403BB4 asc_403BB4      db '  ',0               ; DATA XREF: sub_403C30+4E2↓o
.text:00403BB4                                         ; sub_403C30+542↓o ...
.text:00403BB7                 align 10h
.text:00403BC0 aSNotListingAlr db '%s: not listing already-listed directory',0
.text:00403BC0                                         ; DATA XREF: sub_403C30+641↓o
.text:00403BE9                 align 20h
.text:00403C00 aCannotDetermin db 'cannot determine device and inode of %s',0
.text:00403C00                                         ; DATA XREF: sub_403C30:loc_4042A1↓o
.text:00403C28 ; const char aS[]
.text:00403C28 aS              db '%s',0               ; DATA XREF: sub_403C30+71E↓o
.text:00403C28                                         ; sub_404500+5FF↓o
.text:00403C2B                 align 10h
.text:00403C30
.text:00403C30 ; =============== S U B R O U T I N E =======================================
.text:00403C30
.text:00403C30
.text:00403C30 ; int __cdecl sub_403C30(LPCSTR, char *, char)
.text:00403C30 sub_403C30      proc near               ; CODE XREF: sub_401B10+458↑p
.text:00403C30
.text:00403C30 Block           = dword ptr -14Ch
.text:00403C30 Src             = dword ptr -148h
.text:00403C30 Size            = dword ptr -144h
.text:00403C30 Stream          = dword ptr -140h
.text:00403C30 var_13C         = dword ptr -13Ch
.text:00403C30 var_138         = dword ptr -138h
.text:00403C30 var_134         = dword ptr -134h
.text:00403C30 var_130         = dword ptr -130h
.text:00403C30 var_124         = dword ptr -124h
.text:00403C30 var_120         = dword ptr -120h
.text:00403C30 var_11C         = dword ptr -11Ch
.text:00403C30 var_118         = dword ptr -118h
.text:00403C30 var_10D         = byte ptr -10Dh
.text:00403C30 Buffer          = byte ptr -10Ch
.text:00403C30 var_8C          = dword ptr -8Ch
.text:00403C30 var_84          = dword ptr -84h
.text:00403C30 var_80          = dword ptr -80h
.text:00403C30 var_7C          = dword ptr -7Ch
.text:00403C30 var_78          = dword ptr -78h
.text:00403C30 arg_0           = dword ptr  4
.text:00403C30 arg_4           = dword ptr  8
.text:00403C30 arg_8           = byte ptr  0Ch
.text:00403C30
.text:00403C30                 push    ebp
.text:00403C31                 push    edi
.text:00403C32                 push    esi
.text:00403C33                 push    ebx
.text:00403C34                 sub     esp, 13Ch
.text:00403C3A                 movzx   edx, [esp+14Ch+arg_8]
.text:00403C42                 mov     [esp+14Ch+var_11C], 0
.text:00403C4A                 mov     [esp+14Ch+var_118], 0
.text:00403C52                 mov     [esp+14Ch+var_10D], dl
.text:00403C56                 call    _errno
.text:00403C5B                 mov     dword ptr [eax], 0
.text:00403C61                 mov     eax, [esp+14Ch+arg_0]
.text:00403C68                 mov     [esp+14Ch+Block], eax ; LPCSTR
.text:00403C6B                 call    sub_41A780
.text:00403C70                 test    eax, eax
.text:00403C72                 mov     ebp, eax
.text:00403C74                 jz      loc_404334
.text:00403C7A                 mov     ebx, ds:dword_42C020
.text:00403C80                 test    ebx, ebx
.text:00403C82                 jz      loc_403D6E
.text:00403C88                 mov     edx, [eax]
.text:00403C8A                 test    edx, edx
.text:00403C8C                 js      loc_404315
.text:00403C92                 mov     [esp+14Ch+Block], edx
.text:00403C95                 lea     edi, [esp+14Ch+var_8C]
.text:00403C9C                 mov     [esp+14Ch+Src], edi
.text:00403CA0                 call    sub_416480
.text:00403CA5
.text:00403CA5 loc_403CA5:                             ; CODE XREF: sub_403C30+6FF↓j
.text:00403CA5                 test    eax, eax
.text:00403CA7                 js      loc_4042A1
.text:00403CAD                 mov     [esp+14Ch+Block], 10h ; size_t
.text:00403CB4                 mov     edx, [esp+14Ch+var_7C]
.text:00403CBB                 mov     edi, [esp+14Ch+var_78]
.text:00403CC2                 mov     ebx, [esp+14Ch+var_84]
.text:00403CC9                 mov     esi, [esp+14Ch+var_80]
.text:00403CD0                 mov     [esp+14Ch+var_124], edx
.text:00403CD4                 mov     [esp+14Ch+var_120], edi
.text:00403CD8                 call    sub_412420
.text:00403CDD                 mov     [eax], ebx
.text:00403CDF                 mov     ecx, [esp+14Ch+var_120]
.text:00403CE3                 mov     edi, eax
.text:00403CE5                 mov     [eax+4], esi
.text:00403CE8                 mov     ebx, [esp+14Ch+var_124]
.text:00403CEC                 mov     esi, ds:dword_42C020
.text:00403CF2                 mov     [eax+0Ch], ecx
.text:00403CF5                 mov     [eax+8], ebx
.text:00403CF8                 mov     [esp+14Ch+Src], eax
.text:00403CFC                 mov     [esp+14Ch+Block], esi
.text:00403CFF                 call    sub_414890
.text:00403D04                 test    eax, eax
.text:00403D06                 jz      loc_40435B
.text:00403D0C                 cmp     eax, edi
.text:00403D0E                 setnz   bl
.text:00403D11                 test    bl, bl
.text:00403D13                 jz      short loc_403D1D
.text:00403D15                 mov     [esp+14Ch+Block], edi ; Block
.text:00403D18                 call    free
.text:00403D1D
.text:00403D1D loc_403D1D:                             ; CODE XREF: sub_403C30+E3↑j
.text:00403D1D                 test    bl, bl
.text:00403D1F                 jnz     loc_404262
.text:00403D25                 mov     esi, ds:dword_42C3C0
.text:00403D2B                 mov     edx, ds:dword_42C3BC
.text:00403D31                 sub     esi, edx
.text:00403D33                 cmp     esi, 10h
.text:00403D36                 jl      loc_404243
.text:00403D3C
.text:00403D3C loc_403D3C:                             ; CODE XREF: sub_403C30+62D↓j
.text:00403D3C                 mov     ebx, edx
.text:00403D3E                 mov     esi, [esp+14Ch+var_78]
.text:00403D45                 lea     ecx, [edx+10h]
.text:00403D48                 mov     ds:dword_42C3BC, ecx
.text:00403D4E                 mov     edx, [esp+14Ch+var_7C]
.text:00403D55                 mov     [ebx+0Ch], esi
.text:00403D58                 mov     [ebx+8], edx
.text:00403D5B                 mov     edi, [esp+14Ch+var_84]
.text:00403D62                 mov     ecx, [esp+14Ch+var_80]
.text:00403D69                 mov     [ebx], edi
.text:00403D6B                 mov     [ebx+4], ecx
.text:00403D6E
.text:00403D6E loc_403D6E:                             ; CODE XREF: sub_403C30+52↑j
.text:00403D6E                 call    sub_404460
.text:00403D73                 lea     esi, [esi+0]
.text:00403D79                 lea     edi, [edi+0]
.text:00403D80
.text:00403D80 loc_403D80:                             ; CODE XREF: sub_403C30+176↓j
.text:00403D80                                         ; sub_403C30+1C7↓j ...
.text:00403D80                 call    _errno
.text:00403D85                 mov     dword ptr [eax], 0
.text:00403D8B                 mov     [esp+14Ch+Block], ebp
.text:00403D8E                 call    sub_418BD0
.text:00403D93                 test    eax, eax
.text:00403D95                 mov     ebx, eax
.text:00403D97                 jz      short loc_403E05
.text:00403D99                 lea     esi, [eax+0Ch]
.text:00403D9C                 mov     [esp+14Ch+Block], esi
.text:00403D9F                 call    sub_404390
.text:00403DA4                 test    al, al
.text:00403DA6                 jnz     short loc_403D80
.text:00403DA8                 movzx   eax, byte ptr [ebx+0Ah]
.text:00403DAC                 xor     edx, edx
.text:00403DAE                 cmp     al, 6
.text:00403DB0                 jz      short loc_403E00
.text:00403DB2                 cmp     al, 2
.text:00403DB4                 jz      short loc_403E00
.text:00403DB6                 cmp     al, 4
.text:00403DB8                 jz      short loc_403E00
.text:00403DBA                 cmp     al, 1
.text:00403DBC                 jz      short loc_403E00
.text:00403DBE                 cmp     al, 0Ah
.text:00403DC0                 jz      short loc_403E00
.text:00403DC2                 cmp     al, 8
.text:00403DC4                 jz      short loc_403E00
.text:00403DC6                 cmp     al, 0Ch
.text:00403DC8                 jz      short loc_403E00
.text:00403DCA                 lea     esi, [esi+0]
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403C30+1D3↓j
.text:00403DD0                 mov     [esp+14Ch+Size], 0 ; char
.text:00403DD8                 mov     ebx, [esp+14Ch+arg_0]
.text:00403DDF                 mov     [esp+14Ch+Src], edx ; int
.text:00403DE3                 mov     [esp+14Ch+Block], esi ; char *
.text:00403DE6                 mov     [esp+14Ch+Stream], ebx ; char *
.text:00403DEA                 call    sub_404500
.text:00403DEF                 add     [esp+14Ch+var_11C], eax
.text:00403DF3                 adc     [esp+14Ch+var_118], edx
.text:00403DF7                 jmp     short loc_403D80
.text:00403DF7 ; ---------------------------------------------------------------------------
.text:00403DF9                 align 10h
.text:00403E00
.text:00403E00 loc_403E00:                             ; CODE XREF: sub_403C30+180↑j
.text:00403E00                                         ; sub_403C30+184↑j ...
.text:00403E00                 movzx   edx, al
.text:00403E03                 jmp     short loc_403DD0
.text:00403E05 ; ---------------------------------------------------------------------------
.text:00403E05
.text:00403E05 loc_403E05:                             ; CODE XREF: sub_403C30+167↑j
.text:00403E05                 call    _errno
.text:00403E0A                 mov     edi, [eax]
.text:00403E0C                 test    edi, edi
.text:00403E0E                 jz      short loc_403E73
.text:00403E10                 mov     [esp+14Ch+Block], offset aReadingDirecto ; "reading directory %s"
.text:00403E17                 call    ds:libintl_gettext
.text:00403E1D                 mov     edi, eax
.text:00403E1F                 mov     eax, [esp+14Ch+arg_0]
.text:00403E26                 mov     [esp+14Ch+Block], eax ; char *
.text:00403E29                 call    sub_40DC30
.text:00403E2E                 mov     esi, eax
.text:00403E30                 call    _errno
.text:00403E35                 mov     [esp+14Ch+Stream], esi ; char
.text:00403E39                 mov     [esp+14Ch+Size], edi ; char *
.text:00403E3D                 mov     esi, [eax]
.text:00403E3F                 mov     [esp+14Ch+Block], 0 ; Code
.text:00403E46                 mov     [esp+14Ch+Src], esi ; ErrorMessage
.text:00403E4A                 call    sub_4161E0
.text:00403E4F                 cmp     [esp+14Ch+var_10D], 0
.text:00403E54                 jz      loc_404225
.text:00403E5A                 mov     edx, 2
.text:00403E5F                 mov     ds:Code, edx
.text:00403E65
.text:00403E65 loc_403E65:                             ; CODE XREF: sub_403C30+5FD↓j
.text:00403E65                                         ; sub_403C30+60E↓j
.text:00403E65                 call    _errno
.text:00403E6A                 cmp     dword ptr [eax], 73h ; 's'
.text:00403E6D                 jz      loc_403D80
.text:00403E73
.text:00403E73 loc_403E73:                             ; CODE XREF: sub_403C30+1DE↑j
.text:00403E73                 mov     [esp+14Ch+Block], ebp ; void *
.text:00403E76                 call    sub_41A710
.text:00403E7B                 call    sub_404FA0
.text:00403E80                 cmp     ds:byte_42C210, 0
.text:00403E87                 jnz     loc_404208
.text:00403E8D
.text:00403E8D loc_403E8D:                             ; CODE XREF: sub_403C30+5F0↓j
.text:00403E8D                 cmp     ds:byte_42C2A0, 0
.text:00403E94                 jnz     short loc_403EA3
.text:00403E96                 cmp     ds:byte_42C210, 0
.text:00403E9D                 jz      loc_403F93
.text:00403EA3
.text:00403EA3 loc_403EA3:                             ; CODE XREF: sub_403C30+264↑j
.text:00403EA3                 cmp     byte_42B0B0, 0
.text:00403EAA                 jnz     short loc_403ED6
.text:00403EAC                 mov     edx, ds:_iob
.text:00403EB2                 mov     esi, [edx+24h]
.text:00403EB5                 dec     esi
.text:00403EB6                 mov     [edx+24h], esi
.text:00403EB9                 test    esi, esi
.text:00403EBB                 js      loc_4041EA
.text:00403EC1                 mov     ecx, ds:_iob
.text:00403EC7                 mov     eax, [ecx+20h]
.text:00403ECA                 mov     byte ptr [eax], 0Ah
.text:00403ECD                 inc     dword ptr [ecx+20h]
.text:00403ED0
.text:00403ED0 loc_403ED0:                             ; CODE XREF: sub_403C30+5D3↓j
.text:00403ED0                 inc     ds:dword_42C340
.text:00403ED6
.text:00403ED6 loc_403ED6:                             ; CODE XREF: sub_403C30+27A↑j
.text:00403ED6                 cmp     ds:byte_42C1A0, 0
.text:00403EDD                 mov     byte_42B0B0, 0
.text:00403EE4                 jnz     loc_40415C
.text:00403EEA
.text:00403EEA loc_403EEA:                             ; CODE XREF: sub_403C30+563↓j
.text:00403EEA                                         ; sub_403C30+599↓j
.text:00403EEA                 mov     [esp+14Ch+Stream], 0 ; int
.text:00403EF2                 mov     eax, [esp+14Ch+arg_4]
.text:00403EF9                 mov     esi, ds:dword_42C280
.text:00403EFF                 test    eax, eax
.text:00403F01                 mov     [esp+14Ch+Size], esi ; int
.text:00403F05                 jz      loc_404150
.text:00403F0B
.text:00403F0B loc_403F0B:                             ; CODE XREF: sub_403C30+527↓j
.text:00403F0B                 mov     [esp+14Ch+Src], eax ; char *
.text:00403F0F                 mov     edx, ds:_iob
.text:00403F15                 add     edx, 20h ; ' '
.text:00403F18                 mov     [esp+14Ch+Block], edx ; FILE *
.text:00403F1B                 call    sub_405EA0
.text:00403F20                 add     ds:dword_42C340, eax
.text:00403F26                 cmp     ds:byte_42C1A0, 0
.text:00403F2D                 jz      short loc_403F63
.text:00403F2F                 mov     edx, ds:stru_42C380._flag
.text:00403F35                 lea     ecx, [edx+4]
.text:00403F38                 cmp     ecx, ds:stru_42C380._file
.text:00403F3E                 ja      loc_404131
.text:00403F44
.text:00403F44 loc_403F44:                             ; CODE XREF: sub_403C30+51B↓j
.text:00403F44                 mov     [esp+14Ch+Size], 4 ; Size
.text:00403F4C                 mov     [esp+14Ch+Src], offset dword_42C340 ; Src
.text:00403F54                 mov     [esp+14Ch+Block], edx ; void *
.text:00403F57                 call    memcpy
.text:00403F5C                 add     ds:stru_42C380._flag, 4
.text:00403F63
.text:00403F63 loc_403F63:                             ; CODE XREF: sub_403C30+2FD↑j
.text:00403F63                 mov     [esp+14Ch+Size], 2 ; ElementCount
.text:00403F6B                 mov     edi, ds:_iob
.text:00403F71                 mov     [esp+14Ch+Src], 1 ; ElementSize
.text:00403F79                 mov     [esp+14Ch+Block], offset asc_403BAB ; ":\n"
.text:00403F80                 add     edi, 20h ; ' '
.text:00403F83                 mov     [esp+14Ch+Stream], edi ; Stream
.text:00403F87                 call    fwrite
.text:00403F8C                 add     ds:dword_42C340, 2
.text:00403F93
.text:00403F93 loc_403F93:                             ; CODE XREF: sub_403C30+26D↑j
.text:00403F93                 mov     eax, ds:dword_42C110
.text:00403F98                 test    eax, eax
.text:00403F9A                 jz      short loc_403FA9
.text:00403F9C                 cmp     ds:byte_42C170, 0
.text:00403FA3                 jz      loc_4040A7
.text:00403FA9
.text:00403FA9 loc_403FA9:                             ; CODE XREF: sub_403C30+36A↑j
.text:00403FA9                 cmp     ds:byte_42C1A0, 0
.text:00403FB0                 jnz     loc_4040FC
.text:00403FB6
.text:00403FB6 loc_403FB6:                             ; CODE XREF: sub_403C30+4FC↓j
.text:00403FB6                 mov     [esp+14Ch+Block], offset aTotal ; "total"
.text:00403FBD                 call    ds:libintl_gettext
.text:00403FC3                 mov     edx, ds:_iob
.text:00403FC9                 mov     edi, eax
.text:00403FCB                 add     edx, 20h ; ' '
.text:00403FCE                 mov     [esp+14Ch+Src], edx ; Stream
.text:00403FD2                 mov     [esp+14Ch+Block], eax ; Buffer
.text:00403FD5                 call    fputs
.text:00403FDA                 mov     [esp+14Ch+Block], edi ; Str
.text:00403FDD                 call    strlen
.text:00403FE2                 add     ds:dword_42C340, eax
.text:00403FE8                 mov     esi, ds:_iob
.text:00403FEE                 mov     ebx, [esi+24h]
.text:00403FF1                 dec     ebx
.text:00403FF2                 test    ebx, ebx
.text:00403FF4                 mov     [esi+24h], ebx
.text:00403FF7                 js      loc_4040DE
.text:00403FFD                 mov     ecx, ds:_iob
.text:00404003                 mov     eax, [ecx+20h]
.text:00404006                 mov     byte ptr [eax], 20h ; ' '
.text:00404009                 inc     dword ptr [ecx+20h]
.text:0040400C
.text:0040400C loc_40400C:                             ; CODE XREF: sub_403C30+4C7↓j
.text:0040400C                 inc     ds:dword_42C340
.text:00404012                 lea     ebx, [esp+14Ch+Buffer]
.text:00404016                 mov     ecx, [esp+14Ch+var_118]
.text:0040401A                 mov     [esp+14Ch+Size], ebx ; Buffer
.text:0040401E                 mov     edx, ds:dword_42C190
.text:00404024                 mov     edi, ds:dword_42C194
.text:0040402A                 mov     [esp+14Ch+Src], ecx ; int
.text:0040402E                 mov     esi, ds:dword_42C180
.text:00404034                 mov     ebp, [esp+14Ch+var_11C]
.text:00404038                 mov     [esp+14Ch+var_134], edx ; int
.text:0040403C                 mov     [esp+14Ch+var_130], edi ; int
.text:00404040                 mov     [esp+14Ch+Stream], esi ; int
.text:00404044                 mov     [esp+14Ch+var_13C], 200h ; int
.text:0040404C                 mov     [esp+14Ch+var_138], 0 ; int
.text:00404054                 mov     [esp+14Ch+Block], ebp ; int
.text:00404057                 call    sub_4126F0
.text:0040405C                 mov     [esp+14Ch+Block], eax ; Buffer
.text:0040405F                 mov     edx, ds:_iob
.text:00404065                 mov     edi, eax
.text:00404067                 add     edx, 20h ; ' '
.text:0040406A                 mov     [esp+14Ch+Src], edx ; Stream
.text:0040406E                 call    fputs
.text:00404073                 mov     [esp+14Ch+Block], edi ; Str
.text:00404076                 call    strlen
.text:0040407B                 add     ds:dword_42C340, eax
.text:00404081                 mov     esi, ds:_iob
.text:00404087                 mov     ebx, [esi+24h]
.text:0040408A                 dec     ebx
.text:0040408B                 test    ebx, ebx
.text:0040408D                 mov     [esi+24h], ebx
.text:00404090                 js      short loc_4040C3
.text:00404092                 mov     ecx, ds:_iob
.text:00404098                 mov     eax, [ecx+20h]
.text:0040409B                 mov     byte ptr [eax], 0Ah
.text:0040409E                 inc     dword ptr [ecx+20h]
.text:004040A1
.text:004040A1 loc_4040A1:                             ; CODE XREF: sub_403C30+4AC↓j
.text:004040A1                 inc     ds:dword_42C340
.text:004040A7
.text:004040A7 loc_4040A7:                             ; CODE XREF: sub_403C30+373↑j
.text:004040A7                 mov     ebx, ds:dword_42C050
.text:004040AD                 test    ebx, ebx
.text:004040AF                 jnz     short loc_4040BC
.text:004040B1
.text:004040B1 loc_4040B1:                             ; CODE XREF: sub_403C30+491↓j
.text:004040B1                                         ; sub_403C30+66C↓j ...
.text:004040B1                 add     esp, 13Ch
.text:004040B7                 pop     ebx
.text:004040B8                 pop     esi
.text:004040B9                 pop     edi
.text:004040BA                 pop     ebp
.text:004040BB                 retn
.text:004040BC ; ---------------------------------------------------------------------------
.text:004040BC
.text:004040BC loc_4040BC:                             ; CODE XREF: sub_403C30+47F↑j
.text:004040BC                 call    sub_4051F0
.text:004040C1                 jmp     short loc_4040B1
.text:004040C3 ; ---------------------------------------------------------------------------
.text:004040C3
.text:004040C3 loc_4040C3:                             ; CODE XREF: sub_403C30+460↑j
.text:004040C3                 mov     [esp+14Ch+Block], 0Ah ; Ch
.text:004040CA                 mov     ebp, ds:_iob
.text:004040D0                 add     ebp, 20h ; ' '
.text:004040D3                 mov     [esp+14Ch+Src], ebp ; File
.text:004040D7                 call    _flsbuf
.text:004040DC                 jmp     short loc_4040A1
.text:004040DE ; ---------------------------------------------------------------------------
.text:004040DE
.text:004040DE loc_4040DE:                             ; CODE XREF: sub_403C30+3C7↑j
.text:004040DE                 mov     [esp+14Ch+Block], 20h ; ' ' ; Ch
.text:004040E5                 mov     ebp, ds:_iob
.text:004040EB                 add     ebp, 20h ; ' '
.text:004040EE                 mov     [esp+14Ch+Src], ebp ; File
.text:004040F2                 call    _flsbuf
.text:004040F7                 jmp     loc_40400C
.text:004040FC ; ---------------------------------------------------------------------------
.text:004040FC
.text:004040FC loc_4040FC:                             ; CODE XREF: sub_403C30+380↑j
.text:004040FC                 mov     [esp+14Ch+Size], 2 ; ElementCount
.text:00404104                 mov     ebp, ds:_iob
.text:0040410A                 mov     [esp+14Ch+Src], 1 ; ElementSize
.text:00404112                 mov     [esp+14Ch+Block], offset asc_403BB4 ; "  "
.text:00404119                 add     ebp, 20h ; ' '
.text:0040411C                 mov     [esp+14Ch+Stream], ebp ; Stream
.text:00404120                 call    fwrite
.text:00404125                 add     ds:dword_42C340, 2
.text:0040412C                 jmp     loc_403FB6
.text:00404131 ; ---------------------------------------------------------------------------
.text:00404131
.text:00404131 loc_404131:                             ; CODE XREF: sub_403C30+30E↑j
.text:00404131                 mov     [esp+14Ch+Src], 4
.text:00404139                 mov     [esp+14Ch+Block], offset stru_42C380
.text:00404140                 call    sub_427730
.text:00404145                 mov     edx, ds:stru_42C380._flag
.text:0040414B                 jmp     loc_403F44
.text:00404150 ; ---------------------------------------------------------------------------
.text:00404150
.text:00404150 loc_404150:                             ; CODE XREF: sub_403C30+2D5↑j
.text:00404150                 mov     eax, [esp+14Ch+arg_0]
.text:00404157                 jmp     loc_403F0B
.text:0040415C ; ---------------------------------------------------------------------------
.text:0040415C
.text:0040415C loc_40415C:                             ; CODE XREF: sub_403C30+2B4↑j
.text:0040415C                 mov     [esp+14Ch+Size], 2 ; ElementCount
.text:00404164                 mov     ebp, ds:_iob
.text:0040416A                 mov     [esp+14Ch+Src], 1 ; ElementSize
.text:00404172                 mov     [esp+14Ch+Block], offset asc_403BB4 ; "  "
.text:00404179                 add     ebp, 20h ; ' '
.text:0040417C                 mov     [esp+14Ch+Stream], ebp ; Stream
.text:00404180                 call    fwrite
.text:00404185                 add     ds:dword_42C340, 2
.text:0040418C                 cmp     ds:byte_42C1A0, 0
.text:00404193                 jz      loc_403EEA
.text:00404199                 mov     edx, ds:stru_42C380._flag
.text:0040419F                 lea     ebx, [edx+4]
.text:004041A2                 cmp     ebx, ds:stru_42C380._file
.text:004041A8                 ja      short loc_4041CE
.text:004041AA
.text:004041AA loc_4041AA:                             ; CODE XREF: sub_403C30+5B8↓j
.text:004041AA                 mov     [esp+14Ch+Size], 4 ; Size
.text:004041B2                 mov     [esp+14Ch+Src], offset dword_42C340 ; Src
.text:004041BA                 mov     [esp+14Ch+Block], edx ; void *
.text:004041BD                 call    memcpy
.text:004041C2                 add     ds:stru_42C380._flag, 4
.text:004041C9                 jmp     loc_403EEA
.text:004041CE ; ---------------------------------------------------------------------------
.text:004041CE
.text:004041CE loc_4041CE:                             ; CODE XREF: sub_403C30+578↑j
.text:004041CE                 mov     [esp+14Ch+Src], 4
.text:004041D6                 mov     [esp+14Ch+Block], offset stru_42C380
.text:004041DD                 call    sub_427730
.text:004041E2                 mov     edx, ds:stru_42C380._flag
.text:004041E8                 jmp     short loc_4041AA
.text:004041EA ; ---------------------------------------------------------------------------
.text:004041EA
.text:004041EA loc_4041EA:                             ; CODE XREF: sub_403C30+28B↑j
.text:004041EA                 mov     [esp+14Ch+Block], 0Ah ; Ch
.text:004041F1                 mov     edi, ds:_iob
.text:004041F7                 add     edi, 20h ; ' '
.text:004041FA                 mov     [esp+14Ch+Src], edi ; File
.text:004041FE                 call    _flsbuf
.text:00404203                 jmp     loc_403ED0
.text:00404208 ; ---------------------------------------------------------------------------
.text:00404208
.text:00404208 loc_404208:                             ; CODE XREF: sub_403C30+257↑j
.text:00404208                 movzx   ebx, [esp+14Ch+var_10D]
.text:0040420D                 mov     ebp, [esp+14Ch+arg_0]
.text:00404214                 mov     [esp+14Ch+Src], ebx ; char
.text:00404218                 mov     [esp+14Ch+Block], ebp ; char *
.text:0040421B                 call    sub_404DF0
.text:00404220                 jmp     loc_403E8D
.text:00404225 ; ---------------------------------------------------------------------------
.text:00404225
.text:00404225 loc_404225:                             ; CODE XREF: sub_403C30+224↑j
.text:00404225                 mov     ecx, ds:Code
.text:0040422B                 test    ecx, ecx
.text:0040422D                 jnz     loc_403E65
.text:00404233                 mov     edi, 1
.text:00404238                 mov     ds:Code, edi
.text:0040423E                 jmp     loc_403E65
.text:00404243 ; ---------------------------------------------------------------------------
.text:00404243
.text:00404243 loc_404243:                             ; CODE XREF: sub_403C30+106↑j
.text:00404243                 mov     [esp+14Ch+Src], 10h
.text:0040424B                 mov     [esp+14Ch+Block], offset unk_42C3B0
.text:00404252                 call    sub_427730
.text:00404257                 mov     edx, ds:dword_42C3BC
.text:0040425D                 jmp     loc_403D3C
.text:00404262 ; ---------------------------------------------------------------------------
.text:00404262
.text:00404262 loc_404262:                             ; CODE XREF: sub_403C30+EF↑j
.text:00404262                 mov     eax, [esp+14Ch+arg_0]
.text:00404269                 mov     [esp+14Ch+Block], eax ; char *
.text:0040426C                 call    sub_40DC30
.text:00404271                 mov     [esp+14Ch+Block], offset aSNotListingAlr ; "%s: not listing already-listed director"...
.text:00404278                 mov     ebp, eax
.text:0040427A                 call    ds:libintl_gettext
.text:00404280                 mov     [esp+14Ch+Stream], ebp ; char
.text:00404284                 mov     [esp+14Ch+Src], 0 ; ErrorMessage
.text:0040428C                 mov     [esp+14Ch+Block], 0 ; Code
.text:00404293                 mov     [esp+14Ch+Size], eax ; char *
.text:00404297                 call    sub_4161E0
.text:0040429C                 jmp     loc_4040B1
.text:004042A1 ; ---------------------------------------------------------------------------
.text:004042A1
.text:004042A1 loc_4042A1:                             ; CODE XREF: sub_403C30+77↑j
.text:004042A1                 mov     [esp+14Ch+Block], offset aCannotDetermin ; "cannot determine device and inode of %s"
.text:004042A8                 call    ds:libintl_gettext
.text:004042AE                 mov     ecx, [esp+14Ch+arg_0]
.text:004042B5                 mov     ebp, eax
.text:004042B7                 mov     [esp+14Ch+Block], ecx ; char *
.text:004042BA                 call    sub_40DC30
.text:004042BF                 mov     esi, eax
.text:004042C1                 call    _errno
.text:004042C6                 mov     [esp+14Ch+Stream], esi ; char
.text:004042CA                 mov     [esp+14Ch+Size], ebp ; char *
.text:004042CE
.text:004042CE loc_4042CE:                             ; CODE XREF: sub_403C30+726↓j
.text:004042CE                 mov     ebx, [eax]
.text:004042D0                 mov     [esp+14Ch+Block], 0 ; Code
.text:004042D7                 mov     [esp+14Ch+Src], ebx ; ErrorMessage
.text:004042DB                 call    sub_4161E0
.text:004042E0                 cmp     [esp+14Ch+var_10D], 0
.text:004042E5                 jz      short loc_4042F7
.text:004042E7                 mov     edi, 2
.text:004042EC                 mov     ds:Code, edi
.text:004042F2                 jmp     loc_4040B1
.text:004042F7 ; ---------------------------------------------------------------------------
.text:004042F7
.text:004042F7 loc_4042F7:                             ; CODE XREF: sub_403C30+6B5↑j
.text:004042F7                 mov     edx, ds:Code
.text:004042FD                 test    edx, edx
.text:004042FF                 jnz     loc_4040B1
.text:00404305                 mov     ebp, 1
.text:0040430A                 mov     ds:Code, ebp
.text:00404310                 jmp     loc_4040B1
.text:00404315 ; ---------------------------------------------------------------------------
.text:00404315
.text:00404315 loc_404315:                             ; CODE XREF: sub_403C30+5C↑j
.text:00404315                 mov     eax, [esp+14Ch+arg_0]
.text:0040431C                 lea     edx, [esp+14Ch+var_8C]
.text:00404323                 mov     [esp+14Ch+Src], edx ; int
.text:00404327                 mov     [esp+14Ch+Block], eax ; char *
.text:0040432A                 call    sub_419460
.text:0040432F                 jmp     loc_403CA5
.text:00404334 ; ---------------------------------------------------------------------------
.text:00404334
.text:00404334 loc_404334:                             ; CODE XREF: sub_403C30+44↑j
.text:00404334                 mov     ecx, [esp+14Ch+arg_0]
.text:0040433B                 mov     [esp+14Ch+Block], ecx ; char *
.text:0040433E                 call    sub_40DC30
.text:00404343                 mov     esi, eax
.text:00404345                 call    _errno
.text:0040434A                 mov     [esp+14Ch+Stream], esi
.text:0040434E                 mov     [esp+14Ch+Size], offset aS ; "%s"
.text:00404356                 jmp     loc_4042CE
.text:0040435B ; ---------------------------------------------------------------------------
.text:0040435B
.text:0040435B loc_40435B:                             ; CODE XREF: sub_403C30+D6↑j
.text:0040435B                 call    sub_415320
.text:0040435B sub_403C30      endp
.text:0040435B
.text:00404360
.text:00404360 ; =============== S U B R O U T I N E =======================================
.text:00404360
.text:00404360
.text:00404360 sub_404360      proc near               ; CODE XREF: sub_4025F0+77B↑p
.text:00404360                                         ; sub_4025F0:loc_402D77↑p
.text:00404360
.text:00404360 var_C           = dword ptr -0Ch
.text:00404360 arg_0           = dword ptr  4
.text:00404360
.text:00404360                 sub     esp, 0Ch
.text:00404363                 mov     [esp+0Ch+var_C], 8 ; size_t
.text:0040436A                 call    sub_412420
.text:0040436F                 mov     ecx, [esp+0Ch+arg_0]
.text:00404373                 mov     [eax], ecx
.text:00404375                 mov     ecx, ds:dword_42C240
.text:0040437B                 mov     [eax+4], ecx
.text:0040437E                 mov     ds:dword_42C240, eax
.text:00404383                 add     esp, 0Ch
.text:00404386                 retn
.text:00404386 sub_404360      endp
.text:00404386
.text:00404386 ; ---------------------------------------------------------------------------
.text:00404387                 align 10h
.text:00404390
.text:00404390 ; =============== S U B R O U T I N E =======================================
.text:00404390
.text:00404390
.text:00404390 sub_404390      proc near               ; CODE XREF: sub_403C30+16F↑p
.text:00404390
.text:00404390 var_1C          = dword ptr -1Ch
.text:00404390 var_18          = dword ptr -18h
.text:00404390 var_14          = dword ptr -14h
.text:00404390 var_9           = byte ptr -9
.text:00404390 arg_0           = dword ptr  4
.text:00404390
.text:00404390                 push    esi
.text:00404391                 push    ebx
.text:00404392                 sub     esp, 14h
.text:00404395                 mov     eax, ds:dword_42C230
.text:0040439A                 mov     [esp+1Ch+var_9], 0
.text:0040439F                 mov     esi, [esp+1Ch+arg_0]
.text:004043A3                 cmp     eax, 2
.text:004043A6                 jz      short loc_4043B1
.text:004043A8                 cmp     byte ptr [esi], 2Eh ; '.'
.text:004043AB                 jz      loc_404437
.text:004043B1
.text:004043B1 loc_4043B1:                             ; CODE XREF: sub_404390+16↑j
.text:004043B1                                         ; sub_404390+B9↓j
.text:004043B1                 test    eax, eax
.text:004043B3                 jnz     short loc_4043F0
.text:004043B5                 mov     ebx, ds:dword_42C250
.text:004043BB                 test    ebx, ebx
.text:004043BD                 jz      short loc_4043F0
.text:004043BF                 nop
.text:004043C0
.text:004043C0 loc_4043C0:                             ; CODE XREF: sub_404390+4F↓j
.text:004043C0                 mov     [esp+1Ch+var_14], 4 ; int
.text:004043C8                 mov     [esp+1Ch+var_18], esi ; char *
.text:004043CC                 mov     edx, [ebx]
.text:004043CE                 mov     [esp+1Ch+var_1C], edx ; char *
.text:004043D1                 call    sub_410500
.text:004043D6                 test    eax, eax
.text:004043D8                 jz      short loc_404430
.text:004043DA                 mov     ebx, [ebx+4]
.text:004043DD                 test    ebx, ebx
.text:004043DF                 jnz     short loc_4043C0
.text:004043E1                 jmp     short loc_4043F0
.text:004043E1 ; ---------------------------------------------------------------------------
.text:004043E3                 align 10h
.text:004043F0
.text:004043F0 loc_4043F0:                             ; CODE XREF: sub_404390+23↑j
.text:004043F0                                         ; sub_404390+2D↑j ...
.text:004043F0                 mov     ebx, ds:dword_42C240
.text:004043F6                 test    ebx, ebx
.text:004043F8                 jz      short loc_404421
.text:004043FA                 lea     esi, [esi+0]
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_404390+8F↓j
.text:00404400                 mov     [esp+1Ch+var_14], 4 ; int
.text:00404408                 mov     [esp+1Ch+var_18], esi ; char *
.text:0040440C                 mov     edx, [ebx]
.text:0040440E                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00404411                 call    sub_410500
.text:00404416                 test    eax, eax
.text:00404418                 jz      short loc_404430
.text:0040441A                 mov     ebx, [ebx+4]
.text:0040441D                 test    ebx, ebx
.text:0040441F                 jnz     short loc_404400
.text:00404421
.text:00404421 loc_404421:                             ; CODE XREF: sub_404390+68↑j
.text:00404421                                         ; sub_404390+A5↓j
.text:00404421                 movzx   eax, [esp+1Ch+var_9]
.text:00404426                 add     esp, 14h
.text:00404429                 pop     ebx
.text:0040442A                 pop     esi
.text:0040442B                 retn
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442C                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_404390+48↑j
.text:00404430                                         ; sub_404390+88↑j ...
.text:00404430                 mov     [esp+1Ch+var_9], 1
.text:00404435                 jmp     short loc_404421
.text:00404437 ; ---------------------------------------------------------------------------
.text:00404437
.text:00404437 loc_404437:                             ; CODE XREF: sub_404390+1B↑j
.text:00404437                 test    eax, eax
.text:00404439                 jz      short loc_404430
.text:0040443B                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:0040443F                 jz      short loc_40444E
.text:00404441                 lea     edx, [esi+1]
.text:00404444
.text:00404444 loc_404444:                             ; CODE XREF: sub_404390+C1↓j
.text:00404444                 cmp     byte ptr [edx], 0
.text:00404447                 jz      short loc_404430
.text:00404449                 jmp     loc_4043B1
.text:0040444E ; ---------------------------------------------------------------------------
.text:0040444E
.text:0040444E loc_40444E:                             ; CODE XREF: sub_404390+AF↑j
.text:0040444E                 lea     edx, [esi+2]
.text:00404451                 jmp     short loc_404444
.text:00404451 sub_404390      endp
.text:00404451
.text:00404451 ; ---------------------------------------------------------------------------
.text:00404453                 align 10h
.text:00404460
.text:00404460 ; =============== S U B R O U T I N E =======================================
.text:00404460
.text:00404460
.text:00404460 sub_404460      proc near               ; CODE XREF: sub_401B10+16A↑p
.text:00404460                                         ; sub_403C30:loc_403D6E↑p
.text:00404460
.text:00404460 Block           = dword ptr -0Ch
.text:00404460
.text:00404460                 push    esi
.text:00404461                 xor     esi, esi
.text:00404463                 push    ebx
.text:00404464                 sub     esp, 4
.text:00404467                 cmp     esi, ds:dword_42C050
.text:0040446D                 jb      short loc_4044C2
.text:0040446F
.text:0040446F loc_40446F:                             ; CODE XREF: sub_404460+8F↓j
.text:0040446F                 xor     ebx, ebx
.text:00404471                 xor     ecx, ecx
.text:00404473                 xor     edx, edx
.text:00404475                 mov     ds:dword_42C050, ebx
.text:0040447B                 xor     esi, esi
.text:0040447D                 xor     eax, eax
.text:0040447F                 mov     ds:dword_42C080, ecx
.text:00404485                 xor     ebx, ebx
.text:00404487                 xor     ecx, ecx
.text:00404489                 mov     ds:dword_42C090, edx
.text:0040448F                 xor     edx, edx
.text:00404491                 mov     ds:dword_42C0A0, esi
.text:00404497                 xor     esi, esi
.text:00404499                 mov     ds:dword_42C0B0, ebx
.text:0040449F                 xor     ebx, ebx
.text:004044A1                 mov     ds:dword_42C0E0, esi
.text:004044A7                 mov     ds:dword_42C0F0, ebx
.text:004044AD                 mov     ds:dword_42C0C0, ecx
.text:004044B3                 mov     ds:dword_42C0D0, edx
.text:004044B9                 mov     ds:dword_42C100, eax
.text:004044BE                 pop     eax
.text:004044BF                 pop     ebx
.text:004044C0                 pop     esi
.text:004044C1                 retn
.text:004044C2 ; ---------------------------------------------------------------------------
.text:004044C2
.text:004044C2 loc_4044C2:                             ; CODE XREF: sub_404460+D↑j
.text:004044C2                                         ; sub_404460+8D↓j
.text:004044C2                 mov     ecx, ds:dword_42C030
.text:004044C8                 mov     ebx, esi
.text:004044CA                 shl     ebx, 7
.text:004044CD                 mov     edx, [ecx+ebx]
.text:004044D0                 mov     [esp+0Ch+Block], edx ; Block
.text:004044D3                 call    free
.text:004044D8                 mov     edx, ds:dword_42C030
.text:004044DE                 mov     eax, [edx+ebx+70h]
.text:004044E2                 test    eax, eax
.text:004044E4                 jnz     short loc_4044F4
.text:004044E6
.text:004044E6 loc_4044E6:                             ; CODE XREF: sub_404460+9C↓j
.text:004044E6                 inc     esi
.text:004044E7                 cmp     esi, ds:dword_42C050
.text:004044ED                 jb      short loc_4044C2
.text:004044EF                 jmp     loc_40446F
.text:004044F4 ; ---------------------------------------------------------------------------
.text:004044F4
.text:004044F4 loc_4044F4:                             ; CODE XREF: sub_404460+84↑j
.text:004044F4                 mov     [esp+0Ch+Block], eax ; Block
.text:004044F7                 call    free
.text:004044FC                 jmp     short loc_4044E6
.text:004044FC sub_404460      endp
.text:004044FC
.text:004044FC ; ---------------------------------------------------------------------------
.text:004044FE                 align 10h
.text:00404500
.text:00404500 ; =============== S U B R O U T I N E =======================================
.text:00404500
.text:00404500 ; Attributes: bp-based frame
.text:00404500
.text:00404500 ; int __cdecl sub_404500(char *, int, char, char *)
.text:00404500 sub_404500      proc near               ; CODE XREF: sub_401B10+1A2↑p
.text:00404500                                         ; sub_401B10+571↑p ...
.text:00404500
.text:00404500 Str             = dword ptr -238h
.text:00404500 ErrorMessage    = dword ptr -234h
.text:00404500 Buffer          = dword ptr -230h
.text:00404500 var_22C         = byte ptr -22Ch
.text:00404500 var_228         = dword ptr -228h
.text:00404500 var_224         = dword ptr -224h
.text:00404500 var_220         = dword ptr -220h
.text:00404500 var_21C         = dword ptr -21Ch
.text:00404500 var_218         = byte ptr -218h
.text:00404500 var_20C         = dword ptr -20Ch
.text:00404500 var_1FD         = byte ptr -1FDh
.text:00404500 var_1FC         = dword ptr -1FCh
.text:00404500 var_1F8         = dword ptr -1F8h
.text:00404500 var_1F4         = dword ptr -1F4h
.text:00404500 var_1E9         = byte ptr -1E9h
.text:00404500 var_1E8         = byte ptr -1E8h
.text:00404500 var_168         = byte ptr -168h
.text:00404500 var_148         = byte ptr -148h
.text:00404500 var_128         = byte ptr -128h
.text:00404500 var_A8          = byte ptr -0A8h
.text:00404500 var_88          = dword ptr -88h
.text:00404500 arg_0           = dword ptr  8
.text:00404500 arg_4           = dword ptr  0Ch
.text:00404500 arg_8           = byte ptr  10h
.text:00404500 Size            = dword ptr  14h
.text:00404500
.text:00404500                 push    ebp
.text:00404501                 mov     ebp, esp
.text:00404503                 push    edi
.text:00404504                 push    esi
.text:00404505                 push    ebx
.text:00404506                 sub     esp, 22Ch
.text:0040450C                 mov     eax, ds:dword_42C050
.text:00404511                 movzx   edx, [ebp+arg_8]
.text:00404515                 mov     ebx, [ebp+arg_4]
.text:00404518                 cmp     eax, ds:dword_42C040
.text:0040451E                 mov     [ebp+var_1E9], dl
.text:00404524                 jz      loc_404C41
.text:0040452A
.text:0040452A loc_40452A:                             ; CODE XREF: sub_404500+76B↓j
.text:0040452A                 mov     ecx, ds:dword_42C030
.text:00404530                 shl     eax, 7
.text:00404533                 add     eax, ecx
.text:00404535                 cmp     [ebp+var_1E9], 0
.text:0040453C                 mov     [ebp+var_20C], eax
.text:00404542                 mov     dword ptr [eax+70h], 0
.text:00404549                 mov     word ptr [eax+74h], 0
.text:0040454F                 mov     byte ptr [eax+76h], 0
.text:00404553                 jnz     loc_404630
.text:00404559                 cmp     ds:byte_42C2C0, 0
.text:00404560                 jnz     loc_404630
.text:00404566                 cmp     ds:byte_42C2D0, 0
.text:0040456D                 jz      short loc_404590
.text:0040456F                 test    ebx, ebx
.text:00404571                 jz      loc_404630
.text:00404577                 cmp     ebx, 0Ah
.text:0040457A                 jz      loc_404630
.text:00404580                 cmp     ebx, 8
.text:00404583                 jz      short loc_4045DD
.text:00404585                 lea     esi, [esi+0]
.text:00404589                 lea     edi, [edi+0]
.text:00404590
.text:00404590 loc_404590:                             ; CODE XREF: sub_404500+6D↑j
.text:00404590                                         ; sub_404500+ED↓j ...
.text:00404590                 mov     edi, [ebp+var_20C]
.text:00404596                 xor     esi, esi
.text:00404598                 xor     eax, eax
.text:0040459A                 mov     [ebp+var_1F8], esi
.text:004045A0                 mov     [ebp+var_1F4], eax
.text:004045A6                 mov     [edi+78h], ebx
.text:004045A9                 shl     ebx, 0Ch
.text:004045AC                 mov     [edi+8], ebx
.text:004045AF                 nop
.text:004045B0
.text:004045B0 loc_4045B0:                             ; CODE XREF: sub_404500+380↓j
.text:004045B0                                         ; sub_404500+38B↓j
.text:004045B0                 mov     edx, [ebp+arg_0]
.text:004045B3                 mov     [esp+238h+Str], edx ; char *
.text:004045B6                 call    sub_4125E0
.text:004045BB                 inc     ds:dword_42C050
.text:004045C1                 mov     ebx, [ebp+var_20C]
.text:004045C7                 mov     edx, [ebp+var_1F4]
.text:004045CD                 mov     [ebx], eax
.text:004045CF                 mov     eax, [ebp+var_1F8]
.text:004045D5
.text:004045D5 loc_4045D5:                             ; CODE XREF: sub_404500+631↓j
.text:004045D5                 lea     esp, [ebp-0Ch]
.text:004045D8                 pop     ebx
.text:004045D9                 pop     esi
.text:004045DA                 pop     edi
.text:004045DB                 pop     ebp
.text:004045DC                 retn
.text:004045DD ; ---------------------------------------------------------------------------
.text:004045DD
.text:004045DD loc_4045DD:                             ; CODE XREF: sub_404500+83↑j
.text:004045DD                 cmp     ds:dword_42C1B0, 1
.text:004045E4                 jz      short loc_404630
.text:004045E6                 cmp     ds:byte_42C1C0, 0
.text:004045ED                 jz      short loc_404590
.text:004045EF                 mov     [ebp+var_1FD], 0
.text:004045F6                 mov     eax, dword_42B098
.text:004045FB                 mov     edx, off_42B09C ; "01;32"
.text:00404601                 test    eax, eax
.text:00404603                 jz      short loc_40461E
.text:00404605                 cmp     eax, 1
.text:00404608                 jz      loc_404C33
.text:0040460E
.text:0040460E loc_40460E:                             ; CODE XREF: sub_404500+73C↓j
.text:0040460E                 cmp     eax, 2
.text:00404611                 jz      loc_404C17
.text:00404617
.text:00404617 loc_404617:                             ; CODE XREF: sub_404500+72E↓j
.text:00404617                 mov     [ebp+var_1FD], 1
.text:0040461E
.text:0040461E loc_40461E:                             ; CODE XREF: sub_404500+103↑j
.text:0040461E                                         ; sub_404500+728↓j ...
.text:0040461E                 cmp     [ebp+var_1FD], 0
.text:00404625                 jz      loc_404590
.text:0040462B                 nop
.text:0040462C                 lea     esi, [esi+0]
.text:00404630
.text:00404630 loc_404630:                             ; CODE XREF: sub_404500+53↑j
.text:00404630                                         ; sub_404500+60↑j ...
.text:00404630                 mov     ebx, [ebp+arg_0]
.text:00404633                 cmp     byte ptr [ebx], 2Fh ; '/'
.text:00404636                 jz      short loc_404644
.text:00404638                 mov     eax, [ebp+Size]
.text:0040463B                 cmp     byte ptr [eax], 0
.text:0040463E                 jnz     loc_404BD1
.text:00404644
.text:00404644 loc_404644:                             ; CODE XREF: sub_404500+136↑j
.text:00404644                 mov     esi, [ebp+arg_0]
.text:00404647                 mov     [ebp+var_1FC], esi
.text:0040464D
.text:0040464D loc_40464D:                             ; CODE XREF: sub_404500+712↓j
.text:0040464D                 mov     eax, ds:dword_42C200
.text:00404652                 mov     ecx, [ebp+var_20C]
.text:00404658                 cmp     eax, 3
.text:0040465B                 lea     esi, [ecx+8]
.text:0040465E                 jb      short loc_404680
.text:00404660                 cmp     eax, 4
.text:00404663                 jbe     loc_404B64
.text:00404669                 cmp     eax, 5
.text:0040466C                 jz      loc_404B4D
.text:00404672                 lea     esi, [esi+0]
.text:00404679                 lea     edi, [edi+0]
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: sub_404500+15E↑j
.text:00404680                                         ; sub_404500+674↓j ...
.text:00404680                 mov     [esp+238h+ErrorMessage], esi
.text:00404684                 mov     esi, [ebp+var_1FC]
.text:0040468A                 mov     [esp+238h+Str], esi
.text:0040468D                 call    sub_4182D0
.text:00404692
.text:00404692 loc_404692:                             ; CODE XREF: sub_404500+65F↓j
.text:00404692                 mov     ebx, eax
.text:00404694
.text:00404694 loc_404694:                             ; CODE XREF: sub_404500+695↓j
.text:00404694                                         ; sub_404500+6B9↓j
.text:00404694                 test    ebx, ebx
.text:00404696                 js      loc_404AE6
.text:0040469C                 mov     eax, [ebp+var_20C]
.text:004046A2                 mov     edx, [eax+8]
.text:004046A5                 mov     edi, edx
.text:004046A7                 and     edi, 0F000h
.text:004046AD                 cmp     edi, 0A000h
.text:004046B3                 jz      loc_4049E4
.text:004046B9
.text:004046B9 loc_4046B9:                             ; CODE XREF: sub_404500+4F5↓j
.text:004046B9                                         ; sub_404500+5C5↓j ...
.text:004046B9                 mov     eax, edx
.text:004046BB                 and     eax, 0F000h
.text:004046C0                 cmp     eax, 0A000h
.text:004046C5                 jz      loc_4049D2
.text:004046CB                 cmp     eax, 4000h
.text:004046D0                 jz      loc_404997
.text:004046D6                 mov     ebx, [ebp+var_20C]
.text:004046DC                 mov     dword ptr [ebx+78h], 8
.text:004046E3
.text:004046E3 loc_4046E3:                             ; CODE XREF: sub_404500+4B6↓j
.text:004046E3                                         ; sub_404500+4CD↓j ...
.text:004046E3                 mov     eax, [ebp+var_20C]
.text:004046E9                 lea     ecx, [ebp+var_A8]
.text:004046EF                 mov     [esp+238h+Buffer], ecx
.text:004046F3                 mov     esi, [eax+10h]
.text:004046F6                 mov     edi, [eax+14h]
.text:004046F9                 mov     [esp+238h+Str], esi
.text:004046FC                 mov     [esp+238h+ErrorMessage], edi
.text:00404700                 call    sub_412370
.text:00404705                 mov     [esp+238h+Str], eax ; Str
.text:00404708                 call    strlen
.text:0040470D                 cmp     ds:dword_42C080, eax
.text:00404713                 jge     short loc_40471A
.text:00404715                 mov     ds:dword_42C080, eax
.text:0040471A
.text:0040471A loc_40471A:                             ; CODE XREF: sub_404500+213↑j
.text:0040471A                 mov     eax, [ebp+var_20C]
.text:00404720                 mov     ebx, ds:dword_42C190
.text:00404726                 mov     ecx, ds:dword_42C194
.text:0040472C                 mov     esi, [eax+60h]
.text:0040472F                 mov     edi, [eax+64h]
.text:00404732                 mov     [esp+238h+var_220], ebx ; int
.text:00404736                 mov     [ebp+var_1F8], esi
.text:0040473C                 mov     edx, [ebp+var_1F8]
.text:00404742                 mov     [ebp+var_1F4], edi
.text:00404748                 mov     esi, ds:dword_42C180
.text:0040474E                 lea     edi, [ebp+var_128]
.text:00404754                 mov     [esp+238h+var_21C], ecx ; int
.text:00404758                 mov     ebx, [ebp+var_1F4]
.text:0040475E                 mov     [esp+238h+Str], edx ; int
.text:00404761                 mov     [esp+238h+var_228], 200h ; int
.text:00404769                 mov     [esp+238h+var_224], 0 ; int
.text:00404771                 mov     dword ptr [esp+238h+var_22C], esi ; int
.text:00404775                 mov     [esp+238h+Buffer], edi ; Buffer
.text:00404779                 mov     [esp+238h+ErrorMessage], ebx ; int
.text:0040477D                 call    sub_4126F0
.text:00404782                 mov     [esp+238h+Str], eax ; char *
.text:00404785                 mov     [esp+238h+ErrorMessage], 0 ; char
.text:0040478D                 call    sub_40CAD0
.text:00404792                 cmp     ds:dword_42C090, eax
.text:00404798                 jge     short loc_40479F
.text:0040479A                 mov     ds:dword_42C090, eax
.text:0040479F
.text:0040479F loc_40479F:                             ; CODE XREF: sub_404500+298↑j
.text:0040479F                 cmp     byte_42B018, 0
.text:004047A6                 jnz     loc_404970
.text:004047AC
.text:004047AC loc_4047AC:                             ; CODE XREF: sub_404500+487↓j
.text:004047AC                                         ; sub_404500+492↓j
.text:004047AC                 cmp     byte_42B019, 0
.text:004047B3                 jnz     loc_404947
.text:004047B9
.text:004047B9 loc_4047B9:                             ; CODE XREF: sub_404500+45E↓j
.text:004047B9                                         ; sub_404500+469↓j
.text:004047B9                 cmp     ds:byte_42C150, 0
.text:004047C0                 jnz     loc_404920
.text:004047C6
.text:004047C6 loc_4047C6:                             ; CODE XREF: sub_404500+437↓j
.text:004047C6                                         ; sub_404500+442↓j
.text:004047C6                 mov     ebx, [ebp+var_20C]
.text:004047CC                 lea     edx, [ebp+var_148]
.text:004047D2                 mov     [esp+238h+Buffer], edx
.text:004047D6                 mov     ecx, [ebx+20h]
.text:004047D9                 mov     [esp+238h+ErrorMessage], 0
.text:004047E1                 mov     [esp+238h+Str], ecx
.text:004047E4                 call    sub_412370
.text:004047E9                 mov     [esp+238h+Str], eax ; Str
.text:004047EC                 call    strlen
.text:004047F1                 cmp     ds:dword_42C0A0, eax
.text:004047F7                 jge     short loc_4047FE
.text:004047F9                 mov     ds:dword_42C0A0, eax
.text:004047FE
.text:004047FE loc_4047FE:                             ; CODE XREF: sub_404500+2F7↑j
.text:004047FE                 mov     edi, [ebp+var_20C]
.text:00404804                 mov     eax, [edi+8]
.text:00404807                 and     eax, 0F000h
.text:0040480C                 cmp     eax, 2000h
.text:00404811                 jz      short loc_404890
.text:00404813                 cmp     eax, 6000h
.text:00404818                 jz      short loc_404890
.text:0040481A                 mov     ecx, [ebp+var_20C]
.text:00404820                 mov     edx, dword_42B020
.text:00404826                 mov     edi, dword_42B024
.text:0040482C                 mov     ebx, [ecx+38h]
.text:0040482F                 mov     esi, [ecx+3Ch]
.text:00404832                 mov     ecx, ds:dword_42C180
.text:00404838                 mov     [esp+238h+var_220], edx ; int
.text:0040483C                 lea     edx, [ebp+var_1E8]
.text:00404842                 mov     [esp+238h+var_21C], edi ; int
.text:00404846                 mov     [esp+238h+var_228], 1 ; int
.text:0040484E                 mov     [esp+238h+var_224], 0 ; int
.text:00404856                 mov     dword ptr [esp+238h+var_22C], ecx ; int
.text:0040485A                 mov     [esp+238h+Buffer], edx ; Buffer
.text:0040485E                 mov     [esp+238h+Str], ebx ; int
.text:00404861                 mov     [esp+238h+ErrorMessage], esi ; int
.text:00404865                 call    sub_4126F0
.text:0040486A                 mov     [esp+238h+Str], eax ; char *
.text:0040486D                 mov     [esp+238h+ErrorMessage], 0 ; char
.text:00404875                 call    sub_40CAD0
.text:0040487A
.text:0040487A loc_40487A:                             ; CODE XREF: sub_404500+414↓j
.text:0040487A                 cmp     ds:dword_42C100, eax
.text:00404880                 jge     loc_4045B0
.text:00404886                 mov     ds:dword_42C100, eax
.text:0040488B                 jmp     loc_4045B0
.text:00404890 ; ---------------------------------------------------------------------------
.text:00404890
.text:00404890 loc_404890:                             ; CODE XREF: sub_404500+311↑j
.text:00404890                                         ; sub_404500+318↑j
.text:00404890                 mov     eax, [ebp+var_20C]
.text:00404896                 lea     ebx, [ebp+var_168]
.text:0040489C                 xor     esi, esi
.text:0040489E                 mov     [esp+238h+Buffer], ebx
.text:004048A2                 mov     edx, [eax+30h]
.text:004048A5                 mov     [esp+238h+ErrorMessage], esi
.text:004048A9                 shr     edx, 8
.text:004048AC                 and     edx, 0FFh
.text:004048B2                 mov     [esp+238h+Str], edx
.text:004048B5                 call    sub_412370
.text:004048BA                 mov     [esp+238h+Str], eax ; Str
.text:004048BD                 call    strlen
.text:004048C2                 cmp     ds:dword_42C0E0, eax
.text:004048C8                 jge     short loc_4048CF
.text:004048CA                 mov     ds:dword_42C0E0, eax
.text:004048CF
.text:004048CF loc_4048CF:                             ; CODE XREF: sub_404500+3C8↑j
.text:004048CF                 mov     [esp+238h+Buffer], ebx
.text:004048D3                 mov     esi, [ebp+var_20C]
.text:004048D9                 xor     ecx, ecx
.text:004048DB                 mov     ebx, [esi+30h]
.text:004048DE                 mov     [esp+238h+ErrorMessage], ecx
.text:004048E2                 and     ebx, 0FFh
.text:004048E8                 mov     [esp+238h+Str], ebx
.text:004048EB                 call    sub_412370
.text:004048F0                 mov     [esp+238h+Str], eax ; Str
.text:004048F3                 call    strlen
.text:004048F8                 mov     edx, ds:dword_42C0F0
.text:004048FE                 cmp     edx, eax
.text:00404900                 jge     short loc_404909
.text:00404902                 mov     ds:dword_42C0F0, eax
.text:00404907                 mov     edx, eax
.text:00404909
.text:00404909 loc_404909:                             ; CODE XREF: sub_404500+400↑j
.text:00404909                 mov     edi, ds:dword_42C0E0
.text:0040490F                 add     edx, edi
.text:00404911                 lea     eax, [edx+2]
.text:00404914                 jmp     loc_40487A
.text:00404914 ; ---------------------------------------------------------------------------
.text:00404919                 align 10h
.text:00404920
.text:00404920 loc_404920:                             ; CODE XREF: sub_404500+2C0↑j
.text:00404920                 mov     eax, [ebp+var_20C]
.text:00404926                 mov     esi, [eax+24h]
.text:00404929                 mov     [esp+238h+Str], esi
.text:0040492C                 call    sub_405330
.text:00404931                 cmp     ds:dword_42C0D0, eax
.text:00404937                 jge     loc_4047C6
.text:0040493D                 mov     ds:dword_42C0D0, eax
.text:00404942                 jmp     loc_4047C6
.text:00404947 ; ---------------------------------------------------------------------------
.text:00404947
.text:00404947 loc_404947:                             ; CODE XREF: sub_404500+2B3↑j
.text:00404947                 mov     edi, [ebp+var_20C]
.text:0040494D                 mov     edx, [edi+28h]
.text:00404950                 mov     [esp+238h+Str], edx
.text:00404953                 call    sub_4053D0
.text:00404958                 cmp     ds:dword_42C0C0, eax
.text:0040495E                 jge     loc_4047B9
.text:00404964                 mov     ds:dword_42C0C0, eax
.text:00404969                 jmp     loc_4047B9
.text:00404969 ; ---------------------------------------------------------------------------
.text:0040496E                 align 10h
.text:00404970
.text:00404970 loc_404970:                             ; CODE XREF: sub_404500+2A6↑j
.text:00404970                 mov     ebx, [ebp+var_20C]
.text:00404976                 mov     ecx, [ebx+24h]
.text:00404979                 mov     [esp+238h+Str], ecx
.text:0040497C                 call    sub_405330
.text:00404981                 cmp     ds:dword_42C0B0, eax
.text:00404987                 jge     loc_4047AC
.text:0040498D                 mov     ds:dword_42C0B0, eax
.text:00404992                 jmp     loc_4047AC
.text:00404997 ; ---------------------------------------------------------------------------
.text:00404997
.text:00404997 loc_404997:                             ; CODE XREF: sub_404500+1D0↑j
.text:00404997                 cmp     ds:byte_42C220, 0
.text:0040499E                 jnz     short loc_4049C0
.text:004049A0                 cmp     [ebp+var_1E9], 0
.text:004049A7                 jz      short loc_4049C0
.text:004049A9                 mov     esi, [ebp+var_20C]
.text:004049AF                 mov     dword ptr [esi+78h], 1Eh
.text:004049B6                 jmp     loc_4046E3
.text:004049B6 ; ---------------------------------------------------------------------------
.text:004049BB                 align 10h
.text:004049C0
.text:004049C0 loc_4049C0:                             ; CODE XREF: sub_404500+49E↑j
.text:004049C0                                         ; sub_404500+4A7↑j
.text:004049C0                 mov     edx, [ebp+var_20C]
.text:004049C6                 mov     dword ptr [edx+78h], 4
.text:004049CD                 jmp     loc_4046E3
.text:004049D2 ; ---------------------------------------------------------------------------
.text:004049D2
.text:004049D2 loc_4049D2:                             ; CODE XREF: sub_404500+1C5↑j
.text:004049D2                 mov     edi, [ebp+var_20C]
.text:004049D8                 mov     dword ptr [edi+78h], 0Ah
.text:004049DF                 jmp     loc_4046E3
.text:004049E4 ; ---------------------------------------------------------------------------
.text:004049E4
.text:004049E4 loc_4049E4:                             ; CODE XREF: sub_404500+1B3↑j
.text:004049E4                 mov     ecx, ds:dword_42C110
.text:004049EA                 test    ecx, ecx
.text:004049EC                 jz      short loc_4049FB
.text:004049EE                 cmp     ds:byte_42C1E0, 0
.text:004049F5                 jz      loc_4046B9
.text:004049FB
.text:004049FB loc_4049FB:                             ; CODE XREF: sub_404500+4EC↑j
.text:004049FB                 movzx   ecx, [ebp+var_1E9]
.text:00404A02                 mov     ebx, [ebp+var_20C]
.text:00404A08                 mov     edi, [ebp+var_1FC]
.text:00404A0E                 mov     [esp+238h+Buffer], ecx ; char
.text:00404A12                 mov     [esp+238h+ErrorMessage], ebx ; int
.text:00404A16                 mov     [esp+238h+Str], edi ; char *
.text:00404A19                 call    sub_404C90
.text:00404A1E                 mov     edx, [ebx+70h]
.text:00404A21                 mov     esi, [ebp+var_1FC]
.text:00404A27                 mov     [esp+238h+ErrorMessage], edx ; char *
.text:00404A2B                 mov     [esp+238h+Str], esi ; char *
.text:00404A2E                 call    sub_404D40
.text:00404A33                 test    eax, eax
.text:00404A35                 mov     ebx, eax
.text:00404A37                 jz      loc_404AD8
.text:00404A3D                 mov     eax, ds:dword_42C1B0
.text:00404A42                 test    eax, eax
.text:00404A44                 jnz     short loc_404A4F
.text:00404A46                 cmp     ds:byte_42C1E0, 0
.text:00404A4D                 jz      short loc_404AB0
.text:00404A4F
.text:00404A4F loc_404A4F:                             ; CODE XREF: sub_404500+544↑j
.text:00404A4F                 mov     [esp+238h+Str], ebx ; char *
.text:00404A52                 lea     esi, [ebp+var_88]
.text:00404A58                 mov     [esp+238h+ErrorMessage], esi ; int
.text:00404A5C                 call    sub_419460
.text:00404A61                 test    eax, eax
.text:00404A63                 jnz     short loc_404AB0
.text:00404A65                 cmp     [ebp+var_1E9], 0
.text:00404A6C                 mov     edx, [ebp+var_20C]
.text:00404A72                 mov     byte ptr [edx+76h], 1
.text:00404A76                 jz      short loc_404A96
.text:00404A78                 mov     edi, ds:dword_42C110
.text:00404A7E                 test    edi, edi
.text:00404A80                 jz      short loc_404A96
.text:00404A82                 mov     ecx, [ebp+var_88]
.text:00404A88                 and     ecx, 0F000h
.text:00404A8E                 cmp     ecx, 4000h
.text:00404A94                 jz      short loc_404AB0
.text:00404A96
.text:00404A96 loc_404A96:                             ; CODE XREF: sub_404500+576↑j
.text:00404A96                                         ; sub_404500+580↑j
.text:00404A96                 mov     esi, [ebp+var_20C]
.text:00404A9C                 mov     edx, [ebp+var_88]
.text:00404AA2                 mov     byte ptr [esi+76h], 1
.text:00404AA6                 mov     [esi+74h], dx
.text:00404AAA                 lea     esi, [esi+0]
.text:00404AB0
.text:00404AB0 loc_404AB0:                             ; CODE XREF: sub_404500+54D↑j
.text:00404AB0                                         ; sub_404500+563↑j ...
.text:00404AB0                 test    ebx, ebx
.text:00404AB2                 jz      short loc_404ACA
.text:00404AB4                 mov     [esp+238h+Str], ebx ; Block
.text:00404AB7                 call    free
.text:00404ABC                 mov     ebx, [ebp+var_20C]
.text:00404AC2                 mov     edx, [ebx+8]
.text:00404AC5                 jmp     loc_4046B9
.text:00404ACA ; ---------------------------------------------------------------------------
.text:00404ACA
.text:00404ACA loc_404ACA:                             ; CODE XREF: sub_404500+5B2↑j
.text:00404ACA                 mov     ecx, [ebp+var_20C]
.text:00404AD0                 mov     edx, [ecx+8]
.text:00404AD3                 jmp     loc_4046B9
.text:00404AD8 ; ---------------------------------------------------------------------------
.text:00404AD8
.text:00404AD8 loc_404AD8:                             ; CODE XREF: sub_404500+537↑j
.text:00404AD8                 mov     eax, [ebp+var_20C]
.text:00404ADE                 mov     edx, [eax+8]
.text:00404AE1                 jmp     loc_4046B9
.text:00404AE6 ; ---------------------------------------------------------------------------
.text:00404AE6
.text:00404AE6 loc_404AE6:                             ; CODE XREF: sub_404500+196↑j
.text:00404AE6                 mov     ecx, [ebp+var_1FC]
.text:00404AEC                 mov     [esp+238h+Str], ecx ; char *
.text:00404AEF                 call    sub_40DC30
.text:00404AF4                 mov     edi, eax
.text:00404AF6                 call    _errno
.text:00404AFB                 mov     dword ptr [esp+238h+var_22C], edi ; char
.text:00404AFF                 mov     [esp+238h+Buffer], offset aS ; "%s"
.text:00404B07                 mov     ebx, [eax]
.text:00404B09                 mov     [esp+238h+Str], 0 ; Code
.text:00404B10                 mov     [esp+238h+ErrorMessage], ebx ; ErrorMessage
.text:00404B14                 call    sub_4161E0
.text:00404B19                 cmp     [ebp+var_1E9], 0
.text:00404B20                 jz      short loc_404B36
.text:00404B22                 mov     edx, 2
.text:00404B27                 mov     ds:Code, edx
.text:00404B2D
.text:00404B2D loc_404B2D:                             ; CODE XREF: sub_404500+63E↓j
.text:00404B2D                                         ; sub_404500+64B↓j
.text:00404B2D                 xor     eax, eax
.text:00404B2F                 xor     edx, edx
.text:00404B31                 jmp     loc_4045D5
.text:00404B36 ; ---------------------------------------------------------------------------
.text:00404B36
.text:00404B36 loc_404B36:                             ; CODE XREF: sub_404500+620↑j
.text:00404B36                 mov     esi, ds:Code
.text:00404B3C                 test    esi, esi
.text:00404B3E                 jnz     short loc_404B2D
.text:00404B40                 mov     ebx, 1
.text:00404B45                 mov     ds:Code, ebx
.text:00404B4B                 jmp     short loc_404B2D
.text:00404B4D ; ---------------------------------------------------------------------------
.text:00404B4D
.text:00404B4D loc_404B4D:                             ; CODE XREF: sub_404500+16C↑j
.text:00404B4D                 mov     [esp+238h+ErrorMessage], esi ; int
.text:00404B51                 mov     ebx, [ebp+var_1FC]
.text:00404B57                 mov     [esp+238h+Str], ebx ; char *
.text:00404B5A                 call    sub_419460
.text:00404B5F                 jmp     loc_404692
.text:00404B64 ; ---------------------------------------------------------------------------
.text:00404B64
.text:00404B64 loc_404B64:                             ; CODE XREF: sub_404500+163↑j
.text:00404B64                 cmp     [ebp+var_1E9], 0
.text:00404B6B                 mov     eax, [ebp+var_20C]
.text:00404B71                 lea     esi, [eax+8]
.text:00404B74                 jz      loc_404680
.text:00404B7A                 mov     [esp+238h+ErrorMessage], esi ; int
.text:00404B7E                 mov     edx, [ebp+var_1FC]
.text:00404B84                 mov     [esp+238h+Str], edx ; char *
.text:00404B87                 call    sub_419460
.text:00404B8C                 cmp     ds:dword_42C200, 3
.text:00404B93                 mov     ebx, eax
.text:00404B95                 jz      loc_404694
.text:00404B9B                 test    eax, eax
.text:00404B9D                 js      short loc_404BC4
.text:00404B9F                 mov     eax, [ebp+var_20C]
.text:00404BA5                 mov     ecx, [eax+8]
.text:00404BA8                 and     ecx, 0F000h
.text:00404BAE                 cmp     ecx, 4000h
.text:00404BB4                 setnz   al
.text:00404BB7
.text:00404BB7 loc_404BB7:                             ; CODE XREF: sub_404500+6CF↓j
.text:00404BB7                 test    al, al
.text:00404BB9                 jz      loc_404694
.text:00404BBF                 jmp     loc_404680
.text:00404BC4 ; ---------------------------------------------------------------------------
.text:00404BC4
.text:00404BC4 loc_404BC4:                             ; CODE XREF: sub_404500+69D↑j
.text:00404BC4                 call    _errno
.text:00404BC9                 cmp     dword ptr [eax], 2
.text:00404BCC                 setz    al
.text:00404BCF                 jmp     short loc_404BB7
.text:00404BD1 ; ---------------------------------------------------------------------------
.text:00404BD1
.text:00404BD1 loc_404BD1:                             ; CODE XREF: sub_404500+13E↑j
.text:00404BD1                 mov     esi, [ebp+arg_0]
.text:00404BD4                 mov     [esp+238h+Str], esi ; Str
.text:00404BD7                 call    strlen
.text:00404BDC                 mov     edx, [ebp+Size]
.text:00404BDF                 mov     edi, eax
.text:00404BE1                 mov     [esp+238h+Str], edx ; Size
.text:00404BE4                 call    strlen
.text:00404BE9                 lea     eax, [eax+edi+11h]
.text:00404BED                 and     eax, 0FFFFFFF0h
.text:00404BF0                 mov     edi, [ebp+Size]
.text:00404BF3                 call    __alloca
.text:00404BF8                 mov     [esp+238h+Buffer], esi
.text:00404BFC                 lea     ebx, [esp+238h+var_218]
.text:00404C00                 mov     [ebp+var_1FC], ebx
.text:00404C06                 mov     [esp+238h+ErrorMessage], edi
.text:00404C0A                 mov     [esp+238h+Str], ebx
.text:00404C0D                 call    sub_4071D0
.text:00404C12                 jmp     loc_40464D
.text:00404C17 ; ---------------------------------------------------------------------------
.text:00404C17
.text:00404C17 loc_404C17:                             ; CODE XREF: sub_404500+111↑j
.text:00404C17                 cld
.text:00404C18                 mov     eax, offset a00 ; "00"
.text:00404C1D                 mov     ecx, 2
.text:00404C22                 mov     esi, edx
.text:00404C24                 mov     edi, eax
.text:00404C26                 repe cmpsb
.text:00404C28                 jz      loc_40461E
.text:00404C2E                 jmp     loc_404617
.text:00404C33 ; ---------------------------------------------------------------------------
.text:00404C33
.text:00404C33 loc_404C33:                             ; CODE XREF: sub_404500+108↑j
.text:00404C33                 cmp     byte ptr [edx], 30h ; '0'
.text:00404C36                 jz      loc_40461E
.text:00404C3C                 jmp     loc_40460E
.text:00404C41 ; ---------------------------------------------------------------------------
.text:00404C41
.text:00404C41 loc_404C41:                             ; CODE XREF: sub_404500+24↑j
.text:00404C41                 mov     [esp+238h+Buffer], 100h ; int
.text:00404C49                 mov     edx, ds:dword_42C030
.text:00404C4F                 mov     [esp+238h+ErrorMessage], eax ; int
.text:00404C53                 mov     [esp+238h+Str], edx ; void *
.text:00404C56                 call    sub_412450
.text:00404C5B                 mov     ds:dword_42C030, eax
.text:00404C60                 mov     eax, ds:dword_42C050
.text:00404C65                 shl     ds:dword_42C040, 1
.text:00404C6B                 jmp     loc_40452A
.text:00404C6B sub_404500      endp
.text:00404C6B
.text:00404C6B ; ---------------------------------------------------------------------------
.text:00404C70 aCannotReadSymb db 'cannot read symbolic link %s',0
.text:00404C70                                         ; DATA XREF: sub_404C90:loc_404CD6↓o
.text:00404C8D                 align 10h
.text:00404C90
.text:00404C90 ; =============== S U B R O U T I N E =======================================
.text:00404C90
.text:00404C90
.text:00404C90 ; int __cdecl sub_404C90(char *, int, char)
.text:00404C90 sub_404C90      proc near               ; CODE XREF: sub_404500+519↑p
.text:00404C90
.text:00404C90 Code            = dword ptr -2Ch
.text:00404C90 ErrorMessage    = dword ptr -28h
.text:00404C90 var_24          = dword ptr -24h
.text:00404C90 var_20          = byte ptr -20h
.text:00404C90 var_D           = byte ptr -0Dh
.text:00404C90 var_C           = dword ptr -0Ch
.text:00404C90 var_8           = dword ptr -8
.text:00404C90 var_4           = dword ptr -4
.text:00404C90 arg_0           = dword ptr  4
.text:00404C90 arg_4           = dword ptr  8
.text:00404C90 arg_8           = byte ptr  0Ch
.text:00404C90
.text:00404C90                 sub     esp, 2Ch
.text:00404C93                 mov     [esp+2Ch+var_8], esi
.text:00404C97                 mov     esi, [esp+2Ch+arg_4]
.text:00404C9B                 mov     [esp+2Ch+var_4], edi
.text:00404C9F                 mov     edi, [esp+2Ch+arg_0]
.text:00404CA3                 mov     [esp+2Ch+var_C], ebx
.text:00404CA7                 mov     edx, [esi+38h]
.text:00404CAA                 movzx   ecx, [esp+2Ch+arg_8]
.text:00404CAF                 mov     [esp+2Ch+Code], edi ; char *
.text:00404CB2                 mov     [esp+2Ch+ErrorMessage], edx ; int
.text:00404CB6                 mov     [esp+2Ch+var_D], cl
.text:00404CBA                 call    sub_4122D0
.text:00404CBF                 mov     [esi+70h], eax
.text:00404CC2                 test    eax, eax
.text:00404CC4                 jz      short loc_404CD6
.text:00404CC6
.text:00404CC6 loc_404CC6:                             ; CODE XREF: sub_404C90+8F↓j
.text:00404CC6                                         ; sub_404C90+99↓j ...
.text:00404CC6                 mov     ebx, [esp+2Ch+var_C]
.text:00404CCA                 mov     esi, [esp+2Ch+var_8]
.text:00404CCE                 mov     edi, [esp+2Ch+var_4]
.text:00404CD2                 add     esp, 2Ch
.text:00404CD5                 retn
.text:00404CD6 ; ---------------------------------------------------------------------------
.text:00404CD6
.text:00404CD6 loc_404CD6:                             ; CODE XREF: sub_404C90+34↑j
.text:00404CD6                 mov     [esp+2Ch+Code], offset aCannotReadSymb ; "cannot read symbolic link %s"
.text:00404CDD                 call    ds:libintl_gettext
.text:00404CE3                 mov     [esp+2Ch+Code], edi ; char *
.text:00404CE6                 mov     esi, eax
.text:00404CE8                 call    sub_40DC30
.text:00404CED                 mov     edi, eax
.text:00404CEF                 call    _errno
.text:00404CF4                 mov     dword ptr [esp+2Ch+var_20], edi ; char
.text:00404CF8                 mov     [esp+2Ch+var_24], esi ; char *
.text:00404CFC                 mov     ebx, [eax]
.text:00404CFE                 mov     [esp+2Ch+Code], 0 ; Code
.text:00404D05                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00404D09                 call    sub_4161E0
.text:00404D0E                 cmp     [esp+2Ch+var_D], 0
.text:00404D13                 jz      short loc_404D21
.text:00404D15                 mov     eax, 2
.text:00404D1A                 mov     ds:Code, eax
.text:00404D1F                 jmp     short loc_404CC6
.text:00404D21 ; ---------------------------------------------------------------------------
.text:00404D21
.text:00404D21 loc_404D21:                             ; CODE XREF: sub_404C90+83↑j
.text:00404D21                 mov     esi, ds:Code
.text:00404D27                 test    esi, esi
.text:00404D29                 jnz     short loc_404CC6
.text:00404D2B                 mov     edx, 1
.text:00404D30                 mov     ds:Code, edx
.text:00404D36                 jmp     short loc_404CC6
.text:00404D36 sub_404C90      endp
.text:00404D36
.text:00404D36 ; ---------------------------------------------------------------------------
.text:00404D38                 align 10h
.text:00404D40
.text:00404D40 ; =============== S U B R O U T I N E =======================================
.text:00404D40
.text:00404D40
.text:00404D40 ; int __cdecl sub_404D40(char *, char *)
.text:00404D40 sub_404D40      proc near               ; CODE XREF: sub_404500+52E↑p
.text:00404D40
.text:00404D40 Str             = dword ptr -1Ch
.text:00404D40 Source          = dword ptr -18h
.text:00404D40 Count           = dword ptr -14h
.text:00404D40 var_10          = dword ptr -10h
.text:00404D40 var_C           = dword ptr -0Ch
.text:00404D40 var_8           = dword ptr -8
.text:00404D40 var_4           = dword ptr -4
.text:00404D40 arg_0           = dword ptr  4
.text:00404D40 arg_4           = dword ptr  8
.text:00404D40
.text:00404D40                 sub     esp, 1Ch
.text:00404D43                 xor     eax, eax
.text:00404D45                 mov     [esp+1Ch+var_8], edi
.text:00404D49                 mov     edi, [esp+1Ch+arg_4]
.text:00404D4D                 mov     [esp+1Ch+var_4], ebp
.text:00404D51                 mov     ebp, [esp+1Ch+arg_0]
.text:00404D55                 test    edi, edi
.text:00404D57                 mov     [esp+1Ch+var_10], ebx
.text:00404D5B                 mov     [esp+1Ch+var_C], esi
.text:00404D5F                 jz      short loc_404DB8
.text:00404D61                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00404D64                 jz      short loc_404DD0
.text:00404D66                 mov     [esp+1Ch+Source], 2Fh ; '/' ; Ch
.text:00404D6E                 mov     [esp+1Ch+Str], ebp ; Str
.text:00404D71                 call    strrchr
.text:00404D76                 test    eax, eax
.text:00404D78                 mov     esi, eax
.text:00404D7A                 jz      short loc_404DD0
.text:00404D7C                 mov     [esp+1Ch+Str], edi ; Str
.text:00404D7F                 sub     esi, ebp
.text:00404D81                 lea     ebx, [esi+1]
.text:00404D84                 call    strlen
.text:00404D89                 lea     edx, [eax+ebx+1]
.text:00404D8D                 mov     [esp+1Ch+Str], edx ; size_t
.text:00404D90                 call    sub_412420
.text:00404D95                 mov     [esp+1Ch+Str], eax ; Destination
.text:00404D98                 mov     esi, eax
.text:00404D9A                 mov     [esp+1Ch+Count], ebx ; Count
.text:00404D9E                 mov     [esp+1Ch+Source], ebp ; Source
.text:00404DA2                 call    strncpy
.text:00404DA7                 mov     [esp+1Ch+Source], edi ; Source
.text:00404DAB                 lea     eax, [ebx+esi]
.text:00404DAE                 mov     [esp+1Ch+Str], eax ; Destination
.text:00404DB1                 call    strcpy
.text:00404DB6                 mov     eax, esi
.text:00404DB8
.text:00404DB8 loc_404DB8:                             ; CODE XREF: sub_404D40+1F↑j
.text:00404DB8                 mov     ebx, [esp+1Ch+var_10]
.text:00404DBC                 mov     esi, [esp+1Ch+var_C]
.text:00404DC0                 mov     edi, [esp+1Ch+var_8]
.text:00404DC4                 mov     ebp, [esp+1Ch+var_4]
.text:00404DC8                 add     esp, 1Ch
.text:00404DCB                 retn
.text:00404DCB ; ---------------------------------------------------------------------------
.text:00404DCC                 align 10h
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404D40+24↑j
.text:00404DD0                                         ; sub_404D40+3A↑j
.text:00404DD0                 mov     [esp+1Ch+arg_0], edi ; char *
.text:00404DD4                 mov     ebx, [esp+1Ch+var_10]
.text:00404DD8                 mov     esi, [esp+1Ch+var_C]
.text:00404DDC                 mov     edi, [esp+1Ch+var_8]
.text:00404DE0                 mov     ebp, [esp+1Ch+var_4]
.text:00404DE4                 add     esp, 1Ch
.text:00404DE7                 jmp     sub_4125E0
.text:00404DE7 sub_404D40      endp
.text:00404DE7
.text:00404DE7 ; ---------------------------------------------------------------------------
.text:00404DEC                 align 10h
.text:00404DF0
.text:00404DF0 ; =============== S U B R O U T I N E =======================================
.text:00404DF0
.text:00404DF0
.text:00404DF0 ; int __cdecl sub_404DF0(char *, char)
.text:00404DF0 sub_404DF0      proc near               ; CODE XREF: sub_401B10+542↑p
.text:00404DF0                                         ; sub_403C30+5EB↑p
.text:00404DF0
.text:00404DF0 Block           = dword ptr -2Ch
.text:00404DF0 var_28          = dword ptr -28h
.text:00404DF0 var_24          = byte ptr -24h
.text:00404DF0 var_12          = byte ptr -12h
.text:00404DF0 var_11          = byte ptr -11h
.text:00404DF0 arg_0           = dword ptr  4
.text:00404DF0 arg_4           = byte ptr  8
.text:00404DF0
.text:00404DF0                 push    ebp
.text:00404DF1                 push    edi
.text:00404DF2                 push    esi
.text:00404DF3                 push    ebx
.text:00404DF4                 sub     esp, 1Ch
.text:00404DF7                 mov     edi, [esp+2Ch+arg_0]
.text:00404DFB                 movzx   edx, [esp+2Ch+arg_4]
.text:00404E00                 test    edi, edi
.text:00404E02                 setnz   [esp+2Ch+var_12]
.text:00404E07                 mov     [esp+2Ch+var_11], dl
.text:00404E0B                 jz      short loc_404E1A
.text:00404E0D                 mov     eax, ds:dword_42C020
.text:00404E12                 test    eax, eax
.text:00404E14                 jnz     loc_404F82
.text:00404E1A
.text:00404E1A loc_404E1A:                             ; CODE XREF: sub_404DF0+1B↑j
.text:00404E1A                                         ; sub_404DF0+1AA↓j
.text:00404E1A                 mov     ecx, ds:dword_42C050
.text:00404E20                 lea     ebp, [ecx-1]
.text:00404E23                 cmp     ebp, 0FFFFFFFFh
.text:00404E26                 jz      short loc_404E53
.text:00404E28                 mov     esi, ebp
.text:00404E2A                 shl     esi, 7
.text:00404E2D                 lea     esi, [esi+0]
.text:00404E30
.text:00404E30 loc_404E30:                             ; CODE XREF: sub_404DF0+5B↓j
.text:00404E30                 mov     edx, ds:dword_42C030
.text:00404E36                 mov     eax, [edx+esi+78h]
.text:00404E3A                 cmp     eax, 4
.text:00404E3D                 jz      short loc_404EB0
.text:00404E3F                 cmp     eax, 1Eh
.text:00404E42                 jz      short loc_404EB0
.text:00404E44
.text:00404E44 loc_404E44:                             ; CODE XREF: sub_404DF0+122↓j
.text:00404E44                                         ; sub_404DF0+133↓j ...
.text:00404E44                 dec     ebp
.text:00404E45                 add     esi, 0FFFFFF80h
.text:00404E48                 cmp     ebp, 0FFFFFFFFh
.text:00404E4B                 jnz     short loc_404E30
.text:00404E4D                 mov     ecx, ds:dword_42C050
.text:00404E53
.text:00404E53 loc_404E53:                             ; CODE XREF: sub_404DF0+36↑j
.text:00404E53                 xor     ebx, ebx
.text:00404E55                 xor     ebp, ebp
.text:00404E57                 cmp     ebx, ecx
.text:00404E59                 jnb     short loc_404E9D
.text:00404E5B                 cld
.text:00404E5C                 mov     edx, ds:dword_42C030
.text:00404E62                 lea     esi, [esi+0]
.text:00404E69                 lea     edi, [edi+0]
.text:00404E70
.text:00404E70 loc_404E70:                             ; CODE XREF: sub_404DF0+AB↓j
.text:00404E70                 mov     eax, ebp
.text:00404E72                 shl     eax, 7
.text:00404E75                 cmp     dword ptr [edx+eax+78h], 1Eh
.text:00404E7A                 jz      short loc_404E98
.text:00404E7C                 cmp     ebx, ebp
.text:00404E7E                 jnb     short loc_404E97
.text:00404E80                 mov     edi, ebx
.text:00404E82                 lea     esi, [edx+eax]
.text:00404E85                 shl     edi, 7
.text:00404E88                 add     edi, edx
.text:00404E8A                 mov     ecx, 20h ; ' '
.text:00404E8F                 rep movsd
.text:00404E91                 mov     ecx, ds:dword_42C050
.text:00404E97
.text:00404E97 loc_404E97:                             ; CODE XREF: sub_404DF0+8E↑j
.text:00404E97                 inc     ebx
.text:00404E98
.text:00404E98 loc_404E98:                             ; CODE XREF: sub_404DF0+8A↑j
.text:00404E98                 inc     ebp
.text:00404E99                 cmp     ebp, ecx
.text:00404E9B                 jb      short loc_404E70
.text:00404E9D
.text:00404E9D loc_404E9D:                             ; CODE XREF: sub_404DF0+69↑j
.text:00404E9D                 mov     ds:dword_42C050, ebx
.text:00404EA3                 add     esp, 1Ch
.text:00404EA6                 pop     ebx
.text:00404EA7                 pop     esi
.text:00404EA8                 pop     edi
.text:00404EA9                 pop     ebp
.text:00404EAA                 retn
.text:00404EAA ; ---------------------------------------------------------------------------
.text:00404EAB                 align 10h
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404DF0+4D↑j
.text:00404EB0                                         ; sub_404DF0+52↑j
.text:00404EB0                 cmp     [esp+2Ch+var_12], 0
.text:00404EB5                 jnz     loc_404F46
.text:00404EBB
.text:00404EBB loc_404EBB:                             ; CODE XREF: sub_404DF0+176↓j
.text:00404EBB                 test    edi, edi
.text:00404EBD                 jz      short loc_404F28
.text:00404EBF                 mov     ebx, [edx+esi]
.text:00404EC2                 cmp     byte ptr [ebx], 2Fh ; '/'
.text:00404EC5                 jz      short loc_404F28
.text:00404EC7                 mov     dword ptr [esp+2Ch+var_24], 0 ; int
.text:00404ECF                 mov     ebx, [edx+esi]
.text:00404ED2                 mov     [esp+2Ch+Block], edi ; int
.text:00404ED5                 mov     [esp+2Ch+var_28], ebx ; char *
.text:00404ED9                 call    sub_412130
.text:00404EDE                 movzx   edx, [esp+2Ch+var_11]
.text:00404EE3                 mov     ebx, eax
.text:00404EE5                 mov     ecx, ds:dword_42C030
.text:00404EEB                 mov     dword ptr [esp+2Ch+var_24], edx ; char
.text:00404EEF                 mov     edx, [ecx+esi+70h]
.text:00404EF3                 mov     [esp+2Ch+Block], eax ; char *
.text:00404EF6                 mov     [esp+2Ch+var_28], edx ; char *
.text:00404EFA                 call    sub_403B20
.text:00404EFF                 mov     [esp+2Ch+Block], ebx ; Block
.text:00404F02                 call    free
.text:00404F07
.text:00404F07 loc_404F07:                             ; CODE XREF: sub_404DF0+154↓j
.text:00404F07                 mov     edx, ds:dword_42C030
.text:00404F0D                 cmp     dword ptr [edx+esi+78h], 1Eh
.text:00404F12                 jnz     loc_404E44
.text:00404F18                 mov     ecx, [edx+esi]
.text:00404F1B                 mov     [esp+2Ch+Block], ecx ; Block
.text:00404F1E                 call    free
.text:00404F23                 jmp     loc_404E44
.text:00404F28 ; ---------------------------------------------------------------------------
.text:00404F28
.text:00404F28 loc_404F28:                             ; CODE XREF: sub_404DF0+CD↑j
.text:00404F28                                         ; sub_404DF0+D5↑j
.text:00404F28                 movzx   ecx, [esp+2Ch+var_11]
.text:00404F2D                 mov     dword ptr [esp+2Ch+var_24], ecx ; char
.text:00404F31                 mov     ebx, [edx+esi+70h]
.text:00404F35                 mov     [esp+2Ch+var_28], ebx ; char *
.text:00404F39                 mov     ecx, [edx+esi]
.text:00404F3C                 mov     [esp+2Ch+Block], ecx ; char *
.text:00404F3F                 call    sub_403B20
.text:00404F44                 jmp     short loc_404F07
.text:00404F46 ; ---------------------------------------------------------------------------
.text:00404F46
.text:00404F46 loc_404F46:                             ; CODE XREF: sub_404DF0+C5↑j
.text:00404F46                 mov     ecx, [edx+esi]
.text:00404F49                 mov     [esp+2Ch+Block], ecx
.text:00404F4C                 call    sub_412220
.text:00404F51                 xor     ecx, ecx
.text:00404F53                 cmp     byte ptr [eax], 2Eh ; '.'
.text:00404F56                 jz      short loc_404F6B
.text:00404F58
.text:00404F58 loc_404F58:                             ; CODE XREF: sub_404DF0+186↓j
.text:00404F58                                         ; sub_404DF0+18C↓j ...
.text:00404F58                 test    cl, cl
.text:00404F5A                 jnz     loc_404E44
.text:00404F60                 mov     edx, ds:dword_42C030
.text:00404F66                 jmp     loc_404EBB
.text:00404F6B ; ---------------------------------------------------------------------------
.text:00404F6B
.text:00404F6B loc_404F6B:                             ; CODE XREF: sub_404DF0+166↑j
.text:00404F6B                 movzx   edx, byte ptr [eax+1]
.text:00404F6F                 test    dl, dl
.text:00404F71                 jz      short loc_404F7E
.text:00404F73                 cmp     dl, 2Eh ; '.'
.text:00404F76                 jnz     short loc_404F58
.text:00404F78                 cmp     byte ptr [eax+2], 0
.text:00404F7C                 jnz     short loc_404F58
.text:00404F7E
.text:00404F7E loc_404F7E:                             ; CODE XREF: sub_404DF0+181↑j
.text:00404F7E                 mov     cl, 1
.text:00404F80                 jmp     short loc_404F58
.text:00404F82 ; ---------------------------------------------------------------------------
.text:00404F82
.text:00404F82 loc_404F82:                             ; CODE XREF: sub_404DF0+24↑j
.text:00404F82                 mov     dword ptr [esp+2Ch+var_24], 0 ; char
.text:00404F8A                 mov     [esp+2Ch+var_28], edi ; char *
.text:00404F8E                 mov     [esp+2Ch+Block], 0 ; char *
.text:00404F95                 call    sub_403B20
.text:00404F9A                 jmp     loc_404E1A
.text:00404F9A sub_404DF0      endp
.text:00404F9A
.text:00404F9A ; ---------------------------------------------------------------------------
.text:00404F9F                 align 10h
.text:00404FA0
.text:00404FA0 ; =============== S U B R O U T I N E =======================================
.text:00404FA0
.text:00404FA0
.text:00404FA0 sub_404FA0      proc near               ; CODE XREF: sub_401B10:loc_401FCE↑p
.text:00404FA0                                         ; sub_403C30+24B↑p
.text:00404FA0
.text:00404FA0 Buf             = dword ptr -2Ch
.text:00404FA0 var_28          = dword ptr -28h
.text:00404FA0 var_24          = dword ptr -24h
.text:00404FA0 var_20          = dword ptr -20h
.text:00404FA0 var_10          = dword ptr -10h
.text:00404FA0 var_C           = dword ptr -0Ch
.text:00404FA0 var_8           = dword ptr -8
.text:00404FA0 var_4           = dword ptr -4
.text:00404FA0
.text:00404FA0                 sub     esp, 2Ch
.text:00404FA3                 mov     [esp+2Ch+var_10], ebx
.text:00404FA7                 mov     [esp+2Ch+var_C], esi
.text:00404FAB                 mov     [esp+2Ch+var_8], edi
.text:00404FAF                 mov     [esp+2Ch+var_4], ebp
.text:00404FB3                 mov     [esp+2Ch+Buf], offset Buf ; Buf
.text:00404FBA                 call    _setjmp
.text:00404FBF                 test    eax, eax
.text:00404FC1                 jnz     loc_405100
.text:00404FC7                 mov     eax, ds:dword_42C130
.text:00404FCC                 cmp     eax, 5          ; switch 6 cases
.text:00404FCF                 ja      def_404FD5      ; jumptable 00404FD5 default case
.text:00404FD5                 jmp     ds:jpt_404FD5[eax*4] ; switch jump
.text:00404FD5 ; ---------------------------------------------------------------------------
.text:00404FDC jpt_404FD5      dd offset loc_405044    ; DATA XREF: sub_404FA0+35↑r
.text:00404FDC                 dd offset loc_40508D    ; jump table for switch statement
.text:00404FDC                 dd offset loc_4050A7
.text:00404FDC                 dd offset loc_404FF4
.text:00404FDC                 dd offset loc_4050C4
.text:00404FDC                 dd offset loc_4050E1
.text:00404FF4 ; ---------------------------------------------------------------------------
.text:00404FF4
.text:00404FF4 loc_404FF4:                             ; CODE XREF: sub_404FA0+35↑j
.text:00404FF4                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:00404FF4                 mov     eax, ds:dword_42C120 ; jumptable 00404FD5 case 3
.text:00404FF9                 cmp     eax, 1
.text:00404FFC                 jz      short loc_405076
.text:00404FFE                 cmp     eax, 1
.text:00405001                 jb      short loc_40505F
.text:00405003                 cmp     eax, 2
.text:00405006                 jnz     def_404FD5      ; jumptable 00404FD5 default case
.text:0040500C                 cmp     ds:byte_42C140, 0
.text:00405013                 jz      short loc_405058
.text:00405015                 mov     eax, offset sub_409ED0
.text:0040501A                 lea     esi, [esi+0]
.text:00405020
.text:00405020 loc_405020:                             ; CODE XREF: sub_404FA0+BD↓j
.text:00405020                                         ; sub_404FA0+CD↓j ...
.text:00405020                 mov     [esp+2Ch+var_20], eax ; int
.text:00405024                 mov     edx, ds:dword_42C050
.text:0040502A                 mov     [esp+2Ch+var_24], 80h ; '€' ; size_t
.text:00405032                 mov     [esp+2Ch+var_28], edx ; void *
.text:00405036                 mov     edx, ds:dword_42C030
.text:0040503C                 mov     [esp+2Ch+Buf], edx ; Block
.text:0040503F                 call    sub_41A1F0
.text:00405044
.text:00405044 loc_405044:                             ; CODE XREF: sub_404FA0+35↑j
.text:00405044                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:00405044                 mov     ebx, [esp+2Ch+var_10] ; jumptable 00404FD5 case 0
.text:00405048                 mov     esi, [esp+2Ch+var_C]
.text:0040504C                 mov     edi, [esp+2Ch+var_8]
.text:00405050                 mov     ebp, [esp+2Ch+var_4]
.text:00405054                 add     esp, 2Ch
.text:00405057                 retn
.text:00405058 ; ---------------------------------------------------------------------------
.text:00405058
.text:00405058 loc_405058:                             ; CODE XREF: sub_404FA0+73↑j
.text:00405058                 mov     eax, offset sub_409DF0
.text:0040505D                 jmp     short loc_405020
.text:0040505F ; ---------------------------------------------------------------------------
.text:0040505F
.text:0040505F loc_40505F:                             ; CODE XREF: sub_404FA0+61↑j
.text:0040505F                 cmp     ds:byte_42C140, 0
.text:00405066                 jz      short loc_40506F
.text:00405068                 mov     eax, offset sub_409D10
.text:0040506D                 jmp     short loc_405020
.text:0040506F ; ---------------------------------------------------------------------------
.text:0040506F
.text:0040506F loc_40506F:                             ; CODE XREF: sub_404FA0+C6↑j
.text:0040506F                 mov     eax, offset sub_409C30
.text:00405074                 jmp     short loc_405020
.text:00405076 ; ---------------------------------------------------------------------------
.text:00405076
.text:00405076 loc_405076:                             ; CODE XREF: sub_404FA0+5C↑j
.text:00405076                 cmp     ds:byte_42C140, 0
.text:0040507D                 jz      short loc_405086
.text:0040507F                 mov     eax, offset sub_409B50
.text:00405084                 jmp     short loc_405020
.text:00405086 ; ---------------------------------------------------------------------------
.text:00405086
.text:00405086 loc_405086:                             ; CODE XREF: sub_404FA0+DD↑j
.text:00405086                 mov     eax, offset sub_409A70
.text:0040508B                 jmp     short loc_405020
.text:0040508D ; ---------------------------------------------------------------------------
.text:0040508D
.text:0040508D loc_40508D:                             ; CODE XREF: sub_404FA0+35↑j
.text:0040508D                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:0040508D                 cmp     ds:byte_42C140, 0 ; jumptable 00404FD5 case 1
.text:00405094                 jz      short loc_40509D
.text:00405096                 mov     eax, offset sub_40A270
.text:0040509B                 jmp     short loc_405020
.text:0040509D ; ---------------------------------------------------------------------------
.text:0040509D
.text:0040509D loc_40509D:                             ; CODE XREF: sub_404FA0+F4↑j
.text:0040509D                 mov     eax, offset sub_40A230
.text:004050A2                 jmp     loc_405020
.text:004050A7 ; ---------------------------------------------------------------------------
.text:004050A7
.text:004050A7 loc_4050A7:                             ; CODE XREF: sub_404FA0+35↑j
.text:004050A7                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:004050A7                 cmp     ds:byte_42C140, 0 ; jumptable 00404FD5 case 2
.text:004050AE                 jz      short loc_4050BA
.text:004050B0                 mov     eax, offset sub_40A3D0
.text:004050B5                 jmp     loc_405020
.text:004050BA ; ---------------------------------------------------------------------------
.text:004050BA
.text:004050BA loc_4050BA:                             ; CODE XREF: sub_404FA0+10E↑j
.text:004050BA                 mov     eax, offset sub_40A2B0
.text:004050BF                 jmp     loc_405020
.text:004050C4 ; ---------------------------------------------------------------------------
.text:004050C4
.text:004050C4 loc_4050C4:                             ; CODE XREF: sub_404FA0+35↑j
.text:004050C4                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:004050C4                 cmp     ds:byte_42C140, 0 ; jumptable 00404FD5 case 4
.text:004050CB                 jz      short loc_4050D7
.text:004050CD                 mov     eax, offset sub_40A0D0
.text:004050D2                 jmp     loc_405020
.text:004050D7 ; ---------------------------------------------------------------------------
.text:004050D7
.text:004050D7 loc_4050D7:                             ; CODE XREF: sub_404FA0+12B↑j
.text:004050D7                 mov     eax, offset sub_409FB0
.text:004050DC                 jmp     loc_405020
.text:004050E1 ; ---------------------------------------------------------------------------
.text:004050E1
.text:004050E1 loc_4050E1:                             ; CODE XREF: sub_404FA0+35↑j
.text:004050E1                                         ; DATA XREF: sub_404FA0:jpt_404FD5↑o
.text:004050E1                 cmp     ds:byte_42C140, 0 ; jumptable 00404FD5 case 5
.text:004050E8                 jz      short loc_4050F4
.text:004050EA                 mov     eax, offset sub_40A210
.text:004050EF                 jmp     loc_405020
.text:004050F4 ; ---------------------------------------------------------------------------
.text:004050F4
.text:004050F4 loc_4050F4:                             ; CODE XREF: sub_404FA0+148↑j
.text:004050F4                 mov     eax, offset loc_40A1F0
.text:004050F9                 jmp     loc_405020
.text:004050F9 ; ---------------------------------------------------------------------------
.text:004050FE                 align 10h
.text:00405100
.text:00405100 loc_405100:                             ; CODE XREF: sub_404FA0+21↑j
.text:00405100                 mov     eax, ds:dword_42C130
.text:00405105                 cmp     eax, 2
.text:00405108                 jz      loc_4051D0
.text:0040510E                 cmp     eax, 2
.text:00405111                 ja      short loc_405138
.text:00405113                 dec     eax
.text:00405114                 jz      short loc_40511B
.text:00405116
.text:00405116 def_404FD5:                             ; CODE XREF: sub_404FA0+2F↑j
.text:00405116                                         ; sub_404FA0+66↑j ...
.text:00405116                 call    abort           ; jumptable 00404FD5 default case
.text:0040511B ; ---------------------------------------------------------------------------
.text:0040511B
.text:0040511B loc_40511B:                             ; CODE XREF: sub_404FA0+174↑j
.text:0040511B                 cmp     ds:byte_42C140, 0
.text:00405122                 jz      short loc_40512E
.text:00405124                 mov     eax, offset sub_40A290
.text:00405129                 jmp     loc_405020
.text:0040512E ; ---------------------------------------------------------------------------
.text:0040512E
.text:0040512E loc_40512E:                             ; CODE XREF: sub_404FA0+182↑j
.text:0040512E                 mov     eax, offset sub_40A250
.text:00405133                 jmp     loc_405020
.text:00405138 ; ---------------------------------------------------------------------------
.text:00405138
.text:00405138 loc_405138:                             ; CODE XREF: sub_404FA0+171↑j
.text:00405138                 cmp     eax, 3
.text:0040513B                 jz      short loc_40515F
.text:0040513D                 cmp     eax, 4
.text:00405140                 jnz     short def_404FD5 ; jumptable 00404FD5 default case
.text:00405142                 cmp     ds:byte_42C140, 0
.text:00405149                 jz      short loc_405155
.text:0040514B                 mov     eax, offset sub_40A160
.text:00405150                 jmp     loc_405020
.text:00405155 ; ---------------------------------------------------------------------------
.text:00405155
.text:00405155 loc_405155:                             ; CODE XREF: sub_404FA0+1A9↑j
.text:00405155                 mov     eax, offset sub_40A040
.text:0040515A                 jmp     loc_405020
.text:0040515F ; ---------------------------------------------------------------------------
.text:0040515F
.text:0040515F loc_40515F:                             ; CODE XREF: sub_404FA0+19B↑j
.text:0040515F                 mov     eax, ds:dword_42C120
.text:00405164                 cmp     eax, 1
.text:00405167                 jz      short loc_4051AD
.text:00405169                 cmp     eax, 1
.text:0040516C                 jb      short loc_405190
.text:0040516E                 cmp     eax, 2
.text:00405171                 jnz     short def_404FD5 ; jumptable 00404FD5 default case
.text:00405173                 cmp     ds:byte_42C140, 0
.text:0040517A                 jz      short loc_405186
.text:0040517C                 mov     eax, offset sub_409F40
.text:00405181                 jmp     loc_405020
.text:00405186 ; ---------------------------------------------------------------------------
.text:00405186
.text:00405186 loc_405186:                             ; CODE XREF: sub_404FA0+1DA↑j
.text:00405186                 mov     eax, offset sub_409E60
.text:0040518B                 jmp     loc_405020
.text:00405190 ; ---------------------------------------------------------------------------
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_404FA0+1CC↑j
.text:00405190                 cmp     ds:byte_42C140, 0
.text:00405197                 jz      short loc_4051A3
.text:00405199                 mov     eax, offset sub_409D80
.text:0040519E                 jmp     loc_405020
.text:004051A3 ; ---------------------------------------------------------------------------
.text:004051A3
.text:004051A3 loc_4051A3:                             ; CODE XREF: sub_404FA0+1F7↑j
.text:004051A3                 mov     eax, offset sub_409CA0
.text:004051A8                 jmp     loc_405020
.text:004051AD ; ---------------------------------------------------------------------------
.text:004051AD
.text:004051AD loc_4051AD:                             ; CODE XREF: sub_404FA0+1C7↑j
.text:004051AD                 cmp     ds:byte_42C140, 0
.text:004051B4                 jz      short loc_4051C0
.text:004051B6                 mov     eax, offset sub_409BC0
.text:004051BB                 jmp     loc_405020
.text:004051C0 ; ---------------------------------------------------------------------------
.text:004051C0
.text:004051C0 loc_4051C0:                             ; CODE XREF: sub_404FA0+214↑j
.text:004051C0                 mov     eax, offset sub_409AE0
.text:004051C5                 jmp     loc_405020
.text:004051C5 ; ---------------------------------------------------------------------------
.text:004051CA                 align 10h
.text:004051D0
.text:004051D0 loc_4051D0:                             ; CODE XREF: sub_404FA0+168↑j
.text:004051D0                 cmp     ds:byte_42C140, 0
.text:004051D7                 jz      short loc_4051E3
.text:004051D9                 mov     eax, offset sub_40A460
.text:004051DE                 jmp     loc_405020
.text:004051E3 ; ---------------------------------------------------------------------------
.text:004051E3
.text:004051E3 loc_4051E3:                             ; CODE XREF: sub_404FA0+237↑j
.text:004051E3                 mov     eax, offset sub_40A340
.text:004051E8                 jmp     loc_405020
.text:004051E8 sub_404FA0      endp
.text:004051E8
.text:004051E8 ; ---------------------------------------------------------------------------
.text:004051ED                 align 10h
.text:004051F0
.text:004051F0 ; =============== S U B R O U T I N E =======================================
.text:004051F0
.text:004051F0
.text:004051F0 sub_4051F0      proc near               ; CODE XREF: sub_401B10+4DA↑p
.text:004051F0                                         ; sub_403C30:loc_4040BC↑p
.text:004051F0
.text:004051F0 var_C           = dword ptr -0Ch
.text:004051F0 File            = dword ptr -8
.text:004051F0 var_4           = dword ptr -4
.text:004051F0
.text:004051F0                 sub     esp, 0Ch
.text:004051F3                 mov     eax, ds:dword_42C110
.text:004051F8                 mov     [esp+0Ch+var_4], ebx
.text:004051FC                 cmp     eax, 4          ; switch 5 cases
.text:004051FF                 ja      short def_405201 ; jumptable 00405201 default case
.text:00405201                 jmp     ds:jpt_405201[eax*4] ; switch jump
.text:00405201 ; ---------------------------------------------------------------------------
.text:00405208 jpt_405201      dd offset loc_405292    ; DATA XREF: sub_4051F0+11↑r
.text:00405208                 dd offset loc_40521C    ; jump table for switch statement
.text:00405208                 dd offset loc_405303
.text:00405208                 dd offset loc_40530F
.text:00405208                 dd offset loc_40531B
.text:0040521C ; ---------------------------------------------------------------------------
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: sub_4051F0+11↑j
.text:0040521C                                         ; DATA XREF: sub_4051F0:jpt_405201↑o
.text:0040521C                 xor     ebx, ebx        ; jumptable 00405201 case 1
.text:0040521E                 cmp     ebx, ds:dword_42C050
.text:00405224                 jb      short loc_405238
.text:00405226                 lea     esi, [esi+0]
.text:00405229                 lea     edi, [edi+0]
.text:00405230
.text:00405230 def_405201:                             ; CODE XREF: sub_4051F0+F↑j
.text:00405230                                         ; sub_4051F0+85↓j ...
.text:00405230                 mov     ebx, [esp+0Ch+var_4] ; jumptable 00405201 default case
.text:00405234                 add     esp, 0Ch
.text:00405237                 retn
.text:00405238 ; ---------------------------------------------------------------------------
.text:00405238
.text:00405238 loc_405238:                             ; CODE XREF: sub_4051F0+34↑j
.text:00405238                                         ; sub_4051F0+83↓j
.text:00405238                 mov     eax, ds:dword_42C030
.text:0040523D                 mov     edx, ebx
.text:0040523F                 shl     edx, 7
.text:00405242                 add     edx, eax
.text:00405244                 mov     [esp+0Ch+var_C], edx
.text:00405247                 call    sub_4063C0
.text:0040524C                 mov     edx, ds:_iob
.text:00405252                 mov     ecx, [edx+24h]
.text:00405255                 dec     ecx
.text:00405256                 mov     [edx+24h], ecx
.text:00405259                 test    ecx, ecx
.text:0040525B                 js      short loc_405277
.text:0040525D                 mov     ecx, ds:_iob
.text:00405263                 mov     eax, [ecx+20h]
.text:00405266                 mov     byte ptr [eax], 0Ah
.text:00405269                 inc     dword ptr [ecx+20h]
.text:0040526C
.text:0040526C loc_40526C:                             ; CODE XREF: sub_4051F0+A0↓j
.text:0040526C                 inc     ebx
.text:0040526D                 cmp     ebx, ds:dword_42C050
.text:00405273                 jb      short loc_405238
.text:00405275                 jmp     short def_405201 ; jumptable 00405201 default case
.text:00405277 ; ---------------------------------------------------------------------------
.text:00405277
.text:00405277 loc_405277:                             ; CODE XREF: sub_4051F0+6B↑j
.text:00405277                 mov     [esp+0Ch+var_C], 0Ah ; Ch
.text:0040527E                 mov     edx, ds:_iob
.text:00405284                 add     edx, 20h ; ' '
.text:00405287                 mov     [esp+0Ch+File], edx ; File
.text:0040528B                 call    _flsbuf
.text:00405290                 jmp     short loc_40526C
.text:00405292 ; ---------------------------------------------------------------------------
.text:00405292
.text:00405292 loc_405292:                             ; CODE XREF: sub_4051F0+11↑j
.text:00405292                                         ; DATA XREF: sub_4051F0:jpt_405201↑o
.text:00405292                 xor     ebx, ebx        ; jumptable 00405201 case 0
.text:00405294                 cmp     ebx, ds:dword_42C050
.text:0040529A                 jnb     short def_405201 ; jumptable 00405201 default case
.text:0040529C                 lea     esi, [esi+0]
.text:004052A0
.text:004052A0 loc_4052A0:                             ; CODE XREF: sub_4051F0+F1↓j
.text:004052A0                 mov     eax, ds:dword_42C030
.text:004052A5                 mov     ecx, ebx
.text:004052A7                 shl     ecx, 7
.text:004052AA                 add     ecx, eax
.text:004052AC                 mov     [esp+0Ch+var_C], ecx
.text:004052AF                 call    sub_405490
.text:004052B4                 mov     edx, ds:_iob
.text:004052BA                 mov     ecx, [edx+24h]
.text:004052BD                 dec     ecx
.text:004052BE                 mov     [edx+24h], ecx
.text:004052C1                 test    ecx, ecx
.text:004052C3                 js      short loc_4052E8
.text:004052C5                 mov     ecx, ds:_iob
.text:004052CB                 mov     eax, [ecx+20h]
.text:004052CE                 mov     byte ptr [eax], 0Ah
.text:004052D1                 inc     dword ptr [ecx+20h]
.text:004052D4
.text:004052D4 loc_4052D4:                             ; CODE XREF: sub_4051F0+111↓j
.text:004052D4                 inc     ds:dword_42C340
.text:004052DA                 inc     ebx
.text:004052DB                 cmp     ebx, ds:dword_42C050
.text:004052E1                 jb      short loc_4052A0
.text:004052E3                 jmp     def_405201      ; jumptable 00405201 default case
.text:004052E8 ; ---------------------------------------------------------------------------
.text:004052E8
.text:004052E8 loc_4052E8:                             ; CODE XREF: sub_4051F0+D3↑j
.text:004052E8                 mov     [esp+0Ch+var_C], 0Ah ; Ch
.text:004052EF                 mov     edx, ds:_iob
.text:004052F5                 add     edx, 20h ; ' '
.text:004052F8                 mov     [esp+0Ch+File], edx ; File
.text:004052FC                 call    _flsbuf
.text:00405301                 jmp     short loc_4052D4
.text:00405303 ; ---------------------------------------------------------------------------
.text:00405303
.text:00405303 loc_405303:                             ; CODE XREF: sub_4051F0+11↑j
.text:00405303                                         ; DATA XREF: sub_4051F0:jpt_405201↑o
.text:00405303                 mov     ebx, [esp+0Ch+var_4] ; jumptable 00405201 case 2
.text:00405307                 add     esp, 0Ch
.text:0040530A                 jmp     sub_4067C0
.text:0040530F ; ---------------------------------------------------------------------------
.text:0040530F
.text:0040530F loc_40530F:                             ; CODE XREF: sub_4051F0+11↑j
.text:0040530F                                         ; DATA XREF: sub_4051F0:jpt_405201↑o
.text:0040530F                 mov     ebx, [esp+0Ch+var_4] ; jumptable 00405201 case 3
.text:00405313                 add     esp, 0Ch
.text:00405316                 jmp     sub_406A50
.text:0040531B ; ---------------------------------------------------------------------------
.text:0040531B
.text:0040531B loc_40531B:                             ; CODE XREF: sub_4051F0+11↑j
.text:0040531B                                         ; DATA XREF: sub_4051F0:jpt_405201↑o
.text:0040531B                 mov     ebx, [esp+0Ch+var_4] ; jumptable 00405201 case 4
.text:0040531F                 add     esp, 0Ch
.text:00405322                 jmp     sub_406E50
.text:00405322 sub_4051F0      endp
.text:00405322
.text:00405327
.text:00405327 ; =============== S U B R O U T I N E =======================================
.text:00405327
.text:00405327
.text:00405327 sub_405327      proc near               ; DATA XREF: sub_405330+48↓o
.text:00405327                                         ; sub_4053D0+48↓o
.text:00405327                 and     eax, 9000756Ch
.text:0040532C                 lea     esi, [esi+0]
.text:0040532C sub_405327      endp
.text:0040532C
.text:00405330
.text:00405330 ; =============== S U B R O U T I N E =======================================
.text:00405330
.text:00405330
.text:00405330 sub_405330      proc near               ; CODE XREF: sub_404500+42C↑p
.text:00405330                                         ; sub_404500+47C↑p
.text:00405330
.text:00405330 Buffer          = dword ptr -2Ch
.text:00405330 Format          = dword ptr -28h
.text:00405330 var_24          = dword ptr -24h
.text:00405330 var_1C          = byte ptr -1Ch
.text:00405330 var_4           = dword ptr -4
.text:00405330 arg_0           = dword ptr  4
.text:00405330
.text:00405330                 sub     esp, 2Ch
.text:00405333                 cmp     ds:byte_42C160, 0
.text:0040533A                 mov     [esp+2Ch+var_4], ebx
.text:0040533E                 mov     ebx, [esp+2Ch+arg_0]
.text:00405342                 jz      short loc_4053C0
.text:00405344                 xor     eax, eax
.text:00405346
.text:00405346 loc_405346:                             ; CODE XREF: sub_405330+98↓j
.text:00405346                 test    eax, eax
.text:00405348                 jz      short loc_405370
.text:0040534A                 mov     [esp+2Ch+Format], 0 ; char
.text:00405352                 mov     [esp+2Ch+Buffer], eax ; char *
.text:00405355                 call    sub_40CAD0
.text:0040535A                 test    eax, eax
.text:0040535C                 mov     ecx, eax
.text:0040535E                 js      short loc_40536A
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_405330+3C↓j
.text:00405360                                         ; sub_405330+8C↓j
.text:00405360                 mov     ebx, [esp+2Ch+var_4]
.text:00405364                 mov     eax, ecx
.text:00405366                 add     esp, 2Ch
.text:00405369                 retn
.text:0040536A ; ---------------------------------------------------------------------------
.text:0040536A
.text:0040536A loc_40536A:                             ; CODE XREF: sub_405330+2E↑j
.text:0040536A                 xor     ecx, ecx
.text:0040536C                 jmp     short loc_405360
.text:0040536C ; ---------------------------------------------------------------------------
.text:0040536E                 align 10h
.text:00405370
.text:00405370 loc_405370:                             ; CODE XREF: sub_405330+18↑j
.text:00405370                 mov     [esp+2Ch+var_24], ebx
.text:00405374                 lea     ebx, [esp+2Ch+var_1C]
.text:00405378                 mov     [esp+2Ch+Format], offset sub_405327 ; Format
.text:00405380                 mov     [esp+2Ch+Buffer], ebx ; Buffer
.text:00405383                 call    sprintf
.text:00405388                 mov     ecx, ebx
.text:0040538A                 lea     esi, [esi+0]
.text:00405390
.text:00405390 loc_405390:                             ; CODE XREF: sub_405330+75↓j
.text:00405390                 mov     eax, [ecx]
.text:00405392                 add     ecx, 4
.text:00405395                 lea     edx, [eax-1010101h]
.text:0040539B                 not     eax
.text:0040539D                 and     edx, eax
.text:0040539F                 and     edx, 80808080h
.text:004053A5                 jz      short loc_405390
.text:004053A7                 test    edx, 8080h
.text:004053AD                 jnz     short loc_4053B5
.text:004053AF                 shr     edx, 10h
.text:004053B2                 add     ecx, 2
.text:004053B5
.text:004053B5 loc_4053B5:                             ; CODE XREF: sub_405330+7D↑j
.text:004053B5                 add     dl, dl
.text:004053B7                 sbb     ecx, 3
.text:004053BA                 sub     ecx, ebx
.text:004053BC                 jmp     short loc_405360
.text:004053BC ; ---------------------------------------------------------------------------
.text:004053BE                 align 10h
.text:004053C0
.text:004053C0 loc_4053C0:                             ; CODE XREF: sub_405330+12↑j
.text:004053C0                 mov     [esp+2Ch+Buffer], ebx
.text:004053C3                 call    sub_411DF0
.text:004053C8                 jmp     loc_405346
.text:004053C8 sub_405330      endp
.text:004053C8
.text:004053C8 ; ---------------------------------------------------------------------------
.text:004053CD                 align 10h
.text:004053D0
.text:004053D0 ; =============== S U B R O U T I N E =======================================
.text:004053D0
.text:004053D0
.text:004053D0 sub_4053D0      proc near               ; CODE XREF: sub_404500+453↑p
.text:004053D0
.text:004053D0 Buffer          = dword ptr -2Ch
.text:004053D0 Format          = dword ptr -28h
.text:004053D0 var_24          = dword ptr -24h
.text:004053D0 var_1C          = byte ptr -1Ch
.text:004053D0 var_4           = dword ptr -4
.text:004053D0 arg_0           = dword ptr  4
.text:004053D0
.text:004053D0                 sub     esp, 2Ch
.text:004053D3                 cmp     ds:byte_42C160, 0
.text:004053DA                 mov     [esp+2Ch+var_4], ebx
.text:004053DE                 mov     ebx, [esp+2Ch+arg_0]
.text:004053E2                 jz      short loc_405460
.text:004053E4                 xor     eax, eax
.text:004053E6
.text:004053E6 loc_4053E6:                             ; CODE XREF: sub_4053D0+98↓j
.text:004053E6                 test    eax, eax
.text:004053E8                 jz      short loc_405410
.text:004053EA                 mov     [esp+2Ch+Format], 0 ; char
.text:004053F2                 mov     [esp+2Ch+Buffer], eax ; char *
.text:004053F5                 call    sub_40CAD0
.text:004053FA                 test    eax, eax
.text:004053FC                 mov     ecx, eax
.text:004053FE                 js      short loc_40540A
.text:00405400
.text:00405400 loc_405400:                             ; CODE XREF: sub_4053D0+3C↓j
.text:00405400                                         ; sub_4053D0+8C↓j
.text:00405400                 mov     ebx, [esp+2Ch+var_4]
.text:00405404                 mov     eax, ecx
.text:00405406                 add     esp, 2Ch
.text:00405409                 retn
.text:0040540A ; ---------------------------------------------------------------------------
.text:0040540A
.text:0040540A loc_40540A:                             ; CODE XREF: sub_4053D0+2E↑j
.text:0040540A                 xor     ecx, ecx
.text:0040540C                 jmp     short loc_405400
.text:0040540C ; ---------------------------------------------------------------------------
.text:0040540E                 align 10h
.text:00405410
.text:00405410 loc_405410:                             ; CODE XREF: sub_4053D0+18↑j
.text:00405410                 mov     [esp+2Ch+var_24], ebx
.text:00405414                 lea     ebx, [esp+2Ch+var_1C]
.text:00405418                 mov     [esp+2Ch+Format], offset sub_405327 ; Format
.text:00405420                 mov     [esp+2Ch+Buffer], ebx ; Buffer
.text:00405423                 call    sprintf
.text:00405428                 mov     ecx, ebx
.text:0040542A                 lea     esi, [esi+0]
.text:00405430
.text:00405430 loc_405430:                             ; CODE XREF: sub_4053D0+75↓j
.text:00405430                 mov     eax, [ecx]
.text:00405432                 add     ecx, 4
.text:00405435                 lea     edx, [eax-1010101h]
.text:0040543B                 not     eax
.text:0040543D                 and     edx, eax
.text:0040543F                 and     edx, 80808080h
.text:00405445                 jz      short loc_405430
.text:00405447                 test    edx, 8080h
.text:0040544D                 jnz     short loc_405455
.text:0040544F                 shr     edx, 10h
.text:00405452                 add     ecx, 2
.text:00405455
.text:00405455 loc_405455:                             ; CODE XREF: sub_4053D0+7D↑j
.text:00405455                 add     dl, dl
.text:00405457                 sbb     ecx, 3
.text:0040545A                 sub     ecx, ebx
.text:0040545C                 jmp     short loc_405400
.text:0040545C ; ---------------------------------------------------------------------------
.text:0040545E                 align 10h
.text:00405460
.text:00405460 loc_405460:                             ; CODE XREF: sub_4053D0+12↑j
.text:00405460                 mov     [esp+2Ch+Buffer], ebx
.text:00405463                 call    sub_411F60
.text:00405468                 jmp     loc_4053E6
.text:00405468 sub_4053D0      endp
.text:00405468
.text:00405468 ; ---------------------------------------------------------------------------
.text:0040546D ; const char aSS[]
.text:0040546D aSS             db '%s %*s ',0          ; DATA XREF: sub_405490+C7↓o
.text:00405475 asc_405475      db ' -> ',0             ; DATA XREF: sub_405490+379↓o
.text:0040547A ; const char aS_0[]
.text:0040547A aS_0            db '%*s ',0             ; DATA XREF: sub_405490+4C6↓o
.text:0040547A                                         ; sub_405490+99C↓o ...
.text:0040547F ; const char aSS_0[]
.text:0040547F aSS_0           db '%*s, %*s ',0        ; DATA XREF: sub_405490+571↓o
.text:00405489 ; const char aLu[]
.text:00405489 aLu             db '%*lu ',0            ; DATA XREF: sub_405490+7F7↓o
.text:00405489                                         ; sub_405490+83C↓o ...
.text:0040548F                 align 10h
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: bp-based frame
.text:00405490
.text:00405490 sub_405490      proc near               ; CODE XREF: sub_4051F0+BF↑p
.text:00405490
.text:00405490 Buffer          = dword ptr -448h
.text:00405490 Format          = dword ptr -444h
.text:00405490 Size            = dword ptr -440h
.text:00405490 Stream          = dword ptr -43Ch
.text:00405490 var_438         = dword ptr -438h
.text:00405490 var_434         = dword ptr -434h
.text:00405490 var_430         = dword ptr -430h
.text:00405490 var_42C         = dword ptr -42Ch
.text:00405490 var_428         = byte ptr -428h
.text:00405490 var_424         = dword ptr -424h
.text:00405490 var_420         = dword ptr -420h
.text:00405490 var_41C         = dword ptr -41Ch
.text:00405490 var_418         = dword ptr -418h
.text:00405490 var_414         = dword ptr -414h
.text:00405490 var_410         = dword ptr -410h
.text:00405490 var_40C         = dword ptr -40Ch
.text:00405490 var_408         = dword ptr -408h
.text:00405490 var_404         = dword ptr -404h
.text:00405490 Time            = dword ptr -3FCh
.text:00405490 var_3F8         = byte ptr -3F8h
.text:00405490 var_3D8         = byte ptr -3D8h
.text:00405490 var_358         = byte ptr -358h
.text:00405490 var_338         = byte ptr -338h
.text:00405490 var_318         = byte ptr -318h
.text:00405490 var_2F8         = byte ptr -2F8h
.text:00405490 var_278         = byte ptr -278h
.text:00405490 var_258         = byte ptr -258h
.text:00405490 var_28          = byte ptr -28h
.text:00405490 var_1E          = byte ptr -1Eh
.text:00405490 var_1D          = byte ptr -1Dh
.text:00405490 arg_0           = dword ptr  8
.text:00405490
.text:00405490                 push    ebp
.text:00405491                 mov     edx, 227h
.text:00405496                 mov     ebp, esp
.text:00405498                 push    edi
.text:00405499                 lea     ecx, [ebp+var_258]
.text:0040549F                 push    esi
.text:004054A0                 lea     esi, [ebp+var_28]
.text:004054A3                 push    ebx
.text:004054A4                 sub     esp, 43Ch
.text:004054AA                 mov     eax, [ebp+arg_0]
.text:004054AD                 mov     [esp+448h+Format], esi
.text:004054B1                 mov     [ebp+var_414], ecx
.text:004054B7                 movzx   ecx, word ptr [eax+8]
.text:004054BB                 mov     [ebp+var_418], edx
.text:004054C1                 mov     [esp+448h+Buffer], ecx
.text:004054C4                 call    sub_40C7A0
.text:004054C9                 mov     [ebp+var_1E], 20h ; ' '
.text:004054CD                 mov     eax, ds:dword_42C120
.text:004054D2                 mov     [ebp+var_1D], 0
.text:004054D6                 cmp     eax, 1
.text:004054D9                 jz      loc_405E81
.text:004054DF                 cmp     eax, 1
.text:004054E2                 jb      loc_405E70
.text:004054E8                 cmp     eax, 2
.text:004054EB                 jz      loc_405E56
.text:004054F1                 jmp     short loc_405500
.text:004054F1 ; ---------------------------------------------------------------------------
.text:004054F3                 align 10h
.text:00405500
.text:00405500 loc_405500:                             ; CODE XREF: sub_405490+61↑j
.text:00405500                                         ; sub_405490+9DB↓j
.text:00405500                 cmp     ds:byte_42C1F0, 0
.text:00405507                 mov     edi, [ebp+var_414]
.text:0040550D                 jnz     loc_405DFD
.text:00405513
.text:00405513 loc_405513:                             ; CODE XREF: sub_405490+9C1↓j
.text:00405513                 cmp     ds:byte_42C170, 0
.text:0040551A                 jnz     loc_405D69
.text:00405520
.text:00405520 loc_405520:                             ; CODE XREF: sub_405490+968↓j
.text:00405520                 mov     ecx, [ebp+arg_0]
.text:00405523                 lea     ebx, [ebp+var_318]
.text:00405529                 mov     [esp+448h+Size], ebx
.text:0040552D                 mov     edx, [ecx+20h]
.text:00405530                 mov     [esp+448h+Format], 0
.text:00405538                 mov     [esp+448h+Buffer], edx
.text:0040553B                 call    sub_412370
.text:00405540                 mov     [esp+448h+var_438], eax
.text:00405544                 mov     ebx, ds:dword_42C0A0
.text:0040554A                 mov     [esp+448h+Size], esi
.text:0040554E                 mov     esi, edi
.text:00405550                 mov     [esp+448h+Buffer], edi ; Buffer
.text:00405553                 mov     [esp+448h+Stream], ebx
.text:00405557                 mov     [esp+448h+Format], offset aSS ; "%s %*s "
.text:0040555F                 call    sprintf
.text:00405564                 mov     edi, ds:dword_42C0A0
.text:0040556A                 add     esi, edi
.text:0040556C                 lea     edi, [esi+0Dh]
.text:0040556F                 cmp     ds:byte_42C1A0, 0
.text:00405576                 jnz     loc_405D34
.text:0040557C
.text:0040557C loc_40557C:                             ; CODE XREF: sub_405490+8D4↓j
.text:0040557C                 xor     edx, edx
.text:0040557E                 cmp     byte_42B019, 0
.text:00405585                 jnz     short loc_405590
.text:00405587                 cmp     byte_42B018, 0
.text:0040558E                 jz      short loc_405595
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_405490+F5↑j
.text:00405590                 mov     edx, 1
.text:00405595
.text:00405595 loc_405595:                             ; CODE XREF: sub_405490+FE↑j
.text:00405595                 movzx   ecx, ds:byte_42C150
.text:0040559C                 or      edx, ecx
.text:0040559E                 jnz     loc_405A1F
.text:004055A4
.text:004055A4 loc_4055A4:                             ; CODE XREF: sub_405490+7CD↓j
.text:004055A4                 mov     esi, [ebp+arg_0]
.text:004055A7                 mov     eax, [esi+8]
.text:004055AA                 and     eax, 0F000h
.text:004055AF                 cmp     eax, 2000h
.text:004055B4                 jz      loc_405972
.text:004055BA                 cmp     eax, 6000h
.text:004055BF                 jz      loc_405972
.text:004055C5                 mov     ecx, [ebp+arg_0]
.text:004055C8                 mov     edx, dword_42B020
.text:004055CE                 mov     ebx, [ecx+38h]
.text:004055D1                 mov     esi, [ecx+3Ch]
.text:004055D4                 mov     ecx, dword_42B024
.text:004055DA                 mov     [esp+448h+var_430], edx ; int
.text:004055DE                 mov     edx, ds:dword_42C180
.text:004055E4                 mov     [esp+448h+var_42C], ecx ; int
.text:004055E8                 lea     ecx, [ebp+var_3D8]
.text:004055EE                 mov     [esp+448h+Stream], edx ; int
.text:004055F2                 mov     [esp+448h+Size], ecx ; Buffer
.text:004055F6                 mov     [esp+448h+Buffer], ebx ; int
.text:004055F9                 mov     [esp+448h+var_438], 1 ; int
.text:00405601                 mov     [esp+448h+var_434], 0 ; int
.text:00405609                 mov     [esp+448h+Format], esi ; int
.text:0040560D                 call    sub_4126F0
.text:00405612                 mov     [esp+448h+Buffer], eax ; char *
.text:00405615                 mov     ebx, eax
.text:00405617                 mov     [esp+448h+Format], 0 ; char
.text:0040561F                 call    sub_40CAD0
.text:00405624                 mov     edx, ds:dword_42C100
.text:0040562A                 sub     edx, eax
.text:0040562C                 test    edx, edx
.text:0040562E                 jle     short loc_405639
.text:00405630
.text:00405630 loc_405630:                             ; CODE XREF: sub_405490+1A7↓j
.text:00405630                 mov     byte ptr [edi], 20h ; ' '
.text:00405633                 dec     edx
.text:00405634                 inc     edi
.text:00405635                 test    edx, edx
.text:00405637                 jg      short loc_405630
.text:00405639
.text:00405639 loc_405639:                             ; CODE XREF: sub_405490+19E↑j
.text:00405639                                         ; sub_405490+1B2↓j
.text:00405639                 movzx   edx, byte ptr [ebx]
.text:0040563C                 inc     ebx
.text:0040563D                 mov     [edi], dl
.text:0040563F                 inc     edi
.text:00405640                 test    dl, dl
.text:00405642                 jnz     short loc_405639
.text:00405644                 mov     byte ptr [edi-1], 20h ; ' '
.text:00405648
.text:00405648 loc_405648:                             ; CODE XREF: sub_405490+58A↓j
.text:00405648                 lea     esi, [ebp+Time]
.text:0040564E                 mov     [esp+448h+Buffer], esi ; Time
.text:00405651                 call    localtime
.text:00405656                 mov     [ebp+var_420], eax
.text:0040565C                 test    eax, eax
.text:0040565E                 jz      loc_405927
.text:00405664                 mov     ecx, dword_42B010
.text:0040566A                 mov     edx, [ebp+Time]
.text:00405670                 cmp     ecx, edx
.text:00405672                 jl      loc_405898
.text:00405678                 cmp     ecx, edx
.text:0040567A                 jz      loc_405886
.text:00405680
.text:00405680 loc_405680:                             ; CODE XREF: sub_405490+402↓j
.text:00405680                                         ; sub_405490+43F↓j
.text:00405680                 lea     esi, [ecx-0F0C2ACh]
.text:00405686                 xor     ebx, ebx
.text:00405688                 cmp     esi, edx
.text:0040568A                 jg      short loc_40569C
.text:0040568C                 cmp     edx, ecx
.text:0040568E                 jl      loc_40587F
.text:00405694                 cmp     edx, ecx
.text:00405696                 jz      loc_40586D
.text:0040569C
.text:0040569C loc_40569C:                             ; CODE XREF: sub_405490+1FA↑j
.text:0040569C                                         ; sub_405490+3E9↓j ...
.text:0040569C                 movzx   edx, bl
.text:0040569F                 mov     ebx, off_42B0A8[edx*4] ; "%b %e  %Y"
.text:004056A6                 mov     [ebp+var_424], ebx
.text:004056AC                 lea     esi, [esi+0]
.text:004056B0
.text:004056B0 loc_4056B0:                             ; CODE XREF: sub_405490+2B5↓j
.text:004056B0                 mov     byte ptr [edi], 1
.text:004056B3                 mov     esi, [ebp+var_414]
.text:004056B9                 mov     [esp+448h+var_438], 0 ; int
.text:004056C1                 mov     eax, [ebp+var_418]
.text:004056C7                 mov     [esp+448h+Buffer], edi ; Size
.text:004056CA                 mov     edx, [ebp+var_41C]
.text:004056D0                 mov     ebx, [ebp+var_420]
.text:004056D6                 add     esi, eax
.text:004056D8                 mov     ecx, [ebp+var_424]
.text:004056DE                 sub     esi, edi
.text:004056E0                 mov     [esp+448h+var_434], edx ; int
.text:004056E4                 dec     esi
.text:004056E5                 mov     [esp+448h+Stream], ebx ; struct tm *
.text:004056E9                 mov     [esp+448h+Size], ecx ; char *
.text:004056ED                 mov     [esp+448h+Format], esi ; int
.text:004056F1                 call    sub_40A870
.text:004056F6                 test    eax, eax
.text:004056F8                 jnz     short loc_40574A
.text:004056FA                 cmp     byte ptr [edi], 0
.text:004056FD                 jz      short loc_40574A
.text:004056FF                 mov     eax, [ebp+var_418]
.text:00405705                 mov     esi, edi
.text:00405707                 mov     ecx, [ebp+var_414]
.text:0040570D                 mov     edi, [ebp+var_414]
.text:00405713                 add     eax, eax
.text:00405715                 sub     esi, ecx
.text:00405717                 mov     [ebp+var_418], eax
.text:0040571D                 add     eax, 0Fh
.text:00405720                 and     eax, 0FFFFFFF0h
.text:00405723                 call    __alloca
.text:00405728                 mov     [esp+448h+Format], edi ; Src
.text:0040572C                 lea     ebx, [esp+448h+var_428]
.text:00405730                 lea     edi, [esi+ebx]
.text:00405733                 mov     [esp+448h+Size], esi ; Size
.text:00405737                 mov     [esp+448h+Buffer], ebx ; void *
.text:0040573A                 call    memcpy
.text:0040573F                 mov     [ebp+var_414], ebx
.text:00405745                 jmp     loc_4056B0
.text:0040574A ; ---------------------------------------------------------------------------
.text:0040574A
.text:0040574A loc_40574A:                             ; CODE XREF: sub_405490+268↑j
.text:0040574A                                         ; sub_405490+26D↑j
.text:0040574A                 add     edi, eax
.text:0040574C                 mov     byte ptr [edi], 20h ; ' '
.text:0040574F                 inc     edi
.text:00405750                 mov     byte ptr [edi], 0
.text:00405753
.text:00405753 loc_405753:                             ; CODE XREF: sub_405490+4DD↓j
.text:00405753                 mov     ebx, ds:_iob
.text:00405759                 mov     eax, [ebp+var_414]
.text:0040575F                 add     ebx, 20h ; ' '
.text:00405762                 mov     [esp+448h+Format], ebx ; Stream
.text:00405766                 mov     [esp+448h+Buffer], eax ; Buffer
.text:00405769                 call    fputs
.text:0040576E                 mov     [esp+448h+Stream], offset File ; int
.text:00405776                 mov     esi, [ebp+var_414]
.text:0040577C                 sub     edi, esi
.text:0040577E                 add     ds:dword_42C340, edi
.text:00405784                 mov     edi, [ebp+arg_0]
.text:00405787                 movzx   ecx, byte ptr [edi+76h]
.text:0040578B                 movzx   edx, cl
.text:0040578E                 test    cl, cl
.text:00405790                 mov     [esp+448h+Size], edx ; int
.text:00405794                 jz      loc_405861
.text:0040579A                 cmp     ds:byte_42C060, 0
.text:004057A1                 jz      loc_405861
.text:004057A7                 mov     ecx, [ebp+arg_0]
.text:004057AA                 movzx   eax, word ptr [ecx+74h]
.text:004057AE                 mov     esi, esi
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: sub_405490+3D8↓j
.text:004057B0                 mov     [esp+448h+Format], eax ; __int16
.text:004057B4                 mov     esi, [ebp+arg_0]
.text:004057B7                 mov     edi, [esi]
.text:004057B9                 mov     [esp+448h+Buffer], edi ; char *
.text:004057BC                 call    sub_4061C0
.text:004057C1                 mov     ecx, [ebp+arg_0]
.text:004057C4                 cmp     dword ptr [ecx+78h], 0Ah
.text:004057C8                 jz      short loc_4057EC
.text:004057CA                 mov     eax, ds:dword_42C1B0
.text:004057CF                 test    eax, eax
.text:004057D1                 jnz     short loc_4057DB
.text:004057D3
.text:004057D3 loc_4057D3:                             ; CODE XREF: sub_405490+35A↓j
.text:004057D3                                         ; sub_405490+361↓j ...
.text:004057D3                 lea     esp, [ebp-0Ch]
.text:004057D6                 pop     ebx
.text:004057D7                 pop     esi
.text:004057D8                 pop     edi
.text:004057D9                 pop     ebp
.text:004057DA                 retn
.text:004057DB ; ---------------------------------------------------------------------------
.text:004057DB
.text:004057DB loc_4057DB:                             ; CODE XREF: sub_405490+341↑j
.text:004057DB                 mov     ecx, [ebp+arg_0]
.text:004057DE                 movzx   eax, word ptr [ecx+8]
.text:004057E2
.text:004057E2 loc_4057E2:                             ; CODE XREF: sub_405490+3CF↓j
.text:004057E2                 mov     [esp+448h+Buffer], eax
.text:004057E5                 call    sub_406510
.text:004057EA                 jmp     short loc_4057D3
.text:004057EC ; ---------------------------------------------------------------------------
.text:004057EC
.text:004057EC loc_4057EC:                             ; CODE XREF: sub_405490+338↑j
.text:004057EC                 mov     eax, [ecx+70h]
.text:004057EF                 test    eax, eax
.text:004057F1                 jz      short loc_4057D3
.text:004057F3                 mov     [esp+448h+Size], 4 ; ElementCount
.text:004057FB                 mov     ebx, ds:_iob
.text:00405801                 mov     [esp+448h+Format], 1 ; ElementSize
.text:00405809                 mov     [esp+448h+Buffer], offset asc_405475 ; " -> "
.text:00405810                 add     ebx, 20h ; ' '
.text:00405813                 mov     [esp+448h+Stream], ebx ; Stream
.text:00405817                 call    fwrite
.text:0040581C                 mov     [esp+448h+Stream], 0 ; int
.text:00405824                 mov     edi, [ebp+arg_0]
.text:00405827                 add     ds:dword_42C340, 4
.text:0040582E                 movzx   esi, byte ptr [edi+76h]
.text:00405832                 dec     esi
.text:00405833                 mov     [esp+448h+Size], esi ; int
.text:00405837                 movzx   edx, word ptr [edi+74h]
.text:0040583B                 mov     [esp+448h+Format], edx ; __int16
.text:0040583F                 mov     ecx, [edi+70h]
.text:00405842                 mov     [esp+448h+Buffer], ecx ; char *
.text:00405845                 call    sub_4061C0
.text:0040584A                 mov     ebx, ds:dword_42C1B0
.text:00405850                 test    ebx, ebx
.text:00405852                 jz      loc_4057D3
.text:00405858                 mov     edi, [ebp+arg_0]
.text:0040585B                 movzx   eax, word ptr [edi+74h]
.text:0040585F                 jmp     short loc_4057E2
.text:00405861 ; ---------------------------------------------------------------------------
.text:00405861
.text:00405861 loc_405861:                             ; CODE XREF: sub_405490+304↑j
.text:00405861                                         ; sub_405490+311↑j
.text:00405861                 mov     edx, [ebp+arg_0]
.text:00405864                 movzx   eax, word ptr [edx+8]
.text:00405868                 jmp     loc_4057B0
.text:0040586D ; ---------------------------------------------------------------------------
.text:0040586D
.text:0040586D loc_40586D:                             ; CODE XREF: sub_405490+206↑j
.text:0040586D                 mov     ecx, [ebp+var_41C]
.text:00405873                 cmp     ecx, dword_42B014
.text:00405879                 jg      loc_40569C
.text:0040587F
.text:0040587F loc_40587F:                             ; CODE XREF: sub_405490+1FE↑j
.text:0040587F                 mov     bl, 1
.text:00405881                 jmp     loc_40569C
.text:00405886 ; ---------------------------------------------------------------------------
.text:00405886
.text:00405886 loc_405886:                             ; CODE XREF: sub_405490+1EA↑j
.text:00405886                 mov     ebx, [ebp+var_41C]
.text:0040588C                 cmp     dword_42B014, ebx
.text:00405892                 jge     loc_405680
.text:00405898
.text:00405898 loc_405898:                             ; CODE XREF: sub_405490+1E2↑j
.text:00405898                 mov     [esp+448h+Buffer], 0
.text:0040589F                 lea     ecx, [ebp+var_408]
.text:004058A5                 mov     [esp+448h+Format], ecx
.text:004058A9                 call    sub_419EC0
.text:004058AE                 test    eax, eax
.text:004058B0                 jnz     short loc_4058D4
.text:004058B2                 mov     ecx, [ebp+var_408]
.text:004058B8                 mov     eax, [ebp+var_404]
.text:004058BE                 mov     dword_42B010, ecx
.text:004058C4
.text:004058C4 loc_4058C4:                             ; CODE XREF: sub_405490+47B↓j
.text:004058C4                                         ; sub_405490+495↓j
.text:004058C4                 mov     dword_42B014, eax
.text:004058C9                 mov     edx, [ebp+Time]
.text:004058CF                 jmp     loc_405680
.text:004058D4 ; ---------------------------------------------------------------------------
.text:004058D4
.text:004058D4 loc_4058D4:                             ; CODE XREF: sub_405490+420↑j
.text:004058D4                 mov     [esp+448h+Format], 0
.text:004058DC                 lea     edx, [ebp+var_410]
.text:004058E2                 mov     [esp+448h+Buffer], edx
.text:004058E5                 call    sub_419E60
.text:004058EA                 test    eax, eax
.text:004058EC                 jnz     short loc_40590D
.text:004058EE                 mov     eax, [ebp+var_40C]
.text:004058F4                 mov     ecx, [ebp+var_410]
.text:004058FA                 imul    eax, 3E8h
.text:00405900                 mov     dword_42B010, ecx
.text:00405906                 add     eax, 3E7h
.text:0040590B                 jmp     short loc_4058C4
.text:0040590D ; ---------------------------------------------------------------------------
.text:0040590D
.text:0040590D loc_40590D:                             ; CODE XREF: sub_405490+45C↑j
.text:0040590D                 mov     [esp+448h+Buffer], 0 ; Time
.text:00405914                 call    time
.text:00405919                 mov     dword_42B010, eax
.text:0040591E                 mov     ecx, eax
.text:00405920                 mov     eax, 3B9AC9FFh
.text:00405925                 jmp     short loc_4058C4
.text:00405927 ; ---------------------------------------------------------------------------
.text:00405927
.text:00405927 loc_405927:                             ; CODE XREF: sub_405490+1CE↑j
.text:00405927                 mov     eax, [ebp+Time]
.text:0040592D                 lea     ebx, [ebp+var_3F8]
.text:00405933                 mov     [esp+448h+Size], ebx
.text:00405937                 cdq
.text:00405938                 mov     [esp+448h+Format], edx
.text:0040593C                 mov     [esp+448h+Buffer], eax
.text:0040593F                 call    sub_411D30
.text:00405944                 mov     esi, eax
.text:00405946                 call    sub_40A4F0
.text:0040594B                 mov     [esp+448h+Size], eax
.text:0040594F                 mov     [esp+448h+Buffer], edi ; Buffer
.text:00405952                 mov     [esp+448h+Stream], esi
.text:00405956                 mov     [esp+448h+Format], offset aS_0 ; "%*s "
.text:0040595E                 call    sprintf
.text:00405963                 mov     [esp+448h+Buffer], edi ; Str
.text:00405966                 call    strlen
.text:0040596B                 add     edi, eax
.text:0040596D                 jmp     loc_405753
.text:00405972 ; ---------------------------------------------------------------------------
.text:00405972
.text:00405972 loc_405972:                             ; CODE XREF: sub_405490+124↑j
.text:00405972                                         ; sub_405490+12F↑j
.text:00405972                 mov     ebx, ds:dword_42C0E0
.text:00405978                 lea     edx, [ebp+var_358]
.text:0040597E                 mov     esi, ds:dword_42C0F0
.text:00405984                 mov     [esp+448h+Size], edx
.text:00405988                 mov     eax, [ebp+arg_0]
.text:0040598B                 add     esi, ebx
.text:0040598D                 mov     ecx, [eax+30h]
.text:00405990                 mov     ebx, ds:dword_42C100
.text:00405996                 and     ecx, 0FFh
.text:0040599C                 mov     [esp+448h+Buffer], ecx
.text:0040599F                 sub     ebx, esi
.text:004059A1                 xor     esi, esi
.text:004059A3                 mov     [esp+448h+Format], esi
.text:004059A7                 sub     ebx, 2
.text:004059AA                 call    sub_412370
.text:004059AF                 mov     esi, eax
.text:004059B1                 lea     ecx, [ebp+var_338]
.text:004059B7                 mov     eax, [ebp+arg_0]
.text:004059BA                 mov     [esp+448h+Size], ecx
.text:004059BE                 xor     ecx, ecx
.text:004059C0                 mov     edx, [eax+30h]
.text:004059C3                 mov     [esp+448h+Format], ecx
.text:004059C7                 shr     edx, 8
.text:004059CA                 and     edx, 0FFh
.text:004059D0                 mov     [esp+448h+Buffer], edx
.text:004059D3                 call    sub_412370
.text:004059D8                 mov     [esp+448h+var_434], esi
.text:004059DC                 mov     edx, ds:dword_42C0E0
.text:004059E2                 mov     esi, ebx
.text:004059E4                 mov     [esp+448h+Buffer], edi ; Buffer
.text:004059E7                 shr     esi, 1Fh
.text:004059EA                 mov     ecx, ds:dword_42C0F0
.text:004059F0                 mov     [esp+448h+Stream], eax
.text:004059F4                 dec     esi
.text:004059F5                 and     ebx, esi
.text:004059F7                 mov     [esp+448h+var_438], ecx
.text:004059FB                 add     ebx, edx
.text:004059FD                 mov     [esp+448h+Size], ebx
.text:00405A01                 mov     [esp+448h+Format], offset aSS_0 ; "%*s, %*s "
.text:00405A09                 call    sprintf
.text:00405A0E                 mov     eax, ds:dword_42C100
.text:00405A13                 mov     ecx, edi
.text:00405A15                 add     ecx, eax
.text:00405A17                 lea     edi, [ecx+1]
.text:00405A1A                 jmp     loc_405648
.text:00405A1F ; ---------------------------------------------------------------------------
.text:00405A1F
.text:00405A1F loc_405A1F:                             ; CODE XREF: sub_405490+10E↑j
.text:00405A1F                 mov     ebx, ds:_iob
.text:00405A25                 mov     eax, [ebp+var_414]
.text:00405A2B                 add     ebx, 20h ; ' '
.text:00405A2E                 mov     [esp+448h+Format], ebx ; Stream
.text:00405A32                 mov     [esp+448h+Buffer], eax ; Buffer
.text:00405A35                 call    fputs
.text:00405A3A                 mov     edx, [ebp+var_414]
.text:00405A40                 sub     edi, edx
.text:00405A42                 add     ds:dword_42C340, edi
.text:00405A48                 cmp     byte_42B018, 0
.text:00405A4F                 jz      loc_405AFB
.text:00405A55                 cmp     ds:byte_42C160, 0
.text:00405A5C                 mov     esi, [ebp+arg_0]
.text:00405A5F                 mov     ebx, ds:dword_42C0B0
.text:00405A65                 mov     edi, [esi+24h]
.text:00405A68                 jz      loc_405D25
.text:00405A6E                 xor     esi, esi
.text:00405A70
.text:00405A70 loc_405A70:                             ; CODE XREF: sub_405490+89F↓j
.text:00405A70                 test    esi, esi
.text:00405A72                 jz      loc_405D0A
.text:00405A78                 mov     [esp+448h+Buffer], esi ; char *
.text:00405A7B                 mov     [esp+448h+Format], 0 ; char
.text:00405A83                 call    sub_40CAD0
.text:00405A88                 mov     [esp+448h+Buffer], esi ; Buffer
.text:00405A8B                 sub     ebx, eax
.text:00405A8D                 mov     edi, ds:_iob
.text:00405A93                 mov     ecx, ebx
.text:00405A95                 shr     ecx, 1Fh
.text:00405A98                 dec     ecx
.text:00405A99                 add     edi, 20h ; ' '
.text:00405A9C                 and     ebx, ecx
.text:00405A9E                 mov     [esp+448h+Format], edi ; Stream
.text:00405AA2                 call    fputs
.text:00405AA7                 mov     [esp+448h+Buffer], esi ; Str
.text:00405AAA                 call    strlen
.text:00405AAF                 lea     esi, [ebx+eax]
.text:00405AB2                 lea     esi, [esi+0]
.text:00405AB9                 lea     edi, [edi+0]
.text:00405AC0
.text:00405AC0 loc_405AC0:                             ; CODE XREF: sub_405490+658↓j
.text:00405AC0                 mov     edx, ds:_iob
.text:00405AC6                 mov     edi, [edx+24h]
.text:00405AC9                 dec     edi
.text:00405ACA                 mov     [edx+24h], edi
.text:00405ACD                 test    edi, edi
.text:00405ACF                 js      loc_405CEC
.text:00405AD5                 mov     ecx, ds:_iob
.text:00405ADB                 mov     eax, [ecx+20h]
.text:00405ADE                 mov     byte ptr [eax], 20h ; ' '
.text:00405AE1                 inc     dword ptr [ecx+20h]
.text:00405AE4
.text:00405AE4 loc_405AE4:                             ; CODE XREF: sub_405490+875↓j
.text:00405AE4                 dec     ebx
.text:00405AE5                 cmp     ebx, 0FFFFFFFFh
.text:00405AE8                 jnz     short loc_405AC0
.text:00405AEA
.text:00405AEA loc_405AEA:                             ; CODE XREF: sub_405490+890↓j
.text:00405AEA                 mov     edx, ds:dword_42C340
.text:00405AF0                 add     esi, edx
.text:00405AF2                 lea     ebx, [esi+1]
.text:00405AF5                 mov     ds:dword_42C340, ebx
.text:00405AFB
.text:00405AFB loc_405AFB:                             ; CODE XREF: sub_405490+5BF↑j
.text:00405AFB                 cmp     byte_42B019, 0
.text:00405B02                 jz      loc_405BAB
.text:00405B08                 cmp     ds:byte_42C160, 0
.text:00405B0F                 mov     esi, [ebp+arg_0]
.text:00405B12                 mov     ebx, ds:dword_42C0C0
.text:00405B18                 mov     edi, [esi+28h]
.text:00405B1B                 jz      loc_405CDD
.text:00405B21                 xor     esi, esi
.text:00405B23
.text:00405B23 loc_405B23:                             ; CODE XREF: sub_405490+857↓j
.text:00405B23                 test    esi, esi
.text:00405B25                 jz      loc_405CC2
.text:00405B2B                 mov     [esp+448h+Buffer], esi ; char *
.text:00405B2E                 mov     [esp+448h+Format], 0 ; char
.text:00405B36                 call    sub_40CAD0
.text:00405B3B                 mov     [esp+448h+Buffer], esi ; Buffer
.text:00405B3E                 sub     ebx, eax
.text:00405B40                 mov     ecx, ds:_iob
.text:00405B46                 mov     edi, ebx
.text:00405B48                 shr     edi, 1Fh
.text:00405B4B                 add     ecx, 20h ; ' '
.text:00405B4E                 mov     [esp+448h+Format], ecx ; Stream
.text:00405B52                 dec     edi
.text:00405B53                 and     ebx, edi
.text:00405B55                 call    fputs
.text:00405B5A                 mov     [esp+448h+Buffer], esi ; Str
.text:00405B5D                 call    strlen
.text:00405B62                 lea     esi, [ebx+eax]
.text:00405B65                 lea     esi, [esi+0]
.text:00405B69                 lea     edi, [edi+0]
.text:00405B70
.text:00405B70 loc_405B70:                             ; CODE XREF: sub_405490+708↓j
.text:00405B70                 mov     edx, ds:_iob
.text:00405B76                 mov     ecx, [edx+24h]
.text:00405B79                 dec     ecx
.text:00405B7A                 mov     [edx+24h], ecx
.text:00405B7D                 test    ecx, ecx
.text:00405B7F                 js      loc_405CA4
.text:00405B85                 mov     edi, ds:_iob
.text:00405B8B                 mov     eax, [edi+20h]
.text:00405B8E                 mov     byte ptr [eax], 20h ; ' '
.text:00405B91                 inc     dword ptr [edi+20h]
.text:00405B94
.text:00405B94 loc_405B94:                             ; CODE XREF: sub_405490+82D↓j
.text:00405B94                 dec     ebx
.text:00405B95                 cmp     ebx, 0FFFFFFFFh
.text:00405B98                 jnz     short loc_405B70
.text:00405B9A
.text:00405B9A loc_405B9A:                             ; CODE XREF: sub_405490+848↓j
.text:00405B9A                 mov     edx, ds:dword_42C340
.text:00405BA0                 add     esi, edx
.text:00405BA2                 lea     ebx, [esi+1]
.text:00405BA5                 mov     ds:dword_42C340, ebx
.text:00405BAB
.text:00405BAB loc_405BAB:                             ; CODE XREF: sub_405490+672↑j
.text:00405BAB                 cmp     ds:byte_42C150, 0
.text:00405BB2                 jz      loc_405C57
.text:00405BB8                 cmp     ds:byte_42C160, 0
.text:00405BBF                 mov     esi, [ebp+arg_0]
.text:00405BC2                 mov     ebx, ds:dword_42C0D0
.text:00405BC8                 mov     edi, [esi+24h]
.text:00405BCB                 jz      loc_405C95
.text:00405BD1                 xor     esi, esi
.text:00405BD3
.text:00405BD3 loc_405BD3:                             ; CODE XREF: sub_405490+80F↓j
.text:00405BD3                 test    esi, esi
.text:00405BD5                 jz      loc_405C7D
.text:00405BDB                 mov     [esp+448h+Buffer], esi ; char *
.text:00405BDE                 mov     [esp+448h+Format], 0 ; char
.text:00405BE6                 call    sub_40CAD0
.text:00405BEB                 mov     [esp+448h+Buffer], esi ; Buffer
.text:00405BEE                 sub     ebx, eax
.text:00405BF0                 mov     edi, ds:_iob
.text:00405BF6                 mov     ecx, ebx
.text:00405BF8                 shr     ecx, 1Fh
.text:00405BFB                 dec     ecx
.text:00405BFC                 add     edi, 20h ; ' '
.text:00405BFF                 and     ebx, ecx
.text:00405C01                 mov     [esp+448h+Format], edi ; Stream
.text:00405C05                 call    fputs
.text:00405C0A                 mov     [esp+448h+Buffer], esi ; Str
.text:00405C0D                 call    strlen
.text:00405C12                 lea     esi, [ebx+eax]
.text:00405C15                 lea     esi, [esi+0]
.text:00405C19                 lea     edi, [edi+0]
.text:00405C20
.text:00405C20 loc_405C20:                             ; CODE XREF: sub_405490+7B4↓j
.text:00405C20                 mov     edx, ds:_iob
.text:00405C26                 mov     edi, [edx+24h]
.text:00405C29                 dec     edi
.text:00405C2A                 mov     [edx+24h], edi
.text:00405C2D                 test    edi, edi
.text:00405C2F                 js      short loc_405C62
.text:00405C31                 mov     ecx, ds:_iob
.text:00405C37                 mov     eax, [ecx+20h]
.text:00405C3A                 mov     byte ptr [eax], 20h ; ' '
.text:00405C3D                 inc     dword ptr [ecx+20h]
.text:00405C40
.text:00405C40 loc_405C40:                             ; CODE XREF: sub_405490+7EB↓j
.text:00405C40                 dec     ebx
.text:00405C41                 cmp     ebx, 0FFFFFFFFh
.text:00405C44                 jnz     short loc_405C20
.text:00405C46
.text:00405C46 loc_405C46:                             ; CODE XREF: sub_405490+803↓j
.text:00405C46                 mov     edx, ds:dword_42C340
.text:00405C4C                 add     esi, edx
.text:00405C4E                 lea     ebx, [esi+1]
.text:00405C51                 mov     ds:dword_42C340, ebx
.text:00405C57
.text:00405C57 loc_405C57:                             ; CODE XREF: sub_405490+722↑j
.text:00405C57                 mov     edi, [ebp+var_414]
.text:00405C5D                 jmp     loc_4055A4
.text:00405C62 ; ---------------------------------------------------------------------------
.text:00405C62
.text:00405C62 loc_405C62:                             ; CODE XREF: sub_405490+79F↑j
.text:00405C62                 mov     [esp+448h+Buffer], 20h ; ' ' ; Ch
.text:00405C69                 mov     edi, ds:_iob
.text:00405C6F                 add     edi, 20h ; ' '
.text:00405C72                 mov     [esp+448h+Format], edi ; File
.text:00405C76                 call    _flsbuf
.text:00405C7B                 jmp     short loc_405C40
.text:00405C7D ; ---------------------------------------------------------------------------
.text:00405C7D
.text:00405C7D loc_405C7D:                             ; CODE XREF: sub_405490+745↑j
.text:00405C7D                 mov     [esp+448h+Size], edi
.text:00405C81                 mov     esi, ebx
.text:00405C83                 mov     [esp+448h+Format], ebx
.text:00405C87                 mov     [esp+448h+Buffer], offset aLu ; "%*lu "
.text:00405C8E                 call    printf
.text:00405C93                 jmp     short loc_405C46
.text:00405C95 ; ---------------------------------------------------------------------------
.text:00405C95
.text:00405C95 loc_405C95:                             ; CODE XREF: sub_405490+73B↑j
.text:00405C95                 mov     [esp+448h+Buffer], edi
.text:00405C98                 call    sub_411DF0
.text:00405C9D                 mov     esi, eax
.text:00405C9F                 jmp     loc_405BD3
.text:00405CA4 ; ---------------------------------------------------------------------------
.text:00405CA4
.text:00405CA4 loc_405CA4:                             ; CODE XREF: sub_405490+6EF↑j
.text:00405CA4                 mov     [esp+448h+Buffer], 20h ; ' ' ; Ch
.text:00405CAB                 mov     ecx, ds:_iob
.text:00405CB1                 add     ecx, 20h ; ' '
.text:00405CB4                 mov     [esp+448h+Format], ecx ; File
.text:00405CB8                 call    _flsbuf
.text:00405CBD                 jmp     loc_405B94
.text:00405CC2 ; ---------------------------------------------------------------------------
.text:00405CC2
.text:00405CC2 loc_405CC2:                             ; CODE XREF: sub_405490+695↑j
.text:00405CC2                 mov     [esp+448h+Size], edi
.text:00405CC6                 mov     esi, ebx
.text:00405CC8                 mov     [esp+448h+Format], ebx
.text:00405CCC                 mov     [esp+448h+Buffer], offset aLu ; "%*lu "
.text:00405CD3                 call    printf
.text:00405CD8                 jmp     loc_405B9A
.text:00405CDD ; ---------------------------------------------------------------------------
.text:00405CDD
.text:00405CDD loc_405CDD:                             ; CODE XREF: sub_405490+68B↑j
.text:00405CDD                 mov     [esp+448h+Buffer], edi
.text:00405CE0                 call    sub_411F60
.text:00405CE5                 mov     esi, eax
.text:00405CE7                 jmp     loc_405B23
.text:00405CEC ; ---------------------------------------------------------------------------
.text:00405CEC
.text:00405CEC loc_405CEC:                             ; CODE XREF: sub_405490+63F↑j
.text:00405CEC                 mov     [esp+448h+Buffer], 20h ; ' ' ; Ch
.text:00405CF3                 mov     edi, ds:_iob
.text:00405CF9                 add     edi, 20h ; ' '
.text:00405CFC                 mov     [esp+448h+Format], edi ; File
.text:00405D00                 call    _flsbuf
.text:00405D05                 jmp     loc_405AE4
.text:00405D0A ; ---------------------------------------------------------------------------
.text:00405D0A
.text:00405D0A loc_405D0A:                             ; CODE XREF: sub_405490+5E2↑j
.text:00405D0A                 mov     [esp+448h+Size], edi
.text:00405D0E                 mov     esi, ebx
.text:00405D10                 mov     [esp+448h+Format], ebx
.text:00405D14                 mov     [esp+448h+Buffer], offset aLu ; "%*lu "
.text:00405D1B                 call    printf
.text:00405D20                 jmp     loc_405AEA
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405490+5D8↑j
.text:00405D25                 mov     [esp+448h+Buffer], edi
.text:00405D28                 call    sub_411DF0
.text:00405D2D                 mov     esi, eax
.text:00405D2F                 jmp     loc_405A70
.text:00405D34 ; ---------------------------------------------------------------------------
.text:00405D34
.text:00405D34 loc_405D34:                             ; CODE XREF: sub_405490+E6↑j
.text:00405D34                 mov     [esp+448h+Size], 2 ; ElementCount
.text:00405D3C                 mov     esi, ds:_iob
.text:00405D42                 mov     [esp+448h+Format], 1 ; ElementSize
.text:00405D4A                 mov     [esp+448h+Buffer], offset asc_403BB4 ; "  "
.text:00405D51                 add     esi, 20h ; ' '
.text:00405D54                 mov     [esp+448h+Stream], esi ; Stream
.text:00405D58                 call    fwrite
.text:00405D5D                 add     ds:dword_42C340, 2
.text:00405D64                 jmp     loc_40557C
.text:00405D69 ; ---------------------------------------------------------------------------
.text:00405D69
.text:00405D69 loc_405D69:                             ; CODE XREF: sub_405490+8A↑j
.text:00405D69                 mov     [esp+448h+var_438], 200h ; int
.text:00405D71                 mov     ecx, ds:dword_42C194
.text:00405D77                 mov     edx, ds:dword_42C190
.text:00405D7D                 mov     [esp+448h+var_434], 0 ; int
.text:00405D85                 mov     ebx, ds:dword_42C180
.text:00405D8B                 mov     eax, [ebp+arg_0]
.text:00405D8E                 mov     [esp+448h+var_42C], ecx ; int
.text:00405D92                 lea     ecx, [ebp+var_2F8]
.text:00405D98                 mov     [esp+448h+Size], ecx ; Buffer
.text:00405D9C                 mov     [esp+448h+var_430], edx ; int
.text:00405DA0                 mov     [esp+448h+Stream], ebx ; int
.text:00405DA4                 mov     edx, [eax+60h]
.text:00405DA7                 mov     ebx, [eax+64h]
.text:00405DAA                 mov     [esp+448h+Buffer], edx ; int
.text:00405DAD                 mov     [esp+448h+Format], ebx ; int
.text:00405DB1                 call    sub_4126F0
.text:00405DB6                 mov     [esp+448h+Buffer], eax ; char *
.text:00405DB9                 mov     ebx, eax
.text:00405DBB                 mov     [esp+448h+Format], 0 ; char
.text:00405DC3                 call    sub_40CAD0
.text:00405DC8                 mov     edx, ds:dword_42C090
.text:00405DCE                 sub     edx, eax
.text:00405DD0                 test    edx, edx
.text:00405DD2                 jle     short loc_405DE9
.text:00405DD4                 lea     esi, [esi+0]
.text:00405DDA                 lea     edi, [edi+0]
.text:00405DE0
.text:00405DE0 loc_405DE0:                             ; CODE XREF: sub_405490+957↓j
.text:00405DE0                 mov     byte ptr [edi], 20h ; ' '
.text:00405DE3                 dec     edx
.text:00405DE4                 inc     edi
.text:00405DE5                 test    edx, edx
.text:00405DE7                 jg      short loc_405DE0
.text:00405DE9
.text:00405DE9 loc_405DE9:                             ; CODE XREF: sub_405490+942↑j
.text:00405DE9                                         ; sub_405490+962↓j
.text:00405DE9                 movzx   ecx, byte ptr [ebx]
.text:00405DEC                 inc     ebx
.text:00405DED                 mov     [edi], cl
.text:00405DEF                 inc     edi
.text:00405DF0                 test    cl, cl
.text:00405DF2                 jnz     short loc_405DE9
.text:00405DF4                 mov     byte ptr [edi-1], 20h ; ' '
.text:00405DF8                 jmp     loc_405520
.text:00405DFD ; ---------------------------------------------------------------------------
.text:00405DFD
.text:00405DFD loc_405DFD:                             ; CODE XREF: sub_405490+7D↑j
.text:00405DFD                 mov     eax, [ebp+arg_0]
.text:00405E00                 lea     edi, [ebp+var_278]
.text:00405E06                 mov     [esp+448h+Size], edi
.text:00405E0A                 mov     edx, [eax+10h]
.text:00405E0D                 mov     ebx, [eax+14h]
.text:00405E10                 mov     [esp+448h+Buffer], edx
.text:00405E13                 mov     [esp+448h+Format], ebx
.text:00405E17                 call    sub_412370
.text:00405E1C                 mov     [esp+448h+Stream], eax
.text:00405E20                 mov     edi, [ebp+var_414]
.text:00405E26                 mov     ecx, ds:dword_42C080
.text:00405E2C                 mov     [esp+448h+Format], offset aS_0 ; "%*s "
.text:00405E34                 mov     [esp+448h+Buffer], edi ; Buffer
.text:00405E37                 mov     [esp+448h+Size], ecx
.text:00405E3B                 call    sprintf
.text:00405E40                 mov     edx, [ebp+var_414]
.text:00405E46                 mov     ebx, ds:dword_42C080
.text:00405E4C                 add     edx, ebx
.text:00405E4E                 lea     edi, [edx+1]
.text:00405E51                 jmp     loc_405513
.text:00405E56 ; ---------------------------------------------------------------------------
.text:00405E56
.text:00405E56 loc_405E56:                             ; CODE XREF: sub_405490+5B↑j
.text:00405E56                 mov     edi, [ebp+arg_0]
.text:00405E59                 mov     ecx, [edi+40h]
.text:00405E5C                 mov     eax, [edi+44h]
.text:00405E5F                 mov     [ebp+Time], ecx
.text:00405E65
.text:00405E65 loc_405E65:                             ; CODE XREF: sub_405490+9EF↓j
.text:00405E65                                         ; sub_405490+A00↓j
.text:00405E65                 mov     [ebp+var_41C], eax
.text:00405E6B                 jmp     loc_405500
.text:00405E70 ; ---------------------------------------------------------------------------
.text:00405E70
.text:00405E70 loc_405E70:                             ; CODE XREF: sub_405490+52↑j
.text:00405E70                 mov     ebx, [ebp+arg_0]
.text:00405E73                 mov     eax, [ebx+48h]
.text:00405E76                 mov     [ebp+Time], eax
.text:00405E7C                 mov     eax, [ebx+4Ch]
.text:00405E7F                 jmp     short loc_405E65
.text:00405E81 ; ---------------------------------------------------------------------------
.text:00405E81
.text:00405E81 loc_405E81:                             ; CODE XREF: sub_405490+49↑j
.text:00405E81                 mov     ebx, [ebp+arg_0]
.text:00405E84                 mov     edi, [ebx+50h]
.text:00405E87                 mov     eax, [ebx+54h]
.text:00405E8A                 mov     [ebp+Time], edi
.text:00405E90                 jmp     short loc_405E65
.text:00405E90 sub_405490      endp
.text:00405E90
.text:00405E90 ; ---------------------------------------------------------------------------
.text:00405E92                 align 10h
.text:00405EA0
.text:00405EA0 ; =============== S U B R O U T I N E =======================================
.text:00405EA0
.text:00405EA0 ; Attributes: bp-based frame
.text:00405EA0
.text:00405EA0 ; int __cdecl sub_405EA0(FILE *, char *, int, int)
.text:00405EA0 sub_405EA0      proc near               ; CODE XREF: sub_403C30+2EB↑p
.text:00405EA0                                         ; sub_4061C0+7D↓p ...
.text:00405EA0
.text:00405EA0 Buffer          = dword ptr -258h
.text:00405EA0 ElementSize     = dword ptr -254h
.text:00405EA0 ElementCount    = dword ptr -250h
.text:00405EA0 Stream          = dword ptr -24Ch
.text:00405EA0 var_248         = dword ptr -248h
.text:00405EA0 var_244         = dword ptr -244h
.text:00405EA0 var_22C         = dword ptr -22Ch
.text:00405EA0 var_228         = dword ptr -228h
.text:00405EA0 SrcCh           = dword ptr -224h
.text:00405EA0 State           = mbstate_t ptr -220h
.text:00405EA0 Size            = dword ptr -218h
.text:00405EA0 arg_0           = dword ptr  8
.text:00405EA0 arg_4           = dword ptr  0Ch
.text:00405EA0 arg_8           = dword ptr  10h
.text:00405EA0 arg_C           = dword ptr  14h
.text:00405EA0
.text:00405EA0                 push    ebp
.text:00405EA1                 mov     ebp, esp
.text:00405EA3                 push    edi
.text:00405EA4                 push    esi
.text:00405EA5                 push    ebx
.text:00405EA6                 sub     esp, 24Ch
.text:00405EAC                 lea     ebx, [ebp+Size]
.text:00405EB2                 mov     [esp+258h+Stream], 0FFFFFFFFh ; int
.text:00405EBA                 mov     edi, [ebp+arg_8]
.text:00405EBD                 mov     edx, [ebp+arg_4]
.text:00405EC0                 mov     [esp+258h+ElementSize], 200h ; int
.text:00405EC8                 mov     [esp+258h+var_248], edi ; int
.text:00405ECC                 mov     [esp+258h+ElementCount], edx ; char *
.text:00405ED0                 mov     [esp+258h+Buffer], ebx ; Size
.text:00405ED3                 call    sub_40D710
.text:00405ED8                 mov     [ebp+SrcCh], ebx
.text:00405EDE                 cmp     eax, 1FFh
.text:00405EE3                 mov     esi, eax
.text:00405EE5                 ja      loc_406180
.text:00405EEB
.text:00405EEB loc_405EEB:                             ; CODE XREF: sub_405EA0+319↓j
.text:00405EEB                 cmp     ds:byte_42C260, 0
.text:00405EF2                 jz      loc_4060D2
.text:00405EF8                 mov     eax, ds:__mb_cur_max
.text:00405EFD                 cmp     dword ptr [eax], 1
.text:00405F00                 jle     loc_406070
.text:00405F06                 mov     edi, [ebp+SrcCh]
.text:00405F0C                 xor     ecx, ecx
.text:00405F0E                 mov     [ebp+var_228], ecx
.text:00405F14                 add     esi, edi
.text:00405F16                 mov     [ebp+var_22C], esi
.text:00405F1C                 mov     eax, [ebp+var_22C]
.text:00405F22                 mov     esi, edi
.text:00405F24                 cmp     edi, eax
.text:00405F26                 jnb     short loc_405F74
.text:00405F28                 nop
.text:00405F29                 lea     esi, [esi+0]
.text:00405F30
.text:00405F30 loc_405F30:                             ; CODE XREF: sub_405EA0+D2↓j
.text:00405F30                 movzx   edx, byte ptr [edi]
.text:00405F33                 movsx   eax, dl
.text:00405F36                 cmp     eax, 5Fh ; '_'
.text:00405F39                 jg      loc_406063
.text:00405F3F                 cmp     eax, 41h ; 'A'
.text:00405F42                 jge     short loc_405F62
.text:00405F44                 cmp     eax, 20h ; ' '
.text:00405F47                 jl      short loc_405FC4
.text:00405F49                 cmp     eax, 23h ; '#'
.text:00405F4C                 jle     short loc_405F62
.text:00405F4E                 sub     eax, 25h ; '%'
.text:00405F51                 cmp     eax, 1Ah
.text:00405F54                 lea     esi, [esi+0]
.text:00405F5A                 lea     edi, [edi+0]
.text:00405F60
.text:00405F60 loc_405F60:                             ; CODE XREF: sub_405EA0+1C9↓j
.text:00405F60                 ja      short loc_405FC4
.text:00405F62
.text:00405F62 loc_405F62:                             ; CODE XREF: sub_405EA0+A2↑j
.text:00405F62                                         ; sub_405EA0+AC↑j
.text:00405F62                 mov     [esi], dl
.text:00405F64                 inc     edi
.text:00405F65
.text:00405F65 loc_405F65:                             ; CODE XREF: sub_405EA0+1B3↓j
.text:00405F65                 inc     [ebp+var_228]
.text:00405F6B                 inc     esi
.text:00405F6C
.text:00405F6C loc_405F6C:                             ; CODE XREF: sub_405EA0+1A0↓j
.text:00405F6C                 cmp     edi, [ebp+var_22C]
.text:00405F72                 jb      short loc_405F30
.text:00405F74
.text:00405F74 loc_405F74:                             ; CODE XREF: sub_405EA0+86↑j
.text:00405F74                 mov     edi, [ebp+SrcCh]
.text:00405F7A                 sub     esi, edi
.text:00405F7C                 lea     esi, [esi+0]
.text:00405F80
.text:00405F80 loc_405F80:                             ; CODE XREF: sub_405EA0+216↓j
.text:00405F80                                         ; sub_405EA0+237↓j ...
.text:00405F80                 mov     edx, [ebp+arg_0]
.text:00405F83                 test    edx, edx
.text:00405F85                 jz      short loc_405FA8
.text:00405F87                 mov     [esp+258h+ElementCount], esi ; ElementCount
.text:00405F8B                 mov     eax, [ebp+arg_0]
.text:00405F8E                 mov     edi, [ebp+SrcCh]
.text:00405F94                 mov     [esp+258h+ElementSize], 1 ; ElementSize
.text:00405F9C                 mov     [esp+258h+Stream], eax ; Stream
.text:00405FA0                 mov     [esp+258h+Buffer], edi ; Buffer
.text:00405FA3                 call    fwrite
.text:00405FA8
.text:00405FA8 loc_405FA8:                             ; CODE XREF: sub_405EA0+E5↑j
.text:00405FA8                 mov     ebx, [ebp+arg_C]
.text:00405FAB                 test    ebx, ebx
.text:00405FAD                 jz      short loc_405FBA
.text:00405FAF                 mov     edx, [ebp+var_228]
.text:00405FB5                 mov     ecx, [ebp+arg_C]
.text:00405FB8                 mov     [ecx], edx
.text:00405FBA
.text:00405FBA loc_405FBA:                             ; CODE XREF: sub_405EA0+10D↑j
.text:00405FBA                 lea     esp, [ebp-0Ch]
.text:00405FBD                 mov     eax, esi
.text:00405FBF                 pop     ebx
.text:00405FC0                 pop     esi
.text:00405FC1                 pop     edi
.text:00405FC2                 pop     ebp
.text:00405FC3                 retn
.text:00405FC4 ; ---------------------------------------------------------------------------
.text:00405FC4
.text:00405FC4 loc_405FC4:                             ; CODE XREF: sub_405EA0+A7↑j
.text:00405FC4                                         ; sub_405EA0:loc_405F60↑j
.text:00405FC4                 xor     edx, edx
.text:00405FC6                 mov     [ebp+State._Wchar], edx
.text:00405FCC                 lea     ecx, [ebp+State]
.text:00405FD2                 mov     ebx, [ebp+var_22C]
.text:00405FD8                 mov     [esp+258h+Stream], ecx ; State
.text:00405FDC                 lea     edx, [ebp+State._State]
.text:00405FE2                 mov     [esp+258h+ElementSize], edi ; SrcCh
.text:00405FE6                 sub     ebx, edi
.text:00405FE8                 mov     [esp+258h+ElementCount], ebx ; SizeInBytes
.text:00405FEC                 mov     [esp+258h+Buffer], edx ; DstCh
.text:00405FEF                 call    mbrtowc
.text:00405FF4                 cmp     eax, 0FFFFFFFFh
.text:00405FF7                 mov     ebx, eax
.text:00405FF9                 jz      short loc_406060
.text:00405FFB                 cmp     eax, 0FFFFFFFEh
.text:00405FFE                 jz      short loc_406058
.text:00406000                 test    eax, eax
.text:00406002                 jnz     short loc_406009
.text:00406004                 mov     ebx, 1
.text:00406009
.text:00406009 loc_406009:                             ; CODE XREF: sub_405EA0+162↑j
.text:00406009                 movzx   ecx, [ebp+State._State]
.text:00406010                 mov     [esp+258h+Buffer], ecx
.text:00406013                 call    sub_419D10
.text:00406018                 test    eax, eax
.text:0040601A                 mov     edx, eax
.text:0040601C                 js      short loc_406045
.text:0040601E                 test    ebx, ebx
.text:00406020                 jz      short loc_40603A
.text:00406022                 lea     esi, [esi+0]
.text:00406029                 lea     edi, [edi+0]
.text:00406030
.text:00406030 loc_406030:                             ; CODE XREF: sub_405EA0+198↓j
.text:00406030                 movzx   ecx, byte ptr [edi]
.text:00406033                 inc     edi
.text:00406034                 mov     [esi], cl
.text:00406036                 inc     esi
.text:00406037                 dec     ebx
.text:00406038                 jnz     short loc_406030
.text:0040603A
.text:0040603A loc_40603A:                             ; CODE XREF: sub_405EA0+180↑j
.text:0040603A                 add     [ebp+var_228], edx
.text:00406040                 jmp     loc_405F6C
.text:00406045 ; ---------------------------------------------------------------------------
.text:00406045
.text:00406045 loc_406045:                             ; CODE XREF: sub_405EA0+17C↑j
.text:00406045                 add     edi, ebx
.text:00406047                 mov     esi, esi
.text:00406049                 lea     edi, [edi+0]
.text:00406050
.text:00406050 loc_406050:                             ; CODE XREF: sub_405EA0+1BE↓j
.text:00406050                                         ; sub_405EA0+1C1↓j
.text:00406050                 mov     byte ptr [esi], 3Fh ; '?'
.text:00406053                 jmp     loc_405F65
.text:00406058 ; ---------------------------------------------------------------------------
.text:00406058
.text:00406058 loc_406058:                             ; CODE XREF: sub_405EA0+15E↑j
.text:00406058                 mov     edi, [ebp+var_22C]
.text:0040605E                 jmp     short loc_406050
.text:00406060 ; ---------------------------------------------------------------------------
.text:00406060
.text:00406060 loc_406060:                             ; CODE XREF: sub_405EA0+159↑j
.text:00406060                 inc     edi
.text:00406061                 jmp     short loc_406050
.text:00406063 ; ---------------------------------------------------------------------------
.text:00406063
.text:00406063 loc_406063:                             ; CODE XREF: sub_405EA0+99↑j
.text:00406063                 sub     eax, 61h ; 'a'
.text:00406066                 cmp     eax, 1Dh
.text:00406069                 jmp     loc_405F60
.text:00406069 ; ---------------------------------------------------------------------------
.text:0040606E                 align 10h
.text:00406070
.text:00406070 loc_406070:                             ; CODE XREF: sub_405EA0+60↑j
.text:00406070                 mov     ebx, [ebp+SrcCh]
.text:00406076                 mov     edi, ebx
.text:00406078                 add     edi, esi
.text:0040607A                 cmp     ebx, edi
.text:0040607C                 jnb     short loc_4060B0
.text:0040607E                 mov     esi, esi
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: sub_405EA0+209↓j
.text:00406080                 cmp     dword ptr [eax], 1
.text:00406083                 movzx   edx, byte ptr [ebx]
.text:00406086                 jz      short loc_4060C0
.text:00406088                 mov     [esp+258h+ElementSize], 157h ; Type
.text:00406090                 mov     [esp+258h+Buffer], edx ; C
.text:00406093                 call    _isctype
.text:00406098
.text:00406098 loc_406098:                             ; CODE XREF: sub_405EA0+230↓j
.text:00406098                 test    eax, eax
.text:0040609A                 jnz     short loc_40609F
.text:0040609C                 mov     byte ptr [ebx], 3Fh ; '?'
.text:0040609F
.text:0040609F loc_40609F:                             ; CODE XREF: sub_405EA0+1FA↑j
.text:0040609F                 inc     ebx
.text:004060A0                 cmp     ebx, edi
.text:004060A2                 jnb     short loc_4060B0
.text:004060A4                 mov     eax, ds:__mb_cur_max
.text:004060A9                 jmp     short loc_406080
.text:004060A9 ; ---------------------------------------------------------------------------
.text:004060AB                 align 10h
.text:004060B0
.text:004060B0 loc_4060B0:                             ; CODE XREF: sub_405EA0+1DC↑j
.text:004060B0                                         ; sub_405EA0+202↑j
.text:004060B0                 mov     [ebp+var_228], esi
.text:004060B6                 jmp     loc_405F80
.text:004060B6 ; ---------------------------------------------------------------------------
.text:004060BB                 align 10h
.text:004060C0
.text:004060C0 loc_4060C0:                             ; CODE XREF: sub_405EA0+1E6↑j
.text:004060C0                 mov     eax, ds:_pctype
.text:004060C5                 mov     ecx, [eax]
.text:004060C7                 movzx   eax, word ptr [ecx+edx*2]
.text:004060CB                 and     eax, 157h
.text:004060D0                 jmp     short loc_406098
.text:004060D2 ; ---------------------------------------------------------------------------
.text:004060D2
.text:004060D2 loc_4060D2:                             ; CODE XREF: sub_405EA0+52↑j
.text:004060D2                 mov     eax, [ebp+arg_C]
.text:004060D5                 test    eax, eax
.text:004060D7                 jz      loc_405F80
.text:004060DD                 mov     eax, ds:__mb_cur_max
.text:004060E2                 cmp     dword ptr [eax], 1
.text:004060E5                 jg      short loc_406154
.text:004060E7                 mov     ebx, [ebp+SrcCh]
.text:004060ED                 xor     ecx, ecx
.text:004060EF                 mov     [ebp+var_228], ecx
.text:004060F5                 mov     edi, ebx
.text:004060F7                 add     edi, esi
.text:004060F9                 cmp     ebx, edi
.text:004060FB                 jnb     loc_405F80
.text:00406101                 jmp     short loc_406110
.text:00406101 ; ---------------------------------------------------------------------------
.text:00406103                 align 10h
.text:00406110
.text:00406110 loc_406110:                             ; CODE XREF: sub_405EA0+261↑j
.text:00406110                                         ; sub_405EA0+2A0↓j
.text:00406110                 cmp     dword ptr [eax], 1
.text:00406113                 movzx   edx, byte ptr [ebx]
.text:00406116                 jz      short loc_406142
.text:00406118                 mov     [esp+258h+ElementSize], 157h ; Type
.text:00406120                 mov     [esp+258h+Buffer], edx ; C
.text:00406123                 call    _isctype
.text:00406128
.text:00406128 loc_406128:                             ; CODE XREF: sub_405EA0+2B2↓j
.text:00406128                 test    eax, eax
.text:0040612A                 jz      short loc_406132
.text:0040612C                 inc     [ebp+var_228]
.text:00406132
.text:00406132 loc_406132:                             ; CODE XREF: sub_405EA0+28A↑j
.text:00406132                 inc     ebx
.text:00406133                 cmp     ebx, edi
.text:00406135                 jnb     loc_405F80
.text:0040613B                 mov     eax, ds:__mb_cur_max
.text:00406140                 jmp     short loc_406110
.text:00406142 ; ---------------------------------------------------------------------------
.text:00406142
.text:00406142 loc_406142:                             ; CODE XREF: sub_405EA0+276↑j
.text:00406142                 mov     eax, ds:_pctype
.text:00406147                 mov     ecx, [eax]
.text:00406149                 movzx   eax, word ptr [ecx+edx*2]
.text:0040614D                 and     eax, 157h
.text:00406152                 jmp     short loc_406128
.text:00406154 ; ---------------------------------------------------------------------------
.text:00406154
.text:00406154 loc_406154:                             ; CODE XREF: sub_405EA0+245↑j
.text:00406154                 mov     [esp+258h+ElementCount], 0 ; char
.text:0040615C                 mov     ebx, [ebp+SrcCh]
.text:00406162                 mov     [esp+258h+ElementSize], esi ; int
.text:00406166                 mov     [esp+258h+Buffer], ebx ; char *
.text:00406169                 call    sub_40C8F0
.text:0040616E                 mov     [ebp+var_228], eax
.text:00406174                 jmp     loc_405F80
.text:00406174 ; ---------------------------------------------------------------------------
.text:00406179                 align 10h
.text:00406180
.text:00406180 loc_406180:                             ; CODE XREF: sub_405EA0+45↑j
.text:00406180                 lea     ebx, [eax+10h]
.text:00406183                 mov     edx, [ebp+arg_4]
.text:00406186                 and     ebx, 0FFFFFFF0h
.text:00406189                 lea     ecx, [eax+1]
.text:0040618C                 mov     eax, ebx
.text:0040618E                 call    __alloca
.text:00406193                 mov     [esp+258h+var_248], edi ; int
.text:00406197                 lea     ebx, [esp+258h+var_244]
.text:0040619B                 mov     [ebp+SrcCh], ebx
.text:004061A1                 mov     [esp+258h+Stream], 0FFFFFFFFh ; int
.text:004061A9                 mov     [esp+258h+ElementCount], edx ; char *
.text:004061AD                 mov     [esp+258h+ElementSize], ecx ; int
.text:004061B1                 mov     [esp+258h+Buffer], ebx ; int
.text:004061B4                 call    sub_40D710
.text:004061B9                 jmp     loc_405EEB
.text:004061B9 sub_405EA0      endp
.text:004061B9
.text:004061B9 ; ---------------------------------------------------------------------------
.text:004061BE                 align 10h
.text:004061C0
.text:004061C0 ; =============== S U B R O U T I N E =======================================
.text:004061C0
.text:004061C0
.text:004061C0 ; int __cdecl sub_4061C0(char *, __int16, int, int)
.text:004061C0 sub_4061C0      proc near               ; CODE XREF: sub_405490+32C↑p
.text:004061C0                                         ; sub_405490+3B5↑p ...
.text:004061C0
.text:004061C0 Stream          = dword ptr -1Ch
.text:004061C0 Src             = dword ptr -18h
.text:004061C0 Size            = dword ptr -14h
.text:004061C0 var_10          = dword ptr -10h
.text:004061C0 arg_0           = dword ptr  4
.text:004061C0 arg_4           = word ptr  8
.text:004061C0 arg_8           = dword ptr  0Ch
.text:004061C0 arg_C           = dword ptr  10h
.text:004061C0
.text:004061C0                 push    esi
.text:004061C1                 push    ebx
.text:004061C2                 sub     esp, 14h
.text:004061C5                 mov     esi, [esp+1Ch+arg_0]
.text:004061C9                 cmp     ds:byte_42C1C0, 0
.text:004061D0                 mov     edx, [esp+1Ch+arg_8]
.text:004061D4                 mov     ebx, [esp+1Ch+arg_C]
.text:004061D8                 movzx   eax, [esp+1Ch+arg_4]
.text:004061DD                 jnz     loc_406350
.text:004061E3
.text:004061E3 loc_4061E3:                             ; CODE XREF: sub_4061C0+1A0↓j
.text:004061E3                 test    ebx, ebx
.text:004061E5                 jz      short loc_40621B
.text:004061E7                 cmp     ds:byte_42C1A0, 0
.text:004061EE                 jz      short loc_40621B
.text:004061F0                 mov     edx, [ebx+0Ch]
.text:004061F3                 lea     ecx, [edx+4]
.text:004061F6                 cmp     ecx, [ebx+10h]
.text:004061F9                 ja      loc_406333
.text:004061FF
.text:004061FF loc_4061FF:                             ; CODE XREF: sub_4061C0+186↓j
.text:004061FF                 mov     [esp+1Ch+Size], 4 ; Size
.text:00406207                 mov     [esp+1Ch+Src], offset dword_42C340 ; Src
.text:0040620F                 mov     [esp+1Ch+Stream], edx ; void *
.text:00406212                 call    memcpy
.text:00406217                 add     dword ptr [ebx+0Ch], 4
.text:0040621B
.text:0040621B loc_40621B:                             ; CODE XREF: sub_4061C0+25↑j
.text:0040621B                                         ; sub_4061C0+2E↑j
.text:0040621B                 mov     [esp+1Ch+var_10], 0 ; int
.text:00406223                 mov     edx, ds:_iob
.text:00406229                 mov     ecx, ds:dword_42C270
.text:0040622F                 mov     [esp+1Ch+Src], esi ; char *
.text:00406233                 add     edx, 20h ; ' '
.text:00406236                 mov     [esp+1Ch+Size], ecx ; int
.text:0040623A                 mov     [esp+1Ch+Stream], edx ; FILE *
.text:0040623D                 call    sub_405EA0
.text:00406242                 add     ds:dword_42C340, eax
.text:00406248                 test    ebx, ebx
.text:0040624A                 jz      short loc_406280
.text:0040624C                 cmp     ds:byte_42C1A0, 0
.text:00406253                 jz      short loc_406280
.text:00406255                 mov     edx, [ebx+0Ch]
.text:00406258                 lea     esi, [edx+4]
.text:0040625B                 cmp     esi, [ebx+10h]
.text:0040625E                 ja      loc_40631B
.text:00406264
.text:00406264 loc_406264:                             ; CODE XREF: sub_4061C0+16E↓j
.text:00406264                 mov     [esp+1Ch+Size], 4 ; Size
.text:0040626C                 mov     [esp+1Ch+Src], offset dword_42C340 ; Src
.text:00406274                 mov     [esp+1Ch+Stream], edx ; void *
.text:00406277                 call    memcpy
.text:0040627C                 add     dword ptr [ebx+0Ch], 4
.text:00406280
.text:00406280 loc_406280:                             ; CODE XREF: sub_4061C0+8A↑j
.text:00406280                                         ; sub_4061C0+93↑j
.text:00406280                 cmp     ds:byte_42C1C0, 0
.text:00406287                 jz      loc_406315
.text:0040628D                 mov     eax, ds:Signal
.text:00406292                 mov     ebx, ds:dword_42C300
.text:00406298                 or      eax, ebx
.text:0040629A                 jnz     short loc_4062A6
.text:0040629C
.text:0040629C loc_40629C:                             ; CODE XREF: sub_4061C0+141↓j
.text:0040629C                 add     esp, 14h
.text:0040629F                 pop     ebx
.text:004062A0                 pop     esi
.text:004062A1                 jmp     sub_406370
.text:004062A6 ; ---------------------------------------------------------------------------
.text:004062A6
.text:004062A6 loc_4062A6:                             ; CODE XREF: sub_4061C0+DA↑j
.text:004062A6                                         ; sub_4061C0+13F↓j
.text:004062A6                 mov     [esp+1Ch+Stream], offset unk_42B030
.text:004062AD                 call    sub_406750
.text:004062B2                 mov     [esp+1Ch+Stream], offset unk_42B038
.text:004062B9                 call    sub_406750
.text:004062BE                 mov     edx, ds:_iob
.text:004062C4                 add     edx, 20h ; ' '
.text:004062C7                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004062CA                 call    fflush
.text:004062CF                 mov     ebx, ds:Signal
.text:004062D5                 mov     eax, ds:dword_42C300
.text:004062DA                 test    eax, eax
.text:004062DC                 jz      short loc_406303
.text:004062DE                 dec     eax
.text:004062DF                 mov     ebx, 0Fh
.text:004062E4                 mov     ds:dword_42C300, eax
.text:004062E9
.text:004062E9 loc_4062E9:                             ; CODE XREF: sub_4061C0+153↓j
.text:004062E9                 mov     [esp+1Ch+Stream], ebx ; Signal
.text:004062EC                 call    raise
.text:004062F1                 mov     esi, ds:Signal
.text:004062F7                 mov     ecx, ds:dword_42C300
.text:004062FD                 or      esi, ecx
.text:004062FF                 jnz     short loc_4062A6
.text:00406301                 jmp     short loc_40629C
.text:00406303 ; ---------------------------------------------------------------------------
.text:00406303
.text:00406303 loc_406303:                             ; CODE XREF: sub_4061C0+11C↑j
.text:00406303                 mov     [esp+1Ch+Src], 0 ; Function
.text:0040630B                 mov     [esp+1Ch+Stream], ebx ; Signal
.text:0040630E                 call    signal
.text:00406313                 jmp     short loc_4062E9
.text:00406315 ; ---------------------------------------------------------------------------
.text:00406315
.text:00406315 loc_406315:                             ; CODE XREF: sub_4061C0+C7↑j
.text:00406315                 add     esp, 14h
.text:00406318                 pop     ebx
.text:00406319                 pop     esi
.text:0040631A                 retn
.text:0040631B ; ---------------------------------------------------------------------------
.text:0040631B
.text:0040631B loc_40631B:                             ; CODE XREF: sub_4061C0+9E↑j
.text:0040631B                 mov     [esp+1Ch+Src], 4
.text:00406323                 mov     [esp+1Ch+Stream], ebx
.text:00406326                 call    sub_427730
.text:0040632B                 mov     edx, [ebx+0Ch]
.text:0040632E                 jmp     loc_406264
.text:00406333 ; ---------------------------------------------------------------------------
.text:00406333
.text:00406333 loc_406333:                             ; CODE XREF: sub_4061C0+39↑j
.text:00406333                 mov     [esp+1Ch+Src], 4
.text:0040633B                 mov     [esp+1Ch+Stream], ebx
.text:0040633E                 call    sub_427730
.text:00406343                 mov     edx, [ebx+0Ch]
.text:00406346                 jmp     loc_4061FF
.text:00406346 ; ---------------------------------------------------------------------------
.text:0040634B                 align 10h
.text:00406350
.text:00406350 loc_406350:                             ; CODE XREF: sub_4061C0+1D↑j
.text:00406350                 mov     [esp+1Ch+Size], edx ; int
.text:00406354                 mov     [esp+1Ch+Src], eax ; __int16
.text:00406358                 mov     [esp+1Ch+Stream], esi ; char *
.text:0040635B                 call    sub_4065C0
.text:00406360                 jmp     loc_4061E3
.text:00406360 sub_4061C0      endp
.text:00406360
.text:00406360 ; ---------------------------------------------------------------------------
.text:00406365                 align 10h
.text:00406370
.text:00406370 ; =============== S U B R O U T I N E =======================================
.text:00406370
.text:00406370
.text:00406370 sub_406370      proc near               ; CODE XREF: sub_401B10:loc_4022B1↑p
.text:00406370                                         ; sub_4061C0+E1↑j
.text:00406370
.text:00406370 var_C           = dword ptr -0Ch
.text:00406370
.text:00406370                 sub     esp, 0Ch
.text:00406373                 mov     edx, dword_42B044
.text:00406379                 test    edx, edx
.text:0040637B                 jz      short loc_406390
.text:0040637D                 mov     [esp+0Ch+var_C], offset unk_42B040
.text:00406384
.text:00406384 loc_406384:                             ; CODE XREF: sub_406370+3F↓j
.text:00406384                 call    sub_406750
.text:00406389                 add     esp, 0Ch
.text:0040638C                 retn
.text:0040638C ; ---------------------------------------------------------------------------
.text:0040638D                 align 10h
.text:00406390
.text:00406390 loc_406390:                             ; CODE XREF: sub_406370+B↑j
.text:00406390                 mov     [esp+0Ch+var_C], offset unk_42B030
.text:00406397                 call    sub_406750
.text:0040639C                 mov     [esp+0Ch+var_C], offset unk_42B048
.text:004063A3                 call    sub_406750
.text:004063A8                 mov     [esp+0Ch+var_C], offset unk_42B038
.text:004063AF                 jmp     short loc_406384
.text:004063AF sub_406370      endp
.text:004063AF
.text:004063B1 ; ---------------------------------------------------------------------------
.text:004063B1                 jmp     short sub_4063C0
.text:004063B1 ; ---------------------------------------------------------------------------
.text:004063B3                 align 10h
.text:004063C0
.text:004063C0 ; =============== S U B R O U T I N E =======================================
.text:004063C0
.text:004063C0
.text:004063C0 sub_4063C0      proc near               ; CODE XREF: sub_4051F0+57↑p
.text:004063C0                                         ; .text:004063B1↑j ...
.text:004063C0
.text:004063C0 Format          = dword ptr -0ACh
.text:004063C0 var_A8          = word ptr -0A8h
.text:004063C0 Buffer          = dword ptr -0A4h
.text:004063C0 var_A0          = dword ptr -0A0h
.text:004063C0 var_9C          = dword ptr -9Ch
.text:004063C0 var_98          = dword ptr -98h
.text:004063C0 var_94          = dword ptr -94h
.text:004063C0 var_90          = dword ptr -90h
.text:004063C0 var_8C          = byte ptr -8Ch
.text:004063C0 arg_0           = dword ptr  4
.text:004063C0
.text:004063C0                 push    ebx
.text:004063C1                 sub     esp, 0A8h
.text:004063C7                 mov     ebx, [esp+0ACh+arg_0]
.text:004063CE                 cmp     ds:byte_42C1F0, 0
.text:004063D5                 jnz     loc_4064C0
.text:004063DB
.text:004063DB loc_4063DB:                             ; CODE XREF: sub_4063C0+142↓j
.text:004063DB                 cmp     ds:byte_42C170, 0
.text:004063E2                 jnz     short loc_406446
.text:004063E4
.text:004063E4 loc_4063E4:                             ; CODE XREF: sub_4063C0+F6↓j
.text:004063E4                 mov     [esp+0ACh+var_A0], 0 ; int
.text:004063EC                 movzx   ecx, byte ptr [ebx+76h]
.text:004063F0                 movzx   edx, cl
.text:004063F3                 test    cl, cl
.text:004063F5                 mov     [esp+0ACh+Buffer], edx ; int
.text:004063F9                 jz      short loc_406440
.text:004063FB                 cmp     ds:byte_42C060, 0
.text:00406402                 jz      short loc_406440
.text:00406404                 movzx   eax, word ptr [ebx+74h]
.text:00406408                 nop
.text:00406409                 lea     esi, [esi+0]
.text:00406410
.text:00406410 loc_406410:                             ; CODE XREF: sub_4063C0+84↓j
.text:00406410                 mov     dword ptr [esp+0ACh+var_A8], eax ; __int16
.text:00406414                 mov     edx, [ebx]
.text:00406416                 mov     [esp+0ACh+Format], edx ; char *
.text:00406419                 call    sub_4061C0
.text:0040641E                 mov     ecx, ds:dword_42C1B0
.text:00406424                 test    ecx, ecx
.text:00406426                 jnz     short loc_406430
.text:00406428
.text:00406428 loc_406428:                             ; CODE XREF: sub_4063C0+7C↓j
.text:00406428                 add     esp, 0A8h
.text:0040642E                 pop     ebx
.text:0040642F                 retn
.text:00406430 ; ---------------------------------------------------------------------------
.text:00406430
.text:00406430 loc_406430:                             ; CODE XREF: sub_4063C0+66↑j
.text:00406430                 movzx   ecx, word ptr [ebx+8]
.text:00406434                 mov     [esp+0ACh+Format], ecx
.text:00406437                 call    sub_406510
.text:0040643C                 jmp     short loc_406428
.text:0040643C ; ---------------------------------------------------------------------------
.text:0040643E                 align 10h
.text:00406440
.text:00406440 loc_406440:                             ; CODE XREF: sub_4063C0+39↑j
.text:00406440                                         ; sub_4063C0+42↑j
.text:00406440                 movzx   eax, word ptr [ebx+8]
.text:00406444                 jmp     short loc_406410
.text:00406446 ; ---------------------------------------------------------------------------
.text:00406446
.text:00406446 loc_406446:                             ; CODE XREF: sub_4063C0+22↑j
.text:00406446                 mov     [esp+0ACh+var_9C], 200h ; int
.text:0040644E                 mov     edx, ds:dword_42C190
.text:00406454                 mov     ecx, ds:dword_42C194
.text:0040645A                 mov     [esp+0ACh+var_98], 0 ; int
.text:00406462                 mov     [esp+0ACh+var_94], edx ; int
.text:00406466                 mov     edx, ds:dword_42C180
.text:0040646C                 mov     [esp+0ACh+var_90], ecx ; int
.text:00406470                 lea     ecx, [esp+0ACh+var_8C]
.text:00406474                 mov     [esp+0ACh+var_A0], edx ; int
.text:00406478                 mov     [esp+0ACh+Buffer], ecx ; Buffer
.text:0040647C                 mov     ecx, [ebx+64h]
.text:0040647F                 mov     edx, [ebx+60h]
.text:00406482                 mov     dword ptr [esp+0ACh+var_A8], ecx ; int
.text:00406486                 mov     [esp+0ACh+Format], edx ; int
.text:00406489                 call    sub_4126F0
.text:0040648E                 mov     [esp+0ACh+Buffer], eax
.text:00406492                 xor     ecx, ecx
.text:00406494                 mov     eax, ds:dword_42C090
.text:00406499                 cmp     ds:dword_42C110, 4
.text:004064A0                 mov     [esp+0ACh+Format], offset aS_0 ; "%*s "
.text:004064A7                 setz    cl
.text:004064AA                 dec     ecx
.text:004064AB                 and     ecx, eax
.text:004064AD                 mov     dword ptr [esp+0ACh+var_A8], ecx
.text:004064B1                 call    printf
.text:004064B6                 jmp     loc_4063E4
.text:004064B6 ; ---------------------------------------------------------------------------
.text:004064BB                 align 10h
.text:004064C0
.text:004064C0 loc_4064C0:                             ; CODE XREF: sub_4063C0+15↑j
.text:004064C0                 lea     ecx, [esp+0ACh+var_8C]
.text:004064C4                 mov     [esp+0ACh+Buffer], ecx
.text:004064C8                 mov     edx, [ebx+10h]
.text:004064CB                 mov     ecx, [ebx+14h]
.text:004064CE                 mov     [esp+0ACh+Format], edx
.text:004064D1                 mov     dword ptr [esp+0ACh+var_A8], ecx
.text:004064D5                 call    sub_412370
.text:004064DA                 mov     [esp+0ACh+Buffer], eax
.text:004064DE                 xor     edx, edx
.text:004064E0                 mov     eax, ds:dword_42C080
.text:004064E5                 cmp     ds:dword_42C110, 4
.text:004064EC                 mov     [esp+0ACh+Format], offset aS_0 ; "%*s "
.text:004064F3                 setz    dl
.text:004064F6                 dec     edx
.text:004064F7                 and     edx, eax
.text:004064F9                 mov     dword ptr [esp+0ACh+var_A8], edx
.text:004064FD                 call    printf
.text:00406502                 jmp     loc_4063DB
.text:00406502 sub_4063C0      endp
.text:00406502
.text:00406502 ; ---------------------------------------------------------------------------
.text:00406507                 align 10h
.text:00406510
.text:00406510 ; =============== S U B R O U T I N E =======================================
.text:00406510
.text:00406510
.text:00406510 sub_406510      proc near               ; CODE XREF: sub_405490+355↑p
.text:00406510                                         ; sub_4063C0+77↑p
.text:00406510
.text:00406510 var_C           = dword ptr -0Ch
.text:00406510 File            = dword ptr -8
.text:00406510 arg_0           = word ptr  4
.text:00406510
.text:00406510                 sub     esp, 0Ch
.text:00406513                 movzx   edx, [esp+0Ch+arg_0]
.text:00406518                 mov     eax, edx
.text:0040651A                 and     eax, 0F000h
.text:0040651F                 cmp     eax, 8000h
.text:00406524                 jz      short loc_4065A0
.text:00406526                 cmp     eax, 4000h
.text:0040652B                 mov     cl, 2Fh ; '/'
.text:0040652D                 jz      short loc_406560
.text:0040652F                 cmp     eax, 0A000h
.text:00406534                 mov     cl, 40h ; '@'
.text:00406536                 jz      short loc_406560
.text:00406538                 cmp     eax, 1000h
.text:0040653D                 mov     cl, 7Ch ; '|'
.text:0040653F                 jz      short loc_406560
.text:00406541                 cmp     eax, 0C000h
.text:00406546                 jz      short loc_406554
.text:00406548                 nop
.text:00406549                 lea     esi, [esi+0]
.text:00406550
.text:00406550 loc_406550:                             ; CODE XREF: sub_406510+73↓j
.text:00406550                                         ; sub_406510+97↓j ...
.text:00406550                 add     esp, 0Ch
.text:00406553                 retn
.text:00406554 ; ---------------------------------------------------------------------------
.text:00406554
.text:00406554 loc_406554:                             ; CODE XREF: sub_406510+36↑j
.text:00406554                 mov     cl, 3Dh ; '='
.text:00406556                 lea     esi, [esi+0]
.text:00406559                 lea     edi, [edi+0]
.text:00406560
.text:00406560 loc_406560:                             ; CODE XREF: sub_406510+1D↑j
.text:00406560                                         ; sub_406510+26↑j ...
.text:00406560                 mov     eax, ds:_iob
.text:00406565                 mov     edx, [eax+24h]
.text:00406568                 dec     edx
.text:00406569                 mov     [eax+24h], edx
.text:0040656C                 test    edx, edx
.text:0040656E                 js      short loc_406585
.text:00406570                 mov     eax, ds:_iob
.text:00406575                 mov     edx, [eax+20h]
.text:00406578                 mov     [edx], cl
.text:0040657A                 inc     dword ptr [eax+20h]
.text:0040657D
.text:0040657D loc_40657D:                             ; CODE XREF: sub_406510+8D↓j
.text:0040657D                 inc     ds:dword_42C340
.text:00406583                 jmp     short loc_406550
.text:00406585 ; ---------------------------------------------------------------------------
.text:00406585
.text:00406585 loc_406585:                             ; CODE XREF: sub_406510+5E↑j
.text:00406585                 mov     edx, ds:_iob
.text:0040658B                 add     edx, 20h ; ' '
.text:0040658E                 mov     [esp+0Ch+File], edx ; File
.text:00406592                 movsx   edx, cl
.text:00406595                 mov     [esp+0Ch+var_C], edx ; Ch
.text:00406598                 call    _flsbuf
.text:0040659D                 jmp     short loc_40657D
.text:0040659D ; ---------------------------------------------------------------------------
.text:0040659F                 align 10h
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406510+14↑j
.text:004065A0                 cmp     ds:dword_42C1B0, 1
.text:004065A7                 jnz     short loc_406550
.text:004065A9                 test    dl, 49h
.text:004065AC                 mov     cl, 2Ah ; '*'
.text:004065AE                 jnz     short loc_406560
.text:004065B0                 jmp     short loc_406550
.text:004065B0 sub_406510      endp
.text:004065B0
.text:004065B0 ; ---------------------------------------------------------------------------
.text:004065B2                 align 10h
.text:004065C0
.text:004065C0 ; =============== S U B R O U T I N E =======================================
.text:004065C0
.text:004065C0
.text:004065C0 ; int __cdecl sub_4065C0(char *, __int16, int)
.text:004065C0 sub_4065C0      proc near               ; CODE XREF: sub_4061C0+19B↑p
.text:004065C0
.text:004065C0 Str             = dword ptr -1Ch
.text:004065C0 Str2            = dword ptr -18h
.text:004065C0 MaxCount        = dword ptr -14h
.text:004065C0 arg_0           = dword ptr  4
.text:004065C0 arg_4           = word ptr  8
.text:004065C0 arg_8           = dword ptr  0Ch
.text:004065C0
.text:004065C0                 push    ebp
.text:004065C1                 push    edi
.text:004065C2                 push    esi
.text:004065C3                 mov     esi, 4
.text:004065C8                 push    ebx
.text:004065C9                 sub     esp, 0Ch
.text:004065CC                 mov     edx, [esp+1Ch+arg_8]
.text:004065D0                 movzx   ecx, [esp+1Ch+arg_4]
.text:004065D5                 mov     ebp, [esp+1Ch+arg_0]
.text:004065D9                 cmp     edx, 0FFFFFFFFh
.text:004065DC                 jz      loc_406730
.text:004065E2
.text:004065E2 loc_4065E2:                             ; CODE XREF: sub_4065C0+177↓j
.text:004065E2                 mov     eax, ecx
.text:004065E4                 and     eax, 0F000h
.text:004065E9                 cmp     eax, 4000h
.text:004065EE                 jz      loc_406721
.text:004065F4                 cmp     eax, 0A000h
.text:004065F9                 jz      loc_406700
.text:004065FF                 cmp     eax, 1000h
.text:00406604                 jz      loc_4066F0
.text:0040660A                 cmp     eax, 0C000h
.text:0040660F                 jz      loc_4066E6
.text:00406615                 cmp     eax, 6000h
.text:0040661A                 jz      loc_4066DC
.text:00406620                 cmp     eax, 2000h
.text:00406625                 jz      loc_4066D2
.text:0040662B                 test    cl, 49h
.text:0040662E                 jz      short loc_406640
.text:00406630                 mov     esi, 0Dh
.text:00406635                 lea     esi, [esi+0]
.text:00406639                 lea     edi, [edi+0]
.text:00406640
.text:00406640 loc_406640:                             ; CODE XREF: sub_4065C0+6E↑j
.text:00406640                                         ; sub_4065C0+117↓j ...
.text:00406640                 xor     ebx, ebx
.text:00406642                 cmp     esi, 4
.text:00406645                 jz      short loc_406680
.text:00406647
.text:00406647 loc_406647:                             ; CODE XREF: sub_4065C0+D4↓j
.text:00406647                                         ; sub_4065C0+ED↓j ...
.text:00406647                 mov     [esp+1Ch+Str], offset unk_42B030
.text:0040664E                 call    sub_406750
.text:00406653                 test    ebx, ebx
.text:00406655                 lea     eax, ds:42B030h[esi*8]
.text:0040665C                 jz      short loc_406661
.text:0040665E                 lea     eax, [ebx+8]
.text:00406661
.text:00406661 loc_406661:                             ; CODE XREF: sub_4065C0+9C↑j
.text:00406661                 mov     [esp+1Ch+Str], eax
.text:00406664                 call    sub_406750
.text:00406669                 mov     [esp+1Ch+arg_0], offset unk_42B038
.text:00406671                 add     esp, 0Ch
.text:00406674                 pop     ebx
.text:00406675                 pop     esi
.text:00406676                 pop     edi
.text:00406677                 pop     ebp
.text:00406678                 jmp     sub_406750
.text:00406678 ; ---------------------------------------------------------------------------
.text:0040667D                 align 10h
.text:00406680
.text:00406680 loc_406680:                             ; CODE XREF: sub_4065C0+85↑j
.text:00406680                 mov     [esp+1Ch+Str], ebp ; Str
.text:00406683                 call    strlen
.text:00406688                 mov     ebx, ds:dword_42C000
.text:0040668E                 add     ebp, eax
.text:00406690                 mov     edi, eax
.text:00406692                 test    ebx, ebx
.text:00406694                 jz      short loc_406647
.text:00406696                 lea     esi, [esi+0]
.text:00406699                 lea     edi, [edi+0]
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_4065C0+EB↓j
.text:004066A0                 mov     eax, [ebx]
.text:004066A2                 cmp     eax, edi
.text:004066A4                 jbe     short loc_4066B0
.text:004066A6
.text:004066A6 loc_4066A6:                             ; CODE XREF: sub_4065C0+10B↓j
.text:004066A6                 mov     ebx, [ebx+10h]
.text:004066A9                 test    ebx, ebx
.text:004066AB                 jnz     short loc_4066A0
.text:004066AD                 jmp     short loc_406647
.text:004066AD ; ---------------------------------------------------------------------------
.text:004066AF                 align 10h
.text:004066B0
.text:004066B0 loc_4066B0:                             ; CODE XREF: sub_4065C0+E4↑j
.text:004066B0                 mov     [esp+1Ch+MaxCount], eax ; MaxCount
.text:004066B4                 mov     ecx, ebp
.text:004066B6                 mov     edx, [ebx+4]
.text:004066B9                 mov     [esp+1Ch+Str2], edx ; Str2
.text:004066BD                 mov     eax, [ebx]
.text:004066BF                 sub     ecx, eax
.text:004066C1                 mov     [esp+1Ch+Str], ecx ; Str1
.text:004066C4                 call    strncmp
.text:004066C9                 test    eax, eax
.text:004066CB                 jnz     short loc_4066A6
.text:004066CD                 jmp     loc_406647
.text:004066D2 ; ---------------------------------------------------------------------------
.text:004066D2
.text:004066D2 loc_4066D2:                             ; CODE XREF: sub_4065C0+65↑j
.text:004066D2                 mov     esi, 0Ah
.text:004066D7                 jmp     loc_406640
.text:004066DC ; ---------------------------------------------------------------------------
.text:004066DC
.text:004066DC loc_4066DC:                             ; CODE XREF: sub_4065C0+5A↑j
.text:004066DC                 mov     esi, 9
.text:004066E1                 jmp     loc_406640
.text:004066E6 ; ---------------------------------------------------------------------------
.text:004066E6
.text:004066E6 loc_4066E6:                             ; CODE XREF: sub_4065C0+4F↑j
.text:004066E6                 mov     esi, 8
.text:004066EB                 jmp     loc_406640
.text:004066F0 ; ---------------------------------------------------------------------------
.text:004066F0
.text:004066F0 loc_4066F0:                             ; CODE XREF: sub_4065C0+44↑j
.text:004066F0                 mov     esi, 7
.text:004066F5                 jmp     loc_406640
.text:004066F5 ; ---------------------------------------------------------------------------
.text:004066FA                 align 10h
.text:00406700
.text:00406700 loc_406700:                             ; CODE XREF: sub_4065C0+39↑j
.text:00406700                 test    edx, edx
.text:00406702                 jnz     short loc_406717
.text:00406704                 mov     eax, dword_42B094
.text:00406709                 test    eax, eax
.text:0040670B                 jz      short loc_406717
.text:0040670D                 mov     esi, 0Ch
.text:00406712                 jmp     loc_406640
.text:00406717 ; ---------------------------------------------------------------------------
.text:00406717
.text:00406717 loc_406717:                             ; CODE XREF: sub_4065C0+142↑j
.text:00406717                                         ; sub_4065C0+14B↑j
.text:00406717                 mov     esi, 6
.text:0040671C                 jmp     loc_406640
.text:00406721 ; ---------------------------------------------------------------------------
.text:00406721
.text:00406721 loc_406721:                             ; CODE XREF: sub_4065C0+2E↑j
.text:00406721                 mov     esi, 5
.text:00406726                 jmp     loc_406640
.text:00406726 ; ---------------------------------------------------------------------------
.text:0040672B                 align 10h
.text:00406730
.text:00406730 loc_406730:                             ; CODE XREF: sub_4065C0+1C↑j
.text:00406730                 mov     eax, dword_42B08C
.text:00406735                 test    eax, eax
.text:00406737                 jz      loc_4065E2
.text:0040673D                 xor     ebx, ebx
.text:0040673F                 mov     esi, 0Bh
.text:00406744                 jmp     loc_406647
.text:00406744 sub_4065C0      endp
.text:00406744
.text:00406744 ; ---------------------------------------------------------------------------
.text:00406749                 align 10h
.text:00406750
.text:00406750 ; =============== S U B R O U T I N E =======================================
.text:00406750
.text:00406750
.text:00406750 sub_406750      proc near               ; CODE XREF: sub_401B10+34F↑p
.text:00406750                                         ; sub_401B10+35B↑p ...
.text:00406750
.text:00406750 var_1C          = dword ptr -1Ch
.text:00406750 File            = dword ptr -18h
.text:00406750 arg_0           = dword ptr  4
.text:00406750
.text:00406750                 push    esi
.text:00406751                 push    ebx
.text:00406752                 sub     esp, 14h
.text:00406755                 mov     edx, [esp+1Ch+arg_0]
.text:00406759                 mov     ebx, [edx]
.text:0040675B                 mov     esi, [edx+4]
.text:0040675E                 test    ebx, ebx
.text:00406760                 jz      short loc_406795
.text:00406762                 lea     esi, [esi+0]
.text:00406769                 lea     edi, [edi+0]
.text:00406770
.text:00406770 loc_406770:                             ; CODE XREF: sub_406750+43↓j
.text:00406770                 mov     edx, ds:_iob
.text:00406776                 mov     ecx, [edx+24h]
.text:00406779                 dec     ecx
.text:0040677A                 mov     [edx+24h], ecx
.text:0040677D                 test    ecx, ecx
.text:0040677F                 js      short loc_4067A0
.text:00406781                 movzx   edx, byte ptr [esi]
.text:00406784                 inc     esi
.text:00406785                 mov     eax, ds:_iob
.text:0040678A                 mov     ecx, [eax+20h]
.text:0040678D                 mov     [ecx], dl
.text:0040678F                 inc     dword ptr [eax+20h]
.text:00406792
.text:00406792 loc_406792:                             ; CODE XREF: sub_406750+69↓j
.text:00406792                 dec     ebx
.text:00406793                 jnz     short loc_406770
.text:00406795
.text:00406795 loc_406795:                             ; CODE XREF: sub_406750+10↑j
.text:00406795                 add     esp, 14h
.text:00406798                 pop     ebx
.text:00406799                 pop     esi
.text:0040679A                 retn
.text:0040679A ; ---------------------------------------------------------------------------
.text:0040679B                 align 10h
.text:004067A0
.text:004067A0 loc_4067A0:                             ; CODE XREF: sub_406750+2F↑j
.text:004067A0                 mov     edx, ds:_iob
.text:004067A6                 add     edx, 20h ; ' '
.text:004067A9                 mov     [esp+1Ch+File], edx ; File
.text:004067AD                 movsx   ecx, byte ptr [esi]
.text:004067B0                 inc     esi
.text:004067B1                 mov     [esp+1Ch+var_1C], ecx ; Ch
.text:004067B4                 call    _flsbuf
.text:004067B9                 jmp     short loc_406792
.text:004067B9 sub_406750      endp
.text:004067B9
.text:004067B9 ; ---------------------------------------------------------------------------
.text:004067BB                 align 10h
.text:004067C0
.text:004067C0 ; =============== S U B R O U T I N E =======================================
.text:004067C0
.text:004067C0
.text:004067C0 sub_4067C0      proc near               ; CODE XREF: sub_4051F0+11A↑j
.text:004067C0
.text:004067C0 Str             = dword ptr -0DCh
.text:004067C0 File            = dword ptr -0D8h
.text:004067C0 Buffer          = dword ptr -0D4h
.text:004067C0 var_D0          = dword ptr -0D0h
.text:004067C0 var_CC          = dword ptr -0CCh
.text:004067C0 var_C8          = dword ptr -0C8h
.text:004067C0 var_C4          = dword ptr -0C4h
.text:004067C0 var_C0          = dword ptr -0C0h
.text:004067C0 var_B0          = dword ptr -0B0h
.text:004067C0 var_AC          = dword ptr -0ACh
.text:004067C0 var_A8          = dword ptr -0A8h
.text:004067C0 var_A4          = dword ptr -0A4h
.text:004067C0 var_A0          = dword ptr -0A0h
.text:004067C0 var_9C          = byte ptr -9Ch
.text:004067C0
.text:004067C0                 push    ebp
.text:004067C1                 push    edi
.text:004067C2                 push    esi
.text:004067C3                 push    ebx
.text:004067C4                 sub     esp, 0CCh
.text:004067CA                 mov     [esp+0DCh+Str], 1
.text:004067D1                 call    sub_407240
.text:004067D6                 mov     ebx, ds:dword_42C320
.text:004067DC                 lea     edx, [eax+eax*2]
.text:004067DF                 mov     esi, eax
.text:004067E1                 mov     ecx, ds:dword_42C050
.text:004067E7                 lea     eax, [ebx+edx*4-0Ch]
.text:004067EB                 xor     edx, edx
.text:004067ED                 mov     [esp+0DCh+var_A8], eax
.text:004067F1                 mov     eax, ecx
.text:004067F3                 div     esi
.text:004067F5                 test    edx, edx
.text:004067F7                 mov     [esp+0DCh+var_AC], eax
.text:004067FB                 jz      short loc_406802
.text:004067FD                 inc     eax
.text:004067FE                 mov     [esp+0DCh+var_AC], eax
.text:00406802
.text:00406802 loc_406802:                             ; CODE XREF: sub_4067C0+3B↑j
.text:00406802                 mov     [esp+0DCh+var_A4], 0
.text:0040680A                 mov     esi, [esp+0DCh+var_AC]
.text:0040680E                 cmp     [esp+0DCh+var_A4], esi
.text:00406812                 jnb     loc_406980
.text:00406818
.text:00406818 loc_406818:                             ; CODE XREF: sub_4067C0+1BA↓j
.text:00406818                 mov     [esp+0DCh+var_B0], 0
.text:00406820                 mov     edi, [esp+0DCh+var_A4]
.text:00406824                 xor     ebp, ebp
.text:00406826                 lea     esi, [esi+0]
.text:00406829                 lea     edi, [edi+0]
.text:00406830
.text:00406830 loc_406830:                             ; CODE XREF: sub_4067C0+189↓j
.text:00406830                 mov     ecx, ds:dword_42C030
.text:00406836                 mov     ebx, edi
.text:00406838                 xor     esi, esi
.text:0040683A                 shl     ebx, 7
.text:0040683D                 add     ebx, ecx
.text:0040683F                 cmp     ds:byte_42C1F0, 0
.text:00406846                 jz      short loc_40685C
.text:00406848                 cmp     ds:dword_42C110, 4
.text:0040684F                 jz      loc_406A1C
.text:00406855                 mov     esi, ds:dword_42C080
.text:0040685B                 inc     esi
.text:0040685C
.text:0040685C loc_40685C:                             ; CODE XREF: sub_4067C0+86↑j
.text:0040685C                                         ; sub_4067C0+281↓j
.text:0040685C                 cmp     ds:byte_42C170, 0
.text:00406863                 jz      short loc_40687E
.text:00406865                 cmp     ds:dword_42C110, 4
.text:0040686C                 jz      loc_4069C3
.text:00406872                 mov     eax, ds:dword_42C090
.text:00406877                 mov     ecx, esi
.text:00406879                 add     ecx, eax
.text:0040687B                 lea     esi, [ecx+1]
.text:0040687E
.text:0040687E loc_40687E:                             ; CODE XREF: sub_4067C0+A3↑j
.text:0040687E                                         ; sub_4067C0+257↓j
.text:0040687E                 mov     edx, ds:dword_42C270
.text:00406884                 lea     ecx, [esp+0DCh+var_A0]
.text:00406888                 mov     [esp+0DCh+var_D0], ecx ; int
.text:0040688C                 mov     [esp+0DCh+Buffer], edx ; int
.text:00406890                 mov     ecx, [ebx]
.text:00406892                 mov     [esp+0DCh+Str], 0 ; FILE *
.text:00406899                 mov     [esp+0DCh+File], ecx ; char *
.text:0040689D                 call    sub_405EA0
.text:004068A2                 mov     edx, [esp+0DCh+var_A0]
.text:004068A6                 add     esi, edx
.text:004068A8                 mov     edx, ds:dword_42C1B0
.text:004068AE                 test    edx, edx
.text:004068B0                 jz      short loc_406900
.text:004068B2                 movzx   eax, word ptr [ebx+8]
.text:004068B6                 and     eax, 0F000h
.text:004068BB                 cmp     eax, 8000h
.text:004068C0                 jz      loc_4069B0
.text:004068C6                 cmp     eax, 4000h
.text:004068CB                 jz      loc_4069A6
.text:004068D1                 cmp     eax, 0A000h
.text:004068D6                 jz      loc_4069A6
.text:004068DC                 cmp     eax, 1000h
.text:004068E1                 jz      loc_4069A6
.text:004068E7                 cmp     eax, 0C000h
.text:004068EC                 jz      loc_4069A6
.text:004068F2                 lea     esi, [esi+0]
.text:004068F9                 lea     edi, [edi+0]
.text:00406900
.text:00406900 loc_406900:                             ; CODE XREF: sub_4067C0+F0↑j
.text:00406900                                         ; sub_4067C0+1E7↓j ...
.text:00406900                 mov     ebx, [esp+0DCh+var_A8]
.text:00406904                 mov     eax, ds:dword_42C030
.text:00406909                 mov     ecx, [ebx+8]
.text:0040690C                 mov     ebx, [ecx+ebp*4]
.text:0040690F                 mov     ecx, edi
.text:00406911                 inc     ebp
.text:00406912                 shl     ecx, 7
.text:00406915                 add     ecx, eax
.text:00406917                 mov     [esp+0DCh+Str], ecx
.text:0040691A                 call    sub_4063C0
.text:0040691F                 mov     edx, [esp+0DCh+var_AC]
.text:00406923                 add     edi, edx
.text:00406925                 cmp     edi, ds:dword_42C050
.text:0040692B                 jnb     short loc_40694E
.text:0040692D                 mov     ecx, [esp+0DCh+var_B0]
.text:00406931                 mov     edx, [esp+0DCh+var_B0]
.text:00406935                 add     ebx, ecx
.text:00406937                 mov     [esp+0DCh+File], ebx
.text:0040693B                 add     edx, esi
.text:0040693D                 mov     [esp+0DCh+Str], edx
.text:00406940                 call    sub_4070F0
.text:00406945                 mov     [esp+0DCh+var_B0], ebx
.text:00406949                 jmp     loc_406830
.text:0040694E ; ---------------------------------------------------------------------------
.text:0040694E
.text:0040694E loc_40694E:                             ; CODE XREF: sub_4067C0+16B↑j
.text:0040694E                 mov     ebp, ds:_iob
.text:00406954                 mov     edi, [ebp+24h]
.text:00406957                 dec     edi
.text:00406958                 mov     [ebp+24h], edi
.text:0040695B                 test    edi, edi
.text:0040695D                 js      short loc_40698B
.text:0040695F                 mov     esi, ds:_iob
.text:00406965                 mov     eax, [esi+20h]
.text:00406968                 mov     byte ptr [eax], 0Ah
.text:0040696B                 inc     dword ptr [esi+20h]
.text:0040696E
.text:0040696E loc_40696E:                             ; CODE XREF: sub_4067C0+1E4↓j
.text:0040696E                 inc     [esp+0DCh+var_A4]
.text:00406972                 mov     edx, [esp+0DCh+var_AC]
.text:00406976                 cmp     [esp+0DCh+var_A4], edx
.text:0040697A                 jb      loc_406818
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: sub_4067C0+52↑j
.text:00406980                 add     esp, 0CCh
.text:00406986                 pop     ebx
.text:00406987                 pop     esi
.text:00406988                 pop     edi
.text:00406989                 pop     ebp
.text:0040698A                 retn
.text:0040698B ; ---------------------------------------------------------------------------
.text:0040698B
.text:0040698B loc_40698B:                             ; CODE XREF: sub_4067C0+19D↑j
.text:0040698B                 mov     [esp+0DCh+Str], 0Ah ; Ch
.text:00406992                 mov     ebx, ds:_iob
.text:00406998                 add     ebx, 20h ; ' '
.text:0040699B                 mov     [esp+0DCh+File], ebx ; File
.text:0040699F                 call    _flsbuf
.text:004069A4                 jmp     short loc_40696E
.text:004069A6 ; ---------------------------------------------------------------------------
.text:004069A6
.text:004069A6 loc_4069A6:                             ; CODE XREF: sub_4067C0+10B↑j
.text:004069A6                                         ; sub_4067C0+116↑j ...
.text:004069A6                 inc     esi
.text:004069A7                 jmp     loc_406900
.text:004069A7 ; ---------------------------------------------------------------------------
.text:004069AC                 align 10h
.text:004069B0
.text:004069B0 loc_4069B0:                             ; CODE XREF: sub_4067C0+100↑j
.text:004069B0                 dec     edx
.text:004069B1                 jnz     loc_406900
.text:004069B7                 test    byte ptr [ebx+8], 49h
.text:004069BB                 jz      loc_406900
.text:004069C1                 jmp     short loc_4069A6
.text:004069C3 ; ---------------------------------------------------------------------------
.text:004069C3
.text:004069C3 loc_4069C3:                             ; CODE XREF: sub_4067C0+AC↑j
.text:004069C3                 mov     [esp+0DCh+var_CC], 200h ; int
.text:004069CB                 mov     edx, ds:dword_42C190
.text:004069D1                 mov     ecx, ds:dword_42C194
.text:004069D7                 mov     [esp+0DCh+var_C8], 0 ; int
.text:004069DF                 mov     [esp+0DCh+var_C4], edx ; int
.text:004069E3                 mov     edx, ds:dword_42C180
.text:004069E9                 mov     [esp+0DCh+var_C0], ecx ; int
.text:004069ED                 lea     ecx, [esp+0DCh+var_9C]
.text:004069F1                 mov     [esp+0DCh+var_D0], edx ; int
.text:004069F5                 mov     [esp+0DCh+Buffer], ecx ; Buffer
.text:004069F9                 mov     edx, [ebx+60h]
.text:004069FC                 mov     ecx, [ebx+64h]
.text:004069FF                 mov     [esp+0DCh+Str], edx ; int
.text:00406A02                 mov     [esp+0DCh+File], ecx ; int
.text:00406A06                 call    sub_4126F0
.text:00406A0B                 mov     [esp+0DCh+Str], eax ; Str
.text:00406A0E                 call    strlen
.text:00406A13                 lea     esi, [eax+esi+1]
.text:00406A17                 jmp     loc_40687E
.text:00406A1C ; ---------------------------------------------------------------------------
.text:00406A1C
.text:00406A1C loc_406A1C:                             ; CODE XREF: sub_4067C0+8F↑j
.text:00406A1C                 lea     ecx, [esp+0DCh+var_9C]
.text:00406A20                 mov     [esp+0DCh+Buffer], ecx
.text:00406A24                 mov     edx, [ebx+10h]
.text:00406A27                 mov     esi, [ebx+14h]
.text:00406A2A                 mov     [esp+0DCh+Str], edx
.text:00406A2D                 mov     [esp+0DCh+File], esi
.text:00406A31                 call    sub_412370
.text:00406A36                 mov     [esp+0DCh+Str], eax ; Str
.text:00406A39                 call    strlen
.text:00406A3E                 lea     esi, [eax+1]
.text:00406A41                 jmp     loc_40685C
.text:00406A41 sub_4067C0      endp
.text:00406A41
.text:00406A41 ; ---------------------------------------------------------------------------
.text:00406A46                 align 10h
.text:00406A50
.text:00406A50 ; =============== S U B R O U T I N E =======================================
.text:00406A50
.text:00406A50
.text:00406A50 sub_406A50      proc near               ; CODE XREF: sub_4051F0+126↑j
.text:00406A50
.text:00406A50 Str             = dword ptr -15Ch
.text:00406A50 File            = dword ptr -158h
.text:00406A50 Buffer          = dword ptr -154h
.text:00406A50 var_150         = dword ptr -150h
.text:00406A50 var_14C         = dword ptr -14Ch
.text:00406A50 var_148         = dword ptr -148h
.text:00406A50 var_144         = dword ptr -144h
.text:00406A50 var_140         = dword ptr -140h
.text:00406A50 var_130         = dword ptr -130h
.text:00406A50 var_12C         = dword ptr -12Ch
.text:00406A50 var_128         = dword ptr -128h
.text:00406A50 var_124         = dword ptr -124h
.text:00406A50 var_120         = dword ptr -120h
.text:00406A50 var_11C         = byte ptr -11Ch
.text:00406A50 var_9C          = byte ptr -9Ch
.text:00406A50
.text:00406A50                 push    ebp
.text:00406A51                 push    edi
.text:00406A52                 push    esi
.text:00406A53                 push    ebx
.text:00406A54                 sub     esp, 14Ch
.text:00406A5A                 mov     [esp+15Ch+var_128], 0
.text:00406A62                 mov     [esp+15Ch+Str], 0
.text:00406A69                 call    sub_407240
.text:00406A6E                 mov     [esp+15Ch+var_12C], eax
.text:00406A72                 mov     ebx, ds:dword_42C320
.text:00406A78                 lea     esi, [eax+eax*2]
.text:00406A7B                 lea     ecx, [ebx+esi*4-0Ch]
.text:00406A7F                 xor     ebx, ebx
.text:00406A81                 mov     esi, ds:dword_42C030
.text:00406A87                 cmp     ds:byte_42C1F0, 0
.text:00406A8E                 mov     [esp+15Ch+var_130], ecx
.text:00406A92                 jz      short loc_406AA8
.text:00406A94                 cmp     ds:dword_42C110, 4
.text:00406A9B                 jz      loc_406E16
.text:00406AA1                 mov     ebx, ds:dword_42C080
.text:00406AA7                 inc     ebx
.text:00406AA8
.text:00406AA8 loc_406AA8:                             ; CODE XREF: sub_406A50+42↑j
.text:00406AA8                                         ; sub_406A50+3EE↓j
.text:00406AA8                 cmp     ds:byte_42C170, 0
.text:00406AAF                 jz      short loc_406ACA
.text:00406AB1                 cmp     ds:dword_42C110, 4
.text:00406AB8                 jz      loc_406DBA
.text:00406ABE                 mov     eax, ds:dword_42C090
.text:00406AC3                 mov     edi, ebx
.text:00406AC5                 add     edi, eax
.text:00406AC7                 lea     ebx, [edi+1]
.text:00406ACA
.text:00406ACA loc_406ACA:                             ; CODE XREF: sub_406A50+5F↑j
.text:00406ACA                                         ; sub_406A50+3C1↓j
.text:00406ACA                 mov     ecx, ds:dword_42C270
.text:00406AD0                 lea     edi, [esp+15Ch+var_120]
.text:00406AD4                 mov     [esp+15Ch+var_150], edi ; int
.text:00406AD8                 mov     [esp+15Ch+Buffer], ecx ; int
.text:00406ADC                 mov     ebp, [esi]
.text:00406ADE                 mov     [esp+15Ch+Str], 0 ; FILE *
.text:00406AE5                 mov     [esp+15Ch+File], ebp ; char *
.text:00406AE9                 call    sub_405EA0
.text:00406AEE                 mov     edx, [esp+15Ch+var_120]
.text:00406AF2                 add     ebx, edx
.text:00406AF4                 mov     edx, ds:dword_42C1B0
.text:00406AFA                 test    edx, edx
.text:00406AFC                 jz      short loc_406B40
.text:00406AFE                 movzx   eax, word ptr [esi+8]
.text:00406B02                 and     eax, 0F000h
.text:00406B07                 cmp     eax, 8000h
.text:00406B0C                 jz      loc_406DA7
.text:00406B12                 cmp     eax, 4000h
.text:00406B17                 jz      loc_406DA1
.text:00406B1D                 cmp     eax, 0A000h
.text:00406B22                 jz      loc_406DA1
.text:00406B28                 cmp     eax, 1000h
.text:00406B2D                 jz      loc_406DA1
.text:00406B33                 cmp     eax, 0C000h
.text:00406B38                 jz      loc_406DA1
.text:00406B3E                 mov     esi, esi
.text:00406B40
.text:00406B40 loc_406B40:                             ; CODE XREF: sub_406A50+AC↑j
.text:00406B40                                         ; sub_406A50+352↓j ...
.text:00406B40                 mov     esi, ebx
.text:00406B42                 mov     edx, ds:dword_42C030
.text:00406B48                 mov     edi, 1
.text:00406B4D                 mov     ebx, [esp+15Ch+var_130]
.text:00406B51                 mov     ebp, [ebx+8]
.text:00406B54                 mov     ebx, [ebp+0]
.text:00406B57                 mov     [esp+15Ch+Str], edx
.text:00406B5A                 call    sub_4063C0
.text:00406B5F                 cmp     edi, ds:dword_42C050
.text:00406B65                 jnb     loc_406C87
.text:00406B6B                 nop
.text:00406B6C                 lea     esi, [esi+0]
.text:00406B70
.text:00406B70 loc_406B70:                             ; CODE XREF: sub_406A50+231↓j
.text:00406B70                 xor     edx, edx
.text:00406B72                 mov     eax, edi
.text:00406B74                 div     [esp+15Ch+var_12C]
.text:00406B78                 test    edx, edx
.text:00406B7A                 mov     ebp, edx
.text:00406B7C                 jnz     loc_406D80
.text:00406B82                 mov     ecx, ds:_iob
.text:00406B88                 mov     esi, [ecx+24h]
.text:00406B8B                 dec     esi
.text:00406B8C                 mov     [ecx+24h], esi
.text:00406B8F                 test    esi, esi
.text:00406B91                 js      loc_406D61
.text:00406B97                 mov     ebx, ds:_iob
.text:00406B9D                 mov     eax, [ebx+20h]
.text:00406BA0                 mov     byte ptr [eax], 0Ah
.text:00406BA3                 inc     dword ptr [ebx+20h]
.text:00406BA6
.text:00406BA6 loc_406BA6:                             ; CODE XREF: sub_406A50+32A↓j
.text:00406BA6                 mov     [esp+15Ch+var_128], 0
.text:00406BAE
.text:00406BAE loc_406BAE:                             ; CODE XREF: sub_406A50+34C↓j
.text:00406BAE                 mov     ecx, ds:dword_42C030
.text:00406BB4                 mov     ebx, edi
.text:00406BB6                 shl     ebx, 7
.text:00406BB9                 add     ecx, ebx
.text:00406BBB                 mov     [esp+15Ch+Str], ecx
.text:00406BBE                 call    sub_4063C0
.text:00406BC3                 mov     esi, ds:dword_42C030
.text:00406BC9                 add     ebx, esi
.text:00406BCB                 xor     esi, esi
.text:00406BCD                 cmp     ds:byte_42C1F0, 0
.text:00406BD4                 jz      short loc_406BEA
.text:00406BD6                 cmp     ds:dword_42C110, 4
.text:00406BDD                 jz      loc_406D37
.text:00406BE3                 mov     esi, ds:dword_42C080
.text:00406BE9                 inc     esi
.text:00406BEA
.text:00406BEA loc_406BEA:                             ; CODE XREF: sub_406A50+184↑j
.text:00406BEA                                         ; sub_406A50+30C↓j
.text:00406BEA                 cmp     ds:byte_42C170, 0
.text:00406BF1                 jz      short loc_406C0C
.text:00406BF3                 cmp     ds:dword_42C110, 4
.text:00406BFA                 jz      loc_406CDE
.text:00406C00                 mov     eax, ds:dword_42C090
.text:00406C05                 mov     ecx, esi
.text:00406C07                 add     ecx, eax
.text:00406C09                 lea     esi, [ecx+1]
.text:00406C0C
.text:00406C0C loc_406C0C:                             ; CODE XREF: sub_406A50+1A1↑j
.text:00406C0C                                         ; sub_406A50+2E2↓j
.text:00406C0C                 mov     edx, ds:dword_42C270
.text:00406C12                 lea     ecx, [esp+15Ch+var_124]
.text:00406C16                 mov     [esp+15Ch+var_150], ecx ; int
.text:00406C1A                 mov     [esp+15Ch+Buffer], edx ; int
.text:00406C1E                 mov     ecx, [ebx]
.text:00406C20                 mov     [esp+15Ch+Str], 0 ; FILE *
.text:00406C27                 mov     [esp+15Ch+File], ecx ; char *
.text:00406C2B                 call    sub_405EA0
.text:00406C30                 mov     edx, [esp+15Ch+var_124]
.text:00406C34                 add     esi, edx
.text:00406C36                 mov     edx, ds:dword_42C1B0
.text:00406C3C                 test    edx, edx
.text:00406C3E                 jz      short loc_406C70
.text:00406C40                 movzx   eax, word ptr [ebx+8]
.text:00406C44                 and     eax, 0F000h
.text:00406C49                 cmp     eax, 8000h
.text:00406C4E                 jz      loc_406CD3
.text:00406C54                 cmp     eax, 4000h
.text:00406C59                 jz      short loc_406CD0
.text:00406C5B                 cmp     eax, 0A000h
.text:00406C60                 jz      short loc_406CD0
.text:00406C62                 cmp     eax, 1000h
.text:00406C67                 jz      short loc_406CD0
.text:00406C69                 cmp     eax, 0C000h
.text:00406C6E                 jz      short loc_406CD0
.text:00406C70
.text:00406C70 loc_406C70:                             ; CODE XREF: sub_406A50+1EE↑j
.text:00406C70                                         ; sub_406A50+281↓j ...
.text:00406C70                 mov     ebx, [esp+15Ch+var_130]
.text:00406C74                 inc     edi
.text:00406C75                 cmp     edi, ds:dword_42C050
.text:00406C7B                 mov     ecx, [ebx+8]
.text:00406C7E                 mov     ebx, [ecx+ebp*4]
.text:00406C81                 jb      loc_406B70
.text:00406C87
.text:00406C87 loc_406C87:                             ; CODE XREF: sub_406A50+115↑j
.text:00406C87                 mov     ebp, ds:_iob
.text:00406C8D                 mov     edi, [ebp+24h]
.text:00406C90                 dec     edi
.text:00406C91                 mov     [ebp+24h], edi
.text:00406C94                 test    edi, edi
.text:00406C96                 js      short loc_406CB2
.text:00406C98                 mov     esi, ds:_iob
.text:00406C9E                 mov     eax, [esi+20h]
.text:00406CA1                 mov     byte ptr [eax], 0Ah
.text:00406CA4                 inc     dword ptr [esi+20h]
.text:00406CA7
.text:00406CA7 loc_406CA7:                             ; CODE XREF: sub_406A50+27B↓j
.text:00406CA7                 add     esp, 14Ch
.text:00406CAD                 pop     ebx
.text:00406CAE                 pop     esi
.text:00406CAF                 pop     edi
.text:00406CB0                 pop     ebp
.text:00406CB1                 retn
.text:00406CB2 ; ---------------------------------------------------------------------------
.text:00406CB2
.text:00406CB2 loc_406CB2:                             ; CODE XREF: sub_406A50+246↑j
.text:00406CB2                 mov     [esp+15Ch+Str], 0Ah ; Ch
.text:00406CB9                 mov     edx, ds:_iob
.text:00406CBF                 add     edx, 20h ; ' '
.text:00406CC2                 mov     [esp+15Ch+File], edx ; File
.text:00406CC6                 call    _flsbuf
.text:00406CCB                 jmp     short loc_406CA7
.text:00406CCB ; ---------------------------------------------------------------------------
.text:00406CCD                 align 10h
.text:00406CD0
.text:00406CD0 loc_406CD0:                             ; CODE XREF: sub_406A50+209↑j
.text:00406CD0                                         ; sub_406A50+210↑j ...
.text:00406CD0                 inc     esi
.text:00406CD1                 jmp     short loc_406C70
.text:00406CD3 ; ---------------------------------------------------------------------------
.text:00406CD3
.text:00406CD3 loc_406CD3:                             ; CODE XREF: sub_406A50+1FE↑j
.text:00406CD3                 dec     edx
.text:00406CD4                 jnz     short loc_406C70
.text:00406CD6                 test    byte ptr [ebx+8], 49h
.text:00406CDA                 jz      short loc_406C70
.text:00406CDC                 jmp     short loc_406CD0
.text:00406CDE ; ---------------------------------------------------------------------------
.text:00406CDE
.text:00406CDE loc_406CDE:                             ; CODE XREF: sub_406A50+1AA↑j
.text:00406CDE                 mov     [esp+15Ch+var_14C], 200h ; int
.text:00406CE6                 mov     edx, ds:dword_42C190
.text:00406CEC                 mov     ecx, ds:dword_42C194
.text:00406CF2                 mov     [esp+15Ch+var_148], 0 ; int
.text:00406CFA                 mov     [esp+15Ch+var_144], edx ; int
.text:00406CFE                 mov     edx, ds:dword_42C180
.text:00406D04                 mov     [esp+15Ch+var_140], ecx ; int
.text:00406D08                 lea     ecx, [esp+15Ch+var_11C]
.text:00406D0C                 mov     [esp+15Ch+var_150], edx ; int
.text:00406D10                 mov     [esp+15Ch+Buffer], ecx ; Buffer
.text:00406D14                 mov     edx, [ebx+60h]
.text:00406D17                 mov     ecx, [ebx+64h]
.text:00406D1A                 mov     [esp+15Ch+Str], edx ; int
.text:00406D1D                 mov     [esp+15Ch+File], ecx ; int
.text:00406D21                 call    sub_4126F0
.text:00406D26                 mov     [esp+15Ch+Str], eax ; Str
.text:00406D29                 call    strlen
.text:00406D2E                 lea     esi, [eax+esi+1]
.text:00406D32                 jmp     loc_406C0C
.text:00406D37 ; ---------------------------------------------------------------------------
.text:00406D37
.text:00406D37 loc_406D37:                             ; CODE XREF: sub_406A50+18D↑j
.text:00406D37                 lea     ecx, [esp+15Ch+var_11C]
.text:00406D3B                 mov     [esp+15Ch+Buffer], ecx
.text:00406D3F                 mov     edx, [ebx+10h]
.text:00406D42                 mov     esi, [ebx+14h]
.text:00406D45                 mov     [esp+15Ch+Str], edx
.text:00406D48                 mov     [esp+15Ch+File], esi
.text:00406D4C                 call    sub_412370
.text:00406D51                 mov     [esp+15Ch+Str], eax ; Str
.text:00406D54                 call    strlen
.text:00406D59                 lea     esi, [eax+1]
.text:00406D5C                 jmp     loc_406BEA
.text:00406D61 ; ---------------------------------------------------------------------------
.text:00406D61
.text:00406D61 loc_406D61:                             ; CODE XREF: sub_406A50+141↑j
.text:00406D61                 mov     [esp+15Ch+Str], 0Ah ; Ch
.text:00406D68                 mov     edx, ds:_iob
.text:00406D6E                 add     edx, 20h ; ' '
.text:00406D71                 mov     [esp+15Ch+File], edx ; File
.text:00406D75                 call    _flsbuf
.text:00406D7A                 jmp     loc_406BA6
.text:00406D7A ; ---------------------------------------------------------------------------
.text:00406D7F                 align 10h
.text:00406D80
.text:00406D80 loc_406D80:                             ; CODE XREF: sub_406A50+12C↑j
.text:00406D80                 mov     edx, [esp+15Ch+var_128]
.text:00406D84                 mov     ecx, [esp+15Ch+var_128]
.text:00406D88                 add     ebx, edx
.text:00406D8A                 mov     [esp+15Ch+File], ebx
.text:00406D8E                 add     ecx, esi
.text:00406D90                 mov     [esp+15Ch+Str], ecx
.text:00406D93                 call    sub_4070F0
.text:00406D98                 mov     [esp+15Ch+var_128], ebx
.text:00406D9C                 jmp     loc_406BAE
.text:00406DA1 ; ---------------------------------------------------------------------------
.text:00406DA1
.text:00406DA1 loc_406DA1:                             ; CODE XREF: sub_406A50+C7↑j
.text:00406DA1                                         ; sub_406A50+D2↑j ...
.text:00406DA1                 inc     ebx
.text:00406DA2                 jmp     loc_406B40
.text:00406DA7 ; ---------------------------------------------------------------------------
.text:00406DA7
.text:00406DA7 loc_406DA7:                             ; CODE XREF: sub_406A50+BC↑j
.text:00406DA7                 dec     edx
.text:00406DA8                 jnz     loc_406B40
.text:00406DAE                 test    byte ptr [esi+8], 49h
.text:00406DB2                 jz      loc_406B40
.text:00406DB8                 jmp     short loc_406DA1
.text:00406DBA ; ---------------------------------------------------------------------------
.text:00406DBA
.text:00406DBA loc_406DBA:                             ; CODE XREF: sub_406A50+68↑j
.text:00406DBA                 mov     [esp+15Ch+var_14C], 200h ; int
.text:00406DC2                 mov     ecx, ds:dword_42C190
.text:00406DC8                 lea     edx, [esp+15Ch+var_9C]
.text:00406DCF                 mov     [esp+15Ch+Buffer], edx ; Buffer
.text:00406DD3                 mov     ebp, ds:dword_42C194
.text:00406DD9                 mov     edi, ds:dword_42C180
.text:00406DDF                 mov     [esp+15Ch+var_144], ecx ; int
.text:00406DE3                 mov     [esp+15Ch+var_140], ebp ; int
.text:00406DE7                 mov     [esp+15Ch+var_148], 0 ; int
.text:00406DEF                 mov     [esp+15Ch+var_150], edi ; int
.text:00406DF3                 mov     ecx, [esi+60h]
.text:00406DF6                 mov     ebp, [esi+64h]
.text:00406DF9                 mov     [esp+15Ch+Str], ecx ; int
.text:00406DFC                 mov     [esp+15Ch+File], ebp ; int
.text:00406E00                 call    sub_4126F0
.text:00406E05                 mov     [esp+15Ch+Str], eax ; Str
.text:00406E08                 call    strlen
.text:00406E0D                 lea     ebx, [eax+ebx+1]
.text:00406E11                 jmp     loc_406ACA
.text:00406E16 ; ---------------------------------------------------------------------------
.text:00406E16
.text:00406E16 loc_406E16:                             ; CODE XREF: sub_406A50+4B↑j
.text:00406E16                 lea     edi, [esp+15Ch+var_9C]
.text:00406E1D                 mov     [esp+15Ch+Buffer], edi
.text:00406E21                 mov     edx, [esi+10h]
.text:00406E24                 mov     ecx, [esi+14h]
.text:00406E27                 mov     [esp+15Ch+Str], edx
.text:00406E2A                 mov     [esp+15Ch+File], ecx
.text:00406E2E                 call    sub_412370
.text:00406E33                 mov     [esp+15Ch+Str], eax ; Str
.text:00406E36                 call    strlen
.text:00406E3B                 lea     ebx, [eax+1]
.text:00406E3E                 jmp     loc_406AA8
.text:00406E3E sub_406A50      endp
.text:00406E3E
.text:00406E3E ; ---------------------------------------------------------------------------
.text:00406E43                 align 10h
.text:00406E50
.text:00406E50 ; =============== S U B R O U T I N E =======================================
.text:00406E50
.text:00406E50
.text:00406E50 sub_406E50      proc near               ; CODE XREF: sub_4051F0+132↑j
.text:00406E50
.text:00406E50 Str             = dword ptr -0CCh
.text:00406E50 File            = dword ptr -0C8h
.text:00406E50 Buffer          = dword ptr -0C4h
.text:00406E50 var_C0          = dword ptr -0C0h
.text:00406E50 var_BC          = dword ptr -0BCh
.text:00406E50 var_B8          = dword ptr -0B8h
.text:00406E50 var_B4          = dword ptr -0B4h
.text:00406E50 var_B0          = dword ptr -0B0h
.text:00406E50 var_A0          = dword ptr -0A0h
.text:00406E50 var_9C          = byte ptr -9Ch
.text:00406E50
.text:00406E50                 push    ebp
.text:00406E51                 xor     ebp, ebp
.text:00406E53                 push    edi
.text:00406E54                 xor     edi, edi
.text:00406E56                 push    esi
.text:00406E57                 push    ebx
.text:00406E58                 sub     esp, 0BCh
.text:00406E5E                 cmp     edi, ds:dword_42C050
.text:00406E64                 jnb     loc_406FBF
.text:00406E6A                 lea     esi, [esi+0]
.text:00406E70
.text:00406E70 loc_406E70:                             ; CODE XREF: sub_406E50+169↓j
.text:00406E70                 mov     eax, ds:dword_42C030
.text:00406E75                 mov     ebx, edi
.text:00406E77                 xor     esi, esi
.text:00406E79                 shl     ebx, 7
.text:00406E7C                 add     ebx, eax
.text:00406E7E                 cmp     ds:byte_42C1F0, 0
.text:00406E85                 jz      short loc_406E9B
.text:00406E87                 cmp     ds:dword_42C110, 4
.text:00406E8E                 jz      loc_4070C2
.text:00406E94                 mov     esi, ds:dword_42C080
.text:00406E9A                 inc     esi
.text:00406E9B
.text:00406E9B loc_406E9B:                             ; CODE XREF: sub_406E50+35↑j
.text:00406E9B                                         ; sub_406E50+297↓j
.text:00406E9B                 cmp     ds:byte_42C170, 0
.text:00406EA2                 jz      short loc_406EBD
.text:00406EA4                 cmp     ds:dword_42C110, 4
.text:00406EAB                 jz      loc_407069
.text:00406EB1                 mov     eax, ds:dword_42C090
.text:00406EB6                 mov     ecx, esi
.text:00406EB8                 add     ecx, eax
.text:00406EBA                 lea     esi, [ecx+1]
.text:00406EBD
.text:00406EBD loc_406EBD:                             ; CODE XREF: sub_406E50+52↑j
.text:00406EBD                                         ; sub_406E50+26D↓j
.text:00406EBD                 mov     edx, ds:dword_42C270
.text:00406EC3                 lea     ecx, [esp+0CCh+var_A0]
.text:00406EC7                 mov     [esp+0CCh+var_C0], ecx ; int
.text:00406ECB                 mov     [esp+0CCh+Buffer], edx ; int
.text:00406ECF                 mov     ecx, [ebx]
.text:00406ED1                 mov     [esp+0CCh+Str], 0 ; FILE *
.text:00406ED8                 mov     [esp+0CCh+File], ecx ; char *
.text:00406EDC                 call    sub_405EA0
.text:00406EE1                 mov     edx, [esp+0CCh+var_A0]
.text:00406EE5                 add     esi, edx
.text:00406EE7                 mov     edx, ds:dword_42C1B0
.text:00406EED                 test    edx, edx
.text:00406EEF                 jz      short loc_406F40
.text:00406EF1                 movzx   eax, word ptr [ebx+8]
.text:00406EF5                 and     eax, 0F000h
.text:00406EFA                 cmp     eax, 8000h
.text:00406EFF                 jz      loc_407056
.text:00406F05                 cmp     eax, 4000h
.text:00406F0A                 jz      loc_407050
.text:00406F10                 cmp     eax, 0A000h
.text:00406F15                 jz      loc_407050
.text:00406F1B                 cmp     eax, 1000h
.text:00406F20                 jz      loc_407050
.text:00406F26                 cmp     eax, 0C000h
.text:00406F2B                 jz      loc_407050
.text:00406F31                 jmp     short loc_406F40
.text:00406F31 ; ---------------------------------------------------------------------------
.text:00406F33                 align 10h
.text:00406F40
.text:00406F40 loc_406F40:                             ; CODE XREF: sub_406E50+9F↑j
.text:00406F40                                         ; sub_406E50+E1↑j ...
.text:00406F40                 test    edi, edi
.text:00406F42                 jz      short loc_406F9C
.text:00406F44                 lea     ebx, [esi+ebp+2]
.text:00406F48                 cmp     ebx, ds:dword_42C2B0
.text:00406F4E                 jnb     loc_407040
.text:00406F54                 add     ebp, 2
.text:00406F57                 mov     bl, 20h ; ' '
.text:00406F59
.text:00406F59 loc_406F59:                             ; CODE XREF: sub_406E50+1F4↓j
.text:00406F59                 mov     edx, ds:_iob
.text:00406F5F                 mov     ecx, [edx+24h]
.text:00406F62                 dec     ecx
.text:00406F63                 mov     [edx+24h], ecx
.text:00406F66                 test    ecx, ecx
.text:00406F68                 js      loc_407022
.text:00406F6E                 mov     ecx, ds:_iob
.text:00406F74                 mov     eax, [ecx+20h]
.text:00406F77                 mov     byte ptr [eax], 2Ch ; ','
.text:00406F7A                 inc     dword ptr [ecx+20h]
.text:00406F7D
.text:00406F7D loc_406F7D:                             ; CODE XREF: sub_406E50+1EB↓j
.text:00406F7D                 mov     edx, ds:_iob
.text:00406F83                 mov     ecx, [edx+24h]
.text:00406F86                 dec     ecx
.text:00406F87                 mov     [edx+24h], ecx
.text:00406F8A                 test    ecx, ecx
.text:00406F8C                 js      short loc_407005
.text:00406F8E                 mov     ecx, ds:_iob
.text:00406F94                 mov     eax, [ecx+20h]
.text:00406F97                 mov     [eax], bl
.text:00406F99                 inc     dword ptr [ecx+20h]
.text:00406F9C
.text:00406F9C loc_406F9C:                             ; CODE XREF: sub_406E50+F2↑j
.text:00406F9C                                         ; sub_406E50+1CD↓j
.text:00406F9C                 mov     eax, ds:dword_42C030
.text:00406FA1                 mov     ebx, edi
.text:00406FA3                 add     ebp, esi
.text:00406FA5                 shl     ebx, 7
.text:00406FA8                 inc     edi
.text:00406FA9                 add     ebx, eax
.text:00406FAB                 mov     [esp+0CCh+Str], ebx
.text:00406FAE                 call    sub_4063C0
.text:00406FB3                 cmp     edi, ds:dword_42C050
.text:00406FB9                 jb      loc_406E70
.text:00406FBF
.text:00406FBF loc_406FBF:                             ; CODE XREF: sub_406E50+14↑j
.text:00406FBF                 mov     ebp, ds:_iob
.text:00406FC5                 mov     edi, [ebp+24h]
.text:00406FC8                 dec     edi
.text:00406FC9                 mov     [ebp+24h], edi
.text:00406FCC                 test    edi, edi
.text:00406FCE                 js      short loc_406FEA
.text:00406FD0                 mov     esi, ds:_iob
.text:00406FD6                 mov     ecx, [esi+20h]
.text:00406FD9                 mov     byte ptr [ecx], 0Ah
.text:00406FDC                 inc     dword ptr [esi+20h]
.text:00406FDF
.text:00406FDF loc_406FDF:                             ; CODE XREF: sub_406E50+1B3↓j
.text:00406FDF                 add     esp, 0BCh
.text:00406FE5                 pop     ebx
.text:00406FE6                 pop     esi
.text:00406FE7                 pop     edi
.text:00406FE8                 pop     ebp
.text:00406FE9                 retn
.text:00406FEA ; ---------------------------------------------------------------------------
.text:00406FEA
.text:00406FEA loc_406FEA:                             ; CODE XREF: sub_406E50+17E↑j
.text:00406FEA                 mov     [esp+0CCh+Str], 0Ah ; Ch
.text:00406FF1                 mov     edx, ds:_iob
.text:00406FF7                 add     edx, 20h ; ' '
.text:00406FFA                 mov     [esp+0CCh+File], edx ; File
.text:00406FFE                 call    _flsbuf
.text:00407003                 jmp     short loc_406FDF
.text:00407005 ; ---------------------------------------------------------------------------
.text:00407005
.text:00407005 loc_407005:                             ; CODE XREF: sub_406E50+13C↑j
.text:00407005                 mov     ecx, ds:_iob
.text:0040700B                 movsx   edx, bl
.text:0040700E                 mov     [esp+0CCh+Str], edx ; Ch
.text:00407011                 add     ecx, 20h ; ' '
.text:00407014                 mov     [esp+0CCh+File], ecx ; File
.text:00407018                 call    _flsbuf
.text:0040701D                 jmp     loc_406F9C
.text:00407022 ; ---------------------------------------------------------------------------
.text:00407022
.text:00407022 loc_407022:                             ; CODE XREF: sub_406E50+118↑j
.text:00407022                 mov     [esp+0CCh+Str], 2Ch ; ',' ; Ch
.text:00407029                 mov     edx, ds:_iob
.text:0040702F                 add     edx, 20h ; ' '
.text:00407032                 mov     [esp+0CCh+File], edx ; File
.text:00407036                 call    _flsbuf
.text:0040703B                 jmp     loc_406F7D
.text:00407040 ; ---------------------------------------------------------------------------
.text:00407040
.text:00407040 loc_407040:                             ; CODE XREF: sub_406E50+FE↑j
.text:00407040                 xor     ebp, ebp
.text:00407042                 mov     bl, 0Ah
.text:00407044                 jmp     loc_406F59
.text:00407044 ; ---------------------------------------------------------------------------
.text:00407049                 align 10h
.text:00407050
.text:00407050 loc_407050:                             ; CODE XREF: sub_406E50+BA↑j
.text:00407050                                         ; sub_406E50+C5↑j ...
.text:00407050                 inc     esi
.text:00407051                 jmp     loc_406F40
.text:00407056 ; ---------------------------------------------------------------------------
.text:00407056
.text:00407056 loc_407056:                             ; CODE XREF: sub_406E50+AF↑j
.text:00407056                 dec     edx
.text:00407057                 jnz     loc_406F40
.text:0040705D                 test    byte ptr [ebx+8], 49h
.text:00407061                 jz      loc_406F40
.text:00407067                 jmp     short loc_407050
.text:00407069 ; ---------------------------------------------------------------------------
.text:00407069
.text:00407069 loc_407069:                             ; CODE XREF: sub_406E50+5B↑j
.text:00407069                 mov     [esp+0CCh+var_BC], 200h ; int
.text:00407071                 mov     edx, ds:dword_42C190
.text:00407077                 mov     ecx, ds:dword_42C194
.text:0040707D                 mov     [esp+0CCh+var_B8], 0 ; int
.text:00407085                 mov     [esp+0CCh+var_B4], edx ; int
.text:00407089                 mov     edx, ds:dword_42C180
.text:0040708F                 mov     [esp+0CCh+var_B0], ecx ; int
.text:00407093                 lea     ecx, [esp+0CCh+var_9C]
.text:00407097                 mov     [esp+0CCh+var_C0], edx ; int
.text:0040709B                 mov     [esp+0CCh+Buffer], ecx ; Buffer
.text:0040709F                 mov     edx, [ebx+60h]
.text:004070A2                 mov     ecx, [ebx+64h]
.text:004070A5                 mov     [esp+0CCh+Str], edx ; int
.text:004070A8                 mov     [esp+0CCh+File], ecx ; int
.text:004070AC                 call    sub_4126F0
.text:004070B1                 mov     [esp+0CCh+Str], eax ; Str
.text:004070B4                 call    strlen
.text:004070B9                 lea     esi, [eax+esi+1]
.text:004070BD                 jmp     loc_406EBD
.text:004070C2 ; ---------------------------------------------------------------------------
.text:004070C2
.text:004070C2 loc_4070C2:                             ; CODE XREF: sub_406E50+3E↑j
.text:004070C2                 lea     esi, [esp+0CCh+var_9C]
.text:004070C6                 mov     [esp+0CCh+Buffer], esi
.text:004070CA                 mov     edx, [ebx+10h]
.text:004070CD                 mov     ecx, [ebx+14h]
.text:004070D0                 mov     [esp+0CCh+Str], edx
.text:004070D3                 mov     [esp+0CCh+File], ecx
.text:004070D7                 call    sub_412370
.text:004070DC                 mov     [esp+0CCh+Str], eax ; Str
.text:004070DF                 call    strlen
.text:004070E4                 lea     esi, [eax+1]
.text:004070E7                 jmp     loc_406E9B
.text:004070E7 sub_406E50      endp
.text:004070E7
.text:004070E7 ; ---------------------------------------------------------------------------
.text:004070EC                 align 10h
.text:004070F0
.text:004070F0 ; =============== S U B R O U T I N E =======================================
.text:004070F0
.text:004070F0
.text:004070F0 sub_4070F0      proc near               ; CODE XREF: sub_4067C0+180↑p
.text:004070F0                                         ; sub_406A50+343↑p
.text:004070F0
.text:004070F0 var_1C          = dword ptr -1Ch
.text:004070F0 File            = dword ptr -18h
.text:004070F0 arg_0           = dword ptr  4
.text:004070F0 arg_4           = dword ptr  8
.text:004070F0
.text:004070F0                 push    ebp
.text:004070F1                 push    edi
.text:004070F2                 push    esi
.text:004070F3                 push    ebx
.text:004070F4                 sub     esp, 0Ch
.text:004070F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004070FB                 mov     edi, [esp+1Ch+arg_4]
.text:004070FF                 cmp     ebx, edi
.text:00407101                 jnb     short loc_407164
.text:00407103                 lea     esi, [esi+0]
.text:00407109                 lea     edi, [edi+0]
.text:00407110
.text:00407110 loc_407110:                             ; CODE XREF: sub_4070F0+72↓j
.text:00407110                 mov     ecx, ds:dword_42C290
.text:00407116                 lea     esi, [ebx+1]
.text:00407119                 test    ecx, ecx
.text:0040711B                 jz      short loc_407187
.text:0040711D                 xor     edx, edx
.text:0040711F                 mov     eax, edi
.text:00407121                 div     ecx
.text:00407123                 xor     edx, edx
.text:00407125                 mov     ebp, eax
.text:00407127                 mov     eax, esi
.text:00407129                 div     ecx
.text:0040712B                 cmp     ebp, eax
.text:0040712D                 jbe     short loc_407187
.text:0040712F                 mov     edx, ds:_iob
.text:00407135                 mov     ecx, [edx+24h]
.text:00407138                 dec     ecx
.text:00407139                 mov     [edx+24h], ecx
.text:0040713C                 test    ecx, ecx
.text:0040713E                 js      short loc_40716C
.text:00407140                 mov     ecx, ds:_iob
.text:00407146                 mov     eax, [ecx+20h]
.text:00407149                 mov     byte ptr [eax], 9
.text:0040714C                 inc     dword ptr [ecx+20h]
.text:0040714F
.text:0040714F loc_40714F:                             ; CODE XREF: sub_4070F0+95↓j
.text:0040714F                 mov     ebp, ds:dword_42C290
.text:00407155                 mov     eax, ebx
.text:00407157                 xor     edx, edx
.text:00407159                 div     ebp
.text:0040715B                 sub     ebp, edx
.text:0040715D                 add     ebx, ebp
.text:0040715F                 nop
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: sub_4070F0+B9↓j
.text:00407160                 cmp     ebx, edi
.text:00407162                 jb      short loc_407110
.text:00407164
.text:00407164 loc_407164:                             ; CODE XREF: sub_4070F0+11↑j
.text:00407164                 add     esp, 0Ch
.text:00407167                 pop     ebx
.text:00407168                 pop     esi
.text:00407169                 pop     edi
.text:0040716A                 pop     ebp
.text:0040716B                 retn
.text:0040716C ; ---------------------------------------------------------------------------
.text:0040716C
.text:0040716C loc_40716C:                             ; CODE XREF: sub_4070F0+4E↑j
.text:0040716C                 mov     [esp+1Ch+var_1C], 9 ; Ch
.text:00407173                 mov     esi, ds:_iob
.text:00407179                 add     esi, 20h ; ' '
.text:0040717C                 mov     [esp+1Ch+File], esi ; File
.text:00407180                 call    _flsbuf
.text:00407185                 jmp     short loc_40714F
.text:00407187 ; ---------------------------------------------------------------------------
.text:00407187
.text:00407187 loc_407187:                             ; CODE XREF: sub_4070F0+2B↑j
.text:00407187                                         ; sub_4070F0+3D↑j
.text:00407187                 mov     edx, ds:_iob
.text:0040718D                 mov     ebx, [edx+24h]
.text:00407190                 dec     ebx
.text:00407191                 mov     [edx+24h], ebx
.text:00407194                 test    ebx, ebx
.text:00407196                 js      short loc_4071AB
.text:00407198                 mov     ecx, ds:_iob
.text:0040719E                 mov     eax, [ecx+20h]
.text:004071A1                 mov     byte ptr [eax], 20h ; ' '
.text:004071A4                 inc     dword ptr [ecx+20h]
.text:004071A7
.text:004071A7 loc_4071A7:                             ; CODE XREF: sub_4070F0+D4↓j
.text:004071A7                 mov     ebx, esi
.text:004071A9                 jmp     short loc_407160
.text:004071AB ; ---------------------------------------------------------------------------
.text:004071AB
.text:004071AB loc_4071AB:                             ; CODE XREF: sub_4070F0+A6↑j
.text:004071AB                 mov     [esp+1Ch+var_1C], 20h ; ' ' ; Ch
.text:004071B2                 mov     ebp, ds:_iob
.text:004071B8                 add     ebp, 20h ; ' '
.text:004071BB                 mov     [esp+1Ch+File], ebp ; File
.text:004071BF                 call    _flsbuf
.text:004071C4                 jmp     short loc_4071A7
.text:004071C4 sub_4070F0      endp
.text:004071C4
.text:004071C4 ; ---------------------------------------------------------------------------
.text:004071C6                 align 10h
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0
.text:004071D0 sub_4071D0      proc near               ; CODE XREF: sub_404500+70D↑p
.text:004071D0
.text:004071D0 arg_0           = dword ptr  4
.text:004071D0 arg_4           = dword ptr  8
.text:004071D0 arg_8           = dword ptr  0Ch
.text:004071D0
.text:004071D0                 push    esi
.text:004071D1                 push    ebx
.text:004071D2                 mov     esi, [esp+8+arg_4]
.text:004071D6                 mov     ecx, [esp+8+arg_0]
.text:004071DA                 mov     ebx, [esp+8+arg_8]
.text:004071DE                 mov     edx, esi
.text:004071E0                 movzx   eax, byte ptr [esi]
.text:004071E3                 cmp     al, 2Eh ; '.'
.text:004071E5                 jz      short loc_407231
.text:004071E7
.text:004071E7 loc_4071E7:                             ; CODE XREF: sub_4071D0+67↓j
.text:004071E7                 test    al, al
.text:004071E9                 jz      short loc_4071FB
.text:004071EB                 nop
.text:004071EC                 lea     esi, [esi+0]
.text:004071F0
.text:004071F0 loc_4071F0:                             ; CODE XREF: sub_4071D0+29↓j
.text:004071F0                 mov     [ecx], al
.text:004071F2                 inc     edx
.text:004071F3                 inc     ecx
.text:004071F4                 movzx   eax, byte ptr [edx]
.text:004071F7                 test    al, al
.text:004071F9                 jnz     short loc_4071F0
.text:004071FB
.text:004071FB loc_4071FB:                             ; CODE XREF: sub_4071D0+19↑j
.text:004071FB                 cmp     edx, esi
.text:004071FD                 jbe     short loc_407210
.text:004071FF                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:00407203                 jz      short loc_407210
.text:00407205                 mov     byte ptr [ecx], 2Fh ; '/'
.text:00407208                 inc     ecx
.text:00407209                 lea     esi, [esi+0]
.text:00407210
.text:00407210 loc_407210:                             ; CODE XREF: sub_4071D0+2D↑j
.text:00407210                                         ; sub_4071D0+33↑j ...
.text:00407210                 movzx   eax, byte ptr [ebx]
.text:00407213                 test    al, al
.text:00407215                 jz      short loc_40722B
.text:00407217                 mov     esi, esi
.text:00407219                 lea     edi, [edi+0]
.text:00407220
.text:00407220 loc_407220:                             ; CODE XREF: sub_4071D0+59↓j
.text:00407220                 mov     [ecx], al
.text:00407222                 inc     ebx
.text:00407223                 inc     ecx
.text:00407224                 movzx   eax, byte ptr [ebx]
.text:00407227                 test    al, al
.text:00407229                 jnz     short loc_407220
.text:0040722B
.text:0040722B loc_40722B:                             ; CODE XREF: sub_4071D0+45↑j
.text:0040722B                 mov     byte ptr [ecx], 0
.text:0040722E                 pop     ebx
.text:0040722F                 pop     esi
.text:00407230                 retn
.text:00407231 ; ---------------------------------------------------------------------------
.text:00407231
.text:00407231 loc_407231:                             ; CODE XREF: sub_4071D0+15↑j
.text:00407231                 cmp     byte ptr [esi+1], 0
.text:00407235                 jz      short loc_407210
.text:00407237                 jmp     short loc_4071E7
.text:00407237 sub_4071D0      endp
.text:00407237
.text:00407237 ; ---------------------------------------------------------------------------
.text:00407239                 align 10h
.text:00407240
.text:00407240 ; =============== S U B R O U T I N E =======================================
.text:00407240
.text:00407240
.text:00407240 sub_407240      proc near               ; CODE XREF: sub_4067C0+11↑p
.text:00407240                                         ; sub_406A50+19↑p
.text:00407240
.text:00407240 Str             = dword ptr -0ECh
.text:00407240 var_E8          = dword ptr -0E8h
.text:00407240 Buffer          = dword ptr -0E4h
.text:00407240 var_E0          = dword ptr -0E0h
.text:00407240 var_DC          = dword ptr -0DCh
.text:00407240 var_D8          = dword ptr -0D8h
.text:00407240 var_D4          = dword ptr -0D4h
.text:00407240 var_D0          = dword ptr -0D0h
.text:00407240 var_C0          = dword ptr -0C0h
.text:00407240 var_B0          = dword ptr -0B0h
.text:00407240 var_AC          = dword ptr -0ACh
.text:00407240 var_A8          = dword ptr -0A8h
.text:00407240 var_A1          = byte ptr -0A1h
.text:00407240 var_A0          = dword ptr -0A0h
.text:00407240 var_9C          = byte ptr -9Ch
.text:00407240 arg_0           = byte ptr  4
.text:00407240
.text:00407240                 push    ebp
.text:00407241                 push    edi
.text:00407242                 push    esi
.text:00407243                 push    ebx
.text:00407244                 sub     esp, 0DCh
.text:0040724A                 mov     ecx, ds:dword_42C050
.text:00407250                 movzx   edx, [esp+0ECh+arg_0]
.text:00407258                 mov     eax, ds:dword_42C330
.text:0040725D                 mov     [esp+0ECh+var_AC], ecx
.text:00407261                 cmp     ecx, eax
.text:00407263                 mov     [esp+0ECh+var_A1], dl
.text:00407267                 jbe     short loc_40726D
.text:00407269                 mov     [esp+0ECh+var_AC], eax
.text:0040726D
.text:0040726D loc_40726D:                             ; CODE XREF: sub_407240+27↑j
.text:0040726D                 call    sub_40A5D0
.text:00407272                 mov     [esp+0ECh+var_A8], 0
.text:0040727A                 xor     eax, eax
.text:0040727C                 cmp     eax, ds:dword_42C050
.text:00407282                 jnb     loc_407430
.text:00407288                 nop
.text:00407289                 lea     esi, [esi+0]
.text:00407290
.text:00407290 loc_407290:                             ; CODE XREF: sub_407240+1EA↓j
.text:00407290                 mov     [esp+0ECh+var_B0], 0
.text:00407298                 mov     ebx, [esp+0ECh+var_A8]
.text:0040729C                 mov     ecx, ds:dword_42C030
.text:004072A2                 shl     ebx, 7
.text:004072A5                 add     ebx, ecx
.text:004072A7                 cmp     ds:byte_42C1F0, 0
.text:004072AE                 jz      short loc_4072C7
.text:004072B0                 cmp     ds:dword_42C110, 4
.text:004072B7                 jz      loc_407504
.text:004072BD                 mov     eax, ds:dword_42C080
.text:004072C2
.text:004072C2 loc_4072C2:                             ; CODE XREF: sub_407240+2E6↓j
.text:004072C2                 inc     eax
.text:004072C3                 mov     [esp+0ECh+var_B0], eax
.text:004072C7
.text:004072C7 loc_4072C7:                             ; CODE XREF: sub_407240+6E↑j
.text:004072C7                 cmp     ds:byte_42C170, 0
.text:004072CE                 jz      short loc_4072ED
.text:004072D0                 cmp     ds:dword_42C110, 4
.text:004072D7                 jz      loc_4074A3
.text:004072DD                 mov     edx, [esp+0ECh+var_B0]
.text:004072E1                 mov     eax, ds:dword_42C090
.text:004072E6                 add     edx, eax
.text:004072E8                 inc     edx
.text:004072E9                 mov     [esp+0ECh+var_B0], edx
.text:004072ED
.text:004072ED loc_4072ED:                             ; CODE XREF: sub_407240+8E↑j
.text:004072ED                                         ; sub_407240+2BF↓j
.text:004072ED                 mov     esi, ds:dword_42C270
.text:004072F3                 lea     edi, [esp+0ECh+var_A0]
.text:004072F7                 mov     [esp+0ECh+var_E0], edi ; int
.text:004072FB                 mov     [esp+0ECh+Buffer], esi ; int
.text:004072FF                 mov     ecx, [ebx]
.text:00407301                 mov     [esp+0ECh+Str], 0 ; FILE *
.text:00407308                 mov     [esp+0ECh+var_E8], ecx ; char *
.text:0040730C                 call    sub_405EA0
.text:00407311                 mov     edx, ds:dword_42C1B0
.text:00407317                 mov     ebp, [esp+0ECh+var_A0]
.text:0040731B                 add     [esp+0ECh+var_B0], ebp
.text:0040731F                 test    edx, edx
.text:00407321                 jz      short loc_407370
.text:00407323                 movzx   eax, word ptr [ebx+8]
.text:00407327                 and     eax, 0F000h
.text:0040732C                 cmp     eax, 8000h
.text:00407331                 jz      loc_407490
.text:00407337                 cmp     eax, 4000h
.text:0040733C                 jz      loc_407487
.text:00407342                 cmp     eax, 0A000h
.text:00407347                 jz      loc_407487
.text:0040734D                 cmp     eax, 1000h
.text:00407352                 jz      loc_407487
.text:00407358                 cmp     eax, 0C000h
.text:0040735D                 jz      loc_407487
.text:00407363                 lea     esi, [esi+0]
.text:00407369                 lea     edi, [edi+0]
.text:00407370
.text:00407370 loc_407370:                             ; CODE XREF: sub_407240+E1↑j
.text:00407370                                         ; sub_407240+24B↓j ...
.text:00407370                 xor     ebx, ebx
.text:00407372                 cmp     ebx, [esp+0ECh+var_AC]
.text:00407376                 jnb     loc_40741C
.text:0040737C                 mov     ebp, ds:dword_42C320
.text:00407382                 lea     esi, [esi+0]
.text:00407389                 lea     edi, [edi+0]
.text:00407390
.text:00407390 loc_407390:                             ; CODE XREF: sub_407240+1D6↓j
.text:00407390                 lea     edx, [ebx+ebx*2]
.text:00407393                 cmp     byte ptr [ebp+edx*4+0], 0
.text:00407398                 jz      loc_407482
.text:0040739E                 cmp     [esp+0ECh+var_A1], 0
.text:004073A3                 jz      loc_407470
.text:004073A9                 mov     eax, ds:dword_42C050
.text:004073AE                 lea     ecx, [ebx+1]
.text:004073B1                 xor     edx, edx
.text:004073B3                 add     eax, ebx
.text:004073B5                 div     ecx
.text:004073B7                 xor     edx, edx
.text:004073B9                 mov     edi, eax
.text:004073BB                 mov     eax, [esp+0ECh+var_A8]
.text:004073BF                 div     edi
.text:004073C1                 mov     edi, eax
.text:004073C3
.text:004073C3 loc_4073C3:                             ; CODE XREF: sub_407240+23D↓j
.text:004073C3                 cmp     edi, ebx
.text:004073C5                 mov     esi, [esp+0ECh+var_B0]
.text:004073C9                 jz      short loc_4073CE
.text:004073CB                 add     esi, 2
.text:004073CE
.text:004073CE loc_4073CE:                             ; CODE XREF: sub_407240+189↑j
.text:004073CE                 lea     eax, [ebx+ebx*2]
.text:004073D1                 lea     edx, ds:0[eax*4]
.text:004073D8                 mov     ebx, [ebp+edx+8]
.text:004073DC                 mov     [esp+0ECh+var_C0], ebx
.text:004073E0                 mov     eax, [ebx+edi*4]
.text:004073E3                 cmp     eax, esi
.text:004073E5                 jnb     short loc_407410
.text:004073E7                 mov     ebx, esi
.text:004073E9                 sub     ebx, eax
.text:004073EB                 add     [ebp+edx+4], ebx
.text:004073EF                 mov     ebx, [esp+0ECh+var_C0]
.text:004073F3                 mov     [ebx+edi*4], esi
.text:004073F6                 mov     ebx, ds:dword_42C2B0
.text:004073FC                 cmp     [ebp+edx+4], ebx
.text:00407400                 setb    byte ptr [ebp+edx+0]
.text:00407405                 lea     esi, [esi+0]
.text:00407409                 lea     edi, [edi+0]
.text:00407410
.text:00407410 loc_407410:                             ; CODE XREF: sub_407240+1A5↑j
.text:00407410                                         ; sub_407240+245↓j
.text:00407410                 cmp     ecx, [esp+0ECh+var_AC]
.text:00407414                 mov     ebx, ecx
.text:00407416                 jb      loc_407390
.text:0040741C
.text:0040741C loc_40741C:                             ; CODE XREF: sub_407240+136↑j
.text:0040741C                 inc     [esp+0ECh+var_A8]
.text:00407420                 mov     eax, [esp+0ECh+var_A8]
.text:00407424                 cmp     eax, ds:dword_42C050
.text:0040742A                 jb      loc_407290
.text:00407430
.text:00407430 loc_407430:                             ; CODE XREF: sub_407240+42↑j
.text:00407430                 mov     edx, [esp+0ECh+var_AC]
.text:00407434                 cmp     edx, 1
.text:00407437                 jbe     short loc_40745E
.text:00407439                 mov     ebp, ds:dword_42C320
.text:0040743F                 lea     eax, [edx+edx*2]
.text:00407442                 shl     eax, 2
.text:00407445                 add     eax, ebp
.text:00407447                 sub     eax, 0Ch
.text:0040744A                 lea     esi, [esi+0]
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_407240+21C↓j
.text:00407450                 cmp     byte ptr [eax], 0
.text:00407453                 jnz     short loc_40745E
.text:00407455                 dec     edx
.text:00407456                 sub     eax, 0Ch
.text:00407459                 cmp     edx, 1
.text:0040745C                 ja      short loc_407450
.text:0040745E
.text:0040745E loc_40745E:                             ; CODE XREF: sub_407240+1F7↑j
.text:0040745E                                         ; sub_407240+213↑j
.text:0040745E                 add     esp, 0DCh
.text:00407464                 mov     eax, edx
.text:00407466                 pop     ebx
.text:00407467                 pop     esi
.text:00407468                 pop     edi
.text:00407469                 pop     ebp
.text:0040746A                 retn
.text:0040746A ; ---------------------------------------------------------------------------
.text:0040746B                 align 10h
.text:00407470
.text:00407470 loc_407470:                             ; CODE XREF: sub_407240+163↑j
.text:00407470                 mov     eax, [esp+0ECh+var_A8]
.text:00407474                 lea     ecx, [ebx+1]
.text:00407477                 xor     edx, edx
.text:00407479                 div     ecx
.text:0040747B                 mov     edi, edx
.text:0040747D                 jmp     loc_4073C3
.text:00407482 ; ---------------------------------------------------------------------------
.text:00407482
.text:00407482 loc_407482:                             ; CODE XREF: sub_407240+158↑j
.text:00407482                 lea     ecx, [ebx+1]
.text:00407485                 jmp     short loc_407410
.text:00407487 ; ---------------------------------------------------------------------------
.text:00407487
.text:00407487 loc_407487:                             ; CODE XREF: sub_407240+FC↑j
.text:00407487                                         ; sub_407240+107↑j ...
.text:00407487                 inc     [esp+0ECh+var_B0]
.text:0040748B                 jmp     loc_407370
.text:00407490 ; ---------------------------------------------------------------------------
.text:00407490
.text:00407490 loc_407490:                             ; CODE XREF: sub_407240+F1↑j
.text:00407490                 dec     edx
.text:00407491                 jnz     loc_407370
.text:00407497                 test    byte ptr [ebx+8], 49h
.text:0040749B                 jz      loc_407370
.text:004074A1                 jmp     short loc_407487
.text:004074A3 ; ---------------------------------------------------------------------------
.text:004074A3
.text:004074A3 loc_4074A3:                             ; CODE XREF: sub_407240+97↑j
.text:004074A3                 mov     [esp+0ECh+var_DC], 200h ; int
.text:004074AB                 mov     ecx, ds:dword_42C180
.text:004074B1                 lea     ebp, [esp+0ECh+var_9C]
.text:004074B5                 mov     [esp+0ECh+var_D8], 0 ; int
.text:004074BD                 mov     edi, ds:dword_42C190
.text:004074C3                 mov     esi, ds:dword_42C194
.text:004074C9                 mov     [esp+0ECh+var_E0], ecx ; int
.text:004074CD                 mov     [esp+0ECh+var_D4], edi ; int
.text:004074D1                 mov     [esp+0ECh+var_D0], esi ; int
.text:004074D5                 mov     [esp+0ECh+Buffer], ebp ; Buffer
.text:004074D9                 mov     edx, [ebx+60h]
.text:004074DC                 mov     edi, [ebx+64h]
.text:004074DF                 mov     [esp+0ECh+Str], edx ; int
.text:004074E2                 mov     [esp+0ECh+var_E8], edi ; int
.text:004074E6                 call    sub_4126F0
.text:004074EB                 mov     [esp+0ECh+Str], eax ; Str
.text:004074EE                 call    strlen
.text:004074F3                 mov     esi, [esp+0ECh+var_B0]
.text:004074F7                 lea     ecx, [eax+esi+1]
.text:004074FB                 mov     [esp+0ECh+var_B0], ecx
.text:004074FF                 jmp     loc_4072ED
.text:00407504 ; ---------------------------------------------------------------------------
.text:00407504
.text:00407504 loc_407504:                             ; CODE XREF: sub_407240+77↑j
.text:00407504                 lea     ebp, [esp+0ECh+var_9C]
.text:00407508                 mov     [esp+0ECh+Buffer], ebp
.text:0040750C                 mov     edi, [ebx+10h]
.text:0040750F                 mov     esi, [ebx+14h]
.text:00407512                 mov     [esp+0ECh+Str], edi
.text:00407515                 mov     [esp+0ECh+var_E8], esi
.text:00407519                 call    sub_412370
.text:0040751E                 mov     [esp+0ECh+Str], eax ; Str
.text:00407521                 call    strlen
.text:00407526                 jmp     loc_4072C2
.text:00407526 sub_407240      endp
.text:00407526
.text:00407526 ; ---------------------------------------------------------------------------
.text:0040752B                 align 20h
.text:00407540 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00407540                                         ; DATA XREF: sub_409020+C↓o
.text:00407567                 align 20h
.text:00407580 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:00407580                                         ; DATA XREF: sub_409020:loc_409060↓o
.text:004075A1                 align 20h
.text:004075C0 aListInformatio db 'List information about the FILEs (the current directory by defaul'
.text:004075C0                                         ; DATA XREF: sub_409020+5F↓o
.text:004075C0                 db 't).',0Ah
.text:004075C0                 db 'Sort entries alphabetically if none of -cftuSUX nor --sort.',0Ah
.text:004075C0                 db 0Ah,0
.text:00407643                 align 20h
.text:00407660 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00407660                                         ; DATA XREF: sub_409020+81↓o
.text:00407660                 db 'ns too.',0Ah,0
.text:004076AA                 align 20h
.text:004076C0 aAAllDoNotIgnor db '  -a, --all                  do not ignore entries starting with '
.text:004076C0                                         ; DATA XREF: sub_409020+A3↓o
.text:004076C0                 db '.',0Ah
.text:004076C0                 db '  -A, --almost-all           do not list implied . and ..',0Ah
.text:004076C0                 db '      --author               with -l, print the author of each fi'
.text:004076C0                 db 'le',0Ah
.text:004076C0                 db '  -b, --escape               print octal escapes for nongraphic c'
.text:004076C0                 db 'haracters',0Ah,0
.text:004077CD                 align 20h
.text:004077E0 aBlockSizeSizeU db '      --block-size=SIZE      use SIZE-byte blocks',0Ah
.text:004077E0                                         ; DATA XREF: sub_409020+C5↓o
.text:004077E0                 db '  -B, --ignore-backups       do not list implied entries ending w'
.text:004077E0                 db 'ith ~',0Ah
.text:004077E0                 db '  -c                         with -lt: sort by, and show, ctime ('
.text:004077E0                 db 'time of last',0Ah
.text:004077E0                 db '                               modification of file status inform'
.text:004077E0                 db 'ation)',0Ah
.text:004077E0                 db '                               with -l: show ctime and sort by na'
.text:004077E0                 db 'me',0Ah
.text:004077E0                 db '                               otherwise: sort by ctime',0Ah,0
.text:0040796C                 align 20h
.text:00407980 aCListEntriesBy db '  -C                         list entries by columns',0Ah
.text:00407980                                         ; DATA XREF: sub_409020+E7↓o
.text:00407980                 db '      --color[=WHEN]         control whether color is used to dis'
.text:00407980                 db 'tinguish file',0Ah
.text:00407980                 db '                               types.  WHEN may be `never',27h,','
.text:00407980                 db ' `always',27h,', or `auto',27h,0Ah
.text:00407980                 db '  -d, --directory            list directory entries instead of co'
.text:00407980                 db 'ntents,',0Ah
.text:00407980                 db '                               and do not dereference symbolic li'
.text:00407980                 db 'nks',0Ah
.text:00407980                 db '  -D, --dired                generate output designed for Emacs',27h
.text:00407980                 db ' dired mode',0Ah,0
.text:00407B2F                 align 20h
.text:00407B40 aFDoNotSortEnab db '  -f                         do not sort, enable -aU, disable -ls'
.text:00407B40                                         ; DATA XREF: sub_409020+109↓o
.text:00407B40                 db 't',0Ah
.text:00407B40                 db '  -F, --classify             append indicator (one of */=@|) to e'
.text:00407B40                 db 'ntries',0Ah
.text:00407B40                 db '      --format=WORD          across -x, commas -m, horizontal -x,'
.text:00407B40                 db ' long -l,',0Ah
.text:00407B40                 db '                               single-column -1, verbose -l, vert'
.text:00407B40                 db 'ical -C',0Ah
.text:00407B40                 db '      --full-time            like -l --time-style=full-iso',0Ah,0
.text:00407C9B                 align 10h
.text:00407CA0 aGLikeLButDoNot db '  -g                         like -l, but do not list owner',0Ah
.text:00407CA0                                         ; DATA XREF: sub_409020+12B↓o
.text:00407CA0                 db '  -G, --no-group             like -l, but do not list group',0Ah
.text:00407CA0                 db '  -h, --human-readable       with -l, print sizes in human readab'
.text:00407CA0                 db 'le format',0Ah
.text:00407CA0                 db '                               (e.g., 1K 234M 2G)',0Ah
.text:00407CA0                 db '      --si                   likewise, but use powers of 1000 not'
.text:00407CA0                 db ' 1024',0Ah
.text:00407CA0                 db '  -H, --dereference-command-line',0Ah
.text:00407CA0                 db '                             follow symbolic links listed on the '
.text:00407CA0                 db 'command line',0Ah
.text:00407CA0                 db '      --dereference-command-line-symlink-to-dir',0Ah
.text:00407CA0                 db '                             follow each command line symbolic li'
.text:00407CA0                 db 'nk',0Ah
.text:00407CA0                 db '                             that points to a directory',0Ah
.text:00407CA0                 db '      --hide=PATTERN         do not list implied entries matching'
.text:00407CA0                 db ' shell PATTERN',0Ah
.text:00407CA0                 db '                               (overridden by -a or -A)',0Ah,0
.text:00407F80 aIndicatorStyle db '      --indicator-style=WORD append indicator with style WORD to '
.text:00407F80                                         ; DATA XREF: sub_409020+14D↓o
.text:00407F80                 db 'entry names:',0Ah
.text:00407F80                 db '                               none (default), classify (-F), fil'
.text:00407F80                 db 'e-type (-p)',0Ah
.text:00407F80                 db '  -i, --inode                with -l, print the index number of e'
.text:00407F80                 db 'ach file',0Ah
.text:00407F80                 db '  -I, --ignore=PATTERN       do not list implied entries matching'
.text:00407F80                 db ' shell PATTERN',0Ah
.text:00407F80                 db '  -k                         like --block-size=1K',0Ah,0
.text:004080E8                 align 20h
.text:00408100 aLUseALongListi db '  -l                         use a long listing format',0Ah
.text:00408100                                         ; DATA XREF: sub_409020+16F↓o
.text:00408100                 db '  -L, --dereference          when showing file information for a '
.text:00408100                 db 'symbolic',0Ah
.text:00408100                 db '                               link, show information for the fil'
.text:00408100                 db 'e the link',0Ah
.text:00408100                 db '                               references rather than for the lin'
.text:00408100                 db 'k itself',0Ah
.text:00408100                 db '  -m                         fill width with a comma separated li'
.text:00408100                 db 'st of entries',0Ah,0
.text:00408267                 align 20h
.text:00408280 aNNumericUidGid db '  -n, --numeric-uid-gid      like -l, but list numeric UIDs and G'
.text:00408280                                         ; DATA XREF: sub_409020+191↓o
.text:00408280                 db 'IDs',0Ah
.text:00408280                 db '  -N, --literal              print raw entry names (don',27h,'t t'
.text:00408280                 db 'reat e.g. control',0Ah
.text:00408280                 db '                               characters specially)',0Ah
.text:00408280                 db '  -o                         like -l, but do not list group infor'
.text:00408280                 db 'mation',0Ah
.text:00408280                 db '  -p, --file-type            append indicator (one of /=@|) to en'
.text:00408280                 db 'tries',0Ah,0
.text:004083D7                 align 10h
.text:004083E0 aQHideControlCh db '  -q, --hide-control-chars   print ? instead of non graphic chara'
.text:004083E0                                         ; DATA XREF: sub_409020+1B3↓o
.text:004083E0                 db 'cters',0Ah
.text:004083E0                 db '      --show-control-chars   show non graphic characters as-is (d'
.text:004083E0                 db 'efault',0Ah
.text:004083E0                 db '                             unless program is `ls',27h,' and out'
.text:004083E0                 db 'put is a terminal)',0Ah
.text:004083E0                 db '  -Q, --quote-name           enclose entry names in double quotes'
.text:004083E0                 db 0Ah
.text:004083E0                 db '      --quoting-style=WORD   use quoting style WORD for entry nam'
.text:004083E0                 db 'es:',0Ah
.text:004083E0                 db '                               literal, locale, shell, shell-alwa'
.text:004083E0                 db 'ys, c, escape',0Ah,0
.text:00408594                 align 10h
.text:004085A0 aRReverseRevers db '  -r, --reverse              reverse order while sorting',0Ah
.text:004085A0                                         ; DATA XREF: sub_409020+1D5↓o
.text:004085A0                 db '  -R, --recursive            list subdirectories recursively',0Ah
.text:004085A0                 db '  -s, --size                 with -l, print size of each file, in'
.text:004085A0                 db ' blocks',0Ah,0
.text:00408660 aSSortByFileSiz db '  -S                         sort by file size',0Ah
.text:00408660                                         ; DATA XREF: sub_409020+1F7↓o
.text:00408660                 db '      --sort=WORD            extension -X, none -U, size -S, time'
.text:00408660                 db ' -t,',0Ah
.text:00408660                 db '                             version -v, status -c, time -t, atim'
.text:00408660                 db 'e -u,',0Ah
.text:00408660                 db '                             access -u, use -u',0Ah
.text:00408660                 db '      --time=WORD            with -l, show time as WORD instead o'
.text:00408660                 db 'f modification',0Ah
.text:00408660                 db '                             time: atime, access, use, ctime or s'
.text:00408660                 db 'tatus; use',0Ah
.text:00408660                 db '                             specified time as sort key if --sort'
.text:00408660                 db '=time',0Ah,0
.text:0040882F                 align 20h
.text:00408840 aTimeStyleStyle db '      --time-style=STYLE     with -l, show times using style STYL'
.text:00408840                                         ; DATA XREF: sub_409020+219↓o
.text:00408840                 db 'E:',0Ah
.text:00408840                 db '                             full-iso, long-iso, iso, locale, +FO'
.text:00408840                 db 'RMAT.',0Ah
.text:00408840                 db '                             FORMAT is interpreted like `date',27h
.text:00408840                 db '; if FORMAT is',0Ah
.text:00408840                 db '                             FORMAT1<newline>FORMAT2, FORMAT1 app'
.text:00408840                 db 'lies to',0Ah
.text:00408840                 db '                             non-recent files and FORMAT2 to rece'
.text:00408840                 db 'nt files;',0Ah
.text:00408840                 db '                             if STYLE is prefixed with `posix-',27h
.text:00408840                 db ', STYLE',0Ah
.text:00408840                 db '                             takes effect only outside the POSIX '
.text:00408840                 db 'locale',0Ah
.text:00408840                 db '  -t                         sort by modification time',0Ah
.text:00408840                 db '  -T, --tabsize=COLS         assume tab stops at each COLS instea'
.text:00408840                 db 'd of 8',0Ah,0
.text:00408ABB                 align 10h
.text:00408AC0 aUWithLtSortByA db '  -u                         with -lt: sort by, and show, access '
.text:00408AC0                                         ; DATA XREF: sub_409020+23B↓o
.text:00408AC0                 db 'time',0Ah
.text:00408AC0                 db '                               with -l: show access time and sort'
.text:00408AC0                 db ' by name',0Ah
.text:00408AC0                 db '                               otherwise: sort by access time',0Ah
.text:00408AC0                 db '  -U                         do not sort; list entries in directo'
.text:00408AC0                 db 'ry order',0Ah
.text:00408AC0                 db '  -v                         sort by version',0Ah,0
.text:00408C06                 align 20h
.text:00408C20 aWWidthColsAssu db '  -w, --width=COLS           assume screen width instead of curre'
.text:00408C20                                         ; DATA XREF: sub_409020+25D↓o
.text:00408C20                 db 'nt value',0Ah
.text:00408C20                 db '  -x                         list entries by lines instead of by '
.text:00408C20                 db 'columns',0Ah
.text:00408C20                 db '  -X                         sort alphabetically by entry extensi'
.text:00408C20                 db 'on',0Ah
.text:00408C20                 db '  -1                         list one file per line',0Ah,0
.text:00408D2C                 align 20h
.text:00408D40 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00408D40                                         ; DATA XREF: sub_409020+27F↓o
.text:00408D6D                 align 20h
.text:00408D80 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00408D80                                         ; DATA XREF: sub_409020+2A1↓o
.text:00408DB6                 align 10h
.text:00408DC0 aSizeMayBeOrMay db 0Ah                  ; DATA XREF: sub_409020+2C3↓o
.text:00408DC0                 db 'SIZE may be (or may be an integer optionally followed by) one of '
.text:00408DC0                 db 'following:',0Ah
.text:00408DC0                 db 'kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P'
.text:00408DC0                 db ', E, Z, Y.',0Ah,0
.text:00408E5A                 align 10h
.text:00408E60 aByDefaultColor db 0Ah                  ; DATA XREF: sub_409020+2E5↓o
.text:00408E60                 db 'By default, color is not used to distinguish types of files.  Tha'
.text:00408E60                 db 't is',0Ah
.text:00408E60                 db 'equivalent to using --color=none.  Using the --color option witho'
.text:00408E60                 db 'ut the',0Ah
.text:00408E60                 db 'optional WHEN argument is equivalent to using --color=always.  Wi'
.text:00408E60                 db 'th',0Ah
.text:00408E60                 db '--color=auto, color codes are output only if standard output is c'
.text:00408E60                 db 'onnected',0Ah
.text:00408E60                 db 'to a terminal (tty).',0Ah,0
.text:00408F93                 align 10h
.text:00408FA0 aExitStatusIs0I db 0Ah                  ; DATA XREF: sub_409020+307↓o
.text:00408FA0                 db 'Exit status is 0 if OK, 1 if minor problems, 2 if serious trouble'
.text:00408FA0                 db '.',0Ah,0
.text:00408FE5 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_409020+329↓o
.text:00408FE5                 db 'Report bugs to <%s>.',0Ah,0
.text:00408FFC aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00408FFC                                         ; DATA XREF: sub_409020+336↓o
.text:00409012                 align 10h
.text:00409020
.text:00409020 ; =============== S U B R O U T I N E =======================================
.text:00409020
.text:00409020 ; Attributes: noreturn
.text:00409020
.text:00409020 ; void __cdecl __noreturn sub_409020(int Code)
.text:00409020 sub_409020      proc near               ; CODE XREF: sub_4025F0:loc_402D20↑p
.text:00409020                                         ; sub_411D10+A↓p
.text:00409020
.text:00409020 Stream          = dword ptr -1Ch
.text:00409020 Format          = dword ptr -18h
.text:00409020 var_14          = dword ptr -14h
.text:00409020 Code            = dword ptr  4
.text:00409020
.text:00409020                 push    ebx
.text:00409021                 sub     esp, 18h
.text:00409024                 mov     ebx, [esp+1Ch+Code]
.text:00409028                 test    ebx, ebx
.text:0040902A                 jz      short loc_409060
.text:0040902C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00409033                 call    ds:libintl_gettext
.text:00409039                 mov     edx, ds:_iob
.text:0040903F                 mov     ecx, ds:dword_42D300
.text:00409045                 add     edx, 40h ; '@'
.text:00409048                 mov     [esp+1Ch+var_14], ecx
.text:0040904C                 mov     [esp+1Ch+Format], eax ; Format
.text:00409050                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00409053                 call    fprintf
.text:00409058
.text:00409058 loc_409058:                             ; CODE XREF: sub_409020+346↓j
.text:00409058                 mov     [esp+1Ch+Stream], ebx ; Code
.text:0040905B                 call    exit
.text:00409060 ; ---------------------------------------------------------------------------
.text:00409060
.text:00409060 loc_409060:                             ; CODE XREF: sub_409020+A↑j
.text:00409060                 mov     [esp+1Ch+Stream], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00409067                 call    ds:libintl_gettext
.text:0040906D                 mov     ecx, ds:dword_42D300
.text:00409073                 mov     [esp+1Ch+Stream], eax ; Format
.text:00409076                 mov     [esp+1Ch+Format], ecx
.text:0040907A                 call    printf
.text:0040907F                 mov     [esp+1Ch+Stream], offset aListInformatio ; "List information about the FILEs (the c"...
.text:00409086                 call    ds:libintl_gettext
.text:0040908C                 mov     ecx, ds:_iob
.text:00409092                 add     ecx, 20h ; ' '
.text:00409095                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409099                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040909C                 call    fputs
.text:004090A1                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:004090A8                 call    ds:libintl_gettext
.text:004090AE                 mov     ecx, ds:_iob
.text:004090B4                 add     ecx, 20h ; ' '
.text:004090B7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004090BB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004090BE                 call    fputs
.text:004090C3                 mov     [esp+1Ch+Stream], offset aAAllDoNotIgnor ; "  -a, --all                  do not ign"...
.text:004090CA                 call    ds:libintl_gettext
.text:004090D0                 mov     ecx, ds:_iob
.text:004090D6                 add     ecx, 20h ; ' '
.text:004090D9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004090DD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004090E0                 call    fputs
.text:004090E5                 mov     [esp+1Ch+Stream], offset aBlockSizeSizeU ; "      --block-size=SIZE      use SIZE-b"...
.text:004090EC                 call    ds:libintl_gettext
.text:004090F2                 mov     ecx, ds:_iob
.text:004090F8                 add     ecx, 20h ; ' '
.text:004090FB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004090FF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409102                 call    fputs
.text:00409107                 mov     [esp+1Ch+Stream], offset aCListEntriesBy ; "  -C                         list entri"...
.text:0040910E                 call    ds:libintl_gettext
.text:00409114                 mov     ecx, ds:_iob
.text:0040911A                 add     ecx, 20h ; ' '
.text:0040911D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409121                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409124                 call    fputs
.text:00409129                 mov     [esp+1Ch+Stream], offset aFDoNotSortEnab ; "  -f                         do not sor"...
.text:00409130                 call    ds:libintl_gettext
.text:00409136                 mov     ecx, ds:_iob
.text:0040913C                 add     ecx, 20h ; ' '
.text:0040913F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409143                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409146                 call    fputs
.text:0040914B                 mov     [esp+1Ch+Stream], offset aGLikeLButDoNot ; "  -g                         like -l, b"...
.text:00409152                 call    ds:libintl_gettext
.text:00409158                 mov     ecx, ds:_iob
.text:0040915E                 add     ecx, 20h ; ' '
.text:00409161                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409165                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409168                 call    fputs
.text:0040916D                 mov     [esp+1Ch+Stream], offset aIndicatorStyle ; "      --indicator-style=WORD append ind"...
.text:00409174                 call    ds:libintl_gettext
.text:0040917A                 mov     ecx, ds:_iob
.text:00409180                 add     ecx, 20h ; ' '
.text:00409183                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409187                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040918A                 call    fputs
.text:0040918F                 mov     [esp+1Ch+Stream], offset aLUseALongListi ; "  -l                         use a long"...
.text:00409196                 call    ds:libintl_gettext
.text:0040919C                 mov     ecx, ds:_iob
.text:004091A2                 add     ecx, 20h ; ' '
.text:004091A5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004091A9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004091AC                 call    fputs
.text:004091B1                 mov     [esp+1Ch+Stream], offset aNNumericUidGid ; "  -n, --numeric-uid-gid      like -l, b"...
.text:004091B8                 call    ds:libintl_gettext
.text:004091BE                 mov     ecx, ds:_iob
.text:004091C4                 add     ecx, 20h ; ' '
.text:004091C7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004091CB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004091CE                 call    fputs
.text:004091D3                 mov     [esp+1Ch+Stream], offset aQHideControlCh ; "  -q, --hide-control-chars   print ? in"...
.text:004091DA                 call    ds:libintl_gettext
.text:004091E0                 mov     ecx, ds:_iob
.text:004091E6                 add     ecx, 20h ; ' '
.text:004091E9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004091ED                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004091F0                 call    fputs
.text:004091F5                 mov     [esp+1Ch+Stream], offset aRReverseRevers ; "  -r, --reverse              reverse or"...
.text:004091FC                 call    ds:libintl_gettext
.text:00409202                 mov     ecx, ds:_iob
.text:00409208                 add     ecx, 20h ; ' '
.text:0040920B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040920F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409212                 call    fputs
.text:00409217                 mov     [esp+1Ch+Stream], offset aSSortByFileSiz ; "  -S                         sort by fi"...
.text:0040921E                 call    ds:libintl_gettext
.text:00409224                 mov     ecx, ds:_iob
.text:0040922A                 add     ecx, 20h ; ' '
.text:0040922D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409231                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409234                 call    fputs
.text:00409239                 mov     [esp+1Ch+Stream], offset aTimeStyleStyle ; "      --time-style=STYLE     with -l, s"...
.text:00409240                 call    ds:libintl_gettext
.text:00409246                 mov     ecx, ds:_iob
.text:0040924C                 add     ecx, 20h ; ' '
.text:0040924F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409253                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409256                 call    fputs
.text:0040925B                 mov     [esp+1Ch+Stream], offset aUWithLtSortByA ; "  -u                         with -lt: "...
.text:00409262                 call    ds:libintl_gettext
.text:00409268                 mov     ecx, ds:_iob
.text:0040926E                 add     ecx, 20h ; ' '
.text:00409271                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409275                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409278                 call    fputs
.text:0040927D                 mov     [esp+1Ch+Stream], offset aWWidthColsAssu ; "  -w, --width=COLS           assume scr"...
.text:00409284                 call    ds:libintl_gettext
.text:0040928A                 mov     ecx, ds:_iob
.text:00409290                 add     ecx, 20h ; ' '
.text:00409293                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409297                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040929A                 call    fputs
.text:0040929F                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:004092A6                 call    ds:libintl_gettext
.text:004092AC                 mov     ecx, ds:_iob
.text:004092B2                 add     ecx, 20h ; ' '
.text:004092B5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004092B9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004092BC                 call    fputs
.text:004092C1                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:004092C8                 call    ds:libintl_gettext
.text:004092CE                 mov     ecx, ds:_iob
.text:004092D4                 add     ecx, 20h ; ' '
.text:004092D7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004092DB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004092DE                 call    fputs
.text:004092E3                 mov     [esp+1Ch+Stream], offset aSizeMayBeOrMay ; "\nSIZE may be (or may be an integer opt"...
.text:004092EA                 call    ds:libintl_gettext
.text:004092F0                 mov     ecx, ds:_iob
.text:004092F6                 add     ecx, 20h ; ' '
.text:004092F9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004092FD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409300                 call    fputs
.text:00409305                 mov     [esp+1Ch+Stream], offset aByDefaultColor ; "\nBy default, color is not used to dist"...
.text:0040930C                 call    ds:libintl_gettext
.text:00409312                 mov     ecx, ds:_iob
.text:00409318                 add     ecx, 20h ; ' '
.text:0040931B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040931F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409322                 call    fputs
.text:00409327                 mov     [esp+1Ch+Stream], offset aExitStatusIs0I ; "\nExit status is 0 if OK, 1 if minor pr"...
.text:0040932E                 call    ds:libintl_gettext
.text:00409334                 mov     ecx, ds:_iob
.text:0040933A                 add     ecx, 20h ; ' '
.text:0040933D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00409341                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00409344                 call    fputs
.text:00409349                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00409350                 call    ds:libintl_gettext
.text:00409356                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040935E                 mov     [esp+1Ch+Stream], eax ; Format
.text:00409361                 call    printf
.text:00409366                 jmp     loc_409058
.text:00409366 sub_409020      endp
.text:00409366
.text:00409366 ; ---------------------------------------------------------------------------
.text:0040936B ; const char aLu_0[]
.text:0040936B aLu_0           db ' %lu',0             ; DATA XREF: sub_409370+BB↓o
.text:00409370
.text:00409370 ; =============== S U B R O U T I N E =======================================
.text:00409370
.text:00409370
.text:00409370 ; int __cdecl sub_409370(char *, FILE *File)
.text:00409370 sub_409370      proc near               ; CODE XREF: sub_401B10+303↑p
.text:00409370                                         ; sub_401B10+317↑p
.text:00409370
.text:00409370 Buffer          = dword ptr -1Ch
.text:00409370 Stream          = dword ptr -18h
.text:00409370 var_14          = dword ptr -14h
.text:00409370 arg_0           = dword ptr  4
.text:00409370 File            = dword ptr  8
.text:00409370
.text:00409370                 push    ebp
.text:00409371                 push    edi
.text:00409372                 push    esi
.text:00409373                 push    ebx
.text:00409374                 sub     esp, 0Ch
.text:00409377                 mov     ecx, [esp+1Ch+File]
.text:0040937B                 mov     ebp, [esp+1Ch+arg_0]
.text:0040937F                 mov     edx, [ecx+0Ch]
.text:00409382                 mov     esi, [ecx+8]
.text:00409385                 mov     ebx, edx
.text:00409387                 sub     ebx, esi
.text:00409389                 mov     edi, ebx
.text:0040938B                 shr     edi, 2
.text:0040938E                 jz      short loc_4093FE
.text:00409390                 cmp     edx, esi
.text:00409392                 jz      loc_409441
.text:00409398
.text:00409398 loc_409398:                             ; CODE XREF: sub_409370+D5↓j
.text:00409398                 mov     ebx, [ecx+18h]
.text:0040939B                 mov     eax, [ecx+4]
.text:0040939E                 add     edx, ebx
.text:004093A0                 not     ebx
.text:004093A2                 and     edx, ebx
.text:004093A4                 mov     ebx, [ecx+10h]
.text:004093A7                 mov     [ecx+0Ch], edx
.text:004093AA                 sub     edx, eax
.text:004093AC                 mov     [esp+1Ch+var_14], ebx
.text:004093B0                 sub     ebx, eax
.text:004093B2                 cmp     edx, ebx
.text:004093B4                 jle     short loc_4093BD
.text:004093B6                 mov     edx, [esp+1Ch+var_14]
.text:004093BA                 mov     [ecx+0Ch], edx
.text:004093BD
.text:004093BD loc_4093BD:                             ; CODE XREF: sub_409370+44↑j
.text:004093BD                 mov     ebx, [ecx+0Ch]
.text:004093C0                 mov     [ecx+8], ebx
.text:004093C3                 mov     ecx, ds:_iob
.text:004093C9                 xor     ebx, ebx
.text:004093CB                 mov     [esp+1Ch+Buffer], ebp ; Buffer
.text:004093CE                 add     ecx, 20h ; ' '
.text:004093D1                 mov     [esp+1Ch+Stream], ecx ; Stream
.text:004093D5                 call    fputs
.text:004093DA                 cmp     ebx, edi
.text:004093DC                 jb      short loc_409427
.text:004093DE
.text:004093DE loc_4093DE:                             ; CODE XREF: sub_409370+CF↓j
.text:004093DE                 mov     edi, ds:_iob
.text:004093E4                 mov     esi, [edi+24h]
.text:004093E7                 dec     esi
.text:004093E8                 mov     [edi+24h], esi
.text:004093EB                 test    esi, esi
.text:004093ED                 js      short loc_409406
.text:004093EF                 mov     ecx, ds:_iob
.text:004093F5                 mov     eax, [ecx+20h]
.text:004093F8                 mov     byte ptr [eax], 0Ah
.text:004093FB                 inc     dword ptr [ecx+20h]
.text:004093FE
.text:004093FE loc_4093FE:                             ; CODE XREF: sub_409370+1E↑j
.text:004093FE                 add     esp, 0Ch
.text:00409401                 pop     ebx
.text:00409402                 pop     esi
.text:00409403                 pop     edi
.text:00409404                 pop     ebp
.text:00409405                 retn
.text:00409406 ; ---------------------------------------------------------------------------
.text:00409406
.text:00409406 loc_409406:                             ; CODE XREF: sub_409370+7D↑j
.text:00409406                 mov     [esp+1Ch+arg_0], 0Ah ; Ch
.text:0040940E                 mov     edx, ds:_iob
.text:00409414                 add     edx, 20h ; ' '
.text:00409417                 mov     [esp+1Ch+File], edx ; File
.text:0040941B                 add     esp, 0Ch
.text:0040941E                 pop     ebx
.text:0040941F                 pop     esi
.text:00409420                 pop     edi
.text:00409421                 pop     ebp
.text:00409422                 jmp     _flsbuf
.text:00409427 ; ---------------------------------------------------------------------------
.text:00409427
.text:00409427 loc_409427:                             ; CODE XREF: sub_409370+6C↑j
.text:00409427                                         ; sub_409370+CD↓j
.text:00409427                 mov     ebp, [esi+ebx*4]
.text:0040942A                 inc     ebx
.text:0040942B                 mov     [esp+1Ch+Buffer], offset aLu_0 ; " %lu"
.text:00409432                 mov     [esp+1Ch+Stream], ebp
.text:00409436                 call    printf
.text:0040943B                 cmp     ebx, edi
.text:0040943D                 jb      short loc_409427
.text:0040943F                 jmp     short loc_4093DE
.text:00409441 ; ---------------------------------------------------------------------------
.text:00409441
.text:00409441 loc_409441:                             ; CODE XREF: sub_409370+22↑j
.text:00409441                 or      byte ptr [ecx+28h], 2
.text:00409445                 jmp     loc_409398
.text:00409445 sub_409370      endp
.text:00409445
.text:00409445 ; ---------------------------------------------------------------------------
.text:0040944A                 align 10h
.text:00409450
.text:00409450 ; =============== S U B R O U T I N E =======================================
.text:00409450
.text:00409450
.text:00409450 sub_409450      proc near               ; DATA XREF: sub_401B10+609↑o
.text:00409450
.text:00409450 var_1C          = dword ptr -1Ch
.text:00409450 var_18          = dword ptr -18h
.text:00409450 var_14          = dword ptr -14h
.text:00409450 var_10          = dword ptr -10h
.text:00409450 arg_0           = dword ptr  4
.text:00409450 arg_4           = dword ptr  8
.text:00409450
.text:00409450                 sub     esp, 1Ch
.text:00409453                 mov     ecx, [esp+1Ch+arg_0]
.text:00409457                 mov     edx, [ecx+4]
.text:0040945A                 mov     eax, [ecx]
.text:0040945C                 mov     ecx, [esp+1Ch+arg_4]
.text:00409460                 mov     [esp+1Ch+var_10], 0
.text:00409468                 mov     [esp+1Ch+var_1C], eax
.text:0040946B                 mov     [esp+1Ch+var_14], ecx
.text:0040946F                 mov     [esp+1Ch+var_18], edx
.text:00409473                 call    sub_429070
.text:00409478                 add     esp, 1Ch
.text:0040947B                 retn
.text:0040947B sub_409450      endp
.text:0040947B
.text:0040947B ; ---------------------------------------------------------------------------
.text:0040947C                 align 10h
.text:00409480
.text:00409480 ; =============== S U B R O U T I N E =======================================
.text:00409480
.text:00409480
.text:00409480 sub_409480      proc near               ; DATA XREF: sub_401B10+601↑o
.text:00409480
.text:00409480 var_11          = byte ptr -11h
.text:00409480 var_10          = dword ptr -10h
.text:00409480 var_C           = dword ptr -0Ch
.text:00409480 var_8           = dword ptr -8
.text:00409480 var_4           = dword ptr -4
.text:00409480 arg_0           = dword ptr  4
.text:00409480 arg_4           = dword ptr  8
.text:00409480
.text:00409480                 sub     esp, 14h
.text:00409483                 mov     [esp+14h+var_8], edi
.text:00409487                 mov     edi, [esp+14h+arg_0]
.text:0040948B                 mov     [esp+14h+var_4], ebp
.text:0040948F                 mov     ebp, [esp+14h+arg_4]
.text:00409493                 mov     [esp+14h+var_C], esi
.text:00409497                 mov     [esp+14h+var_10], ebx
.text:0040949B                 mov     ebx, [edi+4]
.text:0040949E                 mov     [esp+14h+var_11], 0
.text:004094A3                 mov     ecx, [edi]
.text:004094A5                 mov     eax, [ebp+0]
.text:004094A8                 mov     edx, [ebp+4]
.text:004094AB                 mov     esi, ebx
.text:004094AD                 xor     eax, ecx
.text:004094AF                 xor     esi, edx
.text:004094B1                 or      esi, eax
.text:004094B3                 jnz     short loc_4094D0
.text:004094B5                 mov     edx, [edi+0Ch]
.text:004094B8                 mov     esi, [edi+8]
.text:004094BB                 mov     ecx, [ebp+0Ch]
.text:004094BE                 mov     edi, [ebp+8]
.text:004094C1                 mov     eax, edx
.text:004094C3                 xor     eax, ecx
.text:004094C5                 xor     edi, esi
.text:004094C7                 or      eax, edi
.text:004094C9                 jnz     short loc_4094D0
.text:004094CB                 mov     [esp+14h+var_11], 1
.text:004094D0
.text:004094D0 loc_4094D0:                             ; CODE XREF: sub_409480+33↑j
.text:004094D0                                         ; sub_409480+49↑j
.text:004094D0                 movzx   eax, [esp+14h+var_11]
.text:004094D5                 mov     ebx, [esp+14h+var_10]
.text:004094D9                 mov     esi, [esp+14h+var_C]
.text:004094DD                 mov     edi, [esp+14h+var_8]
.text:004094E1                 mov     ebp, [esp+14h+var_4]
.text:004094E5                 add     esp, 14h
.text:004094E8                 retn
.text:004094E8 sub_409480      endp
.text:004094E8
.text:004094E8 ; ---------------------------------------------------------------------------
.text:004094E9                 align 10h
.text:004094F0
.text:004094F0 ; =============== S U B R O U T I N E =======================================
.text:004094F0
.text:004094F0 ; Attributes: thunk
.text:004094F0
.text:004094F0 ; void __cdecl j_free(void *Block)
.text:004094F0 j_free          proc near               ; DATA XREF: sub_401B10:loc_402109↑o
.text:004094F0
.text:004094F0 Block           = dword ptr  4
.text:004094F0
.text:004094F0                 jmp     free
.text:004094F0 j_free          endp
.text:004094F0
.text:004094F0 ; ---------------------------------------------------------------------------
.text:004094F5                 align 10h
.text:00409500
.text:00409500 ; =============== S U B R O U T I N E =======================================
.text:00409500
.text:00409500
.text:00409500 sub_409500      proc near               ; DATA XREF: sub_401B10+783↑o
.text:00409500
.text:00409500 Signal          = dword ptr -0Ch
.text:00409500 Function        = dword ptr -8
.text:00409500 var_4           = dword ptr -4
.text:00409500 arg_0           = dword ptr  4
.text:00409500
.text:00409500                 sub     esp, 0Ch
.text:00409503                 mov     [esp+0Ch+var_4], ebx
.text:00409507                 mov     ebx, [esp+0Ch+arg_0]
.text:0040950B                 mov     [esp+0Ch+Function], 1 ; Function
.text:00409513                 mov     [esp+0Ch+Signal], ebx ; Signal
.text:00409516                 call    signal
.text:0040951B                 mov     edx, ds:Signal
.text:00409521                 test    edx, edx
.text:00409523                 jnz     short loc_40952B
.text:00409525                 mov     ds:Signal, ebx
.text:0040952B
.text:0040952B loc_40952B:                             ; CODE XREF: sub_409500+23↑j
.text:0040952B                 mov     ebx, [esp+0Ch+var_4]
.text:0040952F                 add     esp, 0Ch
.text:00409532                 retn
.text:00409532 sub_409500      endp
.text:00409532
.text:00409532 ; ---------------------------------------------------------------------------
.text:00409533                 align 10h
.text:00409540
.text:00409540 ; =============== S U B R O U T I N E =======================================
.text:00409540
.text:00409540
.text:00409540 ; void __cdecl Function(int)
.text:00409540 Function        proc near               ; DATA XREF: sub_401B10+77C↑o
.text:00409540                                         ; Function+7↓o
.text:00409540
.text:00409540 Signal          = dword ptr -0Ch
.text:00409540 Function        = dword ptr -8
.text:00409540 arg_0           = dword ptr  4
.text:00409540
.text:00409540                 sub     esp, 0Ch
.text:00409543                 mov     edx, [esp+0Ch+arg_0]
.text:00409547                 mov     [esp+0Ch+Function], offset Function ; Function
.text:0040954F                 mov     [esp+0Ch+Signal], edx ; Signal
.text:00409552                 call    signal
.text:00409557                 mov     edx, ds:Signal
.text:0040955D                 test    edx, edx
.text:0040955F                 jnz     short loc_40956E
.text:00409561                 mov     ecx, ds:dword_42C300
.text:00409567                 inc     ecx
.text:00409568                 mov     ds:dword_42C300, ecx
.text:0040956E
.text:0040956E loc_40956E:                             ; CODE XREF: Function+1F↑j
.text:0040956E                 add     esp, 0Ch
.text:00409571                 retn
.text:00409571 Function        endp
.text:00409571
.text:00409571 ; ---------------------------------------------------------------------------
.text:00409572                 align 10h
.text:00409580
.text:00409580 ; =============== S U B R O U T I N E =======================================
.text:00409580
.text:00409580
.text:00409580 sub_409580      proc near               ; CODE XREF: sub_403810:loc_4039B0↑p
.text:00409580                                         ; sub_403810+2D1↑p
.text:00409580
.text:00409580 var_12          = byte ptr -12h
.text:00409580 var_11          = byte ptr -11h
.text:00409580 arg_0           = dword ptr  4
.text:00409580 arg_4           = dword ptr  8
.text:00409580 arg_8           = byte ptr  0Ch
.text:00409580 arg_C           = dword ptr  10h
.text:00409580
.text:00409580                 push    ebp
.text:00409581                 push    edi
.text:00409582                 xor     edi, edi
.text:00409584                 push    esi
.text:00409585                 push    ebx
.text:00409586                 sub     esp, 4
.text:00409589                 mov     ebp, [esp+14h+arg_0]
.text:0040958D                 movzx   edx, [esp+14h+arg_8]
.text:00409592                 mov     [esp+14h+var_12], 0
.text:00409597                 mov     ebx, [ebp+0]
.text:0040959A                 mov     [esp+14h+var_11], dl
.text:0040959E                 mov     edx, [esp+14h+arg_4]
.text:004095A2                 mov     ecx, [edx]
.text:004095A4                 lea     esi, [esi+0]
.text:004095AA                 lea     edi, [edi+0]
.text:004095B0
.text:004095B0 loc_4095B0:                             ; CODE XREF: sub_409580+38D↓j
.text:004095B0                 xor     esi, esi
.text:004095B2                 lea     esi, [esi+0]
.text:004095B9                 lea     edi, [edi+0]
.text:004095C0
.text:004095C0 loc_4095C0:                             ; CODE XREF: sub_409580+83↓j
.text:004095C0                                         ; sub_409580+C0↓j ...
.text:004095C0                 jmp     ds:jpt_4095C0[esi*4] ; switch 5 cases
.text:004095C0 ; ---------------------------------------------------------------------------
.text:004095C7                 align 4
.text:004095C8 jpt_4095C0      dd offset loc_4095E0    ; DATA XREF: sub_409580:loc_4095C0↑r
.text:004095C8                 dd offset loc_409655    ; jump table for switch statement
.text:004095C8                 dd offset loc_4098E6
.text:004095C8                 dd offset loc_409912
.text:004095C8                 dd offset loc_409A34
.text:004095DC                 align 10h
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: sub_409580:loc_4095C0↑j
.text:004095E0                                         ; DATA XREF: sub_409580:jpt_4095C0↑o
.text:004095E0                 movzx   edx, byte ptr [ecx] ; jumptable 004095C0 case 0
.text:004095E3                 movsx   eax, dl
.text:004095E6                 cmp     eax, 3Dh ; '='
.text:004095E9                 jz      short loc_40964C
.text:004095EB                 cmp     eax, 3Dh ; '='
.text:004095EE                 jg      short loc_409630
.text:004095F0                 test    eax, eax
.text:004095F2                 jz      short loc_409622
.text:004095F4                 cmp     eax, 3Ah ; ':'
.text:004095F7                 jz      short loc_409622
.text:004095F9
.text:004095F9 loc_4095F9:                             ; CODE XREF: sub_409580+B8↓j
.text:004095F9                                         ; sub_409580+D1↓j
.text:004095F9                 mov     [ebx], dl
.text:004095FB                 inc     ecx
.text:004095FC                 inc     edi
.text:004095FD                 inc     ebx
.text:004095FE                 mov     esi, esi
.text:00409600
.text:00409600 loc_409600:                             ; CODE XREF: sub_409580+2E1↓j
.text:00409600                                         ; sub_409580+4D9↓j
.text:00409600                 cmp     esi, 4
.text:00409603                 jbe     short loc_4095C0
.text:00409605
.text:00409605 def_4095C0:                             ; CODE XREF: sub_409580+A7↓j
.text:00409605                 mov     [ebp+0], ebx    ; jumptable 004095C0 default case
.text:00409608                 xor     eax, eax
.text:0040960A                 mov     ebx, [esp+14h+arg_4]
.text:0040960E                 cmp     esi, 6
.text:00409611                 setnz   al
.text:00409614                 mov     [ebx], ecx
.text:00409616                 mov     ecx, [esp+14h+arg_C]
.text:0040961A                 mov     [ecx], edi
.text:0040961C                 pop     ebp
.text:0040961D                 pop     ebx
.text:0040961E                 pop     esi
.text:0040961F                 pop     edi
.text:00409620                 pop     ebp
.text:00409621                 retn
.text:00409622 ; ---------------------------------------------------------------------------
.text:00409622
.text:00409622 loc_409622:                             ; CODE XREF: sub_409580+72↑j
.text:00409622                                         ; sub_409580+77↑j ...
.text:00409622                 mov     esi, 5
.text:00409627                 jmp     short def_4095C0 ; jumptable 004095C0 default case
.text:00409627 ; ---------------------------------------------------------------------------
.text:00409629                 align 10h
.text:00409630
.text:00409630 loc_409630:                             ; CODE XREF: sub_409580+6E↑j
.text:00409630                 cmp     eax, 5Ch ; '\'
.text:00409633                 jz      short loc_409645
.text:00409635                 cmp     eax, 5Eh ; '^'
.text:00409638                 jnz     short loc_4095F9
.text:0040963A                 mov     esi, 4
.text:0040963F
.text:0040963F loc_40963F:                             ; CODE XREF: sub_409580+CA↓j
.text:0040963F                 inc     ecx
.text:00409640                 jmp     loc_4095C0
.text:00409645 ; ---------------------------------------------------------------------------
.text:00409645
.text:00409645 loc_409645:                             ; CODE XREF: sub_409580+B3↑j
.text:00409645                 mov     esi, 1
.text:0040964A                 jmp     short loc_40963F
.text:0040964C ; ---------------------------------------------------------------------------
.text:0040964C
.text:0040964C loc_40964C:                             ; CODE XREF: sub_409580+69↑j
.text:0040964C                 cmp     [esp+14h+var_11], 0
.text:00409651                 jz      short loc_4095F9
.text:00409653                 jmp     short loc_409622
.text:00409655 ; ---------------------------------------------------------------------------
.text:00409655
.text:00409655 loc_409655:                             ; CODE XREF: sub_409580:loc_4095C0↑j
.text:00409655                                         ; DATA XREF: sub_409580:jpt_4095C0↑o
.text:00409655                 movzx   eax, byte ptr [ecx] ; jumptable 004095C0 case 1
.text:00409658                 movsx   edx, al
.text:0040965B                 cmp     edx, 78h        ; switch 121 cases
.text:0040965E                 ja      def_409664      ; jumptable 00409664 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00409664                 jmp     ds:jpt_409664[edx*4] ; switch jump
.text:00409664 ; ---------------------------------------------------------------------------
.text:0040966B                 align 4
.text:0040966C jpt_409664      dd offset loc_409866, offset def_409664, offset def_409664
.text:0040966C                                         ; DATA XREF: sub_409580+E4↑r
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664 ; jump table for switch statement
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset loc_409850, offset loc_409850, offset loc_409850
.text:0040966C                 dd offset loc_409850, offset loc_409850, offset loc_409850
.text:0040966C                 dd offset loc_409850, offset loc_409850, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset loc_40986D, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset loc_4098D7, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset loc_409892
.text:0040966C                 dd offset def_409664, offset loc_409899, offset loc_4098A0
.text:0040966C                 dd offset def_409664, offset def_409664, offset loc_4098A7
.text:0040966C                 dd offset loc_4098AE, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset def_409664, offset def_409664, offset loc_4098B5
.text:0040966C                 dd offset def_409664, offset def_409664, offset def_409664
.text:0040966C                 dd offset loc_4098BC, offset def_409664, offset loc_4098C3
.text:0040966C                 dd offset def_409664, offset loc_4098CA, offset def_409664
.text:0040966C                 dd offset loc_4098D7
.text:00409850 ; ---------------------------------------------------------------------------
.text:00409850
.text:00409850 loc_409850:                             ; CODE XREF: sub_409580+E4↑j
.text:00409850                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:00409850                 sub     al, 30h ; '0'   ; jumptable 00409664 cases 48-55
.text:00409852                 mov     esi, 2
.text:00409857                 mov     [esp+14h+var_12], al
.text:0040985B                 nop
.text:0040985C                 lea     esi, [esi+0]
.text:00409860
.text:00409860 loc_409860:                             ; CODE XREF: sub_409580+2EB↓j
.text:00409860                                         ; sub_409580+303↓j ...
.text:00409860                 inc     ecx
.text:00409861                 jmp     loc_409600
.text:00409866 ; ---------------------------------------------------------------------------
.text:00409866
.text:00409866 loc_409866:                             ; CODE XREF: sub_409580+E4↑j
.text:00409866                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:00409866                 mov     esi, 6          ; jumptable 00409664 case 0
.text:0040986B                 jmp     short loc_409860
.text:0040986D ; ---------------------------------------------------------------------------
.text:0040986D
.text:0040986D loc_40986D:                             ; CODE XREF: sub_409580+E4↑j
.text:0040986D                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:0040986D                 mov     [esp+14h+var_12], 7Fh ; jumptable 00409664 case 63
.text:00409872                 lea     esi, [esi+0]
.text:00409879                 lea     edi, [edi+0]
.text:00409880
.text:00409880 loc_409880:                             ; CODE XREF: sub_409580+317↓j
.text:00409880                                         ; sub_409580+31E↓j ...
.text:00409880                 cmp     esi, 1
.text:00409883                 jnz     short loc_409860
.text:00409885                 movzx   edx, [esp+14h+var_12]
.text:0040988A                 inc     edi
.text:0040988B                 xor     esi, esi
.text:0040988D                 mov     [ebx], dl
.text:0040988F                 inc     ebx
.text:00409890                 jmp     short loc_409860
.text:00409892 ; ---------------------------------------------------------------------------
.text:00409892
.text:00409892 loc_409892:                             ; CODE XREF: sub_409580+E4↑j
.text:00409892                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:00409892                 mov     [esp+14h+var_12], 20h ; ' ' ; jumptable 00409664 case 95
.text:00409897                 jmp     short loc_409880
.text:00409899 ; ---------------------------------------------------------------------------
.text:00409899
.text:00409899 loc_409899:                             ; CODE XREF: sub_409580+E4↑j
.text:00409899                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:00409899                 mov     [esp+14h+var_12], 7 ; jumptable 00409664 case 97
.text:0040989E                 jmp     short loc_409880
.text:004098A0 ; ---------------------------------------------------------------------------
.text:004098A0
.text:004098A0 loc_4098A0:                             ; CODE XREF: sub_409580+E4↑j
.text:004098A0                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098A0                 mov     [esp+14h+var_12], 8 ; jumptable 00409664 case 98
.text:004098A5                 jmp     short loc_409880
.text:004098A7 ; ---------------------------------------------------------------------------
.text:004098A7
.text:004098A7 loc_4098A7:                             ; CODE XREF: sub_409580+E4↑j
.text:004098A7                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098A7                 mov     [esp+14h+var_12], 1Bh ; jumptable 00409664 case 101
.text:004098AC                 jmp     short loc_409880
.text:004098AE ; ---------------------------------------------------------------------------
.text:004098AE
.text:004098AE loc_4098AE:                             ; CODE XREF: sub_409580+E4↑j
.text:004098AE                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098AE                 mov     [esp+14h+var_12], 0Ch ; jumptable 00409664 case 102
.text:004098B3                 jmp     short loc_409880
.text:004098B5 ; ---------------------------------------------------------------------------
.text:004098B5
.text:004098B5 loc_4098B5:                             ; CODE XREF: sub_409580+E4↑j
.text:004098B5                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098B5                 mov     [esp+14h+var_12], 0Ah ; jumptable 00409664 case 110
.text:004098BA                 jmp     short loc_409880
.text:004098BC ; ---------------------------------------------------------------------------
.text:004098BC
.text:004098BC loc_4098BC:                             ; CODE XREF: sub_409580+E4↑j
.text:004098BC                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098BC                 mov     [esp+14h+var_12], 0Dh ; jumptable 00409664 case 114
.text:004098C1                 jmp     short loc_409880
.text:004098C3 ; ---------------------------------------------------------------------------
.text:004098C3
.text:004098C3 loc_4098C3:                             ; CODE XREF: sub_409580+E4↑j
.text:004098C3                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098C3                 mov     [esp+14h+var_12], 9 ; jumptable 00409664 case 116
.text:004098C8                 jmp     short loc_409880
.text:004098CA ; ---------------------------------------------------------------------------
.text:004098CA
.text:004098CA loc_4098CA:                             ; CODE XREF: sub_409580+E4↑j
.text:004098CA                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098CA                 mov     [esp+14h+var_12], 0Bh ; jumptable 00409664 case 118
.text:004098CF                 jmp     short loc_409880
.text:004098D1 ; ---------------------------------------------------------------------------
.text:004098D1
.text:004098D1 def_409664:                             ; CODE XREF: sub_409580+DE↑j
.text:004098D1                                         ; sub_409580+E4↑j
.text:004098D1                                         ; DATA XREF: ...
.text:004098D1                 mov     [esp+14h+var_12], al ; jumptable 00409664 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:004098D5                 jmp     short loc_409880
.text:004098D7 ; ---------------------------------------------------------------------------
.text:004098D7
.text:004098D7 loc_4098D7:                             ; CODE XREF: sub_409580+E4↑j
.text:004098D7                                         ; DATA XREF: sub_409580:jpt_409664↑o
.text:004098D7                 mov     [esp+14h+var_12], 0 ; jumptable 00409664 cases 88,120
.text:004098DC                 mov     esi, 3
.text:004098E1                 jmp     loc_409860
.text:004098E6 ; ---------------------------------------------------------------------------
.text:004098E6
.text:004098E6 loc_4098E6:                             ; CODE XREF: sub_409580:loc_4095C0↑j
.text:004098E6                                         ; DATA XREF: sub_409580:jpt_4095C0↑o
.text:004098E6                 movzx   edx, byte ptr [ecx] ; jumptable 004095C0 case 2
.text:004098E9                 mov     al, dl
.text:004098EB                 sub     al, 30h ; '0'
.text:004098ED                 cmp     al, 7
.text:004098EF                 ja      short def_409920 ; jumptable 00409920 default case, cases 58-64,71-96
.text:004098F1                 shl     [esp+14h+var_12], 3
.text:004098F6
.text:004098F6 loc_4098F6:                             ; CODE XREF: sub_409580+489↓j
.text:004098F6                 add     [esp+14h+var_12], dl
.text:004098FA                 sub     [esp+14h+var_12], 30h ; '0'
.text:004098FF                 jmp     loc_409860
.text:00409904 ; ---------------------------------------------------------------------------
.text:00409904
.text:00409904 def_409920:                             ; CODE XREF: sub_409580+36F↑j
.text:00409904                                         ; sub_409580+39E↓j ...
.text:00409904                 movzx   edx, [esp+14h+var_12] ; jumptable 00409920 default case, cases 58-64,71-96
.text:00409909                 inc     edi
.text:0040990A                 mov     [ebx], dl
.text:0040990C                 inc     ebx
.text:0040990D                 jmp     loc_4095B0
.text:00409912 ; ---------------------------------------------------------------------------
.text:00409912
.text:00409912 loc_409912:                             ; CODE XREF: sub_409580:loc_4095C0↑j
.text:00409912                                         ; DATA XREF: sub_409580:jpt_4095C0↑o
.text:00409912                 movzx   edx, byte ptr [ecx] ; jumptable 004095C0 case 3
.text:00409915                 movsx   eax, dl
.text:00409918                 sub     eax, 30h ; '0'  ; switch 55 cases
.text:0040991B                 cmp     eax, 36h
.text:0040991E                 ja      short def_409920 ; jumptable 00409920 default case, cases 58-64,71-96
.text:00409920                 jmp     ds:jpt_409920[eax*4] ; switch jump
.text:00409920 ; ---------------------------------------------------------------------------
.text:00409927                 align 4
.text:00409928 jpt_409920      dd offset loc_409A04, offset loc_409A04, offset loc_409A04
.text:00409928                                         ; DATA XREF: sub_409580+3A0↑r
.text:00409928                 dd offset loc_409A04, offset loc_409A04, offset loc_409A04 ; jump table for switch statement
.text:00409928                 dd offset loc_409A04, offset loc_409A04, offset loc_409A04
.text:00409928                 dd offset loc_409A04, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset loc_409A0E
.text:00409928                 dd offset loc_409A0E, offset loc_409A0E, offset loc_409A0E
.text:00409928                 dd offset loc_409A0E, offset loc_409A0E, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset def_409920, offset def_409920
.text:00409928                 dd offset def_409920, offset loc_409A21, offset loc_409A21
.text:00409928                 dd offset loc_409A21, offset loc_409A21, offset loc_409A21
.text:00409928                 dd offset loc_409A21
.text:00409A04 ; ---------------------------------------------------------------------------
.text:00409A04
.text:00409A04 loc_409A04:                             ; CODE XREF: sub_409580+3A0↑j
.text:00409A04                                         ; DATA XREF: sub_409580:jpt_409920↑o
.text:00409A04                 shl     [esp+14h+var_12], 4 ; jumptable 00409920 cases 48-57
.text:00409A09                 jmp     loc_4098F6
.text:00409A0E ; ---------------------------------------------------------------------------
.text:00409A0E
.text:00409A0E loc_409A0E:                             ; CODE XREF: sub_409580+3A0↑j
.text:00409A0E                                         ; DATA XREF: sub_409580:jpt_409920↑o
.text:00409A0E                 shl     [esp+14h+var_12], 4 ; jumptable 00409920 cases 65-70
.text:00409A13                 add     [esp+14h+var_12], dl
.text:00409A17                 sub     [esp+14h+var_12], 37h ; '7'
.text:00409A1C                 jmp     loc_409860
.text:00409A21 ; ---------------------------------------------------------------------------
.text:00409A21
.text:00409A21 loc_409A21:                             ; CODE XREF: sub_409580+3A0↑j
.text:00409A21                                         ; DATA XREF: sub_409580:jpt_409920↑o
.text:00409A21                 shl     [esp+14h+var_12], 4 ; jumptable 00409920 cases 97-102
.text:00409A26                 add     [esp+14h+var_12], dl
.text:00409A2A                 sub     [esp+14h+var_12], 57h ; 'W'
.text:00409A2F                 jmp     loc_409860
.text:00409A34 ; ---------------------------------------------------------------------------
.text:00409A34
.text:00409A34 loc_409A34:                             ; CODE XREF: sub_409580:loc_4095C0↑j
.text:00409A34                                         ; DATA XREF: sub_409580:jpt_4095C0↑o
.text:00409A34                 movzx   eax, byte ptr [ecx] ; jumptable 004095C0 case 4
.text:00409A37                 xor     esi, esi
.text:00409A39                 cmp     al, 3Fh ; '?'
.text:00409A3B                 jle     short loc_409A50
.text:00409A3D                 cmp     al, 7Fh
.text:00409A3F                 jz      short loc_409A50
.text:00409A41                 and     al, 1Fh
.text:00409A43                 inc     ecx
.text:00409A44                 mov     [ebx], al
.text:00409A46
.text:00409A46 loc_409A46:                             ; CODE XREF: sub_409580+4E1↓j
.text:00409A46                 inc     ebx
.text:00409A47                 inc     edi
.text:00409A48                 jmp     loc_4095C0
.text:00409A48 ; ---------------------------------------------------------------------------
.text:00409A4D                 align 10h
.text:00409A50
.text:00409A50 loc_409A50:                             ; CODE XREF: sub_409580+4BB↑j
.text:00409A50                                         ; sub_409580+4BF↑j
.text:00409A50                 cmp     al, 3Fh ; '?'
.text:00409A52                 jz      short loc_409A5E
.text:00409A54                 mov     esi, 6
.text:00409A59                 jmp     loc_409600
.text:00409A5E ; ---------------------------------------------------------------------------
.text:00409A5E
.text:00409A5E loc_409A5E:                             ; CODE XREF: sub_409580+4D2↑j
.text:00409A5E                 mov     byte ptr [ebx], 7Fh
.text:00409A61                 jmp     short loc_409A46
.text:00409A61 sub_409580      endp
.text:00409A61
.text:00409A61 ; ---------------------------------------------------------------------------
.text:00409A63                 align 10h
.text:00409A70
.text:00409A70 ; =============== S U B R O U T I N E =======================================
.text:00409A70
.text:00409A70
.text:00409A70 sub_409A70      proc near               ; DATA XREF: sub_404FA0:loc_405086↑o
.text:00409A70
.text:00409A70 var_1C          = dword ptr -1Ch
.text:00409A70 var_18          = dword ptr -18h
.text:00409A70 var_8           = dword ptr -8
.text:00409A70 var_4           = dword ptr -4
.text:00409A70 arg_0           = dword ptr  4
.text:00409A70 arg_4           = dword ptr  8
.text:00409A70
.text:00409A70                 sub     esp, 1Ch
.text:00409A73                 mov     eax, 0FFFFFFFFh
.text:00409A78                 mov     [esp+1Ch+var_8], ebx
.text:00409A7C                 mov     ebx, [esp+1Ch+arg_4]
.text:00409A80                 mov     [esp+1Ch+var_4], esi
.text:00409A84                 mov     esi, [esp+1Ch+arg_0]
.text:00409A88                 mov     ecx, [ebx+50h]
.text:00409A8B                 mov     edx, [esi+50h]
.text:00409A8E                 cmp     ecx, edx
.text:00409A90                 jl      short loc_409AB0
.text:00409A92                 mov     eax, 1
.text:00409A97                 jg      short loc_409AB0
.text:00409A99                 mov     ecx, [ebx+54h]
.text:00409A9C                 mov     eax, 0FFFFFFFFh
.text:00409AA1                 mov     edx, [esi+54h]
.text:00409AA4                 cmp     ecx, edx
.text:00409AA6                 jl      short loc_409AB0
.text:00409AA8                 setnle  dl
.text:00409AAB                 movzx   eax, dl
.text:00409AAE                 mov     esi, esi
.text:00409AB0
.text:00409AB0 loc_409AB0:                             ; CODE XREF: sub_409A70+20↑j
.text:00409AB0                                         ; sub_409A70+27↑j ...
.text:00409AB0                 test    eax, eax
.text:00409AB2                 jz      short loc_409AC0
.text:00409AB4
.text:00409AB4 loc_409AB4:                             ; CODE XREF: sub_409A70+60↓j
.text:00409AB4                 mov     ebx, [esp+1Ch+var_8]
.text:00409AB8                 mov     esi, [esp+1Ch+var_4]
.text:00409ABC                 add     esp, 1Ch
.text:00409ABF                 retn
.text:00409AC0 ; ---------------------------------------------------------------------------
.text:00409AC0
.text:00409AC0 loc_409AC0:                             ; CODE XREF: sub_409A70+42↑j
.text:00409AC0                 mov     ecx, [ebx]
.text:00409AC2                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409AC6                 mov     edx, [esi]
.text:00409AC8                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409ACB                 call    sub_40A750
.text:00409AD0                 jmp     short loc_409AB4
.text:00409AD0 sub_409A70      endp
.text:00409AD0
.text:00409AD0 ; ---------------------------------------------------------------------------
.text:00409AD2                 align 10h
.text:00409AE0
.text:00409AE0 ; =============== S U B R O U T I N E =======================================
.text:00409AE0
.text:00409AE0
.text:00409AE0 sub_409AE0      proc near               ; DATA XREF: sub_404FA0:loc_4051C0↑o
.text:00409AE0
.text:00409AE0 Str1            = dword ptr -1Ch
.text:00409AE0 Str2            = dword ptr -18h
.text:00409AE0 var_8           = dword ptr -8
.text:00409AE0 var_4           = dword ptr -4
.text:00409AE0 arg_0           = dword ptr  4
.text:00409AE0 arg_4           = dword ptr  8
.text:00409AE0
.text:00409AE0                 sub     esp, 1Ch
.text:00409AE3                 mov     eax, 0FFFFFFFFh
.text:00409AE8                 mov     [esp+1Ch+var_8], ebx
.text:00409AEC                 mov     ebx, [esp+1Ch+arg_4]
.text:00409AF0                 mov     [esp+1Ch+var_4], esi
.text:00409AF4                 mov     esi, [esp+1Ch+arg_0]
.text:00409AF8                 mov     ecx, [ebx+50h]
.text:00409AFB                 mov     edx, [esi+50h]
.text:00409AFE                 cmp     ecx, edx
.text:00409B00                 jl      short loc_409B20
.text:00409B02                 mov     eax, 1
.text:00409B07                 jg      short loc_409B20
.text:00409B09                 mov     ecx, [ebx+54h]
.text:00409B0C                 mov     eax, 0FFFFFFFFh
.text:00409B11                 mov     edx, [esi+54h]
.text:00409B14                 cmp     ecx, edx
.text:00409B16                 jl      short loc_409B20
.text:00409B18                 setnle  dl
.text:00409B1B                 movzx   eax, dl
.text:00409B1E                 mov     esi, esi
.text:00409B20
.text:00409B20 loc_409B20:                             ; CODE XREF: sub_409AE0+20↑j
.text:00409B20                                         ; sub_409AE0+27↑j ...
.text:00409B20                 test    eax, eax
.text:00409B22                 jz      short loc_409B30
.text:00409B24
.text:00409B24 loc_409B24:                             ; CODE XREF: sub_409AE0+60↓j
.text:00409B24                 mov     ebx, [esp+1Ch+var_8]
.text:00409B28                 mov     esi, [esp+1Ch+var_4]
.text:00409B2C                 add     esp, 1Ch
.text:00409B2F                 retn
.text:00409B30 ; ---------------------------------------------------------------------------
.text:00409B30
.text:00409B30 loc_409B30:                             ; CODE XREF: sub_409AE0+42↑j
.text:00409B30                 mov     ecx, [ebx]
.text:00409B32                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409B36                 mov     edx, [esi]
.text:00409B38                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409B3B                 call    strcmp
.text:00409B40                 jmp     short loc_409B24
.text:00409B40 sub_409AE0      endp
.text:00409B40
.text:00409B40 ; ---------------------------------------------------------------------------
.text:00409B42                 align 10h
.text:00409B50
.text:00409B50 ; =============== S U B R O U T I N E =======================================
.text:00409B50
.text:00409B50
.text:00409B50 sub_409B50      proc near               ; DATA XREF: sub_404FA0+DF↑o
.text:00409B50
.text:00409B50 var_1C          = dword ptr -1Ch
.text:00409B50 var_18          = dword ptr -18h
.text:00409B50 var_8           = dword ptr -8
.text:00409B50 var_4           = dword ptr -4
.text:00409B50 arg_0           = dword ptr  4
.text:00409B50 arg_4           = dword ptr  8
.text:00409B50
.text:00409B50                 sub     esp, 1Ch
.text:00409B53                 mov     eax, 0FFFFFFFFh
.text:00409B58                 mov     [esp+1Ch+var_8], ebx
.text:00409B5C                 mov     ebx, [esp+1Ch+arg_0]
.text:00409B60                 mov     [esp+1Ch+var_4], esi
.text:00409B64                 mov     esi, [esp+1Ch+arg_4]
.text:00409B68                 mov     ecx, [ebx+50h]
.text:00409B6B                 mov     edx, [esi+50h]
.text:00409B6E                 cmp     ecx, edx
.text:00409B70                 jl      short loc_409B90
.text:00409B72                 mov     eax, 1
.text:00409B77                 jg      short loc_409B90
.text:00409B79                 mov     ecx, [ebx+54h]
.text:00409B7C                 mov     eax, 0FFFFFFFFh
.text:00409B81                 mov     edx, [esi+54h]
.text:00409B84                 cmp     ecx, edx
.text:00409B86                 jl      short loc_409B90
.text:00409B88                 setnle  dl
.text:00409B8B                 movzx   eax, dl
.text:00409B8E                 mov     esi, esi
.text:00409B90
.text:00409B90 loc_409B90:                             ; CODE XREF: sub_409B50+20↑j
.text:00409B90                                         ; sub_409B50+27↑j ...
.text:00409B90                 test    eax, eax
.text:00409B92                 jz      short loc_409BA0
.text:00409B94
.text:00409B94 loc_409B94:                             ; CODE XREF: sub_409B50+60↓j
.text:00409B94                 mov     ebx, [esp+1Ch+var_8]
.text:00409B98                 mov     esi, [esp+1Ch+var_4]
.text:00409B9C                 add     esp, 1Ch
.text:00409B9F                 retn
.text:00409BA0 ; ---------------------------------------------------------------------------
.text:00409BA0
.text:00409BA0 loc_409BA0:                             ; CODE XREF: sub_409B50+42↑j
.text:00409BA0                 mov     ecx, [ebx]
.text:00409BA2                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409BA6                 mov     edx, [esi]
.text:00409BA8                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409BAB                 call    sub_40A750
.text:00409BB0                 jmp     short loc_409B94
.text:00409BB0 sub_409B50      endp
.text:00409BB0
.text:00409BB0 ; ---------------------------------------------------------------------------
.text:00409BB2                 align 10h
.text:00409BC0
.text:00409BC0 ; =============== S U B R O U T I N E =======================================
.text:00409BC0
.text:00409BC0
.text:00409BC0 sub_409BC0      proc near               ; DATA XREF: sub_404FA0+216↑o
.text:00409BC0
.text:00409BC0 Str1            = dword ptr -1Ch
.text:00409BC0 Str2            = dword ptr -18h
.text:00409BC0 var_8           = dword ptr -8
.text:00409BC0 var_4           = dword ptr -4
.text:00409BC0 arg_0           = dword ptr  4
.text:00409BC0 arg_4           = dword ptr  8
.text:00409BC0
.text:00409BC0                 sub     esp, 1Ch
.text:00409BC3                 mov     eax, 0FFFFFFFFh
.text:00409BC8                 mov     [esp+1Ch+var_8], ebx
.text:00409BCC                 mov     ebx, [esp+1Ch+arg_0]
.text:00409BD0                 mov     [esp+1Ch+var_4], esi
.text:00409BD4                 mov     esi, [esp+1Ch+arg_4]
.text:00409BD8                 mov     ecx, [ebx+50h]
.text:00409BDB                 mov     edx, [esi+50h]
.text:00409BDE                 cmp     ecx, edx
.text:00409BE0                 jl      short loc_409C00
.text:00409BE2                 mov     eax, 1
.text:00409BE7                 jg      short loc_409C00
.text:00409BE9                 mov     ecx, [ebx+54h]
.text:00409BEC                 mov     eax, 0FFFFFFFFh
.text:00409BF1                 mov     edx, [esi+54h]
.text:00409BF4                 cmp     ecx, edx
.text:00409BF6                 jl      short loc_409C00
.text:00409BF8                 setnle  dl
.text:00409BFB                 movzx   eax, dl
.text:00409BFE                 mov     esi, esi
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: sub_409BC0+20↑j
.text:00409C00                                         ; sub_409BC0+27↑j ...
.text:00409C00                 test    eax, eax
.text:00409C02                 jz      short loc_409C10
.text:00409C04
.text:00409C04 loc_409C04:                             ; CODE XREF: sub_409BC0+60↓j
.text:00409C04                 mov     ebx, [esp+1Ch+var_8]
.text:00409C08                 mov     esi, [esp+1Ch+var_4]
.text:00409C0C                 add     esp, 1Ch
.text:00409C0F                 retn
.text:00409C10 ; ---------------------------------------------------------------------------
.text:00409C10
.text:00409C10 loc_409C10:                             ; CODE XREF: sub_409BC0+42↑j
.text:00409C10                 mov     ecx, [ebx]
.text:00409C12                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409C16                 mov     edx, [esi]
.text:00409C18                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409C1B                 call    strcmp
.text:00409C20                 jmp     short loc_409C04
.text:00409C20 sub_409BC0      endp
.text:00409C20
.text:00409C20 ; ---------------------------------------------------------------------------
.text:00409C22                 align 10h
.text:00409C30
.text:00409C30 ; =============== S U B R O U T I N E =======================================
.text:00409C30
.text:00409C30
.text:00409C30 sub_409C30      proc near               ; DATA XREF: sub_404FA0:loc_40506F↑o
.text:00409C30
.text:00409C30 var_1C          = dword ptr -1Ch
.text:00409C30 var_18          = dword ptr -18h
.text:00409C30 var_8           = dword ptr -8
.text:00409C30 var_4           = dword ptr -4
.text:00409C30 arg_0           = dword ptr  4
.text:00409C30 arg_4           = dword ptr  8
.text:00409C30
.text:00409C30                 sub     esp, 1Ch
.text:00409C33                 mov     eax, 0FFFFFFFFh
.text:00409C38                 mov     [esp+1Ch+var_8], ebx
.text:00409C3C                 mov     ebx, [esp+1Ch+arg_4]
.text:00409C40                 mov     [esp+1Ch+var_4], esi
.text:00409C44                 mov     esi, [esp+1Ch+arg_0]
.text:00409C48                 mov     ecx, [ebx+48h]
.text:00409C4B                 mov     edx, [esi+48h]
.text:00409C4E                 cmp     ecx, edx
.text:00409C50                 jl      short loc_409C70
.text:00409C52                 mov     eax, 1
.text:00409C57                 jg      short loc_409C70
.text:00409C59                 mov     ecx, [ebx+4Ch]
.text:00409C5C                 mov     eax, 0FFFFFFFFh
.text:00409C61                 mov     edx, [esi+4Ch]
.text:00409C64                 cmp     ecx, edx
.text:00409C66                 jl      short loc_409C70
.text:00409C68                 setnle  dl
.text:00409C6B                 movzx   eax, dl
.text:00409C6E                 mov     esi, esi
.text:00409C70
.text:00409C70 loc_409C70:                             ; CODE XREF: sub_409C30+20↑j
.text:00409C70                                         ; sub_409C30+27↑j ...
.text:00409C70                 test    eax, eax
.text:00409C72                 jz      short loc_409C80
.text:00409C74
.text:00409C74 loc_409C74:                             ; CODE XREF: sub_409C30+60↓j
.text:00409C74                 mov     ebx, [esp+1Ch+var_8]
.text:00409C78                 mov     esi, [esp+1Ch+var_4]
.text:00409C7C                 add     esp, 1Ch
.text:00409C7F                 retn
.text:00409C80 ; ---------------------------------------------------------------------------
.text:00409C80
.text:00409C80 loc_409C80:                             ; CODE XREF: sub_409C30+42↑j
.text:00409C80                 mov     ecx, [ebx]
.text:00409C82                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409C86                 mov     edx, [esi]
.text:00409C88                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409C8B                 call    sub_40A750
.text:00409C90                 jmp     short loc_409C74
.text:00409C90 sub_409C30      endp
.text:00409C90
.text:00409C90 ; ---------------------------------------------------------------------------
.text:00409C92                 align 10h
.text:00409CA0
.text:00409CA0 ; =============== S U B R O U T I N E =======================================
.text:00409CA0
.text:00409CA0
.text:00409CA0 sub_409CA0      proc near               ; DATA XREF: sub_404FA0:loc_4051A3↑o
.text:00409CA0
.text:00409CA0 Str1            = dword ptr -1Ch
.text:00409CA0 Str2            = dword ptr -18h
.text:00409CA0 var_8           = dword ptr -8
.text:00409CA0 var_4           = dword ptr -4
.text:00409CA0 arg_0           = dword ptr  4
.text:00409CA0 arg_4           = dword ptr  8
.text:00409CA0
.text:00409CA0                 sub     esp, 1Ch
.text:00409CA3                 mov     eax, 0FFFFFFFFh
.text:00409CA8                 mov     [esp+1Ch+var_8], ebx
.text:00409CAC                 mov     ebx, [esp+1Ch+arg_4]
.text:00409CB0                 mov     [esp+1Ch+var_4], esi
.text:00409CB4                 mov     esi, [esp+1Ch+arg_0]
.text:00409CB8                 mov     ecx, [ebx+48h]
.text:00409CBB                 mov     edx, [esi+48h]
.text:00409CBE                 cmp     ecx, edx
.text:00409CC0                 jl      short loc_409CE0
.text:00409CC2                 mov     eax, 1
.text:00409CC7                 jg      short loc_409CE0
.text:00409CC9                 mov     ecx, [ebx+4Ch]
.text:00409CCC                 mov     eax, 0FFFFFFFFh
.text:00409CD1                 mov     edx, [esi+4Ch]
.text:00409CD4                 cmp     ecx, edx
.text:00409CD6                 jl      short loc_409CE0
.text:00409CD8                 setnle  dl
.text:00409CDB                 movzx   eax, dl
.text:00409CDE                 mov     esi, esi
.text:00409CE0
.text:00409CE0 loc_409CE0:                             ; CODE XREF: sub_409CA0+20↑j
.text:00409CE0                                         ; sub_409CA0+27↑j ...
.text:00409CE0                 test    eax, eax
.text:00409CE2                 jz      short loc_409CF0
.text:00409CE4
.text:00409CE4 loc_409CE4:                             ; CODE XREF: sub_409CA0+60↓j
.text:00409CE4                 mov     ebx, [esp+1Ch+var_8]
.text:00409CE8                 mov     esi, [esp+1Ch+var_4]
.text:00409CEC                 add     esp, 1Ch
.text:00409CEF                 retn
.text:00409CF0 ; ---------------------------------------------------------------------------
.text:00409CF0
.text:00409CF0 loc_409CF0:                             ; CODE XREF: sub_409CA0+42↑j
.text:00409CF0                 mov     ecx, [ebx]
.text:00409CF2                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409CF6                 mov     edx, [esi]
.text:00409CF8                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409CFB                 call    strcmp
.text:00409D00                 jmp     short loc_409CE4
.text:00409D00 sub_409CA0      endp
.text:00409D00
.text:00409D00 ; ---------------------------------------------------------------------------
.text:00409D02                 align 10h
.text:00409D10
.text:00409D10 ; =============== S U B R O U T I N E =======================================
.text:00409D10
.text:00409D10
.text:00409D10 sub_409D10      proc near               ; DATA XREF: sub_404FA0+C8↑o
.text:00409D10
.text:00409D10 var_1C          = dword ptr -1Ch
.text:00409D10 var_18          = dword ptr -18h
.text:00409D10 var_8           = dword ptr -8
.text:00409D10 var_4           = dword ptr -4
.text:00409D10 arg_0           = dword ptr  4
.text:00409D10 arg_4           = dword ptr  8
.text:00409D10
.text:00409D10                 sub     esp, 1Ch
.text:00409D13                 mov     eax, 0FFFFFFFFh
.text:00409D18                 mov     [esp+1Ch+var_8], ebx
.text:00409D1C                 mov     ebx, [esp+1Ch+arg_0]
.text:00409D20                 mov     [esp+1Ch+var_4], esi
.text:00409D24                 mov     esi, [esp+1Ch+arg_4]
.text:00409D28                 mov     ecx, [ebx+48h]
.text:00409D2B                 mov     edx, [esi+48h]
.text:00409D2E                 cmp     ecx, edx
.text:00409D30                 jl      short loc_409D50
.text:00409D32                 mov     eax, 1
.text:00409D37                 jg      short loc_409D50
.text:00409D39                 mov     ecx, [ebx+4Ch]
.text:00409D3C                 mov     eax, 0FFFFFFFFh
.text:00409D41                 mov     edx, [esi+4Ch]
.text:00409D44                 cmp     ecx, edx
.text:00409D46                 jl      short loc_409D50
.text:00409D48                 setnle  dl
.text:00409D4B                 movzx   eax, dl
.text:00409D4E                 mov     esi, esi
.text:00409D50
.text:00409D50 loc_409D50:                             ; CODE XREF: sub_409D10+20↑j
.text:00409D50                                         ; sub_409D10+27↑j ...
.text:00409D50                 test    eax, eax
.text:00409D52                 jz      short loc_409D60
.text:00409D54
.text:00409D54 loc_409D54:                             ; CODE XREF: sub_409D10+60↓j
.text:00409D54                 mov     ebx, [esp+1Ch+var_8]
.text:00409D58                 mov     esi, [esp+1Ch+var_4]
.text:00409D5C                 add     esp, 1Ch
.text:00409D5F                 retn
.text:00409D60 ; ---------------------------------------------------------------------------
.text:00409D60
.text:00409D60 loc_409D60:                             ; CODE XREF: sub_409D10+42↑j
.text:00409D60                 mov     ecx, [ebx]
.text:00409D62                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409D66                 mov     edx, [esi]
.text:00409D68                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409D6B                 call    sub_40A750
.text:00409D70                 jmp     short loc_409D54
.text:00409D70 sub_409D10      endp
.text:00409D70
.text:00409D70 ; ---------------------------------------------------------------------------
.text:00409D72                 align 10h
.text:00409D80
.text:00409D80 ; =============== S U B R O U T I N E =======================================
.text:00409D80
.text:00409D80
.text:00409D80 sub_409D80      proc near               ; DATA XREF: sub_404FA0+1F9↑o
.text:00409D80
.text:00409D80 Str1            = dword ptr -1Ch
.text:00409D80 Str2            = dword ptr -18h
.text:00409D80 var_8           = dword ptr -8
.text:00409D80 var_4           = dword ptr -4
.text:00409D80 arg_0           = dword ptr  4
.text:00409D80 arg_4           = dword ptr  8
.text:00409D80
.text:00409D80                 sub     esp, 1Ch
.text:00409D83                 mov     eax, 0FFFFFFFFh
.text:00409D88                 mov     [esp+1Ch+var_8], ebx
.text:00409D8C                 mov     ebx, [esp+1Ch+arg_0]
.text:00409D90                 mov     [esp+1Ch+var_4], esi
.text:00409D94                 mov     esi, [esp+1Ch+arg_4]
.text:00409D98                 mov     ecx, [ebx+48h]
.text:00409D9B                 mov     edx, [esi+48h]
.text:00409D9E                 cmp     ecx, edx
.text:00409DA0                 jl      short loc_409DC0
.text:00409DA2                 mov     eax, 1
.text:00409DA7                 jg      short loc_409DC0
.text:00409DA9                 mov     ecx, [ebx+4Ch]
.text:00409DAC                 mov     eax, 0FFFFFFFFh
.text:00409DB1                 mov     edx, [esi+4Ch]
.text:00409DB4                 cmp     ecx, edx
.text:00409DB6                 jl      short loc_409DC0
.text:00409DB8                 setnle  dl
.text:00409DBB                 movzx   eax, dl
.text:00409DBE                 mov     esi, esi
.text:00409DC0
.text:00409DC0 loc_409DC0:                             ; CODE XREF: sub_409D80+20↑j
.text:00409DC0                                         ; sub_409D80+27↑j ...
.text:00409DC0                 test    eax, eax
.text:00409DC2                 jz      short loc_409DD0
.text:00409DC4
.text:00409DC4 loc_409DC4:                             ; CODE XREF: sub_409D80+60↓j
.text:00409DC4                 mov     ebx, [esp+1Ch+var_8]
.text:00409DC8                 mov     esi, [esp+1Ch+var_4]
.text:00409DCC                 add     esp, 1Ch
.text:00409DCF                 retn
.text:00409DD0 ; ---------------------------------------------------------------------------
.text:00409DD0
.text:00409DD0 loc_409DD0:                             ; CODE XREF: sub_409D80+42↑j
.text:00409DD0                 mov     ecx, [ebx]
.text:00409DD2                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409DD6                 mov     edx, [esi]
.text:00409DD8                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409DDB                 call    strcmp
.text:00409DE0                 jmp     short loc_409DC4
.text:00409DE0 sub_409D80      endp
.text:00409DE0
.text:00409DE0 ; ---------------------------------------------------------------------------
.text:00409DE2                 align 10h
.text:00409DF0
.text:00409DF0 ; =============== S U B R O U T I N E =======================================
.text:00409DF0
.text:00409DF0
.text:00409DF0 sub_409DF0      proc near               ; DATA XREF: sub_404FA0:loc_405058↑o
.text:00409DF0
.text:00409DF0 var_1C          = dword ptr -1Ch
.text:00409DF0 var_18          = dword ptr -18h
.text:00409DF0 var_8           = dword ptr -8
.text:00409DF0 var_4           = dword ptr -4
.text:00409DF0 arg_0           = dword ptr  4
.text:00409DF0 arg_4           = dword ptr  8
.text:00409DF0
.text:00409DF0                 sub     esp, 1Ch
.text:00409DF3                 mov     eax, 0FFFFFFFFh
.text:00409DF8                 mov     [esp+1Ch+var_8], ebx
.text:00409DFC                 mov     ebx, [esp+1Ch+arg_4]
.text:00409E00                 mov     [esp+1Ch+var_4], esi
.text:00409E04                 mov     esi, [esp+1Ch+arg_0]
.text:00409E08                 mov     ecx, [ebx+40h]
.text:00409E0B                 mov     edx, [esi+40h]
.text:00409E0E                 cmp     ecx, edx
.text:00409E10                 jl      short loc_409E30
.text:00409E12                 mov     eax, 1
.text:00409E17                 jg      short loc_409E30
.text:00409E19                 mov     ecx, [ebx+44h]
.text:00409E1C                 mov     eax, 0FFFFFFFFh
.text:00409E21                 mov     edx, [esi+44h]
.text:00409E24                 cmp     ecx, edx
.text:00409E26                 jl      short loc_409E30
.text:00409E28                 setnle  dl
.text:00409E2B                 movzx   eax, dl
.text:00409E2E                 mov     esi, esi
.text:00409E30
.text:00409E30 loc_409E30:                             ; CODE XREF: sub_409DF0+20↑j
.text:00409E30                                         ; sub_409DF0+27↑j ...
.text:00409E30                 test    eax, eax
.text:00409E32                 jz      short loc_409E40
.text:00409E34
.text:00409E34 loc_409E34:                             ; CODE XREF: sub_409DF0+60↓j
.text:00409E34                 mov     ebx, [esp+1Ch+var_8]
.text:00409E38                 mov     esi, [esp+1Ch+var_4]
.text:00409E3C                 add     esp, 1Ch
.text:00409E3F                 retn
.text:00409E40 ; ---------------------------------------------------------------------------
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: sub_409DF0+42↑j
.text:00409E40                 mov     ecx, [ebx]
.text:00409E42                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409E46                 mov     edx, [esi]
.text:00409E48                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409E4B                 call    sub_40A750
.text:00409E50                 jmp     short loc_409E34
.text:00409E50 sub_409DF0      endp
.text:00409E50
.text:00409E50 ; ---------------------------------------------------------------------------
.text:00409E52                 align 10h
.text:00409E60
.text:00409E60 ; =============== S U B R O U T I N E =======================================
.text:00409E60
.text:00409E60
.text:00409E60 sub_409E60      proc near               ; DATA XREF: sub_404FA0:loc_405186↑o
.text:00409E60
.text:00409E60 Str1            = dword ptr -1Ch
.text:00409E60 Str2            = dword ptr -18h
.text:00409E60 var_8           = dword ptr -8
.text:00409E60 var_4           = dword ptr -4
.text:00409E60 arg_0           = dword ptr  4
.text:00409E60 arg_4           = dword ptr  8
.text:00409E60
.text:00409E60                 sub     esp, 1Ch
.text:00409E63                 mov     eax, 0FFFFFFFFh
.text:00409E68                 mov     [esp+1Ch+var_8], ebx
.text:00409E6C                 mov     ebx, [esp+1Ch+arg_4]
.text:00409E70                 mov     [esp+1Ch+var_4], esi
.text:00409E74                 mov     esi, [esp+1Ch+arg_0]
.text:00409E78                 mov     ecx, [ebx+40h]
.text:00409E7B                 mov     edx, [esi+40h]
.text:00409E7E                 cmp     ecx, edx
.text:00409E80                 jl      short loc_409EA0
.text:00409E82                 mov     eax, 1
.text:00409E87                 jg      short loc_409EA0
.text:00409E89                 mov     ecx, [ebx+44h]
.text:00409E8C                 mov     eax, 0FFFFFFFFh
.text:00409E91                 mov     edx, [esi+44h]
.text:00409E94                 cmp     ecx, edx
.text:00409E96                 jl      short loc_409EA0
.text:00409E98                 setnle  dl
.text:00409E9B                 movzx   eax, dl
.text:00409E9E                 mov     esi, esi
.text:00409EA0
.text:00409EA0 loc_409EA0:                             ; CODE XREF: sub_409E60+20↑j
.text:00409EA0                                         ; sub_409E60+27↑j ...
.text:00409EA0                 test    eax, eax
.text:00409EA2                 jz      short loc_409EB0
.text:00409EA4
.text:00409EA4 loc_409EA4:                             ; CODE XREF: sub_409E60+60↓j
.text:00409EA4                 mov     ebx, [esp+1Ch+var_8]
.text:00409EA8                 mov     esi, [esp+1Ch+var_4]
.text:00409EAC                 add     esp, 1Ch
.text:00409EAF                 retn
.text:00409EB0 ; ---------------------------------------------------------------------------
.text:00409EB0
.text:00409EB0 loc_409EB0:                             ; CODE XREF: sub_409E60+42↑j
.text:00409EB0                 mov     ecx, [ebx]
.text:00409EB2                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409EB6                 mov     edx, [esi]
.text:00409EB8                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409EBB                 call    strcmp
.text:00409EC0                 jmp     short loc_409EA4
.text:00409EC0 sub_409E60      endp
.text:00409EC0
.text:00409EC0 ; ---------------------------------------------------------------------------
.text:00409EC2                 align 10h
.text:00409ED0
.text:00409ED0 ; =============== S U B R O U T I N E =======================================
.text:00409ED0
.text:00409ED0
.text:00409ED0 sub_409ED0      proc near               ; DATA XREF: sub_404FA0+75↑o
.text:00409ED0
.text:00409ED0 var_1C          = dword ptr -1Ch
.text:00409ED0 var_18          = dword ptr -18h
.text:00409ED0 var_8           = dword ptr -8
.text:00409ED0 var_4           = dword ptr -4
.text:00409ED0 arg_0           = dword ptr  4
.text:00409ED0 arg_4           = dword ptr  8
.text:00409ED0
.text:00409ED0                 sub     esp, 1Ch
.text:00409ED3                 mov     eax, 0FFFFFFFFh
.text:00409ED8                 mov     [esp+1Ch+var_8], ebx
.text:00409EDC                 mov     ebx, [esp+1Ch+arg_0]
.text:00409EE0                 mov     [esp+1Ch+var_4], esi
.text:00409EE4                 mov     esi, [esp+1Ch+arg_4]
.text:00409EE8                 mov     ecx, [ebx+40h]
.text:00409EEB                 mov     edx, [esi+40h]
.text:00409EEE                 cmp     ecx, edx
.text:00409EF0                 jl      short loc_409F10
.text:00409EF2                 mov     eax, 1
.text:00409EF7                 jg      short loc_409F10
.text:00409EF9                 mov     ecx, [ebx+44h]
.text:00409EFC                 mov     eax, 0FFFFFFFFh
.text:00409F01                 mov     edx, [esi+44h]
.text:00409F04                 cmp     ecx, edx
.text:00409F06                 jl      short loc_409F10
.text:00409F08                 setnle  dl
.text:00409F0B                 movzx   eax, dl
.text:00409F0E                 mov     esi, esi
.text:00409F10
.text:00409F10 loc_409F10:                             ; CODE XREF: sub_409ED0+20↑j
.text:00409F10                                         ; sub_409ED0+27↑j ...
.text:00409F10                 test    eax, eax
.text:00409F12                 jz      short loc_409F20
.text:00409F14
.text:00409F14 loc_409F14:                             ; CODE XREF: sub_409ED0+60↓j
.text:00409F14                 mov     ebx, [esp+1Ch+var_8]
.text:00409F18                 mov     esi, [esp+1Ch+var_4]
.text:00409F1C                 add     esp, 1Ch
.text:00409F1F                 retn
.text:00409F20 ; ---------------------------------------------------------------------------
.text:00409F20
.text:00409F20 loc_409F20:                             ; CODE XREF: sub_409ED0+42↑j
.text:00409F20                 mov     ecx, [ebx]
.text:00409F22                 mov     [esp+1Ch+var_18], ecx ; char *
.text:00409F26                 mov     edx, [esi]
.text:00409F28                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00409F2B                 call    sub_40A750
.text:00409F30                 jmp     short loc_409F14
.text:00409F30 sub_409ED0      endp
.text:00409F30
.text:00409F30 ; ---------------------------------------------------------------------------
.text:00409F32                 align 10h
.text:00409F40
.text:00409F40 ; =============== S U B R O U T I N E =======================================
.text:00409F40
.text:00409F40
.text:00409F40 sub_409F40      proc near               ; DATA XREF: sub_404FA0+1DC↑o
.text:00409F40
.text:00409F40 Str1            = dword ptr -1Ch
.text:00409F40 Str2            = dword ptr -18h
.text:00409F40 var_8           = dword ptr -8
.text:00409F40 var_4           = dword ptr -4
.text:00409F40 arg_0           = dword ptr  4
.text:00409F40 arg_4           = dword ptr  8
.text:00409F40
.text:00409F40                 sub     esp, 1Ch
.text:00409F43                 mov     eax, 0FFFFFFFFh
.text:00409F48                 mov     [esp+1Ch+var_8], ebx
.text:00409F4C                 mov     ebx, [esp+1Ch+arg_0]
.text:00409F50                 mov     [esp+1Ch+var_4], esi
.text:00409F54                 mov     esi, [esp+1Ch+arg_4]
.text:00409F58                 mov     ecx, [ebx+40h]
.text:00409F5B                 mov     edx, [esi+40h]
.text:00409F5E                 cmp     ecx, edx
.text:00409F60                 jl      short loc_409F80
.text:00409F62                 mov     eax, 1
.text:00409F67                 jg      short loc_409F80
.text:00409F69                 mov     ecx, [ebx+44h]
.text:00409F6C                 mov     eax, 0FFFFFFFFh
.text:00409F71                 mov     edx, [esi+44h]
.text:00409F74                 cmp     ecx, edx
.text:00409F76                 jl      short loc_409F80
.text:00409F78                 setnle  dl
.text:00409F7B                 movzx   eax, dl
.text:00409F7E                 mov     esi, esi
.text:00409F80
.text:00409F80 loc_409F80:                             ; CODE XREF: sub_409F40+20↑j
.text:00409F80                                         ; sub_409F40+27↑j ...
.text:00409F80                 test    eax, eax
.text:00409F82                 jz      short loc_409F90
.text:00409F84
.text:00409F84 loc_409F84:                             ; CODE XREF: sub_409F40+60↓j
.text:00409F84                 mov     ebx, [esp+1Ch+var_8]
.text:00409F88                 mov     esi, [esp+1Ch+var_4]
.text:00409F8C                 add     esp, 1Ch
.text:00409F8F                 retn
.text:00409F90 ; ---------------------------------------------------------------------------
.text:00409F90
.text:00409F90 loc_409F90:                             ; CODE XREF: sub_409F40+42↑j
.text:00409F90                 mov     ecx, [ebx]
.text:00409F92                 mov     [esp+1Ch+Str2], ecx ; Str2
.text:00409F96                 mov     edx, [esi]
.text:00409F98                 mov     [esp+1Ch+Str1], edx ; Str1
.text:00409F9B                 call    strcmp
.text:00409FA0                 jmp     short loc_409F84
.text:00409FA0 sub_409F40      endp
.text:00409FA0
.text:00409FA0 ; ---------------------------------------------------------------------------
.text:00409FA2                 align 10h
.text:00409FB0
.text:00409FB0 ; =============== S U B R O U T I N E =======================================
.text:00409FB0
.text:00409FB0
.text:00409FB0 sub_409FB0      proc near               ; DATA XREF: sub_404FA0:loc_4050D7↑o
.text:00409FB0
.text:00409FB0 var_1C          = dword ptr -1Ch
.text:00409FB0 var_18          = dword ptr -18h
.text:00409FB0 var_10          = dword ptr -10h
.text:00409FB0 var_C           = dword ptr -0Ch
.text:00409FB0 var_8           = dword ptr -8
.text:00409FB0 var_4           = dword ptr -4
.text:00409FB0 arg_0           = dword ptr  4
.text:00409FB0 arg_4           = dword ptr  8
.text:00409FB0
.text:00409FB0                 sub     esp, 1Ch
.text:00409FB3                 mov     [esp+1Ch+var_8], edi
.text:00409FB7                 mov     edi, [esp+1Ch+arg_4]
.text:00409FBB                 mov     [esp+1Ch+var_4], ebp
.text:00409FBF                 mov     ebp, [esp+1Ch+arg_0]
.text:00409FC3                 mov     [esp+1Ch+var_10], ebx
.text:00409FC7                 mov     [esp+1Ch+var_C], esi
.text:00409FCB                 mov     esi, [edi+3Ch]
.text:00409FCE                 mov     ecx, [ebp+3Ch]
.text:00409FD1                 mov     ebx, [edi+38h]
.text:00409FD4                 mov     edx, [ebp+38h]
.text:00409FD7                 cmp     esi, ecx
.text:00409FD9                 jl      short loc_40A030
.text:00409FDB                 jg      short loc_409FE1
.text:00409FDD                 cmp     ebx, edx
.text:00409FDF                 jb      short loc_40A030
.text:00409FE1
.text:00409FE1 loc_409FE1:                             ; CODE XREF: sub_409FB0+2B↑j
.text:00409FE1                 cmp     esi, ecx
.text:00409FE3                 mov     eax, 1
.text:00409FE8                 jg      short loc_40A000
.text:00409FEA                 jl      short loc_409FF0
.text:00409FEC                 cmp     ebx, edx
.text:00409FEE                 ja      short loc_40A000
.text:00409FF0
.text:00409FF0 loc_409FF0:                             ; CODE XREF: sub_409FB0+3A↑j
.text:00409FF0                 xor     eax, eax
.text:00409FF2                 lea     esi, [esi+0]
.text:00409FF9                 lea     edi, [edi+0]
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_409FB0+38↑j
.text:0040A000                                         ; sub_409FB0+3E↑j ...
.text:0040A000                 test    eax, eax
.text:0040A002                 jz      short loc_40A018
.text:0040A004
.text:0040A004 loc_40A004:                             ; CODE XREF: sub_409FB0+79↓j
.text:0040A004                 mov     ebx, [esp+1Ch+var_10]
.text:0040A008                 mov     esi, [esp+1Ch+var_C]
.text:0040A00C                 mov     edi, [esp+1Ch+var_8]
.text:0040A010                 mov     ebp, [esp+1Ch+var_4]
.text:0040A014                 add     esp, 1Ch
.text:0040A017                 retn
.text:0040A018 ; ---------------------------------------------------------------------------
.text:0040A018
.text:0040A018 loc_40A018:                             ; CODE XREF: sub_409FB0+52↑j
.text:0040A018                 mov     edx, [edi]
.text:0040A01A                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040A01E                 mov     edx, [ebp+0]
.text:0040A021                 mov     [esp+1Ch+var_1C], edx ; char *
.text:0040A024                 call    sub_40A750
.text:0040A029                 jmp     short loc_40A004
.text:0040A029 ; ---------------------------------------------------------------------------
.text:0040A02B                 align 10h
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: sub_409FB0+29↑j
.text:0040A030                                         ; sub_409FB0+2F↑j
.text:0040A030                 mov     eax, 0FFFFFFFFh
.text:0040A035                 jmp     short loc_40A000
.text:0040A035 sub_409FB0      endp
.text:0040A035
.text:0040A035 ; ---------------------------------------------------------------------------
.text:0040A037                 align 10h
.text:0040A040
.text:0040A040 ; =============== S U B R O U T I N E =======================================
.text:0040A040
.text:0040A040
.text:0040A040 sub_40A040      proc near               ; DATA XREF: sub_404FA0:loc_405155↑o
.text:0040A040
.text:0040A040 Str1            = dword ptr -1Ch
.text:0040A040 Str2            = dword ptr -18h
.text:0040A040 var_10          = dword ptr -10h
.text:0040A040 var_C           = dword ptr -0Ch
.text:0040A040 var_8           = dword ptr -8
.text:0040A040 var_4           = dword ptr -4
.text:0040A040 arg_0           = dword ptr  4
.text:0040A040 arg_4           = dword ptr  8
.text:0040A040
.text:0040A040                 sub     esp, 1Ch
.text:0040A043                 mov     [esp+1Ch+var_8], edi
.text:0040A047                 mov     edi, [esp+1Ch+arg_4]
.text:0040A04B                 mov     [esp+1Ch+var_4], ebp
.text:0040A04F                 mov     ebp, [esp+1Ch+arg_0]
.text:0040A053                 mov     [esp+1Ch+var_10], ebx
.text:0040A057                 mov     [esp+1Ch+var_C], esi
.text:0040A05B                 mov     esi, [edi+3Ch]
.text:0040A05E                 mov     ecx, [ebp+3Ch]
.text:0040A061                 mov     ebx, [edi+38h]
.text:0040A064                 mov     edx, [ebp+38h]
.text:0040A067                 cmp     esi, ecx
.text:0040A069                 jl      short loc_40A0C0
.text:0040A06B                 jg      short loc_40A071
.text:0040A06D                 cmp     ebx, edx
.text:0040A06F                 jb      short loc_40A0C0
.text:0040A071
.text:0040A071 loc_40A071:                             ; CODE XREF: sub_40A040+2B↑j
.text:0040A071                 cmp     esi, ecx
.text:0040A073                 mov     eax, 1
.text:0040A078                 jg      short loc_40A090
.text:0040A07A                 jl      short loc_40A080
.text:0040A07C                 cmp     ebx, edx
.text:0040A07E                 ja      short loc_40A090
.text:0040A080
.text:0040A080 loc_40A080:                             ; CODE XREF: sub_40A040+3A↑j
.text:0040A080                 xor     eax, eax
.text:0040A082                 lea     esi, [esi+0]
.text:0040A089                 lea     edi, [edi+0]
.text:0040A090
.text:0040A090 loc_40A090:                             ; CODE XREF: sub_40A040+38↑j
.text:0040A090                                         ; sub_40A040+3E↑j ...
.text:0040A090                 test    eax, eax
.text:0040A092                 jz      short loc_40A0A8
.text:0040A094
.text:0040A094 loc_40A094:                             ; CODE XREF: sub_40A040+79↓j
.text:0040A094                 mov     ebx, [esp+1Ch+var_10]
.text:0040A098                 mov     esi, [esp+1Ch+var_C]
.text:0040A09C                 mov     edi, [esp+1Ch+var_8]
.text:0040A0A0                 mov     ebp, [esp+1Ch+var_4]
.text:0040A0A4                 add     esp, 1Ch
.text:0040A0A7                 retn
.text:0040A0A8 ; ---------------------------------------------------------------------------
.text:0040A0A8
.text:0040A0A8 loc_40A0A8:                             ; CODE XREF: sub_40A040+52↑j
.text:0040A0A8                 mov     edx, [edi]
.text:0040A0AA                 mov     [esp+1Ch+Str2], edx ; Str2
.text:0040A0AE                 mov     edx, [ebp+0]
.text:0040A0B1                 mov     [esp+1Ch+Str1], edx ; Str1
.text:0040A0B4                 call    strcmp
.text:0040A0B9                 jmp     short loc_40A094
.text:0040A0B9 ; ---------------------------------------------------------------------------
.text:0040A0BB                 align 10h
.text:0040A0C0
.text:0040A0C0 loc_40A0C0:                             ; CODE XREF: sub_40A040+29↑j
.text:0040A0C0                                         ; sub_40A040+2F↑j
.text:0040A0C0                 mov     eax, 0FFFFFFFFh
.text:0040A0C5                 jmp     short loc_40A090
.text:0040A0C5 sub_40A040      endp
.text:0040A0C5
.text:0040A0C5 ; ---------------------------------------------------------------------------
.text:0040A0C7                 align 10h
.text:0040A0D0
.text:0040A0D0 ; =============== S U B R O U T I N E =======================================
.text:0040A0D0
.text:0040A0D0
.text:0040A0D0 sub_40A0D0      proc near               ; DATA XREF: sub_404FA0+12D↑o
.text:0040A0D0
.text:0040A0D0 var_1C          = dword ptr -1Ch
.text:0040A0D0 var_18          = dword ptr -18h
.text:0040A0D0 var_10          = dword ptr -10h
.text:0040A0D0 var_C           = dword ptr -0Ch
.text:0040A0D0 var_8           = dword ptr -8
.text:0040A0D0 var_4           = dword ptr -4
.text:0040A0D0 arg_0           = dword ptr  4
.text:0040A0D0 arg_4           = dword ptr  8
.text:0040A0D0
.text:0040A0D0                 sub     esp, 1Ch
.text:0040A0D3                 mov     [esp+1Ch+var_8], edi
.text:0040A0D7                 mov     edi, [esp+1Ch+arg_0]
.text:0040A0DB                 mov     [esp+1Ch+var_4], ebp
.text:0040A0DF                 mov     ebp, [esp+1Ch+arg_4]
.text:0040A0E3                 mov     [esp+1Ch+var_10], ebx
.text:0040A0E7                 mov     [esp+1Ch+var_C], esi
.text:0040A0EB                 mov     esi, [edi+3Ch]
.text:0040A0EE                 mov     ecx, [ebp+3Ch]
.text:0040A0F1                 mov     ebx, [edi+38h]
.text:0040A0F4                 mov     edx, [ebp+38h]
.text:0040A0F7                 cmp     esi, ecx
.text:0040A0F9                 jl      short loc_40A150
.text:0040A0FB                 jg      short loc_40A101
.text:0040A0FD                 cmp     ebx, edx
.text:0040A0FF                 jb      short loc_40A150
.text:0040A101
.text:0040A101 loc_40A101:                             ; CODE XREF: sub_40A0D0+2B↑j
.text:0040A101                 cmp     esi, ecx
.text:0040A103                 mov     eax, 1
.text:0040A108                 jg      short loc_40A120
.text:0040A10A                 jl      short loc_40A110
.text:0040A10C                 cmp     ebx, edx
.text:0040A10E                 ja      short loc_40A120
.text:0040A110
.text:0040A110 loc_40A110:                             ; CODE XREF: sub_40A0D0+3A↑j
.text:0040A110                 xor     eax, eax
.text:0040A112                 lea     esi, [esi+0]
.text:0040A119                 lea     edi, [edi+0]
.text:0040A120
.text:0040A120 loc_40A120:                             ; CODE XREF: sub_40A0D0+38↑j
.text:0040A120                                         ; sub_40A0D0+3E↑j ...
.text:0040A120                 test    eax, eax
.text:0040A122                 jz      short loc_40A138
.text:0040A124
.text:0040A124 loc_40A124:                             ; CODE XREF: sub_40A0D0+79↓j
.text:0040A124                 mov     ebx, [esp+1Ch+var_10]
.text:0040A128                 mov     esi, [esp+1Ch+var_C]
.text:0040A12C                 mov     edi, [esp+1Ch+var_8]
.text:0040A130                 mov     ebp, [esp+1Ch+var_4]
.text:0040A134                 add     esp, 1Ch
.text:0040A137                 retn
.text:0040A138 ; ---------------------------------------------------------------------------
.text:0040A138
.text:0040A138 loc_40A138:                             ; CODE XREF: sub_40A0D0+52↑j
.text:0040A138                 mov     edx, [edi]
.text:0040A13A                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040A13E                 mov     edx, [ebp+0]
.text:0040A141                 mov     [esp+1Ch+var_1C], edx ; char *
.text:0040A144                 call    sub_40A750
.text:0040A149                 jmp     short loc_40A124
.text:0040A149 ; ---------------------------------------------------------------------------
.text:0040A14B                 align 10h
.text:0040A150
.text:0040A150 loc_40A150:                             ; CODE XREF: sub_40A0D0+29↑j
.text:0040A150                                         ; sub_40A0D0+2F↑j
.text:0040A150                 mov     eax, 0FFFFFFFFh
.text:0040A155                 jmp     short loc_40A120
.text:0040A155 sub_40A0D0      endp
.text:0040A155
.text:0040A155 ; ---------------------------------------------------------------------------
.text:0040A157                 align 10h
.text:0040A160
.text:0040A160 ; =============== S U B R O U T I N E =======================================
.text:0040A160
.text:0040A160
.text:0040A160 sub_40A160      proc near               ; DATA XREF: sub_404FA0+1AB↑o
.text:0040A160
.text:0040A160 Str1            = dword ptr -1Ch
.text:0040A160 Str2            = dword ptr -18h
.text:0040A160 var_10          = dword ptr -10h
.text:0040A160 var_C           = dword ptr -0Ch
.text:0040A160 var_8           = dword ptr -8
.text:0040A160 var_4           = dword ptr -4
.text:0040A160 arg_0           = dword ptr  4
.text:0040A160 arg_4           = dword ptr  8
.text:0040A160
.text:0040A160                 sub     esp, 1Ch
.text:0040A163                 mov     [esp+1Ch+var_8], edi
.text:0040A167                 mov     edi, [esp+1Ch+arg_0]
.text:0040A16B                 mov     [esp+1Ch+var_4], ebp
.text:0040A16F                 mov     ebp, [esp+1Ch+arg_4]
.text:0040A173                 mov     [esp+1Ch+var_10], ebx
.text:0040A177                 mov     [esp+1Ch+var_C], esi
.text:0040A17B                 mov     esi, [edi+3Ch]
.text:0040A17E                 mov     ecx, [ebp+3Ch]
.text:0040A181                 mov     ebx, [edi+38h]
.text:0040A184                 mov     edx, [ebp+38h]
.text:0040A187                 cmp     esi, ecx
.text:0040A189                 jl      short loc_40A1E0
.text:0040A18B                 jg      short loc_40A191
.text:0040A18D                 cmp     ebx, edx
.text:0040A18F                 jb      short loc_40A1E0
.text:0040A191
.text:0040A191 loc_40A191:                             ; CODE XREF: sub_40A160+2B↑j
.text:0040A191                 cmp     esi, ecx
.text:0040A193                 mov     eax, 1
.text:0040A198                 jg      short loc_40A1B0
.text:0040A19A                 jl      short loc_40A1A0
.text:0040A19C                 cmp     ebx, edx
.text:0040A19E                 ja      short loc_40A1B0
.text:0040A1A0
.text:0040A1A0 loc_40A1A0:                             ; CODE XREF: sub_40A160+3A↑j
.text:0040A1A0                 xor     eax, eax
.text:0040A1A2                 lea     esi, [esi+0]
.text:0040A1A9                 lea     edi, [edi+0]
.text:0040A1B0
.text:0040A1B0 loc_40A1B0:                             ; CODE XREF: sub_40A160+38↑j
.text:0040A1B0                                         ; sub_40A160+3E↑j ...
.text:0040A1B0                 test    eax, eax
.text:0040A1B2                 jz      short loc_40A1C8
.text:0040A1B4
.text:0040A1B4 loc_40A1B4:                             ; CODE XREF: sub_40A160+79↓j
.text:0040A1B4                 mov     ebx, [esp+1Ch+var_10]
.text:0040A1B8                 mov     esi, [esp+1Ch+var_C]
.text:0040A1BC                 mov     edi, [esp+1Ch+var_8]
.text:0040A1C0                 mov     ebp, [esp+1Ch+var_4]
.text:0040A1C4                 add     esp, 1Ch
.text:0040A1C7                 retn
.text:0040A1C8 ; ---------------------------------------------------------------------------
.text:0040A1C8
.text:0040A1C8 loc_40A1C8:                             ; CODE XREF: sub_40A160+52↑j
.text:0040A1C8                 mov     edx, [edi]
.text:0040A1CA                 mov     [esp+1Ch+Str2], edx ; Str2
.text:0040A1CE                 mov     edx, [ebp+0]
.text:0040A1D1                 mov     [esp+1Ch+Str1], edx ; Str1
.text:0040A1D4                 call    strcmp
.text:0040A1D9                 jmp     short loc_40A1B4
.text:0040A1D9 ; ---------------------------------------------------------------------------
.text:0040A1DB                 align 10h
.text:0040A1E0
.text:0040A1E0 loc_40A1E0:                             ; CODE XREF: sub_40A160+29↑j
.text:0040A1E0                                         ; sub_40A160+2F↑j
.text:0040A1E0                 mov     eax, 0FFFFFFFFh
.text:0040A1E5                 jmp     short loc_40A1B0
.text:0040A1E5 sub_40A160      endp
.text:0040A1E5
.text:0040A1E5 ; ---------------------------------------------------------------------------
.text:0040A1E7                 align 10h
.text:0040A1F0
.text:0040A1F0 loc_40A1F0:                             ; DATA XREF: sub_404FA0:loc_4050F4↑o
.text:0040A1F0                 mov     ecx, [esp+8]
.text:0040A1F4                 mov     edx, [ecx]
.text:0040A1F6                 mov     ecx, [esp+4]
.text:0040A1FA                 mov     [esp+8], edx
.text:0040A1FE                 mov     edx, [ecx]
.text:0040A200                 mov     [esp+4], edx
.text:0040A204                 jmp     sub_41A4A0
.text:0040A204 ; ---------------------------------------------------------------------------
.text:0040A209                 align 10h
.text:0040A210
.text:0040A210 ; =============== S U B R O U T I N E =======================================
.text:0040A210
.text:0040A210
.text:0040A210 sub_40A210      proc near               ; DATA XREF: sub_404FA0+14A↑o
.text:0040A210
.text:0040A210 var_C           = dword ptr -0Ch
.text:0040A210 var_8           = dword ptr -8
.text:0040A210 arg_0           = dword ptr  4
.text:0040A210 arg_4           = dword ptr  8
.text:0040A210
.text:0040A210                 sub     esp, 0Ch
.text:0040A213                 mov     ecx, [esp+0Ch+arg_0]
.text:0040A217                 mov     edx, [ecx]
.text:0040A219                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A21D                 mov     [esp+0Ch+var_8], edx
.text:0040A221                 mov     edx, [ecx]
.text:0040A223                 mov     [esp+0Ch+var_C], edx
.text:0040A226                 call    sub_41A4A0
.text:0040A22B                 add     esp, 0Ch
.text:0040A22E                 retn
.text:0040A22E sub_40A210      endp
.text:0040A22E
.text:0040A22E ; ---------------------------------------------------------------------------
.text:0040A22F                 align 10h
.text:0040A230
.text:0040A230 ; =============== S U B R O U T I N E =======================================
.text:0040A230
.text:0040A230
.text:0040A230 sub_40A230      proc near               ; DATA XREF: sub_404FA0:loc_40509D↑o
.text:0040A230
.text:0040A230 var_C           = dword ptr -0Ch
.text:0040A230 var_8           = dword ptr -8
.text:0040A230 arg_0           = dword ptr  4
.text:0040A230 arg_4           = dword ptr  8
.text:0040A230
.text:0040A230                 sub     esp, 0Ch
.text:0040A233                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A237                 mov     edx, [ecx]
.text:0040A239                 mov     ecx, [esp+0Ch+arg_0]
.text:0040A23D                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040A241                 mov     edx, [ecx]
.text:0040A243                 mov     [esp+0Ch+var_C], edx ; char *
.text:0040A246                 call    sub_40A750
.text:0040A24B                 add     esp, 0Ch
.text:0040A24E                 retn
.text:0040A24E sub_40A230      endp
.text:0040A24E
.text:0040A24E ; ---------------------------------------------------------------------------
.text:0040A24F                 align 10h
.text:0040A250
.text:0040A250 ; =============== S U B R O U T I N E =======================================
.text:0040A250
.text:0040A250
.text:0040A250 sub_40A250      proc near               ; DATA XREF: sub_404FA0:loc_40512E↑o
.text:0040A250
.text:0040A250 Str1            = dword ptr -0Ch
.text:0040A250 Str2            = dword ptr -8
.text:0040A250 arg_0           = dword ptr  4
.text:0040A250 arg_4           = dword ptr  8
.text:0040A250
.text:0040A250                 sub     esp, 0Ch
.text:0040A253                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A257                 mov     edx, [ecx]
.text:0040A259                 mov     ecx, [esp+0Ch+arg_0]
.text:0040A25D                 mov     [esp+0Ch+Str2], edx ; Str2
.text:0040A261                 mov     edx, [ecx]
.text:0040A263                 mov     [esp+0Ch+Str1], edx ; Str1
.text:0040A266                 call    strcmp
.text:0040A26B                 add     esp, 0Ch
.text:0040A26E                 retn
.text:0040A26E sub_40A250      endp
.text:0040A26E
.text:0040A26E ; ---------------------------------------------------------------------------
.text:0040A26F                 align 10h
.text:0040A270
.text:0040A270 ; =============== S U B R O U T I N E =======================================
.text:0040A270
.text:0040A270
.text:0040A270 sub_40A270      proc near               ; DATA XREF: sub_404FA0+F6↑o
.text:0040A270
.text:0040A270 var_C           = dword ptr -0Ch
.text:0040A270 var_8           = dword ptr -8
.text:0040A270 arg_0           = dword ptr  4
.text:0040A270 arg_4           = dword ptr  8
.text:0040A270
.text:0040A270                 sub     esp, 0Ch
.text:0040A273                 mov     ecx, [esp+0Ch+arg_0]
.text:0040A277                 mov     edx, [ecx]
.text:0040A279                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A27D                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040A281                 mov     edx, [ecx]
.text:0040A283                 mov     [esp+0Ch+var_C], edx ; char *
.text:0040A286                 call    sub_40A750
.text:0040A28B                 add     esp, 0Ch
.text:0040A28E                 retn
.text:0040A28E sub_40A270      endp
.text:0040A28E
.text:0040A28E ; ---------------------------------------------------------------------------
.text:0040A28F                 align 10h
.text:0040A290
.text:0040A290 ; =============== S U B R O U T I N E =======================================
.text:0040A290
.text:0040A290
.text:0040A290 sub_40A290      proc near               ; DATA XREF: sub_404FA0+184↑o
.text:0040A290
.text:0040A290 Str1            = dword ptr -0Ch
.text:0040A290 Str2            = dword ptr -8
.text:0040A290 arg_0           = dword ptr  4
.text:0040A290 arg_4           = dword ptr  8
.text:0040A290
.text:0040A290                 sub     esp, 0Ch
.text:0040A293                 mov     ecx, [esp+0Ch+arg_0]
.text:0040A297                 mov     edx, [ecx]
.text:0040A299                 mov     ecx, [esp+0Ch+arg_4]
.text:0040A29D                 mov     [esp+0Ch+Str2], edx ; Str2
.text:0040A2A1                 mov     edx, [ecx]
.text:0040A2A3                 mov     [esp+0Ch+Str1], edx ; Str1
.text:0040A2A6                 call    strcmp
.text:0040A2AB                 add     esp, 0Ch
.text:0040A2AE                 retn
.text:0040A2AE sub_40A290      endp
.text:0040A2AE
.text:0040A2AE ; ---------------------------------------------------------------------------
.text:0040A2AF                 align 10h
.text:0040A2B0
.text:0040A2B0 ; =============== S U B R O U T I N E =======================================
.text:0040A2B0
.text:0040A2B0
.text:0040A2B0 sub_40A2B0      proc near               ; DATA XREF: sub_404FA0:loc_4050BA↑o
.text:0040A2B0
.text:0040A2B0 Str             = dword ptr -1Ch
.text:0040A2B0 var_18          = dword ptr -18h
.text:0040A2B0 var_C           = dword ptr -0Ch
.text:0040A2B0 var_8           = dword ptr -8
.text:0040A2B0 var_4           = dword ptr -4
.text:0040A2B0 arg_0           = dword ptr  4
.text:0040A2B0 arg_4           = dword ptr  8
.text:0040A2B0
.text:0040A2B0                 sub     esp, 1Ch
.text:0040A2B3                 mov     [esp+1Ch+var_4], edi
.text:0040A2B7                 mov     edi, [esp+1Ch+arg_0]
.text:0040A2BB                 mov     [esp+1Ch+var_C], ebx
.text:0040A2BF                 mov     [esp+1Ch+var_8], esi
.text:0040A2C3                 mov     esi, [esp+1Ch+arg_4]
.text:0040A2C7                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0040A2CF                 mov     edx, [edi]
.text:0040A2D1                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A2D4                 call    strrchr
.text:0040A2D9                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0040A2E1                 mov     ebx, eax
.text:0040A2E3                 mov     edx, [esi]
.text:0040A2E5                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A2E8                 call    strrchr
.text:0040A2ED                 test    eax, eax
.text:0040A2EF                 jz      short loc_40A337
.text:0040A2F1
.text:0040A2F1 loc_40A2F1:                             ; CODE XREF: sub_40A2B0+8C↓j
.text:0040A2F1                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040A2F5                 test    ebx, ebx
.text:0040A2F7                 mov     eax, ebx
.text:0040A2F9                 jz      short loc_40A330
.text:0040A2FB
.text:0040A2FB loc_40A2FB:                             ; CODE XREF: sub_40A2B0+85↓j
.text:0040A2FB                 mov     [esp+1Ch+Str], eax ; char *
.text:0040A2FE                 call    sub_40A750
.text:0040A303                 test    eax, eax
.text:0040A305                 jz      short loc_40A317
.text:0040A307
.text:0040A307 loc_40A307:                             ; CODE XREF: sub_40A2B0+77↓j
.text:0040A307                 mov     ebx, [esp+1Ch+var_C]
.text:0040A30B                 mov     esi, [esp+1Ch+var_8]
.text:0040A30F                 mov     edi, [esp+1Ch+var_4]
.text:0040A313                 add     esp, 1Ch
.text:0040A316                 retn
.text:0040A317 ; ---------------------------------------------------------------------------
.text:0040A317
.text:0040A317 loc_40A317:                             ; CODE XREF: sub_40A2B0+55↑j
.text:0040A317                 mov     ebx, [esi]
.text:0040A319                 mov     [esp+1Ch+var_18], ebx ; char *
.text:0040A31D                 mov     ecx, [edi]
.text:0040A31F                 mov     [esp+1Ch+Str], ecx ; char *
.text:0040A322                 call    sub_40A750
.text:0040A327                 jmp     short loc_40A307
.text:0040A327 ; ---------------------------------------------------------------------------
.text:0040A329                 align 10h
.text:0040A330
.text:0040A330 loc_40A330:                             ; CODE XREF: sub_40A2B0+49↑j
.text:0040A330                 mov     eax, offset Locale
.text:0040A335                 jmp     short loc_40A2FB
.text:0040A337 ; ---------------------------------------------------------------------------
.text:0040A337
.text:0040A337 loc_40A337:                             ; CODE XREF: sub_40A2B0+3F↑j
.text:0040A337                 mov     eax, offset Locale
.text:0040A33C                 jmp     short loc_40A2F1
.text:0040A33C sub_40A2B0      endp
.text:0040A33C
.text:0040A33C ; ---------------------------------------------------------------------------
.text:0040A33E                 align 10h
.text:0040A340
.text:0040A340 ; =============== S U B R O U T I N E =======================================
.text:0040A340
.text:0040A340
.text:0040A340 sub_40A340      proc near               ; DATA XREF: sub_404FA0:loc_4051E3↑o
.text:0040A340
.text:0040A340 Str             = dword ptr -1Ch
.text:0040A340 Str2            = dword ptr -18h
.text:0040A340 var_C           = dword ptr -0Ch
.text:0040A340 var_8           = dword ptr -8
.text:0040A340 var_4           = dword ptr -4
.text:0040A340 arg_0           = dword ptr  4
.text:0040A340 arg_4           = dword ptr  8
.text:0040A340
.text:0040A340                 sub     esp, 1Ch
.text:0040A343                 mov     [esp+1Ch+var_4], edi
.text:0040A347                 mov     edi, [esp+1Ch+arg_0]
.text:0040A34B                 mov     [esp+1Ch+var_C], ebx
.text:0040A34F                 mov     [esp+1Ch+var_8], esi
.text:0040A353                 mov     esi, [esp+1Ch+arg_4]
.text:0040A357                 mov     [esp+1Ch+Str2], 2Eh ; '.' ; Ch
.text:0040A35F                 mov     edx, [edi]
.text:0040A361                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A364                 call    strrchr
.text:0040A369                 mov     [esp+1Ch+Str2], 2Eh ; '.' ; Ch
.text:0040A371                 mov     ebx, eax
.text:0040A373                 mov     edx, [esi]
.text:0040A375                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A378                 call    strrchr
.text:0040A37D                 test    eax, eax
.text:0040A37F                 jz      short loc_40A3C7
.text:0040A381
.text:0040A381 loc_40A381:                             ; CODE XREF: sub_40A340+8C↓j
.text:0040A381                 mov     [esp+1Ch+Str2], eax ; Str2
.text:0040A385                 test    ebx, ebx
.text:0040A387                 mov     eax, ebx
.text:0040A389                 jz      short loc_40A3C0
.text:0040A38B
.text:0040A38B loc_40A38B:                             ; CODE XREF: sub_40A340+85↓j
.text:0040A38B                 mov     [esp+1Ch+Str], eax ; Str1
.text:0040A38E                 call    strcmp
.text:0040A393                 test    eax, eax
.text:0040A395                 jz      short loc_40A3A7
.text:0040A397
.text:0040A397 loc_40A397:                             ; CODE XREF: sub_40A340+77↓j
.text:0040A397                 mov     ebx, [esp+1Ch+var_C]
.text:0040A39B                 mov     esi, [esp+1Ch+var_8]
.text:0040A39F                 mov     edi, [esp+1Ch+var_4]
.text:0040A3A3                 add     esp, 1Ch
.text:0040A3A6                 retn
.text:0040A3A7 ; ---------------------------------------------------------------------------
.text:0040A3A7
.text:0040A3A7 loc_40A3A7:                             ; CODE XREF: sub_40A340+55↑j
.text:0040A3A7                 mov     ebx, [esi]
.text:0040A3A9                 mov     [esp+1Ch+Str2], ebx ; Str2
.text:0040A3AD                 mov     ecx, [edi]
.text:0040A3AF                 mov     [esp+1Ch+Str], ecx ; Str1
.text:0040A3B2                 call    strcmp
.text:0040A3B7                 jmp     short loc_40A397
.text:0040A3B7 ; ---------------------------------------------------------------------------
.text:0040A3B9                 align 10h
.text:0040A3C0
.text:0040A3C0 loc_40A3C0:                             ; CODE XREF: sub_40A340+49↑j
.text:0040A3C0                 mov     eax, offset Locale
.text:0040A3C5                 jmp     short loc_40A38B
.text:0040A3C7 ; ---------------------------------------------------------------------------
.text:0040A3C7
.text:0040A3C7 loc_40A3C7:                             ; CODE XREF: sub_40A340+3F↑j
.text:0040A3C7                 mov     eax, offset Locale
.text:0040A3CC                 jmp     short loc_40A381
.text:0040A3CC sub_40A340      endp
.text:0040A3CC
.text:0040A3CC ; ---------------------------------------------------------------------------
.text:0040A3CE                 align 10h
.text:0040A3D0
.text:0040A3D0 ; =============== S U B R O U T I N E =======================================
.text:0040A3D0
.text:0040A3D0
.text:0040A3D0 sub_40A3D0      proc near               ; DATA XREF: sub_404FA0+110↑o
.text:0040A3D0
.text:0040A3D0 Str             = dword ptr -1Ch
.text:0040A3D0 var_18          = dword ptr -18h
.text:0040A3D0 var_C           = dword ptr -0Ch
.text:0040A3D0 var_8           = dword ptr -8
.text:0040A3D0 var_4           = dword ptr -4
.text:0040A3D0 arg_0           = dword ptr  4
.text:0040A3D0 arg_4           = dword ptr  8
.text:0040A3D0
.text:0040A3D0                 sub     esp, 1Ch
.text:0040A3D3                 mov     [esp+1Ch+var_4], edi
.text:0040A3D7                 mov     edi, [esp+1Ch+arg_4]
.text:0040A3DB                 mov     [esp+1Ch+var_C], ebx
.text:0040A3DF                 mov     [esp+1Ch+var_8], esi
.text:0040A3E3                 mov     esi, [esp+1Ch+arg_0]
.text:0040A3E7                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0040A3EF                 mov     edx, [edi]
.text:0040A3F1                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A3F4                 call    strrchr
.text:0040A3F9                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0040A401                 mov     ebx, eax
.text:0040A403                 mov     edx, [esi]
.text:0040A405                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A408                 call    strrchr
.text:0040A40D                 test    eax, eax
.text:0040A40F                 jz      short loc_40A457
.text:0040A411
.text:0040A411 loc_40A411:                             ; CODE XREF: sub_40A3D0+8C↓j
.text:0040A411                 mov     [esp+1Ch+var_18], eax ; char *
.text:0040A415                 test    ebx, ebx
.text:0040A417                 mov     eax, ebx
.text:0040A419                 jz      short loc_40A450
.text:0040A41B
.text:0040A41B loc_40A41B:                             ; CODE XREF: sub_40A3D0+85↓j
.text:0040A41B                 mov     [esp+1Ch+Str], eax ; char *
.text:0040A41E                 call    sub_40A750
.text:0040A423                 test    eax, eax
.text:0040A425                 jz      short loc_40A437
.text:0040A427
.text:0040A427 loc_40A427:                             ; CODE XREF: sub_40A3D0+77↓j
.text:0040A427                 mov     ebx, [esp+1Ch+var_C]
.text:0040A42B                 mov     esi, [esp+1Ch+var_8]
.text:0040A42F                 mov     edi, [esp+1Ch+var_4]
.text:0040A433                 add     esp, 1Ch
.text:0040A436                 retn
.text:0040A437 ; ---------------------------------------------------------------------------
.text:0040A437
.text:0040A437 loc_40A437:                             ; CODE XREF: sub_40A3D0+55↑j
.text:0040A437                 mov     ebx, [esi]
.text:0040A439                 mov     [esp+1Ch+var_18], ebx ; char *
.text:0040A43D                 mov     ecx, [edi]
.text:0040A43F                 mov     [esp+1Ch+Str], ecx ; char *
.text:0040A442                 call    sub_40A750
.text:0040A447                 jmp     short loc_40A427
.text:0040A447 ; ---------------------------------------------------------------------------
.text:0040A449                 align 10h
.text:0040A450
.text:0040A450 loc_40A450:                             ; CODE XREF: sub_40A3D0+49↑j
.text:0040A450                 mov     eax, offset Locale
.text:0040A455                 jmp     short loc_40A41B
.text:0040A457 ; ---------------------------------------------------------------------------
.text:0040A457
.text:0040A457 loc_40A457:                             ; CODE XREF: sub_40A3D0+3F↑j
.text:0040A457                 mov     eax, offset Locale
.text:0040A45C                 jmp     short loc_40A411
.text:0040A45C sub_40A3D0      endp
.text:0040A45C
.text:0040A45C ; ---------------------------------------------------------------------------
.text:0040A45E                 align 10h
.text:0040A460
.text:0040A460 ; =============== S U B R O U T I N E =======================================
.text:0040A460
.text:0040A460
.text:0040A460 sub_40A460      proc near               ; DATA XREF: sub_404FA0+239↑o
.text:0040A460
.text:0040A460 Str             = dword ptr -1Ch
.text:0040A460 Str2            = dword ptr -18h
.text:0040A460 var_C           = dword ptr -0Ch
.text:0040A460 var_8           = dword ptr -8
.text:0040A460 var_4           = dword ptr -4
.text:0040A460 arg_0           = dword ptr  4
.text:0040A460 arg_4           = dword ptr  8
.text:0040A460
.text:0040A460                 sub     esp, 1Ch
.text:0040A463                 mov     [esp+1Ch+var_4], edi
.text:0040A467                 mov     edi, [esp+1Ch+arg_4]
.text:0040A46B                 mov     [esp+1Ch+var_C], ebx
.text:0040A46F                 mov     [esp+1Ch+var_8], esi
.text:0040A473                 mov     esi, [esp+1Ch+arg_0]
.text:0040A477                 mov     [esp+1Ch+Str2], 2Eh ; '.' ; Ch
.text:0040A47F                 mov     edx, [edi]
.text:0040A481                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A484                 call    strrchr
.text:0040A489                 mov     [esp+1Ch+Str2], 2Eh ; '.' ; Ch
.text:0040A491                 mov     ebx, eax
.text:0040A493                 mov     edx, [esi]
.text:0040A495                 mov     [esp+1Ch+Str], edx ; Str
.text:0040A498                 call    strrchr
.text:0040A49D                 test    eax, eax
.text:0040A49F                 jz      short loc_40A4E7
.text:0040A4A1
.text:0040A4A1 loc_40A4A1:                             ; CODE XREF: sub_40A460+8C↓j
.text:0040A4A1                 mov     [esp+1Ch+Str2], eax ; Str2
.text:0040A4A5                 test    ebx, ebx
.text:0040A4A7                 mov     eax, ebx
.text:0040A4A9                 jz      short loc_40A4E0
.text:0040A4AB
.text:0040A4AB loc_40A4AB:                             ; CODE XREF: sub_40A460+85↓j
.text:0040A4AB                 mov     [esp+1Ch+Str], eax ; Str1
.text:0040A4AE                 call    strcmp
.text:0040A4B3                 test    eax, eax
.text:0040A4B5                 jz      short loc_40A4C7
.text:0040A4B7
.text:0040A4B7 loc_40A4B7:                             ; CODE XREF: sub_40A460+77↓j
.text:0040A4B7                 mov     ebx, [esp+1Ch+var_C]
.text:0040A4BB                 mov     esi, [esp+1Ch+var_8]
.text:0040A4BF                 mov     edi, [esp+1Ch+var_4]
.text:0040A4C3                 add     esp, 1Ch
.text:0040A4C6                 retn
.text:0040A4C7 ; ---------------------------------------------------------------------------
.text:0040A4C7
.text:0040A4C7 loc_40A4C7:                             ; CODE XREF: sub_40A460+55↑j
.text:0040A4C7                 mov     ebx, [esi]
.text:0040A4C9                 mov     [esp+1Ch+Str2], ebx ; Str2
.text:0040A4CD                 mov     ecx, [edi]
.text:0040A4CF                 mov     [esp+1Ch+Str], ecx ; Str1
.text:0040A4D2                 call    strcmp
.text:0040A4D7                 jmp     short loc_40A4B7
.text:0040A4D7 ; ---------------------------------------------------------------------------
.text:0040A4D9                 align 10h
.text:0040A4E0
.text:0040A4E0 loc_40A4E0:                             ; CODE XREF: sub_40A460+49↑j
.text:0040A4E0                 mov     eax, offset Locale
.text:0040A4E5                 jmp     short loc_40A4AB
.text:0040A4E7 ; ---------------------------------------------------------------------------
.text:0040A4E7
.text:0040A4E7 loc_40A4E7:                             ; CODE XREF: sub_40A460+3F↑j
.text:0040A4E7                 mov     eax, offset Locale
.text:0040A4EC                 jmp     short loc_40A4A1
.text:0040A4EC sub_40A460      endp
.text:0040A4EC
.text:0040A4EC ; ---------------------------------------------------------------------------
.text:0040A4EE                 align 10h
.text:0040A4F0
.text:0040A4F0 ; =============== S U B R O U T I N E =======================================
.text:0040A4F0
.text:0040A4F0 ; Attributes: bp-based frame
.text:0040A4F0
.text:0040A4F0 sub_40A4F0      proc near               ; CODE XREF: sub_405490+4B6↑p
.text:0040A4F0
.text:0040A4F0 Time            = dword ptr -0B8h
.text:0040A4F0 var_B4          = dword ptr -0B4h
.text:0040A4F0 var_B0          = dword ptr -0B0h
.text:0040A4F0 var_AC          = dword ptr -0ACh
.text:0040A4F0 var_A8          = dword ptr -0A8h
.text:0040A4F0 var_A4          = dword ptr -0A4h
.text:0040A4F0 var_A0          = byte ptr -0A0h
.text:0040A4F0 var_90          = dword ptr -90h
.text:0040A4F0 var_8C          = dword ptr -8Ch
.text:0040A4F0 Size            = dword ptr -88h
.text:0040A4F0 var_C           = dword ptr -0Ch
.text:0040A4F0 var_8           = dword ptr -8
.text:0040A4F0 var_4           = dword ptr -4
.text:0040A4F0
.text:0040A4F0                 push    ebp
.text:0040A4F1                 mov     ebp, esp
.text:0040A4F3                 sub     esp, 0B8h
.text:0040A4F9                 mov     [ebp+var_C], ebx
.text:0040A4FC                 mov     eax, dword_42B0B4
.text:0040A501                 mov     [ebp+var_8], esi
.text:0040A504                 mov     [ebp+var_4], edi
.text:0040A507                 test    eax, eax
.text:0040A509                 js      short loc_40A518
.text:0040A50B
.text:0040A50B loc_40A50B:                             ; CODE XREF: sub_40A4F0+C7↓j
.text:0040A50B                                         ; sub_40A4F0+D7↓j
.text:0040A50B                 mov     ebx, [ebp+var_C]
.text:0040A50E                 mov     esi, [ebp+var_8]
.text:0040A511                 mov     edi, [ebp+var_4]
.text:0040A514                 mov     esp, ebp
.text:0040A516                 pop     ebp
.text:0040A517                 retn
.text:0040A518 ; ---------------------------------------------------------------------------
.text:0040A518
.text:0040A518 loc_40A518:                             ; CODE XREF: sub_40A4F0+19↑j
.text:0040A518                 xor     eax, eax
.text:0040A51A                 lea     edx, [ebp+var_8C]
.text:0040A520                 lea     ebx, [ebp+Size]
.text:0040A526                 mov     [ebp+var_8C], eax
.text:0040A52C                 mov     esi, 64h ; 'd'
.text:0040A531                 mov     [esp+0B8h+Time], edx ; Time
.text:0040A534                 call    localtime
.text:0040A539                 mov     [ebp+var_90], eax
.text:0040A53F                 mov     edi, off_42B0A8 ; "%b %e  %Y"
.text:0040A545                 lea     esi, [esi+0]
.text:0040A549                 lea     edi, [edi+0]
.text:0040A550
.text:0040A550 loc_40A550:                             ; CODE XREF: sub_40A4F0+AA↓j
.text:0040A550                 mov     byte ptr [ebx], 1
.text:0040A553                 mov     edx, [ebp+var_90]
.text:0040A559                 mov     [esp+0B8h+var_A4], 0 ; int
.text:0040A561                 mov     [esp+0B8h+var_A8], 0 ; int
.text:0040A569                 mov     [esp+0B8h+var_AC], edx ; struct tm *
.text:0040A56D                 mov     [esp+0B8h+var_B0], edi ; char *
.text:0040A571                 mov     [esp+0B8h+var_B4], esi ; int
.text:0040A575                 mov     [esp+0B8h+Time], ebx ; Size
.text:0040A578                 call    sub_40A870
.text:0040A57D                 test    eax, eax
.text:0040A57F                 jnz     short loc_40A59C
.text:0040A581                 cmp     byte ptr [ebx], 0
.text:0040A584                 jz      short loc_40A59C
.text:0040A586                 lea     ecx, [esi+esi]
.text:0040A589                 lea     eax, [ecx+0Fh]
.text:0040A58C                 mov     esi, ecx
.text:0040A58E                 and     eax, 0FFFFFFF0h
.text:0040A591                 call    __alloca
.text:0040A596                 lea     ebx, [esp+0B8h+var_A0]
.text:0040A59A                 jmp     short loc_40A550
.text:0040A59C ; ---------------------------------------------------------------------------
.text:0040A59C
.text:0040A59C loc_40A59C:                             ; CODE XREF: sub_40A4F0+8F↑j
.text:0040A59C                                         ; sub_40A4F0+94↑j
.text:0040A59C                 mov     [esp+0B8h+var_B0], 0 ; char
.text:0040A5A4                 mov     [esp+0B8h+var_B4], eax ; int
.text:0040A5A8                 mov     [esp+0B8h+Time], ebx ; char *
.text:0040A5AB                 call    sub_40C8F0
.text:0040A5B0                 mov     dword_42B0B4, eax
.text:0040A5B5                 test    eax, eax
.text:0040A5B7                 jns     loc_40A50B
.text:0040A5BD                 xor     ebx, ebx
.text:0040A5BF                 xor     eax, eax
.text:0040A5C1                 mov     dword_42B0B4, ebx
.text:0040A5C7                 jmp     loc_40A50B
.text:0040A5C7 sub_40A4F0      endp
.text:0040A5C7
.text:0040A5C7 ; ---------------------------------------------------------------------------
.text:0040A5CC                 align 10h
.text:0040A5D0
.text:0040A5D0 ; =============== S U B R O U T I N E =======================================
.text:0040A5D0
.text:0040A5D0
.text:0040A5D0 sub_40A5D0      proc near               ; CODE XREF: sub_407240:loc_40726D↑p
.text:0040A5D0
.text:0040A5D0 var_1C          = dword ptr -1Ch
.text:0040A5D0 var_18          = dword ptr -18h
.text:0040A5D0 var_14          = dword ptr -14h
.text:0040A5D0
.text:0040A5D0                 push    ebp
.text:0040A5D1                 push    edi
.text:0040A5D2                 push    esi
.text:0040A5D3                 push    ebx
.text:0040A5D4                 sub     esp, 0Ch
.text:0040A5D7                 mov     edi, ds:dword_42C050
.text:0040A5DD                 mov     edx, ds:dword_42C330
.text:0040A5E3                 cmp     edi, edx
.text:0040A5E5                 jbe     short loc_40A5E9
.text:0040A5E7                 mov     edi, edx
.text:0040A5E9
.text:0040A5E9 loc_40A5E9:                             ; CODE XREF: sub_40A5D0+15↑j
.text:0040A5E9                 cmp     ds:dword_42C010, edi
.text:0040A5EF                 jnb     loc_40A68E
.text:0040A5F5                 mov     ecx, edx
.text:0040A5F7                 shr     ecx, 1
.text:0040A5F9                 cmp     edi, ecx
.text:0040A5FB                 jnb     loc_40A6DC
.text:0040A601                 mov     [esp+1Ch+var_14], 18h ; int
.text:0040A609                 mov     ecx, ds:dword_42C320
.text:0040A60F                 lea     esi, [edi+edi]
.text:0040A612                 mov     [esp+1Ch+var_18], edi ; int
.text:0040A616                 mov     [esp+1Ch+var_1C], ecx ; void *
.text:0040A619                 call    sub_412450
.text:0040A61E                 mov     ds:dword_42C320, eax
.text:0040A623
.text:0040A623 loc_40A623:                             ; CODE XREF: sub_40A5D0+131↓j
.text:0040A623                 mov     ebp, ds:dword_42C010
.text:0040A629                 mov     edx, esi
.text:0040A62B                 lea     ecx, [esi+ebp+1]
.text:0040A62F                 sub     edx, ebp
.text:0040A631                 mov     ebx, ecx
.text:0040A633                 imul    ebx, edx
.text:0040A636                 cmp     ecx, esi
.text:0040A638                 jb      short loc_40A646
.text:0040A63A                 mov     ebp, edx
.text:0040A63C                 mov     eax, ebx
.text:0040A63E                 xor     edx, edx
.text:0040A640                 div     ebp
.text:0040A642                 cmp     eax, ecx
.text:0040A644                 jz      short loc_40A64B
.text:0040A646
.text:0040A646 loc_40A646:                             ; CODE XREF: sub_40A5D0+68↑j
.text:0040A646                 call    sub_415320
.text:0040A64B ; ---------------------------------------------------------------------------
.text:0040A64B
.text:0040A64B loc_40A64B:                             ; CODE XREF: sub_40A5D0+74↑j
.text:0040A64B                 mov     [esp+1Ch+var_18], 4
.text:0040A653                 shr     ebx, 1
.text:0040A655                 mov     [esp+1Ch+var_1C], ebx
.text:0040A658                 call    sub_4123E0
.text:0040A65D                 mov     ecx, ds:dword_42C010
.text:0040A663                 mov     edx, eax
.text:0040A665                 cmp     ecx, esi
.text:0040A667                 jnb     short loc_40A688
.text:0040A669                 mov     ebp, ds:dword_42C320
.text:0040A66F                 lea     eax, [ecx+ecx*2]
.text:0040A672                 shl     eax, 2
.text:0040A675                 add     eax, ebp
.text:0040A677                 add     eax, 8
.text:0040A67A
.text:0040A67A loc_40A67A:                             ; CODE XREF: sub_40A5D0+B6↓j
.text:0040A67A                 mov     [eax], edx
.text:0040A67C                 lea     edx, [edx+ecx*4+4]
.text:0040A680                 add     eax, 0Ch
.text:0040A683                 inc     ecx
.text:0040A684                 cmp     ecx, esi
.text:0040A686                 jb      short loc_40A67A
.text:0040A688
.text:0040A688 loc_40A688:                             ; CODE XREF: sub_40A5D0+97↑j
.text:0040A688                 mov     ds:dword_42C010, esi
.text:0040A68E
.text:0040A68E loc_40A68E:                             ; CODE XREF: sub_40A5D0+1F↑j
.text:0040A68E                 xor     ecx, ecx
.text:0040A690                 cmp     ecx, edi
.text:0040A692                 jnb     short loc_40A6D4
.text:0040A694                 mov     ebx, ds:dword_42C320
.text:0040A69A                 xor     esi, esi
.text:0040A69C                 lea     esi, [esi+0]
.text:0040A6A0
.text:0040A6A0 loc_40A6A0:                             ; CODE XREF: sub_40A5D0+102↓j
.text:0040A6A0                 mov     byte ptr [ebx+esi*4], 1
.text:0040A6A4                 lea     edx, [esi+3]
.text:0040A6A7                 xor     eax, eax
.text:0040A6A9                 mov     [ebx+esi*4+4], edx
.text:0040A6AD                 mov     edx, [ebx+esi*4+8]
.text:0040A6B1                 jmp     short loc_40A6C0
.text:0040A6B1 ; ---------------------------------------------------------------------------
.text:0040A6B3                 align 10h
.text:0040A6C0
.text:0040A6C0 loc_40A6C0:                             ; CODE XREF: sub_40A5D0+E1↑j
.text:0040A6C0                                         ; sub_40A5D0+FA↓j
.text:0040A6C0                 mov     dword ptr [edx+eax*4], 3
.text:0040A6C7                 inc     eax
.text:0040A6C8                 cmp     eax, ecx
.text:0040A6CA                 jbe     short loc_40A6C0
.text:0040A6CC                 inc     ecx
.text:0040A6CD                 add     esi, 3
.text:0040A6D0                 cmp     ecx, edi
.text:0040A6D2                 jb      short loc_40A6A0
.text:0040A6D4
.text:0040A6D4 loc_40A6D4:                             ; CODE XREF: sub_40A5D0+C2↑j
.text:0040A6D4                 add     esp, 0Ch
.text:0040A6D7                 pop     ebx
.text:0040A6D8                 pop     esi
.text:0040A6D9                 pop     edi
.text:0040A6DA                 pop     ebp
.text:0040A6DB                 retn
.text:0040A6DC ; ---------------------------------------------------------------------------
.text:0040A6DC
.text:0040A6DC loc_40A6DC:                             ; CODE XREF: sub_40A5D0+2B↑j
.text:0040A6DC                 mov     [esp+1Ch+var_14], 0Ch ; int
.text:0040A6E4                 mov     ebx, ds:dword_42C320
.text:0040A6EA                 mov     [esp+1Ch+var_18], edx ; int
.text:0040A6EE                 mov     [esp+1Ch+var_1C], ebx ; void *
.text:0040A6F1                 call    sub_412450
.text:0040A6F6                 mov     ds:dword_42C320, eax
.text:0040A6FB                 mov     esi, ds:dword_42C330
.text:0040A701                 jmp     loc_40A623
.text:0040A701 sub_40A5D0      endp
.text:0040A701
.text:0040A701 ; ---------------------------------------------------------------------------
.text:0040A706                 align 20h
.text:0040A720 aCannotCompareF db 'cannot compare file names %s and %s',0
.text:0040A720                                         ; DATA XREF: sub_40A750+77↓o
.text:0040A744                 align 10h
.text:0040A750
.text:0040A750 ; =============== S U B R O U T I N E =======================================
.text:0040A750
.text:0040A750
.text:0040A750 ; int __cdecl sub_40A750(char *, char *)
.text:0040A750 sub_40A750      proc near               ; CODE XREF: sub_409A70+5B↑p
.text:0040A750                                         ; sub_409B50+5B↑p ...
.text:0040A750
.text:0040A750 String1         = dword ptr -2Ch
.text:0040A750 String2         = dword ptr -28h
.text:0040A750 var_24          = dword ptr -24h
.text:0040A750 var_20          = byte ptr -20h
.text:0040A750 var_1C          = dword ptr -1Ch
.text:0040A750 var_10          = dword ptr -10h
.text:0040A750 var_C           = dword ptr -0Ch
.text:0040A750 var_8           = dword ptr -8
.text:0040A750 var_4           = dword ptr -4
.text:0040A750 arg_0           = dword ptr  4
.text:0040A750 arg_4           = dword ptr  8
.text:0040A750
.text:0040A750                 sub     esp, 2Ch
.text:0040A753                 mov     [esp+2Ch+var_C], esi
.text:0040A757                 mov     esi, [esp+2Ch+arg_4]
.text:0040A75B                 mov     [esp+2Ch+var_4], ebp
.text:0040A75F                 mov     ebp, [esp+2Ch+arg_0]
.text:0040A763                 mov     [esp+2Ch+var_10], ebx
.text:0040A767                 mov     [esp+2Ch+var_8], edi
.text:0040A76B                 call    _errno
.text:0040A770                 mov     dword ptr [eax], 0
.text:0040A776                 mov     [esp+2Ch+String2], esi ; String2
.text:0040A77A                 mov     [esp+2Ch+String1], ebp ; String1
.text:0040A77D                 call    strcoll
.text:0040A782                 mov     ebx, eax
.text:0040A784                 call    _errno
.text:0040A789                 mov     edx, [eax]
.text:0040A78B                 test    edx, edx
.text:0040A78D                 jnz     short loc_40A7A5
.text:0040A78F                 mov     eax, ebx
.text:0040A791                 mov     esi, [esp+2Ch+var_C]
.text:0040A795                 mov     ebx, [esp+2Ch+var_10]
.text:0040A799                 mov     edi, [esp+2Ch+var_8]
.text:0040A79D                 mov     ebp, [esp+2Ch+var_4]
.text:0040A7A1                 add     esp, 2Ch
.text:0040A7A4                 retn
.text:0040A7A5 ; ---------------------------------------------------------------------------
.text:0040A7A5
.text:0040A7A5 loc_40A7A5:                             ; CODE XREF: sub_40A750+3D↑j
.text:0040A7A5                 mov     [esp+2Ch+String2], esi ; char *
.text:0040A7A9                 mov     [esp+2Ch+String1], 1 ; int
.text:0040A7B0                 call    sub_4120D0
.text:0040A7B5                 mov     [esp+2Ch+String2], ebp ; char *
.text:0040A7B9                 mov     esi, eax
.text:0040A7BB                 mov     [esp+2Ch+String1], 0 ; int
.text:0040A7C2                 call    sub_4120D0
.text:0040A7C7                 mov     [esp+2Ch+String1], offset aCannotCompareF ; "cannot compare file names %s and %s"
.text:0040A7CE                 mov     ebx, eax
.text:0040A7D0                 call    ds:libintl_gettext
.text:0040A7D6                 mov     ebp, eax
.text:0040A7D8                 call    _errno
.text:0040A7DD                 mov     [esp+2Ch+var_1C], esi
.text:0040A7E1                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040A7E5                 mov     [esp+2Ch+var_24], ebp ; char *
.text:0040A7E9                 mov     edx, [eax]
.text:0040A7EB                 mov     [esp+2Ch+String1], 0 ; Code
.text:0040A7F2                 mov     [esp+2Ch+String2], edx ; ErrorMessage
.text:0040A7F6                 call    sub_4161E0
.text:0040A7FB                 mov     eax, ds:Code
.text:0040A800                 test    eax, eax
.text:0040A802                 jz      short loc_40A818
.text:0040A804
.text:0040A804 loc_40A804:                             ; CODE XREF: sub_40A750+D3↓j
.text:0040A804                 mov     [esp+2Ch+String2], 1 ; Value
.text:0040A80C                 mov     [esp+2Ch+String1], offset Buf ; Buf
.text:0040A813                 call    longjmp
.text:0040A818 ; ---------------------------------------------------------------------------
.text:0040A818
.text:0040A818 loc_40A818:                             ; CODE XREF: sub_40A750+B2↑j
.text:0040A818                 mov     ecx, 1
.text:0040A81D                 mov     ds:Code, ecx
.text:0040A823                 jmp     short loc_40A804
.text:0040A823 sub_40A750      endp
.text:0040A823
.text:0040A823 ; ---------------------------------------------------------------------------
.text:0040A825                 align 20h
.text:0040A840
.text:0040A840 ; =============== S U B R O U T I N E =======================================
.text:0040A840
.text:0040A840
.text:0040A840 sub_40A840      proc near               ; DATA XREF: sub_40A870+53↓o
.text:0040A840                 inc     edi
.text:0040A841                 dec     ebp
.text:0040A842                 push    esp
.text:0040A843
.text:0040A843 loc_40A843:                             ; DATA XREF: sub_40A870:loc_40B503↓o
.text:0040A843                 add     ds:64252F6Dh, ah
.text:0040A849                 das
.text:0040A84A
.text:0040A84A loc_40A84A:                             ; DATA XREF: sub_40A870:loc_40B6BE↓o
.text:0040A84A                 and     eax, 59250079h
.text:0040A84F                 sub     eax, 252D6D25h
.text:0040A854
.text:0040A854 loc_40A854:                             ; DATA XREF: sub_40A870:loc_40B7FA↓o
.text:0040A854                 add     fs:4D253A48h, ah
.text:0040A85B
.text:0040A85B loc_40A85B:                             ; DATA XREF: sub_40A870:loc_40B840↓o
.text:0040A85B                 add     ds:4D253A48h, ah
.text:0040A861
.text:0040A861 loc_40A861:                             ; DATA XREF: sub_40A870:loc_40BB72↓o
.text:0040A861                 cmp     ah, ds:8D000053h
.text:0040A867                 jbe     short $+2
.text:0040A869
.text:0040A869 loc_40A869:                             ; CODE XREF: sub_40A840+27↑j
.text:0040A869                 lea     edi, [edi+0]
.text:0040A869 sub_40A840      endp ; sp-analysis failed
.text:0040A869
.text:0040A870
.text:0040A870 ; =============== S U B R O U T I N E =======================================
.text:0040A870
.text:0040A870
.text:0040A870 ; int __cdecl sub_40A870(int, int, char *, struct tm *, int, int)
.text:0040A870 sub_40A870      proc near               ; CODE XREF: sub_405490+261↑p
.text:0040A870                                         ; sub_40A4F0+88↑p ...
.text:0040A870
.text:0040A870 Str             = dword ptr -59Ch
.text:0040A870 SizeInBytes     = dword ptr -598h
.text:0040A870 State           = dword ptr -594h
.text:0040A870 Tm              = dword ptr -590h
.text:0040A870 var_58C         = dword ptr -58Ch
.text:0040A870 var_588         = dword ptr -588h
.text:0040A870 var_57C         = dword ptr -57Ch
.text:0040A870 var_578         = dword ptr -578h
.text:0040A870 var_570         = dword ptr -570h
.text:0040A870 var_564         = dword ptr -564h
.text:0040A870 var_560         = dword ptr -560h
.text:0040A870 var_55C         = dword ptr -55Ch
.text:0040A870 var_558         = dword ptr -558h
.text:0040A870 var_554         = dword ptr -554h
.text:0040A870 var_550         = dword ptr -550h
.text:0040A870 var_54C         = dword ptr -54Ch
.text:0040A870 var_548         = dword ptr -548h
.text:0040A870 var_544         = dword ptr -544h
.text:0040A870 var_540         = dword ptr -540h
.text:0040A870 var_53C         = dword ptr -53Ch
.text:0040A870 var_538         = dword ptr -538h
.text:0040A870 Size            = dword ptr -534h
.text:0040A870 var_530         = dword ptr -530h
.text:0040A870 var_52C         = dword ptr -52Ch
.text:0040A870 var_528         = dword ptr -528h
.text:0040A870 var_524         = dword ptr -524h
.text:0040A870 var_520         = dword ptr -520h
.text:0040A870 var_51C         = dword ptr -51Ch
.text:0040A870 var_518         = dword ptr -518h
.text:0040A870 var_514         = dword ptr -514h
.text:0040A870 var_510         = dword ptr -510h
.text:0040A870 var_50C         = dword ptr -50Ch
.text:0040A870 var_508         = dword ptr -508h
.text:0040A870 var_504         = dword ptr -504h
.text:0040A870 var_500         = dword ptr -500h
.text:0040A870 var_4FC         = dword ptr -4FCh
.text:0040A870 var_4F8         = dword ptr -4F8h
.text:0040A870 Format          = byte ptr -4F4h
.text:0040A870 var_4F3         = byte ptr -4F3h
.text:0040A870 var_4F2         = byte ptr -4F2h
.text:0040A870 var_4F0         = mbstate_t ptr -4F0h
.text:0040A870 var_4E8         = dword ptr -4E8h
.text:0040A870 var_4E4         = dword ptr -4E4h
.text:0040A870 var_4E0         = dword ptr -4E0h
.text:0040A870 var_4DC         = dword ptr -4DCh
.text:0040A870 var_4D8         = dword ptr -4D8h
.text:0040A870 var_4BC         = tm ptr -4BCh
.text:0040A870 var_48C         = dword ptr -48Ch
.text:0040A870 var_488         = dword ptr -488h
.text:0040A870 var_484         = dword ptr -484h
.text:0040A870 var_478         = dword ptr -478h
.text:0040A870 var_470         = dword ptr -470h
.text:0040A870 var_45C         = tm ptr -45Ch
.text:0040A870 Buffer          = byte ptr -42Ch
.text:0040A870 var_2C          = byte ptr -2Ch
.text:0040A870 var_20          = byte ptr -20h
.text:0040A870 arg_0           = dword ptr  4
.text:0040A870 arg_4           = dword ptr  8
.text:0040A870 arg_8           = dword ptr  0Ch
.text:0040A870 arg_C           = dword ptr  10h
.text:0040A870 arg_10          = dword ptr  14h
.text:0040A870 arg_14          = dword ptr  18h
.text:0040A870
.text:0040A870                 push    ebp
.text:0040A871                 xor     edx, edx
.text:0040A873                 xor     ecx, ecx
.text:0040A875                 push    edi
.text:0040A876                 push    esi
.text:0040A877                 push    ebx
.text:0040A878                 sub     esp, 58Ch
.text:0040A87E                 xor     ebx, ebx
.text:0040A880                 mov     [esp+59Ch+var_500], edx
.text:0040A887                 mov     edi, [esp+59Ch+arg_C]
.text:0040A88E                 mov     edx, [esp+59Ch+arg_10]
.text:0040A895                 mov     [esp+59Ch+var_504], ebx
.text:0040A89C                 mov     eax, [esp+59Ch+arg_0]
.text:0040A8A3                 mov     esi, [edi+8]
.text:0040A8A6                 mov     [esp+59Ch+var_50C], ecx
.text:0040A8AD                 test    edx, edx
.text:0040A8AF                 mov     [esp+59Ch+var_508], eax
.text:0040A8B6                 mov     [esp+59Ch+var_4FC], esi
.text:0040A8BD                 jz      loc_40C790
.text:0040A8C3                 mov     ebp, offset sub_40A840
.text:0040A8C8                 mov     [esp+59Ch+var_500], ebp
.text:0040A8CF
.text:0040A8CF loc_40A8CF:                             ; CODE XREF: sub_40A870+1F25↓j
.text:0040A8CF                 cmp     [esp+59Ch+var_4FC], 0Ch
.text:0040A8D7                 jle     loc_40C770
.text:0040A8DD                 sub     [esp+59Ch+var_4FC], 0Ch
.text:0040A8E5
.text:0040A8E5 loc_40A8E5:                             ; CODE XREF: sub_40A870+1F09↓j
.text:0040A8E5                                         ; sub_40A870+1F1B↓j
.text:0040A8E5                 mov     ebp, [esp+59Ch+arg_8]
.text:0040A8EC                 movzx   eax, byte ptr [ebp+0]
.text:0040A8F0                 test    al, al
.text:0040A8F2                 jz      loc_40A9A0
.text:0040A8F8                 mov     cl, al
.text:0040A8FA
.text:0040A8FA loc_40A8FA:                             ; CODE XREF: sub_40A870+123↓j
.text:0040A8FA                 mov     [esp+59Ch+var_524], 0
.text:0040A902                 xor     eax, eax
.text:0040A904                 xor     ebx, ebx
.text:0040A906                 mov     [esp+59Ch+var_510], eax
.text:0040A90D                 mov     edi, 0FFFFFFFFh
.text:0040A912                 movsx   eax, cl
.text:0040A915                 mov     [esp+59Ch+var_528], 0
.text:0040A91D                 cmp     eax, 3Fh ; '?'
.text:0040A920                 jg      loc_40C750
.text:0040A926                 cmp     eax, 26h ; '&'
.text:0040A929                 jge     short loc_40A950
.text:0040A92B                 cmp     eax, 23h ; '#'
.text:0040A92E                 jg      loc_40AAD8
.text:0040A934                 cmp     eax, 20h ; ' '
.text:0040A937                 jge     short loc_40A950
.text:0040A939                 sub     eax, 8
.text:0040A93C                 cmp     eax, 5
.text:0040A93F
.text:0040A93F loc_40A93F:                             ; CODE XREF: sub_40A870+1EF8↓j
.text:0040A93F                 ja      loc_40A9D4
.text:0040A945                 lea     esi, [esi+0]
.text:0040A949                 lea     edi, [edi+0]
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: sub_40A870+B9↑j
.text:0040A950                                         ; sub_40A870+C7↑j ...
.text:0040A950                 mov     ebx, [esp+59Ch+arg_4]
.text:0040A957                 xor     edx, edx
.text:0040A959                 mov     edi, [esp+59Ch+var_504]
.text:0040A960                 sub     ebx, edi
.text:0040A962                 cmp     ebx, 1
.text:0040A965                 jbe     short loc_40A9C7
.text:0040A967                 mov     esi, [esp+59Ch+var_508]
.text:0040A96E                 test    esi, esi
.text:0040A970                 jz      short loc_40A983
.text:0040A972                 mov     edx, [esp+59Ch+var_508]
.text:0040A979                 mov     [edx], cl
.text:0040A97B                 inc     edx
.text:0040A97C                 mov     [esp+59Ch+var_508], edx
.text:0040A983
.text:0040A983 loc_40A983:                             ; CODE XREF: sub_40A870+100↑j
.text:0040A983                 inc     [esp+59Ch+var_504]
.text:0040A98A
.text:0040A98A loc_40A98A:                             ; CODE XREF: sub_40A870+23E↓j
.text:0040A98A                                         ; sub_40A870+5A2↓j ...
.text:0040A98A                 inc     ebp
.text:0040A98B                 movzx   edx, byte ptr [ebp+0]
.text:0040A98F                 test    dl, dl
.text:0040A991                 mov     cl, dl
.text:0040A993                 jnz     loc_40A8FA
.text:0040A999                 lea     esi, [esi+0]
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: sub_40A870+82↑j
.text:0040A9A0                 mov     ebp, [esp+59Ch+var_508]
.text:0040A9A7                 test    ebp, ebp
.text:0040A9A9                 jz      short loc_40A9C0
.text:0040A9AB                 mov     ecx, [esp+59Ch+arg_4]
.text:0040A9B2                 test    ecx, ecx
.text:0040A9B4                 jz      short loc_40A9C0
.text:0040A9B6                 mov     edi, [esp+59Ch+var_508]
.text:0040A9BD                 mov     byte ptr [edi], 0
.text:0040A9C0
.text:0040A9C0 loc_40A9C0:                             ; CODE XREF: sub_40A870+139↑j
.text:0040A9C0                                         ; sub_40A870+144↑j
.text:0040A9C0                 mov     edx, [esp+59Ch+var_504]
.text:0040A9C7
.text:0040A9C7 loc_40A9C7:                             ; CODE XREF: sub_40A870+F5↑j
.text:0040A9C7                                         ; sub_40A870+1DE↓j ...
.text:0040A9C7                 add     esp, 58Ch
.text:0040A9CD                 mov     eax, edx
.text:0040A9CF                 pop     ebx
.text:0040A9D0                 pop     esi
.text:0040A9D1                 pop     edi
.text:0040A9D2                 pop     ebp
.text:0040A9D3                 retn
.text:0040A9D4 ; ---------------------------------------------------------------------------
.text:0040A9D4
.text:0040A9D4 loc_40A9D4:                             ; CODE XREF: sub_40A870:loc_40A93F↑j
.text:0040A9D4                                         ; sub_40A870+26B↓j ...
.text:0040A9D4                 mov     eax, [esp+59Ch+var_50C]
.text:0040A9DB                 xor     esi, esi
.text:0040A9DD                 mov     ecx, ds:dword_42C420
.text:0040A9E3                 test    eax, eax
.text:0040A9E5                 mov     [esp+59Ch+var_4F0._Wchar], ecx
.text:0040A9EC                 jz      loc_40AAC0
.text:0040A9F2
.text:0040A9F2 loc_40A9F2:                             ; CODE XREF: sub_40A870+263↓j
.text:0040A9F2                 mov     edi, [esp+59Ch+var_50C]
.text:0040A9F9                 sub     edi, ebp
.text:0040A9FB                 lea     edx, [esp+59Ch+var_4F0]
.text:0040AA02                 mov     [esp+59Ch+State], edx ; State
.text:0040AA06                 mov     [esp+59Ch+SizeInBytes], edi ; SizeInBytes
.text:0040AA0A                 mov     [esp+59Ch+Str], ebp ; Ch
.text:0040AA0D                 call    mbrlen
.text:0040AA12                 test    eax, eax
.text:0040AA14                 jz      short loc_40AA2B
.text:0040AA16                 cmp     eax, 0FFFFFFFEh
.text:0040AA19                 jz      loc_40AAB3
.text:0040AA1F                 cmp     eax, 0FFFFFFFFh
.text:0040AA22                 mov     esi, 1
.text:0040AA27                 jz      short loc_40AA2B
.text:0040AA29
.text:0040AA29 loc_40AA29:                             ; CODE XREF: sub_40A870+24B↓j
.text:0040AA29                 mov     esi, eax
.text:0040AA2B
.text:0040AA2B loc_40AA2B:                             ; CODE XREF: sub_40A870+1A4↑j
.text:0040AA2B                                         ; sub_40A870+1B7↑j
.text:0040AA2B                 mov     ebx, esi
.text:0040AA2D                 mov     ecx, [esp+59Ch+arg_4]
.text:0040AA34                 not     ebx
.text:0040AA36                 mov     edx, ebx
.text:0040AA38                 mov     eax, [esp+59Ch+var_504]
.text:0040AA3F                 shr     edx, 1Fh
.text:0040AA42                 dec     edx
.text:0040AA43                 and     edx, ebx
.text:0040AA45                 sub     ecx, eax
.text:0040AA47                 lea     edi, [edx+esi]
.text:0040AA4A                 xor     edx, edx
.text:0040AA4C                 cmp     edi, ecx
.text:0040AA4E                 jnb     loc_40A9C7
.text:0040AA54                 mov     ecx, [esp+59Ch+var_508]
.text:0040AA5B                 test    ecx, ecx
.text:0040AA5D                 jz      short loc_40AAA3
.text:0040AA5F                 test    ebx, ebx
.text:0040AA61                 jle     short loc_40AA85
.text:0040AA63                 mov     [esp+59Ch+State], ebx ; Size
.text:0040AA67                 mov     eax, [esp+59Ch+var_508]
.text:0040AA6E                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040AA76                 mov     [esp+59Ch+Str], eax ; void *
.text:0040AA79                 call    memset
.text:0040AA7E                 add     [esp+59Ch+var_508], ebx
.text:0040AA85
.text:0040AA85 loc_40AA85:                             ; CODE XREF: sub_40A870+1F1↑j
.text:0040AA85                 mov     [esp+59Ch+State], esi ; Size
.text:0040AA89                 mov     ebx, [esp+59Ch+var_508]
.text:0040AA90                 mov     [esp+59Ch+SizeInBytes], ebp ; Src
.text:0040AA94                 mov     [esp+59Ch+Str], ebx ; void *
.text:0040AA97                 call    memcpy
.text:0040AA9C                 add     [esp+59Ch+var_508], esi
.text:0040AAA3
.text:0040AAA3 loc_40AAA3:                             ; CODE XREF: sub_40A870+1ED↑j
.text:0040AAA3                 add     [esp+59Ch+var_504], edi
.text:0040AAAA                 lea     ebp, [esi+ebp-1]
.text:0040AAAE                 jmp     loc_40A98A
.text:0040AAB3 ; ---------------------------------------------------------------------------
.text:0040AAB3
.text:0040AAB3 loc_40AAB3:                             ; CODE XREF: sub_40A870+1A9↑j
.text:0040AAB3                 mov     [esp+59Ch+Str], ebp ; Str
.text:0040AAB6                 call    strlen
.text:0040AABB                 jmp     loc_40AA29
.text:0040AAC0 ; ---------------------------------------------------------------------------
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: sub_40A870+17C↑j
.text:0040AAC0                 mov     [esp+59Ch+Str], ebp ; Str
.text:0040AAC3                 call    strlen
.text:0040AAC8                 lea     ebx, [eax+ebp+1]
.text:0040AACC                 mov     [esp+59Ch+var_50C], ebx
.text:0040AAD3                 jmp     loc_40A9F2
.text:0040AAD8 ; ---------------------------------------------------------------------------
.text:0040AAD8
.text:0040AAD8 loc_40AAD8:                             ; CODE XREF: sub_40A870+BE↑j
.text:0040AAD8                 cmp     eax, 25h ; '%'
.text:0040AADB                 jnz     loc_40A9D4
.text:0040AAE1                 jmp     short loc_40AAF0
.text:0040AAE1 ; ---------------------------------------------------------------------------
.text:0040AAE3                 align 10h
.text:0040AAF0
.text:0040AAF0 loc_40AAF0:                             ; CODE XREF: sub_40A870+271↑j
.text:0040AAF0                                         ; sub_40A870+2B0↓j ...
.text:0040AAF0                 inc     ebp
.text:0040AAF1                 movzx   ecx, byte ptr [ebp+0]
.text:0040AAF5                 movsx   edx, cl
.text:0040AAF8                 mov     al, cl
.text:0040AAFA                 cmp     edx, 30h ; '0'
.text:0040AAFD                 jz      short loc_40AB16
.text:0040AAFF                 cmp     edx, 30h ; '0'
.text:0040AB02                 jg      loc_40C730
.text:0040AB08                 cmp     edx, 23h ; '#'
.text:0040AB0B                 jz      loc_40C720
.text:0040AB11                 cmp     edx, 2Dh ; '-'
.text:0040AB14
.text:0040AB14 loc_40AB14:                             ; CODE XREF: sub_40A870+1EC8↓j
.text:0040AB14                 jnz     short loc_40AB22
.text:0040AB16
.text:0040AB16 loc_40AB16:                             ; CODE XREF: sub_40A870+28D↑j
.text:0040AB16                 movsx   esi, al
.text:0040AB19                 mov     [esp+59Ch+var_510], esi
.text:0040AB20                 jmp     short loc_40AAF0
.text:0040AB22 ; ---------------------------------------------------------------------------
.text:0040AB22
.text:0040AB22 loc_40AB22:                             ; CODE XREF: sub_40A870:loc_40AB14↑j
.text:0040AB22                 movsx   edx, al
.text:0040AB25                 sub     edx, 30h ; '0'
.text:0040AB28                 cmp     edx, 9
.text:0040AB2B                 ja      short loc_40AB61
.text:0040AB2D                 xor     edi, edi
.text:0040AB2F
.text:0040AB2F loc_40AB2F:                             ; CODE XREF: sub_40A870+2EF↓j
.text:0040AB2F                 cmp     edi, 0CCCCCCCh
.text:0040AB35                 jg      loc_40C714
.text:0040AB3B                 cmp     edi, 0CCCCCCCh
.text:0040AB41                 jz      loc_40C705
.text:0040AB47
.text:0040AB47 loc_40AB47:                             ; CODE XREF: sub_40A870+1E9E↓j
.text:0040AB47                 lea     eax, [edi+edi*4]
.text:0040AB4A                 movsx   esi, cl
.text:0040AB4D                 lea     edi, [esi+eax*2-30h]
.text:0040AB51
.text:0040AB51 loc_40AB51:                             ; CODE XREF: sub_40A870+1EA9↓j
.text:0040AB51                 inc     ebp
.text:0040AB52                 movzx   ecx, byte ptr [ebp+0]
.text:0040AB56                 movsx   edx, cl
.text:0040AB59                 sub     edx, 30h ; '0'
.text:0040AB5C                 cmp     edx, 9
.text:0040AB5F                 jbe     short loc_40AB2F
.text:0040AB61
.text:0040AB61 loc_40AB61:                             ; CODE XREF: sub_40A870+2BB↑j
.text:0040AB61                 movsx   eax, cl
.text:0040AB64                 cmp     eax, 45h ; 'E'
.text:0040AB67                 jz      loc_40C6F4
.text:0040AB6D                 xor     edx, edx
.text:0040AB6F                 cmp     eax, 4Fh ; 'O'
.text:0040AB72                 mov     [esp+59Ch+var_514], edx
.text:0040AB79                 jz      loc_40C6F4
.text:0040AB7F
.text:0040AB7F loc_40AB7F:                             ; CODE XREF: sub_40A870+1E90↓j
.text:0040AB7F                 movsx   eax, cl
.text:0040AB82                 cmp     eax, 7Ah        ; switch 123 cases
.text:0040AB85                 mov     [esp+59Ch+var_52C], eax
.text:0040AB89                 ja      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040AB8F                 jmp     ds:jpt_40AB8F[eax*4] ; switch jump
.text:0040AB8F ; ---------------------------------------------------------------------------
.text:0040AB96                 align 4
.text:0040AB98 jpt_40AB8F      dd offset loc_40AF72, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                                         ; DATA XREF: sub_40A870+31F↑r
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F ; jump table for switch statement
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset loc_40AD84, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset loc_40AF78
.text:0040AB98                 dd offset loc_40AF78, offset loc_40B1C4, offset loc_40B503
.text:0040AB98                 dd offset def_40AB8F, offset loc_40B6BE, offset loc_40BC20
.text:0040AB98                 dd offset loc_40B6CB, offset loc_40B702, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset loc_40B736
.text:0040AB98                 dd offset loc_40B770, offset def_40AB8F, offset loc_40B7CD
.text:0040AB98                 dd offset def_40AB8F, offset loc_40B7FA, offset loc_40B807
.text:0040AB98                 dd offset loc_40B840, offset loc_40B84D, offset loc_40BC20
.text:0040AB98                 dd offset loc_40B8A2, offset loc_40B910, offset loc_40B923
.text:0040AB98                 dd offset loc_40B970, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset def_40AB8F, offset def_40AB8F
.text:0040AB98                 dd offset def_40AB8F, offset loc_40AF78, offset loc_40BEF0
.text:0040AB98                 dd offset loc_40B910, offset loc_40BB83, offset loc_40BBC0
.text:0040AB98                 dd offset def_40AB8F, offset loc_40BC20, offset loc_40BEF0
.text:0040AB98                 dd offset def_40AB8F, offset loc_40BF18, offset loc_40BF4E
.text:0040AB98                 dd offset loc_40BF85, offset loc_40BFC0, offset loc_40BFF7
.text:0040AB98                 dd offset def_40AB8F, offset loc_40B7DD, offset def_40AB8F
.text:0040AB98                 dd offset loc_40AF9B, offset loc_40C085, offset loc_40C14B
.text:0040AB98                 dd offset loc_40C1E0, offset def_40AB8F, offset loc_40C22E
.text:0040AB98                 dd offset loc_40B910, offset loc_40C265, offset loc_40C2C2
.text:0040AD84 ; ---------------------------------------------------------------------------
.text:0040AD84
.text:0040AD84 loc_40AD84:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040AD84                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040AD84                 mov     esi, [esp+59Ch+var_514] ; jumptable 0040AB8F case 37
.text:0040AD8B                 test    esi, esi
.text:0040AD8D                 jnz     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040AD93                 lea     ebx, [edi-1]
.text:0040AD96                 mov     eax, [esp+59Ch+var_504]
.text:0040AD9D                 mov     edx, ebx
.text:0040AD9F                 shr     edx, 1Fh
.text:0040ADA2                 mov     edi, [esp+59Ch+arg_4]
.text:0040ADA9                 dec     edx
.text:0040ADAA                 and     edx, ebx
.text:0040ADAC                 lea     esi, [edx+1]
.text:0040ADAF                 sub     edi, eax
.text:0040ADB1                 xor     edx, edx
.text:0040ADB3                 cmp     esi, edi
.text:0040ADB5                 jnb     loc_40A9C7
.text:0040ADBB                 mov     eax, [esp+59Ch+var_508]
.text:0040ADC2                 test    eax, eax
.text:0040ADC4                 jz      short loc_40AE0B
.text:0040ADC6                 test    ebx, ebx
.text:0040ADC8                 jle     short loc_40ADFA
.text:0040ADCA                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040ADD2                 jz      short loc_40AE17
.text:0040ADD4                 mov     [esp+59Ch+State], ebx ; Size
.text:0040ADD8                 mov     edi, [esp+59Ch+var_508]
.text:0040ADDF                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040ADE7                 mov     [esp+59Ch+Str], edi ; void *
.text:0040ADEA
.text:0040ADEA loc_40ADEA:                             ; CODE XREF: sub_40A870+5BD↓j
.text:0040ADEA                 call    memset
.text:0040ADEF                 add     [esp+59Ch+var_508], ebx
.text:0040ADF6                 movzx   ecx, byte ptr [ebp+0]
.text:0040ADFA
.text:0040ADFA loc_40ADFA:                             ; CODE XREF: sub_40A870+558↑j
.text:0040ADFA                 mov     eax, [esp+59Ch+var_508]
.text:0040AE01                 mov     [eax], cl
.text:0040AE03
.text:0040AE03 loc_40AE03:                             ; CODE XREF: sub_40A870+17F8↓j
.text:0040AE03                                         ; sub_40A870+194C↓j
.text:0040AE03                 inc     eax
.text:0040AE04                 mov     [esp+59Ch+var_508], eax
.text:0040AE0B
.text:0040AE0B loc_40AE0B:                             ; CODE XREF: sub_40A870+554↑j
.text:0040AE0B                                         ; sub_40A870+6A5↓j ...
.text:0040AE0B                 add     [esp+59Ch+var_504], esi
.text:0040AE12                 jmp     loc_40A98A
.text:0040AE17 ; ---------------------------------------------------------------------------
.text:0040AE17
.text:0040AE17 loc_40AE17:                             ; CODE XREF: sub_40A870+562↑j
.text:0040AE17                 mov     [esp+59Ch+State], ebx
.text:0040AE1B                 mov     ecx, [esp+59Ch+var_508]
.text:0040AE22                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040AE2A                 mov     [esp+59Ch+Str], ecx
.text:0040AE2D                 jmp     short loc_40ADEA
.text:0040AE2D ; ---------------------------------------------------------------------------
.text:0040AE2F                 align 10h
.text:0040AE30
.text:0040AE30 def_40AB8F:                             ; CODE XREF: sub_40A870+319↑j
.text:0040AE30                                         ; sub_40A870+31F↑j ...
.text:0040AE30                 cmp     byte ptr [ebp+0], 25h ; '%' ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040AE34                 mov     esi, 1
.text:0040AE39                 jz      short loc_40AE46
.text:0040AE3B
.text:0040AE3B loc_40AE3B:                             ; CODE XREF: sub_40A870+5D4↓j
.text:0040AE3B                 inc     esi
.text:0040AE3C                 mov     edx, ebp
.text:0040AE3E                 sub     edx, esi
.text:0040AE40                 cmp     byte ptr [edx+1], 25h ; '%'
.text:0040AE44                 jnz     short loc_40AE3B
.text:0040AE46
.text:0040AE46 loc_40AE46:                             ; CODE XREF: sub_40A870+5C9↑j
.text:0040AE46                 mov     ebx, edi
.text:0040AE48                 mov     ecx, [esp+59Ch+var_504]
.text:0040AE4F                 sub     ebx, esi
.text:0040AE51                 mov     edi, ebx
.text:0040AE53                 shr     edi, 1Fh
.text:0040AE56                 dec     edi
.text:0040AE57                 and     edi, ebx
.text:0040AE59                 lea     edx, [edi+esi]
.text:0040AE5C                 mov     edi, [esp+59Ch+arg_4]
.text:0040AE63                 mov     [esp+59Ch+var_560], edx
.text:0040AE67                 xor     edx, edx
.text:0040AE69                 sub     edi, ecx
.text:0040AE6B                 cmp     [esp+59Ch+var_560], edi
.text:0040AE6F                 jnb     loc_40A9C7
.text:0040AE75                 mov     eax, [esp+59Ch+var_508]
.text:0040AE7C                 test    eax, eax
.text:0040AE7E                 jz      loc_40AF11
.text:0040AE84                 test    ebx, ebx
.text:0040AE86                 jle     short loc_40AEB8
.text:0040AE88                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040AE90                 jz      loc_40AF57
.text:0040AE96                 mov     [esp+59Ch+State], ebx ; Size
.text:0040AE9A                 mov     edx, [esp+59Ch+var_508]
.text:0040AEA1                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040AEA9                 mov     [esp+59Ch+Str], edx ; void *
.text:0040AEAC
.text:0040AEAC loc_40AEAC:                             ; CODE XREF: sub_40A870+6FD↓j
.text:0040AEAC                 call    memset
.text:0040AEB1                 add     [esp+59Ch+var_508], ebx
.text:0040AEB8
.text:0040AEB8 loc_40AEB8:                             ; CODE XREF: sub_40A870+616↑j
.text:0040AEB8                 mov     ebx, [esp+59Ch+var_528]
.text:0040AEBC                 test    ebx, ebx
.text:0040AEBE                 jz      short loc_40AF39
.text:0040AEC0                 mov     ecx, ebp
.text:0040AEC2                 lea     ebx, [esi-1]
.text:0040AEC5                 sub     ecx, esi
.text:0040AEC7                 test    esi, esi
.text:0040AEC9                 lea     edi, [ecx+1]
.text:0040AECC                 jz      short loc_40AF0A
.text:0040AECE
.text:0040AECE loc_40AECE:                             ; CODE XREF: sub_40A870+698↓j
.text:0040AECE                 movzx   edx, byte ptr [ebx+edi]
.text:0040AED2                 mov     eax, ds:__mb_cur_max
.text:0040AED7                 movzx   ecx, dl
.text:0040AEDA                 cmp     dword ptr [eax], 1
.text:0040AEDD                 jz      short loc_40AF29
.text:0040AEDF                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040AEE7                 mov     [esp+59Ch+Str], ecx ; C
.text:0040AEEA                 call    _isctype
.text:0040AEEF                 movzx   edx, byte ptr [ebx+edi]
.text:0040AEF3
.text:0040AEF3 loc_40AEF3:                             ; CODE XREF: sub_40A870+6C7↓j
.text:0040AEF3                 test    eax, eax
.text:0040AEF5                 mov     cl, dl
.text:0040AEF7                 jnz     short loc_40AF1A
.text:0040AEF9
.text:0040AEF9 loc_40AEF9:                             ; CODE XREF: sub_40A870+6B7↓j
.text:0040AEF9                 mov     edx, [esp+59Ch+var_508]
.text:0040AF00                 mov     [ebx+edx], cl
.text:0040AF03                 mov     edx, ebx
.text:0040AF05                 dec     ebx
.text:0040AF06                 test    edx, edx
.text:0040AF08                 jnz     short loc_40AECE
.text:0040AF0A
.text:0040AF0A loc_40AF0A:                             ; CODE XREF: sub_40A870+65C↑j
.text:0040AF0A                                         ; sub_40A870+6E5↓j
.text:0040AF0A                 add     [esp+59Ch+var_508], esi
.text:0040AF11
.text:0040AF11 loc_40AF11:                             ; CODE XREF: sub_40A870+60E↑j
.text:0040AF11                 mov     esi, [esp+59Ch+var_560]
.text:0040AF15                 jmp     loc_40AE0B
.text:0040AF1A ; ---------------------------------------------------------------------------
.text:0040AF1A
.text:0040AF1A loc_40AF1A:                             ; CODE XREF: sub_40A870+687↑j
.text:0040AF1A                 movzx   ecx, dl
.text:0040AF1D                 mov     [esp+59Ch+Str], ecx ; C
.text:0040AF20                 call    toupper
.text:0040AF25                 mov     cl, al
.text:0040AF27                 jmp     short loc_40AEF9
.text:0040AF29 ; ---------------------------------------------------------------------------
.text:0040AF29
.text:0040AF29 loc_40AF29:                             ; CODE XREF: sub_40A870+66D↑j
.text:0040AF29                 mov     eax, ds:_pctype
.text:0040AF2E                 mov     eax, [eax]
.text:0040AF30                 movzx   eax, word ptr [eax+ecx*2]
.text:0040AF34                 and     eax, 2
.text:0040AF37                 jmp     short loc_40AEF3
.text:0040AF39 ; ---------------------------------------------------------------------------
.text:0040AF39
.text:0040AF39 loc_40AF39:                             ; CODE XREF: sub_40A870+64E↑j
.text:0040AF39                 mov     [esp+59Ch+State], esi ; Size
.text:0040AF3D                 mov     ebx, ebp
.text:0040AF3F                 mov     edi, [esp+59Ch+var_508]
.text:0040AF46                 sub     ebx, esi
.text:0040AF48                 inc     ebx
.text:0040AF49                 mov     [esp+59Ch+SizeInBytes], ebx ; Src
.text:0040AF4D                 mov     [esp+59Ch+Str], edi ; void *
.text:0040AF50                 call    memcpy
.text:0040AF55                 jmp     short loc_40AF0A
.text:0040AF57 ; ---------------------------------------------------------------------------
.text:0040AF57
.text:0040AF57 loc_40AF57:                             ; CODE XREF: sub_40A870+620↑j
.text:0040AF57                 mov     [esp+59Ch+State], ebx
.text:0040AF5B                 mov     ecx, [esp+59Ch+var_508]
.text:0040AF62                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040AF6A                 mov     [esp+59Ch+Str], ecx
.text:0040AF6D                 jmp     loc_40AEAC
.text:0040AF72 ; ---------------------------------------------------------------------------
.text:0040AF72
.text:0040AF72 loc_40AF72:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040AF72                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040AF72                 dec     ebp             ; jumptable 0040AB8F case 0
.text:0040AF73                 jmp     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040AF78 ; ---------------------------------------------------------------------------
.text:0040AF78
.text:0040AF78 loc_40AF78:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040AF78                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040AF78                 mov     edx, [esp+59Ch+var_514] ; jumptable 0040AB8F cases 65,66,97
.text:0040AF7F                 test    edx, edx
.text:0040AF81                 jnz     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040AF87                 test    ebx, ebx
.text:0040AF89                 jz      short loc_40AF9B ; jumptable 0040AB8F case 114
.text:0040AF8B                 mov     [esp+59Ch+var_528], 1
.text:0040AF93                 mov     [esp+59Ch+var_524], 0
.text:0040AF9B
.text:0040AF9B loc_40AF9B:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040AF9B                                         ; sub_40A870+719↑j ...
.text:0040AF9B                 mov     [esp+59Ch+Format], 25h ; '%' ; jumptable 0040AB8F case 114
.text:0040AFA3                 mov     esi, [esp+59Ch+var_514]
.text:0040AFAA                 lea     eax, [esp+59Ch+var_4F3]
.text:0040AFB1                 test    esi, esi
.text:0040AFB3                 jz      short loc_40AFCB
.text:0040AFB5                 movzx   eax, byte ptr [esp+59Ch+var_514]
.text:0040AFBD                 mov     [esp+59Ch+var_4F3], al
.text:0040AFC4                 lea     eax, [esp+59Ch+var_4F2]
.text:0040AFCB
.text:0040AFCB loc_40AFCB:                             ; CODE XREF: sub_40A870+743↑j
.text:0040AFCB                 movzx   ebx, byte ptr [esp+59Ch+var_52C]
.text:0040AFD0                 lea     edx, [esp+59Ch+Format]
.text:0040AFD7                 mov     byte ptr [eax+1], 0
.text:0040AFDB                 mov     [eax], bl
.text:0040AFDD                 mov     ecx, [esp+59Ch+arg_C]
.text:0040AFE4                 lea     ebx, [esp+59Ch+Buffer]
.text:0040AFEB                 mov     [esp+59Ch+State], edx ; Format
.text:0040AFEF                 mov     [esp+59Ch+SizeInBytes], 400h ; SizeInBytes
.text:0040AFF7                 mov     [esp+59Ch+Tm], ecx ; Tm
.text:0040AFFB                 mov     [esp+59Ch+Str], ebx ; Buffer
.text:0040AFFE                 call    strftime
.text:0040B003                 test    eax, eax
.text:0040B005                 mov     esi, eax
.text:0040B007                 jnz     short loc_40B017
.text:0040B009                 cmp     [esp+59Ch+Buffer], 0
.text:0040B011                 jnz     loc_40B1BD
.text:0040B017
.text:0040B017 loc_40B017:                             ; CODE XREF: sub_40A870+797↑j
.text:0040B017                 mov     ebx, edi
.text:0040B019                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B020                 sub     ebx, esi
.text:0040B022                 mov     edx, ebx
.text:0040B024                 mov     eax, [esp+59Ch+var_504]
.text:0040B02B                 shr     edx, 1Fh
.text:0040B02E                 dec     edx
.text:0040B02F                 and     edx, ebx
.text:0040B031                 sub     ecx, eax
.text:0040B033                 lea     edi, [edx+esi]
.text:0040B036                 xor     edx, edx
.text:0040B038                 cmp     edi, ecx
.text:0040B03A                 jnb     loc_40A9C7
.text:0040B040                 mov     ecx, [esp+59Ch+var_508]
.text:0040B047                 test    ecx, ecx
.text:0040B049                 jz      loc_40B0DD
.text:0040B04F                 test    ebx, ebx
.text:0040B051                 jle     short loc_40B083
.text:0040B053                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040B05B                 jz      loc_40B1A2
.text:0040B061                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B065                 mov     edx, [esp+59Ch+var_508]
.text:0040B06C                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040B074                 mov     [esp+59Ch+Str], edx ; void *
.text:0040B077
.text:0040B077 loc_40B077:                             ; CODE XREF: sub_40A870+948↓j
.text:0040B077                 call    memset
.text:0040B07C                 add     [esp+59Ch+var_508], ebx
.text:0040B083
.text:0040B083 loc_40B083:                             ; CODE XREF: sub_40A870+7E1↑j
.text:0040B083                 mov     ebx, [esp+59Ch+var_524]
.text:0040B087                 test    ebx, ebx
.text:0040B089                 jz      short loc_40B108
.text:0040B08B                 test    esi, esi
.text:0040B08D                 lea     ebx, [esi-1]
.text:0040B090                 jz      short loc_40B0D6
.text:0040B092
.text:0040B092 loc_40B092:                             ; CODE XREF: sub_40A870+864↓j
.text:0040B092                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:0040B09A                 mov     eax, ds:__mb_cur_max
.text:0040B09F                 movzx   ecx, dl
.text:0040B0A2                 cmp     dword ptr [eax], 1
.text:0040B0A5                 jz      short loc_40B0F8
.text:0040B0A7                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:0040B0AF                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B0B2                 call    _isctype
.text:0040B0B7                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:0040B0BF
.text:0040B0BF loc_40B0BF:                             ; CODE XREF: sub_40A870+896↓j
.text:0040B0BF                 test    eax, eax
.text:0040B0C1                 mov     cl, dl
.text:0040B0C3                 jnz     short loc_40B0E9
.text:0040B0C5
.text:0040B0C5 loc_40B0C5:                             ; CODE XREF: sub_40A870+886↓j
.text:0040B0C5                 mov     eax, [esp+59Ch+var_508]
.text:0040B0CC                 mov     edx, ebx
.text:0040B0CE                 mov     [ebx+eax], cl
.text:0040B0D1                 dec     ebx
.text:0040B0D2                 test    edx, edx
.text:0040B0D4                 jnz     short loc_40B092
.text:0040B0D6
.text:0040B0D6 loc_40B0D6:                             ; CODE XREF: sub_40A870+820↑j
.text:0040B0D6                                         ; sub_40A870+8A5↓j ...
.text:0040B0D6                 add     [esp+59Ch+var_508], esi
.text:0040B0DD
.text:0040B0DD loc_40B0DD:                             ; CODE XREF: sub_40A870+7D9↑j
.text:0040B0DD                                         ; sub_40A870+B10↓j ...
.text:0040B0DD                 add     [esp+59Ch+var_504], edi
.text:0040B0E4                 jmp     loc_40A98A
.text:0040B0E9 ; ---------------------------------------------------------------------------
.text:0040B0E9
.text:0040B0E9 loc_40B0E9:                             ; CODE XREF: sub_40A870+853↑j
.text:0040B0E9                 movzx   ecx, dl
.text:0040B0EC                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B0EF                 call    tolower
.text:0040B0F4                 mov     cl, al
.text:0040B0F6                 jmp     short loc_40B0C5
.text:0040B0F8 ; ---------------------------------------------------------------------------
.text:0040B0F8
.text:0040B0F8 loc_40B0F8:                             ; CODE XREF: sub_40A870+835↑j
.text:0040B0F8                 mov     eax, ds:_pctype
.text:0040B0FD                 mov     eax, [eax]
.text:0040B0FF                 movzx   eax, word ptr [eax+ecx*2]
.text:0040B103                 and     eax, 1
.text:0040B106                 jmp     short loc_40B0BF
.text:0040B108 ; ---------------------------------------------------------------------------
.text:0040B108
.text:0040B108 loc_40B108:                             ; CODE XREF: sub_40A870+819↑j
.text:0040B108                 mov     ebx, [esp+59Ch+var_528]
.text:0040B10C                 test    ebx, ebx
.text:0040B10E                 jz      short loc_40B17F
.text:0040B110                 test    esi, esi
.text:0040B112                 lea     ebx, [esi-1]
.text:0040B115                 jz      short loc_40B0D6
.text:0040B117
.text:0040B117 loc_40B117:                             ; CODE XREF: sub_40A870+8E9↓j
.text:0040B117                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:0040B11F                 mov     eax, ds:__mb_cur_max
.text:0040B124                 movzx   ecx, dl
.text:0040B127                 cmp     dword ptr [eax], 1
.text:0040B12A                 jz      short loc_40B16F
.text:0040B12C                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040B134                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B137                 call    _isctype
.text:0040B13C                 movzx   edx, [esp+ebx+59Ch+Buffer]
.text:0040B144
.text:0040B144 loc_40B144:                             ; CODE XREF: sub_40A870+90D↓j
.text:0040B144                 test    eax, eax
.text:0040B146                 mov     cl, dl
.text:0040B148                 jnz     short loc_40B160
.text:0040B14A
.text:0040B14A loc_40B14A:                             ; CODE XREF: sub_40A870+8FD↓j
.text:0040B14A                 mov     edx, [esp+59Ch+var_508]
.text:0040B151                 mov     [ebx+edx], cl
.text:0040B154                 mov     edx, ebx
.text:0040B156                 dec     ebx
.text:0040B157                 test    edx, edx
.text:0040B159                 jnz     short loc_40B117
.text:0040B15B                 jmp     loc_40B0D6
.text:0040B160 ; ---------------------------------------------------------------------------
.text:0040B160
.text:0040B160 loc_40B160:                             ; CODE XREF: sub_40A870+8D8↑j
.text:0040B160                 movzx   ecx, dl
.text:0040B163                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B166                 call    toupper
.text:0040B16B                 mov     cl, al
.text:0040B16D                 jmp     short loc_40B14A
.text:0040B16F ; ---------------------------------------------------------------------------
.text:0040B16F
.text:0040B16F loc_40B16F:                             ; CODE XREF: sub_40A870+8BA↑j
.text:0040B16F                 mov     eax, ds:_pctype
.text:0040B174                 mov     eax, [eax]
.text:0040B176                 movzx   eax, word ptr [eax+ecx*2]
.text:0040B17A                 and     eax, 2
.text:0040B17D                 jmp     short loc_40B144
.text:0040B17F ; ---------------------------------------------------------------------------
.text:0040B17F
.text:0040B17F loc_40B17F:                             ; CODE XREF: sub_40A870+89E↑j
.text:0040B17F                 mov     [esp+59Ch+State], esi ; Size
.text:0040B183                 lea     edx, [esp+59Ch+Buffer]
.text:0040B18A
.text:0040B18A loc_40B18A:                             ; CODE XREF: sub_40A870+12E2↓j
.text:0040B18A                 mov     [esp+59Ch+SizeInBytes], edx ; Src
.text:0040B18E                 mov     ebx, [esp+59Ch+var_508]
.text:0040B195                 mov     [esp+59Ch+Str], ebx ; void *
.text:0040B198                 call    memcpy
.text:0040B19D                 jmp     loc_40B0D6
.text:0040B1A2 ; ---------------------------------------------------------------------------
.text:0040B1A2
.text:0040B1A2 loc_40B1A2:                             ; CODE XREF: sub_40A870+7EB↑j
.text:0040B1A2                 mov     [esp+59Ch+State], ebx
.text:0040B1A6                 mov     eax, [esp+59Ch+var_508]
.text:0040B1AD                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040B1B5                 mov     [esp+59Ch+Str], eax
.text:0040B1B8                 jmp     loc_40B077
.text:0040B1BD ; ---------------------------------------------------------------------------
.text:0040B1BD
.text:0040B1BD loc_40B1BD:                             ; CODE XREF: sub_40A870+7A1↑j
.text:0040B1BD                 xor     edx, edx
.text:0040B1BF                 jmp     loc_40A9C7
.text:0040B1C4 ; ---------------------------------------------------------------------------
.text:0040B1C4
.text:0040B1C4 loc_40B1C4:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B1C4                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B1C4                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 0040AB8F case 67
.text:0040B1CC                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B1D2                 cmp     [esp+59Ch+var_514], 45h ; 'E'
.text:0040B1DA                 jz      loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B1E0                 mov     [esp+59Ch+var_518], edi
.text:0040B1E7                 mov     esi, [esp+59Ch+arg_C]
.text:0040B1EE                 mov     ecx, [esi+14h]
.text:0040B1F1                 add     ecx, 76Ch
.text:0040B1F7                 cmp     edi, 1
.text:0040B1FA                 jl      loc_40B4F2
.text:0040B200
.text:0040B200 loc_40B200:                             ; CODE XREF: sub_40A870+C8E↓j
.text:0040B200                 mov     ebx, 51EB851Fh
.text:0040B205                 mov     eax, ecx
.text:0040B207                 mov     esi, ecx
.text:0040B209                 imul    ebx
.text:0040B20B                 sar     esi, 1Fh
.text:0040B20E                 sar     edx, 5
.text:0040B211                 sub     edx, esi
.text:0040B213                 lea     ebx, [edx+edx*4]
.text:0040B216                 lea     esi, [ebx+ebx*4]
.text:0040B219                 shl     esi, 2
.text:0040B21C                 sub     ecx, esi
.text:0040B21E                 shr     ecx, 1Fh
.text:0040B221                 sub     edx, ecx
.text:0040B223                 mov     ecx, edx
.text:0040B225
.text:0040B225 loc_40B225:                             ; CODE XREF: sub_40A870+E7F↓j
.text:0040B225                                         ; sub_40A870+EB3↓j ...
.text:0040B225                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:0040B22D                 jz      loc_40B4E5
.text:0040B233
.text:0040B233 loc_40B233:                             ; CODE XREF: sub_40A870+C7D↓j
.text:0040B233                 mov     eax, ecx
.text:0040B235                 mov     ebx, ecx
.text:0040B237                 shr     eax, 1Fh
.text:0040B23A                 mov     [esp+59Ch+var_51C], eax
.text:0040B241                 lea     esi, [esp+59Ch+var_20]
.text:0040B248                 jz      short loc_40B24C
.text:0040B24A                 neg     ebx
.text:0040B24C
.text:0040B24C loc_40B24C:                             ; CODE XREF: sub_40A870+9D8↑j
.text:0040B24C                 mov     ecx, 0CCCCCCCDh
.text:0040B251
.text:0040B251 loc_40B251:                             ; CODE XREF: sub_40A870+9FA↓j
.text:0040B251                 mov     eax, ebx
.text:0040B253                 dec     esi
.text:0040B254                 mul     ecx
.text:0040B256                 shr     edx, 3
.text:0040B259                 lea     eax, [edx+edx*4]
.text:0040B25C                 add     eax, eax
.text:0040B25E                 sub     ebx, eax
.text:0040B260                 mov     al, bl
.text:0040B262                 add     al, 30h ; '0'
.text:0040B264                 mov     ebx, edx
.text:0040B266                 test    edx, edx
.text:0040B268                 mov     [esi], al
.text:0040B26A                 jnz     short loc_40B251
.text:0040B26C
.text:0040B26C loc_40B26C:                             ; CODE XREF: sub_40A870+18D6↓j
.text:0040B26C                 mov     ebx, [esp+59Ch+var_51C]
.text:0040B273                 test    ebx, ebx
.text:0040B275                 jz      short loc_40B27B
.text:0040B277                 dec     esi
.text:0040B278                 mov     byte ptr [esi], 2Dh ; '-'
.text:0040B27B
.text:0040B27B loc_40B27B:                             ; CODE XREF: sub_40A870+A05↑j
.text:0040B27B                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:0040B283                 jz      loc_40B4D5
.text:0040B289                 mov     edx, [esp+59Ch+var_518]
.text:0040B290                 lea     ecx, [esp+59Ch+var_2C]
.text:0040B297                 mov     eax, esi
.text:0040B299                 mov     [esp+59Ch+var_564], ecx
.text:0040B29D                 sub     eax, ecx
.text:0040B29F                 lea     ebx, [eax+edx-0Ch]
.text:0040B2A3                 test    ebx, ebx
.text:0040B2A5                 jle     loc_40B33E
.text:0040B2AB                 cmp     [esp+59Ch+var_510], 5Fh ; '_'
.text:0040B2B3                 jz      loc_40B472
.text:0040B2B9                 mov     edi, [esp+59Ch+arg_4]
.text:0040B2C0                 xor     edx, edx
.text:0040B2C2                 mov     eax, [esp+59Ch+var_504]
.text:0040B2C9                 sub     edi, eax
.text:0040B2CB                 cmp     [esp+59Ch+var_518], edi
.text:0040B2D2                 jnb     loc_40A9C7
.text:0040B2D8                 mov     ecx, [esp+59Ch+var_51C]
.text:0040B2DF                 test    ecx, ecx
.text:0040B2E1                 jz      short loc_40B308
.text:0040B2E3                 mov     edx, [esp+59Ch+var_508]
.text:0040B2EA                 inc     esi
.text:0040B2EB                 test    edx, edx
.text:0040B2ED                 jz      short loc_40B301
.text:0040B2EF                 mov     edi, [esp+59Ch+var_508]
.text:0040B2F6                 mov     byte ptr [edi], 2Dh ; '-'
.text:0040B2F9                 inc     edi
.text:0040B2FA                 mov     [esp+59Ch+var_508], edi
.text:0040B301
.text:0040B301 loc_40B301:                             ; CODE XREF: sub_40A870+A7D↑j
.text:0040B301                 inc     [esp+59Ch+var_504]
.text:0040B308
.text:0040B308 loc_40B308:                             ; CODE XREF: sub_40A870+A71↑j
.text:0040B308                 mov     eax, [esp+59Ch+var_508]
.text:0040B30F                 test    eax, eax
.text:0040B311                 jz      short loc_40B335
.text:0040B313                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B317                 mov     edx, [esp+59Ch+var_508]
.text:0040B31E                 mov     [esp+59Ch+SizeInBytes], 30h ; '0' ; Val
.text:0040B326                 mov     [esp+59Ch+Str], edx ; void *
.text:0040B329                 call    memset
.text:0040B32E                 add     [esp+59Ch+var_508], ebx
.text:0040B335
.text:0040B335 loc_40B335:                             ; CODE XREF: sub_40A870+AA1↑j
.text:0040B335                 add     [esp+59Ch+var_504], ebx
.text:0040B33C                 xor     edi, edi
.text:0040B33E
.text:0040B33E loc_40B33E:                             ; CODE XREF: sub_40A870+A35↑j
.text:0040B33E                                         ; sub_40A870+C60↓j ...
.text:0040B33E                 sub     [esp+59Ch+var_564], esi
.text:0040B342                 mov     ebx, edi
.text:0040B344                 xor     edx, edx
.text:0040B346                 mov     eax, [esp+59Ch+var_564]
.text:0040B34A                 add     eax, 0Ch
.text:0040B34D                 sub     ebx, eax
.text:0040B34F                 mov     [esp+59Ch+Size], eax
.text:0040B353                 mov     ecx, ebx
.text:0040B355                 mov     edi, eax
.text:0040B357                 shr     ecx, 1Fh
.text:0040B35A                 mov     eax, [esp+59Ch+var_504]
.text:0040B361                 dec     ecx
.text:0040B362                 and     ecx, ebx
.text:0040B364                 add     edi, ecx
.text:0040B366                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B36D                 sub     ecx, eax
.text:0040B36F                 cmp     edi, ecx
.text:0040B371                 jnb     loc_40A9C7
.text:0040B377                 mov     edx, [esp+59Ch+var_508]
.text:0040B37E                 test    edx, edx
.text:0040B380                 jz      loc_40B0DD
.text:0040B386                 test    ebx, ebx
.text:0040B388                 jle     short loc_40B3BA
.text:0040B38A                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040B392                 jz      loc_40B457
.text:0040B398                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B39C                 mov     ecx, [esp+59Ch+var_508]
.text:0040B3A3                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040B3AB                 mov     [esp+59Ch+Str], ecx ; void *
.text:0040B3AE
.text:0040B3AE loc_40B3AE:                             ; CODE XREF: sub_40A870+BFD↓j
.text:0040B3AE                 call    memset
.text:0040B3B3                 add     [esp+59Ch+var_508], ebx
.text:0040B3BA
.text:0040B3BA loc_40B3BA:                             ; CODE XREF: sub_40A870+B18↑j
.text:0040B3BA                 mov     edx, [esp+59Ch+var_528]
.text:0040B3BE                 test    edx, edx
.text:0040B3C0                 jz      short loc_40B43A
.text:0040B3C2                 mov     ebx, [esp+59Ch+Size]
.text:0040B3C6                 mov     eax, [esp+59Ch+Size]
.text:0040B3CA                 dec     ebx
.text:0040B3CB                 test    eax, eax
.text:0040B3CD                 jz      short loc_40B40B
.text:0040B3CF
.text:0040B3CF loc_40B3CF:                             ; CODE XREF: sub_40A870+B99↓j
.text:0040B3CF                 movzx   edx, byte ptr [ebx+esi]
.text:0040B3D3                 mov     eax, ds:__mb_cur_max
.text:0040B3D8                 movzx   ecx, dl
.text:0040B3DB                 cmp     dword ptr [eax], 1
.text:0040B3DE                 jz      short loc_40B42A
.text:0040B3E0                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040B3E8                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B3EB                 call    _isctype
.text:0040B3F0                 movzx   edx, byte ptr [ebx+esi]
.text:0040B3F4
.text:0040B3F4 loc_40B3F4:                             ; CODE XREF: sub_40A870+BC8↓j
.text:0040B3F4                 test    eax, eax
.text:0040B3F6                 mov     cl, dl
.text:0040B3F8                 jnz     short loc_40B41B
.text:0040B3FA
.text:0040B3FA loc_40B3FA:                             ; CODE XREF: sub_40A870+BB8↓j
.text:0040B3FA                 mov     eax, [esp+59Ch+var_508]
.text:0040B401                 mov     edx, ebx
.text:0040B403                 mov     [ebx+eax], cl
.text:0040B406                 dec     ebx
.text:0040B407                 test    edx, edx
.text:0040B409                 jnz     short loc_40B3CF
.text:0040B40B
.text:0040B40B loc_40B40B:                             ; CODE XREF: sub_40A870+B5D↑j
.text:0040B40B                                         ; sub_40A870+BE5↓j
.text:0040B40B                 mov     ecx, [esp+59Ch+Size]
.text:0040B40F                 add     [esp+59Ch+var_508], ecx
.text:0040B416                 jmp     loc_40B0DD
.text:0040B41B ; ---------------------------------------------------------------------------
.text:0040B41B
.text:0040B41B loc_40B41B:                             ; CODE XREF: sub_40A870+B88↑j
.text:0040B41B                 movzx   ecx, dl
.text:0040B41E                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B421                 call    toupper
.text:0040B426                 mov     cl, al
.text:0040B428                 jmp     short loc_40B3FA
.text:0040B42A ; ---------------------------------------------------------------------------
.text:0040B42A
.text:0040B42A loc_40B42A:                             ; CODE XREF: sub_40A870+B6E↑j
.text:0040B42A                 mov     eax, ds:_pctype
.text:0040B42F                 mov     eax, [eax]
.text:0040B431                 movzx   eax, word ptr [eax+ecx*2]
.text:0040B435                 and     eax, 2
.text:0040B438                 jmp     short loc_40B3F4
.text:0040B43A ; ---------------------------------------------------------------------------
.text:0040B43A
.text:0040B43A loc_40B43A:                             ; CODE XREF: sub_40A870+B50↑j
.text:0040B43A                 mov     [esp+59Ch+SizeInBytes], esi ; Src
.text:0040B43E                 mov     ebx, [esp+59Ch+Size]
.text:0040B442                 mov     esi, [esp+59Ch+var_508]
.text:0040B449                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B44D                 mov     [esp+59Ch+Str], esi ; void *
.text:0040B450                 call    memcpy
.text:0040B455                 jmp     short loc_40B40B
.text:0040B457 ; ---------------------------------------------------------------------------
.text:0040B457
.text:0040B457 loc_40B457:                             ; CODE XREF: sub_40A870+B22↑j
.text:0040B457                 mov     [esp+59Ch+State], ebx
.text:0040B45B                 mov     eax, [esp+59Ch+var_508]
.text:0040B462                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040B46A                 mov     [esp+59Ch+Str], eax
.text:0040B46D                 jmp     loc_40B3AE
.text:0040B472 ; ---------------------------------------------------------------------------
.text:0040B472
.text:0040B472 loc_40B472:                             ; CODE XREF: sub_40A870+A43↑j
.text:0040B472                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B479                 xor     edx, edx
.text:0040B47B                 mov     eax, [esp+59Ch+var_504]
.text:0040B482                 sub     ecx, eax
.text:0040B484                 cmp     ebx, ecx
.text:0040B486                 jnb     loc_40A9C7
.text:0040B48C                 mov     edx, [esp+59Ch+var_508]
.text:0040B493                 test    edx, edx
.text:0040B495                 jz      short loc_40B4B9
.text:0040B497                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B49B                 mov     ecx, [esp+59Ch+var_508]
.text:0040B4A2                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040B4AA                 mov     [esp+59Ch+Str], ecx ; void *
.text:0040B4AD                 call    memset
.text:0040B4B2                 add     [esp+59Ch+var_508], ebx
.text:0040B4B9
.text:0040B4B9 loc_40B4B9:                             ; CODE XREF: sub_40A870+C25↑j
.text:0040B4B9                 add     [esp+59Ch+var_504], ebx
.text:0040B4C0                 mov     ecx, edi
.text:0040B4C2                 sub     ecx, ebx
.text:0040B4C4                 xor     edx, edx
.text:0040B4C6                 cmp     edi, ebx
.text:0040B4C8                 setle   dl
.text:0040B4CB                 lea     edi, [edx-1]
.text:0040B4CE                 and     edi, ecx
.text:0040B4D0                 jmp     loc_40B33E
.text:0040B4D5 ; ---------------------------------------------------------------------------
.text:0040B4D5
.text:0040B4D5 loc_40B4D5:                             ; CODE XREF: sub_40A870+A13↑j
.text:0040B4D5                 lea     ebx, [esp+59Ch+var_2C]
.text:0040B4DC                 mov     [esp+59Ch+var_564], ebx
.text:0040B4E0                 jmp     loc_40B33E
.text:0040B4E5 ; ---------------------------------------------------------------------------
.text:0040B4E5
.text:0040B4E5 loc_40B4E5:                             ; CODE XREF: sub_40A870+9BD↑j
.text:0040B4E5                 test    ecx, ecx
.text:0040B4E7                 jns     loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B4ED                 jmp     loc_40B233
.text:0040B4F2 ; ---------------------------------------------------------------------------
.text:0040B4F2
.text:0040B4F2 loc_40B4F2:                             ; CODE XREF: sub_40A870+98A↑j
.text:0040B4F2                 mov     ebx, 1
.text:0040B4F7                 mov     [esp+59Ch+var_518], ebx
.text:0040B4FE                 jmp     loc_40B200
.text:0040B503 ; ---------------------------------------------------------------------------
.text:0040B503
.text:0040B503 loc_40B503:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B503                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B503                 mov     [esp+59Ch+var_520], (offset loc_40A843+1) ; jumptable 0040AB8F case 68
.text:0040B50B
.text:0040B50B loc_40B50B:                             ; CODE XREF: sub_40A870+E56↓j
.text:0040B50B                 mov     eax, [esp+59Ch+var_514]
.text:0040B512                 test    eax, eax
.text:0040B514                 jnz     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B51A
.text:0040B51A loc_40B51A:                             ; CODE XREF: sub_40A870+F92↓j
.text:0040B51A                                         ; sub_40A870+FD8↓j
.text:0040B51A                 mov     [esp+59Ch+SizeInBytes], 0FFFFFFFFh ; int
.text:0040B522                 mov     ebx, [esp+59Ch+arg_14]
.text:0040B529                 mov     ecx, [esp+59Ch+arg_C]
.text:0040B530                 mov     [esp+59Ch+Str], 0 ; int
.text:0040B537                 mov     eax, [esp+59Ch+arg_10]
.text:0040B53E                 mov     esi, [esp+59Ch+var_508]
.text:0040B545                 mov     [esp+59Ch+var_588], ebx ; int
.text:0040B549                 mov     ebx, [esp+59Ch+var_520]
.text:0040B54D                 mov     [esp+59Ch+Tm], ecx ; struct tm *
.text:0040B551                 mov     [esp+59Ch+var_58C], eax ; int
.text:0040B555                 mov     [esp+59Ch+State], ebx ; char *
.text:0040B559                 mov     ebx, edi
.text:0040B55B                 call    sub_40A870
.text:0040B560                 mov     [esp+59Ch+var_530], eax
.text:0040B564                 sub     ebx, eax
.text:0040B566                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B56D                 mov     edx, ebx
.text:0040B56F                 mov     edi, [esp+59Ch+var_530]
.text:0040B573                 shr     edx, 1Fh
.text:0040B576                 mov     eax, [esp+59Ch+var_504]
.text:0040B57D                 dec     edx
.text:0040B57E                 and     edx, ebx
.text:0040B580                 add     edi, edx
.text:0040B582                 sub     ecx, eax
.text:0040B584                 xor     edx, edx
.text:0040B586                 cmp     edi, ecx
.text:0040B588                 jnb     loc_40A9C7
.text:0040B58E                 mov     edx, [esp+59Ch+var_508]
.text:0040B595                 test    edx, edx
.text:0040B597                 jz      loc_40B628
.text:0040B59D                 test    ebx, ebx
.text:0040B59F                 jle     short loc_40B5D1
.text:0040B5A1                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040B5A9                 jz      loc_40B6A3
.text:0040B5AF                 mov     [esp+59Ch+State], ebx ; Size
.text:0040B5B3                 mov     ecx, [esp+59Ch+var_508]
.text:0040B5BA                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040B5C2                 mov     [esp+59Ch+Str], ecx ; void *
.text:0040B5C5
.text:0040B5C5 loc_40B5C5:                             ; CODE XREF: sub_40A870+E49↓j
.text:0040B5C5                 call    memset
.text:0040B5CA                 add     [esp+59Ch+var_508], ebx
.text:0040B5D1
.text:0040B5D1 loc_40B5D1:                             ; CODE XREF: sub_40A870+D2F↑j
.text:0040B5D1                 mov     ecx, [esp+59Ch+arg_14]
.text:0040B5D8                 mov     eax, [esp+59Ch+arg_10]
.text:0040B5DF                 mov     edx, [esp+59Ch+arg_C]
.text:0040B5E6                 mov     [esp+59Ch+var_588], ecx ; int
.text:0040B5EA                 mov     ebx, [esp+59Ch+var_520]
.text:0040B5EE                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B5F5                 mov     [esp+59Ch+var_58C], eax ; int
.text:0040B5F9                 mov     eax, [esp+59Ch+var_504]
.text:0040B600                 mov     [esp+59Ch+Tm], edx ; struct tm *
.text:0040B604                 mov     edx, [esp+59Ch+var_508]
.text:0040B60B                 sub     ecx, eax
.text:0040B60D                 mov     [esp+59Ch+State], ebx ; char *
.text:0040B611                 mov     [esp+59Ch+SizeInBytes], ecx ; int
.text:0040B615                 mov     [esp+59Ch+Str], edx ; int
.text:0040B618                 call    sub_40A870
.text:0040B61D                 mov     ebx, [esp+59Ch+var_530]
.text:0040B621                 add     [esp+59Ch+var_508], ebx
.text:0040B628
.text:0040B628 loc_40B628:                             ; CODE XREF: sub_40A870+D27↑j
.text:0040B628                 add     [esp+59Ch+var_504], edi
.text:0040B62F                 mov     edi, [esp+59Ch+var_528]
.text:0040B633                 test    edi, edi
.text:0040B635                 jz      loc_40A98A
.text:0040B63B                 cmp     esi, [esp+59Ch+var_508]
.text:0040B642                 jnb     loc_40A98A
.text:0040B648
.text:0040B648 loc_40B648:                             ; CODE XREF: sub_40A870+E0C↓j
.text:0040B648                 movzx   edx, byte ptr [esi]
.text:0040B64B                 mov     ebx, ds:__mb_cur_max
.text:0040B651                 movzx   ecx, dl
.text:0040B654                 cmp     dword ptr [ebx], 1
.text:0040B657                 jz      short loc_40B692
.text:0040B659                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040B661                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B664                 call    _isctype
.text:0040B669                 movzx   edx, byte ptr [esi]
.text:0040B66C
.text:0040B66C loc_40B66C:                             ; CODE XREF: sub_40A870+E31↓j
.text:0040B66C                 test    eax, eax
.text:0040B66E                 mov     cl, dl
.text:0040B670                 jnz     short loc_40B683
.text:0040B672
.text:0040B672 loc_40B672:                             ; CODE XREF: sub_40A870+E20↓j
.text:0040B672                 mov     [esi], cl
.text:0040B674                 inc     esi
.text:0040B675                 cmp     esi, [esp+59Ch+var_508]
.text:0040B67C                 jb      short loc_40B648
.text:0040B67E                 jmp     loc_40A98A
.text:0040B683 ; ---------------------------------------------------------------------------
.text:0040B683
.text:0040B683 loc_40B683:                             ; CODE XREF: sub_40A870+E00↑j
.text:0040B683                 movzx   ecx, dl
.text:0040B686                 mov     [esp+59Ch+Str], ecx ; C
.text:0040B689                 call    toupper
.text:0040B68E                 mov     cl, al
.text:0040B690                 jmp     short loc_40B672
.text:0040B692 ; ---------------------------------------------------------------------------
.text:0040B692
.text:0040B692 loc_40B692:                             ; CODE XREF: sub_40A870+DE7↑j
.text:0040B692                 mov     ebx, ds:_pctype
.text:0040B698                 mov     edi, [ebx]
.text:0040B69A                 movzx   eax, word ptr [edi+ecx*2]
.text:0040B69E                 and     eax, 2
.text:0040B6A1                 jmp     short loc_40B66C
.text:0040B6A3 ; ---------------------------------------------------------------------------
.text:0040B6A3
.text:0040B6A3 loc_40B6A3:                             ; CODE XREF: sub_40A870+D39↑j
.text:0040B6A3                 mov     [esp+59Ch+State], ebx
.text:0040B6A7                 mov     eax, [esp+59Ch+var_508]
.text:0040B6AE                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040B6B6                 mov     [esp+59Ch+Str], eax
.text:0040B6B9                 jmp     loc_40B5C5
.text:0040B6BE ; ---------------------------------------------------------------------------
.text:0040B6BE
.text:0040B6BE loc_40B6BE:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B6BE                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B6BE                 mov     [esp+59Ch+var_520], (offset loc_40A84A+3) ; jumptable 0040AB8F case 70
.text:0040B6C6                 jmp     loc_40B50B
.text:0040B6CB ; ---------------------------------------------------------------------------
.text:0040B6CB
.text:0040B6CB loc_40B6CB:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B6CB                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B6CB                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 72
.text:0040B6D3                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B6D9                 mov     [esp+59Ch+var_518], edi
.text:0040B6E0                 cmp     edi, 2
.text:0040B6E3                 jl      short loc_40B6F4
.text:0040B6E5
.text:0040B6E5 loc_40B6E5:                             ; CODE XREF: sub_40A870+E90↓j
.text:0040B6E5                 mov     esi, [esp+59Ch+arg_C]
.text:0040B6EC                 mov     ecx, [esi+8]
.text:0040B6EF                 jmp     loc_40B225
.text:0040B6F4 ; ---------------------------------------------------------------------------
.text:0040B6F4
.text:0040B6F4 loc_40B6F4:                             ; CODE XREF: sub_40A870+E73↑j
.text:0040B6F4                 mov     edx, 2
.text:0040B6F9                 mov     [esp+59Ch+var_518], edx
.text:0040B700                 jmp     short loc_40B6E5
.text:0040B702 ; ---------------------------------------------------------------------------
.text:0040B702
.text:0040B702 loc_40B702:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B702                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B702                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 73
.text:0040B70A                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B710                 mov     [esp+59Ch+var_518], edi
.text:0040B717                 cmp     edi, 2
.text:0040B71A                 jl      short loc_40B728
.text:0040B71C
.text:0040B71C loc_40B71C:                             ; CODE XREF: sub_40A870+EC4↓j
.text:0040B71C                 mov     ecx, [esp+59Ch+var_4FC]
.text:0040B723                 jmp     loc_40B225
.text:0040B728 ; ---------------------------------------------------------------------------
.text:0040B728
.text:0040B728 loc_40B728:                             ; CODE XREF: sub_40A870+EAA↑j
.text:0040B728                 mov     ebx, 2
.text:0040B72D                 mov     [esp+59Ch+var_518], ebx
.text:0040B734                 jmp     short loc_40B71C
.text:0040B736 ; ---------------------------------------------------------------------------
.text:0040B736
.text:0040B736 loc_40B736:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B736                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B736                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 77
.text:0040B73E                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B744                 mov     [esp+59Ch+var_518], edi
.text:0040B74B                 cmp     edi, 2
.text:0040B74E                 jl      short loc_40B75F
.text:0040B750
.text:0040B750 loc_40B750:                             ; CODE XREF: sub_40A870+EFB↓j
.text:0040B750                 mov     eax, [esp+59Ch+arg_C]
.text:0040B757                 mov     ecx, [eax+4]
.text:0040B75A                 jmp     loc_40B225
.text:0040B75F ; ---------------------------------------------------------------------------
.text:0040B75F
.text:0040B75F loc_40B75F:                             ; CODE XREF: sub_40A870+EDE↑j
.text:0040B75F                 mov     ecx, 2
.text:0040B764                 mov     [esp+59Ch+var_518], ecx
.text:0040B76B                 jmp     short loc_40B750
.text:0040B76B ; ---------------------------------------------------------------------------
.text:0040B76D                 align 10h
.text:0040B770
.text:0040B770 loc_40B770:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B770                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B770                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 78
.text:0040B778                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B77E                 cmp     edi, 0FFFFFFFFh
.text:0040B781                 mov     ecx, [esp+59Ch+arg_14]
.text:0040B788                 jz      short loc_40B7AC
.text:0040B78A                 cmp     edi, 8
.text:0040B78D                 mov     ebx, edi
.text:0040B78F                 jg      short loc_40B7AC
.text:0040B791                 mov     esi, 66666667h
.text:0040B796
.text:0040B796 loc_40B796:                             ; CODE XREF: sub_40A870+F3A↓j
.text:0040B796                 mov     eax, ecx
.text:0040B798                 inc     ebx
.text:0040B799                 imul    esi
.text:0040B79B                 mov     eax, ecx
.text:0040B79D                 sar     eax, 1Fh
.text:0040B7A0                 sar     edx, 2
.text:0040B7A3                 mov     ecx, edx
.text:0040B7A5                 sub     ecx, eax
.text:0040B7A7                 cmp     ebx, 8
.text:0040B7AA                 jle     short loc_40B796
.text:0040B7AC
.text:0040B7AC loc_40B7AC:                             ; CODE XREF: sub_40A870+F18↑j
.text:0040B7AC                                         ; sub_40A870+F1F↑j
.text:0040B7AC                 mov     [esp+59Ch+var_518], edi
.text:0040B7B3                 cmp     edi, 9
.text:0040B7B6                 jge     loc_40B225
.text:0040B7BC                 mov     eax, 9
.text:0040B7C1                 mov     [esp+59Ch+var_518], eax
.text:0040B7C8                 jmp     loc_40B225
.text:0040B7CD ; ---------------------------------------------------------------------------
.text:0040B7CD
.text:0040B7CD loc_40B7CD:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B7CD                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B7CD                 mov     [esp+59Ch+var_524], 1 ; jumptable 0040AB8F case 80
.text:0040B7D5                 mov     [esp+59Ch+var_52C], 70h ; 'p'
.text:0040B7DD
.text:0040B7DD loc_40B7DD:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B7DD                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B7DD                 test    ebx, ebx        ; jumptable 0040AB8F case 112
.text:0040B7DF                 jz      loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B7E5                 mov     [esp+59Ch+var_528], 0
.text:0040B7ED                 mov     [esp+59Ch+var_524], 1
.text:0040B7F5                 jmp     loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B7FA ; ---------------------------------------------------------------------------
.text:0040B7FA
.text:0040B7FA loc_40B7FA:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B7FA                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B7FA                 mov     [esp+59Ch+var_520], (offset loc_40A854+2) ; jumptable 0040AB8F case 82
.text:0040B802                 jmp     loc_40B51A
.text:0040B807 ; ---------------------------------------------------------------------------
.text:0040B807
.text:0040B807 loc_40B807:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B807                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B807                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 83
.text:0040B80F                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B815                 mov     [esp+59Ch+var_518], edi
.text:0040B81C                 cmp     edi, 2
.text:0040B81F                 jl      short loc_40B82F
.text:0040B821
.text:0040B821 loc_40B821:                             ; CODE XREF: sub_40A870+FCB↓j
.text:0040B821                 mov     esi, [esp+59Ch+arg_C]
.text:0040B828                 mov     ecx, [esi]
.text:0040B82A                 jmp     loc_40B225
.text:0040B82F ; ---------------------------------------------------------------------------
.text:0040B82F
.text:0040B82F loc_40B82F:                             ; CODE XREF: sub_40A870+FAF↑j
.text:0040B82F                 mov     ebx, 2
.text:0040B834                 mov     [esp+59Ch+var_518], ebx
.text:0040B83B                 jmp     short loc_40B821
.text:0040B83B ; ---------------------------------------------------------------------------
.text:0040B83D                 align 10h
.text:0040B840
.text:0040B840 loc_40B840:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B840                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B840                 mov     [esp+59Ch+var_520], (offset loc_40A85B+1) ; jumptable 0040AB8F case 84
.text:0040B848                 jmp     loc_40B51A
.text:0040B84D ; ---------------------------------------------------------------------------
.text:0040B84D
.text:0040B84D loc_40B84D:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B84D                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B84D                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 85
.text:0040B855                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B85B                 mov     [esp+59Ch+var_518], edi
.text:0040B862                 cmp     edi, 2
.text:0040B865                 jl      short loc_40B894
.text:0040B867
.text:0040B867 loc_40B867:                             ; CODE XREF: sub_40A870+1030↓j
.text:0040B867                 mov     eax, [esp+59Ch+arg_C]
.text:0040B86E                 mov     ebx, [eax+18h]
.text:0040B871                 mov     esi, [eax+1Ch]
.text:0040B874                 sub     esi, ebx
.text:0040B876                 lea     ebx, [esi+7]
.text:0040B879                 mov     eax, ebx
.text:0040B87B                 mov     esi, 92492493h
.text:0040B880                 imul    esi
.text:0040B882
.text:0040B882 loc_40B882:                             ; CODE XREF: sub_40A870+108C↓j
.text:0040B882                 lea     ecx, [ebx+edx]
.text:0040B885                 mov     eax, ebx
.text:0040B887                 sar     ecx, 2
.text:0040B88A                 sar     eax, 1Fh
.text:0040B88D
.text:0040B88D loc_40B88D:                             ; CODE XREF: sub_40A870+1590↓j
.text:0040B88D                 sub     ecx, eax
.text:0040B88F                 jmp     loc_40B225
.text:0040B894 ; ---------------------------------------------------------------------------
.text:0040B894
.text:0040B894 loc_40B894:                             ; CODE XREF: sub_40A870+FF5↑j
.text:0040B894                 mov     edx, 2
.text:0040B899                 mov     [esp+59Ch+var_518], edx
.text:0040B8A0                 jmp     short loc_40B867
.text:0040B8A2 ; ---------------------------------------------------------------------------
.text:0040B8A2
.text:0040B8A2 loc_40B8A2:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B8A2                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B8A2                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 87
.text:0040B8AA                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B8B0                 mov     [esp+59Ch+var_518], edi
.text:0040B8B7                 cmp     edi, 2
.text:0040B8BA                 jl      short loc_40B8FE
.text:0040B8BC
.text:0040B8BC loc_40B8BC:                             ; CODE XREF: sub_40A870+109A↓j
.text:0040B8BC                 mov     ecx, [esp+59Ch+arg_C]
.text:0040B8C3                 mov     ebx, [ecx+18h]
.text:0040B8C6                 mov     ecx, 92492493h
.text:0040B8CB                 add     ebx, 6
.text:0040B8CE                 mov     eax, ebx
.text:0040B8D0                 mov     esi, ebx
.text:0040B8D2                 imul    ecx
.text:0040B8D4                 mov     eax, [esp+59Ch+arg_C]
.text:0040B8DB                 sar     esi, 1Fh
.text:0040B8DE                 add     edx, ebx
.text:0040B8E0                 sar     edx, 2
.text:0040B8E3                 sub     edx, esi
.text:0040B8E5                 lea     esi, ds:0[edx*8]
.text:0040B8EC                 sub     esi, edx
.text:0040B8EE                 sub     ebx, esi
.text:0040B8F0                 mov     esi, [eax+1Ch]
.text:0040B8F3                 sub     esi, ebx
.text:0040B8F5                 lea     ebx, [esi+7]
.text:0040B8F8                 mov     eax, ebx
.text:0040B8FA                 imul    ecx
.text:0040B8FC                 jmp     short loc_40B882
.text:0040B8FE ; ---------------------------------------------------------------------------
.text:0040B8FE
.text:0040B8FE loc_40B8FE:                             ; CODE XREF: sub_40A870+104A↑j
.text:0040B8FE                 mov     edx, 2
.text:0040B903                 mov     [esp+59Ch+var_518], edx
.text:0040B90A                 jmp     short loc_40B8BC
.text:0040B90A ; ---------------------------------------------------------------------------
.text:0040B90C                 align 10h
.text:0040B910
.text:0040B910 loc_40B910:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B910                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B910                 cmp     [esp+59Ch+var_514], 4Fh ; 'O' ; jumptable 0040AB8F cases 88,99,120
.text:0040B918                 jnz     loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B91E                 jmp     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B923 ; ---------------------------------------------------------------------------
.text:0040B923
.text:0040B923 loc_40B923:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B923                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B923                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 89
.text:0040B92B                 jz      loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040B931                 cmp     [esp+59Ch+var_514], 4Fh ; 'O'
.text:0040B939                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040B93F                 mov     [esp+59Ch+var_518], edi
.text:0040B946                 cmp     edi, 1
.text:0040B949                 jl      short loc_40B960
.text:0040B94B
.text:0040B94B loc_40B94B:                             ; CODE XREF: sub_40A870+10FC↓j
.text:0040B94B                 mov     esi, [esp+59Ch+arg_C]
.text:0040B952                 mov     ecx, [esi+14h]
.text:0040B955                 add     ecx, 76Ch
.text:0040B95B                 jmp     loc_40B225
.text:0040B960 ; ---------------------------------------------------------------------------
.text:0040B960
.text:0040B960 loc_40B960:                             ; CODE XREF: sub_40A870+10D9↑j
.text:0040B960                 mov     edx, 1
.text:0040B965                 mov     [esp+59Ch+var_518], edx
.text:0040B96C                 jmp     short loc_40B94B
.text:0040B96C ; ---------------------------------------------------------------------------
.text:0040B96E                 align 10h
.text:0040B970
.text:0040B970 loc_40B970:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040B970                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040B970                 test    ebx, ebx        ; jumptable 0040AB8F case 90
.text:0040B972                 jz      short loc_40B984
.text:0040B974                 mov     [esp+59Ch+var_528], 0
.text:0040B97C                 mov     [esp+59Ch+var_524], 1
.text:0040B984
.text:0040B984 loc_40B984:                             ; CODE XREF: sub_40A870+1102↑j
.text:0040B984                 mov     eax, [esp+59Ch+var_500]
.text:0040B98B                 test    eax, eax
.text:0040B98D                 jz      short loc_40B99B
.text:0040B98F                 mov     esi, [esp+59Ch+var_500]
.text:0040B996                 cmp     byte ptr [esi], 0
.text:0040B999                 jnz     short loc_40B9B9
.text:0040B99B
.text:0040B99B loc_40B99B:                             ; CODE XREF: sub_40A870+111D↑j
.text:0040B99B                 mov     ebx, [esp+59Ch+arg_C]
.text:0040B9A2                 mov     edx, [ebx+20h]
.text:0040B9A5                 test    edx, edx
.text:0040B9A7                 js      short loc_40B9B9
.text:0040B9A9                 mov     esi, ds:_tzname
.text:0040B9AF                 mov     ecx, [esi+edx*4]
.text:0040B9B2                 mov     [esp+59Ch+var_500], ecx
.text:0040B9B9
.text:0040B9B9 loc_40B9B9:                             ; CODE XREF: sub_40A870+1129↑j
.text:0040B9B9                                         ; sub_40A870+1137↑j
.text:0040B9B9                 mov     edx, [esp+59Ch+var_500]
.text:0040B9C0                 test    edx, edx
.text:0040B9C2                 jz      loc_40BB72
.text:0040B9C8
.text:0040B9C8 loc_40B9C8:                             ; CODE XREF: sub_40A870+130E↓j
.text:0040B9C8                 mov     ebx, [esp+59Ch+var_500]
.text:0040B9CF                 mov     [esp+59Ch+Str], ebx ; Str
.text:0040B9D2                 mov     ebx, edi
.text:0040B9D4                 call    strlen
.text:0040B9D9                 sub     ebx, eax
.text:0040B9DB                 mov     esi, eax
.text:0040B9DD                 mov     ecx, [esp+59Ch+arg_4]
.text:0040B9E4                 mov     edx, ebx
.text:0040B9E6                 shr     edx, 1Fh
.text:0040B9E9                 dec     edx
.text:0040B9EA                 and     edx, ebx
.text:0040B9EC                 lea     edi, [edx+eax]
.text:0040B9EF                 mov     eax, [esp+59Ch+var_504]
.text:0040B9F6                 xor     edx, edx
.text:0040B9F8                 sub     ecx, eax
.text:0040B9FA                 cmp     edi, ecx
.text:0040B9FC                 jnb     loc_40A9C7
.text:0040BA02                 mov     ecx, [esp+59Ch+var_508]
.text:0040BA09                 test    ecx, ecx
.text:0040BA0B                 jz      loc_40B0DD
.text:0040BA11                 test    ebx, ebx
.text:0040BA13                 jle     short loc_40BA45
.text:0040BA15                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040BA1D                 jz      loc_40BB57
.text:0040BA23                 mov     [esp+59Ch+State], ebx ; Size
.text:0040BA27                 mov     edx, [esp+59Ch+var_508]
.text:0040BA2E                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040BA36                 mov     [esp+59Ch+Str], edx ; void *
.text:0040BA39
.text:0040BA39 loc_40BA39:                             ; CODE XREF: sub_40A870+12FD↓j
.text:0040BA39                 call    memset
.text:0040BA3E                 add     [esp+59Ch+var_508], ebx
.text:0040BA45
.text:0040BA45 loc_40BA45:                             ; CODE XREF: sub_40A870+11A3↑j
.text:0040BA45                 mov     ebx, [esp+59Ch+var_524]
.text:0040BA49                 test    ebx, ebx
.text:0040BA4B                 jz      short loc_40BAC6
.text:0040BA4D                 test    esi, esi
.text:0040BA4F                 lea     ebx, [esi-1]
.text:0040BA52                 jz      loc_40B0D6
.text:0040BA58
.text:0040BA58 loc_40BA58:                             ; CODE XREF: sub_40A870+1230↓j
.text:0040BA58                 mov     ecx, [esp+59Ch+var_500]
.text:0040BA5F                 mov     eax, ds:__mb_cur_max
.text:0040BA64                 movzx   edx, byte ptr [ebx+ecx]
.text:0040BA68                 cmp     dword ptr [eax], 1
.text:0040BA6B                 movzx   ecx, dl
.text:0040BA6E                 jz      short loc_40BAB6
.text:0040BA70                 mov     [esp+59Ch+Str], ecx ; C
.text:0040BA73                 mov     [esp+59Ch+SizeInBytes], 1 ; Type
.text:0040BA7B                 call    _isctype
.text:0040BA80                 mov     ecx, [esp+59Ch+var_500]
.text:0040BA87                 movzx   edx, byte ptr [ebx+ecx]
.text:0040BA8B
.text:0040BA8B loc_40BA8B:                             ; CODE XREF: sub_40A870+1254↓j
.text:0040BA8B                 test    eax, eax
.text:0040BA8D                 mov     cl, dl
.text:0040BA8F                 jnz     short loc_40BAA7
.text:0040BA91
.text:0040BA91 loc_40BA91:                             ; CODE XREF: sub_40A870+1244↓j
.text:0040BA91                 mov     edx, [esp+59Ch+var_508]
.text:0040BA98                 mov     [ebx+edx], cl
.text:0040BA9B                 mov     edx, ebx
.text:0040BA9D                 dec     ebx
.text:0040BA9E                 test    edx, edx
.text:0040BAA0                 jnz     short loc_40BA58
.text:0040BAA2                 jmp     loc_40B0D6
.text:0040BAA7 ; ---------------------------------------------------------------------------
.text:0040BAA7
.text:0040BAA7 loc_40BAA7:                             ; CODE XREF: sub_40A870+121F↑j
.text:0040BAA7                 movzx   ecx, dl
.text:0040BAAA                 mov     [esp+59Ch+Str], ecx ; C
.text:0040BAAD                 call    tolower
.text:0040BAB2                 mov     cl, al
.text:0040BAB4                 jmp     short loc_40BA91
.text:0040BAB6 ; ---------------------------------------------------------------------------
.text:0040BAB6
.text:0040BAB6 loc_40BAB6:                             ; CODE XREF: sub_40A870+11FE↑j
.text:0040BAB6                 mov     eax, ds:_pctype
.text:0040BABB                 mov     eax, [eax]
.text:0040BABD                 movzx   eax, word ptr [eax+ecx*2]
.text:0040BAC1                 and     eax, 1
.text:0040BAC4                 jmp     short loc_40BA8B
.text:0040BAC6 ; ---------------------------------------------------------------------------
.text:0040BAC6
.text:0040BAC6 loc_40BAC6:                             ; CODE XREF: sub_40A870+11DB↑j
.text:0040BAC6                 mov     eax, [esp+59Ch+var_528]
.text:0040BACA                 test    eax, eax
.text:0040BACC                 jz      short loc_40BB47
.text:0040BACE                 test    esi, esi
.text:0040BAD0                 lea     ebx, [esi-1]
.text:0040BAD3                 jz      loc_40B0D6
.text:0040BAD9
.text:0040BAD9 loc_40BAD9:                             ; CODE XREF: sub_40A870+12B1↓j
.text:0040BAD9                 mov     eax, [esp+59Ch+var_500]
.text:0040BAE0                 movzx   edx, byte ptr [ebx+eax]
.text:0040BAE4                 mov     eax, ds:__mb_cur_max
.text:0040BAE9                 movzx   ecx, dl
.text:0040BAEC                 cmp     dword ptr [eax], 1
.text:0040BAEF                 jz      short loc_40BB37
.text:0040BAF1                 mov     [esp+59Ch+Str], ecx ; C
.text:0040BAF4                 mov     [esp+59Ch+SizeInBytes], 2 ; Type
.text:0040BAFC                 call    _isctype
.text:0040BB01                 mov     ecx, [esp+59Ch+var_500]
.text:0040BB08                 movzx   edx, byte ptr [ebx+ecx]
.text:0040BB0C
.text:0040BB0C loc_40BB0C:                             ; CODE XREF: sub_40A870+12D5↓j
.text:0040BB0C                 test    eax, eax
.text:0040BB0E                 mov     cl, dl
.text:0040BB10                 jnz     short loc_40BB28
.text:0040BB12
.text:0040BB12 loc_40BB12:                             ; CODE XREF: sub_40A870+12C5↓j
.text:0040BB12                 mov     edx, [esp+59Ch+var_508]
.text:0040BB19                 mov     [ebx+edx], cl
.text:0040BB1C                 mov     edx, ebx
.text:0040BB1E                 dec     ebx
.text:0040BB1F                 test    edx, edx
.text:0040BB21                 jnz     short loc_40BAD9
.text:0040BB23                 jmp     loc_40B0D6
.text:0040BB28 ; ---------------------------------------------------------------------------
.text:0040BB28
.text:0040BB28 loc_40BB28:                             ; CODE XREF: sub_40A870+12A0↑j
.text:0040BB28                 movzx   ecx, dl
.text:0040BB2B                 mov     [esp+59Ch+Str], ecx ; C
.text:0040BB2E                 call    toupper
.text:0040BB33                 mov     cl, al
.text:0040BB35                 jmp     short loc_40BB12
.text:0040BB37 ; ---------------------------------------------------------------------------
.text:0040BB37
.text:0040BB37 loc_40BB37:                             ; CODE XREF: sub_40A870+127F↑j
.text:0040BB37                 mov     eax, ds:_pctype
.text:0040BB3C                 mov     eax, [eax]
.text:0040BB3E                 movzx   eax, word ptr [eax+ecx*2]
.text:0040BB42                 and     eax, 2
.text:0040BB45                 jmp     short loc_40BB0C
.text:0040BB47 ; ---------------------------------------------------------------------------
.text:0040BB47
.text:0040BB47 loc_40BB47:                             ; CODE XREF: sub_40A870+125C↑j
.text:0040BB47                 mov     [esp+59Ch+State], esi
.text:0040BB4B                 mov     edx, [esp+59Ch+var_500]
.text:0040BB52                 jmp     loc_40B18A
.text:0040BB57 ; ---------------------------------------------------------------------------
.text:0040BB57
.text:0040BB57 loc_40BB57:                             ; CODE XREF: sub_40A870+11AD↑j
.text:0040BB57                 mov     [esp+59Ch+State], ebx
.text:0040BB5B                 mov     eax, [esp+59Ch+var_508]
.text:0040BB62                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040BB6A                 mov     [esp+59Ch+Str], eax
.text:0040BB6D                 jmp     loc_40BA39
.text:0040BB72 ; ---------------------------------------------------------------------------
.text:0040BB72
.text:0040BB72 loc_40BB72:                             ; CODE XREF: sub_40A870+1152↑j
.text:0040BB72                 mov     eax, (offset loc_40A861+4)
.text:0040BB77                 mov     [esp+59Ch+var_500], eax
.text:0040BB7E                 jmp     loc_40B9C8
.text:0040BB83 ; ---------------------------------------------------------------------------
.text:0040BB83
.text:0040BB83 loc_40BB83:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BB83                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BB83                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 100
.text:0040BB8B                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BB91                 mov     [esp+59Ch+var_518], edi
.text:0040BB98                 cmp     edi, 2
.text:0040BB9B                 jl      short loc_40BBAC
.text:0040BB9D
.text:0040BB9D loc_40BB9D:                             ; CODE XREF: sub_40A870+1348↓j
.text:0040BB9D                 mov     eax, [esp+59Ch+arg_C]
.text:0040BBA4                 mov     ecx, [eax+0Ch]
.text:0040BBA7                 jmp     loc_40B225
.text:0040BBAC ; ---------------------------------------------------------------------------
.text:0040BBAC
.text:0040BBAC loc_40BBAC:                             ; CODE XREF: sub_40A870+132B↑j
.text:0040BBAC                 mov     ecx, 2
.text:0040BBB1                 mov     [esp+59Ch+var_518], ecx
.text:0040BBB8                 jmp     short loc_40BB9D
.text:0040BBB8 ; ---------------------------------------------------------------------------
.text:0040BBBA                 align 10h
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BBC0                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BBC0                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 101
.text:0040BBC8                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BBCE                 mov     [esp+59Ch+var_518], edi
.text:0040BBD5                 cmp     edi, 2
.text:0040BBD8                 jl      short loc_40BC11
.text:0040BBDA
.text:0040BBDA loc_40BBDA:                             ; CODE XREF: sub_40A870+13AD↓j
.text:0040BBDA                 mov     esi, [esp+59Ch+arg_C]
.text:0040BBE1                 mov     ecx, [esi+0Ch]
.text:0040BBE4
.text:0040BBE4 loc_40BBE4:                             ; CODE XREF: sub_40A870+1702↓j
.text:0040BBE4                                         ; sub_40A870+1736↓j
.text:0040BBE4                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040BBEC                 jz      loc_40B225
.text:0040BBF2                 cmp     [esp+59Ch+var_510], 2Dh ; '-'
.text:0040BBFA                 jz      loc_40B225
.text:0040BC00                 mov     eax, 5Fh ; '_'
.text:0040BC05                 mov     [esp+59Ch+var_510], eax
.text:0040BC0C                 jmp     loc_40B225
.text:0040BC11 ; ---------------------------------------------------------------------------
.text:0040BC11
.text:0040BC11 loc_40BC11:                             ; CODE XREF: sub_40A870+1368↑j
.text:0040BC11                 mov     edx, 2
.text:0040BC16                 mov     [esp+59Ch+var_518], edx
.text:0040BC1D                 jmp     short loc_40BBDA
.text:0040BC1D ; ---------------------------------------------------------------------------
.text:0040BC1F                 align 10h
.text:0040BC20
.text:0040BC20 loc_40BC20:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BC20                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BC20                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F cases 71,86,103
.text:0040BC28                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BC2E                 mov     edx, [esp+59Ch+arg_C]
.text:0040BC35                 mov     eax, [esp+59Ch+arg_C]
.text:0040BC3C                 mov     ebx, [edx+14h]
.text:0040BC3F                 mov     eax, [eax+18h]
.text:0040BC42                 lea     esi, [ebx+76Ch]
.text:0040BC48                 mov     [esp+59Ch+var_544], eax
.text:0040BC4C                 mov     [esp+59Ch+var_538], esi
.text:0040BC50                 mov     esi, [edx+1Ch]
.text:0040BC53                 mov     edx, [esp+59Ch+var_544]
.text:0040BC57                 mov     [esp+59Ch+var_540], esi
.text:0040BC5B                 mov     eax, esi
.text:0040BC5D                 sub     eax, edx
.text:0040BC5F                 lea     esi, [eax+17Eh]
.text:0040BC65                 mov     edx, 92492493h
.text:0040BC6A                 mov     eax, esi
.text:0040BC6C                 imul    edx
.text:0040BC6E                 mov     eax, esi
.text:0040BC70                 sar     eax, 1Fh
.text:0040BC73                 add     edx, esi
.text:0040BC75                 sar     edx, 2
.text:0040BC78                 sub     edx, eax
.text:0040BC7A                 lea     eax, ds:0[edx*8]
.text:0040BC81                 sub     eax, edx
.text:0040BC83                 mov     edx, [esp+59Ch+var_540]
.text:0040BC87                 sub     esi, eax
.text:0040BC89                 sub     edx, esi
.text:0040BC8B                 add     edx, 3
.text:0040BC8E                 mov     [esp+59Ch+var_53C], edx
.text:0040BC92                 js      loc_40BE36
.text:0040BC98                 test    byte ptr [esp+59Ch+var_538], 3
.text:0040BC9D                 mov     [esp+59Ch+var_54C], 0
.text:0040BCA5                 jnz     short loc_40BCF9
.text:0040BCA7                 mov     eax, [esp+59Ch+var_538]
.text:0040BCAB                 mov     ebx, 51EB851Fh
.text:0040BCB0                 imul    ebx
.text:0040BCB2                 mov     eax, [esp+59Ch+var_538]
.text:0040BCB6                 mov     esi, edx
.text:0040BCB8                 sar     edx, 5
.text:0040BCBB                 mov     [esp+59Ch+var_570], edx
.text:0040BCBF                 cdq
.text:0040BCC0                 sub     [esp+59Ch+var_570], edx
.text:0040BCC4                 mov     ebx, [esp+59Ch+var_570]
.text:0040BCC8                 lea     eax, [ebx+ebx*4]
.text:0040BCCB                 lea     ebx, [eax+eax*4]
.text:0040BCCE                 mov     [esp+59Ch+var_57C], ebx
.text:0040BCD2                 shl     ebx, 2
.text:0040BCD5                 cmp     [esp+59Ch+var_538], ebx
.text:0040BCD9                 jnz     short loc_40BCF1
.text:0040BCDB                 mov     ebx, esi
.text:0040BCDD                 sar     ebx, 7
.text:0040BCE0                 sub     ebx, edx
.text:0040BCE2                 lea     esi, [ebx+ebx*4]
.text:0040BCE5                 lea     edx, [esi+esi*4]
.text:0040BCE8                 shl     edx, 4
.text:0040BCEB                 cmp     [esp+59Ch+var_538], edx
.text:0040BCEF                 jnz     short loc_40BCF9
.text:0040BCF1
.text:0040BCF1 loc_40BCF1:                             ; CODE XREF: sub_40A870+1469↑j
.text:0040BCF1                 mov     [esp+59Ch+var_54C], 1
.text:0040BCF9
.text:0040BCF9 loc_40BCF9:                             ; CODE XREF: sub_40A870+1435↑j
.text:0040BCF9                                         ; sub_40A870+147F↑j
.text:0040BCF9                 mov     esi, [esp+59Ch+var_54C]
.text:0040BCFD                 mov     eax, [esp+59Ch+var_544]
.text:0040BD01                 sub     [esp+59Ch+var_540], esi
.text:0040BD05                 mov     ebx, [esp+59Ch+var_540]
.text:0040BD09                 sub     ebx, 16Dh
.text:0040BD0F                 mov     edx, ebx
.text:0040BD11                 sub     edx, eax
.text:0040BD13                 lea     esi, [edx+17Eh]
.text:0040BD19                 mov     eax, 92492493h
.text:0040BD1E                 imul    esi
.text:0040BD20                 mov     eax, esi
.text:0040BD22                 sar     eax, 1Fh
.text:0040BD25                 lea     edx, [edx+esi]
.text:0040BD28                 sar     edx, 2
.text:0040BD2B                 sub     edx, eax
.text:0040BD2D                 lea     eax, ds:0[edx*8]
.text:0040BD34                 sub     eax, edx
.text:0040BD36                 sub     esi, eax
.text:0040BD38                 sub     ebx, esi
.text:0040BD3A                 mov     eax, ebx
.text:0040BD3C                 add     eax, 3
.text:0040BD3F                 js      short loc_40BD49
.text:0040BD41                 inc     [esp+59Ch+var_538]
.text:0040BD45                 mov     [esp+59Ch+var_53C], eax
.text:0040BD49
.text:0040BD49 loc_40BD49:                             ; CODE XREF: sub_40A870+14CF↑j
.text:0040BD49                                         ; sub_40A870+1674↓j
.text:0040BD49                 movsx   eax, cl
.text:0040BD4C                 cmp     eax, 47h ; 'G'
.text:0040BD4F                 jz      loc_40BE13
.text:0040BD55                 cmp     eax, 67h ; 'g'
.text:0040BD58                 jz      short loc_40BDA0
.text:0040BD5A                 mov     [esp+59Ch+var_518], edi
.text:0040BD61                 cmp     edi, 2
.text:0040BD64                 jl      short loc_40BD8B
.text:0040BD66
.text:0040BD66 loc_40BD66:                             ; CODE XREF: sub_40A870+1527↓j
.text:0040BD66                 mov     eax, [esp+59Ch+var_53C]
.text:0040BD6A                 mov     ebx, 92492493h
.text:0040BD6F                 mov     esi, [esp+59Ch+var_53C]
.text:0040BD73                 mov     ecx, [esp+59Ch+var_53C]
.text:0040BD77                 imul    ebx
.text:0040BD79                 sar     ecx, 1Fh
.text:0040BD7C                 add     edx, esi
.text:0040BD7E                 sar     edx, 2
.text:0040BD81                 sub     edx, ecx
.text:0040BD83                 lea     ecx, [edx+1]
.text:0040BD86                 jmp     loc_40B225
.text:0040BD8B ; ---------------------------------------------------------------------------
.text:0040BD8B
.text:0040BD8B loc_40BD8B:                             ; CODE XREF: sub_40A870+14F4↑j
.text:0040BD8B                 mov     ebx, 2
.text:0040BD90                 mov     [esp+59Ch+var_518], ebx
.text:0040BD97                 jmp     short loc_40BD66
.text:0040BD97 ; ---------------------------------------------------------------------------
.text:0040BD99                 align 10h
.text:0040BDA0
.text:0040BDA0 loc_40BDA0:                             ; CODE XREF: sub_40A870+14E8↑j
.text:0040BDA0                 mov     [esp+59Ch+var_518], edi
.text:0040BDA7                 cmp     edi, 2
.text:0040BDAA                 jl      short loc_40BE05
.text:0040BDAC
.text:0040BDAC loc_40BDAC:                             ; CODE XREF: sub_40A870+15A1↓j
.text:0040BDAC                 mov     eax, [esp+59Ch+var_538]
.text:0040BDB0                 mov     ebx, 51EB851Fh
.text:0040BDB5                 imul    ebx
.text:0040BDB7                 mov     eax, [esp+59Ch+var_538]
.text:0040BDBB                 mov     [esp+59Ch+var_578], edx
.text:0040BDBF                 mov     esi, [esp+59Ch+var_578]
.text:0040BDC3                 cdq
.text:0040BDC4                 sar     esi, 5
.text:0040BDC7                 sub     esi, edx
.text:0040BDC9                 lea     edx, [esi+esi*4]
.text:0040BDCC                 lea     ecx, [edx+edx*4]
.text:0040BDCF                 shl     ecx, 2
.text:0040BDD2                 sub     [esp+59Ch+var_538], ecx
.text:0040BDD6                 mov     esi, [esp+59Ch+var_538]
.text:0040BDDA
.text:0040BDDA loc_40BDDA:                             ; CODE XREF: sub_40A870+1A3F↓j
.text:0040BDDA                 add     esi, 64h ; 'd'
.text:0040BDDD                 mov     eax, esi
.text:0040BDDF                 imul    ebx
.text:0040BDE1                 mov     [esp+59Ch+var_578], edx
.text:0040BDE5                 mov     ecx, [esp+59Ch+var_578]
.text:0040BDE9                 mov     [esp+59Ch+var_57C], eax
.text:0040BDED                 mov     eax, esi
.text:0040BDEF                 cdq
.text:0040BDF0                 sar     ecx, 5
.text:0040BDF3                 sub     ecx, edx
.text:0040BDF5                 lea     edx, [ecx+ecx*4]
.text:0040BDF8                 lea     eax, [edx+edx*4]
.text:0040BDFB                 mov     ecx, esi
.text:0040BDFD                 shl     eax, 2
.text:0040BE00                 jmp     loc_40B88D
.text:0040BE05 ; ---------------------------------------------------------------------------
.text:0040BE05
.text:0040BE05 loc_40BE05:                             ; CODE XREF: sub_40A870+153A↑j
.text:0040BE05                 mov     ebx, 2
.text:0040BE0A                 mov     [esp+59Ch+var_518], ebx
.text:0040BE11                 jmp     short loc_40BDAC
.text:0040BE13 ; ---------------------------------------------------------------------------
.text:0040BE13
.text:0040BE13 loc_40BE13:                             ; CODE XREF: sub_40A870+14DF↑j
.text:0040BE13                 mov     [esp+59Ch+var_518], edi
.text:0040BE1A                 cmp     edi, 1
.text:0040BE1D                 jl      short loc_40BE28
.text:0040BE1F
.text:0040BE1F loc_40BE1F:                             ; CODE XREF: sub_40A870+15C4↓j
.text:0040BE1F                 mov     ecx, [esp+59Ch+var_538]
.text:0040BE23                 jmp     loc_40B225
.text:0040BE28 ; ---------------------------------------------------------------------------
.text:0040BE28
.text:0040BE28 loc_40BE28:                             ; CODE XREF: sub_40A870+15AD↑j
.text:0040BE28                 mov     eax, 1
.text:0040BE2D                 mov     [esp+59Ch+var_518], eax
.text:0040BE34                 jmp     short loc_40BE1F
.text:0040BE36 ; ---------------------------------------------------------------------------
.text:0040BE36
.text:0040BE36 loc_40BE36:                             ; CODE XREF: sub_40A870+1422↑j
.text:0040BE36                 mov     [esp+59Ch+var_548], 0
.text:0040BE3E                 add     ebx, 76Bh
.text:0040BE44                 mov     [esp+59Ch+var_538], ebx
.text:0040BE48                 test    byte ptr [esp+59Ch+var_538], 3
.text:0040BE4D                 jnz     short loc_40BE9F
.text:0040BE4F                 mov     esi, 51EB851Fh
.text:0040BE54                 mov     eax, ebx
.text:0040BE56                 imul    esi
.text:0040BE58                 mov     eax, [esp+59Ch+var_538]
.text:0040BE5C                 mov     esi, edx
.text:0040BE5E                 sar     edx, 5
.text:0040BE61                 mov     [esp+59Ch+var_570], edx
.text:0040BE65                 cdq
.text:0040BE66                 sub     [esp+59Ch+var_570], edx
.text:0040BE6A                 mov     ebx, [esp+59Ch+var_570]
.text:0040BE6E                 lea     eax, [ebx+ebx*4]
.text:0040BE71                 lea     ebx, [eax+eax*4]
.text:0040BE74                 mov     [esp+59Ch+var_57C], ebx
.text:0040BE78                 shl     ebx, 2
.text:0040BE7B                 cmp     [esp+59Ch+var_538], ebx
.text:0040BE7F                 jnz     short loc_40BE97
.text:0040BE81                 mov     ebx, esi
.text:0040BE83                 sar     ebx, 7
.text:0040BE86                 sub     ebx, edx
.text:0040BE88                 lea     esi, [ebx+ebx*4]
.text:0040BE8B                 lea     edx, [esi+esi*4]
.text:0040BE8E                 shl     edx, 4
.text:0040BE91                 cmp     [esp+59Ch+var_538], edx
.text:0040BE95                 jnz     short loc_40BE9F
.text:0040BE97
.text:0040BE97 loc_40BE97:                             ; CODE XREF: sub_40A870+160F↑j
.text:0040BE97                 mov     [esp+59Ch+var_548], 1
.text:0040BE9F
.text:0040BE9F loc_40BE9F:                             ; CODE XREF: sub_40A870+15DD↑j
.text:0040BE9F                                         ; sub_40A870+1625↑j
.text:0040BE9F                 mov     eax, [esp+59Ch+var_540]
.text:0040BEA3                 mov     esi, [esp+59Ch+var_548]
.text:0040BEA7                 lea     ebx, [esi+eax+16Dh]
.text:0040BEAE                 mov     esi, [esp+59Ch+var_544]
.text:0040BEB2                 mov     eax, ebx
.text:0040BEB4                 sub     eax, esi
.text:0040BEB6                 lea     esi, [eax+17Eh]
.text:0040BEBC                 mov     eax, 92492493h
.text:0040BEC1                 imul    esi
.text:0040BEC3                 mov     eax, esi
.text:0040BEC5                 sar     eax, 1Fh
.text:0040BEC8                 lea     edx, [edx+esi]
.text:0040BECB                 sar     edx, 2
.text:0040BECE                 sub     edx, eax
.text:0040BED0                 lea     eax, ds:0[edx*8]
.text:0040BED7                 sub     eax, edx
.text:0040BED9                 sub     esi, eax
.text:0040BEDB                 sub     ebx, esi
.text:0040BEDD                 add     ebx, 3
.text:0040BEE0                 mov     [esp+59Ch+var_53C], ebx
.text:0040BEE4                 jmp     loc_40BD49
.text:0040BEE4 ; ---------------------------------------------------------------------------
.text:0040BEE9                 align 10h
.text:0040BEF0
.text:0040BEF0 loc_40BEF0:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BEF0                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BEF0                 test    ebx, ebx        ; jumptable 0040AB8F cases 98,104
.text:0040BEF2                 jz      short loc_40BF04
.text:0040BEF4                 mov     [esp+59Ch+var_528], 1
.text:0040BEFC                 mov     [esp+59Ch+var_524], 0
.text:0040BF04
.text:0040BF04 loc_40BF04:                             ; CODE XREF: sub_40A870+1682↑j
.text:0040BF04                 mov     esi, [esp+59Ch+var_514]
.text:0040BF0B                 test    esi, esi
.text:0040BF0D                 jz      loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040BF13                 jmp     def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BF18 ; ---------------------------------------------------------------------------
.text:0040BF18
.text:0040BF18 loc_40BF18:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BF18                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BF18                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 106
.text:0040BF20                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BF26                 mov     [esp+59Ch+var_518], edi
.text:0040BF2D                 cmp     edi, 3
.text:0040BF30                 jge     short loc_40BF3E
.text:0040BF32                 mov     esi, 3
.text:0040BF37                 mov     [esp+59Ch+var_518], esi
.text:0040BF3E
.text:0040BF3E loc_40BF3E:                             ; CODE XREF: sub_40A870+16C0↑j
.text:0040BF3E                 mov     ebx, [esp+59Ch+arg_C]
.text:0040BF45                 mov     ecx, [ebx+1Ch]
.text:0040BF48
.text:0040BF48 loc_40BF48:                             ; CODE XREF: sub_40A870+1774↓j
.text:0040BF48                 inc     ecx
.text:0040BF49                 jmp     loc_40B225
.text:0040BF4E ; ---------------------------------------------------------------------------
.text:0040BF4E
.text:0040BF4E loc_40BF4E:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BF4E                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BF4E                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 107
.text:0040BF56                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BF5C                 mov     [esp+59Ch+var_518], edi
.text:0040BF63                 cmp     edi, 2
.text:0040BF66                 jl      short loc_40BF77
.text:0040BF68
.text:0040BF68 loc_40BF68:                             ; CODE XREF: sub_40A870+1713↓j
.text:0040BF68                 mov     eax, [esp+59Ch+arg_C]
.text:0040BF6F                 mov     ecx, [eax+8]
.text:0040BF72                 jmp     loc_40BBE4
.text:0040BF77 ; ---------------------------------------------------------------------------
.text:0040BF77
.text:0040BF77 loc_40BF77:                             ; CODE XREF: sub_40A870+16F6↑j
.text:0040BF77                 mov     ecx, 2
.text:0040BF7C                 mov     [esp+59Ch+var_518], ecx
.text:0040BF83                 jmp     short loc_40BF68
.text:0040BF85 ; ---------------------------------------------------------------------------
.text:0040BF85
.text:0040BF85 loc_40BF85:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BF85                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BF85                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 108
.text:0040BF8D                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BF93                 mov     [esp+59Ch+var_518], edi
.text:0040BF9A                 cmp     edi, 2
.text:0040BF9D                 jl      short loc_40BFAB
.text:0040BF9F
.text:0040BF9F loc_40BF9F:                             ; CODE XREF: sub_40A870+1747↓j
.text:0040BF9F                 mov     ecx, [esp+59Ch+var_4FC]
.text:0040BFA6                 jmp     loc_40BBE4
.text:0040BFAB ; ---------------------------------------------------------------------------
.text:0040BFAB
.text:0040BFAB loc_40BFAB:                             ; CODE XREF: sub_40A870+172D↑j
.text:0040BFAB                 mov     edx, 2
.text:0040BFB0                 mov     [esp+59Ch+var_518], edx
.text:0040BFB7                 jmp     short loc_40BF9F
.text:0040BFB7 ; ---------------------------------------------------------------------------
.text:0040BFB9                 align 10h
.text:0040BFC0
.text:0040BFC0 loc_40BFC0:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BFC0                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BFC0                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 109
.text:0040BFC8                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040BFCE                 mov     [esp+59Ch+var_518], edi
.text:0040BFD5                 cmp     edi, 2
.text:0040BFD8                 jl      short loc_40BFE9
.text:0040BFDA
.text:0040BFDA loc_40BFDA:                             ; CODE XREF: sub_40A870+1785↓j
.text:0040BFDA                 mov     esi, [esp+59Ch+arg_C]
.text:0040BFE1                 mov     ecx, [esi+10h]
.text:0040BFE4                 jmp     loc_40BF48
.text:0040BFE9 ; ---------------------------------------------------------------------------
.text:0040BFE9
.text:0040BFE9 loc_40BFE9:                             ; CODE XREF: sub_40A870+1768↑j
.text:0040BFE9                 mov     edx, 2
.text:0040BFEE                 mov     [esp+59Ch+var_518], edx
.text:0040BFF5                 jmp     short loc_40BFDA
.text:0040BFF7 ; ---------------------------------------------------------------------------
.text:0040BFF7
.text:0040BFF7 loc_40BFF7:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040BFF7                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040BFF7                 lea     ebx, [edi-1]    ; jumptable 0040AB8F case 110
.text:0040BFFA                 mov     edx, [esp+59Ch+var_504]
.text:0040C001                 mov     ecx, ebx
.text:0040C003                 shr     ecx, 1Fh
.text:0040C006                 mov     edi, [esp+59Ch+arg_4]
.text:0040C00D                 dec     ecx
.text:0040C00E                 and     ecx, ebx
.text:0040C010                 sub     edi, edx
.text:0040C012                 lea     esi, [ecx+1]
.text:0040C015                 xor     edx, edx
.text:0040C017                 cmp     esi, edi
.text:0040C019                 jnb     loc_40A9C7
.text:0040C01F                 mov     eax, [esp+59Ch+var_508]
.text:0040C026                 test    eax, eax
.text:0040C028                 jz      loc_40AE0B
.text:0040C02E                 test    ebx, ebx
.text:0040C030                 jle     short loc_40C05E
.text:0040C032                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040C03A                 jz      short loc_40C06D
.text:0040C03C                 mov     [esp+59Ch+State], ebx ; Size
.text:0040C040                 mov     edx, [esp+59Ch+var_508]
.text:0040C047                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040C04F                 mov     [esp+59Ch+Str], edx ; void *
.text:0040C052
.text:0040C052 loc_40C052:                             ; CODE XREF: sub_40A870+1813↓j
.text:0040C052                 call    memset
.text:0040C057                 add     [esp+59Ch+var_508], ebx
.text:0040C05E
.text:0040C05E loc_40C05E:                             ; CODE XREF: sub_40A870+17C0↑j
.text:0040C05E                 mov     eax, [esp+59Ch+var_508]
.text:0040C065                 mov     byte ptr [eax], 0Ah
.text:0040C068                 jmp     loc_40AE03
.text:0040C06D ; ---------------------------------------------------------------------------
.text:0040C06D
.text:0040C06D loc_40C06D:                             ; CODE XREF: sub_40A870+17CA↑j
.text:0040C06D                 mov     [esp+59Ch+State], ebx
.text:0040C071                 mov     edi, [esp+59Ch+var_508]
.text:0040C078                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040C080                 mov     [esp+59Ch+Str], edi
.text:0040C083                 jmp     short loc_40C052
.text:0040C085 ; ---------------------------------------------------------------------------
.text:0040C085
.text:0040C085 loc_40C085:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C085                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C085                 mov     ebx, [esp+59Ch+arg_C] ; jumptable 0040AB8F case 115
.text:0040C08C                 mov     ecx, [ebx]
.text:0040C08E                 mov     [esp+59Ch+var_45C.tm_sec], ecx
.text:0040C095                 mov     esi, [ebx+4]
.text:0040C098                 mov     [esp+59Ch+var_45C.tm_min], esi
.text:0040C09F                 mov     edx, [ebx+8]
.text:0040C0A2                 mov     [esp+59Ch+var_45C.tm_hour], edx
.text:0040C0A9                 mov     ecx, [ebx+0Ch]
.text:0040C0AC                 mov     [esp+59Ch+var_45C.tm_mday], ecx
.text:0040C0B3                 mov     esi, [ebx+10h]
.text:0040C0B6                 mov     [esp+59Ch+var_45C.tm_mon], esi
.text:0040C0BD                 mov     edx, [ebx+14h]
.text:0040C0C0                 mov     [esp+59Ch+var_45C.tm_year], edx
.text:0040C0C7                 mov     ecx, [ebx+18h]
.text:0040C0CA                 mov     [esp+59Ch+var_45C.tm_wday], ecx
.text:0040C0D1                 mov     esi, [ebx+1Ch]
.text:0040C0D4                 lea     ecx, [esp+59Ch+var_45C]
.text:0040C0DB                 mov     [esp+59Ch+var_45C.tm_yday], esi
.text:0040C0E2                 mov     edx, [ebx+20h]
.text:0040C0E5                 lea     esi, [esp+59Ch+var_20]
.text:0040C0EC                 mov     [esp+59Ch+Str], ecx ; Tm
.text:0040C0EF                 mov     ebx, 66666667h
.text:0040C0F4                 mov     [esp+59Ch+var_45C.tm_isdst], edx
.text:0040C0FB                 call    mktime
.text:0040C100                 mov     ecx, eax
.text:0040C102                 shr     eax, 1Fh
.text:0040C105                 mov     [esp+59Ch+var_51C], eax
.text:0040C10C
.text:0040C10C loc_40C10C:                             ; CODE XREF: sub_40A870+18D4↓j
.text:0040C10C                 mov     eax, ecx
.text:0040C10E                 imul    ebx
.text:0040C110                 mov     eax, ecx
.text:0040C112                 sar     eax, 1Fh
.text:0040C115                 sar     edx, 2
.text:0040C118                 sub     edx, eax
.text:0040C11A                 lea     eax, [edx+edx*4]
.text:0040C11D                 add     eax, eax
.text:0040C11F                 sub     ecx, eax
.text:0040C121                 mov     eax, ecx
.text:0040C123                 cmp     [esp+59Ch+var_51C], 0
.text:0040C12B                 mov     ecx, edx
.text:0040C12D                 jz      short loc_40C131
.text:0040C12F                 neg     eax
.text:0040C131
.text:0040C131 loc_40C131:                             ; CODE XREF: sub_40A870+18BD↑j
.text:0040C131                 add     al, 30h ; '0'
.text:0040C133                 dec     esi
.text:0040C134                 test    edx, edx
.text:0040C136                 mov     [esi], al
.text:0040C138                 mov     eax, 1
.text:0040C13D                 mov     [esp+59Ch+var_518], eax
.text:0040C144                 jnz     short loc_40C10C
.text:0040C146                 jmp     loc_40B26C
.text:0040C14B ; ---------------------------------------------------------------------------
.text:0040C14B
.text:0040C14B loc_40C14B:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C14B                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C14B                 lea     ebx, [edi-1]    ; jumptable 0040AB8F case 116
.text:0040C14E                 mov     eax, [esp+59Ch+var_504]
.text:0040C155                 mov     edx, ebx
.text:0040C157                 shr     edx, 1Fh
.text:0040C15A                 mov     edi, [esp+59Ch+arg_4]
.text:0040C161                 dec     edx
.text:0040C162                 and     edx, ebx
.text:0040C164                 lea     esi, [edx+1]
.text:0040C167                 sub     edi, eax
.text:0040C169                 xor     edx, edx
.text:0040C16B                 cmp     esi, edi
.text:0040C16D                 jnb     loc_40A9C7
.text:0040C173                 mov     ecx, [esp+59Ch+var_508]
.text:0040C17A                 test    ecx, ecx
.text:0040C17C                 jz      loc_40AE0B
.text:0040C182                 test    ebx, ebx
.text:0040C184                 jle     short loc_40C1B2
.text:0040C186                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040C18E                 jz      short loc_40C1C1
.text:0040C190                 mov     [esp+59Ch+State], ebx ; Size
.text:0040C194                 mov     eax, [esp+59Ch+var_508]
.text:0040C19B                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040C1A3                 mov     [esp+59Ch+Str], eax ; void *
.text:0040C1A6
.text:0040C1A6 loc_40C1A6:                             ; CODE XREF: sub_40A870+1967↓j
.text:0040C1A6                 call    memset
.text:0040C1AB                 add     [esp+59Ch+var_508], ebx
.text:0040C1B2
.text:0040C1B2 loc_40C1B2:                             ; CODE XREF: sub_40A870+1914↑j
.text:0040C1B2                 mov     eax, [esp+59Ch+var_508]
.text:0040C1B9                 mov     byte ptr [eax], 9
.text:0040C1BC                 jmp     loc_40AE03
.text:0040C1C1 ; ---------------------------------------------------------------------------
.text:0040C1C1
.text:0040C1C1 loc_40C1C1:                             ; CODE XREF: sub_40A870+191E↑j
.text:0040C1C1                 mov     [esp+59Ch+State], ebx
.text:0040C1C5                 mov     edi, [esp+59Ch+var_508]
.text:0040C1CC                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040C1D4                 mov     [esp+59Ch+Str], edi
.text:0040C1D7                 jmp     short loc_40C1A6
.text:0040C1D7 ; ---------------------------------------------------------------------------
.text:0040C1D9                 align 10h
.text:0040C1E0
.text:0040C1E0 loc_40C1E0:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C1E0                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C1E0                 mov     [esp+59Ch+var_518], edi ; jumptable 0040AB8F case 117
.text:0040C1E7                 cmp     edi, 1
.text:0040C1EA                 jl      short loc_40C220
.text:0040C1EC
.text:0040C1EC loc_40C1EC:                             ; CODE XREF: sub_40A870+19BC↓j
.text:0040C1EC                 mov     eax, [esp+59Ch+arg_C]
.text:0040C1F3                 mov     esi, [eax+18h]
.text:0040C1F6                 mov     eax, 92492493h
.text:0040C1FB                 add     esi, 6
.text:0040C1FE                 imul    esi
.text:0040C200                 mov     ebx, esi
.text:0040C202                 sar     ebx, 1Fh
.text:0040C205                 lea     ecx, [edx+esi]
.text:0040C208                 sar     ecx, 2
.text:0040C20B                 sub     ecx, ebx
.text:0040C20D                 lea     ebx, ds:0[ecx*8]
.text:0040C214                 sub     ebx, ecx
.text:0040C216                 sub     esi, ebx
.text:0040C218                 lea     ecx, [esi+1]
.text:0040C21B                 jmp     loc_40B225
.text:0040C220 ; ---------------------------------------------------------------------------
.text:0040C220
.text:0040C220 loc_40C220:                             ; CODE XREF: sub_40A870+197A↑j
.text:0040C220                 mov     esi, 1
.text:0040C225                 mov     [esp+59Ch+var_518], esi
.text:0040C22C                 jmp     short loc_40C1EC
.text:0040C22E ; ---------------------------------------------------------------------------
.text:0040C22E
.text:0040C22E loc_40C22E:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C22E                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C22E                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 119
.text:0040C236                 jz      def_40AB8F      ; jumptable 0040AB8F default case, cases 1-36,38-64,69,74-76,79,81,91-96,102,105,111,113,118
.text:0040C23C                 mov     [esp+59Ch+var_518], edi
.text:0040C243                 cmp     edi, 1
.text:0040C246                 jl      short loc_40C257
.text:0040C248
.text:0040C248 loc_40C248:                             ; CODE XREF: sub_40A870+19F3↓j
.text:0040C248                 mov     eax, [esp+59Ch+arg_C]
.text:0040C24F                 mov     ecx, [eax+18h]
.text:0040C252                 jmp     loc_40B225
.text:0040C257 ; ---------------------------------------------------------------------------
.text:0040C257
.text:0040C257 loc_40C257:                             ; CODE XREF: sub_40A870+19D6↑j
.text:0040C257                 mov     ebx, 1
.text:0040C25C                 mov     [esp+59Ch+var_518], ebx
.text:0040C263                 jmp     short loc_40C248
.text:0040C265 ; ---------------------------------------------------------------------------
.text:0040C265
.text:0040C265 loc_40C265:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C265                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C265                 cmp     [esp+59Ch+var_514], 45h ; 'E' ; jumptable 0040AB8F case 121
.text:0040C26D                 jz      loc_40AF9B      ; jumptable 0040AB8F case 114
.text:0040C273                 mov     [esp+59Ch+var_518], edi
.text:0040C27A                 cmp     edi, 2
.text:0040C27D                 jl      short loc_40C2B4
.text:0040C27F
.text:0040C27F loc_40C27F:                             ; CODE XREF: sub_40A870+1A50↓j
.text:0040C27F                 mov     ebx, [esp+59Ch+arg_C]
.text:0040C286                 mov     esi, [ebx+14h]
.text:0040C289                 mov     ebx, 51EB851Fh
.text:0040C28E                 mov     eax, esi
.text:0040C290                 imul    ebx
.text:0040C292                 mov     eax, esi
.text:0040C294                 sar     edx, 5
.text:0040C297                 mov     [esp+59Ch+var_57C], edx
.text:0040C29B                 cdq
.text:0040C29C                 sub     [esp+59Ch+var_57C], edx
.text:0040C2A0                 mov     eax, [esp+59Ch+var_57C]
.text:0040C2A4                 lea     ecx, [eax+eax*4]
.text:0040C2A7                 lea     edx, [ecx+ecx*4]
.text:0040C2AA                 shl     edx, 2
.text:0040C2AD                 sub     esi, edx
.text:0040C2AF                 jmp     loc_40BDDA
.text:0040C2B4 ; ---------------------------------------------------------------------------
.text:0040C2B4
.text:0040C2B4 loc_40C2B4:                             ; CODE XREF: sub_40A870+1A0D↑j
.text:0040C2B4                 mov     ecx, 2
.text:0040C2B9                 mov     [esp+59Ch+var_518], ecx
.text:0040C2C0                 jmp     short loc_40C27F
.text:0040C2C2 ; ---------------------------------------------------------------------------
.text:0040C2C2
.text:0040C2C2 loc_40C2C2:                             ; CODE XREF: sub_40A870+31F↑j
.text:0040C2C2                                         ; DATA XREF: sub_40A870:jpt_40AB8F↑o
.text:0040C2C2                 mov     eax, [esp+59Ch+arg_C] ; jumptable 0040AB8F case 122
.text:0040C2C9                 mov     edx, [eax+20h]
.text:0040C2CC                 test    edx, edx
.text:0040C2CE                 js      loc_40A98A
.text:0040C2D4                 mov     [esp+59Ch+var_550], 0
.text:0040C2DC                 mov     esi, [esp+59Ch+arg_10]
.text:0040C2E3                 test    esi, esi
.text:0040C2E5                 jz      loc_40C3E8
.text:0040C2EB
.text:0040C2EB loc_40C2EB:                             ; CODE XREF: sub_40A870+1D33↓j
.text:0040C2EB                 lea     ebx, [edi-1]
.text:0040C2EE                 mov     ecx, [esp+59Ch+arg_4]
.text:0040C2F5                 mov     edx, ebx
.text:0040C2F7                 shr     edx, 1Fh
.text:0040C2FA                 mov     eax, [esp+59Ch+var_504]
.text:0040C301                 dec     edx
.text:0040C302                 and     edx, ebx
.text:0040C304                 lea     esi, [edx+1]
.text:0040C307                 sub     ecx, eax
.text:0040C309                 xor     edx, edx
.text:0040C30B                 cmp     esi, ecx
.text:0040C30D                 jnb     loc_40A9C7
.text:0040C313                 mov     ecx, [esp+59Ch+var_508]
.text:0040C31A                 test    ecx, ecx
.text:0040C31C                 jz      short loc_40C364
.text:0040C31E                 test    ebx, ebx
.text:0040C320                 jle     short loc_40C352
.text:0040C322                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040C32A                 jz      loc_40C3CD
.text:0040C330                 mov     [esp+59Ch+State], ebx ; Size
.text:0040C334                 mov     eax, [esp+59Ch+var_508]
.text:0040C33B                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040C343                 mov     [esp+59Ch+Str], eax ; void *
.text:0040C346
.text:0040C346 loc_40C346:                             ; CODE XREF: sub_40A870+1B73↓j
.text:0040C346                 call    memset
.text:0040C34B                 add     [esp+59Ch+var_508], ebx
.text:0040C352
.text:0040C352 loc_40C352:                             ; CODE XREF: sub_40A870+1AB0↑j
.text:0040C352                 mov     ebx, [esp+59Ch+var_508]
.text:0040C359                 mov     byte ptr [ebx], 2Bh ; '+'
.text:0040C35C                 inc     ebx
.text:0040C35D                 mov     [esp+59Ch+var_508], ebx
.text:0040C364
.text:0040C364 loc_40C364:                             ; CODE XREF: sub_40A870+1AAC↑j
.text:0040C364                 add     [esp+59Ch+var_504], esi
.text:0040C36B
.text:0040C36B loc_40C36B:                             ; CODE XREF: sub_40A870+1DB9↓j
.text:0040C36B                 mov     [esp+59Ch+var_518], edi
.text:0040C372                 mov     eax, [esp+59Ch+var_550]
.text:0040C376                 mov     ecx, 88888889h
.text:0040C37B                 mov     ebx, [esp+59Ch+var_550]
.text:0040C37F                 imul    ecx
.text:0040C381                 lea     esi, [ebx+edx]
.text:0040C384                 sar     esi, 5
.text:0040C387                 sar     ebx, 1Fh
.text:0040C38A                 sub     esi, ebx
.text:0040C38C                 cmp     edi, 4
.text:0040C38F                 jge     short loc_40C39D
.text:0040C391                 mov     edx, 4
.text:0040C396                 mov     [esp+59Ch+var_518], edx
.text:0040C39D
.text:0040C39D loc_40C39D:                             ; CODE XREF: sub_40A870+1B1F↑j
.text:0040C39D                 mov     eax, esi
.text:0040C39F                 mov     ebx, esi
.text:0040C3A1                 sar     ebx, 1Fh
.text:0040C3A4                 imul    ecx
.text:0040C3A6                 add     edx, esi
.text:0040C3A8                 sar     edx, 5
.text:0040C3AB                 sub     edx, ebx
.text:0040C3AD                 lea     eax, [edx+edx*4]
.text:0040C3B0                 lea     ebx, [eax+eax*4]
.text:0040C3B3                 mov     eax, edx
.text:0040C3B5                 shl     eax, 4
.text:0040C3B8                 sub     eax, edx
.text:0040C3BA                 lea     ecx, ds:0[eax*4]
.text:0040C3C1                 mov     eax, esi
.text:0040C3C3                 sub     eax, ecx
.text:0040C3C5                 lea     ecx, [eax+ebx*4]
.text:0040C3C8                 jmp     loc_40B225
.text:0040C3CD ; ---------------------------------------------------------------------------
.text:0040C3CD
.text:0040C3CD loc_40C3CD:                             ; CODE XREF: sub_40A870+1ABA↑j
.text:0040C3CD                 mov     [esp+59Ch+State], ebx
.text:0040C3D1                 mov     edx, [esp+59Ch+var_508]
.text:0040C3D8                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040C3E0                 mov     [esp+59Ch+Str], edx
.text:0040C3E3                 jmp     loc_40C346
.text:0040C3E8 ; ---------------------------------------------------------------------------
.text:0040C3E8
.text:0040C3E8 loc_40C3E8:                             ; CODE XREF: sub_40A870+1A75↑j
.text:0040C3E8                 mov     ecx, [eax]
.text:0040C3EA                 mov     [esp+59Ch+var_4BC.tm_sec], ecx
.text:0040C3F1                 mov     ebx, [eax+4]
.text:0040C3F4                 mov     [esp+59Ch+var_4BC.tm_min], ebx
.text:0040C3FB                 mov     ecx, [eax+8]
.text:0040C3FE                 mov     [esp+59Ch+var_4BC.tm_hour], ecx
.text:0040C405                 mov     ebx, [eax+0Ch]
.text:0040C408                 mov     [esp+59Ch+var_4BC.tm_mday], ebx
.text:0040C40F                 mov     ecx, [eax+10h]
.text:0040C412                 mov     [esp+59Ch+var_4BC.tm_mon], ecx
.text:0040C419                 mov     ebx, [eax+14h]
.text:0040C41C                 mov     [esp+59Ch+var_4BC.tm_year], ebx
.text:0040C423                 mov     ecx, [eax+18h]
.text:0040C426                 mov     [esp+59Ch+var_4BC.tm_wday], ecx
.text:0040C42D                 mov     ebx, [eax+1Ch]
.text:0040C430                 lea     ecx, [esp+59Ch+var_4BC]
.text:0040C437                 mov     [esp+59Ch+var_4BC.tm_isdst], edx
.text:0040C43E                 mov     [esp+59Ch+Str], ecx ; Tm
.text:0040C441                 mov     [esp+59Ch+var_4BC.tm_yday], ebx
.text:0040C448                 lea     ebx, [esp+59Ch+var_4F8]
.text:0040C44F                 call    mktime
.text:0040C454                 mov     [esp+59Ch+var_4F8], eax
.text:0040C45B                 inc     eax
.text:0040C45C                 jz      loc_40C664
.text:0040C462
.text:0040C462 loc_40C462:                             ; CODE XREF: sub_40A870+1E7F↓j
.text:0040C462                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:0040C465                 lea     esi, [esp+59Ch+var_48C]
.text:0040C46C                 mov     [esp+59Ch+SizeInBytes], esi ; int
.text:0040C470                 call    sub_4153C0
.text:0040C475                 test    eax, eax
.text:0040C477                 jz      loc_40A98A
.text:0040C47D                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:0040C484                 test    al, 3
.text:0040C486                 jnz     loc_40C657
.text:0040C48C                 sar     eax, 2
.text:0040C48F                 add     eax, 1DAh
.text:0040C494
.text:0040C494 loc_40C494:                             ; CODE XREF: sub_40A870+1DEF↓j
.text:0040C494                 mov     [esp+59Ch+var_554], eax
.text:0040C498                 mov     ecx, [esp+59Ch+var_478]
.text:0040C49F                 test    cl, 3
.text:0040C4A2                 mov     [esp+59Ch+var_55C], ecx
.text:0040C4A6                 jnz     loc_40C646
.text:0040C4AC                 mov     eax, ecx
.text:0040C4AE                 sar     eax, 2
.text:0040C4B1                 add     eax, 1DAh
.text:0040C4B6
.text:0040C4B6 loc_40C4B6:                             ; CODE XREF: sub_40A870+1DE2↓j
.text:0040C4B6                 mov     [esp+59Ch+var_558], eax
.text:0040C4BA                 mov     ecx, 51EB851Fh
.text:0040C4BF                 mov     esi, [esp+59Ch+var_554]
.text:0040C4C3                 mov     eax, [esp+59Ch+var_554]
.text:0040C4C7                 sar     esi, 1Fh
.text:0040C4CA                 imul    ecx
.text:0040C4CC                 mov     eax, [esp+59Ch+var_558]
.text:0040C4D0                 sar     edx, 3
.text:0040C4D3                 sub     edx, esi
.text:0040C4D5                 lea     ebx, [edx+edx*4]
.text:0040C4D8                 lea     esi, [ebx+ebx*4]
.text:0040C4DB                 mov     ebx, [esp+59Ch+var_554]
.text:0040C4DF                 sub     ebx, esi
.text:0040C4E1                 shr     ebx, 1Fh
.text:0040C4E4                 sub     edx, ebx
.text:0040C4E6                 mov     esi, edx
.text:0040C4E8                 mov     ebx, [esp+59Ch+var_558]
.text:0040C4EC                 imul    ecx
.text:0040C4EE                 sar     ebx, 1Fh
.text:0040C4F1                 sar     edx, 3
.text:0040C4F4                 sub     edx, ebx
.text:0040C4F6                 lea     ecx, [edx+edx*4]
.text:0040C4F9                 lea     ebx, [ecx+ecx*4]
.text:0040C4FC                 mov     ecx, [esp+59Ch+var_558]
.text:0040C500                 sub     ecx, ebx
.text:0040C502                 mov     ebx, ecx
.text:0040C504                 shr     ebx, 1Fh
.text:0040C507                 mov     ecx, [esp+59Ch+var_558]
.text:0040C50B                 sub     edx, ebx
.text:0040C50D                 sub     [esp+59Ch+var_554], ecx
.text:0040C511                 mov     eax, edx
.text:0040C513                 mov     ebx, esi
.text:0040C515                 sub     esi, eax
.text:0040C517                 sar     edx, 2
.text:0040C51A                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:0040C521                 sub     [esp+59Ch+var_554], esi
.text:0040C525                 sar     ebx, 2
.text:0040C528                 sub     ebx, edx
.text:0040C52A                 mov     edx, [esp+59Ch+var_55C]
.text:0040C52E                 mov     ecx, [esp+59Ch+var_554]
.text:0040C532                 sub     eax, edx
.text:0040C534                 lea     esi, [eax+eax*8]
.text:0040C537                 add     ebx, ecx
.text:0040C539                 mov     edx, [esp+59Ch+var_470]
.text:0040C540                 lea     ecx, [eax+esi*8]
.text:0040C543                 lea     esi, [ecx+ecx*4]
.text:0040C546                 mov     eax, [esp+59Ch+var_488]
.text:0040C54D                 add     esi, ebx
.text:0040C54F                 mov     ebx, [esp+59Ch+var_4BC.tm_yday]
.text:0040C556                 sub     ebx, edx
.text:0040C558                 add     esi, ebx
.text:0040C55A                 mov     edx, [esp+59Ch+var_4BC.tm_hour]
.text:0040C561                 mov     ebx, [esp+59Ch+var_484]
.text:0040C568                 lea     ecx, [esi+esi*2]
.text:0040C56B                 sub     edx, ebx
.text:0040C56D                 lea     ebx, [edx+ecx*8]
.text:0040C570                 mov     edx, [esp+59Ch+var_4BC.tm_min]
.text:0040C577                 mov     esi, ebx
.text:0040C579                 shl     esi, 4
.text:0040C57C                 sub     esi, ebx
.text:0040C57E                 sub     edx, eax
.text:0040C580                 mov     ebx, [esp+59Ch+var_4BC.tm_sec]
.text:0040C587                 lea     ecx, [edx+esi*4]
.text:0040C58A                 mov     eax, [esp+59Ch+var_48C]
.text:0040C591                 mov     esi, ecx
.text:0040C593                 shl     esi, 4
.text:0040C596                 sub     esi, ecx
.text:0040C598                 sub     ebx, eax
.text:0040C59A                 lea     edx, [ebx+esi*4]
.text:0040C59D                 test    edx, edx
.text:0040C59F                 mov     [esp+59Ch+var_550], edx
.text:0040C5A3                 jns     loc_40C2EB
.text:0040C5A9                 lea     ebx, [edi-1]
.text:0040C5AC                 mov     ecx, [esp+59Ch+arg_4]
.text:0040C5B3                 mov     edx, ebx
.text:0040C5B5                 shr     edx, 1Fh
.text:0040C5B8                 mov     eax, [esp+59Ch+var_504]
.text:0040C5BF                 dec     edx
.text:0040C5C0                 and     edx, ebx
.text:0040C5C2                 lea     esi, [edx+1]
.text:0040C5C5                 sub     ecx, eax
.text:0040C5C7                 xor     edx, edx
.text:0040C5C9                 cmp     esi, ecx
.text:0040C5CB                 jnb     loc_40A9C7
.text:0040C5D1                 mov     eax, [esp+59Ch+var_508]
.text:0040C5D8                 test    eax, eax
.text:0040C5DA                 jz      short loc_40C61E
.text:0040C5DC                 test    ebx, ebx
.text:0040C5DE                 jle     short loc_40C60C
.text:0040C5E0                 cmp     [esp+59Ch+var_510], 30h ; '0'
.text:0040C5E8                 jz      short loc_40C62E
.text:0040C5EA                 mov     [esp+59Ch+State], ebx ; Size
.text:0040C5EE                 mov     eax, [esp+59Ch+var_508]
.text:0040C5F5                 mov     [esp+59Ch+SizeInBytes], 20h ; ' ' ; Val
.text:0040C5FD                 mov     [esp+59Ch+Str], eax ; void *
.text:0040C600
.text:0040C600 loc_40C600:                             ; CODE XREF: sub_40A870+1DD4↓j
.text:0040C600                 call    memset
.text:0040C605                 add     [esp+59Ch+var_508], ebx
.text:0040C60C
.text:0040C60C loc_40C60C:                             ; CODE XREF: sub_40A870+1D6E↑j
.text:0040C60C                 mov     ebx, [esp+59Ch+var_508]
.text:0040C613                 mov     byte ptr [ebx], 2Dh ; '-'
.text:0040C616                 inc     ebx
.text:0040C617                 mov     [esp+59Ch+var_508], ebx
.text:0040C61E
.text:0040C61E loc_40C61E:                             ; CODE XREF: sub_40A870+1D6A↑j
.text:0040C61E                 add     [esp+59Ch+var_504], esi
.text:0040C625                 neg     [esp+59Ch+var_550]
.text:0040C629                 jmp     loc_40C36B
.text:0040C62E ; ---------------------------------------------------------------------------
.text:0040C62E
.text:0040C62E loc_40C62E:                             ; CODE XREF: sub_40A870+1D78↑j
.text:0040C62E                 mov     [esp+59Ch+State], ebx
.text:0040C632                 mov     ecx, [esp+59Ch+var_508]
.text:0040C639                 mov     [esp+59Ch+SizeInBytes], 30h ; '0'
.text:0040C641                 mov     [esp+59Ch+Str], ecx
.text:0040C644                 jmp     short loc_40C600
.text:0040C646 ; ---------------------------------------------------------------------------
.text:0040C646
.text:0040C646 loc_40C646:                             ; CODE XREF: sub_40A870+1C36↑j
.text:0040C646                 mov     eax, [esp+59Ch+var_55C]
.text:0040C64A                 sar     eax, 2
.text:0040C64D                 add     eax, 1DBh
.text:0040C652                 jmp     loc_40C4B6
.text:0040C657 ; ---------------------------------------------------------------------------
.text:0040C657
.text:0040C657 loc_40C657:                             ; CODE XREF: sub_40A870+1C16↑j
.text:0040C657                 sar     eax, 2
.text:0040C65A                 add     eax, 1DBh
.text:0040C65F                 jmp     loc_40C494
.text:0040C664 ; ---------------------------------------------------------------------------
.text:0040C664
.text:0040C664 loc_40C664:                             ; CODE XREF: sub_40A870+1BEC↑j
.text:0040C664                 mov     [esp+59Ch+Str], ebx ; __time32_t *
.text:0040C667                 lea     edx, [esp+59Ch+var_4F0._Byte]
.text:0040C66E                 mov     [esp+59Ch+SizeInBytes], edx ; int
.text:0040C672                 call    sub_415420
.text:0040C677                 test    eax, eax
.text:0040C679                 jz      loc_40A98A
.text:0040C67F                 mov     ecx, [esp+59Ch+var_4BC.tm_sec]
.text:0040C686                 mov     eax, [esp+59Ch+var_4BC.tm_min]
.text:0040C68D                 mov     edx, dword ptr [esp+59Ch+var_4F0._Byte]
.text:0040C694                 mov     esi, [esp+59Ch+var_4E8]
.text:0040C69B                 xor     edx, ecx
.text:0040C69D                 xor     esi, eax
.text:0040C69F                 mov     ecx, [esp+59Ch+var_4E4]
.text:0040C6A6                 or      edx, esi
.text:0040C6A8                 mov     eax, [esp+59Ch+var_4BC.tm_hour]
.text:0040C6AF                 mov     esi, [esp+59Ch+var_4E0]
.text:0040C6B6                 xor     ecx, eax
.text:0040C6B8                 mov     eax, [esp+59Ch+var_4BC.tm_mday]
.text:0040C6BF                 or      edx, ecx
.text:0040C6C1                 mov     ecx, [esp+59Ch+var_4DC]
.text:0040C6C8                 xor     esi, eax
.text:0040C6CA                 mov     eax, [esp+59Ch+var_4BC.tm_mon]
.text:0040C6D1                 or      edx, esi
.text:0040C6D3                 mov     esi, [esp+59Ch+var_4D8]
.text:0040C6DA                 xor     ecx, eax
.text:0040C6DC                 mov     eax, [esp+59Ch+var_4BC.tm_year]
.text:0040C6E3                 or      edx, ecx
.text:0040C6E5                 xor     esi, eax
.text:0040C6E7                 or      edx, esi
.text:0040C6E9                 jnz     loc_40A98A
.text:0040C6EF                 jmp     loc_40C462
.text:0040C6F4 ; ---------------------------------------------------------------------------
.text:0040C6F4
.text:0040C6F4 loc_40C6F4:                             ; CODE XREF: sub_40A870+2F7↑j
.text:0040C6F4                                         ; sub_40A870+309↑j
.text:0040C6F4                 mov     [esp+59Ch+var_514], eax
.text:0040C6FB                 inc     ebp
.text:0040C6FC                 movzx   ecx, byte ptr [ebp+0]
.text:0040C700                 jmp     loc_40AB7F
.text:0040C705 ; ---------------------------------------------------------------------------
.text:0040C705
.text:0040C705 loc_40C705:                             ; CODE XREF: sub_40A870+2D1↑j
.text:0040C705                 movsx   esi, cl
.text:0040C708                 sub     esi, 30h ; '0'
.text:0040C70B                 cmp     esi, 7
.text:0040C70E                 jle     loc_40AB47
.text:0040C714
.text:0040C714 loc_40C714:                             ; CODE XREF: sub_40A870+2C5↑j
.text:0040C714                 mov     edi, 7FFFFFFFh
.text:0040C719                 jmp     loc_40AB51
.text:0040C719 ; ---------------------------------------------------------------------------
.text:0040C71E                 align 10h
.text:0040C720
.text:0040C720 loc_40C720:                             ; CODE XREF: sub_40A870+29B↑j
.text:0040C720                 mov     ebx, 1
.text:0040C725                 jmp     loc_40AAF0
.text:0040C725 ; ---------------------------------------------------------------------------
.text:0040C72A                 align 10h
.text:0040C730
.text:0040C730 loc_40C730:                             ; CODE XREF: sub_40A870+292↑j
.text:0040C730                 cmp     edx, 5Eh ; '^'
.text:0040C733                 jz      short loc_40C740
.text:0040C735                 cmp     edx, 5Fh ; '_'
.text:0040C738                 jmp     loc_40AB14
.text:0040C738 ; ---------------------------------------------------------------------------
.text:0040C73D                 align 10h
.text:0040C740
.text:0040C740 loc_40C740:                             ; CODE XREF: sub_40A870+1EC3↑j
.text:0040C740                 mov     [esp+59Ch+var_528], 1
.text:0040C748                 jmp     loc_40AAF0
.text:0040C748 ; ---------------------------------------------------------------------------
.text:0040C74D                 align 10h
.text:0040C750
.text:0040C750 loc_40C750:                             ; CODE XREF: sub_40A870+B0↑j
.text:0040C750                 cmp     eax, 41h ; 'A'
.text:0040C753                 jl      loc_40A9D4
.text:0040C759                 cmp     eax, 5Fh ; '_'
.text:0040C75C                 jle     loc_40A950
.text:0040C762                 sub     eax, 61h ; 'a'
.text:0040C765                 cmp     eax, 1Dh
.text:0040C768                 jmp     loc_40A93F
.text:0040C768 ; ---------------------------------------------------------------------------
.text:0040C76D                 align 10h
.text:0040C770
.text:0040C770 loc_40C770:                             ; CODE XREF: sub_40A870+67↑j
.text:0040C770                 mov     edx, [esp+59Ch+var_4FC]
.text:0040C777                 test    edx, edx
.text:0040C779                 jnz     loc_40A8E5
.text:0040C77F                 mov     ecx, 0Ch
.text:0040C784                 mov     [esp+59Ch+var_4FC], ecx
.text:0040C78B                 jmp     loc_40A8E5
.text:0040C790 ; ---------------------------------------------------------------------------
.text:0040C790
.text:0040C790 loc_40C790:                             ; CODE XREF: sub_40A870+4D↑j
.text:0040C790                 call    _tzset
.text:0040C795                 jmp     loc_40A8CF
.text:0040C795 sub_40A870      endp
.text:0040C795
.text:0040C795 ; ---------------------------------------------------------------------------
.text:0040C79A                 align 10h
.text:0040C7A0
.text:0040C7A0 ; =============== S U B R O U T I N E =======================================
.text:0040C7A0
.text:0040C7A0
.text:0040C7A0 sub_40C7A0      proc near               ; CODE XREF: sub_405490+34↑p
.text:0040C7A0                                         ; .text:0040C8EB↓j
.text:0040C7A0
.text:0040C7A0 arg_0           = word ptr  4
.text:0040C7A0 arg_4           = dword ptr  8
.text:0040C7A0
.text:0040C7A0                 push    ebx
.text:0040C7A1                 mov     eax, 62h ; 'b'
.text:0040C7A6                 mov     ebx, [esp+4+arg_4]
.text:0040C7AA                 movzx   edx, [esp+4+arg_0]
.text:0040C7AF                 mov     ecx, edx
.text:0040C7B1                 and     ecx, 0F000h
.text:0040C7B7                 cmp     ecx, 6000h
.text:0040C7BD                 jz      short loc_40C820
.text:0040C7BF                 cmp     ecx, 2000h
.text:0040C7C5                 mov     eax, 63h ; 'c'
.text:0040C7CA                 jz      short loc_40C820
.text:0040C7CC                 cmp     ecx, 4000h
.text:0040C7D2                 mov     eax, 64h ; 'd'
.text:0040C7D7                 jz      short loc_40C820
.text:0040C7D9                 cmp     ecx, 8000h
.text:0040C7DF                 mov     eax, 2Dh ; '-'
.text:0040C7E4                 jz      short loc_40C820
.text:0040C7E6                 cmp     ecx, 1000h
.text:0040C7EC                 mov     eax, 70h ; 'p'
.text:0040C7F1                 jz      short loc_40C820
.text:0040C7F3                 cmp     ecx, 0A000h
.text:0040C7F9                 mov     eax, 6Ch ; 'l'
.text:0040C7FE                 jz      short loc_40C820
.text:0040C800                 xor     eax, eax
.text:0040C802                 cmp     ecx, 0C000h
.text:0040C808                 setz    al
.text:0040C80B                 dec     eax
.text:0040C80C                 and     eax, 0FFFFFFCCh
.text:0040C80F                 add     eax, 73h ; 's'
.text:0040C812                 lea     esi, [esi+0]
.text:0040C819                 lea     edi, [edi+0]
.text:0040C820
.text:0040C820 loc_40C820:                             ; CODE XREF: sub_40C7A0+1D↑j
.text:0040C820                                         ; sub_40C7A0+2A↑j ...
.text:0040C820                 mov     [ebx], al
.text:0040C822                 test    dh, 1
.text:0040C825                 mov     al, 72h ; 'r'
.text:0040C827                 jnz     short loc_40C82B
.text:0040C829                 mov     al, 2Dh ; '-'
.text:0040C82B
.text:0040C82B loc_40C82B:                             ; CODE XREF: sub_40C7A0+87↑j
.text:0040C82B                 mov     [ebx+1], al
.text:0040C82E                 test    dl, dl
.text:0040C830                 mov     al, 77h ; 'w'
.text:0040C832                 js      short loc_40C836
.text:0040C834                 mov     al, 2Dh ; '-'
.text:0040C836
.text:0040C836 loc_40C836:                             ; CODE XREF: sub_40C7A0+92↑j
.text:0040C836                 mov     [ebx+2], al
.text:0040C839                 test    dl, 40h
.text:0040C83C                 mov     al, 78h ; 'x'
.text:0040C83E                 jnz     short loc_40C842
.text:0040C840                 mov     al, 2Dh ; '-'
.text:0040C842
.text:0040C842 loc_40C842:                             ; CODE XREF: sub_40C7A0+9E↑j
.text:0040C842                 mov     [ebx+3], al
.text:0040C845                 test    dl, 20h
.text:0040C848                 mov     al, 72h ; 'r'
.text:0040C84A                 jnz     short loc_40C84E
.text:0040C84C                 mov     al, 2Dh ; '-'
.text:0040C84E
.text:0040C84E loc_40C84E:                             ; CODE XREF: sub_40C7A0+AA↑j
.text:0040C84E                 mov     [ebx+4], al
.text:0040C851                 test    dl, 10h
.text:0040C854                 mov     al, 77h ; 'w'
.text:0040C856                 jnz     short loc_40C85A
.text:0040C858                 mov     al, 2Dh ; '-'
.text:0040C85A
.text:0040C85A loc_40C85A:                             ; CODE XREF: sub_40C7A0+B6↑j
.text:0040C85A                 mov     [ebx+5], al
.text:0040C85D                 test    dl, 8
.text:0040C860                 mov     al, 78h ; 'x'
.text:0040C862                 jnz     short loc_40C866
.text:0040C864                 mov     al, 2Dh ; '-'
.text:0040C866
.text:0040C866 loc_40C866:                             ; CODE XREF: sub_40C7A0+C2↑j
.text:0040C866                 mov     [ebx+6], al
.text:0040C869                 test    dl, 4
.text:0040C86C                 mov     al, 72h ; 'r'
.text:0040C86E                 jnz     short loc_40C872
.text:0040C870                 mov     al, 2Dh ; '-'
.text:0040C872
.text:0040C872 loc_40C872:                             ; CODE XREF: sub_40C7A0+CE↑j
.text:0040C872                 mov     [ebx+7], al
.text:0040C875                 test    dl, 2
.text:0040C878                 mov     al, 77h ; 'w'
.text:0040C87A                 jnz     short loc_40C87E
.text:0040C87C                 mov     al, 2Dh ; '-'
.text:0040C87E
.text:0040C87E loc_40C87E:                             ; CODE XREF: sub_40C7A0+DA↑j
.text:0040C87E                 mov     [ebx+8], al
.text:0040C881                 test    dl, 1
.text:0040C884                 mov     al, 78h ; 'x'
.text:0040C886                 jnz     short loc_40C88A
.text:0040C888                 mov     al, 2Dh ; '-'
.text:0040C88A
.text:0040C88A loc_40C88A:                             ; CODE XREF: sub_40C7A0+E6↑j
.text:0040C88A                 mov     [ebx+9], al
.text:0040C88D                 test    dh, 8
.text:0040C890                 jz      short loc_40C89C
.text:0040C892                 cmp     byte ptr [ebx+3], 78h ; 'x'
.text:0040C896                 jz      short loc_40C8D0
.text:0040C898                 mov     byte ptr [ebx+3], 53h ; 'S'
.text:0040C89C
.text:0040C89C loc_40C89C:                             ; CODE XREF: sub_40C7A0+F0↑j
.text:0040C89C                                         ; sub_40C7A0+134↓j
.text:0040C89C                 test    dh, 4
.text:0040C89F                 jz      short loc_40C8AB
.text:0040C8A1                 cmp     byte ptr [ebx+6], 78h ; 'x'
.text:0040C8A5                 jz      short loc_40C8C6
.text:0040C8A7                 mov     byte ptr [ebx+6], 53h ; 'S'
.text:0040C8AB
.text:0040C8AB loc_40C8AB:                             ; CODE XREF: sub_40C7A0+FF↑j
.text:0040C8AB                                         ; sub_40C7A0+12A↓j
.text:0040C8AB                 test    dh, 2
.text:0040C8AE                 jz      short loc_40C8BA
.text:0040C8B0                 cmp     byte ptr [ebx+9], 78h ; 'x'
.text:0040C8B4                 jz      short loc_40C8C0
.text:0040C8B6                 mov     byte ptr [ebx+9], 54h ; 'T'
.text:0040C8BA
.text:0040C8BA loc_40C8BA:                             ; CODE XREF: sub_40C7A0+10E↑j
.text:0040C8BA                                         ; sub_40C7A0+124↓j
.text:0040C8BA                 pop     ebx
.text:0040C8BB                 retn
.text:0040C8BB ; ---------------------------------------------------------------------------
.text:0040C8BC                 align 10h
.text:0040C8C0
.text:0040C8C0 loc_40C8C0:                             ; CODE XREF: sub_40C7A0+114↑j
.text:0040C8C0                 mov     byte ptr [ebx+9], 74h ; 't'
.text:0040C8C4                 jmp     short loc_40C8BA
.text:0040C8C6 ; ---------------------------------------------------------------------------
.text:0040C8C6
.text:0040C8C6 loc_40C8C6:                             ; CODE XREF: sub_40C7A0+105↑j
.text:0040C8C6                 mov     byte ptr [ebx+6], 73h ; 's'
.text:0040C8CA                 jmp     short loc_40C8AB
.text:0040C8CA ; ---------------------------------------------------------------------------
.text:0040C8CC                 align 10h
.text:0040C8D0
.text:0040C8D0 loc_40C8D0:                             ; CODE XREF: sub_40C7A0+F6↑j
.text:0040C8D0                 mov     byte ptr [ebx+3], 73h ; 's'
.text:0040C8D4                 jmp     short loc_40C89C
.text:0040C8D4 sub_40C7A0      endp
.text:0040C8D4
.text:0040C8D4 ; ---------------------------------------------------------------------------
.text:0040C8D6                 align 10h
.text:0040C8E0                 mov     ecx, [esp+4]
.text:0040C8E4                 movzx   edx, word ptr [ecx]
.text:0040C8E7                 mov     [esp+4], edx
.text:0040C8EB                 jmp     sub_40C7A0
.text:0040C8F0
.text:0040C8F0 ; =============== S U B R O U T I N E =======================================
.text:0040C8F0
.text:0040C8F0
.text:0040C8F0 ; int __cdecl sub_40C8F0(char *, int, char)
.text:0040C8F0 sub_40C8F0      proc near               ; CODE XREF: sub_405EA0+2C9↑p
.text:0040C8F0                                         ; sub_40A4F0+BB↑p ...
.text:0040C8F0
.text:0040C8F0 DstCh           = dword ptr -2Ch
.text:0040C8F0 SrcCh           = dword ptr -28h
.text:0040C8F0 SizeInBytes     = dword ptr -24h
.text:0040C8F0 State           = dword ptr -20h
.text:0040C8F0 var_19          = byte ptr -19h
.text:0040C8F0 var_18          = mbstate_t ptr -18h
.text:0040C8F0 arg_0           = dword ptr  4
.text:0040C8F0 arg_4           = dword ptr  8
.text:0040C8F0 arg_8           = byte ptr  0Ch
.text:0040C8F0
.text:0040C8F0                 push    ebp
.text:0040C8F1                 push    edi
.text:0040C8F2                 xor     edi, edi
.text:0040C8F4                 push    esi
.text:0040C8F5                 push    ebx
.text:0040C8F6                 sub     esp, 1Ch
.text:0040C8F9                 mov     ebx, [esp+2Ch+arg_0]
.text:0040C8FD                 mov     edx, [esp+2Ch+arg_4]
.text:0040C901                 mov     eax, ds:__mb_cur_max
.text:0040C906                 mov     ebp, ebx
.text:0040C908                 add     ebp, edx
.text:0040C90A                 cmp     dword ptr [eax], 1
.text:0040C90D                 jle     loc_40CA20
.text:0040C913                 cmp     ebx, ebp
.text:0040C915                 jnb     short loc_40C958
.text:0040C917                 mov     esi, esi
.text:0040C919                 lea     edi, [edi+0]
.text:0040C920
.text:0040C920 loc_40C920:                             ; CODE XREF: sub_40C8F0+66↓j
.text:0040C920                 movsx   eax, byte ptr [ebx]
.text:0040C923                 cmp     eax, 5Fh ; '_'
.text:0040C926                 jg      loc_40CA10
.text:0040C92C                 cmp     eax, 41h ; 'A'
.text:0040C92F                 jge     short loc_40C952
.text:0040C931                 cmp     eax, 20h ; ' '
.text:0040C934                 jl      short loc_40C962
.text:0040C936                 cmp     eax, 23h ; '#'
.text:0040C939                 jle     short loc_40C952
.text:0040C93B                 sub     eax, 25h ; '%'
.text:0040C93E                 cmp     eax, 1Ah
.text:0040C941                 jmp     short loc_40C950
.text:0040C941 ; ---------------------------------------------------------------------------
.text:0040C943                 align 10h
.text:0040C950
.text:0040C950 loc_40C950:                             ; CODE XREF: sub_40C8F0+51↑j
.text:0040C950                                         ; sub_40C8F0+126↓j
.text:0040C950                 ja      short loc_40C962
.text:0040C952
.text:0040C952 loc_40C952:                             ; CODE XREF: sub_40C8F0+3F↑j
.text:0040C952                                         ; sub_40C8F0+49↑j ...
.text:0040C952                 inc     ebx
.text:0040C953
.text:0040C953 loc_40C953:                             ; CODE XREF: sub_40C8F0+100↓j
.text:0040C953                 inc     edi
.text:0040C954
.text:0040C954 loc_40C954:                             ; CODE XREF: sub_40C8F0+C4↓j
.text:0040C954                 cmp     ebx, ebp
.text:0040C956                 jb      short loc_40C920
.text:0040C958
.text:0040C958 loc_40C958:                             ; CODE XREF: sub_40C8F0+25↑j
.text:0040C958                                         ; sub_40C8F0+132↓j ...
.text:0040C958                 mov     eax, edi
.text:0040C95A
.text:0040C95A loc_40C95A:                             ; CODE XREF: sub_40C8F0+D0↓j
.text:0040C95A                                         ; sub_40C8F0+F8↓j ...
.text:0040C95A                 add     esp, 1Ch
.text:0040C95D                 pop     ebx
.text:0040C95E                 pop     esi
.text:0040C95F                 pop     edi
.text:0040C960                 pop     ebp
.text:0040C961                 retn
.text:0040C962 ; ---------------------------------------------------------------------------
.text:0040C962
.text:0040C962 loc_40C962:                             ; CODE XREF: sub_40C8F0+44↑j
.text:0040C962                                         ; sub_40C8F0:loc_40C950↑j
.text:0040C962                 mov     [esp+2Ch+var_18._Wchar], 0
.text:0040C96A                 lea     esi, [esp+2Ch+var_18]
.text:0040C96E                 mov     ecx, ebp
.text:0040C970                 mov     [esp+2Ch+State], esi ; State
.text:0040C974                 sub     ecx, ebx
.text:0040C976                 lea     edx, [esp+2Ch+var_18._State]
.text:0040C97A                 mov     [esp+2Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040C97E                 mov     [esp+2Ch+SrcCh], ebx ; SrcCh
.text:0040C982                 mov     [esp+2Ch+DstCh], edx ; DstCh
.text:0040C985                 call    mbrtowc
.text:0040C98A                 cmp     eax, 0FFFFFFFFh
.text:0040C98D                 mov     esi, eax
.text:0040C98F                 jz      short loc_40C9F5
.text:0040C991                 cmp     eax, 0FFFFFFFEh
.text:0040C994                 jz      short loc_40C9DE
.text:0040C996                 test    eax, eax
.text:0040C998                 jnz     short loc_40C99F
.text:0040C99A                 mov     esi, 1
.text:0040C99F
.text:0040C99F loc_40C99F:                             ; CODE XREF: sub_40C8F0+A8↑j
.text:0040C99F                 movzx   edx, [esp+2Ch+var_18._State]
.text:0040C9A4                 mov     [esp+2Ch+DstCh], edx
.text:0040C9A7                 call    sub_419D10
.text:0040C9AC                 test    eax, eax
.text:0040C9AE                 js      short loc_40C9B6
.text:0040C9B0                 add     edi, eax
.text:0040C9B2
.text:0040C9B2 loc_40C9B2:                             ; CODE XREF: sub_40C8F0+E9↓j
.text:0040C9B2                                         ; sub_40C8F0+EC↓j
.text:0040C9B2                 add     ebx, esi
.text:0040C9B4                 jmp     short loc_40C954
.text:0040C9B6 ; ---------------------------------------------------------------------------
.text:0040C9B6
.text:0040C9B6 loc_40C9B6:                             ; CODE XREF: sub_40C8F0+BE↑j
.text:0040C9B6                 test    [esp+2Ch+arg_8], 2
.text:0040C9BB                 mov     eax, 0FFFFFFFFh
.text:0040C9C0                 jnz     short loc_40C95A
.text:0040C9C2                 movzx   ecx, [esp+2Ch+var_18._State]
.text:0040C9C7                 mov     [esp+2Ch+SrcCh], 20h ; ' ' ; Type
.text:0040C9CF                 mov     [esp+2Ch+DstCh], ecx ; C
.text:0040C9D2                 call    iswctype
.text:0040C9D7                 test    eax, eax
.text:0040C9D9                 jnz     short loc_40C9B2
.text:0040C9DB                 inc     edi
.text:0040C9DC                 jmp     short loc_40C9B2
.text:0040C9DE ; ---------------------------------------------------------------------------
.text:0040C9DE
.text:0040C9DE loc_40C9DE:                             ; CODE XREF: sub_40C8F0+A4↑j
.text:0040C9DE                 test    [esp+2Ch+arg_8], 1
.text:0040C9E3                 mov     eax, 0FFFFFFFFh
.text:0040C9E8                 jnz     loc_40C95A
.text:0040C9EE                 mov     ebx, ebp
.text:0040C9F0                 jmp     loc_40C953
.text:0040C9F5 ; ---------------------------------------------------------------------------
.text:0040C9F5
.text:0040C9F5 loc_40C9F5:                             ; CODE XREF: sub_40C8F0+9F↑j
.text:0040C9F5                 test    [esp+2Ch+arg_8], 1
.text:0040C9FA                 mov     eax, 0FFFFFFFFh
.text:0040C9FF                 jz      loc_40C952
.text:0040CA05                 jmp     loc_40C95A
.text:0040CA05 ; ---------------------------------------------------------------------------
.text:0040CA0A                 align 10h
.text:0040CA10
.text:0040CA10 loc_40CA10:                             ; CODE XREF: sub_40C8F0+36↑j
.text:0040CA10                 sub     eax, 61h ; 'a'
.text:0040CA13                 cmp     eax, 1Dh
.text:0040CA16                 jmp     loc_40C950
.text:0040CA16 ; ---------------------------------------------------------------------------
.text:0040CA1B                 align 10h
.text:0040CA20
.text:0040CA20 loc_40CA20:                             ; CODE XREF: sub_40C8F0+1D↑j
.text:0040CA20                 cmp     ebx, ebp
.text:0040CA22                 jnb     loc_40C958
.text:0040CA28                 nop
.text:0040CA29                 lea     esi, [esi+0]
.text:0040CA30
.text:0040CA30 loc_40CA30:                             ; CODE XREF: sub_40C8F0+1AE↓j
.text:0040CA30                 movzx   ecx, byte ptr [ebx]
.text:0040CA33                 inc     ebx
.text:0040CA34                 cmp     dword ptr [eax], 1
.text:0040CA37                 movzx   edx, cl
.text:0040CA3A                 mov     [esp+2Ch+var_19], cl
.text:0040CA3E                 jz      short loc_40CAB1
.text:0040CA40                 mov     [esp+2Ch+SrcCh], 157h ; Type
.text:0040CA48                 mov     [esp+2Ch+DstCh], edx ; C
.text:0040CA4B                 call    _isctype
.text:0040CA50
.text:0040CA50 loc_40CA50:                             ; CODE XREF: sub_40C8F0+1D2↓j
.text:0040CA50                 test    eax, eax
.text:0040CA52                 jnz     short loc_40CA90
.text:0040CA54                 test    [esp+2Ch+arg_8], 2
.text:0040CA59                 mov     eax, 0FFFFFFFFh
.text:0040CA5E                 jnz     loc_40C95A
.text:0040CA64                 movzx   edx, [esp+2Ch+var_19]
.text:0040CA69                 mov     esi, ds:__mb_cur_max
.text:0040CA6F                 cmp     dword ptr [esi], 1
.text:0040CA72                 jz      short loc_40CAA0
.text:0040CA74                 mov     [esp+2Ch+SrcCh], 20h ; ' ' ; Type
.text:0040CA7C                 mov     [esp+2Ch+DstCh], edx ; C
.text:0040CA7F                 call    _isctype
.text:0040CA84
.text:0040CA84 loc_40CA84:                             ; CODE XREF: sub_40C8F0+1BF↓j
.text:0040CA84                 test    eax, eax
.text:0040CA86                 jnz     short loc_40CA91
.text:0040CA88                 nop
.text:0040CA89                 lea     esi, [esi+0]
.text:0040CA90
.text:0040CA90 loc_40CA90:                             ; CODE XREF: sub_40C8F0+162↑j
.text:0040CA90                 inc     edi
.text:0040CA91
.text:0040CA91 loc_40CA91:                             ; CODE XREF: sub_40C8F0+196↑j
.text:0040CA91                 cmp     ebx, ebp
.text:0040CA93                 jnb     loc_40C958
.text:0040CA99                 mov     eax, ds:__mb_cur_max
.text:0040CA9E                 jmp     short loc_40CA30
.text:0040CAA0 ; ---------------------------------------------------------------------------
.text:0040CAA0
.text:0040CAA0 loc_40CAA0:                             ; CODE XREF: sub_40C8F0+182↑j
.text:0040CAA0                 mov     esi, ds:_pctype
.text:0040CAA6                 mov     ecx, [esi]
.text:0040CAA8                 movzx   eax, word ptr [ecx+edx*2]
.text:0040CAAC                 and     eax, 20h
.text:0040CAAF                 jmp     short loc_40CA84
.text:0040CAB1 ; ---------------------------------------------------------------------------
.text:0040CAB1
.text:0040CAB1 loc_40CAB1:                             ; CODE XREF: sub_40C8F0+14E↑j
.text:0040CAB1                 mov     ecx, ds:_pctype
.text:0040CAB7                 mov     esi, [ecx]
.text:0040CAB9                 movzx   eax, word ptr [esi+edx*2]
.text:0040CABD                 and     eax, 157h
.text:0040CAC2                 jmp     short loc_40CA50
.text:0040CAC2 sub_40C8F0      endp
.text:0040CAC2
.text:0040CAC2 ; ---------------------------------------------------------------------------
.text:0040CAC4                 align 10h
.text:0040CAD0
.text:0040CAD0 ; =============== S U B R O U T I N E =======================================
.text:0040CAD0
.text:0040CAD0
.text:0040CAD0 ; int __cdecl sub_40CAD0(char *, char)
.text:0040CAD0 sub_40CAD0      proc near               ; CODE XREF: sub_404500+28D↑p
.text:0040CAD0                                         ; sub_404500+375↑p ...
.text:0040CAD0
.text:0040CAD0 Str             = dword ptr -1Ch
.text:0040CAD0 var_18          = dword ptr -18h
.text:0040CAD0 var_14          = byte ptr -14h
.text:0040CAD0 var_4           = dword ptr -4
.text:0040CAD0 arg_0           = dword ptr  4
.text:0040CAD0 arg_4           = byte ptr  8
.text:0040CAD0
.text:0040CAD0                 sub     esp, 1Ch
.text:0040CAD3                 mov     [esp+1Ch+var_4], ebx
.text:0040CAD7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040CADB                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040CADE                 call    strlen
.text:0040CAE3                 mov     [esp+1Ch+var_18], eax ; int
.text:0040CAE7                 mov     ecx, dword ptr [esp+1Ch+arg_4]
.text:0040CAEB                 mov     [esp+1Ch+Str], ebx ; char *
.text:0040CAEE                 mov     dword ptr [esp+1Ch+var_14], ecx ; char
.text:0040CAF2                 call    sub_40C8F0
.text:0040CAF7                 mov     ebx, [esp+1Ch+var_4]
.text:0040CAFB                 add     esp, 1Ch
.text:0040CAFE                 retn
.text:0040CAFE sub_40CAD0      endp
.text:0040CAFE
.text:0040CAFE ; ---------------------------------------------------------------------------
.text:0040CAFF                 align 10h
.text:0040CB00 aLiteral        db 'literal',0          ; DATA XREF: .text:off_40CB40↓o
.text:0040CB08 aShell_0        db 'shell',0
.text:0040CB0E aShellAlways    db 'shell-always',0
.text:0040CB1B aC_0            db 'c',0
.text:0040CB1D aEscape_0       db 'escape',0
.text:0040CB24 aLocale_0       db 'locale',0
.text:0040CB2B aClocale        db 'clocale',0
.text:0040CB33                 align 10h
.text:0040CB40 off_40CB40      dd offset aLiteral      ; DATA XREF: sub_401B10+331↑r
.text:0040CB40                                         ; sub_4025F0+EB↑o ...
.text:0040CB40                                         ; "literal"
.text:0040CB44 ; ---------------------------------------------------------------------------
.text:0040CB44                 or      bl, cl
.text:0040CB46                 inc     eax
.text:0040CB47                 add     [esi], cl
.text:0040CB49                 retf
.text:0040CB4A ; ---------------------------------------------------------------------------
.text:0040CB4A                 inc     eax
.text:0040CB4B                 add     [ebx], bl
.text:0040CB4D                 retf
.text:0040CB4E ; ---------------------------------------------------------------------------
.text:0040CB4E                 inc     eax
.text:0040CB4F                 add     ds:240040CBh, bl
.text:0040CB55                 retf
.text:0040CB56 ; ---------------------------------------------------------------------------
.text:0040CB56                 inc     eax
.text:0040CB57                 add     [ebx], ch
.text:0040CB59                 retf
.text:0040CB59 ; ---------------------------------------------------------------------------
.text:0040CB5A                 dw 40h
.text:0040CB5C                 align 10h
.text:0040CB60 dword_40CB60    dd 0                    ; DATA XREF: sub_4025F0+E3↑o
.text:0040CB60                                         ; sub_4025F0+10A↑r ...
.text:0040CB64                 dd 1, 2, 3, 4, 5, 6
.text:0040CB7C asc_40CB7C:                             ; DATA XREF: sub_40CB90+7E↓o
.text:0040CB7C                                         ; sub_40CB90+A39↓o ...
.text:0040CB7C                 text "UTF-16LE", '"',27h,'`'
.text:0040CB82                 align 10h
.text:0040CB90
.text:0040CB90 ; =============== S U B R O U T I N E =======================================
.text:0040CB90
.text:0040CB90
.text:0040CB90 ; int __cdecl sub_40CB90(int, int, char *Str, int, int, int)
.text:0040CB90 sub_40CB90      proc near               ; CODE XREF: sub_40CB90+43A↓p
.text:0040CB90                                         ; sub_40D710+43↓p ...
.text:0040CB90
.text:0040CB90 C               = dword ptr -4Ch
.text:0040CB90 Type            = dword ptr -48h
.text:0040CB90 SizeInBytes     = dword ptr -44h
.text:0040CB90 State           = dword ptr -40h
.text:0040CB90 var_3C          = dword ptr -3Ch
.text:0040CB90 var_38          = dword ptr -38h
.text:0040CB90 var_34          = dword ptr -34h
.text:0040CB90 var_30          = dword ptr -30h
.text:0040CB90 var_29          = byte ptr -29h
.text:0040CB90 var_28          = dword ptr -28h
.text:0040CB90 var_22          = byte ptr -22h
.text:0040CB90 var_21          = byte ptr -21h
.text:0040CB90 var_20          = dword ptr -20h
.text:0040CB90 var_1C          = dword ptr -1Ch
.text:0040CB90 var_18          = mbstate_t ptr -18h
.text:0040CB90 arg_0           = dword ptr  4
.text:0040CB90 arg_4           = dword ptr  8
.text:0040CB90 Str             = dword ptr  0Ch
.text:0040CB90 arg_C           = dword ptr  10h
.text:0040CB90 arg_10          = dword ptr  14h
.text:0040CB90 arg_14          = dword ptr  18h
.text:0040CB90
.text:0040CB90                 push    ebp
.text:0040CB91                 push    edi
.text:0040CB92                 push    esi
.text:0040CB93                 push    ebx
.text:0040CB94                 sub     esp, 3Ch
.text:0040CB97                 mov     edx, ds:__mb_cur_max
.text:0040CB9D                 mov     [esp+4Ch+var_34], 0
.text:0040CBA5                 mov     [esp+4Ch+var_1C], 0
.text:0040CBAD                 cmp     dword ptr [edx], 1
.text:0040CBB0                 mov     [esp+4Ch+var_20], 0
.text:0040CBB8                 mov     [esp+4Ch+var_21], 0
.text:0040CBBD                 setz    [esp+4Ch+var_22]
.text:0040CBC2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040CBC7                 ja      short def_40CBCD ; jumptable 0040CBCD default case, cases 0,1
.text:0040CBC9                 mov     edx, [esp+4Ch+arg_10]
.text:0040CBCD                 jmp     ds:jpt_40CBCD[edx*4] ; switch jump
.text:0040CBCD ; ---------------------------------------------------------------------------
.text:0040CBD4 jpt_40CBCD      dd offset def_40CBCD    ; DATA XREF: sub_40CB90+3D↑r
.text:0040CBD4                 dd offset def_40CBCD    ; jump table for switch statement
.text:0040CBD4                 dd offset loc_40D515
.text:0040CBD4                 dd offset loc_40CBF0
.text:0040CBD4                 dd offset loc_40D53B
.text:0040CBD4                 dd offset loc_40D545
.text:0040CBD4                 dd offset loc_40D545
.text:0040CBF0 ; ---------------------------------------------------------------------------
.text:0040CBF0
.text:0040CBF0 loc_40CBF0:                             ; CODE XREF: sub_40CB90+3D↑j
.text:0040CBF0                                         ; DATA XREF: sub_40CB90:jpt_40CBCD↑o
.text:0040CBF0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040CBCD case 3
.text:0040CBF4                 cmp     [esp+4Ch+var_34], eax
.text:0040CBF8                 jnb     short loc_40CC01
.text:0040CBFA                 mov     ebx, [esp+4Ch+arg_0]
.text:0040CBFE                 mov     byte ptr [ebx], 22h ; '"'
.text:0040CC01
.text:0040CC01 loc_40CC01:                             ; CODE XREF: sub_40CB90+68↑j
.text:0040CC01                 mov     [esp+4Ch+var_34], 1
.text:0040CC09                 mov     [esp+4Ch+var_21], 1
.text:0040CC0E                 mov     [esp+4Ch+var_1C], offset asc_40CB7C ; "\"'`"
.text:0040CC16
.text:0040CC16 loc_40CC16:                             ; CODE XREF: sub_40CB90+9A6↓j
.text:0040CC16                 mov     [esp+4Ch+var_20], 1
.text:0040CC1E
.text:0040CC1E def_40CBCD:                             ; CODE XREF: sub_40CB90+37↑j
.text:0040CC1E                                         ; sub_40CB90+3D↑j ...
.text:0040CC1E                 xor     ebp, ebp        ; jumptable 0040CBCD default case, cases 0,1
.text:0040CC20
.text:0040CC20 loc_40CC20:                             ; CODE XREF: sub_40CB90+3DB↓j
.text:0040CC20                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040CC25                 jz      loc_40D507
.text:0040CC2B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040CC2F
.text:0040CC2F loc_40CC2F:                             ; CODE XREF: sub_40CB90+980↓j
.text:0040CC2F                 jz      loc_40D49E
.text:0040CC35                 cmp     [esp+4Ch+var_21], 0
.text:0040CC3A                 jz      short loc_40CC80
.text:0040CC3C                 mov     esi, [esp+4Ch+var_20]
.text:0040CC40                 test    esi, esi
.text:0040CC42                 jz      short loc_40CC80
.text:0040CC44                 mov     ecx, [esp+4Ch+var_20]
.text:0040CC48                 lea     edi, [ecx+ebp]
.text:0040CC4B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040CC4F                 ja      short loc_40CC80
.text:0040CC51                 cld
.text:0040CC52                 mov     ebx, [esp+4Ch+Str]
.text:0040CC56                 mov     edi, [esp+4Ch+var_1C]
.text:0040CC5A                 add     ebx, ebp
.text:0040CC5C                 mov     esi, ebx
.text:0040CC5E                 cmp     ecx, ecx
.text:0040CC60                 repe cmpsb
.text:0040CC62                 jnz     short loc_40CC80
.text:0040CC64                 mov     edx, [esp+4Ch+arg_4]
.text:0040CC68                 cmp     [esp+4Ch+var_34], edx
.text:0040CC6C                 jnb     short loc_40CC7A
.text:0040CC6E                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CC72                 mov     eax, [esp+4Ch+var_34]
.text:0040CC76                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040CC7A
.text:0040CC7A loc_40CC7A:                             ; CODE XREF: sub_40CB90+DC↑j
.text:0040CC7A                 inc     [esp+4Ch+var_34]
.text:0040CC7E                 mov     esi, esi
.text:0040CC80
.text:0040CC80 loc_40CC80:                             ; CODE XREF: sub_40CB90+AA↑j
.text:0040CC80                                         ; sub_40CB90+B2↑j ...
.text:0040CC80                 mov     edi, [esp+4Ch+Str]
.text:0040CC84                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040CC89                 movzx   eax, bl
.text:0040CC8C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040CC8F                 ja      def_40CC95      ; jumptable 0040CC95 default case, cases 1-6,14-31,64
.text:0040CC95                 jmp     ds:jpt_40CC95[eax*4] ; switch jump
.text:0040CC95 ; ---------------------------------------------------------------------------
.text:0040CC9C jpt_40CC95      dd offset loc_40CE98, offset def_40CC95, offset def_40CC95
.text:0040CC9C                                         ; DATA XREF: sub_40CB90+105↑r
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95 ; jump table for switch statement
.text:0040CC9C                 dd offset def_40CC95, offset loc_40CF70, offset loc_40CF8E
.text:0040CC9C                 dd offset loc_40CF92, offset loc_40CFD7, offset loc_40CFDB
.text:0040CC9C                 dd offset loc_40CFDF, offset loc_40CFE3, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset def_40CC95
.text:0040CC9C                 dd offset def_40CC95, offset def_40CC95, offset loc_40D468
.text:0040CC9C                 dd offset loc_40D468, offset loc_40D468, offset loc_40D48A
.text:0040CC9C                 dd offset loc_40D468, offset def_40D092, offset loc_40D468
.text:0040CC9C                 dd offset loc_40CFE7, offset loc_40D468, offset loc_40D468
.text:0040CC9C                 dd offset loc_40D468, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset loc_40D468
.text:0040CC9C                 dd offset loc_40D468, offset loc_40D468, offset loc_40D468
.text:0040CC9C                 dd offset loc_40D04C, offset def_40CC95, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset loc_40D468, offset loc_40D461
.text:0040CC9C                 dd offset def_40D092, offset loc_40D468, offset def_40D092
.text:0040CC9C                 dd offset loc_40D468, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset def_40D092, offset def_40D092, offset def_40D092
.text:0040CC9C                 dd offset loc_40D478, offset loc_40D468, offset loc_40D478
.text:0040CC9C                 dd offset loc_40D48A
.text:0040CE98 ; ---------------------------------------------------------------------------
.text:0040CE98
.text:0040CE98 loc_40CE98:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CE98                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CE98                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040CC95 case 0
.text:0040CE9D                 lea     eax, [ebp+1]
.text:0040CEA0                 jz      loc_40CF50
.text:0040CEA6                 mov     esi, [esp+4Ch+arg_4]
.text:0040CEAA                 cmp     [esp+4Ch+var_34], esi
.text:0040CEAE                 jnb     short loc_40CEBC
.text:0040CEB0                 mov     eax, [esp+4Ch+arg_0]
.text:0040CEB4                 mov     ebx, [esp+4Ch+var_34]
.text:0040CEB8                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040CEBC
.text:0040CEBC loc_40CEBC:                             ; CODE XREF: sub_40CB90+31E↑j
.text:0040CEBC                 inc     [esp+4Ch+var_34]
.text:0040CEC0                 mov     edx, [esp+4Ch+arg_4]
.text:0040CEC4                 cmp     [esp+4Ch+var_34], edx
.text:0040CEC8                 jnb     short loc_40CED6
.text:0040CECA                 mov     edi, [esp+4Ch+arg_0]
.text:0040CECE                 mov     ecx, [esp+4Ch+var_34]
.text:0040CED2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040CED6
.text:0040CED6 loc_40CED6:                             ; CODE XREF: sub_40CB90+338↑j
.text:0040CED6                 inc     [esp+4Ch+var_34]
.text:0040CEDA                 mov     esi, [esp+4Ch+arg_4]
.text:0040CEDE                 cmp     [esp+4Ch+var_34], esi
.text:0040CEE2                 jnb     short loc_40CEF0
.text:0040CEE4                 mov     ebx, [esp+4Ch+arg_0]
.text:0040CEE8                 mov     eax, [esp+4Ch+var_34]
.text:0040CEEC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040CEF0
.text:0040CEF0 loc_40CEF0:                             ; CODE XREF: sub_40CB90+352↑j
.text:0040CEF0                 inc     [esp+4Ch+var_34]
.text:0040CEF4                 mov     bl, 30h ; '0'
.text:0040CEF6                 lea     esi, [esi+0]
.text:0040CEF9                 lea     edi, [edi+0]
.text:0040CF00
.text:0040CF00 def_40D092:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CF00                                         ; sub_40CB90+463↓j ...
.text:0040CF00                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040CF00                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040CF05                 lea     eax, [ebp+1]
.text:0040CF08                 jz      short loc_40CF50
.text:0040CF0A                 mov     cl, bl
.text:0040CF0C                 mov     edi, [esp+4Ch+arg_14]
.text:0040CF10                 mov     esi, 1
.text:0040CF15                 shr     cl, 5
.text:0040CF18                 movzx   edx, cl
.text:0040CF1B                 mov     ecx, ebx
.text:0040CF1D                 and     ecx, 1Fh
.text:0040CF20                 shl     esi, cl
.text:0040CF22                 test    [edi+edx*4+4], esi
.text:0040CF26                 jz      short loc_40CF42
.text:0040CF28
.text:0040CF28 loc_40CF28:                             ; CODE XREF: sub_40CB90+3FC↓j
.text:0040CF28                 mov     edx, [esp+4Ch+arg_4]
.text:0040CF2C                 cmp     [esp+4Ch+var_34], edx
.text:0040CF30                 jnb     short loc_40CF3E
.text:0040CF32                 mov     edi, [esp+4Ch+arg_0]
.text:0040CF36                 mov     esi, [esp+4Ch+var_34]
.text:0040CF3A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040CF3E
.text:0040CF3E loc_40CF3E:                             ; CODE XREF: sub_40CB90+3A0↑j
.text:0040CF3E                 inc     [esp+4Ch+var_34]
.text:0040CF42
.text:0040CF42 loc_40CF42:                             ; CODE XREF: sub_40CB90+396↑j
.text:0040CF42                 lea     eax, [ebp+1]
.text:0040CF45                 lea     esi, [esi+0]
.text:0040CF49                 lea     edi, [edi+0]
.text:0040CF50
.text:0040CF50 loc_40CF50:                             ; CODE XREF: sub_40CB90+310↑j
.text:0040CF50                                         ; sub_40CB90+378↑j ...
.text:0040CF50                 mov     ebp, [esp+4Ch+arg_4]
.text:0040CF54                 cmp     [esp+4Ch+var_34], ebp
.text:0040CF58                 jnb     short loc_40CF65
.text:0040CF5A                 mov     edx, [esp+4Ch+arg_0]
.text:0040CF5E                 mov     ecx, [esp+4Ch+var_34]
.text:0040CF62                 mov     [ecx+edx], bl
.text:0040CF65
.text:0040CF65 loc_40CF65:                             ; CODE XREF: sub_40CB90+3C8↑j
.text:0040CF65                 inc     [esp+4Ch+var_34]
.text:0040CF69                 mov     ebp, eax
.text:0040CF6B                 jmp     loc_40CC20
.text:0040CF70 ; ---------------------------------------------------------------------------
.text:0040CF70
.text:0040CF70 loc_40CF70:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CF70                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CF70                 mov     dl, 61h ; 'a'   ; jumptable 0040CC95 case 7
.text:0040CF72                 lea     esi, [esi+0]
.text:0040CF79                 lea     edi, [edi+0]
.text:0040CF80
.text:0040CF80 loc_40CF80:                             ; CODE XREF: sub_40CB90+400↓j
.text:0040CF80                                         ; sub_40CB90+409↓j ...
.text:0040CF80                 cmp     [esp+4Ch+var_21], 0
.text:0040CF85                 lea     eax, [ebp+1]
.text:0040CF88                 jz      short loc_40CF50
.text:0040CF8A                 mov     bl, dl
.text:0040CF8C                 jmp     short loc_40CF28
.text:0040CF8E ; ---------------------------------------------------------------------------
.text:0040CF8E
.text:0040CF8E loc_40CF8E:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CF8E                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CF8E                 mov     dl, 62h ; 'b'   ; jumptable 0040CC95 case 8
.text:0040CF90                 jmp     short loc_40CF80
.text:0040CF92 ; ---------------------------------------------------------------------------
.text:0040CF92
.text:0040CF92 loc_40CF92:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CF92                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CF92                 mov     dl, 74h ; 't'   ; jumptable 0040CC95 case 9
.text:0040CF94
.text:0040CF94 loc_40CF94:                             ; CODE XREF: sub_40CB90+449↓j
.text:0040CF94                                         ; sub_40CB90+455↓j ...
.text:0040CF94                 cmp     [esp+4Ch+arg_10], 1
.text:0040CF99                 jnz     short loc_40CF80
.text:0040CF9B
.text:0040CF9B loc_40CF9B:                             ; CODE XREF: sub_40CB90+45C↓j
.text:0040CF9B                                         ; sub_40CB90+4C1↓j ...
.text:0040CF9B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040D362 cases 91,92,94,96,124
.text:0040CFA3                 mov     eax, [esp+4Ch+arg_14]
.text:0040CFA7                 mov     edx, [esp+4Ch+arg_C]
.text:0040CFAB                 mov     ecx, [esp+4Ch+Str]
.text:0040CFAF                 mov     ebx, [esp+4Ch+arg_4]
.text:0040CFB3                 mov     [esp+4Ch+var_38], eax ; int
.text:0040CFB7                 mov     ebp, [esp+4Ch+arg_0]
.text:0040CFBB                 mov     [esp+4Ch+State], edx ; int
.text:0040CFBF                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040CFC3                 mov     [esp+4Ch+Type], ebx ; int
.text:0040CFC7                 mov     [esp+4Ch+C], ebp ; int
.text:0040CFCA                 call    sub_40CB90
.text:0040CFCF
.text:0040CFCF loc_40CFCF:                             ; CODE XREF: sub_40CB90+972↓j
.text:0040CFCF                 add     esp, 3Ch
.text:0040CFD2                 pop     ebx
.text:0040CFD3                 pop     esi
.text:0040CFD4                 pop     edi
.text:0040CFD5                 pop     ebp
.text:0040CFD6                 retn
.text:0040CFD7 ; ---------------------------------------------------------------------------
.text:0040CFD7
.text:0040CFD7 loc_40CFD7:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CFD7                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CFD7                 mov     dl, 6Eh ; 'n'   ; jumptable 0040CC95 case 10
.text:0040CFD9                 jmp     short loc_40CF94
.text:0040CFDB ; ---------------------------------------------------------------------------
.text:0040CFDB
.text:0040CFDB loc_40CFDB:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CFDB                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CFDB                 mov     dl, 76h ; 'v'   ; jumptable 0040CC95 case 11
.text:0040CFDD                 jmp     short loc_40CF80
.text:0040CFDF ; ---------------------------------------------------------------------------
.text:0040CFDF
.text:0040CFDF loc_40CFDF:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CFDF                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CFDF                 mov     dl, 66h ; 'f'   ; jumptable 0040CC95 case 12
.text:0040CFE1                 jmp     short loc_40CF80
.text:0040CFE3 ; ---------------------------------------------------------------------------
.text:0040CFE3
.text:0040CFE3 loc_40CFE3:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CFE3                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CFE3                 mov     dl, 72h ; 'r'   ; jumptable 0040CC95 case 13
.text:0040CFE5                 jmp     short loc_40CF94
.text:0040CFE7 ; ---------------------------------------------------------------------------
.text:0040CFE7
.text:0040CFE7 loc_40CFE7:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040CFE7                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040CFE7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040CC95 case 39
.text:0040CFEC                 jz      short loc_40CF9B ; jumptable 0040D362 cases 91,92,94,96,124
.text:0040CFEE                 cmp     [esp+4Ch+arg_10], 2
.text:0040CFF3                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040CFF3                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040CFF9                 mov     edx, [esp+4Ch+arg_4]
.text:0040CFFD                 cmp     [esp+4Ch+var_34], edx
.text:0040D001                 jnb     short loc_40D00F
.text:0040D003                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D007                 mov     edi, [esp+4Ch+var_34]
.text:0040D00B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040D00F
.text:0040D00F loc_40D00F:                             ; CODE XREF: sub_40CB90+471↑j
.text:0040D00F                 inc     [esp+4Ch+var_34]
.text:0040D013                 mov     eax, [esp+4Ch+arg_4]
.text:0040D017                 cmp     [esp+4Ch+var_34], eax
.text:0040D01B                 jnb     short loc_40D029
.text:0040D01D                 mov     esi, [esp+4Ch+arg_0]
.text:0040D021                 mov     edx, [esp+4Ch+var_34]
.text:0040D025                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040D029
.text:0040D029 loc_40D029:                             ; CODE XREF: sub_40CB90+48B↑j
.text:0040D029                 inc     [esp+4Ch+var_34]
.text:0040D02D                 mov     edi, [esp+4Ch+arg_4]
.text:0040D031                 cmp     [esp+4Ch+var_34], edi
.text:0040D035                 jnb     short loc_40D043
.text:0040D037                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D03B                 mov     eax, [esp+4Ch+var_34]
.text:0040D03F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040D043
.text:0040D043 loc_40D043:                             ; CODE XREF: sub_40CB90+4A5↑j
.text:0040D043                                         ; sub_40CB90+5C4↓j ...
.text:0040D043                 inc     [esp+4Ch+var_34]
.text:0040D047                 jmp     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D047                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D04C ; ---------------------------------------------------------------------------
.text:0040D04C
.text:0040D04C loc_40D04C:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040D04C                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040D04C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040CC95 case 63
.text:0040D051                 jz      loc_40CF9B      ; jumptable 0040D362 cases 91,92,94,96,124
.text:0040D057                 cmp     [esp+4Ch+arg_10], 3
.text:0040D05C                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D05C                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D062                 lea     edx, [ebp+2]
.text:0040D065                 cmp     edx, [esp+4Ch+arg_C]
.text:0040D069                 jnb     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D069                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D06F                 mov     esi, [esp+4Ch+Str]
.text:0040D073                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040D078                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D078                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D07E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040D083                 movsx   eax, cl
.text:0040D086                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040D089                 cmp     eax, 1Dh
.text:0040D08C                 ja      def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D08C                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D092                 jmp     ds:jpt_40D092[eax*4] ; switch jump
.text:0040D092 ; ---------------------------------------------------------------------------
.text:0040D099                 align 4
.text:0040D09C jpt_40D092      dd offset loc_40D114    ; DATA XREF: sub_40CB90+502↑r
.text:0040D09C                 dd offset def_40D092    ; jump table for switch statement
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset def_40D092
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset loc_40D114
.text:0040D09C                 dd offset loc_40D114
.text:0040D114 ; ---------------------------------------------------------------------------
.text:0040D114
.text:0040D114 loc_40D114:                             ; CODE XREF: sub_40CB90+502↑j
.text:0040D114                                         ; DATA XREF: sub_40CB90:jpt_40D092↑o
.text:0040D114                 mov     ebp, edx        ; jumptable 0040D092 cases 33,39-41,45,47,60-62
.text:0040D116                 mov     bl, cl
.text:0040D118                 mov     edx, [esp+4Ch+arg_4]
.text:0040D11C                 cmp     [esp+4Ch+var_34], edx
.text:0040D120                 jnb     short loc_40D12E
.text:0040D122                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D126                 mov     edi, [esp+4Ch+var_34]
.text:0040D12A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040D12E
.text:0040D12E loc_40D12E:                             ; CODE XREF: sub_40CB90+590↑j
.text:0040D12E                 inc     [esp+4Ch+var_34]
.text:0040D132                 mov     eax, [esp+4Ch+arg_4]
.text:0040D136                 cmp     [esp+4Ch+var_34], eax
.text:0040D13A                 jnb     short loc_40D148
.text:0040D13C                 mov     edx, [esp+4Ch+arg_0]
.text:0040D140                 mov     esi, [esp+4Ch+var_34]
.text:0040D144                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040D148
.text:0040D148 loc_40D148:                             ; CODE XREF: sub_40CB90+5AA↑j
.text:0040D148                 inc     [esp+4Ch+var_34]
.text:0040D14C                 mov     edi, [esp+4Ch+arg_4]
.text:0040D150                 cmp     [esp+4Ch+var_34], edi
.text:0040D154                 jnb     loc_40D043
.text:0040D15A                 mov     eax, [esp+4Ch+arg_0]
.text:0040D15E                 mov     ecx, [esp+4Ch+var_34]
.text:0040D162                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040D166                 jmp     loc_40D043
.text:0040D166 ; ---------------------------------------------------------------------------
.text:0040D16B                 align 10h
.text:0040D170
.text:0040D170 def_40CC95:                             ; CODE XREF: sub_40CB90+FF↑j
.text:0040D170                                         ; sub_40CB90+105↑j
.text:0040D170                                         ; DATA XREF: ...
.text:0040D170                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040CC95 default case, cases 1-6,14-31,64
.text:0040D175                 jz      loc_40D2A0
.text:0040D17B                 mov     [esp+4Ch+var_28], 1
.text:0040D183                 mov     esi, ds:__mb_cur_max
.text:0040D189                 movzx   edx, bl
.text:0040D18C                 cmp     dword ptr [esi], 1
.text:0040D18F                 jz      loc_40D284
.text:0040D195                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040D19D                 mov     [esp+4Ch+C], edx ; C
.text:0040D1A0                 call    _isctype
.text:0040D1A5
.text:0040D1A5 loc_40D1A5:                             ; CODE XREF: sub_40CB90+705↓j
.text:0040D1A5                 test    eax, eax
.text:0040D1A7                 setnz   [esp+4Ch+var_29]
.text:0040D1AC
.text:0040D1AC loc_40D1AC:                             ; CODE XREF: sub_40CB90+7A5↓j
.text:0040D1AC                 cmp     [esp+4Ch+var_21], 0
.text:0040D1B1                 lea     eax, [ebp+1]
.text:0040D1B4                 jz      loc_40CF50
.text:0040D1BA                 cmp     [esp+4Ch+var_29], 0
.text:0040D1BF                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D1BF                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D1C5
.text:0040D1C5 loc_40D1C5:                             ; CODE XREF: sub_40CB90+7AB↓j
.text:0040D1C5                 mov     eax, [esp+4Ch+var_28]
.text:0040D1C9                 lea     edx, [eax+ebp]
.text:0040D1CC                 lea     esi, [esi+0]
.text:0040D1D0
.text:0040D1D0 loc_40D1D0:                             ; CODE XREF: sub_40CB90+6EF↓j
.text:0040D1D0                 cmp     [esp+4Ch+var_21], 0
.text:0040D1D5                 jz      short loc_40D250
.text:0040D1D7                 cmp     [esp+4Ch+var_29], 0
.text:0040D1DC                 jnz     short loc_40D250
.text:0040D1DE                 mov     edi, [esp+4Ch+arg_4]
.text:0040D1E2                 cmp     [esp+4Ch+var_34], edi
.text:0040D1E6                 jnb     short loc_40D1F4
.text:0040D1E8                 mov     esi, [esp+4Ch+arg_0]
.text:0040D1EC                 mov     eax, [esp+4Ch+var_34]
.text:0040D1F0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040D1F4
.text:0040D1F4 loc_40D1F4:                             ; CODE XREF: sub_40CB90+656↑j
.text:0040D1F4                 inc     [esp+4Ch+var_34]
.text:0040D1F8                 mov     ecx, [esp+4Ch+arg_4]
.text:0040D1FC                 cmp     [esp+4Ch+var_34], ecx
.text:0040D200                 jnb     short loc_40D215
.text:0040D202                 mov     cl, bl
.text:0040D204                 mov     esi, [esp+4Ch+arg_0]
.text:0040D208                 mov     edi, [esp+4Ch+var_34]
.text:0040D20C                 shr     cl, 6
.text:0040D20F                 add     cl, 30h ; '0'
.text:0040D212                 mov     [edi+esi], cl
.text:0040D215
.text:0040D215 loc_40D215:                             ; CODE XREF: sub_40CB90+670↑j
.text:0040D215                 inc     [esp+4Ch+var_34]
.text:0040D219                 mov     edi, [esp+4Ch+arg_4]
.text:0040D21D                 cmp     [esp+4Ch+var_34], edi
.text:0040D221                 jnb     short loc_40D239
.text:0040D223                 mov     cl, bl
.text:0040D225                 mov     esi, [esp+4Ch+arg_0]
.text:0040D229                 shr     cl, 3
.text:0040D22C                 mov     edi, [esp+4Ch+var_34]
.text:0040D230                 and     cl, 7
.text:0040D233                 add     cl, 30h ; '0'
.text:0040D236                 mov     [edi+esi], cl
.text:0040D239
.text:0040D239 loc_40D239:                             ; CODE XREF: sub_40CB90+691↑j
.text:0040D239                 inc     [esp+4Ch+var_34]
.text:0040D23D                 and     bl, 7
.text:0040D240                 add     bl, 30h ; '0'
.text:0040D243                 lea     esi, [esi+0]
.text:0040D249                 lea     edi, [edi+0]
.text:0040D250
.text:0040D250 loc_40D250:                             ; CODE XREF: sub_40CB90+645↑j
.text:0040D250                                         ; sub_40CB90+64C↑j
.text:0040D250                 lea     eax, [ebp+1]
.text:0040D253                 cmp     edx, eax
.text:0040D255                 jbe     loc_40CF50
.text:0040D25B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040D25F                 cmp     [esp+4Ch+var_34], ebp
.text:0040D263                 jnb     short loc_40D270
.text:0040D265                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D269                 mov     edi, [esp+4Ch+var_34]
.text:0040D26D                 mov     [edi+ecx], bl
.text:0040D270
.text:0040D270 loc_40D270:                             ; CODE XREF: sub_40CB90+6D3↑j
.text:0040D270                 inc     [esp+4Ch+var_34]
.text:0040D274                 mov     ebp, eax
.text:0040D276                 mov     eax, [esp+4Ch+Str]
.text:0040D27A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040D27F                 jmp     loc_40D1D0
.text:0040D284 ; ---------------------------------------------------------------------------
.text:0040D284
.text:0040D284 loc_40D284:                             ; CODE XREF: sub_40CB90+5FF↑j
.text:0040D284                 mov     ecx, ds:_pctype
.text:0040D28A                 mov     edi, [ecx]
.text:0040D28C                 movzx   eax, word ptr [edi+edx*2]
.text:0040D290                 and     eax, 157h
.text:0040D295                 jmp     loc_40D1A5
.text:0040D295 ; ---------------------------------------------------------------------------
.text:0040D29A                 align 10h
.text:0040D2A0
.text:0040D2A0 loc_40D2A0:                             ; CODE XREF: sub_40CB90+5E5↑j
.text:0040D2A0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040D2A5                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040D2AD                 mov     [esp+4Ch+var_28], 0
.text:0040D2B5                 mov     [esp+4Ch+var_29], 1
.text:0040D2BA                 jz      loc_40D44C
.text:0040D2C0
.text:0040D2C0 loc_40D2C0:                             ; CODE XREF: sub_40CB90+8CC↓j
.text:0040D2C0                 mov     ecx, [esp+4Ch+arg_C]
.text:0040D2C4                 lea     edx, [esp+4Ch+var_18]
.text:0040D2C8                 mov     edi, [esp+4Ch+Str]
.text:0040D2CC                 mov     [esp+4Ch+State], edx ; State
.text:0040D2D0                 lea     esi, [esp+4Ch+var_18._State]
.text:0040D2D4                 sub     ecx, ebp
.text:0040D2D6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040D2DA                 add     edi, ebp
.text:0040D2DC                 mov     [esp+4Ch+var_30], edi
.text:0040D2E0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040D2E4                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040D2E7                 call    mbrtowc
.text:0040D2EC                 test    eax, eax
.text:0040D2EE                 mov     edi, eax
.text:0040D2F0                 jz      short loc_40D330
.text:0040D2F2                 cmp     eax, 0FFFFFFFFh
.text:0040D2F5                 jz      loc_40D442
.text:0040D2FB                 cmp     eax, 0FFFFFFFEh
.text:0040D2FE                 jz      loc_40D402
.text:0040D304                 cmp     [esp+4Ch+arg_10], 1
.text:0040D309                 jz      short loc_40D340
.text:0040D30B
.text:0040D30B loc_40D30B:                             ; CODE XREF: sub_40CB90+7B9↓j
.text:0040D30B                                         ; sub_40CB90+86D↓j
.text:0040D30B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040D310                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040D318                 mov     [esp+4Ch+C], ecx ; C
.text:0040D31B                 call    iswctype
.text:0040D320                 test    eax, eax
.text:0040D322                 jnz     short loc_40D329
.text:0040D324                 mov     [esp+4Ch+var_29], 0
.text:0040D329
.text:0040D329 loc_40D329:                             ; CODE XREF: sub_40CB90+792↑j
.text:0040D329                 mov     [esp+4Ch+var_28], edi
.text:0040D32D                 lea     esi, [esi+0]
.text:0040D330
.text:0040D330 loc_40D330:                             ; CODE XREF: sub_40CB90+760↑j
.text:0040D330                                         ; sub_40CB90+87B↓j ...
.text:0040D330                 cmp     [esp+4Ch+var_28], 1
.text:0040D335                 jbe     loc_40D1AC
.text:0040D33B                 jmp     loc_40D1C5
.text:0040D340 ; ---------------------------------------------------------------------------
.text:0040D340
.text:0040D340 loc_40D340:                             ; CODE XREF: sub_40CB90+779↑j
.text:0040D340                 cmp     [esp+4Ch+arg_10], eax
.text:0040D344                 mov     edx, 1
.text:0040D349                 jnb     short loc_40D30B
.text:0040D34B
.text:0040D34B loc_40D34B:                             ; CODE XREF: sub_40CB90+867↓j
.text:0040D34B                 mov     ecx, [esp+4Ch+Str]
.text:0040D34F                 lea     esi, [edx+ebp]
.text:0040D352                 movsx   eax, byte ptr [esi+ecx]
.text:0040D356                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040D359                 cmp     eax, 21h
.text:0040D35C                 ja      def_40D362      ; jumptable 0040D362 default case, cases 93,95,97-123
.text:0040D362                 jmp     ds:jpt_40D362[eax*4] ; switch jump
.text:0040D362 ; ---------------------------------------------------------------------------
.text:0040D369                 align 4
.text:0040D36C jpt_40D362      dd offset loc_40CF9B    ; DATA XREF: sub_40CB90+7D2↑r
.text:0040D36C                 dd offset loc_40CF9B    ; jump table for switch statement
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset loc_40CF9B
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset loc_40CF9B
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset def_40D362
.text:0040D36C                 dd offset loc_40CF9B
.text:0040D3F4 ; ---------------------------------------------------------------------------
.text:0040D3F4
.text:0040D3F4 def_40D362:                             ; CODE XREF: sub_40CB90+7CC↑j
.text:0040D3F4                                         ; sub_40CB90+7D2↑j
.text:0040D3F4                                         ; DATA XREF: ...
.text:0040D3F4                 inc     edx             ; jumptable 0040D362 default case, cases 93,95,97-123
.text:0040D3F5                 cmp     edx, edi
.text:0040D3F7                 jb      loc_40D34B
.text:0040D3FD                 jmp     loc_40D30B
.text:0040D402 ; ---------------------------------------------------------------------------
.text:0040D402
.text:0040D402 loc_40D402:                             ; CODE XREF: sub_40CB90+76E↑j
.text:0040D402                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040D406                 mov     [esp+4Ch+var_29], 0
.text:0040D40B                 jnb     loc_40D330
.text:0040D411                 mov     eax, [esp+4Ch+var_30]
.text:0040D415                 cmp     byte ptr [eax], 0
.text:0040D418                 jz      loc_40D330
.text:0040D41E
.text:0040D41E loc_40D41E:                             ; CODE XREF: sub_40CB90+8AB↓j
.text:0040D41E                 inc     [esp+4Ch+var_28]
.text:0040D422                 mov     esi, [esp+4Ch+var_28]
.text:0040D426                 lea     eax, [esi+ebp]
.text:0040D429                 cmp     eax, [esp+4Ch+arg_C]
.text:0040D42D                 jnb     loc_40D330
.text:0040D433                 mov     edi, [esp+4Ch+Str]
.text:0040D437                 cmp     byte ptr [eax+edi], 0
.text:0040D43B                 jnz     short loc_40D41E
.text:0040D43D                 jmp     loc_40D330
.text:0040D442 ; ---------------------------------------------------------------------------
.text:0040D442
.text:0040D442 loc_40D442:                             ; CODE XREF: sub_40CB90+765↑j
.text:0040D442                 mov     [esp+4Ch+var_29], 0
.text:0040D447                 jmp     loc_40D330
.text:0040D44C ; ---------------------------------------------------------------------------
.text:0040D44C
.text:0040D44C loc_40D44C:                             ; CODE XREF: sub_40CB90+72A↑j
.text:0040D44C                 mov     edx, [esp+4Ch+Str]
.text:0040D450                 mov     [esp+4Ch+C], edx ; Str
.text:0040D453                 call    strlen
.text:0040D458                 mov     [esp+4Ch+arg_C], eax
.text:0040D45C                 jmp     loc_40D2C0
.text:0040D461 ; ---------------------------------------------------------------------------
.text:0040D461
.text:0040D461 loc_40D461:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040D461                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040D461                 mov     dl, bl          ; jumptable 0040CC95 case 92
.text:0040D463                 jmp     loc_40CF94
.text:0040D468 ; ---------------------------------------------------------------------------
.text:0040D468
.text:0040D468 loc_40D468:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040D468                                         ; sub_40CB90+902↓j
.text:0040D468                                         ; DATA XREF: ...
.text:0040D468                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040CC95 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040D46D                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D46D                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D473                 jmp     loc_40CF9B      ; jumptable 0040D362 cases 91,92,94,96,124
.text:0040D478 ; ---------------------------------------------------------------------------
.text:0040D478
.text:0040D478 loc_40D478:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040D478                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040D478                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040CC95 cases 123,125
.text:0040D47D                 jz      short loc_40D494
.text:0040D47F                 cmp     [esp+4Ch+arg_C], 1
.text:0040D484
.text:0040D484 loc_40D484:                             ; CODE XREF: sub_40CB90+90C↓j
.text:0040D484                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D484                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D48A
.text:0040D48A loc_40D48A:                             ; CODE XREF: sub_40CB90+105↑j
.text:0040D48A                                         ; DATA XREF: sub_40CB90:jpt_40CC95↑o
.text:0040D48A                 test    ebp, ebp        ; jumptable 0040CC95 cases 35,126
.text:0040D48C                 jnz     def_40D092      ; jumptable 0040CC95 cases 37,43-58,65-90,93,95,97-122
.text:0040D48C                                         ; jumptable 0040D092 default case, cases 34-38,42-44,46,48-59
.text:0040D492                 jmp     short loc_40D468 ; jumptable 0040CC95 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040D494 ; ---------------------------------------------------------------------------
.text:0040D494
.text:0040D494 loc_40D494:                             ; CODE XREF: sub_40CB90+8ED↑j
.text:0040D494                 mov     esi, [esp+4Ch+Str]
.text:0040D498                 cmp     byte ptr [esi+1], 0
.text:0040D49C                 jmp     short loc_40D484
.text:0040D49E ; ---------------------------------------------------------------------------
.text:0040D49E
.text:0040D49E loc_40D49E:                             ; CODE XREF: sub_40CB90:loc_40CC2F↑j
.text:0040D49E                 test    ebp, ebp
.text:0040D4A0                 jnz     short loc_40D4AD
.text:0040D4A2                 cmp     [esp+4Ch+arg_10], 1
.text:0040D4A7                 jz      loc_40CF9B      ; jumptable 0040D362 cases 91,92,94,96,124
.text:0040D4AD
.text:0040D4AD loc_40D4AD:                             ; CODE XREF: sub_40CB90+910↑j
.text:0040D4AD                 mov     esi, [esp+4Ch+var_1C]
.text:0040D4B1                 test    esi, esi
.text:0040D4B3                 jz      short loc_40D4E8
.text:0040D4B5                 mov     edi, [esp+4Ch+var_1C]
.text:0040D4B9                 movzx   eax, byte ptr [edi]
.text:0040D4BC                 test    al, al
.text:0040D4BE                 jz      short loc_40D4E8
.text:0040D4C0
.text:0040D4C0 loc_40D4C0:                             ; CODE XREF: sub_40CB90+956↓j
.text:0040D4C0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040D4C4                 cmp     [esp+4Ch+var_34], ebp
.text:0040D4C8                 jnb     short loc_40D4D5
.text:0040D4CA                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D4CE                 mov     ebx, [esp+4Ch+var_34]
.text:0040D4D2                 mov     [ebx+ecx], al
.text:0040D4D5
.text:0040D4D5 loc_40D4D5:                             ; CODE XREF: sub_40CB90+938↑j
.text:0040D4D5                 inc     [esp+4Ch+var_1C]
.text:0040D4D9                 inc     [esp+4Ch+var_34]
.text:0040D4DD                 mov     edx, [esp+4Ch+var_1C]
.text:0040D4E1                 movzx   eax, byte ptr [edx]
.text:0040D4E4                 test    al, al
.text:0040D4E6                 jnz     short loc_40D4C0
.text:0040D4E8
.text:0040D4E8 loc_40D4E8:                             ; CODE XREF: sub_40CB90+923↑j
.text:0040D4E8                                         ; sub_40CB90+92E↑j
.text:0040D4E8                 mov     eax, [esp+4Ch+arg_4]
.text:0040D4EC                 cmp     [esp+4Ch+var_34], eax
.text:0040D4F0                 jnb     short loc_40D4FE
.text:0040D4F2                 mov     edi, [esp+4Ch+arg_0]
.text:0040D4F6                 mov     esi, [esp+4Ch+var_34]
.text:0040D4FA                 mov     byte ptr [esi+edi], 0
.text:0040D4FE
.text:0040D4FE loc_40D4FE:                             ; CODE XREF: sub_40CB90+960↑j
.text:0040D4FE                 mov     eax, [esp+4Ch+var_34]
.text:0040D502                 jmp     loc_40CFCF
.text:0040D507 ; ---------------------------------------------------------------------------
.text:0040D507
.text:0040D507 loc_40D507:                             ; CODE XREF: sub_40CB90+95↑j
.text:0040D507                 mov     ebx, [esp+4Ch+Str]
.text:0040D50B                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040D510                 jmp     loc_40CC2F
.text:0040D515 ; ---------------------------------------------------------------------------
.text:0040D515
.text:0040D515 loc_40D515:                             ; CODE XREF: sub_40CB90+3D↑j
.text:0040D515                                         ; DATA XREF: sub_40CB90:jpt_40CBCD↑o
.text:0040D515                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040CBCD case 2
.text:0040D519                 cmp     [esp+4Ch+var_34], edx
.text:0040D51D                 jnb     short loc_40D526
.text:0040D51F                 mov     ecx, [esp+4Ch+arg_0]
.text:0040D523                 mov     byte ptr [ecx], 27h ; '''
.text:0040D526
.text:0040D526 loc_40D526:                             ; CODE XREF: sub_40CB90+98D↑j
.text:0040D526                 mov     [esp+4Ch+var_34], 1
.text:0040D52E                 mov     [esp+4Ch+var_1C], 40CB7Eh
.text:0040D536                 jmp     loc_40CC16
.text:0040D53B ; ---------------------------------------------------------------------------
.text:0040D53B
.text:0040D53B loc_40D53B:                             ; CODE XREF: sub_40CB90+3D↑j
.text:0040D53B                                         ; DATA XREF: sub_40CB90:jpt_40CBCD↑o
.text:0040D53B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040CBCD case 4
.text:0040D540                 jmp     def_40CBCD      ; jumptable 0040CBCD default case, cases 0,1
.text:0040D545 ; ---------------------------------------------------------------------------
.text:0040D545
.text:0040D545 loc_40D545:                             ; CODE XREF: sub_40CB90+3D↑j
.text:0040D545                                         ; DATA XREF: sub_40CB90:jpt_40CBCD↑o
.text:0040D545                 mov     [esp+4Ch+C], 40CB80h ; jumptable 0040CBCD cases 5,6
.text:0040D54C                 call    ds:libintl_gettext
.text:0040D552                 cmp     eax, 40CB80h
.text:0040D557                 mov     edi, eax
.text:0040D559                 jz      short loc_40D5D0
.text:0040D55B
.text:0040D55B loc_40D55B:                             ; CODE XREF: sub_40CB90+A45↓j
.text:0040D55B                                         ; sub_40CB90+A4C↓j
.text:0040D55B                 mov     [esp+4Ch+C], 40CB7Eh
.text:0040D562                 call    ds:libintl_gettext
.text:0040D568                 cmp     eax, 40CB7Eh
.text:0040D56D                 mov     edx, eax
.text:0040D56F                 jz      short loc_40D5C2
.text:0040D571
.text:0040D571 loc_40D571:                             ; CODE XREF: sub_40CB90+A37↓j
.text:0040D571                                         ; sub_40CB90+A3E↓j
.text:0040D571                 mov     [esp+4Ch+var_1C], edi
.text:0040D575                 cmp     byte ptr [edi], 0
.text:0040D578                 jz      short loc_40D5A8
.text:0040D57A
.text:0040D57A loc_40D57A:                             ; CODE XREF: sub_40CB90+A16↓j
.text:0040D57A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040D57E                 cmp     [esp+4Ch+var_34], ecx
.text:0040D582                 jnb     short loc_40D597
.text:0040D584                 mov     ebp, [esp+4Ch+var_1C]
.text:0040D588                 mov     edi, [esp+4Ch+arg_0]
.text:0040D58C                 mov     esi, [esp+4Ch+var_34]
.text:0040D590                 movzx   ebx, byte ptr [ebp+0]
.text:0040D594                 mov     [esi+edi], bl
.text:0040D597
.text:0040D597 loc_40D597:                             ; CODE XREF: sub_40CB90+9F2↑j
.text:0040D597                 inc     [esp+4Ch+var_1C]
.text:0040D59B                 inc     [esp+4Ch+var_34]
.text:0040D59F                 mov     eax, [esp+4Ch+var_1C]
.text:0040D5A3                 cmp     byte ptr [eax], 0
.text:0040D5A6                 jnz     short loc_40D57A
.text:0040D5A8
.text:0040D5A8 loc_40D5A8:                             ; CODE XREF: sub_40CB90+9E8↑j
.text:0040D5A8                 mov     [esp+4Ch+var_21], 1
.text:0040D5AD                 mov     [esp+4Ch+var_1C], edx
.text:0040D5B1                 mov     [esp+4Ch+C], edx ; Str
.text:0040D5B4                 call    strlen
.text:0040D5B9                 mov     [esp+4Ch+var_20], eax
.text:0040D5BD                 jmp     def_40CBCD      ; jumptable 0040CBCD default case, cases 0,1
.text:0040D5C2 ; ---------------------------------------------------------------------------
.text:0040D5C2
.text:0040D5C2 loc_40D5C2:                             ; CODE XREF: sub_40CB90+9DF↑j
.text:0040D5C2                 cmp     [esp+4Ch+arg_10], 6
.text:0040D5C7                 jnz     short loc_40D571
.text:0040D5C9                 mov     edx, offset asc_40CB7C ; "\"'`"
.text:0040D5CE                 jmp     short loc_40D571
.text:0040D5D0 ; ---------------------------------------------------------------------------
.text:0040D5D0
.text:0040D5D0 loc_40D5D0:                             ; CODE XREF: sub_40CB90+9C9↑j
.text:0040D5D0                 cmp     [esp+4Ch+arg_10], 6
.text:0040D5D5                 jnz     short loc_40D55B
.text:0040D5D7                 mov     edi, offset asc_40CB7C ; "\"'`"
.text:0040D5DC                 jmp     loc_40D55B
.text:0040D5DC sub_40CB90      endp
.text:0040D5DC
.text:0040D5E1 ; ---------------------------------------------------------------------------
.text:0040D5E1                 jmp     short sub_40D5F0
.text:0040D5E1 ; ---------------------------------------------------------------------------
.text:0040D5E3                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0
.text:0040D5F0 sub_40D5F0      proc near               ; CODE XREF: sub_4025F0+D8B↑p
.text:0040D5F0                                         ; sub_4025F0+DEC↑p ...
.text:0040D5F0
.text:0040D5F0 var_C           = dword ptr -0Ch
.text:0040D5F0 var_8           = dword ptr -8
.text:0040D5F0 var_4           = dword ptr -4
.text:0040D5F0 arg_0           = dword ptr  4
.text:0040D5F0
.text:0040D5F0                 sub     esp, 0Ch
.text:0040D5F3                 mov     [esp+0Ch+var_8], ebx
.text:0040D5F7                 mov     [esp+0Ch+var_4], esi
.text:0040D5FB                 call    _errno
.text:0040D600                 mov     esi, [eax]
.text:0040D602                 mov     [esp+0Ch+var_C], 24h ; '$' ; size_t
.text:0040D609                 call    sub_412420
.text:0040D60E                 mov     edx, [esp+0Ch+arg_0]
.text:0040D612                 mov     ebx, eax
.text:0040D614                 test    edx, edx
.text:0040D616                 jz      short loc_40D661
.text:0040D618
.text:0040D618 loc_40D618:                             ; CODE XREF: sub_40D5F0+76↓j
.text:0040D618                 mov     ecx, [edx]
.text:0040D61A                 mov     [ebx], ecx
.text:0040D61C                 mov     ecx, [edx+4]
.text:0040D61F                 mov     [ebx+4], ecx
.text:0040D622                 mov     ecx, [edx+8]
.text:0040D625                 mov     [ebx+8], ecx
.text:0040D628                 mov     ecx, [edx+0Ch]
.text:0040D62B                 mov     [ebx+0Ch], ecx
.text:0040D62E                 mov     ecx, [edx+10h]
.text:0040D631                 mov     [ebx+10h], ecx
.text:0040D634                 mov     ecx, [edx+14h]
.text:0040D637                 mov     [ebx+14h], ecx
.text:0040D63A                 mov     ecx, [edx+18h]
.text:0040D63D                 mov     [ebx+18h], ecx
.text:0040D640                 mov     ecx, [edx+1Ch]
.text:0040D643                 mov     [ebx+1Ch], ecx
.text:0040D646                 mov     ecx, [edx+20h]
.text:0040D649                 mov     [ebx+20h], ecx
.text:0040D64C                 call    _errno
.text:0040D651                 mov     [eax], esi
.text:0040D653                 mov     esi, [esp+0Ch+var_4]
.text:0040D657                 mov     eax, ebx
.text:0040D659                 mov     ebx, [esp+0Ch+var_8]
.text:0040D65D                 add     esp, 0Ch
.text:0040D660                 retn
.text:0040D661 ; ---------------------------------------------------------------------------
.text:0040D661
.text:0040D661 loc_40D661:                             ; CODE XREF: sub_40D5F0+26↑j
.text:0040D661                 mov     edx, offset dword_42C530
.text:0040D666                 jmp     short loc_40D618
.text:0040D666 sub_40D5F0      endp
.text:0040D666
.text:0040D666 ; ---------------------------------------------------------------------------
.text:0040D668                 align 10h
.text:0040D670
.text:0040D670 ; =============== S U B R O U T I N E =======================================
.text:0040D670
.text:0040D670
.text:0040D670 sub_40D670      proc near               ; CODE XREF: sub_401B10+325↑p
.text:0040D670                                         ; sub_4025F0+D98↑p
.text:0040D670
.text:0040D670 arg_0           = dword ptr  4
.text:0040D670
.text:0040D670                 mov     eax, [esp+arg_0]
.text:0040D674                 test    eax, eax
.text:0040D676                 jz      short loc_40D680
.text:0040D678
.text:0040D678 loc_40D678:                             ; CODE XREF: sub_40D670+15↓j
.text:0040D678                 mov     eax, [eax]
.text:0040D67A                 retn
.text:0040D67A ; ---------------------------------------------------------------------------
.text:0040D67B                 align 10h
.text:0040D680
.text:0040D680 loc_40D680:                             ; CODE XREF: sub_40D670+6↑j
.text:0040D680                 mov     eax, offset dword_42C530
.text:0040D685                 jmp     short loc_40D678
.text:0040D685 sub_40D670      endp
.text:0040D685
.text:0040D685 ; ---------------------------------------------------------------------------
.text:0040D687                 align 10h
.text:0040D690
.text:0040D690 ; =============== S U B R O U T I N E =======================================
.text:0040D690
.text:0040D690
.text:0040D690 sub_40D690      proc near               ; CODE XREF: sub_4025F0+115↑p
.text:0040D690                                         ; sub_4025F0+7F1↑p ...
.text:0040D690
.text:0040D690 arg_0           = dword ptr  4
.text:0040D690 arg_4           = dword ptr  8
.text:0040D690
.text:0040D690                 mov     edx, [esp+arg_0]
.text:0040D694                 test    edx, edx
.text:0040D696                 jz      short loc_40D6A0
.text:0040D698
.text:0040D698 loc_40D698:                             ; CODE XREF: sub_40D690+15↓j
.text:0040D698                 mov     ecx, [esp+arg_4]
.text:0040D69C                 mov     [edx], ecx
.text:0040D69E                 retn
.text:0040D69E ; ---------------------------------------------------------------------------
.text:0040D69F                 align 10h
.text:0040D6A0
.text:0040D6A0 loc_40D6A0:                             ; CODE XREF: sub_40D690+6↑j
.text:0040D6A0                 mov     edx, offset dword_42C530
.text:0040D6A5                 jmp     short loc_40D698
.text:0040D6A5 sub_40D690      endp
.text:0040D6A5
.text:0040D6A5 ; ---------------------------------------------------------------------------
.text:0040D6A7                 align 10h
.text:0040D6B0
.text:0040D6B0 ; =============== S U B R O U T I N E =======================================
.text:0040D6B0
.text:0040D6B0
.text:0040D6B0 sub_40D6B0      proc near               ; CODE XREF: sub_4025F0+DD9↑p
.text:0040D6B0                                         ; sub_4025F0+E09↑p ...
.text:0040D6B0
.text:0040D6B0 var_8           = dword ptr -8
.text:0040D6B0 var_4           = dword ptr -4
.text:0040D6B0 arg_0           = dword ptr  4
.text:0040D6B0 arg_4           = byte ptr  8
.text:0040D6B0 arg_8           = dword ptr  0Ch
.text:0040D6B0
.text:0040D6B0                 sub     esp, 8
.text:0040D6B3                 mov     eax, [esp+8+arg_0]
.text:0040D6B7                 movzx   ecx, [esp+8+arg_4]
.text:0040D6BC                 mov     [esp+8+var_8], ebx
.text:0040D6BF                 mov     ebx, [esp+8+arg_8]
.text:0040D6C3                 mov     [esp+8+var_4], esi
.text:0040D6C7                 mov     dl, cl
.text:0040D6C9                 shr     dl, 5
.text:0040D6CC                 movzx   edx, dl
.text:0040D6CF                 shl     edx, 2
.text:0040D6D2                 test    eax, eax
.text:0040D6D4                 lea     esi, [edx+eax+4]
.text:0040D6D8                 jz      short loc_40D700
.text:0040D6DA
.text:0040D6DA loc_40D6DA:                             ; CODE XREF: sub_40D6B0+56↓j
.text:0040D6DA                 mov     edx, [esi]
.text:0040D6DC                 and     ecx, 1Fh
.text:0040D6DF                 and     ebx, 1
.text:0040D6E2                 mov     eax, edx
.text:0040D6E4                 shr     eax, cl
.text:0040D6E6                 and     eax, 1
.text:0040D6E9                 xor     ebx, eax
.text:0040D6EB                 shl     ebx, cl
.text:0040D6ED                 xor     edx, ebx
.text:0040D6EF                 mov     [esi], edx
.text:0040D6F1                 mov     ebx, [esp+8+var_8]
.text:0040D6F4                 mov     esi, [esp+8+var_4]
.text:0040D6F8                 add     esp, 8
.text:0040D6FB                 retn
.text:0040D6FB ; ---------------------------------------------------------------------------
.text:0040D6FC                 align 10h
.text:0040D700
.text:0040D700 loc_40D700:                             ; CODE XREF: sub_40D6B0+28↑j
.text:0040D700                 lea     esi, dword_42C534[edx]
.text:0040D706                 jmp     short loc_40D6DA
.text:0040D706 sub_40D6B0      endp
.text:0040D706
.text:0040D706 ; ---------------------------------------------------------------------------
.text:0040D708                 align 10h
.text:0040D710
.text:0040D710 ; =============== S U B R O U T I N E =======================================
.text:0040D710
.text:0040D710
.text:0040D710 ; int __cdecl sub_40D710(int, int, char *, int, int)
.text:0040D710 sub_40D710      proc near               ; CODE XREF: sub_405EA0+33↑p
.text:0040D710                                         ; sub_405EA0+314↑p
.text:0040D710
.text:0040D710 var_2C          = dword ptr -2Ch
.text:0040D710 var_28          = dword ptr -28h
.text:0040D710 Str             = dword ptr -24h
.text:0040D710 var_20          = dword ptr -20h
.text:0040D710 var_1C          = dword ptr -1Ch
.text:0040D710 var_18          = dword ptr -18h
.text:0040D710 var_8           = dword ptr -8
.text:0040D710 var_4           = dword ptr -4
.text:0040D710 arg_0           = dword ptr  4
.text:0040D710 arg_4           = dword ptr  8
.text:0040D710 arg_8           = dword ptr  0Ch
.text:0040D710 arg_C           = dword ptr  10h
.text:0040D710 arg_10          = dword ptr  14h
.text:0040D710
.text:0040D710                 sub     esp, 2Ch
.text:0040D713                 mov     [esp+2Ch+var_8], ebx
.text:0040D717                 mov     ebx, [esp+2Ch+arg_10]
.text:0040D71B                 mov     [esp+2Ch+var_4], esi
.text:0040D71F                 test    ebx, ebx
.text:0040D721                 jz      short loc_40D770
.text:0040D723
.text:0040D723 loc_40D723:                             ; CODE XREF: sub_40D710+65↓j
.text:0040D723                 call    _errno
.text:0040D728                 mov     esi, [eax]
.text:0040D72A                 mov     [esp+2Ch+var_18], ebx ; int
.text:0040D72E                 mov     edx, [ebx]
.text:0040D730                 mov     ecx, [esp+2Ch+arg_8]
.text:0040D734                 mov     ebx, [esp+2Ch+arg_C]
.text:0040D738                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040D73C                 mov     edx, [esp+2Ch+arg_4]
.text:0040D740                 mov     [esp+2Ch+var_20], ebx ; int
.text:0040D744                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040D748                 mov     [esp+2Ch+var_28], edx ; int
.text:0040D74C                 mov     edx, [esp+2Ch+arg_0]
.text:0040D750                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040D753                 call    sub_40CB90
.text:0040D758                 mov     ebx, eax
.text:0040D75A                 call    _errno
.text:0040D75F                 mov     [eax], esi
.text:0040D761                 mov     esi, [esp+2Ch+var_4]
.text:0040D765                 mov     eax, ebx
.text:0040D767                 mov     ebx, [esp+2Ch+var_8]
.text:0040D76B                 add     esp, 2Ch
.text:0040D76E                 retn
.text:0040D76E ; ---------------------------------------------------------------------------
.text:0040D76F                 align 10h
.text:0040D770
.text:0040D770 loc_40D770:                             ; CODE XREF: sub_40D710+11↑j
.text:0040D770                 mov     ebx, offset dword_42C530
.text:0040D775                 jmp     short loc_40D723
.text:0040D775 sub_40D710      endp
.text:0040D775
.text:0040D775 ; ---------------------------------------------------------------------------
.text:0040D777                 align 10h
.text:0040D780                 push    ebp
.text:0040D781                 push    edi
.text:0040D782                 push    esi
.text:0040D783                 push    ebx
.text:0040D784                 sub     esp, 2Ch
.text:0040D787                 mov     ebp, [esp+48h]
.text:0040D78B                 call    _errno
.text:0040D790                 mov     edx, [eax]
.text:0040D792                 test    ebp, ebp
.text:0040D794                 mov     ebx, ebp
.text:0040D796                 mov     [esp+28h], edx
.text:0040D79A                 jz      loc_40D850
.text:0040D7A0
.text:0040D7A0 loc_40D7A0:                             ; CODE XREF: .text:0040D855↓j
.text:0040D7A0                 call    _errno
.text:0040D7A5                 mov     edi, [eax]
.text:0040D7A7                 mov     esi, ebp
.text:0040D7A9                 mov     [esp+14h], ebx
.text:0040D7AD                 mov     ecx, [ebx]
.text:0040D7AF                 mov     dword ptr [esp], 0
.text:0040D7B6                 mov     edx, [esp+44h]
.text:0040D7BA                 mov     dword ptr [esp+4], 0
.text:0040D7C2                 mov     eax, [esp+40h]
.text:0040D7C6                 mov     [esp+10h], ecx
.text:0040D7CA                 mov     [esp+0Ch], edx
.text:0040D7CE                 mov     [esp+8], eax
.text:0040D7D2                 call    sub_40CB90
.text:0040D7D7                 mov     ebx, eax
.text:0040D7D9                 call    _errno
.text:0040D7DE                 mov     [eax], edi
.text:0040D7E0                 lea     edi, [ebx+1]
.text:0040D7E3                 mov     [esp], edi
.text:0040D7E6                 call    sub_412420
.text:0040D7EB                 mov     [esp+24h], eax
.text:0040D7EF                 test    ebp, ebp
.text:0040D7F1                 jz      short loc_40D842
.text:0040D7F3
.text:0040D7F3 loc_40D7F3:                             ; CODE XREF: .text:0040D847↓j
.text:0040D7F3                 call    _errno
.text:0040D7F8                 mov     ebp, [eax]
.text:0040D7FA                 mov     [esp+14h], esi
.text:0040D7FE                 mov     ecx, [esi]
.text:0040D800                 mov     [esp+4], edi
.text:0040D804                 mov     edx, [esp+44h]
.text:0040D808                 mov     esi, [esp+24h]
.text:0040D80C                 mov     [esp+10h], ecx
.text:0040D810                 mov     eax, [esp+40h]
.text:0040D814                 mov     [esp+0Ch], edx
.text:0040D818                 mov     [esp], esi
.text:0040D81B                 mov     [esp+8], eax
.text:0040D81F                 call    sub_40CB90
.text:0040D824                 call    _errno
.text:0040D829                 mov     [eax], ebp
.text:0040D82B                 call    _errno
.text:0040D830                 mov     ebx, [esp+28h]
.text:0040D834                 mov     [eax], ebx
.text:0040D836                 mov     eax, [esp+24h]
.text:0040D83A                 add     esp, 2Ch
.text:0040D83D                 pop     ebx
.text:0040D83E                 pop     esi
.text:0040D83F                 pop     edi
.text:0040D840                 pop     ebp
.text:0040D841                 retn
.text:0040D842 ; ---------------------------------------------------------------------------
.text:0040D842
.text:0040D842 loc_40D842:                             ; CODE XREF: .text:0040D7F1↑j
.text:0040D842                 mov     esi, offset dword_42C530
.text:0040D847                 jmp     short loc_40D7F3
.text:0040D847 ; ---------------------------------------------------------------------------
.text:0040D849                 align 10h
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: .text:0040D79A↑j
.text:0040D850                 mov     ebx, offset dword_42C530
.text:0040D855                 jmp     loc_40D7A0
.text:0040D855 ; ---------------------------------------------------------------------------
.text:0040D85A                 align 10h
.text:0040D860                 sub     esp, 1Ch
.text:0040D863                 mov     edx, [esp+24h]
.text:0040D867                 mov     dword ptr [esp+0Ch], offset dword_42C530
.text:0040D86F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D877                 mov     [esp+4], edx
.text:0040D87B                 mov     edx, [esp+20h]
.text:0040D87F                 mov     [esp], edx
.text:0040D882                 call    sub_40DCD0
.text:0040D887                 add     esp, 1Ch
.text:0040D88A                 retn
.text:0040D88A ; ---------------------------------------------------------------------------
.text:0040D88B                 align 10h
.text:0040D890
.text:0040D890 ; =============== S U B R O U T I N E =======================================
.text:0040D890
.text:0040D890
.text:0040D890 ; int __cdecl sub_40D890(char *)
.text:0040D890 sub_40D890      proc near               ; CODE XREF: sub_4025F0+86A↑p
.text:0040D890                                         ; sub_4025F0+A70↑p ...
.text:0040D890
.text:0040D890 var_1C          = dword ptr -1Ch
.text:0040D890 var_18          = dword ptr -18h
.text:0040D890 var_14          = dword ptr -14h
.text:0040D890 var_10          = dword ptr -10h
.text:0040D890 arg_0           = dword ptr  4
.text:0040D890
.text:0040D890                 sub     esp, 1Ch
.text:0040D893                 mov     edx, [esp+1Ch+arg_0]
.text:0040D897                 mov     [esp+1Ch+var_10], offset dword_42C530 ; int
.text:0040D89F                 mov     [esp+1Ch+var_14], 0FFFFFFFFh ; int
.text:0040D8A7                 mov     [esp+1Ch+var_18], edx ; char *
.text:0040D8AB                 mov     [esp+1Ch+var_1C], 0 ; int
.text:0040D8B2                 call    sub_40DCD0
.text:0040D8B7                 add     esp, 1Ch
.text:0040D8BA                 retn
.text:0040D8BA sub_40D890      endp
.text:0040D8BA
.text:0040D8BA ; ---------------------------------------------------------------------------
.text:0040D8BB                 align 10h
.text:0040D8C0
.text:0040D8C0 ; =============== S U B R O U T I N E =======================================
.text:0040D8C0
.text:0040D8C0
.text:0040D8C0 ; int __cdecl sub_40D8C0(int, int, char *)
.text:0040D8C0 sub_40D8C0      proc near               ; CODE XREF: .text:004118EE↓p
.text:0040D8C0                                         ; sub_411AA0+96↓p ...
.text:0040D8C0
.text:0040D8C0 var_BC          = dword ptr -0BCh
.text:0040D8C0 var_B8          = dword ptr -0B8h
.text:0040D8C0 var_B4          = dword ptr -0B4h
.text:0040D8C0 var_B0          = dword ptr -0B0h
.text:0040D8C0 var_AC          = dword ptr -0ACh
.text:0040D8C0 var_A8          = dword ptr -0A8h
.text:0040D8C0 var_A4          = dword ptr -0A4h
.text:0040D8C0 var_A0          = dword ptr -0A0h
.text:0040D8C0 var_9C          = dword ptr -9Ch
.text:0040D8C0 var_98          = dword ptr -98h
.text:0040D8C0 var_94          = dword ptr -94h
.text:0040D8C0 var_90          = dword ptr -90h
.text:0040D8C0 var_8C          = dword ptr -8Ch
.text:0040D8C0 var_7C          = dword ptr -7Ch
.text:0040D8C0 var_78          = dword ptr -78h
.text:0040D8C0 var_74          = dword ptr -74h
.text:0040D8C0 var_70          = dword ptr -70h
.text:0040D8C0 var_6C          = dword ptr -6Ch
.text:0040D8C0 var_68          = dword ptr -68h
.text:0040D8C0 var_64          = dword ptr -64h
.text:0040D8C0 var_60          = dword ptr -60h
.text:0040D8C0 var_5C          = dword ptr -5Ch
.text:0040D8C0 var_4C          = dword ptr -4Ch
.text:0040D8C0 var_48          = dword ptr -48h
.text:0040D8C0 var_44          = dword ptr -44h
.text:0040D8C0 var_40          = dword ptr -40h
.text:0040D8C0 var_3C          = dword ptr -3Ch
.text:0040D8C0 var_38          = dword ptr -38h
.text:0040D8C0 var_34          = dword ptr -34h
.text:0040D8C0 var_30          = dword ptr -30h
.text:0040D8C0 var_2C          = dword ptr -2Ch
.text:0040D8C0 arg_0           = dword ptr  4
.text:0040D8C0 arg_4           = dword ptr  8
.text:0040D8C0 arg_8           = dword ptr  0Ch
.text:0040D8C0
.text:0040D8C0                 push    ebp
.text:0040D8C1                 xor     eax, eax
.text:0040D8C3                 mov     ecx, 8
.text:0040D8C8                 push    edi
.text:0040D8C9                 push    esi
.text:0040D8CA                 push    ebx
.text:0040D8CB                 sub     esp, 0ACh
.text:0040D8D1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040D8D8                 cld
.text:0040D8D9                 lea     edi, [esp+0BCh+var_A8]
.text:0040D8DD                 mov     [esp+0BCh+var_AC], ebp
.text:0040D8E1                 rep stosd
.text:0040D8E3                 mov     eax, [esp+0BCh+var_8C]
.text:0040D8E7                 mov     edi, [esp+0BCh+var_AC]
.text:0040D8EB                 mov     esi, [esp+0BCh+var_A8]
.text:0040D8EF                 mov     [esp+0BCh+var_5C], eax
.text:0040D8F3                 mov     ebp, [esp+0BCh+var_A4]
.text:0040D8F7                 mov     eax, [esp+0BCh+var_AC]
.text:0040D8FB                 mov     [esp+0BCh+var_7C], edi
.text:0040D8FF                 mov     ecx, [esp+0BCh+var_94]
.text:0040D903                 mov     edi, [esp+0BCh+var_A0]
.text:0040D907                 mov     [esp+0BCh+var_78], esi
.text:0040D90B                 mov     edx, [esp+0BCh+var_90]
.text:0040D90F                 mov     esi, [esp+0BCh+var_9C]
.text:0040D913                 mov     [esp+0BCh+var_4C], eax
.text:0040D917                 mov     ebx, [esp+0BCh+var_98]
.text:0040D91B                 mov     eax, [esp+0BCh+var_A8]
.text:0040D91F                 mov     [esp+0BCh+var_74], ebp
.text:0040D923                 mov     [esp+0BCh+var_70], edi
.text:0040D927                 mov     [esp+0BCh+var_6C], esi
.text:0040D92B                 mov     [esp+0BCh+var_68], ebx
.text:0040D92F                 mov     [esp+0BCh+var_64], ecx
.text:0040D933                 mov     [esp+0BCh+var_60], edx
.text:0040D937                 mov     [esp+0BCh+var_48], eax
.text:0040D93B                 mov     [esp+0BCh+var_44], ebp
.text:0040D93F                 mov     [esp+0BCh+var_40], edi
.text:0040D943                 mov     [esp+0BCh+var_3C], esi
.text:0040D94A                 mov     [esp+0BCh+var_38], ebx
.text:0040D951                 mov     ebx, [esp+0BCh+var_8C]
.text:0040D955                 mov     [esp+0BCh+var_30], edx
.text:0040D95C                 mov     edx, [esp+0BCh+arg_8]
.text:0040D963                 mov     [esp+0BCh+var_34], ecx
.text:0040D96A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040D96E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040D972                 mov     edx, [esp+0BCh+arg_0]
.text:0040D979                 mov     [esp+0BCh+var_2C], ebx
.text:0040D980                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040D984                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040D98C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040D98F                 call    sub_40DCD0
.text:0040D994                 add     esp, 0ACh
.text:0040D99A                 pop     ebx
.text:0040D99B                 pop     esi
.text:0040D99C                 pop     edi
.text:0040D99D                 pop     ebp
.text:0040D99E                 retn
.text:0040D99E sub_40D8C0      endp
.text:0040D99E
.text:0040D99E ; ---------------------------------------------------------------------------
.text:0040D99F                 align 10h
.text:0040D9A0                 push    ebp
.text:0040D9A1                 xor     eax, eax
.text:0040D9A3                 mov     ecx, 8
.text:0040D9A8                 push    edi
.text:0040D9A9                 push    esi
.text:0040D9AA                 push    ebx
.text:0040D9AB                 sub     esp, 0ACh
.text:0040D9B1                 mov     edx, [esp+0C4h]
.text:0040D9B8                 cld
.text:0040D9B9                 lea     edi, [esp+14h]
.text:0040D9BD                 mov     [esp+10h], edx
.text:0040D9C1                 rep stosd
.text:0040D9C3                 mov     eax, [esp+30h]
.text:0040D9C7                 mov     ebp, [esp+10h]
.text:0040D9CB                 mov     edi, [esp+14h]
.text:0040D9CF                 mov     [esp+60h], eax
.text:0040D9D3                 mov     esi, [esp+20h]
.text:0040D9D7                 mov     eax, [esp+10h]
.text:0040D9DB                 mov     [esp+40h], ebp
.text:0040D9DF                 mov     ecx, [esp+28h]
.text:0040D9E3                 mov     ebp, [esp+18h]
.text:0040D9E7                 mov     [esp+44h], edi
.text:0040D9EB                 mov     edx, [esp+2Ch]
.text:0040D9EF                 mov     edi, [esp+1Ch]
.text:0040D9F3                 mov     [esp+70h], eax
.text:0040D9F7                 mov     ebx, [esp+24h]
.text:0040D9FB                 mov     eax, [esp+14h]
.text:0040D9FF                 mov     [esp+48h], ebp
.text:0040DA03                 mov     [esp+4Ch], edi
.text:0040DA07                 mov     [esp+50h], esi
.text:0040DA0B                 mov     [esp+54h], ebx
.text:0040DA0F                 mov     [esp+58h], ecx
.text:0040DA13                 mov     [esp+5Ch], edx
.text:0040DA17                 mov     [esp+74h], eax
.text:0040DA1B                 mov     [esp+78h], ebp
.text:0040DA1F                 mov     [esp+7Ch], edi
.text:0040DA23                 mov     [esp+80h], esi
.text:0040DA2A                 mov     [esp+84h], ebx
.text:0040DA31                 mov     esi, [esp+30h]
.text:0040DA35                 lea     ebx, [esp+70h]
.text:0040DA39                 mov     [esp+8Ch], edx
.text:0040DA40                 mov     edx, [esp+0C8h]
.text:0040DA47                 mov     [esp+88h], ecx
.text:0040DA4E                 mov     ecx, [esp+0CCh]
.text:0040DA55                 mov     [esp+4], edx
.text:0040DA59                 mov     edx, [esp+0C0h]
.text:0040DA60                 mov     [esp+90h], esi
.text:0040DA67                 mov     [esp+0Ch], ebx
.text:0040DA6B                 mov     [esp+8], ecx
.text:0040DA6F                 mov     [esp], edx
.text:0040DA72                 call    sub_40DCD0
.text:0040DA77                 add     esp, 0ACh
.text:0040DA7D                 pop     ebx
.text:0040DA7E                 pop     esi
.text:0040DA7F                 pop     edi
.text:0040DA80                 pop     ebp
.text:0040DA81                 retn
.text:0040DA81 ; ---------------------------------------------------------------------------
.text:0040DA82                 align 10h
.text:0040DA90                 push    ebp
.text:0040DA91                 xor     eax, eax
.text:0040DA93                 mov     ecx, 8
.text:0040DA98                 push    edi
.text:0040DA99                 push    esi
.text:0040DA9A                 push    ebx
.text:0040DA9B                 sub     esp, 0ACh
.text:0040DAA1                 mov     edi, [esp+0C0h]
.text:0040DAA8                 cld
.text:0040DAA9                 mov     [esp+10h], edi
.text:0040DAAD                 lea     edi, [esp+14h]
.text:0040DAB1                 rep stosd
.text:0040DAB3                 mov     eax, [esp+30h]
.text:0040DAB7                 mov     esi, [esp+10h]
.text:0040DABB                 mov     ebx, [esp+14h]
.text:0040DABF                 mov     [esp+60h], eax
.text:0040DAC3                 mov     ebp, [esp+18h]
.text:0040DAC7                 mov     eax, [esp+10h]
.text:0040DACB                 mov     [esp+40h], esi
.text:0040DACF                 mov     edi, [esp+1Ch]
.text:0040DAD3                 mov     esi, [esp+20h]
.text:0040DAD7                 mov     [esp+44h], ebx
.text:0040DADB                 mov     ecx, [esp+28h]
.text:0040DADF                 mov     edx, [esp+2Ch]
.text:0040DAE3                 mov     [esp+70h], eax
.text:0040DAE7                 mov     ebx, [esp+24h]
.text:0040DAEB                 mov     eax, [esp+14h]
.text:0040DAEF                 mov     [esp+48h], ebp
.text:0040DAF3                 mov     [esp+4Ch], edi
.text:0040DAF7                 mov     [esp+50h], esi
.text:0040DAFB                 mov     [esp+54h], ebx
.text:0040DAFF                 mov     [esp+58h], ecx
.text:0040DB03                 mov     [esp+5Ch], edx
.text:0040DB07                 mov     [esp+74h], eax
.text:0040DB0B                 mov     [esp+78h], ebp
.text:0040DB0F                 mov     [esp+7Ch], edi
.text:0040DB13                 mov     [esp+80h], esi
.text:0040DB1A                 mov     [esp+84h], ebx
.text:0040DB21                 mov     [esp+8Ch], edx
.text:0040DB28                 lea     edx, [esp+70h]
.text:0040DB2C                 mov     [esp+88h], ecx
.text:0040DB33                 mov     ecx, [esp+30h]
.text:0040DB37                 mov     [esp+0Ch], edx
.text:0040DB3B                 mov     edx, [esp+0C4h]
.text:0040DB42                 mov     [esp+90h], ecx
.text:0040DB49                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040DB51                 mov     [esp+4], edx
.text:0040DB55                 mov     dword ptr [esp], 0
.text:0040DB5C                 call    sub_40DCD0
.text:0040DB61                 add     esp, 0ACh
.text:0040DB67                 pop     ebx
.text:0040DB68                 pop     esi
.text:0040DB69                 pop     edi
.text:0040DB6A                 pop     ebp
.text:0040DB6B                 retn
.text:0040DB6B ; ---------------------------------------------------------------------------
.text:0040DB6C                 align 10h
.text:0040DB70                 push    edi
.text:0040DB71                 push    esi
.text:0040DB72                 push    ebx
.text:0040DB73                 sub     esp, 40h
.text:0040DB76                 mov     edx, ds:dword_42C53C
.text:0040DB7C                 mov     ebx, ds:dword_42C530
.text:0040DB82                 mov     esi, ds:dword_42C538
.text:0040DB88                 mov     edi, ds:dword_42C534
.text:0040DB8E                 mov     [esp+1Ch], edx
.text:0040DB92                 mov     ecx, ds:dword_42C540
.text:0040DB98                 mov     edx, ds:dword_42C550
.text:0040DB9E                 mov     [esp+10h], ebx
.text:0040DBA2                 mov     ebx, ds:dword_42C544
.text:0040DBA8                 mov     [esp+30h], edx
.text:0040DBAC                 movzx   edx, byte ptr [esp+54h]
.text:0040DBB1                 mov     [esp+18h], esi
.text:0040DBB5                 mov     esi, ds:dword_42C54C
.text:0040DBBB                 mov     [esp+14h], edi
.text:0040DBBF                 mov     edi, ds:dword_42C548
.text:0040DBC5                 mov     [esp+20h], ecx
.text:0040DBC9                 mov     cl, dl
.text:0040DBCB                 shr     cl, 5
.text:0040DBCE                 mov     [esp+24h], ebx
.text:0040DBD2                 movzx   ebx, cl
.text:0040DBD5                 mov     [esp+2Ch], esi
.text:0040DBD9                 lea     esi, [esp+10h]
.text:0040DBDD                 mov     [esp+28h], edi
.text:0040DBE1                 lea     edi, [esi+ebx*4]
.text:0040DBE4                 mov     ebx, edx
.text:0040DBE6                 mov     edx, [edi+4]
.text:0040DBE9                 and     ebx, 1Fh
.text:0040DBEC                 mov     cl, bl
.text:0040DBEE                 mov     eax, edx
.text:0040DBF0                 shr     eax, cl
.text:0040DBF2                 and     eax, 1
.text:0040DBF5                 xor     eax, 1
.text:0040DBF8                 shl     eax, cl
.text:0040DBFA                 xor     edx, eax
.text:0040DBFC                 mov     [edi+4], edx
.text:0040DBFF                 mov     edx, [esp+50h]
.text:0040DC03                 mov     [esp+0Ch], esi
.text:0040DC07                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040DC0F                 mov     [esp+4], edx
.text:0040DC13                 mov     dword ptr [esp], 0
.text:0040DC1A                 call    sub_40DCD0
.text:0040DC1F                 add     esp, 40h
.text:0040DC22                 pop     ebx
.text:0040DC23                 pop     esi
.text:0040DC24                 pop     edi
.text:0040DC25                 retn
.text:0040DC25 ; ---------------------------------------------------------------------------
.text:0040DC26                 align 10h
.text:0040DC30
.text:0040DC30 ; =============== S U B R O U T I N E =======================================
.text:0040DC30
.text:0040DC30
.text:0040DC30 ; int __cdecl sub_40DC30(char *)
.text:0040DC30 sub_40DC30      proc near               ; CODE XREF: sub_403C30+1F9↑p
.text:0040DC30                                         ; sub_403C30+63C↑p ...
.text:0040DC30
.text:0040DC30 var_4C          = dword ptr -4Ch
.text:0040DC30 var_48          = dword ptr -48h
.text:0040DC30 var_44          = dword ptr -44h
.text:0040DC30 var_40          = dword ptr -40h
.text:0040DC30 var_3C          = dword ptr -3Ch
.text:0040DC30 var_38          = dword ptr -38h
.text:0040DC30 var_34          = dword ptr -34h
.text:0040DC30 var_30          = dword ptr -30h
.text:0040DC30 var_2C          = dword ptr -2Ch
.text:0040DC30 var_28          = dword ptr -28h
.text:0040DC30 var_24          = dword ptr -24h
.text:0040DC30 var_20          = dword ptr -20h
.text:0040DC30 var_1C          = dword ptr -1Ch
.text:0040DC30 arg_0           = dword ptr  4
.text:0040DC30
.text:0040DC30                 sub     esp, 4Ch
.text:0040DC33                 mov     ecx, ds:dword_42C530
.text:0040DC39                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040DC41                 mov     edx, ds:dword_42C534
.text:0040DC47                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040DC4E                 mov     [esp+4Ch+var_3C], ecx
.text:0040DC52                 mov     ecx, ds:dword_42C53C
.text:0040DC58                 mov     [esp+4Ch+var_38], edx
.text:0040DC5C                 mov     edx, ds:dword_42C538
.text:0040DC62                 mov     [esp+4Ch+var_30], ecx
.text:0040DC66                 mov     ecx, ds:dword_42C540
.text:0040DC6C                 mov     eax, edx
.text:0040DC6E                 shr     eax, 1Ah
.text:0040DC71                 and     eax, 1
.text:0040DC74                 xor     eax, 1
.text:0040DC77                 mov     [esp+4Ch+var_2C], ecx
.text:0040DC7B                 shl     eax, 1Ah
.text:0040DC7E                 mov     ecx, ds:dword_42C544
.text:0040DC84                 xor     edx, eax
.text:0040DC86                 mov     [esp+4Ch+var_34], edx
.text:0040DC8A                 mov     edx, [esp+4Ch+arg_0]
.text:0040DC8E                 mov     [esp+4Ch+var_28], ecx
.text:0040DC92                 mov     ecx, ds:dword_42C548
.text:0040DC98                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040DC9C                 mov     [esp+4Ch+var_24], ecx
.text:0040DCA0                 mov     ecx, ds:dword_42C54C
.text:0040DCA6                 mov     [esp+4Ch+var_20], ecx
.text:0040DCAA                 mov     ecx, ds:dword_42C550
.text:0040DCB0                 mov     [esp+4Ch+var_1C], ecx
.text:0040DCB4                 lea     ecx, [esp+4Ch+var_3C]
.text:0040DCB8                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040DCBC                 call    sub_40DCD0
.text:0040DCC1                 add     esp, 4Ch
.text:0040DCC4                 retn
.text:0040DCC4 sub_40DC30      endp
.text:0040DCC4
.text:0040DCC4 ; ---------------------------------------------------------------------------
.text:0040DCC5                 align 10h
.text:0040DCD0
.text:0040DCD0 ; =============== S U B R O U T I N E =======================================
.text:0040DCD0
.text:0040DCD0
.text:0040DCD0 ; int __cdecl sub_40DCD0(int, char *, int, int)
.text:0040DCD0 sub_40DCD0      proc near               ; CODE XREF: .text:0040D882↑p
.text:0040DCD0                                         ; sub_40D890+22↑p ...
.text:0040DCD0
.text:0040DCD0 Block           = dword ptr -2Ch
.text:0040DCD0 var_28          = dword ptr -28h
.text:0040DCD0 Str             = dword ptr -24h
.text:0040DCD0 var_20          = dword ptr -20h
.text:0040DCD0 var_1C          = dword ptr -1Ch
.text:0040DCD0 var_18          = dword ptr -18h
.text:0040DCD0 var_14          = dword ptr -14h
.text:0040DCD0 arg_0           = dword ptr  4
.text:0040DCD0 arg_4           = dword ptr  8
.text:0040DCD0 arg_8           = dword ptr  0Ch
.text:0040DCD0 arg_C           = dword ptr  10h
.text:0040DCD0
.text:0040DCD0                 push    ebp
.text:0040DCD1                 push    edi
.text:0040DCD2                 push    esi
.text:0040DCD3                 push    ebx
.text:0040DCD4                 sub     esp, 1Ch
.text:0040DCD7                 call    _errno
.text:0040DCDC                 mov     edx, [eax]
.text:0040DCDE                 mov     eax, [esp+2Ch+arg_0]
.text:0040DCE2                 mov     [esp+2Ch+var_14], edx
.text:0040DCE6                 test    eax, eax
.text:0040DCE8                 js      loc_40DE8A
.text:0040DCEE                 mov     eax, [esp+2Ch+arg_0]
.text:0040DCF2                 cmp     dword_42B0E0, eax
.text:0040DCF8                 ja      short loc_40DD70
.text:0040DCFA                 mov     esi, eax
.text:0040DCFC                 inc     esi
.text:0040DCFD                 cmp     esi, 1FFFFFFFh
.text:0040DD03                 ja      loc_40DE8F
.text:0040DD09                 mov     ebx, off_42B0EC
.text:0040DD0F                 cmp     ebx, offset dword_42B0E4
.text:0040DD15                 jz      loc_40DE61
.text:0040DD1B
.text:0040DD1B loc_40DD1B:                             ; CODE XREF: sub_40DCD0+1B5↓j
.text:0040DD1B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040DD1E                 lea     ecx, ds:0[esi*8]
.text:0040DD25                 mov     ebp, esi
.text:0040DD27                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040DD2B                 call    sub_4124B0
.text:0040DD30                 mov     off_42B0EC, eax
.text:0040DD35                 mov     ebx, dword_42B0E0
.text:0040DD3B                 sub     ebp, ebx
.text:0040DD3D                 lea     edi, [eax+ebx*8]
.text:0040DD40                 lea     eax, ds:0[ebp*8]
.text:0040DD47                 cmp     eax, 7
.text:0040DD4A                 jbe     short loc_40DD60
.text:0040DD4C                 test    edi, 4
.text:0040DD52                 jz      short loc_40DD60
.text:0040DD54                 mov     dword ptr [edi], 0
.text:0040DD5A                 sub     eax, 4
.text:0040DD5D                 add     edi, 4
.text:0040DD60
.text:0040DD60 loc_40DD60:                             ; CODE XREF: sub_40DCD0+7A↑j
.text:0040DD60                                         ; sub_40DCD0+82↑j
.text:0040DD60                 cld
.text:0040DD61                 mov     ecx, eax
.text:0040DD63                 shr     ecx, 2
.text:0040DD66                 xor     eax, eax
.text:0040DD68                 rep stosd
.text:0040DD6A                 mov     dword_42B0E0, esi
.text:0040DD70
.text:0040DD70 loc_40DD70:                             ; CODE XREF: sub_40DCD0+28↑j
.text:0040DD70                 mov     esi, off_42B0EC
.text:0040DD76                 mov     eax, [esp+2Ch+arg_0]
.text:0040DD7A                 mov     ebp, [esi+eax*8]
.text:0040DD7D                 mov     edi, [esi+eax*8+4]
.text:0040DD81                 mov     esi, [esp+2Ch+arg_C]
.text:0040DD85                 test    esi, esi
.text:0040DD87                 jz      loc_40DE57
.text:0040DD8D
.text:0040DD8D loc_40DD8D:                             ; CODE XREF: sub_40DCD0+18C↓j
.text:0040DD8D                 call    _errno
.text:0040DD92                 mov     ebx, [eax]
.text:0040DD94                 mov     [esp+2Ch+var_18], esi ; int
.text:0040DD98                 mov     ecx, [esi]
.text:0040DD9A                 mov     [esp+2Ch+Block], edi ; int
.text:0040DD9D                 mov     edx, [esp+2Ch+arg_8]
.text:0040DDA1                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040DDA5                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040DDA9                 mov     ecx, [esp+2Ch+arg_4]
.text:0040DDAD                 mov     [esp+2Ch+var_20], edx ; int
.text:0040DDB1                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040DDB5                 call    sub_40CB90
.text:0040DDBA                 mov     esi, eax
.text:0040DDBC                 call    _errno
.text:0040DDC1                 mov     [eax], ebx
.text:0040DDC3                 cmp     ebp, esi
.text:0040DDC5                 ja      short loc_40DE3B
.text:0040DDC7                 lea     ebp, [esi+1]
.text:0040DDCA                 mov     ebx, off_42B0EC
.text:0040DDD0                 cmp     edi, offset unk_42C430
.text:0040DDD6                 mov     esi, [esp+2Ch+arg_0]
.text:0040DDDA                 mov     [ebx+esi*8], ebp
.text:0040DDDD                 jz      short loc_40DDED
.text:0040DDDF                 mov     [esp+2Ch+Block], edi ; Block
.text:0040DDE2                 call    free
.text:0040DDE7                 mov     ebx, off_42B0EC
.text:0040DDED
.text:0040DDED loc_40DDED:                             ; CODE XREF: sub_40DCD0+10D↑j
.text:0040DDED                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040DDF0                 call    sub_412420
.text:0040DDF5                 mov     esi, [esp+2Ch+arg_C]
.text:0040DDF9                 mov     edi, eax
.text:0040DDFB                 mov     eax, [esp+2Ch+arg_0]
.text:0040DDFF                 test    esi, esi
.text:0040DE01                 mov     [ebx+eax*8+4], edi
.text:0040DE05                 jz      short loc_40DE50
.text:0040DE07
.text:0040DE07 loc_40DE07:                             ; CODE XREF: sub_40DCD0+185↓j
.text:0040DE07                 call    _errno
.text:0040DE0C                 mov     ebx, [eax]
.text:0040DE0E                 mov     [esp+2Ch+var_18], esi ; int
.text:0040DE12                 mov     ecx, [esi]
.text:0040DE14                 mov     [esp+2Ch+Block], edi ; int
.text:0040DE17                 mov     edx, [esp+2Ch+arg_8]
.text:0040DE1B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040DE1F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040DE23                 mov     ecx, [esp+2Ch+arg_4]
.text:0040DE27                 mov     [esp+2Ch+var_20], edx ; int
.text:0040DE2B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040DE2F                 call    sub_40CB90
.text:0040DE34                 call    _errno
.text:0040DE39                 mov     [eax], ebx
.text:0040DE3B
.text:0040DE3B loc_40DE3B:                             ; CODE XREF: sub_40DCD0+F5↑j
.text:0040DE3B                 call    _errno
.text:0040DE40                 mov     ebp, [esp+2Ch+var_14]
.text:0040DE44                 mov     [eax], ebp
.text:0040DE46                 add     esp, 1Ch
.text:0040DE49                 mov     eax, edi
.text:0040DE4B                 pop     ebx
.text:0040DE4C                 pop     esi
.text:0040DE4D                 pop     edi
.text:0040DE4E                 pop     ebp
.text:0040DE4F                 retn
.text:0040DE50 ; ---------------------------------------------------------------------------
.text:0040DE50
.text:0040DE50 loc_40DE50:                             ; CODE XREF: sub_40DCD0+135↑j
.text:0040DE50                 mov     esi, offset dword_42C530
.text:0040DE55                 jmp     short loc_40DE07
.text:0040DE57 ; ---------------------------------------------------------------------------
.text:0040DE57
.text:0040DE57 loc_40DE57:                             ; CODE XREF: sub_40DCD0+B7↑j
.text:0040DE57                 mov     esi, offset dword_42C530
.text:0040DE5C                 jmp     loc_40DD8D
.text:0040DE61 ; ---------------------------------------------------------------------------
.text:0040DE61
.text:0040DE61 loc_40DE61:                             ; CODE XREF: sub_40DCD0+45↑j
.text:0040DE61                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040DE68                 call    sub_412420
.text:0040DE6D                 mov     off_42B0EC, eax
.text:0040DE72                 mov     edi, dword_42B0E4
.text:0040DE78                 mov     ebx, eax
.text:0040DE7A                 mov     ecx, off_42B0E8
.text:0040DE80                 mov     [eax], edi
.text:0040DE82                 mov     [eax+4], ecx
.text:0040DE85                 jmp     loc_40DD1B
.text:0040DE8A ; ---------------------------------------------------------------------------
.text:0040DE8A
.text:0040DE8A loc_40DE8A:                             ; CODE XREF: sub_40DCD0+18↑j
.text:0040DE8A                 call    abort
.text:0040DE8F ; ---------------------------------------------------------------------------
.text:0040DE8F
.text:0040DE8F loc_40DE8F:                             ; CODE XREF: sub_40DCD0+33↑j
.text:0040DE8F                 call    sub_415320
.text:0040DE8F sub_40DCD0      endp
.text:0040DE8F
.text:0040DE8F ; ---------------------------------------------------------------------------
.text:0040DE94                 align 10h
.text:0040DEA0
.text:0040DEA0 ; =============== S U B R O U T I N E =======================================
.text:0040DEA0
.text:0040DEA0
.text:0040DEA0 sub_40DEA0      proc near               ; DATA XREF: .text:loc_40E9F0↓o
.text:0040DEA0                                         ; sub_40EB20:loc_40EBDA↓o ...
.text:0040DEA0                 push    eax
.text:0040DEA1                 dec     edi
.text:0040DEA2                 push    ebx
.text:0040DEA3                 dec     ecx
.text:0040DEA4                 pop     eax
.text:0040DEA5                 dec     esp
.text:0040DEA6                 pop     ecx
.text:0040DEA7                 pop     edi
.text:0040DEA8                 inc     ebx
.text:0040DEA9                 dec     edi
.text:0040DEAA                 push    edx
.text:0040DEAB                 push    edx
.text:0040DEAC                 inc     ebp
.text:0040DEAD                 inc     ebx
.text:0040DEAE                 push    esp
.text:0040DEAF
.text:0040DEAF loc_40DEAF:                             ; CODE XREF: .text:0040E2B0↓p
.text:0040DEAF                                         ; .text:0040E383↓p ...
.text:0040DEAF                 add     [ebp+57h], dl
.text:0040DEAF sub_40DEA0      endp ; sp-analysis failed
.text:0040DEAF
.text:0040DEB2                 push    esi
.text:0040DEB3                 push    ebx
.text:0040DEB4                 sub     esp, 85Ch
.text:0040DEBA                 mov     esi, [esp+870h]
.text:0040DEC1                 movzx   edx, byte ptr [esp+87Ch]
.text:0040DEC9                 mov     ebp, [esp+880h]
.text:0040DED0                 mov     edi, [esp+874h]
.text:0040DED7                 mov     [esp+3Fh], dl
.text:0040DEDB                 movzx   ebx, byte ptr [esi]
.text:0040DEDE                 inc     esi
.text:0040DEDF                 test    bl, bl
.text:0040DEE1                 jz      loc_40E076
.text:0040DEE7                 mov     esi, esi
.text:0040DEE9                 lea     edi, [edi+0]
.text:0040DEF0
.text:0040DEF0 loc_40DEF0:                             ; CODE XREF: .text:0040E070↓j
.text:0040DEF0                 mov     byte ptr [esp+3Eh], 0
.text:0040DEF5                 test    ebp, 10h
.text:0040DEFB                 jz      short loc_40DF27
.text:0040DEFD                 mov     ecx, ds:__mb_cur_max
.text:0040DF03                 movzx   edx, bl
.text:0040DF06                 cmp     dword ptr [ecx], 1
.text:0040DF09                 jz      loc_40EB04
.text:0040DF0F                 mov     dword ptr [esp+4], 1
.text:0040DF17                 mov     [esp], edx
.text:0040DF1A                 call    _isctype
.text:0040DF1F
.text:0040DF1F loc_40DF1F:                             ; CODE XREF: .text:0040EB12↓j
.text:0040DF1F                 test    eax, eax
.text:0040DF21                 jnz     loc_40EAF0
.text:0040DF27
.text:0040DF27 loc_40DF27:                             ; CODE XREF: .text:0040DEFB↑j
.text:0040DF27                 mov     [esp+3Dh], bl
.text:0040DF2B
.text:0040DF2B loc_40DF2B:                             ; CODE XREF: .text:0040EAFF↓j
.text:0040DF2B                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040DF30                 movzx   eax, bl
.text:0040DF33                 sub     eax, 21h ; '!'  ; switch 60 cases
.text:0040DF36                 cmp     eax, 3Bh
.text:0040DF39                 ja      def_40DF3F      ; jumptable 0040DF3F default case, cases 34-41,44-46,48-62,65-90
.text:0040DF3F                 jmp     ds:jpt_40DF3F[eax*4] ; switch jump
.text:0040DF3F ; ---------------------------------------------------------------------------
.text:0040DF46                 align 4
.text:0040DF48 jpt_40DF3F      dd offset loc_40E579, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                                         ; DATA XREF: .text:0040DF3F↑r
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F ; jump table for switch statement
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset loc_40E103, offset loc_40E579, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset loc_40E4D0
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset loc_40E038, offset loc_40E579, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset def_40DF3F, offset def_40DF3F
.text:0040DF48                 dd offset def_40DF3F, offset loc_40E5D0, offset loc_40EA13
.text:0040E038 ; ---------------------------------------------------------------------------
.text:0040E038
.text:0040E038 loc_40E038:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040E038                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040E038                 test    ebp, 20h        ; jumptable 0040DF3F case 63
.text:0040E03E                 jnz     loc_40E0C0
.text:0040E044
.text:0040E044 loc_40E044:                             ; CODE XREF: .text:0040E0C3↓j
.text:0040E044                                         ; .text:0040E0FB↓j
.text:0040E044                 cmp     edi, [esp+878h]
.text:0040E04B                 mov     ecx, 1
.text:0040E050                 jz      short loc_40E090
.text:0040E052                 movzx   edx, byte ptr [edi]
.text:0040E055                 cmp     dl, 2Fh ; '/'
.text:0040E058                 jz      short loc_40E0B0
.text:0040E05A
.text:0040E05A loc_40E05A:                             ; CODE XREF: .text:0040E0B6↓j
.text:0040E05A                 cmp     dl, 2Eh ; '.'
.text:0040E05D                 jz      short loc_40E09D
.text:0040E05F                 nop
.text:0040E060
.text:0040E060 loc_40E060:                             ; CODE XREF: .text:0040E0A7↓j
.text:0040E060                                         ; .text:loc_40E526↓j ...
.text:0040E060                 movzx   ebx, byte ptr [esp+3Eh]
.text:0040E065                 inc     edi
.text:0040E066                 mov     [esp+3Fh], bl
.text:0040E06A                 movzx   ebx, byte ptr [esi]
.text:0040E06D                 inc     esi
.text:0040E06E                 test    bl, bl
.text:0040E070                 jnz     loc_40DEF0
.text:0040E076
.text:0040E076 loc_40E076:                             ; CODE XREF: .text:0040DEE1↑j
.text:0040E076                 xor     ecx, ecx
.text:0040E078                 cmp     edi, [esp+878h]
.text:0040E07F                 jz      short loc_40E090
.text:0040E081                 and     ebp, 8
.text:0040E084                 jz      short loc_40E08B
.text:0040E086                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040E089
.text:0040E089 loc_40E089:                             ; CODE XREF: .text:0040E38C↓j
.text:0040E089                 jz      short loc_40E090
.text:0040E08B
.text:0040E08B loc_40E08B:                             ; CODE XREF: .text:0040E084↑j
.text:0040E08B                                         ; .text:0040E231↓j ...
.text:0040E08B                 mov     ecx, 1
.text:0040E090
.text:0040E090 loc_40E090:                             ; CODE XREF: .text:0040E050↑j
.text:0040E090                                         ; .text:0040E07F↑j ...
.text:0040E090                 add     esp, 85Ch
.text:0040E096                 mov     eax, ecx
.text:0040E098                 pop     ebx
.text:0040E099                 pop     esi
.text:0040E09A                 pop     edi
.text:0040E09B                 pop     ebp
.text:0040E09C                 retn
.text:0040E09D ; ---------------------------------------------------------------------------
.text:0040E09D
.text:0040E09D loc_40E09D:                             ; CODE XREF: .text:0040E05D↑j
.text:0040E09D                 cmp     byte ptr [esp+3Fh], 0
.text:0040E0A2
.text:0040E0A2 loc_40E0A2:                             ; CODE XREF: .text:0040E787↓j
.text:0040E0A2                 mov     ecx, 1
.text:0040E0A7                 jz      short loc_40E060
.text:0040E0A9                 jmp     short loc_40E090
.text:0040E0A9 ; ---------------------------------------------------------------------------
.text:0040E0AB                 align 10h
.text:0040E0B0
.text:0040E0B0 loc_40E0B0:                             ; CODE XREF: .text:0040E058↑j
.text:0040E0B0                 test    ebp, 1
.text:0040E0B6                 jz      short loc_40E05A
.text:0040E0B8                 jmp     short loc_40E090
.text:0040E0B8 ; ---------------------------------------------------------------------------
.text:0040E0BA                 align 10h
.text:0040E0C0
.text:0040E0C0 loc_40E0C0:                             ; CODE XREF: .text:0040E03E↑j
.text:0040E0C0                 cmp     byte ptr [esi], 28h ; '('
.text:0040E0C3                 jnz     loc_40E044
.text:0040E0C9                 movzx   edx, byte ptr [esp+3Fh]
.text:0040E0CE                 mov     [esp+14h], ebp
.text:0040E0D2                 mov     ecx, [esp+878h]
.text:0040E0D9                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040E0DE                 mov     [esp+8], edi
.text:0040E0E2                 mov     [esp+0Ch], ecx
.text:0040E0E6                 mov     [esp+10h], edx
.text:0040E0EA                 mov     [esp+4], esi
.text:0040E0EE                 mov     [esp], ebx
.text:0040E0F1                 call    sub_40ECD0
.text:0040E0F6                 cmp     eax, 0FFFFFFFFh
.text:0040E0F9                 mov     ecx, eax
.text:0040E0FB                 jz      loc_40E044
.text:0040E101                 jmp     short loc_40E090
.text:0040E103 ; ---------------------------------------------------------------------------
.text:0040E103
.text:0040E103 loc_40E103:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040E103                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040E103                 test    ebp, 20h        ; jumptable 0040DF3F case 42
.text:0040E109                 jnz     loc_40E484
.text:0040E10F
.text:0040E10F loc_40E10F:                             ; CODE XREF: .text:0040E487↓j
.text:0040E10F                                         ; .text:0040E4C5↓j
.text:0040E10F                 cmp     edi, [esp+878h]
.text:0040E116                 jz      short loc_40E121
.text:0040E118                 cmp     byte ptr [edi], 2Eh ; '.'
.text:0040E11B                 jz      loc_40E46F
.text:0040E121
.text:0040E121 loc_40E121:                             ; CODE XREF: .text:0040E116↑j
.text:0040E121                                         ; .text:0040E47F↓j
.text:0040E121                 movzx   ebx, byte ptr [esi]
.text:0040E124                 inc     esi
.text:0040E125                 cmp     bl, 3Fh ; '?'
.text:0040E128                 jz      loc_40E411
.text:0040E12E                 cmp     bl, 2Ah ; '*'
.text:0040E131                 jz      loc_40E411
.text:0040E137
.text:0040E137 loc_40E137:                             ; CODE XREF: .text:0040E429↓j
.text:0040E137                 test    bl, bl
.text:0040E139                 jnz     short loc_40E17F
.text:0040E13B                 mov     ebx, ebp
.text:0040E13D                 and     ebx, 1
.text:0040E140                 jz      short loc_40E149
.text:0040E142                 and     ebp, 8
.text:0040E145                 jz      short loc_40E150
.text:0040E147                 xor     ebx, ebx
.text:0040E149
.text:0040E149 loc_40E149:                             ; CODE XREF: .text:0040E140↑j
.text:0040E149                                         ; .text:0040E17D↓j
.text:0040E149                 mov     ecx, ebx
.text:0040E14B                 jmp     loc_40E090
.text:0040E150 ; ---------------------------------------------------------------------------
.text:0040E150
.text:0040E150 loc_40E150:                             ; CODE XREF: .text:0040E145↑j
.text:0040E150                 sub     [esp+878h], edi
.text:0040E157                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0040E15F                 mov     [esp], edi
.text:0040E162                 mov     ebp, [esp+878h]
.text:0040E169                 mov     [esp+8], ebp
.text:0040E16D                 call    memchr
.text:0040E172                 test    eax, eax
.text:0040E174                 setz    dl
.text:0040E177                 movzx   esi, dl
.text:0040E17A                 dec     esi
.text:0040E17B                 and     ebx, esi
.text:0040E17D                 jmp     short loc_40E149
.text:0040E17F ; ---------------------------------------------------------------------------
.text:0040E17F
.text:0040E17F loc_40E17F:                             ; CODE XREF: .text:0040E139↑j
.text:0040E17F                 mov     [esp], edi
.text:0040E182                 mov     edx, [esp+878h]
.text:0040E189                 xor     ecx, ecx
.text:0040E18B                 sub     edx, edi
.text:0040E18D                 test    ebp, 1
.text:0040E193                 setz    cl
.text:0040E196                 mov     [esp+8], edx
.text:0040E19A                 dec     ecx
.text:0040E19B                 and     ecx, 2Fh
.text:0040E19E                 mov     [esp+4], ecx
.text:0040E1A2                 call    memchr
.text:0040E1A7                 mov     [esp+38h], eax
.text:0040E1AB                 test    eax, eax
.text:0040E1AD                 jz      loc_40E401
.text:0040E1B3
.text:0040E1B3 loc_40E1B3:                             ; CODE XREF: .text:0040E40C↓j
.text:0040E1B3                 cmp     bl, 5Bh ; '['
.text:0040E1B6                 jz      loc_40E3AD
.text:0040E1BC                 test    ebp, 20h
.text:0040E1C2                 jnz     loc_40E391
.text:0040E1C8
.text:0040E1C8 loc_40E1C8:                             ; CODE XREF: .text:0040E39E↓j
.text:0040E1C8                                         ; .text:0040E3A7↓j
.text:0040E1C8                 cmp     bl, 2Fh ; '/'
.text:0040E1CB                 jz      loc_40E319
.text:0040E1D1
.text:0040E1D1 loc_40E1D1:                             ; CODE XREF: .text:0040E31F↓j
.text:0040E1D1                 mov     [esp+34h], ebp
.text:0040E1D5                 test    ebp, 1
.text:0040E1DB                 jnz     short loc_40E1E6
.text:0040E1DD                 mov     edx, ebp
.text:0040E1DF                 and     edx, 0FFFFFFFBh
.text:0040E1E2                 mov     [esp+34h], edx
.text:0040E1E6
.text:0040E1E6 loc_40E1E6:                             ; CODE XREF: .text:0040E1DB↑j
.text:0040E1E6                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040E1EB                 cmp     bl, 5Ch ; '\'
.text:0040E1EE                 mov     [esp+30h], ecx
.text:0040E1F2                 jz      loc_40E305
.text:0040E1F8
.text:0040E1F8 loc_40E1F8:                             ; CODE XREF: .text:0040E30B↓j
.text:0040E1F8                                         ; .text:0040E314↓j
.text:0040E1F8                 test    ebp, 10h
.text:0040E1FE                 jz      short loc_40E22A
.text:0040E200                 mov     ecx, ds:__mb_cur_max
.text:0040E206                 movzx   edx, bl
.text:0040E209                 cmp     dword ptr [ecx], 1
.text:0040E20C                 jz      loc_40E2F2
.text:0040E212                 mov     dword ptr [esp+4], 1
.text:0040E21A                 mov     [esp], edx
.text:0040E21D                 call    _isctype
.text:0040E222
.text:0040E222 loc_40E222:                             ; CODE XREF: .text:0040E300↓j
.text:0040E222                 test    eax, eax
.text:0040E224                 jnz     loc_40E2E2
.text:0040E22A
.text:0040E22A loc_40E22A:                             ; CODE XREF: .text:0040E1FE↑j
.text:0040E22A                 mov     al, bl
.text:0040E22C
.text:0040E22C loc_40E22C:                             ; CODE XREF: .text:0040E2ED↓j
.text:0040E22C                 dec     esi
.text:0040E22D                 cmp     edi, [esp+38h]
.text:0040E231                 jnb     loc_40E08B
.text:0040E237                 movzx   ebx, al
.text:0040E23A
.text:0040E23A loc_40E23A:                             ; CODE XREF: .text:0040E281↓j
.text:0040E23A                 test    ebp, 10h
.text:0040E240                 jz      loc_40E2DD
.text:0040E246                 movzx   edx, byte ptr [edi]
.text:0040E249                 mov     eax, ds:__mb_cur_max
.text:0040E24E                 movzx   ecx, dl
.text:0040E251                 cmp     dword ptr [eax], 1
.text:0040E254                 jz      short loc_40E2CD
.text:0040E256                 mov     dword ptr [esp+4], 1
.text:0040E25E                 mov     [esp], ecx
.text:0040E261                 call    _isctype
.text:0040E266                 movzx   edx, byte ptr [edi]
.text:0040E269
.text:0040E269 loc_40E269:                             ; CODE XREF: .text:0040E2DB↓j
.text:0040E269                 test    eax, eax
.text:0040E26B                 jnz     short loc_40E2C0
.text:0040E26D
.text:0040E26D loc_40E26D:                             ; CODE XREF: .text:0040E2E0↓j
.text:0040E26D                 movzx   eax, dl
.text:0040E270
.text:0040E270 loc_40E270:                             ; CODE XREF: .text:0040E2CB↓j
.text:0040E270                 cmp     eax, ebx
.text:0040E272                 jz      short loc_40E288
.text:0040E274
.text:0040E274 loc_40E274:                             ; CODE XREF: .text:0040E2B9↓j
.text:0040E274                 mov     dword ptr [esp+30h], 0
.text:0040E27C                 inc     edi
.text:0040E27D                 cmp     edi, [esp+38h]
.text:0040E281                 jb      short loc_40E23A
.text:0040E283                 jmp     loc_40E08B
.text:0040E288 ; ---------------------------------------------------------------------------
.text:0040E288
.text:0040E288 loc_40E288:                             ; CODE XREF: .text:0040E272↑j
.text:0040E288                 mov     [esp+4], edi
.text:0040E28C                 xor     ecx, ecx
.text:0040E28E                 mov     edx, [esp+34h]
.text:0040E292                 cmp     dword ptr [esp+30h], 0
.text:0040E297                 mov     [esp], esi
.text:0040E29A                 mov     [esp+10h], edx
.text:0040E29E                 mov     edx, [esp+878h]
.text:0040E2A5                 setnz   cl
.text:0040E2A8                 mov     [esp+8], edx
.text:0040E2AC                 mov     [esp+0Ch], ecx
.text:0040E2B0                 call    near ptr loc_40DEAF+1
.text:0040E2B5                 xor     ecx, ecx
.text:0040E2B7                 test    eax, eax
.text:0040E2B9                 jnz     short loc_40E274
.text:0040E2BB                 jmp     loc_40E090
.text:0040E2C0 ; ---------------------------------------------------------------------------
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: .text:0040E26B↑j
.text:0040E2C0                 movzx   ecx, dl
.text:0040E2C3                 mov     [esp], ecx
.text:0040E2C6                 call    tolower
.text:0040E2CB                 jmp     short loc_40E270
.text:0040E2CD ; ---------------------------------------------------------------------------
.text:0040E2CD
.text:0040E2CD loc_40E2CD:                             ; CODE XREF: .text:0040E254↑j
.text:0040E2CD                 mov     eax, ds:_pctype
.text:0040E2D2                 mov     eax, [eax]
.text:0040E2D4                 movzx   eax, word ptr [eax+ecx*2]
.text:0040E2D8                 and     eax, 1
.text:0040E2DB                 jmp     short loc_40E269
.text:0040E2DD ; ---------------------------------------------------------------------------
.text:0040E2DD
.text:0040E2DD loc_40E2DD:                             ; CODE XREF: .text:0040E240↑j
.text:0040E2DD                 movzx   edx, byte ptr [edi]
.text:0040E2E0                 jmp     short loc_40E26D
.text:0040E2E2 ; ---------------------------------------------------------------------------
.text:0040E2E2
.text:0040E2E2 loc_40E2E2:                             ; CODE XREF: .text:0040E224↑j
.text:0040E2E2                 movzx   edx, bl
.text:0040E2E5                 mov     [esp], edx
.text:0040E2E8                 call    tolower
.text:0040E2ED                 jmp     loc_40E22C
.text:0040E2F2 ; ---------------------------------------------------------------------------
.text:0040E2F2
.text:0040E2F2 loc_40E2F2:                             ; CODE XREF: .text:0040E20C↑j
.text:0040E2F2                 mov     eax, ds:_pctype
.text:0040E2F7                 mov     ecx, [eax]
.text:0040E2F9                 movzx   eax, word ptr [ecx+edx*2]
.text:0040E2FD                 and     eax, 1
.text:0040E300                 jmp     loc_40E222
.text:0040E305 ; ---------------------------------------------------------------------------
.text:0040E305
.text:0040E305 loc_40E305:                             ; CODE XREF: .text:0040E1F2↑j
.text:0040E305                 test    ebp, 2
.text:0040E30B                 jnz     loc_40E1F8
.text:0040E311                 movzx   ebx, byte ptr [esi]
.text:0040E314                 jmp     loc_40E1F8
.text:0040E319 ; ---------------------------------------------------------------------------
.text:0040E319
.text:0040E319 loc_40E319:                             ; CODE XREF: .text:0040E1CB↑j
.text:0040E319                 test    ebp, 1
.text:0040E31F                 jz      loc_40E1D1
.text:0040E325                 cmp     edi, [esp+878h]
.text:0040E32C                 jnb     loc_40E08B
.text:0040E332                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040E335                 jz      short loc_40E34A
.text:0040E337
.text:0040E337 loc_40E337:                             ; CODE XREF: .text:0040E348↓j
.text:0040E337                 inc     edi
.text:0040E338                 cmp     edi, [esp+878h]
.text:0040E33F                 jnb     loc_40E08B
.text:0040E345                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040E348                 jnz     short loc_40E337
.text:0040E34A
.text:0040E34A loc_40E34A:                             ; CODE XREF: .text:0040E335↑j
.text:0040E34A                 cmp     edi, [esp+878h]
.text:0040E351                 jnb     loc_40E08B
.text:0040E357                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040E35A                 jnz     loc_40E08B
.text:0040E360                 mov     [esp+10h], ebp
.text:0040E364                 mov     ecx, [esp+878h]
.text:0040E36B                 lea     ebx, [edi+1]
.text:0040E36E                 mov     [esp+4], ebx
.text:0040E372                 shr     ebp, 2
.text:0040E375                 and     ebp, 1
.text:0040E378                 mov     [esp+8], ecx
.text:0040E37C                 mov     [esp+0Ch], ebp
.text:0040E380                 mov     [esp], esi
.text:0040E383                 call    near ptr loc_40DEAF+1
.text:0040E388                 xor     ecx, ecx
.text:0040E38A                 test    eax, eax
.text:0040E38C                 jmp     loc_40E089
.text:0040E391 ; ---------------------------------------------------------------------------
.text:0040E391
.text:0040E391 loc_40E391:                             ; CODE XREF: .text:0040E1C2↑j
.text:0040E391                 cmp     bl, 40h ; '@'
.text:0040E394                 jz      short loc_40E3A4
.text:0040E396                 cmp     bl, 2Bh ; '+'
.text:0040E399                 jz      short loc_40E3A4
.text:0040E39B                 cmp     bl, 21h ; '!'
.text:0040E39E                 jnz     loc_40E1C8
.text:0040E3A4
.text:0040E3A4 loc_40E3A4:                             ; CODE XREF: .text:0040E394↑j
.text:0040E3A4                                         ; .text:0040E399↑j
.text:0040E3A4                 cmp     byte ptr [esi], 28h ; '('
.text:0040E3A7                 jnz     loc_40E1C8
.text:0040E3AD
.text:0040E3AD loc_40E3AD:                             ; CODE XREF: .text:0040E1B6↑j
.text:0040E3AD                 mov     ebx, ebp
.text:0040E3AF                 and     ebp, 1
.text:0040E3B2                 jnz     short loc_40E3B7
.text:0040E3B4                 and     ebx, 0FFFFFFFBh
.text:0040E3B7
.text:0040E3B7 loc_40E3B7:                             ; CODE XREF: .text:0040E3B2↑j
.text:0040E3B7                 movzx   eax, byte ptr [esp+3Fh]
.text:0040E3BC                 dec     esi
.text:0040E3BD                 cmp     edi, [esp+38h]
.text:0040E3C1                 jnb     loc_40E08B
.text:0040E3C7
.text:0040E3C7 loc_40E3C7:                             ; CODE XREF: .text:0040E3FA↓j
.text:0040E3C7                 mov     [esp+10h], ebx
.text:0040E3CB                 mov     ebp, [esp+878h]
.text:0040E3D2                 movzx   edx, al
.text:0040E3D5                 mov     [esp+0Ch], edx
.text:0040E3D9                 mov     [esp+4], edi
.text:0040E3DD                 mov     [esp+8], ebp
.text:0040E3E1                 mov     [esp], esi
.text:0040E3E4                 call    near ptr loc_40DEAF+1
.text:0040E3E9                 xor     ecx, ecx
.text:0040E3EB                 test    eax, eax
.text:0040E3ED                 jz      loc_40E090
.text:0040E3F3                 inc     edi
.text:0040E3F4                 xor     eax, eax
.text:0040E3F6                 cmp     edi, [esp+38h]
.text:0040E3FA                 jb      short loc_40E3C7
.text:0040E3FC                 jmp     loc_40E08B
.text:0040E401 ; ---------------------------------------------------------------------------
.text:0040E401
.text:0040E401 loc_40E401:                             ; CODE XREF: .text:0040E1AD↑j
.text:0040E401                 mov     ecx, [esp+878h]
.text:0040E408                 mov     [esp+38h], ecx
.text:0040E40C                 jmp     loc_40E1B3
.text:0040E411 ; ---------------------------------------------------------------------------
.text:0040E411
.text:0040E411 loc_40E411:                             ; CODE XREF: .text:0040E128↑j
.text:0040E411                                         ; .text:0040E131↑j ...
.text:0040E411                 cmp     byte ptr [esi], 28h ; '('
.text:0040E414                 jz      short loc_40E457
.text:0040E416
.text:0040E416 loc_40E416:                             ; CODE XREF: .text:0040E45D↓j
.text:0040E416                                         ; .text:0040E469↓j
.text:0040E416                 cmp     bl, 3Fh ; '?'
.text:0040E419                 jz      short loc_40E430
.text:0040E41B
.text:0040E41B loc_40E41B:                             ; CODE XREF: .text:0040E448↓j
.text:0040E41B                                         ; .text:0040E46D↓j
.text:0040E41B                 movzx   ebx, byte ptr [esi]
.text:0040E41E                 inc     esi
.text:0040E41F                 cmp     bl, 3Fh ; '?'
.text:0040E422                 jz      short loc_40E411
.text:0040E424                 cmp     bl, 2Ah ; '*'
.text:0040E427                 jz      short loc_40E411
.text:0040E429                 jmp     loc_40E137
.text:0040E429 ; ---------------------------------------------------------------------------
.text:0040E42E                 align 10h
.text:0040E430
.text:0040E430 loc_40E430:                             ; CODE XREF: .text:0040E419↑j
.text:0040E430                 cmp     edi, [esp+878h]
.text:0040E437                 mov     ecx, 1
.text:0040E43C                 jz      loc_40E090
.text:0040E442                 cmp     byte ptr [edi], 2Fh ; '/'
.text:0040E445                 jz      short loc_40E44A
.text:0040E447
.text:0040E447 loc_40E447:                             ; CODE XREF: .text:0040E450↓j
.text:0040E447                 inc     edi
.text:0040E448                 jmp     short loc_40E41B
.text:0040E44A ; ---------------------------------------------------------------------------
.text:0040E44A
.text:0040E44A loc_40E44A:                             ; CODE XREF: .text:0040E445↑j
.text:0040E44A                 test    ebp, 1
.text:0040E450                 jz      short loc_40E447
.text:0040E452                 jmp     loc_40E090
.text:0040E457 ; ---------------------------------------------------------------------------
.text:0040E457
.text:0040E457 loc_40E457:                             ; CODE XREF: .text:0040E414↑j
.text:0040E457                 test    ebp, 20h
.text:0040E45D                 jz      short loc_40E416
.text:0040E45F                 mov     [esp], esi
.text:0040E462                 call    sub_40EB20
.text:0040E467                 cmp     eax, esi
.text:0040E469                 jz      short loc_40E416
.text:0040E46B                 mov     esi, eax
.text:0040E46D                 jmp     short loc_40E41B
.text:0040E46F ; ---------------------------------------------------------------------------
.text:0040E46F
.text:0040E46F loc_40E46F:                             ; CODE XREF: .text:0040E11B↑j
.text:0040E46F                 cmp     byte ptr [esp+3Fh], 0
.text:0040E474                 mov     ecx, 1
.text:0040E479                 jnz     loc_40E090
.text:0040E47F                 jmp     loc_40E121
.text:0040E484 ; ---------------------------------------------------------------------------
.text:0040E484
.text:0040E484 loc_40E484:                             ; CODE XREF: .text:0040E109↑j
.text:0040E484                 cmp     byte ptr [esi], 28h ; '('
.text:0040E487                 jnz     loc_40E10F
.text:0040E48D                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040E492                 mov     [esp+14h], ebp
.text:0040E496                 mov     edx, [esp+878h]
.text:0040E49D                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040E4A2                 mov     [esp+8], edi
.text:0040E4A6                 mov     [esp+10h], ecx
.text:0040E4AA                 mov     [esp+0Ch], edx
.text:0040E4AE                 mov     [esp+4], esi
.text:0040E4B2                 mov     [esp], ebx
.text:0040E4B5                 call    sub_40ECD0
.text:0040E4BA                 cmp     eax, 0FFFFFFFFh
.text:0040E4BD                 mov     ecx, eax
.text:0040E4BF                 jnz     loc_40E090
.text:0040E4C5                 jmp     loc_40E10F
.text:0040E4C5 ; ---------------------------------------------------------------------------
.text:0040E4CA                 align 10h
.text:0040E4D0
.text:0040E4D0 loc_40E4D0:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040E4D0                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040E4D0                 mov     ebx, ebp        ; jumptable 0040DF3F case 47
.text:0040E4D2                 and     ebx, 5
.text:0040E4D5                 cmp     ebx, 5
.text:0040E4D8                 jz      short loc_40E555
.text:0040E4DA                 lea     esi, [esi+0]
.text:0040E4E0
.text:0040E4E0 def_40DF3F:                             ; CODE XREF: .text:0040DF39↑j
.text:0040E4E0                                         ; .text:0040DF3F↑j ...
.text:0040E4E0                 cmp     edi, [esp+878h] ; jumptable 0040DF3F default case, cases 34-41,44-46,48-62,65-90
.text:0040E4E7                 jz      loc_40E08B
.text:0040E4ED                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040E4F2                 test    ebp, 10h
.text:0040E4F8                 jz      short loc_40E550
.text:0040E4FA                 movzx   edx, byte ptr [edi]
.text:0040E4FD                 mov     eax, ds:__mb_cur_max
.text:0040E502                 movzx   ecx, dl
.text:0040E505                 cmp     dword ptr [eax], 1
.text:0040E508                 jz      short loc_40E540
.text:0040E50A                 mov     dword ptr [esp+4], 1
.text:0040E512                 mov     [esp], ecx
.text:0040E515                 call    _isctype
.text:0040E51A                 movzx   edx, byte ptr [edi]
.text:0040E51D
.text:0040E51D loc_40E51D:                             ; CODE XREF: .text:0040E54E↓j
.text:0040E51D                 test    eax, eax
.text:0040E51F                 jnz     short loc_40E531
.text:0040E521
.text:0040E521 loc_40E521:                             ; CODE XREF: .text:0040E553↓j
.text:0040E521                 movzx   eax, dl
.text:0040E524
.text:0040E524 loc_40E524:                             ; CODE XREF: .text:0040E53C↓j
.text:0040E524                 cmp     ebx, eax
.text:0040E526
.text:0040E526 loc_40E526:                             ; CODE XREF: .text:0040EAA2↓j
.text:0040E526                 jz      loc_40E060
.text:0040E52C                 jmp     loc_40E08B
.text:0040E531 ; ---------------------------------------------------------------------------
.text:0040E531
.text:0040E531 loc_40E531:                             ; CODE XREF: .text:0040E51F↑j
.text:0040E531                 movzx   ecx, dl
.text:0040E534                 mov     [esp], ecx
.text:0040E537                 call    tolower
.text:0040E53C                 jmp     short loc_40E524
.text:0040E53C ; ---------------------------------------------------------------------------
.text:0040E53E                 align 10h
.text:0040E540
.text:0040E540 loc_40E540:                             ; CODE XREF: .text:0040E508↑j
.text:0040E540                 mov     eax, ds:_pctype
.text:0040E545                 mov     eax, [eax]
.text:0040E547                 movzx   eax, word ptr [eax+ecx*2]
.text:0040E54B                 and     eax, 1
.text:0040E54E                 jmp     short loc_40E51D
.text:0040E550 ; ---------------------------------------------------------------------------
.text:0040E550
.text:0040E550 loc_40E550:                             ; CODE XREF: .text:0040E4F8↑j
.text:0040E550                 movzx   edx, byte ptr [edi]
.text:0040E553                 jmp     short loc_40E521
.text:0040E555 ; ---------------------------------------------------------------------------
.text:0040E555
.text:0040E555 loc_40E555:                             ; CODE XREF: .text:0040E4D8↑j
.text:0040E555                 cmp     edi, [esp+878h]
.text:0040E55C                 jz      loc_40E08B
.text:0040E562                 movzx   edx, byte ptr [esp+3Dh]
.text:0040E567                 cmp     dl, [edi]
.text:0040E569                 jnz     loc_40E08B
.text:0040E56F                 mov     byte ptr [esp+3Eh], 1
.text:0040E574                 jmp     loc_40E060
.text:0040E579 ; ---------------------------------------------------------------------------
.text:0040E579
.text:0040E579 loc_40E579:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040E579                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040E579                 test    ebp, 20h        ; jumptable 0040DF3F cases 33,43,64
.text:0040E57F                 jz      def_40DF3F      ; jumptable 0040DF3F default case, cases 34-41,44-46,48-62,65-90
.text:0040E585                 cmp     byte ptr [esi], 28h ; '('
.text:0040E588                 jnz     def_40DF3F      ; jumptable 0040DF3F default case, cases 34-41,44-46,48-62,65-90
.text:0040E58E                 movzx   ecx, byte ptr [esp+3Fh]
.text:0040E593                 mov     [esp+14h], ebp
.text:0040E597                 mov     edx, [esp+878h]
.text:0040E59E                 movzx   ebx, byte ptr [esp+3Dh]
.text:0040E5A3                 mov     [esp+8], edi
.text:0040E5A7                 mov     [esp+10h], ecx
.text:0040E5AB                 mov     [esp+0Ch], edx
.text:0040E5AF                 mov     [esp+4], esi
.text:0040E5B3                 mov     [esp], ebx
.text:0040E5B6                 call    sub_40ECD0
.text:0040E5BB                 cmp     eax, 0FFFFFFFFh
.text:0040E5BE                 mov     ecx, eax
.text:0040E5C0                 jz      def_40DF3F      ; jumptable 0040DF3F default case, cases 34-41,44-46,48-62,65-90
.text:0040E5C6                 jmp     loc_40E090
.text:0040E5C6 ; ---------------------------------------------------------------------------
.text:0040E5CB                 align 10h
.text:0040E5D0
.text:0040E5D0 loc_40E5D0:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040E5D0                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040E5D0                 mov     eax, ds:dword_42C560 ; jumptable 0040DF3F case 91
.text:0040E5D5                 test    eax, eax
.text:0040E5D7                 jz      loc_40E9F0
.text:0040E5DD
.text:0040E5DD loc_40E5DD:                             ; CODE XREF: .text:0040EA0E↓j
.text:0040E5DD                 cmp     edi, [esp+878h]
.text:0040E5E4                 mov     ecx, 1
.text:0040E5E9                 jz      loc_40E090
.text:0040E5EF                 movzx   edx, byte ptr [edi]
.text:0040E5F2                 cmp     dl, 2Eh ; '.'
.text:0040E5F5                 mov     bl, dl
.text:0040E5F7                 jz      loc_40E9E0
.text:0040E5FD
.text:0040E5FD loc_40E5FD:                             ; CODE XREF: .text:0040E9E5↓j
.text:0040E5FD                 cmp     dl, 2Fh ; '/'
.text:0040E600                 jz      loc_40E9C6
.text:0040E606
.text:0040E606 loc_40E606:                             ; CODE XREF: .text:0040E9D1↓j
.text:0040E606                 mov     byte ptr [esp+2Fh], 0
.text:0040E60B                 movzx   eax, byte ptr [esi]
.text:0040E60E                 cmp     al, 21h ; '!'
.text:0040E610                 jz      loc_40E9BC
.text:0040E616                 mov     ecx, ds:dword_42C560
.text:0040E61C                 test    ecx, ecx
.text:0040E61E                 js      loc_40E9B4
.text:0040E624
.text:0040E624 loc_40E624:                             ; CODE XREF: .text:0040E9B6↓j
.text:0040E624                                         ; .text:0040E9C1↓j
.text:0040E624                 cmp     byte ptr [esp+2Fh], 0
.text:0040E629                 jz      short loc_40E62C
.text:0040E62B                 inc     esi
.text:0040E62C
.text:0040E62C loc_40E62C:                             ; CODE XREF: .text:0040E629↑j
.text:0040E62C                 test    ebp, 10h
.text:0040E632                 jz      short loc_40E661
.text:0040E634                 movzx   ecx, bl
.text:0040E637                 mov     ebx, ds:__mb_cur_max
.text:0040E63D                 cmp     dword ptr [ebx], 1
.text:0040E640                 jz      loc_40E9A1
.text:0040E646                 mov     dword ptr [esp+4], 1
.text:0040E64E                 mov     [esp], ecx
.text:0040E651                 call    _isctype
.text:0040E656                 movzx   edx, byte ptr [edi]
.text:0040E659
.text:0040E659 loc_40E659:                             ; CODE XREF: .text:0040E9AF↓j
.text:0040E659                 test    eax, eax
.text:0040E65B                 jnz     loc_40E98D
.text:0040E661
.text:0040E661 loc_40E661:                             ; CODE XREF: .text:0040E632↑j
.text:0040E661                 mov     [esp+2Eh], dl
.text:0040E665
.text:0040E665 loc_40E665:                             ; CODE XREF: .text:0040E99C↓j
.text:0040E665                 movzx   ebx, byte ptr [esi]
.text:0040E668                 inc     esi
.text:0040E669                 lea     esi, [esi+0]
.text:0040E670
.text:0040E670 loc_40E670:                             ; CODE XREF: .text:0040E6FA↓j
.text:0040E670                 test    ebp, 2
.text:0040E676                 jnz     short loc_40E681
.text:0040E678                 cmp     bl, 5Ch ; '\'
.text:0040E67B                 jz      loc_40E918
.text:0040E681
.text:0040E681 loc_40E681:                             ; CODE XREF: .text:0040E676↑j
.text:0040E681                 cmp     bl, 5Bh ; '['
.text:0040E684                 jz      loc_40E881
.text:0040E68A
.text:0040E68A loc_40E68A:                             ; CODE XREF: .text:0040E884↓j
.text:0040E68A                 test    bl, bl
.text:0040E68C                 mov     ecx, 1
.text:0040E691                 jz      loc_40E090
.text:0040E697                 test    ebp, 10h
.text:0040E69D                 jz      short loc_40E6C9
.text:0040E69F                 mov     ecx, ds:__mb_cur_max
.text:0040E6A5                 movzx   edx, bl
.text:0040E6A8                 cmp     dword ptr [ecx], 1
.text:0040E6AB                 jz      loc_40E86E
.text:0040E6B1                 mov     dword ptr [esp+4], 1
.text:0040E6B9                 mov     [esp], edx
.text:0040E6BC                 call    _isctype
.text:0040E6C1
.text:0040E6C1 loc_40E6C1:                             ; CODE XREF: .text:0040E87C↓j
.text:0040E6C1                 test    eax, eax
.text:0040E6C3                 jnz     loc_40E85E
.text:0040E6C9
.text:0040E6C9 loc_40E6C9:                             ; CODE XREF: .text:0040E69D↑j
.text:0040E6C9                 mov     al, bl
.text:0040E6CB
.text:0040E6CB loc_40E6CB:                             ; CODE XREF: .text:0040E869↓j
.text:0040E6CB                 mov     bl, al
.text:0040E6CD
.text:0040E6CD loc_40E6CD:                             ; CODE XREF: .text:0040E8C1↓j
.text:0040E6CD                 mov     byte ptr [esp+27h], 0
.text:0040E6D2                 movzx   edx, byte ptr [esi]
.text:0040E6D5                 cmp     dl, 2Dh ; '-'
.text:0040E6D8                 mov     cl, dl
.text:0040E6DA                 jz      loc_40E840
.text:0040E6E0
.text:0040E6E0 loc_40E6E0:                             ; CODE XREF: .text:0040E846↓j
.text:0040E6E0                                         ; .text:0040E84E↓j ...
.text:0040E6E0                 cmp     byte ptr [esp+27h], 0
.text:0040E6E5                 jnz     short loc_40E6ED
.text:0040E6E7                 cmp     bl, [esp+2Eh]
.text:0040E6EB                 jz      short loc_40E757
.text:0040E6ED
.text:0040E6ED loc_40E6ED:                             ; CODE XREF: .text:0040E6E5↑j
.text:0040E6ED                 inc     esi
.text:0040E6EE                 mov     dl, bl
.text:0040E6F0                 cmp     cl, 2Dh ; '-'
.text:0040E6F3                 mov     bl, cl
.text:0040E6F5                 jz      short loc_40E715
.text:0040E6F7
.text:0040E6F7 loc_40E6F7:                             ; CODE XREF: .text:0040E71A↓j
.text:0040E6F7                                         ; .text:0040E752↓j ...
.text:0040E6F7                 cmp     bl, 5Dh ; ']'
.text:0040E6FA                 jnz     loc_40E670
.text:0040E700                 cmp     byte ptr [esp+2Fh], 0
.text:0040E705                 mov     ecx, 1
.text:0040E70A                 jnz     loc_40E060
.text:0040E710                 jmp     loc_40E090
.text:0040E715 ; ---------------------------------------------------------------------------
.text:0040E715
.text:0040E715 loc_40E715:                             ; CODE XREF: .text:0040E6F5↑j
.text:0040E715                 movzx   eax, byte ptr [esi]
.text:0040E718                 cmp     al, 5Dh ; ']'
.text:0040E71A                 jz      short loc_40E6F7
.text:0040E71C                 inc     esi
.text:0040E71D                 mov     bl, al
.text:0040E71F                 test    ebp, 2
.text:0040E725                 jnz     short loc_40E72F
.text:0040E727                 cmp     al, 5Ch ; '\'
.text:0040E729                 jz      loc_40E830
.text:0040E72F
.text:0040E72F loc_40E72F:                             ; CODE XREF: .text:0040E725↑j
.text:0040E72F                                         ; .text:0040E834↓j
.text:0040E72F                 test    bl, bl
.text:0040E731                 mov     ecx, 1
.text:0040E736                 jz      loc_40E090
.text:0040E73C                 movzx   ecx, byte ptr [esp+2Eh]
.text:0040E741                 movsx   eax, dl
.text:0040E744                 cmp     eax, ecx
.text:0040E746                 jg      short loc_40E74E
.text:0040E748                 cmp     [esp+2Eh], bl
.text:0040E74C                 jbe     short loc_40E754
.text:0040E74E
.text:0040E74E loc_40E74E:                             ; CODE XREF: .text:0040E746↑j
.text:0040E74E                                         ; .text:0040E90D↓j
.text:0040E74E                 movzx   ebx, byte ptr [esi]
.text:0040E751                 inc     esi
.text:0040E752                 jmp     short loc_40E6F7
.text:0040E754 ; ---------------------------------------------------------------------------
.text:0040E754
.text:0040E754 loc_40E754:                             ; CODE XREF: .text:0040E74C↑j
.text:0040E754                                         ; .text:0040E780↓j ...
.text:0040E754                 movzx   edx, byte ptr [esi]
.text:0040E757
.text:0040E757 loc_40E757:                             ; CODE XREF: .text:0040E6EB↑j
.text:0040E757                 inc     esi
.text:0040E758                 mov     bl, dl
.text:0040E75A                 test    dl, dl
.text:0040E75C                 mov     ecx, 1
.text:0040E761                 jz      loc_40E090
.text:0040E767                 test    ebp, 2
.text:0040E76D                 jnz     short loc_40E778
.text:0040E76F                 cmp     dl, 5Ch ; '\'
.text:0040E772                 jz      loc_40E820
.text:0040E778
.text:0040E778 loc_40E778:                             ; CODE XREF: .text:0040E76D↑j
.text:0040E778                 cmp     dl, 5Bh ; '['
.text:0040E77B                 jz      short loc_40E790
.text:0040E77D
.text:0040E77D loc_40E77D:                             ; CODE XREF: .text:0040E79D↓j
.text:0040E77D                                         ; .text:0040E7C3↓j
.text:0040E77D                 cmp     bl, 5Dh ; ']'
.text:0040E780                 jnz     short loc_40E754
.text:0040E782                 cmp     byte ptr [esp+2Fh], 0
.text:0040E787                 jmp     loc_40E0A2
.text:0040E787 ; ---------------------------------------------------------------------------
.text:0040E78C                 align 10h
.text:0040E790
.text:0040E790 loc_40E790:                             ; CODE XREF: .text:0040E77B↑j
.text:0040E790                 movzx   eax, byte ptr [esi]
.text:0040E793                 cmp     al, 3Ah ; ':'
.text:0040E795                 jz      short loc_40E7E4
.text:0040E797                 cmp     al, 3Dh ; '='
.text:0040E799                 jz      short loc_40E7C5
.text:0040E79B                 cmp     al, 2Eh ; '.'
.text:0040E79D                 jnz     short loc_40E77D
.text:0040E79F                 inc     esi
.text:0040E7A0
.text:0040E7A0 loc_40E7A0:                             ; CODE XREF: .text:0040E7B4↓j
.text:0040E7A0                                         ; .text:0040E7BA↓j
.text:0040E7A0                 inc     esi
.text:0040E7A1                 mov     ecx, 1
.text:0040E7A6                 movzx   ebx, byte ptr [esi]
.text:0040E7A9                 test    bl, bl
.text:0040E7AB                 jz      loc_40E090
.text:0040E7B1                 cmp     bl, 2Eh ; '.'
.text:0040E7B4                 jnz     short loc_40E7A0
.text:0040E7B6                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040E7BA                 jnz     short loc_40E7A0
.text:0040E7BC
.text:0040E7BC loc_40E7BC:                             ; CODE XREF: .text:0040E7DD↓j
.text:0040E7BC                                         ; .text:0040E817↓j
.text:0040E7BC                 add     esi, 2
.text:0040E7BF                 movzx   ebx, byte ptr [esi]
.text:0040E7C2
.text:0040E7C2 loc_40E7C2:                             ; CODE XREF: .text:0040E823↓j
.text:0040E7C2                 inc     esi
.text:0040E7C3                 jmp     short loc_40E77D
.text:0040E7C5 ; ---------------------------------------------------------------------------
.text:0040E7C5
.text:0040E7C5 loc_40E7C5:                             ; CODE XREF: .text:0040E799↑j
.text:0040E7C5                 inc     esi
.text:0040E7C6                 cmp     byte ptr [esi], 0
.text:0040E7C9                 jz      loc_40E08B
.text:0040E7CF                 inc     esi
.text:0040E7D0                 cmp     byte ptr [esi], 3Dh ; '='
.text:0040E7D3                 jnz     loc_40E08B
.text:0040E7D9                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040E7DD                 jz      short loc_40E7BC
.text:0040E7DF                 jmp     loc_40E08B
.text:0040E7E4 ; ---------------------------------------------------------------------------
.text:0040E7E4
.text:0040E7E4 loc_40E7E4:                             ; CODE XREF: .text:0040E795↑j
.text:0040E7E4                 xor     eax, eax
.text:0040E7E6                 mov     edx, esi
.text:0040E7E8
.text:0040E7E8 loc_40E7E8:                             ; CODE XREF: .text:0040E808↓j
.text:0040E7E8                 inc     eax
.text:0040E7E9                 inc     esi
.text:0040E7EA                 cmp     eax, 800h
.text:0040E7EF                 movzx   ebx, byte ptr [esi]
.text:0040E7F2                 mov     ecx, 1
.text:0040E7F7                 jz      loc_40E090
.text:0040E7FD                 cmp     bl, 3Ah ; ':'
.text:0040E800                 jz      short loc_40E811
.text:0040E802
.text:0040E802 loc_40E802:                             ; CODE XREF: .text:0040E815↓j
.text:0040E802                 sub     bl, 61h ; 'a'
.text:0040E805                 cmp     bl, 18h
.text:0040E808                 jbe     short loc_40E7E8
.text:0040E80A                 mov     esi, edx
.text:0040E80C                 jmp     loc_40E754
.text:0040E811 ; ---------------------------------------------------------------------------
.text:0040E811
.text:0040E811 loc_40E811:                             ; CODE XREF: .text:0040E800↑j
.text:0040E811                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040E815                 jnz     short loc_40E802
.text:0040E817                 jmp     short loc_40E7BC
.text:0040E817 ; ---------------------------------------------------------------------------
.text:0040E819                 align 10h
.text:0040E820
.text:0040E820 loc_40E820:                             ; CODE XREF: .text:0040E772↑j
.text:0040E820                 cmp     byte ptr [esi], 0
.text:0040E823                 jnz     short loc_40E7C2
.text:0040E825                 jmp     loc_40E08B
.text:0040E825 ; ---------------------------------------------------------------------------
.text:0040E82A                 align 10h
.text:0040E830
.text:0040E830 loc_40E830:                             ; CODE XREF: .text:0040E729↑j
.text:0040E830                 movzx   ebx, byte ptr [esi]
.text:0040E833                 inc     esi
.text:0040E834                 jmp     loc_40E72F
.text:0040E834 ; ---------------------------------------------------------------------------
.text:0040E839                 align 10h
.text:0040E840
.text:0040E840 loc_40E840:                             ; CODE XREF: .text:0040E6DA↑j
.text:0040E840                 movzx   eax, byte ptr [esi+1]
.text:0040E844                 test    al, al
.text:0040E846                 jz      loc_40E6E0
.text:0040E84C                 cmp     al, 5Dh ; ']'
.text:0040E84E                 jz      loc_40E6E0
.text:0040E854                 mov     byte ptr [esp+27h], 1
.text:0040E859                 jmp     loc_40E6E0
.text:0040E85E ; ---------------------------------------------------------------------------
.text:0040E85E
.text:0040E85E loc_40E85E:                             ; CODE XREF: .text:0040E6C3↑j
.text:0040E85E                 movzx   edx, bl
.text:0040E861                 mov     [esp], edx
.text:0040E864                 call    tolower
.text:0040E869                 jmp     loc_40E6CB
.text:0040E86E ; ---------------------------------------------------------------------------
.text:0040E86E
.text:0040E86E loc_40E86E:                             ; CODE XREF: .text:0040E6AB↑j
.text:0040E86E                 mov     eax, ds:_pctype
.text:0040E873                 mov     ecx, [eax]
.text:0040E875                 movzx   eax, word ptr [ecx+edx*2]
.text:0040E879                 and     eax, 1
.text:0040E87C                 jmp     loc_40E6C1
.text:0040E881 ; ---------------------------------------------------------------------------
.text:0040E881
.text:0040E881 loc_40E881:                             ; CODE XREF: .text:0040E684↑j
.text:0040E881                 cmp     byte ptr [esi], 3Ah ; ':'
.text:0040E884                 jnz     loc_40E68A
.text:0040E88A                 mov     [esp+28h], esi
.text:0040E88E                 xor     edx, edx
.text:0040E890
.text:0040E890 loc_40E890:                             ; CODE XREF: .text:0040E8B9↓j
.text:0040E890                 cmp     edx, 800h
.text:0040E896                 mov     ecx, 1
.text:0040E89B                 jz      loc_40E090
.text:0040E8A1                 inc     esi
.text:0040E8A2                 movzx   ebx, byte ptr [esi]
.text:0040E8A5                 cmp     bl, 3Ah ; ':'
.text:0040E8A8                 jz      short loc_40E8C6
.text:0040E8AA
.text:0040E8AA loc_40E8AA:                             ; CODE XREF: .text:0040E8CA↓j
.text:0040E8AA                 mov     cl, bl
.text:0040E8AC                 sub     cl, 61h ; 'a'
.text:0040E8AF                 cmp     cl, 18h
.text:0040E8B2                 ja      short loc_40E8BB
.text:0040E8B4                 mov     [esp+edx+40h], bl
.text:0040E8B8                 inc     edx
.text:0040E8B9                 jmp     short loc_40E890
.text:0040E8BB ; ---------------------------------------------------------------------------
.text:0040E8BB
.text:0040E8BB loc_40E8BB:                             ; CODE XREF: .text:0040E8B2↑j
.text:0040E8BB                 mov     esi, [esp+28h]
.text:0040E8BF                 mov     bl, 5Bh ; '['
.text:0040E8C1                 jmp     loc_40E6CD
.text:0040E8C6 ; ---------------------------------------------------------------------------
.text:0040E8C6
.text:0040E8C6 loc_40E8C6:                             ; CODE XREF: .text:0040E8A8↑j
.text:0040E8C6                 cmp     byte ptr [esi+1], 5Dh ; ']'
.text:0040E8CA                 jnz     short loc_40E8AA
.text:0040E8CC                 mov     byte ptr [esp+edx+40h], 0
.text:0040E8D1                 add     esi, 2
.text:0040E8D4                 lea     edx, [esp+40h]
.text:0040E8D8                 mov     [esp], edx
.text:0040E8DB                 call    wctype
.text:0040E8E0                 movzx   ebx, ax
.text:0040E8E3                 mov     ecx, 1
.text:0040E8E8                 test    bx, bx
.text:0040E8EB                 jz      loc_40E090
.text:0040E8F1                 movzx   edx, byte ptr [edi]
.text:0040E8F4                 mov     [esp], edx
.text:0040E8F7                 call    btowc
.text:0040E8FC                 mov     [esp+4], ebx
.text:0040E900                 movzx   ecx, ax
.text:0040E903                 mov     [esp], ecx
.text:0040E906                 call    iswctype
.text:0040E90B                 test    eax, eax
.text:0040E90D                 jz      loc_40E74E
.text:0040E913                 jmp     loc_40E754
.text:0040E918 ; ---------------------------------------------------------------------------
.text:0040E918
.text:0040E918 loc_40E918:                             ; CODE XREF: .text:0040E67B↑j
.text:0040E918                 movzx   edx, byte ptr [esi]
.text:0040E91B                 mov     ecx, 1
.text:0040E920                 test    dl, dl
.text:0040E922                 jz      loc_40E090
.text:0040E928                 test    ebp, 10h
.text:0040E92E                 jz      short loc_40E955
.text:0040E930                 mov     ebx, ds:__mb_cur_max
.text:0040E936                 movzx   ecx, dl
.text:0040E939                 cmp     dword ptr [ebx], 1
.text:0040E93C                 jz      short loc_40E97D
.text:0040E93E                 mov     dword ptr [esp+4], 1
.text:0040E946                 mov     [esp], ecx
.text:0040E949                 call    _isctype
.text:0040E94E                 movzx   edx, byte ptr [esi]
.text:0040E951
.text:0040E951 loc_40E951:                             ; CODE XREF: .text:0040E98B↓j
.text:0040E951                 test    eax, eax
.text:0040E953                 jnz     short loc_40E970
.text:0040E955
.text:0040E955 loc_40E955:                             ; CODE XREF: .text:0040E92E↑j
.text:0040E955                 mov     al, dl
.text:0040E957
.text:0040E957 loc_40E957:                             ; CODE XREF: .text:0040E97B↓j
.text:0040E957                 inc     esi
.text:0040E958                 mov     bl, al
.text:0040E95A                 cmp     al, [esp+2Eh]
.text:0040E95E                 jnz     loc_40E6F7
.text:0040E964                 jmp     loc_40E754
.text:0040E964 ; ---------------------------------------------------------------------------
.text:0040E969                 align 10h
.text:0040E970
.text:0040E970 loc_40E970:                             ; CODE XREF: .text:0040E953↑j
.text:0040E970                 movzx   ecx, dl
.text:0040E973                 mov     [esp], ecx
.text:0040E976                 call    tolower
.text:0040E97B                 jmp     short loc_40E957
.text:0040E97D ; ---------------------------------------------------------------------------
.text:0040E97D
.text:0040E97D loc_40E97D:                             ; CODE XREF: .text:0040E93C↑j
.text:0040E97D                 mov     eax, ds:_pctype
.text:0040E982                 mov     ebx, [eax]
.text:0040E984                 movzx   eax, word ptr [ebx+ecx*2]
.text:0040E988                 and     eax, 1
.text:0040E98B                 jmp     short loc_40E951
.text:0040E98D ; ---------------------------------------------------------------------------
.text:0040E98D
.text:0040E98D loc_40E98D:                             ; CODE XREF: .text:0040E65B↑j
.text:0040E98D                 movzx   ecx, dl
.text:0040E990                 mov     [esp], ecx
.text:0040E993                 call    tolower
.text:0040E998                 mov     [esp+2Eh], al
.text:0040E99C                 jmp     loc_40E665
.text:0040E9A1 ; ---------------------------------------------------------------------------
.text:0040E9A1
.text:0040E9A1 loc_40E9A1:                             ; CODE XREF: .text:0040E640↑j
.text:0040E9A1                 mov     eax, ds:_pctype
.text:0040E9A6                 mov     ebx, [eax]
.text:0040E9A8                 movzx   eax, word ptr [ebx+ecx*2]
.text:0040E9AC                 and     eax, 1
.text:0040E9AF                 jmp     loc_40E659
.text:0040E9B4 ; ---------------------------------------------------------------------------
.text:0040E9B4
.text:0040E9B4 loc_40E9B4:                             ; CODE XREF: .text:0040E61E↑j
.text:0040E9B4                 cmp     al, 5Eh ; '^'
.text:0040E9B6                 jnz     loc_40E624
.text:0040E9BC
.text:0040E9BC loc_40E9BC:                             ; CODE XREF: .text:0040E610↑j
.text:0040E9BC                 mov     byte ptr [esp+2Fh], 1
.text:0040E9C1                 jmp     loc_40E624
.text:0040E9C6 ; ---------------------------------------------------------------------------
.text:0040E9C6
.text:0040E9C6 loc_40E9C6:                             ; CODE XREF: .text:0040E600↑j
.text:0040E9C6                 test    ebp, 1
.text:0040E9CC                 mov     ecx, 1
.text:0040E9D1                 jz      loc_40E606
.text:0040E9D7                 jmp     loc_40E090
.text:0040E9D7 ; ---------------------------------------------------------------------------
.text:0040E9DC                 align 10h
.text:0040E9E0
.text:0040E9E0 loc_40E9E0:                             ; CODE XREF: .text:0040E5F7↑j
.text:0040E9E0                 cmp     byte ptr [esp+3Fh], 0
.text:0040E9E5                 jz      loc_40E5FD
.text:0040E9EB                 jmp     loc_40E090
.text:0040E9F0 ; ---------------------------------------------------------------------------
.text:0040E9F0
.text:0040E9F0 loc_40E9F0:                             ; CODE XREF: .text:0040E5D7↑j
.text:0040E9F0                 mov     dword ptr [esp], offset sub_40DEA0
.text:0040E9F7                 call    getenv
.text:0040E9FC                 test    eax, eax
.text:0040E9FE                 setnz   dl
.text:0040EA01                 movzx   ecx, dl
.text:0040EA04                 lea     ebx, [ecx+ecx-1]
.text:0040EA08                 mov     ds:dword_42C560, ebx
.text:0040EA0E                 jmp     loc_40E5DD
.text:0040EA13 ; ---------------------------------------------------------------------------
.text:0040EA13
.text:0040EA13 loc_40EA13:                             ; CODE XREF: .text:0040DF3F↑j
.text:0040EA13                                         ; DATA XREF: .text:jpt_40DF3F↑o
.text:0040EA13                 test    ebp, 2          ; jumptable 0040DF3F case 92
.text:0040EA19                 jnz     short loc_40EA5E
.text:0040EA1B                 movzx   ebx, byte ptr [esi]
.text:0040EA1E                 mov     ecx, 1
.text:0040EA23                 inc     esi
.text:0040EA24                 test    bl, bl
.text:0040EA26                 jz      loc_40E090
.text:0040EA2C                 test    ebp, 10h
.text:0040EA32                 jz      short loc_40EA5A
.text:0040EA34                 mov     ecx, ds:__mb_cur_max
.text:0040EA3A                 movzx   edx, bl
.text:0040EA3D                 cmp     dword ptr [ecx], 1
.text:0040EA40                 jz      loc_40EAD6
.text:0040EA46                 mov     dword ptr [esp+4], 1
.text:0040EA4E                 mov     [esp], edx
.text:0040EA51                 call    _isctype
.text:0040EA56
.text:0040EA56 loc_40EA56:                             ; CODE XREF: .text:0040EAE4↓j
.text:0040EA56                 test    eax, eax
.text:0040EA58                 jnz     short loc_40EAC9
.text:0040EA5A
.text:0040EA5A loc_40EA5A:                             ; CODE XREF: .text:0040EA32↑j
.text:0040EA5A                 mov     al, bl
.text:0040EA5C
.text:0040EA5C loc_40EA5C:                             ; CODE XREF: .text:0040EAD4↓j
.text:0040EA5C                 mov     bl, al
.text:0040EA5E
.text:0040EA5E loc_40EA5E:                             ; CODE XREF: .text:0040EA19↑j
.text:0040EA5E                 cmp     edi, [esp+878h]
.text:0040EA65                 jz      loc_40E08B
.text:0040EA6B                 test    ebp, 10h
.text:0040EA71                 movzx   ebx, bl
.text:0040EA74                 jz      short loc_40EAC4
.text:0040EA76                 movzx   edx, byte ptr [edi]
.text:0040EA79                 mov     eax, ds:__mb_cur_max
.text:0040EA7E                 movzx   ecx, dl
.text:0040EA81                 cmp     dword ptr [eax], 1
.text:0040EA84                 jz      short loc_40EAB4
.text:0040EA86                 mov     dword ptr [esp+4], 1
.text:0040EA8E                 mov     [esp], ecx
.text:0040EA91                 call    _isctype
.text:0040EA96                 movzx   edx, byte ptr [edi]
.text:0040EA99
.text:0040EA99 loc_40EA99:                             ; CODE XREF: .text:0040EAC2↓j
.text:0040EA99                 test    eax, eax
.text:0040EA9B                 jnz     short loc_40EAA7
.text:0040EA9D
.text:0040EA9D loc_40EA9D:                             ; CODE XREF: .text:0040EAC7↓j
.text:0040EA9D                 movzx   eax, dl
.text:0040EAA0
.text:0040EAA0 loc_40EAA0:                             ; CODE XREF: .text:0040EAB2↓j
.text:0040EAA0                 cmp     eax, ebx
.text:0040EAA2                 jmp     loc_40E526
.text:0040EAA7 ; ---------------------------------------------------------------------------
.text:0040EAA7
.text:0040EAA7 loc_40EAA7:                             ; CODE XREF: .text:0040EA9B↑j
.text:0040EAA7                 movzx   ecx, dl
.text:0040EAAA                 mov     [esp], ecx
.text:0040EAAD                 call    tolower
.text:0040EAB2                 jmp     short loc_40EAA0
.text:0040EAB4 ; ---------------------------------------------------------------------------
.text:0040EAB4
.text:0040EAB4 loc_40EAB4:                             ; CODE XREF: .text:0040EA84↑j
.text:0040EAB4                 mov     eax, ds:_pctype
.text:0040EAB9                 mov     eax, [eax]
.text:0040EABB                 movzx   eax, word ptr [eax+ecx*2]
.text:0040EABF                 and     eax, 1
.text:0040EAC2                 jmp     short loc_40EA99
.text:0040EAC4 ; ---------------------------------------------------------------------------
.text:0040EAC4
.text:0040EAC4 loc_40EAC4:                             ; CODE XREF: .text:0040EA74↑j
.text:0040EAC4                 movzx   edx, byte ptr [edi]
.text:0040EAC7                 jmp     short loc_40EA9D
.text:0040EAC9 ; ---------------------------------------------------------------------------
.text:0040EAC9
.text:0040EAC9 loc_40EAC9:                             ; CODE XREF: .text:0040EA58↑j
.text:0040EAC9                 movzx   edx, bl
.text:0040EACC                 mov     [esp], edx
.text:0040EACF                 call    tolower
.text:0040EAD4                 jmp     short loc_40EA5C
.text:0040EAD6 ; ---------------------------------------------------------------------------
.text:0040EAD6
.text:0040EAD6 loc_40EAD6:                             ; CODE XREF: .text:0040EA40↑j
.text:0040EAD6                 mov     eax, ds:_pctype
.text:0040EADB                 mov     ecx, [eax]
.text:0040EADD                 movzx   eax, word ptr [ecx+edx*2]
.text:0040EAE1                 and     eax, 1
.text:0040EAE4                 jmp     loc_40EA56
.text:0040EAE4 ; ---------------------------------------------------------------------------
.text:0040EAE9                 align 10h
.text:0040EAF0
.text:0040EAF0 loc_40EAF0:                             ; CODE XREF: .text:0040DF21↑j
.text:0040EAF0                 movzx   edx, bl
.text:0040EAF3                 mov     [esp], edx
.text:0040EAF6                 call    tolower
.text:0040EAFB                 mov     [esp+3Dh], al
.text:0040EAFF                 jmp     loc_40DF2B
.text:0040EB04 ; ---------------------------------------------------------------------------
.text:0040EB04
.text:0040EB04 loc_40EB04:                             ; CODE XREF: .text:0040DF09↑j
.text:0040EB04                 mov     eax, ds:_pctype
.text:0040EB09                 mov     ecx, [eax]
.text:0040EB0B                 movzx   eax, word ptr [ecx+edx*2]
.text:0040EB0F                 and     eax, 1
.text:0040EB12                 jmp     loc_40DF1F
.text:0040EB12 ; ---------------------------------------------------------------------------
.text:0040EB17                 align 10h
.text:0040EB20
.text:0040EB20 ; =============== S U B R O U T I N E =======================================
.text:0040EB20
.text:0040EB20
.text:0040EB20 sub_40EB20      proc near               ; CODE XREF: .text:0040E462↑p
.text:0040EB20                                         ; sub_40EB20+5C↓p
.text:0040EB20
.text:0040EB20 VarName         = dword ptr -0Ch
.text:0040EB20 arg_0           = dword ptr  4
.text:0040EB20
.text:0040EB20                 push    esi
.text:0040EB21                 push    ebx
.text:0040EB22                 sub     esp, 4
.text:0040EB25                 mov     esi, [esp+0Ch+arg_0]
.text:0040EB29                 mov     ebx, esi
.text:0040EB2B                 nop
.text:0040EB2C                 lea     esi, [esi+0]
.text:0040EB30
.text:0040EB30 loc_40EB30:                             ; CODE XREF: sub_40EB20+43↓j
.text:0040EB30                                         ; sub_40EB20+63↓j ...
.text:0040EB30                 inc     ebx
.text:0040EB31                 mov     ecx, esi
.text:0040EB33                 movzx   edx, byte ptr [ebx]
.text:0040EB36                 test    dl, dl
.text:0040EB38                 jz      short loc_40EB68
.text:0040EB3A                 cmp     dl, 5Bh ; '['
.text:0040EB3D                 jz      short loc_40EB85
.text:0040EB3F                 cmp     dl, 3Fh ; '?'
.text:0040EB42                 jz      short loc_40EB70
.text:0040EB44                 cmp     dl, 2Ah ; '*'
.text:0040EB47                 jz      short loc_40EB70
.text:0040EB49                 cmp     dl, 2Bh ; '+'
.text:0040EB4C                 jz      short loc_40EB70
.text:0040EB4E                 cmp     dl, 40h ; '@'
.text:0040EB51                 jz      short loc_40EB70
.text:0040EB53                 cmp     dl, 21h ; '!'
.text:0040EB56                 jz      short loc_40EB70
.text:0040EB58                 nop
.text:0040EB59                 lea     esi, [esi+0]
.text:0040EB60
.text:0040EB60 loc_40EB60:                             ; CODE XREF: sub_40EB20+54↓j
.text:0040EB60                 cmp     dl, 29h ; ')'
.text:0040EB63                 jnz     short loc_40EB30
.text:0040EB65                 lea     ecx, [ebx+1]
.text:0040EB68
.text:0040EB68 loc_40EB68:                             ; CODE XREF: sub_40EB20+18↑j
.text:0040EB68                                         ; sub_40EB20+95↓j
.text:0040EB68                 pop     esi
.text:0040EB69                 mov     eax, ecx
.text:0040EB6B                 pop     ebx
.text:0040EB6C                 pop     esi
.text:0040EB6D                 retn
.text:0040EB6D ; ---------------------------------------------------------------------------
.text:0040EB6E                 align 10h
.text:0040EB70
.text:0040EB70 loc_40EB70:                             ; CODE XREF: sub_40EB20+22↑j
.text:0040EB70                                         ; sub_40EB20+27↑j ...
.text:0040EB70                 cmp     byte ptr [ebx+1], 28h ; '('
.text:0040EB74                 jnz     short loc_40EB60
.text:0040EB76                 lea     edx, [ebx+1]
.text:0040EB79                 mov     [esp+0Ch+VarName], edx
.text:0040EB7C                 call    sub_40EB20
.text:0040EB81                 mov     ebx, eax
.text:0040EB83                 jmp     short loc_40EB30
.text:0040EB85 ; ---------------------------------------------------------------------------
.text:0040EB85
.text:0040EB85 loc_40EB85:                             ; CODE XREF: sub_40EB20+1D↑j
.text:0040EB85                 mov     eax, ds:dword_42C560
.text:0040EB8A                 test    eax, eax
.text:0040EB8C                 jz      short loc_40EBDA
.text:0040EB8E
.text:0040EB8E loc_40EB8E:                             ; CODE XREF: sub_40EB20+D8↓j
.text:0040EB8E                 inc     ebx
.text:0040EB8F                 movzx   eax, byte ptr [ebx]
.text:0040EB92                 cmp     al, 21h ; '!'
.text:0040EB94                 jz      short loc_40EBD4
.text:0040EB96                 mov     ecx, ds:dword_42C560
.text:0040EB9C                 test    ecx, ecx
.text:0040EB9E                 js      short loc_40EBD0
.text:0040EBA0
.text:0040EBA0 loc_40EBA0:                             ; CODE XREF: sub_40EB20+B2↓j
.text:0040EBA0                                         ; sub_40EB20+B8↓j
.text:0040EBA0                 cmp     al, 5Dh ; ']'
.text:0040EBA2                 jz      short loc_40EBC3
.text:0040EBA4                 lea     esi, [esi+0]
.text:0040EBAA                 lea     edi, [edi+0]
.text:0040EBB0
.text:0040EBB0 loc_40EBB0:                             ; CODE XREF: sub_40EB20+9C↓j
.text:0040EBB0                                         ; sub_40EB20+A9↓j
.text:0040EBB0                 inc     ebx
.text:0040EBB1                 mov     ecx, esi
.text:0040EBB3                 test    al, al
.text:0040EBB5                 jz      short loc_40EB68
.text:0040EBB7                 movzx   eax, byte ptr [ebx]
.text:0040EBBA                 cmp     al, 5Dh ; ']'
.text:0040EBBC                 jnz     short loc_40EBB0
.text:0040EBBE                 jmp     loc_40EB30
.text:0040EBC3 ; ---------------------------------------------------------------------------
.text:0040EBC3
.text:0040EBC3 loc_40EBC3:                             ; CODE XREF: sub_40EB20+82↑j
.text:0040EBC3                 inc     ebx
.text:0040EBC4                 movzx   eax, byte ptr [ebx]
.text:0040EBC7                 cmp     al, 5Dh ; ']'
.text:0040EBC9                 jnz     short loc_40EBB0
.text:0040EBCB                 jmp     loc_40EB30
.text:0040EBD0 ; ---------------------------------------------------------------------------
.text:0040EBD0
.text:0040EBD0 loc_40EBD0:                             ; CODE XREF: sub_40EB20+7E↑j
.text:0040EBD0                 cmp     al, 5Eh ; '^'
.text:0040EBD2                 jnz     short loc_40EBA0
.text:0040EBD4
.text:0040EBD4 loc_40EBD4:                             ; CODE XREF: sub_40EB20+74↑j
.text:0040EBD4                 inc     ebx
.text:0040EBD5                 movzx   eax, byte ptr [ebx]
.text:0040EBD8                 jmp     short loc_40EBA0
.text:0040EBDA ; ---------------------------------------------------------------------------
.text:0040EBDA
.text:0040EBDA loc_40EBDA:                             ; CODE XREF: sub_40EB20+6C↑j
.text:0040EBDA                 mov     [esp+0Ch+VarName], offset sub_40DEA0 ; VarName
.text:0040EBE1                 call    getenv
.text:0040EBE6                 test    eax, eax
.text:0040EBE8                 setnz   dl
.text:0040EBEB                 movzx   ecx, dl
.text:0040EBEE                 lea     edx, [ecx+ecx-1]
.text:0040EBF2                 mov     ds:dword_42C560, edx
.text:0040EBF8                 jmp     short loc_40EB8E
.text:0040EBF8 sub_40EB20      endp
.text:0040EBF8
.text:0040EBF8 ; ---------------------------------------------------------------------------
.text:0040EBFA                 align 10h
.text:0040EC00 aInvalidExtende db 'Invalid extended matching operator',0
.text:0040EC00                                         ; DATA XREF: sub_40ECD0:def_40EE5B↓o
.text:0040EC00                                         ; sub_40FE80:def_410080↓o
.text:0040EC23                 align 20h
.text:0040EC40 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/lib/fnmatch_loop.c',0
.text:0040EC40                                         ; DATA XREF: sub_40ECD0+47A↓o
.text:0040EC40                                         ; sub_40ECD0+532↓o ...
.text:0040EC6D                 align 20h
.text:0040EC80 aInvalidExtende_0 db '! "Invalid extended matching operator"',0
.text:0040EC80                                         ; DATA XREF: sub_40ECD0+482↓o
.text:0040EC80                                         ; sub_40FE80+502↓o
.text:0040ECA7 aP1L            db 'p[-1] == L(',27h,')',27h,')',0
.text:0040ECA7                                         ; DATA XREF: sub_40ECD0+53A↓o
.text:0040ECA7                                         ; sub_40FE80+5B8↓o
.text:0040ECB7 aListNull       db 'list != NULL',0     ; DATA XREF: sub_40ECD0+556↓o
.text:0040ECB7                                         ; sub_40FE80+5D4↓o
.text:0040ECC4                 align 10h
.text:0040ECD0
.text:0040ECD0 ; =============== S U B R O U T I N E =======================================
.text:0040ECD0
.text:0040ECD0
.text:0040ECD0 ; int __cdecl sub_40ECD0(int, char *, int, int, char, int)
.text:0040ECD0 sub_40ECD0      proc near               ; CODE XREF: .text:0040E0F1↑p
.text:0040ECD0                                         ; .text:0040E4B5↑p ...
.text:0040ECD0
.text:0040ECD0 Str             = dword ptr -3Ch
.text:0040ECD0 Source          = dword ptr -38h
.text:0040ECD0 var_34          = dword ptr -34h
.text:0040ECD0 var_30          = dword ptr -30h
.text:0040ECD0 var_2C          = dword ptr -2Ch
.text:0040ECD0 var_20          = dword ptr -20h
.text:0040ECD0 var_1C          = dword ptr -1Ch
.text:0040ECD0 var_15          = byte ptr -15h
.text:0040ECD0 var_14          = dword ptr -14h
.text:0040ECD0 arg_0           = dword ptr  4
.text:0040ECD0 arg_4           = dword ptr  8
.text:0040ECD0 arg_8           = dword ptr  0Ch
.text:0040ECD0 arg_C           = dword ptr  10h
.text:0040ECD0 arg_10          = byte ptr  14h
.text:0040ECD0 arg_14          = dword ptr  18h
.text:0040ECD0
.text:0040ECD0                 push    ebp
.text:0040ECD1                 xor     ebp, ebp
.text:0040ECD3                 push    edi
.text:0040ECD4                 push    esi
.text:0040ECD5                 push    ebx
.text:0040ECD6                 sub     esp, 2Ch
.text:0040ECD9                 lea     edx, [esp+3Ch+var_14]
.text:0040ECDD                 movzx   ecx, [esp+3Ch+arg_10]
.text:0040ECE2                 mov     [esp+3Ch+var_1C], edx
.text:0040ECE6                 mov     edx, [esp+3Ch+arg_4]
.text:0040ECEA                 mov     [esp+3Ch+var_14], 0
.text:0040ECF2                 mov     [esp+3Ch+var_15], cl
.text:0040ECF6                 mov     [esp+3Ch+Str], edx ; Str
.text:0040ECF9                 call    strlen
.text:0040ECFE                 mov     [esp+3Ch+var_20], eax
.text:0040ED02                 mov     esi, [esp+3Ch+arg_4]
.text:0040ED06                 inc     esi
.text:0040ED07                 mov     edi, esi
.text:0040ED09                 lea     esi, [esi+0]
.text:0040ED10
.text:0040ED10 loc_40ED10:                             ; CODE XREF: sub_40ECD0+92↓j
.text:0040ED10                 movzx   eax, byte ptr [esi]
.text:0040ED13                 mov     ecx, 0FFFFFFFFh
.text:0040ED18                 test    al, al
.text:0040ED1A                 jz      loc_40EDCA
.text:0040ED20                 cmp     al, 5Bh ; '['
.text:0040ED22                 jz      loc_40F245
.text:0040ED28                 cmp     al, 3Fh ; '?'
.text:0040ED2A                 jz      loc_40F232
.text:0040ED30                 cmp     al, 2Ah ; '*'
.text:0040ED32                 jz      loc_40F232
.text:0040ED38                 cmp     al, 2Bh ; '+'
.text:0040ED3A                 jz      loc_40F232
.text:0040ED40                 cmp     al, 40h ; '@'
.text:0040ED42                 jz      loc_40F232
.text:0040ED48                 cmp     al, 21h ; '!'
.text:0040ED4A                 jz      loc_40F232
.text:0040ED50
.text:0040ED50 loc_40ED50:                             ; CODE XREF: sub_40ECD0+566↓j
.text:0040ED50                 cmp     al, 29h ; ')'
.text:0040ED52                 jz      loc_40EDD4
.text:0040ED58                 cmp     al, 7Ch ; '|'
.text:0040ED5A                 lea     edx, [esi+1]
.text:0040ED5D                 jz      short loc_40ED64
.text:0040ED5F                 nop
.text:0040ED60
.text:0040ED60 loc_40ED60:                             ; CODE XREF: sub_40ECD0+96↓j
.text:0040ED60                                         ; sub_40ECD0+F8↓j ...
.text:0040ED60                 mov     esi, edx
.text:0040ED62                 jmp     short loc_40ED10
.text:0040ED64 ; ---------------------------------------------------------------------------
.text:0040ED64
.text:0040ED64 loc_40ED64:                             ; CODE XREF: sub_40ECD0+8D↑j
.text:0040ED64                 test    ebp, ebp
.text:0040ED66                 jnz     short loc_40ED60
.text:0040ED68                 mov     ebx, [esp+3Ch+arg_0]
.text:0040ED6C                 mov     edx, [esp+3Ch+var_20]
.text:0040ED70                 sub     ebx, 3Fh ; '?'
.text:0040ED73                 cmp     ebx, 1
.text:0040ED76                 jbe     short loc_40ED7F
.text:0040ED78                 mov     ecx, esi
.text:0040ED7A                 sub     ecx, edi
.text:0040ED7C                 lea     edx, [ecx+1]
.text:0040ED7F
.text:0040ED7F loc_40ED7F:                             ; CODE XREF: sub_40ECD0+A6↑j
.text:0040ED7F                 cmp     edx, 1F3Bh
.text:0040ED85                 lea     eax, [edx+4]
.text:0040ED88                 mov     ecx, 0FFFFFFFFh
.text:0040ED8D                 ja      short loc_40EDCA
.text:0040ED8F                 mov     [esp+3Ch+Str], eax ; Size
.text:0040ED92                 call    malloc
.text:0040ED97                 mov     [esp+3Ch+Source], edi
.text:0040ED9B                 mov     ecx, esi
.text:0040ED9D                 lea     edx, [eax+4]
.text:0040EDA0                 mov     [esp+3Ch+Str], edx
.text:0040EDA3                 sub     ecx, edi
.text:0040EDA5                 mov     ebx, eax
.text:0040EDA7                 mov     [esp+3Ch+var_34], ecx
.text:0040EDAB                 call    sub_41A930
.text:0040EDB0                 mov     byte ptr [eax], 0
.text:0040EDB3                 mov     edi, [esp+3Ch+var_1C]
.text:0040EDB7                 mov     dword ptr [ebx], 0
.text:0040EDBD                 mov     [esp+3Ch+var_1C], ebx
.text:0040EDC1                 mov     [edi], ebx
.text:0040EDC3                 lea     edi, [esi+1]
.text:0040EDC6                 mov     edx, edi
.text:0040EDC8                 jmp     short loc_40ED60
.text:0040EDCA ; ---------------------------------------------------------------------------
.text:0040EDCA
.text:0040EDCA loc_40EDCA:                             ; CODE XREF: sub_40ECD0+4A↑j
.text:0040EDCA                                         ; sub_40ECD0+BD↑j ...
.text:0040EDCA                 add     esp, 2Ch
.text:0040EDCD                 mov     eax, ecx
.text:0040EDCF                 pop     ebx
.text:0040EDD0                 pop     esi
.text:0040EDD1                 pop     edi
.text:0040EDD2                 pop     ebp
.text:0040EDD3                 retn
.text:0040EDD4 ; ---------------------------------------------------------------------------
.text:0040EDD4
.text:0040EDD4 loc_40EDD4:                             ; CODE XREF: sub_40ECD0+82↑j
.text:0040EDD4                 dec     ebp
.text:0040EDD5                 lea     edx, [esi+1]
.text:0040EDD8                 cmp     ebp, 0FFFFFFFFh
.text:0040EDDB                 jnz     short loc_40ED60
.text:0040EDDD                 mov     ebp, [esp+3Ch+arg_0]
.text:0040EDE1                 mov     edx, [esp+3Ch+var_20]
.text:0040EDE5                 sub     ebp, 3Fh ; '?'
.text:0040EDE8                 cmp     ebp, 1
.text:0040EDEB                 jbe     short loc_40EDF4
.text:0040EDED                 mov     ecx, esi
.text:0040EDEF                 sub     ecx, edi
.text:0040EDF1                 lea     edx, [ecx+1]
.text:0040EDF4
.text:0040EDF4 loc_40EDF4:                             ; CODE XREF: sub_40ECD0+11B↑j
.text:0040EDF4                 cmp     edx, 1F3Bh
.text:0040EDFA                 lea     eax, [edx+4]
.text:0040EDFD                 mov     ecx, 0FFFFFFFFh
.text:0040EE02                 ja      short loc_40EDCA
.text:0040EE04                 mov     [esp+3Ch+Str], eax ; Size
.text:0040EE07                 call    malloc
.text:0040EE0C                 mov     [esp+3Ch+Source], edi
.text:0040EE10                 mov     edx, esi
.text:0040EE12                 mov     ebx, eax
.text:0040EE14                 sub     edx, edi
.text:0040EE16                 lea     edi, [eax+4]
.text:0040EE19                 mov     [esp+3Ch+var_34], edx
.text:0040EE1D                 mov     [esp+3Ch+Str], edi
.text:0040EE20                 call    sub_41A930
.text:0040EE25                 mov     byte ptr [eax], 0
.text:0040EE28                 mov     ebp, [esp+3Ch+var_1C]
.text:0040EE2C                 mov     dword ptr [ebx], 0
.text:0040EE32                 mov     [ebp+0], ebx
.text:0040EE35                 mov     edx, [esp+3Ch+var_14]
.text:0040EE39                 test    edx, edx
.text:0040EE3B                 jz      loc_40F216
.text:0040EE41                 cmp     byte ptr [esi-1], 29h ; ')'
.text:0040EE45                 jnz     loc_40F1FA
.text:0040EE4B                 mov     eax, [esp+3Ch+arg_0]
.text:0040EE4F                 sub     eax, 21h ; '!'  ; switch 32 cases
.text:0040EE52                 cmp     eax, 1Fh
.text:0040EE55                 ja      def_40EE5B      ; jumptable 0040EE5B default case, cases 34-41,44-62
.text:0040EE5B                 jmp     ds:jpt_40EE5B[eax*4] ; switch jump
.text:0040EE5B ; ---------------------------------------------------------------------------
.text:0040EE62                 align 4
.text:0040EE64 jpt_40EE5B      dd offset loc_40F05D    ; DATA XREF: sub_40ECD0+18B↑r
.text:0040EE64                 dd offset def_40EE5B    ; jump table for switch statement
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset loc_40EEE4
.text:0040EE64                 dd offset loc_40EF1B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset def_40EE5B
.text:0040EE64                 dd offset loc_40F160
.text:0040EE64                 dd offset loc_40F197
.text:0040EEE4 ; ---------------------------------------------------------------------------
.text:0040EEE4
.text:0040EEE4 loc_40EEE4:                             ; CODE XREF: sub_40ECD0+18B↑j
.text:0040EEE4                                         ; DATA XREF: sub_40ECD0:jpt_40EE5B↑o
.text:0040EEE4                 movzx   ebp, [esp+3Ch+var_15] ; jumptable 0040EE5B case 42
.text:0040EEE9                 mov     [esp+3Ch+Str], esi
.text:0040EEEC                 mov     ecx, [esp+3Ch+arg_C]
.text:0040EEF0                 mov     edi, [esp+3Ch+arg_14]
.text:0040EEF4                 mov     ebx, [esp+3Ch+arg_8]
.text:0040EEF8                 mov     [esp+3Ch+var_34], ecx
.text:0040EEFC                 mov     [esp+3Ch+var_2C], edi
.text:0040EF00                 mov     [esp+3Ch+var_30], ebp
.text:0040EF04                 mov     [esp+3Ch+Source], ebx
.text:0040EF08                 call    near ptr loc_40DEAF+1
.text:0040EF0D                 xor     ecx, ecx
.text:0040EF0F                 test    eax, eax
.text:0040EF11                 jz      loc_40EDCA
.text:0040EF17                 mov     edx, [esp+3Ch+var_14]
.text:0040EF1B
.text:0040EF1B loc_40EF1B:                             ; CODE XREF: sub_40ECD0+18B↑j
.text:0040EF1B                                         ; sub_40ECD0+341↓j
.text:0040EF1B                                         ; DATA XREF: ...
.text:0040EF1B                 mov     edi, [esp+3Ch+arg_8] ; jumptable 0040EE5B case 43
.text:0040EF1F                 cmp     edi, [esp+3Ch+arg_C]
.text:0040EF23                 ja      loc_40F004
.text:0040EF29                 mov     ebx, [esp+3Ch+arg_14]
.text:0040EF2D                 mov     ebp, [esp+3Ch+arg_14]
.text:0040EF31                 and     ebx, 1
.text:0040EF34                 and     ebp, 0FFFFFFFBh
.text:0040EF37
.text:0040EF37 loc_40EF37:                             ; CODE XREF: sub_40ECD0+32B↓j
.text:0040EF37                 test    ebx, ebx
.text:0040EF39                 mov     eax, [esp+3Ch+arg_14]
.text:0040EF3D                 jnz     short loc_40EF41
.text:0040EF3F                 mov     eax, ebp
.text:0040EF41
.text:0040EF41 loc_40EF41:                             ; CODE XREF: sub_40ECD0+26D↑j
.text:0040EF41                 movzx   ecx, [esp+3Ch+var_15]
.text:0040EF46                 mov     [esp+3Ch+var_2C], eax
.text:0040EF4A                 mov     [esp+3Ch+var_34], edi
.text:0040EF4E                 mov     [esp+3Ch+var_30], ecx
.text:0040EF52                 mov     ecx, [esp+3Ch+arg_8]
.text:0040EF56                 mov     [esp+3Ch+Source], ecx
.text:0040EF5A                 lea     ecx, [edx+4]
.text:0040EF5D                 mov     [esp+3Ch+Str], ecx
.text:0040EF60                 call    near ptr loc_40DEAF+1
.text:0040EF65                 test    eax, eax
.text:0040EF67                 jnz     loc_40EFF0
.text:0040EF6D                 test    ebx, ebx
.text:0040EF6F                 mov     eax, [esp+3Ch+arg_14]
.text:0040EF73                 jnz     short loc_40EF77
.text:0040EF75                 mov     eax, ebp
.text:0040EF77
.text:0040EF77 loc_40EF77:                             ; CODE XREF: sub_40ECD0+2A3↑j
.text:0040EF77                 cmp     edi, [esp+3Ch+arg_8]
.text:0040EF7B                 mov     [esp+3Ch+var_2C], eax
.text:0040EF7F                 jz      loc_40F04E
.text:0040EF85                 xor     edx, edx
.text:0040EF87                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040EF8B                 jz      loc_40F037
.text:0040EF91
.text:0040EF91 loc_40EF91:                             ; CODE XREF: sub_40ECD0+371↓j
.text:0040EF91                                         ; sub_40ECD0+379↓j
.text:0040EF91                 movzx   eax, dl
.text:0040EF94
.text:0040EF94 loc_40EF94:                             ; CODE XREF: sub_40ECD0+388↓j
.text:0040EF94                 mov     [esp+3Ch+var_30], eax
.text:0040EF98                 mov     edx, [esp+3Ch+arg_C]
.text:0040EF9C                 mov     [esp+3Ch+Source], edi
.text:0040EFA0                 mov     [esp+3Ch+Str], esi
.text:0040EFA3                 mov     [esp+3Ch+var_34], edx
.text:0040EFA7                 call    near ptr loc_40DEAF+1
.text:0040EFAC                 test    eax, eax
.text:0040EFAE                 jz      short loc_40F020
.text:0040EFB0                 cmp     edi, [esp+3Ch+arg_8]
.text:0040EFB4                 jz      short loc_40EFF0
.text:0040EFB6                 mov     eax, [esp+3Ch+arg_14]
.text:0040EFBA                 test    al, 1
.text:0040EFBC                 jnz     short loc_40EFC0
.text:0040EFBE                 mov     eax, ebp
.text:0040EFC0
.text:0040EFC0 loc_40EFC0:                             ; CODE XREF: sub_40ECD0+2EC↑j
.text:0040EFC0                 mov     [esp+3Ch+var_2C], eax
.text:0040EFC4                 xor     edx, edx
.text:0040EFC6                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040EFCA                 jz      short loc_40F027
.text:0040EFCC
.text:0040EFCC loc_40EFCC:                             ; CODE XREF: sub_40ECD0+361↓j
.text:0040EFCC                                         ; sub_40ECD0+365↓j
.text:0040EFCC                 mov     [esp+3Ch+Source], edi
.text:0040EFD0                 movzx   ecx, dl
.text:0040EFD3                 mov     edx, [esp+3Ch+arg_4]
.text:0040EFD7                 mov     [esp+3Ch+var_30], ecx
.text:0040EFDB                 mov     ecx, [esp+3Ch+arg_C]
.text:0040EFDF                 dec     edx
.text:0040EFE0                 mov     [esp+3Ch+Str], edx
.text:0040EFE3                 mov     [esp+3Ch+var_34], ecx
.text:0040EFE7                 call    near ptr loc_40DEAF+1
.text:0040EFEC                 test    eax, eax
.text:0040EFEE                 jz      short loc_40F020
.text:0040EFF0
.text:0040EFF0 loc_40EFF0:                             ; CODE XREF: sub_40ECD0+297↑j
.text:0040EFF0                                         ; sub_40ECD0+2E4↑j
.text:0040EFF0                 inc     edi
.text:0040EFF1                 cmp     edi, [esp+3Ch+arg_C]
.text:0040EFF5                 ja      short loc_40F000
.text:0040EFF7                 mov     edx, [esp+3Ch+var_14]
.text:0040EFFB                 jmp     loc_40EF37
.text:0040F000 ; ---------------------------------------------------------------------------
.text:0040F000
.text:0040F000 loc_40F000:                             ; CODE XREF: sub_40ECD0+325↑j
.text:0040F000                 mov     edx, [esp+3Ch+var_14]
.text:0040F004
.text:0040F004 loc_40F004:                             ; CODE XREF: sub_40ECD0+253↑j
.text:0040F004                 mov     edx, [edx]
.text:0040F006                 mov     ecx, 1
.text:0040F00B                 test    edx, edx
.text:0040F00D                 mov     [esp+3Ch+var_14], edx
.text:0040F011                 jnz     loc_40EF1B      ; jumptable 0040EE5B case 43
.text:0040F017                 jmp     loc_40EDCA
.text:0040F017 ; ---------------------------------------------------------------------------
.text:0040F01C                 align 10h
.text:0040F020
.text:0040F020 loc_40F020:                             ; CODE XREF: sub_40ECD0+2DE↑j
.text:0040F020                                         ; sub_40ECD0+31E↑j
.text:0040F020                 xor     ecx, ecx
.text:0040F022                 jmp     loc_40EDCA
.text:0040F027 ; ---------------------------------------------------------------------------
.text:0040F027
.text:0040F027 loc_40F027:                             ; CODE XREF: sub_40ECD0+2FA↑j
.text:0040F027                 mov     ecx, [esp+3Ch+arg_14]
.text:0040F02B                 and     ecx, 5
.text:0040F02E                 cmp     ecx, 5
.text:0040F031                 jnz     short loc_40EFCC
.text:0040F033                 mov     dl, 1
.text:0040F035                 jmp     short loc_40EFCC
.text:0040F037 ; ---------------------------------------------------------------------------
.text:0040F037
.text:0040F037 loc_40F037:                             ; CODE XREF: sub_40ECD0+2BB↑j
.text:0040F037                 mov     ecx, [esp+3Ch+arg_14]
.text:0040F03B                 and     ecx, 5
.text:0040F03E                 cmp     ecx, 5
.text:0040F041                 jnz     loc_40EF91
.text:0040F047                 mov     dl, 1
.text:0040F049                 jmp     loc_40EF91
.text:0040F04E ; ---------------------------------------------------------------------------
.text:0040F04E
.text:0040F04E loc_40F04E:                             ; CODE XREF: sub_40ECD0+2AF↑j
.text:0040F04E                 xor     eax, eax
.text:0040F050                 cmp     [esp+3Ch+var_15], 0
.text:0040F055                 setnz   al
.text:0040F058                 jmp     loc_40EF94
.text:0040F05D ; ---------------------------------------------------------------------------
.text:0040F05D
.text:0040F05D loc_40F05D:                             ; CODE XREF: sub_40ECD0+18B↑j
.text:0040F05D                                         ; DATA XREF: sub_40ECD0:jpt_40EE5B↑o
.text:0040F05D                 mov     edi, [esp+3Ch+arg_8] ; jumptable 0040EE5B case 33
.text:0040F061                 cmp     edi, [esp+3Ch+arg_C]
.text:0040F065                 ja      loc_40F101
.text:0040F06B                 mov     ebp, [esp+3Ch+arg_14]
.text:0040F06F                 and     ebp, 0FFFFFFFBh
.text:0040F072
.text:0040F072 loc_40F072:                             ; CODE XREF: sub_40ECD0+42C↓j
.text:0040F072                 test    edx, edx
.text:0040F074                 mov     ebx, edx
.text:0040F076                 jz      short loc_40F0B0
.text:0040F078
.text:0040F078 loc_40F078:                             ; CODE XREF: sub_40ECD0+3DE↓j
.text:0040F078                 mov     eax, [esp+3Ch+arg_14]
.text:0040F07C                 test    al, 1
.text:0040F07E                 jnz     short loc_40F082
.text:0040F080                 mov     eax, ebp
.text:0040F082
.text:0040F082 loc_40F082:                             ; CODE XREF: sub_40ECD0+3AE↑j
.text:0040F082                 movzx   edx, [esp+3Ch+var_15]
.text:0040F087                 mov     [esp+3Ch+var_2C], eax
.text:0040F08B                 mov     ecx, [esp+3Ch+arg_8]
.text:0040F08F                 mov     [esp+3Ch+var_34], edi
.text:0040F093                 mov     [esp+3Ch+var_30], edx
.text:0040F097                 lea     edx, [ebx+4]
.text:0040F09A                 mov     [esp+3Ch+Source], ecx
.text:0040F09E                 mov     [esp+3Ch+Str], edx
.text:0040F0A1                 call    near ptr loc_40DEAF+1
.text:0040F0A6                 test    eax, eax
.text:0040F0A8                 jz      short loc_40F127
.text:0040F0AA                 mov     ebx, [ebx]
.text:0040F0AC                 test    ebx, ebx
.text:0040F0AE                 jnz     short loc_40F078
.text:0040F0B0
.text:0040F0B0 loc_40F0B0:                             ; CODE XREF: sub_40ECD0+3A6↑j
.text:0040F0B0                                         ; sub_40ECD0+45B↓j
.text:0040F0B0                 mov     eax, [esp+3Ch+arg_14]
.text:0040F0B4                 test    al, 1
.text:0040F0B6                 jnz     short loc_40F0BA
.text:0040F0B8                 mov     eax, ebp
.text:0040F0BA
.text:0040F0BA loc_40F0BA:                             ; CODE XREF: sub_40ECD0+3E6↑j
.text:0040F0BA                 cmp     edi, [esp+3Ch+arg_8]
.text:0040F0BE                 mov     [esp+3Ch+var_2C], eax
.text:0040F0C2                 jz      short loc_40F11B
.text:0040F0C4                 xor     edx, edx
.text:0040F0C6                 cmp     byte ptr [edi-1], 2Fh ; '/'
.text:0040F0CA                 jz      short loc_40F10B
.text:0040F0CC
.text:0040F0CC loc_40F0CC:                             ; CODE XREF: sub_40ECD0+445↓j
.text:0040F0CC                                         ; sub_40ECD0+449↓j
.text:0040F0CC                 movzx   eax, dl
.text:0040F0CF
.text:0040F0CF loc_40F0CF:                             ; CODE XREF: sub_40ECD0+455↓j
.text:0040F0CF                 mov     [esp+3Ch+var_30], eax
.text:0040F0D3                 mov     ecx, [esp+3Ch+arg_C]
.text:0040F0D7                 mov     [esp+3Ch+Source], edi
.text:0040F0DB                 mov     [esp+3Ch+Str], esi
.text:0040F0DE                 mov     [esp+3Ch+var_34], ecx
.text:0040F0E2                 call    near ptr loc_40DEAF+1
.text:0040F0E7                 xor     ecx, ecx
.text:0040F0E9                 test    eax, eax
.text:0040F0EB                 jz      loc_40EDCA
.text:0040F0F1
.text:0040F0F1 loc_40F0F1:                             ; CODE XREF: sub_40ECD0+459↓j
.text:0040F0F1                 inc     edi
.text:0040F0F2                 cmp     edi, [esp+3Ch+arg_C]
.text:0040F0F6                 ja      short loc_40F101
.text:0040F0F8                 mov     edx, [esp+3Ch+var_14]
.text:0040F0FC                 jmp     loc_40F072
.text:0040F101 ; ---------------------------------------------------------------------------
.text:0040F101
.text:0040F101 loc_40F101:                             ; CODE XREF: sub_40ECD0+395↑j
.text:0040F101                                         ; sub_40ECD0+426↑j
.text:0040F101                 mov     ecx, 1
.text:0040F106                 jmp     loc_40EDCA
.text:0040F10B ; ---------------------------------------------------------------------------
.text:0040F10B
.text:0040F10B loc_40F10B:                             ; CODE XREF: sub_40ECD0+3FA↑j
.text:0040F10B                 mov     ebx, [esp+3Ch+arg_14]
.text:0040F10F                 and     ebx, 5
.text:0040F112                 cmp     ebx, 5
.text:0040F115                 jnz     short loc_40F0CC
.text:0040F117                 mov     dl, 1
.text:0040F119                 jmp     short loc_40F0CC
.text:0040F11B ; ---------------------------------------------------------------------------
.text:0040F11B
.text:0040F11B loc_40F11B:                             ; CODE XREF: sub_40ECD0+3F2↑j
.text:0040F11B                 xor     eax, eax
.text:0040F11D                 cmp     [esp+3Ch+var_15], 0
.text:0040F122                 setnz   al
.text:0040F125                 jmp     short loc_40F0CF
.text:0040F127 ; ---------------------------------------------------------------------------
.text:0040F127
.text:0040F127 loc_40F127:                             ; CODE XREF: sub_40ECD0+3D8↑j
.text:0040F127                 test    ebx, ebx
.text:0040F129                 jnz     short loc_40F0F1
.text:0040F12B                 jmp     short loc_40F0B0
.text:0040F12B ; ---------------------------------------------------------------------------
.text:0040F12D                 align 10h
.text:0040F130
.text:0040F130 def_40EE5B:                             ; CODE XREF: sub_40ECD0+185↑j
.text:0040F130                                         ; sub_40ECD0+18B↑j
.text:0040F130                                         ; DATA XREF: ...
.text:0040F130                 mov     esi, offset aInvalidExtende ; jumptable 0040EE5B default case, cases 34-41,44-62
.text:0040F135                 mov     ecx, 0FFFFFFFFh
.text:0040F13A                 test    esi, esi
.text:0040F13C                 jz      loc_40EDCA
.text:0040F142                 mov     [esp+3Ch+var_34], 493h
.text:0040F14A                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040F152                 mov     [esp+3Ch+Str], offset aInvalidExtende_0 ; "! \"Invalid extended matching operator"...
.text:0040F159
.text:0040F159 loc_40F159:                             ; CODE XREF: sub_40ECD0+541↓j
.text:0040F159                                         ; sub_40ECD0+55D↓j
.text:0040F159                 call    _assert
.text:0040F159 ; ---------------------------------------------------------------------------
.text:0040F15E                 align 10h
.text:0040F160
.text:0040F160 loc_40F160:                             ; CODE XREF: sub_40ECD0+18B↑j
.text:0040F160                                         ; DATA XREF: sub_40ECD0:jpt_40EE5B↑o
.text:0040F160                 movzx   edi, [esp+3Ch+var_15] ; jumptable 0040EE5B case 63
.text:0040F165                 mov     [esp+3Ch+Str], esi
.text:0040F168                 mov     edx, [esp+3Ch+arg_14]
.text:0040F16C                 mov     ebp, [esp+3Ch+arg_C]
.text:0040F170                 mov     ebx, [esp+3Ch+arg_8]
.text:0040F174                 mov     [esp+3Ch+var_2C], edx
.text:0040F178                 mov     [esp+3Ch+var_30], edi
.text:0040F17C                 mov     [esp+3Ch+var_34], ebp
.text:0040F180                 mov     [esp+3Ch+Source], ebx
.text:0040F184                 call    near ptr loc_40DEAF+1
.text:0040F189                 xor     ecx, ecx
.text:0040F18B                 test    eax, eax
.text:0040F18D                 jz      loc_40EDCA
.text:0040F193                 mov     edx, [esp+3Ch+var_14]
.text:0040F197
.text:0040F197 loc_40F197:                             ; CODE XREF: sub_40ECD0+18B↑j
.text:0040F197                                         ; sub_40ECD0+523↓j
.text:0040F197                                         ; DATA XREF: ...
.text:0040F197                 mov     [esp+3Ch+Source], esi ; jumptable 0040EE5B case 64
.text:0040F19B                 lea     ecx, [edx+4]
.text:0040F19E                 mov     [esp+3Ch+Str], ecx ; Destination
.text:0040F1A1                 call    strcat
.text:0040F1A6                 mov     edx, eax
.text:0040F1A8                 mov     eax, [esp+3Ch+arg_14]
.text:0040F1AC                 test    al, 1
.text:0040F1AE                 jnz     short loc_40F1B3
.text:0040F1B0                 and     eax, 0FFFFFFFBh
.text:0040F1B3
.text:0040F1B3 loc_40F1B3:                             ; CODE XREF: sub_40ECD0+4DE↑j
.text:0040F1B3                 movzx   edi, [esp+3Ch+var_15]
.text:0040F1B8                 mov     [esp+3Ch+var_2C], eax
.text:0040F1BC                 mov     ebp, [esp+3Ch+arg_C]
.text:0040F1C0                 mov     [esp+3Ch+Str], edx
.text:0040F1C3                 mov     ebx, [esp+3Ch+arg_8]
.text:0040F1C7                 mov     [esp+3Ch+var_30], edi
.text:0040F1CB                 mov     [esp+3Ch+var_34], ebp
.text:0040F1CF                 mov     [esp+3Ch+Source], ebx
.text:0040F1D3                 call    near ptr loc_40DEAF+1
.text:0040F1D8                 xor     ecx, ecx
.text:0040F1DA                 test    eax, eax
.text:0040F1DC                 jz      loc_40EDCA
.text:0040F1E2                 mov     ecx, [esp+3Ch+var_14]
.text:0040F1E6                 mov     edx, [ecx]
.text:0040F1E8                 mov     ecx, 1
.text:0040F1ED                 mov     [esp+3Ch+var_14], edx
.text:0040F1F1                 test    edx, edx
.text:0040F1F3                 jnz     short loc_40F197 ; jumptable 0040EE5B case 64
.text:0040F1F5                 jmp     loc_40EDCA
.text:0040F1FA ; ---------------------------------------------------------------------------
.text:0040F1FA
.text:0040F1FA loc_40F1FA:                             ; CODE XREF: sub_40ECD0+175↑j
.text:0040F1FA                 mov     [esp+3Ch+var_34], 439h
.text:0040F202                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040F20A                 mov     [esp+3Ch+Str], offset aP1L ; "p[-1] == L(')')"
.text:0040F211                 jmp     loc_40F159
.text:0040F216 ; ---------------------------------------------------------------------------
.text:0040F216
.text:0040F216 loc_40F216:                             ; CODE XREF: sub_40ECD0+16B↑j
.text:0040F216                 mov     [esp+3Ch+var_34], 438h
.text:0040F21E                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:0040F226                 mov     [esp+3Ch+Str], offset aListNull ; "list != NULL"
.text:0040F22D                 jmp     loc_40F159
.text:0040F232 ; ---------------------------------------------------------------------------
.text:0040F232
.text:0040F232 loc_40F232:                             ; CODE XREF: sub_40ECD0+5A↑j
.text:0040F232                                         ; sub_40ECD0+62↑j ...
.text:0040F232                 cmp     byte ptr [esi+1], 28h ; '('
.text:0040F236                 jnz     loc_40ED50
.text:0040F23C                 inc     ebp
.text:0040F23D
.text:0040F23D loc_40F23D:                             ; CODE XREF: sub_40ECD0+5B5↓j
.text:0040F23D                                         ; sub_40ECD0+5BF↓j
.text:0040F23D                 lea     edx, [esi+1]
.text:0040F240                 jmp     loc_40ED60
.text:0040F245 ; ---------------------------------------------------------------------------
.text:0040F245
.text:0040F245 loc_40F245:                             ; CODE XREF: sub_40ECD0+52↑j
.text:0040F245                 mov     ebx, ds:dword_42C560
.text:0040F24B                 test    ebx, ebx
.text:0040F24D                 jz      short loc_40F29B
.text:0040F24F
.text:0040F24F loc_40F24F:                             ; CODE XREF: sub_40ECD0+5E9↓j
.text:0040F24F                 inc     esi
.text:0040F250                 movzx   eax, byte ptr [esi]
.text:0040F253                 cmp     al, 21h ; '!'
.text:0040F255                 jz      short loc_40F295
.text:0040F257                 mov     edx, ds:dword_42C560
.text:0040F25D                 test    edx, edx
.text:0040F25F                 js      short loc_40F291
.text:0040F261
.text:0040F261 loc_40F261:                             ; CODE XREF: sub_40ECD0+5C3↓j
.text:0040F261                                         ; sub_40ECD0+5C9↓j
.text:0040F261                 cmp     al, 5Dh ; ']'
.text:0040F263                 jz      short loc_40F287
.text:0040F265                 lea     esi, [esi+0]
.text:0040F269                 lea     edi, [edi+0]
.text:0040F270
.text:0040F270 loc_40F270:                             ; CODE XREF: sub_40ECD0+5B3↓j
.text:0040F270                                         ; sub_40ECD0+5BD↓j
.text:0040F270                 inc     esi
.text:0040F271                 mov     ecx, 0FFFFFFFFh
.text:0040F276                 test    al, al
.text:0040F278                 jz      loc_40EDCA
.text:0040F27E                 movzx   eax, byte ptr [esi]
.text:0040F281                 cmp     al, 5Dh ; ']'
.text:0040F283                 jnz     short loc_40F270
.text:0040F285                 jmp     short loc_40F23D
.text:0040F287 ; ---------------------------------------------------------------------------
.text:0040F287
.text:0040F287 loc_40F287:                             ; CODE XREF: sub_40ECD0+593↑j
.text:0040F287                 inc     esi
.text:0040F288                 movzx   eax, byte ptr [esi]
.text:0040F28B                 cmp     al, 5Dh ; ']'
.text:0040F28D                 jnz     short loc_40F270
.text:0040F28F                 jmp     short loc_40F23D
.text:0040F291 ; ---------------------------------------------------------------------------
.text:0040F291
.text:0040F291 loc_40F291:                             ; CODE XREF: sub_40ECD0+58F↑j
.text:0040F291                 cmp     al, 5Eh ; '^'
.text:0040F293                 jnz     short loc_40F261
.text:0040F295
.text:0040F295 loc_40F295:                             ; CODE XREF: sub_40ECD0+585↑j
.text:0040F295                 inc     esi
.text:0040F296                 movzx   eax, byte ptr [esi]
.text:0040F299                 jmp     short loc_40F261
.text:0040F29B ; ---------------------------------------------------------------------------
.text:0040F29B
.text:0040F29B loc_40F29B:                             ; CODE XREF: sub_40ECD0+57D↑j
.text:0040F29B                 mov     [esp+3Ch+Str], offset sub_40DEA0 ; VarName
.text:0040F2A2                 call    getenv
.text:0040F2A7                 test    eax, eax
.text:0040F2A9                 setnz   bl
.text:0040F2AC                 movzx   ecx, bl
.text:0040F2AF                 lea     edx, [ecx+ecx-1]
.text:0040F2B3                 mov     ds:dword_42C560, edx
.text:0040F2B9                 jmp     short loc_40F24F
.text:0040F2B9 sub_40ECD0      endp
.text:0040F2B9
.text:0040F2B9 ; ---------------------------------------------------------------------------
.text:0040F2BB                 align 10h
.text:0040F2C0
.text:0040F2C0 ; =============== S U B R O U T I N E =======================================
.text:0040F2C0
.text:0040F2C0
.text:0040F2C0 sub_40F2C0      proc near               ; CODE XREF: sub_40F2C0+39D↓p
.text:0040F2C0                                         ; sub_40F2C0+453↓p ...
.text:0040F2C0
.text:0040F2C0 C               = word ptr -107Ch
.text:0040F2C0 Type            = word ptr -1078h
.text:0040F2C0 var_1074        = dword ptr -1074h
.text:0040F2C0 var_1070        = dword ptr -1070h
.text:0040F2C0 var_106C        = byte ptr -106Ch
.text:0040F2C0 var_1068        = dword ptr -1068h
.text:0040F2C0 var_1050        = dword ptr -1050h
.text:0040F2C0 var_1049        = byte ptr -1049h
.text:0040F2C0 var_1048        = dword ptr -1048h
.text:0040F2C0 var_1041        = byte ptr -1041h
.text:0040F2C0 var_1040        = dword ptr -1040h
.text:0040F2C0 var_103C        = dword ptr -103Ch
.text:0040F2C0 var_1038        = dword ptr -1038h
.text:0040F2C0 var_1034        = dword ptr -1034h
.text:0040F2C0 var_102E        = byte ptr -102Eh
.text:0040F2C0 var_102D        = byte ptr -102Dh
.text:0040F2C0 var_102C        = word ptr -102Ch
.text:0040F2C0 arg_0           = dword ptr  4
.text:0040F2C0 arg_4           = dword ptr  8
.text:0040F2C0 arg_8           = dword ptr  0Ch
.text:0040F2C0 arg_C           = byte ptr  10h
.text:0040F2C0 arg_10          = dword ptr  14h
.text:0040F2C0
.text:0040F2C0                 push    ebp
.text:0040F2C1                 mov     eax, 106Ch
.text:0040F2C6                 push    edi
.text:0040F2C7                 push    esi
.text:0040F2C8                 push    ebx             ; Size
.text:0040F2C9                 call    __alloca
.text:0040F2CE                 movzx   edx, [esp+107Ch+arg_C]
.text:0040F2D6                 mov     esi, [esp+107Ch+arg_0]
.text:0040F2DD                 mov     ebp, [esp+107Ch+arg_10]
.text:0040F2E4                 mov     edi, [esp+107Ch+arg_4]
.text:0040F2EB                 mov     [esp+107Ch+var_102D], dl
.text:0040F2EF                 movzx   edx, word ptr [esi]
.text:0040F2F2                 add     esi, 2
.text:0040F2F5                 test    dx, dx
.text:0040F2F8                 movzx   ebx, dx
.text:0040F2FB                 jz      loc_40F46E
.text:0040F301                 jmp     short loc_40F310
.text:0040F301 ; ---------------------------------------------------------------------------
.text:0040F303                 align 10h
.text:0040F310
.text:0040F310 loc_40F310:                             ; CODE XREF: sub_40F2C0+41↑j
.text:0040F310                                         ; sub_40F2C0+1A8↓j
.text:0040F310                 mov     [esp+107Ch+var_102E], 0
.text:0040F315                 test    ebp, 10h
.text:0040F31B                 jnz     loc_40FD63
.text:0040F321
.text:0040F321 loc_40F321:                             ; CODE XREF: sub_40F2C0+AAE↓j
.text:0040F321                 lea     eax, [ebx-21h]  ; switch 60 cases
.text:0040F324                 cmp     eax, 3Bh
.text:0040F327                 ja      def_40F32D      ; jumptable 0040F32D default case, cases 34-41,44-46,48-62,65-90
.text:0040F32D                 jmp     ds:jpt_40F32D[eax*4] ; switch jump
.text:0040F32D ; ---------------------------------------------------------------------------
.text:0040F334 jpt_40F32D      dd offset loc_40F8D5, offset def_40F32D, offset def_40F32D
.text:0040F334                                         ; DATA XREF: sub_40F2C0+6D↑r
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D ; jump table for switch statement
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset loc_40F4F0, offset loc_40F8D5, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset loc_40F870
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset loc_40F424, offset loc_40F8D5, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset def_40F32D, offset def_40F32D
.text:0040F334                 dd offset def_40F32D, offset loc_40F920, offset loc_40FD03
.text:0040F424 ; ---------------------------------------------------------------------------
.text:0040F424
.text:0040F424 loc_40F424:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040F424                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040F424                 test    ebp, 20h        ; jumptable 0040F32D case 63
.text:0040F42A                 jnz     loc_40F4B0
.text:0040F430
.text:0040F430 loc_40F430:                             ; CODE XREF: sub_40F2C0+1F4↓j
.text:0040F430                                         ; sub_40F2C0+227↓j
.text:0040F430                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F437                 mov     ecx, 1
.text:0040F43C                 jz      short loc_40F489
.text:0040F43E                 movzx   eax, word ptr [edi]
.text:0040F441                 cmp     ax, 2Fh ; '/'
.text:0040F445                 jz      short loc_40F4A4
.text:0040F447
.text:0040F447 loc_40F447:                             ; CODE XREF: sub_40F2C0+1EA↓j
.text:0040F447                 cmp     ax, 2Eh ; '.'
.text:0040F44B                 jz      short loc_40F496
.text:0040F44D                 lea     esi, [esi+0]
.text:0040F450
.text:0040F450 loc_40F450:                             ; CODE XREF: sub_40F2C0+1E0↓j
.text:0040F450                                         ; sub_40F2C0:loc_40F89A↓j ...
.text:0040F450                 movzx   ecx, word ptr [esi]
.text:0040F453                 add     edi, 2
.text:0040F456                 add     esi, 2
.text:0040F459                 movzx   ebx, [esp+107Ch+var_102E]
.text:0040F45E                 test    cx, cx
.text:0040F461                 mov     [esp+107Ch+var_102D], bl
.text:0040F465                 movzx   ebx, cx
.text:0040F468                 jnz     loc_40F310
.text:0040F46E
.text:0040F46E loc_40F46E:                             ; CODE XREF: sub_40F2C0+3B↑j
.text:0040F46E                 xor     ecx, ecx
.text:0040F470                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F477                 jz      short loc_40F489
.text:0040F479                 and     ebp, 8
.text:0040F47C                 jz      short loc_40F484
.text:0040F47E                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040F482
.text:0040F482 loc_40F482:                             ; CODE XREF: sub_40F2C0+45C↓j
.text:0040F482                 jz      short loc_40F489
.text:0040F484
.text:0040F484 loc_40F484:                             ; CODE XREF: sub_40F2C0+1BC↑j
.text:0040F484                                         ; sub_40F2C0+34A↓j ...
.text:0040F484                 mov     ecx, 1
.text:0040F489
.text:0040F489 loc_40F489:                             ; CODE XREF: sub_40F2C0+17C↑j
.text:0040F489                                         ; sub_40F2C0+1B7↑j ...
.text:0040F489                 add     esp, 106Ch
.text:0040F48F                 mov     eax, ecx
.text:0040F491                 pop     ebx
.text:0040F492                 pop     esi
.text:0040F493                 pop     edi
.text:0040F494                 pop     ebp
.text:0040F495                 retn
.text:0040F496 ; ---------------------------------------------------------------------------
.text:0040F496
.text:0040F496 loc_40F496:                             ; CODE XREF: sub_40F2C0+18B↑j
.text:0040F496                 cmp     [esp+107Ch+var_102D], 0
.text:0040F49B
.text:0040F49B loc_40F49B:                             ; CODE XREF: sub_40F2C0+7E0↓j
.text:0040F49B                 mov     ecx, 1
.text:0040F4A0                 jz      short loc_40F450
.text:0040F4A2                 jmp     short loc_40F489
.text:0040F4A4 ; ---------------------------------------------------------------------------
.text:0040F4A4
.text:0040F4A4 loc_40F4A4:                             ; CODE XREF: sub_40F2C0+185↑j
.text:0040F4A4                 test    ebp, 1
.text:0040F4AA                 jz      short loc_40F447
.text:0040F4AC                 jmp     short loc_40F489
.text:0040F4AC ; ---------------------------------------------------------------------------
.text:0040F4AE                 align 10h
.text:0040F4B0
.text:0040F4B0 loc_40F4B0:                             ; CODE XREF: sub_40F2C0+16A↑j
.text:0040F4B0                 cmp     word ptr [esi], 28h ; '('
.text:0040F4B4                 jnz     loc_40F430
.text:0040F4BA                 movzx   ecx, [esp+107Ch+var_102D]
.text:0040F4BF                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040F4C3                 mov     eax, [esp+107Ch+arg_8]
.text:0040F4CA                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040F4CE                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040F4D2                 mov     dword ptr [esp+107Ch+var_106C], ecx ; char
.text:0040F4D6                 mov     [esp+107Ch+var_1070], eax ; int
.text:0040F4DA                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040F4DD                 call    sub_40FE80
.text:0040F4E2                 cmp     eax, 0FFFFFFFFh
.text:0040F4E5                 mov     ecx, eax
.text:0040F4E7                 jz      loc_40F430
.text:0040F4ED                 jmp     short loc_40F489
.text:0040F4ED ; ---------------------------------------------------------------------------
.text:0040F4EF                 align 10h
.text:0040F4F0
.text:0040F4F0 loc_40F4F0:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040F4F0                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040F4F0                 test    ebp, 20h        ; jumptable 0040F32D case 42
.text:0040F4F6                 jnz     loc_40F82D
.text:0040F4FC
.text:0040F4FC loc_40F4FC:                             ; CODE XREF: sub_40F2C0+571↓j
.text:0040F4FC                                         ; sub_40F2C0+5AA↓j
.text:0040F4FC                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F503                 jz      short loc_40F50F
.text:0040F505                 cmp     word ptr [edi], 2Eh ; '.'
.text:0040F509                 jz      loc_40F818
.text:0040F50F
.text:0040F50F loc_40F50F:                             ; CODE XREF: sub_40F2C0+243↑j
.text:0040F50F                                         ; sub_40F2C0+568↓j
.text:0040F50F                 movzx   ebx, word ptr [esi]
.text:0040F512                 add     esi, 2
.text:0040F515                 cmp     bx, 3Fh ; '?'
.text:0040F519                 jz      loc_40F7B0
.text:0040F51F                 cmp     bx, 2Ah ; '*'
.text:0040F523                 jz      loc_40F7B0
.text:0040F529
.text:0040F529 loc_40F529:                             ; CODE XREF: sub_40F2C0+50E↓j
.text:0040F529                 test    bx, bx
.text:0040F52C                 jnz     short loc_40F579
.text:0040F52E                 mov     ebx, ebp
.text:0040F530                 and     ebx, 1
.text:0040F533                 jz      short loc_40F53C
.text:0040F535                 and     ebp, 8
.text:0040F538                 jz      short loc_40F543
.text:0040F53A                 xor     ebx, ebx
.text:0040F53C
.text:0040F53C loc_40F53C:                             ; CODE XREF: sub_40F2C0+273↑j
.text:0040F53C                                         ; sub_40F2C0+2B7↓j
.text:0040F53C                 mov     ecx, ebx
.text:0040F53E                 jmp     loc_40F489
.text:0040F543 ; ---------------------------------------------------------------------------
.text:0040F543
.text:0040F543 loc_40F543:                             ; CODE XREF: sub_40F2C0+278↑j
.text:0040F543                 sub     [esp+107Ch+arg_8], edi
.text:0040F54A                 mov     dword ptr [esp+107Ch+Type], 2Fh ; '/'
.text:0040F552                 mov     dword ptr [esp+107Ch+C], edi
.text:0040F555                 sar     [esp+107Ch+arg_8], 1
.text:0040F55C                 mov     ebp, [esp+107Ch+arg_8]
.text:0040F563                 mov     [esp+107Ch+var_1074], ebp
.text:0040F567                 call    sub_429790
.text:0040F56C                 test    eax, eax
.text:0040F56E                 setz    cl
.text:0040F571                 movzx   esi, cl
.text:0040F574                 dec     esi
.text:0040F575                 and     ebx, esi
.text:0040F577                 jmp     short loc_40F53C
.text:0040F579 ; ---------------------------------------------------------------------------
.text:0040F579
.text:0040F579 loc_40F579:                             ; CODE XREF: sub_40F2C0+26C↑j
.text:0040F579                 mov     dword ptr [esp+107Ch+C], edi
.text:0040F57C                 mov     ecx, [esp+107Ch+arg_8]
.text:0040F583                 xor     edx, edx
.text:0040F585                 sub     ecx, edi
.text:0040F587                 sar     ecx, 1
.text:0040F589                 test    ebp, 1
.text:0040F58F                 setz    dl
.text:0040F592                 mov     [esp+107Ch+var_1074], ecx
.text:0040F596                 dec     edx
.text:0040F597                 and     edx, 2Fh
.text:0040F59A                 mov     dword ptr [esp+107Ch+Type], edx
.text:0040F59E                 call    sub_429790
.text:0040F5A3                 mov     [esp+107Ch+var_1034], eax
.text:0040F5A7                 test    eax, eax
.text:0040F5A9                 jz      loc_40F799
.text:0040F5AF
.text:0040F5AF loc_40F5AF:                             ; CODE XREF: sub_40F2C0+4E4↓j
.text:0040F5AF                 cmp     bx, 5Bh ; '['
.text:0040F5B3                 jz      loc_40F741
.text:0040F5B9                 test    ebp, 20h
.text:0040F5BF                 jnz     loc_40F721
.text:0040F5C5
.text:0040F5C5 loc_40F5C5:                             ; CODE XREF: sub_40F2C0+471↓j
.text:0040F5C5                                         ; sub_40F2C0+47B↓j
.text:0040F5C5                 cmp     bx, 2Fh ; '/'
.text:0040F5C9                 jz      loc_40F6A4
.text:0040F5CF
.text:0040F5CF loc_40F5CF:                             ; CODE XREF: sub_40F2C0+3EA↓j
.text:0040F5CF                 mov     [esp+107Ch+var_1038], ebp
.text:0040F5D3                 test    ebp, 1
.text:0040F5D9                 jnz     short loc_40F5E4
.text:0040F5DB                 mov     eax, ebp
.text:0040F5DD                 and     eax, 0FFFFFFFBh
.text:0040F5E0                 mov     [esp+107Ch+var_1038], eax
.text:0040F5E4
.text:0040F5E4 loc_40F5E4:                             ; CODE XREF: sub_40F2C0+319↑j
.text:0040F5E4                 movzx   edx, [esp+107Ch+var_102D]
.text:0040F5E9                 cmp     bx, 5Ch ; '\'
.text:0040F5ED                 mov     [esp+107Ch+var_103C], edx
.text:0040F5F1                 jz      loc_40F690
.text:0040F5F7
.text:0040F5F7 loc_40F5F7:                             ; CODE XREF: sub_40F2C0+3D6↓j
.text:0040F5F7                                         ; sub_40F2C0+3DF↓j
.text:0040F5F7                 test    ebp, 10h
.text:0040F5FD                 jnz     loc_40F680
.text:0040F603
.text:0040F603 loc_40F603:                             ; CODE XREF: sub_40F2C0+3CB↓j
.text:0040F603                 sub     esi, 2
.text:0040F606                 cmp     edi, [esp+107Ch+var_1034]
.text:0040F60A                 jnb     loc_40F484
.text:0040F610
.text:0040F610 loc_40F610:                             ; CODE XREF: sub_40F2C0+36E↓j
.text:0040F610                 test    ebp, 10h
.text:0040F616                 jnz     short loc_40F670
.text:0040F618                 movzx   eax, word ptr [edi]
.text:0040F61B
.text:0040F61B loc_40F61B:                             ; CODE XREF: sub_40F2C0+3BE↓j
.text:0040F61B                 cmp     eax, ebx
.text:0040F61D                 jz      short loc_40F635
.text:0040F61F
.text:0040F61F loc_40F61F:                             ; CODE XREF: sub_40F2C0+3A6↓j
.text:0040F61F                 mov     [esp+107Ch+var_103C], 0
.text:0040F627                 add     edi, 2
.text:0040F62A                 cmp     edi, [esp+107Ch+var_1034]
.text:0040F62E                 jb      short loc_40F610
.text:0040F630                 jmp     loc_40F484
.text:0040F635 ; ---------------------------------------------------------------------------
.text:0040F635
.text:0040F635 loc_40F635:                             ; CODE XREF: sub_40F2C0+35D↑j
.text:0040F635                 mov     dword ptr [esp+107Ch+Type], edi
.text:0040F639                 xor     ecx, ecx
.text:0040F63B                 mov     eax, [esp+107Ch+var_1038]
.text:0040F63F                 cmp     [esp+107Ch+var_103C], 0
.text:0040F644                 mov     dword ptr [esp+107Ch+C], esi
.text:0040F647                 mov     edx, [esp+107Ch+arg_8]
.text:0040F64E                 mov     dword ptr [esp+107Ch+var_106C], eax
.text:0040F652                 setnz   cl
.text:0040F655                 mov     [esp+107Ch+var_1074], edx
.text:0040F659                 mov     [esp+107Ch+var_1070], ecx
.text:0040F65D                 call    sub_40F2C0
.text:0040F662                 xor     ecx, ecx
.text:0040F664                 test    eax, eax
.text:0040F666                 jnz     short loc_40F61F
.text:0040F668                 jmp     loc_40F489
.text:0040F668 ; ---------------------------------------------------------------------------
.text:0040F66D                 align 10h
.text:0040F670
.text:0040F670 loc_40F670:                             ; CODE XREF: sub_40F2C0+356↑j
.text:0040F670                 movzx   ecx, word ptr [edi]
.text:0040F673                 mov     dword ptr [esp+107Ch+C], ecx ; C
.text:0040F676                 call    towlower
.text:0040F67B                 movzx   eax, ax
.text:0040F67E                 jmp     short loc_40F61B
.text:0040F680 ; ---------------------------------------------------------------------------
.text:0040F680
.text:0040F680 loc_40F680:                             ; CODE XREF: sub_40F2C0+33D↑j
.text:0040F680                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040F683                 call    towlower
.text:0040F688                 movzx   ebx, ax
.text:0040F68B                 jmp     loc_40F603
.text:0040F690 ; ---------------------------------------------------------------------------
.text:0040F690
.text:0040F690 loc_40F690:                             ; CODE XREF: sub_40F2C0+331↑j
.text:0040F690                 test    ebp, 2
.text:0040F696                 jnz     loc_40F5F7
.text:0040F69C                 movzx   ebx, word ptr [esi]
.text:0040F69F                 jmp     loc_40F5F7
.text:0040F6A4 ; ---------------------------------------------------------------------------
.text:0040F6A4
.text:0040F6A4 loc_40F6A4:                             ; CODE XREF: sub_40F2C0+309↑j
.text:0040F6A4                 test    ebp, 1
.text:0040F6AA                 jz      loc_40F5CF
.text:0040F6B0                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F6B7                 jnb     loc_40F484
.text:0040F6BD                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040F6C1                 jz      short loc_40F6D9
.text:0040F6C3
.text:0040F6C3 loc_40F6C3:                             ; CODE XREF: sub_40F2C0+417↓j
.text:0040F6C3                 add     edi, 2
.text:0040F6C6                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F6CD                 jnb     loc_40F484
.text:0040F6D3                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040F6D7                 jnz     short loc_40F6C3
.text:0040F6D9
.text:0040F6D9 loc_40F6D9:                             ; CODE XREF: sub_40F2C0+401↑j
.text:0040F6D9                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F6E0                 jnb     loc_40F484
.text:0040F6E6                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040F6EA                 jnz     loc_40F484
.text:0040F6F0                 mov     dword ptr [esp+107Ch+var_106C], ebp
.text:0040F6F4                 mov     ecx, [esp+107Ch+arg_8]
.text:0040F6FB                 lea     ebx, [edi+2]
.text:0040F6FE                 mov     dword ptr [esp+107Ch+Type], ebx
.text:0040F702                 shr     ebp, 2
.text:0040F705                 and     ebp, 1
.text:0040F708                 mov     [esp+107Ch+var_1074], ecx
.text:0040F70C                 mov     [esp+107Ch+var_1070], ebp
.text:0040F710                 mov     dword ptr [esp+107Ch+C], esi
.text:0040F713                 call    sub_40F2C0
.text:0040F718                 xor     ecx, ecx
.text:0040F71A                 test    eax, eax
.text:0040F71C                 jmp     loc_40F482
.text:0040F721 ; ---------------------------------------------------------------------------
.text:0040F721
.text:0040F721 loc_40F721:                             ; CODE XREF: sub_40F2C0+2FF↑j
.text:0040F721                 cmp     bx, 40h ; '@'
.text:0040F725                 jz      short loc_40F737
.text:0040F727                 cmp     bx, 2Bh ; '+'
.text:0040F72B                 jz      short loc_40F737
.text:0040F72D                 cmp     bx, 21h ; '!'
.text:0040F731                 jnz     loc_40F5C5
.text:0040F737
.text:0040F737 loc_40F737:                             ; CODE XREF: sub_40F2C0+465↑j
.text:0040F737                                         ; sub_40F2C0+46B↑j
.text:0040F737                 cmp     word ptr [esi], 28h ; '('
.text:0040F73B                 jnz     loc_40F5C5
.text:0040F741
.text:0040F741 loc_40F741:                             ; CODE XREF: sub_40F2C0+2F3↑j
.text:0040F741                 mov     ebx, ebp
.text:0040F743                 and     ebp, 1
.text:0040F746                 jnz     short loc_40F74B
.text:0040F748                 and     ebx, 0FFFFFFFBh
.text:0040F74B
.text:0040F74B loc_40F74B:                             ; CODE XREF: sub_40F2C0+486↑j
.text:0040F74B                 movzx   eax, [esp+107Ch+var_102D]
.text:0040F750                 sub     esi, 2
.text:0040F753                 cmp     edi, [esp+107Ch+var_1034]
.text:0040F757                 jnb     loc_40F484
.text:0040F75D
.text:0040F75D loc_40F75D:                             ; CODE XREF: sub_40F2C0+4D2↓j
.text:0040F75D                 mov     dword ptr [esp+107Ch+var_106C], ebx
.text:0040F761                 movzx   ebp, al
.text:0040F764                 mov     eax, [esp+107Ch+arg_8]
.text:0040F76B                 mov     [esp+107Ch+var_1070], ebp
.text:0040F76F                 mov     dword ptr [esp+107Ch+Type], edi
.text:0040F773                 mov     [esp+107Ch+var_1074], eax
.text:0040F777                 mov     dword ptr [esp+107Ch+C], esi
.text:0040F77A                 call    sub_40F2C0
.text:0040F77F                 xor     ecx, ecx
.text:0040F781                 test    eax, eax
.text:0040F783                 jz      loc_40F489
.text:0040F789                 add     edi, 2
.text:0040F78C                 xor     eax, eax
.text:0040F78E                 cmp     edi, [esp+107Ch+var_1034]
.text:0040F792                 jb      short loc_40F75D
.text:0040F794                 jmp     loc_40F484
.text:0040F799 ; ---------------------------------------------------------------------------
.text:0040F799
.text:0040F799 loc_40F799:                             ; CODE XREF: sub_40F2C0+2E9↑j
.text:0040F799                 mov     edx, [esp+107Ch+arg_8]
.text:0040F7A0                 mov     [esp+107Ch+var_1034], edx
.text:0040F7A4                 jmp     loc_40F5AF
.text:0040F7A4 ; ---------------------------------------------------------------------------
.text:0040F7A9                 align 10h
.text:0040F7B0
.text:0040F7B0 loc_40F7B0:                             ; CODE XREF: sub_40F2C0+259↑j
.text:0040F7B0                                         ; sub_40F2C0+263↑j ...
.text:0040F7B0                 cmp     word ptr [esi], 28h ; '('
.text:0040F7B4                 jz      short loc_40F800
.text:0040F7B6
.text:0040F7B6 loc_40F7B6:                             ; CODE XREF: sub_40F2C0+546↓j
.text:0040F7B6                                         ; sub_40F2C0+552↓j
.text:0040F7B6                 cmp     bx, 3Fh ; '?'
.text:0040F7BA                 jz      short loc_40F7D3
.text:0040F7BC
.text:0040F7BC loc_40F7BC:                             ; CODE XREF: sub_40F2C0+52E↓j
.text:0040F7BC                                         ; sub_40F2C0+556↓j
.text:0040F7BC                 movzx   ebx, word ptr [esi]
.text:0040F7BF                 add     esi, 2
.text:0040F7C2                 cmp     bx, 3Fh ; '?'
.text:0040F7C6                 jz      short loc_40F7B0
.text:0040F7C8                 cmp     bx, 2Ah ; '*'
.text:0040F7CC                 jz      short loc_40F7B0
.text:0040F7CE                 jmp     loc_40F529
.text:0040F7D3 ; ---------------------------------------------------------------------------
.text:0040F7D3
.text:0040F7D3 loc_40F7D3:                             ; CODE XREF: sub_40F2C0+4FA↑j
.text:0040F7D3                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F7DA                 mov     ecx, 1
.text:0040F7DF                 jz      loc_40F489
.text:0040F7E5                 cmp     word ptr [edi], 2Fh ; '/'
.text:0040F7E9                 jz      short loc_40F7F0
.text:0040F7EB
.text:0040F7EB loc_40F7EB:                             ; CODE XREF: sub_40F2C0+536↓j
.text:0040F7EB                 add     edi, 2
.text:0040F7EE                 jmp     short loc_40F7BC
.text:0040F7F0 ; ---------------------------------------------------------------------------
.text:0040F7F0
.text:0040F7F0 loc_40F7F0:                             ; CODE XREF: sub_40F2C0+529↑j
.text:0040F7F0                 test    ebp, 1
.text:0040F7F6                 jz      short loc_40F7EB
.text:0040F7F8                 jmp     loc_40F489
.text:0040F7F8 ; ---------------------------------------------------------------------------
.text:0040F7FD                 align 10h
.text:0040F800
.text:0040F800 loc_40F800:                             ; CODE XREF: sub_40F2C0+4F4↑j
.text:0040F800                 test    ebp, 20h
.text:0040F806                 jz      short loc_40F7B6
.text:0040F808                 mov     dword ptr [esp+107Ch+C], esi
.text:0040F80B                 call    sub_40FD80
.text:0040F810                 cmp     eax, esi
.text:0040F812                 jz      short loc_40F7B6
.text:0040F814                 mov     esi, eax
.text:0040F816                 jmp     short loc_40F7BC
.text:0040F818 ; ---------------------------------------------------------------------------
.text:0040F818
.text:0040F818 loc_40F818:                             ; CODE XREF: sub_40F2C0+249↑j
.text:0040F818                 cmp     [esp+107Ch+var_102D], 0
.text:0040F81D                 mov     ecx, 1
.text:0040F822                 jnz     loc_40F489
.text:0040F828                 jmp     loc_40F50F
.text:0040F82D ; ---------------------------------------------------------------------------
.text:0040F82D
.text:0040F82D loc_40F82D:                             ; CODE XREF: sub_40F2C0+236↑j
.text:0040F82D                 cmp     word ptr [esi], 28h ; '('
.text:0040F831                 jnz     loc_40F4FC
.text:0040F837                 movzx   edx, [esp+107Ch+var_102D]
.text:0040F83C                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040F840                 mov     ecx, [esp+107Ch+arg_8]
.text:0040F847                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040F84B                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040F84F                 mov     [esp+107Ch+var_1070], ecx ; int
.text:0040F853                 mov     dword ptr [esp+107Ch+var_106C], edx ; char
.text:0040F857                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040F85A                 call    sub_40FE80
.text:0040F85F                 cmp     eax, 0FFFFFFFFh
.text:0040F862                 mov     ecx, eax
.text:0040F864                 jnz     loc_40F489
.text:0040F86A                 jmp     loc_40F4FC
.text:0040F86A ; ---------------------------------------------------------------------------
.text:0040F86F                 align 10h
.text:0040F870
.text:0040F870 loc_40F870:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040F870                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040F870                 mov     ecx, ebp        ; jumptable 0040F32D case 47
.text:0040F872                 and     ecx, 5
.text:0040F875                 cmp     ecx, 5
.text:0040F878                 jz      short loc_40F8B5
.text:0040F87A                 lea     esi, [esi+0]
.text:0040F880
.text:0040F880 def_40F32D:                             ; CODE XREF: sub_40F2C0+67↑j
.text:0040F880                                         ; sub_40F2C0+6D↑j ...
.text:0040F880                 cmp     edi, [esp+107Ch+arg_8] ; jumptable 0040F32D default case, cases 34-41,44-46,48-62,65-90
.text:0040F887                 jz      loc_40F484
.text:0040F88D                 test    ebp, 10h
.text:0040F893                 jnz     short loc_40F8A5
.text:0040F895                 movzx   eax, word ptr [edi]
.text:0040F898
.text:0040F898 loc_40F898:                             ; CODE XREF: sub_40F2C0+5F3↓j
.text:0040F898                 cmp     ebx, eax
.text:0040F89A
.text:0040F89A loc_40F89A:                             ; CODE XREF: sub_40F2C0+A81↓j
.text:0040F89A                 jz      loc_40F450
.text:0040F8A0                 jmp     loc_40F484
.text:0040F8A5 ; ---------------------------------------------------------------------------
.text:0040F8A5
.text:0040F8A5 loc_40F8A5:                             ; CODE XREF: sub_40F2C0+5D3↑j
.text:0040F8A5                 movzx   edx, word ptr [edi]
.text:0040F8A8                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040F8AB                 call    towlower
.text:0040F8B0                 movzx   eax, ax
.text:0040F8B3                 jmp     short loc_40F898
.text:0040F8B5 ; ---------------------------------------------------------------------------
.text:0040F8B5
.text:0040F8B5 loc_40F8B5:                             ; CODE XREF: sub_40F2C0+5B8↑j
.text:0040F8B5                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F8BC                 jz      loc_40F484
.text:0040F8C2                 cmp     [edi], bx
.text:0040F8C5                 jnz     loc_40F484
.text:0040F8CB                 mov     [esp+107Ch+var_102E], 1
.text:0040F8D0                 jmp     loc_40F450
.text:0040F8D5 ; ---------------------------------------------------------------------------
.text:0040F8D5
.text:0040F8D5 loc_40F8D5:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040F8D5                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040F8D5                 test    ebp, 20h        ; jumptable 0040F32D cases 33,43,64
.text:0040F8DB                 jz      short def_40F32D ; jumptable 0040F32D default case, cases 34-41,44-46,48-62,65-90
.text:0040F8DD                 cmp     word ptr [esi], 28h ; '('
.text:0040F8E1                 jnz     short def_40F32D ; jumptable 0040F32D default case, cases 34-41,44-46,48-62,65-90
.text:0040F8E3                 movzx   edx, [esp+107Ch+var_102D]
.text:0040F8E8                 mov     [esp+107Ch+var_1068], ebp ; int
.text:0040F8EC                 mov     ecx, [esp+107Ch+arg_8]
.text:0040F8F3                 mov     [esp+107Ch+var_1074], edi ; int
.text:0040F8F7                 mov     dword ptr [esp+107Ch+Type], esi ; wchar_t *
.text:0040F8FB                 mov     [esp+107Ch+var_1070], ecx ; int
.text:0040F8FF                 mov     dword ptr [esp+107Ch+var_106C], edx ; char
.text:0040F903                 mov     dword ptr [esp+107Ch+C], ebx ; __int16
.text:0040F906                 call    sub_40FE80
.text:0040F90B                 cmp     eax, 0FFFFFFFFh
.text:0040F90E                 mov     ecx, eax
.text:0040F910                 jz      def_40F32D      ; jumptable 0040F32D default case, cases 34-41,44-46,48-62,65-90
.text:0040F916                 jmp     loc_40F489
.text:0040F916 ; ---------------------------------------------------------------------------
.text:0040F91B                 align 10h
.text:0040F920
.text:0040F920 loc_40F920:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040F920                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040F920                 mov     edx, ds:dword_42C560 ; jumptable 0040F32D case 91
.text:0040F926                 test    edx, edx
.text:0040F928                 jz      loc_40FCE0
.text:0040F92E
.text:0040F92E loc_40F92E:                             ; CODE XREF: sub_40F2C0+A3E↓j
.text:0040F92E                 cmp     edi, [esp+107Ch+arg_8]
.text:0040F935                 mov     ecx, 1
.text:0040F93A                 jz      loc_40F489
.text:0040F940                 movzx   eax, word ptr [edi]
.text:0040F943                 cmp     ax, 2Eh ; '.'
.text:0040F947                 jz      loc_40FCD0
.text:0040F94D
.text:0040F94D loc_40F94D:                             ; CODE XREF: sub_40F2C0+A15↓j
.text:0040F94D                 cmp     ax, 2Fh ; '/'
.text:0040F951                 jz      loc_40FCB5
.text:0040F957
.text:0040F957 loc_40F957:                             ; CODE XREF: sub_40F2C0+A00↓j
.text:0040F957                 movzx   edx, word ptr [esi]
.text:0040F95A                 mov     [esp+107Ch+var_1041], 0
.text:0040F95F                 cmp     dx, 21h ; '!'
.text:0040F963                 jz      loc_40FCAB
.text:0040F969                 mov     ebx, ds:dword_42C560
.text:0040F96F                 test    ebx, ebx
.text:0040F971                 js      loc_40FCA1
.text:0040F977
.text:0040F977 loc_40F977:                             ; CODE XREF: sub_40F2C0+9E5↓j
.text:0040F977                                         ; sub_40F2C0+9F0↓j
.text:0040F977                 cmp     [esp+107Ch+var_1041], 0
.text:0040F97C                 jz      short loc_40F981
.text:0040F97E                 add     esi, 2
.text:0040F981
.text:0040F981 loc_40F981:                             ; CODE XREF: sub_40F2C0+6BC↑j
.text:0040F981                 movzx   edx, ax
.text:0040F984                 test    ebp, 10h
.text:0040F98A                 mov     [esp+107Ch+var_1040], edx
.text:0040F98E                 jnz     loc_40FC8D
.text:0040F994
.text:0040F994 loc_40F994:                             ; CODE XREF: sub_40F2C0+9DC↓j
.text:0040F994                 movzx   ebx, word ptr [esi]
.text:0040F997                 add     esi, 2
.text:0040F99A                 lea     esi, [esi+0]
.text:0040F9A0
.text:0040F9A0 loc_40F9A0:                             ; CODE XREF: sub_40F2C0+74A↓j
.text:0040F9A0                 test    ebp, 2
.text:0040F9A6                 jnz     short loc_40F9B2
.text:0040F9A8                 cmp     bx, 5Ch ; '\'
.text:0040F9AC                 jz      loc_40FC50
.text:0040F9B2
.text:0040F9B2 loc_40F9B2:                             ; CODE XREF: sub_40F2C0+6E6↑j
.text:0040F9B2                 cmp     bx, 5Bh ; '['
.text:0040F9B6                 jz      loc_40FBA1
.text:0040F9BC
.text:0040F9BC loc_40F9BC:                             ; CODE XREF: sub_40F2C0+8E5↓j
.text:0040F9BC                 test    bx, bx
.text:0040F9BF                 mov     ecx, 1
.text:0040F9C4                 jz      loc_40F489
.text:0040F9CA                 test    ebp, 10h
.text:0040F9D0                 jnz     loc_40FB91
.text:0040F9D6
.text:0040F9D6 loc_40F9D6:                             ; CODE XREF: sub_40F2C0+8DC↓j
.text:0040F9D6                                         ; sub_40F2C0+937↓j
.text:0040F9D6                 movzx   eax, word ptr [esi]
.text:0040F9D9                 mov     [esp+107Ch+var_1049], 0
.text:0040F9DE                 cmp     ax, 2Dh ; '-'
.text:0040F9E2                 mov     ecx, eax
.text:0040F9E4                 jz      loc_40FB70
.text:0040F9EA
.text:0040F9EA loc_40F9EA:                             ; CODE XREF: sub_40F2C0+8B7↓j
.text:0040F9EA                                         ; sub_40F2C0+8C1↓j ...
.text:0040F9EA                 cmp     [esp+107Ch+var_1049], 0
.text:0040F9EF                 jnz     short loc_40F9F8
.text:0040F9F1                 cmp     bx, word ptr [esp+107Ch+var_1040]
.text:0040F9F6                 jz      short loc_40FA69
.text:0040F9F8
.text:0040F9F8 loc_40F9F8:                             ; CODE XREF: sub_40F2C0+72F↑j
.text:0040F9F8                 mov     edx, ebx
.text:0040F9FA                 add     esi, 2
.text:0040F9FD                 movzx   ebx, cx
.text:0040FA00                 cmp     bx, 2Dh ; '-'
.text:0040FA04                 jz      short loc_40FA21
.text:0040FA06
.text:0040FA06 loc_40FA06:                             ; CODE XREF: sub_40F2C0+768↓j
.text:0040FA06                                         ; sub_40F2C0+7A4↓j ...
.text:0040FA06                 cmp     bx, 5Dh ; ']'
.text:0040FA0A                 jnz     short loc_40F9A0
.text:0040FA0C                 cmp     [esp+107Ch+var_1041], 0
.text:0040FA11                 mov     ecx, 1
.text:0040FA16                 jnz     loc_40F450
.text:0040FA1C                 jmp     loc_40F489
.text:0040FA21 ; ---------------------------------------------------------------------------
.text:0040FA21
.text:0040FA21 loc_40FA21:                             ; CODE XREF: sub_40F2C0+744↑j
.text:0040FA21                 movzx   eax, word ptr [esi]
.text:0040FA24                 cmp     ax, 5Dh ; ']'
.text:0040FA28                 jz      short loc_40FA06
.text:0040FA2A                 add     esi, 2
.text:0040FA2D                 movzx   eax, ax
.text:0040FA30                 test    ebp, 2
.text:0040FA36                 jnz     short loc_40FA42
.text:0040FA38                 cmp     ax, 5Ch ; '\'
.text:0040FA3C                 jz      loc_40FB61
.text:0040FA42
.text:0040FA42 loc_40FA42:                             ; CODE XREF: sub_40F2C0+776↑j
.text:0040FA42                                         ; sub_40F2C0+8A7↓j
.text:0040FA42                 test    ax, ax
.text:0040FA45                 mov     ecx, 1
.text:0040FA4A                 jz      loc_40F489
.text:0040FA50                 cmp     dx, word ptr [esp+107Ch+var_1040]
.text:0040FA55                 ja      short loc_40FA5E
.text:0040FA57                 cmp     word ptr [esp+107Ch+var_1040], ax
.text:0040FA5C                 jbe     short loc_40FA66
.text:0040FA5E
.text:0040FA5E loc_40FA5E:                             ; CODE XREF: sub_40F2C0+795↑j
.text:0040FA5E                                         ; sub_40F2C0+97F↓j
.text:0040FA5E                 movzx   ebx, word ptr [esi]
.text:0040FA61                 add     esi, 2
.text:0040FA64                 jmp     short loc_40FA06
.text:0040FA66 ; ---------------------------------------------------------------------------
.text:0040FA66
.text:0040FA66 loc_40FA66:                             ; CODE XREF: sub_40F2C0+79C↑j
.text:0040FA66                                         ; sub_40F2C0+7D9↓j ...
.text:0040FA66                 movzx   eax, word ptr [esi]
.text:0040FA69
.text:0040FA69 loc_40FA69:                             ; CODE XREF: sub_40F2C0+736↑j
.text:0040FA69                 movzx   ebx, ax
.text:0040FA6C                 add     esi, 2
.text:0040FA6F                 test    bx, bx
.text:0040FA72                 mov     ecx, 1
.text:0040FA77                 jz      loc_40F489
.text:0040FA7D                 test    ebp, 2
.text:0040FA83                 jnz     short loc_40FA8F
.text:0040FA85                 cmp     bx, 5Ch ; '\'
.text:0040FA89                 jz      loc_40FB56
.text:0040FA8F
.text:0040FA8F loc_40FA8F:                             ; CODE XREF: sub_40F2C0+7C3↑j
.text:0040FA8F                 cmp     bx, 5Bh ; '['
.text:0040FA93                 jz      short loc_40FAA5
.text:0040FA95
.text:0040FA95 loc_40FA95:                             ; CODE XREF: sub_40F2C0+7F8↓j
.text:0040FA95                                         ; sub_40F2C0+822↓j
.text:0040FA95                 cmp     bx, 5Dh ; ']'
.text:0040FA99                 jnz     short loc_40FA66
.text:0040FA9B                 cmp     [esp+107Ch+var_1041], 0
.text:0040FAA0                 jmp     loc_40F49B
.text:0040FAA5 ; ---------------------------------------------------------------------------
.text:0040FAA5
.text:0040FAA5 loc_40FAA5:                             ; CODE XREF: sub_40F2C0+7D3↑j
.text:0040FAA5                 movzx   eax, word ptr [esi]
.text:0040FAA8                 cmp     ax, 3Ah ; ':'
.text:0040FAAC                 jz      short loc_40FB14
.text:0040FAAE                 cmp     ax, 3Dh ; '='
.text:0040FAB2                 jz      short loc_40FAE4
.text:0040FAB4                 cmp     ax, 2Eh ; '.'
.text:0040FAB8                 jnz     short loc_40FA95
.text:0040FABA                 add     esi, 2
.text:0040FABD
.text:0040FABD loc_40FABD:                             ; CODE XREF: sub_40F2C0+810↓j
.text:0040FABD                                         ; sub_40F2C0+817↓j
.text:0040FABD                 add     esi, 2
.text:0040FAC0                 movzx   eax, word ptr [esi]
.text:0040FAC3                 test    ax, ax
.text:0040FAC6                 jz      loc_40F484
.text:0040FACC                 cmp     ax, 2Eh ; '.'
.text:0040FAD0                 jnz     short loc_40FABD
.text:0040FAD2                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040FAD7                 jnz     short loc_40FABD
.text:0040FAD9
.text:0040FAD9 loc_40FAD9:                             ; CODE XREF: sub_40F2C0+84D↓j
.text:0040FAD9                                         ; sub_40F2C0+894↓j
.text:0040FAD9                 add     esi, 4
.text:0040FADC                 movzx   ebx, word ptr [esi]
.text:0040FADF
.text:0040FADF loc_40FADF:                             ; CODE XREF: sub_40F2C0+89A↓j
.text:0040FADF                 add     esi, 2
.text:0040FAE2                 jmp     short loc_40FA95
.text:0040FAE4 ; ---------------------------------------------------------------------------
.text:0040FAE4
.text:0040FAE4 loc_40FAE4:                             ; CODE XREF: sub_40F2C0+7F2↑j
.text:0040FAE4                 add     esi, 2
.text:0040FAE7                 mov     ecx, 1
.text:0040FAEC                 movzx   eax, word ptr [esi]
.text:0040FAEF                 test    ax, ax
.text:0040FAF2                 jz      loc_40F489
.text:0040FAF8                 add     esi, 2
.text:0040FAFB                 movzx   edx, word ptr [esi]
.text:0040FAFE                 cmp     dx, 3Dh ; '='
.text:0040FB02                 jnz     loc_40F484
.text:0040FB08                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040FB0D                 jz      short loc_40FAD9
.text:0040FB0F                 jmp     loc_40F484
.text:0040FB14 ; ---------------------------------------------------------------------------
.text:0040FB14
.text:0040FB14 loc_40FB14:                             ; CODE XREF: sub_40F2C0+7EC↑j
.text:0040FB14                 mov     [esp+107Ch+var_1050], esi
.text:0040FB18                 xor     edx, edx
.text:0040FB1A
.text:0040FB1A loc_40FB1A:                             ; CODE XREF: sub_40F2C0+882↓j
.text:0040FB1A                 add     esi, 2
.text:0040FB1D                 inc     edx
.text:0040FB1E                 cmp     edx, 800h
.text:0040FB24                 movzx   eax, word ptr [esi]
.text:0040FB27                 mov     ecx, 1
.text:0040FB2C                 movzx   ebx, ax
.text:0040FB2F                 jz      loc_40F489
.text:0040FB35                 cmp     ax, 3Ah ; ':'
.text:0040FB39                 jz      short loc_40FB4D
.text:0040FB3B
.text:0040FB3B loc_40FB3B:                             ; CODE XREF: sub_40F2C0+892↓j
.text:0040FB3B                 lea     ecx, [ebx-61h]
.text:0040FB3E                 cmp     cx, 18h
.text:0040FB42                 jbe     short loc_40FB1A
.text:0040FB44                 mov     esi, [esp+107Ch+var_1050]
.text:0040FB48                 jmp     loc_40FA66
.text:0040FB4D ; ---------------------------------------------------------------------------
.text:0040FB4D
.text:0040FB4D loc_40FB4D:                             ; CODE XREF: sub_40F2C0+879↑j
.text:0040FB4D                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040FB52                 jnz     short loc_40FB3B
.text:0040FB54                 jmp     short loc_40FAD9
.text:0040FB56 ; ---------------------------------------------------------------------------
.text:0040FB56
.text:0040FB56 loc_40FB56:                             ; CODE XREF: sub_40F2C0+7C9↑j
.text:0040FB56                 cmp     word ptr [esi], 0
.text:0040FB5A                 jnz     short loc_40FADF
.text:0040FB5C                 jmp     loc_40F484
.text:0040FB61 ; ---------------------------------------------------------------------------
.text:0040FB61
.text:0040FB61 loc_40FB61:                             ; CODE XREF: sub_40F2C0+77C↑j
.text:0040FB61                 movzx   eax, word ptr [esi]
.text:0040FB64                 add     esi, 2
.text:0040FB67                 jmp     loc_40FA42
.text:0040FB67 ; ---------------------------------------------------------------------------
.text:0040FB6C                 align 10h
.text:0040FB70
.text:0040FB70 loc_40FB70:                             ; CODE XREF: sub_40F2C0+724↑j
.text:0040FB70                 movzx   edx, word ptr [esi+2]
.text:0040FB74                 test    dx, dx
.text:0040FB77                 jz      loc_40F9EA
.text:0040FB7D                 cmp     dx, 5Dh ; ']'
.text:0040FB81                 jz      loc_40F9EA
.text:0040FB87                 mov     [esp+107Ch+var_1049], 1
.text:0040FB8C                 jmp     loc_40F9EA
.text:0040FB91 ; ---------------------------------------------------------------------------
.text:0040FB91
.text:0040FB91 loc_40FB91:                             ; CODE XREF: sub_40F2C0+710↑j
.text:0040FB91                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040FB94                 call    towlower
.text:0040FB99                 movzx   ebx, ax
.text:0040FB9C                 jmp     loc_40F9D6
.text:0040FBA1 ; ---------------------------------------------------------------------------
.text:0040FBA1
.text:0040FBA1 loc_40FBA1:                             ; CODE XREF: sub_40F2C0+6F6↑j
.text:0040FBA1                 cmp     word ptr [esi], 3Ah ; ':'
.text:0040FBA5                 jnz     loc_40F9BC
.text:0040FBAB                 mov     [esp+107Ch+var_1048], esi
.text:0040FBAF                 xor     edx, edx
.text:0040FBB1                 jmp     short loc_40FBC0
.text:0040FBB1 ; ---------------------------------------------------------------------------
.text:0040FBB3                 align 10h
.text:0040FBC0
.text:0040FBC0 loc_40FBC0:                             ; CODE XREF: sub_40F2C0+8F1↑j
.text:0040FBC0                                         ; sub_40F2C0+92C↓j
.text:0040FBC0                 cmp     edx, 800h
.text:0040FBC6                 mov     ecx, 1
.text:0040FBCB                 jz      loc_40F489
.text:0040FBD1                 add     esi, 2
.text:0040FBD4                 movzx   ebx, word ptr [esi]
.text:0040FBD7                 cmp     bx, 3Ah ; ':'
.text:0040FBDB                 jz      short loc_40FC00
.text:0040FBDD
.text:0040FBDD loc_40FBDD:                             ; CODE XREF: sub_40F2C0+945↓j
.text:0040FBDD                 lea     ecx, [ebx-61h]
.text:0040FBE0                 cmp     cx, 18h
.text:0040FBE4                 ja      short loc_40FBEE
.text:0040FBE6                 mov     [esp+edx*2+107Ch+var_102C], bx
.text:0040FBEB                 inc     edx
.text:0040FBEC                 jmp     short loc_40FBC0
.text:0040FBEE ; ---------------------------------------------------------------------------
.text:0040FBEE
.text:0040FBEE loc_40FBEE:                             ; CODE XREF: sub_40F2C0+924↑j
.text:0040FBEE                 mov     esi, [esp+107Ch+var_1048]
.text:0040FBF2                 mov     ebx, 5Bh ; '['
.text:0040FBF7                 jmp     loc_40F9D6
.text:0040FBF7 ; ---------------------------------------------------------------------------
.text:0040FBFC                 align 10h
.text:0040FC00
.text:0040FC00 loc_40FC00:                             ; CODE XREF: sub_40F2C0+91B↑j
.text:0040FC00                 cmp     word ptr [esi+2], 5Dh ; ']'
.text:0040FC05                 jnz     short loc_40FBDD
.text:0040FC07                 mov     [esp+edx*2+107Ch+var_102C], 0
.text:0040FC0E                 lea     ebx, [esp+107Ch+var_102C]
.text:0040FC12                 add     esi, 4
.text:0040FC15                 mov     dword ptr [esp+107Ch+C], ebx
.text:0040FC18                 call    sub_4106D0
.text:0040FC1D                 movzx   eax, ax
.text:0040FC20                 mov     ecx, 1
.text:0040FC25                 test    ax, ax
.text:0040FC28                 jz      loc_40F489
.text:0040FC2E                 mov     dword ptr [esp+107Ch+Type], eax ; Type
.text:0040FC32                 movzx   edx, word ptr [edi]
.text:0040FC35                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040FC38                 call    iswctype
.text:0040FC3D                 test    eax, eax
.text:0040FC3F                 jz      loc_40FA5E
.text:0040FC45                 jmp     loc_40FA66
.text:0040FC45 ; ---------------------------------------------------------------------------
.text:0040FC4A                 align 10h
.text:0040FC50
.text:0040FC50 loc_40FC50:                             ; CODE XREF: sub_40F2C0+6EC↑j
.text:0040FC50                 movzx   eax, word ptr [esi]
.text:0040FC53                 mov     ecx, 1
.text:0040FC58                 test    ax, ax
.text:0040FC5B                 jz      loc_40F489
.text:0040FC61                 test    ebp, 10h
.text:0040FC67                 movzx   ebx, ax
.text:0040FC6A                 jnz     short loc_40FC80
.text:0040FC6C
.text:0040FC6C loc_40FC6C:                             ; CODE XREF: sub_40F2C0+9CB↓j
.text:0040FC6C                 add     esi, 2
.text:0040FC6F                 cmp     bx, word ptr [esp+107Ch+var_1040]
.text:0040FC74                 jnz     loc_40FA06
.text:0040FC7A                 jmp     loc_40FA66
.text:0040FC7A ; ---------------------------------------------------------------------------
.text:0040FC7F                 align 10h
.text:0040FC80
.text:0040FC80 loc_40FC80:                             ; CODE XREF: sub_40F2C0+9AA↑j
.text:0040FC80                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040FC83                 call    towlower
.text:0040FC88                 movzx   ebx, ax
.text:0040FC8B                 jmp     short loc_40FC6C
.text:0040FC8D ; ---------------------------------------------------------------------------
.text:0040FC8D
.text:0040FC8D loc_40FC8D:                             ; CODE XREF: sub_40F2C0+6CE↑j
.text:0040FC8D                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040FC90                 call    towlower
.text:0040FC95                 movzx   ecx, ax
.text:0040FC98                 mov     [esp+107Ch+var_1040], ecx
.text:0040FC9C                 jmp     loc_40F994
.text:0040FCA1 ; ---------------------------------------------------------------------------
.text:0040FCA1
.text:0040FCA1 loc_40FCA1:                             ; CODE XREF: sub_40F2C0+6B1↑j
.text:0040FCA1                 cmp     dx, 5Eh ; '^'
.text:0040FCA5                 jnz     loc_40F977
.text:0040FCAB
.text:0040FCAB loc_40FCAB:                             ; CODE XREF: sub_40F2C0+6A3↑j
.text:0040FCAB                 mov     [esp+107Ch+var_1041], 1
.text:0040FCB0                 jmp     loc_40F977
.text:0040FCB5 ; ---------------------------------------------------------------------------
.text:0040FCB5
.text:0040FCB5 loc_40FCB5:                             ; CODE XREF: sub_40F2C0+691↑j
.text:0040FCB5                 test    ebp, 1
.text:0040FCBB                 mov     ecx, 1
.text:0040FCC0                 jz      loc_40F957
.text:0040FCC6                 jmp     loc_40F489
.text:0040FCC6 ; ---------------------------------------------------------------------------
.text:0040FCCB                 align 10h
.text:0040FCD0
.text:0040FCD0 loc_40FCD0:                             ; CODE XREF: sub_40F2C0+687↑j
.text:0040FCD0                 cmp     [esp+107Ch+var_102D], 0
.text:0040FCD5                 jz      loc_40F94D
.text:0040FCDB                 jmp     loc_40F489
.text:0040FCE0 ; ---------------------------------------------------------------------------
.text:0040FCE0
.text:0040FCE0 loc_40FCE0:                             ; CODE XREF: sub_40F2C0+668↑j
.text:0040FCE0                 mov     dword ptr [esp+107Ch+C], offset sub_40DEA0 ; VarName
.text:0040FCE7                 call    getenv
.text:0040FCEC                 test    eax, eax
.text:0040FCEE                 setnz   dl
.text:0040FCF1                 movzx   ecx, dl
.text:0040FCF4                 lea     ebx, [ecx+ecx-1]
.text:0040FCF8                 mov     ds:dword_42C560, ebx
.text:0040FCFE                 jmp     loc_40F92E
.text:0040FD03 ; ---------------------------------------------------------------------------
.text:0040FD03
.text:0040FD03 loc_40FD03:                             ; CODE XREF: sub_40F2C0+6D↑j
.text:0040FD03                                         ; DATA XREF: sub_40F2C0:jpt_40F32D↑o
.text:0040FD03                 test    ebp, 2          ; jumptable 0040F32D case 92
.text:0040FD09                 jnz     short loc_40FD27
.text:0040FD0B                 movzx   ebx, word ptr [esi]
.text:0040FD0E                 mov     ecx, 1
.text:0040FD13                 add     esi, 2
.text:0040FD16                 test    bx, bx
.text:0040FD19                 jz      loc_40F489
.text:0040FD1F                 test    ebp, 10h
.text:0040FD25                 jnz     short loc_40FD56
.text:0040FD27
.text:0040FD27 loc_40FD27:                             ; CODE XREF: sub_40F2C0+A49↑j
.text:0040FD27                                         ; sub_40F2C0+AA1↓j
.text:0040FD27                 cmp     edi, [esp+107Ch+arg_8]
.text:0040FD2E                 jz      loc_40F484
.text:0040FD34                 test    ebp, 10h
.text:0040FD3A                 jnz     short loc_40FD46
.text:0040FD3C                 movzx   eax, word ptr [edi]
.text:0040FD3F
.text:0040FD3F loc_40FD3F:                             ; CODE XREF: sub_40F2C0+A94↓j
.text:0040FD3F                 cmp     eax, ebx
.text:0040FD41                 jmp     loc_40F89A
.text:0040FD46 ; ---------------------------------------------------------------------------
.text:0040FD46
.text:0040FD46 loc_40FD46:                             ; CODE XREF: sub_40F2C0+A7A↑j
.text:0040FD46                 movzx   edx, word ptr [edi]
.text:0040FD49                 mov     dword ptr [esp+107Ch+C], edx ; C
.text:0040FD4C                 call    towlower
.text:0040FD51                 movzx   eax, ax
.text:0040FD54                 jmp     short loc_40FD3F
.text:0040FD56 ; ---------------------------------------------------------------------------
.text:0040FD56
.text:0040FD56 loc_40FD56:                             ; CODE XREF: sub_40F2C0+A65↑j
.text:0040FD56                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040FD59                 call    towlower
.text:0040FD5E                 movzx   ebx, ax
.text:0040FD61                 jmp     short loc_40FD27
.text:0040FD63 ; ---------------------------------------------------------------------------
.text:0040FD63
.text:0040FD63 loc_40FD63:                             ; CODE XREF: sub_40F2C0+5B↑j
.text:0040FD63                 mov     dword ptr [esp+107Ch+C], ebx ; C
.text:0040FD66                 call    towlower
.text:0040FD6B                 movzx   ebx, ax
.text:0040FD6E                 jmp     loc_40F321
.text:0040FD6E sub_40F2C0      endp
.text:0040FD6E
.text:0040FD6E ; ---------------------------------------------------------------------------
.text:0040FD73                 align 10h
.text:0040FD80
.text:0040FD80 ; =============== S U B R O U T I N E =======================================
.text:0040FD80
.text:0040FD80
.text:0040FD80 sub_40FD80      proc near               ; CODE XREF: sub_40F2C0+54B↑p
.text:0040FD80                                         ; sub_40FD80+6D↓p
.text:0040FD80
.text:0040FD80 VarName         = dword ptr -0Ch
.text:0040FD80 arg_0           = dword ptr  4
.text:0040FD80
.text:0040FD80                 push    esi
.text:0040FD81                 push    ebx
.text:0040FD82                 sub     esp, 4
.text:0040FD85                 mov     esi, [esp+0Ch+arg_0]
.text:0040FD89                 mov     ebx, esi
.text:0040FD8B                 nop
.text:0040FD8C                 lea     esi, [esi+0]
.text:0040FD90
.text:0040FD90 loc_40FD90:                             ; CODE XREF: sub_40FD80+54↓j
.text:0040FD90                                         ; sub_40FD80+74↓j ...
.text:0040FD90                 add     ebx, 2
.text:0040FD93                 mov     ecx, esi
.text:0040FD95                 movzx   edx, word ptr [ebx]
.text:0040FD98                 test    dx, dx
.text:0040FD9B                 jz      short loc_40FDD9
.text:0040FD9D                 cmp     dx, 5Bh ; '['
.text:0040FDA1                 jz      short loc_40FDF6
.text:0040FDA3                 cmp     dx, 3Fh ; '?'
.text:0040FDA7                 jz      short loc_40FDE0
.text:0040FDA9                 cmp     dx, 2Ah ; '*'
.text:0040FDAD                 jz      short loc_40FDE0
.text:0040FDAF                 cmp     dx, 2Bh ; '+'
.text:0040FDB3                 jz      short loc_40FDE0
.text:0040FDB5                 cmp     dx, 40h ; '@'
.text:0040FDB9                 jz      short loc_40FDE0
.text:0040FDBB                 cmp     dx, 21h ; '!'
.text:0040FDBF                 jz      short loc_40FDE0
.text:0040FDC1                 jmp     short loc_40FDD0
.text:0040FDC1 ; ---------------------------------------------------------------------------
.text:0040FDC3                 align 10h
.text:0040FDD0
.text:0040FDD0 loc_40FDD0:                             ; CODE XREF: sub_40FD80+41↑j
.text:0040FDD0                                         ; sub_40FD80+65↓j
.text:0040FDD0                 cmp     dx, 29h ; ')'
.text:0040FDD4                 jnz     short loc_40FD90
.text:0040FDD6                 lea     ecx, [ebx+2]
.text:0040FDD9
.text:0040FDD9 loc_40FDD9:                             ; CODE XREF: sub_40FD80+1B↑j
.text:0040FDD9                                         ; sub_40FD80+A8↓j
.text:0040FDD9                 pop     esi
.text:0040FDDA                 mov     eax, ecx
.text:0040FDDC                 pop     ebx
.text:0040FDDD                 pop     esi
.text:0040FDDE                 retn
.text:0040FDDE ; ---------------------------------------------------------------------------
.text:0040FDDF                 align 10h
.text:0040FDE0
.text:0040FDE0 loc_40FDE0:                             ; CODE XREF: sub_40FD80+27↑j
.text:0040FDE0                                         ; sub_40FD80+2D↑j ...
.text:0040FDE0                 cmp     word ptr [ebx+2], 28h ; '('
.text:0040FDE5                 jnz     short loc_40FDD0
.text:0040FDE7                 lea     edx, [ebx+2]
.text:0040FDEA                 mov     [esp+0Ch+VarName], edx
.text:0040FDED                 call    sub_40FD80
.text:0040FDF2                 mov     ebx, eax
.text:0040FDF4                 jmp     short loc_40FD90
.text:0040FDF6 ; ---------------------------------------------------------------------------
.text:0040FDF6
.text:0040FDF6 loc_40FDF6:                             ; CODE XREF: sub_40FD80+21↑j
.text:0040FDF6                 mov     eax, ds:dword_42C560
.text:0040FDFB                 test    eax, eax
.text:0040FDFD                 jz      short loc_40FE57
.text:0040FDFF
.text:0040FDFF loc_40FDFF:                             ; CODE XREF: sub_40FD80+F5↓j
.text:0040FDFF                 add     ebx, 2
.text:0040FE02                 movzx   eax, word ptr [ebx]
.text:0040FE05                 cmp     ax, 21h ; '!'
.text:0040FE09                 jz      short loc_40FE4F
.text:0040FE0B                 mov     ecx, ds:dword_42C560
.text:0040FE11                 test    ecx, ecx
.text:0040FE13                 js      short loc_40FE49
.text:0040FE15
.text:0040FE15 loc_40FE15:                             ; CODE XREF: sub_40FD80+CD↓j
.text:0040FE15                                         ; sub_40FD80+D5↓j
.text:0040FE15                 cmp     ax, 5Dh ; ']'
.text:0040FE19                 jz      short loc_40FE38
.text:0040FE1B                 nop
.text:0040FE1C                 lea     esi, [esi+0]
.text:0040FE20
.text:0040FE20 loc_40FE20:                             ; CODE XREF: sub_40FD80+B1↓j
.text:0040FE20                                         ; sub_40FD80+C2↓j
.text:0040FE20                 add     ebx, 2
.text:0040FE23                 mov     ecx, esi
.text:0040FE25                 test    ax, ax
.text:0040FE28                 jz      short loc_40FDD9
.text:0040FE2A                 movzx   eax, word ptr [ebx]
.text:0040FE2D                 cmp     ax, 5Dh ; ']'
.text:0040FE31                 jnz     short loc_40FE20
.text:0040FE33                 jmp     loc_40FD90
.text:0040FE38 ; ---------------------------------------------------------------------------
.text:0040FE38
.text:0040FE38 loc_40FE38:                             ; CODE XREF: sub_40FD80+99↑j
.text:0040FE38                 add     ebx, 2
.text:0040FE3B                 movzx   eax, word ptr [ebx]
.text:0040FE3E                 cmp     ax, 5Dh ; ']'
.text:0040FE42                 jnz     short loc_40FE20
.text:0040FE44                 jmp     loc_40FD90
.text:0040FE49 ; ---------------------------------------------------------------------------
.text:0040FE49
.text:0040FE49 loc_40FE49:                             ; CODE XREF: sub_40FD80+93↑j
.text:0040FE49                 cmp     ax, 5Eh ; '^'
.text:0040FE4D                 jnz     short loc_40FE15
.text:0040FE4F
.text:0040FE4F loc_40FE4F:                             ; CODE XREF: sub_40FD80+89↑j
.text:0040FE4F                 add     ebx, 2
.text:0040FE52                 movzx   eax, word ptr [ebx]
.text:0040FE55                 jmp     short loc_40FE15
.text:0040FE57 ; ---------------------------------------------------------------------------
.text:0040FE57
.text:0040FE57 loc_40FE57:                             ; CODE XREF: sub_40FD80+7D↑j
.text:0040FE57                 mov     [esp+0Ch+VarName], offset sub_40DEA0 ; VarName
.text:0040FE5E                 call    getenv
.text:0040FE63                 test    eax, eax
.text:0040FE65                 setnz   dl
.text:0040FE68                 movzx   ecx, dl
.text:0040FE6B                 lea     edx, [ecx+ecx-1]
.text:0040FE6F                 mov     ds:dword_42C560, edx
.text:0040FE75                 jmp     short loc_40FDFF
.text:0040FE75 sub_40FD80      endp
.text:0040FE75
.text:0040FE75 ; ---------------------------------------------------------------------------
.text:0040FE77                 align 10h
.text:0040FE80
.text:0040FE80 ; =============== S U B R O U T I N E =======================================
.text:0040FE80
.text:0040FE80
.text:0040FE80 ; int __cdecl sub_40FE80(__int16, wchar_t *, int, int, char, int)
.text:0040FE80 sub_40FE80      proc near               ; CODE XREF: sub_40F2C0+21D↑p
.text:0040FE80                                         ; sub_40F2C0+59A↑p ...
.text:0040FE80
.text:0040FE80 String          = dword ptr -3Ch
.text:0040FE80 Source          = dword ptr -38h
.text:0040FE80 var_34          = dword ptr -34h
.text:0040FE80 var_30          = dword ptr -30h
.text:0040FE80 var_2C          = dword ptr -2Ch
.text:0040FE80 var_28          = dword ptr -28h
.text:0040FE80 var_24          = dword ptr -24h
.text:0040FE80 var_20          = dword ptr -20h
.text:0040FE80 var_19          = byte ptr -19h
.text:0040FE80 var_18          = dword ptr -18h
.text:0040FE80 var_14          = dword ptr -14h
.text:0040FE80 arg_0           = word ptr  4
.text:0040FE80 arg_4           = dword ptr  8
.text:0040FE80 arg_8           = dword ptr  0Ch
.text:0040FE80 arg_C           = dword ptr  10h
.text:0040FE80 arg_10          = byte ptr  14h
.text:0040FE80 arg_14          = dword ptr  18h
.text:0040FE80
.text:0040FE80                 push    ebp
.text:0040FE81                 xor     ebp, ebp
.text:0040FE83                 push    edi
.text:0040FE84                 push    esi
.text:0040FE85                 push    ebx
.text:0040FE86                 sub     esp, 2Ch
.text:0040FE89                 lea     edx, [esp+3Ch+var_14]
.text:0040FE8D                 movzx   ebx, [esp+3Ch+arg_0]
.text:0040FE92                 movzx   ecx, [esp+3Ch+arg_10]
.text:0040FE97                 mov     [esp+3Ch+var_24], edx
.text:0040FE9B                 mov     edx, [esp+3Ch+arg_4]
.text:0040FE9F                 mov     [esp+3Ch+var_18], ebx
.text:0040FEA3                 mov     [esp+3Ch+var_19], cl
.text:0040FEA7                 mov     [esp+3Ch+var_14], 0
.text:0040FEAF                 mov     [esp+3Ch+String], edx ; String
.text:0040FEB2                 call    wcslen
.text:0040FEB7                 mov     [esp+3Ch+var_28], eax
.text:0040FEBB                 mov     edi, [esp+3Ch+arg_4]
.text:0040FEBF                 add     edi, 2
.text:0040FEC2                 mov     [esp+3Ch+var_20], edi
.text:0040FEC6                 lea     esi, [esi+0]
.text:0040FEC9                 lea     edi, [edi+0]
.text:0040FED0
.text:0040FED0 loc_40FED0:                             ; CODE XREF: sub_40FE80+C2↓j
.text:0040FED0                 movzx   eax, word ptr [edi]
.text:0040FED3                 mov     edx, 0FFFFFFFFh
.text:0040FED8                 test    ax, ax
.text:0040FEDB                 jz      loc_40FFD0
.text:0040FEE1                 cmp     ax, 5Bh ; '['
.text:0040FEE5                 jz      loc_410474
.text:0040FEEB                 cmp     ax, 3Fh ; '?'
.text:0040FEEF                 jz      loc_410460
.text:0040FEF5                 cmp     ax, 2Ah ; '*'
.text:0040FEF9                 jz      loc_410460
.text:0040FEFF                 cmp     ax, 2Bh ; '+'
.text:0040FF03                 jz      loc_410460
.text:0040FF09                 cmp     ax, 40h ; '@'
.text:0040FF0D                 jz      loc_410460
.text:0040FF13                 cmp     ax, 21h ; '!'
.text:0040FF17                 jz      loc_410460
.text:0040FF1D                 lea     esi, [esi+0]
.text:0040FF20
.text:0040FF20 loc_40FF20:                             ; CODE XREF: sub_40FE80+5E5↓j
.text:0040FF20                 cmp     ax, 29h ; ')'
.text:0040FF24                 jz      loc_40FFDA
.text:0040FF2A                 cmp     ax, 7Ch ; '|'
.text:0040FF2E                 lea     edx, [edi+2]
.text:0040FF31                 jz      short loc_40FF44
.text:0040FF33                 lea     esi, [esi+0]
.text:0040FF39                 lea     edi, [edi+0]
.text:0040FF40
.text:0040FF40 loc_40FF40:                             ; CODE XREF: sub_40FE80+C6↓j
.text:0040FF40                                         ; sub_40FE80+146↓j ...
.text:0040FF40                 mov     edi, edx
.text:0040FF42                 jmp     short loc_40FED0
.text:0040FF44 ; ---------------------------------------------------------------------------
.text:0040FF44
.text:0040FF44 loc_40FF44:                             ; CODE XREF: sub_40FE80+B1↑j
.text:0040FF44                 test    ebp, ebp
.text:0040FF46                 jnz     short loc_40FF40
.text:0040FF48                 mov     ecx, [esp+3Ch+var_18]
.text:0040FF4C                 mov     edx, [esp+3Ch+var_28]
.text:0040FF50                 sub     ecx, 3Fh ; '?'
.text:0040FF53                 cmp     cx, 1
.text:0040FF57                 jbe     short loc_40FF66
.text:0040FF59                 mov     ebx, [esp+3Ch+var_20]
.text:0040FF5D                 mov     esi, edi
.text:0040FF5F                 sub     esi, ebx
.text:0040FF61                 sar     esi, 1
.text:0040FF63                 lea     edx, [esi+1]
.text:0040FF66
.text:0040FF66 loc_40FF66:                             ; CODE XREF: sub_40FE80+D7↑j
.text:0040FF66                 test    edx, edx
.text:0040FF68                 lea     eax, [edx+edx+4]
.text:0040FF6C                 js      short loc_40FFCB
.text:0040FF6E                 cmp     eax, 3
.text:0040FF71                 jbe     short loc_40FFCB
.text:0040FF73                 cmp     eax, 1F3Fh
.text:0040FF78                 ja      short loc_40FFCB
.text:0040FF7A                 mov     [esp+3Ch+String], eax ; Size
.text:0040FF7D                 mov     esi, edi
.text:0040FF7F                 add     edi, 2
.text:0040FF82                 call    malloc
.text:0040FF87                 mov     edx, [esp+3Ch+var_20]
.text:0040FF8B                 mov     ebx, eax
.text:0040FF8D                 sub     esi, edx
.text:0040FF8F                 mov     ecx, esi
.text:0040FF91                 mov     edx, [esp+3Ch+var_20]
.text:0040FF95                 sar     ecx, 1
.text:0040FF97                 mov     [esp+3Ch+var_34], ecx
.text:0040FF9B                 lea     ecx, [eax+4]
.text:0040FF9E                 mov     [esp+3Ch+Source], edx
.text:0040FFA2                 mov     [esp+3Ch+String], ecx
.text:0040FFA5                 call    sub_429740
.text:0040FFAA                 mov     word ptr [esi+eax], 0
.text:0040FFB0                 mov     edx, [esp+3Ch+var_24]
.text:0040FFB4                 mov     dword ptr [ebx], 0
.text:0040FFBA                 mov     [esp+3Ch+var_24], ebx
.text:0040FFBE                 mov     [edx], ebx
.text:0040FFC0                 mov     edx, edi
.text:0040FFC2                 mov     [esp+3Ch+var_20], edi
.text:0040FFC6                 jmp     loc_40FF40
.text:0040FFCB ; ---------------------------------------------------------------------------
.text:0040FFCB
.text:0040FFCB loc_40FFCB:                             ; CODE XREF: sub_40FE80+EC↑j
.text:0040FFCB                                         ; sub_40FE80+F1↑j ...
.text:0040FFCB                 mov     edx, 0FFFFFFFFh
.text:0040FFD0
.text:0040FFD0 loc_40FFD0:                             ; CODE XREF: sub_40FE80+5B↑j
.text:0040FFD0                                         ; sub_40FE80+2B5↓j ...
.text:0040FFD0                 add     esp, 2Ch
.text:0040FFD3                 mov     eax, edx
.text:0040FFD5                 pop     ebx
.text:0040FFD6                 pop     esi
.text:0040FFD7                 pop     edi
.text:0040FFD8                 pop     ebp
.text:0040FFD9                 retn
.text:0040FFDA ; ---------------------------------------------------------------------------
.text:0040FFDA
.text:0040FFDA loc_40FFDA:                             ; CODE XREF: sub_40FE80+A4↑j
.text:0040FFDA                 dec     ebp
.text:0040FFDB                 lea     edx, [edi+2]
.text:0040FFDE                 cmp     ebp, 0FFFFFFFFh
.text:0040FFE1                 jnz     loc_40FF40
.text:0040FFE7                 mov     ebp, [esp+3Ch+var_18]
.text:0040FFEB                 mov     edx, [esp+3Ch+var_28]
.text:0040FFEF                 sub     ebp, 3Fh ; '?'
.text:0040FFF2                 cmp     bp, 1
.text:0040FFF6                 jbe     short loc_410005
.text:0040FFF8                 mov     eax, [esp+3Ch+var_20]
.text:0040FFFC                 mov     ebx, edi
.text:0040FFFE                 sub     ebx, eax
.text:00410000
.text:00410000 loc_410000:                             ; DATA XREF: .text:00421EC4↓o
.text:00410000                                         ; .text:0042243C↓o
.text:00410000                 sar     ebx, 1
.text:00410002                 lea     edx, [ebx+1]
.text:00410005
.text:00410005 loc_410005:                             ; CODE XREF: sub_40FE80+176↑j
.text:00410005                 test    edx, edx
.text:00410007                 lea     eax, [edx+edx+4]
.text:0041000B                 js      short loc_40FFCB
.text:0041000D                 cmp     eax, 3
.text:00410010                 jbe     short loc_40FFCB
.text:00410012                 cmp     eax, 1F3Fh
.text:00410017                 ja      short loc_40FFCB
.text:00410019                 mov     [esp+3Ch+String], eax ; Size
.text:0041001C                 mov     esi, edi
.text:0041001E                 call    malloc
.text:00410023                 mov     ebx, eax
.text:00410025                 mov     edx, [esp+3Ch+var_20]
.text:00410029                 mov     eax, [esp+3Ch+var_20]
.text:0041002D                 lea     ecx, [ebx+4]
.text:00410030                 mov     [esp+3Ch+String], ecx
.text:00410033                 sub     esi, eax
.text:00410035                 mov     ebp, esi
.text:00410037                 mov     [esp+3Ch+Source], edx
.text:0041003B                 sar     ebp, 1
.text:0041003D                 mov     [esp+3Ch+var_34], ebp
.text:00410041                 call    sub_429740
.text:00410046                 mov     dword ptr [ebx], 0
.text:0041004C                 mov     ebp, [esp+3Ch+var_24]
.text:00410050                 mov     word ptr [esi+eax], 0
.text:00410056                 mov     [ebp+0], ebx
.text:00410059                 mov     ecx, [esp+3Ch+var_14]
.text:0041005D                 test    ecx, ecx
.text:0041005F                 jz      loc_410444
.text:00410065                 cmp     word ptr [edi-2], 29h ; ')'
.text:0041006A                 jnz     loc_410428
.text:00410070
.text:00410070 loc_410070:                             ; DATA XREF: .text:00422CDC↓o
.text:00410070                 mov     eax, [esp+3Ch+var_18]
.text:00410074                 sub     eax, 21h ; '!'  ; switch 32 cases
.text:00410077                 cmp     eax, 1Fh
.text:0041007A                 ja      def_410080      ; jumptable 00410080 default case, cases 34-41,44-62
.text:00410080                 jmp     ds:jpt_410080[eax*4] ; switch jump
.text:00410080 ; ---------------------------------------------------------------------------
.text:00410087                 align 4
.text:00410088 jpt_410080      dd offset loc_410286    ; DATA XREF: sub_40FE80+200↑r
.text:00410088                 dd offset def_410080    ; jump table for switch statement
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset loc_410108
.text:00410088                 dd offset loc_41013F
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset def_410080
.text:00410088                 dd offset loc_41038E
.text:00410088                 dd offset loc_4103C5
.text:00410108 ; ---------------------------------------------------------------------------
.text:00410108
.text:00410108 loc_410108:                             ; CODE XREF: sub_40FE80+200↑j
.text:00410108                                         ; DATA XREF: sub_40FE80:jpt_410080↑o
.text:00410108                 movzx   ecx, [esp+3Ch+var_19] ; jumptable 00410080 case 42
.text:0041010D                 mov     [esp+3Ch+String], edi
.text:00410110                 mov     edx, [esp+3Ch+arg_14]
.text:00410114                 mov     ebx, [esp+3Ch+arg_C]
.text:00410118                 mov     esi, [esp+3Ch+arg_8]
.text:0041011C                 mov     [esp+3Ch+var_2C], edx
.text:00410120                 mov     [esp+3Ch+var_30], ecx
.text:00410124                 mov     [esp+3Ch+var_34], ebx
.text:00410128                 mov     [esp+3Ch+Source], esi
.text:0041012C                 call    sub_40F2C0
.text:00410131                 xor     edx, edx
.text:00410133                 test    eax, eax
.text:00410135                 jz      loc_40FFD0
.text:0041013B                 mov     ecx, [esp+3Ch+var_14]
.text:0041013F
.text:0041013F loc_41013F:                             ; CODE XREF: sub_40FE80+200↑j
.text:0041013F                                         ; sub_40FE80+3BB↓j
.text:0041013F                                         ; DATA XREF: ...
.text:0041013F                 mov     ebx, [esp+3Ch+arg_8] ; jumptable 00410080 case 43
.text:00410143                 cmp     ebx, [esp+3Ch+arg_C]
.text:00410147                 ja      loc_41022E
.text:0041014D                 mov     ebp, [esp+3Ch+arg_14]
.text:00410151                 mov     esi, [esp+3Ch+arg_14]
.text:00410155                 and     ebp, 1
.text:00410158                 and     esi, 0FFFFFFFBh
.text:0041015B
.text:0041015B loc_41015B:                             ; CODE XREF: sub_40FE80+3A5↓j
.text:0041015B                 test    ebp, ebp
.text:0041015D                 mov     eax, [esp+3Ch+arg_14]
.text:00410161                 jnz     short loc_410165
.text:00410163                 mov     eax, esi
.text:00410165
.text:00410165 loc_410165:                             ; CODE XREF: sub_40FE80+2E1↑j
.text:00410165                 movzx   edx, [esp+3Ch+var_19]
.text:0041016A                 mov     [esp+3Ch+var_2C], eax
.text:0041016E                 mov     [esp+3Ch+var_34], ebx
.text:00410172                 mov     [esp+3Ch+var_30], edx
.text:00410176                 mov     edx, [esp+3Ch+arg_8]
.text:0041017A                 mov     [esp+3Ch+Source], edx
.text:0041017E                 lea     edx, [ecx+4]
.text:00410181                 mov     [esp+3Ch+String], edx
.text:00410184                 call    sub_40F2C0
.text:00410189                 test    eax, eax
.text:0041018B                 jnz     loc_410218
.text:00410191                 test    ebp, ebp
.text:00410193                 mov     eax, [esp+3Ch+arg_14]
.text:00410197                 jnz     short loc_41019B
.text:00410199                 mov     eax, esi
.text:0041019B
.text:0041019B loc_41019B:                             ; CODE XREF: sub_40FE80+317↑j
.text:0041019B                 cmp     ebx, [esp+3Ch+arg_8]
.text:0041019F                 mov     [esp+3Ch+var_2C], eax
.text:004101A3                 jz      loc_410277
.text:004101A9                 xor     edx, edx
.text:004101AB                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:004101B0                 jz      loc_410260
.text:004101B6
.text:004101B6 loc_4101B6:                             ; CODE XREF: sub_40FE80+3EA↓j
.text:004101B6                                         ; sub_40FE80+3F2↓j
.text:004101B6                 movzx   eax, dl
.text:004101B9
.text:004101B9 loc_4101B9:                             ; CODE XREF: sub_40FE80+401↓j
.text:004101B9                 mov     [esp+3Ch+var_30], eax
.text:004101BD                 mov     edx, [esp+3Ch+arg_C]
.text:004101C1                 mov     [esp+3Ch+Source], ebx
.text:004101C5                 mov     [esp+3Ch+String], edi
.text:004101C8                 mov     [esp+3Ch+var_34], edx
.text:004101CC                 call    sub_40F2C0
.text:004101D1                 test    eax, eax
.text:004101D3                 jz      short loc_410246
.text:004101D5                 cmp     ebx, [esp+3Ch+arg_8]
.text:004101D9                 jz      short loc_410218
.text:004101DB                 mov     eax, [esp+3Ch+arg_14]
.text:004101DF                 test    al, 1
.text:004101E1                 jnz     short loc_4101E5
.text:004101E3                 mov     eax, esi
.text:004101E5
.text:004101E5 loc_4101E5:                             ; CODE XREF: sub_40FE80+361↑j
.text:004101E5                 mov     [esp+3Ch+var_2C], eax
.text:004101E9                 xor     edx, edx
.text:004101EB                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:004101F0                 jz      short loc_410250
.text:004101F2
.text:004101F2 loc_4101F2:                             ; CODE XREF: sub_40FE80+3DA↓j
.text:004101F2                                         ; sub_40FE80+3DE↓j
.text:004101F2                 mov     [esp+3Ch+Source], ebx
.text:004101F6                 movzx   ecx, dl
.text:004101F9                 mov     edx, [esp+3Ch+arg_4]
.text:004101FD                 mov     [esp+3Ch+var_30], ecx
.text:00410201                 mov     ecx, [esp+3Ch+arg_C]
.text:00410205                 sub     edx, 2
.text:00410208                 mov     [esp+3Ch+String], edx
.text:0041020B                 mov     [esp+3Ch+var_34], ecx
.text:0041020F                 call    sub_40F2C0
.text:00410214                 test    eax, eax
.text:00410216                 jz      short loc_410246
.text:00410218
.text:00410218 loc_410218:                             ; CODE XREF: sub_40FE80+30B↑j
.text:00410218                                         ; sub_40FE80+359↑j
.text:00410218                 add     ebx, 2
.text:0041021B                 cmp     ebx, [esp+3Ch+arg_C]
.text:0041021F                 ja      short loc_41022A
.text:00410221                 mov     ecx, [esp+3Ch+var_14]
.text:00410225                 jmp     loc_41015B
.text:0041022A ; ---------------------------------------------------------------------------
.text:0041022A
.text:0041022A loc_41022A:                             ; CODE XREF: sub_40FE80+39F↑j
.text:0041022A                 mov     ecx, [esp+3Ch+var_14]
.text:0041022E
.text:0041022E loc_41022E:                             ; CODE XREF: sub_40FE80+2C7↑j
.text:0041022E                 mov     ecx, [ecx]
.text:00410230                 mov     edx, 1
.text:00410235                 test    ecx, ecx
.text:00410237                 mov     [esp+3Ch+var_14], ecx
.text:0041023B                 jnz     loc_41013F      ; jumptable 00410080 case 43
.text:00410241                 jmp     loc_40FFD0
.text:00410246 ; ---------------------------------------------------------------------------
.text:00410246
.text:00410246 loc_410246:                             ; CODE XREF: sub_40FE80+353↑j
.text:00410246                                         ; sub_40FE80+396↑j
.text:00410246                 xor     edx, edx
.text:00410248                 jmp     loc_40FFD0
.text:00410248 ; ---------------------------------------------------------------------------
.text:0041024D                 align 10h
.text:00410250
.text:00410250 loc_410250:                             ; CODE XREF: sub_40FE80+370↑j
.text:00410250                 mov     ecx, [esp+3Ch+arg_14]
.text:00410254                 and     ecx, 5
.text:00410257                 cmp     ecx, 5
.text:0041025A                 jnz     short loc_4101F2
.text:0041025C                 mov     dl, 1
.text:0041025E                 jmp     short loc_4101F2
.text:00410260 ; ---------------------------------------------------------------------------
.text:00410260
.text:00410260 loc_410260:                             ; CODE XREF: sub_40FE80+330↑j
.text:00410260                 mov     ecx, [esp+3Ch+arg_14]
.text:00410264                 and     ecx, 5
.text:00410267                 cmp     ecx, 5
.text:0041026A                 jnz     loc_4101B6
.text:00410270                 mov     dl, 1
.text:00410272                 jmp     loc_4101B6
.text:00410277 ; ---------------------------------------------------------------------------
.text:00410277
.text:00410277 loc_410277:                             ; CODE XREF: sub_40FE80+323↑j
.text:00410277                 xor     eax, eax
.text:00410279                 cmp     [esp+3Ch+var_19], 0
.text:0041027E                 setnz   al
.text:00410281                 jmp     loc_4101B9
.text:00410286 ; ---------------------------------------------------------------------------
.text:00410286
.text:00410286 loc_410286:                             ; CODE XREF: sub_40FE80+200↑j
.text:00410286                                         ; DATA XREF: sub_40FE80:jpt_410080↑o
.text:00410286                 mov     ebx, [esp+3Ch+arg_8] ; jumptable 00410080 case 33
.text:0041028A                 cmp     ebx, [esp+3Ch+arg_C]
.text:0041028E                 ja      loc_410331
.text:00410294                 mov     ebp, [esp+3Ch+arg_14]
.text:00410298                 and     ebp, 0FFFFFFFBh
.text:0041029B
.text:0041029B loc_41029B:                             ; CODE XREF: sub_40FE80+4AC↓j
.text:0041029B                 test    ecx, ecx
.text:0041029D                 mov     esi, ecx
.text:0041029F                 jz      short loc_4102DD
.text:004102A1
.text:004102A1 loc_4102A1:                             ; CODE XREF: sub_40FE80+45B↓j
.text:004102A1                 mov     eax, [esp+3Ch+arg_14]
.text:004102A5                 test    al, 1
.text:004102A7                 jnz     short loc_4102AB
.text:004102A9                 mov     eax, ebp
.text:004102AB
.text:004102AB loc_4102AB:                             ; CODE XREF: sub_40FE80+427↑j
.text:004102AB                 movzx   ecx, [esp+3Ch+var_19]
.text:004102B0                 mov     [esp+3Ch+var_2C], eax
.text:004102B4                 mov     edx, [esp+3Ch+arg_8]
.text:004102B8                 mov     [esp+3Ch+var_34], ebx
.text:004102BC                 mov     [esp+3Ch+var_30], ecx
.text:004102C0                 lea     ecx, [esi+4]
.text:004102C3                 mov     [esp+3Ch+Source], edx
.text:004102C7                 mov     [esp+3Ch+String], ecx
.text:004102CA                 call    sub_40F2C0
.text:004102CF                 test    eax, eax
.text:004102D1                 jz      loc_410357
.text:004102D7                 mov     esi, [esi]
.text:004102D9                 test    esi, esi
.text:004102DB                 jnz     short loc_4102A1
.text:004102DD
.text:004102DD loc_4102DD:                             ; CODE XREF: sub_40FE80+41F↑j
.text:004102DD                                         ; sub_40FE80+4DB↓j
.text:004102DD                 mov     eax, [esp+3Ch+arg_14]
.text:004102E1                 test    al, 1
.text:004102E3                 jnz     short loc_4102E7
.text:004102E5                 mov     eax, ebp
.text:004102E7
.text:004102E7 loc_4102E7:                             ; CODE XREF: sub_40FE80+463↑j
.text:004102E7                 cmp     ebx, [esp+3Ch+arg_8]
.text:004102EB                 mov     [esp+3Ch+var_2C], eax
.text:004102EF                 jz      short loc_41034B
.text:004102F1                 xor     edx, edx
.text:004102F3                 cmp     word ptr [ebx-2], 2Fh ; '/'
.text:004102F8                 jz      short loc_41033B
.text:004102FA
.text:004102FA loc_4102FA:                             ; CODE XREF: sub_40FE80+4C5↓j
.text:004102FA                                         ; sub_40FE80+4C9↓j
.text:004102FA                 movzx   eax, dl
.text:004102FD
.text:004102FD loc_4102FD:                             ; CODE XREF: sub_40FE80+4D5↓j
.text:004102FD                 mov     [esp+3Ch+var_30], eax
.text:00410301                 mov     edx, [esp+3Ch+arg_C]
.text:00410305                 mov     [esp+3Ch+Source], ebx
.text:00410309                 mov     [esp+3Ch+String], edi
.text:0041030C                 mov     [esp+3Ch+var_34], edx
.text:00410310                 call    sub_40F2C0
.text:00410315                 xor     edx, edx
.text:00410317                 test    eax, eax
.text:00410319                 jz      loc_40FFD0
.text:0041031F
.text:0041031F loc_41031F:                             ; CODE XREF: sub_40FE80+4D9↓j
.text:0041031F                 add     ebx, 2
.text:00410322                 cmp     ebx, [esp+3Ch+arg_C]
.text:00410326                 ja      short loc_410331
.text:00410328                 mov     ecx, [esp+3Ch+var_14]
.text:0041032C                 jmp     loc_41029B
.text:00410331 ; ---------------------------------------------------------------------------
.text:00410331
.text:00410331 loc_410331:                             ; CODE XREF: sub_40FE80+40E↑j
.text:00410331                                         ; sub_40FE80+4A6↑j
.text:00410331                 mov     edx, 1
.text:00410336                 jmp     loc_40FFD0
.text:0041033B ; ---------------------------------------------------------------------------
.text:0041033B
.text:0041033B loc_41033B:                             ; CODE XREF: sub_40FE80+478↑j
.text:0041033B                 mov     esi, [esp+3Ch+arg_14]
.text:0041033F                 and     esi, 5
.text:00410342                 cmp     esi, 5
.text:00410345                 jnz     short loc_4102FA
.text:00410347                 mov     dl, 1
.text:00410349                 jmp     short loc_4102FA
.text:0041034B ; ---------------------------------------------------------------------------
.text:0041034B
.text:0041034B loc_41034B:                             ; CODE XREF: sub_40FE80+46F↑j
.text:0041034B                 xor     eax, eax
.text:0041034D                 cmp     [esp+3Ch+var_19], 0
.text:00410352                 setnz   al
.text:00410355                 jmp     short loc_4102FD
.text:00410357 ; ---------------------------------------------------------------------------
.text:00410357
.text:00410357 loc_410357:                             ; CODE XREF: sub_40FE80+451↑j
.text:00410357                 test    esi, esi
.text:00410359                 jnz     short loc_41031F
.text:0041035B                 jmp     short loc_4102DD
.text:0041035B ; ---------------------------------------------------------------------------
.text:0041035D                 align 10h
.text:00410360
.text:00410360 def_410080:                             ; CODE XREF: sub_40FE80+1FA↑j
.text:00410360                                         ; sub_40FE80+200↑j
.text:00410360                                         ; DATA XREF: ...
.text:00410360                 mov     edi, offset aInvalidExtende ; jumptable 00410080 default case, cases 34-41,44-62
.text:00410365                 mov     edx, 0FFFFFFFFh
.text:0041036A                 test    edi, edi
.text:0041036C                 jz      loc_40FFD0
.text:00410372                 mov     [esp+3Ch+var_34], 493h
.text:0041037A                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:00410382                 mov     [esp+3Ch+String], offset aInvalidExtende_0 ; "! \"Invalid extended matching operator"...
.text:00410389
.text:00410389 loc_410389:                             ; CODE XREF: sub_40FE80+5BF↓j
.text:00410389                                         ; sub_40FE80+5DB↓j
.text:00410389                 call    _assert
.text:0041038E ; ---------------------------------------------------------------------------
.text:0041038E
.text:0041038E loc_41038E:                             ; CODE XREF: sub_40FE80+200↑j
.text:0041038E                                         ; DATA XREF: sub_40FE80:jpt_410080↑o
.text:0041038E                 movzx   ebx, [esp+3Ch+var_19] ; jumptable 00410080 case 63
.text:00410393                 mov     [esp+3Ch+String], edi
.text:00410396                 mov     edx, [esp+3Ch+arg_14]
.text:0041039A                 mov     esi, [esp+3Ch+arg_C]
.text:0041039E                 mov     ebp, [esp+3Ch+arg_8]
.text:004103A2                 mov     [esp+3Ch+var_2C], edx
.text:004103A6                 mov     [esp+3Ch+var_30], ebx
.text:004103AA                 mov     [esp+3Ch+var_34], esi
.text:004103AE                 mov     [esp+3Ch+Source], ebp
.text:004103B2                 call    sub_40F2C0
.text:004103B7                 xor     edx, edx
.text:004103B9                 test    eax, eax
.text:004103BB                 jz      loc_40FFD0
.text:004103C1                 mov     ecx, [esp+3Ch+var_14]
.text:004103C5
.text:004103C5 loc_4103C5:                             ; CODE XREF: sub_40FE80+200↑j
.text:004103C5                                         ; sub_40FE80+5A1↓j
.text:004103C5                                         ; DATA XREF: ...
.text:004103C5                 mov     [esp+3Ch+Source], edi ; jumptable 00410080 case 64
.text:004103C9                 lea     ebp, [ecx+4]
.text:004103CC                 mov     [esp+3Ch+String], ebp ; Destination
.text:004103CF                 call    wcscat
.text:004103D4                 mov     edx, eax
.text:004103D6                 mov     eax, [esp+3Ch+arg_14]
.text:004103DA                 test    al, 1
.text:004103DC                 jnz     short loc_4103E1
.text:004103DE                 and     eax, 0FFFFFFFBh
.text:004103E1
.text:004103E1 loc_4103E1:                             ; CODE XREF: sub_40FE80+55C↑j
.text:004103E1                 movzx   ebx, [esp+3Ch+var_19]
.text:004103E6                 mov     [esp+3Ch+String], edx
.text:004103E9                 mov     esi, [esp+3Ch+arg_C]
.text:004103ED                 mov     [esp+3Ch+var_2C], eax
.text:004103F1                 mov     ecx, [esp+3Ch+arg_8]
.text:004103F5                 mov     [esp+3Ch+var_30], ebx
.text:004103F9                 mov     [esp+3Ch+var_34], esi
.text:004103FD                 mov     [esp+3Ch+Source], ecx
.text:00410401                 call    sub_40F2C0
.text:00410406                 xor     edx, edx
.text:00410408                 test    eax, eax
.text:0041040A                 jz      loc_40FFD0
.text:00410410                 mov     edx, [esp+3Ch+var_14]
.text:00410414                 mov     ecx, [edx]
.text:00410416                 mov     edx, 1
.text:0041041B                 mov     [esp+3Ch+var_14], ecx
.text:0041041F                 test    ecx, ecx
.text:00410421                 jnz     short loc_4103C5 ; jumptable 00410080 case 64
.text:00410423                 jmp     loc_40FFD0
.text:00410428 ; ---------------------------------------------------------------------------
.text:00410428
.text:00410428 loc_410428:                             ; CODE XREF: sub_40FE80+1EA↑j
.text:00410428                 mov     [esp+3Ch+var_34], 439h
.text:00410430                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:00410438                 mov     [esp+3Ch+String], offset aP1L ; "p[-1] == L(')')"
.text:0041043F                 jmp     loc_410389
.text:00410444 ; ---------------------------------------------------------------------------
.text:00410444
.text:00410444 loc_410444:                             ; CODE XREF: sub_40FE80+1DF↑j
.text:00410444                 mov     [esp+3Ch+var_34], 438h
.text:0041044C                 mov     [esp+3Ch+Source], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/lib/fnmatch_l"...
.text:00410454                 mov     [esp+3Ch+String], offset aListNull ; "list != NULL"
.text:0041045B                 jmp     loc_410389
.text:00410460 ; ---------------------------------------------------------------------------
.text:00410460
.text:00410460 loc_410460:                             ; CODE XREF: sub_40FE80+6F↑j
.text:00410460                                         ; sub_40FE80+79↑j ...
.text:00410460                 cmp     word ptr [edi+2], 28h ; '('
.text:00410465                 jnz     loc_40FF20
.text:0041046B                 inc     ebp
.text:0041046C
.text:0041046C loc_41046C:                             ; CODE XREF: sub_40FE80+63A↓j
.text:0041046C                                         ; sub_40FE80+648↓j
.text:0041046C                 lea     edx, [edi+2]
.text:0041046F                 jmp     loc_40FF40
.text:00410474 ; ---------------------------------------------------------------------------
.text:00410474
.text:00410474 loc_410474:                             ; CODE XREF: sub_40FE80+65↑j
.text:00410474                 mov     eax, ds:dword_42C560
.text:00410479                 test    eax, eax
.text:0041047B                 jz      short loc_4104D8
.text:0041047D
.text:0041047D loc_41047D:                             ; CODE XREF: sub_40FE80+676↓j
.text:0041047D                 add     edi, 2
.text:00410480                 movzx   eax, word ptr [edi]
.text:00410483                 cmp     ax, 21h ; '!'
.text:00410487                 jz      short loc_4104D0
.text:00410489                 mov     esi, ds:dword_42C560
.text:0041048F                 test    esi, esi
.text:00410491                 js      short loc_4104CA
.text:00410493
.text:00410493 loc_410493:                             ; CODE XREF: sub_40FE80+64E↓j
.text:00410493                                         ; sub_40FE80+656↓j
.text:00410493                 cmp     ax, 5Dh ; ']'
.text:00410497                 jz      short loc_4104BC
.text:00410499                 lea     esi, [esi+0]
.text:004104A0
.text:004104A0 loc_4104A0:                             ; CODE XREF: sub_40FE80+638↓j
.text:004104A0                                         ; sub_40FE80+646↓j
.text:004104A0                 add     edi, 2
.text:004104A3                 mov     edx, 0FFFFFFFFh
.text:004104A8                 test    ax, ax
.text:004104AB                 jz      loc_40FFD0
.text:004104B1                 movzx   eax, word ptr [edi]
.text:004104B4                 cmp     ax, 5Dh ; ']'
.text:004104B8                 jnz     short loc_4104A0
.text:004104BA                 jmp     short loc_41046C
.text:004104BC ; ---------------------------------------------------------------------------
.text:004104BC
.text:004104BC loc_4104BC:                             ; CODE XREF: sub_40FE80+617↑j
.text:004104BC                 add     edi, 2
.text:004104BF                 movzx   eax, word ptr [edi]
.text:004104C2                 cmp     ax, 5Dh ; ']'
.text:004104C6                 jnz     short loc_4104A0
.text:004104C8                 jmp     short loc_41046C
.text:004104CA ; ---------------------------------------------------------------------------
.text:004104CA
.text:004104CA loc_4104CA:                             ; CODE XREF: sub_40FE80+611↑j
.text:004104CA                 cmp     ax, 5Eh ; '^'
.text:004104CE                 jnz     short loc_410493
.text:004104D0
.text:004104D0 loc_4104D0:                             ; CODE XREF: sub_40FE80+607↑j
.text:004104D0                 add     edi, 2
.text:004104D3                 movzx   eax, word ptr [edi]
.text:004104D6                 jmp     short loc_410493
.text:004104D8 ; ---------------------------------------------------------------------------
.text:004104D8
.text:004104D8 loc_4104D8:                             ; CODE XREF: sub_40FE80+5FB↑j
.text:004104D8                 mov     [esp+3Ch+String], offset sub_40DEA0 ; VarName
.text:004104DF                 call    getenv
.text:004104E4                 test    eax, eax
.text:004104E6                 setnz   cl
.text:004104E9                 movzx   edx, cl
.text:004104EC                 lea     esi, [edx+edx-1]
.text:004104F0                 mov     ds:dword_42C560, esi
.text:004104F6                 jmp     short loc_41047D
.text:004104F6 sub_40FE80      endp
.text:004104F6
.text:004104F6 ; ---------------------------------------------------------------------------
.text:004104F8                 align 10h
.text:00410500
.text:00410500 ; =============== S U B R O U T I N E =======================================
.text:00410500
.text:00410500
.text:00410500 ; int __cdecl sub_410500(char *, char *, int)
.text:00410500 sub_410500      proc near               ; CODE XREF: sub_404390+41↑p
.text:00410500                                         ; sub_404390+81↑p
.text:00410500
.text:00410500 Str             = dword ptr -3Ch
.text:00410500 PSrc            = dword ptr -38h
.text:00410500 Count           = dword ptr -34h
.text:00410500 State           = dword ptr -30h
.text:00410500 var_2C          = dword ptr -2Ch
.text:00410500 Dest            = dword ptr -1Ch
.text:00410500 var_18          = dword ptr -18h
.text:00410500 var_14          = mbstate_t ptr -14h
.text:00410500 var_C           = dword ptr -0Ch
.text:00410500 var_8           = dword ptr -8
.text:00410500 var_4           = dword ptr -4
.text:00410500 arg_0           = dword ptr  4
.text:00410500 arg_4           = dword ptr  8
.text:00410500 arg_8           = dword ptr  0Ch
.text:00410500
.text:00410500                 sub     esp, 3Ch
.text:00410503                 mov     edx, ds:__mb_cur_max
.text:00410509                 mov     [esp+3Ch+var_C], esi
.text:0041050D                 mov     esi, [esp+3Ch+arg_8]
.text:00410511                 mov     dword ptr [esp+3Ch+var_14._Byte], ebx
.text:00410515                 mov     [esp+3Ch+var_8], edi
.text:00410519                 mov     [esp+3Ch+var_4], ebp
.text:0041051D                 cmp     dword ptr [edx], 1
.text:00410520                 jnz     short loc_41056F
.text:00410522                 mov     edx, [esp+3Ch+arg_4]
.text:00410526                 mov     [esp+3Ch+Str], edx ; Str
.text:00410529                 call    strlen
.text:0041052E                 mov     [esp+3Ch+var_2C], esi
.text:00410532                 mov     edi, [esp+3Ch+arg_4]
.text:00410536                 shr     esi, 2
.text:00410539                 mov     ebx, [esp+3Ch+arg_0]
.text:0041053D                 and     esi, 1
.text:00410540                 mov     [esp+3Ch+State], esi
.text:00410544                 lea     ecx, [eax+edi]
.text:00410547                 mov     [esp+3Ch+Count], ecx
.text:0041054B                 mov     [esp+3Ch+PSrc], edi
.text:0041054F                 mov     [esp+3Ch+Str], ebx
.text:00410552                 call    near ptr loc_40DEAF+1
.text:00410557                 mov     edx, eax
.text:00410559
.text:00410559 loc_410559:                             ; CODE XREF: sub_410500+A3↓j
.text:00410559                                         ; sub_410500+D3↓j ...
.text:00410559                 mov     ebx, dword ptr [esp+3Ch+var_14._Byte]
.text:0041055D                 mov     eax, edx
.text:0041055F                 mov     esi, [esp+3Ch+var_C]
.text:00410563                 mov     edi, [esp+3Ch+var_8]
.text:00410567                 mov     ebp, [esp+3Ch+var_4]
.text:0041056B                 add     esp, 3Ch
.text:0041056E                 retn
.text:0041056F ; ---------------------------------------------------------------------------
.text:0041056F
.text:0041056F loc_41056F:                             ; CODE XREF: sub_410500+20↑j
.text:0041056F                 mov     [esp+3Ch+var_14._Wchar], 0
.text:00410577                 lea     edx, [esp+3Ch+var_14]
.text:0041057B                 lea     eax, [esp+3Ch+arg_0]
.text:0041057F                 mov     [esp+3Ch+State], edx ; State
.text:00410583                 mov     [esp+3Ch+Count], 0 ; Count
.text:0041058B                 mov     [esp+3Ch+PSrc], eax ; PSrc
.text:0041058F                 mov     [esp+3Ch+Str], 0 ; Dest
.text:00410596                 call    mbsrtowcs
.text:0041059B                 mov     edi, eax
.text:0041059D                 mov     edx, 0FFFFFFFFh
.text:004105A2                 inc     edi
.text:004105A3                 jz      short loc_410559
.text:004105A5                 mov     [esp+3Ch+Count], 0 ; Count
.text:004105AD                 lea     ecx, [esp+3Ch+arg_4]
.text:004105B1                 lea     ebx, [esp+3Ch+var_14]
.text:004105B5                 mov     [esp+3Ch+State], ebx ; State
.text:004105B9                 mov     [esp+3Ch+PSrc], ecx ; PSrc
.text:004105BD                 mov     [esp+3Ch+Str], 0 ; Dest
.text:004105C4                 call    mbsrtowcs
.text:004105C9                 inc     eax
.text:004105CA                 mov     edx, 0FFFFFFFFh
.text:004105CF                 mov     [esp+3Ch+var_18], eax
.text:004105D3                 jz      short loc_410559
.text:004105D5                 lea     ebp, [eax+edi]
.text:004105D8                 cmp     edi, ebp
.text:004105DA                 ja      loc_4106AC
.text:004105E0                 test    ebp, ebp
.text:004105E2                 js      loc_4106AC
.text:004105E8                 cmp     ebp, 7CFh
.text:004105EE                 ja      loc_410694
.text:004105F4                 lea     edx, [ebp+ebp+0]
.text:004105F8                 mov     [esp+3Ch+Str], edx ; Size
.text:004105FB                 call    malloc
.text:00410600                 mov     [esp+3Ch+Dest], eax
.text:00410604
.text:00410604 loc_410604:                             ; CODE XREF: sub_410500+1A6↓j
.text:00410604                 mov     [esp+3Ch+Count], edi ; Count
.text:00410608                 lea     eax, [esp+3Ch+var_14]
.text:0041060C                 mov     edx, [esp+3Ch+Dest]
.text:00410610                 mov     [esp+3Ch+State], eax ; State
.text:00410614                 lea     ecx, [esp+3Ch+arg_0]
.text:00410618                 mov     eax, [esp+3Ch+Dest]
.text:0041061C                 mov     [esp+3Ch+PSrc], ecx ; PSrc
.text:00410620                 lea     ebx, [edx+edi*2]
.text:00410623                 lea     edi, [esp+3Ch+var_14]
.text:00410627                 mov     [esp+3Ch+Str], eax ; Dest
.text:0041062A                 call    mbsrtowcs
.text:0041062F                 mov     [esp+3Ch+State], edi ; State
.text:00410633                 mov     edx, [esp+3Ch+var_18]
.text:00410637                 lea     ecx, [esp+3Ch+arg_4]
.text:0041063B                 mov     [esp+3Ch+PSrc], ecx ; PSrc
.text:0041063F                 mov     [esp+3Ch+Str], ebx ; Dest
.text:00410642                 mov     [esp+3Ch+Count], edx ; Count
.text:00410646                 call    mbsrtowcs
.text:0041064B                 mov     [esp+3Ch+var_2C], esi
.text:0041064F                 mov     eax, [esp+3Ch+var_18]
.text:00410653                 shr     esi, 2
.text:00410656                 mov     [esp+3Ch+PSrc], ebx
.text:0041065A                 and     esi, 1
.text:0041065D                 lea     edi, [ebx+eax*2-2]
.text:00410661                 mov     [esp+3Ch+State], esi
.text:00410665                 mov     esi, [esp+3Ch+Dest]
.text:00410669                 mov     [esp+3Ch+Count], edi
.text:0041066D                 mov     [esp+3Ch+Str], esi
.text:00410670                 call    sub_40F2C0
.text:00410675                 cmp     ebp, 7CFh
.text:0041067B                 mov     ebx, eax
.text:0041067D                 ja      short loc_410686
.text:0041067F
.text:0041067F loc_41067F:                             ; CODE XREF: sub_410500+192↓j
.text:0041067F                 mov     edx, ebx
.text:00410681                 jmp     loc_410559
.text:00410686 ; ---------------------------------------------------------------------------
.text:00410686
.text:00410686 loc_410686:                             ; CODE XREF: sub_410500+17D↑j
.text:00410686                 mov     ebp, [esp+3Ch+Dest]
.text:0041068A                 mov     [esp+3Ch+Str], ebp ; Block
.text:0041068D                 call    free
.text:00410692                 jmp     short loc_41067F
.text:00410694 ; ---------------------------------------------------------------------------
.text:00410694
.text:00410694 loc_410694:                             ; CODE XREF: sub_410500+EE↑j
.text:00410694                 lea     ecx, [ebp+ebp+0]
.text:00410698                 mov     [esp+3Ch+Str], ecx ; Size
.text:0041069B                 call    malloc
.text:004106A0                 mov     [esp+3Ch+Dest], eax
.text:004106A4                 test    eax, eax
.text:004106A6                 jnz     loc_410604
.text:004106AC
.text:004106AC loc_4106AC:                             ; CODE XREF: sub_410500+DA↑j
.text:004106AC                                         ; sub_410500+E2↑j
.text:004106AC                 call    _errno
.text:004106B1                 mov     dword ptr [eax], 0Ch
.text:004106B7                 mov     edx, 0FFFFFFFFh
.text:004106BC                 jmp     loc_410559
.text:004106BC sub_410500      endp
.text:004106BC
.text:004106C1 ; ---------------------------------------------------------------------------
.text:004106C1                 jmp     short sub_4106D0
.text:004106C1 ; ---------------------------------------------------------------------------
.text:004106C3                 align 10h
.text:004106D0
.text:004106D0 ; =============== S U B R O U T I N E =======================================
.text:004106D0
.text:004106D0
.text:004106D0 sub_4106D0      proc near               ; CODE XREF: sub_40F2C0+958↑p
.text:004106D0                                         ; .text:004106C1↑j
.text:004106D0
.text:004106D0 name            = dword ptr -82Ch
.text:004106D0 var_81C         = byte ptr -81Ch
.text:004106D0 var_1C          = byte ptr -1Ch
.text:004106D0 arg_0           = dword ptr  4
.text:004106D0
.text:004106D0                 push    esi
.text:004106D1                 push    ebx
.text:004106D2                 sub     esp, 824h
.text:004106D8                 mov     edx, [esp+82Ch+arg_0]
.text:004106DF                 lea     ecx, [esp+82Ch+var_81C]
.text:004106E3                 mov     esi, ecx
.text:004106E5                 lea     ebx, [esp+82Ch+var_1C]
.text:004106EC                 movzx   eax, word ptr [edx]
.text:004106EF                 nop
.text:004106F0
.text:004106F0 loc_4106F0:                             ; CODE XREF: sub_4106D0+57↓j
.text:004106F0                 movzx   eax, ax
.text:004106F3                 cmp     eax, 5Fh ; '_'
.text:004106F6                 jg      short loc_410744
.text:004106F8                 cmp     eax, 41h ; 'A'
.text:004106FB                 jge     short loc_410712
.text:004106FD                 cmp     eax, 20h ; ' '
.text:00410700                 jl      short loc_410740
.text:00410702                 cmp     eax, 23h ; '#'
.text:00410705                 jle     short loc_410712
.text:00410707                 sub     eax, 25h ; '%'
.text:0041070A                 cmp     eax, 1Ah
.text:0041070D                 lea     esi, [esi+0]
.text:00410710
.text:00410710 loc_410710:                             ; CODE XREF: sub_4106D0+7A↓j
.text:00410710                 ja      short loc_410740
.text:00410712
.text:00410712 loc_410712:                             ; CODE XREF: sub_4106D0+2B↑j
.text:00410712                                         ; sub_4106D0+35↑j
.text:00410712                 xor     eax, eax
.text:00410714                 cmp     ecx, ebx
.text:00410716                 jz      short loc_410737
.text:00410718                 movzx   eax, byte ptr [edx]
.text:0041071B                 add     edx, 2
.text:0041071E                 mov     [ecx], al
.text:00410720                 inc     ecx
.text:00410721                 movzx   eax, word ptr [edx]
.text:00410724                 test    ax, ax
.text:00410727                 jnz     short loc_4106F0
.text:00410729                 mov     byte ptr [ecx], 0
.text:0041072C                 mov     [esp+82Ch+name], esi ; name
.text:0041072F                 call    wctype
.text:00410734                 movzx   eax, ax
.text:00410737
.text:00410737 loc_410737:                             ; CODE XREF: sub_4106D0+46↑j
.text:00410737                                         ; sub_4106D0+72↓j
.text:00410737                 add     esp, 824h
.text:0041073D                 pop     ebx
.text:0041073E                 pop     esi
.text:0041073F                 retn
.text:00410740 ; ---------------------------------------------------------------------------
.text:00410740
.text:00410740 loc_410740:                             ; CODE XREF: sub_4106D0+30↑j
.text:00410740                                         ; sub_4106D0:loc_410710↑j
.text:00410740                 xor     eax, eax
.text:00410742                 jmp     short loc_410737
.text:00410744 ; ---------------------------------------------------------------------------
.text:00410744
.text:00410744 loc_410744:                             ; CODE XREF: sub_4106D0+26↑j
.text:00410744                 sub     eax, 61h ; 'a'
.text:00410747                 cmp     eax, 1Dh
.text:0041074A                 jmp     short loc_410710
.text:0041074A sub_4106D0      endp
.text:0041074A
.text:0041074A ; ---------------------------------------------------------------------------
.text:0041074C                 align 20h
.text:00410760 dword_410760    dd 90002D2Dh, 7 dup(90909090h)
.text:00410760                                         ; DATA XREF: sub_4109B0+E4↓o
.text:00410780 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00410780                                         ; DATA XREF: sub_4109B0+2FC↓o
.text:004107AD                 align 20h
.text:004107C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004107C0                                         ; DATA XREF: sub_4109B0:loc_410D12↓o
.text:004107ED                 align 20h
.text:00410800 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00410800                                         ; DATA XREF: sub_4109B0:loc_410DB0↓o
.text:00410800                                         ; sub_4109B0:loc_411177↓o
.text:00410826                 align 20h
.text:00410840 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00410840                                         ; DATA XREF: sub_4109B0+48E↓o
.text:00410860 dword_410860    dd 90909000h, 7 dup(90909090h)
.text:00410860                                         ; DATA XREF: sub_4109B0:loc_410E81↓o
.text:00410880 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00410880                                         ; DATA XREF: sub_4109B0:loc_410E9A↓o
.text:004108A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004108A0                                         ; DATA XREF: sub_4109B0:loc_410F7F↓o
.text:004108A0                                         ; sub_4109B0:loc_4112AC↓o
.text:004108C7                 align 20h
.text:004108E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004108E0                                         ; DATA XREF: sub_4109B0:loc_4110F3↓o
.text:0041090E                 align 20h
.text:00410920 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00410920                                         ; DATA XREF: sub_4109B0:loc_4111DF↓o
.text:00410941 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00410941                                         ; DATA XREF: sub_4109B0+93F↓o
.text:0041095B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:0041095B                                         ; DATA XREF: sub_4109B0:loc_411327↓o
.text:00410975 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00410975                                         ; DATA XREF: sub_4109B0:loc_41134E↓o
.text:00410993 ; const char aPosixlyCorrect_0[]
.text:00410993 aPosixlyCorrect_0 db 'POSIXLY_CORRECT',0
.text:00410993                                         ; DATA XREF: sub_4109B0:loc_411500↓o
.text:004109A3                 align 10h
.text:004109B0
.text:004109B0 ; =============== S U B R O U T I N E =======================================
.text:004109B0
.text:004109B0
.text:004109B0 ; int __cdecl sub_4109B0(int, int, char *Str, int, int, int, int, int)
.text:004109B0 sub_4109B0      proc near               ; CODE XREF: sub_411540+5A↓p
.text:004109B0                                         ; .text:0041162A↓p ...
.text:004109B0
.text:004109B0 Str1            = dword ptr -5Ch
.text:004109B0 Str2            = dword ptr -58h
.text:004109B0 MaxCount        = dword ptr -54h
.text:004109B0 var_50          = dword ptr -50h
.text:004109B0 var_4C          = dword ptr -4Ch
.text:004109B0 var_3C          = dword ptr -3Ch
.text:004109B0 var_38          = dword ptr -38h
.text:004109B0 var_34          = dword ptr -34h
.text:004109B0 var_30          = dword ptr -30h
.text:004109B0 var_2C          = dword ptr -2Ch
.text:004109B0 var_28          = dword ptr -28h
.text:004109B0 var_24          = dword ptr -24h
.text:004109B0 var_20          = dword ptr -20h
.text:004109B0 var_1C          = dword ptr -1Ch
.text:004109B0 var_18          = dword ptr -18h
.text:004109B0 var_14          = dword ptr -14h
.text:004109B0 arg_0           = dword ptr  4
.text:004109B0 arg_4           = dword ptr  8
.text:004109B0 Str             = dword ptr  0Ch
.text:004109B0 arg_C           = dword ptr  10h
.text:004109B0 arg_10          = dword ptr  14h
.text:004109B0 arg_14          = dword ptr  18h
.text:004109B0 arg_18          = dword ptr  1Ch
.text:004109B0 arg_1C          = dword ptr  20h
.text:004109B0
.text:004109B0                 push    ebp
.text:004109B1                 mov     eax, 0FFFFFFFFh
.text:004109B6                 push    edi
.text:004109B7                 push    esi
.text:004109B8                 push    ebx
.text:004109B9                 sub     esp, 4Ch
.text:004109BC                 mov     esi, [esp+5Ch+Str]
.text:004109C0                 mov     ebp, [esp+5Ch+arg_1C]
.text:004109C4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:004109C7                 mov     ebx, [ebp+4]
.text:004109CA                 setz    dl
.text:004109CD                 movzx   ecx, dl
.text:004109D0                 dec     ecx
.text:004109D1                 and     ecx, ebx
.text:004109D3                 mov     [esp+5Ch+var_14], ecx
.text:004109D7                 mov     ecx, [esp+5Ch+arg_0]
.text:004109DB                 test    ecx, ecx
.text:004109DD                 jle     loc_410B07
.text:004109E3                 mov     dword ptr [ebp+0Ch], 0
.text:004109EA                 mov     ebx, [ebp+0]
.text:004109ED                 test    ebx, ebx
.text:004109EF                 jz      loc_411520
.text:004109F5                 mov     edi, [ebp+10h]
.text:004109F8                 test    edi, edi
.text:004109FA                 jnz     short loc_410A53
.text:004109FC                 lea     esi, [esi+0]
.text:00410A00
.text:00410A00 loc_410A00:                             ; CODE XREF: sub_4109B0+B7C↓j
.text:00410A00                 mov     [ebp+24h], ebx
.text:00410A03                 mov     esi, [esp+5Ch+Str]
.text:00410A07                 mov     [ebp+20h], ebx
.text:00410A0A                 mov     ecx, [esp+5Ch+arg_18]
.text:00410A0E                 xor     ebx, ebx
.text:00410A10                 mov     dword ptr [ebp+14h], 0
.text:00410A17                 test    ecx, ecx
.text:00410A19                 jz      loc_411500
.text:00410A1F
.text:00410A1F loc_410A1F:                             ; CODE XREF: sub_4109B0+B64↓j
.text:00410A1F                 mov     ebx, 1
.text:00410A24
.text:00410A24 loc_410A24:                             ; CODE XREF: sub_4109B0+B5E↓j
.text:00410A24                 mov     [ebp+1Ch], ebx
.text:00410A27                 mov     ecx, [esp+5Ch+Str]
.text:00410A2B                 movzx   eax, byte ptr [ecx]
.text:00410A2E                 cmp     al, 2Dh ; '-'
.text:00410A30                 jz      loc_4114F0
.text:00410A36                 cmp     al, 2Bh ; '+'
.text:00410A38                 jz      loc_4114D9
.text:00410A3E                 xor     edx, edx
.text:00410A40                 test    ebx, ebx
.text:00410A42                 setz    dl
.text:00410A45                 mov     [ebp+18h], edx
.text:00410A48
.text:00410A48 loc_410A48:                             ; CODE XREF: sub_4109B0+B35↓j
.text:00410A48                 mov     [esp+5Ch+Str], esi
.text:00410A4C                 mov     dword ptr [ebp+10h], 1
.text:00410A53
.text:00410A53 loc_410A53:                             ; CODE XREF: sub_4109B0+4A↑j
.text:00410A53                 mov     eax, [ebp+14h]
.text:00410A56                 test    eax, eax
.text:00410A58                 jz      short loc_410A63
.text:00410A5A                 cmp     byte ptr [eax], 0
.text:00410A5D                 jnz     loc_410B40
.text:00410A63
.text:00410A63 loc_410A63:                             ; CODE XREF: sub_4109B0+A8↑j
.text:00410A63                 mov     ebx, [ebp+0]
.text:00410A66                 cmp     [ebp+24h], ebx
.text:00410A69                 jle     short loc_410A6E
.text:00410A6B                 mov     [ebp+24h], ebx
.text:00410A6E
.text:00410A6E loc_410A6E:                             ; CODE XREF: sub_4109B0+B9↑j
.text:00410A6E                 cmp     [ebp+20h], ebx
.text:00410A71                 jle     short loc_410A76
.text:00410A73                 mov     [ebp+20h], ebx
.text:00410A76
.text:00410A76 loc_410A76:                             ; CODE XREF: sub_4109B0+C1↑j
.text:00410A76                 cmp     dword ptr [ebp+18h], 1
.text:00410A7A                 jz      loc_411450
.text:00410A80
.text:00410A80 loc_410A80:                             ; CODE XREF: sub_4109B0+B13↓j
.text:00410A80                 cmp     ebx, [esp+5Ch+arg_0]
.text:00410A84                 jz      loc_411434
.text:00410A8A                 cld
.text:00410A8B                 mov     ecx, [esp+5Ch+arg_4]
.text:00410A8F                 mov     edx, 3
.text:00410A94                 mov     edi, offset dword_410760
.text:00410A99                 mov     esi, [ecx+ebx*4]
.text:00410A9C                 mov     ecx, edx
.text:00410A9E                 repe cmpsb
.text:00410AA0                 jnz     short loc_410ADC
.text:00410AA2                 mov     edx, [ebp+24h]
.text:00410AA5                 lea     eax, [ebx+1]
.text:00410AA8                 cmp     [ebp+20h], edx
.text:00410AAB                 mov     [ebp+0], eax
.text:00410AAE                 jz      loc_411448
.text:00410AB4                 cmp     edx, eax
.text:00410AB6                 jz      short loc_410AD0
.text:00410AB8                 mov     [esp+5Ch+Str2], ebp
.text:00410ABC                 mov     ebx, [esp+5Ch+arg_4]
.text:00410AC0                 mov     [esp+5Ch+Str1], ebx
.text:00410AC3                 call    sub_411660
.text:00410AC8                 nop
.text:00410AC9                 lea     esi, [esi+0]
.text:00410AD0
.text:00410AD0 loc_410AD0:                             ; CODE XREF: sub_4109B0+106↑j
.text:00410AD0                                         ; sub_4109B0+A9B↓j
.text:00410AD0                 mov     eax, [esp+5Ch+arg_0]
.text:00410AD4                 mov     ebx, eax
.text:00410AD6                 mov     [ebp+24h], eax
.text:00410AD9                 mov     [ebp+0], eax
.text:00410ADC
.text:00410ADC loc_410ADC:                             ; CODE XREF: sub_4109B0+F0↑j
.text:00410ADC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00410AE0                 jz      loc_411434
.text:00410AE6                 mov     esi, [esp+5Ch+arg_4]
.text:00410AEA                 mov     eax, [esi+ebx*4]
.text:00410AED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00410AF0                 jz      short loc_410B17
.text:00410AF2
.text:00410AF2 loc_410AF2:                             ; CODE XREF: sub_4109B0+16D↓j
.text:00410AF2                 mov     edx, [ebp+18h]
.text:00410AF5                 test    edx, edx
.text:00410AF7                 jz      short loc_410B10
.text:00410AF9                 mov     [ebp+0Ch], eax
.text:00410AFC                 lea     edi, [ebx+1]
.text:00410AFF                 mov     eax, 1
.text:00410B04                 mov     [ebp+0], edi
.text:00410B07
.text:00410B07 loc_410B07:                             ; CODE XREF: sub_4109B0+2D↑j
.text:00410B07                                         ; sub_4109B0+165↓j ...
.text:00410B07                 add     esp, 4Ch
.text:00410B0A                 pop     ebx
.text:00410B0B                 pop     esi
.text:00410B0C                 pop     edi
.text:00410B0D                 pop     ebp
.text:00410B0E                 retn
.text:00410B0E ; ---------------------------------------------------------------------------
.text:00410B0F                 align 10h
.text:00410B10
.text:00410B10 loc_410B10:                             ; CODE XREF: sub_4109B0+147↑j
.text:00410B10                                         ; sub_4109B0+A8A↓j ...
.text:00410B10                 mov     eax, 0FFFFFFFFh
.text:00410B15                 jmp     short loc_410B07
.text:00410B17 ; ---------------------------------------------------------------------------
.text:00410B17
.text:00410B17 loc_410B17:                             ; CODE XREF: sub_4109B0+140↑j
.text:00410B17                 movzx   edx, byte ptr [eax+1]
.text:00410B1B                 test    dl, dl
.text:00410B1D                 jz      short loc_410AF2
.text:00410B1F                 mov     ebx, [esp+5Ch+arg_C]
.text:00410B23                 xor     ecx, ecx
.text:00410B25                 test    ebx, ebx
.text:00410B27                 jz      short loc_410B32
.text:00410B29                 cmp     dl, 2Dh ; '-'
.text:00410B2C                 jz      loc_41142A
.text:00410B32
.text:00410B32 loc_410B32:                             ; CODE XREF: sub_4109B0+177↑j
.text:00410B32                                         ; sub_4109B0+A7F↓j
.text:00410B32                 lea     esi, [ecx+eax+1]
.text:00410B36                 mov     [ebp+14h], esi
.text:00410B39                 lea     esi, [esi+0]
.text:00410B40
.text:00410B40 loc_410B40:                             ; CODE XREF: sub_4109B0+AD↑j
.text:00410B40                 mov     ecx, [esp+5Ch+arg_C]
.text:00410B44                 test    ecx, ecx
.text:00410B46                 jz      loc_410ED0
.text:00410B4C                 mov     edx, [ebp+0]
.text:00410B4F                 mov     edi, [esp+5Ch+arg_4]
.text:00410B53                 mov     eax, [edi+edx*4]
.text:00410B56                 movzx   edx, byte ptr [eax+1]
.text:00410B5A                 cmp     dl, 2Dh ; '-'
.text:00410B5D                 jz      short loc_410B75
.text:00410B5F                 mov     ebx, [esp+5Ch+arg_14]
.text:00410B63                 test    ebx, ebx
.text:00410B65                 jz      loc_410ED0
.text:00410B6B                 cmp     byte ptr [eax+2], 0
.text:00410B6F                 jz      loc_41140A
.text:00410B75
.text:00410B75 loc_410B75:                             ; CODE XREF: sub_4109B0+1AD↑j
.text:00410B75                                         ; sub_4109B0+A75↓j
.text:00410B75                 mov     [esp+5Ch+var_18], 0
.text:00410B7D                 mov     ecx, [ebp+14h]
.text:00410B80                 mov     [esp+5Ch+var_1C], 0
.text:00410B88                 mov     [esp+5Ch+var_20], 0
.text:00410B90                 mov     edi, ecx
.text:00410B92                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00410B9A                 movzx   eax, byte ptr [ecx]
.text:00410B9D                 test    al, al
.text:00410B9F                 jz      short loc_410BBC
.text:00410BA1                 cmp     al, 3Dh ; '='
.text:00410BA3                 jz      short loc_410BBC
.text:00410BA5                 lea     esi, [esi+0]
.text:00410BA9                 lea     edi, [edi+0]
.text:00410BB0
.text:00410BB0 loc_410BB0:                             ; CODE XREF: sub_4109B0+20A↓j
.text:00410BB0                 inc     edi
.text:00410BB1                 movzx   eax, byte ptr [edi]
.text:00410BB4                 test    al, al
.text:00410BB6                 jz      short loc_410BBC
.text:00410BB8                 cmp     al, 3Dh ; '='
.text:00410BBA                 jnz     short loc_410BB0
.text:00410BBC
.text:00410BBC loc_410BBC:                             ; CODE XREF: sub_4109B0+1EF↑j
.text:00410BBC                                         ; sub_4109B0+1F3↑j ...
.text:00410BBC                 mov     [esp+5Ch+var_28], 0
.text:00410BC4                 mov     esi, [esp+5Ch+arg_C]
.text:00410BC8                 mov     ebx, [esi]
.text:00410BCA                 test    ebx, ebx
.text:00410BCC                 mov     edx, ebx
.text:00410BCE                 jz      loc_410DF0
.text:00410BD4                 lea     esi, [esi+0]
.text:00410BDA                 lea     edi, [edi+0]
.text:00410BE0
.text:00410BE0 loc_410BE0:                             ; CODE XREF: sub_4109B0+25E↓j
.text:00410BE0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00410BE4                 mov     ebx, edi
.text:00410BE6                 sub     ebx, ecx
.text:00410BE8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00410BEC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00410BEF                 call    strncmp
.text:00410BF4                 test    eax, eax
.text:00410BF6                 jz      loc_411386
.text:00410BFC
.text:00410BFC loc_410BFC:                             ; CODE XREF: sub_4109B0+A0F↓j
.text:00410BFC                                         ; sub_4109B0+A24↓j ...
.text:00410BFC                 inc     [esp+5Ch+var_28]
.text:00410C00                 add     esi, 10h
.text:00410C03                 mov     ecx, [esi]
.text:00410C05                 test    ecx, ecx
.text:00410C07                 mov     edx, ecx
.text:00410C09                 jz      short loc_410C10
.text:00410C0B                 mov     ecx, [ebp+14h]
.text:00410C0E                 jmp     short loc_410BE0
.text:00410C10 ; ---------------------------------------------------------------------------
.text:00410C10
.text:00410C10 loc_410C10:                             ; CODE XREF: sub_4109B0+259↑j
.text:00410C10                                         ; sub_4109B0+A55↓j
.text:00410C10                 mov     esi, [esp+5Ch+var_20]
.text:00410C14                 test    esi, esi
.text:00410C16                 jz      short loc_410C24
.text:00410C18                 mov     edx, [esp+5Ch+var_1C]
.text:00410C1C                 test    edx, edx
.text:00410C1E                 jz      loc_411330
.text:00410C24
.text:00410C24 loc_410C24:                             ; CODE XREF: sub_4109B0+266↑j
.text:00410C24                 mov     eax, [esp+5Ch+var_18]
.text:00410C28                 test    eax, eax
.text:00410C2A                 jz      loc_410DF0
.text:00410C30                 mov     ecx, [ebp+0]
.text:00410C33                 lea     eax, [ecx+1]
.text:00410C36                 mov     [ebp+0], eax
.text:00410C39                 cmp     byte ptr [edi], 0
.text:00410C3C                 jz      loc_410D50
.text:00410C42                 mov     ecx, [esp+5Ch+var_18]
.text:00410C46                 mov     esi, [ecx+4]
.text:00410C49                 test    esi, esi
.text:00410C4B                 jz      short loc_410C96
.text:00410C4D                 lea     ebx, [edi+1]
.text:00410C50                 mov     [ebp+0Ch], ebx
.text:00410C53
.text:00410C53 loc_410C53:                             ; CODE XREF: sub_4109B0+3A8↓j
.text:00410C53                                         ; sub_4109B0+3C4↓j
.text:00410C53                 mov     ebx, [ebp+14h]
.text:00410C56                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00410C59                 call    strlen
.text:00410C5E                 add     [ebp+14h], eax
.text:00410C61                 mov     esi, [esp+5Ch+arg_10]
.text:00410C65                 test    esi, esi
.text:00410C67                 jz      short loc_410C73
.text:00410C69                 mov     ebp, [esp+5Ch+var_24]
.text:00410C6D                 mov     ecx, [esp+5Ch+arg_10]
.text:00410C71                 mov     [ecx], ebp
.text:00410C73
.text:00410C73 loc_410C73:                             ; CODE XREF: sub_4109B0+2B7↑j
.text:00410C73                 mov     eax, [esp+5Ch+var_18]
.text:00410C77                 mov     ecx, [eax+8]
.text:00410C7A                 test    ecx, ecx
.text:00410C7C                 jnz     short loc_410C8A
.text:00410C7E                 mov     ecx, [esp+5Ch+var_18]
.text:00410C82
.text:00410C82 loc_410C82:                             ; CODE XREF: sub_4109B0+723↓j
.text:00410C82                 mov     eax, [ecx+0Ch]
.text:00410C85                 jmp     loc_410B07
.text:00410C8A ; ---------------------------------------------------------------------------
.text:00410C8A
.text:00410C8A loc_410C8A:                             ; CODE XREF: sub_4109B0+2CC↑j
.text:00410C8A                                         ; sub_4109B0+719↓j
.text:00410C8A                 mov     esi, [eax+0Ch]
.text:00410C8D                 xor     eax, eax
.text:00410C8F                 mov     [ecx], esi
.text:00410C91                 jmp     loc_410B07
.text:00410C96 ; ---------------------------------------------------------------------------
.text:00410C96
.text:00410C96 loc_410C96:                             ; CODE XREF: sub_4109B0+29B↑j
.text:00410C96                 mov     edi, [esp+5Ch+var_14]
.text:00410C9A                 test    edi, edi
.text:00410C9C                 jz      short loc_410CF0
.text:00410C9E                 mov     esi, [esp+5Ch+arg_4]
.text:00410CA2                 mov     edx, [esi+eax*4-4]
.text:00410CA6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00410CAA                 jz      short loc_410D12
.text:00410CAC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00410CB3                 call    ds:libintl_gettext
.text:00410CB9                 mov     edx, [esp+5Ch+var_18]
.text:00410CBD                 mov     edi, [edx]
.text:00410CBF                 mov     [esp+5Ch+var_4C], edi
.text:00410CC3                 mov     ebx, [ebp+0]
.text:00410CC6                 mov     edi, [esp+5Ch+arg_4]
.text:00410CCA                 mov     ecx, [edi+ebx*4-4]
.text:00410CCE                 movsx   esi, byte ptr [ecx]
.text:00410CD1                 mov     ecx, ds:_iob
.text:00410CD7                 add     ecx, 40h ; '@'
.text:00410CDA                 mov     [esp+5Ch+var_50], esi
.text:00410CDE                 mov     ebx, [edi]
.text:00410CE0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410CE4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00410CE7                 mov     [esp+5Ch+MaxCount], ebx
.text:00410CEB                 call    fprintf
.text:00410CF0
.text:00410CF0 loc_410CF0:                             ; CODE XREF: sub_4109B0+2EC↑j
.text:00410CF0                                         ; sub_4109B0+398↓j
.text:00410CF0                 mov     ecx, [ebp+14h]
.text:00410CF3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00410CF6                 call    strlen
.text:00410CFB                 add     [ebp+14h], eax
.text:00410CFE                 mov     eax, [esp+5Ch+var_18]
.text:00410D02                 mov     esi, [eax+0Ch]
.text:00410D05                 mov     [ebp+8], esi
.text:00410D08
.text:00410D08 loc_410D08:                             ; CODE XREF: sub_4109B0+4E5↓j
.text:00410D08                                         ; sub_4109B0+73E↓j ...
.text:00410D08                 mov     eax, 3Fh ; '?'
.text:00410D0D                 jmp     loc_410B07
.text:00410D12 ; ---------------------------------------------------------------------------
.text:00410D12
.text:00410D12 loc_410D12:                             ; CODE XREF: sub_4109B0+2FA↑j
.text:00410D12                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00410D19                 call    ds:libintl_gettext
.text:00410D1F                 mov     edx, [esp+5Ch+var_18]
.text:00410D23                 mov     edi, [esp+5Ch+arg_4]
.text:00410D27                 mov     ecx, ds:_iob
.text:00410D2D                 mov     esi, [edx]
.text:00410D2F                 add     ecx, 40h ; '@'
.text:00410D32                 mov     [esp+5Ch+var_50], esi
.text:00410D36                 mov     ebx, [edi]
.text:00410D38                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410D3C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00410D3F                 mov     [esp+5Ch+MaxCount], ebx
.text:00410D43                 call    fprintf
.text:00410D48                 jmp     short loc_410CF0
.text:00410D48 ; ---------------------------------------------------------------------------
.text:00410D4A                 align 10h
.text:00410D50
.text:00410D50 loc_410D50:                             ; CODE XREF: sub_4109B0+28C↑j
.text:00410D50                 mov     ebx, [esp+5Ch+var_18]
.text:00410D54                 cmp     dword ptr [ebx+4], 1
.text:00410D58                 jnz     loc_410C53
.text:00410D5E                 cmp     eax, [esp+5Ch+arg_0]
.text:00410D62                 jge     short loc_410D79
.text:00410D64                 mov     ebx, [esp+5Ch+arg_4]
.text:00410D68                 lea     edi, [ecx+2]
.text:00410D6B                 mov     [ebp+0], edi
.text:00410D6E                 mov     esi, [ebx+eax*4]
.text:00410D71                 mov     [ebp+0Ch], esi
.text:00410D74                 jmp     loc_410C53
.text:00410D79 ; ---------------------------------------------------------------------------
.text:00410D79
.text:00410D79 loc_410D79:                             ; CODE XREF: sub_4109B0+3B2↑j
.text:00410D79                 mov     edx, [esp+5Ch+var_14]
.text:00410D7D                 test    edx, edx
.text:00410D7F                 jnz     short loc_410DB0
.text:00410D81
.text:00410D81 loc_410D81:                             ; CODE XREF: sub_4109B0+437↓j
.text:00410D81                 mov     edx, [ebp+14h]
.text:00410D84                 mov     [esp+5Ch+Str1], edx ; Str
.text:00410D87                 call    strlen
.text:00410D8C                 add     [ebp+14h], eax
.text:00410D8F                 mov     eax, [esp+5Ch+var_18]
.text:00410D93                 mov     edi, [eax+0Ch]
.text:00410D96                 mov     [ebp+8], edi
.text:00410D99
.text:00410D99 loc_410D99:                             ; CODE XREF: sub_4109B0+7C2↓j
.text:00410D99                 mov     ebp, [esp+5Ch+Str]
.text:00410D9D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00410DA1                 setnz   bl
.text:00410DA4                 movzx   esi, bl
.text:00410DA7                 lea     eax, [esi+esi*4+3Ah]
.text:00410DAB                 jmp     loc_410B07
.text:00410DB0 ; ---------------------------------------------------------------------------
.text:00410DB0
.text:00410DB0 loc_410DB0:                             ; CODE XREF: sub_4109B0+3CF↑j
.text:00410DB0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00410DB7                 call    ds:libintl_gettext
.text:00410DBD                 mov     ecx, [ebp+0]
.text:00410DC0                 mov     esi, [esp+5Ch+arg_4]
.text:00410DC4                 mov     ebx, [esi+ecx*4-4]
.text:00410DC8                 mov     ecx, ds:_iob
.text:00410DCE                 mov     [esp+5Ch+var_50], ebx
.text:00410DD2                 mov     edi, [esi]
.text:00410DD4                 add     ecx, 40h ; '@'
.text:00410DD7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410DDB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00410DDE                 mov     [esp+5Ch+MaxCount], edi
.text:00410DE2                 call    fprintf
.text:00410DE7                 jmp     short loc_410D81
.text:00410DE7 ; ---------------------------------------------------------------------------
.text:00410DE9                 align 10h
.text:00410DF0
.text:00410DF0 loc_410DF0:                             ; CODE XREF: sub_4109B0+21E↑j
.text:00410DF0                                         ; sub_4109B0+27A↑j
.text:00410DF0                 mov     eax, [esp+5Ch+arg_14]
.text:00410DF4                 test    eax, eax
.text:00410DF6                 jz      short loc_410E26
.text:00410DF8                 mov     ebx, [ebp+0]
.text:00410DFB                 mov     esi, [esp+5Ch+arg_4]
.text:00410DFF                 mov     edi, [esi+ebx*4]
.text:00410E02                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00410E06                 jz      short loc_410E29
.text:00410E08                 mov     ecx, [ebp+14h]
.text:00410E0B                 mov     edx, [esp+5Ch+Str]
.text:00410E0F                 movsx   ebx, byte ptr [ecx]
.text:00410E12                 mov     [esp+5Ch+Str1], edx ; Str
.text:00410E15                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00410E19                 call    strchr
.text:00410E1E                 test    eax, eax
.text:00410E20                 jnz     loc_410ED0
.text:00410E26
.text:00410E26 loc_410E26:                             ; CODE XREF: sub_4109B0+446↑j
.text:00410E26                 mov     ebx, [ebp+0]
.text:00410E29
.text:00410E29 loc_410E29:                             ; CODE XREF: sub_4109B0+456↑j
.text:00410E29                 mov     eax, [esp+5Ch+var_14]
.text:00410E2D                 test    eax, eax
.text:00410E2F                 jz      short loc_410E81
.text:00410E31                 mov     esi, [esp+5Ch+arg_4]
.text:00410E35                 mov     edi, [esi+ebx*4]
.text:00410E38                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00410E3C                 jz      short loc_410E9A
.text:00410E3E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00410E45                 call    ds:libintl_gettext
.text:00410E4B                 mov     edi, [ebp+14h]
.text:00410E4E                 mov     [esp+5Ch+var_4C], edi
.text:00410E52                 mov     ebx, [ebp+0]
.text:00410E55                 mov     edi, [esp+5Ch+arg_4]
.text:00410E59                 mov     esi, [edi+ebx*4]
.text:00410E5C                 movsx   ecx, byte ptr [esi]
.text:00410E5F                 mov     esi, ds:_iob
.text:00410E65                 add     esi, 40h ; '@'
.text:00410E68                 mov     [esp+5Ch+var_50], ecx
.text:00410E6C                 mov     ebx, [edi]
.text:00410E6E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410E72                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00410E75                 mov     [esp+5Ch+MaxCount], ebx
.text:00410E79                 call    fprintf
.text:00410E7E
.text:00410E7E loc_410E7E:                             ; CODE XREF: sub_4109B0+51D↓j
.text:00410E7E                 mov     ebx, [ebp+0]
.text:00410E81
.text:00410E81 loc_410E81:                             ; CODE XREF: sub_4109B0+47F↑j
.text:00410E81                 mov     dword ptr [ebp+14h], offset dword_410860
.text:00410E88                 lea     edx, [ebx+1]
.text:00410E8B                 mov     [ebp+0], edx
.text:00410E8E
.text:00410E8E loc_410E8E:                             ; CODE XREF: sub_4109B0+999↓j
.text:00410E8E                 mov     dword ptr [ebp+8], 0
.text:00410E95                 jmp     loc_410D08
.text:00410E9A ; ---------------------------------------------------------------------------
.text:00410E9A
.text:00410E9A loc_410E9A:                             ; CODE XREF: sub_4109B0+48C↑j
.text:00410E9A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00410EA1                 call    ds:libintl_gettext
.text:00410EA7                 mov     ecx, [ebp+14h]
.text:00410EAA                 mov     edi, [esp+5Ch+arg_4]
.text:00410EAE                 mov     edx, ds:_iob
.text:00410EB4                 mov     [esp+5Ch+var_50], ecx
.text:00410EB8                 mov     ebx, [edi]
.text:00410EBA                 add     edx, 40h ; '@'
.text:00410EBD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410EC1                 mov     [esp+5Ch+MaxCount], ebx
.text:00410EC5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00410EC8                 call    fprintf
.text:00410ECD                 jmp     short loc_410E7E
.text:00410ECD ; ---------------------------------------------------------------------------
.text:00410ECF                 align 10h
.text:00410ED0
.text:00410ED0 loc_410ED0:                             ; CODE XREF: sub_4109B0+196↑j
.text:00410ED0                                         ; sub_4109B0+1B5↑j ...
.text:00410ED0                 mov     esi, [ebp+14h]
.text:00410ED3                 movzx   ebx, byte ptr [esi]
.text:00410ED6                 inc     esi
.text:00410ED7                 mov     [ebp+14h], esi
.text:00410EDA                 mov     ecx, [esp+5Ch+Str]
.text:00410EDE                 movsx   esi, bl
.text:00410EE1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00410EE5                 mov     edi, esi
.text:00410EE7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00410EEA                 call    strchr
.text:00410EEF                 mov     ecx, [ebp+14h]
.text:00410EF2                 cmp     byte ptr [ecx], 0
.text:00410EF5                 jnz     short loc_410EFA
.text:00410EF7                 inc     dword ptr [ebp+0]
.text:00410EFA
.text:00410EFA loc_410EFA:                             ; CODE XREF: sub_4109B0+545↑j
.text:00410EFA                 test    eax, eax
.text:00410EFC                 jz      loc_4112E0
.text:00410F02                 cmp     bl, 3Ah ; ':'
.text:00410F05                 jz      loc_4112E0
.text:00410F0B                 cmp     byte ptr [eax], 57h ; 'W'
.text:00410F0E                 jz      loc_410FC6
.text:00410F14                 movzx   edx, byte ptr [eax+1]
.text:00410F18
.text:00410F18 loc_410F18:                             ; CODE XREF: sub_4109B0+61D↓j
.text:00410F18                 cmp     dl, 3Ah ; ':'
.text:00410F1B                 jz      short loc_410F24
.text:00410F1D
.text:00410F1D loc_410F1D:                             ; CODE XREF: sub_4109B0+590↓j
.text:00410F1D                 mov     eax, esi
.text:00410F1F                 jmp     loc_410B07
.text:00410F24 ; ---------------------------------------------------------------------------
.text:00410F24
.text:00410F24 loc_410F24:                             ; CODE XREF: sub_4109B0+56B↑j
.text:00410F24                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00410F28                 jz      loc_410FB1
.text:00410F2E                 cmp     byte ptr [ecx], 0
.text:00410F31                 jz      short loc_410F42
.text:00410F33
.text:00410F33 loc_410F33:                             ; CODE XREF: sub_4109B0+604↓j
.text:00410F33                 inc     dword ptr [ebp+0]
.text:00410F36                 mov     [ebp+0Ch], ecx
.text:00410F39
.text:00410F39 loc_410F39:                             ; CODE XREF: sub_4109B0+5AB↓j
.text:00410F39                                         ; sub_4109B0+5C6↓j ...
.text:00410F39                 mov     dword ptr [ebp+14h], 0
.text:00410F40                 jmp     short loc_410F1D
.text:00410F42 ; ---------------------------------------------------------------------------
.text:00410F42
.text:00410F42 loc_410F42:                             ; CODE XREF: sub_4109B0+581↑j
.text:00410F42                 mov     ecx, [ebp+0]
.text:00410F45                 cmp     ecx, [esp+5Ch+arg_0]
.text:00410F49                 jz      short loc_410F5D
.text:00410F4B                 mov     eax, [esp+5Ch+arg_4]
.text:00410F4F                 lea     edx, [ecx+1]
.text:00410F52                 mov     [ebp+0], edx
.text:00410F55                 mov     ebx, [eax+ecx*4]
.text:00410F58                 mov     [ebp+0Ch], ebx
.text:00410F5B                 jmp     short loc_410F39
.text:00410F5D ; ---------------------------------------------------------------------------
.text:00410F5D
.text:00410F5D loc_410F5D:                             ; CODE XREF: sub_4109B0+599↑j
.text:00410F5D                 mov     ecx, [esp+5Ch+var_14]
.text:00410F61                 test    ecx, ecx
.text:00410F63                 jnz     short loc_410F7F
.text:00410F65
.text:00410F65 loc_410F65:                             ; CODE XREF: sub_4109B0+5FF↓j
.text:00410F65                 mov     [ebp+8], edi
.text:00410F68                 mov     edi, [esp+5Ch+Str]
.text:00410F6C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00410F6F                 jz      short loc_410F78
.text:00410F71                 mov     esi, 3Fh ; '?'
.text:00410F76                 jmp     short loc_410F39
.text:00410F78 ; ---------------------------------------------------------------------------
.text:00410F78
.text:00410F78 loc_410F78:                             ; CODE XREF: sub_4109B0+5BF↑j
.text:00410F78                 mov     esi, 3Ah ; ':'
.text:00410F7D                 jmp     short loc_410F39
.text:00410F7F ; ---------------------------------------------------------------------------
.text:00410F7F
.text:00410F7F loc_410F7F:                             ; CODE XREF: sub_4109B0+5B3↑j
.text:00410F7F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00410F86                 call    ds:libintl_gettext
.text:00410F8C                 mov     [esp+5Ch+var_50], edi
.text:00410F90                 mov     ebx, [esp+5Ch+arg_4]
.text:00410F94                 mov     edx, ds:_iob
.text:00410F9A                 mov     esi, [ebx]
.text:00410F9C                 add     edx, 40h ; '@'
.text:00410F9F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00410FA3                 mov     [esp+5Ch+MaxCount], esi
.text:00410FA7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00410FAA                 call    fprintf
.text:00410FAF                 jmp     short loc_410F65
.text:00410FB1 ; ---------------------------------------------------------------------------
.text:00410FB1
.text:00410FB1 loc_410FB1:                             ; CODE XREF: sub_4109B0+578↑j
.text:00410FB1                 cmp     byte ptr [ecx], 0
.text:00410FB4                 jnz     loc_410F33
.text:00410FBA                 mov     dword ptr [ebp+0Ch], 0
.text:00410FC1                 jmp     loc_410F39
.text:00410FC6 ; ---------------------------------------------------------------------------
.text:00410FC6
.text:00410FC6 loc_410FC6:                             ; CODE XREF: sub_4109B0+55E↑j
.text:00410FC6                 movzx   edx, byte ptr [eax+1]
.text:00410FCA                 cmp     dl, 3Bh ; ';'
.text:00410FCD                 jnz     loc_410F18
.text:00410FD3                 mov     [esp+5Ch+var_2C], 0
.text:00410FDB                 mov     [esp+5Ch+var_30], 0
.text:00410FE3                 mov     [esp+5Ch+var_34], 0
.text:00410FEB                 mov     [esp+5Ch+var_38], 0
.text:00410FF3                 cmp     byte ptr [ecx], 0
.text:00410FF6                 jz      loc_41126B
.text:00410FFC                 inc     dword ptr [ebp+0]
.text:00410FFF                 mov     [ebp+0Ch], ecx
.text:00411002
.text:00411002 loc_411002:                             ; CODE XREF: sub_4109B0+8D4↓j
.text:00411002                 mov     edi, [ebp+0Ch]
.text:00411005                 mov     [ebp+14h], edi
.text:00411008                 movzx   eax, byte ptr [edi]
.text:0041100B                 test    al, al
.text:0041100D                 jz      short loc_41101F
.text:0041100F                 cmp     al, 3Dh ; '='
.text:00411011                 jz      short loc_41101F
.text:00411013
.text:00411013 loc_411013:                             ; CODE XREF: sub_4109B0+66D↓j
.text:00411013                 inc     edi
.text:00411014                 movzx   eax, byte ptr [edi]
.text:00411017                 test    al, al
.text:00411019                 jz      short loc_41101F
.text:0041101B                 cmp     al, 3Dh ; '='
.text:0041101D                 jnz     short loc_411013
.text:0041101F
.text:0041101F loc_41101F:                             ; CODE XREF: sub_4109B0+65D↑j
.text:0041101F                                         ; sub_4109B0+661↑j ...
.text:0041101F                 mov     [esp+5Ch+var_3C], 0
.text:00411027                 mov     esi, [esp+5Ch+arg_C]
.text:0041102B                 mov     eax, [esi]
.text:0041102D                 test    eax, eax
.text:0041102F                 jz      loc_4111B0
.text:00411035                 mov     ecx, eax
.text:00411037
.text:00411037 loc_411037:                             ; CODE XREF: sub_4109B0+6B3↓j
.text:00411037                 mov     ebx, [ebp+14h]
.text:0041103A                 mov     eax, edi
.text:0041103C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0041103F                 sub     eax, ebx
.text:00411041                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00411045                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00411049                 call    strncmp
.text:0041104E                 test    eax, eax
.text:00411050                 jz      loc_411217
.text:00411056
.text:00411056 loc_411056:                             ; CODE XREF: sub_4109B0+88C↓j
.text:00411056                                         ; sub_4109B0+89D↓j
.text:00411056                 inc     [esp+5Ch+var_3C]
.text:0041105A                 add     esi, 10h
.text:0041105D                 mov     edx, [esi]
.text:0041105F                 test    edx, edx
.text:00411061                 mov     ecx, edx
.text:00411063                 jnz     short loc_411037
.text:00411065
.text:00411065 loc_411065:                             ; CODE XREF: sub_4109B0+8B6↓j
.text:00411065                 mov     esi, [esp+5Ch+var_34]
.text:00411069                 test    esi, esi
.text:0041106B                 jz      short loc_411079
.text:0041106D                 mov     ebx, [esp+5Ch+var_30]
.text:00411071                 test    ebx, ebx
.text:00411073                 jz      loc_4111C1
.text:00411079
.text:00411079 loc_411079:                             ; CODE XREF: sub_4109B0+6BB↑j
.text:00411079                 mov     esi, [esp+5Ch+var_2C]
.text:0041107D                 test    esi, esi
.text:0041107F                 jz      loc_4111B0
.text:00411085                 cmp     byte ptr [edi], 0
.text:00411088                 jz      loc_411130
.text:0041108E                 mov     ecx, [esp+5Ch+var_2C]
.text:00411092                 mov     ebx, [ecx+4]
.text:00411095                 test    ebx, ebx
.text:00411097                 jz      short loc_4110D8
.text:00411099                 lea     edx, [edi+1]
.text:0041109C                 mov     [ebp+0Ch], edx
.text:0041109F
.text:0041109F loc_41109F:                             ; CODE XREF: sub_4109B0+788↓j
.text:0041109F                                         ; sub_4109B0+7A7↓j
.text:0041109F                 mov     edi, [ebp+14h]
.text:004110A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004110A5                 call    strlen
.text:004110AA                 add     [ebp+14h], eax
.text:004110AD                 mov     eax, [esp+5Ch+arg_10]
.text:004110B1                 test    eax, eax
.text:004110B3                 jz      short loc_4110C0
.text:004110B5                 mov     edx, [esp+5Ch+var_38]
.text:004110B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004110BD                 mov     [ebp+0], edx
.text:004110C0
.text:004110C0 loc_4110C0:                             ; CODE XREF: sub_4109B0+703↑j
.text:004110C0                 mov     eax, [esp+5Ch+var_2C]
.text:004110C4                 mov     ecx, [eax+8]
.text:004110C7                 test    ecx, ecx
.text:004110C9                 jnz     loc_410C8A
.text:004110CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004110D3                 jmp     loc_410C82
.text:004110D8 ; ---------------------------------------------------------------------------
.text:004110D8
.text:004110D8 loc_4110D8:                             ; CODE XREF: sub_4109B0+6E7↑j
.text:004110D8                 mov     eax, [esp+5Ch+var_14]
.text:004110DC                 test    eax, eax
.text:004110DE                 jnz     short loc_4110F3
.text:004110E0
.text:004110E0 loc_4110E0:                             ; CODE XREF: sub_4109B0+779↓j
.text:004110E0                 mov     ecx, [ebp+14h]
.text:004110E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004110E6                 call    strlen
.text:004110EB                 add     [ebp+14h], eax
.text:004110EE                 jmp     loc_410D08
.text:004110F3 ; ---------------------------------------------------------------------------
.text:004110F3
.text:004110F3 loc_4110F3:                             ; CODE XREF: sub_4109B0+72E↑j
.text:004110F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004110FA                 call    ds:libintl_gettext
.text:00411100                 mov     edx, [esp+5Ch+var_2C]
.text:00411104                 mov     ebx, [esp+5Ch+arg_4]
.text:00411108                 mov     edi, [edx]
.text:0041110A                 mov     [esp+5Ch+var_50], edi
.text:0041110E                 mov     edi, ds:_iob
.text:00411114                 mov     esi, [ebx]
.text:00411116                 mov     [esp+5Ch+Str2], eax ; Format
.text:0041111A                 add     edi, 40h ; '@'
.text:0041111D                 mov     [esp+5Ch+MaxCount], esi
.text:00411121                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00411124                 call    fprintf
.text:00411129                 jmp     short loc_4110E0
.text:00411129 ; ---------------------------------------------------------------------------
.text:0041112B                 align 10h
.text:00411130
.text:00411130 loc_411130:                             ; CODE XREF: sub_4109B0+6D8↑j
.text:00411130                 mov     esi, [esp+5Ch+var_2C]
.text:00411134                 cmp     dword ptr [esi+4], 1
.text:00411138                 jnz     loc_41109F
.text:0041113E                 mov     ecx, [ebp+0]
.text:00411141                 cmp     ecx, [esp+5Ch+arg_0]
.text:00411145                 jge     short loc_41115C
.text:00411147                 mov     eax, [esp+5Ch+arg_4]
.text:0041114B                 lea     ebx, [ecx+1]
.text:0041114E                 mov     [ebp+0], ebx
.text:00411151                 mov     edi, [eax+ecx*4]
.text:00411154                 mov     [ebp+0Ch], edi
.text:00411157                 jmp     loc_41109F
.text:0041115C ; ---------------------------------------------------------------------------
.text:0041115C
.text:0041115C loc_41115C:                             ; CODE XREF: sub_4109B0+795↑j
.text:0041115C                 mov     edx, [esp+5Ch+var_14]
.text:00411160                 test    edx, edx
.text:00411162                 jnz     short loc_411177
.text:00411164
.text:00411164 loc_411164:                             ; CODE XREF: sub_4109B0+7FE↓j
.text:00411164                 mov     edx, [ebp+14h]
.text:00411167                 mov     [esp+5Ch+Str1], edx ; Str
.text:0041116A                 call    strlen
.text:0041116F                 add     [ebp+14h], eax
.text:00411172                 jmp     loc_410D99
.text:00411177 ; ---------------------------------------------------------------------------
.text:00411177
.text:00411177 loc_411177:                             ; CODE XREF: sub_4109B0+7B2↑j
.text:00411177                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0041117E                 call    ds:libintl_gettext
.text:00411184                 mov     ecx, [ebp+0]
.text:00411187                 mov     ebx, [esp+5Ch+arg_4]
.text:0041118B                 mov     edi, [ebx+ecx*4-4]
.text:0041118F                 mov     ecx, ds:_iob
.text:00411195                 mov     [esp+5Ch+var_50], edi
.text:00411199                 mov     esi, [ebx]
.text:0041119B                 add     ecx, 40h ; '@'
.text:0041119E                 mov     [esp+5Ch+Str2], eax ; Format
.text:004111A2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004111A5                 mov     [esp+5Ch+MaxCount], esi
.text:004111A9                 call    fprintf
.text:004111AE                 jmp     short loc_411164
.text:004111B0 ; ---------------------------------------------------------------------------
.text:004111B0
.text:004111B0 loc_4111B0:                             ; CODE XREF: sub_4109B0+67F↑j
.text:004111B0                                         ; sub_4109B0+6CF↑j
.text:004111B0                 mov     dword ptr [ebp+14h], 0
.text:004111B7                 mov     eax, 57h ; 'W'
.text:004111BC                 jmp     loc_410B07
.text:004111C1 ; ---------------------------------------------------------------------------
.text:004111C1
.text:004111C1 loc_4111C1:                             ; CODE XREF: sub_4109B0+6C3↑j
.text:004111C1                 mov     edi, [esp+5Ch+var_14]
.text:004111C5                 test    edi, edi
.text:004111C7                 jnz     short loc_4111DF
.text:004111C9
.text:004111C9 loc_4111C9:                             ; CODE XREF: sub_4109B0+865↓j
.text:004111C9                 mov     edx, [ebp+14h]
.text:004111CC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004111CF                 call    strlen
.text:004111D4                 add     [ebp+14h], eax
.text:004111D7                 inc     dword ptr [ebp+0]
.text:004111DA                 jmp     loc_410D08
.text:004111DF ; ---------------------------------------------------------------------------
.text:004111DF
.text:004111DF loc_4111DF:                             ; CODE XREF: sub_4109B0+817↑j
.text:004111DF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004111E6                 call    ds:libintl_gettext
.text:004111EC                 mov     ecx, [ebp+0]
.text:004111EF                 mov     ebx, [esp+5Ch+arg_4]
.text:004111F3                 mov     edi, [ebx+ecx*4]
.text:004111F6                 mov     ecx, ds:_iob
.text:004111FC                 mov     [esp+5Ch+var_50], edi
.text:00411200                 mov     esi, [ebx]
.text:00411202                 add     ecx, 40h ; '@'
.text:00411205                 mov     [esp+5Ch+Str2], eax ; Format
.text:00411209                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0041120C                 mov     [esp+5Ch+MaxCount], esi
.text:00411210                 call    fprintf
.text:00411215                 jmp     short loc_4111C9
.text:00411217 ; ---------------------------------------------------------------------------
.text:00411217
.text:00411217 loc_411217:                             ; CODE XREF: sub_4109B0+6A0↑j
.text:00411217                 mov     edx, [ebp+14h]
.text:0041121A                 mov     ebx, edi
.text:0041121C                 mov     ecx, [esi]
.text:0041121E                 sub     ebx, edx
.text:00411220                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00411223                 call    strlen
.text:00411228                 cmp     ebx, eax
.text:0041122A                 jz      short loc_411252
.text:0041122C                 mov     ebx, [esp+5Ch+var_2C]
.text:00411230                 test    ebx, ebx
.text:00411232                 jz      short loc_411241
.text:00411234                 mov     [esp+5Ch+var_34], 1
.text:0041123C                 jmp     loc_411056
.text:00411241 ; ---------------------------------------------------------------------------
.text:00411241
.text:00411241 loc_411241:                             ; CODE XREF: sub_4109B0+882↑j
.text:00411241                 mov     [esp+5Ch+var_2C], esi
.text:00411245                 mov     ecx, [esp+5Ch+var_3C]
.text:00411249                 mov     [esp+5Ch+var_38], ecx
.text:0041124D                 jmp     loc_411056
.text:00411252 ; ---------------------------------------------------------------------------
.text:00411252
.text:00411252 loc_411252:                             ; CODE XREF: sub_4109B0+87A↑j
.text:00411252                 mov     [esp+5Ch+var_2C], esi
.text:00411256                 mov     eax, [esp+5Ch+var_3C]
.text:0041125A                 mov     [esp+5Ch+var_30], 1
.text:00411262                 mov     [esp+5Ch+var_38], eax
.text:00411266                 jmp     loc_411065
.text:0041126B ; ---------------------------------------------------------------------------
.text:0041126B
.text:0041126B loc_41126B:                             ; CODE XREF: sub_4109B0+646↑j
.text:0041126B                 mov     edx, [ebp+0]
.text:0041126E                 cmp     edx, [esp+5Ch+arg_0]
.text:00411272                 jz      short loc_411289
.text:00411274                 mov     ebx, [esp+5Ch+arg_4]
.text:00411278                 lea     esi, [edx+1]
.text:0041127B                 mov     [ebp+0], esi
.text:0041127E                 mov     edi, [ebx+edx*4]
.text:00411281                 mov     [ebp+0Ch], edi
.text:00411284                 jmp     loc_411002
.text:00411289 ; ---------------------------------------------------------------------------
.text:00411289
.text:00411289 loc_411289:                             ; CODE XREF: sub_4109B0+8C2↑j
.text:00411289                 mov     edi, [esp+5Ch+var_14]
.text:0041128D                 test    edi, edi
.text:0041128F                 jnz     short loc_4112AC
.text:00411291
.text:00411291 loc_411291:                             ; CODE XREF: sub_4109B0+92C↓j
.text:00411291                 mov     [ebp+8], esi
.text:00411294                 mov     ebp, [esp+5Ch+Str]
.text:00411298                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0041129C                 jz      short loc_4112A8
.text:0041129E                 mov     bl, 3Fh ; '?'
.text:004112A0
.text:004112A0 loc_4112A0:                             ; CODE XREF: sub_4109B0+8FA↓j
.text:004112A0                 movsx   eax, bl
.text:004112A3                 jmp     loc_410B07
.text:004112A8 ; ---------------------------------------------------------------------------
.text:004112A8
.text:004112A8 loc_4112A8:                             ; CODE XREF: sub_4109B0+8EC↑j
.text:004112A8                 mov     bl, 3Ah ; ':'
.text:004112AA                 jmp     short loc_4112A0
.text:004112AC ; ---------------------------------------------------------------------------
.text:004112AC
.text:004112AC loc_4112AC:                             ; CODE XREF: sub_4109B0+8DF↑j
.text:004112AC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004112B3                 call    ds:libintl_gettext
.text:004112B9                 mov     [esp+5Ch+var_50], esi
.text:004112BD                 mov     edx, [esp+5Ch+arg_4]
.text:004112C1                 mov     ecx, ds:_iob
.text:004112C7                 mov     ebx, [edx]
.text:004112C9                 add     ecx, 40h ; '@'
.text:004112CC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004112D0                 mov     [esp+5Ch+MaxCount], ebx
.text:004112D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004112D7                 call    fprintf
.text:004112DC                 jmp     short loc_411291
.text:004112DC ; ---------------------------------------------------------------------------
.text:004112DE                 align 10h
.text:004112E0
.text:004112E0 loc_4112E0:                             ; CODE XREF: sub_4109B0+54C↑j
.text:004112E0                                         ; sub_4109B0+555↑j
.text:004112E0                 mov     eax, [esp+5Ch+var_14]
.text:004112E4                 test    eax, eax
.text:004112E6                 jz      short loc_41131F
.text:004112E8                 mov     ebx, [ebp+1Ch]
.text:004112EB                 test    ebx, ebx
.text:004112ED                 jz      short loc_411327
.text:004112EF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004112F6
.text:004112F6 loc_4112F6:                             ; CODE XREF: sub_4109B0+97E↓j
.text:004112F6                 call    ds:libintl_gettext
.text:004112FC                 mov     [esp+5Ch+var_50], esi
.text:00411300                 mov     ebx, [esp+5Ch+arg_4]
.text:00411304                 mov     edx, ds:_iob
.text:0041130A                 mov     esi, [ebx]
.text:0041130C                 add     edx, 40h ; '@'
.text:0041130F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00411313                 mov     [esp+5Ch+MaxCount], esi
.text:00411317                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0041131A                 call    fprintf
.text:0041131F
.text:0041131F loc_41131F:                             ; CODE XREF: sub_4109B0+936↑j
.text:0041131F                 mov     [ebp+8], edi
.text:00411322                 jmp     loc_410D08
.text:00411327 ; ---------------------------------------------------------------------------
.text:00411327
.text:00411327 loc_411327:                             ; CODE XREF: sub_4109B0+93D↑j
.text:00411327                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0041132E                 jmp     short loc_4112F6
.text:00411330 ; ---------------------------------------------------------------------------
.text:00411330
.text:00411330 loc_411330:                             ; CODE XREF: sub_4109B0+26E↑j
.text:00411330                 mov     edi, [esp+5Ch+var_14]
.text:00411334                 test    edi, edi
.text:00411336                 jnz     short loc_41134E
.text:00411338
.text:00411338 loc_411338:                             ; CODE XREF: sub_4109B0+9D4↓j
.text:00411338                 mov     edx, [ebp+14h]
.text:0041133B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0041133E                 call    strlen
.text:00411343                 add     [ebp+14h], eax
.text:00411346                 inc     dword ptr [ebp+0]
.text:00411349                 jmp     loc_410E8E
.text:0041134E ; ---------------------------------------------------------------------------
.text:0041134E
.text:0041134E loc_41134E:                             ; CODE XREF: sub_4109B0+986↑j
.text:0041134E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00411355                 call    ds:libintl_gettext
.text:0041135B                 mov     ebx, [ebp+0]
.text:0041135E                 mov     edi, [esp+5Ch+arg_4]
.text:00411362                 mov     ecx, [edi+ebx*4]
.text:00411365                 mov     ebx, ds:_iob
.text:0041136B                 mov     [esp+5Ch+var_50], ecx
.text:0041136F                 mov     esi, [edi]
.text:00411371                 add     ebx, 40h ; '@'
.text:00411374                 mov     [esp+5Ch+Str2], eax ; Format
.text:00411378                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0041137B                 mov     [esp+5Ch+MaxCount], esi
.text:0041137F                 call    fprintf
.text:00411384                 jmp     short loc_411338
.text:00411386 ; ---------------------------------------------------------------------------
.text:00411386
.text:00411386 loc_411386:                             ; CODE XREF: sub_4109B0+246↑j
.text:00411386                 mov     ecx, [ebp+14h]
.text:00411389                 mov     ebx, edi
.text:0041138B                 mov     edx, [esi]
.text:0041138D                 sub     ebx, ecx
.text:0041138F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00411392                 call    strlen
.text:00411397                 cmp     ebx, eax
.text:00411399                 jz      short loc_4113F1
.text:0041139B                 mov     ebx, [esp+5Ch+var_18]
.text:0041139F                 test    ebx, ebx
.text:004113A1                 jz      short loc_4113E0
.text:004113A3                 mov     edx, [esp+5Ch+arg_14]
.text:004113A7                 test    edx, edx
.text:004113A9                 jnz     short loc_4113B7
.text:004113AB                 mov     ecx, [esp+5Ch+var_18]
.text:004113AF                 mov     ebx, [esi+4]
.text:004113B2                 cmp     [ecx+4], ebx
.text:004113B5                 jz      short loc_4113C4
.text:004113B7
.text:004113B7 loc_4113B7:                             ; CODE XREF: sub_4109B0+9F9↑j
.text:004113B7                                         ; sub_4109B0+A1A↓j ...
.text:004113B7                 mov     [esp+5Ch+var_20], 1
.text:004113BF                 jmp     loc_410BFC
.text:004113C4 ; ---------------------------------------------------------------------------
.text:004113C4
.text:004113C4 loc_4113C4:                             ; CODE XREF: sub_4109B0+A05↑j
.text:004113C4                 mov     edx, [esi+8]
.text:004113C7                 cmp     [ecx+8], edx
.text:004113CA                 jnz     short loc_4113B7
.text:004113CC                 mov     ebx, [esi+0Ch]
.text:004113CF                 cmp     [ecx+0Ch], ebx
.text:004113D2                 jnz     short loc_4113B7
.text:004113D4                 jmp     loc_410BFC
.text:004113D4 ; ---------------------------------------------------------------------------
.text:004113D9                 align 10h
.text:004113E0
.text:004113E0 loc_4113E0:                             ; CODE XREF: sub_4109B0+9F1↑j
.text:004113E0                 mov     [esp+5Ch+var_18], esi
.text:004113E4                 mov     eax, [esp+5Ch+var_28]
.text:004113E8                 mov     [esp+5Ch+var_24], eax
.text:004113EC                 jmp     loc_410BFC
.text:004113F1 ; ---------------------------------------------------------------------------
.text:004113F1
.text:004113F1 loc_4113F1:                             ; CODE XREF: sub_4109B0+9E9↑j
.text:004113F1                 mov     [esp+5Ch+var_18], esi
.text:004113F5                 mov     ecx, [esp+5Ch+var_28]
.text:004113F9                 mov     [esp+5Ch+var_1C], 1
.text:00411401                 mov     [esp+5Ch+var_24], ecx
.text:00411405                 jmp     loc_410C10
.text:0041140A ; ---------------------------------------------------------------------------
.text:0041140A
.text:0041140A loc_41140A:                             ; CODE XREF: sub_4109B0+1BF↑j
.text:0041140A                 mov     eax, [esp+5Ch+Str]
.text:0041140E                 movsx   esi, dl
.text:00411411                 mov     [esp+5Ch+Str2], esi ; Val
.text:00411415                 mov     [esp+5Ch+Str1], eax ; Str
.text:00411418                 call    strchr
.text:0041141D                 test    eax, eax
.text:0041141F                 jnz     loc_410ED0
.text:00411425                 jmp     loc_410B75
.text:0041142A ; ---------------------------------------------------------------------------
.text:0041142A
.text:0041142A loc_41142A:                             ; CODE XREF: sub_4109B0+17C↑j
.text:0041142A                 mov     ecx, 1
.text:0041142F                 jmp     loc_410B32
.text:00411434 ; ---------------------------------------------------------------------------
.text:00411434
.text:00411434 loc_411434:                             ; CODE XREF: sub_4109B0+D4↑j
.text:00411434                                         ; sub_4109B0+130↑j
.text:00411434                 mov     eax, [ebp+20h]
.text:00411437                 cmp     eax, [ebp+24h]
.text:0041143A                 jz      loc_410B10
.text:00411440                 mov     [ebp+0], eax
.text:00411443                 jmp     loc_410B10
.text:00411448 ; ---------------------------------------------------------------------------
.text:00411448
.text:00411448 loc_411448:                             ; CODE XREF: sub_4109B0+FE↑j
.text:00411448                 mov     [ebp+20h], eax
.text:0041144B                 jmp     loc_410AD0
.text:00411450 ; ---------------------------------------------------------------------------
.text:00411450
.text:00411450 loc_411450:                             ; CODE XREF: sub_4109B0+CA↑j
.text:00411450                 mov     edx, [ebp+20h]
.text:00411453                 mov     eax, [ebp+24h]
.text:00411456                 cmp     edx, eax
.text:00411458                 jz      short loc_4114D0
.text:0041145A                 cmp     eax, ebx
.text:0041145C                 jz      short loc_411471
.text:0041145E                 mov     [esp+5Ch+Str2], ebp
.text:00411462                 mov     ebx, [esp+5Ch+arg_4]
.text:00411466                 mov     [esp+5Ch+Str1], ebx
.text:00411469                 call    sub_411660
.text:0041146E                 mov     ebx, [ebp+0]
.text:00411471
.text:00411471 loc_411471:                             ; CODE XREF: sub_4109B0+AAC↑j
.text:00411471                                         ; sub_4109B0+B22↓j ...
.text:00411471                 cmp     ebx, [esp+5Ch+arg_0]
.text:00411475                 jge     short loc_4114C0
.text:00411477                 mov     esi, [esp+5Ch+arg_4]
.text:0041147B                 mov     eax, [esi+ebx*4]
.text:0041147E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00411481                 jz      short loc_4114C8
.text:00411483                 lea     esi, [esi+0]
.text:00411489                 lea     edi, [edi+0]
.text:00411490
.text:00411490 loc_411490:                             ; CODE XREF: sub_4109B0+AFC↓j
.text:00411490                                         ; sub_4109B0+B1C↓j
.text:00411490                 lea     eax, [ebx+1]
.text:00411493                 mov     ebx, eax
.text:00411495                 mov     [ebp+0], eax
.text:00411498                 cmp     eax, [esp+5Ch+arg_0]
.text:0041149C                 jge     short loc_4114C0
.text:0041149E                 mov     edi, [esp+5Ch+arg_4]
.text:004114A2                 mov     edx, [edi+eax*4]
.text:004114A5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004114A8                 jz      short loc_4114B0
.text:004114AA
.text:004114AA loc_4114AA:                             ; CODE XREF: sub_4109B0+B04↓j
.text:004114AA                 mov     ebx, eax
.text:004114AC                 jmp     short loc_411490
.text:004114AC ; ---------------------------------------------------------------------------
.text:004114AE                 align 10h
.text:004114B0
.text:004114B0 loc_4114B0:                             ; CODE XREF: sub_4109B0+AF8↑j
.text:004114B0                 cmp     byte ptr [edx+1], 0
.text:004114B4                 jz      short loc_4114AA
.text:004114B6                 lea     esi, [esi+0]
.text:004114B9                 lea     edi, [edi+0]
.text:004114C0
.text:004114C0 loc_4114C0:                             ; CODE XREF: sub_4109B0+AC5↑j
.text:004114C0                                         ; sub_4109B0+AEC↑j ...
.text:004114C0                 mov     [ebp+24h], ebx
.text:004114C3                 jmp     loc_410A80
.text:004114C8 ; ---------------------------------------------------------------------------
.text:004114C8
.text:004114C8 loc_4114C8:                             ; CODE XREF: sub_4109B0+AD1↑j
.text:004114C8                 cmp     byte ptr [eax+1], 0
.text:004114CC                 jz      short loc_411490
.text:004114CE                 jmp     short loc_4114C0
.text:004114D0 ; ---------------------------------------------------------------------------
.text:004114D0
.text:004114D0 loc_4114D0:                             ; CODE XREF: sub_4109B0+AA8↑j
.text:004114D0                 cmp     edx, ebx
.text:004114D2                 jz      short loc_411471
.text:004114D4                 mov     [ebp+20h], ebx
.text:004114D7                 jmp     short loc_411471
.text:004114D9 ; ---------------------------------------------------------------------------
.text:004114D9
.text:004114D9 loc_4114D9:                             ; CODE XREF: sub_4109B0+88↑j
.text:004114D9                 mov     dword ptr [ebp+18h], 0
.text:004114E0                 mov     esi, [esp+5Ch+Str]
.text:004114E4
.text:004114E4 loc_4114E4:                             ; CODE XREF: sub_4109B0+B49↓j
.text:004114E4                 inc     esi
.text:004114E5                 jmp     loc_410A48
.text:004114E5 ; ---------------------------------------------------------------------------
.text:004114EA                 align 10h
.text:004114F0
.text:004114F0 loc_4114F0:                             ; CODE XREF: sub_4109B0+80↑j
.text:004114F0                 mov     dword ptr [ebp+18h], 2
.text:004114F7                 mov     esi, ecx
.text:004114F9                 jmp     short loc_4114E4
.text:004114F9 ; ---------------------------------------------------------------------------
.text:004114FB                 align 10h
.text:00411500
.text:00411500 loc_411500:                             ; CODE XREF: sub_4109B0+69↑j
.text:00411500                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect_0 ; "POSIXLY_CORRECT"
.text:00411507                 call    getenv
.text:0041150C                 test    eax, eax
.text:0041150E                 jz      loc_410A24
.text:00411514                 jmp     loc_410A1F
.text:00411514 ; ---------------------------------------------------------------------------
.text:00411519                 align 10h
.text:00411520
.text:00411520 loc_411520:                             ; CODE XREF: sub_4109B0+3F↑j
.text:00411520                 mov     dword ptr [ebp+0], 1
.text:00411527                 mov     ebx, 1
.text:0041152C                 jmp     loc_410A00
.text:0041152C sub_4109B0      endp
.text:0041152C
.text:00411531 ; ---------------------------------------------------------------------------
.text:00411531                 jmp     short sub_411540
.text:00411531 ; ---------------------------------------------------------------------------
.text:00411533                 align 10h
.text:00411540
.text:00411540 ; =============== S U B R O U T I N E =======================================
.text:00411540
.text:00411540
.text:00411540 ; int __cdecl sub_411540(int, int, char *, int, int, int, int)
.text:00411540 sub_411540      proc near               ; CODE XREF: .text:00411531↑j
.text:00411540                                         ; sub_413BF0+3A↓p ...
.text:00411540
.text:00411540 var_2C          = dword ptr -2Ch
.text:00411540 var_28          = dword ptr -28h
.text:00411540 Str             = dword ptr -24h
.text:00411540 var_20          = dword ptr -20h
.text:00411540 var_1C          = dword ptr -1Ch
.text:00411540 var_18          = dword ptr -18h
.text:00411540 var_14          = dword ptr -14h
.text:00411540 var_10          = dword ptr -10h
.text:00411540 arg_0           = dword ptr  4
.text:00411540 arg_4           = dword ptr  8
.text:00411540 arg_8           = dword ptr  0Ch
.text:00411540 arg_C           = dword ptr  10h
.text:00411540 arg_10          = dword ptr  14h
.text:00411540 arg_14          = dword ptr  18h
.text:00411540 arg_18          = dword ptr  1Ch
.text:00411540
.text:00411540                 sub     esp, 2Ch
.text:00411543                 mov     edx, dword_42B100
.text:00411549                 mov     [esp+2Ch+var_10], offset dword_42C570 ; int
.text:00411551                 mov     ecx, dword_42B104
.text:00411557                 mov     ds:dword_42C570, edx
.text:0041155D                 mov     edx, [esp+2Ch+arg_18]
.text:00411561                 mov     ds:dword_42C574, ecx
.text:00411567                 mov     ecx, [esp+2Ch+arg_14]
.text:0041156B                 mov     [esp+2Ch+var_14], edx ; int
.text:0041156F                 mov     edx, [esp+2Ch+arg_10]
.text:00411573                 mov     [esp+2Ch+var_18], ecx ; int
.text:00411577                 mov     ecx, [esp+2Ch+arg_C]
.text:0041157B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0041157F                 mov     edx, [esp+2Ch+arg_8]
.text:00411583                 mov     [esp+2Ch+var_20], ecx ; int
.text:00411587                 mov     ecx, [esp+2Ch+arg_4]
.text:0041158B                 mov     [esp+2Ch+Str], edx ; Str
.text:0041158F                 mov     edx, [esp+2Ch+arg_0]
.text:00411593                 mov     [esp+2Ch+var_28], ecx ; int
.text:00411597                 mov     [esp+2Ch+var_2C], edx ; int
.text:0041159A                 call    sub_4109B0
.text:0041159F                 mov     ecx, ds:dword_42C570
.text:004115A5                 mov     dword_42B100, ecx
.text:004115AB                 mov     ecx, ds:dword_42C57C
.text:004115B1                 mov     ds:dword_42D320, ecx
.text:004115B7                 mov     ecx, ds:dword_42C578
.text:004115BD                 mov     dword_42B108, ecx
.text:004115C3                 add     esp, 2Ch
.text:004115C6                 retn
.text:004115C6 sub_411540      endp
.text:004115C6
.text:004115C6 ; ---------------------------------------------------------------------------
.text:004115C7                 align 10h
.text:004115D0                 sub     esp, 2Ch
.text:004115D3                 mov     edx, dword_42B100
.text:004115D9                 mov     dword ptr [esp+1Ch], offset dword_42C570
.text:004115E1                 mov     ecx, dword_42B104
.text:004115E7                 mov     dword ptr [esp+18h], 1
.text:004115EF                 mov     ds:dword_42C570, edx
.text:004115F5                 mov     edx, [esp+38h]
.text:004115F9                 mov     ds:dword_42C574, ecx
.text:004115FF                 mov     ecx, [esp+34h]
.text:00411603                 mov     [esp+8], edx
.text:00411607                 mov     edx, [esp+30h]
.text:0041160B                 mov     [esp+4], ecx
.text:0041160F                 mov     dword ptr [esp+14h], 0
.text:00411617                 mov     dword ptr [esp+10h], 0
.text:0041161F                 mov     dword ptr [esp+0Ch], 0
.text:00411627                 mov     [esp], edx
.text:0041162A                 call    sub_4109B0
.text:0041162F                 mov     ecx, ds:dword_42C570
.text:00411635                 mov     dword_42B100, ecx
.text:0041163B                 mov     ecx, ds:dword_42C57C
.text:00411641                 mov     ds:dword_42D320, ecx
.text:00411647                 mov     ecx, ds:dword_42C578
.text:0041164D                 mov     dword_42B108, ecx
.text:00411653                 add     esp, 2Ch
.text:00411656                 retn
.text:00411656 ; ---------------------------------------------------------------------------
.text:00411657                 align 10h
.text:00411660
.text:00411660 ; =============== S U B R O U T I N E =======================================
.text:00411660
.text:00411660
.text:00411660 sub_411660      proc near               ; CODE XREF: sub_4109B0+113↑p
.text:00411660                                         ; sub_4109B0+AB9↑p
.text:00411660
.text:00411660 var_2C          = dword ptr -2Ch
.text:00411660 var_28          = dword ptr -28h
.text:00411660 var_24          = dword ptr -24h
.text:00411660 var_20          = dword ptr -20h
.text:00411660 var_1C          = dword ptr -1Ch
.text:00411660 var_18          = dword ptr -18h
.text:00411660 var_14          = dword ptr -14h
.text:00411660 arg_0           = dword ptr  4
.text:00411660 arg_4           = dword ptr  8
.text:00411660
.text:00411660                 push    ebp
.text:00411661                 push    edi
.text:00411662                 push    esi
.text:00411663                 push    ebx
.text:00411664                 sub     esp, 1Ch
.text:00411667                 mov     ecx, [esp+2Ch+arg_4]
.text:0041166B                 mov     eax, [esp+2Ch+arg_4]
.text:0041166F                 mov     ebx, [esp+2Ch+arg_4]
.text:00411673                 mov     edx, [ecx+20h]
.text:00411676                 mov     edi, [esp+2Ch+arg_0]
.text:0041167A                 mov     ecx, [ebx]
.text:0041167C                 mov     [esp+2Ch+var_2C], edx
.text:0041167F                 mov     [esp+2Ch+var_14], edx
.text:00411683                 mov     edx, [eax+24h]
.text:00411686                 mov     [esp+2Ch+var_28], ecx
.text:0041168A                 mov     [esp+2Ch+var_1C], ecx
.text:0041168E                 cmp     ecx, edx
.text:00411690                 mov     [esp+2Ch+var_18], edx
.text:00411694                 jle     short loc_411710
.text:00411696                 mov     esi, [esp+2Ch+var_2C]
.text:00411699                 cmp     edx, esi
.text:0041169B                 jle     short loc_411710
.text:0041169D                 lea     esi, [esi+0]
.text:004116A0
.text:004116A0 loc_4116A0:                             ; CODE XREF: sub_411660+A1↓j
.text:004116A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004116A4                 mov     edx, [esp+2Ch+var_18]
.text:004116A8                 mov     ebp, [esp+2Ch+var_18]
.text:004116AC                 mov     eax, [esp+2Ch+var_14]
.text:004116B0                 sub     ebx, edx
.text:004116B2                 mov     [esp+2Ch+var_20], ebx
.text:004116B6                 sub     ebp, eax
.text:004116B8                 cmp     ebx, ebp
.text:004116BA                 jle     short loc_411735
.text:004116BC                 xor     esi, esi
.text:004116BE                 cmp     esi, ebp
.text:004116C0                 jge     short loc_4116ED
.text:004116C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004116C6                 sub     ecx, ebp
.text:004116C8                 mov     [esp+2Ch+var_24], ecx
.text:004116CC                 lea     esi, [esi+0]
.text:004116D0
.text:004116D0 loc_4116D0:                             ; CODE XREF: sub_411660+8B↓j
.text:004116D0                 mov     ecx, [esp+2Ch+var_14]
.text:004116D4                 mov     edx, [esp+2Ch+var_24]
.text:004116D8                 add     ecx, esi
.text:004116DA                 add     edx, esi
.text:004116DC                 mov     ebx, [edi+ecx*4]
.text:004116DF                 mov     eax, [edi+edx*4]
.text:004116E2                 inc     esi
.text:004116E3                 cmp     esi, ebp
.text:004116E5                 mov     [edi+ecx*4], eax
.text:004116E8                 mov     [edi+edx*4], ebx
.text:004116EB                 jl      short loc_4116D0
.text:004116ED
.text:004116ED loc_4116ED:                             ; CODE XREF: sub_411660+60↑j
.text:004116ED                 sub     [esp+2Ch+var_1C], ebp
.text:004116F1
.text:004116F1 loc_4116F1:                             ; CODE XREF: sub_411660+107↓j
.text:004116F1                 mov     eax, [esp+2Ch+var_18]
.text:004116F5                 cmp     [esp+2Ch+var_1C], eax
.text:004116F9                 jle     short loc_411710
.text:004116FB                 mov     ebp, [esp+2Ch+var_14]
.text:004116FF                 cmp     eax, ebp
.text:00411701                 jg      short loc_4116A0
.text:00411703                 lea     esi, [esi+0]
.text:00411709                 lea     edi, [edi+0]
.text:00411710
.text:00411710 loc_411710:                             ; CODE XREF: sub_411660+34↑j
.text:00411710                                         ; sub_411660+3B↑j ...
.text:00411710                 mov     esi, [esp+2Ch+var_28]
.text:00411714                 mov     ecx, [esp+2Ch+var_18]
.text:00411718                 mov     eax, [esp+2Ch+var_2C]
.text:0041171B                 mov     edi, [esp+2Ch+arg_4]
.text:0041171F                 mov     edx, [esp+2Ch+var_28]
.text:00411723                 sub     esi, ecx
.text:00411725                 add     esi, eax
.text:00411727                 mov     [edi+20h], esi
.text:0041172A                 mov     [edi+24h], edx
.text:0041172D                 add     esp, 1Ch
.text:00411730                 pop     ebx
.text:00411731                 pop     esi
.text:00411732                 pop     edi
.text:00411733                 pop     ebp
.text:00411734                 retn
.text:00411735 ; ---------------------------------------------------------------------------
.text:00411735
.text:00411735 loc_411735:                             ; CODE XREF: sub_411660+5A↑j
.text:00411735                 xor     esi, esi
.text:00411737                 cmp     esi, [esp+2Ch+var_20]
.text:0041173B                 jge     short loc_41175F
.text:0041173D                 lea     esi, [esi+0]
.text:00411740
.text:00411740 loc_411740:                             ; CODE XREF: sub_411660+FD↓j
.text:00411740                 mov     ebx, [esp+2Ch+var_14]
.text:00411744                 mov     ebp, [esp+2Ch+var_18]
.text:00411748                 add     ebx, esi
.text:0041174A                 add     ebp, esi
.text:0041174C                 mov     edx, [edi+ebx*4]
.text:0041174F                 inc     esi
.text:00411750                 cmp     esi, [esp+2Ch+var_20]
.text:00411754                 mov     ecx, [edi+ebp*4]
.text:00411757                 mov     [edi+ebx*4], ecx
.text:0041175A                 mov     [edi+ebp*4], edx
.text:0041175D                 jl      short loc_411740
.text:0041175F
.text:0041175F loc_41175F:                             ; CODE XREF: sub_411660+DB↑j
.text:0041175F                 mov     esi, [esp+2Ch+var_20]
.text:00411763                 add     [esp+2Ch+var_14], esi
.text:00411767                 jmp     short loc_4116F1
.text:00411767 sub_411660      endp
.text:00411767
.text:00411767 ; ---------------------------------------------------------------------------
.text:00411769                 align 20h
.text:00411780
.text:00411780 ; =============== S U B R O U T I N E =======================================
.text:00411780
.text:00411780
.text:00411780 ; int __cdecl sub_411780(char *, int, int, int)
.text:00411780 sub_411780      proc near               ; CODE XREF: sub_4025F0+F6↑p
.text:00411780                                         ; sub_411AA0+32↓p ...
.text:00411780
.text:00411780 Str             = dword ptr -2Ch
.text:00411780 Str2            = dword ptr -28h
.text:00411780 MaxCount        = dword ptr -24h
.text:00411780 var_20          = dword ptr -20h
.text:00411780 var_19          = byte ptr -19h
.text:00411780 var_18          = dword ptr -18h
.text:00411780 var_14          = dword ptr -14h
.text:00411780 arg_0           = dword ptr  4
.text:00411780 arg_4           = dword ptr  8
.text:00411780 arg_8           = dword ptr  0Ch
.text:00411780 arg_C           = dword ptr  10h
.text:00411780
.text:00411780                 push    ebp
.text:00411781                 push    edi
.text:00411782                 push    esi
.text:00411783                 push    ebx
.text:00411784                 sub     esp, 1Ch
.text:00411787                 xor     ebx, ebx
.text:00411789                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00411791                 mov     edx, [esp+2Ch+arg_0]
.text:00411795                 mov     ebp, [esp+2Ch+arg_C]
.text:00411799                 mov     [esp+2Ch+var_19], 0
.text:0041179E                 mov     [esp+2Ch+Str], edx ; Str
.text:004117A1                 call    strlen
.text:004117A6                 mov     [esp+2Ch+var_14], eax
.text:004117AA                 mov     ecx, [esp+2Ch+arg_4]
.text:004117AE                 mov     eax, [ecx]
.text:004117B0                 test    eax, eax
.text:004117B2                 jz      short loc_4117F8
.text:004117B4                 mov     [esp+2Ch+var_20], 0
.text:004117BC                 lea     esi, [esi+0]
.text:004117C0
.text:004117C0 loc_4117C0:                             ; CODE XREF: sub_411780+6A↓j
.text:004117C0                 mov     [esp+2Ch+Str], eax ; Str1
.text:004117C3                 mov     esi, [esp+2Ch+var_14]
.text:004117C7                 mov     ecx, [esp+2Ch+arg_0]
.text:004117CB                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:004117CF                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:004117D3                 call    strncmp
.text:004117D8                 test    eax, eax
.text:004117DA                 jz      short loc_411806
.text:004117DC
.text:004117DC loc_4117DC:                             ; CODE XREF: sub_411780+CA↓j
.text:004117DC                                         ; sub_411780+D1↓j ...
.text:004117DC                 add     [esp+2Ch+var_20], ebp
.text:004117E0                 inc     ebx
.text:004117E1                 mov     esi, [esp+2Ch+arg_4]
.text:004117E5                 mov     eax, [esi+ebx*4]
.text:004117E8                 test    eax, eax
.text:004117EA                 jnz     short loc_4117C0
.text:004117EC                 cmp     [esp+2Ch+var_19], 0
.text:004117F1                 mov     edx, 0FFFFFFFEh
.text:004117F6                 jnz     short loc_4117FC
.text:004117F8
.text:004117F8 loc_4117F8:                             ; CODE XREF: sub_411780+32↑j
.text:004117F8                 mov     edx, [esp+2Ch+var_18]
.text:004117FC
.text:004117FC loc_4117FC:                             ; CODE XREF: sub_411780+76↑j
.text:004117FC                                         ; sub_411780+9B↓j
.text:004117FC                 add     esp, 1Ch
.text:004117FF                 mov     eax, edx
.text:00411801                 pop     ebx
.text:00411802                 pop     esi
.text:00411803                 pop     edi
.text:00411804                 pop     ebp
.text:00411805                 retn
.text:00411806 ; ---------------------------------------------------------------------------
.text:00411806
.text:00411806 loc_411806:                             ; CODE XREF: sub_411780+5A↑j
.text:00411806                 mov     eax, [esp+2Ch+arg_4]
.text:0041180A                 mov     edi, [eax+ebx*4]
.text:0041180D                 mov     [esp+2Ch+Str], edi ; Str
.text:00411810                 call    strlen
.text:00411815                 cmp     eax, [esp+2Ch+var_14]
.text:00411819                 mov     edx, ebx
.text:0041181B                 jz      short loc_4117FC
.text:0041181D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00411822                 jz      short loc_411853
.text:00411824                 mov     ecx, [esp+2Ch+arg_8]
.text:00411828                 test    ecx, ecx
.text:0041182A                 jz      short loc_41184C
.text:0041182C                 cld
.text:0041182D                 mov     edi, [esp+2Ch+var_18]
.text:00411831                 mov     ecx, ebp
.text:00411833                 mov     esi, [esp+2Ch+arg_8]
.text:00411837                 mov     edx, [esp+2Ch+var_20]
.text:0041183B                 imul    edi, ebp
.text:0041183E                 add     esi, edi
.text:00411840                 mov     edi, [esp+2Ch+arg_8]
.text:00411844                 add     edi, edx
.text:00411846                 cmp     ebp, ebp
.text:00411848                 repe cmpsb
.text:0041184A                 jz      short loc_4117DC
.text:0041184C
.text:0041184C loc_41184C:                             ; CODE XREF: sub_411780+AA↑j
.text:0041184C                 mov     [esp+2Ch+var_19], 1
.text:00411851                 jmp     short loc_4117DC
.text:00411853 ; ---------------------------------------------------------------------------
.text:00411853
.text:00411853 loc_411853:                             ; CODE XREF: sub_411780+A2↑j
.text:00411853                 mov     [esp+2Ch+var_18], ebx
.text:00411857                 jmp     short loc_4117DC
.text:00411857 sub_411780      endp
.text:00411857
.text:00411857 ; ---------------------------------------------------------------------------
.text:00411859 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:00411859                                         ; DATA XREF: .text:004118B2↓o
.text:00411859                                         ; sub_411AA0+5A↓o
.text:00411876 aInvalidArgumen db 'invalid argument %s for %s',0
.text:00411876                                         ; DATA XREF: .text:loc_411920↓o
.text:00411876                                         ; sub_411AA0:loc_411C96↓o
.text:00411891 ; ---------------------------------------------------------------------------
.text:00411891                 jmp     short loc_4118A0
.text:00411891 ; ---------------------------------------------------------------------------
.text:00411893                 align 10h
.text:004118A0
.text:004118A0 loc_4118A0:                             ; CODE XREF: .text:00411891↑j
.text:004118A0                 sub     esp, 1Ch
.text:004118A3                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:004118A8                 mov     [esp+14h], ebx
.text:004118AC                 mov     [esp+18h], esi
.text:004118B0                 jz      short loc_411920
.text:004118B2                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:004118B9
.text:004118B9 loc_4118B9:                             ; CODE XREF: .text:00411927↓j
.text:004118B9                 call    ds:libintl_gettext
.text:004118BF                 mov     dword ptr [esp], 1
.text:004118C6                 mov     edx, [esp+20h]
.text:004118CA                 mov     esi, eax
.text:004118CC                 mov     [esp+4], edx
.text:004118D0                 call    sub_4120D0
.text:004118D5                 mov     dword ptr [esp+4], 5
.text:004118DD                 mov     edx, [esp+24h]
.text:004118E1                 mov     ebx, eax
.text:004118E3                 mov     dword ptr [esp], 0
.text:004118EA                 mov     [esp+8], edx
.text:004118EE                 call    sub_40D8C0
.text:004118F3                 mov     [esp+0Ch], eax
.text:004118F7                 mov     [esp+10h], ebx
.text:004118FB                 mov     [esp+8], esi
.text:004118FF                 mov     dword ptr [esp+4], 0
.text:00411907                 mov     dword ptr [esp], 0
.text:0041190E                 call    sub_4161E0
.text:00411913                 mov     ebx, [esp+14h]
.text:00411917                 mov     esi, [esp+18h]
.text:0041191B                 add     esp, 1Ch
.text:0041191E                 retn
.text:0041191E ; ---------------------------------------------------------------------------
.text:0041191F                 align 10h
.text:00411920
.text:00411920 loc_411920:                             ; CODE XREF: .text:004118B0↑j
.text:00411920                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00411927                 jmp     short loc_4118B9
.text:00411927 ; ---------------------------------------------------------------------------
.text:00411929 aValidArguments db 'Valid arguments are:',0
.text:00411929                                         ; DATA XREF: .text:00411973↓o
.text:00411929                                         ; sub_411AA0+CB↓o
.text:0041193E ; const char aS_1[]
.text:0041193E aS_1            db 0Ah                  ; DATA XREF: .text:004119ED↓o
.text:0041193E                                         ; sub_411AA0:loc_411BD8↓o
.text:0041193E                 db '  - `%s',27h,0
.text:00411948 ; const char aS_2[]
.text:00411948 aS_2            db ', `%s',27h,0        ; DATA XREF: .text:00411A7A↓o
.text:00411948                                         ; sub_411AA0:loc_411C70↓o
.text:0041194F                 align 10h
.text:00411950                 push    ebp
.text:00411951                 push    edi
.text:00411952                 push    esi
.text:00411953                 push    ebx
.text:00411954                 sub     esp, 2Ch
.text:00411957                 mov     ecx, [esp+40h]
.text:0041195B                 mov     dword ptr [esp+1Ch], 0
.text:00411963                 mov     eax, [esp+44h]
.text:00411967                 mov     ebp, [esp+48h]
.text:0041196B                 mov     [esp+28h], ecx
.text:0041196F                 mov     [esp+24h], eax
.text:00411973                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:0041197A                 call    ds:libintl_gettext
.text:00411980                 mov     edx, ds:_iob
.text:00411986                 add     edx, 40h ; '@'
.text:00411989                 mov     [esp], edx
.text:0041198C                 mov     [esp+4], eax
.text:00411990                 call    fprintf
.text:00411995                 mov     dword ptr [esp+20h], 0
.text:0041199D                 mov     edx, [esp+28h]
.text:004119A1                 mov     eax, [edx]
.text:004119A3                 test    eax, eax
.text:004119A5                 jz      short loc_411A25
.text:004119A7                 mov     dword ptr [esp+14h], 0
.text:004119AF                 mov     esi, [esp+24h]
.text:004119B3                 mov     ebx, eax
.text:004119B5                 mov     [esp+18h], esi
.text:004119B9                 lea     esi, [esi+0]
.text:004119C0
.text:004119C0 loc_4119C0:                             ; CODE XREF: .text:00411A23↓j
.text:004119C0                 mov     edi, [esp+20h]
.text:004119C4                 test    edi, edi
.text:004119C6                 jz      short loc_4119E3
.text:004119C8                 cld
.text:004119C9                 mov     edi, [esp+24h]
.text:004119CD                 mov     ecx, ebp
.text:004119CF                 mov     edx, [esp+14h]
.text:004119D3                 mov     esi, [esp+1Ch]
.text:004119D7                 add     edi, edx
.text:004119D9                 cmp     ebp, ebp
.text:004119DB                 repe cmpsb
.text:004119DD                 jz      loc_411A70
.text:004119E3
.text:004119E3 loc_4119E3:                             ; CODE XREF: .text:004119C6↑j
.text:004119E3                 mov     [esp+8], ebx
.text:004119E7                 mov     ecx, ds:_iob
.text:004119ED                 mov     dword ptr [esp+4], offset aS_1 ; "\n  - `%s'"
.text:004119F5                 add     ecx, 40h ; '@'
.text:004119F8                 mov     [esp], ecx
.text:004119FB                 call    fprintf
.text:00411A00                 mov     ebx, [esp+18h]
.text:00411A04                 mov     [esp+1Ch], ebx
.text:00411A08
.text:00411A08 loc_411A08:                             ; CODE XREF: .text:00411A8D↓j
.text:00411A08                 inc     dword ptr [esp+20h]
.text:00411A0C                 mov     eax, [esp+28h]
.text:00411A10                 add     [esp+14h], ebp
.text:00411A14                 mov     edx, [esp+20h]
.text:00411A18                 add     [esp+18h], ebp
.text:00411A1C                 mov     edi, [eax+edx*4]
.text:00411A1F                 test    edi, edi
.text:00411A21                 mov     ebx, edi
.text:00411A23                 jnz     short loc_4119C0
.text:00411A25
.text:00411A25 loc_411A25:                             ; CODE XREF: .text:004119A5↑j
.text:00411A25                 mov     ebx, ds:_iob
.text:00411A2B                 mov     ebp, [ebx+44h]
.text:00411A2E                 dec     ebp
.text:00411A2F                 mov     [ebx+44h], ebp
.text:00411A32                 test    ebp, ebp
.text:00411A34                 js      short loc_411A4D
.text:00411A36                 mov     ecx, ds:_iob
.text:00411A3C                 mov     esi, [ecx+40h]
.text:00411A3F                 mov     byte ptr [esi], 0Ah
.text:00411A42                 inc     dword ptr [ecx+40h]
.text:00411A45                 add     esp, 2Ch
.text:00411A48                 pop     ebx
.text:00411A49                 pop     esi
.text:00411A4A                 pop     edi
.text:00411A4B                 pop     ebp
.text:00411A4C                 retn
.text:00411A4D ; ---------------------------------------------------------------------------
.text:00411A4D
.text:00411A4D loc_411A4D:                             ; CODE XREF: .text:00411A34↑j
.text:00411A4D                 mov     dword ptr [esp+40h], 0Ah
.text:00411A55                 mov     edi, ds:_iob
.text:00411A5B                 add     edi, 40h ; '@'
.text:00411A5E                 mov     [esp+44h], edi
.text:00411A62                 add     esp, 2Ch
.text:00411A65                 pop     ebx
.text:00411A66                 pop     esi
.text:00411A67                 pop     edi
.text:00411A68                 pop     ebp
.text:00411A69                 jmp     _flsbuf
.text:00411A69 ; ---------------------------------------------------------------------------
.text:00411A6E                 align 10h
.text:00411A70
.text:00411A70 loc_411A70:                             ; CODE XREF: .text:004119DD↑j
.text:00411A70                 mov     [esp+8], ebx
.text:00411A74                 mov     esi, ds:_iob
.text:00411A7A                 mov     dword ptr [esp+4], offset aS_2 ; ", `%s'"
.text:00411A82                 add     esi, 40h ; '@'
.text:00411A85                 mov     [esp], esi
.text:00411A88                 call    fprintf
.text:00411A8D                 jmp     loc_411A08
.text:00411A8D ; ---------------------------------------------------------------------------
.text:00411A92                 align 10h
.text:00411AA0
.text:00411AA0 ; =============== S U B R O U T I N E =======================================
.text:00411AA0
.text:00411AA0
.text:00411AA0 ; int __cdecl sub_411AA0(char *, char *, int, int, int, int)
.text:00411AA0 sub_411AA0      proc near               ; CODE XREF: sub_4025F0+B87↑p
.text:00411AA0                                         ; sub_4025F0+BD8↑p ...
.text:00411AA0
.text:00411AA0 Stream          = dword ptr -4Ch
.text:00411AA0 Format          = dword ptr -48h
.text:00411AA0 var_44          = dword ptr -44h
.text:00411AA0 var_40          = byte ptr -40h
.text:00411AA0 var_3C          = dword ptr -3Ch
.text:00411AA0 var_2C          = dword ptr -2Ch
.text:00411AA0 var_28          = dword ptr -28h
.text:00411AA0 var_24          = dword ptr -24h
.text:00411AA0 var_20          = dword ptr -20h
.text:00411AA0 var_1C          = dword ptr -1Ch
.text:00411AA0 var_18          = dword ptr -18h
.text:00411AA0 var_14          = dword ptr -14h
.text:00411AA0 var_10          = dword ptr -10h
.text:00411AA0 var_C           = dword ptr -0Ch
.text:00411AA0 var_8           = dword ptr -8
.text:00411AA0 var_4           = dword ptr -4
.text:00411AA0 arg_0           = dword ptr  4
.text:00411AA0 arg_4           = dword ptr  8
.text:00411AA0 arg_8           = dword ptr  0Ch
.text:00411AA0 arg_C           = dword ptr  10h
.text:00411AA0 arg_10          = dword ptr  14h
.text:00411AA0 arg_14          = dword ptr  18h
.text:00411AA0
.text:00411AA0                 sub     esp, 4Ch
.text:00411AA3                 mov     edx, [esp+4Ch+arg_10]
.text:00411AA7                 mov     [esp+4Ch+var_10], ebx
.text:00411AAB                 mov     ebx, [esp+4Ch+arg_C]
.text:00411AAF                 mov     [esp+4Ch+var_C], esi
.text:00411AB3                 mov     esi, [esp+4Ch+arg_4]
.text:00411AB7                 mov     [esp+4Ch+var_4], ebp
.text:00411ABB                 mov     ebp, [esp+4Ch+arg_8]
.text:00411ABF                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00411AC3                 mov     [esp+4Ch+var_8], edi
.text:00411AC7                 mov     [esp+4Ch+var_44], ebx ; int
.text:00411ACB                 mov     [esp+4Ch+Format], ebp ; int
.text:00411ACF                 mov     [esp+4Ch+Stream], esi ; char *
.text:00411AD2                 call    sub_411780
.text:00411AD7                 test    eax, eax
.text:00411AD9                 mov     edx, eax
.text:00411ADB                 js      short loc_411AF3
.text:00411ADD
.text:00411ADD loc_411ADD:                             ; CODE XREF: sub_411AA0+1AA↓j
.text:00411ADD                 mov     ebx, [esp+4Ch+var_10]
.text:00411AE1                 mov     eax, edx
.text:00411AE3                 mov     esi, [esp+4Ch+var_C]
.text:00411AE7                 mov     edi, [esp+4Ch+var_8]
.text:00411AEB                 mov     ebp, [esp+4Ch+var_4]
.text:00411AEF                 add     esp, 4Ch
.text:00411AF2                 retn
.text:00411AF3 ; ---------------------------------------------------------------------------
.text:00411AF3
.text:00411AF3 loc_411AF3:                             ; CODE XREF: sub_411AA0+3B↑j
.text:00411AF3                 inc     eax
.text:00411AF4                 jz      loc_411C96
.text:00411AFA                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00411B01
.text:00411B01 loc_411B01:                             ; CODE XREF: sub_411AA0+1FD↓j
.text:00411B01                 call    ds:libintl_gettext
.text:00411B07                 mov     [esp+4Ch+Stream], 1 ; int
.text:00411B0E                 mov     edi, [esp+4Ch+arg_0]
.text:00411B12                 mov     [esp+4Ch+var_14], eax
.text:00411B16                 mov     [esp+4Ch+Format], edi ; char *
.text:00411B1A                 call    sub_4120D0
.text:00411B1F                 mov     [esp+4Ch+var_18], eax
.text:00411B23                 mov     [esp+4Ch+var_44], esi ; char *
.text:00411B27                 mov     [esp+4Ch+Format], 5 ; int
.text:00411B2F                 mov     [esp+4Ch+Stream], 0 ; int
.text:00411B36                 call    sub_40D8C0
.text:00411B3B                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:00411B3F                 mov     ecx, [esp+4Ch+var_18]
.text:00411B43                 mov     eax, [esp+4Ch+var_14]
.text:00411B47                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:00411B4F                 mov     [esp+4Ch+var_3C], ecx
.text:00411B53                 mov     [esp+4Ch+var_44], eax ; char *
.text:00411B57                 mov     [esp+4Ch+Stream], 0 ; Code
.text:00411B5E                 call    sub_4161E0
.text:00411B63                 mov     [esp+4Ch+var_20], 0
.text:00411B6B                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:00411B72                 call    ds:libintl_gettext
.text:00411B78                 mov     edx, ds:_iob
.text:00411B7E                 add     edx, 40h ; '@'
.text:00411B81                 mov     [esp+4Ch+Format], eax ; Format
.text:00411B85                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00411B88                 call    fprintf
.text:00411B8D                 mov     [esp+4Ch+var_1C], 0
.text:00411B95                 mov     eax, [ebp+0]
.text:00411B98                 test    eax, eax
.text:00411B9A                 jz      loc_411C21
.text:00411BA0                 mov     [esp+4Ch+var_24], eax
.text:00411BA4                 mov     [esp+4Ch+var_28], ebx
.text:00411BA8                 mov     [esp+4Ch+var_2C], 0
.text:00411BB0
.text:00411BB0 loc_411BB0:                             ; CODE XREF: sub_411AA0+17F↓j
.text:00411BB0                 mov     esi, [esp+4Ch+var_1C]
.text:00411BB4                 test    esi, esi
.text:00411BB6                 jz      short loc_411BD8
.text:00411BB8                 cld
.text:00411BB9                 mov     eax, [esp+4Ch+var_2C]
.text:00411BBD                 mov     edx, [esp+4Ch+arg_10]
.text:00411BC1                 mov     esi, [esp+4Ch+var_20]
.text:00411BC5                 lea     ecx, [eax+ebx]
.text:00411BC8                 mov     edi, ecx
.text:00411BCA                 mov     ecx, [esp+4Ch+arg_10]
.text:00411BCE                 cmp     edx, edx
.text:00411BD0                 repe cmpsb
.text:00411BD2                 jz      loc_411C70
.text:00411BD8
.text:00411BD8 loc_411BD8:                             ; CODE XREF: sub_411AA0+116↑j
.text:00411BD8                 mov     [esp+4Ch+Format], offset aS_1 ; "\n  - `%s'"
.text:00411BE0                 mov     esi, ds:_iob
.text:00411BE6                 mov     ecx, [esp+4Ch+var_24]
.text:00411BEA                 add     esi, 40h ; '@'
.text:00411BED                 mov     [esp+4Ch+var_44], ecx
.text:00411BF1                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00411BF4                 call    fprintf
.text:00411BF9                 mov     edi, [esp+4Ch+var_28]
.text:00411BFD                 mov     [esp+4Ch+var_20], edi
.text:00411C01
.text:00411C01 loc_411C01:                             ; CODE XREF: sub_411AA0+1F1↓j
.text:00411C01                 inc     [esp+4Ch+var_1C]
.text:00411C05                 mov     ecx, [esp+4Ch+arg_10]
.text:00411C09                 add     [esp+4Ch+var_2C], ecx
.text:00411C0D                 mov     esi, [esp+4Ch+var_1C]
.text:00411C11                 add     [esp+4Ch+var_28], ecx
.text:00411C15                 mov     edi, [ebp+esi*4+0]
.text:00411C19                 test    edi, edi
.text:00411C1B                 mov     [esp+4Ch+var_24], edi
.text:00411C1F                 jnz     short loc_411BB0
.text:00411C21
.text:00411C21 loc_411C21:                             ; CODE XREF: sub_411AA0+FA↑j
.text:00411C21                 mov     ebp, ds:_iob
.text:00411C27                 mov     ebx, [ebp+44h]
.text:00411C2A                 dec     ebx
.text:00411C2B                 mov     [ebp+44h], ebx
.text:00411C2E                 test    ebx, ebx
.text:00411C30                 js      short loc_411C4F
.text:00411C32                 mov     edi, ds:_iob
.text:00411C38                 mov     eax, [edi+40h]
.text:00411C3B                 mov     byte ptr [eax], 0Ah
.text:00411C3E                 inc     dword ptr [edi+40h]
.text:00411C41
.text:00411C41 loc_411C41:                             ; CODE XREF: sub_411AA0+1C8↓j
.text:00411C41                 call    [esp+4Ch+arg_14]
.text:00411C45                 mov     edx, 0FFFFFFFFh
.text:00411C4A                 jmp     loc_411ADD
.text:00411C4F ; ---------------------------------------------------------------------------
.text:00411C4F
.text:00411C4F loc_411C4F:                             ; CODE XREF: sub_411AA0+190↑j
.text:00411C4F                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:00411C56                 mov     edx, ds:_iob
.text:00411C5C                 add     edx, 40h ; '@'
.text:00411C5F                 mov     [esp+4Ch+Format], edx ; File
.text:00411C63                 call    _flsbuf
.text:00411C68                 jmp     short loc_411C41
.text:00411C68 ; ---------------------------------------------------------------------------
.text:00411C6A                 align 10h
.text:00411C70
.text:00411C70 loc_411C70:                             ; CODE XREF: sub_411AA0+132↑j
.text:00411C70                 mov     [esp+4Ch+Format], offset aS_2 ; ", `%s'"
.text:00411C78                 mov     edx, ds:_iob
.text:00411C7E                 mov     eax, [esp+4Ch+var_24]
.text:00411C82                 add     edx, 40h ; '@'
.text:00411C85                 mov     [esp+4Ch+var_44], eax
.text:00411C89                 mov     [esp+4Ch+Stream], edx ; Stream
.text:00411C8C                 call    fprintf
.text:00411C91                 jmp     loc_411C01
.text:00411C96 ; ---------------------------------------------------------------------------
.text:00411C96
.text:00411C96 loc_411C96:                             ; CODE XREF: sub_411AA0+54↑j
.text:00411C96                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00411C9D                 jmp     loc_411B01
.text:00411C9D sub_411AA0      endp
.text:00411C9D
.text:00411C9D ; ---------------------------------------------------------------------------
.text:00411CA2                 align 10h
.text:00411CB0                 push    ebp
.text:00411CB1                 push    edi
.text:00411CB2                 push    esi
.text:00411CB3                 push    ebx
.text:00411CB4                 sub     esp, 4
.text:00411CB7                 mov     ecx, [esp+1Ch]
.text:00411CBB                 mov     dword ptr [esp], 0
.text:00411CC2                 mov     ebx, [esp+24h]
.text:00411CC6                 mov     edx, [ecx]
.text:00411CC8                 test    edx, edx
.text:00411CCA                 jz      short loc_411CF5
.text:00411CCC                 cld
.text:00411CCD                 xor     ebp, ebp
.text:00411CCF                 nop
.text:00411CD0
.text:00411CD0 loc_411CD0:                             ; CODE XREF: .text:00411CF3↓j
.text:00411CD0                 mov     edi, [esp+20h]
.text:00411CD4                 mov     ecx, ebx
.text:00411CD6                 mov     esi, [esp+18h]
.text:00411CDA                 add     edi, ebp
.text:00411CDC                 cmp     ebx, ebx
.text:00411CDE                 repe cmpsb
.text:00411CE0                 jz      short loc_411CFD
.text:00411CE2                 inc     dword ptr [esp]
.text:00411CE5                 add     ebp, ebx
.text:00411CE7                 mov     eax, [esp+1Ch]
.text:00411CEB                 mov     ecx, [esp]
.text:00411CEE                 mov     edi, [eax+ecx*4]
.text:00411CF1                 test    edi, edi
.text:00411CF3                 jnz     short loc_411CD0
.text:00411CF5
.text:00411CF5 loc_411CF5:                             ; CODE XREF: .text:00411CCA↑j
.text:00411CF5                 xor     eax, eax
.text:00411CF7
.text:00411CF7 loc_411CF7:                             ; CODE XREF: .text:00411D07↓j
.text:00411CF7                 pop     ebp
.text:00411CF8                 pop     ebx
.text:00411CF9                 pop     esi
.text:00411CFA                 pop     edi
.text:00411CFB                 pop     ebp
.text:00411CFC                 retn
.text:00411CFD ; ---------------------------------------------------------------------------
.text:00411CFD
.text:00411CFD loc_411CFD:                             ; CODE XREF: .text:00411CE0↑j
.text:00411CFD                 mov     esi, [esp]
.text:00411D00                 mov     ebx, [esp+1Ch]
.text:00411D04                 mov     eax, [ebx+esi*4]
.text:00411D07                 jmp     short loc_411CF7
.text:00411D07 ; ---------------------------------------------------------------------------
.text:00411D09                 align 10h
.text:00411D10
.text:00411D10 ; =============== S U B R O U T I N E =======================================
.text:00411D10
.text:00411D10 ; Attributes: noreturn
.text:00411D10
.text:00411D10 sub_411D10      proc near               ; DATA XREF: .data:off_42B110↓o
.text:00411D10
.text:00411D10 Code            = dword ptr -0Ch
.text:00411D10
.text:00411D10                 sub     esp, 0Ch
.text:00411D13                 mov     [esp+0Ch+Code], 1 ; Code
.text:00411D1A                 call    sub_409020
.text:00411D1A sub_411D10      endp
.text:00411D1A
.text:00411D1A ; ---------------------------------------------------------------------------
.text:00411D1F                 db  83h ; ƒ
.text:00411D20                 db 0C4h ; Ä
.text:00411D21                 db  0Ch
.text:00411D22                 db 0C3h ; Ã
.text:00411D23                 align 10h
.text:00411D30
.text:00411D30 ; =============== S U B R O U T I N E =======================================
.text:00411D30
.text:00411D30
.text:00411D30 sub_411D30      proc near               ; CODE XREF: sub_405490+4AF↑p
.text:00411D30
.text:00411D30 var_1C          = dword ptr -1Ch
.text:00411D30 var_18          = dword ptr -18h
.text:00411D30 var_14          = dword ptr -14h
.text:00411D30 var_10          = dword ptr -10h
.text:00411D30 arg_0           = dword ptr  4
.text:00411D30 arg_4           = dword ptr  8
.text:00411D30 arg_8           = dword ptr  0Ch
.text:00411D30
.text:00411D30                 push    edi
.text:00411D31                 push    esi
.text:00411D32                 push    ebx
.text:00411D33                 sub     esp, 10h
.text:00411D36                 mov     esi, [esp+1Ch+arg_4]
.text:00411D3A                 mov     edx, [esp+1Ch+arg_8]
.text:00411D3E                 mov     ebx, [esp+1Ch+arg_0]
.text:00411D42                 test    esi, esi
.text:00411D44                 mov     byte ptr [edx+15h], 0
.text:00411D48                 lea     edi, [edx+15h]
.text:00411D4B                 js      short loc_411DA0
.text:00411D4D                 lea     esi, [esi+0]
.text:00411D50
.text:00411D50 loc_411D50:                             ; CODE XREF: sub_411D30+65↓j
.text:00411D50                 mov     [esp+1Ch+var_1C], ebx
.text:00411D53                 dec     edi
.text:00411D54                 mov     [esp+1Ch+var_18], esi
.text:00411D58                 mov     [esp+1Ch+var_14], 0Ah
.text:00411D60                 mov     [esp+1Ch+var_10], 0
.text:00411D68                 call    sub_4291F0
.text:00411D6D                 add     al, 30h ; '0'
.text:00411D6F                 mov     [edi], al
.text:00411D71                 mov     [esp+1Ch+var_1C], ebx
.text:00411D74                 mov     [esp+1Ch+var_18], esi
.text:00411D78                 mov     [esp+1Ch+var_14], 0Ah
.text:00411D80                 mov     [esp+1Ch+var_10], 0
.text:00411D88                 call    sub_4293B0
.text:00411D8D                 mov     ebx, eax
.text:00411D8F                 mov     esi, edx
.text:00411D91                 mov     eax, edx
.text:00411D93                 or      eax, ebx
.text:00411D95                 jnz     short loc_411D50
.text:00411D97
.text:00411D97 loc_411D97:                             ; CODE XREF: sub_411D30+BB↓j
.text:00411D97                 add     esp, 10h
.text:00411D9A                 mov     eax, edi
.text:00411D9C                 pop     ebx
.text:00411D9D                 pop     esi
.text:00411D9E                 pop     edi
.text:00411D9F                 retn
.text:00411DA0 ; ---------------------------------------------------------------------------
.text:00411DA0
.text:00411DA0 loc_411DA0:                             ; CODE XREF: sub_411D30+1B↑j
.text:00411DA0                                         ; sub_411D30+B5↓j
.text:00411DA0                 mov     [esp+1Ch+var_1C], ebx
.text:00411DA3                 dec     edi
.text:00411DA4                 mov     [esp+1Ch+var_18], esi
.text:00411DA8                 mov     [esp+1Ch+var_14], 0Ah
.text:00411DB0                 mov     [esp+1Ch+var_10], 0
.text:00411DB8                 call    sub_4291F0
.text:00411DBD                 mov     cl, 30h ; '0'
.text:00411DBF                 sub     cl, al
.text:00411DC1                 mov     [edi], cl
.text:00411DC3                 mov     [esp+1Ch+var_1C], ebx
.text:00411DC6                 mov     [esp+1Ch+var_18], esi
.text:00411DCA                 mov     [esp+1Ch+var_14], 0Ah
.text:00411DD2                 mov     [esp+1Ch+var_10], 0
.text:00411DDA                 call    sub_4293B0
.text:00411DDF                 mov     ebx, eax
.text:00411DE1                 mov     esi, edx
.text:00411DE3                 or      edx, ebx
.text:00411DE5                 jnz     short loc_411DA0
.text:00411DE7                 dec     edi
.text:00411DE8                 mov     byte ptr [edi], 2Dh ; '-'
.text:00411DEB                 jmp     short loc_411D97
.text:00411DEB sub_411D30      endp
.text:00411DEB
.text:00411DEB ; ---------------------------------------------------------------------------
.text:00411DED                 align 10h
.text:00411DF0
.text:00411DF0 ; =============== S U B R O U T I N E =======================================
.text:00411DF0
.text:00411DF0
.text:00411DF0 sub_411DF0      proc near               ; CODE XREF: sub_405330+93↑p
.text:00411DF0                                         ; sub_405490+808↑p ...
.text:00411DF0
.text:00411DF0 var_1C          = dword ptr -1Ch
.text:00411DF0 arg_0           = dword ptr  4
.text:00411DF0
.text:00411DF0                 push    edi
.text:00411DF1                 push    esi
.text:00411DF2                 push    ebx
.text:00411DF3                 sub     esp, 10h
.text:00411DF6                 mov     ebx, ds:dword_42C5A0
.text:00411DFC                 mov     esi, [esp+1Ch+arg_0]
.text:00411E00                 test    ebx, ebx
.text:00411E02                 jz      short loc_411E1B
.text:00411E04                 lea     esi, [esi+0]
.text:00411E0A                 lea     edi, [edi+0]
.text:00411E10
.text:00411E10 loc_411E10:                             ; CODE XREF: sub_411DF0+29↓j
.text:00411E10                 cmp     [ebx], esi
.text:00411E12                 jz      short loc_411E62
.text:00411E14                 mov     ebx, [ebx+8]
.text:00411E17                 test    ebx, ebx
.text:00411E19                 jnz     short loc_411E10
.text:00411E1B
.text:00411E1B loc_411E1B:                             ; CODE XREF: sub_411DF0+12↑j
.text:00411E1B                 mov     [esp+1Ch+var_1C], esi
.text:00411E1E                 call    sub_41AA40
.text:00411E23                 mov     [esp+1Ch+var_1C], 0Ch ; size_t
.text:00411E2A                 mov     edi, eax
.text:00411E2C                 call    sub_412420
.text:00411E31                 mov     [eax], esi
.text:00411E33                 xor     edx, edx
.text:00411E35                 mov     ebx, eax
.text:00411E37                 test    edi, edi
.text:00411E39                 jz      short loc_411E47
.text:00411E3B                 mov     edx, [edi]
.text:00411E3D                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00411E40                 call    sub_4125E0
.text:00411E45                 mov     edx, eax
.text:00411E47
.text:00411E47 loc_411E47:                             ; CODE XREF: sub_411DF0+49↑j
.text:00411E47                 mov     [ebx+4], edx
.text:00411E4A                 mov     ecx, ds:dword_42C5A0
.text:00411E50                 mov     eax, edx
.text:00411E52                 mov     [ebx+8], ecx
.text:00411E55                 mov     ds:dword_42C5A0, ebx
.text:00411E5B
.text:00411E5B loc_411E5B:                             ; CODE XREF: sub_411DF0+75↓j
.text:00411E5B                 add     esp, 10h
.text:00411E5E                 pop     ebx
.text:00411E5F                 pop     esi
.text:00411E60                 pop     edi
.text:00411E61                 retn
.text:00411E62 ; ---------------------------------------------------------------------------
.text:00411E62
.text:00411E62 loc_411E62:                             ; CODE XREF: sub_411DF0+22↑j
.text:00411E62                 mov     eax, [ebx+4]
.text:00411E65                 jmp     short loc_411E5B
.text:00411E65 sub_411DF0      endp
.text:00411E65
.text:00411E65 ; ---------------------------------------------------------------------------
.text:00411E67                 align 10h
.text:00411E70                 push    edi
.text:00411E71                 push    esi
.text:00411E72                 push    ebx
.text:00411E73                 sub     esp, 10h
.text:00411E76                 mov     ebx, ds:dword_42C5A0
.text:00411E7C                 mov     esi, [esp+20h]
.text:00411E80                 test    ebx, ebx
.text:00411E82                 jz      short loc_411EA5
.text:00411E84                 lea     esi, [esi+0]
.text:00411E8A                 lea     edi, [edi+0]
.text:00411E90
.text:00411E90 loc_411E90:                             ; CODE XREF: .text:00411EA3↓j
.text:00411E90                 movzx   ecx, byte ptr [esi]
.text:00411E93                 mov     eax, [ebx+4]
.text:00411E96                 cmp     [eax], cl
.text:00411E98                 jz      loc_411F37
.text:00411E9E
.text:00411E9E loc_411E9E:                             ; CODE XREF: .text:00411F4A↓j
.text:00411E9E                 mov     ebx, [ebx+8]
.text:00411EA1                 test    ebx, ebx
.text:00411EA3                 jnz     short loc_411E90
.text:00411EA5
.text:00411EA5 loc_411EA5:                             ; CODE XREF: .text:00411E82↑j
.text:00411EA5                 mov     ebx, ds:dword_42C5B0
.text:00411EAB                 test    ebx, ebx
.text:00411EAD                 jz      short loc_411EC1
.text:00411EAF                 nop
.text:00411EB0
.text:00411EB0 loc_411EB0:                             ; CODE XREF: .text:00411EBF↓j
.text:00411EB0                 movzx   ecx, byte ptr [esi]
.text:00411EB3                 mov     edi, [ebx+4]
.text:00411EB6                 cmp     [edi], cl
.text:00411EB8                 jz      short loc_411F20
.text:00411EBA
.text:00411EBA loc_411EBA:                             ; CODE XREF: .text:00411F33↓j
.text:00411EBA                 mov     ebx, [ebx+8]
.text:00411EBD                 test    ebx, ebx
.text:00411EBF                 jnz     short loc_411EB0
.text:00411EC1
.text:00411EC1 loc_411EC1:                             ; CODE XREF: .text:00411EAD↑j
.text:00411EC1                 mov     [esp], esi
.text:00411EC4                 call    sub_41A9F0
.text:00411EC9                 mov     dword ptr [esp], 0Ch
.text:00411ED0                 mov     edi, eax
.text:00411ED2                 call    sub_412420
.text:00411ED7                 mov     [esp], esi
.text:00411EDA                 mov     ebx, eax
.text:00411EDC                 call    sub_4125E0
.text:00411EE1                 mov     [ebx+4], eax
.text:00411EE4                 test    edi, edi
.text:00411EE6                 jz      short loc_411F07
.text:00411EE8                 mov     esi, ds:dword_42C5A0
.text:00411EEE                 mov     edx, ebx
.text:00411EF0                 mov     ecx, [edi+8]
.text:00411EF3                 mov     [ebx+8], esi
.text:00411EF6                 mov     [ebx], ecx
.text:00411EF8                 mov     ds:dword_42C5A0, ebx
.text:00411EFE
.text:00411EFE loc_411EFE:                             ; CODE XREF: .text:00411F18↓j
.text:00411EFE                                         ; .text:00411F35↓j ...
.text:00411EFE                 add     esp, 10h
.text:00411F01                 mov     eax, edx
.text:00411F03                 pop     ebx
.text:00411F04                 pop     esi
.text:00411F05                 pop     edi
.text:00411F06                 retn
.text:00411F07 ; ---------------------------------------------------------------------------
.text:00411F07
.text:00411F07 loc_411F07:                             ; CODE XREF: .text:00411EE6↑j
.text:00411F07                 mov     edi, ds:dword_42C5B0
.text:00411F0D                 xor     edx, edx
.text:00411F0F                 mov     [ebx+8], edi
.text:00411F12                 mov     ds:dword_42C5B0, ebx
.text:00411F18                 jmp     short loc_411EFE
.text:00411F18 ; ---------------------------------------------------------------------------
.text:00411F1A                 align 10h
.text:00411F20
.text:00411F20 loc_411F20:                             ; CODE XREF: .text:00411EB8↑j
.text:00411F20                 mov     [esp+4], esi
.text:00411F24                 mov     edx, [ebx+4]
.text:00411F27                 mov     [esp], edx
.text:00411F2A                 call    strcmp
.text:00411F2F                 xor     edx, edx
.text:00411F31                 test    eax, eax
.text:00411F33                 jnz     short loc_411EBA
.text:00411F35                 jmp     short loc_411EFE
.text:00411F37 ; ---------------------------------------------------------------------------
.text:00411F37
.text:00411F37 loc_411F37:                             ; CODE XREF: .text:00411E98↑j
.text:00411F37                 mov     [esp+4], esi
.text:00411F3B                 mov     edx, [ebx+4]
.text:00411F3E                 mov     [esp], edx
.text:00411F41                 call    strcmp
.text:00411F46                 test    eax, eax
.text:00411F48                 mov     edx, ebx
.text:00411F4A                 jnz     loc_411E9E
.text:00411F50                 jmp     short loc_411EFE
.text:00411F50 ; ---------------------------------------------------------------------------
.text:00411F52                 align 10h
.text:00411F60
.text:00411F60 ; =============== S U B R O U T I N E =======================================
.text:00411F60
.text:00411F60
.text:00411F60 sub_411F60      proc near               ; CODE XREF: sub_4053D0+93↑p
.text:00411F60                                         ; sub_405490+850↑p
.text:00411F60
.text:00411F60 var_1C          = dword ptr -1Ch
.text:00411F60 arg_0           = dword ptr  4
.text:00411F60
.text:00411F60                 push    edi
.text:00411F61                 push    esi
.text:00411F62                 push    ebx
.text:00411F63                 sub     esp, 10h
.text:00411F66                 mov     ebx, ds:dword_42C5C0
.text:00411F6C                 mov     esi, [esp+1Ch+arg_0]
.text:00411F70                 test    ebx, ebx
.text:00411F72                 jz      short loc_411F8B
.text:00411F74                 lea     esi, [esi+0]
.text:00411F7A                 lea     edi, [edi+0]
.text:00411F80
.text:00411F80 loc_411F80:                             ; CODE XREF: sub_411F60+29↓j
.text:00411F80                 cmp     [ebx], esi
.text:00411F82                 jz      short loc_411FD2
.text:00411F84                 mov     ebx, [ebx+8]
.text:00411F87                 test    ebx, ebx
.text:00411F89                 jnz     short loc_411F80
.text:00411F8B
.text:00411F8B loc_411F8B:                             ; CODE XREF: sub_411F60+12↑j
.text:00411F8B                 mov     [esp+1Ch+var_1C], esi
.text:00411F8E                 call    sub_41A9E0
.text:00411F93                 mov     [esp+1Ch+var_1C], 0Ch ; size_t
.text:00411F9A                 mov     edi, eax
.text:00411F9C                 call    sub_412420
.text:00411FA1                 mov     [eax], esi
.text:00411FA3                 xor     edx, edx
.text:00411FA5                 mov     ebx, eax
.text:00411FA7                 test    edi, edi
.text:00411FA9                 jz      short loc_411FB7
.text:00411FAB                 mov     edx, [edi]
.text:00411FAD                 mov     [esp+1Ch+var_1C], edx ; char *
.text:00411FB0                 call    sub_4125E0
.text:00411FB5                 mov     edx, eax
.text:00411FB7
.text:00411FB7 loc_411FB7:                             ; CODE XREF: sub_411F60+49↑j
.text:00411FB7                 mov     [ebx+4], edx
.text:00411FBA                 mov     ecx, ds:dword_42C5C0
.text:00411FC0                 mov     eax, edx
.text:00411FC2                 mov     [ebx+8], ecx
.text:00411FC5                 mov     ds:dword_42C5C0, ebx
.text:00411FCB
.text:00411FCB loc_411FCB:                             ; CODE XREF: sub_411F60+75↓j
.text:00411FCB                 add     esp, 10h
.text:00411FCE                 pop     ebx
.text:00411FCF                 pop     esi
.text:00411FD0                 pop     edi
.text:00411FD1                 retn
.text:00411FD2 ; ---------------------------------------------------------------------------
.text:00411FD2
.text:00411FD2 loc_411FD2:                             ; CODE XREF: sub_411F60+22↑j
.text:00411FD2                 mov     eax, [ebx+4]
.text:00411FD5                 jmp     short loc_411FCB
.text:00411FD5 sub_411F60      endp
.text:00411FD5
.text:00411FD5 ; ---------------------------------------------------------------------------
.text:00411FD7                 align 10h
.text:00411FE0                 push    edi
.text:00411FE1                 push    esi
.text:00411FE2                 push    ebx
.text:00411FE3                 sub     esp, 10h
.text:00411FE6                 mov     ebx, ds:dword_42C5C0
.text:00411FEC                 mov     esi, [esp+20h]
.text:00411FF0                 test    ebx, ebx
.text:00411FF2                 jz      short loc_412015
.text:00411FF4                 lea     esi, [esi+0]
.text:00411FFA                 lea     edi, [edi+0]
.text:00412000
.text:00412000 loc_412000:                             ; CODE XREF: .text:00412013↓j
.text:00412000                 movzx   ecx, byte ptr [esi]
.text:00412003                 mov     eax, [ebx+4]
.text:00412006                 cmp     [eax], cl
.text:00412008                 jz      loc_4120A7
.text:0041200E
.text:0041200E loc_41200E:                             ; CODE XREF: .text:004120BA↓j
.text:0041200E                 mov     ebx, [ebx+8]
.text:00412011                 test    ebx, ebx
.text:00412013                 jnz     short loc_412000
.text:00412015
.text:00412015 loc_412015:                             ; CODE XREF: .text:00411FF2↑j
.text:00412015                 mov     ebx, ds:dword_42C5D0
.text:0041201B                 test    ebx, ebx
.text:0041201D                 jz      short loc_412031
.text:0041201F                 nop
.text:00412020
.text:00412020 loc_412020:                             ; CODE XREF: .text:0041202F↓j
.text:00412020                 movzx   ecx, byte ptr [esi]
.text:00412023                 mov     edi, [ebx+4]
.text:00412026                 cmp     [edi], cl
.text:00412028                 jz      short loc_412090
.text:0041202A
.text:0041202A loc_41202A:                             ; CODE XREF: .text:004120A3↓j
.text:0041202A                 mov     ebx, [ebx+8]
.text:0041202D                 test    ebx, ebx
.text:0041202F                 jnz     short loc_412020
.text:00412031
.text:00412031 loc_412031:                             ; CODE XREF: .text:0041201D↑j
.text:00412031                 mov     [esp], esi
.text:00412034                 call    sub_41A9D0
.text:00412039                 mov     dword ptr [esp], 0Ch
.text:00412040                 mov     edi, eax
.text:00412042                 call    sub_412420
.text:00412047                 mov     [esp], esi
.text:0041204A                 mov     ebx, eax
.text:0041204C                 call    sub_4125E0
.text:00412051                 mov     [ebx+4], eax
.text:00412054                 test    edi, edi
.text:00412056                 jz      short loc_412077
.text:00412058                 mov     esi, ds:dword_42C5C0
.text:0041205E                 mov     edx, ebx
.text:00412060                 mov     ecx, [edi+8]
.text:00412063                 mov     [ebx+8], esi
.text:00412066                 mov     [ebx], ecx
.text:00412068                 mov     ds:dword_42C5C0, ebx
.text:0041206E
.text:0041206E loc_41206E:                             ; CODE XREF: .text:00412088↓j
.text:0041206E                                         ; .text:004120A5↓j ...
.text:0041206E                 add     esp, 10h
.text:00412071                 mov     eax, edx
.text:00412073                 pop     ebx
.text:00412074                 pop     esi
.text:00412075                 pop     edi
.text:00412076                 retn
.text:00412077 ; ---------------------------------------------------------------------------
.text:00412077
.text:00412077 loc_412077:                             ; CODE XREF: .text:00412056↑j
.text:00412077                 mov     edi, ds:dword_42C5D0
.text:0041207D                 xor     edx, edx
.text:0041207F                 mov     [ebx+8], edi
.text:00412082                 mov     ds:dword_42C5D0, ebx
.text:00412088                 jmp     short loc_41206E
.text:00412088 ; ---------------------------------------------------------------------------
.text:0041208A                 align 10h
.text:00412090
.text:00412090 loc_412090:                             ; CODE XREF: .text:00412028↑j
.text:00412090                 mov     [esp+4], esi
.text:00412094                 mov     edx, [ebx+4]
.text:00412097                 mov     [esp], edx
.text:0041209A                 call    strcmp
.text:0041209F                 xor     edx, edx
.text:004120A1                 test    eax, eax
.text:004120A3                 jnz     short loc_41202A
.text:004120A5                 jmp     short loc_41206E
.text:004120A7 ; ---------------------------------------------------------------------------
.text:004120A7
.text:004120A7 loc_4120A7:                             ; CODE XREF: .text:00412008↑j
.text:004120A7                 mov     [esp+4], esi
.text:004120AB                 mov     edx, [ebx+4]
.text:004120AE                 mov     [esp], edx
.text:004120B1                 call    strcmp
.text:004120B6                 test    eax, eax
.text:004120B8                 mov     edx, ebx
.text:004120BA                 jnz     loc_41200E
.text:004120C0                 jmp     short loc_41206E
.text:004120C0 ; ---------------------------------------------------------------------------
.text:004120C2                 align 10h
.text:004120D0
.text:004120D0 ; =============== S U B R O U T I N E =======================================
.text:004120D0
.text:004120D0
.text:004120D0 ; int __cdecl sub_4120D0(int, char *)
.text:004120D0 sub_4120D0      proc near               ; CODE XREF: sub_40A750+60↑p
.text:004120D0                                         ; sub_40A750+72↑p ...
.text:004120D0
.text:004120D0 var_C           = dword ptr -0Ch
.text:004120D0 var_8           = dword ptr -8
.text:004120D0 var_4           = dword ptr -4
.text:004120D0 arg_0           = dword ptr  4
.text:004120D0 arg_4           = dword ptr  8
.text:004120D0
.text:004120D0                 sub     esp, 0Ch
.text:004120D3                 mov     edx, [esp+0Ch+arg_4]
.text:004120D7                 mov     [esp+0Ch+var_8], 5 ; int
.text:004120DF                 mov     [esp+0Ch+var_4], edx ; char *
.text:004120E3                 mov     edx, [esp+0Ch+arg_0]
.text:004120E7                 mov     [esp+0Ch+var_C], edx ; int
.text:004120EA                 call    sub_40D8C0
.text:004120EF                 add     esp, 0Ch
.text:004120F2                 retn
.text:004120F2 sub_4120D0      endp
.text:004120F2
.text:004120F2 ; ---------------------------------------------------------------------------
.text:004120F3                 align 10h
.text:00412100
.text:00412100 ; =============== S U B R O U T I N E =======================================
.text:00412100
.text:00412100
.text:00412100 ; int __cdecl sub_412100(char *)
.text:00412100 sub_412100      proc near               ; CODE XREF: sub_4025F0+FD6↑p
.text:00412100
.text:00412100 var_C           = dword ptr -0Ch
.text:00412100 var_8           = dword ptr -8
.text:00412100 var_4           = dword ptr -4
.text:00412100 arg_0           = dword ptr  4
.text:00412100
.text:00412100                 sub     esp, 0Ch
.text:00412103                 mov     edx, [esp+0Ch+arg_0]
.text:00412107                 mov     [esp+0Ch+var_8], 5 ; int
.text:0041210F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00412116                 mov     [esp+0Ch+var_4], edx ; char *
.text:0041211A                 call    sub_40D8C0
.text:0041211F                 add     esp, 0Ch
.text:00412122                 retn
.text:00412122 sub_412100      endp
.text:00412122
.text:00412122 ; ---------------------------------------------------------------------------
.text:00412123                 align 10h
.text:00412130
.text:00412130 ; =============== S U B R O U T I N E =======================================
.text:00412130
.text:00412130
.text:00412130 ; int __cdecl sub_412130(int, char *, int)
.text:00412130 sub_412130      proc near               ; CODE XREF: sub_404DF0+E9↑p
.text:00412130
.text:00412130 Str             = dword ptr -2Ch
.text:00412130 var_28          = dword ptr -28h
.text:00412130 var_24          = dword ptr -24h
.text:00412130 var_18          = dword ptr -18h
.text:00412130 var_14          = dword ptr -14h
.text:00412130 arg_0           = dword ptr  4
.text:00412130 arg_4           = dword ptr  8
.text:00412130 arg_8           = dword ptr  0Ch
.text:00412130
.text:00412130                 push    ebp
.text:00412131                 push    edi
.text:00412132                 push    esi
.text:00412133                 push    ebx
.text:00412134                 sub     esp, 1Ch
.text:00412137                 mov     ebp, [esp+2Ch+arg_0]
.text:0041213B                 mov     [esp+2Ch+Str], ebp
.text:0041213E                 call    sub_412220
.text:00412143                 mov     [esp+2Ch+Str], eax ; char *
.text:00412146                 mov     ebx, eax
.text:00412148                 call    sub_412280
.text:0041214D                 mov     [esp+2Ch+var_18], 0
.text:00412155                 mov     ecx, ebx
.text:00412157                 sub     ecx, ebp
.text:00412159                 add     ecx, eax
.text:0041215B                 test    eax, eax
.text:0041215D                 mov     [esp+2Ch+var_14], ecx
.text:00412161                 jz      short loc_412178
.text:00412163                 movzx   eax, byte ptr [eax+ebx-1]
.text:00412168                 cmp     al, 2Fh ; '/'
.text:0041216A                 jz      short loc_412178
.text:0041216C                 cmp     al, 5Ch ; '\'
.text:0041216E                 jz      short loc_412178
.text:00412170                 mov     [esp+2Ch+var_18], 1
.text:00412178
.text:00412178 loc_412178:                             ; CODE XREF: sub_412130+31↑j
.text:00412178                                         ; sub_412130+3A↑j ...
.text:00412178                 mov     ebx, [esp+2Ch+arg_4]
.text:0041217C                 cmp     byte ptr [ebx], 0
.text:0041217F                 jz      short loc_41218B
.text:00412181                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:00412185                 jz      loc_41220F
.text:0041218B
.text:0041218B loc_41218B:                             ; CODE XREF: sub_412130+4F↑j
.text:0041218B                                         ; sub_412130+E2↓j
.text:0041218B                 movzx   eax, byte ptr [ebx]
.text:0041218E                 cmp     al, 2Fh ; '/'
.text:00412190                 jz      short loc_412201
.text:00412192                 cmp     al, 5Ch ; '\'
.text:00412194                 jz      short loc_412201
.text:00412196
.text:00412196 loc_412196:                             ; CODE XREF: sub_412130+DD↓j
.text:00412196                 mov     [esp+2Ch+Str], ebx ; Str
.text:00412199                 call    strlen
.text:0041219E                 mov     esi, eax
.text:004121A0                 mov     edx, [esp+2Ch+var_14]
.text:004121A4                 mov     eax, [esp+2Ch+var_18]
.text:004121A8                 add     edx, eax
.text:004121AA                 lea     edi, [esi+edx+1]
.text:004121AE                 mov     [esp+2Ch+Str], edi ; size_t
.text:004121B1                 call    sub_412420
.text:004121B6                 mov     [esp+2Ch+Str], eax
.text:004121B9                 mov     ecx, [esp+2Ch+var_14]
.text:004121BD                 mov     edi, eax
.text:004121BF                 mov     [esp+2Ch+var_28], ebp
.text:004121C3                 mov     [esp+2Ch+var_24], ecx
.text:004121C7                 call    sub_41A930
.text:004121CC                 mov     byte ptr [eax], 2Fh ; '/'
.text:004121CF                 mov     edx, [esp+2Ch+var_18]
.text:004121D3                 mov     ecx, [esp+2Ch+arg_8]
.text:004121D7                 add     eax, edx
.text:004121D9                 test    ecx, ecx
.text:004121DB                 jz      short loc_4121E4
.text:004121DD                 mov     ebp, [esp+2Ch+arg_8]
.text:004121E1                 mov     [ebp+0], eax
.text:004121E4
.text:004121E4 loc_4121E4:                             ; CODE XREF: sub_412130+AB↑j
.text:004121E4                 mov     [esp+2Ch+var_24], esi
.text:004121E8                 mov     [esp+2Ch+var_28], ebx
.text:004121EC                 mov     [esp+2Ch+Str], eax
.text:004121EF                 call    sub_41A930
.text:004121F4                 mov     byte ptr [eax], 0
.text:004121F7                 add     esp, 1Ch
.text:004121FA                 mov     eax, edi
.text:004121FC                 pop     ebx
.text:004121FD                 pop     esi
.text:004121FE                 pop     edi
.text:004121FF                 pop     ebp
.text:00412200                 retn
.text:00412201 ; ---------------------------------------------------------------------------
.text:00412201
.text:00412201 loc_412201:                             ; CODE XREF: sub_412130+60↑j
.text:00412201                                         ; sub_412130+64↑j ...
.text:00412201                 inc     ebx
.text:00412202                 movzx   eax, byte ptr [ebx]
.text:00412205                 cmp     al, 2Fh ; '/'
.text:00412207                 jz      short loc_412201
.text:00412209                 cmp     al, 5Ch ; '\'
.text:0041220B                 jz      short loc_412201
.text:0041220D                 jmp     short loc_412196
.text:0041220F ; ---------------------------------------------------------------------------
.text:0041220F
.text:0041220F loc_41220F:                             ; CODE XREF: sub_412130+55↑j
.text:0041220F                 add     ebx, 2
.text:00412212                 jmp     loc_41218B
.text:00412212 sub_412130      endp
.text:00412212
.text:00412212 ; ---------------------------------------------------------------------------
.text:00412217                 align 10h
.text:00412220
.text:00412220 ; =============== S U B R O U T I N E =======================================
.text:00412220
.text:00412220
.text:00412220 sub_412220      proc near               ; CODE XREF: sub_404DF0+15C↑p
.text:00412220                                         ; sub_412130+E↑p
.text:00412220
.text:00412220 arg_0           = dword ptr  4
.text:00412220
.text:00412220                 mov     ecx, [esp+arg_0]
.text:00412224                 movzx   eax, byte ptr [ecx]
.text:00412227                 test    al, al
.text:00412229                 jz      short loc_412231
.text:0041222B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0041222F                 jz      short loc_412277
.text:00412231
.text:00412231 loc_412231:                             ; CODE XREF: sub_412220+9↑j
.text:00412231                                         ; sub_412220+5D↓j
.text:00412231                 test    al, al
.text:00412233                 mov     edx, ecx
.text:00412235                 jz      short loc_412250
.text:00412237                 movzx   eax, byte ptr [ecx]
.text:0041223A                 lea     esi, [esi+0]
.text:00412240
.text:00412240 loc_412240:                             ; CODE XREF: sub_412220+2E↓j
.text:00412240                 cmp     al, 2Fh ; '/'
.text:00412242                 jz      short loc_412253
.text:00412244                 cmp     al, 5Ch ; '\'
.text:00412246                 jz      short loc_412253
.text:00412248
.text:00412248 loc_412248:                             ; CODE XREF: sub_412220+45↓j
.text:00412248                 inc     edx
.text:00412249                 movzx   eax, byte ptr [edx]
.text:0041224C                 test    al, al
.text:0041224E                 jnz     short loc_412240
.text:00412250
.text:00412250 loc_412250:                             ; CODE XREF: sub_412220+15↑j
.text:00412250                                         ; sub_412220+50↓j ...
.text:00412250                 mov     eax, ecx
.text:00412252                 retn
.text:00412253 ; ---------------------------------------------------------------------------
.text:00412253
.text:00412253 loc_412253:                             ; CODE XREF: sub_412220+22↑j
.text:00412253                                         ; sub_412220+26↑j ...
.text:00412253                 inc     edx
.text:00412254                 movzx   eax, byte ptr [edx]
.text:00412257                 cmp     al, 2Fh ; '/'
.text:00412259                 jz      short loc_412253
.text:0041225B                 cmp     al, 5Ch ; '\'
.text:0041225D                 jz      short loc_412253
.text:0041225F                 test    al, al
.text:00412261                 jz      short loc_412267
.text:00412263                 mov     ecx, edx
.text:00412265                 jmp     short loc_412248
.text:00412267 ; ---------------------------------------------------------------------------
.text:00412267
.text:00412267 loc_412267:                             ; CODE XREF: sub_412220+41↑j
.text:00412267                 movzx   eax, byte ptr [ecx]
.text:0041226A                 cmp     al, 2Fh ; '/'
.text:0041226C                 jz      short loc_412272
.text:0041226E                 cmp     al, 5Ch ; '\'
.text:00412270                 jnz     short loc_412250
.text:00412272
.text:00412272 loc_412272:                             ; CODE XREF: sub_412220+4C↑j
.text:00412272                 lea     ecx, [edx-1]
.text:00412275                 jmp     short loc_412250
.text:00412277 ; ---------------------------------------------------------------------------
.text:00412277
.text:00412277 loc_412277:                             ; CODE XREF: sub_412220+F↑j
.text:00412277                 add     ecx, 2
.text:0041227A                 movzx   eax, byte ptr [ecx]
.text:0041227D                 jmp     short loc_412231
.text:0041227D sub_412220      endp
.text:0041227D
.text:0041227D ; ---------------------------------------------------------------------------
.text:0041227F                 align 10h
.text:00412280
.text:00412280 ; =============== S U B R O U T I N E =======================================
.text:00412280
.text:00412280
.text:00412280 ; int __cdecl sub_412280(char *)
.text:00412280 sub_412280      proc near               ; CODE XREF: sub_412130+18↑p
.text:00412280
.text:00412280 Str             = dword ptr -0Ch
.text:00412280 arg_0           = dword ptr  4
.text:00412280
.text:00412280                 push    ebx
.text:00412281                 sub     esp, 8
.text:00412284                 mov     ebx, [esp+0Ch+arg_0]
.text:00412288                 mov     [esp+0Ch+Str], ebx ; Str
.text:0041228B                 call    strlen
.text:00412290                 cmp     eax, 1
.text:00412293                 jbe     short loc_4122B0
.text:00412295                 movzx   edx, byte ptr [eax+ebx-1]
.text:0041229A                 cmp     dl, 2Fh ; '/'
.text:0041229D                 jz      short loc_4122B5
.text:0041229F                 cmp     dl, 5Ch ; '\'
.text:004122A2                 jz      short loc_4122B5
.text:004122A4                 lea     esi, [esi+0]
.text:004122AA                 lea     edi, [edi+0]
.text:004122B0
.text:004122B0 loc_4122B0:                             ; CODE XREF: sub_412280+13↑j
.text:004122B0                                         ; sub_412280+39↓j ...
.text:004122B0                 add     esp, 8
.text:004122B3                 pop     ebx
.text:004122B4                 retn
.text:004122B5 ; ---------------------------------------------------------------------------
.text:004122B5
.text:004122B5 loc_4122B5:                             ; CODE XREF: sub_412280+1D↑j
.text:004122B5                                         ; sub_412280+22↑j ...
.text:004122B5                 dec     eax
.text:004122B6                 cmp     eax, 1
.text:004122B9                 jbe     short loc_4122B0
.text:004122BB                 movzx   edx, byte ptr [eax+ebx-1]
.text:004122C0                 cmp     dl, 2Fh ; '/'
.text:004122C3                 jz      short loc_4122B5
.text:004122C5                 cmp     dl, 5Ch ; '\'
.text:004122C8                 jz      short loc_4122B5
.text:004122CA                 jmp     short loc_4122B0
.text:004122CA sub_412280      endp
.text:004122CA
.text:004122CA ; ---------------------------------------------------------------------------
.text:004122CC                 align 10h
.text:004122D0
.text:004122D0 ; =============== S U B R O U T I N E =======================================
.text:004122D0
.text:004122D0
.text:004122D0 ; int __cdecl sub_4122D0(char *, int)
.text:004122D0 sub_4122D0      proc near               ; CODE XREF: sub_404C90+2A↑p
.text:004122D0
.text:004122D0 Block           = dword ptr -1Ch
.text:004122D0 lpString1       = dword ptr -18h
.text:004122D0 var_14          = dword ptr -14h
.text:004122D0 arg_0           = dword ptr  4
.text:004122D0 arg_4           = dword ptr  8
.text:004122D0
.text:004122D0                 push    ebp
.text:004122D1                 push    edi
.text:004122D2                 mov     edi, 7FFFFFFFh
.text:004122D7                 push    esi
.text:004122D8                 push    ebx
.text:004122D9                 sub     esp, 0Ch
.text:004122DC                 mov     eax, [esp+1Ch+arg_4]
.text:004122E0                 mov     ebp, [esp+1Ch+arg_0]
.text:004122E4                 cmp     eax, 7FFFFFFEh
.text:004122E9                 ja      short loc_4122F0
.text:004122EB                 lea     edi, [eax+1]
.text:004122EE                 mov     esi, esi
.text:004122F0
.text:004122F0 loc_4122F0:                             ; CODE XREF: sub_4122D0+19↑j
.text:004122F0                                         ; sub_4122D0+56↓j ...
.text:004122F0                 mov     [esp+1Ch+Block], edi ; size_t
.text:004122F3                 call    sub_412420
.text:004122F8                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:004122FC                 mov     esi, eax
.text:004122FE                 mov     [esp+1Ch+var_14], edi
.text:00412302                 mov     [esp+1Ch+Block], ebp ; char *
.text:00412305                 call    sub_418F30
.text:0041230A                 test    eax, eax
.text:0041230C                 mov     ebx, eax
.text:0041230E                 js      short loc_412345
.text:00412310
.text:00412310 loc_412310:                             ; CODE XREF: sub_4122D0+7D↓j
.text:00412310                 cmp     ebx, edi
.text:00412312                 jb      short loc_412337
.text:00412314                 mov     [esp+1Ch+Block], esi ; Block
.text:00412317                 call    free
.text:0041231C                 cmp     edi, 3FFFFFFFh
.text:00412322                 ja      short loc_412328
.text:00412324                 add     edi, edi
.text:00412326                 jmp     short loc_4122F0
.text:00412328 ; ---------------------------------------------------------------------------
.text:00412328
.text:00412328 loc_412328:                             ; CODE XREF: sub_4122D0+52↑j
.text:00412328                 cmp     edi, 7FFFFFFEh
.text:0041232E                 ja      short loc_412369
.text:00412330                 mov     edi, 7FFFFFFFh
.text:00412335                 jmp     short loc_4122F0
.text:00412337 ; ---------------------------------------------------------------------------
.text:00412337
.text:00412337 loc_412337:                             ; CODE XREF: sub_4122D0+42↑j
.text:00412337                 mov     byte ptr [ebx+esi], 0
.text:0041233B                 mov     eax, esi
.text:0041233D
.text:0041233D loc_41233D:                             ; CODE XREF: sub_4122D0+97↓j
.text:0041233D                 add     esp, 0Ch
.text:00412340                 pop     ebx
.text:00412341                 pop     esi
.text:00412342                 pop     edi
.text:00412343                 pop     ebp
.text:00412344                 retn
.text:00412345 ; ---------------------------------------------------------------------------
.text:00412345
.text:00412345 loc_412345:                             ; CODE XREF: sub_4122D0+3E↑j
.text:00412345                 call    _errno
.text:0041234A                 cmp     dword ptr [eax], 22h ; '"'
.text:0041234D                 jz      short loc_412310
.text:0041234F                 call    _errno
.text:00412354                 mov     edi, [eax]
.text:00412356                 mov     [esp+1Ch+Block], esi ; Block
.text:00412359                 call    free
.text:0041235E                 call    _errno
.text:00412363                 mov     [eax], edi
.text:00412365                 xor     eax, eax
.text:00412367                 jmp     short loc_41233D
.text:00412369 ; ---------------------------------------------------------------------------
.text:00412369
.text:00412369 loc_412369:                             ; CODE XREF: sub_4122D0+5E↑j
.text:00412369                 call    sub_415320
.text:00412369 sub_4122D0      endp
.text:00412369
.text:00412369 ; ---------------------------------------------------------------------------
.text:0041236E                 align 10h
.text:00412370
.text:00412370 ; =============== S U B R O U T I N E =======================================
.text:00412370
.text:00412370
.text:00412370 sub_412370      proc near               ; CODE XREF: sub_404500+200↑p
.text:00412370                                         ; sub_404500+2E4↑p ...
.text:00412370
.text:00412370 var_1C          = dword ptr -1Ch
.text:00412370 var_18          = dword ptr -18h
.text:00412370 var_14          = dword ptr -14h
.text:00412370 var_10          = dword ptr -10h
.text:00412370 arg_0           = dword ptr  4
.text:00412370 arg_4           = dword ptr  8
.text:00412370 arg_8           = dword ptr  0Ch
.text:00412370
.text:00412370                 push    edi
.text:00412371                 push    esi
.text:00412372                 push    ebx
.text:00412373                 sub     esp, 10h
.text:00412376                 mov     edx, [esp+1Ch+arg_8]
.text:0041237A                 mov     ebx, [esp+1Ch+arg_0]
.text:0041237E                 mov     esi, [esp+1Ch+arg_4]
.text:00412382                 lea     edi, [edx+15h]
.text:00412385                 mov     byte ptr [edx+15h], 0
.text:00412389                 lea     esi, [esi+0]
.text:00412390
.text:00412390 loc_412390:                             ; CODE XREF: sub_412370+63↓j
.text:00412390                 mov     [esp+1Ch+var_1C], ebx
.text:00412393                 dec     edi
.text:00412394                 mov     [esp+1Ch+var_18], esi
.text:00412398                 mov     [esp+1Ch+var_14], 0Ah
.text:004123A0                 mov     [esp+1Ch+var_10], 0
.text:004123A8                 call    sub_429070
.text:004123AD                 add     al, 30h ; '0'
.text:004123AF                 mov     [edi], al
.text:004123B1                 mov     [esp+1Ch+var_1C], ebx
.text:004123B4                 mov     [esp+1Ch+var_18], esi
.text:004123B8                 mov     [esp+1Ch+var_14], 0Ah
.text:004123C0                 mov     [esp+1Ch+var_10], 0
.text:004123C8                 call    sub_429510
.text:004123CD                 mov     ebx, eax
.text:004123CF                 mov     esi, edx
.text:004123D1                 or      edx, ebx
.text:004123D3                 jnz     short loc_412390
.text:004123D5                 add     esp, 10h
.text:004123D8                 mov     eax, edi
.text:004123DA                 pop     ebx
.text:004123DB                 pop     esi
.text:004123DC                 pop     edi
.text:004123DD                 retn
.text:004123DD sub_412370      endp
.text:004123DD
.text:004123DD ; ---------------------------------------------------------------------------
.text:004123DE                 align 10h
.text:004123E0
.text:004123E0 ; =============== S U B R O U T I N E =======================================
.text:004123E0
.text:004123E0
.text:004123E0 sub_4123E0      proc near               ; CODE XREF: sub_401B10+158↑p
.text:004123E0                                         ; sub_40A5D0+88↑p
.text:004123E0
.text:004123E0 Size            = dword ptr -0Ch
.text:004123E0 var_4           = dword ptr -4
.text:004123E0 arg_0           = dword ptr  4
.text:004123E0 arg_4           = dword ptr  8
.text:004123E0
.text:004123E0                 sub     esp, 0Ch
.text:004123E3                 xor     edx, edx
.text:004123E5                 mov     ecx, [esp+0Ch+arg_4]
.text:004123E9                 mov     [esp+0Ch+var_4], ebx
.text:004123ED                 mov     eax, 0FFFFFFFFh
.text:004123F2                 mov     ebx, [esp+0Ch+arg_0]
.text:004123F6                 div     ecx
.text:004123F8                 cmp     eax, ebx
.text:004123FA                 jb      short loc_412419
.text:004123FC                 mov     edx, ebx
.text:004123FE                 imul    edx, ecx
.text:00412401                 mov     [esp+0Ch+Size], edx ; Size
.text:00412404                 call    malloc
.text:00412409                 test    eax, eax
.text:0041240B                 jz      short loc_412415
.text:0041240D
.text:0041240D loc_41240D:                             ; CODE XREF: sub_4123E0+37↓j
.text:0041240D                 mov     ebx, [esp+0Ch+var_4]
.text:00412411                 add     esp, 0Ch
.text:00412414                 retn
.text:00412415 ; ---------------------------------------------------------------------------
.text:00412415
.text:00412415 loc_412415:                             ; CODE XREF: sub_4123E0+2B↑j
.text:00412415                 test    ebx, ebx
.text:00412417                 jz      short loc_41240D
.text:00412419
.text:00412419 loc_412419:                             ; CODE XREF: sub_4123E0+1A↑j
.text:00412419                 call    sub_415320
.text:00412419 sub_4123E0      endp
.text:00412419
.text:00412419 ; ---------------------------------------------------------------------------
.text:0041241E                 align 10h
.text:00412420
.text:00412420 ; =============== S U B R O U T I N E =======================================
.text:00412420
.text:00412420
.text:00412420 ; int __cdecl sub_412420(size_t)
.text:00412420 sub_412420      proc near               ; CODE XREF: sub_4025F0+C02↑p
.text:00412420                                         ; sub_403810+159↑p ...
.text:00412420
.text:00412420 Size            = dword ptr -0Ch
.text:00412420 var_4           = dword ptr -4
.text:00412420 arg_0           = dword ptr  4
.text:00412420
.text:00412420                 sub     esp, 0Ch
.text:00412423                 mov     [esp+0Ch+var_4], ebx
.text:00412427                 mov     ebx, [esp+0Ch+arg_0]
.text:0041242B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0041242E                 call    malloc
.text:00412433                 test    eax, eax
.text:00412435                 jz      short loc_412440
.text:00412437
.text:00412437 loc_412437:                             ; CODE XREF: sub_412420+22↓j
.text:00412437                 mov     ebx, [esp+0Ch+var_4]
.text:0041243B                 add     esp, 0Ch
.text:0041243E                 retn
.text:0041243E ; ---------------------------------------------------------------------------
.text:0041243F                 align 10h
.text:00412440
.text:00412440 loc_412440:                             ; CODE XREF: sub_412420+15↑j
.text:00412440                 test    ebx, ebx
.text:00412442                 jz      short loc_412437
.text:00412444                 call    sub_415320
.text:00412444 sub_412420      endp
.text:00412444
.text:00412444 ; ---------------------------------------------------------------------------
.text:00412449                 align 10h
.text:00412450
.text:00412450 ; =============== S U B R O U T I N E =======================================
.text:00412450
.text:00412450
.text:00412450 ; int __cdecl sub_412450(void *, int, int)
.text:00412450 sub_412450      proc near               ; CODE XREF: sub_404500+756↑p
.text:00412450                                         ; sub_40A5D0+49↑p ...
.text:00412450
.text:00412450 Block           = dword ptr -1Ch
.text:00412450 Size            = dword ptr -18h
.text:00412450 var_8           = dword ptr -8
.text:00412450 var_4           = dword ptr -4
.text:00412450 arg_0           = dword ptr  4
.text:00412450 arg_4           = dword ptr  8
.text:00412450 arg_8           = dword ptr  0Ch
.text:00412450
.text:00412450                 sub     esp, 1Ch
.text:00412453                 xor     edx, edx
.text:00412455                 mov     eax, 0FFFFFFFFh
.text:0041245A                 mov     [esp+1Ch+var_8], ebx
.text:0041245E                 mov     ecx, [esp+1Ch+arg_0]
.text:00412462                 mov     ebx, [esp+1Ch+arg_8]
.text:00412466                 mov     [esp+1Ch+var_4], esi
.text:0041246A                 mov     esi, [esp+1Ch+arg_4]
.text:0041246E                 div     ebx
.text:00412470                 cmp     eax, esi
.text:00412472                 jb      short loc_4124A4
.text:00412474                 mov     [esp+1Ch+Block], ecx ; Block
.text:00412477                 mov     edx, esi
.text:00412479                 imul    edx, ebx
.text:0041247C                 mov     [esp+1Ch+Size], edx ; Size
.text:00412480                 call    realloc
.text:00412485                 test    eax, eax
.text:00412487                 mov     ecx, eax
.text:00412489                 jz      short loc_4124A0
.text:0041248B
.text:0041248B loc_41248B:                             ; CODE XREF: sub_412450+52↓j
.text:0041248B                 mov     ebx, [esp+1Ch+var_8]
.text:0041248F                 mov     eax, ecx
.text:00412491                 mov     esi, [esp+1Ch+var_4]
.text:00412495                 add     esp, 1Ch
.text:00412498                 retn
.text:00412498 ; ---------------------------------------------------------------------------
.text:00412499                 align 10h
.text:004124A0
.text:004124A0 loc_4124A0:                             ; CODE XREF: sub_412450+39↑j
.text:004124A0                 test    esi, esi
.text:004124A2                 jz      short loc_41248B
.text:004124A4
.text:004124A4 loc_4124A4:                             ; CODE XREF: sub_412450+22↑j
.text:004124A4                 call    sub_415320
.text:004124A4 sub_412450      endp
.text:004124A4
.text:004124A4 ; ---------------------------------------------------------------------------
.text:004124A9                 align 10h
.text:004124B0
.text:004124B0 ; =============== S U B R O U T I N E =======================================
.text:004124B0
.text:004124B0
.text:004124B0 ; int __cdecl sub_4124B0(void *, size_t)
.text:004124B0 sub_4124B0      proc near               ; CODE XREF: sub_40DCD0+5B↑p
.text:004124B0
.text:004124B0 Block           = dword ptr -0Ch
.text:004124B0 Size            = dword ptr -8
.text:004124B0 var_4           = dword ptr -4
.text:004124B0 arg_0           = dword ptr  4
.text:004124B0 arg_4           = dword ptr  8
.text:004124B0
.text:004124B0                 sub     esp, 0Ch
.text:004124B3                 mov     edx, [esp+0Ch+arg_0]
.text:004124B7                 mov     [esp+0Ch+var_4], ebx
.text:004124BB                 mov     ebx, [esp+0Ch+arg_4]
.text:004124BF                 mov     [esp+0Ch+Block], edx ; Block
.text:004124C2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004124C6                 call    realloc
.text:004124CB                 test    eax, eax
.text:004124CD                 jz      short loc_4124D7
.text:004124CF
.text:004124CF loc_4124CF:                             ; CODE XREF: sub_4124B0+29↓j
.text:004124CF                 mov     ebx, [esp+0Ch+var_4]
.text:004124D3                 add     esp, 0Ch
.text:004124D6                 retn
.text:004124D7 ; ---------------------------------------------------------------------------
.text:004124D7
.text:004124D7 loc_4124D7:                             ; CODE XREF: sub_4124B0+1D↑j
.text:004124D7                 test    ebx, ebx
.text:004124D9                 jz      short loc_4124CF
.text:004124DB                 call    sub_415320
.text:004124DB sub_4124B0      endp
.text:004124DB
.text:004124E0 ; ---------------------------------------------------------------------------
.text:004124E0                 jmp     sub_412630
.text:004124E0 ; ---------------------------------------------------------------------------
.text:004124E5                 align 10h
.text:004124F0                 sub     esp, 0Ch
.text:004124F3                 mov     edx, [esp+14h]
.text:004124F7                 mov     dword ptr [esp+8], 1
.text:004124FF                 mov     [esp+4], edx
.text:00412503                 mov     edx, [esp+10h]
.text:00412507                 mov     [esp], edx
.text:0041250A                 call    sub_412630
.text:0041250F                 add     esp, 0Ch
.text:00412512                 retn
.text:00412512 ; ---------------------------------------------------------------------------
.text:00412513                 align 10h
.text:00412520                 sub     esp, 1Ch
.text:00412523                 mov     [esp+18h], ebx
.text:00412527                 mov     ebx, [esp+20h]
.text:0041252B                 mov     [esp], ebx
.text:0041252E                 call    malloc
.text:00412533                 test    eax, eax
.text:00412535                 jz      short loc_412553
.text:00412537
.text:00412537 loc_412537:                             ; CODE XREF: .text:00412555↓j
.text:00412537                 mov     [esp+8], ebx
.text:0041253B                 mov     dword ptr [esp+4], 0
.text:00412543                 mov     [esp], eax
.text:00412546                 call    memset
.text:0041254B                 mov     ebx, [esp+18h]
.text:0041254F                 add     esp, 1Ch
.text:00412552                 retn
.text:00412553 ; ---------------------------------------------------------------------------
.text:00412553
.text:00412553 loc_412553:                             ; CODE XREF: .text:00412535↑j
.text:00412553                 test    ebx, ebx
.text:00412555                 jz      short loc_412537
.text:00412557                 call    sub_415320
.text:00412557 ; ---------------------------------------------------------------------------
.text:0041255C                 align 10h
.text:00412560                 sub     esp, 0Ch
.text:00412563                 xor     edx, edx
.text:00412565                 mov     ecx, [esp+14h]
.text:00412569                 mov     [esp+8], ebx
.text:0041256D                 mov     eax, 0FFFFFFFFh
.text:00412572                 mov     ebx, [esp+10h]
.text:00412576                 div     ecx
.text:00412578                 cmp     eax, ebx
.text:0041257A                 jb      short loc_412598
.text:0041257C                 mov     [esp+4], ecx
.text:00412580                 mov     [esp], ebx
.text:00412583                 call    calloc
.text:00412588                 test    eax, eax
.text:0041258A                 jz      short loc_412594
.text:0041258C
.text:0041258C loc_41258C:                             ; CODE XREF: .text:00412596↓j
.text:0041258C                 mov     ebx, [esp+8]
.text:00412590                 add     esp, 0Ch
.text:00412593                 retn
.text:00412594 ; ---------------------------------------------------------------------------
.text:00412594
.text:00412594 loc_412594:                             ; CODE XREF: .text:0041258A↑j
.text:00412594                 test    ebx, ebx
.text:00412596                 jz      short loc_41258C
.text:00412598
.text:00412598 loc_412598:                             ; CODE XREF: .text:0041257A↑j
.text:00412598                 call    sub_415320
.text:00412598 ; ---------------------------------------------------------------------------
.text:0041259D                 align 10h
.text:004125A0                 sub     esp, 1Ch
.text:004125A3                 mov     [esp+18h], ebx
.text:004125A7                 mov     ebx, [esp+24h]
.text:004125AB                 mov     [esp], ebx
.text:004125AE                 call    malloc
.text:004125B3                 test    eax, eax
.text:004125B5                 mov     edx, eax
.text:004125B7                 jz      short loc_4125D5
.text:004125B9
.text:004125B9 loc_4125B9:                             ; CODE XREF: .text:004125D7↓j
.text:004125B9                 mov     [esp+8], ebx
.text:004125BD                 mov     ecx, [esp+20h]
.text:004125C1                 mov     [esp], edx
.text:004125C4                 mov     [esp+4], ecx
.text:004125C8                 call    memcpy
.text:004125CD                 mov     ebx, [esp+18h]
.text:004125D1                 add     esp, 1Ch
.text:004125D4                 retn
.text:004125D5 ; ---------------------------------------------------------------------------
.text:004125D5
.text:004125D5 loc_4125D5:                             ; CODE XREF: .text:004125B7↑j
.text:004125D5                 test    ebx, ebx
.text:004125D7                 jz      short loc_4125B9
.text:004125D9                 call    sub_415320
.text:004125D9 ; ---------------------------------------------------------------------------
.text:004125DE                 align 10h
.text:004125E0
.text:004125E0 ; =============== S U B R O U T I N E =======================================
.text:004125E0
.text:004125E0
.text:004125E0 ; int __cdecl sub_4125E0(char *)
.text:004125E0 sub_4125E0      proc near               ; CODE XREF: sub_403810+3F↑p
.text:004125E0                                         ; sub_403B20+37↑p ...
.text:004125E0
.text:004125E0 Str             = dword ptr -1Ch
.text:004125E0 Src             = dword ptr -18h
.text:004125E0 Size            = dword ptr -14h
.text:004125E0 var_8           = dword ptr -8
.text:004125E0 var_4           = dword ptr -4
.text:004125E0 arg_0           = dword ptr  4
.text:004125E0
.text:004125E0                 sub     esp, 1Ch
.text:004125E3                 mov     [esp+1Ch+var_4], esi
.text:004125E7                 mov     esi, [esp+1Ch+arg_0]
.text:004125EB                 mov     [esp+1Ch+var_8], ebx
.text:004125EF                 mov     [esp+1Ch+Str], esi ; Str
.text:004125F2                 call    strlen
.text:004125F7                 lea     ebx, [eax+1]
.text:004125FA                 mov     [esp+1Ch+Str], ebx ; Size
.text:004125FD                 call    malloc
.text:00412602                 test    eax, eax
.text:00412604                 jz      short loc_412622
.text:00412606
.text:00412606 loc_412606:                             ; CODE XREF: sub_4125E0+44↓j
.text:00412606                 mov     [esp+1Ch+Size], ebx ; Size
.text:0041260A                 mov     [esp+1Ch+Src], esi ; Src
.text:0041260E                 mov     [esp+1Ch+Str], eax ; void *
.text:00412611                 call    memcpy
.text:00412616                 mov     ebx, [esp+1Ch+var_8]
.text:0041261A                 mov     esi, [esp+1Ch+var_4]
.text:0041261E                 add     esp, 1Ch
.text:00412621                 retn
.text:00412622 ; ---------------------------------------------------------------------------
.text:00412622
.text:00412622 loc_412622:                             ; CODE XREF: sub_4125E0+24↑j
.text:00412622                 test    ebx, ebx
.text:00412624                 jz      short loc_412606
.text:00412626                 call    sub_415320
.text:00412626 sub_4125E0      endp
.text:00412626
.text:00412626 ; ---------------------------------------------------------------------------
.text:0041262B                 align 10h
.text:00412630
.text:00412630 ; =============== S U B R O U T I N E =======================================
.text:00412630
.text:00412630
.text:00412630 ; int __cdecl sub_412630(void *, int, int)
.text:00412630 sub_412630      proc near               ; CODE XREF: .text:004124E0↑j
.text:00412630                                         ; .text:0041250A↑p
.text:00412630
.text:00412630 Block           = dword ptr -1Ch
.text:00412630 Size            = dword ptr -18h
.text:00412630 var_C           = dword ptr -0Ch
.text:00412630 var_8           = dword ptr -8
.text:00412630 var_4           = dword ptr -4
.text:00412630 arg_0           = dword ptr  4
.text:00412630 arg_4           = dword ptr  8
.text:00412630 arg_8           = dword ptr  0Ch
.text:00412630
.text:00412630                 sub     esp, 1Ch
.text:00412633                 mov     [esp+1Ch+var_8], esi
.text:00412637                 mov     esi, [esp+1Ch+arg_0]
.text:0041263B                 mov     [esp+1Ch+var_4], edi
.text:0041263F                 mov     edi, [esp+1Ch+arg_4]
.text:00412643                 test    esi, esi
.text:00412645                 mov     [esp+1Ch+var_C], ebx
.text:00412649                 mov     ecx, [edi]
.text:0041264B                 mov     ebx, [esp+1Ch+arg_8]
.text:0041264F                 jz      short loc_412690
.text:00412651                 xor     edx, edx
.text:00412653                 mov     eax, 7FFFFFFFh
.text:00412658                 div     ebx
.text:0041265A                 cmp     eax, ecx
.text:0041265C                 jb      short loc_412689
.text:0041265E                 add     ecx, ecx
.text:00412660
.text:00412660 loc_412660:                             ; CODE XREF: sub_412630+62↓j
.text:00412660                                         ; sub_412630+71↓j ...
.text:00412660                 mov     [edi], ecx
.text:00412662                 imul    ebx, ecx
.text:00412665                 mov     [esp+1Ch+Block], esi ; Block
.text:00412668                 mov     [esp+1Ch+Size], ebx ; Size
.text:0041266C                 call    realloc
.text:00412671                 test    eax, eax
.text:00412673                 jz      short loc_412685
.text:00412675
.text:00412675 loc_412675:                             ; CODE XREF: sub_412630+57↓j
.text:00412675                 mov     ebx, [esp+1Ch+var_C]
.text:00412679                 mov     esi, [esp+1Ch+var_8]
.text:0041267D                 mov     edi, [esp+1Ch+var_4]
.text:00412681                 add     esp, 1Ch
.text:00412684                 retn
.text:00412685 ; ---------------------------------------------------------------------------
.text:00412685
.text:00412685 loc_412685:                             ; CODE XREF: sub_412630+43↑j
.text:00412685                 test    ebx, ebx
.text:00412687                 jz      short loc_412675
.text:00412689
.text:00412689 loc_412689:                             ; CODE XREF: sub_412630+2C↑j
.text:00412689                 call    sub_415320
.text:00412689 ; ---------------------------------------------------------------------------
.text:0041268E                 align 10h
.text:00412690
.text:00412690 loc_412690:                             ; CODE XREF: sub_412630+1F↑j
.text:00412690                 test    ecx, ecx
.text:00412692                 jnz     short loc_412660
.text:00412694                 xor     edx, edx
.text:00412696                 mov     eax, 40h ; '@'
.text:0041269B                 div     ebx
.text:0041269D                 test    eax, eax
.text:0041269F                 mov     ecx, eax
.text:004126A1                 jnz     short loc_412660
.text:004126A3                 mov     ecx, 1
.text:004126A8                 jmp     short loc_412660
.text:004126A8 sub_412630      endp
.text:004126A8
.text:004126A8 ; ---------------------------------------------------------------------------
.text:004126AA                 align 10h
.text:004126B0 byte_4126B0     db 0                    ; DATA XREF: sub_4126F0+377↓r
.text:004126B1 aKmgtpezy       db 'KMGTPEZY.',0        ; DATA XREF: sub_4126F0+37↓o
.text:004126BB                 db 0                    ; DATA XREF: sub_4126F0+8D↓o
.text:004126BC ; const char a0lf[]
.text:004126BC a0lf            db '%.0Lf',0            ; DATA XREF: sub_4126F0+2B6↓o
.text:004126C2 ; const char a1lf[]
.text:004126C2 a1lf            db '%.1Lf',0            ; DATA XREF: sub_4126F0+584↓o
.text:004126C8 flt_4126C8      dd 1.8446744e19         ; DATA XREF: sub_4126F0:loc_412B90↓r
.text:004126C8                                         ; sub_4126F0:loc_412B9B↓r ...
.text:004126CC                 align 10h
.text:004126D0 tbyte_4126D0    dt 1.8446744073709551615e19
.text:004126D0                                         ; DATA XREF: sub_4126F0+23E↓r
.text:004126D0                                         ; sub_4126F0+51A↓r ...
.text:004126DA                 align 10h
.text:004126E0 tbyte_4126E0    dt 10.0                 ; DATA XREF: sub_4126F0+5E4↓r
.text:004126E0                                         ; sub_4126F0:loc_412D40↓r
.text:004126EA                 align 10h
.text:004126F0
.text:004126F0 ; =============== S U B R O U T I N E =======================================
.text:004126F0
.text:004126F0
.text:004126F0 ; int __cdecl sub_4126F0(int, int, char *Buffer, int, int, int, int, int)
.text:004126F0 sub_4126F0      proc near               ; CODE XREF: sub_403C30+427↑p
.text:004126F0                                         ; sub_404500+27D↑p ...
.text:004126F0
.text:004126F0 var_C4          = qword ptr -0C4h
.text:004126F0 var_BC          = tbyte ptr -0BCh
.text:004126F0 var_B0          = dword ptr -0B0h
.text:004126F0 var_9C          = tbyte ptr -9Ch
.text:004126F0 var_8C          = dword ptr -8Ch
.text:004126F0 var_88          = dword ptr -88h
.text:004126F0 var_80          = dword ptr -80h
.text:004126F0 var_7C          = tbyte ptr -7Ch
.text:004126F0 var_64          = dword ptr -64h
.text:004126F0 var_60          = dword ptr -60h
.text:004126F0 var_5C          = dword ptr -5Ch
.text:004126F0 var_58          = dword ptr -58h
.text:004126F0 Size            = dword ptr -54h
.text:004126F0 Src             = dword ptr -50h
.text:004126F0 var_4C          = dword ptr -4Ch
.text:004126F0 var_48          = dword ptr -48h
.text:004126F0 var_44          = dword ptr -44h
.text:004126F0 var_40          = dword ptr -40h
.text:004126F0 var_3C          = dword ptr -3Ch
.text:004126F0 var_38          = dword ptr -38h
.text:004126F0 var_34          = dword ptr -34h
.text:004126F0 var_30          = dword ptr -30h
.text:004126F0 var_2C          = qword ptr -2Ch
.text:004126F0 var_24          = qword ptr -24h
.text:004126F0 arg_0           = dword ptr  4
.text:004126F0 arg_4           = dword ptr  8
.text:004126F0 Buffer          = dword ptr  0Ch
.text:004126F0 arg_C           = dword ptr  10h
.text:004126F0 arg_10          = dword ptr  14h
.text:004126F0 arg_14          = dword ptr  18h
.text:004126F0 arg_18          = dword ptr  1Ch
.text:004126F0 arg_1C          = dword ptr  20h
.text:004126F0
.text:004126F0                 push    ebp
.text:004126F1                 push    edi
.text:004126F2                 push    esi
.text:004126F3                 push    ebx
.text:004126F4                 sub     esp, 0ACh
.text:004126FA                 mov     ecx, [esp+0BCh+arg_18]
.text:00412701                 mov     [esp+0BCh+var_44], 0FFFFFFFFh
.text:00412709                 mov     eax, [esp+0BCh+arg_C]
.text:00412710                 mov     edi, [esp+0BCh+arg_0]
.text:00412717                 mov     dword ptr [esp+0BCh+var_2C], ecx
.text:0041271E                 mov     esi, [esp+0BCh+arg_4]
.text:00412725                 xor     ecx, ecx
.text:00412727                 mov     [esp+0BCh+Src], (offset aKmgtpezy+8) ; "."
.text:0041272F                 and     eax, 3
.text:00412732                 mov     ebx, [esp+0BCh+arg_1C]
.text:00412739                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00412741                 mov     dword ptr [esp+0BCh+var_24], edi
.text:00412748                 mov     ebp, [esp+0BCh+Buffer]
.text:0041274F                 mov     dword ptr [esp+0BCh+var_24+4], esi
.text:00412756                 mov     edi, [esp+0BCh+arg_14]
.text:0041275D                 mov     dword ptr [esp+0BCh+var_2C+4], ebx
.text:00412764                 mov     esi, [esp+0BCh+arg_10]
.text:0041276B                 setnz   cl
.text:0041276E                 mov     [esp+0BCh+var_30], eax
.text:00412775                 mov     [esp+0BCh+Size], 1
.text:0041277D                 mov     [esp+0BCh+var_5C], offset byte_4126BB
.text:00412785                 dec     ecx
.text:00412786                 and     ecx, 0FFFFFFE8h
.text:00412789                 add     ecx, 400h
.text:0041278F                 mov     [esp+0BCh+var_34], ecx
.text:00412796                 call    localeconv
.text:0041279B                 mov     edx, [eax]
.text:0041279D                 mov     ebx, eax
.text:0041279F                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:004127A2                 call    strlen
.text:004127A7                 lea     ecx, [eax-1]
.text:004127AA                 cmp     ecx, 1
.text:004127AD                 ja      short loc_4127B9
.text:004127AF                 mov     [esp+0BCh+Size], eax
.text:004127B3                 mov     ecx, [ebx]
.text:004127B5                 mov     [esp+0BCh+Src], ecx
.text:004127B9
.text:004127B9 loc_4127B9:                             ; CODE XREF: sub_4126F0+BD↑j
.text:004127B9                 mov     eax, [ebx+8]
.text:004127BC                 mov     edx, [ebx+4]
.text:004127BF                 mov     [esp+0BCh+var_58], eax
.text:004127C3                 mov     dword ptr [esp+0BCh+var_BC], edx ; Str
.text:004127C6                 call    strlen
.text:004127CB                 cmp     eax, 2
.text:004127CE                 ja      short loc_4127D7
.text:004127D0                 mov     ecx, [ebx+4]
.text:004127D3                 mov     [esp+0BCh+var_5C], ecx
.text:004127D7
.text:004127D7 loc_4127D7:                             ; CODE XREF: sub_4126F0+DE↑j
.text:004127D7                 cmp     dword ptr [esp+0BCh+var_2C+4], edi
.text:004127DE                 lea     ebx, [ebp+74h]
.text:004127E1                 mov     [esp+0BCh+var_4C], ebx
.text:004127E5                 mov     [esp+0BCh+var_48], ebx
.text:004127E9                 ja      loc_413128
.text:004127EF                 jb      short loc_4127FE
.text:004127F1                 cmp     dword ptr [esp+0BCh+var_2C], esi
.text:004127F8                 ja      loc_413128
.text:004127FE
.text:004127FE loc_4127FE:                             ; CODE XREF: sub_4126F0+FF↑j
.text:004127FE                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:00412801                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00412808                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:0041280F                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:00412813                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00412817                 mov     [esp+0BCh+var_B0], ecx
.text:0041281B                 call    sub_429070
.text:00412820                 mov     ebx, edx
.text:00412822                 or      ebx, eax
.text:00412824                 jnz     loc_4128D0
.text:0041282A                 mov     dword ptr [esp+0BCh+var_BC], esi
.text:0041282D                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:00412834                 mov     ebx, dword ptr [esp+0BCh+var_2C+4]
.text:0041283B                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0041283F                 mov     dword ptr [esp+0BCh+var_BC+8], edx
.text:00412843                 mov     [esp+0BCh+var_B0], ebx
.text:00412847                 call    sub_429510
.text:0041284C                 mov     [esp+0BCh+var_B0], edx
.text:00412850                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:00412857                 mov     ecx, [esp+0BCh+var_B0]
.text:0041285B                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:0041285F                 mov     eax, dword ptr [esp+0BCh+var_24]
.text:00412866                 imul    ebx, ecx
.text:00412869                 mul     dword ptr [esp+0BCh+var_BC+8]
.text:0041286D                 mov     ecx, edx
.text:0041286F                 add     ecx, ebx
.text:00412871                 mov     [esp+0BCh+var_3C], eax
.text:00412878                 mov     edx, dword ptr [esp+0BCh+var_24+4]
.text:0041287F                 mov     ebx, dword ptr [esp+0BCh+var_BC+8]
.text:00412883                 imul    edx, ebx
.text:00412886                 mov     ebx, [esp+0BCh+var_3C]
.text:0041288D                 add     ecx, edx
.text:0041288F                 mov     [esp+0BCh+var_38], ecx
.text:00412896                 mov     eax, [esp+0BCh+var_38]
.text:0041289D                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004128A0                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004128A4                 call    sub_429510
.text:004128A9                 mov     ebx, dword ptr [esp+0BCh+var_24+4]
.text:004128B0                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004128B7                 xor     ebx, edx
.text:004128B9                 xor     eax, ecx
.text:004128BB                 or      ebx, eax
.text:004128BD                 jz      loc_412D98
.text:004128C3                 lea     esi, [esi+0]
.text:004128C9                 lea     edi, [edi+0]
.text:004128D0
.text:004128D0 loc_4128D0:                             ; CODE XREF: sub_4126F0+134↑j
.text:004128D0                                         ; sub_4126F0+A3C↓j ...
.text:004128D0                 fild    [esp+0BCh+var_2C]
.text:004128D7                 mov     edx, dword ptr [esp+0BCh+var_2C+4]
.text:004128DE                 test    edx, edx
.text:004128E0                 js      loc_412D8D
.text:004128E6
.text:004128E6 loc_4128E6:                             ; CODE XREF: sub_4126F0+6A3↓j
.text:004128E6                 fild    [esp+0BCh+var_24]
.text:004128ED                 mov     ecx, dword ptr [esp+0BCh+var_24+4]
.text:004128F4                 test    ecx, ecx
.text:004128F6                 js      loc_412D82
.text:004128FC
.text:004128FC loc_4128FC:                             ; CODE XREF: sub_4126F0+698↓j
.text:004128FC                 push    edi
.text:004128FD                 push    esi
.text:004128FE                 fild    [esp+0C4h+var_C4]
.text:00412901                 add     esp, 8
.text:00412904                 test    edi, edi
.text:00412906                 js      loc_412D77
.text:0041290C
.text:0041290C loc_41290C:                             ; CODE XREF: sub_4126F0+68D↓j
.text:0041290C                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00412914                 fdivrp  st(2), st
.text:00412916                 fmulp   st(1), st
.text:00412918                 fld     st
.text:0041291A                 fstp    [esp+0BCh+var_7C]
.text:0041291E                 jnz     loc_412BA6
.text:00412924                 cmp     [esp+0BCh+var_30], 1
.text:0041292C                 jz      short loc_4129A0
.text:0041292E                 fld     ds:tbyte_4126D0
.text:00412934                 fucomp  st(1)
.text:00412936                 fnstsw  ax
.text:00412938                 sahf
.text:00412939                 jbe     short loc_4129A0
.text:0041293B                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:0041293E                 xor     ebx, ebx
.text:00412940                 call    sub_429640
.text:00412945                 mov     edi, edx
.text:00412947                 xor     ecx, ecx
.text:00412949                 mov     edx, [esp+0BCh+var_30]
.text:00412950                 mov     esi, eax
.text:00412952                 test    edx, edx
.text:00412954                 jnz     short loc_41297C
.text:00412956                 push    edi
.text:00412957                 push    esi
.text:00412958                 fild    [esp+0C4h+var_C4]
.text:0041295B                 add     esp, 8
.text:0041295E                 test    edi, edi
.text:00412960                 js      loc_412B9B
.text:00412966
.text:00412966 loc_412966:                             ; CODE XREF: sub_4126F0+4B1↓j
.text:00412966                 fld     [esp+0BCh+var_7C]
.text:0041296A                 fxch    st(1)
.text:0041296C                 fucompp
.text:0041296E                 fnstsw  ax
.text:00412970                 sahf
.text:00412971                 jp      short loc_412975
.text:00412973                 jz      short loc_41297C
.text:00412975
.text:00412975 loc_412975:                             ; CODE XREF: sub_4126F0+281↑j
.text:00412975                 mov     ecx, 1
.text:0041297A                 xor     ebx, ebx
.text:0041297C
.text:0041297C loc_41297C:                             ; CODE XREF: sub_4126F0+264↑j
.text:0041297C                                         ; sub_4126F0+283↑j
.text:0041297C                 mov     edx, esi
.text:0041297E                 add     edx, ecx
.text:00412980                 mov     esi, edi
.text:00412982                 adc     esi, ebx
.text:00412984                 push    esi
.text:00412985                 push    edx
.text:00412986                 fild    [esp+0C4h+var_C4]
.text:00412989                 add     esp, 8
.text:0041298C                 test    esi, esi
.text:0041298E                 js      loc_412B90
.text:00412994                 lea     esi, [esi+0]
.text:0041299A                 lea     edi, [edi+0]
.text:004129A0
.text:004129A0 loc_4129A0:                             ; CODE XREF: sub_4126F0+23C↑j
.text:004129A0                                         ; sub_4126F0+249↑j ...
.text:004129A0                 fstp    [esp+0BCh+var_BC+8]
.text:004129A4                 xor     esi, esi
.text:004129A6                 mov     dword ptr [esp+0BCh+var_BC+4], offset a0lf ; "%.0Lf"
.text:004129AE                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:004129B1                 call    sprintf
.text:004129B6                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:004129B9                 call    strlen
.text:004129BE                 mov     ebx, eax
.text:004129C0
.text:004129C0 loc_4129C0:                             ; CODE XREF: sub_4126F0+5C7↓j
.text:004129C0                                         ; sub_4126F0+5D2↓j
.text:004129C0                 mov     dword ptr [esp+0BCh+var_BC+8], ebx ; Size
.text:004129C4                 mov     edi, [esp+0BCh+var_4C]
.text:004129C8                 mov     dword ptr [esp+0BCh+var_BC+4], ebp ; Src
.text:004129CC                 sub     edi, ebx
.text:004129CE                 mov     [esp+0BCh+var_48], edi
.text:004129D2                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:004129D5                 call    memmove
.text:004129DA                 mov     ebp, [esp+0BCh+var_48]
.text:004129DE                 add     ebx, ebp
.text:004129E0                 sub     ebx, esi
.text:004129E2
.text:004129E2 loc_4129E2:                             ; CODE XREF: sub_4126F0+97E↓j
.text:004129E2                 test    byte ptr [esp+0BCh+arg_C], 4
.text:004129EA                 jnz     loc_412B61
.text:004129F0
.text:004129F0 loc_4129F0:                             ; CODE XREF: sub_4126F0+49B↓j
.text:004129F0                 cmp     byte ptr [esp+0BCh+arg_C], 0
.text:004129F8                 jns     loc_412AB0
.text:004129FE                 mov     esi, [esp+0BCh+var_44]
.text:00412A02                 test    esi, esi
.text:00412A04                 js      loc_412AC6
.text:00412A0A
.text:00412A0A loc_412A0A:                             ; CODE XREF: sub_4126F0+419↓j
.text:00412A0A                                         ; sub_4126F0+44B↓j ...
.text:00412A0A                 mov     edi, [esp+0BCh+arg_C]
.text:00412A11                 and     edi, 100h
.text:00412A17                 or      edi, [esp+0BCh+var_44]
.text:00412A1B                 jz      short loc_412A40
.text:00412A1D                 test    byte ptr [esp+0BCh+arg_C], 40h
.text:00412A25                 jz      short loc_412A40
.text:00412A27                 mov     esi, [esp+0BCh+var_4C]
.text:00412A2B                 mov     byte ptr [esi], 20h ; ' '
.text:00412A2E                 inc     esi
.text:00412A2F                 mov     [esp+0BCh+var_4C], esi
.text:00412A33                 lea     esi, [esi+0]
.text:00412A39                 lea     edi, [edi+0]
.text:00412A40
.text:00412A40 loc_412A40:                             ; CODE XREF: sub_4126F0+32B↑j
.text:00412A40                                         ; sub_4126F0+335↑j
.text:00412A40                 mov     ecx, [esp+0BCh+var_44]
.text:00412A44                 test    ecx, ecx
.text:00412A46                 jz      short loc_412A70
.text:00412A48                 mov     eax, [esp+0BCh+var_4C]
.text:00412A4C                 inc     [esp+0BCh+var_4C]
.text:00412A50                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00412A58                 jnz     short loc_412A63
.text:00412A5A                 cmp     [esp+0BCh+var_44], 1
.text:00412A5F                 mov     dl, 6Bh ; 'k'
.text:00412A61                 jz      short loc_412A6E
.text:00412A63
.text:00412A63 loc_412A63:                             ; CODE XREF: sub_4126F0+368↑j
.text:00412A63                 mov     ebx, [esp+0BCh+var_44]
.text:00412A67                 movzx   edx, ds:byte_4126B0[ebx]
.text:00412A6E
.text:00412A6E loc_412A6E:                             ; CODE XREF: sub_4126F0+371↑j
.text:00412A6E                 mov     [eax], dl
.text:00412A70
.text:00412A70 loc_412A70:                             ; CODE XREF: sub_4126F0+356↑j
.text:00412A70                 test    [esp+0BCh+arg_C], 100h
.text:00412A7B                 jz      short loc_412AB0
.text:00412A7D                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00412A85                 jz      short loc_412A9C
.text:00412A87                 mov     edx, [esp+0BCh+var_44]
.text:00412A8B                 test    edx, edx
.text:00412A8D                 jz      short loc_412A9C
.text:00412A8F                 mov     ebp, [esp+0BCh+var_4C]
.text:00412A93                 mov     byte ptr [ebp+0], 69h ; 'i'
.text:00412A97                 inc     ebp
.text:00412A98                 mov     [esp+0BCh+var_4C], ebp
.text:00412A9C
.text:00412A9C loc_412A9C:                             ; CODE XREF: sub_4126F0+395↑j
.text:00412A9C                                         ; sub_4126F0+39D↑j
.text:00412A9C                 mov     eax, [esp+0BCh+var_4C]
.text:00412AA0                 mov     byte ptr [eax], 42h ; 'B'
.text:00412AA3                 inc     eax
.text:00412AA4                 mov     [esp+0BCh+var_4C], eax
.text:00412AA8                 nop
.text:00412AA9                 lea     esi, [esi+0]
.text:00412AB0
.text:00412AB0 loc_412AB0:                             ; CODE XREF: sub_4126F0+308↑j
.text:00412AB0                                         ; sub_4126F0+38B↑j
.text:00412AB0                 mov     edi, [esp+0BCh+var_4C]
.text:00412AB4                 mov     byte ptr [edi], 0
.text:00412AB7                 mov     eax, [esp+0BCh+var_48]
.text:00412ABB                 add     esp, 0ACh
.text:00412AC1                 pop     ebx
.text:00412AC2                 pop     esi
.text:00412AC3                 pop     edi
.text:00412AC4                 pop     ebp
.text:00412AC5                 retn
.text:00412AC6 ; ---------------------------------------------------------------------------
.text:00412AC6
.text:00412AC6 loc_412AC6:                             ; CODE XREF: sub_4126F0+314↑j
.text:00412AC6                 mov     [esp+0BCh+var_88], 0
.text:00412ACE                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00412AD5                 cmp     [esp+0BCh+var_88], ebp
.text:00412AD9                 mov     [esp+0BCh+var_44], 0
.text:00412AE1                 mov     [esp+0BCh+var_8C], 1
.text:00412AE9                 jnb     short loc_412B4F
.text:00412AEB
.text:00412AEB loc_412AEB:                             ; CODE XREF: sub_4126F0+46A↓j
.text:00412AEB                 mov     esi, [esp+0BCh+var_34]
.text:00412AF2                 xor     edi, edi
.text:00412AF4                 lea     esi, [esi+0]
.text:00412AFA                 lea     edi, [edi+0]
.text:00412B00
.text:00412B00 loc_412B00:                             ; CODE XREF: sub_4126F0+449↓j
.text:00412B00                                         ; sub_4126F0+458↓j
.text:00412B00                 inc     [esp+0BCh+var_44]
.text:00412B04                 cmp     [esp+0BCh+var_44], 8
.text:00412B09                 jz      loc_412A0A
.text:00412B0F                 mov     eax, [esp+0BCh+var_8C]
.text:00412B13                 mov     ebp, [esp+0BCh+var_8C]
.text:00412B17                 mov     ebx, [esp+0BCh+var_88]
.text:00412B1B                 mul     esi
.text:00412B1D                 imul    ebp, edi
.text:00412B20                 imul    ebx, esi
.text:00412B23                 mov     ecx, eax
.text:00412B25                 add     edx, ebp
.text:00412B27                 lea     ebp, [ebx+edx]
.text:00412B2A                 cmp     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00412B31                 mov     [esp+0BCh+var_8C], ecx
.text:00412B35                 mov     [esp+0BCh+var_88], ebp
.text:00412B39                 jb      short loc_412B00
.text:00412B3B                 ja      loc_412A0A
.text:00412B41                 cmp     ecx, dword ptr [esp+0BCh+var_2C]
.text:00412B48                 jb      short loc_412B00
.text:00412B4A                 jmp     loc_412A0A
.text:00412B4F ; ---------------------------------------------------------------------------
.text:00412B4F
.text:00412B4F loc_412B4F:                             ; CODE XREF: sub_4126F0+3F9↑j
.text:00412B4F                 mov     ecx, dword ptr [esp+0BCh+var_2C]
.text:00412B56                 cmp     [esp+0BCh+var_8C], ecx
.text:00412B5A                 jb      short loc_412AEB
.text:00412B5C                 jmp     loc_412A0A
.text:00412B61 ; ---------------------------------------------------------------------------
.text:00412B61
.text:00412B61 loc_412B61:                             ; CODE XREF: sub_4126F0+2FA↑j
.text:00412B61                 mov     eax, [esp+0BCh+var_48]
.text:00412B65                 mov     edx, [esp+0BCh+var_5C]
.text:00412B69                 mov     edi, [esp+0BCh+var_58]
.text:00412B6D                 sub     ebx, eax
.text:00412B6F                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; size_t
.text:00412B73                 mov     ebx, [esp+0BCh+var_48]
.text:00412B77                 mov     [esp+0BCh+var_B0], edx ; char *
.text:00412B7B                 mov     dword ptr [esp+0BCh+var_BC+8], edi ; int
.text:00412B7F                 mov     dword ptr [esp+0BCh+var_BC], ebx ; void *
.text:00412B82                 call    sub_413440
.text:00412B87                 mov     [esp+0BCh+var_48], eax
.text:00412B8B                 jmp     loc_4129F0
.text:00412B90 ; ---------------------------------------------------------------------------
.text:00412B90
.text:00412B90 loc_412B90:                             ; CODE XREF: sub_4126F0+29E↑j
.text:00412B90                 fadd    ds:flt_4126C8
.text:00412B96                 jmp     loc_4129A0
.text:00412B9B ; ---------------------------------------------------------------------------
.text:00412B9B
.text:00412B9B loc_412B9B:                             ; CODE XREF: sub_4126F0+270↑j
.text:00412B9B                 fadd    ds:flt_4126C8
.text:00412BA1                 jmp     loc_412966
.text:00412BA6 ; ---------------------------------------------------------------------------
.text:00412BA6
.text:00412BA6 loc_412BA6:                             ; CODE XREF: sub_4126F0+22E↑j
.text:00412BA6                 fstp    st
.text:00412BA8                 mov     [esp+0BCh+var_44], 0
.text:00412BB0                 mov     ebx, [esp+0BCh+var_34]
.text:00412BB7                 xor     eax, eax
.text:00412BB9                 push    eax
.text:00412BBA                 fld1
.text:00412BBC                 push    ebx
.text:00412BBD                 fild    [esp+0C4h+var_C4]
.text:00412BC0                 add     esp, 8
.text:00412BC3                 lea     esi, [esi+0]
.text:00412BC9                 lea     edi, [edi+0]
.text:00412BD0
.text:00412BD0 loc_412BD0:                             ; CODE XREF: sub_4126F0+500↓j
.text:00412BD0                 fld     [esp+0BCh+var_7C]
.text:00412BD4                 fxch    st(2)
.text:00412BD6                 fmul    st, st(1)
.text:00412BD8                 inc     [esp+0BCh+var_44]
.text:00412BDC                 fld     st
.text:00412BDE                 fmul    st, st(2)
.text:00412BE0                 fxch    st(3)
.text:00412BE2                 fucomp  st(3)
.text:00412BE4                 fnstsw  ax
.text:00412BE6                 fstp    st(2)
.text:00412BE8                 sahf
.text:00412BE9                 jb      short loc_412BF2
.text:00412BEB                 cmp     [esp+0BCh+var_44], 8
.text:00412BF0                 jl      short loc_412BD0
.text:00412BF2
.text:00412BF2 loc_412BF2:                             ; CODE XREF: sub_4126F0+4F9↑j
.text:00412BF2                 fstp    st
.text:00412BF4                 fld     [esp+0BCh+var_7C]
.text:00412BF8                 cmp     [esp+0BCh+var_30], 1
.text:00412C00                 fdivrp  st(1), st
.text:00412C02                 fld     st
.text:00412C04                 fstp    [esp+0BCh+var_7C]
.text:00412C08                 jz      short loc_412C70
.text:00412C0A                 fld     ds:tbyte_4126D0
.text:00412C10                 fucomp  st(1)
.text:00412C12                 fnstsw  ax
.text:00412C14                 sahf
.text:00412C15                 jbe     short loc_412C70
.text:00412C17                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00412C1A                 xor     ebx, ebx
.text:00412C1C                 call    sub_429640
.text:00412C21                 mov     edi, edx
.text:00412C23                 xor     ecx, ecx
.text:00412C25                 mov     edx, [esp+0BCh+var_30]
.text:00412C2C                 mov     esi, eax
.text:00412C2E                 test    edx, edx
.text:00412C30                 jnz     short loc_412C58
.text:00412C32                 push    edi
.text:00412C33                 push    esi
.text:00412C34                 fild    [esp+0C4h+var_C4]
.text:00412C37                 add     esp, 8
.text:00412C3A                 test    edi, edi
.text:00412C3C                 js      loc_412D6C
.text:00412C42
.text:00412C42 loc_412C42:                             ; CODE XREF: sub_4126F0+682↓j
.text:00412C42                 fld     [esp+0BCh+var_7C]
.text:00412C46                 fxch    st(1)
.text:00412C48                 fucompp
.text:00412C4A                 fnstsw  ax
.text:00412C4C                 sahf
.text:00412C4D                 jp      short loc_412C51
.text:00412C4F                 jz      short loc_412C58
.text:00412C51
.text:00412C51 loc_412C51:                             ; CODE XREF: sub_4126F0+55D↑j
.text:00412C51                 mov     ecx, 1
.text:00412C56                 xor     ebx, ebx
.text:00412C58
.text:00412C58 loc_412C58:                             ; CODE XREF: sub_4126F0+540↑j
.text:00412C58                                         ; sub_4126F0+55F↑j
.text:00412C58                 mov     edx, esi
.text:00412C5A                 add     edx, ecx
.text:00412C5C                 mov     esi, edi
.text:00412C5E                 adc     esi, ebx
.text:00412C60                 push    esi
.text:00412C61                 push    edx
.text:00412C62                 fild    [esp+0C4h+var_C4]
.text:00412C65                 add     esp, 8
.text:00412C68                 test    esi, esi
.text:00412C6A                 js      loc_412D61
.text:00412C70
.text:00412C70 loc_412C70:                             ; CODE XREF: sub_4126F0+518↑j
.text:00412C70                                         ; sub_4126F0+525↑j ...
.text:00412C70                 fstp    [esp+0BCh+var_BC+8]
.text:00412C74                 mov     dword ptr [esp+0BCh+var_BC+4], offset a1lf ; "%.1Lf"
.text:00412C7C                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Buffer
.text:00412C7F                 call    sprintf
.text:00412C84                 mov     dword ptr [esp+0BCh+var_BC], ebp ; Str
.text:00412C87                 call    strlen
.text:00412C8C                 mov     ebx, eax
.text:00412C8E                 mov     esi, [esp+0BCh+Size]
.text:00412C92                 mov     eax, [esp+0BCh+Size]
.text:00412C96                 inc     esi
.text:00412C97                 add     eax, 2
.text:00412C9A                 test    byte ptr [esp+0BCh+arg_C], 20h
.text:00412CA2                 jnz     short loc_412CAB
.text:00412CA4                 mov     eax, [esp+0BCh+Size]
.text:00412CA8                 add     eax, 3
.text:00412CAB
.text:00412CAB loc_412CAB:                             ; CODE XREF: sub_4126F0+5B2↑j
.text:00412CAB                 cmp     eax, ebx
.text:00412CAD                 jb      short loc_412CC8
.text:00412CAF                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00412CB7                 jz      loc_4129C0
.text:00412CBD                 cmp     byte ptr [ebx+ebp-1], 30h ; '0'
.text:00412CC2                 jnz     loc_4129C0
.text:00412CC8
.text:00412CC8 loc_412CC8:                             ; CODE XREF: sub_4126F0+5BD↑j
.text:00412CC8                 cmp     [esp+0BCh+var_30], 1
.text:00412CD0                 fld     [esp+0BCh+var_7C]
.text:00412CD4                 fld     ds:tbyte_4126E0
.text:00412CDA                 fmulp   st(1), st
.text:00412CDC                 jz      short loc_412D40
.text:00412CDE                 fld     ds:tbyte_4126D0
.text:00412CE4                 fucomp  st(1)
.text:00412CE6                 fnstsw  ax
.text:00412CE8                 sahf
.text:00412CE9                 jbe     short loc_412D40
.text:00412CEB                 fld     st
.text:00412CED                 fstp    [esp+0BCh+var_BC] ; _TBYTE
.text:00412CF0                 xor     ebx, ebx
.text:00412CF2                 fstp    [esp+0BCh+var_9C]
.text:00412CF6                 call    sub_429640
.text:00412CFB                 fld     [esp+0BCh+var_9C]
.text:00412CFF                 mov     edi, edx
.text:00412D01                 xor     ecx, ecx
.text:00412D03                 mov     edx, [esp+0BCh+var_30]
.text:00412D0A                 mov     esi, eax
.text:00412D0C                 test    edx, edx
.text:00412D0E                 jnz     short loc_412D5D
.text:00412D10                 push    edi
.text:00412D11                 push    esi
.text:00412D12                 fild    [esp+0C4h+var_C4]
.text:00412D15                 add     esp, 8
.text:00412D18                 test    edi, edi
.text:00412D1A                 js      short loc_412D55
.text:00412D1C
.text:00412D1C loc_412D1C:                             ; CODE XREF: sub_4126F0+66B↓j
.text:00412D1C                 fucompp
.text:00412D1E                 fnstsw  ax
.text:00412D20                 sahf
.text:00412D21                 jp      short loc_412D25
.text:00412D23                 jz      short loc_412D2C
.text:00412D25
.text:00412D25 loc_412D25:                             ; CODE XREF: sub_4126F0+631↑j
.text:00412D25                 mov     ecx, 1
.text:00412D2A                 xor     ebx, ebx
.text:00412D2C
.text:00412D2C loc_412D2C:                             ; CODE XREF: sub_4126F0+633↑j
.text:00412D2C                                         ; sub_4126F0+66F↓j
.text:00412D2C                 mov     edx, esi
.text:00412D2E                 add     edx, ecx
.text:00412D30                 mov     esi, edi
.text:00412D32                 adc     esi, ebx
.text:00412D34                 push    esi
.text:00412D35                 push    edx
.text:00412D36                 fild    [esp+0C4h+var_C4]
.text:00412D39                 add     esp, 8
.text:00412D3C                 test    esi, esi
.text:00412D3E                 js      short loc_412D4D
.text:00412D40
.text:00412D40 loc_412D40:                             ; CODE XREF: sub_4126F0+5EC↑j
.text:00412D40                                         ; sub_4126F0+5F9↑j ...
.text:00412D40                 fld     ds:tbyte_4126E0
.text:00412D46                 fdivp   st(1), st
.text:00412D48                 jmp     loc_4129A0
.text:00412D4D ; ---------------------------------------------------------------------------
.text:00412D4D
.text:00412D4D loc_412D4D:                             ; CODE XREF: sub_4126F0+64E↑j
.text:00412D4D                 fadd    ds:flt_4126C8
.text:00412D53                 jmp     short loc_412D40
.text:00412D55 ; ---------------------------------------------------------------------------
.text:00412D55
.text:00412D55 loc_412D55:                             ; CODE XREF: sub_4126F0+62A↑j
.text:00412D55                 fadd    ds:flt_4126C8
.text:00412D5B                 jmp     short loc_412D1C
.text:00412D5D ; ---------------------------------------------------------------------------
.text:00412D5D
.text:00412D5D loc_412D5D:                             ; CODE XREF: sub_4126F0+61E↑j
.text:00412D5D                 fstp    st
.text:00412D5F                 jmp     short loc_412D2C
.text:00412D61 ; ---------------------------------------------------------------------------
.text:00412D61
.text:00412D61 loc_412D61:                             ; CODE XREF: sub_4126F0+57A↑j
.text:00412D61                 fadd    ds:flt_4126C8
.text:00412D67                 jmp     loc_412C70
.text:00412D6C ; ---------------------------------------------------------------------------
.text:00412D6C
.text:00412D6C loc_412D6C:                             ; CODE XREF: sub_4126F0+54C↑j
.text:00412D6C                 fadd    ds:flt_4126C8
.text:00412D72                 jmp     loc_412C42
.text:00412D77 ; ---------------------------------------------------------------------------
.text:00412D77
.text:00412D77 loc_412D77:                             ; CODE XREF: sub_4126F0+216↑j
.text:00412D77                 fadd    ds:flt_4126C8
.text:00412D7D                 jmp     loc_41290C
.text:00412D82 ; ---------------------------------------------------------------------------
.text:00412D82
.text:00412D82 loc_412D82:                             ; CODE XREF: sub_4126F0+206↑j
.text:00412D82                 fadd    ds:flt_4126C8
.text:00412D88                 jmp     loc_4128FC
.text:00412D8D ; ---------------------------------------------------------------------------
.text:00412D8D
.text:00412D8D loc_412D8D:                             ; CODE XREF: sub_4126F0+1F0↑j
.text:00412D8D                 fadd    ds:flt_4126C8
.text:00412D93                 jmp     loc_4128E6
.text:00412D98 ; ---------------------------------------------------------------------------
.text:00412D98
.text:00412D98 loc_412D98:                             ; CODE XREF: sub_4126F0+1CD↑j
.text:00412D98                 mov     [esp+0BCh+var_40], 0
.text:00412DA0
.text:00412DA0 loc_412DA0:                             ; CODE XREF: sub_4126F0+B5E↓j
.text:00412DA0                 xor     ebp, ebp
.text:00412DA2
.text:00412DA2 loc_412DA2:                             ; CODE XREF: sub_4126F0+B4D↓j
.text:00412DA2                                         ; sub_4126F0+B58↓j ...
.text:00412DA2                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00412DAA                 jz      loc_412F57
.text:00412DB0                 mov     [esp+0BCh+var_44], 0
.text:00412DB8                 xor     edx, edx
.text:00412DBA                 mov     eax, [esp+0BCh+var_34]
.text:00412DC1                 cmp     edx, [esp+0BCh+var_38]
.text:00412DC8                 ja      loc_412F57
.text:00412DCE                 jb      short loc_412DDD
.text:00412DD0                 cmp     eax, [esp+0BCh+var_3C]
.text:00412DD7                 ja      loc_412F57
.text:00412DDD
.text:00412DDD loc_412DDD:                             ; CODE XREF: sub_4126F0+6DE↑j
.text:00412DDD                 mov     esi, eax
.text:00412DDF                 mov     edi, edx
.text:00412DE1
.text:00412DE1 loc_412DE1:                             ; CODE XREF: sub_4126F0+7AC↓j
.text:00412DE1                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00412DE5                 mov     ecx, [esp+0BCh+var_3C]
.text:00412DEC                 mov     eax, [esp+0BCh+var_38]
.text:00412DF3                 mov     [esp+0BCh+var_B0], edi
.text:00412DF7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:00412DFA                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:00412DFE                 call    sub_429070
.text:00412E03                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00412E07                 mov     edx, eax
.text:00412E09                 mov     ebx, [esp+0BCh+var_40]
.text:00412E0D                 mov     [esp+0BCh+var_B0], edi
.text:00412E11                 shl     edx, 2
.text:00412E14                 mov     ecx, ebp
.text:00412E16                 add     edx, eax
.text:00412E18                 lea     eax, [ebx+edx*2]
.text:00412E1B                 xor     edx, edx
.text:00412E1D                 div     [esp+0BCh+var_34]
.text:00412E24                 sar     ecx, 1
.text:00412E26                 lea     ebx, [ecx+edx*2]
.text:00412E29                 mov     [esp+0BCh+var_80], eax
.text:00412E2D                 mov     ecx, [esp+0BCh+var_38]
.text:00412E34                 mov     edx, [esp+0BCh+var_3C]
.text:00412E3B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00412E3F                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00412E42                 call    sub_429510
.text:00412E47                 cmp     ebx, [esp+0BCh+var_34]
.text:00412E4E                 mov     [esp+0BCh+var_3C], eax
.text:00412E55                 mov     ecx, [esp+0BCh+var_80]
.text:00412E59                 mov     [esp+0BCh+var_38], edx
.text:00412E60                 mov     [esp+0BCh+var_40], ecx
.text:00412E64                 jnb     loc_413111
.text:00412E6A                 lea     edx, [ebp+ebx+0]
.text:00412E6E                 test    edx, edx
.text:00412E70                 setnz   bl
.text:00412E73                 movzx   ebp, bl
.text:00412E76
.text:00412E76 loc_412E76:                             ; CODE XREF: sub_4126F0+A33↓j
.text:00412E76                 inc     [esp+0BCh+var_44]
.text:00412E7A                 xor     ebx, ebx
.text:00412E7C                 mov     eax, [esp+0BCh+var_34]
.text:00412E83                 cmp     ebx, [esp+0BCh+var_38]
.text:00412E8A                 ja      short loc_412EA2
.text:00412E8C                 jb      short loc_412E97
.text:00412E8E                 cmp     eax, [esp+0BCh+var_3C]
.text:00412E95                 ja      short loc_412EA2
.text:00412E97
.text:00412E97 loc_412E97:                             ; CODE XREF: sub_4126F0+79C↑j
.text:00412E97                 cmp     [esp+0BCh+var_44], 8
.text:00412E9C                 jl      loc_412DE1
.text:00412EA2
.text:00412EA2 loc_412EA2:                             ; CODE XREF: sub_4126F0+79A↑j
.text:00412EA2                                         ; sub_4126F0+7A5↑j
.text:00412EA2                 cmp     [esp+0BCh+var_38], 0
.text:00412EAA                 ja      loc_412F57
.text:00412EB0                 cmp     [esp+0BCh+var_3C], 9
.text:00412EB8                 ja      loc_412F57
.text:00412EBE                 cmp     [esp+0BCh+var_30], 1
.text:00412EC6                 jz      loc_4130F9
.text:00412ECC                 mov     eax, [esp+0BCh+var_30]
.text:00412ED3                 test    eax, eax
.text:00412ED5                 jnz     short loc_412EEF
.text:00412ED7                 test    ebp, ebp
.text:00412ED9                 jle     short loc_412EEF
.text:00412EDB
.text:00412EDB loc_412EDB:                             ; CODE XREF: sub_4126F0+A16↓j
.text:00412EDB                 mov     edx, [esp+0BCh+var_80]
.text:00412EDF                 xor     ebp, ebp
.text:00412EE1                 inc     edx
.text:00412EE2                 mov     [esp+0BCh+var_40], edx
.text:00412EE6                 cmp     edx, 0Ah
.text:00412EE9                 jz      loc_4130DC
.text:00412EEF
.text:00412EEF loc_412EEF:                             ; CODE XREF: sub_4126F0+7E5↑j
.text:00412EEF                                         ; sub_4126F0+7E9↑j ...
.text:00412EEF                 cmp     [esp+0BCh+var_38], 0
.text:00412EF7                 ja      short loc_412F57
.text:00412EF9                 cmp     [esp+0BCh+var_3C], 9
.text:00412F01                 ja      short loc_412F57
.text:00412F03                 mov     ecx, [esp+0BCh+var_40]
.text:00412F07                 test    ecx, ecx
.text:00412F09                 jnz     short loc_412F15
.text:00412F0B                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00412F13                 jnz     short loc_412F57
.text:00412F15
.text:00412F15 loc_412F15:                             ; CODE XREF: sub_4126F0+819↑j
.text:00412F15                 movzx   edx, byte ptr [esp+0BCh+var_40]
.text:00412F1A                 mov     ecx, [esp+0BCh+var_4C]
.text:00412F1E                 mov     edi, [esp+0BCh+var_4C]
.text:00412F22                 dec     ecx
.text:00412F23                 add     dl, 30h ; '0'
.text:00412F26                 mov     [esp+0BCh+var_48], ecx
.text:00412F2A                 mov     [edi-1], dl
.text:00412F2D                 mov     esi, [esp+0BCh+Size]
.text:00412F31                 mov     ebx, [esp+0BCh+Src]
.text:00412F35                 sub     [esp+0BCh+var_48], esi
.text:00412F39                 mov     dword ptr [esp+0BCh+var_BC+8], esi ; Size
.text:00412F3D                 mov     dword ptr [esp+0BCh+var_BC+4], ebx ; Src
.text:00412F41                 mov     ebp, [esp+0BCh+var_48]
.text:00412F45                 mov     dword ptr [esp+0BCh+var_BC], ebp ; void *
.text:00412F48                 xor     ebp, ebp
.text:00412F4A                 call    memcpy
.text:00412F4F                 mov     [esp+0BCh+var_40], 0
.text:00412F57
.text:00412F57 loc_412F57:                             ; CODE XREF: sub_4126F0+6BA↑j
.text:00412F57                                         ; sub_4126F0+6D8↑j ...
.text:00412F57                 cmp     [esp+0BCh+var_30], 1
.text:00412F5F                 jz      loc_4130A1
.text:00412F65                 mov     eax, [esp+0BCh+var_30]
.text:00412F6C                 test    eax, eax
.text:00412F6E                 jnz     short loc_412FE1
.text:00412F70                 mov     edx, [esp+0BCh+var_40]
.text:00412F74                 add     edx, ebp
.text:00412F76                 test    edx, edx
.text:00412F78                 jle     short loc_412FE1
.text:00412F7A
.text:00412F7A loc_412F7A:                             ; CODE XREF: sub_4126F0:loc_4130CA↓j
.text:00412F7A                 add     [esp+0BCh+var_3C], 1
.text:00412F82                 adc     [esp+0BCh+var_38], 0
.text:00412F8A                 test    byte ptr [esp+0BCh+arg_C], 10h
.text:00412F92                 jz      short loc_412FE1
.text:00412F94                 mov     esi, [esp+0BCh+var_34]
.text:00412F9B                 xor     ebx, ebx
.text:00412F9D                 mov     ebp, [esp+0BCh+var_38]
.text:00412FA4                 mov     ecx, [esp+0BCh+var_3C]
.text:00412FAB                 xor     ebp, ebx
.text:00412FAD                 xor     esi, ecx
.text:00412FAF                 or      ebp, esi
.text:00412FB1                 jnz     short loc_412FE1
.text:00412FB3                 cmp     [esp+0BCh+var_44], 8
.text:00412FB8                 jge     short loc_412FE1
.text:00412FBA                 inc     [esp+0BCh+var_44]
.text:00412FBE                 test    byte ptr [esp+0BCh+arg_C], 8
.text:00412FC6                 jz      loc_413073
.text:00412FCC
.text:00412FCC loc_412FCC:                             ; CODE XREF: sub_4126F0+9AC↓j
.text:00412FCC                 mov     ecx, 1
.text:00412FD1                 xor     esi, esi
.text:00412FD3                 mov     [esp+0BCh+var_3C], ecx
.text:00412FDA                 mov     [esp+0BCh+var_38], esi
.text:00412FE1
.text:00412FE1 loc_412FE1:                             ; CODE XREF: sub_4126F0+87E↑j
.text:00412FE1                                         ; sub_4126F0+888↑j ...
.text:00412FE1                 mov     ebx, [esp+0BCh+var_48]
.text:00412FE5                 lea     esi, [esi+0]
.text:00412FE9                 lea     edi, [edi+0]
.text:00412FF0
.text:00412FF0 loc_412FF0:                             ; CODE XREF: sub_4126F0+97C↓j
.text:00412FF0                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00412FF8                 mov     ecx, [esp+0BCh+var_38]
.text:00412FFF                 mov     ebp, [esp+0BCh+var_3C]
.text:00413006                 mov     [esp+0BCh+var_B0], 0
.text:0041300E                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:00413012                 mov     dword ptr [esp+0BCh+var_BC], ebp
.text:00413015                 call    sub_429070
.text:0041301A                 dec     [esp+0BCh+var_48]
.text:0041301E                 add     al, 30h ; '0'
.text:00413020                 mov     esi, [esp+0BCh+var_48]
.text:00413024                 mov     [esi], al
.text:00413026                 mov     edx, [esp+0BCh+var_3C]
.text:0041302D                 mov     dword ptr [esp+0BCh+var_BC+8], 0Ah
.text:00413035                 mov     edi, [esp+0BCh+var_38]
.text:0041303C                 mov     [esp+0BCh+var_B0], 0
.text:00413044                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:00413047                 mov     dword ptr [esp+0BCh+var_BC+4], edi
.text:0041304B                 call    sub_429510
.text:00413050                 mov     [esp+0BCh+var_38], edx
.text:00413057                 mov     ebp, [esp+0BCh+var_38]
.text:0041305E                 mov     [esp+0BCh+var_3C], eax
.text:00413065                 or      ebp, [esp+0BCh+var_3C]
.text:0041306C                 jnz     short loc_412FF0
.text:0041306E                 jmp     loc_4129E2
.text:00413073 ; ---------------------------------------------------------------------------
.text:00413073
.text:00413073 loc_413073:                             ; CODE XREF: sub_4126F0+8D6↑j
.text:00413073                 dec     [esp+0BCh+var_48]
.text:00413077                 mov     edi, [esp+0BCh+var_48]
.text:0041307B                 mov     byte ptr [edi], 30h ; '0'
.text:0041307E                 mov     edx, [esp+0BCh+Size]
.text:00413082                 mov     eax, [esp+0BCh+Src]
.text:00413086                 mov     dword ptr [esp+0BCh+var_BC+8], edx ; Size
.text:0041308A                 sub     edi, edx
.text:0041308C                 mov     [esp+0BCh+var_48], edi
.text:00413090                 mov     dword ptr [esp+0BCh+var_BC+4], eax ; Src
.text:00413094                 mov     dword ptr [esp+0BCh+var_BC], edi ; void *
.text:00413097                 call    memcpy
.text:0041309C                 jmp     loc_412FCC
.text:004130A1 ; ---------------------------------------------------------------------------
.text:004130A1
.text:004130A1 loc_4130A1:                             ; CODE XREF: sub_4126F0+86F↑j
.text:004130A1                 mov     ebx, [esp+0BCh+var_3C]
.text:004130A8                 mov     ecx, ebp
.text:004130AA                 mov     esi, ebp
.text:004130AC                 sar     esi, 1Fh
.text:004130AF                 xor     ebp, ebp
.text:004130B1                 and     ebx, 1
.text:004130B4                 add     ecx, ebx
.text:004130B6                 adc     esi, ebp
.text:004130B8                 cmp     esi, 0
.text:004130BB                 ja      short loc_4130C2
.text:004130BD                 cmp     ecx, 0
.text:004130C0                 jbe     short loc_4130D5
.text:004130C2
.text:004130C2 loc_4130C2:                             ; CODE XREF: sub_4126F0+9CB↑j
.text:004130C2                 mov     edi, [esp+0BCh+var_40]
.text:004130C6                 inc     edi
.text:004130C7                 cmp     edi, 5
.text:004130CA
.text:004130CA loc_4130CA:                             ; CODE XREF: sub_4126F0+9EA↓j
.text:004130CA                 jg      loc_412F7A
.text:004130D0                 jmp     loc_412FE1
.text:004130D5 ; ---------------------------------------------------------------------------
.text:004130D5
.text:004130D5 loc_4130D5:                             ; CODE XREF: sub_4126F0+9D0↑j
.text:004130D5                 cmp     [esp+0BCh+var_40], 5
.text:004130DA                 jmp     short loc_4130CA
.text:004130DC ; ---------------------------------------------------------------------------
.text:004130DC
.text:004130DC loc_4130DC:                             ; CODE XREF: sub_4126F0+7F9↑j
.text:004130DC                 add     [esp+0BCh+var_3C], 1
.text:004130E4                 mov     [esp+0BCh+var_40], 0
.text:004130EC                 adc     [esp+0BCh+var_38], 0
.text:004130F4                 jmp     loc_412EEF
.text:004130F9 ; ---------------------------------------------------------------------------
.text:004130F9
.text:004130F9 loc_4130F9:                             ; CODE XREF: sub_4126F0+7D6↑j
.text:004130F9                 mov     edi, [esp+0BCh+var_80]
.text:004130FD                 and     edi, 1
.text:00413100                 lea     esi, [edi+ebp]
.text:00413103                 cmp     esi, 2
.text:00413106                 jg      loc_412EDB
.text:0041310C                 jmp     loc_412EEF
.text:00413111 ; ---------------------------------------------------------------------------
.text:00413111
.text:00413111 loc_413111:                             ; CODE XREF: sub_4126F0+774↑j
.text:00413111                 lea     edx, [ebp+ebx+0]
.text:00413115                 cmp     [esp+0BCh+var_34], edx
.text:0041311C                 sbb     ecx, ecx
.text:0041311E                 not     ecx
.text:00413120                 lea     ebp, [ecx+3]
.text:00413123                 jmp     loc_412E76
.text:00413128 ; ---------------------------------------------------------------------------
.text:00413128
.text:00413128 loc_413128:                             ; CODE XREF: sub_4126F0+F9↑j
.text:00413128                                         ; sub_4126F0+108↑j
.text:00413128                 mov     eax, edi
.text:0041312A                 or      eax, esi
.text:0041312C                 jz      loc_4128D0
.text:00413132                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00413136                 mov     edx, dword ptr [esp+0BCh+var_2C]
.text:0041313D                 mov     ecx, dword ptr [esp+0BCh+var_2C+4]
.text:00413144                 mov     [esp+0BCh+var_B0], edi
.text:00413148                 mov     dword ptr [esp+0BCh+var_BC], edx
.text:0041314B                 mov     dword ptr [esp+0BCh+var_BC+4], ecx
.text:0041314F                 call    sub_429070
.text:00413154                 mov     ebx, edx
.text:00413156                 or      ebx, eax
.text:00413158                 jnz     loc_4128D0
.text:0041315E                 mov     [esp+0BCh+var_B0], edi
.text:00413162                 mov     ebp, dword ptr [esp+0BCh+var_2C+4]
.text:00413169                 mov     edi, dword ptr [esp+0BCh+var_2C]
.text:00413170                 mov     dword ptr [esp+0BCh+var_BC+8], esi
.text:00413174                 mov     dword ptr [esp+0BCh+var_BC+4], ebp
.text:00413178                 mov     dword ptr [esp+0BCh+var_BC], edi
.text:0041317B                 call    sub_429510
.text:00413180                 mov     dword ptr [esp+0BCh+var_BC+8], eax
.text:00413184                 mov     ebx, dword ptr [esp+0BCh+var_24]
.text:0041318B                 mov     ebp, edx
.text:0041318D                 mov     [esp+0BCh+var_B0], edx
.text:00413191                 mov     esi, dword ptr [esp+0BCh+var_24+4]
.text:00413198                 mov     edi, eax
.text:0041319A                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:0041319D                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004131A1                 call    sub_429070
.text:004131A6                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004131AA                 mov     ebx, eax
.text:004131AC                 mov     esi, edx
.text:004131AE                 shld    esi, eax, 2
.text:004131B2                 mov     [esp+0BCh+var_B0], ebp
.text:004131B6                 shl     ebx, 2
.text:004131B9                 add     ebx, eax
.text:004131BB                 adc     esi, edx
.text:004131BD                 shld    esi, ebx, 1
.text:004131C1                 add     ebx, ebx
.text:004131C3                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:004131C6                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:004131CA                 call    sub_429070
.text:004131CF                 shld    edx, eax, 1
.text:004131D3                 mov     ecx, dword ptr [esp+0BCh+var_24]
.text:004131DA                 add     eax, eax
.text:004131DC                 mov     [esp+0BCh+var_64], eax
.text:004131E0                 mov     eax, dword ptr [esp+0BCh+var_24+4]
.text:004131E7                 mov     dword ptr [esp+0BCh+var_BC], ecx
.text:004131EA                 mov     [esp+0BCh+var_60], edx
.text:004131EE                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:004131F2                 mov     [esp+0BCh+var_B0], ebp
.text:004131F6                 mov     dword ptr [esp+0BCh+var_BC+4], eax
.text:004131FA                 call    sub_429510
.text:004131FF                 mov     [esp+0BCh+var_3C], eax
.text:00413206                 mov     [esp+0BCh+var_38], edx
.text:0041320D                 mov     dword ptr [esp+0BCh+var_BC+8], edi
.text:00413211                 mov     [esp+0BCh+var_B0], ebp
.text:00413215                 mov     dword ptr [esp+0BCh+var_BC], ebx
.text:00413218                 mov     dword ptr [esp+0BCh+var_BC+4], esi
.text:0041321C                 call    sub_429510
.text:00413221                 cmp     [esp+0BCh+var_60], ebp
.text:00413225                 mov     [esp+0BCh+var_40], eax
.text:00413229                 ja      short loc_413253
.text:0041322B                 jb      short loc_413233
.text:0041322D                 cmp     [esp+0BCh+var_64], edi
.text:00413231                 jnb     short loc_413253
.text:00413233
.text:00413233 loc_413233:                             ; CODE XREF: sub_4126F0+B3B↑j
.text:00413233                 cmp     [esp+0BCh+var_60], 0
.text:00413238                 mov     ebp, 1
.text:0041323D                 ja      loc_412DA2
.text:00413243                 cmp     [esp+0BCh+var_64], 0
.text:00413248                 ja      loc_412DA2
.text:0041324E                 jmp     loc_412DA0
.text:00413253 ; ---------------------------------------------------------------------------
.text:00413253
.text:00413253 loc_413253:                             ; CODE XREF: sub_4126F0+B39↑j
.text:00413253                                         ; sub_4126F0+B41↑j
.text:00413253                 cmp     ebp, [esp+0BCh+var_60]
.text:00413257                 ja      short loc_41326B
.text:00413259                 jb      short loc_413261
.text:0041325B                 cmp     edi, [esp+0BCh+var_64]
.text:0041325F                 jnb     short loc_41326B
.text:00413261
.text:00413261 loc_413261:                             ; CODE XREF: sub_4126F0+B69↑j
.text:00413261                 mov     ebp, 3
.text:00413266                 jmp     loc_412DA2
.text:0041326B ; ---------------------------------------------------------------------------
.text:0041326B
.text:0041326B loc_41326B:                             ; CODE XREF: sub_4126F0+B67↑j
.text:0041326B                                         ; sub_4126F0+B6F↑j
.text:0041326B                 mov     ebp, 2
.text:00413270                 jmp     loc_412DA2
.text:00413270 sub_4126F0      endp
.text:00413270
.text:00413270 ; ---------------------------------------------------------------------------
.text:00413275 aHumanReadable_0 db 'human-readable',0  ; DATA XREF: .text:off_413288↓o
.text:00413284 aSi_0           db 'si',0               ; DATA XREF: .text:0041328C↓o
.text:00413287                 align 4
.text:00413288 off_413288      dd offset aHumanReadable_0
.text:00413288                                         ; DATA XREF: sub_413510+3A↓o
.text:00413288                                         ; "human-readable"
.text:0041328C                 dd offset aSi_0         ; "si"
.text:00413290                 dd 0
.text:00413294 dword_413294    dd 0B0h                 ; DATA XREF: sub_413510+32↓o
.text:00413294                                         ; sub_413510+54↓r
.text:00413298                 db 90h
.text:00413299                 align 4
.text:0041329C aBlockSize      db 'block size',0       ; DATA XREF: sub_413320:loc_413382↓o
.text:0041329C                                         ; sub_413320:loc_4133D4↓o ...
.text:004132A7 ; const char aSSTooLarge[]
.text:004132A7 aSSTooLarge     db '%s `%s',27h,' too large',0
.text:004132A7                                         ; DATA XREF: sub_413320+73↓o
.text:004132B9                 db 17h dup(90h)
.text:004132D0 aInvalidCharact db 'invalid character following %s in `%s',27h,0
.text:004132D0                                         ; DATA XREF: sub_413320+C5↓o
.text:004132F7 aInvalidSS      db 'invalid %s `%s',27h,0
.text:004132F7                                         ; DATA XREF: sub_413320+E6↓o
.text:00413307 ; const char aPosixlyCorrect[]
.text:00413307 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_413320:loc_413410↓o
.text:00413307                                         ; sub_413510+11A↓o
.text:00413317                 align 10h
.text:00413320
.text:00413320 ; =============== S U B R O U T I N E =======================================
.text:00413320
.text:00413320
.text:00413320 ; int __cdecl sub_413320(char *, char, int)
.text:00413320 sub_413320      proc near               ; CODE XREF: sub_4025F0+13B↑p
.text:00413320                                         ; sub_4025F0+AE9↑p
.text:00413320
.text:00413320 VarName         = dword ptr -2Ch
.text:00413320 ErrorMessage    = dword ptr -28h
.text:00413320 var_24          = dword ptr -24h
.text:00413320 var_20          = byte ptr -20h
.text:00413320 var_1C          = dword ptr -1Ch
.text:00413320 var_11          = byte ptr -11h
.text:00413320 var_10          = dword ptr -10h
.text:00413320 var_C           = dword ptr -0Ch
.text:00413320 var_8           = dword ptr -8
.text:00413320 var_4           = dword ptr -4
.text:00413320 arg_0           = dword ptr  4
.text:00413320 arg_4           = byte ptr  8
.text:00413320 arg_8           = dword ptr  0Ch
.text:00413320
.text:00413320                 sub     esp, 2Ch
.text:00413323                 movzx   edx, [esp+2Ch+arg_4]
.text:00413328                 mov     [esp+2Ch+var_C], ebx
.text:0041332C                 mov     ebx, [esp+2Ch+arg_8]
.text:00413330                 mov     [esp+2Ch+var_8], esi
.text:00413334                 mov     esi, [esp+2Ch+arg_0]
.text:00413338                 mov     [esp+2Ch+var_11], dl
.text:0041333C                 lea     edx, [esp+2Ch+var_10]
.text:00413340                 mov     [esp+2Ch+var_4], edi
.text:00413344                 mov     [esp+2Ch+var_24], edx ; int
.text:00413348                 mov     [esp+2Ch+ErrorMessage], ebx ; int
.text:0041334C                 mov     [esp+2Ch+VarName], esi ; char *
.text:0041334F                 call    sub_413510
.text:00413354                 mov     edx, [ebx+4]
.text:00413357                 mov     ecx, eax
.text:00413359                 mov     eax, [ebx]
.text:0041335B                 mov     edi, edx
.text:0041335D                 or      edi, eax
.text:0041335F                 jz      loc_413410
.text:00413365
.text:00413365 loc_413365:                             ; CODE XREF: sub_413320+118↓j
.text:00413365                 test    ecx, ecx
.text:00413367                 jz      short loc_4133C0
.text:00413369                 cmp     [esp+2Ch+var_11], 0
.text:0041336E                 jz      short loc_4133C0
.text:00413370                 cmp     ecx, 3
.text:00413373                 ja      short loc_4133F0
.text:00413375                 cmp     ecx, 2
.text:00413378                 jnb     short loc_4133D4
.text:0041337A                 dec     ecx
.text:0041337B                 jz      short loc_413382
.text:0041337D
.text:0041337D loc_41337D:                             ; CODE XREF: sub_413320+D3↓j
.text:0041337D                 call    abort
.text:00413382 ; ---------------------------------------------------------------------------
.text:00413382
.text:00413382 loc_413382:                             ; CODE XREF: sub_413320+5B↑j
.text:00413382                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:00413389                 call    ds:libintl_gettext
.text:0041338F                 mov     [esp+2Ch+var_1C], esi
.text:00413393                 mov     [esp+2Ch+var_24], offset aSSTooLarge ; "%s `%s' too large"
.text:0041339B
.text:0041339B loc_41339B:                             ; CODE XREF: sub_413320+CD↓j
.text:0041339B                                         ; sub_413320+EE↓j
.text:0041339B                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0041339F                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004133A7                 mov     ecx, dword_42B0F0
.text:004133AD                 mov     [esp+2Ch+VarName], ecx ; Code
.text:004133B0                 call    sub_4161E0
.text:004133B5                 lea     esi, [esi+0]
.text:004133B9                 lea     edi, [edi+0]
.text:004133C0
.text:004133C0 loc_4133C0:                             ; CODE XREF: sub_413320+47↑j
.text:004133C0                                         ; sub_413320+4E↑j
.text:004133C0                 mov     eax, [esp+2Ch+var_10]
.text:004133C4                 mov     ebx, [esp+2Ch+var_C]
.text:004133C8                 mov     esi, [esp+2Ch+var_8]
.text:004133CC                 mov     edi, [esp+2Ch+var_4]
.text:004133D0                 add     esp, 2Ch
.text:004133D3                 retn
.text:004133D4 ; ---------------------------------------------------------------------------
.text:004133D4
.text:004133D4 loc_4133D4:                             ; CODE XREF: sub_413320+58↑j
.text:004133D4                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:004133DB                 call    ds:libintl_gettext
.text:004133E1                 mov     [esp+2Ch+var_1C], esi
.text:004133E5                 mov     [esp+2Ch+var_24], offset aInvalidCharact ; "invalid character following %s in `%s'"
.text:004133ED                 jmp     short loc_41339B
.text:004133ED ; ---------------------------------------------------------------------------
.text:004133EF                 align 10h
.text:004133F0
.text:004133F0 loc_4133F0:                             ; CODE XREF: sub_413320+53↑j
.text:004133F0                 cmp     ecx, 4
.text:004133F3                 jnz     short loc_41337D
.text:004133F5                 mov     [esp+2Ch+VarName], offset aBlockSize ; "block size"
.text:004133FC                 call    ds:libintl_gettext
.text:00413402                 mov     [esp+2Ch+var_1C], esi
.text:00413406                 mov     [esp+2Ch+var_24], offset aInvalidSS ; "invalid %s `%s'"
.text:0041340E                 jmp     short loc_41339B
.text:00413410 ; ---------------------------------------------------------------------------
.text:00413410
.text:00413410 loc_413410:                             ; CODE XREF: sub_413320+3F↑j
.text:00413410                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00413417                 call    getenv
.text:0041341C                 xor     ecx, ecx
.text:0041341E                 mov     edx, 200h
.text:00413423                 test    eax, eax
.text:00413425                 jnz     short loc_41342E
.text:00413427                 mov     edx, 400h
.text:0041342C                 xor     ecx, ecx
.text:0041342E
.text:0041342E loc_41342E:                             ; CODE XREF: sub_413320+105↑j
.text:0041342E                 mov     [ebx+4], ecx
.text:00413431                 mov     ecx, 4
.text:00413436                 mov     [ebx], edx
.text:00413438                 jmp     loc_413365
.text:00413438 sub_413320      endp
.text:00413438
.text:00413438 ; ---------------------------------------------------------------------------
.text:0041343D                 align 10h
.text:00413440
.text:00413440 ; =============== S U B R O U T I N E =======================================
.text:00413440
.text:00413440
.text:00413440 ; int __cdecl sub_413440(void *, size_t, int, char *)
.text:00413440 sub_413440      proc near               ; CODE XREF: sub_4126F0+492↑p
.text:00413440
.text:00413440 Str             = dword ptr -6Ch
.text:00413440 Src             = dword ptr -68h
.text:00413440 Size            = dword ptr -64h
.text:00413440 var_50          = dword ptr -50h
.text:00413440 var_4C          = byte ptr -4Ch
.text:00413440 arg_0           = dword ptr  4
.text:00413440 arg_4           = dword ptr  8
.text:00413440 arg_8           = dword ptr  0Ch
.text:00413440 arg_C           = dword ptr  10h
.text:00413440
.text:00413440                 push    ebp
.text:00413441                 push    edi
.text:00413442                 mov     edi, 0FFFFFFFFh
.text:00413447                 push    esi
.text:00413448                 push    ebx
.text:00413449                 sub     esp, 5Ch
.text:0041344C                 mov     edx, [esp+6Ch+arg_C]
.text:00413450                 mov     ebx, [esp+6Ch+arg_0]
.text:00413454                 mov     ebp, [esp+6Ch+arg_8]
.text:00413458                 mov     [esp+6Ch+Str], edx ; Str
.text:0041345B                 call    strlen
.text:00413460                 mov     [esp+6Ch+var_50], eax
.text:00413464                 mov     esi, [esp+6Ch+arg_4]
.text:00413468                 lea     edx, [esp+6Ch+var_4C]
.text:0041346C                 mov     [esp+6Ch+Src], ebx ; Src
.text:00413470                 mov     [esp+6Ch+Str], edx ; void *
.text:00413473                 add     ebx, esi
.text:00413475                 mov     [esp+6Ch+Size], esi ; Size
.text:00413479                 lea     esi, [esi+0]
.text:00413480
.text:00413480 loc_413480:                             ; CODE XREF: sub_413440+94↓j
.text:00413480                 call    memcpy
.text:00413485                 movzx   eax, byte ptr [ebp+0]
.text:00413489                 test    al, al
.text:0041348B                 jz      short loc_413497
.text:0041348D                 cmp     al, 7Eh ; '~'
.text:0041348F                 mov     edi, esi
.text:00413491                 ja      short loc_413496
.text:00413493                 movzx   edi, al
.text:00413496
.text:00413496 loc_413496:                             ; CODE XREF: sub_413440+51↑j
.text:00413496                 inc     ebp
.text:00413497
.text:00413497 loc_413497:                             ; CODE XREF: sub_413440+4B↑j
.text:00413497                 cmp     esi, edi
.text:00413499                 jnb     short loc_41349D
.text:0041349B                 mov     edi, esi
.text:0041349D
.text:0041349D loc_41349D:                             ; CODE XREF: sub_413440+59↑j
.text:0041349D                 mov     [esp+6Ch+Size], edi ; Size
.text:004134A1                 sub     esi, edi
.text:004134A3                 lea     ecx, [esp+6Ch+var_4C]
.text:004134A7                 add     ecx, esi
.text:004134A9                 sub     ebx, edi
.text:004134AB                 mov     [esp+6Ch+Src], ecx ; Src
.text:004134AF                 mov     [esp+6Ch+Str], ebx ; void *
.text:004134B2                 call    memcpy
.text:004134B7                 test    esi, esi
.text:004134B9                 jz      short loc_4134D6
.text:004134BB                 mov     edx, [esp+6Ch+var_50]
.text:004134BF                 mov     ecx, [esp+6Ch+var_50]
.text:004134C3                 sub     ebx, edx
.text:004134C5                 mov     [esp+6Ch+Size], ecx
.text:004134C9                 mov     edx, [esp+6Ch+arg_C]
.text:004134CD                 mov     [esp+6Ch+Str], ebx
.text:004134D0                 mov     [esp+6Ch+Src], edx
.text:004134D4                 jmp     short loc_413480
.text:004134D6 ; ---------------------------------------------------------------------------
.text:004134D6
.text:004134D6 loc_4134D6:                             ; CODE XREF: sub_413440+79↑j
.text:004134D6                 add     esp, 5Ch
.text:004134D9                 mov     eax, ebx
.text:004134DB                 pop     ebx
.text:004134DC                 pop     esi
.text:004134DD                 pop     edi
.text:004134DE                 pop     ebp
.text:004134DF                 retn
.text:004134DF sub_413440      endp
.text:004134DF
.text:004134DF ; ---------------------------------------------------------------------------
.text:004134E0 ; const char aEeggkkmmppttyy[]
.text:004134E0 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.text:004134E0                                         ; DATA XREF: sub_413510:loc_413590↓o
.text:004134F2 ; const char aBlockSize_0[]
.text:004134F2 aBlockSize_0    db 'BLOCK_SIZE',0       ; DATA XREF: sub_413510:loc_4135FE↓o
.text:004134FD ; const char aBlocksize[]
.text:004134FD aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: sub_413510+104↓o
.text:00413507                 align 10h
.text:00413510
.text:00413510 ; =============== S U B R O U T I N E =======================================
.text:00413510
.text:00413510
.text:00413510 ; int __cdecl sub_413510(char *, int, int)
.text:00413510 sub_413510      proc near               ; CODE XREF: sub_413320+2F↑p
.text:00413510
.text:00413510 VarName         = dword ptr -2Ch
.text:00413510 var_28          = dword ptr -28h
.text:00413510 var_24          = dword ptr -24h
.text:00413510 var_20          = dword ptr -20h
.text:00413510 Str             = dword ptr -1Ch
.text:00413510 var_10          = dword ptr -10h
.text:00413510 var_C           = dword ptr -0Ch
.text:00413510 var_8           = dword ptr -8
.text:00413510 var_4           = dword ptr -4
.text:00413510 arg_0           = dword ptr  4
.text:00413510 arg_4           = dword ptr  8
.text:00413510 arg_8           = dword ptr  0Ch
.text:00413510
.text:00413510                 sub     esp, 2Ch
.text:00413513                 mov     [esp+2Ch+var_C], ebx
.text:00413517                 mov     ebx, [esp+2Ch+arg_0]
.text:0041351B                 mov     [esp+2Ch+var_8], esi
.text:0041351F                 xor     esi, esi
.text:00413521                 test    ebx, ebx
.text:00413523                 mov     [esp+2Ch+var_4], edi
.text:00413527                 mov     edi, [esp+2Ch+arg_4]
.text:0041352B                 jz      loc_4135FE
.text:00413531
.text:00413531 loc_413531:                             ; CODE XREF: sub_413510+FE↓j
.text:00413531                                         ; sub_413510+114↓j
.text:00413531                 cmp     byte ptr [ebx], 27h ; '''
.text:00413534                 jz      loc_4135F3
.text:0041353A
.text:0041353A loc_41353A:                             ; CODE XREF: sub_413510+E9↓j
.text:0041353A                 mov     [esp+2Ch+var_20], 4 ; int
.text:00413542                 mov     [esp+2Ch+var_24], offset dword_413294 ; int
.text:0041354A                 mov     [esp+2Ch+var_28], offset off_413288 ; int
.text:00413552                 mov     [esp+2Ch+VarName], ebx ; char *
.text:00413555                 call    sub_411780
.text:0041355A                 test    eax, eax
.text:0041355C                 js      short loc_413590
.text:0041355E                 mov     dword ptr [edi], 1
.text:00413564                 mov     ecx, ds:dword_413294[eax*4]
.text:0041356B                 mov     dword ptr [edi+4], 0
.text:00413572                 or      esi, ecx
.text:00413574
.text:00413574 loc_413574:                             ; CODE XREF: sub_413510+B9↓j
.text:00413574                                         ; sub_413510+D3↓j ...
.text:00413574                 mov     ebx, [esp+2Ch+arg_8]
.text:00413578                 xor     eax, eax
.text:0041357A                 mov     [ebx], esi
.text:0041357C
.text:0041357C loc_41357C:                             ; CODE XREF: sub_413510+A6↓j
.text:0041357C                 mov     ebx, [esp+2Ch+var_C]
.text:00413580                 mov     esi, [esp+2Ch+var_8]
.text:00413584                 mov     edi, [esp+2Ch+var_4]
.text:00413588                 add     esp, 2Ch
.text:0041358B                 retn
.text:0041358B ; ---------------------------------------------------------------------------
.text:0041358C                 align 10h
.text:00413590
.text:00413590 loc_413590:                             ; CODE XREF: sub_413510+4C↑j
.text:00413590                 mov     [esp+2Ch+Str], offset aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:00413598                 lea     edx, [esp+2Ch+var_10]
.text:0041359C                 mov     [esp+2Ch+var_20], edi ; int
.text:004135A0                 mov     [esp+2Ch+var_24], 0 ; int
.text:004135A8                 mov     [esp+2Ch+var_28], edx ; int
.text:004135AC                 mov     [esp+2Ch+VarName], ebx ; int
.text:004135AF                 call    sub_4154F0
.text:004135B4                 test    eax, eax
.text:004135B6                 jnz     short loc_41357C
.text:004135B8                 nop
.text:004135B9                 lea     esi, [esi+0]
.text:004135C0
.text:004135C0 loc_4135C0:                             ; CODE XREF: sub_413510+C2↓j
.text:004135C0                 movzx   ecx, byte ptr [ebx]
.text:004135C3                 sub     cl, 30h ; '0'
.text:004135C6                 cmp     cl, 9
.text:004135C9                 jbe     short loc_413574
.text:004135CB                 cmp     ebx, [esp+2Ch+var_10]
.text:004135CF                 jz      short loc_4135D4
.text:004135D1                 inc     ebx
.text:004135D2                 jmp     short loc_4135C0
.text:004135D4 ; ---------------------------------------------------------------------------
.text:004135D4
.text:004135D4 loc_4135D4:                             ; CODE XREF: sub_413510+BF↑j
.text:004135D4                 or      esi, 80h
.text:004135DA                 cmp     byte ptr [ebx-1], 42h ; 'B'
.text:004135DE                 jz      short loc_4135E5
.text:004135E0
.text:004135E0 loc_4135E0:                             ; CODE XREF: sub_413510+E1↓j
.text:004135E0                 or      esi, 20h
.text:004135E3                 jmp     short loc_413574
.text:004135E5 ; ---------------------------------------------------------------------------
.text:004135E5
.text:004135E5 loc_4135E5:                             ; CODE XREF: sub_413510+CE↑j
.text:004135E5                 or      esi, 100h
.text:004135EB                 cmp     byte ptr [ebx-2], 69h ; 'i'
.text:004135EF                 jnz     short loc_413574
.text:004135F1                 jmp     short loc_4135E0
.text:004135F3 ; ---------------------------------------------------------------------------
.text:004135F3
.text:004135F3 loc_4135F3:                             ; CODE XREF: sub_413510+24↑j
.text:004135F3                 mov     esi, 4
.text:004135F8                 inc     ebx
.text:004135F9                 jmp     loc_41353A
.text:004135FE ; ---------------------------------------------------------------------------
.text:004135FE
.text:004135FE loc_4135FE:                             ; CODE XREF: sub_413510+1B↑j
.text:004135FE                 mov     [esp+2Ch+VarName], offset aBlockSize_0 ; "BLOCK_SIZE"
.text:00413605                 call    getenv
.text:0041360A                 test    eax, eax
.text:0041360C                 mov     ebx, eax
.text:0041360E                 jnz     loc_413531
.text:00413614                 mov     [esp+2Ch+VarName], offset aBlocksize ; "BLOCKSIZE"
.text:0041361B                 call    getenv
.text:00413620                 test    eax, eax
.text:00413622                 mov     ebx, eax
.text:00413624                 jnz     loc_413531
.text:0041362A                 mov     [esp+2Ch+VarName], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00413631                 call    getenv
.text:00413636                 xor     ecx, ecx
.text:00413638                 mov     edx, 200h
.text:0041363D                 test    eax, eax
.text:0041363F                 jnz     short loc_413648
.text:00413641                 mov     edx, 400h
.text:00413646                 xor     ecx, ecx
.text:00413648
.text:00413648 loc_413648:                             ; CODE XREF: sub_413510+12F↑j
.text:00413648                 mov     [edi], edx
.text:0041364A                 mov     [edi+4], ecx
.text:0041364D                 jmp     loc_413574
.text:0041364D sub_413510      endp
.text:0041364D
.text:0041364D ; ---------------------------------------------------------------------------
.text:00413652                 db 1Eh dup(90h)
.text:00413670 byte_413670     db 43h, 0               ; DATA XREF: sub_413680+33↓o
.text:00413672 aPosix          db 'POSIX',0            ; DATA XREF: sub_413680+45↓o
.text:00413678                 align 10h
.text:00413680
.text:00413680 ; =============== S U B R O U T I N E =======================================
.text:00413680
.text:00413680
.text:00413680 sub_413680      proc near               ; CODE XREF: sub_4025F0+E83↑p
.text:00413680                                         ; sub_4025F0+EFF↑p
.text:00413680
.text:00413680 Category        = dword ptr -1Ch
.text:00413680 Locale          = dword ptr -18h
.text:00413680 var_10          = dword ptr -10h
.text:00413680 var_C           = dword ptr -0Ch
.text:00413680 var_8           = dword ptr -8
.text:00413680 var_4           = dword ptr -4
.text:00413680 arg_0           = dword ptr  4
.text:00413680
.text:00413680                 sub     esp, 1Ch
.text:00413683                 mov     edx, [esp+1Ch+arg_0]
.text:00413687                 mov     [esp+1Ch+var_10], ebx
.text:0041368B                 mov     bl, 1
.text:0041368D                 mov     [esp+1Ch+var_C], esi
.text:00413691                 mov     [esp+1Ch+var_8], edi
.text:00413695                 mov     [esp+1Ch+var_4], ebp
.text:00413699                 mov     [esp+1Ch+Locale], 0 ; Locale
.text:004136A1                 mov     [esp+1Ch+Category], edx ; Category
.text:004136A4                 call    setlocale
.text:004136A9                 test    eax, eax
.text:004136AB                 jz      short loc_4136D4
.text:004136AD                 cld
.text:004136AE                 mov     edx, 2
.text:004136B3                 mov     edi, offset byte_413670
.text:004136B8                 mov     esi, eax
.text:004136BA                 mov     ecx, edx
.text:004136BC                 repe cmpsb
.text:004136BE                 jz      short loc_4136D2
.text:004136C0                 mov     edx, 6
.text:004136C5                 mov     edi, offset aPosix ; "POSIX"
.text:004136CA                 mov     esi, eax
.text:004136CC                 mov     ecx, edx
.text:004136CE                 repe cmpsb
.text:004136D0                 jnz     short loc_4136D4
.text:004136D2
.text:004136D2 loc_4136D2:                             ; CODE XREF: sub_413680+3E↑j
.text:004136D2                 xor     ebx, ebx
.text:004136D4
.text:004136D4 loc_4136D4:                             ; CODE XREF: sub_413680+2B↑j
.text:004136D4                                         ; sub_413680+50↑j
.text:004136D4                 movzx   eax, bl
.text:004136D7                 mov     esi, [esp+1Ch+var_C]
.text:004136DB                 mov     ebx, [esp+1Ch+var_10]
.text:004136DF                 mov     edi, [esp+1Ch+var_8]
.text:004136E3                 mov     ebp, [esp+1Ch+var_4]
.text:004136E7                 add     esp, 1Ch
.text:004136EA                 retn
.text:004136EA sub_413680      endp
.text:004136EA
.text:004136EA ; ---------------------------------------------------------------------------
.text:004136EB                 align 10h
.text:004136F0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004136F0                                         ; DATA XREF: .data:Buffer↓o
.text:00413722 ; const char aSSS[]
.text:00413722 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_4139E0+50↓o
.text:0041372E aWrittenByS     db 'Written by %s.',0Ah,0
.text:0041372E                                         ; DATA XREF: sub_4139E0:loc_413A81↓o
.text:0041373E                 db 12h dup(90h)
.text:00413750 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00413750                                         ; DATA XREF: sub_4139E0+100↓o
.text:00413750                 db 'ere is NO',0Ah
.text:00413750                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00413750                 db 'R PURPOSE.',0Ah,0
.text:004137E8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:004137E8                                         ; DATA XREF: sub_4139E0:loc_413B21↓o
.text:004137FF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004137FF                                         ; DATA XREF: sub_4139E0:loc_413B2D↓o
.text:0041381B                 db 15h dup(90h)
.text:00413830 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00413830                                         ; DATA XREF: sub_4139E0:loc_413B39↓o
.text:00413830                 db 'and %s.',0Ah,0
.text:00413850 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00413850                                         ; DATA XREF: sub_4139E0:loc_413B45↓o
.text:00413850                 db '%s, and %s.',0Ah,0
.text:00413874                 db 1Ch dup(90h)
.text:00413890 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00413890                                         ; DATA XREF: sub_4139E0:loc_413B51↓o
.text:00413890                 db '%s, %s, and %s.',0Ah,0
.text:004138B8                 db 18h dup(90h)
.text:004138D0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:004138D0                                         ; DATA XREF: sub_4139E0:loc_413B5D↓o
.text:004138D0                 db '%s, %s, %s, and %s.',0Ah,0
.text:004138FC                 db 14h dup(90h)
.text:00413910 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00413910                                         ; DATA XREF: sub_4139E0:loc_413B69↓o
.text:00413910                 db '%s, %s, %s, %s,',0Ah
.text:00413910                 db 'and %s.',0Ah,0
.text:00413940                 db 10h dup(90h)
.text:00413950 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00413950                                         ; DATA XREF: sub_4139E0:loc_413B75↓o
.text:00413950                 db '%s, %s, %s, %s,',0Ah
.text:00413950                 db '%s, and %s.',0Ah,0
.text:00413984                 align 10h
.text:00413990 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00413990                                         ; DATA XREF: sub_4139E0:def_413A4D↓o
.text:00413990                 db '%s, %s, %s, %s,',0Ah
.text:00413990                 db '%s, %s, and others.',0Ah,0
.text:004139CC ; const char aSS_1[]
.text:004139CC aSS_1           db '%s %s',0Ah,0        ; DATA XREF: sub_4139E0+1B5↓o
.text:004139D3                 align 10h
.text:004139E0
.text:004139E0 ; =============== S U B R O U T I N E =======================================
.text:004139E0
.text:004139E0
.text:004139E0 ; int __cdecl sub_4139E0(FILE *, FILE *, int, int, va_list)
.text:004139E0 sub_4139E0      proc near               ; CODE XREF: sub_413BB0+2A↓p
.text:004139E0
.text:004139E0 Stream          = dword ptr -2Ch
.text:004139E0 Format          = dword ptr -28h
.text:004139E0 ArgList         = dword ptr -24h
.text:004139E0 var_20          = dword ptr -20h
.text:004139E0 var_1C          = dword ptr -1Ch
.text:004139E0 var_14          = dword ptr -14h
.text:004139E0 arg_0           = dword ptr  4
.text:004139E0 arg_4           = dword ptr  8
.text:004139E0 arg_8           = dword ptr  0Ch
.text:004139E0 arg_C           = dword ptr  10h
.text:004139E0 arg_10          = dword ptr  14h
.text:004139E0
.text:004139E0                 push    ebp
.text:004139E1                 push    edi
.text:004139E2                 push    esi
.text:004139E3                 push    ebx
.text:004139E4                 sub     esp, 1Ch
.text:004139E7                 xor     ebx, ebx
.text:004139E9                 mov     edi, [esp+2Ch+arg_10]
.text:004139ED                 mov     edx, [esp+2Ch+arg_8]
.text:004139F1                 mov     esi, [esp+2Ch+arg_0]
.text:004139F5                 mov     eax, [edi]
.text:004139F7                 mov     ecx, [esp+2Ch+arg_4]
.text:004139FB                 mov     [esp+2Ch+var_14], edx
.text:004139FF                 mov     ebp, [esp+2Ch+arg_C]
.text:00413A03                 lea     edx, [edi+4]
.text:00413A06                 test    eax, eax
.text:00413A08                 jz      short loc_413A1C
.text:00413A0A                 lea     esi, [esi+0]
.text:00413A10
.text:00413A10 loc_413A10:                             ; CODE XREF: sub_4139E0+3A↓j
.text:00413A10                 mov     eax, edx
.text:00413A12                 inc     ebx
.text:00413A13                 mov     eax, [eax]
.text:00413A15                 add     edx, 4
.text:00413A18                 test    eax, eax
.text:00413A1A                 jnz     short loc_413A10
.text:00413A1C
.text:00413A1C loc_413A1C:                             ; CODE XREF: sub_4139E0+28↑j
.text:00413A1C                 test    ecx, ecx
.text:00413A1E                 jz      loc_413B8D
.text:00413A24                 mov     [esp+2Ch+var_1C], ebp
.text:00413A28                 mov     edx, [esp+2Ch+var_14]
.text:00413A2C                 mov     [esp+2Ch+ArgList], ecx
.text:00413A30                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:00413A38                 mov     [esp+2Ch+var_20], edx
.text:00413A3C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00413A3F                 call    fprintf
.text:00413A44
.text:00413A44 loc_413A44:                             ; CODE XREF: sub_4139E0+1C9↓j
.text:00413A44                 cmp     ebx, 9          ; switch 10 cases
.text:00413A47                 ja      def_413A4D      ; jumptable 00413A4D default case
.text:00413A4D                 jmp     ds:jpt_413A4D[ebx*4] ; switch jump
.text:00413A4D ; ---------------------------------------------------------------------------
.text:00413A54 jpt_413A4D      dd offset loc_413A7C    ; DATA XREF: sub_4139E0+6D↑r
.text:00413A54                 dd offset loc_413A81    ; jump table for switch statement
.text:00413A54                 dd offset loc_413B21
.text:00413A54                 dd offset loc_413B2D
.text:00413A54                 dd offset loc_413B39
.text:00413A54                 dd offset loc_413B45
.text:00413A54                 dd offset loc_413B51
.text:00413A54                 dd offset loc_413B5D
.text:00413A54                 dd offset loc_413B69
.text:00413A54                 dd offset loc_413B75
.text:00413A7C ; ---------------------------------------------------------------------------
.text:00413A7C
.text:00413A7C loc_413A7C:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413A7C                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413A7C                 call    abort           ; jumptable 00413A4D case 0
.text:00413A81 ; ---------------------------------------------------------------------------
.text:00413A81
.text:00413A81 loc_413A81:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413A81                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413A81                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00413A4D case 1
.text:00413A88                 nop
.text:00413A89                 lea     esi, [esi+0]
.text:00413A90
.text:00413A90 loc_413A90:                             ; CODE XREF: sub_4139E0+148↓j
.text:00413A90                                         ; sub_4139E0+154↓j ...
.text:00413A90                 call    ds:libintl_gettext
.text:00413A96                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00413A9A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00413A9D                 mov     [esp+2Ch+Format], eax ; Format
.text:00413AA1                 call    vfprintf
.text:00413AA6                 mov     ebx, [esi+4]
.text:00413AA9                 dec     ebx
.text:00413AAA                 test    ebx, ebx
.text:00413AAC                 mov     [esi+4], ebx
.text:00413AAF                 js      short loc_413B0F
.text:00413AB1                 mov     edi, [esi]
.text:00413AB3                 mov     byte ptr [edi], 0Ah
.text:00413AB6                 inc     dword ptr [esi]
.text:00413AB8
.text:00413AB8 loc_413AB8:                             ; CODE XREF: sub_4139E0+13F↓j
.text:00413AB8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00413ABC                 mov     edx, Buffer
.text:00413AC2                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00413AC5                 call    fputs
.text:00413ACA                 mov     ebp, [esi+4]
.text:00413ACD                 dec     ebp
.text:00413ACE                 test    ebp, ebp
.text:00413AD0                 mov     [esi+4], ebp
.text:00413AD3                 js      short loc_413AFD
.text:00413AD5                 mov     ecx, [esi]
.text:00413AD7                 mov     byte ptr [ecx], 0Ah
.text:00413ADA                 inc     dword ptr [esi]
.text:00413ADC
.text:00413ADC loc_413ADC:                             ; CODE XREF: sub_4139E0+12D↓j
.text:00413ADC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00413AE0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00413AE7                 call    ds:libintl_gettext
.text:00413AED                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00413AF1                 add     esp, 1Ch
.text:00413AF4                 pop     ebx
.text:00413AF5                 pop     esi
.text:00413AF6                 pop     edi
.text:00413AF7                 pop     ebp
.text:00413AF8                 jmp     fputs
.text:00413AFD ; ---------------------------------------------------------------------------
.text:00413AFD
.text:00413AFD loc_413AFD:                             ; CODE XREF: sub_4139E0+F3↑j
.text:00413AFD                 mov     [esp+2Ch+Format], esi ; File
.text:00413B01                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00413B08                 call    _flsbuf
.text:00413B0D                 jmp     short loc_413ADC
.text:00413B0F ; ---------------------------------------------------------------------------
.text:00413B0F
.text:00413B0F loc_413B0F:                             ; CODE XREF: sub_4139E0+CF↑j
.text:00413B0F                 mov     [esp+2Ch+Format], esi ; File
.text:00413B13                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00413B1A                 call    _flsbuf
.text:00413B1F                 jmp     short loc_413AB8
.text:00413B21 ; ---------------------------------------------------------------------------
.text:00413B21
.text:00413B21 loc_413B21:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B21                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B21                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00413A4D case 2
.text:00413B28                 jmp     loc_413A90
.text:00413B2D ; ---------------------------------------------------------------------------
.text:00413B2D
.text:00413B2D loc_413B2D:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B2D                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B2D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00413A4D case 3
.text:00413B34                 jmp     loc_413A90
.text:00413B39 ; ---------------------------------------------------------------------------
.text:00413B39
.text:00413B39 loc_413B39:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B39                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B39                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00413A4D case 4
.text:00413B40                 jmp     loc_413A90
.text:00413B45 ; ---------------------------------------------------------------------------
.text:00413B45
.text:00413B45 loc_413B45:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B45                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B45                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00413A4D case 5
.text:00413B4C                 jmp     loc_413A90
.text:00413B51 ; ---------------------------------------------------------------------------
.text:00413B51
.text:00413B51 loc_413B51:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B51                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B51                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00413A4D case 6
.text:00413B58                 jmp     loc_413A90
.text:00413B5D ; ---------------------------------------------------------------------------
.text:00413B5D
.text:00413B5D loc_413B5D:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B5D                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B5D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00413A4D case 7
.text:00413B64                 jmp     loc_413A90
.text:00413B69 ; ---------------------------------------------------------------------------
.text:00413B69
.text:00413B69 loc_413B69:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B69                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B69                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00413A4D case 8
.text:00413B70                 jmp     loc_413A90
.text:00413B75 ; ---------------------------------------------------------------------------
.text:00413B75
.text:00413B75 loc_413B75:                             ; CODE XREF: sub_4139E0+6D↑j
.text:00413B75                                         ; DATA XREF: sub_4139E0:jpt_413A4D↑o
.text:00413B75                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00413A4D case 9
.text:00413B7C                 jmp     loc_413A90
.text:00413B81 ; ---------------------------------------------------------------------------
.text:00413B81
.text:00413B81 def_413A4D:                             ; CODE XREF: sub_4139E0+67↑j
.text:00413B81                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00413A4D default case
.text:00413B88                 jmp     loc_413A90
.text:00413B8D ; ---------------------------------------------------------------------------
.text:00413B8D
.text:00413B8D loc_413B8D:                             ; CODE XREF: sub_4139E0+3E↑j
.text:00413B8D                 mov     [esp+2Ch+var_20], ebp
.text:00413B91                 mov     ecx, [esp+2Ch+var_14]
.text:00413B95                 mov     [esp+2Ch+Format], offset aSS_1 ; "%s %s\n"
.text:00413B9D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00413BA0                 mov     [esp+2Ch+ArgList], ecx
.text:00413BA4                 call    fprintf
.text:00413BA9                 jmp     loc_413A44
.text:00413BA9 sub_4139E0      endp
.text:00413BA9
.text:00413BA9 ; ---------------------------------------------------------------------------
.text:00413BAE                 align 10h
.text:00413BB0
.text:00413BB0 ; =============== S U B R O U T I N E =======================================
.text:00413BB0
.text:00413BB0
.text:00413BB0 ; int __cdecl sub_413BB0(FILE *, FILE *, int, int, char)
.text:00413BB0 sub_413BB0      proc near               ; CODE XREF: sub_4025F0+70E↑p
.text:00413BB0
.text:00413BB0 var_1C          = dword ptr -1Ch
.text:00413BB0 var_18          = dword ptr -18h
.text:00413BB0 var_14          = dword ptr -14h
.text:00413BB0 var_10          = dword ptr -10h
.text:00413BB0 var_C           = dword ptr -0Ch
.text:00413BB0 arg_0           = dword ptr  4
.text:00413BB0 arg_4           = dword ptr  8
.text:00413BB0 arg_8           = dword ptr  0Ch
.text:00413BB0 arg_C           = dword ptr  10h
.text:00413BB0 arg_10          = byte ptr  14h
.text:00413BB0
.text:00413BB0                 sub     esp, 1Ch
.text:00413BB3                 mov     edx, [esp+1Ch+arg_C]
.text:00413BB7                 lea     ecx, [esp+1Ch+arg_10]
.text:00413BBB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00413BBF                 mov     ecx, [esp+1Ch+arg_8]
.text:00413BC3                 mov     [esp+1Ch+var_10], edx ; int
.text:00413BC7                 mov     edx, [esp+1Ch+arg_4]
.text:00413BCB                 mov     [esp+1Ch+var_14], ecx ; int
.text:00413BCF                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00413BD3                 mov     edx, [esp+1Ch+arg_0]
.text:00413BD7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00413BDA                 call    sub_4139E0
.text:00413BDF                 add     esp, 1Ch
.text:00413BE2                 retn
.text:00413BE2 sub_413BB0      endp
.text:00413BE2
.text:00413BE2 ; ---------------------------------------------------------------------------
.text:00413BE3                 align 10h
.text:00413BF0
.text:00413BF0 ; =============== S U B R O U T I N E =======================================
.text:00413BF0
.text:00413BF0
.text:00413BF0 ; int __cdecl sub_413BF0(int, int, char *, int, int)
.text:00413BF0 sub_413BF0      proc near               ; CODE XREF: sub_4025F0+23F↑p
.text:00413BF0
.text:00413BF0 var_1C          = dword ptr -1Ch
.text:00413BF0 var_18          = dword ptr -18h
.text:00413BF0 var_14          = dword ptr -14h
.text:00413BF0 var_10          = dword ptr -10h
.text:00413BF0 var_C           = dword ptr -0Ch
.text:00413BF0 var_8           = dword ptr -8
.text:00413BF0 var_4           = dword ptr -4
.text:00413BF0 arg_0           = dword ptr  4
.text:00413BF0 arg_4           = dword ptr  8
.text:00413BF0 arg_8           = dword ptr  0Ch
.text:00413BF0 arg_C           = dword ptr  10h
.text:00413BF0 arg_10          = dword ptr  14h
.text:00413BF0
.text:00413BF0                 sub     esp, 1Ch
.text:00413BF3                 mov     edx, [esp+1Ch+arg_C]
.text:00413BF7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00413BFF                 mov     ecx, [esp+1Ch+arg_10]
.text:00413C03                 mov     [esp+1Ch+var_8], 0 ; int
.text:00413C0B                 mov     [esp+1Ch+var_10], edx ; int
.text:00413C0F                 mov     edx, [esp+1Ch+arg_4]
.text:00413C13                 mov     [esp+1Ch+var_C], ecx ; int
.text:00413C17                 mov     ecx, [esp+1Ch+arg_8]
.text:00413C1B                 mov     [esp+1Ch+var_18], edx ; int
.text:00413C1F                 mov     edx, [esp+1Ch+arg_0]
.text:00413C23                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00413C27                 mov     [esp+1Ch+var_1C], edx ; int
.text:00413C2A                 call    sub_411540
.text:00413C2F                 add     esp, 1Ch
.text:00413C32                 retn
.text:00413C32 sub_413BF0      endp
.text:00413C32
.text:00413C32 ; ---------------------------------------------------------------------------
.text:00413C33                 align 10h
.text:00413C40                 sub     esp, 2Ch
.text:00413C43                 mov     edx, [esp+44h]
.text:00413C47                 mov     dword ptr [esp+18h], 0
.text:00413C4F                 mov     ecx, [esp+40h]
.text:00413C53                 mov     dword ptr [esp+14h], 0
.text:00413C5B                 mov     [esp+1Ch], edx
.text:00413C5F                 mov     edx, [esp+3Ch]
.text:00413C63                 mov     [esp+10h], ecx
.text:00413C67                 mov     ecx, [esp+38h]
.text:00413C6B                 mov     [esp+0Ch], edx
.text:00413C6F                 mov     edx, [esp+34h]
.text:00413C73                 mov     [esp+8], ecx
.text:00413C77                 mov     [esp+4], edx
.text:00413C7B                 mov     edx, [esp+30h]
.text:00413C7F                 mov     [esp], edx
.text:00413C82                 call    sub_4109B0
.text:00413C87                 add     esp, 2Ch
.text:00413C8A                 retn
.text:00413C8A ; ---------------------------------------------------------------------------
.text:00413C8B                 align 10h
.text:00413C90                 sub     esp, 1Ch
.text:00413C93                 mov     edx, [esp+2Ch]
.text:00413C97                 mov     dword ptr [esp+18h], 0
.text:00413C9F                 mov     ecx, [esp+30h]
.text:00413CA3                 mov     dword ptr [esp+14h], 1
.text:00413CAB                 mov     [esp+0Ch], edx
.text:00413CAF                 mov     edx, [esp+24h]
.text:00413CB3                 mov     [esp+10h], ecx
.text:00413CB7                 mov     ecx, [esp+28h]
.text:00413CBB                 mov     [esp+4], edx
.text:00413CBF                 mov     edx, [esp+20h]
.text:00413CC3                 mov     [esp+8], ecx
.text:00413CC7                 mov     [esp], edx
.text:00413CCA                 call    sub_411540
.text:00413CCF                 add     esp, 1Ch
.text:00413CD2                 retn
.text:00413CD2 ; ---------------------------------------------------------------------------
.text:00413CD3                 align 10h
.text:00413CE0                 sub     esp, 2Ch
.text:00413CE3                 mov     edx, [esp+44h]
.text:00413CE7                 mov     dword ptr [esp+18h], 0
.text:00413CEF                 mov     ecx, [esp+40h]
.text:00413CF3                 mov     dword ptr [esp+14h], 1
.text:00413CFB                 mov     [esp+1Ch], edx
.text:00413CFF                 mov     edx, [esp+3Ch]
.text:00413D03                 mov     [esp+10h], ecx
.text:00413D07                 mov     ecx, [esp+38h]
.text:00413D0B                 mov     [esp+0Ch], edx
.text:00413D0F                 mov     edx, [esp+34h]
.text:00413D13                 mov     [esp+8], ecx
.text:00413D17                 mov     [esp+4], edx
.text:00413D1B                 mov     edx, [esp+30h]
.text:00413D1F                 mov     [esp], edx
.text:00413D22                 call    sub_4109B0
.text:00413D27                 add     esp, 2Ch
.text:00413D2A                 retn
.text:00413D2A ; ---------------------------------------------------------------------------
.text:00413D2B                 align 10h
.text:00413D30 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00413D30                                         ; DATA XREF: sub_413DA0+544↓o
.text:00413D58                 db 18h dup(90h)
.text:00413D70 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.text:00413D70                                         ; DATA XREF: sub_413DA0+54C↓o
.text:00413D96                 align 10h
.text:00413DA0
.text:00413DA0 ; =============== S U B R O U T I N E =======================================
.text:00413DA0
.text:00413DA0
.text:00413DA0 ; int __cdecl sub_413DA0(int, int, int, int, char *Str)
.text:00413DA0 sub_413DA0      proc near               ; CODE XREF: sub_4025F0+1FD↑p
.text:00413DA0                                         ; sub_4025F0+84F↑p ...
.text:00413DA0
.text:00413DA0 C               = dword ptr -3Ch
.text:00413DA0 Type            = dword ptr -38h
.text:00413DA0 Radix           = dword ptr -34h
.text:00413DA0 var_28          = dword ptr -28h
.text:00413DA0 var_24          = dword ptr -24h
.text:00413DA0 var_1D          = byte ptr -1Dh
.text:00413DA0 var_1C          = dword ptr -1Ch
.text:00413DA0 var_18          = dword ptr -18h
.text:00413DA0 var_14          = byte ptr -14h
.text:00413DA0 arg_0           = dword ptr  4
.text:00413DA0 arg_4           = dword ptr  8
.text:00413DA0 arg_8           = dword ptr  0Ch
.text:00413DA0 arg_C           = dword ptr  10h
.text:00413DA0 Str             = dword ptr  14h
.text:00413DA0
.text:00413DA0                 push    ebp
.text:00413DA1                 push    edi
.text:00413DA2                 push    esi
.text:00413DA3                 push    ebx
.text:00413DA4                 sub     esp, 2Ch
.text:00413DA7                 mov     ebp, [esp+3Ch+arg_8]
.text:00413DAB                 mov     [esp+3Ch+var_1C], 0
.text:00413DB3                 mov     esi, [esp+3Ch+arg_0]
.text:00413DB7                 cmp     ebp, 24h ; '$'
.text:00413DBA                 ja      loc_4142DC
.text:00413DC0                 mov     edi, [esp+3Ch+arg_4]
.text:00413DC4                 test    edi, edi
.text:00413DC6                 jz      loc_4142D3
.text:00413DCC
.text:00413DCC loc_413DCC:                             ; CODE XREF: sub_413DA0+537↓j
.text:00413DCC                 movzx   edx, byte ptr [esi]
.text:00413DCF                 mov     ebx, esi
.text:00413DD1                 mov     [esp+3Ch+var_1D], dl
.text:00413DD5                 lea     esi, [esi+0]
.text:00413DD9                 lea     edi, [edi+0]
.text:00413DE0
.text:00413DE0 loc_413DE0:                             ; CODE XREF: sub_413DA0+70↓j
.text:00413DE0                 movzx   edx, [esp+3Ch+var_1D]
.text:00413DE5                 mov     ecx, ds:__mb_cur_max
.text:00413DEB                 cmp     dword ptr [ecx], 1
.text:00413DEE                 jz      loc_4142C0
.text:00413DF4                 mov     [esp+3Ch+Type], 8 ; Type
.text:00413DFC                 mov     [esp+3Ch+C], edx ; C
.text:00413DFF                 call    _isctype
.text:00413E04
.text:00413E04 loc_413E04:                             ; CODE XREF: sub_413DA0+52E↓j
.text:00413E04                 test    eax, eax
.text:00413E06                 jz      short loc_413E12
.text:00413E08                 inc     ebx
.text:00413E09                 movzx   eax, byte ptr [ebx]
.text:00413E0C                 mov     [esp+3Ch+var_1D], al
.text:00413E10                 jmp     short loc_413DE0
.text:00413E12 ; ---------------------------------------------------------------------------
.text:00413E12
.text:00413E12 loc_413E12:                             ; CODE XREF: sub_413DA0+66↑j
.text:00413E12                 cmp     [esp+3Ch+var_1D], 2Dh ; '-'
.text:00413E17                 mov     eax, 4
.text:00413E1C                 jz      short loc_413E75
.text:00413E1E                 call    _errno
.text:00413E23                 mov     dword ptr [eax], 0
.text:00413E29                 mov     [esp+3Ch+Radix], ebp ; Radix
.text:00413E2D                 mov     [esp+3Ch+Type], edi ; EndPtr
.text:00413E31                 mov     [esp+3Ch+C], esi ; String
.text:00413E34                 call    strtoul
.text:00413E39                 mov     [esp+3Ch+var_18], eax
.text:00413E3D                 mov     eax, [edi]
.text:00413E3F                 cmp     eax, esi
.text:00413E41                 jz      loc_41428C
.text:00413E47                 call    _errno
.text:00413E4C                 mov     ebp, [eax]
.text:00413E4E                 test    ebp, ebp
.text:00413E50                 jnz     loc_41426B
.text:00413E56
.text:00413E56 loc_413E56:                             ; CODE XREF: sub_413DA0+4DD↓j
.text:00413E56                                         ; sub_413DA0+51A↓j
.text:00413E56                 mov     eax, [esp+3Ch+Str]
.text:00413E5A                 test    eax, eax
.text:00413E5C                 jz      short loc_413E67
.text:00413E5E                 mov     ecx, [edi]
.text:00413E60                 movzx   eax, byte ptr [ecx]
.text:00413E63                 test    al, al
.text:00413E65                 jnz     short loc_413E7D
.text:00413E67
.text:00413E67 loc_413E67:                             ; CODE XREF: sub_413DA0+BC↑j
.text:00413E67                                         ; sub_413DA0+26C↓j ...
.text:00413E67                 mov     edx, [esp+3Ch+var_18]
.text:00413E6B                 mov     esi, [esp+3Ch+arg_C]
.text:00413E6F                 mov     eax, [esp+3Ch+var_1C]
.text:00413E73                 mov     [esi], edx
.text:00413E75
.text:00413E75 loc_413E75:                             ; CODE XREF: sub_413DA0+7C↑j
.text:00413E75                                         ; sub_413DA0+112↓j ...
.text:00413E75                 add     esp, 2Ch
.text:00413E78                 pop     ebx
.text:00413E79                 pop     esi
.text:00413E7A                 pop     edi
.text:00413E7B                 pop     ebp
.text:00413E7C                 retn
.text:00413E7D ; ---------------------------------------------------------------------------
.text:00413E7D
.text:00413E7D loc_413E7D:                             ; CODE XREF: sub_413DA0+C5↑j
.text:00413E7D                 mov     [esp+3Ch+var_24], 1
.text:00413E85                 mov     edx, [esp+3Ch+Str]
.text:00413E89                 movsx   esi, al
.text:00413E8C                 mov     [esp+3Ch+Type], esi ; Val
.text:00413E90                 mov     ebx, 400h
.text:00413E95                 mov     [esp+3Ch+C], edx ; Str
.text:00413E98                 call    strchr
.text:00413E9D                 test    eax, eax
.text:00413E9F                 jnz     short loc_413EB4
.text:00413EA1
.text:00413EA1 def_413F04:                             ; CODE XREF: sub_413DA0+162↓j
.text:00413EA1                                         ; sub_413DA0+164↓j
.text:00413EA1                                         ; DATA XREF: ...
.text:00413EA1                 mov     eax, [esp+3Ch+var_1C] ; jumptable 00413F04 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00413EA5                 mov     ebx, [esp+3Ch+var_18]
.text:00413EA9                 mov     edi, [esp+3Ch+arg_C]
.text:00413EAD                 or      eax, 2
.text:00413EB0                 mov     [edi], ebx
.text:00413EB2                 jmp     short loc_413E75
.text:00413EB4 ; ---------------------------------------------------------------------------
.text:00413EB4
.text:00413EB4 loc_413EB4:                             ; CODE XREF: sub_413DA0+FF↑j
.text:00413EB4                 mov     [esp+3Ch+Type], 30h ; '0' ; Val
.text:00413EBC                 mov     ebp, [esp+3Ch+Str]
.text:00413EC0                 mov     [esp+3Ch+C], ebp ; Str
.text:00413EC3                 call    strchr
.text:00413EC8                 test    eax, eax
.text:00413ECA                 jz      loc_414260
.text:00413ED0                 mov     ecx, [edi]
.text:00413ED2                 mov     [esp+3Ch+var_28], ecx
.text:00413ED6                 movsx   eax, byte ptr [ecx+1]
.text:00413EDA                 cmp     eax, 44h ; 'D'
.text:00413EDD                 jz      loc_414229
.text:00413EE3                 cmp     eax, 44h ; 'D'
.text:00413EE6                 jg      loc_41423B
.text:00413EEC                 cmp     eax, 42h ; 'B'
.text:00413EEF                 jz      loc_414229
.text:00413EF5
.text:00413EF5 loc_413EF5:                             ; CODE XREF: sub_413DA0+496↓j
.text:00413EF5                                         ; sub_413DA0+49E↓j ...
.text:00413EF5                 mov     esi, [esp+3Ch+var_28]
.text:00413EF9                 movsx   eax, byte ptr [esi]
.text:00413EFC                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:00413EFF                 cmp     eax, 35h
.text:00413F02                 ja      short def_413F04 ; jumptable 00413F04 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00413F04                 jmp     ds:jpt_413F04[eax*4] ; switch jump
.text:00413F04 ; ---------------------------------------------------------------------------
.text:00413F0B                 align 4
.text:00413F0C jpt_413F04      dd offset loc_41402B, offset def_413F04, offset def_413F04
.text:00413F0C                                         ; DATA XREF: sub_413DA0+164↑r
.text:00413F0C                 dd offset loc_41403B, offset def_413F04, offset loc_41412C ; jump table for switch statement
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset loc_414169, offset def_413F04, offset loc_41419B
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_414075
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset loc_4141D9, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_4140B2
.text:00413F0C                 dd offset loc_4140EF, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_413FE4
.text:00413F0C                 dd offset loc_413FF6, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset loc_41412C, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_414169
.text:00413F0C                 dd offset def_413F04, offset loc_41419B, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset def_413F04
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_4141D9
.text:00413F0C                 dd offset def_413F04, offset def_413F04, offset loc_414216
.text:00413FE4 ; ---------------------------------------------------------------------------
.text:00413FE4
.text:00413FE4 loc_413FE4:                             ; CODE XREF: sub_413DA0+164↑j
.text:00413FE4                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:00413FE4                 mov     eax, [esp+3Ch+var_18] ; jumptable 00413F04 case 98
.text:00413FE8                 cmp     eax, 7FFFFFh
.text:00413FED                 ja      short loc_41401C
.text:00413FEF                 shl     eax, 9
.text:00413FF2
.text:00413FF2 loc_413FF2:                             ; CODE XREF: sub_413DA0+299↓j
.text:00413FF2                                         ; sub_413DA0+484↓j
.text:00413FF2                 mov     [esp+3Ch+var_18], eax
.text:00413FF6
.text:00413FF6 loc_413FF6:                             ; CODE XREF: sub_413DA0+164↑j
.text:00413FF6                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:00413FF6                 xor     eax, eax        ; jumptable 00413F04 case 99
.text:00413FF8
.text:00413FF8 loc_413FF8:                             ; CODE XREF: sub_413DA0+289↓j
.text:00413FF8                                         ; sub_413DA0+2CA↓j ...
.text:00413FF8                 or      [esp+3Ch+var_1C], eax
.text:00413FFC                 mov     ebp, [esp+3Ch+var_28]
.text:00414000                 mov     ecx, [esp+3Ch+var_24]
.text:00414004                 add     ebp, ecx
.text:00414006                 mov     [edi], ebp
.text:00414008                 cmp     byte ptr [ebp+0], 0
.text:0041400C                 jz      loc_413E67
.text:00414012                 or      [esp+3Ch+var_1C], 2
.text:00414017                 jmp     loc_413E67
.text:0041401C ; ---------------------------------------------------------------------------
.text:0041401C
.text:0041401C loc_41401C:                             ; CODE XREF: sub_413DA0+24D↑j
.text:0041401C                                         ; sub_413DA0+294↓j ...
.text:0041401C                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00414024                 mov     eax, 1
.text:00414029                 jmp     short loc_413FF8
.text:0041402B ; ---------------------------------------------------------------------------
.text:0041402B
.text:0041402B loc_41402B:                             ; CODE XREF: sub_413DA0+164↑j
.text:0041402B                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:0041402B                 mov     eax, [esp+3Ch+var_18] ; jumptable 00413F04 case 66
.text:0041402F                 cmp     eax, 3FFFFFh
.text:00414034                 ja      short loc_41401C
.text:00414036                 shl     eax, 0Ah
.text:00414039                 jmp     short loc_413FF2
.text:0041403B ; ---------------------------------------------------------------------------
.text:0041403B
.text:0041403B loc_41403B:                             ; CODE XREF: sub_413DA0+164↑j
.text:0041403B                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:0041403B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 case 69
.text:0041403F                 xor     ebp, ebp
.text:00414041                 mov     esi, 5
.text:00414046
.text:00414046 loc_414046:                             ; CODE XREF: sub_413DA0+2C8↓j
.text:00414046                 xor     edx, edx
.text:00414048                 mov     eax, 0FFFFFFFFh
.text:0041404D                 div     ebx
.text:0041404F                 mov     edx, [ecx]
.text:00414051                 cmp     eax, edx
.text:00414053                 jnb     short loc_41406C
.text:00414055                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0041405B                 mov     eax, 1
.text:00414060
.text:00414060 loc_414060:                             ; CODE XREF: sub_413DA0+2D3↓j
.text:00414060                 dec     esi
.text:00414061                 or      ebp, eax
.text:00414063                 cmp     esi, 0FFFFFFFFh
.text:00414066                 mov     eax, ebp
.text:00414068                 jnz     short loc_414046
.text:0041406A                 jmp     short loc_413FF8
.text:0041406C ; ---------------------------------------------------------------------------
.text:0041406C
.text:0041406C loc_41406C:                             ; CODE XREF: sub_413DA0+2B3↑j
.text:0041406C                 imul    edx, ebx
.text:0041406F                 xor     eax, eax
.text:00414071                 mov     [ecx], edx
.text:00414073                 jmp     short loc_414060
.text:00414075 ; ---------------------------------------------------------------------------
.text:00414075
.text:00414075 loc_414075:                             ; CODE XREF: sub_413DA0+164↑j
.text:00414075                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:00414075                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 case 80
.text:00414079                 xor     ebp, ebp
.text:0041407B                 mov     esi, 4
.text:00414080
.text:00414080 loc_414080:                             ; CODE XREF: sub_413DA0+302↓j
.text:00414080                 xor     edx, edx
.text:00414082                 mov     eax, 0FFFFFFFFh
.text:00414087                 div     ebx
.text:00414089                 mov     edx, [ecx]
.text:0041408B                 cmp     eax, edx
.text:0041408D                 jnb     short loc_4140A9
.text:0041408F                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:00414095                 mov     eax, 1
.text:0041409A
.text:0041409A loc_41409A:                             ; CODE XREF: sub_413DA0+310↓j
.text:0041409A                 dec     esi
.text:0041409B                 or      ebp, eax
.text:0041409D                 cmp     esi, 0FFFFFFFFh
.text:004140A0                 mov     eax, ebp
.text:004140A2                 jnz     short loc_414080
.text:004140A4                 jmp     loc_413FF8
.text:004140A9 ; ---------------------------------------------------------------------------
.text:004140A9
.text:004140A9 loc_4140A9:                             ; CODE XREF: sub_413DA0+2ED↑j
.text:004140A9                 imul    edx, ebx
.text:004140AC                 xor     eax, eax
.text:004140AE                 mov     [ecx], edx
.text:004140B0                 jmp     short loc_41409A
.text:004140B2 ; ---------------------------------------------------------------------------
.text:004140B2
.text:004140B2 loc_4140B2:                             ; CODE XREF: sub_413DA0+164↑j
.text:004140B2                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:004140B2                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 case 89
.text:004140B6                 xor     ebp, ebp
.text:004140B8                 mov     esi, 7
.text:004140BD
.text:004140BD loc_4140BD:                             ; CODE XREF: sub_413DA0+33F↓j
.text:004140BD                 xor     edx, edx
.text:004140BF                 mov     eax, 0FFFFFFFFh
.text:004140C4                 div     ebx
.text:004140C6                 mov     edx, [ecx]
.text:004140C8                 cmp     eax, edx
.text:004140CA                 jnb     short loc_4140E6
.text:004140CC                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004140D2                 mov     eax, 1
.text:004140D7
.text:004140D7 loc_4140D7:                             ; CODE XREF: sub_413DA0+34D↓j
.text:004140D7                 dec     esi
.text:004140D8                 or      ebp, eax
.text:004140DA                 cmp     esi, 0FFFFFFFFh
.text:004140DD                 mov     eax, ebp
.text:004140DF                 jnz     short loc_4140BD
.text:004140E1                 jmp     loc_413FF8
.text:004140E6 ; ---------------------------------------------------------------------------
.text:004140E6
.text:004140E6 loc_4140E6:                             ; CODE XREF: sub_413DA0+32A↑j
.text:004140E6                 imul    edx, ebx
.text:004140E9                 xor     eax, eax
.text:004140EB                 mov     [ecx], edx
.text:004140ED                 jmp     short loc_4140D7
.text:004140EF ; ---------------------------------------------------------------------------
.text:004140EF
.text:004140EF loc_4140EF:                             ; CODE XREF: sub_413DA0+164↑j
.text:004140EF                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:004140EF                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 case 90
.text:004140F3                 xor     ebp, ebp
.text:004140F5                 mov     esi, 6
.text:004140FA
.text:004140FA loc_4140FA:                             ; CODE XREF: sub_413DA0+37C↓j
.text:004140FA                 xor     edx, edx
.text:004140FC                 mov     eax, 0FFFFFFFFh
.text:00414101                 div     ebx
.text:00414103                 mov     edx, [ecx]
.text:00414105                 cmp     eax, edx
.text:00414107                 jnb     short loc_414123
.text:00414109                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0041410F                 mov     eax, 1
.text:00414114
.text:00414114 loc_414114:                             ; CODE XREF: sub_413DA0+38A↓j
.text:00414114                 dec     esi
.text:00414115                 or      ebp, eax
.text:00414117                 cmp     esi, 0FFFFFFFFh
.text:0041411A                 mov     eax, ebp
.text:0041411C                 jnz     short loc_4140FA
.text:0041411E                 jmp     loc_413FF8
.text:00414123 ; ---------------------------------------------------------------------------
.text:00414123
.text:00414123 loc_414123:                             ; CODE XREF: sub_413DA0+367↑j
.text:00414123                 imul    edx, ebx
.text:00414126                 xor     eax, eax
.text:00414128                 mov     [ecx], edx
.text:0041412A                 jmp     short loc_414114
.text:0041412C ; ---------------------------------------------------------------------------
.text:0041412C
.text:0041412C loc_41412C:                             ; CODE XREF: sub_413DA0+164↑j
.text:0041412C                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:0041412C                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 cases 71,103
.text:00414130                 xor     ebp, ebp
.text:00414132                 mov     esi, 2
.text:00414137
.text:00414137 loc_414137:                             ; CODE XREF: sub_413DA0+3B9↓j
.text:00414137                 xor     edx, edx
.text:00414139                 mov     eax, 0FFFFFFFFh
.text:0041413E                 div     ebx
.text:00414140                 mov     edx, [ecx]
.text:00414142                 cmp     eax, edx
.text:00414144                 jnb     short loc_414160
.text:00414146                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:0041414C                 mov     eax, 1
.text:00414151
.text:00414151 loc_414151:                             ; CODE XREF: sub_413DA0+3C7↓j
.text:00414151                 dec     esi
.text:00414152                 or      ebp, eax
.text:00414154                 cmp     esi, 0FFFFFFFFh
.text:00414157                 mov     eax, ebp
.text:00414159                 jnz     short loc_414137
.text:0041415B                 jmp     loc_413FF8
.text:00414160 ; ---------------------------------------------------------------------------
.text:00414160
.text:00414160 loc_414160:                             ; CODE XREF: sub_413DA0+3A4↑j
.text:00414160                 imul    edx, ebx
.text:00414163                 xor     eax, eax
.text:00414165                 mov     [ecx], edx
.text:00414167                 jmp     short loc_414151
.text:00414169 ; ---------------------------------------------------------------------------
.text:00414169
.text:00414169 loc_414169:                             ; CODE XREF: sub_413DA0+164↑j
.text:00414169                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:00414169                 xor     edx, edx        ; jumptable 00413F04 cases 75,107
.text:0041416B                 mov     eax, 0FFFFFFFFh
.text:00414170                 div     ebx
.text:00414172                 mov     edx, [esp+3Ch+var_18]
.text:00414176                 cmp     eax, edx
.text:00414178                 jnb     short loc_414190
.text:0041417A                 mov     [esp+3Ch+var_18], 0FFFFFFFFh
.text:00414182                 mov     edx, 1
.text:00414187
.text:00414187 loc_414187:                             ; CODE XREF: sub_413DA0+3F9↓j
.text:00414187                 xor     eax, eax
.text:00414189                 or      eax, edx
.text:0041418B                 jmp     loc_413FF8
.text:00414190 ; ---------------------------------------------------------------------------
.text:00414190
.text:00414190 loc_414190:                             ; CODE XREF: sub_413DA0+3D8↑j
.text:00414190                 imul    edx, ebx
.text:00414193                 mov     [esp+3Ch+var_18], edx
.text:00414197                 xor     edx, edx
.text:00414199                 jmp     short loc_414187
.text:0041419B ; ---------------------------------------------------------------------------
.text:0041419B
.text:0041419B loc_41419B:                             ; CODE XREF: sub_413DA0+164↑j
.text:0041419B                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:0041419B                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 cases 77,109
.text:0041419F                 xor     ebp, ebp
.text:004141A1                 mov     esi, 1
.text:004141A6
.text:004141A6 loc_4141A6:                             ; CODE XREF: sub_413DA0+42E↓j
.text:004141A6                 xor     edx, edx
.text:004141A8                 mov     eax, 0FFFFFFFFh
.text:004141AD                 div     ebx
.text:004141AF                 mov     edx, [ecx]
.text:004141B1                 cmp     eax, edx
.text:004141B3                 jnb     short loc_4141D0
.text:004141B5                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004141BB                 mov     eax, 1
.text:004141C0
.text:004141C0 loc_4141C0:                             ; CODE XREF: sub_413DA0+437↓j
.text:004141C0                 dec     esi
.text:004141C1                 or      ebp, eax
.text:004141C3                 cmp     esi, 0FFFFFFFFh
.text:004141C6                 mov     eax, ebp
.text:004141C8                 jz      loc_413FF8
.text:004141CE                 jmp     short loc_4141A6
.text:004141D0 ; ---------------------------------------------------------------------------
.text:004141D0
.text:004141D0 loc_4141D0:                             ; CODE XREF: sub_413DA0+413↑j
.text:004141D0                 imul    edx, ebx
.text:004141D3                 xor     eax, eax
.text:004141D5                 mov     [ecx], edx
.text:004141D7                 jmp     short loc_4141C0
.text:004141D9 ; ---------------------------------------------------------------------------
.text:004141D9
.text:004141D9 loc_4141D9:                             ; CODE XREF: sub_413DA0+164↑j
.text:004141D9                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:004141D9                 lea     ecx, [esp+3Ch+var_18] ; jumptable 00413F04 cases 84,116
.text:004141DD                 xor     ebp, ebp
.text:004141DF                 mov     esi, 3
.text:004141E4
.text:004141E4 loc_4141E4:                             ; CODE XREF: sub_413DA0+466↓j
.text:004141E4                 xor     edx, edx
.text:004141E6                 mov     eax, 0FFFFFFFFh
.text:004141EB                 div     ebx
.text:004141ED                 mov     edx, [ecx]
.text:004141EF                 cmp     eax, edx
.text:004141F1                 jnb     short loc_41420D
.text:004141F3                 mov     dword ptr [ecx], 0FFFFFFFFh
.text:004141F9                 mov     eax, 1
.text:004141FE
.text:004141FE loc_4141FE:                             ; CODE XREF: sub_413DA0+474↓j
.text:004141FE                 dec     esi
.text:004141FF                 or      ebp, eax
.text:00414201                 cmp     esi, 0FFFFFFFFh
.text:00414204                 mov     eax, ebp
.text:00414206                 jnz     short loc_4141E4
.text:00414208                 jmp     loc_413FF8
.text:0041420D ; ---------------------------------------------------------------------------
.text:0041420D
.text:0041420D loc_41420D:                             ; CODE XREF: sub_413DA0+451↑j
.text:0041420D                 imul    edx, ebx
.text:00414210                 xor     eax, eax
.text:00414212                 mov     [ecx], edx
.text:00414214                 jmp     short loc_4141FE
.text:00414216 ; ---------------------------------------------------------------------------
.text:00414216
.text:00414216 loc_414216:                             ; CODE XREF: sub_413DA0+164↑j
.text:00414216                                         ; DATA XREF: sub_413DA0:jpt_413F04↑o
.text:00414216                 mov     eax, [esp+3Ch+var_18] ; jumptable 00413F04 case 119
.text:0041421A                 test    eax, eax
.text:0041421C                 js      loc_41401C
.text:00414222                 add     eax, eax
.text:00414224                 jmp     loc_413FF2
.text:00414229 ; ---------------------------------------------------------------------------
.text:00414229
.text:00414229 loc_414229:                             ; CODE XREF: sub_413DA0+13D↑j
.text:00414229                                         ; sub_413DA0+14F↑j
.text:00414229                 mov     [esp+3Ch+var_24], 2
.text:00414231                 mov     ebx, 3E8h
.text:00414236                 jmp     loc_413EF5
.text:0041423B ; ---------------------------------------------------------------------------
.text:0041423B
.text:0041423B loc_41423B:                             ; CODE XREF: sub_413DA0+146↑j
.text:0041423B                 cmp     eax, 69h ; 'i'
.text:0041423E                 jnz     loc_413EF5
.text:00414244                 mov     edx, [esp+3Ch+var_28]
.text:00414248                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0041424C                 jnz     loc_413EF5
.text:00414252                 mov     [esp+3Ch+var_24], 3
.text:0041425A                 jmp     loc_413EF5
.text:0041425A ; ---------------------------------------------------------------------------
.text:0041425F                 align 10h
.text:00414260
.text:00414260 loc_414260:                             ; CODE XREF: sub_413DA0+12A↑j
.text:00414260                 mov     eax, [edi]
.text:00414262                 mov     [esp+3Ch+var_28], eax
.text:00414266                 jmp     loc_413EF5
.text:0041426B ; ---------------------------------------------------------------------------
.text:0041426B
.text:0041426B loc_41426B:                             ; CODE XREF: sub_413DA0+B0↑j
.text:0041426B                 call    _errno
.text:00414270                 cmp     dword ptr [eax], 22h ; '"'
.text:00414273                 jnz     short loc_414282
.text:00414275                 mov     [esp+3Ch+var_1C], 1
.text:0041427D                 jmp     loc_413E56
.text:00414282 ; ---------------------------------------------------------------------------
.text:00414282
.text:00414282 loc_414282:                             ; CODE XREF: sub_413DA0+4D3↑j
.text:00414282                                         ; sub_413DA0+4F2↓j ...
.text:00414282                 mov     eax, 4
.text:00414287                 jmp     loc_413E75
.text:0041428C ; ---------------------------------------------------------------------------
.text:0041428C
.text:0041428C loc_41428C:                             ; CODE XREF: sub_413DA0+A1↑j
.text:0041428C                 mov     edx, [esp+3Ch+Str]
.text:00414290                 test    edx, edx
.text:00414292                 jz      short loc_414282
.text:00414294                 movzx   eax, byte ptr [eax]
.text:00414297                 test    al, al
.text:00414299                 jz      short loc_414282
.text:0041429B                 mov     ebx, [esp+3Ch+Str]
.text:0041429F                 movsx   esi, al
.text:004142A2                 mov     [esp+3Ch+Type], esi ; Val
.text:004142A6                 mov     [esp+3Ch+C], ebx ; Str
.text:004142A9                 call    strchr
.text:004142AE                 test    eax, eax
.text:004142B0                 jz      short loc_414282
.text:004142B2                 mov     [esp+3Ch+var_18], 1
.text:004142BA                 jmp     loc_413E56
.text:004142BA ; ---------------------------------------------------------------------------
.text:004142BF                 align 10h
.text:004142C0
.text:004142C0 loc_4142C0:                             ; CODE XREF: sub_413DA0+4E↑j
.text:004142C0                 mov     eax, ds:_pctype
.text:004142C5                 mov     ecx, [eax]
.text:004142C7                 movzx   eax, word ptr [ecx+edx*2]
.text:004142CB                 and     eax, 8
.text:004142CE                 jmp     loc_413E04
.text:004142D3 ; ---------------------------------------------------------------------------
.text:004142D3
.text:004142D3 loc_4142D3:                             ; CODE XREF: sub_413DA0+26↑j
.text:004142D3                 lea     edi, [esp+3Ch+var_14]
.text:004142D7                 jmp     loc_413DCC
.text:004142DC ; ---------------------------------------------------------------------------
.text:004142DC
.text:004142DC loc_4142DC:                             ; CODE XREF: sub_413DA0+1A↑j
.text:004142DC                 mov     [esp+3Ch+Radix], 70h ; 'p'
.text:004142E4                 mov     [esp+3Ch+Type], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:004142EC                 mov     [esp+3Ch+C], offset a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:004142F3                 call    _assert
.text:004142F3 sub_413DA0      endp
.text:004142F3
.text:004142F3 ; ---------------------------------------------------------------------------
.text:004142F8                 db 18h dup(90h)
.text:00414310 dword_414310    dd 0                    ; DATA XREF: sub_414340+D2↓o
.text:00414310                                         ; sub_414340:loc_414570↓o ...
.text:00414314 dword_414314    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:00414314                                         ; DATA XREF: .text:00414F2C↓r
.text:00414314                                         ; .text:00414F35↓r ...
.text:00414324 flt_414324      dd 0.1                  ; DATA XREF: sub_414340:loc_41438F↓r
.text:00414328 flt_414328      dd 4.2949673e9          ; DATA XREF: sub_414340+101↓r
.text:0041432C flt_41432C      dd 0.89999998           ; DATA XREF: sub_414340+66↓r
.text:00414330 flt_414330      dd 1.1                  ; DATA XREF: sub_414340+7A↓r
.text:00414334                 align 10h
.text:00414340
.text:00414340 ; =============== S U B R O U T I N E =======================================
.text:00414340
.text:00414340
.text:00414340 sub_414340      proc near               ; CODE XREF: sub_401B10+620↑p
.text:00414340                                         ; sub_414710+2E↓p
.text:00414340
.text:00414340 var_44          = qword ptr -44h
.text:00414340 Size            = dword ptr -3Ch
.text:00414340 var_38          = dword ptr -38h
.text:00414340 var_28          = dword ptr -28h
.text:00414340 var_24          = qword ptr -24h
.text:00414340 var_18          = word ptr -18h
.text:00414340 var_16          = word ptr -16h
.text:00414340 var_10          = dword ptr -10h
.text:00414340 var_C           = dword ptr -0Ch
.text:00414340 var_8           = dword ptr -8
.text:00414340 var_4           = dword ptr -4
.text:00414340 arg_0           = dword ptr  4
.text:00414340 arg_4           = dword ptr  8
.text:00414340 arg_8           = dword ptr  0Ch
.text:00414340 arg_C           = dword ptr  10h
.text:00414340 arg_10          = dword ptr  14h
.text:00414340
.text:00414340                 sub     esp, 3Ch
.text:00414343                 mov     [esp+3Ch+var_4], ebp
.text:00414347                 mov     ebp, [esp+3Ch+arg_8]
.text:0041434B                 mov     [esp+3Ch+var_10], ebx
.text:0041434F                 mov     ebx, [esp+3Ch+arg_4]
.text:00414353                 test    ebp, ebp
.text:00414355                 mov     [esp+3Ch+var_C], esi
.text:00414359                 mov     [esp+3Ch+var_8], edi
.text:0041435D                 jz      loc_414421
.text:00414363                 mov     edx, [esp+3Ch+arg_C]
.text:00414367                 test    edx, edx
.text:00414369                 jz      loc_414421
.text:0041436F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00414376                 call    malloc
.text:0041437B                 mov     esi, eax
.text:0041437D                 xor     eax, eax
.text:0041437F                 test    esi, esi
.text:00414381                 jz      loc_414423
.text:00414387                 test    ebx, ebx
.text:00414389                 jz      loc_414570
.text:0041438F
.text:0041438F loc_41438F:                             ; CODE XREF: sub_414340+235↓j
.text:0041438F                 fld     ds:flt_414324
.text:00414395                 fld     dword ptr [ebx+8]
.text:00414398                 mov     [esi+14h], ebx
.text:0041439B                 fucom   st(1)
.text:0041439D                 fnstsw  ax
.text:0041439F                 sahf
.text:004143A0                 jbe     loc_414560
.text:004143A6                 fld     ds:flt_41432C
.text:004143AC                 fucomp  st(1)
.text:004143AE                 fnstsw  ax
.text:004143B0                 sahf
.text:004143B1                 jbe     loc_414560
.text:004143B7                 fld     dword ptr [ebx+0Ch]
.text:004143BA                 fld     ds:flt_414330
.text:004143C0                 fxch    st(1)
.text:004143C2                 fucompp
.text:004143C4                 fnstsw  ax
.text:004143C6                 sahf
.text:004143C7                 jbe     loc_414560
.text:004143CD                 fld     dword ptr [ebx]
.text:004143CF                 fldz
.text:004143D1                 fxch    st(1)
.text:004143D3                 fucom   st(1)
.text:004143D5                 fnstsw  ax
.text:004143D7                 fstp    st(1)
.text:004143D9                 sahf
.text:004143DA                 jb      loc_414567
.text:004143E0                 faddp   st(2), st
.text:004143E2                 fld     dword ptr [ebx+4]
.text:004143E5                 fucom   st(2)
.text:004143E7                 fnstsw  ax
.text:004143E9                 sahf
.text:004143EA                 jbe     loc_414567
.text:004143F0                 fld1
.text:004143F2                 fucompp
.text:004143F4                 fnstsw  ax
.text:004143F6                 sahf
.text:004143F7                 jb      loc_414560
.text:004143FD                 fucom   st(1)
.text:004143FF                 fnstsw  ax
.text:00414401                 fstp    st(1)
.text:00414403                 sahf
.text:00414404                 ja      short loc_414437
.text:00414406                 lea     esi, [esi+0]
.text:00414409                 lea     edi, [edi+0]
.text:00414410
.text:00414410 loc_414410:                             ; CODE XREF: sub_414340+222↓j
.text:00414410                 fstp    st
.text:00414412                 mov     dword ptr [esi+14h], offset dword_414310
.text:00414419
.text:00414419 loc_414419:                             ; CODE XREF: sub_414340+155↓j
.text:00414419                                         ; sub_414340+1BF↓j ...
.text:00414419                 mov     [esp+3Ch+Size], esi ; Block
.text:0041441C                 call    free
.text:00414421
.text:00414421 loc_414421:                             ; CODE XREF: sub_414340+1D↑j
.text:00414421                                         ; sub_414340+29↑j
.text:00414421                 xor     eax, eax
.text:00414423
.text:00414423 loc_414423:                             ; CODE XREF: sub_414340+41↑j
.text:00414423                                         ; sub_414340+208↓j
.text:00414423                 mov     ebx, [esp+3Ch+var_10]
.text:00414427                 mov     esi, [esp+3Ch+var_C]
.text:0041442B                 mov     edi, [esp+3Ch+var_8]
.text:0041442F                 mov     ebp, [esp+3Ch+var_4]
.text:00414433                 add     esp, 3Ch
.text:00414436                 retn
.text:00414437 ; ---------------------------------------------------------------------------
.text:00414437
.text:00414437 loc_414437:                             ; CODE XREF: sub_414340+C4↑j
.text:00414437                 cmp     byte ptr [ebx+10h], 0
.text:0041443B                 jnz     loc_414554
.text:00414441                 fld     ds:flt_414328
.text:00414447                 xor     eax, eax
.text:00414449                 mov     ecx, [esp+3Ch+arg_0]
.text:0041444D                 push    eax
.text:0041444E                 push    ecx
.text:0041444F                 fild    [esp+44h+var_44]
.text:00414452                 add     esp, 8
.text:00414455                 fdivrp  st(2), st
.text:00414457                 fxch    st(1)
.text:00414459                 fucom   st(1)
.text:0041445B                 fnstsw  ax
.text:0041445D                 fstp    st(1)
.text:0041445F                 sahf
.text:00414460                 jnb     loc_41454D
.text:00414466                 fnstcw  [esp+3Ch+var_16]
.text:0041446A                 movzx   ebx, [esp+3Ch+var_16]
.text:0041446F                 or      bx, 0C00h
.text:00414474                 mov     [esp+3Ch+var_18], bx
.text:00414479                 fldcw   [esp+3Ch+var_18]
.text:0041447D                 fistp   [esp+3Ch+var_24]
.text:00414481                 fldcw   [esp+3Ch+var_16]
.text:00414485                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00414489                 mov     [esp+3Ch+arg_0], edx
.text:0041448D
.text:0041448D loc_41448D:                             ; CODE XREF: sub_414340+216↓j
.text:0041448D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:00414495                 ja      short loc_414419
.text:00414497                 mov     ecx, [esp+3Ch+arg_0]
.text:0041449B                 cmp     ecx, 9
.text:0041449E                 ja      short loc_4144A5
.text:004144A0                 mov     ecx, 0Ah
.text:004144A5
.text:004144A5 loc_4144A5:                             ; CODE XREF: sub_414340+15E↑j
.text:004144A5                 or      ecx, 1
.text:004144A8
.text:004144A8 loc_4144A8:                             ; CODE XREF: sub_414340+1B4↓j
.text:004144A8                 mov     [esp+3Ch+var_28], 3
.text:004144B0                 mov     edi, 9
.text:004144B5                 cmp     edi, ecx
.text:004144B7                 jnb     short loc_4144E5
.text:004144B9                 xor     edx, edx
.text:004144BB                 mov     eax, ecx
.text:004144BD                 div     [esp+3Ch+var_28]
.text:004144C1                 test    edx, edx
.text:004144C3                 jz      short loc_4144E5
.text:004144C5
.text:004144C5 loc_4144C5:                             ; CODE XREF: sub_414340+1A3↓j
.text:004144C5                 inc     [esp+3Ch+var_28]
.text:004144C9                 mov     edx, [esp+3Ch+var_28]
.text:004144CD                 lea     edi, [edi+edx*4]
.text:004144D0                 inc     edx
.text:004144D1                 cmp     edi, ecx
.text:004144D3                 mov     [esp+3Ch+var_28], edx
.text:004144D7                 jnb     short loc_4144E5
.text:004144D9                 xor     edx, edx
.text:004144DB                 mov     eax, ecx
.text:004144DD                 div     [esp+3Ch+var_28]
.text:004144E1                 test    edx, edx
.text:004144E3                 jnz     short loc_4144C5
.text:004144E5
.text:004144E5 loc_4144E5:                             ; CODE XREF: sub_414340+177↑j
.text:004144E5                                         ; sub_414340+183↑j ...
.text:004144E5                 xor     edx, edx
.text:004144E7                 mov     eax, ecx
.text:004144E9                 div     [esp+3Ch+var_28]
.text:004144ED                 test    edx, edx
.text:004144EF                 jnz     short loc_4144F6
.text:004144F1                 add     ecx, 2
.text:004144F4                 jmp     short loc_4144A8
.text:004144F6 ; ---------------------------------------------------------------------------
.text:004144F6
.text:004144F6 loc_4144F6:                             ; CODE XREF: sub_414340+1AF↑j
.text:004144F6                 mov     [esi+8], ecx
.text:004144F9                 cmp     ecx, 1FFFFFFFh
.text:004144FF                 ja      loc_414419
.text:00414505                 mov     [esp+3Ch+Size], ecx ; Count
.text:00414508                 mov     [esp+3Ch+var_38], 8 ; Size
.text:00414510                 call    calloc
.text:00414515                 mov     [esi+18h], ebp
.text:00414518                 mov     ebx, [esi+8]
.text:0041451B                 mov     ebp, [esp+3Ch+arg_C]
.text:0041451F                 mov     [esi], eax
.text:00414521                 mov     edi, [esp+3Ch+arg_10]
.text:00414525                 lea     ecx, [eax+ebx*8]
.text:00414528                 mov     [esi+4], ecx
.text:0041452B                 mov     eax, esi
.text:0041452D                 mov     dword ptr [esi+0Ch], 0
.text:00414534                 mov     dword ptr [esi+10h], 0
.text:0041453B                 mov     [esi+1Ch], ebp
.text:0041453E                 mov     [esi+20h], edi
.text:00414541                 mov     dword ptr [esi+24h], 0
.text:00414548                 jmp     loc_414423
.text:0041454D ; ---------------------------------------------------------------------------
.text:0041454D
.text:0041454D loc_41454D:                             ; CODE XREF: sub_414340+120↑j
.text:0041454D                 fstp    st
.text:0041454F                 jmp     loc_414419
.text:00414554 ; ---------------------------------------------------------------------------
.text:00414554
.text:00414554 loc_414554:                             ; CODE XREF: sub_414340+FB↑j
.text:00414554                 fstp    st
.text:00414556                 jmp     loc_41448D
.text:00414556 ; ---------------------------------------------------------------------------
.text:0041455B                 align 10h
.text:00414560
.text:00414560 loc_414560:                             ; CODE XREF: sub_414340+60↑j
.text:00414560                                         ; sub_414340+71↑j ...
.text:00414560                 fstp    st
.text:00414562                 jmp     loc_414410
.text:00414567 ; ---------------------------------------------------------------------------
.text:00414567
.text:00414567 loc_414567:                             ; CODE XREF: sub_414340+9A↑j
.text:00414567                                         ; sub_414340+AA↑j
.text:00414567                 fstp    st
.text:00414569                 jmp     short loc_414560
.text:00414569 ; ---------------------------------------------------------------------------
.text:0041456B                 align 10h
.text:00414570
.text:00414570 loc_414570:                             ; CODE XREF: sub_414340+49↑j
.text:00414570                 mov     ebx, offset dword_414310
.text:00414575                 jmp     loc_41438F
.text:00414575 sub_414340      endp
.text:00414575
.text:00414575 ; ---------------------------------------------------------------------------
.text:0041457A                 align 10h
.text:00414580                 push    edi
.text:00414581                 push    esi
.text:00414582                 push    ebx
.text:00414583                 sub     esp, 10h
.text:00414586                 mov     edi, [esp+20h]
.text:0041458A                 mov     esi, [edi]
.text:0041458C                 mov     eax, [edi+4]
.text:0041458F                 cmp     esi, eax
.text:00414591                 jnb     short loc_4145E7
.text:00414593                 lea     esi, [esi+0]
.text:00414599                 lea     edi, [edi+0]
.text:004145A0
.text:004145A0 loc_4145A0:                             ; CODE XREF: .text:004145E5↓j
.text:004145A0                 mov     ecx, [esi]
.text:004145A2                 test    ecx, ecx
.text:004145A4                 jz      short loc_4145E0
.text:004145A6                 mov     ebx, [esi+4]
.text:004145A9                 test    ebx, ebx
.text:004145AB                 jz      short loc_414611
.text:004145AD                 mov     ecx, [edi+20h]
.text:004145B0
.text:004145B0 loc_4145B0:                             ; CODE XREF: .text:004145CA↓j
.text:004145B0                 test    ecx, ecx
.text:004145B2                 jnz     short loc_414605
.text:004145B4
.text:004145B4 loc_4145B4:                             ; CODE XREF: .text:0041460F↓j
.text:004145B4                 mov     dword ptr [ebx], 0
.text:004145BA                 mov     edx, [ebx+4]
.text:004145BD                 mov     eax, [edi+24h]
.text:004145C0                 test    edx, edx
.text:004145C2                 mov     [ebx+4], eax
.text:004145C5                 mov     [edi+24h], ebx
.text:004145C8                 mov     ebx, edx
.text:004145CA                 jnz     short loc_4145B0
.text:004145CC
.text:004145CC loc_4145CC:                             ; CODE XREF: .text:00414614↓j
.text:004145CC                 test    ecx, ecx
.text:004145CE                 jnz     short loc_4145FC
.text:004145D0
.text:004145D0 loc_4145D0:                             ; CODE XREF: .text:00414603↓j
.text:004145D0                 mov     dword ptr [esi+4], 0
.text:004145D7                 mov     eax, [edi+4]
.text:004145DA                 mov     dword ptr [esi], 0
.text:004145E0
.text:004145E0 loc_4145E0:                             ; CODE XREF: .text:004145A4↑j
.text:004145E0                 add     esi, 8
.text:004145E3                 cmp     esi, eax
.text:004145E5                 jb      short loc_4145A0
.text:004145E7
.text:004145E7 loc_4145E7:                             ; CODE XREF: .text:00414591↑j
.text:004145E7                 mov     dword ptr [edi+0Ch], 0
.text:004145EE                 mov     dword ptr [edi+10h], 0
.text:004145F5                 add     esp, 10h
.text:004145F8                 pop     ebx
.text:004145F9                 pop     esi
.text:004145FA                 pop     edi
.text:004145FB                 retn
.text:004145FC ; ---------------------------------------------------------------------------
.text:004145FC
.text:004145FC loc_4145FC:                             ; CODE XREF: .text:004145CE↑j
.text:004145FC                 mov     ebx, [esi]
.text:004145FE                 mov     [esp], ebx
.text:00414601                 call    ecx
.text:00414603                 jmp     short loc_4145D0
.text:00414605 ; ---------------------------------------------------------------------------
.text:00414605
.text:00414605 loc_414605:                             ; CODE XREF: .text:004145B2↑j
.text:00414605                 mov     edx, [ebx]
.text:00414607                 mov     [esp], edx
.text:0041460A                 call    ecx
.text:0041460C                 mov     ecx, [edi+20h]
.text:0041460F                 jmp     short loc_4145B4
.text:00414611 ; ---------------------------------------------------------------------------
.text:00414611
.text:00414611 loc_414611:                             ; CODE XREF: .text:004145AB↑j
.text:00414611                 mov     ecx, [edi+20h]
.text:00414614                 jmp     short loc_4145CC
.text:00414614 ; ---------------------------------------------------------------------------
.text:00414616                 align 10h
.text:00414620
.text:00414620 ; =============== S U B R O U T I N E =======================================
.text:00414620
.text:00414620
.text:00414620 ; int __cdecl sub_414620(void *)
.text:00414620 sub_414620      proc near               ; CODE XREF: sub_401B10+2C5↑p
.text:00414620
.text:00414620 Block           = dword ptr -1Ch
.text:00414620 arg_0           = dword ptr  4
.text:00414620
.text:00414620                 push    ebp
.text:00414621                 push    edi
.text:00414622                 push    esi
.text:00414623                 push    ebx
.text:00414624                 sub     esp, 0Ch
.text:00414627                 mov     ebp, [esp+1Ch+arg_0]
.text:0041462B                 mov     eax, [ebp+20h]
.text:0041462E                 test    eax, eax
.text:00414630                 jz      loc_4146FC
.text:00414636                 mov     eax, [ebp+10h]
.text:00414639                 test    eax, eax
.text:0041463B                 jz      loc_4146FC
.text:00414641                 mov     edi, [ebp+0]
.text:00414644                 mov     eax, [ebp+4]
.text:00414647                 cmp     edi, eax
.text:00414649                 jnb     short loc_4146BB
.text:0041464B
.text:0041464B loc_41464B:                             ; CODE XREF: sub_414620+57↓j
.text:0041464B                 mov     edx, [edi]
.text:0041464D                 test    edx, edx
.text:0041464F                 jz      short loc_414672
.text:00414651                 test    edi, edi
.text:00414653                 mov     ebx, edi
.text:00414655                 jz      short loc_414672
.text:00414657                 mov     esi, esi
.text:00414659                 lea     edi, [edi+0]
.text:00414660
.text:00414660 loc_414660:                             ; CODE XREF: sub_414620+4D↓j
.text:00414660                 mov     ecx, [ebx]
.text:00414662                 mov     [esp+1Ch+Block], ecx
.text:00414665                 call    dword ptr [ebp+20h]
.text:00414668                 mov     ebx, [ebx+4]
.text:0041466B                 test    ebx, ebx
.text:0041466D                 jnz     short loc_414660
.text:0041466F                 mov     eax, [ebp+4]
.text:00414672
.text:00414672 loc_414672:                             ; CODE XREF: sub_414620+2F↑j
.text:00414672                                         ; sub_414620+35↑j
.text:00414672                 add     edi, 8
.text:00414675                 cmp     edi, eax
.text:00414677                 jb      short loc_41464B
.text:00414679                 mov     edx, [ebp+0]
.text:0041467C
.text:0041467C loc_41467C:                             ; CODE XREF: sub_414620+E2↓j
.text:0041467C                 cmp     edx, eax
.text:0041467E                 mov     edi, edx
.text:00414680                 jnb     short loc_4146BB
.text:00414682                 lea     esi, [esi+0]
.text:00414689                 lea     edi, [edi+0]
.text:00414690
.text:00414690 loc_414690:                             ; CODE XREF: sub_414620+99↓j
.text:00414690                 mov     ebx, [edi+4]
.text:00414693                 test    ebx, ebx
.text:00414695                 jz      short loc_4146B4
.text:00414697                 mov     esi, esi
.text:00414699                 lea     edi, [edi+0]
.text:004146A0
.text:004146A0 loc_4146A0:                             ; CODE XREF: sub_414620+8F↓j
.text:004146A0                 mov     esi, [ebx+4]
.text:004146A3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004146A6                 call    free
.text:004146AB                 test    esi, esi
.text:004146AD                 mov     ebx, esi
.text:004146AF                 jnz     short loc_4146A0
.text:004146B1                 mov     eax, [ebp+4]
.text:004146B4
.text:004146B4 loc_4146B4:                             ; CODE XREF: sub_414620+75↑j
.text:004146B4                 add     edi, 8
.text:004146B7                 cmp     edi, eax
.text:004146B9                 jb      short loc_414690
.text:004146BB
.text:004146BB loc_4146BB:                             ; CODE XREF: sub_414620+29↑j
.text:004146BB                                         ; sub_414620+60↑j
.text:004146BB                 mov     ebx, [ebp+24h]
.text:004146BE                 test    ebx, ebx
.text:004146C0                 jz      short loc_4146E1
.text:004146C2                 lea     esi, [esi+0]
.text:004146C9                 lea     edi, [edi+0]
.text:004146D0
.text:004146D0 loc_4146D0:                             ; CODE XREF: sub_414620+BF↓j
.text:004146D0                 mov     edi, [ebx+4]
.text:004146D3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004146D6                 call    free
.text:004146DB                 test    edi, edi
.text:004146DD                 mov     ebx, edi
.text:004146DF                 jnz     short loc_4146D0
.text:004146E1
.text:004146E1 loc_4146E1:                             ; CODE XREF: sub_414620+A0↑j
.text:004146E1                 mov     ebx, [ebp+0]
.text:004146E4                 mov     [esp+1Ch+Block], ebx ; Block
.text:004146E7                 call    free
.text:004146EC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:004146F0                 add     esp, 0Ch
.text:004146F3                 pop     ebx
.text:004146F4                 pop     esi
.text:004146F5                 pop     edi
.text:004146F6                 pop     ebp
.text:004146F7                 jmp     free
.text:004146FC ; ---------------------------------------------------------------------------
.text:004146FC
.text:004146FC loc_4146FC:                             ; CODE XREF: sub_414620+10↑j
.text:004146FC                                         ; sub_414620+1B↑j
.text:004146FC                 mov     edx, [ebp+0]
.text:004146FF                 mov     eax, [ebp+4]
.text:00414702                 jmp     loc_41467C
.text:00414702 sub_414620      endp
.text:00414702
.text:00414702 ; ---------------------------------------------------------------------------
.text:00414707                 align 10h
.text:00414710
.text:00414710 ; =============== S U B R O U T I N E =======================================
.text:00414710
.text:00414710
.text:00414710 sub_414710      proc near               ; CODE XREF: sub_414890+1B2↓p
.text:00414710                                         ; sub_414F60+156↓p
.text:00414710
.text:00414710 Block           = dword ptr -2Ch
.text:00414710 var_28          = dword ptr -28h
.text:00414710 var_24          = dword ptr -24h
.text:00414710 var_20          = dword ptr -20h
.text:00414710 var_1C          = dword ptr -1Ch
.text:00414710 var_18          = dword ptr -18h
.text:00414710 var_14          = dword ptr -14h
.text:00414710 arg_0           = dword ptr  4
.text:00414710 arg_4           = dword ptr  8
.text:00414710
.text:00414710                 push    ebp
.text:00414711                 push    edi
.text:00414712                 push    esi
.text:00414713                 push    ebx
.text:00414714                 sub     esp, 1Ch
.text:00414717                 mov     ebx, [esp+2Ch+arg_0]
.text:0041471B                 mov     edi, [ebx+20h]
.text:0041471E                 mov     [esp+2Ch+var_1C], edi
.text:00414722                 mov     esi, [ebx+1Ch]
.text:00414725                 mov     [esp+2Ch+var_20], esi
.text:00414729                 mov     edx, [ebx+18h]
.text:0041472C                 mov     [esp+2Ch+var_24], edx
.text:00414730                 mov     ecx, [ebx+14h]
.text:00414733                 mov     edx, [esp+2Ch+arg_4]
.text:00414737                 mov     [esp+2Ch+var_28], ecx
.text:0041473B                 mov     [esp+2Ch+Block], edx
.text:0041473E                 call    sub_414340
.text:00414743                 mov     edi, eax
.text:00414745                 xor     eax, eax
.text:00414747                 test    edi, edi
.text:00414749                 jz      loc_414812
.text:0041474F                 mov     ebp, [esp+2Ch+arg_0]
.text:00414753                 mov     edx, [ebp+0]
.text:00414756                 mov     eax, [ebp+4]
.text:00414759                 mov     ecx, [ebp+24h]
.text:0041475C                 mov     [esp+2Ch+var_14], edx
.text:00414760                 cmp     edx, eax
.text:00414762                 mov     [edi+24h], ecx
.text:00414765                 jnb     short loc_4147DD
.text:00414767                 mov     esi, esi
.text:00414769                 lea     edi, [edi+0]
.text:00414770
.text:00414770 loc_414770:                             ; CODE XREF: sub_414710+C5↓j
.text:00414770                 mov     edx, [esp+2Ch+var_14]
.text:00414774                 mov     ebx, [edx]
.text:00414776                 test    ebx, ebx
.text:00414778                 jz      short loc_4147CC
.text:0041477A                 mov     ebx, edx
.text:0041477C                 lea     esi, [esi+0]
.text:00414780
.text:00414780 loc_414780:                             ; CODE XREF: sub_414710+B3↓j
.text:00414780                 mov     ebp, [ebx]
.text:00414782                 mov     edx, [edi+8]
.text:00414785                 mov     [esp+2Ch+Block], ebp
.text:00414788                 mov     [esp+2Ch+var_28], edx
.text:0041478C                 call    dword ptr [edi+18h]
.text:0041478F                 mov     ecx, [edi]
.text:00414791                 lea     esi, [ecx+eax*8]
.text:00414794                 cmp     esi, [edi+4]
.text:00414797                 jnb     loc_414873
.text:0041479D                 mov     ecx, [esi]
.text:0041479F                 mov     eax, [ebx+4]
.text:004147A2                 test    ecx, ecx
.text:004147A4                 mov     [esp+2Ch+var_18], eax
.text:004147A8                 jz      loc_414850
.text:004147AE                 cmp     ebx, [esp+2Ch+var_14]
.text:004147B2                 jz      short loc_41481A
.text:004147B4                 mov     edx, [esi+4]
.text:004147B7                 mov     [ebx+4], edx
.text:004147BA                 mov     [esi+4], ebx
.text:004147BD
.text:004147BD loc_4147BD:                             ; CODE XREF: sub_414710+12A↓j
.text:004147BD                                         ; sub_414710+149↓j ...
.text:004147BD                 mov     ebx, [esp+2Ch+var_18]
.text:004147C1                 test    ebx, ebx
.text:004147C3                 jnz     short loc_414780
.text:004147C5                 mov     ecx, [esp+2Ch+arg_0]
.text:004147C9                 mov     eax, [ecx+4]
.text:004147CC
.text:004147CC loc_4147CC:                             ; CODE XREF: sub_414710+68↑j
.text:004147CC                 add     [esp+2Ch+var_14], 8
.text:004147D1                 cmp     [esp+2Ch+var_14], eax
.text:004147D5                 jb      short loc_414770
.text:004147D7                 mov     eax, [esp+2Ch+arg_0]
.text:004147DB                 mov     edx, [eax]
.text:004147DD
.text:004147DD loc_4147DD:                             ; CODE XREF: sub_414710+55↑j
.text:004147DD                 mov     [esp+2Ch+Block], edx ; Block
.text:004147E0                 call    free
.text:004147E5                 mov     ebx, [esp+2Ch+arg_0]
.text:004147E9                 mov     ebp, [edi]
.text:004147EB                 mov     ecx, [edi+4]
.text:004147EE                 mov     esi, [edi+8]
.text:004147F1                 mov     edx, [edi+0Ch]
.text:004147F4                 mov     [ebx], ebp
.text:004147F6                 mov     ebp, [edi+24h]
.text:004147F9                 mov     [ebx+4], ecx
.text:004147FC                 mov     [ebx+8], esi
.text:004147FF                 mov     [ebx+0Ch], edx
.text:00414802                 mov     [ebx+24h], ebp
.text:00414805                 mov     [esp+2Ch+Block], edi ; Block
.text:00414808                 call    free
.text:0041480D                 mov     eax, 1
.text:00414812
.text:00414812 loc_414812:                             ; CODE XREF: sub_414710+39↑j
.text:00414812                                         ; sub_414710+11D↓j
.text:00414812                 add     esp, 1Ch
.text:00414815                 pop     ebx
.text:00414816                 pop     esi
.text:00414817                 pop     edi
.text:00414818                 pop     ebp
.text:00414819                 retn
.text:0041481A ; ---------------------------------------------------------------------------
.text:0041481A
.text:0041481A loc_41481A:                             ; CODE XREF: sub_414710+A2↑j
.text:0041481A                 mov     eax, [edi+24h]
.text:0041481D                 test    eax, eax
.text:0041481F                 jz      short loc_41483C
.text:00414821                 mov     ebx, [eax+4]
.text:00414824                 mov     edx, eax
.text:00414826                 mov     [edi+24h], ebx
.text:00414829
.text:00414829 loc_414829:                             ; CODE XREF: sub_414710+13A↓j
.text:00414829                 xor     eax, eax
.text:0041482B                 test    edx, edx
.text:0041482D                 jz      short loc_414812
.text:0041482F                 mov     [edx], ebp
.text:00414831                 mov     ebp, [esi+4]
.text:00414834                 mov     [edx+4], ebp
.text:00414837                 mov     [esi+4], edx
.text:0041483A                 jmp     short loc_4147BD
.text:0041483C ; ---------------------------------------------------------------------------
.text:0041483C
.text:0041483C loc_41483C:                             ; CODE XREF: sub_414710+10F↑j
.text:0041483C                 mov     [esp+2Ch+Block], 8 ; Size
.text:00414843                 call    malloc
.text:00414848                 mov     edx, eax
.text:0041484A                 jmp     short loc_414829
.text:0041484A ; ---------------------------------------------------------------------------
.text:0041484C                 align 10h
.text:00414850
.text:00414850 loc_414850:                             ; CODE XREF: sub_414710+98↑j
.text:00414850                 inc     dword ptr [edi+0Ch]
.text:00414853                 cmp     ebx, [esp+2Ch+var_14]
.text:00414857                 mov     [esi], ebp
.text:00414859                 jz      loc_4147BD
.text:0041485F                 mov     dword ptr [ebx], 0
.text:00414865                 mov     esi, [edi+24h]
.text:00414868                 mov     [ebx+4], esi
.text:0041486B                 mov     [edi+24h], ebx
.text:0041486E                 jmp     loc_4147BD
.text:00414873 ; ---------------------------------------------------------------------------
.text:00414873
.text:00414873 loc_414873:                             ; CODE XREF: sub_414710+87↑j
.text:00414873                 call    abort
.text:00414873 sub_414710      endp
.text:00414873
.text:00414873 ; ---------------------------------------------------------------------------
.text:00414878 flt_414878      dd 0.1                  ; DATA XREF: sub_414890+C3↓r
.text:0041487C flt_41487C      dd 4.2949673e9          ; DATA XREF: sub_414890:loc_414A07↓r
.text:00414880 flt_414880      dd 0.89999998           ; DATA XREF: sub_414890+D6↓r
.text:00414884 flt_414884      dd 1.1                  ; DATA XREF: sub_414890+EA↓r
.text:00414888                 align 10h
.text:00414890
.text:00414890 ; =============== S U B R O U T I N E =======================================
.text:00414890
.text:00414890
.text:00414890 sub_414890      proc near               ; CODE XREF: sub_403C30+CF↑p
.text:00414890
.text:00414890 var_34          = qword ptr -34h
.text:00414890 Size            = dword ptr -2Ch
.text:00414890 var_28          = dword ptr -28h
.text:00414890 var_24          = dword ptr -24h
.text:00414890 var_20          = dword ptr -20h
.text:00414890 var_1C          = qword ptr -1Ch
.text:00414890 var_14          = word ptr -14h
.text:00414890 var_12          = word ptr -12h
.text:00414890 var_10          = dword ptr -10h
.text:00414890 var_8           = dword ptr -8
.text:00414890 var_4           = dword ptr -4
.text:00414890 arg_0           = dword ptr  4
.text:00414890 arg_4           = dword ptr  8
.text:00414890
.text:00414890                 sub     esp, 2Ch
.text:00414893                 mov     [esp+2Ch+var_8], ebx
.text:00414897                 mov     ebx, [esp+2Ch+arg_4]
.text:0041489B                 mov     [esp+2Ch+var_4], esi
.text:0041489F                 mov     esi, [esp+2Ch+arg_0]
.text:004148A3                 test    ebx, ebx
.text:004148A5                 jz      loc_414A7A
.text:004148AB                 mov     [esp+2Ch+var_20], 0
.text:004148B3                 lea     edx, [esp+2Ch+var_10]
.text:004148B7                 mov     [esp+2Ch+var_24], edx
.text:004148BB                 mov     [esp+2Ch+var_28], ebx
.text:004148BF                 mov     [esp+2Ch+Size], esi
.text:004148C2                 call    sub_4150F0
.text:004148C7                 test    eax, eax
.text:004148C9                 jz      short loc_4148D7
.text:004148CB
.text:004148CB loc_4148CB:                             ; CODE XREF: sub_414890+64↓j
.text:004148CB                                         ; sub_414890+7A↓j ...
.text:004148CB                 mov     ebx, [esp+2Ch+var_8]
.text:004148CF                 mov     esi, [esp+2Ch+var_4]
.text:004148D3                 add     esp, 2Ch
.text:004148D6                 retn
.text:004148D7 ; ---------------------------------------------------------------------------
.text:004148D7
.text:004148D7 loc_4148D7:                             ; CODE XREF: sub_414890+39↑j
.text:004148D7                 mov     eax, [esp+2Ch+var_10]
.text:004148DB                 mov     ecx, [eax]
.text:004148DD                 test    ecx, ecx
.text:004148DF                 jz      short loc_41491C
.text:004148E1                 mov     eax, [esi+24h]
.text:004148E4                 test    eax, eax
.text:004148E6                 jz      short loc_41490C
.text:004148E8                 mov     edx, [eax+4]
.text:004148EB                 mov     ecx, eax
.text:004148ED                 mov     [esi+24h], edx
.text:004148F0
.text:004148F0 loc_4148F0:                             ; CODE XREF: sub_414890+8A↓j
.text:004148F0                 xor     eax, eax
.text:004148F2                 test    ecx, ecx
.text:004148F4                 jz      short loc_4148CB
.text:004148F6                 inc     dword ptr [esi+10h]
.text:004148F9                 mov     edx, [esp+2Ch+var_10]
.text:004148FD                 mov     [ecx], ebx
.text:004148FF                 mov     eax, [edx+4]
.text:00414902                 mov     [ecx+4], eax
.text:00414905                 mov     [edx+4], ecx
.text:00414908
.text:00414908 loc_414908:                             ; CODE XREF: sub_414890+1C2↓j
.text:00414908                                         ; sub_414890+1D8↓j
.text:00414908                 mov     eax, ebx
.text:0041490A                 jmp     short loc_4148CB
.text:0041490C ; ---------------------------------------------------------------------------
.text:0041490C
.text:0041490C loc_41490C:                             ; CODE XREF: sub_414890+56↑j
.text:0041490C                 mov     [esp+2Ch+Size], 8 ; Size
.text:00414913                 call    malloc
.text:00414918                 mov     ecx, eax
.text:0041491A                 jmp     short loc_4148F0
.text:0041491C ; ---------------------------------------------------------------------------
.text:0041491C
.text:0041491C loc_41491C:                             ; CODE XREF: sub_414890+4F↑j
.text:0041491C                 inc     dword ptr [esi+0Ch]
.text:0041491F                 xor     edx, edx
.text:00414921                 mov     [eax], ebx
.text:00414923                 xor     eax, eax
.text:00414925                 mov     ecx, [esi+0Ch]
.text:00414928                 inc     dword ptr [esi+10h]
.text:0041492B                 push    eax
.text:0041492C                 push    ecx
.text:0041492D                 mov     eax, [esi+8]
.text:00414930                 mov     ecx, [esi+14h]
.text:00414933                 fild    [esp+34h+var_34]
.text:00414936                 add     esp, 8
.text:00414939                 push    edx
.text:0041493A                 push    eax
.text:0041493B                 fild    [esp+34h+var_34]
.text:0041493E                 add     esp, 8
.text:00414941                 fld     dword ptr [ecx+8]
.text:00414944                 fmul    st(1), st
.text:00414946                 fxch    st(2)
.text:00414948                 fucompp
.text:0041494A                 fnstsw  ax
.text:0041494C                 sahf
.text:0041494D                 jbe     loc_414A66
.text:00414953                 fld     ds:flt_414878
.text:00414959                 fxch    st(1)
.text:0041495B                 fucom   st(1)
.text:0041495D                 fnstsw  ax
.text:0041495F                 sahf
.text:00414960                 jbe     loc_414A6D
.text:00414966                 fld     ds:flt_414880
.text:0041496C                 fucomp  st(1)
.text:0041496E                 fnstsw  ax
.text:00414970                 sahf
.text:00414971                 jbe     loc_414A6D
.text:00414977                 fld     dword ptr [ecx+0Ch]
.text:0041497A                 fld     ds:flt_414884
.text:00414980                 fxch    st(1)
.text:00414982                 fucompp
.text:00414984                 fnstsw  ax
.text:00414986                 sahf
.text:00414987                 jbe     loc_414A6D
.text:0041498D                 fld     dword ptr [ecx]
.text:0041498F                 fldz
.text:00414991                 fxch    st(1)
.text:00414993                 fucom   st(1)
.text:00414995                 fnstsw  ax
.text:00414997                 fstp    st(1)
.text:00414999                 sahf
.text:0041499A                 jb      loc_414A76
.text:004149A0                 faddp   st(2), st
.text:004149A2                 fld     dword ptr [ecx+4]
.text:004149A5                 fucom   st(2)
.text:004149A7                 fnstsw  ax
.text:004149A9                 sahf
.text:004149AA                 jbe     loc_414A76
.text:004149B0                 fld1
.text:004149B2                 fucompp
.text:004149B4                 fnstsw  ax
.text:004149B6                 sahf
.text:004149B7                 jb      loc_414A6D
.text:004149BD                 fucompp
.text:004149BF                 fnstsw  ax
.text:004149C1                 sahf
.text:004149C2                 ja      short loc_4149D0
.text:004149C4
.text:004149C4 loc_4149C4:                             ; CODE XREF: sub_414890+1E1↓j
.text:004149C4                 mov     dword ptr [esi+14h], offset dword_414310
.text:004149CB                 mov     ecx, offset dword_414310
.text:004149D0
.text:004149D0 loc_4149D0:                             ; CODE XREF: sub_414890+132↑j
.text:004149D0                 mov     eax, [esi+0Ch]
.text:004149D3                 xor     edx, edx
.text:004149D5                 push    edx
.text:004149D6                 xor     edx, edx
.text:004149D8                 push    eax
.text:004149D9                 mov     eax, [esi+8]
.text:004149DC                 fild    [esp+34h+var_34]
.text:004149DF                 add     esp, 8
.text:004149E2                 push    edx
.text:004149E3                 push    eax
.text:004149E4                 fild    [esp+34h+var_34]
.text:004149E7                 add     esp, 8
.text:004149EA                 fld     dword ptr [ecx+8]
.text:004149ED                 fld     st
.text:004149EF                 fmul    st, st(2)
.text:004149F1                 fxch    st(3)
.text:004149F3                 fucomp  st(3)
.text:004149F5                 fnstsw  ax
.text:004149F7                 fstp    st(2)
.text:004149F9                 sahf
.text:004149FA                 jbe     short loc_414A64
.text:004149FC                 cmp     byte ptr [ecx+10h], 0
.text:00414A00                 fmul    dword ptr [ecx+0Ch]
.text:00414A03                 jnz     short loc_414A60
.text:00414A05                 fmulp   st(1), st
.text:00414A07
.text:00414A07 loc_414A07:                             ; CODE XREF: sub_414890+1D2↓j
.text:00414A07                 fld     ds:flt_41487C
.text:00414A0D                 fxch    st(1)
.text:00414A0F                 fucom   st(1)
.text:00414A11                 fnstsw  ax
.text:00414A13                 fstp    st(1)
.text:00414A15                 sahf
.text:00414A16                 jnb     short loc_414A57
.text:00414A18                 fnstcw  [esp+2Ch+var_12]
.text:00414A1C                 movzx   edx, [esp+2Ch+var_12]
.text:00414A21                 mov     [esp+2Ch+Size], esi
.text:00414A24                 or      dx, 0C00h
.text:00414A29                 mov     [esp+2Ch+var_14], dx
.text:00414A2E                 fldcw   [esp+2Ch+var_14]
.text:00414A32                 fistp   [esp+2Ch+var_1C]
.text:00414A36                 fldcw   [esp+2Ch+var_12]
.text:00414A3A                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:00414A3E                 mov     [esp+2Ch+var_28], ecx
.text:00414A42                 call    sub_414710
.text:00414A47                 test    al, al
.text:00414A49                 setz    dl
.text:00414A4C                 movzx   esi, dl
.text:00414A4F                 dec     esi
.text:00414A50                 and     ebx, esi
.text:00414A52                 jmp     loc_414908
.text:00414A57 ; ---------------------------------------------------------------------------
.text:00414A57
.text:00414A57 loc_414A57:                             ; CODE XREF: sub_414890+186↑j
.text:00414A57                 fstp    st
.text:00414A59                 xor     eax, eax
.text:00414A5B                 jmp     loc_4148CB
.text:00414A60 ; ---------------------------------------------------------------------------
.text:00414A60
.text:00414A60 loc_414A60:                             ; CODE XREF: sub_414890+173↑j
.text:00414A60                 fstp    st(1)
.text:00414A62                 jmp     short loc_414A07
.text:00414A64 ; ---------------------------------------------------------------------------
.text:00414A64
.text:00414A64 loc_414A64:                             ; CODE XREF: sub_414890+16A↑j
.text:00414A64                 fstp    st
.text:00414A66
.text:00414A66 loc_414A66:                             ; CODE XREF: sub_414890+BD↑j
.text:00414A66                 fstp    st
.text:00414A68                 jmp     loc_414908
.text:00414A6D ; ---------------------------------------------------------------------------
.text:00414A6D
.text:00414A6D loc_414A6D:                             ; CODE XREF: sub_414890+D0↑j
.text:00414A6D                                         ; sub_414890+E1↑j ...
.text:00414A6D                 fstp    st
.text:00414A6F                 fstp    st
.text:00414A71                 jmp     loc_4149C4
.text:00414A76 ; ---------------------------------------------------------------------------
.text:00414A76
.text:00414A76 loc_414A76:                             ; CODE XREF: sub_414890+10A↑j
.text:00414A76                                         ; sub_414890+11A↑j
.text:00414A76                 fstp    st
.text:00414A78                 jmp     short loc_414A6D
.text:00414A7A ; ---------------------------------------------------------------------------
.text:00414A7A
.text:00414A7A loc_414A7A:                             ; CODE XREF: sub_414890+15↑j
.text:00414A7A                 call    abort
.text:00414A7A sub_414890      endp
.text:00414A7A
.text:00414A7A ; ---------------------------------------------------------------------------
.text:00414A7F                 align 10h
.text:00414A80                 mov     edx, [esp+4]
.text:00414A84                 mov     eax, [edx+8]
.text:00414A87                 retn
.text:00414A87 ; ---------------------------------------------------------------------------
.text:00414A88                 align 10h
.text:00414A90                 mov     edx, [esp+4]
.text:00414A94                 mov     eax, [edx+0Ch]
.text:00414A97                 retn
.text:00414A97 ; ---------------------------------------------------------------------------
.text:00414A98                 align 10h
.text:00414AA0
.text:00414AA0 ; =============== S U B R O U T I N E =======================================
.text:00414AA0
.text:00414AA0
.text:00414AA0 sub_414AA0      proc near               ; CODE XREF: sub_401B10+2B3↑p
.text:00414AA0
.text:00414AA0 arg_0           = dword ptr  4
.text:00414AA0
.text:00414AA0                 mov     edx, [esp+arg_0]
.text:00414AA4                 mov     eax, [edx+10h]
.text:00414AA7                 retn
.text:00414AA7 sub_414AA0      endp
.text:00414AA7
.text:00414AA7 ; ---------------------------------------------------------------------------
.text:00414AA8                 align 10h
.text:00414AB0                 push    esi
.text:00414AB1                 xor     esi, esi
.text:00414AB3                 push    ebx
.text:00414AB4                 mov     edx, [esp+0Ch]
.text:00414AB8                 mov     ecx, [edx]
.text:00414ABA                 mov     ebx, [edx+4]
.text:00414ABD                 cmp     ecx, ebx
.text:00414ABF                 jnb     short loc_414B07
.text:00414AC1                 jmp     short loc_414AD0
.text:00414AC1 ; ---------------------------------------------------------------------------
.text:00414AC3                 align 10h
.text:00414AD0
.text:00414AD0 loc_414AD0:                             ; CODE XREF: .text:00414AC1↑j
.text:00414AD0                                         ; .text:00414B05↓j
.text:00414AD0                 mov     edx, [ecx]
.text:00414AD2                 test    edx, edx
.text:00414AD4                 jz      short loc_414B00
.text:00414AD6                 mov     eax, [ecx+4]
.text:00414AD9                 mov     edx, 1
.text:00414ADE                 test    eax, eax
.text:00414AE0                 jz      short loc_414AF8
.text:00414AE2                 lea     esi, [esi+0]
.text:00414AE9                 lea     edi, [edi+0]
.text:00414AF0
.text:00414AF0 loc_414AF0:                             ; CODE XREF: .text:00414AF6↓j
.text:00414AF0                 mov     eax, [eax+4]
.text:00414AF3                 inc     edx
.text:00414AF4                 test    eax, eax
.text:00414AF6                 jnz     short loc_414AF0
.text:00414AF8
.text:00414AF8 loc_414AF8:                             ; CODE XREF: .text:00414AE0↑j
.text:00414AF8                 cmp     edx, esi
.text:00414AFA                 jbe     short loc_414B00
.text:00414AFC                 mov     esi, edx
.text:00414AFE                 mov     esi, esi
.text:00414B00
.text:00414B00 loc_414B00:                             ; CODE XREF: .text:00414AD4↑j
.text:00414B00                                         ; .text:00414AFA↑j
.text:00414B00                 add     ecx, 8
.text:00414B03                 cmp     ecx, ebx
.text:00414B05                 jb      short loc_414AD0
.text:00414B07
.text:00414B07 loc_414B07:                             ; CODE XREF: .text:00414ABF↑j
.text:00414B07                 pop     ebx
.text:00414B08                 mov     eax, esi
.text:00414B0A                 pop     esi
.text:00414B0B                 retn
.text:00414B0B ; ---------------------------------------------------------------------------
.text:00414B0C                 align 10h
.text:00414B10                 push    edi
.text:00414B11                 xor     ecx, ecx
.text:00414B13                 push    esi
.text:00414B14                 xor     esi, esi
.text:00414B16                 push    ebx
.text:00414B17                 mov     edi, [esp+10h]
.text:00414B1B                 mov     edx, [edi]
.text:00414B1D                 mov     ebx, [edi+4]
.text:00414B20                 cmp     edx, ebx
.text:00414B22                 jnb     short loc_414B4F
.text:00414B24                 lea     esi, [esi+0]
.text:00414B2A                 lea     edi, [edi+0]
.text:00414B30
.text:00414B30 loc_414B30:                             ; CODE XREF: .text:00414B4D↓j
.text:00414B30                 mov     eax, [edx]
.text:00414B32                 test    eax, eax
.text:00414B34                 jz      short loc_414B48
.text:00414B36                 mov     eax, [edx+4]
.text:00414B39                 inc     esi
.text:00414B3A                 inc     ecx
.text:00414B3B                 test    eax, eax
.text:00414B3D                 jz      short loc_414B48
.text:00414B3F                 nop
.text:00414B40
.text:00414B40 loc_414B40:                             ; CODE XREF: .text:00414B46↓j
.text:00414B40                 mov     eax, [eax+4]
.text:00414B43                 inc     ecx
.text:00414B44                 test    eax, eax
.text:00414B46                 jnz     short loc_414B40
.text:00414B48
.text:00414B48 loc_414B48:                             ; CODE XREF: .text:00414B34↑j
.text:00414B48                                         ; .text:00414B3D↑j
.text:00414B48                 add     edx, 8
.text:00414B4B                 cmp     edx, ebx
.text:00414B4D                 jb      short loc_414B30
.text:00414B4F
.text:00414B4F loc_414B4F:                             ; CODE XREF: .text:00414B22↑j
.text:00414B4F                 cmp     esi, [edi+0Ch]
.text:00414B52                 jz      short loc_414B5A
.text:00414B54
.text:00414B54 loc_414B54:                             ; CODE XREF: .text:00414B5D↓j
.text:00414B54                 xor     eax, eax
.text:00414B56
.text:00414B56 loc_414B56:                             ; CODE XREF: .text:00414B64↓j
.text:00414B56                 pop     ebx
.text:00414B57                 pop     esi
.text:00414B58                 pop     edi
.text:00414B59                 retn
.text:00414B5A ; ---------------------------------------------------------------------------
.text:00414B5A
.text:00414B5A loc_414B5A:                             ; CODE XREF: .text:00414B52↑j
.text:00414B5A                 cmp     ecx, [edi+10h]
.text:00414B5D                 jnz     short loc_414B54
.text:00414B5F                 mov     eax, 1
.text:00414B64                 jmp     short loc_414B56
.text:00414B64 ; ---------------------------------------------------------------------------
.text:00414B66 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00414B66                                         ; DATA XREF: .text:00414C5E↓o
.text:00414B7E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00414B7E                                         ; DATA XREF: .text:00414C76↓o
.text:00414B96                 db 1Ah dup(90h)
.text:00414BB0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00414BB0                                         ; DATA XREF: .text:00414CB0↓o
.text:00414BD1 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00414BD1                                         ; DATA XREF: .text:00414CCA↓o
.text:00414BE9                 db 8Dh, 76h, 0
.text:00414BEC flt_414BEC      dd 100.0                ; DATA XREF: .text:00414CA3↓r
.text:00414BF0 ; ---------------------------------------------------------------------------
.text:00414BF0                 push    ebp
.text:00414BF1                 push    edi
.text:00414BF2                 push    esi
.text:00414BF3                 xor     esi, esi
.text:00414BF5                 push    ebx
.text:00414BF6                 sub     esp, 1Ch
.text:00414BF9                 mov     ebx, [esp+30h]
.text:00414BFD                 mov     edi, [esp+34h]
.text:00414C01                 mov     ecx, [ebx+10h]
.text:00414C04                 mov     eax, [ebx+0Ch]
.text:00414C07                 mov     ebp, [ebx+8]
.text:00414C0A                 mov     [esp+18h], ecx
.text:00414C0E                 mov     ecx, [ebx]
.text:00414C10                 mov     [esp+14h], eax
.text:00414C14                 mov     eax, [ebx+4]
.text:00414C17                 cmp     ecx, eax
.text:00414C19                 jnb     short loc_414C57
.text:00414C1B                 mov     ebx, eax
.text:00414C1D                 lea     esi, [esi+0]
.text:00414C20
.text:00414C20 loc_414C20:                             ; CODE XREF: .text:00414C55↓j
.text:00414C20                 mov     edx, [ecx]
.text:00414C22                 test    edx, edx
.text:00414C24                 jz      short loc_414C50
.text:00414C26                 mov     eax, [ecx+4]
.text:00414C29                 mov     edx, 1
.text:00414C2E                 test    eax, eax
.text:00414C30                 jz      short loc_414C48
.text:00414C32                 lea     esi, [esi+0]
.text:00414C39                 lea     edi, [edi+0]
.text:00414C40
.text:00414C40 loc_414C40:                             ; CODE XREF: .text:00414C46↓j
.text:00414C40                 mov     eax, [eax+4]
.text:00414C43                 inc     edx
.text:00414C44                 test    eax, eax
.text:00414C46                 jnz     short loc_414C40
.text:00414C48
.text:00414C48 loc_414C48:                             ; CODE XREF: .text:00414C30↑j
.text:00414C48                 cmp     edx, esi
.text:00414C4A                 jbe     short loc_414C50
.text:00414C4C                 mov     esi, edx
.text:00414C4E                 mov     esi, esi
.text:00414C50
.text:00414C50 loc_414C50:                             ; CODE XREF: .text:00414C24↑j
.text:00414C50                                         ; .text:00414C4A↑j
.text:00414C50                 add     ecx, 8
.text:00414C53                 cmp     ecx, ebx
.text:00414C55                 jb      short loc_414C20
.text:00414C57
.text:00414C57 loc_414C57:                             ; CODE XREF: .text:00414C19↑j
.text:00414C57                 mov     [esp], edi
.text:00414C5A                 mov     edx, [esp+18h]
.text:00414C5E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00414C66                 mov     [esp+8], edx
.text:00414C6A                 call    fprintf
.text:00414C6F                 mov     [esp+8], ebp
.text:00414C73                 mov     [esp], edi
.text:00414C76                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:00414C7E                 call    fprintf
.text:00414C83                 mov     ebx, [esp+14h]
.text:00414C87                 xor     eax, eax
.text:00414C89                 mov     ecx, ebp
.text:00414C8B                 push    eax
.text:00414C8C                 xor     ebp, ebp
.text:00414C8E                 push    ebx
.text:00414C8F                 fild    qword ptr [esp]
.text:00414C92                 add     esp, 8
.text:00414C95                 push    ebp
.text:00414C96                 push    ecx
.text:00414C97                 fild    qword ptr [esp]
.text:00414C9A                 fxch    st(1)
.text:00414C9C                 add     esp, 8
.text:00414C9F                 mov     ebx, [esp+14h]
.text:00414CA3                 fmul    ds:flt_414BEC
.text:00414CA9                 mov     [esp], edi
.text:00414CAC                 mov     [esp+8], ebx
.text:00414CB0                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00414CB8                 fdivrp  st(1), st
.text:00414CBA                 fstp    qword ptr [esp+0Ch]
.text:00414CBE                 call    fprintf
.text:00414CC3                 mov     [esp+8], esi
.text:00414CC7                 mov     [esp], edi
.text:00414CCA                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00414CD2                 call    fprintf
.text:00414CD7                 add     esp, 1Ch
.text:00414CDA                 pop     ebx
.text:00414CDB                 pop     esi
.text:00414CDC                 pop     edi
.text:00414CDD                 pop     ebp
.text:00414CDE                 retn
.text:00414CDE ; ---------------------------------------------------------------------------
.text:00414CDF                 align 10h
.text:00414CE0                 push    edi
.text:00414CE1                 push    esi
.text:00414CE2                 push    ebx
.text:00414CE3                 sub     esp, 10h
.text:00414CE6                 mov     esi, [esp+20h]
.text:00414CEA                 mov     edi, [esp+24h]
.text:00414CEE                 mov     edx, [esi+8]
.text:00414CF1                 mov     [esp], edi
.text:00414CF4                 mov     [esp+4], edx
.text:00414CF8                 call    dword ptr [esi+18h]
.text:00414CFB                 mov     ecx, [esi]
.text:00414CFD                 lea     eax, [ecx+eax*8]
.text:00414D00                 cmp     eax, [esi+4]
.text:00414D03                 jnb     short loc_414D44
.text:00414D05                 mov     ecx, [eax]
.text:00414D07                 test    ecx, ecx
.text:00414D09                 jz      short loc_414D37
.text:00414D0B                 test    eax, eax
.text:00414D0D                 mov     ebx, eax
.text:00414D0F                 jz      short loc_414D37
.text:00414D11                 jmp     short loc_414D20
.text:00414D11 ; ---------------------------------------------------------------------------
.text:00414D13                 align 10h
.text:00414D20
.text:00414D20 loc_414D20:                             ; CODE XREF: .text:00414D11↑j
.text:00414D20                                         ; .text:00414D35↓j
.text:00414D20                 mov     edx, [ebx]
.text:00414D22                 mov     [esp], edi
.text:00414D25                 mov     [esp+4], edx
.text:00414D29                 call    dword ptr [esi+1Ch]
.text:00414D2C                 test    al, al
.text:00414D2E                 jnz     short loc_414D40
.text:00414D30                 mov     ebx, [ebx+4]
.text:00414D33                 test    ebx, ebx
.text:00414D35                 jnz     short loc_414D20
.text:00414D37
.text:00414D37 loc_414D37:                             ; CODE XREF: .text:00414D09↑j
.text:00414D37                                         ; .text:00414D0F↑j
.text:00414D37                 xor     eax, eax
.text:00414D39
.text:00414D39 loc_414D39:                             ; CODE XREF: .text:00414D42↓j
.text:00414D39                 add     esp, 10h
.text:00414D3C                 pop     ebx
.text:00414D3D                 pop     esi
.text:00414D3E                 pop     edi
.text:00414D3F                 retn
.text:00414D40 ; ---------------------------------------------------------------------------
.text:00414D40
.text:00414D40 loc_414D40:                             ; CODE XREF: .text:00414D2E↑j
.text:00414D40                 mov     eax, [ebx]
.text:00414D42                 jmp     short loc_414D39
.text:00414D44 ; ---------------------------------------------------------------------------
.text:00414D44
.text:00414D44 loc_414D44:                             ; CODE XREF: .text:00414D03↑j
.text:00414D44                 call    abort
.text:00414D44 ; ---------------------------------------------------------------------------
.text:00414D49                 align 10h
.text:00414D50                 sub     esp, 0Ch
.text:00414D53                 mov     eax, [esp+10h]
.text:00414D57                 mov     edx, [eax+10h]
.text:00414D5A                 test    edx, edx
.text:00414D5C                 jz      short loc_414D83
.text:00414D5E                 mov     edx, [eax]
.text:00414D60                 mov     ecx, [eax+4]
.text:00414D63                 lea     esi, [esi+0]
.text:00414D69                 lea     edi, [edi+0]
.text:00414D70
.text:00414D70 loc_414D70:                             ; CODE XREF: .text:00414D7D↓j
.text:00414D70                 cmp     edx, ecx
.text:00414D72                 jnb     short loc_414D87
.text:00414D74                 mov     eax, [edx]
.text:00414D76                 test    eax, eax
.text:00414D78                 jnz     short loc_414D7F
.text:00414D7A                 add     edx, 8
.text:00414D7D                 jmp     short loc_414D70
.text:00414D7F ; ---------------------------------------------------------------------------
.text:00414D7F
.text:00414D7F loc_414D7F:                             ; CODE XREF: .text:00414D78↑j
.text:00414D7F                                         ; .text:00414D85↓j
.text:00414D7F                 add     esp, 0Ch
.text:00414D82                 retn
.text:00414D83 ; ---------------------------------------------------------------------------
.text:00414D83
.text:00414D83 loc_414D83:                             ; CODE XREF: .text:00414D5C↑j
.text:00414D83                 xor     eax, eax
.text:00414D85                 jmp     short loc_414D7F
.text:00414D87 ; ---------------------------------------------------------------------------
.text:00414D87
.text:00414D87 loc_414D87:                             ; CODE XREF: .text:00414D72↑j
.text:00414D87                 call    abort
.text:00414D87 ; ---------------------------------------------------------------------------
.text:00414D8C                 align 10h
.text:00414D90                 push    esi
.text:00414D91                 push    ebx
.text:00414D92                 sub     esp, 14h
.text:00414D95                 mov     ebx, [esp+20h]
.text:00414D99                 mov     esi, [esp+24h]
.text:00414D9D                 mov     edx, [ebx+8]
.text:00414DA0                 mov     [esp], esi
.text:00414DA3                 mov     [esp+4], edx
.text:00414DA7                 call    dword ptr [ebx+18h]
.text:00414DAA                 mov     ecx, [ebx]
.text:00414DAC                 lea     edx, [ecx+eax*8]
.text:00414DAF                 mov     ecx, [ebx+4]
.text:00414DB2                 cmp     edx, ecx
.text:00414DB4                 jnb     short loc_414E00
.text:00414DB6                 test    edx, edx
.text:00414DB8                 mov     eax, edx
.text:00414DBA                 jz      short loc_414DCB
.text:00414DBC                 lea     esi, [esi+0]
.text:00414DC0
.text:00414DC0 loc_414DC0:                             ; CODE XREF: .text:00414DC9↓j
.text:00414DC0                 cmp     [eax], esi
.text:00414DC2                 jz      short loc_414DF5
.text:00414DC4                 mov     eax, [eax+4]
.text:00414DC7
.text:00414DC7 loc_414DC7:                             ; CODE XREF: .text:00414DFA↓j
.text:00414DC7                 test    eax, eax
.text:00414DC9                 jnz     short loc_414DC0
.text:00414DCB
.text:00414DCB loc_414DCB:                             ; CODE XREF: .text:00414DBA↑j
.text:00414DCB                 add     edx, 8
.text:00414DCE                 cmp     edx, ecx
.text:00414DD0                 jnb     short loc_414DED
.text:00414DD2                 lea     esi, [esi+0]
.text:00414DD9                 lea     edi, [edi+0]
.text:00414DE0
.text:00414DE0 loc_414DE0:                             ; CODE XREF: .text:00414DEB↓j
.text:00414DE0                 mov     eax, [edx]
.text:00414DE2                 test    eax, eax
.text:00414DE4                 jnz     short loc_414DEF
.text:00414DE6                 add     edx, 8
.text:00414DE9                 cmp     edx, ecx
.text:00414DEB                 jb      short loc_414DE0
.text:00414DED
.text:00414DED loc_414DED:                             ; CODE XREF: .text:00414DD0↑j
.text:00414DED                 xor     eax, eax
.text:00414DEF
.text:00414DEF loc_414DEF:                             ; CODE XREF: .text:00414DE4↑j
.text:00414DEF                                         ; .text:00414DFE↓j
.text:00414DEF                 add     esp, 14h
.text:00414DF2                 pop     ebx
.text:00414DF3                 pop     esi
.text:00414DF4                 retn
.text:00414DF5 ; ---------------------------------------------------------------------------
.text:00414DF5
.text:00414DF5 loc_414DF5:                             ; CODE XREF: .text:00414DC2↑j
.text:00414DF5                 mov     eax, [eax+4]
.text:00414DF8                 test    eax, eax
.text:00414DFA                 jz      short loc_414DC7
.text:00414DFC                 mov     eax, [eax]
.text:00414DFE                 jmp     short loc_414DEF
.text:00414E00 ; ---------------------------------------------------------------------------
.text:00414E00
.text:00414E00 loc_414E00:                             ; CODE XREF: .text:00414DB4↑j
.text:00414E00                 call    abort
.text:00414E00 ; ---------------------------------------------------------------------------
.text:00414E05                 align 10h
.text:00414E10                 push    ebp
.text:00414E11                 xor     ecx, ecx
.text:00414E13                 push    edi
.text:00414E14                 push    esi
.text:00414E15                 push    ebx
.text:00414E16                 mov     edx, [esp+14h]
.text:00414E1A                 mov     ebp, [esp+18h]
.text:00414E1E                 mov     edi, [esp+1Ch]
.text:00414E22                 mov     ebx, [edx]
.text:00414E24                 mov     esi, [edx+4]
.text:00414E27                 cmp     ebx, esi
.text:00414E29                 jnb     short loc_414E60
.text:00414E2B                 nop
.text:00414E2C                 lea     esi, [esi+0]
.text:00414E30
.text:00414E30 loc_414E30:                             ; CODE XREF: .text:00414E57↓j
.text:00414E30                 mov     edx, [ebx]
.text:00414E32                 test    edx, edx
.text:00414E34                 jz      short loc_414E52
.text:00414E36                 mov     edx, ebx
.text:00414E38                 nop
.text:00414E39                 lea     esi, [esi+0]
.text:00414E40
.text:00414E40 loc_414E40:                             ; CODE XREF: .text:00414E50↓j
.text:00414E40                 cmp     ecx, edi
.text:00414E42                 jnb     short loc_414E60
.text:00414E44                 mov     eax, [edx]
.text:00414E46                 mov     edx, [edx+4]
.text:00414E49                 mov     [ebp+ecx*4+0], eax
.text:00414E4D                 inc     ecx
.text:00414E4E                 test    edx, edx
.text:00414E50                 jnz     short loc_414E40
.text:00414E52
.text:00414E52 loc_414E52:                             ; CODE XREF: .text:00414E34↑j
.text:00414E52                 add     ebx, 8
.text:00414E55                 cmp     ebx, esi
.text:00414E57                 jb      short loc_414E30
.text:00414E59                 lea     esi, [esi+0]
.text:00414E60
.text:00414E60 loc_414E60:                             ; CODE XREF: .text:00414E29↑j
.text:00414E60                                         ; .text:00414E42↑j
.text:00414E60                 pop     ebx
.text:00414E61                 mov     eax, ecx
.text:00414E63                 pop     esi
.text:00414E64                 pop     edi
.text:00414E65                 pop     ebp
.text:00414E66                 retn
.text:00414E66 ; ---------------------------------------------------------------------------
.text:00414E67                 align 10h
.text:00414E70                 push    ebp
.text:00414E71                 push    edi
.text:00414E72                 xor     edi, edi
.text:00414E74                 push    esi
.text:00414E75                 push    ebx
.text:00414E76                 sub     esp, 0Ch
.text:00414E79                 mov     edx, [esp+20h]
.text:00414E7D                 mov     ebp, [esp+28h]
.text:00414E81                 mov     esi, [edx]
.text:00414E83                 mov     eax, [edx+4]
.text:00414E86                 cmp     esi, eax
.text:00414E88                 jnb     short loc_414ED0
.text:00414E8A                 lea     esi, [esi+0]
.text:00414E90
.text:00414E90 loc_414E90:                             ; CODE XREF: .text:00414EC5↓j
.text:00414E90                 mov     ecx, [esi]
.text:00414E92                 test    ecx, ecx
.text:00414E94                 jz      short loc_414EC0
.text:00414E96                 mov     ebx, esi
.text:00414E98                 nop
.text:00414E99                 lea     esi, [esi+0]
.text:00414EA0
.text:00414EA0 loc_414EA0:                             ; CODE XREF: .text:00414EB7↓j
.text:00414EA0                 mov     [esp+4], ebp
.text:00414EA4                 mov     edx, [ebx]
.text:00414EA6                 mov     [esp], edx
.text:00414EA9                 call    dword ptr [esp+24h]
.text:00414EAD                 test    al, al
.text:00414EAF                 jz      short loc_414ED0
.text:00414EB1                 mov     ebx, [ebx+4]
.text:00414EB4                 inc     edi
.text:00414EB5                 test    ebx, ebx
.text:00414EB7                 jnz     short loc_414EA0
.text:00414EB9                 mov     ebx, [esp+20h]
.text:00414EBD                 mov     eax, [ebx+4]
.text:00414EC0
.text:00414EC0 loc_414EC0:                             ; CODE XREF: .text:00414E94↑j
.text:00414EC0                 add     esi, 8
.text:00414EC3                 cmp     esi, eax
.text:00414EC5                 jb      short loc_414E90
.text:00414EC7                 mov     esi, esi
.text:00414EC9                 lea     edi, [edi+0]
.text:00414ED0
.text:00414ED0 loc_414ED0:                             ; CODE XREF: .text:00414E88↑j
.text:00414ED0                                         ; .text:00414EAF↑j
.text:00414ED0                 add     esp, 0Ch
.text:00414ED3                 mov     eax, edi
.text:00414ED5                 pop     ebx
.text:00414ED6                 pop     esi
.text:00414ED7                 pop     edi
.text:00414ED8                 pop     ebp
.text:00414ED9                 retn
.text:00414ED9 ; ---------------------------------------------------------------------------
.text:00414EDA                 align 10h
.text:00414EE0                 push    esi
.text:00414EE1                 push    ebx
.text:00414EE2                 mov     ecx, [esp+0Ch]
.text:00414EE6                 xor     ebx, ebx
.text:00414EE8                 mov     esi, [esp+10h]
.text:00414EEC                 movzx   edx, byte ptr [ecx]
.text:00414EEF                 test    dl, dl
.text:00414EF1                 jz      short loc_414F1A
.text:00414EF3                 lea     esi, [esi+0]
.text:00414EF9                 lea     edi, [edi+0]
.text:00414F00
.text:00414F00 loc_414F00:                             ; CODE XREF: .text:00414F18↓j
.text:00414F00                 mov     eax, ebx
.text:00414F02                 inc     ecx
.text:00414F03                 shl     eax, 5
.text:00414F06                 sub     eax, ebx
.text:00414F08                 movzx   ebx, dl
.text:00414F0B                 add     eax, ebx
.text:00414F0D                 xor     edx, edx
.text:00414F0F                 div     esi
.text:00414F11                 mov     ebx, edx
.text:00414F13                 movzx   edx, byte ptr [ecx]
.text:00414F16                 test    dl, dl
.text:00414F18                 jnz     short loc_414F00
.text:00414F1A
.text:00414F1A loc_414F1A:                             ; CODE XREF: .text:00414EF1↑j
.text:00414F1A                 mov     eax, ebx
.text:00414F1C                 pop     ebx
.text:00414F1D                 pop     esi
.text:00414F1E                 retn
.text:00414F1E ; ---------------------------------------------------------------------------
.text:00414F1F                 align 10h
.text:00414F20                 mov     ecx, [esp+4]
.text:00414F24                 mov     edx, ds:dword_414310
.text:00414F2A                 mov     [ecx], edx
.text:00414F2C                 mov     edx, ds:dword_414314
.text:00414F32                 mov     [ecx+4], edx
.text:00414F35                 mov     edx, ds:dword_414314+4
.text:00414F3B                 mov     [ecx+8], edx
.text:00414F3E                 mov     edx, ds:dword_414314+8
.text:00414F44                 mov     [ecx+0Ch], edx
.text:00414F47                 mov     edx, ds:dword_414314+0Ch
.text:00414F4D                 mov     [ecx+10h], edx
.text:00414F50                 retn
.text:00414F50 ; ---------------------------------------------------------------------------
.text:00414F51                 align 4
.text:00414F54 flt_414F54      dd 0.1                  ; DATA XREF: sub_414F60+79↓r
.text:00414F58 flt_414F58      dd 0.89999998           ; DATA XREF: sub_414F60+8D↓r
.text:00414F5C flt_414F5C      dd 1.1                  ; DATA XREF: sub_414F60+A1↓r
.text:00414F60
.text:00414F60 ; =============== S U B R O U T I N E =======================================
.text:00414F60
.text:00414F60
.text:00414F60 sub_414F60      proc near               ; CODE XREF: sub_401B10+252↑p
.text:00414F60
.text:00414F60 var_34          = qword ptr -34h
.text:00414F60 var_2C          = dword ptr -2Ch
.text:00414F60 var_28          = dword ptr -28h
.text:00414F60 var_24          = dword ptr -24h
.text:00414F60 var_20          = dword ptr -20h
.text:00414F60 var_1C          = qword ptr -1Ch
.text:00414F60 var_14          = word ptr -14h
.text:00414F60 var_12          = word ptr -12h
.text:00414F60 var_10          = dword ptr -10h
.text:00414F60 arg_0           = dword ptr  4
.text:00414F60 arg_4           = dword ptr  8
.text:00414F60
.text:00414F60                 push    esi
.text:00414F61                 push    ebx
.text:00414F62                 sub     esp, 24h
.text:00414F65                 lea     edx, [esp+2Ch+var_10]
.text:00414F69                 mov     [esp+2Ch+var_24], edx
.text:00414F6D                 mov     ebx, [esp+2Ch+arg_0]
.text:00414F71                 mov     edx, [esp+2Ch+arg_4]
.text:00414F75                 mov     [esp+2Ch+var_20], 1
.text:00414F7D                 mov     [esp+2Ch+var_2C], ebx
.text:00414F80                 mov     [esp+2Ch+var_28], edx
.text:00414F84                 call    sub_4150F0
.text:00414F89                 mov     esi, eax
.text:00414F8B                 xor     eax, eax
.text:00414F8D                 test    esi, esi
.text:00414F8F                 jz      loc_4150C2
.text:00414F95                 dec     dword ptr [ebx+10h]
.text:00414F98                 mov     ecx, [esp+2Ch+var_10]
.text:00414F9C                 mov     edx, [ecx]
.text:00414F9E                 test    edx, edx
.text:00414FA0                 jnz     loc_4150C0
.text:00414FA6                 dec     dword ptr [ebx+0Ch]
.text:00414FA9                 xor     eax, eax
.text:00414FAB                 xor     edx, edx
.text:00414FAD                 mov     ecx, [ebx+0Ch]
.text:00414FB0                 push    eax
.text:00414FB1                 push    ecx
.text:00414FB2                 mov     eax, [ebx+8]
.text:00414FB5                 mov     ecx, [ebx+14h]
.text:00414FB8                 fild    [esp+34h+var_34]
.text:00414FBB                 add     esp, 8
.text:00414FBE                 push    edx
.text:00414FBF                 push    eax
.text:00414FC0                 fild    [esp+34h+var_34]
.text:00414FC3                 add     esp, 8
.text:00414FC6                 fld     dword ptr [ecx]
.text:00414FC8                 fmul    st(1), st
.text:00414FCA                 fxch    st(1)
.text:00414FCC                 fucomp  st(2)
.text:00414FCE                 fnstsw  ax
.text:00414FD0                 fstp    st(1)
.text:00414FD2                 sahf
.text:00414FD3                 jbe     loc_4150D0
.text:00414FD9                 fld     ds:flt_414F54
.text:00414FDF                 fld     dword ptr [ecx+8]
.text:00414FE2                 fucom   st(1)
.text:00414FE4                 fnstsw  ax
.text:00414FE6                 sahf
.text:00414FE7                 jbe     loc_4150E0
.text:00414FED                 fld     ds:flt_414F58
.text:00414FF3                 fucomp  st(1)
.text:00414FF5                 fnstsw  ax
.text:00414FF7                 sahf
.text:00414FF8                 jbe     loc_4150E0
.text:00414FFE                 fld     dword ptr [ecx+0Ch]
.text:00415001                 fld     ds:flt_414F5C
.text:00415007                 fxch    st(1)
.text:00415009                 fucompp
.text:0041500B                 fnstsw  ax
.text:0041500D                 sahf
.text:0041500E                 jbe     loc_4150E0
.text:00415014                 fldz
.text:00415016                 fxch    st(3)
.text:00415018                 fucom   st(3)
.text:0041501A                 fnstsw  ax
.text:0041501C                 fstp    st(3)
.text:0041501E                 sahf
.text:0041501F                 jb      loc_4150E0
.text:00415025                 fxch    st(1)
.text:00415027                 faddp   st(2), st
.text:00415029                 fld     dword ptr [ecx+4]
.text:0041502C                 fucom   st(2)
.text:0041502E                 fnstsw  ax
.text:00415030                 sahf
.text:00415031                 jbe     loc_4150E0
.text:00415037                 fld1
.text:00415039                 fucompp
.text:0041503B                 fnstsw  ax
.text:0041503D                 sahf
.text:0041503E                 jb      loc_4150D4
.text:00415044                 fucompp
.text:00415046                 fnstsw  ax
.text:00415048                 sahf
.text:00415049                 ja      short loc_41505C
.text:0041504B                 nop
.text:0041504C                 lea     esi, [esi+0]
.text:00415050
.text:00415050 loc_415050:                             ; CODE XREF: sub_414F60+178↓j
.text:00415050                 mov     dword ptr [ebx+14h], offset dword_414310
.text:00415057                 mov     ecx, offset dword_414310
.text:0041505C
.text:0041505C loc_41505C:                             ; CODE XREF: sub_414F60+E9↑j
.text:0041505C                 mov     eax, [ebx+0Ch]
.text:0041505F                 xor     edx, edx
.text:00415061                 push    edx
.text:00415062                 xor     edx, edx
.text:00415064                 push    eax
.text:00415065                 mov     eax, [ebx+8]
.text:00415068                 fild    [esp+34h+var_34]
.text:0041506B                 add     esp, 8
.text:0041506E                 push    edx
.text:0041506F                 push    eax
.text:00415070                 fild    [esp+34h+var_34]
.text:00415073                 add     esp, 8
.text:00415076                 fld     dword ptr [ecx]
.text:00415078                 fmul    st, st(1)
.text:0041507A                 fucomp  st(2)
.text:0041507C                 fnstsw  ax
.text:0041507E                 fstp    st(1)
.text:00415080                 sahf
.text:00415081                 jbe     short loc_4150D0
.text:00415083                 cmp     byte ptr [ecx+10h], 0
.text:00415087                 jz      short loc_4150C8
.text:00415089                 fmul    dword ptr [ecx+4]
.text:0041508C
.text:0041508C loc_41508C:                             ; CODE XREF: sub_414F60+16E↓j
.text:0041508C                 fnstcw  [esp+2Ch+var_12]
.text:00415090                 movzx   ecx, [esp+2Ch+var_12]
.text:00415095                 mov     [esp+2Ch+var_2C], ebx
.text:00415098                 or      cx, 0C00h
.text:0041509D                 mov     [esp+2Ch+var_14], cx
.text:004150A2                 fldcw   [esp+2Ch+var_14]
.text:004150A6                 fistp   [esp+2Ch+var_1C]
.text:004150AA                 fldcw   [esp+2Ch+var_12]
.text:004150AE                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:004150B2                 mov     [esp+2Ch+var_28], edx
.text:004150B6                 call    sub_414710
.text:004150BB                 nop
.text:004150BC                 lea     esi, [esi+0]
.text:004150C0
.text:004150C0 loc_4150C0:                             ; CODE XREF: sub_414F60+40↑j
.text:004150C0                                         ; sub_414F60+172↓j
.text:004150C0                 mov     eax, esi
.text:004150C2
.text:004150C2 loc_4150C2:                             ; CODE XREF: sub_414F60+2F↑j
.text:004150C2                 add     esp, 24h
.text:004150C5                 pop     ebx
.text:004150C6                 pop     esi
.text:004150C7                 retn
.text:004150C8 ; ---------------------------------------------------------------------------
.text:004150C8
.text:004150C8 loc_4150C8:                             ; CODE XREF: sub_414F60+127↑j
.text:004150C8                 fmul    dword ptr [ecx+4]
.text:004150CB                 fmul    dword ptr [ecx+8]
.text:004150CE                 jmp     short loc_41508C
.text:004150D0 ; ---------------------------------------------------------------------------
.text:004150D0
.text:004150D0 loc_4150D0:                             ; CODE XREF: sub_414F60+73↑j
.text:004150D0                                         ; sub_414F60+121↑j
.text:004150D0                 fstp    st
.text:004150D2                 jmp     short loc_4150C0
.text:004150D4 ; ---------------------------------------------------------------------------
.text:004150D4
.text:004150D4 loc_4150D4:                             ; CODE XREF: sub_414F60+DE↑j
.text:004150D4                                         ; sub_414F60+182↓j
.text:004150D4                 fstp    st
.text:004150D6                 fstp    st
.text:004150D8                 jmp     loc_415050
.text:004150D8 ; ---------------------------------------------------------------------------
.text:004150DD                 align 10h
.text:004150E0
.text:004150E0 loc_4150E0:                             ; CODE XREF: sub_414F60+87↑j
.text:004150E0                                         ; sub_414F60+98↑j ...
.text:004150E0                 fstp    st
.text:004150E2                 jmp     short loc_4150D4
.text:004150E2 sub_414F60      endp
.text:004150E2
.text:004150E2 ; ---------------------------------------------------------------------------
.text:004150E4                 align 10h
.text:004150F0
.text:004150F0 ; =============== S U B R O U T I N E =======================================
.text:004150F0
.text:004150F0
.text:004150F0 sub_4150F0      proc near               ; CODE XREF: sub_414890+32↑p
.text:004150F0                                         ; sub_414F60+24↑p
.text:004150F0
.text:004150F0 var_1C          = dword ptr -1Ch
.text:004150F0 var_18          = dword ptr -18h
.text:004150F0 var_D           = byte ptr -0Dh
.text:004150F0 arg_0           = dword ptr  4
.text:004150F0 arg_4           = dword ptr  8
.text:004150F0 arg_8           = dword ptr  0Ch
.text:004150F0 arg_C           = byte ptr  10h
.text:004150F0
.text:004150F0                 push    edi
.text:004150F1                 push    esi
.text:004150F2                 push    ebx
.text:004150F3                 sub     esp, 10h
.text:004150F6                 mov     esi, [esp+1Ch+arg_0]
.text:004150FA                 movzx   ecx, [esp+1Ch+arg_C]
.text:004150FF                 mov     edi, [esp+1Ch+arg_4]
.text:00415103                 mov     edx, [esi+8]
.text:00415106                 mov     [esp+1Ch+var_D], cl
.text:0041510A                 mov     [esp+1Ch+var_18], edx
.text:0041510E                 mov     [esp+1Ch+var_1C], edi
.text:00415111                 call    dword ptr [esi+18h]
.text:00415114                 mov     ecx, [esi]
.text:00415116                 lea     ebx, [ecx+eax*8]
.text:00415119                 cmp     ebx, [esi+4]
.text:0041511C                 jnb     loc_4151D3
.text:00415122                 mov     edx, [esp+1Ch+arg_8]
.text:00415126                 xor     eax, eax
.text:00415128                 mov     [edx], ebx
.text:0041512A                 mov     edx, [ebx]
.text:0041512C                 test    edx, edx
.text:0041512E                 jz      short loc_415172
.text:00415130                 mov     [esp+1Ch+var_18], edx
.text:00415134                 mov     [esp+1Ch+var_1C], edi
.text:00415137                 call    dword ptr [esi+1Ch]
.text:0041513A                 test    al, al
.text:0041513C                 jz      short loc_415181
.text:0041513E                 cmp     [esp+1Ch+var_D], 0
.text:00415143                 mov     edi, [ebx]
.text:00415145                 jz      short loc_415170
.text:00415147                 mov     ecx, [ebx+4]
.text:0041514A                 test    ecx, ecx
.text:0041514C                 jz      short loc_415179
.text:0041514E                 mov     eax, [ecx]
.text:00415150                 mov     edx, [ecx+4]
.text:00415153                 mov     [ebx], eax
.text:00415155                 mov     [ebx+4], edx
.text:00415158                 mov     ebx, [esi+24h]
.text:0041515B                 mov     dword ptr [ecx], 0
.text:00415161                 mov     [ecx+4], ebx
.text:00415164                 mov     [esi+24h], ecx
.text:00415167                 mov     esi, esi
.text:00415169                 lea     edi, [edi+0]
.text:00415170
.text:00415170 loc_415170:                             ; CODE XREF: sub_4150F0+55↑j
.text:00415170                                         ; sub_4150F0+8F↓j
.text:00415170                 mov     eax, edi
.text:00415172
.text:00415172 loc_415172:                             ; CODE XREF: sub_4150F0+3E↑j
.text:00415172                                         ; sub_4150F0+BC↓j ...
.text:00415172                 add     esp, 10h
.text:00415175                 pop     ebx
.text:00415176                 pop     esi
.text:00415177                 pop     edi
.text:00415178                 retn
.text:00415179 ; ---------------------------------------------------------------------------
.text:00415179
.text:00415179 loc_415179:                             ; CODE XREF: sub_4150F0+5C↑j
.text:00415179                 mov     dword ptr [ebx], 0
.text:0041517F                 jmp     short loc_415170
.text:00415181 ; ---------------------------------------------------------------------------
.text:00415181
.text:00415181 loc_415181:                             ; CODE XREF: sub_4150F0+4C↑j
.text:00415181                 mov     eax, [ebx+4]
.text:00415184                 test    eax, eax
.text:00415186                 jz      short loc_4151AA
.text:00415188                 nop
.text:00415189                 lea     esi, [esi+0]
.text:00415190
.text:00415190 loc_415190:                             ; CODE XREF: sub_4150F0+B8↓j
.text:00415190                 mov     ecx, [eax]
.text:00415192                 mov     [esp+1Ch+var_1C], edi
.text:00415195                 mov     [esp+1Ch+var_18], ecx
.text:00415199                 call    dword ptr [esi+1Ch]
.text:0041519C                 test    al, al
.text:0041519E                 jnz     short loc_4151AE
.text:004151A0                 mov     ebx, [ebx+4]
.text:004151A3                 mov     eax, [ebx+4]
.text:004151A6                 test    eax, eax
.text:004151A8                 jnz     short loc_415190
.text:004151AA
.text:004151AA loc_4151AA:                             ; CODE XREF: sub_4150F0+96↑j
.text:004151AA                 xor     eax, eax
.text:004151AC                 jmp     short loc_415172
.text:004151AE ; ---------------------------------------------------------------------------
.text:004151AE
.text:004151AE loc_4151AE:                             ; CODE XREF: sub_4150F0+AE↑j
.text:004151AE                 cmp     [esp+1Ch+var_D], 0
.text:004151B3                 mov     edx, [ebx+4]
.text:004151B6                 mov     ecx, [edx]
.text:004151B8                 jz      short loc_4151CF
.text:004151BA                 mov     dword ptr [edx], 0
.text:004151C0                 mov     edi, [edx+4]
.text:004151C3                 mov     [ebx+4], edi
.text:004151C6                 mov     edi, [esi+24h]
.text:004151C9                 mov     [edx+4], edi
.text:004151CC                 mov     [esi+24h], edx
.text:004151CF
.text:004151CF loc_4151CF:                             ; CODE XREF: sub_4150F0+C8↑j
.text:004151CF                 mov     eax, ecx
.text:004151D1                 jmp     short loc_415172
.text:004151D3 ; ---------------------------------------------------------------------------
.text:004151D3
.text:004151D3 loc_4151D3:                             ; CODE XREF: sub_4150F0+2C↑j
.text:004151D3                 call    abort
.text:004151D3 sub_4150F0      endp
.text:004151D3
.text:004151D3 ; ---------------------------------------------------------------------------
.text:004151D8                 db 18h dup(90h)
.text:004151F0 ; ---------------------------------------------------------------------------
.text:004151F0                 mov     edx, [esp+4]
.text:004151F4                 mov     ds:dword_42C5E0, edx
.text:004151FA                 retn
.text:004151FA ; ---------------------------------------------------------------------------
.text:004151FB aWriteError     db 'write error',0      ; DATA XREF: sub_415220:loc_415269↓o
.text:00415207 ; const char aSS_2[]
.text:00415207 aSS_2           db '%s: %s',0           ; DATA XREF: sub_415220+77↓o
.text:0041520E ; const char aS_6[]
.text:0041520E aS_6            db '%s',0               ; DATA XREF: sub_415220+A0↓o
.text:00415211 ; ---------------------------------------------------------------------------
.text:00415211                 jmp     short sub_415220
.text:00415211 ; ---------------------------------------------------------------------------
.text:00415213                 align 10h
.text:00415220
.text:00415220 ; =============== S U B R O U T I N E =======================================
.text:00415220
.text:00415220
.text:00415220 ; void __cdecl sub_415220()
.text:00415220 sub_415220      proc near               ; CODE XREF: .text:00415211↑j
.text:00415220                                         ; DATA XREF: sub_401B10+64↑o
.text:00415220
.text:00415220 Stream          = dword ptr -2Ch
.text:00415220 ErrorMessage    = dword ptr -28h
.text:00415220 var_24          = dword ptr -24h
.text:00415220 var_20          = byte ptr -20h
.text:00415220 var_1C          = dword ptr -1Ch
.text:00415220 var_9           = byte ptr -9
.text:00415220
.text:00415220                 push    esi
.text:00415221                 push    ebx
.text:00415222                 sub     esp, 24h
.text:00415225                 mov     edx, ds:_iob
.text:0041522B                 mov     ecx, [edx+2Ch]
.text:0041522E                 lea     esi, [edx+20h]
.text:00415231                 shr     ecx, 5
.text:00415234                 mov     bl, cl
.text:00415236                 mov     ecx, [edx+20h]
.text:00415239                 and     bl, 1
.text:0041523C                 cmp     ecx, [esi+8]
.text:0041523F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00415242                 setz    [esp+2Ch+var_9]
.text:00415247                 call    fclose
.text:0041524C                 test    eax, eax
.text:0041524E                 setnz   al
.text:00415251                 test    bl, bl
.text:00415253                 jnz     loc_4152E3
.text:00415259                 test    al, al
.text:0041525B                 jz      short loc_4152B0
.text:0041525D
.text:0041525D loc_41525D:                             ; CODE XREF: sub_415220+CD↓j
.text:0041525D                 call    _errno
.text:00415262                 mov     esi, [eax]
.text:00415264
.text:00415264 loc_415264:                             ; CODE XREF: sub_415220+C7↓j
.text:00415264                 cmp     esi, 9
.text:00415267                 jz      short loc_4152D6
.text:00415269
.text:00415269 loc_415269:                             ; CODE XREF: sub_415220+B8↓j
.text:00415269                                         ; sub_415220+C1↓j
.text:00415269                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00415270                 call    ds:libintl_gettext
.text:00415276                 mov     ebx, eax
.text:00415278                 mov     eax, ds:dword_42C5E0
.text:0041527D                 test    eax, eax
.text:0041527F                 jz      short loc_4152B6
.text:00415281                 mov     [esp+2Ch+Stream], eax ; char *
.text:00415284                 call    sub_40DC30
.text:00415289                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0041528D                 mov     edx, dword_42B0F0
.text:00415293                 mov     [esp+2Ch+var_1C], ebx
.text:00415297                 mov     [esp+2Ch+var_24], offset aSS_2 ; "%s: %s"
.text:0041529F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004152A3                 mov     [esp+2Ch+Stream], edx ; Code
.text:004152A6                 call    sub_4161E0
.text:004152AB                 nop
.text:004152AC                 lea     esi, [esi+0]
.text:004152B0
.text:004152B0 loc_4152B0:                             ; CODE XREF: sub_415220+3B↑j
.text:004152B0                                         ; sub_415220+B4↓j ...
.text:004152B0                 add     esp, 24h
.text:004152B3                 pop     ebx
.text:004152B4                 pop     esi
.text:004152B5                 retn
.text:004152B6 ; ---------------------------------------------------------------------------
.text:004152B6
.text:004152B6 loc_4152B6:                             ; CODE XREF: sub_415220+5F↑j
.text:004152B6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:004152BA                 mov     ebx, dword_42B0F0
.text:004152C0                 mov     [esp+2Ch+var_24], offset aS_6 ; "%s"
.text:004152C8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:004152CC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:004152CF                 call    sub_4161E0
.text:004152D4                 jmp     short loc_4152B0
.text:004152D6 ; ---------------------------------------------------------------------------
.text:004152D6
.text:004152D6 loc_4152D6:                             ; CODE XREF: sub_415220+47↑j
.text:004152D6                 test    bl, bl
.text:004152D8                 jnz     short loc_415269
.text:004152DA                 cmp     [esp+2Ch+var_9], 0
.text:004152DF                 jnz     short loc_4152B0
.text:004152E1                 jmp     short loc_415269
.text:004152E3 ; ---------------------------------------------------------------------------
.text:004152E3
.text:004152E3 loc_4152E3:                             ; CODE XREF: sub_415220+33↑j
.text:004152E3                 xor     esi, esi
.text:004152E5                 test    al, al
.text:004152E7                 jz      loc_415264
.text:004152ED                 jmp     loc_41525D
.text:004152ED sub_415220      endp
.text:004152ED
.text:004152ED ; ---------------------------------------------------------------------------
.text:004152F2                 align 10h
.text:00415300 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_415320+3↓o
.text:00415311 ; const char aS_3[]
.text:00415311 aS_3            db '%s',0               ; DATA XREF: sub_415320+10↓o
.text:00415314                 align 10h
.text:00415320
.text:00415320 ; =============== S U B R O U T I N E =======================================
.text:00415320
.text:00415320 ; Attributes: noreturn
.text:00415320
.text:00415320 sub_415320      proc near               ; CODE XREF: sub_401B10:loc_402339↑p
.text:00415320                                         ; sub_403C30:loc_40435B↑p ...
.text:00415320
.text:00415320 Code            = dword ptr -1Ch
.text:00415320 ErrorMessage    = dword ptr -18h
.text:00415320 var_14          = dword ptr -14h
.text:00415320 var_10          = byte ptr -10h
.text:00415320
.text:00415320                 sub     esp, 1Ch
.text:00415323                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0041532A                 call    ds:libintl_gettext
.text:00415330                 mov     [esp+1Ch+var_14], offset aS_3 ; "%s"
.text:00415338                 mov     edx, dword_42B0F0
.text:0041533E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00415346                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0041534A                 mov     [esp+1Ch+Code], edx ; Code
.text:0041534D                 call    sub_4161E0
.text:00415352                 call    abort
.text:00415352 sub_415320      endp
.text:00415352
.text:00415352 ; ---------------------------------------------------------------------------
.text:00415357                 align 10h
.text:00415360
.text:00415360 ; =============== S U B R O U T I N E =======================================
.text:00415360
.text:00415360
.text:00415360 ; int __cdecl sub_415360(struct tm *, char *Destination)
.text:00415360 sub_415360      proc near
.text:00415360
.text:00415360 Tm              = dword ptr -0Ch
.text:00415360 Source          = dword ptr -8
.text:00415360 arg_0           = dword ptr  4
.text:00415360 Destination     = dword ptr  8
.text:00415360
.text:00415360                 sub     esp, 0Ch
.text:00415363                 mov     edx, [esp+0Ch+arg_0]
.text:00415367                 mov     [esp+0Ch+Tm], edx ; Tm
.text:0041536A                 call    asctime
.text:0041536F                 xor     edx, edx
.text:00415371                 test    eax, eax
.text:00415373                 jz      short loc_415387
.text:00415375                 mov     [esp+0Ch+Source], eax ; Source
.text:00415379                 mov     edx, [esp+0Ch+Destination]
.text:0041537D                 mov     [esp+0Ch+Tm], edx ; Destination
.text:00415380                 call    strcpy
.text:00415385                 mov     edx, eax
.text:00415387
.text:00415387 loc_415387:                             ; CODE XREF: sub_415360+13↑j
.text:00415387                 mov     eax, edx
.text:00415389                 add     esp, 0Ch
.text:0041538C                 retn
.text:0041538C sub_415360      endp
.text:0041538C
.text:0041538C ; ---------------------------------------------------------------------------
.text:0041538D                 align 10h
.text:00415390                 sub     esp, 0Ch
.text:00415393                 mov     edx, [esp+10h]
.text:00415397                 mov     [esp], edx
.text:0041539A                 call    ctime
.text:0041539F                 xor     edx, edx
.text:004153A1                 test    eax, eax
.text:004153A3                 jz      short loc_4153B7
.text:004153A5                 mov     [esp+4], eax
.text:004153A9                 mov     edx, [esp+14h]
.text:004153AD                 mov     [esp], edx
.text:004153B0                 call    strcpy
.text:004153B5                 mov     edx, eax
.text:004153B7
.text:004153B7 loc_4153B7:                             ; CODE XREF: .text:004153A3↑j
.text:004153B7                 mov     eax, edx
.text:004153B9                 add     esp, 0Ch
.text:004153BC                 retn
.text:004153BC ; ---------------------------------------------------------------------------
.text:004153BD                 align 10h
.text:004153C0
.text:004153C0 ; =============== S U B R O U T I N E =======================================
.text:004153C0
.text:004153C0
.text:004153C0 ; int __cdecl sub_4153C0(__time32_t *, int)
.text:004153C0 sub_4153C0      proc near               ; CODE XREF: sub_40A870+1C00↑p
.text:004153C0
.text:004153C0 Time            = dword ptr -0Ch
.text:004153C0 var_4           = dword ptr -4
.text:004153C0 arg_0           = dword ptr  4
.text:004153C0 arg_4           = dword ptr  8
.text:004153C0
.text:004153C0                 sub     esp, 0Ch
.text:004153C3                 mov     edx, [esp+0Ch+arg_0]
.text:004153C7                 mov     [esp+0Ch+var_4], ebx
.text:004153CB                 mov     ebx, [esp+0Ch+arg_4]
.text:004153CF                 mov     [esp+0Ch+Time], edx ; Time
.text:004153D2                 call    gmtime
.text:004153D7                 mov     edx, eax
.text:004153D9                 xor     eax, eax
.text:004153DB                 test    edx, edx
.text:004153DD                 jz      short loc_415415
.text:004153DF                 mov     ecx, [edx]
.text:004153E1                 mov     eax, ebx
.text:004153E3                 mov     [ebx], ecx
.text:004153E5                 mov     ecx, [edx+4]
.text:004153E8                 mov     [ebx+4], ecx
.text:004153EB                 mov     ecx, [edx+8]
.text:004153EE                 mov     [ebx+8], ecx
.text:004153F1                 mov     ecx, [edx+0Ch]
.text:004153F4                 mov     [ebx+0Ch], ecx
.text:004153F7                 mov     ecx, [edx+10h]
.text:004153FA                 mov     [ebx+10h], ecx
.text:004153FD                 mov     ecx, [edx+14h]
.text:00415400                 mov     [ebx+14h], ecx
.text:00415403                 mov     ecx, [edx+18h]
.text:00415406                 mov     [ebx+18h], ecx
.text:00415409                 mov     ecx, [edx+1Ch]
.text:0041540C                 mov     [ebx+1Ch], ecx
.text:0041540F                 mov     ecx, [edx+20h]
.text:00415412                 mov     [ebx+20h], ecx
.text:00415415
.text:00415415 loc_415415:                             ; CODE XREF: sub_4153C0+1D↑j
.text:00415415                 mov     ebx, [esp+0Ch+var_4]
.text:00415419                 add     esp, 0Ch
.text:0041541C                 retn
.text:0041541C sub_4153C0      endp
.text:0041541C
.text:0041541C ; ---------------------------------------------------------------------------
.text:0041541D                 align 10h
.text:00415420
.text:00415420 ; =============== S U B R O U T I N E =======================================
.text:00415420
.text:00415420
.text:00415420 ; int __cdecl sub_415420(__time32_t *, int)
.text:00415420 sub_415420      proc near               ; CODE XREF: sub_40A870+1E02↑p
.text:00415420
.text:00415420 Time            = dword ptr -0Ch
.text:00415420 var_4           = dword ptr -4
.text:00415420 arg_0           = dword ptr  4
.text:00415420 arg_4           = dword ptr  8
.text:00415420
.text:00415420                 sub     esp, 0Ch
.text:00415423                 mov     edx, [esp+0Ch+arg_0]
.text:00415427                 mov     [esp+0Ch+var_4], ebx
.text:0041542B                 mov     ebx, [esp+0Ch+arg_4]
.text:0041542F                 mov     [esp+0Ch+Time], edx ; Time
.text:00415432                 call    localtime
.text:00415437                 mov     edx, eax
.text:00415439                 xor     eax, eax
.text:0041543B                 test    edx, edx
.text:0041543D                 jz      short loc_415475
.text:0041543F                 mov     ecx, [edx]
.text:00415441                 mov     eax, ebx
.text:00415443                 mov     [ebx], ecx
.text:00415445                 mov     ecx, [edx+4]
.text:00415448                 mov     [ebx+4], ecx
.text:0041544B                 mov     ecx, [edx+8]
.text:0041544E                 mov     [ebx+8], ecx
.text:00415451                 mov     ecx, [edx+0Ch]
.text:00415454                 mov     [ebx+0Ch], ecx
.text:00415457                 mov     ecx, [edx+10h]
.text:0041545A                 mov     [ebx+10h], ecx
.text:0041545D                 mov     ecx, [edx+14h]
.text:00415460                 mov     [ebx+14h], ecx
.text:00415463                 mov     ecx, [edx+18h]
.text:00415466                 mov     [ebx+18h], ecx
.text:00415469                 mov     ecx, [edx+1Ch]
.text:0041546C                 mov     [ebx+1Ch], ecx
.text:0041546F                 mov     ecx, [edx+20h]
.text:00415472                 mov     [ebx+20h], ecx
.text:00415475
.text:00415475 loc_415475:                             ; CODE XREF: sub_415420+1D↑j
.text:00415475                 mov     ebx, [esp+0Ch+var_4]
.text:00415479                 add     esp, 0Ch
.text:0041547C                 retn
.text:0041547C sub_415420      endp
.text:0041547C
.text:0041547C ; ---------------------------------------------------------------------------
.text:0041547D                 align 10h
.text:00415480 aCoreutils530Sr_2 db '../../coreutils-5.3.0-src/lib/xstrtol.c',0
.text:00415480                                         ; DATA XREF: sub_4154F0+C79↓o
.text:004154A8                 align 20h
.text:004154C0 a0StrtolBaseStr_0 db '0 <= strtol_base && strtol_base <= 36',0
.text:004154C0                                         ; DATA XREF: sub_4154F0+C81↓o
.text:004154E6                 align 10h
.text:004154F0
.text:004154F0 ; =============== S U B R O U T I N E =======================================
.text:004154F0
.text:004154F0
.text:004154F0 ; int __cdecl sub_4154F0(int, int, int, int, char *Str)
.text:004154F0 sub_4154F0      proc near               ; CODE XREF: sub_413510+9F↑p
.text:004154F0
.text:004154F0 C               = dword ptr -13Ch
.text:004154F0 Type            = dword ptr -138h
.text:004154F0 Radix           = dword ptr -134h
.text:004154F0 var_130         = dword ptr -130h
.text:004154F0 var_124         = dword ptr -124h
.text:004154F0 var_120         = dword ptr -120h
.text:004154F0 var_11C         = dword ptr -11Ch
.text:004154F0 var_118         = dword ptr -118h
.text:004154F0 var_114         = dword ptr -114h
.text:004154F0 var_110         = dword ptr -110h
.text:004154F0 var_10C         = dword ptr -10Ch
.text:004154F0 var_108         = dword ptr -108h
.text:004154F0 var_104         = dword ptr -104h
.text:004154F0 var_100         = dword ptr -100h
.text:004154F0 var_F8          = dword ptr -0F8h
.text:004154F0 var_F4          = dword ptr -0F4h
.text:004154F0 var_F0          = dword ptr -0F0h
.text:004154F0 var_EC          = dword ptr -0ECh
.text:004154F0 var_E8          = dword ptr -0E8h
.text:004154F0 var_E4          = dword ptr -0E4h
.text:004154F0 var_E0          = dword ptr -0E0h
.text:004154F0 var_D8          = dword ptr -0D8h
.text:004154F0 var_D4          = dword ptr -0D4h
.text:004154F0 var_D0          = dword ptr -0D0h
.text:004154F0 var_CC          = dword ptr -0CCh
.text:004154F0 var_C8          = dword ptr -0C8h
.text:004154F0 var_C4          = dword ptr -0C4h
.text:004154F0 var_C0          = dword ptr -0C0h
.text:004154F0 var_B8          = dword ptr -0B8h
.text:004154F0 var_B4          = dword ptr -0B4h
.text:004154F0 var_B0          = dword ptr -0B0h
.text:004154F0 var_AC          = dword ptr -0ACh
.text:004154F0 var_A8          = dword ptr -0A8h
.text:004154F0 var_A4          = dword ptr -0A4h
.text:004154F0 var_A0          = dword ptr -0A0h
.text:004154F0 var_98          = dword ptr -98h
.text:004154F0 var_94          = dword ptr -94h
.text:004154F0 var_90          = dword ptr -90h
.text:004154F0 var_8C          = dword ptr -8Ch
.text:004154F0 var_88          = dword ptr -88h
.text:004154F0 var_84          = dword ptr -84h
.text:004154F0 var_80          = dword ptr -80h
.text:004154F0 var_78          = dword ptr -78h
.text:004154F0 var_74          = dword ptr -74h
.text:004154F0 var_70          = dword ptr -70h
.text:004154F0 var_6C          = dword ptr -6Ch
.text:004154F0 var_68          = dword ptr -68h
.text:004154F0 var_64          = dword ptr -64h
.text:004154F0 var_60          = dword ptr -60h
.text:004154F0 var_5C          = dword ptr -5Ch
.text:004154F0 var_58          = dword ptr -58h
.text:004154F0 var_50          = dword ptr -50h
.text:004154F0 var_4C          = dword ptr -4Ch
.text:004154F0 var_48          = dword ptr -48h
.text:004154F0 var_44          = dword ptr -44h
.text:004154F0 var_40          = dword ptr -40h
.text:004154F0 var_3C          = dword ptr -3Ch
.text:004154F0 var_38          = dword ptr -38h
.text:004154F0 var_34          = dword ptr -34h
.text:004154F0 var_30          = dword ptr -30h
.text:004154F0 var_29          = byte ptr -29h
.text:004154F0 var_28          = dword ptr -28h
.text:004154F0 var_24          = dword ptr -24h
.text:004154F0 var_20          = dword ptr -20h
.text:004154F0 var_18          = byte ptr -18h
.text:004154F0 arg_0           = dword ptr  4
.text:004154F0 arg_4           = dword ptr  8
.text:004154F0 arg_8           = dword ptr  0Ch
.text:004154F0 arg_C           = dword ptr  10h
.text:004154F0 Str             = dword ptr  14h
.text:004154F0
.text:004154F0                 push    ebp
.text:004154F1                 xor     eax, eax
.text:004154F3                 push    edi
.text:004154F4                 push    esi
.text:004154F5                 push    ebx
.text:004154F6                 sub     esp, 12Ch
.text:004154FC                 mov     ebp, [esp+13Ch+arg_8]
.text:00415503                 mov     [esp+13Ch+var_28], eax
.text:0041550A                 mov     esi, [esp+13Ch+arg_0]
.text:00415511                 cmp     ebp, 24h ; '$'
.text:00415514                 ja      loc_416161
.text:0041551A                 mov     edi, [esp+13Ch+arg_4]
.text:00415521                 test    edi, edi
.text:00415523                 jz      loc_416155
.text:00415529
.text:00415529 loc_415529:                             ; CODE XREF: sub_4154F0+C6C↓j
.text:00415529                 movzx   edx, byte ptr [esi]
.text:0041552C                 mov     ebx, esi
.text:0041552E                 mov     [esp+13Ch+var_29], dl
.text:00415535                 lea     esi, [esi+0]
.text:00415539                 lea     edi, [edi+0]
.text:00415540
.text:00415540 loc_415540:                             ; CODE XREF: sub_4154F0+86↓j
.text:00415540                 movzx   edx, [esp+13Ch+var_29]
.text:00415548                 mov     ecx, ds:__mb_cur_max
.text:0041554E                 cmp     dword ptr [ecx], 1
.text:00415551                 jz      loc_416142
.text:00415557                 mov     [esp+13Ch+Type], 8 ; Type
.text:0041555F                 mov     [esp+13Ch+C], edx ; C
.text:00415562                 call    _isctype
.text:00415567
.text:00415567 loc_415567:                             ; CODE XREF: sub_4154F0+C60↓j
.text:00415567                 test    eax, eax
.text:00415569                 jz      short loc_415578
.text:0041556B                 inc     ebx
.text:0041556C                 movzx   eax, byte ptr [ebx]
.text:0041556F                 mov     [esp+13Ch+var_29], al
.text:00415576                 jmp     short loc_415540
.text:00415578 ; ---------------------------------------------------------------------------
.text:00415578
.text:00415578 loc_415578:                             ; CODE XREF: sub_4154F0+79↑j
.text:00415578                 cmp     [esp+13Ch+var_29], 2Dh ; '-'
.text:00415580                 mov     eax, 4
.text:00415585                 jz      short loc_415602
.text:00415587                 call    _errno
.text:0041558C                 mov     dword ptr [eax], 0
.text:00415592                 mov     [esp+13Ch+Radix], ebp ; Radix
.text:00415596                 mov     [esp+13Ch+Type], edi ; EndPtr
.text:0041559A                 mov     [esp+13Ch+C], esi ; String
.text:0041559D                 call    _strtoull
.text:004155A2                 mov     [esp+13Ch+var_24], eax
.text:004155A9                 mov     eax, [edi]
.text:004155AB                 mov     [esp+13Ch+var_20], edx
.text:004155B2                 cmp     eax, esi
.text:004155B4                 jz      loc_4160FC
.text:004155BA                 call    _errno
.text:004155BF                 mov     ebx, [eax]
.text:004155C1                 test    ebx, ebx
.text:004155C3                 jnz     loc_4160D7
.text:004155C9
.text:004155C9 loc_4155C9:                             ; CODE XREF: sub_4154F0+BFD↓j
.text:004155C9                                         ; sub_4154F0+C4D↓j
.text:004155C9                 mov     ebp, [esp+13Ch+Str]
.text:004155D0                 test    ebp, ebp
.text:004155D2                 jz      loc_4160B8
.text:004155D8                 mov     ebx, [edi]
.text:004155DA                 movzx   eax, byte ptr [ebx]
.text:004155DD                 test    al, al
.text:004155DF                 jnz     short loc_41560D
.text:004155E1
.text:004155E1 loc_4155E1:                             ; CODE XREF: sub_4154F0+312↓j
.text:004155E1                                         ; sub_4154F0+320↓j
.text:004155E1                 mov     edx, [esp+13Ch+var_24]
.text:004155E8                 mov     edi, [esp+13Ch+var_20]
.text:004155EF                 mov     ebx, [esp+13Ch+arg_C]
.text:004155F6                 mov     [ebx], edx
.text:004155F8                 mov     [ebx+4], edi
.text:004155FB
.text:004155FB loc_4155FB:                             ; CODE XREF: sub_4154F0+BE2↓j
.text:004155FB                 mov     eax, [esp+13Ch+var_28]
.text:00415602
.text:00415602 loc_415602:                             ; CODE XREF: sub_4154F0+95↑j
.text:00415602                                         ; sub_4154F0+16C↓j ...
.text:00415602                 add     esp, 12Ch
.text:00415608                 pop     ebx
.text:00415609                 pop     esi
.text:0041560A                 pop     edi
.text:0041560B                 pop     ebp
.text:0041560C                 retn
.text:0041560D ; ---------------------------------------------------------------------------
.text:0041560D
.text:0041560D loc_41560D:                             ; CODE XREF: sub_4154F0+EF↑j
.text:0041560D                 mov     esi, [esp+13Ch+Str]
.text:00415614                 mov     ecx, 1
.text:00415619                 movsx   ebp, al
.text:0041561C                 mov     [esp+13Ch+var_30], ecx
.text:00415623                 mov     ebx, 400h
.text:00415628                 mov     [esp+13Ch+Type], ebp ; Val
.text:0041562C                 mov     [esp+13Ch+C], esi ; Str
.text:0041562F                 call    strchr
.text:00415634                 test    eax, eax
.text:00415636                 jnz     short loc_41565E
.text:00415638
.text:00415638 def_4156A9:                             ; CODE XREF: sub_4154F0+1B7↓j
.text:00415638                                         ; sub_4154F0+1B9↓j
.text:00415638                                         ; DATA XREF: ...
.text:00415638                 mov     eax, [esp+13Ch+var_28] ; jumptable 004156A9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0041563F                 mov     esi, [esp+13Ch+var_24]
.text:00415646                 mov     ebp, [esp+13Ch+var_20]
.text:0041564D                 mov     edi, [esp+13Ch+arg_C]
.text:00415654                 or      eax, 2
.text:00415657                 mov     [edi], esi
.text:00415659                 mov     [edi+4], ebp
.text:0041565C                 jmp     short loc_415602
.text:0041565E ; ---------------------------------------------------------------------------
.text:0041565E
.text:0041565E loc_41565E:                             ; CODE XREF: sub_4154F0+146↑j
.text:0041565E                 mov     [esp+13Ch+Type], 30h ; '0' ; Val
.text:00415666                 mov     edx, [esp+13Ch+Str]
.text:0041566D                 mov     [esp+13Ch+C], edx ; Str
.text:00415670                 call    strchr
.text:00415675                 test    eax, eax
.text:00415677                 jz      loc_4160B1
.text:0041567D                 mov     edx, [edi]
.text:0041567F                 movsx   eax, byte ptr [edx+1]
.text:00415683                 cmp     eax, 44h ; 'D'
.text:00415686                 jz      loc_416077
.text:0041568C                 cmp     eax, 44h ; 'D'
.text:0041568F                 jg      loc_41608D
.text:00415695                 cmp     eax, 42h ; 'B'
.text:00415698                 jz      loc_416077
.text:0041569E
.text:0041569E loc_41569E:                             ; CODE XREF: sub_4154F0+B98↓j
.text:0041569E                                         ; sub_4154F0+BA0↓j ...
.text:0041569E                 movsx   eax, byte ptr [edx]
.text:004156A1                 sub     eax, 42h ; 'B'  ; switch 54 cases
.text:004156A4                 cmp     eax, 35h
.text:004156A7                 ja      short def_4156A9 ; jumptable 004156A9 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:004156A9                 jmp     ds:jpt_4156A9[eax*4] ; switch jump
.text:004156A9 ; ---------------------------------------------------------------------------
.text:004156B0 jpt_4156A9      dd offset loc_415834, offset def_4156A9, offset def_4156A9
.text:004156B0                                         ; DATA XREF: sub_4154F0+1B9↑r
.text:004156B0                 dd offset loc_41588E, offset def_4156A9, offset loc_415C57 ; jump table for switch statement
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset loc_415D66, offset def_4156A9, offset loc_415E2F
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_41599D
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset loc_415F3E, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_415AAC
.text:004156B0                 dd offset loc_415B7E, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_415788
.text:004156B0                 dd offset loc_415C50, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset loc_415C57, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_415D66
.text:004156B0                 dd offset def_4156A9, offset loc_415E2F, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset def_4156A9
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_415F3E
.text:004156B0                 dd offset def_4156A9, offset def_4156A9, offset loc_416017
.text:00415788 ; ---------------------------------------------------------------------------
.text:00415788
.text:00415788 loc_415788:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415788                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415788                 mov     [esp+13Ch+Radix], 200h ; jumptable 004156A9 case 98
.text:00415790                 lea     ebp, [esp+13Ch+var_24]
.text:00415797                 mov     [esp+13Ch+var_130], 0
.text:0041579F                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004157A6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004157AE                 call    sub_429510
.text:004157B3                 mov     esi, [esp+13Ch+var_20]
.text:004157BA                 mov     ecx, [esp+13Ch+var_24]
.text:004157C1                 cmp     edx, esi
.text:004157C3                 ja      short loc_4157CB
.text:004157C5                 jb      short loc_415815
.text:004157C7                 cmp     eax, ecx
.text:004157C9                 jb      short loc_415815
.text:004157CB
.text:004157CB loc_4157CB:                             ; CODE XREF: sub_4154F0+2D3↑j
.text:004157CB                 mov     esi, [ebp+0]
.text:004157CE                 mov     eax, 200h
.text:004157D3                 mov     ebx, [ebp+4]
.text:004157D6                 mul     esi
.text:004157D8                 mov     ecx, ebx
.text:004157DA                 shl     ecx, 9
.text:004157DD
.text:004157DD loc_4157DD:                             ; CODE XREF: sub_4154F0+399↓j
.text:004157DD                 mov     esi, edx
.text:004157DF                 lea     edx, [ecx+esi]
.text:004157E2
.text:004157E2 loc_4157E2:                             ; CODE XREF: sub_4154F0+B82↓j
.text:004157E2                 mov     [ebp+0], eax
.text:004157E5                 xor     eax, eax
.text:004157E7                 mov     [ebp+4], edx
.text:004157EA
.text:004157EA loc_4157EA:                             ; CODE XREF: sub_4154F0+342↓j
.text:004157EA                                         ; sub_4154F0+459↓j ...
.text:004157EA                 mov     edx, [edi]
.text:004157EC
.text:004157EC loc_4157EC:                             ; CODE XREF: sub_4154F0+762↓j
.text:004157EC                 or      [esp+13Ch+var_28], eax
.text:004157F3                 mov     eax, [esp+13Ch+var_30]
.text:004157FA                 lea     ecx, [eax+edx]
.text:004157FD                 mov     [edi], ecx
.text:004157FF                 cmp     byte ptr [ecx], 0
.text:00415802                 jz      loc_4155E1
.text:00415808                 or      [esp+13Ch+var_28], 2
.text:00415810                 jmp     loc_4155E1
.text:00415815 ; ---------------------------------------------------------------------------
.text:00415815
.text:00415815 loc_415815:                             ; CODE XREF: sub_4154F0+2D5↑j
.text:00415815                                         ; sub_4154F0+2D9↑j ...
.text:00415815                 mov     edx, 0FFFFFFFFh
.text:0041581A                 mov     ebp, 0FFFFFFFFh
.text:0041581F                 mov     eax, 1
.text:00415824                 mov     [esp+13Ch+var_24], edx
.text:0041582B                 mov     [esp+13Ch+var_20], ebp
.text:00415832                 jmp     short loc_4157EA
.text:00415834 ; ---------------------------------------------------------------------------
.text:00415834
.text:00415834 loc_415834:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415834                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415834                 mov     [esp+13Ch+Radix], 400h ; jumptable 004156A9 case 66
.text:0041583C                 lea     ebp, [esp+13Ch+var_24]
.text:00415843                 mov     [esp+13Ch+var_130], 0
.text:0041584B                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415852                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0041585A                 call    sub_429510
.text:0041585F                 mov     esi, [esp+13Ch+var_20]
.text:00415866                 mov     ecx, [esp+13Ch+var_24]
.text:0041586D                 cmp     edx, esi
.text:0041586F                 ja      short loc_415877
.text:00415871                 jb      short loc_415815
.text:00415873                 cmp     eax, ecx
.text:00415875                 jb      short loc_415815
.text:00415877
.text:00415877 loc_415877:                             ; CODE XREF: sub_4154F0+37F↑j
.text:00415877                 mov     esi, [ebp+0]
.text:0041587A                 mov     eax, 400h
.text:0041587F                 mov     ebx, [ebp+4]
.text:00415882                 mul     esi
.text:00415884                 mov     ecx, ebx
.text:00415886                 shl     ecx, 0Ah
.text:00415889                 jmp     loc_4157DD
.text:0041588E ; ---------------------------------------------------------------------------
.text:0041588E
.text:0041588E loc_41588E:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:0041588E                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:0041588E                 mov     [esp+13Ch+var_3C], ebx ; jumptable 004156A9 case 69
.text:00415895                 mov     ecx, ebx
.text:00415897                 xor     ebp, ebp
.text:00415899                 mov     [esp+13Ch+var_34], ebp
.text:004158A0                 sar     ecx, 1Fh
.text:004158A3                 mov     ebx, [esp+13Ch+var_3C]
.text:004158AA                 mov     [esp+13Ch+var_38], ecx
.text:004158B1                 lea     esi, [esp+13Ch+var_24]
.text:004158B8                 mov     ebp, 5
.text:004158BD                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004158C4                 mov     edx, [esp+13Ch+var_38]
.text:004158CB                 mov     [esp+13Ch+Radix], ebx
.text:004158CF                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004158D7                 mov     [esp+13Ch+var_130], edx
.text:004158DB                 call    sub_429510
.text:004158E0                 mov     [esp+13Ch+var_44], eax
.text:004158E7                 mov     [esp+13Ch+var_40], edx
.text:004158EE
.text:004158EE loc_4158EE:                             ; CODE XREF: sub_4154F0+450↓j
.text:004158EE                 mov     ebx, [esi+4]
.text:004158F1                 mov     eax, [esi]
.text:004158F3                 cmp     [esp+13Ch+var_40], ebx
.text:004158FA                 mov     [esp+13Ch+var_48], ebx
.text:00415901                 mov     [esp+13Ch+var_4C], eax
.text:00415908                 ja      short loc_41594E
.text:0041590A                 mov     ecx, [esp+13Ch+var_48]
.text:00415911                 cmp     [esp+13Ch+var_40], ecx
.text:00415918                 jb      short loc_415923
.text:0041591A                 cmp     [esp+13Ch+var_44], eax
.text:00415921                 jnb     short loc_41594E
.text:00415923
.text:00415923 loc_415923:                             ; CODE XREF: sub_4154F0+428↑j
.text:00415923                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415929                 mov     eax, 1
.text:0041592E                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415935
.text:00415935 loc_415935:                             ; CODE XREF: sub_4154F0+4AB↓j
.text:00415935                 or      [esp+13Ch+var_34], eax
.text:0041593C                 dec     ebp
.text:0041593D                 cmp     ebp, 0FFFFFFFFh
.text:00415940                 jnz     short loc_4158EE
.text:00415942                 mov     eax, [esp+13Ch+var_34]
.text:00415949                 jmp     loc_4157EA
.text:0041594E ; ---------------------------------------------------------------------------
.text:0041594E
.text:0041594E loc_41594E:                             ; CODE XREF: sub_4154F0+418↑j
.text:0041594E                                         ; sub_4154F0+431↑j
.text:0041594E                 mov     ecx, [esp+13Ch+var_38]
.text:00415955                 mov     eax, [esp+13Ch+var_4C]
.text:0041595C                 mov     ebx, [esp+13Ch+var_4C]
.text:00415963                 mul     [esp+13Ch+var_3C]
.text:0041596A                 imul    ebx, ecx
.text:0041596D                 mov     ecx, edx
.text:0041596F                 mov     [esp+13Ch+var_124], eax
.text:00415973                 add     ecx, ebx
.text:00415975                 mov     edx, [esp+13Ch+var_3C]
.text:0041597C                 mov     ebx, [esp+13Ch+var_48]
.text:00415983                 imul    edx, ebx
.text:00415986                 mov     ebx, [esp+13Ch+var_124]
.text:0041598A                 mov     [esi], ebx
.text:0041598C                 add     ecx, edx
.text:0041598E                 mov     [esp+13Ch+var_120], ecx
.text:00415992                 mov     eax, [esp+13Ch+var_120]
.text:00415996                 mov     [esi+4], eax
.text:00415999                 xor     eax, eax
.text:0041599B                 jmp     short loc_415935
.text:0041599D ; ---------------------------------------------------------------------------
.text:0041599D
.text:0041599D loc_41599D:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:0041599D                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:0041599D                 mov     [esp+13Ch+var_A4], ebx ; jumptable 004156A9 case 80
.text:004159A4                 mov     eax, ebx
.text:004159A6                 xor     ebp, ebp
.text:004159A8                 mov     [esp+13Ch+var_98], ebp
.text:004159AF                 sar     eax, 1Fh
.text:004159B2                 mov     edx, [esp+13Ch+var_A4]
.text:004159B9                 mov     [esp+13Ch+var_A0], eax
.text:004159C0                 lea     esi, [esp+13Ch+var_24]
.text:004159C7                 mov     ebp, 4
.text:004159CC                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:004159D3                 mov     ebx, [esp+13Ch+var_A0]
.text:004159DA                 mov     [esp+13Ch+Radix], edx
.text:004159DE                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:004159E6                 mov     [esp+13Ch+var_130], ebx
.text:004159EA                 call    sub_429510
.text:004159EF                 mov     [esp+13Ch+var_AC], eax
.text:004159F6                 mov     [esp+13Ch+var_A8], edx
.text:004159FD
.text:004159FD loc_4159FD:                             ; CODE XREF: sub_4154F0+55F↓j
.text:004159FD                 mov     ebx, [esi+4]
.text:00415A00                 mov     edx, [esi]
.text:00415A02                 cmp     [esp+13Ch+var_A8], ebx
.text:00415A09                 mov     [esp+13Ch+var_B0], ebx
.text:00415A10                 mov     [esp+13Ch+var_B4], edx
.text:00415A17                 ja      short loc_415A5D
.text:00415A19                 mov     eax, [esp+13Ch+var_B0]
.text:00415A20                 cmp     [esp+13Ch+var_A8], eax
.text:00415A27                 jb      short loc_415A32
.text:00415A29                 cmp     [esp+13Ch+var_AC], edx
.text:00415A30                 jnb     short loc_415A5D
.text:00415A32
.text:00415A32 loc_415A32:                             ; CODE XREF: sub_4154F0+537↑j
.text:00415A32                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415A38                 mov     eax, 1
.text:00415A3D                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415A44
.text:00415A44 loc_415A44:                             ; CODE XREF: sub_4154F0+5BA↓j
.text:00415A44                 or      [esp+13Ch+var_98], eax
.text:00415A4B                 dec     ebp
.text:00415A4C                 cmp     ebp, 0FFFFFFFFh
.text:00415A4F                 jnz     short loc_4159FD
.text:00415A51                 mov     eax, [esp+13Ch+var_98]
.text:00415A58                 jmp     loc_4157EA
.text:00415A5D ; ---------------------------------------------------------------------------
.text:00415A5D
.text:00415A5D loc_415A5D:                             ; CODE XREF: sub_4154F0+527↑j
.text:00415A5D                                         ; sub_4154F0+540↑j
.text:00415A5D                 mov     ecx, [esp+13Ch+var_A0]
.text:00415A64                 mov     eax, [esp+13Ch+var_B4]
.text:00415A6B                 mov     ebx, [esp+13Ch+var_B4]
.text:00415A72                 mul     [esp+13Ch+var_A4]
.text:00415A79                 imul    ebx, ecx
.text:00415A7C                 mov     ecx, edx
.text:00415A7E                 mov     [esp+13Ch+var_124], eax
.text:00415A82                 add     ecx, ebx
.text:00415A84                 mov     edx, [esp+13Ch+var_A4]
.text:00415A8B                 mov     ebx, [esp+13Ch+var_B0]
.text:00415A92                 xor     eax, eax
.text:00415A94                 imul    edx, ebx
.text:00415A97                 add     ecx, edx
.text:00415A99                 mov     [esp+13Ch+var_120], ecx
.text:00415A9D                 mov     ebx, [esp+13Ch+var_120]
.text:00415AA1                 mov     ecx, [esp+13Ch+var_124]
.text:00415AA5                 mov     [esi+4], ebx
.text:00415AA8                 mov     [esi], ecx
.text:00415AAA                 jmp     short loc_415A44
.text:00415AAC ; ---------------------------------------------------------------------------
.text:00415AAC
.text:00415AAC loc_415AAC:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415AAC                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415AAC                 mov     [esp+13Ch+var_E4], ebx ; jumptable 004156A9 case 89
.text:00415AB0                 mov     eax, ebx
.text:00415AB2                 lea     esi, [esp+13Ch+var_24]
.text:00415AB9                 mov     [esp+13Ch+var_D8], 0
.text:00415AC1                 sar     eax, 1Fh
.text:00415AC4                 mov     edx, [esp+13Ch+var_E4]
.text:00415AC8                 mov     [esp+13Ch+var_E0], eax
.text:00415ACC                 mov     ebp, 7
.text:00415AD1                 mov     ebx, [esp+13Ch+var_E0]
.text:00415AD5                 mov     [esp+13Ch+Radix], edx
.text:00415AD9                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415AE0                 mov     [esp+13Ch+var_130], ebx
.text:00415AE4                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415AEC                 call    sub_429510
.text:00415AF1                 mov     [esp+13Ch+var_EC], eax
.text:00415AF5                 mov     [esp+13Ch+var_E8], edx
.text:00415AF9
.text:00415AF9 loc_415AF9:                             ; CODE XREF: sub_4154F0+646↓j
.text:00415AF9                 mov     ebx, [esi+4]
.text:00415AFC                 mov     edx, [esi]
.text:00415AFE                 cmp     [esp+13Ch+var_E8], ebx
.text:00415B02                 mov     [esp+13Ch+var_F0], ebx
.text:00415B06                 mov     [esp+13Ch+var_F4], edx
.text:00415B0A                 ja      short loc_415B41
.text:00415B0C                 mov     eax, [esp+13Ch+var_F0]
.text:00415B10                 cmp     [esp+13Ch+var_E8], eax
.text:00415B14                 jb      short loc_415B1C
.text:00415B16                 cmp     [esp+13Ch+var_EC], edx
.text:00415B1A                 jnb     short loc_415B41
.text:00415B1C
.text:00415B1C loc_415B1C:                             ; CODE XREF: sub_4154F0+624↑j
.text:00415B1C                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415B22                 mov     eax, 1
.text:00415B27                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415B2E
.text:00415B2E loc_415B2E:                             ; CODE XREF: sub_4154F0+68C↓j
.text:00415B2E                 or      [esp+13Ch+var_D8], eax
.text:00415B32                 dec     ebp
.text:00415B33                 cmp     ebp, 0FFFFFFFFh
.text:00415B36                 jnz     short loc_415AF9
.text:00415B38                 mov     eax, [esp+13Ch+var_D8]
.text:00415B3C                 jmp     loc_4157EA
.text:00415B41 ; ---------------------------------------------------------------------------
.text:00415B41
.text:00415B41 loc_415B41:                             ; CODE XREF: sub_4154F0+61A↑j
.text:00415B41                                         ; sub_4154F0+62A↑j
.text:00415B41                 mov     ecx, [esp+13Ch+var_E0]
.text:00415B45                 mov     eax, [esp+13Ch+var_F4]
.text:00415B49                 mov     ebx, [esp+13Ch+var_F4]
.text:00415B4D                 mul     [esp+13Ch+var_E4]
.text:00415B51                 imul    ebx, ecx
.text:00415B54                 mov     ecx, edx
.text:00415B56                 mov     [esp+13Ch+var_124], eax
.text:00415B5A                 add     ecx, ebx
.text:00415B5C                 mov     edx, [esp+13Ch+var_E4]
.text:00415B60                 mov     ebx, [esp+13Ch+var_F0]
.text:00415B64                 xor     eax, eax
.text:00415B66                 imul    edx, ebx
.text:00415B69                 add     ecx, edx
.text:00415B6B                 mov     [esp+13Ch+var_120], ecx
.text:00415B6F                 mov     ebx, [esp+13Ch+var_120]
.text:00415B73                 mov     ecx, [esp+13Ch+var_124]
.text:00415B77                 mov     [esi+4], ebx
.text:00415B7A                 mov     [esi], ecx
.text:00415B7C                 jmp     short loc_415B2E
.text:00415B7E ; ---------------------------------------------------------------------------
.text:00415B7E
.text:00415B7E loc_415B7E:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415B7E                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415B7E                 mov     [esp+13Ch+var_104], ebx ; jumptable 004156A9 case 90
.text:00415B82                 mov     eax, ebx
.text:00415B84                 lea     esi, [esp+13Ch+var_24]
.text:00415B8B                 mov     [esp+13Ch+var_F8], 0
.text:00415B93                 sar     eax, 1Fh
.text:00415B96                 mov     edx, [esp+13Ch+var_104]
.text:00415B9A                 mov     [esp+13Ch+var_100], eax
.text:00415B9E                 mov     ebp, 6
.text:00415BA3                 mov     ebx, [esp+13Ch+var_100]
.text:00415BA7                 mov     [esp+13Ch+Radix], edx
.text:00415BAB                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415BB2                 mov     [esp+13Ch+var_130], ebx
.text:00415BB6                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415BBE                 call    sub_429510
.text:00415BC3                 mov     [esp+13Ch+var_10C], eax
.text:00415BC7                 mov     [esp+13Ch+var_108], edx
.text:00415BCB
.text:00415BCB loc_415BCB:                             ; CODE XREF: sub_4154F0+718↓j
.text:00415BCB                 mov     ebx, [esi+4]
.text:00415BCE                 mov     edx, [esi]
.text:00415BD0                 cmp     [esp+13Ch+var_108], ebx
.text:00415BD4                 mov     [esp+13Ch+var_110], ebx
.text:00415BD8                 mov     [esp+13Ch+var_114], edx
.text:00415BDC                 ja      short loc_415C13
.text:00415BDE                 mov     eax, [esp+13Ch+var_110]
.text:00415BE2                 cmp     [esp+13Ch+var_108], eax
.text:00415BE6                 jb      short loc_415BEE
.text:00415BE8                 cmp     [esp+13Ch+var_10C], edx
.text:00415BEC                 jnb     short loc_415C13
.text:00415BEE
.text:00415BEE loc_415BEE:                             ; CODE XREF: sub_4154F0+6F6↑j
.text:00415BEE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415BF4                 mov     eax, 1
.text:00415BF9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415C00
.text:00415C00 loc_415C00:                             ; CODE XREF: sub_4154F0+75E↓j
.text:00415C00                 or      [esp+13Ch+var_F8], eax
.text:00415C04                 dec     ebp
.text:00415C05                 cmp     ebp, 0FFFFFFFFh
.text:00415C08                 jnz     short loc_415BCB
.text:00415C0A                 mov     eax, [esp+13Ch+var_F8]
.text:00415C0E                 jmp     loc_4157EA
.text:00415C13 ; ---------------------------------------------------------------------------
.text:00415C13
.text:00415C13 loc_415C13:                             ; CODE XREF: sub_4154F0+6EC↑j
.text:00415C13                                         ; sub_4154F0+6FC↑j
.text:00415C13                 mov     eax, [esp+13Ch+var_114]
.text:00415C17                 mov     ebx, [esp+13Ch+var_100]
.text:00415C1B                 mul     [esp+13Ch+var_104]
.text:00415C1F                 mov     ecx, edx
.text:00415C21                 mov     edx, [esp+13Ch+var_104]
.text:00415C25                 mov     [esp+13Ch+var_124], eax
.text:00415C29                 mov     eax, [esp+13Ch+var_114]
.text:00415C2D                 imul    eax, ebx
.text:00415C30                 mov     ebx, [esp+13Ch+var_110]
.text:00415C34                 imul    edx, ebx
.text:00415C37                 add     ecx, eax
.text:00415C39                 xor     eax, eax
.text:00415C3B                 add     ecx, edx
.text:00415C3D                 mov     [esp+13Ch+var_120], ecx
.text:00415C41                 mov     ebx, [esp+13Ch+var_120]
.text:00415C45                 mov     ecx, [esp+13Ch+var_124]
.text:00415C49                 mov     [esi+4], ebx
.text:00415C4C                 mov     [esi], ecx
.text:00415C4E                 jmp     short loc_415C00
.text:00415C50 ; ---------------------------------------------------------------------------
.text:00415C50
.text:00415C50 loc_415C50:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415C50                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415C50                 xor     eax, eax        ; jumptable 004156A9 case 99
.text:00415C52                 jmp     loc_4157EC
.text:00415C57 ; ---------------------------------------------------------------------------
.text:00415C57
.text:00415C57 loc_415C57:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415C57                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415C57                 mov     [esp+13Ch+var_5C], ebx ; jumptable 004156A9 cases 71,103
.text:00415C5E                 mov     eax, ebx
.text:00415C60                 xor     ebp, ebp
.text:00415C62                 mov     [esp+13Ch+var_50], ebp
.text:00415C69                 sar     eax, 1Fh
.text:00415C6C                 mov     edx, [esp+13Ch+var_5C]
.text:00415C73                 mov     [esp+13Ch+var_58], eax
.text:00415C7A                 lea     esi, [esp+13Ch+var_24]
.text:00415C81                 mov     ebp, 2
.text:00415C86                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415C8D                 mov     ebx, [esp+13Ch+var_58]
.text:00415C94                 mov     [esp+13Ch+Radix], edx
.text:00415C98                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415CA0                 mov     [esp+13Ch+var_130], ebx
.text:00415CA4                 call    sub_429510
.text:00415CA9                 mov     [esp+13Ch+var_64], eax
.text:00415CB0                 mov     [esp+13Ch+var_60], edx
.text:00415CB7
.text:00415CB7 loc_415CB7:                             ; CODE XREF: sub_4154F0+819↓j
.text:00415CB7                 mov     ebx, [esi+4]
.text:00415CBA                 mov     edx, [esi]
.text:00415CBC                 cmp     [esp+13Ch+var_60], ebx
.text:00415CC3                 mov     [esp+13Ch+var_68], ebx
.text:00415CCA                 mov     [esp+13Ch+var_6C], edx
.text:00415CD1                 ja      short loc_415D17
.text:00415CD3                 mov     eax, [esp+13Ch+var_68]
.text:00415CDA                 cmp     [esp+13Ch+var_60], eax
.text:00415CE1                 jb      short loc_415CEC
.text:00415CE3                 cmp     [esp+13Ch+var_64], edx
.text:00415CEA                 jnb     short loc_415D17
.text:00415CEC
.text:00415CEC loc_415CEC:                             ; CODE XREF: sub_4154F0+7F1↑j
.text:00415CEC                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415CF2                 mov     eax, 1
.text:00415CF7                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415CFE
.text:00415CFE loc_415CFE:                             ; CODE XREF: sub_4154F0+874↓j
.text:00415CFE                 or      [esp+13Ch+var_50], eax
.text:00415D05                 dec     ebp
.text:00415D06                 cmp     ebp, 0FFFFFFFFh
.text:00415D09                 jnz     short loc_415CB7
.text:00415D0B                 mov     eax, [esp+13Ch+var_50]
.text:00415D12                 jmp     loc_4157EA
.text:00415D17 ; ---------------------------------------------------------------------------
.text:00415D17
.text:00415D17 loc_415D17:                             ; CODE XREF: sub_4154F0+7E1↑j
.text:00415D17                                         ; sub_4154F0+7FA↑j
.text:00415D17                 mov     ecx, [esp+13Ch+var_58]
.text:00415D1E                 mov     eax, [esp+13Ch+var_6C]
.text:00415D25                 mov     ebx, [esp+13Ch+var_6C]
.text:00415D2C                 mul     [esp+13Ch+var_5C]
.text:00415D33                 imul    ebx, ecx
.text:00415D36                 mov     ecx, edx
.text:00415D38                 mov     [esp+13Ch+var_124], eax
.text:00415D3C                 add     ecx, ebx
.text:00415D3E                 mov     edx, [esp+13Ch+var_5C]
.text:00415D45                 mov     ebx, [esp+13Ch+var_68]
.text:00415D4C                 xor     eax, eax
.text:00415D4E                 imul    edx, ebx
.text:00415D51                 add     ecx, edx
.text:00415D53                 mov     [esp+13Ch+var_120], ecx
.text:00415D57                 mov     ebx, [esp+13Ch+var_120]
.text:00415D5B                 mov     ecx, [esp+13Ch+var_124]
.text:00415D5F                 mov     [esi+4], ebx
.text:00415D62                 mov     [esi], ecx
.text:00415D64                 jmp     short loc_415CFE
.text:00415D66 ; ---------------------------------------------------------------------------
.text:00415D66
.text:00415D66 loc_415D66:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415D66                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415D66                 mov     [esp+13Ch+var_74], ebx ; jumptable 004156A9 cases 75,107
.text:00415D6D                 mov     eax, ebx
.text:00415D6F                 lea     esi, [esp+13Ch+var_24]
.text:00415D76                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415D7D                 sar     eax, 1Fh
.text:00415D80                 mov     edx, [esp+13Ch+var_74]
.text:00415D87                 mov     [esp+13Ch+var_70], eax
.text:00415D8E                 mov     ebx, [esp+13Ch+var_70]
.text:00415D95                 mov     [esp+13Ch+Radix], edx
.text:00415D99                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415DA1                 mov     [esp+13Ch+var_130], ebx
.text:00415DA5                 call    sub_429510
.text:00415DAA                 mov     ebp, [esp+13Ch+var_20]
.text:00415DB1                 mov     ecx, [esp+13Ch+var_24]
.text:00415DB8                 cmp     edx, ebp
.text:00415DBA                 mov     [esp+13Ch+var_11C], ecx
.text:00415DBE                 mov     [esp+13Ch+var_118], ebp
.text:00415DC2                 ja      short loc_415DE9
.text:00415DC4                 cmp     edx, [esp+13Ch+var_118]
.text:00415DC8                 jb      short loc_415DCE
.text:00415DCA                 cmp     eax, ecx
.text:00415DCC                 jnb     short loc_415DE9
.text:00415DCE
.text:00415DCE loc_415DCE:                             ; CODE XREF: sub_4154F0+8D8↑j
.text:00415DCE                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415DD4                 mov     edx, 1
.text:00415DD9                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415DE0
.text:00415DE0 loc_415DE0:                             ; CODE XREF: sub_4154F0+93D↓j
.text:00415DE0                 xor     eax, eax
.text:00415DE2                 or      eax, edx
.text:00415DE4                 jmp     loc_4157EA
.text:00415DE9 ; ---------------------------------------------------------------------------
.text:00415DE9
.text:00415DE9 loc_415DE9:                             ; CODE XREF: sub_4154F0+8D2↑j
.text:00415DE9                                         ; sub_4154F0+8DC↑j
.text:00415DE9                 mov     eax, [esp+13Ch+var_11C]
.text:00415DED                 mov     ebp, [esp+13Ch+var_11C]
.text:00415DF1                 mov     ebx, [esp+13Ch+var_118]
.text:00415DF5                 mul     [esp+13Ch+var_74]
.text:00415DFC                 mov     [esp+13Ch+var_124], eax
.text:00415E00                 mov     eax, [esp+13Ch+var_70]
.text:00415E07                 mov     ecx, [esp+13Ch+var_124]
.text:00415E0B                 imul    ebp, eax
.text:00415E0E                 mov     eax, edx
.text:00415E10                 xor     edx, edx
.text:00415E12                 mov     [esi], ecx
.text:00415E14                 add     eax, ebp
.text:00415E16                 mov     ebp, [esp+13Ch+var_74]
.text:00415E1D                 imul    ebp, ebx
.text:00415E20                 add     eax, ebp
.text:00415E22                 mov     [esp+13Ch+var_120], eax
.text:00415E26                 mov     ebp, [esp+13Ch+var_120]
.text:00415E2A                 mov     [esi+4], ebp
.text:00415E2D                 jmp     short loc_415DE0
.text:00415E2F ; ---------------------------------------------------------------------------
.text:00415E2F
.text:00415E2F loc_415E2F:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415E2F                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415E2F                 mov     [esp+13Ch+var_84], ebx ; jumptable 004156A9 cases 77,109
.text:00415E36                 mov     eax, ebx
.text:00415E38                 xor     ebp, ebp
.text:00415E3A                 mov     [esp+13Ch+var_78], ebp
.text:00415E41                 sar     eax, 1Fh
.text:00415E44                 mov     edx, [esp+13Ch+var_84]
.text:00415E4B                 mov     [esp+13Ch+var_80], eax
.text:00415E52                 lea     esi, [esp+13Ch+var_24]
.text:00415E59                 mov     ebp, 1
.text:00415E5E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415E65                 mov     ecx, [esp+13Ch+var_80]
.text:00415E6C                 mov     [esp+13Ch+Radix], edx
.text:00415E70                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415E78                 mov     [esp+13Ch+var_130], ecx
.text:00415E7C                 call    sub_429510
.text:00415E81                 mov     [esp+13Ch+var_8C], eax
.text:00415E88                 mov     [esp+13Ch+var_88], edx
.text:00415E8F
.text:00415E8F loc_415E8F:                             ; CODE XREF: sub_4154F0+9F1↓j
.text:00415E8F                 mov     ebx, [esi+4]
.text:00415E92                 mov     edx, [esi]
.text:00415E94                 cmp     [esp+13Ch+var_88], ebx
.text:00415E9B                 mov     [esp+13Ch+var_90], ebx
.text:00415EA2                 mov     [esp+13Ch+var_94], edx
.text:00415EA9                 ja      short loc_415EEF
.text:00415EAB                 mov     eax, [esp+13Ch+var_90]
.text:00415EB2                 cmp     [esp+13Ch+var_88], eax
.text:00415EB9                 jb      short loc_415EC4
.text:00415EBB                 cmp     [esp+13Ch+var_8C], edx
.text:00415EC2                 jnb     short loc_415EEF
.text:00415EC4
.text:00415EC4 loc_415EC4:                             ; CODE XREF: sub_4154F0+9C9↑j
.text:00415EC4                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415ECA                 mov     eax, 1
.text:00415ECF                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415ED6
.text:00415ED6 loc_415ED6:                             ; CODE XREF: sub_4154F0+A4C↓j
.text:00415ED6                 or      [esp+13Ch+var_78], eax
.text:00415EDD                 dec     ebp
.text:00415EDE                 cmp     ebp, 0FFFFFFFFh
.text:00415EE1                 jnz     short loc_415E8F
.text:00415EE3                 mov     eax, [esp+13Ch+var_78]
.text:00415EEA                 jmp     loc_4157EA
.text:00415EEF ; ---------------------------------------------------------------------------
.text:00415EEF
.text:00415EEF loc_415EEF:                             ; CODE XREF: sub_4154F0+9B9↑j
.text:00415EEF                                         ; sub_4154F0+9D2↑j
.text:00415EEF                 mov     ecx, [esp+13Ch+var_80]
.text:00415EF6                 mov     eax, [esp+13Ch+var_94]
.text:00415EFD                 mov     ebx, [esp+13Ch+var_94]
.text:00415F04                 mul     [esp+13Ch+var_84]
.text:00415F0B                 imul    ebx, ecx
.text:00415F0E                 mov     ecx, edx
.text:00415F10                 mov     [esp+13Ch+var_124], eax
.text:00415F14                 add     ecx, ebx
.text:00415F16                 mov     edx, [esp+13Ch+var_84]
.text:00415F1D                 mov     ebx, [esp+13Ch+var_90]
.text:00415F24                 xor     eax, eax
.text:00415F26                 imul    edx, ebx
.text:00415F29                 add     ecx, edx
.text:00415F2B                 mov     [esp+13Ch+var_120], ecx
.text:00415F2F                 mov     ebx, [esp+13Ch+var_120]
.text:00415F33                 mov     ecx, [esp+13Ch+var_124]
.text:00415F37                 mov     [esi+4], ebx
.text:00415F3A                 mov     [esi], ecx
.text:00415F3C                 jmp     short loc_415ED6
.text:00415F3E ; ---------------------------------------------------------------------------
.text:00415F3E
.text:00415F3E loc_415F3E:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00415F3E                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00415F3E                 mov     [esp+13Ch+var_C4], ebx ; jumptable 004156A9 cases 84,116
.text:00415F42                 mov     eax, ebx
.text:00415F44                 xor     ebp, ebp
.text:00415F46                 mov     [esp+13Ch+var_B8], ebp
.text:00415F4D                 sar     eax, 1Fh
.text:00415F50                 mov     edx, [esp+13Ch+var_C4]
.text:00415F54                 mov     [esp+13Ch+var_C0], eax
.text:00415F58                 lea     esi, [esp+13Ch+var_24]
.text:00415F5F                 mov     ebp, 3
.text:00415F64                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00415F6B                 mov     ebx, [esp+13Ch+var_C0]
.text:00415F6F                 mov     [esp+13Ch+Radix], edx
.text:00415F73                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:00415F7B                 mov     [esp+13Ch+var_130], ebx
.text:00415F7F                 call    sub_429510
.text:00415F84                 mov     [esp+13Ch+var_CC], eax
.text:00415F88                 mov     [esp+13Ch+var_C8], edx
.text:00415F8C
.text:00415F8C loc_415F8C:                             ; CODE XREF: sub_4154F0+ADC↓j
.text:00415F8C                 mov     ebx, [esi+4]
.text:00415F8F                 mov     edx, [esi]
.text:00415F91                 cmp     [esp+13Ch+var_C8], ebx
.text:00415F95                 mov     [esp+13Ch+var_D0], ebx
.text:00415F99                 mov     [esp+13Ch+var_D4], edx
.text:00415F9D                 ja      short loc_415FDA
.text:00415F9F                 mov     eax, [esp+13Ch+var_D0]
.text:00415FA3                 cmp     [esp+13Ch+var_C8], eax
.text:00415FA7                 jb      short loc_415FAF
.text:00415FA9                 cmp     [esp+13Ch+var_CC], edx
.text:00415FAD                 jnb     short loc_415FDA
.text:00415FAF
.text:00415FAF loc_415FAF:                             ; CODE XREF: sub_4154F0+AB7↑j
.text:00415FAF                 mov     dword ptr [esi], 0FFFFFFFFh
.text:00415FB5                 mov     eax, 1
.text:00415FBA                 mov     dword ptr [esi+4], 0FFFFFFFFh
.text:00415FC1
.text:00415FC1 loc_415FC1:                             ; CODE XREF: sub_4154F0+B25↓j
.text:00415FC1                 or      [esp+13Ch+var_B8], eax
.text:00415FC8                 dec     ebp
.text:00415FC9                 cmp     ebp, 0FFFFFFFFh
.text:00415FCC                 jnz     short loc_415F8C
.text:00415FCE                 mov     eax, [esp+13Ch+var_B8]
.text:00415FD5                 jmp     loc_4157EA
.text:00415FDA ; ---------------------------------------------------------------------------
.text:00415FDA
.text:00415FDA loc_415FDA:                             ; CODE XREF: sub_4154F0+AAD↑j
.text:00415FDA                                         ; sub_4154F0+ABD↑j
.text:00415FDA                 mov     ecx, [esp+13Ch+var_C0]
.text:00415FDE                 mov     eax, [esp+13Ch+var_D4]
.text:00415FE2                 mov     ebx, [esp+13Ch+var_D4]
.text:00415FE6                 mul     [esp+13Ch+var_C4]
.text:00415FEA                 imul    ebx, ecx
.text:00415FED                 mov     ecx, edx
.text:00415FEF                 mov     [esp+13Ch+var_124], eax
.text:00415FF3                 add     ecx, ebx
.text:00415FF5                 mov     edx, [esp+13Ch+var_C4]
.text:00415FF9                 mov     ebx, [esp+13Ch+var_D0]
.text:00415FFD                 xor     eax, eax
.text:00415FFF                 imul    edx, ebx
.text:00416002                 add     ecx, edx
.text:00416004                 mov     [esp+13Ch+var_120], ecx
.text:00416008                 mov     ebx, [esp+13Ch+var_120]
.text:0041600C                 mov     ecx, [esp+13Ch+var_124]
.text:00416010                 mov     [esi+4], ebx
.text:00416013                 mov     [esi], ecx
.text:00416015                 jmp     short loc_415FC1
.text:00416017 ; ---------------------------------------------------------------------------
.text:00416017
.text:00416017 loc_416017:                             ; CODE XREF: sub_4154F0+1B9↑j
.text:00416017                                         ; DATA XREF: sub_4154F0:jpt_4156A9↑o
.text:00416017                 mov     [esp+13Ch+Radix], 2 ; jumptable 004156A9 case 119
.text:0041601F                 lea     ebp, [esp+13Ch+var_24]
.text:00416026                 mov     [esp+13Ch+var_130], 0
.text:0041602E                 mov     [esp+13Ch+C], 0FFFFFFFFh
.text:00416035                 mov     [esp+13Ch+Type], 0FFFFFFFFh
.text:0041603D                 call    sub_429510
.text:00416042                 mov     esi, [esp+13Ch+var_20]
.text:00416049                 mov     ecx, [esp+13Ch+var_24]
.text:00416050                 cmp     edx, esi
.text:00416052                 ja      short loc_416062
.text:00416054                 jb      loc_415815
.text:0041605A                 cmp     eax, ecx
.text:0041605C                 jb      loc_415815
.text:00416062
.text:00416062 loc_416062:                             ; CODE XREF: sub_4154F0+B62↑j
.text:00416062                 mov     esi, [ebp+0]
.text:00416065                 mov     eax, 2
.text:0041606A                 mov     ecx, [ebp+4]
.text:0041606D                 mul     esi
.text:0041606F                 lea     edx, [edx+ecx*2]
.text:00416072                 jmp     loc_4157E2
.text:00416077 ; ---------------------------------------------------------------------------
.text:00416077
.text:00416077 loc_416077:                             ; CODE XREF: sub_4154F0+196↑j
.text:00416077                                         ; sub_4154F0+1A8↑j
.text:00416077                 mov     esi, 2
.text:0041607C                 mov     ebx, 3E8h
.text:00416081                 mov     [esp+13Ch+var_30], esi
.text:00416088                 jmp     loc_41569E
.text:0041608D ; ---------------------------------------------------------------------------
.text:0041608D
.text:0041608D loc_41608D:                             ; CODE XREF: sub_4154F0+19F↑j
.text:0041608D                 cmp     eax, 69h ; 'i'
.text:00416090                 jnz     loc_41569E
.text:00416096                 cmp     byte ptr [edx+2], 42h ; 'B'
.text:0041609A                 jnz     loc_41569E
.text:004160A0                 mov     eax, 3
.text:004160A5                 mov     [esp+13Ch+var_30], eax
.text:004160AC                 jmp     loc_41569E
.text:004160B1 ; ---------------------------------------------------------------------------
.text:004160B1
.text:004160B1 loc_4160B1:                             ; CODE XREF: sub_4154F0+187↑j
.text:004160B1                 mov     edx, [edi]
.text:004160B3                 jmp     loc_41569E
.text:004160B8 ; ---------------------------------------------------------------------------
.text:004160B8
.text:004160B8 loc_4160B8:                             ; CODE XREF: sub_4154F0+E2↑j
.text:004160B8                 mov     edx, [esp+13Ch+var_24]
.text:004160BF                 mov     ecx, [esp+13Ch+var_20]
.text:004160C6                 mov     edi, [esp+13Ch+arg_C]
.text:004160CD                 mov     [edi], edx
.text:004160CF                 mov     [edi+4], ecx
.text:004160D2                 jmp     loc_4155FB
.text:004160D7 ; ---------------------------------------------------------------------------
.text:004160D7
.text:004160D7 loc_4160D7:                             ; CODE XREF: sub_4154F0+D3↑j
.text:004160D7                 call    _errno
.text:004160DC                 cmp     dword ptr [eax], 22h ; '"'
.text:004160DF                 jnz     short loc_4160F2
.text:004160E1                 mov     esi, 1
.text:004160E6                 mov     [esp+13Ch+var_28], esi
.text:004160ED                 jmp     loc_4155C9
.text:004160F2 ; ---------------------------------------------------------------------------
.text:004160F2
.text:004160F2 loc_4160F2:                             ; CODE XREF: sub_4154F0+BEF↑j
.text:004160F2                                         ; sub_4154F0+C15↓j ...
.text:004160F2                 mov     eax, 4
.text:004160F7                 jmp     loc_415602
.text:004160FC ; ---------------------------------------------------------------------------
.text:004160FC
.text:004160FC loc_4160FC:                             ; CODE XREF: sub_4154F0+C4↑j
.text:004160FC                 mov     ebx, [esp+13Ch+Str]
.text:00416103                 test    ebx, ebx
.text:00416105                 jz      short loc_4160F2
.text:00416107                 movzx   eax, byte ptr [eax]
.text:0041610A                 test    al, al
.text:0041610C                 jz      short loc_4160F2
.text:0041610E                 mov     esi, [esp+13Ch+Str]
.text:00416115                 movsx   ebp, al
.text:00416118                 mov     [esp+13Ch+Type], ebp ; Val
.text:0041611C                 mov     [esp+13Ch+C], esi ; Str
.text:0041611F                 call    strchr
.text:00416124                 test    eax, eax
.text:00416126                 jz      short loc_4160F2
.text:00416128                 mov     ecx, 1
.text:0041612D                 xor     edx, edx
.text:0041612F                 mov     [esp+13Ch+var_24], ecx
.text:00416136                 mov     [esp+13Ch+var_20], edx
.text:0041613D                 jmp     loc_4155C9
.text:00416142 ; ---------------------------------------------------------------------------
.text:00416142
.text:00416142 loc_416142:                             ; CODE XREF: sub_4154F0+61↑j
.text:00416142                 mov     eax, ds:_pctype
.text:00416147                 mov     ecx, [eax]
.text:00416149                 movzx   eax, word ptr [ecx+edx*2]
.text:0041614D                 and     eax, 8
.text:00416150                 jmp     loc_415567
.text:00416155 ; ---------------------------------------------------------------------------
.text:00416155
.text:00416155 loc_416155:                             ; CODE XREF: sub_4154F0+33↑j
.text:00416155                 lea     edi, [esp+13Ch+var_18]
.text:0041615C                 jmp     loc_415529
.text:00416161 ; ---------------------------------------------------------------------------
.text:00416161
.text:00416161 loc_416161:                             ; CODE XREF: sub_4154F0+24↑j
.text:00416161                 mov     [esp+13Ch+Radix], 70h ; 'p'
.text:00416169                 mov     [esp+13Ch+Type], offset aCoreutils530Sr_2 ; "../../coreutils-5.3.0-src/lib/xstrtol.c"
.text:00416171                 mov     [esp+13Ch+C], offset a0StrtolBaseStr_0 ; "0 <= strtol_base && strtol_base <= 36"
.text:00416178                 call    _assert
.text:00416178 sub_4154F0      endp
.text:00416178
.text:00416178 ; ---------------------------------------------------------------------------
.text:0041617D                 align 10h
.text:00416180                 jmp     ds:libintl_bindtextdomain
.text:00416180 ; ---------------------------------------------------------------------------
.text:00416186                 align 10h
.text:00416190                 jmp     ds:libintl_textdomain
.text:00416190 ; ---------------------------------------------------------------------------
.text:00416196                 align 10h
.text:004161A0                 jmp     ds:libintl_gettext
.text:004161A0 ; ---------------------------------------------------------------------------
.text:004161A6                 align 10h
.text:004161B0                 jmp     ds:libintl_dcgettext
.text:004161B0 ; ---------------------------------------------------------------------------
.text:004161B6                 align 10h
.text:004161C0 ; const char aS_4[]
.text:004161C0 aS_4            db ': %s',0             ; DATA XREF: sub_4161E0+B8↓o
.text:004161C0                                         ; sub_4162E4+122↓o
.text:004161C5 aUnknownSystemE db 'Unknown system error',0
.text:004161C5                                         ; DATA XREF: sub_4161E0:loc_4162AD↓o
.text:004161C5                                         ; sub_4162E4:loc_41641E↓o
.text:004161DA ; const char aS_5[]
.text:004161DA aS_5            db '%s: ',0             ; DATA XREF: sub_4161E0:loc_4162B4↓o
.text:004161DF                 align 10h
.text:004161E0
.text:004161E0 ; =============== S U B R O U T I N E =======================================
.text:004161E0
.text:004161E0
.text:004161E0 ; int __cdecl sub_4161E0(int Code, int ErrorMessage, char *, char)
.text:004161E0 sub_4161E0      proc near               ; CODE XREF: sub_4025F0+895↑p
.text:004161E0                                         ; sub_4025F0+A9B↑p ...
.text:004161E0
.text:004161E0 Stream          = dword ptr -1Ch
.text:004161E0 Format          = dword ptr -18h
.text:004161E0 ArgList         = dword ptr -14h
.text:004161E0 Code            = dword ptr  4
.text:004161E0 ErrorMessage    = dword ptr  8
.text:004161E0 arg_8           = dword ptr  0Ch
.text:004161E0 arg_C           = byte ptr  10h
.text:004161E0
.text:004161E0                 push    esi
.text:004161E1                 push    ebx
.text:004161E2                 sub     esp, 14h
.text:004161E5                 mov     edx, ds:_iob
.text:004161EB                 mov     esi, [esp+1Ch+Code]
.text:004161EF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004161F3                 add     edx, 20h ; ' '
.text:004161F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004161F9                 call    fflush
.text:004161FE                 mov     eax, ds:dword_42D330
.text:00416203                 test    eax, eax
.text:00416205                 jz      loc_4162B4
.text:0041620B                 call    eax ; dword_42D330
.text:0041620D
.text:0041620D loc_41620D:                             ; CODE XREF: sub_4161E0+F7↓j
.text:0041620D                 lea     edx, [esp+1Ch+arg_C]
.text:00416211                 mov     ecx, [esp+1Ch+arg_8]
.text:00416215                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00416219                 mov     edx, ds:_iob
.text:0041621F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00416223                 add     edx, 40h ; '@'
.text:00416226                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00416229                 call    vfprintf
.text:0041622E                 inc     ds:dword_42D340
.text:00416234                 test    ebx, ebx
.text:00416236                 jnz     short loc_416282
.text:00416238
.text:00416238 loc_416238:                             ; CODE XREF: sub_4161E0+CB↓j
.text:00416238                 mov     edx, ds:_iob
.text:0041623E                 lea     ecx, [edx+40h]
.text:00416241                 mov     ebx, [ecx+4]
.text:00416244                 dec     ebx
.text:00416245                 test    ebx, ebx
.text:00416247                 mov     [ecx+4], ebx
.text:0041624A                 js      short loc_416270
.text:0041624C                 mov     ecx, [edx+40h]
.text:0041624F                 mov     byte ptr [ecx], 0Ah
.text:00416252                 inc     dword ptr [edx+40h]
.text:00416255
.text:00416255 loc_416255:                             ; CODE XREF: sub_4161E0+A0↓j
.text:00416255                 mov     edx, ds:_iob
.text:0041625B                 add     edx, 40h ; '@'
.text:0041625E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00416261                 call    fflush
.text:00416266                 test    esi, esi
.text:00416268                 jnz     short loc_4162DC
.text:0041626A                 add     esp, 14h
.text:0041626D                 pop     ebx
.text:0041626E                 pop     esi
.text:0041626F                 retn
.text:00416270 ; ---------------------------------------------------------------------------
.text:00416270
.text:00416270 loc_416270:                             ; CODE XREF: sub_4161E0+6A↑j
.text:00416270                 mov     [esp+1Ch+Format], ecx ; File
.text:00416274                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0041627B                 call    _flsbuf
.text:00416280                 jmp     short loc_416255
.text:00416282 ; ---------------------------------------------------------------------------
.text:00416282
.text:00416282 loc_416282:                             ; CODE XREF: sub_4161E0+56↑j
.text:00416282                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00416285                 call    strerror
.text:0041628A                 test    eax, eax
.text:0041628C                 jz      short loc_4162AD
.text:0041628E
.text:0041628E loc_41628E:                             ; CODE XREF: sub_4161E0+D2↓j
.text:0041628E                 mov     [esp+1Ch+ArgList], eax
.text:00416292                 mov     ebx, ds:_iob
.text:00416298                 mov     [esp+1Ch+Format], offset aS_4 ; ": %s"
.text:004162A0                 add     ebx, 40h ; '@'
.text:004162A3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004162A6                 call    fprintf
.text:004162AB                 jmp     short loc_416238
.text:004162AD ; ---------------------------------------------------------------------------
.text:004162AD
.text:004162AD loc_4162AD:                             ; CODE XREF: sub_4161E0+AC↑j
.text:004162AD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004162B2                 jmp     short loc_41628E
.text:004162B4 ; ---------------------------------------------------------------------------
.text:004162B4
.text:004162B4 loc_4162B4:                             ; CODE XREF: sub_4161E0+25↑j
.text:004162B4                 mov     [esp+1Ch+Format], offset aS_5 ; "%s: "
.text:004162BC                 mov     edx, ds:_iob
.text:004162C2                 mov     ecx, ds:dword_42D300
.text:004162C8                 add     edx, 40h ; '@'
.text:004162CB                 mov     [esp+1Ch+ArgList], ecx
.text:004162CF                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004162D2                 call    fprintf
.text:004162D7                 jmp     loc_41620D
.text:004162DC ; ---------------------------------------------------------------------------
.text:004162DC
.text:004162DC loc_4162DC:                             ; CODE XREF: sub_4161E0+88↑j
.text:004162DC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004162DF                 call    exit
.text:004162DF sub_4161E0      endp
.text:004162DF
.text:004162E4
.text:004162E4 ; =============== S U B R O U T I N E =======================================
.text:004162E4
.text:004162E4
.text:004162E4 ; int __cdecl sub_4162E4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004162E4 sub_4162E4      proc near               ; DATA XREF: sub_4162E4+77↓o
.text:004162E4
.text:004162E4 Stream          = dword ptr -28h
.text:004162E4 Format          = dword ptr -24h
.text:004162E4 ArgList         = dword ptr -20h
.text:004162E4 var_1C          = dword ptr -1Ch
.text:004162E4 Code            = dword ptr  8
.text:004162E4 ErrorMessage    = dword ptr  0Ch
.text:004162E4 Str2            = dword ptr  10h
.text:004162E4 arg_10          = dword ptr  14h
.text:004162E4 arg_14          = dword ptr  18h
.text:004162E4 arg_18          = byte ptr  1Ch
.text:004162E4
.text:004162E4                 and     eax, 64253A73h
.text:004162E9                 cmp     ah, [eax]
.text:004162EB
.text:004162EB loc_4162EB:                             ; DATA XREF: sub_4162E4:loc_416425↓o
.text:004162EB                 add     ds:55003A73h, ah
.text:004162F1                 push    edi
.text:004162F2                 push    esi
.text:004162F3                 push    ebx
.text:004162F4                 sub     esp, 1Ch
.text:004162F7                 mov     edx, ds:dword_42D370
.text:004162FD                 mov     ebp, [esp+28h+Code]
.text:00416301                 mov     edi, [esp+28h+ErrorMessage]
.text:00416305                 test    edx, edx
.text:00416307                 mov     ebx, [esp+28h+Str2]
.text:0041630B                 mov     esi, [esp+28h+arg_10]
.text:0041630F                 jz      short loc_416329
.text:00416311                 cmp     ds:dword_42C600, esi
.text:00416317                 jz      loc_416450
.text:0041631D
.text:0041631D loc_41631D:                             ; CODE XREF: sub_4162E4+18D↓j
.text:0041631D                 mov     ds:Str1, ebx
.text:00416323                 mov     ds:dword_42C600, esi
.text:00416329
.text:00416329 loc_416329:                             ; CODE XREF: sub_4162E4+2B↑j
.text:00416329                 mov     edx, ds:_iob
.text:0041632F                 add     edx, 20h ; ' '
.text:00416332                 mov     [esp+28h+Stream], edx ; Stream
.text:00416335                 call    fflush
.text:0041633A                 mov     eax, ds:dword_42D330
.text:0041633F                 test    eax, eax
.text:00416341                 jz      loc_416425
.text:00416347                 call    eax ; dword_42D330
.text:00416349
.text:00416349 loc_416349:                             ; CODE XREF: sub_4162E4+164↓j
.text:00416349                 test    ebx, ebx
.text:0041634B                 jz      short loc_41636E
.text:0041634D                 mov     [esp+28h+ArgList], ebx
.text:00416351                 mov     ebx, ds:_iob
.text:00416357                 mov     [esp+28h+var_1C], esi
.text:0041635B                 mov     [esp+28h+Format], offset sub_4162E4 ; Format
.text:00416363                 add     ebx, 40h ; '@'
.text:00416366                 mov     [esp+28h+Stream], ebx ; Stream
.text:00416369                 call    fprintf
.text:0041636E
.text:0041636E loc_41636E:                             ; CODE XREF: sub_4162E4+67↑j
.text:0041636E                 mov     esi, ds:_iob
.text:00416374                 lea     edx, [esp+28h+arg_18]
.text:00416378                 mov     ecx, [esp+28h+arg_14]
.text:0041637C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00416380                 add     esi, 40h ; '@'
.text:00416383                 mov     [esp+28h+Format], ecx ; Format
.text:00416387                 mov     [esp+28h+Stream], esi ; Stream
.text:0041638A                 call    vfprintf
.text:0041638F                 inc     ds:dword_42D340
.text:00416395                 test    edi, edi
.text:00416397                 jnz     short loc_4163F0
.text:00416399
.text:00416399 loc_416399:                             ; CODE XREF: sub_4162E4+135↓j
.text:00416399                 mov     edx, ds:_iob
.text:0041639F                 lea     ecx, [edx+40h]
.text:004163A2                 mov     ebx, [ecx+4]
.text:004163A5                 dec     ebx
.text:004163A6                 test    ebx, ebx
.text:004163A8                 mov     [ecx+4], ebx
.text:004163AB                 js      short loc_4163D7
.text:004163AD                 mov     esi, [edx+40h]
.text:004163B0                 mov     byte ptr [esi], 0Ah
.text:004163B3                 inc     dword ptr [edx+40h]
.text:004163B6
.text:004163B6 loc_4163B6:                             ; CODE XREF: sub_4162E4+103↓j
.text:004163B6                 mov     ecx, ds:_iob
.text:004163BC                 add     ecx, 40h ; '@'
.text:004163BF                 mov     [esp+28h+Stream], ecx ; Stream
.text:004163C2                 call    fflush
.text:004163C7                 test    ebp, ebp
.text:004163C9                 jnz     loc_416476
.text:004163CF
.text:004163CF loc_4163CF:                             ; CODE XREF: sub_4162E4+173↓j
.text:004163CF                                         ; sub_4162E4+187↓j
.text:004163CF                 add     esp, 1Ch
.text:004163D2                 pop     ebx
.text:004163D3                 pop     esi
.text:004163D4                 pop     edi
.text:004163D5                 pop     ebp
.text:004163D6                 retn
.text:004163D7 ; ---------------------------------------------------------------------------
.text:004163D7
.text:004163D7 loc_4163D7:                             ; CODE XREF: sub_4162E4+C7↑j
.text:004163D7                 mov     [esp+28h+Format], ecx ; File
.text:004163DB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004163E2                 call    _flsbuf
.text:004163E7                 jmp     short loc_4163B6
.text:004163E7 ; ---------------------------------------------------------------------------
.text:004163E9                 align 10h
.text:004163F0
.text:004163F0 loc_4163F0:                             ; CODE XREF: sub_4162E4+B3↑j
.text:004163F0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004163F3                 call    strerror
.text:004163F8                 test    eax, eax
.text:004163FA                 jz      short loc_41641E
.text:004163FC
.text:004163FC loc_4163FC:                             ; CODE XREF: sub_4162E4+13F↓j
.text:004163FC                 mov     [esp+28h+ArgList], eax
.text:00416400                 mov     edi, ds:_iob
.text:00416406                 mov     [esp+28h+Format], offset aS_4 ; ": %s"
.text:0041640E                 add     edi, 40h ; '@'
.text:00416411                 mov     [esp+28h+Stream], edi ; Stream
.text:00416414                 call    fprintf
.text:00416419                 jmp     loc_416399
.text:0041641E ; ---------------------------------------------------------------------------
.text:0041641E
.text:0041641E loc_41641E:                             ; CODE XREF: sub_4162E4+116↑j
.text:0041641E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00416423                 jmp     short loc_4163FC
.text:00416425 ; ---------------------------------------------------------------------------
.text:00416425
.text:00416425 loc_416425:                             ; CODE XREF: sub_4162E4+5D↑j
.text:00416425                 mov     [esp+28h+Format], (offset loc_4162EB+1) ; Format
.text:0041642D                 mov     ecx, ds:_iob
.text:00416433                 mov     edx, ds:dword_42D300
.text:00416439                 add     ecx, 40h ; '@'
.text:0041643C                 mov     [esp+28h+ArgList], edx
.text:00416440                 mov     [esp+28h+Stream], ecx ; Stream
.text:00416443                 call    fprintf
.text:00416448                 jmp     loc_416349
.text:00416448 ; ---------------------------------------------------------------------------
.text:0041644D                 align 10h
.text:00416450
.text:00416450 loc_416450:                             ; CODE XREF: sub_4162E4+33↑j
.text:00416450                 mov     eax, ds:Str1
.text:00416455                 cmp     ebx, eax
.text:00416457                 jz      loc_4163CF
.text:0041645D                 mov     [esp+28h+Format], ebx ; Str2
.text:00416461                 mov     [esp+28h+Stream], eax ; Str1
.text:00416464                 call    strcmp
.text:00416469                 test    eax, eax
.text:0041646B                 jz      loc_4163CF
.text:00416471                 jmp     loc_41631D
.text:00416476 ; ---------------------------------------------------------------------------
.text:00416476
.text:00416476 loc_416476:                             ; CODE XREF: sub_4162E4+E5↑j
.text:00416476                 mov     [esp+28h+Stream], ebp ; Code
.text:00416479                 call    exit
.text:00416479 sub_4162E4      endp ; sp-analysis failed
.text:00416479
.text:00416479 ; ---------------------------------------------------------------------------
.text:0041647E                 align 10h
.text:00416480
.text:00416480 ; =============== S U B R O U T I N E =======================================
.text:00416480
.text:00416480
.text:00416480 sub_416480      proc near               ; CODE XREF: sub_403C30+70↑p
.text:00416480
.text:00416480 hNamedPipe      = dword ptr -0Ch
.text:00416480 var_8           = dword ptr -8
.text:00416480 var_4           = dword ptr -4
.text:00416480 arg_0           = dword ptr  4
.text:00416480 arg_4           = dword ptr  8
.text:00416480
.text:00416480                 sub     esp, 0Ch
.text:00416483                 mov     edx, [esp+0Ch+arg_4]
.text:00416487                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0041648E                 mov     [esp+0Ch+var_4], edx ; int
.text:00416492                 mov     edx, [esp+0Ch+arg_0]
.text:00416496                 mov     [esp+0Ch+var_8], edx ; int
.text:0041649A                 call    sub_4166F0
.text:0041649F                 add     esp, 0Ch
.text:004164A2                 retn
.text:004164A2 sub_416480      endp
.text:004164A2
.text:004164A2 ; ---------------------------------------------------------------------------
.text:004164A3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:004164A3                                         ; DATA XREF: .text:0041658E↓o
.text:004164B6 aModeO          db 'mode:      %#o',0Ah,0
.text:004164B6                                         ; DATA XREF: .text:004165A4↓o
.text:004164C6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004164C6                                         ; DATA XREF: .text:004165B7↓o
.text:004164D6 aGidLd          db 'gid:       %ld',0Ah,0
.text:004164D6                                         ; DATA XREF: .text:004165CA↓o
.text:004164E6 aDevLu          db 'dev:       %lu',0Ah,0
.text:004164E6                                         ; DATA XREF: .text:004165DD↓o
.text:004164F6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:004164F6                                         ; DATA XREF: .text:004165F0↓o
.text:00416506 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00416506                                         ; DATA XREF: .text:00416606↓o
.text:00416518 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00416518                                         ; DATA XREF: .text:0041661D↓o
.text:00416527 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00416527                                         ; DATA XREF: .text:00416633↓o
.text:00416539 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00416539                                         ; DATA XREF: .text:00416659↓o
.text:0041654C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0041654C                                         ; DATA XREF: .text:0041667B↓o
.text:0041655F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0041655F                                         ; DATA XREF: .text:0041669D↓o
.text:00416573                 align 10h
.text:00416580                 push    ebx
.text:00416581                 sub     esp, 18h
.text:00416584                 mov     ebx, [esp+20h]
.text:00416588                 mov     edx, [ebx+8]
.text:0041658B                 mov     ecx, [ebx+0Ch]
.text:0041658E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00416595                 mov     [esp+4], edx
.text:00416599                 mov     [esp+8], ecx
.text:0041659D                 call    printf
.text:004165A2                 mov     ecx, [ebx]
.text:004165A4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:004165AB                 mov     [esp+4], ecx
.text:004165AF                 call    printf
.text:004165B4                 mov     edx, [ebx+1Ch]
.text:004165B7                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:004165BE                 mov     [esp+4], edx
.text:004165C2                 call    printf
.text:004165C7                 mov     ecx, [ebx+20h]
.text:004165CA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:004165D1                 mov     [esp+4], ecx
.text:004165D5                 call    printf
.text:004165DA                 mov     edx, [ebx+10h]
.text:004165DD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:004165E4                 mov     [esp+4], edx
.text:004165E8                 call    printf
.text:004165ED                 mov     ecx, [ebx+18h]
.text:004165F0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:004165F7                 mov     [esp+4], ecx
.text:004165FB                 call    printf
.text:00416600                 mov     edx, [ebx+30h]
.text:00416603                 mov     ecx, [ebx+34h]
.text:00416606                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:0041660D                 mov     [esp+4], edx
.text:00416611                 mov     [esp+8], ecx
.text:00416615                 call    printf
.text:0041661A                 mov     ecx, [ebx+50h]
.text:0041661D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00416624                 mov     [esp+4], ecx
.text:00416628                 call    printf
.text:0041662D                 mov     ecx, [ebx+5Ch]
.text:00416630                 mov     edx, [ebx+58h]
.text:00416633                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0041663A                 mov     [esp+8], ecx
.text:0041663E                 mov     [esp+4], edx
.text:00416642                 call    printf
.text:00416647                 lea     edx, [ebx+38h]
.text:0041664A                 mov     [esp], edx
.text:0041664D                 call    ctime
.text:00416652                 mov     [esp+8], eax
.text:00416656                 mov     ecx, [ebx+38h]
.text:00416659                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00416660                 mov     [esp+4], ecx
.text:00416664                 call    printf
.text:00416669                 lea     edx, [ebx+40h]
.text:0041666C                 mov     [esp], edx
.text:0041666F                 call    ctime
.text:00416674                 mov     [esp+8], eax
.text:00416678                 mov     ecx, [ebx+40h]
.text:0041667B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00416682                 mov     [esp+4], ecx
.text:00416686                 call    printf
.text:0041668B                 lea     edx, [ebx+48h]
.text:0041668E                 mov     [esp], edx
.text:00416691                 call    ctime
.text:00416696                 mov     [esp+8], eax
.text:0041669A                 mov     edx, [ebx+48h]
.text:0041669D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:004166A4                 mov     [esp+4], edx
.text:004166A8                 call    printf
.text:004166AD                 add     esp, 18h
.text:004166B0                 xor     eax, eax
.text:004166B2                 pop     ebx
.text:004166B3                 retn
.text:004166B3 ; ---------------------------------------------------------------------------
.text:004166B4                 align 10h
.text:004166C0 ; const char aFxstat64BadFil[]
.text:004166C0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004166C0                                         ; DATA XREF: sub_4166F0+7B↓o
.text:004166E4                 align 10h
.text:004166F0
.text:004166F0 ; =============== S U B R O U T I N E =======================================
.text:004166F0
.text:004166F0
.text:004166F0 ; int __cdecl sub_4166F0(HANDLE hNamedPipe, int, int)
.text:004166F0 sub_4166F0      proc near               ; CODE XREF: sub_416480+1A↑p
.text:004166F0                                         ; .text:00419359↓p
.text:004166F0
.text:004166F0 FileHandle      = dword ptr -1Ch
.text:004166F0 var_18          = dword ptr -18h
.text:004166F0 var_C           = dword ptr -0Ch
.text:004166F0 var_8           = dword ptr -8
.text:004166F0 var_4           = dword ptr -4
.text:004166F0 hNamedPipe      = dword ptr  4
.text:004166F0 arg_4           = dword ptr  8
.text:004166F0 arg_8           = dword ptr  0Ch
.text:004166F0
.text:004166F0                 sub     esp, 1Ch
.text:004166F3                 mov     edx, [esp+1Ch+arg_4]
.text:004166F7                 mov     [esp+1Ch+var_C], ebx
.text:004166FB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:004166FF                 mov     [esp+1Ch+var_8], esi
.text:00416703                 mov     esi, [esp+1Ch+arg_8]
.text:00416707                 test    ebx, ebx
.text:00416709                 mov     [esp+1Ch+var_4], edi
.text:0041670D                 jnz     short loc_416747
.text:0041670F                 test    edx, edx
.text:00416711                 js      short loc_416767
.text:00416713                 test    esi, esi
.text:00416715                 jz      short loc_416747
.text:00416717                 cld
.text:00416718                 mov     eax, ebx
.text:0041671A                 mov     edi, esi
.text:0041671C                 mov     ecx, 18h
.text:00416721                 rep stosd
.text:00416723                 mov     [esp+1Ch+arg_4], esi ; int
.text:00416727                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0041672A                 call    _get_osfhandle
.text:0041672F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00416733                 mov     ebx, [esp+1Ch+var_C]
.text:00416737                 mov     esi, [esp+1Ch+var_8]
.text:0041673B                 mov     edi, [esp+1Ch+var_4]
.text:0041673F                 add     esp, 1Ch
.text:00416742                 jmp     sub_416AD0
.text:00416747 ; ---------------------------------------------------------------------------
.text:00416747
.text:00416747 loc_416747:                             ; CODE XREF: sub_4166F0+1D↑j
.text:00416747                                         ; sub_4166F0+25↑j
.text:00416747                 call    _errno
.text:0041674C                 mov     dword ptr [eax], 16h
.text:00416752
.text:00416752 loc_416752:                             ; CODE XREF: sub_4166F0+92↓j
.text:00416752                 mov     ebx, [esp+1Ch+var_C]
.text:00416756                 mov     eax, 0FFFFFFFFh
.text:0041675B                 mov     esi, [esp+1Ch+var_8]
.text:0041675F                 mov     edi, [esp+1Ch+var_4]
.text:00416763                 add     esp, 1Ch
.text:00416766                 retn
.text:00416767 ; ---------------------------------------------------------------------------
.text:00416767
.text:00416767 loc_416767:                             ; CODE XREF: sub_4166F0+21↑j
.text:00416767                 mov     [esp+1Ch+var_18], edx
.text:0041676B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00416772                 call    printf
.text:00416777                 call    _errno
.text:0041677C                 mov     dword ptr [eax], 9
.text:00416782                 jmp     short loc_416752
.text:00416782 sub_4166F0      endp
.text:00416782
.text:00416782 ; ---------------------------------------------------------------------------
.text:00416784                 align 20h
.text:004167A0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:004167A0                                         ; DATA XREF: .data:off_42B134↓o
.text:004167B4 ; const CHAR LibFileName[]
.text:004167B4 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_4167E0+11↓o
.text:004167B4                                         ; sub_416950+C↓o ...
.text:004167C1 ; const CHAR ProcName[]
.text:004167C1 ProcName        db 'GetFileAttributesExA',0
.text:004167C1                                         ; DATA XREF: sub_4167E0+28↓o
.text:004167D6                 align 10h
.text:004167E0
.text:004167E0 ; =============== S U B R O U T I N E =======================================
.text:004167E0
.text:004167E0
.text:004167E0 ; int __cdecl sub_4167E0(LPCSTR lpFileName, int)
.text:004167E0 sub_4167E0      proc near               ; CODE XREF: .text:00417984↓p
.text:004167E0                                         ; sub_417D80+37↓p
.text:004167E0
.text:004167E0 lpModuleName    = dword ptr -18Ch
.text:004167E0 lpProcName      = dword ptr -188h
.text:004167E0 var_184         = dword ptr -184h
.text:004167E0 var_170         = dword ptr -170h
.text:004167E0 var_164         = dword ptr -164h
.text:004167E0 hModule         = dword ptr -160h
.text:004167E0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:004167E0 lpFileName      = dword ptr  4
.text:004167E0 arg_4           = dword ptr  8
.text:004167E0
.text:004167E0                 push    ebp
.text:004167E1                 push    edi
.text:004167E2                 push    esi
.text:004167E3                 push    ebx
.text:004167E4                 sub     esp, 17Ch
.text:004167EA                 mov     ebx, [esp+18Ch+arg_4]
.text:004167F1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:004167F8                 call    GetModuleHandleA
.text:004167FD                 sub     esp, 4
.text:00416800                 mov     [esp+18Ch+hModule], eax
.text:00416804                 mov     edx, [esp+18Ch+hModule]
.text:00416808                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00416810                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00416813                 call    GetProcAddress
.text:00416818                 sub     esp, 8
.text:0041681B                 mov     ebp, eax
.text:0041681D                 mov     eax, [esp+18Ch+lpFileName]
.text:00416824                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00416827                 call    GetFileAttributesA
.text:0041682C                 sub     esp, 4
.text:0041682F                 mov     [esp+18Ch+var_164], eax
.text:00416833                 xor     eax, eax
.text:00416835                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:0041683A                 jz      short loc_416891
.text:0041683C                 cld
.text:0041683D                 mov     ecx, 50h ; 'P'
.text:00416842                 lea     esi, [esp+18Ch+FindFileData]
.text:00416846                 mov     edi, esi
.text:00416848                 test    ebp, ebp
.text:0041684A                 rep stosd
.text:0041684C                 mov     [esp+18Ch+var_170], 0
.text:00416854                 jz      short loc_416875
.text:00416856                 mov     [esp+18Ch+var_184], ebx
.text:0041685A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00416861                 mov     [esp+18Ch+lpProcName], 0
.text:00416869                 mov     [esp+18Ch+lpModuleName], ecx
.text:0041686C                 call    ebp
.text:0041686E                 sub     esp, 0Ch
.text:00416871                 mov     [esp+18Ch+var_170], eax
.text:00416875
.text:00416875 loc_416875:                             ; CODE XREF: sub_4167E0+74↑j
.text:00416875                 mov     eax, [esp+18Ch+var_170]
.text:00416879                 test    eax, eax
.text:0041687B                 jz      short loc_4168A0
.text:0041687D
.text:0041687D loc_41687D:                             ; CODE XREF: sub_4167E0+131↓j
.text:0041687D                                         ; sub_4167E0+14B↓j
.text:0041687D                 mov     ebx, [esp+18Ch+hModule]
.text:00416881                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00416884                 call    FreeLibrary
.text:00416889                 sub     esp, 4
.text:0041688C                 mov     eax, 1
.text:00416891
.text:00416891 loc_416891:                             ; CODE XREF: sub_4167E0+5A↑j
.text:00416891                 add     esp, 17Ch
.text:00416897                 pop     ebx
.text:00416898                 pop     esi
.text:00416899                 pop     edi
.text:0041689A                 pop     ebp
.text:0041689B                 retn
.text:0041689B ; ---------------------------------------------------------------------------
.text:0041689C                 align 10h
.text:004168A0
.text:004168A0 loc_4168A0:                             ; CODE XREF: sub_4167E0+9B↑j
.text:004168A0                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:004168A4                 mov     edx, [esp+18Ch+lpFileName]
.text:004168AB                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:004168AE                 call    FindFirstFileA
.text:004168B3                 sub     esp, 8
.text:004168B6                 xor     ecx, ecx
.text:004168B8                 cmp     eax, 0FFFFFFFFh
.text:004168BB                 setnz   cl
.text:004168BE                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:004168C2                 mov     [ebx], edi
.text:004168C4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:004168C8                 mov     [esp+18Ch+var_170], ecx
.text:004168CC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:004168D0                 mov     [ebx+8], esi
.text:004168D3                 mov     [ebx+4], ecx
.text:004168D6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:004168DA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:004168DE                 mov     [ebx+0Ch], ebp
.text:004168E1                 mov     [ebx+10h], edi
.text:004168E4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:004168E8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:004168EC                 mov     [ebx+18h], esi
.text:004168EF                 mov     [ebx+14h], ecx
.text:004168F2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:004168F6                 mov     [ebx+1Ch], ebp
.text:004168F9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:004168FD                 mov     [ebx+20h], edi
.text:00416900                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00416903                 call    FindClose
.text:00416908                 sub     esp, 4
.text:0041690B                 mov     esi, [esp+18Ch+var_170]
.text:0041690F                 test    esi, esi
.text:00416911                 jnz     loc_41687D
.text:00416917                 cld
.text:00416918                 mov     eax, [esp+18Ch+var_170]
.text:0041691C                 mov     ecx, 9
.text:00416921                 mov     edi, ebx
.text:00416923                 rep stosd
.text:00416925                 mov     ebp, [esp+18Ch+var_164]
.text:00416929                 mov     [ebx], ebp
.text:0041692B                 jmp     loc_41687D
.text:0041692B sub_4167E0      endp
.text:0041692B
.text:0041692B ; ---------------------------------------------------------------------------
.text:00416930 ; const CHAR aFindfirstfilee[]
.text:00416930 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_416950+23↓o
.text:00416941 ; const char Source[]
.text:00416941 Source          db '\*',0               ; DATA XREF: sub_416950:loc_4169DD↓o
.text:00416944                 align 10h
.text:00416950
.text:00416950 ; =============== S U B R O U T I N E =======================================
.text:00416950
.text:00416950
.text:00416950 ; int __cdecl sub_416950(char *Str)
.text:00416950 sub_416950      proc near               ; CODE XREF: .text:00417A83↓p
.text:00416950                                         ; sub_417D80+3FA↓p ...
.text:00416950
.text:00416950 lpLibFileName   = dword ptr -18Ch
.text:00416950 lpProcName      = dword ptr -188h
.text:00416950 var_184         = dword ptr -184h
.text:00416950 var_180         = dword ptr -180h
.text:00416950 var_17C         = dword ptr -17Ch
.text:00416950 var_178         = dword ptr -178h
.text:00416950 var_164         = dword ptr -164h
.text:00416950 hModule         = dword ptr -160h
.text:00416950 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00416950 Str             = dword ptr  4
.text:00416950
.text:00416950                 push    ebp
.text:00416951                 push    edi
.text:00416952                 xor     edi, edi
.text:00416954                 push    esi
.text:00416955                 push    ebx
.text:00416956                 sub     esp, 17Ch
.text:0041695C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00416963                 call    LoadLibraryA
.text:00416968                 sub     esp, 4
.text:0041696B                 mov     [esp+18Ch+hModule], eax
.text:0041696F                 mov     ecx, [esp+18Ch+hModule]
.text:00416973                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:0041697B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:0041697E                 call    GetProcAddress
.text:00416983                 sub     esp, 8
.text:00416986                 mov     edx, [esp+18Ch+Str]
.text:0041698D                 mov     [esp+18Ch+var_164], eax
.text:00416991                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00416994                 call    strlen
.text:00416999                 lea     edx, [eax+5]
.text:0041699C                 mov     ebx, eax
.text:0041699E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:004169A1                 call    malloc
.text:004169A6                 mov     esi, eax
.text:004169A8                 test    esi, esi
.text:004169AA                 mov     eax, 1
.text:004169AF                 jz      loc_416A8D
.text:004169B5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004169B8                 mov     ebp, [esp+18Ch+Str]
.text:004169BF                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:004169C3                 call    strcpy
.text:004169C8                 movzx   eax, byte ptr [ebx+esi-1]
.text:004169CD                 cmp     al, 2Fh ; '/'
.text:004169CF                 jz      loc_416ABB
.text:004169D5                 cmp     al, 5Ch ; '\'
.text:004169D7                 jz      loc_416ABB
.text:004169DD
.text:004169DD loc_4169DD:                             ; CODE XREF: sub_416950+170↓j
.text:004169DD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:004169E5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:004169E8                 call    strcat
.text:004169ED                 mov     eax, [esp+18Ch+var_164]
.text:004169F1                 test    eax, eax
.text:004169F3                 jz      loc_416AB5
.text:004169F9                 mov     [esp+18Ch+var_178], 0
.text:00416A01                 lea     ebp, [esp+18Ch+FindFileData]
.text:00416A05                 mov     [esp+18Ch+var_17C], 0
.text:00416A0D                 mov     [esp+18Ch+var_180], 1
.text:00416A15                 mov     [esp+18Ch+var_184], ebp
.text:00416A19                 mov     [esp+18Ch+lpProcName], 0
.text:00416A21                 mov     [esp+18Ch+lpLibFileName], esi
.text:00416A24                 call    [esp+18Ch+var_164]
.text:00416A28                 sub     esp, 18h
.text:00416A2B                 mov     ebx, eax
.text:00416A2D                 cmp     eax, 0FFFFFFFFh
.text:00416A30                 jz      short loc_416A98
.text:00416A32                 lea     esi, [esi+0]
.text:00416A39                 lea     edi, [edi+0]
.text:00416A40
.text:00416A40 loc_416A40:                             ; CODE XREF: sub_416950+109↓j
.text:00416A40                                         ; sub_416950+161↓j
.text:00416A40                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00416A45                 jz      short loc_416A48
.text:00416A47                 inc     edi
.text:00416A48
.text:00416A48 loc_416A48:                             ; CODE XREF: sub_416950+F5↑j
.text:00416A48                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00416A4C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00416A4F                 call    FindNextFileA
.text:00416A54                 sub     esp, 8
.text:00416A57                 test    eax, eax
.text:00416A59                 jnz     short loc_416A40
.text:00416A5B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00416A5E                 call    FindClose
.text:00416A63                 sub     esp, 4
.text:00416A66                 mov     esi, [esp+18Ch+hModule]
.text:00416A6A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00416A6D                 call    FreeLibrary
.text:00416A72                 sub     esp, 4
.text:00416A75                 mov     ebx, [esp+18Ch+Str]
.text:00416A7C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00416A7F                 call    sub_4193F0
.text:00416A84                 test    eax, eax
.text:00416A86                 jz      short loc_416A8B
.text:00416A88                 add     edi, 2
.text:00416A8B
.text:00416A8B loc_416A8B:                             ; CODE XREF: sub_416950+136↑j
.text:00416A8B                 mov     eax, edi
.text:00416A8D
.text:00416A8D loc_416A8D:                             ; CODE XREF: sub_416950+5F↑j
.text:00416A8D                                         ; sub_416950+163↓j
.text:00416A8D                 add     esp, 17Ch
.text:00416A93                 pop     ebx
.text:00416A94                 pop     esi
.text:00416A95                 pop     edi
.text:00416A96                 pop     ebp
.text:00416A97                 retn
.text:00416A98 ; ---------------------------------------------------------------------------
.text:00416A98
.text:00416A98 loc_416A98:                             ; CODE XREF: sub_416950+E0↑j
.text:00416A98                                         ; sub_416950+169↓j
.text:00416A98                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00416A9C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00416A9F                 call    FindFirstFileA
.text:00416AA4                 mov     ebx, eax
.text:00416AA6                 sub     esp, 8
.text:00416AA9                 cmp     ebx, 0FFFFFFFFh
.text:00416AAC                 mov     eax, 2
.text:00416AB1                 jnz     short loc_416A40
.text:00416AB3                 jmp     short loc_416A8D
.text:00416AB5 ; ---------------------------------------------------------------------------
.text:00416AB5
.text:00416AB5 loc_416AB5:                             ; CODE XREF: sub_416950+A3↑j
.text:00416AB5                 lea     ebp, [esp+18Ch+FindFileData]
.text:00416AB9                 jmp     short loc_416A98
.text:00416ABB ; ---------------------------------------------------------------------------
.text:00416ABB
.text:00416ABB loc_416ABB:                             ; CODE XREF: sub_416950+7F↑j
.text:00416ABB                                         ; sub_416950+87↑j
.text:00416ABB                 mov     byte ptr [ebx+esi-1], 0
.text:00416AC0                 jmp     loc_4169DD
.text:00416AC0 sub_416950      endp
.text:00416AC0
.text:00416AC0 ; ---------------------------------------------------------------------------
.text:00416AC5                 align 10h
.text:00416AD0
.text:00416AD0 ; =============== S U B R O U T I N E =======================================
.text:00416AD0
.text:00416AD0
.text:00416AD0 ; int __cdecl sub_416AD0(HANDLE hNamedPipe, int)
.text:00416AD0 sub_416AD0      proc near               ; CODE XREF: sub_4166F0+52↑j
.text:00416AD0                                         ; sub_418300-B9↓p
.text:00416AD0
.text:00416AD0 hFile           = dword ptr -0ECh
.text:00416AD0 lpFileInformation= dword ptr -0E8h
.text:00416AD0 nBufferSize     = dword ptr -0E4h
.text:00416AD0 lpBytesRead     = dword ptr -0E0h
.text:00416AD0 lpTotalBytesAvail= dword ptr -0DCh
.text:00416AD0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00416AD0 var_C4          = dword ptr -0C4h
.text:00416AD0 var_C0          = dword ptr -0C0h
.text:00416AD0 var_BC          = dword ptr -0BCh
.text:00416AD0 var_B8          = dword ptr -0B8h
.text:00416AD0 var_B4          = dword ptr -0B4h
.text:00416AD0 var_B0          = dword ptr -0B0h
.text:00416AD0 var_AC          = dword ptr -0ACh
.text:00416AD0 var_A8          = dword ptr -0A8h
.text:00416AD0 TotalBytesAvail = dword ptr -0A0h
.text:00416AD0 var_9C          = dword ptr -9Ch
.text:00416AD0 var_98          = dword ptr -98h
.text:00416AD0 var_94          = dword ptr -94h
.text:00416AD0 var_90          = dword ptr -90h
.text:00416AD0 var_8C          = dword ptr -8Ch
.text:00416AD0 var_88          = dword ptr -88h
.text:00416AD0 var_84          = dword ptr -84h
.text:00416AD0 var_80          = dword ptr -80h
.text:00416AD0 var_7C          = dword ptr -7Ch
.text:00416AD0 var_78          = dword ptr -78h
.text:00416AD0 var_74          = dword ptr -74h
.text:00416AD0 var_70          = dword ptr -70h
.text:00416AD0 var_6C          = dword ptr -6Ch
.text:00416AD0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00416AD0 hNamedPipe      = dword ptr  4
.text:00416AD0 arg_4           = dword ptr  8
.text:00416AD0
.text:00416AD0                 push    ebp
.text:00416AD1                 mov     eax, 0FFFFFFFFh
.text:00416AD6                 push    edi
.text:00416AD7                 push    esi
.text:00416AD8                 push    ebx
.text:00416AD9                 sub     esp, 0DCh
.text:00416ADF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00416AE6                 mov     ebp, [esp+0ECh+arg_4]
.text:00416AED                 cmp     esi, 0FFFFFFFFh
.text:00416AF0                 jz      loc_416E71
.text:00416AF6                 cld
.text:00416AF7                 xor     eax, eax
.text:00416AF9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00416B00                 mov     ecx, 0Dh
.text:00416B05                 mov     edi, ebx
.text:00416B07                 rep stosd
.text:00416B09                 mov     dword ptr [ebp+18h], 1
.text:00416B10                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416B13                 call    GetFileType
.text:00416B18                 sub     esp, 4
.text:00416B1B                 xor     edx, edx
.text:00416B1D                 cmp     eax, 2
.text:00416B20                 jz      loc_416F50
.text:00416B26                 cmp     eax, 3
.text:00416B29                 jz      loc_416F40
.text:00416B2F
.text:00416B2F loc_416B2F:                             ; CODE XREF: sub_416AD0+475↓j
.text:00416B2F                                         ; sub_416AD0+485↓j
.text:00416B2F                 or      [ebp+0], edx
.text:00416B32                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00416B36                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416B39                 call    GetFileInformationByHandle
.text:00416B3E                 sub     esp, 8
.text:00416B41                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00416B48                 test    ecx, ecx
.text:00416B4A                 jnz     short loc_416B80
.text:00416B4C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00416B53                 test    edx, edx
.text:00416B55                 jnz     short loc_416B80
.text:00416B57                 mov     edx, [ebp+0]
.text:00416B5A                 and     edx, 0F000h
.text:00416B60                 cmp     edx, 1000h
.text:00416B66                 jz      loc_416ED6
.text:00416B6C
.text:00416B6C loc_416B6C:                             ; CODE XREF: sub_416AD0+459↓j
.text:00416B6C                                         ; sub_416AD0+465↓j
.text:00416B6C                 test    ecx, ecx
.text:00416B6E                 jnz     short loc_416B80
.text:00416B70                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00416B77                 test    edx, edx
.text:00416B79                 jz      loc_416EB4
.text:00416B7F                 nop
.text:00416B80
.text:00416B80 loc_416B80:                             ; CODE XREF: sub_416AD0+7A↑j
.text:00416B80                                         ; sub_416AD0+85↑j ...
.text:00416B80                 cld
.text:00416B81                 mov     esi, ebx
.text:00416B83                 mov     dword ptr [ebp+14h], 0
.text:00416B8A                 lea     edi, [esp+0ECh+var_9C]
.text:00416B8E                 mov     ecx, 0Dh
.text:00416B93                 rep movsd
.text:00416B95                 xor     ebx, ebx
.text:00416B97                 xor     edi, edi
.text:00416B99                 mov     edx, [esp+0ECh+var_6C]
.text:00416BA0                 mov     esi, [esp+0ECh+var_70]
.text:00416BA4                 or      edx, ebx
.text:00416BA6                 mov     ebx, [esp+0ECh+var_9C]
.text:00416BAA                 mov     [ebp+8], edx
.text:00416BAD                 or      edi, esi
.text:00416BAF                 xor     edx, edx
.text:00416BB1                 mov     [ebp+0Ch], edi
.text:00416BB4                 test    bl, 10h
.text:00416BB7                 mov     esi, [esp+0ECh+var_80]
.text:00416BBB                 setz    dl
.text:00416BBE                 mov     [ebp+10h], esi
.text:00416BC1                 dec     edx
.text:00416BC2                 and     edx, 0FFFFC000h
.text:00416BC8                 add     edx, 8000h
.text:00416BCE                 or      edx, 124h
.text:00416BD4                 test    bl, 1
.text:00416BD7                 movzx   eax, dx
.text:00416BDA                 jnz     short loc_416BE1
.text:00416BDC                 or      eax, 92h
.text:00416BE1
.text:00416BE1 loc_416BE1:                             ; CODE XREF: sub_416AD0+10A↑j
.text:00416BE1                 or      [ebp+0], eax
.text:00416BE4                 xor     edx, edx
.text:00416BE6                 mov     ebx, [esp+0ECh+var_7C]
.text:00416BEA                 mov     ecx, [esp+0ECh+var_78]
.text:00416BEE                 mov     eax, edx
.text:00416BF0                 xor     esi, esi
.text:00416BF2                 mov     edx, [esp+0ECh+var_8C]
.text:00416BF6                 mov     edi, ebx
.text:00416BF8                 or      eax, edi
.text:00416BFA                 mov     [esp+0ECh+var_A8], eax
.text:00416BFE                 mov     ebx, ecx
.text:00416C00                 mov     edi, [esp+0ECh+var_74]
.text:00416C04                 or      ebx, esi
.text:00416C06                 mov     esi, [esp+0ECh+var_A8]
.text:00416C0A                 mov     [esp+0ECh+var_AC], ebx
.text:00416C0E                 xor     ebx, ebx
.text:00416C10                 mov     ecx, [esp+0ECh+var_AC]
.text:00416C14                 mov     [ebp+34h], esi
.text:00416C17                 mov     esi, [esp+0ECh+var_90]
.text:00416C1B                 mov     [ebp+18h], edi
.text:00416C1E                 xor     edi, edi
.text:00416C20                 or      esi, ebx
.text:00416C22                 mov     [ebp+30h], ecx
.text:00416C25                 or      edi, edx
.text:00416C27                 mov     edx, esi
.text:00416C29                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416C31                 sub     edx, 0D53E8000h
.text:00416C37                 mov     ebx, edi
.text:00416C39                 sbb     ebx, 19DB1DEh
.text:00416C3F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00416C43                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416C4B                 mov     [esp+0ECh+hFile], edx
.text:00416C4E                 call    sub_429510
.text:00416C53                 mov     ecx, eax
.text:00416C55                 shr     eax, 1Fh
.text:00416C58                 dec     eax
.text:00416C59                 and     ecx, eax
.text:00416C5B                 mov     [ebp+38h], ecx
.text:00416C5E                 mov     [esp+0ECh+hFile], esi
.text:00416C61                 mov     [esp+0ECh+lpFileInformation], edi
.text:00416C65                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416C6D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416C75                 call    sub_429070
.text:00416C7A                 lea     ebx, [eax+eax*4]
.text:00416C7D                 xor     ecx, ecx
.text:00416C7F                 lea     esi, [ebx+ebx*4]
.text:00416C82                 shl     esi, 2
.text:00416C85                 mov     edi, esi
.text:00416C87                 shr     edi, 1Fh
.text:00416C8A                 dec     edi
.text:00416C8B                 and     edi, esi
.text:00416C8D                 mov     [ebp+3Ch], edi
.text:00416C90                 mov     esi, [esp+0ECh+var_98]
.text:00416C94                 xor     edi, edi
.text:00416C96                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416C9E                 mov     edx, [esp+0ECh+var_94]
.text:00416CA2                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416CAA                 or      esi, ecx
.text:00416CAC                 or      edi, edx
.text:00416CAE                 mov     edx, esi
.text:00416CB0                 mov     ecx, edi
.text:00416CB2                 sub     edx, 0D53E8000h
.text:00416CB8                 sbb     ecx, 19DB1DEh
.text:00416CBE                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00416CC2                 mov     [esp+0ECh+hFile], edx
.text:00416CC5                 call    sub_429510
.text:00416CCA                 mov     ebx, eax
.text:00416CCC                 shr     eax, 1Fh
.text:00416CCF                 dec     eax
.text:00416CD0                 and     ebx, eax
.text:00416CD2                 mov     [ebp+48h], ebx
.text:00416CD5                 xor     ebx, ebx
.text:00416CD7                 mov     [esp+0ECh+hFile], esi
.text:00416CDA                 mov     [esp+0ECh+lpFileInformation], edi
.text:00416CDE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416CE6                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416CEE                 call    sub_429070
.text:00416CF3                 lea     ecx, [eax+eax*4]
.text:00416CF6                 lea     esi, [ecx+ecx*4]
.text:00416CF9                 shl     esi, 2
.text:00416CFC                 mov     edi, esi
.text:00416CFE                 shr     edi, 1Fh
.text:00416D01                 dec     edi
.text:00416D02                 and     edi, esi
.text:00416D04                 mov     [ebp+4Ch], edi
.text:00416D07                 mov     esi, [esp+0ECh+var_88]
.text:00416D0B                 xor     edi, edi
.text:00416D0D                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416D15                 mov     edx, [esp+0ECh+var_84]
.text:00416D19                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416D21                 or      esi, ebx
.text:00416D23                 or      edi, edx
.text:00416D25                 mov     edx, esi
.text:00416D27                 mov     ebx, edi
.text:00416D29                 sub     edx, 0D53E8000h
.text:00416D2F                 sbb     ebx, 19DB1DEh
.text:00416D35                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00416D39                 mov     [esp+0ECh+hFile], edx
.text:00416D3C                 call    sub_429510
.text:00416D41                 mov     ecx, eax
.text:00416D43                 shr     eax, 1Fh
.text:00416D46                 dec     eax
.text:00416D47                 and     ecx, eax
.text:00416D49                 mov     [ebp+40h], ecx
.text:00416D4C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00416D50                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00416D58                 mov     [esp+0ECh+lpBytesRead], 0
.text:00416D60                 mov     [esp+0ECh+hFile], esi
.text:00416D63                 call    sub_429070
.text:00416D68                 mov     dword ptr [ebp+50h], 200h
.text:00416D6F                 lea     ebx, [eax+eax*4]
.text:00416D72                 mov     edi, [esp+0ECh+var_A8]
.text:00416D76                 lea     edx, [ebx+ebx*4]
.text:00416D79                 mov     eax, [esp+0ECh+var_AC]
.text:00416D7D                 shl     edx, 2
.text:00416D80                 mov     ecx, edx
.text:00416D82                 shr     ecx, 1Fh
.text:00416D85                 dec     ecx
.text:00416D86                 and     ecx, edx
.text:00416D88                 test    edi, edi
.text:00416D8A                 mov     edx, [esp+0ECh+var_A8]
.text:00416D8E                 mov     [ebp+44h], ecx
.text:00416D91                 js      loc_416EA7
.text:00416D97
.text:00416D97 loc_416D97:                             ; CODE XREF: sub_416AD0+3DF↓j
.text:00416D97                 mov     edi, [esp+0ECh+var_AC]
.text:00416D9B                 xor     esi, esi
.text:00416D9D                 mov     ecx, eax
.text:00416D9F                 shrd    ecx, edx, 9
.text:00416DA3                 mov     ebx, edx
.text:00416DA5                 mov     eax, esi
.text:00416DA7                 and     edi, 1FFh
.text:00416DAD                 sar     ebx, 9
.text:00416DB0                 or      eax, edi
.text:00416DB2                 jz      short loc_416DBA
.text:00416DB4                 add     ecx, 1
.text:00416DB7                 adc     ebx, 0
.text:00416DBA
.text:00416DBA loc_416DBA:                             ; CODE XREF: sub_416AD0+2E2↑j
.text:00416DBA                 mov     [ebp+5Ch], ebx
.text:00416DBD                 mov     esi, dword_42B130
.text:00416DC3                 xor     edi, edi
.text:00416DC5                 mov     [ebp+58h], ecx
.text:00416DC8                 mov     ebx, dword_42B130
.text:00416DCE                 mov     ecx, [esp+0ECh+var_A8]
.text:00416DD2                 mov     edx, [esp+0ECh+var_AC]
.text:00416DD6                 mov     [ebp+50h], ebx
.text:00416DD9                 shr     ebx, 9
.text:00416DDC                 mov     [esp+0ECh+lpBytesRead], edi
.text:00416DE0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00416DE4                 mov     [esp+0ECh+nBufferSize], esi
.text:00416DE8                 mov     [esp+0ECh+hFile], edx
.text:00416DEB                 call    sub_429510
.text:00416DF0                 mov     [esp+0ECh+lpBytesRead], edi
.text:00416DF4                 mov     ecx, [esp+0ECh+var_AC]
.text:00416DF8                 mov     edi, [esp+0ECh+var_A8]
.text:00416DFC                 mov     [esp+0ECh+var_BC], ebx
.text:00416E00                 mov     [esp+0ECh+var_B4], eax
.text:00416E04                 mov     [esp+0ECh+var_B0], edx
.text:00416E08                 mov     [esp+0ECh+var_B8], 0
.text:00416E10                 mov     [esp+0ECh+nBufferSize], esi
.text:00416E14                 mov     [esp+0ECh+hFile], ecx
.text:00416E17                 mov     [esp+0ECh+lpFileInformation], edi
.text:00416E1B                 call    sub_429070
.text:00416E20                 mov     ebx, edx
.text:00416E22                 or      ebx, eax
.text:00416E24                 jz      short loc_416E80
.text:00416E26                 mov     edi, [esp+0ECh+var_B4]
.text:00416E2A                 mov     esi, [esp+0ECh+var_B0]
.text:00416E2E                 mov     eax, [esp+0ECh+var_BC]
.text:00416E32                 mov     [esp+0ECh+var_C4], edi
.text:00416E36                 mov     ecx, [esp+0ECh+var_B8]
.text:00416E3A                 add     [esp+0ECh+var_C4], 1
.text:00416E3F                 mov     [esp+0ECh+var_C0], esi
.text:00416E43                 adc     [esp+0ECh+var_C0], 0
.text:00416E48                 mul     [esp+0ECh+var_C4]
.text:00416E4C                 mov     edi, [esp+0ECh+var_C0]
.text:00416E50                 mov     ebx, edx
.text:00416E52                 mov     edx, [esp+0ECh+var_C4]
.text:00416E56                 mov     esi, eax
.text:00416E58                 mov     eax, ebx
.text:00416E5A                 imul    ecx, edx
.text:00416E5D                 mov     edx, [esp+0ECh+var_BC]
.text:00416E61                 imul    edx, edi
.text:00416E64                 add     eax, ecx
.text:00416E66                 lea     edi, [edx+eax]
.text:00416E69
.text:00416E69 loc_416E69:                             ; CODE XREF: sub_416AD0+3D5↓j
.text:00416E69                 mov     [ebp+58h], esi
.text:00416E6C                 xor     eax, eax
.text:00416E6E                 mov     [ebp+5Ch], edi
.text:00416E71
.text:00416E71 loc_416E71:                             ; CODE XREF: sub_416AD0+20↑j
.text:00416E71                 add     esp, 0DCh
.text:00416E77                 pop     ebx
.text:00416E78                 pop     esi
.text:00416E79                 pop     edi
.text:00416E7A                 pop     ebp
.text:00416E7B                 retn
.text:00416E7B ; ---------------------------------------------------------------------------
.text:00416E7C                 align 10h
.text:00416E80
.text:00416E80 loc_416E80:                             ; CODE XREF: sub_416AD0+354↑j
.text:00416E80                 mov     eax, [esp+0ECh+var_B4]
.text:00416E84                 mov     edi, [esp+0ECh+var_B8]
.text:00416E88                 mov     ebx, [esp+0ECh+var_B4]
.text:00416E8C                 mul     [esp+0ECh+var_BC]
.text:00416E90                 mov     ecx, [esp+0ECh+var_BC]
.text:00416E94                 imul    ebx, edi
.text:00416E97                 mov     esi, eax
.text:00416E99                 mov     eax, [esp+0ECh+var_B0]
.text:00416E9D                 add     edx, ebx
.text:00416E9F                 imul    ecx, eax
.text:00416EA2                 lea     edi, [ecx+edx]
.text:00416EA5                 jmp     short loc_416E69
.text:00416EA7 ; ---------------------------------------------------------------------------
.text:00416EA7
.text:00416EA7 loc_416EA7:                             ; CODE XREF: sub_416AD0+2C1↑j
.text:00416EA7                 add     eax, 1FFh
.text:00416EAC                 adc     edx, 0
.text:00416EAF                 jmp     loc_416D97
.text:00416EB4 ; ---------------------------------------------------------------------------
.text:00416EB4
.text:00416EB4 loc_416EB4:                             ; CODE XREF: sub_416AD0+A9↑j
.text:00416EB4                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00416EB7                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00416EBE                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:00416EC2                 call    GetFileSize
.text:00416EC7                 sub     esp, 8
.text:00416ECA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:00416ED1                 jmp     loc_416B80
.text:00416ED6 ; ---------------------------------------------------------------------------
.text:00416ED6
.text:00416ED6 loc_416ED6:                             ; CODE XREF: sub_416AD0+96↑j
.text:00416ED6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:00416EDE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416EE2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:00416EEA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:00416EEE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:00416EF6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:00416EFE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:00416F06                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:00416F09                 call    PeekNamedPipe
.text:00416F0E                 sub     esp, 18h
.text:00416F11                 test    eax, eax
.text:00416F13                 jz      short loc_416F2E
.text:00416F15                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:00416F19                 xor     eax, eax
.text:00416F1B                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00416F22                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00416F29                 jmp     loc_416B6C
.text:00416F2E ; ---------------------------------------------------------------------------
.text:00416F2E
.text:00416F2E loc_416F2E:                             ; CODE XREF: sub_416AD0+443↑j
.text:00416F2E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00416F35                 jmp     loc_416B6C
.text:00416F35 ; ---------------------------------------------------------------------------
.text:00416F3A                 align 10h
.text:00416F40
.text:00416F40 loc_416F40:                             ; CODE XREF: sub_416AD0+59↑j
.text:00416F40                 mov     edx, 1000h
.text:00416F45                 jmp     loc_416B2F
.text:00416F45 ; ---------------------------------------------------------------------------
.text:00416F4A                 align 10h
.text:00416F50
.text:00416F50 loc_416F50:                             ; CODE XREF: sub_416AD0+50↑j
.text:00416F50                 mov     edx, 2000h
.text:00416F55                 jmp     loc_416B2F
.text:00416F55 sub_416AD0      endp
.text:00416F55
.text:00416F55 ; ---------------------------------------------------------------------------
.text:00416F5A aLnk            db '.lnk',0             ; DATA XREF: sub_416FA0+E0↓o
.text:00416F5A                                         ; .text:0041764A↓o ...
.text:00416F5F ; const CHAR aKernel32[]
.text:00416F5F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_416FA0+12D↓o
.text:00416F5F                                         ; .text:00417CFB↓o
.text:00416F68 ; const CHAR aGetcompressedf[]
.text:00416F68 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00416F68                                         ; DATA XREF: sub_416FA0+13E↓o
.text:00416F68                                         ; .text:00417D0C↓o
.text:00416F7F ; const CHAR aGetbinarytypea[]
.text:00416F7F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_416FA0+333↓o
.text:00416F7F                                         ; .text:004176A6↓o ...
.text:00416F8E ; const char aPathext[]
.text:00416F8E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_416FA0:loc_417387↓o
.text:00416F8E                                         ; .text:loc_417750↓o ...
.text:00416F96                 align 10h
.text:00416FA0
.text:00416FA0 ; =============== S U B R O U T I N E =======================================
.text:00416FA0
.text:00416FA0
.text:00416FA0 ; int __cdecl sub_416FA0(char *String1, int)
.text:00416FA0 sub_416FA0      proc near               ; CODE XREF: sub_417D80+3CD↓p
.text:00416FA0                                         ; sub_418300-9B↓p
.text:00416FA0
.text:00416FA0 Str             = dword ptr -6Ch
.text:00416FA0 lpProcName      = dword ptr -68h
.text:00416FA0 var_64          = dword ptr -64h
.text:00416FA0 var_60          = dword ptr -60h
.text:00416FA0 var_5C          = dword ptr -5Ch
.text:00416FA0 var_4C          = dword ptr -4Ch
.text:00416FA0 var_48          = dword ptr -48h
.text:00416FA0 var_44          = dword ptr -44h
.text:00416FA0 var_40          = dword ptr -40h
.text:00416FA0 var_3C          = dword ptr -3Ch
.text:00416FA0 var_38          = dword ptr -38h
.text:00416FA0 lpRootPathName  = dword ptr -30h
.text:00416FA0 var_2C          = byte ptr -2Ch
.text:00416FA0 var_28          = dword ptr -28h
.text:00416FA0 var_24          = dword ptr -24h
.text:00416FA0 var_20          = dword ptr -20h
.text:00416FA0 var_1C          = dword ptr -1Ch
.text:00416FA0 var_18          = byte ptr -18h
.text:00416FA0 String1         = dword ptr  4
.text:00416FA0 arg_4           = dword ptr  8
.text:00416FA0
.text:00416FA0                 push    ebp
.text:00416FA1                 push    edi
.text:00416FA2                 push    esi
.text:00416FA3                 push    ebx
.text:00416FA4                 sub     esp, 5Ch
.text:00416FA7                 mov     edx, [esp+6Ch+String1]
.text:00416FAB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00416FAE                 call    sub_419020
.text:00416FB3                 mov     [esp+6Ch+Str], eax
.text:00416FB6                 call    sub_4187A0
.text:00416FBB                 mov     [esp+6Ch+lpRootPathName], eax
.text:00416FBF                 test    eax, eax
.text:00416FC1                 jz      loc_4171F3
.text:00416FC7                 mov     [esp+6Ch+Str], eax ; Str
.text:00416FCA                 call    strlen
.text:00416FCF                 mov     edx, [esp+6Ch+arg_4]
.text:00416FD3                 mov     ebx, eax
.text:00416FD5                 mov     esi, [edx+0Ch]
.text:00416FD8                 mov     edi, [edx+8]
.text:00416FDB                 mov     eax, esi
.text:00416FDD                 or      eax, edi
.text:00416FDF                 jz      loc_417400
.text:00416FE5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00416FE9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:00416FEC                 call    GetDriveTypeA
.text:00416FF1                 sub     esp, 4
.text:00416FF4                 cmp     eax, 4
.text:00416FF7                 jz      loc_417400
.text:00416FFD
.text:00416FFD loc_416FFD:                             ; CODE XREF: sub_416FA0+48A↓j
.text:00416FFD                                         ; sub_416FA0+4B2↓j
.text:00416FFD                 mov     edx, [esp+6Ch+arg_4]
.text:00417001                 mov     esi, [edx+14h]
.text:00417004                 mov     edi, [edx+10h]
.text:00417007                 mov     ecx, esi
.text:00417009                 or      ecx, edi
.text:0041700B                 jnz     short loc_417035
.text:0041700D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00417011                 xor     esi, esi
.text:00417013                 xor     edi, edi
.text:00417015                 test    ebp, ebp
.text:00417017                 jz      short loc_417027
.text:00417019                 movzx   ebx, byte ptr [ebp+0]
.text:0041701D                 test    bl, bl
.text:0041701F                 mov     cl, bl
.text:00417021                 jnz     loc_4173B1
.text:00417027
.text:00417027 loc_417027:                             ; CODE XREF: sub_416FA0+77↑j
.text:00417027                 xor     eax, eax
.text:00417029                 xor     edx, edx
.text:0041702B
.text:0041702B loc_41702B:                             ; CODE XREF: sub_416FA0+458↓j
.text:0041702B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041702F                 mov     [ebp+10h], eax
.text:00417032                 mov     [ebp+14h], edx
.text:00417035
.text:00417035 loc_417035:                             ; CODE XREF: sub_416FA0+6B↑j
.text:00417035                 mov     edi, [esp+6Ch+String1]
.text:00417039                 xor     ebx, ebx
.text:0041703B                 test    edi, edi
.text:0041703D                 jz      loc_4172B3
.text:00417043                 mov     esi, [esp+6Ch+String1]
.text:00417047                 cmp     byte ptr [esi], 0
.text:0041704A                 jnz     loc_4172C0
.text:00417050
.text:00417050 loc_417050:                             ; CODE XREF: sub_416FA0+38C↓j
.text:00417050                                         ; sub_416FA0+397↓j
.text:00417050                 mov     ebp, [esp+6Ch+String1]
.text:00417054                 test    ebp, ebp
.text:00417056                 jz      loc_4172B3
.text:0041705C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00417064                 mov     edi, [esp+6Ch+String1]
.text:00417068                 mov     [esp+6Ch+Str], edi ; Str
.text:0041706B                 call    strrchr
.text:00417070                 test    eax, eax
.text:00417072                 jz      loc_4172B3
.text:00417078                 cld
.text:00417079                 mov     ecx, 5
.text:0041707E                 mov     esi, eax
.text:00417080                 mov     edi, offset aLnk ; ".lnk"
.text:00417085                 repe cmpsb
.text:00417087                 setz    cl
.text:0041708A                 movzx   eax, cl
.text:0041708D                 lea     esi, [esi+0]
.text:00417090
.text:00417090 loc_417090:                             ; CODE XREF: sub_416FA0+315↓j
.text:00417090                 test    eax, eax
.text:00417092                 jz      short loc_41709A
.text:00417094                 or      ebx, 0A000h
.text:0041709A
.text:0041709A loc_41709A:                             ; CODE XREF: sub_416FA0+F2↑j
.text:0041709A                 mov     esi, [esp+6Ch+arg_4]
.text:0041709E                 xor     ecx, ecx
.text:004170A0                 mov     edi, ds:dword_42C610
.text:004170A6                 or      [esi], ebx
.text:004170A8                 mov     ebx, [esi+14h]
.text:004170AB                 mov     ebp, [esi+10h]
.text:004170AE                 mov     eax, ebx
.text:004170B0                 xor     eax, ecx
.text:004170B2                 xor     ebp, edi
.text:004170B4                 or      eax, ebp
.text:004170B6                 jnz     loc_417240
.text:004170BC
.text:004170BC loc_4170BC:                             ; CODE XREF: sub_416FA0+30E↓j
.text:004170BC                 mov     ecx, dword_42B130
.text:004170C2                 xor     esi, esi
.text:004170C4                 xor     edi, edi
.text:004170C6                 mov     edx, [esp+6Ch+arg_4]
.text:004170CA                 mov     [edx+50h], ecx
.text:004170CD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004170D4                 call    LoadLibraryA
.text:004170D9                 sub     esp, 4
.text:004170DC                 mov     ebp, eax
.text:004170DE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004170E6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004170E9                 call    GetProcAddress
.text:004170EE                 sub     esp, 8
.text:004170F1                 test    eax, eax
.text:004170F3                 jz      short loc_417128
.text:004170F5                 mov     ebx, [esp+6Ch+String1]
.text:004170F9                 lea     esi, [esp+6Ch+var_2C]
.text:004170FD                 mov     [esp+6Ch+lpProcName], esi
.text:00417101                 mov     [esp+6Ch+Str], ebx
.text:00417104                 call    eax
.text:00417106                 sub     esp, 8
.text:00417109                 mov     ebx, eax
.text:0041710B                 cmp     eax, 0FFFFFFFFh
.text:0041710E                 jz      loc_417229
.text:00417114
.text:00417114 loc_417114:                             ; CODE XREF: sub_416FA0+29A↓j
.text:00417114                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00417118                 mov     ecx, ebx
.text:0041711A                 xor     edi, edi
.text:0041711C                 xor     ebx, ebx
.text:0041711E                 mov     edx, esi
.text:00417120                 mov     esi, ecx
.text:00417122                 or      esi, edi
.text:00417124                 mov     edi, ebx
.text:00417126                 or      edi, edx
.text:00417128
.text:00417128 loc_417128:                             ; CODE XREF: sub_416FA0+153↑j
.text:00417128                                         ; sub_416FA0+294↓j
.text:00417128                 test    ebp, ebp
.text:0041712A                 jz      short loc_417137
.text:0041712C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041712F                 call    FreeLibrary
.text:00417134                 sub     esp, 4
.text:00417137
.text:00417137 loc_417137:                             ; CODE XREF: sub_416FA0+18A↑j
.text:00417137                 mov     ebp, edi
.text:00417139                 mov     edx, ebp
.text:0041713B                 mov     edi, esi
.text:0041713D                 or      edx, esi
.text:0041713F                 jnz     short loc_41714B
.text:00417141                 mov     eax, [esp+6Ch+arg_4]
.text:00417145                 mov     edi, [eax+30h]
.text:00417148                 mov     ebp, [eax+34h]
.text:0041714B
.text:0041714B loc_41714B:                             ; CODE XREF: sub_416FA0+19F↑j
.text:0041714B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041714F                 mov     ebx, dword_42B130
.text:00417155                 xor     esi, esi
.text:00417157                 mov     [esp+6Ch+var_60], esi
.text:0041715B                 mov     [esp+6Ch+Str], edi
.text:0041715E                 mov     [esp+6Ch+var_64], ebx
.text:00417162                 call    sub_429510
.text:00417167                 mov     [esp+6Ch+var_3C], eax
.text:0041716B                 mov     ecx, dword_42B130
.text:00417171                 mov     [esp+6Ch+lpProcName], ebp
.text:00417175                 mov     [esp+6Ch+var_38], edx
.text:00417179                 shr     ecx, 9
.text:0041717C                 mov     [esp+6Ch+var_44], ecx
.text:00417180                 mov     [esp+6Ch+var_40], 0
.text:00417188                 mov     [esp+6Ch+var_64], ebx
.text:0041718C                 mov     [esp+6Ch+var_60], esi
.text:00417190                 mov     [esp+6Ch+Str], edi
.text:00417193                 call    sub_429070
.text:00417198                 mov     ebp, edx
.text:0041719A                 or      ebp, eax
.text:0041719C                 jz      short loc_417200
.text:0041719E                 mov     ebp, [esp+6Ch+var_3C]
.text:004171A2                 mov     esi, [esp+6Ch+var_38]
.text:004171A6                 mov     eax, [esp+6Ch+var_44]
.text:004171AA                 mov     [esp+6Ch+var_4C], ebp
.text:004171AE                 mov     ecx, [esp+6Ch+var_40]
.text:004171B2                 mov     ebx, [esp+6Ch+var_44]
.text:004171B6                 add     [esp+6Ch+var_4C], 1
.text:004171BB                 mov     [esp+6Ch+var_48], esi
.text:004171BF                 mov     edi, [esp+6Ch+var_4C]
.text:004171C3                 adc     [esp+6Ch+var_48], 0
.text:004171C8                 mul     [esp+6Ch+var_4C]
.text:004171CC                 imul    ecx, edi
.text:004171CF                 mov     esi, eax
.text:004171D1                 mov     eax, [esp+6Ch+var_48]
.text:004171D5                 add     edx, ecx
.text:004171D7                 imul    ebx, eax
.text:004171DA                 lea     edi, [ebx+edx]
.text:004171DD
.text:004171DD loc_4171DD:                             ; CODE XREF: sub_416FA0+287↓j
.text:004171DD                 mov     ebx, [esp+6Ch+arg_4]
.text:004171E1                 mov     [ebx+58h], esi
.text:004171E4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004171E8                 mov     [ebx+5Ch], edi
.text:004171EB                 mov     [esp+6Ch+Str], esi ; Block
.text:004171EE                 call    free
.text:004171F3
.text:004171F3 loc_4171F3:                             ; CODE XREF: sub_416FA0+21↑j
.text:004171F3                 add     esp, 5Ch
.text:004171F6                 xor     eax, eax
.text:004171F8                 pop     ebx
.text:004171F9                 pop     esi
.text:004171FA                 pop     edi
.text:004171FB                 pop     ebp
.text:004171FC                 retn
.text:004171FC ; ---------------------------------------------------------------------------
.text:004171FD                 align 10h
.text:00417200
.text:00417200 loc_417200:                             ; CODE XREF: sub_416FA0+1FC↑j
.text:00417200                 mov     eax, [esp+6Ch+var_3C]
.text:00417204                 mov     edi, [esp+6Ch+var_40]
.text:00417208                 mov     ecx, [esp+6Ch+var_3C]
.text:0041720C                 mul     [esp+6Ch+var_44]
.text:00417210                 mov     ebx, [esp+6Ch+var_44]
.text:00417214                 imul    ecx, edi
.text:00417217                 mov     ebp, edx
.text:00417219                 mov     esi, eax
.text:0041721B                 mov     edx, [esp+6Ch+var_38]
.text:0041721F                 add     ebp, ecx
.text:00417221                 imul    ebx, edx
.text:00417224                 lea     edi, [ebx+ebp]
.text:00417227                 jmp     short loc_4171DD
.text:00417229 ; ---------------------------------------------------------------------------
.text:00417229
.text:00417229 loc_417229:                             ; CODE XREF: sub_416FA0+16E↑j
.text:00417229                 call    GetLastError
.text:0041722E                 xor     esi, esi
.text:00417230                 xor     edi, edi
.text:00417232                 test    eax, eax
.text:00417234                 jnz     loc_417128
.text:0041723A                 jmp     loc_417114
.text:0041723A ; ---------------------------------------------------------------------------
.text:0041723F                 align 10h
.text:00417240
.text:00417240 loc_417240:                             ; CODE XREF: sub_416FA0+116↑j
.text:00417240                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00417244                 lea     ecx, [esp+6Ch+var_20]
.text:00417248                 lea     ebx, [esp+6Ch+var_1C]
.text:0041724C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00417250                 lea     edi, [esp+6Ch+var_24]
.text:00417254                 lea     ebp, [esp+6Ch+var_28]
.text:00417258                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0041725C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00417260                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00417264                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00417267                 call    sub_419A70
.text:0041726C                 test    eax, eax
.text:0041726E                 jnz     short loc_417290
.text:00417270                 mov     [esp+6Ch+var_28], 1
.text:00417278                 mov     [esp+6Ch+var_24], 200h
.text:00417280                 mov     [esp+6Ch+var_20], 0
.text:00417288                 mov     [esp+6Ch+var_1C], 0
.text:00417290
.text:00417290 loc_417290:                             ; CODE XREF: sub_416FA0+2CE↑j
.text:00417290                 mov     ebp, [esp+6Ch+var_24]
.text:00417294                 mov     edi, [esp+6Ch+var_28]
.text:00417298                 mov     eax, [esp+6Ch+arg_4]
.text:0041729C                 imul    ebp, edi
.text:0041729F                 mov     esi, [eax+10h]
.text:004172A2                 mov     dword_42B130, ebp
.text:004172A8                 mov     ds:dword_42C610, esi
.text:004172AE                 jmp     loc_4170BC
.text:004172B3 ; ---------------------------------------------------------------------------
.text:004172B3
.text:004172B3 loc_4172B3:                             ; CODE XREF: sub_416FA0+9D↑j
.text:004172B3                                         ; sub_416FA0+B6↑j ...
.text:004172B3                 xor     eax, eax
.text:004172B5                 jmp     loc_417090
.text:004172B5 ; ---------------------------------------------------------------------------
.text:004172BA                 align 10h
.text:004172C0
.text:004172C0 loc_4172C0:                             ; CODE XREF: sub_416FA0+AA↑j
.text:004172C0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004172C7                 xor     ebp, ebp
.text:004172C9                 call    GetModuleHandleA
.text:004172CE                 sub     esp, 4
.text:004172D1                 mov     edi, eax
.text:004172D3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004172DB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004172DE                 call    GetProcAddress
.text:004172E3                 sub     esp, 8
.text:004172E6                 mov     edx, eax
.text:004172E8                 test    eax, eax
.text:004172EA                 jz      short loc_417304
.text:004172EC                 mov     eax, [esp+6Ch+String1]
.text:004172F0                 lea     ecx, [esp+6Ch+var_18]
.text:004172F4                 mov     [esp+6Ch+lpProcName], ecx
.text:004172F8                 mov     [esp+6Ch+Str], eax
.text:004172FB                 call    edx
.text:004172FD                 sub     esp, 8
.text:00417300                 test    eax, eax
.text:00417302                 jnz     short loc_417368
.text:00417304
.text:00417304 loc_417304:                             ; CODE XREF: sub_416FA0+34A↑j
.text:00417304                 mov     edx, ds:Str
.text:0041730A                 test    edx, edx
.text:0041730C                 jz      short loc_417387
.text:0041730E
.text:0041730E loc_41730E:                             ; CODE XREF: sub_416FA0+3FA↓j
.text:0041730E                                         ; sub_416FA0+40C↓j
.text:0041730E                 mov     eax, [esp+6Ch+String1]
.text:00417312                 test    eax, eax
.text:00417314                 jz      short loc_41731F
.text:00417316                 mov     esi, [esp+6Ch+String1]
.text:0041731A                 cmp     byte ptr [esi], 0
.text:0041731D                 jnz     short loc_41733C
.text:0041731F
.text:0041731F loc_41731F:                             ; CODE XREF: sub_416FA0+374↑j
.text:0041731F                                         ; sub_416FA0+3B0↓j ...
.text:0041731F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00417322                 call    FreeLibrary
.text:00417327                 sub     esp, 4
.text:0041732A                 test    ebp, ebp
.text:0041732C                 jz      loc_417050
.text:00417332                 mov     ebx, 49h ; 'I'
.text:00417337                 jmp     loc_417050
.text:0041733C ; ---------------------------------------------------------------------------
.text:0041733C
.text:0041733C loc_41733C:                             ; CODE XREF: sub_416FA0+37D↑j
.text:0041733C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041733F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00417347                 call    strrchr
.text:0041734C                 test    eax, eax
.text:0041734E                 mov     esi, eax
.text:00417350                 jz      short loc_41731F
.text:00417352                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00417356                 mov     ecx, ds:Str
.text:0041735C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0041735F                 call    strstr
.text:00417364                 test    eax, eax
.text:00417366                 jz      short loc_41736F
.text:00417368
.text:00417368 loc_417368:                             ; CODE XREF: sub_416FA0+362↑j
.text:00417368                                         ; sub_416FA0+3E5↓j
.text:00417368                 mov     ebp, 1
.text:0041736D                 jmp     short loc_41731F
.text:0041736F ; ---------------------------------------------------------------------------
.text:0041736F
.text:0041736F loc_41736F:                             ; CODE XREF: sub_416FA0+3C6↑j
.text:0041736F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00417373                 mov     edx, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:00417379                 mov     [esp+6Ch+Str], edx ; Str
.text:0041737C                 call    strstr
.text:00417381                 test    eax, eax
.text:00417383                 jz      short loc_41731F
.text:00417385                 jmp     short loc_417368
.text:00417387 ; ---------------------------------------------------------------------------
.text:00417387
.text:00417387 loc_417387:                             ; CODE XREF: sub_416FA0+36C↑j
.text:00417387                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0041738E                 call    getenv
.text:00417393                 mov     ds:Str, eax
.text:00417398                 test    eax, eax
.text:0041739A                 jnz     loc_41730E
.text:004173A0                 mov     esi, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:004173A6                 mov     ds:Str, esi
.text:004173AC                 jmp     loc_41730E
.text:004173B1 ; ---------------------------------------------------------------------------
.text:004173B1
.text:004173B1 loc_4173B1:                             ; CODE XREF: sub_416FA0+81↑j
.text:004173B1                                         ; sub_416FA0+452↓j
.text:004173B1                 shld    edi, esi, 8
.text:004173B5                 movsx   eax, cl
.text:004173B8                 shl     esi, 8
.text:004173BB                 cdq
.text:004173BC                 add     esi, eax
.text:004173BE                 adc     edi, edx
.text:004173C0                 mov     edx, edi
.text:004173C2                 xor     ebx, ebx
.text:004173C4                 and     edx, 0FF000000h
.text:004173CA                 mov     eax, edx
.text:004173CC                 or      eax, ebx
.text:004173CE                 jz      short loc_4173E9
.text:004173D0                 mov     ecx, edx
.text:004173D2                 xor     eax, eax
.text:004173D4                 shr     ecx, 10h
.text:004173D7                 mov     edx, esi
.text:004173D9                 xor     edx, ecx
.text:004173DB                 mov     ecx, edi
.text:004173DD                 xor     ecx, eax
.text:004173DF                 mov     esi, edx
.text:004173E1                 mov     edi, ecx
.text:004173E3                 and     edi, 0FFFFFFh
.text:004173E9
.text:004173E9 loc_4173E9:                             ; CODE XREF: sub_416FA0+42E↑j
.text:004173E9                 inc     ebp
.text:004173EA                 movzx   ebx, byte ptr [ebp+0]
.text:004173EE                 test    bl, bl
.text:004173F0                 mov     cl, bl
.text:004173F2                 jnz     short loc_4173B1
.text:004173F4                 mov     eax, esi
.text:004173F6                 mov     edx, edi
.text:004173F8                 jmp     loc_41702B
.text:004173F8 ; ---------------------------------------------------------------------------
.text:004173FD                 align 10h
.text:00417400
.text:00417400 loc_417400:                             ; CODE XREF: sub_416FA0+3F↑j
.text:00417400                                         ; sub_416FA0+57↑j
.text:00417400                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00417404                 mov     ebp, [esp+6Ch+String1]
.text:00417408                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:0041740C                 mov     [esp+6Ch+Str], ebp ; String1
.text:0041740F                 call    _stricmp
.text:00417414                 test    eax, eax
.text:00417416                 jnz     short loc_417430
.text:00417418                 mov     ebx, [esp+6Ch+arg_4]
.text:0041741C                 mov     dword ptr [ebx+8], 5
.text:00417423                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041742A                 jmp     loc_416FFD
.text:0041742A ; ---------------------------------------------------------------------------
.text:0041742F                 align 10h
.text:00417430
.text:00417430 loc_417430:                             ; CODE XREF: sub_416FA0+476↑j
.text:00417430                 mov     ebp, [esp+6Ch+String1]
.text:00417434                 xor     esi, esi
.text:00417436                 xor     edi, edi
.text:00417438                 add     ebp, ebx
.text:0041743A                 jz      short loc_417444
.text:0041743C                 movzx   ecx, byte ptr [ebp+0]
.text:00417440                 test    cl, cl
.text:00417442                 jnz     short loc_417457
.text:00417444
.text:00417444 loc_417444:                             ; CODE XREF: sub_416FA0+49A↑j
.text:00417444                 xor     eax, eax
.text:00417446                 xor     edx, edx
.text:00417448
.text:00417448 loc_417448:                             ; CODE XREF: sub_416FA0+4FE↓j
.text:00417448                 mov     ebp, [esp+6Ch+arg_4]
.text:0041744C                 mov     [ebp+8], eax
.text:0041744F                 mov     [ebp+0Ch], edx
.text:00417452                 jmp     loc_416FFD
.text:00417457 ; ---------------------------------------------------------------------------
.text:00417457
.text:00417457 loc_417457:                             ; CODE XREF: sub_416FA0+4A2↑j
.text:00417457                                         ; sub_416FA0+4F8↓j
.text:00417457                 shld    edi, esi, 8
.text:0041745B                 movsx   eax, cl
.text:0041745E                 shl     esi, 8
.text:00417461                 cdq
.text:00417462                 add     esi, eax
.text:00417464                 adc     edi, edx
.text:00417466                 mov     edx, edi
.text:00417468                 xor     ebx, ebx
.text:0041746A                 and     edx, 0FF000000h
.text:00417470                 mov     eax, edx
.text:00417472                 or      eax, ebx
.text:00417474                 jz      short loc_41748F
.text:00417476                 mov     ecx, edx
.text:00417478                 xor     eax, eax
.text:0041747A                 shr     ecx, 10h
.text:0041747D                 mov     edx, esi
.text:0041747F                 xor     edx, ecx
.text:00417481                 mov     ecx, edi
.text:00417483                 xor     ecx, eax
.text:00417485                 mov     esi, edx
.text:00417487                 mov     edi, ecx
.text:00417489                 and     edi, 0FFFFFFh
.text:0041748F
.text:0041748F loc_41748F:                             ; CODE XREF: sub_416FA0+4D4↑j
.text:0041748F                 inc     ebp
.text:00417490                 movzx   ebx, byte ptr [ebp+0]
.text:00417494                 test    bl, bl
.text:00417496                 mov     cl, bl
.text:00417498                 jnz     short loc_417457
.text:0041749A                 mov     eax, esi
.text:0041749C                 mov     edx, edi
.text:0041749E                 jmp     short loc_417448
.text:0041749E sub_416FA0      endp
.text:0041749E
.text:004174A0
.text:004174A0 ; =============== S U B R O U T I N E =======================================
.text:004174A0
.text:004174A0
.text:004174A0 ; int __cdecl sub_4174A0(LPCSTR)
.text:004174A0 sub_4174A0      proc near               ; CODE XREF: sub_419140+CA↓p
.text:004174A0
.text:004174A0 lpRootPathName  = dword ptr -83Ch
.text:004174A0 lpVolumeNameBuffer= dword ptr -838h
.text:004174A0 nVolumeNameSize = dword ptr -834h
.text:004174A0 lpVolumeSerialNumber= dword ptr -830h
.text:004174A0 lpMaximumComponentLength= dword ptr -82Ch
.text:004174A0 lpFileSystemFlags= dword ptr -828h
.text:004174A0 lpFileSystemNameBuffer= dword ptr -824h
.text:004174A0 nFileSystemNameSize= dword ptr -820h
.text:004174A0 VolumeSerialNumber= dword ptr -818h
.text:004174A0 MaximumComponentLength= dword ptr -814h
.text:004174A0 FileSystemFlags = dword ptr -810h
.text:004174A0 FileSystemNameBuffer= byte ptr -80Ch
.text:004174A0 VolumeNameBuffer= byte ptr -40Ch
.text:004174A0 var_4           = dword ptr -4
.text:004174A0 arg_0           = dword ptr  4
.text:004174A0
.text:004174A0                 sub     esp, 83Ch
.text:004174A6                 mov     [esp+83Ch+var_4], ebx
.text:004174AD                 mov     ebx, [esp+83Ch+arg_0]
.text:004174B4                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:004174B7                 call    sub_419020
.text:004174BC                 mov     [esp+83Ch+lpRootPathName], eax
.text:004174BF                 call    sub_4187A0
.text:004174C4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004174C7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004174CB                 mov     ebx, eax
.text:004174CD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004174D1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004174D5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004174D9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004174DD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004174E1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004174E5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004174EC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004174F0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004174F4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004174FC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00417504                 call    GetVolumeInformationA
.text:00417509                 sub     esp, 20h
.text:0041750C                 test    eax, eax
.text:0041750E                 setz    cl
.text:00417511                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00417514                 movzx   edx, cl
.text:00417517                 dec     edx
.text:00417518                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:0041751C                 call    free
.text:00417521                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00417525                 mov     ebx, [esp+83Ch+var_4]
.text:0041752C                 add     esp, 83Ch
.text:00417532                 retn
.text:00417532 sub_4174A0      endp
.text:00417532
.text:00417532 ; ---------------------------------------------------------------------------
.text:00417533                 align 10h
.text:00417540                 push    ebp
.text:00417541                 push    edi
.text:00417542                 xor     edi, edi
.text:00417544                 push    esi
.text:00417545                 xor     esi, esi
.text:00417547                 push    ebx
.text:00417548                 mov     ebp, [esp+14h]
.text:0041754C                 test    ebp, ebp
.text:0041754E                 jz      short loc_417558
.text:00417550                 movzx   ecx, byte ptr [ebp+0]
.text:00417554                 test    cl, cl
.text:00417556                 jnz     short loc_417561
.text:00417558
.text:00417558 loc_417558:                             ; CODE XREF: .text:0041754E↑j
.text:00417558                 xor     eax, eax
.text:0041755A                 xor     edx, edx
.text:0041755C
.text:0041755C loc_41755C:                             ; CODE XREF: .text:004175A8↓j
.text:0041755C                 pop     ebx
.text:0041755D                 pop     esi
.text:0041755E                 pop     edi
.text:0041755F                 pop     ebp
.text:00417560                 retn
.text:00417561 ; ---------------------------------------------------------------------------
.text:00417561
.text:00417561 loc_417561:                             ; CODE XREF: .text:00417556↑j
.text:00417561                                         ; .text:004175A2↓j
.text:00417561                 shld    edi, esi, 8
.text:00417565                 movsx   eax, cl
.text:00417568                 shl     esi, 8
.text:0041756B                 cdq
.text:0041756C                 add     esi, eax
.text:0041756E                 adc     edi, edx
.text:00417570                 mov     edx, edi
.text:00417572                 xor     ebx, ebx
.text:00417574                 and     edx, 0FF000000h
.text:0041757A                 mov     eax, edx
.text:0041757C                 or      eax, ebx
.text:0041757E                 jz      short loc_417599
.text:00417580                 mov     ecx, edx
.text:00417582                 xor     eax, eax
.text:00417584                 shr     ecx, 10h
.text:00417587                 mov     edx, esi
.text:00417589                 xor     edx, ecx
.text:0041758B                 mov     ecx, edi
.text:0041758D                 xor     ecx, eax
.text:0041758F                 mov     esi, edx
.text:00417591                 mov     edi, ecx
.text:00417593                 and     edi, 0FFFFFFh
.text:00417599
.text:00417599 loc_417599:                             ; CODE XREF: .text:0041757E↑j
.text:00417599                 inc     ebp
.text:0041759A                 movzx   ebx, byte ptr [ebp+0]
.text:0041759E                 test    bl, bl
.text:004175A0                 mov     cl, bl
.text:004175A2                 jnz     short loc_417561
.text:004175A4                 mov     eax, esi
.text:004175A6                 mov     edx, edi
.text:004175A8                 jmp     short loc_41755C
.text:004175A8 ; ---------------------------------------------------------------------------
.text:004175AA                 align 10h
.text:004175B0                 sub     esp, 2Ch
.text:004175B3                 lea     edx, [esp+24h]
.text:004175B7                 lea     ecx, [esp+28h]
.text:004175BB                 mov     [esp+0Ch], edx
.text:004175BF                 lea     edx, [esp+1Ch]
.text:004175C3                 mov     [esp+4], edx
.text:004175C7                 mov     edx, [esp+30h]
.text:004175CB                 mov     [esp+10h], ecx
.text:004175CF                 lea     ecx, [esp+20h]
.text:004175D3                 mov     [esp+8], ecx
.text:004175D7                 mov     [esp], edx
.text:004175DA                 call    sub_419A70
.text:004175DF                 test    eax, eax
.text:004175E1                 jnz     short loc_417603
.text:004175E3                 mov     dword ptr [esp+1Ch], 1
.text:004175EB                 mov     dword ptr [esp+20h], 200h
.text:004175F3                 mov     dword ptr [esp+24h], 0
.text:004175FB                 mov     dword ptr [esp+28h], 0
.text:00417603
.text:00417603 loc_417603:                             ; CODE XREF: .text:004175E1↑j
.text:00417603                 mov     eax, [esp+20h]
.text:00417607                 mov     ecx, [esp+1Ch]
.text:0041760B                 add     esp, 2Ch
.text:0041760E                 imul    eax, ecx
.text:00417611                 retn
.text:00417611 ; ---------------------------------------------------------------------------
.text:00417612                 align 10h
.text:00417620                 sub     esp, 1Ch
.text:00417623                 mov     eax, [esp+20h]
.text:00417627                 mov     [esp+14h], esi
.text:0041762B                 mov     [esp+18h], edi
.text:0041762F                 test    eax, eax
.text:00417631                 jz      short loc_417670
.text:00417633                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041763B                 mov     [esp], eax
.text:0041763E                 call    strrchr
.text:00417643                 test    eax, eax
.text:00417645                 jz      short loc_417670
.text:00417647                 cld
.text:00417648                 mov     esi, eax
.text:0041764A                 mov     edi, offset aLnk ; ".lnk"
.text:0041764F                 mov     ecx, 5
.text:00417654                 repe cmpsb
.text:00417656                 setz    dl
.text:00417659                 movzx   eax, dl
.text:0041765C                 lea     esi, [esi+0]
.text:00417660
.text:00417660 loc_417660:                             ; CODE XREF: .text:00417672↓j
.text:00417660                 mov     esi, [esp+14h]
.text:00417664                 mov     edi, [esp+18h]
.text:00417668                 add     esp, 1Ch
.text:0041766B                 retn
.text:0041766B ; ---------------------------------------------------------------------------
.text:0041766C                 align 10h
.text:00417670
.text:00417670 loc_417670:                             ; CODE XREF: .text:00417631↑j
.text:00417670                                         ; .text:00417645↑j
.text:00417670                 xor     eax, eax
.text:00417672                 jmp     short loc_417660
.text:00417672 ; ---------------------------------------------------------------------------
.text:00417674                 align 10h
.text:00417680                 sub     esp, 1Ch
.text:00417683                 mov     [esp+10h], ebx
.text:00417687                 mov     ebx, [esp+20h]
.text:0041768B                 mov     [esp+14h], esi
.text:0041768F                 mov     [esp+18h], edi
.text:00417693                 xor     edi, edi
.text:00417695                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0041769C                 call    GetModuleHandleA
.text:004176A1                 sub     esp, 4
.text:004176A4                 mov     esi, eax
.text:004176A6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004176AE                 mov     [esp], eax
.text:004176B1                 call    GetProcAddress
.text:004176B6                 sub     esp, 8
.text:004176B9                 test    eax, eax
.text:004176BB                 jz      short loc_4176D1
.text:004176BD                 mov     [esp], ebx
.text:004176C0                 lea     ecx, [esp+0Ch]
.text:004176C4                 mov     [esp+4], ecx
.text:004176C8                 call    eax
.text:004176CA                 sub     esp, 8
.text:004176CD                 test    eax, eax
.text:004176CF                 jnz     short loc_417730
.text:004176D1
.text:004176D1 loc_4176D1:                             ; CODE XREF: .text:004176BB↑j
.text:004176D1                 mov     eax, ds:Str
.text:004176D6                 test    eax, eax
.text:004176D8                 jz      short loc_417750
.text:004176DA
.text:004176DA loc_4176DA:                             ; CODE XREF: .text:00417763↓j
.text:004176DA                                         ; .text:00417775↓j
.text:004176DA                 test    ebx, ebx
.text:004176DC                 jz      short loc_4176E3
.text:004176DE                 cmp     byte ptr [ebx], 0
.text:004176E1                 jnz     short loc_417700
.text:004176E3
.text:004176E3 loc_4176E3:                             ; CODE XREF: .text:004176DC↑j
.text:004176E3                                         ; .text:00417714↓j ...
.text:004176E3                 mov     [esp], esi
.text:004176E6                 call    FreeLibrary
.text:004176EB                 sub     esp, 4
.text:004176EE                 mov     eax, edi
.text:004176F0                 mov     ebx, [esp+10h]
.text:004176F4                 mov     esi, [esp+14h]
.text:004176F8                 mov     edi, [esp+18h]
.text:004176FC                 add     esp, 1Ch
.text:004176FF                 retn
.text:00417700 ; ---------------------------------------------------------------------------
.text:00417700
.text:00417700 loc_417700:                             ; CODE XREF: .text:004176E1↑j
.text:00417700                 mov     [esp], ebx
.text:00417703                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041770B                 call    strrchr
.text:00417710                 test    eax, eax
.text:00417712                 mov     ebx, eax
.text:00417714                 jz      short loc_4176E3
.text:00417716                 mov     [esp+4], eax
.text:0041771A                 mov     ecx, ds:Str
.text:00417720                 mov     [esp], ecx
.text:00417723                 call    strstr
.text:00417728                 test    eax, eax
.text:0041772A                 jz      short loc_417737
.text:0041772C                 lea     esi, [esi+0]
.text:00417730
.text:00417730 loc_417730:                             ; CODE XREF: .text:004176CF↑j
.text:00417730                                         ; .text:0041774D↓j
.text:00417730                 mov     edi, 1
.text:00417735                 jmp     short loc_4176E3
.text:00417737 ; ---------------------------------------------------------------------------
.text:00417737
.text:00417737 loc_417737:                             ; CODE XREF: .text:0041772A↑j
.text:00417737                 mov     [esp+4], ebx
.text:0041773B                 mov     ebx, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:00417741                 mov     [esp], ebx
.text:00417744                 call    strstr
.text:00417749                 test    eax, eax
.text:0041774B                 jz      short loc_4176E3
.text:0041774D                 jmp     short loc_417730
.text:0041774D ; ---------------------------------------------------------------------------
.text:0041774F                 align 10h
.text:00417750
.text:00417750 loc_417750:                             ; CODE XREF: .text:004176D8↑j
.text:00417750                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00417757                 call    getenv
.text:0041775C                 mov     ds:Str, eax
.text:00417761                 test    eax, eax
.text:00417763                 jnz     loc_4176DA
.text:00417769                 mov     edx, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:0041776F                 mov     ds:Str, edx
.text:00417775                 jmp     loc_4176DA
.text:00417775 ; ---------------------------------------------------------------------------
.text:0041777A                 align 10h
.text:00417780                 sub     esp, 0Ch
.text:00417783                 mov     edx, [esp+10h]
.text:00417787                 mov     [esp], edx
.text:0041778A                 call    GetFileType
.text:0041778F                 sub     esp, 4
.text:00417792                 xor     edx, edx
.text:00417794                 cmp     eax, 2
.text:00417797                 jz      short loc_4177B0
.text:00417799                 cmp     eax, 3
.text:0041779C                 jz      short loc_4177A4
.text:0041779E
.text:0041779E loc_41779E:                             ; CODE XREF: .text:004177A9↓j
.text:0041779E                                         ; .text:004177B5↓j
.text:0041779E                 mov     eax, edx
.text:004177A0                 add     esp, 0Ch
.text:004177A3                 retn
.text:004177A4 ; ---------------------------------------------------------------------------
.text:004177A4
.text:004177A4 loc_4177A4:                             ; CODE XREF: .text:0041779C↑j
.text:004177A4                 mov     edx, 1000h
.text:004177A9                 jmp     short loc_41779E
.text:004177A9 ; ---------------------------------------------------------------------------
.text:004177AB                 align 10h
.text:004177B0
.text:004177B0 loc_4177B0:                             ; CODE XREF: .text:00417797↑j
.text:004177B0                 mov     edx, 2000h
.text:004177B5                 jmp     short loc_41779E
.text:004177B5 ; ---------------------------------------------------------------------------
.text:004177B7                 align 10h
.text:004177C0                 mov     ecx, [esp+4]
.text:004177C4                 xor     edx, edx
.text:004177C6                 test    cl, 10h
.text:004177C9                 setz    dl
.text:004177CC                 dec     edx
.text:004177CD                 and     edx, 0FFFFC000h
.text:004177D3                 add     edx, 8000h
.text:004177D9                 or      edx, 124h
.text:004177DF                 test    cl, 1
.text:004177E2                 movzx   eax, dx
.text:004177E5                 jnz     short locret_4177EC
.text:004177E7                 or      eax, 92h
.text:004177EC
.text:004177EC locret_4177EC:                          ; CODE XREF: .text:004177E5↑j
.text:004177EC                 retn
.text:004177EC ; ---------------------------------------------------------------------------
.text:004177ED                 align 10h
.text:004177F0                 sub     esp, 2Ch
.text:004177F3                 mov     [esp+20h], esi
.text:004177F7                 mov     esi, [esp+30h]
.text:004177FB                 mov     [esp+1Ch], ebx
.text:004177FF                 xor     ebx, ebx
.text:00417801                 test    esi, esi
.text:00417803                 mov     [esp+24h], edi
.text:00417807                 mov     [esp+28h], ebp
.text:0041780B                 jz      short loc_417860
.text:0041780D                 cmp     byte ptr [esi], 0
.text:00417810                 jnz     short loc_417864
.text:00417812
.text:00417812 loc_417812:                             ; CODE XREF: .text:004178CC↓j
.text:00417812                                         ; .text:004178D7↓j
.text:00417812                 test    esi, esi
.text:00417814                 jz      short loc_417860
.text:00417816                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:0041781E                 mov     [esp], esi
.text:00417821                 call    strrchr
.text:00417826                 test    eax, eax
.text:00417828                 jz      short loc_417860
.text:0041782A                 cld
.text:0041782B                 mov     ecx, 5
.text:00417830                 mov     esi, eax
.text:00417832                 mov     edi, offset aLnk ; ".lnk"
.text:00417837                 repe cmpsb
.text:00417839                 setz    cl
.text:0041783C                 movzx   eax, cl
.text:0041783F                 nop
.text:00417840
.text:00417840 loc_417840:                             ; CODE XREF: .text:00417862↓j
.text:00417840                 test    eax, eax
.text:00417842                 jz      short loc_41784A
.text:00417844                 or      ebx, 0A000h
.text:0041784A
.text:0041784A loc_41784A:                             ; CODE XREF: .text:00417842↑j
.text:0041784A                 mov     eax, ebx
.text:0041784C                 mov     esi, [esp+20h]
.text:00417850                 mov     ebx, [esp+1Ch]
.text:00417854                 mov     edi, [esp+24h]
.text:00417858                 mov     ebp, [esp+28h]
.text:0041785C                 add     esp, 2Ch
.text:0041785F                 retn
.text:00417860 ; ---------------------------------------------------------------------------
.text:00417860
.text:00417860 loc_417860:                             ; CODE XREF: .text:0041780B↑j
.text:00417860                                         ; .text:00417814↑j ...
.text:00417860                 xor     eax, eax
.text:00417862                 jmp     short loc_417840
.text:00417864 ; ---------------------------------------------------------------------------
.text:00417864
.text:00417864 loc_417864:                             ; CODE XREF: .text:00417810↑j
.text:00417864                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:0041786B                 call    GetModuleHandleA
.text:00417870                 sub     esp, 4
.text:00417873                 mov     ebp, eax
.text:00417875                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0041787D                 mov     [esp], eax
.text:00417880                 call    GetProcAddress
.text:00417885                 sub     esp, 8
.text:00417888                 test    eax, eax
.text:0041788A                 mov     dword ptr [esp+14h], 0
.text:00417892                 jz      short loc_4178A8
.text:00417894                 mov     [esp], esi
.text:00417897                 lea     ecx, [esp+18h]
.text:0041789B                 mov     [esp+4], ecx
.text:0041789F                 call    eax
.text:004178A1                 sub     esp, 8
.text:004178A4                 test    eax, eax
.text:004178A6                 jnz     short loc_417908
.text:004178A8
.text:004178A8 loc_4178A8:                             ; CODE XREF: .text:00417892↑j
.text:004178A8                 mov     edx, ds:Str
.text:004178AE                 test    edx, edx
.text:004178B0                 jz      short loc_417930
.text:004178B2
.text:004178B2 loc_4178B2:                             ; CODE XREF: .text:00417943↓j
.text:004178B2                                         ; .text:00417955↓j
.text:004178B2                 test    esi, esi
.text:004178B4                 jz      short loc_4178BB
.text:004178B6                 cmp     byte ptr [esi], 0
.text:004178B9                 jnz     short loc_4178DC
.text:004178BB
.text:004178BB loc_4178BB:                             ; CODE XREF: .text:004178B4↑j
.text:004178BB                                         ; .text:004178F0↓j ...
.text:004178BB                 mov     [esp], ebp
.text:004178BE                 call    FreeLibrary
.text:004178C3                 sub     esp, 4
.text:004178C6                 mov     eax, [esp+14h]
.text:004178CA                 test    eax, eax
.text:004178CC                 jz      loc_417812
.text:004178D2                 mov     ebx, 49h ; 'I'
.text:004178D7                 jmp     loc_417812
.text:004178DC ; ---------------------------------------------------------------------------
.text:004178DC
.text:004178DC loc_4178DC:                             ; CODE XREF: .text:004178B9↑j
.text:004178DC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004178E4                 mov     [esp], esi
.text:004178E7                 call    strrchr
.text:004178EC                 test    eax, eax
.text:004178EE                 mov     edi, eax
.text:004178F0                 jz      short loc_4178BB
.text:004178F2                 mov     [esp+4], eax
.text:004178F6                 mov     edx, ds:Str
.text:004178FC                 mov     [esp], edx
.text:004178FF                 call    strstr
.text:00417904                 test    eax, eax
.text:00417906                 jz      short loc_417912
.text:00417908
.text:00417908 loc_417908:                             ; CODE XREF: .text:004178A6↑j
.text:00417908                                         ; .text:00417928↓j
.text:00417908                 mov     dword ptr [esp+14h], 1
.text:00417910                 jmp     short loc_4178BB
.text:00417912 ; ---------------------------------------------------------------------------
.text:00417912
.text:00417912 loc_417912:                             ; CODE XREF: .text:00417906↑j
.text:00417912                 mov     [esp+4], edi
.text:00417916                 mov     edi, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:0041791C                 mov     [esp], edi
.text:0041791F                 call    strstr
.text:00417924                 test    eax, eax
.text:00417926                 jz      short loc_4178BB
.text:00417928                 jmp     short loc_417908
.text:00417928 ; ---------------------------------------------------------------------------
.text:0041792A                 align 10h
.text:00417930
.text:00417930 loc_417930:                             ; CODE XREF: .text:004178B0↑j
.text:00417930                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00417937                 call    getenv
.text:0041793C                 mov     ds:Str, eax
.text:00417941                 test    eax, eax
.text:00417943                 jnz     loc_4178B2
.text:00417949                 mov     ecx, off_42B134 ; ".com;.exe;.bat;.cmd"
.text:0041794F                 mov     ds:Str, ecx
.text:00417955                 jmp     loc_4178B2
.text:00417955 ; ---------------------------------------------------------------------------
.text:0041795A                 align 10h
.text:00417960                 push    esi
.text:00417961                 push    ebx
.text:00417962                 sub     esp, 864h
.text:00417968                 mov     ebx, [esp+870h]
.text:0041796F                 lea     edx, [esp+830h]
.text:00417976                 mov     esi, [esp+874h]
.text:0041797D                 mov     [esp+4], edx
.text:00417981                 mov     [esp], ebx
.text:00417984                 call    sub_4167E0
.text:00417989                 xor     edx, edx
.text:0041798B                 test    eax, eax
.text:0041798D                 jz      loc_417A75
.text:00417993                 mov     ecx, [esp+830h]
.text:0041799A                 test    cl, 10h
.text:0041799D                 mov     [esi], ecx
.text:0041799F                 mov     eax, [esp+834h]
.text:004179A6                 mov     edx, [esp+838h]
.text:004179AD                 mov     [esi+4], eax
.text:004179B0                 mov     [esi+8], edx
.text:004179B3                 mov     eax, [esp+83Ch]
.text:004179BA                 mov     edx, [esp+840h]
.text:004179C1                 mov     [esi+0Ch], eax
.text:004179C4                 mov     [esi+10h], edx
.text:004179C7                 mov     edx, [esp+848h]
.text:004179CE                 mov     eax, [esp+844h]
.text:004179D5                 mov     [esi+18h], edx
.text:004179D8                 mov     [esi+14h], eax
.text:004179DB                 mov     edx, [esp+84Ch]
.text:004179E2                 mov     [esi+20h], edx
.text:004179E5                 mov     edx, [esp+850h]
.text:004179EC                 mov     [esi+24h], edx
.text:004179EF                 jnz     loc_417A80
.text:004179F5                 mov     dword ptr [esi+28h], 1
.text:004179FC
.text:004179FC loc_4179FC:                             ; CODE XREF: .text:00417A8B↓j
.text:004179FC                 mov     [esp], ebx
.text:004179FF                 call    sub_419020
.text:00417A04                 mov     [esp], eax
.text:00417A07                 call    sub_4187A0
.text:00417A0C                 mov     [esp], eax
.text:00417A0F                 lea     edx, [esp+30h]
.text:00417A13                 mov     ebx, eax
.text:00417A15                 mov     [esp+18h], edx
.text:00417A19                 lea     ecx, [esp+2Ch]
.text:00417A1D                 lea     edx, [esp+28h]
.text:00417A21                 mov     [esp+14h], ecx
.text:00417A25                 lea     ecx, [esp+24h]
.text:00417A29                 mov     [esp+10h], edx
.text:00417A2D                 lea     edx, [esp+430h]
.text:00417A34                 mov     [esp+0Ch], ecx
.text:00417A38                 mov     [esp+4], edx
.text:00417A3C                 mov     dword ptr [esp+1Ch], 400h
.text:00417A44                 mov     dword ptr [esp+8], 400h
.text:00417A4C                 call    GetVolumeInformationA
.text:00417A51                 sub     esp, 20h
.text:00417A54                 test    eax, eax
.text:00417A56                 setz    cl
.text:00417A59                 mov     [esp], ebx
.text:00417A5C                 movzx   edx, cl
.text:00417A5F                 dec     edx
.text:00417A60                 and     [esp+24h], edx
.text:00417A64                 call    free
.text:00417A69                 mov     ecx, [esp+24h]
.text:00417A6D                 mov     edx, 1
.text:00417A72                 mov     [esi+1Ch], ecx
.text:00417A75
.text:00417A75 loc_417A75:                             ; CODE XREF: .text:0041798D↑j
.text:00417A75                 add     esp, 864h
.text:00417A7B                 mov     eax, edx
.text:00417A7D                 pop     ebx
.text:00417A7E                 pop     esi
.text:00417A7F                 retn
.text:00417A80 ; ---------------------------------------------------------------------------
.text:00417A80
.text:00417A80 loc_417A80:                             ; CODE XREF: .text:004179EF↑j
.text:00417A80                 mov     [esp], ebx
.text:00417A83                 call    sub_416950
.text:00417A88                 mov     [esi+28h], eax
.text:00417A8B                 jmp     loc_4179FC
.text:00417A90 ; ---------------------------------------------------------------------------
.text:00417A90                 push    ebp
.text:00417A91                 xor     edx, edx
.text:00417A93                 push    edi
.text:00417A94                 push    esi
.text:00417A95                 xor     esi, esi
.text:00417A97                 push    ebx
.text:00417A98                 sub     esp, 1Ch
.text:00417A9B                 mov     ebx, [esp+5Ch]
.text:00417A9F                 mov     ecx, [esp+30h]
.text:00417AA3                 mov     edi, [esp+60h]
.text:00417AA7                 or      esi, ebx
.text:00417AA9                 mov     eax, [esp+4Ch]
.text:00417AAD                 or      edi, edx
.text:00417AAF                 mov     ebx, [esp+64h]
.text:00417AB3                 xor     edx, edx
.text:00417AB5                 test    cl, 10h
.text:00417AB8                 setz    dl
.text:00417ABB                 mov     [ebx+10h], eax
.text:00417ABE                 mov     [ebx+8], edi
.text:00417AC1                 mov     [ebx+0Ch], esi
.text:00417AC4                 dec     edx
.text:00417AC5                 and     edx, 0FFFFC000h
.text:00417ACB                 mov     dword ptr [ebx+14h], 0
.text:00417AD2                 add     edx, 8000h
.text:00417AD8                 or      edx, 124h
.text:00417ADE                 test    cl, 1
.text:00417AE1                 movzx   eax, dx
.text:00417AE4                 jnz     short loc_417AEB
.text:00417AE6                 or      eax, 92h
.text:00417AEB
.text:00417AEB loc_417AEB:                             ; CODE XREF: .text:00417AE4↑j
.text:00417AEB                 mov     ebx, [esp+54h]
.text:00417AEF                 xor     edx, edx
.text:00417AF1                 xor     ebp, ebp
.text:00417AF3                 mov     edi, [esp+50h]
.text:00417AF7                 mov     ecx, [esp+64h]
.text:00417AFB                 mov     esi, edi
.text:00417AFD                 or      [ecx], eax
.text:00417AFF                 mov     edi, ebx
.text:00417B01                 or      edi, ebp
.text:00417B03                 mov     ebp, edx
.text:00417B05                 mov     ebx, [esp+64h]
.text:00417B09                 or      ebp, esi
.text:00417B0B                 mov     esi, [esp+58h]
.text:00417B0F                 mov     edx, [esp+40h]
.text:00417B13                 mov     [ebx+30h], edi
.text:00417B16                 mov     [ebx+18h], esi
.text:00417B19                 mov     ecx, edx
.text:00417B1B                 xor     esi, esi
.text:00417B1D                 mov     [ebx+34h], ebp
.text:00417B20                 xor     edx, edx
.text:00417B22                 or      esi, ecx
.text:00417B24                 mov     dword ptr [esp+8], 989680h
.text:00417B2C                 mov     ebx, [esp+3Ch]
.text:00417B30                 mov     ecx, esi
.text:00417B32                 mov     dword ptr [esp+0Ch], 0
.text:00417B3A                 or      ebx, edx
.text:00417B3C                 mov     edx, ebx
.text:00417B3E                 sub     edx, 0D53E8000h
.text:00417B44                 sbb     ecx, 19DB1DEh
.text:00417B4A                 mov     [esp+4], ecx
.text:00417B4E                 mov     [esp], edx
.text:00417B51                 call    sub_429510
.text:00417B56                 mov     edx, eax
.text:00417B58                 mov     ecx, [esp+64h]
.text:00417B5C                 shr     eax, 1Fh
.text:00417B5F                 dec     eax
.text:00417B60                 and     edx, eax
.text:00417B62                 mov     [ecx+38h], edx
.text:00417B65                 mov     [esp], ebx
.text:00417B68                 mov     [esp+4], esi
.text:00417B6C                 mov     dword ptr [esp+8], 989680h
.text:00417B74                 mov     dword ptr [esp+0Ch], 0
.text:00417B7C                 call    sub_429070
.text:00417B81                 lea     ecx, [eax+eax*4]
.text:00417B84                 lea     esi, [ecx+ecx*4]
.text:00417B87                 mov     eax, [esp+64h]
.text:00417B8B                 shl     esi, 2
.text:00417B8E                 mov     ebx, esi
.text:00417B90                 shr     ebx, 1Fh
.text:00417B93                 dec     ebx
.text:00417B94                 and     ebx, esi
.text:00417B96                 xor     esi, esi
.text:00417B98                 mov     [eax+3Ch], ebx
.text:00417B9B                 mov     edx, [esp+38h]
.text:00417B9F                 mov     dword ptr [esp+8], 989680h
.text:00417BA7                 mov     ebx, [esp+34h]
.text:00417BAB                 mov     dword ptr [esp+0Ch], 0
.text:00417BB3                 mov     ecx, edx
.text:00417BB5                 xor     edx, edx
.text:00417BB7                 or      ebx, edx
.text:00417BB9                 or      esi, ecx
.text:00417BBB                 mov     edx, ebx
.text:00417BBD                 sub     edx, 0D53E8000h
.text:00417BC3                 mov     ecx, esi
.text:00417BC5                 sbb     ecx, 19DB1DEh
.text:00417BCB                 mov     [esp+4], ecx
.text:00417BCF                 mov     [esp], edx
.text:00417BD2                 call    sub_429510
.text:00417BD7                 mov     edx, eax
.text:00417BD9                 mov     ecx, [esp+64h]
.text:00417BDD                 shr     eax, 1Fh
.text:00417BE0                 dec     eax
.text:00417BE1                 and     edx, eax
.text:00417BE3                 mov     [ecx+48h], edx
.text:00417BE6                 mov     [esp], ebx
.text:00417BE9                 mov     [esp+4], esi
.text:00417BED                 mov     dword ptr [esp+8], 989680h
.text:00417BF5                 mov     dword ptr [esp+0Ch], 0
.text:00417BFD                 call    sub_429070
.text:00417C02                 lea     edx, [eax+eax*4]
.text:00417C05                 mov     ebx, [esp+64h]
.text:00417C09                 lea     ecx, [edx+edx*4]
.text:00417C0C                 shl     ecx, 2
.text:00417C0F                 mov     esi, ecx
.text:00417C11                 shr     esi, 1Fh
.text:00417C14                 dec     esi
.text:00417C15                 and     esi, ecx
.text:00417C17                 mov     [ebx+4Ch], esi
.text:00417C1A                 mov     edx, [esp+48h]
.text:00417C1E                 xor     esi, esi
.text:00417C20                 mov     dword ptr [esp+8], 989680h
.text:00417C28                 mov     ebx, [esp+44h]
.text:00417C2C                 mov     dword ptr [esp+0Ch], 0
.text:00417C34                 mov     ecx, edx
.text:00417C36                 xor     edx, edx
.text:00417C38                 or      ebx, edx
.text:00417C3A                 or      esi, ecx
.text:00417C3C                 mov     edx, ebx
.text:00417C3E                 sub     edx, 0D53E8000h
.text:00417C44                 mov     ecx, esi
.text:00417C46                 sbb     ecx, 19DB1DEh
.text:00417C4C                 mov     [esp+4], ecx
.text:00417C50                 mov     [esp], edx
.text:00417C53                 call    sub_429510
.text:00417C58                 mov     edx, eax
.text:00417C5A                 mov     ecx, [esp+64h]
.text:00417C5E                 shr     eax, 1Fh
.text:00417C61                 dec     eax
.text:00417C62                 and     edx, eax
.text:00417C64                 mov     [ecx+40h], edx
.text:00417C67                 mov     [esp+4], esi
.text:00417C6B                 mov     dword ptr [esp+8], 989680h
.text:00417C73                 mov     dword ptr [esp+0Ch], 0
.text:00417C7B                 mov     [esp], ebx
.text:00417C7E                 call    sub_429070
.text:00417C83                 lea     edx, [eax+eax*4]
.text:00417C86                 lea     esi, [edx+edx*4]
.text:00417C89                 mov     eax, [esp+64h]
.text:00417C8D                 shl     esi, 2
.text:00417C90                 mov     edx, ebp
.text:00417C92                 mov     ecx, esi
.text:00417C94                 mov     dword ptr [eax+50h], 200h
.text:00417C9B                 shr     ecx, 1Fh
.text:00417C9E                 dec     ecx
.text:00417C9F                 and     ecx, esi
.text:00417CA1                 test    ebp, ebp
.text:00417CA3                 mov     [eax+44h], ecx
.text:00417CA6                 mov     eax, edi
.text:00417CA8                 js      short loc_417CE2
.text:00417CAA
.text:00417CAA loc_417CAA:                             ; CODE XREF: .text:00417CEA↓j
.text:00417CAA                 xor     esi, esi
.text:00417CAC                 mov     ebp, edi
.text:00417CAE                 mov     ecx, eax
.text:00417CB0                 shrd    ecx, edx, 9
.text:00417CB4                 mov     ebx, edx
.text:00417CB6                 and     ebp, 1FFh
.text:00417CBC                 mov     eax, esi
.text:00417CBE                 sar     ebx, 9
.text:00417CC1                 or      eax, ebp
.text:00417CC3                 jz      short loc_417CCB
.text:00417CC5                 add     ecx, 1
.text:00417CC8                 adc     ebx, 0
.text:00417CCB
.text:00417CCB loc_417CCB:                             ; CODE XREF: .text:00417CC3↑j
.text:00417CCB                 mov     edx, [esp+64h]
.text:00417CCF                 mov     eax, 1
.text:00417CD4                 mov     [edx+58h], ecx
.text:00417CD7                 mov     [edx+5Ch], ebx
.text:00417CDA                 add     esp, 1Ch
.text:00417CDD                 pop     ebx
.text:00417CDE                 pop     esi
.text:00417CDF                 pop     edi
.text:00417CE0                 pop     ebp
.text:00417CE1                 retn
.text:00417CE2 ; ---------------------------------------------------------------------------
.text:00417CE2
.text:00417CE2 loc_417CE2:                             ; CODE XREF: .text:00417CA8↑j
.text:00417CE2                 add     eax, 1FFh
.text:00417CE7                 adc     edx, 0
.text:00417CEA                 jmp     short loc_417CAA
.text:00417CEA ; ---------------------------------------------------------------------------
.text:00417CEC                 align 10h
.text:00417CF0                 push    ebp
.text:00417CF1                 push    edi
.text:00417CF2                 xor     edi, edi
.text:00417CF4                 push    esi
.text:00417CF5                 xor     esi, esi
.text:00417CF7                 push    ebx
.text:00417CF8                 sub     esp, 0Ch
.text:00417CFB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00417D02                 call    LoadLibraryA
.text:00417D07                 sub     esp, 4
.text:00417D0A                 mov     ebp, eax
.text:00417D0C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00417D14                 mov     [esp], eax
.text:00417D17                 call    GetProcAddress
.text:00417D1C                 sub     esp, 8
.text:00417D1F                 test    eax, eax
.text:00417D21                 jz      short loc_417D52
.text:00417D23                 lea     ecx, [esp+8]
.text:00417D27                 mov     [esp+4], ecx
.text:00417D2B                 mov     ecx, [esp+20h]
.text:00417D2F                 mov     [esp], ecx
.text:00417D32                 call    eax
.text:00417D34                 sub     esp, 8
.text:00417D37                 mov     ebx, eax
.text:00417D39                 cmp     eax, 0FFFFFFFFh
.text:00417D3C                 jz      short loc_417D6D
.text:00417D3E
.text:00417D3E loc_417D3E:                             ; CODE XREF: .text:00417D76↓j
.text:00417D3E                 mov     esi, [esp+8]
.text:00417D42                 mov     ecx, ebx
.text:00417D44                 xor     edi, edi
.text:00417D46                 xor     ebx, ebx
.text:00417D48                 mov     edx, esi
.text:00417D4A                 mov     esi, ecx
.text:00417D4C                 or      esi, edi
.text:00417D4E                 mov     edi, ebx
.text:00417D50                 or      edi, edx
.text:00417D52
.text:00417D52 loc_417D52:                             ; CODE XREF: .text:00417D21↑j
.text:00417D52                                         ; .text:00417D74↓j
.text:00417D52                 test    ebp, ebp
.text:00417D54                 jz      short loc_417D61
.text:00417D56                 mov     [esp], ebp
.text:00417D59                 call    FreeLibrary
.text:00417D5E                 sub     esp, 4
.text:00417D61
.text:00417D61 loc_417D61:                             ; CODE XREF: .text:00417D54↑j
.text:00417D61                 add     esp, 0Ch
.text:00417D64                 mov     eax, esi
.text:00417D66                 mov     edx, edi
.text:00417D68                 pop     ebx
.text:00417D69                 pop     esi
.text:00417D6A                 pop     edi
.text:00417D6B                 pop     ebp
.text:00417D6C                 retn
.text:00417D6D ; ---------------------------------------------------------------------------
.text:00417D6D
.text:00417D6D loc_417D6D:                             ; CODE XREF: .text:00417D3C↑j
.text:00417D6D                 call    GetLastError
.text:00417D72                 test    eax, eax
.text:00417D74                 jnz     short loc_417D52
.text:00417D76                 jmp     short loc_417D3E
.text:00417D76 ; ---------------------------------------------------------------------------
.text:00417D78                 align 10h
.text:00417D80
.text:00417D80 ; =============== S U B R O U T I N E =======================================
.text:00417D80
.text:00417D80
.text:00417D80 ; int __cdecl sub_417D80(LPCSTR lpFileName, int)
.text:00417D80 sub_417D80      proc near               ; CODE XREF: sub_418300-3F↓p
.text:00417D80
.text:00417D80 lpRootPathName  = dword ptr -8FCh
.text:00417D80 lpVolumeNameBuffer= dword ptr -8F8h
.text:00417D80 nVolumeNameSize = dword ptr -8F4h
.text:00417D80 lpVolumeSerialNumber= dword ptr -8F0h
.text:00417D80 lpMaximumComponentLength= dword ptr -8ECh
.text:00417D80 lpFileSystemFlags= dword ptr -8E8h
.text:00417D80 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00417D80 nFileSystemNameSize= dword ptr -8E0h
.text:00417D80 VolumeSerialNumber= dword ptr -8D8h
.text:00417D80 MaximumComponentLength= dword ptr -8D4h
.text:00417D80 FileSystemFlags = dword ptr -8D0h
.text:00417D80 var_8CC         = dword ptr -8CCh
.text:00417D80 var_8C8         = dword ptr -8C8h
.text:00417D80 var_8C4         = dword ptr -8C4h
.text:00417D80 var_8C0         = dword ptr -8C0h
.text:00417D80 var_8BC         = dword ptr -8BCh
.text:00417D80 var_8B8         = dword ptr -8B8h
.text:00417D80 var_8B4         = dword ptr -8B4h
.text:00417D80 var_8B0         = dword ptr -8B0h
.text:00417D80 var_8AC         = dword ptr -8ACh
.text:00417D80 var_8A8         = dword ptr -8A8h
.text:00417D80 var_8A4         = dword ptr -8A4h
.text:00417D80 var_8A0         = dword ptr -8A0h
.text:00417D80 var_89C         = dword ptr -89Ch
.text:00417D80 FileSystemNameBuffer= byte ptr -88Ch
.text:00417D80 VolumeNameBuffer= byte ptr -48Ch
.text:00417D80 var_8C          = dword ptr -8Ch
.text:00417D80 var_88          = dword ptr -88h
.text:00417D80 var_84          = dword ptr -84h
.text:00417D80 var_80          = dword ptr -80h
.text:00417D80 var_7C          = dword ptr -7Ch
.text:00417D80 var_78          = dword ptr -78h
.text:00417D80 var_74          = dword ptr -74h
.text:00417D80 var_70          = dword ptr -70h
.text:00417D80 var_6C          = dword ptr -6Ch
.text:00417D80 var_5C          = dword ptr -5Ch
.text:00417D80 var_58          = dword ptr -58h
.text:00417D80 var_54          = dword ptr -54h
.text:00417D80 var_50          = dword ptr -50h
.text:00417D80 var_4C          = dword ptr -4Ch
.text:00417D80 var_48          = dword ptr -48h
.text:00417D80 var_44          = dword ptr -44h
.text:00417D80 var_3C          = dword ptr -3Ch
.text:00417D80 var_38          = dword ptr -38h
.text:00417D80 var_34          = dword ptr -34h
.text:00417D80 lpFileName      = dword ptr  4
.text:00417D80 arg_4           = dword ptr  8
.text:00417D80
.text:00417D80                 push    ebp
.text:00417D81                 xor     eax, eax
.text:00417D83                 mov     ecx, 0Dh
.text:00417D88                 push    edi
.text:00417D89                 push    esi
.text:00417D8A                 push    ebx
.text:00417D8B                 sub     esp, 8ECh
.text:00417D91                 lea     edi, [esp+8FCh+var_5C]
.text:00417D98                 cld
.text:00417D99                 lea     edx, [esp+8FCh+var_8C]
.text:00417DA0                 rep stosd
.text:00417DA2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00417DA6                 lea     esi, [esp+8FCh+var_5C]
.text:00417DAD                 mov     edx, [esp+8FCh+lpFileName]
.text:00417DB4                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00417DB7                 call    sub_4167E0
.text:00417DBC                 test    eax, eax
.text:00417DBE                 mov     edx, 0FFFFFFFFh
.text:00417DC3                 jz      loc_418154
.text:00417DC9                 mov     edx, [esp+8FCh+var_88]
.text:00417DD0                 mov     ebp, [esp+8FCh+var_84]
.text:00417DD7                 mov     edi, [esp+8FCh+var_80]
.text:00417DDE                 mov     [esp+8FCh+var_58], edx
.text:00417DE5                 mov     ecx, [esp+8FCh+var_7C]
.text:00417DEC                 mov     ebx, [esp+8FCh+var_8C]
.text:00417DF3                 mov     [esp+8FCh+var_54], ebp
.text:00417DFA                 mov     edx, [esp+8FCh+var_78]
.text:00417E01                 mov     ebp, [esp+8FCh+var_74]
.text:00417E08                 mov     [esp+8FCh+var_50], edi
.text:00417E0F                 test    bl, 10h
.text:00417E12                 mov     edi, [esp+8FCh+var_70]
.text:00417E19                 mov     [esp+8FCh+var_4C], ecx
.text:00417E20                 mov     ecx, [esp+8FCh+var_6C]
.text:00417E27                 mov     [esp+8FCh+var_5C], ebx
.text:00417E2E                 mov     [esp+8FCh+var_48], edx
.text:00417E35                 mov     [esp+8FCh+var_44], ebp
.text:00417E3C                 mov     [esp+8FCh+var_3C], edi
.text:00417E43                 mov     [esp+8FCh+var_38], ecx
.text:00417E4A                 jnz     loc_418170
.text:00417E50                 mov     ebx, 1
.text:00417E55                 mov     [esp+8FCh+var_34], ebx
.text:00417E5C
.text:00417E5C loc_417E5C:                             ; CODE XREF: sub_417D80+406↓j
.text:00417E5C                 mov     eax, [esp+8FCh+lpFileName]
.text:00417E63                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00417E67                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:00417E6B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:00417E6E                 call    sub_419020
.text:00417E73                 mov     [esp+8FCh+lpRootPathName], eax
.text:00417E76                 call    sub_4187A0
.text:00417E7B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:00417E7F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00417E83                 mov     ebp, eax
.text:00417E85                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00417E89                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:00417E8D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00417E94                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00417E98                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00417E9C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00417EA0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00417EA8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00417EB0                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00417EB3                 call    GetVolumeInformationA
.text:00417EB8                 sub     esp, 20h
.text:00417EBB                 test    eax, eax
.text:00417EBD                 lea     edi, [esp+8FCh+var_8CC]
.text:00417EC1                 setz    bl
.text:00417EC4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00417EC7                 xor     ebp, ebp
.text:00417EC9                 movzx   edx, bl
.text:00417ECC                 dec     edx
.text:00417ECD                 xor     ebx, ebx
.text:00417ECF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00417ED3                 call    free
.text:00417ED8                 cld
.text:00417ED9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00417EDD                 mov     [esi+1Ch], ecx
.text:00417EE0                 mov     ecx, 0Dh
.text:00417EE5                 rep movsd
.text:00417EE7                 mov     edi, [esp+8FCh+var_8A0]
.text:00417EEB                 mov     edx, [esp+8FCh+var_89C]
.text:00417EEF                 mov     ecx, [esp+8FCh+var_8CC]
.text:00417EF3                 or      ebp, edi
.text:00417EF5                 mov     esi, [esp+8FCh+var_8B0]
.text:00417EF9                 mov     edi, [esp+8FCh+arg_4]
.text:00417F00                 or      edx, ebx
.text:00417F02                 mov     [edi+8], edx
.text:00417F05                 xor     edx, edx
.text:00417F07                 test    cl, 10h
.text:00417F0A                 setz    dl
.text:00417F0D                 mov     [edi+0Ch], ebp
.text:00417F10                 mov     [edi+10h], esi
.text:00417F13                 mov     dword ptr [edi+14h], 0
.text:00417F1A                 dec     edx
.text:00417F1B                 and     edx, 0FFFFC000h
.text:00417F21                 add     edx, 8000h
.text:00417F27                 or      edx, 124h
.text:00417F2D                 test    cl, 1
.text:00417F30                 movzx   eax, dx
.text:00417F33                 jnz     short loc_417F3A
.text:00417F35                 or      eax, 92h
.text:00417F3A
.text:00417F3A loc_417F3A:                             ; CODE XREF: sub_417D80+1B3↑j
.text:00417F3A                 mov     ebx, [esp+8FCh+var_8A8]
.text:00417F3E                 xor     edx, edx
.text:00417F40                 xor     ebp, ebp
.text:00417F42                 mov     edi, [esp+8FCh+var_8AC]
.text:00417F46                 mov     ecx, [esp+8FCh+arg_4]
.text:00417F4D                 mov     esi, edi
.text:00417F4F                 or      [ecx], eax
.text:00417F51                 mov     edi, ebx
.text:00417F53                 or      edi, ebp
.text:00417F55                 mov     ebp, edx
.text:00417F57                 mov     ebx, [esp+8FCh+var_8A4]
.text:00417F5B                 or      ebp, esi
.text:00417F5D                 mov     esi, [esp+8FCh+arg_4]
.text:00417F64                 mov     edx, [esp+8FCh+var_8BC]
.text:00417F68                 mov     [esi+18h], ebx
.text:00417F6B                 mov     ebx, [esp+8FCh+var_8C0]
.text:00417F6F                 mov     ecx, edx
.text:00417F71                 mov     [esi+30h], edi
.text:00417F74                 xor     edx, edx
.text:00417F76                 mov     [esi+34h], ebp
.text:00417F79                 or      ebx, edx
.text:00417F7B                 xor     esi, esi
.text:00417F7D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417F85                 or      esi, ecx
.text:00417F87                 mov     edx, ebx
.text:00417F89                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417F91                 sub     edx, 0D53E8000h
.text:00417F97                 mov     ecx, esi
.text:00417F99                 sbb     ecx, 19DB1DEh
.text:00417F9F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00417FA3                 mov     [esp+8FCh+lpRootPathName], edx
.text:00417FA6                 call    sub_429510
.text:00417FAB                 mov     edx, eax
.text:00417FAD                 mov     ecx, [esp+8FCh+arg_4]
.text:00417FB4                 shr     eax, 1Fh
.text:00417FB7                 dec     eax
.text:00417FB8                 and     edx, eax
.text:00417FBA                 mov     [ecx+38h], edx
.text:00417FBD                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00417FC0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00417FC4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00417FCC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00417FD4                 call    sub_429070
.text:00417FD9                 lea     ecx, [eax+eax*4]
.text:00417FDC                 lea     ebx, [ecx+ecx*4]
.text:00417FDF                 mov     eax, [esp+8FCh+arg_4]
.text:00417FE6                 shl     ebx, 2
.text:00417FE9                 mov     esi, ebx
.text:00417FEB                 shr     esi, 1Fh
.text:00417FEE                 dec     esi
.text:00417FEF                 and     esi, ebx
.text:00417FF1                 mov     [eax+3Ch], esi
.text:00417FF4                 mov     edx, [esp+8FCh+var_8C4]
.text:00417FF8                 xor     esi, esi
.text:00417FFA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00418002                 mov     ebx, [esp+8FCh+var_8C8]
.text:00418006                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041800E                 mov     ecx, edx
.text:00418010                 xor     edx, edx
.text:00418012                 or      ebx, edx
.text:00418014                 or      esi, ecx
.text:00418016                 mov     edx, ebx
.text:00418018                 sub     edx, 0D53E8000h
.text:0041801E                 mov     ecx, esi
.text:00418020                 sbb     ecx, 19DB1DEh
.text:00418026                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041802A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041802D                 call    sub_429510
.text:00418032                 mov     edx, eax
.text:00418034                 mov     ecx, [esp+8FCh+arg_4]
.text:0041803B                 shr     eax, 1Fh
.text:0041803E                 dec     eax
.text:0041803F                 and     edx, eax
.text:00418041                 mov     [ecx+48h], edx
.text:00418044                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00418047                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041804B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00418053                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041805B                 call    sub_429070
.text:00418060                 lea     ecx, [eax+eax*4]
.text:00418063                 lea     ebx, [ecx+ecx*4]
.text:00418066                 mov     eax, [esp+8FCh+arg_4]
.text:0041806D                 shl     ebx, 2
.text:00418070                 mov     esi, ebx
.text:00418072                 shr     esi, 1Fh
.text:00418075                 dec     esi
.text:00418076                 and     esi, ebx
.text:00418078                 mov     [eax+4Ch], esi
.text:0041807B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041807F                 xor     esi, esi
.text:00418081                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00418089                 mov     ebx, [esp+8FCh+var_8B8]
.text:0041808D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00418095                 mov     ecx, edx
.text:00418097                 xor     edx, edx
.text:00418099                 or      ebx, edx
.text:0041809B                 or      esi, ecx
.text:0041809D                 mov     edx, ebx
.text:0041809F                 sub     edx, 0D53E8000h
.text:004180A5                 mov     ecx, esi
.text:004180A7                 sbb     ecx, 19DB1DEh
.text:004180AD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004180B1                 mov     [esp+8FCh+lpRootPathName], edx
.text:004180B4                 call    sub_429510
.text:004180B9                 mov     edx, eax
.text:004180BB                 mov     ecx, [esp+8FCh+arg_4]
.text:004180C2                 shr     eax, 1Fh
.text:004180C5                 dec     eax
.text:004180C6                 and     edx, eax
.text:004180C8                 mov     [ecx+40h], edx
.text:004180CB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004180CE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004180D2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004180DA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004180E2                 call    sub_429070
.text:004180E7                 lea     ebx, [eax+eax*4]
.text:004180EA                 mov     esi, [esp+8FCh+arg_4]
.text:004180F1                 lea     edx, [ebx+ebx*4]
.text:004180F4                 shl     edx, 2
.text:004180F7                 mov     eax, edi
.text:004180F9                 mov     ecx, edx
.text:004180FB                 mov     dword ptr [esi+50h], 200h
.text:00418102                 shr     ecx, 1Fh
.text:00418105                 dec     ecx
.text:00418106                 and     ecx, edx
.text:00418108                 test    ebp, ebp
.text:0041810A                 mov     edx, ebp
.text:0041810C                 mov     [esi+44h], ecx
.text:0041810F                 js      short loc_418161
.text:00418111
.text:00418111 loc_418111:                             ; CODE XREF: sub_417D80+3E9↓j
.text:00418111                 xor     esi, esi
.text:00418113                 mov     ebp, edi
.text:00418115                 mov     ecx, eax
.text:00418117                 shrd    ecx, edx, 9
.text:0041811B                 mov     ebx, edx
.text:0041811D                 and     ebp, 1FFh
.text:00418123                 mov     eax, esi
.text:00418125                 sar     ebx, 9
.text:00418128                 or      eax, ebp
.text:0041812A                 jz      short loc_418132
.text:0041812C                 add     ecx, 1
.text:0041812F                 adc     ebx, 0
.text:00418132
.text:00418132 loc_418132:                             ; CODE XREF: sub_417D80+3AA↑j
.text:00418132                 mov     edx, [esp+8FCh+arg_4]
.text:00418139                 mov     [edx+5Ch], ebx
.text:0041813C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00418143                 mov     [edx+58h], ecx
.text:00418146                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041814A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041814D                 call    sub_416FA0
.text:00418152                 xor     edx, edx
.text:00418154
.text:00418154 loc_418154:                             ; CODE XREF: sub_417D80+43↑j
.text:00418154                 add     esp, 8ECh
.text:0041815A                 mov     eax, edx
.text:0041815C                 pop     ebx
.text:0041815D                 pop     esi
.text:0041815E                 pop     edi
.text:0041815F                 pop     ebp
.text:00418160                 retn
.text:00418161 ; ---------------------------------------------------------------------------
.text:00418161
.text:00418161 loc_418161:                             ; CODE XREF: sub_417D80+38F↑j
.text:00418161                 add     eax, 1FFh
.text:00418166                 adc     edx, 0
.text:00418169                 jmp     short loc_418111
.text:00418169 ; ---------------------------------------------------------------------------
.text:0041816B                 align 10h
.text:00418170
.text:00418170 loc_418170:                             ; CODE XREF: sub_417D80+CA↑j
.text:00418170                 mov     eax, [esp+8FCh+lpFileName]
.text:00418177                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0041817A                 call    sub_416950
.text:0041817F                 mov     [esp+8FCh+var_34], eax
.text:00418186                 jmp     loc_417E5C
.text:00418186 sub_417D80      endp
.text:00418186
.text:00418186 ; ---------------------------------------------------------------------------
.text:0041818B                 align 10h
.text:00418190 ; START OF FUNCTION CHUNK FOR sub_418300
.text:00418190
.text:00418190 loc_418190:                             ; CODE XREF: sub_418300+26↓j
.text:00418190                 cld
.text:00418191                 sub     esp, 2Ch
.text:00418194                 xor     eax, eax
.text:00418196                 mov     [esp+2Ch+var_10], ebx
.text:0041819A                 mov     ecx, 18h
.text:0041819F                 mov     ebx, [esp+2Ch+arg_0]
.text:004181A3                 mov     [esp+2Ch+var_C], esi
.text:004181A7                 mov     esi, [esp+2Ch+arg_4]
.text:004181AB                 test    ebx, ebx
.text:004181AD                 mov     [esp+2Ch+var_8], edi
.text:004181B1                 mov     edi, esi
.text:004181B3                 mov     [esp+2Ch+var_4], ebp
.text:004181B7                 rep stosd
.text:004181B9                 jz      short loc_4181C0
.text:004181BB                 cmp     byte ptr [ebx], 0
.text:004181BE                 jnz     short loc_4181D8
.text:004181C0
.text:004181C0 loc_4181C0:                             ; CODE XREF: sub_418300-147↑j
.text:004181C0                 xor     edx, edx
.text:004181C2
.text:004181C2 loc_4181C2:                             ; CODE XREF: sub_418300-111↓j
.text:004181C2                                         ; sub_418300-68↓j
.text:004181C2                 mov     ebx, [esp+2Ch+var_10]
.text:004181C6                 mov     eax, edx
.text:004181C8                 mov     esi, [esp+2Ch+var_C]
.text:004181CC                 mov     edi, [esp+2Ch+var_8]
.text:004181D0                 mov     ebp, [esp+2Ch+var_4]
.text:004181D4                 add     esp, 2Ch
.text:004181D7                 retn
.text:004181D8 ; ---------------------------------------------------------------------------
.text:004181D8
.text:004181D8 loc_4181D8:                             ; CODE XREF: sub_418300-142↑j
.text:004181D8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004181E0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004181E3                 call    sub_41AEC0
.text:004181E8                 test    eax, eax
.text:004181EA                 mov     edx, 0FFFFFFFFh
.text:004181EF                 jnz     short loc_4181C2
.text:004181F1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004181F4                 call    sub_41AD70
.text:004181F9                 mov     [esp+2Ch+lpFileName], eax
.text:004181FC                 call    sub_4187A0
.text:00418201                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00418204                 mov     ebp, eax
.text:00418206                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041820E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00418216                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041821E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00418226                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041822E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00418236                 call    CreateFileA
.text:0041823B                 sub     esp, 1Ch
.text:0041823E                 mov     ebx, eax
.text:00418240                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00418244                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00418247                 call    sub_416AD0
.text:0041824C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041824F                 mov     edi, eax
.text:00418251                 call    CloseHandle
.text:00418256                 sub     esp, 4
.text:00418259                 cmp     edi, 0FFFFFFFFh
.text:0041825C                 jz      short loc_4182BA
.text:0041825E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00418262                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00418265                 call    sub_416FA0
.text:0041826A
.text:0041826A loc_41826A:                             ; CODE XREF: sub_418300-38↓j
.text:0041826A                 mov     edx, [esi]
.text:0041826C                 and     edx, 0F000h
.text:00418272                 cmp     edx, 4000h
.text:00418278                 jz      short loc_4182AD
.text:0041827A
.text:0041827A loc_41827A:                             ; CODE XREF: sub_418300-48↓j
.text:0041827A                 cmp     edi, 0FFFFFFFFh
.text:0041827D                 jz      short loc_41829D
.text:0041827F
.text:0041827F loc_41827F:                             ; CODE XREF: sub_418300-55↓j
.text:0041827F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00418286                 call    SetErrorMode
.text:0041828B                 sub     esp, 4
.text:0041828E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00418291                 call    free
.text:00418296                 mov     edx, edi
.text:00418298                 jmp     loc_4181C2
.text:0041829D ; ---------------------------------------------------------------------------
.text:0041829D
.text:0041829D loc_41829D:                             ; CODE XREF: sub_418300-83↑j
.text:0041829D                 call    sub_41AD20
.text:004182A2                 mov     esi, eax
.text:004182A4                 call    _errno
.text:004182A9                 mov     [eax], esi
.text:004182AB                 jmp     short loc_41827F
.text:004182AD ; ---------------------------------------------------------------------------
.text:004182AD
.text:004182AD loc_4182AD:                             ; CODE XREF: sub_418300-88↑j
.text:004182AD                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:004182B0                 call    sub_416950
.text:004182B5                 mov     [esi+18h], eax
.text:004182B8                 jmp     short loc_41827A
.text:004182BA ; ---------------------------------------------------------------------------
.text:004182BA
.text:004182BA loc_4182BA:                             ; CODE XREF: sub_418300-A4↑j
.text:004182BA                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004182BE                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004182C1                 call    sub_417D80
.text:004182C6                 mov     edi, eax
.text:004182C8                 jmp     short loc_41826A
.text:004182C8 ; END OF FUNCTION CHUNK FOR sub_418300
.text:004182C8 ; ---------------------------------------------------------------------------
.text:004182CA                 align 10h
.text:004182D0
.text:004182D0 ; =============== S U B R O U T I N E =======================================
.text:004182D0
.text:004182D0
.text:004182D0 sub_4182D0      proc near               ; CODE XREF: sub_404500+18D↑p
.text:004182D0
.text:004182D0 var_C           = dword ptr -0Ch
.text:004182D0 var_8           = dword ptr -8
.text:004182D0 var_4           = dword ptr -4
.text:004182D0 arg_0           = dword ptr  4
.text:004182D0 arg_4           = dword ptr  8
.text:004182D0
.text:004182D0                 sub     esp, 0Ch
.text:004182D3                 mov     edx, [esp+0Ch+arg_4]
.text:004182D7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004182DE                 mov     [esp+0Ch+var_4], edx ; int
.text:004182E2                 mov     edx, [esp+0Ch+arg_0]
.text:004182E6                 mov     [esp+0Ch+var_8], edx ; int
.text:004182EA                 call    sub_418300
.text:004182EF                 add     esp, 0Ch
.text:004182F2                 retn
.text:004182F2 sub_4182D0      endp
.text:004182F2
.text:004182F2 ; ---------------------------------------------------------------------------
.text:004182F3                 align 10h
.text:00418300
.text:00418300 ; =============== S U B R O U T I N E =======================================
.text:00418300
.text:00418300
.text:00418300 ; int __cdecl sub_418300(LPCSTR, int, int)
.text:00418300 sub_418300      proc near               ; CODE XREF: sub_4182D0+1A↑p
.text:00418300                                         ; sub_418BD0+90↓p ...
.text:00418300
.text:00418300 lpFileName      = dword ptr -2Ch
.text:00418300 dwDesiredAccess = dword ptr -28h
.text:00418300 dwShareMode     = dword ptr -24h
.text:00418300 lpSecurityAttributes= dword ptr -20h
.text:00418300 dwCreationDisposition= dword ptr -1Ch
.text:00418300 dwFlagsAndAttributes= dword ptr -18h
.text:00418300 hTemplateFile   = dword ptr -14h
.text:00418300 var_10          = dword ptr -10h
.text:00418300 var_C           = dword ptr -0Ch
.text:00418300 var_8           = dword ptr -8
.text:00418300 var_4           = dword ptr -4
.text:00418300 arg_0           = dword ptr  4
.text:00418300 arg_4           = dword ptr  8
.text:00418300 arg_8           = dword ptr  0Ch
.text:00418300
.text:00418300 ; FUNCTION CHUNK AT .text:00418190 SIZE 0000013A BYTES
.text:00418300
.text:00418300                 sub     esp, 0Ch
.text:00418303                 mov     ecx, [esp+0Ch+arg_0]
.text:00418307                 mov     edx, [esp+0Ch+arg_4]
.text:0041830B                 mov     eax, [esp+0Ch+arg_8]
.text:0041830F                 test    ecx, ecx
.text:00418311                 jnz     short loc_418330
.text:00418313                 test    edx, edx
.text:00418315                 jz      short loc_418330
.text:00418317                 test    eax, eax
.text:00418319                 jz      short loc_418330
.text:0041831B                 mov     [esp+0Ch+arg_4], eax
.text:0041831F                 mov     [esp+0Ch+arg_0], edx
.text:00418323                 add     esp, 0Ch
.text:00418326                 jmp     loc_418190
.text:00418326 ; ---------------------------------------------------------------------------
.text:0041832B                 align 10h
.text:00418330
.text:00418330 loc_418330:                             ; CODE XREF: sub_418300+11↑j
.text:00418330                                         ; sub_418300+15↑j ...
.text:00418330                 call    _errno
.text:00418335                 mov     dword ptr [eax], 16h
.text:0041833B                 mov     eax, 0FFFFFFFFh
.text:00418340                 add     esp, 0Ch
.text:00418343                 retn
.text:00418343 sub_418300      endp
.text:00418343
.text:00418343 ; ---------------------------------------------------------------------------
.text:00418344                 align 10h
.text:00418350
.text:00418350 ; =============== S U B R O U T I N E =======================================
.text:00418350
.text:00418350 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00418350
.text:00418350 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00418350 _win32_longpath proc near               ; CODE XREF: .text:00418B14↓p
.text:00418350
.text:00418350 C               = dword ptr -278h
.text:00418350 lpFindFileData  = dword ptr -274h
.text:00418350 Destination     = byte ptr -268h
.text:00418350 var_267         = byte ptr -267h
.text:00418350 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00418350 lpFileName      = dword ptr  8
.text:00418350
.text:00418350                 push    ebp
.text:00418351                 xor     eax, eax
.text:00418353                 push    edi
.text:00418354                 push    esi
.text:00418355                 push    ebx
.text:00418356                 sub     esp, 26Ch
.text:0041835C                 mov     esi, [esp+278h+lpFileName]
.text:00418363                 lea     ebp, [esp+278h+Destination]
.text:00418367                 test    esi, esi
.text:00418369                 jz      loc_4184C7
.text:0041836F                 movsx   edx, byte ptr [esi]
.text:00418372                 mov     [esp+278h+C], edx ; C
.text:00418375                 call    isalpha
.text:0041837A                 test    eax, eax
.text:0041837C                 jz      short loc_41838F
.text:0041837E                 mov     eax, [esp+278h+lpFileName]
.text:00418385                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00418389                 jz      loc_4186CB
.text:0041838F
.text:0041838F loc_41838F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041838F                 mov     edx, [esp+278h+lpFileName]
.text:00418396                 movzx   eax, byte ptr [edx]
.text:00418399                 cmp     al, 2Fh ; '/'
.text:0041839B                 jz      loc_4185AB
.text:004183A1                 cmp     al, 5Ch ; '\'
.text:004183A3                 jz      loc_4185AB
.text:004183A9
.text:004183A9 loc_4183A9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:004183A9                                         ; _win32_longpath+2B1↓j ...
.text:004183A9                 mov     [ebp+268h+Destination], 0
.text:004183AD                 movzx   ebx, byte ptr [esi]
.text:004183B0                 test    bl, bl
.text:004183B2                 jz      loc_4184A9
.text:004183B8                 nop
.text:004183B9                 lea     esi, [esi+0]
.text:004183C0
.text:004183C0 loc_4183C0:                             ; CODE XREF: _win32_longpath+153↓j
.text:004183C0                 cmp     bl, 2Fh ; '/'
.text:004183C3                 jz      loc_418560
.text:004183C9                 cmp     bl, 5Ch ; '\'
.text:004183CC                 jz      loc_418560
.text:004183D2
.text:004183D2 loc_4183D2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004183D2                                         ; _win32_longpath+22C↓j ...
.text:004183D2                 cmp     bl, 2Eh ; '.'
.text:004183D5                 jz      loc_418500
.text:004183DB
.text:004183DB loc_4183DB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004183DB                                         ; _win32_longpath+203↓j
.text:004183DB                 test    bl, bl
.text:004183DD                 jz      loc_4184A9
.text:004183E3                 cmp     bl, 2Fh ; '/'
.text:004183E6                 jz      short loc_418402
.text:004183E8                 cmp     bl, 5Ch ; '\'
.text:004183EB                 jz      short loc_418402
.text:004183ED                 lea     esi, [esi+0]
.text:004183F0
.text:004183F0 loc_4183F0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004183F0                 inc     esi
.text:004183F1                 movzx   ebx, byte ptr [esi]
.text:004183F4                 test    bl, bl
.text:004183F6                 jz      short loc_418402
.text:004183F8                 cmp     bl, 2Fh ; '/'
.text:004183FB                 jz      short loc_418402
.text:004183FD                 cmp     bl, 5Ch ; '\'
.text:00418400                 jnz     short loc_4183F0
.text:00418402
.text:00418402 loc_418402:                             ; CODE XREF: _win32_longpath+96↑j
.text:00418402                                         ; _win32_longpath+9B↑j ...
.text:00418402                 mov     byte ptr [esi], 0
.text:00418405                 lea     edx, [esp+278h+FindFileData]
.text:0041840C                 mov     eax, [esp+278h+lpFileName]
.text:00418413                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00418417                 mov     [esp+278h+C], eax ; lpFileName
.text:0041841A                 call    FindFirstFileA
.text:0041841F                 mov     [esi], bl
.text:00418421                 sub     esp, 8
.text:00418424                 mov     edi, eax
.text:00418426                 cmp     eax, 0FFFFFFFFh
.text:00418429                 jz      loc_4184EC
.text:0041842F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00418436                 mov     ecx, ebx
.text:00418438                 nop
.text:00418439                 lea     esi, [esi+0]
.text:00418440
.text:00418440 loc_418440:                             ; CODE XREF: _win32_longpath+105↓j
.text:00418440                 mov     eax, [ebx]
.text:00418442                 add     ebx, 4
.text:00418445                 lea     edx, [eax-1010101h]
.text:0041844B                 not     eax
.text:0041844D                 and     edx, eax
.text:0041844F                 and     edx, 80808080h
.text:00418455                 jz      short loc_418440
.text:00418457                 test    edx, 8080h
.text:0041845D                 jnz     short loc_418465
.text:0041845F                 shr     edx, 10h
.text:00418462                 add     ebx, 2
.text:00418465
.text:00418465 loc_418465:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00418465                 add     dl, dl
.text:00418467                 sbb     ebx, 3
.text:0041846A                 sub     ebx, ecx
.text:0041846C                 lea     ecx, [esp+278h+Destination]
.text:00418470                 sub     ecx, ebp
.text:00418472                 add     ecx, 105h
.text:00418478                 cmp     ecx, ebx
.text:0041847A                 jle     short loc_4184D2
.text:0041847C                 mov     [esp+278h+C], ebp ; Destination
.text:0041847F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00418486                 add     ebp, ebx
.text:00418488                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:0041848C                 call    strcpy
.text:00418491                 mov     [esp+278h+C], edi ; hFindFile
.text:00418494                 call    FindClose
.text:00418499                 sub     esp, 4
.text:0041849C
.text:0041849C loc_41849C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:0041849C                 movzx   ecx, byte ptr [esi]
.text:0041849F                 test    cl, cl
.text:004184A1                 mov     bl, cl
.text:004184A3                 jnz     loc_4183C0
.text:004184A9
.text:004184A9 loc_4184A9:                             ; CODE XREF: _win32_longpath+62↑j
.text:004184A9                                         ; _win32_longpath+8D↑j
.text:004184A9                 mov     esi, [esp+278h+lpFileName]
.text:004184B0                 lea     ebp, [esp+278h+Destination]
.text:004184B4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:004184B8                 mov     [esp+278h+C], esi ; Destination
.text:004184BB                 call    strcpy
.text:004184C0                 mov     eax, [esp+278h+lpFileName]
.text:004184C7
.text:004184C7 loc_4184C7:                             ; CODE XREF: _win32_longpath+19↑j
.text:004184C7                                         ; _win32_longpath+19A↓j
.text:004184C7                 add     esp, 26Ch
.text:004184CD                 pop     ebx
.text:004184CE                 pop     esi
.text:004184CF                 pop     edi
.text:004184D0                 pop     ebp
.text:004184D1                 retn
.text:004184D2 ; ---------------------------------------------------------------------------
.text:004184D2
.text:004184D2 loc_4184D2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:004184D2                 mov     [esp+278h+C], edi ; hFindFile
.text:004184D5                 call    FindClose
.text:004184DA                 sub     esp, 4
.text:004184DD                 call    _errno
.text:004184E2                 mov     dword ptr [eax], 22h ; '"'
.text:004184E8
.text:004184E8 loc_4184E8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:004184E8                 xor     eax, eax
.text:004184EA                 jmp     short loc_4184C7
.text:004184EC ; ---------------------------------------------------------------------------
.text:004184EC
.text:004184EC loc_4184EC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:004184EC                 call    _errno
.text:004184F1                 mov     dword ptr [eax], 16h
.text:004184F7                 jmp     short loc_4184E8
.text:004184F7 ; ---------------------------------------------------------------------------
.text:004184F9                 align 10h
.text:00418500
.text:00418500 loc_418500:                             ; CODE XREF: _win32_longpath+85↑j
.text:00418500                 movzx   eax, byte ptr [esi+1]
.text:00418504                 test    al, al
.text:00418506                 jnz     short loc_418535
.text:00418508
.text:00418508 loc_418508:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00418508                                         ; _win32_longpath+1EB↓j ...
.text:00418508                 test    bl, bl
.text:0041850A                 jz      short loc_41852C
.text:0041850C                 cmp     bl, 2Fh ; '/'
.text:0041850F                 jz      short loc_41852C
.text:00418511                 cmp     bl, 5Ch ; '\'
.text:00418514                 jz      short loc_41852C
.text:00418516
.text:00418516 loc_418516:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00418516                 mov     [ebp+268h+Destination], bl
.text:00418519                 inc     esi
.text:0041851A                 inc     ebp
.text:0041851B                 movzx   ebx, byte ptr [esi]
.text:0041851E                 test    bl, bl
.text:00418520                 jz      short loc_41852C
.text:00418522                 cmp     bl, 2Fh ; '/'
.text:00418525                 jz      short loc_41852C
.text:00418527                 cmp     bl, 5Ch ; '\'
.text:0041852A                 jnz     short loc_418516
.text:0041852C
.text:0041852C loc_41852C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:0041852C                                         ; _win32_longpath+1BF↑j ...
.text:0041852C                 mov     [ebp+268h+Destination], 0
.text:00418530                 jmp     loc_41849C
.text:00418535 ; ---------------------------------------------------------------------------
.text:00418535
.text:00418535 loc_418535:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00418535                 cmp     al, 2Fh ; '/'
.text:00418537                 jz      short loc_418508
.text:00418539                 cmp     al, 5Ch ; '\'
.text:0041853B                 jz      short loc_418508
.text:0041853D                 cmp     al, 2Eh ; '.'
.text:0041853F                 jnz     loc_4183DB
.text:00418545                 movzx   eax, byte ptr [esi+2]
.text:00418549                 test    al, al
.text:0041854B                 jz      short loc_418508
.text:0041854D                 cmp     al, 2Fh ; '/'
.text:0041854F                 jz      short loc_418508
.text:00418551                 cmp     al, 5Ch ; '\'
.text:00418553                 jnz     loc_4183DB
.text:00418559                 jmp     short loc_418508
.text:00418559 ; ---------------------------------------------------------------------------
.text:0041855B                 align 10h
.text:00418560
.text:00418560 loc_418560:                             ; CODE XREF: _win32_longpath+73↑j
.text:00418560                                         ; _win32_longpath+7C↑j
.text:00418560                 mov     [ebp+268h+Destination], bl
.text:00418563                 inc     esi
.text:00418564                 inc     ebp
.text:00418565                 mov     [ebp+268h+Destination], 0
.text:00418569                 movzx   ebx, byte ptr [esi]
.text:0041856C                 test    bl, bl
.text:0041856E                 jz      loc_4183D2
.text:00418574                 cmp     bl, 2Fh ; '/'
.text:00418577                 jz      short loc_418590
.text:00418579                 cmp     bl, 5Ch ; '\'
.text:0041857C                 jnz     loc_4183D2
.text:00418582                 lea     esi, [esi+0]
.text:00418589                 lea     edi, [edi+0]
.text:00418590
.text:00418590 loc_418590:                             ; CODE XREF: _win32_longpath+227↑j
.text:00418590                                         ; _win32_longpath+24F↓j ...
.text:00418590                 inc     esi
.text:00418591                 movzx   ebx, byte ptr [esi]
.text:00418594                 test    bl, bl
.text:00418596                 jz      loc_4183D2
.text:0041859C                 cmp     bl, 2Fh ; '/'
.text:0041859F                 jz      short loc_418590
.text:004185A1                 cmp     bl, 5Ch ; '\'
.text:004185A4                 jz      short loc_418590
.text:004185A6                 jmp     loc_4183D2
.text:004185AB ; ---------------------------------------------------------------------------
.text:004185AB
.text:004185AB loc_4185AB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:004185AB                                         ; _win32_longpath+53↑j
.text:004185AB                 mov     edi, [esp+278h+lpFileName]
.text:004185B2                 movzx   edx, byte ptr [edi+1]
.text:004185B6                 cmp     dl, 2Fh ; '/'
.text:004185B9                 jz      short loc_4185C4
.text:004185BB                 cmp     dl, 5Ch ; '\'
.text:004185BE                 jnz     loc_4183A9
.text:004185C4
.text:004185C4 loc_4185C4:                             ; CODE XREF: _win32_longpath+269↑j
.text:004185C4                 mov     esi, [esp+278h+lpFileName]
.text:004185CB                 mov     [ebp+268h+Destination], al
.text:004185CE                 mov     ecx, [esp+278h+lpFileName]
.text:004185D5                 inc     ebp
.text:004185D6                 add     esi, 2
.text:004185D9                 movzx   ebx, byte ptr [ecx+1]
.text:004185DD                 mov     [ebp+268h+Destination], bl
.text:004185E0                 inc     ebp
.text:004185E1                 movzx   eax, byte ptr [ecx+2]
.text:004185E5                 test    al, al
.text:004185E7                 jz      loc_4186C3
.text:004185ED                 cmp     al, 2Fh ; '/'
.text:004185EF                 jz      loc_4186A8
.text:004185F5                 cmp     al, 5Ch ; '\'
.text:004185F7                 mov     bl, al
.text:004185F9                 jz      loc_4186A8
.text:004185FF
.text:004185FF loc_4185FF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:004185FF                                         ; _win32_longpath+376↓j
.text:004185FF                 test    bl, bl
.text:00418601                 jz      loc_4183A9
.text:00418607                 cmp     bl, 2Fh ; '/'
.text:0041860A                 jz      short loc_41862B
.text:0041860C                 cmp     bl, 5Ch ; '\'
.text:0041860F                 jz      short loc_41862B
.text:00418611
.text:00418611 loc_418611:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00418611                 mov     [ebp+268h+Destination], bl
.text:00418614                 inc     esi
.text:00418615                 inc     ebp
.text:00418616                 movzx   ebx, byte ptr [esi]
.text:00418619                 test    bl, bl
.text:0041861B                 jz      loc_4183A9
.text:00418621                 cmp     bl, 2Fh ; '/'
.text:00418624                 jz      short loc_41862B
.text:00418626                 cmp     bl, 5Ch ; '\'
.text:00418629                 jnz     short loc_418611
.text:0041862B
.text:0041862B loc_41862B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:0041862B                                         ; _win32_longpath+2BF↑j ...
.text:0041862B                 test    bl, bl
.text:0041862D                 jz      loc_4183A9
.text:00418633                 mov     [ebp+268h+Destination], bl
.text:00418636                 inc     esi
.text:00418637                 inc     ebp
.text:00418638                 movzx   ebx, byte ptr [esi]
.text:0041863B                 test    bl, bl
.text:0041863D                 jz      loc_4183A9
.text:00418643                 cmp     bl, 2Fh ; '/'
.text:00418646                 jz      short loc_418690
.text:00418648                 cmp     bl, 5Ch ; '\'
.text:0041864B                 jz      short loc_418690
.text:0041864D
.text:0041864D loc_41864D:                             ; CODE XREF: _win32_longpath+356↓j
.text:0041864D                 test    bl, bl
.text:0041864F                 jz      loc_4183A9
.text:00418655                 cmp     bl, 2Fh ; '/'
.text:00418658                 jz      loc_4183A9
.text:0041865E                 cmp     bl, 5Ch ; '\'
.text:00418661                 jz      loc_4183A9
.text:00418667
.text:00418667 loc_418667:                             ; CODE XREF: _win32_longpath+333↓j
.text:00418667                 mov     [ebp+268h+Destination], bl
.text:0041866A                 inc     esi
.text:0041866B                 inc     ebp
.text:0041866C                 movzx   ebx, byte ptr [esi]
.text:0041866F                 test    bl, bl
.text:00418671                 jz      loc_4183A9
.text:00418677                 cmp     bl, 2Fh ; '/'
.text:0041867A                 jz      loc_4183A9
.text:00418680                 cmp     bl, 5Ch ; '\'
.text:00418683                 jnz     short loc_418667
.text:00418685                 jmp     loc_4183A9
.text:00418685 ; ---------------------------------------------------------------------------
.text:0041868A                 align 10h
.text:00418690
.text:00418690 loc_418690:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00418690                                         ; _win32_longpath+2FB↑j ...
.text:00418690                 inc     esi
.text:00418691                 movzx   ebx, byte ptr [esi]
.text:00418694                 test    bl, bl
.text:00418696                 jz      loc_4183A9
.text:0041869C                 cmp     bl, 2Fh ; '/'
.text:0041869F                 jz      short loc_418690
.text:004186A1                 cmp     bl, 5Ch ; '\'
.text:004186A4                 jz      short loc_418690
.text:004186A6                 jmp     short loc_41864D
.text:004186A8 ; ---------------------------------------------------------------------------
.text:004186A8
.text:004186A8 loc_4186A8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:004186A8                                         ; _win32_longpath+2A9↑j ...
.text:004186A8                 inc     esi
.text:004186A9                 movzx   ebx, byte ptr [esi]
.text:004186AC                 test    bl, bl
.text:004186AE                 jz      loc_4183A9
.text:004186B4                 cmp     bl, 2Fh ; '/'
.text:004186B7                 jz      short loc_4186A8
.text:004186B9                 cmp     bl, 5Ch ; '\'
.text:004186BC                 jz      short loc_4186A8
.text:004186BE                 jmp     loc_4185FF
.text:004186C3 ; ---------------------------------------------------------------------------
.text:004186C3
.text:004186C3 loc_4186C3:                             ; CODE XREF: _win32_longpath+297↑j
.text:004186C3                 movzx   ebx, byte ptr [esi]
.text:004186C6                 jmp     loc_4185FF
.text:004186CB ; ---------------------------------------------------------------------------
.text:004186CB
.text:004186CB loc_4186CB:                             ; CODE XREF: _win32_longpath+39↑j
.text:004186CB                 movzx   ecx, byte ptr [eax]
.text:004186CE                 mov     esi, eax
.text:004186D0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:004186D5                 add     esi, 2
.text:004186D8                 lea     ebp, [esp+12h]
.text:004186DC                 mov     [esp+278h+Destination], cl
.text:004186E0                 jmp     loc_4183A9
.text:004186E0 _win32_longpath endp
.text:004186E0
.text:004186E0 ; ---------------------------------------------------------------------------
.text:004186E5                 align 10h
.text:004186F0                 sub     esp, 0Ch
.text:004186F3                 mov     edx, [esp+10h]
.text:004186F7                 mov     dword ptr [esp+4], 0
.text:004186FF                 mov     [esp], edx
.text:00418702                 call    sub_41AEC0
.text:00418707                 inc     eax
.text:00418708                 setnz   dl
.text:0041870B                 add     esp, 0Ch
.text:0041870E                 movzx   eax, dl
.text:00418711                 retn
.text:00418711 ; ---------------------------------------------------------------------------
.text:00418712                 align 10h
.text:00418720
.text:00418720 ; =============== S U B R O U T I N E =======================================
.text:00418720
.text:00418720
.text:00418720 sub_418720      proc near               ; CODE XREF: sub_418F30+B4↓p
.text:00418720                                         ; sub_41AD90+AA↓p
.text:00418720
.text:00418720 arg_0           = dword ptr  4
.text:00418720
.text:00418720                 mov     ecx, [esp+arg_0]
.text:00418724                 mov     edx, ecx
.text:00418726                 movzx   eax, byte ptr [ecx]
.text:00418729                 test    al, al
.text:0041872B                 jz      short loc_41873C
.text:0041872D                 lea     esi, [esi+0]
.text:00418730
.text:00418730 loc_418730:                             ; CODE XREF: sub_418720+1A↓j
.text:00418730                 cmp     al, 5Ch ; '\'
.text:00418732                 jz      short loc_418740
.text:00418734
.text:00418734 loc_418734:                             ; CODE XREF: sub_418720+23↓j
.text:00418734                 inc     edx
.text:00418735                 movzx   eax, byte ptr [edx]
.text:00418738                 test    al, al
.text:0041873A                 jnz     short loc_418730
.text:0041873C
.text:0041873C loc_41873C:                             ; CODE XREF: sub_418720+B↑j
.text:0041873C                 mov     eax, ecx
.text:0041873E                 retn
.text:0041873E ; ---------------------------------------------------------------------------
.text:0041873F                 align 10h
.text:00418740
.text:00418740 loc_418740:                             ; CODE XREF: sub_418720+12↑j
.text:00418740                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418743                 jmp     short loc_418734
.text:00418743 sub_418720      endp
.text:00418743
.text:00418743 ; ---------------------------------------------------------------------------
.text:00418745                 align 10h
.text:00418750                 push    ebx
.text:00418751                 sub     esp, 8
.text:00418754                 mov     ebx, [esp+14h]
.text:00418758                 mov     edx, [esp+10h]
.text:0041875C                 mov     [esp], ebx
.text:0041875F                 mov     [esp+4], edx
.text:00418763                 call    strcpy
.text:00418768                 movzx   eax, byte ptr [ebx]
.text:0041876B                 mov     edx, ebx
.text:0041876D                 test    al, al
.text:0041876F                 jz      short loc_41878C
.text:00418771                 jmp     short loc_418780
.text:00418771 ; ---------------------------------------------------------------------------
.text:00418773                 align 10h
.text:00418780
.text:00418780 loc_418780:                             ; CODE XREF: .text:00418771↑j
.text:00418780                                         ; .text:0041878A↓j
.text:00418780                 cmp     al, 5Ch ; '\'
.text:00418782                 jz      short loc_418793
.text:00418784
.text:00418784 loc_418784:                             ; CODE XREF: .text:00418796↓j
.text:00418784                 inc     edx
.text:00418785                 movzx   eax, byte ptr [edx]
.text:00418788                 test    al, al
.text:0041878A                 jnz     short loc_418780
.text:0041878C
.text:0041878C loc_41878C:                             ; CODE XREF: .text:0041876F↑j
.text:0041878C                 add     esp, 8
.text:0041878F                 xor     eax, eax
.text:00418791                 pop     ebx
.text:00418792                 retn
.text:00418793 ; ---------------------------------------------------------------------------
.text:00418793
.text:00418793 loc_418793:                             ; CODE XREF: .text:00418782↑j
.text:00418793                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418796                 jmp     short loc_418784
.text:00418796 ; ---------------------------------------------------------------------------
.text:00418798                 align 10h
.text:004187A0
.text:004187A0 ; =============== S U B R O U T I N E =======================================
.text:004187A0
.text:004187A0
.text:004187A0 sub_4187A0      proc near               ; CODE XREF: sub_416FA0+16↑p
.text:004187A0                                         ; sub_4174A0+1F↑p ...
.text:004187A0
.text:004187A0 arg_0           = dword ptr  4
.text:004187A0
.text:004187A0                 mov     ecx, [esp+arg_0]
.text:004187A4                 mov     edx, ecx
.text:004187A6                 movzx   eax, byte ptr [ecx]
.text:004187A9                 test    al, al
.text:004187AB                 jz      short loc_4187BC
.text:004187AD                 lea     esi, [esi+0]
.text:004187B0
.text:004187B0 loc_4187B0:                             ; CODE XREF: sub_4187A0+1A↓j
.text:004187B0                 cmp     al, 2Fh ; '/'
.text:004187B2                 jz      short loc_4187C0
.text:004187B4
.text:004187B4 loc_4187B4:                             ; CODE XREF: sub_4187A0+23↓j
.text:004187B4                 inc     edx
.text:004187B5                 movzx   eax, byte ptr [edx]
.text:004187B8                 test    al, al
.text:004187BA                 jnz     short loc_4187B0
.text:004187BC
.text:004187BC loc_4187BC:                             ; CODE XREF: sub_4187A0+B↑j
.text:004187BC                 mov     eax, ecx
.text:004187BE                 retn
.text:004187BE ; ---------------------------------------------------------------------------
.text:004187BF                 align 10h
.text:004187C0
.text:004187C0 loc_4187C0:                             ; CODE XREF: sub_4187A0+12↑j
.text:004187C0                 mov     byte ptr [edx], 5Ch ; '\'
.text:004187C3                 jmp     short loc_4187B4
.text:004187C3 sub_4187A0      endp
.text:004187C3
.text:004187C3 ; ---------------------------------------------------------------------------
.text:004187C5                 align 10h
.text:004187D0                 push    ebx
.text:004187D1                 sub     esp, 8
.text:004187D4                 mov     ebx, [esp+14h]
.text:004187D8                 mov     edx, [esp+10h]
.text:004187DC                 mov     [esp], ebx
.text:004187DF                 mov     [esp+4], edx
.text:004187E3                 call    strcpy
.text:004187E8                 movzx   eax, byte ptr [ebx]
.text:004187EB                 mov     edx, ebx
.text:004187ED                 test    al, al
.text:004187EF                 jz      short loc_41880C
.text:004187F1                 jmp     short loc_418800
.text:004187F1 ; ---------------------------------------------------------------------------
.text:004187F3                 align 10h
.text:00418800
.text:00418800 loc_418800:                             ; CODE XREF: .text:004187F1↑j
.text:00418800                                         ; .text:0041880A↓j
.text:00418800                 cmp     al, 2Fh ; '/'
.text:00418802                 jz      short loc_418813
.text:00418804
.text:00418804 loc_418804:                             ; CODE XREF: .text:00418816↓j
.text:00418804                 inc     edx
.text:00418805                 movzx   eax, byte ptr [edx]
.text:00418808                 test    al, al
.text:0041880A                 jnz     short loc_418800
.text:0041880C
.text:0041880C loc_41880C:                             ; CODE XREF: .text:004187EF↑j
.text:0041880C                 add     esp, 8
.text:0041880F                 xor     eax, eax
.text:00418811                 pop     ebx
.text:00418812                 retn
.text:00418813 ; ---------------------------------------------------------------------------
.text:00418813
.text:00418813 loc_418813:                             ; CODE XREF: .text:00418802↑j
.text:00418813                 mov     byte ptr [edx], 5Ch ; '\'
.text:00418816                 jmp     short loc_418804
.text:00418816 ; ---------------------------------------------------------------------------
.text:00418818                 align 10h
.text:00418820                 push    ebx
.text:00418821                 sub     esp, 8
.text:00418824                 mov     ebx, [esp+14h]
.text:00418828                 mov     edx, [esp+10h]
.text:0041882C                 mov     [esp+4], ebx
.text:00418830                 mov     [esp], edx
.text:00418833                 call    sub_41AD40
.text:00418838                 movzx   eax, byte ptr [ebx]
.text:0041883B                 mov     edx, ebx
.text:0041883D                 test    al, al
.text:0041883F                 jz      short loc_41885C
.text:00418841                 jmp     short loc_418850
.text:00418841 ; ---------------------------------------------------------------------------
.text:00418843                 align 10h
.text:00418850
.text:00418850 loc_418850:                             ; CODE XREF: .text:00418841↑j
.text:00418850                                         ; .text:0041885A↓j
.text:00418850                 cmp     al, 2Fh ; '/'
.text:00418852                 jz      short loc_418863
.text:00418854
.text:00418854 loc_418854:                             ; CODE XREF: .text:00418866↓j
.text:00418854                 inc     edx
.text:00418855                 movzx   eax, byte ptr [edx]
.text:00418858                 test    al, al
.text:0041885A                 jnz     short loc_418850
.text:0041885C
.text:0041885C loc_41885C:                             ; CODE XREF: .text:0041883F↑j
.text:0041885C                 add     esp, 8
.text:0041885F                 xor     eax, eax
.text:00418861                 pop     ebx
.text:00418862                 retn
.text:00418863 ; ---------------------------------------------------------------------------
.text:00418863
.text:00418863 loc_418863:                             ; CODE XREF: .text:00418852↑j
.text:00418863                 mov     byte ptr [edx], 5Ch ; '\'
.text:00418866                 jmp     short loc_418854
.text:00418866 ; ---------------------------------------------------------------------------
.text:00418868                 align 10h
.text:00418870                 push    ebx
.text:00418871                 sub     esp, 8
.text:00418874                 mov     ebx, [esp+14h]
.text:00418878                 mov     edx, [esp+10h]
.text:0041887C                 mov     [esp], ebx
.text:0041887F                 mov     [esp+4], edx
.text:00418883                 call    sub_41AD40
.text:00418888                 movzx   eax, byte ptr [ebx]
.text:0041888B                 mov     edx, ebx
.text:0041888D                 test    al, al
.text:0041888F                 jz      short loc_4188AC
.text:00418891                 jmp     short loc_4188A0
.text:00418891 ; ---------------------------------------------------------------------------
.text:00418893                 align 10h
.text:004188A0
.text:004188A0 loc_4188A0:                             ; CODE XREF: .text:00418891↑j
.text:004188A0                                         ; .text:004188AA↓j
.text:004188A0                 cmp     al, 5Ch ; '\'
.text:004188A2                 jz      short loc_4188B1
.text:004188A4
.text:004188A4 loc_4188A4:                             ; CODE XREF: .text:004188B4↓j
.text:004188A4                 inc     edx
.text:004188A5                 movzx   eax, byte ptr [edx]
.text:004188A8                 test    al, al
.text:004188AA                 jnz     short loc_4188A0
.text:004188AC
.text:004188AC loc_4188AC:                             ; CODE XREF: .text:0041888F↑j
.text:004188AC                 add     esp, 8
.text:004188AF                 pop     ebx
.text:004188B0                 retn
.text:004188B1 ; ---------------------------------------------------------------------------
.text:004188B1
.text:004188B1 loc_4188B1:                             ; CODE XREF: .text:004188A2↑j
.text:004188B1                 mov     byte ptr [edx], 2Fh ; '/'
.text:004188B4                 jmp     short loc_4188A4
.text:004188B4 ; ---------------------------------------------------------------------------
.text:004188B6                 align 10h
.text:004188C0
.text:004188C0 ; =============== S U B R O U T I N E =======================================
.text:004188C0
.text:004188C0
.text:004188C0 ; int __cdecl sub_4188C0(LPSTR)
.text:004188C0 sub_4188C0      proc near               ; CODE XREF: .text:0041894E↓p
.text:004188C0                                         ; .text:0041898E↓p ...
.text:004188C0
.text:004188C0 hModule         = dword ptr -1Ch
.text:004188C0 lpFilename      = dword ptr -18h
.text:004188C0 nSize           = dword ptr -14h
.text:004188C0 arg_0           = dword ptr  4
.text:004188C0
.text:004188C0                 push    esi
.text:004188C1                 push    ebx
.text:004188C2                 sub     esp, 14h
.text:004188C5                 mov     esi, [esp+1Ch+arg_0]
.text:004188C9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:004188D1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:004188D8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:004188DC                 call    GetModuleFileNameA
.text:004188E1                 sub     esp, 0Ch
.text:004188E4                 test    eax, eax
.text:004188E6                 jz      short loc_418928
.text:004188E8                 cmp     eax, 104h
.text:004188ED                 jg      short loc_418919
.text:004188EF
.text:004188EF loc_4188EF:                             ; CODE XREF: sub_4188C0+66↓j
.text:004188EF                                         ; sub_4188C0+78↓j
.text:004188EF                 movzx   eax, byte ptr [esi]
.text:004188F2                 mov     edx, esi
.text:004188F4                 test    al, al
.text:004188F6                 jz      short loc_41890C
.text:004188F8                 nop
.text:004188F9                 lea     esi, [esi+0]
.text:00418900
.text:00418900 loc_418900:                             ; CODE XREF: sub_4188C0+4A↓j
.text:00418900                 cmp     al, 5Ch ; '\'
.text:00418902                 jz      short loc_418914
.text:00418904
.text:00418904 loc_418904:                             ; CODE XREF: sub_4188C0+57↓j
.text:00418904                 inc     edx
.text:00418905                 movzx   eax, byte ptr [edx]
.text:00418908                 test    al, al
.text:0041890A                 jnz     short loc_418900
.text:0041890C
.text:0041890C loc_41890C:                             ; CODE XREF: sub_4188C0+36↑j
.text:0041890C                 add     esp, 14h
.text:0041890F                 mov     eax, esi
.text:00418911                 pop     ebx
.text:00418912                 pop     esi
.text:00418913                 retn
.text:00418914 ; ---------------------------------------------------------------------------
.text:00418914
.text:00418914 loc_418914:                             ; CODE XREF: sub_4188C0+42↑j
.text:00418914                 mov     byte ptr [edx], 2Fh ; '/'
.text:00418917                 jmp     short loc_418904
.text:00418919 ; ---------------------------------------------------------------------------
.text:00418919
.text:00418919 loc_418919:                             ; CODE XREF: sub_4188C0+2D↑j
.text:00418919                 call    _errno
.text:0041891E                 mov     dword ptr [eax], 26h ; '&'
.text:00418924                 xor     esi, esi
.text:00418926                 jmp     short loc_4188EF
.text:00418928 ; ---------------------------------------------------------------------------
.text:00418928
.text:00418928 loc_418928:                             ; CODE XREF: sub_4188C0+26↑j
.text:00418928                 call    sub_41AD20
.text:0041892D                 mov     ebx, eax
.text:0041892F                 xor     esi, esi
.text:00418931                 call    _errno
.text:00418936                 mov     [eax], ebx
.text:00418938                 jmp     short loc_4188EF
.text:00418938 sub_4188C0      endp
.text:00418938
.text:00418938 ; ---------------------------------------------------------------------------
.text:0041893A                 align 10h
.text:00418940                 sub     esp, 0Ch
.text:00418943                 mov     [esp+8], ebx
.text:00418947                 mov     ebx, [esp+10h]
.text:0041894B                 mov     [esp], ebx
.text:0041894E                 call    sub_4188C0
.text:00418953                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041895B                 mov     [esp], ebx
.text:0041895E                 call    strrchr
.text:00418963                 test    eax, eax
.text:00418965                 jz      short loc_41896A
.text:00418967                 lea     ebx, [eax+1]
.text:0041896A
.text:0041896A loc_41896A:                             ; CODE XREF: .text:00418965↑j
.text:0041896A                 mov     eax, ebx
.text:0041896C                 mov     ebx, [esp+8]
.text:00418970                 add     esp, 0Ch
.text:00418973                 retn
.text:00418973 ; ---------------------------------------------------------------------------
.text:00418974                 align 10h
.text:00418980                 sub     esp, 0Ch
.text:00418983                 mov     [esp+8], ebx
.text:00418987                 mov     ebx, [esp+10h]
.text:0041898B                 mov     [esp], ebx
.text:0041898E                 call    sub_4188C0
.text:00418993                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041899B                 mov     [esp], ebx
.text:0041899E                 call    strrchr
.text:004189A3                 test    eax, eax
.text:004189A5                 jz      short loc_4189AA
.text:004189A7                 mov     byte ptr [eax], 0
.text:004189AA
.text:004189AA loc_4189AA:                             ; CODE XREF: .text:004189A5↑j
.text:004189AA                 mov     eax, ebx
.text:004189AC                 mov     ebx, [esp+8]
.text:004189B0                 add     esp, 0Ch
.text:004189B3                 retn
.text:004189B3 ; ---------------------------------------------------------------------------
.text:004189B4                 align 10h
.text:004189C0                 sub     esp, 0Ch
.text:004189C3                 mov     [esp+8], ebx
.text:004189C7                 mov     ebx, [esp+10h]
.text:004189CB                 mov     [esp], ebx
.text:004189CE                 call    sub_4188C0
.text:004189D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004189DB                 mov     [esp], ebx
.text:004189DE                 call    strrchr
.text:004189E3                 test    eax, eax
.text:004189E5                 jz      short loc_4189EA
.text:004189E7                 mov     byte ptr [eax], 0
.text:004189EA
.text:004189EA loc_4189EA:                             ; CODE XREF: .text:004189E5↑j
.text:004189EA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004189F2                 mov     [esp], ebx
.text:004189F5                 call    strrchr
.text:004189FA                 test    eax, eax
.text:004189FC                 jz      short loc_418A01
.text:004189FE                 mov     byte ptr [eax], 0
.text:00418A01
.text:00418A01 loc_418A01:                             ; CODE XREF: .text:004189FC↑j
.text:00418A01                 mov     eax, ebx
.text:00418A03                 mov     ebx, [esp+8]
.text:00418A07                 add     esp, 0Ch
.text:00418A0A                 retn
.text:00418A0A ; ---------------------------------------------------------------------------
.text:00418A0B                 align 10h
.text:00418A10                 sub     esp, 1Ch
.text:00418A13                 mov     edx, [esp+20h]
.text:00418A17                 mov     [esp+10h], ebx
.text:00418A1B                 xor     ebx, ebx
.text:00418A1D                 mov     [esp+14h], esi
.text:00418A21                 mov     [esp+18h], edi
.text:00418A25                 mov     [esp], edx
.text:00418A28                 call    sub_41AD70
.text:00418A2D                 mov     edx, [esp+24h]
.text:00418A31                 mov     edi, eax
.text:00418A33                 mov     [esp], edx
.text:00418A36                 call    sub_41AD70
.text:00418A3B                 mov     [esp+4], eax
.text:00418A3F                 mov     esi, eax
.text:00418A41                 mov     [esp], edi
.text:00418A44                 call    _stricmp_0
.text:00418A49                 mov     [esp], edi
.text:00418A4C                 test    eax, eax
.text:00418A4E                 setz    bl
.text:00418A51                 call    free
.text:00418A56                 mov     [esp], esi
.text:00418A59                 call    free
.text:00418A5E                 mov     eax, ebx
.text:00418A60                 mov     esi, [esp+14h]
.text:00418A64                 mov     ebx, [esp+10h]
.text:00418A68                 mov     edi, [esp+18h]
.text:00418A6C                 add     esp, 1Ch
.text:00418A6F                 retn
.text:00418A70 ; ---------------------------------------------------------------------------
.text:00418A70                 xor     eax, eax
.text:00418A72                 retn
.text:00418A72 ; ---------------------------------------------------------------------------
.text:00418A73 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00418AA7↓o
.text:00418A80 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00418AB6↓o
.text:00418A90 ; ---------------------------------------------------------------------------
.text:00418A90                 sub     esp, 1Ch
.text:00418A93                 mov     [esp+10h], ebx
.text:00418A97                 mov     ebx, [esp+20h]
.text:00418A9B                 mov     [esp+18h], edi
.text:00418A9F                 mov     edi, [esp+24h]
.text:00418AA3                 mov     [esp+14h], esi
.text:00418AA7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:00418AAE                 call    GetModuleHandleA
.text:00418AB3                 sub     esp, 4
.text:00418AB6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:00418ABE                 mov     [esp], eax
.text:00418AC1                 call    GetProcAddress
.text:00418AC6                 sub     esp, 8
.text:00418AC9                 test    eax, eax
.text:00418ACB                 jz      short loc_418AE3
.text:00418ACD                 mov     dword ptr [esp+8], 104h
.text:00418AD5                 mov     [esp+4], ebx
.text:00418AD9                 mov     [esp], edi
.text:00418ADC                 call    eax
.text:00418ADE                 sub     esp, 0Ch
.text:00418AE1                 mov     esi, eax
.text:00418AE3
.text:00418AE3 loc_418AE3:                             ; CODE XREF: .text:00418ACB↑j
.text:00418AE3                 test    esi, esi
.text:00418AE5                 jz      short loc_418B00
.text:00418AE7
.text:00418AE7 loc_418AE7:                             ; CODE XREF: .text:00418B1B↓j
.text:00418AE7                 mov     eax, ebx
.text:00418AE9                 mov     esi, [esp+14h]
.text:00418AED                 mov     ebx, [esp+10h]
.text:00418AF1                 mov     edi, [esp+18h]
.text:00418AF5                 add     esp, 1Ch
.text:00418AF8                 retn
.text:00418AF8 ; ---------------------------------------------------------------------------
.text:00418AF9                 align 10h
.text:00418B00
.text:00418B00 loc_418B00:                             ; CODE XREF: .text:00418AE5↑j
.text:00418B00                 call    sub_41B800
.text:00418B05                 mov     [esp], ebx
.text:00418B08                 mov     [esp+4], edi
.text:00418B0C                 call    strcpy
.text:00418B11                 mov     [esp], ebx
.text:00418B14                 call    _win32_longpath
.text:00418B19                 mov     ebx, eax
.text:00418B1B                 jmp     short loc_418AE7
.text:00418B1B ; ---------------------------------------------------------------------------
.text:00418B1D                 align 10h
.text:00418B20                 sub     esp, 1Ch
.text:00418B23                 mov     [esp+18h], edi
.text:00418B27                 mov     edi, [esp+20h]
.text:00418B2B                 mov     [esp+10h], ebx
.text:00418B2F                 mov     [esp+14h], esi
.text:00418B33                 mov     dword ptr [esp+8], 0
.text:00418B3B                 mov     dword ptr [esp+4], 0
.text:00418B43                 mov     [esp], edi
.text:00418B46                 call    GetShortPathNameA
.text:00418B4B                 sub     esp, 0Ch
.text:00418B4E                 mov     ebx, eax
.text:00418B50                 test    eax, eax
.text:00418B52                 jz      short loc_418BA0
.text:00418B54                 lea     edx, [eax+1]
.text:00418B57                 mov     [esp], edx
.text:00418B5A                 call    malloc
.text:00418B5F                 test    eax, eax
.text:00418B61                 mov     esi, eax
.text:00418B63                 jz      short loc_418BA0
.text:00418B65                 mov     [esp+8], ebx
.text:00418B69                 mov     [esp+4], eax
.text:00418B6D                 mov     [esp], edi
.text:00418B70                 call    GetShortPathNameA
.text:00418B75                 sub     esp, 0Ch
.text:00418B78                 mov     edx, esi
.text:00418B7A                 test    eax, eax
.text:00418B7C                 jz      short loc_418B92
.text:00418B7E                 mov     esi, esi
.text:00418B80
.text:00418B80 loc_418B80:                             ; CODE XREF: .text:00418BB0↓j
.text:00418B80                 mov     ebx, [esp+10h]
.text:00418B84                 mov     eax, edx
.text:00418B86                 mov     esi, [esp+14h]
.text:00418B8A                 mov     edi, [esp+18h]
.text:00418B8E                 add     esp, 1Ch
.text:00418B91                 retn
.text:00418B92 ; ---------------------------------------------------------------------------
.text:00418B92
.text:00418B92 loc_418B92:                             ; CODE XREF: .text:00418B7C↑j
.text:00418B92                 mov     [esp], esi
.text:00418B95                 call    free
.text:00418B9A                 lea     esi, [esi+0]
.text:00418BA0
.text:00418BA0 loc_418BA0:                             ; CODE XREF: .text:00418B52↑j
.text:00418BA0                                         ; .text:00418B63↑j
.text:00418BA0                 call    sub_41AD20
.text:00418BA5                 mov     esi, eax
.text:00418BA7                 call    _errno
.text:00418BAC                 mov     [eax], esi
.text:00418BAE                 mov     edx, edi
.text:00418BB0                 jmp     short loc_418B80
.text:00418BB0 ; ---------------------------------------------------------------------------
.text:00418BB2                 align 10h
.text:00418BC0
.text:00418BC0 ; =============== S U B R O U T I N E =======================================
.text:00418BC0
.text:00418BC0
.text:00418BC0 sub_418BC0      proc near               ; DATA XREF: sub_418BD0+186↓o
.text:00418BC0                 sub     al, [eax]
.text:00418BC2                 lea     esi, [esi+0]
.text:00418BC9                 lea     edi, [edi+0]
.text:00418BC9 sub_418BC0      endp
.text:00418BC9
.text:00418BD0
.text:00418BD0 ; =============== S U B R O U T I N E =======================================
.text:00418BD0
.text:00418BD0
.text:00418BD0 sub_418BD0      proc near               ; CODE XREF: sub_403C30+15E↑p
.text:00418BD0
.text:00418BD0 hFindFile       = dword ptr -2DCh
.text:00418BD0 lpFindFileData  = dword ptr -2D8h
.text:00418BD0 Count           = dword ptr -2D4h
.text:00418BD0 Destination     = byte ptr -2CCh
.text:00418BD0 var_1BC         = dword ptr -1BCh
.text:00418BD0 var_1B4         = dword ptr -1B4h
.text:00418BD0 var_1B0         = dword ptr -1B0h
.text:00418BD0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00418BD0 arg_0           = dword ptr  4
.text:00418BD0
.text:00418BD0                 push    ebp
.text:00418BD1                 push    edi
.text:00418BD2                 push    esi
.text:00418BD3                 push    ebx
.text:00418BD4                 sub     esp, 2CCh
.text:00418BDA                 mov     ebp, [esp+2DCh+arg_0]
.text:00418BE1                 test    ebp, ebp
.text:00418BE3                 mov     ebx, [ebp+4]
.text:00418BE6                 jz      loc_418D9D
.text:00418BEC                 mov     edx, [ebp+0]
.text:00418BEF                 cmp     edx, 0FFFFFFFFh
.text:00418BF2                 jz      loc_418D27
.text:00418BF8                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:00418BFB                 lea     ecx, [esp+2DCh+FindFileData]
.text:00418C02                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:00418C06                 call    FindNextFileA
.text:00418C0B                 sub     esp, 8
.text:00418C0E                 test    eax, eax
.text:00418C10                 jz      loc_418D1B
.text:00418C16
.text:00418C16 loc_418C16:                             ; CODE XREF: sub_418BD0+1BC↓j
.text:00418C16                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418C1E                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:00418C25                 mov     esi, [ebx]
.text:00418C27                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:00418C2B                 lea     esi, [ebx+14h]
.text:00418C2E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418C31                 call    strncpy
.text:00418C36                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418C3E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00418C42                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418C45                 call    strncat
.text:00418C4A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:00418C4E                 lea     edx, [esp+2DCh+var_1BC]
.text:00418C55                 mov     [esp+2DCh+Count], edx ; int
.text:00418C59                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00418C60                 call    sub_418300
.text:00418C65                 test    eax, eax
.text:00418C67                 jnz     loc_418D09
.text:00418C6D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00418C74                 and     ecx, 0F000h
.text:00418C7A                 shr     ecx, 0Ch
.text:00418C7D                 mov     [ebx+12h], cl
.text:00418C80                 mov     ecx, edi
.text:00418C82                 lea     esi, [esi+0]
.text:00418C89                 lea     edi, [edi+0]
.text:00418C90
.text:00418C90 loc_418C90:                             ; CODE XREF: sub_418BD0+D5↓j
.text:00418C90                 mov     eax, [ecx]
.text:00418C92                 add     ecx, 4
.text:00418C95                 lea     edx, [eax-1010101h]
.text:00418C9B                 not     eax
.text:00418C9D                 and     edx, eax
.text:00418C9F                 and     edx, 80808080h
.text:00418CA5                 jz      short loc_418C90
.text:00418CA7                 test    edx, 8080h
.text:00418CAD                 jnz     short loc_418CB5
.text:00418CAF                 shr     edx, 10h
.text:00418CB2                 add     ecx, 2
.text:00418CB5
.text:00418CB5 loc_418CB5:                             ; CODE XREF: sub_418BD0+DD↑j
.text:00418CB5                 mov     word ptr [ebx+10h], 110h
.text:00418CBB                 add     dl, dl
.text:00418CBD                 sbb     ecx, 3
.text:00418CC0                 sub     ecx, edi
.text:00418CC2                 mov     [ebx+13h], cl
.text:00418CC5                 mov     edx, [esp+2DCh+var_1B4]
.text:00418CCC                 mov     ecx, [esp+2DCh+var_1B0]
.text:00418CD3                 mov     [ebx+8], edx
.text:00418CD6                 mov     [ebx+0Ch], ecx
.text:00418CD9                 mov     [esp+2DCh+Count], 104h ; Count
.text:00418CE1                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00418CE5                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418CE8                 call    strncpy
.text:00418CED                 inc     dword ptr [ebp+14h]
.text:00418CF0                 call    _errno
.text:00418CF5                 mov     dword ptr [eax], 0
.text:00418CFB                 lea     eax, [ebx+8]
.text:00418CFE
.text:00418CFE loc_418CFE:                             ; CODE XREF: sub_418BD0+149↓j
.text:00418CFE                 add     esp, 2CCh
.text:00418D04                 pop     ebx
.text:00418D05                 pop     esi
.text:00418D06                 pop     edi
.text:00418D07                 pop     ebp
.text:00418D08                 retn
.text:00418D09 ; ---------------------------------------------------------------------------
.text:00418D09
.text:00418D09 loc_418D09:                             ; CODE XREF: sub_418BD0+97↑j
.text:00418D09                                         ; sub_418BD0+153↓j ...
.text:00418D09                 call    sub_41AD20
.text:00418D0E                 mov     ebp, eax
.text:00418D10                 call    _errno
.text:00418D15                 mov     [eax], ebp
.text:00418D17
.text:00418D17 loc_418D17:                             ; CODE XREF: sub_418BD0+155↓j
.text:00418D17                                         ; sub_418BD0+1D8↓j
.text:00418D17                 xor     eax, eax
.text:00418D19                 jmp     short loc_418CFE
.text:00418D1B ; ---------------------------------------------------------------------------
.text:00418D1B
.text:00418D1B loc_418D1B:                             ; CODE XREF: sub_418BD0+40↑j
.text:00418D1B                 call    GetLastError
.text:00418D20                 cmp     eax, 12h
.text:00418D23                 jnz     short loc_418D09
.text:00418D25                 jmp     short loc_418D17
.text:00418D27 ; ---------------------------------------------------------------------------
.text:00418D27
.text:00418D27 loc_418D27:                             ; CODE XREF: sub_418BD0+22↑j
.text:00418D27                 mov     edx, [ebx]
.text:00418D29                 lea     esi, [esp+2DCh+Destination]
.text:00418D2D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418D30                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:00418D34                 call    strcpy
.text:00418D39                 mov     ecx, esi
.text:00418D3B                 nop
.text:00418D3C                 lea     esi, [esi+0]
.text:00418D40
.text:00418D40 loc_418D40:                             ; CODE XREF: sub_418BD0+184↓j
.text:00418D40                 mov     edi, [ecx]
.text:00418D42                 add     ecx, 4
.text:00418D45                 lea     eax, [edi-1010101h]
.text:00418D4B                 not     edi
.text:00418D4D                 and     eax, edi
.text:00418D4F                 test    eax, 80808080h
.text:00418D54                 jz      short loc_418D40
.text:00418D56                 mov     [esp+2DCh+lpFindFileData], offset sub_418BC0 ; Source
.text:00418D5E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00418D61                 call    strcat
.text:00418D66                 mov     [esp+2DCh+hFindFile], esi
.text:00418D69                 call    sub_4187A0
.text:00418D6E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00418D71                 lea     edx, [esp+2DCh+FindFileData]
.text:00418D78                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:00418D7C                 call    FindFirstFileA
.text:00418D81                 sub     esp, 8
.text:00418D84                 cmp     eax, 0FFFFFFFFh
.text:00418D87                 jz      short loc_418D91
.text:00418D89                 mov     [ebp+0], eax
.text:00418D8C                 jmp     loc_418C16
.text:00418D91 ; ---------------------------------------------------------------------------
.text:00418D91
.text:00418D91 loc_418D91:                             ; CODE XREF: sub_418BD0+1B7↑j
.text:00418D91                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00418D98                 jmp     loc_418D09
.text:00418D9D ; ---------------------------------------------------------------------------
.text:00418D9D
.text:00418D9D loc_418D9D:                             ; CODE XREF: sub_418BD0+16↑j
.text:00418D9D                 call    _errno
.text:00418DA2                 mov     dword ptr [eax], 9
.text:00418DA8                 jmp     loc_418D17
.text:00418DA8 sub_418BD0      endp
.text:00418DA8
.text:00418DA8 ; ---------------------------------------------------------------------------
.text:00418DAD                 align 10h
.text:00418DB0
.text:00418DB0 ; =============== S U B R O U T I N E =======================================
.text:00418DB0
.text:00418DB0
.text:00418DB0 ; int __cdecl sub_418DB0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:00418DB0 sub_418DB0      proc near               ; CODE XREF: sub_418F30+93↓p
.text:00418DB0
.text:00418DB0 pvReserved      = dword ptr -35Ch
.text:00418DB0 pUnkOuter       = dword ptr -358h
.text:00418DB0 dwClsContext    = dword ptr -354h
.text:00418DB0 riid            = dword ptr -350h
.text:00418DB0 ppv             = dword ptr -34Ch
.text:00418DB0 cchWideChar     = dword ptr -348h
.text:00418DB0 var_334         = byte ptr -334h
.text:00418DB0 var_330         = dword ptr -330h
.text:00418DB0 String2         = byte ptr -32Ch
.text:00418DB0 WideCharStr     = word ptr -21Ch
.text:00418DB0 lpMultiByteStr  = dword ptr  4
.text:00418DB0 lpString1       = dword ptr  8
.text:00418DB0
.text:00418DB0                 push    edi
.text:00418DB1                 push    esi
.text:00418DB2                 push    ebx
.text:00418DB3                 sub     esp, 350h
.text:00418DB9                 mov     edi, [esp+35Ch+lpString1]
.text:00418DC0                 mov     byte ptr [edi], 0
.text:00418DC3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:00418DCA                 call    OleInitialize
.text:00418DCF                 sub     esp, 4
.text:00418DD2                 cmp     eax, 1
.text:00418DD5                 ja      loc_418F0F
.text:00418DDB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00418DE3                 lea     ecx, [esp+35Ch+var_330]
.text:00418DE7                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:00418DEB                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00418DF3                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:00418DFB                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00418E02                 call    CoCreateInstance
.text:00418E07                 sub     esp, 14h
.text:00418E0A                 test    eax, eax
.text:00418E0C                 js      loc_418F0F
.text:00418E12                 mov     ebx, [esp+35Ch+var_330]
.text:00418E16                 lea     edx, [esp+35Ch+var_334]
.text:00418E1A                 mov     esi, [ebx]
.text:00418E1C                 mov     [esp+35Ch+dwClsContext], edx
.text:00418E20                 mov     [esp+35Ch+pvReserved], ebx
.text:00418E23                 xor     ebx, ebx
.text:00418E25                 mov     [esp+35Ch+pUnkOuter], offset dword_4287E0
.text:00418E2D                 call    dword ptr [esi]
.text:00418E2F                 sub     esp, 0Ch
.text:00418E32                 lea     esi, [esp+35Ch+WideCharStr]
.text:00418E39                 call    AreFileApisANSI
.text:00418E3E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00418E46                 test    eax, eax
.text:00418E48                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:00418E4F                 setz    bl
.text:00418E52                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00418E56                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00418E5E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00418E62                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:00418E6A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:00418E6D                 call    MultiByteToWideChar
.text:00418E72                 sub     esp, 18h
.text:00418E75                 test    eax, eax
.text:00418E77                 js      loc_418F0F
.text:00418E7D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:00418E81                 mov     ebx, [edx]
.text:00418E83                 mov     [esp+35Ch+dwClsContext], 0
.text:00418E8B                 mov     [esp+35Ch+pUnkOuter], esi
.text:00418E8F                 mov     [esp+35Ch+pvReserved], edx
.text:00418E92                 call    dword ptr [ebx+14h]
.text:00418E95                 sub     esp, 0Ch
.text:00418E98                 test    eax, eax
.text:00418E9A                 js      short loc_418F0F
.text:00418E9C                 mov     ebx, [esp+35Ch+var_330]
.text:00418EA0                 lea     esi, [esp+35Ch+String2]
.text:00418EA4                 mov     ecx, [ebx]
.text:00418EA6                 mov     [esp+35Ch+pvReserved], ebx
.text:00418EA9                 mov     [esp+35Ch+ppv], 0
.text:00418EB1                 mov     [esp+35Ch+riid], 0
.text:00418EB9                 mov     [esp+35Ch+dwClsContext], 104h
.text:00418EC1                 mov     [esp+35Ch+pUnkOuter], esi
.text:00418EC5                 call    dword ptr [ecx+0Ch]
.text:00418EC8                 sub     esp, 14h
.text:00418ECB                 mov     ebx, eax
.text:00418ECD                 test    eax, eax
.text:00418ECF                 js      short loc_418F0F
.text:00418ED1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00418ED5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00418ED8                 call    lstrcpyA
.text:00418EDD                 sub     esp, 8
.text:00418EE0                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00418EE4                 mov     ecx, [edi]
.text:00418EE6                 mov     [esp+35Ch+pvReserved], edi
.text:00418EE9                 call    dword ptr [ecx+8]
.text:00418EEC                 sub     esp, 4
.text:00418EEF                 mov     edx, [esp+35Ch+var_330]
.text:00418EF3                 mov     esi, [edx]
.text:00418EF5                 mov     [esp+35Ch+pvReserved], edx
.text:00418EF8                 call    dword ptr [esi+8]
.text:00418EFB                 sub     esp, 4
.text:00418EFE                 call    CoUninitialize
.text:00418F03                 mov     eax, ebx
.text:00418F05
.text:00418F05 loc_418F05:                             ; CODE XREF: sub_418DB0+177↓j
.text:00418F05                 add     esp, 350h
.text:00418F0B                 pop     ebx
.text:00418F0C                 pop     esi
.text:00418F0D                 pop     edi
.text:00418F0E                 retn
.text:00418F0F ; ---------------------------------------------------------------------------
.text:00418F0F
.text:00418F0F loc_418F0F:                             ; CODE XREF: sub_418DB0+25↑j
.text:00418F0F                                         ; sub_418DB0+5C↑j ...
.text:00418F0F                 call    sub_41AD20
.text:00418F14                 mov     edi, eax
.text:00418F16                 call    _errno
.text:00418F1B                 mov     [eax], edi
.text:00418F1D                 call    CoUninitialize
.text:00418F22                 mov     eax, 0FFFFFFFFh
.text:00418F27                 jmp     short loc_418F05
.text:00418F27 sub_418DB0      endp
.text:00418F27
.text:00418F27 ; ---------------------------------------------------------------------------
.text:00418F29 ; const char aLnk_0[]
.text:00418F29 aLnk_0          db '.lnk',0             ; DATA XREF: sub_418F30+53↓o
.text:00418F29                                         ; sub_418F30:loc_418F95↓o
.text:00418F2E                 align 10h
.text:00418F30
.text:00418F30 ; =============== S U B R O U T I N E =======================================
.text:00418F30
.text:00418F30
.text:00418F30 ; int __cdecl sub_418F30(char *, LPSTR lpString1)
.text:00418F30 sub_418F30      proc near               ; CODE XREF: sub_4122D0+35↑p
.text:00418F30                                         ; sub_419DA0+96↓p
.text:00418F30
.text:00418F30 Str             = dword ptr -1Ch
.text:00418F30 Source          = dword ptr -18h
.text:00418F30 Destination     = dword ptr -14h
.text:00418F30 arg_0           = dword ptr  4
.text:00418F30 lpString1       = dword ptr  8
.text:00418F30
.text:00418F30                 push    ebp
.text:00418F31                 push    edi
.text:00418F32                 push    esi
.text:00418F33                 push    ebx
.text:00418F34                 sub     esp, 0Ch
.text:00418F37                 mov     ebx, [esp+1Ch+arg_0]
.text:00418F3B                 mov     ebp, [esp+1Ch+lpString1]
.text:00418F3F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00418F42                 call    strlen
.text:00418F47                 add     eax, 5
.text:00418F4A                 mov     [esp+1Ch+Str], eax ; Size
.text:00418F4D                 call    malloc
.text:00418F52                 mov     [esp+1Ch+Destination], eax
.text:00418F56                 test    eax, eax
.text:00418F58                 jz      loc_419000
.text:00418F5E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00418F62                 mov     [esp+1Ch+Str], eax ; Destination
.text:00418F65                 call    strcpy
.text:00418F6A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00418F72                 mov     eax, [esp+1Ch+Destination]
.text:00418F76                 mov     [esp+1Ch+Str], eax ; Str
.text:00418F79                 call    strrchr
.text:00418F7E                 test    eax, eax
.text:00418F80                 jz      short loc_418F95
.text:00418F82                 cld
.text:00418F83                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:00418F88                 mov     ecx, 5
.text:00418F8D                 mov     esi, eax
.text:00418F8F                 mov     edi, ebx
.text:00418F91                 repe cmpsb
.text:00418F93                 jz      short loc_418FA9
.text:00418F95
.text:00418F95 loc_418F95:                             ; CODE XREF: sub_418F30+50↑j
.text:00418F95                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:00418F9D                 mov     edx, [esp+1Ch+Destination]
.text:00418FA1                 mov     [esp+1Ch+Str], edx ; Destination
.text:00418FA4                 call    strcat
.text:00418FA9
.text:00418FA9 loc_418FA9:                             ; CODE XREF: sub_418F30+63↑j
.text:00418FA9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:00418FB0                 call    SetErrorMode
.text:00418FB5                 sub     esp, 4
.text:00418FB8                 mov     ebx, [esp+1Ch+Destination]
.text:00418FBC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00418FC0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00418FC3                 call    sub_418DB0
.text:00418FC8                 mov     [esp+1Ch+Str], ebx ; Block
.text:00418FCB                 mov     esi, eax
.text:00418FCD                 call    free
.text:00418FD2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00418FD9                 call    SetErrorMode
.text:00418FDE                 sub     esp, 4
.text:00418FE1                 mov     [esp+1Ch+Str], ebp
.text:00418FE4                 call    sub_418720
.text:00418FE9                 inc     esi
.text:00418FEA                 jz      short loc_419000
.text:00418FEC                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00418FF0                 add     esp, 0Ch
.text:00418FF3                 pop     ebx
.text:00418FF4                 pop     esi
.text:00418FF5                 pop     edi
.text:00418FF6                 pop     ebp
.text:00418FF7                 jmp     strlen
.text:00418FF7 ; ---------------------------------------------------------------------------
.text:00418FFC                 align 10h
.text:00419000
.text:00419000 loc_419000:                             ; CODE XREF: sub_418F30+28↑j
.text:00419000                                         ; sub_418F30+BA↑j
.text:00419000                 add     esp, 0Ch
.text:00419003                 mov     eax, 0FFFFFFFFh
.text:00419008                 pop     ebx
.text:00419009                 pop     esi
.text:0041900A                 pop     edi
.text:0041900B                 pop     ebp
.text:0041900C                 retn
.text:0041900C sub_418F30      endp
.text:0041900C
.text:0041900C ; ---------------------------------------------------------------------------
.text:0041900D                 align 10h
.text:00419010 ; const char String[4]
.text:00419010 String          db ' :/',0              ; DATA XREF: sub_419020+FA↓o
.text:00419014                 align 10h
.text:00419020
.text:00419020 ; =============== S U B R O U T I N E =======================================
.text:00419020
.text:00419020
.text:00419020 ; int __cdecl sub_419020(LPCSTR)
.text:00419020 sub_419020      proc near               ; CODE XREF: sub_416FA0+E↑p
.text:00419020                                         ; sub_4174A0+17↑p ...
.text:00419020
.text:00419020 Str             = dword ptr -1Ch
.text:00419020 Val             = dword ptr -18h
.text:00419020 Count           = dword ptr -14h
.text:00419020 var_10          = dword ptr -10h
.text:00419020 var_C           = dword ptr -0Ch
.text:00419020 var_8           = dword ptr -8
.text:00419020 var_4           = dword ptr -4
.text:00419020 arg_0           = dword ptr  4
.text:00419020
.text:00419020                 sub     esp, 1Ch
.text:00419023                 mov     edx, [esp+1Ch+arg_0]
.text:00419027                 mov     [esp+1Ch+var_8], edi
.text:0041902B                 mov     [esp+1Ch+var_10], ebx
.text:0041902F                 mov     [esp+1Ch+var_C], esi
.text:00419033                 mov     [esp+1Ch+var_4], ebp
.text:00419037                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0041903A                 call    sub_41AD70
.text:0041903F                 test    eax, eax
.text:00419041                 mov     edi, eax
.text:00419043                 jz      short loc_419080
.text:00419045                 mov     [esp+1Ch+Str], eax ; Str
.text:00419048                 call    strlen
.text:0041904D                 cmp     eax, 2
.text:00419050                 jbe     short loc_41905C
.text:00419052                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00419056                 jz      loc_419110
.text:0041905C
.text:0041905C loc_41905C:                             ; CODE XREF: sub_419020+30↑j
.text:0041905C                                         ; sub_419020+F4↓j
.text:0041905C                 test    edi, edi
.text:0041905E                 jz      short loc_419080
.text:00419060                 mov     [esp+1Ch+Str], edi ; Str
.text:00419063                 call    strlen
.text:00419068                 cmp     eax, 4
.text:0041906B                 mov     ebp, eax
.text:0041906D                 jle     short loc_419080
.text:0041906F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00419072                 jz      short loc_4190A0
.text:00419074                 lea     esi, [esi+0]
.text:0041907A                 lea     edi, [edi+0]
.text:00419080
.text:00419080 loc_419080:                             ; CODE XREF: sub_419020+23↑j
.text:00419080                                         ; sub_419020+3E↑j ...
.text:00419080                 xor     esi, esi
.text:00419082
.text:00419082 loc_419082:                             ; CODE XREF: sub_419020+CD↓j
.text:00419082                                         ; sub_419020+115↓j
.text:00419082                 mov     [esp+1Ch+Str], edi ; Block
.text:00419085                 call    free
.text:0041908A                 mov     eax, esi
.text:0041908C                 mov     ebx, [esp+1Ch+var_10]
.text:00419090                 mov     esi, [esp+1Ch+var_C]
.text:00419094                 mov     edi, [esp+1Ch+var_8]
.text:00419098                 mov     ebp, [esp+1Ch+var_4]
.text:0041909C                 add     esp, 1Ch
.text:0041909F                 retn
.text:004190A0 ; ---------------------------------------------------------------------------
.text:004190A0
.text:004190A0 loc_4190A0:                             ; CODE XREF: sub_419020+52↑j
.text:004190A0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:004190A4                 jnz     short loc_419080
.text:004190A6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004190AE                 lea     ecx, [edi+2]
.text:004190B1                 mov     [esp+1Ch+Str], ecx ; Str
.text:004190B4                 call    strchr
.text:004190B9                 test    eax, eax
.text:004190BB                 jnz     short loc_4190EF
.text:004190BD
.text:004190BD loc_4190BD:                             ; CODE XREF: sub_419020+E2↓j
.text:004190BD                 inc     ebp
.text:004190BE
.text:004190BE loc_4190BE:                             ; CODE XREF: sub_419020+E9↓j
.text:004190BE                 mov     [esp+1Ch+Val], 1 ; Size
.text:004190C6                 lea     ebx, [ebp+1]
.text:004190C9                 mov     [esp+1Ch+Str], ebx ; Count
.text:004190CC                 call    calloc
.text:004190D1                 mov     [esp+1Ch+Str], eax ; Destination
.text:004190D4                 mov     esi, eax
.text:004190D6                 mov     [esp+1Ch+Count], ebx ; Count
.text:004190DA                 mov     [esp+1Ch+Val], edi ; Source
.text:004190DE                 call    strncpy
.text:004190E3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:004190E8                 mov     byte ptr [ebp+esi+0], 0
.text:004190ED                 jmp     short loc_419082
.text:004190EF ; ---------------------------------------------------------------------------
.text:004190EF
.text:004190EF loc_4190EF:                             ; CODE XREF: sub_419020+9B↑j
.text:004190EF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004190F7                 inc     eax
.text:004190F8                 mov     [esp+1Ch+Str], eax ; Str
.text:004190FB                 call    strchr
.text:00419100                 test    eax, eax
.text:00419102                 jz      short loc_4190BD
.text:00419104                 sub     eax, edi
.text:00419106                 lea     ebp, [eax+1]
.text:00419109                 jmp     short loc_4190BE
.text:00419109 ; ---------------------------------------------------------------------------
.text:0041910B                 align 10h
.text:00419110
.text:00419110 loc_419110:                             ; CODE XREF: sub_419020+36↑j
.text:00419110                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00419114                 jnz     loc_41905C
.text:0041911A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00419121                 call    _strdup
.text:00419126                 movsx   edx, byte ptr [edi]
.text:00419129                 mov     esi, eax
.text:0041912B                 mov     [esp+1Ch+Str], edx ; C
.text:0041912E                 call    toupper
.text:00419133                 mov     [esi], al
.text:00419135                 jmp     loc_419082
.text:00419135 sub_419020      endp
.text:00419135
.text:00419135 ; ---------------------------------------------------------------------------
.text:0041913A                 align 10h
.text:00419140
.text:00419140 ; =============== S U B R O U T I N E =======================================
.text:00419140
.text:00419140
.text:00419140 sub_419140      proc near               ; CODE XREF: .text:00419294↓p
.text:00419140                                         ; .text:00419378↓p
.text:00419140
.text:00419140 Str             = dword ptr -2Ch
.text:00419140 Val             = dword ptr -28h
.text:00419140 var_18          = dword ptr -18h
.text:00419140 var_11          = byte ptr -11h
.text:00419140 arg_0           = dword ptr  4
.text:00419140
.text:00419140                 push    ebp
.text:00419141                 push    edi
.text:00419142                 push    esi
.text:00419143                 push    ebx
.text:00419144                 sub     esp, 1Ch
.text:00419147                 mov     edx, [esp+2Ch+arg_0]
.text:0041914B                 cmp     edx, ds:dword_42C640
.text:00419151                 mov     [esp+2Ch+var_11], 0
.text:00419156                 jz      loc_419254
.text:0041915C                 mov     ebx, ds:dword_42C630
.text:00419162                 test    ebx, ebx
.text:00419164                 jz      short loc_4191D2
.text:00419166
.text:00419166 loc_419166:                             ; CODE XREF: sub_419140+10F↓j
.text:00419166                 mov     ebx, [esp+2Ch+arg_0]
.text:0041916A                 xor     edi, edi
.text:0041916C                 xor     esi, esi
.text:0041916E                 mov     ebp, offset dword_42C658
.text:00419173                 lea     esi, [esi+0]
.text:00419179                 lea     edi, [edi+0]
.text:00419180
.text:00419180 loc_419180:                             ; CODE XREF: sub_419140+60↓j
.text:00419180                 mov     edx, [ebp+4]
.text:00419183                 mov     ecx, edi
.text:00419185                 mov     eax, [ebp+0]
.text:00419188                 shl     ecx, 4
.text:0041918B                 mov     [esp+2Ch+var_18], ecx
.text:0041918F                 mov     ecx, edx
.text:00419191                 xor     eax, ebx
.text:00419193                 xor     ecx, esi
.text:00419195                 or      ecx, eax
.text:00419197                 jz      short loc_4191C1
.text:00419199                 inc     edi
.text:0041919A                 add     ebp, 10h
.text:0041919D                 cmp     edi, 20h ; ' '
.text:004191A0                 jle     short loc_419180
.text:004191A2
.text:004191A2 loc_4191A2:                             ; CODE XREF: sub_419140+90↓j
.text:004191A2                 movzx   ebx, [esp+2Ch+var_11]
.text:004191A7                 mov     eax, [esp+2Ch+arg_0]
.text:004191AB                 mov     byte_42B140, bl
.text:004191B1                 mov     ds:dword_42C640, eax
.text:004191B6                 movsx   eax, bl
.text:004191B9
.text:004191B9 loc_4191B9:                             ; CODE XREF: sub_419140+11B↓j
.text:004191B9                 add     esp, 1Ch
.text:004191BC                 pop     ebx
.text:004191BD                 pop     esi
.text:004191BE                 pop     edi
.text:004191BF                 pop     ebp
.text:004191C0                 retn
.text:004191C1 ; ---------------------------------------------------------------------------
.text:004191C1
.text:004191C1 loc_4191C1:                             ; CODE XREF: sub_419140+57↑j
.text:004191C1                 mov     edx, [esp+2Ch+var_18]
.text:004191C5                 movzx   eax, byte ptr ds:dword_42C650[edx]
.text:004191CC                 mov     [esp+2Ch+var_11], al
.text:004191D0                 jmp     short loc_4191A2
.text:004191D2 ; ---------------------------------------------------------------------------
.text:004191D2
.text:004191D2 loc_4191D2:                             ; CODE XREF: sub_419140+24↑j
.text:004191D2                 mov     [esp+2Ch+Str], 0
.text:004191D9                 call    sub_41C5E0
.text:004191DE                 test    eax, eax
.text:004191E0                 mov     ebx, eax
.text:004191E2                 jz      short loc_41923C
.text:004191E4                 movzx   ecx, byte ptr [eax]
.text:004191E7                 mov     esi, 0FFFFFFF0h
.text:004191EC                 test    cl, cl
.text:004191EE                 jz      short loc_41923C
.text:004191F0
.text:004191F0 loc_4191F0:                             ; CODE XREF: sub_419140+FA↓j
.text:004191F0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:004191F3                 movsx   ebp, cl
.text:004191F6                 add     esi, 10h
.text:004191F9                 mov     ds:dword_42C650[esi], ebp
.text:004191FF                 mov     edi, ebp
.text:00419201                 sar     edi, 1Fh
.text:00419204                 mov     ds:dword_42C654[esi], edi
.text:0041920A                 call    sub_4174A0
.text:0041920F                 mov     ds:dword_42C658[esi], eax
.text:00419215                 xor     ecx, ecx
.text:00419217                 mov     [esp+2Ch+Str], ebx ; Str
.text:0041921A                 mov     ds:dword_42C65C[esi], ecx
.text:00419220                 mov     [esp+2Ch+Val], 0 ; Val
.text:00419228                 call    strchr
.text:0041922D                 mov     ebx, eax
.text:0041922F                 inc     ebx
.text:00419230                 jz      short loc_41923C
.text:00419232                 movzx   edx, byte ptr [eax+1]
.text:00419236                 test    dl, dl
.text:00419238                 mov     cl, dl
.text:0041923A                 jnz     short loc_4191F0
.text:0041923C
.text:0041923C loc_41923C:                             ; CODE XREF: sub_419140+A2↑j
.text:0041923C                                         ; sub_419140+AE↑j ...
.text:0041923C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0041923F                 mov     esi, 1
.text:00419244                 mov     ds:dword_42C630, esi
.text:0041924A                 call    free
.text:0041924F                 jmp     loc_419166
.text:00419254 ; ---------------------------------------------------------------------------
.text:00419254
.text:00419254 loc_419254:                             ; CODE XREF: sub_419140+16↑j
.text:00419254                 movsx   eax, byte_42B140
.text:0041925B                 jmp     loc_4191B9
.text:0041925B sub_419140      endp
.text:0041925B
.text:0041925B ; ---------------------------------------------------------------------------
.text:00419260 dword_419260    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00419260                                         ; DATA XREF: .text:00419283↓o
.text:00419260                                         ; .text:00419363↓o
.text:00419270 ; ---------------------------------------------------------------------------
.text:00419270                 sub     esp, 1Ch
.text:00419273                 mov     [esp+14h], esi
.text:00419277                 mov     esi, [esp+20h]
.text:0041927B                 mov     [esp+18h], edi
.text:0041927F                 mov     [esp+10h], ebx
.text:00419283                 mov     dword ptr [esp], offset dword_419260
.text:0041928A                 call    _strdup
.text:0041928F                 mov     [esp], esi
.text:00419292                 mov     edi, eax
.text:00419294                 call    sub_419140
.text:00419299                 mov     [edi], al
.text:0041929B                 test    al, al
.text:0041929D                 jz      short loc_4192B1
.text:0041929F                 mov     eax, edi
.text:004192A1                 mov     ebx, [esp+10h]
.text:004192A5                 mov     esi, [esp+14h]
.text:004192A9                 mov     edi, [esp+18h]
.text:004192AD                 add     esp, 1Ch
.text:004192B0                 retn
.text:004192B1 ; ---------------------------------------------------------------------------
.text:004192B1
.text:004192B1 loc_4192B1:                             ; CODE XREF: .text:0041929D↑j
.text:004192B1                 mov     [esp], edi
.text:004192B4                 call    free
.text:004192B9                 mov     dword ptr [esp+4], 0
.text:004192C1                 mov     dword ptr [esp], 0
.text:004192C8                 call    GetCurrentDirectoryA
.text:004192CD                 sub     esp, 8
.text:004192D0                 lea     esi, [eax+1]
.text:004192D3                 mov     [esp], esi
.text:004192D6                 call    malloc
.text:004192DB                 mov     [esp+4], eax
.text:004192DF                 mov     edi, eax
.text:004192E1                 mov     [esp], esi
.text:004192E4                 call    GetCurrentDirectoryA
.text:004192E9                 sub     esp, 8
.text:004192EC                 test    eax, eax
.text:004192EE                 jnz     short loc_419310
.text:004192F0                 mov     dword ptr [esp+20h], 419264h
.text:004192F8                 mov     ebx, [esp+10h]
.text:004192FC                 mov     esi, [esp+14h]
.text:00419300                 mov     edi, [esp+18h]
.text:00419304                 add     esp, 1Ch
.text:00419307                 jmp     _strdup
.text:00419307 ; ---------------------------------------------------------------------------
.text:0041930C                 align 10h
.text:00419310
.text:00419310 loc_419310:                             ; CODE XREF: .text:004192EE↑j
.text:00419310                 mov     [esp+20h], edi
.text:00419314                 mov     ebx, [esp+10h]
.text:00419318                 mov     esi, [esp+14h]
.text:0041931C                 mov     edi, [esp+18h]
.text:00419320                 add     esp, 1Ch
.text:00419323                 jmp     sub_419020
.text:00419323 ; ---------------------------------------------------------------------------
.text:00419328                 align 10h
.text:00419330                 sub     esp, 7Ch
.text:00419333                 lea     edx, [esp+10h]
.text:00419337                 mov     [esp+8], edx
.text:0041933B                 mov     edx, [esp+80h]
.text:00419342                 mov     [esp+70h], ebx
.text:00419346                 mov     [esp+74h], esi
.text:0041934A                 mov     [esp+4], edx
.text:0041934E                 mov     [esp+78h], edi
.text:00419352                 mov     dword ptr [esp], 0
.text:00419359                 call    sub_4166F0
.text:0041935E                 xor     edx, edx
.text:00419360                 inc     eax
.text:00419361                 jz      short loc_419385
.text:00419363                 mov     dword ptr [esp], offset dword_419260
.text:0041936A                 mov     esi, [esp+20h]
.text:0041936E                 call    _strdup
.text:00419373                 mov     edi, eax
.text:00419375                 mov     [esp], esi
.text:00419378                 call    sub_419140
.text:0041937D                 mov     [edi], al
.text:0041937F                 test    al, al
.text:00419381                 mov     edx, edi
.text:00419383                 jz      short loc_419397
.text:00419385
.text:00419385 loc_419385:                             ; CODE XREF: .text:00419361↑j
.text:00419385                                         ; .text:004193E4↓j
.text:00419385                 mov     ebx, [esp+70h]
.text:00419389                 mov     eax, edx
.text:0041938B                 mov     esi, [esp+74h]
.text:0041938F                 mov     edi, [esp+78h]
.text:00419393                 add     esp, 7Ch
.text:00419396                 retn
.text:00419397 ; ---------------------------------------------------------------------------
.text:00419397
.text:00419397 loc_419397:                             ; CODE XREF: .text:00419383↑j
.text:00419397                 mov     [esp], edi
.text:0041939A                 call    free
.text:0041939F                 mov     dword ptr [esp+4], 0
.text:004193A7                 mov     dword ptr [esp], 0
.text:004193AE                 call    GetCurrentDirectoryA
.text:004193B3                 sub     esp, 8
.text:004193B6                 lea     esi, [eax+1]
.text:004193B9                 mov     [esp], esi
.text:004193BC                 call    malloc
.text:004193C1                 mov     [esp+4], eax
.text:004193C5                 mov     edi, eax
.text:004193C7                 mov     [esp], esi
.text:004193CA                 call    GetCurrentDirectoryA
.text:004193CF                 sub     esp, 8
.text:004193D2                 test    eax, eax
.text:004193D4                 jnz     short loc_4193E6
.text:004193D6                 mov     dword ptr [esp], 419264h
.text:004193DD                 call    _strdup
.text:004193E2
.text:004193E2 loc_4193E2:                             ; CODE XREF: .text:004193EE↓j
.text:004193E2                 mov     edx, eax
.text:004193E4                 jmp     short loc_419385
.text:004193E6 ; ---------------------------------------------------------------------------
.text:004193E6
.text:004193E6 loc_4193E6:                             ; CODE XREF: .text:004193D4↑j
.text:004193E6                 mov     [esp], edi
.text:004193E9                 call    sub_419020
.text:004193EE                 jmp     short loc_4193E2
.text:004193F0
.text:004193F0 ; =============== S U B R O U T I N E =======================================
.text:004193F0
.text:004193F0
.text:004193F0 ; int __cdecl sub_4193F0(LPCSTR)
.text:004193F0 sub_4193F0      proc near               ; CODE XREF: sub_416950+12F↑p
.text:004193F0
.text:004193F0 String1         = dword ptr -1Ch
.text:004193F0 String2         = dword ptr -18h
.text:004193F0 var_C           = dword ptr -0Ch
.text:004193F0 var_8           = dword ptr -8
.text:004193F0 var_4           = dword ptr -4
.text:004193F0 arg_0           = dword ptr  4
.text:004193F0
.text:004193F0                 sub     esp, 1Ch
.text:004193F3                 mov     [esp+1Ch+var_4], edi
.text:004193F7                 mov     edi, [esp+1Ch+arg_0]
.text:004193FB                 mov     [esp+1Ch+var_C], ebx
.text:004193FF                 mov     [esp+1Ch+var_8], esi
.text:00419403                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00419406                 call    sub_41AD70
.text:0041940B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0041940E                 mov     esi, eax
.text:00419410                 call    sub_419020
.text:00419415                 mov     [esp+1Ch+String2], eax ; String2
.text:00419419                 mov     ebx, eax
.text:0041941B                 mov     [esp+1Ch+String1], esi ; String1
.text:0041941E                 call    _stricmp
.text:00419423                 test    eax, eax
.text:00419425                 setz    dl
.text:00419428                 test    esi, esi
.text:0041942A                 movzx   edi, dl
.text:0041942D                 jz      short loc_419437
.text:0041942F                 mov     [esp+1Ch+String1], esi ; Block
.text:00419432                 call    free
.text:00419437
.text:00419437 loc_419437:                             ; CODE XREF: sub_4193F0+3D↑j
.text:00419437                 test    ebx, ebx
.text:00419439                 jz      short loc_419443
.text:0041943B                 mov     [esp+1Ch+String1], ebx ; Block
.text:0041943E                 call    free
.text:00419443
.text:00419443 loc_419443:                             ; CODE XREF: sub_4193F0+49↑j
.text:00419443                 mov     eax, edi
.text:00419445                 mov     ebx, [esp+1Ch+var_C]
.text:00419449                 mov     esi, [esp+1Ch+var_8]
.text:0041944D                 mov     edi, [esp+1Ch+var_4]
.text:00419451                 add     esp, 1Ch
.text:00419454                 retn
.text:00419454 sub_4193F0      endp
.text:00419454
.text:00419454 ; ---------------------------------------------------------------------------
.text:00419455                 align 10h
.text:00419460
.text:00419460 ; =============== S U B R O U T I N E =======================================
.text:00419460
.text:00419460
.text:00419460 ; int __cdecl sub_419460(char *, int)
.text:00419460 sub_419460      proc near               ; CODE XREF: sub_403C30+6FA↑p
.text:00419460                                         ; sub_404500+55C↑p ...
.text:00419460
.text:00419460 var_C           = dword ptr -0Ch
.text:00419460 var_8           = dword ptr -8
.text:00419460 var_4           = dword ptr -4
.text:00419460 arg_0           = dword ptr  4
.text:00419460 arg_4           = dword ptr  8
.text:00419460
.text:00419460                 sub     esp, 0Ch
.text:00419463                 mov     edx, [esp+0Ch+arg_4]
.text:00419467                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:0041946E                 mov     [esp+0Ch+var_4], edx ; int
.text:00419472                 mov     edx, [esp+0Ch+arg_0]
.text:00419476                 mov     [esp+0Ch+var_8], edx ; char *
.text:0041947A                 call    sub_419DA0
.text:0041947F                 add     esp, 0Ch
.text:00419482                 retn
.text:00419482 sub_419460      endp
.text:00419482
.text:00419482 ; ---------------------------------------------------------------------------
.text:00419483                 align 10h
.text:00419490 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:004194E1↓o
.text:00419499 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00419499                                         ; DATA XREF: .text:004194F2↓o
.text:004194AD ; const CHAR FileName[]
.text:004194AD FileName        db '\\.\vwin32',0       ; DATA XREF: .text:0041963C↓o
.text:004194AD                                         ; sub_419A70+17C↓o
.text:004194B8 ; ---------------------------------------------------------------------------
.text:004194B8
.text:004194B8 loc_4194B8:                             ; DATA XREF: .text:00419752↓o
.text:004194B8                 dec     esi
.text:004194B9                 push    esp
.text:004194BA                 inc     esi
.text:004194BB                 push    ebx
.text:004194BC                 add     [esi+41h], al
.text:004194BF                 push    esp
.text:004194C0                 xor     esi, [edx]
.text:004194C2                 add     [esi+41h], al
.text:004194C5                 push    esp
.text:004194C6                 add     [ebx+44h], al
.text:004194C9                 inc     esi
.text:004194CA                 push    ebx
.text:004194CB
.text:004194CB loc_4194CB:                             ; CODE XREF: sub_419A70+101↓p
.text:004194CB                 add     [ebp+55002674h], cl
.text:004194D1                 push    edi
.text:004194D2                 push    esi
.text:004194D3                 push    ebx
.text:004194D4                 sub     esp, 8BCh
.text:004194DA                 mov     ebp, [esp+8D0h]
.text:004194E1                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:004194E8                 call    LoadLibraryA
.text:004194ED                 sub     esp, 4
.text:004194F0                 mov     edi, eax
.text:004194F2                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:004194FA                 mov     [esp], eax
.text:004194FD                 call    GetProcAddress
.text:00419502                 sub     esp, 8
.text:00419505                 mov     esi, eax
.text:00419507                 test    ebp, ebp
.text:00419509                 mov     dword ptr [esp+20h], 0
.text:00419511                 jz      loc_419A51
.text:00419517                 mov     [esp], ebp
.text:0041951A                 call    sub_4187A0
.text:0041951F                 mov     [esp], eax
.text:00419522                 mov     ebp, eax
.text:00419524                 call    strlen
.text:00419529                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0041952E                 mov     ebx, eax
.text:00419530                 jz      short loc_41954C
.text:00419532                 mov     [esp], ebp
.text:00419535                 lea     edx, [eax+1]
.text:00419538                 mov     [esp+4], edx
.text:0041953C                 call    realloc
.text:00419541                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00419545                 mov     ebp, eax
.text:00419547                 mov     byte ptr [ebx+eax+1], 0
.text:0041954C
.text:0041954C loc_41954C:                             ; CODE XREF: .text:00419530↑j
.text:0041954C                 mov     dword ptr [esp+1Ch], 400h
.text:00419554                 lea     edx, [esp+0B0h]
.text:0041955B                 lea     ebx, [esp+5Ch]
.text:0041955F                 mov     [esp+18h], edx
.text:00419563                 lea     ecx, [esp+58h]
.text:00419567                 lea     edx, [esp+54h]
.text:0041956B                 mov     [esp+14h], ebx
.text:0041956F                 lea     eax, [esp+4B0h]
.text:00419576                 mov     [esp+10h], ecx
.text:0041957A                 mov     [esp+0Ch], edx
.text:0041957E                 mov     dword ptr [esp+8], 400h
.text:00419586                 mov     [esp+4], eax
.text:0041958A                 mov     [esp], ebp
.text:0041958D                 call    GetVolumeInformationA
.text:00419592                 sub     esp, 20h
.text:00419595                 test    eax, eax
.text:00419597                 jz      loc_419A2E
.text:0041959D                 test    esi, esi
.text:0041959F                 jz      short loc_4195C5
.text:004195A1                 mov     [esp], ebp
.text:004195A4                 lea     edx, [esp+48h]
.text:004195A8                 lea     ebx, [esp+40h]
.text:004195AC                 mov     [esp+0Ch], edx
.text:004195B0                 lea     ecx, [esp+38h]
.text:004195B4                 mov     [esp+8], ebx
.text:004195B8                 mov     [esp+4], ecx
.text:004195BC                 call    esi
.text:004195BE                 sub     esp, 10h
.text:004195C1                 mov     [esp+20h], eax
.text:004195C5
.text:004195C5 loc_4195C5:                             ; CODE XREF: .text:0041959F↑j
.text:004195C5                 test    edi, edi
.text:004195C7                 jz      short loc_4195D4
.text:004195C9                 mov     [esp], edi
.text:004195CC                 call    FreeLibrary
.text:004195D1                 sub     esp, 4
.text:004195D4
.text:004195D4 loc_4195D4:                             ; CODE XREF: .text:004195C7↑j
.text:004195D4                 call    sub_41B800
.text:004195D9                 test    eax, eax
.text:004195DB                 lea     esi, [esp+28h]
.text:004195DF                 jz      loc_419A10
.text:004195E5                 call    sub_41B800
.text:004195EA                 test    eax, eax
.text:004195EC                 jz      short loc_4195FC
.text:004195EE                 call    sub_41B750
.text:004195F3                 cmp     eax, 0Bh
.text:004195F6                 jle     loc_4199E4
.text:004195FC
.text:004195FC loc_4195FC:                             ; CODE XREF: .text:004195EC↑j
.text:004195FC                 cld
.text:004195FD                 xor     eax, eax
.text:004195FF                 lea     ebx, [esp+60h]
.text:00419603                 mov     ecx, 7
.text:00419608                 mov     edi, ebx
.text:0041960A                 rep stosd
.text:0041960C                 mov     dword ptr [esp+18h], 0
.text:00419614                 mov     dword ptr [esp+14h], 4000000h
.text:0041961C                 mov     dword ptr [esp+10h], 0
.text:00419624                 mov     dword ptr [esp+0Ch], 0
.text:0041962C                 mov     dword ptr [esp+8], 0
.text:00419634                 mov     dword ptr [esp+4], 0
.text:0041963C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00419643                 call    CreateFileA
.text:00419648                 sub     esp, 1Ch
.text:0041964B                 mov     edi, eax
.text:0041964D                 cmp     eax, 0FFFFFFFFh
.text:00419650                 jz      short loc_4196D0
.text:00419652                 mov     [esp+10h], ebx
.text:00419656                 lea     edx, [esp+80h]
.text:0041965D                 lea     ecx, [esp+24h]
.text:00419661                 mov     [esp+70h], edx
.text:00419665                 mov     [esp+18h], ecx
.text:00419669                 mov     [esp+8], ebx
.text:0041966D                 mov     dword ptr [esp+6Ch], 7303h
.text:00419675                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041967D                 mov     [esp+64h], ebp
.text:00419681                 mov     dword ptr [esp+78h], 1
.text:00419689                 mov     dword ptr [esp+1Ch], 0
.text:00419691                 mov     dword ptr [esp+14h], 1Ch
.text:00419699                 mov     dword ptr [esp+0Ch], 1Ch
.text:004196A1                 mov     dword ptr [esp+4], 6
.text:004196A9                 mov     [esp], eax
.text:004196AC                 call    DeviceIoControl
.text:004196B1                 sub     esp, 20h
.text:004196B4                 mov     ebx, eax
.text:004196B6                 mov     [esp], edi
.text:004196B9                 call    CloseHandle
.text:004196BE                 sub     esp, 4
.text:004196C1                 test    ebx, ebx
.text:004196C3                 jz      short loc_4196D0
.text:004196C5                 test    byte ptr [esp+78h], 1
.text:004196CA                 jz      loc_4199B0
.text:004196D0
.text:004196D0 loc_4196D0:                             ; CODE XREF: .text:00419650↑j
.text:004196D0                                         ; .text:004196C3↑j
.text:004196D0                 call    sub_41AD20
.text:004196D5                 mov     edi, eax
.text:004196D7                 call    _errno
.text:004196DC                 mov     [eax], edi
.text:004196DE                 xor     eax, eax
.text:004196E0
.text:004196E0 loc_4196E0:                             ; CODE XREF: .text:004199DF↓j
.text:004196E0                                         ; .text:00419A0B↓j
.text:004196E0                 test    eax, eax
.text:004196E2                 jnz     short loc_419704
.text:004196E4                 mov     dword ptr [esp+34h], 1
.text:004196EC                 mov     dword ptr [esp+30h], 200h
.text:004196F4                 mov     dword ptr [esp+2Ch], 0
.text:004196FC                 mov     dword ptr [esp+28h], 0
.text:00419704
.text:00419704 loc_419704:                             ; CODE XREF: .text:004196E2↑j
.text:00419704                 mov     edx, [esp+30h]
.text:00419708                 mov     edi, [esp+34h]
.text:0041970C                 mov     ecx, [esp+20h]
.text:00419710                 imul    edi, edx
.text:00419713                 test    ecx, ecx
.text:00419715                 jnz     short loc_41973D
.text:00419717                 mov     eax, [esp+28h]
.text:0041971B                 mul     edi
.text:0041971D                 mov     esi, eax
.text:0041971F                 mov     eax, [esp+2Ch]
.text:00419723                 mov     [esp+44h], edx
.text:00419727                 mov     [esp+40h], esi
.text:0041972B                 mul     edi
.text:0041972D                 mov     [esp+48h], eax
.text:00419731                 mov     [esp+4Ch], edx
.text:00419735                 mov     [esp+38h], eax
.text:00419739                 mov     [esp+3Ch], edx
.text:0041973D
.text:0041973D loc_41973D:                             ; CODE XREF: .text:00419715↑j
.text:0041973D                 mov     ebx, [esp+5Ch]
.text:00419741                 lea     edx, [esp+0B0h]
.text:00419748                 mov     ecx, [esp+8D4h]
.text:0041974F                 mov     [ecx+48h], ebx
.text:00419752                 mov     dword ptr [esp+4], offset loc_4194B8
.text:0041975A                 mov     [esp], edx
.text:0041975D                 call    _stricmp
.text:00419762                 test    eax, eax
.text:00419764                 jnz     loc_419920
.text:0041976A                 mov     esi, [esp+8D4h]
.text:00419771                 mov     dword ptr [esi], 5346544Eh
.text:00419777
.text:00419777 loc_419777:                             ; CODE XREF: .text:00419948↓j
.text:00419777                                         ; .text:00419975↓j ...
.text:00419777                 mov     ebx, [esp+30h]
.text:0041977B                 mov     esi, [esp+8D4h]
.text:00419782                 mov     [esi+4], ebx
.text:00419785                 mov     [esi+8], ebx
.text:00419788                 mov     ebx, [esi+8]
.text:0041978B                 mov     [esi+0Ch], edi
.text:0041978E                 mov     ecx, [esp+44h]
.text:00419792                 xor     esi, esi
.text:00419794                 mov     [esp+8], ebx
.text:00419798                 mov     edx, [esp+40h]
.text:0041979C                 mov     [esp+0Ch], esi
.text:004197A0                 mov     [esp+4], ecx
.text:004197A4                 mov     [esp], edx
.text:004197A7                 call    sub_429510
.text:004197AC                 mov     ecx, [esp+8D4h]
.text:004197B3                 mov     [ecx+10h], eax
.text:004197B6                 mov     [ecx+14h], edx
.text:004197B9                 mov     ecx, [esp+4Ch]
.text:004197BD                 mov     [esp+8], ebx
.text:004197C1                 mov     edx, [esp+48h]
.text:004197C5                 mov     [esp+0Ch], esi
.text:004197C9                 mov     [esp+4], ecx
.text:004197CD                 mov     [esp], edx
.text:004197D0                 call    sub_429510
.text:004197D5                 mov     ecx, [esp+8D4h]
.text:004197DC                 mov     [ecx+18h], eax
.text:004197DF                 mov     [ecx+1Ch], edx
.text:004197E2                 mov     ecx, [esp+38h]
.text:004197E6                 mov     [esp+8], ebx
.text:004197EA                 mov     ebx, [esp+3Ch]
.text:004197EE                 mov     [esp+0Ch], esi
.text:004197F2                 mov     [esp], ecx
.text:004197F5                 mov     [esp+4], ebx
.text:004197F9                 call    sub_429510
.text:004197FE                 mov     esi, [esp+8D4h]
.text:00419805                 mov     [esi+20h], eax
.text:00419808                 mov     [esi+24h], edx
.text:0041980B                 mov     ecx, [esp+44h]
.text:0041980F                 mov     esi, edi
.text:00419811                 mov     [esp+8], esi
.text:00419815                 mov     edx, [esp+40h]
.text:00419819                 xor     edi, edi
.text:0041981B                 mov     [esp+0Ch], edi
.text:0041981F                 mov     [esp+4], ecx
.text:00419823                 mov     [esp], edx
.text:00419826                 call    sub_429510
.text:0041982B                 mov     ebx, [esp+8D4h]
.text:00419832                 mov     [ebx+28h], eax
.text:00419835                 mov     [ebx+2Ch], edx
.text:00419838                 mov     ecx, [esp+4Ch]
.text:0041983C                 mov     [esp+8], esi
.text:00419840                 mov     edx, [esp+48h]
.text:00419844                 mov     [esp+0Ch], edi
.text:00419848                 mov     [esp+4], ecx
.text:0041984C                 mov     [esp], edx
.text:0041984F                 call    sub_429510
.text:00419854                 mov     ebx, [esp+8D4h]
.text:0041985B                 mov     [ebx+30h], eax
.text:0041985E                 mov     [ebx+34h], edx
.text:00419861                 mov     ecx, [esp+3Ch]
.text:00419865                 mov     [esp+8], esi
.text:00419869                 mov     edx, [esp+38h]
.text:0041986D                 mov     [esp+0Ch], edi
.text:00419871                 mov     [esp+4], ecx
.text:00419875                 mov     [esp], edx
.text:00419878                 call    sub_429510
.text:0041987D                 mov     edx, [esp+8D4h]
.text:00419884                 lea     ecx, [esp+0B0h]
.text:0041988B                 mov     [edx+38h], eax
.text:0041988E                 mov     esi, [esp+58h]
.text:00419892                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00419899                 mov     [edx+110h], esi
.text:0041989F                 mov     esi, edx
.text:004198A1                 add     esi, 4Ch ; 'L'
.text:004198A4                 movzx   ebx, word ptr [esp+56h]
.text:004198A9                 movzx   edi, word ptr [esp+54h]
.text:004198AE                 mov     [edx+3Ch], ebx
.text:004198B1                 lea     ebx, [esp+4B0h]
.text:004198B8                 mov     [edx+40h], edi
.text:004198BB                 mov     [esp+4], ecx
.text:004198BF                 mov     dword ptr [esp+8], 10h
.text:004198C7                 mov     [esp], esi
.text:004198CA                 call    strncpy
.text:004198CF                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:004198D7                 mov     edi, [esp+8D4h]
.text:004198DE                 mov     [esp+4], ebx
.text:004198E2                 add     edi, 5Ch ; '\'
.text:004198E5                 mov     [esp], edi
.text:004198E8                 call    strncpy
.text:004198ED                 mov     [esp+4], ebp
.text:004198F1                 mov     ebp, [esp+8D4h]
.text:004198F8                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00419900                 add     ebp, 0B6h ; '¶'
.text:00419906                 mov     [esp], ebp
.text:00419909                 call    strncpy
.text:0041990E                 xor     eax, eax
.text:00419910
.text:00419910 loc_419910:                             ; CODE XREF: .text:00419A4C↓j
.text:00419910                 add     esp, 8BCh
.text:00419916                 pop     ebx
.text:00419917                 pop     esi
.text:00419918                 pop     edi
.text:00419919                 pop     ebp
.text:0041991A                 retn
.text:0041991A ; ---------------------------------------------------------------------------
.text:0041991B                 align 10h
.text:00419920
.text:00419920 loc_419920:                             ; CODE XREF: .text:00419764↑j
.text:00419920                 mov     dword ptr [esp+4], 4194BDh
.text:00419928                 lea     eax, [esp+0B0h]
.text:0041992F                 mov     [esp], eax
.text:00419932                 call    _stricmp
.text:00419937                 test    eax, eax
.text:00419939                 jnz     short loc_41994D
.text:0041993B                 mov     edx, [esp+8D4h]
.text:00419942                 mov     dword ptr [edx], 4008h
.text:00419948                 jmp     loc_419777
.text:0041994D ; ---------------------------------------------------------------------------
.text:0041994D
.text:0041994D loc_41994D:                             ; CODE XREF: .text:00419939↑j
.text:0041994D                 mov     dword ptr [esp+4], 4194C3h
.text:00419955                 lea     ecx, [esp+0B0h]
.text:0041995C                 mov     [esp], ecx
.text:0041995F                 call    _stricmp
.text:00419964                 test    eax, eax
.text:00419966                 jnz     short loc_41997A
.text:00419968                 mov     ebx, [esp+8D4h]
.text:0041996F                 mov     dword ptr [ebx], 4006h
.text:00419975                 jmp     loc_419777
.text:0041997A ; ---------------------------------------------------------------------------
.text:0041997A
.text:0041997A loc_41997A:                             ; CODE XREF: .text:00419966↑j
.text:0041997A                 mov     dword ptr [esp+4], 4194C7h
.text:00419982                 lea     eax, [esp+0B0h]
.text:00419989                 mov     [esp], eax
.text:0041998C                 call    _stricmp
.text:00419991                 test    eax, eax
.text:00419993                 mov     esi, [esp+8D4h]
.text:0041999A                 setnz   cl
.text:0041999D                 movzx   edx, cl
.text:004199A0                 dec     edx
.text:004199A1                 and     edx, 4000h
.text:004199A7                 mov     [esi], edx
.text:004199A9                 jmp     loc_419777
.text:004199A9 ; ---------------------------------------------------------------------------
.text:004199AE                 align 10h
.text:004199B0
.text:004199B0 loc_4199B0:                             ; CODE XREF: .text:004196CA↑j
.text:004199B0                 mov     edi, [esp+84h]
.text:004199B7                 mov     eax, 1
.text:004199BC                 mov     edx, [esp+88h]
.text:004199C3                 mov     ecx, [esp+8Ch]
.text:004199CA                 mov     ebx, [esp+90h]
.text:004199D1                 mov     [esp+34h], edi
.text:004199D5                 mov     [esp+30h], edx
.text:004199D9                 mov     [esp+2Ch], ecx
.text:004199DD                 mov     [esi], ebx
.text:004199DF                 jmp     loc_4196E0
.text:004199E4 ; ---------------------------------------------------------------------------
.text:004199E4
.text:004199E4 loc_4199E4:                             ; CODE XREF: .text:004195F6↑j
.text:004199E4                 mov     [esp+10h], esi
.text:004199E8                 lea     eax, [esp+2Ch]
.text:004199EC                 lea     esi, [esp+30h]
.text:004199F0                 mov     [esp+0Ch], eax
.text:004199F4                 lea     edi, [esp+34h]
.text:004199F8                 mov     [esp+8], esi
.text:004199FC                 mov     [esp+4], edi
.text:00419A00
.text:00419A00 loc_419A00:                             ; CODE XREF: .text:00419A2C↓j
.text:00419A00                 mov     [esp], ebp
.text:00419A03                 call    GetDiskFreeSpaceA
.text:00419A08                 sub     esp, 14h
.text:00419A0B                 jmp     loc_4196E0
.text:00419A10 ; ---------------------------------------------------------------------------
.text:00419A10
.text:00419A10 loc_419A10:                             ; CODE XREF: .text:004195DF↑j
.text:00419A10                 mov     [esp+10h], esi
.text:00419A14                 lea     ebx, [esp+2Ch]
.text:00419A18                 lea     eax, [esp+30h]
.text:00419A1C                 mov     [esp+0Ch], ebx
.text:00419A20                 lea     esi, [esp+34h]
.text:00419A24                 mov     [esp+8], eax
.text:00419A28                 mov     [esp+4], esi
.text:00419A2C                 jmp     short loc_419A00
.text:00419A2E ; ---------------------------------------------------------------------------
.text:00419A2E
.text:00419A2E loc_419A2E:                             ; CODE XREF: .text:00419597↑j
.text:00419A2E                 mov     [esp], edi
.text:00419A31                 call    FreeLibrary
.text:00419A36                 sub     esp, 4
.text:00419A39                 call    sub_41AD20
.text:00419A3E                 mov     esi, eax
.text:00419A40                 call    _errno
.text:00419A45                 mov     [eax], esi
.text:00419A47
.text:00419A47 loc_419A47:                             ; CODE XREF: .text:00419A67↓j
.text:00419A47                 mov     eax, 0FFFFFFFFh
.text:00419A4C                 jmp     loc_419910
.text:00419A51 ; ---------------------------------------------------------------------------
.text:00419A51
.text:00419A51 loc_419A51:                             ; CODE XREF: .text:00419511↑j
.text:00419A51                 mov     [esp], edi
.text:00419A54                 call    FreeLibrary
.text:00419A59                 sub     esp, 4
.text:00419A5C                 call    _errno
.text:00419A61                 mov     dword ptr [eax], 2
.text:00419A67                 jmp     short loc_419A47
.text:00419A67 ; ---------------------------------------------------------------------------
.text:00419A69                 align 10h
.text:00419A70
.text:00419A70 ; =============== S U B R O U T I N E =======================================
.text:00419A70
.text:00419A70
.text:00419A70 ; int __cdecl sub_419A70(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00419A70 sub_419A70      proc near               ; CODE XREF: sub_416FA0+2C7↑p
.text:00419A70                                         ; .text:004175DA↑p
.text:00419A70
.text:00419A70 lpFileName      = dword ptr -9Ch
.text:00419A70 dwDesiredAccess = dword ptr -98h
.text:00419A70 dwShareMode     = dword ptr -94h
.text:00419A70 lpSecurityAttributes= dword ptr -90h
.text:00419A70 dwCreationDisposition= dword ptr -8Ch
.text:00419A70 dwFlagsAndAttributes= dword ptr -88h
.text:00419A70 hTemplateFile   = dword ptr -84h
.text:00419A70 lpOverlapped    = dword ptr -80h
.text:00419A70 BytesReturned   = dword ptr -70h
.text:00419A70 InBuffer        = byte ptr -6Ch
.text:00419A70 var_68          = dword ptr -68h
.text:00419A70 var_64          = dword ptr -64h
.text:00419A70 var_60          = dword ptr -60h
.text:00419A70 var_5C          = dword ptr -5Ch
.text:00419A70 var_54          = dword ptr -54h
.text:00419A70 var_4C          = byte ptr -4Ch
.text:00419A70 var_48          = dword ptr -48h
.text:00419A70 var_44          = dword ptr -44h
.text:00419A70 var_40          = dword ptr -40h
.text:00419A70 var_3C          = dword ptr -3Ch
.text:00419A70 lpRootPathName  = dword ptr -2Ch
.text:00419A70 lpSectorsPerCluster= dword ptr -28h
.text:00419A70 lpBytesPerSector= dword ptr -24h
.text:00419A70 lpNumberOfFreeClusters= dword ptr -20h
.text:00419A70 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00419A70 var_18          = dword ptr -18h
.text:00419A70 var_14          = dword ptr -14h
.text:00419A70 var_10          = dword ptr -10h
.text:00419A70 var_C           = dword ptr -0Ch
.text:00419A70 var_8           = dword ptr -8
.text:00419A70 var_4           = dword ptr -4
.text:00419A70 arg_0           = dword ptr  4
.text:00419A70 arg_4           = dword ptr  8
.text:00419A70 arg_8           = dword ptr  0Ch
.text:00419A70 arg_C           = dword ptr  10h
.text:00419A70 arg_10          = dword ptr  14h
.text:00419A70
.text:00419A70                 sub     esp, 2Ch
.text:00419A73                 mov     edx, [esp+2Ch+arg_0]
.text:00419A77                 mov     [esp+2Ch+var_10], ebx
.text:00419A7B                 mov     ebx, [esp+2Ch+arg_10]
.text:00419A7F                 mov     [esp+2Ch+var_C], esi
.text:00419A83                 mov     esi, [esp+2Ch+arg_C]
.text:00419A87                 mov     [esp+2Ch+var_8], edi
.text:00419A8B                 mov     edi, [esp+2Ch+arg_8]
.text:00419A8F                 mov     [esp+2Ch+var_4], ebp
.text:00419A93                 mov     ebp, [esp+2Ch+arg_4]
.text:00419A97                 mov     [esp+2Ch+var_14], edx
.text:00419A9B                 call    sub_41B800
.text:00419AA0                 test    eax, eax
.text:00419AA2                 jz      short loc_419AD4
.text:00419AA4                 mov     [esp+2Ch+arg_10], ebx
.text:00419AA8                 mov     edx, [esp+2Ch+var_14]
.text:00419AAC                 mov     ebx, [esp+2Ch+var_10]
.text:00419AB0                 mov     [esp+2Ch+arg_C], esi
.text:00419AB4                 mov     esi, [esp+2Ch+var_C]
.text:00419AB8                 mov     [esp+2Ch+arg_8], edi
.text:00419ABC                 mov     edi, [esp+2Ch+var_8]
.text:00419AC0                 mov     [esp+2Ch+arg_4], ebp
.text:00419AC4                 mov     ebp, [esp+2Ch+var_4]
.text:00419AC8                 mov     [esp+2Ch+arg_0], edx
.text:00419ACC                 add     esp, 2Ch
.text:00419ACF                 jmp     loc_419B80
.text:00419AD4 ; ---------------------------------------------------------------------------
.text:00419AD4
.text:00419AD4 loc_419AD4:                             ; CODE XREF: sub_419A70+32↑j
.text:00419AD4                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00419AD8                 mov     ecx, [esp+2Ch+var_14]
.text:00419ADC                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00419AE0                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00419AE4                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00419AE8                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00419AEB                 call    GetDiskFreeSpaceA
.text:00419AF0                 sub     esp, 14h
.text:00419AF3                 mov     ebx, [esp+2Ch+var_10]
.text:00419AF7                 mov     esi, [esp+2Ch+var_C]
.text:00419AFB                 mov     edi, [esp+2Ch+var_8]
.text:00419AFF                 mov     ebp, [esp+2Ch+var_4]
.text:00419B03                 add     esp, 2Ch
.text:00419B06                 retn
.text:00419B06 ; ---------------------------------------------------------------------------
.text:00419B07                 align 10h
.text:00419B10
.text:00419B10 loc_419B10:                             ; CODE XREF: .text:0041BB1D↓p
.text:00419B10                 sub     esp, 1Ch
.text:00419B13                 mov     [esp+1Ch+var_4], esi
.text:00419B17                 mov     esi, [esp+1Ch+arg_0]
.text:00419B1B                 mov     [esp+1Ch+var_8], ebx
.text:00419B1F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00419B22                 call    sub_419020
.text:00419B27                 test    eax, eax
.text:00419B29                 mov     ebx, eax
.text:00419B2B                 jz      short loc_419B40
.text:00419B2D                 cmp     byte ptr [eax], 0
.text:00419B30                 jz      short loc_419B40
.text:00419B32                 test    esi, esi
.text:00419B34                 jz      short loc_419B40
.text:00419B36                 cmp     byte ptr [esi], 0
.text:00419B39                 jnz     short loc_419B66
.text:00419B3B                 nop
.text:00419B3C                 lea     esi, [esi+0]
.text:00419B40
.text:00419B40 loc_419B40:                             ; CODE XREF: sub_419A70+BB↑j
.text:00419B40                                         ; sub_419A70+C0↑j ...
.text:00419B40                 call    _errno
.text:00419B45                 mov     dword ptr [eax], 2
.text:00419B4B                 mov     esi, 0FFFFFFFFh
.text:00419B50
.text:00419B50 loc_419B50:                             ; CODE XREF: sub_419A70+108↓j
.text:00419B50                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00419B53                 call    free
.text:00419B58                 mov     eax, esi
.text:00419B5A                 mov     ebx, [esp+1Ch+var_8]
.text:00419B5E                 mov     esi, [esp+1Ch+var_4]
.text:00419B62                 add     esp, 1Ch
.text:00419B65                 retn
.text:00419B66 ; ---------------------------------------------------------------------------
.text:00419B66
.text:00419B66 loc_419B66:                             ; CODE XREF: sub_419A70+C9↑j
.text:00419B66                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00419B69                 mov     edx, [esp+1Ch+arg_4]
.text:00419B6D                 mov     [esp+1Ch+var_18], edx
.text:00419B71                 call    near ptr loc_4194CB+5
.text:00419B76                 mov     esi, eax
.text:00419B78                 jmp     short loc_419B50
.text:00419B78 ; ---------------------------------------------------------------------------
.text:00419B7A                 align 10h
.text:00419B80
.text:00419B80 loc_419B80:                             ; CODE XREF: sub_419A70+5F↑j
.text:00419B80                 push    ebp
.text:00419B81                 push    edi
.text:00419B82                 push    esi
.text:00419B83                 push    ebx
.text:00419B84                 sub     esp, 8Ch
.text:00419B8A                 mov     ebp, [esp+9Ch+arg_0]
.text:00419B91                 call    sub_41B800
.text:00419B96                 test    eax, eax
.text:00419B98                 jz      short loc_419BA8
.text:00419B9A                 call    sub_41B750
.text:00419B9F                 cmp     eax, 0Bh
.text:00419BA2                 jle     loc_419CD0
.text:00419BA8
.text:00419BA8 loc_419BA8:                             ; CODE XREF: sub_419A70+128↑j
.text:00419BA8                 cld
.text:00419BA9                 xor     eax, eax
.text:00419BAB                 lea     ebx, [esp+9Ch+InBuffer]
.text:00419BAF                 mov     ecx, 7
.text:00419BB4                 mov     edi, ebx
.text:00419BB6                 lea     esi, [esp+9Ch+var_4C]
.text:00419BBA                 rep stosd
.text:00419BBC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00419BC4                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00419BCC                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00419BD4                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00419BDC                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00419BE4                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00419BEC                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00419BF3                 call    CreateFileA
.text:00419BF8                 sub     esp, 1Ch
.text:00419BFB                 mov     edi, eax
.text:00419BFD                 cmp     eax, 0FFFFFFFFh
.text:00419C00                 jz      short loc_419C75
.text:00419C02                 mov     [esp+9Ch+var_68], ebp
.text:00419C06                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00419C0A                 mov     [esp+9Ch+var_5C], esi
.text:00419C0E                 mov     [esp+9Ch+var_60], 7303h
.text:00419C16                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00419C1E                 mov     [esp+9Ch+var_54], 1
.text:00419C26                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00419C2E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00419C32                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00419C3A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00419C3E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00419C46                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00419C4A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00419C52                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00419C55                 call    DeviceIoControl
.text:00419C5A                 sub     esp, 20h
.text:00419C5D                 mov     esi, eax
.text:00419C5F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00419C62                 call    CloseHandle
.text:00419C67                 sub     esp, 4
.text:00419C6A                 test    esi, esi
.text:00419C6C                 jz      short loc_419C75
.text:00419C6E                 test    byte ptr [esp+9Ch+var_54], 1
.text:00419C73                 jz      short loc_419C90
.text:00419C75
.text:00419C75 loc_419C75:                             ; CODE XREF: sub_419A70+190↑j
.text:00419C75                                         ; sub_419A70+1FC↑j
.text:00419C75                 call    sub_41AD20
.text:00419C7A                 mov     edi, eax
.text:00419C7C                 call    _errno
.text:00419C81                 mov     [eax], edi
.text:00419C83                 xor     eax, eax
.text:00419C85
.text:00419C85 loc_419C85:                             ; CODE XREF: sub_419A70+25A↓j
.text:00419C85                                         ; sub_419A70+297↓j
.text:00419C85                 add     esp, 8Ch
.text:00419C8B                 pop     ebx
.text:00419C8C                 pop     esi
.text:00419C8D                 pop     edi
.text:00419C8E                 pop     ebp
.text:00419C8F                 retn
.text:00419C90 ; ---------------------------------------------------------------------------
.text:00419C90
.text:00419C90 loc_419C90:                             ; CODE XREF: sub_419A70+203↑j
.text:00419C90                 mov     edx, [esp+9Ch+var_48]
.text:00419C94                 mov     eax, 1
.text:00419C99                 mov     ebx, [esp+9Ch+arg_4]
.text:00419CA0                 mov     ebp, [esp+9Ch+arg_8]
.text:00419CA7                 mov     ecx, [esp+9Ch+arg_C]
.text:00419CAE                 mov     [ebx], edx
.text:00419CB0                 mov     edi, [esp+9Ch+var_44]
.text:00419CB4                 mov     ebx, [esp+9Ch+arg_10]
.text:00419CBB                 mov     [ebp+0], edi
.text:00419CBE                 mov     esi, [esp+9Ch+var_40]
.text:00419CC2                 mov     [ecx], esi
.text:00419CC4                 mov     edx, [esp+9Ch+var_3C]
.text:00419CC8                 mov     [ebx], edx
.text:00419CCA                 jmp     short loc_419C85
.text:00419CCA ; ---------------------------------------------------------------------------
.text:00419CCC                 align 10h
.text:00419CD0
.text:00419CD0 loc_419CD0:                             ; CODE XREF: sub_419A70+132↑j
.text:00419CD0                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00419CD3                 mov     eax, [esp+9Ch+arg_C]
.text:00419CDA                 mov     ecx, [esp+9Ch+arg_10]
.text:00419CE1                 mov     edx, [esp+9Ch+arg_8]
.text:00419CE8                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00419CEC                 mov     eax, [esp+9Ch+arg_4]
.text:00419CF3                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00419CF7                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00419CFB                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00419CFF                 call    GetDiskFreeSpaceA
.text:00419D04                 sub     esp, 14h
.text:00419D07                 jmp     loc_419C85
.text:00419D07 sub_419A70      endp ; sp-analysis failed
.text:00419D07
.text:00419D07 ; ---------------------------------------------------------------------------
.text:00419D0C                 align 10h
.text:00419D10
.text:00419D10 ; =============== S U B R O U T I N E =======================================
.text:00419D10
.text:00419D10
.text:00419D10 sub_419D10      proc near               ; CODE XREF: sub_405EA0+173↑p
.text:00419D10                                         ; sub_40C8F0+B7↑p
.text:00419D10
.text:00419D10 var_8           = dword ptr -8
.text:00419D10 var_4           = dword ptr -4
.text:00419D10 arg_0           = dword ptr  4
.text:00419D10
.text:00419D10                 movzx   edx, word ptr [esp+arg_0]
.text:00419D15                 mov     [esp+arg_0], edx
.text:00419D19                 jmp     short loc_419D20
.text:00419D19 ; ---------------------------------------------------------------------------
.text:00419D1B                 align 10h
.text:00419D20
.text:00419D20 loc_419D20:                             ; CODE XREF: sub_419D10+9↑j
.text:00419D20                 sub     esp, 8
.text:00419D23                 mov     edx, off_42B1E4
.text:00419D29                 mov     [esp+8+var_8], ebx
.text:00419D2C                 mov     [esp+8+var_4], esi
.text:00419D30                 mov     ecx, [edx+8]
.text:00419D33                 movzx   ebx, word ptr [esp+8+arg_0]
.text:00419D38                 mov     edx, [ecx+54h]
.text:00419D3B                 mov     eax, ebx
.text:00419D3D                 mov     ecx, [edx]
.text:00419D3F                 shr     eax, cl
.text:00419D41                 cmp     eax, [edx+4]
.text:00419D44                 jnb     short loc_419D90
.text:00419D46                 mov     esi, [edx+eax*4+14h]
.text:00419D4A                 test    esi, esi
.text:00419D4C                 jz      short loc_419D90
.text:00419D4E                 mov     ecx, [edx+8]
.text:00419D51                 mov     eax, ebx
.text:00419D53                 shr     eax, cl
.text:00419D55                 mov     ecx, [edx+0Ch]
.text:00419D58                 and     eax, ecx
.text:00419D5A                 lea     ecx, [edx+eax*4]
.text:00419D5D                 mov     eax, [esi+ecx]
.text:00419D60                 test    eax, eax
.text:00419D62                 jz      short loc_419D90
.text:00419D64                 mov     esi, [edx+10h]
.text:00419D67                 and     ebx, esi
.text:00419D69                 lea     esi, [eax+edx]
.text:00419D6C                 movzx   eax, byte ptr [ebx+esi]
.text:00419D70
.text:00419D70 loc_419D70:                             ; CODE XREF: sub_419D10+85↓j
.text:00419D70                 mov     bl, al
.text:00419D72                 mov     esi, [esp+8+var_4]
.text:00419D76                 inc     bl
.text:00419D78                 setnz   cl
.text:00419D7B                 movzx   eax, al
.text:00419D7E                 movzx   ebx, cl
.text:00419D81                 dec     ebx
.text:00419D82                 or      eax, ebx
.text:00419D84                 mov     ebx, [esp+8+var_8]
.text:00419D87                 add     esp, 8
.text:00419D8A                 retn
.text:00419D8A ; ---------------------------------------------------------------------------
.text:00419D8B                 align 10h
.text:00419D90
.text:00419D90 loc_419D90:                             ; CODE XREF: sub_419D10+34↑j
.text:00419D90                                         ; sub_419D10+3C↑j ...
.text:00419D90                 mov     eax, 0FFh
.text:00419D95                 jmp     short loc_419D70
.text:00419D95 sub_419D10      endp
.text:00419D95
.text:00419D95 ; ---------------------------------------------------------------------------
.text:00419D97                 align 10h
.text:00419DA0
.text:00419DA0 ; =============== S U B R O U T I N E =======================================
.text:00419DA0
.text:00419DA0
.text:00419DA0 ; int __cdecl sub_419DA0(LPCSTR, char *, int)
.text:00419DA0 sub_419DA0      proc near               ; CODE XREF: sub_419460+1A↑p
.text:00419DA0                                         ; sub_426D40+104↓p ...
.text:00419DA0
.text:00419DA0 var_13C         = dword ptr -13Ch
.text:00419DA0 lpString1       = dword ptr -138h
.text:00419DA0 var_134         = dword ptr -134h
.text:00419DA0 String1         = byte ptr -12Ch
.text:00419DA0 var_10          = dword ptr -10h
.text:00419DA0 var_C           = dword ptr -0Ch
.text:00419DA0 var_8           = dword ptr -8
.text:00419DA0 var_4           = dword ptr -4
.text:00419DA0 arg_0           = dword ptr  4
.text:00419DA0 arg_4           = dword ptr  8
.text:00419DA0 arg_8           = dword ptr  0Ch
.text:00419DA0
.text:00419DA0                 sub     esp, 13Ch
.text:00419DA6                 mov     [esp+13Ch+var_10], ebx
.text:00419DAD                 mov     ebx, [esp+13Ch+arg_8]
.text:00419DB4                 mov     [esp+13Ch+var_C], esi
.text:00419DBB                 mov     esi, [esp+13Ch+arg_4]
.text:00419DC2                 mov     [esp+13Ch+var_8], edi
.text:00419DC9                 mov     edi, [esp+13Ch+arg_0]
.text:00419DD0                 mov     [esp+13Ch+var_4], ebp
.text:00419DD7                 mov     [esp+13Ch+var_134], ebx ; int
.text:00419DDB                 mov     [esp+13Ch+lpString1], esi ; int
.text:00419DDF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00419DE2                 call    sub_418300
.text:00419DE7                 cmp     eax, 0FFFFFFFFh
.text:00419DEA                 mov     edx, eax
.text:00419DEC                 jz      short loc_419DFE
.text:00419DEE                 mov     ecx, [ebx]
.text:00419DF0                 and     ecx, 0F000h
.text:00419DF6                 cmp     ecx, 0A000h
.text:00419DFC                 jz      short loc_419E23
.text:00419DFE
.text:00419DFE loc_419DFE:                             ; CODE XREF: sub_419DA0+4C↑j
.text:00419DFE                                         ; sub_419DA0+A1↓j ...
.text:00419DFE                 mov     ebx, [esp+13Ch+var_10]
.text:00419E05                 mov     eax, edx
.text:00419E07                 mov     esi, [esp+13Ch+var_C]
.text:00419E0E                 mov     edi, [esp+13Ch+var_8]
.text:00419E15                 mov     ebp, [esp+13Ch+var_4]
.text:00419E1C                 add     esp, 13Ch
.text:00419E22                 retn
.text:00419E23 ; ---------------------------------------------------------------------------
.text:00419E23
.text:00419E23 loc_419E23:                             ; CODE XREF: sub_419DA0+5C↑j
.text:00419E23                 mov     [esp+13Ch+var_134], 104h
.text:00419E2B                 lea     ebp, [esp+13Ch+String1]
.text:00419E2F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00419E33                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00419E36                 call    sub_418F30
.text:00419E3B                 inc     eax
.text:00419E3C                 mov     edx, 0FFFFFFFFh
.text:00419E41                 jz      short loc_419DFE
.text:00419E43                 mov     [esp+13Ch+var_134], ebx ; int
.text:00419E47                 mov     [esp+13Ch+lpString1], ebp ; int
.text:00419E4B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00419E4E                 call    sub_418300
.text:00419E53                 mov     edx, eax
.text:00419E55                 jmp     short loc_419DFE
.text:00419E55 sub_419DA0      endp
.text:00419E55
.text:00419E55 ; ---------------------------------------------------------------------------
.text:00419E57                 align 10h
.text:00419E60
.text:00419E60 ; =============== S U B R O U T I N E =======================================
.text:00419E60
.text:00419E60
.text:00419E60 sub_419E60      proc near               ; CODE XREF: sub_405490+455↑p
.text:00419E60                                         ; sub_4270C0+3C2↓p
.text:00419E60
.text:00419E60 var_1C          = dword ptr -1Ch
.text:00419E60 var_18          = dword ptr -18h
.text:00419E60 var_C           = dword ptr -0Ch
.text:00419E60 var_8           = dword ptr -8
.text:00419E60 var_4           = dword ptr -4
.text:00419E60 arg_0           = dword ptr  4
.text:00419E60 arg_4           = dword ptr  8
.text:00419E60
.text:00419E60                 sub     esp, 1Ch
.text:00419E63                 mov     edx, [esp+1Ch+arg_4]
.text:00419E67                 mov     [esp+1Ch+var_4], ebx
.text:00419E6B                 mov     ebx, [esp+1Ch+arg_0]
.text:00419E6F                 mov     [esp+1Ch+var_18], edx
.text:00419E73                 lea     edx, [esp+1Ch+var_C]
.text:00419E77                 mov     [esp+1Ch+var_1C], edx
.text:00419E7A                 call    sub_41C7C0
.text:00419E7F                 test    eax, eax
.text:00419E81                 mov     edx, 0FFFFFFFFh
.text:00419E86                 jnz     short loc_419EAA
.text:00419E88                 mov     ecx, [esp+1Ch+var_C]
.text:00419E8C                 mov     edx, 10624DD3h
.text:00419E91                 mov     [ebx], ecx
.text:00419E93                 mov     ecx, [esp+1Ch+var_8]
.text:00419E97                 mov     eax, ecx
.text:00419E99                 imul    edx
.text:00419E9B                 mov     eax, ecx
.text:00419E9D                 sar     eax, 1Fh
.text:00419EA0                 sar     edx, 6
.text:00419EA3                 sub     edx, eax
.text:00419EA5                 mov     [ebx+4], edx
.text:00419EA8                 xor     edx, edx
.text:00419EAA
.text:00419EAA loc_419EAA:                             ; CODE XREF: sub_419E60+26↑j
.text:00419EAA                 mov     ebx, [esp+1Ch+var_4]
.text:00419EAE                 mov     eax, edx
.text:00419EB0                 add     esp, 1Ch
.text:00419EB3                 retn
.text:00419EB3 sub_419E60      endp
.text:00419EB3
.text:00419EB3 ; ---------------------------------------------------------------------------
.text:00419EB4                 align 10h
.text:00419EC0
.text:00419EC0 ; =============== S U B R O U T I N E =======================================
.text:00419EC0
.text:00419EC0
.text:00419EC0 sub_419EC0      proc near               ; CODE XREF: sub_405490+419↑p
.text:00419EC0
.text:00419EC0 var_2C          = dword ptr -2Ch
.text:00419EC0 var_28          = dword ptr -28h
.text:00419EC0 var_24          = dword ptr -24h
.text:00419EC0 var_20          = dword ptr -20h
.text:00419EC0 var_1C          = dword ptr -1Ch
.text:00419EC0 var_18          = dword ptr -18h
.text:00419EC0 var_10          = dword ptr -10h
.text:00419EC0 var_C           = dword ptr -0Ch
.text:00419EC0 var_8           = dword ptr -8
.text:00419EC0 var_4           = dword ptr -4
.text:00419EC0 arg_0           = dword ptr  4
.text:00419EC0 arg_4           = dword ptr  8
.text:00419EC0
.text:00419EC0                 sub     esp, 2Ch
.text:00419EC3                 mov     eax, [esp+2Ch+arg_0]
.text:00419EC7                 mov     [esp+2Ch+var_10], ebx
.text:00419ECB                 mov     ebx, 0FFFFFFFFh
.text:00419ED0                 test    eax, eax
.text:00419ED2                 mov     [esp+2Ch+var_C], esi
.text:00419ED6                 mov     [esp+2Ch+var_8], edi
.text:00419EDA                 mov     [esp+2Ch+var_4], ebp
.text:00419EDE                 jz      loc_419FD0
.text:00419EE4                 test    eax, eax
.text:00419EE6                 js      loc_419FC3
.text:00419EEC                 sub     eax, 2
.text:00419EEF                 cmp     eax, 1
.text:00419EF2                 ja      loc_419FC3
.text:00419EF8                 mov     ebp, ds:dword_42C854
.text:00419EFE                 mov     edi, ds:dword_42C850
.text:00419F04                 mov     eax, ebp
.text:00419F06                 or      eax, edi
.text:00419F08                 jz      loc_419FA6
.text:00419F0E
.text:00419F0E loc_419F0E:                             ; CODE XREF: sub_419EC0+FE↓j
.text:00419F0E                 rdtsc
.text:00419F10                 mov     [esp+2Ch+var_24], edi
.text:00419F14                 mov     ebx, eax
.text:00419F16                 mov     esi, edx
.text:00419F18                 mov     [esp+2Ch+var_20], ebp
.text:00419F1C                 mov     [esp+2Ch+var_2C], eax
.text:00419F1F                 mov     [esp+2Ch+var_28], edx
.text:00419F23                 call    sub_429510
.text:00419F28                 mov     edx, [esp+2Ch+arg_4]
.text:00419F2C                 mov     [edx], eax
.text:00419F2E                 mov     [esp+2Ch+var_2C], ebx
.text:00419F31                 mov     ebx, 3B9ACA00h
.text:00419F36                 mov     [esp+2Ch+var_24], edi
.text:00419F3A                 mov     [esp+2Ch+var_20], ebp
.text:00419F3E                 mov     [esp+2Ch+var_28], esi
.text:00419F42                 call    sub_429070
.text:00419F47                 mov     [esp+2Ch+var_1C], eax
.text:00419F4B                 mov     eax, [esp+2Ch+var_1C]
.text:00419F4F                 mov     [esp+2Ch+var_18], edx
.text:00419F53                 mov     [esp+2Ch+var_24], edi
.text:00419F57                 mul     ebx
.text:00419F59                 mov     ebx, [esp+2Ch+var_18]
.text:00419F5D                 mov     [esp+2Ch+var_20], ebp
.text:00419F61                 imul    ebx, 3B9ACA00h
.text:00419F67                 mov     ecx, eax
.text:00419F69                 mov     [esp+2Ch+var_2C], ecx
.text:00419F6C                 lea     edx, [ebx+edx]
.text:00419F6F                 mov     [esp+2Ch+var_28], edx
.text:00419F73                 call    sub_429510
.text:00419F78                 mov     ebx, [esp+2Ch+arg_4]
.text:00419F7C                 mov     [ebx+4], eax
.text:00419F7F                 xor     ebx, ebx
.text:00419F81                 jmp     short loc_419F90
.text:00419F81 ; ---------------------------------------------------------------------------
.text:00419F83                 align 10h
.text:00419F90
.text:00419F90 loc_419F90:                             ; CODE XREF: sub_419EC0+C1↑j
.text:00419F90                                         ; sub_419EC0+FC↓j ...
.text:00419F90                 mov     eax, ebx
.text:00419F92                 mov     esi, [esp+2Ch+var_C]
.text:00419F96                 mov     ebx, [esp+2Ch+var_10]
.text:00419F9A                 mov     edi, [esp+2Ch+var_8]
.text:00419F9E                 mov     ebp, [esp+2Ch+var_4]
.text:00419FA2                 add     esp, 2Ch
.text:00419FA5                 retn
.text:00419FA6 ; ---------------------------------------------------------------------------
.text:00419FA6
.text:00419FA6 loc_419FA6:                             ; CODE XREF: sub_419EC0+48↑j
.text:00419FA6                 call    sub_41C8B0
.text:00419FAB                 mov     ds:dword_42C854, edx
.text:00419FB1                 mov     edi, eax
.text:00419FB3                 mov     ebp, edx
.text:00419FB5                 mov     ds:dword_42C850, eax
.text:00419FBA                 or      edx, edi
.text:00419FBC                 jz      short loc_419F90
.text:00419FBE                 jmp     loc_419F0E
.text:00419FC3 ; ---------------------------------------------------------------------------
.text:00419FC3
.text:00419FC3 loc_419FC3:                             ; CODE XREF: sub_419EC0+26↑j
.text:00419FC3                                         ; sub_419EC0+32↑j
.text:00419FC3                 call    _errno
.text:00419FC8                 mov     dword ptr [eax], 16h
.text:00419FCE                 jmp     short loc_419F90
.text:00419FD0 ; ---------------------------------------------------------------------------
.text:00419FD0
.text:00419FD0 loc_419FD0:                             ; CODE XREF: sub_419EC0+1E↑j
.text:00419FD0                 mov     [esp+2Ch+var_28], 0
.text:00419FD8                 mov     edx, [esp+2Ch+arg_4]
.text:00419FDC                 mov     [esp+2Ch+var_2C], edx
.text:00419FDF                 call    sub_41C7C0
.text:00419FE4                 mov     ebx, eax
.text:00419FE6                 jmp     short loc_419F90
.text:00419FE6 sub_419EC0      endp
.text:00419FE6
.text:00419FE6 ; ---------------------------------------------------------------------------
.text:00419FE8                 align 10h
.text:00419FF0                 xor     eax, eax
.text:00419FF2                 retn
.text:00419FF2 ; ---------------------------------------------------------------------------
.text:00419FF3                 align 10h
.text:0041A000
.text:0041A000 ; =============== S U B R O U T I N E =======================================
.text:0041A000
.text:0041A000
.text:0041A000 ; int __cdecl sub_41A000(void *, void *Src, size_t Size, int, int)
.text:0041A000 sub_41A000      proc near               ; CODE XREF: sub_41A000+72↓p
.text:0041A000                                         ; sub_41A000+96↓p ...
.text:0041A000
.text:0041A000 var_3C          = dword ptr -3Ch
.text:0041A000 var_38          = dword ptr -38h
.text:0041A000 var_34          = dword ptr -34h
.text:0041A000 var_30          = dword ptr -30h
.text:0041A000 var_2C          = dword ptr -2Ch
.text:0041A000 var_28          = dword ptr -28h
.text:0041A000 var_24          = dword ptr -24h
.text:0041A000 var_20          = dword ptr -20h
.text:0041A000 var_1C          = dword ptr -1Ch
.text:0041A000 var_18          = dword ptr -18h
.text:0041A000 var_14          = dword ptr -14h
.text:0041A000 arg_0           = dword ptr  4
.text:0041A000 Src             = dword ptr  8
.text:0041A000 Size            = dword ptr  0Ch
.text:0041A000 arg_C           = dword ptr  10h
.text:0041A000 arg_10          = dword ptr  14h
.text:0041A000
.text:0041A000                 push    ebp
.text:0041A001                 push    edi
.text:0041A002                 push    esi
.text:0041A003                 push    ebx
.text:0041A004                 sub     esp, 2Ch
.text:0041A007                 mov     edx, [esp+3Ch+arg_0]
.text:0041A00B                 mov     ebx, [esp+3Ch+Src]
.text:0041A00F                 mov     eax, [esp+3Ch+arg_C]
.text:0041A013                 mov     edi, [esp+3Ch+Size]
.text:0041A017                 mov     [esp+3Ch+var_14], edx
.text:0041A01B                 cmp     ebx, 1
.text:0041A01E                 mov     edx, [esp+3Ch+arg_10]
.text:0041A022                 mov     [esp+3Ch+var_18], eax
.text:0041A026                 mov     [esp+3Ch+var_1C], edx
.text:0041A02A                 ja      short loc_41A034
.text:0041A02C                 add     esp, 2Ch
.text:0041A02F                 pop     ebx
.text:0041A030                 pop     esi
.text:0041A031                 pop     edi
.text:0041A032                 pop     ebp
.text:0041A033                 retn
.text:0041A034 ; ---------------------------------------------------------------------------
.text:0041A034
.text:0041A034 loc_41A034:                             ; CODE XREF: sub_41A000+2A↑j
.text:0041A034                 mov     [esp+3Ch+var_34], edi ; Size
.text:0041A038                 mov     esi, ebx
.text:0041A03A                 mov     ebp, [esp+3Ch+var_14]
.text:0041A03E                 shr     esi, 1
.text:0041A040                 mov     eax, ebx
.text:0041A042                 mov     ecx, [esp+3Ch+var_1C]
.text:0041A046                 mov     [esp+3Ch+var_38], esi ; Src
.text:0041A04A                 mov     edx, esi
.text:0041A04C                 sub     eax, esi
.text:0041A04E                 mov     [esp+3Ch+var_24], ebp
.text:0041A052                 imul    edx, edi
.text:0041A055                 mov     ebp, [esp+3Ch+var_14]
.text:0041A059                 mov     [esp+3Ch+var_28], eax
.text:0041A05D                 mov     eax, [esp+3Ch+var_14]
.text:0041A061                 add     ebp, edx
.text:0041A063                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0041A067                 mov     edx, [esp+3Ch+var_18]
.text:0041A06B                 mov     [esp+3Ch+var_3C], eax ; void *
.text:0041A06E                 mov     [esp+3Ch+var_30], edx ; int
.text:0041A072                 call    sub_41A000
.text:0041A077                 mov     [esp+3Ch+var_34], edi ; Size
.text:0041A07B                 mov     ecx, [esp+3Ch+var_1C]
.text:0041A07F                 mov     eax, [esp+3Ch+var_18]
.text:0041A083                 mov     [esp+3Ch+var_3C], ebp ; void *
.text:0041A086                 mov     edx, [esp+3Ch+var_28]
.text:0041A08A                 mov     [esp+3Ch+var_2C], ecx ; int
.text:0041A08E                 mov     [esp+3Ch+var_30], eax ; int
.text:0041A092                 mov     [esp+3Ch+var_38], edx ; Src
.text:0041A096                 call    sub_41A000
.text:0041A09B                 mov     ecx, [esp+3Ch+var_1C]
.text:0041A09F                 cmp     edi, 4
.text:0041A0A2                 mov     [esp+3Ch+var_20], ecx
.text:0041A0A6                 jz      loc_41A172
.text:0041A0AC
.text:0041A0AC loc_41A0AC:                             ; CODE XREF: sub_41A000+177↓j
.text:0041A0AC                 test    esi, esi
.text:0041A0AE                 jnz     short loc_41A0E0
.text:0041A0B0
.text:0041A0B0 loc_41A0B0:                             ; CODE XREF: sub_41A000+EA↓j
.text:0041A0B0                                         ; sub_41A000+107↓j ...
.text:0041A0B0                 mov     edx, [esp+3Ch+var_28]
.text:0041A0B4                 sub     ebx, edx
.text:0041A0B6                 imul    ebx, edi
.text:0041A0B9                 mov     edi, [esp+3Ch+var_1C]
.text:0041A0BD                 mov     [esp+3Ch+Size], ebx ; Size
.text:0041A0C1                 mov     ebx, [esp+3Ch+var_14]
.text:0041A0C5                 mov     [esp+3Ch+Src], edi ; Src
.text:0041A0C9                 mov     [esp+3Ch+arg_0], ebx ; void *
.text:0041A0CD                 add     esp, 2Ch
.text:0041A0D0                 pop     ebx
.text:0041A0D1                 pop     esi
.text:0041A0D2                 pop     edi
.text:0041A0D3                 pop     ebp
.text:0041A0D4                 jmp     memcpy
.text:0041A0D4 ; ---------------------------------------------------------------------------
.text:0041A0D9                 align 10h
.text:0041A0E0
.text:0041A0E0 loc_41A0E0:                             ; CODE XREF: sub_41A000+AE↑j
.text:0041A0E0                 mov     eax, [esp+3Ch+var_28]
.text:0041A0E4                 test    eax, eax
.text:0041A0E6                 jnz     short loc_41A110
.text:0041A0E8
.text:0041A0E8 loc_41A0E8:                             ; CODE XREF: sub_41A000+151↓j
.text:0041A0E8                                         ; sub_41A000+18B↓j ...
.text:0041A0E8                 test    esi, esi
.text:0041A0EA                 jz      short loc_41A0B0
.text:0041A0EC                 imul    esi, edi
.text:0041A0EF                 mov     ebp, [esp+3Ch+var_24]
.text:0041A0F3                 mov     [esp+3Ch+var_38], ebp ; Src
.text:0041A0F7                 mov     [esp+3Ch+var_34], esi ; Size
.text:0041A0FB                 mov     esi, [esp+3Ch+var_20]
.text:0041A0FF                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0041A102                 call    memcpy
.text:0041A107                 jmp     short loc_41A0B0
.text:0041A107 ; ---------------------------------------------------------------------------
.text:0041A109                 align 10h
.text:0041A110
.text:0041A110 loc_41A110:                             ; CODE XREF: sub_41A000+E6↑j
.text:0041A110                                         ; sub_41A000+14F↓j
.text:0041A110                 mov     [esp+3Ch+var_38], ebp
.text:0041A114                 mov     ecx, [esp+3Ch+var_24]
.text:0041A118                 mov     [esp+3Ch+var_3C], ecx
.text:0041A11B                 call    [esp+3Ch+var_18]
.text:0041A11F                 test    eax, eax
.text:0041A121                 jle     short loc_41A153
.text:0041A123                 mov     [esp+3Ch+var_38], ebp
.text:0041A127                 mov     ecx, [esp+3Ch+var_20]
.text:0041A12B                 add     ebp, edi
.text:0041A12D                 mov     [esp+3Ch+var_34], edi
.text:0041A131                 mov     [esp+3Ch+var_3C], ecx
.text:0041A134                 call    sub_41A930
.text:0041A139                 dec     [esp+3Ch+var_28]
.text:0041A13D
.text:0041A13D loc_41A13D:                             ; CODE XREF: sub_41A000+170↓j
.text:0041A13D                 mov     [esp+3Ch+var_20], eax
.text:0041A141                 test    esi, esi
.text:0041A143                 jz      loc_41A0B0
.text:0041A149                 mov     eax, [esp+3Ch+var_28]
.text:0041A14D                 test    eax, eax
.text:0041A14F                 jnz     short loc_41A110
.text:0041A151                 jmp     short loc_41A0E8
.text:0041A153 ; ---------------------------------------------------------------------------
.text:0041A153
.text:0041A153 loc_41A153:                             ; CODE XREF: sub_41A000+121↑j
.text:0041A153                 mov     [esp+3Ch+var_34], edi
.text:0041A157                 mov     eax, [esp+3Ch+var_24]
.text:0041A15B                 dec     esi
.text:0041A15C                 mov     edx, [esp+3Ch+var_20]
.text:0041A160                 mov     [esp+3Ch+var_38], eax
.text:0041A164                 mov     [esp+3Ch+var_3C], edx
.text:0041A167                 call    sub_41A930
.text:0041A16C                 add     [esp+3Ch+var_24], edi
.text:0041A170                 jmp     short loc_41A13D
.text:0041A172 ; ---------------------------------------------------------------------------
.text:0041A172
.text:0041A172 loc_41A172:                             ; CODE XREF: sub_41A000+A6↑j
.text:0041A172                 test    byte ptr [esp+3Ch+var_14], 3
.text:0041A177                 jnz     loc_41A0AC
.text:0041A17D                 test    esi, esi
.text:0041A17F                 jz      loc_41A0B0
.text:0041A185                 mov     ecx, [esp+3Ch+var_28]
.text:0041A189                 test    ecx, ecx
.text:0041A18B                 jz      loc_41A0E8
.text:0041A191
.text:0041A191 loc_41A191:                             ; CODE XREF: sub_41A000+1C9↓j
.text:0041A191                 mov     [esp+3Ch+var_38], ebp
.text:0041A195                 mov     edx, [esp+3Ch+var_24]
.text:0041A199                 mov     [esp+3Ch+var_3C], edx
.text:0041A19C                 call    [esp+3Ch+var_18]
.text:0041A1A0                 test    eax, eax
.text:0041A1A2                 jle     short loc_41A1D0
.text:0041A1A4                 dec     [esp+3Ch+var_28]
.text:0041A1A8                 mov     ecx, [ebp+0]
.text:0041A1AB                 add     ebp, 4
.text:0041A1AE                 mov     edx, [esp+3Ch+var_20]
.text:0041A1B2
.text:0041A1B2 loc_41A1B2:                             ; CODE XREF: sub_41A000+1E0↓j
.text:0041A1B2                 mov     [edx], ecx
.text:0041A1B4                 add     edx, 4
.text:0041A1B7                 test    esi, esi
.text:0041A1B9                 mov     [esp+3Ch+var_20], edx
.text:0041A1BD                 jz      loc_41A0B0
.text:0041A1C3                 mov     edx, [esp+3Ch+var_28]
.text:0041A1C7                 test    edx, edx
.text:0041A1C9                 jnz     short loc_41A191
.text:0041A1CB                 jmp     loc_41A0E8
.text:0041A1D0 ; ---------------------------------------------------------------------------
.text:0041A1D0
.text:0041A1D0 loc_41A1D0:                             ; CODE XREF: sub_41A000+1A2↑j
.text:0041A1D0                 mov     eax, [esp+3Ch+var_24]
.text:0041A1D4                 dec     esi
.text:0041A1D5                 mov     edx, [esp+3Ch+var_20]
.text:0041A1D9                 add     [esp+3Ch+var_24], 4
.text:0041A1DE                 mov     ecx, [eax]
.text:0041A1E0                 jmp     short loc_41A1B2
.text:0041A1E0 sub_41A000      endp
.text:0041A1E0
.text:0041A1E0 ; ---------------------------------------------------------------------------
.text:0041A1E2                 align 10h
.text:0041A1F0
.text:0041A1F0 ; =============== S U B R O U T I N E =======================================
.text:0041A1F0
.text:0041A1F0
.text:0041A1F0 ; int __cdecl sub_41A1F0(void *Block, void *, size_t, int)
.text:0041A1F0 sub_41A1F0      proc near               ; CODE XREF: sub_404FA0+9F↑p
.text:0041A1F0
.text:0041A1F0 Size            = dword ptr -2Ch
.text:0041A1F0 Src             = dword ptr -28h
.text:0041A1F0 var_24          = dword ptr -24h
.text:0041A1F0 var_20          = dword ptr -20h
.text:0041A1F0 var_1C          = dword ptr -1Ch
.text:0041A1F0 var_18          = dword ptr -18h
.text:0041A1F0 var_14          = dword ptr -14h
.text:0041A1F0 var_10          = dword ptr -10h
.text:0041A1F0 var_C           = dword ptr -0Ch
.text:0041A1F0 var_8           = dword ptr -8
.text:0041A1F0 var_4           = dword ptr -4
.text:0041A1F0 Block           = dword ptr  4
.text:0041A1F0 arg_4           = dword ptr  8
.text:0041A1F0 arg_8           = dword ptr  0Ch
.text:0041A1F0 arg_C           = dword ptr  10h
.text:0041A1F0
.text:0041A1F0                 sub     esp, 2Ch
.text:0041A1F3                 mov     edx, [esp+2Ch+Block]
.text:0041A1F7                 mov     [esp+2Ch+var_8], edi
.text:0041A1FB                 mov     edi, [esp+2Ch+arg_4]
.text:0041A1FF                 mov     [esp+2Ch+var_C], esi
.text:0041A203                 mov     esi, [esp+2Ch+arg_8]
.text:0041A207                 mov     [esp+2Ch+var_10], ebx
.text:0041A20B                 mov     ebx, edi
.text:0041A20D                 imul    ebx, esi
.text:0041A210                 mov     [esp+2Ch+var_4], ebp
.text:0041A214                 mov     ebp, [esp+2Ch+arg_C]
.text:0041A218                 mov     [esp+2Ch+var_14], edx
.text:0041A21C                 cmp     ebx, 3FFh
.text:0041A222                 jbe     loc_41A335
.text:0041A228                 mov     ecx, ds:dword_42C860
.text:0041A22E                 test    ecx, ecx
.text:0041A230                 jz      loc_41A2E0
.text:0041A236
.text:0041A236 loc_41A236:                             ; CODE XREF: sub_41A1F0+12E↓j
.text:0041A236                 xor     edx, edx
.text:0041A238                 mov     eax, ebx
.text:0041A23A                 div     ds:dword_42C870
.text:0041A240                 cmp     eax, ecx
.text:0041A242                 jbe     short loc_41A270
.text:0041A244
.text:0041A244 loc_41A244:                             ; CODE XREF: sub_41A1F0+E7↓j
.text:0041A244                 mov     [esp+2Ch+arg_8], esi
.text:0041A248                 mov     ebx, [esp+2Ch+var_10]
.text:0041A24C                 mov     esi, [esp+2Ch+var_14]
.text:0041A250                 mov     [esp+2Ch+arg_C], ebp
.text:0041A254                 mov     ebp, [esp+2Ch+var_4]
.text:0041A258                 mov     [esp+2Ch+arg_4], edi
.text:0041A25C                 mov     edi, [esp+2Ch+var_8]
.text:0041A260                 mov     [esp+2Ch+Block], esi
.text:0041A264                 mov     esi, [esp+2Ch+var_C]
.text:0041A268                 add     esp, 2Ch
.text:0041A26B                 jmp     __quicksort
.text:0041A270 ; ---------------------------------------------------------------------------
.text:0041A270
.text:0041A270 loc_41A270:                             ; CODE XREF: sub_41A1F0+52↑j
.text:0041A270                 call    _errno
.text:0041A275                 mov     edx, [eax]
.text:0041A277                 mov     [esp+2Ch+Size], ebx ; Size
.text:0041A27A                 mov     [esp+2Ch+var_18], edx
.text:0041A27E                 call    malloc
.text:0041A283                 test    eax, eax
.text:0041A285                 mov     ebx, eax
.text:0041A287                 jz      short loc_41A2CC
.text:0041A289                 call    _errno
.text:0041A28E                 mov     ecx, [esp+2Ch+var_18]
.text:0041A292                 mov     [eax], ecx
.text:0041A294                 mov     [esp+2Ch+Src], edi ; Src
.text:0041A298                 mov     edi, [esp+2Ch+var_14]
.text:0041A29C                 mov     [esp+2Ch+var_1C], ebx ; int
.text:0041A2A0                 mov     [esp+2Ch+var_20], ebp ; int
.text:0041A2A4                 mov     [esp+2Ch+var_24], esi ; Size
.text:0041A2A8                 mov     [esp+2Ch+Size], edi ; void *
.text:0041A2AB                 call    sub_41A000
.text:0041A2B0                 mov     [esp+2Ch+Block], ebx ; Block
.text:0041A2B4                 mov     esi, [esp+2Ch+var_C]
.text:0041A2B8                 mov     ebx, [esp+2Ch+var_10]
.text:0041A2BC                 mov     edi, [esp+2Ch+var_8]
.text:0041A2C0                 mov     ebp, [esp+2Ch+var_4]
.text:0041A2C4                 add     esp, 2Ch
.text:0041A2C7                 jmp     free
.text:0041A2CC ; ---------------------------------------------------------------------------
.text:0041A2CC
.text:0041A2CC loc_41A2CC:                             ; CODE XREF: sub_41A1F0+97↑j
.text:0041A2CC                 call    _errno
.text:0041A2D1                 mov     ebx, [esp+2Ch+var_18]
.text:0041A2D5                 mov     [eax], ebx
.text:0041A2D7                 jmp     loc_41A244
.text:0041A2D7 ; ---------------------------------------------------------------------------
.text:0041A2DC                 align 10h
.text:0041A2E0
.text:0041A2E0 loc_41A2E0:                             ; CODE XREF: sub_41A1F0+40↑j
.text:0041A2E0                 mov     [esp+2Ch+Size], 55h ; 'U'
.text:0041A2E7                 call    _sysconf
.text:0041A2EC                 mov     ds:dword_42C860, eax
.text:0041A2F1                 mov     edx, eax
.text:0041A2F3                 inc     edx
.text:0041A2F4                 jz      short loc_41A328
.text:0041A2F6
.text:0041A2F6 loc_41A2F6:                             ; CODE XREF: sub_41A1F0+143↓j
.text:0041A2F6                 mov     eax, ds:dword_42C860
.text:0041A2FB                 test    eax, eax
.text:0041A2FD                 js      short loc_41A323
.text:0041A2FF
.text:0041A2FF loc_41A2FF:                             ; CODE XREF: sub_41A1F0+136↓j
.text:0041A2FF                 mov     [esp+2Ch+Size], 1Eh
.text:0041A306                 sar     eax, 2
.text:0041A309                 mov     ds:dword_42C860, eax
.text:0041A30E                 call    _sysconf
.text:0041A313                 mov     ds:dword_42C870, eax
.text:0041A318                 mov     ecx, ds:dword_42C860
.text:0041A31E                 jmp     loc_41A236
.text:0041A323 ; ---------------------------------------------------------------------------
.text:0041A323
.text:0041A323 loc_41A323:                             ; CODE XREF: sub_41A1F0+10D↑j
.text:0041A323                 add     eax, 3
.text:0041A326                 jmp     short loc_41A2FF
.text:0041A328 ; ---------------------------------------------------------------------------
.text:0041A328
.text:0041A328 loc_41A328:                             ; CODE XREF: sub_41A1F0+104↑j
.text:0041A328                 mov     ecx, 7FFFFFFFh
.text:0041A32D                 mov     ds:dword_42C860, ecx
.text:0041A333                 jmp     short loc_41A2F6
.text:0041A335 ; ---------------------------------------------------------------------------
.text:0041A335
.text:0041A335 loc_41A335:                             ; CODE XREF: sub_41A1F0+32↑j
.text:0041A335                 mov     [esp+2Ch+Size], ebx ; Size
.text:0041A338                 call    malloc
.text:0041A33D                 mov     [esp+2Ch+var_1C], eax ; int
.text:0041A341                 mov     eax, [esp+2Ch+var_14]
.text:0041A345                 mov     [esp+2Ch+var_20], ebp ; int
.text:0041A349                 mov     [esp+2Ch+var_24], esi ; Size
.text:0041A34D                 mov     [esp+2Ch+Src], edi ; Src
.text:0041A351                 mov     [esp+2Ch+Size], eax ; void *
.text:0041A354                 call    sub_41A000
.text:0041A359                 mov     ebx, [esp+2Ch+var_10]
.text:0041A35D                 mov     esi, [esp+2Ch+var_C]
.text:0041A361                 mov     edi, [esp+2Ch+var_8]
.text:0041A365                 mov     ebp, [esp+2Ch+var_4]
.text:0041A369                 add     esp, 2Ch
.text:0041A36C                 retn
.text:0041A36C sub_41A1F0      endp
.text:0041A36C
.text:0041A36C ; ---------------------------------------------------------------------------
.text:0041A36D                 align 10h
.text:0041A370 dword_41A370    dd 0                    ; DATA XREF: sub_41A4A0+94↓r
.text:0041A374                 dd 4, 0Ch, 2 dup(0)
.text:0041A384                 dd 3 dup(4), 0
.text:0041A394                 dd 3 dup(8), 0
.text:0041A3A4                 dd 8, 2 dup(0Ch)
.text:0041A3B0 dword_41A3B0    dd 2                    ; DATA XREF: sub_41A4A0+13A↓r
.text:0041A3B4                 dd 4 dup(2), 3, 0Bh dup(2), 2 dup(0FFFFFFFFh), 2, 1, 2 dup(3)
.text:0041A3B4                 dd 2, 1, 2 dup(3), 0Ah dup(2), 3, 0Bh dup(2), 2 dup(1)
.text:0041A3B4                 dd 2, 0FFFFFFFFh, 3 dup(2), 0FFFFFFFFh, 3 dup(2)
.text:0041A4A0
.text:0041A4A0 ; =============== S U B R O U T I N E =======================================
.text:0041A4A0
.text:0041A4A0
.text:0041A4A0 sub_41A4A0      proc near               ; CODE XREF: .text:0040A204↑j
.text:0041A4A0                                         ; sub_40A210+16↑p
.text:0041A4A0
.text:0041A4A0 C               = dword ptr -2Ch
.text:0041A4A0 Type            = dword ptr -28h
.text:0041A4A0 var_18          = dword ptr -18h
.text:0041A4A0 var_12          = byte ptr -12h
.text:0041A4A0 var_11          = byte ptr -11h
.text:0041A4A0 arg_0           = dword ptr  4
.text:0041A4A0 arg_4           = dword ptr  8
.text:0041A4A0
.text:0041A4A0                 push    ebp
.text:0041A4A1                 xor     edx, edx
.text:0041A4A3                 push    edi
.text:0041A4A4                 push    esi
.text:0041A4A5                 push    ebx
.text:0041A4A6                 sub     esp, 1Ch
.text:0041A4A9                 mov     esi, [esp+2Ch+arg_0]
.text:0041A4AD                 mov     edi, [esp+2Ch+arg_4]
.text:0041A4B1                 cmp     esi, edi
.text:0041A4B3                 jz      loc_41A5EF
.text:0041A4B9                 movzx   edx, byte ptr [esi]
.text:0041A4BC                 xor     ebx, ebx
.text:0041A4BE                 inc     esi
.text:0041A4BF                 mov     ecx, ds:__mb_cur_max
.text:0041A4C5                 mov     [esp+2Ch+var_11], dl
.text:0041A4C9                 movzx   edx, byte ptr [edi]
.text:0041A4CC                 inc     edi
.text:0041A4CD                 cmp     [esp+2Ch+var_11], 30h ; '0'
.text:0041A4D2                 mov     [esp+2Ch+var_12], dl
.text:0041A4D6                 setz    bl
.text:0041A4D9                 cmp     dword ptr [ecx], 1
.text:0041A4DC                 movzx   edx, [esp+2Ch+var_11]
.text:0041A4E1                 jz      loc_41A6E0
.text:0041A4E7                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A4EF                 mov     [esp+2Ch+C], edx ; C
.text:0041A4F2                 call    _isctype
.text:0041A4F7                 mov     ecx, ds:__mb_cur_max
.text:0041A4FD
.text:0041A4FD loc_41A4FD:                             ; CODE XREF: sub_41A4A0+24F↓j
.text:0041A4FD                 test    eax, eax
.text:0041A4FF                 mov     edx, ebx
.text:0041A501                 jz      short loc_41A506
.text:0041A503                 lea     edx, [ebx+1]
.text:0041A506
.text:0041A506 loc_41A506:                             ; CODE XREF: sub_41A4A0+61↑j
.text:0041A506                 movzx   eax, [esp+2Ch+var_12]
.text:0041A50B                 mov     ebx, edx
.text:0041A50D                 movzx   edx, [esp+2Ch+var_11]
.text:0041A512                 mov     ebp, edx
.text:0041A514                 sub     ebp, eax
.text:0041A516                 jnz     loc_41A5A0
.text:0041A51C                 cmp     [esp+2Ch+var_11], 0
.text:0041A521                 jz      short loc_41A5A0
.text:0041A523                 lea     esi, [esi+0]
.text:0041A529                 lea     edi, [edi+0]
.text:0041A530
.text:0041A530 loc_41A530:                             ; CODE XREF: sub_41A4A0+F6↓j
.text:0041A530                 movzx   edx, byte ptr [esi]
.text:0041A533                 inc     esi
.text:0041A534                 mov     ebx, ds:dword_41A370[ebx*4]
.text:0041A53B                 mov     [esp+2Ch+var_11], dl
.text:0041A53F                 movzx   edx, byte ptr [edi]
.text:0041A542                 inc     edi
.text:0041A543                 cmp     [esp+2Ch+var_11], 30h ; '0'
.text:0041A548                 mov     [esp+2Ch+var_12], dl
.text:0041A54C                 setz    dl
.text:0041A54F                 cmp     dword ptr [ecx], 1
.text:0041A552                 movzx   ebp, dl
.text:0041A555                 movzx   edx, [esp+2Ch+var_11]
.text:0041A55A                 jz      loc_41A6C6
.text:0041A560                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A568                 mov     [esp+2Ch+C], edx ; C
.text:0041A56B                 call    _isctype
.text:0041A570                 mov     ecx, ds:__mb_cur_max
.text:0041A576
.text:0041A576 loc_41A576:                             ; CODE XREF: sub_41A4A0+234↓j
.text:0041A576                 test    eax, eax
.text:0041A578                 mov     edx, ebp
.text:0041A57A                 jz      short loc_41A57F
.text:0041A57C                 lea     edx, [ebp+1]
.text:0041A57F
.text:0041A57F loc_41A57F:                             ; CODE XREF: sub_41A4A0+DA↑j
.text:0041A57F                 movzx   eax, [esp+2Ch+var_12]
.text:0041A584                 or      ebx, edx
.text:0041A586                 movzx   edx, [esp+2Ch+var_11]
.text:0041A58B                 mov     ebp, edx
.text:0041A58D                 sub     ebp, eax
.text:0041A58F                 jnz     short loc_41A5A0
.text:0041A591                 cmp     [esp+2Ch+var_11], 0
.text:0041A596                 jnz     short loc_41A530
.text:0041A598                 nop
.text:0041A599                 lea     esi, [esi+0]
.text:0041A5A0
.text:0041A5A0 loc_41A5A0:                             ; CODE XREF: sub_41A4A0+76↑j
.text:0041A5A0                                         ; sub_41A4A0+81↑j ...
.text:0041A5A0                 xor     edx, edx
.text:0041A5A2                 shl     ebx, 2
.text:0041A5A5                 cmp     [esp+2Ch+var_12], 30h ; '0'
.text:0041A5AA                 setz    dl
.text:0041A5AD                 cmp     dword ptr [ecx], 1
.text:0041A5B0                 mov     [esp+2Ch+var_18], edx
.text:0041A5B4                 movzx   edx, [esp+2Ch+var_12]
.text:0041A5B9                 jz      loc_41A6B3
.text:0041A5BF                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A5C7                 mov     [esp+2Ch+C], edx ; C
.text:0041A5CA                 call    _isctype
.text:0041A5CF
.text:0041A5CF loc_41A5CF:                             ; CODE XREF: sub_41A4A0+221↓j
.text:0041A5CF                 test    eax, eax
.text:0041A5D1                 mov     edx, [esp+2Ch+var_18]
.text:0041A5D5                 jz      short loc_41A5D8
.text:0041A5D7                 inc     edx
.text:0041A5D8
.text:0041A5D8 loc_41A5D8:                             ; CODE XREF: sub_41A4A0+135↑j
.text:0041A5D8                 or      ebx, edx
.text:0041A5DA                 mov     ebx, ds:dword_41A3B0[ebx*4]
.text:0041A5E1                 mov     edx, ebp
.text:0041A5E3                 cmp     ebx, 2
.text:0041A5E6                 jz      short loc_41A5EF
.text:0041A5E8                 cmp     ebx, 3
.text:0041A5EB                 jz      short loc_41A600
.text:0041A5ED                 mov     edx, ebx
.text:0041A5EF
.text:0041A5EF loc_41A5EF:                             ; CODE XREF: sub_41A4A0+13↑j
.text:0041A5EF                                         ; sub_41A4A0+146↑j ...
.text:0041A5EF                 add     esp, 1Ch
.text:0041A5F2                 mov     eax, edx
.text:0041A5F4                 pop     ebx
.text:0041A5F5                 pop     esi
.text:0041A5F6                 pop     edi
.text:0041A5F7                 pop     ebp
.text:0041A5F8                 retn
.text:0041A5F8 ; ---------------------------------------------------------------------------
.text:0041A5F9                 align 10h
.text:0041A600
.text:0041A600 loc_41A600:                             ; CODE XREF: sub_41A4A0+14B↑j
.text:0041A600                                         ; sub_41A4A0+1AD↓j
.text:0041A600                 movzx   edx, byte ptr [esi]
.text:0041A603                 inc     esi
.text:0041A604                 mov     ecx, ds:__mb_cur_max
.text:0041A60A                 cmp     dword ptr [ecx], 1
.text:0041A60D                 jz      loc_41A6A0
.text:0041A613                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A61B                 mov     [esp+2Ch+C], edx ; C
.text:0041A61E                 call    _isctype
.text:0041A623                 mov     ecx, ds:__mb_cur_max
.text:0041A629
.text:0041A629 loc_41A629:                             ; CODE XREF: sub_41A4A0+20E↓j
.text:0041A629                 test    eax, eax
.text:0041A62B                 jz      short loc_41A662
.text:0041A62D                 movzx   edx, byte ptr [edi]
.text:0041A630                 inc     edi
.text:0041A631                 cmp     dword ptr [ecx], 1
.text:0041A634                 jz      short loc_41A651
.text:0041A636                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A63E                 mov     [esp+2Ch+C], edx ; C
.text:0041A641                 call    _isctype
.text:0041A646
.text:0041A646 loc_41A646:                             ; CODE XREF: sub_41A4A0+1C0↓j
.text:0041A646                 test    eax, eax
.text:0041A648                 mov     edx, 1
.text:0041A64D                 jnz     short loc_41A600
.text:0041A64F                 jmp     short loc_41A5EF
.text:0041A651 ; ---------------------------------------------------------------------------
.text:0041A651
.text:0041A651 loc_41A651:                             ; CODE XREF: sub_41A4A0+194↑j
.text:0041A651                 mov     ecx, ds:_pctype
.text:0041A657                 mov     ebx, [ecx]
.text:0041A659                 movzx   eax, word ptr [ebx+edx*2]
.text:0041A65D                 and     eax, 4
.text:0041A660                 jmp     short loc_41A646
.text:0041A662 ; ---------------------------------------------------------------------------
.text:0041A662
.text:0041A662 loc_41A662:                             ; CODE XREF: sub_41A4A0+18B↑j
.text:0041A662                 cmp     dword ptr [ecx], 1
.text:0041A665                 movzx   edx, byte ptr [edi]
.text:0041A668                 jz      short loc_41A68C
.text:0041A66A                 mov     [esp+2Ch+Type], 4 ; Type
.text:0041A672                 mov     [esp+2Ch+C], edx ; C
.text:0041A675                 call    _isctype
.text:0041A67A
.text:0041A67A loc_41A67A:                             ; CODE XREF: sub_41A4A0+1FB↓j
.text:0041A67A                 test    eax, eax
.text:0041A67C                 setz    dl
.text:0041A67F                 movzx   ecx, dl
.text:0041A682                 lea     edx, [ecx-1]
.text:0041A685                 or      edx, ebp
.text:0041A687                 jmp     loc_41A5EF
.text:0041A68C ; ---------------------------------------------------------------------------
.text:0041A68C
.text:0041A68C loc_41A68C:                             ; CODE XREF: sub_41A4A0+1C8↑j
.text:0041A68C                 mov     edi, ds:_pctype
.text:0041A692                 mov     esi, [edi]
.text:0041A694                 movzx   eax, word ptr [esi+edx*2]
.text:0041A698                 and     eax, 4
.text:0041A69B                 jmp     short loc_41A67A
.text:0041A69B ; ---------------------------------------------------------------------------
.text:0041A69D                 align 10h
.text:0041A6A0
.text:0041A6A0 loc_41A6A0:                             ; CODE XREF: sub_41A4A0+16D↑j
.text:0041A6A0                 mov     eax, ds:_pctype
.text:0041A6A5                 mov     ebx, [eax]
.text:0041A6A7                 movzx   eax, word ptr [ebx+edx*2]
.text:0041A6AB                 and     eax, 4
.text:0041A6AE                 jmp     loc_41A629
.text:0041A6B3 ; ---------------------------------------------------------------------------
.text:0041A6B3
.text:0041A6B3 loc_41A6B3:                             ; CODE XREF: sub_41A4A0+119↑j
.text:0041A6B3                 mov     eax, ds:_pctype
.text:0041A6B8                 mov     ecx, [eax]
.text:0041A6BA                 movzx   eax, word ptr [ecx+edx*2]
.text:0041A6BE                 and     eax, 4
.text:0041A6C1                 jmp     loc_41A5CF
.text:0041A6C6 ; ---------------------------------------------------------------------------
.text:0041A6C6
.text:0041A6C6 loc_41A6C6:                             ; CODE XREF: sub_41A4A0+BA↑j
.text:0041A6C6                 mov     eax, ds:_pctype
.text:0041A6CB                 mov     eax, [eax]
.text:0041A6CD                 movzx   eax, word ptr [eax+edx*2]
.text:0041A6D1                 and     eax, 4
.text:0041A6D4                 jmp     loc_41A576
.text:0041A6D4 ; ---------------------------------------------------------------------------
.text:0041A6D9                 align 10h
.text:0041A6E0
.text:0041A6E0 loc_41A6E0:                             ; CODE XREF: sub_41A4A0+41↑j
.text:0041A6E0                 mov     eax, ds:_pctype
.text:0041A6E5                 mov     ebp, [eax]
.text:0041A6E7                 movzx   eax, word ptr [ebp+edx*2+0]
.text:0041A6EC                 and     eax, 4
.text:0041A6EF                 jmp     loc_41A4FD
.text:0041A6EF sub_41A4A0      endp
.text:0041A6EF
.text:0041A6EF ; ---------------------------------------------------------------------------
.text:0041A6F4                 db 1Ch dup(90h)
.text:0041A710
.text:0041A710 ; =============== S U B R O U T I N E =======================================
.text:0041A710
.text:0041A710
.text:0041A710 ; int __cdecl sub_41A710(void *)
.text:0041A710 sub_41A710      proc near               ; CODE XREF: sub_403C30+246↑p
.text:0041A710
.text:0041A710 Block           = dword ptr -0Ch
.text:0041A710 var_4           = dword ptr -4
.text:0041A710 arg_0           = dword ptr  4
.text:0041A710
.text:0041A710                 sub     esp, 0Ch
.text:0041A713                 mov     [esp+0Ch+var_4], ebx
.text:0041A717                 mov     ebx, [esp+0Ch+arg_0]
.text:0041A71B                 test    ebx, ebx
.text:0041A71D                 jz      short loc_41A75B
.text:0041A71F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:0041A722                 jz      short loc_41A749
.text:0041A724                 mov     [esp+0Ch+Block], ebx
.text:0041A727                 call    sub_41D060
.text:0041A72C                 mov     edx, [ebx+4]
.text:0041A72F                 mov     [esp+0Ch+Block], edx ; Block
.text:0041A732                 call    free
.text:0041A737                 mov     [esp+0Ch+Block], ebx ; Block
.text:0041A73A                 call    free
.text:0041A73F                 xor     eax, eax
.text:0041A741
.text:0041A741 loc_41A741:                             ; CODE XREF: sub_41A710+49↓j
.text:0041A741                 mov     ebx, [esp+0Ch+var_4]
.text:0041A745                 add     esp, 0Ch
.text:0041A748                 retn
.text:0041A749 ; ---------------------------------------------------------------------------
.text:0041A749
.text:0041A749 loc_41A749:                             ; CODE XREF: sub_41A710+12↑j
.text:0041A749                 call    _errno
.text:0041A74E                 mov     dword ptr [eax], 9
.text:0041A754
.text:0041A754 loc_41A754:                             ; CODE XREF: sub_41A710+56↓j
.text:0041A754                 mov     eax, 0FFFFFFFFh
.text:0041A759                 jmp     short loc_41A741
.text:0041A75B ; ---------------------------------------------------------------------------
.text:0041A75B
.text:0041A75B loc_41A75B:                             ; CODE XREF: sub_41A710+D↑j
.text:0041A75B                 call    _errno
.text:0041A760                 mov     dword ptr [eax], 16h
.text:0041A766                 jmp     short loc_41A754
.text:0041A766 sub_41A710      endp
.text:0041A766
.text:0041A766 ; ---------------------------------------------------------------------------
.text:0041A768                 align 10h
.text:0041A770 ; const char asc_41A770[2]
.text:0041A770 asc_41A770      db '\',0                ; DATA XREF: sub_41A780+D2↓o
.text:0041A772                 align 10h
.text:0041A780
.text:0041A780 ; =============== S U B R O U T I N E =======================================
.text:0041A780
.text:0041A780
.text:0041A780 ; int __cdecl sub_41A780(LPCSTR)
.text:0041A780 sub_41A780      proc near               ; CODE XREF: sub_403C30+3B↑p
.text:0041A780
.text:0041A780 lpFileName      = dword ptr -13Ch
.text:0041A780 Source          = dword ptr -138h
.text:0041A780 Destination     = byte ptr -12Ch
.text:0041A780 var_10          = dword ptr -10h
.text:0041A780 var_C           = dword ptr -0Ch
.text:0041A780 var_8           = dword ptr -8
.text:0041A780 var_4           = dword ptr -4
.text:0041A780 arg_0           = dword ptr  4
.text:0041A780
.text:0041A780                 sub     esp, 13Ch
.text:0041A786                 mov     [esp+13Ch+var_C], esi
.text:0041A78D                 mov     esi, [esp+13Ch+arg_0]
.text:0041A794                 mov     [esp+13Ch+var_10], ebx
.text:0041A79B                 mov     [esp+13Ch+var_8], edi
.text:0041A7A2                 test    esi, esi
.text:0041A7A4                 mov     [esp+13Ch+var_4], ebp
.text:0041A7AB                 jz      short loc_41A7B2
.text:0041A7AD                 cmp     byte ptr [esi], 0
.text:0041A7B0                 jnz     short loc_41A7E2
.text:0041A7B2
.text:0041A7B2 loc_41A7B2:                             ; CODE XREF: sub_41A780+2B↑j
.text:0041A7B2                 call    _errno
.text:0041A7B7                 mov     dword ptr [eax], 2
.text:0041A7BD
.text:0041A7BD loc_41A7BD:                             ; CODE XREF: sub_41A780+139↓j
.text:0041A7BD                                         ; sub_41A780+14C↓j
.text:0041A7BD                 xor     eax, eax
.text:0041A7BF
.text:0041A7BF loc_41A7BF:                             ; CODE XREF: sub_41A780+90↓j
.text:0041A7BF                                         ; sub_41A780+A4↓j ...
.text:0041A7BF                 mov     ebx, [esp+13Ch+var_10]
.text:0041A7C6                 mov     esi, [esp+13Ch+var_C]
.text:0041A7CD                 mov     edi, [esp+13Ch+var_8]
.text:0041A7D4                 mov     ebp, [esp+13Ch+var_4]
.text:0041A7DB                 add     esp, 13Ch
.text:0041A7E1                 retn
.text:0041A7E2 ; ---------------------------------------------------------------------------
.text:0041A7E2
.text:0041A7E2 loc_41A7E2:                             ; CODE XREF: sub_41A780+30↑j
.text:0041A7E2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:0041A7E5                 call    GetFileAttributesA
.text:0041A7EA                 sub     esp, 4
.text:0041A7ED                 cmp     eax, 0FFFFFFFFh
.text:0041A7F0                 jz      loc_41A8BE
.text:0041A7F6                 test    al, 10h
.text:0041A7F8                 jz      loc_41A8AE
.text:0041A7FE                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:0041A805                 call    malloc
.text:0041A80A                 mov     ebx, eax
.text:0041A80C                 xor     eax, eax
.text:0041A80E                 test    ebx, ebx
.text:0041A810                 jz      short loc_41A7BF
.text:0041A812                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:0041A819                 call    malloc
.text:0041A81E                 mov     edi, eax
.text:0041A820                 xor     eax, eax
.text:0041A822                 test    edi, edi
.text:0041A824                 jz      short loc_41A7BF
.text:0041A826                 mov     [esp+13Ch+Source], esi ; Source
.text:0041A82A                 lea     ebp, [esp+13Ch+Destination]
.text:0041A82E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041A831                 call    strcpy
.text:0041A836                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0041A839                 call    strlen
.text:0041A83E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:0041A842                 jz      short loc_41A870
.text:0041A844                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:0041A847                 call    strlen
.text:0041A84C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:0041A850                 jz      short loc_41A870
.text:0041A852                 mov     [esp+13Ch+Source], offset asc_41A770 ; "\\"
.text:0041A85A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041A85D                 call    strcat
.text:0041A862                 lea     esi, [esi+0]
.text:0041A869                 lea     edi, [edi+0]
.text:0041A870
.text:0041A870 loc_41A870:                             ; CODE XREF: sub_41A780+C2↑j
.text:0041A870                                         ; sub_41A780+D0↑j
.text:0041A870                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:0041A873                 call    sub_41AD70
.text:0041A878                 mov     [esp+13Ch+lpFileName], eax
.text:0041A87B                 call    sub_4187A0
.text:0041A880                 mov     [edi], eax
.text:0041A882                 mov     eax, ebx
.text:0041A884                 mov     [ebx+4], edi
.text:0041A887                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0041A88D                 mov     dword ptr [ebx+8], 118h
.text:0041A894                 mov     dword ptr [ebx+0Ch], 118h
.text:0041A89B                 mov     dword ptr [ebx+10h], 8
.text:0041A8A2                 mov     dword ptr [ebx+14h], 1
.text:0041A8A9                 jmp     loc_41A7BF
.text:0041A8AE ; ---------------------------------------------------------------------------
.text:0041A8AE
.text:0041A8AE loc_41A8AE:                             ; CODE XREF: sub_41A780+78↑j
.text:0041A8AE                 call    _errno
.text:0041A8B3                 mov     dword ptr [eax], 14h
.text:0041A8B9                 jmp     loc_41A7BD
.text:0041A8BE ; ---------------------------------------------------------------------------
.text:0041A8BE
.text:0041A8BE loc_41A8BE:                             ; CODE XREF: sub_41A780+70↑j
.text:0041A8BE                 call    sub_41AD20
.text:0041A8C3                 mov     esi, eax
.text:0041A8C5                 call    _errno
.text:0041A8CA                 mov     [eax], esi
.text:0041A8CC                 jmp     loc_41A7BD
.text:0041A8CC sub_41A780      endp
.text:0041A8CC
.text:0041A8CC ; ---------------------------------------------------------------------------
.text:0041A8D1                 align 10h
.text:0041A8E0
.text:0041A8E0 ; =============== S U B R O U T I N E =======================================
.text:0041A8E0
.text:0041A8E0
.text:0041A8E0 sub_41A8E0      proc near               ; CODE XREF: sub_4025F0+1A2↑p
.text:0041A8E0                 sub     esp, 0Ch
.text:0041A8E3                 call    _errno
.text:0041A8E8                 mov     dword ptr [eax], 28h ; '('
.text:0041A8EE                 mov     eax, 0FFFFFFFFh
.text:0041A8F3                 add     esp, 0Ch
.text:0041A8F6                 retn
.text:0041A8F6 sub_41A8E0      endp
.text:0041A8F6
.text:0041A8F6 ; ---------------------------------------------------------------------------
.text:0041A8F7                 align 10h
.text:0041A900
.text:0041A900 ; =============== S U B R O U T I N E =======================================
.text:0041A900
.text:0041A900
.text:0041A900 sub_41A900      proc near               ; CODE XREF: sub_401B10+74B↑p
.text:0041A900
.text:0041A900 arg_0           = dword ptr  4
.text:0041A900
.text:0041A900                 sub     esp, 0Ch
.text:0041A903                 mov     edx, [esp+0Ch+arg_0]
.text:0041A907                 test    edx, edx
.text:0041A909                 js      short loc_41A91C
.text:0041A90B                 call    _errno
.text:0041A910                 mov     dword ptr [eax], 28h ; '('
.text:0041A916                 xor     eax, eax
.text:0041A918
.text:0041A918 loc_41A918:                             ; CODE XREF: sub_41A900+2C↓j
.text:0041A918                 add     esp, 0Ch
.text:0041A91B                 retn
.text:0041A91C ; ---------------------------------------------------------------------------
.text:0041A91C
.text:0041A91C loc_41A91C:                             ; CODE XREF: sub_41A900+9↑j
.text:0041A91C                 call    _errno
.text:0041A921                 mov     dword ptr [eax], 9
.text:0041A927                 mov     eax, 0FFFFFFFFh
.text:0041A92C                 jmp     short loc_41A918
.text:0041A92C sub_41A900      endp
.text:0041A92C
.text:0041A92C ; ---------------------------------------------------------------------------
.text:0041A92E                 align 10h
.text:0041A930
.text:0041A930 ; =============== S U B R O U T I N E =======================================
.text:0041A930
.text:0041A930
.text:0041A930 sub_41A930      proc near               ; CODE XREF: sub_40ECD0+DB↑p
.text:0041A930                                         ; sub_40ECD0+150↑p ...
.text:0041A930
.text:0041A930 var_1C          = dword ptr -1Ch
.text:0041A930 var_18          = dword ptr -18h
.text:0041A930 var_14          = dword ptr -14h
.text:0041A930 arg_0           = dword ptr  4
.text:0041A930 arg_4           = dword ptr  8
.text:0041A930 arg_8           = dword ptr  0Ch
.text:0041A930
.text:0041A930                 push    edi
.text:0041A931                 push    esi
.text:0041A932                 push    ebx
.text:0041A933                 sub     esp, 10h
.text:0041A936                 mov     edi, [esp+1Ch+arg_8]
.text:0041A93A                 mov     esi, [esp+1Ch+arg_0]
.text:0041A93E                 mov     ebx, [esp+1Ch+arg_4]
.text:0041A942                 cmp     edi, 0Fh
.text:0041A945                 jbe     short loc_41A990
.text:0041A947                 mov     ecx, esi
.text:0041A949                 neg     ecx
.text:0041A94B                 and     ecx, 3
.text:0041A94E                 sub     edi, ecx
.text:0041A950                 mov     edx, ecx
.text:0041A952                 test    ecx, ecx
.text:0041A954                 jz      short loc_41A96A
.text:0041A956                 lea     esi, [esi+0]
.text:0041A959                 lea     edi, [edi+0]
.text:0041A960
.text:0041A960 loc_41A960:                             ; CODE XREF: sub_41A930+38↓j
.text:0041A960                 movzx   ecx, byte ptr [ebx]
.text:0041A963                 inc     ebx
.text:0041A964                 mov     [esi], cl
.text:0041A966                 inc     esi
.text:0041A967                 dec     edx
.text:0041A968                 jnz     short loc_41A960
.text:0041A96A
.text:0041A96A loc_41A96A:                             ; CODE XREF: sub_41A930+24↑j
.text:0041A96A                 test    bl, 3
.text:0041A96D                 jnz     short loc_41A9B3
.text:0041A96F                 mov     [esp+1Ch+var_18], ebx
.text:0041A973                 mov     edx, edi
.text:0041A975                 shr     edx, 2
.text:0041A978                 mov     [esp+1Ch+var_14], edx
.text:0041A97C                 mov     [esp+1Ch+var_1C], esi
.text:0041A97F                 call    sub_41D0C0
.text:0041A984
.text:0041A984 loc_41A984:                             ; CODE XREF: sub_41A930+98↓j
.text:0041A984                 mov     edx, edi
.text:0041A986                 and     edx, 0FFFFFFFCh
.text:0041A989                 and     edi, 3
.text:0041A98C                 add     ebx, edx
.text:0041A98E                 add     esi, edx
.text:0041A990
.text:0041A990 loc_41A990:                             ; CODE XREF: sub_41A930+15↑j
.text:0041A990                 test    edi, edi
.text:0041A992                 mov     edx, edi
.text:0041A994                 jz      short loc_41A9AA
.text:0041A996                 lea     esi, [esi+0]
.text:0041A999                 lea     edi, [edi+0]
.text:0041A9A0
.text:0041A9A0 loc_41A9A0:                             ; CODE XREF: sub_41A930+78↓j
.text:0041A9A0                 movzx   ecx, byte ptr [ebx]
.text:0041A9A3                 inc     ebx
.text:0041A9A4                 mov     [esi], cl
.text:0041A9A6                 inc     esi
.text:0041A9A7                 dec     edx
.text:0041A9A8                 jnz     short loc_41A9A0
.text:0041A9AA
.text:0041A9AA loc_41A9AA:                             ; CODE XREF: sub_41A930+64↑j
.text:0041A9AA                 add     esp, 10h
.text:0041A9AD                 mov     eax, esi
.text:0041A9AF                 pop     ebx
.text:0041A9B0                 pop     esi
.text:0041A9B1                 pop     edi
.text:0041A9B2                 retn
.text:0041A9B3 ; ---------------------------------------------------------------------------
.text:0041A9B3
.text:0041A9B3 loc_41A9B3:                             ; CODE XREF: sub_41A930+3D↑j
.text:0041A9B3                 mov     [esp+1Ch+var_18], ebx
.text:0041A9B7                 mov     ecx, edi
.text:0041A9B9                 shr     ecx, 2
.text:0041A9BC                 mov     [esp+1Ch+var_14], ecx
.text:0041A9C0                 mov     [esp+1Ch+var_1C], esi
.text:0041A9C3                 call    sub_41D1C0
.text:0041A9C8                 jmp     short loc_41A984
.text:0041A9C8 sub_41A930      endp
.text:0041A9C8
.text:0041A9C8 ; ---------------------------------------------------------------------------
.text:0041A9CA                 align 10h
.text:0041A9D0
.text:0041A9D0 ; =============== S U B R O U T I N E =======================================
.text:0041A9D0
.text:0041A9D0
.text:0041A9D0 sub_41A9D0      proc near               ; CODE XREF: .text:00412034↑p
.text:0041A9D0                 xor     eax, eax
.text:0041A9D2                 retn
.text:0041A9D2 sub_41A9D0      endp
.text:0041A9D2
.text:0041A9D2 ; ---------------------------------------------------------------------------
.text:0041A9D3                 align 10h
.text:0041A9E0
.text:0041A9E0 ; =============== S U B R O U T I N E =======================================
.text:0041A9E0
.text:0041A9E0
.text:0041A9E0 sub_41A9E0      proc near               ; CODE XREF: sub_411F60+2E↑p
.text:0041A9E0                 xor     eax, eax
.text:0041A9E2                 retn
.text:0041A9E2 sub_41A9E0      endp
.text:0041A9E2
.text:0041A9E2 ; ---------------------------------------------------------------------------
.text:0041A9E3                 align 10h
.text:0041A9F0
.text:0041A9F0 ; =============== S U B R O U T I N E =======================================
.text:0041A9F0
.text:0041A9F0
.text:0041A9F0 ; int __cdecl sub_41A9F0(char *)
.text:0041A9F0 sub_41A9F0      proc near               ; CODE XREF: .text:00411EC4↑p
.text:0041A9F0
.text:0041A9F0 var_1C          = dword ptr -1Ch
.text:0041A9F0 var_18          = dword ptr -18h
.text:0041A9F0 var_14          = dword ptr -14h
.text:0041A9F0 var_10          = dword ptr -10h
.text:0041A9F0 var_C           = dword ptr -0Ch
.text:0041A9F0 var_4           = dword ptr -4
.text:0041A9F0 arg_0           = dword ptr  4
.text:0041A9F0
.text:0041A9F0                 sub     esp, 1Ch
.text:0041A9F3                 mov     ecx, [esp+1Ch+arg_0]
.text:0041A9F7                 lea     edx, [esp+1Ch+var_4]
.text:0041A9FB                 mov     [esp+1Ch+var_C], edx ; int
.text:0041A9FF                 mov     [esp+1Ch+var_10], 400h ; int
.text:0041AA07                 mov     [esp+1Ch+var_1C], ecx ; char *
.text:0041AA0A                 mov     [esp+1Ch+var_14], offset byte_42C8A0 ; char *
.text:0041AA12                 mov     [esp+1Ch+var_18], offset unk_42C880 ; int
.text:0041AA1A                 call    sub_41D570
.text:0041AA1F                 test    eax, eax
.text:0041AA21                 mov     ecx, [esp+1Ch+var_4]
.text:0041AA25                 setnz   dl
.text:0041AA28                 add     esp, 1Ch
.text:0041AA2B                 movzx   eax, dl
.text:0041AA2E                 dec     eax
.text:0041AA2F                 and     eax, ecx
.text:0041AA31                 retn
.text:0041AA31 sub_41A9F0      endp
.text:0041AA31
.text:0041AA31 ; ---------------------------------------------------------------------------
.text:0041AA32                 align 10h
.text:0041AA40
.text:0041AA40 ; =============== S U B R O U T I N E =======================================
.text:0041AA40
.text:0041AA40
.text:0041AA40 sub_41AA40      proc near               ; CODE XREF: sub_411DF0+2E↑p
.text:0041AA40
.text:0041AA40 var_1C          = dword ptr -1Ch
.text:0041AA40 var_18          = dword ptr -18h
.text:0041AA40 var_14          = dword ptr -14h
.text:0041AA40 var_10          = dword ptr -10h
.text:0041AA40 var_C           = dword ptr -0Ch
.text:0041AA40 var_4           = dword ptr -4
.text:0041AA40 arg_0           = dword ptr  4
.text:0041AA40
.text:0041AA40                 sub     esp, 1Ch
.text:0041AA43                 mov     ecx, [esp+1Ch+arg_0]
.text:0041AA47                 lea     edx, [esp+1Ch+var_4]
.text:0041AA4B                 mov     [esp+1Ch+var_C], edx ; int
.text:0041AA4F                 mov     [esp+1Ch+var_10], 400h ; int
.text:0041AA57                 mov     [esp+1Ch+var_1C], ecx ; int
.text:0041AA5A                 mov     [esp+1Ch+var_14], offset byte_42CCC0 ; char *
.text:0041AA62                 mov     [esp+1Ch+var_18], offset unk_42CCA0 ; int
.text:0041AA6A                 call    sub_41D760
.text:0041AA6F                 test    eax, eax
.text:0041AA71                 mov     ecx, [esp+1Ch+var_4]
.text:0041AA75                 setnz   dl
.text:0041AA78                 add     esp, 1Ch
.text:0041AA7B                 movzx   eax, dl
.text:0041AA7E                 dec     eax
.text:0041AA7F                 and     eax, ecx
.text:0041AA81                 retn
.text:0041AA81 sub_41AA40      endp
.text:0041AA81
.text:0041AA81 ; ---------------------------------------------------------------------------
.text:0041AA82                 align 10h
.text:0041AA90
.text:0041AA90 ; =============== S U B R O U T I N E =======================================
.text:0041AA90
.text:0041AA90 ; Attributes: info_from_lumina
.text:0041AA90
.text:0041AA90 ___get_errno    proc near               ; CODE XREF: sub_41AD20+B↓p
.text:0041AA90
.text:0041AA90 arg_0           = dword ptr  4
.text:0041AA90
.text:0041AA90                 mov     eax, [esp+arg_0]
.text:0041AA94                 cmp     eax, 53h ; 'S'
.text:0041AA97                 jg      loc_41AB90
.text:0041AA9D                 cmp     eax, 52h ; 'R'
.text:0041AAA0                 jge     short loc_41AAF2
.text:0041AAA2                 cmp     eax, 0Fh
.text:0041AAA5                 jz      short loc_41AAC0
.text:0041AAA7                 cmp     eax, 0Fh
.text:0041AAAA                 jg      short loc_41AB20
.text:0041AAAC                 cmp     eax, 9
.text:0041AAAF                 jg      short loc_41AB00
.text:0041AAB1                 cmp     eax, 7
.text:0041AAB4                 jge     short loc_41AAF9
.text:0041AAB6                 cmp     eax, 3
.text:0041AAB9                 jg      short loc_41AADA
.text:0041AABB                 cmp     eax, 2
.text:0041AABE                 jl      short loc_41AAD3
.text:0041AAC0
.text:0041AAC0 loc_41AAC0:                             ; CODE XREF: ___get_errno+15↑j
.text:0041AAC0                                         ; ___get_errno+9D↓j ...
.text:0041AAC0                 mov     edx, 2
.text:0041AAC5                 lea     esi, [esi+0]
.text:0041AAC9                 lea     edi, [edi+0]
.text:0041AAD0
.text:0041AAD0 loc_41AAD0:                             ; CODE XREF: ___get_errno+48↓j
.text:0041AAD0                                         ; ___get_errno+59↓j ...
.text:0041AAD0                 mov     eax, edx
.text:0041AAD2                 retn
.text:0041AAD3 ; ---------------------------------------------------------------------------
.text:0041AAD3
.text:0041AAD3 loc_41AAD3:                             ; CODE XREF: ___get_errno+2E↑j
.text:0041AAD3                                         ; ___get_errno+78↓j ...
.text:0041AAD3                 mov     edx, 16h
.text:0041AAD8                 jmp     short loc_41AAD0
.text:0041AADA ; ---------------------------------------------------------------------------
.text:0041AADA
.text:0041AADA loc_41AADA:                             ; CODE XREF: ___get_errno+29↑j
.text:0041AADA                 cmp     eax, 5
.text:0041AADD                 jz      short loc_41AAF2
.text:0041AADF                 cmp     eax, 5
.text:0041AAE2                 jg      short loc_41AAEB
.text:0041AAE4                 mov     edx, 18h
.text:0041AAE9                 jmp     short loc_41AAD0
.text:0041AAEB ; ---------------------------------------------------------------------------
.text:0041AAEB
.text:0041AAEB loc_41AAEB:                             ; CODE XREF: ___get_errno+52↑j
.text:0041AAEB                                         ; ___get_errno+180↓j
.text:0041AAEB                 mov     edx, 9
.text:0041AAF0                 jmp     short loc_41AAD0
.text:0041AAF2 ; ---------------------------------------------------------------------------
.text:0041AAF2
.text:0041AAF2 loc_41AAF2:                             ; CODE XREF: ___get_errno+10↑j
.text:0041AAF2                                         ; ___get_errno+4D↑j ...
.text:0041AAF2                 mov     edx, 0Dh
.text:0041AAF7                 jmp     short loc_41AAD0
.text:0041AAF9 ; ---------------------------------------------------------------------------
.text:0041AAF9
.text:0041AAF9 loc_41AAF9:                             ; CODE XREF: ___get_errno+24↑j
.text:0041AAF9                                         ; ___get_errno+73↓j ...
.text:0041AAF9                 mov     edx, 0Ch
.text:0041AAFE                 jmp     short loc_41AAD0
.text:0041AB00 ; ---------------------------------------------------------------------------
.text:0041AB00
.text:0041AB00 loc_41AB00:                             ; CODE XREF: ___get_errno+1F↑j
.text:0041AB00                 cmp     eax, 0Dh
.text:0041AB03                 jg      short loc_41AAF9
.text:0041AB05                 cmp     eax, 0Ch
.text:0041AB08                 jge     short loc_41AAD3
.text:0041AB0A                 cmp     eax, 0Ah
.text:0041AB0D                 mov     edx, 7
.text:0041AB12                 jz      short loc_41AAD0
.text:0041AB14                 cmp     eax, 0Bh
.text:0041AB17                 jnz     short loc_41AAD3
.text:0041AB19
.text:0041AB19 loc_41AB19:                             ; CODE XREF: ___get_errno+21A↓j
.text:0041AB19                 mov     edx, 8
.text:0041AB1E                 jmp     short loc_41AAD0
.text:0041AB20 ; ---------------------------------------------------------------------------
.text:0041AB20
.text:0041AB20 loc_41AB20:                             ; CODE XREF: ___get_errno+1A↑j
.text:0041AB20                 cmp     eax, 22h ; '"'
.text:0041AB23                 jg      short loc_41AB54
.text:0041AB25                 cmp     eax, 16h
.text:0041AB28                 jge     short loc_41AAF2
.text:0041AB2A                 cmp     eax, 12h
.text:0041AB2D                 jz      short loc_41AAC0
.text:0041AB2F                 cmp     eax, 12h
.text:0041AB32                 jg      short loc_41AB45
.text:0041AB34                 cmp     eax, 10h
.text:0041AB37                 jz      short loc_41AAF2
.text:0041AB39                 mov     edx, 12h
.text:0041AB3E                 cmp     eax, 11h
.text:0041AB41
.text:0041AB41 loc_41AB41:                             ; CODE XREF: ___get_errno+172↓j
.text:0041AB41                                         ; ___get_errno+24C↓j ...
.text:0041AB41                 jnz     short loc_41AAD3
.text:0041AB43                 jmp     short loc_41AAD0
.text:0041AB45 ; ---------------------------------------------------------------------------
.text:0041AB45
.text:0041AB45 loc_41AB45:                             ; CODE XREF: ___get_errno+A2↑j
.text:0041AB45                 cmp     eax, 14h
.text:0041AB48                 jle     short loc_41AAF2
.text:0041AB4A
.text:0041AB4A loc_41AB4A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0041AB4A                 mov     edx, 10h
.text:0041AB4F                 jmp     loc_41AAD0
.text:0041AB54 ; ---------------------------------------------------------------------------
.text:0041AB54
.text:0041AB54 loc_41AB54:                             ; CODE XREF: ___get_errno+93↑j
.text:0041AB54                 cmp     eax, 41h ; 'A'
.text:0041AB57                 jz      short loc_41AAF2
.text:0041AB59                 cmp     eax, 41h ; 'A'
.text:0041AB5C                 jg      short loc_41AB71
.text:0041AB5E                 cmp     eax, 24h ; '$'
.text:0041AB61                 jz      short loc_41AAF2
.text:0041AB63                 cmp     eax, 35h ; '5'
.text:0041AB66                 jnz     loc_41AAD3
.text:0041AB6C                 jmp     loc_41AAC0
.text:0041AB71 ; ---------------------------------------------------------------------------
.text:0041AB71
.text:0041AB71 loc_41AB71:                             ; CODE XREF: ___get_errno+CC↑j
.text:0041AB71                 cmp     eax, 43h ; 'C'
.text:0041AB74                 jz      loc_41AAC0
.text:0041AB7A                 cmp     eax, 50h ; 'P'
.text:0041AB7D                 jnz     loc_41AAD3
.text:0041AB83
.text:0041AB83 loc_41AB83:                             ; CODE XREF: ___get_errno+1FB↓j
.text:0041AB83                 mov     edx, 11h
.text:0041AB88                 jmp     loc_41AAD0
.text:0041AB88 ; ---------------------------------------------------------------------------
.text:0041AB8D                 align 10h
.text:0041AB90
.text:0041AB90 loc_41AB90:                             ; CODE XREF: ___get_errno+7↑j
.text:0041AB90                 cmp     eax, 0A1h ; '¡'
.text:0041AB95                 jz      loc_41AAC0
.text:0041AB9B                 cmp     eax, 0A1h ; '¡'
.text:0041ABA0                 jg      loc_41AC50
.text:0041ABA6                 cmp     eax, 81h
.text:0041ABAB                 jg      short loc_41AC15
.text:0041ABAD                 cmp     eax, 80h ; '€'
.text:0041ABB2                 mov     edx, 0Ah
.text:0041ABB7                 jge     loc_41AAD0
.text:0041ABBD                 cmp     eax, 6Ch ; 'l'
.text:0041ABC0                 jz      loc_41AAF2
.text:0041ABC6                 cmp     eax, 6Ch ; 'l'
.text:0041ABC9                 jg      short loc_41ABE7
.text:0041ABCB                 cmp     eax, 57h ; 'W'
.text:0041ABCE                 jz      loc_41AAD3
.text:0041ABD4                 cmp     eax, 59h ; 'Y'
.text:0041ABD7                 jnz     loc_41AAD3
.text:0041ABDD
.text:0041ABDD loc_41ABDD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0041ABDD                                         ; ___get_errno+23C↓j
.text:0041ABDD                 mov     edx, 0Bh
.text:0041ABE2                 jmp     loc_41AAD0
.text:0041ABE7 ; ---------------------------------------------------------------------------
.text:0041ABE7
.text:0041ABE7 loc_41ABE7:                             ; CODE XREF: ___get_errno+139↑j
.text:0041ABE7                 cmp     eax, 70h ; 'p'
.text:0041ABEA                 mov     edx, 1Ch
.text:0041ABEF                 jz      loc_41AAD0
.text:0041ABF5                 cmp     eax, 70h ; 'p'
.text:0041ABF8                 jg      short loc_41AC07
.text:0041ABFA                 mov     edx, 20h ; ' '
.text:0041ABFF                 cmp     eax, 6Dh ; 'm'
.text:0041AC02                 jmp     loc_41AB41
.text:0041AC07 ; ---------------------------------------------------------------------------
.text:0041AC07
.text:0041AC07 loc_41AC07:                             ; CODE XREF: ___get_errno+168↑j
.text:0041AC07                 cmp     eax, 72h ; 'r'
.text:0041AC0A
.text:0041AC0A loc_41AC0A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0041AC0A                 jnz     loc_41AAD3
.text:0041AC10                 jmp     loc_41AAEB
.text:0041AC15 ; ---------------------------------------------------------------------------
.text:0041AC15
.text:0041AC15 loc_41AC15:                             ; CODE XREF: ___get_errno+11B↑j
.text:0041AC15                 cmp     eax, 84h ; '„'
.text:0041AC1A                 jz      loc_41AAF2
.text:0041AC20                 cmp     eax, 84h ; '„'
.text:0041AC25                 jg      short loc_41AC2E
.text:0041AC27                 cmp     eax, 82h ; '‚'
.text:0041AC2C                 jmp     short loc_41AC0A
.text:0041AC2E ; ---------------------------------------------------------------------------
.text:0041AC2E
.text:0041AC2E loc_41AC2E:                             ; CODE XREF: ___get_errno+195↑j
.text:0041AC2E                 cmp     eax, 91h ; '‘'
.text:0041AC33                 mov     edx, 29h ; ')'
.text:0041AC38                 jz      loc_41AAD0
.text:0041AC3E                 cmp     eax, 9Eh ; 'ž'
.text:0041AC43
.text:0041AC43 loc_41AC43:                             ; CODE XREF: ___get_errno+1F4↓j
.text:0041AC43                 jnz     loc_41AAD3
.text:0041AC49                 jmp     loc_41AAF2
.text:0041AC49 ; ---------------------------------------------------------------------------
.text:0041AC4E                 align 10h
.text:0041AC50
.text:0041AC50 loc_41AC50:                             ; CODE XREF: ___get_errno+110↑j
.text:0041AC50                 cmp     eax, 0CEh ; 'Î'
.text:0041AC55                 jz      loc_41AAC0
.text:0041AC5B                 cmp     eax, 0CEh ; 'Î'
.text:0041AC60                 jg      short loc_41ACB0
.text:0041AC62                 cmp     eax, 0AAh ; 'ª'
.text:0041AC67                 jz      loc_41AB4A
.text:0041AC6D                 cmp     eax, 0AAh ; 'ª'
.text:0041AC72                 jg      short loc_41AC86
.text:0041AC74                 cmp     eax, 0A4h ; '¤'
.text:0041AC79                 jz      loc_41ABDD
.text:0041AC7F                 cmp     eax, 0A7h ; '§'
.text:0041AC84                 jmp     short loc_41AC43
.text:0041AC86 ; ---------------------------------------------------------------------------
.text:0041AC86
.text:0041AC86 loc_41AC86:                             ; CODE XREF: ___get_errno+1E2↑j
.text:0041AC86                 cmp     eax, 0B7h ; '·'
.text:0041AC8B                 jz      loc_41AB83
.text:0041AC91                 cmp     eax, 0B7h ; '·'
.text:0041AC96                 jl      loc_41AAD3
.text:0041AC9C                 sub     eax, 0BCh ; '¼'
.text:0041ACA1                 cmp     eax, 0Eh
.text:0041ACA4                 ja      loc_41AAD3
.text:0041ACAA                 jmp     loc_41AB19
.text:0041ACAA ; ---------------------------------------------------------------------------
.text:0041ACAF                 align 10h
.text:0041ACB0
.text:0041ACB0 loc_41ACB0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:0041ACB0                 cmp     eax, 46Bh
.text:0041ACB5                 mov     edx, 24h ; '$'
.text:0041ACBA                 jz      loc_41AAD0
.text:0041ACC0                 cmp     eax, 46Bh
.text:0041ACC5                 jg      short loc_41ACE1
.text:0041ACC7                 cmp     eax, 0D7h ; '×'
.text:0041ACCC                 jz      loc_41ABDD
.text:0041ACD2                 mov     edx, 5
.text:0041ACD7                 cmp     eax, 45Dh
.text:0041ACDC                 jmp     loc_41AB41
.text:0041ACE1 ; ---------------------------------------------------------------------------
.text:0041ACE1
.text:0041ACE1 loc_41ACE1:                             ; CODE XREF: ___get_errno+235↑j
.text:0041ACE1                 cmp     eax, 4D5h
.text:0041ACE6                 mov     edx, 4
.text:0041ACEB                 jz      loc_41AAD0
.text:0041ACF1                 cmp     eax, 4D5h
.text:0041ACF6                 jg      short loc_41AD07
.text:0041ACF8                 mov     edx, 13h
.text:0041ACFD                 cmp     eax, 4B0h
.text:0041AD02                 jmp     loc_41AB41
.text:0041AD07 ; ---------------------------------------------------------------------------
.text:0041AD07
.text:0041AD07 loc_41AD07:                             ; CODE XREF: ___get_errno+266↑j
.text:0041AD07                 cmp     eax, 718h
.text:0041AD0C                 jnz     loc_41AAD3
.text:0041AD12                 jmp     loc_41AAF9
.text:0041AD12 ___get_errno    endp
.text:0041AD12
.text:0041AD12 ; ---------------------------------------------------------------------------
.text:0041AD17                 align 10h
.text:0041AD20
.text:0041AD20 ; =============== S U B R O U T I N E =======================================
.text:0041AD20
.text:0041AD20
.text:0041AD20 sub_41AD20      proc near               ; CODE XREF: sub_418300:loc_41829D↑p
.text:0041AD20                                         ; sub_4188C0:loc_418928↑p ...
.text:0041AD20
.text:0041AD20 var_C           = dword ptr -0Ch
.text:0041AD20
.text:0041AD20                 sub     esp, 0Ch
.text:0041AD23                 call    GetLastError
.text:0041AD28                 mov     [esp+0Ch+var_C], eax
.text:0041AD2B                 call    ___get_errno
.text:0041AD30                 add     esp, 0Ch
.text:0041AD33                 retn
.text:0041AD33 sub_41AD20      endp
.text:0041AD33
.text:0041AD33 ; ---------------------------------------------------------------------------
.text:0041AD34                 align 10h
.text:0041AD40
.text:0041AD40 ; =============== S U B R O U T I N E =======================================
.text:0041AD40
.text:0041AD40
.text:0041AD40 sub_41AD40      proc near               ; CODE XREF: .text:00418833↑p
.text:0041AD40                                         ; .text:00418883↑p
.text:0041AD40
.text:0041AD40 arg_4           = dword ptr  8
.text:0041AD40
.text:0041AD40                 sub     esp, 0Ch
.text:0041AD43                 mov     edx, [esp+0Ch+arg_4]
.text:0041AD47                 test    edx, edx
.text:0041AD49                 jz      short loc_41AD50
.text:0041AD4B                 add     esp, 0Ch
.text:0041AD4E                 jmp     short sub_41AD90
.text:0041AD50 ; ---------------------------------------------------------------------------
.text:0041AD50
.text:0041AD50 loc_41AD50:                             ; CODE XREF: sub_41AD40+9↑j
.text:0041AD50                 call    _errno
.text:0041AD55                 mov     dword ptr [eax], 16h
.text:0041AD5B                 xor     eax, eax
.text:0041AD5D                 add     esp, 0Ch
.text:0041AD60                 retn
.text:0041AD60 sub_41AD40      endp
.text:0041AD60
.text:0041AD61 ; ---------------------------------------------------------------------------
.text:0041AD61                 jmp     short sub_41AD70
.text:0041AD61 ; ---------------------------------------------------------------------------
.text:0041AD63                 align 10h
.text:0041AD70
.text:0041AD70 ; =============== S U B R O U T I N E =======================================
.text:0041AD70
.text:0041AD70
.text:0041AD70 ; int __cdecl sub_41AD70(LPCSTR)
.text:0041AD70 sub_41AD70      proc near               ; CODE XREF: sub_418300-10C↑p
.text:0041AD70                                         ; .text:00418A28↑p ...
.text:0041AD70
.text:0041AD70 lpFileName      = dword ptr -0Ch
.text:0041AD70 Destination     = dword ptr -8
.text:0041AD70 arg_0           = dword ptr  4
.text:0041AD70
.text:0041AD70                 sub     esp, 0Ch
.text:0041AD73                 mov     edx, [esp+0Ch+arg_0]
.text:0041AD77                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:0041AD7F                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:0041AD82                 call    sub_41AD90
.text:0041AD87                 add     esp, 0Ch
.text:0041AD8A                 retn
.text:0041AD8A sub_41AD70      endp
.text:0041AD8A
.text:0041AD8A ; ---------------------------------------------------------------------------
.text:0041AD8B                 align 10h
.text:0041AD90
.text:0041AD90 ; =============== S U B R O U T I N E =======================================
.text:0041AD90
.text:0041AD90
.text:0041AD90 ; int __cdecl sub_41AD90(LPCSTR lpFileName, char *Destination)
.text:0041AD90 sub_41AD90      proc near               ; CODE XREF: sub_41AD40+E↑j
.text:0041AD90                                         ; sub_41AD70+12↑p
.text:0041AD90
.text:0041AD90 Size            = dword ptr -2Ch
.text:0041AD90 nBufferLength   = dword ptr -28h
.text:0041AD90 lpBuffer        = dword ptr -24h
.text:0041AD90 lpFilePart      = dword ptr -20h
.text:0041AD90 FilePart        = dword ptr -14h
.text:0041AD90 lpFileName      = dword ptr  4
.text:0041AD90 Destination     = dword ptr  8
.text:0041AD90
.text:0041AD90                 push    ebp
.text:0041AD91                 push    edi
.text:0041AD92                 push    esi
.text:0041AD93                 push    ebx
.text:0041AD94                 sub     esp, 1Ch
.text:0041AD97                 mov     edi, [esp+2Ch+lpFileName]
.text:0041AD9B                 mov     ebp, [esp+2Ch+Destination]
.text:0041AD9F                 test    edi, edi
.text:0041ADA1                 jz      loc_41AEA9
.text:0041ADA7                 cmp     byte ptr [edi], 0
.text:0041ADAA                 jz      loc_41AE9C
.text:0041ADB0                 mov     [esp+2Ch+Size], 104h ; Size
.text:0041ADB7                 call    malloc
.text:0041ADBC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041ADC0                 lea     edx, [esp+2Ch+FilePart]
.text:0041ADC4                 mov     ebx, eax
.text:0041ADC6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041ADCA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:0041ADD2                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041ADD5                 call    GetFullPathNameA
.text:0041ADDA                 sub     esp, 10h
.text:0041ADDD                 mov     esi, eax
.text:0041ADDF                 test    eax, eax
.text:0041ADE1                 jz      loc_41AE8A
.text:0041ADE7                 cmp     eax, 104h
.text:0041ADEC                 jle     short loc_41ADFD
.text:0041ADEE                 test    ebp, ebp
.text:0041ADF0                 jz      short loc_41AE59
.text:0041ADF2                 call    _errno
.text:0041ADF7                 mov     dword ptr [eax], 26h ; '&'
.text:0041ADFD
.text:0041ADFD loc_41ADFD:                             ; CODE XREF: sub_41AD90+5C↑j
.text:0041ADFD                                         ; sub_41AD90+F5↓j
.text:0041ADFD                 call    _errno
.text:0041AE02                 mov     edi, [eax]
.text:0041AE04                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041AE0C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041AE0F                 call    sub_41AEC0
.text:0041AE14                 test    eax, eax
.text:0041AE16                 jnz     short loc_41AE30
.text:0041AE18                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041AE1D                 cmp     al, 2Fh ; '/'
.text:0041AE1F                 jz      short loc_41AE30
.text:0041AE21                 cmp     al, 5Ch ; '\'
.text:0041AE23                 jz      short loc_41AE30
.text:0041AE25                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:0041AE29                 mov     byte ptr [esi+ebx+1], 0
.text:0041AE2E                 mov     esi, esi
.text:0041AE30
.text:0041AE30 loc_41AE30:                             ; CODE XREF: sub_41AD90+86↑j
.text:0041AE30                                         ; sub_41AD90+8F↑j ...
.text:0041AE30                 call    _errno
.text:0041AE35                 mov     [eax], edi
.text:0041AE37                 mov     [esp+2Ch+Size], ebx
.text:0041AE3A                 call    sub_418720
.text:0041AE3F                 test    ebp, ebp
.text:0041AE41                 mov     eax, ebx
.text:0041AE43                 jz      short loc_41AE51
.text:0041AE45                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:0041AE49                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041AE4C                 call    strcpy
.text:0041AE51
.text:0041AE51 loc_41AE51:                             ; CODE XREF: sub_41AD90+B3↑j
.text:0041AE51                                         ; sub_41AD90+10A↓j
.text:0041AE51                 add     esp, 1Ch
.text:0041AE54                 pop     ebx
.text:0041AE55                 pop     esi
.text:0041AE56                 pop     edi
.text:0041AE57                 pop     ebp
.text:0041AE58                 retn
.text:0041AE59 ; ---------------------------------------------------------------------------
.text:0041AE59
.text:0041AE59 loc_41AE59:                             ; CODE XREF: sub_41AD90+60↑j
.text:0041AE59                 mov     [esp+2Ch+Size], ebx ; Block
.text:0041AE5C                 lea     ecx, [eax+2]
.text:0041AE5F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:0041AE63                 call    realloc
.text:0041AE68                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041AE6C                 lea     edx, [esp+2Ch+FilePart]
.text:0041AE70                 mov     ebx, eax
.text:0041AE72                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041AE76                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:0041AE7A                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:0041AE7D                 call    GetFullPathNameA
.text:0041AE82                 sub     esp, 10h
.text:0041AE85                 jmp     loc_41ADFD
.text:0041AE8A ; ---------------------------------------------------------------------------
.text:0041AE8A
.text:0041AE8A loc_41AE8A:                             ; CODE XREF: sub_41AD90+51↑j
.text:0041AE8A                 call    sub_41AD20
.text:0041AE8F                 mov     esi, eax
.text:0041AE91                 call    _errno
.text:0041AE96                 mov     [eax], esi
.text:0041AE98
.text:0041AE98 loc_41AE98:                             ; CODE XREF: sub_41AD90+117↓j
.text:0041AE98                                         ; sub_41AD90+124↓j
.text:0041AE98                 xor     eax, eax
.text:0041AE9A                 jmp     short loc_41AE51
.text:0041AE9C ; ---------------------------------------------------------------------------
.text:0041AE9C
.text:0041AE9C loc_41AE9C:                             ; CODE XREF: sub_41AD90+1A↑j
.text:0041AE9C                 call    _errno
.text:0041AEA1                 mov     dword ptr [eax], 2
.text:0041AEA7                 jmp     short loc_41AE98
.text:0041AEA9 ; ---------------------------------------------------------------------------
.text:0041AEA9
.text:0041AEA9 loc_41AEA9:                             ; CODE XREF: sub_41AD90+11↑j
.text:0041AEA9                 call    _errno
.text:0041AEAE                 mov     dword ptr [eax], 16h
.text:0041AEB4                 jmp     short loc_41AE98
.text:0041AEB4 sub_41AD90      endp
.text:0041AEB4
.text:0041AEB4 ; ---------------------------------------------------------------------------
.text:0041AEB6                 align 10h
.text:0041AEC0
.text:0041AEC0 ; =============== S U B R O U T I N E =======================================
.text:0041AEC0
.text:0041AEC0
.text:0041AEC0 ; int __cdecl sub_41AEC0(LPCSTR lpFileName, int)
.text:0041AEC0 sub_41AEC0      proc near               ; CODE XREF: sub_418300-11D↑p
.text:0041AEC0                                         ; .text:00418702↑p ...
.text:0041AEC0
.text:0041AEC0 uMode           = dword ptr -1Ch
.text:0041AEC0 var_10          = dword ptr -10h
.text:0041AEC0 var_C           = dword ptr -0Ch
.text:0041AEC0 var_8           = dword ptr -8
.text:0041AEC0 var_4           = dword ptr -4
.text:0041AEC0 lpFileName      = dword ptr  4
.text:0041AEC0 arg_4           = dword ptr  8
.text:0041AEC0
.text:0041AEC0                 sub     esp, 1Ch
.text:0041AEC3                 mov     [esp+1Ch+var_10], ebx
.text:0041AEC7                 mov     ebx, [esp+1Ch+lpFileName]
.text:0041AECB                 mov     [esp+1Ch+var_4], ebp
.text:0041AECF                 xor     ebp, ebp
.text:0041AED1                 test    ebx, ebx
.text:0041AED3                 mov     [esp+1Ch+var_C], esi
.text:0041AED7                 mov     esi, [esp+1Ch+arg_4]
.text:0041AEDB                 mov     [esp+1Ch+var_8], edi
.text:0041AEDF                 jz      short loc_41AEE9
.text:0041AEE1                 test    esi, 0FFFFFFE8h
.text:0041AEE7                 jz      short loc_41AF10
.text:0041AEE9
.text:0041AEE9 loc_41AEE9:                             ; CODE XREF: sub_41AEC0+1F↑j
.text:0041AEE9                 call    _errno
.text:0041AEEE                 mov     dword ptr [eax], 16h
.text:0041AEF4
.text:0041AEF4 loc_41AEF4:                             ; CODE XREF: sub_41AEC0+B1↓j
.text:0041AEF4                 mov     eax, 0FFFFFFFFh
.text:0041AEF9
.text:0041AEF9 loc_41AEF9:                             ; CODE XREF: sub_41AEC0+86↓j
.text:0041AEF9                                         ; sub_41AEC0+A4↓j
.text:0041AEF9                 mov     ebx, [esp+1Ch+var_10]
.text:0041AEFD                 mov     esi, [esp+1Ch+var_C]
.text:0041AF01                 mov     edi, [esp+1Ch+var_8]
.text:0041AF05                 mov     ebp, [esp+1Ch+var_4]
.text:0041AF09                 add     esp, 1Ch
.text:0041AF0C                 retn
.text:0041AF0C ; ---------------------------------------------------------------------------
.text:0041AF0D                 align 10h
.text:0041AF10
.text:0041AF10 loc_41AF10:                             ; CODE XREF: sub_41AEC0+27↑j
.text:0041AF10                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:0041AF17                 call    SetErrorMode
.text:0041AF1C                 sub     esp, 4
.text:0041AF1F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:0041AF22                 call    GetFileAttributesA
.text:0041AF27                 sub     esp, 4
.text:0041AF2A                 mov     edi, eax
.text:0041AF2C                 cmp     eax, 0FFFFFFFFh
.text:0041AF2F                 jz      short loc_41AF73
.text:0041AF31
.text:0041AF31 loc_41AF31:                             ; CODE XREF: sub_41AEC0+C6↓j
.text:0041AF31                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:0041AF38                 call    SetErrorMode
.text:0041AF3D                 sub     esp, 4
.text:0041AF40                 mov     eax, 0FFFFFFFFh
.text:0041AF45                 inc     ebp
.text:0041AF46                 jz      short loc_41AEF9
.text:0041AF48                 test    esi, 10h
.text:0041AF4E                 jz      short loc_41AF58
.text:0041AF50                 test    edi, 10h
.text:0041AF56                 jz      short loc_41AF66
.text:0041AF58
.text:0041AF58 loc_41AF58:                             ; CODE XREF: sub_41AEC0+8E↑j
.text:0041AF58                 and     esi, 2
.text:0041AF5B                 jz      short loc_41AF62
.text:0041AF5D                 and     edi, 1
.text:0041AF60                 jnz     short loc_41AF66
.text:0041AF62
.text:0041AF62 loc_41AF62:                             ; CODE XREF: sub_41AEC0+9B↑j
.text:0041AF62                 xor     eax, eax
.text:0041AF64                 jmp     short loc_41AEF9
.text:0041AF66 ; ---------------------------------------------------------------------------
.text:0041AF66
.text:0041AF66 loc_41AF66:                             ; CODE XREF: sub_41AEC0+96↑j
.text:0041AF66                                         ; sub_41AEC0+A0↑j
.text:0041AF66                 call    _errno
.text:0041AF6B                 mov     dword ptr [eax], 0Dh
.text:0041AF71                 jmp     short loc_41AEF4
.text:0041AF73 ; ---------------------------------------------------------------------------
.text:0041AF73
.text:0041AF73 loc_41AF73:                             ; CODE XREF: sub_41AEC0+6F↑j
.text:0041AF73                 call    sub_41AD20
.text:0041AF78                 mov     ebp, eax
.text:0041AF7A                 call    _errno
.text:0041AF7F                 mov     [eax], ebp
.text:0041AF81                 mov     ebp, 0FFFFFFFFh
.text:0041AF86                 jmp     short loc_41AF31
.text:0041AF86 sub_41AEC0      endp
.text:0041AF86
.text:0041AF86 ; ---------------------------------------------------------------------------
.text:0041AF88                 align 10h
.text:0041AF90 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041B1AF↓o
.text:0041AF9C aLu_1           db '%lu',0              ; DATA XREF: .text:0041B1BF↓o
.text:0041AFA0 asc_41AFA0      db ' ',0                ; DATA XREF: .text:loc_41B2A8↓o
.text:0041AFA2                 align 10h
.text:0041AFB0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:0041AFB0                                         ; DATA XREF: .text:0041B2DF↓o
.text:0041AFD0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41B2ED↓o
.text:0041AFDC aServer         db ' Server',0          ; DATA XREF: .text:0041B316↓o
.text:0041AFDC                                         ; .text:loc_41B48E↓o
.text:0041AFE4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_41B328↓o
.text:0041AFF5 aDatacenterServ db ' Datacenter Server',0
.text:0041AFF5                                         ; DATA XREF: .text:loc_41B332↓o
.text:0041B008 aStandardEditio db ' Standard Edition',0
.text:0041B008                                         ; DATA XREF: .text:0041B35A↓o
.text:0041B01A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_41B364↓o
.text:0041B027 aEnterpriseEdit db ' Enterprise Edition',0
.text:0041B027                                         ; DATA XREF: .text:loc_41B36E↓o
.text:0041B03B aDatacenterEdit db ' Datacenter Edition',0
.text:0041B03B                                         ; DATA XREF: .text:loc_41B378↓o
.text:0041B04F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:0041B38B↓o
.text:0041B05D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_41B395↓o
.text:0041B05D                                         ; .text:loc_41B4A0↓o
.text:0041B06B                 align 10h
.text:0041B070 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:0041B070                                         ; DATA XREF: .text:0041B3C2↓o
.text:0041B0A0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:0041B409↓o
.text:0041B0AC aWinnt          db 'WINNT',0            ; DATA XREF: .text:0041B444↓o
.text:0041B0B2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:0041B45B↓o
.text:0041B0BB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:0041B472↓o
.text:0041B0C4                 align 10h
.text:0041B0D0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:0041B0D0                                         ; DATA XREF: .text:0041B5E7↓o
.text:0041B0F3                 db 1Dh dup(90h)
.text:0041B110 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:0041B110                                         ; DATA XREF: .text:0041B646↓o
.text:0041B136 ; ---------------------------------------------------------------------------
.text:0041B136
.text:0041B136 loc_41B136:                             ; DATA XREF: .text:loc_41B6B1↓o
.text:0041B136                 and     [ebx+45h], dl
.text:0041B139                 add     [eax], ah
.text:0041B13B                 push    ebx
.text:0041B13C                 push    eax
.text:0041B13D                 xor     [eax], eax
.text:0041B13F
.text:0041B13F loc_41B13F:                             ; DATA XREF: .text:loc_41B72B↓o
.text:0041B13F                 and     [edi+53h], cl
.text:0041B142                 push    edx
.text:0041B143                 xor     al, [eax]
.text:0041B145                 lea     esi, [esi+0]
.text:0041B149                 lea     edi, [edi+0]
.text:0041B150                 push    edi
.text:0041B151                 push    esi
.text:0041B152                 push    ebx
.text:0041B153                 sub     esp, 130h
.text:0041B159                 mov     ebx, [esp+140h]
.text:0041B160                 call    sub_41B860
.text:0041B165                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B16A                 cmp     eax, 1
.text:0041B16D                 jz      loc_41B610
.text:0041B173                 cmp     eax, 1
.text:0041B176                 jb      loc_41B5E6
.text:0041B17C                 cmp     eax, 2
.text:0041B17F                 jz      loc_41B230
.text:0041B185                 cmp     eax, 3
.text:0041B188                 jz      short loc_41B1EF
.text:0041B18A                 lea     esi, [esi+0]
.text:0041B190
.text:0041B190 loc_41B190:                             ; CODE XREF: .text:0041B225↓j
.text:0041B190                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B196                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B19C
.text:0041B19C loc_41B19C:                             ; CODE XREF: .text:0041B62F↓j
.text:0041B19C                 mov     [esp+10h], edx
.text:0041B1A0                 mov     ebx, [esp+144h]
.text:0041B1A7                 mov     [esp+0Ch], ecx
.text:0041B1AB                 mov     [esp+8], eax
.text:0041B1AF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:0041B1B7                 mov     [esp], ebx
.text:0041B1BA                 call    sprintf
.text:0041B1BF                 mov     dword ptr [esp+4], offset aLu_1 ; "%lu"
.text:0041B1C7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041B1CD                 mov     ecx, [esp+148h]
.text:0041B1D4                 mov     [esp+8], edi
.text:0041B1D8                 mov     [esp], ecx
.text:0041B1DB                 call    sprintf
.text:0041B1E0                 mov     eax, 1
.text:0041B1E5
.text:0041B1E5 loc_41B1E5:                             ; CODE XREF: .text:0041B3DF↓j
.text:0041B1E5                                         ; .text:0041B42C↓j
.text:0041B1E5                 add     esp, 130h
.text:0041B1EB                 pop     ebx
.text:0041B1EC                 pop     esi
.text:0041B1ED                 pop     edi
.text:0041B1EE                 retn
.text:0041B1EF ; ---------------------------------------------------------------------------
.text:0041B1EF
.text:0041B1EF loc_41B1EF:                             ; CODE XREF: .text:0041B188↑j
.text:0041B1EF                 mov     dword ptr [ebx], 7263694Dh
.text:0041B1F5                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B1FC                 mov     dword ptr [ebx+8], 69572074h
.text:0041B203                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B20A                 mov     dword ptr [ebx+10h], 45432073h
.text:0041B211                 mov     word ptr [ebx+14h], 20h ; ' '
.text:0041B217                 mov     esi, esi
.text:0041B219                 lea     edi, [edi+0]
.text:0041B220
.text:0041B220 loc_41B220:                             ; CODE XREF: .text:0041B2C8↓j
.text:0041B220                                         ; .text:0041B609↓j ...
.text:0041B220                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B225                 jmp     loc_41B190
.text:0041B225 ; ---------------------------------------------------------------------------
.text:0041B22A                 align 10h
.text:0041B230
.text:0041B230 loc_41B230:                             ; CODE XREF: .text:0041B17F↑j
.text:0041B230                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:0041B236                 cmp     edx, 3
.text:0041B239                 mov     eax, edx
.text:0041B23B                 jz      loc_41B5A5
.text:0041B241
.text:0041B241 loc_41B241:                             ; CODE XREF: .text:0041B5AC↓j
.text:0041B241                 cmp     eax, 4
.text:0041B244                 jz      loc_41B565
.text:0041B24A
.text:0041B24A loc_41B24A:                             ; CODE XREF: .text:0041B56D↓j
.text:0041B24A                 cmp     eax, 4
.text:0041B24D                 ja      loc_41B4B2
.text:0041B253                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B259                 test    ecx, ecx
.text:0041B25B                 jnz     loc_41B4B2
.text:0041B261                 mov     dword ptr [ebx], 7263694Dh
.text:0041B267                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B26E                 mov     dword ptr [ebx+8], 69572074h
.text:0041B275                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B27C                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B283
.text:0041B283 loc_41B283:                             ; CODE XREF: .text:0041B525↓j
.text:0041B283                 mov     byte ptr [ebx+14h], 0
.text:0041B287
.text:0041B287 loc_41B287:                             ; CODE XREF: .text:0041B4B5↓j
.text:0041B287                                         ; .text:0041B4CC↓j ...
.text:0041B287                 mov     esi, dword_42B150
.text:0041B28D                 test    esi, esi
.text:0041B28F                 jz      loc_41B3A2
.text:0041B295                 movzx   eax, ds:byte_42D16A
.text:0041B29C                 cmp     al, 1
.text:0041B29E                 jz      loc_41B382
.text:0041B2A4                 cmp     al, 3
.text:0041B2A6                 jz      short loc_41B2CD
.text:0041B2A8
.text:0041B2A8 loc_41B2A8:                             ; CODE XREF: .text:0041B2EB↓j
.text:0041B2A8                                         ; .text:0041B326↓j ...
.text:0041B2A8                 mov     dword ptr [esp+4], offset asc_41AFA0 ; " "
.text:0041B2B0                 mov     [esp], ebx
.text:0041B2B3                 call    strcat
.text:0041B2B8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:0041B2C0                 mov     [esp], ebx
.text:0041B2C3                 call    strcat
.text:0041B2C8                 jmp     loc_41B220
.text:0041B2CD ; ---------------------------------------------------------------------------
.text:0041B2CD
.text:0041B2CD loc_41B2CD:                             ; CODE XREF: .text:0041B2A6↑j
.text:0041B2CD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:0041B2D4                 jz      short loc_41B2F6
.text:0041B2D6
.text:0041B2D6 loc_41B2D6:                             ; CODE XREF: .text:0041B302↓j
.text:0041B2D6                 test    byte ptr ds:word_42D168, 2
.text:0041B2DD                 jz      short loc_41B2ED
.text:0041B2DF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:0041B2E6
.text:0041B2E6 loc_41B2E6:                             ; CODE XREF: .text:0041B2F4↓j
.text:0041B2E6                 call    printf
.text:0041B2EB                 jmp     short loc_41B2A8
.text:0041B2ED ; ---------------------------------------------------------------------------
.text:0041B2ED
.text:0041B2ED loc_41B2ED:                             ; CODE XREF: .text:0041B2DD↑j
.text:0041B2ED                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:0041B2F4                 jmp     short loc_41B2E6
.text:0041B2F6 ; ---------------------------------------------------------------------------
.text:0041B2F6
.text:0041B2F6 loc_41B2F6:                             ; CODE XREF: .text:0041B2D4↑j
.text:0041B2F6                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B2FB                 cmp     eax, 2
.text:0041B2FE                 jz      short loc_41B340
.text:0041B300                 test    eax, eax
.text:0041B302                 jnz     short loc_41B2D6
.text:0041B304                 cmp     byte ptr ds:word_42D168, 0
.text:0041B30B                 js      short loc_41B332
.text:0041B30D                 test    byte ptr ds:word_42D168, 2
.text:0041B314                 jnz     short loc_41B328
.text:0041B316                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041B31E
.text:0041B31E loc_41B31E:                             ; CODE XREF: .text:0041B330↓j
.text:0041B31E                                         ; .text:0041B33A↓j ...
.text:0041B31E                 mov     [esp], ebx
.text:0041B321                 call    strcat
.text:0041B326                 jmp     short loc_41B2A8
.text:0041B328 ; ---------------------------------------------------------------------------
.text:0041B328
.text:0041B328 loc_41B328:                             ; CODE XREF: .text:0041B314↑j
.text:0041B328                                         ; .text:0041B489↓j
.text:0041B328                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:0041B330                 jmp     short loc_41B31E
.text:0041B332 ; ---------------------------------------------------------------------------
.text:0041B332
.text:0041B332 loc_41B332:                             ; CODE XREF: .text:0041B30B↑j
.text:0041B332                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0041B33A                 jmp     short loc_41B31E
.text:0041B33A ; ---------------------------------------------------------------------------
.text:0041B33C                 align 10h
.text:0041B340
.text:0041B340 loc_41B340:                             ; CODE XREF: .text:0041B2FE↑j
.text:0041B340                 cmp     byte ptr ds:word_42D168, 0
.text:0041B347                 js      short loc_41B378
.text:0041B349                 movzx   eax, ds:word_42D168
.text:0041B350                 test    al, 2
.text:0041B352                 jnz     short loc_41B36E
.text:0041B354                 cmp     ax, 400h
.text:0041B358                 jz      short loc_41B364
.text:0041B35A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:0041B362                 jmp     short loc_41B31E
.text:0041B364 ; ---------------------------------------------------------------------------
.text:0041B364
.text:0041B364 loc_41B364:                             ; CODE XREF: .text:0041B358↑j
.text:0041B364                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:0041B36C                 jmp     short loc_41B31E
.text:0041B36E ; ---------------------------------------------------------------------------
.text:0041B36E
.text:0041B36E loc_41B36E:                             ; CODE XREF: .text:0041B352↑j
.text:0041B36E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:0041B376                 jmp     short loc_41B31E
.text:0041B378 ; ---------------------------------------------------------------------------
.text:0041B378
.text:0041B378 loc_41B378:                             ; CODE XREF: .text:0041B347↑j
.text:0041B378                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:0041B380                 jmp     short loc_41B31E
.text:0041B382 ; ---------------------------------------------------------------------------
.text:0041B382
.text:0041B382 loc_41B382:                             ; CODE XREF: .text:0041B29E↑j
.text:0041B382                 test    byte ptr ds:word_42D168+1, 2
.text:0041B389                 jz      short loc_41B395
.text:0041B38B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:0041B393                 jmp     short loc_41B31E
.text:0041B395 ; ---------------------------------------------------------------------------
.text:0041B395
.text:0041B395 loc_41B395:                             ; CODE XREF: .text:0041B389↑j
.text:0041B395                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041B39D                 jmp     loc_41B31E
.text:0041B3A2 ; ---------------------------------------------------------------------------
.text:0041B3A2
.text:0041B3A2 loc_41B3A2:                             ; CODE XREF: .text:0041B28F↑j
.text:0041B3A2                 mov     dword ptr [esp+28h], 0FFh
.text:0041B3AA                 lea     edx, [esp+2Ch]
.text:0041B3AE                 mov     [esp+10h], edx
.text:0041B3B2                 mov     dword ptr [esp+0Ch], 1
.text:0041B3BA                 mov     dword ptr [esp+8], 0
.text:0041B3C2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041B3CA                 mov     dword ptr [esp], 80000002h
.text:0041B3D1                 call    RegOpenKeyExA
.text:0041B3D6                 mov     edi, eax
.text:0041B3D8                 sub     esp, 14h
.text:0041B3DB                 xor     eax, eax
.text:0041B3DD                 test    edi, edi
.text:0041B3DF                 jnz     loc_41B1E5
.text:0041B3E5                 mov     dword ptr [esp+0Ch], 0
.text:0041B3ED                 mov     edi, [esp+2Ch]
.text:0041B3F1                 lea     esi, [esp+28h]
.text:0041B3F5                 mov     [esp+14h], esi
.text:0041B3F9                 lea     esi, [esp+30h]
.text:0041B3FD                 mov     [esp+10h], esi
.text:0041B401                 mov     dword ptr [esp+8], 0
.text:0041B409                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:0041B411                 mov     [esp], edi
.text:0041B414                 call    RegQueryValueExA
.text:0041B419                 sub     esp, 18h
.text:0041B41C                 test    eax, eax
.text:0041B41E                 jnz     short loc_41B42A
.text:0041B420                 cmp     dword ptr [esp+28h], 0FFh
.text:0041B428                 jbe     short loc_41B431
.text:0041B42A
.text:0041B42A loc_41B42A:                             ; CODE XREF: .text:0041B41E↑j
.text:0041B42A                 xor     eax, eax
.text:0041B42C                 jmp     loc_41B1E5
.text:0041B431 ; ---------------------------------------------------------------------------
.text:0041B431
.text:0041B431 loc_41B431:                             ; CODE XREF: .text:0041B428↑j
.text:0041B431                 mov     edx, [esp+2Ch]
.text:0041B435                 mov     [esp], edx
.text:0041B438                 call    RegCloseKey
.text:0041B43D                 sub     esp, 4
.text:0041B440                 mov     [esp+4], esi
.text:0041B444                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0041B44B                 call    lstrcmpiA
.text:0041B450                 sub     esp, 8
.text:0041B453                 test    eax, eax
.text:0041B455                 jz      short loc_41B4A0
.text:0041B457
.text:0041B457 loc_41B457:                             ; CODE XREF: .text:0041B4B0↓j
.text:0041B457                 mov     [esp+4], esi
.text:0041B45B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:0041B462                 call    lstrcmpiA
.text:0041B467                 sub     esp, 8
.text:0041B46A                 test    eax, eax
.text:0041B46C                 jz      short loc_41B48E
.text:0041B46E
.text:0041B46E loc_41B46E:                             ; CODE XREF: .text:0041B49E↓j
.text:0041B46E                 mov     [esp+4], esi
.text:0041B472                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:0041B479                 call    lstrcmpiA
.text:0041B47E                 sub     esp, 8
.text:0041B481                 test    eax, eax
.text:0041B483                 jnz     loc_41B2A8
.text:0041B489                 jmp     loc_41B328
.text:0041B48E ; ---------------------------------------------------------------------------
.text:0041B48E
.text:0041B48E loc_41B48E:                             ; CODE XREF: .text:0041B46C↑j
.text:0041B48E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041B496                 mov     [esp], ebx
.text:0041B499                 call    strcat
.text:0041B49E                 jmp     short loc_41B46E
.text:0041B4A0 ; ---------------------------------------------------------------------------
.text:0041B4A0
.text:0041B4A0 loc_41B4A0:                             ; CODE XREF: .text:0041B455↑j
.text:0041B4A0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:0041B4A8                 mov     [esp], ebx
.text:0041B4AB                 call    strcat
.text:0041B4B0                 jmp     short loc_41B457
.text:0041B4B2 ; ---------------------------------------------------------------------------
.text:0041B4B2
.text:0041B4B2 loc_41B4B2:                             ; CODE XREF: .text:0041B24D↑j
.text:0041B4B2                                         ; .text:0041B25B↑j
.text:0041B4B2                 cmp     eax, 5
.text:0041B4B5                 jnz     loc_41B287
.text:0041B4BB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B4C0                 cmp     eax, 2
.text:0041B4C3                 jz      short loc_41B52A
.text:0041B4C5                 cmp     eax, 1
.text:0041B4C8                 jz      short loc_41B503
.text:0041B4CA                 test    eax, eax
.text:0041B4CC                 jnz     loc_41B287
.text:0041B4D2                 mov     dword ptr [ebx], 7263694Dh
.text:0041B4D8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B4DF                 mov     dword ptr [ebx+8], 69572074h
.text:0041B4E6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B4ED                 mov     dword ptr [ebx+10h], 30322073h
.text:0041B4F4                 mov     word ptr [ebx+14h], 3030h
.text:0041B4FA                 mov     byte ptr [ebx+16h], 0
.text:0041B4FE                 jmp     loc_41B287
.text:0041B503 ; ---------------------------------------------------------------------------
.text:0041B503
.text:0041B503 loc_41B503:                             ; CODE XREF: .text:0041B4C8↑j
.text:0041B503                 mov     dword ptr [ebx], 7263694Dh
.text:0041B509                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B510                 mov     dword ptr [ebx+8], 69572074h
.text:0041B517                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B51E                 mov     dword ptr [ebx+10h], 50582073h
.text:0041B525                 jmp     loc_41B283
.text:0041B52A ; ---------------------------------------------------------------------------
.text:0041B52A
.text:0041B52A loc_41B52A:                             ; CODE XREF: .text:0041B4C3↑j
.text:0041B52A                 mov     dword ptr [ebx], 7263694Dh
.text:0041B530                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B537                 mov     dword ptr [ebx+8], 69572074h
.text:0041B53E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B545                 mov     dword ptr [ebx+10h], 65532073h
.text:0041B54C                 mov     dword ptr [ebx+14h], 72657672h
.text:0041B553                 mov     dword ptr [ebx+18h], 30303220h
.text:0041B55A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:0041B560                 jmp     loc_41B287
.text:0041B565 ; ---------------------------------------------------------------------------
.text:0041B565
.text:0041B565 loc_41B565:                             ; CODE XREF: .text:0041B244↑j
.text:0041B565                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B56B                 test    edx, edx
.text:0041B56D                 jnz     loc_41B24A
.text:0041B573                 mov     dword ptr [ebx], 7263694Dh
.text:0041B579                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B580                 mov     dword ptr [ebx+8], 69572074h
.text:0041B587                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B58E                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B595                 mov     dword ptr [ebx+14h], 302E3420h
.text:0041B59C                 mov     byte ptr [ebx+18h], 0
.text:0041B5A0                 jmp     loc_41B287
.text:0041B5A5 ; ---------------------------------------------------------------------------
.text:0041B5A5
.text:0041B5A5 loc_41B5A5:                             ; CODE XREF: .text:0041B23B↑j
.text:0041B5A5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:0041B5AC                 jnz     loc_41B241
.text:0041B5B2                 mov     dword ptr [ebx], 7263694Dh
.text:0041B5B8                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B5BF                 mov     dword ptr [ebx+8], 69572074h
.text:0041B5C6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B5CD                 mov     dword ptr [ebx+10h], 544E2073h
.text:0041B5D4                 mov     dword ptr [ebx+14h], 352E3320h
.text:0041B5DB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:0041B5E1                 jmp     loc_41B287
.text:0041B5E6 ; ---------------------------------------------------------------------------
.text:0041B5E6
.text:0041B5E6 loc_41B5E6:                             ; CODE XREF: .text:0041B176↑j
.text:0041B5E6                 cld
.text:0041B5E7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:0041B5EC                 mov     ecx, 8
.text:0041B5F1                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:0041B5F8                 mov     edi, ebx
.text:0041B5FA                 rep movsd
.text:0041B5FC                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:0041B603                 mov     [edi+2], dl
.text:0041B606                 mov     [edi], si
.text:0041B609                 jmp     loc_41B220
.text:0041B609 ; ---------------------------------------------------------------------------
.text:0041B60E                 align 10h
.text:0041B610
.text:0041B610 loc_41B610:                             ; CODE XREF: .text:0041B16D↑j
.text:0041B610                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B616                 cmp     ecx, 4
.text:0041B619                 jz      loc_41B6D0
.text:0041B61F
.text:0041B61F loc_41B61F:                             ; CODE XREF: .text:0041B726↓j
.text:0041B61F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B625
.text:0041B625 loc_41B625:                             ; CODE XREF: .text:0041B6D8↓j
.text:0041B625                 cmp     ecx, 4
.text:0041B628                 jz      short loc_41B634
.text:0041B62A
.text:0041B62A loc_41B62A:                             ; CODE XREF: .text:0041B63C↓j
.text:0041B62A                                         ; .text:0041B641↓j
.text:0041B62A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B62F                 jmp     loc_41B19C
.text:0041B634 ; ---------------------------------------------------------------------------
.text:0041B634
.text:0041B634 loc_41B634:                             ; CODE XREF: .text:0041B628↑j
.text:0041B634                 cmp     edx, 0Ah
.text:0041B637                 jz      short loc_41B661
.text:0041B639
.text:0041B639 loc_41B639:                             ; CODE XREF: .text:0041B6AF↓j
.text:0041B639                 cmp     ecx, 4
.text:0041B63C                 jnz     short loc_41B62A
.text:0041B63E                 cmp     edx, 5Ah ; 'Z'
.text:0041B641                 jnz     short loc_41B62A
.text:0041B643                 cld
.text:0041B644                 mov     edi, ebx
.text:0041B646                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:0041B64B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:0041B652                 mov     ecx, 9
.text:0041B657                 rep movsd
.text:0041B659                 mov     [edi], bx
.text:0041B65C                 jmp     loc_41B220
.text:0041B661 ; ---------------------------------------------------------------------------
.text:0041B661
.text:0041B661 loc_41B661:                             ; CODE XREF: .text:0041B637↑j
.text:0041B661                 mov     dword ptr [ebx], 7263694Dh
.text:0041B667                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B66E                 mov     dword ptr [ebx+8], 69572074h
.text:0041B675                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B67C                 mov     dword ptr [ebx+10h], 38392073h
.text:0041B683                 mov     byte ptr [ebx+14h], 0
.text:0041B687                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041B68D                 lea     edi, [edx-7CFh]
.text:0041B693                 cmp     edi, 0B7h ; '·'
.text:0041B699                 jbe     short loc_41B6C3
.text:0041B69B                 cmp     edx, 886h
.text:0041B6A1                 ja      short loc_41B6B1
.text:0041B6A3
.text:0041B6A3 loc_41B6A3:                             ; CODE XREF: .text:0041B6C1↓j
.text:0041B6A3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B6A9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B6AF                 jmp     short loc_41B639
.text:0041B6B1 ; ---------------------------------------------------------------------------
.text:0041B6B1
.text:0041B6B1 loc_41B6B1:                             ; CODE XREF: .text:0041B6A1↑j
.text:0041B6B1                 mov     dword ptr [esp+4], offset loc_41B136
.text:0041B6B9
.text:0041B6B9 loc_41B6B9:                             ; CODE XREF: .text:0041B6CB↓j
.text:0041B6B9                 mov     [esp], ebx
.text:0041B6BC                 call    strcat
.text:0041B6C1                 jmp     short loc_41B6A3
.text:0041B6C3 ; ---------------------------------------------------------------------------
.text:0041B6C3
.text:0041B6C3 loc_41B6C3:                             ; CODE XREF: .text:0041B699↑j
.text:0041B6C3                 mov     dword ptr [esp+4], 41B13Ah
.text:0041B6CB                 jmp     short loc_41B6B9
.text:0041B6CB ; ---------------------------------------------------------------------------
.text:0041B6CD                 align 10h
.text:0041B6D0
.text:0041B6D0 loc_41B6D0:                             ; CODE XREF: .text:0041B619↑j
.text:0041B6D0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:0041B6D6                 test    edx, edx
.text:0041B6D8                 jnz     loc_41B625
.text:0041B6DE                 mov     dword ptr [ebx], 7263694Dh
.text:0041B6E4                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041B6EB                 mov     dword ptr [ebx+8], 69572074h
.text:0041B6F2                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041B6F9                 mov     dword ptr [ebx+10h], 35392073h
.text:0041B700                 mov     byte ptr [ebx+14h], 0
.text:0041B704                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041B70A                 lea     ecx, [edx-3B7h]
.text:0041B710                 cmp     ecx, 81h
.text:0041B716                 jbe     short loc_41B73D
.text:0041B718                 cmp     edx, 438h
.text:0041B71E                 ja      short loc_41B72B
.text:0041B720
.text:0041B720 loc_41B720:                             ; CODE XREF: .text:0041B73B↓j
.text:0041B720                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B726                 jmp     loc_41B61F
.text:0041B72B ; ---------------------------------------------------------------------------
.text:0041B72B
.text:0041B72B loc_41B72B:                             ; CODE XREF: .text:0041B71E↑j
.text:0041B72B                 mov     dword ptr [esp+4], offset loc_41B13F
.text:0041B733
.text:0041B733 loc_41B733:                             ; CODE XREF: .text:0041B745↓j
.text:0041B733                 mov     [esp], ebx
.text:0041B736                 call    strcat
.text:0041B73B                 jmp     short loc_41B720
.text:0041B73D ; ---------------------------------------------------------------------------
.text:0041B73D
.text:0041B73D loc_41B73D:                             ; CODE XREF: .text:0041B716↑j
.text:0041B73D                 mov     dword ptr [esp+4], 41B13Ah
.text:0041B745                 jmp     short loc_41B733
.text:0041B745 ; ---------------------------------------------------------------------------
.text:0041B747                 align 10h
.text:0041B750
.text:0041B750 ; =============== S U B R O U T I N E =======================================
.text:0041B750
.text:0041B750
.text:0041B750 sub_41B750      proc near               ; CODE XREF: .text:004195EE↑p
.text:0041B750                                         ; sub_419A70+12A↑p
.text:0041B750                 sub     esp, 0Ch
.text:0041B753                 call    sub_41B860
.text:0041B758                 mov     eax, ds:dword_42D0C0
.text:0041B75D                 add     esp, 0Ch
.text:0041B760                 retn
.text:0041B760 sub_41B750      endp
.text:0041B760
.text:0041B761 ; ---------------------------------------------------------------------------
.text:0041B761                 jmp     short loc_41B770
.text:0041B761 ; ---------------------------------------------------------------------------
.text:0041B763                 align 10h
.text:0041B770
.text:0041B770 loc_41B770:                             ; CODE XREF: .text:0041B761↑j
.text:0041B770                 sub     esp, 0Ch
.text:0041B773                 call    sub_41B860
.text:0041B778                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B77D                 add     esp, 0Ch
.text:0041B780                 retn
.text:0041B781 ; ---------------------------------------------------------------------------
.text:0041B781                 jmp     short loc_41B790
.text:0041B781 ; ---------------------------------------------------------------------------
.text:0041B783                 align 10h
.text:0041B790
.text:0041B790 loc_41B790:                             ; CODE XREF: .text:0041B781↑j
.text:0041B790                 sub     esp, 0Ch
.text:0041B793                 call    sub_41B860
.text:0041B798                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041B79D                 add     esp, 0Ch
.text:0041B7A0                 retn
.text:0041B7A1 ; ---------------------------------------------------------------------------
.text:0041B7A1                 jmp     short loc_41B7B0
.text:0041B7A1 ; ---------------------------------------------------------------------------
.text:0041B7A3                 align 10h
.text:0041B7B0
.text:0041B7B0 loc_41B7B0:                             ; CODE XREF: .text:0041B7A1↑j
.text:0041B7B0                 sub     esp, 0Ch
.text:0041B7B3                 call    sub_41B860
.text:0041B7B8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B7BD                 add     esp, 0Ch
.text:0041B7C0                 retn
.text:0041B7C1 ; ---------------------------------------------------------------------------
.text:0041B7C1                 jmp     short loc_41B7D0
.text:0041B7C1 ; ---------------------------------------------------------------------------
.text:0041B7C3                 align 10h
.text:0041B7D0
.text:0041B7D0 loc_41B7D0:                             ; CODE XREF: .text:0041B7C1↑j
.text:0041B7D0                 sub     esp, 0Ch
.text:0041B7D3                 call    GetVersion
.text:0041B7D8                 shr     eax, 10h
.text:0041B7DB                 add     esp, 0Ch
.text:0041B7DE                 retn
.text:0041B7DE ; ---------------------------------------------------------------------------
.text:0041B7DF                 align 10h
.text:0041B7E0                 sub     esp, 0Ch
.text:0041B7E3                 call    sub_41B860
.text:0041B7E8                 xor     eax, eax
.text:0041B7EA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:0041B7F1                 setz    al
.text:0041B7F4                 add     esp, 0Ch
.text:0041B7F7                 retn
.text:0041B7F7 ; ---------------------------------------------------------------------------
.text:0041B7F8                 align 10h
.text:0041B800
.text:0041B800 ; =============== S U B R O U T I N E =======================================
.text:0041B800
.text:0041B800
.text:0041B800 sub_41B800      proc near               ; CODE XREF: .text:loc_418B00↑p
.text:0041B800                                         ; .text:loc_4195D4↑p ...
.text:0041B800                 sub     esp, 0Ch
.text:0041B803                 call    sub_41B860
.text:0041B808                 xor     eax, eax
.text:0041B80A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:0041B811                 setz    al
.text:0041B814                 add     esp, 0Ch
.text:0041B817                 retn
.text:0041B817 sub_41B800      endp
.text:0041B817
.text:0041B817 ; ---------------------------------------------------------------------------
.text:0041B818                 align 10h
.text:0041B820                 sub     esp, 0Ch
.text:0041B823                 call    sub_41B860
.text:0041B828                 xor     eax, eax
.text:0041B82A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:0041B831                 setz    al
.text:0041B834                 add     esp, 0Ch
.text:0041B837                 retn
.text:0041B837 ; ---------------------------------------------------------------------------
.text:0041B838                 align 10h
.text:0041B840                 sub     esp, 0Ch
.text:0041B843                 call    sub_41B860
.text:0041B848                 xor     eax, eax
.text:0041B84A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:0041B851                 setz    al
.text:0041B854                 add     esp, 0Ch
.text:0041B857                 retn
.text:0041B857 ; ---------------------------------------------------------------------------
.text:0041B858                 align 10h
.text:0041B860
.text:0041B860 ; =============== S U B R O U T I N E =======================================
.text:0041B860
.text:0041B860
.text:0041B860 sub_41B860      proc near               ; CODE XREF: .text:0041B160↑p
.text:0041B860                                         ; sub_41B750+3↑p ...
.text:0041B860
.text:0041B860 lpVersionInformation= dword ptr -0BCh
.text:0041B860 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:0041B860
.text:0041B860                 sub     esp, 0BCh
.text:0041B866                 mov     edx, ds:dword_42D170
.text:0041B86C                 test    edx, edx
.text:0041B86E                 jz      short loc_41B880
.text:0041B870
.text:0041B870 loc_41B870:                             ; CODE XREF: sub_41B860+7B↓j
.text:0041B870                 mov     edx, 1
.text:0041B875
.text:0041B875 loc_41B875:                             ; CODE XREF: sub_41B860+217↓j
.text:0041B875                 mov     eax, edx
.text:0041B877                 add     esp, 0BCh
.text:0041B87D                 retn
.text:0041B87D ; ---------------------------------------------------------------------------
.text:0041B87E                 align 10h
.text:0041B880
.text:0041B880 loc_41B880:                             ; CODE XREF: sub_41B860+E↑j
.text:0041B880                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:0041B887                 mov     edx, 9Ch ; 'œ'
.text:0041B88C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:0041B892                 call    GetVersionExA
.text:0041B897                 sub     esp, 4
.text:0041B89A                 test    eax, eax
.text:0041B89C                 jz      loc_41BA54
.text:0041B8A2
.text:0041B8A2 loc_41B8A2:                             ; CODE XREF: sub_41B860+245↓j
.text:0041B8A2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:0041B8A9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041B8AE                 cmp     eax, 1
.text:0041B8B1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041B8B7                 jz      loc_41B9A0
.text:0041B8BD                 cmp     eax, 1
.text:0041B8C0                 jb      loc_41B990
.text:0041B8C6                 cmp     eax, 2
.text:0041B8C9                 jz      short loc_41B8EA
.text:0041B8CB                 cmp     eax, 3
.text:0041B8CE                 jz      short loc_41B8DD
.text:0041B8D0
.text:0041B8D0 loc_41B8D0:                             ; CODE XREF: sub_41B860+88↓j
.text:0041B8D0                                         ; sub_41B860+C0↓j ...
.text:0041B8D0                 mov     edx, 1
.text:0041B8D5                 mov     ds:dword_42D170, edx
.text:0041B8DB                 jmp     short loc_41B870
.text:0041B8DD ; ---------------------------------------------------------------------------
.text:0041B8DD
.text:0041B8DD loc_41B8DD:                             ; CODE XREF: sub_41B860+6E↑j
.text:0041B8DD                 mov     ecx, 17h
.text:0041B8E2
.text:0041B8E2 loc_41B8E2:                             ; CODE XREF: sub_41B860+1A7↓j
.text:0041B8E2                 mov     ds:dword_42D0C0, ecx
.text:0041B8E8                 jmp     short loc_41B8D0
.text:0041B8EA ; ---------------------------------------------------------------------------
.text:0041B8EA
.text:0041B8EA loc_41B8EA:                             ; CODE XREF: sub_41B860+69↑j
.text:0041B8EA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:0041B8EF                 cmp     eax, 3
.text:0041B8F2                 jz      short loc_41B96B
.text:0041B8F4                 cmp     eax, 4
.text:0041B8F7                 jz      short loc_41B95A
.text:0041B8F9
.text:0041B8F9 loc_41B8F9:                             ; CODE XREF: sub_41B860+102↓j
.text:0041B8F9                 cmp     eax, 4
.text:0041B8FC                 ja      short loc_41B922
.text:0041B8FE                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B904                 test    ecx, ecx
.text:0041B906                 jnz     short loc_41B922
.text:0041B908                 mov     edx, 1Eh
.text:0041B90D
.text:0041B90D loc_41B90D:                             ; CODE XREF: sub_41B860+DF↓j
.text:0041B90D                 mov     ds:dword_42D0C0, edx
.text:0041B913
.text:0041B913 loc_41B913:                             ; CODE XREF: sub_41B860+C5↓j
.text:0041B913                                         ; sub_41B860+D8↓j ...
.text:0041B913                 movzx   ecx, ds:word_42D164
.text:0041B91A                 add     ds:dword_42D0C0, ecx
.text:0041B920                 jmp     short loc_41B8D0
.text:0041B922 ; ---------------------------------------------------------------------------
.text:0041B922
.text:0041B922 loc_41B922:                             ; CODE XREF: sub_41B860+9C↑j
.text:0041B922                                         ; sub_41B860+A6↑j
.text:0041B922                 cmp     eax, 5
.text:0041B925                 jnz     short loc_41B913
.text:0041B927                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B92C                 cmp     eax, 2
.text:0041B92F                 jz      short loc_41B94E
.text:0041B931                 cmp     eax, 1
.text:0041B934                 jz      short loc_41B941
.text:0041B936                 test    eax, eax
.text:0041B938                 jnz     short loc_41B913
.text:0041B93A                 mov     edx, 32h ; '2'
.text:0041B93F                 jmp     short loc_41B90D
.text:0041B941 ; ---------------------------------------------------------------------------
.text:0041B941
.text:0041B941 loc_41B941:                             ; CODE XREF: sub_41B860+D4↑j
.text:0041B941                 mov     ecx, 3Ch ; '<'
.text:0041B946
.text:0041B946 loc_41B946:                             ; CODE XREF: sub_41B860+122↓j
.text:0041B946                 mov     ds:dword_42D0C0, ecx
.text:0041B94C                 jmp     short loc_41B913
.text:0041B94E ; ---------------------------------------------------------------------------
.text:0041B94E
.text:0041B94E loc_41B94E:                             ; CODE XREF: sub_41B860+CF↑j
.text:0041B94E                 mov     eax, 46h ; 'F'
.text:0041B953
.text:0041B953 loc_41B953:                             ; CODE XREF: sub_41B860+109↓j
.text:0041B953                                         ; sub_41B860+129↓j
.text:0041B953                 mov     ds:dword_42D0C0, eax
.text:0041B958                 jmp     short loc_41B913
.text:0041B95A ; ---------------------------------------------------------------------------
.text:0041B95A
.text:0041B95A loc_41B95A:                             ; CODE XREF: sub_41B860+97↑j
.text:0041B95A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:0041B960                 test    ecx, ecx
.text:0041B962                 jnz     short loc_41B8F9
.text:0041B964                 mov     eax, 28h ; '('
.text:0041B969                 jmp     short loc_41B953
.text:0041B96B ; ---------------------------------------------------------------------------
.text:0041B96B
.text:0041B96B loc_41B96B:                             ; CODE XREF: sub_41B860+92↑j
.text:0041B96B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B970                 cmp     eax, 33h ; '3'
.text:0041B973                 jz      short loc_41B984
.text:0041B975                 cmp     eax, 5
.text:0041B978                 setz    cl
.text:0041B97B                 movzx   edx, cl
.text:0041B97E                 lea     ecx, [edx+edx*4+1Eh]
.text:0041B982                 jmp     short loc_41B946
.text:0041B984 ; ---------------------------------------------------------------------------
.text:0041B984
.text:0041B984 loc_41B984:                             ; CODE XREF: sub_41B860+113↑j
.text:0041B984                 mov     eax, 24h ; '$'
.text:0041B989                 jmp     short loc_41B953
.text:0041B989 ; ---------------------------------------------------------------------------
.text:0041B98B                 align 10h
.text:0041B990
.text:0041B990 loc_41B990:                             ; CODE XREF: sub_41B860+60↑j
.text:0041B990                 mov     edx, 2
.text:0041B995                 mov     ds:dword_42D0C0, edx
.text:0041B99B                 jmp     loc_41B8D0
.text:0041B9A0 ; ---------------------------------------------------------------------------
.text:0041B9A0
.text:0041B9A0 loc_41B9A0:                             ; CODE XREF: sub_41B860+57↑j
.text:0041B9A0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:0041B9A6                 cmp     ecx, 4
.text:0041B9A9                 jnz     loc_41B8D0
.text:0041B9AF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041B9B4                 test    eax, eax
.text:0041B9B6                 jnz     short loc_41B9DA
.text:0041B9B8                 mov     eax, 0Ah
.text:0041B9BD                 mov     ds:dword_42D0C0, eax
.text:0041B9C2                 lea     eax, [edx-3B7h]
.text:0041B9C8                 cmp     eax, 81h
.text:0041B9CD                 ja      short loc_41BA45
.text:0041B9CF                 mov     edx, 0Bh
.text:0041B9D4
.text:0041B9D4 loc_41B9D4:                             ; CODE XREF: sub_41B860+1F2↓j
.text:0041B9D4                 mov     ds:dword_42D0C0, edx
.text:0041B9DA
.text:0041B9DA loc_41B9DA:                             ; CODE XREF: sub_41B860+156↑j
.text:0041B9DA                                         ; sub_41B860+1EB↓j
.text:0041B9DA                 cmp     ecx, 4
.text:0041B9DD                 jnz     loc_41B8D0
.text:0041B9E3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:0041B9EA                 jz      short loc_41BA0C
.text:0041B9EC
.text:0041B9EC loc_41B9EC:                             ; CODE XREF: sub_41B860+1D4↓j
.text:0041B9EC                                         ; sub_41B860+1DC↓j
.text:0041B9EC                 cmp     ecx, 4
.text:0041B9EF                 jnz     loc_41B8D0
.text:0041B9F5                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041B9FC                 jnz     loc_41B8D0
.text:0041BA02                 mov     ecx, 12h
.text:0041BA07                 jmp     loc_41B8E2
.text:0041BA0C ; ---------------------------------------------------------------------------
.text:0041BA0C
.text:0041BA0C loc_41BA0C:                             ; CODE XREF: sub_41B860+18A↑j
.text:0041BA0C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:0041BA12                 mov     eax, 0Eh
.text:0041BA17                 mov     ds:dword_42D0C0, eax
.text:0041BA1C                 lea     eax, [edx-7CFh]
.text:0041BA22                 cmp     eax, 0B7h ; '·'
.text:0041BA27                 ja      short loc_41BA36
.text:0041BA29                 mov     edx, 0Fh
.text:0041BA2E
.text:0041BA2E loc_41BA2E:                             ; CODE XREF: sub_41B860+1E3↓j
.text:0041BA2E                 mov     ds:dword_42D0C0, edx
.text:0041BA34                 jmp     short loc_41B9EC
.text:0041BA36 ; ---------------------------------------------------------------------------
.text:0041BA36
.text:0041BA36 loc_41BA36:                             ; CODE XREF: sub_41B860+1C7↑j
.text:0041BA36                 cmp     edx, 886h
.text:0041BA3C                 jbe     short loc_41B9EC
.text:0041BA3E                 mov     edx, 10h
.text:0041BA43                 jmp     short loc_41BA2E
.text:0041BA45 ; ---------------------------------------------------------------------------
.text:0041BA45
.text:0041BA45 loc_41BA45:                             ; CODE XREF: sub_41B860+16D↑j
.text:0041BA45                 cmp     edx, 438h
.text:0041BA4B                 jbe     short loc_41B9DA
.text:0041BA4D                 mov     edx, 0Ch
.text:0041BA52                 jmp     short loc_41B9D4
.text:0041BA54 ; ---------------------------------------------------------------------------
.text:0041BA54
.text:0041BA54 loc_41BA54:                             ; CODE XREF: sub_41B860+3C↑j
.text:0041BA54                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041BA5C                 xor     edx, edx
.text:0041BA5E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:0041BA62                 mov     dword_42B150, edx
.text:0041BA68                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041BA6B                 call    GetVersionExA
.text:0041BA70                 sub     esp, 4
.text:0041BA73                 xor     edx, edx
.text:0041BA75                 test    eax, eax
.text:0041BA77                 jz      loc_41B875
.text:0041BA7D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:0041BA81                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:0041BA85                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041BA8B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041BA8F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:0041BA95                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:0041BA99                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:0041BA9F                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:0041BAA5                 jmp     loc_41B8A2
.text:0041BAA5 sub_41B860      endp
.text:0041BAA5
.text:0041BAA5 ; ---------------------------------------------------------------------------
.text:0041BAAA                 align 10h
.text:0041BAB0 aNotset         db 'notset',0           ; DATA XREF: .data:off_42B160↓o
.text:0041BAB0                                         ; .data:off_42B164↓o
.text:0041BAB7 ; ---------------------------------------------------------------------------
.text:0041BAB7
.text:0041BAB7 loc_41BAB7:                             ; DATA XREF: .text:loc_41BB55↓o
.text:0041BAB7                 jb      short loc_41BB30
.text:0041BAB9                 add     [eax], ah
.text:0041BABB                 or      [eax], eax
.text:0041BABD
.text:0041BABD loc_41BABD:                             ; DATA XREF: .text:0041BBA8↓o
.text:0041BABD                                         ; .text:0041BC0E↓o ...
.text:0041BABD                 add     [eax], ah
.text:0041BABF                 and     eax, 64252064h
.text:0041BAC4                 and     [eax], al
.text:0041BAC6                 lea     esi, [esi+0]
.text:0041BAC9                 lea     edi, [edi+0]
.text:0041BAD0                 push    ebp
.text:0041BAD1                 push    edi
.text:0041BAD2                 push    esi
.text:0041BAD3                 push    ebx
.text:0041BAD4                 sub     esp, 14Ch
.text:0041BADA                 mov     edx, off_42B160 ; "notset"
.text:0041BAE0                 mov     edi, [esp+164h]
.text:0041BAE7                 mov     ebp, [esp+168h]
.text:0041BAEE                 mov     [esp+4], edx
.text:0041BAF2                 mov     edx, off_42B164 ; "notset"
.text:0041BAF8                 mov     [esp], edx
.text:0041BAFB                 call    strcmp
.text:0041BB00                 test    eax, eax
.text:0041BB02                 jz      loc_41BEF0
.text:0041BB08
.text:0041BB08 loc_41BB08:                             ; CODE XREF: .text:0041BF3C↓j
.text:0041BB08                 lea     ebx, [esp+20h]
.text:0041BB0C                 lea     esi, [esi+0]
.text:0041BB10
.text:0041BB10 loc_41BB10:                             ; CODE XREF: .text:0041BB46↓j
.text:0041BB10                 mov     [esp+4], ebx
.text:0041BB14                 mov     ecx, off_42B164 ; "notset"
.text:0041BB1A                 mov     [esp], ecx
.text:0041BB1D                 call    loc_419B10
.text:0041BB22                 test    eax, eax
.text:0041BB24                 jns     short loc_41BB55
.text:0041BB26                 mov     eax, off_42B164 ; "notset"
.text:0041BB2B                 cmp     byte ptr [eax], 0
.text:0041BB2E                 jz      short loc_41BB48
.text:0041BB30
.text:0041BB30 loc_41BB30:                             ; CODE XREF: .text:loc_41BAB7↑j
.text:0041BB30                 mov     dword ptr [esp+4], 0
.text:0041BB38                 mov     [esp], eax
.text:0041BB3B                 call    strchr
.text:0041BB40                 inc     eax
.text:0041BB41                 mov     off_42B164, eax ; "notset"
.text:0041BB46                 jmp     short loc_41BB10
.text:0041BB48 ; ---------------------------------------------------------------------------
.text:0041BB48
.text:0041BB48 loc_41BB48:                             ; CODE XREF: .text:0041BB2E↑j
.text:0041BB48                 xor     eax, eax
.text:0041BB4A
.text:0041BB4A loc_41BB4A:                             ; CODE XREF: .text:0041BD0C↓j
.text:0041BB4A                 add     esp, 14Ch
.text:0041BB50                 pop     ebx
.text:0041BB51                 pop     esi
.text:0041BB52                 pop     edi
.text:0041BB53                 pop     ebp
.text:0041BB54                 retn
.text:0041BB55 ; ---------------------------------------------------------------------------
.text:0041BB55
.text:0041BB55 loc_41BB55:                             ; CODE XREF: .text:0041BB24↑j
.text:0041BB55                 mov     dword ptr [edi+0Ch], offset loc_41BAB7
.text:0041BB5C                 lea     ecx, [esp+0D6h]
.text:0041BB63                 lea     edx, [esp+6Ch]
.text:0041BB67                 mov     [edi+4], ecx
.text:0041BB6A                 lea     ebx, [esp+7Ch]
.text:0041BB6E                 mov     [edi+8], edx
.text:0041BB71                 mov     [edi], ebx
.text:0041BB73                 mov     [esp], ebp
.text:0041BB76                 mov     [esp+4], edi
.text:0041BB7A                 call    ___addmntentstr
.text:0041BB7F                 mov     [esp], ebp
.text:0041BB82                 mov     dword ptr [esp+4], 41BABAh
.text:0041BB8A                 call    strspn
.text:0041BB8F                 mov     dword ptr [esp+4], 0
.text:0041BB97                 mov     ebx, off_42B164 ; "notset"
.text:0041BB9D                 lea     esi, [eax+ebp]
.text:0041BBA0                 mov     [esp+1Ch], esi
.text:0041BBA4                 lea     ebp, [esp+1Ch]
.text:0041BBA8                 mov     esi, offset loc_41BABD
.text:0041BBAD                 mov     [esp], ebx
.text:0041BBB0                 call    strchr
.text:0041BBB5                 mov     dword ptr [esp+4], 41BABAh
.text:0041BBBD                 inc     eax
.text:0041BBBE                 mov     off_42B164, eax ; "notset"
.text:0041BBC3                 mov     [esp], ebp
.text:0041BBC6                 call    sub_41D820
.text:0041BBCB                 test    eax, eax
.text:0041BBCD                 mov     ebx, eax
.text:0041BBCF                 jz      short loc_41BBF8
.text:0041BBD1                 mov     edx, eax
.text:0041BBD3                 mov     ecx, eax
.text:0041BBD5                 lea     esi, [esi+0]
.text:0041BBD9                 lea     edi, [edi+0]
.text:0041BBE0
.text:0041BBE0 loc_41BBE0:                             ; CODE XREF: .text:0041BBF6↓j
.text:0041BBE0                 movzx   eax, byte ptr [edx]
.text:0041BBE3                 cmp     al, 5Ch ; '\'
.text:0041BBE5                 jz      loc_41BE94
.text:0041BBEB
.text:0041BBEB loc_41BBEB:                             ; CODE XREF: .text:0041BE9C↓j
.text:0041BBEB                                         ; .text:0041BEAA↓j ...
.text:0041BBEB                 mov     [ecx], al
.text:0041BBED
.text:0041BBED loc_41BBED:                             ; CODE XREF: .text:0041BEBE↓j
.text:0041BBED                 inc     ecx
.text:0041BBEE
.text:0041BBEE loc_41BBEE:                             ; CODE XREF: .text:0041BED6↓j
.text:0041BBEE                 movzx   eax, byte ptr [edx]
.text:0041BBF1                 mov     esi, ebx
.text:0041BBF3                 inc     edx
.text:0041BBF4                 test    al, al
.text:0041BBF6                 jnz     short loc_41BBE0
.text:0041BBF8
.text:0041BBF8 loc_41BBF8:                             ; CODE XREF: .text:0041BBCF↑j
.text:0041BBF8                 mov     [edi], esi
.text:0041BBFA                 mov     eax, [esp+1Ch]
.text:0041BBFE                 test    eax, eax
.text:0041BC00                 jnz     loc_41BE7B
.text:0041BC06
.text:0041BC06 loc_41BC06:                             ; CODE XREF: .text:0041BE8F↓j
.text:0041BC06                 mov     dword ptr [esp+4], 41BABAh
.text:0041BC0E                 mov     esi, offset loc_41BABD
.text:0041BC13                 mov     [esp], ebp
.text:0041BC16                 call    sub_41D820
.text:0041BC1B                 test    eax, eax
.text:0041BC1D                 mov     ebx, eax
.text:0041BC1F                 jz      short loc_41BC48
.text:0041BC21                 mov     edx, eax
.text:0041BC23                 mov     ecx, eax
.text:0041BC25                 lea     esi, [esi+0]
.text:0041BC29                 lea     edi, [edi+0]
.text:0041BC30
.text:0041BC30 loc_41BC30:                             ; CODE XREF: .text:0041BC46↓j
.text:0041BC30                 movzx   eax, byte ptr [edx]
.text:0041BC33                 cmp     al, 5Ch ; '\'
.text:0041BC35                 jz      loc_41BE23
.text:0041BC3B
.text:0041BC3B loc_41BC3B:                             ; CODE XREF: .text:0041BE2B↓j
.text:0041BC3B                                         ; .text:0041BE39↓j ...
.text:0041BC3B                 mov     [ecx], al
.text:0041BC3D
.text:0041BC3D loc_41BC3D:                             ; CODE XREF: .text:0041BE4D↓j
.text:0041BC3D                 inc     ecx
.text:0041BC3E
.text:0041BC3E loc_41BC3E:                             ; CODE XREF: .text:0041BE65↓j
.text:0041BC3E                 movzx   eax, byte ptr [edx]
.text:0041BC41                 mov     esi, ebx
.text:0041BC43                 inc     edx
.text:0041BC44                 test    al, al
.text:0041BC46                 jnz     short loc_41BC30
.text:0041BC48
.text:0041BC48 loc_41BC48:                             ; CODE XREF: .text:0041BC1F↑j
.text:0041BC48                 mov     [edi+4], esi
.text:0041BC4B                 mov     eax, [esp+1Ch]
.text:0041BC4F                 test    eax, eax
.text:0041BC51                 jnz     loc_41BE0A
.text:0041BC57
.text:0041BC57 loc_41BC57:                             ; CODE XREF: .text:0041BE1E↓j
.text:0041BC57                 mov     dword ptr [esp+4], 41BABAh
.text:0041BC5F                 mov     esi, offset loc_41BABD
.text:0041BC64                 mov     [esp], ebp
.text:0041BC67                 call    sub_41D820
.text:0041BC6C                 test    eax, eax
.text:0041BC6E                 mov     ebx, eax
.text:0041BC70                 jz      short loc_41BC98
.text:0041BC72                 mov     edx, eax
.text:0041BC74                 mov     ecx, eax
.text:0041BC76                 lea     esi, [esi+0]
.text:0041BC79                 lea     edi, [edi+0]
.text:0041BC80
.text:0041BC80 loc_41BC80:                             ; CODE XREF: .text:0041BC96↓j
.text:0041BC80                 movzx   eax, byte ptr [edx]
.text:0041BC83                 cmp     al, 5Ch ; '\'
.text:0041BC85                 jz      loc_41BDB2
.text:0041BC8B
.text:0041BC8B loc_41BC8B:                             ; CODE XREF: .text:0041BDBA↓j
.text:0041BC8B                                         ; .text:0041BDC8↓j ...
.text:0041BC8B                 mov     [ecx], al
.text:0041BC8D
.text:0041BC8D loc_41BC8D:                             ; CODE XREF: .text:0041BDDC↓j
.text:0041BC8D                 inc     ecx
.text:0041BC8E
.text:0041BC8E loc_41BC8E:                             ; CODE XREF: .text:0041BDF4↓j
.text:0041BC8E                 movzx   eax, byte ptr [edx]
.text:0041BC91                 mov     esi, ebx
.text:0041BC93                 inc     edx
.text:0041BC94                 test    al, al
.text:0041BC96                 jnz     short loc_41BC80
.text:0041BC98
.text:0041BC98 loc_41BC98:                             ; CODE XREF: .text:0041BC70↑j
.text:0041BC98                 mov     [edi+8], esi
.text:0041BC9B                 mov     eax, [esp+1Ch]
.text:0041BC9F                 test    eax, eax
.text:0041BCA1                 jnz     loc_41BD99
.text:0041BCA7
.text:0041BCA7 loc_41BCA7:                             ; CODE XREF: .text:0041BDAD↓j
.text:0041BCA7                 mov     dword ptr [esp+4], 41BABAh
.text:0041BCAF                 mov     esi, offset loc_41BABD
.text:0041BCB4                 mov     [esp], ebp
.text:0041BCB7                 call    sub_41D820
.text:0041BCBC                 test    eax, eax
.text:0041BCBE                 mov     ebx, eax
.text:0041BCC0                 jz      short loc_41BCE4
.text:0041BCC2                 mov     edx, eax
.text:0041BCC4                 mov     ecx, eax
.text:0041BCC6                 lea     esi, [esi+0]
.text:0041BCC9                 lea     edi, [edi+0]
.text:0041BCD0
.text:0041BCD0 loc_41BCD0:                             ; CODE XREF: .text:0041BCE2↓j
.text:0041BCD0                 movzx   eax, byte ptr [edx]
.text:0041BCD3                 cmp     al, 5Ch ; '\'
.text:0041BCD5                 jz      short loc_41BD45
.text:0041BCD7
.text:0041BCD7 loc_41BCD7:                             ; CODE XREF: .text:0041BD4D↓j
.text:0041BCD7                                         ; .text:0041BD57↓j ...
.text:0041BCD7                 mov     [ecx], al
.text:0041BCD9
.text:0041BCD9 loc_41BCD9:                             ; CODE XREF: .text:0041BD6B↓j
.text:0041BCD9                 inc     ecx
.text:0041BCDA
.text:0041BCDA loc_41BCDA:                             ; CODE XREF: .text:0041BD83↓j
.text:0041BCDA                 movzx   eax, byte ptr [edx]
.text:0041BCDD                 mov     esi, ebx
.text:0041BCDF                 inc     edx
.text:0041BCE0                 test    al, al
.text:0041BCE2                 jnz     short loc_41BCD0
.text:0041BCE4
.text:0041BCE4 loc_41BCE4:                             ; CODE XREF: .text:0041BCC0↑j
.text:0041BCE4                 mov     [edi+0Ch], esi
.text:0041BCE7                 xor     eax, eax
.text:0041BCE9                 mov     edx, [esp+1Ch]
.text:0041BCED                 test    edx, edx
.text:0041BCEF                 jnz     short loc_41BD25
.text:0041BCF1
.text:0041BCF1 loc_41BCF1:                             ; CODE XREF: .text:0041BD43↓j
.text:0041BCF1                 cmp     eax, 1
.text:0041BCF4                 jz      short loc_41BD1C
.text:0041BCF6                 cmp     eax, 1
.text:0041BCF9                 jle     short loc_41BD11
.text:0041BCFB
.text:0041BCFB loc_41BCFB:                             ; CODE XREF: .text:0041BD13↓j
.text:0041BCFB                                         ; .text:0041BD23↓j
.text:0041BCFB                 mov     edx, [esp+160h]
.text:0041BD02                 mov     [esp], edx
.text:0041BD05                 call    sub_41D7C0
.text:0041BD0A                 mov     eax, edi
.text:0041BD0C                 jmp     loc_41BB4A
.text:0041BD11 ; ---------------------------------------------------------------------------
.text:0041BD11
.text:0041BD11 loc_41BD11:                             ; CODE XREF: .text:0041BCF9↑j
.text:0041BD11                 test    eax, eax
.text:0041BD13                 jnz     short loc_41BCFB
.text:0041BD15                 mov     dword ptr [edi+10h], 0
.text:0041BD1C
.text:0041BD1C loc_41BD1C:                             ; CODE XREF: .text:0041BCF4↑j
.text:0041BD1C                 mov     dword ptr [edi+14h], 0
.text:0041BD23                 jmp     short loc_41BCFB
.text:0041BD25 ; ---------------------------------------------------------------------------
.text:0041BD25
.text:0041BD25 loc_41BD25:                             ; CODE XREF: .text:0041BCEF↑j
.text:0041BD25                 mov     dword ptr [esp+4], 41BABEh
.text:0041BD2D                 lea     esi, [edi+14h]
.text:0041BD30                 lea     ebp, [edi+10h]
.text:0041BD33                 mov     [esp+0Ch], esi
.text:0041BD37                 mov     [esp+8], ebp
.text:0041BD3B                 mov     [esp], edx
.text:0041BD3E                 call    sscanf
.text:0041BD43                 jmp     short loc_41BCF1
.text:0041BD45 ; ---------------------------------------------------------------------------
.text:0041BD45
.text:0041BD45 loc_41BD45:                             ; CODE XREF: .text:0041BCD5↑j
.text:0041BD45                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BD49                 jz      short loc_41BD88
.text:0041BD4B
.text:0041BD4B loc_41BD4B:                             ; CODE XREF: .text:0041BD8C↓j
.text:0041BD4B                                         ; .text:0041BD92↓j
.text:0041BD4B                 cmp     al, 5Ch ; '\'
.text:0041BD4D                 jnz     short loc_41BCD7
.text:0041BD4F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BD53                 jz      short loc_41BD70
.text:0041BD55
.text:0041BD55 loc_41BD55:                             ; CODE XREF: .text:0041BD74↓j
.text:0041BD55                                         ; .text:0041BD7A↓j
.text:0041BD55                 cmp     al, 5Ch ; '\'
.text:0041BD57                 jnz     loc_41BCD7
.text:0041BD5D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BD61                 jnz     loc_41BCD7
.text:0041BD67                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BD6A                 inc     edx
.text:0041BD6B                 jmp     loc_41BCD9
.text:0041BD70 ; ---------------------------------------------------------------------------
.text:0041BD70
.text:0041BD70 loc_41BD70:                             ; CODE XREF: .text:0041BD53↑j
.text:0041BD70                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BD74                 jnz     short loc_41BD55
.text:0041BD76                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BD7A                 jnz     short loc_41BD55
.text:0041BD7C                 mov     byte ptr [ecx], 9
.text:0041BD7F
.text:0041BD7F loc_41BD7F:                             ; CODE XREF: .text:0041BD97↓j
.text:0041BD7F                 inc     ecx
.text:0041BD80                 add     edx, 3
.text:0041BD83                 jmp     loc_41BCDA
.text:0041BD88 ; ---------------------------------------------------------------------------
.text:0041BD88
.text:0041BD88 loc_41BD88:                             ; CODE XREF: .text:0041BD49↑j
.text:0041BD88                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BD8C                 jnz     short loc_41BD4B
.text:0041BD8E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BD92                 jnz     short loc_41BD4B
.text:0041BD94                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BD97                 jmp     short loc_41BD7F
.text:0041BD99 ; ---------------------------------------------------------------------------
.text:0041BD99
.text:0041BD99 loc_41BD99:                             ; CODE XREF: .text:0041BCA1↑j
.text:0041BD99                 mov     dword ptr [esp+4], 41BABAh
.text:0041BDA1                 mov     [esp], eax
.text:0041BDA4                 call    strspn
.text:0041BDA9                 add     [esp+1Ch], eax
.text:0041BDAD                 jmp     loc_41BCA7
.text:0041BDB2 ; ---------------------------------------------------------------------------
.text:0041BDB2
.text:0041BDB2 loc_41BDB2:                             ; CODE XREF: .text:0041BC85↑j
.text:0041BDB2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BDB6                 jz      short loc_41BDF9
.text:0041BDB8
.text:0041BDB8 loc_41BDB8:                             ; CODE XREF: .text:0041BDFD↓j
.text:0041BDB8                                         ; .text:0041BE03↓j
.text:0041BDB8                 cmp     al, 5Ch ; '\'
.text:0041BDBA                 jnz     loc_41BC8B
.text:0041BDC0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BDC4                 jz      short loc_41BDE1
.text:0041BDC6
.text:0041BDC6 loc_41BDC6:                             ; CODE XREF: .text:0041BDE5↓j
.text:0041BDC6                                         ; .text:0041BDEB↓j
.text:0041BDC6                 cmp     al, 5Ch ; '\'
.text:0041BDC8                 jnz     loc_41BC8B
.text:0041BDCE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BDD2                 jnz     loc_41BC8B
.text:0041BDD8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BDDB                 inc     edx
.text:0041BDDC                 jmp     loc_41BC8D
.text:0041BDE1 ; ---------------------------------------------------------------------------
.text:0041BDE1
.text:0041BDE1 loc_41BDE1:                             ; CODE XREF: .text:0041BDC4↑j
.text:0041BDE1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BDE5                 jnz     short loc_41BDC6
.text:0041BDE7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BDEB                 jnz     short loc_41BDC6
.text:0041BDED                 mov     byte ptr [ecx], 9
.text:0041BDF0
.text:0041BDF0 loc_41BDF0:                             ; CODE XREF: .text:0041BE08↓j
.text:0041BDF0                 inc     ecx
.text:0041BDF1                 add     edx, 3
.text:0041BDF4                 jmp     loc_41BC8E
.text:0041BDF9 ; ---------------------------------------------------------------------------
.text:0041BDF9
.text:0041BDF9 loc_41BDF9:                             ; CODE XREF: .text:0041BDB6↑j
.text:0041BDF9                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BDFD                 jnz     short loc_41BDB8
.text:0041BDFF                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BE03                 jnz     short loc_41BDB8
.text:0041BE05                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BE08                 jmp     short loc_41BDF0
.text:0041BE0A ; ---------------------------------------------------------------------------
.text:0041BE0A
.text:0041BE0A loc_41BE0A:                             ; CODE XREF: .text:0041BC51↑j
.text:0041BE0A                 mov     dword ptr [esp+4], 41BABAh
.text:0041BE12                 mov     [esp], eax
.text:0041BE15                 call    strspn
.text:0041BE1A                 add     [esp+1Ch], eax
.text:0041BE1E                 jmp     loc_41BC57
.text:0041BE23 ; ---------------------------------------------------------------------------
.text:0041BE23
.text:0041BE23 loc_41BE23:                             ; CODE XREF: .text:0041BC35↑j
.text:0041BE23                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BE27                 jz      short loc_41BE6A
.text:0041BE29
.text:0041BE29 loc_41BE29:                             ; CODE XREF: .text:0041BE6E↓j
.text:0041BE29                                         ; .text:0041BE74↓j
.text:0041BE29                 cmp     al, 5Ch ; '\'
.text:0041BE2B                 jnz     loc_41BC3B
.text:0041BE31                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BE35                 jz      short loc_41BE52
.text:0041BE37
.text:0041BE37 loc_41BE37:                             ; CODE XREF: .text:0041BE56↓j
.text:0041BE37                                         ; .text:0041BE5C↓j
.text:0041BE37                 cmp     al, 5Ch ; '\'
.text:0041BE39                 jnz     loc_41BC3B
.text:0041BE3F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BE43                 jnz     loc_41BC3B
.text:0041BE49                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BE4C                 inc     edx
.text:0041BE4D                 jmp     loc_41BC3D
.text:0041BE52 ; ---------------------------------------------------------------------------
.text:0041BE52
.text:0041BE52 loc_41BE52:                             ; CODE XREF: .text:0041BE35↑j
.text:0041BE52                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BE56                 jnz     short loc_41BE37
.text:0041BE58                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BE5C                 jnz     short loc_41BE37
.text:0041BE5E                 mov     byte ptr [ecx], 9
.text:0041BE61
.text:0041BE61 loc_41BE61:                             ; CODE XREF: .text:0041BE79↓j
.text:0041BE61                 inc     ecx
.text:0041BE62                 add     edx, 3
.text:0041BE65                 jmp     loc_41BC3E
.text:0041BE6A ; ---------------------------------------------------------------------------
.text:0041BE6A
.text:0041BE6A loc_41BE6A:                             ; CODE XREF: .text:0041BE27↑j
.text:0041BE6A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BE6E                 jnz     short loc_41BE29
.text:0041BE70                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BE74                 jnz     short loc_41BE29
.text:0041BE76                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BE79                 jmp     short loc_41BE61
.text:0041BE7B ; ---------------------------------------------------------------------------
.text:0041BE7B
.text:0041BE7B loc_41BE7B:                             ; CODE XREF: .text:0041BC00↑j
.text:0041BE7B                 mov     dword ptr [esp+4], 41BABAh
.text:0041BE83                 mov     [esp], eax
.text:0041BE86                 call    strspn
.text:0041BE8B                 add     [esp+1Ch], eax
.text:0041BE8F                 jmp     loc_41BC06
.text:0041BE94 ; ---------------------------------------------------------------------------
.text:0041BE94
.text:0041BE94 loc_41BE94:                             ; CODE XREF: .text:0041BBE5↑j
.text:0041BE94                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BE98                 jz      short loc_41BEDB
.text:0041BE9A
.text:0041BE9A loc_41BE9A:                             ; CODE XREF: .text:0041BEDF↓j
.text:0041BE9A                                         ; .text:0041BEE5↓j
.text:0041BE9A                 cmp     al, 5Ch ; '\'
.text:0041BE9C                 jnz     loc_41BBEB
.text:0041BEA2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041BEA6                 jz      short loc_41BEC3
.text:0041BEA8
.text:0041BEA8 loc_41BEA8:                             ; CODE XREF: .text:0041BEC7↓j
.text:0041BEA8                                         ; .text:0041BECD↓j
.text:0041BEA8                 cmp     al, 5Ch ; '\'
.text:0041BEAA                 jnz     loc_41BBEB
.text:0041BEB0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041BEB4                 jnz     loc_41BBEB
.text:0041BEBA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041BEBD                 inc     edx
.text:0041BEBE                 jmp     loc_41BBED
.text:0041BEC3 ; ---------------------------------------------------------------------------
.text:0041BEC3
.text:0041BEC3 loc_41BEC3:                             ; CODE XREF: .text:0041BEA6↑j
.text:0041BEC3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041BEC7                 jnz     short loc_41BEA8
.text:0041BEC9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041BECD                 jnz     short loc_41BEA8
.text:0041BECF                 mov     byte ptr [ecx], 9
.text:0041BED2
.text:0041BED2 loc_41BED2:                             ; CODE XREF: .text:0041BEEA↓j
.text:0041BED2                 inc     ecx
.text:0041BED3                 add     edx, 3
.text:0041BED6                 jmp     loc_41BBEE
.text:0041BEDB ; ---------------------------------------------------------------------------
.text:0041BEDB
.text:0041BEDB loc_41BEDB:                             ; CODE XREF: .text:0041BE98↑j
.text:0041BEDB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041BEDF                 jnz     short loc_41BE9A
.text:0041BEE1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041BEE5                 jnz     short loc_41BE9A
.text:0041BEE7                 mov     byte ptr [ecx], 20h ; ' '
.text:0041BEEA                 jmp     short loc_41BED2
.text:0041BEEA ; ---------------------------------------------------------------------------
.text:0041BEEC                 align 10h
.text:0041BEF0
.text:0041BEF0 loc_41BEF0:                             ; CODE XREF: .text:0041BB02↑j
.text:0041BEF0                 mov     dword ptr [esp+4], 0
.text:0041BEF8                 mov     dword ptr [esp], 0
.text:0041BEFF                 call    GetLogicalDriveStringsA
.text:0041BF04                 sub     esp, 8
.text:0041BF07                 mov     ebx, eax
.text:0041BF09                 call    GetProcessHeap
.text:0041BF0E                 mov     [esp], eax
.text:0041BF11                 mov     [esp+8], ebx
.text:0041BF15                 mov     dword ptr [esp+4], 0
.text:0041BF1D                 call    HeapAlloc
.text:0041BF22                 sub     esp, 0Ch
.text:0041BF25                 mov     esi, eax
.text:0041BF27                 mov     [esp+4], eax
.text:0041BF2B                 mov     [esp], ebx
.text:0041BF2E                 call    GetLogicalDriveStringsA
.text:0041BF33                 mov     off_42B164, esi ; "notset"
.text:0041BF39                 sub     esp, 8
.text:0041BF3C                 jmp     loc_41BB08
.text:0041BF3C ; ---------------------------------------------------------------------------
.text:0041BF41 ; const char aSSSSDD[]
.text:0041BF41 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0041BF41                                         ; DATA XREF: .text:0041C080↓o
.text:0041BF41                                         ; ___addmntentstr+F0↓o
.text:0041BF54                 align 10h
.text:0041BF60                 push    esi
.text:0041BF61                 push    ebx
.text:0041BF62                 sub     esp, 44h
.text:0041BF65                 mov     ebx, [esp+54h]
.text:0041BF69                 mov     esi, [esp+50h]
.text:0041BF6D                 mov     edx, [ebx]
.text:0041BF6F                 mov     [esp+20h], edx
.text:0041BF73                 mov     ecx, [ebx+4]
.text:0041BF76                 mov     [esp+24h], ecx
.text:0041BF7A                 mov     edx, [ebx+8]
.text:0041BF7D                 mov     [esp+28h], edx
.text:0041BF81                 mov     ecx, [ebx+0Ch]
.text:0041BF84                 mov     [esp+2Ch], ecx
.text:0041BF88                 mov     edx, [ebx+10h]
.text:0041BF8B                 mov     [esp+30h], edx
.text:0041BF8F                 mov     ecx, [ebx+14h]
.text:0041BF92                 mov     dword ptr [esp+8], 2
.text:0041BF9A                 mov     dword ptr [esp+4], 0
.text:0041BFA2                 mov     [esp+34h], ecx
.text:0041BFA6                 mov     [esp], esi
.text:0041BFA9                 call    sub_41D7B0
.text:0041BFAE ; ---------------------------------------------------------------------------
.text:0041BFAE                 test    eax, eax
.text:0041BFB0                 mov     edx, 1
.text:0041BFB5                 jnz     loc_41C0B5
.text:0041BFBB                 mov     ebx, [esp+20h]
.text:0041BFBF                 mov     edx, ebx
.text:0041BFC1                 movzx   eax, byte ptr [ebx]
.text:0041BFC4                 test    al, al
.text:0041BFC6                 jz      short loc_41BFF0
.text:0041BFC8                 nop
.text:0041BFC9                 lea     esi, [esi+0]
.text:0041BFD0
.text:0041BFD0 loc_41BFD0:                             ; CODE XREF: .text:0041BFEE↓j
.text:0041BFD0                 cmp     al, 20h ; ' '
.text:0041BFD2                 jz      loc_41C22A
.text:0041BFD8                 cmp     al, 9
.text:0041BFDA                 jz      loc_41C22A
.text:0041BFE0                 cmp     al, 5Ch ; '\'
.text:0041BFE2                 jz      loc_41C22A
.text:0041BFE8                 inc     ebx
.text:0041BFE9                 movzx   eax, byte ptr [ebx]
.text:0041BFEC                 test    al, al
.text:0041BFEE                 jnz     short loc_41BFD0
.text:0041BFF0
.text:0041BFF0 loc_41BFF0:                             ; CODE XREF: .text:0041BFC6↑j
.text:0041BFF0                                         ; .text:0041C22C↓j ...
.text:0041BFF0                 mov     ebx, [esp+24h]
.text:0041BFF4                 mov     edx, ebx
.text:0041BFF6                 movzx   eax, byte ptr [ebx]
.text:0041BFF9                 test    al, al
.text:0041BFFB                 jz      short loc_41C020
.text:0041BFFD                 lea     esi, [esi+0]
.text:0041C000
.text:0041C000 loc_41C000:                             ; CODE XREF: .text:0041C01E↓j
.text:0041C000                 cmp     al, 20h ; ' '
.text:0041C002                 jz      loc_41C1AA
.text:0041C008                 cmp     al, 9
.text:0041C00A                 jz      loc_41C1AA
.text:0041C010                 cmp     al, 5Ch ; '\'
.text:0041C012                 jz      loc_41C1AA
.text:0041C018                 inc     ebx
.text:0041C019                 movzx   eax, byte ptr [ebx]
.text:0041C01C                 test    al, al
.text:0041C01E                 jnz     short loc_41C000
.text:0041C020
.text:0041C020 loc_41C020:                             ; CODE XREF: .text:0041BFFB↑j
.text:0041C020                                         ; .text:0041C1AC↓j ...
.text:0041C020                 mov     ebx, [esp+28h]
.text:0041C024                 mov     edx, ebx
.text:0041C026                 movzx   eax, byte ptr [ebx]
.text:0041C029                 test    al, al
.text:0041C02B                 jz      short loc_41C050
.text:0041C02D                 lea     esi, [esi+0]
.text:0041C030
.text:0041C030 loc_41C030:                             ; CODE XREF: .text:0041C04E↓j
.text:0041C030                 cmp     al, 20h ; ' '
.text:0041C032                 jz      loc_41C12E
.text:0041C038                 cmp     al, 9
.text:0041C03A                 jz      loc_41C12E
.text:0041C040                 cmp     al, 5Ch ; '\'
.text:0041C042                 jz      loc_41C12E
.text:0041C048                 inc     ebx
.text:0041C049                 movzx   eax, byte ptr [ebx]
.text:0041C04C                 test    al, al
.text:0041C04E                 jnz     short loc_41C030
.text:0041C050
.text:0041C050 loc_41C050:                             ; CODE XREF: .text:0041C02B↑j
.text:0041C050                                         ; .text:0041C130↓j ...
.text:0041C050                 mov     edx, [esp+2Ch]
.text:0041C054                 mov     ebx, edx
.text:0041C056                 movzx   eax, byte ptr [edx]
.text:0041C059                 test    al, al
.text:0041C05B                 jz      short loc_41C074
.text:0041C05D                 lea     esi, [esi+0]
.text:0041C060
.text:0041C060 loc_41C060:                             ; CODE XREF: .text:0041C072↓j
.text:0041C060                 cmp     al, 20h ; ' '
.text:0041C062                 jz      short loc_41C0BD
.text:0041C064                 cmp     al, 9
.text:0041C066                 jz      short loc_41C0BD
.text:0041C068                 cmp     al, 5Ch ; '\'
.text:0041C06A                 jz      short loc_41C0BD
.text:0041C06C                 inc     ebx
.text:0041C06D                 movzx   eax, byte ptr [ebx]
.text:0041C070                 test    al, al
.text:0041C072                 jnz     short loc_41C060
.text:0041C074
.text:0041C074 loc_41C074:                             ; CODE XREF: .text:0041C05B↑j
.text:0041C074                                         ; .text:0041C0BF↓j ...
.text:0041C074                 mov     [esp+14h], edx
.text:0041C078                 mov     ecx, [esp+34h]
.text:0041C07C                 mov     ebx, [esp+30h]
.text:0041C080                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041C088                 mov     edx, [esp+24h]
.text:0041C08C                 mov     [esp+1Ch], ecx
.text:0041C090                 mov     ecx, [esp+28h]
.text:0041C094                 mov     [esp+18h], ebx
.text:0041C098                 mov     ebx, [esp+20h]
.text:0041C09C                 mov     [esp+0Ch], edx
.text:0041C0A0                 mov     [esp+10h], ecx
.text:0041C0A4                 mov     [esp+8], ebx
.text:0041C0A8                 mov     [esp], esi
.text:0041C0AB                 call    fprintf
.text:0041C0B0                 mov     edx, eax
.text:0041C0B2                 shr     edx, 1Fh
.text:0041C0B5
.text:0041C0B5 loc_41C0B5:                             ; CODE XREF: .text:0041BFB5↑j
.text:0041C0B5                 add     esp, 44h
.text:0041C0B8                 mov     eax, edx
.text:0041C0BA                 pop     ebx
.text:0041C0BB                 pop     esi
.text:0041C0BC                 retn
.text:0041C0BD ; ---------------------------------------------------------------------------
.text:0041C0BD
.text:0041C0BD loc_41C0BD:                             ; CODE XREF: .text:0041C062↑j
.text:0041C0BD                                         ; .text:0041C066↑j ...
.text:0041C0BD                 test    al, al
.text:0041C0BF                 jz      short loc_41C074
.text:0041C0C1                 mov     [esp], edx
.text:0041C0C4                 mov     ebx, edx
.text:0041C0C6                 call    strlen
.text:0041C0CB                 lea     edx, ds:1[eax*4]
.text:0041C0D2                 mov     [esp], edx
.text:0041C0D5                 call    malloc
.text:0041C0DA                 mov     [esp+2Ch], eax
.text:0041C0DE                 mov     edx, eax
.text:0041C0E0
.text:0041C0E0 loc_41C0E0:                             ; CODE XREF: .text:0041C0F8↓j
.text:0041C0E0                 movzx   eax, byte ptr [ebx]
.text:0041C0E3                 cmp     al, 20h ; ' '
.text:0041C0E5                 jz      short loc_41C11D
.text:0041C0E7                 cmp     al, 9
.text:0041C0E9                 jz      short loc_41C10C
.text:0041C0EB                 cmp     al, 5Ch ; '\'
.text:0041C0ED                 jz      short loc_41C103
.text:0041C0EF                 mov     [edx], al
.text:0041C0F1
.text:0041C0F1 loc_41C0F1:                             ; CODE XREF: .text:0041C10A↓j
.text:0041C0F1                                         ; .text:0041C11B↓j ...
.text:0041C0F1                 movzx   ecx, byte ptr [ebx]
.text:0041C0F4                 inc     edx
.text:0041C0F5                 inc     ebx
.text:0041C0F6                 test    cl, cl
.text:0041C0F8                 jnz     short loc_41C0E0
.text:0041C0FA                 mov     edx, [esp+2Ch]
.text:0041C0FE                 jmp     loc_41C074
.text:0041C103 ; ---------------------------------------------------------------------------
.text:0041C103
.text:0041C103 loc_41C103:                             ; CODE XREF: .text:0041C0ED↑j
.text:0041C103                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C106                 inc     edx
.text:0041C107                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C10A                 jmp     short loc_41C0F1
.text:0041C10C ; ---------------------------------------------------------------------------
.text:0041C10C
.text:0041C10C loc_41C10C:                             ; CODE XREF: .text:0041C0E9↑j
.text:0041C10C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C10F                 inc     edx
.text:0041C110                 mov     byte ptr [edx], 30h ; '0'
.text:0041C113                 inc     edx
.text:0041C114                 mov     byte ptr [edx], 31h ; '1'
.text:0041C117                 inc     edx
.text:0041C118                 mov     byte ptr [edx], 32h ; '2'
.text:0041C11B                 jmp     short loc_41C0F1
.text:0041C11D ; ---------------------------------------------------------------------------
.text:0041C11D
.text:0041C11D loc_41C11D:                             ; CODE XREF: .text:0041C0E5↑j
.text:0041C11D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C120                 inc     edx
.text:0041C121                 mov     byte ptr [edx], 30h ; '0'
.text:0041C124                 inc     edx
.text:0041C125                 mov     byte ptr [edx], 34h ; '4'
.text:0041C128                 inc     edx
.text:0041C129                 mov     byte ptr [edx], 30h ; '0'
.text:0041C12C                 jmp     short loc_41C0F1
.text:0041C12E ; ---------------------------------------------------------------------------
.text:0041C12E
.text:0041C12E loc_41C12E:                             ; CODE XREF: .text:0041C032↑j
.text:0041C12E                                         ; .text:0041C03A↑j ...
.text:0041C12E                 test    al, al
.text:0041C130                 jz      loc_41C050
.text:0041C136                 mov     [esp], edx
.text:0041C139                 mov     ebx, edx
.text:0041C13B                 call    strlen
.text:0041C140                 lea     edx, ds:1[eax*4]
.text:0041C147                 mov     [esp], edx
.text:0041C14A                 call    malloc
.text:0041C14F                 mov     [esp+28h], eax
.text:0041C153                 mov     edx, eax
.text:0041C155                 lea     esi, [esi+0]
.text:0041C159                 lea     edi, [edi+0]
.text:0041C160
.text:0041C160 loc_41C160:                             ; CODE XREF: .text:0041C178↓j
.text:0041C160                 movzx   eax, byte ptr [ebx]
.text:0041C163                 cmp     al, 20h ; ' '
.text:0041C165                 jz      short loc_41C199
.text:0041C167                 cmp     al, 9
.text:0041C169                 jz      short loc_41C188
.text:0041C16B                 cmp     al, 5Ch ; '\'
.text:0041C16D                 jz      short loc_41C17F
.text:0041C16F                 mov     [edx], al
.text:0041C171
.text:0041C171 loc_41C171:                             ; CODE XREF: .text:0041C186↓j
.text:0041C171                                         ; .text:0041C197↓j ...
.text:0041C171                 movzx   ecx, byte ptr [ebx]
.text:0041C174                 inc     edx
.text:0041C175                 inc     ebx
.text:0041C176                 test    cl, cl
.text:0041C178                 jnz     short loc_41C160
.text:0041C17A                 jmp     loc_41C050
.text:0041C17F ; ---------------------------------------------------------------------------
.text:0041C17F
.text:0041C17F loc_41C17F:                             ; CODE XREF: .text:0041C16D↑j
.text:0041C17F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C182                 inc     edx
.text:0041C183                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C186                 jmp     short loc_41C171
.text:0041C188 ; ---------------------------------------------------------------------------
.text:0041C188
.text:0041C188 loc_41C188:                             ; CODE XREF: .text:0041C169↑j
.text:0041C188                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C18B                 inc     edx
.text:0041C18C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C18F                 inc     edx
.text:0041C190                 mov     byte ptr [edx], 31h ; '1'
.text:0041C193                 inc     edx
.text:0041C194                 mov     byte ptr [edx], 32h ; '2'
.text:0041C197                 jmp     short loc_41C171
.text:0041C199 ; ---------------------------------------------------------------------------
.text:0041C199
.text:0041C199 loc_41C199:                             ; CODE XREF: .text:0041C165↑j
.text:0041C199                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C19C                 inc     edx
.text:0041C19D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C1A0                 inc     edx
.text:0041C1A1                 mov     byte ptr [edx], 34h ; '4'
.text:0041C1A4                 inc     edx
.text:0041C1A5                 mov     byte ptr [edx], 30h ; '0'
.text:0041C1A8                 jmp     short loc_41C171
.text:0041C1AA ; ---------------------------------------------------------------------------
.text:0041C1AA
.text:0041C1AA loc_41C1AA:                             ; CODE XREF: .text:0041C002↑j
.text:0041C1AA                                         ; .text:0041C00A↑j ...
.text:0041C1AA                 test    al, al
.text:0041C1AC                 jz      loc_41C020
.text:0041C1B2                 mov     [esp], edx
.text:0041C1B5                 mov     ebx, edx
.text:0041C1B7                 call    strlen
.text:0041C1BC                 lea     edx, ds:1[eax*4]
.text:0041C1C3                 mov     [esp], edx
.text:0041C1C6                 call    malloc
.text:0041C1CB                 mov     [esp+24h], eax
.text:0041C1CF                 mov     edx, eax
.text:0041C1D1                 jmp     short loc_41C1E0
.text:0041C1D1 ; ---------------------------------------------------------------------------
.text:0041C1D3                 align 10h
.text:0041C1E0
.text:0041C1E0 loc_41C1E0:                             ; CODE XREF: .text:0041C1D1↑j
.text:0041C1E0                                         ; .text:0041C1F8↓j
.text:0041C1E0                 movzx   eax, byte ptr [ebx]
.text:0041C1E3                 cmp     al, 20h ; ' '
.text:0041C1E5                 jz      short loc_41C219
.text:0041C1E7                 cmp     al, 9
.text:0041C1E9                 jz      short loc_41C208
.text:0041C1EB                 cmp     al, 5Ch ; '\'
.text:0041C1ED                 jz      short loc_41C1FF
.text:0041C1EF                 mov     [edx], al
.text:0041C1F1
.text:0041C1F1 loc_41C1F1:                             ; CODE XREF: .text:0041C206↓j
.text:0041C1F1                                         ; .text:0041C217↓j ...
.text:0041C1F1                 movzx   ecx, byte ptr [ebx]
.text:0041C1F4                 inc     edx
.text:0041C1F5                 inc     ebx
.text:0041C1F6                 test    cl, cl
.text:0041C1F8                 jnz     short loc_41C1E0
.text:0041C1FA                 jmp     loc_41C020
.text:0041C1FF ; ---------------------------------------------------------------------------
.text:0041C1FF
.text:0041C1FF loc_41C1FF:                             ; CODE XREF: .text:0041C1ED↑j
.text:0041C1FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C202                 inc     edx
.text:0041C203                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C206                 jmp     short loc_41C1F1
.text:0041C208 ; ---------------------------------------------------------------------------
.text:0041C208
.text:0041C208 loc_41C208:                             ; CODE XREF: .text:0041C1E9↑j
.text:0041C208                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C20B                 inc     edx
.text:0041C20C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C20F                 inc     edx
.text:0041C210                 mov     byte ptr [edx], 31h ; '1'
.text:0041C213                 inc     edx
.text:0041C214                 mov     byte ptr [edx], 32h ; '2'
.text:0041C217                 jmp     short loc_41C1F1
.text:0041C219 ; ---------------------------------------------------------------------------
.text:0041C219
.text:0041C219 loc_41C219:                             ; CODE XREF: .text:0041C1E5↑j
.text:0041C219                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C21C                 inc     edx
.text:0041C21D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C220                 inc     edx
.text:0041C221                 mov     byte ptr [edx], 34h ; '4'
.text:0041C224                 inc     edx
.text:0041C225                 mov     byte ptr [edx], 30h ; '0'
.text:0041C228                 jmp     short loc_41C1F1
.text:0041C22A ; ---------------------------------------------------------------------------
.text:0041C22A
.text:0041C22A loc_41C22A:                             ; CODE XREF: .text:0041BFD2↑j
.text:0041C22A                                         ; .text:0041BFDA↑j ...
.text:0041C22A                 test    al, al
.text:0041C22C                 jz      loc_41BFF0
.text:0041C232                 mov     [esp], edx
.text:0041C235                 mov     ebx, edx
.text:0041C237                 call    strlen
.text:0041C23C                 lea     ecx, ds:1[eax*4]
.text:0041C243                 mov     [esp], ecx
.text:0041C246                 call    malloc
.text:0041C24B                 mov     [esp+20h], eax
.text:0041C24F                 mov     edx, eax
.text:0041C251                 jmp     short loc_41C260
.text:0041C251 ; ---------------------------------------------------------------------------
.text:0041C253                 align 10h
.text:0041C260
.text:0041C260 loc_41C260:                             ; CODE XREF: .text:0041C251↑j
.text:0041C260                                         ; .text:0041C278↓j
.text:0041C260                 movzx   eax, byte ptr [ebx]
.text:0041C263                 cmp     al, 20h ; ' '
.text:0041C265                 jz      short loc_41C299
.text:0041C267                 cmp     al, 9
.text:0041C269                 jz      short loc_41C288
.text:0041C26B                 cmp     al, 5Ch ; '\'
.text:0041C26D                 jz      short loc_41C27F
.text:0041C26F                 mov     [edx], al
.text:0041C271
.text:0041C271 loc_41C271:                             ; CODE XREF: .text:0041C286↓j
.text:0041C271                                         ; .text:0041C297↓j ...
.text:0041C271                 movzx   ecx, byte ptr [ebx]
.text:0041C274                 inc     edx
.text:0041C275                 inc     ebx
.text:0041C276                 test    cl, cl
.text:0041C278                 jnz     short loc_41C260
.text:0041C27A                 jmp     loc_41BFF0
.text:0041C27F ; ---------------------------------------------------------------------------
.text:0041C27F
.text:0041C27F loc_41C27F:                             ; CODE XREF: .text:0041C26D↑j
.text:0041C27F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C282                 inc     edx
.text:0041C283                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C286                 jmp     short loc_41C271
.text:0041C288 ; ---------------------------------------------------------------------------
.text:0041C288
.text:0041C288 loc_41C288:                             ; CODE XREF: .text:0041C269↑j
.text:0041C288                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C28B                 inc     edx
.text:0041C28C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C28F                 inc     edx
.text:0041C290                 mov     byte ptr [edx], 31h ; '1'
.text:0041C293                 inc     edx
.text:0041C294                 mov     byte ptr [edx], 32h ; '2'
.text:0041C297                 jmp     short loc_41C271
.text:0041C299 ; ---------------------------------------------------------------------------
.text:0041C299
.text:0041C299 loc_41C299:                             ; CODE XREF: .text:0041C265↑j
.text:0041C299                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C29C                 inc     edx
.text:0041C29D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C2A0                 inc     edx
.text:0041C2A1                 mov     byte ptr [edx], 34h ; '4'
.text:0041C2A4                 inc     edx
.text:0041C2A5                 mov     byte ptr [edx], 30h ; '0'
.text:0041C2A8                 jmp     short loc_41C271
.text:0041C2A8 ; ---------------------------------------------------------------------------
.text:0041C2AA                 align 10h
.text:0041C2B0
.text:0041C2B0 ; =============== S U B R O U T I N E =======================================
.text:0041C2B0
.text:0041C2B0 ; Attributes: info_from_lumina
.text:0041C2B0
.text:0041C2B0 ; int __cdecl __addmntentstr(char *, int)
.text:0041C2B0 ___addmntentstr proc near               ; CODE XREF: .text:0041BB7A↑p
.text:0041C2B0
.text:0041C2B0 Buffer          = dword ptr -4Ch
.text:0041C2B0 Format          = dword ptr -48h
.text:0041C2B0 var_44          = dword ptr -44h
.text:0041C2B0 var_40          = dword ptr -40h
.text:0041C2B0 var_3C          = dword ptr -3Ch
.text:0041C2B0 var_38          = dword ptr -38h
.text:0041C2B0 var_34          = dword ptr -34h
.text:0041C2B0 var_30          = dword ptr -30h
.text:0041C2B0 var_2C          = dword ptr -2Ch
.text:0041C2B0 var_28          = dword ptr -28h
.text:0041C2B0 var_24          = dword ptr -24h
.text:0041C2B0 Str             = dword ptr -20h
.text:0041C2B0 var_1C          = dword ptr -1Ch
.text:0041C2B0 var_18          = dword ptr -18h
.text:0041C2B0 arg_0           = dword ptr  4
.text:0041C2B0 arg_4           = dword ptr  8
.text:0041C2B0
.text:0041C2B0                 push    ebx
.text:0041C2B1                 sub     esp, 48h
.text:0041C2B4                 mov     edx, [esp+4Ch+arg_4]
.text:0041C2B8                 mov     ecx, [edx]
.text:0041C2BA                 mov     [esp+4Ch+var_2C], ecx
.text:0041C2BE                 mov     ebx, [edx+4]
.text:0041C2C1                 mov     [esp+4Ch+var_28], ebx
.text:0041C2C5                 mov     ebx, [edx+8]
.text:0041C2C8                 mov     [esp+4Ch+var_24], ebx
.text:0041C2CC                 mov     ebx, [edx+0Ch]
.text:0041C2CF                 mov     [esp+4Ch+Str], ebx
.text:0041C2D3                 mov     ebx, [edx+10h]
.text:0041C2D6                 mov     [esp+4Ch+var_1C], ebx
.text:0041C2DA                 mov     ebx, [edx+14h]
.text:0041C2DD                 mov     [esp+4Ch+var_18], ebx
.text:0041C2E1                 mov     ebx, ecx
.text:0041C2E3                 movzx   eax, byte ptr [ecx]
.text:0041C2E6                 test    al, al
.text:0041C2E8                 jz      loc_41C5D1
.text:0041C2EE                 mov     esi, esi
.text:0041C2F0
.text:0041C2F0 loc_41C2F0:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0041C2F0                 cmp     al, 20h ; ' '
.text:0041C2F2                 jz      loc_41C550
.text:0041C2F8                 cmp     al, 9
.text:0041C2FA                 jz      loc_41C550
.text:0041C300                 cmp     al, 5Ch ; '\'
.text:0041C302                 jz      loc_41C550
.text:0041C308                 inc     ebx
.text:0041C309                 movzx   eax, byte ptr [ebx]
.text:0041C30C                 test    al, al
.text:0041C30E                 jnz     short loc_41C2F0
.text:0041C310
.text:0041C310 loc_41C310:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0041C310                                         ; ___addmntentstr+2EA↓j
.text:0041C310                 mov     ebx, [esp+4Ch+var_28]
.text:0041C314                 mov     edx, ebx
.text:0041C316                 movzx   eax, byte ptr [ebx]
.text:0041C319                 test    al, al
.text:0041C31B                 jz      short loc_41C340
.text:0041C31D                 lea     esi, [esi+0]
.text:0041C320
.text:0041C320 loc_41C320:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0041C320                 cmp     al, 20h ; ' '
.text:0041C322                 jz      loc_41C4CA
.text:0041C328                 cmp     al, 9
.text:0041C32A                 jz      loc_41C4CA
.text:0041C330                 cmp     al, 5Ch ; '\'
.text:0041C332                 jz      loc_41C4CA
.text:0041C338                 inc     ebx
.text:0041C339                 movzx   eax, byte ptr [ebx]
.text:0041C33C                 test    al, al
.text:0041C33E                 jnz     short loc_41C320
.text:0041C340
.text:0041C340 loc_41C340:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0041C340                                         ; ___addmntentstr+21C↓j ...
.text:0041C340                 mov     ebx, [esp+4Ch+var_24]
.text:0041C344                 mov     edx, ebx
.text:0041C346                 movzx   eax, byte ptr [ebx]
.text:0041C349                 test    al, al
.text:0041C34B                 jz      short loc_41C370
.text:0041C34D                 lea     esi, [esi+0]
.text:0041C350
.text:0041C350 loc_41C350:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0041C350                 cmp     al, 20h ; ' '
.text:0041C352                 jz      loc_41C44E
.text:0041C358                 cmp     al, 9
.text:0041C35A                 jz      loc_41C44E
.text:0041C360                 cmp     al, 5Ch ; '\'
.text:0041C362                 jz      loc_41C44E
.text:0041C368                 inc     ebx
.text:0041C369                 movzx   eax, byte ptr [ebx]
.text:0041C36C                 test    al, al
.text:0041C36E                 jnz     short loc_41C350
.text:0041C370
.text:0041C370 loc_41C370:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0041C370                                         ; ___addmntentstr+1A0↓j ...
.text:0041C370                 mov     edx, [esp+4Ch+Str]
.text:0041C374                 mov     ebx, edx
.text:0041C376                 movzx   eax, byte ptr [edx]
.text:0041C379                 test    al, al
.text:0041C37B                 jz      short loc_41C394
.text:0041C37D                 lea     esi, [esi+0]
.text:0041C380
.text:0041C380 loc_41C380:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0041C380                 cmp     al, 20h ; ' '
.text:0041C382                 jz      short loc_41C3DC
.text:0041C384                 cmp     al, 9
.text:0041C386                 jz      short loc_41C3DC
.text:0041C388                 cmp     al, 5Ch ; '\'
.text:0041C38A                 jz      short loc_41C3DC
.text:0041C38C                 inc     ebx
.text:0041C38D                 movzx   eax, byte ptr [ebx]
.text:0041C390                 test    al, al
.text:0041C392                 jnz     short loc_41C380
.text:0041C394
.text:0041C394 loc_41C394:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0041C394                                         ; ___addmntentstr+12E↓j ...
.text:0041C394                 mov     [esp+4Ch+var_38], edx
.text:0041C398                 mov     ebx, [esp+4Ch+var_18]
.text:0041C39C                 mov     ecx, [esp+4Ch+var_1C]
.text:0041C3A0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041C3A8                 mov     edx, [esp+4Ch+var_2C]
.text:0041C3AC                 mov     [esp+4Ch+var_30], ebx
.text:0041C3B0                 mov     ebx, [esp+4Ch+var_24]
.text:0041C3B4                 mov     [esp+4Ch+var_34], ecx
.text:0041C3B8                 mov     ecx, [esp+4Ch+var_28]
.text:0041C3BC                 mov     [esp+4Ch+var_3C], ebx
.text:0041C3C0                 mov     ebx, [esp+4Ch+arg_0]
.text:0041C3C4                 mov     [esp+4Ch+var_40], ecx
.text:0041C3C8                 mov     [esp+4Ch+var_44], edx
.text:0041C3CC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041C3CF                 call    sprintf
.text:0041C3D4                 add     esp, 48h
.text:0041C3D7                 shr     eax, 1Fh
.text:0041C3DA                 pop     ebx
.text:0041C3DB                 retn
.text:0041C3DC ; ---------------------------------------------------------------------------
.text:0041C3DC
.text:0041C3DC loc_41C3DC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041C3DC                                         ; ___addmntentstr+D6↑j ...
.text:0041C3DC                 test    al, al
.text:0041C3DE                 jz      short loc_41C394
.text:0041C3E0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C3E3                 mov     ebx, edx
.text:0041C3E5                 call    strlen
.text:0041C3EA                 lea     edx, ds:1[eax*4]
.text:0041C3F1                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C3F4                 call    malloc
.text:0041C3F9                 mov     [esp+4Ch+Str], eax
.text:0041C3FD                 mov     edx, eax
.text:0041C3FF                 nop
.text:0041C400
.text:0041C400 loc_41C400:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0041C400                 movzx   eax, byte ptr [ebx]
.text:0041C403                 cmp     al, 20h ; ' '
.text:0041C405                 jz      short loc_41C43D
.text:0041C407                 cmp     al, 9
.text:0041C409                 jz      short loc_41C42C
.text:0041C40B                 cmp     al, 5Ch ; '\'
.text:0041C40D                 jz      short loc_41C423
.text:0041C40F                 mov     [edx], al
.text:0041C411
.text:0041C411 loc_41C411:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0041C411                                         ; ___addmntentstr+18B↓j ...
.text:0041C411                 movzx   ecx, byte ptr [ebx]
.text:0041C414                 inc     edx
.text:0041C415                 inc     ebx
.text:0041C416                 test    cl, cl
.text:0041C418                 jnz     short loc_41C400
.text:0041C41A                 mov     edx, [esp+4Ch+Str]
.text:0041C41E                 jmp     loc_41C394
.text:0041C423 ; ---------------------------------------------------------------------------
.text:0041C423
.text:0041C423 loc_41C423:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0041C423                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C426                 inc     edx
.text:0041C427                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C42A                 jmp     short loc_41C411
.text:0041C42C ; ---------------------------------------------------------------------------
.text:0041C42C
.text:0041C42C loc_41C42C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041C42C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C42F                 inc     edx
.text:0041C430                 mov     byte ptr [edx], 30h ; '0'
.text:0041C433                 inc     edx
.text:0041C434                 mov     byte ptr [edx], 31h ; '1'
.text:0041C437                 inc     edx
.text:0041C438                 mov     byte ptr [edx], 32h ; '2'
.text:0041C43B                 jmp     short loc_41C411
.text:0041C43D ; ---------------------------------------------------------------------------
.text:0041C43D
.text:0041C43D loc_41C43D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041C43D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C440                 inc     edx
.text:0041C441                 mov     byte ptr [edx], 30h ; '0'
.text:0041C444                 inc     edx
.text:0041C445                 mov     byte ptr [edx], 34h ; '4'
.text:0041C448                 inc     edx
.text:0041C449                 mov     byte ptr [edx], 30h ; '0'
.text:0041C44C                 jmp     short loc_41C411
.text:0041C44E ; ---------------------------------------------------------------------------
.text:0041C44E
.text:0041C44E loc_41C44E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041C44E                                         ; ___addmntentstr+AA↑j ...
.text:0041C44E                 test    al, al
.text:0041C450                 jz      loc_41C370
.text:0041C456                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C459                 mov     ebx, edx
.text:0041C45B                 call    strlen
.text:0041C460                 lea     edx, ds:1[eax*4]
.text:0041C467                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C46A                 call    malloc
.text:0041C46F                 mov     [esp+4Ch+var_24], eax
.text:0041C473                 mov     edx, eax
.text:0041C475                 lea     esi, [esi+0]
.text:0041C479                 lea     edi, [edi+0]
.text:0041C480
.text:0041C480 loc_41C480:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0041C480                 movzx   eax, byte ptr [ebx]
.text:0041C483                 cmp     al, 20h ; ' '
.text:0041C485                 jz      short loc_41C4B9
.text:0041C487                 cmp     al, 9
.text:0041C489                 jz      short loc_41C4A8
.text:0041C48B                 cmp     al, 5Ch ; '\'
.text:0041C48D                 jz      short loc_41C49F
.text:0041C48F                 mov     [edx], al
.text:0041C491
.text:0041C491 loc_41C491:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0041C491                                         ; ___addmntentstr+207↓j ...
.text:0041C491                 movzx   ecx, byte ptr [ebx]
.text:0041C494                 inc     edx
.text:0041C495                 inc     ebx
.text:0041C496                 test    cl, cl
.text:0041C498                 jnz     short loc_41C480
.text:0041C49A                 jmp     loc_41C370
.text:0041C49F ; ---------------------------------------------------------------------------
.text:0041C49F
.text:0041C49F loc_41C49F:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041C49F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C4A2                 inc     edx
.text:0041C4A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C4A6                 jmp     short loc_41C491
.text:0041C4A8 ; ---------------------------------------------------------------------------
.text:0041C4A8
.text:0041C4A8 loc_41C4A8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0041C4A8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C4AB                 inc     edx
.text:0041C4AC                 mov     byte ptr [edx], 30h ; '0'
.text:0041C4AF                 inc     edx
.text:0041C4B0                 mov     byte ptr [edx], 31h ; '1'
.text:0041C4B3                 inc     edx
.text:0041C4B4                 mov     byte ptr [edx], 32h ; '2'
.text:0041C4B7                 jmp     short loc_41C491
.text:0041C4B9 ; ---------------------------------------------------------------------------
.text:0041C4B9
.text:0041C4B9 loc_41C4B9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0041C4B9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C4BC                 inc     edx
.text:0041C4BD                 mov     byte ptr [edx], 30h ; '0'
.text:0041C4C0                 inc     edx
.text:0041C4C1                 mov     byte ptr [edx], 34h ; '4'
.text:0041C4C4                 inc     edx
.text:0041C4C5                 mov     byte ptr [edx], 30h ; '0'
.text:0041C4C8                 jmp     short loc_41C491
.text:0041C4CA ; ---------------------------------------------------------------------------
.text:0041C4CA
.text:0041C4CA loc_41C4CA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041C4CA                                         ; ___addmntentstr+7A↑j ...
.text:0041C4CA                 test    al, al
.text:0041C4CC                 jz      loc_41C340
.text:0041C4D2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041C4D5                 mov     ebx, edx
.text:0041C4D7                 call    strlen
.text:0041C4DC                 lea     edx, ds:1[eax*4]
.text:0041C4E3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C4E6                 call    malloc
.text:0041C4EB                 mov     [esp+4Ch+var_28], eax
.text:0041C4EF                 mov     edx, eax
.text:0041C4F1                 jmp     short loc_41C500
.text:0041C4F1 ; ---------------------------------------------------------------------------
.text:0041C4F3                 align 10h
.text:0041C500
.text:0041C500 loc_41C500:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0041C500                                         ; ___addmntentstr+268↓j
.text:0041C500                 movzx   eax, byte ptr [ebx]
.text:0041C503                 cmp     al, 20h ; ' '
.text:0041C505                 jz      short loc_41C539
.text:0041C507                 cmp     al, 9
.text:0041C509                 jz      short loc_41C528
.text:0041C50B                 cmp     al, 5Ch ; '\'
.text:0041C50D                 jz      short loc_41C51F
.text:0041C50F                 mov     [edx], al
.text:0041C511
.text:0041C511 loc_41C511:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0041C511                                         ; ___addmntentstr+287↓j ...
.text:0041C511                 movzx   ecx, byte ptr [ebx]
.text:0041C514                 inc     edx
.text:0041C515                 inc     ebx
.text:0041C516                 test    cl, cl
.text:0041C518                 jnz     short loc_41C500
.text:0041C51A                 jmp     loc_41C340
.text:0041C51F ; ---------------------------------------------------------------------------
.text:0041C51F
.text:0041C51F loc_41C51F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041C51F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C522                 inc     edx
.text:0041C523                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C526                 jmp     short loc_41C511
.text:0041C528 ; ---------------------------------------------------------------------------
.text:0041C528
.text:0041C528 loc_41C528:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0041C528                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C52B                 inc     edx
.text:0041C52C                 mov     byte ptr [edx], 30h ; '0'
.text:0041C52F                 inc     edx
.text:0041C530                 mov     byte ptr [edx], 31h ; '1'
.text:0041C533                 inc     edx
.text:0041C534                 mov     byte ptr [edx], 32h ; '2'
.text:0041C537                 jmp     short loc_41C511
.text:0041C539 ; ---------------------------------------------------------------------------
.text:0041C539
.text:0041C539 loc_41C539:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0041C539                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C53C                 inc     edx
.text:0041C53D                 mov     byte ptr [edx], 30h ; '0'
.text:0041C540                 inc     edx
.text:0041C541                 mov     byte ptr [edx], 34h ; '4'
.text:0041C544                 inc     edx
.text:0041C545                 mov     byte ptr [edx], 30h ; '0'
.text:0041C548                 jmp     short loc_41C511
.text:0041C548 ; ---------------------------------------------------------------------------
.text:0041C54A                 align 10h
.text:0041C550
.text:0041C550 loc_41C550:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0041C550                                         ; ___addmntentstr+4A↑j ...
.text:0041C550                 test    al, al
.text:0041C552                 jz      loc_41C310
.text:0041C558                 mov     ebx, [esp+4Ch+var_2C]
.text:0041C55C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041C55F                 call    strlen
.text:0041C564                 lea     edx, ds:1[eax*4]
.text:0041C56B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041C56E                 call    malloc
.text:0041C573                 mov     [esp+4Ch+var_2C], eax
.text:0041C577                 mov     edx, eax
.text:0041C579                 lea     esi, [esi+0]
.text:0041C580
.text:0041C580 loc_41C580:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0041C580                 movzx   eax, byte ptr [ebx]
.text:0041C583                 cmp     al, 20h ; ' '
.text:0041C585                 jz      short loc_41C5C0
.text:0041C587                 cmp     al, 9
.text:0041C589                 jz      short loc_41C5A8
.text:0041C58B                 cmp     al, 5Ch ; '\'
.text:0041C58D                 jz      short loc_41C59F
.text:0041C58F                 mov     [edx], al
.text:0041C591
.text:0041C591 loc_41C591:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0041C591                                         ; ___addmntentstr+307↓j ...
.text:0041C591                 movzx   ecx, byte ptr [ebx]
.text:0041C594                 inc     edx
.text:0041C595                 inc     ebx
.text:0041C596                 test    cl, cl
.text:0041C598                 jnz     short loc_41C580
.text:0041C59A                 jmp     loc_41C310
.text:0041C59F ; ---------------------------------------------------------------------------
.text:0041C59F
.text:0041C59F loc_41C59F:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041C59F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C5A2                 inc     edx
.text:0041C5A3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C5A6                 jmp     short loc_41C591
.text:0041C5A8 ; ---------------------------------------------------------------------------
.text:0041C5A8
.text:0041C5A8 loc_41C5A8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0041C5A8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C5AB                 inc     edx
.text:0041C5AC                 mov     byte ptr [edx], 30h ; '0'
.text:0041C5AF                 inc     edx
.text:0041C5B0                 mov     byte ptr [edx], 31h ; '1'
.text:0041C5B3                 inc     edx
.text:0041C5B4                 mov     byte ptr [edx], 32h ; '2'
.text:0041C5B7                 jmp     short loc_41C591
.text:0041C5B7 ; ---------------------------------------------------------------------------
.text:0041C5B9                 align 10h
.text:0041C5C0
.text:0041C5C0 loc_41C5C0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0041C5C0                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041C5C3                 inc     edx
.text:0041C5C4                 mov     byte ptr [edx], 30h ; '0'
.text:0041C5C7                 inc     edx
.text:0041C5C8                 mov     byte ptr [edx], 34h ; '4'
.text:0041C5CB                 inc     edx
.text:0041C5CC                 mov     byte ptr [edx], 30h ; '0'
.text:0041C5CF                 jmp     short loc_41C591
.text:0041C5D1 ; ---------------------------------------------------------------------------
.text:0041C5D1
.text:0041C5D1 loc_41C5D1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0041C5D1                 movzx   eax, byte ptr [ecx]
.text:0041C5D4                 jmp     loc_41C550
.text:0041C5D4 ___addmntentstr endp
.text:0041C5D4
.text:0041C5D4 ; ---------------------------------------------------------------------------
.text:0041C5D9                 align 10h
.text:0041C5E0
.text:0041C5E0 ; =============== S U B R O U T I N E =======================================
.text:0041C5E0
.text:0041C5E0
.text:0041C5E0 sub_41C5E0      proc near               ; CODE XREF: sub_419140+99↑p
.text:0041C5E0
.text:0041C5E0 nBufferLength   = dword ptr -1Ch
.text:0041C5E0 lpBuffer        = dword ptr -18h
.text:0041C5E0 dwBytes         = dword ptr -14h
.text:0041C5E0 var_8           = dword ptr -8
.text:0041C5E0 var_4           = dword ptr -4
.text:0041C5E0
.text:0041C5E0                 sub     esp, 1Ch
.text:0041C5E3                 mov     [esp+1Ch+var_8], ebx
.text:0041C5E7                 mov     [esp+1Ch+var_4], esi
.text:0041C5EB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0041C5F3                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041C5FA                 call    GetLogicalDriveStringsA
.text:0041C5FF                 sub     esp, 8
.text:0041C602                 mov     ebx, eax
.text:0041C604                 call    GetProcessHeap
.text:0041C609                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041C60C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0041C610                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0041C618                 call    HeapAlloc
.text:0041C61D                 sub     esp, 0Ch
.text:0041C620                 mov     esi, eax
.text:0041C622                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0041C625                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0041C629                 call    GetLogicalDriveStringsA
.text:0041C62E                 sub     esp, 8
.text:0041C631                 mov     eax, esi
.text:0041C633                 mov     ebx, [esp+1Ch+var_8]
.text:0041C637                 mov     esi, [esp+1Ch+var_4]
.text:0041C63B                 add     esp, 1Ch
.text:0041C63E                 retn
.text:0041C63E sub_41C5E0      endp
.text:0041C63E
.text:0041C63F
.text:0041C63F ; =============== S U B R O U T I N E =======================================
.text:0041C63F
.text:0041C63F
.text:0041C63F ; int __cdecl sub_41C63F(char *, char *)
.text:0041C63F sub_41C63F      proc near               ; DATA XREF: sub_41C63F:loc_41C6CD↓o
.text:0041C63F
.text:0041C63F FileName        = dword ptr -1Ch
.text:0041C63F Mode            = dword ptr -18h
.text:0041C63F dwBytes         = dword ptr -14h
.text:0041C63F arg_0           = dword ptr  4
.text:0041C63F arg_4           = dword ptr  8
.text:0041C63F
.text:0041C63F                 ja      short $+2
.text:0041C641
.text:0041C641 loc_41C641:                             ; CODE XREF: sub_41C63F↑j
.text:0041C641                 jmp     short loc_41C650
.text:0041C641 ; ---------------------------------------------------------------------------
.text:0041C643                 align 10h
.text:0041C650
.text:0041C650 loc_41C650:                             ; CODE XREF: sub_41C63F:loc_41C641↑j
.text:0041C650                 push    edi
.text:0041C651                 push    esi
.text:0041C652                 push    ebx
.text:0041C653                 sub     esp, 10h
.text:0041C656                 mov     ebx, [esp+1Ch+arg_0]
.text:0041C65A                 mov     edx, [esp+1Ch+arg_4]
.text:0041C65E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041C661                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0041C665                 call    fopen
.text:0041C66A                 test    eax, eax
.text:0041C66C                 mov     edi, eax
.text:0041C66E                 jz      short loc_41C6CD
.text:0041C670
.text:0041C670 loc_41C670:                             ; CODE XREF: sub_41C63F+A2↓j
.text:0041C670                                         ; sub_41C63F+AB↓j
.text:0041C670                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0041C678                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041C67F                 call    GetLogicalDriveStringsA
.text:0041C684                 sub     esp, 8
.text:0041C687                 mov     esi, eax
.text:0041C689                 call    GetProcessHeap
.text:0041C68E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0041C691                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0041C695                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041C69D                 call    HeapAlloc
.text:0041C6A2                 sub     esp, 0Ch
.text:0041C6A5                 mov     ebx, eax
.text:0041C6A7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041C6AA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041C6AE                 call    GetLogicalDriveStringsA
.text:0041C6B3                 mov     off_42B164, ebx ; "notset"
.text:0041C6B9                 sub     esp, 8
.text:0041C6BC                 xor     eax, eax
.text:0041C6BE                 test    ebx, ebx
.text:0041C6C0                 setz    al
.text:0041C6C3                 add     esp, 10h
.text:0041C6C6                 pop     ebx
.text:0041C6C7                 dec     eax
.text:0041C6C8                 and     eax, edi
.text:0041C6CA                 pop     esi
.text:0041C6CB                 pop     edi
.text:0041C6CC                 retn
.text:0041C6CD ; ---------------------------------------------------------------------------
.text:0041C6CD
.text:0041C6CD loc_41C6CD:                             ; CODE XREF: sub_41C63F+2F↑j
.text:0041C6CD                 mov     [esp+1Ch+Mode], offset sub_41C63F ; Mode
.text:0041C6D5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041C6D8                 call    fopen
.text:0041C6DD                 test    eax, eax
.text:0041C6DF                 mov     edi, eax
.text:0041C6E1                 jnz     short loc_41C670
.text:0041C6E3                 call    sub_41D8C0
.text:0041C6E8                 mov     edi, eax
.text:0041C6EA                 jmp     short loc_41C670
.text:0041C6EA sub_41C63F      endp
.text:0041C6EA
.text:0041C6EA ; ---------------------------------------------------------------------------
.text:0041C6EC                 align 10h
.text:0041C6F0                 sub     esp, 0Ch
.text:0041C6F3                 mov     eax, [esp+10h]
.text:0041C6F7                 test    eax, eax
.text:0041C6F9                 jz      short loc_41C703
.text:0041C6FB                 mov     [esp], eax
.text:0041C6FE                 call    fclose
.text:0041C703
.text:0041C703 loc_41C703:                             ; CODE XREF: .text:0041C6F9↑j
.text:0041C703                 call    GetProcessHeap
.text:0041C708                 mov     [esp], eax
.text:0041C70B                 mov     ecx, off_42B164 ; "notset"
.text:0041C711                 mov     dword ptr [esp+4], 0
.text:0041C719                 mov     [esp+8], ecx
.text:0041C71D                 call    HeapFree
.text:0041C722                 mov     edx, off_42B160 ; "notset"
.text:0041C728                 sub     esp, 0Ch
.text:0041C72B                 mov     eax, 1
.text:0041C730                 mov     off_42B164, edx ; "notset"
.text:0041C736                 add     esp, 0Ch
.text:0041C739                 retn
.text:0041C739 ; ---------------------------------------------------------------------------
.text:0041C73A                 align 10h
.text:0041C740                 push    edi
.text:0041C741                 push    esi
.text:0041C742                 push    ebx
.text:0041C743                 sub     esp, 10h
.text:0041C746                 mov     edi, [esp+24h]
.text:0041C74A                 mov     [esp], edi
.text:0041C74D                 call    strlen
.text:0041C752                 mov     edx, [esp+20h]
.text:0041C756                 mov     esi, eax
.text:0041C758                 mov     ebx, [edx+0Ch]
.text:0041C75B                 nop
.text:0041C75C                 lea     esi, [esi+0]
.text:0041C760
.text:0041C760 loc_41C760:                             ; CODE XREF: .text:0041C791↓j
.text:0041C760                 mov     [esp+4], edi
.text:0041C764                 mov     [esp], ebx
.text:0041C767                 call    strstr
.text:0041C76C                 test    eax, eax
.text:0041C76E                 jz      short loc_41C793
.text:0041C770                 cmp     eax, ebx
.text:0041C772                 jz      short loc_41C795
.text:0041C774                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0041C778                 jz      short loc_41C7A0
.text:0041C77A
.text:0041C77A loc_41C77A:                             ; CODE XREF: .text:0041C7B0↓j
.text:0041C77A                 mov     [esp], ebx
.text:0041C77D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0041C785                 call    strchr
.text:0041C78A                 test    eax, eax
.text:0041C78C                 mov     ebx, eax
.text:0041C78E                 jz      short loc_41C793
.text:0041C790                 inc     ebx
.text:0041C791                 jmp     short loc_41C760
.text:0041C793 ; ---------------------------------------------------------------------------
.text:0041C793
.text:0041C793 loc_41C793:                             ; CODE XREF: .text:0041C76E↑j
.text:0041C793                                         ; .text:0041C78E↑j
.text:0041C793                 xor     eax, eax
.text:0041C795
.text:0041C795 loc_41C795:                             ; CODE XREF: .text:0041C772↑j
.text:0041C795                                         ; .text:0041C7A6↓j ...
.text:0041C795                 add     esp, 10h
.text:0041C798                 pop     ebx
.text:0041C799                 pop     esi
.text:0041C79A                 pop     edi
.text:0041C79B                 retn
.text:0041C79B ; ---------------------------------------------------------------------------
.text:0041C79C                 align 10h
.text:0041C7A0
.text:0041C7A0 loc_41C7A0:                             ; CODE XREF: .text:0041C778↑j
.text:0041C7A0                 movzx   edx, byte ptr [esi+eax]
.text:0041C7A4                 test    dl, dl
.text:0041C7A6                 jz      short loc_41C795
.text:0041C7A8                 cmp     dl, 3Dh ; '='
.text:0041C7AB                 jz      short loc_41C795
.text:0041C7AD                 cmp     dl, 2Ch ; ','
.text:0041C7B0                 jnz     short loc_41C77A
.text:0041C7B2                 jmp     short loc_41C795
.text:0041C7B2 ; ---------------------------------------------------------------------------
.text:0041C7B4                 align 10h
.text:0041C7C0
.text:0041C7C0 ; =============== S U B R O U T I N E =======================================
.text:0041C7C0
.text:0041C7C0
.text:0041C7C0 sub_41C7C0      proc near               ; CODE XREF: sub_419E60+1A↑p
.text:0041C7C0                                         ; sub_419EC0+11F↑p
.text:0041C7C0
.text:0041C7C0 lpTimeZoneInformation= dword ptr -0DCh
.text:0041C7C0 var_D8          = dword ptr -0D8h
.text:0041C7C0 var_D4          = dword ptr -0D4h
.text:0041C7C0 var_D0          = dword ptr -0D0h
.text:0041C7C0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0041C7C0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0041C7C0 arg_0           = dword ptr  4
.text:0041C7C0 arg_4           = dword ptr  8
.text:0041C7C0
.text:0041C7C0                 push    edi
.text:0041C7C1                 push    esi
.text:0041C7C2                 push    ebx
.text:0041C7C3                 sub     esp, 0D0h
.text:0041C7C9                 mov     ebx, [esp+0DCh+arg_4]
.text:0041C7D0                 mov     edi, [esp+0DCh+arg_0]
.text:0041C7D7                 test    ebx, ebx
.text:0041C7D9                 jz      short loc_41C804
.text:0041C7DB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041C7DF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0041C7E2                 call    GetTimeZoneInformation
.text:0041C7E7                 sub     esp, 4
.text:0041C7EA                 cmp     eax, 0FFFFFFFFh
.text:0041C7ED                 jz      loc_41C885
.text:0041C7F3                 xor     ecx, ecx
.text:0041C7F5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0041C7F9                 cmp     eax, 2
.text:0041C7FC                 setz    cl
.text:0041C7FF                 mov     [ebx], esi
.text:0041C801                 mov     [ebx+4], ecx
.text:0041C804
.text:0041C804 loc_41C804:                             ; CODE XREF: sub_41C7C0+19↑j
.text:0041C804                                         ; sub_41C7C0+E0↓j
.text:0041C804                 test    edi, edi
.text:0041C806                 jz      short loc_41C879
.text:0041C808                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041C80C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041C80F                 call    GetSystemTimeAsFileTime
.text:0041C814                 sub     esp, 4
.text:0041C817                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041C81B                 mov     [esp+0DCh+var_D4], 989680h
.text:0041C823                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0041C827                 mov     [esp+0DCh+var_D0], 0
.text:0041C82F                 add     ebx, 2AC18000h
.text:0041C835                 adc     esi, 0FE624E21h
.text:0041C83B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041C83F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041C842                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0041C846                 mov     [esp+0DCh+var_D8], esi
.text:0041C84A                 call    sub_429510
.text:0041C84F                 mov     [edi], eax
.text:0041C851                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041C854                 mov     [esp+0DCh+var_D4], 989680h
.text:0041C85C                 mov     [esp+0DCh+var_D0], 0
.text:0041C864                 mov     [esp+0DCh+var_D8], esi
.text:0041C868                 call    sub_429070
.text:0041C86D                 lea     ebx, [eax+eax*4]
.text:0041C870                 lea     edx, [ebx+ebx*4]
.text:0041C873                 shl     edx, 2
.text:0041C876                 mov     [edi+4], edx
.text:0041C879
.text:0041C879 loc_41C879:                             ; CODE XREF: sub_41C7C0+46↑j
.text:0041C879                 add     esp, 0D0h
.text:0041C87F                 xor     eax, eax
.text:0041C881                 pop     ebx
.text:0041C882                 pop     esi
.text:0041C883                 pop     edi
.text:0041C884                 retn
.text:0041C885 ; ---------------------------------------------------------------------------
.text:0041C885
.text:0041C885 loc_41C885:                             ; CODE XREF: sub_41C7C0+2D↑j
.text:0041C885                 mov     dword ptr [ebx], 0
.text:0041C88B                 mov     dword ptr [ebx+4], 0
.text:0041C892                 call    sub_41AD20
.text:0041C897                 mov     esi, eax
.text:0041C899                 call    _errno
.text:0041C89E                 mov     [eax], esi
.text:0041C8A0                 jmp     loc_41C804
.text:0041C8A0 sub_41C7C0      endp
.text:0041C8A0
.text:0041C8A0 ; ---------------------------------------------------------------------------
.text:0041C8A5                 align 10h
.text:0041C8B0
.text:0041C8B0 ; =============== S U B R O U T I N E =======================================
.text:0041C8B0
.text:0041C8B0
.text:0041C8B0 sub_41C8B0      proc near               ; CODE XREF: sub_419EC0:loc_419FA6↑p
.text:0041C8B0
.text:0041C8B0 lpFrequency     = dword ptr -0Ch
.text:0041C8B0 var_4           = dword ptr -4
.text:0041C8B0
.text:0041C8B0                 sub     esp, 0Ch
.text:0041C8B3                 mov     edx, dword ptr ds:Frequency+4
.text:0041C8B9                 mov     [esp+0Ch+var_4], ebx
.text:0041C8BD                 mov     eax, dword ptr ds:Frequency
.text:0041C8C2                 mov     ebx, edx
.text:0041C8C4                 or      ebx, eax
.text:0041C8C6                 jz      short loc_41C8D0
.text:0041C8C8
.text:0041C8C8 loc_41C8C8:                             ; CODE XREF: sub_41C8B0+3E↓j
.text:0041C8C8                                         ; sub_41C8B0+52↓j
.text:0041C8C8                 mov     ebx, [esp+0Ch+var_4]
.text:0041C8CC                 add     esp, 0Ch
.text:0041C8CF                 retn
.text:0041C8D0 ; ---------------------------------------------------------------------------
.text:0041C8D0
.text:0041C8D0 loc_41C8D0:                             ; CODE XREF: sub_41C8B0+16↑j
.text:0041C8D0                 mov     [esp+0Ch+lpFrequency], offset Frequency ; lpFrequency
.text:0041C8D7                 call    QueryPerformanceFrequency
.text:0041C8DC                 sub     esp, 4
.text:0041C8DF                 test    eax, eax
.text:0041C8E1                 jz      short loc_41C8F0
.text:0041C8E3                 mov     eax, dword ptr ds:Frequency
.text:0041C8E8                 mov     edx, dword ptr ds:Frequency+4
.text:0041C8EE                 jmp     short loc_41C8C8
.text:0041C8F0 ; ---------------------------------------------------------------------------
.text:0041C8F0
.text:0041C8F0 loc_41C8F0:                             ; CODE XREF: sub_41C8B0+31↑j
.text:0041C8F0                 call    sub_41AD20
.text:0041C8F5                 mov     ebx, eax
.text:0041C8F7                 call    _errno
.text:0041C8FC                 mov     [eax], ebx
.text:0041C8FE                 xor     edx, edx
.text:0041C900                 xor     eax, eax
.text:0041C902                 jmp     short loc_41C8C8
.text:0041C902 sub_41C8B0      endp
.text:0041C902
.text:0041C902 ; ---------------------------------------------------------------------------
.text:0041C904                 align 10h
.text:0041C910
.text:0041C910 ; =============== S U B R O U T I N E =======================================
.text:0041C910
.text:0041C910 ; Attributes: info_from_lumina
.text:0041C910
.text:0041C910 __quicksort     proc near               ; CODE XREF: sub_41A1F0+7B↑j
.text:0041C910
.text:0041C910 var_14C         = dword ptr -14Ch
.text:0041C910 var_148         = dword ptr -148h
.text:0041C910 var_13C         = dword ptr -13Ch
.text:0041C910 var_135         = byte ptr -135h
.text:0041C910 var_134         = dword ptr -134h
.text:0041C910 var_130         = dword ptr -130h
.text:0041C910 var_12C         = dword ptr -12Ch
.text:0041C910 var_128         = dword ptr -128h
.text:0041C910 var_124         = dword ptr -124h
.text:0041C910 var_120         = dword ptr -120h
.text:0041C910 var_11C         = byte ptr -11Ch
.text:0041C910 var_114         = byte ptr -114h
.text:0041C910 arg_0           = dword ptr  4
.text:0041C910 arg_4           = dword ptr  8
.text:0041C910 arg_8           = dword ptr  0Ch
.text:0041C910 arg_C           = dword ptr  10h
.text:0041C910
.text:0041C910                 push    ebp
.text:0041C911                 push    edi
.text:0041C912                 push    esi
.text:0041C913                 push    ebx
.text:0041C914                 sub     esp, 13Ch
.text:0041C91A                 mov     eax, [esp+14Ch+arg_4]
.text:0041C921                 mov     ecx, [esp+14Ch+arg_8]
.text:0041C928                 shl     ecx, 2
.text:0041C92B                 test    eax, eax
.text:0041C92D                 mov     [esp+14Ch+var_120], ecx
.text:0041C931                 jz      loc_41CA8C
.text:0041C937                 lea     ecx, [eax-1]
.text:0041C93A                 cmp     eax, 4
.text:0041C93D                 mov     [esp+14Ch+var_13C], ecx
.text:0041C941                 jbe     short loc_41C976
.text:0041C943                 mov     edi, [esp+14Ch+arg_8]
.text:0041C94A                 lea     ebx, [esp+14Ch+var_114]
.text:0041C94E                 mov     edx, [esp+14Ch+var_13C]
.text:0041C952                 mov     [esp+14Ch+var_12C], ebx
.text:0041C956                 mov     ebp, [esp+14Ch+arg_0]
.text:0041C95D                 lea     eax, [esp+14Ch+var_11C]
.text:0041C961                 imul    edi, edx
.text:0041C964                 mov     [esp+14Ch+var_124], ebp
.text:0041C968                 add     edi, ebp
.text:0041C96A                 cmp     eax, ebx
.text:0041C96C                 mov     [esp+14Ch+var_128], edi
.text:0041C970                 jb      loc_41CABF
.text:0041C976
.text:0041C976 loc_41C976:                             ; CODE XREF: __quicksort+31↑j
.text:0041C976                                         ; __quicksort+313↓j
.text:0041C976                 mov     ebx, [esp+14Ch+arg_8]
.text:0041C97D                 mov     edx, [esp+14Ch+var_13C]
.text:0041C981                 mov     ecx, [esp+14Ch+arg_0]
.text:0041C988                 mov     esi, [esp+14Ch+arg_0]
.text:0041C98F                 imul    ebx, edx
.text:0041C992                 mov     edi, [esp+14Ch+var_120]
.text:0041C996                 add     ebx, ecx
.text:0041C998                 mov     [esp+14Ch+var_134], ebx
.text:0041C99C                 lea     ebx, [edi+esi]
.text:0041C99F                 cmp     ebx, [esp+14Ch+var_134]
.text:0041C9A3                 jbe     short loc_41C9A9
.text:0041C9A5                 mov     ebx, [esp+14Ch+var_134]
.text:0041C9A9
.text:0041C9A9 loc_41C9A9:                             ; CODE XREF: __quicksort+93↑j
.text:0041C9A9                 mov     ebp, [esp+14Ch+arg_8]
.text:0041C9B0                 lea     edi, [ebp+esi+0]
.text:0041C9B4                 cmp     edi, ebx
.text:0041C9B6                 mov     ebp, edi
.text:0041C9B8                 jbe     loc_41CA97
.text:0041C9BE
.text:0041C9BE loc_41C9BE:                             ; CODE XREF: __quicksort+1A6↓j
.text:0041C9BE                 cmp     esi, [esp+14Ch+arg_0]
.text:0041C9C5                 jz      short loc_41C9E6
.text:0041C9C7                 mov     edi, [esp+14Ch+arg_8]
.text:0041C9CE                 mov     ebx, esi
.text:0041C9D0                 mov     ecx, [esp+14Ch+arg_0]
.text:0041C9D7
.text:0041C9D7 loc_41C9D7:                             ; CODE XREF: __quicksort+D4↓j
.text:0041C9D7                 movzx   edx, byte ptr [ebx]
.text:0041C9DA                 movzx   eax, byte ptr [ecx]
.text:0041C9DD                 mov     [ebx], al
.text:0041C9DF                 inc     ebx
.text:0041C9E0                 mov     [ecx], dl
.text:0041C9E2                 inc     ecx
.text:0041C9E3                 dec     edi
.text:0041C9E4                 jnz     short loc_41C9D7
.text:0041C9E6
.text:0041C9E6 loc_41C9E6:                             ; CODE XREF: __quicksort+B5↑j
.text:0041C9E6                 mov     esi, [esp+14Ch+arg_8]
.text:0041C9ED                 lea     edi, [esi+ebp]
.text:0041C9F0                 cmp     edi, [esp+14Ch+var_134]
.text:0041C9F4                 ja      loc_41CA8C
.text:0041C9FA
.text:0041C9FA loc_41C9FA:                             ; CODE XREF: __quicksort+176↓j
.text:0041C9FA                 mov     esi, edi
.text:0041C9FC                 lea     esi, [esi+0]
.text:0041CA00
.text:0041CA00 loc_41CA00:                             ; CODE XREF: __quicksort+109↓j
.text:0041CA00                 mov     [esp+14Ch+var_14C], edi
.text:0041CA03                 mov     ebx, [esp+14Ch+arg_8]
.text:0041CA0A                 sub     esi, ebx
.text:0041CA0C                 mov     [esp+14Ch+var_148], esi
.text:0041CA10                 call    [esp+14Ch+arg_C]
.text:0041CA17                 test    eax, eax
.text:0041CA19                 js      short loc_41CA00
.text:0041CA1B                 mov     edx, [esp+14Ch+arg_8]
.text:0041CA22                 mov     eax, [esp+14Ch+arg_8]
.text:0041CA29                 add     esi, edx
.text:0041CA2B                 cmp     esi, edi
.text:0041CA2D                 lea     ebp, [eax+edi]
.text:0041CA30                 jz      short loc_41CA80
.text:0041CA32                 lea     ebx, [ebp-1]
.text:0041CA35                 cmp     ebx, edi
.text:0041CA37                 jb      short loc_41CA80
.text:0041CA39                 lea     esi, [esi+0]
.text:0041CA40
.text:0041CA40 loc_41CA40:                             ; CODE XREF: __quicksort+16E↓j
.text:0041CA40                 movzx   ecx, byte ptr [ebx]
.text:0041CA43                 mov     edx, ebx
.text:0041CA45                 mov     eax, [esp+14Ch+arg_8]
.text:0041CA4C                 mov     [esp+14Ch+var_135], cl
.text:0041CA50                 sub     edx, eax
.text:0041CA52                 cmp     edx, esi
.text:0041CA54                 mov     ecx, ebx
.text:0041CA56                 jb      short loc_41CA74
.text:0041CA58                 nop
.text:0041CA59                 lea     esi, [esi+0]
.text:0041CA60
.text:0041CA60 loc_41CA60:                             ; CODE XREF: __quicksort+162↓j
.text:0041CA60                 movzx   eax, byte ptr [edx]
.text:0041CA63                 mov     [ecx], al
.text:0041CA65                 mov     eax, [esp+14Ch+arg_8]
.text:0041CA6C                 mov     ecx, edx
.text:0041CA6E                 sub     edx, eax
.text:0041CA70                 cmp     edx, esi
.text:0041CA72                 jnb     short loc_41CA60
.text:0041CA74
.text:0041CA74 loc_41CA74:                             ; CODE XREF: __quicksort+146↑j
.text:0041CA74                 movzx   eax, [esp+14Ch+var_135]
.text:0041CA79                 dec     ebx
.text:0041CA7A                 cmp     ebx, edi
.text:0041CA7C                 mov     [ecx], al
.text:0041CA7E                 jnb     short loc_41CA40
.text:0041CA80
.text:0041CA80 loc_41CA80:                             ; CODE XREF: __quicksort+120↑j
.text:0041CA80                                         ; __quicksort+127↑j
.text:0041CA80                 cmp     ebp, [esp+14Ch+var_134]
.text:0041CA84                 mov     edi, ebp
.text:0041CA86                 jbe     loc_41C9FA
.text:0041CA8C
.text:0041CA8C loc_41CA8C:                             ; CODE XREF: __quicksort+21↑j
.text:0041CA8C                                         ; __quicksort+E4↑j
.text:0041CA8C                 add     esp, 13Ch
.text:0041CA92                 pop     ebx
.text:0041CA93                 pop     esi
.text:0041CA94                 pop     edi
.text:0041CA95                 pop     ebp
.text:0041CA96                 retn
.text:0041CA97 ; ---------------------------------------------------------------------------
.text:0041CA97
.text:0041CA97 loc_41CA97:                             ; CODE XREF: __quicksort+A8↑j
.text:0041CA97                                         ; __quicksort+1A4↓j
.text:0041CA97                 mov     [esp+14Ch+var_148], esi
.text:0041CA9B                 mov     [esp+14Ch+var_14C], edi
.text:0041CA9E                 call    [esp+14Ch+arg_C]
.text:0041CAA5                 test    eax, eax
.text:0041CAA7                 js      short loc_41CABB
.text:0041CAA9
.text:0041CAA9 loc_41CAA9:                             ; CODE XREF: __quicksort+1AD↓j
.text:0041CAA9                 mov     ecx, [esp+14Ch+arg_8]
.text:0041CAB0                 add     edi, ecx
.text:0041CAB2                 cmp     edi, ebx
.text:0041CAB4                 jbe     short loc_41CA97
.text:0041CAB6                 jmp     loc_41C9BE
.text:0041CABB ; ---------------------------------------------------------------------------
.text:0041CABB
.text:0041CABB loc_41CABB:                             ; CODE XREF: __quicksort+197↑j
.text:0041CABB                 mov     esi, edi
.text:0041CABD                 jmp     short loc_41CAA9
.text:0041CABF ; ---------------------------------------------------------------------------
.text:0041CABF
.text:0041CABF loc_41CABF:                             ; CODE XREF: __quicksort+60↑j
.text:0041CABF                                         ; __quicksort+30D↓j
.text:0041CABF                 mov     eax, [esp+14Ch+var_128]
.text:0041CAC3                 xor     edx, edx
.text:0041CAC5                 mov     ebp, [esp+14Ch+var_124]
.text:0041CAC9                 mov     edi, [esp+14Ch+arg_8]
.text:0041CAD0                 mov     ebx, [esp+14Ch+var_124]
.text:0041CAD4                 sub     eax, ebp
.text:0041CAD6                 div     [esp+14Ch+arg_8]
.text:0041CADD                 mov     ecx, [esp+14Ch+var_124]
.text:0041CAE1                 mov     [esp+14Ch+var_148], ecx
.text:0041CAE5                 shr     eax, 1
.text:0041CAE7                 imul    eax, edi
.text:0041CAEA                 add     eax, ebx
.text:0041CAEC                 mov     [esp+14Ch+var_130], eax
.text:0041CAF0                 mov     esi, [esp+14Ch+var_130]
.text:0041CAF4                 mov     [esp+14Ch+var_14C], esi
.text:0041CAF7                 call    [esp+14Ch+arg_C]
.text:0041CAFE                 test    eax, eax
.text:0041CB00                 js      loc_41CD04
.text:0041CB06
.text:0041CB06 loc_41CB06:                             ; CODE XREF: __quicksort+412↓j
.text:0041CB06                 mov     edx, [esp+14Ch+var_130]
.text:0041CB0A                 mov     eax, [esp+14Ch+var_128]
.text:0041CB0E                 mov     [esp+14Ch+var_148], edx
.text:0041CB12                 mov     [esp+14Ch+var_14C], eax
.text:0041CB15                 call    [esp+14Ch+arg_C]
.text:0041CB1C                 test    eax, eax
.text:0041CB1E                 js      loc_41CCA5
.text:0041CB24
.text:0041CB24 loc_41CB24:                             ; CODE XREF: __quicksort+3CB↓j
.text:0041CB24                                         ; __quicksort+3EF↓j
.text:0041CB24                 mov     edi, [esp+14Ch+arg_8]
.text:0041CB2B                 mov     ebp, [esp+14Ch+var_124]
.text:0041CB2F                 mov     ebx, [esp+14Ch+arg_8]
.text:0041CB36                 add     ebp, edi
.text:0041CB38                 mov     edi, [esp+14Ch+var_128]
.text:0041CB3C                 sub     edi, ebx
.text:0041CB3E                 mov     esi, esi
.text:0041CB40
.text:0041CB40 loc_41CB40:                             ; CODE XREF: __quicksort+2C7↓j
.text:0041CB40                                         ; __quicksort+390↓j
.text:0041CB40                 mov     [esp+14Ch+var_14C], ebp
.text:0041CB43                 mov     esi, [esp+14Ch+var_130]
.text:0041CB47                 mov     [esp+14Ch+var_148], esi
.text:0041CB4B                 call    [esp+14Ch+arg_C]
.text:0041CB52                 test    eax, eax
.text:0041CB54                 js      loc_41CC97
.text:0041CB5A                 lea     esi, [esi+0]
.text:0041CB60
.text:0041CB60 loc_41CB60:                             ; CODE XREF: __quicksort+26F↓j
.text:0041CB60                 mov     [esp+14Ch+var_148], edi
.text:0041CB64                 mov     eax, [esp+14Ch+var_130]
.text:0041CB68                 mov     [esp+14Ch+var_14C], eax
.text:0041CB6B                 call    [esp+14Ch+arg_C]
.text:0041CB72                 test    eax, eax
.text:0041CB74                 jns     short loc_41CB81
.text:0041CB76                 mov     ecx, [esp+14Ch+arg_8]
.text:0041CB7D                 sub     edi, ecx
.text:0041CB7F                 jmp     short loc_41CB60
.text:0041CB81 ; ---------------------------------------------------------------------------
.text:0041CB81
.text:0041CB81 loc_41CB81:                             ; CODE XREF: __quicksort+264↑j
.text:0041CB81                 cmp     ebp, edi
.text:0041CB83                 jnb     loc_41CC7E
.text:0041CB89                 mov     esi, [esp+14Ch+arg_8]
.text:0041CB90                 mov     ebx, ebp
.text:0041CB92                 mov     ecx, edi
.text:0041CB94                 lea     esi, [esi+0]
.text:0041CB9A                 lea     edi, [edi+0]
.text:0041CBA0
.text:0041CBA0 loc_41CBA0:                             ; CODE XREF: __quicksort+29D↓j
.text:0041CBA0                 movzx   edx, byte ptr [ebx]
.text:0041CBA3                 movzx   eax, byte ptr [ecx]
.text:0041CBA6                 mov     [ebx], al
.text:0041CBA8                 inc     ebx
.text:0041CBA9                 mov     [ecx], dl
.text:0041CBAB                 inc     ecx
.text:0041CBAC                 dec     esi
.text:0041CBAD                 jnz     short loc_41CBA0
.text:0041CBAF                 cmp     [esp+14Ch+var_130], ebp
.text:0041CBB3                 jz      loc_41CC75
.text:0041CBB9                 cmp     [esp+14Ch+var_130], edi
.text:0041CBBD                 jz      loc_41CC6C
.text:0041CBC3
.text:0041CBC3 loc_41CBC3:                             ; CODE XREF: __quicksort+360↓j
.text:0041CBC3                                         ; __quicksort+369↓j
.text:0041CBC3                 mov     edx, [esp+14Ch+arg_8]
.text:0041CBCA                 mov     ebx, [esp+14Ch+arg_8]
.text:0041CBD1                 add     ebp, edx
.text:0041CBD3                 sub     edi, ebx
.text:0041CBD5
.text:0041CBD5 loc_41CBD5:                             ; CODE XREF: __quicksort+370↓j
.text:0041CBD5                 cmp     ebp, edi
.text:0041CBD7                 jbe     loc_41CB40
.text:0041CBDD
.text:0041CBDD loc_41CBDD:                             ; CODE XREF: __quicksort+382↓j
.text:0041CBDD                 mov     esi, [esp+14Ch+var_124]
.text:0041CBE1                 mov     eax, edi
.text:0041CBE3                 sub     eax, esi
.text:0041CBE5                 cmp     eax, [esp+14Ch+var_120]
.text:0041CBE9                 ja      short loc_41CC28
.text:0041CBEB                 mov     [esp+14Ch+var_124], ebp
.text:0041CBEF                 mov     edi, [esp+14Ch+var_128]
.text:0041CBF3                 sub     edi, ebp
.text:0041CBF5                 cmp     edi, [esp+14Ch+var_120]
.text:0041CBF9                 ja      short loc_41CC15
.text:0041CBFB                 sub     [esp+14Ch+var_12C], 8
.text:0041CC00                 mov     edx, [esp+14Ch+var_12C]
.text:0041CC04                 mov     ecx, [esp+14Ch+var_12C]
.text:0041CC08                 mov     ebx, [edx]
.text:0041CC0A                 mov     ebp, [ecx+4]
.text:0041CC0D                 mov     [esp+14Ch+var_124], ebx
.text:0041CC11                 mov     [esp+14Ch+var_128], ebp
.text:0041CC15
.text:0041CC15 loc_41CC15:                             ; CODE XREF: __quicksort+2E9↑j
.text:0041CC15                                         ; __quicksort+340↓j ...
.text:0041CC15                 lea     eax, [esp+14Ch+var_11C]
.text:0041CC19                 cmp     eax, [esp+14Ch+var_12C]
.text:0041CC1D                 jb      loc_41CABF
.text:0041CC23                 jmp     loc_41C976
.text:0041CC28 ; ---------------------------------------------------------------------------
.text:0041CC28
.text:0041CC28 loc_41CC28:                             ; CODE XREF: __quicksort+2D9↑j
.text:0041CC28                 mov     edx, [esp+14Ch+var_128]
.text:0041CC2C                 sub     edx, ebp
.text:0041CC2E                 cmp     edx, [esp+14Ch+var_120]
.text:0041CC32                 jbe     short loc_41CC66
.text:0041CC34                 cmp     eax, edx
.text:0041CC36                 jle     short loc_41CC52
.text:0041CC38                 mov     ecx, [esp+14Ch+var_12C]
.text:0041CC3C                 mov     ebx, [esp+14Ch+var_124]
.text:0041CC40                 mov     [esp+14Ch+var_124], ebp
.text:0041CC44                 mov     [ecx+4], edi
.text:0041CC47                 mov     [ecx], ebx
.text:0041CC49                 add     ecx, 8
.text:0041CC4C                 mov     [esp+14Ch+var_12C], ecx
.text:0041CC50                 jmp     short loc_41CC15
.text:0041CC52 ; ---------------------------------------------------------------------------
.text:0041CC52
.text:0041CC52 loc_41CC52:                             ; CODE XREF: __quicksort+326↑j
.text:0041CC52                 mov     esi, [esp+14Ch+var_12C]
.text:0041CC56                 mov     [esi], ebp
.text:0041CC58                 mov     ebp, [esp+14Ch+var_128]
.text:0041CC5C                 mov     [esi+4], ebp
.text:0041CC5F                 add     esi, 8
.text:0041CC62                 mov     [esp+14Ch+var_12C], esi
.text:0041CC66
.text:0041CC66 loc_41CC66:                             ; CODE XREF: __quicksort+322↑j
.text:0041CC66                 mov     [esp+14Ch+var_128], edi
.text:0041CC6A                 jmp     short loc_41CC15
.text:0041CC6C ; ---------------------------------------------------------------------------
.text:0041CC6C
.text:0041CC6C loc_41CC6C:                             ; CODE XREF: __quicksort+2AD↑j
.text:0041CC6C                 mov     [esp+14Ch+var_130], ebp
.text:0041CC70                 jmp     loc_41CBC3
.text:0041CC75 ; ---------------------------------------------------------------------------
.text:0041CC75
.text:0041CC75 loc_41CC75:                             ; CODE XREF: __quicksort+2A3↑j
.text:0041CC75                 mov     [esp+14Ch+var_130], edi
.text:0041CC79                 jmp     loc_41CBC3
.text:0041CC7E ; ---------------------------------------------------------------------------
.text:0041CC7E
.text:0041CC7E loc_41CC7E:                             ; CODE XREF: __quicksort+273↑j
.text:0041CC7E                 cmp     ebp, edi
.text:0041CC80                 jnz     loc_41CBD5
.text:0041CC86                 mov     esi, [esp+14Ch+arg_8]
.text:0041CC8D                 lea     ebp, [esi+edi]
.text:0041CC90                 sub     edi, esi
.text:0041CC92                 jmp     loc_41CBDD
.text:0041CC97 ; ---------------------------------------------------------------------------
.text:0041CC97
.text:0041CC97 loc_41CC97:                             ; CODE XREF: __quicksort+244↑j
.text:0041CC97                 mov     edx, [esp+14Ch+arg_8]
.text:0041CC9E                 add     ebp, edx
.text:0041CCA0                 jmp     loc_41CB40
.text:0041CCA5 ; ---------------------------------------------------------------------------
.text:0041CCA5
.text:0041CCA5 loc_41CCA5:                             ; CODE XREF: __quicksort+20E↑j
.text:0041CCA5                 mov     esi, [esp+14Ch+arg_8]
.text:0041CCAC                 mov     ebx, [esp+14Ch+var_130]
.text:0041CCB0                 mov     ecx, [esp+14Ch+var_128]
.text:0041CCB4
.text:0041CCB4 loc_41CCB4:                             ; CODE XREF: __quicksort+3B1↓j
.text:0041CCB4                 movzx   edx, byte ptr [ebx]
.text:0041CCB7                 movzx   eax, byte ptr [ecx]
.text:0041CCBA                 mov     [ebx], al
.text:0041CCBC                 inc     ebx
.text:0041CCBD                 mov     [ecx], dl
.text:0041CCBF                 inc     ecx
.text:0041CCC0                 dec     esi
.text:0041CCC1                 jnz     short loc_41CCB4
.text:0041CCC3                 mov     ecx, [esp+14Ch+var_124]
.text:0041CCC7                 mov     esi, [esp+14Ch+var_130]
.text:0041CCCB                 mov     [esp+14Ch+var_148], ecx
.text:0041CCCF                 mov     [esp+14Ch+var_14C], esi
.text:0041CCD2                 call    [esp+14Ch+arg_C]
.text:0041CCD9                 test    eax, eax
.text:0041CCDB                 jns     loc_41CB24
.text:0041CCE1                 mov     esi, [esp+14Ch+arg_8]
.text:0041CCE8                 mov     ebx, [esp+14Ch+var_130]
.text:0041CCEC                 mov     ecx, [esp+14Ch+var_124]
.text:0041CCF0
.text:0041CCF0 loc_41CCF0:                             ; CODE XREF: __quicksort+3ED↓j
.text:0041CCF0                 movzx   edx, byte ptr [ebx]
.text:0041CCF3                 movzx   eax, byte ptr [ecx]
.text:0041CCF6                 mov     [ebx], al
.text:0041CCF8                 inc     ebx
.text:0041CCF9                 mov     [ecx], dl
.text:0041CCFB                 inc     ecx
.text:0041CCFC                 dec     esi
.text:0041CCFD                 jnz     short loc_41CCF0
.text:0041CCFF                 jmp     loc_41CB24
.text:0041CD04 ; ---------------------------------------------------------------------------
.text:0041CD04
.text:0041CD04 loc_41CD04:                             ; CODE XREF: __quicksort+1F0↑j
.text:0041CD04                 mov     esi, [esp+14Ch+arg_8]
.text:0041CD0B                 mov     ebx, [esp+14Ch+var_130]
.text:0041CD0F                 mov     ecx, [esp+14Ch+var_124]
.text:0041CD13
.text:0041CD13 loc_41CD13:                             ; CODE XREF: __quicksort+410↓j
.text:0041CD13                 movzx   edx, byte ptr [ebx]
.text:0041CD16                 movzx   eax, byte ptr [ecx]
.text:0041CD19                 mov     [ebx], al
.text:0041CD1B                 inc     ebx
.text:0041CD1C                 mov     [ecx], dl
.text:0041CD1E                 inc     ecx
.text:0041CD1F                 dec     esi
.text:0041CD20                 jnz     short loc_41CD13
.text:0041CD22                 jmp     loc_41CB06
.text:0041CD22 __quicksort     endp
.text:0041CD22
.text:0041CD22 ; ---------------------------------------------------------------------------
.text:0041CD27                 align 10h
.text:0041CD30
.text:0041CD30 ; =============== S U B R O U T I N E =======================================
.text:0041CD30
.text:0041CD30 ; Attributes: info_from_lumina
.text:0041CD30
.text:0041CD30 _sysconf        proc near               ; CODE XREF: sub_41A1F0+F7↑p
.text:0041CD30                                         ; sub_41A1F0+11E↑p
.text:0041CD30
.text:0041CD30 arg_0           = dword ptr  4
.text:0041CD30
.text:0041CD30                 sub     esp, 0Ch
.text:0041CD33                 mov     eax, [esp+0Ch+arg_0]
.text:0041CD37                 cmp     eax, 83h        ; switch 132 cases
.text:0041CD3C                 ja      def_41CD42      ; jumptable 67026652 default case, cases 50,56
.text:0041CD3C                                         ; jumptable 0041CD42 default case, cases 50,56
.text:0041CD42                 jmp     ds:jpt_41CD42[eax*4] ; switch jump
.text:0041CD42 ; ---------------------------------------------------------------------------
.text:0041CD49                 align 4
.text:0041CD4C jpt_41CD42      dd offset loc_41CF84, offset loc_41CF84, offset loc_41CF84
.text:0041CD4C                                         ; DATA XREF: _sysconf+12↑r
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C ; jump table for switch statement
.text:0041CD4C                 dd offset loc_41CF8B, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D038, offset loc_41CF70
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41CFA7, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset def_41CD42
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41CFAE, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset def_41CD42
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41CFB5, offset loc_41CFB5, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41CFBC
.text:0041CD4C                 dd offset loc_41CFC4, offset loc_41CFCC, offset loc_41CFD4
.text:0041CD4C                 dd offset loc_41CFEA, offset loc_41CFDC, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41CFE3
.text:0041CD4C                 dd offset loc_41D010, offset loc_41D01A, offset loc_41CFEA
.text:0041CD4C                 dd offset loc_41CFF1, offset loc_41CFF8, offset loc_41CFF8
.text:0041CD4C                 dd offset loc_41CFFF, offset loc_41D009, offset loc_41D024
.text:0041CD4C                 dd offset loc_41D010, offset loc_41D01A, offset loc_41D024
.text:0041CD4C                 dd offset loc_41D02E, offset loc_41D038, offset loc_41CF70
.text:0041CD4C                 dd offset loc_41CF70, offset loc_41D042, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CD4C                 dd offset loc_41D04C, offset loc_41D04C, offset loc_41D04C
.text:0041CF5C ; ---------------------------------------------------------------------------
.text:0041CF5C
.text:0041CF5C def_41CD42:                             ; CODE XREF: _sysconf+C↑j
.text:0041CF5C                                         ; _sysconf+12↑j
.text:0041CF5C                                         ; DATA XREF: ...
.text:0041CF5C                 call    _errno          ; jumptable 67026652 default case, cases 50,56
.text:0041CF5C                                         ; jumptable 0041CD42 default case, cases 50,56
.text:0041CF61                 mov     dword ptr [eax], 16h
.text:0041CF67                 mov     esi, esi
.text:0041CF69                 lea     edi, [edi+0]
.text:0041CF70
.text:0041CF70 loc_41CF70:                             ; CODE XREF: _sysconf+12↑j
.text:0041CF70                                         ; _sysconf+327↓j
.text:0041CF70                                         ; DATA XREF: ...
.text:0041CF70                 mov     eax, 0FFFFFFFFh ; jumptable 67026652 cases 41,116,117
.text:0041CF70                                         ; jumptable 0041CD42 cases 41,116,117
.text:0041CF75                 lea     esi, [esi+0]
.text:0041CF79                 lea     edi, [edi+0]
.text:0041CF80
.text:0041CF80 loc_41CF80:                             ; CODE XREF: _sysconf+259↓j
.text:0041CF80                                         ; _sysconf+26C↓j ...
.text:0041CF80                 add     esp, 0Ch
.text:0041CF83                 retn
.text:0041CF84 ; ---------------------------------------------------------------------------
.text:0041CF84
.text:0041CF84 loc_41CF84:                             ; CODE XREF: _sysconf+12↑j
.text:0041CF84                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CF84                 mov     eax, 989680h    ; jumptable 67026652 cases 0-2
.text:0041CF84                                         ; jumptable 0041CD42 cases 0-2
.text:0041CF89                 jmp     short loc_41CF80
.text:0041CF8B ; ---------------------------------------------------------------------------
.text:0041CF8B
.text:0041CF8B loc_41CF8B:                             ; CODE XREF: _sysconf+12↑j
.text:0041CF8B                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CF8B                 call    sub_426C80      ; jumptable 67026652 case 6
.text:0041CF8B                                         ; jumptable 0041CD42 case 6
.text:0041CF90                 cmp     eax, 6
.text:0041CF93                 mov     edx, 6
.text:0041CF98                 jg      short loc_41CF9E
.text:0041CF9A
.text:0041CF9A loc_41CF9A:                             ; CODE XREF: _sysconf+275↓j
.text:0041CF9A                 mov     eax, edx
.text:0041CF9C                 jmp     short loc_41CF80
.text:0041CF9E ; ---------------------------------------------------------------------------
.text:0041CF9E
.text:0041CF9E loc_41CF9E:                             ; CODE XREF: _sysconf+268↑j
.text:0041CF9E                 call    sub_426C80
.text:0041CFA3                 mov     edx, eax
.text:0041CFA5                 jmp     short loc_41CF9A
.text:0041CFA7 ; ---------------------------------------------------------------------------
.text:0041CFA7
.text:0041CFA7 loc_41CFA7:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFA7                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFA7                 mov     eax, 800h       ; jumptable 67026652 case 45
.text:0041CFA7                                         ; jumptable 0041CD42 case 45
.text:0041CFAC                 jmp     short loc_41CF80
.text:0041CFAE ; ---------------------------------------------------------------------------
.text:0041CFAE
.text:0041CFAE loc_41CFAE:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFAE                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFAE                 mov     eax, 1          ; jumptable 67026652 case 52
.text:0041CFAE                                         ; jumptable 0041CD42 case 52
.text:0041CFB3                 jmp     short loc_41CF80
.text:0041CFB5 ; ---------------------------------------------------------------------------
.text:0041CFB5
.text:0041CFB5 loc_41CFB5:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFB5                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFB5                 mov     eax, 400h       ; jumptable 67026652 cases 69,70
.text:0041CFB5                                         ; jumptable 0041CD42 cases 69,70
.text:0041CFBA                 jmp     short loc_41CF80
.text:0041CFBC ; ---------------------------------------------------------------------------
.text:0041CFBC
.text:0041CFBC loc_41CFBC:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFBC                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFBC                 add     esp, 0Ch        ; jumptable 67026652 case 83
.text:0041CFBC                                         ; jumptable 0041CD42 case 83
.text:0041CFBF                 jmp     sub_426B70
.text:0041CFC4 ; ---------------------------------------------------------------------------
.text:0041CFC4
.text:0041CFC4 loc_41CFC4:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFC4                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFC4                 add     esp, 0Ch        ; jumptable 67026652 case 84
.text:0041CFC4                                         ; jumptable 0041CD42 case 84
.text:0041CFC7                 jmp     sub_426B20
.text:0041CFCC ; ---------------------------------------------------------------------------
.text:0041CFCC
.text:0041CFCC loc_41CFCC:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFCC                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFCC                 add     esp, 0Ch        ; jumptable 67026652 case 85
.text:0041CFCC                                         ; jumptable 0041CD42 case 85
.text:0041CFCF                 jmp     sub_426BC0
.text:0041CFD4 ; ---------------------------------------------------------------------------
.text:0041CFD4
.text:0041CFD4 loc_41CFD4:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFD4                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFD4                 add     esp, 0Ch        ; jumptable 67026652 case 86
.text:0041CFD4                                         ; jumptable 0041CD42 case 86
.text:0041CFD7                 jmp     sub_426C20
.text:0041CFDC ; ---------------------------------------------------------------------------
.text:0041CFDC
.text:0041CFDC loc_41CFDC:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFDC                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFDC                 mov     eax, 200h       ; jumptable 67026652 case 88
.text:0041CFDC                                         ; jumptable 0041CD42 case 88
.text:0041CFE1                 jmp     short loc_41CF80
.text:0041CFE3 ; ---------------------------------------------------------------------------
.text:0041CFE3
.text:0041CFE3 loc_41CFE3:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFE3                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFE3                 mov     eax, 8          ; jumptable 67026652 case 101
.text:0041CFE3                                         ; jumptable 0041CD42 case 101
.text:0041CFE8                 jmp     short loc_41CF80
.text:0041CFEA ; ---------------------------------------------------------------------------
.text:0041CFEA
.text:0041CFEA loc_41CFEA:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFEA                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFEA                 mov     eax, 7FFFFFFFh  ; jumptable 67026652 cases 87,104
.text:0041CFEA                                         ; jumptable 0041CD42 cases 87,104
.text:0041CFEF                 jmp     short loc_41CF80
.text:0041CFF1 ; ---------------------------------------------------------------------------
.text:0041CFF1
.text:0041CFF1 loc_41CFF1:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFF1                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFF1                 mov     eax, 80000000h  ; jumptable 67026652 case 105
.text:0041CFF1                                         ; jumptable 0041CD42 case 105
.text:0041CFF6                 jmp     short loc_41CF80
.text:0041CFF8 ; ---------------------------------------------------------------------------
.text:0041CFF8
.text:0041CFF8 loc_41CFF8:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFF8                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFF8                 mov     eax, 20h ; ' '  ; jumptable 67026652 cases 106,107
.text:0041CFF8                                         ; jumptable 0041CD42 cases 106,107
.text:0041CFFD                 jmp     short loc_41CF80
.text:0041CFFF ; ---------------------------------------------------------------------------
.text:0041CFFF
.text:0041CFFF loc_41CFFF:                             ; CODE XREF: _sysconf+12↑j
.text:0041CFFF                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041CFFF                 mov     eax, 2          ; jumptable 67026652 case 108
.text:0041CFFF                                         ; jumptable 0041CD42 case 108
.text:0041D004                 jmp     loc_41CF80
.text:0041D009 ; ---------------------------------------------------------------------------
.text:0041D009
.text:0041D009 loc_41D009:                             ; CODE XREF: _sysconf+12↑j
.text:0041D009                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D009                 xor     eax, eax        ; jumptable 67026652 case 109
.text:0041D009                                         ; jumptable 0041CD42 case 109
.text:0041D00B                 jmp     loc_41CF80
.text:0041D010 ; ---------------------------------------------------------------------------
.text:0041D010
.text:0041D010 loc_41D010:                             ; CODE XREF: _sysconf+12↑j
.text:0041D010                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D010                 mov     eax, 7Fh        ; jumptable 67026652 cases 102,111
.text:0041D010                                         ; jumptable 0041CD42 cases 102,111
.text:0041D015                 jmp     loc_41CF80
.text:0041D01A ; ---------------------------------------------------------------------------
.text:0041D01A
.text:0041D01A loc_41D01A:                             ; CODE XREF: _sysconf+12↑j
.text:0041D01A                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D01A                 mov     eax, 0FFFFFF80h ; jumptable 67026652 cases 103,112
.text:0041D01A                                         ; jumptable 0041CD42 cases 103,112
.text:0041D01F                 jmp     loc_41CF80
.text:0041D024 ; ---------------------------------------------------------------------------
.text:0041D024
.text:0041D024 loc_41D024:                             ; CODE XREF: _sysconf+12↑j
.text:0041D024                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D024                 mov     eax, 7FFFh      ; jumptable 67026652 cases 110,113
.text:0041D024                                         ; jumptable 0041CD42 cases 110,113
.text:0041D029                 jmp     loc_41CF80
.text:0041D02E ; ---------------------------------------------------------------------------
.text:0041D02E
.text:0041D02E loc_41D02E:                             ; CODE XREF: _sysconf+12↑j
.text:0041D02E                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D02E                 mov     eax, 0FFFF8000h ; jumptable 67026652 case 114
.text:0041D02E                                         ; jumptable 0041CD42 case 114
.text:0041D033                 jmp     loc_41CF80
.text:0041D038 ; ---------------------------------------------------------------------------
.text:0041D038
.text:0041D038 loc_41D038:                             ; CODE XREF: _sysconf+12↑j
.text:0041D038                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D038                 mov     eax, 0FFh       ; jumptable 67026652 cases 40,115
.text:0041D038                                         ; jumptable 0041CD42 cases 40,115
.text:0041D03D                 jmp     loc_41CF80
.text:0041D042 ; ---------------------------------------------------------------------------
.text:0041D042
.text:0041D042 loc_41D042:                             ; CODE XREF: _sysconf+12↑j
.text:0041D042                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D042                 mov     eax, 0FFFFh     ; jumptable 67026652 case 118
.text:0041D042                                         ; jumptable 0041CD42 case 118
.text:0041D047                 jmp     loc_41CF80
.text:0041D04C ; ---------------------------------------------------------------------------
.text:0041D04C
.text:0041D04C loc_41D04C:                             ; CODE XREF: _sysconf+12↑j
.text:0041D04C                                         ; DATA XREF: _sysconf:jpt_41CD42↑o
.text:0041D04C                 call    _errno          ; jumptable 67026652 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0041D04C                                         ; jumptable 0041CD42 cases 3-5,7-39,42-44,46-49,51,53-55,57-68,71-82,89-100,119-131
.text:0041D051                 mov     dword ptr [eax], 28h ; '('
.text:0041D057                 jmp     loc_41CF70      ; jumptable 67026652 cases 41,116,117
.text:0041D057 _sysconf        endp                    ; jumptable 0041CD42 cases 41,116,117
.text:0041D057
.text:0041D057 ; ---------------------------------------------------------------------------
.text:0041D05C                 align 10h
.text:0041D060
.text:0041D060 ; =============== S U B R O U T I N E =======================================
.text:0041D060
.text:0041D060
.text:0041D060 sub_41D060      proc near               ; CODE XREF: sub_41A710+17↑p
.text:0041D060
.text:0041D060 hFindFile       = dword ptr -0Ch
.text:0041D060 var_8           = dword ptr -8
.text:0041D060 var_4           = dword ptr -4
.text:0041D060 arg_0           = dword ptr  4
.text:0041D060
.text:0041D060                 sub     esp, 0Ch
.text:0041D063                 mov     [esp+0Ch+var_4], esi
.text:0041D067                 mov     esi, [esp+0Ch+arg_0]
.text:0041D06B                 mov     [esp+0Ch+var_8], ebx
.text:0041D06F                 test    esi, esi
.text:0041D071                 jz      short loc_41D0B2
.text:0041D073                 mov     eax, [esi]
.text:0041D075                 cmp     eax, 0FFFFFFFFh
.text:0041D078                 jz      short loc_41D08F
.text:0041D07A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041D07D                 call    FindClose
.text:0041D082                 sub     esp, 4
.text:0041D085                 test    eax, eax
.text:0041D087                 jz      short loc_41D0A2
.text:0041D089
.text:0041D089 loc_41D089:                             ; CODE XREF: sub_41D060+50↓j
.text:0041D089                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041D08F
.text:0041D08F loc_41D08F:                             ; CODE XREF: sub_41D060+18↑j
.text:0041D08F                 mov     dword ptr [esi+14h], 1
.text:0041D096
.text:0041D096 loc_41D096:                             ; CODE XREF: sub_41D060+5D↓j
.text:0041D096                 mov     ebx, [esp+0Ch+var_8]
.text:0041D09A                 mov     esi, [esp+0Ch+var_4]
.text:0041D09E                 add     esp, 0Ch
.text:0041D0A1                 retn
.text:0041D0A2 ; ---------------------------------------------------------------------------
.text:0041D0A2
.text:0041D0A2 loc_41D0A2:                             ; CODE XREF: sub_41D060+27↑j
.text:0041D0A2                 call    sub_41AD20
.text:0041D0A7                 mov     ebx, eax
.text:0041D0A9                 call    _errno
.text:0041D0AE                 mov     [eax], ebx
.text:0041D0B0                 jmp     short loc_41D089
.text:0041D0B2 ; ---------------------------------------------------------------------------
.text:0041D0B2
.text:0041D0B2 loc_41D0B2:                             ; CODE XREF: sub_41D060+11↑j
.text:0041D0B2                 call    _errno
.text:0041D0B7                 mov     dword ptr [eax], 16h
.text:0041D0BD                 jmp     short loc_41D096
.text:0041D0BD sub_41D060      endp
.text:0041D0BD
.text:0041D0BD ; ---------------------------------------------------------------------------
.text:0041D0BF                 align 10h
.text:0041D0C0
.text:0041D0C0 ; =============== S U B R O U T I N E =======================================
.text:0041D0C0
.text:0041D0C0
.text:0041D0C0 sub_41D0C0      proc near               ; CODE XREF: sub_41A930+4F↑p
.text:0041D0C0
.text:0041D0C0 var_8           = dword ptr -8
.text:0041D0C0 var_4           = dword ptr -4
.text:0041D0C0 arg_0           = dword ptr  4
.text:0041D0C0 arg_4           = dword ptr  8
.text:0041D0C0 arg_8           = dword ptr  0Ch
.text:0041D0C0
.text:0041D0C0                 sub     esp, 8
.text:0041D0C3                 mov     ecx, [esp+8+arg_0]
.text:0041D0C7                 mov     [esp+8+var_8], ebx
.text:0041D0CA                 mov     ebx, [esp+8+arg_8]
.text:0041D0CE                 mov     [esp+8+var_4], esi
.text:0041D0D2                 mov     edx, [esp+8+arg_4]
.text:0041D0D6                 mov     eax, ebx
.text:0041D0D8                 and     eax, 7
.text:0041D0DB                 cmp     eax, 7          ; switch 8 cases
.text:0041D0DE                 ja      short def_41D0E0 ; jumptable 0041D0E0 default case
.text:0041D0E0                 jmp     ds:jpt_41D0E0[eax*4] ; switch jump
.text:0041D0E0 ; ---------------------------------------------------------------------------
.text:0041D0E7                 align 4
.text:0041D0E8 jpt_41D0E0      dd offset loc_41D16A    ; DATA XREF: sub_41D0C0+20↑r
.text:0041D0E8                 dd offset loc_41D171    ; jump table for switch statement
.text:0041D0E8                 dd offset loc_41D108
.text:0041D0E8                 dd offset loc_41D179
.text:0041D0E8                 dd offset loc_41D186
.text:0041D0E8                 dd offset loc_41D193
.text:0041D0E8                 dd offset loc_41D1A0
.text:0041D0E8                 dd offset loc_41D1AD
.text:0041D108 ; ---------------------------------------------------------------------------
.text:0041D108
.text:0041D108 loc_41D108:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D108                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D108                 mov     eax, [edx]      ; jumptable 0041D0E0 case 2
.text:0041D10A                 sub     ecx, 1Ch
.text:0041D10D                 add     ebx, 6
.text:0041D110                 sub     edx, 18h
.text:0041D113                 lea     esi, [esi+0]
.text:0041D119                 lea     edi, [edi+0]
.text:0041D120
.text:0041D120 loc_41D120:                             ; CODE XREF: sub_41D0C0+A8↓j
.text:0041D120                 mov     esi, [edx+1Ch]
.text:0041D123                 add     edx, 20h ; ' '
.text:0041D126                 mov     [ecx+1Ch], eax
.text:0041D129                 add     ecx, 20h ; ' '
.text:0041D12C                 sub     ebx, 8
.text:0041D12F                 jnz     short def_41D0E0 ; jumptable 0041D0E0 default case
.text:0041D131                 mov     [ecx], esi
.text:0041D133                 mov     ebx, [esp+8+var_8]
.text:0041D136                 mov     esi, [esp+8+var_4]
.text:0041D13A                 add     esp, 8
.text:0041D13D                 retn
.text:0041D13D ; ---------------------------------------------------------------------------
.text:0041D13E                 align 10h
.text:0041D140
.text:0041D140 def_41D0E0:                             ; CODE XREF: sub_41D0C0+1E↑j
.text:0041D140                                         ; sub_41D0C0+6F↑j ...
.text:0041D140                 mov     eax, [edx]      ; jumptable 0041D0E0 default case
.text:0041D142                 mov     [ecx], esi
.text:0041D144
.text:0041D144 loc_41D144:                             ; CODE XREF: sub_41D0C0+AF↓j
.text:0041D144                 mov     esi, [edx+4]
.text:0041D147                 mov     [ecx+4], eax
.text:0041D14A
.text:0041D14A loc_41D14A:                             ; CODE XREF: sub_41D0C0+F6↓j
.text:0041D14A                 mov     eax, [edx+8]
.text:0041D14D                 mov     [ecx+8], esi
.text:0041D150
.text:0041D150 loc_41D150:                             ; CODE XREF: sub_41D0C0+EB↓j
.text:0041D150                 mov     esi, [edx+0Ch]
.text:0041D153                 mov     [ecx+0Ch], eax
.text:0041D156
.text:0041D156 loc_41D156:                             ; CODE XREF: sub_41D0C0+DE↓j
.text:0041D156                 mov     eax, [edx+10h]
.text:0041D159                 mov     [ecx+10h], esi
.text:0041D15C
.text:0041D15C loc_41D15C:                             ; CODE XREF: sub_41D0C0+D1↓j
.text:0041D15C                 mov     esi, [edx+14h]
.text:0041D15F                 mov     [ecx+14h], eax
.text:0041D162
.text:0041D162 loc_41D162:                             ; CODE XREF: sub_41D0C0+C4↓j
.text:0041D162                 mov     eax, [edx+18h]
.text:0041D165                 mov     [ecx+18h], esi
.text:0041D168                 jmp     short loc_41D120
.text:0041D16A ; ---------------------------------------------------------------------------
.text:0041D16A
.text:0041D16A loc_41D16A:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D16A                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D16A                 mov     eax, [edx]      ; jumptable 0041D0E0 case 0
.text:0041D16C                 sub     ecx, 4
.text:0041D16F                 jmp     short loc_41D144
.text:0041D171 ; ---------------------------------------------------------------------------
.text:0041D171
.text:0041D171 loc_41D171:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D171                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D171                 mov     esi, [edx]      ; jumptable 0041D0E0 case 1
.text:0041D173                 dec     ebx
.text:0041D174                 add     edx, 4
.text:0041D177                 jmp     short def_41D0E0 ; jumptable 0041D0E0 default case
.text:0041D179 ; ---------------------------------------------------------------------------
.text:0041D179
.text:0041D179 loc_41D179:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D179                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D179                 mov     esi, [edx]      ; jumptable 0041D0E0 case 3
.text:0041D17B                 sub     ecx, 18h
.text:0041D17E                 add     ebx, 5
.text:0041D181                 sub     edx, 14h
.text:0041D184                 jmp     short loc_41D162
.text:0041D186 ; ---------------------------------------------------------------------------
.text:0041D186
.text:0041D186 loc_41D186:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D186                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D186                 mov     eax, [edx]      ; jumptable 0041D0E0 case 4
.text:0041D188                 sub     ecx, 14h
.text:0041D18B                 add     ebx, 4
.text:0041D18E                 sub     edx, 10h
.text:0041D191                 jmp     short loc_41D15C
.text:0041D193 ; ---------------------------------------------------------------------------
.text:0041D193
.text:0041D193 loc_41D193:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D193                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D193                 mov     esi, [edx]      ; jumptable 0041D0E0 case 5
.text:0041D195                 sub     ecx, 10h
.text:0041D198                 add     ebx, 3
.text:0041D19B                 sub     edx, 0Ch
.text:0041D19E                 jmp     short loc_41D156
.text:0041D1A0 ; ---------------------------------------------------------------------------
.text:0041D1A0
.text:0041D1A0 loc_41D1A0:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D1A0                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D1A0                 mov     eax, [edx]      ; jumptable 0041D0E0 case 6
.text:0041D1A2                 sub     ecx, 0Ch
.text:0041D1A5                 add     ebx, 2
.text:0041D1A8                 sub     edx, 8
.text:0041D1AB                 jmp     short loc_41D150
.text:0041D1AD ; ---------------------------------------------------------------------------
.text:0041D1AD
.text:0041D1AD loc_41D1AD:                             ; CODE XREF: sub_41D0C0+20↑j
.text:0041D1AD                                         ; DATA XREF: sub_41D0C0:jpt_41D0E0↑o
.text:0041D1AD                 mov     esi, [edx]      ; jumptable 0041D0E0 case 7
.text:0041D1AF                 sub     ecx, 8
.text:0041D1B2                 inc     ebx
.text:0041D1B3                 sub     edx, 4
.text:0041D1B6                 jmp     short loc_41D14A
.text:0041D1B6 sub_41D0C0      endp
.text:0041D1B6
.text:0041D1B6 ; ---------------------------------------------------------------------------
.text:0041D1B8                 align 10h
.text:0041D1C0
.text:0041D1C0 ; =============== S U B R O U T I N E =======================================
.text:0041D1C0
.text:0041D1C0
.text:0041D1C0 sub_41D1C0      proc near               ; CODE XREF: sub_41A930+93↑p
.text:0041D1C0
.text:0041D1C0 var_1C          = dword ptr -1Ch
.text:0041D1C0 var_18          = dword ptr -18h
.text:0041D1C0 var_14          = dword ptr -14h
.text:0041D1C0 arg_0           = dword ptr  4
.text:0041D1C0 arg_4           = dword ptr  8
.text:0041D1C0 arg_8           = dword ptr  0Ch
.text:0041D1C0
.text:0041D1C0                 push    ebp
.text:0041D1C1                 push    edi
.text:0041D1C2                 push    esi
.text:0041D1C3                 push    ebx
.text:0041D1C4                 sub     esp, 0Ch
.text:0041D1C7                 mov     edx, [esp+1Ch+arg_4]
.text:0041D1CB                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0041D1D3                 mov     eax, [esp+1Ch+arg_8]
.text:0041D1D7                 mov     esi, [esp+1Ch+arg_0]
.text:0041D1DB                 mov     ecx, edx
.text:0041D1DD                 and     ecx, 3
.text:0041D1E0                 and     eax, 3
.text:0041D1E3                 shl     ecx, 3
.text:0041D1E6                 and     edx, 0FFFFFFFCh
.text:0041D1E9                 sub     [esp+1Ch+var_14], ecx
.text:0041D1ED                 cmp     eax, 1
.text:0041D1F0                 mov     [esp+1Ch+var_18], ecx
.text:0041D1F4                 jz      loc_41D2E0
.text:0041D1FA                 cmp     eax, 1
.text:0041D1FD                 jb      loc_41D2D0
.text:0041D203                 cmp     eax, 2
.text:0041D206                 jz      loc_41D2B4
.text:0041D20C                 cmp     eax, 3
.text:0041D20F                 jz      loc_41D2A3
.text:0041D215
.text:0041D215 loc_41D215:                             ; CODE XREF: sub_41D1C0+C7↓j
.text:0041D215                                         ; sub_41D1C0+12C↓j
.text:0041D215                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041D21A                 mov     eax, edi
.text:0041D21C                 mov     ebx, [edx]
.text:0041D21E                 shr     ebp, cl
.text:0041D220                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041D225                 shl     eax, cl
.text:0041D227                 or      ebp, eax
.text:0041D229                 mov     [esi], ebp
.text:0041D22B
.text:0041D22B loc_41D22B:                             ; CODE XREF: sub_41D1C0+11B↓j
.text:0041D22B                 mov     ecx, [edx+4]
.text:0041D22E                 mov     ebp, ebx
.text:0041D230                 mov     [esp+1Ch+var_1C], ecx
.text:0041D233                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041D238                 shr     edi, cl
.text:0041D23A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041D23F                 shl     ebp, cl
.text:0041D241                 or      edi, ebp
.text:0041D243                 mov     [esi+4], edi
.text:0041D246
.text:0041D246 loc_41D246:                             ; CODE XREF: sub_41D1C0+F2↓j
.text:0041D246                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041D24B                 mov     edi, [esp+1Ch+var_1C]
.text:0041D24E                 mov     ebp, [edx+8]
.text:0041D251                 shr     ebx, cl
.text:0041D253                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041D258                 shl     edi, cl
.text:0041D25A                 or      ebx, edi
.text:0041D25C                 mov     [esi+8], ebx
.text:0041D25F
.text:0041D25F loc_41D25F:                             ; CODE XREF: sub_41D1C0+107↓j
.text:0041D25F                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041D264                 mov     ebx, ebp
.text:0041D266                 mov     edi, [edx+0Ch]
.text:0041D269                 add     edx, 10h
.text:0041D26C                 shr     [esp+1Ch+var_1C], cl
.text:0041D26F                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041D274                 shl     ebx, cl
.text:0041D276                 or      [esp+1Ch+var_1C], ebx
.text:0041D279                 mov     ebx, [esp+1Ch+var_1C]
.text:0041D27C                 mov     [esi+0Ch], ebx
.text:0041D27F                 add     esi, 10h
.text:0041D282                 sub     [esp+1Ch+arg_8], 4
.text:0041D287                 jnz     short loc_41D215
.text:0041D289                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041D28E                 shr     ebp, cl
.text:0041D290                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041D295                 shl     edi, cl
.text:0041D297                 or      ebp, edi
.text:0041D299                 mov     [esi], ebp
.text:0041D29B                 add     esp, 0Ch
.text:0041D29E                 pop     ebx
.text:0041D29F                 pop     esi
.text:0041D2A0                 pop     edi
.text:0041D2A1                 pop     ebp
.text:0041D2A2                 retn
.text:0041D2A3 ; ---------------------------------------------------------------------------
.text:0041D2A3
.text:0041D2A3 loc_41D2A3:                             ; CODE XREF: sub_41D1C0+4F↑j
.text:0041D2A3                 inc     [esp+1Ch+arg_8]
.text:0041D2A7                 sub     esi, 8
.text:0041D2AA                 mov     eax, [edx+4]
.text:0041D2AD                 mov     ebx, [edx]
.text:0041D2AF                 mov     [esp+1Ch+var_1C], eax
.text:0041D2B2                 jmp     short loc_41D246
.text:0041D2B4 ; ---------------------------------------------------------------------------
.text:0041D2B4
.text:0041D2B4 loc_41D2B4:                             ; CODE XREF: sub_41D1C0+46↑j
.text:0041D2B4                 add     [esp+1Ch+arg_8], 2
.text:0041D2B9                 sub     esi, 0Ch
.text:0041D2BC                 mov     ecx, [edx]
.text:0041D2BE                 mov     ebp, [edx+4]
.text:0041D2C1                 sub     edx, 4
.text:0041D2C4                 mov     [esp+1Ch+var_1C], ecx
.text:0041D2C7                 jmp     short loc_41D25F
.text:0041D2C7 ; ---------------------------------------------------------------------------
.text:0041D2C9                 align 10h
.text:0041D2D0
.text:0041D2D0 loc_41D2D0:                             ; CODE XREF: sub_41D1C0+3D↑j
.text:0041D2D0                 mov     edi, [edx]
.text:0041D2D2                 sub     esi, 4
.text:0041D2D5                 mov     ebx, [edx+4]
.text:0041D2D8                 add     edx, 4
.text:0041D2DB                 jmp     loc_41D22B
.text:0041D2E0 ; ---------------------------------------------------------------------------
.text:0041D2E0
.text:0041D2E0 loc_41D2E0:                             ; CODE XREF: sub_41D1C0+34↑j
.text:0041D2E0                 dec     [esp+1Ch+arg_8]
.text:0041D2E4                 mov     ebp, [edx]
.text:0041D2E6                 mov     edi, [edx+4]
.text:0041D2E9                 add     edx, 8
.text:0041D2EC                 jmp     loc_41D215
.text:0041D2EC sub_41D1C0      endp
.text:0041D2EC
.text:0041D2F1 ; ---------------------------------------------------------------------------
.text:0041D2F1                 jmp     short loc_41D300
.text:0041D2F1 ; ---------------------------------------------------------------------------
.text:0041D2F3                 align 10h
.text:0041D300
.text:0041D300 loc_41D300:                             ; CODE XREF: .text:0041D2F1↑j
.text:0041D300                 sub     esp, 8
.text:0041D303                 mov     ecx, [esp+0Ch]
.text:0041D307                 mov     [esp+4], esi
.text:0041D30B                 mov     esi, [esp+14h]
.text:0041D30F                 mov     [esp], ebx
.text:0041D312                 mov     edx, [esp+10h]
.text:0041D316                 mov     eax, esi
.text:0041D318                 and     eax, 7
.text:0041D31B                 cmp     eax, 7          ; switch 8 cases
.text:0041D31E                 ja      short def_41D320 ; jumptable 0041D320 default case
.text:0041D320                 jmp     ds:jpt_41D320[eax*4] ; switch jump
.text:0041D320 ; ---------------------------------------------------------------------------
.text:0041D327                 align 4
.text:0041D328 jpt_41D320      dd offset loc_41D3AC    ; DATA XREF: .text:0041D320↑r
.text:0041D328                 dd offset loc_41D3B7    ; jump table for switch statement
.text:0041D328                 dd offset loc_41D348
.text:0041D328                 dd offset loc_41D3C3
.text:0041D328                 dd offset loc_41D3D1
.text:0041D328                 dd offset loc_41D3DF
.text:0041D328                 dd offset loc_41D3ED
.text:0041D328                 dd offset loc_41D3FB
.text:0041D348 ; ---------------------------------------------------------------------------
.text:0041D348
.text:0041D348 loc_41D348:                             ; CODE XREF: .text:0041D320↑j
.text:0041D348                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D348                 sub     edx, 8          ; jumptable 0041D320 case 2
.text:0041D34B                 sub     ecx, 4
.text:0041D34E                 mov     eax, [edx+4]
.text:0041D351                 add     esi, 6
.text:0041D354                 lea     esi, [esi+0]
.text:0041D35A                 lea     edi, [edi+0]
.text:0041D360
.text:0041D360 loc_41D360:                             ; CODE XREF: .text:0041D3AA↓j
.text:0041D360                 mov     ebx, [edx]
.text:0041D362                 sub     edx, 20h ; ' '
.text:0041D365                 mov     [ecx], eax
.text:0041D367                 sub     ecx, 20h ; ' '
.text:0041D36A                 sub     esi, 8
.text:0041D36D                 jnz     short def_41D320 ; jumptable 0041D320 default case
.text:0041D36F                 mov     [ecx+1Ch], ebx
.text:0041D372                 mov     ebx, [esp]
.text:0041D375                 mov     esi, [esp+4]
.text:0041D379                 add     esp, 8
.text:0041D37C                 retn
.text:0041D37C ; ---------------------------------------------------------------------------
.text:0041D37D                 align 10h
.text:0041D380
.text:0041D380 def_41D320:                             ; CODE XREF: .text:0041D31E↑j
.text:0041D380                                         ; .text:0041D36D↑j ...
.text:0041D380                 mov     eax, [edx+1Ch]  ; jumptable 0041D320 default case
.text:0041D383                 mov     [ecx+1Ch], ebx
.text:0041D386
.text:0041D386 loc_41D386:                             ; CODE XREF: .text:0041D3B5↓j
.text:0041D386                 mov     ebx, [edx+18h]
.text:0041D389                 mov     [ecx+18h], eax
.text:0041D38C
.text:0041D38C loc_41D38C:                             ; CODE XREF: .text:0041D405↓j
.text:0041D38C                 mov     eax, [edx+14h]
.text:0041D38F                 mov     [ecx+14h], ebx
.text:0041D392
.text:0041D392 loc_41D392:                             ; CODE XREF: .text:0041D3F9↓j
.text:0041D392                 mov     ebx, [edx+10h]
.text:0041D395                 mov     [ecx+10h], eax
.text:0041D398
.text:0041D398 loc_41D398:                             ; CODE XREF: .text:0041D3EB↓j
.text:0041D398                 mov     eax, [edx+0Ch]
.text:0041D39B                 mov     [ecx+0Ch], ebx
.text:0041D39E
.text:0041D39E loc_41D39E:                             ; CODE XREF: .text:0041D3DD↓j
.text:0041D39E                 mov     ebx, [edx+8]
.text:0041D3A1                 mov     [ecx+8], eax
.text:0041D3A4
.text:0041D3A4 loc_41D3A4:                             ; CODE XREF: .text:0041D3CF↓j
.text:0041D3A4                 mov     eax, [edx+4]
.text:0041D3A7                 mov     [ecx+4], ebx
.text:0041D3AA                 jmp     short loc_41D360
.text:0041D3AC ; ---------------------------------------------------------------------------
.text:0041D3AC
.text:0041D3AC loc_41D3AC:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3AC                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3AC                 sub     edx, 20h ; ' '  ; jumptable 0041D320 case 0
.text:0041D3AF                 sub     ecx, 1Ch
.text:0041D3B2                 mov     eax, [edx+1Ch]
.text:0041D3B5                 jmp     short loc_41D386
.text:0041D3B7 ; ---------------------------------------------------------------------------
.text:0041D3B7
.text:0041D3B7 loc_41D3B7:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3B7                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3B7                 sub     edx, 24h ; '$'  ; jumptable 0041D320 case 1
.text:0041D3BA                 sub     ecx, 20h ; ' '
.text:0041D3BD                 mov     ebx, [edx+20h]
.text:0041D3C0                 dec     esi
.text:0041D3C1                 jmp     short def_41D320 ; jumptable 0041D320 default case
.text:0041D3C3 ; ---------------------------------------------------------------------------
.text:0041D3C3
.text:0041D3C3 loc_41D3C3:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3C3                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3C3                 sub     edx, 0Ch        ; jumptable 0041D320 case 3
.text:0041D3C6                 sub     ecx, 8
.text:0041D3C9                 mov     ebx, [edx+8]
.text:0041D3CC                 add     esi, 5
.text:0041D3CF                 jmp     short loc_41D3A4
.text:0041D3D1 ; ---------------------------------------------------------------------------
.text:0041D3D1
.text:0041D3D1 loc_41D3D1:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3D1                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3D1                 sub     edx, 10h        ; jumptable 0041D320 case 4
.text:0041D3D4                 sub     ecx, 0Ch
.text:0041D3D7                 mov     eax, [edx+0Ch]
.text:0041D3DA                 add     esi, 4
.text:0041D3DD                 jmp     short loc_41D39E
.text:0041D3DF ; ---------------------------------------------------------------------------
.text:0041D3DF
.text:0041D3DF loc_41D3DF:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3DF                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3DF                 sub     edx, 14h        ; jumptable 0041D320 case 5
.text:0041D3E2                 sub     ecx, 10h
.text:0041D3E5                 mov     ebx, [edx+10h]
.text:0041D3E8                 add     esi, 3
.text:0041D3EB                 jmp     short loc_41D398
.text:0041D3ED ; ---------------------------------------------------------------------------
.text:0041D3ED
.text:0041D3ED loc_41D3ED:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3ED                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3ED                 sub     edx, 18h        ; jumptable 0041D320 case 6
.text:0041D3F0                 sub     ecx, 14h
.text:0041D3F3                 mov     eax, [edx+14h]
.text:0041D3F6                 add     esi, 2
.text:0041D3F9                 jmp     short loc_41D392
.text:0041D3FB ; ---------------------------------------------------------------------------
.text:0041D3FB
.text:0041D3FB loc_41D3FB:                             ; CODE XREF: .text:0041D320↑j
.text:0041D3FB                                         ; DATA XREF: .text:jpt_41D320↑o
.text:0041D3FB                 sub     edx, 1Ch        ; jumptable 0041D320 case 7
.text:0041D3FE                 sub     ecx, 18h
.text:0041D401                 mov     ebx, [edx+18h]
.text:0041D404                 inc     esi
.text:0041D405                 jmp     short loc_41D38C
.text:0041D405 ; ---------------------------------------------------------------------------
.text:0041D407                 align 10h
.text:0041D410                 push    ebp
.text:0041D411                 push    edi
.text:0041D412                 push    esi
.text:0041D413                 push    ebx
.text:0041D414                 sub     esp, 8
.text:0041D417                 mov     edx, [esp+20h]
.text:0041D41B                 mov     dword ptr [esp+4], 20h ; ' '
.text:0041D423                 mov     eax, [esp+24h]
.text:0041D427                 mov     ecx, edx
.text:0041D429                 and     ecx, 3
.text:0041D42C                 and     eax, 3
.text:0041D42F                 shl     ecx, 3
.text:0041D432                 sub     [esp+4], ecx
.text:0041D436                 and     edx, 0FFFFFFFCh
.text:0041D439                 add     edx, 4
.text:0041D43C                 mov     [esp], ecx
.text:0041D43F                 cmp     eax, 1
.text:0041D442                 jz      loc_41D538
.text:0041D448                 cmp     eax, 1
.text:0041D44B                 jb      loc_41D525
.text:0041D451                 cmp     eax, 2
.text:0041D454                 jz      loc_41D510
.text:0041D45A                 cmp     eax, 3
.text:0041D45D                 jz      loc_41D4FC
.text:0041D463
.text:0041D463 loc_41D463:                             ; CODE XREF: .text:0041D4DC↓j
.text:0041D463                                         ; .text:0041D54A↓j
.text:0041D463                 movzx   ecx, byte ptr [esp]
.text:0041D467                 mov     eax, edi
.text:0041D469                 mov     ebx, [esp+1Ch]
.text:0041D46D                 mov     esi, [edx+0Ch]
.text:0041D470                 shr     eax, cl
.text:0041D472                 movzx   ecx, byte ptr [esp+4]
.text:0041D477                 shl     ebp, cl
.text:0041D479                 or      eax, ebp
.text:0041D47B                 mov     [ebx+0Ch], eax
.text:0041D47E
.text:0041D47E loc_41D47E:                             ; CODE XREF: .text:0041D533↓j
.text:0041D47E                 movzx   ecx, byte ptr [esp]
.text:0041D482                 mov     ebp, esi
.text:0041D484                 mov     ebx, [edx+8]
.text:0041D487                 shr     ebp, cl
.text:0041D489                 movzx   ecx, byte ptr [esp+4]
.text:0041D48E                 shl     edi, cl
.text:0041D490                 or      ebp, edi
.text:0041D492                 mov     edi, [esp+1Ch]
.text:0041D496                 mov     [edi+8], ebp
.text:0041D499
.text:0041D499 loc_41D499:                             ; CODE XREF: .text:0041D50E↓j
.text:0041D499                 movzx   ecx, byte ptr [esp]
.text:0041D49D                 mov     edi, ebx
.text:0041D49F                 mov     ebp, [edx+4]
.text:0041D4A2                 shr     edi, cl
.text:0041D4A4                 movzx   ecx, byte ptr [esp+4]
.text:0041D4A9                 shl     esi, cl
.text:0041D4AB                 or      edi, esi
.text:0041D4AD                 mov     esi, [esp+1Ch]
.text:0041D4B1                 mov     [esi+4], edi
.text:0041D4B4
.text:0041D4B4 loc_41D4B4:                             ; CODE XREF: .text:0041D523↓j
.text:0041D4B4                 movzx   ecx, byte ptr [esp]
.text:0041D4B8                 mov     esi, ebp
.text:0041D4BA                 mov     edi, [edx]
.text:0041D4BC                 sub     edx, 10h
.text:0041D4BF                 shr     esi, cl
.text:0041D4C1                 movzx   ecx, byte ptr [esp+4]
.text:0041D4C6                 shl     ebx, cl
.text:0041D4C8                 or      esi, ebx
.text:0041D4CA                 mov     ebx, [esp+1Ch]
.text:0041D4CE                 mov     [ebx], esi
.text:0041D4D0                 sub     ebx, 10h
.text:0041D4D3                 sub     dword ptr [esp+24h], 4
.text:0041D4D8                 mov     [esp+1Ch], ebx
.text:0041D4DC                 jnz     short loc_41D463
.text:0041D4DE                 movzx   ecx, byte ptr [esp]
.text:0041D4E2                 mov     edx, [esp+1Ch]
.text:0041D4E6                 shr     edi, cl
.text:0041D4E8                 movzx   ecx, byte ptr [esp+4]
.text:0041D4ED                 shl     ebp, cl
.text:0041D4EF                 or      edi, ebp
.text:0041D4F1                 mov     [edx+0Ch], edi
.text:0041D4F4                 add     esp, 8
.text:0041D4F7                 pop     ebx
.text:0041D4F8                 pop     esi
.text:0041D4F9                 pop     edi
.text:0041D4FA                 pop     ebp
.text:0041D4FB                 retn
.text:0041D4FC ; ---------------------------------------------------------------------------
.text:0041D4FC
.text:0041D4FC loc_41D4FC:                             ; CODE XREF: .text:0041D45D↑j
.text:0041D4FC                 sub     dword ptr [esp+1Ch], 8
.text:0041D501                 sub     edx, 10h
.text:0041D504                 inc     dword ptr [esp+24h]
.text:0041D508                 mov     esi, [edx+0Ch]
.text:0041D50B                 mov     ebx, [edx+8]
.text:0041D50E                 jmp     short loc_41D499
.text:0041D510 ; ---------------------------------------------------------------------------
.text:0041D510
.text:0041D510 loc_41D510:                             ; CODE XREF: .text:0041D454↑j
.text:0041D510                 sub     dword ptr [esp+1Ch], 4
.text:0041D515                 sub     edx, 0Ch
.text:0041D518                 add     dword ptr [esp+24h], 2
.text:0041D51D                 mov     ebx, [edx+8]
.text:0041D520                 mov     ebp, [edx+4]
.text:0041D523                 jmp     short loc_41D4B4
.text:0041D525 ; ---------------------------------------------------------------------------
.text:0041D525
.text:0041D525 loc_41D525:                             ; CODE XREF: .text:0041D44B↑j
.text:0041D525                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041D52A                 sub     edx, 14h
.text:0041D52D                 mov     edi, [edx+10h]
.text:0041D530                 mov     esi, [edx+0Ch]
.text:0041D533                 jmp     loc_41D47E
.text:0041D538 ; ---------------------------------------------------------------------------
.text:0041D538
.text:0041D538 loc_41D538:                             ; CODE XREF: .text:0041D442↑j
.text:0041D538                 sub     dword ptr [esp+1Ch], 10h
.text:0041D53D                 sub     edx, 18h
.text:0041D540                 dec     dword ptr [esp+24h]
.text:0041D544                 mov     ebp, [edx+14h]
.text:0041D547                 mov     edi, [edx+10h]
.text:0041D54A                 jmp     loc_41D463
.text:0041D54A ; ---------------------------------------------------------------------------
.text:0041D54F                 align 10h
.text:0041D550 byte_41D550     db 0                    ; DATA XREF: .data:Src↓o
.text:0041D551 byte_41D551     db 73h, 68h, 0          ; DATA XREF: .data:off_42B1F4↓o
.text:0041D554 ; const char aHome[]
.text:0041D554 aHome           db 'HOME',0             ; DATA XREF: sub_41D570+96↓o
.text:0041D559 ; const char aShell[]
.text:0041D559 aShell          db 'SHELL',0            ; DATA XREF: sub_41D570+E2↓o
.text:0041D55F ; const char aComspec[]
.text:0041D55F aComspec        db 'COMSPEC',0          ; DATA XREF: sub_41D570:loc_41D734↓o
.text:0041D567 aC              db 'C:/',0              ; DATA XREF: sub_41D570:loc_41D755↓o
.text:0041D56B                 align 10h
.text:0041D570
.text:0041D570 ; =============== S U B R O U T I N E =======================================
.text:0041D570
.text:0041D570
.text:0041D570 ; int __cdecl sub_41D570(char *, int, char *, int, int)
.text:0041D570 sub_41D570      proc near               ; CODE XREF: sub_41A9F0+2A↑p
.text:0041D570                                         ; sub_41D760+2F↓p
.text:0041D570
.text:0041D570 Str             = dword ptr -1Ch
.text:0041D570 Src             = dword ptr -18h
.text:0041D570 Size            = dword ptr -14h
.text:0041D570 var_10          = dword ptr -10h
.text:0041D570 var_C           = dword ptr -0Ch
.text:0041D570 var_8           = dword ptr -8
.text:0041D570 var_4           = dword ptr -4
.text:0041D570 arg_0           = dword ptr  4
.text:0041D570 arg_4           = dword ptr  8
.text:0041D570 arg_8           = dword ptr  0Ch
.text:0041D570 arg_C           = dword ptr  10h
.text:0041D570 arg_10          = dword ptr  14h
.text:0041D570
.text:0041D570                 sub     esp, 1Ch
.text:0041D573                 mov     eax, [esp+1Ch+arg_0]
.text:0041D577                 mov     [esp+1Ch+var_10], ebx
.text:0041D57B                 mov     [esp+1Ch+var_C], esi
.text:0041D57F                 test    eax, eax
.text:0041D581                 mov     [esp+1Ch+var_8], edi
.text:0041D585                 mov     [esp+1Ch+var_4], ebp
.text:0041D589                 jz      short loc_41D598
.text:0041D58B                 cmp     byte ptr [eax], 0
.text:0041D58E                 jz      short loc_41D598
.text:0041D590                 mov     ecx, [esp+1Ch+arg_C]
.text:0041D594                 test    ecx, ecx
.text:0041D596                 jnz     short loc_41D5C0
.text:0041D598
.text:0041D598 loc_41D598:                             ; CODE XREF: sub_41D570+19↑j
.text:0041D598                                         ; sub_41D570+1E↑j ...
.text:0041D598                 call    _errno
.text:0041D59D                 mov     dword ptr [eax], 22h ; '"'
.text:0041D5A3                 mov     eax, 0FFFFFFFFh
.text:0041D5A8
.text:0041D5A8 loc_41D5A8:                             ; CODE XREF: sub_41D570+1BF↓j
.text:0041D5A8                 mov     ebx, [esp+1Ch+var_10]
.text:0041D5AC                 mov     esi, [esp+1Ch+var_C]
.text:0041D5B0                 mov     edi, [esp+1Ch+var_8]
.text:0041D5B4                 mov     ebp, [esp+1Ch+var_4]
.text:0041D5B8                 add     esp, 1Ch
.text:0041D5BB                 retn
.text:0041D5BB ; ---------------------------------------------------------------------------
.text:0041D5BC                 align 10h
.text:0041D5C0
.text:0041D5C0 loc_41D5C0:                             ; CODE XREF: sub_41D570+26↑j
.text:0041D5C0                 mov     [esp+1Ch+Str], eax ; Str
.text:0041D5C3                 mov     ebx, eax
.text:0041D5C5                 call    strlen
.text:0041D5CA                 lea     esi, [eax+1]
.text:0041D5CD                 cmp     esi, [esp+1Ch+arg_C]
.text:0041D5D1                 ja      short loc_41D598
.text:0041D5D3                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041D5D7                 mov     edx, [esp+1Ch+arg_8]
.text:0041D5DB                 mov     [esp+1Ch+Size], esi ; Size
.text:0041D5DF                 mov     [esp+1Ch+Str], edx ; void *
.text:0041D5E2                 call    memcpy
.text:0041D5E7                 mov     ebp, [esp+1Ch+arg_4]
.text:0041D5EB                 mov     [ebp+0], eax
.text:0041D5EE                 call    sub_426D00
.text:0041D5F3                 mov     edi, [esp+1Ch+arg_4]
.text:0041D5F7                 mov     [edi+8], eax
.text:0041D5FA                 call    sub_426CF0
.text:0041D5FF                 mov     ebx, [esp+1Ch+arg_4]
.text:0041D603                 mov     [ebx+0Ch], eax
.text:0041D606                 mov     [esp+1Ch+Str], offset aHome ; "HOME"
.text:0041D60D                 call    getenv
.text:0041D612                 test    eax, eax
.text:0041D614                 mov     ebx, eax
.text:0041D616                 jz      loc_41D755
.text:0041D61C
.text:0041D61C loc_41D61C:                             ; CODE XREF: sub_41D570+1EA↓j
.text:0041D61C                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041D61F                 call    strlen
.text:0041D624                 lea     ebp, [eax+esi+1]
.text:0041D628                 cmp     ebp, [esp+1Ch+arg_C]
.text:0041D62C                 ja      loc_41D598
.text:0041D632                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041D636                 mov     ecx, [esp+1Ch+arg_8]
.text:0041D63A                 lea     edi, [eax+1]
.text:0041D63D                 mov     [esp+1Ch+Size], edi ; Size
.text:0041D641                 add     ecx, esi
.text:0041D643                 mov     [esp+1Ch+Str], ecx ; void *
.text:0041D646                 call    memcpy
.text:0041D64B                 mov     esi, [esp+1Ch+arg_4]
.text:0041D64F                 mov     [esi+14h], eax
.text:0041D652                 mov     [esp+1Ch+Str], offset aShell ; "SHELL"
.text:0041D659                 call    getenv
.text:0041D65E                 test    eax, eax
.text:0041D660                 mov     ebx, eax
.text:0041D662                 jz      loc_41D734
.text:0041D668
.text:0041D668 loc_41D668:                             ; CODE XREF: sub_41D570+1D4↓j
.text:0041D668                                         ; sub_41D570+1E0↓j
.text:0041D668                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041D66B                 call    strlen
.text:0041D670                 lea     edi, [eax+ebp+1]
.text:0041D674                 cmp     edi, [esp+1Ch+arg_C]
.text:0041D678                 ja      loc_41D598
.text:0041D67E                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041D682                 mov     esi, [esp+1Ch+arg_8]
.text:0041D686                 lea     ecx, [eax+1]
.text:0041D689                 mov     [esp+1Ch+Size], ecx ; Size
.text:0041D68D                 add     esi, ebp
.text:0041D68F                 mov     [esp+1Ch+Str], esi ; void *
.text:0041D692                 call    memcpy
.text:0041D697                 mov     ebx, [esp+1Ch+arg_4]
.text:0041D69B                 mov     [ebx+18h], eax
.text:0041D69E                 call    sub_426CA0
.text:0041D6A3                 mov     [esp+1Ch+Str], eax ; Str
.text:0041D6A6                 mov     ebx, eax
.text:0041D6A8                 call    strlen
.text:0041D6AD                 lea     esi, [eax+edi+1]
.text:0041D6B1                 cmp     esi, [esp+1Ch+arg_C]
.text:0041D6B5                 ja      loc_41D598
.text:0041D6BB                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041D6BF                 mov     ecx, [esp+1Ch+arg_8]
.text:0041D6C3                 lea     ebp, [eax+1]
.text:0041D6C6                 mov     [esp+1Ch+Size], ebp ; Size
.text:0041D6CA                 add     ecx, edi
.text:0041D6CC                 mov     [esp+1Ch+Str], ecx ; void *
.text:0041D6CF                 call    memcpy
.text:0041D6D4                 mov     edi, [esp+1Ch+arg_4]
.text:0041D6D8                 mov     ebx, Src
.text:0041D6DE                 mov     [edi+10h], eax
.text:0041D6E1                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041D6E4                 call    strlen
.text:0041D6E9                 lea     ebp, [eax+esi+1]
.text:0041D6ED                 cmp     ebp, [esp+1Ch+arg_C]
.text:0041D6F1                 ja      loc_41D598
.text:0041D6F7                 mov     [esp+1Ch+Src], ebx ; Src
.text:0041D6FB                 mov     edi, [esp+1Ch+arg_8]
.text:0041D6FF                 lea     ecx, [eax+1]
.text:0041D702                 mov     [esp+1Ch+Size], ecx ; Size
.text:0041D706                 add     edi, esi
.text:0041D708                 mov     [esp+1Ch+Str], edi ; void *
.text:0041D70B                 call    memcpy
.text:0041D710                 mov     esi, [esp+1Ch+arg_4]
.text:0041D714                 mov     [esi+4], eax
.text:0041D717                 mov     edx, [esp+1Ch+arg_8]
.text:0041D71B                 mov     [esp+1Ch+Str], edx ; Str
.text:0041D71E                 call    strlen
.text:0041D723                 mov     eax, [esp+1Ch+arg_4]
.text:0041D727                 mov     ebx, [esp+1Ch+arg_10]
.text:0041D72B                 mov     [ebx], eax
.text:0041D72D                 xor     eax, eax
.text:0041D72F                 jmp     loc_41D5A8
.text:0041D734 ; ---------------------------------------------------------------------------
.text:0041D734
.text:0041D734 loc_41D734:                             ; CODE XREF: sub_41D570+F2↑j
.text:0041D734                 mov     [esp+1Ch+Str], offset aComspec ; "COMSPEC"
.text:0041D73B                 call    getenv
.text:0041D740                 test    eax, eax
.text:0041D742                 mov     ebx, eax
.text:0041D744                 jnz     loc_41D668
.text:0041D74A                 mov     ebx, off_42B1F4
.text:0041D750                 jmp     loc_41D668
.text:0041D755 ; ---------------------------------------------------------------------------
.text:0041D755
.text:0041D755 loc_41D755:                             ; CODE XREF: sub_41D570+A6↑j
.text:0041D755                 mov     ebx, offset aC  ; "C:/"
.text:0041D75A                 jmp     loc_41D61C
.text:0041D75A sub_41D570      endp
.text:0041D75A
.text:0041D75A ; ---------------------------------------------------------------------------
.text:0041D75F                 align 10h
.text:0041D760
.text:0041D760 ; =============== S U B R O U T I N E =======================================
.text:0041D760
.text:0041D760
.text:0041D760 ; int __cdecl sub_41D760(int, int, char *, int, int)
.text:0041D760 sub_41D760      proc near               ; CODE XREF: sub_41AA40+2A↑p
.text:0041D760
.text:0041D760 var_1C          = dword ptr -1Ch
.text:0041D760 var_18          = dword ptr -18h
.text:0041D760 var_14          = dword ptr -14h
.text:0041D760 var_10          = dword ptr -10h
.text:0041D760 var_C           = dword ptr -0Ch
.text:0041D760 var_4           = dword ptr -4
.text:0041D760 arg_0           = dword ptr  4
.text:0041D760 arg_4           = dword ptr  8
.text:0041D760 arg_8           = dword ptr  0Ch
.text:0041D760 arg_C           = dword ptr  10h
.text:0041D760 arg_10          = dword ptr  14h
.text:0041D760
.text:0041D760                 sub     esp, 1Ch
.text:0041D763                 mov     [esp+1Ch+var_4], ebx
.text:0041D767                 mov     ebx, [esp+1Ch+arg_4]
.text:0041D76B                 call    sub_426CA0
.text:0041D770                 mov     [esp+1Ch+var_1C], eax ; char *
.text:0041D773                 mov     ecx, [esp+1Ch+arg_10]
.text:0041D777                 mov     [esp+1Ch+var_18], ebx ; int
.text:0041D77B                 mov     [esp+1Ch+var_C], ecx ; int
.text:0041D77F                 mov     ecx, [esp+1Ch+arg_C]
.text:0041D783                 mov     [esp+1Ch+var_10], ecx ; int
.text:0041D787                 mov     ecx, [esp+1Ch+arg_8]
.text:0041D78B                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0041D78F                 call    sub_41D570
.text:0041D794                 mov     ecx, [esp+1Ch+arg_0]
.text:0041D798                 mov     [ebx+8], ecx
.text:0041D79B                 mov     ebx, [esp+1Ch+var_4]
.text:0041D79F                 add     esp, 1Ch
.text:0041D7A2                 retn
.text:0041D7A2 sub_41D760      endp
.text:0041D7A2
.text:0041D7A2 ; ---------------------------------------------------------------------------
.text:0041D7A3                 align 10h
.text:0041D7B0
.text:0041D7B0 ; =============== S U B R O U T I N E =======================================
.text:0041D7B0
.text:0041D7B0 ; Attributes: noreturn
.text:0041D7B0
.text:0041D7B0 sub_41D7B0      proc near               ; CODE XREF: .text:0041BFA9↑p
.text:0041D7B0                                         ; sub_41D7B0↓j
.text:0041D7B0                 jmp     short sub_41D7B0
.text:0041D7B0 sub_41D7B0      endp
.text:0041D7B0
.text:0041D7B0 ; ---------------------------------------------------------------------------
.text:0041D7B2                 align 10h
.text:0041D7C0
.text:0041D7C0 ; =============== S U B R O U T I N E =======================================
.text:0041D7C0
.text:0041D7C0
.text:0041D7C0 sub_41D7C0      proc near               ; CODE XREF: .text:0041BD05↑p
.text:0041D7C0
.text:0041D7C0 FileHandle      = dword ptr -1Ch
.text:0041D7C0 dwFileOffsetLow = dword ptr -18h
.text:0041D7C0 dwFileOffsetHigh= dword ptr -14h
.text:0041D7C0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0041D7C0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0041D7C0 var_8           = dword ptr -8
.text:0041D7C0 var_4           = dword ptr -4
.text:0041D7C0 arg_0           = dword ptr  4
.text:0041D7C0
.text:0041D7C0                 sub     esp, 1Ch
.text:0041D7C3                 mov     edx, [esp+1Ch+arg_0]
.text:0041D7C7                 mov     [esp+1Ch+var_4], esi
.text:0041D7CB                 mov     [esp+1Ch+var_8], ebx
.text:0041D7CF                 mov     ebx, [edx+10h]
.text:0041D7D2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041D7D5                 call    _get_osfhandle
.text:0041D7DA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041D7DD                 mov     esi, eax
.text:0041D7DF                 call    _filelengthi64
.text:0041D7E4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0041D7E8                 cdq
.text:0041D7E9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041D7EC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0041D7F0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0041D7F8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0041D800                 call    UnlockFile
.text:0041D805                 sub     esp, 14h
.text:0041D808                 mov     ebx, [esp+1Ch+var_8]
.text:0041D80C                 mov     esi, [esp+1Ch+var_4]
.text:0041D810                 add     esp, 1Ch
.text:0041D813                 retn
.text:0041D813 sub_41D7C0      endp
.text:0041D813
.text:0041D813 ; ---------------------------------------------------------------------------
.text:0041D814                 align 10h
.text:0041D820
.text:0041D820 ; =============== S U B R O U T I N E =======================================
.text:0041D820
.text:0041D820
.text:0041D820 ; int __cdecl sub_41D820(int, char *Control)
.text:0041D820 sub_41D820      proc near               ; CODE XREF: .text:0041BBC6↑p
.text:0041D820                                         ; .text:0041BC16↑p ...
.text:0041D820
.text:0041D820 Str             = dword ptr -1Ch
.text:0041D820 Val             = dword ptr -18h
.text:0041D820 var_8           = dword ptr -8
.text:0041D820 var_4           = dword ptr -4
.text:0041D820 arg_0           = dword ptr  4
.text:0041D820 Control         = dword ptr  8
.text:0041D820
.text:0041D820                 sub     esp, 1Ch
.text:0041D823                 xor     eax, eax
.text:0041D825                 mov     edx, [esp+1Ch+Control]
.text:0041D829                 mov     [esp+1Ch+var_4], esi
.text:0041D82D                 mov     esi, [esp+1Ch+arg_0]
.text:0041D831                 mov     [esp+1Ch+var_8], ebx
.text:0041D835                 mov     ebx, [esi]
.text:0041D837                 test    ebx, ebx
.text:0041D839                 jz      short loc_41D868
.text:0041D83B                 movzx   eax, byte ptr [edx]
.text:0041D83E                 test    al, al
.text:0041D840                 jz      short loc_41D860
.text:0041D842                 cmp     byte ptr [edx+1], 0
.text:0041D846                 jnz     short loc_41D8A0
.text:0041D848                 movzx   ecx, byte ptr [ebx]
.text:0041D84B                 mov     edx, ebx
.text:0041D84D                 cmp     cl, al
.text:0041D84F                 jz      short loc_41D892
.text:0041D851                 test    cl, cl
.text:0041D853                 jnz     short loc_41D874
.text:0041D855                 lea     esi, [esi+0]
.text:0041D859                 lea     edi, [edi+0]
.text:0041D860
.text:0041D860 loc_41D860:                             ; CODE XREF: sub_41D820+20↑j
.text:0041D860                                         ; sub_41D820+74↓j
.text:0041D860                 mov     dword ptr [esi], 0
.text:0041D866
.text:0041D866 loc_41D866:                             ; CODE XREF: sub_41D820+7C↓j
.text:0041D866                 mov     eax, ebx
.text:0041D868
.text:0041D868 loc_41D868:                             ; CODE XREF: sub_41D820+19↑j
.text:0041D868                 mov     ebx, [esp+1Ch+var_8]
.text:0041D86C                 mov     esi, [esp+1Ch+var_4]
.text:0041D870                 add     esp, 1Ch
.text:0041D873                 retn
.text:0041D874 ; ---------------------------------------------------------------------------
.text:0041D874
.text:0041D874 loc_41D874:                             ; CODE XREF: sub_41D820+33↑j
.text:0041D874                 movsx   edx, al
.text:0041D877                 mov     [esp+1Ch+Val], edx ; Val
.text:0041D87B                 lea     edx, [ebx+1]
.text:0041D87E                 mov     [esp+1Ch+Str], edx ; Str
.text:0041D881                 call    strchr
.text:0041D886                 lea     esi, [esi+0]
.text:0041D889                 lea     edi, [edi+0]
.text:0041D890
.text:0041D890 loc_41D890:                             ; CODE XREF: sub_41D820+8C↓j
.text:0041D890                 mov     edx, eax
.text:0041D892
.text:0041D892 loc_41D892:                             ; CODE XREF: sub_41D820+2F↑j
.text:0041D892                 test    edx, edx
.text:0041D894                 jz      short loc_41D860
.text:0041D896                 mov     byte ptr [edx], 0
.text:0041D899                 inc     edx
.text:0041D89A                 mov     [esi], edx
.text:0041D89C                 jmp     short loc_41D866
.text:0041D89C ; ---------------------------------------------------------------------------
.text:0041D89E                 align 10h
.text:0041D8A0
.text:0041D8A0 loc_41D8A0:                             ; CODE XREF: sub_41D820+26↑j
.text:0041D8A0                 mov     [esp+1Ch+Val], edx ; Control
.text:0041D8A4                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041D8A7                 call    strpbrk
.text:0041D8AC                 jmp     short loc_41D890
.text:0041D8AC sub_41D820      endp
.text:0041D8AC
.text:0041D8AC ; ---------------------------------------------------------------------------
.text:0041D8AE                 align 10h
.text:0041D8B0 ; const char aTmpf[]
.text:0041D8B0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_41D8C0+20↓o
.text:0041D8B5 ; const char aWBd[]
.text:0041D8B5 aWBd            db 'w+bD',0             ; DATA XREF: sub_41D8C0+5E↓o
.text:0041D8BA                 align 10h
.text:0041D8C0
.text:0041D8C0 ; =============== S U B R O U T I N E =======================================
.text:0041D8C0
.text:0041D8C0
.text:0041D8C0 sub_41D8C0      proc near               ; CODE XREF: sub_41C63F+A4↑p
.text:0041D8C0
.text:0041D8C0 FileHandle      = dword ptr -13Ch
.text:0041D8C0 Format          = dword ptr -138h
.text:0041D8C0 var_134         = dword ptr -134h
.text:0041D8C0 var_130         = dword ptr -130h
.text:0041D8C0 var_12C         = dword ptr -12Ch
.text:0041D8C0 Buffer          = byte ptr -11Ch
.text:0041D8C0 var_8           = dword ptr -8
.text:0041D8C0 var_4           = dword ptr -4
.text:0041D8C0
.text:0041D8C0                 sub     esp, 13Ch
.text:0041D8C6                 mov     [esp+13Ch+var_8], ebx
.text:0041D8CD                 lea     ebx, [esp+13Ch+Buffer]
.text:0041D8D1                 mov     [esp+13Ch+var_4], esi
.text:0041D8D8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0041D8E0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0041D8E8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0041D8F0                 mov     [esp+13Ch+Format], 104h ; int
.text:0041D8F8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041D8FB                 call    sub_426D40
.text:0041D900                 xor     edx, edx
.text:0041D902                 test    eax, eax
.text:0041D904                 jnz     short loc_41D936
.text:0041D906                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0041D909                 mov     [esp+13Ch+Format], 0 ; int
.text:0041D911                 call    sub_4270C0
.text:0041D916                 xor     edx, edx
.text:0041D918                 mov     ebx, eax
.text:0041D91A                 test    eax, eax
.text:0041D91C                 js      short loc_41D936
.text:0041D91E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0041D926                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0041D929                 call    _fdopen
.text:0041D92E                 test    eax, eax
.text:0041D930                 mov     esi, eax
.text:0041D932                 jz      short loc_41D94D
.text:0041D934
.text:0041D934 loc_41D934:                             ; CODE XREF: sub_41D8C0+95↓j
.text:0041D934                 mov     edx, esi
.text:0041D936
.text:0041D936 loc_41D936:                             ; CODE XREF: sub_41D8C0+44↑j
.text:0041D936                                         ; sub_41D8C0+5C↑j
.text:0041D936                 mov     ebx, [esp+13Ch+var_8]
.text:0041D93D                 mov     eax, edx
.text:0041D93F                 mov     esi, [esp+13Ch+var_4]
.text:0041D946                 add     esp, 13Ch
.text:0041D94C                 retn
.text:0041D94D ; ---------------------------------------------------------------------------
.text:0041D94D
.text:0041D94D loc_41D94D:                             ; CODE XREF: sub_41D8C0+72↑j
.text:0041D94D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0041D950                 call    _close
.text:0041D955                 jmp     short loc_41D934
.text:0041D955 sub_41D8C0      endp
.text:0041D955
.text:0041D955 ; ---------------------------------------------------------------------------
.text:0041D957                 db 9 dup(90h)
.text:0041D960 dword_41D960    dd 3020100h, 7060504h, 0B0A0908h, 0F0E0D0Ch, 13121110h
.text:0041D960                                         ; DATA XREF: .text:0041DEE4↓o
.text:0041D960                 dd 17161514h, 1B1A1918h, 1F1E1D1Ch, 23222120h, 27262524h
.text:0041D960                 dd 2B2A2928h, 2F2E2D2Ch, 33323130h, 37363534h, 3B3A3938h
.text:0041D960                 dd 3F3E3D3Ch, 43424140h, 47464544h, 4B4A4948h, 4F4E4D4Ch
.text:0041D960                 dd 53525150h, 57565554h, 5B5A5958h, 5F5E5D5Ch, 63626160h
.text:0041D960                 dd 67666564h, 6B6A6968h, 6F6E6D6Ch, 73727170h, 77767574h
.text:0041D960                 dd 7B7A7978h, 7F7E7D7Ch, 83828180h, 87868584h, 8B8A8988h
.text:0041D960                 dd 8F8E8D8Ch, 93929190h, 97969594h, 9B9A9998h, 9F9E9D9Ch
.text:0041D960                 dd 0A3A2A1A0h, 0A7A6A5A4h, 0ABAAA9A8h, 0AFAEADACh, 0B3B2B1B0h
.text:0041D960                 dd 0B7B6B5B4h, 0BBBAB9B8h, 0BFBEBDBCh, 0C3C2C1C0h, 0C7C6C5C4h
.text:0041D960                 dd 0CBCAC9C8h, 0CFCECDCCh, 0D3D2D1D0h, 0D7D6D5D4h, 0DBDAD9D8h
.text:0041D960                 dd 0DFDEDDDCh, 0E3E2E1E0h, 0E7E6E5E4h, 0EBEAE9E8h, 0EFEEEDECh
.text:0041D960                 dd 0F3F2F1F0h, 0F7F6F5F4h, 0FBFAF9F8h, 0FFFEFDFCh, 8, 1
.text:0041D960                 dd 8, 0
.text:0041DA70                 dd 0FFh, 18h, 1Ch, 0
.text:0041DA80                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:0041DA80                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:0041DA80                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:0041DA80                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:0041DA80                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:0041DA80                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:0041DA80                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:0041DA80                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:0041DA80                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:0041DA80                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:0041DA80                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:0041DA80                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:0041DA80                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:0041DA80                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:0041DA80                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:0041DA80                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:0041DA80                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:0041DA80                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:0041DA80                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:0041DA80                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:0041DA80                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:0041DA80                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:0041DA80                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:0041DA80                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:0041DA80                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 26748Dh
.text:0041DA80                 dd 426B00h, 5 dup(0)
.text:0041DE98                 dd 0FFFFFFFFh, 0
.text:0041DEA0                 dd 13h, 10h dup(0)
.text:0041DEE4                 dd offset dword_41D960
.text:0041DEE8                 dd offset dword_41D960+100h
.text:0041DEEC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0041DEF0                 db 10h dup(90h)
.text:0041DF00                 dd 0
.text:0041DF04                 dd 2, 4, 6, 8, 0Ah, 0Ch, 0Eh, 10h, 12h, 14h, 16h, 18h
.text:0041DF04                 dd 1Ah, 1Ch, 1Eh, 20h, 22h, 24h, 26h, 28h, 2Ah, 2Ch, 2Eh
.text:0041DF04                 dd 30h, 32h, 34h, 36h, 38h, 3Ah, 3Ch, 3Eh, 40h, 42h, 44h
.text:0041DF04                 dd 46h, 48h, 4Ah, 4Ch, 4Eh, 50h, 52h, 54h, 56h, 58h, 5Ah
.text:0041DF04                 dd 5Ch, 5Eh, 60h, 62h, 64h, 66h, 68h, 6Ah, 6Ch, 6Eh, 70h
.text:0041DF04                 dd 72h, 74h, 76h, 78h, 7Ah, 7Ch, 7Eh, 80h, 82h, 84h, 86h
.text:0041DF04                 dd 88h, 8Ah, 8Ch, 8Eh, 90h, 92h, 94h, 96h, 98h, 9Ah, 9Ch
.text:0041DF04                 dd 9Eh, 0A0h, 0A2h, 0A4h, 0A6h, 0A8h, 0AAh, 0ACh, 0AEh
.text:0041DF04                 dd 0B0h, 0B2h, 0B4h, 0B6h, 0B8h, 0BAh, 0BCh, 0BEh, 0C0h
.text:0041DF04                 dd 0C2h, 0C4h, 0C6h, 0C8h, 0CAh, 0CCh, 0CEh, 0D0h, 0D2h
.text:0041DF04                 dd 0D4h, 0D6h, 0D8h, 0DAh, 0DCh, 0DEh, 0E0h, 0E2h, 0E4h
.text:0041DF04                 dd 0E6h, 0E8h, 0EAh, 0ECh, 0EEh, 0F0h, 0F2h, 0F4h, 0F6h
.text:0041DF04                 dd 0F8h, 0FAh, 0FCh, 0FEh, 100h, 102h, 104h, 106h, 108h
.text:0041DF04                 dd 10Ah, 10Ch, 10Eh, 110h, 112h, 114h, 116h, 118h, 11Ah
.text:0041DF04                 dd 11Ch, 11Eh, 120h, 122h, 124h, 126h, 128h, 12Ah, 12Ch
.text:0041DF04                 dd 12Eh, 130h, 132h, 134h, 136h, 138h, 13Ah, 13Ch, 13Eh
.text:0041DF04                 dd 140h, 142h, 144h, 146h, 148h, 14Ah, 14Ch, 14Eh, 150h
.text:0041DF04                 dd 152h, 154h, 156h, 158h, 15Ah, 15Ch, 15Eh, 160h, 162h
.text:0041DF04                 dd 164h, 166h, 168h, 16Ah, 16Ch, 16Eh, 170h, 172h, 174h
.text:0041DF04                 dd 176h, 178h, 17Ah, 17Ch, 17Eh, 180h, 182h, 184h, 186h
.text:0041DF04                 dd 188h, 18Ah, 18Ch, 18Eh, 190h, 192h, 194h, 196h, 198h
.text:0041DF04                 dd 19Ah, 19Ch, 19Eh, 1A0h, 1A2h, 1A4h, 1A6h, 1A8h, 1AAh
.text:0041DF04                 dd 1ACh, 1AEh, 1B0h, 1B2h, 1B4h, 1B6h, 1B8h, 1BAh, 1BCh
.text:0041DF04                 dd 1BEh, 1C0h, 1C2h, 1C4h, 1C6h, 1C8h, 1CAh, 1CCh, 1CEh
.text:0041DF04                 dd 1D0h, 1D2h, 1D4h, 1D6h, 1D8h, 1DAh, 1DCh, 1DEh, 1E0h
.text:0041DF04                 dd 1E2h, 1E4h, 1E6h, 1E8h, 1EAh, 1ECh, 1EEh, 1F0h, 1F2h
.text:0041DF04                 dd 1F4h, 1F6h, 1F8h, 1FAh, 1FCh, 1FEh, 200h, 202h, 204h
.text:0041DF04                 dd 206h, 208h, 20Ah, 20Ch, 20Eh, 210h, 212h, 214h, 216h
.text:0041DF04                 dd 218h, 21Ah, 21Ch, 21Eh, 220h, 222h, 224h, 226h, 228h
.text:0041DF04                 dd 22Ah, 22Ch, 22Eh, 230h, 232h, 234h, 236h, 238h, 23Ah
.text:0041DF04                 dd 23Ch, 23Eh, 240h, 242h, 244h, 246h, 248h, 24Ah, 24Ch
.text:0041DF04                 dd 24Eh, 250h, 252h, 254h, 256h, 258h, 25Ah, 25Ch, 25Eh
.text:0041DF04                 dd 260h, 262h, 264h, 266h, 268h, 26Ah, 26Ch, 26Eh, 270h
.text:0041DF04                 dd 272h, 274h, 276h, 278h, 27Ah, 27Ch, 27Eh, 280h, 282h
.text:0041DF04                 dd 284h, 286h, 288h, 28Ah, 28Ch, 28Eh, 290h, 292h, 294h
.text:0041DF04                 dd 296h, 298h, 29Ah, 29Ch, 29Eh, 2A0h, 2A2h, 2A4h, 2A6h
.text:0041DF04                 dd 2A8h, 2AAh, 2ACh, 2AEh, 2B0h, 2B2h, 2B4h, 2B6h, 2B8h
.text:0041DF04                 dd 2BAh, 2BCh, 2BEh, 2C0h, 2C2h, 2C4h, 2C6h, 2C8h, 2CAh
.text:0041DF04                 dd 2CCh, 2CEh, 2D0h, 2D2h, 2D4h, 2D6h, 2D8h, 2DAh, 2DCh
.text:0041DF04                 dd 2DEh, 2E0h, 2E2h, 2E4h, 2E6h, 2E8h, 2EAh, 2ECh, 2EEh
.text:0041DF04                 dd 2F0h, 2F2h, 2F4h, 2F6h, 2F8h, 2FAh, 2FCh, 2FEh, 300h
.text:0041DF04                 dd 302h, 304h, 306h, 308h, 30Ah, 30Ch, 30Eh, 310h, 312h
.text:0041DF04                 dd 314h, 316h, 318h, 31Ah, 31Ch, 31Eh, 320h, 322h, 324h
.text:0041DF04                 dd 326h, 328h, 32Ah, 32Ch, 32Eh, 330h, 332h, 334h, 336h
.text:0041DF04                 dd 338h, 33Ah, 33Ch, 33Eh, 340h, 342h, 344h, 346h, 348h
.text:0041DF04                 dd 34Ah, 34Ch, 34Eh, 350h, 352h, 354h, 356h, 358h, 35Ah
.text:0041DF04                 dd 35Ch, 35Eh, 360h, 362h, 364h, 366h, 368h, 36Ah, 36Ch
.text:0041DF04                 dd 36Eh, 370h, 372h, 374h, 376h, 378h, 37Ah, 37Ch, 37Eh
.text:0041DF04                 dd 380h, 382h, 384h, 386h, 388h, 38Ah, 38Ch, 38Eh, 390h
.text:0041DF04                 dd 392h, 394h, 396h, 398h, 39Ah, 39Ch, 39Eh, 3A0h, 3A2h
.text:0041DF04                 dd 3A4h, 3A6h, 3A8h, 3AAh, 3ACh, 3AEh, 3B0h, 3B2h, 3B4h
.text:0041DF04                 dd 3B6h, 3B8h, 3BAh, 3BCh, 3BEh, 3C0h, 3C2h, 3C4h, 3C6h
.text:0041DF04                 dd 3C8h, 3CAh, 3CCh, 3CEh, 3D0h, 3D2h, 3D4h, 3D6h, 3D8h
.text:0041DF04                 dd 3DAh, 3DCh, 3DEh, 3E0h, 3E2h, 3E4h, 3E6h, 3E8h, 3EAh
.text:0041DF04                 dd 3ECh, 3EEh, 3F0h, 3F2h, 3F4h, 3F6h, 3F8h, 3FAh, 3FCh
.text:0041DF04                 dd 3FEh, 400h
.text:0041E704                 dd 402h, 404h, 406h, 408h, 40Ah, 40Ch, 40Eh, 410h, 412h
.text:0041E704                 dd 414h, 416h, 418h, 41Ah, 41Ch, 41Eh, 420h, 422h, 424h
.text:0041E704                 dd 426h, 428h, 42Ah, 42Ch, 42Eh, 430h, 432h, 434h, 436h
.text:0041E704                 dd 438h, 43Ah, 43Ch, 43Eh, 440h, 442h, 444h, 446h, 448h
.text:0041E704                 dd 44Ah, 44Ch, 44Eh, 450h, 452h, 454h, 456h, 458h, 45Ah
.text:0041E704                 dd 45Ch, 45Eh, 460h, 462h, 464h, 466h, 468h, 46Ah, 46Ch
.text:0041E704                 dd 46Eh, 470h, 472h, 474h, 476h, 478h, 47Ah, 47Ch, 47Eh
.text:0041E704                 dd 480h, 482h, 484h, 486h, 488h, 48Ah, 48Ch, 48Eh, 490h
.text:0041E704                 dd 492h, 494h, 496h, 498h, 49Ah, 49Ch, 49Eh, 4A0h, 4A2h
.text:0041E704                 dd 4A4h, 4A6h, 4A8h, 4AAh, 4ACh, 4AEh, 4B0h, 4B2h, 4B4h
.text:0041E704                 dd 4B6h, 4B8h, 4BAh, 4BCh, 4BEh, 4C0h, 4C2h, 4C4h, 4C6h
.text:0041E704                 dd 4C8h, 4CAh, 4CCh, 4CEh, 4D0h, 4D2h, 4D4h, 4D6h, 4D8h
.text:0041E704                 dd 4DAh, 4DCh, 4DEh, 4E0h, 4E2h, 4E4h, 4E6h, 4E8h, 4EAh
.text:0041E704                 dd 4ECh, 4EEh, 4F0h, 4F2h, 4F4h, 4F6h, 4F8h, 4FAh, 4FCh
.text:0041E704                 dd 4FEh, 500h, 502h, 504h, 506h, 508h, 50Ah, 50Ch, 50Eh
.text:0041E704                 dd 510h, 512h, 514h, 516h, 518h, 51Ah, 51Ch, 51Eh, 520h
.text:0041E704                 dd 522h, 524h, 526h, 528h, 52Ah, 52Ch, 52Eh, 530h, 532h
.text:0041E704                 dd 534h, 536h, 538h, 53Ah, 53Ch, 53Eh, 540h, 542h, 544h
.text:0041E704                 dd 546h, 548h, 54Ah, 54Ch, 54Eh, 550h, 552h, 554h, 556h
.text:0041E704                 dd 558h, 55Ah, 55Ch, 55Eh, 560h, 562h, 564h, 566h, 568h
.text:0041E704                 dd 56Ah, 56Ch, 56Eh, 570h, 572h, 574h, 576h, 578h, 57Ah
.text:0041E704                 dd 57Ch, 57Eh, 580h, 582h, 584h, 586h, 588h, 58Ah, 58Ch
.text:0041E704                 dd 58Eh, 590h, 592h, 594h, 596h, 598h, 59Ah, 59Ch, 59Eh
.text:0041E704                 dd 5A0h, 5A2h, 5A4h, 5A6h, 5A8h, 5AAh, 5ACh, 5AEh, 5B0h
.text:0041E704                 dd 5B2h, 5B4h, 5B6h, 5B8h, 5BAh, 5BCh, 5BEh, 5C0h, 5C2h
.text:0041E704                 dd 5C4h, 5C6h, 5C8h, 5CAh, 5CCh, 5CEh, 5D0h, 5D2h, 5D4h
.text:0041E704                 dd 5D6h, 5D8h, 5DAh, 5DCh, 5DEh, 5E0h, 5E2h, 5E4h, 5E6h
.text:0041E704                 dd 5E8h, 5EAh, 5ECh, 5EEh, 5F0h, 5F2h, 5F4h, 5F6h, 5F8h
.text:0041E704                 dd 5FAh, 5FCh, 5FEh, 600h, 602h, 604h, 606h, 608h, 60Ah
.text:0041E704                 dd 60Ch, 60Eh, 610h, 612h, 614h, 616h, 618h, 61Ah, 61Ch
.text:0041E704                 dd 61Eh, 620h, 622h, 624h, 626h, 628h, 62Ah, 62Ch, 62Eh
.text:0041E704                 dd 630h, 632h, 634h, 636h, 638h, 63Ah, 63Ch, 63Eh, 640h
.text:0041E704                 dd 642h, 644h, 646h, 648h, 64Ah, 64Ch, 64Eh, 650h, 652h
.text:0041E704                 dd 654h, 656h, 658h, 65Ah, 65Ch, 65Eh, 660h, 662h, 664h
.text:0041E704                 dd 666h, 668h, 66Ah, 66Ch, 66Eh, 670h, 672h, 674h, 676h
.text:0041E704                 dd 678h, 67Ah, 67Ch, 67Eh, 680h, 682h, 684h, 686h, 688h
.text:0041E704                 dd 68Ah, 68Ch, 68Eh, 690h, 692h, 694h, 696h, 698h, 69Ah
.text:0041E704                 dd 69Ch, 69Eh, 6A0h, 6A2h, 6A4h, 6A6h, 6A8h, 6AAh, 6ACh
.text:0041E704                 dd 6AEh, 6B0h, 6B2h, 6B4h, 6B6h, 6B8h, 6BAh, 6BCh, 6BEh
.text:0041E704                 dd 6C0h, 6C2h, 6C4h, 6C6h, 6C8h, 6CAh, 6CCh, 6CEh, 6D0h
.text:0041E704                 dd 6D2h, 6D4h, 6D6h, 6D8h, 6DAh, 6DCh, 6DEh, 6E0h, 6E2h
.text:0041E704                 dd 6E4h, 6E6h, 6E8h, 6EAh, 6ECh, 6EEh, 6F0h, 6F2h, 6F4h
.text:0041E704                 dd 6F6h, 6F8h, 6FAh, 6FCh, 6FEh, 700h, 702h, 704h, 706h
.text:0041E704                 dd 708h, 70Ah, 70Ch, 70Eh, 710h, 712h, 714h, 716h, 718h
.text:0041E704                 dd 71Ah, 71Ch, 71Eh, 720h, 722h, 724h, 726h, 728h, 72Ah
.text:0041E704                 dd 72Ch, 72Eh, 730h, 732h, 734h, 736h, 738h, 73Ah, 73Ch
.text:0041E704                 dd 73Eh, 740h, 742h, 744h, 746h, 748h, 74Ah, 74Ch, 74Eh
.text:0041E704                 dd 750h, 752h, 754h, 756h, 758h, 75Ah, 75Ch, 75Eh, 760h
.text:0041E704                 dd 762h, 764h, 766h, 768h, 76Ah, 76Ch, 76Eh, 770h, 772h
.text:0041E704                 dd 774h, 776h, 778h, 77Ah, 77Ch, 77Eh, 780h, 782h, 784h
.text:0041E704                 dd 786h, 788h, 78Ah, 78Ch, 78Eh, 790h, 792h, 794h, 796h
.text:0041E704                 dd 798h, 79Ah, 79Ch, 79Eh, 7A0h, 7A2h, 7A4h, 7A6h, 7A8h
.text:0041E704                 dd 7AAh, 7ACh, 7AEh, 7B0h, 7B2h, 7B4h, 7B6h, 7B8h, 7BAh
.text:0041E704                 dd 7BCh, 7BEh, 7C0h, 7C2h, 7C4h, 7C6h, 7C8h, 7CAh, 7CCh
.text:0041E704                 dd 7CEh, 7D0h, 7D2h, 7D4h, 7D6h, 7D8h, 7DAh, 7DCh, 7DEh
.text:0041E704                 dd 7E0h, 7E2h, 7E4h, 7E6h, 7E8h, 7EAh, 7ECh, 7EEh, 7F0h
.text:0041E704                 dd 7F2h, 7F4h, 7F6h, 7F8h, 7FAh, 7FCh, 7FEh, 800h
.text:0041EF04                 dd 802h, 804h, 806h, 808h, 80Ah, 80Ch, 80Eh, 810h, 812h
.text:0041EF04                 dd 814h, 816h, 818h, 81Ah, 81Ch, 81Eh, 820h, 822h, 824h
.text:0041EF04                 dd 826h, 828h, 82Ah, 82Ch, 82Eh, 830h, 832h, 834h, 836h
.text:0041EF04                 dd 838h, 83Ah, 83Ch, 83Eh, 840h, 842h, 844h, 846h, 848h
.text:0041EF04                 dd 84Ah, 84Ch, 84Eh, 850h, 852h, 854h, 856h, 858h, 85Ah
.text:0041EF04                 dd 85Ch, 85Eh, 860h, 862h, 864h, 866h, 868h, 86Ah, 86Ch
.text:0041EF04                 dd 86Eh, 870h, 872h, 874h, 876h, 878h, 87Ah, 87Ch, 87Eh
.text:0041EF04                 dd 880h, 882h, 884h, 886h, 888h, 88Ah, 88Ch, 88Eh, 890h
.text:0041EF04                 dd 892h, 894h, 896h, 898h, 89Ah, 89Ch, 89Eh, 8A0h, 8A2h
.text:0041EF04                 dd 8A4h, 8A6h, 8A8h, 8AAh, 8ACh, 8AEh, 8B0h, 8B2h, 8B4h
.text:0041EF04                 dd 8B6h, 8B8h, 8BAh, 8BCh, 8BEh, 8C0h, 8C2h, 8C4h, 8C6h
.text:0041EF04                 dd 8C8h, 8CAh, 8CCh, 8CEh, 8D0h, 8D2h, 8D4h, 8D6h, 8D8h
.text:0041EF04                 dd 8DAh, 8DCh, 8DEh, 8E0h, 8E2h, 8E4h, 8E6h, 8E8h, 8EAh
.text:0041EF04                 dd 8ECh, 8EEh, 8F0h, 8F2h, 8F4h, 8F6h, 8F8h, 8FAh, 8FCh
.text:0041EF04                 dd 8FEh, 900h, 902h, 904h, 906h, 908h, 90Ah, 90Ch, 90Eh
.text:0041EF04                 dd 910h, 912h, 914h, 916h, 918h, 91Ah, 91Ch, 91Eh, 920h
.text:0041EF04                 dd 922h, 924h, 926h, 928h, 92Ah, 92Ch, 92Eh, 930h, 932h
.text:0041EF04                 dd 934h, 936h, 938h, 93Ah, 93Ch, 93Eh, 940h, 942h, 944h
.text:0041EF04                 dd 946h, 948h, 94Ah, 94Ch, 94Eh, 950h, 952h, 954h, 956h
.text:0041EF04                 dd 958h, 95Ah, 95Ch, 95Eh, 960h, 962h, 964h, 966h, 968h
.text:0041EF04                 dd 96Ah, 96Ch, 96Eh, 970h, 972h, 974h, 976h, 978h, 97Ah
.text:0041EF04                 dd 97Ch, 97Eh, 980h, 982h, 984h, 986h, 988h, 98Ah, 98Ch
.text:0041EF04                 dd 98Eh, 990h, 992h, 994h, 996h, 998h, 99Ah, 99Ch, 99Eh
.text:0041EF04                 dd 9A0h, 9A2h, 9A4h, 9A6h, 9A8h, 9AAh, 9ACh, 9AEh, 9B0h
.text:0041EF04                 dd 9B2h, 9B4h, 9B6h, 9B8h, 9BAh, 9BCh, 9BEh, 9C0h, 9C2h
.text:0041EF04                 dd 9C4h, 9C6h, 9C8h, 9CAh, 9CCh, 9CEh, 9D0h, 9D2h, 9D4h
.text:0041EF04                 dd 9D6h, 9D8h, 9DAh, 9DCh, 9DEh, 9E0h, 9E2h, 9E4h, 9E6h
.text:0041EF04                 dd 9E8h, 9EAh, 9ECh, 9EEh, 9F0h, 9F2h, 9F4h, 9F6h, 9F8h
.text:0041EF04                 dd 9FAh, 9FCh, 9FEh, 0A00h, 0A02h, 0A04h, 0A06h, 0A08h
.text:0041EF04                 dd 0A0Ah, 0A0Ch, 0A0Eh, 0A10h, 0A12h, 0A14h, 0A16h, 0A18h
.text:0041EF04                 dd 0A1Ah, 0A1Ch, 0A1Eh, 0A20h, 0A22h, 0A24h, 0A26h, 0A28h
.text:0041EF04                 dd 0A2Ah, 0A2Ch, 0A2Eh, 0A30h, 0A32h, 0A34h, 0A36h, 0A38h
.text:0041EF04                 dd 0A3Ah, 0A3Ch, 0A3Eh, 0A40h, 0A42h, 0A44h, 0A46h, 0A48h
.text:0041EF04                 dd 0A4Ah, 0A4Ch, 0A4Eh, 0A50h, 0A52h, 0A54h, 0A56h, 0A58h
.text:0041EF04                 dd 0A5Ah, 0A5Ch, 0A5Eh, 0A60h, 0A62h, 0A64h, 0A66h, 0A68h
.text:0041EF04                 dd 0A6Ah, 0A6Ch, 0A6Eh, 0A70h, 0A72h, 0A74h, 0A76h, 0A78h
.text:0041EF04                 dd 0A7Ah, 0A7Ch, 0A7Eh, 0A80h, 0A82h, 0A84h, 0A86h, 0A88h
.text:0041EF04                 dd 0A8Ah, 0A8Ch, 0A8Eh, 0A0h, 0A9h, 0ABh, 0ADh, 0AEh, 0B5h
.text:0041EF04                 dd 0B8h, 0BBh, 0BCh, 0BDh, 0BEh, 0C6h, 0D7h, 0DFh, 0E6h
.text:0041EF04                 dd 132h, 133h, 149h, 2 dup(152h), 2 dup(153h), 17Fh, 1C7h
.text:0041EF04                 dd 1C8h, 1C9h, 1CAh, 1CBh, 1CCh, 1F1h, 1F2h, 1F3h, 2BCh
.text:0041EF04                 dd 2C6h, 2C8h, 2CBh, 2CDh, 2D0h, 2DCh, 2002h, 2003h, 2004h
.text:0041EF04                 dd 2005h, 2006h, 2008h, 2009h, 200Ah, 200Bh, 2010h, 2011h
.text:0041EF04                 dd 2012h, 2013h, 2014h, 2015h, 2018h, 2019h, 201Ah, 201Bh
.text:0041EF04                 dd 201Ch, 201Dh, 201Eh, 201Fh, 2020h, 2022h, 2024h, 2025h
.text:0041EF04                 dd 2026h, 202Fh, 2035h, 2036h, 2037h, 2039h, 203Ah, 203Ch
.text:0041EF04                 dd 2047h, 2048h, 2049h, 205Fh, 2060h, 2061h, 2062h, 2063h
.text:0041EF04                 dd 20A8h, 20ACh, 2100h, 2101h, 2102h, 2105h, 2106h, 210Ah
.text:0041EF04                 dd 210Bh, 210Ch, 210Dh, 210Eh, 2110h, 2111h, 2112h, 2113h
.text:0041EF04                 dd 2115h, 2116h, 2119h, 211Ah, 211Bh, 211Ch, 211Dh, 2121h
.text:0041EF04                 dd 2122h, 2124h, 2126h, 2128h, 212Ch, 212Dh, 212Eh, 212Fh
.text:0041EF04                 dd 2130h, 2131h, 2133h, 2134h, 2139h, 2145h, 2146h, 2147h
.text:0041EF04                 dd 2148h, 2149h, 2153h, 2154h, 2155h, 2156h, 2157h, 2158h
.text:0041EF04                 dd 2159h, 215Ah, 215Bh, 215Ch, 215Dh, 215Eh, 215Fh, 2160h
.text:0041EF04                 dd 2161h, 2162h, 2163h, 2164h, 2165h, 2166h, 2167h, 2168h
.text:0041EF04                 dd 2169h, 216Ah, 216Bh, 216Ch, 216Dh, 216Eh, 216Fh, 2170h
.text:0041EF04                 dd 2171h, 2172h, 2173h, 2174h, 2175h, 2176h, 2177h, 2178h
.text:0041EF04                 dd 2179h, 217Ah, 217Bh, 217Ch, 217Dh, 217Eh, 217Fh, 2190h
.text:0041EF04                 dd 2192h, 2194h, 21D0h, 21D2h, 21D4h, 2212h, 2215h, 2216h
.text:0041EF04                 dd 2217h, 2223h, 2236h, 223Ch, 2264h, 2265h, 226Ah, 226Bh
.text:0041EF04                 dd 22D8h
.text:0041F70C                 dd 22D9h, 2400h, 2401h, 2402h, 2403h, 2404h, 2405h, 2406h
.text:0041F70C                 dd 2407h, 2408h, 2409h, 240Ah, 240Bh, 240Ch, 240Dh, 240Eh
.text:0041F70C                 dd 240Fh, 2410h, 2411h, 2412h, 2413h, 2414h, 2415h, 2416h
.text:0041F70C                 dd 2417h, 2418h, 2419h, 241Ah, 241Bh, 241Ch, 241Dh, 241Eh
.text:0041F70C                 dd 241Fh, 2420h, 2421h, 2423h, 2424h, 2460h, 2461h, 2462h
.text:0041F70C                 dd 2463h, 2464h, 2465h, 2466h, 2467h, 2468h, 2469h, 246Ah
.text:0041F70C                 dd 246Bh, 246Ch, 246Dh, 246Eh, 246Fh, 2470h, 2471h, 2472h
.text:0041F70C                 dd 2473h, 2474h, 2475h, 2476h, 2477h, 2478h, 2479h, 247Ah
.text:0041F70C                 dd 247Bh, 247Ch, 247Dh, 247Eh, 247Fh, 2480h, 2481h, 2482h
.text:0041F70C                 dd 2483h, 2484h, 2485h, 2486h, 2487h, 2488h, 2489h, 248Ah
.text:0041F70C                 dd 248Bh, 248Ch, 248Dh, 248Eh, 248Fh, 2490h, 2491h, 2492h
.text:0041F70C                 dd 2493h, 2494h, 2495h, 2496h, 2497h, 2498h, 2499h, 249Ah
.text:0041F70C                 dd 249Bh, 249Ch, 249Dh, 249Eh, 249Fh, 24A0h, 24A1h, 24A2h
.text:0041F70C                 dd 24A3h, 24A4h, 24A5h, 24A6h, 24A7h, 24A8h, 24A9h, 24AAh
.text:0041F70C                 dd 24ABh, 24ACh, 24ADh, 24AEh, 24AFh, 24B0h, 24B1h, 24B2h
.text:0041F70C                 dd 24B3h, 24B4h, 24B5h, 24B6h, 24B7h, 24B8h, 24B9h, 24BAh
.text:0041F70C                 dd 24BBh, 24BCh, 24BDh, 24BEh, 24BFh, 24C0h, 24C1h, 24C2h
.text:0041F70C                 dd 24C3h, 24C4h, 24C5h, 24C6h, 24C7h, 24C8h, 24C9h, 24CAh
.text:0041F70C                 dd 24CBh, 24CCh, 24CDh, 24CEh, 24CFh, 24D0h, 24D1h, 24D2h
.text:0041F70C                 dd 24D3h, 24D4h, 24D5h, 24D6h, 24D7h, 24D8h, 24D9h, 24DAh
.text:0041F70C                 dd 24DBh, 24DCh, 24DDh, 24DEh, 24DFh, 24E0h, 24E1h, 24E2h
.text:0041F70C                 dd 24E3h, 24E4h, 24E5h, 24E6h, 24E7h, 24E8h, 24E9h, 24EAh
.text:0041F70C                 dd 2500h, 2502h, 250Ch, 2510h, 2514h, 2518h, 251Ch, 2524h
.text:0041F70C                 dd 252Ch, 2534h, 253Ch, 25E6h, 2A74h, 2A75h, 2A76h, 3000h
.text:0041F70C                 dd 30A0h, 3251h, 3252h, 3253h, 3254h, 3255h, 3256h, 3257h
.text:0041F70C                 dd 3258h, 3259h, 325Ah, 325Bh, 325Ch, 325Dh, 325Eh, 325Fh
.text:0041F70C                 dd 32B1h, 32B2h, 32B3h, 32B4h, 32B5h, 32B6h, 32B7h, 32B8h
.text:0041F70C                 dd 32B9h, 32BAh, 32BBh, 32BCh, 32BDh, 32BEh, 32BFh, 3371h
.text:0041F70C                 dd 3372h, 3373h, 3374h, 3375h, 3376h, 3380h, 3381h, 3382h
.text:0041F70C                 dd 3383h, 3384h, 3385h, 3386h, 3387h, 3388h, 3389h, 338Ah
.text:0041F70C                 dd 338Bh, 338Ch, 338Dh, 338Eh, 338Fh, 3390h, 3391h, 3392h
.text:0041F70C                 dd 3393h, 3394h, 3395h, 3396h, 3397h, 3398h, 3399h, 339Ah
.text:0041F70C                 dd 339Bh, 339Ch, 339Dh, 339Eh, 339Fh, 33A0h, 33A1h, 33A2h
.text:0041F70C                 dd 33A3h, 33A4h, 33A5h, 33A6h, 33A7h, 33A8h, 33A9h, 33AAh
.text:0041F70C                 dd 33ABh, 33ACh, 33ADh, 33AEh, 33AFh, 33B0h, 33B1h, 33B2h
.text:0041F70C                 dd 33B3h, 33B4h, 33B5h, 33B6h, 33B7h, 33B8h, 33B9h, 33BAh
.text:0041F70C                 dd 33BBh, 33BCh, 33BDh, 33BEh, 33BFh, 33C2h, 33C3h, 33C4h
.text:0041F70C                 dd 33C5h, 33C6h, 33C7h, 33C8h, 33C9h, 33CAh, 33CBh, 33CCh
.text:0041F70C                 dd 33CDh, 33CEh, 33CFh, 33D0h, 33D1h, 33D2h, 33D3h, 33D4h
.text:0041F70C                 dd 33D5h, 33D6h, 33D7h, 33D8h, 33D9h, 33DAh, 33DBh, 33DCh
.text:0041F70C                 dd 33DDh, 0FB00h, 0FB01h, 0FB02h, 0FB03h, 0FB04h, 0FB06h
.text:0041F70C                 dd 0FB29h, 0FE00h, 0FE01h, 0FE02h, 0FE03h, 0FE04h, 0FE05h
.text:0041F70C                 dd 0FE06h, 0FE07h, 0FE08h, 0FE09h, 0FE0Ah, 0FE0Bh, 0FE0Ch
.text:0041F70C                 dd 0FE0Dh, 0FE0Eh, 0FE0Fh, 0FE4Dh, 0FE4Eh, 0FE4Fh, 0FE50h
.text:0041F70C                 dd 0FE52h, 0FE54h, 0FE55h, 0FE56h, 0FE57h, 0FE59h, 0FE5Ah
.text:0041F70C                 dd 0FE5Bh, 0FE5Ch, 0FE5Fh, 0FE60h, 0FE61h, 0FE62h, 0FE63h
.text:0041F70C                 dd 0FE64h, 0FE65h, 0FE66h, 0FE68h, 0FE69h, 0FE6Ah, 0FE6Bh
.text:0041F70C                 dd 0FEFFh, 0FF01h, 0FF02h, 0FF03h, 0FF04h, 0FF05h, 0FF06h
.text:0041F70C                 dd 0FF07h, 0FF08h, 0FF09h, 0FF0Ah, 0FF0Bh, 0FF0Ch, 0FF0Dh
.text:0041F70C                 dd 0FF0Eh, 0FF0Fh, 0FF10h, 0FF11h, 0FF12h, 0FF13h, 0FF14h
.text:0041F70C                 dd 0FF15h, 0FF16h, 0FF17h, 0FF18h, 0FF19h, 0FF1Ah, 0FF1Bh
.text:0041F70C                 dd 0FF1Ch, 0FF1Dh, 0FF1Eh, 0FF1Fh, 0FF20h, 0FF21h, 0FF22h
.text:0041F70C                 dd 0FF23h, 0FF24h, 0FF25h, 0FF26h, 0FF27h, 0FF28h, 0FF29h
.text:0041F70C                 dd 0FF2Ah, 0FF2Bh, 0FF2Ch, 0FF2Dh, 0FF2Eh, 0FF2Fh, 0FF30h
.text:0041F70C                 dd 0FF31h, 0FF32h, 0FF33h, 0FF34h, 0FF35h, 0FF36h, 0FF37h
.text:0041F70C                 dd 0FF38h, 0FF39h, 0FF3Ah, 0FF3Bh, 0FF3Ch, 0FF3Dh, 0FF3Eh
.text:0041F70C                 dd 0FF3Fh, 0FF40h, 0FF41h, 0FF42h, 0FF43h, 0FF44h, 0FF45h
.text:0041F70C                 dd 0FF46h, 0FF47h, 0FF48h, 0FF49h, 0FF4Ah, 0FF4Bh, 0FF4Ch
.text:0041F70C                 dd 0FF4Dh, 0FF4Eh, 0FF4Fh, 0FF50h, 0FF51h, 0FF52h, 0FF53h
.text:0041F70C                 dd 0FF54h, 0FF55h, 0FF56h, 0FF57h, 0FF58h, 0FF59h, 0FF5Ah
.text:0041F70C                 dd 0FF5Bh, 0FF5Ch, 0FF5Dh, 0FF5Eh, 0D400h, 0D401h, 0D402h
.text:0041F70C                 dd 0D403h, 0D404h, 0D405h, 0D406h, 0D407h, 0D408h, 0D409h
.text:0041F70C                 dd 0D40Ah, 0D40Bh, 0D40Ch, 0D40Dh, 0D40Eh, 0D40Fh, 0D410h
.text:0041F70C                 dd 0D411h, 0D412h, 0D413h, 0D414h, 0D415h, 0D416h, 0D417h
.text:0041F70C                 dd 0D418h, 0D419h, 0D41Ah, 0D41Bh, 0D41Ch, 0D41Dh, 0D41Eh
.text:0041F70C                 dd 0D41Fh, 0D420h, 0D421h, 0D422h, 0D423h, 0D424h, 0D425h
.text:0041F70C                 dd 0D426h, 0D427h, 0D428h, 0D429h, 0D42Ah, 0D42Bh, 0D42Ch
.text:0041F70C                 dd 0D42Dh, 0D42Eh, 0D42Fh
.text:0041FF0C dword_41FF0C    dd 0D430h, 0D431h, 0D432h, 0D433h, 0D434h, 0D435h, 0D436h
.text:0041FF0C                 dd 0D437h, 0D438h, 0D439h, 0D43Ah, 0D43Bh, 0D43Ch, 0D43Dh
.text:0041FF0C                 dd 0D43Eh, 0D43Fh, 0D440h, 0D441h, 0D442h, 0D443h, 0D444h
.text:0041FF0C                 dd 0D445h, 0D446h, 0D447h, 0D448h, 0D449h, 0D44Ah, 0D44Bh
.text:0041FF0C                 dd 0D44Ch, 0D44Dh, 0D44Eh, 0D44Fh, 0D450h, 0D451h, 0D452h
.text:0041FF0C                 dd 0D453h, 0D454h, 0D456h, 0D457h, 0D458h, 0D459h, 0D45Ah
.text:0041FF0C                 dd 0D45Bh, 0D45Ch, 0D45Dh, 0D45Eh, 0D45Fh, 0D460h, 0D461h
.text:0041FF0C                 dd 0D462h, 0D463h, 0D464h, 0D465h, 0D466h, 0D467h, 0D468h
.text:0041FF0C                 dd 0D469h, 0D46Ah, 0D46Bh, 0D46Ch, 0D46Dh, 0D46Eh, 0D46Fh
.text:0041FF0C                 dd 0D470h, 0D471h, 0D472h, 0D473h, 0D474h, 0D475h, 0D476h
.text:0041FF0C                 dd 0D477h, 0D478h, 0D479h, 0D47Ah, 0D47Bh, 0D47Ch, 0D47Dh
.text:0041FF0C                 dd 0D47Eh, 0D47Fh, 0D480h, 0D481h, 0D482h, 0D483h, 0D484h
.text:0041FF0C                 dd 0D485h, 0D486h, 0D487h, 0D488h, 0D489h, 0D48Ah, 0D48Bh
.text:0041FF0C                 dd 0D48Ch, 0D48Dh, 0D48Eh, 0D48Fh, 0D490h, 0D491h, 0D492h
.text:0041FF0C                 dd 0D493h, 0D494h, 0D495h, 0D496h, 0D497h, 0D498h, 0D499h
.text:0041FF0C                 dd 0D49Ah, 0D49Bh, 0D49Ch, 0D49Eh, 0D49Fh, 0D4A2h, 0D4A5h
.text:0041FF0C                 dd 0D4A6h, 0D4A9h, 0D4AAh, 0D4ABh, 0D4ACh, 0D4AEh, 0D4AFh
.text:0041FF0C                 dd 0D4B0h, 0D4B1h, 0D4B2h, 0D4B3h, 0D4B4h, 0D4B5h, 0D4B6h
.text:0041FF0C                 dd 0D4B7h, 0D4B8h, 0D4B9h, 0D4BBh, 0D4BDh, 0D4BEh, 0D4BFh
.text:0041FF0C                 dd 0D4C0h, 0D4C2h, 0D4C3h, 0D4C5h, 0D4C6h, 0D4C7h, 0D4C8h
.text:0041FF0C                 dd 0D4C9h, 0D4CAh, 0D4CBh, 0D4CCh, 0D4CDh, 0D4CEh, 0D4CFh
.text:0041FF0C                 dd 0D4D0h, 0D4D1h, 0D4D2h, 0D4D3h, 0D4D4h, 0D4D5h, 0D4D6h
.text:0041FF0C                 dd 0D4D7h, 0D4D8h, 0D4D9h, 0D4DAh, 0D4DBh, 0D4DCh, 0D4DDh
.text:0041FF0C                 dd 0D4DEh, 0D4DFh, 0D4E0h, 0D4E1h, 0D4E2h, 0D4E3h, 0D4E4h
.text:0041FF0C                 dd 0D4E5h, 0D4E6h, 0D4E7h, 0D4E8h, 0D4E9h, 0D4EAh, 0D4EBh
.text:0041FF0C                 dd 0D4ECh, 0D4EDh, 0D4EEh, 0D4EFh, 0D4F0h, 0D4F1h, 0D4F2h
.text:0041FF0C                 dd 0D4F3h, 0D4F4h, 0D4F5h, 0D4F6h, 0D4F7h, 0D4F8h, 0D4F9h
.text:0041FF0C                 dd 0D4FAh, 0D4FBh, 0D4FCh, 0D4FDh, 0D4FEh, 0D4FFh, 0D500h
.text:0041FF0C                 dd 0D501h, 0D502h, 0D503h, 0D504h, 0D505h, 0D507h, 0D508h
.text:0041FF0C                 dd 0D509h, 0D50Ah, 0D50Dh, 0D50Eh, 0D50Fh, 0D510h, 0D511h
.text:0041FF0C                 dd 0D512h, 0D513h, 0D514h, 0D516h, 0D517h, 0D518h, 0D519h
.text:0041FF0C                 dd 0D51Ah, 0D51Bh, 0D51Ch, 0D51Eh, 0D51Fh, 0D520h, 0D521h
.text:0041FF0C                 dd 0D522h, 0D523h, 0D524h, 0D525h, 0D526h, 0D527h, 0D528h
.text:0041FF0C                 dd 0D529h, 0D52Ah, 0D52Bh, 0D52Ch, 0D52Dh, 0D52Eh, 0D52Fh
.text:0041FF0C                 dd 0D530h, 0D531h, 0D532h, 0D533h, 0D534h, 0D535h, 0D536h
.text:0041FF0C                 dd 0D537h, 0D538h, 0D539h, 0D53Bh, 0D53Ch, 0D53Dh, 0D53Eh
.text:0041FF0C                 dd 0D540h, 0D541h, 0D542h, 0D543h, 0D544h, 0D546h, 0D54Ah
.text:0041FF0C                 dd 0D54Bh, 0D54Ch, 0D54Dh, 0D54Eh, 0D54Fh, 0D550h, 0D552h
.text:0041FF0C                 dd 0D553h, 0D554h, 0D555h, 0D556h, 0D557h, 0D558h, 0D559h
.text:0041FF0C                 dd 0D55Ah, 0D55Bh, 0D55Ch, 0D55Dh, 0D55Eh, 0D55Fh, 0D560h
.text:0041FF0C                 dd 0D561h, 0D562h, 0D563h, 0D564h, 0D565h, 0D566h, 0D567h
.text:0041FF0C                 dd 0D568h, 0D569h, 0D56Ah, 0D56Bh, 0D56Ch, 0D56Dh, 0D56Eh
.text:0041FF0C                 dd 0D56Fh, 0D570h, 0D571h, 0D572h, 0D573h, 0D574h, 0D575h
.text:0041FF0C                 dd 0D576h, 0D577h, 0D578h, 0D579h, 0D57Ah, 0D57Bh, 0D57Ch
.text:0041FF0C                 dd 0D57Dh, 0D57Eh, 0D57Fh, 0D580h, 0D581h, 0D582h, 0D583h
.text:0041FF0C                 dd 0D584h, 0D585h, 0D586h, 0D587h, 0D588h, 0D589h, 0D58Ah
.text:0041FF0C                 dd 0D58Bh, 0D58Ch, 0D58Dh, 0D58Eh, 0D58Fh, 0D590h, 0D591h
.text:0041FF0C                 dd 0D592h, 0D593h, 0D594h, 0D595h, 0D596h, 0D597h, 0D598h
.text:0041FF0C                 dd 0D599h, 0D59Ah, 0D59Bh, 0D59Ch, 0D59Dh, 0D59Eh, 0D59Fh
.text:0041FF0C                 dd 0D5A0h, 0D5A1h, 0D5A2h, 0D5A3h, 0D5A4h, 0D5A5h, 0D5A6h
.text:0041FF0C                 dd 0D5A7h, 0D5A8h, 0D5A9h, 0D5AAh, 0D5ABh, 0D5ACh, 0D5ADh
.text:0041FF0C                 dd 0D5AEh, 0D5AFh, 0D5B0h, 0D5B1h, 0D5B2h, 0D5B3h, 0D5B4h
.text:0041FF0C                 dd 0D5B5h, 0D5B6h, 0D5B7h, 0D5B8h, 0D5B9h, 0D5BAh, 0D5BBh
.text:0041FF0C                 dd 0D5BCh, 0D5BDh, 0D5BEh, 0D5BFh, 0D5C0h, 0D5C1h, 0D5C2h
.text:0041FF0C                 dd 0D5C3h, 0D5C4h, 0D5C5h, 0D5C6h, 0D5C7h, 0D5C8h, 0D5C9h
.text:0041FF0C                 dd 0D5CAh, 0D5CBh, 0D5CCh, 0D5CDh, 0D5CEh, 0D5CFh, 0D5D0h
.text:0041FF0C                 dd 0D5D1h, 0D5D2h, 0D5D3h, 0D5D4h, 0D5D5h, 0D5D6h, 0D5D7h
.text:0041FF0C                 dd 0D5D8h, 0D5D9h, 0D5DAh, 0D5DBh, 0D5DCh, 0D5DDh, 0D5DEh
.text:0041FF0C                 dd 0D5DFh, 0D5E0h, 0D5E1h, 0D5E2h, 0D5E3h, 0D5E4h, 0D5E5h
.text:0041FF0C                 dd 0D5E6h, 0D5E7h, 0D5E8h, 0D5E9h, 0D5EAh, 0D5EBh, 0D5ECh
.text:0041FF0C                 dd 0D5EDh, 0D5EEh, 0D5EFh, 0D5F0h, 0D5F1h, 0D5F2h, 0D5F3h
.text:0041FF0C                 dd 0D5F4h, 0D5F5h, 0D5F6h, 0D5F7h, 0D5F8h, 0D5F9h, 0D5FAh
.text:0041FF0C                 dd 0D5FBh, 0D5FCh, 0D5FDh, 0D5FEh, 0D5FFh, 0D600h, 0D601h
.text:0041FF0C                 dd 0D602h, 0D603h, 0D604h, 0D605h, 0D606h, 0D607h, 0D608h
.text:0041FF0C                 dd 0D609h, 0D60Ah, 0D60Bh, 0D60Ch, 0D60Dh, 0D60Eh, 0D60Fh
.text:0041FF0C                 dd 0D610h, 0D611h, 0D612h, 0D613h, 0D614h, 0D615h, 0D616h
.text:0041FF0C                 dd 0D617h, 0D618h, 0D619h, 0D61Ah, 0D61Bh, 0D61Ch, 0D61Dh
.text:0041FF0C                 dd 0D61Eh, 0D61Fh, 0D620h, 0D621h, 0D622h, 0D623h, 0D624h
.text:0041FF0C                 dd 0D625h, 0D626h, 0D627h, 0D628h, 0D629h, 0D62Ah, 0D62Bh
.text:0041FF0C                 dd 0D62Ch, 0D62Dh, 0D62Eh, 0D62Fh, 0D630h, 0D631h, 0D632h
.text:0041FF0C                 dd 0D633h, 0D634h, 0D635h, 0D636h, 0D637h, 0D638h, 0D639h
.text:0041FF0C                 dd 0D63Ah, 0D63Bh, 0D63Ch, 0D63Dh, 0D63Eh, 0D63Fh, 0D640h
.text:0041FF0C                 dd 0D641h, 0D642h, 0D643h, 0D644h, 0D645h, 0D646h, 0D647h
.text:0041FF0C                 dd 0D648h
.text:0042070C                 dd 0D649h, 0D64Ah, 0D64Bh, 0D64Ch, 0D64Dh, 0D64Eh, 0D64Fh
.text:0042070C                 dd 0D650h, 0D651h, 0D652h, 0D653h, 0D654h, 0D655h, 0D656h
.text:0042070C                 dd 0D657h, 0D658h, 0D659h, 0D65Ah, 0D65Bh, 0D65Ch, 0D65Dh
.text:0042070C                 dd 0D65Eh, 0D65Fh, 0D660h, 0D661h, 0D662h, 0D663h, 0D664h
.text:0042070C                 dd 0D665h, 0D666h, 0D667h, 0D668h, 0D669h, 0D66Ah, 0D66Bh
.text:0042070C                 dd 0D66Ch, 0D66Dh, 0D66Eh, 0D66Fh, 0D670h, 0D671h, 0D672h
.text:0042070C                 dd 0D673h, 0D674h, 0D675h, 0D676h, 0D677h, 0D678h, 0D679h
.text:0042070C                 dd 0D67Ah, 0D67Bh, 0D67Ch, 0D67Dh, 0D67Eh, 0D67Fh, 0D680h
.text:0042070C                 dd 0D681h, 0D682h, 0D683h, 0D684h, 0D685h, 0D686h, 0D687h
.text:0042070C                 dd 0D688h, 0D689h, 0D68Ah, 0D68Bh, 0D68Ch, 0D68Dh, 0D68Eh
.text:0042070C                 dd 0D68Fh, 0D690h, 0D691h, 0D692h, 0D693h, 0D694h, 0D695h
.text:0042070C                 dd 0D696h, 0D697h, 0D698h, 0D699h, 0D69Ah, 0D69Bh, 0D69Ch
.text:0042070C                 dd 0D69Dh, 0D69Eh, 0D69Fh, 0D6A0h, 0D6A1h, 0D6A2h, 0D6A3h
.text:0042070C                 dd 0D7CEh, 0D7CFh, 0D7D0h, 0D7D1h, 0D7D2h, 0D7D3h, 0D7D4h
.text:0042070C                 dd 0D7D5h, 0D7D6h, 0D7D7h, 0D7D8h, 0D7D9h, 0D7DAh, 0D7DBh
.text:0042070C                 dd 0D7DCh, 0D7DDh, 0D7DEh, 0D7DFh, 0D7E0h, 0D7E1h, 0D7E2h
.text:0042070C                 dd 0D7E3h, 0D7E4h, 0D7E5h, 0D7E6h, 0D7E7h, 0D7E8h, 0D7E9h
.text:0042070C                 dd 0D7EAh, 0D7EBh, 0D7ECh, 0D7EDh, 0D7EEh, 0D7EFh, 0D7F0h
.text:0042070C                 dd 0D7F1h, 0D7F2h, 0D7F3h, 0D7F4h, 0D7F5h, 0D7F6h, 0D7F7h
.text:0042070C                 dd 0D7F8h, 0D7F9h, 0D7FAh, 0D7FBh, 0D7FCh, 0D7FDh, 0D7FEh
.text:0042070C                 dd 0D7FFh, 0
.text:00420944                 dd 3, 8, 0Ch, 0Fh, 14h, 17h, 1Ah, 1Eh, 25h, 2Ch, 33h, 37h
.text:00420944                 dd 3Ah, 3Eh, 42h, 46h, 4Ah, 4Eh, 52h, 56h, 5Ah, 5Eh, 61h
.text:00420944                 dd 65h, 69h, 6Dh, 71h, 75h, 79h, 7Dh, 81h, 85h, 88h, 8Bh
.text:00420944                 dd 8Eh, 91h, 94h, 97h, 9Ah, 9Dh, 0A0h, 0A3h, 0A6h, 0A9h
.text:00420944                 dd 0ACh, 0AFh, 0B2h, 0B4h, 0B7h, 0BAh, 0BDh, 0C0h, 0C4h
.text:00420944                 dd 0C7h, 0CAh, 0CDh, 0D0h, 0D3h, 0D6h, 0D9h, 0DDh, 0E0h
.text:00420944                 dd 0E3h, 0E6h, 0E9h, 0EDh, 0F2h, 0F5h, 0F8h, 0FCh, 101h
.text:00420944                 dd 104h, 107h, 10Bh, 10Fh, 113h, 117h, 11Ah, 11Ch, 11Eh
.text:00420944                 dd 120h, 122h, 126h, 12Bh, 130h, 135h, 138h, 13Dh, 142h
.text:00420944                 dd 145h, 148h, 14Bh, 14Eh, 151h, 154h, 157h, 15Ah, 15Dh
.text:00420944                 dd 160h, 164h, 167h, 16Ah, 16Dh, 170h, 173h, 178h, 17Eh
.text:00420944                 dd 181h, 186h, 189h, 18Ch, 18Fh, 192h, 195h, 198h, 19Bh
.text:00420944                 dd 19Eh, 1A1h, 1A4h, 1A7h, 1AAh, 1ADh, 1B0h, 1B3h, 1BAh
.text:00420944                 dd 1C1h, 1C8h, 1CFh, 1D6h, 1DDh, 1E4h, 1EBh, 1F2h, 1F9h
.text:00420944                 dd 200h, 207h, 20Ch, 20Fh, 213h, 218h, 21Ch, 21Fh, 223h
.text:00420944                 dd 228h, 22Eh, 232h, 235h, 239h, 23Eh, 241h, 244h, 247h
.text:00420944                 dd 24Ah, 24Dh, 251h, 256h, 25Ah, 25Dh, 261h, 266h, 26Ch
.text:00420944                 dd 270h, 273h, 277h, 27Ch, 27Fh, 282h, 285h, 288h, 28Ch
.text:00420944                 dd 290h, 295h, 299h, 29Dh, 2A2h, 2A5h, 2A8h, 2ABh, 2AEh
.text:00420944                 dd 2B1h, 2B4h, 2B7h, 2BBh, 2BFh, 2C3h, 2C7h, 2CCh, 2D1h
.text:00420944                 dd 2D6h, 2DBh, 2E0h, 2E5h, 2EAh, 2EFh, 2F4h, 2F9h, 2FDh
.text:00420944                 dd 301h, 305h, 309h, 30Dh, 311h, 315h, 319h, 31Eh, 323h
.text:00420944                 dd 328h, 32Dh, 332h, 337h, 33Ch, 341h, 346h, 34Ah, 34Fh
.text:00420944                 dd 354h, 358h, 35Ch, 360h, 364h, 368h, 36Dh, 370h, 374h
.text:00420944                 dd 379h, 37Eh, 383h, 388h, 38Dh, 392h, 397h, 39Ch, 3A1h
.text:00420944                 dd 3A7h, 3ADh, 3B3h, 3B9h, 3BFh, 3C5h, 3CBh, 3D1h, 3D7h
.text:00420944                 dd 3DDh, 3E3h, 3E8h, 3EDh, 3F2h, 3F7h, 3FCh, 401h, 406h
.text:00420944                 dd 40Bh, 410h, 416h, 41Ch, 422h, 428h, 42Eh, 434h, 43Ah
.text:00420944                 dd 440h, 446h, 44Ch, 452h, 456h, 45Ah, 45Eh, 462h, 466h
.text:00420944                 dd 46Ah, 46Eh, 472h, 476h, 47Bh, 480h, 485h, 48Ah, 48Fh
.text:00420944                 dd 494h, 499h, 49Eh, 4A3h, 4A8h, 4ADh, 4B2h, 4B7h, 4BCh
.text:00420944                 dd 4C1h, 4C6h, 4CBh, 4D0h, 4D5h, 4DAh, 4DFh, 4E4h, 4E9h
.text:00420944                 dd 4EEh, 4F3h, 4F8h, 4FDh, 502h, 507h, 50Ch, 511h, 516h
.text:00420944                 dd 51Bh, 520h, 525h, 52Ah, 52Fh, 534h, 539h, 53Eh, 543h
.text:00420944                 dd 548h, 54Dh, 552h, 557h, 55Ch, 561h, 566h, 56Bh, 570h
.text:00420944                 dd 575h, 57Ah, 57Fh, 584h, 589h, 58Eh, 593h, 598h, 59Dh
.text:00420944                 dd 5A2h, 5A7h, 5ACh, 5B1h, 5B6h, 5BBh, 5C0h, 5C5h, 5CAh
.text:00420944                 dd 5CFh, 5D4h, 5D9h, 5DEh, 5E3h, 5E8h, 5EDh, 5F2h, 5F7h
.text:00420944                 dd 5FCh, 601h, 606h, 60Bh, 610h, 615h, 61Ah, 61Fh, 624h
.text:00420944                 dd 629h, 62Eh, 633h, 638h, 63Bh, 63Eh, 641h, 644h, 647h
.text:00420944                 dd 64Ah, 64Dh, 650h, 653h, 656h, 659h, 65Ch, 661h, 665h
.text:00420944                 dd 66Ah, 66Dh, 670h, 676h, 67Ch, 682h, 688h, 68Eh, 694h
.text:00420944                 dd 69Ah, 6A0h, 6A6h, 6ACh, 6B2h, 6B8h, 6BEh, 6C4h, 6CAh
.text:00420944                 dd 6D0h, 6D6h, 6DCh, 6E2h, 6E8h, 6EEh, 6F4h, 6FAh, 700h
.text:00420944                 dd 706h, 70Ch, 712h, 718h, 71Eh, 724h, 729h, 72Dh, 731h
.text:00420944                 dd 736h, 73Ah, 73Eh, 742h, 746h, 74Ah, 74Eh, 752h, 756h
.text:00420944                 dd 75Ah, 75Eh, 763h, 769h, 76Dh, 771h, 775h, 779h, 77Dh
.text:00420944                 dd 781h, 785h, 78Ah, 78Fh, 794h, 799h, 79Dh, 7A1h, 7A5h
.text:00420944                 dd 7A9h, 7ADh, 7B1h, 7B5h, 7B9h, 7BDh, 7C1h, 7C7h, 7CDh
.text:00420944                 dd 7D2h, 7D8h, 7DEh, 7E4h, 7E9h, 7EFh, 7F4h, 7FBh, 7FFh
.text:00420944                 dd 804h, 809h, 80Eh, 813h, 81Ah, 823h, 827h, 82Bh, 82Fh
.text:00420944                 dd 833h, 837h, 83Bh, 83Fh, 843h, 847h, 84Bh, 84Fh, 853h
.text:00420944                 dd 857h, 85Bh, 85Fh, 863h, 869h, 86Dh, 871h, 875h, 87Bh
.text:00420944                 dd 880h, 884h, 888h, 88Ch, 890h, 894h, 898h, 89Ch, 8A0h
.text:00420944                 dd 8A4h, 8A8h, 8ADh, 8B1h, 8B5h, 8BAh, 8BFh, 8C3h, 8C9h
.text:00420944                 dd 8CEh, 8D2h, 8D6h, 8DAh, 8DEh, 8E2h, 8E6h, 8EAh, 8EFh
.text:00421144                 dd 8F4h, 8F8h, 8FBh, 8FDh, 8FFh, 901h, 903h, 905h, 907h
.text:00421144                 dd 909h, 90Bh, 90Dh, 90Fh, 911h, 913h, 915h, 917h, 919h
.text:00421144                 dd 91Bh, 91Eh, 921h, 924h, 927h, 92Ah, 92Dh, 930h, 933h
.text:00421144                 dd 936h, 939h, 93Ch, 93Fh, 942h, 945h, 948h, 94Bh, 94Eh
.text:00421144                 dd 951h, 954h, 957h, 95Ah, 95Dh, 960h, 963h, 966h, 968h
.text:00421144                 dd 96Bh, 96Eh, 971h, 974h, 977h, 97Ah, 97Dh, 980h, 983h
.text:00421144                 dd 986h, 989h, 98Ch, 98Fh, 992h, 995h, 998h, 99Bh, 99Eh
.text:00421144                 dd 9A1h, 9A4h, 9A7h, 9AAh, 9ADh, 9B0h, 9B3h, 9B6h, 9B9h
.text:00421144                 dd 9BCh, 9BFh, 9C2h, 9C5h, 9C8h, 9CBh, 9CEh, 9D1h, 9D4h
.text:00421144                 dd 9D7h, 9DAh, 9DDh, 9E0h, 9E3h, 9E6h, 9E9h, 9ECh, 9EFh
.text:00421144                 dd 9F2h, 9F5h, 9F8h, 9FBh, 9FEh, 0A01h, 0A04h, 0A07h, 0A0Ah
.text:00421144                 dd 0A0Dh, 0A10h, 0A13h, 0A16h, 0A19h, 0A1Ch, 0A1Fh, 0A22h
.text:00421144                 dd 0A25h, 0A28h, 0A2Bh, 0A2Eh, 0A31h, 0A34h, 0A37h, 0A3Ah
.text:00421144                 dd 0A3Dh, 0A40h, 0A43h, 0A46h, 0A49h, 0A4Ch, 0A4Fh, 0A52h
.text:00421144                 dd 0A55h, 0A58h, 0A5Bh, 0A5Eh, 0A61h, 0A64h, 0A67h, 0A6Ah
.text:00421144                 dd 0A6Dh, 0A70h, 0A73h, 0A76h, 0A79h, 0A7Ch, 0A7Fh, 0A82h
.text:00421144                 dd 0A85h, 0A88h, 0A8Bh, 0A8Eh, 0A91h, 0A94h, 0A97h, 0A9Ah
.text:00421144                 dd 0A9Dh, 0AA0h, 0AA3h, 0AA6h, 0AA9h, 0AACh, 0AAFh, 0AB2h
.text:00421144                 dd 0AB5h, 0AB8h, 0ABBh, 0ABEh, 0AC1h, 0AC4h, 0AC7h, 0ACAh
.text:00421144                 dd 0ACDh, 0AD0h, 0AD3h, 0AD6h, 0AD9h, 0ADCh, 0ADFh, 0AE2h
.text:00421144                 dd 0AE5h, 0AE8h, 0AEBh, 0AEEh, 0AF1h, 0AF4h, 0AF7h, 0AFAh
.text:00421144                 dd 0AFDh, 0B00h, 0B03h, 0B06h, 0B09h, 0B0Ch, 0B0Fh, 0B12h
.text:00421144                 dd 0B15h, 0B18h, 0B1Bh, 0B1Eh, 0B21h, 0B24h, 0B27h, 0B2Ah
.text:00421144                 dd 0B2Dh, 0B30h, 0B33h, 0B36h, 0B39h, 0B3Ch, 0B3Fh, 0B42h
.text:00421144                 dd 0B45h, 0B48h, 0B4Bh, 0B4Eh, 0B51h, 0B54h, 0B57h, 0B5Ah
.text:00421144                 dd 0B5Dh, 0B60h, 0B63h, 0B66h, 0B69h, 0B6Ch, 0B6Fh, 0B72h
.text:00421144                 dd 0B75h, 0B78h, 0B7Bh, 0B7Eh, 0B81h, 0B84h, 0B87h, 0B8Ah
.text:00421144                 dd 0B8Dh, 0B90h, 0B93h, 0B96h, 0B99h, 0B9Ch, 0B9Fh, 0BA2h
.text:00421144                 dd 0BA5h, 0BA8h, 0BABh, 0BAEh, 0BB1h, 0BB4h, 0BB7h, 0BBAh
.text:00421144                 dd 0BBDh, 0BC0h, 0BC3h, 0BC6h, 0BC9h, 0BCCh, 0BCFh, 0BD2h
.text:00421144                 dd 0BD5h, 0BD8h, 0BDBh, 0BDEh, 0BE1h, 0BE4h, 0BE7h, 0BEAh
.text:00421144                 dd 0BEDh, 0BF0h, 0BF3h, 0BF6h, 0BF9h, 0BFCh, 0BFFh, 0C02h
.text:00421144                 dd 0C05h, 0C08h, 0C0Bh, 0C0Eh, 0C11h, 0C14h, 0C17h, 0C1Ah
.text:00421144                 dd 0C1Dh, 0C20h, 0C23h, 0C26h, 0C29h, 0C2Ch, 0C2Fh, 0C32h
.text:00421144                 dd 0C35h, 0C38h, 0C3Bh, 0C3Eh, 0C41h, 0C44h, 0C47h, 0C4Ah
.text:00421144                 dd 0C4Dh, 0C50h, 0C53h, 0C56h, 0C59h, 0C5Ch, 0C5Fh, 0C62h
.text:00421144                 dd 0C65h, 0C68h, 0C6Bh, 0C6Eh, 0C71h, 0C74h, 0C77h, 0C7Ah
.text:00421144                 dd 0C7Dh, 0C80h, 0C83h, 0C86h, 0C89h, 0C8Ch, 0C8Fh, 0C92h
.text:00421144                 dd 0C95h, 0C98h, 0C9Bh, 0C9Eh, 0CA1h, 0CA4h, 0CA7h, 0CAAh
.text:00421144                 dd 0CADh, 0CB0h, 0CB3h, 0CB6h, 0CB9h, 0CBCh, 0CBFh, 0CC2h
.text:00421144                 dd 0CC5h, 0CC8h, 0CCBh, 0CCEh, 0CD1h, 0CD4h, 0CD7h, 0CDAh
.text:00421144                 dd 0CDDh, 0CE0h, 0CE3h, 0CE6h, 0CE9h, 0CECh, 0CEFh, 0CF2h
.text:00421144                 dd 0CF5h, 0CF8h, 0CFBh, 0CFEh, 0D01h, 0D04h, 0D07h, 0D0Ah
.text:00421144                 dd 0D0Dh, 0D10h, 0D13h, 0D16h, 0D19h, 0D1Ch, 0D1Fh, 0D22h
.text:00421144                 dd 0D25h, 0D28h, 0D2Bh, 0D2Eh, 0D31h, 0D34h, 0D37h, 0D3Ah
.text:00421144                 dd 0D3Dh, 0D40h, 0D43h, 0D46h, 0D49h, 0D4Ch, 0D4Fh, 0D52h
.text:00421144                 dd 0D55h, 0D58h, 0D5Bh, 0D5Eh, 0D61h, 0D64h, 0D67h, 0D6Ah
.text:00421144                 dd 0D6Dh, 0D70h, 0D73h, 0D76h, 0D79h, 0D7Ch, 0D7Fh, 0D82h
.text:00421144                 dd 0D85h, 0D88h, 0D8Bh, 0D8Eh, 0D91h, 0D94h, 0D97h, 0D9Ah
.text:00421144                 dd 0D9Dh, 0DA0h, 0DA3h, 0DA6h, 0DA9h, 0DACh, 0DAFh, 0DB2h
.text:00421144                 dd 0DB5h, 0DB8h, 0DBBh, 0DBEh, 0DC1h, 0DC4h, 0DC7h, 0DCAh
.text:00421144                 dd 0DCDh, 0DD0h, 0DD3h, 0DD6h, 0DD9h, 0DDCh, 0DDFh, 0DE2h
.text:00421144                 dd 0DE5h, 0DE8h, 0DEBh, 0DEEh, 0DF1h, 0DF4h, 0DF7h, 0DFAh
.text:00421144                 dd 0DFDh, 0E00h, 0E03h, 0E06h, 0E09h, 0E0Ch, 0E0Fh, 0E12h
.text:00421144                 dd 0E15h, 0E18h, 0E1Bh, 0E1Eh, 0E21h, 0E24h, 0E27h, 0E2Ah
.text:00421144                 dd 0E2Dh, 0E30h, 0E33h, 0E36h, 0E39h, 0E3Ch, 0E3Fh, 0E42h
.text:00421144                 dd 0E45h, 0E48h, 0E4Bh, 0E4Eh, 0E51h, 0E54h, 0E57h, 0E5Ah
.text:00421144                 dd 0E5Dh, 0E60h, 0E63h, 0E66h, 0E69h, 0E6Ch, 0E6Fh, 0E72h
.text:00421144                 dd 0E75h, 0E78h, 0E7Bh, 0E7Eh, 0E81h, 0E84h, 0E87h, 0E8Ah
.text:00421144                 dd 0E8Dh, 0E90h, 0E93h, 0E96h, 0E99h, 0E9Ch, 0E9Fh, 0EA2h
.text:00421144                 dd 0EA5h, 0EA8h, 0EABh, 0EAEh, 0EB1h, 0EB4h, 0EB7h, 0EBAh
.text:00421144                 dd 0EBDh, 0EC0h, 0EC3h, 0EC6h, 0EC9h, 0ECCh, 0ECFh, 0ED2h
.text:00421144                 dd 0ED5h, 0ED8h, 0EDBh, 0EDEh, 0EE1h
.text:00421944                 dd 0EE4h, 0EE7h, 0EEAh, 0EEDh, 0EF0h, 0EF3h, 0EF6h, 0EF9h
.text:00421944                 dd 0EFCh, 0EFFh, 0F02h, 0F05h, 0F08h, 0F0Bh, 0F0Eh, 0F11h
.text:00421944                 dd 0F14h, 0F17h, 0F1Ah, 0F1Dh, 0F20h, 0F23h, 0F26h, 0F29h
.text:00421944                 dd 0F2Ch, 0F2Fh, 0F32h, 0F35h, 0F38h, 0F3Bh, 0F3Eh, 0F41h
.text:00421944                 dd 0F44h, 0F47h, 0F4Ah, 0F4Dh, 0F50h, 0F53h, 0F56h, 0F59h
.text:00421944                 dd 0F5Ch, 0F5Fh, 0F62h, 0F65h, 0F68h, 0F6Bh, 0F6Eh, 0F71h
.text:00421944                 dd 0F74h, 0F77h, 0F7Ah, 0F7Dh, 0F80h, 0F83h, 0F86h, 0F89h
.text:00421944                 dd 0F8Ch, 0F8Fh, 0F92h, 0F95h, 0F98h, 0F9Bh, 0F9Eh, 0FA1h
.text:00421944                 dd 0FA4h, 0FA7h, 0FAAh, 0FADh, 0FB0h, 0FB3h, 0FB6h, 0FB9h
.text:00421944                 dd 0FBCh, 0FBFh, 0FC2h, 0FC5h, 0FC8h, 0FCBh, 0FCEh, 0FD1h
.text:00421944                 dd 0FD4h, 0FD7h, 0FDAh, 0FDDh, 0FE0h, 0FE3h, 0FE6h, 0FE9h
.text:00421944                 dd 0FECh, 0FEFh, 0FF2h, 0FF5h, 0FF8h, 0FFBh, 0FFEh, 1001h
.text:00421944                 dd 1004h, 1007h, 100Ah, 100Dh, 1010h, 1013h, 1016h, 1019h
.text:00421944                 dd 101Ch, 101Fh, 1022h, 1025h, 1028h, 102Bh, 102Eh, 1031h
.text:00421944                 dd 1034h, 1037h, 103Ah, 103Dh, 1040h, 1043h, 1046h, 1049h
.text:00421944                 dd 104Ch, 104Fh, 1052h, 1055h, 1058h, 105Bh, 105Eh, 1061h
.text:00421944                 dd 1064h, 1067h, 106Ah, 106Dh, 1070h, 1073h, 1076h, 1079h
.text:00421944                 dd 107Ch, 107Fh, 1082h, 1085h, 1088h, 108Bh, 108Eh, 1091h
.text:00421944                 dd 1094h, 1097h, 109Ah, 109Dh, 10A0h, 10A3h, 10A6h, 10A9h
.text:00421944                 dd 10ACh, 10AFh, 10B2h, 10B5h, 10B8h, 10BBh, 10BEh, 10C1h
.text:00421944                 dd 10C4h, 10C7h, 10CAh, 10CDh, 10D0h, 10D3h, 10D6h, 10D9h
.text:00421944                 dd 10DCh, 10DFh, 10E2h, 10E5h, 10E8h, 10EBh, 10EEh, 10F1h
.text:00421944                 dd 10F4h, 10F7h, 10FAh, 10FDh, 1100h, 1103h, 1106h, 1109h
.text:00421944                 dd 110Ch, 110Fh, 1112h, 1115h, 1118h, 111Bh, 111Eh, 1121h
.text:00421944                 dd 1124h, 1127h, 112Ah, 112Dh, 1130h, 1133h, 1136h, 1139h
.text:00421944                 dd 113Ch, 113Fh, 1142h, 1145h, 1148h, 114Bh, 114Eh, 1151h
.text:00421944                 dd 1154h, 1157h, 115Ah, 115Dh, 1160h, 1163h, 1166h, 1169h
.text:00421944                 dd 116Ch, 116Fh, 1172h, 1175h, 1178h, 117Bh, 117Eh, 1181h
.text:00421944                 dd 1184h, 1187h, 118Ah, 118Dh, 1190h, 1193h, 1196h, 1199h
.text:00421944                 dd 119Ch, 119Fh, 11A2h, 11A5h, 11A8h, 11ABh, 11AEh, 11B1h
.text:00421944                 dd 11B4h, 11B7h, 11BAh, 11BDh, 11C0h, 11C3h, 11C6h, 11C9h
.text:00421944                 dd 11CCh, 11CFh, 11D2h, 11D5h, 11D8h, 11DBh, 11DEh, 11E1h
.text:00421944                 dd 11E4h, 11E7h, 11EAh, 11EDh, 11F0h, 11F3h, 11F6h, 11F9h
.text:00421944                 dd 11FCh, 11FFh, 1202h, 1205h, 1208h, 120Bh, 120Eh, 1211h
.text:00421944                 dd 1214h, 1217h, 121Ah, 121Dh, 1220h, 1223h, 1226h, 1229h
.text:00421944                 dd 122Ch, 122Fh, 1232h, 1235h, 1238h, 123Bh, 123Eh, 1241h
.text:00421944                 dd 1244h, 1247h, 124Ah, 124Dh, 1250h, 1253h, 1256h, 1259h
.text:00421944                 dd 125Ch, 125Fh, 1262h, 1265h, 1268h, 126Bh, 126Eh, 1271h
.text:00421944                 dd 1274h, 1277h, 127Ah, 127Dh, 1280h, 1283h, 1286h, 1289h
.text:00421944                 dd 128Ch, 128Fh, 1292h, 1295h, 1298h, 129Bh, 129Eh, 12A1h
.text:00421944                 dd 12A4h, 12A7h, 12AAh, 12ADh, 12B0h, 12B3h, 12B6h, 20h
.text:00421944                 dd 280000h, 290043h, 0
.text:00421E70                 text "UTF-16LE", '<<',0
.text:00421E76                 align 4
.text:00421E78                 text "UTF-16LE", '-',0
.text:00421E7C                 dd 280000h, 290052h, 0
.text:00421E88                 dd 75h, 2C0000h, 0
.text:00421E94                 text "UTF-16LE", '>>',0
.text:00421E9A                 align 4
.text:00421E9C a14:
.text:00421E9C                 text "UTF-16LE", ' 1/4 ',0
.text:00421EA8                 dd 200000h, 2F0031h, 200032h, 0
.text:00421EB8 a34:
.text:00421EB8                 text "UTF-16LE", ' 3/4 ',0
.text:00421EC4                 dd offset loc_410000
.text:00421EC8                 dd 45h, 780000h, 0
.text:00421ED4 aSs:
.text:00421ED4                 text "UTF-16LE", 'ss',0
.text:00421EDA                 align 4
.text:00421EDC aAe:
.text:00421EDC                 text "UTF-16LE", 'ae',0
.text:00421EE2                 align 4
.text:00421EE4 aIj:
.text:00421EE4                 text "UTF-16LE", 'IJ',0
.text:00421EEA                 align 4
.text:00421EEC aIj_0:
.text:00421EEC                 text "UTF-16LE", 'ij',0
.text:00421EF2                 align 4
.text:00421EF4 aN:
.text:00421EF4                 text "UTF-16LE", 27h,'n',0
.text:00421EFA                 align 4
.text:00421EFC aOe:
.text:00421EFC                 text "UTF-16LE", 'OE',0
.text:00421F02                 align 4
.text:00421F04 aOe_0:
.text:00421F04                 text "UTF-16LE", 'OE',0
.text:00421F0A                 align 4
.text:00421F0C aOe_1:
.text:00421F0C                 text "UTF-16LE", 'oe',0
.text:00421F12                 align 4
.text:00421F14 aOe_2:
.text:00421F14                 text "UTF-16LE", 'oe',0
.text:00421F1A                 align 4
.text:00421F1C aS_7:
.text:00421F1C                 text "UTF-16LE", 's',0
.text:00421F20                 dd 4C0000h, 4Ah, 4C0000h, 6Ah, 6C0000h, 6Ah, 4E0000h, 4Ah
.text:00421F20                 dd 4E0000h, 6Ah, 6E0000h, 6Ah, 440000h, 5Ah, 440000h, 7Ah
.text:00421F20                 dd 640000h, 7Ah, 270000h, 0
.text:00421F70                 dd 5Eh, 270000h, 0
.text:00421F7C                 dd 60h, 5F0000h, 0
.text:00421F88                 dd 3Ah, 7E0000h, 0
.text:00421F94                 dd 20h, 200000h, 0
.text:00421FA0                 dd 20h, 200000h, 0
.text:00421FAC                 dd 20h, 200000h, 0
.text:00421FB8                 dd 20h, 200000h, 2 dup(0)
.text:00421FC8                 align 20h
.text:00421FE0                 text "UTF-16LE", '--',0
.text:00421FE6                 align 4
.text:00421FE8                 text "UTF-16LE", '-',0
.text:00421FEC                 dd 270000h, 0
.text:00421FF4                 dd 27h, 2C0000h, 0
.text:00422000                 dd 27h, 220000h, 0
.text:0042200C                 dd 22h, 2C0000h, 2Ch, 220000h, 0
.text:00422020                 dd 2Bh, 6F0000h, 0
.text:0042202C                 dd 2Eh, 2E0000h, 2Eh, 2E0000h, 2E002Eh, 0
.text:00422044                 dd 20h, 600000h, 0
.text:00422050                 text "UTF-16LE", '``',0
.text:00422056                 align 4
.text:00422058                 text "UTF-16LE", '```',0
.text:00422060                 dd 3C0000h, 0
.text:00422068                 dd 3Eh, 210000h, 21h, 3F0000h, 3Fh, 3F0000h, 21h, 210000h
.text:00422068                 dd 3Fh, 200000h, 5 dup(0)
.text:004220A4 aRs:
.text:004220A4                 text "UTF-16LE", 'Rs',0
.text:004220AA                 align 4
.text:004220AC aEur:
.text:004220AC                 text "UTF-16LE", 'EUR',0
.text:004220B4                 dd 610000h, 63002Fh, 0
.text:004220C0 aAS:
.text:004220C0                 text "UTF-16LE", 'a/s',0
.text:004220C8                 dd 430000h, 0
.text:004220D0 aCO:
.text:004220D0                 text "UTF-16LE", 'c/o',0
.text:004220D8                 dd 630000h, 75002Fh, 0
.text:004220E4                 dd 67h, 480000h, 0
.text:004220F0                 dd 48h, 480000h, 0
.text:004220FC                 dd 68h, 490000h, 0
.text:00422108                 dd 49h, 4C0000h, 0
.text:00422114                 dd 6Ch, 4E0000h, 0
.text:00422120 aNo:
.text:00422120                 text "UTF-16LE", 'No',0
.text:00422126                 align 4
.text:00422128 aP:
.text:00422128                 text "UTF-16LE", 'P',0
.text:0042212C                 dd 510000h, 0
.text:00422134                 dd 52h, 520000h, 0
.text:00422140                 dd 52h, 540000h, 4C0045h, 0
.text:00422150 aTm:
.text:00422150                 text "UTF-16LE", '(TM)',0
.text:0042215A                 align 4
.text:0042215C aZ:
.text:0042215C                 text "UTF-16LE", 'Z',0
.text:00422160                 dd 4F0000h, 6D0068h, 0
.text:0042216C                 dd 5Ah, 420000h, 0
.text:00422178                 dd 43h, 650000h, 0
.text:00422184                 dd 65h, 450000h, 0
.text:00422190                 dd 46h, 4D0000h, 0
.text:0042219C                 dd 6Fh, 690000h, 0
.text:004221A8                 dd 44h, 640000h, 0
.text:004221B4                 dd 65h, 690000h, 0
.text:004221C0                 dd 6Ah, 200000h, 2F0031h, 200033h, 0
.text:004221D4 a23:
.text:004221D4                 text "UTF-16LE", ' 2/3 ',0
.text:004221E0                 dd 200000h, 2F0031h, 200035h, 0
.text:004221F0 a25:
.text:004221F0                 text "UTF-16LE", ' 2/5 ',0
.text:004221FC                 dd 200000h, 2F0033h, 200035h, 0
.text:0042220C a45:
.text:0042220C                 text "UTF-16LE", ' 4/5 ',0
.text:00422218                 dd 200000h, 2F0031h, 200036h, 0
.text:00422228 a56:
.text:00422228                 text "UTF-16LE", ' 5/6 ',0
.text:00422234                 dd 200000h, 2F0031h, 200038h, 0
.text:00422244 a38:
.text:00422244                 text "UTF-16LE", ' 3/8 ',0
.text:00422250                 dd 200000h, 2F0035h, 200038h, 0
.text:00422260 a78:
.text:00422260                 text "UTF-16LE", ' 7/8 ',0
.text:0042226C                 dd 200000h, 2F0031h, 0
.text:00422278                 dd 49h, 490000h, 49h, 490000h, 490049h, 0
.text:00422290 aIv:
.text:00422290                 text "UTF-16LE", 'IV',0
.text:00422296                 align 4
.text:00422298 aV:
.text:00422298                 text "UTF-16LE", 'V',0
.text:0042229C                 dd 560000h, 49h, 560000h, 490049h, 0
.text:004222B0 aViii:
.text:004222B0                 text "UTF-16LE", 'VIII',0
.text:004222BA                 align 4
.text:004222BC aIx:
.text:004222BC                 text "UTF-16LE", 'IX',0
.text:004222C2                 align 4
.text:004222C4                 text "UTF-16LE", 'X',0
.text:004222C8                 dd 580000h, 49h, 580000h, 490049h, 0
.text:004222DC                 dd 4Ch, 430000h, 0
.text:004222E8                 dd 44h, 4D0000h, 0
.text:004222F4                 dd 69h, 690000h, 69h, 690000h, 690069h, 0
.text:0042230C aIv_0:
.text:0042230C                 text "UTF-16LE", 'iv',0
.text:00422312                 align 4
.text:00422314 aV_0:
.text:00422314                 text "UTF-16LE", 'v',0
.text:00422318                 dd 760000h, 69h, 760000h, 690069h, 0
.text:0042232C aViii_0:
.text:0042232C                 text "UTF-16LE", 'viii',0
.text:00422336                 align 4
.text:00422338 aIx_0:
.text:00422338                 text "UTF-16LE", 'ix',0
.text:0042233E                 align 10h
.text:00422340                 text "UTF-16LE", 'x',0
.text:00422344                 dd 780000h, 69h, 780000h, 690069h, 0
.text:00422358                 dd 6Ch, 630000h, 0
.text:00422364                 dd 64h, 6D0000h, 0
.text:00422370                 text "UTF-16LE", '<-',0
.text:00422376                 align 4
.text:00422378                 text "UTF-16LE", '->',0
.text:0042237E                 align 10h
.text:00422380                 text "UTF-16LE", '<->',0
.text:00422388                 dd 3C0000h, 3Dh, 3D0000h, 3Eh, 3C0000h, 3E003Dh, 0
.text:004223A4                 db 2Dh, 4 dup(0)
.text:004223A9                 align 2
.text:004223AA                 dw 2Fh
.text:004223AC                 align 10h
.text:004223B0                 dd 5Ch, 2A0000h, 0
.text:004223BC                 dd 7Ch, 3A0000h, 0
.text:004223C8                 dd 7Eh, 3C0000h, 3Dh, 3E0000h, 3Dh, 3C0000h, 3Ch, 3E0000h
.text:004223C8                 dd 3Eh, 3C0000h, 3C003Ch, 0
.text:004223F8                 text "UTF-16LE", '>>>',0
.text:00422400                 dd 4E0000h, 4C0055h, 0
.text:0042240C aSoh:
.text:0042240C                 text "UTF-16LE", 'SOH',0
.text:00422414                 dd 530000h, 580054h, 0
.text:00422420 aEtx:
.text:00422420                 text "UTF-16LE", 'ETX',0
.text:00422428                 dd 450000h, 54004Fh, 0
.text:00422434 aEnq:
.text:00422434                 text "UTF-16LE", 'ENQ',0
.text:0042243C                 dd offset loc_410000
.text:00422440 aCk:
.text:00422440                 text "UTF-16LE", 'CK',0
.text:00422446                 align 4
.text:00422448 aBel:
.text:00422448                 text "UTF-16LE", 'BEL',0
.text:00422450                 dd offset dword_41FF0C+0F4h
.text:00422454                 dd 53h, 480000h, 54h, 4C0000h, 46h, 560000h, 54h, 460000h
.text:00422454                 dd 46h, 430000h, 52h, 530000h, 4Fh, 530000h, 49h, 440000h
.text:00422454                 dd 45004Ch, 0
.text:0042249C aDc1:
.text:0042249C                 text "UTF-16LE", 'DC1',0
.text:004224A4                 dd 440000h, 320043h, 0
.text:004224B0 aDc3:
.text:004224B0                 text "UTF-16LE", 'DC3',0
.text:004224B8                 dd 440000h, 340043h, 0
.text:004224C4 aNak:
.text:004224C4                 text "UTF-16LE", 'NAK',0
.text:004224CC                 dd 530000h, 4E0059h, 0
.text:004224D8 aEtb:
.text:004224D8                 text "UTF-16LE", 'ETB',0
.text:004224E0                 dd 430000h, 4E0041h, 0
.text:004224EC aEm:
.text:004224EC                 text "UTF-16LE", 'EM',0
.text:004224F2                 align 4
.text:004224F4 aSub:
.text:004224F4                 text "UTF-16LE", 'SUB',0
.text:004224FC                 dd 450000h, 430053h, 0
.text:00422508 aFs:
.text:00422508                 text "UTF-16LE", 'FS',0
.text:0042250E                 align 10h
.text:00422510 aGs:
.text:00422510                 text "UTF-16LE", 'GS',0
.text:00422516                 align 4
.text:00422518 aRs_0:
.text:00422518                 text "UTF-16LE", 'RS',0
.text:0042251E                 align 10h
.text:00422520 aUs:
.text:00422520                 text "UTF-16LE", 'US',0
.text:00422526                 align 4
.text:00422528 aSp:
.text:00422528                 text "UTF-16LE", 'SP',0
.text:0042252E                 align 10h
.text:00422530 aDel:
.text:00422530                 text "UTF-16LE", 'DEL',0
.text:00422538                 dd 5F0000h, 0
.text:00422540 aNl:
.text:00422540                 text "UTF-16LE", 'NL',0
.text:00422546                 align 4
.text:00422548 a1:
.text:00422548                 text "UTF-16LE", '(1)',0
.text:00422550                 dd 280000h, 290032h, 0
.text:0042255C a3:
.text:0042255C                 text "UTF-16LE", '(3)',0
.text:00422564                 dd 280000h, 290034h, 0
.text:00422570 a5:
.text:00422570                 text "UTF-16LE", '(5)',0
.text:00422578                 dd 280000h, 290036h, 0
.text:00422584 a7:
.text:00422584                 text "UTF-16LE", '(7)',0
.text:0042258C                 dd 280000h, 290038h, 0
.text:00422598 a9:
.text:00422598                 text "UTF-16LE", '(9)',0
.text:004225A0                 dd 280000h, 300031h, 29h, 280000h, 310031h, 29h, 280000h
.text:004225A0                 dd 320031h, 29h, 280000h, 330031h, 29h, 280000h, 340031h
.text:004225A0                 dd 29h, 280000h, 350031h, 29h, 280000h, 360031h, 29h, 280000h
.text:004225A0                 dd 370031h, 29h, 280000h, 380031h, 29h, 280000h, 390031h
.text:004225A0                 dd 29h, 280000h, 300032h, 29h, 280000h, 290031h, 0
.text:00422630 a2:
.text:00422630                 text "UTF-16LE", '(2)',0
.text:00422638                 dd 280000h, 290033h, 0
.text:00422644 a4:
.text:00422644                 text "UTF-16LE", '(4)',0
.text:0042264C                 dd 280000h, 290035h, 0
.text:00422658 a6:
.text:00422658                 text "UTF-16LE", '(6)',0
.text:00422660                 dd 280000h, 290037h, 0
.text:0042266C a8:
.text:0042266C                 text "UTF-16LE", '(8)',0
.text:00422674                 dd 280000h, 290039h, 0
.text:00422680 a10:
.text:00422680                 text "UTF-16LE", '(10)',0
.text:0042268A                 align 4
.text:0042268C a11:
.text:0042268C                 text "UTF-16LE", '(11)',0
.text:00422696                 align 4
.text:00422698 a12:
.text:00422698                 text "UTF-16LE", '(12)',0
.text:004226A2                 align 4
.text:004226A4 a13:
.text:004226A4                 text "UTF-16LE", '(13)',0
.text:004226AE                 align 10h
.text:004226B0 a14_0:
.text:004226B0                 text "UTF-16LE", '(14)',0
.text:004226BA                 align 4
.text:004226BC a15:
.text:004226BC                 text "UTF-16LE", '(15)',0
.text:004226C6                 align 4
.text:004226C8 a16:
.text:004226C8                 text "UTF-16LE", '(16)',0
.text:004226D2                 align 4
.text:004226D4 a17:
.text:004226D4                 text "UTF-16LE", '(17)',0
.text:004226DE                 align 10h
.text:004226E0 a18:
.text:004226E0                 text "UTF-16LE", '(18)',0
.text:004226EA                 align 4
.text:004226EC a19:
.text:004226EC                 text "UTF-16LE", '(19)',0
.text:004226F6                 align 4
.text:004226F8 a20:
.text:004226F8                 text "UTF-16LE", '(20)',0
.text:00422702                 align 4
.text:00422704 a1_0:
.text:00422704                 text "UTF-16LE", '1.',0
.text:0042270A                 align 4
.text:0042270C a2_0:
.text:0042270C                 text "UTF-16LE", '2.',0
.text:00422712                 align 4
.text:00422714 a3_0:
.text:00422714                 text "UTF-16LE", '3.',0
.text:0042271A                 align 4
.text:0042271C a4_0:
.text:0042271C                 text "UTF-16LE", '4.',0
.text:00422722                 align 4
.text:00422724 a5_0:
.text:00422724                 text "UTF-16LE", '5.',0
.text:0042272A                 align 4
.text:0042272C a6_0:
.text:0042272C                 text "UTF-16LE", '6.',0
.text:00422732                 align 4
.text:00422734 a7_0:
.text:00422734                 text "UTF-16LE", '7.',0
.text:0042273A                 align 4
.text:0042273C a8_0:
.text:0042273C                 text "UTF-16LE", '8.',0
.text:00422742                 align 4
.text:00422744 a9_0:
.text:00422744                 text "UTF-16LE", '9.',0
.text:0042274A                 align 4
.text:0042274C a10_0:
.text:0042274C                 text "UTF-16LE", '10.',0
.text:00422754                 dd 310000h, 2E0031h, 0
.text:00422760 a12_0:
.text:00422760                 text "UTF-16LE", '12.',0
.text:00422768                 dd 310000h, 2E0033h, 0
.text:00422774 a14_1:
.text:00422774                 text "UTF-16LE", '14.',0
.text:0042277C                 dd 310000h, 2E0035h, 0
.text:00422788 a16_0:
.text:00422788                 text "UTF-16LE", '16.',0
.text:00422790                 dd 310000h, 2E0037h, 0
.text:0042279C a18_0:
.text:0042279C                 text "UTF-16LE", '18.',0
.text:004227A4                 dd 310000h, 2E0039h, 0
.text:004227B0 a20_0:
.text:004227B0                 text "UTF-16LE", '20.',0
.text:004227B8                 dd 280000h, 290061h, 0
.text:004227C4 aB:
.text:004227C4                 text "UTF-16LE", '(b)',0
.text:004227CC                 dd 280000h, 290063h, 0
.text:004227D8 aD:
.text:004227D8                 text "UTF-16LE", '(d)',0
.text:004227E0                 dd 280000h, 290065h, 0
.text:004227EC                 text "UTF-16LE", '(f)',0
.text:004227F4                 dd 280000h, 290067h, 0
.text:00422800                 text "UTF-16LE", '(h)',0
.text:00422808                 dd 280000h, 290069h, 0
.text:00422814 aJ:
.text:00422814                 text "UTF-16LE", '(j)',0
.text:0042281C                 dd 280000h, 29006Bh, 0
.text:00422828                 text "UTF-16LE", '(l)',0
.text:00422830                 dd 280000h, 29006Dh, 0
.text:0042283C aN_0:
.text:0042283C                 text "UTF-16LE", '(n)',0
.text:00422844                 dd 280000h, 29006Fh, 0
.text:00422850 aP_0:
.text:00422850                 text "UTF-16LE", '(p)',0
.text:00422858                 dd 280000h, 290071h, 0
.text:00422864 aR:
.text:00422864                 text "UTF-16LE", '(r)',0
.text:0042286C                 dd 280000h, 290073h, 0
.text:00422878 aT:
.text:00422878                 text "UTF-16LE", '(t)',0
.text:00422880                 dd 280000h, 290075h, 0
.text:0042288C aV_1:
.text:0042288C                 text "UTF-16LE", '(v)',0
.text:00422894                 dd 280000h, 290077h, 0
.text:004228A0                 text "UTF-16LE", '(x)',0
.text:004228A8                 dd 280000h, 290079h, 0
.text:004228B4 aZ_0:
.text:004228B4                 text "UTF-16LE", '(z)',0
.text:004228BC                 dd 280000h, 290041h, 0
.text:004228C8                 dd offset dword_41FF0C+11Ch
.text:004228CC                 dd 29h, 280000h, 290043h, 0
.text:004228DC aD_0:
.text:004228DC                 text "UTF-16LE", '(D)',0
.text:004228E4                 dd 280000h, 290045h, 0
.text:004228F0                 text "UTF-16LE", '(F)',0
.text:004228F8                 dd 280000h, 290047h, 0
.text:00422904                 text "UTF-16LE", '(H)',0
.text:0042290C                 dd 280000h, 290049h, 0
.text:00422918 aJ_0:
.text:00422918                 text "UTF-16LE", '(J)',0
.text:00422920                 dd 280000h, 29004Bh, 0
.text:0042292C                 text "UTF-16LE", '(L)',0
.text:00422934                 dd 280000h, 29004Dh, 0
.text:00422940 aN_1:
.text:00422940                 text "UTF-16LE", '(N)',0
.text:00422948                 dd 280000h, 29004Fh, 0
.text:00422954 aP_1:
.text:00422954                 text "UTF-16LE", '(P)',0
.text:0042295C                 dd 280000h, 290051h, 0
.text:00422968 aR_0:
.text:00422968                 text "UTF-16LE", '(R)',0
.text:00422970                 dd 280000h, 290053h, 0
.text:0042297C aT_0:
.text:0042297C                 text "UTF-16LE", '(T)',0
.text:00422984                 dd 280000h, 290055h, 0
.text:00422990 aV_2:
.text:00422990                 text "UTF-16LE", '(V)',0
.text:00422998                 dd 280000h, 290057h, 0
.text:004229A4                 text "UTF-16LE", '(X)',0
.text:004229AC                 dd 280000h, 290059h, 0
.text:004229B8 aZ_1:
.text:004229B8                 text "UTF-16LE", '(Z)',0
.text:004229C0                 dd 280000h, 290061h, 0
.text:004229CC aB_0:
.text:004229CC                 text "UTF-16LE", '(b)',0
.text:004229D4                 dd 280000h, 290063h, 0
.text:004229E0 aD_1:
.text:004229E0                 text "UTF-16LE", '(d)',0
.text:004229E8                 dd 280000h, 290065h, 0
.text:004229F4                 text "UTF-16LE", '(f)',0
.text:004229FC                 dd 280000h, 290067h, 0
.text:00422A08                 text "UTF-16LE", '(h)',0
.text:00422A10                 dd 280000h, 290069h, 0
.text:00422A1C aJ_1:
.text:00422A1C                 text "UTF-16LE", '(j)',0
.text:00422A24                 dd 280000h, 29006Bh, 0
.text:00422A30                 text "UTF-16LE", '(l)',0
.text:00422A38                 dd 280000h, 29006Dh, 0
.text:00422A44 aN_2:
.text:00422A44                 text "UTF-16LE", '(n)',0
.text:00422A4C                 dd 280000h, 29006Fh, 0
.text:00422A58 aP_2:
.text:00422A58                 text "UTF-16LE", '(p)',0
.text:00422A60                 dd 280000h, 290071h, 0
.text:00422A6C aR_1:
.text:00422A6C                 text "UTF-16LE", '(r)',0
.text:00422A74                 dd 280000h, 290073h, 0
.text:00422A80 aT_1:
.text:00422A80                 text "UTF-16LE", '(t)',0
.text:00422A88                 dd 280000h, 290075h, 0
.text:00422A94 aV_3:
.text:00422A94                 text "UTF-16LE", '(v)',0
.text:00422A9C                 dd 280000h, 290077h, 0
.text:00422AA8                 text "UTF-16LE", '(x)',0
.text:00422AB0                 dd 280000h, 290079h, 0
.text:00422ABC aZ_2:
.text:00422ABC                 text "UTF-16LE", '(z)',0
.text:00422AC4                 dd 280000h, 290030h, 0
.text:00422AD0                 db 2Dh, 4 dup(0)
.text:00422AD5                 align 2
.text:00422AD6                 dw 7Ch
.text:00422AD8                 dd 0
.text:00422ADC                 dd 2Bh, 2B0000h, 0
.text:00422AE8                 dd 2Bh, 2B0000h, 0
.text:00422AF4                 dd 2Bh, 2B0000h, 0
.text:00422B00                 dd 2Bh, 2B0000h, 0
.text:00422B0C                 dd 2Bh, 6F0000h, 0
.text:00422B18                 text "UTF-16LE", '::=',0
.text:00422B20                 dd 3D0000h, 3Dh, 3D0000h, 3D003Dh, 0
.text:00422B34                 dd 20h, 3D0000h, 0
.text:00422B40 a21:
.text:00422B40                 text "UTF-16LE", '(21)',0
.text:00422B4A                 align 4
.text:00422B4C a22:
.text:00422B4C                 text "UTF-16LE", '(22)',0
.text:00422B56                 align 4
.text:00422B58 a23_0:
.text:00422B58                 text "UTF-16LE", '(23)',0
.text:00422B62                 align 4
.text:00422B64 a24:
.text:00422B64                 text "UTF-16LE", '(24)',0
.text:00422B6E                 align 10h
.text:00422B70 a25_0:
.text:00422B70                 text "UTF-16LE", '(25)',0
.text:00422B7A                 align 4
.text:00422B7C a26:
.text:00422B7C                 text "UTF-16LE", '(26)',0
.text:00422B86                 align 4
.text:00422B88 a27:
.text:00422B88                 text "UTF-16LE", '(27)',0
.text:00422B92                 align 4
.text:00422B94 a28:
.text:00422B94                 text "UTF-16LE", '(28)',0
.text:00422B9E                 align 10h
.text:00422BA0 a29:
.text:00422BA0                 text "UTF-16LE", '(29)',0
.text:00422BAA                 align 4
.text:00422BAC a30:
.text:00422BAC                 text "UTF-16LE", '(30)',0
.text:00422BB6                 align 4
.text:00422BB8 a31:
.text:00422BB8                 text "UTF-16LE", '(31)',0
.text:00422BC2                 align 4
.text:00422BC4 a32:
.text:00422BC4                 text "UTF-16LE", '(32)',0
.text:00422BCE                 align 10h
.text:00422BD0 a33_0:
.text:00422BD0                 text "UTF-16LE", '(33)',0
.text:00422BDA                 align 4
.text:00422BDC a34_0:
.text:00422BDC                 text "UTF-16LE", '(34)',0
.text:00422BE6                 align 4
.text:00422BE8 a35:
.text:00422BE8                 text "UTF-16LE", '(35)',0
.text:00422BF2                 align 4
.text:00422BF4 a36:
.text:00422BF4                 text "UTF-16LE", '(36)',0
.text:00422BFE                 align 10h
.text:00422C00 a37:
.text:00422C00                 text "UTF-16LE", '(37)',0
.text:00422C0A                 align 4
.text:00422C0C a38_0:
.text:00422C0C                 text "UTF-16LE", '(38)',0
.text:00422C16                 align 4
.text:00422C18 a39:
.text:00422C18                 text "UTF-16LE", '(39)',0
.text:00422C22                 align 4
.text:00422C24 a40:
.text:00422C24                 text "UTF-16LE", '(40)',0
.text:00422C2E                 align 10h
.text:00422C30 a41:
.text:00422C30                 text "UTF-16LE", '(41)',0
.text:00422C3A                 align 4
.text:00422C3C a42:
.text:00422C3C                 text "UTF-16LE", '(42)',0
.text:00422C46                 align 4
.text:00422C48 a43:
.text:00422C48                 text "UTF-16LE", '(43)',0
.text:00422C52                 align 4
.text:00422C54 a44:
.text:00422C54                 text "UTF-16LE", '(44)',0
.text:00422C5E                 align 10h
.text:00422C60 a45_0:
.text:00422C60                 text "UTF-16LE", '(45)',0
.text:00422C6A                 align 4
.text:00422C6C a46:
.text:00422C6C                 text "UTF-16LE", '(46)',0
.text:00422C76                 align 4
.text:00422C78 a47:
.text:00422C78                 text "UTF-16LE", '(47)',0
.text:00422C82                 align 4
.text:00422C84 a48:
.text:00422C84                 text "UTF-16LE", '(48)',0
.text:00422C8E                 align 10h
.text:00422C90 a49:
.text:00422C90                 text "UTF-16LE", '(49)',0
.text:00422C9A                 align 4
.text:00422C9C a50:
.text:00422C9C                 text "UTF-16LE", '(50)',0
.text:00422CA6                 align 4
.text:00422CA8 aHpa:
.text:00422CA8                 text "UTF-16LE", 'hPa',0
.text:00422CB0                 dd 640000h, 61h, 410000h, 55h, 620000h, 720061h, 0
.text:00422CCC aOv:
.text:00422CCC                 text "UTF-16LE", 'oV',0
.text:00422CD2                 align 4
.text:00422CD4 aPc:
.text:00422CD4                 text "UTF-16LE", 'pc',0
.text:00422CDA                 align 4
.text:00422CDC                 dd offset loc_410070
.text:00422CE0                 dd 0
.text:00422CE4 aNa:
.text:00422CE4                 text "UTF-16LE", 'nA',0
.text:00422CEA                 align 4
.text:00422CEC aUa:
.text:00422CEC                 text "UTF-16LE", 'uA',0
.text:00422CF2                 align 4
.text:00422CF4 aMa:
.text:00422CF4                 text "UTF-16LE", 'mA',0
.text:00422CFA                 align 4
.text:00422CFC aKa:
.text:00422CFC                 text "UTF-16LE", 'kA',0
.text:00422D02                 align 4
.text:00422D04                 dd offset dword_41FF0C+13Fh
.text:00422D08                 dd 0
.text:00422D0C                 dd offset dword_41FF0C+141h
.text:00422D10                 dd 0
.text:00422D14                 dd offset dword_41FF0C+13Bh
.text:00422D18                 dd 0
.text:00422D1C aCal:
.text:00422D1C                 text "UTF-16LE", 'cal',0
.text:00422D24                 dd 6B0000h, 610063h, 6Ch, 700000h, 46h, 6E0000h, 46h, 750000h
.text:00422D24                 dd 46h, 750000h, 67h, 6D0000h, 67h, 6B0000h, 67h, 480000h
.text:00422D24                 dd 7Ah, 6B0000h, 7A0048h, 0
.text:00422D74 aMhz:
.text:00422D74                 text "UTF-16LE", 'MHz',0
.text:00422D7C                 dd 470000h, 7A0048h, 0
.text:00422D88 aThz:
.text:00422D88                 text "UTF-16LE", 'THz',0
.text:00422D90                 dd 750000h, 6Ch, 6D0000h, 6Ch, 640000h, 6Ch, 6B0000h, 6Ch
.text:00422D90                 dd 660000h, 6Dh, 6E0000h, 6Dh, 750000h, 6Dh, 6D0000h, 6Dh
.text:00422D90                 dd 630000h, 6Dh, 6B0000h, 6Dh, 6D0000h, 5E006Dh, 32h, 630000h
.text:00422D90                 dd 5E006Dh, 32h, 6D0000h, 32005Eh, 0
.text:00422E04 aKm2:
.text:00422E04                 text "UTF-16LE", 'km^2',0
.text:00422E0E                 align 10h
.text:00422E10 aMm3:
.text:00422E10                 text "UTF-16LE", 'mm^3',0
.text:00422E1A                 align 4
.text:00422E1C aCm3:
.text:00422E1C                 text "UTF-16LE", 'cm^3',0
.text:00422E26                 align 4
.text:00422E28 aM3:
.text:00422E28                 text "UTF-16LE", 'm^3',0
.text:00422E30                 dd 6B0000h, 5E006Dh, 33h, 6D0000h, 73002Fh, 0
.text:00422E48 aMS2:
.text:00422E48                 text "UTF-16LE", 'm/s^2',0
.text:00422E54                 dd 500000h, 61h, 6B0000h, 610050h, 0
.text:00422E68 aMpa:
.text:00422E68                 text "UTF-16LE", 'MPa',0
.text:00422E70                 dd 470000h, 610050h, 0
.text:00422E7C aRad:
.text:00422E7C                 text "UTF-16LE", 'rad',0
.text:00422E84                 dd 720000h, 640061h, 73002Fh, 0
.text:00422E94 aRadS2:
.text:00422E94                 text "UTF-16LE", 'rad/s^2',0
.text:00422EA4                 dd 700000h, 73h, 6E0000h, 73h, 750000h, 73h, 6D0000h, 73h
.text:00422EA4                 dd 700000h, 56h, 6E0000h, 56h, 750000h, 56h, 6D0000h, 56h
.text:00422EA4                 dd 6B0000h, 56h, 4D0000h, 56h, 700000h, 57h, 6E0000h, 57h
.text:00422EA4                 dd 750000h, 57h, 6D0000h, 57h, 6B0000h, 57h, 4D0000h, 57h
.text:00422EA4                 dd 610000h, 6D002Eh, 2Eh, 420000h, 71h, 630000h, 63h, 630000h
.text:00422EA4                 dd 64h, 430000h, 6B002Fh, 67h, 430000h, 2E006Fh, 0
.text:00422F60                 dd offset dword_41FF0C+158h
.text:00422F64                 align 8
.text:00422F68 aGy:
.text:00422F68                 text "UTF-16LE", 'Gy',0
.text:00422F6E                 align 10h
.text:00422F70 aHa:
.text:00422F70                 text "UTF-16LE", 'ha',0
.text:00422F76                 align 4
.text:00422F78 aHp:
.text:00422F78                 text "UTF-16LE", 'HP',0
.text:00422F7E                 align 10h
.text:00422F80 aIn:
.text:00422F80                 text "UTF-16LE", 'in',0
.text:00422F86                 align 4
.text:00422F88 aKk:
.text:00422F88                 text "UTF-16LE", 'KK',0
.text:00422F8E                 align 10h
.text:00422F90 aKm:
.text:00422F90                 text "UTF-16LE", 'KM',0
.text:00422F96                 align 4
.text:00422F98 aKt:
.text:00422F98                 text "UTF-16LE", 'kt',0
.text:00422F9E                 align 10h
.text:00422FA0 aLm:
.text:00422FA0                 text "UTF-16LE", 'lm',0
.text:00422FA6                 align 4
.text:00422FA8 aLn:
.text:00422FA8                 text "UTF-16LE", 'ln',0
.text:00422FAE                 align 10h
.text:00422FB0 aLog:
.text:00422FB0                 text "UTF-16LE", 'log',0
.text:00422FB8                 dd 6C0000h, 78h, 6D0000h, 62h, 6D0000h, 6C0069h, 0
.text:00422FD4 aMol:
.text:00422FD4                 text "UTF-16LE", 'mol',0
.text:00422FDC                 dd 500000h, 48h, 700000h, 6D002Eh, 2Eh, 500000h, 4D0050h
.text:00422FDC                 dd 0
.text:00422FFC aPr:
.text:00422FFC                 text "UTF-16LE", 'PR',0
.text:00423002                 align 4
.text:00423004 aSr:
.text:00423004                 text "UTF-16LE", 'sr',0
.text:0042300A                 align 4
.text:0042300C aSv:
.text:0042300C                 text "UTF-16LE", 'Sv',0
.text:00423012                 align 4
.text:00423014 aWb:
.text:00423014                 text "UTF-16LE", 'Wb',0
.text:0042301A                 align 4
.text:0042301C aFf:
.text:0042301C                 text "UTF-16LE", 'ff',0
.text:00423022                 align 4
.text:00423024 aFi:
.text:00423024                 text "UTF-16LE", 'fi',0
.text:0042302A                 align 4
.text:0042302C aFl:
.text:0042302C                 text "UTF-16LE", 'fl',0
.text:00423032                 align 4
.text:00423034 aFfi:
.text:00423034                 text "UTF-16LE", 'ffi',0
.text:0042303C                 dd 660000h, 6C0066h, 0
.text:00423048 aSt:
.text:00423048                 text "UTF-16LE", 'st',0
.text:0042304E                 align 10h
.text:00423050                 text "UTF-16LE", '+',0
.text:00423054                 dd 10h dup(0)
.text:00423094                 dd 5F0000h, 0
.text:0042309C                 dd 5Fh, 5F0000h, 0
.text:004230A8                 dd 2Ch, 2E0000h, 0
.text:004230B4                 dd 3Bh, 3A0000h, 0
.text:004230C0                 dd 3Fh, 210000h, 0
.text:004230CC                 dd 28h, 290000h, 0
.text:004230D8                 dd 7Bh, 7D0000h, 0
.text:004230E4                 dd 23h, 260000h, 0
.text:004230F0                 dd 2Ah, 2B0000h, 0
.text:004230FC                 db 2Dh, 4 dup(0)
.text:00423101                 align 2
.text:00423102                 dw 3Ch
.text:00423104                 align 8
.text:00423108                 dd 3Eh, 3D0000h, 0
.text:00423114                 dd 5Ch, 240000h, 0
.text:00423120                 dd 25h, 400000h, 2 dup(0)
.text:00423130                 dd 21h, 220000h, 0
.text:0042313C                 dd 23h, 240000h, 0
.text:00423148                 dd 25h, 260000h, 0
.text:00423154                 dd 27h, 280000h, 0
.text:00423160                 dd 29h, 2A0000h, 0
.text:0042316C                 dd 2Bh, 2C0000h, 0
.text:00423178                 db 2Dh, 4 dup(0)
.text:0042317D                 align 2
.text:0042317E                 dw 2Eh
.text:00423180                 dd 0
.text:00423184                 dd 2Fh, 300000h, 0
.text:00423190                 dd 31h, 320000h, 0
.text:0042319C                 dd 33h, 340000h, 0
.text:004231A8                 dd 35h, 360000h, 0
.text:004231B4                 dd 37h, 380000h, 0
.text:004231C0                 dd 39h, 3A0000h, 0
.text:004231CC                 dd 3Bh, 3C0000h, 0
.text:004231D8                 dd 3Dh, 3E0000h, 0
.text:004231E4                 dd 3Fh, 400000h, 0
.text:004231F0                 dd 41h, 420000h, 0
.text:004231FC                 dd 43h, 440000h, 0
.text:00423208                 dd 45h, 460000h, 0
.text:00423214                 dd 47h, 480000h, 0
.text:00423220                 dd 49h, 4A0000h, 0
.text:0042322C                 dd 4Bh, 4C0000h, 0
.text:00423238                 dd 4Dh, 4E0000h, 0
.text:00423244                 dd 4Fh, 500000h, 0
.text:00423250                 dd 51h, 520000h, 0
.text:0042325C                 dd 53h, 540000h, 0
.text:00423268                 dd 55h, 560000h, 0
.text:00423274                 dd 57h, 580000h, 0
.text:00423280                 dd 59h, 5A0000h, 0
.text:0042328C                 dd 5Bh, 5C0000h, 0
.text:00423298                 dd 5Dh, 5E0000h, 0
.text:004232A4                 dd 5Fh, 600000h, 0
.text:004232B0                 dd 61h, 620000h, 0
.text:004232BC                 dd 63h, 640000h, 0
.text:004232C8                 dd 65h, 660000h, 0
.text:004232D4                 dd 67h, 680000h, 0
.text:004232E0                 dd 69h, 6A0000h, 0
.text:004232EC                 dd 6Bh, 6C0000h, 0
.text:004232F8                 dd 6Dh, 6E0000h, 0
.text:00423304                 dd 6Fh, 700000h, 0
.text:00423310                 dd 71h, 720000h, 0
.text:0042331C                 dd 73h, 740000h, 0
.text:00423328                 dd 75h, 760000h, 0
.text:00423334                 dd 77h, 780000h, 0
.text:00423340                 dd 79h, 7A0000h, 0
.text:0042334C                 dd 7Bh, 7C0000h, 0
.text:00423358                 dd 7Dh, 7E0000h, 0
.text:00423364                 dd 41h, 420000h, 0
.text:00423370                 dd 43h, 440000h, 0
.text:0042337C                 dd 45h, 460000h, 0
.text:00423388                 dd 47h, 480000h, 0
.text:00423394                 dd 49h, 4A0000h, 0
.text:004233A0                 dd 4Bh, 4C0000h, 0
.text:004233AC                 dd 4Dh, 4E0000h, 0
.text:004233B8                 dd 4Fh, 500000h, 0
.text:004233C4                 dd 51h, 520000h, 0
.text:004233D0                 dd 53h, 540000h, 0
.text:004233DC                 dd 55h, 560000h, 0
.text:004233E8                 dd 57h, 580000h, 0
.text:004233F4                 dd 59h, 5A0000h, 0
.text:00423400                 dd 61h, 620000h, 0
.text:0042340C                 dd 63h, 640000h, 0
.text:00423418                 dd 65h, 660000h, 0
.text:00423424                 dd 67h, 680000h, 0
.text:00423430                 dd 69h, 6A0000h, 0
.text:0042343C                 dd 6Bh, 6C0000h, 0
.text:00423448                 dd 6Dh, 6E0000h, 0
.text:00423454                 dd 6Fh, 700000h, 0
.text:00423460                 dd 71h, 720000h, 0
.text:0042346C                 dd 73h, 740000h, 0
.text:00423478                 dd 75h, 760000h, 0
.text:00423484                 dd 77h, 780000h, 0
.text:00423490                 dd 79h, 7A0000h, 0
.text:0042349C                 dd 41h, 420000h, 0
.text:004234A8                 dd 43h, 440000h, 0
.text:004234B4                 dd 45h, 460000h, 0
.text:004234C0                 dd 47h, 480000h, 0
.text:004234CC                 dd 49h, 4A0000h, 0
.text:004234D8                 dd 4Bh, 4C0000h, 0
.text:004234E4                 dd 4Dh, 4E0000h, 0
.text:004234F0                 dd 4Fh, 500000h, 0
.text:004234FC                 dd 51h, 520000h, 0
.text:00423508                 dd 53h, 540000h, 0
.text:00423514                 dd 55h, 560000h, 0
.text:00423520                 dd 57h, 580000h, 0
.text:0042352C                 dd 59h, 5A0000h, 0
.text:00423538                 dd 61h, 620000h, 0
.text:00423544                 dd 63h, 640000h, 0
.text:00423550                 dd 65h, 660000h, 0
.text:0042355C                 dd 67h, 690000h, 0
.text:00423568                 dd 6Ah, 6B0000h, 0
.text:00423574                 dd 6Ch, 6D0000h, 0
.text:00423580                 dd 6Eh, 6F0000h, 0
.text:0042358C                 dd 70h, 710000h, 0
.text:00423598                 dd 72h, 730000h, 0
.text:004235A4                 dd 74h, 750000h, 0
.text:004235B0                 dd 76h, 770000h, 0
.text:004235BC                 dd 78h, 790000h, 0
.text:004235C8                 dd 7Ah, 410000h, 0
.text:004235D4                 dd 42h, 430000h, 0
.text:004235E0                 dd 44h, 450000h, 0
.text:004235EC                 dd 46h, 470000h, 0
.text:004235F8                 dd 48h, 490000h, 0
.text:00423604                 dd 4Ah, 4B0000h, 0
.text:00423610                 dd 4Ch, 4D0000h, 0
.text:0042361C                 dd 4Eh, 4F0000h, 0
.text:00423628                 dd 50h, 510000h, 0
.text:00423634                 dd 52h, 530000h, 0
.text:00423640                 dd 54h, 550000h, 0
.text:0042364C                 dd 56h, 570000h, 0
.text:00423658                 dd 58h, 590000h, 0
.text:00423664                 dd 5Ah, 610000h, 0
.text:00423670                 dd 62h, 630000h, 0
.text:0042367C                 dd 64h, 650000h, 0
.text:00423688                 dd 66h, 670000h, 0
.text:00423694                 dd 68h, 690000h, 0
.text:004236A0                 dd 6Ah, 6B0000h, 0
.text:004236AC                 dd 6Ch, 6D0000h, 0
.text:004236B8                 dd 6Eh, 6F0000h, 0
.text:004236C4                 dd 70h, 710000h, 0
.text:004236D0                 dd 72h, 730000h, 0
.text:004236DC                 dd 74h, 750000h, 0
.text:004236E8                 dd 76h, 770000h, 0
.text:004236F4                 dd 78h, 790000h, 0
.text:00423700                 dd 7Ah, 410000h, 0
.text:0042370C                 dd 43h, 440000h, 0
.text:00423718                 dd 47h, 4A0000h, 0
.text:00423724                 dd 4Bh, 4E0000h, 0
.text:00423730                 dd 4Fh, 500000h, 0
.text:0042373C                 dd 51h, 530000h, 0
.text:00423748                 dd 54h, 550000h, 0
.text:00423754                 dd 56h, 570000h, 0
.text:00423760                 dd 58h, 590000h, 0
.text:0042376C                 dd 5Ah, 610000h, 0
.text:00423778                 dd 62h, 630000h, 0
.text:00423784                 dd 64h, 660000h, 0
.text:00423790                 dd 68h, 690000h, 0
.text:0042379C                 dd 6Ah, 6B0000h, 0
.text:004237A8                 dd 6Dh, 6E0000h, 0
.text:004237B4                 dd 70h, 710000h, 0
.text:004237C0                 dd 72h, 730000h, 0
.text:004237CC                 dd 74h, 750000h, 0
.text:004237D8                 dd 76h, 770000h, 0
.text:004237E4                 dd 78h, 790000h, 0
.text:004237F0                 dd 7Ah, 410000h, 0
.text:004237FC                 dd 42h, 430000h, 0
.text:00423808                 dd 44h, 450000h, 0
.text:00423814                 dd 46h, 470000h, 0
.text:00423820                 dd 48h, 490000h, 0
.text:0042382C                 dd 4Ah, 4B0000h, 0
.text:00423838                 dd 4Ch, 4D0000h, 0
.text:00423844                 dd 4Eh, 4F0000h, 0
.text:00423850                 dd 50h, 510000h, 0
.text:0042385C                 dd 52h, 530000h, 0
.text:00423868                 dd 54h, 550000h, 0
.text:00423874                 dd 56h, 570000h, 0
.text:00423880                 dd 58h, 590000h, 0
.text:0042388C                 dd 5Ah, 610000h, 0
.text:00423898                 dd 62h, 630000h, 0
.text:004238A4                 dd 64h, 650000h, 0
.text:004238B0                 dd 66h, 670000h, 0
.text:004238BC                 dd 68h, 690000h, 0
.text:004238C8                 dd 6Ah, 6B0000h, 0
.text:004238D4                 dd 6Ch, 6D0000h, 0
.text:004238E0                 dd 6Eh, 6F0000h, 0
.text:004238EC                 dd 70h, 710000h, 0
.text:004238F8                 dd 72h, 730000h, 0
.text:00423904                 dd 74h, 750000h, 0
.text:00423910                 dd 76h, 770000h, 0
.text:0042391C                 dd 78h, 790000h, 0
.text:00423928                 dd 7Ah, 410000h, 0
.text:00423934                 dd 42h, 440000h, 0
.text:00423940                 dd 45h, 460000h, 0
.text:0042394C                 dd 47h, 4A0000h, 0
.text:00423958                 dd 4Bh, 4C0000h, 0
.text:00423964                 dd 4Dh, 4E0000h, 0
.text:00423970                 dd 4Fh, 500000h, 0
.text:0042397C                 dd 51h, 530000h, 0
.text:00423988                 dd 54h, 550000h, 0
.text:00423994                 dd 56h, 570000h, 0
.text:004239A0                 dd 58h, 590000h, 0
.text:004239AC                 dd 61h, 620000h, 0
.text:004239B8                 dd 63h, 640000h, 0
.text:004239C4                 dd 65h, 660000h, 0
.text:004239D0                 dd 67h, 680000h, 0
.text:004239DC                 dd 69h, 6A0000h, 0
.text:004239E8                 dd 6Bh, 6C0000h, 0
.text:004239F4                 dd 6Dh, 6E0000h, 0
.text:00423A00                 dd 6Fh, 700000h, 0
.text:00423A0C                 dd 71h, 720000h, 0
.text:00423A18                 dd 73h, 740000h, 0
.text:00423A24                 dd 75h, 760000h, 0
.text:00423A30                 dd 77h, 780000h, 0
.text:00423A3C                 dd 79h, 7A0000h, 0
.text:00423A48                 dd 41h, 420000h, 0
.text:00423A54                 dd 44h, 450000h, 0
.text:00423A60                 dd 46h, 470000h, 0
.text:00423A6C                 dd 49h, 4A0000h, 0
.text:00423A78                 dd 4Bh, 4C0000h, 0
.text:00423A84                 dd 4Dh, 4F0000h, 0
.text:00423A90                 dd 53h, 540000h, 0
.text:00423A9C                 dd 55h, 560000h, 0
.text:00423AA8                 dd 57h, 580000h, 0
.text:00423AB4                 dd 59h, 610000h, 0
.text:00423AC0                 dd 62h, 630000h, 0
.text:00423ACC                 dd 64h, 650000h, 0
.text:00423AD8                 dd 66h, 670000h, 0
.text:00423AE4                 dd 68h, 690000h, 0
.text:00423AF0                 dd 6Ah, 6B0000h, 0
.text:00423AFC                 dd 6Ch, 6D0000h, 0
.text:00423B08                 dd 6Eh, 6F0000h, 0
.text:00423B14                 dd 70h, 710000h, 0
.text:00423B20                 dd 72h, 730000h, 0
.text:00423B2C                 dd 74h, 750000h, 0
.text:00423B38                 dd 76h, 770000h, 0
.text:00423B44                 dd 78h, 790000h, 0
.text:00423B50                 dd 7Ah, 410000h, 0
.text:00423B5C                 dd 42h, 430000h, 0
.text:00423B68                 dd 44h, 450000h, 0
.text:00423B74                 dd 46h, 470000h, 0
.text:00423B80                 dd 48h, 490000h, 0
.text:00423B8C                 dd 4Ah, 4B0000h, 0
.text:00423B98                 dd 4Ch, 4D0000h, 0
.text:00423BA4                 dd 4Eh, 4F0000h, 0
.text:00423BB0                 dd 50h, 510000h, 0
.text:00423BBC                 dd 52h, 530000h, 0
.text:00423BC8                 dd 54h, 550000h, 0
.text:00423BD4                 dd 56h, 570000h, 0
.text:00423BE0                 dd 58h, 590000h, 0
.text:00423BEC                 dd 5Ah, 610000h, 0
.text:00423BF8                 dd 62h, 630000h, 0
.text:00423C04                 dd 64h, 650000h, 0
.text:00423C10                 dd 66h, 670000h, 0
.text:00423C1C                 dd 68h, 690000h, 0
.text:00423C28                 dd 6Ah, 6B0000h, 0
.text:00423C34                 dd 6Ch, 6D0000h, 0
.text:00423C40                 dd 6Eh, 6F0000h, 0
.text:00423C4C                 dd 70h, 710000h, 0
.text:00423C58                 dd 72h, 730000h, 0
.text:00423C64                 dd 74h, 750000h, 0
.text:00423C70                 dd 76h, 770000h, 0
.text:00423C7C                 dd 78h, 790000h, 0
.text:00423C88                 dd 7Ah, 410000h, 0
.text:00423C94                 dd 42h, 430000h, 0
.text:00423CA0                 dd 44h, 450000h, 0
.text:00423CAC                 dd 46h, 470000h, 0
.text:00423CB8                 dd 48h, 490000h, 0
.text:00423CC4                 dd 4Ah, 4B0000h, 0
.text:00423CD0                 dd 4Ch, 4D0000h, 0
.text:00423CDC                 dd 4Eh, 4F0000h, 0
.text:00423CE8                 dd 50h, 510000h, 0
.text:00423CF4                 dd 52h, 530000h, 0
.text:00423D00                 dd 54h, 550000h, 0
.text:00423D0C                 dd 56h, 570000h, 0
.text:00423D18                 dd 58h, 590000h, 0
.text:00423D24                 dd 5Ah, 610000h, 0
.text:00423D30                 dd 62h, 630000h, 0
.text:00423D3C                 dd 64h, 650000h, 0
.text:00423D48                 dd 66h, 670000h, 0
.text:00423D54                 dd 68h, 690000h, 0
.text:00423D60                 dd 6Ah, 6B0000h, 0
.text:00423D6C                 dd 6Ch, 6D0000h, 0
.text:00423D78                 dd 6Eh, 6F0000h, 0
.text:00423D84                 dd 70h, 710000h, 0
.text:00423D90                 dd 72h, 730000h, 0
.text:00423D9C                 dd 74h, 750000h, 0
.text:00423DA8                 dd 76h, 770000h, 0
.text:00423DB4                 dd 78h, 790000h, 0
.text:00423DC0                 dd 7Ah, 410000h, 0
.text:00423DCC                 dd 42h, 430000h, 0
.text:00423DD8                 dd 44h, 450000h, 0
.text:00423DE4                 dd 46h, 470000h, 0
.text:00423DF0                 dd 48h, 490000h, 0
.text:00423DFC                 dd 4Ah, 4B0000h, 0
.text:00423E08                 dd 4Ch, 4D0000h, 0
.text:00423E14                 dd 4Eh, 4F0000h, 0
.text:00423E20                 dd 50h, 510000h, 0
.text:00423E2C                 dd 52h, 530000h, 0
.text:00423E38                 dd 54h, 550000h, 0
.text:00423E44                 dd 56h, 570000h, 0
.text:00423E50                 dd 58h, 590000h, 0
.text:00423E5C                 dd 5Ah, 610000h, 0
.text:00423E68                 dd 62h, 630000h, 0
.text:00423E74                 dd 64h, 650000h, 0
.text:00423E80                 dd 66h, 670000h, 0
.text:00423E8C                 dd 68h, 690000h, 0
.text:00423E98                 dd 6Ah, 6B0000h, 0
.text:00423EA4                 dd 6Ch, 6D0000h, 0
.text:00423EB0                 dd 6Eh, 6F0000h, 0
.text:00423EBC                 dd 70h, 710000h, 0
.text:00423EC8                 dd 72h, 730000h, 0
.text:00423ED4                 dd 74h, 750000h, 0
.text:00423EE0                 dd 76h, 770000h, 0
.text:00423EEC                 dd 78h, 790000h, 0
.text:00423EF8                 dd 7Ah, 410000h, 0
.text:00423F04                 dd 42h, 430000h, 0
.text:00423F10                 dd 44h, 450000h, 0
.text:00423F1C                 dd 46h, 470000h, 0
.text:00423F28                 dd 48h, 490000h, 0
.text:00423F34                 dd 4Ah, 4B0000h, 0
.text:00423F40                 dd 4Ch, 4D0000h, 0
.text:00423F4C                 dd 4Eh, 4F0000h, 0
.text:00423F58                 dd 50h, 510000h, 0
.text:00423F64                 dd 52h, 530000h, 0
.text:00423F70                 dd 54h, 550000h, 0
.text:00423F7C                 dd 56h, 570000h, 0
.text:00423F88                 dd 58h, 590000h, 0
.text:00423F94                 dd 5Ah, 610000h, 0
.text:00423FA0                 dd 62h, 630000h, 0
.text:00423FAC                 dd 64h, 650000h, 0
.text:00423FB8                 dd 66h, 670000h, 0
.text:00423FC4                 dd 68h, 690000h, 0
.text:00423FD0                 dd 6Ah, 6B0000h, 0
.text:00423FDC                 dd 6Ch, 6D0000h, 0
.text:00423FE8                 dd 6Eh, 6F0000h, 0
.text:00423FF4                 dd 70h, 710000h, 0
.text:00424000                 dd 72h, 730000h, 0
.text:0042400C                 dd 74h, 750000h, 0
.text:00424018                 dd 76h, 770000h, 0
.text:00424024                 dd 78h, 790000h, 0
.text:00424030                 dd 7Ah, 410000h, 0
.text:0042403C                 dd 42h, 430000h, 0
.text:00424048                 dd 44h, 450000h, 0
.text:00424054                 dd 46h, 470000h, 0
.text:00424060                 dd 48h, 490000h, 0
.text:0042406C                 dd 4Ah, 4B0000h, 0
.text:00424078                 dd 4Ch, 4D0000h, 0
.text:00424084                 dd 4Eh, 4F0000h, 0
.text:00424090                 dd 50h, 510000h, 0
.text:0042409C                 dd 52h, 530000h, 0
.text:004240A8                 dd 54h, 550000h, 0
.text:004240B4                 dd 56h, 570000h, 0
.text:004240C0                 dd 58h, 590000h, 0
.text:004240CC                 dd 5Ah, 610000h, 0
.text:004240D8                 dd 62h, 630000h, 0
.text:004240E4                 dd 64h, 650000h, 0
.text:004240F0                 dd 66h, 670000h, 0
.text:004240FC                 dd 68h, 690000h, 0
.text:00424108                 dd 6Ah, 6B0000h, 0
.text:00424114                 dd 6Ch, 6D0000h, 0
.text:00424120                 dd 6Eh, 6F0000h, 0
.text:0042412C                 dd 70h, 710000h, 0
.text:00424138                 dd 72h, 730000h, 0
.text:00424144                 dd 74h, 750000h, 0
.text:00424150                 dd 76h, 770000h, 0
.text:0042415C                 dd 78h, 790000h, 0
.text:00424168                 dd 7Ah, 410000h, 0
.text:00424174                 dd 42h, 430000h, 0
.text:00424180                 dd 44h, 450000h, 0
.text:0042418C                 dd 46h, 470000h, 0
.text:00424198                 dd 48h, 490000h, 0
.text:004241A4                 dd 4Ah, 4B0000h, 0
.text:004241B0                 dd 4Ch, 4D0000h, 0
.text:004241BC                 dd 4Eh, 4F0000h, 0
.text:004241C8                 dd 50h, 510000h, 0
.text:004241D4                 dd 52h, 530000h, 0
.text:004241E0                 dd 54h, 550000h, 0
.text:004241EC                 dd 56h, 570000h, 0
.text:004241F8                 dd 58h, 590000h, 0
.text:00424204                 dd 5Ah, 610000h, 0
.text:00424210                 dd 62h, 630000h, 0
.text:0042421C                 dd 64h, 650000h, 0
.text:00424228                 dd 66h, 670000h, 0
.text:00424234                 dd 68h, 690000h, 0
.text:00424240                 dd 6Ah, 6B0000h, 0
.text:0042424C                 dd 6Ch, 6D0000h, 0
.text:00424258                 dd 6Eh, 6F0000h, 0
.text:00424264                 dd 70h, 710000h, 0
.text:00424270                 dd 72h, 730000h, 0
.text:0042427C                 dd 74h, 750000h, 0
.text:00424288                 dd 76h, 770000h, 0
.text:00424294                 dd 78h, 790000h, 0
.text:004242A0                 dd 7Ah, 300000h, 0
.text:004242AC                 dd 31h, 320000h, 0
.text:004242B8                 dd 33h, 340000h, 0
.text:004242C4                 dd 35h, 360000h, 0
.text:004242D0                 dd 37h, 380000h, 0
.text:004242DC                 dd 39h, 300000h, 0
.text:004242E8                 dd 31h, 320000h, 0
.text:004242F4                 dd 33h, 340000h, 0
.text:00424300                 dd 35h, 360000h, 0
.text:0042430C                 dd 37h, 380000h, 0
.text:00424318                 dd 39h, 300000h, 0
.text:00424324                 dd 31h, 320000h, 0
.text:00424330                 dd 33h, 340000h, 0
.text:0042433C                 dd 35h, 360000h, 0
.text:00424348                 dd 37h, 380000h, 0
.text:00424354                 dd 39h, 300000h, 0
.text:00424360                 dd 31h, 320000h, 0
.text:0042436C                 dd 33h, 340000h, 0
.text:00424378                 dd 35h, 360000h, 0
.text:00424384                 dd 37h, 380000h, 0
.text:00424390                 dd 39h, 300000h, 0
.text:0042439C                 dd 31h, 320000h, 0
.text:004243A8                 dd 33h, 340000h, 0
.text:004243B4                 dd 35h, 360000h, 0
.text:004243C0                 dd 37h, 380000h, 0
.text:004243CC                 dd 39h, 0B48D0000h, 26h, 27BC8D00h, 41h dup(0)
.text:004244E0                 dd 4 dup(20002h), 20030002h, 2 dup(20022002h), 9 dup(20002h)
.text:004244E0                 dd 0C0046001h, 7 dup(0C004C004h), 5 dup(0D808D808h), 3 dup(0C004C004h)
.text:004244E0                 dd 0D508C004h, 2 dup(0D508D508h), 0C508D508h, 9 dup(0C508C508h)
.text:004244E0                 dd 0C004C508h, 2 dup(0C004C004h), 0D608C004h, 2 dup(0D608D608h)
.text:004244E0                 dd 0C608D608h, 9 dup(0C608C608h), 0C004C608h, 0C004C004h
.text:004244E0                 dd 2C004h, 40h dup(0)
.text:004246E0 dword_4246E0    dd 9 dup(20000h), 20030000h, 4 dup(20020000h), 12h dup(20000h)
.text:004246E0                                         ; DATA XREF: .text:00425E18↓o
.text:004246E0                 dd 60010000h, 0Fh dup(0C0040000h), 0Ah dup(0D8080000h)
.text:004246E0                 dd 7 dup(0C0040000h), 6 dup(0D5080000h), 14h dup(0C5080000h)
.text:004246E0                 dd 6 dup(0C0040000h), 6 dup(0D6080000h), 14h dup(0C6080000h)
.text:004246E0                 dd 4 dup(0C0040000h), 20000h, 80h dup(0)
.text:00424AE0 dword_424AE0    dd 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah
.text:00424AE0                 dd 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h
.text:00424AE0                 dd 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h
.text:00424AE0                 dd 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h
.text:00424AE0                 dd 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h
.text:00424AE0                 dd 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh
.text:00424AE0                 dd 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h
.text:00424AE0                 dd 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh
.text:00424AE0                 dd 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h
.text:00424AE0                 dd 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
.text:00424AE0                 dd 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h
.text:00424AE0                 dd 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h
.text:00424AE0                 dd 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh
.text:00424AE0                 dd 0FBh, 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:00424CE4 dword_424CE4    dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:00424CE4                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:00424CE4                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:00424CE4                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:00424CE4                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:00424CE4                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:00424CE4                 dd 46h, 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h
.text:00424CE4                 dd 51h, 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 5Bh
.text:00424CE4                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 41h, 42h, 43h, 44h, 45h, 46h
.text:00424CE4                 dd 47h, 48h, 49h, 4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h, 51h
.text:00424CE4                 dd 52h, 53h, 54h, 55h, 56h, 57h, 58h, 59h, 5Ah, 7Bh, 7Ch
.text:00424CE4                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:00424CE4                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:00424CE4                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:00424CE4                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:00424CE4                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:00424CE4                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:00424CE4                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:00424CE4                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:00424CE4                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:00424CE4                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:00424CE4                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:00424CE4                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:00424CE4                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:00424CE4                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 80h
.text:00424CE4                 dd 81h, 82h, 83h, 84h, 85h, 86h, 87h, 88h, 89h, 8Ah, 8Bh
.text:00424CE4                 dd 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h, 93h, 94h, 95h, 96h
.text:00424CE4                 dd 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh, 9Eh, 9Fh, 0A0h, 0A1h
.text:00424CE4                 dd 0A2h, 0A3h, 0A4h, 0A5h, 0A6h, 0A7h, 0A8h, 0A9h, 0AAh
.text:00424CE4                 dd 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h
.text:00424CE4                 dd 0B4h, 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh
.text:00424CE4                 dd 0BDh, 0BEh, 0BFh, 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h
.text:00424CE4                 dd 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh
.text:00424CE4                 dd 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
.text:00424CE4                 dd 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h
.text:00424CE4                 dd 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h, 0E8h, 0E9h
.text:00424CE4                 dd 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h, 0F1h, 0F2h
.text:00424CE4                 dd 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh
.text:00424CE4                 dd 0FCh, 0FDh, 0FEh, 0FFFFFFFFh, 0
.text:004252E4                 dd 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:004252E4                 dd 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:004252E4                 dd 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:004252E4                 dd 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:004252E4                 dd 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:004252E4                 dd 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 61h, 62h, 63h, 64h, 65h
.text:004252E4                 dd 66h, 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h
.text:004252E4                 dd 71h, 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 5Bh
.text:004252E4                 dd 5Ch, 5Dh, 5Eh, 5Fh, 60h, 61h, 62h, 63h, 64h, 65h, 66h
.text:004252E4                 dd 67h, 68h, 69h, 6Ah, 6Bh, 6Ch, 6Dh, 6Eh, 6Fh, 70h, 71h
.text:004252E4                 dd 72h, 73h, 74h, 75h, 76h, 77h, 78h, 79h, 7Ah, 7Bh, 7Ch
.text:004252E4                 dd 7Dh, 7Eh, 7Fh, 80h, 81h, 82h, 83h, 84h, 85h, 86h, 87h
.text:004252E4                 dd 88h, 89h, 8Ah, 8Bh, 8Ch, 8Dh, 8Eh, 8Fh, 90h, 91h, 92h
.text:004252E4                 dd 93h, 94h, 95h, 96h, 97h, 98h, 99h, 9Ah, 9Bh, 9Ch, 9Dh
.text:004252E4                 dd 9Eh, 9Fh, 0A0h, 0A1h, 0A2h, 0A3h, 0A4h, 0A5h, 0A6h
.text:004252E4                 dd 0A7h, 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
.text:004252E4                 dd 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h, 0B8h
.text:004252E4                 dd 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h, 0C1h
.text:004252E4                 dd 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh
.text:004252E4                 dd 0CBh, 0CCh, 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h
.text:004252E4                 dd 0D4h, 0D5h, 0D6h, 0D7h, 0D8h, 0D9h, 0DAh, 0DBh, 0DCh
.text:004252E4                 dd 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h
.text:004252E4                 dd 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh
.text:004252E4                 dd 0EFh, 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
.text:004252E4                 dd 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh, 2 dup(0)
.text:004256E8                 dd 7FFFFFEh, 5 dup(0)
.text:00425700 dword_425700    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00425700                                         ; DATA XREF: .text:00425F1C↓o
.text:0042571C                 dd 20h, 7FFFFFEh, 0
.text:00425728                 db 18h dup(90h)
.text:00425740                 dd 3 dup(0)
.text:0042574C                 dd 7FFFFFEh, 4 dup(0)
.text:00425760 dword_425760    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:00425760                                         ; DATA XREF: .text:00425F20↓o
.text:0042577C                 dd 20h, 0
.text:00425784                 dd 7FFFFFEh, 6 dup(90909090h), 2 dup(0)
.text:004257A8                 dd 2 dup(7FFFFFEh), 4 dup(0)
.text:004257C0 dword_4257C0    dd 7, 1, 6, 2 dup(1), 18h, 0
.text:004257C0                                         ; DATA XREF: .text:00425F24↓o
.text:004257DC                 dd 20h, 2 dup(7FFFFFEh), 6 dup(90909090h), 0
.text:00425804                 dd 3FF0000h, 6 dup(0)
.text:00425820 dword_425820    dd 6, 1, 6, 0           ; DATA XREF: .text:00425F28↓o
.text:00425830                 dd 1, 18h, 1Ch, 0
.text:00425840                 dd 3FF0000h, 7 dup(90909090h), 0
.text:00425864                 dd 3FF0000h, 2 dup(7Eh), 4 dup(0)
.text:00425880 dword_425880    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F2C↓o
.text:00425890                 dd 3, 18h, 1Ch, 0
.text:004258A0                 dd 3FF0000h, 2 dup(7Eh), 5 dup(90909090h), 3E00h, 1, 6 dup(0)
.text:004258E0 dword_4258E0    dd 6, 1, 6, 0           ; DATA XREF: .text:00425F30↓o
.text:004258F0                 dd 1, 18h, 1Ch, 3E00h, 1, 7 dup(90909090h), 0
.text:00425924                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 4 dup(0)
.text:00425940 dword_425940    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F34↓o
.text:00425950                 dd 3, 18h, 1Ch, 0
.text:00425960                 dd 2 dup(0FFFFFFFFh), 7FFFFFFFh, 5 dup(90909090h), 0
.text:00425984                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 4 dup(0)
.text:004259A0 dword_4259A0    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F38↓o
.text:004259B0                 dd 3, 18h, 1Ch, 0
.text:004259C0                 dd 0FFFFFFFEh, 0FFFFFFFFh, 7FFFFFFFh, 5 dup(90909090h)
.text:004259C0                 dd 200h, 1, 6 dup(0)
.text:00425A00 dword_425A00    dd 6, 1, 6, 0           ; DATA XREF: .text:00425F3C↓o
.text:00425A10                 dd 1, 18h, 1Ch, 200h, 1, 7 dup(90909090h), 0FFFFFFFFh
.text:00425A10                 dd 2 dup(0)
.text:00425A4C                 dd 80000000h, 4 dup(0)
.text:00425A60 dword_425A60    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F40↓o
.text:00425A70                 dd 3, 18h, 1Ch, 0FFFFFFFFh, 2 dup(0)
.text:00425A88                 dd 80000000h, 5 dup(90909090h), 0
.text:00425AA4                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 4 dup(0)
.text:00425AC0 dword_425AC0    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F44↓o
.text:00425AD0                 dd 3, 18h, 1Ch, 0
.text:00425AE0                 dd 0FC00FFFEh, 0F8000001h, 78000001h, 5 dup(90909090h)
.text:00425AE0                 dd 0
.text:00425B04                 dd 3FF0000h, 2 dup(7FFFFFEh), 4 dup(0)
.text:00425B20 dword_425B20    dd 7, 1, 7, 0           ; DATA XREF: .text:00425F48↓o
.text:00425B30                 dd 3, 18h, 1Ch, 0
.text:00425B40 dword_425B40    dd 3FF0000h, 2 dup(7FFFFFEh), 5 dup(90909090h), 7, 1, 5
.text:00425B40                 dd 3, 1Fh, 18h, 3 dup(0)
.text:00425B84                 dd 28h, 0
.text:00425B8C                 dd 1Ah dup(0FFFFFFE0h), 5 dup(0)
.text:00425C08                 align 20h
.text:00425C20 dword_425C20    dd 7, 1, 5, 3, 1Fh, 18h, 2 dup(0)
.text:00425C20                                         ; DATA XREF: .text:00425F50↓o
.text:00425C40                 dd 28h, 2 dup(0)
.text:00425C4C                 dd 1Ah dup(20h), 5 dup(0)
.text:00425CC8                 align 20h
.text:00425CE0 dword_425CE0    dd 7, 1, 4, 7, 0Fh, 18h, 38h, 0
.text:00425CE0                                         ; DATA XREF: .text:00425E34↓o
.text:00425D00 dword_425D00    dd 5 dup(48h), 49h, 0FFFFFF00h, 3 dup(0FFFFFFFFh), 4 dup(1010101h)
.text:00425D00                 dd 0FFh, 26748Dh, 65707075h, 6F6C0072h, 726577h, 68706C61h
.text:00425D00                 dd 69640061h, 746967h, 67696478h, 73007469h, 65636170h
.text:00425D00                 dd 69727000h, 6700746Eh, 68706172h, 616C6200h, 63006B6Eh
.text:00425D00                 dd 6C72746Eh, 6E757000h, 61007463h, 6D756E6Ch, 6F740000h
.text:00425D00                 dd 65707075h, 6F740072h, 65776F6Ch, 30000072h, 32003100h
.text:00425D00                 dd 34003300h, 36003500h, 38003700h, 90003900h, 30h, 31h
.text:00425D00                 dd 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Fh, 26748Dh
.text:00425D00                 dd 426B00h, 5 dup(0)
.text:00425DF8                 dd 0FFFFFFFFh, 1, 54h, 4243E0h, 424AE0h, 0
.text:00425E10                 dd offset dword_424CE4+3FCh
.text:00425E14                 align 8
.text:00425E18                 dd offset dword_4246E0
.text:00425E1C                 dd 4 dup(0)
.text:00425E2C                 dd offset dword_425D00+40h
.text:00425E30                 dd offset dword_425D00+8Ah
.text:00425E34                 dd offset dword_425CE0
.text:00425E38                 dd 1
.text:00425E3C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00425E40                 dd offset dword_424AE0+200h
.text:00425E44                 dd offset dword_424CE4+5FCh
.text:00425E48                 dd 46h, 52h, 1, 425D9Bh, 425D9Dh, 425D9Fh, 425DA1h, 425DA3h
.text:00425E48                 dd 425DA5h, 425DA7h, 425DA9h, 425DABh, 425DADh, 1, 425DB0h
.text:00425E48                 dd 425DB4h, 425DB8h, 425DBCh, 425DC0h, 425DC4h, 425DC8h
.text:00425E48                 dd 425DCCh, 425DD0h, 425DD4h, 425D9Bh, 425D9Dh, 425D9Fh
.text:00425E48                 dd 425DA1h, 425DA3h, 425DA5h, 425DA7h, 425DA9h, 425DABh
.text:00425E48                 dd 425DADh, 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h
.text:00425E48                 dd 39h, 548h, 41DF00h, 41F420h, 420940h, 421E60h, 1, 425DD8h
.text:00425E48                 dd 2 dup(0)
.text:00425F1C                 dd offset dword_425700
.text:00425F20                 dd offset dword_425760
.text:00425F24                 dd offset dword_4257C0
.text:00425F28                 dd offset dword_425820
.text:00425F2C                 dd offset dword_425880
.text:00425F30                 dd offset dword_4258E0
.text:00425F34                 dd offset dword_425940
.text:00425F38                 dd offset dword_4259A0
.text:00425F3C                 dd offset dword_425A00
.text:00425F40                 dd offset dword_425A60
.text:00425F44                 dd offset dword_425AC0
.text:00425F48                 dd offset dword_425B20
.text:00425F4C                 dd offset dword_425B40+20h
.text:00425F50                 dd offset dword_425C20
.text:00425F54                 align 10h
.text:00425F60                 dd 2D00007Fh, 90909000h, 6 dup(90909090h), 426B00h, 5 dup(0)
.text:00425F98                 dd 0FFFFFFFFh, 0
.text:00425FA0                 dd 2Eh, 7 dup(425F62h), 8 dup(425F60h), 425F63h, 6 dup(425F60h)
.text:00425FA0                 dd 2 dup(425F62h), 0Eh dup(425F60h), 2775h, 5F5BEBFh, 2775h
.text:00425FA0                 dd 5F5BEBFh, 1, 2 dup(0)
.text:00426058                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:0042605C                 align 10h
.text:00426060                 dd 9000002Eh, 7 dup(90909090h), 426B00h, 5 dup(0)
.text:00426098                 dd 0FFFFFFFFh, 0
.text:004260A0                 dd 6, 426060h, 2 dup(426062h), 2Eh, 0
.text:004260B8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004260BC                 align 10h
.text:004260C0                 db  53h ; S
.text:004260C1                 db 75h, 6Eh, 0
.text:004260C4                 db  4Dh ; M
.text:004260C5                 db 6Fh, 6Eh, 0
.text:004260C8                 db  54h ; T
.text:004260C9                 db 75h, 65h, 0
.text:004260CC                 db  57h ; W
.text:004260CD                 db 65h, 64h, 0
.text:004260D0                 db  54h ; T
.text:004260D1                 db 68h, 75h, 0
.text:004260D4                 db  46h ; F
.text:004260D5                 db 72h, 69h, 0
.text:004260D8                 db  53h ; S
.text:004260D9                 db 61h, 74h, 0
.text:004260DC aSunday         db 'Sunday',0           ; DATA XREF: .text:004264C0↓o
.text:004260E3 aMonday         db 'Monday',0           ; DATA XREF: .text:004264C4↓o
.text:004260EA aTuesday        db 'Tuesday',0          ; DATA XREF: .text:004264C8↓o
.text:004260F2 aWednesday      db 'Wednesday',0        ; DATA XREF: .text:004264CC↓o
.text:004260FC aThursday       db 'Thursday',0         ; DATA XREF: .text:004264D0↓o
.text:00426105 aFriday         db 'Friday',0           ; DATA XREF: .text:004264D4↓o
.text:0042610C aSaturday       db 'Saturday',0         ; DATA XREF: .text:004264D8↓o
.text:00426115 aJan            db 'Jan',0              ; DATA XREF: .text:004264DC↓o
.text:00426119 aFeb            db 'Feb',0              ; DATA XREF: .text:004264E0↓o
.text:0042611D aMar            db 'Mar',0              ; DATA XREF: .text:004264E4↓o
.text:00426121 aApr            db 'Apr',0              ; DATA XREF: .text:004264E8↓o
.text:00426125 aMay            db 'May',0              ; DATA XREF: .text:004264EC↓o
.text:00426125                                         ; .text:0042651C↓o
.text:00426129 aJun            db 'Jun',0              ; DATA XREF: .text:004264F0↓o
.text:0042612D aJul            db 'Jul',0              ; DATA XREF: .text:004264F4↓o
.text:00426131 aAug            db 'Aug',0              ; DATA XREF: .text:004264F8↓o
.text:00426135 aSep            db 'Sep',0              ; DATA XREF: .text:004264FC↓o
.text:00426139 aOct            db 'Oct',0              ; DATA XREF: .text:00426500↓o
.text:0042613D aNov            db 'Nov',0              ; DATA XREF: .text:00426504↓o
.text:00426141 aDec            db 'Dec',0              ; DATA XREF: .text:00426508↓o
.text:00426145 aJanuary        db 'January',0          ; DATA XREF: .text:0042650C↓o
.text:0042614D aFebruary       db 'February',0         ; DATA XREF: .text:00426510↓o
.text:00426156 aMarch          db 'March',0            ; DATA XREF: .text:00426514↓o
.text:0042615C aApril          db 'April',0            ; DATA XREF: .text:00426518↓o
.text:00426162 aJune           db 'June',0             ; DATA XREF: .text:00426520↓o
.text:00426167 aJuly           db 'July',0             ; DATA XREF: .text:00426524↓o
.text:0042616C aAugust         db 'August',0           ; DATA XREF: .text:00426528↓o
.text:00426173 aSeptember      db 'September',0        ; DATA XREF: .text:0042652C↓o
.text:0042617D aOctober        db 'October',0          ; DATA XREF: .text:00426530↓o
.text:00426185 aNovember       db 'November',0         ; DATA XREF: .text:00426534↓o
.text:0042618E aDecember       db 'December',0         ; DATA XREF: .text:00426538↓o
.text:00426197 aAm             db 'AM',0               ; DATA XREF: .text:0042653C↓o
.text:0042619A aPm             db 'PM',0               ; DATA XREF: .text:00426540↓o
.text:0042619D aABEHMSY        db '%a %b %e %H:%M:%S %Y',0
.text:0042619D                                         ; DATA XREF: .text:00426544↓o
.text:004261B2 aMDY            db '%m/%d/%y',0         ; DATA XREF: .text:00426548↓o
.text:004261BB aHMS            db '%H:%M:%S',0         ; DATA XREF: .text:0042654C↓o
.text:004261C4 aIMSP           db '%I:%M:%S %p',0      ; DATA XREF: .text:00426550↓o
.text:004261D0 dword_4261D0    dd 539000h, 6E0075h, 4D0000h, 6E006Fh, 540000h, 650075h
.text:004261D0                                         ; DATA XREF: .text:00426558↓o
.text:004261D0                                         ; .text:0042655C↓o ...
.text:004261D0                 dd 570000h, 640065h, 540000h, 750068h, 460000h, 690072h
.text:004261D0                 dd 530000h, 740061h, 530000h, 6E0075h, 610064h, 79h, 6F004Dh
.text:004261D0                 dd 64006Eh, 790061h, 540000h, 650075h, 640073h, 790061h
.text:004261D0                 dd 570000h, 640065h, 65006Eh, 640073h, 790061h, 540000h
.text:004261D0                 dd 750068h, 730072h, 610064h, 79h, 720046h, 640069h, 790061h
.text:004261D0                 dd 530000h, 740061h, 720075h, 610064h, 79h, 61004Ah, 6Eh
.text:004261D0                 dd 650046h, 62h, 61004Dh, 72h, 700041h, 72h, 61004Dh, 79h
.text:004261D0                 dd 75004Ah, 6Eh, 75004Ah, 6Ch, 750041h, 67h, 650053h, 70h
.text:004261D0                 dd 63004Fh, 74h, 6F004Eh, 76h, 650044h, 63h, 61004Ah, 75006Eh
.text:004261D0                 dd 720061h, 79h, 650046h, 720062h, 610075h, 790072h, 4D0000h
.text:004261D0                 dd 720061h, 680063h, 410000h, 720070h, 6C0069h, 4A0000h
.text:004261D0                 dd 6E0075h, 65h, 75004Ah, 79006Ch, 410000h, 670075h, 730075h
.text:004261D0                 dd 74h, 650053h, 740070h, 6D0065h, 650062h, 72h, 63004Fh
.text:004261D0                 dd 6F0074h, 650062h, 72h, 6F004Eh, 650076h, 62006Dh, 720065h
.text:004261D0                 dd 440000h, 630065h, 6D0065h, 650062h, 72h, 4D0041h, 500000h
.text:004261D0                 dd 4Dh, 5 dup(90909090h), 610025h, 250020h, 200062h, 650025h
.text:004261D0                 dd 250020h, 3A0048h, 4D0025h, 25003Ah, 200053h, 590025h
.text:004261D0                 dd 250000h, 2F006Dh, 640025h, 25002Fh, 79h, 480025h, 25003Ah
.text:004261D0                 dd 3A004Dh, 530025h, 250000h, 3A0049h, 4D0025h, 25003Ah
.text:004261D0                 dd 200053h, 700025h, 0
.text:00426408 unk_426408      db    7                 ; DATA XREF: .text:00426638↓o
.text:00426409                 align 2
.text:0042640A                 dw 4
.text:0042640C                 db    1
.text:0042640D                 align 2
.text:0042640E aABEHMSZY       db '%a %b %e %H:%M:%S %Z %Y',0
.text:0042640E                                         ; DATA XREF: .text:00426654↓o
.text:00426426                 align 20h
.text:00426440 aABEHMSZY_0:                            ; DATA XREF: .text:00426658↓o
.text:00426440                 text "UTF-16LE", '%a %b %e %H:%M:%S %Z %Y',0
.text:00426470                 db 10h dup(90h)
.text:00426480                 dd offset dword_426B00
.text:00426484                 dd 5 dup(0)
.text:00426498                 dd 0FFFFFFFFh, 0
.text:004264A0                 dd 6Fh, 4260C0h, 4260C4h, 4260C8h, 4260CCh, 4260D0h, 4260D4h
.text:004264A0                 dd 4260D8h
.text:004264C0                 dd offset aSunday       ; "Sunday"
.text:004264C4                 dd offset aMonday       ; "Monday"
.text:004264C8                 dd offset aTuesday      ; "Tuesday"
.text:004264CC                 dd offset aWednesday    ; "Wednesday"
.text:004264D0                 dd offset aThursday     ; "Thursday"
.text:004264D4                 dd offset aFriday       ; "Friday"
.text:004264D8                 dd offset aSaturday     ; "Saturday"
.text:004264DC                 dd offset aJan          ; "Jan"
.text:004264E0                 dd offset aFeb          ; "Feb"
.text:004264E4                 dd offset aMar          ; "Mar"
.text:004264E8                 dd offset aApr          ; "Apr"
.text:004264EC                 dd offset aMay          ; "May"
.text:004264F0                 dd offset aJun          ; "Jun"
.text:004264F4                 dd offset aJul          ; "Jul"
.text:004264F8                 dd offset aAug          ; "Aug"
.text:004264FC                 dd offset aSep          ; "Sep"
.text:00426500                 dd offset aOct          ; "Oct"
.text:00426504                 dd offset aNov          ; "Nov"
.text:00426508                 dd offset aDec          ; "Dec"
.text:0042650C                 dd offset aJanuary      ; "January"
.text:00426510                 dd offset aFebruary     ; "February"
.text:00426514                 dd offset aMarch        ; "March"
.text:00426518                 dd offset aApril        ; "April"
.text:0042651C                 dd offset aMay          ; "May"
.text:00426520                 dd offset aJune         ; "June"
.text:00426524                 dd offset aJuly         ; "July"
.text:00426528                 dd offset aAugust       ; "August"
.text:0042652C                 dd offset aSeptember    ; "September"
.text:00426530                 dd offset aOctober      ; "October"
.text:00426534                 dd offset aNovember     ; "November"
.text:00426538                 dd offset aDecember     ; "December"
.text:0042653C                 dd offset aAm           ; "AM"
.text:00426540                 dd offset aPm           ; "PM"
.text:00426544                 dd offset aABEHMSY      ; "%a %b %e %H:%M:%S %Y"
.text:00426548                 dd offset aMDY          ; "%m/%d/%y"
.text:0042654C                 dd offset aHMS          ; "%H:%M:%S"
.text:00426550                 dd offset aIMSP         ; "%I:%M:%S %p"
.text:00426554                 align 8
.text:00426558                 dd offset dword_4261D0
.text:0042655C                 dd offset dword_4261D0
.text:00426560                 dd offset dword_4261D0
.text:00426564                 dd offset dword_4261D0
.text:00426568                 dd offset dword_4261D0
.text:0042656C                 align 10h
.text:00426570                 dd offset dword_4261D0
.text:00426574                 dd offset dword_4261D0+2
.text:00426578                 dd offset dword_4261D0+0Ah
.text:0042657C                 dd offset dword_4261D0+12h
.text:00426580                 dd offset dword_4261D0+1Ah
.text:00426584                 dd offset dword_4261D0+22h
.text:00426588                 dd offset dword_4261D0+2Ah
.text:0042658C                 dd offset dword_4261D0+32h
.text:00426590                 dd offset dword_4261D0+3Ah
.text:00426594                 dd offset dword_4261D0+48h
.text:00426598                 dd offset dword_4261D0+56h
.text:0042659C                 dd offset dword_4261D0+66h
.text:004265A0                 dd offset dword_4261D0+7Ah
.text:004265A4                 dd offset dword_4261D0+8Ch
.text:004265A8                 dd offset dword_4261D0+9Ah
.text:004265AC                 dd offset dword_4261D0+0ACh
.text:004265B0                 dd offset dword_4261D0+0B4h
.text:004265B4                 dd offset dword_4261D0+0BCh
.text:004265B8                 dd offset dword_4261D0+0C4h
.text:004265BC                 dd offset dword_4261D0+0CCh
.text:004265C0                 dd offset dword_4261D0+0D4h
.text:004265C4                 dd offset dword_4261D0+0DCh
.text:004265C8                 dd offset dword_4261D0+0E4h
.text:004265CC                 dd offset dword_4261D0+0ECh
.text:004265D0                 dd offset dword_4261D0+0F4h
.text:004265D4                 dd offset dword_4261D0+0FCh
.text:004265D8                 dd offset dword_4261D0+104h
.text:004265DC                 dd offset dword_4261D0+10Ch
.text:004265E0                 dd offset dword_4261D0+11Ch
.text:004265E4                 dd offset dword_4261D0+12Eh
.text:004265E8                 dd offset dword_4261D0+13Ah
.text:004265EC                 dd offset dword_4261D0+0CCh
.text:004265F0                 dd offset dword_4261D0+146h
.text:004265F4                 dd offset dword_4261D0+150h
.text:004265F8                 dd offset dword_4261D0+15Ah
.text:004265FC                 dd offset dword_4261D0+168h
.text:00426600                 dd offset dword_4261D0+17Ch
.text:00426604                 dd offset dword_4261D0+18Ch
.text:00426608                 dd offset dword_4261D0+19Eh
.text:0042660C                 dd offset dword_4261D0+1B0h
.text:00426610                 dd offset dword_4261D0+1B6h
.text:00426614                 dd offset dword_4261D0+1D0h
.text:00426618                 dd offset dword_4261D0+1FAh
.text:0042661C                 dd offset dword_4261D0+20Ch
.text:00426620                 dd offset dword_4261D0+21Eh
.text:00426624                 dd offset dword_4261D0+236h
.text:00426628                 dd offset dword_4261D0+236h
.text:0042662C                 dd offset dword_4261D0+236h
.text:00426630                 dd offset dword_4261D0+236h
.text:00426634                 dd offset dword_4261D0+236h
.text:00426638                 dd offset unk_426408
.text:0042663C                 dd 130BC3Ah, 42640Ah, 426408h, 2 dup(42640Ch), 4261D0h
.text:00426654                 dd offset aABEHMSZY     ; "%a %b %e %H:%M:%S %Z %Y"
.text:00426658                 dd offset aABEHMSZY_0   ; "%a %b %e %H:%M:%S %Z %Y"
.text:0042665C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00426660 aYy             db '^[yY]',0            ; DATA XREF: .text:004266A4↓o
.text:00426666 aNn             db '^[nN]',0            ; DATA XREF: .text:004266A8↓o
.text:0042666C dword_42666C    dd 90909000h, 4 dup(90909090h), 426B00h, 5 dup(0)
.text:0042666C                                         ; DATA XREF: .text:004266AC↓o
.text:0042666C                                         ; .text:004266B0↓o
.text:00426698                 dd 0FFFFFFFFh, 0
.text:004266A0                 dd 5
.text:004266A4                 dd offset aYy           ; "^[yY]"
.text:004266A8                 dd offset aNn           ; "^[nN]"
.text:004266AC                 dd offset dword_42666C
.text:004266B0                 dd offset dword_42666C
.text:004266B4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004266B8                 db 8 dup(90h)
.text:004266C0                 dd offset dword_426B00
.text:004266C4                 dd 5 dup(0)
.text:004266D8                 dd 0FFFFFFFFh, 0
.text:004266E0                 dd 3, 129h, 0D2h
.text:004266EC                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004266F0                 align 20h
.text:00426700 aPTGTMTF        db '%p%t%g%t%m%t%f',0   ; DATA XREF: .text:00426744↓o
.text:0042670F unk_42670F      db    0                 ; DATA XREF: .text:00426748↓o
.text:0042670F                                         ; .text:0042674C↓o ...
.text:00426710                 db 10h dup(90h)
.text:00426720                 dd offset dword_426B00
.text:00426724                 dd 5 dup(0)
.text:00426738                 dd 0FFFFFFFFh, 0
.text:00426740                 dd 7
.text:00426744                 dd offset aPTGTMTF      ; "%p%t%g%t%m%t%f"
.text:00426748                 dd offset unk_42670F
.text:0042674C                 dd offset unk_42670F
.text:00426750                 dd offset unk_42670F
.text:00426754                 dd offset unk_42670F
.text:00426758                 dd offset unk_42670F
.text:0042675C                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00426760 aANFNDNBNSHERNC db '%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N%c%N',0
.text:00426760                                         ; DATA XREF: .text:004267C4↓o
.text:0042678C dword_42678C    dd 90909000h, 4 dup(90909090h), 426B00h, 5 dup(0)
.text:0042678C                                         ; DATA XREF: .text:004267C8↓o
.text:0042678C                                         ; .text:004267CC↓o ...
.text:004267B8                 dd 0FFFFFFFFh, 0
.text:004267C0                 dd 0Dh
.text:004267C4                 dd offset aANFNDNBNSHERNC ; "%a%N%f%N%d%N%b%N%s %h %e %r%N%C-%z %T%N"...
.text:004267C8                 dd offset dword_42678C
.text:004267CC                 dd offset dword_42678C
.text:004267D0                 dd offset dword_42678C
.text:004267D4                 dd offset dword_42678C
.text:004267D8                 dd offset dword_42678C
.text:004267DC                 dd offset dword_42678C
.text:004267E0                 dd offset dword_42678C
.text:004267E4                 dd offset dword_42678C
.text:004267E8                 dd offset dword_42678C
.text:004267EC                 dd offset dword_42678C
.text:004267F0                 dd offset dword_42678C
.text:004267F4                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004267F8                 align 10h
.text:00426800 aCAL            db '+%c %a %l',0
.text:0042680A unk_42680A      db    0                 ; DATA XREF: .text:00426848↓o
.text:0042680A                                         ; .text:0042684C↓o ...
.text:0042680B                 db  90h
.text:0042680C                 db 14h dup(90h)
.text:00426820                 dd offset dword_426B00
.text:00426824                 dd 5 dup(0)
.text:00426838                 dd 0FFFFFFFFh, 0
.text:00426840                 db 5, 4 dup(0)
.text:00426845                 db 68h, 42h, 0
.text:00426848                 dd offset unk_42680A
.text:0042684C                 dd offset unk_42680A
.text:00426850                 dd offset unk_42680A
.text:00426854                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00426858                 align 10h
.text:00426860                 dd 90900001h, 7 dup(90909090h), 426B00h, 5 dup(0)
.text:00426898                 dd 0FFFFFFFFh, 0
.text:004268A0                 dd 2, 426860h
.text:004268A8                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:004268AC                 align 20h
.text:004268C0 aIsoIec14652I18 db 'ISO/IEC 14652 i18n FDCC-set',0
.text:004268C0                                         ; DATA XREF: .text:00426AA4↓o
.text:004268DC                 align 10h
.text:004268E0 aIsoIecJtc1Sc22 db 'ISO/IEC JTC1/SC22/WG20 - internationalization',0
.text:004268E0                                         ; DATA XREF: .text:00426AA8↓o
.text:0042690E                 align 20h
.text:00426920 aCOKeldSimonsen db 'C/o Keld Simonsen, Skt. Jorgens Alle 8, DK-1615 Kobenhavn V',0
.text:00426920                                         ; DATA XREF: .text:00426AAC↓o
.text:0042695C aKeldSimonsen   db 'Keld Simonsen',0    ; DATA XREF: .text:00426AB0↓o
.text:0042696A aKeldDkuugDk    db 'keld@dkuug.dk',0    ; DATA XREF: .text:00426AB4↓o
.text:00426978 a4531226543     db '+45 3122-6543',0    ; DATA XREF: .text:00426AB8↓o
.text:00426986 a4533256543     db '+45 3325-6543',0    ; DATA XREF: .text:00426ABC↓o
.text:00426994 dword_426994    dd 4F534900h, 302E3100h, 39393100h, 32312D37h, 30322Dh
.text:00426994                                         ; DATA XREF: .text:00426AC0↓o
.text:00426994                                         ; .text:00426AC8↓o ...
.text:00426994                 dd 6 dup(90909090h), 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00426994                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00426994                 dd 393939h, 6E383169h, 3939313Ah, 31690039h, 313A6E38h
.text:00426994                 dd 393939h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00426994                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00426994                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00426994                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00426994                 dd 39393931h, 38316900h, 39313A6Eh, 69003939h, 3A6E3831h
.text:00426994                 dd 39393931h, 90909000h, 7 dup(90909090h), 426B00h, 5 dup(0)
.text:00426A98                 dd 0FFFFFFFFh, 0
.text:00426AA0                 dd 10h
.text:00426AA4                 dd offset aIsoIec14652I18 ; "ISO/IEC 14652 i18n FDCC-set"
.text:00426AA8                 dd offset aIsoIecJtc1Sc22 ; "ISO/IEC JTC1/SC22/WG20 - internationali"...
.text:00426AAC                 dd offset aCOKeldSimonsen ; "C/o Keld Simonsen, Skt. Jorgens Alle 8,"...
.text:00426AB0                 dd offset aKeldSimonsen ; "Keld Simonsen"
.text:00426AB4                 dd offset aKeldDkuugDk  ; "keld@dkuug.dk"
.text:00426AB8                 dd offset a4531226543   ; "+45 3122-6543"
.text:00426ABC                 dd offset a4533256543   ; "+45 3325-6543"
.text:00426AC0                 dd offset dword_426994
.text:00426AC4                 dd offset dword_426994+1
.text:00426AC8                 dd offset dword_426994
.text:00426ACC                 dd offset dword_426994
.text:00426AD0                 dd offset dword_426994
.text:00426AD4                 dd offset dword_426994+5
.text:00426AD8                 dd offset dword_426994+9
.text:00426ADC                 dd offset dword_426994+2Ch
.text:00426AE0                 dd offset aAnsiX341968  ; "ANSI_X3.4-1968"
.text:00426AE4                 align 20h
.text:00426B00 dword_426B00    dd 4F500043h, 584953h   ; DATA XREF: .text:00426480↑o
.text:00426B00                                         ; .text:004266C0↑o ...
.text:00426B08 aAnsiX341968    db 'ANSI_X3.4-1968',0   ; DATA XREF: .text:0041DEEC↑o
.text:00426B08                                         ; .text:00425E3C↑o ...
.text:00426B17                 align 10h
.text:00426B20
.text:00426B20 ; =============== S U B R O U T I N E =======================================
.text:00426B20
.text:00426B20
.text:00426B20 sub_426B20      proc near               ; CODE XREF: _sysconf+297↑j
.text:00426B20
.text:00426B20 lpSystemInfo    = dword ptr -0Ch
.text:00426B20 var_4           = dword ptr -4
.text:00426B20
.text:00426B20                 sub     esp, 0Ch
.text:00426B23                 mov     [esp+0Ch+var_4], edi
.text:00426B27                 mov     edi, ds:dword_42D190
.text:00426B2D                 test    edi, edi
.text:00426B2F                 mov     eax, edi
.text:00426B31                 jz      short loc_426B40
.text:00426B33
.text:00426B33 loc_426B33:                             ; CODE XREF: sub_426B20+48↓j
.text:00426B33                 mov     eax, [edi+14h]
.text:00426B36                 mov     edi, [esp+0Ch+var_4]
.text:00426B3A                 add     esp, 0Ch
.text:00426B3D                 retn
.text:00426B3D ; ---------------------------------------------------------------------------
.text:00426B3E                 align 10h
.text:00426B40
.text:00426B40 loc_426B40:                             ; CODE XREF: sub_426B20+11↑j
.text:00426B40                 cld
.text:00426B41                 mov     edi, offset SystemInfo
.text:00426B46                 mov     ecx, 9
.text:00426B4B                 mov     ds:dword_42D190, edi
.text:00426B51                 rep stosd
.text:00426B53                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00426B5A                 call    GetSystemInfo
.text:00426B5F                 mov     edi, ds:dword_42D190
.text:00426B65                 sub     esp, 4
.text:00426B68                 jmp     short loc_426B33
.text:00426B68 sub_426B20      endp
.text:00426B68
.text:00426B68 ; ---------------------------------------------------------------------------
.text:00426B6A                 align 10h
.text:00426B70
.text:00426B70 ; =============== S U B R O U T I N E =======================================
.text:00426B70
.text:00426B70
.text:00426B70 sub_426B70      proc near               ; CODE XREF: _sysconf+28F↑j
.text:00426B70
.text:00426B70 lpSystemInfo    = dword ptr -0Ch
.text:00426B70 var_4           = dword ptr -4
.text:00426B70
.text:00426B70                 sub     esp, 0Ch
.text:00426B73                 mov     [esp+0Ch+var_4], edi
.text:00426B77                 mov     edi, ds:dword_42D190
.text:00426B7D                 test    edi, edi
.text:00426B7F                 mov     eax, edi
.text:00426B81                 jz      short loc_426B90
.text:00426B83
.text:00426B83 loc_426B83:                             ; CODE XREF: sub_426B70+48↓j
.text:00426B83                 mov     eax, [edi+14h]
.text:00426B86                 mov     edi, [esp+0Ch+var_4]
.text:00426B8A                 add     esp, 0Ch
.text:00426B8D                 retn
.text:00426B8D ; ---------------------------------------------------------------------------
.text:00426B8E                 align 10h
.text:00426B90
.text:00426B90 loc_426B90:                             ; CODE XREF: sub_426B70+11↑j
.text:00426B90                 cld
.text:00426B91                 mov     edi, offset SystemInfo
.text:00426B96                 mov     ecx, 9
.text:00426B9B                 mov     ds:dword_42D190, edi
.text:00426BA1                 rep stosd
.text:00426BA3                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00426BAA                 call    GetSystemInfo
.text:00426BAF                 mov     edi, ds:dword_42D190
.text:00426BB5                 sub     esp, 4
.text:00426BB8                 jmp     short loc_426B83
.text:00426BB8 sub_426B70      endp
.text:00426BB8
.text:00426BB8 ; ---------------------------------------------------------------------------
.text:00426BBA                 align 10h
.text:00426BC0
.text:00426BC0 ; =============== S U B R O U T I N E =======================================
.text:00426BC0
.text:00426BC0
.text:00426BC0 sub_426BC0      proc near               ; CODE XREF: _sysconf+29F↑j
.text:00426BC0
.text:00426BC0 lpSystemInfo    = dword ptr -0Ch
.text:00426BC0 var_4           = dword ptr -4
.text:00426BC0
.text:00426BC0                 sub     esp, 0Ch
.text:00426BC3                 mov     [esp+0Ch+var_4], edi
.text:00426BC7                 mov     edi, ds:dword_42D190
.text:00426BCD                 test    edi, edi
.text:00426BCF                 mov     eax, edi
.text:00426BD1                 jz      short loc_426BE8
.text:00426BD3
.text:00426BD3 loc_426BD3:                             ; CODE XREF: sub_426BC0+50↓j
.text:00426BD3                 mov     eax, [edi+0Ch]
.text:00426BD6                 xor     edx, edx
.text:00426BD8                 mov     ecx, [edi+8]
.text:00426BDB                 sub     eax, ecx
.text:00426BDD                 div     dword ptr [edi+4]
.text:00426BE0                 mov     edi, [esp+0Ch+var_4]
.text:00426BE4                 add     esp, 0Ch
.text:00426BE7                 retn
.text:00426BE8 ; ---------------------------------------------------------------------------
.text:00426BE8
.text:00426BE8 loc_426BE8:                             ; CODE XREF: sub_426BC0+11↑j
.text:00426BE8                 cld
.text:00426BE9                 mov     edi, offset SystemInfo
.text:00426BEE                 mov     ecx, 9
.text:00426BF3                 mov     ds:dword_42D190, edi
.text:00426BF9                 rep stosd
.text:00426BFB                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00426C02                 call    GetSystemInfo
.text:00426C07                 mov     edi, ds:dword_42D190
.text:00426C0D                 sub     esp, 4
.text:00426C10                 jmp     short loc_426BD3
.text:00426C10 sub_426BC0      endp
.text:00426C10
.text:00426C10 ; ---------------------------------------------------------------------------
.text:00426C12                 align 10h
.text:00426C20
.text:00426C20 ; =============== S U B R O U T I N E =======================================
.text:00426C20
.text:00426C20
.text:00426C20 sub_426C20      proc near               ; CODE XREF: _sysconf+2A7↑j
.text:00426C20
.text:00426C20 lpSystemInfo    = dword ptr -0Ch
.text:00426C20 var_4           = dword ptr -4
.text:00426C20
.text:00426C20                 sub     esp, 0Ch
.text:00426C23                 mov     [esp+0Ch+var_4], edi
.text:00426C27                 mov     edi, ds:dword_42D190
.text:00426C2D                 test    edi, edi
.text:00426C2F                 mov     eax, edi
.text:00426C31                 jz      short loc_426C48
.text:00426C33
.text:00426C33 loc_426C33:                             ; CODE XREF: sub_426C20+50↓j
.text:00426C33                 mov     edx, [edi+8]
.text:00426C36                 mov     eax, [edi+0Ch]
.text:00426C39                 sub     eax, edx
.text:00426C3B                 xor     edx, edx
.text:00426C3D                 div     dword ptr [edi+4]
.text:00426C40                 mov     edi, [esp+0Ch+var_4]
.text:00426C44                 add     esp, 0Ch
.text:00426C47                 retn
.text:00426C48 ; ---------------------------------------------------------------------------
.text:00426C48
.text:00426C48 loc_426C48:                             ; CODE XREF: sub_426C20+11↑j
.text:00426C48                 cld
.text:00426C49                 mov     edi, offset SystemInfo
.text:00426C4E                 mov     ecx, 9
.text:00426C53                 mov     ds:dword_42D190, edi
.text:00426C59                 rep stosd
.text:00426C5B                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00426C62                 call    GetSystemInfo
.text:00426C67                 mov     edi, ds:dword_42D190
.text:00426C6D                 sub     esp, 4
.text:00426C70                 jmp     short loc_426C33
.text:00426C70 sub_426C20      endp
.text:00426C70
.text:00426C70 ; ---------------------------------------------------------------------------
.text:00426C72                 align 10h
.text:00426C80
.text:00426C80 ; =============== S U B R O U T I N E =======================================
.text:00426C80
.text:00426C80
.text:00426C80 sub_426C80      proc near               ; CODE XREF: _sysconf:loc_41CF8B↑p
.text:00426C80                                         ; _sysconf:loc_41CF9E↑p
.text:00426C80                 mov     edx, 40h ; '@'
.text:00426C85                 mov     eax, 40h ; '@'
.text:00426C8A                 mov     ds:dword_42D380, edx
.text:00426C90                 retn
.text:00426C90 sub_426C80      endp
.text:00426C90
.text:00426C90 ; ---------------------------------------------------------------------------
.text:00426C91                 align 10h
.text:00426CA0
.text:00426CA0 ; =============== S U B R O U T I N E =======================================
.text:00426CA0
.text:00426CA0
.text:00426CA0 sub_426CA0      proc near               ; CODE XREF: sub_41D570+12E↑p
.text:00426CA0                                         ; sub_41D760+B↑p
.text:00426CA0
.text:00426CA0 lpBuffer        = dword ptr -1Ch
.text:00426CA0 pcbBuffer       = dword ptr -18h
.text:00426CA0 var_8           = dword ptr -8
.text:00426CA0 var_4           = dword ptr -4
.text:00426CA0
.text:00426CA0                 sub     esp, 1Ch
.text:00426CA3                 lea     edx, [esp+1Ch+var_8]
.text:00426CA7                 mov     [esp+1Ch+pcbBuffer], edx ; pcbBuffer
.text:00426CAB                 mov     [esp+1Ch+var_4], ebx
.text:00426CAF                 mov     [esp+1Ch+var_8], 101h
.text:00426CB7                 mov     [esp+1Ch+lpBuffer], offset byte_42D1D0 ; lpBuffer
.text:00426CBE                 call    GetUserNameA
.text:00426CC3                 sub     esp, 8
.text:00426CC6                 mov     edx, offset byte_42D1D0
.text:00426CCB                 test    eax, eax
.text:00426CCD                 jz      short loc_426CD9
.text:00426CCF
.text:00426CCF loc_426CCF:                             ; CODE XREF: sub_426CA0+49↓j
.text:00426CCF                 mov     ebx, [esp+1Ch+var_4]
.text:00426CD3                 mov     eax, edx
.text:00426CD5                 add     esp, 1Ch
.text:00426CD8                 retn
.text:00426CD9 ; ---------------------------------------------------------------------------
.text:00426CD9
.text:00426CD9 loc_426CD9:                             ; CODE XREF: sub_426CA0+2D↑j
.text:00426CD9                 call    sub_41AD20
.text:00426CDE                 mov     ebx, eax
.text:00426CE0                 call    _errno
.text:00426CE5                 mov     [eax], ebx
.text:00426CE7                 xor     edx, edx
.text:00426CE9                 jmp     short loc_426CCF
.text:00426CE9 sub_426CA0      endp
.text:00426CE9
.text:00426CE9 ; ---------------------------------------------------------------------------
.text:00426CEB                 align 10h
.text:00426CF0
.text:00426CF0 ; =============== S U B R O U T I N E =======================================
.text:00426CF0
.text:00426CF0
.text:00426CF0 sub_426CF0      proc near               ; CODE XREF: sub_41D570+8A↑p
.text:00426CF0                                         ; .text:004275CB↓p
.text:00426CF0                 xor     eax, eax
.text:00426CF2                 retn
.text:00426CF2 sub_426CF0      endp
.text:00426CF2
.text:00426CF2 ; ---------------------------------------------------------------------------
.text:00426CF3                 align 10h
.text:00426D00
.text:00426D00 ; =============== S U B R O U T I N E =======================================
.text:00426D00
.text:00426D00
.text:00426D00 sub_426D00      proc near               ; CODE XREF: sub_41D570+7E↑p
.text:00426D00                                         ; .text:004275A4↓p
.text:00426D00                 xor     eax, eax
.text:00426D02                 retn
.text:00426D02 sub_426D00      endp
.text:00426D02
.text:00426D02 ; ---------------------------------------------------------------------------
.text:00426D03                 align 10h
.text:00426D10 aFile           db 'file',0             ; DATA XREF: sub_426D40:loc_426D6C↓o
.text:00426D15 ; const char aSSxxxxxx[]
.text:00426D15 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_426D40+9B↓o
.text:00426D25 ; const char aTemp[]
.text:00426D25 aTemp           db 'TEMP',0             ; DATA XREF: sub_426D40:loc_426E22↓o
.text:00426D25                                         ; sub_426D40:loc_426E62↓o ...
.text:00426D2A ; const char aTmp[]
.text:00426D2A aTmp            db '/tmp',0             ; DATA XREF: sub_426D40+12F↓o
.text:00426D2A                                         ; sub_426D40+141↓o ...
.text:00426D2F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_426D40:loc_426EE0↓o
.text:00426D36 aTmp_0          db 'TMP',0              ; DATA XREF: sub_426D40:loc_426F70↓o
.text:00426D3A                 align 10h
.text:00426D40
.text:00426D40 ; =============== S U B R O U T I N E =======================================
.text:00426D40
.text:00426D40
.text:00426D40 ; int __cdecl sub_426D40(char *Buffer, int, char *, char *, int)
.text:00426D40 sub_426D40      proc near               ; CODE XREF: sub_41D8C0+3B↑p
.text:00426D40
.text:00426D40 Str             = dword ptr -1BCh
.text:00426D40 Format          = dword ptr -1B8h
.text:00426D40 var_1B4         = dword ptr -1B4h
.text:00426D40 var_1B0         = dword ptr -1B0h
.text:00426D40 var_1AC         = dword ptr -1ACh
.text:00426D40 var_1A8         = dword ptr -1A8h
.text:00426D40 var_19C         = dword ptr -19Ch
.text:00426D40 var_13C         = dword ptr -13Ch
.text:00426D40 var_DC          = dword ptr -0DCh
.text:00426D40 var_7C          = dword ptr -7Ch
.text:00426D40 Buffer          = dword ptr  4
.text:00426D40 arg_4           = dword ptr  8
.text:00426D40 arg_8           = dword ptr  0Ch
.text:00426D40 arg_C           = dword ptr  10h
.text:00426D40 arg_10          = dword ptr  14h
.text:00426D40
.text:00426D40                 push    ebp
.text:00426D41                 push    edi
.text:00426D42                 push    esi
.text:00426D43                 push    ebx
.text:00426D44                 sub     esp, 1ACh
.text:00426D4A                 mov     eax, [esp+1BCh+arg_C]
.text:00426D51                 mov     esi, [esp+1BCh+arg_8]
.text:00426D58                 test    eax, eax
.text:00426D5A                 jz      short loc_426D6C
.text:00426D5C                 mov     edx, [esp+1BCh+arg_C]
.text:00426D63                 cmp     byte ptr [edx], 0
.text:00426D66                 jnz     loc_426FA0
.text:00426D6C
.text:00426D6C loc_426D6C:                             ; CODE XREF: sub_426D40+1A↑j
.text:00426D6C                 mov     eax, offset aFile ; "file"
.text:00426D71                 mov     ebp, 4
.text:00426D76                 mov     [esp+1BCh+arg_C], eax
.text:00426D7D
.text:00426D7D loc_426D7D:                             ; CODE XREF: sub_426D40+274↓j
.text:00426D7D                                         ; sub_426D40+27F↓j
.text:00426D7D                 mov     ebx, [esp+1BCh+arg_10]
.text:00426D84                 test    ebx, ebx
.text:00426D86                 jnz     loc_426EE0
.text:00426D8C
.text:00426D8C loc_426D8C:                             ; CODE XREF: sub_426D40+21C↓j
.text:00426D8C                                         ; sub_426D40+224↓j ...
.text:00426D8C                 test    esi, esi
.text:00426D8E                 jz      loc_426E22
.text:00426D94
.text:00426D94 loc_426D94:                             ; CODE XREF: sub_426D40+176↓j
.text:00426D94                                         ; sub_426D40+19A↓j
.text:00426D94                 mov     [esp+1BCh+Str], esi ; Str
.text:00426D97                 call    strlen
.text:00426D9C                 test    eax, eax
.text:00426D9E                 mov     edx, eax
.text:00426DA0                 jz      short loc_426DB0
.text:00426DA2                 movzx   eax, byte ptr [eax+esi-1]
.text:00426DA7                 cmp     al, 2Fh ; '/'
.text:00426DA9                 jz      short loc_426E10
.text:00426DAB                 cmp     al, 5Ch ; '\'
.text:00426DAD                 jz      short loc_426E10
.text:00426DAF                 nop
.text:00426DB0
.text:00426DB0 loc_426DB0:                             ; CODE XREF: sub_426D40+60↑j
.text:00426DB0                                         ; sub_426D40+D1↓j ...
.text:00426DB0                 lea     edi, [ebp+edx+8]
.text:00426DB4                 cmp     [esp+1BCh+arg_4], edi
.text:00426DBB                 jb      short loc_426DF8
.text:00426DBD                 mov     [esp+1BCh+var_1AC], ebp
.text:00426DC1                 mov     ecx, [esp+1BCh+arg_C]
.text:00426DC8                 mov     ebp, [esp+1BCh+Buffer]
.text:00426DCF                 mov     [esp+1BCh+var_1B0], esi
.text:00426DD3                 mov     [esp+1BCh+var_1A8], ecx
.text:00426DD7                 mov     [esp+1BCh+var_1B4], edx
.text:00426DDB                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00426DE3                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00426DE6                 call    sprintf
.text:00426DEB                 xor     eax, eax
.text:00426DED
.text:00426DED loc_426DED:                             ; CODE XREF: sub_426D40+C8↓j
.text:00426DED                 add     esp, 1ACh
.text:00426DF3                 pop     ebx
.text:00426DF4                 pop     esi
.text:00426DF5                 pop     edi
.text:00426DF6                 pop     ebp
.text:00426DF7                 retn
.text:00426DF8 ; ---------------------------------------------------------------------------
.text:00426DF8
.text:00426DF8 loc_426DF8:                             ; CODE XREF: sub_426D40+7B↑j
.text:00426DF8                 call    _errno
.text:00426DFD                 mov     dword ptr [eax], 16h
.text:00426E03
.text:00426E03 loc_426E03:                             ; CODE XREF: sub_426D40+187↓j
.text:00426E03                 mov     eax, 0FFFFFFFFh
.text:00426E08                 jmp     short loc_426DED
.text:00426E08 ; ---------------------------------------------------------------------------
.text:00426E0A                 align 10h
.text:00426E10
.text:00426E10 loc_426E10:                             ; CODE XREF: sub_426D40+69↑j
.text:00426E10                                         ; sub_426D40+6D↑j ...
.text:00426E10                 dec     edx
.text:00426E11                 jz      short loc_426DB0
.text:00426E13                 movzx   eax, byte ptr [edx+esi-1]
.text:00426E18                 cmp     al, 2Fh ; '/'
.text:00426E1A                 jz      short loc_426E10
.text:00426E1C                 cmp     al, 5Ch ; '\'
.text:00426E1E                 jz      short loc_426E10
.text:00426E20                 jmp     short loc_426DB0
.text:00426E22 ; ---------------------------------------------------------------------------
.text:00426E22
.text:00426E22 loc_426E22:                             ; CODE XREF: sub_426D40+4E↑j
.text:00426E22                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00426E29                 lea     esi, [esp+1BCh+var_13C]
.text:00426E30                 call    getenv
.text:00426E35                 mov     [esp+1BCh+Format], eax ; char *
.text:00426E39                 mov     [esp+1BCh+var_1B4], esi ; int
.text:00426E3D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00426E44                 call    sub_419DA0
.text:00426E49                 test    eax, eax
.text:00426E4B                 jnz     short loc_426E62
.text:00426E4D                 mov     edi, [esp+1BCh+var_13C]
.text:00426E54                 and     edi, 0F000h
.text:00426E5A                 cmp     edi, 4000h
.text:00426E60                 jz      short loc_426ECC
.text:00426E62
.text:00426E62 loc_426E62:                             ; CODE XREF: sub_426D40+10B↑j
.text:00426E62                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00426E69                 call    getenv
.text:00426E6E                 cld
.text:00426E6F                 mov     edx, offset aTmp ; "/tmp"
.text:00426E74                 mov     esi, eax
.text:00426E76                 mov     ecx, 5
.text:00426E7B                 mov     edi, edx
.text:00426E7D                 repe cmpsb
.text:00426E7F                 jz      short loc_426EBC
.text:00426E81                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:00426E89                 lea     ecx, [esp+1BCh+var_19C]
.text:00426E8D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00426E91                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00426E98                 call    sub_419DA0
.text:00426E9D                 test    eax, eax
.text:00426E9F                 jnz     short loc_426EBC
.text:00426EA1                 mov     ebx, [esp+1BCh+var_19C]
.text:00426EA5                 mov     esi, offset aTmp ; "/tmp"
.text:00426EAA                 and     ebx, 0F000h
.text:00426EB0                 cmp     ebx, 4000h
.text:00426EB6                 jz      loc_426D94
.text:00426EBC
.text:00426EBC loc_426EBC:                             ; CODE XREF: sub_426D40+13F↑j
.text:00426EBC                                         ; sub_426D40+15F↑j
.text:00426EBC                 call    _errno
.text:00426EC1                 mov     dword ptr [eax], 2
.text:00426EC7                 jmp     loc_426E03
.text:00426ECC ; ---------------------------------------------------------------------------
.text:00426ECC
.text:00426ECC loc_426ECC:                             ; CODE XREF: sub_426D40+120↑j
.text:00426ECC                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00426ED3                 call    getenv
.text:00426ED8                 mov     esi, eax
.text:00426EDA                 jmp     loc_426D94
.text:00426EDA ; ---------------------------------------------------------------------------
.text:00426EDF                 align 10h
.text:00426EE0
.text:00426EE0 loc_426EE0:                             ; CODE XREF: sub_426D40+46↑j
.text:00426EE0                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00426EE7                 call    sub_427570
.text:00426EEC                 test    eax, eax
.text:00426EEE                 mov     ebx, eax
.text:00426EF0                 jz      short loc_426F70
.text:00426EF2
.text:00426EF2 loc_426EF2:                             ; CODE XREF: sub_426D40+240↓j
.text:00426EF2                                         ; sub_426D40+256↓j
.text:00426EF2                 mov     [esp+1BCh+Format], ebx ; char *
.text:00426EF6                 lea     edi, [esp+1BCh+var_7C]
.text:00426EFD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00426F01                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00426F08                 call    sub_419DA0
.text:00426F0D                 test    eax, eax
.text:00426F0F                 jnz     short loc_426F26
.text:00426F11                 mov     edx, [esp+1BCh+var_7C]
.text:00426F18                 and     edx, 0F000h
.text:00426F1E                 cmp     edx, 4000h
.text:00426F24                 jz      short loc_426F69
.text:00426F26
.text:00426F26 loc_426F26:                             ; CODE XREF: sub_426D40+1CF↑j
.text:00426F26                                         ; sub_426D40+25C↓j
.text:00426F26                 test    esi, esi
.text:00426F28                 jz      short loc_426F62
.text:00426F2A                 mov     [esp+1BCh+Format], esi ; char *
.text:00426F2E                 lea     ecx, [esp+1BCh+var_DC]
.text:00426F35                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00426F39                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00426F40                 call    sub_419DA0
.text:00426F45                 test    eax, eax
.text:00426F47                 jnz     short loc_426F62
.text:00426F49                 mov     ebx, [esp+1BCh+var_DC]
.text:00426F50                 and     ebx, 0F000h
.text:00426F56                 cmp     ebx, 4000h
.text:00426F5C                 jz      loc_426D8C
.text:00426F62
.text:00426F62 loc_426F62:                             ; CODE XREF: sub_426D40+1E8↑j
.text:00426F62                                         ; sub_426D40+207↑j
.text:00426F62                 xor     esi, esi
.text:00426F64                 jmp     loc_426D8C
.text:00426F69 ; ---------------------------------------------------------------------------
.text:00426F69
.text:00426F69 loc_426F69:                             ; CODE XREF: sub_426D40+1E4↑j
.text:00426F69                 mov     esi, ebx
.text:00426F6B                 jmp     loc_426D8C
.text:00426F70 ; ---------------------------------------------------------------------------
.text:00426F70
.text:00426F70 loc_426F70:                             ; CODE XREF: sub_426D40+1B0↑j
.text:00426F70                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:00426F77                 call    sub_427570
.text:00426F7C                 test    eax, eax
.text:00426F7E                 mov     ebx, eax
.text:00426F80                 jnz     loc_426EF2
.text:00426F86                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00426F8D                 call    sub_427570
.text:00426F92                 test    eax, eax
.text:00426F94                 mov     ebx, eax
.text:00426F96                 jnz     loc_426EF2
.text:00426F9C                 jmp     short loc_426F26
.text:00426F9C ; ---------------------------------------------------------------------------
.text:00426F9E                 align 10h
.text:00426FA0
.text:00426FA0 loc_426FA0:                             ; CODE XREF: sub_426D40+26↑j
.text:00426FA0                 mov     ecx, [esp+1BCh+arg_C]
.text:00426FA7                 mov     [esp+1BCh+Str], ecx ; Str
.text:00426FAA                 call    strlen
.text:00426FAF                 cmp     eax, 5
.text:00426FB2                 mov     ebp, eax
.text:00426FB4                 jbe     loc_426D7D
.text:00426FBA                 mov     ebp, 5
.text:00426FBF                 jmp     loc_426D7D
.text:00426FBF sub_426D40      endp
.text:00426FBF
.text:00426FBF ; ---------------------------------------------------------------------------
.text:00426FC4                 align 10h
.text:00426FD0 byte_426FD0     db 61h                  ; DATA XREF: sub_4270C0+DC↓r
.text:00426FD0                                         ; sub_4270C0+122↓r ...
.text:00426FD1 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0042700F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_4270C0+39↓o
.text:00427016                 db 1Ah dup(90h)
.text:00427030 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00427030                                         ; DATA XREF: sub_4270C0:loc_427338↓o
.text:0042704F                 align 10h
.text:00427050 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:00427050                                         ; DATA XREF: sub_4270C0+405↓o
.text:0042707B                 db 15h dup(90h)
.text:00427090 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:00427090                                         ; DATA XREF: sub_4270C0+40D↓o
.text:004270B3                 align 10h
.text:004270C0
.text:004270C0 ; =============== S U B R O U T I N E =======================================
.text:004270C0
.text:004270C0
.text:004270C0 ; int __cdecl sub_4270C0(char *FileName, int)
.text:004270C0 sub_4270C0      proc near               ; CODE XREF: sub_41D8C0+51↑p
.text:004270C0
.text:004270C0 Str             = dword ptr -9Ch
.text:004270C0 OpenFlag        = dword ptr -98h
.text:004270C0 var_94          = dword ptr -94h
.text:004270C0 var_90          = dword ptr -90h
.text:004270C0 var_8C          = dword ptr -8Ch
.text:004270C0 var_88          = dword ptr -88h
.text:004270C0 var_84          = dword ptr -84h
.text:004270C0 var_80          = dword ptr -80h
.text:004270C0 var_7C          = dword ptr -7Ch
.text:004270C0 FileName        = dword ptr  4
.text:004270C0 arg_4           = dword ptr  8
.text:004270C0
.text:004270C0                 push    ebp
.text:004270C1                 push    edi
.text:004270C2                 push    esi
.text:004270C3                 push    ebx
.text:004270C4                 sub     esp, 8Ch
.text:004270CA                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:004270D2                 call    _errno
.text:004270D7                 mov     edx, [eax]
.text:004270D9                 mov     [esp+9Ch+var_8C], edx
.text:004270DD                 mov     edx, [esp+9Ch+FileName]
.text:004270E4                 mov     [esp+9Ch+Str], edx ; Str
.text:004270E7                 call    strlen
.text:004270EC                 cmp     eax, 5
.text:004270EF                 jle     short loc_42710D
.text:004270F1                 cld
.text:004270F2                 mov     ecx, [esp+9Ch+FileName]
.text:004270F9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:004270FE                 lea     esi, [eax+ecx-6]
.text:00427102                 mov     ecx, 7
.text:00427107                 mov     ebp, esi
.text:00427109                 repe cmpsb
.text:0042710B                 jz      short loc_427128
.text:0042710D
.text:0042710D loc_42710D:                             ; CODE XREF: sub_4270C0+2F↑j
.text:0042710D                 call    _errno
.text:00427112                 mov     dword ptr [eax], 16h
.text:00427118
.text:00427118 loc_427118:                             ; CODE XREF: sub_4270C0+295↓j
.text:00427118                                         ; sub_4270C0+2D8↓j ...
.text:00427118                 mov     eax, 0FFFFFFFFh
.text:0042711D
.text:0042711D loc_42711D:                             ; CODE XREF: sub_4270C0+2EF↓j
.text:0042711D                                         ; sub_4270C0+332↓j
.text:0042711D                 add     esp, 8Ch
.text:00427123                 pop     ebx
.text:00427124                 pop     esi
.text:00427125                 pop     edi
.text:00427126                 pop     ebp
.text:00427127                 retn
.text:00427128 ; ---------------------------------------------------------------------------
.text:00427128
.text:00427128 loc_427128:                             ; CODE XREF: sub_4270C0+4B↑j
.text:00427128                 mov     ecx, dword ptr ds:byte_42D1D0+114h
.text:0042712E                 mov     edi, dword ptr ds:byte_42D1D0+110h
.text:00427134                 mov     eax, ecx
.text:00427136                 or      eax, edi
.text:00427138                 jz      loc_427473
.text:0042713E
.text:0042713E loc_42713E:                             ; CODE XREF: sub_4270C0+3F8↓j
.text:0042713E                 rdtsc
.text:00427140                 mov     edi, edx
.text:00427142                 mov     esi, eax
.text:00427144                 call    _getpid
.text:00427149                 mov     ebx, eax
.text:0042714B                 mov     edx, esi
.text:0042714D                 sar     ebx, 1Fh
.text:00427150                 xor     edx, eax
.text:00427152                 mov     ecx, edi
.text:00427154                 xor     ecx, ebx
.text:00427156                 mov     ebx, edx
.text:00427158                 mov     esi, ecx
.text:0042715A                 add     ebx, dword ptr ds:byte_42D1D0+110h
.text:00427160                 adc     esi, dword ptr ds:byte_42D1D0+114h
.text:00427166                 xor     edi, edi
.text:00427168                 mov     dword ptr ds:byte_42D1D0+110h, ebx
.text:0042716E                 mov     dword ptr ds:byte_42D1D0+114h, esi
.text:00427174                 lea     esi, [esi+0]
.text:0042717A                 lea     edi, [edi+0]
.text:00427180
.text:00427180 loc_427180:                             ; CODE XREF: sub_4270C0+2C7↓j
.text:00427180                 mov     [esp+9Ch+Str], ebx
.text:00427183                 mov     [esp+9Ch+OpenFlag], esi
.text:00427187                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0042718F                 mov     [esp+9Ch+var_90], 0
.text:00427197                 call    sub_429070
.text:0042719C                 movzx   ecx, ds:byte_426FD0[eax]
.text:004271A3                 mov     [ebp+0], cl
.text:004271A6                 mov     [esp+9Ch+Str], ebx
.text:004271A9                 mov     [esp+9Ch+OpenFlag], esi
.text:004271AD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004271B5                 mov     [esp+9Ch+var_90], 0
.text:004271BD                 call    sub_429510
.text:004271C2                 mov     [esp+9Ch+Str], eax
.text:004271C5                 mov     ebx, eax
.text:004271C7                 mov     esi, edx
.text:004271C9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004271D1                 mov     [esp+9Ch+var_90], 0
.text:004271D9                 mov     [esp+9Ch+OpenFlag], edx
.text:004271DD                 call    sub_429070
.text:004271E2                 movzx   edx, ds:byte_426FD0[eax]
.text:004271E9                 mov     [ebp+1], dl
.text:004271EC                 mov     [esp+9Ch+Str], ebx
.text:004271EF                 mov     [esp+9Ch+OpenFlag], esi
.text:004271F3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004271FB                 mov     [esp+9Ch+var_90], 0
.text:00427203                 call    sub_429510
.text:00427208                 mov     [esp+9Ch+Str], eax
.text:0042720B                 mov     ebx, eax
.text:0042720D                 mov     esi, edx
.text:0042720F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00427217                 mov     [esp+9Ch+var_90], 0
.text:0042721F                 mov     [esp+9Ch+OpenFlag], edx
.text:00427223                 call    sub_429070
.text:00427228                 movzx   ecx, ds:byte_426FD0[eax]
.text:0042722F                 mov     [ebp+2], cl
.text:00427232                 mov     [esp+9Ch+Str], ebx
.text:00427235                 mov     [esp+9Ch+OpenFlag], esi
.text:00427239                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00427241                 mov     [esp+9Ch+var_90], 0
.text:00427249                 call    sub_429510
.text:0042724E                 mov     [esp+9Ch+Str], eax
.text:00427251                 mov     ebx, eax
.text:00427253                 mov     esi, edx
.text:00427255                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0042725D                 mov     [esp+9Ch+var_90], 0
.text:00427265                 mov     [esp+9Ch+OpenFlag], edx
.text:00427269                 call    sub_429070
.text:0042726E                 movzx   edx, ds:byte_426FD0[eax]
.text:00427275                 mov     [ebp+3], dl
.text:00427278                 mov     [esp+9Ch+Str], ebx
.text:0042727B                 mov     [esp+9Ch+OpenFlag], esi
.text:0042727F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00427287                 mov     [esp+9Ch+var_90], 0
.text:0042728F                 call    sub_429510
.text:00427294                 mov     [esp+9Ch+Str], eax
.text:00427297                 mov     ebx, eax
.text:00427299                 mov     esi, edx
.text:0042729B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004272A3                 mov     [esp+9Ch+var_90], 0
.text:004272AB                 mov     [esp+9Ch+OpenFlag], edx
.text:004272AF                 call    sub_429070
.text:004272B4                 movzx   ecx, ds:byte_426FD0[eax]
.text:004272BB                 mov     [ebp+4], cl
.text:004272BE                 mov     [esp+9Ch+Str], ebx
.text:004272C1                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004272C9                 mov     [esp+9Ch+var_90], 0
.text:004272D1                 mov     [esp+9Ch+OpenFlag], esi
.text:004272D5                 call    sub_429510
.text:004272DA                 mov     [esp+9Ch+Str], eax
.text:004272DD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004272E5                 mov     [esp+9Ch+var_90], 0
.text:004272ED                 mov     [esp+9Ch+OpenFlag], edx
.text:004272F1                 call    sub_429070
.text:004272F6                 movzx   ebx, ds:byte_426FD0[eax]
.text:004272FD                 mov     [ebp+5], bl
.text:00427300                 cmp     [esp+9Ch+arg_4], 1
.text:00427308                 jz      loc_427457
.text:0042730E                 cmp     [esp+9Ch+arg_4], 1
.text:00427316                 jle     loc_427420
.text:0042731C                 cmp     [esp+9Ch+arg_4], 2
.text:00427324                 jz      loc_4273F7
.text:0042732A                 cmp     [esp+9Ch+arg_4], 3
.text:00427332                 jz      loc_4273B4
.text:00427338
.text:00427338 loc_427338:                             ; CODE XREF: sub_4270C0+369↓j
.text:00427338                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0042733D                 test    ebx, ebx
.text:0042733F                 jnz     loc_4274BD
.text:00427345
.text:00427345 loc_427345:                             ; CODE XREF: sub_4270C0+354↓j
.text:00427345                 mov     eax, [esp+9Ch+var_88]
.text:00427349                 test    eax, eax
.text:0042734B                 jns     short loc_4273A0
.text:0042734D                 call    _errno
.text:00427352                 cmp     dword ptr [eax], 11h
.text:00427355                 jnz     loc_427118
.text:0042735B
.text:0042735B loc_42735B:                             ; CODE XREF: sub_4270C0+315↓j
.text:0042735B                 mov     edx, dword ptr ds:byte_42D1D0+110h
.text:00427361                 mov     ecx, dword ptr ds:byte_42D1D0+114h
.text:00427367                 add     edx, 1E61h
.text:0042736D                 adc     ecx, 0
.text:00427370                 mov     ebx, edx
.text:00427372                 inc     edi
.text:00427373                 mov     dword ptr ds:byte_42D1D0+110h, edx
.text:00427379                 cmp     edi, 3A2F8h
.text:0042737F                 mov     esi, ecx
.text:00427381                 mov     dword ptr ds:byte_42D1D0+114h, ecx
.text:00427387                 jb      loc_427180
.text:0042738D                 call    _errno
.text:00427392                 mov     dword ptr [eax], 11h
.text:00427398                 jmp     loc_427118
.text:00427398 ; ---------------------------------------------------------------------------
.text:0042739D                 align 10h
.text:004273A0
.text:004273A0 loc_4273A0:                             ; CODE XREF: sub_4270C0+28B↑j
.text:004273A0                 call    _errno
.text:004273A5                 mov     esi, [esp+9Ch+var_8C]
.text:004273A9                 mov     [eax], esi
.text:004273AB                 mov     eax, [esp+9Ch+var_88]
.text:004273AF                 jmp     loc_42711D
.text:004273B4 ; ---------------------------------------------------------------------------
.text:004273B4
.text:004273B4 loc_4273B4:                             ; CODE XREF: sub_4270C0+272↑j
.text:004273B4                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:004273BB                 mov     ecx, [esp+9Ch+FileName]
.text:004273C2                 lea     esi, [esp+9Ch+var_7C]
.text:004273C6                 mov     [esp+9Ch+var_94], esi ; int
.text:004273CA                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:004273CE                 call    sub_418300
.text:004273D3                 test    eax, eax
.text:004273D5                 jns     short loc_42735B
.text:004273D7                 call    _errno
.text:004273DC                 cmp     dword ptr [eax], 2
.text:004273DF                 jnz     loc_427118
.text:004273E5                 call    _errno
.text:004273EA                 mov     ebx, [esp+9Ch+var_8C]
.text:004273EE                 mov     [eax], ebx
.text:004273F0                 xor     eax, eax
.text:004273F2                 jmp     loc_42711D
.text:004273F7 ; ---------------------------------------------------------------------------
.text:004273F7
.text:004273F7 loc_4273F7:                             ; CODE XREF: sub_4270C0+264↑j
.text:004273F7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:004273FF                 mov     edx, [esp+9Ch+FileName]
.text:00427406                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00427409                 call    sub_4274F0
.text:0042740E                 mov     esi, esi
.text:00427410
.text:00427410 loc_427410:                             ; CODE XREF: sub_4270C0+395↓j
.text:00427410                 mov     [esp+9Ch+var_88], eax
.text:00427414                 jmp     loc_427345
.text:00427414 ; ---------------------------------------------------------------------------
.text:00427419                 align 10h
.text:00427420
.text:00427420 loc_427420:                             ; CODE XREF: sub_4270C0+256↑j
.text:00427420                 mov     eax, [esp+9Ch+arg_4]
.text:00427427                 test    eax, eax
.text:00427429                 jnz     loc_427338
.text:0042742F                 mov     [esp+9Ch+var_94], 180h
.text:00427437                 mov     esi, [esp+9Ch+FileName]
.text:0042743E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00427446                 mov     [esp+9Ch+Str], esi ; FileName
.text:00427449                 lea     esi, [esi+0]
.text:00427450
.text:00427450 loc_427450:                             ; CODE XREF: sub_4270C0+3B1↓j
.text:00427450                 call    _open
.text:00427455                 jmp     short loc_427410
.text:00427457 ; ---------------------------------------------------------------------------
.text:00427457
.text:00427457 loc_427457:                             ; CODE XREF: sub_4270C0+248↑j
.text:00427457                 mov     [esp+9Ch+var_94], 180h
.text:0042745F                 mov     ebx, [esp+9Ch+FileName]
.text:00427466                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0042746E                 mov     [esp+9Ch+Str], ebx
.text:00427471                 jmp     short loc_427450
.text:00427473 ; ---------------------------------------------------------------------------
.text:00427473
.text:00427473 loc_427473:                             ; CODE XREF: sub_4270C0+78↑j
.text:00427473                 mov     [esp+9Ch+OpenFlag], 0
.text:0042747B                 lea     ebx, [esp+9Ch+var_84]
.text:0042747F                 mov     [esp+9Ch+Str], ebx
.text:00427482                 call    sub_419E60
.text:00427487                 mov     edi, [esp+9Ch+var_80]
.text:0042748B                 mov     edx, [esp+9Ch+var_84]
.text:0042748F                 mov     ecx, edi
.text:00427491                 mov     ebx, edi
.text:00427493                 shl     ecx, 10h
.text:00427496                 sar     ebx, 1Fh
.text:00427499                 shld    ebx, edi, 10h
.text:0042749D                 mov     esi, edx
.text:0042749F                 mov     edi, edx
.text:004274A1                 mov     edx, ecx
.text:004274A3                 sar     edi, 1Fh
.text:004274A6                 xor     edx, esi
.text:004274A8                 mov     dword ptr ds:byte_42D1D0+110h, edx
.text:004274AE                 mov     esi, ebx
.text:004274B0                 xor     esi, edi
.text:004274B2                 mov     dword ptr ds:byte_42D1D0+114h, esi
.text:004274B8                 jmp     loc_42713E
.text:004274BD ; ---------------------------------------------------------------------------
.text:004274BD
.text:004274BD loc_4274BD:                             ; CODE XREF: sub_4270C0+27F↑j
.text:004274BD                 mov     [esp+9Ch+var_94], 151h
.text:004274C5                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:004274CD                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:004274D4                 call    _assert
.text:004274D4 sub_4270C0      endp
.text:004274D4
.text:004274D4 ; ---------------------------------------------------------------------------
.text:004274D9                 db 17h dup(90h)
.text:004274F0
.text:004274F0 ; =============== S U B R O U T I N E =======================================
.text:004274F0
.text:004274F0
.text:004274F0 ; int __cdecl sub_4274F0(LPCSTR, int AccessMode)
.text:004274F0 sub_4274F0      proc near               ; CODE XREF: sub_4270C0+349↑p
.text:004274F0
.text:004274F0 lpPathName      = dword ptr -1Ch
.text:004274F0 lpSecurityAttributes= dword ptr -18h
.text:004274F0 var_8           = dword ptr -8
.text:004274F0 var_4           = dword ptr -4
.text:004274F0 arg_0           = dword ptr  4
.text:004274F0 AccessMode      = dword ptr  8
.text:004274F0
.text:004274F0                 sub     esp, 1Ch
.text:004274F3                 mov     [esp+1Ch+var_8], ebx
.text:004274F7                 mov     ebx, [esp+1Ch+arg_0]
.text:004274FB                 mov     [esp+1Ch+var_4], esi
.text:004274FF                 mov     esi, [esp+1Ch+AccessMode]
.text:00427503                 test    ebx, ebx
.text:00427505                 jz      short loc_427555
.text:00427507                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0042750F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00427512                 call    CreateDirectoryA
.text:00427517                 sub     esp, 8
.text:0042751A                 test    eax, eax
.text:0042751C                 jz      short loc_427536
.text:0042751E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00427522                 mov     esi, [esp+1Ch+var_4]
.text:00427526                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0042752A                 mov     ebx, [esp+1Ch+var_8]
.text:0042752E                 add     esp, 1Ch
.text:00427531                 jmp     _chmod
.text:00427536 ; ---------------------------------------------------------------------------
.text:00427536
.text:00427536 loc_427536:                             ; CODE XREF: sub_4274F0+2C↑j
.text:00427536                 call    sub_41AD20
.text:0042753B                 mov     esi, eax
.text:0042753D                 call    _errno
.text:00427542                 mov     [eax], esi
.text:00427544
.text:00427544 loc_427544:                             ; CODE XREF: sub_4274F0+70↓j
.text:00427544                 mov     ebx, [esp+1Ch+var_8]
.text:00427548                 mov     eax, 0FFFFFFFFh
.text:0042754D                 mov     esi, [esp+1Ch+var_4]
.text:00427551                 add     esp, 1Ch
.text:00427554                 retn
.text:00427555 ; ---------------------------------------------------------------------------
.text:00427555
.text:00427555 loc_427555:                             ; CODE XREF: sub_4274F0+15↑j
.text:00427555                 call    _errno
.text:0042755A                 mov     dword ptr [eax], 16h
.text:00427560                 jmp     short loc_427544
.text:00427560 sub_4274F0      endp
.text:00427560
.text:00427560 ; ---------------------------------------------------------------------------
.text:00427562                 align 10h
.text:00427570
.text:00427570 ; =============== S U B R O U T I N E =======================================
.text:00427570
.text:00427570
.text:00427570 sub_427570      proc near               ; CODE XREF: sub_426D40+1A7↑p
.text:00427570                                         ; sub_426D40+237↑p ...
.text:00427570                 mov     edx, dword ptr ds:byte_42D1D0+120h
.text:00427576                 test    edx, edx
.text:00427578                 jnz     short loc_427580
.text:0042757A                 jmp     getenv
.text:0042757A ; ---------------------------------------------------------------------------
.text:0042757F                 align 10h
.text:00427580
.text:00427580 loc_427580:                             ; CODE XREF: sub_427570+8↑j
.text:00427580                 xor     eax, eax
.text:00427582                 retn
.text:00427582 sub_427570      endp
.text:00427582
.text:00427582 ; ---------------------------------------------------------------------------
.text:00427583                 align 10h
.text:00427590                 sub     esp, 0Ch
.text:00427593                 mov     [esp+4], ebx
.text:00427597                 mov     [esp+8], esi
.text:0042759B                 xor     esi, esi
.text:0042759D                 call    sub_4275F0
.text:004275A2                 mov     ebx, eax
.text:004275A4                 call    sub_426D00
.text:004275A9                 cmp     ebx, eax
.text:004275AB                 jz      short loc_4275C4
.text:004275AD
.text:004275AD loc_4275AD:                             ; CODE XREF: .text:004275D2↓j
.text:004275AD                 mov     esi, 1
.text:004275B2
.text:004275B2 loc_4275B2:                             ; CODE XREF: .text:004275D4↓j
.text:004275B2                 mov     dword ptr ds:byte_42D1D0+120h, esi
.text:004275B8                 mov     ebx, [esp+4]
.text:004275BC                 mov     esi, [esp+8]
.text:004275C0                 add     esp, 0Ch
.text:004275C3                 retn
.text:004275C4 ; ---------------------------------------------------------------------------
.text:004275C4
.text:004275C4 loc_4275C4:                             ; CODE XREF: .text:004275AB↑j
.text:004275C4                 call    sub_4275E0
.text:004275C9                 mov     ebx, eax
.text:004275CB                 call    sub_426CF0
.text:004275D0                 cmp     ebx, eax
.text:004275D2                 jnz     short loc_4275AD
.text:004275D4                 jmp     short loc_4275B2
.text:004275D4 ; ---------------------------------------------------------------------------
.text:004275D6                 align 10h
.text:004275E0
.text:004275E0 ; =============== S U B R O U T I N E =======================================
.text:004275E0
.text:004275E0
.text:004275E0 sub_4275E0      proc near               ; CODE XREF: .text:loc_4275C4↑p
.text:004275E0                 xor     eax, eax
.text:004275E2                 retn
.text:004275E2 sub_4275E0      endp
.text:004275E2
.text:004275E2 ; ---------------------------------------------------------------------------
.text:004275E3                 align 10h
.text:004275F0
.text:004275F0 ; =============== S U B R O U T I N E =======================================
.text:004275F0
.text:004275F0
.text:004275F0 sub_4275F0      proc near               ; CODE XREF: .text:0042759D↑p
.text:004275F0                 xor     eax, eax
.text:004275F2                 retn
.text:004275F2 sub_4275F0      endp
.text:004275F2
.text:004275F2 ; ---------------------------------------------------------------------------
.text:004275F3                 align 10h
.text:00427600
.text:00427600 ; =============== S U B R O U T I N E =======================================
.text:00427600
.text:00427600 ; Attributes: bp-based frame
.text:00427600
.text:00427600 sub_427600      proc near               ; CODE XREF: sub_401B10+5C3↑p
.text:00427600                                         ; sub_401B10+5EF↑p ...
.text:00427600
.text:00427600 arg_0           = dword ptr  8
.text:00427600 arg_4           = dword ptr  0Ch
.text:00427600 arg_8           = dword ptr  10h
.text:00427600 arg_C           = dword ptr  14h
.text:00427600 arg_10          = dword ptr  18h
.text:00427600
.text:00427600                 push    ebp
.text:00427601                 mov     ebp, esp
.text:00427603                 push    esi
.text:00427604                 push    ebx
.text:00427605                 mov     edx, [ebp+arg_8]
.text:00427608                 mov     esi, [ebp+arg_0]
.text:0042760B                 mov     ecx, [ebp+arg_4]
.text:0042760E                 mov     ebx, [ebp+arg_C]
.text:00427611                 test    edx, edx
.text:00427613                 jnz     short loc_42761A
.text:00427615                 mov     edx, 8
.text:0042761A
.text:0042761A loc_42761A:                             ; CODE XREF: sub_427600+13↑j
.text:0042761A                 test    ecx, ecx
.text:0042761C                 jnz     short loc_427623
.text:0042761E                 mov     ecx, 0FE8h
.text:00427623
.text:00427623 loc_427623:                             ; CODE XREF: sub_427600+1C↑j
.text:00427623                 mov     eax, [ebp+arg_10]
.text:00427626                 sub     esp, 0Ch
.text:00427629                 mov     [esi+20h], eax
.text:0042762C                 mov     [esi+1Ch], ebx
.text:0042762F                 lea     eax, [edx-1]
.text:00427632                 mov     [esi], ecx
.text:00427634                 mov     [esi+18h], eax
.text:00427637                 mov     al, [esi+28h]
.text:0042763A                 and     eax, 0FFFFFFFEh
.text:0042763D                 mov     [esi+28h], al
.text:00427640                 push    ecx
.text:00427641                 call    ebx
.text:00427643                 mov     ebx, eax
.text:00427645                 add     esp, 10h
.text:00427648                 mov     [esi+4], eax
.text:0042764B                 test    eax, eax
.text:0042764D                 jz      short loc_427680
.text:0042764F
.text:0042764F loc_42764F:                             ; CODE XREF: .text:00427686↓j
.text:0042764F                 lea     eax, [ebx+8]
.text:00427652                 mov     edx, [esi]
.text:00427654                 mov     [esi+8], eax
.text:00427657                 mov     [esi+0Ch], eax
.text:0042765A                 mov     eax, ebx
.text:0042765C                 add     eax, edx
.text:0042765E                 mov     [ebx], eax
.text:00427660                 mov     [esi+10h], eax
.text:00427663                 mov     dword ptr [ebx+4], 0
.text:0042766A                 and     byte ptr [esi+28h], 0F9h
.text:0042766E                 lea     esp, [ebp-8]
.text:00427671                 mov     eax, 1
.text:00427676                 pop     ebx
.text:00427677                 pop     esi
.text:00427678                 pop     ebp
.text:00427679                 retn
.text:00427679 ; ---------------------------------------------------------------------------
.text:0042767A                 align 10h
.text:00427680
.text:00427680 loc_427680:                             ; CODE XREF: sub_427600+4D↑j
.text:00427680                 call    off_42B200
.text:00427680 sub_427600      endp
.text:00427680
.text:00427686 ; ---------------------------------------------------------------------------
.text:00427686                 jmp     short loc_42764F
.text:00427686 ; ---------------------------------------------------------------------------
.text:00427688                 align 10h
.text:00427690                 push    ebp
.text:00427691                 mov     ebp, esp
.text:00427693                 push    edi
.text:00427694                 push    esi
.text:00427695                 push    ebx
.text:00427696                 sub     esp, 0Ch
.text:00427699                 mov     edx, [ebp+10h]
.text:0042769C                 mov     esi, [ebp+8]
.text:0042769F                 mov     ecx, [ebp+0Ch]
.text:004276A2                 mov     ebx, [ebp+14h]
.text:004276A5                 mov     edi, [ebp+1Ch]
.text:004276A8                 test    edx, edx
.text:004276AA                 jnz     short loc_4276B1
.text:004276AC                 mov     edx, 8
.text:004276B1
.text:004276B1 loc_4276B1:                             ; CODE XREF: .text:004276AA↑j
.text:004276B1                 test    ecx, ecx
.text:004276B3                 jnz     short loc_4276BA
.text:004276B5                 mov     ecx, 0FE8h
.text:004276BA
.text:004276BA loc_4276BA:                             ; CODE XREF: .text:004276B3↑j
.text:004276BA                 mov     eax, [ebp+18h]
.text:004276BD                 mov     [esi+1Ch], ebx
.text:004276C0                 mov     [esi+20h], eax
.text:004276C3                 mov     [esi], ecx
.text:004276C5                 lea     eax, [edx-1]
.text:004276C8                 mov     [esi+24h], edi
.text:004276CB                 mov     [esi+18h], eax
.text:004276CE                 mov     al, [esi+28h]
.text:004276D1                 or      eax, 1
.text:004276D4                 mov     [esi+28h], al
.text:004276D7                 and     eax, 1
.text:004276DA                 jz      short loc_427728
.text:004276DC                 push    eax
.text:004276DD                 push    eax
.text:004276DE                 push    ecx
.text:004276DF                 push    edi
.text:004276E0
.text:004276E0 loc_4276E0:                             ; CODE XREF: .text:0042772C↓j
.text:004276E0                 call    ebx
.text:004276E2                 mov     ebx, eax
.text:004276E4                 add     esp, 10h
.text:004276E7                 mov     [esi+4], eax
.text:004276EA                 test    eax, eax
.text:004276EC                 jz      short loc_427720
.text:004276EE
.text:004276EE loc_4276EE:                             ; CODE XREF: .text:00427726↓j
.text:004276EE                 lea     eax, [ebx+8]
.text:004276F1                 mov     ecx, [esi]
.text:004276F3                 mov     [esi+8], eax
.text:004276F6                 mov     [esi+0Ch], eax
.text:004276F9                 mov     eax, ebx
.text:004276FB                 add     eax, ecx
.text:004276FD                 mov     [ebx], eax
.text:004276FF                 mov     [esi+10h], eax
.text:00427702                 mov     dword ptr [ebx+4], 0
.text:00427709                 and     byte ptr [esi+28h], 0F9h
.text:0042770D                 lea     esp, [ebp-0Ch]
.text:00427710                 mov     eax, 1
.text:00427715                 pop     ebx
.text:00427716                 pop     esi
.text:00427717                 pop     edi
.text:00427718                 pop     ebp
.text:00427719                 retn
.text:00427719 ; ---------------------------------------------------------------------------
.text:0042771A                 align 10h
.text:00427720
.text:00427720 loc_427720:                             ; CODE XREF: .text:004276EC↑j
.text:00427720                 call    off_42B200
.text:00427726 ; ---------------------------------------------------------------------------
.text:00427726                 jmp     short loc_4276EE
.text:00427728 ; ---------------------------------------------------------------------------
.text:00427728
.text:00427728 loc_427728:                             ; CODE XREF: .text:004276DA↑j
.text:00427728                 sub     esp, 0Ch
.text:0042772B                 push    ecx
.text:0042772C                 jmp     short loc_4276E0
.text:0042772C ; ---------------------------------------------------------------------------
.text:0042772E                 align 10h
.text:00427730
.text:00427730 ; =============== S U B R O U T I N E =======================================
.text:00427730
.text:00427730 ; Attributes: bp-based frame
.text:00427730
.text:00427730 sub_427730      proc near               ; CODE XREF: sub_401B10+412↑p
.text:00427730                                         ; sub_403C30+510↑p ...
.text:00427730
.text:00427730 var_14          = dword ptr -14h
.text:00427730 var_10          = dword ptr -10h
.text:00427730 arg_0           = dword ptr  8
.text:00427730 arg_4           = dword ptr  0Ch
.text:00427730
.text:00427730                 push    ebp
.text:00427731                 mov     ebp, esp
.text:00427733                 push    edi
.text:00427734                 push    esi
.text:00427735                 push    ebx
.text:00427736                 sub     esp, 0Ch
.text:00427739                 mov     esi, [ebp+arg_0]
.text:0042773C                 mov     ebx, [ebp+arg_4]
.text:0042773F                 mov     eax, [esi+4]
.text:00427742                 mov     edi, [esi+0Ch]
.text:00427745                 mov     [ebp+var_10], eax
.text:00427748                 mov     eax, [esi+8]
.text:0042774B                 sub     edi, eax
.text:0042774D                 mov     edx, edi
.text:0042774F                 mov     eax, edi
.text:00427751                 sar     eax, 3
.text:00427754                 add     edx, ebx
.text:00427756                 lea     eax, [eax+edx+64h]
.text:0042775A                 mov     [ebp+var_14], eax
.text:0042775D                 mov     eax, [esi]
.text:0042775F                 cmp     [ebp+var_14], eax
.text:00427762                 jge     short loc_427767
.text:00427764                 mov     [ebp+var_14], eax
.text:00427767
.text:00427767 loc_427767:                             ; CODE XREF: sub_427730+32↑j
.text:00427767                 test    byte ptr [esi+28h], 1
.text:0042776B                 jz      loc_42784E
.text:00427771                 mov     edx, [ebp+var_14]
.text:00427774                 push    ecx
.text:00427775                 push    ecx
.text:00427776                 push    edx
.text:00427777                 mov     eax, [esi+24h]
.text:0042777A                 push    eax
.text:0042777B
.text:0042777B loc_42777B:                             ; CODE XREF: sub_427730+125↓j
.text:0042777B                 call    dword ptr [esi+1Ch]
.text:0042777E                 mov     ebx, eax
.text:00427780                 add     esp, 10h
.text:00427783                 test    eax, eax
.text:00427785                 jz      loc_427843
.text:0042778B
.text:0042778B loc_42778B:                             ; CODE XREF: sub_427730+119↓j
.text:0042778B                 mov     edx, [ebp+var_10]
.text:0042778E                 mov     [esi+4], ebx
.text:00427791                 mov     [ebx+4], edx
.text:00427794                 mov     edx, [ebp+var_14]
.text:00427797                 lea     eax, [edx+ebx]
.text:0042779A                 mov     [esi+10h], eax
.text:0042779D                 mov     [ebx], eax
.text:0042779F                 mov     eax, [esi+18h]
.text:004277A2                 inc     eax
.text:004277A3                 cmp     eax, 7
.text:004277A6                 jle     loc_42783C
.text:004277AC                 mov     eax, edi
.text:004277AE                 shr     eax, 2
.text:004277B1                 mov     edx, eax
.text:004277B3                 dec     edx
.text:004277B4                 js      loc_427837
.text:004277BA                 mov     ecx, [esi+8]
.text:004277BD                 lea     esi, [esi+0]
.text:004277C0
.text:004277C0 loc_4277C0:                             ; CODE XREF: sub_427730+98↓j
.text:004277C0                 mov     eax, [ecx+edx*4]
.text:004277C3                 mov     [ebx+edx*4+8], eax
.text:004277C7                 dec     edx
.text:004277C8                 jns     short loc_4277C0
.text:004277CA
.text:004277CA loc_4277CA:                             ; CODE XREF: sub_427730+10A↓j
.text:004277CA                 mov     eax, edi
.text:004277CC                 and     eax, 0FFFFFFFCh
.text:004277CF
.text:004277CF loc_4277CF:                             ; CODE XREF: sub_427730+111↓j
.text:004277CF                 mov     edx, eax
.text:004277D1                 cmp     eax, edi
.text:004277D3                 jge     short loc_4277E9
.text:004277D5
.text:004277D5 loc_4277D5:                             ; CODE XREF: sub_427730+B4↓j
.text:004277D5                 mov     al, [edx+ecx]
.text:004277D8                 mov     [ebx+edx+8], al
.text:004277DC                 inc     edx
.text:004277DD                 cmp     edx, edi
.text:004277DF                 jge     short loc_4277E6
.text:004277E1                 mov     ecx, [esi+8]
.text:004277E4                 jmp     short loc_4277D5
.text:004277E6 ; ---------------------------------------------------------------------------
.text:004277E6
.text:004277E6 loc_4277E6:                             ; CODE XREF: sub_427730+AF↑j
.text:004277E6                 mov     ecx, [esi+8]
.text:004277E9
.text:004277E9 loc_4277E9:                             ; CODE XREF: sub_427730+A3↑j
.text:004277E9                 mov     eax, [ebp+var_10]
.text:004277EC                 add     eax, 8
.text:004277EF                 cmp     ecx, eax
.text:004277F1                 jz      short loc_42780A
.text:004277F3
.text:004277F3 loc_4277F3:                             ; CODE XREF: sub_427730+DE↓j
.text:004277F3                                         ; sub_427730+FC↓j
.text:004277F3                 and     byte ptr [esi+28h], 0FDh
.text:004277F7                 lea     eax, [ebx+8]
.text:004277FA                 mov     [esi+8], eax
.text:004277FD                 add     eax, edi
.text:004277FF                 mov     [esi+0Ch], eax
.text:00427802                 lea     esp, [ebp-0Ch]
.text:00427805                 pop     ebx
.text:00427806                 pop     esi
.text:00427807                 pop     edi
.text:00427808                 pop     ebp
.text:00427809                 retn
.text:0042780A ; ---------------------------------------------------------------------------
.text:0042780A
.text:0042780A loc_42780A:                             ; CODE XREF: sub_427730+C1↑j
.text:0042780A                 test    byte ptr [esi+28h], 2
.text:0042780E                 jnz     short loc_4277F3
.text:00427810                 mov     edx, [ebp+var_10]
.text:00427813                 mov     eax, [edx+4]
.text:00427816                 mov     [ebx+4], eax
.text:00427819                 test    byte ptr [esi+28h], 1
.text:0042781D                 jz      short loc_42782E
.text:0042781F                 push    eax
.text:00427820                 push    eax
.text:00427821                 push    edx
.text:00427822                 mov     eax, [esi+24h]
.text:00427825                 push    eax
.text:00427826
.text:00427826 loc_427826:                             ; CODE XREF: sub_427730+105↓j
.text:00427826                 call    dword ptr [esi+20h]
.text:00427829                 add     esp, 10h
.text:0042782C                 jmp     short loc_4277F3
.text:0042782E ; ---------------------------------------------------------------------------
.text:0042782E
.text:0042782E loc_42782E:                             ; CODE XREF: sub_427730+ED↑j
.text:0042782E                 sub     esp, 0Ch
.text:00427831                 mov     eax, [ebp+var_10]
.text:00427834                 push    eax
.text:00427835                 jmp     short loc_427826
.text:00427837 ; ---------------------------------------------------------------------------
.text:00427837
.text:00427837 loc_427837:                             ; CODE XREF: sub_427730+84↑j
.text:00427837                 mov     ecx, [esi+8]
.text:0042783A                 jmp     short loc_4277CA
.text:0042783C ; ---------------------------------------------------------------------------
.text:0042783C
.text:0042783C loc_42783C:                             ; CODE XREF: sub_427730+76↑j
.text:0042783C                 xor     eax, eax
.text:0042783E                 mov     ecx, [esi+8]
.text:00427841                 jmp     short loc_4277CF
.text:00427843 ; ---------------------------------------------------------------------------
.text:00427843
.text:00427843 loc_427843:                             ; CODE XREF: sub_427730+55↑j
.text:00427843                 call    off_42B200
.text:00427849 ; ---------------------------------------------------------------------------
.text:00427849                 jmp     loc_42778B
.text:0042784E ; ---------------------------------------------------------------------------
.text:0042784E
.text:0042784E loc_42784E:                             ; CODE XREF: sub_427730+3B↑j
.text:0042784E                 sub     esp, 0Ch
.text:00427851                 mov     eax, [ebp+var_14]
.text:00427854                 push    eax
.text:00427855                 jmp     loc_42777B
.text:00427855 sub_427730      endp ; sp-analysis failed
.text:00427855
.text:00427855 ; ---------------------------------------------------------------------------
.text:0042785A                 align 10h
.text:00427860                 push    ebp
.text:00427861                 mov     ebp, esp
.text:00427863                 mov     eax, [ebp+8]
.text:00427866                 mov     edx, [ebp+0Ch]
.text:00427869                 mov     eax, [eax+4]
.text:0042786C                 test    eax, eax
.text:0042786E                 jz      short loc_427883
.text:00427870                 cmp     eax, edx
.text:00427872                 jb      short loc_42788F
.text:00427874
.text:00427874 loc_427874:                             ; CODE XREF: .text:0042787D↓j
.text:00427874                                         ; .text:00427881↓j ...
.text:00427874                 mov     eax, [eax+4]
.text:00427877                 test    eax, eax
.text:00427879                 jz      short loc_427883
.text:0042787B                 cmp     eax, edx
.text:0042787D                 jnb     short loc_427874
.text:0042787F                 cmp     [eax], edx
.text:00427881                 jb      short loc_427874
.text:00427883
.text:00427883 loc_427883:                             ; CODE XREF: .text:0042786E↑j
.text:00427883                                         ; .text:00427879↑j ...
.text:00427883                 test    eax, eax
.text:00427885                 pop     ebp
.text:00427886                 setnz   al
.text:00427889                 and     eax, 0FFh
.text:0042788E                 retn
.text:0042788F ; ---------------------------------------------------------------------------
.text:0042788F
.text:0042788F loc_42788F:                             ; CODE XREF: .text:00427872↑j
.text:0042788F                 cmp     [eax], edx
.text:00427891                 jb      short loc_427874
.text:00427893                 jmp     short loc_427883
.text:00427893 ; ---------------------------------------------------------------------------
.text:00427895                 align 10h
.text:004278A0                 push    ebp
.text:004278A1                 mov     ebp, esp
.text:004278A3                 push    edi
.text:004278A4                 push    esi
.text:004278A5                 push    ebx
.text:004278A6                 sub     esp, 0Ch
.text:004278A9                 mov     ebx, [ebp+8]
.text:004278AC                 mov     edi, [ebp+0Ch]
.text:004278AF                 mov     edx, [ebx+4]
.text:004278B2                 test    edx, edx
.text:004278B4                 jz      short loc_4278FE
.text:004278B6                 cmp     edx, edi
.text:004278B8                 jb      short loc_42790A
.text:004278BA                 lea     esi, [esi+0]
.text:004278C0
.text:004278C0 loc_4278C0:                             ; CODE XREF: .text:004278E2↓j
.text:004278C0                                         ; .text:004278E6↓j ...
.text:004278C0                 mov     esi, [edx+4]
.text:004278C3                 test    byte ptr [ebx+28h], 1
.text:004278C7                 jz      short loc_427904
.text:004278C9                 push    eax
.text:004278CA                 push    eax
.text:004278CB                 push    edx
.text:004278CC                 mov     eax, [ebx+24h]
.text:004278CF                 push    eax
.text:004278D0
.text:004278D0 loc_4278D0:                             ; CODE XREF: .text:00427908↓j
.text:004278D0                 call    dword ptr [ebx+20h]
.text:004278D3                 add     esp, 10h
.text:004278D6                 mov     edx, esi
.text:004278D8                 or      byte ptr [ebx+28h], 2
.text:004278DC                 test    esi, esi
.text:004278DE                 jz      short loc_4278FE
.text:004278E0                 cmp     esi, edi
.text:004278E2                 jnb     short loc_4278C0
.text:004278E4                 cmp     [esi], edi
.text:004278E6                 jb      short loc_4278C0
.text:004278E8
.text:004278E8 loc_4278E8:                             ; CODE XREF: .text:0042790E↓j
.text:004278E8                 mov     [ebx+0Ch], edi
.text:004278EB                 mov     [ebx+8], edi
.text:004278EE                 mov     eax, [edx]
.text:004278F0                 mov     [ebx+4], edx
.text:004278F3                 mov     [ebx+10h], eax
.text:004278F6
.text:004278F6 loc_4278F6:                             ; CODE XREF: .text:00427900↓j
.text:004278F6                 lea     esp, [ebp-0Ch]
.text:004278F9                 pop     ebx
.text:004278FA                 pop     esi
.text:004278FB                 pop     edi
.text:004278FC                 pop     ebp
.text:004278FD                 retn
.text:004278FE ; ---------------------------------------------------------------------------
.text:004278FE
.text:004278FE loc_4278FE:                             ; CODE XREF: .text:004278B4↑j
.text:004278FE                                         ; .text:004278DE↑j
.text:004278FE                 test    edi, edi
.text:00427900                 jz      short loc_4278F6
.text:00427902                 jmp     short loc_427910
.text:00427904 ; ---------------------------------------------------------------------------
.text:00427904
.text:00427904 loc_427904:                             ; CODE XREF: .text:004278C7↑j
.text:00427904                 sub     esp, 0Ch
.text:00427907                 push    edx
.text:00427908                 jmp     short loc_4278D0
.text:0042790A ; ---------------------------------------------------------------------------
.text:0042790A
.text:0042790A loc_42790A:                             ; CODE XREF: .text:004278B8↑j
.text:0042790A                 cmp     [edx], edi
.text:0042790C                 jb      short loc_4278C0
.text:0042790E                 jmp     short loc_4278E8
.text:00427910 ; ---------------------------------------------------------------------------
.text:00427910
.text:00427910 loc_427910:                             ; CODE XREF: .text:00427902↑j
.text:00427910                 call    abort
.text:00427910 ; ---------------------------------------------------------------------------
.text:00427915                 align 10h
.text:00427920                 push    ebp
.text:00427921                 mov     ebp, esp
.text:00427923                 push    edi
.text:00427924                 push    esi
.text:00427925                 push    ebx
.text:00427926                 sub     esp, 0Ch
.text:00427929                 mov     ebx, [ebp+8]
.text:0042792C                 mov     edi, [ebp+0Ch]
.text:0042792F                 mov     edx, [ebx+4]
.text:00427932                 test    edx, edx
.text:00427934                 jz      short loc_42797E
.text:00427936                 cmp     edx, edi
.text:00427938                 jb      short loc_42798A
.text:0042793A                 lea     esi, [esi+0]
.text:00427940
.text:00427940 loc_427940:                             ; CODE XREF: .text:00427962↓j
.text:00427940                                         ; .text:00427966↓j ...
.text:00427940                 mov     esi, [edx+4]
.text:00427943                 test    byte ptr [ebx+28h], 1
.text:00427947                 jz      short loc_427984
.text:00427949                 push    eax
.text:0042794A                 push    eax
.text:0042794B                 push    edx
.text:0042794C                 mov     eax, [ebx+24h]
.text:0042794F                 push    eax
.text:00427950
.text:00427950 loc_427950:                             ; CODE XREF: .text:00427988↓j
.text:00427950                 call    dword ptr [ebx+20h]
.text:00427953                 add     esp, 10h
.text:00427956                 mov     edx, esi
.text:00427958                 or      byte ptr [ebx+28h], 2
.text:0042795C                 test    esi, esi
.text:0042795E                 jz      short loc_42797E
.text:00427960                 cmp     esi, edi
.text:00427962                 jnb     short loc_427940
.text:00427964                 cmp     [esi], edi
.text:00427966                 jb      short loc_427940
.text:00427968
.text:00427968 loc_427968:                             ; CODE XREF: .text:0042798E↓j
.text:00427968                 mov     [ebx+0Ch], edi
.text:0042796B                 mov     [ebx+8], edi
.text:0042796E                 mov     eax, [edx]
.text:00427970                 mov     [ebx+4], edx
.text:00427973                 mov     [ebx+10h], eax
.text:00427976
.text:00427976 loc_427976:                             ; CODE XREF: .text:00427980↓j
.text:00427976                 lea     esp, [ebp-0Ch]
.text:00427979                 pop     ebx
.text:0042797A                 pop     esi
.text:0042797B                 pop     edi
.text:0042797C                 pop     ebp
.text:0042797D                 retn
.text:0042797E ; ---------------------------------------------------------------------------
.text:0042797E
.text:0042797E loc_42797E:                             ; CODE XREF: .text:00427934↑j
.text:0042797E                                         ; .text:0042795E↑j
.text:0042797E                 test    edi, edi
.text:00427980                 jz      short loc_427976
.text:00427982                 jmp     short loc_427990
.text:00427984 ; ---------------------------------------------------------------------------
.text:00427984
.text:00427984 loc_427984:                             ; CODE XREF: .text:00427947↑j
.text:00427984                 sub     esp, 0Ch
.text:00427987                 push    edx
.text:00427988                 jmp     short loc_427950
.text:0042798A ; ---------------------------------------------------------------------------
.text:0042798A
.text:0042798A loc_42798A:                             ; CODE XREF: .text:00427938↑j
.text:0042798A                 cmp     [edx], edi
.text:0042798C                 jb      short loc_427940
.text:0042798E                 jmp     short loc_427968
.text:00427990 ; ---------------------------------------------------------------------------
.text:00427990
.text:00427990 loc_427990:                             ; CODE XREF: .text:00427982↑j
.text:00427990                 call    abort
.text:00427990 ; ---------------------------------------------------------------------------
.text:00427995                 align 10h
.text:004279A0                 push    ebp
.text:004279A1                 xor     ecx, ecx
.text:004279A3                 mov     ebp, esp
.text:004279A5                 mov     eax, [ebp+8]
.text:004279A8                 mov     edx, [eax+4]
.text:004279AB                 test    edx, edx
.text:004279AD                 jz      short loc_4279BD
.text:004279AF                 nop
.text:004279B0
.text:004279B0 loc_4279B0:                             ; CODE XREF: .text:004279BB↓j
.text:004279B0                 mov     eax, [edx]
.text:004279B2                 sub     eax, edx
.text:004279B4                 mov     edx, [edx+4]
.text:004279B7                 add     ecx, eax
.text:004279B9                 test    edx, edx
.text:004279BB                 jnz     short loc_4279B0
.text:004279BD
.text:004279BD loc_4279BD:                             ; CODE XREF: .text:004279AD↑j
.text:004279BD                 mov     eax, ecx
.text:004279BF                 pop     ebp
.text:004279C0                 retn
.text:004279C0 ; ---------------------------------------------------------------------------
.text:004279C1 aMemoryExhauste_0 db 'memory exhausted',0Ah,0
.text:004279C1                                         ; DATA XREF: sub_4279E0+12↓o
.text:004279D3                 align 10h
.text:004279E0
.text:004279E0 ; =============== S U B R O U T I N E =======================================
.text:004279E0
.text:004279E0 ; Attributes: noreturn bp-based frame
.text:004279E0
.text:004279E0 sub_4279E0      proc near               ; CODE XREF: sub_427600:loc_427680↑p
.text:004279E0                                         ; .text:loc_427720↑p ...
.text:004279E0                 push    ebp
.text:004279E1                 mov     ebp, esp
.text:004279E3                 push    ecx
.text:004279E4                 push    ecx
.text:004279E5                 mov     eax, ds:_iob
.text:004279EA                 add     eax, 40h ; '@'
.text:004279ED                 push    eax             ; Stream
.text:004279EE                 push    11h             ; ElementCount
.text:004279F0                 push    1               ; ElementSize
.text:004279F2                 push    offset aMemoryExhauste_0 ; "memory exhausted\n"
.text:004279F7                 call    fwrite
.text:004279FC                 mov     eax, dword_42B204
.text:00427A01                 pop     edx
.text:00427A02                 push    eax             ; Code
.text:00427A03                 call    exit
.text:00427A03 sub_4279E0      endp
.text:00427A03
.text:00427A03 ; ---------------------------------------------------------------------------
.text:00427A08                 align 10h
.text:00427A10
.text:00427A10 ; =============== S U B R O U T I N E =======================================
.text:00427A10
.text:00427A10 ; Attributes: thunk
.text:00427A10
.text:00427A10 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00427A10 OleInitialize   proc near               ; CODE XREF: sub_418DB0+1A↑p
.text:00427A10                 jmp     ds:__imp_OleInitialize
.text:00427A10 OleInitialize   endp
.text:00427A10
.text:00427A10 ; ---------------------------------------------------------------------------
.text:00427A16                 align 10h
.text:00427A20
.text:00427A20 ; =============== S U B R O U T I N E =======================================
.text:00427A20
.text:00427A20 ; Attributes: thunk
.text:00427A20
.text:00427A20 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00427A20 CoCreateInstance proc near              ; CODE XREF: sub_418DB0+52↑p
.text:00427A20
.text:00427A20 rclsid          = dword ptr  4
.text:00427A20 pUnkOuter       = dword ptr  8
.text:00427A20 dwClsContext    = dword ptr  0Ch
.text:00427A20 riid            = dword ptr  10h
.text:00427A20 ppv             = dword ptr  14h
.text:00427A20
.text:00427A20                 jmp     ds:__imp_CoCreateInstance
.text:00427A20 CoCreateInstance endp
.text:00427A20
.text:00427A20 ; ---------------------------------------------------------------------------
.text:00427A26                 align 10h
.text:00427A30
.text:00427A30 ; =============== S U B R O U T I N E =======================================
.text:00427A30
.text:00427A30 ; Attributes: thunk
.text:00427A30
.text:00427A30 ; void __stdcall CoUninitialize()
.text:00427A30 CoUninitialize  proc near               ; CODE XREF: sub_418DB0+14E↑p
.text:00427A30                                         ; sub_418DB0+16D↑p
.text:00427A30                 jmp     ds:__imp_CoUninitialize
.text:00427A30 CoUninitialize  endp
.text:00427A30
.text:00427A30 ; ---------------------------------------------------------------------------
.text:00427A36                 align 10h
.text:00427A40                 add     al, 0BAh ; 'º'
.text:00427A42                 retf
.text:00427A42 ; ---------------------------------------------------------------------------
.text:00427A43                 db 7Eh
.text:00427A44                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00427A44                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00427A44                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00427A44                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00427A44                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00427A44                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00427A44                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00427A44                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00427A44                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00427A44                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00427A44                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00427A44                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00427A44                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00427A44                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00427A44                 dd 0C4426C00h, 330h, 0
.text:00427B78                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00427B78                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:00427B78                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:00427B78                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:00427BC8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00427BC8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:00427BC8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:00427BC8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:00427BC8                 dd 0BA94B00h, 1Bh, 0
.text:00427C28                 dd 0C0h, 46000000h, 1Ch, 0
.text:00427C38                 dd 0C0h, 46000000h, 331h, 0
.text:00427C48                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00427C48                 dd 312h, 0
.text:00427C68                 dd 0C0h, 46000000h, 30Eh, 0
.text:00427C78                 dd 0C0h, 46000000h, 30Dh, 0
.text:00427C88                 dd 0C0h, 46000000h, 311h, 0
.text:00427C98                 dd 0C0h, 46000000h, 313h, 0
.text:00427CA8                 dd 0C0h, 46000000h, 30Ch, 0
.text:00427CB8                 dd 0C0h, 46000000h, 30Fh, 0
.text:00427CC8                 dd 0C0h, 46000000h, 310h, 0
.text:00427CD8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00427CD8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00427D08                 dd 0C0h, 46000000h, 319h, 0
.text:00427D18                 dd 0C0h, 46000000h, 315h, 0
.text:00427D28                 dd 0C0h, 46000000h, 316h, 0
.text:00427D38                 dd 0C0h, 46000000h, 315h, 0
.text:00427D48                 dd 0C0h, 46000000h, 2E005h, 0
.text:00427D58                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00427D58                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00427D58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:00427D98                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00427D98                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:00427D98                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:00427D98                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:00427D98                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:00427D98                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:00427D98                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:00427D98                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:00427D98                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:00427D98                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:00427D98                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:00427D98                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00427D98                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:00427D98                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:00427D98                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:00427D98                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00427D98                 dd 2DE81h, 0
.text:00427EE8                 dd 0C0h, 46000000h, 4 dup(0)
.text:00427F00                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00427F00                 dd 0
.text:00427F18                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00427F18                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00427F18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00427F18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00427F18                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00427F18                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00427F18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00427F18                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00427F18                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00427F18                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00427F18                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00427F18                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00427F18                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00427F18                 dd 10Fh, 0
.text:00428028                 dd 0C0h, 46000000h, 125h, 0
.text:00428038                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00428038                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00428038                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:00428078                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:00428078                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00428078                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:00428078                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:00428078                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:004280D8                 dd 0C0h, 46000000h, 2E012h, 0
.text:004280E8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:004280E8                 dd 140h, 0
.text:00428108                 dd 0C0h, 46000000h, 1, 0
.text:00428118                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00428118                 dd 71D3400h, 13Dh, 0
.text:00428138                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00428138                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00428138                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00428138                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:00428188                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:00428188                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00428188                 dd 20405h, 0
.text:004281B8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004281C8                 dd 0C0h, 46000000h, 20406h, 0
.text:004281D8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:004281E8                 dd 0C0h, 46000000h, 110h, 0
.text:004281F8                 dd 0C0h, 46000000h, 10Eh, 0
.text:00428208                 dd 0C0h, 46000000h, 123h, 0
.text:00428218                 dd 0C0h, 46000000h, 124h, 0
.text:00428228                 dd 0C0h, 46000000h, 13h, 0
.text:00428238                 dd 0C0h, 46000000h, 14h, 0
.text:00428248                 dd 0C0h, 46000000h, 15h, 0
.text:00428258                 dd 0C0h, 46000000h, 20400h, 0
.text:00428268                 dd 0C0h, 46000000h, 121h, 0
.text:00428278                 dd 0C0h, 46000000h, 122h, 0
.text:00428288                 dd 0C0h, 46000000h, 2E011h, 0
.text:00428298                 dd 0C0h, 46000000h, 108h, 0
.text:004282A8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004282A8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004282A8                 dd 103h, 0
.text:004282D8                 dd 0C0h, 46000000h, 2E000h, 0
.text:004282E8                 dd 0C0h, 46000000h, 106h, 0
.text:004282F8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004282F8                 dd 107h, 0
.text:00428318                 dd 0C0h, 46000000h, 102h, 0
.text:00428328                 dd 0C0h, 46000000h, 104h, 0
.text:00428338                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00428338                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00428338                 dd 105h, 0
.text:00428368                 dd 0C0h, 46000000h, 13Bh, 0
.text:00428378                 dd 0C0h, 46000000h, 139h, 0
.text:00428388                 dd 0C0h, 46000000h, 0Dh, 0
.text:00428398                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00428398                 dd 101h, 0
.text:004283B8                 dd 0C0h, 46000000h, 100h, 0
.text:004283C8                 dd 0C0h, 46000000h, 20404h, 0
.text:004283D8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004283D8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00428408                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00428408                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00428408                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00428408                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00428458                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00428458                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00428458                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00428458                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00428458                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00428458                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:004284D8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:004284D8                 dd 0Ah, 0
.text:004284F8                 dd 0C0h, 46000000h, 2, 0
.text:00428508                 dd 0C0h, 46000000h, 1Dh, 0
.text:00428518                 dd 0C0h, 46000000h, 3, 0
.text:00428528                 dd 0C0h, 46000000h, 16h, 0
.text:00428538                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00428538                 dd 1608D74Fh, 0Fh, 0
.text:00428558                 dd 0C0h, 46000000h, 20h, 0
.text:00428568                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00428568                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00428568                 dd 0
.text:00428598                 dd 0C0h, 46000000h, 11Eh, 0
.text:004285A8                 dd 0C0h, 46000000h, 128h, 0
.text:004285B8                 dd 0C0h, 46000000h, 129h, 0
.text:004285C8                 dd 0C0h, 46000000h, 118h, 0
.text:004285D8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:004285D8                 dd 70474000h, 11Bh, 0
.text:004285F8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:004285F8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004285F8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:004285F8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:004285F8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00428658                 dd 0C0h, 46000000h, 116h, 0
.text:00428668                 dd 0C0h, 46000000h, 113h, 0
.text:00428678                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00428678                 dd 119h, 0
.text:00428698                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00428698                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00428698                 dd 0
.text:004286C8                 dd 0C0h, 46000000h, 11Ch, 0
.text:004286D8                 dd 0C0h, 46000000h, 11Dh, 0
.text:004286E8                 dd 0C0h, 46000000h, 11Fh, 0
.text:004286F8                 dd 0C0h, 46000000h, 112h, 0
.text:00428708                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00428708                 dd 18E6000h, 120h, 0
.text:00428728                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00428728                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00428728                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00428768                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00428768                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00428798                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00428798                 dd 11Ah, 0
.text:004287B8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:004287B8                 dd 10Ch, 0
.text:004287D8                 dd 0C0h, 46000000h
.text:004287E0 dword_4287E0    dd 10Bh, 0              ; DATA XREF: sub_418DB0+75↑o
.text:004287E8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:004287E8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:004287E8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:004287E8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00428838                 dd 0C0h, 46000000h, 109h, 0
.text:00428848                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00428848                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00428848                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00428848                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00428848                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00428848                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00428848                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00428848                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00428848                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00428848                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00428848                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00428928                 dd 0C0h, 46000000h, 138h, 0
.text:00428938                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00428938                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00428938                 dd 27h, 0
.text:00428968                 dd 0C0h, 46000000h, 8, 0
.text:00428978                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00428978                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00428978                 dd 20D00h, 0
.text:004289A8                 dd 0C0h, 46000000h, 20D03h, 0
.text:004289B8                 dd 0C0h, 46000000h, 12h, 0
.text:004289C8                 dd 0C0h, 46000000h, 4, 0
.text:004289D8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004289D8                 dd 7, 0
.text:004289F8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:004289F8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00428A28                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00428A28                 dd 126h, 0
.text:00428A48                 dd 0C0h, 46000000h, 10h, 0
.text:00428A58                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00428A58                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:00428A88                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:00428A88                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:00428A88                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:00428AC8                 dd 0C0h, 46000000h, 0Bh, 0
.text:00428AD8                 dd 0C0h, 46000000h, 0Ch, 0
.text:00428AE8                 dd 0C0h, 46000000h, 26h, 0
.text:00428AF8                 dd 0C0h, 46000000h, 6, 0
.text:00428B08                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00428B08                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00428B08                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00428B48                 dd 0C0h, 46000000h, 20403h, 0
.text:00428B58                 dd 0C0h, 46000000h, 20401h, 0
.text:00428B68                 dd 0C0h, 46000000h, 20412h, 0
.text:00428B78                 dd 0C0h, 46000000h, 20402h, 0
.text:00428B88                 dd 0C0h, 46000000h, 20411h, 0
.text:00428B98                 dd 0C0h, 46000000h, 2 dup(0)
.text:00428BA8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:00428BA8                 dd 10Dh, 0
.text:00428BC8                 dd 0C0h, 46000000h, 127h, 0
.text:00428BD8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00428BD8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00428BD8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00428C18                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00428C18                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00428C18                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00428C58                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00428C68                 dd 0C0h, 46000000h, 2DE18h, 0
.text:00428C78                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:00428C88                 dd 0C0h, 46000000h, 2DE19h, 0
.text:00428C98                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:00428CA8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:00428CB8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:00428CC8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00428CD8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00428CE8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00428CF8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00428D08                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00428D18                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00428D28                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00428D38                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00428D48                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00428D58                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00428D68                 dd 0C0h, 46000000h, 2DE13h, 0
.text:00428D78                 dd 0C0h, 46000000h, 2DE10h, 0
.text:00428D88                 dd 0C0h, 46000000h, 2DE22h, 0
.text:00428D98                 dd 0C0h, 46000000h, 2DE09h, 0
.text:00428DA8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:00428DB8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:00428DC8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00428DD8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00428DE8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00428DF8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00428E08                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00428E18                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00428E28                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00428E38                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00428E48                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00428E58                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00428E68                 dd 0C0h, 46000000h, 2DE03h, 0
.text:00428E78                 dd 0C0h, 46000000h, 2DE08h, 0
.text:00428E88                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:00428E88                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:00428EB0
.text:00428EB0 ; =============== S U B R O U T I N E =======================================
.text:00428EB0
.text:00428EB0 ; Attributes: thunk
.text:00428EB0
.text:00428EB0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00428EB0 mbrtowc         proc near               ; CODE XREF: sub_405EA0+14F↑p
.text:00428EB0                                         ; sub_40C8F0+95↑p ...
.text:00428EB0
.text:00428EB0 DstCh           = dword ptr  4
.text:00428EB0 SrcCh           = dword ptr  8
.text:00428EB0 SizeInBytes     = dword ptr  0Ch
.text:00428EB0 State           = dword ptr  10h
.text:00428EB0
.text:00428EB0                 jmp     ds:__imp_mbrtowc
.text:00428EB0 mbrtowc         endp
.text:00428EB0
.text:00428EB0 ; ---------------------------------------------------------------------------
.text:00428EB6                 align 10h
.text:00428EC0
.text:00428EC0 ; =============== S U B R O U T I N E =======================================
.text:00428EC0
.text:00428EC0 ; Attributes: thunk
.text:00428EC0
.text:00428EC0 ; size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.text:00428EC0 mbrlen          proc near               ; CODE XREF: sub_40A870+19D↑p
.text:00428EC0
.text:00428EC0 SizeInBytes     = dword ptr  8
.text:00428EC0 State           = dword ptr  0Ch
.text:00428EC0
.text:00428EC0                 jmp     ds:__imp_mbrlen
.text:00428EC0 mbrlen          endp
.text:00428EC0
.text:00428EC0 ; ---------------------------------------------------------------------------
.text:00428EC6                 align 10h
.text:00428ED0
.text:00428ED0 ; =============== S U B R O U T I N E =======================================
.text:00428ED0
.text:00428ED0 ; Attributes: thunk
.text:00428ED0
.text:00428ED0 ; size_t __cdecl mbsrtowcs(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State)
.text:00428ED0 mbsrtowcs       proc near               ; CODE XREF: sub_410500+96↑p
.text:00428ED0                                         ; sub_410500+C4↑p ...
.text:00428ED0
.text:00428ED0 Dest            = dword ptr  4
.text:00428ED0 PSrc            = dword ptr  8
.text:00428ED0 Count           = dword ptr  0Ch
.text:00428ED0 State           = dword ptr  10h
.text:00428ED0
.text:00428ED0                 jmp     ds:__imp_mbsrtowcs
.text:00428ED0 mbsrtowcs       endp
.text:00428ED0
.text:00428ED0 ; ---------------------------------------------------------------------------
.text:00428ED6                 align 10h
.text:00428EE0
.text:00428EE0 ; =============== S U B R O U T I N E =======================================
.text:00428EE0
.text:00428EE0 ; Attributes: thunk
.text:00428EE0
.text:00428EE0 ; wint_t __cdecl btowc(int Ch)
.text:00428EE0 btowc           proc near               ; CODE XREF: .text:0040E8F7↑p
.text:00428EE0                 jmp     ds:__imp_btowc
.text:00428EE0 btowc           endp
.text:00428EE0
.text:00428EE0 ; ---------------------------------------------------------------------------
.text:00428EE6                 align 10h
.text:00428EF0
.text:00428EF0 ; =============== S U B R O U T I N E =======================================
.text:00428EF0
.text:00428EF0 ; Attributes: thunk
.text:00428EF0
.text:00428EF0 ; wctype_t __cdecl wctype(const char *name)
.text:00428EF0 wctype          proc near               ; CODE XREF: .text:0040E8DB↑p
.text:00428EF0                                         ; sub_4106D0+5F↑p
.text:00428EF0
.text:00428EF0 name            = dword ptr  4
.text:00428EF0
.text:00428EF0                 jmp     ds:__imp_wctype
.text:00428EF0 wctype          endp
.text:00428EF0
.text:00428EF0 ; ---------------------------------------------------------------------------
.text:00428EF6                 align 10h
.text:00428F00
.text:00428F00 ; =============== S U B R O U T I N E =======================================
.text:00428F00
.text:00428F00 ; Attributes: bp-based frame
.text:00428F00
.text:00428F00 sub_428F00      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00428F00                 push    ebp
.text:00428F01                 mov     ecx, offset dword_42C000
.text:00428F06                 cmp     ecx, offset dword_42C000
.text:00428F0C                 mov     ebp, esp
.text:00428F0E                 jnb     short loc_428F26
.text:00428F10
.text:00428F10 loc_428F10:                             ; CODE XREF: sub_428F00+24↓j
.text:00428F10                 mov     edx, [ecx+4]
.text:00428F13                 mov     eax, [ecx]
.text:00428F15                 add     ecx, 8
.text:00428F18                 add     [edx+400000h], eax
.text:00428F1E                 cmp     ecx, offset dword_42C000
.text:00428F24                 jb      short loc_428F10
.text:00428F26
.text:00428F26 loc_428F26:                             ; CODE XREF: sub_428F00+E↑j
.text:00428F26                 pop     ebp
.text:00428F27                 retn
.text:00428F27 sub_428F00      endp
.text:00428F27
.text:00428F27 ; ---------------------------------------------------------------------------
.text:00428F28                 align 10h
.text:00428F30
.text:00428F30 ; =============== S U B R O U T I N E =======================================
.text:00428F30
.text:00428F30 ; Attributes: bp-based frame
.text:00428F30
.text:00428F30 sub_428F30      proc near               ; CODE XREF: sub_401080+16↑p
.text:00428F30                                         ; TopLevelExceptionFilter+D7↑p
.text:00428F30                 push    ebp
.text:00428F31                 mov     ebp, esp
.text:00428F33                 fninit
.text:00428F35                 pop     ebp
.text:00428F36                 retn
.text:00428F36 sub_428F30      endp
.text:00428F36
.text:00428F36 ; ---------------------------------------------------------------------------
.text:00428F37                 align 10h
.text:00428F40
.text:00428F40 ; =============== S U B R O U T I N E =======================================
.text:00428F40
.text:00428F40 ; Attributes: bp-based frame
.text:00428F40
.text:00428F40 ; void __cdecl sub_428F40()
.text:00428F40 sub_428F40      proc near               ; DATA XREF: .text:loc_428F89↓o
.text:00428F40                                         ; sub_428FD0:loc_428FFE↓o
.text:00428F40                 push    ebp
.text:00428F41                 mov     ebp, esp
.text:00428F43                 sub     esp, 8
.text:00428F46                 mov     eax, off_42B244
.text:00428F4B                 mov     edx, [eax]
.text:00428F4D                 test    edx, edx
.text:00428F4F                 jnz     short loc_428F55
.text:00428F51
.text:00428F51 loc_428F51:                             ; CODE XREF: sub_428F40+2C↓j
.text:00428F51                 mov     esp, ebp
.text:00428F53                 pop     ebp
.text:00428F54                 retn
.text:00428F55 ; ---------------------------------------------------------------------------
.text:00428F55
.text:00428F55 loc_428F55:                             ; CODE XREF: sub_428F40+F↑j
.text:00428F55                                         ; sub_428F40+2A↓j
.text:00428F55                 call    dword ptr [eax]
.text:00428F57                 mov     edx, off_42B244
.text:00428F5D                 mov     ecx, [edx+4]
.text:00428F60                 lea     eax, [edx+4]
.text:00428F63                 mov     off_42B244, eax
.text:00428F68                 test    ecx, ecx
.text:00428F6A                 jnz     short loc_428F55
.text:00428F6C                 jmp     short loc_428F51
.text:00428F6C sub_428F40      endp
.text:00428F6C
.text:00428F6C ; ---------------------------------------------------------------------------
.text:00428F6E                 align 10h
.text:00428F70                 push    ebp
.text:00428F71                 mov     ebp, esp
.text:00428F73                 sub     esp, 8
.text:00428F76                 mov     [ebp-4], ebx
.text:00428F79                 mov     eax, ds:dword_42A710
.text:00428F7E                 cmp     eax, 0FFFFFFFFh
.text:00428F81                 jz      short loc_428FAC
.text:00428F83
.text:00428F83 loc_428F83:                             ; CODE XREF: .text:00428FB6↓j
.text:00428F83                                         ; .text:00428FC9↓j
.text:00428F83                 test    eax, eax
.text:00428F85                 mov     ebx, eax
.text:00428F87                 jnz     short loc_428FA0
.text:00428F89
.text:00428F89 loc_428F89:                             ; CODE XREF: .text:00428FAA↓j
.text:00428F89                 mov     dword ptr [esp], offset sub_428F40
.text:00428F90                 call    sub_401040
.text:00428F95                 mov     ebx, [ebp-4]
.text:00428F98                 mov     esp, ebp
.text:00428F9A                 pop     ebp
.text:00428F9B                 retn
.text:00428F9B ; ---------------------------------------------------------------------------
.text:00428F9C                 align 10h
.text:00428FA0
.text:00428FA0 loc_428FA0:                             ; CODE XREF: .text:00428F87↑j
.text:00428FA0                                         ; .text:00428FA8↓j
.text:00428FA0                 call    ds:dword_42A710[ebx*4]
.text:00428FA7                 dec     ebx
.text:00428FA8                 jnz     short loc_428FA0
.text:00428FAA                 jmp     short loc_428F89
.text:00428FAC ; ---------------------------------------------------------------------------
.text:00428FAC
.text:00428FAC loc_428FAC:                             ; CODE XREF: .text:00428F81↑j
.text:00428FAC                 mov     ecx, ds:dword_42A714
.text:00428FB2                 xor     eax, eax
.text:00428FB4                 test    ecx, ecx
.text:00428FB6                 jz      short loc_428F83
.text:00428FB8                 mov     edx, offset dword_42A710
.text:00428FBD                 lea     esi, [esi+0]
.text:00428FC0
.text:00428FC0 loc_428FC0:                             ; CODE XREF: .text:00428FC7↓j
.text:00428FC0                 inc     eax
.text:00428FC1                 mov     ecx, [edx+eax*4+4]
.text:00428FC5                 test    ecx, ecx
.text:00428FC7                 jnz     short loc_428FC0
.text:00428FC9                 jmp     short loc_428F83
.text:00428FC9 ; ---------------------------------------------------------------------------
.text:00428FCB                 align 10h
.text:00428FD0
.text:00428FD0 ; =============== S U B R O U T I N E =======================================
.text:00428FD0
.text:00428FD0 ; Attributes: bp-based frame
.text:00428FD0
.text:00428FD0 sub_428FD0      proc near               ; CODE XREF: sub_401B10+18↑p
.text:00428FD0
.text:00428FD0 var_8           = dword ptr -8
.text:00428FD0 var_4           = dword ptr -4
.text:00428FD0
.text:00428FD0                 push    ebp
.text:00428FD1                 mov     ebp, esp
.text:00428FD3                 sub     esp, 8
.text:00428FD6                 mov     [ebp+var_4], ebx
.text:00428FD9                 mov     edx, dword_42B240
.text:00428FDF                 test    edx, edx
.text:00428FE1                 jnz     short loc_42900A
.text:00428FE3                 mov     eax, ds:dword_42A710
.text:00428FE8                 mov     edx, 1
.text:00428FED                 mov     dword_42B240, edx
.text:00428FF3                 cmp     eax, 0FFFFFFFFh
.text:00428FF6                 jz      short loc_42901D
.text:00428FF8
.text:00428FF8 loc_428FF8:                             ; CODE XREF: sub_428FD0+57↓j
.text:00428FF8                                         ; sub_428FD0+69↓j
.text:00428FF8                 test    eax, eax
.text:00428FFA                 mov     ebx, eax
.text:00428FFC                 jnz     short loc_429011
.text:00428FFE
.text:00428FFE loc_428FFE:                             ; CODE XREF: sub_428FD0+4B↓j
.text:00428FFE                 mov     [esp+8+var_8], offset sub_428F40 ; void (__cdecl *)()
.text:00429005                 call    sub_401040
.text:0042900A
.text:0042900A loc_42900A:                             ; CODE XREF: sub_428FD0+11↑j
.text:0042900A                 mov     ebx, [ebp+var_4]
.text:0042900D                 mov     esp, ebp
.text:0042900F                 pop     ebp
.text:00429010                 retn
.text:00429011 ; ---------------------------------------------------------------------------
.text:00429011
.text:00429011 loc_429011:                             ; CODE XREF: sub_428FD0+2C↑j
.text:00429011                                         ; sub_428FD0+49↓j
.text:00429011                 call    ds:dword_42A710[ebx*4]
.text:00429018                 dec     ebx
.text:00429019                 jnz     short loc_429011
.text:0042901B                 jmp     short loc_428FFE
.text:0042901D ; ---------------------------------------------------------------------------
.text:0042901D
.text:0042901D loc_42901D:                             ; CODE XREF: sub_428FD0+26↑j
.text:0042901D                 mov     ecx, ds:dword_42A714
.text:00429023                 xor     eax, eax
.text:00429025                 test    ecx, ecx
.text:00429027                 jz      short loc_428FF8
.text:00429029                 mov     edx, offset dword_42A710
.text:0042902E                 mov     esi, esi
.text:00429030
.text:00429030 loc_429030:                             ; CODE XREF: sub_428FD0+67↓j
.text:00429030                 inc     eax
.text:00429031                 mov     ebx, [edx+eax*4+4]
.text:00429035                 test    ebx, ebx
.text:00429037                 jnz     short loc_429030
.text:00429039                 jmp     short loc_428FF8
.text:00429039 sub_428FD0      endp
.text:00429039
.text:00429039 ; ---------------------------------------------------------------------------
.text:0042903B                 align 10h
.text:00429040
.text:00429040 ; =============== S U B R O U T I N E =======================================
.text:00429040
.text:00429040 ; Attributes: info_from_lumina
.text:00429040
.text:00429040 ; void *__cdecl _alloca(size_t Size)
.text:00429040 __alloca        proc near               ; CODE XREF: sub_401B10+13↑p
.text:00429040                                         ; sub_404500+6F3↑p ...
.text:00429040                 push    ecx
.text:00429041                 mov     ecx, esp
.text:00429043                 add     ecx, 8
.text:00429046
.text:00429046 loc_429046:                             ; CODE XREF: __alloca+1B↓j
.text:00429046                 cmp     eax, 1000h
.text:0042904B                 jb      short loc_42905D
.text:0042904D                 sub     ecx, 1000h
.text:00429053                 or      dword ptr [ecx], 0
.text:00429056                 sub     eax, 1000h
.text:0042905B                 jmp     short loc_429046
.text:0042905D ; ---------------------------------------------------------------------------
.text:0042905D
.text:0042905D loc_42905D:                             ; CODE XREF: __alloca+B↑j
.text:0042905D                 sub     ecx, eax
.text:0042905F                 or      dword ptr [ecx], 0
.text:00429062                 mov     eax, esp
.text:00429064                 mov     esp, ecx
.text:00429066                 mov     ecx, [eax]
.text:00429068                 mov     eax, [eax+4]
.text:0042906B                 jmp     eax
.text:0042906B __alloca        endp
.text:0042906B
.text:0042906B ; ---------------------------------------------------------------------------
.text:0042906D                 align 10h
.text:00429070
.text:00429070 ; =============== S U B R O U T I N E =======================================
.text:00429070
.text:00429070 ; Attributes: bp-based frame
.text:00429070
.text:00429070 sub_429070      proc near               ; CODE XREF: sub_409450+23↑p
.text:00429070                                         ; sub_412370+38↑p ...
.text:00429070
.text:00429070 var_34          = dword ptr -34h
.text:00429070 var_2C          = dword ptr -2Ch
.text:00429070 var_28          = dword ptr -28h
.text:00429070 var_24          = dword ptr -24h
.text:00429070 var_20          = dword ptr -20h
.text:00429070 var_1C          = dword ptr -1Ch
.text:00429070 var_18          = dword ptr -18h
.text:00429070 var_14          = dword ptr -14h
.text:00429070 arg_0           = dword ptr  8
.text:00429070 arg_4           = dword ptr  0Ch
.text:00429070 arg_8           = dword ptr  10h
.text:00429070 arg_C           = dword ptr  14h
.text:00429070
.text:00429070                 push    ebp
.text:00429071                 mov     ebp, esp
.text:00429073                 push    edi
.text:00429074                 push    esi
.text:00429075                 push    ebx
.text:00429076                 sub     esp, 2Ch
.text:00429079                 mov     edx, [ebp+arg_C]
.text:0042907C                 mov     [ebp+var_20], 0
.text:00429083                 mov     ecx, [ebp+arg_0]
.text:00429086                 mov     ebx, [ebp+arg_4]
.text:00429089                 mov     [ebp+var_1C], 0
.text:00429090                 mov     eax, [ebp+arg_8]
.text:00429093                 test    edx, edx
.text:00429095                 mov     [ebp+var_24], edx
.text:00429098                 mov     edi, ebx
.text:0042909A                 mov     esi, eax
.text:0042909C                 mov     [ebp+var_28], ecx
.text:0042909F                 jnz     short loc_429100
.text:004290A1                 cmp     eax, ebx
.text:004290A3                 jbe     short loc_4290E0
.text:004290A5                 mov     eax, ecx
.text:004290A7                 mov     edx, ebx
.text:004290A9                 div     esi
.text:004290AB
.text:004290AB loc_4290AB:                             ; CODE XREF: sub_429070+8B↓j
.text:004290AB                 mov     [ebp+var_28], edx
.text:004290AE                 lea     ecx, [ebp+var_18]
.text:004290B1                 test    ecx, ecx
.text:004290B3                 jz      short loc_4290CE
.text:004290B5                 mov     [ebp+var_1C], 0
.text:004290BC
.text:004290BC loc_4290BC:                             ; CODE XREF: sub_429070+DA↓j
.text:004290BC                 mov     eax, [ebp+var_28]
.text:004290BF                 mov     [ebp+var_20], eax
.text:004290C2                 mov     edx, [ebp+var_20]
.text:004290C5                 mov     ecx, [ebp+var_1C]
.text:004290C8                 mov     [ebp+var_18], edx
.text:004290CB                 mov     [ebp+var_14], ecx
.text:004290CE
.text:004290CE loc_4290CE:                             ; CODE XREF: sub_429070+43↑j
.text:004290CE                                         ; sub_429070+A7↓j ...
.text:004290CE                 mov     eax, [ebp+var_18]
.text:004290D1                 mov     edx, [ebp+var_14]
.text:004290D4                 add     esp, 2Ch
.text:004290D7                 pop     ebx
.text:004290D8                 pop     esi
.text:004290D9                 pop     edi
.text:004290DA                 pop     ebp
.text:004290DB                 retn
.text:004290DB ; ---------------------------------------------------------------------------
.text:004290DC                 align 10h
.text:004290E0
.text:004290E0 loc_4290E0:                             ; CODE XREF: sub_429070+33↑j
.text:004290E0                 test    eax, eax
.text:004290E2                 jnz     short loc_4290EF
.text:004290E4                 mov     eax, 1
.text:004290E9                 xor     edx, edx
.text:004290EB                 div     esi
.text:004290ED                 mov     esi, eax
.text:004290EF
.text:004290EF loc_4290EF:                             ; CODE XREF: sub_429070+72↑j
.text:004290EF                 mov     eax, edi
.text:004290F1                 mov     edx, [ebp+var_24]
.text:004290F4                 div     esi
.text:004290F6                 mov     eax, [ebp+var_28]
.text:004290F9                 div     esi
.text:004290FB                 jmp     short loc_4290AB
.text:004290FB ; ---------------------------------------------------------------------------
.text:004290FD                 align 10h
.text:00429100
.text:00429100 loc_429100:                             ; CODE XREF: sub_429070+2F↑j
.text:00429100                 cmp     [ebp+var_24], ebx
.text:00429103                 jbe     short loc_429120
.text:00429105                 mov     [ebp+var_20], ecx
.text:00429108
.text:00429108 loc_429108:                             ; CODE XREF: sub_429070+15B↓j
.text:00429108                 mov     [ebp+var_1C], edi
.text:0042910B                 mov     eax, [ebp+var_20]
.text:0042910E                 mov     edx, [ebp+var_1C]
.text:00429111                 mov     [ebp+var_18], eax
.text:00429114                 mov     [ebp+var_14], edx
.text:00429117                 jmp     short loc_4290CE
.text:00429117 ; ---------------------------------------------------------------------------
.text:00429119                 align 10h
.text:00429120
.text:00429120 loc_429120:                             ; CODE XREF: sub_429070+93↑j
.text:00429120                 bsr     eax, [ebp+var_24]
.text:00429124                 mov     ebx, eax
.text:00429126                 xor     ebx, 1Fh
.text:00429129                 jnz     short loc_429150
.text:0042912B                 cmp     edi, [ebp+var_24]
.text:0042912E                 ja      short loc_429135
.text:00429130                 cmp     [ebp+var_28], esi
.text:00429133                 jb      short loc_429140
.text:00429135
.text:00429135 loc_429135:                             ; CODE XREF: sub_429070+BE↑j
.text:00429135                 mov     edx, [ebp+var_28]
.text:00429138                 sub     edx, esi
.text:0042913A                 sbb     edi, [ebp+var_24]
.text:0042913D                 mov     [ebp+var_28], edx
.text:00429140
.text:00429140 loc_429140:                             ; CODE XREF: sub_429070+C3↑j
.text:00429140                 lea     ecx, [ebp+var_18]
.text:00429143                 test    ecx, ecx
.text:00429145                 jz      short loc_4290CE
.text:00429147                 mov     [ebp+var_1C], edi
.text:0042914A                 jmp     loc_4290BC
.text:0042914A ; ---------------------------------------------------------------------------
.text:0042914F                 align 10h
.text:00429150
.text:00429150 loc_429150:                             ; CODE XREF: sub_429070+B9↑j
.text:00429150                 mov     edx, [ebp+var_24]
.text:00429153                 mov     eax, 20h ; ' '
.text:00429158                 mov     cl, bl
.text:0042915A                 sub     eax, ebx
.text:0042915C                 mov     [ebp+var_2C], eax
.text:0042915F                 shl     edx, cl
.text:00429161                 mov     eax, esi
.text:00429163                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00429167                 shr     eax, cl
.text:00429169                 mov     cl, bl
.text:0042916B                 shl     esi, cl
.text:0042916D                 or      edx, eax
.text:0042916F                 mov     eax, [ebp+var_28]
.text:00429172                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00429176                 mov     [ebp+var_24], edx
.text:00429179                 mov     edx, edi
.text:0042917B                 shr     edx, cl
.text:0042917D                 mov     cl, bl
.text:0042917F                 shl     edi, cl
.text:00429181                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00429185                 shr     eax, cl
.text:00429187                 or      edi, eax
.text:00429189                 mov     eax, edi
.text:0042918B                 mov     cl, bl
.text:0042918D                 div     [ebp+var_24]
.text:00429190                 shl     [ebp+var_28], cl
.text:00429193                 mov     edi, edx
.text:00429195                 mul     esi
.text:00429197                 mov     [ebp+var_34], eax
.text:0042919A                 cmp     edx, edi
.text:0042919C                 ja      short loc_4291D8
.text:0042919E                 cmp     edx, edi
.text:004291A0                 jz      short loc_4291D0
.text:004291A2
.text:004291A2 loc_4291A2:                             ; CODE XREF: sub_429070+166↓j
.text:004291A2                                         ; sub_429070+173↓j
.text:004291A2                 lea     eax, [ebp+var_18]
.text:004291A5                 test    eax, eax
.text:004291A7                 jz      loc_4290CE
.text:004291AD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004291B1                 mov     eax, [ebp+var_28]
.text:004291B4                 sub     eax, [ebp+var_34]
.text:004291B7                 sbb     edi, edx
.text:004291B9                 mov     [ebp+var_28], eax
.text:004291BC                 mov     edx, edi
.text:004291BE                 shl     edx, cl
.text:004291C0                 mov     cl, bl
.text:004291C2                 shr     eax, cl
.text:004291C4                 or      edx, eax
.text:004291C6                 mov     [ebp+var_20], edx
.text:004291C9                 shr     edi, cl
.text:004291CB                 jmp     loc_429108
.text:004291D0 ; ---------------------------------------------------------------------------
.text:004291D0
.text:004291D0 loc_4291D0:                             ; CODE XREF: sub_429070+130↑j
.text:004291D0                 mov     eax, [ebp+var_28]
.text:004291D3                 cmp     [ebp+var_34], eax
.text:004291D6                 jbe     short loc_4291A2
.text:004291D8
.text:004291D8 loc_4291D8:                             ; CODE XREF: sub_429070+12C↑j
.text:004291D8                 mov     ecx, [ebp+var_34]
.text:004291DB                 sub     ecx, esi
.text:004291DD                 sbb     edx, [ebp+var_24]
.text:004291E0                 mov     [ebp+var_34], ecx
.text:004291E3                 jmp     short loc_4291A2
.text:004291E3 sub_429070      endp
.text:004291E3
.text:004291E3 ; ---------------------------------------------------------------------------
.text:004291E5                 align 10h
.text:004291F0
.text:004291F0 ; =============== S U B R O U T I N E =======================================
.text:004291F0
.text:004291F0 ; Attributes: bp-based frame
.text:004291F0
.text:004291F0 sub_4291F0      proc near               ; CODE XREF: sub_411D30+38↑p
.text:004291F0                                         ; sub_411D30+88↑p
.text:004291F0
.text:004291F0 var_3C          = dword ptr -3Ch
.text:004291F0 var_34          = dword ptr -34h
.text:004291F0 var_30          = dword ptr -30h
.text:004291F0 var_2C          = dword ptr -2Ch
.text:004291F0 var_28          = dword ptr -28h
.text:004291F0 var_24          = dword ptr -24h
.text:004291F0 var_1C          = dword ptr -1Ch
.text:004291F0 var_18          = dword ptr -18h
.text:004291F0 var_14          = dword ptr -14h
.text:004291F0 arg_0           = dword ptr  8
.text:004291F0 arg_4           = dword ptr  0Ch
.text:004291F0 arg_8           = dword ptr  10h
.text:004291F0 arg_C           = dword ptr  14h
.text:004291F0
.text:004291F0                 push    ebp
.text:004291F1                 mov     ebp, esp
.text:004291F3                 push    edi
.text:004291F4                 push    esi
.text:004291F5                 push    ebx
.text:004291F6                 sub     esp, 34h
.text:004291F9                 mov     ebx, [ebp+arg_4]
.text:004291FC                 mov     [ebp+var_28], 0
.text:00429203                 mov     ecx, [ebp+arg_0]
.text:00429206                 mov     eax, [ebp+arg_8]
.text:00429209                 mov     [ebp+var_24], 0
.text:00429210                 test    ebx, ebx
.text:00429212                 mov     edx, [ebp+arg_C]
.text:00429215                 mov     [ebp+var_1C], 0
.text:0042921C                 js      loc_429394
.text:00429222
.text:00429222 loc_429222:                             ; CODE XREF: sub_4291F0+1B2↓j
.text:00429222                 test    edx, edx
.text:00429224                 js      loc_429388
.text:0042922A
.text:0042922A loc_42922A:                             ; CODE XREF: sub_4291F0+19F↓j
.text:0042922A                 mov     [ebp+var_2C], edx
.text:0042922D                 test    edx, edx
.text:0042922F                 mov     esi, eax
.text:00429231                 mov     [ebp+var_30], ecx
.text:00429234                 mov     edi, ebx
.text:00429236                 jnz     short loc_4292A1
.text:00429238                 cmp     eax, ebx
.text:0042923A                 jbe     short loc_429284
.text:0042923C                 mov     eax, ecx
.text:0042923E                 mov     edx, ebx
.text:00429240                 div     esi
.text:00429242
.text:00429242 loc_429242:                             ; CODE XREF: sub_4291F0+AF↓j
.text:00429242                 mov     [ebp+var_30], edx
.text:00429245                 lea     ecx, [ebp+var_18]
.text:00429248                 test    ecx, ecx
.text:0042924A                 jz      short loc_429265
.text:0042924C                 mov     [ebp+var_24], 0
.text:00429253
.text:00429253 loc_429253:                             ; CODE XREF: sub_4291F0+FE↓j
.text:00429253                 mov     eax, [ebp+var_30]
.text:00429256                 mov     [ebp+var_28], eax
.text:00429259                 mov     edx, [ebp+var_28]
.text:0042925C                 mov     ecx, [ebp+var_24]
.text:0042925F                 mov     [ebp+var_18], edx
.text:00429262                 mov     [ebp+var_14], ecx
.text:00429265
.text:00429265 loc_429265:                             ; CODE XREF: sub_4291F0+5A↑j
.text:00429265                                         ; sub_4291F0+C8↓j ...
.text:00429265                 mov     eax, [ebp+var_1C]
.text:00429268                 test    eax, eax
.text:0042926A                 jz      short loc_429276
.text:0042926C                 neg     [ebp+var_18]
.text:0042926F                 adc     [ebp+var_14], 0
.text:00429273                 neg     [ebp+var_14]
.text:00429276
.text:00429276 loc_429276:                             ; CODE XREF: sub_4291F0+7A↑j
.text:00429276                 mov     eax, [ebp+var_18]
.text:00429279                 mov     edx, [ebp+var_14]
.text:0042927C                 add     esp, 34h
.text:0042927F                 pop     ebx
.text:00429280                 pop     esi
.text:00429281                 pop     edi
.text:00429282                 pop     ebp
.text:00429283                 retn
.text:00429284 ; ---------------------------------------------------------------------------
.text:00429284
.text:00429284 loc_429284:                             ; CODE XREF: sub_4291F0+4A↑j
.text:00429284                 test    eax, eax
.text:00429286                 jnz     short loc_429293
.text:00429288                 mov     eax, 1
.text:0042928D                 xor     edx, edx
.text:0042928F                 div     esi
.text:00429291                 mov     esi, eax
.text:00429293
.text:00429293 loc_429293:                             ; CODE XREF: sub_4291F0+96↑j
.text:00429293                 mov     eax, edi
.text:00429295                 mov     edx, [ebp+var_2C]
.text:00429298                 div     esi
.text:0042929A                 mov     eax, [ebp+var_30]
.text:0042929D                 div     esi
.text:0042929F                 jmp     short loc_429242
.text:004292A1 ; ---------------------------------------------------------------------------
.text:004292A1
.text:004292A1 loc_4292A1:                             ; CODE XREF: sub_4291F0+46↑j
.text:004292A1                 cmp     [ebp+var_2C], ebx
.text:004292A4                 jbe     short loc_4292C0
.text:004292A6                 mov     [ebp+var_28], ecx
.text:004292A9
.text:004292A9 loc_4292A9:                             ; CODE XREF: sub_4291F0+17E↓j
.text:004292A9                 mov     [ebp+var_24], edi
.text:004292AC                 mov     eax, [ebp+var_28]
.text:004292AF                 mov     edx, [ebp+var_24]
.text:004292B2                 mov     [ebp+var_18], eax
.text:004292B5                 mov     [ebp+var_14], edx
.text:004292B8                 jmp     short loc_429265
.text:004292B8 ; ---------------------------------------------------------------------------
.text:004292BA                 align 10h
.text:004292C0
.text:004292C0 loc_4292C0:                             ; CODE XREF: sub_4291F0+B4↑j
.text:004292C0                 bsr     eax, [ebp+var_2C]
.text:004292C4                 mov     ebx, eax
.text:004292C6                 xor     ebx, 1Fh
.text:004292C9                 jnz     short loc_4292F3
.text:004292CB                 cmp     edi, [ebp+var_2C]
.text:004292CE                 ja      short loc_4292D5
.text:004292D0                 cmp     [ebp+var_30], esi
.text:004292D3                 jb      short loc_4292E0
.text:004292D5
.text:004292D5 loc_4292D5:                             ; CODE XREF: sub_4291F0+DE↑j
.text:004292D5                 mov     edx, [ebp+var_30]
.text:004292D8                 sub     edx, esi
.text:004292DA                 sbb     edi, [ebp+var_2C]
.text:004292DD                 mov     [ebp+var_30], edx
.text:004292E0
.text:004292E0 loc_4292E0:                             ; CODE XREF: sub_4291F0+E3↑j
.text:004292E0                 lea     ecx, [ebp+var_18]
.text:004292E3                 test    ecx, ecx
.text:004292E5                 jz      loc_429265
.text:004292EB                 mov     [ebp+var_24], edi
.text:004292EE                 jmp     loc_429253
.text:004292F3 ; ---------------------------------------------------------------------------
.text:004292F3
.text:004292F3 loc_4292F3:                             ; CODE XREF: sub_4291F0+D9↑j
.text:004292F3                 mov     edx, [ebp+var_2C]
.text:004292F6                 mov     eax, 20h ; ' '
.text:004292FB                 mov     cl, bl
.text:004292FD                 sub     eax, ebx
.text:004292FF                 mov     [ebp+var_34], eax
.text:00429302                 shl     edx, cl
.text:00429304                 mov     eax, esi
.text:00429306                 movzx   ecx, byte ptr [ebp+var_34]
.text:0042930A                 shr     eax, cl
.text:0042930C                 mov     cl, bl
.text:0042930E                 shl     esi, cl
.text:00429310                 or      edx, eax
.text:00429312                 mov     eax, [ebp+var_30]
.text:00429315                 movzx   ecx, byte ptr [ebp+var_34]
.text:00429319                 mov     [ebp+var_2C], edx
.text:0042931C                 mov     edx, edi
.text:0042931E                 shr     edx, cl
.text:00429320                 mov     cl, bl
.text:00429322                 shl     edi, cl
.text:00429324                 movzx   ecx, byte ptr [ebp+var_34]
.text:00429328                 shr     eax, cl
.text:0042932A                 or      edi, eax
.text:0042932C                 mov     eax, edi
.text:0042932E                 mov     cl, bl
.text:00429330                 div     [ebp+var_2C]
.text:00429333                 shl     [ebp+var_30], cl
.text:00429336                 mov     edi, edx
.text:00429338                 mul     esi
.text:0042933A                 mov     [ebp+var_3C], eax
.text:0042933D                 cmp     edx, edi
.text:0042933F                 ja      short loc_42937B
.text:00429341                 cmp     edx, edi
.text:00429343                 jz      short loc_429373
.text:00429345
.text:00429345 loc_429345:                             ; CODE XREF: sub_4291F0+189↓j
.text:00429345                                         ; sub_4291F0+196↓j
.text:00429345                 lea     eax, [ebp+var_18]
.text:00429348                 test    eax, eax
.text:0042934A                 jz      loc_429265
.text:00429350                 movzx   ecx, byte ptr [ebp+var_34]
.text:00429354                 mov     eax, [ebp+var_30]
.text:00429357                 sub     eax, [ebp+var_3C]
.text:0042935A                 sbb     edi, edx
.text:0042935C                 mov     [ebp+var_30], eax
.text:0042935F                 mov     edx, edi
.text:00429361                 shl     edx, cl
.text:00429363                 mov     cl, bl
.text:00429365                 shr     eax, cl
.text:00429367                 or      edx, eax
.text:00429369                 mov     [ebp+var_28], edx
.text:0042936C                 shr     edi, cl
.text:0042936E                 jmp     loc_4292A9
.text:00429373 ; ---------------------------------------------------------------------------
.text:00429373
.text:00429373 loc_429373:                             ; CODE XREF: sub_4291F0+153↑j
.text:00429373                 mov     eax, [ebp+var_30]
.text:00429376                 cmp     [ebp+var_3C], eax
.text:00429379                 jbe     short loc_429345
.text:0042937B
.text:0042937B loc_42937B:                             ; CODE XREF: sub_4291F0+14F↑j
.text:0042937B                 mov     ecx, [ebp+var_3C]
.text:0042937E                 sub     ecx, esi
.text:00429380                 sbb     edx, [ebp+var_2C]
.text:00429383                 mov     [ebp+var_3C], ecx
.text:00429386                 jmp     short loc_429345
.text:00429388 ; ---------------------------------------------------------------------------
.text:00429388
.text:00429388 loc_429388:                             ; CODE XREF: sub_4291F0+34↑j
.text:00429388                 neg     eax
.text:0042938A                 adc     edx, 0
.text:0042938D                 neg     edx
.text:0042938F                 jmp     loc_42922A
.text:00429394 ; ---------------------------------------------------------------------------
.text:00429394
.text:00429394 loc_429394:                             ; CODE XREF: sub_4291F0+2C↑j
.text:00429394                 mov     [ebp+var_1C], 0FFFFFFFFh
.text:0042939B                 neg     ecx
.text:0042939D                 adc     ebx, 0
.text:004293A0                 neg     ebx
.text:004293A2                 jmp     loc_429222
.text:004293A2 sub_4291F0      endp
.text:004293A2
.text:004293A2 ; ---------------------------------------------------------------------------
.text:004293A7                 align 10h
.text:004293B0
.text:004293B0 ; =============== S U B R O U T I N E =======================================
.text:004293B0
.text:004293B0 ; Attributes: bp-based frame
.text:004293B0
.text:004293B0 sub_4293B0      proc near               ; CODE XREF: sub_411D30+58↑p
.text:004293B0                                         ; sub_411D30+AA↑p
.text:004293B0
.text:004293B0 var_2C          = dword ptr -2Ch
.text:004293B0 var_28          = dword ptr -28h
.text:004293B0 var_24          = dword ptr -24h
.text:004293B0 var_20          = dword ptr -20h
.text:004293B0 var_1C          = dword ptr -1Ch
.text:004293B0 var_14          = dword ptr -14h
.text:004293B0 arg_0           = dword ptr  8
.text:004293B0 arg_4           = dword ptr  0Ch
.text:004293B0 arg_8           = dword ptr  10h
.text:004293B0 arg_C           = dword ptr  14h
.text:004293B0
.text:004293B0                 push    ebp
.text:004293B1                 mov     ebp, esp
.text:004293B3                 push    edi
.text:004293B4                 push    esi
.text:004293B5                 push    ebx
.text:004293B6                 sub     esp, 24h
.text:004293B9                 mov     ebx, [ebp+arg_4]
.text:004293BC                 mov     [ebp+var_20], 0
.text:004293C3                 mov     ecx, [ebp+arg_0]
.text:004293C6                 mov     eax, [ebp+arg_8]
.text:004293C9                 mov     [ebp+var_1C], 0
.text:004293D0                 test    ebx, ebx
.text:004293D2                 mov     edx, [ebp+arg_C]
.text:004293D5                 mov     [ebp+var_14], 0
.text:004293DC                 js      loc_4294F0
.text:004293E2
.text:004293E2 loc_4293E2:                             ; CODE XREF: sub_4293B0+14E↓j
.text:004293E2                 test    edx, edx
.text:004293E4                 js      loc_4294E0
.text:004293EA
.text:004293EA loc_4293EA:                             ; CODE XREF: sub_4293B0+13A↓j
.text:004293EA                 mov     [ebp+var_24], ecx
.text:004293ED                 test    edx, edx
.text:004293EF                 mov     esi, eax
.text:004293F1                 jnz     short loc_429446
.text:004293F3                 cmp     eax, ebx
.text:004293F5                 jbe     short loc_429424
.text:004293F7                 mov     eax, ecx
.text:004293F9                 mov     edx, ebx
.text:004293FB                 div     esi
.text:004293FD                 mov     edi, eax
.text:004293FF                 nop
.text:00429400
.text:00429400 loc_429400:                             ; CODE XREF: sub_4293B0+9C↓j
.text:00429400                                         ; sub_4293B0+B4↓j ...
.text:00429400                 xor     ecx, ecx
.text:00429402
.text:00429402 loc_429402:                             ; CODE XREF: sub_4293B0+94↓j
.text:00429402                 mov     [ebp+var_1C], ecx
.text:00429405                 mov     ecx, [ebp+var_14]
.text:00429408                 mov     [ebp+var_20], edi
.text:0042940B                 mov     eax, [ebp+var_20]
.text:0042940E                 mov     edx, [ebp+var_1C]
.text:00429411                 test    ecx, ecx
.text:00429413                 jz      short loc_42941C
.text:00429415                 neg     eax
.text:00429417                 adc     edx, 0
.text:0042941A                 neg     edx
.text:0042941C
.text:0042941C loc_42941C:                             ; CODE XREF: sub_4293B0+63↑j
.text:0042941C                 add     esp, 24h
.text:0042941F                 pop     ebx
.text:00429420                 pop     esi
.text:00429421                 pop     edi
.text:00429422                 pop     ebp
.text:00429423                 retn
.text:00429424 ; ---------------------------------------------------------------------------
.text:00429424
.text:00429424 loc_429424:                             ; CODE XREF: sub_4293B0+45↑j
.text:00429424                 test    eax, eax
.text:00429426                 jnz     short loc_429435
.text:00429428                 mov     eax, 1
.text:0042942D                 xor     ecx, ecx
.text:0042942F                 xor     edx, edx
.text:00429431                 div     ecx
.text:00429433                 mov     esi, eax
.text:00429435
.text:00429435 loc_429435:                             ; CODE XREF: sub_4293B0+76↑j
.text:00429435                 mov     eax, ebx
.text:00429437                 xor     edx, edx
.text:00429439                 div     esi
.text:0042943B                 mov     ecx, eax
.text:0042943D                 mov     eax, [ebp+var_24]
.text:00429440                 div     esi
.text:00429442                 mov     edi, eax
.text:00429444                 jmp     short loc_429402
.text:00429446 ; ---------------------------------------------------------------------------
.text:00429446
.text:00429446 loc_429446:                             ; CODE XREF: sub_4293B0+41↑j
.text:00429446                 cmp     edx, ebx
.text:00429448                 jbe     short loc_429450
.text:0042944A                 xor     edi, edi
.text:0042944C                 jmp     short loc_429400
.text:0042944C ; ---------------------------------------------------------------------------
.text:0042944E                 align 10h
.text:00429450
.text:00429450 loc_429450:                             ; CODE XREF: sub_4293B0+98↑j
.text:00429450                 bsr     eax, edx
.text:00429453                 xor     eax, 1Fh
.text:00429456                 mov     [ebp+var_28], eax
.text:00429459                 jnz     short loc_429470
.text:0042945B                 cmp     ebx, edx
.text:0042945D                 ja      short loc_429466
.text:0042945F                 xor     edi, edi
.text:00429461                 cmp     [ebp+var_24], esi
.text:00429464                 jb      short loc_429400
.text:00429466
.text:00429466 loc_429466:                             ; CODE XREF: sub_4293B0+AD↑j
.text:00429466                 mov     edi, 1
.text:0042946B                 jmp     short loc_429400
.text:0042946B ; ---------------------------------------------------------------------------
.text:0042946D                 align 10h
.text:00429470
.text:00429470 loc_429470:                             ; CODE XREF: sub_4293B0+A9↑j
.text:00429470                 mov     eax, [ebp+var_28]
.text:00429473                 mov     ecx, 20h ; ' '
.text:00429478                 sub     ecx, eax
.text:0042947A                 mov     [ebp+var_2C], ecx
.text:0042947D                 mov     eax, esi
.text:0042947F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00429483                 shl     edx, cl
.text:00429485                 mov     edi, edx
.text:00429487                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0042948B                 mov     edx, ebx
.text:0042948D                 shr     eax, cl
.text:0042948F                 movzx   ecx, byte ptr [ebp+var_28]
.text:00429493                 or      edi, eax
.text:00429495                 mov     eax, [ebp+var_24]
.text:00429498                 shl     esi, cl
.text:0042949A                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0042949E                 shr     edx, cl
.text:004294A0                 movzx   ecx, byte ptr [ebp+var_28]
.text:004294A4                 shl     ebx, cl
.text:004294A6                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004294AA                 shr     eax, cl
.text:004294AC                 or      ebx, eax
.text:004294AE                 movzx   ecx, byte ptr [ebp+var_28]
.text:004294B2                 mov     eax, ebx
.text:004294B4                 div     edi
.text:004294B6                 mov     ebx, edx
.text:004294B8                 mov     edi, eax
.text:004294BA                 shl     [ebp+var_24], cl
.text:004294BD                 mul     esi
.text:004294BF                 cmp     edx, ebx
.text:004294C1                 ja      short loc_4294D4
.text:004294C3                 cmp     edx, ebx
.text:004294C5                 jnz     loc_429400
.text:004294CB                 cmp     eax, [ebp+var_24]
.text:004294CE                 jbe     loc_429400
.text:004294D4
.text:004294D4 loc_4294D4:                             ; CODE XREF: sub_4293B0+111↑j
.text:004294D4                 dec     edi
.text:004294D5                 jmp     loc_429400
.text:004294D5 ; ---------------------------------------------------------------------------
.text:004294DA                 align 10h
.text:004294E0
.text:004294E0 loc_4294E0:                             ; CODE XREF: sub_4293B0+34↑j
.text:004294E0                 not     [ebp+var_14]
.text:004294E3                 neg     eax
.text:004294E5                 adc     edx, 0
.text:004294E8                 neg     edx
.text:004294EA                 jmp     loc_4293EA
.text:004294EA ; ---------------------------------------------------------------------------
.text:004294EF                 align 10h
.text:004294F0
.text:004294F0 loc_4294F0:                             ; CODE XREF: sub_4293B0+2C↑j
.text:004294F0                 mov     [ebp+var_14], 0FFFFFFFFh
.text:004294F7                 neg     ecx
.text:004294F9                 adc     ebx, 0
.text:004294FC                 neg     ebx
.text:004294FE                 jmp     loc_4293E2
.text:004294FE sub_4293B0      endp
.text:004294FE
.text:004294FE ; ---------------------------------------------------------------------------
.text:00429503                 align 10h
.text:00429510
.text:00429510 ; =============== S U B R O U T I N E =======================================
.text:00429510
.text:00429510 ; Attributes: bp-based frame
.text:00429510
.text:00429510 sub_429510      proc near               ; CODE XREF: sub_412370+58↑p
.text:00429510                                         ; sub_4126F0+157↑p ...
.text:00429510
.text:00429510 var_24          = dword ptr -24h
.text:00429510 var_20          = dword ptr -20h
.text:00429510 var_1C          = dword ptr -1Ch
.text:00429510 var_18          = dword ptr -18h
.text:00429510 var_14          = dword ptr -14h
.text:00429510 var_C           = dword ptr -0Ch
.text:00429510 var_8           = dword ptr -8
.text:00429510 var_4           = dword ptr -4
.text:00429510 arg_0           = dword ptr  8
.text:00429510 arg_4           = dword ptr  0Ch
.text:00429510 arg_8           = dword ptr  10h
.text:00429510 arg_C           = dword ptr  14h
.text:00429510
.text:00429510                 push    ebp
.text:00429511                 mov     ebp, esp
.text:00429513                 sub     esp, 28h
.text:00429516                 mov     [ebp+var_C], ebx
.text:00429519                 mov     edx, [ebp+arg_C]
.text:0042951C                 mov     ecx, [ebp+arg_0]
.text:0042951F                 mov     [ebp+var_8], esi
.text:00429522                 mov     eax, [ebp+arg_8]
.text:00429525                 test    edx, edx
.text:00429527                 mov     [ebp+var_4], edi
.text:0042952A                 mov     ebx, [ebp+arg_4]
.text:0042952D                 mov     esi, eax
.text:0042952F                 mov     [ebp+var_18], 0
.text:00429536                 mov     [ebp+var_14], 0
.text:0042953D                 mov     [ebp+var_1C], ecx
.text:00429540                 jnz     short loc_429592
.text:00429542                 cmp     eax, ebx
.text:00429544                 jbe     short loc_429570
.text:00429546                 mov     eax, ecx
.text:00429548                 mov     edx, ebx
.text:0042954A                 div     esi
.text:0042954C                 mov     edi, eax
.text:0042954E                 mov     esi, esi
.text:00429550
.text:00429550 loc_429550:                             ; CODE XREF: sub_429510+88↓j
.text:00429550                                         ; sub_429510+A4↓j ...
.text:00429550                 xor     ecx, ecx
.text:00429552
.text:00429552 loc_429552:                             ; CODE XREF: sub_429510+80↓j
.text:00429552                 mov     [ebp+var_18], edi
.text:00429555                 mov     ebx, [ebp+var_C]
.text:00429558                 mov     eax, [ebp+var_18]
.text:0042955B                 mov     [ebp+var_14], ecx
.text:0042955E                 mov     esi, [ebp+var_8]
.text:00429561                 mov     edx, [ebp+var_14]
.text:00429564                 mov     edi, [ebp+var_4]
.text:00429567                 mov     esp, ebp
.text:00429569                 pop     ebp
.text:0042956A                 retn
.text:0042956A ; ---------------------------------------------------------------------------
.text:0042956B                 align 10h
.text:00429570
.text:00429570 loc_429570:                             ; CODE XREF: sub_429510+34↑j
.text:00429570                 test    eax, eax
.text:00429572                 jnz     short loc_429581
.text:00429574                 mov     eax, 1
.text:00429579                 xor     ecx, ecx
.text:0042957B                 xor     edx, edx
.text:0042957D                 div     ecx
.text:0042957F                 mov     esi, eax
.text:00429581
.text:00429581 loc_429581:                             ; CODE XREF: sub_429510+62↑j
.text:00429581                 mov     eax, ebx
.text:00429583                 xor     edx, edx
.text:00429585                 div     esi
.text:00429587                 mov     ecx, eax
.text:00429589                 mov     eax, [ebp+var_1C]
.text:0042958C                 div     esi
.text:0042958E                 mov     edi, eax
.text:00429590                 jmp     short loc_429552
.text:00429592 ; ---------------------------------------------------------------------------
.text:00429592
.text:00429592 loc_429592:                             ; CODE XREF: sub_429510+30↑j
.text:00429592                 cmp     edx, ebx
.text:00429594                 jbe     short loc_4295A0
.text:00429596                 xor     edi, edi
.text:00429598                 jmp     short loc_429550
.text:00429598 ; ---------------------------------------------------------------------------
.text:0042959A                 align 10h
.text:004295A0
.text:004295A0 loc_4295A0:                             ; CODE XREF: sub_429510+84↑j
.text:004295A0                 bsr     eax, edx
.text:004295A3                 xor     eax, 1Fh
.text:004295A6                 mov     [ebp+var_20], eax
.text:004295A9                 jnz     short loc_4295C0
.text:004295AB                 cmp     ebx, edx
.text:004295AD                 ja      short loc_4295B6
.text:004295AF                 xor     edi, edi
.text:004295B1                 cmp     [ebp+var_1C], esi
.text:004295B4                 jb      short loc_429550
.text:004295B6
.text:004295B6 loc_4295B6:                             ; CODE XREF: sub_429510+9D↑j
.text:004295B6                 mov     edi, 1
.text:004295BB                 jmp     short loc_429550
.text:004295BB ; ---------------------------------------------------------------------------
.text:004295BD                 align 10h
.text:004295C0
.text:004295C0 loc_4295C0:                             ; CODE XREF: sub_429510+99↑j
.text:004295C0                 mov     eax, [ebp+var_20]
.text:004295C3                 mov     ecx, 20h ; ' '
.text:004295C8                 sub     ecx, eax
.text:004295CA                 mov     [ebp+var_24], ecx
.text:004295CD                 mov     eax, esi
.text:004295CF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004295D3                 shl     edx, cl
.text:004295D5                 mov     edi, edx
.text:004295D7                 movzx   ecx, byte ptr [ebp+var_24]
.text:004295DB                 mov     edx, ebx
.text:004295DD                 shr     eax, cl
.text:004295DF                 movzx   ecx, byte ptr [ebp+var_20]
.text:004295E3                 or      edi, eax
.text:004295E5                 mov     eax, [ebp+var_1C]
.text:004295E8                 shl     esi, cl
.text:004295EA                 movzx   ecx, byte ptr [ebp+var_24]
.text:004295EE                 shr     edx, cl
.text:004295F0                 movzx   ecx, byte ptr [ebp+var_20]
.text:004295F4                 shl     ebx, cl
.text:004295F6                 movzx   ecx, byte ptr [ebp+var_24]
.text:004295FA                 shr     eax, cl
.text:004295FC                 or      ebx, eax
.text:004295FE                 movzx   ecx, byte ptr [ebp+var_20]
.text:00429602                 mov     eax, ebx
.text:00429604                 div     edi
.text:00429606                 mov     ebx, edx
.text:00429608                 mov     edi, eax
.text:0042960A                 shl     [ebp+var_1C], cl
.text:0042960D                 mul     esi
.text:0042960F                 cmp     edx, ebx
.text:00429611                 ja      short loc_429624
.text:00429613                 cmp     edx, ebx
.text:00429615                 jnz     loc_429550
.text:0042961B                 cmp     eax, [ebp+var_1C]
.text:0042961E                 jbe     loc_429550
.text:00429624
.text:00429624 loc_429624:                             ; CODE XREF: sub_429510+101↑j
.text:00429624                 dec     edi
.text:00429625                 jmp     loc_429550
.text:00429625 sub_429510      endp
.text:00429625
.text:00429625 ; ---------------------------------------------------------------------------
.text:0042962A                 align 10h
.text:00429630 flt_429630      dd 2.3283064e-10        ; DATA XREF: sub_429640+2B↓r
.text:00429634 flt_429634      dd 1.8446744e19         ; DATA XREF: sub_429640:loc_4296D4↓r
.text:00429638                 align 10h
.text:00429640
.text:00429640 ; =============== S U B R O U T I N E =======================================
.text:00429640
.text:00429640 ; Attributes: bp-based frame
.text:00429640
.text:00429640 ; int __cdecl sub_429640(_TBYTE)
.text:00429640 sub_429640      proc near               ; CODE XREF: sub_4126F0+250↑p
.text:00429640                                         ; sub_4126F0+52C↑p ...
.text:00429640
.text:00429640 var_20          = qword ptr -20h
.text:00429640 var_18          = qword ptr -18h
.text:00429640 var_C           = word ptr -0Ch
.text:00429640 var_A           = word ptr -0Ah
.text:00429640 var_4           = dword ptr -4
.text:00429640 arg_0           = tbyte ptr  8
.text:00429640
.text:00429640                 push    ebp
.text:00429641                 fldz
.text:00429643                 mov     ebp, esp
.text:00429645                 sub     esp, 18h
.text:00429648                 fld     [ebp+arg_0]
.text:0042964B                 fxch    st(1)
.text:0042964D                 mov     [ebp+var_4], ebx
.text:00429650                 fucom   st(1)
.text:00429652                 fnstsw  ax
.text:00429654                 sahf
.text:00429655                 jbe     short loc_429666
.text:00429657                 fstp    st
.text:00429659                 fstp    st
.text:0042965B                 xor     eax, eax
.text:0042965D                 xor     edx, edx
.text:0042965F
.text:0042965F loc_42965F:                             ; CODE XREF: sub_429640+7A↓j
.text:0042965F                 mov     ebx, [ebp+var_4]
.text:00429662                 mov     esp, ebp
.text:00429664                 pop     ebp
.text:00429665                 retn
.text:00429666 ; ---------------------------------------------------------------------------
.text:00429666
.text:00429666 loc_429666:                             ; CODE XREF: sub_429640+15↑j
.text:00429666                 fnstcw  [ebp+var_A]
.text:00429669                 xor     ecx, ecx
.text:0042966B                 fld     ds:flt_429630
.text:00429671                 movzx   eax, [ebp+var_A]
.text:00429675                 fmul    st, st(2)
.text:00429677                 or      ax, 0C00h
.text:0042967B                 mov     [ebp+var_C], ax
.text:0042967F                 fldcw   [ebp+var_C]
.text:00429682                 fistp   [ebp+var_18]
.text:00429685                 fldcw   [ebp+var_A]
.text:00429688                 mov     eax, dword ptr [ebp+var_18]
.text:0042968B                 mov     ebx, eax
.text:0042968D                 push    eax
.text:0042968E                 push    ecx
.text:0042968F                 fild    [esp+20h+var_20]
.text:00429692                 add     esp, 8
.text:00429695                 test    eax, eax
.text:00429697                 js      short loc_4296D4
.text:00429699
.text:00429699 loc_429699:                             ; CODE XREF: sub_429640+9A↓j
.text:00429699                 fsubp   st(2), st
.text:0042969B                 fucomp  st(1)
.text:0042969D                 fnstsw  ax
.text:0042969F                 sahf
.text:004296A0                 jbe     short loc_4296C0
.text:004296A2                 fchs
.text:004296A4                 xor     edx, edx
.text:004296A6                 fldcw   [ebp+var_C]
.text:004296A9                 fistp   [ebp+var_18]
.text:004296AC                 fldcw   [ebp+var_A]
.text:004296AF                 mov     eax, dword ptr [ebp+var_18]
.text:004296B2                 sub     ecx, eax
.text:004296B4                 sbb     ebx, edx
.text:004296B6
.text:004296B6 loc_4296B6:                             ; CODE XREF: sub_429640+92↓j
.text:004296B6                 mov     eax, ecx
.text:004296B8                 mov     edx, ebx
.text:004296BA                 jmp     short loc_42965F
.text:004296BA ; ---------------------------------------------------------------------------
.text:004296BC                 align 10h
.text:004296C0
.text:004296C0 loc_4296C0:                             ; CODE XREF: sub_429640+60↑j
.text:004296C0                 fldcw   [ebp+var_C]
.text:004296C3                 fistp   [ebp+var_18]
.text:004296C6                 fldcw   [ebp+var_A]
.text:004296C9                 xor     edx, edx
.text:004296CB                 mov     eax, dword ptr [ebp+var_18]
.text:004296CE                 add     ecx, eax
.text:004296D0                 adc     ebx, edx
.text:004296D2                 jmp     short loc_4296B6
.text:004296D4 ; ---------------------------------------------------------------------------
.text:004296D4
.text:004296D4 loc_4296D4:                             ; CODE XREF: sub_429640+57↑j
.text:004296D4                 fadd    ds:flt_429634
.text:004296DA                 jmp     short loc_429699
.text:004296DA sub_429640      endp
.text:004296DA
.text:004296DA ; ---------------------------------------------------------------------------
.text:004296DC                 align 10h
.text:004296E0
.text:004296E0 ; =============== S U B R O U T I N E =======================================
.text:004296E0
.text:004296E0 ; Attributes: thunk
.text:004296E0
.text:004296E0 ; int __cdecl isatty(int FileHandle)
.text:004296E0 _isatty         proc near               ; CODE XREF: sub_4025F0:loc_402633↑p
.text:004296E0                                         ; sub_4025F0+91D↑p ...
.text:004296E0
.text:004296E0 FileHandle      = dword ptr  4
.text:004296E0
.text:004296E0                 jmp     ds:__imp__isatty
.text:004296E0 _isatty         endp
.text:004296E0
.text:004296E0 ; ---------------------------------------------------------------------------
.text:004296E6                 align 10h
.text:004296F0
.text:004296F0 ; =============== S U B R O U T I N E =======================================
.text:004296F0
.text:004296F0 ; Attributes: thunk
.text:004296F0
.text:004296F0 ; void __cdecl tzset()
.text:004296F0 _tzset          proc near               ; CODE XREF: sub_40A870:loc_40C790↑p
.text:004296F0                 jmp     ds:__imp__tzset
.text:004296F0 _tzset          endp
.text:004296F0
.text:004296F0 ; ---------------------------------------------------------------------------
.text:004296F6                 align 10h
.text:00429700
.text:00429700 ; =============== S U B R O U T I N E =======================================
.text:00429700
.text:00429700 ; Attributes: thunk
.text:00429700
.text:00429700 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00429700 _stricmp        proc near               ; CODE XREF: sub_416FA0+46F↑p
.text:00429700                                         ; sub_4193F0+2E↑p ...
.text:00429700
.text:00429700 String1         = dword ptr  4
.text:00429700 String2         = dword ptr  8
.text:00429700
.text:00429700                 jmp     ds:__imp__stricmp
.text:00429700 _stricmp        endp
.text:00429700
.text:00429700 ; ---------------------------------------------------------------------------
.text:00429706                 align 10h
.text:00429710
.text:00429710 ; =============== S U B R O U T I N E =======================================
.text:00429710
.text:00429710 ; Attributes: thunk
.text:00429710
.text:00429710 ; char *__cdecl strdup(const char *String)
.text:00429710 _strdup         proc near               ; CODE XREF: sub_419020+101↑p
.text:00429710                                         ; .text:0041928A↑p ...
.text:00429710
.text:00429710 String          = dword ptr  4
.text:00429710
.text:00429710                 jmp     ds:__imp__strdup
.text:00429710 _strdup         endp
.text:00429710
.text:00429710 ; ---------------------------------------------------------------------------
.text:00429716                 align 10h
.text:00429720
.text:00429720 ; =============== S U B R O U T I N E =======================================
.text:00429720
.text:00429720 ; Attributes: thunk
.text:00429720
.text:00429720 ; int __cdecl getpid()
.text:00429720 _getpid         proc near               ; CODE XREF: sub_4270C0+84↑p
.text:00429720                 jmp     ds:__imp__getpid
.text:00429720 _getpid         endp
.text:00429720
.text:00429720 ; ---------------------------------------------------------------------------
.text:00429726                 align 10h
.text:00429730
.text:00429730 ; =============== S U B R O U T I N E =======================================
.text:00429730
.text:00429730 ; Attributes: thunk
.text:00429730
.text:00429730 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00429730 _chmod          proc near               ; CODE XREF: sub_4274F0+41↑j
.text:00429730
.text:00429730 FileName        = dword ptr  4
.text:00429730 AccessMode      = dword ptr  8
.text:00429730
.text:00429730                 jmp     ds:__imp__chmod
.text:00429730 _chmod          endp
.text:00429730
.text:00429730 ; ---------------------------------------------------------------------------
.text:00429736                 align 10h
.text:00429740
.text:00429740 ; =============== S U B R O U T I N E =======================================
.text:00429740
.text:00429740
.text:00429740 sub_429740      proc near               ; CODE XREF: sub_40FE80+125↑p
.text:00429740                                         ; sub_40FE80+1C1↑p
.text:00429740
.text:00429740 var_8           = dword ptr -8
.text:00429740 var_4           = dword ptr -4
.text:00429740 arg_0           = dword ptr  4
.text:00429740 arg_4           = dword ptr  8
.text:00429740 arg_8           = dword ptr  0Ch
.text:00429740
.text:00429740                 sub     esp, 8
.text:00429743                 mov     ecx, [esp+8+arg_4]
.text:00429747                 mov     [esp+8+var_8], ebx
.text:0042974A                 mov     ebx, [esp+8+arg_0]
.text:0042974E                 mov     [esp+8+var_4], esi
.text:00429752                 mov     edx, [esp+8+arg_8]
.text:00429756                 test    ebx, ebx
.text:00429758                 mov     esi, ebx
.text:0042975A                 jz      short loc_42977F
.text:0042975C                 test    ecx, ecx
.text:0042975E                 jz      short loc_42977F
.text:00429760                 test    edx, edx
.text:00429762                 jz      short loc_42977F
.text:00429764                 lea     esi, [esi+0]
.text:0042976A                 lea     edi, [edi+0]
.text:00429770
.text:00429770 loc_429770:                             ; CODE XREF: sub_429740+3D↓j
.text:00429770                 movzx   eax, word ptr [ecx]
.text:00429773                 add     ecx, 2
.text:00429776                 mov     [ebx], ax
.text:00429779                 add     ebx, 2
.text:0042977C                 dec     edx
.text:0042977D                 jnz     short loc_429770
.text:0042977F
.text:0042977F loc_42977F:                             ; CODE XREF: sub_429740+1A↑j
.text:0042977F                                         ; sub_429740+1E↑j ...
.text:0042977F                 mov     eax, esi
.text:00429781                 mov     ebx, [esp+8+var_8]
.text:00429784                 mov     esi, [esp+8+var_4]
.text:00429788                 add     esp, 8
.text:0042978B                 retn
.text:0042978B sub_429740      endp
.text:0042978B
.text:0042978B ; ---------------------------------------------------------------------------
.text:0042978C                 align 10h
.text:00429790
.text:00429790 ; =============== S U B R O U T I N E =======================================
.text:00429790
.text:00429790
.text:00429790 sub_429790      proc near               ; CODE XREF: sub_40F2C0+2A7↑p
.text:00429790                                         ; sub_40F2C0+2DE↑p
.text:00429790
.text:00429790 arg_0           = dword ptr  4
.text:00429790 arg_4           = word ptr  8
.text:00429790 arg_8           = dword ptr  0Ch
.text:00429790
.text:00429790                 movzx   ecx, [esp+arg_4]
.text:00429795                 mov     eax, [esp+arg_0]
.text:00429799                 mov     edx, [esp+arg_8]
.text:0042979D                 test    eax, eax
.text:0042979F                 jz      short loc_4297BB
.text:004297A1                 test    edx, edx
.text:004297A3                 jz      short loc_4297BB
.text:004297A5                 lea     esi, [esi+0]
.text:004297A9                 lea     edi, [edi+0]
.text:004297B0
.text:004297B0 loc_4297B0:                             ; CODE XREF: sub_429790+29↓j
.text:004297B0                 cmp     [eax], cx
.text:004297B3                 jz      short locret_4297BD
.text:004297B5                 add     eax, 2
.text:004297B8                 dec     edx
.text:004297B9                 jnz     short loc_4297B0
.text:004297BB
.text:004297BB loc_4297BB:                             ; CODE XREF: sub_429790+F↑j
.text:004297BB                                         ; sub_429790+13↑j
.text:004297BB                 xor     eax, eax
.text:004297BD
.text:004297BD locret_4297BD:                          ; CODE XREF: sub_429790+23↑j
.text:004297BD                 retn
.text:004297BD sub_429790      endp
.text:004297BD
.text:004297BD ; ---------------------------------------------------------------------------
.text:004297BE                 align 10h
.text:004297C0
.text:004297C0 ; =============== S U B R O U T I N E =======================================
.text:004297C0
.text:004297C0 ; Attributes: info_from_lumina
.text:004297C0
.text:004297C0 ; unsigned __int64 __cdecl strtoull(const char *String, char **EndPtr, int Radix)
.text:004297C0 _strtoull       proc near               ; CODE XREF: sub_4154F0+AD↑p
.text:004297C0
.text:004297C0 C               = dword ptr -3Ch
.text:004297C0 Type            = dword ptr -38h
.text:004297C0 var_34          = dword ptr -34h
.text:004297C0 var_30          = dword ptr -30h
.text:004297C0 var_2C          = dword ptr -2Ch
.text:004297C0 var_28          = dword ptr -28h
.text:004297C0 var_24          = dword ptr -24h
.text:004297C0 var_20          = dword ptr -20h
.text:004297C0 var_1C          = dword ptr -1Ch
.text:004297C0 var_18          = dword ptr -18h
.text:004297C0 String          = dword ptr  4
.text:004297C0 EndPtr          = dword ptr  8
.text:004297C0 Radix           = dword ptr  0Ch
.text:004297C0
.text:004297C0                 push    ebp
.text:004297C1                 push    edi
.text:004297C2                 push    esi
.text:004297C3                 push    ebx
.text:004297C4                 sub     esp, 2Ch
.text:004297C7                 mov     edx, [esp+3Ch+EndPtr]
.text:004297CB                 test    edx, edx
.text:004297CD                 jz      short loc_4297D9
.text:004297CF                 mov     eax, [esp+3Ch+String]
.text:004297D3                 mov     ecx, [esp+3Ch+EndPtr]
.text:004297D7                 mov     [ecx], eax
.text:004297D9
.text:004297D9 loc_4297D9:                             ; CODE XREF: _strtoull+D↑j
.text:004297D9                 mov     edx, [esp+3Ch+Radix]
.text:004297DD                 test    edx, edx
.text:004297DF                 js      short loc_4297EF
.text:004297E1                 cmp     [esp+3Ch+Radix], 1
.text:004297E6                 jz      short loc_4297EF
.text:004297E8                 cmp     [esp+3Ch+Radix], 24h ; '$'
.text:004297ED                 jle     short loc_429806
.text:004297EF
.text:004297EF loc_4297EF:                             ; CODE XREF: _strtoull+1F↑j
.text:004297EF                                         ; _strtoull+26↑j
.text:004297EF                 call    _errno
.text:004297F4                 mov     dword ptr [eax], 21h ; '!'
.text:004297FA
.text:004297FA loc_4297FA:                             ; CODE XREF: _strtoull+FF↓j
.text:004297FA                                         ; _strtoull+109↓j
.text:004297FA                 xor     eax, eax
.text:004297FC                 xor     edx, edx
.text:004297FE
.text:004297FE loc_4297FE:                             ; CODE XREF: _strtoull+244↓j
.text:004297FE                                         ; _strtoull+251↓j ...
.text:004297FE                 add     esp, 2Ch
.text:00429801                 pop     ebx
.text:00429802                 pop     esi
.text:00429803                 pop     edi
.text:00429804                 pop     ebp
.text:00429805                 retn
.text:00429806 ; ---------------------------------------------------------------------------
.text:00429806
.text:00429806 loc_429806:                             ; CODE XREF: _strtoull+2D↑j
.text:00429806                 mov     ecx, ds:__mb_cur_max
.text:0042980C                 lea     esi, [esi+0]
.text:00429810
.text:00429810 loc_429810:                             ; CODE XREF: _strtoull+7E↓j
.text:00429810                 cmp     dword ptr [ecx], 1
.text:00429813                 mov     esi, [esp+3Ch+String]
.text:00429817                 movsx   edx, byte ptr [esi]
.text:0042981A                 jz      loc_429BF2
.text:00429820                 mov     [esp+3Ch+Type], 8 ; Type
.text:00429828                 mov     [esp+3Ch+C], edx ; C
.text:0042982B                 call    _isctype
.text:00429830                 mov     ecx, ds:__mb_cur_max
.text:00429836
.text:00429836 loc_429836:                             ; CODE XREF: _strtoull+445↓j
.text:00429836                 test    eax, eax
.text:00429838                 jz      short loc_429840
.text:0042983A                 inc     [esp+3Ch+String]
.text:0042983E                 jmp     short loc_429810
.text:00429840 ; ---------------------------------------------------------------------------
.text:00429840
.text:00429840 loc_429840:                             ; CODE XREF: _strtoull+78↑j
.text:00429840                 mov     esi, [esp+3Ch+String]
.text:00429844                 xor     ebx, ebx
.text:00429846                 movzx   edx, byte ptr [esi]
.text:00429849                 cmp     dl, 2Dh ; '-'
.text:0042984C                 setz    bl
.text:0042984F                 test    ebx, ebx
.text:00429851                 mov     [esp+3Ch+var_20], ebx
.text:00429855                 jnz     loc_429BE2
.text:0042985B                 cmp     dl, 2Bh ; '+'
.text:0042985E                 jz      loc_429BE2
.text:00429864
.text:00429864 loc_429864:                             ; CODE XREF: _strtoull+42D↓j
.text:00429864                 mov     ebp, [esp+3Ch+Radix]
.text:00429868                 test    ebp, ebp
.text:0042986A                 jnz     short loc_42987D
.text:0042986C                 cmp     dl, 30h ; '0'
.text:0042986F                 jz      loc_429BB9
.text:00429875                 mov     [esp+3Ch+Radix], 0Ah
.text:0042987D
.text:0042987D loc_42987D:                             ; CODE XREF: _strtoull+AA↑j
.text:0042987D                                         ; _strtoull+40F↓j ...
.text:0042987D                 cmp     [esp+3Ch+Radix], 10h
.text:00429882                 jz      loc_429B8B
.text:00429888
.text:00429888 loc_429888:                             ; CODE XREF: _strtoull+3CE↓j
.text:00429888                                         ; _strtoull+3E2↓j ...
.text:00429888                 cmp     dword ptr [ecx], 1
.text:0042988B                 movsx   ebx, dl
.text:0042988E                 jz      loc_429B73
.text:00429894                 mov     [esp+3Ch+Type], 4 ; Type
.text:0042989C                 mov     [esp+3Ch+C], ebx ; C
.text:0042989F                 call    _isctype
.text:004298A4                 mov     esi, [esp+3Ch+String]
.text:004298A8                 movzx   edx, byte ptr [esi]
.text:004298AB
.text:004298AB loc_4298AB:                             ; CODE XREF: _strtoull+3C6↓j
.text:004298AB                 test    eax, eax
.text:004298AD                 jz      loc_429ADC
.text:004298B3                 movsx   eax, dl
.text:004298B6                 sub     eax, 30h ; '0'
.text:004298B9
.text:004298B9 loc_4298B9:                             ; CODE XREF: _strtoull+34B↓j
.text:004298B9                                         ; _strtoull+37C↓j ...
.text:004298B9                 inc     [esp+3Ch+String]
.text:004298BD                 test    eax, eax
.text:004298BF                 js      loc_4297FA
.text:004298C5                 cmp     eax, [esp+3Ch+Radix]
.text:004298C9                 jge     loc_4297FA
.text:004298CF                 mov     [esp+3Ch+var_1C], eax
.text:004298D3                 mov     edx, eax
.text:004298D5                 sar     edx, 1Fh
.text:004298D8                 mov     [esp+3Ch+var_18], edx
.text:004298DC                 mov     [esp+3Ch+var_24], 0
.text:004298E4                 lea     esi, [esi+0]
.text:004298EA                 lea     edi, [edi+0]
.text:004298F0
.text:004298F0 loc_4298F0:                             ; CODE XREF: _strtoull+20C↓j
.text:004298F0                 mov     ebp, [esp+3Ch+String]
.text:004298F4                 mov     ebx, ds:__mb_cur_max
.text:004298FA                 movzx   edx, byte ptr [ebp+0]
.text:004298FE                 cmp     dword ptr [ebx], 1
.text:00429901                 movsx   ecx, dl
.text:00429904                 jz      loc_429AC5
.text:0042990A                 mov     [esp+3Ch+C], ecx ; C
.text:0042990D                 mov     [esp+3Ch+Type], 4 ; Type
.text:00429915                 call    _isctype
.text:0042991A                 mov     ecx, [esp+3Ch+String]
.text:0042991E                 movzx   edx, byte ptr [ecx]
.text:00429921
.text:00429921 loc_429921:                             ; CODE XREF: _strtoull+317↓j
.text:00429921                 test    eax, eax
.text:00429923                 jz      loc_429A30
.text:00429929                 movsx   edi, dl
.text:0042992C                 lea     ebp, [edi-30h]
.text:0042992F
.text:0042992F loc_42992F:                             ; CODE XREF: _strtoull+2A3↓j
.text:0042992F                 test    ebp, ebp
.text:00429931                 js      loc_4299DB
.text:00429937                 cmp     ebp, [esp+3Ch+Radix]
.text:0042993B                 jge     loc_4299DB
.text:00429941                 mov     [esp+3Ch+C], 0FFFFFFFFh
.text:00429948                 mov     eax, [esp+3Ch+Radix]
.text:0042994C                 mov     [esp+3Ch+Type], 0FFFFFFFFh
.text:00429954                 cdq
.text:00429955                 mov     esi, eax
.text:00429957                 mov     [esp+3Ch+var_34], eax
.text:0042995B                 mov     edi, edx
.text:0042995D                 mov     [esp+3Ch+var_30], edx
.text:00429961                 call    sub_429510
.text:00429966                 add     eax, 1
.text:00429969                 adc     edx, 0
.text:0042996C                 cmp     [esp+3Ch+var_18], edx
.text:00429970                 ja      short loc_4299C0
.text:00429972                 jb      short loc_42997A
.text:00429974                 cmp     [esp+3Ch+var_1C], eax
.text:00429978                 ja      short loc_4299C0
.text:0042997A
.text:0042997A loc_42997A:                             ; CODE XREF: _strtoull+1B2↑j
.text:0042997A                 mov     eax, [esp+3Ch+var_1C]
.text:0042997E                 mov     ebx, ebp
.text:00429980                 mul     esi
.text:00429982                 mov     ecx, edx
.text:00429984                 mov     [esp+3Ch+var_2C], eax
.text:00429988                 mov     eax, [esp+3Ch+var_18]
.text:0042998C                 mov     [esp+3Ch+var_28], edx
.text:00429990                 imul    eax, esi
.text:00429993                 mov     esi, [esp+3Ch+var_1C]
.text:00429997                 imul    esi, edi
.text:0042999A                 add     ecx, eax
.text:0042999C                 lea     edi, [esi+ecx]
.text:0042999F                 mov     esi, ebp
.text:004299A1                 sar     esi, 1Fh
.text:004299A4                 add     ebx, [esp+3Ch+var_2C]
.text:004299A8                 mov     [esp+3Ch+var_28], edi
.text:004299AC                 adc     esi, [esp+3Ch+var_28]
.text:004299B0                 cmp     esi, [esp+3Ch+var_18]
.text:004299B4                 jb      short loc_4299C0
.text:004299B6                 ja      short loc_4299D1
.text:004299B8                 cmp     ebx, [esp+3Ch+var_1C]
.text:004299BC                 jnb     short loc_4299D1
.text:004299BE                 mov     esi, esi
.text:004299C0
.text:004299C0 loc_4299C0:                             ; CODE XREF: _strtoull+1B0↑j
.text:004299C0                                         ; _strtoull+1B8↑j ...
.text:004299C0                 mov     [esp+3Ch+var_24], 1
.text:004299C8
.text:004299C8 loc_4299C8:                             ; CODE XREF: _strtoull+219↓j
.text:004299C8                 inc     [esp+3Ch+String]
.text:004299CC                 jmp     loc_4298F0
.text:004299D1 ; ---------------------------------------------------------------------------
.text:004299D1
.text:004299D1 loc_4299D1:                             ; CODE XREF: _strtoull+1F6↑j
.text:004299D1                                         ; _strtoull+1FC↑j
.text:004299D1                 mov     [esp+3Ch+var_1C], ebx
.text:004299D5                 mov     [esp+3Ch+var_18], esi
.text:004299D9                 jmp     short loc_4299C8
.text:004299DB ; ---------------------------------------------------------------------------
.text:004299DB
.text:004299DB loc_4299DB:                             ; CODE XREF: _strtoull+171↑j
.text:004299DB                                         ; _strtoull+17B↑j
.text:004299DB                 mov     eax, [esp+3Ch+EndPtr]
.text:004299DF                 test    eax, eax
.text:004299E1                 jz      short loc_4299EE
.text:004299E3                 mov     ecx, [esp+3Ch+String]
.text:004299E7                 mov     ebp, [esp+3Ch+EndPtr]
.text:004299EB                 mov     [ebp+0], ecx
.text:004299EE
.text:004299EE loc_4299EE:                             ; CODE XREF: _strtoull+221↑j
.text:004299EE                 mov     esi, [esp+3Ch+var_24]
.text:004299F2                 test    esi, esi
.text:004299F4                 jnz     short loc_429A16
.text:004299F6                 mov     ebx, [esp+3Ch+var_20]
.text:004299FA                 mov     eax, [esp+3Ch+var_1C]
.text:004299FE                 mov     edx, [esp+3Ch+var_18]
.text:00429A02                 test    ebx, ebx
.text:00429A04                 jz      loc_4297FE
.text:00429A0A                 neg     eax
.text:00429A0C                 adc     edx, 0
.text:00429A0F                 neg     edx
.text:00429A11                 jmp     loc_4297FE
.text:00429A16 ; ---------------------------------------------------------------------------
.text:00429A16
.text:00429A16 loc_429A16:                             ; CODE XREF: _strtoull+234↑j
.text:00429A16                 call    _errno
.text:00429A1B                 mov     edx, 0FFFFFFFFh
.text:00429A20                 mov     dword ptr [eax], 22h ; '"'
.text:00429A26                 mov     eax, 0FFFFFFFFh
.text:00429A2B                 jmp     loc_4297FE
.text:00429A30 ; ---------------------------------------------------------------------------
.text:00429A30
.text:00429A30 loc_429A30:                             ; CODE XREF: _strtoull+163↑j
.text:00429A30                 mov     ebp, ds:__mb_cur_max
.text:00429A36                 movsx   ecx, dl
.text:00429A39                 cmp     dword ptr [ebp+0], 1
.text:00429A3D                 jz      short loc_429AB1
.text:00429A3F                 mov     [esp+3Ch+Type], 1 ; Type
.text:00429A47                 mov     [esp+3Ch+C], ecx ; C
.text:00429A4A                 call    _isctype
.text:00429A4F                 mov     ebp, [esp+3Ch+String]
.text:00429A53                 movzx   edx, byte ptr [ebp+0]
.text:00429A57
.text:00429A57 loc_429A57:                             ; CODE XREF: _strtoull+303↓j
.text:00429A57                 test    eax, eax
.text:00429A59                 jz      short loc_429A68
.text:00429A5B                 movsx   eax, dl
.text:00429A5E                 sub     eax, 37h ; '7'
.text:00429A61
.text:00429A61 loc_429A61:                             ; CODE XREF: _strtoull+2D4↓j
.text:00429A61                                         ; _strtoull+2DB↓j
.text:00429A61                 mov     ebp, eax
.text:00429A63                 jmp     loc_42992F
.text:00429A68 ; ---------------------------------------------------------------------------
.text:00429A68
.text:00429A68 loc_429A68:                             ; CODE XREF: _strtoull+299↑j
.text:00429A68                 mov     ecx, ds:__mb_cur_max
.text:00429A6E                 movsx   edx, dl
.text:00429A71                 cmp     dword ptr [ecx], 1
.text:00429A74                 jz      short loc_429A9D
.text:00429A76                 mov     [esp+3Ch+Type], 2 ; Type
.text:00429A7E                 mov     [esp+3Ch+C], edx ; C
.text:00429A81                 call    _isctype
.text:00429A86
.text:00429A86 loc_429A86:                             ; CODE XREF: _strtoull+2EF↓j
.text:00429A86                 test    eax, eax
.text:00429A88                 jz      short loc_429A96
.text:00429A8A                 mov     edx, [esp+3Ch+String]
.text:00429A8E                 movsx   eax, byte ptr [edx]
.text:00429A91                 sub     eax, 57h ; 'W'
.text:00429A94                 jmp     short loc_429A61
.text:00429A96 ; ---------------------------------------------------------------------------
.text:00429A96
.text:00429A96 loc_429A96:                             ; CODE XREF: _strtoull+2C8↑j
.text:00429A96                 mov     eax, 0FFFFFFFFh
.text:00429A9B                 jmp     short loc_429A61
.text:00429A9D ; ---------------------------------------------------------------------------
.text:00429A9D
.text:00429A9D loc_429A9D:                             ; CODE XREF: _strtoull+2B4↑j
.text:00429A9D                 mov     edi, ds:_pctype
.text:00429AA3                 mov     ebx, [edi]
.text:00429AA5                 movzx   esi, word ptr [ebx+edx*2]
.text:00429AA9                 and     esi, 2
.text:00429AAC                 movzx   eax, si
.text:00429AAF                 jmp     short loc_429A86
.text:00429AB1 ; ---------------------------------------------------------------------------
.text:00429AB1
.text:00429AB1 loc_429AB1:                             ; CODE XREF: _strtoull+27D↑j
.text:00429AB1                 mov     edi, ds:_pctype
.text:00429AB7                 mov     ebx, [edi]
.text:00429AB9                 movzx   esi, word ptr [ebx+ecx*2]
.text:00429ABD                 and     esi, 1
.text:00429AC0                 movzx   eax, si
.text:00429AC3                 jmp     short loc_429A57
.text:00429AC5 ; ---------------------------------------------------------------------------
.text:00429AC5
.text:00429AC5 loc_429AC5:                             ; CODE XREF: _strtoull+144↑j
.text:00429AC5                 mov     ebx, ds:_pctype
.text:00429ACB                 mov     esi, [ebx]
.text:00429ACD                 movzx   edi, word ptr [esi+ecx*2]
.text:00429AD1                 and     edi, 4
.text:00429AD4                 movzx   eax, di
.text:00429AD7                 jmp     loc_429921
.text:00429ADC ; ---------------------------------------------------------------------------
.text:00429ADC
.text:00429ADC loc_429ADC:                             ; CODE XREF: _strtoull+ED↑j
.text:00429ADC                 mov     ebx, ds:__mb_cur_max
.text:00429AE2                 movsx   ecx, dl
.text:00429AE5                 cmp     dword ptr [ebx], 1
.text:00429AE8                 jz      short loc_429B5F
.text:00429AEA                 mov     [esp+3Ch+C], ecx ; C
.text:00429AED                 mov     [esp+3Ch+Type], 1 ; Type
.text:00429AF5                 call    _isctype
.text:00429AFA                 mov     ecx, [esp+3Ch+String]
.text:00429AFE                 movzx   edx, byte ptr [ecx]
.text:00429B01
.text:00429B01 loc_429B01:                             ; CODE XREF: _strtoull+3B1↓j
.text:00429B01                 test    eax, eax
.text:00429B03                 jz      short loc_429B10
.text:00429B05                 movsx   eax, dl
.text:00429B08                 sub     eax, 37h ; '7'
.text:00429B0B                 jmp     loc_4298B9
.text:00429B10 ; ---------------------------------------------------------------------------
.text:00429B10
.text:00429B10 loc_429B10:                             ; CODE XREF: _strtoull+343↑j
.text:00429B10                 mov     ebx, ds:__mb_cur_max
.text:00429B16                 movsx   edx, dl
.text:00429B19                 cmp     dword ptr [ebx], 1
.text:00429B1C                 jz      short loc_429B4B
.text:00429B1E                 mov     [esp+3Ch+Type], 2 ; Type
.text:00429B26                 mov     [esp+3Ch+C], edx ; C
.text:00429B29                 call    _isctype
.text:00429B2E
.text:00429B2E loc_429B2E:                             ; CODE XREF: _strtoull+39D↓j
.text:00429B2E                 test    eax, eax
.text:00429B30                 jz      short loc_429B41
.text:00429B32                 mov     ecx, [esp+3Ch+String]
.text:00429B36                 movsx   eax, byte ptr [ecx]
.text:00429B39                 sub     eax, 57h ; 'W'
.text:00429B3C                 jmp     loc_4298B9
.text:00429B41 ; ---------------------------------------------------------------------------
.text:00429B41
.text:00429B41 loc_429B41:                             ; CODE XREF: _strtoull+370↑j
.text:00429B41                 mov     eax, 0FFFFFFFFh
.text:00429B46                 jmp     loc_4298B9
.text:00429B4B ; ---------------------------------------------------------------------------
.text:00429B4B
.text:00429B4B loc_429B4B:                             ; CODE XREF: _strtoull+35C↑j
.text:00429B4B                 mov     esi, ds:_pctype
.text:00429B51                 mov     edi, [esi]
.text:00429B53                 movzx   ebp, word ptr [edi+edx*2]
.text:00429B57                 and     ebp, 2
.text:00429B5A                 movzx   eax, bp
.text:00429B5D                 jmp     short loc_429B2E
.text:00429B5F ; ---------------------------------------------------------------------------
.text:00429B5F
.text:00429B5F loc_429B5F:                             ; CODE XREF: _strtoull+328↑j
.text:00429B5F                 mov     esi, ds:_pctype
.text:00429B65                 mov     edi, [esi]
.text:00429B67                 movzx   ebp, word ptr [edi+ecx*2]
.text:00429B6B                 and     ebp, 1
.text:00429B6E                 movzx   eax, bp
.text:00429B71                 jmp     short loc_429B01
.text:00429B73 ; ---------------------------------------------------------------------------
.text:00429B73
.text:00429B73 loc_429B73:                             ; CODE XREF: _strtoull+CE↑j
.text:00429B73                 mov     edi, ds:_pctype
.text:00429B79                 mov     ebp, [edi]
.text:00429B7B                 movzx   ecx, word ptr [ebp+ebx*2+0]
.text:00429B80                 and     ecx, 4
.text:00429B83                 movzx   eax, cx
.text:00429B86                 jmp     loc_4298AB
.text:00429B8B ; ---------------------------------------------------------------------------
.text:00429B8B
.text:00429B8B loc_429B8B:                             ; CODE XREF: _strtoull+C2↑j
.text:00429B8B                 cmp     dl, 30h ; '0'
.text:00429B8E                 jnz     loc_429888
.text:00429B94                 mov     esi, [esp+3Ch+String]
.text:00429B98                 movzx   eax, byte ptr [esi+1]
.text:00429B9C                 cmp     al, 58h ; 'X'
.text:00429B9E                 jz      short loc_429BA8
.text:00429BA0                 cmp     al, 78h ; 'x'
.text:00429BA2                 jnz     loc_429888
.text:00429BA8
.text:00429BA8 loc_429BA8:                             ; CODE XREF: _strtoull+3DE↑j
.text:00429BA8                 add     [esp+3Ch+String], 2
.text:00429BAD                 mov     ebx, [esp+3Ch+String]
.text:00429BB1                 movzx   edx, byte ptr [ebx]
.text:00429BB4                 jmp     loc_429888
.text:00429BB9 ; ---------------------------------------------------------------------------
.text:00429BB9
.text:00429BB9 loc_429BB9:                             ; CODE XREF: _strtoull+AF↑j
.text:00429BB9                 mov     edi, [esp+3Ch+String]
.text:00429BBD                 movzx   eax, byte ptr [edi+1]
.text:00429BC1                 cmp     al, 58h ; 'X'
.text:00429BC3                 jz      short loc_429BD5
.text:00429BC5                 mov     [esp+3Ch+Radix], 8
.text:00429BCD                 cmp     al, 78h ; 'x'
.text:00429BCF                 jnz     loc_42987D
.text:00429BD5
.text:00429BD5 loc_429BD5:                             ; CODE XREF: _strtoull+403↑j
.text:00429BD5                 mov     [esp+3Ch+Radix], 10h
.text:00429BDD                 jmp     loc_42987D
.text:00429BE2 ; ---------------------------------------------------------------------------
.text:00429BE2
.text:00429BE2 loc_429BE2:                             ; CODE XREF: _strtoull+95↑j
.text:00429BE2                                         ; _strtoull+9E↑j
.text:00429BE2                 inc     [esp+3Ch+String]
.text:00429BE6                 mov     eax, [esp+3Ch+String]
.text:00429BEA                 movzx   edx, byte ptr [eax]
.text:00429BED                 jmp     loc_429864
.text:00429BF2 ; ---------------------------------------------------------------------------
.text:00429BF2
.text:00429BF2 loc_429BF2:                             ; CODE XREF: _strtoull+5A↑j
.text:00429BF2                 mov     ebp, ds:_pctype
.text:00429BF8                 mov     edi, [ebp+0]
.text:00429BFB                 movzx   ebx, word ptr [edi+edx*2]
.text:00429BFF                 and     ebx, 8
.text:00429C02                 movzx   eax, bx
.text:00429C05                 jmp     loc_429836
.text:00429C05 _strtoull       endp
.text:00429C05
.text:00429C05 ; ---------------------------------------------------------------------------
.text:00429C0A                 align 10h
.text:00429C10                 jmp     ds:__set_app_type
.text:00429C10 ; ---------------------------------------------------------------------------
.text:00429C16                 align 10h
.text:00429C20
.text:00429C20 ; =============== S U B R O U T I N E =======================================
.text:00429C20
.text:00429C20 ; Attributes: thunk
.text:00429C20
.text:00429C20 ; void __cdecl cexit()
.text:00429C20 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00429C20                 jmp     ds:__imp__cexit
.text:00429C20 _cexit          endp
.text:00429C20
.text:00429C20 ; ---------------------------------------------------------------------------
.text:00429C26                 align 10h
.text:00429C30
.text:00429C30 ; =============== S U B R O U T I N E =======================================
.text:00429C30
.text:00429C30 ; Attributes: thunk
.text:00429C30
.text:00429C30 ; char ***__cdecl _p__environ()
.text:00429C30 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00429C30                 jmp     ds:__imp___p__environ
.text:00429C30 __p__environ    endp
.text:00429C30
.text:00429C30 ; ---------------------------------------------------------------------------
.text:00429C36                 align 10h
.text:00429C40
.text:00429C40 ; =============== S U B R O U T I N E =======================================
.text:00429C40
.text:00429C40 ; Attributes: thunk
.text:00429C40
.text:00429C40 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00429C40 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00429C40                                         ; TopLevelExceptionFilter+88↑p ...
.text:00429C40
.text:00429C40 Signal          = dword ptr  4
.text:00429C40 Function        = dword ptr  8
.text:00429C40
.text:00429C40                 jmp     ds:__imp_signal
.text:00429C40 signal          endp
.text:00429C40
.text:00429C40 ; ---------------------------------------------------------------------------
.text:00429C46                 align 10h
.text:00429C50
.text:00429C50 ; =============== S U B R O U T I N E =======================================
.text:00429C50
.text:00429C50 ; Attributes: thunk
.text:00429C50
.text:00429C50 ; int *__cdecl _p__fmode()
.text:00429C50 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00429C50                 jmp     ds:__imp___p__fmode
.text:00429C50 __p__fmode      endp
.text:00429C50
.text:00429C50 ; ---------------------------------------------------------------------------
.text:00429C56                 align 10h
.text:00429C60
.text:00429C60 ; =============== S U B R O U T I N E =======================================
.text:00429C60
.text:00429C60 ; Attributes: thunk
.text:00429C60
.text:00429C60 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00429C60 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00429C60                                         ; sub_401080+90↑p ...
.text:00429C60
.text:00429C60 FileHandle      = dword ptr  4
.text:00429C60 Mode            = dword ptr  8
.text:00429C60
.text:00429C60                 jmp     ds:__imp__setmode
.text:00429C60 _setmode        endp
.text:00429C60
.text:00429C60 ; ---------------------------------------------------------------------------
.text:00429C66                 align 10h
.text:00429C70
.text:00429C70 ; =============== S U B R O U T I N E =======================================
.text:00429C70
.text:00429C70 ; Attributes: thunk
.text:00429C70
.text:00429C70 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00429C70                 jmp     ds:__imp___getmainargs
.text:00429C70 __getmainargs   endp
.text:00429C70
.text:00429C70 ; ---------------------------------------------------------------------------
.text:00429C76                 align 10h
.text:00429C80
.text:00429C80 ; =============== S U B R O U T I N E =======================================
.text:00429C80
.text:00429C80 ; Attributes: thunk
.text:00429C80
.text:00429C80 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:00429C80 memmove         proc near               ; CODE XREF: sub_4126F0+2E5↑p
.text:00429C80
.text:00429C80 Src             = dword ptr  8
.text:00429C80 Size            = dword ptr  0Ch
.text:00429C80
.text:00429C80                 jmp     ds:__imp_memmove
.text:00429C80 memmove         endp
.text:00429C80
.text:00429C80 ; ---------------------------------------------------------------------------
.text:00429C86                 align 10h
.text:00429C90
.text:00429C90 ; =============== S U B R O U T I N E =======================================
.text:00429C90
.text:00429C90 ; Attributes: thunk
.text:00429C90
.text:00429C90 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00429C90 fprintf         proc near               ; CODE XREF: sub_409020+33↑p
.text:00429C90                                         ; sub_4109B0+33B↑p ...
.text:00429C90
.text:00429C90 Stream          = dword ptr  4
.text:00429C90 Format          = dword ptr  8
.text:00429C90
.text:00429C90                 jmp     ds:__imp_fprintf
.text:00429C90 fprintf         endp
.text:00429C90
.text:00429C90 ; ---------------------------------------------------------------------------
.text:00429C96                 align 10h
.text:00429CA0
.text:00429CA0 ; =============== S U B R O U T I N E =======================================
.text:00429CA0
.text:00429CA0 ; Attributes: thunk
.text:00429CA0
.text:00429CA0 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00429CA0 fwrite          proc near               ; CODE XREF: sub_403C30+357↑p
.text:00429CA0                                         ; sub_403C30+4F0↑p ...
.text:00429CA0
.text:00429CA0 Buffer          = dword ptr  4
.text:00429CA0 ElementSize     = dword ptr  8
.text:00429CA0 ElementCount    = dword ptr  0Ch
.text:00429CA0 Stream          = dword ptr  10h
.text:00429CA0
.text:00429CA0                 jmp     ds:__imp_fwrite
.text:00429CA0 fwrite          endp
.text:00429CA0
.text:00429CA0 ; ---------------------------------------------------------------------------
.text:00429CA6                 align 10h
.text:00429CB0
.text:00429CB0 ; =============== S U B R O U T I N E =======================================
.text:00429CB0
.text:00429CB0 ; Attributes: thunk
.text:00429CB0
.text:00429CB0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00429CB0 sprintf         proc near               ; CODE XREF: sub_405330+53↑p
.text:00429CB0                                         ; sub_4053D0+53↑p ...
.text:00429CB0
.text:00429CB0 Buffer          = dword ptr  4
.text:00429CB0 Format          = dword ptr  8
.text:00429CB0
.text:00429CB0                 jmp     ds:__imp_sprintf
.text:00429CB0 sprintf         endp
.text:00429CB0
.text:00429CB0 ; ---------------------------------------------------------------------------
.text:00429CB6                 align 10h
.text:00429CC0
.text:00429CC0 ; =============== S U B R O U T I N E =======================================
.text:00429CC0
.text:00429CC0 ; Attributes: thunk
.text:00429CC0
.text:00429CC0 ; __time32_t __cdecl time(__time32_t *const Time)
.text:00429CC0 time            proc near               ; CODE XREF: sub_405490+484↑p
.text:00429CC0
.text:00429CC0 Time            = dword ptr  4
.text:00429CC0
.text:00429CC0                 jmp     ds:__imp_time
.text:00429CC0 time            endp
.text:00429CC0
.text:00429CC0 ; ---------------------------------------------------------------------------
.text:00429CC6                 align 10h
.text:00429CD0
.text:00429CD0 ; =============== S U B R O U T I N E =======================================
.text:00429CD0
.text:00429CD0 ; Attributes: thunk
.text:00429CD0
.text:00429CD0 ; struct tm *__cdecl localtime(const __time32_t *const Time)
.text:00429CD0 localtime       proc near               ; CODE XREF: sub_405490+1C1↑p
.text:00429CD0                                         ; sub_40A4F0+44↑p ...
.text:00429CD0
.text:00429CD0 Time            = dword ptr  4
.text:00429CD0
.text:00429CD0                 jmp     ds:__imp_localtime
.text:00429CD0 localtime       endp
.text:00429CD0
.text:00429CD0 ; ---------------------------------------------------------------------------
.text:00429CD6                 align 10h
.text:00429CE0
.text:00429CE0 ; =============== S U B R O U T I N E =======================================
.text:00429CE0
.text:00429CE0 ; Attributes: thunk
.text:00429CE0
.text:00429CE0 ; int __cdecl setjmp(jmp_buf Buf)
.text:00429CE0 _setjmp         proc near               ; CODE XREF: sub_404FA0+1A↑p
.text:00429CE0
.text:00429CE0 Buf             = dword ptr  4
.text:00429CE0
.text:00429CE0                 jmp     ds:__imp__setjmp
.text:00429CE0 _setjmp         endp
.text:00429CE0
.text:00429CE0 ; ---------------------------------------------------------------------------
.text:00429CE6                 align 10h
.text:00429CF0
.text:00429CF0 ; =============== S U B R O U T I N E =======================================
.text:00429CF0
.text:00429CF0 ; Attributes: noreturn thunk
.text:00429CF0
.text:00429CF0 ; void __cdecl __noreturn longjmp(jmp_buf Buf, int Value)
.text:00429CF0 longjmp         proc near               ; CODE XREF: sub_40A750+C3↑p
.text:00429CF0
.text:00429CF0 Buf             = dword ptr  4
.text:00429CF0 Value           = dword ptr  8
.text:00429CF0
.text:00429CF0                 jmp     ds:__imp_longjmp
.text:00429CF0 longjmp         endp
.text:00429CF0
.text:00429CF0 ; ---------------------------------------------------------------------------
.text:00429CF6                 align 10h
.text:00429D00
.text:00429D00 ; =============== S U B R O U T I N E =======================================
.text:00429D00
.text:00429D00 ; Attributes: thunk
.text:00429D00
.text:00429D00 ; int __cdecl strcoll(const char *String1, const char *String2)
.text:00429D00 strcoll         proc near               ; CODE XREF: sub_40A750+2D↑p
.text:00429D00
.text:00429D00 String1         = dword ptr  4
.text:00429D00 String2         = dword ptr  8
.text:00429D00
.text:00429D00                 jmp     ds:__imp_strcoll
.text:00429D00 strcoll         endp
.text:00429D00
.text:00429D00 ; ---------------------------------------------------------------------------
.text:00429D06                 align 10h
.text:00429D10
.text:00429D10 ; =============== S U B R O U T I N E =======================================
.text:00429D10
.text:00429D10 ; Attributes: thunk
.text:00429D10
.text:00429D10 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00429D10 strncpy         proc near               ; CODE XREF: sub_404D40+62↑p
.text:00429D10                                         ; sub_418BD0+61↑p ...
.text:00429D10
.text:00429D10 Destination     = dword ptr  4
.text:00429D10 Source          = dword ptr  8
.text:00429D10 Count           = dword ptr  0Ch
.text:00429D10
.text:00429D10                 jmp     ds:__imp_strncpy
.text:00429D10 strncpy         endp
.text:00429D10
.text:00429D10 ; ---------------------------------------------------------------------------
.text:00429D16                 align 10h
.text:00429D20
.text:00429D20 ; =============== S U B R O U T I N E =======================================
.text:00429D20
.text:00429D20 ; Attributes: thunk
.text:00429D20
.text:00429D20 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00429D20 memcpy          proc near               ; CODE XREF: sub_403C30+327↑p
.text:00429D20                                         ; sub_403C30+58D↑p ...
.text:00429D20
.text:00429D20 Src             = dword ptr  8
.text:00429D20 Size            = dword ptr  0Ch
.text:00429D20
.text:00429D20                 jmp     ds:__imp_memcpy
.text:00429D20 memcpy          endp
.text:00429D20
.text:00429D20 ; ---------------------------------------------------------------------------
.text:00429D26                 align 10h
.text:00429D30
.text:00429D30 ; =============== S U B R O U T I N E =======================================
.text:00429D30
.text:00429D30 ; Attributes: thunk
.text:00429D30
.text:00429D30 ; size_t __cdecl strlen(const char *Str)
.text:00429D30 strlen          proc near               ; CODE XREF: sub_403C30+3AD↑p
.text:00429D30                                         ; sub_403C30+446↑p ...
.text:00429D30
.text:00429D30 Str             = dword ptr  4
.text:00429D30
.text:00429D30                 jmp     ds:__imp_strlen
.text:00429D30 strlen          endp
.text:00429D30
.text:00429D30 ; ---------------------------------------------------------------------------
.text:00429D36                 align 10h
.text:00429D40
.text:00429D40 ; =============== S U B R O U T I N E =======================================
.text:00429D40
.text:00429D40 ; Attributes: thunk
.text:00429D40
.text:00429D40 ; int *__cdecl errno()
.text:00429D40 _errno          proc near               ; CODE XREF: sub_403C30+26↑p
.text:00429D40                                         ; sub_403C30:loc_403D80↑p ...
.text:00429D40                 jmp     ds:__imp__errno
.text:00429D40 _errno          endp
.text:00429D40
.text:00429D40 ; ---------------------------------------------------------------------------
.text:00429D46                 align 10h
.text:00429D50
.text:00429D50 ; =============== S U B R O U T I N E =======================================
.text:00429D50
.text:00429D50 ; Attributes: thunk
.text:00429D50
.text:00429D50 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00429D50 strcmp          proc near               ; CODE XREF: sub_403810+247↑p
.text:00429D50                                         ; sub_409AE0+5B↑p ...
.text:00429D50
.text:00429D50 Str1            = dword ptr  4
.text:00429D50 Str2            = dword ptr  8
.text:00429D50
.text:00429D50                 jmp     ds:__imp_strcmp
.text:00429D50 strcmp          endp
.text:00429D50
.text:00429D50 ; ---------------------------------------------------------------------------
.text:00429D56                 align 10h
.text:00429D60
.text:00429D60 ; =============== S U B R O U T I N E =======================================
.text:00429D60
.text:00429D60 ; Attributes: thunk
.text:00429D60
.text:00429D60 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00429D60 strcpy          proc near               ; CODE XREF: sub_404D40+71↑p
.text:00429D60                                         ; sub_415360+20↑p ...
.text:00429D60
.text:00429D60 Destination     = dword ptr  4
.text:00429D60 Source          = dword ptr  8
.text:00429D60
.text:00429D60                 jmp     ds:__imp_strcpy
.text:00429D60 strcpy          endp
.text:00429D60
.text:00429D60 ; ---------------------------------------------------------------------------
.text:00429D66                 align 10h
.text:00429D70
.text:00429D70 ; =============== S U B R O U T I N E =======================================
.text:00429D70
.text:00429D70 ; Attributes: thunk
.text:00429D70
.text:00429D70 ; char *__cdecl getenv(const char *VarName)
.text:00429D70 getenv          proc near               ; CODE XREF: sub_4025F0+D0↑p
.text:00429D70                                         ; sub_4025F0+121↑p ...
.text:00429D70
.text:00429D70 VarName         = dword ptr  4
.text:00429D70
.text:00429D70                 jmp     ds:__imp_getenv
.text:00429D70 getenv          endp
.text:00429D70
.text:00429D70 ; ---------------------------------------------------------------------------
.text:00429D76                 align 10h
.text:00429D80
.text:00429D80 ; =============== S U B R O U T I N E =======================================
.text:00429D80
.text:00429D80 ; Attributes: noreturn thunk
.text:00429D80
.text:00429D80 ; void __cdecl __noreturn abort()
.text:00429D80 abort           proc near               ; CODE XREF: sub_4025F0:loc_402627↑p
.text:00429D80                                         ; sub_404FA0:def_404FD5↑p ...
.text:00429D80                 jmp     ds:__imp_abort
.text:00429D80 abort           endp
.text:00429D80
.text:00429D80 ; ---------------------------------------------------------------------------
.text:00429D86                 align 10h
.text:00429D90
.text:00429D90 ; =============== S U B R O U T I N E =======================================
.text:00429D90
.text:00429D90 ; Attributes: noreturn thunk
.text:00429D90
.text:00429D90 ; void __cdecl __noreturn exit(int Code)
.text:00429D90 exit            proc near               ; CODE XREF: sub_401B10+2D3↑p
.text:00429D90                                         ; sub_4025F0+71A↑p ...
.text:00429D90
.text:00429D90 Code            = dword ptr  4
.text:00429D90
.text:00429D90                 jmp     ds:__imp_exit
.text:00429D90 exit            endp
.text:00429D90
.text:00429D90 ; ---------------------------------------------------------------------------
.text:00429D96                 align 10h
.text:00429DA0
.text:00429DA0 ; =============== S U B R O U T I N E =======================================
.text:00429DA0
.text:00429DA0 ; Attributes: thunk
.text:00429DA0
.text:00429DA0 ; void *__cdecl malloc(size_t Size)
.text:00429DA0 malloc          proc near               ; CODE XREF: sub_40ECD0+C2↑p
.text:00429DA0                                         ; sub_40ECD0+137↑p ...
.text:00429DA0
.text:00429DA0 Size            = dword ptr  4
.text:00429DA0
.text:00429DA0                 jmp     ds:__imp_malloc
.text:00429DA0 malloc          endp
.text:00429DA0
.text:00429DA0 ; ---------------------------------------------------------------------------
.text:00429DA6                 align 10h
.text:00429DB0
.text:00429DB0 ; =============== S U B R O U T I N E =======================================
.text:00429DB0
.text:00429DB0 ; Attributes: thunk
.text:00429DB0
.text:00429DB0 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00429DB0 setlocale       proc near               ; CODE XREF: sub_401B10+37↑p
.text:00429DB0                                         ; sub_413680+24↑p
.text:00429DB0
.text:00429DB0 Category        = dword ptr  4
.text:00429DB0 Locale          = dword ptr  8
.text:00429DB0
.text:00429DB0                 jmp     ds:__imp_setlocale
.text:00429DB0 setlocale       endp
.text:00429DB0
.text:00429DB0 ; ---------------------------------------------------------------------------
.text:00429DB6                 align 10h
.text:00429DC0
.text:00429DC0 ; =============== S U B R O U T I N E =======================================
.text:00429DC0
.text:00429DC0 ; Attributes: thunk
.text:00429DC0
.text:00429DC0 ; int __cdecl raise(int Signal)
.text:00429DC0 raise           proc near               ; CODE XREF: sub_401B10+399↑p
.text:00429DC0                                         ; sub_401B10+3AA↑p ...
.text:00429DC0
.text:00429DC0 Signal          = dword ptr  4
.text:00429DC0
.text:00429DC0                 jmp     ds:__imp_raise
.text:00429DC0 raise           endp
.text:00429DC0
.text:00429DC0 ; ---------------------------------------------------------------------------
.text:00429DC6                 align 10h
.text:00429DD0
.text:00429DD0 ; =============== S U B R O U T I N E =======================================
.text:00429DD0
.text:00429DD0 ; Attributes: thunk
.text:00429DD0
.text:00429DD0 ; int __cdecl fflush(FILE *Stream)
.text:00429DD0 fflush          proc near               ; CODE XREF: sub_401B10+36C↑p
.text:00429DD0                                         ; sub_4061C0+10A↑p ...
.text:00429DD0
.text:00429DD0 Stream          = dword ptr  4
.text:00429DD0
.text:00429DD0                 jmp     ds:__imp_fflush
.text:00429DD0 fflush          endp
.text:00429DD0
.text:00429DD0 ; ---------------------------------------------------------------------------
.text:00429DD6                 align 10h
.text:00429DE0
.text:00429DE0 ; =============== S U B R O U T I N E =======================================
.text:00429DE0
.text:00429DE0 ; Attributes: thunk
.text:00429DE0
.text:00429DE0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00429DE0 strncmp         proc near               ; CODE XREF: sub_4025F0+E73↑p
.text:00429DE0                                         ; sub_4065C0+104↑p ...
.text:00429DE0
.text:00429DE0 Str1            = dword ptr  4
.text:00429DE0 Str2            = dword ptr  8
.text:00429DE0 MaxCount        = dword ptr  0Ch
.text:00429DE0
.text:00429DE0                 jmp     ds:__imp_strncmp
.text:00429DE0 strncmp         endp
.text:00429DE0
.text:00429DE0 ; ---------------------------------------------------------------------------
.text:00429DE6                 align 10h
.text:00429DF0
.text:00429DF0 ; =============== S U B R O U T I N E =======================================
.text:00429DF0
.text:00429DF0 ; Attributes: thunk
.text:00429DF0
.text:00429DF0 ; void __cdecl free(void *Block)
.text:00429DF0 free            proc near               ; CODE XREF: sub_401B10+262↑p
.text:00429DF0                                         ; sub_401B10+27F↑p ...
.text:00429DF0
.text:00429DF0 Block           = dword ptr  4
.text:00429DF0
.text:00429DF0                 jmp     ds:__imp_free
.text:00429DF0 free            endp
.text:00429DF0
.text:00429DF0 ; ---------------------------------------------------------------------------
.text:00429DF6                 align 10h
.text:00429E00
.text:00429E00 ; =============== S U B R O U T I N E =======================================
.text:00429E00
.text:00429E00 ; Attributes: thunk
.text:00429E00
.text:00429E00 ; int printf(const char *const Format, ...)
.text:00429E00 printf          proc near               ; CODE XREF: sub_401B10+33C↑p
.text:00429E00                                         ; sub_405490+7FE↑p ...
.text:00429E00
.text:00429E00 Format          = dword ptr  4
.text:00429E00
.text:00429E00                 jmp     ds:__imp_printf
.text:00429E00 printf          endp
.text:00429E00
.text:00429E00 ; ---------------------------------------------------------------------------
.text:00429E06                 align 10h
.text:00429E10
.text:00429E10 ; =============== S U B R O U T I N E =======================================
.text:00429E10
.text:00429E10 ; Attributes: thunk
.text:00429E10
.text:00429E10 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00429E10 fputs           proc near               ; CODE XREF: sub_403C30+3A5↑p
.text:00429E10                                         ; sub_403C30+43E↑p ...
.text:00429E10
.text:00429E10 Buffer          = dword ptr  4
.text:00429E10 Stream          = dword ptr  8
.text:00429E10
.text:00429E10                 jmp     ds:__imp_fputs
.text:00429E10 fputs           endp
.text:00429E10
.text:00429E10 ; ---------------------------------------------------------------------------
.text:00429E16                 align 10h
.text:00429E20
.text:00429E20 ; =============== S U B R O U T I N E =======================================
.text:00429E20
.text:00429E20 ; Attributes: noreturn thunk
.text:00429E20
.text:00429E20 _assert         proc near               ; CODE XREF: sub_401B10:loc_401DFF↑p
.text:00429E20                                         ; sub_40ECD0:loc_40F159↑p ...
.text:00429E20                 jmp     ds:__imp__assert
.text:00429E20 _assert         endp
.text:00429E20
.text:00429E20 ; ---------------------------------------------------------------------------
.text:00429E26                 align 10h
.text:00429E30
.text:00429E30 ; =============== S U B R O U T I N E =======================================
.text:00429E30
.text:00429E30 ; Attributes: thunk
.text:00429E30
.text:00429E30 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00429E30 strrchr         proc near               ; CODE XREF: sub_404D40+31↑p
.text:00429E30                                         ; sub_40A2B0+24↑p ...
.text:00429E30
.text:00429E30 Str             = dword ptr  4
.text:00429E30
.text:00429E30                 jmp     ds:__imp_strrchr
.text:00429E30 strrchr         endp
.text:00429E30
.text:00429E30 ; ---------------------------------------------------------------------------
.text:00429E36                 align 10h
.text:00429E40
.text:00429E40 ; =============== S U B R O U T I N E =======================================
.text:00429E40
.text:00429E40 ; Attributes: thunk
.text:00429E40
.text:00429E40 ; char *__cdecl strchr(const char *Str, int Val)
.text:00429E40 strchr          proc near               ; CODE XREF: sub_4025F0+F9B↑p
.text:00429E40                                         ; sub_4025F0+FB4↑p ...
.text:00429E40
.text:00429E40 Str             = dword ptr  4
.text:00429E40 Val             = dword ptr  8
.text:00429E40
.text:00429E40                 jmp     ds:__imp_strchr
.text:00429E40 strchr          endp
.text:00429E40
.text:00429E40 ; ---------------------------------------------------------------------------
.text:00429E46                 align 10h
.text:00429E50
.text:00429E50 ; =============== S U B R O U T I N E =======================================
.text:00429E50
.text:00429E50 ; Attributes: thunk
.text:00429E50
.text:00429E50 ; int __cdecl isctype(int C, int Type)
.text:00429E50 _isctype        proc near               ; CODE XREF: sub_405EA0+1F3↑p
.text:00429E50                                         ; sub_405EA0+283↑p ...
.text:00429E50
.text:00429E50 C               = dword ptr  4
.text:00429E50 Type            = dword ptr  8
.text:00429E50
.text:00429E50                 jmp     ds:__imp__isctype
.text:00429E50 _isctype        endp
.text:00429E50
.text:00429E50 ; ---------------------------------------------------------------------------
.text:00429E56                 align 10h
.text:00429E60
.text:00429E60 ; =============== S U B R O U T I N E =======================================
.text:00429E60
.text:00429E60 ; Attributes: thunk
.text:00429E60
.text:00429E60 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00429E60 _flsbuf         proc near               ; CODE XREF: sub_401B10+52C↑p
.text:00429E60                                         ; sub_403C30+4A7↑p ...
.text:00429E60
.text:00429E60 File            = dword ptr  8
.text:00429E60
.text:00429E60                 jmp     ds:__imp__flsbuf
.text:00429E60 _flsbuf         endp
.text:00429E60
.text:00429E60 ; ---------------------------------------------------------------------------
.text:00429E66                 align 10h
.text:00429E70
.text:00429E70 ; =============== S U B R O U T I N E =======================================
.text:00429E70
.text:00429E70 ; Attributes: thunk
.text:00429E70
.text:00429E70 ; __time32_t __cdecl mktime(struct tm *const Tm)
.text:00429E70 mktime          proc near               ; CODE XREF: sub_40A870+188B↑p
.text:00429E70                                         ; sub_40A870+1BDF↑p
.text:00429E70
.text:00429E70 Tm              = dword ptr  4
.text:00429E70
.text:00429E70                 jmp     ds:__imp_mktime
.text:00429E70 mktime          endp
.text:00429E70
.text:00429E70 ; ---------------------------------------------------------------------------
.text:00429E76                 align 10h
.text:00429E80
.text:00429E80 ; =============== S U B R O U T I N E =======================================
.text:00429E80
.text:00429E80 ; Attributes: thunk
.text:00429E80
.text:00429E80 ; size_t __cdecl strftime(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.text:00429E80 strftime        proc near               ; CODE XREF: sub_40A870+78E↑p
.text:00429E80
.text:00429E80 Buffer          = dword ptr  4
.text:00429E80 SizeInBytes     = dword ptr  8
.text:00429E80 Format          = dword ptr  0Ch
.text:00429E80 Tm              = dword ptr  10h
.text:00429E80
.text:00429E80                 jmp     ds:__imp_strftime
.text:00429E80 strftime        endp
.text:00429E80
.text:00429E80 ; ---------------------------------------------------------------------------
.text:00429E86                 align 10h
.text:00429E90
.text:00429E90 ; =============== S U B R O U T I N E =======================================
.text:00429E90
.text:00429E90 ; Attributes: thunk
.text:00429E90
.text:00429E90 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00429E90 memset          proc near               ; CODE XREF: sub_40A870+209↑p
.text:00429E90                                         ; sub_40A870:loc_40ADEA↑p ...
.text:00429E90
.text:00429E90 Val             = dword ptr  8
.text:00429E90 Size            = dword ptr  0Ch
.text:00429E90
.text:00429E90                 jmp     ds:__imp_memset
.text:00429E90 memset          endp
.text:00429E90
.text:00429E90 ; ---------------------------------------------------------------------------
.text:00429E96                 align 10h
.text:00429EA0
.text:00429EA0 ; =============== S U B R O U T I N E =======================================
.text:00429EA0
.text:00429EA0 ; Attributes: thunk
.text:00429EA0
.text:00429EA0 ; int __cdecl toupper(int C)
.text:00429EA0 toupper         proc near               ; CODE XREF: sub_40A870+6B0↑p
.text:00429EA0                                         ; sub_40A870+8F6↑p ...
.text:00429EA0
.text:00429EA0 C               = dword ptr  4
.text:00429EA0
.text:00429EA0                 jmp     ds:__imp_toupper
.text:00429EA0 toupper         endp
.text:00429EA0
.text:00429EA0 ; ---------------------------------------------------------------------------
.text:00429EA6                 align 10h
.text:00429EB0
.text:00429EB0 ; =============== S U B R O U T I N E =======================================
.text:00429EB0
.text:00429EB0 ; Attributes: thunk
.text:00429EB0
.text:00429EB0 ; int __cdecl tolower(int C)
.text:00429EB0 tolower         proc near               ; CODE XREF: sub_40A870+87F↑p
.text:00429EB0                                         ; sub_40A870+123D↑p ...
.text:00429EB0
.text:00429EB0 C               = dword ptr  4
.text:00429EB0
.text:00429EB0                 jmp     ds:__imp_tolower
.text:00429EB0 tolower         endp
.text:00429EB0
.text:00429EB0 ; ---------------------------------------------------------------------------
.text:00429EB6                 align 10h
.text:00429EC0
.text:00429EC0 ; =============== S U B R O U T I N E =======================================
.text:00429EC0
.text:00429EC0 ; Attributes: thunk
.text:00429EC0
.text:00429EC0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00429EC0 iswctype        proc near               ; CODE XREF: sub_40C8F0+E2↑p
.text:00429EC0                                         ; sub_40CB90+78B↑p ...
.text:00429EC0
.text:00429EC0 C               = word ptr  4
.text:00429EC0 Type            = word ptr  8
.text:00429EC0
.text:00429EC0                 jmp     ds:__imp_iswctype
.text:00429EC0 iswctype        endp
.text:00429EC0
.text:00429EC0 ; ---------------------------------------------------------------------------
.text:00429EC6                 align 10h
.text:00429ED0
.text:00429ED0 ; =============== S U B R O U T I N E =======================================
.text:00429ED0
.text:00429ED0 ; Attributes: thunk
.text:00429ED0
.text:00429ED0 ; wchar_t *__cdecl wcscat(wchar_t *Destination, const wchar_t *Source)
.text:00429ED0 wcscat          proc near               ; CODE XREF: sub_40FE80+54F↑p
.text:00429ED0
.text:00429ED0 Destination     = dword ptr  4
.text:00429ED0 Source          = dword ptr  8
.text:00429ED0
.text:00429ED0                 jmp     ds:__imp_wcscat
.text:00429ED0 wcscat          endp
.text:00429ED0
.text:00429ED0 ; ---------------------------------------------------------------------------
.text:00429ED6                 align 10h
.text:00429EE0
.text:00429EE0 ; =============== S U B R O U T I N E =======================================
.text:00429EE0
.text:00429EE0 ; Attributes: thunk
.text:00429EE0
.text:00429EE0 ; size_t __cdecl wcslen(const wchar_t *String)
.text:00429EE0 wcslen          proc near               ; CODE XREF: sub_40FE80+32↑p
.text:00429EE0
.text:00429EE0 String          = dword ptr  4
.text:00429EE0
.text:00429EE0                 jmp     ds:__imp_wcslen
.text:00429EE0 wcslen          endp
.text:00429EE0
.text:00429EE0 ; ---------------------------------------------------------------------------
.text:00429EE6                 align 10h
.text:00429EF0
.text:00429EF0 ; =============== S U B R O U T I N E =======================================
.text:00429EF0
.text:00429EF0 ; Attributes: thunk
.text:00429EF0
.text:00429EF0 ; wint_t __cdecl towlower(wint_t C)
.text:00429EF0 towlower        proc near               ; CODE XREF: sub_40F2C0+3B6↑p
.text:00429EF0                                         ; sub_40F2C0+3C3↑p ...
.text:00429EF0
.text:00429EF0 C               = word ptr  4
.text:00429EF0
.text:00429EF0                 jmp     ds:__imp_towlower
.text:00429EF0 towlower        endp
.text:00429EF0
.text:00429EF0 ; ---------------------------------------------------------------------------
.text:00429EF6                 align 10h
.text:00429F00
.text:00429F00 ; =============== S U B R O U T I N E =======================================
.text:00429F00
.text:00429F00 ; Attributes: thunk
.text:00429F00
.text:00429F00 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00429F00 strcat          proc near               ; CODE XREF: sub_40ECD0+4D1↑p
.text:00429F00                                         ; sub_416950+98↑p ...
.text:00429F00
.text:00429F00 Destination     = dword ptr  4
.text:00429F00 Source          = dword ptr  8
.text:00429F00
.text:00429F00                 jmp     ds:__imp_strcat
.text:00429F00 strcat          endp
.text:00429F00
.text:00429F00 ; ---------------------------------------------------------------------------
.text:00429F06                 align 10h
.text:00429F10
.text:00429F10 ; =============== S U B R O U T I N E =======================================
.text:00429F10
.text:00429F10 ; Attributes: thunk
.text:00429F10
.text:00429F10 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00429F10 memchr          proc near               ; CODE XREF: .text:0040E16D↑p
.text:00429F10                                         ; .text:0040E1A2↑p
.text:00429F10
.text:00429F10 Buf             = dword ptr  4
.text:00429F10 Val             = dword ptr  8
.text:00429F10 MaxCount        = dword ptr  0Ch
.text:00429F10
.text:00429F10                 jmp     ds:__imp_memchr
.text:00429F10 memchr          endp
.text:00429F10
.text:00429F10 ; ---------------------------------------------------------------------------
.text:00429F16                 align 10h
.text:00429F20
.text:00429F20 ; =============== S U B R O U T I N E =======================================
.text:00429F20
.text:00429F20 ; Attributes: thunk
.text:00429F20
.text:00429F20 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00429F20 calloc          proc near               ; CODE XREF: .text:00412583↑p
.text:00429F20                                         ; sub_414340+1D0↑p ...
.text:00429F20
.text:00429F20 Count           = dword ptr  4
.text:00429F20 Size            = dword ptr  8
.text:00429F20
.text:00429F20                 jmp     ds:__imp_calloc
.text:00429F20 calloc          endp
.text:00429F20
.text:00429F20 ; ---------------------------------------------------------------------------
.text:00429F26                 align 10h
.text:00429F30
.text:00429F30 ; =============== S U B R O U T I N E =======================================
.text:00429F30
.text:00429F30 ; Attributes: thunk
.text:00429F30
.text:00429F30 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00429F30 realloc         proc near               ; CODE XREF: sub_412450+30↑p
.text:00429F30                                         ; sub_4124B0+16↑p ...
.text:00429F30
.text:00429F30 Block           = dword ptr  4
.text:00429F30 Size            = dword ptr  8
.text:00429F30
.text:00429F30                 jmp     ds:__imp_realloc
.text:00429F30 realloc         endp
.text:00429F30
.text:00429F30 ; ---------------------------------------------------------------------------
.text:00429F36                 align 10h
.text:00429F40
.text:00429F40 ; =============== S U B R O U T I N E =======================================
.text:00429F40
.text:00429F40 ; Attributes: thunk
.text:00429F40
.text:00429F40 ; struct lconv *__cdecl localeconv()
.text:00429F40 localeconv      proc near               ; CODE XREF: sub_4126F0+A6↑p
.text:00429F40                 jmp     ds:__imp_localeconv
.text:00429F40 localeconv      endp
.text:00429F40
.text:00429F40 ; ---------------------------------------------------------------------------
.text:00429F46                 align 10h
.text:00429F50
.text:00429F50 ; =============== S U B R O U T I N E =======================================
.text:00429F50
.text:00429F50 ; Attributes: thunk
.text:00429F50
.text:00429F50 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00429F50 vfprintf        proc near               ; CODE XREF: sub_4139E0+C1↑p
.text:00429F50                                         ; sub_4161E0+49↑p ...
.text:00429F50
.text:00429F50 Stream          = dword ptr  4
.text:00429F50 Format          = dword ptr  8
.text:00429F50 ArgList         = dword ptr  0Ch
.text:00429F50
.text:00429F50                 jmp     ds:__imp_vfprintf
.text:00429F50 vfprintf        endp
.text:00429F50
.text:00429F50 ; ---------------------------------------------------------------------------
.text:00429F56                 align 10h
.text:00429F60
.text:00429F60 ; =============== S U B R O U T I N E =======================================
.text:00429F60
.text:00429F60 ; Attributes: thunk
.text:00429F60
.text:00429F60 ; unsigned int __cdecl strtoul(const char *String, char **EndPtr, int Radix)
.text:00429F60 strtoul         proc near               ; CODE XREF: sub_413DA0+94↑p
.text:00429F60
.text:00429F60 String          = dword ptr  4
.text:00429F60 EndPtr          = dword ptr  8
.text:00429F60 Radix           = dword ptr  0Ch
.text:00429F60
.text:00429F60                 jmp     ds:__imp_strtoul
.text:00429F60 strtoul         endp
.text:00429F60
.text:00429F60 ; ---------------------------------------------------------------------------
.text:00429F66                 align 10h
.text:00429F70
.text:00429F70 ; =============== S U B R O U T I N E =======================================
.text:00429F70
.text:00429F70 ; Attributes: thunk
.text:00429F70
.text:00429F70 ; int __cdecl fclose(FILE *Stream)
.text:00429F70 fclose          proc near               ; CODE XREF: sub_415220+27↑p
.text:00429F70                                         ; .text:0041C6FE↑p
.text:00429F70
.text:00429F70 Stream          = dword ptr  4
.text:00429F70
.text:00429F70                 jmp     ds:__imp_fclose
.text:00429F70 fclose          endp
.text:00429F70
.text:00429F70 ; ---------------------------------------------------------------------------
.text:00429F76                 align 10h
.text:00429F80
.text:00429F80 ; =============== S U B R O U T I N E =======================================
.text:00429F80
.text:00429F80 ; Attributes: thunk
.text:00429F80
.text:00429F80 ; struct tm *__cdecl gmtime(const __time32_t *const Time)
.text:00429F80 gmtime          proc near               ; CODE XREF: sub_4153C0+12↑p
.text:00429F80
.text:00429F80 Time            = dword ptr  4
.text:00429F80
.text:00429F80                 jmp     ds:__imp_gmtime
.text:00429F80 gmtime          endp
.text:00429F80
.text:00429F80 ; ---------------------------------------------------------------------------
.text:00429F86                 align 10h
.text:00429F90
.text:00429F90 ; =============== S U B R O U T I N E =======================================
.text:00429F90
.text:00429F90 ; Attributes: thunk
.text:00429F90
.text:00429F90 ; char *__cdecl ctime(const __time32_t *const Time)
.text:00429F90 ctime           proc near               ; CODE XREF: .text:0041539A↑p
.text:00429F90                                         ; .text:0041664D↑p ...
.text:00429F90
.text:00429F90 Time            = dword ptr  4
.text:00429F90
.text:00429F90                 jmp     ds:__imp_ctime
.text:00429F90 ctime           endp
.text:00429F90
.text:00429F90 ; ---------------------------------------------------------------------------
.text:00429F96                 align 10h
.text:00429FA0
.text:00429FA0 ; =============== S U B R O U T I N E =======================================
.text:00429FA0
.text:00429FA0 ; Attributes: thunk
.text:00429FA0
.text:00429FA0 ; char *__cdecl asctime(const struct tm *Tm)
.text:00429FA0 asctime         proc near               ; CODE XREF: sub_415360+A↑p
.text:00429FA0
.text:00429FA0 Tm              = dword ptr  4
.text:00429FA0
.text:00429FA0                 jmp     ds:__imp_asctime
.text:00429FA0 asctime         endp
.text:00429FA0
.text:00429FA0 ; ---------------------------------------------------------------------------
.text:00429FA6                 align 10h
.text:00429FB0
.text:00429FB0 ; =============== S U B R O U T I N E =======================================
.text:00429FB0
.text:00429FB0 ; Attributes: thunk
.text:00429FB0
.text:00429FB0 ; char *__cdecl strerror(int ErrorMessage)
.text:00429FB0 strerror        proc near               ; CODE XREF: sub_4161E0+A5↑p
.text:00429FB0                                         ; sub_4162E4+10F↑p
.text:00429FB0
.text:00429FB0 ErrorMessage    = dword ptr  4
.text:00429FB0
.text:00429FB0                 jmp     ds:__imp_strerror
.text:00429FB0 strerror        endp
.text:00429FB0
.text:00429FB0 ; ---------------------------------------------------------------------------
.text:00429FB6                 align 10h
.text:00429FC0
.text:00429FC0 ; =============== S U B R O U T I N E =======================================
.text:00429FC0
.text:00429FC0 ; Attributes: thunk
.text:00429FC0
.text:00429FC0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00429FC0 _get_osfhandle  proc near               ; CODE XREF: sub_4166F0+3A↑p
.text:00429FC0                                         ; sub_41D7C0+15↑p
.text:00429FC0
.text:00429FC0 FileHandle      = dword ptr  4
.text:00429FC0
.text:00429FC0                 jmp     ds:__imp__get_osfhandle
.text:00429FC0 _get_osfhandle  endp
.text:00429FC0
.text:00429FC0 ; ---------------------------------------------------------------------------
.text:00429FC6                 align 10h
.text:00429FD0
.text:00429FD0 ; =============== S U B R O U T I N E =======================================
.text:00429FD0
.text:00429FD0 ; Attributes: thunk
.text:00429FD0
.text:00429FD0 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00429FD0 strstr          proc near               ; CODE XREF: sub_416FA0+3BF↑p
.text:00429FD0                                         ; sub_416FA0+3DC↑p ...
.text:00429FD0
.text:00429FD0 Str             = dword ptr  4
.text:00429FD0 SubStr          = dword ptr  8
.text:00429FD0
.text:00429FD0                 jmp     ds:__imp_strstr
.text:00429FD0 strstr          endp
.text:00429FD0
.text:00429FD0 ; ---------------------------------------------------------------------------
.text:00429FD6                 align 10h
.text:00429FE0
.text:00429FE0 ; =============== S U B R O U T I N E =======================================
.text:00429FE0
.text:00429FE0 ; Attributes: thunk
.text:00429FE0
.text:00429FE0 ; int __cdecl isalpha(int C)
.text:00429FE0 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00429FE0
.text:00429FE0 C               = dword ptr  4
.text:00429FE0
.text:00429FE0                 jmp     ds:__imp_isalpha
.text:00429FE0 isalpha         endp
.text:00429FE0
.text:00429FE0 ; ---------------------------------------------------------------------------
.text:00429FE6                 align 10h
.text:00429FF0
.text:00429FF0 ; =============== S U B R O U T I N E =======================================
.text:00429FF0
.text:00429FF0 ; Attributes: thunk
.text:00429FF0
.text:00429FF0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00429FF0 _stricmp_0      proc near               ; CODE XREF: .text:00418A44↑p
.text:00429FF0
.text:00429FF0 String1         = dword ptr  4
.text:00429FF0 String2         = dword ptr  8
.text:00429FF0
.text:00429FF0                 jmp     ds:__imp__stricmp_0
.text:00429FF0 _stricmp_0      endp
.text:00429FF0
.text:00429FF0 ; ---------------------------------------------------------------------------
.text:00429FF6                 align 10h
.text:0042A000
.text:0042A000 ; =============== S U B R O U T I N E =======================================
.text:0042A000
.text:0042A000 ; Attributes: thunk
.text:0042A000
.text:0042A000 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0042A000 strncat         proc near               ; CODE XREF: sub_418BD0+75↑p
.text:0042A000
.text:0042A000 Destination     = dword ptr  4
.text:0042A000 Source          = dword ptr  8
.text:0042A000 Count           = dword ptr  0Ch
.text:0042A000
.text:0042A000                 jmp     ds:__imp_strncat
.text:0042A000 strncat         endp
.text:0042A000
.text:0042A000 ; ---------------------------------------------------------------------------
.text:0042A006                 align 10h
.text:0042A010
.text:0042A010 ; =============== S U B R O U T I N E =======================================
.text:0042A010
.text:0042A010 ; Attributes: thunk
.text:0042A010
.text:0042A010 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0042A010 sscanf          proc near               ; CODE XREF: .text:0041BD3E↑p
.text:0042A010
.text:0042A010 Buffer          = dword ptr  4
.text:0042A010 Format          = dword ptr  8
.text:0042A010
.text:0042A010                 jmp     ds:__imp_sscanf
.text:0042A010 sscanf          endp
.text:0042A010
.text:0042A010 ; ---------------------------------------------------------------------------
.text:0042A016                 align 10h
.text:0042A020
.text:0042A020 ; =============== S U B R O U T I N E =======================================
.text:0042A020
.text:0042A020 ; Attributes: thunk
.text:0042A020
.text:0042A020 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0042A020 strspn          proc near               ; CODE XREF: .text:0041BB8A↑p
.text:0042A020                                         ; .text:0041BDA4↑p ...
.text:0042A020
.text:0042A020 Str             = dword ptr  4
.text:0042A020 Control         = dword ptr  8
.text:0042A020
.text:0042A020                 jmp     ds:__imp_strspn
.text:0042A020 strspn          endp
.text:0042A020
.text:0042A020 ; ---------------------------------------------------------------------------
.text:0042A026                 align 10h
.text:0042A030
.text:0042A030 ; =============== S U B R O U T I N E =======================================
.text:0042A030
.text:0042A030 ; Attributes: thunk
.text:0042A030
.text:0042A030 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0042A030 fopen           proc near               ; CODE XREF: sub_41C63F+26↑p
.text:0042A030                                         ; sub_41C63F+99↑p
.text:0042A030
.text:0042A030 FileName        = dword ptr  4
.text:0042A030 Mode            = dword ptr  8
.text:0042A030
.text:0042A030                 jmp     ds:__imp_fopen
.text:0042A030 fopen           endp
.text:0042A030
.text:0042A030 ; ---------------------------------------------------------------------------
.text:0042A036                 align 10h
.text:0042A040
.text:0042A040 ; =============== S U B R O U T I N E =======================================
.text:0042A040
.text:0042A040 ; Attributes: thunk
.text:0042A040
.text:0042A040 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0042A040 _filelengthi64  proc near               ; CODE XREF: sub_41D7C0+1F↑p
.text:0042A040
.text:0042A040 FileHandle      = dword ptr  4
.text:0042A040
.text:0042A040                 jmp     ds:__imp__filelengthi64
.text:0042A040 _filelengthi64  endp
.text:0042A040
.text:0042A040 ; ---------------------------------------------------------------------------
.text:0042A046                 align 10h
.text:0042A050
.text:0042A050 ; =============== S U B R O U T I N E =======================================
.text:0042A050
.text:0042A050 ; Attributes: thunk
.text:0042A050
.text:0042A050 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0042A050 strpbrk         proc near               ; CODE XREF: sub_41D820+87↑p
.text:0042A050
.text:0042A050 Str             = dword ptr  4
.text:0042A050 Control         = dword ptr  8
.text:0042A050
.text:0042A050                 jmp     ds:__imp_strpbrk
.text:0042A050 strpbrk         endp
.text:0042A050
.text:0042A050 ; ---------------------------------------------------------------------------
.text:0042A056                 align 10h
.text:0042A060
.text:0042A060 ; =============== S U B R O U T I N E =======================================
.text:0042A060
.text:0042A060 ; Attributes: thunk
.text:0042A060
.text:0042A060 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0042A060 _fdopen         proc near               ; CODE XREF: sub_41D8C0+69↑p
.text:0042A060
.text:0042A060 FileHandle      = dword ptr  4
.text:0042A060 Format          = dword ptr  8
.text:0042A060
.text:0042A060                 jmp     ds:__imp__fdopen
.text:0042A060 _fdopen         endp
.text:0042A060
.text:0042A060 ; ---------------------------------------------------------------------------
.text:0042A066                 align 10h
.text:0042A070
.text:0042A070 ; =============== S U B R O U T I N E =======================================
.text:0042A070
.text:0042A070 ; Attributes: thunk
.text:0042A070
.text:0042A070 ; int __cdecl close(int FileHandle)
.text:0042A070 _close          proc near               ; CODE XREF: sub_41D8C0+90↑p
.text:0042A070
.text:0042A070 FileHandle      = dword ptr  4
.text:0042A070
.text:0042A070                 jmp     ds:__imp__close
.text:0042A070 _close          endp
.text:0042A070
.text:0042A070 ; ---------------------------------------------------------------------------
.text:0042A076                 align 10h
.text:0042A080
.text:0042A080 ; =============== S U B R O U T I N E =======================================
.text:0042A080
.text:0042A080 ; Attributes: thunk
.text:0042A080
.text:0042A080 ; int open(const char *FileName, int OpenFlag, ...)
.text:0042A080 _open           proc near               ; CODE XREF: sub_4270C0:loc_427450↑p
.text:0042A080
.text:0042A080 FileName        = dword ptr  4
.text:0042A080 OpenFlag        = dword ptr  8
.text:0042A080
.text:0042A080                 jmp     ds:__imp__open
.text:0042A080 _open           endp
.text:0042A080
.text:0042A080 ; ---------------------------------------------------------------------------
.text:0042A086                 align 10h
.text:0042A090
.text:0042A090 ; =============== S U B R O U T I N E =======================================
.text:0042A090
.text:0042A090 ; Attributes: thunk
.text:0042A090
.text:0042A090 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0042A090 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0042A090
.text:0042A090 lpTopLevelExceptionFilter= dword ptr  4
.text:0042A090
.text:0042A090                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0042A090 SetUnhandledExceptionFilter endp
.text:0042A090
.text:0042A090 ; ---------------------------------------------------------------------------
.text:0042A096                 align 10h
.text:0042A0A0
.text:0042A0A0 ; =============== S U B R O U T I N E =======================================
.text:0042A0A0
.text:0042A0A0 ; Attributes: noreturn thunk
.text:0042A0A0
.text:0042A0A0 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0042A0A0 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0042A0A0
.text:0042A0A0 uExitCode       = dword ptr  4
.text:0042A0A0
.text:0042A0A0                 jmp     ds:__imp_ExitProcess
.text:0042A0A0 ExitProcess     endp
.text:0042A0A0
.text:0042A0A0 ; ---------------------------------------------------------------------------
.text:0042A0A6                 align 10h
.text:0042A0B0
.text:0042A0B0 ; =============== S U B R O U T I N E =======================================
.text:0042A0B0
.text:0042A0B0 ; Attributes: thunk
.text:0042A0B0
.text:0042A0B0 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0042A0B0 GetModuleHandleA proc near              ; CODE XREF: sub_4167E0+18↑p
.text:0042A0B0                                         ; sub_416FA0+329↑p ...
.text:0042A0B0
.text:0042A0B0 lpModuleName    = dword ptr  4
.text:0042A0B0
.text:0042A0B0                 jmp     ds:__imp_GetModuleHandleA
.text:0042A0B0 GetModuleHandleA endp
.text:0042A0B0
.text:0042A0B0 ; ---------------------------------------------------------------------------
.text:0042A0B6                 align 10h
.text:0042A0C0
.text:0042A0C0 ; =============== S U B R O U T I N E =======================================
.text:0042A0C0
.text:0042A0C0 ; Attributes: thunk
.text:0042A0C0
.text:0042A0C0 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0042A0C0 GetProcAddress  proc near               ; CODE XREF: sub_4167E0+33↑p
.text:0042A0C0                                         ; sub_416950+2E↑p ...
.text:0042A0C0
.text:0042A0C0 hModule         = dword ptr  4
.text:0042A0C0 lpProcName      = dword ptr  8
.text:0042A0C0
.text:0042A0C0                 jmp     ds:__imp_GetProcAddress
.text:0042A0C0 GetProcAddress  endp
.text:0042A0C0
.text:0042A0C0 ; ---------------------------------------------------------------------------
.text:0042A0C6                 align 10h
.text:0042A0D0
.text:0042A0D0 ; =============== S U B R O U T I N E =======================================
.text:0042A0D0
.text:0042A0D0 ; Attributes: thunk
.text:0042A0D0
.text:0042A0D0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0042A0D0 GetFileAttributesA proc near            ; CODE XREF: sub_4167E0+47↑p
.text:0042A0D0                                         ; sub_41A780+65↑p ...
.text:0042A0D0
.text:0042A0D0 lpFileName      = dword ptr  4
.text:0042A0D0
.text:0042A0D0                 jmp     ds:__imp_GetFileAttributesA
.text:0042A0D0 GetFileAttributesA endp
.text:0042A0D0
.text:0042A0D0 ; ---------------------------------------------------------------------------
.text:0042A0D6                 align 10h
.text:0042A0E0
.text:0042A0E0 ; =============== S U B R O U T I N E =======================================
.text:0042A0E0
.text:0042A0E0 ; Attributes: thunk
.text:0042A0E0
.text:0042A0E0 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0042A0E0 FreeLibrary     proc near               ; CODE XREF: sub_4167E0+A4↑p
.text:0042A0E0                                         ; sub_416950+11D↑p ...
.text:0042A0E0
.text:0042A0E0 hLibModule      = dword ptr  4
.text:0042A0E0
.text:0042A0E0                 jmp     ds:__imp_FreeLibrary
.text:0042A0E0 FreeLibrary     endp
.text:0042A0E0
.text:0042A0E0 ; ---------------------------------------------------------------------------
.text:0042A0E6                 align 10h
.text:0042A0F0
.text:0042A0F0 ; =============== S U B R O U T I N E =======================================
.text:0042A0F0
.text:0042A0F0 ; Attributes: thunk
.text:0042A0F0
.text:0042A0F0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0042A0F0 FindFirstFileA  proc near               ; CODE XREF: sub_4167E0+CE↑p
.text:0042A0F0                                         ; sub_416950+14F↑p ...
.text:0042A0F0
.text:0042A0F0 lpFileName      = dword ptr  4
.text:0042A0F0 lpFindFileData  = dword ptr  8
.text:0042A0F0
.text:0042A0F0                 jmp     ds:__imp_FindFirstFileA
.text:0042A0F0 FindFirstFileA  endp
.text:0042A0F0
.text:0042A0F0 ; ---------------------------------------------------------------------------
.text:0042A0F6                 align 10h
.text:0042A100
.text:0042A100 ; =============== S U B R O U T I N E =======================================
.text:0042A100
.text:0042A100 ; Attributes: thunk
.text:0042A100
.text:0042A100 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0042A100 FindClose       proc near               ; CODE XREF: sub_4167E0+123↑p
.text:0042A100                                         ; sub_416950+10E↑p ...
.text:0042A100
.text:0042A100 hFindFile       = dword ptr  4
.text:0042A100
.text:0042A100                 jmp     ds:__imp_FindClose
.text:0042A100 FindClose       endp
.text:0042A100
.text:0042A100 ; ---------------------------------------------------------------------------
.text:0042A106                 align 10h
.text:0042A110
.text:0042A110 ; =============== S U B R O U T I N E =======================================
.text:0042A110
.text:0042A110 ; Attributes: thunk
.text:0042A110
.text:0042A110 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0042A110 LoadLibraryA    proc near               ; CODE XREF: sub_416950+13↑p
.text:0042A110                                         ; sub_416FA0+134↑p ...
.text:0042A110
.text:0042A110 lpLibFileName   = dword ptr  4
.text:0042A110
.text:0042A110                 jmp     ds:__imp_LoadLibraryA
.text:0042A110 LoadLibraryA    endp
.text:0042A110
.text:0042A110 ; ---------------------------------------------------------------------------
.text:0042A116                 align 10h
.text:0042A120
.text:0042A120 ; =============== S U B R O U T I N E =======================================
.text:0042A120
.text:0042A120 ; Attributes: thunk
.text:0042A120
.text:0042A120 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0042A120 FindNextFileA   proc near               ; CODE XREF: sub_416950+FF↑p
.text:0042A120                                         ; sub_418BD0+36↑p
.text:0042A120
.text:0042A120 hFindFile       = dword ptr  4
.text:0042A120 lpFindFileData  = dword ptr  8
.text:0042A120
.text:0042A120                 jmp     ds:__imp_FindNextFileA
.text:0042A120 FindNextFileA   endp
.text:0042A120
.text:0042A120 ; ---------------------------------------------------------------------------
.text:0042A126                 align 10h
.text:0042A130
.text:0042A130 ; =============== S U B R O U T I N E =======================================
.text:0042A130
.text:0042A130 ; Attributes: thunk
.text:0042A130
.text:0042A130 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0042A130 GetFileType     proc near               ; CODE XREF: sub_416AD0+43↑p
.text:0042A130                                         ; .text:0041778A↑p
.text:0042A130
.text:0042A130 hFile           = dword ptr  4
.text:0042A130
.text:0042A130                 jmp     ds:__imp_GetFileType
.text:0042A130 GetFileType     endp
.text:0042A130
.text:0042A130 ; ---------------------------------------------------------------------------
.text:0042A136                 align 10h
.text:0042A140
.text:0042A140 ; =============== S U B R O U T I N E =======================================
.text:0042A140
.text:0042A140 ; Attributes: thunk
.text:0042A140
.text:0042A140 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0042A140 GetFileInformationByHandle proc near    ; CODE XREF: sub_416AD0+69↑p
.text:0042A140
.text:0042A140 hFile           = dword ptr  4
.text:0042A140 lpFileInformation= dword ptr  8
.text:0042A140
.text:0042A140                 jmp     ds:__imp_GetFileInformationByHandle
.text:0042A140 GetFileInformationByHandle endp
.text:0042A140
.text:0042A140 ; ---------------------------------------------------------------------------
.text:0042A146                 align 10h
.text:0042A150
.text:0042A150 ; =============== S U B R O U T I N E =======================================
.text:0042A150
.text:0042A150 ; Attributes: thunk
.text:0042A150
.text:0042A150 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0042A150 GetFileSize     proc near               ; CODE XREF: sub_416AD0+3F2↑p
.text:0042A150
.text:0042A150 hFile           = dword ptr  4
.text:0042A150 lpFileSizeHigh  = dword ptr  8
.text:0042A150
.text:0042A150                 jmp     ds:__imp_GetFileSize
.text:0042A150 GetFileSize     endp
.text:0042A150
.text:0042A150 ; ---------------------------------------------------------------------------
.text:0042A156                 align 10h
.text:0042A160
.text:0042A160 ; =============== S U B R O U T I N E =======================================
.text:0042A160
.text:0042A160 ; Attributes: thunk
.text:0042A160
.text:0042A160 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0042A160 PeekNamedPipe   proc near               ; CODE XREF: sub_416AD0+439↑p
.text:0042A160
.text:0042A160 hNamedPipe      = dword ptr  4
.text:0042A160 lpBuffer        = dword ptr  8
.text:0042A160 nBufferSize     = dword ptr  0Ch
.text:0042A160 lpBytesRead     = dword ptr  10h
.text:0042A160 lpTotalBytesAvail= dword ptr  14h
.text:0042A160 lpBytesLeftThisMessage= dword ptr  18h
.text:0042A160
.text:0042A160                 jmp     ds:__imp_PeekNamedPipe
.text:0042A160 PeekNamedPipe   endp
.text:0042A160
.text:0042A160 ; ---------------------------------------------------------------------------
.text:0042A166                 align 10h
.text:0042A170
.text:0042A170 ; =============== S U B R O U T I N E =======================================
.text:0042A170
.text:0042A170 ; Attributes: thunk
.text:0042A170
.text:0042A170 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0042A170 GetDriveTypeA   proc near               ; CODE XREF: sub_416FA0+4C↑p
.text:0042A170
.text:0042A170 lpRootPathName  = dword ptr  4
.text:0042A170
.text:0042A170                 jmp     ds:__imp_GetDriveTypeA
.text:0042A170 GetDriveTypeA   endp
.text:0042A170
.text:0042A170 ; ---------------------------------------------------------------------------
.text:0042A176                 align 10h
.text:0042A180
.text:0042A180 ; =============== S U B R O U T I N E =======================================
.text:0042A180
.text:0042A180 ; Attributes: thunk
.text:0042A180
.text:0042A180 ; DWORD __stdcall GetLastError()
.text:0042A180 GetLastError    proc near               ; CODE XREF: sub_416FA0:loc_417229↑p
.text:0042A180                                         ; .text:loc_417D6D↑p ...
.text:0042A180                 jmp     ds:__imp_GetLastError
.text:0042A180 GetLastError    endp
.text:0042A180
.text:0042A180 ; ---------------------------------------------------------------------------
.text:0042A186                 align 10h
.text:0042A190
.text:0042A190 ; =============== S U B R O U T I N E =======================================
.text:0042A190
.text:0042A190 ; Attributes: thunk
.text:0042A190
.text:0042A190 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0042A190 GetVolumeInformationA proc near         ; CODE XREF: sub_4174A0+64↑p
.text:0042A190                                         ; .text:00417A4C↑p ...
.text:0042A190
.text:0042A190 lpRootPathName  = dword ptr  4
.text:0042A190 lpVolumeNameBuffer= dword ptr  8
.text:0042A190 nVolumeNameSize = dword ptr  0Ch
.text:0042A190 lpVolumeSerialNumber= dword ptr  10h
.text:0042A190 lpMaximumComponentLength= dword ptr  14h
.text:0042A190 lpFileSystemFlags= dword ptr  18h
.text:0042A190 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0042A190 nFileSystemNameSize= dword ptr  20h
.text:0042A190
.text:0042A190                 jmp     ds:__imp_GetVolumeInformationA
.text:0042A190 GetVolumeInformationA endp
.text:0042A190
.text:0042A190 ; ---------------------------------------------------------------------------
.text:0042A196                 align 10h
.text:0042A1A0
.text:0042A1A0 ; =============== S U B R O U T I N E =======================================
.text:0042A1A0
.text:0042A1A0 ; Attributes: thunk
.text:0042A1A0
.text:0042A1A0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0042A1A0 CreateFileA     proc near               ; CODE XREF: sub_418300-CA↑p
.text:0042A1A0                                         ; .text:00419643↑p ...
.text:0042A1A0
.text:0042A1A0 lpFileName      = dword ptr  4
.text:0042A1A0 dwDesiredAccess = dword ptr  8
.text:0042A1A0 dwShareMode     = dword ptr  0Ch
.text:0042A1A0 lpSecurityAttributes= dword ptr  10h
.text:0042A1A0 dwCreationDisposition= dword ptr  14h
.text:0042A1A0 dwFlagsAndAttributes= dword ptr  18h
.text:0042A1A0 hTemplateFile   = dword ptr  1Ch
.text:0042A1A0
.text:0042A1A0                 jmp     ds:__imp_CreateFileA
.text:0042A1A0 CreateFileA     endp
.text:0042A1A0
.text:0042A1A0 ; ---------------------------------------------------------------------------
.text:0042A1A6                 align 10h
.text:0042A1B0
.text:0042A1B0 ; =============== S U B R O U T I N E =======================================
.text:0042A1B0
.text:0042A1B0 ; Attributes: thunk
.text:0042A1B0
.text:0042A1B0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0042A1B0 CloseHandle     proc near               ; CODE XREF: sub_418300-AF↑p
.text:0042A1B0                                         ; .text:004196B9↑p ...
.text:0042A1B0
.text:0042A1B0 hObject         = dword ptr  4
.text:0042A1B0
.text:0042A1B0                 jmp     ds:__imp_CloseHandle
.text:0042A1B0 CloseHandle     endp
.text:0042A1B0
.text:0042A1B0 ; ---------------------------------------------------------------------------
.text:0042A1B6                 align 10h
.text:0042A1C0
.text:0042A1C0 ; =============== S U B R O U T I N E =======================================
.text:0042A1C0
.text:0042A1C0 ; Attributes: thunk
.text:0042A1C0
.text:0042A1C0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0042A1C0 SetErrorMode    proc near               ; CODE XREF: sub_418300-7A↑p
.text:0042A1C0                                         ; sub_418F30+80↑p ...
.text:0042A1C0
.text:0042A1C0 uMode           = dword ptr  4
.text:0042A1C0
.text:0042A1C0                 jmp     ds:__imp_SetErrorMode
.text:0042A1C0 SetErrorMode    endp
.text:0042A1C0
.text:0042A1C0 ; ---------------------------------------------------------------------------
.text:0042A1C6                 align 10h
.text:0042A1D0
.text:0042A1D0 ; =============== S U B R O U T I N E =======================================
.text:0042A1D0
.text:0042A1D0 ; Attributes: thunk
.text:0042A1D0
.text:0042A1D0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0042A1D0 GetModuleFileNameA proc near            ; CODE XREF: sub_4188C0+1C↑p
.text:0042A1D0
.text:0042A1D0 hModule         = dword ptr  4
.text:0042A1D0 lpFilename      = dword ptr  8
.text:0042A1D0 nSize           = dword ptr  0Ch
.text:0042A1D0
.text:0042A1D0                 jmp     ds:__imp_GetModuleFileNameA
.text:0042A1D0 GetModuleFileNameA endp
.text:0042A1D0
.text:0042A1D0 ; ---------------------------------------------------------------------------
.text:0042A1D6                 align 10h
.text:0042A1E0
.text:0042A1E0 ; =============== S U B R O U T I N E =======================================
.text:0042A1E0
.text:0042A1E0 ; Attributes: thunk
.text:0042A1E0
.text:0042A1E0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0042A1E0 GetShortPathNameA proc near             ; CODE XREF: .text:00418B46↑p
.text:0042A1E0                                         ; .text:00418B70↑p
.text:0042A1E0
.text:0042A1E0 lpszLongPath    = dword ptr  4
.text:0042A1E0 lpszShortPath   = dword ptr  8
.text:0042A1E0 cchBuffer       = dword ptr  0Ch
.text:0042A1E0
.text:0042A1E0                 jmp     ds:__imp_GetShortPathNameA
.text:0042A1E0 GetShortPathNameA endp
.text:0042A1E0
.text:0042A1E0 ; ---------------------------------------------------------------------------
.text:0042A1E6                 align 10h
.text:0042A1F0
.text:0042A1F0 ; =============== S U B R O U T I N E =======================================
.text:0042A1F0
.text:0042A1F0 ; Attributes: thunk
.text:0042A1F0
.text:0042A1F0 ; BOOL __stdcall AreFileApisANSI()
.text:0042A1F0 AreFileApisANSI proc near               ; CODE XREF: sub_418DB0+89↑p
.text:0042A1F0                 jmp     ds:__imp_AreFileApisANSI
.text:0042A1F0 AreFileApisANSI endp
.text:0042A1F0
.text:0042A1F0 ; ---------------------------------------------------------------------------
.text:0042A1F6                 align 10h
.text:0042A200
.text:0042A200 ; =============== S U B R O U T I N E =======================================
.text:0042A200
.text:0042A200 ; Attributes: thunk
.text:0042A200
.text:0042A200 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0042A200 MultiByteToWideChar proc near           ; CODE XREF: sub_418DB0+BD↑p
.text:0042A200
.text:0042A200 CodePage        = dword ptr  4
.text:0042A200 dwFlags         = dword ptr  8
.text:0042A200 lpMultiByteStr  = dword ptr  0Ch
.text:0042A200 cbMultiByte     = dword ptr  10h
.text:0042A200 lpWideCharStr   = dword ptr  14h
.text:0042A200 cchWideChar     = dword ptr  18h
.text:0042A200
.text:0042A200                 jmp     ds:__imp_MultiByteToWideChar
.text:0042A200 MultiByteToWideChar endp
.text:0042A200
.text:0042A200 ; ---------------------------------------------------------------------------
.text:0042A206                 align 10h
.text:0042A210
.text:0042A210 ; =============== S U B R O U T I N E =======================================
.text:0042A210
.text:0042A210 ; Attributes: thunk
.text:0042A210
.text:0042A210 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0042A210 lstrcpyA        proc near               ; CODE XREF: sub_418DB0+128↑p
.text:0042A210
.text:0042A210 lpString1       = dword ptr  4
.text:0042A210 lpString2       = dword ptr  8
.text:0042A210
.text:0042A210                 jmp     ds:__imp_lstrcpyA
.text:0042A210 lstrcpyA        endp
.text:0042A210
.text:0042A210 ; ---------------------------------------------------------------------------
.text:0042A216                 align 10h
.text:0042A220
.text:0042A220 ; =============== S U B R O U T I N E =======================================
.text:0042A220
.text:0042A220 ; Attributes: thunk
.text:0042A220
.text:0042A220 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0042A220 GetCurrentDirectoryA proc near          ; CODE XREF: .text:004192C8↑p
.text:0042A220                                         ; .text:004192E4↑p ...
.text:0042A220
.text:0042A220 nBufferLength   = dword ptr  4
.text:0042A220 lpBuffer        = dword ptr  8
.text:0042A220
.text:0042A220                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0042A220 GetCurrentDirectoryA endp
.text:0042A220
.text:0042A220 ; ---------------------------------------------------------------------------
.text:0042A226                 align 10h
.text:0042A230
.text:0042A230 ; =============== S U B R O U T I N E =======================================
.text:0042A230
.text:0042A230 ; Attributes: thunk
.text:0042A230
.text:0042A230 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0042A230 DeviceIoControl proc near               ; CODE XREF: .text:004196AC↑p
.text:0042A230                                         ; sub_419A70+1E5↑p
.text:0042A230
.text:0042A230 hDevice         = dword ptr  4
.text:0042A230 dwIoControlCode = dword ptr  8
.text:0042A230 lpInBuffer      = dword ptr  0Ch
.text:0042A230 nInBufferSize   = dword ptr  10h
.text:0042A230 lpOutBuffer     = dword ptr  14h
.text:0042A230 nOutBufferSize  = dword ptr  18h
.text:0042A230 lpBytesReturned = dword ptr  1Ch
.text:0042A230 lpOverlapped    = dword ptr  20h
.text:0042A230
.text:0042A230                 jmp     ds:__imp_DeviceIoControl
.text:0042A230 DeviceIoControl endp
.text:0042A230
.text:0042A230 ; ---------------------------------------------------------------------------
.text:0042A236                 align 10h
.text:0042A240
.text:0042A240 ; =============== S U B R O U T I N E =======================================
.text:0042A240
.text:0042A240 ; Attributes: thunk
.text:0042A240
.text:0042A240 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0042A240 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00419A03↑p
.text:0042A240                                         ; sub_419A70+7B↑p ...
.text:0042A240
.text:0042A240 lpRootPathName  = dword ptr  4
.text:0042A240 lpSectorsPerCluster= dword ptr  8
.text:0042A240 lpBytesPerSector= dword ptr  0Ch
.text:0042A240 lpNumberOfFreeClusters= dword ptr  10h
.text:0042A240 lpTotalNumberOfClusters= dword ptr  14h
.text:0042A240
.text:0042A240                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0042A240 GetDiskFreeSpaceA endp
.text:0042A240
.text:0042A240 ; ---------------------------------------------------------------------------
.text:0042A246                 align 10h
.text:0042A250
.text:0042A250 ; =============== S U B R O U T I N E =======================================
.text:0042A250
.text:0042A250 ; Attributes: thunk
.text:0042A250
.text:0042A250 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0042A250 GetFullPathNameA proc near              ; CODE XREF: sub_41AD90+45↑p
.text:0042A250                                         ; sub_41AD90+ED↑p
.text:0042A250
.text:0042A250 lpFileName      = dword ptr  4
.text:0042A250 nBufferLength   = dword ptr  8
.text:0042A250 lpBuffer        = dword ptr  0Ch
.text:0042A250 lpFilePart      = dword ptr  10h
.text:0042A250
.text:0042A250                 jmp     ds:__imp_GetFullPathNameA
.text:0042A250 GetFullPathNameA endp
.text:0042A250
.text:0042A250 ; ---------------------------------------------------------------------------
.text:0042A256                 align 10h
.text:0042A260
.text:0042A260 ; =============== S U B R O U T I N E =======================================
.text:0042A260
.text:0042A260 ; Attributes: thunk
.text:0042A260
.text:0042A260 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0042A260 lstrcmpiA       proc near               ; CODE XREF: .text:0041B44B↑p
.text:0042A260                                         ; .text:0041B462↑p ...
.text:0042A260
.text:0042A260 lpString1       = dword ptr  4
.text:0042A260 lpString2       = dword ptr  8
.text:0042A260
.text:0042A260                 jmp     ds:__imp_lstrcmpiA
.text:0042A260 lstrcmpiA       endp
.text:0042A260
.text:0042A260 ; ---------------------------------------------------------------------------
.text:0042A266                 align 10h
.text:0042A270
.text:0042A270 ; =============== S U B R O U T I N E =======================================
.text:0042A270
.text:0042A270 ; Attributes: thunk
.text:0042A270
.text:0042A270 ; DWORD __stdcall GetVersion()
.text:0042A270 GetVersion      proc near               ; CODE XREF: .text:0041B7D3↑p
.text:0042A270                 jmp     ds:__imp_GetVersion
.text:0042A270 GetVersion      endp
.text:0042A270
.text:0042A270 ; ---------------------------------------------------------------------------
.text:0042A276                 align 10h
.text:0042A280
.text:0042A280 ; =============== S U B R O U T I N E =======================================
.text:0042A280
.text:0042A280 ; Attributes: thunk
.text:0042A280
.text:0042A280 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0042A280 GetVersionExA   proc near               ; CODE XREF: sub_41B860+32↑p
.text:0042A280                                         ; sub_41B860+20B↑p
.text:0042A280
.text:0042A280 lpVersionInformation= dword ptr  4
.text:0042A280
.text:0042A280                 jmp     ds:__imp_GetVersionExA
.text:0042A280 GetVersionExA   endp
.text:0042A280
.text:0042A280 ; ---------------------------------------------------------------------------
.text:0042A286                 align 10h
.text:0042A290
.text:0042A290 ; =============== S U B R O U T I N E =======================================
.text:0042A290
.text:0042A290 ; Attributes: thunk
.text:0042A290
.text:0042A290 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0042A290 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041BEFF↑p
.text:0042A290                                         ; .text:0041BF2E↑p ...
.text:0042A290
.text:0042A290 nBufferLength   = dword ptr  4
.text:0042A290 lpBuffer        = dword ptr  8
.text:0042A290
.text:0042A290                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0042A290 GetLogicalDriveStringsA endp
.text:0042A290
.text:0042A290 ; ---------------------------------------------------------------------------
.text:0042A296                 align 10h
.text:0042A2A0
.text:0042A2A0 ; =============== S U B R O U T I N E =======================================
.text:0042A2A0
.text:0042A2A0 ; Attributes: thunk
.text:0042A2A0
.text:0042A2A0 ; HANDLE __stdcall GetProcessHeap()
.text:0042A2A0 GetProcessHeap  proc near               ; CODE XREF: .text:0041BF09↑p
.text:0042A2A0                                         ; sub_41C5E0+24↑p ...
.text:0042A2A0                 jmp     ds:__imp_GetProcessHeap
.text:0042A2A0 GetProcessHeap  endp
.text:0042A2A0
.text:0042A2A0 ; ---------------------------------------------------------------------------
.text:0042A2A6                 align 10h
.text:0042A2B0
.text:0042A2B0 ; =============== S U B R O U T I N E =======================================
.text:0042A2B0
.text:0042A2B0 ; Attributes: thunk
.text:0042A2B0
.text:0042A2B0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0042A2B0 HeapAlloc       proc near               ; CODE XREF: .text:0041BF1D↑p
.text:0042A2B0                                         ; sub_41C5E0+38↑p ...
.text:0042A2B0
.text:0042A2B0 hHeap           = dword ptr  4
.text:0042A2B0 dwFlags         = dword ptr  8
.text:0042A2B0 dwBytes         = dword ptr  0Ch
.text:0042A2B0
.text:0042A2B0                 jmp     ds:__imp_HeapAlloc
.text:0042A2B0 HeapAlloc       endp
.text:0042A2B0
.text:0042A2B0 ; ---------------------------------------------------------------------------
.text:0042A2B6                 align 10h
.text:0042A2C0
.text:0042A2C0 ; =============== S U B R O U T I N E =======================================
.text:0042A2C0
.text:0042A2C0 ; Attributes: thunk
.text:0042A2C0
.text:0042A2C0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0042A2C0 HeapFree        proc near               ; CODE XREF: .text:0041C71D↑p
.text:0042A2C0
.text:0042A2C0 hHeap           = dword ptr  4
.text:0042A2C0 dwFlags         = dword ptr  8
.text:0042A2C0 lpMem           = dword ptr  0Ch
.text:0042A2C0
.text:0042A2C0                 jmp     ds:__imp_HeapFree
.text:0042A2C0 HeapFree        endp
.text:0042A2C0
.text:0042A2C0 ; ---------------------------------------------------------------------------
.text:0042A2C6                 align 10h
.text:0042A2D0
.text:0042A2D0 ; =============== S U B R O U T I N E =======================================
.text:0042A2D0
.text:0042A2D0 ; Attributes: thunk
.text:0042A2D0
.text:0042A2D0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0042A2D0 GetTimeZoneInformation proc near        ; CODE XREF: sub_41C7C0+22↑p
.text:0042A2D0
.text:0042A2D0 lpTimeZoneInformation= dword ptr  4
.text:0042A2D0
.text:0042A2D0                 jmp     ds:__imp_GetTimeZoneInformation
.text:0042A2D0 GetTimeZoneInformation endp
.text:0042A2D0
.text:0042A2D0 ; ---------------------------------------------------------------------------
.text:0042A2D6                 align 10h
.text:0042A2E0
.text:0042A2E0 ; =============== S U B R O U T I N E =======================================
.text:0042A2E0
.text:0042A2E0 ; Attributes: thunk
.text:0042A2E0
.text:0042A2E0 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0042A2E0 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_41C7C0+4F↑p
.text:0042A2E0
.text:0042A2E0 lpSystemTimeAsFileTime= dword ptr  4
.text:0042A2E0
.text:0042A2E0                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0042A2E0 GetSystemTimeAsFileTime endp
.text:0042A2E0
.text:0042A2E0 ; ---------------------------------------------------------------------------
.text:0042A2E6                 align 10h
.text:0042A2F0
.text:0042A2F0 ; =============== S U B R O U T I N E =======================================
.text:0042A2F0
.text:0042A2F0 ; Attributes: thunk
.text:0042A2F0
.text:0042A2F0 ; BOOL __stdcall QueryPerformanceFrequency(LARGE_INTEGER *lpFrequency)
.text:0042A2F0 QueryPerformanceFrequency proc near     ; CODE XREF: sub_41C8B0+27↑p
.text:0042A2F0
.text:0042A2F0 lpFrequency     = dword ptr  4
.text:0042A2F0
.text:0042A2F0                 jmp     ds:__imp_QueryPerformanceFrequency
.text:0042A2F0 QueryPerformanceFrequency endp
.text:0042A2F0
.text:0042A2F0 ; ---------------------------------------------------------------------------
.text:0042A2F6                 align 10h
.text:0042A300
.text:0042A300 ; =============== S U B R O U T I N E =======================================
.text:0042A300
.text:0042A300 ; Attributes: thunk
.text:0042A300
.text:0042A300 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0042A300 UnlockFile      proc near               ; CODE XREF: sub_41D7C0+40↑p
.text:0042A300
.text:0042A300 hFile           = dword ptr  4
.text:0042A300 dwFileOffsetLow = dword ptr  8
.text:0042A300 dwFileOffsetHigh= dword ptr  0Ch
.text:0042A300 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0042A300 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0042A300
.text:0042A300                 jmp     ds:__imp_UnlockFile
.text:0042A300 UnlockFile      endp
.text:0042A300
.text:0042A300 ; ---------------------------------------------------------------------------
.text:0042A306                 align 10h
.text:0042A310
.text:0042A310 ; =============== S U B R O U T I N E =======================================
.text:0042A310
.text:0042A310 ; Attributes: thunk
.text:0042A310
.text:0042A310 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0042A310 GetSystemInfo   proc near               ; CODE XREF: sub_426B20+3A↑p
.text:0042A310                                         ; sub_426B70+3A↑p ...
.text:0042A310
.text:0042A310 lpSystemInfo    = dword ptr  4
.text:0042A310
.text:0042A310                 jmp     ds:__imp_GetSystemInfo
.text:0042A310 GetSystemInfo   endp
.text:0042A310
.text:0042A310 ; ---------------------------------------------------------------------------
.text:0042A316                 align 10h
.text:0042A320
.text:0042A320 ; =============== S U B R O U T I N E =======================================
.text:0042A320
.text:0042A320 ; Attributes: thunk
.text:0042A320
.text:0042A320 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0042A320 CreateDirectoryA proc near              ; CODE XREF: sub_4274F0+22↑p
.text:0042A320
.text:0042A320 lpPathName      = dword ptr  4
.text:0042A320 lpSecurityAttributes= dword ptr  8
.text:0042A320
.text:0042A320                 jmp     ds:__imp_CreateDirectoryA
.text:0042A320 CreateDirectoryA endp
.text:0042A320
.text:0042A320 ; ---------------------------------------------------------------------------
.text:0042A326                 align 10h
.text:0042A330
.text:0042A330 ; =============== S U B R O U T I N E =======================================
.text:0042A330
.text:0042A330 ; Attributes: thunk
.text:0042A330
.text:0042A330 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0042A330 RegOpenKeyExA   proc near               ; CODE XREF: .text:0041B3D1↑p
.text:0042A330
.text:0042A330 hKey            = dword ptr  4
.text:0042A330 lpSubKey        = dword ptr  8
.text:0042A330 ulOptions       = dword ptr  0Ch
.text:0042A330 samDesired      = dword ptr  10h
.text:0042A330 phkResult       = dword ptr  14h
.text:0042A330
.text:0042A330                 jmp     ds:__imp_RegOpenKeyExA
.text:0042A330 RegOpenKeyExA   endp
.text:0042A330
.text:0042A330 ; ---------------------------------------------------------------------------
.text:0042A336                 align 10h
.text:0042A340
.text:0042A340 ; =============== S U B R O U T I N E =======================================
.text:0042A340
.text:0042A340 ; Attributes: thunk
.text:0042A340
.text:0042A340 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0042A340 RegQueryValueExA proc near              ; CODE XREF: .text:0041B414↑p
.text:0042A340
.text:0042A340 hKey            = dword ptr  4
.text:0042A340 lpValueName     = dword ptr  8
.text:0042A340 lpReserved      = dword ptr  0Ch
.text:0042A340 lpType          = dword ptr  10h
.text:0042A340 lpData          = dword ptr  14h
.text:0042A340 lpcbData        = dword ptr  18h
.text:0042A340
.text:0042A340                 jmp     ds:__imp_RegQueryValueExA
.text:0042A340 RegQueryValueExA endp
.text:0042A340
.text:0042A340 ; ---------------------------------------------------------------------------
.text:0042A346                 align 10h
.text:0042A350
.text:0042A350 ; =============== S U B R O U T I N E =======================================
.text:0042A350
.text:0042A350 ; Attributes: thunk
.text:0042A350
.text:0042A350 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0042A350 RegCloseKey     proc near               ; CODE XREF: .text:0041B438↑p
.text:0042A350
.text:0042A350 hKey            = dword ptr  4
.text:0042A350
.text:0042A350                 jmp     ds:__imp_RegCloseKey
.text:0042A350 RegCloseKey     endp
.text:0042A350
.text:0042A350 ; ---------------------------------------------------------------------------
.text:0042A356                 align 10h
.text:0042A360
.text:0042A360 ; =============== S U B R O U T I N E =======================================
.text:0042A360
.text:0042A360 ; Attributes: thunk
.text:0042A360
.text:0042A360 ; BOOL __stdcall GetUserNameA(LPSTR lpBuffer, LPDWORD pcbBuffer)
.text:0042A360 GetUserNameA    proc near               ; CODE XREF: sub_426CA0+1E↑p
.text:0042A360
.text:0042A360 lpBuffer        = dword ptr  4
.text:0042A360 pcbBuffer       = dword ptr  8
.text:0042A360
.text:0042A360                 jmp     ds:__imp_GetUserNameA
.text:0042A360 GetUserNameA    endp
.text:0042A360
.text:0042A360 ; ---------------------------------------------------------------------------
.text:0042A366                 db 2 dup(90h)
.text:0042A368                 dd 2 dup(0)
.text:0042A370                 dd 21400h, 0
.text:0042A378                 dd 0C0h, 46000000h
.text:0042A380 ; const IID rclsid
.text:0042A380 rclsid          dd 21401h               ; Data1
.text:0042A380                                         ; DATA XREF: sub_418DB0+4B↑o
.text:0042A380                 dw 0                    ; Data2
.text:0042A380                 dw 0                    ; Data3
.text:0042A380                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0042A390                 dd 214A0h, 0
.text:0042A398                 dd 0C0h, 46000000h, 214A1h, 0
.text:0042A3A8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0042A3B8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0042A3C8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0042A3D8                 dd 0C0h, 46000000h, 214E1h, 0
.text:0042A3E8                 dd 0C0h, 46000000h, 214E2h, 0
.text:0042A3F8                 dd 0C0h, 46000000h, 214E3h, 0
.text:0042A408                 dd 0C0h, 46000000h, 214E4h, 0
.text:0042A418                 dd 0C0h, 46000000h, 21500h, 0
.text:0042A428                 dd 0C0h, 46000000h, 214E5h, 0
.text:0042A438                 dd 0C0h, 46000000h, 214E6h, 0
.text:0042A448                 dd 0C0h, 46000000h, 214E8h, 0
.text:0042A458                 dd 0C0h, 46000000h, 214E9h, 0
.text:0042A468                 dd 0C0h, 46000000h, 214EAh, 0
.text:0042A478                 dd 0C0h, 46000000h, 214EBh, 0
.text:0042A488                 dd 0C0h, 46000000h
.text:0042A490 ; const IID riid
.text:0042A490 riid            dd 214EEh               ; Data1
.text:0042A490                                         ; DATA XREF: sub_418DB0+2B↑o
.text:0042A490                 dw 0                    ; Data2
.text:0042A490                 dw 0                    ; Data3
.text:0042A490                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0042A4A0                 dd 214EFh, 0
.text:0042A4A8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0042A4B8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0042A4C8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0042A4D8                 dd 0C0h, 46000000h, 214F3h, 0
.text:0042A4E8                 dd 0C0h, 46000000h, 214F4h, 0
.text:0042A4F8                 dd 0C0h, 46000000h, 214F5h, 0
.text:0042A508                 dd 0C0h, 46000000h, 214F6h, 0
.text:0042A518                 dd 0C0h, 46000000h, 214F7h, 0
.text:0042A528                 dd 0C0h, 46000000h, 214F8h, 0
.text:0042A538                 dd 0C0h, 46000000h, 214F9h, 0
.text:0042A548                 dd 0C0h, 46000000h, 214FAh, 0
.text:0042A558                 dd 0C0h, 46000000h, 214FBh, 0
.text:0042A568                 dd 0C0h, 46000000h, 214FCh, 0
.text:0042A578                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0042A578                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0042A578                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0042A578                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0042A578                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0042A578                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0042A578                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0042A578                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0042A578                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0042A578                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0042A648                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0042A658                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0042A668                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0042A678                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0042A688                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0042A688                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0042A688                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0042A688                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0042A688                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0042A688                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0042A688                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0042A710 dword_42A710    dd 0FFFFFFFFh           ; DATA XREF: .text:00428F79↑r
.text:0042A710                                         ; .text:loc_428FA0↑r ...
.text:0042A714 dword_42A714    dd 0                    ; DATA XREF: .text:loc_428FAC↑r
.text:0042A714                                         ; sub_428FD0:loc_42901D↑r
.text:0042A718                 dd 0FFFFFFFFh
.text:0042A71C dword_42A71C    dd 39h dup(0)           ; DATA XREF: .data:off_42B244↓o
.text:0042A800                 dd 200h dup(?)
.text:0042A800 _text           ends
.text:0042A800
.data:0042B000 ; Section 2. (virtual address 0002B000)
.data:0042B000 ; Virtual size                  : 00000260 (    608.)
.data:0042B000 ; Section size in file          : 00000400 (   1024.)
.data:0042B000 ; Offset to raw data for section: 00029C00
.data:0042B000 ; Flags C0000040: Data Readable Writable
.data:0042B000 ; Alignment     : default
.data:0042B000 ; ===========================================================================
.data:0042B000
.data:0042B000 ; Segment type: Pure data
.data:0042B000 ; Segment permissions: Read/Write
.data:0042B000 _data           segment para public 'DATA' use32
.data:0042B000                 assume cs:_data
.data:0042B000                 ;org 42B000h
.data:0042B000 dword_42B000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0042B000                                         ; sub_401080+CC↑r
.data:0042B004 dword_42B004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0042B004                                         ; sub_401080+D4↑r
.data:0042B008                 align 10h
.data:0042B010 dword_42B010    dd 80000000h            ; DATA XREF: sub_405490+1D4↑r
.data:0042B010                                         ; sub_405490+42E↑w ...
.data:0042B014 dword_42B014    dd 0FFFFFFFFh           ; DATA XREF: sub_405490+3E3↑r
.data:0042B014                                         ; sub_405490+3FC↑r ...
.data:0042B018 byte_42B018     db 1                    ; DATA XREF: sub_4025F0:loc_402F25↑w
.data:0042B018                                         ; sub_404500:loc_40479F↑r ...
.data:0042B019 byte_42B019     db 1                    ; DATA XREF: sub_4025F0:loc_402DA4↑w
.data:0042B019                                         ; sub_404500:loc_4047AC↑r ...
.data:0042B01A                 align 10h
.data:0042B020 ; int dword_42B020
.data:0042B020 dword_42B020    dd 1                    ; DATA XREF: sub_4025F0+159↑w
.data:0042B020                                         ; sub_4025F0+96C↑w ...
.data:0042B024 ; int dword_42B024
.data:0042B024 dword_42B024    dd 0                    ; DATA XREF: sub_4025F0+15F↑w
.data:0042B024                                         ; sub_4025F0+974↑w ...
.data:0042B028                 align 10h
.data:0042B030 unk_42B030      db    2                 ; DATA XREF: sub_401B10:loc_401E56↑o
.data:0042B030                                         ; sub_403810+238↑o ...
.data:0042B031                 db    0
.data:0042B032                 db    0
.data:0042B033                 db    0
.data:0042B034                 db  80h ; €
.data:0042B035                 db  13h
.data:0042B036                 db  40h ; @
.data:0042B037                 db    0
.data:0042B038 unk_42B038      db    1                 ; DATA XREF: sub_401B10+354↑o
.data:0042B038                                         ; sub_4061C0+F2↑o ...
.data:0042B039                 db    0
.data:0042B03A                 db    0
.data:0042B03B                 db    0
.data:0042B03C                 db  83h ; ƒ
.data:0042B03D                 db  13h
.data:0042B03E                 db  40h ; @
.data:0042B03F                 db    0
.data:0042B040 unk_42B040      db    0                 ; DATA XREF: sub_406370+D↑o
.data:0042B041                 db    0
.data:0042B042                 db    0
.data:0042B043                 db    0
.data:0042B044 dword_42B044    dd 0                    ; DATA XREF: sub_406370+3↑r
.data:0042B048 unk_42B048      db    1                 ; DATA XREF: sub_406370+2C↑o
.data:0042B049                 db    0
.data:0042B04A                 db    0
.data:0042B04B                 db    0
.data:0042B04C                 db  85h ; …
.data:0042B04D                 db  13h
.data:0042B04E                 db  40h ; @
.data:0042B04F                 db    0
.data:0042B050                 db    1
.data:0042B051                 db    0
.data:0042B052                 db    0
.data:0042B053                 db    0
.data:0042B054                 db  85h ; …
.data:0042B055                 db  13h
.data:0042B056                 db  40h ; @
.data:0042B057                 db    0
.data:0042B058                 db    5
.data:0042B059                 db    0
.data:0042B05A                 db    0
.data:0042B05B                 db    0
.data:0042B05C                 db  87h ; ‡
.data:0042B05D                 db  13h
.data:0042B05E                 db  40h ; @
.data:0042B05F                 db    0
.data:0042B060 dword_42B060    dd 5                    ; DATA XREF: sub_403810:loc_403893↑r
.data:0042B064 off_42B064      dd offset a0136         ; DATA XREF: sub_403810+8D↑r
.data:0042B064                                         ; "01;36"
.data:0042B068                 db    2
.data:0042B069                 db    0
.data:0042B06A                 db    0
.data:0042B06B                 db    0
.data:0042B06C                 db  93h ; “
.data:0042B06D                 db  13h
.data:0042B06E                 db  40h ; @
.data:0042B06F                 db    0
.data:0042B070                 db    5
.data:0042B071                 db    0
.data:0042B072                 db    0
.data:0042B073                 db    0
.data:0042B074                 db  96h ; –
.data:0042B075                 db  13h
.data:0042B076                 db  40h ; @
.data:0042B077                 db    0
.data:0042B078                 db    5
.data:0042B079                 db    0
.data:0042B07A                 db    0
.data:0042B07B                 db    0
.data:0042B07C                 db  9Ch ; œ
.data:0042B07D                 db  13h
.data:0042B07E                 db  40h ; @
.data:0042B07F                 db    0
.data:0042B080                 db    5
.data:0042B081                 db    0
.data:0042B082                 db    0
.data:0042B083                 db    0
.data:0042B084                 db  9Ch ; œ
.data:0042B085                 db  13h
.data:0042B086                 db  40h ; @
.data:0042B087                 db    0
.data:0042B088 dword_42B088    dd 0                    ; DATA XREF: sub_401B10+709↑r
.data:0042B08C dword_42B08C    dd 0                    ; DATA XREF: sub_401B10+70E↑r
.data:0042B08C                                         ; sub_4065C0:loc_406730↑r
.data:0042B090 dword_42B090    dd 0                    ; DATA XREF: sub_401B10+6AB↑r
.data:0042B094 dword_42B094    dd 0                    ; DATA XREF: sub_401B10+6B0↑r
.data:0042B094                                         ; sub_4065C0+144↑r
.data:0042B098 dword_42B098    dd 5                    ; DATA XREF: sub_401B10+6DA↑r
.data:0042B098                                         ; sub_404500+F6↑r
.data:0042B09C off_42B09C      dd offset a0132         ; DATA XREF: sub_401B10+6DF↑r
.data:0042B09C                                         ; sub_404500+FB↑r
.data:0042B09C                                         ; "01;32"
.data:0042B0A0                 db    5
.data:0042B0A1                 db    0
.data:0042B0A2                 db    0
.data:0042B0A3                 db    0
.data:0042B0A4                 db  96h ; –
.data:0042B0A5                 db  13h
.data:0042B0A6                 db  40h ; @
.data:0042B0A7                 db    0
.data:0042B0A8 off_42B0A8      dd offset aBEY          ; DATA XREF: sub_4025F0+F12↑r
.data:0042B0A8                                         ; sub_4025F0+F2A↑w ...
.data:0042B0A8                                         ; "%b %e  %Y"
.data:0042B0AC off_42B0AC      dd offset aBEHM         ; DATA XREF: sub_4025F0+F4C↑w
.data:0042B0AC                                         ; sub_4025F0+F61↑w ...
.data:0042B0AC                                         ; "%b %e %H:%M"
.data:0042B0B0 byte_42B0B0     db 1                    ; DATA XREF: sub_403C30:loc_403EA3↑r
.data:0042B0B0                                         ; sub_403C30+2AD↑w
.data:0042B0B1                 align 4
.data:0042B0B4 dword_42B0B4    dd 0FFFFFFFFh           ; DATA XREF: sub_40A4F0+C↑r
.data:0042B0B4                                         ; sub_40A4F0+C0↑w ...
.data:0042B0B8                 db    0
.data:0042B0B9                 db    0
.data:0042B0BA                 db    0
.data:0042B0BB                 db    0
.data:0042B0BC                 db    0
.data:0042B0BD                 db    0
.data:0042B0BE                 db    0
.data:0042B0BF                 db    0
.data:0042B0C0                 db    0
.data:0042B0C1                 db    0
.data:0042B0C2                 db    0
.data:0042B0C3                 db    0
.data:0042B0C4                 db    0
.data:0042B0C5                 db    0
.data:0042B0C6                 db    0
.data:0042B0C7                 db    0
.data:0042B0C8                 db    0
.data:0042B0C9                 db    0
.data:0042B0CA                 db    0
.data:0042B0CB                 db    0
.data:0042B0CC                 db    0
.data:0042B0CD                 db    0
.data:0042B0CE                 db    0
.data:0042B0CF                 db    0
.data:0042B0D0 dword_42B0D0    dd 1                    ; DATA XREF: sub_4025F0+9↑r
.data:0042B0D0                                         ; sub_4025F0+6C0↑r
.data:0042B0D4                 align 10h
.data:0042B0E0 dword_42B0E0    dd 1                    ; DATA XREF: sub_40DCD0+22↑r
.data:0042B0E0                                         ; sub_40DCD0+65↑r ...
.data:0042B0E4 dword_42B0E4    dd 100h                 ; DATA XREF: sub_40DCD0+3F↑o
.data:0042B0E4                                         ; sub_40DCD0+1A2↑r ...
.data:0042B0E8 off_42B0E8      dd offset unk_42C430    ; DATA XREF: sub_40DCD0+1AA↑r
.data:0042B0EC ; void *off_42B0EC
.data:0042B0EC off_42B0EC      dd offset dword_42B0E4  ; DATA XREF: sub_40DCD0+39↑r
.data:0042B0EC                                         ; sub_40DCD0+60↑w ...
.data:0042B0F0 ; int dword_42B0F0
.data:0042B0F0 dword_42B0F0    dd 1                    ; DATA XREF: sub_401B10+5E↑w
.data:0042B0F0                                         ; sub_413320+87↑r ...
.data:0042B0F4                 align 10h
.data:0042B100 dword_42B100    dd 1                    ; DATA XREF: sub_4025F0:loc_403481↑r
.data:0042B100                                         ; sub_411540+3↑r ...
.data:0042B104 dword_42B104    dd 1                    ; DATA XREF: sub_411540+11↑r
.data:0042B104                                         ; .text:004115E1↑r
.data:0042B108 dword_42B108    dd 3Fh                  ; DATA XREF: sub_411540+7D↑w
.data:0042B108                                         ; .text:0041164D↑w
.data:0042B10C                 align 10h
.data:0042B110 ; int off_42B110
.data:0042B110 off_42B110      dd offset sub_411D10    ; DATA XREF: sub_4025F0+B62↑r
.data:0042B110                                         ; sub_4025F0+BAD↑r ...
.data:0042B114                 align 10h
.data:0042B120 ; char *Buffer
.data:0042B120 Buffer          dd offset aCopyrightC2005
.data:0042B120                                         ; DATA XREF: sub_4139E0+DC↑r
.data:0042B120                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0042B124                 align 10h
.data:0042B130 dword_42B130    dd 200h                 ; DATA XREF: sub_416AD0+2ED↑r
.data:0042B130                                         ; sub_416AD0+2F8↑r ...
.data:0042B134 ; char *off_42B134
.data:0042B134 off_42B134      dd offset aComExeBatCmd ; DATA XREF: sub_416FA0+3D3↑r
.data:0042B134                                         ; sub_416FA0+400↑r ...
.data:0042B134                                         ; ".com;.exe;.bat;.cmd"
.data:0042B138                 align 10h
.data:0042B140 byte_42B140     db 41h                  ; DATA XREF: sub_419140+6B↑w
.data:0042B140                                         ; sub_419140:loc_419254↑r
.data:0042B141                 align 10h
.data:0042B150 dword_42B150    dd 1                    ; DATA XREF: .text:loc_41B287↑r
.data:0042B150                                         ; sub_41B860+202↑w
.data:0042B154                 align 10h
.data:0042B160 off_42B160      dd offset aNotset       ; DATA XREF: .text:0041BADA↑r
.data:0042B160                                         ; .text:0041C722↑r
.data:0042B160                                         ; "notset"
.data:0042B164 off_42B164      dd offset aNotset       ; DATA XREF: .text:0041BAF2↑r
.data:0042B164                                         ; .text:0041BB14↑r ...
.data:0042B164                                         ; "notset"
.data:0042B168                 align 10h
.data:0042B170 unk_42B170      db    0                 ; DATA XREF: .data:off_42B1E4↓o
.data:0042B171                 db    0
.data:0042B172                 db    0
.data:0042B173                 db    0
.data:0042B174                 db  80h ; €
.data:0042B175                 db 0DEh ; Þ
.data:0042B176                 db  41h ; A
.data:0042B177                 db    0
.data:0042B178                 db 0E0h ; à
.data:0042B179                 db  5Dh ; ]
.data:0042B17A                 db  42h ; B
.data:0042B17B                 db    0
.data:0042B17C                 db  80h ; €
.data:0042B17D                 db  5Fh ; _
.data:0042B17E                 db  42h ; B
.data:0042B17F                 db    0
.data:0042B180                 db  80h ; €
.data:0042B181                 db  60h ; `
.data:0042B182                 db  42h ; B
.data:0042B183                 db    0
.data:0042B184                 db  80h ; €
.data:0042B185                 db  64h ; d
.data:0042B186                 db  42h ; B
.data:0042B187                 db    0
.data:0042B188                 db  80h ; €
.data:0042B189                 db  66h ; f
.data:0042B18A                 db  42h ; B
.data:0042B18B                 db    0
.data:0042B18C                 db 0C0h ; À
.data:0042B18D                 db  66h ; f
.data:0042B18E                 db  42h ; B
.data:0042B18F                 db    0
.data:0042B190                 db  20h
.data:0042B191                 db  67h ; g
.data:0042B192                 db  42h ; B
.data:0042B193                 db    0
.data:0042B194                 db 0A0h ;  
.data:0042B195                 db  67h ; g
.data:0042B196                 db  42h ; B
.data:0042B197                 db    0
.data:0042B198                 db  20h
.data:0042B199                 db  68h ; h
.data:0042B19A                 db  42h ; B
.data:0042B19B                 db    0
.data:0042B19C                 db  80h ; €
.data:0042B19D                 db  68h ; h
.data:0042B19E                 db  42h ; B
.data:0042B19F                 db    0
.data:0042B1A0                 db  80h ; €
.data:0042B1A1                 db  6Ah ; j
.data:0042B1A2                 db  42h ; B
.data:0042B1A3                 db    0
.data:0042B1A4                 db 0E0h ; à
.data:0042B1A5                 db  44h ; D
.data:0042B1A6                 db  42h ; B
.data:0042B1A7                 db    0
.data:0042B1A8                 db 0E0h ; à
.data:0042B1A9                 db  52h ; R
.data:0042B1AA                 db  42h ; B
.data:0042B1AB                 db    0
.data:0042B1AC                 db 0E0h ; à
.data:0042B1AD                 db  4Ch ; L
.data:0042B1AE                 db  42h ; B
.data:0042B1AF                 db    0
.data:0042B1B0                 db    0
.data:0042B1B1                 db  6Bh ; k
.data:0042B1B2                 db  42h ; B
.data:0042B1B3                 db    0
.data:0042B1B4                 db    0
.data:0042B1B5                 db  6Bh ; k
.data:0042B1B6                 db  42h ; B
.data:0042B1B7                 db    0
.data:0042B1B8                 db    0
.data:0042B1B9                 db  6Bh ; k
.data:0042B1BA                 db  42h ; B
.data:0042B1BB                 db    0
.data:0042B1BC                 db    0
.data:0042B1BD                 db  6Bh ; k
.data:0042B1BE                 db  42h ; B
.data:0042B1BF                 db    0
.data:0042B1C0                 db    0
.data:0042B1C1                 db  6Bh ; k
.data:0042B1C2                 db  42h ; B
.data:0042B1C3                 db    0
.data:0042B1C4                 db    0
.data:0042B1C5                 db  6Bh ; k
.data:0042B1C6                 db  42h ; B
.data:0042B1C7                 db    0
.data:0042B1C8                 db    0
.data:0042B1C9                 db  6Bh ; k
.data:0042B1CA                 db  42h ; B
.data:0042B1CB                 db    0
.data:0042B1CC                 db    0
.data:0042B1CD                 db  6Bh ; k
.data:0042B1CE                 db  42h ; B
.data:0042B1CF                 db    0
.data:0042B1D0                 db    0
.data:0042B1D1                 db  6Bh ; k
.data:0042B1D2                 db  42h ; B
.data:0042B1D3                 db    0
.data:0042B1D4                 db    0
.data:0042B1D5                 db  6Bh ; k
.data:0042B1D6                 db  42h ; B
.data:0042B1D7                 db    0
.data:0042B1D8                 db    0
.data:0042B1D9                 db  6Bh ; k
.data:0042B1DA                 db  42h ; B
.data:0042B1DB                 db    0
.data:0042B1DC                 db    0
.data:0042B1DD                 db  6Bh ; k
.data:0042B1DE                 db  42h ; B
.data:0042B1DF                 db    0
.data:0042B1E0                 db    0
.data:0042B1E1                 db  6Bh ; k
.data:0042B1E2                 db  42h ; B
.data:0042B1E3                 db    0
.data:0042B1E4 off_42B1E4      dd offset unk_42B170    ; DATA XREF: sub_419D10+13↑r
.data:0042B1E8                 align 10h
.data:0042B1F0 ; char *Src
.data:0042B1F0 Src             dd offset byte_41D550   ; DATA XREF: sub_41D570+168↑r
.data:0042B1F4 off_42B1F4      dd offset byte_41D551   ; DATA XREF: sub_41D570+1DA↑r
.data:0042B1F8                 align 10h
.data:0042B200 off_42B200      dd offset sub_4279E0    ; DATA XREF: sub_427600:loc_427680↑r
.data:0042B200                                         ; .text:loc_427720↑r ...
.data:0042B204 ; int dword_42B204
.data:0042B204 dword_42B204    dd 1                    ; DATA XREF: sub_4279E0+1C↑r
.data:0042B208                 align 10h
.data:0042B210 dword_42B210    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0042B214                 align 10h
.data:0042B220 ; int Mode
.data:0042B220 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0042B220                                         ; sub_401080+80↑r ...
.data:0042B224                 align 10h
.data:0042B230 dword_42B230    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0042B230                                         ; sub_401080+BA↑r
.data:0042B234                 align 10h
.data:0042B240 dword_42B240    dd 0                    ; DATA XREF: sub_428FD0+9↑r
.data:0042B240                                         ; sub_428FD0+1D↑w
.data:0042B244 off_42B244      dd offset dword_42A71C  ; DATA XREF: sub_428F40+6↑r
.data:0042B244                                         ; sub_428F40+17↑r ...
.data:0042B248                 align 1000h
.data:0042B248 _data           ends
.data:0042B248
.bss:0042C000 ; Section 3. (virtual address 0002C000)
.bss:0042C000 ; Virtual size                  : 000013C0 (   5056.)
.bss:0042C000 ; Section size in file          : 00000000 (      0.)
.bss:0042C000 ; Offset to raw data for section: 00000000
.bss:0042C000 ; Flags C0000080: Bss Readable Writable
.bss:0042C000 ; Alignment     : default
.bss:0042C000 ; ===========================================================================
.bss:0042C000
.bss:0042C000 ; Segment type: Uninitialized
.bss:0042C000 ; Segment permissions: Read/Write
.bss:0042C000 _bss            segment para public 'BSS' use32
.bss:0042C000                 assume cs:_bss
.bss:0042C000                 ;org 42C000h
.bss:0042C000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0042C000 ; void *dword_42C000
.bss:0042C000 dword_42C000    dd ?                    ; DATA XREF: sub_403810+E4↑r
.bss:0042C000                                         ; sub_403810+162↑r ...
.bss:0042C004                 align 10h
.bss:0042C010 dword_42C010    dd ?                    ; DATA XREF: sub_40A5D0:loc_40A5E9↑r
.bss:0042C010                                         ; sub_40A5D0:loc_40A623↑r ...
.bss:0042C014                 align 10h
.bss:0042C020 ; void *dword_42C020
.bss:0042C020 dword_42C020    dd ?                    ; DATA XREF: sub_401B10:loc_401CE0↑r
.bss:0042C020                                         ; sub_401B10:loc_401DB7↑r ...
.bss:0042C024                 align 10h
.bss:0042C030 ; void *dword_42C030
.bss:0042C030 dword_42C030    dd ?                    ; DATA XREF: sub_401B10+15D↑w
.bss:0042C030                                         ; sub_404460:loc_4044C2↑r ...
.bss:0042C034                 align 10h
.bss:0042C040 dword_42C040    dd ?                    ; DATA XREF: sub_401B10+14B↑w
.bss:0042C040                                         ; sub_404500+18↑r ...
.bss:0042C044                 align 10h
.bss:0042C050 ; void *dword_42C050
.bss:0042C050 dword_42C050    dd ?                    ; DATA XREF: sub_401B10+164↑w
.bss:0042C050                                         ; sub_401B10:loc_401CBC↑r ...
.bss:0042C054                 align 10h
.bss:0042C060 byte_42C060     db ?                    ; DATA XREF: sub_403810+A5↑w
.bss:0042C060                                         ; sub_405490+30A↑r ...
.bss:0042C061                 align 10h
.bss:0042C070 ; void *Block
.bss:0042C070 Block           dd ?                    ; DATA XREF: sub_401B10+7C↑w
.bss:0042C070                                         ; sub_401B10:loc_401CD1↑r ...
.bss:0042C074                 align 10h
.bss:0042C080 dword_42C080    dd ?                    ; DATA XREF: sub_404460+1F↑w
.bss:0042C080                                         ; sub_404500+20D↑r ...
.bss:0042C084                 align 10h
.bss:0042C090 dword_42C090    dd ?                    ; DATA XREF: sub_404460+29↑w
.bss:0042C090                                         ; sub_404500+292↑r ...
.bss:0042C094                 align 10h
.bss:0042C0A0 dword_42C0A0    dd ?                    ; DATA XREF: sub_404460+31↑w
.bss:0042C0A0                                         ; sub_404500+2F1↑r ...
.bss:0042C0A4                 align 10h
.bss:0042C0B0 dword_42C0B0    dd ?                    ; DATA XREF: sub_404460+39↑w
.bss:0042C0B0                                         ; sub_404500+481↑r ...
.bss:0042C0B4                 align 10h
.bss:0042C0C0 dword_42C0C0    dd ?                    ; DATA XREF: sub_404460+4D↑w
.bss:0042C0C0                                         ; sub_404500+458↑r ...
.bss:0042C0C4                 align 10h
.bss:0042C0D0 dword_42C0D0    dd ?                    ; DATA XREF: sub_404460+53↑w
.bss:0042C0D0                                         ; sub_404500+431↑r ...
.bss:0042C0D4                 align 10h
.bss:0042C0E0 dword_42C0E0    dd ?                    ; DATA XREF: sub_404460+41↑w
.bss:0042C0E0                                         ; sub_404500+3C2↑r ...
.bss:0042C0E4                 align 10h
.bss:0042C0F0 dword_42C0F0    dd ?                    ; DATA XREF: sub_404460+47↑w
.bss:0042C0F0                                         ; sub_404500+3F8↑r ...
.bss:0042C0F4                 align 10h
.bss:0042C100 dword_42C100    dd ?                    ; DATA XREF: sub_404460+59↑w
.bss:0042C100                                         ; sub_404500:loc_40487A↑r ...
.bss:0042C104                 align 10h
.bss:0042C110 dword_42C110    dd ?                    ; DATA XREF: sub_401B10+D2↑r
.bss:0042C110                                         ; sub_401B10+675↑r ...
.bss:0042C114                 align 10h
.bss:0042C120 dword_42C120    dd ?                    ; DATA XREF: sub_4025F0+6D↑w
.bss:0042C120                                         ; sub_4025F0:loc_402EBB↑w ...
.bss:0042C124                 align 10h
.bss:0042C130 dword_42C130    dd ?                    ; DATA XREF: sub_401B10:loc_401BD2↑r
.bss:0042C130                                         ; sub_4025F0+7A↑w ...
.bss:0042C134                 align 10h
.bss:0042C140 byte_42C140     db ?                    ; DATA XREF: sub_4025F0:loc_402652↑w
.bss:0042C140                                         ; sub_4025F0:loc_402FE7↑w ...
.bss:0042C141                 align 10h
.bss:0042C150 byte_42C150     db ?                    ; DATA XREF: sub_4025F0:loc_4030B4↑w
.bss:0042C150                                         ; sub_404500:loc_4047B9↑r ...
.bss:0042C151                 align 10h
.bss:0042C160 byte_42C160     db ?                    ; DATA XREF: sub_4025F0+95↑w
.bss:0042C160                                         ; sub_4025F0:loc_402FB2↑w ...
.bss:0042C161                 align 10h
.bss:0042C170 byte_42C170     db ?                    ; DATA XREF: sub_401B10+E4↑r
.bss:0042C170                                         ; sub_4025F0+9C↑w ...
.bss:0042C171                 align 10h
.bss:0042C180 ; int dword_42C180
.bss:0042C180 dword_42C180    dd ?                    ; DATA XREF: sub_4025F0+140↑w
.bss:0042C180                                         ; sub_4025F0+94E↑w ...
.bss:0042C184                 align 10h
.bss:0042C190 ; int dword_42C190
.bss:0042C190 dword_42C190    dd ?                    ; DATA XREF: sub_4025F0+12B↑o
.bss:0042C190                                         ; sub_4025F0:loc_40273D↑r ...
.bss:0042C194 ; int dword_42C194
.bss:0042C194 dword_42C194    dd ?                    ; DATA XREF: sub_4025F0+153↑r
.bss:0042C194                                         ; sub_4025F0+966↑w ...
.bss:0042C198                 align 10h
.bss:0042C1A0 byte_42C1A0     db ?                    ; DATA XREF: sub_401B10:loc_401C3C↑r
.bss:0042C1A0                                         ; sub_401B10:loc_401DAE↑r ...
.bss:0042C1A1                 align 10h
.bss:0042C1B0 dword_42C1B0    dd ?                    ; DATA XREF: sub_401B10+120↑r
.bss:0042C1B0                                         ; sub_401B10+66C↑r ...
.bss:0042C1B4                 align 10h
.bss:0042C1C0 byte_42C1C0     db ?                    ; DATA XREF: sub_401B10+99↑r
.bss:0042C1C0                                         ; sub_401B10+117↑r ...
.bss:0042C1C1                 align 10h
.bss:0042C1D0 ; void *dword_42C1D0
.bss:0042C1D0 dword_42C1D0    dd ?                    ; DATA XREF: sub_403810+44↑w
.bss:0042C1D0                                         ; sub_403810+D6↑r
.bss:0042C1D4                 align 10h
.bss:0042C1E0 byte_42C1E0     db ?                    ; DATA XREF: sub_401B10:loc_40224D↑w
.bss:0042C1E0                                         ; sub_404500+4EE↑r ...
.bss:0042C1E1                 align 10h
.bss:0042C1F0 byte_42C1F0     db ?                    ; DATA XREF: sub_401B10+ED↑r
.bss:0042C1F0                                         ; sub_4025F0+A3↑w ...
.bss:0042C1F1                 align 10h
.bss:0042C200 dword_42C200    dd ?                    ; DATA XREF: sub_401B10:loc_401BB8↑r
.bss:0042C200                                         ; sub_401B10+DB↑r ...
.bss:0042C204                 align 10h
.bss:0042C210 byte_42C210     db ?                    ; DATA XREF: sub_401B10:loc_401BC5↑r
.bss:0042C210                                         ; sub_401B10+10E↑r ...
.bss:0042C211                 align 10h
.bss:0042C220 byte_42C220     db ?                    ; DATA XREF: sub_401B10+4C3↑r
.bss:0042C220                                         ; sub_401B10:loc_402059↑r ...
.bss:0042C221                 align 10h
.bss:0042C230 dword_42C230    dd ?                    ; DATA XREF: sub_4025F0+B8↑w
.bss:0042C230                                         ; sub_4025F0+6AD↑w ...
.bss:0042C234                 align 10h
.bss:0042C240 dword_42C240    dd ?                    ; DATA XREF: sub_4025F0+BD↑w
.bss:0042C240                                         ; sub_404360+15↑r ...
.bss:0042C244                 align 10h
.bss:0042C250 dword_42C250    dd ?                    ; DATA XREF: sub_4025F0+C3↑w
.bss:0042C250                                         ; sub_4025F0+C07↑r ...
.bss:0042C254                 align 10h
.bss:0042C260 byte_42C260     db ?                    ; DATA XREF: sub_4025F0:loc_40260B↑w
.bss:0042C260                                         ; sub_4025F0+50↑w ...
.bss:0042C261                 align 10h
.bss:0042C270 ; int dword_42C270
.bss:0042C270 dword_42C270    dd ?                    ; DATA XREF: sub_401B10+31C↑r
.bss:0042C270                                         ; sub_4025F0+D90↑w ...
.bss:0042C274                 align 10h
.bss:0042C280 ; int dword_42C280
.bss:0042C280 dword_42C280    dd ?                    ; DATA XREF: sub_4025F0+DF1↑w
.bss:0042C280                                         ; sub_403C30+2C9↑r
.bss:0042C284                 align 10h
.bss:0042C290 dword_42C290    dd ?                    ; DATA XREF: sub_4025F0+1D2↑w
.bss:0042C290                                         ; sub_4025F0:loc_4027FE↑w ...
.bss:0042C294                 align 10h
.bss:0042C2A0 byte_42C2A0     db ?                    ; DATA XREF: sub_401B10+70↑w
.bss:0042C2A0                                         ; sub_401B10+472↑w ...
.bss:0042C2A1                 align 10h
.bss:0042C2B0 dword_42C2B0    dd ?                    ; DATA XREF: sub_4025F0+171↑w
.bss:0042C2B0                                         ; sub_4025F0+1B7↑w ...
.bss:0042C2B4                 align 10h
.bss:0042C2C0 byte_42C2C0     db ?                    ; DATA XREF: sub_401B10:loc_401C12↑w
.bss:0042C2C0                                         ; sub_404500+59↑r
.bss:0042C2C1                 align 10h
.bss:0042C2D0 byte_42C2D0     db ?                    ; DATA XREF: sub_401B10+133↑w
.bss:0042C2D0                                         ; sub_404500+66↑r
.bss:0042C2D1                 db    ? ;
.bss:0042C2D2                 db    ? ;
.bss:0042C2D3                 db    ? ;
.bss:0042C2D4                 db    ? ;
.bss:0042C2D5                 db    ? ;
.bss:0042C2D6                 db    ? ;
.bss:0042C2D7                 db    ? ;
.bss:0042C2D8                 db    ? ;
.bss:0042C2D9                 db    ? ;
.bss:0042C2DA                 db    ? ;
.bss:0042C2DB                 db    ? ;
.bss:0042C2DC                 db    ? ;
.bss:0042C2DD                 db    ? ;
.bss:0042C2DE                 db    ? ;
.bss:0042C2DF                 db    ? ;
.bss:0042C2E0                 db    ? ;
.bss:0042C2E1                 db    ? ;
.bss:0042C2E2                 db    ? ;
.bss:0042C2E3                 db    ? ;
.bss:0042C2E4                 db    ? ;
.bss:0042C2E5                 db    ? ;
.bss:0042C2E6                 db    ? ;
.bss:0042C2E7                 db    ? ;
.bss:0042C2E8                 db    ? ;
.bss:0042C2E9                 db    ? ;
.bss:0042C2EA                 db    ? ;
.bss:0042C2EB                 db    ? ;
.bss:0042C2EC                 db    ? ;
.bss:0042C2ED                 db    ? ;
.bss:0042C2EE                 db    ? ;
.bss:0042C2EF                 db    ? ;
.bss:0042C2F0 ; int Signal
.bss:0042C2F0 Signal          dd ?                    ; DATA XREF: sub_401B10:loc_401E98↑r
.bss:0042C2F0                                         ; sub_4061C0+CD↑r ...
.bss:0042C2F4                 align 10h
.bss:0042C300 dword_42C300    dd ?                    ; DATA XREF: sub_401B10+37E↑r
.bss:0042C300                                         ; sub_4061C0+D2↑r ...
.bss:0042C304                 align 10h
.bss:0042C310 ; int Code
.bss:0042C310 Code            dd ?                    ; DATA XREF: sub_401B10+87↑w
.bss:0042C310                                         ; sub_401B10:loc_401DDA↑r ...
.bss:0042C314                 align 10h
.bss:0042C320 ; void *dword_42C320
.bss:0042C320 dword_42C320    dd ?                    ; DATA XREF: sub_4067C0+16↑r
.bss:0042C320                                         ; sub_406A50+22↑r ...
.bss:0042C324                 align 10h
.bss:0042C330 ; int dword_42C330
.bss:0042C330 dword_42C330    dd ?                    ; DATA XREF: sub_4025F0:loc_40336F↑w
.bss:0042C330                                         ; sub_407240+18↑r ...
.bss:0042C334                 align 10h
.bss:0042C340 dword_42C340    dd ?                    ; DATA XREF: sub_401B10:loc_40201D↑w
.bss:0042C340                                         ; sub_403C30:loc_403ED0↑w ...
.bss:0042C344                 align 10h
.bss:0042C350 ; FILE File
.bss:0042C350 File            FILE <?>                ; DATA XREF: sub_401B10:loc_401E04↑o
.bss:0042C350                                         ; sub_401B10+5BC↑o ...
.bss:0042C370                 db    ? ;
.bss:0042C371                 db    ? ;
.bss:0042C372                 db    ? ;
.bss:0042C373                 db    ? ;
.bss:0042C374                 db    ? ;
.bss:0042C375                 db    ? ;
.bss:0042C376                 db    ? ;
.bss:0042C377                 db    ? ;
.bss:0042C378                 db    ? ;
.bss:0042C379                 db    ? ;
.bss:0042C37A                 db    ? ;
.bss:0042C37B                 db    ? ;
.bss:0042C37C                 db    ? ;
.bss:0042C37D                 db    ? ;
.bss:0042C37E                 db    ? ;
.bss:0042C37F                 db    ? ;
.bss:0042C380 ; FILE stru_42C380
.bss:0042C380 stru_42C380     FILE <?>                ; DATA XREF: sub_401B10+308↑o
.bss:0042C380                                         ; sub_401B10+5E8↑o ...
.bss:0042C3A0                 db    ? ;
.bss:0042C3A1                 db    ? ;
.bss:0042C3A2                 db    ? ;
.bss:0042C3A3                 db    ? ;
.bss:0042C3A4                 db    ? ;
.bss:0042C3A5                 db    ? ;
.bss:0042C3A6                 db    ? ;
.bss:0042C3A7                 db    ? ;
.bss:0042C3A8                 db    ? ;
.bss:0042C3A9                 db    ? ;
.bss:0042C3AA                 db    ? ;
.bss:0042C3AB                 db    ? ;
.bss:0042C3AC                 db    ? ;
.bss:0042C3AD                 db    ? ;
.bss:0042C3AE                 db    ? ;
.bss:0042C3AF                 db    ? ;
.bss:0042C3B0 unk_42C3B0      db    ? ;               ; DATA XREF: sub_401B10+40B↑o
.bss:0042C3B0                                         ; sub_401B10+652↑o ...
.bss:0042C3B1                 db    ? ;
.bss:0042C3B2                 db    ? ;
.bss:0042C3B3                 db    ? ;
.bss:0042C3B4                 db    ? ;
.bss:0042C3B5                 db    ? ;
.bss:0042C3B6                 db    ? ;
.bss:0042C3B7                 db    ? ;
.bss:0042C3B8 dword_42C3B8    dd ?                    ; DATA XREF: sub_401B10+1F9↑r
.bss:0042C3BC dword_42C3BC    dd ?                    ; DATA XREF: sub_401B10+1F3↑r
.bss:0042C3BC                                         ; sub_401B10+222↑w ...
.bss:0042C3C0 dword_42C3C0    dd ?                    ; DATA XREF: sub_401B10+20B↑r
.bss:0042C3C0                                         ; sub_403C30+F5↑r
.bss:0042C3C4                 align 20h
.bss:0042C3E0 ; jmp_buf Buf
.bss:0042C3E0 Buf             dd 10h dup(?)           ; DATA XREF: sub_404FA0+13↑o
.bss:0042C3E0                                         ; sub_40A750+BC↑o
.bss:0042C420 dword_42C420    dd ?                    ; DATA XREF: sub_40A870+16D↑r
.bss:0042C424                 align 10h
.bss:0042C430 unk_42C430      db    ? ;               ; DATA XREF: sub_40DCD0+100↑o
.bss:0042C430                                         ; .data:off_42B0E8↑o
.bss:0042C431                 db    ? ;
.bss:0042C432                 db    ? ;
.bss:0042C433                 db    ? ;
.bss:0042C434                 db    ? ;
.bss:0042C435                 db    ? ;
.bss:0042C436                 db    ? ;
.bss:0042C437                 db    ? ;
.bss:0042C438                 db    ? ;
.bss:0042C439                 db    ? ;
.bss:0042C43A                 db    ? ;
.bss:0042C43B                 db    ? ;
.bss:0042C43C                 db    ? ;
.bss:0042C43D                 db    ? ;
.bss:0042C43E                 db    ? ;
.bss:0042C43F                 db    ? ;
.bss:0042C440                 db    ? ;
.bss:0042C441                 db    ? ;
.bss:0042C442                 db    ? ;
.bss:0042C443                 db    ? ;
.bss:0042C444                 db    ? ;
.bss:0042C445                 db    ? ;
.bss:0042C446                 db    ? ;
.bss:0042C447                 db    ? ;
.bss:0042C448                 db    ? ;
.bss:0042C449                 db    ? ;
.bss:0042C44A                 db    ? ;
.bss:0042C44B                 db    ? ;
.bss:0042C44C                 db    ? ;
.bss:0042C44D                 db    ? ;
.bss:0042C44E                 db    ? ;
.bss:0042C44F                 db    ? ;
.bss:0042C450                 db    ? ;
.bss:0042C451                 db    ? ;
.bss:0042C452                 db    ? ;
.bss:0042C453                 db    ? ;
.bss:0042C454                 db    ? ;
.bss:0042C455                 db    ? ;
.bss:0042C456                 db    ? ;
.bss:0042C457                 db    ? ;
.bss:0042C458                 db    ? ;
.bss:0042C459                 db    ? ;
.bss:0042C45A                 db    ? ;
.bss:0042C45B                 db    ? ;
.bss:0042C45C                 db    ? ;
.bss:0042C45D                 db    ? ;
.bss:0042C45E                 db    ? ;
.bss:0042C45F                 db    ? ;
.bss:0042C460                 db    ? ;
.bss:0042C461                 db    ? ;
.bss:0042C462                 db    ? ;
.bss:0042C463                 db    ? ;
.bss:0042C464                 db    ? ;
.bss:0042C465                 db    ? ;
.bss:0042C466                 db    ? ;
.bss:0042C467                 db    ? ;
.bss:0042C468                 db    ? ;
.bss:0042C469                 db    ? ;
.bss:0042C46A                 db    ? ;
.bss:0042C46B                 db    ? ;
.bss:0042C46C                 db    ? ;
.bss:0042C46D                 db    ? ;
.bss:0042C46E                 db    ? ;
.bss:0042C46F                 db    ? ;
.bss:0042C470                 db    ? ;
.bss:0042C471                 db    ? ;
.bss:0042C472                 db    ? ;
.bss:0042C473                 db    ? ;
.bss:0042C474                 db    ? ;
.bss:0042C475                 db    ? ;
.bss:0042C476                 db    ? ;
.bss:0042C477                 db    ? ;
.bss:0042C478                 db    ? ;
.bss:0042C479                 db    ? ;
.bss:0042C47A                 db    ? ;
.bss:0042C47B                 db    ? ;
.bss:0042C47C                 db    ? ;
.bss:0042C47D                 db    ? ;
.bss:0042C47E                 db    ? ;
.bss:0042C47F                 db    ? ;
.bss:0042C480                 db    ? ;
.bss:0042C481                 db    ? ;
.bss:0042C482                 db    ? ;
.bss:0042C483                 db    ? ;
.bss:0042C484                 db    ? ;
.bss:0042C485                 db    ? ;
.bss:0042C486                 db    ? ;
.bss:0042C487                 db    ? ;
.bss:0042C488                 db    ? ;
.bss:0042C489                 db    ? ;
.bss:0042C48A                 db    ? ;
.bss:0042C48B                 db    ? ;
.bss:0042C48C                 db    ? ;
.bss:0042C48D                 db    ? ;
.bss:0042C48E                 db    ? ;
.bss:0042C48F                 db    ? ;
.bss:0042C490                 db    ? ;
.bss:0042C491                 db    ? ;
.bss:0042C492                 db    ? ;
.bss:0042C493                 db    ? ;
.bss:0042C494                 db    ? ;
.bss:0042C495                 db    ? ;
.bss:0042C496                 db    ? ;
.bss:0042C497                 db    ? ;
.bss:0042C498                 db    ? ;
.bss:0042C499                 db    ? ;
.bss:0042C49A                 db    ? ;
.bss:0042C49B                 db    ? ;
.bss:0042C49C                 db    ? ;
.bss:0042C49D                 db    ? ;
.bss:0042C49E                 db    ? ;
.bss:0042C49F                 db    ? ;
.bss:0042C4A0                 db    ? ;
.bss:0042C4A1                 db    ? ;
.bss:0042C4A2                 db    ? ;
.bss:0042C4A3                 db    ? ;
.bss:0042C4A4                 db    ? ;
.bss:0042C4A5                 db    ? ;
.bss:0042C4A6                 db    ? ;
.bss:0042C4A7                 db    ? ;
.bss:0042C4A8                 db    ? ;
.bss:0042C4A9                 db    ? ;
.bss:0042C4AA                 db    ? ;
.bss:0042C4AB                 db    ? ;
.bss:0042C4AC                 db    ? ;
.bss:0042C4AD                 db    ? ;
.bss:0042C4AE                 db    ? ;
.bss:0042C4AF                 db    ? ;
.bss:0042C4B0                 db    ? ;
.bss:0042C4B1                 db    ? ;
.bss:0042C4B2                 db    ? ;
.bss:0042C4B3                 db    ? ;
.bss:0042C4B4                 db    ? ;
.bss:0042C4B5                 db    ? ;
.bss:0042C4B6                 db    ? ;
.bss:0042C4B7                 db    ? ;
.bss:0042C4B8                 db    ? ;
.bss:0042C4B9                 db    ? ;
.bss:0042C4BA                 db    ? ;
.bss:0042C4BB                 db    ? ;
.bss:0042C4BC                 db    ? ;
.bss:0042C4BD                 db    ? ;
.bss:0042C4BE                 db    ? ;
.bss:0042C4BF                 db    ? ;
.bss:0042C4C0                 db    ? ;
.bss:0042C4C1                 db    ? ;
.bss:0042C4C2                 db    ? ;
.bss:0042C4C3                 db    ? ;
.bss:0042C4C4                 db    ? ;
.bss:0042C4C5                 db    ? ;
.bss:0042C4C6                 db    ? ;
.bss:0042C4C7                 db    ? ;
.bss:0042C4C8                 db    ? ;
.bss:0042C4C9                 db    ? ;
.bss:0042C4CA                 db    ? ;
.bss:0042C4CB                 db    ? ;
.bss:0042C4CC                 db    ? ;
.bss:0042C4CD                 db    ? ;
.bss:0042C4CE                 db    ? ;
.bss:0042C4CF                 db    ? ;
.bss:0042C4D0                 db    ? ;
.bss:0042C4D1                 db    ? ;
.bss:0042C4D2                 db    ? ;
.bss:0042C4D3                 db    ? ;
.bss:0042C4D4                 db    ? ;
.bss:0042C4D5                 db    ? ;
.bss:0042C4D6                 db    ? ;
.bss:0042C4D7                 db    ? ;
.bss:0042C4D8                 db    ? ;
.bss:0042C4D9                 db    ? ;
.bss:0042C4DA                 db    ? ;
.bss:0042C4DB                 db    ? ;
.bss:0042C4DC                 db    ? ;
.bss:0042C4DD                 db    ? ;
.bss:0042C4DE                 db    ? ;
.bss:0042C4DF                 db    ? ;
.bss:0042C4E0                 db    ? ;
.bss:0042C4E1                 db    ? ;
.bss:0042C4E2                 db    ? ;
.bss:0042C4E3                 db    ? ;
.bss:0042C4E4                 db    ? ;
.bss:0042C4E5                 db    ? ;
.bss:0042C4E6                 db    ? ;
.bss:0042C4E7                 db    ? ;
.bss:0042C4E8                 db    ? ;
.bss:0042C4E9                 db    ? ;
.bss:0042C4EA                 db    ? ;
.bss:0042C4EB                 db    ? ;
.bss:0042C4EC                 db    ? ;
.bss:0042C4ED                 db    ? ;
.bss:0042C4EE                 db    ? ;
.bss:0042C4EF                 db    ? ;
.bss:0042C4F0                 db    ? ;
.bss:0042C4F1                 db    ? ;
.bss:0042C4F2                 db    ? ;
.bss:0042C4F3                 db    ? ;
.bss:0042C4F4                 db    ? ;
.bss:0042C4F5                 db    ? ;
.bss:0042C4F6                 db    ? ;
.bss:0042C4F7                 db    ? ;
.bss:0042C4F8                 db    ? ;
.bss:0042C4F9                 db    ? ;
.bss:0042C4FA                 db    ? ;
.bss:0042C4FB                 db    ? ;
.bss:0042C4FC                 db    ? ;
.bss:0042C4FD                 db    ? ;
.bss:0042C4FE                 db    ? ;
.bss:0042C4FF                 db    ? ;
.bss:0042C500                 db    ? ;
.bss:0042C501                 db    ? ;
.bss:0042C502                 db    ? ;
.bss:0042C503                 db    ? ;
.bss:0042C504                 db    ? ;
.bss:0042C505                 db    ? ;
.bss:0042C506                 db    ? ;
.bss:0042C507                 db    ? ;
.bss:0042C508                 db    ? ;
.bss:0042C509                 db    ? ;
.bss:0042C50A                 db    ? ;
.bss:0042C50B                 db    ? ;
.bss:0042C50C                 db    ? ;
.bss:0042C50D                 db    ? ;
.bss:0042C50E                 db    ? ;
.bss:0042C50F                 db    ? ;
.bss:0042C510                 db    ? ;
.bss:0042C511                 db    ? ;
.bss:0042C512                 db    ? ;
.bss:0042C513                 db    ? ;
.bss:0042C514                 db    ? ;
.bss:0042C515                 db    ? ;
.bss:0042C516                 db    ? ;
.bss:0042C517                 db    ? ;
.bss:0042C518                 db    ? ;
.bss:0042C519                 db    ? ;
.bss:0042C51A                 db    ? ;
.bss:0042C51B                 db    ? ;
.bss:0042C51C                 db    ? ;
.bss:0042C51D                 db    ? ;
.bss:0042C51E                 db    ? ;
.bss:0042C51F                 db    ? ;
.bss:0042C520                 db    ? ;
.bss:0042C521                 db    ? ;
.bss:0042C522                 db    ? ;
.bss:0042C523                 db    ? ;
.bss:0042C524                 db    ? ;
.bss:0042C525                 db    ? ;
.bss:0042C526                 db    ? ;
.bss:0042C527                 db    ? ;
.bss:0042C528                 db    ? ;
.bss:0042C529                 db    ? ;
.bss:0042C52A                 db    ? ;
.bss:0042C52B                 db    ? ;
.bss:0042C52C                 db    ? ;
.bss:0042C52D                 db    ? ;
.bss:0042C52E                 db    ? ;
.bss:0042C52F                 db    ? ;
.bss:0042C530 dword_42C530    dd ?                    ; DATA XREF: sub_40D5F0:loc_40D661↑o
.bss:0042C530                                         ; sub_40D670:loc_40D680↑o ...
.bss:0042C534 dword_42C534    dd ?                    ; DATA XREF: sub_40D6B0:loc_40D700↑o
.bss:0042C534                                         ; .text:0040DB88↑r ...
.bss:0042C538 dword_42C538    dd ?                    ; DATA XREF: .text:0040DB82↑r
.bss:0042C538                                         ; sub_40DC30+2C↑r
.bss:0042C53C dword_42C53C    dd ?                    ; DATA XREF: .text:0040DB76↑r
.bss:0042C53C                                         ; sub_40DC30+22↑r
.bss:0042C540 dword_42C540    dd ?                    ; DATA XREF: .text:0040DB92↑r
.bss:0042C540                                         ; sub_40DC30+36↑r
.bss:0042C544 dword_42C544    dd ?                    ; DATA XREF: .text:0040DBA2↑r
.bss:0042C544                                         ; sub_40DC30+4E↑r
.bss:0042C548 dword_42C548    dd ?                    ; DATA XREF: .text:0040DBBF↑r
.bss:0042C548                                         ; sub_40DC30+62↑r
.bss:0042C54C dword_42C54C    dd ?                    ; DATA XREF: .text:0040DBB5↑r
.bss:0042C54C                                         ; sub_40DC30+70↑r
.bss:0042C550 dword_42C550    dd ?                    ; DATA XREF: .text:0040DB98↑r
.bss:0042C550                                         ; sub_40DC30+7A↑r
.bss:0042C554                 align 10h
.bss:0042C560 dword_42C560    dd ?                    ; DATA XREF: .text:loc_40E5D0↑r
.bss:0042C560                                         ; .text:0040E616↑r ...
.bss:0042C564                 align 10h
.bss:0042C570 dword_42C570    dd ?                    ; DATA XREF: sub_411540+9↑o
.bss:0042C570                                         ; sub_411540+17↑w ...
.bss:0042C574 dword_42C574    dd ?                    ; DATA XREF: sub_411540+21↑w
.bss:0042C574                                         ; .text:004115F9↑w
.bss:0042C578 dword_42C578    dd ?                    ; DATA XREF: sub_411540+77↑r
.bss:0042C578                                         ; .text:00411647↑r
.bss:0042C57C dword_42C57C    dd ?                    ; DATA XREF: sub_411540+6B↑r
.bss:0042C57C                                         ; .text:0041163B↑r
.bss:0042C580                 db    ? ;
.bss:0042C581                 db    ? ;
.bss:0042C582                 db    ? ;
.bss:0042C583                 db    ? ;
.bss:0042C584                 db    ? ;
.bss:0042C585                 db    ? ;
.bss:0042C586                 db    ? ;
.bss:0042C587                 db    ? ;
.bss:0042C588                 db    ? ;
.bss:0042C589                 db    ? ;
.bss:0042C58A                 db    ? ;
.bss:0042C58B                 db    ? ;
.bss:0042C58C                 db    ? ;
.bss:0042C58D                 db    ? ;
.bss:0042C58E                 db    ? ;
.bss:0042C58F                 db    ? ;
.bss:0042C590                 db    ? ;
.bss:0042C591                 db    ? ;
.bss:0042C592                 db    ? ;
.bss:0042C593                 db    ? ;
.bss:0042C594                 db    ? ;
.bss:0042C595                 db    ? ;
.bss:0042C596                 db    ? ;
.bss:0042C597                 db    ? ;
.bss:0042C598                 db    ? ;
.bss:0042C599                 db    ? ;
.bss:0042C59A                 db    ? ;
.bss:0042C59B                 db    ? ;
.bss:0042C59C                 db    ? ;
.bss:0042C59D                 db    ? ;
.bss:0042C59E                 db    ? ;
.bss:0042C59F                 db    ? ;
.bss:0042C5A0 dword_42C5A0    dd ?                    ; DATA XREF: sub_411DF0+6↑r
.bss:0042C5A0                                         ; sub_411DF0+5A↑r ...
.bss:0042C5A4                 align 10h
.bss:0042C5B0 dword_42C5B0    dd ?                    ; DATA XREF: .text:loc_411EA5↑r
.bss:0042C5B0                                         ; .text:loc_411F07↑r ...
.bss:0042C5B4                 align 10h
.bss:0042C5C0 dword_42C5C0    dd ?                    ; DATA XREF: sub_411F60+6↑r
.bss:0042C5C0                                         ; sub_411F60+5A↑r ...
.bss:0042C5C4                 align 10h
.bss:0042C5D0 dword_42C5D0    dd ?                    ; DATA XREF: .text:loc_412015↑r
.bss:0042C5D0                                         ; .text:loc_412077↑r ...
.bss:0042C5D4                 align 10h
.bss:0042C5E0 ; char *dword_42C5E0
.bss:0042C5E0 dword_42C5E0    dd ?                    ; DATA XREF: .text:004151F4↑w
.bss:0042C5E0                                         ; sub_415220+58↑r
.bss:0042C5E4                 align 10h
.bss:0042C5F0 ; char *Str1
.bss:0042C5F0 Str1            dd ?                    ; DATA XREF: sub_4162E4:loc_41631D↑w
.bss:0042C5F0                                         ; sub_4162E4:loc_416450↑r
.bss:0042C5F4                 align 10h
.bss:0042C600 dword_42C600    dd ?                    ; DATA XREF: sub_4162E4+2D↑r
.bss:0042C600                                         ; sub_4162E4+3F↑w
.bss:0042C604                 align 10h
.bss:0042C610 dword_42C610    dd ?                    ; DATA XREF: sub_416FA0+100↑r
.bss:0042C610                                         ; sub_416FA0+308↑w
.bss:0042C614                 align 10h
.bss:0042C620 ; char *Str
.bss:0042C620 Str             dd ?                    ; DATA XREF: sub_416FA0:loc_417304↑r
.bss:0042C620                                         ; sub_416FA0+3B6↑r ...
.bss:0042C624                 align 10h
.bss:0042C630 dword_42C630    dd ?                    ; DATA XREF: sub_419140+1C↑r
.bss:0042C630                                         ; sub_419140+104↑w
.bss:0042C634                 align 10h
.bss:0042C640 dword_42C640    dd ?                    ; DATA XREF: sub_419140+B↑r
.bss:0042C640                                         ; sub_419140+71↑w
.bss:0042C644                 align 10h
.bss:0042C650 dword_42C650    dd ?                    ; DATA XREF: sub_419140+85↑r
.bss:0042C650                                         ; sub_419140+B9↑w
.bss:0042C654 dword_42C654    dd ?                    ; DATA XREF: sub_419140+C4↑w
.bss:0042C658 dword_42C658    dd ?                    ; DATA XREF: sub_419140+2E↑o
.bss:0042C658                                         ; sub_419140+CF↑w
.bss:0042C65C dword_42C65C    dd ?                    ; DATA XREF: sub_419140+DA↑w
.bss:0042C660                 db    ? ;
.bss:0042C661                 db    ? ;
.bss:0042C662                 db    ? ;
.bss:0042C663                 db    ? ;
.bss:0042C664                 db    ? ;
.bss:0042C665                 db    ? ;
.bss:0042C666                 db    ? ;
.bss:0042C667                 db    ? ;
.bss:0042C668                 db    ? ;
.bss:0042C669                 db    ? ;
.bss:0042C66A                 db    ? ;
.bss:0042C66B                 db    ? ;
.bss:0042C66C                 db    ? ;
.bss:0042C66D                 db    ? ;
.bss:0042C66E                 db    ? ;
.bss:0042C66F                 db    ? ;
.bss:0042C670                 db    ? ;
.bss:0042C671                 db    ? ;
.bss:0042C672                 db    ? ;
.bss:0042C673                 db    ? ;
.bss:0042C674                 db    ? ;
.bss:0042C675                 db    ? ;
.bss:0042C676                 db    ? ;
.bss:0042C677                 db    ? ;
.bss:0042C678                 db    ? ;
.bss:0042C679                 db    ? ;
.bss:0042C67A                 db    ? ;
.bss:0042C67B                 db    ? ;
.bss:0042C67C                 db    ? ;
.bss:0042C67D                 db    ? ;
.bss:0042C67E                 db    ? ;
.bss:0042C67F                 db    ? ;
.bss:0042C680                 db    ? ;
.bss:0042C681                 db    ? ;
.bss:0042C682                 db    ? ;
.bss:0042C683                 db    ? ;
.bss:0042C684                 db    ? ;
.bss:0042C685                 db    ? ;
.bss:0042C686                 db    ? ;
.bss:0042C687                 db    ? ;
.bss:0042C688                 db    ? ;
.bss:0042C689                 db    ? ;
.bss:0042C68A                 db    ? ;
.bss:0042C68B                 db    ? ;
.bss:0042C68C                 db    ? ;
.bss:0042C68D                 db    ? ;
.bss:0042C68E                 db    ? ;
.bss:0042C68F                 db    ? ;
.bss:0042C690                 db    ? ;
.bss:0042C691                 db    ? ;
.bss:0042C692                 db    ? ;
.bss:0042C693                 db    ? ;
.bss:0042C694                 db    ? ;
.bss:0042C695                 db    ? ;
.bss:0042C696                 db    ? ;
.bss:0042C697                 db    ? ;
.bss:0042C698                 db    ? ;
.bss:0042C699                 db    ? ;
.bss:0042C69A                 db    ? ;
.bss:0042C69B                 db    ? ;
.bss:0042C69C                 db    ? ;
.bss:0042C69D                 db    ? ;
.bss:0042C69E                 db    ? ;
.bss:0042C69F                 db    ? ;
.bss:0042C6A0                 db    ? ;
.bss:0042C6A1                 db    ? ;
.bss:0042C6A2                 db    ? ;
.bss:0042C6A3                 db    ? ;
.bss:0042C6A4                 db    ? ;
.bss:0042C6A5                 db    ? ;
.bss:0042C6A6                 db    ? ;
.bss:0042C6A7                 db    ? ;
.bss:0042C6A8                 db    ? ;
.bss:0042C6A9                 db    ? ;
.bss:0042C6AA                 db    ? ;
.bss:0042C6AB                 db    ? ;
.bss:0042C6AC                 db    ? ;
.bss:0042C6AD                 db    ? ;
.bss:0042C6AE                 db    ? ;
.bss:0042C6AF                 db    ? ;
.bss:0042C6B0                 db    ? ;
.bss:0042C6B1                 db    ? ;
.bss:0042C6B2                 db    ? ;
.bss:0042C6B3                 db    ? ;
.bss:0042C6B4                 db    ? ;
.bss:0042C6B5                 db    ? ;
.bss:0042C6B6                 db    ? ;
.bss:0042C6B7                 db    ? ;
.bss:0042C6B8                 db    ? ;
.bss:0042C6B9                 db    ? ;
.bss:0042C6BA                 db    ? ;
.bss:0042C6BB                 db    ? ;
.bss:0042C6BC                 db    ? ;
.bss:0042C6BD                 db    ? ;
.bss:0042C6BE                 db    ? ;
.bss:0042C6BF                 db    ? ;
.bss:0042C6C0                 db    ? ;
.bss:0042C6C1                 db    ? ;
.bss:0042C6C2                 db    ? ;
.bss:0042C6C3                 db    ? ;
.bss:0042C6C4                 db    ? ;
.bss:0042C6C5                 db    ? ;
.bss:0042C6C6                 db    ? ;
.bss:0042C6C7                 db    ? ;
.bss:0042C6C8                 db    ? ;
.bss:0042C6C9                 db    ? ;
.bss:0042C6CA                 db    ? ;
.bss:0042C6CB                 db    ? ;
.bss:0042C6CC                 db    ? ;
.bss:0042C6CD                 db    ? ;
.bss:0042C6CE                 db    ? ;
.bss:0042C6CF                 db    ? ;
.bss:0042C6D0                 db    ? ;
.bss:0042C6D1                 db    ? ;
.bss:0042C6D2                 db    ? ;
.bss:0042C6D3                 db    ? ;
.bss:0042C6D4                 db    ? ;
.bss:0042C6D5                 db    ? ;
.bss:0042C6D6                 db    ? ;
.bss:0042C6D7                 db    ? ;
.bss:0042C6D8                 db    ? ;
.bss:0042C6D9                 db    ? ;
.bss:0042C6DA                 db    ? ;
.bss:0042C6DB                 db    ? ;
.bss:0042C6DC                 db    ? ;
.bss:0042C6DD                 db    ? ;
.bss:0042C6DE                 db    ? ;
.bss:0042C6DF                 db    ? ;
.bss:0042C6E0                 db    ? ;
.bss:0042C6E1                 db    ? ;
.bss:0042C6E2                 db    ? ;
.bss:0042C6E3                 db    ? ;
.bss:0042C6E4                 db    ? ;
.bss:0042C6E5                 db    ? ;
.bss:0042C6E6                 db    ? ;
.bss:0042C6E7                 db    ? ;
.bss:0042C6E8                 db    ? ;
.bss:0042C6E9                 db    ? ;
.bss:0042C6EA                 db    ? ;
.bss:0042C6EB                 db    ? ;
.bss:0042C6EC                 db    ? ;
.bss:0042C6ED                 db    ? ;
.bss:0042C6EE                 db    ? ;
.bss:0042C6EF                 db    ? ;
.bss:0042C6F0                 db    ? ;
.bss:0042C6F1                 db    ? ;
.bss:0042C6F2                 db    ? ;
.bss:0042C6F3                 db    ? ;
.bss:0042C6F4                 db    ? ;
.bss:0042C6F5                 db    ? ;
.bss:0042C6F6                 db    ? ;
.bss:0042C6F7                 db    ? ;
.bss:0042C6F8                 db    ? ;
.bss:0042C6F9                 db    ? ;
.bss:0042C6FA                 db    ? ;
.bss:0042C6FB                 db    ? ;
.bss:0042C6FC                 db    ? ;
.bss:0042C6FD                 db    ? ;
.bss:0042C6FE                 db    ? ;
.bss:0042C6FF                 db    ? ;
.bss:0042C700                 db    ? ;
.bss:0042C701                 db    ? ;
.bss:0042C702                 db    ? ;
.bss:0042C703                 db    ? ;
.bss:0042C704                 db    ? ;
.bss:0042C705                 db    ? ;
.bss:0042C706                 db    ? ;
.bss:0042C707                 db    ? ;
.bss:0042C708                 db    ? ;
.bss:0042C709                 db    ? ;
.bss:0042C70A                 db    ? ;
.bss:0042C70B                 db    ? ;
.bss:0042C70C                 db    ? ;
.bss:0042C70D                 db    ? ;
.bss:0042C70E                 db    ? ;
.bss:0042C70F                 db    ? ;
.bss:0042C710                 db    ? ;
.bss:0042C711                 db    ? ;
.bss:0042C712                 db    ? ;
.bss:0042C713                 db    ? ;
.bss:0042C714                 db    ? ;
.bss:0042C715                 db    ? ;
.bss:0042C716                 db    ? ;
.bss:0042C717                 db    ? ;
.bss:0042C718                 db    ? ;
.bss:0042C719                 db    ? ;
.bss:0042C71A                 db    ? ;
.bss:0042C71B                 db    ? ;
.bss:0042C71C                 db    ? ;
.bss:0042C71D                 db    ? ;
.bss:0042C71E                 db    ? ;
.bss:0042C71F                 db    ? ;
.bss:0042C720                 db    ? ;
.bss:0042C721                 db    ? ;
.bss:0042C722                 db    ? ;
.bss:0042C723                 db    ? ;
.bss:0042C724                 db    ? ;
.bss:0042C725                 db    ? ;
.bss:0042C726                 db    ? ;
.bss:0042C727                 db    ? ;
.bss:0042C728                 db    ? ;
.bss:0042C729                 db    ? ;
.bss:0042C72A                 db    ? ;
.bss:0042C72B                 db    ? ;
.bss:0042C72C                 db    ? ;
.bss:0042C72D                 db    ? ;
.bss:0042C72E                 db    ? ;
.bss:0042C72F                 db    ? ;
.bss:0042C730                 db    ? ;
.bss:0042C731                 db    ? ;
.bss:0042C732                 db    ? ;
.bss:0042C733                 db    ? ;
.bss:0042C734                 db    ? ;
.bss:0042C735                 db    ? ;
.bss:0042C736                 db    ? ;
.bss:0042C737                 db    ? ;
.bss:0042C738                 db    ? ;
.bss:0042C739                 db    ? ;
.bss:0042C73A                 db    ? ;
.bss:0042C73B                 db    ? ;
.bss:0042C73C                 db    ? ;
.bss:0042C73D                 db    ? ;
.bss:0042C73E                 db    ? ;
.bss:0042C73F                 db    ? ;
.bss:0042C740                 db    ? ;
.bss:0042C741                 db    ? ;
.bss:0042C742                 db    ? ;
.bss:0042C743                 db    ? ;
.bss:0042C744                 db    ? ;
.bss:0042C745                 db    ? ;
.bss:0042C746                 db    ? ;
.bss:0042C747                 db    ? ;
.bss:0042C748                 db    ? ;
.bss:0042C749                 db    ? ;
.bss:0042C74A                 db    ? ;
.bss:0042C74B                 db    ? ;
.bss:0042C74C                 db    ? ;
.bss:0042C74D                 db    ? ;
.bss:0042C74E                 db    ? ;
.bss:0042C74F                 db    ? ;
.bss:0042C750                 db    ? ;
.bss:0042C751                 db    ? ;
.bss:0042C752                 db    ? ;
.bss:0042C753                 db    ? ;
.bss:0042C754                 db    ? ;
.bss:0042C755                 db    ? ;
.bss:0042C756                 db    ? ;
.bss:0042C757                 db    ? ;
.bss:0042C758                 db    ? ;
.bss:0042C759                 db    ? ;
.bss:0042C75A                 db    ? ;
.bss:0042C75B                 db    ? ;
.bss:0042C75C                 db    ? ;
.bss:0042C75D                 db    ? ;
.bss:0042C75E                 db    ? ;
.bss:0042C75F                 db    ? ;
.bss:0042C760                 db    ? ;
.bss:0042C761                 db    ? ;
.bss:0042C762                 db    ? ;
.bss:0042C763                 db    ? ;
.bss:0042C764                 db    ? ;
.bss:0042C765                 db    ? ;
.bss:0042C766                 db    ? ;
.bss:0042C767                 db    ? ;
.bss:0042C768                 db    ? ;
.bss:0042C769                 db    ? ;
.bss:0042C76A                 db    ? ;
.bss:0042C76B                 db    ? ;
.bss:0042C76C                 db    ? ;
.bss:0042C76D                 db    ? ;
.bss:0042C76E                 db    ? ;
.bss:0042C76F                 db    ? ;
.bss:0042C770                 db    ? ;
.bss:0042C771                 db    ? ;
.bss:0042C772                 db    ? ;
.bss:0042C773                 db    ? ;
.bss:0042C774                 db    ? ;
.bss:0042C775                 db    ? ;
.bss:0042C776                 db    ? ;
.bss:0042C777                 db    ? ;
.bss:0042C778                 db    ? ;
.bss:0042C779                 db    ? ;
.bss:0042C77A                 db    ? ;
.bss:0042C77B                 db    ? ;
.bss:0042C77C                 db    ? ;
.bss:0042C77D                 db    ? ;
.bss:0042C77E                 db    ? ;
.bss:0042C77F                 db    ? ;
.bss:0042C780                 db    ? ;
.bss:0042C781                 db    ? ;
.bss:0042C782                 db    ? ;
.bss:0042C783                 db    ? ;
.bss:0042C784                 db    ? ;
.bss:0042C785                 db    ? ;
.bss:0042C786                 db    ? ;
.bss:0042C787                 db    ? ;
.bss:0042C788                 db    ? ;
.bss:0042C789                 db    ? ;
.bss:0042C78A                 db    ? ;
.bss:0042C78B                 db    ? ;
.bss:0042C78C                 db    ? ;
.bss:0042C78D                 db    ? ;
.bss:0042C78E                 db    ? ;
.bss:0042C78F                 db    ? ;
.bss:0042C790                 db    ? ;
.bss:0042C791                 db    ? ;
.bss:0042C792                 db    ? ;
.bss:0042C793                 db    ? ;
.bss:0042C794                 db    ? ;
.bss:0042C795                 db    ? ;
.bss:0042C796                 db    ? ;
.bss:0042C797                 db    ? ;
.bss:0042C798                 db    ? ;
.bss:0042C799                 db    ? ;
.bss:0042C79A                 db    ? ;
.bss:0042C79B                 db    ? ;
.bss:0042C79C                 db    ? ;
.bss:0042C79D                 db    ? ;
.bss:0042C79E                 db    ? ;
.bss:0042C79F                 db    ? ;
.bss:0042C7A0                 db    ? ;
.bss:0042C7A1                 db    ? ;
.bss:0042C7A2                 db    ? ;
.bss:0042C7A3                 db    ? ;
.bss:0042C7A4                 db    ? ;
.bss:0042C7A5                 db    ? ;
.bss:0042C7A6                 db    ? ;
.bss:0042C7A7                 db    ? ;
.bss:0042C7A8                 db    ? ;
.bss:0042C7A9                 db    ? ;
.bss:0042C7AA                 db    ? ;
.bss:0042C7AB                 db    ? ;
.bss:0042C7AC                 db    ? ;
.bss:0042C7AD                 db    ? ;
.bss:0042C7AE                 db    ? ;
.bss:0042C7AF                 db    ? ;
.bss:0042C7B0                 db    ? ;
.bss:0042C7B1                 db    ? ;
.bss:0042C7B2                 db    ? ;
.bss:0042C7B3                 db    ? ;
.bss:0042C7B4                 db    ? ;
.bss:0042C7B5                 db    ? ;
.bss:0042C7B6                 db    ? ;
.bss:0042C7B7                 db    ? ;
.bss:0042C7B8                 db    ? ;
.bss:0042C7B9                 db    ? ;
.bss:0042C7BA                 db    ? ;
.bss:0042C7BB                 db    ? ;
.bss:0042C7BC                 db    ? ;
.bss:0042C7BD                 db    ? ;
.bss:0042C7BE                 db    ? ;
.bss:0042C7BF                 db    ? ;
.bss:0042C7C0                 db    ? ;
.bss:0042C7C1                 db    ? ;
.bss:0042C7C2                 db    ? ;
.bss:0042C7C3                 db    ? ;
.bss:0042C7C4                 db    ? ;
.bss:0042C7C5                 db    ? ;
.bss:0042C7C6                 db    ? ;
.bss:0042C7C7                 db    ? ;
.bss:0042C7C8                 db    ? ;
.bss:0042C7C9                 db    ? ;
.bss:0042C7CA                 db    ? ;
.bss:0042C7CB                 db    ? ;
.bss:0042C7CC                 db    ? ;
.bss:0042C7CD                 db    ? ;
.bss:0042C7CE                 db    ? ;
.bss:0042C7CF                 db    ? ;
.bss:0042C7D0                 db    ? ;
.bss:0042C7D1                 db    ? ;
.bss:0042C7D2                 db    ? ;
.bss:0042C7D3                 db    ? ;
.bss:0042C7D4                 db    ? ;
.bss:0042C7D5                 db    ? ;
.bss:0042C7D6                 db    ? ;
.bss:0042C7D7                 db    ? ;
.bss:0042C7D8                 db    ? ;
.bss:0042C7D9                 db    ? ;
.bss:0042C7DA                 db    ? ;
.bss:0042C7DB                 db    ? ;
.bss:0042C7DC                 db    ? ;
.bss:0042C7DD                 db    ? ;
.bss:0042C7DE                 db    ? ;
.bss:0042C7DF                 db    ? ;
.bss:0042C7E0                 db    ? ;
.bss:0042C7E1                 db    ? ;
.bss:0042C7E2                 db    ? ;
.bss:0042C7E3                 db    ? ;
.bss:0042C7E4                 db    ? ;
.bss:0042C7E5                 db    ? ;
.bss:0042C7E6                 db    ? ;
.bss:0042C7E7                 db    ? ;
.bss:0042C7E8                 db    ? ;
.bss:0042C7E9                 db    ? ;
.bss:0042C7EA                 db    ? ;
.bss:0042C7EB                 db    ? ;
.bss:0042C7EC                 db    ? ;
.bss:0042C7ED                 db    ? ;
.bss:0042C7EE                 db    ? ;
.bss:0042C7EF                 db    ? ;
.bss:0042C7F0                 db    ? ;
.bss:0042C7F1                 db    ? ;
.bss:0042C7F2                 db    ? ;
.bss:0042C7F3                 db    ? ;
.bss:0042C7F4                 db    ? ;
.bss:0042C7F5                 db    ? ;
.bss:0042C7F6                 db    ? ;
.bss:0042C7F7                 db    ? ;
.bss:0042C7F8                 db    ? ;
.bss:0042C7F9                 db    ? ;
.bss:0042C7FA                 db    ? ;
.bss:0042C7FB                 db    ? ;
.bss:0042C7FC                 db    ? ;
.bss:0042C7FD                 db    ? ;
.bss:0042C7FE                 db    ? ;
.bss:0042C7FF                 db    ? ;
.bss:0042C800                 db    ? ;
.bss:0042C801                 db    ? ;
.bss:0042C802                 db    ? ;
.bss:0042C803                 db    ? ;
.bss:0042C804                 db    ? ;
.bss:0042C805                 db    ? ;
.bss:0042C806                 db    ? ;
.bss:0042C807                 db    ? ;
.bss:0042C808                 db    ? ;
.bss:0042C809                 db    ? ;
.bss:0042C80A                 db    ? ;
.bss:0042C80B                 db    ? ;
.bss:0042C80C                 db    ? ;
.bss:0042C80D                 db    ? ;
.bss:0042C80E                 db    ? ;
.bss:0042C80F                 db    ? ;
.bss:0042C810                 db    ? ;
.bss:0042C811                 db    ? ;
.bss:0042C812                 db    ? ;
.bss:0042C813                 db    ? ;
.bss:0042C814                 db    ? ;
.bss:0042C815                 db    ? ;
.bss:0042C816                 db    ? ;
.bss:0042C817                 db    ? ;
.bss:0042C818                 db    ? ;
.bss:0042C819                 db    ? ;
.bss:0042C81A                 db    ? ;
.bss:0042C81B                 db    ? ;
.bss:0042C81C                 db    ? ;
.bss:0042C81D                 db    ? ;
.bss:0042C81E                 db    ? ;
.bss:0042C81F                 db    ? ;
.bss:0042C820                 db    ? ;
.bss:0042C821                 db    ? ;
.bss:0042C822                 db    ? ;
.bss:0042C823                 db    ? ;
.bss:0042C824                 db    ? ;
.bss:0042C825                 db    ? ;
.bss:0042C826                 db    ? ;
.bss:0042C827                 db    ? ;
.bss:0042C828                 db    ? ;
.bss:0042C829                 db    ? ;
.bss:0042C82A                 db    ? ;
.bss:0042C82B                 db    ? ;
.bss:0042C82C                 db    ? ;
.bss:0042C82D                 db    ? ;
.bss:0042C82E                 db    ? ;
.bss:0042C82F                 db    ? ;
.bss:0042C830                 db    ? ;
.bss:0042C831                 db    ? ;
.bss:0042C832                 db    ? ;
.bss:0042C833                 db    ? ;
.bss:0042C834                 db    ? ;
.bss:0042C835                 db    ? ;
.bss:0042C836                 db    ? ;
.bss:0042C837                 db    ? ;
.bss:0042C838                 db    ? ;
.bss:0042C839                 db    ? ;
.bss:0042C83A                 db    ? ;
.bss:0042C83B                 db    ? ;
.bss:0042C83C                 db    ? ;
.bss:0042C83D                 db    ? ;
.bss:0042C83E                 db    ? ;
.bss:0042C83F                 db    ? ;
.bss:0042C840                 db    ? ;
.bss:0042C841                 db    ? ;
.bss:0042C842                 db    ? ;
.bss:0042C843                 db    ? ;
.bss:0042C844                 db    ? ;
.bss:0042C845                 db    ? ;
.bss:0042C846                 db    ? ;
.bss:0042C847                 db    ? ;
.bss:0042C848                 db    ? ;
.bss:0042C849                 db    ? ;
.bss:0042C84A                 db    ? ;
.bss:0042C84B                 db    ? ;
.bss:0042C84C                 db    ? ;
.bss:0042C84D                 db    ? ;
.bss:0042C84E                 db    ? ;
.bss:0042C84F                 db    ? ;
.bss:0042C850 dword_42C850    dd ?                    ; DATA XREF: sub_419EC0+3E↑r
.bss:0042C850                                         ; sub_419EC0+F5↑w
.bss:0042C854 dword_42C854    dd ?                    ; DATA XREF: sub_419EC0+38↑r
.bss:0042C854                                         ; sub_419EC0+EB↑w
.bss:0042C858                 align 10h
.bss:0042C860 dword_42C860    dd ?                    ; DATA XREF: sub_41A1F0+38↑r
.bss:0042C860                                         ; sub_41A1F0+FC↑w ...
.bss:0042C864                 align 10h
.bss:0042C870 dword_42C870    dd ?                    ; DATA XREF: sub_41A1F0+4A↑r
.bss:0042C870                                         ; sub_41A1F0+123↑w
.bss:0042C874                 align 10h
.bss:0042C880 unk_42C880      db    ? ;               ; DATA XREF: sub_41A9F0+22↑o
.bss:0042C881                 db    ? ;
.bss:0042C882                 db    ? ;
.bss:0042C883                 db    ? ;
.bss:0042C884                 db    ? ;
.bss:0042C885                 db    ? ;
.bss:0042C886                 db    ? ;
.bss:0042C887                 db    ? ;
.bss:0042C888                 db    ? ;
.bss:0042C889                 db    ? ;
.bss:0042C88A                 db    ? ;
.bss:0042C88B                 db    ? ;
.bss:0042C88C                 db    ? ;
.bss:0042C88D                 db    ? ;
.bss:0042C88E                 db    ? ;
.bss:0042C88F                 db    ? ;
.bss:0042C890                 db    ? ;
.bss:0042C891                 db    ? ;
.bss:0042C892                 db    ? ;
.bss:0042C893                 db    ? ;
.bss:0042C894                 db    ? ;
.bss:0042C895                 db    ? ;
.bss:0042C896                 db    ? ;
.bss:0042C897                 db    ? ;
.bss:0042C898                 db    ? ;
.bss:0042C899                 db    ? ;
.bss:0042C89A                 db    ? ;
.bss:0042C89B                 db    ? ;
.bss:0042C89C                 db    ? ;
.bss:0042C89D                 db    ? ;
.bss:0042C89E                 db    ? ;
.bss:0042C89F                 db    ? ;
.bss:0042C8A0 ; char byte_42C8A0[1024]
.bss:0042C8A0 byte_42C8A0     db 400h dup(?)          ; DATA XREF: sub_41A9F0+1A↑o
.bss:0042CCA0 unk_42CCA0      db    ? ;               ; DATA XREF: sub_41AA40+22↑o
.bss:0042CCA1                 db    ? ;
.bss:0042CCA2                 db    ? ;
.bss:0042CCA3                 db    ? ;
.bss:0042CCA4                 db    ? ;
.bss:0042CCA5                 db    ? ;
.bss:0042CCA6                 db    ? ;
.bss:0042CCA7                 db    ? ;
.bss:0042CCA8                 db    ? ;
.bss:0042CCA9                 db    ? ;
.bss:0042CCAA                 db    ? ;
.bss:0042CCAB                 db    ? ;
.bss:0042CCAC                 db    ? ;
.bss:0042CCAD                 db    ? ;
.bss:0042CCAE                 db    ? ;
.bss:0042CCAF                 db    ? ;
.bss:0042CCB0                 db    ? ;
.bss:0042CCB1                 db    ? ;
.bss:0042CCB2                 db    ? ;
.bss:0042CCB3                 db    ? ;
.bss:0042CCB4                 db    ? ;
.bss:0042CCB5                 db    ? ;
.bss:0042CCB6                 db    ? ;
.bss:0042CCB7                 db    ? ;
.bss:0042CCB8                 db    ? ;
.bss:0042CCB9                 db    ? ;
.bss:0042CCBA                 db    ? ;
.bss:0042CCBB                 db    ? ;
.bss:0042CCBC                 db    ? ;
.bss:0042CCBD                 db    ? ;
.bss:0042CCBE                 db    ? ;
.bss:0042CCBF                 db    ? ;
.bss:0042CCC0 ; char byte_42CCC0[1024]
.bss:0042CCC0 byte_42CCC0     db 400h dup(?)          ; DATA XREF: sub_41AA40+1A↑o
.bss:0042D0C0 dword_42D0C0    dd ?                    ; DATA XREF: sub_41B750+8↑r
.bss:0042D0C0                                         ; sub_41B860:loc_41B8E2↑w ...
.bss:0042D0C4                 align 10h
.bss:0042D0D0 ; struct _OSVERSIONINFOA VersionInformation
.bss:0042D0D0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_41B860:loc_41B880↑o
.bss:0042D0D0                                         ; sub_41B860+2C↑w ...
.bss:0042D164 word_42D164     dw ?                    ; DATA XREF: sub_41B860:loc_41B913↑r
.bss:0042D166                 align 4
.bss:0042D168 word_42D168     dw ?                    ; DATA XREF: .text:loc_41B2D6↑r
.bss:0042D168                                         ; .text:0041B304↑r ...
.bss:0042D16A byte_42D16A     db ?                    ; DATA XREF: .text:0041B295↑r
.bss:0042D16B                 align 10h
.bss:0042D170 dword_42D170    dd ?                    ; DATA XREF: sub_41B860+6↑r
.bss:0042D170                                         ; sub_41B860+75↑w
.bss:0042D174                 align 10h
.bss:0042D180 ; LARGE_INTEGER Frequency
.bss:0042D180 Frequency       LARGE_INTEGER <?>       ; DATA XREF: sub_41C8B0+D↑r
.bss:0042D180                                         ; sub_41C8B0:loc_41C8D0↑o ...
.bss:0042D188                 align 10h
.bss:0042D190 dword_42D190    dd ?                    ; DATA XREF: sub_426B20+7↑r
.bss:0042D190                                         ; sub_426B20+2B↑w ...
.bss:0042D194                 align 10h
.bss:0042D1A0 ; struct _SYSTEM_INFO SystemInfo
.bss:0042D1A0 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_426B20+21↑o
.bss:0042D1A0                                         ; sub_426B20+33↑o ...
.bss:0042D1C4                 align 10h
.bss:0042D1D0 ; CHAR byte_42D1D0[304]
.bss:0042D1D0 byte_42D1D0     db 130h dup(?)          ; DATA XREF: sub_426CA0+17↑o
.bss:0042D1D0                                         ; sub_426CA0+26↑o
.bss:0042D300 dword_42D300    dd ?                    ; DATA XREF: sub_401B10+31↑w
.bss:0042D300                                         ; sub_409020+1F↑r ...
.bss:0042D304                 align 20h
.bss:0042D320 ; char *dword_42D320
.bss:0042D320 dword_42D320    dd ?                    ; DATA XREF: sub_4025F0:loc_402DC0↑r
.bss:0042D320                                         ; sub_4025F0+82E↑r ...
.bss:0042D324                 align 10h
.bss:0042D330 dword_42D330    dd ?                    ; CODE XREF: sub_4162E4+63↑p
.bss:0042D330                                         ; DATA XREF: sub_4161E0+1E↑r ...
.bss:0042D334                 align 10h
.bss:0042D340 dword_42D340    dd ?                    ; DATA XREF: sub_4161E0+4E↑w
.bss:0042D340                                         ; sub_4162E4+AB↑w
.bss:0042D344                 db    ? ;
.bss:0042D345                 db    ? ;
.bss:0042D346                 db    ? ;
.bss:0042D347                 db    ? ;
.bss:0042D348                 db    ? ;
.bss:0042D349                 db    ? ;
.bss:0042D34A                 db    ? ;
.bss:0042D34B                 db    ? ;
.bss:0042D34C                 db    ? ;
.bss:0042D34D                 db    ? ;
.bss:0042D34E                 db    ? ;
.bss:0042D34F                 db    ? ;
.bss:0042D350                 db    ? ;
.bss:0042D351                 db    ? ;
.bss:0042D352                 db    ? ;
.bss:0042D353                 db    ? ;
.bss:0042D354                 db    ? ;
.bss:0042D355                 db    ? ;
.bss:0042D356                 db    ? ;
.bss:0042D357                 db    ? ;
.bss:0042D358                 db    ? ;
.bss:0042D359                 db    ? ;
.bss:0042D35A                 db    ? ;
.bss:0042D35B                 db    ? ;
.bss:0042D35C                 db    ? ;
.bss:0042D35D                 db    ? ;
.bss:0042D35E                 db    ? ;
.bss:0042D35F                 db    ? ;
.bss:0042D360                 db    ? ;
.bss:0042D361                 db    ? ;
.bss:0042D362                 db    ? ;
.bss:0042D363                 db    ? ;
.bss:0042D364                 db    ? ;
.bss:0042D365                 db    ? ;
.bss:0042D366                 db    ? ;
.bss:0042D367                 db    ? ;
.bss:0042D368                 db    ? ;
.bss:0042D369                 db    ? ;
.bss:0042D36A                 db    ? ;
.bss:0042D36B                 db    ? ;
.bss:0042D36C                 db    ? ;
.bss:0042D36D                 db    ? ;
.bss:0042D36E                 db    ? ;
.bss:0042D36F                 db    ? ;
.bss:0042D370 dword_42D370    dd ?                    ; DATA XREF: sub_4162E4+13↑r
.bss:0042D374                 align 10h
.bss:0042D380 dword_42D380    dd ?                    ; DATA XREF: sub_426C80+A↑w
.bss:0042D384                 align 1000h
.bss:0042D384 _bss            ends
.bss:0042D384
.idata:0042E000 ; Section 4. (virtual address 0002E000)
.idata:0042E000 ; Virtual size                  : 00001048 (   4168.)
.idata:0042E000 ; Section size in file          : 00001200 (   4608.)
.idata:0042E000 ; Offset to raw data for section: 0002A000
.idata:0042E000 ; Flags C0000040: Data Readable Writable
.idata:0042E000 ; Alignment     : default
.idata:0042E000 ; ===========================================================================
.idata:0042E000
.idata:0042E000 ; Segment type: Externs
.idata:0042E000 ; _idata
.idata:0042E000
.idata:0042E001
.idata:0042E314 ;
.idata:0042E314 ; Imports from libintl3.dll
.idata:0042E314 ;
.idata:0042E314                 extrn libintl_bindtextdomain:dword
.idata:0042E314                                         ; CODE XREF: sub_401B10+4B↑p
.idata:0042E314                                         ; DATA XREF: sub_401B10+4B↑r ...
.idata:0042E318                 extrn libintl_dcgettext:dword
.idata:0042E318                                         ; CODE XREF: sub_4025F0+F24↑p
.idata:0042E318                                         ; DATA XREF: sub_4025F0+F24↑r ...
.idata:0042E31C                 extrn libintl_gettext:dword
.idata:0042E31C                                         ; CODE XREF: sub_4025F0+878↑p
.idata:0042E31C                                         ; sub_4025F0+A7E↑p ...
.idata:0042E320                 extrn libintl_textdomain:dword
.idata:0042E320                                         ; CODE XREF: sub_401B10+58↑p
.idata:0042E320                                         ; DATA XREF: sub_401B10+58↑r ...
.idata:0042E324
.idata:0042E32C ;
.idata:0042E32C ; Imports from ADVAPI32.DLL
.idata:0042E32C ;
.idata:0042E32C ; BOOL (__stdcall *GetUserNameA)(LPSTR lpBuffer, LPDWORD pcbBuffer)
.idata:0042E32C                 extrn __imp_GetUserNameA:dword
.idata:0042E32C                                         ; DATA XREF: GetUserNameA↑r
.idata:0042E330 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0042E330                 extrn __imp_RegCloseKey:dword
.idata:0042E330                                         ; DATA XREF: RegCloseKey↑r
.idata:0042E334 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0042E334                 extrn __imp_RegOpenKeyExA:dword
.idata:0042E334                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0042E338 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0042E338                 extrn __imp_RegQueryValueExA:dword
.idata:0042E338                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0042E33C
.idata:0042E344 ;
.idata:0042E344 ; Imports from KERNEL32.dll
.idata:0042E344 ;
.idata:0042E344 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0042E344                 extrn __imp_AreFileApisANSI:dword
.idata:0042E344                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0042E348 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0042E348                 extrn __imp_CloseHandle:dword
.idata:0042E348                                         ; DATA XREF: CloseHandle↑r
.idata:0042E34C ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0042E34C                 extrn __imp_CreateDirectoryA:dword
.idata:0042E34C                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0042E350 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0042E350                 extrn __imp_CreateFileA:dword
.idata:0042E350                                         ; DATA XREF: CreateFileA↑r
.idata:0042E354 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0042E354                 extrn __imp_DeviceIoControl:dword
.idata:0042E354                                         ; DATA XREF: DeviceIoControl↑r
.idata:0042E358 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0042E358                 extrn __imp_ExitProcess:dword
.idata:0042E358                                         ; DATA XREF: ExitProcess↑r
.idata:0042E35C ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0042E35C                 extrn __imp_FindClose:dword
.idata:0042E35C                                         ; DATA XREF: FindClose↑r
.idata:0042E360 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0042E360                 extrn __imp_FindFirstFileA:dword
.idata:0042E360                                         ; DATA XREF: FindFirstFileA↑r
.idata:0042E364 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0042E364                 extrn __imp_FindNextFileA:dword
.idata:0042E364                                         ; DATA XREF: FindNextFileA↑r
.idata:0042E368 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0042E368                 extrn __imp_FreeLibrary:dword
.idata:0042E368                                         ; DATA XREF: FreeLibrary↑r
.idata:0042E36C ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0042E36C                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0042E36C                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0042E370 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0042E370                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0042E370                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0042E374 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0042E374                 extrn __imp_GetDriveTypeA:dword
.idata:0042E374                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0042E378 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0042E378                 extrn __imp_GetFileAttributesA:dword
.idata:0042E378                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0042E37C ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0042E37C                 extrn __imp_GetFileInformationByHandle:dword
.idata:0042E37C                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0042E380 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0042E380                 extrn __imp_GetFileSize:dword
.idata:0042E380                                         ; DATA XREF: GetFileSize↑r
.idata:0042E384 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0042E384                 extrn __imp_GetFileType:dword
.idata:0042E384                                         ; DATA XREF: GetFileType↑r
.idata:0042E388 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0042E388                 extrn __imp_GetFullPathNameA:dword
.idata:0042E388                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0042E38C ; DWORD (__stdcall *GetLastError)()
.idata:0042E38C                 extrn __imp_GetLastError:dword
.idata:0042E38C                                         ; DATA XREF: GetLastError↑r
.idata:0042E390 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0042E390                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0042E390                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0042E394 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0042E394                 extrn __imp_GetModuleFileNameA:dword
.idata:0042E394                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0042E398 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0042E398                 extrn __imp_GetModuleHandleA:dword
.idata:0042E398                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0042E39C ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0042E39C                 extrn __imp_GetProcAddress:dword
.idata:0042E39C                                         ; DATA XREF: GetProcAddress↑r
.idata:0042E3A0 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0042E3A0                 extrn __imp_GetProcessHeap:dword
.idata:0042E3A0                                         ; DATA XREF: GetProcessHeap↑r
.idata:0042E3A4 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0042E3A4                 extrn __imp_GetShortPathNameA:dword
.idata:0042E3A4                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0042E3A8 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:0042E3A8                 extrn __imp_GetSystemInfo:dword
.idata:0042E3A8                                         ; DATA XREF: GetSystemInfo↑r
.idata:0042E3AC ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0042E3AC                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0042E3AC                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0042E3B0 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0042E3B0                 extrn __imp_GetTimeZoneInformation:dword
.idata:0042E3B0                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0042E3B4 ; DWORD (__stdcall *GetVersion)()
.idata:0042E3B4                 extrn __imp_GetVersion:dword
.idata:0042E3B4                                         ; DATA XREF: GetVersion↑r
.idata:0042E3B8 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0042E3B8                 extrn __imp_GetVersionExA:dword
.idata:0042E3B8                                         ; DATA XREF: GetVersionExA↑r
.idata:0042E3BC ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0042E3BC                 extrn __imp_GetVolumeInformationA:dword
.idata:0042E3BC                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0042E3C0 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0042E3C0                 extrn __imp_HeapAlloc:dword
.idata:0042E3C0                                         ; DATA XREF: HeapAlloc↑r
.idata:0042E3C4 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0042E3C4                 extrn __imp_HeapFree:dword
.idata:0042E3C4                                         ; DATA XREF: HeapFree↑r
.idata:0042E3C8 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0042E3C8                 extrn __imp_LoadLibraryA:dword
.idata:0042E3C8                                         ; DATA XREF: LoadLibraryA↑r
.idata:0042E3CC ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0042E3CC                 extrn __imp_MultiByteToWideChar:dword
.idata:0042E3CC                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0042E3D0 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0042E3D0                 extrn __imp_PeekNamedPipe:dword
.idata:0042E3D0                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0042E3D4 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:0042E3D4                 extrn __imp_QueryPerformanceFrequency:dword
.idata:0042E3D4                                         ; DATA XREF: QueryPerformanceFrequency↑r
.idata:0042E3D8 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0042E3D8                 extrn __imp_SetErrorMode:dword
.idata:0042E3D8                                         ; DATA XREF: SetErrorMode↑r
.idata:0042E3DC ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0042E3DC                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0042E3DC                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0042E3E0 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0042E3E0                 extrn __imp_UnlockFile:dword
.idata:0042E3E0                                         ; DATA XREF: UnlockFile↑r
.idata:0042E3E4 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0042E3E4                 extrn __imp_lstrcmpiA:dword
.idata:0042E3E4                                         ; DATA XREF: lstrcmpiA↑r
.idata:0042E3E8 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0042E3E8                 extrn __imp_lstrcpyA:dword
.idata:0042E3E8                                         ; DATA XREF: lstrcpyA↑r
.idata:0042E3EC
.idata:0042E3F4 ;
.idata:0042E3F4 ; Imports from msvcrt.dll
.idata:0042E3F4 ;
.idata:0042E3F4 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0042E3F4                 extrn __imp__chmod:dword
.idata:0042E3F4                                         ; DATA XREF: _chmod↑r
.idata:0042E3F8 ; int (__cdecl *_getpid)()
.idata:0042E3F8                 extrn __imp__getpid:dword
.idata:0042E3F8                                         ; DATA XREF: _getpid↑r
.idata:0042E3FC ; int (__cdecl *_isatty)(int FileHandle)
.idata:0042E3FC                 extrn __imp__isatty:dword
.idata:0042E3FC                                         ; DATA XREF: _isatty↑r
.idata:0042E400 ; char *(__cdecl *_strdup)(const char *String)
.idata:0042E400                 extrn __imp__strdup:dword
.idata:0042E400                                         ; DATA XREF: _strdup↑r
.idata:0042E404 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0042E404                 extrn __imp__stricmp:dword
.idata:0042E404                                         ; DATA XREF: _stricmp↑r
.idata:0042E408 ; char *tzname[2]
.idata:0042E408                 extrn _tzname:dword     ; DATA XREF: sub_40A870+1139↑r
.idata:0042E40C ; void (__cdecl *_tzset)()
.idata:0042E40C                 extrn __imp__tzset:dword
.idata:0042E40C                                         ; DATA XREF: _tzset↑r
.idata:0042E410
.idata:0042E418 ;
.idata:0042E418 ; Imports from MSVCP60.DLL
.idata:0042E418 ;
.idata:0042E418 ; wint_t (__cdecl *btowc)(int Ch)
.idata:0042E418                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0042E41C ; size_t (__cdecl *mbrlen)(const char *Ch, size_t SizeInBytes, mbstate_t *State)
.idata:0042E41C                 extrn __imp_mbrlen:dword
.idata:0042E41C                                         ; DATA XREF: mbrlen↑r
.idata:0042E420 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0042E420                 extrn __imp_mbrtowc:dword
.idata:0042E420                                         ; DATA XREF: mbrtowc↑r
.idata:0042E424 ; size_t (__cdecl *mbsrtowcs)(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State)
.idata:0042E424                 extrn __imp_mbsrtowcs:dword
.idata:0042E424                                         ; DATA XREF: mbsrtowcs↑r
.idata:0042E428 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0042E428                 extrn __imp_wctype:dword
.idata:0042E428                                         ; DATA XREF: wctype↑r
.idata:0042E42C
.idata:0042E434 ;
.idata:0042E434 ; Imports from msvcrt.dll
.idata:0042E434 ;
.idata:0042E434                 extrn __imp___getmainargs:dword
.idata:0042E434                                         ; DATA XREF: __getmainargs↑r
.idata:0042E438 ; int _mb_cur_max
.idata:0042E438                 extrn __mb_cur_max:dword
.idata:0042E438                                         ; DATA XREF: sub_405EA0+58↑r
.idata:0042E438                                         ; sub_405EA0+204↑r ...
.idata:0042E43C ; char ***(__cdecl *__p__environ)()
.idata:0042E43C                 extrn __imp___p__environ:dword
.idata:0042E43C                                         ; DATA XREF: __p__environ↑r
.idata:0042E440 ; int *(__cdecl *__p__fmode)()
.idata:0042E440                 extrn __imp___p__fmode:dword
.idata:0042E440                                         ; DATA XREF: __p__fmode↑r
.idata:0042E444 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0042E444                 extrn __set_app_type:dword
.idata:0042E444                                         ; CODE XREF: start+D↑p
.idata:0042E444                                         ; .text:0040102D↑p
.idata:0042E444                                         ; DATA XREF: ...
.idata:0042E448                 extrn __imp__assert:dword
.idata:0042E448                                         ; DATA XREF: _assert↑r
.idata:0042E44C ; void (__cdecl *_cexit)()
.idata:0042E44C                 extrn __imp__cexit:dword
.idata:0042E44C                                         ; DATA XREF: _cexit↑r
.idata:0042E450 ; int (__cdecl *_close)(int FileHandle)
.idata:0042E450                 extrn __imp__close:dword
.idata:0042E450                                         ; DATA XREF: _close↑r
.idata:0042E454 ; int *(__cdecl *_errno)()
.idata:0042E454                 extrn __imp__errno:dword
.idata:0042E454                                         ; DATA XREF: _errno↑r
.idata:0042E458 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0042E458                 extrn __imp__fdopen:dword
.idata:0042E458                                         ; DATA XREF: _fdopen↑r
.idata:0042E45C ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0042E45C                 extrn __imp__filelengthi64:dword
.idata:0042E45C                                         ; DATA XREF: _filelengthi64↑r
.idata:0042E460 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0042E460                 extrn __imp__flsbuf:dword
.idata:0042E460                                         ; DATA XREF: _flsbuf↑r
.idata:0042E464 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0042E464                 extrn __imp__get_osfhandle:dword
.idata:0042E464                                         ; DATA XREF: _get_osfhandle↑r
.idata:0042E468 ; FILE iob[]
.idata:0042E468                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0042E468                                         ; sub_401080+75↑r ...
.idata:0042E46C ; int (__cdecl *_isctype)(int C, int Type)
.idata:0042E46C                 extrn __imp__isctype:dword
.idata:0042E46C                                         ; DATA XREF: _isctype↑r
.idata:0042E470 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0042E470                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0042E470                                         ; DATA XREF: .text:0040106C↑r
.idata:0042E474 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0042E474                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0042E478 ; const unsigned __int16 *pctype
.idata:0042E478                 extrn _pctype:dword     ; DATA XREF: sub_405EA0:loc_4060C0↑r
.idata:0042E478                                         ; sub_405EA0:loc_406142↑r ...
.idata:0042E47C ; int (__cdecl *_setjmp)(jmp_buf Buf)
.idata:0042E47C                 extrn __imp__setjmp:dword
.idata:0042E47C                                         ; DATA XREF: _setjmp↑r
.idata:0042E480 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0042E480                 extrn __imp__setmode:dword
.idata:0042E480                                         ; DATA XREF: _setmode↑r
.idata:0042E484 ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0042E484                 extrn __imp__stricmp_0:dword
.idata:0042E484                                         ; DATA XREF: _stricmp_0↑r
.idata:0042E488 ; void (__cdecl __noreturn *abort)()
.idata:0042E488                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0042E48C ; char *(__cdecl *asctime)(const struct tm *Tm)
.idata:0042E48C                 extrn __imp_asctime:dword
.idata:0042E48C                                         ; DATA XREF: asctime↑r
.idata:0042E490 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0042E490                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0042E490                                         ; DATA XREF: sub_401040+C↑r
.idata:0042E494 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0042E494                 extrn __imp_calloc:dword
.idata:0042E494                                         ; DATA XREF: calloc↑r
.idata:0042E498 ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0042E498                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:0042E49C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0042E49C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0042E4A0 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0042E4A0                 extrn __imp_fclose:dword
.idata:0042E4A0                                         ; DATA XREF: fclose↑r
.idata:0042E4A4 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0042E4A4                 extrn __imp_fflush:dword
.idata:0042E4A4                                         ; DATA XREF: fflush↑r
.idata:0042E4A8 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0042E4A8                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0042E4AC ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0042E4AC                 extrn __imp_fprintf:dword
.idata:0042E4AC                                         ; DATA XREF: fprintf↑r
.idata:0042E4B0 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0042E4B0                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0042E4B4 ; void (__cdecl *free)(void *Block)
.idata:0042E4B4                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0042E4B8 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0042E4B8                 extrn __imp_fwrite:dword
.idata:0042E4B8                                         ; DATA XREF: fwrite↑r
.idata:0042E4BC ; char *(__cdecl *getenv)(const char *VarName)
.idata:0042E4BC                 extrn __imp_getenv:dword
.idata:0042E4BC                                         ; DATA XREF: getenv↑r
.idata:0042E4C0 ; struct tm *(__cdecl *gmtime)(const __time32_t *const Time)
.idata:0042E4C0                 extrn __imp_gmtime:dword
.idata:0042E4C0                                         ; DATA XREF: gmtime↑r
.idata:0042E4C4 ; int (__cdecl *isalpha)(int C)
.idata:0042E4C4                 extrn __imp_isalpha:dword
.idata:0042E4C4                                         ; DATA XREF: isalpha↑r
.idata:0042E4C8 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0042E4C8                 extrn __imp_iswctype:dword
.idata:0042E4C8                                         ; DATA XREF: iswctype↑r
.idata:0042E4CC ; struct lconv *(__cdecl *localeconv)()
.idata:0042E4CC                 extrn __imp_localeconv:dword
.idata:0042E4CC                                         ; DATA XREF: localeconv↑r
.idata:0042E4D0 ; struct tm *(__cdecl *localtime)(const __time32_t *const Time)
.idata:0042E4D0                 extrn __imp_localtime:dword
.idata:0042E4D0                                         ; DATA XREF: localtime↑r
.idata:0042E4D4 ; void (__cdecl __noreturn *longjmp)(jmp_buf Buf, int Value)
.idata:0042E4D4                 extrn __imp_longjmp:dword
.idata:0042E4D4                                         ; DATA XREF: longjmp↑r
.idata:0042E4D8 ; void *(__cdecl *malloc)(size_t Size)
.idata:0042E4D8                 extrn __imp_malloc:dword
.idata:0042E4D8                                         ; DATA XREF: malloc↑r
.idata:0042E4DC ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:0042E4DC                 extrn __imp_memchr:dword
.idata:0042E4DC                                         ; DATA XREF: memchr↑r
.idata:0042E4E0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0042E4E0                 extrn __imp_memcpy:dword
.idata:0042E4E0                                         ; DATA XREF: memcpy↑r
.idata:0042E4E4 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:0042E4E4                 extrn __imp_memmove:dword
.idata:0042E4E4                                         ; DATA XREF: memmove↑r
.idata:0042E4E8 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0042E4E8                 extrn __imp_memset:dword
.idata:0042E4E8                                         ; DATA XREF: memset↑r
.idata:0042E4EC ; __time32_t (__cdecl *mktime)(struct tm *const Tm)
.idata:0042E4EC                 extrn __imp_mktime:dword
.idata:0042E4EC                                         ; DATA XREF: mktime↑r
.idata:0042E4F0 ; int (*printf)(const char *const Format, ...)
.idata:0042E4F0                 extrn __imp_printf:dword
.idata:0042E4F0                                         ; DATA XREF: printf↑r
.idata:0042E4F4 ; int (__cdecl *raise)(int Signal)
.idata:0042E4F4                 extrn __imp_raise:dword ; DATA XREF: raise↑r
.idata:0042E4F8 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0042E4F8                 extrn __imp_realloc:dword
.idata:0042E4F8                                         ; DATA XREF: realloc↑r
.idata:0042E4FC ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0042E4FC                 extrn __imp_setlocale:dword
.idata:0042E4FC                                         ; DATA XREF: setlocale↑r
.idata:0042E500 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0042E500                 extrn __imp_signal:dword
.idata:0042E500                                         ; DATA XREF: signal↑r
.idata:0042E504 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0042E504                 extrn __imp_sprintf:dword
.idata:0042E504                                         ; DATA XREF: sprintf↑r
.idata:0042E508 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0042E508                 extrn __imp_sscanf:dword
.idata:0042E508                                         ; DATA XREF: sscanf↑r
.idata:0042E50C ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0042E50C                 extrn __imp_strcat:dword
.idata:0042E50C                                         ; DATA XREF: strcat↑r
.idata:0042E510 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0042E510                 extrn __imp_strchr:dword
.idata:0042E510                                         ; DATA XREF: strchr↑r
.idata:0042E514 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0042E514                 extrn __imp_strcmp:dword
.idata:0042E514                                         ; DATA XREF: strcmp↑r
.idata:0042E518 ; int (__cdecl *strcoll)(const char *String1, const char *String2)
.idata:0042E518                 extrn __imp_strcoll:dword
.idata:0042E518                                         ; DATA XREF: strcoll↑r
.idata:0042E51C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0042E51C                 extrn __imp_strcpy:dword
.idata:0042E51C                                         ; DATA XREF: strcpy↑r
.idata:0042E520 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0042E520                 extrn __imp_strerror:dword
.idata:0042E520                                         ; DATA XREF: strerror↑r
.idata:0042E524 ; size_t (__cdecl *strftime)(char *Buffer, size_t SizeInBytes, const char *Format, const struct tm *Tm)
.idata:0042E524                 extrn __imp_strftime:dword
.idata:0042E524                                         ; DATA XREF: strftime↑r
.idata:0042E528 ; size_t (__cdecl *strlen)(const char *Str)
.idata:0042E528                 extrn __imp_strlen:dword
.idata:0042E528                                         ; DATA XREF: strlen↑r
.idata:0042E52C ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:0042E52C                 extrn __imp_strncat:dword
.idata:0042E52C                                         ; DATA XREF: strncat↑r
.idata:0042E530 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0042E530                 extrn __imp_strncmp:dword
.idata:0042E530                                         ; DATA XREF: strncmp↑r
.idata:0042E534 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0042E534                 extrn __imp_strncpy:dword
.idata:0042E534                                         ; DATA XREF: strncpy↑r
.idata:0042E538 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0042E538                 extrn __imp_strpbrk:dword
.idata:0042E538                                         ; DATA XREF: strpbrk↑r
.idata:0042E53C ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0042E53C                 extrn __imp_strrchr:dword
.idata:0042E53C                                         ; DATA XREF: strrchr↑r
.idata:0042E540 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0042E540                 extrn __imp_strspn:dword
.idata:0042E540                                         ; DATA XREF: strspn↑r
.idata:0042E544 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0042E544                 extrn __imp_strstr:dword
.idata:0042E544                                         ; DATA XREF: strstr↑r
.idata:0042E548 ; unsigned int (__cdecl *strtoul)(const char *String, char **EndPtr, int Radix)
.idata:0042E548                 extrn __imp_strtoul:dword
.idata:0042E548                                         ; DATA XREF: strtoul↑r
.idata:0042E54C ; __time32_t (__cdecl *time)(__time32_t *const Time)
.idata:0042E54C                 extrn __imp_time:dword  ; DATA XREF: time↑r
.idata:0042E550 ; int (__cdecl *tolower)(int C)
.idata:0042E550                 extrn __imp_tolower:dword
.idata:0042E550                                         ; DATA XREF: tolower↑r
.idata:0042E554 ; int (__cdecl *toupper)(int C)
.idata:0042E554                 extrn __imp_toupper:dword
.idata:0042E554                                         ; DATA XREF: toupper↑r
.idata:0042E558 ; wint_t (__cdecl *towlower)(wint_t C)
.idata:0042E558                 extrn __imp_towlower:dword
.idata:0042E558                                         ; DATA XREF: towlower↑r
.idata:0042E55C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0042E55C                 extrn __imp_vfprintf:dword
.idata:0042E55C                                         ; DATA XREF: vfprintf↑r
.idata:0042E560 ; wchar_t *(__cdecl *wcscat)(wchar_t *Destination, const wchar_t *Source)
.idata:0042E560                 extrn __imp_wcscat:dword
.idata:0042E560                                         ; DATA XREF: wcscat↑r
.idata:0042E564 ; size_t (__cdecl *wcslen)(const wchar_t *String)
.idata:0042E564                 extrn __imp_wcslen:dword
.idata:0042E564                                         ; DATA XREF: wcslen↑r
.idata:0042E568
.idata:0042E570 ;
.idata:0042E570 ; Imports from OLE32.dll
.idata:0042E570 ;
.idata:0042E570 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0042E570                 extrn __imp_CoCreateInstance:dword
.idata:0042E570                                         ; DATA XREF: CoCreateInstance↑r
.idata:0042E574 ; void (__stdcall *CoUninitialize)()
.idata:0042E574                 extrn __imp_CoUninitialize:dword
.idata:0042E574                                         ; DATA XREF: CoUninitialize↑r
.idata:0042E578 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0042E578                 extrn __imp_OleInitialize:dword
.idata:0042E578                                         ; DATA XREF: OleInitialize↑r
.idata:0042E57C
.idata:0042E57C
.idata:0042E57C
.idata:0042E57C                 end start
