.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : DF04E616F8D02C63D67E9F4220AEC201DE7DAD73B628EF27D3CFFE4917E67A76
.text:00401000 ; Input MD5    : 5D05C9FE4FD6DA061FAF3D32BF7DB745
.text:00401000 ; Input CRC32  : ABEB2A3C
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/cp.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A241 (Wed Apr 20 18:41:05 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0001D550 ( 120144.)
.text:00401000 ; Section size in file          : 0001D600 ( 120320.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4027B0+85↓p
.text:00401040                                         ; .text:0041D670↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_41D610
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41F000
.text:004010A2                 mov     edx, dword_41F0C0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41F004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41F0E0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41F0E0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_41D5E0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41F000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41F004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4027B0
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; uExitCode
.text:00401174                 call    ExitProcess
.text:00401174 sub_401080      endp
.text:00401174
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_41D610
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aNever          db 'never',0            ; DATA XREF: .text:off_401294↓o
.text:00401286 aAuto           db 'auto',0             ; DATA XREF: .text:00401298↓o
.text:0040128B aAlways         db 'always',0           ; DATA XREF: .text:0040129C↓o
.text:00401292                 align 4
.text:00401294 off_401294      dd offset aNever        ; DATA XREF: sub_4027B0+5C0↓o
.text:00401294                                         ; "never"
.text:00401298                 dd offset aAuto         ; "auto"
.text:0040129C                 dd offset aAlways       ; "always"
.text:004012A0                 dd 0
.text:004012A4 dword_4012A4    dd 1                    ; DATA XREF: sub_4027B0+5B4↓o
.text:004012A4                                         ; sub_4027B0+5D8↓r
.text:004012A8                 dd 2, 3
.text:004012B0 dword_4012B0    dd 736579h, 71006F6Eh, 79726575h, 768D00h
.text:004012B0                                         ; DATA XREF: .text:off_4012C0↓o
.text:004012B0                                         ; .text:004012C4↓o ...
.text:004012C0 off_4012C0      dd offset dword_4012B0  ; DATA XREF: sub_4027B0+B67↓o
.text:004012C4                 dd offset dword_4012B0+4
.text:004012C8                 dd offset dword_4012B0+7
.text:004012CC                 align 10h
.text:004012D0 dword_4012D0    dd 1                    ; DATA XREF: sub_4027B0+B5B↓o
.text:004012D0                                         ; sub_4027B0+B7F↓r
.text:004012D4                 dd 2, 3
.text:004012DC aArchive        db 'archive',0          ; DATA XREF: .text:off_401420↓o
.text:004012E4 aBackup         db 'backup',0           ; DATA XREF: .text:00401430↓o
.text:004012EB aCopyContents   db 'copy-contents',0    ; DATA XREF: .text:00401440↓o
.text:004012F9 aDereference    db 'dereference',0      ; DATA XREF: .text:00401450↓o
.text:00401305 aForce          db 'force',0            ; DATA XREF: .text:00401460↓o
.text:0040130B aInteractive    db 'interactive',0      ; DATA XREF: .text:00401470↓o
.text:00401317 aLink           db 'link',0             ; DATA XREF: .text:00401480↓o
.text:0040131C aNoDereference  db 'no-dereference',0   ; DATA XREF: .text:00401490↓o
.text:0040132B aNoPreserve     db 'no-preserve',0      ; DATA XREF: .text:004014A0↓o
.text:00401337 aNoTargetDirect db 'no-target-directory',0
.text:00401337                                         ; DATA XREF: .text:004014B0↓o
.text:0040134B aOneFileSystem  db 'one-file-system',0  ; DATA XREF: .text:004014C0↓o
.text:0040135B aParents        db 'parents',0          ; DATA XREF: .text:004014D0↓o
.text:00401363 aPath           db 'path',0             ; DATA XREF: .text:004014E0↓o
.text:00401368 aPreserve_0     db 'preserve',0         ; DATA XREF: .text:004014F0↓o
.text:00401371 aRecursive      db 'recursive',0        ; DATA XREF: .text:00401500↓o
.text:0040137B aRemoveDestinat db 'remove-destination',0
.text:0040137B                                         ; DATA XREF: .text:00401510↓o
.text:0040138E aReply_0        db 'reply',0            ; DATA XREF: .text:00401520↓o
.text:00401394 aSparse_0       db 'sparse',0           ; DATA XREF: .text:00401530↓o
.text:0040139B aStripTrailingS db 'strip-trailing-slashes',0
.text:0040139B                                         ; DATA XREF: .text:00401540↓o
.text:004013B2 aSuffix         db 'suffix',0           ; DATA XREF: .text:00401550↓o
.text:004013B9 aSymbolicLink   db 'symbolic-link',0    ; DATA XREF: .text:00401560↓o
.text:004013C7 aTargetDirector db 'target-directory',0 ; DATA XREF: .text:00401570↓o
.text:004013D8 aUpdate         db 'update',0           ; DATA XREF: .text:00401580↓o
.text:004013DF aVerbose        db 'verbose',0          ; DATA XREF: .text:00401590↓o
.text:004013E7 aVersionControl_1 db 'version-control',0
.text:004013E7                                         ; DATA XREF: .text:004015A0↓o
.text:004013F7 aHelp           db 'help',0             ; DATA XREF: .text:004015B0↓o
.text:004013FC aVersion        db 'version',0          ; DATA XREF: .text:004015C0↓o
.text:00401404                 align 20h
.text:00401420 off_401420      dd offset aArchive      ; DATA XREF: sub_4027B0+138↓o
.text:00401420                                         ; "archive"
.text:00401424                 dd 2 dup(0)
.text:0040142C                 dd 61h
.text:00401430                 dd offset aBackup       ; "backup"
.text:00401434                 dd 2, 0
.text:0040143C                 dd 62h
.text:00401440                 dd offset aCopyContents ; "copy-contents"
.text:00401444                 dd 2 dup(0)
.text:0040144C                 dd 80h
.text:00401450                 dd offset aDereference  ; "dereference"
.text:00401454                 dd 2 dup(0)
.text:0040145C                 dd 4Ch
.text:00401460                 dd offset aForce        ; "force"
.text:00401464                 dd 2 dup(0)
.text:0040146C                 dd 66h
.text:00401470                 dd offset aInteractive  ; "interactive"
.text:00401474                 dd 2 dup(0)
.text:0040147C                 dd 69h
.text:00401480                 dd offset aLink         ; "link"
.text:00401484                 dd 2 dup(0)
.text:0040148C                 dd 6Ch
.text:00401490                 dd offset aNoDereference ; "no-dereference"
.text:00401494                 dd 2 dup(0)
.text:0040149C                 dd 50h
.text:004014A0                 dd offset aNoPreserve   ; "no-preserve"
.text:004014A4                 dd 1, 0
.text:004014AC                 dd 81h
.text:004014B0                 dd offset aNoTargetDirect ; "no-target-directory"
.text:004014B4                 dd 2 dup(0)
.text:004014BC                 dd 54h
.text:004014C0                 dd offset aOneFileSystem ; "one-file-system"
.text:004014C4                 dd 2 dup(0)
.text:004014CC                 dd 78h
.text:004014D0                 dd offset aParents      ; "parents"
.text:004014D4                 dd 2 dup(0)
.text:004014DC                 dd 82h
.text:004014E0                 dd offset aPath         ; "path"
.text:004014E4                 dd 2 dup(0)
.text:004014EC                 dd 82h
.text:004014F0                 dd offset aPreserve_0   ; "preserve"
.text:004014F4                 dd 2, 0
.text:004014FC                 dd 83h
.text:00401500                 dd offset aRecursive    ; "recursive"
.text:00401504                 dd 2 dup(0)
.text:0040150C                 dd 52h
.text:00401510                 dd offset aRemoveDestinat ; "remove-destination"
.text:00401514                 dd 2 dup(0)
.text:0040151C                 dd 87h
.text:00401520                 dd offset aReply_0      ; "reply"
.text:00401524                 dd 1, 0
.text:0040152C                 dd 84h
.text:00401530                 dd offset aSparse_0     ; "sparse"
.text:00401534                 dd 1, 0
.text:0040153C                 dd 85h
.text:00401540                 dd offset aStripTrailingS ; "strip-trailing-slashes"
.text:00401544                 dd 2 dup(0)
.text:0040154C                 dd 86h
.text:00401550                 dd offset aSuffix       ; "suffix"
.text:00401554                 dd 1, 0
.text:0040155C                 dd 53h
.text:00401560                 dd offset aSymbolicLink ; "symbolic-link"
.text:00401564                 dd 2 dup(0)
.text:0040156C                 dd 73h
.text:00401570                 dd offset aTargetDirector ; "target-directory"
.text:00401574                 dd 1, 0
.text:0040157C                 dd 74h
.text:00401580                 dd offset aUpdate       ; "update"
.text:00401584                 dd 2 dup(0)
.text:0040158C                 dd 75h
.text:00401590                 dd offset aVerbose      ; "verbose"
.text:00401594                 dd 2 dup(0)
.text:0040159C                 dd 76h
.text:004015A0                 dd offset aVersionControl_1 ; "version-control"
.text:004015A4                 dd 1, 0
.text:004015AC                 dd 56h
.text:004015B0                 dd offset aHelp         ; "help"
.text:004015B4                 dd 2 dup(0)
.text:004015BC                 dd 0FFFFFF7Eh
.text:004015C0                 dd offset aVersion      ; "version"
.text:004015C4                 dd 2 dup(0)
.text:004015CC                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004015E0 dword_4015E0    dd 0                    ; DATA XREF: sub_403F00+58↓o
.text:004015E0                                         ; sub_403F00+7C↓r
.text:004015E4                 dd 1, 2, 3, 4
.text:004015F4 aMode           db 'mode',0             ; DATA XREF: .text:off_401618↓o
.text:004015F9 aTimestamps     db 'timestamps',0       ; DATA XREF: .text:0040161C↓o
.text:00401604 aOwnership      db 'ownership',0        ; DATA XREF: .text:00401620↓o
.text:0040160E aLinks          db 'links',0            ; DATA XREF: .text:00401624↓o
.text:00401614 aAll            db 'all',0              ; DATA XREF: .text:00401628↓o
.text:00401618 off_401618      dd offset aMode         ; DATA XREF: sub_403F00+60↓o
.text:00401618                                         ; "mode"
.text:0040161C                 dd offset aTimestamps   ; "timestamps"
.text:00401620                 dd offset aOwnership    ; "ownership"
.text:00401624                 dd offset aLinks        ; "links"
.text:00401628                 dd offset aAll          ; "all"
.text:0040162C                 align 10h
.text:00401630 ; const char Locale
.text:00401630 Locale          db 0                    ; DATA XREF: sub_4027B0+48↓o
.text:00401631                 db 0EBh, 0Dh, 90h
.text:00401634                 align 10h
.text:00401640 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401640                                         ; DATA XREF: sub_4027B0+5C↓o
.text:00401663 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4027B0+64↓o
.text:00401663                                         ; sub_4027B0+71↓o
.text:0040166D ; const char VarName[]
.text:0040166D VarName         db 'SIMPLE_BACKUP_SUFFIX',0
.text:0040166D                                         ; DATA XREF: sub_4027B0+111↓o
.text:00401682 ; const char aAbdfhillprstUv[]
.text:00401682 aAbdfhillprstUv db 'abdfHilLprst:uvxPRS:TV:',0
.text:00401682                                         ; DATA XREF: sub_4027B0+140↓o
.text:0040169A ; const char aSparse[]
.text:0040169A aSparse         db '--sparse',0         ; DATA XREF: sub_4027B0+5CC↓o
.text:004016A3 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_4027B0+5F5↓o
.text:004016B0 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_4027B0+5FD↓o
.text:004016C0 aTorbjornGranlu db 'Torbjorn Granlund',0
.text:004016C0                                         ; DATA XREF: sub_4027B0+608↓o
.text:004016D2 a530            db '5.3.0',0            ; DATA XREF: sub_4027B0+610↓o
.text:004016D8 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4027B0+618↓o
.text:004016E6 ; const FILE stru_4016E6
.text:004016E6 stru_4016E6     FILE <90007063h, 90909090h, 90909090h, 90909090h, 90909090h, \
.text:004016E6                                         ; DATA XREF: sub_4027B0+620↓o
.text:004016E6                       90909090h, 73559090h, 3A656761h>
.text:00401706                 db  20h
.text:00401707                 db  25h ; %
.text:00401708                 db  73h ; s
.text:00401709                 db  20h
.text:0040170A                 db  5Bh ; [
.text:0040170B                 db  4Fh ; O
.text:0040170C                 db  50h ; P
.text:0040170D                 db  54h ; T
.text:0040170E                 db  49h ; I
.text:0040170F                 db  4Fh ; O
.text:00401710                 db  4Eh ; N
.text:00401711                 db  5Dh ; ]
.text:00401712                 db  2Eh ; .
.text:00401713                 db  2Eh ; .
.text:00401714                 db  2Eh ; .
.text:00401715                 db  20h
.text:00401716                 db  5Bh ; [
.text:00401717                 db  2Dh ; -
.text:00401718                 db  54h ; T
.text:00401719                 db  5Dh ; ]
.text:0040171A                 db  20h
.text:0040171B                 db  53h ; S
.text:0040171C                 db  4Fh ; O
.text:0040171D                 db  55h ; U
.text:0040171E                 db  52h ; R
.text:0040171F                 db  43h ; C
.text:00401720                 db  45h ; E
.text:00401721                 db  20h
.text:00401722                 db  44h ; D
.text:00401723                 db  45h ; E
.text:00401724                 db  53h ; S
.text:00401725                 db  54h ; T
.text:00401726                 db  0Ah
.text:00401727                 db  20h
.text:00401728                 db  20h
.text:00401729                 db  6Fh ; o
.text:0040172A                 db  72h ; r
.text:0040172B                 db  3Ah ; :
.text:0040172C                 db  20h
.text:0040172D                 db  20h
.text:0040172E                 db  25h ; %
.text:0040172F                 db  73h ; s
.text:00401730                 db  20h
.text:00401731                 db  5Bh ; [
.text:00401732                 db  4Fh ; O
.text:00401733                 db  50h ; P
.text:00401734                 db  54h ; T
.text:00401735                 db  49h ; I
.text:00401736                 db  4Fh ; O
.text:00401737                 db  4Eh ; N
.text:00401738                 db  5Dh ; ]
.text:00401739                 db  2Eh ; .
.text:0040173A                 db  2Eh ; .
.text:0040173B                 db  2Eh ; .
.text:0040173C                 db  20h
.text:0040173D                 db  53h ; S
.text:0040173E                 db  4Fh ; O
.text:0040173F                 db  55h ; U
.text:00401740                 db  52h ; R
.text:00401741                 db  43h ; C
.text:00401742                 db  45h ; E
.text:00401743                 db  2Eh ; .
.text:00401744                 db  2Eh ; .
.text:00401745                 db  2Eh ; .
.text:00401746                 db  20h
.text:00401747                 db  44h ; D
.text:00401748                 db  49h ; I
.text:00401749                 db  52h ; R
.text:0040174A                 db  45h ; E
.text:0040174B                 db  43h ; C
.text:0040174C                 db  54h ; T
.text:0040174D                 db  4Fh ; O
.text:0040174E                 db  52h ; R
.text:0040174F                 db  59h ; Y
.text:00401750                 db  0Ah
.text:00401751                 db  20h
.text:00401752                 db  20h
.text:00401753                 db  6Fh ; o
.text:00401754                 db  72h ; r
.text:00401755                 db  3Ah ; :
.text:00401756                 db  20h
.text:00401757                 db  20h
.text:00401758                 db  25h ; %
.text:00401759                 db  73h ; s
.text:0040175A                 db  20h
.text:0040175B                 db  5Bh ; [
.text:0040175C                 db  4Fh ; O
.text:0040175D                 db  50h ; P
.text:0040175E                 db  54h ; T
.text:0040175F                 db  49h ; I
.text:00401760                 db  4Fh ; O
.text:00401761                 db  4Eh ; N
.text:00401762                 db  5Dh ; ]
.text:00401763                 db  2Eh ; .
.text:00401764                 db  2Eh ; .
.text:00401765                 db  2Eh ; .
.text:00401766                 db  20h
.text:00401767                 db  2Dh ; -
.text:00401768                 db  74h ; t
.text:00401769                 db  20h
.text:0040176A                 db  44h ; D
.text:0040176B                 db  49h ; I
.text:0040176C                 db  52h ; R
.text:0040176D                 db  45h ; E
.text:0040176E                 db  43h ; C
.text:0040176F                 db  54h ; T
.text:00401770                 db  4Fh ; O
.text:00401771                 db  52h ; R
.text:00401772                 db  59h ; Y
.text:00401773                 db  20h
.text:00401774                 db  53h ; S
.text:00401775                 db  4Fh ; O
.text:00401776                 db  55h ; U
.text:00401777                 db  52h ; R
.text:00401778                 db  43h ; C
.text:00401779                 db  45h ; E
.text:0040177A                 db  2Eh ; .
.text:0040177B                 db  2Eh ; .
.text:0040177C                 db  2Eh ; .
.text:0040177D                 db  0Ah
.text:0040177E                 db    0
.text:0040177F                 align 10h
.text:00401780 aCopySourceToDe db 'Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY.',0Ah
.text:00401780                                         ; DATA XREF: sub_4027B0+663↓o
.text:00401780                                         ; sub_403490+67↓o
.text:00401780                 db 0Ah,0
.text:004017BB                 align 10h
.text:004017C0 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:004017C0                                         ; DATA XREF: sub_4027B0+685↓o
.text:004017C0                                         ; sub_403490+89↓o
.text:004017C0                 db 'ns too.',0Ah,0
.text:0040180A                 align 20h
.text:00401820 aAArchiveSameAs db '  -a, --archive                same as -dpR',0Ah
.text:00401820                                         ; DATA XREF: sub_4027B0+6A7↓o
.text:00401820                                         ; sub_403490+AB↓o
.text:00401820                 db '      --backup[=CONTROL]       make a backup of each existing des'
.text:00401820                 db 'tination file',0Ah
.text:00401820                 db '  -b                           like --backup but does not accept '
.text:00401820                 db 'an argument',0Ah
.text:00401820                 db '      --copy-contents          copy contents of special files whe'
.text:00401820                 db 'n recursive',0Ah
.text:00401820                 db '  -d                           same as --no-dereference --preserv'
.text:00401820                 db 'e=link',0Ah,0
.text:0040197E                 align 10h
.text:00401980 aNoDereferenceN db '      --no-dereference         never follow symbolic links',0Ah
.text:00401980                                         ; DATA XREF: sub_4027B0+6C9↓o
.text:00401980                                         ; sub_403490+CD↓o
.text:00401980                 db '  -f, --force                  if an existing destination file ca'
.text:00401980                 db 'nnot be',0Ah
.text:00401980                 db '                                 opened, remove it and try again',0Ah
.text:00401980                 db '  -i, --interactive            prompt before overwrite',0Ah
.text:00401980                 db '  -H                           follow command-line symbolic links'
.text:00401980                 db 0Ah,0
.text:00401ABF                 align 10h
.text:00401AC0 aLLinkLinkFiles db '  -l, --link                   link files instead of copying',0Ah
.text:00401AC0                                         ; DATA XREF: sub_4027B0+6EB↓o
.text:00401AC0                                         ; sub_403490+EF↓o
.text:00401AC0                 db '  -L, --dereference            always follow symbolic links',0Ah
.text:00401AC0                 db '  -p                           same as --preserve=mode,ownership,'
.text:00401AC0                 db 'timestamps',0Ah
.text:00401AC0                 db '      --preserve[=ATTR_LIST]   preserve the specified attributes '
.text:00401AC0                 db '(default:',0Ah
.text:00401AC0                 db '                                 mode,ownership,timestamps), if p'
.text:00401AC0                 db 'ossible',0Ah
.text:00401AC0                 db '                                 additional attributes: links, al'
.text:00401AC0                 db 'l',0Ah,0
.text:00401C5D                 align 10h
.text:00401C60 aNoPreserveAttr db '      --no-preserve=ATTR_LIST  don',27h,'t preserve the specified'
.text:00401C60                                         ; DATA XREF: sub_4027B0+70D↓o
.text:00401C60                                         ; sub_403490+111↓o
.text:00401C60                 db ' attributes',0Ah
.text:00401C60                 db '      --parents                append source path to DIRECTORY',0Ah
.text:00401C60                 db '  -P                           same as `--no-dereference',27h,0Ah
.text:00401C60                 db 0
.text:00401D21                 align 20h
.text:00401D40 aRRRecursiveCop db '  -R, -r, --recursive          copy directories recursively',0Ah
.text:00401D40                                         ; DATA XREF: sub_4027B0+72F↓o
.text:00401D40                                         ; sub_403490+133↓o
.text:00401D40                 db '      --remove-destination     remove each existing destination f'
.text:00401D40                 db 'ile before',0Ah
.text:00401D40                 db '                                 attempting to open it (contrast '
.text:00401D40                 db 'with --force)',0Ah,0
.text:00401E18                 align 10h
.text:00401E20 aReplyYesNoQuer db '      --reply={yes,no,query}   specify how to handle the prompt a'
.text:00401E20                                         ; DATA XREF: sub_4027B0+751↓o
.text:00401E20                                         ; sub_403490+155↓o
.text:00401E20                 db 'bout an',0Ah
.text:00401E20                 db '                                 existing destination file',0Ah
.text:00401E20                 db '      --sparse=WHEN            control creation of sparse files',0Ah
.text:00401E20                 db '      --strip-trailing-slashes remove any trailing slashes from e'
.text:00401E20                 db 'ach SOURCE',0Ah
.text:00401E20                 db '                                 argument',0Ah,0
.text:00401F5B                 align 10h
.text:00401F60 aSSymbolicLinkM db '  -s, --symbolic-link          make symbolic links instead of cop'
.text:00401F60                                         ; DATA XREF: sub_4027B0+773↓o
.text:00401F60                                         ; sub_403490+177↓o
.text:00401F60                 db 'ying',0Ah
.text:00401F60                 db '  -S, --suffix=SUFFIX          override the usual backup suffix',0Ah
.text:00401F60                 db '  -t, --target-directory=DIRECTORY  copy all SOURCE arguments int'
.text:00401F60                 db 'o DIRECTORY',0Ah
.text:00401F60                 db '  -T, --no-target-directory    treat DEST as a normal file',0Ah,0
.text:0040206F                 align 20h
.text:00402080 aUUpdateCopyOnl db '  -u, --update                 copy only when the SOURCE file is '
.text:00402080                                         ; DATA XREF: sub_4027B0+795↓o
.text:00402080                                         ; sub_403490+199↓o
.text:00402080                 db 'newer',0Ah
.text:00402080                 db '                                 than the destination file or whe'
.text:00402080                 db 'n the',0Ah
.text:00402080                 db '                                 destination file is missing',0Ah
.text:00402080                 db '  -v, --verbose                explain what is being done',0Ah
.text:00402080                 db '  -x, --one-file-system        stay on this file system',0Ah,0
.text:004021BE                 align 10h
.text:004021C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004021C0                                         ; DATA XREF: sub_4027B0+7B7↓o
.text:004021C0                                         ; sub_403490+1BB↓o
.text:004021ED                 align 20h
.text:00402200 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00402200                                         ; DATA XREF: sub_4027B0+7D9↓o
.text:00402200                                         ; sub_403490+1DD↓o
.text:00402236                 align 10h
.text:00402240 aByDefaultSpars db 0Ah                  ; DATA XREF: sub_4027B0+7FB↓o
.text:00402240                                         ; sub_403490+1FF↓o
.text:00402240                 db 'By default, sparse SOURCE files are detected by a crude heuristic'
.text:00402240                 db ' and the',0Ah
.text:00402240                 db 'corresponding DEST file is made sparse as well.  That is the beha'
.text:00402240                 db 'vior',0Ah
.text:00402240                 db 'selected by --sparse=auto.  Specify --sparse=always to create a s'
.text:00402240                 db 'parse DEST',0Ah
.text:00402240                 db 'file whenever the SOURCE file contains a long enough sequence of '
.text:00402240                 db 'zero bytes.',0Ah
.text:00402240                 db 'Use --sparse=never to inhibit creation of sparse files.',0Ah
.text:00402240                 db 0Ah,0
.text:004023A4                 align 20h
.text:004023C0 aTheBackupSuffi db 'The backup suffix is `~',27h,', unless set with --suffix or SIMPL'
.text:004023C0                                         ; DATA XREF: sub_4027B0+81D↓o
.text:004023C0                                         ; sub_403490+221↓o
.text:004023C0                 db 'E_BACKUP_SUFFIX.',0Ah
.text:004023C0                 db 'The version control method may be selected via the --backup optio'
.text:004023C0                 db 'n or through',0Ah
.text:004023C0                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.text:004023C0                 db 0Ah,0
.text:0040249C                 align 10h
.text:004024A0 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.text:004024A0                                         ; DATA XREF: sub_4027B0+83F↓o
.text:004024A0                                         ; sub_403490+243↓o
.text:004024A0                 db '  numbered, t     make numbered backups',0Ah
.text:004024A0                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.text:004024A0                 db 'rwise',0Ah
.text:004024A0                 db '  simple, never   always make simple backups',0Ah,0
.text:0040257E                 align 10h
.text:00402580 aAsASpecialCase db 0Ah                  ; DATA XREF: sub_4027B0+861↓o
.text:00402580                                         ; sub_403490+265↓o
.text:00402580                 db 'As a special case, cp makes a backup of SOURCE when the force and'
.text:00402580                 db ' backup',0Ah
.text:00402580                 db 'options are given and SOURCE and DEST are the same name for an ex'
.text:00402580                 db 'isting,',0Ah
.text:00402580                 db 'regular file.',0Ah,0
.text:00402622 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4027B0+883↓o
.text:00402622                                         ; sub_403490+287↓o
.text:00402622                 db 'Report bugs to <%s>.',0Ah,0
.text:00402639 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:00402639                                         ; DATA XREF: sub_4027B0+890↓o
.text:00402639                                         ; sub_403490+294↓o
.text:0040264F                 align 20h
.text:00402660 aWarningVersion db 'warning: --version-control (-V) is obsolete;  support for it',0Ah
.text:00402660                                         ; DATA XREF: sub_4027B0:loc_403096↓o
.text:00402660                 db 'will be removed in some future release.  Use --backup=%s instead.'
.text:00402660                 db 0
.text:004026DF                 align 10h
.text:004026E0 aMultipleTarget db 'multiple target directories specified',0
.text:004026E0                                         ; DATA XREF: sub_4027B0+9A1↓o
.text:00402706 aTargetSIsNotAD db 'target %s is not a directory',0
.text:00402706                                         ; DATA XREF: sub_4027B0+A0F↓o
.text:00402706                                         ; sub_403840+514↓o ...
.text:00402723 aAccessingS     db 'accessing %s',0     ; DATA XREF: sub_4027B0+A50↓o
.text:00402723                                         ; sub_403840+636↓o
.text:00402730                 align 20h
.text:00402740 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00402740                                         ; DATA XREF: sub_4027B0:def_40291D↓o
.text:00402740                                         ; sub_403490+C↓o ...
.text:00402767 ; const char aReply[]
.text:00402767 aReply          db '--reply',0          ; DATA XREF: sub_4027B0+B73↓o
.text:0040276F aBackupType     db 'backup type',0      ; DATA XREF: sub_4027B0:loc_403434↓o
.text:0040277B                 align 10h
.text:00402780 aCannotMakeBoth db 'cannot make both hard and symbolic links',0
.text:00402780                                         ; DATA XREF: sub_4027B0:loc_403458↓o
.text:004027A9                 align 10h
.text:004027B0
.text:004027B0 ; =============== S U B R O U T I N E =======================================
.text:004027B0
.text:004027B0 ; Attributes: bp-based frame fuzzy-sp
.text:004027B0
.text:004027B0 sub_4027B0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004027B0
.text:004027B0 Category        = dword ptr -108h
.text:004027B0 Locale          = dword ptr -104h
.text:004027B0 var_100         = dword ptr -100h
.text:004027B0 var_FC          = byte ptr -0FCh
.text:004027B0 var_F8          = byte ptr -0F8h
.text:004027B0 var_F4          = dword ptr -0F4h
.text:004027B0 var_F0          = dword ptr -0F0h
.text:004027B0 var_EC          = dword ptr -0ECh
.text:004027B0 var_DC          = byte ptr -0DCh
.text:004027B0 var_D6          = byte ptr -0D6h
.text:004027B0 var_D5          = byte ptr -0D5h
.text:004027B0 var_D4          = dword ptr -0D4h
.text:004027B0 var_D0          = dword ptr -0D0h
.text:004027B0 var_C9          = byte ptr -0C9h
.text:004027B0 var_C8          = dword ptr -0C8h
.text:004027B0 var_58          = dword ptr -58h
.text:004027B0 var_54          = byte ptr -54h
.text:004027B0 var_50          = dword ptr -50h
.text:004027B0 var_4C          = byte ptr -4Ch
.text:004027B0 var_4B          = byte ptr -4Bh
.text:004027B0 var_4A          = byte ptr -4Ah
.text:004027B0 var_48          = dword ptr -48h
.text:004027B0 var_44          = byte ptr -44h
.text:004027B0 var_40          = dword ptr -40h
.text:004027B0 var_3C          = byte ptr -3Ch
.text:004027B0 var_3B          = byte ptr -3Bh
.text:004027B0 var_3A          = byte ptr -3Ah
.text:004027B0 var_39          = byte ptr -39h
.text:004027B0 var_38          = byte ptr -38h
.text:004027B0 var_37          = byte ptr -37h
.text:004027B0 var_36          = byte ptr -36h
.text:004027B0 var_35          = byte ptr -35h
.text:004027B0 var_34          = word ptr -34h
.text:004027B0 var_30          = dword ptr -30h
.text:004027B0 var_2C          = byte ptr -2Ch
.text:004027B0 var_2A          = word ptr -2Ah
.text:004027B0 var_28          = byte ptr -28h
.text:004027B0 var_27          = byte ptr -27h
.text:004027B0 var_26          = byte ptr -26h
.text:004027B0 var_24          = dword ptr -24h
.text:004027B0 var_20          = dword ptr -20h
.text:004027B0 arg_0           = dword ptr  8
.text:004027B0 arg_4           = dword ptr  0Ch
.text:004027B0
.text:004027B0                 push    ebp
.text:004027B1                 xor     eax, eax
.text:004027B3                 mov     ebp, esp
.text:004027B5                 push    edi
.text:004027B6                 push    esi
.text:004027B7                 push    ebx
.text:004027B8                 sub     esp, 0FCh
.text:004027BE                 xor     ebx, ebx
.text:004027C0                 mov     esi, [ebp+arg_4]
.text:004027C3                 and     esp, 0FFFFFFF0h
.text:004027C6                 mov     edi, [ebp+arg_0]
.text:004027C9                 call    __alloca
.text:004027CE                 call    sub_41D6B0
.text:004027D3                 mov     [ebp+var_C9], 0
.text:004027DA                 mov     edx, [esi]
.text:004027DC                 xor     eax, eax
.text:004027DE                 mov     [ebp+var_D4], eax
.text:004027E4                 mov     [ebp+var_D5], 0
.text:004027EB                 mov     ds:dword_420750, edx
.text:004027F1                 mov     [ebp+var_D6], 0
.text:004027F8                 mov     [esp+108h+Locale], offset Locale ; Locale
.text:00402800                 mov     [esp+108h+Category], 0 ; Category
.text:00402807                 call    setlocale
.text:0040280C                 mov     [esp+108h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00402814                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:0040281B                 call    ds:libintl_bindtextdomain
.text:00402821                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:00402828                 call    ds:libintl_textdomain
.text:0040282E                 mov     [esp+108h+Category], offset sub_40A730 ; void (__cdecl *)()
.text:00402835                 call    sub_401040
.text:0040283A                 mov     [ebp+var_54], 1
.text:0040283E                 mov     [ebp+var_50], 1
.text:00402845                 mov     [ebp+var_4C], 0
.text:00402849                 mov     [ebp+var_4B], 0
.text:0040284D                 mov     [ebp+var_4A], 0
.text:00402851                 mov     [ebp+var_48], 4
.text:00402858                 call    sub_418970
.text:0040285D                 mov     [ebp+var_40], eax
.text:00402860                 mov     [ebp+var_44], 0
.text:00402864                 mov     [ebp+var_3C], 0
.text:00402868                 mov     [ebp+var_3B], 0
.text:0040286C                 mov     [ebp+var_38], 0
.text:00402870                 mov     [ebp+var_3A], 0
.text:00402874                 mov     [ebp+var_39], 0
.text:00402878                 mov     [ebp+var_37], 0
.text:0040287C                 mov     [ebp+var_36], 0
.text:00402880                 mov     [ebp+var_30], 2
.text:00402887                 mov     [ebp+var_2C], 0
.text:0040288B                 mov     [ebp+var_35], 0
.text:0040288F                 mov     [ebp+var_34], 0
.text:00402895                 mov     [ebp+var_26], 0
.text:00402899                 mov     [esp+108h+Category], 0 ; Mode
.text:004028A0                 call    _umask
.text:004028A5                 mov     [ebp+var_28], 0
.text:004028A9                 not     eax
.text:004028AB                 mov     [ebp+var_2A], ax
.text:004028AF                 mov     [ebp+var_27], 0
.text:004028B3                 mov     [ebp+var_24], 0
.text:004028BA                 mov     [ebp+var_20], 0
.text:004028C1                 mov     [esp+108h+Category], offset VarName ; "SIMPLE_BACKUP_SUFFIX"
.text:004028C8                 call    getenv
.text:004028CD
.text:004028CD loc_4028CD:                             ; CODE XREF: sub_4027B0+8D5↓j
.text:004028CD                 mov     [ebp+var_D0], eax
.text:004028D3                 lea     esi, [esi+0]
.text:004028D9                 lea     edi, [edi+0]
.text:004028E0
.text:004028E0 loc_4028E0:                             ; CODE XREF: sub_4027B0+5E2↓j
.text:004028E0                                         ; sub_4027B0+8AC↓j ...
.text:004028E0                 mov     dword ptr [esp+108h+var_F8], 0 ; int
.text:004028E8                 mov     dword ptr [esp+108h+var_FC], offset off_401420 ; char
.text:004028F0                 mov     [esp+108h+var_100], offset aAbdfhillprstUv ; "abdfHilLprst:uvxPRS:TV:"
.text:004028F8                 mov     [esp+108h+Locale], esi ; int
.text:004028FC                 mov     [esp+108h+Category], edi ; int
.text:004028FF                 call    sub_40A5C0
.text:00402904                 cmp     eax, 0FFFFFFFFh
.text:00402907                 jz      loc_403353
.text:0040290D                 add     eax, 83h ; 'ƒ'  ; switch 267 cases
.text:00402912                 cmp     eax, 10Ah
.text:00402917                 ja      def_40291D      ; jumptable 0040291D default case, cases -129-71,73-75,77-79,81,85,87-96,99,101,103,104,106,107,109-111,113,119,121-127
.text:0040291D                 jmp     ds:jpt_40291D[eax*4] ; switch jump
.text:0040291D ; ---------------------------------------------------------------------------
.text:00402924 jpt_40291D      dd offset loc_402D97, offset loc_402DEC, offset def_40291D
.text:00402924                                         ; DATA XREF: sub_4027B0+16D↑r
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D ; jump table for switch statement
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset loc_403055
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset loc_403061, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset loc_40306D, offset def_40291D
.text:00402924                 dd offset loc_4030FF, offset loc_403079, offset loc_40308A
.text:00402924                 dd offset def_40291D, offset loc_403096, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset loc_4030E4, offset loc_4030C5, offset def_40291D
.text:00402924                 dd offset loc_403108, offset def_40291D, offset loc_403111
.text:00402924                 dd offset def_40291D, offset def_40291D, offset loc_40311A
.text:00402924                 dd offset def_40291D, offset def_40291D, offset loc_403126
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset loc_40312F, offset def_40291D, offset loc_4030FF
.text:00402924                 dd offset loc_403144, offset loc_40314D, offset loc_403240
.text:00402924                 dd offset loc_403249, offset def_40291D, offset loc_403252
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset def_40291D, offset def_40291D
.text:00402924                 dd offset def_40291D, offset loc_403293, offset loc_40329F
.text:00402924                 dd offset loc_4032C1, offset loc_4032CD, offset loc_4032F7
.text:00402924                 dd offset loc_402D50, offset loc_40333E, offset loc_40334A
.text:00402D50 ; ---------------------------------------------------------------------------
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00402D50                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00402D50                 mov     dword ptr [esp+108h+var_F8], 4 ; jumptable 0040291D case 133
.text:00402D58                 mov     edx, off_41F010
.text:00402D5E                 mov     ecx, ds:Block
.text:00402D64                 mov     dword ptr [esp+108h+var_FC], offset dword_4012A4 ; int
.text:00402D6C                 mov     [esp+108h+var_F4], edx ; int
.text:00402D70                 mov     [esp+108h+var_100], offset off_401294 ; int
.text:00402D78                 mov     [esp+108h+Locale], ecx ; char *
.text:00402D7C                 mov     [esp+108h+Category], offset aSparse ; "--sparse"
.text:00402D83                 call    sub_408810
.text:00402D88                 mov     edx, ds:dword_4012A4[eax*4]
.text:00402D8F                 mov     [ebp+var_30], edx
.text:00402D92                 jmp     loc_4028E0
.text:00402D97 ; ---------------------------------------------------------------------------
.text:00402D97
.text:00402D97 loc_402D97:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00402D97                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00402D97                 mov     [esp+108h+var_EC], 0 ; jumptable 0040291D case -131
.text:00402D9F                 mov     edx, ds:_iob
.text:00402DA5                 mov     [esp+108h+var_F0], offset aJimMeyering ; "Jim Meyering"
.text:00402DAD                 mov     [esp+108h+var_F4], offset aDavidMackenzie ; "David MacKenzie"
.text:00402DB5                 add     edx, 20h ; ' '
.text:00402DB8                 mov     dword ptr [esp+108h+var_F8], offset aTorbjornGranlu ; "Torbjorn Granlund"
.text:00402DC0                 mov     dword ptr [esp+108h+var_FC], offset a530 ; "5.3.0"
.text:00402DC8                 mov     [esp+108h+var_100], offset aGnuCoreutils ; "GNU coreutils"
.text:00402DD0                 mov     [esp+108h+Locale], offset stru_4016E6 ; FILE *
.text:00402DD8                 mov     [esp+108h+Category], edx ; FILE *
.text:00402DDB                 call    sub_40A580
.text:00402DE0
.text:00402DE0 loc_402DE0:                             ; CODE XREF: sub_4027B0+8A0↓j
.text:00402DE0                 mov     [esp+108h+Category], 0 ; Code
.text:00402DE7
.text:00402DE7 loc_402DE7:                             ; CODE XREF: sub_4027B0+ADE↓j
.text:00402DE7                                         ; sub_4027B0+C68↓j
.text:00402DE7                 call    exit
.text:00402DEC ; ---------------------------------------------------------------------------
.text:00402DEC
.text:00402DEC loc_402DEC:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00402DEC                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00402DEC                 mov     [esp+108h+Category], (offset stru_4016E6._bufsiz+2) ; jumptable 0040291D case -130
.text:00402DF3                 call    ds:libintl_gettext
.text:00402DF9                 mov     esi, ds:dword_420750
.text:00402DFF                 mov     [esp+108h+Category], eax ; Format
.text:00402E02                 mov     dword ptr [esp+108h+var_FC], esi
.text:00402E06                 mov     [esp+108h+var_100], esi
.text:00402E0A                 mov     [esp+108h+Locale], esi
.text:00402E0E                 call    printf
.text:00402E13                 mov     [esp+108h+Category], offset aCopySourceToDe ; "Copy SOURCE to DEST, or multiple SOURCE"...
.text:00402E1A                 call    ds:libintl_gettext
.text:00402E20                 mov     ecx, ds:_iob
.text:00402E26                 add     ecx, 20h ; ' '
.text:00402E29                 mov     [esp+108h+Locale], ecx ; Stream
.text:00402E2D                 mov     [esp+108h+Category], eax ; Buffer
.text:00402E30                 call    fputs
.text:00402E35                 mov     [esp+108h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00402E3C                 call    ds:libintl_gettext
.text:00402E42                 mov     ebx, ds:_iob
.text:00402E48                 add     ebx, 20h ; ' '
.text:00402E4B                 mov     [esp+108h+Locale], ebx ; Stream
.text:00402E4F                 mov     [esp+108h+Category], eax ; Buffer
.text:00402E52                 call    fputs
.text:00402E57                 mov     [esp+108h+Category], offset aAArchiveSameAs ; "  -a, --archive                same as "...
.text:00402E5E                 call    ds:libintl_gettext
.text:00402E64                 mov     edi, ds:_iob
.text:00402E6A                 add     edi, 20h ; ' '
.text:00402E6D                 mov     [esp+108h+Locale], edi ; Stream
.text:00402E71                 mov     [esp+108h+Category], eax ; Buffer
.text:00402E74                 call    fputs
.text:00402E79                 mov     [esp+108h+Category], offset aNoDereferenceN ; "      --no-dereference         never fo"...
.text:00402E80                 call    ds:libintl_gettext
.text:00402E86                 mov     esi, ds:_iob
.text:00402E8C                 add     esi, 20h ; ' '
.text:00402E8F                 mov     [esp+108h+Locale], esi ; Stream
.text:00402E93                 mov     [esp+108h+Category], eax ; Buffer
.text:00402E96                 call    fputs
.text:00402E9B                 mov     [esp+108h+Category], offset aLLinkLinkFiles ; "  -l, --link                   link fil"...
.text:00402EA2                 call    ds:libintl_gettext
.text:00402EA8                 mov     ecx, ds:_iob
.text:00402EAE                 add     ecx, 20h ; ' '
.text:00402EB1                 mov     [esp+108h+Locale], ecx ; Stream
.text:00402EB5                 mov     [esp+108h+Category], eax ; Buffer
.text:00402EB8                 call    fputs
.text:00402EBD                 mov     [esp+108h+Category], offset aNoPreserveAttr ; "      --no-preserve=ATTR_LIST  don't pr"...
.text:00402EC4                 call    ds:libintl_gettext
.text:00402ECA                 mov     ebx, ds:_iob
.text:00402ED0                 add     ebx, 20h ; ' '
.text:00402ED3                 mov     [esp+108h+Locale], ebx ; Stream
.text:00402ED7                 mov     [esp+108h+Category], eax ; Buffer
.text:00402EDA                 call    fputs
.text:00402EDF                 mov     [esp+108h+Category], offset aRRRecursiveCop ; "  -R, -r, --recursive          copy dir"...
.text:00402EE6                 call    ds:libintl_gettext
.text:00402EEC                 mov     edi, ds:_iob
.text:00402EF2                 add     edi, 20h ; ' '
.text:00402EF5                 mov     [esp+108h+Locale], edi ; Stream
.text:00402EF9                 mov     [esp+108h+Category], eax ; Buffer
.text:00402EFC                 call    fputs
.text:00402F01                 mov     [esp+108h+Category], offset aReplyYesNoQuer ; "      --reply={yes,no,query}   specify "...
.text:00402F08                 call    ds:libintl_gettext
.text:00402F0E                 mov     esi, ds:_iob
.text:00402F14                 add     esi, 20h ; ' '
.text:00402F17                 mov     [esp+108h+Locale], esi ; Stream
.text:00402F1B                 mov     [esp+108h+Category], eax ; Buffer
.text:00402F1E                 call    fputs
.text:00402F23                 mov     [esp+108h+Category], offset aSSymbolicLinkM ; "  -s, --symbolic-link          make sym"...
.text:00402F2A                 call    ds:libintl_gettext
.text:00402F30                 mov     ecx, ds:_iob
.text:00402F36                 add     ecx, 20h ; ' '
.text:00402F39                 mov     [esp+108h+Locale], ecx ; Stream
.text:00402F3D                 mov     [esp+108h+Category], eax ; Buffer
.text:00402F40                 call    fputs
.text:00402F45                 mov     [esp+108h+Category], offset aUUpdateCopyOnl ; "  -u, --update                 copy onl"...
.text:00402F4C                 call    ds:libintl_gettext
.text:00402F52                 mov     ebx, ds:_iob
.text:00402F58                 add     ebx, 20h ; ' '
.text:00402F5B                 mov     [esp+108h+Locale], ebx ; Stream
.text:00402F5F                 mov     [esp+108h+Category], eax ; Buffer
.text:00402F62                 call    fputs
.text:00402F67                 mov     [esp+108h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00402F6E                 call    ds:libintl_gettext
.text:00402F74                 mov     edi, ds:_iob
.text:00402F7A                 add     edi, 20h ; ' '
.text:00402F7D                 mov     [esp+108h+Locale], edi ; Stream
.text:00402F81                 mov     [esp+108h+Category], eax ; Buffer
.text:00402F84                 call    fputs
.text:00402F89                 mov     [esp+108h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00402F90                 call    ds:libintl_gettext
.text:00402F96                 mov     esi, ds:_iob
.text:00402F9C                 add     esi, 20h ; ' '
.text:00402F9F                 mov     [esp+108h+Locale], esi ; Stream
.text:00402FA3                 mov     [esp+108h+Category], eax ; Buffer
.text:00402FA6                 call    fputs
.text:00402FAB                 mov     [esp+108h+Category], offset aByDefaultSpars ; "\nBy default, sparse SOURCE files are d"...
.text:00402FB2                 call    ds:libintl_gettext
.text:00402FB8                 mov     ecx, ds:_iob
.text:00402FBE                 add     ecx, 20h ; ' '
.text:00402FC1                 mov     [esp+108h+Locale], ecx ; Stream
.text:00402FC5                 mov     [esp+108h+Category], eax ; Buffer
.text:00402FC8                 call    fputs
.text:00402FCD                 mov     [esp+108h+Category], offset aTheBackupSuffi ; "The backup suffix is `~', unless set wi"...
.text:00402FD4                 call    ds:libintl_gettext
.text:00402FDA                 mov     ebx, ds:_iob
.text:00402FE0                 add     ebx, 20h ; ' '
.text:00402FE3                 mov     [esp+108h+Locale], ebx ; Stream
.text:00402FE7                 mov     [esp+108h+Category], eax ; Buffer
.text:00402FEA                 call    fputs
.text:00402FEF                 mov     [esp+108h+Category], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:00402FF6                 call    ds:libintl_gettext
.text:00402FFC                 mov     edi, ds:_iob
.text:00403002                 add     edi, 20h ; ' '
.text:00403005                 mov     [esp+108h+Locale], edi ; Stream
.text:00403009                 mov     [esp+108h+Category], eax ; Buffer
.text:0040300C                 call    fputs
.text:00403011                 mov     [esp+108h+Category], offset aAsASpecialCase ; "\nAs a special case, cp makes a backup "...
.text:00403018                 call    ds:libintl_gettext
.text:0040301E                 mov     esi, ds:_iob
.text:00403024                 add     esi, 20h ; ' '
.text:00403027                 mov     [esp+108h+Locale], esi ; Stream
.text:0040302B                 mov     [esp+108h+Category], eax ; Buffer
.text:0040302E                 call    fputs
.text:00403033                 mov     [esp+108h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040303A                 call    ds:libintl_gettext
.text:00403040                 mov     [esp+108h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00403048                 mov     [esp+108h+Category], eax ; Format
.text:0040304B                 call    printf
.text:00403050                 jmp     loc_402DE0
.text:00403055 ; ---------------------------------------------------------------------------
.text:00403055
.text:00403055 loc_403055:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403055                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403055                 mov     [ebp+var_50], 3 ; jumptable 0040291D case 72
.text:0040305C                 jmp     loc_4028E0
.text:00403061 ; ---------------------------------------------------------------------------
.text:00403061
.text:00403061 loc_403061:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403061                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403061                 mov     [ebp+var_50], 4 ; jumptable 0040291D case 76
.text:00403068                 jmp     loc_4028E0
.text:0040306D ; ---------------------------------------------------------------------------
.text:0040306D
.text:0040306D loc_40306D:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040306D                                         ; sub_4027B0+95C↓j
.text:0040306D                                         ; DATA XREF: ...
.text:0040306D                 mov     [ebp+var_50], 2 ; jumptable 0040291D case 80
.text:00403074                 jmp     loc_4028E0
.text:00403079 ; ---------------------------------------------------------------------------
.text:00403079
.text:00403079 loc_403079:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403079                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403079                 mov     [ebp+var_C9], 1 ; jumptable 0040291D case 83
.text:00403080                 mov     eax, ds:Block
.text:00403085                 jmp     loc_4028CD
.text:0040308A ; ---------------------------------------------------------------------------
.text:0040308A
.text:0040308A loc_40308A:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040308A                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040308A                 mov     [ebp+var_D6], 1 ; jumptable 0040291D case 84
.text:00403091                 jmp     loc_4028E0
.text:00403096 ; ---------------------------------------------------------------------------
.text:00403096
.text:00403096 loc_403096:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403096                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403096                 mov     [esp+108h+Category], offset aWarningVersion ; jumptable 0040291D case 86
.text:0040309D                 call    ds:libintl_gettext
.text:004030A3                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:004030AB                 mov     ecx, ds:Block
.text:004030B1                 mov     [esp+108h+Category], 0 ; Code
.text:004030B8                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:004030BC                 mov     [esp+108h+var_100], eax ; char *
.text:004030C0                 call    sub_4143B0
.text:004030C5
.text:004030C5 loc_4030C5:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004030C5                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004030C5                 mov     [ebp+var_C9], 1 ; jumptable 0040291D case 98
.text:004030CC                 mov     eax, ds:Block
.text:004030D1                 test    eax, eax
.text:004030D3                 jz      loc_4028E0
.text:004030D9                 mov     [ebp+var_D4], eax
.text:004030DF                 jmp     loc_4028E0
.text:004030E4 ; ---------------------------------------------------------------------------
.text:004030E4
.text:004030E4 loc_4030E4:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004030E4                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004030E4                 mov     [ebp+var_50], 2 ; jumptable 0040291D case 97
.text:004030EB                 mov     [ebp+var_38], 1
.text:004030EF                 mov     [ebp+var_3B], 1
.text:004030F3                 mov     [ebp+var_3A], 1
.text:004030F7                 mov     [ebp+var_39], 1
.text:004030FB                 mov     [ebp+var_37], 1
.text:004030FF
.text:004030FF loc_4030FF:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004030FF                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004030FF                 mov     [ebp+var_36], 1 ; jumptable 0040291D cases 82,114
.text:00403103                 jmp     loc_4028E0
.text:00403108 ; ---------------------------------------------------------------------------
.text:00403108
.text:00403108 loc_403108:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403108                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403108                 mov     [ebp+var_38], 1 ; jumptable 0040291D case 100
.text:0040310C                 jmp     loc_40306D      ; jumptable 0040291D case 80
.text:00403111 ; ---------------------------------------------------------------------------
.text:00403111
.text:00403111 loc_403111:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403111                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403111                 mov     [ebp+var_4B], 1 ; jumptable 0040291D case 102
.text:00403115                 jmp     loc_4028E0
.text:0040311A ; ---------------------------------------------------------------------------
.text:0040311A
.text:0040311A loc_40311A:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040311A                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040311A                 mov     [ebp+var_48], 3 ; jumptable 0040291D case 105
.text:00403121                 jmp     loc_4028E0
.text:00403126 ; ---------------------------------------------------------------------------
.text:00403126
.text:00403126 loc_403126:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403126                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403126                 mov     [ebp+var_4A], 1 ; jumptable 0040291D case 108
.text:0040312A                 jmp     loc_4028E0
.text:0040312F ; ---------------------------------------------------------------------------
.text:0040312F
.text:0040312F loc_40312F:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040312F                                         ; sub_4027B0+B25↓j
.text:0040312F                                         ; DATA XREF: ...
.text:0040312F                 mov     [ebp+var_3B], 1 ; jumptable 0040291D case 112
.text:00403133                 mov     [ebp+var_3A], 1
.text:00403137                 mov     [ebp+var_39], 1
.text:0040313B
.text:0040313B loc_40313B:                             ; CODE XREF: sub_4027B0+B42↓j
.text:0040313B                 mov     [ebp+var_37], 1
.text:0040313F                 jmp     loc_4028E0
.text:00403144 ; ---------------------------------------------------------------------------
.text:00403144
.text:00403144 loc_403144:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403144                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403144                 mov     [ebp+var_2C], 1 ; jumptable 0040291D case 115
.text:00403148                 jmp     loc_4028E0
.text:0040314D ; ---------------------------------------------------------------------------
.text:0040314D
.text:0040314D loc_40314D:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040314D                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040314D                 test    ebx, ebx        ; jumptable 0040291D case 116
.text:0040314F                 jz      short loc_403181
.text:00403151                 mov     [esp+108h+Category], offset aMultipleTarget ; "multiple target directories specified"
.text:00403158                 call    ds:libintl_gettext
.text:0040315E                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:00403166                 mov     [esp+108h+Category], 1 ; Code
.text:0040316D                 mov     [esp+108h+var_100], eax ; char *
.text:00403171                 call    sub_4143B0
.text:00403176
.text:00403176 loc_403176:                             ; CODE XREF: sub_4027B0+9FF↓j
.text:00403176                                         ; sub_4027B0+A3A↓j
.text:00403176                 mov     ebx, ds:Block
.text:0040317C                 jmp     loc_4028E0
.text:00403181 ; ---------------------------------------------------------------------------
.text:00403181
.text:00403181 loc_403181:                             ; CODE XREF: sub_4027B0+99F↑j
.text:00403181                 mov     ebx, ds:Block
.text:00403187                 lea     ecx, [ebp+var_C8]
.text:0040318D                 mov     [esp+108h+Locale], ecx ; int
.text:00403191                 mov     [esp+108h+Category], ebx ; char *
.text:00403194                 call    sub_417BA0
.text:00403199                 test    eax, eax
.text:0040319B                 jnz     short loc_4031EC
.text:0040319D
.text:0040319D loc_40319D:                             ; CODE XREF: sub_4027B0+A84↓j
.text:0040319D                 mov     edx, [ebp+var_C8]
.text:004031A3                 and     edx, 0F000h
.text:004031A9                 cmp     edx, 4000h
.text:004031AF                 jz      short loc_403176
.text:004031B1                 mov     ecx, ds:Block
.text:004031B7                 mov     [esp+108h+Category], ecx ; char *
.text:004031BA                 call    sub_40AF10
.text:004031BF                 mov     [esp+108h+Category], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:004031C6                 mov     ebx, eax
.text:004031C8                 call    ds:libintl_gettext
.text:004031CE                 mov     dword ptr [esp+108h+var_FC], ebx ; char
.text:004031D2                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:004031DA                 mov     [esp+108h+Category], 1 ; Code
.text:004031E1                 mov     [esp+108h+var_100], eax ; char *
.text:004031E5                 call    sub_4143B0
.text:004031EA                 jmp     short loc_403176
.text:004031EC ; ---------------------------------------------------------------------------
.text:004031EC
.text:004031EC loc_4031EC:                             ; CODE XREF: sub_4027B0+9EB↑j
.text:004031EC                 mov     ebx, ds:Block
.text:004031F2                 mov     [esp+108h+Category], ebx ; char *
.text:004031F5                 call    sub_40AF10
.text:004031FA                 mov     dword ptr [ebp+var_DC], eax
.text:00403200                 mov     [esp+108h+Category], offset aAccessingS ; "accessing %s"
.text:00403207                 call    ds:libintl_gettext
.text:0040320D                 mov     ebx, eax
.text:0040320F                 call    _errno
.text:00403214                 mov     [esp+108h+var_100], ebx ; char *
.text:00403218                 mov     ecx, dword ptr [ebp+var_DC]
.text:0040321E                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:00403222                 mov     edx, [eax]
.text:00403224                 mov     [esp+108h+Category], 1 ; Code
.text:0040322B                 mov     [esp+108h+Locale], edx ; ErrorMessage
.text:0040322F                 call    sub_4143B0
.text:00403234                 jmp     loc_40319D
.text:00403234 ; ---------------------------------------------------------------------------
.text:00403239                 align 10h
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403240                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403240                 mov     [ebp+var_28], 1 ; jumptable 0040291D case 117
.text:00403244                 jmp     loc_4028E0
.text:00403249 ; ---------------------------------------------------------------------------
.text:00403249
.text:00403249 loc_403249:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403249                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403249                 mov     [ebp+var_27], 1 ; jumptable 0040291D case 118
.text:0040324D                 jmp     loc_4028E0
.text:00403252 ; ---------------------------------------------------------------------------
.text:00403252
.text:00403252 loc_403252:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403252                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403252                 mov     [ebp+var_3C], 1 ; jumptable 0040291D case 120
.text:00403256                 jmp     loc_4028E0
.text:0040325B ; ---------------------------------------------------------------------------
.text:0040325B
.text:0040325B def_40291D:                             ; CODE XREF: sub_4027B0+167↑j
.text:0040325B                                         ; sub_4027B0+16D↑j ...
.text:0040325B                 mov     [esp+108h+Category], offset aTrySHelpForMor ; jumptable 0040291D default case, cases -129-71,73-75,77-79,81,85,87-96,99,101,103,104,106,107,109-111,113,119,121-127
.text:00403262                 call    ds:libintl_gettext
.text:00403268                 mov     edi, ds:_iob
.text:0040326E                 mov     ebx, ds:dword_420750
.text:00403274                 add     edi, 40h ; '@'
.text:00403277                 mov     [esp+108h+var_100], ebx
.text:0040327B                 mov     [esp+108h+Locale], eax ; Format
.text:0040327F                 mov     [esp+108h+Category], edi ; Stream
.text:00403282                 call    fprintf
.text:00403287                 mov     [esp+108h+Category], 1
.text:0040328E                 jmp     loc_402DE7
.text:00403293 ; ---------------------------------------------------------------------------
.text:00403293
.text:00403293 loc_403293:                             ; CODE XREF: sub_4027B0+16D↑j
.text:00403293                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:00403293                 mov     [ebp+var_D5], 1 ; jumptable 0040291D case 128
.text:0040329A                 jmp     loc_4028E0
.text:0040329F ; ---------------------------------------------------------------------------
.text:0040329F
.text:0040329F loc_40329F:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040329F                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040329F                 mov     [esp+108h+var_100], 0 ; jumptable 0040291D case 129
.text:004032A7                 mov     edx, ds:Block
.text:004032AD                 lea     ecx, [ebp+var_58]
.text:004032B0                 mov     [esp+108h+Locale], ecx ; int
.text:004032B4                 mov     [esp+108h+Category], edx ; Block
.text:004032B7                 call    sub_403F00
.text:004032BC                 jmp     loc_4028E0
.text:004032C1 ; ---------------------------------------------------------------------------
.text:004032C1
.text:004032C1 loc_4032C1:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004032C1                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004032C1                 mov     ds:byte_420000, 1 ; jumptable 0040291D case 130
.text:004032C8                 jmp     loc_4028E0
.text:004032CD ; ---------------------------------------------------------------------------
.text:004032CD
.text:004032CD loc_4032CD:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004032CD                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004032CD                 mov     edx, ds:Block   ; jumptable 0040291D case 131
.text:004032D3                 test    edx, edx
.text:004032D5                 jz      loc_40312F      ; jumptable 0040291D case 112
.text:004032DB                 mov     [esp+108h+var_100], 1 ; char
.text:004032E3                 lea     ecx, [ebp+var_58]
.text:004032E6                 mov     [esp+108h+Locale], ecx ; int
.text:004032EA                 mov     [esp+108h+Category], edx ; Block
.text:004032ED                 call    sub_403F00
.text:004032F2                 jmp     loc_40313B
.text:004032F7 ; ---------------------------------------------------------------------------
.text:004032F7
.text:004032F7 loc_4032F7:                             ; CODE XREF: sub_4027B0+16D↑j
.text:004032F7                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:004032F7                 mov     dword ptr [esp+108h+var_F8], 4 ; jumptable 0040291D case 132
.text:004032FF                 mov     edx, off_41F010
.text:00403305                 mov     ecx, ds:Block
.text:0040330B                 mov     dword ptr [esp+108h+var_FC], offset dword_4012D0 ; int
.text:00403313                 mov     [esp+108h+var_F4], edx ; int
.text:00403317                 mov     [esp+108h+var_100], offset off_4012C0 ; int
.text:0040331F                 mov     [esp+108h+Locale], ecx ; char *
.text:00403323                 mov     [esp+108h+Category], offset aReply ; "--reply"
.text:0040332A                 call    sub_408810
.text:0040332F                 mov     edx, ds:dword_4012D0[eax*4]
.text:00403336                 mov     [ebp+var_48], edx
.text:00403339                 jmp     loc_4028E0
.text:0040333E ; ---------------------------------------------------------------------------
.text:0040333E
.text:0040333E loc_40333E:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040333E                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040333E                 mov     ds:byte_420050, 1 ; jumptable 0040291D case 134
.text:00403345                 jmp     loc_4028E0
.text:0040334A ; ---------------------------------------------------------------------------
.text:0040334A
.text:0040334A loc_40334A:                             ; CODE XREF: sub_4027B0+16D↑j
.text:0040334A                                         ; DATA XREF: sub_4027B0:jpt_40291D↑o
.text:0040334A                 mov     [ebp+var_4C], 1 ; jumptable 0040291D case 135
.text:0040334E                 jmp     loc_4028E0
.text:00403353 ; ---------------------------------------------------------------------------
.text:00403353
.text:00403353 loc_403353:                             ; CODE XREF: sub_4027B0+157↑j
.text:00403353                 cmp     [ebp+var_2C], 0
.text:00403357                 jz      short loc_403363
.text:00403359                 cmp     [ebp+var_4A], 0
.text:0040335D                 jnz     loc_403458
.text:00403363
.text:00403363 loc_403363:                             ; CODE XREF: sub_4027B0+BA7↑j
.text:00403363                 mov     ecx, [ebp+var_D0]
.text:00403369                 test    ecx, ecx
.text:0040336B                 jz      short loc_403380
.text:0040336D                 mov     eax, [ebp+var_D0]
.text:00403373                 mov     [esp+108h+Category], eax ; char *
.text:00403376                 call    sub_40AA10
.text:0040337B                 mov     Src, eax
.text:00403380
.text:00403380 loc_403380:                             ; CODE XREF: sub_4027B0+BBB↑j
.text:00403380                 xor     eax, eax
.text:00403382                 cmp     [ebp+var_C9], 0
.text:00403389                 jnz     loc_403434
.text:0040338F
.text:0040338F loc_40338F:                             ; CODE XREF: sub_4027B0+CA3↓j
.text:0040338F                 cmp     [ebp+var_3A], 0
.text:00403393                 mov     [ebp+var_58], eax
.text:00403396                 jz      short loc_40339E
.text:00403398                 mov     [ebp+var_2A], 0FFFFh
.text:0040339E
.text:0040339E loc_40339E:                             ; CODE XREF: sub_4027B0+BE6↑j
.text:0040339E                 cmp     [ebp+var_50], 1
.text:004033A2                 jz      short loc_40341D
.text:004033A4                 movzx   edx, [ebp+var_36]
.text:004033A8
.text:004033A8 loc_4033A8:                             ; CODE XREF: sub_4027B0+C7F↓j
.text:004033A8                 test    dl, dl
.text:004033AA                 jz      short loc_4033B6
.text:004033AC                 movzx   edx, [ebp+var_D5]
.text:004033B3                 mov     [ebp+var_54], dl
.text:004033B6
.text:004033B6 loc_4033B6:                             ; CODE XREF: sub_4027B0+BFA↑j
.text:004033B6                 movzx   eax, [ebp+var_4B]
.text:004033BA                 xor     edx, edx
.text:004033BC                 cmp     [ebp+var_2C], 0
.text:004033C0                 jnz     short loc_4033C8
.text:004033C2                 cmp     [ebp+var_4A], 0
.text:004033C6                 jz      short loc_4033CD
.text:004033C8
.text:004033C8 loc_4033C8:                             ; CODE XREF: sub_4027B0+C10↑j
.text:004033C8                 mov     edx, 1
.text:004033CD
.text:004033CD loc_4033CD:                             ; CODE XREF: sub_4027B0+C16↑j
.text:004033CD                 test    edx, eax
.text:004033CF                 jz      short loc_4033D5
.text:004033D1                 mov     [ebp+var_4C], 1
.text:004033D5
.text:004033D5 loc_4033D5:                             ; CODE XREF: sub_4027B0+C1F↑j
.text:004033D5                 call    sub_407A40
.text:004033DA                 movzx   ecx, [ebp+var_D6]
.text:004033E1                 lea     edx, [ebp+var_58]
.text:004033E4                 mov     [esp+108h+var_100], ebx ; char *
.text:004033E8                 mov     ebx, dword_41F020
.text:004033EE                 mov     dword ptr [esp+108h+var_F8], edx ; int
.text:004033F2                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:004033F6                 lea     edx, [esi+ebx*4]
.text:004033F9                 sub     edi, ebx
.text:004033FB                 mov     [esp+108h+Locale], edx ; int
.text:004033FF                 mov     [esp+108h+Category], edi ; int
.text:00403402                 call    sub_403840
.text:00403407                 mov     bl, al
.text:00403409                 call    sub_407A90
.text:0040340E                 xor     ecx, ecx
.text:00403410                 test    bl, bl
.text:00403412                 setz    cl
.text:00403415                 mov     [esp+108h+Category], ecx
.text:00403418                 jmp     loc_402DE7
.text:0040341D ; ---------------------------------------------------------------------------
.text:0040341D
.text:0040341D loc_40341D:                             ; CODE XREF: sub_4027B0+BF2↑j
.text:0040341D                 movzx   edx, [ebp+var_36]
.text:00403421                 xor     eax, eax
.text:00403423                 test    dl, dl
.text:00403425                 setz    al
.text:00403428                 lea     ecx, [eax+eax+2]
.text:0040342C                 mov     [ebp+var_50], ecx
.text:0040342F                 jmp     loc_4033A8
.text:00403434 ; ---------------------------------------------------------------------------
.text:00403434
.text:00403434 loc_403434:                             ; CODE XREF: sub_4027B0+BD9↑j
.text:00403434                 mov     [esp+108h+Category], offset aBackupType ; "backup type"
.text:0040343B                 call    ds:libintl_gettext
.text:00403441                 mov     ecx, [ebp+var_D4]
.text:00403447                 mov     [esp+108h+Category], eax
.text:0040344A                 mov     [esp+108h+Locale], ecx
.text:0040344E                 call    sub_409CC0
.text:00403453                 jmp     loc_40338F
.text:00403458 ; ---------------------------------------------------------------------------
.text:00403458
.text:00403458 loc_403458:                             ; CODE XREF: sub_4027B0+BAD↑j
.text:00403458                 mov     [esp+108h+Category], offset aCannotMakeBoth ; "cannot make both hard and symbolic link"...
.text:0040345F                 call    ds:libintl_gettext
.text:00403465                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:0040346D                 mov     [esp+108h+Category], 0 ; Code
.text:00403474                 mov     [esp+108h+var_100], eax ; char *
.text:00403478                 call    sub_4143B0
.text:0040347D                 jmp     def_40291D      ; jumptable 0040291D default case, cases -129-71,73-75,77-79,81,85,87-96,99,101,103,104,106,107,109-111,113,119,121-127
.text:0040347D sub_4027B0      endp
.text:0040347D
.text:0040347D ; ---------------------------------------------------------------------------
.text:00403482                 align 10h
.text:00403490
.text:00403490 ; =============== S U B R O U T I N E =======================================
.text:00403490
.text:00403490 ; Attributes: noreturn
.text:00403490
.text:00403490 ; void __cdecl __noreturn sub_403490(int Code)
.text:00403490 sub_403490      proc near               ; CODE XREF: sub_408A80+A↓p
.text:00403490
.text:00403490 Stream          = dword ptr -1Ch
.text:00403490 Format          = dword ptr -18h
.text:00403490 var_14          = dword ptr -14h
.text:00403490 var_10          = dword ptr -10h
.text:00403490 Code            = dword ptr  4
.text:00403490
.text:00403490                 push    ebx
.text:00403491                 sub     esp, 18h
.text:00403494                 mov     ebx, [esp+1Ch+Code]
.text:00403498                 test    ebx, ebx
.text:0040349A                 jz      short loc_4034D0
.text:0040349C                 mov     [esp+1Ch+Stream], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004034A3                 call    ds:libintl_gettext
.text:004034A9                 mov     edx, ds:_iob
.text:004034AF                 mov     ecx, ds:dword_420750
.text:004034B5                 add     edx, 40h ; '@'
.text:004034B8                 mov     [esp+1Ch+var_14], ecx
.text:004034BC                 mov     [esp+1Ch+Format], eax ; Format
.text:004034C0                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004034C3                 call    fprintf
.text:004034C8
.text:004034C8 loc_4034C8:                             ; CODE XREF: sub_403490+2A4↓j
.text:004034C8                 mov     [esp+1Ch+Stream], ebx ; Code
.text:004034CB                 call    exit
.text:004034D0 ; ---------------------------------------------------------------------------
.text:004034D0
.text:004034D0 loc_4034D0:                             ; CODE XREF: sub_403490+A↑j
.text:004034D0                 mov     [esp+1Ch+Stream], (offset stru_4016E6._bufsiz+2)
.text:004034D7                 call    ds:libintl_gettext
.text:004034DD                 mov     ecx, ds:dword_420750
.text:004034E3                 mov     [esp+1Ch+Stream], eax ; Format
.text:004034E6                 mov     [esp+1Ch+var_10], ecx
.text:004034EA                 mov     [esp+1Ch+var_14], ecx
.text:004034EE                 mov     [esp+1Ch+Format], ecx
.text:004034F2                 call    printf
.text:004034F7                 mov     [esp+1Ch+Stream], offset aCopySourceToDe ; "Copy SOURCE to DEST, or multiple SOURCE"...
.text:004034FE                 call    ds:libintl_gettext
.text:00403504                 mov     ecx, ds:_iob
.text:0040350A                 add     ecx, 20h ; ' '
.text:0040350D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403511                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403514                 call    fputs
.text:00403519                 mov     [esp+1Ch+Stream], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00403520                 call    ds:libintl_gettext
.text:00403526                 mov     ecx, ds:_iob
.text:0040352C                 add     ecx, 20h ; ' '
.text:0040352F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403533                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403536                 call    fputs
.text:0040353B                 mov     [esp+1Ch+Stream], offset aAArchiveSameAs ; "  -a, --archive                same as "...
.text:00403542                 call    ds:libintl_gettext
.text:00403548                 mov     ecx, ds:_iob
.text:0040354E                 add     ecx, 20h ; ' '
.text:00403551                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403555                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403558                 call    fputs
.text:0040355D                 mov     [esp+1Ch+Stream], offset aNoDereferenceN ; "      --no-dereference         never fo"...
.text:00403564                 call    ds:libintl_gettext
.text:0040356A                 mov     ecx, ds:_iob
.text:00403570                 add     ecx, 20h ; ' '
.text:00403573                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403577                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040357A                 call    fputs
.text:0040357F                 mov     [esp+1Ch+Stream], offset aLLinkLinkFiles ; "  -l, --link                   link fil"...
.text:00403586                 call    ds:libintl_gettext
.text:0040358C                 mov     ecx, ds:_iob
.text:00403592                 add     ecx, 20h ; ' '
.text:00403595                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403599                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040359C                 call    fputs
.text:004035A1                 mov     [esp+1Ch+Stream], offset aNoPreserveAttr ; "      --no-preserve=ATTR_LIST  don't pr"...
.text:004035A8                 call    ds:libintl_gettext
.text:004035AE                 mov     ecx, ds:_iob
.text:004035B4                 add     ecx, 20h ; ' '
.text:004035B7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004035BB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004035BE                 call    fputs
.text:004035C3                 mov     [esp+1Ch+Stream], offset aRRRecursiveCop ; "  -R, -r, --recursive          copy dir"...
.text:004035CA                 call    ds:libintl_gettext
.text:004035D0                 mov     ecx, ds:_iob
.text:004035D6                 add     ecx, 20h ; ' '
.text:004035D9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004035DD                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004035E0                 call    fputs
.text:004035E5                 mov     [esp+1Ch+Stream], offset aReplyYesNoQuer ; "      --reply={yes,no,query}   specify "...
.text:004035EC                 call    ds:libintl_gettext
.text:004035F2                 mov     ecx, ds:_iob
.text:004035F8                 add     ecx, 20h ; ' '
.text:004035FB                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004035FF                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403602                 call    fputs
.text:00403607                 mov     [esp+1Ch+Stream], offset aSSymbolicLinkM ; "  -s, --symbolic-link          make sym"...
.text:0040360E                 call    ds:libintl_gettext
.text:00403614                 mov     ecx, ds:_iob
.text:0040361A                 add     ecx, 20h ; ' '
.text:0040361D                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403621                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403624                 call    fputs
.text:00403629                 mov     [esp+1Ch+Stream], offset aUUpdateCopyOnl ; "  -u, --update                 copy onl"...
.text:00403630                 call    ds:libintl_gettext
.text:00403636                 mov     ecx, ds:_iob
.text:0040363C                 add     ecx, 20h ; ' '
.text:0040363F                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403643                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403646                 call    fputs
.text:0040364B                 mov     [esp+1Ch+Stream], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00403652                 call    ds:libintl_gettext
.text:00403658                 mov     ecx, ds:_iob
.text:0040365E                 add     ecx, 20h ; ' '
.text:00403661                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403665                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403668                 call    fputs
.text:0040366D                 mov     [esp+1Ch+Stream], offset aVersionOutputV ; "      --version  output version informa"...
.text:00403674                 call    ds:libintl_gettext
.text:0040367A                 mov     ecx, ds:_iob
.text:00403680                 add     ecx, 20h ; ' '
.text:00403683                 mov     [esp+1Ch+Format], ecx ; Stream
.text:00403687                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:0040368A                 call    fputs
.text:0040368F                 mov     [esp+1Ch+Stream], offset aByDefaultSpars ; "\nBy default, sparse SOURCE files are d"...
.text:00403696                 call    ds:libintl_gettext
.text:0040369C                 mov     ecx, ds:_iob
.text:004036A2                 add     ecx, 20h ; ' '
.text:004036A5                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036A9                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036AC                 call    fputs
.text:004036B1                 mov     [esp+1Ch+Stream], offset aTheBackupSuffi ; "The backup suffix is `~', unless set wi"...
.text:004036B8                 call    ds:libintl_gettext
.text:004036BE                 mov     ecx, ds:_iob
.text:004036C4                 add     ecx, 20h ; ' '
.text:004036C7                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036CB                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036CE                 call    fputs
.text:004036D3                 mov     [esp+1Ch+Stream], offset aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:004036DA                 call    ds:libintl_gettext
.text:004036E0                 mov     ecx, ds:_iob
.text:004036E6                 add     ecx, 20h ; ' '
.text:004036E9                 mov     [esp+1Ch+Format], ecx ; Stream
.text:004036ED                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:004036F0                 call    fputs
.text:004036F5                 mov     [esp+1Ch+Stream], offset aAsASpecialCase ; "\nAs a special case, cp makes a backup "...
.text:004036FC                 call    ds:libintl_gettext
.text:00403702                 mov     ecx, ds:_iob
.text:00403708                 add     ecx, 20h ; ' '
.text:0040370B                 mov     [esp+1Ch+Format], ecx ; Stream
.text:0040370F                 mov     [esp+1Ch+Stream], eax ; Buffer
.text:00403712                 call    fputs
.text:00403717                 mov     [esp+1Ch+Stream], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:0040371E                 call    ds:libintl_gettext
.text:00403724                 mov     [esp+1Ch+Format], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0040372C                 mov     [esp+1Ch+Stream], eax ; Format
.text:0040372F                 call    printf
.text:00403734                 jmp     loc_4034C8
.text:00403734 sub_403490      endp
.text:00403734
.text:00403734 ; ---------------------------------------------------------------------------
.text:00403739                 align 10h
.text:00403740 aCannotCombineT db 'Cannot combine --target-directory (-t) and --no-target-directory '
.text:00403740                                         ; DATA XREF: sub_403840+3F↓o
.text:00403740                 db '(-T)',0
.text:00403786 aSS             db '%s -> %s',0Ah,0     ; DATA XREF: sub_403840+18C↓o
.text:00403790 asc_403790      db '..',0               ; DATA XREF: sub_403840+2EF↓o
.text:00403793                 align 10h
.text:004037A0 aWhenPreserving db 'when preserving paths, the destination must be a directory',0
.text:004037A0                                         ; DATA XREF: sub_403840:loc_403C8F↓o
.text:004037DB aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: sub_403840+4BA↓o
.text:004037EC                 align 20h
.text:00403800 aMissingDestina db 'missing destination file operand after %s',0
.text:00403800                                         ; DATA XREF: sub_403840+695↓o
.text:0040382A aMissingFileOpe db 'missing file operand',0
.text:0040382A                                         ; DATA XREF: sub_403840:loc_403EE1↓o
.text:0040383F                 align 10h
.text:00403840
.text:00403840 ; =============== S U B R O U T I N E =======================================
.text:00403840
.text:00403840 ; Attributes: bp-based frame
.text:00403840
.text:00403840 ; int __cdecl sub_403840(int, int, char *, char, int)
.text:00403840 sub_403840      proc near               ; CODE XREF: sub_4027B0+C52↑p
.text:00403840
.text:00403840 Str             = dword ptr -0D8h
.text:00403840 Src             = dword ptr -0D4h
.text:00403840 Size            = dword ptr -0D0h
.text:00403840 Format          = dword ptr -0CCh
.text:00403840 var_C8          = dword ptr -0C8h
.text:00403840 var_C4          = dword ptr -0C4h
.text:00403840 var_C0          = dword ptr -0C0h
.text:00403840 var_BC          = byte ptr -0BCh
.text:00403840 Str1            = dword ptr -0B4h
.text:00403840 var_AE          = byte ptr -0AEh
.text:00403840 var_AD          = byte ptr -0ADh
.text:00403840 var_AC          = dword ptr -0ACh
.text:00403840 var_A5          = byte ptr -0A5h
.text:00403840 var_A4          = dword ptr -0A4h
.text:00403840 var_A0          = dword ptr -0A0h
.text:00403840 var_99          = byte ptr -99h
.text:00403840 var_98          = byte ptr -98h
.text:00403840 var_97          = byte ptr -97h
.text:00403840 var_96          = dword ptr -96h
.text:00403840 var_90          = dword ptr -90h
.text:00403840 var_89          = dword ptr -89h
.text:00403840 arg_0           = dword ptr  8
.text:00403840 arg_4           = dword ptr  0Ch
.text:00403840 arg_8           = dword ptr  10h
.text:00403840 arg_C           = byte ptr  14h
.text:00403840 arg_10          = dword ptr  18h
.text:00403840
.text:00403840                 push    ebp
.text:00403841                 xor     ecx, ecx
.text:00403843                 mov     ebp, esp
.text:00403845                 push    edi
.text:00403846                 push    esi
.text:00403847                 push    ebx
.text:00403848                 sub     esp, 0CCh
.text:0040384E                 cmp     [ebp+arg_8], 0
.text:00403852                 movzx   edx, [ebp+arg_C]
.text:00403856                 mov     byte ptr [ebp+var_89], 0
.text:0040385D                 setz    cl
.text:00403860                 mov     [ebp+var_97], 1
.text:00403867                 cmp     [ebp+arg_0], ecx
.text:0040386A                 jle     loc_403EC1
.text:00403870                 test    dl, dl
.text:00403872                 jz      loc_403D27
.text:00403878                 mov     edx, [ebp+arg_8]
.text:0040387B                 test    edx, edx
.text:0040387D                 jz      short loc_4038A4
.text:0040387F                 mov     [esp+0D8h+Str], offset aCannotCombineT ; "Cannot combine --target-directory (-t) "...
.text:00403886                 call    ds:libintl_gettext
.text:0040388C                 mov     [esp+0D8h+Src], 0 ; ErrorMessage
.text:00403894                 mov     [esp+0D8h+Str], 1 ; Code
.text:0040389B                 mov     [esp+0D8h+Size], eax ; char *
.text:0040389F                 call    sub_4143B0
.text:004038A4
.text:004038A4 loc_4038A4:                             ; CODE XREF: sub_403840+3D↑j
.text:004038A4                 cmp     [ebp+arg_0], 2
.text:004038A8                 jg      loc_403CEC
.text:004038AE
.text:004038AE loc_4038AE:                             ; CODE XREF: sub_403840+4FC↓j
.text:004038AE                                         ; sub_403840+53F↓j ...
.text:004038AE                 mov     edx, [ebp+arg_8]
.text:004038B1                 test    edx, edx
.text:004038B3                 jz      loc_403BB8
.text:004038B9
.text:004038B9 loc_4038B9:                             ; CODE XREF: sub_403840+4EC↓j
.text:004038B9                 mov     ebx, [ebp+arg_10]
.text:004038BC                 mov     ecx, offset sub_417BA0
.text:004038C1                 mov     [ebp+var_A4], ecx
.text:004038C7                 mov     esi, [ebx+8]
.text:004038CA                 sub     esi, 3
.text:004038CD                 cmp     esi, 1
.text:004038D0                 jbe     short loc_4038DD
.text:004038D2                 mov     edi, offset sub_4168B0
.text:004038D7                 mov     [ebp+var_A4], edi
.text:004038DD
.text:004038DD loc_4038DD:                             ; CODE XREF: sub_403840+90↑j
.text:004038DD                 cmp     [ebp+arg_0], 1
.text:004038E1                 jg      loc_403B9D
.text:004038E7
.text:004038E7 loc_4038E7:                             ; CODE XREF: sub_403840+373↓j
.text:004038E7                 xor     ecx, ecx
.text:004038E9                 mov     esi, [ebp+arg_0]
.text:004038EC                 mov     [ebp+var_A0], ecx
.text:004038F2                 cmp     [ebp+var_A0], esi
.text:004038F8                 jge     loc_403A1A
.text:004038FE                 mov     esi, esi
.text:00403900
.text:00403900 loc_403900:                             ; CODE XREF: sub_403840+1D4↓j
.text:00403900                 mov     [ebp+var_A5], 1
.text:00403907                 mov     ebx, [ebp+var_A0]
.text:0040390D                 xor     eax, eax
.text:0040390F                 mov     [ebp+var_90], eax
.text:00403915                 mov     edi, [ebp+arg_4]
.text:00403918                 cmp     ds:byte_420050, 0
.text:0040391F                 mov     eax, [edi+ebx*4]
.text:00403922                 mov     [ebp+var_AC], eax
.text:00403928                 jnz     loc_403B90
.text:0040392E
.text:0040392E loc_40392E:                             ; CODE XREF: sub_403840+358↓j
.text:0040392E                 cmp     ds:byte_420000, 0
.text:00403935                 jz      loc_403B02
.text:0040393B                 mov     ebx, [ebp+var_AC]
.text:00403941                 mov     [esp+0D8h+Str], ebx ; Size
.text:00403944                 call    strlen
.text:00403949                 lea     ecx, [eax+1]
.text:0040394C                 add     eax, 10h
.text:0040394F                 and     eax, 0FFFFFFF0h
.text:00403952                 call    __alloca
.text:00403957                 mov     [esp+0D8h+Size], ecx ; Size
.text:0040395B                 mov     eax, [ebp+var_AC]
.text:00403961                 lea     edi, [esp+0D8h+var_BC]
.text:00403965                 mov     [esp+0D8h+Str], edi ; void *
.text:00403968                 lea     edi, [ebp+var_89]
.text:0040396E                 mov     [esp+0D8h+Src], eax ; Src
.text:00403972                 call    memcpy
.text:00403977                 mov     [esp+0D8h+Str], eax
.text:0040397A                 mov     esi, eax
.text:0040397C                 call    sub_40ABD0
.text:00403981                 mov     [esp+0D8h+Src], esi ; char *
.text:00403985                 mov     ebx, [ebp+arg_8]
.text:00403988                 lea     edx, [ebp+var_90]
.text:0040398E                 mov     [esp+0D8h+Size], edx ; int
.text:00403992                 mov     [esp+0D8h+Str], ebx ; int
.text:00403995                 call    sub_40AAE0
.text:0040399A                 mov     [esp+0D8h+var_C4], edi ; int
.text:0040399E                 mov     ebx, eax
.text:004039A0                 mov     esi, [ebp+arg_10]
.text:004039A3                 mov     eax, [ebp+var_A4]
.text:004039A9                 lea     ecx, [ebp+var_96+2]
.text:004039AF                 xor     edx, edx
.text:004039B1                 mov     [esp+0D8h+var_C8], ecx ; int
.text:004039B5                 mov     [esp+0D8h+var_C0], eax ; int
.text:004039B9                 cmp     byte ptr [esi+31h], 0
.text:004039BD                 mov     [esp+0D8h+Size], 1C0h ; __int16
.text:004039C5                 mov     [esp+0D8h+Str], ebx ; char *
.text:004039C8                 setz    dl
.text:004039CB                 dec     edx
.text:004039CC                 and     edx, offset aSS ; "%s -> %s\n"
.text:004039D2                 mov     [esp+0D8h+Format], edx ; Format
.text:004039D6                 mov     edx, [ebp+var_90]
.text:004039DC                 sub     edx, ebx
.text:004039DE                 mov     [esp+0D8h+Src], edx ; int
.text:004039E2                 call    sub_404320
.text:004039E7                 mov     [ebp+var_A5], al
.text:004039ED
.text:004039ED loc_4039ED:                             ; CODE XREF: sub_403840+349↓j
.text:004039ED                 cmp     [ebp+var_A5], 0
.text:004039F4                 jnz     short loc_403A30
.text:004039F6                 mov     [ebp+var_97], 0
.text:004039FD
.text:004039FD loc_4039FD:                             ; CODE XREF: sub_403840+264↓j
.text:004039FD                                         ; sub_403840+2BD↓j
.text:004039FD                 mov     [esp+0D8h+Str], ebx ; Block
.text:00403A00                 call    free
.text:00403A05                 inc     [ebp+var_A0]
.text:00403A0B                 mov     ebx, [ebp+arg_0]
.text:00403A0E                 cmp     [ebp+var_A0], ebx
.text:00403A14                 jl      loc_403900
.text:00403A1A
.text:00403A1A loc_403A1A:                             ; CODE XREF: sub_403840+B8↑j
.text:00403A1A                                         ; sub_403840+3E0↓j
.text:00403A1A                 movzx   eax, [ebp+var_97]
.text:00403A21                 lea     esp, [ebp-0Ch]
.text:00403A24                 pop     ebx
.text:00403A25                 pop     esi
.text:00403A26                 pop     edi
.text:00403A27                 pop     ebp
.text:00403A28                 retn
.text:00403A28 ; ---------------------------------------------------------------------------
.text:00403A29                 align 10h
.text:00403A30
.text:00403A30 loc_403A30:                             ; CODE XREF: sub_403840+1B4↑j
.text:00403A30                                         ; sub_403840+328↓j
.text:00403A30                 movzx   ecx, byte ptr [ebp+var_89]
.text:00403A37                 lea     edx, [ebp+var_96+1]
.text:00403A3D                 mov     [ebp+var_AD], 0
.text:00403A44                 mov     eax, [ebp+arg_10]
.text:00403A47                 mov     [esp+0D8h+var_C4], 0 ; int
.text:00403A4F                 mov     edi, [ebp+var_AC]
.text:00403A55                 mov     [esp+0D8h+var_C8], edx ; int
.text:00403A59                 mov     [esp+0D8h+Format], eax ; int
.text:00403A5D                 mov     [esp+0D8h+Size], ecx ; char
.text:00403A61                 mov     [esp+0D8h+Src], ebx ; char *
.text:00403A65                 mov     [esp+0D8h+Str], edi ; char *
.text:00403A68                 call    sub_406770
.text:00403A6D                 test    al, al
.text:00403A6F                 jz      short loc_403A90
.text:00403A71                 cmp     [ebp+var_97], 0
.text:00403A78                 jz      short loc_403A90
.text:00403A7A                 mov     [ebp+var_AD], 1
.text:00403A81                 jmp     short loc_403A90
.text:00403A81 ; ---------------------------------------------------------------------------
.text:00403A83                 align 10h
.text:00403A90
.text:00403A90 loc_403A90:                             ; CODE XREF: sub_403840+22F↑j
.text:00403A90                                         ; sub_403840+238↑j ...
.text:00403A90                 movzx   ecx, [ebp+var_AD]
.text:00403A97                 cmp     ds:byte_420000, 0
.text:00403A9E                 mov     [ebp+var_97], cl
.text:00403AA4                 jz      loc_4039FD
.text:00403AAA                 mov     [ebp+var_AE], 0
.text:00403AB1                 mov     esi, [ebp+var_90]
.text:00403AB7                 mov     eax, [ebp+arg_10]
.text:00403ABA                 mov     [esp+0D8h+Str], ebx
.text:00403ABD                 mov     edi, [ebp+var_96+2]
.text:00403AC3                 sub     esi, ebx
.text:00403AC5                 mov     [esp+0D8h+Format], eax
.text:00403AC9                 mov     [esp+0D8h+Size], edi
.text:00403ACD                 mov     [esp+0D8h+Src], esi
.text:00403AD1                 call    near ptr loc_4040DA+6
.text:00403AD6                 test    al, al
.text:00403AD8                 jz      short loc_403AF0
.text:00403ADA                 cmp     [ebp+var_97], 0
.text:00403AE1                 jz      short loc_403AF0
.text:00403AE3                 mov     [ebp+var_AE], 1
.text:00403AEA                 lea     esi, [esi+0]
.text:00403AF0
.text:00403AF0 loc_403AF0:                             ; CODE XREF: sub_403840+298↑j
.text:00403AF0                                         ; sub_403840+2A1↑j
.text:00403AF0                 movzx   edx, [ebp+var_AE]
.text:00403AF7                 mov     [ebp+var_97], dl
.text:00403AFD                 jmp     loc_4039FD
.text:00403B02 ; ---------------------------------------------------------------------------
.text:00403B02
.text:00403B02 loc_403B02:                             ; CODE XREF: sub_403840+F5↑j
.text:00403B02                 mov     edx, [ebp+var_AC]
.text:00403B08                 mov     [esp+0D8h+Str], edx ; Size
.text:00403B0B                 call    strlen
.text:00403B10                 lea     ecx, [eax+1]
.text:00403B13                 add     eax, 10h
.text:00403B16                 and     eax, 0FFFFFFF0h
.text:00403B19                 call    __alloca
.text:00403B1E                 mov     [esp+0D8h+Size], ecx ; Size
.text:00403B22                 mov     eax, [ebp+var_AC]
.text:00403B28                 lea     edi, [esp+0D8h+var_BC]
.text:00403B2C                 mov     [esp+0D8h+Str], edi ; void *
.text:00403B2F                 mov     edi, offset asc_403790 ; ".."
.text:00403B34                 mov     [esp+0D8h+Src], eax ; Src
.text:00403B38                 call    memcpy
.text:00403B3D                 mov     [esp+0D8h+Str], eax
.text:00403B40                 mov     esi, eax
.text:00403B42                 call    sub_40ABD0
.text:00403B47                 mov     [esp+0D8h+Str], esi
.text:00403B4A                 call    sub_40AC10
.text:00403B4F                 cld
.text:00403B50                 mov     esi, eax
.text:00403B52                 mov     ecx, 3
.text:00403B57                 repe cmpsb
.text:00403B59                 jnz     short loc_403B70
.text:00403B5B                 mov     ebx, [ebp+arg_8]
.text:00403B5E                 mov     [esp+0D8h+Str], ebx ; char *
.text:00403B61                 call    sub_40AA10
.text:00403B66                 mov     ebx, eax
.text:00403B68                 jmp     loc_403A30
.text:00403B68 ; ---------------------------------------------------------------------------
.text:00403B6D                 align 10h
.text:00403B70
.text:00403B70 loc_403B70:                             ; CODE XREF: sub_403840+319↑j
.text:00403B70                 mov     [esp+0D8h+Size], 0 ; int
.text:00403B78                 mov     esi, [ebp+arg_8]
.text:00403B7B                 mov     [esp+0D8h+Src], eax ; char *
.text:00403B7F                 mov     [esp+0D8h+Str], esi ; int
.text:00403B82                 call    sub_40AAE0
.text:00403B87                 mov     ebx, eax
.text:00403B89                 jmp     loc_4039ED
.text:00403B89 ; ---------------------------------------------------------------------------
.text:00403B8E                 align 10h
.text:00403B90
.text:00403B90 loc_403B90:                             ; CODE XREF: sub_403840+E8↑j
.text:00403B90                 mov     [esp+0D8h+Str], eax
.text:00403B93                 call    sub_40ABD0
.text:00403B98                 jmp     loc_40392E
.text:00403B9D ; ---------------------------------------------------------------------------
.text:00403B9D
.text:00403B9D loc_403B9D:                             ; CODE XREF: sub_403840+A1↑j
.text:00403B9D                 mov     edx, [ebp+arg_10]
.text:00403BA0                 mov     [esp+0D8h+Str], edx
.text:00403BA3                 call    sub_406630
.text:00403BA8                 mov     eax, [ebp+arg_10]
.text:00403BAB                 mov     [esp+0D8h+Str], eax
.text:00403BAE                 call    sub_406670
.text:00403BB3                 jmp     loc_4038E7
.text:00403BB8 ; ---------------------------------------------------------------------------
.text:00403BB8
.text:00403BB8 loc_403BB8:                             ; CODE XREF: sub_403840+73↑j
.text:00403BB8                 cmp     ds:byte_420000, 0
.text:00403BBF                 mov     edi, [ebp+arg_4]
.text:00403BC2                 mov     esi, [ebp+arg_4]
.text:00403BC5                 mov     ecx, [edi]
.text:00403BC7                 mov     ebx, [esi+4]
.text:00403BCA                 mov     [ebp+Str1], ecx
.text:00403BD0                 jnz     loc_403C8F
.text:00403BD6                 mov     eax, [ebp+arg_10]
.text:00403BD9                 cmp     byte ptr [eax+0Dh], 0
.text:00403BDD                 jz      short loc_403BE5
.text:00403BDF                 mov     ecx, [eax]
.text:00403BE1                 test    ecx, ecx
.text:00403BE3                 jnz     short loc_403C25
.text:00403BE5
.text:00403BE5 loc_403BE5:                             ; CODE XREF: sub_403840+39D↑j
.text:00403BE5                                         ; sub_403840+3F9↓j ...
.text:00403BE5                 mov     edx, ebx
.text:00403BE7
.text:00403BE7 loc_403BE7:                             ; CODE XREF: sub_403840+44A↓j
.text:00403BE7                 mov     [esp+0D8h+var_C4], 0 ; int
.text:00403BEF                 mov     ecx, [ebp+arg_10]
.text:00403BF2                 lea     esi, [ebp+var_96]
.text:00403BF8                 mov     [esp+0D8h+var_C8], esi ; int
.text:00403BFC                 mov     ebx, [ebp+Str1]
.text:00403C02                 mov     [esp+0D8h+Size], 0 ; char
.text:00403C0A                 mov     [esp+0D8h+Format], ecx ; int
.text:00403C0E                 mov     [esp+0D8h+Src], edx ; char *
.text:00403C12                 mov     [esp+0D8h+Str], ebx ; char *
.text:00403C15                 call    sub_406770
.text:00403C1A                 mov     [ebp+var_97], al
.text:00403C20                 jmp     loc_403A1A
.text:00403C25 ; ---------------------------------------------------------------------------
.text:00403C25
.text:00403C25 loc_403C25:                             ; CODE XREF: sub_403840+3A3↑j
.text:00403C25                 mov     [esp+0D8h+Src], ebx ; Str2
.text:00403C29                 mov     eax, [ebp+Str1]
.text:00403C2F                 mov     [esp+0D8h+Str], eax ; Str1
.text:00403C32                 call    strcmp
.text:00403C37                 test    eax, eax
.text:00403C39                 jnz     short loc_403BE5
.text:00403C3B                 cmp     byte ptr [ebp+var_89], 0
.text:00403C42                 jnz     short loc_403BE5
.text:00403C44                 mov     esi, [ebp+var_89+1]
.text:00403C4A                 and     esi, 0F000h
.text:00403C50                 cmp     esi, 8000h
.text:00403C56                 jnz     short loc_403BE5
.text:00403C58                 mov     eax, [ebp+arg_10]
.text:00403C5B                 mov     edi, offset dword_420010
.text:00403C60                 mov     edx, [eax]
.text:00403C62                 mov     [esp+0D8h+Str], ebx ; char *
.text:00403C65                 mov     [esp+0D8h+Src], edx ; int
.text:00403C69                 call    sub_409AD0
.text:00403C6E                 cld
.text:00403C6F                 mov     esi, [ebp+arg_10]
.text:00403C72                 mov     ecx, 0Fh
.text:00403C77                 rep movsd
.text:00403C79                 mov     [ebp+arg_10], offset dword_420010
.text:00403C80                 mov     edx, eax
.text:00403C82                 xor     edi, edi
.text:00403C84                 mov     ds:dword_420010, edi
.text:00403C8A                 jmp     loc_403BE7
.text:00403C8F ; ---------------------------------------------------------------------------
.text:00403C8F
.text:00403C8F loc_403C8F:                             ; CODE XREF: sub_403840+390↑j
.text:00403C8F                 mov     [esp+0D8h+Str], offset aWhenPreserving ; "when preserving paths, the destination "...
.text:00403C96
.text:00403C96 loc_403C96:                             ; CODE XREF: sub_403840+6A8↓j
.text:00403C96                 call    ds:libintl_gettext
.text:00403C9C                 mov     [esp+0D8h+Src], 0 ; ErrorMessage
.text:00403CA4                 mov     [esp+0D8h+Str], 0 ; Code
.text:00403CAB                 mov     [esp+0D8h+Size], eax ; char *
.text:00403CAF                 call    sub_4143B0
.text:00403CB4
.text:00403CB4 loc_403CB4:                             ; CODE XREF: sub_403840+4E5↓j
.text:00403CB4                 mov     [esp+0D8h+Str], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00403CBB                 call    ds:libintl_gettext
.text:00403CC1                 mov     edx, ds:_iob
.text:00403CC7                 mov     ebx, ds:dword_420750
.text:00403CCD                 add     edx, 40h ; '@'
.text:00403CD0                 mov     [esp+0D8h+Size], ebx
.text:00403CD4                 mov     [esp+0D8h+Src], eax ; Format
.text:00403CD8                 mov     [esp+0D8h+Str], edx ; Stream
.text:00403CDB                 call    fprintf
.text:00403CE0                 mov     [esp+0D8h+Str], 1 ; Code
.text:00403CE7                 call    exit
.text:00403CEC ; ---------------------------------------------------------------------------
.text:00403CEC
.text:00403CEC loc_403CEC:                             ; CODE XREF: sub_403840+68↑j
.text:00403CEC                 mov     edi, [ebp+arg_4]
.text:00403CEF                 mov     esi, [edi+8]
.text:00403CF2                 mov     [esp+0D8h+Str], esi ; char *
.text:00403CF5                 call    sub_40AF10
.text:00403CFA                 mov     [esp+0D8h+Str], offset aExtraOperandS ; "extra operand %s"
.text:00403D01
.text:00403D01 loc_403D01:                             ; CODE XREF: sub_403840+69C↓j
.text:00403D01                 mov     ebx, eax
.text:00403D03                 call    ds:libintl_gettext
.text:00403D09                 mov     [esp+0D8h+Format], ebx ; char
.text:00403D0D                 mov     [esp+0D8h+Src], 0 ; ErrorMessage
.text:00403D15                 mov     [esp+0D8h+Str], 0 ; Code
.text:00403D1C                 mov     [esp+0D8h+Size], eax ; char *
.text:00403D20                 call    sub_4143B0
.text:00403D25                 jmp     short loc_403CB4
.text:00403D27 ; ---------------------------------------------------------------------------
.text:00403D27
.text:00403D27 loc_403D27:                             ; CODE XREF: sub_403840+32↑j
.text:00403D27                 mov     eax, [ebp+arg_8]
.text:00403D2A                 test    eax, eax
.text:00403D2C                 jnz     loc_4038B9
.text:00403D32                 cmp     [ebp+arg_0], 1
.text:00403D36                 jg      short loc_403D84
.text:00403D38
.text:00403D38 loc_403D38:                             ; CODE XREF: sub_403840+5D5↓j
.text:00403D38                 cmp     [ebp+arg_0], 2
.text:00403D3C                 jle     loc_4038AE
.text:00403D42                 mov     eax, [ebp+arg_0]
.text:00403D45                 mov     edi, [ebp+arg_4]
.text:00403D48                 mov     ebx, [edi+eax*4-4]
.text:00403D4C                 mov     [esp+0D8h+Str], ebx ; char *
.text:00403D4F                 call    sub_40AF10
.text:00403D54                 mov     [esp+0D8h+Str], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00403D5B                 mov     esi, eax
.text:00403D5D                 call    ds:libintl_gettext
.text:00403D63                 mov     [esp+0D8h+Format], esi ; char
.text:00403D67                 mov     [esp+0D8h+Src], 0 ; ErrorMessage
.text:00403D6F                 mov     [esp+0D8h+Str], 1 ; Code
.text:00403D76                 mov     [esp+0D8h+Size], eax ; char *
.text:00403D7A                 call    sub_4143B0
.text:00403D7F                 jmp     loc_4038AE
.text:00403D84 ; ---------------------------------------------------------------------------
.text:00403D84
.text:00403D84 loc_403D84:                             ; CODE XREF: sub_403840+4F6↑j
.text:00403D84                 mov     ebx, [ebp+arg_0]
.text:00403D87                 mov     ecx, [ebp+arg_4]
.text:00403D8A                 mov     esi, [ecx+ebx*4-4]
.text:00403D8E                 mov     [esp+0D8h+Str], esi
.text:00403D91                 call    sub_40AC10
.text:00403D96                 mov     [esp+0D8h+Str], eax ; Str
.text:00403D99                 mov     ebx, eax
.text:00403D9B                 call    strlen
.text:00403DA0                 mov     [ebp+var_98], 0
.text:00403DA7                 test    eax, eax
.text:00403DA9                 jz      loc_403EB5
.text:00403DAF                 movzx   eax, byte ptr [eax+ebx-1]
.text:00403DB4                 cmp     al, 2Fh ; '/'
.text:00403DB6                 jz      loc_403EB5
.text:00403DBC                 cmp     al, 5Ch ; '\'
.text:00403DBE                 jz      loc_403EB5
.text:00403DC4
.text:00403DC4 loc_403DC4:                             ; CODE XREF: sub_403840+67C↓j
.text:00403DC4                 mov     [esp+0D8h+Str], esi ; char *
.text:00403DC7                 lea     edx, [ebp+var_89+1]
.text:00403DCD                 xor     edi, edi
.text:00403DCF                 mov     [esp+0D8h+Src], edx ; int
.text:00403DD3                 call    sub_417BA0
.text:00403DD8                 test    eax, eax
.text:00403DDA                 jnz     loc_403EA9
.text:00403DE0
.text:00403DE0 loc_403DE0:                             ; CODE XREF: sub_403840+670↓j
.text:00403DE0                 mov     [ebp+var_99], 0
.text:00403DE7                 test    edi, edi
.text:00403DE9                 jnz     short loc_403E69
.text:00403DEB                 mov     ecx, [ebp+var_89+1]
.text:00403DF1                 and     ecx, 0F000h
.text:00403DF7                 cmp     ecx, 4000h
.text:00403DFD                 jz      short loc_403E60
.text:00403DFF
.text:00403DFF loc_403DFF:                             ; CODE XREF: sub_403840+627↓j
.text:00403DFF                                         ; sub_403840+664↓j
.text:00403DFF                 movzx   ebx, [ebp+var_98]
.text:00403E06                 cmp     [ebp+var_99], bl
.text:00403E0C                 jb      short loc_403E2F
.text:00403E0E
.text:00403E0E loc_403E0E:                             ; CODE XREF: sub_403840+61E↓j
.text:00403E0E                 cmp     [ebp+var_99], 0
.text:00403E15                 jz      loc_403D38
.text:00403E1B                 dec     [ebp+arg_0]
.text:00403E1E                 mov     edx, [ebp+arg_4]
.text:00403E21                 mov     eax, [ebp+arg_0]
.text:00403E24                 mov     edi, [edx+eax*4]
.text:00403E27                 mov     [ebp+arg_8], edi
.text:00403E2A                 jmp     loc_4038AE
.text:00403E2F ; ---------------------------------------------------------------------------
.text:00403E2F
.text:00403E2F loc_403E2F:                             ; CODE XREF: sub_403840+5CC↑j
.text:00403E2F                 mov     [esp+0D8h+Str], esi ; char *
.text:00403E32                 call    sub_40AF10
.text:00403E37                 mov     [esp+0D8h+Str], offset aTargetSIsNotAD ; "target %s is not a directory"
.text:00403E3E                 mov     esi, eax
.text:00403E40                 call    ds:libintl_gettext
.text:00403E46                 mov     [esp+0D8h+Format], esi ; char
.text:00403E4A                 mov     [esp+0D8h+Src], edi ; ErrorMessage
.text:00403E4E                 mov     [esp+0D8h+Str], 1 ; Code
.text:00403E55                 mov     [esp+0D8h+Size], eax ; char *
.text:00403E59                 call    sub_4143B0
.text:00403E5E                 jmp     short loc_403E0E
.text:00403E60 ; ---------------------------------------------------------------------------
.text:00403E60
.text:00403E60 loc_403E60:                             ; CODE XREF: sub_403840+5BD↑j
.text:00403E60                 mov     [ebp+var_99], 1
.text:00403E67                 jmp     short loc_403DFF
.text:00403E69 ; ---------------------------------------------------------------------------
.text:00403E69
.text:00403E69 loc_403E69:                             ; CODE XREF: sub_403840+5A9↑j
.text:00403E69                 cmp     edi, 2
.text:00403E6C                 jz      short loc_403E9D
.text:00403E6E                 mov     [esp+0D8h+Str], esi ; char *
.text:00403E71                 call    sub_40AF10
.text:00403E76                 mov     [esp+0D8h+Str], offset aAccessingS ; "accessing %s"
.text:00403E7D                 mov     ebx, eax
.text:00403E7F                 call    ds:libintl_gettext
.text:00403E85                 mov     [esp+0D8h+Format], ebx ; char
.text:00403E89                 mov     [esp+0D8h+Src], edi ; ErrorMessage
.text:00403E8D                 mov     [esp+0D8h+Str], 1 ; Code
.text:00403E94                 mov     [esp+0D8h+Size], eax ; char *
.text:00403E98                 call    sub_4143B0
.text:00403E9D
.text:00403E9D loc_403E9D:                             ; CODE XREF: sub_403840+62C↑j
.text:00403E9D                 mov     byte ptr [ebp+var_89], 1
.text:00403EA4                 jmp     loc_403DFF
.text:00403EA9 ; ---------------------------------------------------------------------------
.text:00403EA9
.text:00403EA9 loc_403EA9:                             ; CODE XREF: sub_403840+59A↑j
.text:00403EA9                 call    _errno
.text:00403EAE                 mov     edi, [eax]
.text:00403EB0                 jmp     loc_403DE0
.text:00403EB5 ; ---------------------------------------------------------------------------
.text:00403EB5
.text:00403EB5 loc_403EB5:                             ; CODE XREF: sub_403840+569↑j
.text:00403EB5                                         ; sub_403840+576↑j ...
.text:00403EB5                 mov     [ebp+var_98], 1
.text:00403EBC                 jmp     loc_403DC4
.text:00403EC1 ; ---------------------------------------------------------------------------
.text:00403EC1
.text:00403EC1 loc_403EC1:                             ; CODE XREF: sub_403840+2A↑j
.text:00403EC1                 mov     eax, [ebp+arg_0]
.text:00403EC4                 test    eax, eax
.text:00403EC6                 jle     short loc_403EE1
.text:00403EC8                 mov     ebx, [ebp+arg_4]
.text:00403ECB                 mov     ecx, [ebx]
.text:00403ECD                 mov     [esp+0D8h+Str], ecx ; char *
.text:00403ED0                 call    sub_40AF10
.text:00403ED5                 mov     [esp+0D8h+Str], offset aMissingDestina ; "missing destination file operand after "...
.text:00403EDC                 jmp     loc_403D01
.text:00403EE1 ; ---------------------------------------------------------------------------
.text:00403EE1
.text:00403EE1 loc_403EE1:                             ; CODE XREF: sub_403840+686↑j
.text:00403EE1                 mov     [esp+0D8h+Str], offset aMissingFileOpe ; "missing file operand"
.text:00403EE8                 jmp     loc_403C96
.text:00403EE8 sub_403840      endp
.text:00403EE8
.text:00403EE8 ; ---------------------------------------------------------------------------
.text:00403EED ; const char aPreserve[]
.text:00403EED aPreserve       db '--preserve',0       ; DATA XREF: sub_403F00+70↓o
.text:00403EF8                 align 10h
.text:00403F00
.text:00403F00 ; =============== S U B R O U T I N E =======================================
.text:00403F00
.text:00403F00
.text:00403F00 ; int __cdecl sub_403F00(void *Block, int, char)
.text:00403F00 sub_403F00      proc near               ; CODE XREF: sub_4027B0+B07↑p
.text:00403F00                                         ; sub_4027B0+B3D↑p
.text:00403F00
.text:00403F00 Str             = dword ptr -2Ch
.text:00403F00 Val             = dword ptr -28h
.text:00403F00 var_24          = dword ptr -24h
.text:00403F00 var_20          = dword ptr -20h
.text:00403F00 var_1C          = dword ptr -1Ch
.text:00403F00 var_18          = dword ptr -18h
.text:00403F00 var_11          = byte ptr -11h
.text:00403F00 Block           = dword ptr  4
.text:00403F00 arg_4           = dword ptr  8
.text:00403F00 arg_8           = byte ptr  0Ch
.text:00403F00
.text:00403F00                 push    ebp
.text:00403F01                 push    edi
.text:00403F02                 push    esi
.text:00403F03                 push    ebx
.text:00403F04                 sub     esp, 1Ch
.text:00403F07                 mov     edi, [esp+2Ch+arg_4]
.text:00403F0B                 movzx   edx, [esp+2Ch+arg_8]
.text:00403F10                 mov     [esp+2Ch+var_11], dl
.text:00403F14                 mov     edx, [esp+2Ch+Block]
.text:00403F18                 mov     [esp+2Ch+Str], edx ; char *
.text:00403F1B                 call    sub_40AA10
.text:00403F20                 mov     ebp, eax
.text:00403F22                 mov     ebx, eax
.text:00403F24                 lea     esi, [esi+0]
.text:00403F2A                 lea     edi, [edi+0]
.text:00403F30
.text:00403F30 loc_403F30:                             ; CODE XREF: sub_403F00+B4↓j
.text:00403F30                 mov     [esp+2Ch+Val], 2Ch ; ',' ; Val
.text:00403F38                 mov     [esp+2Ch+Str], ebx ; Str
.text:00403F3B                 call    strchr
.text:00403F40                 test    eax, eax
.text:00403F42                 mov     esi, eax
.text:00403F44                 jz      short loc_403F4A
.text:00403F46                 mov     byte ptr [eax], 0
.text:00403F49                 inc     esi
.text:00403F4A
.text:00403F4A loc_403F4A:                             ; CODE XREF: sub_403F00+44↑j
.text:00403F4A                 mov     [esp+2Ch+var_1C], 4 ; int
.text:00403F52                 mov     ecx, off_41F010
.text:00403F58                 mov     [esp+2Ch+var_20], offset dword_4015E0 ; int
.text:00403F60                 mov     [esp+2Ch+var_24], offset off_401618 ; int
.text:00403F68                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403F6C                 mov     [esp+2Ch+Val], ebx ; char *
.text:00403F70                 mov     [esp+2Ch+Str], offset aPreserve ; "--preserve"
.text:00403F77                 call    sub_408810
.text:00403F7C                 mov     eax, ds:dword_4015E0[eax*4]
.text:00403F83                 cmp     eax, 4          ; switch 5 cases
.text:00403F86                 ja      def_403F8C      ; jumptable 00403F8C default case
.text:00403F8C                 jmp     ds:jpt_403F8C[eax*4] ; switch jump
.text:00403F8C ; ---------------------------------------------------------------------------
.text:00403F93                 align 4
.text:00403F94 jpt_403F8C      dd offset loc_403FA8    ; DATA XREF: sub_403F00+8C↑r
.text:00403F94                 dd offset loc_403FD0    ; jump table for switch statement
.text:00403F94                 dd offset loc_403FE0
.text:00403F94                 dd offset loc_403FF0
.text:00403F94                 dd offset loc_404000
.text:00403FA8 ; ---------------------------------------------------------------------------
.text:00403FA8
.text:00403FA8 loc_403FA8:                             ; CODE XREF: sub_403F00+8C↑j
.text:00403FA8                                         ; DATA XREF: sub_403F00:jpt_403F8C↑o
.text:00403FA8                 movzx   ebx, [esp+2Ch+var_11] ; jumptable 00403F8C case 0
.text:00403FAD                 mov     [edi+1Eh], bl
.text:00403FB0
.text:00403FB0 loc_403FB0:                             ; CODE XREF: sub_403F00+D8↓j
.text:00403FB0                                         ; sub_403F00+E8↓j ...
.text:00403FB0                 test    esi, esi
.text:00403FB2                 mov     ebx, esi
.text:00403FB4                 jnz     loc_403F30
.text:00403FBA                 mov     [esp+2Ch+Block], ebp ; Block
.text:00403FBE                 add     esp, 1Ch
.text:00403FC1                 pop     ebx
.text:00403FC2                 pop     esi
.text:00403FC3                 pop     edi
.text:00403FC4                 pop     ebp
.text:00403FC5                 jmp     free
.text:00403FC5 ; ---------------------------------------------------------------------------
.text:00403FCA                 align 10h
.text:00403FD0
.text:00403FD0 loc_403FD0:                             ; CODE XREF: sub_403F00+8C↑j
.text:00403FD0                                         ; DATA XREF: sub_403F00:jpt_403F8C↑o
.text:00403FD0                 movzx   edx, [esp+2Ch+var_11] ; jumptable 00403F8C case 1
.text:00403FD5                 mov     [edi+1Fh], dl
.text:00403FD8                 jmp     short loc_403FB0
.text:00403FD8 ; ---------------------------------------------------------------------------
.text:00403FDA                 align 10h
.text:00403FE0
.text:00403FE0 loc_403FE0:                             ; CODE XREF: sub_403F00+8C↑j
.text:00403FE0                                         ; DATA XREF: sub_403F00:jpt_403F8C↑o
.text:00403FE0                 movzx   ecx, [esp+2Ch+var_11] ; jumptable 00403F8C case 2
.text:00403FE5                 mov     [edi+1Dh], cl
.text:00403FE8                 jmp     short loc_403FB0
.text:00403FE8 ; ---------------------------------------------------------------------------
.text:00403FEA                 align 10h
.text:00403FF0
.text:00403FF0 loc_403FF0:                             ; CODE XREF: sub_403F00+8C↑j
.text:00403FF0                                         ; DATA XREF: sub_403F00:jpt_403F8C↑o
.text:00403FF0                 movzx   eax, [esp+2Ch+var_11] ; jumptable 00403F8C case 3
.text:00403FF5
.text:00403FF5 loc_403FF5:                             ; CODE XREF: sub_403F00+10E↓j
.text:00403FF5                 mov     [edi+20h], al
.text:00403FF8                 jmp     short loc_403FB0
.text:00403FF8 ; ---------------------------------------------------------------------------
.text:00403FFA                 align 10h
.text:00404000
.text:00404000 loc_404000:                             ; CODE XREF: sub_403F00+8C↑j
.text:00404000                                         ; DATA XREF: sub_403F00:jpt_403F8C↑o
.text:00404000                 movzx   eax, [esp+2Ch+var_11] ; jumptable 00403F8C case 4
.text:00404005                 mov     [edi+1Eh], al
.text:00404008                 mov     [edi+1Fh], al
.text:0040400B                 mov     [edi+1Dh], al
.text:0040400E                 jmp     short loc_403FF5
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404010
.text:00404010 def_403F8C:                             ; CODE XREF: sub_403F00+86↑j
.text:00404010                 call    abort           ; jumptable 00403F8C default case
.text:00404010 sub_403F00      endp
.text:00404010
.text:00404010 ; ---------------------------------------------------------------------------
.text:00404015                 align 10h
.text:00404020
.text:00404020 ; =============== S U B R O U T I N E =======================================
.text:00404020
.text:00404020
.text:00404020 sub_404020      proc near               ; DATA XREF: sub_404060+16B↓o
.text:00404020                 popaw
.text:00404022                 imul    ebp, [ebp+64h], 206F7420h
.text:0040402A                 jo      short loc_40409E
.text:0040402C                 db      65h
.text:0040402C                 jnb     short loc_404094
.text:0040402F                 jb      short near ptr loc_4040A2+5
.text:00404031                 and     gs:[eax+65h], dh
.text:00404035                 jb      short near ptr loc_4040A2+2
.text:00404037                 imul    esi, [ebx+73h], 736E6F69h
.text:0040403E                 and     [esi+6Fh], ah
.text:00404041                 jb      short near ptr loc_404062+1
.text:00404043                 and     eax, 90900073h
.text:00404048                 nop
.text:00404049                 nop
.text:0040404A                 nop
.text:0040404B                 nop
.text:0040404C                 nop
.text:0040404D                 nop
.text:0040404E                 nop
.text:0040404F                 nop
.text:00404050                 nop
.text:00404051                 nop
.text:00404052                 nop
.text:00404053                 nop
.text:00404054                 nop
.text:00404055                 nop
.text:00404056                 nop
.text:00404057                 nop
.text:00404058                 nop
.text:00404059                 nop
.text:0040405A                 nop
.text:0040405B                 nop
.text:0040405C                 nop
.text:0040405D                 nop
.text:0040405E                 nop
.text:0040405F                 nop
.text:0040405F sub_404020      endp ; sp-analysis failed
.text:0040405F
.text:00404060
.text:00404060 ; =============== S U B R O U T I N E =======================================
.text:00404060
.text:00404060
.text:00404060 ; int __cdecl sub_404060(int, int, int, char *Str, void *Src, size_t Size, char, char)
.text:00404060 sub_404060      proc near               ; DATA XREF: sub_404060+1E8↓o
.text:00404060
.text:00404060 Str             = dword ptr  10h
.text:00404060 Src             = dword ptr  14h
.text:00404060 Size            = dword ptr  18h
.text:00404060 arg_18          = byte ptr  1Ch
.text:00404060 arg_1C          = byte ptr  20h
.text:00404060
.text:00404060 ; FUNCTION CHUNK AT .text:004040EC SIZE 00000113 BYTES
.text:00404060 ; FUNCTION CHUNK AT .text:00404200 SIZE 000000BD BYTES
.text:00404060 ; FUNCTION CHUNK AT .text:004042C0 SIZE 0000001D BYTES
.text:00404060
.text:00404060                 popaw
.text:00404062
.text:00404062 loc_404062:                             ; CODE XREF: sub_404020+21↑j
.text:00404062                 imul    ebp, [ebp+64h], 206F7420h
.text:0040406A                 jo      short near ptr loc_4040DA+4
.text:0040406C                 db      65h
.text:0040406C                 jnb     short near ptr loc_4040D3+1
.text:0040406F                 jb      short near ptr loc_4040E6+1
.text:00404071                 and     gs:[edi+77h], ch
.text:00404075                 outsb
.text:00404076                 db      65h
.text:00404076                 jb      short loc_4040EC
.text:00404079                 push    66207069h
.text:0040407E                 outsd
.text:0040407F                 jb      short near ptr sub_4040A0+1
.text:00404081                 and     eax, 90900073h
.text:00404086                 nop
.text:00404087                 nop
.text:00404088                 nop
.text:00404089                 nop
.text:0040408A                 nop
.text:0040408B                 nop
.text:0040408C                 nop
.text:0040408D                 nop
.text:0040408E                 nop
.text:0040408F                 nop
.text:00404090                 nop
.text:00404091                 nop
.text:00404092                 nop
.text:00404093                 nop
.text:00404094
.text:00404094 loc_404094:                             ; CODE XREF: sub_404020+C↑j
.text:00404094                 nop
.text:00404095                 nop
.text:00404096                 nop
.text:00404097                 nop
.text:00404098                 nop
.text:00404099                 nop
.text:0040409A                 nop
.text:0040409B                 nop
.text:0040409C                 nop
.text:0040409D                 nop
.text:0040409E
.text:0040409E loc_40409E:                             ; CODE XREF: sub_404020+A↑j
.text:0040409E                 nop
.text:0040409F                 nop
.text:0040409F sub_404060      endp ; sp-analysis failed
.text:0040409F
.text:004040A0
.text:004040A0 ; =============== S U B R O U T I N E =======================================
.text:004040A0
.text:004040A0
.text:004040A0 sub_4040A0      proc near               ; CODE XREF: sub_404060+1F↑j
.text:004040A0                                         ; DATA XREF: sub_404060+237↓o
.text:004040A0                 popaw
.text:004040A2
.text:004040A2 loc_4040A2:                             ; CODE XREF: sub_404020+15↑j
.text:004040A2                                         ; sub_404020+F↑j
.text:004040A2                 imul    ebp, [ebp+64h], 206F7420h
.text:004040AA                 jo      short near ptr loc_40411B+3
.text:004040AC                 db      65h
.text:004040AC                 jnb     short near ptr loc_404113+1
.text:004040AF                 jb      short loc_404127
.text:004040B1                 and     gs:[ecx+ebp*2+6Dh], dh
.text:004040B6                 db      65h
.text:004040B6                 jnb     short loc_4040D9
.text:004040B9                 outsw
.text:004040BB                 jb      short near ptr loc_4040DA+3
.text:004040BD                 and     eax, 61660073h
.text:004040C2                 imul    ebp, [ebp+64h], 206F7420h
.text:004040CA                 db      67h, 65h
.text:004040CA                 jz      near ptr loc_4040EC+2
.text:004040CE                 popa
.text:004040CF                 jz      short near ptr loc_404143+2
.text:004040D1                 jb      short loc_40413C
.text:004040D3
.text:004040D3 loc_4040D3:                             ; CODE XREF: sub_404060+C↑j
.text:004040D3                 bound   esi, [ebp+74h]
.text:004040D6                 db      65h
.text:004040D6                 jnb     short near ptr loc_4040F7+2
.text:004040D9
.text:004040D9 loc_4040D9:                             ; CODE XREF: sub_4040A0+16↑j
.text:004040D9                 outsd
.text:004040DA
.text:004040DA loc_4040DA:                             ; CODE XREF: sub_4040A0+1B↑j
.text:004040DA                                         ; sub_404060+A↑j ...
.text:004040DA                 db      66h
.text:004040DA                 and     ds:55900073h, ah
.text:004040DA sub_4040A0      endp ; sp-analysis failed
.text:004040DA
.text:004040E1                 mov     ebp, esp
.text:004040E3                 push    edi
.text:004040E4                 push    esi
.text:004040E5                 push    ebx
.text:004040E6
.text:004040E6 loc_4040E6:                             ; CODE XREF: sub_404060+F↑j
.text:004040E6                 sub     esp, 0ACh
.text:004040EC ; START OF FUNCTION CHUNK FOR sub_404060
.text:004040EC
.text:004040EC loc_4040EC:                             ; CODE XREF: sub_404060+16↑j
.text:004040EC                                         ; sub_4040A0+2A↑j
.text:004040EC                 mov     esi, [ebp+8]
.text:004040EF                 mov     edi, [ebp+14h]
.text:004040F2                 call    sub_418970
.text:004040F7
.text:004040F7 loc_4040F7:                             ; CODE XREF: sub_4040A0+36↑j
.text:004040F7                 mov     [ebp-0A0h], eax
.text:004040FD                 mov     [esp-10h+Str], esi ; Size
.text:00404100                 call    strlen
.text:00404105                 lea     ebx, [eax+1]
.text:00404108                 add     eax, 10h
.text:0040410B                 and     eax, 0FFFFFFF0h
.text:0040410E                 call    __alloca
.text:00404113
.text:00404113 loc_404113:                             ; CODE XREF: sub_4040A0+C↑j
.text:00404113                 mov     [esp-10h+Size], ebx ; Size
.text:00404117                 lea     ecx, [esp-10h+arg_1C]
.text:0040411B
.text:0040411B loc_40411B:                             ; CODE XREF: sub_4040A0+A↑j
.text:0040411B                 mov     [esp-10h+Src], esi ; Src
.text:0040411F                 mov     [esp-10h+Str], ecx ; void *
.text:00404122                 call    memcpy
.text:00404127
.text:00404127 loc_404127:                             ; CODE XREF: sub_4040A0+F↑j
.text:00404127                 mov     edx, [ebp+0Ch]
.text:0040412A                 mov     esi, eax
.text:0040412C                 mov     ebx, [ebp+10h]
.text:0040412F                 add     edx, eax
.text:00404131                 test    ebx, ebx
.text:00404133                 mov     [ebp-9Ch], edx
.text:00404139                 jz      short loc_4041B6
.text:0040413B                 nop
.text:0040413C
.text:0040413C loc_40413C:                             ; CODE XREF: sub_4040A0+31↑j
.text:0040413C                 lea     esi, [esi+0]
.text:00404140
.text:00404140 loc_404140:                             ; CODE XREF: sub_404060+154↓j
.text:00404140                 mov     edx, [ebx+4]
.text:00404143
.text:00404143 loc_404143:                             ; CODE XREF: sub_4040A0+2F↑j
.text:00404143                 mov     byte ptr [edx+esi], 0
.text:00404147                 cmp     dword ptr [edi+8], 2
.text:0040414B                 jz      loc_4042C0
.text:00404151                 mov     ecx, [ebp-9Ch]
.text:00404157                 lea     edx, [ebp-88h]
.text:0040415D                 mov     [esp-10h+Src], edx ; int
.text:00404161                 mov     [esp-10h+Str], ecx ; char *
.text:00404164                 call    sub_417BA0
.text:00404169
.text:00404169 loc_404169:                             ; CODE XREF: sub_404060+278↓j
.text:00404169                 test    eax, eax
.text:0040416B                 jnz     loc_4042A3
.text:00404171                 cmp     byte ptr [edi+1Fh], 0
.text:00404175                 jnz     loc_404251
.text:0040417B
.text:0040417B loc_40417B:                             ; CODE XREF: sub_404060+229↓j
.text:0040417B                 cmp     byte ptr [edi+1Dh], 0
.text:0040417F                 jnz     short loc_404200
.text:00404181
.text:00404181 loc_404181:                             ; CODE XREF: sub_404060+1B8↓j
.text:00404181                                         ; sub_404060+1DA↓j
.text:00404181                 cmp     byte ptr [ebx], 0
.text:00404184                 jnz     short loc_40418C
.text:00404186                 cmp     byte ptr [edi+1Eh], 0
.text:0040418A                 jz      short loc_4041A8
.text:0040418C
.text:0040418C loc_40418C:                             ; CODE XREF: sub_404060+124↑j
.text:0040418C                 movzx   ecx, word ptr [edi+2Eh]
.text:00404190                 mov     [esp-10h+Str], esi ; FileName
.text:00404193                 mov     eax, [ebp-88h]
.text:00404199                 and     ecx, eax
.text:0040419B                 mov     [esp-10h+Src], ecx ; AccessMode
.text:0040419F                 call    _chmod
.text:004041A4                 test    eax, eax
.text:004041A6                 jnz     short loc_4041C3
.text:004041A8
.text:004041A8 loc_4041A8:                             ; CODE XREF: sub_404060+12A↑j
.text:004041A8                 mov     edx, [ebx+4]
.text:004041AB                 mov     byte ptr [edx+esi], 2Fh ; '/'
.text:004041AF                 mov     ebx, [ebx+8]
.text:004041B2                 test    ebx, ebx
.text:004041B4                 jnz     short loc_404140
.text:004041B6
.text:004041B6 loc_4041B6:                             ; CODE XREF: sub_404060+D9↑j
.text:004041B6                 mov     eax, 1
.text:004041BB
.text:004041BB loc_4041BB:                             ; CODE XREF: sub_404060+19D↓j
.text:004041BB                 lea     esp, [ebp-0Ch]
.text:004041BE                 pop     ebx
.text:004041BF                 pop     esi
.text:004041C0                 pop     edi
.text:004041C1                 pop     ebp
.text:004041C2                 retn
.text:004041C3 ; ---------------------------------------------------------------------------
.text:004041C3
.text:004041C3 loc_4041C3:                             ; CODE XREF: sub_404060+146↑j
.text:004041C3                 mov     [esp-10h+Str], esi ; char *
.text:004041C6                 call    sub_40AF10
.text:004041CB                 mov     [esp-10h+Str], offset sub_404020
.text:004041D2
.text:004041D2 loc_4041D2:                             ; CODE XREF: sub_404060+1EF↓j
.text:004041D2                                         ; sub_404060+23E↓j ...
.text:004041D2                 mov     esi, eax
.text:004041D4                 call    ds:libintl_gettext
.text:004041DA                 mov     edi, eax
.text:004041DC                 call    _errno
.text:004041E1                 mov     dword ptr [esp-10h+arg_18], esi ; char
.text:004041E5                 mov     [esp-10h+Size], edi ; char *
.text:004041E9                 mov     esi, [eax]
.text:004041EB                 mov     [esp-10h+Str], 0 ; Code
.text:004041F2                 mov     [esp-10h+Src], esi ; ErrorMessage
.text:004041F6                 call    sub_4143B0
.text:004041FB                 xor     eax, eax
.text:004041FD                 jmp     short loc_4041BB
.text:004041FD ; END OF FUNCTION CHUNK FOR sub_404060
.text:004041FD ; ---------------------------------------------------------------------------
.text:004041FF                 align 10h
.text:00404200 ; START OF FUNCTION CHUNK FOR sub_404060
.text:00404200
.text:00404200 loc_404200:                             ; CODE XREF: sub_404060+11F↑j
.text:00404200                 mov     [esp-10h+Str], esi ; char *
.text:00404203                 mov     ecx, [ebp-68h]
.text:00404206                 mov     edx, [ebp-6Ch]
.text:00404209                 mov     [esp-10h+Size], ecx ; int
.text:0040420D                 mov     [esp-10h+Src], edx ; int
.text:00404211                 call    sub_4083D0
.text:00404216                 test    eax, eax
.text:00404218                 jz      loc_404181
.text:0040421E                 call    _errno
.text:00404223                 cmp     dword ptr [eax], 1
.text:00404226                 jz      short loc_404232
.text:00404228                 call    _errno
.text:0040422D                 cmp     dword ptr [eax], 16h
.text:00404230                 jnz     short loc_404240
.text:00404232
.text:00404232 loc_404232:                             ; CODE XREF: sub_404060+1C6↑j
.text:00404232                 mov     eax, [ebp-0A0h]
.text:00404238                 test    eax, eax
.text:0040423A                 jnz     loc_404181
.text:00404240
.text:00404240 loc_404240:                             ; CODE XREF: sub_404060+1D0↑j
.text:00404240                 mov     [esp-10h+Str], esi ; char *
.text:00404243                 call    sub_40AF10
.text:00404248                 mov     [esp-10h+Str], offset sub_404060
.text:0040424F                 jmp     short loc_4041D2
.text:00404251 ; ---------------------------------------------------------------------------
.text:00404251
.text:00404251 loc_404251:                             ; CODE XREF: sub_404060+115↑j
.text:00404251                 mov     [esp-10h+Str], esi ; char *
.text:00404254                 mov     ecx, [ebp-50h]
.text:00404257                 mov     edx, [ebp-4Ch]
.text:0040425A                 mov     [ebp-98h], ecx
.text:00404260                 mov     ecx, [ebp-48h]
.text:00404263                 mov     [ebp-94h], edx
.text:00404269                 mov     edx, [ebp-44h]
.text:0040426C                 mov     [ebp-90h], ecx
.text:00404272                 lea     ecx, [ebp-98h]
.text:00404278                 mov     [ebp-8Ch], edx
.text:0040427E                 mov     [esp-10h+Src], ecx ; int
.text:00404282                 call    sub_40AEB0
.text:00404287                 test    eax, eax
.text:00404289                 jz      loc_40417B
.text:0040428F                 mov     [esp-10h+Str], esi ; char *
.text:00404292                 call    sub_40AF10
.text:00404297                 mov     [esp-10h+Str], offset sub_4040A0
.text:0040429E                 jmp     loc_4041D2
.text:004042A3 ; ---------------------------------------------------------------------------
.text:004042A3
.text:004042A3 loc_4042A3:                             ; CODE XREF: sub_404060+10B↑j
.text:004042A3                 mov     edi, [ebp-9Ch]
.text:004042A9                 mov     [esp-10h+Str], edi ; char *
.text:004042AC                 call    sub_40AF10
.text:004042B1                 mov     [esp-10h+Str], 4040C0h
.text:004042B8                 jmp     loc_4041D2
.text:004042B8 ; END OF FUNCTION CHUNK FOR sub_404060
.text:004042B8 ; ---------------------------------------------------------------------------
.text:004042BD                 align 10h
.text:004042C0 ; START OF FUNCTION CHUNK FOR sub_404060
.text:004042C0
.text:004042C0 loc_4042C0:                             ; CODE XREF: sub_404060+EB↑j
.text:004042C0                 mov     ecx, [ebp-9Ch]
.text:004042C6                 lea     edx, [ebp-88h]
.text:004042CC                 mov     [esp-10h+Src], edx
.text:004042D0                 mov     [esp-10h+Str], ecx
.text:004042D3                 call    sub_4168B0
.text:004042D8                 jmp     loc_404169
.text:004042D8 ; END OF FUNCTION CHUNK FOR sub_404060
.text:004042D8 ; ---------------------------------------------------------------------------
.text:004042DD                 align 10h
.text:004042E0 aSExistsButIsNo db '%s exists but is not a directory',0
.text:004042E0                                         ; DATA XREF: sub_404320+143↓o
.text:00404301 aCannotMakeDire db 'cannot make directory %s',0
.text:00404301                                         ; DATA XREF: sub_404320+1C8↓o
.text:0040431A                 align 10h
.text:00404320
.text:00404320 ; =============== S U B R O U T I N E =======================================
.text:00404320
.text:00404320 ; Attributes: bp-based frame
.text:00404320
.text:00404320 ; int __cdecl sub_404320(char *, int, __int16, char *Format, int, int, int)
.text:00404320 sub_404320      proc near               ; CODE XREF: sub_403840+1A2↑p
.text:00404320
.text:00404320 Str             = dword ptr -0A8h
.text:00404320 Src             = dword ptr -0A4h
.text:00404320 Size            = dword ptr -0A0h
.text:00404320 var_9C          = byte ptr -9Ch
.text:00404320 var_98          = byte ptr -98h
.text:00404320 var_90          = dword ptr -90h
.text:00404320 AccessMode      = dword ptr -8Ch
.text:00404320 var_88          = dword ptr -88h
.text:00404320 arg_0           = dword ptr  8
.text:00404320 arg_4           = dword ptr  0Ch
.text:00404320 arg_8           = word ptr  10h
.text:00404320 Format          = dword ptr  14h
.text:00404320 arg_10          = dword ptr  18h
.text:00404320 arg_14          = dword ptr  1Ch
.text:00404320 arg_18          = dword ptr  20h
.text:00404320
.text:00404320                 push    ebp
.text:00404321                 mov     ebp, esp
.text:00404323                 push    edi
.text:00404324                 push    esi
.text:00404325                 push    ebx
.text:00404326                 sub     esp, 9Ch
.text:0040432C                 mov     esi, [ebp+arg_0]
.text:0040432F                 movzx   edi, [ebp+arg_8]
.text:00404333                 mov     [esp+0A8h+Str], esi ; Size
.text:00404336                 mov     [ebp+AccessMode], edi
.text:0040433C                 call    strlen
.text:00404341                 lea     ebx, [eax+1]
.text:00404344                 add     eax, 10h
.text:00404347                 and     eax, 0FFFFFFF0h
.text:0040434A                 call    __alloca
.text:0040434F                 mov     [esp+0A8h+Size], ebx ; Size
.text:00404353                 lea     ecx, [esp+0A8h+var_98]
.text:00404357                 mov     [esp+0A8h+Str], ecx ; void *
.text:0040435A                 mov     [esp+0A8h+Src], esi ; Src
.text:0040435E                 call    memcpy
.text:00404363                 mov     edi, eax
.text:00404365                 mov     eax, [ebp+arg_4]
.text:00404368                 mov     [esp+0A8h+Str], edi ; Size
.text:0040436B                 add     eax, edi
.text:0040436D                 mov     [ebp+var_90], eax
.text:00404373                 call    sub_40ACC0
.text:00404378                 mov     ebx, eax
.text:0040437A                 lea     eax, [eax+10h]
.text:0040437D                 and     eax, 0FFFFFFF0h
.text:00404380                 call    __alloca
.text:00404385                 mov     [esp+0A8h+Size], ebx ; Size
.text:00404389                 lea     esi, [esp+0A8h+var_98]
.text:0040438D                 mov     [esp+0A8h+Src], edi ; Src
.text:00404391                 mov     [esp+0A8h+Str], esi ; void *
.text:00404394                 call    memcpy
.text:00404399                 mov     byte ptr [ebx+esi], 0
.text:0040439D                 lea     eax, [ebp+var_88]
.text:004043A3                 mov     edx, [ebp+arg_10]
.text:004043A6                 mov     dword ptr [edx], 0
.text:004043AC                 mov     [esp+0A8h+Src], eax
.text:004043B0                 mov     [esp+0A8h+Str], esi
.text:004043B3                 call    [ebp+arg_18]
.text:004043B6                 test    eax, eax
.text:004043B8                 jz      loc_404526
.text:004043BE                 mov     eax, [ebp+var_90]
.text:004043C4                 cmp     byte ptr [eax], 2Fh ; '/'
.text:004043C7                 jz      loc_40451B
.text:004043CD                 lea     esi, [esi+0]
.text:004043D0
.text:004043D0 loc_4043D0:                             ; CODE XREF: sub_404320+127↓j
.text:004043D0                                         ; sub_404320+136↓j ...
.text:004043D0                 mov     [esp+0A8h+Src], 2Fh ; '/' ; Val
.text:004043D8                 mov     [esp+0A8h+Str], eax ; Str
.text:004043DB                 call    strchr
.text:004043E0                 test    eax, eax
.text:004043E2                 mov     esi, eax
.text:004043E4                 jz      loc_404511
.text:004043EA                 mov     [esp+0A8h+Str], 0Ch ; size_t
.text:004043F1                 call    sub_40A850
.text:004043F6                 mov     ecx, esi
.text:004043F8                 mov     ebx, eax
.text:004043FA                 sub     ecx, edi
.text:004043FC                 mov     [eax+4], ecx
.text:004043FF                 mov     ecx, [ebp+arg_10]
.text:00404402                 mov     edx, [ecx]
.text:00404404                 mov     [eax+8], edx
.text:00404407                 lea     edx, [ebp+var_88]
.text:0040440D                 mov     [ecx], eax
.text:0040440F                 mov     byte ptr [esi], 0
.text:00404412                 mov     [esp+0A8h+Src], edx
.text:00404416                 mov     [esp+0A8h+Str], edi
.text:00404419                 call    [ebp+arg_18]
.text:0040441C                 test    eax, eax
.text:0040441E                 jnz     short loc_404498
.text:00404420                 mov     edx, [ebp+var_88]
.text:00404426                 and     edx, 0F000h
.text:0040442C                 cmp     edx, 4000h
.text:00404432                 jnz     short loc_40445B
.text:00404434                 mov     byte ptr [ebx], 0
.text:00404437                 mov     eax, [ebp+arg_14]
.text:0040443A                 mov     byte ptr [eax], 0
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_404320+19C↓j
.text:0040443D                                         ; sub_404320+1BB↓j
.text:0040443D                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:00404441                 lea     eax, [esi+1]
.text:00404444                 mov     byte ptr [esi], 2Fh ; '/'
.text:00404447                 jnz     short loc_4043D0
.text:00404449                 lea     esi, [esi+0]
.text:00404450
.text:00404450 loc_404450:                             ; CODE XREF: sub_404320+134↓j
.text:00404450                 inc     eax
.text:00404451                 cmp     byte ptr [eax], 2Fh ; '/'
.text:00404454                 jz      short loc_404450
.text:00404456                 jmp     loc_4043D0
.text:0040445B ; ---------------------------------------------------------------------------
.text:0040445B
.text:0040445B loc_40445B:                             ; CODE XREF: sub_404320+112↑j
.text:0040445B                 mov     [esp+0A8h+Str], edi ; char *
.text:0040445E
.text:0040445E loc_40445E:                             ; CODE XREF: sub_404320+21D↓j
.text:0040445E                 call    sub_40AF10
.text:00404463                 mov     [esp+0A8h+Str], offset aSExistsButIsNo ; "%s exists but is not a directory"
.text:0040446A                 mov     esi, eax
.text:0040446C                 call    ds:libintl_gettext
.text:00404472                 mov     dword ptr [esp+0A8h+var_9C], esi ; char
.text:00404476                 mov     [esp+0A8h+Src], 0 ; ErrorMessage
.text:0040447E                 mov     [esp+0A8h+Size], eax ; char *
.text:00404482
.text:00404482 loc_404482:                             ; CODE XREF: sub_404320+1EC↓j
.text:00404482                 mov     [esp+0A8h+Str], 0 ; Code
.text:00404489                 call    sub_4143B0
.text:0040448E                 xor     eax, eax
.text:00404490
.text:00404490 loc_404490:                             ; CODE XREF: sub_404320+1F6↓j
.text:00404490                 lea     esp, [ebp-0Ch]
.text:00404493                 pop     ebx
.text:00404494                 pop     esi
.text:00404495                 pop     edi
.text:00404496                 pop     ebp
.text:00404497                 retn
.text:00404498 ; ---------------------------------------------------------------------------
.text:00404498
.text:00404498 loc_404498:                             ; CODE XREF: sub_404320+FE↑j
.text:00404498                 mov     eax, [ebp+arg_14]
.text:0040449B                 mov     byte ptr [eax], 1
.text:0040449E                 mov     byte ptr [ebx], 1
.text:004044A1                 mov     ebx, [ebp+AccessMode]
.text:004044A7                 mov     [esp+0A8h+Str], edi ; LPCSTR
.text:004044AA                 mov     [esp+0A8h+Src], ebx ; AccessMode
.text:004044AE                 call    sub_416930
.text:004044B3                 test    eax, eax
.text:004044B5                 jnz     short loc_4044E0
.text:004044B7                 mov     edx, [ebp+Format]
.text:004044BA                 test    edx, edx
.text:004044BC                 jz      loc_40443D
.text:004044C2                 mov     [esp+0A8h+Size], edi
.text:004044C6                 mov     ebx, [ebp+var_90]
.text:004044CC                 mov     ecx, [ebp+Format]
.text:004044CF                 mov     [esp+0A8h+Src], ebx
.text:004044D3                 mov     [esp+0A8h+Str], ecx ; Format
.text:004044D6                 call    printf
.text:004044DB                 jmp     loc_40443D
.text:004044E0 ; ---------------------------------------------------------------------------
.text:004044E0
.text:004044E0 loc_4044E0:                             ; CODE XREF: sub_404320+195↑j
.text:004044E0                 mov     [esp+0A8h+Str], edi ; char *
.text:004044E3                 call    sub_40AF10
.text:004044E8                 mov     [esp+0A8h+Str], offset aCannotMakeDire ; "cannot make directory %s"
.text:004044EF                 mov     ebx, eax
.text:004044F1                 call    ds:libintl_gettext
.text:004044F7                 mov     edi, eax
.text:004044F9                 call    _errno
.text:004044FE                 mov     dword ptr [esp+0A8h+var_9C], ebx
.text:00404502                 mov     [esp+0A8h+Size], edi
.text:00404506                 mov     esi, [eax]
.text:00404508                 mov     [esp+0A8h+Src], esi
.text:0040450C                 jmp     loc_404482
.text:00404511 ; ---------------------------------------------------------------------------
.text:00404511
.text:00404511 loc_404511:                             ; CODE XREF: sub_404320+C4↑j
.text:00404511                                         ; sub_404320+228↓j
.text:00404511                 mov     eax, 1
.text:00404516                 jmp     loc_404490
.text:0040451B ; ---------------------------------------------------------------------------
.text:0040451B
.text:0040451B loc_40451B:                             ; CODE XREF: sub_404320+A7↑j
.text:0040451B                                         ; sub_404320+1FF↓j
.text:0040451B                 inc     eax
.text:0040451C                 cmp     byte ptr [eax], 2Fh ; '/'
.text:0040451F                 jz      short loc_40451B
.text:00404521                 jmp     loc_4043D0
.text:00404526 ; ---------------------------------------------------------------------------
.text:00404526
.text:00404526 loc_404526:                             ; CODE XREF: sub_404320+98↑j
.text:00404526                 mov     edi, [ebp+var_88]
.text:0040452C                 and     edi, 0F000h
.text:00404532                 cmp     edi, 4000h
.text:00404538                 jz      short loc_404542
.text:0040453A                 mov     [esp+0A8h+Str], esi
.text:0040453D                 jmp     loc_40445E
.text:00404542 ; ---------------------------------------------------------------------------
.text:00404542
.text:00404542 loc_404542:                             ; CODE XREF: sub_404320+218↑j
.text:00404542                 mov     ecx, [ebp+arg_14]
.text:00404545                 mov     byte ptr [ecx], 0
.text:00404548                 jmp     short loc_404511
.text:00404548 sub_404320      endp
.text:00404548
.text:00404548 ; ---------------------------------------------------------------------------
.text:0040454A                 align 20h
.text:00404560 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: sub_404B50+A0↓o
.text:0040456F ; const char Format[]
.text:0040456F Format          db '%s -> %s',0         ; DATA XREF: sub_404B50+241↓o
.text:00404578 ; const char asc_404578[]
.text:00404578 asc_404578      db '.',0                ; DATA XREF: sub_404B50+341↓o
.text:00404578                                         ; sub_404B50:loc_405316↓o
.text:0040457A aSettingPermiss db 'setting permissions for %s',0
.text:0040457A                                         ; DATA XREF: sub_404B50+4B9↓o
.text:00404595                 align 10h
.text:004045A0 aFailedToPreser db 'failed to preserve ownership for %s',0
.text:004045A0                                         ; DATA XREF: sub_404B50+53D↓o
.text:004045A0                                         ; sub_404B50:loc_40552E↓o
.text:004045C4 aPreservingTime db 'preserving times for %s',0
.text:004045C4                                         ; DATA XREF: sub_404B50+5FA↓o
.text:004045DC                 align 10h
.text:004045E0 aCannotCreateSy db 'cannot create symbolic link %s to %s',0
.text:004045E0                                         ; DATA XREF: sub_404B50+68A↓o
.text:00404605 aSSUnbackup     db '%s -> %s (unbackup)',0Ah,0
.text:00404605                                         ; DATA XREF: sub_404B50+72B↓o
.text:0040461A aCannotUnBackup db 'cannot un-backup %s',0
.text:0040461A                                         ; DATA XREF: sub_404B50+75A↓o
.text:0040462E                 align 20h
.text:00404640 aSCanMakeRelati db '%s: can make relative symbolic links only in current directory',0
.text:00404640                                         ; DATA XREF: sub_404B50+796↓o
.text:0040467F aSHasUnknownFil db '%s has unknown file type',0
.text:0040467F                                         ; DATA XREF: sub_404B50+94E↓o
.text:00404698                 align 10h
.text:004046A0 aCannotCreateSy_0 db 'cannot create symbolic link %s',0
.text:004046A0                                         ; DATA XREF: sub_404B50+A72↓o
.text:004046BF aCannotReadSymb db 'cannot read symbolic link %s',0
.text:004046BF                                         ; DATA XREF: sub_404B50+AFC↓o
.text:004046DC aCannotCreateSp db 'cannot create special file %s',0
.text:004046DC                                         ; DATA XREF: sub_404B50+B77↓o
.text:004046FA aCannotCreateFi db 'cannot create fifo %s',0
.text:004046FA                                         ; DATA XREF: sub_404B50+BDA↓o
.text:00404710 aCannotCreateLi db 'cannot create link %s',0
.text:00404710                                         ; DATA XREF: sub_404B50+C34↓o
.text:00404726 ; const char aSS_1[]
.text:00404726 aSS_1           db '%s -> %s',0Ah,0     ; DATA XREF: sub_404B50+DE5↓o
.text:00404726                                         ; sub_404B50+ECB↓o
.text:00404730 aCannotCreateDi db 'cannot create directory %s',0
.text:00404730                                         ; DATA XREF: sub_404B50+E01↓o
.text:0040474B                 align 20h
.text:00404760 aCannotCopyCycl db 'cannot copy cyclic symbolic link %s',0
.text:00404760                                         ; DATA XREF: sub_404B50+E18↓o
.text:00404784 aCannotMoveSToS db 'cannot move %s to %s',0
.text:00404784                                         ; DATA XREF: sub_404B50+F39↓o
.text:00404799                 align 10h
.text:004047A0 aInterDeviceMov db 'inter-device move failed: %s to %s; unable to remove target',0
.text:004047A0                                         ; DATA XREF: sub_404B50+FDF↓o
.text:004047DC                 align 10h
.text:004047E0 aCannotMoveSToA db 'cannot move %s to a subdirectory of itself, %s',0
.text:004047E0                                         ; DATA XREF: sub_404B50+1030↓o
.text:0040480F                 align 20h
.text:00404820 aCannotCreateHa db 'cannot create hard link %s to %s',0
.text:00404820                                         ; DATA XREF: sub_404B50+1124↓o
.text:00404841 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: sub_404B50+1166↓o
.text:00404841                                         ; sub_404B50+16BB↓o ...
.text:00404852                 align 10h
.text:00404860 aCannotCopyADir db 'cannot copy a directory, %s, into itself, %s',0
.text:00404860                                         ; DATA XREF: sub_404B50+11B9↓o
.text:0040488D                 align 20h
.text:004048A0 aWillNotCreateH db 'will not create hard link %s to directory %s',0
.text:004048A0                                         ; DATA XREF: sub_404B50+121E↓o
.text:004048CD aBackupS        db ' (backup: %s)',0    ; DATA XREF: sub_404B50+12A2↓o
.text:004048DB                 align 10h
.text:004048E0 aBackingUpSWoul db 'backing up %s would destroy source;  %s not moved',0
.text:004048E0                                         ; DATA XREF: sub_404B50+1543↓o
.text:00404912                 align 10h
.text:00404920 aBackingUpSWoul_0 db 'backing up %s would destroy source;  %s not copied',0
.text:00404920                                         ; DATA XREF: sub_404B50:loc_4060F7↓o
.text:00404953 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: sub_404B50+1622↓o
.text:00404964                 align 20h
.text:00404980 aCannotMoveDire db 'cannot move directory onto non-directory: %s -> %s',0
.text:00404980                                         ; DATA XREF: sub_404B50+16EF↓o
.text:004049B3 aCannotOverwrit db 'cannot overwrite directory %s',0
.text:004049B3                                         ; DATA XREF: sub_404B50+172E↓o
.text:004049D1                 db 0EBh, 0Dh, 90h
.text:004049D4                 align 10h
.text:004049E0 aSOverwriteSOve db '%s: overwrite %s, overriding mode %04lo? ',0
.text:004049E0                                         ; DATA XREF: sub_404B50+17B6↓o
.text:004049E0                                         ; sub_404B50+18E0↓o
.text:00404A0A aSOverwriteS    db '%s: overwrite %s? ',0
.text:00404A0A                                         ; DATA XREF: sub_404B50+1815↓o
.text:00404A0A                                         ; sub_404B50+193F↓o
.text:00404A1D                 align 10h
.text:00404A20 aCannotOverwrit_0 db 'cannot overwrite directory %s with non-directory',0
.text:00404A20                                         ; DATA XREF: sub_404B50+197E↓o
.text:00404A51                 db 0EBh, 0Dh, 90h
.text:00404A54                 align 10h
.text:00404A60 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.text:00404A60                                         ; DATA XREF: sub_404B50+19B2↓o
.text:00404A8B                 align 20h
.text:00404AA0 aCannotOverwrit_1 db 'cannot overwrite non-directory %s with directory %s',0
.text:00404AA0                                         ; DATA XREF: sub_404B50+19E6↓o
.text:00404AD4 aSAndSAreTheSam db '%s and %s are the same file',0
.text:00404AD4                                         ; DATA XREF: sub_404B50+1A1A↓o
.text:00404AF0                 align 20h
.text:00404B00 aWarningSourceF db 'warning: source file %s specified more than once',0
.text:00404B00                                         ; DATA XREF: sub_404B50+1A72↓o
.text:00404B31 aOmittingDirect db 'omitting directory %s',0
.text:00404B31                                         ; DATA XREF: sub_404B50+1ABA↓o
.text:00404B47                 align 10h
.text:00404B50
.text:00404B50 ; =============== S U B R O U T I N E =======================================
.text:00404B50
.text:00404B50 ; Attributes: bp-based frame
.text:00404B50
.text:00404B50 ; int __cdecl sub_404B50(char *Str2, char *FileName, int, int, int, int, int, char, int, int)
.text:00404B50 sub_404B50      proc near               ; CODE XREF: sub_406770+84↓p
.text:00404B50                                         ; sub_406870+EF↓p
.text:00404B50
.text:00404B50 Format          = dword ptr -298h
.text:00404B50 AccessMode      = dword ptr -294h
.text:00404B50 Size            = dword ptr -290h
.text:00404B50 var_28C         = byte ptr -28Ch
.text:00404B50 var_288         = dword ptr -288h
.text:00404B50 var_284         = dword ptr -284h
.text:00404B50 var_280         = dword ptr -280h
.text:00404B50 var_27C         = byte ptr -27Ch
.text:00404B50 var_278         = dword ptr -278h
.text:00404B50 var_274         = dword ptr -274h
.text:00404B50 var_269         = byte ptr -269h
.text:00404B50 var_268         = dword ptr -268h
.text:00404B50 var_261         = byte ptr -261h
.text:00404B50 Block           = dword ptr -260h
.text:00404B50 var_25C         = byte ptr -25Ch
.text:00404B50 var_255         = byte ptr -255h
.text:00404B50 var_254         = byte ptr -254h
.text:00404B50 var_253         = byte ptr -253h
.text:00404B50 var_252         = byte ptr -252h
.text:00404B50 var_251         = byte ptr -251h
.text:00404B50 lpFileName      = dword ptr -250h
.text:00404B50 lpExistingFileName= dword ptr -24Ch
.text:00404B50 var_248         = dword ptr -248h
.text:00404B50 var_241         = byte ptr -241h
.text:00404B50 var_240         = dword ptr -240h
.text:00404B50 var_23C         = dword ptr -23Ch
.text:00404B50 var_238         = dword ptr -238h
.text:00404B50 var_234         = dword ptr -234h
.text:00404B50 var_22B         = dword ptr -22Bh
.text:00404B50 var_224         = dword ptr -224h
.text:00404B50 var_220         = dword ptr -220h
.text:00404B50 var_21C         = dword ptr -21Ch
.text:00404B50 var_218         = dword ptr -218h
.text:00404B50 var_210         = dword ptr -210h
.text:00404B50 var_20C         = dword ptr -20Ch
.text:00404B50 var_208         = dword ptr -208h
.text:00404B50 var_204         = dword ptr -204h
.text:00404B50 var_1A8         = dword ptr -1A8h
.text:00404B50 var_1A0         = dword ptr -1A0h
.text:00404B50 var_19C         = dword ptr -19Ch
.text:00404B50 var_198         = dword ptr -198h
.text:00404B50 var_194         = dword ptr -194h
.text:00404B50 var_138         = dword ptr -138h
.text:00404B50 var_130         = dword ptr -130h
.text:00404B50 var_12C         = dword ptr -12Ch
.text:00404B50 var_128         = dword ptr -128h
.text:00404B50 var_124         = dword ptr -124h
.text:00404B50 var_118         = dword ptr -118h
.text:00404B50 var_110         = dword ptr -110h
.text:00404B50 var_10C         = dword ptr -10Ch
.text:00404B50 var_108         = dword ptr -108h
.text:00404B50 var_104         = dword ptr -104h
.text:00404B50 var_F8          = dword ptr -0F8h
.text:00404B50 var_F0          = dword ptr -0F0h
.text:00404B50 var_EC          = dword ptr -0ECh
.text:00404B50 var_E8          = dword ptr -0E8h
.text:00404B50 var_E4          = dword ptr -0E4h
.text:00404B50 var_E0          = dword ptr -0E0h
.text:00404B50 var_DC          = dword ptr -0DCh
.text:00404B50 var_D8          = dword ptr -0D8h
.text:00404B50 var_C8          = dword ptr -0C8h
.text:00404B50 var_C4          = dword ptr -0C4h
.text:00404B50 var_88          = dword ptr -88h
.text:00404B50 var_80          = dword ptr -80h
.text:00404B50 var_7C          = dword ptr -7Ch
.text:00404B50 var_78          = dword ptr -78h
.text:00404B50 var_74          = dword ptr -74h
.text:00404B50 var_70          = dword ptr -70h
.text:00404B50 var_6C          = dword ptr -6Ch
.text:00404B50 var_68          = dword ptr -68h
.text:00404B50 var_60          = dword ptr -60h
.text:00404B50 var_5C          = dword ptr -5Ch
.text:00404B50 var_58          = dword ptr -58h
.text:00404B50 var_50          = dword ptr -50h
.text:00404B50 var_4C          = dword ptr -4Ch
.text:00404B50 var_48          = dword ptr -48h
.text:00404B50 var_44          = dword ptr -44h
.text:00404B50 Str2            = dword ptr  8
.text:00404B50 FileName        = dword ptr  0Ch
.text:00404B50 arg_8           = dword ptr  10h
.text:00404B50 arg_C           = dword ptr  14h
.text:00404B50 arg_10          = dword ptr  18h
.text:00404B50 arg_14          = dword ptr  1Ch
.text:00404B50 arg_18          = dword ptr  20h
.text:00404B50 arg_1C          = byte ptr  24h
.text:00404B50 arg_20          = dword ptr  28h
.text:00404B50 arg_24          = dword ptr  2Ch
.text:00404B50
.text:00404B50                 push    ebp
.text:00404B51                 xor     ecx, ecx
.text:00404B53                 mov     ebp, esp
.text:00404B55                 push    edi
.text:00404B56                 xor     edx, edx
.text:00404B58                 push    esi
.text:00404B59                 push    ebx
.text:00404B5A                 sub     esp, 28Ch
.text:00404B60                 mov     ebx, [ebp+arg_8]
.text:00404B63                 movzx   eax, [ebp+arg_1C]
.text:00404B67                 mov     [ebp+lpExistingFileName], ecx
.text:00404B6D                 mov     edi, [ebp+arg_C]
.text:00404B70                 mov     [ebp+lpFileName], edx
.text:00404B76                 mov     esi, [ebp+arg_10]
.text:00404B79                 mov     byte ptr [ebp+var_22B], bl
.text:00404B7F                 mov     [ebp+var_241], al
.text:00404B85                 mov     eax, [ebp+arg_18]
.text:00404B88                 mov     [ebp+var_240], edi
.text:00404B8E                 mov     edi, [ebp+arg_24]
.text:00404B91                 cmp     byte ptr [eax+14h], 0
.text:00404B95                 mov     [ebp+var_23C], esi
.text:00404B9B                 mov     [ebp+var_251], 0
.text:00404BA2                 mov     [ebp+var_253], 0
.text:00404BA9                 mov     [ebp+var_254], 0
.text:00404BB0                 jz      short loc_404BB9
.text:00404BB2                 test    edi, edi
.text:00404BB4                 jz      short loc_404BB9
.text:00404BB6                 mov     byte ptr [edi], 0
.text:00404BB9
.text:00404BB9 loc_404BB9:                             ; CODE XREF: sub_404B50+60↑j
.text:00404BB9                                         ; sub_404B50+64↑j
.text:00404BB9                 mov     ecx, [ebp+arg_18]
.text:00404BBC                 mov     edx, [ebp+arg_20]
.text:00404BBF                 cmp     dword ptr [ecx+8], 2
.text:00404BC3                 mov     byte ptr [edx], 0
.text:00404BC6                 jz      loc_406616
.text:00404BCC                 mov     esi, [ebp+Str2]
.text:00404BCF                 lea     ecx, [ebp+var_88]
.text:00404BD5                 mov     [esp+298h+AccessMode], ecx ; int
.text:00404BD9                 mov     [esp+298h+Format], esi ; char *
.text:00404BDC                 call    sub_417BA0
.text:00404BE1
.text:00404BE1 loc_404BE1:                             ; CODE XREF: sub_404B50+1ADB↓j
.text:00404BE1                 test    eax, eax
.text:00404BE3                 jz      short loc_404C30
.text:00404BE5                 mov     edi, [ebp+Str2]
.text:00404BE8
.text:00404BE8 loc_404BE8:                             ; CODE XREF: sub_404B50+1DF↓j
.text:00404BE8                 mov     [esp+298h+Format], edi ; char *
.text:00404BEB                 call    sub_40AF10
.text:00404BF0                 mov     [esp+298h+Format], offset aCannotStatS ; "cannot stat %s"
.text:00404BF7
.text:00404BF7 loc_404BF7:                             ; CODE XREF: sub_404B50+761↓j
.text:00404BF7                                         ; sub_404B50+1629↓j ...
.text:00404BF7                 mov     esi, eax
.text:00404BF9                 call    ds:libintl_gettext
.text:00404BFF                 mov     edi, eax
.text:00404C01                 call    _errno
.text:00404C06                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:00404C0A                 mov     [esp+298h+Size], edi ; char *
.text:00404C0E                 mov     ebx, [eax]
.text:00404C10                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:00404C14
.text:00404C14 loc_404C14:                             ; CODE XREF: sub_404B50+174D↓j
.text:00404C14                 mov     [esp+298h+Format], 0 ; Code
.text:00404C1B                 call    sub_4143B0
.text:00404C20
.text:00404C20 loc_404C20:                             ; CODE XREF: sub_404B50+4F3↓j
.text:00404C20                                         ; sub_404B50+574↓j ...
.text:00404C20                 xor     ebx, ebx
.text:00404C22
.text:00404C22 loc_404C22:                             ; CODE XREF: sub_404B50+3C0↓j
.text:00404C22                                         ; sub_404B50+480↓j ...
.text:00404C22                 lea     esp, [ebp-0Ch]
.text:00404C25                 mov     eax, ebx
.text:00404C27                 pop     ebx
.text:00404C28                 pop     esi
.text:00404C29                 pop     edi
.text:00404C2A                 pop     ebp
.text:00404C2B                 retn
.text:00404C2B ; ---------------------------------------------------------------------------
.text:00404C2C                 align 10h
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404B50+93↑j
.text:00404C30                 movzx   eax, word ptr [ebp+var_88]
.text:00404C37                 mov     ebx, eax
.text:00404C39                 and     ebx, 0F000h
.text:00404C3F                 mov     [ebp+var_248], eax
.text:00404C45                 cmp     ebx, 4000h
.text:00404C4B                 jz      loc_4065F2
.text:00404C51
.text:00404C51 loc_404C51:                             ; CODE XREF: sub_404B50+1AA9↓j
.text:00404C51                 cmp     [ebp+var_241], 0
.text:00404C58                 jz      loc_404CEF
.text:00404C5E                 mov     ecx, [ebp+var_88]
.text:00404C64                 and     ecx, 0F000h
.text:00404C6A                 cmp     ecx, 4000h
.text:00404C70                 jz      short loc_404CD0
.text:00404C72                 mov     edx, [ebp+arg_18]
.text:00404C75                 mov     ebx, [edx]
.text:00404C77                 test    ebx, ebx
.text:00404C79                 jnz     short loc_404CD0
.text:00404C7B                 mov     ecx, [edx+38h]
.text:00404C7E                 test    ecx, ecx
.text:00404C80                 jz      short loc_404CD0
.text:00404C82                 mov     [esp+298h+Format], ecx
.text:00404C85                 mov     ebx, [ebp+Str2]
.text:00404C88                 mov     esi, [ebp+var_7C]
.text:00404C8B                 mov     edx, [ebp+var_80]
.text:00404C8E                 mov     [ebp+var_118], ebx
.text:00404C94                 mov     ebx, [ebp+var_78]
.text:00404C97                 mov     [ebp+var_10C], esi
.text:00404C9D                 mov     esi, [ebp+var_74]
.text:00404CA0                 mov     [ebp+var_110], edx
.text:00404CA6                 lea     edx, [ebp+var_118]
.text:00404CAC                 mov     [ebp+var_108], ebx
.text:00404CB2                 mov     [ebp+var_104], esi
.text:00404CB8                 mov     [esp+298h+AccessMode], edx
.text:00404CBC                 call    sub_40BAE0
.text:00404CC1                 test    eax, eax
.text:00404CC3                 jnz     loc_4065B7
.text:00404CC9                 lea     esi, [esi+0]
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404B50+120↑j
.text:00404CD0                                         ; sub_404B50+129↑j ...
.text:00404CD0                 mov     edx, [ebp+Str2]
.text:00404CD3                 lea     ebx, [ebp+var_88]
.text:00404CD9                 mov     esi, [ebp+arg_18]
.text:00404CDC                 mov     [esp+298h+Size], ebx ; int
.text:00404CE0                 mov     [esp+298h+AccessMode], edx ; char *
.text:00404CE4                 mov     ecx, [esi+38h]
.text:00404CE7                 mov     [esp+298h+Format], ecx ; int
.text:00404CEA                 call    sub_407710
.text:00404CEF
.text:00404CEF loc_404CEF:                             ; CODE XREF: sub_404B50+108↑j
.text:00404CEF                 cmp     byte ptr [ebp+var_22B], 0
.text:00404CF6                 jnz     short loc_404D40
.text:00404CF8                 mov     eax, [ebp+arg_18]
.text:00404CFB                 cmp     dword ptr [eax+8], 2
.text:00404CFF                 jz      loc_40659D
.text:00404D05                 mov     edx, [ebp+FileName]
.text:00404D08                 lea     ebx, [ebp+var_F8]
.text:00404D0E                 mov     [esp+298h+AccessMode], ebx ; int
.text:00404D12                 mov     [esp+298h+Format], edx ; char *
.text:00404D15                 call    sub_417BA0
.text:00404D1A
.text:00404D1A loc_404D1A:                             ; CODE XREF: sub_404B50+1A62↓j
.text:00404D1A                 test    eax, eax
.text:00404D1C                 jz      loc_405E12
.text:00404D22                 call    _errno
.text:00404D27                 cmp     dword ptr [eax], 2
.text:00404D2A                 jz      short loc_404D34
.text:00404D2C                 mov     edi, [ebp+FileName]
.text:00404D2F                 jmp     loc_404BE8
.text:00404D34 ; ---------------------------------------------------------------------------
.text:00404D34
.text:00404D34 loc_404D34:                             ; CODE XREF: sub_404B50+1DA↑j
.text:00404D34                                         ; sub_404B50+1608↓j ...
.text:00404D34                 mov     byte ptr [ebp+var_22B], 1
.text:00404D3B                 nop
.text:00404D3C                 lea     esi, [esi+0]
.text:00404D40
.text:00404D40 loc_404D40:                             ; CODE XREF: sub_404B50+1A6↑j
.text:00404D40                                         ; sub_404B50+164C↓j ...
.text:00404D40                 mov     ecx, [ebp+arg_18]
.text:00404D43                 cmp     byte ptr [ecx+31h], 0
.text:00404D47                 jz      loc_404DD0
.text:00404D4D                 mov     edx, [ebp+var_248]
.text:00404D53                 and     edx, 0F000h
.text:00404D59                 cmp     edx, 4000h
.text:00404D5F                 jz      short loc_404DD0
.text:00404D61                 mov     [esp+298h+Format], 1 ; int
.text:00404D68                 mov     eax, [ebp+FileName]
.text:00404D6B                 mov     [esp+298h+AccessMode], eax ; char *
.text:00404D6F                 call    sub_40AEE0
.text:00404D74                 mov     [esp+298h+Format], 0 ; int
.text:00404D7B                 mov     ebx, [ebp+Str2]
.text:00404D7E                 mov     esi, eax
.text:00404D80                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00404D84                 call    sub_40AEE0
.text:00404D89                 mov     [esp+298h+AccessMode], eax
.text:00404D8D                 mov     [esp+298h+Size], esi
.text:00404D91                 mov     [esp+298h+Format], offset Format ; "%s -> %s"
.text:00404D98                 call    printf
.text:00404D9D                 cmp     [ebp+var_251], 0
.text:00404DA4                 jnz     loc_405DE4
.text:00404DAA
.text:00404DAA loc_404DAA:                             ; CODE XREF: sub_404B50+12BD↓j
.text:00404DAA                 mov     edx, ds:_iob
.text:00404DB0                 mov     ebx, [edx+24h]
.text:00404DB3                 dec     ebx
.text:00404DB4                 mov     [edx+24h], ebx
.text:00404DB7                 test    ebx, ebx
.text:00404DB9                 js      loc_405DC6
.text:00404DBF                 mov     esi, ds:_iob
.text:00404DC5                 mov     eax, [esi+20h]
.text:00404DC8                 mov     byte ptr [eax], 0Ah
.text:00404DCB                 inc     dword ptr [esi+20h]
.text:00404DCE                 mov     esi, esi
.text:00404DD0
.text:00404DD0 loc_404DD0:                             ; CODE XREF: sub_404B50+1F7↑j
.text:00404DD0                                         ; sub_404B50+20F↑j ...
.text:00404DD0                 mov     ebx, [ebp+arg_18]
.text:00404DD3                 cmp     byte ptr [ebx+14h], 0
.text:00404DD7                 jz      short loc_404DE3
.text:00404DD9                 cmp     [ebp+var_70], 1
.text:00404DDD                 jz      loc_405DA1
.text:00404DE3
.text:00404DE3 loc_404DE3:                             ; CODE XREF: sub_404B50+287↑j
.text:00404DE3                 mov     eax, [ebp+arg_18]
.text:00404DE6                 cmp     byte ptr [eax+20h], 0
.text:00404DEA                 jz      short loc_404E20
.text:00404DEC                 cmp     [ebp+var_70], 1
.text:00404DF0                 ja      loc_405BC0
.text:00404DF6                 cmp     [ebp+var_241], 0
.text:00404DFD                 jz      loc_405D96
.text:00404E03                 mov     eax, [eax+8]
.text:00404E06                 cmp     eax, 3
.text:00404E09                 jz      loc_405BC0
.text:00404E0F
.text:00404E0F loc_404E0F:                             ; CODE XREF: sub_404B50+124C↓j
.text:00404E0F                 cmp     eax, 4
.text:00404E12                 jz      loc_405BC0
.text:00404E18                 nop
.text:00404E19                 lea     esi, [esi+0]
.text:00404E20
.text:00404E20 loc_404E20:                             ; CODE XREF: sub_404B50+29A↑j
.text:00404E20                 mov     ecx, [ebp+arg_18]
.text:00404E23                 cmp     byte ptr [ecx+22h], 0
.text:00404E27                 jz      short loc_404E41
.text:00404E29                 mov     ebx, [ebp+var_248]
.text:00404E2F                 and     ebx, 0F000h
.text:00404E35                 cmp     ebx, 4000h
.text:00404E3B                 jz      loc_405BC0
.text:00404E41
.text:00404E41 loc_404E41:                             ; CODE XREF: sub_404B50+2D7↑j
.text:00404E41                                         ; sub_404B50+10A5↓j
.text:00404E41                 mov     ebx, [ebp+arg_18]
.text:00404E44                 cmp     byte ptr [ebx+14h], 0
.text:00404E48                 jnz     loc_405974
.text:00404E4E
.text:00404E4E loc_404E4E:                             ; CODE XREF: sub_404B50+FA8↓j
.text:00404E4E                 mov     [ebp+var_252], 1
.text:00404E55                 mov     eax, [ebp+var_248]
.text:00404E5B                 mov     [ebp+var_255], 1
.text:00404E62                 and     eax, 0F000h
.text:00404E67                 cmp     eax, 4000h
.text:00404E6C                 jz      loc_405790
.text:00404E72                 mov     esi, [ebp+arg_18]
.text:00404E75                 cmp     byte ptr [esi+2Ch], 0
.text:00404E79                 jz      loc_4053A5
.text:00404E7F                 mov     [ebp+var_255], 0
.text:00404E86                 mov     edx, [ebp+Str2]
.text:00404E89                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00404E8C                 jz      short loc_404EDD
.text:00404E8E                 mov     edi, [ebp+FileName]
.text:00404E91                 mov     esi, offset asc_404578 ; "."
.text:00404E96                 mov     [esp+298h+Format], edi ; void *
.text:00404E99                 call    sub_40AD30
.text:00404E9E                 mov     [ebp+Block], eax
.text:00404EA4                 mov     edi, eax
.text:00404EA6                 mov     ecx, 2
.text:00404EAB                 mov     [ebp+var_261], 0
.text:00404EB2                 cld
.text:00404EB3                 repe cmpsb
.text:00404EB5                 jnz     loc_405316
.text:00404EBB
.text:00404EBB loc_404EBB:                             ; CODE XREF: sub_404B50+7DE↓j
.text:00404EBB                                         ; sub_404B50+7FE↓j ...
.text:00404EBB                 mov     [ebp+var_261], 1
.text:00404EC2
.text:00404EC2 loc_404EC2:                             ; CODE XREF: sub_404B50+824↓j
.text:00404EC2                                         ; sub_404B50+84A↓j
.text:00404EC2                 mov     ebx, [ebp+Block]
.text:00404EC8                 mov     [esp+298h+Format], ebx ; Block
.text:00404ECB                 call    free
.text:00404ED0                 cmp     [ebp+var_261], 0
.text:00404ED7                 jz      loc_4052DB
.text:00404EDD
.text:00404EDD loc_404EDD:                             ; CODE XREF: sub_404B50+33C↑j
.text:00404EDD                 mov     esi, [ebp+FileName]
.text:00404EE0                 mov     eax, [ebp+Str2]
.text:00404EE3                 mov     [esp+298h+AccessMode], esi ; char *
.text:00404EE7                 mov     [esp+298h+Format], eax ; String
.text:00404EEA                 call    sub_418610
.text:00404EEF                 test    eax, eax
.text:00404EF1                 jnz     loc_4051B2
.text:00404EF7
.text:00404EF7 loc_404EF7:                             ; CODE XREF: sub_404B50+8D8↓j
.text:00404EF7                                         ; sub_404B50+9A3↓j ...
.text:00404EF7                 cmp     [ebp+var_241], 0
.text:00404EFE                 jnz     loc_405190
.text:00404F04
.text:00404F04 loc_404F04:                             ; CODE XREF: sub_404B50+65D↓j
.text:00404F04                 cmp     [ebp+var_255], 0
.text:00404F0B                 mov     ebx, 1
.text:00404F10                 jz      loc_404C22
.text:00404F16                 mov     ecx, [ebp+arg_18]
.text:00404F19                 cmp     byte ptr [ecx+1Fh], 0
.text:00404F1D                 jnz     loc_4050FE
.text:00404F23
.text:00404F23 loc_404F23:                             ; CODE XREF: sub_404B50+5E9↓j
.text:00404F23                                         ; sub_404B50+637↓j
.text:00404F23                 mov     esi, [ebp+arg_18]
.text:00404F26                 cmp     byte ptr [esi+1Dh], 0
.text:00404F2A                 jz      short loc_404F6F
.text:00404F2C                 movzx   eax, byte ptr [ebp+var_22B]
.text:00404F33                 test    al, al
.text:00404F35                 jnz     loc_4050F3
.text:00404F3B                 mov     ecx, [ebp+var_6C]
.text:00404F3E                 cmp     ecx, [ebp+var_DC]
.text:00404F44                 jz      loc_4050DF
.text:00404F4A                 mov     edx, [ebp+var_68]
.text:00404F4D
.text:00404F4D loc_404F4D:                             ; CODE XREF: sub_404B50+598↓j
.text:00404F4D                                         ; sub_404B50+5A9↓j
.text:00404F4D                 mov     [esp+298h+Size], edx ; int
.text:00404F51                 mov     edx, [ebp+FileName]
.text:00404F54                 mov     [ebp+var_254], 1
.text:00404F5B                 mov     [esp+298h+AccessMode], ecx ; int
.text:00404F5F                 mov     [esp+298h+Format], edx ; char *
.text:00404F62                 call    sub_4083D0
.text:00404F67                 test    eax, eax
.text:00404F69                 jnz     loc_40506E
.text:00404F6F
.text:00404F6F loc_404F6F:                             ; CODE XREF: sub_404B50+3DA↑j
.text:00404F6F                                         ; sub_404B50+57A↓j ...
.text:00404F6F                 movzx   eax, byte ptr [ebp+var_22B]
.text:00404F76
.text:00404F76 loc_404F76:                             ; CODE XREF: sub_404B50+59E↓j
.text:00404F76                 test    al, al
.text:00404F78                 jz      short loc_404F98
.text:00404F7A                 cmp     [ebp+var_253], 0
.text:00404F81                 jz      short loc_404F98
.text:00404F83                 cmp     [ebp+var_254], 0
.text:00404F8A                 jz      short loc_404FC9
.text:00404F8C                 test    [ebp+var_248], 0FE00h
.text:00404F96                 jz      short loc_404FC9
.text:00404F98
.text:00404F98 loc_404F98:                             ; CODE XREF: sub_404B50+428↑j
.text:00404F98                                         ; sub_404B50+431↑j
.text:00404F98                 mov     esi, [ebp+arg_18]
.text:00404F9B                 movzx   ecx, byte ptr [esi+1Eh]
.text:00404F9F                 test    cl, cl
.text:00404FA1                 jnz     short loc_404FA7
.text:00404FA3                 test    al, al
.text:00404FA5                 jz      short loc_404FC9
.text:00404FA7
.text:00404FA7 loc_404FA7:                             ; CODE XREF: sub_404B50+451↑j
.text:00404FA7                 mov     edx, [ebp+arg_18]
.text:00404FAA                 cmp     byte ptr [edx+4], 0
.text:00404FAE                 jnz     short loc_404FD5
.text:00404FB0                 mov     eax, [ebp+var_248]
.text:00404FB6                 and     eax, 0F000h
.text:00404FBB                 cmp     eax, 8000h
.text:00404FC0                 jz      short loc_404FD5
.text:00404FC2                 cmp     eax, 4000h
.text:00404FC7                 jz      short loc_404FD5
.text:00404FC9
.text:00404FC9 loc_404FC9:                             ; CODE XREF: sub_404B50+43A↑j
.text:00404FC9                                         ; sub_404B50+446↑j ...
.text:00404FC9                 movzx   ebx, [ebp+var_252]
.text:00404FD0                 jmp     loc_404C22
.text:00404FD5 ; ---------------------------------------------------------------------------
.text:00404FD5
.text:00404FD5 loc_404FD5:                             ; CODE XREF: sub_404B50+45E↑j
.text:00404FD5                                         ; sub_404B50+470↑j ...
.text:00404FD5                 mov     eax, [ebp+arg_18]
.text:00404FD8                 mov     edx, [ebp+var_248]
.text:00404FDE                 cmp     byte ptr [eax+23h], 0
.text:00404FE2                 jz      short loc_40504E
.text:00404FE4                 movzx   eax, word ptr [eax+24h]
.text:00404FE8
.text:00404FE8 loc_404FE8:                             ; CODE XREF: sub_404B50+519↓j
.text:00404FE8                 mov     ecx, [ebp+FileName]
.text:00404FEB                 movzx   esi, ax
.text:00404FEE                 mov     [esp+298h+AccessMode], esi ; AccessMode
.text:00404FF2                 mov     [esp+298h+Format], ecx ; FileName
.text:00404FF5                 call    _chmod
.text:00404FFA                 test    eax, eax
.text:00404FFC                 jz      short loc_404FC9
.text:00404FFE                 mov     ecx, [ebp+FileName]
.text:00405001                 mov     [esp+298h+Format], ecx ; char *
.text:00405004                 call    sub_40AF10
.text:00405009                 mov     [esp+298h+Format], offset aSettingPermiss ; "setting permissions for %s"
.text:00405010                 mov     ebx, eax
.text:00405012                 call    ds:libintl_gettext
.text:00405018                 mov     edi, eax
.text:0040501A                 call    _errno
.text:0040501F                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00405023                 mov     [esp+298h+Size], edi ; char *
.text:00405027                 mov     edx, [eax]
.text:00405029                 mov     [esp+298h+Format], 0 ; Code
.text:00405030                 mov     [esp+298h+AccessMode], edx ; ErrorMessage
.text:00405034                 call    sub_4143B0
.text:00405039                 mov     eax, [ebp+arg_18]
.text:0040503C                 test    dword ptr [eax+20h], 0FF00FF00h
.text:00405043                 jnz     loc_404C20
.text:00405049                 jmp     loc_404FC9
.text:0040504E ; ---------------------------------------------------------------------------
.text:0040504E
.text:0040504E loc_40504E:                             ; CODE XREF: sub_404B50+492↑j
.text:0040504E                 mov     eax, [ebp+arg_18]
.text:00405051                 cmp     byte ptr [eax+14h], 0
.text:00405055                 jnz     short loc_405067
.text:00405057                 test    cl, cl
.text:00405059                 jnz     short loc_405067
.text:0040505B                 movzx   edi, word ptr [eax+2Eh]
.text:0040505F                 and     edx, edi
.text:00405061                 and     edx, 0F3FFh
.text:00405067
.text:00405067 loc_405067:                             ; CODE XREF: sub_404B50+505↑j
.text:00405067                                         ; sub_404B50+509↑j
.text:00405067                 mov     eax, edx
.text:00405069                 jmp     loc_404FE8
.text:0040506E ; ---------------------------------------------------------------------------
.text:0040506E
.text:0040506E loc_40506E:                             ; CODE XREF: sub_404B50+419↑j
.text:0040506E                 call    _errno
.text:00405073                 cmp     dword ptr [eax], 1
.text:00405076                 jz      short loc_4050CF
.text:00405078                 call    _errno
.text:0040507D                 cmp     dword ptr [eax], 16h
.text:00405080                 jz      short loc_4050CF
.text:00405082
.text:00405082 loc_405082:                             ; CODE XREF: sub_404B50+58D↓j
.text:00405082                 mov     eax, [ebp+FileName]
.text:00405085                 mov     [esp+298h+Format], eax ; char *
.text:00405088                 call    sub_40AF10
.text:0040508D                 mov     [esp+298h+Format], offset aFailedToPreser ; "failed to preserve ownership for %s"
.text:00405094                 mov     ebx, eax
.text:00405096                 call    ds:libintl_gettext
.text:0040509C                 mov     edi, eax
.text:0040509E                 call    _errno
.text:004050A3                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:004050A7                 mov     [esp+298h+Size], edi ; char *
.text:004050AB                 mov     esi, [eax]
.text:004050AD                 mov     [esp+298h+Format], 0 ; Code
.text:004050B4                 mov     [esp+298h+AccessMode], esi ; ErrorMessage
.text:004050B8                 call    sub_4143B0
.text:004050BD                 mov     ebx, [ebp+arg_18]
.text:004050C0                 cmp     byte ptr [ebx+21h], 0
.text:004050C4                 jnz     loc_404C20
.text:004050CA                 jmp     loc_404F6F
.text:004050CF ; ---------------------------------------------------------------------------
.text:004050CF
.text:004050CF loc_4050CF:                             ; CODE XREF: sub_404B50+526↑j
.text:004050CF                                         ; sub_404B50+530↑j
.text:004050CF                 mov     ecx, [ebp+arg_18]
.text:004050D2                 mov     edi, [ecx+18h]
.text:004050D5                 test    edi, edi
.text:004050D7                 jnz     loc_404F6F
.text:004050DD                 jmp     short loc_405082
.text:004050DF ; ---------------------------------------------------------------------------
.text:004050DF
.text:004050DF loc_4050DF:                             ; CODE XREF: sub_404B50+3F4↑j
.text:004050DF                 mov     edx, [ebp+var_68]
.text:004050E2                 cmp     edx, [ebp+var_D8]
.text:004050E8                 jnz     loc_404F4D
.text:004050EE                 jmp     loc_404F76
.text:004050F3 ; ---------------------------------------------------------------------------
.text:004050F3
.text:004050F3 loc_4050F3:                             ; CODE XREF: sub_404B50+3E5↑j
.text:004050F3                 mov     edx, [ebp+var_68]
.text:004050F6                 mov     ecx, [ebp+var_6C]
.text:004050F9                 jmp     loc_404F4D
.text:004050FE ; ---------------------------------------------------------------------------
.text:004050FE
.text:004050FE loc_4050FE:                             ; CODE XREF: sub_404B50+3CD↑j
.text:004050FE                 mov     ebx, [ebp+var_50]
.text:00405101                 lea     edx, [ebp+var_22B+3]
.text:00405107                 mov     ecx, [ebp+var_4C]
.text:0040510A                 mov     [esp+298h+AccessMode], edx ; int
.text:0040510E                 mov     esi, [ebp+var_48]
.text:00405111                 mov     edi, [ebp+var_44]
.text:00405114                 mov     [ebp+var_22B+3], ebx
.text:0040511A                 mov     ebx, [ebp+FileName]
.text:0040511D                 mov     [ebp+var_224], ecx
.text:00405123                 mov     [ebp+var_220], esi
.text:00405129                 mov     [ebp+var_21C], edi
.text:0040512F                 mov     [esp+298h+Format], ebx ; char *
.text:00405132                 call    sub_40AEB0
.text:00405137                 test    eax, eax
.text:00405139                 jz      loc_404F23
.text:0040513F                 mov     eax, [ebp+FileName]
.text:00405142                 mov     [esp+298h+Format], eax ; char *
.text:00405145                 call    sub_40AF10
.text:0040514A                 mov     [esp+298h+Format], offset aPreservingTime ; "preserving times for %s"
.text:00405151                 mov     ebx, eax
.text:00405153                 call    ds:libintl_gettext
.text:00405159                 mov     edi, eax
.text:0040515B                 call    _errno
.text:00405160                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00405164                 mov     [esp+298h+Size], edi ; char *
.text:00405168                 mov     edi, [eax]
.text:0040516A                 mov     [esp+298h+Format], 0 ; Code
.text:00405171                 mov     [esp+298h+AccessMode], edi ; ErrorMessage
.text:00405175                 call    sub_4143B0
.text:0040517A                 mov     edx, [ebp+arg_18]
.text:0040517D                 cmp     byte ptr [edx+21h], 0
.text:00405181                 jnz     loc_404C20
.text:00405187                 jmp     loc_404F23
.text:00405187 ; ---------------------------------------------------------------------------
.text:0040518C                 align 10h
.text:00405190
.text:00405190 loc_405190:                             ; CODE XREF: sub_404B50+3AE↑j
.text:00405190                 mov     [esp+298h+Size], 0 ; int
.text:00405198                 mov     eax, [ebp+FileName]
.text:0040519B                 mov     esi, [ebp+arg_18]
.text:0040519E                 mov     [esp+298h+AccessMode], eax ; char *
.text:004051A2                 mov     edi, [esi+34h]
.text:004051A5                 mov     [esp+298h+Format], edi ; int
.text:004051A8                 call    sub_407710
.text:004051AD                 jmp     loc_404F04
.text:004051B2 ; ---------------------------------------------------------------------------
.text:004051B2
.text:004051B2 loc_4051B2:                             ; CODE XREF: sub_404B50+3A1↑j
.text:004051B2                 mov     [esp+298h+Format], 1 ; int
.text:004051B9                 mov     edx, [ebp+Str2]
.text:004051BC                 mov     [esp+298h+AccessMode], edx ; char *
.text:004051C0                 call    sub_40AEE0
.text:004051C5                 mov     [esp+298h+Format], 0 ; int
.text:004051CC                 mov     ecx, [ebp+FileName]
.text:004051CF                 mov     edi, eax
.text:004051D1                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004051D5                 call    sub_40AEE0
.text:004051DA                 mov     [esp+298h+Format], offset aCannotCreateSy ; "cannot create symbolic link %s to %s"
.text:004051E1
.text:004051E1 loc_4051E1:                             ; CODE XREF: sub_404B50+112B↓j
.text:004051E1                 mov     esi, eax
.text:004051E3                 call    ds:libintl_gettext
.text:004051E9                 mov     ebx, eax
.text:004051EB                 call    _errno
.text:004051F0                 mov     [esp+298h+var_288], edi
.text:004051F4                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:004051F8                 mov     [esp+298h+Size], ebx ; char *
.text:004051FC                 mov     ebx, [eax]
.text:004051FE                 mov     [esp+298h+AccessMode], ebx ; ErrorMessage
.text:00405202
.text:00405202 loc_405202:                             ; CODE XREF: sub_404B50+1241↓j
.text:00405202                 mov     [esp+298h+Format], 0 ; Code
.text:00405209                 call    sub_4143B0
.text:0040520E
.text:0040520E loc_40520E:                             ; CODE XREF: sub_404B50+7C1↓j
.text:0040520E                                         ; sub_404B50+8DE↓j ...
.text:0040520E                 mov     eax, [ebp+lpExistingFileName]
.text:00405214                 test    eax, eax
.text:00405216                 jz      loc_4052B6
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: sub_404B50+786↓j
.text:0040521C                 mov     esi, [ebp+lpFileName]
.text:00405222                 test    esi, esi
.text:00405224                 jz      loc_404C20
.text:0040522A                 mov     edi, [ebp+FileName]
.text:0040522D                 mov     eax, [ebp+lpFileName]
.text:00405233                 mov     [esp+298h+AccessMode], edi ; lpFileName
.text:00405237                 mov     [esp+298h+Format], eax ; LPCSTR
.text:0040523A                 call    sub_418A60
.text:0040523F                 test    eax, eax
.text:00405241                 jnz     short loc_40529F
.text:00405243                 mov     ecx, [ebp+arg_18]
.text:00405246                 cmp     byte ptr [ecx+31h], 0
.text:0040524A                 jz      loc_404C20
.text:00405250                 mov     [esp+298h+Format], 1 ; int
.text:00405257                 mov     eax, [ebp+FileName]
.text:0040525A                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040525E                 call    sub_40AEE0
.text:00405263                 mov     [esp+298h+Format], 0 ; int
.text:0040526A                 mov     esi, [ebp+lpFileName]
.text:00405270                 mov     ebx, eax
.text:00405272                 mov     [esp+298h+AccessMode], esi ; char *
.text:00405276                 call    sub_40AEE0
.text:0040527B                 mov     [esp+298h+Format], offset aSSUnbackup ; "%s -> %s (unbackup)\n"
.text:00405282                 mov     edi, eax
.text:00405284                 call    ds:libintl_gettext
.text:0040528A                 mov     [esp+298h+Size], ebx
.text:0040528E                 mov     [esp+298h+AccessMode], edi
.text:00405292                 mov     [esp+298h+Format], eax ; Format
.text:00405295                 call    printf
.text:0040529A                 jmp     loc_404C20
.text:0040529F ; ---------------------------------------------------------------------------
.text:0040529F
.text:0040529F loc_40529F:                             ; CODE XREF: sub_404B50+6F1↑j
.text:0040529F                 mov     edx, [ebp+FileName]
.text:004052A2                 mov     [esp+298h+Format], edx ; char *
.text:004052A5                 call    sub_40AF10
.text:004052AA                 mov     [esp+298h+Format], offset aCannotUnBackup ; "cannot un-backup %s"
.text:004052B1                 jmp     loc_404BF7
.text:004052B6 ; ---------------------------------------------------------------------------
.text:004052B6
.text:004052B6 loc_4052B6:                             ; CODE XREF: sub_404B50+6C6↑j
.text:004052B6                 mov     ecx, [ebp+var_78]
.text:004052B9                 mov     ebx, [ebp+var_74]
.text:004052BC                 mov     edx, [ebp+var_80]
.text:004052BF                 mov     [esp+298h+Size], ecx
.text:004052C3                 mov     edi, [ebp+var_7C]
.text:004052C6                 mov     dword ptr [esp+298h+var_28C], ebx
.text:004052CA                 mov     [esp+298h+Format], edx
.text:004052CD                 mov     [esp+298h+AccessMode], edi
.text:004052D1                 call    sub_407800
.text:004052D6                 jmp     loc_40521C
.text:004052DB ; ---------------------------------------------------------------------------
.text:004052DB
.text:004052DB loc_4052DB:                             ; CODE XREF: sub_404B50+387↑j
.text:004052DB                 mov     edi, [ebp+FileName]
.text:004052DE                 mov     [esp+298h+Format], edi ; char *
.text:004052E1                 call    sub_40AF10
.text:004052E6                 mov     [esp+298h+Format], offset aSCanMakeRelati ; "%s: can make relative symbolic links on"...
.text:004052ED
.text:004052ED loc_4052ED:                             ; CODE XREF: sub_404B50+955↓j
.text:004052ED                                         ; sub_404B50+E1F↓j
.text:004052ED                 mov     ebx, eax
.text:004052EF                 call    ds:libintl_gettext
.text:004052F5                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:004052F9                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00405301                 mov     [esp+298h+Size], eax ; char *
.text:00405305
.text:00405305 loc_405305:                             ; CODE XREF: sub_404B50+A03↓j
.text:00405305                 mov     [esp+298h+Format], 0 ; Code
.text:0040530C                 call    sub_4143B0
.text:00405311                 jmp     loc_40520E
.text:00405316 ; ---------------------------------------------------------------------------
.text:00405316
.text:00405316 loc_405316:                             ; CODE XREF: sub_404B50+365↑j
.text:00405316                 mov     [esp+298h+Format], offset asc_404578 ; "."
.text:0040531D                 lea     ecx, [ebp+var_1A8]
.text:00405323                 mov     [esp+298h+AccessMode], ecx ; int
.text:00405327                 call    sub_417BA0
.text:0040532C                 test    eax, eax
.text:0040532E                 jnz     loc_404EBB
.text:00405334                 mov     eax, [ebp+Block]
.text:0040533A                 lea     ebx, [ebp+var_218]
.text:00405340                 mov     [esp+298h+AccessMode], ebx ; int
.text:00405344                 mov     [esp+298h+Format], eax ; char *
.text:00405347                 call    sub_417BA0
.text:0040534C                 test    eax, eax
.text:0040534E                 jnz     loc_404EBB
.text:00405354                 mov     edx, [ebp+var_19C]
.text:0040535A                 mov     esi, [ebp+var_1A0]
.text:00405360                 mov     edi, [ebp+var_210]
.text:00405366                 mov     ecx, [ebp+var_20C]
.text:0040536C                 mov     eax, edx
.text:0040536E                 xor     edi, esi
.text:00405370                 xor     eax, ecx
.text:00405372                 or      eax, edi
.text:00405374                 jnz     loc_404EC2
.text:0040537A                 mov     edx, [ebp+var_194]
.text:00405380                 mov     esi, [ebp+var_198]
.text:00405386                 mov     edi, [ebp+var_208]
.text:0040538C                 mov     ecx, [ebp+var_204]
.text:00405392                 mov     eax, edx
.text:00405394                 xor     edi, esi
.text:00405396                 xor     eax, ecx
.text:00405398                 or      eax, edi
.text:0040539A                 jnz     loc_404EC2
.text:004053A0                 jmp     loc_404EBB
.text:004053A5 ; ---------------------------------------------------------------------------
.text:004053A5
.text:004053A5 loc_4053A5:                             ; CODE XREF: sub_404B50+329↑j
.text:004053A5                 mov     edi, [ebp+arg_18]
.text:004053A8                 cmp     byte ptr [edi+0Eh], 0
.text:004053AC                 jnz     loc_405758
.text:004053B2                 cmp     eax, 8000h
.text:004053B7                 jz      short loc_4053D8
.text:004053B9                 mov     ecx, [ebp+arg_18]
.text:004053BC                 cmp     byte ptr [ecx+4], 0
.text:004053C0                 jz      loc_405455
.text:004053C6                 cmp     eax, 4000h
.text:004053CB                 jz      loc_405455
.text:004053D1                 cmp     eax, 0A000h
.text:004053D6                 jz      short loc_405455
.text:004053D8
.text:004053D8 loc_4053D8:                             ; CODE XREF: sub_404B50+867↑j
.text:004053D8                 mov     [ebp+var_253], 1
.text:004053DF                 mov     ecx, [ebp+arg_18]
.text:004053E2                 mov     eax, [ebp+var_248]
.text:004053E8                 cmp     byte ptr [ecx+23h], 0
.text:004053EC                 jz      short loc_405433
.text:004053EE                 movzx   eax, word ptr [ecx+24h]
.text:004053F2
.text:004053F2 loc_4053F2:                             ; CODE XREF: sub_404B50+8EA↓j
.text:004053F2                                         ; sub_404B50+8F0↓j ...
.text:004053F2                 movzx   ebx, ax
.text:004053F5                 mov     esi, [ebp+arg_18]
.text:004053F8                 lea     edx, [ebp+var_88]
.text:004053FE                 mov     [esp+298h+var_284], edx ; int
.text:00405402                 mov     eax, [ebp+FileName]
.text:00405405                 lea     ecx, [ebp+var_22B]
.text:0040540B                 mov     [esp+298h+var_288], ecx ; int
.text:0040540F                 mov     edi, [ebp+Str2]
.text:00405412                 mov     dword ptr [esp+298h+var_28C], ebx ; __int16
.text:00405416                 mov     [esp+298h+Size], esi ; int
.text:0040541A                 mov     [esp+298h+AccessMode], eax ; LPCSTR
.text:0040541E                 mov     [esp+298h+Format], edi ; char *
.text:00405421                 call    sub_406B00
.text:00405426                 test    al, al
.text:00405428                 jnz     loc_404EF7
.text:0040542E                 jmp     loc_40520E
.text:00405433 ; ---------------------------------------------------------------------------
.text:00405433
.text:00405433 loc_405433:                             ; CODE XREF: sub_404B50+89C↑j
.text:00405433                 mov     edx, [ebp+arg_18]
.text:00405436                 cmp     byte ptr [edx+14h], 0
.text:0040543A                 jnz     short loc_4053F2
.text:0040543C                 cmp     byte ptr [edx+1Eh], 0
.text:00405440                 jnz     short loc_4053F2
.text:00405442                 movzx   eax, word ptr [edx+2Eh]
.text:00405446                 mov     ebx, [ebp+var_248]
.text:0040544C                 and     eax, ebx
.text:0040544E                 and     eax, 0F3FFh
.text:00405453                 jmp     short loc_4053F2
.text:00405455 ; ---------------------------------------------------------------------------
.text:00405455
.text:00405455 loc_405455:                             ; CODE XREF: sub_404B50+870↑j
.text:00405455                                         ; sub_404B50+87B↑j ...
.text:00405455                 mov     eax, [ebp+var_248]
.text:0040545B                 and     eax, 0F000h
.text:00405460                 cmp     eax, 1000h
.text:00405465                 jz      loc_4056F2
.text:0040546B                 cmp     eax, 6000h
.text:00405470                 jz      loc_40566B
.text:00405476                 cmp     eax, 2000h
.text:0040547B                 jz      loc_40566B
.text:00405481                 cmp     eax, 0C000h
.text:00405486                 jz      loc_40566B
.text:0040548C                 cmp     eax, 0A000h
.text:00405491                 jz      short loc_4054AA
.text:00405493                 mov     ebx, [ebp+Str2]
.text:00405496                 mov     [esp+298h+Format], ebx ; char *
.text:00405499                 call    sub_40AF10
.text:0040549E                 mov     [esp+298h+Format], offset aSHasUnknownFil ; "%s has unknown file type"
.text:004054A5                 jmp     loc_4052ED
.text:004054AA ; ---------------------------------------------------------------------------
.text:004054AA
.text:004054AA loc_4054AA:                             ; CODE XREF: sub_404B50+941↑j
.text:004054AA                 mov     esi, [ebp+var_58]
.text:004054AD                 mov     eax, [ebp+Str2]
.text:004054B0                 mov     [esp+298h+AccessMode], esi ; int
.text:004054B4                 mov     [esp+298h+Format], eax ; char *
.text:004054B7                 call    sub_40AF40
.text:004054BC                 test    eax, eax
.text:004054BE                 mov     edi, eax
.text:004054C0                 jz      loc_405641
.text:004054C6                 mov     [esp+298h+Format], eax ; String
.text:004054C9                 mov     ebx, [ebp+FileName]
.text:004054CC                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004054D0                 call    sub_418610
.text:004054D5                 test    eax, eax
.text:004054D7                 jnz     loc_405568
.text:004054DD                 mov     [esp+298h+Format], edi ; Block
.text:004054E0                 call    free
.text:004054E5
.text:004054E5 loc_4054E5:                             ; CODE XREF: sub_404B50+A61↓j
.text:004054E5                 mov     [ebp+var_255], 0
.text:004054EC                 mov     edx, [ebp+arg_18]
.text:004054EF                 cmp     byte ptr [edx+1Dh], 0
.text:004054F3                 jz      loc_404EF7
.text:004054F9                 mov     esi, [ebp+var_68]
.text:004054FC                 mov     edi, [ebp+var_6C]
.text:004054FF                 mov     ebx, [ebp+FileName]
.text:00405502                 mov     [esp+298h+Size], esi
.text:00405506                 mov     [esp+298h+AccessMode], edi
.text:0040550A                 mov     [esp+298h+Format], ebx
.text:0040550D                 call    sub_418A30
.text:00405512                 test    eax, eax
.text:00405514                 jz      loc_404EF7
.text:0040551A                 call    _errno
.text:0040551F                 cmp     dword ptr [eax], 1
.text:00405522                 jz      short loc_405558
.text:00405524                 call    _errno
.text:00405529                 cmp     dword ptr [eax], 16h
.text:0040552C                 jz      short loc_405558
.text:0040552E
.text:0040552E loc_40552E:                             ; CODE XREF: sub_404B50+A16↓j
.text:0040552E                 mov     [esp+298h+Format], offset aFailedToPreser ; "failed to preserve ownership for %s"
.text:00405535                 call    ds:libintl_gettext
.text:0040553B                 mov     ebx, eax
.text:0040553D                 call    _errno
.text:00405542                 mov     edx, [ebp+FileName]
.text:00405545                 mov     dword ptr [esp+298h+var_28C], edx
.text:00405549
.text:00405549 loc_405549:                             ; CODE XREF: sub_404B50+B16↓j
.text:00405549                 mov     [esp+298h+Size], ebx
.text:0040554D                 mov     edi, [eax]
.text:0040554F
.text:0040554F loc_40554F:                             ; CODE XREF: sub_404B50+A8F↓j
.text:0040554F                 mov     [esp+298h+AccessMode], edi
.text:00405553                 jmp     loc_405305
.text:00405558 ; ---------------------------------------------------------------------------
.text:00405558
.text:00405558 loc_405558:                             ; CODE XREF: sub_404B50+9D2↑j
.text:00405558                                         ; sub_404B50+9DC↑j
.text:00405558                 mov     ecx, [ebp+arg_18]
.text:0040555B                 mov     eax, [ecx+18h]
.text:0040555E                 test    eax, eax
.text:00405560                 jnz     loc_404EF7
.text:00405566                 jmp     short loc_40552E
.text:00405568 ; ---------------------------------------------------------------------------
.text:00405568
.text:00405568 loc_405568:                             ; CODE XREF: sub_404B50+987↑j
.text:00405568                 call    _errno
.text:0040556D                 mov     [ebp+var_269], 0
.text:00405574                 mov     ecx, [ebp+arg_18]
.text:00405577                 mov     edx, [eax]
.text:00405579                 cmp     byte ptr [ecx+30h], 0
.text:0040557D                 mov     [ebp+var_268], edx
.text:00405583                 jz      short loc_4055A2
.text:00405585                 cmp     byte ptr [ebp+var_22B], 0
.text:0040558C                 jnz     short loc_4055A2
.text:0040558E                 mov     esi, [ebp+var_F8]
.text:00405594                 and     esi, 0F000h
.text:0040559A                 cmp     esi, 0A000h
.text:004055A0                 jz      short loc_4055E4
.text:004055A2
.text:004055A2 loc_4055A2:                             ; CODE XREF: sub_404B50+A33↑j
.text:004055A2                                         ; sub_404B50+A3C↑j ...
.text:004055A2                 mov     [esp+298h+Format], edi ; Block
.text:004055A5                 call    free
.text:004055AA                 cmp     [ebp+var_269], 0
.text:004055B1                 jnz     loc_4054E5
.text:004055B7                 mov     ecx, [ebp+FileName]
.text:004055BA                 mov     [esp+298h+Format], ecx ; char *
.text:004055BD                 call    sub_40AF10
.text:004055C2                 mov     [esp+298h+Format], offset aCannotCreateSy_0 ; "cannot create symbolic link %s"
.text:004055C9                 mov     esi, eax
.text:004055CB                 call    ds:libintl_gettext
.text:004055D1                 mov     dword ptr [esp+298h+var_28C], esi
.text:004055D5                 mov     edi, [ebp+var_268]
.text:004055DB                 mov     [esp+298h+Size], eax
.text:004055DF                 jmp     loc_40554F
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E4
.text:004055E4 loc_4055E4:                             ; CODE XREF: sub_404B50+A50↑j
.text:004055E4                 mov     [esp+298h+Format], edi ; Str
.text:004055E7                 xor     ebx, ebx
.text:004055E9                 call    strlen
.text:004055EE                 mov     edx, [ebp+var_C4]
.text:004055F4                 mov     ecx, eax
.text:004055F6                 mov     eax, [ebp+var_C8]
.text:004055FC                 mov     esi, edx
.text:004055FE                 xor     esi, ebx
.text:00405600                 xor     eax, ecx
.text:00405602                 or      esi, eax
.text:00405604                 jnz     short loc_4055A2
.text:00405606                 mov     ebx, [ebp+var_C8]
.text:0040560C                 mov     eax, [ebp+FileName]
.text:0040560F                 mov     [esp+298h+AccessMode], ebx ; int
.text:00405613                 mov     [esp+298h+Format], eax ; char *
.text:00405616                 call    sub_40AF40
.text:0040561B                 mov     [esp+298h+Format], eax ; Str1
.text:0040561E                 mov     ebx, eax
.text:00405620                 mov     [esp+298h+AccessMode], edi ; Str2
.text:00405624                 call    strcmp
.text:00405629                 test    eax, eax
.text:0040562B                 jnz     short loc_405634
.text:0040562D                 mov     [ebp+var_269], 1
.text:00405634
.text:00405634 loc_405634:                             ; CODE XREF: sub_404B50+ADB↑j
.text:00405634                 mov     [esp+298h+Format], ebx ; Block
.text:00405637                 call    free
.text:0040563C                 jmp     loc_4055A2
.text:00405641 ; ---------------------------------------------------------------------------
.text:00405641
.text:00405641 loc_405641:                             ; CODE XREF: sub_404B50+970↑j
.text:00405641                 mov     edi, [ebp+Str2]
.text:00405644                 mov     [esp+298h+Format], edi ; char *
.text:00405647                 call    sub_40AF10
.text:0040564C                 mov     [esp+298h+Format], offset aCannotReadSymb ; "cannot read symbolic link %s"
.text:00405653
.text:00405653 loc_405653:                             ; CODE XREF: sub_404B50+B7E↓j
.text:00405653                                         ; sub_404B50+BE1↓j ...
.text:00405653                 mov     esi, eax
.text:00405655                 call    ds:libintl_gettext
.text:0040565B                 mov     ebx, eax
.text:0040565D                 call    _errno
.text:00405662                 mov     dword ptr [esp+298h+var_28C], esi
.text:00405666                 jmp     loc_405549
.text:0040566B ; ---------------------------------------------------------------------------
.text:0040566B
.text:0040566B loc_40566B:                             ; CODE XREF: sub_404B50+920↑j
.text:0040566B                                         ; sub_404B50+92B↑j ...
.text:0040566B                 mov     ecx, [ebp+arg_18]
.text:0040566E                 mov     eax, [ebp+var_248]
.text:00405674                 cmp     byte ptr [ecx+23h], 0
.text:00405678                 jz      short loc_4056D0
.text:0040567A                 movzx   eax, word ptr [ecx+24h]
.text:0040567E
.text:0040567E loc_40567E:                             ; CODE XREF: sub_404B50+B87↓j
.text:0040567E                                         ; sub_404B50+B8D↓j ...
.text:0040567E                 mov     [esp+298h+Format], 0
.text:00405685                 mov     ecx, [ebp+var_60]
.text:00405688                 movzx   esi, ax
.text:0040568B                 mov     [esp+298h+Size], esi
.text:0040568F                 mov     ebx, [ebp+var_5C]
.text:00405692                 lea     edi, [ebp+var_238]
.text:00405698                 mov     dword ptr [esp+298h+var_28C], edi
.text:0040569C                 mov     edx, [ebp+FileName]
.text:0040569F                 mov     [ebp+var_238], ecx
.text:004056A5                 mov     [ebp+var_234], ebx
.text:004056AB                 mov     [esp+298h+AccessMode], edx
.text:004056AF                 call    sub_418880
.text:004056B4                 test    eax, eax
.text:004056B6                 jz      loc_404EF7
.text:004056BC                 mov     edx, [ebp+FileName]
.text:004056BF                 mov     [esp+298h+Format], edx ; char *
.text:004056C2                 call    sub_40AF10
.text:004056C7                 mov     [esp+298h+Format], offset aCannotCreateSp ; "cannot create special file %s"
.text:004056CE                 jmp     short loc_405653
.text:004056D0 ; ---------------------------------------------------------------------------
.text:004056D0
.text:004056D0 loc_4056D0:                             ; CODE XREF: sub_404B50+B28↑j
.text:004056D0                 mov     edx, [ebp+arg_18]
.text:004056D3                 cmp     byte ptr [edx+14h], 0
.text:004056D7                 jnz     short loc_40567E
.text:004056D9                 cmp     byte ptr [edx+1Eh], 0
.text:004056DD                 jnz     short loc_40567E
.text:004056DF                 movzx   eax, word ptr [edx+2Eh]
.text:004056E3                 mov     ecx, [ebp+var_248]
.text:004056E9                 and     eax, ecx
.text:004056EB                 and     eax, 0F3FFh
.text:004056F0                 jmp     short loc_40567E
.text:004056F2 ; ---------------------------------------------------------------------------
.text:004056F2
.text:004056F2 loc_4056F2:                             ; CODE XREF: sub_404B50+915↑j
.text:004056F2                 mov     edx, [ebp+arg_18]
.text:004056F5                 mov     eax, [ebp+var_248]
.text:004056FB                 cmp     byte ptr [edx+23h], 0
.text:004056FF                 jz      short loc_405736
.text:00405701                 movzx   eax, word ptr [edx+24h]
.text:00405705
.text:00405705 loc_405705:                             ; CODE XREF: sub_404B50+BED↓j
.text:00405705                                         ; sub_404B50+BF3↓j ...
.text:00405705                 mov     edi, [ebp+FileName]
.text:00405708                 movzx   ebx, ax
.text:0040570B                 mov     [esp+298h+AccessMode], ebx ; __int16
.text:0040570F                 mov     [esp+298h+Format], edi ; char *
.text:00405712                 call    sub_4169B0
.text:00405717                 test    eax, eax
.text:00405719                 jz      loc_404EF7
.text:0040571F                 mov     eax, [ebp+FileName]
.text:00405722                 mov     [esp+298h+Format], eax ; char *
.text:00405725                 call    sub_40AF10
.text:0040572A                 mov     [esp+298h+Format], offset aCannotCreateFi ; "cannot create fifo %s"
.text:00405731                 jmp     loc_405653
.text:00405736 ; ---------------------------------------------------------------------------
.text:00405736
.text:00405736 loc_405736:                             ; CODE XREF: sub_404B50+BAF↑j
.text:00405736                 mov     ecx, [ebp+arg_18]
.text:00405739                 cmp     byte ptr [ecx+14h], 0
.text:0040573D                 jnz     short loc_405705
.text:0040573F                 cmp     byte ptr [ecx+1Eh], 0
.text:00405743                 jnz     short loc_405705
.text:00405745                 movzx   eax, word ptr [ecx+2Eh]
.text:00405749                 mov     esi, [ebp+var_248]
.text:0040574F                 and     eax, esi
.text:00405751                 and     eax, 0F3FFh
.text:00405756                 jmp     short loc_405705
.text:00405758 ; ---------------------------------------------------------------------------
.text:00405758
.text:00405758 loc_405758:                             ; CODE XREF: sub_404B50+85C↑j
.text:00405758                 mov     [ebp+var_255], 0
.text:0040575F                 mov     esi, [ebp+FileName]
.text:00405762                 mov     eax, [ebp+Str2]
.text:00405765                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:00405769                 mov     [esp+298h+Format], eax ; lpExistingFileName
.text:0040576C                 call    sub_416790
.text:00405771                 test    eax, eax
.text:00405773                 jz      loc_404EF7
.text:00405779                 mov     edx, [ebp+FileName]
.text:0040577C                 mov     [esp+298h+Format], edx ; char *
.text:0040577F                 call    sub_40AF10
.text:00405784                 mov     [esp+298h+Format], offset aCannotCreateLi ; "cannot create link %s"
.text:0040578B                 jmp     loc_405653
.text:00405790 ; ---------------------------------------------------------------------------
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_404B50+31C↑j
.text:00405790                 mov     edi, [ebp+arg_14]
.text:00405793                 test    edi, edi
.text:00405795                 jz      short loc_4057EA
.text:00405797                 mov     edx, [ebp+var_80]
.text:0040579A                 mov     esi, [ebp+var_7C]
.text:0040579D                 mov     [ebp+var_278], edx
.text:004057A3                 mov     [ebp+var_274], esi
.text:004057A9                 lea     esi, [esi+0]
.text:004057B0
.text:004057B0 loc_4057B0:                             ; CODE XREF: sub_404B50+C98↓j
.text:004057B0                 mov     ebx, [edi+8]
.text:004057B3                 mov     esi, [edi+0Ch]
.text:004057B6                 mov     eax, [ebp+var_274]
.text:004057BC                 mov     ecx, [ebp+var_278]
.text:004057C2                 xor     eax, esi
.text:004057C4                 xor     ebx, ecx
.text:004057C6                 or      eax, ebx
.text:004057C8                 jnz     short loc_4057E4
.text:004057CA                 mov     ebx, [edi+14h]
.text:004057CD                 mov     ecx, [edi+10h]
.text:004057D0                 mov     eax, [ebp+var_78]
.text:004057D3                 mov     edx, [ebp+var_74]
.text:004057D6                 mov     esi, ebx
.text:004057D8                 xor     eax, ecx
.text:004057DA                 xor     esi, edx
.text:004057DC                 or      esi, eax
.text:004057DE                 jz      loc_40595D
.text:004057E4
.text:004057E4 loc_4057E4:                             ; CODE XREF: sub_404B50+C78↑j
.text:004057E4                 mov     edi, [edi]
.text:004057E6                 test    edi, edi
.text:004057E8                 jnz     short loc_4057B0
.text:004057EA
.text:004057EA loc_4057EA:                             ; CODE XREF: sub_404B50+C45↑j
.text:004057EA                 mov     [esp+298h+Format], 18h ; Size
.text:004057F1                 call    malloc
.text:004057F6                 cmp     byte ptr [ebp+var_22B], 0
.text:004057FD                 mov     esi, eax
.text:004057FF                 mov     ecx, [ebp+var_80]
.text:00405802                 mov     ebx, [ebp+var_7C]
.text:00405805                 mov     eax, [ebp+arg_14]
.text:00405808                 mov     [esi+8], ecx
.text:0040580B                 mov     [esi+0Ch], ebx
.text:0040580E                 mov     edx, [ebp+var_78]
.text:00405811                 mov     [esi], eax
.text:00405813                 mov     edi, [ebp+var_74]
.text:00405816                 mov     [esi+10h], edx
.text:00405819                 mov     [esi+14h], edi
.text:0040581C                 jnz     short loc_405832
.text:0040581E                 mov     edi, [ebp+var_F8]
.text:00405824                 and     edi, 0F000h
.text:0040582A                 cmp     edi, 4000h
.text:00405830                 jz      short loc_40587E
.text:00405832
.text:00405832 loc_405832:                             ; CODE XREF: sub_404B50+CCC↑j
.text:00405832                 mov     eax, [ebp+arg_18]
.text:00405835                 mov     ecx, [ebp+var_248]
.text:0040583B                 mov     edx, [ebp+FileName]
.text:0040583E                 movzx   ebx, word ptr [eax+2Eh]
.text:00405842                 mov     [esp+298h+Format], edx ; LPCSTR
.text:00405845                 and     ebx, ecx
.text:00405847                 or      ebx, 1C0h
.text:0040584D                 mov     [esp+298h+AccessMode], ebx ; AccessMode
.text:00405851                 call    sub_416930
.text:00405856                 test    eax, eax
.text:00405858                 jnz     loc_405946
.text:0040585E                 mov     edx, [ebp+FileName]
.text:00405861                 mov     [esp+298h+Format], edx ; char *
.text:00405864                 call    sub_407870
.text:00405869                 test    al, al
.text:0040586B                 jz      loc_40520E
.text:00405871                 mov     ebx, [ebp+arg_18]
.text:00405874                 cmp     byte ptr [ebx+31h], 0
.text:00405878                 jnz     loc_405905
.text:0040587E
.text:0040587E loc_40587E:                             ; CODE XREF: sub_404B50+CE0↑j
.text:0040587E                                         ; sub_404B50+DF1↓j
.text:0040587E                 mov     edx, [ebp+arg_18]
.text:00405881                 cmp     byte ptr [edx+1Ch], 0
.text:00405885                 jz      short loc_4058B8
.text:00405887                 mov     ebx, [ebp+var_23C]
.text:0040588D                 or      ebx, [ebp+var_240]
.text:00405893                 jz      short loc_4058B8
.text:00405895                 mov     ebx, [ebp+var_74]
.text:00405898                 mov     edi, [ebp+var_78]
.text:0040589B                 mov     eax, [ebp+var_23C]
.text:004058A1                 mov     ecx, [ebp+var_240]
.text:004058A7                 xor     eax, ebx
.text:004058A9                 xor     edi, ecx
.text:004058AB                 or      eax, edi
.text:004058AD                 mov     ebx, 1
.text:004058B2                 jnz     loc_404C22
.text:004058B8
.text:004058B8 loc_4058B8:                             ; CODE XREF: sub_404B50+D35↑j
.text:004058B8                                         ; sub_404B50+D43↑j
.text:004058B8                 movzx   edi, byte ptr [ebp+var_22B]
.text:004058BF                 mov     [esp+298h+var_288], esi ; int
.text:004058C3                 lea     eax, [ebp+var_88]
.text:004058C9                 mov     ebx, [ebp+arg_20]
.text:004058CC                 mov     dword ptr [esp+298h+var_28C], eax ; int
.text:004058D0                 mov     ecx, [ebp+arg_18]
.text:004058D3                 mov     edx, [ebp+FileName]
.text:004058D6                 mov     [esp+298h+var_280], ebx ; int
.text:004058DA                 mov     esi, [ebp+Str2]
.text:004058DD                 mov     [esp+298h+var_284], ecx ; int
.text:004058E1                 mov     [esp+298h+Size], edi ; char
.text:004058E5                 mov     [esp+298h+AccessMode], edx ; int
.text:004058E9                 mov     [esp+298h+Format], esi ; char *
.text:004058EC                 call    sub_406870
.text:004058F1                 test    al, al
.text:004058F3                 jnz     loc_404EF7
.text:004058F9                 mov     [ebp+var_252], 0
.text:00405900                 jmp     loc_404EF7
.text:00405905 ; ---------------------------------------------------------------------------
.text:00405905
.text:00405905 loc_405905:                             ; CODE XREF: sub_404B50+D28↑j
.text:00405905                 mov     [esp+298h+Format], 1 ; int
.text:0040590C                 mov     ecx, [ebp+FileName]
.text:0040590F                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00405913                 call    sub_40AEE0
.text:00405918                 mov     [esp+298h+Format], 0 ; int
.text:0040591F                 mov     edi, eax
.text:00405921                 mov     eax, [ebp+Str2]
.text:00405924                 mov     [esp+298h+AccessMode], eax ; char *
.text:00405928                 call    sub_40AEE0
.text:0040592D                 mov     [esp+298h+AccessMode], eax
.text:00405931                 mov     [esp+298h+Size], edi
.text:00405935                 mov     [esp+298h+Format], offset aSS_1 ; "%s -> %s\n"
.text:0040593C                 call    printf
.text:00405941                 jmp     loc_40587E
.text:00405946 ; ---------------------------------------------------------------------------
.text:00405946
.text:00405946 loc_405946:                             ; CODE XREF: sub_404B50+D08↑j
.text:00405946                 mov     esi, [ebp+FileName]
.text:00405949                 mov     [esp+298h+Format], esi ; char *
.text:0040594C                 call    sub_40AF10
.text:00405951                 mov     [esp+298h+Format], offset aCannotCreateDi ; "cannot create directory %s"
.text:00405958                 jmp     loc_405653
.text:0040595D ; ---------------------------------------------------------------------------
.text:0040595D
.text:0040595D loc_40595D:                             ; CODE XREF: sub_404B50+C8E↑j
.text:0040595D                 mov     esi, [ebp+Str2]
.text:00405960                 mov     [esp+298h+Format], esi ; char *
.text:00405963                 call    sub_40AF10
.text:00405968                 mov     [esp+298h+Format], offset aCannotCopyCycl ; "cannot copy cyclic symbolic link %s"
.text:0040596F                 jmp     loc_4052ED
.text:00405974 ; ---------------------------------------------------------------------------
.text:00405974
.text:00405974 loc_405974:                             ; CODE XREF: sub_404B50+2F8↑j
.text:00405974                 mov     ecx, [ebp+FileName]
.text:00405977                 mov     eax, [ebp+Str2]
.text:0040597A                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:0040597E                 mov     [esp+298h+Format], eax ; LPCSTR
.text:00405981                 call    sub_418A60
.text:00405986                 test    eax, eax
.text:00405988                 jnz     loc_405A29
.text:0040598E                 mov     edx, [ebp+arg_18]
.text:00405991                 cmp     byte ptr [edx+31h], 0
.text:00405995                 jz      short loc_4059AD
.text:00405997                 and     [ebp+var_248], 0F000h
.text:004059A1                 cmp     [ebp+var_248], 4000h
.text:004059AB                 jz      short loc_4059EB
.text:004059AD
.text:004059AD loc_4059AD:                             ; CODE XREF: sub_404B50+E45↑j
.text:004059AD                                         ; sub_404B50+ED7↓j
.text:004059AD                 test    edi, edi
.text:004059AF                 jz      short loc_4059B4
.text:004059B1                 mov     byte ptr [edi], 1
.text:004059B4
.text:004059B4 loc_4059B4:                             ; CODE XREF: sub_404B50+E5F↑j
.text:004059B4                 cmp     [ebp+var_241], 0
.text:004059BB                 jnz     short loc_4059CA
.text:004059BD                 lea     esi, [esi+0]
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_404B50+E99↓j
.text:004059C0                                         ; sub_404B50+1065↓j ...
.text:004059C0                 mov     ebx, 1
.text:004059C5                 jmp     loc_404C22
.text:004059CA ; ---------------------------------------------------------------------------
.text:004059CA
.text:004059CA loc_4059CA:                             ; CODE XREF: sub_404B50+E6B↑j
.text:004059CA                 mov     ecx, [ebp+FileName]
.text:004059CD                 lea     esi, [ebp+var_88]
.text:004059D3                 mov     edx, [ebp+arg_18]
.text:004059D6                 mov     [esp+298h+Size], esi ; int
.text:004059DA                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004059DE                 mov     edi, [edx+34h]
.text:004059E1                 mov     [esp+298h+Format], edi ; int
.text:004059E4                 call    sub_407710
.text:004059E9                 jmp     short loc_4059C0
.text:004059EB ; ---------------------------------------------------------------------------
.text:004059EB
.text:004059EB loc_4059EB:                             ; CODE XREF: sub_404B50+E5B↑j
.text:004059EB                 mov     [esp+298h+Format], 1 ; int
.text:004059F2                 mov     eax, [ebp+FileName]
.text:004059F5                 mov     [esp+298h+AccessMode], eax ; char *
.text:004059F9                 call    sub_40AEE0
.text:004059FE                 mov     [esp+298h+Format], 0 ; int
.text:00405A05                 mov     ebx, [ebp+Str2]
.text:00405A08                 mov     esi, eax
.text:00405A0A                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00405A0E                 call    sub_40AEE0
.text:00405A13                 mov     [esp+298h+AccessMode], eax
.text:00405A17                 mov     [esp+298h+Size], esi
.text:00405A1B                 mov     [esp+298h+Format], offset aSS_1 ; "%s -> %s\n"
.text:00405A22                 call    printf
.text:00405A27                 jmp     short loc_4059AD
.text:00405A29 ; ---------------------------------------------------------------------------
.text:00405A29
.text:00405A29 loc_405A29:                             ; CODE XREF: sub_404B50+E38↑j
.text:00405A29                 call    _errno
.text:00405A2E                 cmp     dword ptr [eax], 16h
.text:00405A31                 jz      loc_405B52
.text:00405A37                 call    _errno
.text:00405A3C                 cmp     dword ptr [eax], 5
.text:00405A3F                 jz      loc_405B52
.text:00405A45                 call    _errno
.text:00405A4A                 cmp     dword ptr [eax], 29h ; ')'
.text:00405A4D                 jz      loc_405B52
.text:00405A53                 call    _errno
.text:00405A58                 cmp     dword ptr [eax], 12h
.text:00405A5B                 jz      loc_405AE2
.text:00405A61                 mov     [esp+298h+Format], 1 ; int
.text:00405A68                 mov     esi, [ebp+FileName]
.text:00405A6B                 mov     [esp+298h+AccessMode], esi ; char *
.text:00405A6F                 call    sub_40AEE0
.text:00405A74                 mov     [esp+298h+Format], 0 ; int
.text:00405A7B                 mov     edi, eax
.text:00405A7D                 mov     eax, [ebp+Str2]
.text:00405A80                 mov     [esp+298h+AccessMode], eax ; char *
.text:00405A84                 call    sub_40AEE0
.text:00405A89                 mov     [esp+298h+Format], offset aCannotMoveSToS ; "cannot move %s to %s"
.text:00405A90                 mov     esi, eax
.text:00405A92                 call    ds:libintl_gettext
.text:00405A98                 mov     ebx, eax
.text:00405A9A                 call    _errno
.text:00405A9F                 mov     [esp+298h+var_288], edi
.text:00405AA3                 mov     dword ptr [esp+298h+var_28C], esi ; char
.text:00405AA7
.text:00405AA7 loc_405AA7:                             ; CODE XREF: sub_404B50+FFD↓j
.text:00405AA7                 mov     [esp+298h+Size], ebx ; char *
.text:00405AAB                 mov     ecx, [eax]
.text:00405AAD                 mov     [esp+298h+Format], 0 ; Code
.text:00405AB4                 mov     [esp+298h+AccessMode], ecx ; ErrorMessage
.text:00405AB8                 call    sub_4143B0
.text:00405ABD                 mov     ebx, [ebp+var_78]
.text:00405AC0                 mov     edi, [ebp+var_74]
.text:00405AC3                 mov     edx, [ebp+var_80]
.text:00405AC6                 mov     [esp+298h+Size], ebx
.text:00405ACA                 mov     esi, [ebp+var_7C]
.text:00405ACD                 mov     dword ptr [esp+298h+var_28C], edi
.text:00405AD1                 mov     [esp+298h+Format], edx
.text:00405AD4                 mov     [esp+298h+AccessMode], esi
.text:00405AD8                 call    sub_407800
.text:00405ADD                 jmp     loc_404C20
.text:00405AE2 ; ---------------------------------------------------------------------------
.text:00405AE2
.text:00405AE2 loc_405AE2:                             ; CODE XREF: sub_404B50+F0B↑j
.text:00405AE2                 mov     edi, [ebp+FileName]
.text:00405AE5                 mov     [esp+298h+Format], edi ; LPCSTR
.text:00405AE8                 call    sub_418730
.text:00405AED                 test    eax, eax
.text:00405AEF                 jnz     short loc_405AFD
.text:00405AF1
.text:00405AF1 loc_405AF1:                             ; CODE XREF: sub_404B50+FB5↓j
.text:00405AF1                 mov     byte ptr [ebp+var_22B], 1
.text:00405AF8                 jmp     loc_404E4E
.text:00405AFD ; ---------------------------------------------------------------------------
.text:00405AFD
.text:00405AFD loc_405AFD:                             ; CODE XREF: sub_404B50+F9F↑j
.text:00405AFD                 call    _errno
.text:00405B02                 cmp     dword ptr [eax], 2
.text:00405B05                 jz      short loc_405AF1
.text:00405B07                 mov     [esp+298h+Format], 1 ; int
.text:00405B0E                 mov     ecx, [ebp+FileName]
.text:00405B11                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00405B15                 call    sub_40AEE0
.text:00405B1A                 mov     [esp+298h+Format], 0 ; int
.text:00405B21                 mov     ebx, [ebp+Str2]
.text:00405B24                 mov     esi, eax
.text:00405B26                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00405B2A                 call    sub_40AEE0
.text:00405B2F                 mov     [esp+298h+Format], offset aInterDeviceMov ; "inter-device move failed: %s to %s; una"...
.text:00405B36                 mov     edi, eax
.text:00405B38                 call    ds:libintl_gettext
.text:00405B3E                 mov     ebx, eax
.text:00405B40                 call    _errno
.text:00405B45                 mov     [esp+298h+var_288], esi
.text:00405B49                 mov     dword ptr [esp+298h+var_28C], edi
.text:00405B4D                 jmp     loc_405AA7
.text:00405B52 ; ---------------------------------------------------------------------------
.text:00405B52
.text:00405B52 loc_405B52:                             ; CODE XREF: sub_404B50+EE1↑j
.text:00405B52                                         ; sub_404B50+EEF↑j ...
.text:00405B52                 mov     [esp+298h+Format], 1 ; int
.text:00405B59                 mov     ecx, ds:dword_420070
.text:00405B5F                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00405B63                 call    sub_40AEE0
.text:00405B68                 mov     [esp+298h+Format], 0 ; int
.text:00405B6F                 mov     edx, ds:dword_420060
.text:00405B75                 mov     ebx, eax
.text:00405B77                 mov     [esp+298h+AccessMode], edx ; char *
.text:00405B7B                 call    sub_40AEE0
.text:00405B80                 mov     [esp+298h+Format], offset aCannotMoveSToA ; "cannot move %s to a subdirectory of its"...
.text:00405B87                 mov     edi, eax
.text:00405B89                 call    ds:libintl_gettext
.text:00405B8F                 mov     [esp+298h+var_288], ebx
.text:00405B93                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00405B97                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00405B9F                 mov     [esp+298h+Size], eax ; char *
.text:00405BA3                 mov     [esp+298h+Format], 0 ; Code
.text:00405BAA                 call    sub_4143B0
.text:00405BAF                 mov     ebx, [ebp+arg_20]
.text:00405BB2                 mov     byte ptr [ebx], 1
.text:00405BB5                 jmp     loc_4059C0
.text:00405BB5 ; ---------------------------------------------------------------------------
.text:00405BBA                 align 10h
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: sub_404B50+2A0↑j
.text:00405BC0                                         ; sub_404B50+2B9↑j ...
.text:00405BC0                 mov     ebx, [ebp+var_78]
.text:00405BC3                 mov     ecx, [ebp+var_74]
.text:00405BC6                 mov     edx, [ebp+var_80]
.text:00405BC9                 mov     dword ptr [esp+298h+var_28C], ebx ; int
.text:00405BCD                 mov     esi, [ebp+var_7C]
.text:00405BD0                 mov     eax, [ebp+FileName]
.text:00405BD3                 mov     [esp+298h+var_288], ecx ; int
.text:00405BD7                 mov     [esp+298h+AccessMode], edx ; int
.text:00405BDB                 mov     [esp+298h+Size], esi ; int
.text:00405BDF                 mov     [esp+298h+Format], eax ; char *
.text:00405BE2                 call    sub_4079B0
.text:00405BE7
.text:00405BE7 loc_405BE7:                             ; CODE XREF: sub_404B50+1271↓j
.text:00405BE7                 mov     [ebp+lpExistingFileName], eax
.text:00405BED                 mov     eax, [ebp+lpExistingFileName]
.text:00405BF3                 test    eax, eax
.text:00405BF5                 jz      loc_404E41
.text:00405BFB                 and     [ebp+var_248], 0F000h
.text:00405C05                 cmp     [ebp+var_248], 4000h
.text:00405C0F                 jz      loc_405CC2
.text:00405C15                 mov     esi, [ebp+FileName]
.text:00405C18                 mov     edx, [ebp+lpExistingFileName]
.text:00405C1E                 mov     [esp+298h+AccessMode], esi ; lpNewFileName
.text:00405C22                 mov     [esp+298h+Format], edx ; lpExistingFileName
.text:00405C25                 call    sub_416790
.text:00405C2A                 test    eax, eax
.text:00405C2C                 setnz   bl
.text:00405C2F                 test    bl, bl
.text:00405C31                 jz      loc_4059C0
.text:00405C37                 call    _errno
.text:00405C3C                 cmp     dword ptr [eax], 11h
.text:00405C3F                 jz      short loc_405C80
.text:00405C41
.text:00405C41 loc_405C41:                             ; CODE XREF: sub_404B50+1159↓j
.text:00405C41                 test    bl, bl
.text:00405C43                 jz      loc_4059C0
.text:00405C49                 mov     [esp+298h+Format], 1 ; int
.text:00405C50                 mov     esi, [ebp+lpExistingFileName]
.text:00405C56                 mov     [esp+298h+AccessMode], esi ; char *
.text:00405C5A                 call    sub_40AEE0
.text:00405C5F                 mov     [esp+298h+Format], 0 ; int
.text:00405C66                 mov     edx, [ebp+FileName]
.text:00405C69                 mov     edi, eax
.text:00405C6B                 mov     [esp+298h+AccessMode], edx ; char *
.text:00405C6F                 call    sub_40AEE0
.text:00405C74                 mov     [esp+298h+Format], offset aCannotCreateHa ; "cannot create hard link %s to %s"
.text:00405C7B                 jmp     loc_4051E1
.text:00405C80 ; ---------------------------------------------------------------------------
.text:00405C80
.text:00405C80 loc_405C80:                             ; CODE XREF: sub_404B50+10EF↑j
.text:00405C80                 mov     edi, [ebp+FileName]
.text:00405C83                 mov     [esp+298h+Format], edi ; LPCSTR
.text:00405C86                 call    sub_418730
.text:00405C8B                 test    eax, eax
.text:00405C8D                 jnz     short loc_405CAB
.text:00405C8F                 mov     eax, [ebp+FileName]
.text:00405C92                 mov     ecx, [ebp+lpExistingFileName]
.text:00405C98                 mov     [esp+298h+AccessMode], eax ; lpNewFileName
.text:00405C9C                 mov     [esp+298h+Format], ecx ; lpExistingFileName
.text:00405C9F                 call    sub_416790
.text:00405CA4                 test    eax, eax
.text:00405CA6                 setnz   bl
.text:00405CA9                 jmp     short loc_405C41
.text:00405CAB ; ---------------------------------------------------------------------------
.text:00405CAB
.text:00405CAB loc_405CAB:                             ; CODE XREF: sub_404B50+113D↑j
.text:00405CAB                 mov     ebx, [ebp+FileName]
.text:00405CAE                 mov     [esp+298h+Format], ebx ; char *
.text:00405CB1                 call    sub_40AF10
.text:00405CB6                 mov     [esp+298h+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:00405CBD                 jmp     loc_405653
.text:00405CC2 ; ---------------------------------------------------------------------------
.text:00405CC2
.text:00405CC2 loc_405CC2:                             ; CODE XREF: sub_404B50+10BF↑j
.text:00405CC2                 mov     esi, [ebp+lpExistingFileName]
.text:00405CC8                 mov     edi, [ebp+Str2]
.text:00405CCB                 mov     [esp+298h+AccessMode], esi ; void *
.text:00405CCF                 mov     [esp+298h+Format], edi ; void *
.text:00405CD2                 call    sub_407B90
.text:00405CD7                 test    al, al
.text:00405CD9                 jz      short loc_405D43
.text:00405CDB                 mov     [esp+298h+Format], 1 ; int
.text:00405CE2                 mov     esi, ds:dword_420070
.text:00405CE8                 mov     [esp+298h+AccessMode], esi ; char *
.text:00405CEC                 call    sub_40AEE0
.text:00405CF1                 mov     [esp+298h+Format], 0 ; int
.text:00405CF8                 mov     edx, ds:dword_420060
.text:00405CFE                 mov     ebx, eax
.text:00405D00                 mov     [esp+298h+AccessMode], edx ; char *
.text:00405D04                 call    sub_40AEE0
.text:00405D09                 mov     [esp+298h+Format], offset aCannotCopyADir ; "cannot copy a directory, %s, into itsel"...
.text:00405D10                 mov     edi, eax
.text:00405D12                 call    ds:libintl_gettext
.text:00405D18                 mov     [esp+298h+var_288], ebx
.text:00405D1C                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:00405D20                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:00405D28                 mov     [esp+298h+Size], eax ; char *
.text:00405D2C                 mov     [esp+298h+Format], 0 ; Code
.text:00405D33                 call    sub_4143B0
.text:00405D38                 mov     ecx, [ebp+arg_20]
.text:00405D3B                 mov     byte ptr [ecx], 1
.text:00405D3E                 jmp     loc_40520E
.text:00405D43 ; ---------------------------------------------------------------------------
.text:00405D43
.text:00405D43 loc_405D43:                             ; CODE XREF: sub_404B50+1189↑j
.text:00405D43                 mov     [esp+298h+Format], 1 ; int
.text:00405D4A                 mov     eax, [ebp+lpExistingFileName]
.text:00405D50                 mov     [esp+298h+AccessMode], eax ; char *
.text:00405D54                 call    sub_40AEE0
.text:00405D59                 mov     [esp+298h+Format], 0 ; int
.text:00405D60                 mov     ecx, [ebp+FileName]
.text:00405D63                 mov     ebx, eax
.text:00405D65                 mov     [esp+298h+AccessMode], ecx ; char *
.text:00405D69                 call    sub_40AEE0
.text:00405D6E                 mov     [esp+298h+Format], offset aWillNotCreateH ; "will not create hard link %s to directo"...
.text:00405D75                 mov     edi, eax
.text:00405D77                 call    ds:libintl_gettext
.text:00405D7D                 mov     [esp+298h+var_288], ebx
.text:00405D81                 mov     dword ptr [esp+298h+var_28C], edi
.text:00405D85                 mov     [esp+298h+AccessMode], 0
.text:00405D8D                 mov     [esp+298h+Size], eax
.text:00405D91                 jmp     loc_405202
.text:00405D96 ; ---------------------------------------------------------------------------
.text:00405D96
.text:00405D96 loc_405D96:                             ; CODE XREF: sub_404B50+2AD↑j
.text:00405D96                 mov     edx, [ebp+arg_18]
.text:00405D99                 mov     eax, [edx+8]
.text:00405D9C                 jmp     loc_404E0F
.text:00405DA1 ; ---------------------------------------------------------------------------
.text:00405DA1
.text:00405DA1 loc_405DA1:                             ; CODE XREF: sub_404B50+28D↑j
.text:00405DA1                 mov     ebx, [ebp+var_78]
.text:00405DA4                 mov     ecx, [ebp+var_74]
.text:00405DA7                 mov     edx, [ebp+var_80]
.text:00405DAA                 mov     [esp+298h+Size], ebx
.text:00405DAE                 mov     esi, [ebp+var_7C]
.text:00405DB1                 mov     dword ptr [esp+298h+var_28C], ecx
.text:00405DB5                 mov     [esp+298h+Format], edx
.text:00405DB8                 mov     [esp+298h+AccessMode], esi
.text:00405DBC                 call    sub_407960
.text:00405DC1                 jmp     loc_405BE7
.text:00405DC6 ; ---------------------------------------------------------------------------
.text:00405DC6
.text:00405DC6 loc_405DC6:                             ; CODE XREF: sub_404B50+269↑j
.text:00405DC6                 mov     [esp+298h+Format], 0Ah ; Ch
.text:00405DCD                 mov     ecx, ds:_iob
.text:00405DD3                 add     ecx, 20h ; ' '
.text:00405DD6                 mov     [esp+298h+AccessMode], ecx ; File
.text:00405DDA                 call    _flsbuf
.text:00405DDF                 jmp     loc_404DD0
.text:00405DE4 ; ---------------------------------------------------------------------------
.text:00405DE4
.text:00405DE4 loc_405DE4:                             ; CODE XREF: sub_404B50+254↑j
.text:00405DE4                 mov     ecx, [ebp+lpFileName]
.text:00405DEA                 mov     [esp+298h+Format], ecx ; char *
.text:00405DED                 call    sub_40AF10
.text:00405DF2                 mov     [esp+298h+Format], offset aBackupS ; " (backup: %s)"
.text:00405DF9                 mov     esi, eax
.text:00405DFB                 call    ds:libintl_gettext
.text:00405E01                 mov     [esp+298h+AccessMode], esi
.text:00405E05                 mov     [esp+298h+Format], eax ; Format
.text:00405E08                 call    printf
.text:00405E0D                 jmp     loc_404DAA
.text:00405E12 ; ---------------------------------------------------------------------------
.text:00405E12
.text:00405E12 loc_405E12:                             ; CODE XREF: sub_404B50+1CC↑j
.text:00405E12                 lea     esi, [ebp+var_22B+2]
.text:00405E18                 mov     ebx, [ebp+arg_18]
.text:00405E1B                 lea     ecx, [ebp+var_22B+1]
.text:00405E21                 mov     [esp+298h+var_280], esi ; int
.text:00405E25                 lea     edx, [ebp+var_F8]
.text:00405E2B                 mov     esi, [ebp+FileName]
.text:00405E2E                 mov     [esp+298h+var_284], ecx ; int
.text:00405E32                 lea     eax, [ebp+var_88]
.text:00405E38                 mov     ecx, [ebp+Str2]
.text:00405E3B                 mov     [esp+298h+var_288], ebx ; int
.text:00405E3F                 mov     dword ptr [esp+298h+var_28C], edx ; int
.text:00405E43                 mov     [esp+298h+Size], esi ; char *
.text:00405E47                 mov     [esp+298h+AccessMode], eax ; int
.text:00405E4B                 mov     [esp+298h+Format], ecx ; char *
.text:00405E4E                 call    sub_407100
.text:00405E53                 cmp     byte ptr [ebp+var_22B+2], 0
.text:00405E5A                 mov     bl, al
.text:00405E5C                 jnz     loc_406576
.text:00405E62
.text:00405E62 loc_405E62:                             ; CODE XREF: sub_404B50+1A37↓j
.text:00405E62                                         ; sub_404B50+1A40↓j
.text:00405E62                 cmp     byte ptr [ebp+var_22B+1], 0
.text:00405E69                 jnz     loc_4059C0
.text:00405E6F                 test    bl, bl
.text:00405E71                 jz      loc_406542
.text:00405E77                 mov     ecx, [ebp+var_F8]
.text:00405E7D                 and     ecx, 0F000h
.text:00405E83                 cmp     ecx, 4000h
.text:00405E89                 jz      loc_405F12
.text:00405E8F                 mov     esi, [ebp+var_248]
.text:00405E95                 and     esi, 0F000h
.text:00405E9B                 cmp     esi, 4000h
.text:00405EA1                 jz      loc_40650E
.text:00405EA7                 cmp     [ebp+var_241], 0
.text:00405EAE                 jz      short loc_405F12
.text:00405EB0                 mov     edx, [ebp+arg_18]
.text:00405EB3                 cmp     dword ptr [edx], 3
.text:00405EB6                 jz      short loc_405F12
.text:00405EB8                 mov     ecx, [edx+34h]
.text:00405EBB                 test    ecx, ecx
.text:00405EBD                 jz      short loc_405F12
.text:00405EBF                 mov     [esp+298h+Format], ecx
.text:00405EC2                 mov     edx, [ebp+FileName]
.text:00405EC5                 mov     esi, [ebp+var_F0]
.text:00405ECB                 mov     ebx, [ebp+var_EC]
.text:00405ED1                 mov     [ebp+var_138], edx
.text:00405ED7                 mov     edx, [ebp+var_E8]
.text:00405EDD                 mov     [ebp+var_130], esi
.text:00405EE3                 mov     esi, [ebp+var_E4]
.text:00405EE9                 mov     [ebp+var_12C], ebx
.text:00405EEF                 lea     ebx, [ebp+var_138]
.text:00405EF5                 mov     [ebp+var_128], edx
.text:00405EFB                 mov     [ebp+var_124], esi
.text:00405F01                 mov     [esp+298h+AccessMode], ebx
.text:00405F05                 call    sub_40BAE0
.text:00405F0A                 test    eax, eax
.text:00405F0C                 jnz     loc_4064DA
.text:00405F12
.text:00405F12 loc_405F12:                             ; CODE XREF: sub_404B50+1339↑j
.text:00405F12                                         ; sub_404B50+135E↑j ...
.text:00405F12                 mov     ebx, [ebp+var_248]
.text:00405F18                 and     ebx, 0F000h
.text:00405F1E                 cmp     ebx, 4000h
.text:00405F24                 jz      loc_405FC3
.text:00405F2A                 mov     esi, [ebp+var_F8]
.text:00405F30                 and     esi, 0F000h
.text:00405F36                 cmp     esi, 4000h
.text:00405F3C                 jz      loc_4064C3
.text:00405F42                 mov     edx, [ebp+arg_18]
.text:00405F45                 cmp     byte ptr [edx+30h], 0
.text:00405F49                 jz      short loc_405FC3
.text:00405F4B                 xor     ecx, ecx
.text:00405F4D                 cmp     byte ptr [edx+1Fh], 0
.text:00405F51                 mov     dword ptr [ebp+var_25C], ecx
.text:00405F57                 jz      short loc_405F86
.text:00405F59                 cmp     byte ptr [edx+14h], 0
.text:00405F5D                 jz      short loc_405F7B
.text:00405F5F                 mov     ebx, [ebp+var_E4]
.text:00405F65                 mov     ecx, [ebp+var_E8]
.text:00405F6B                 mov     eax, [ebp+var_78]
.text:00405F6E                 mov     edx, [ebp+var_74]
.text:00405F71                 mov     esi, ebx
.text:00405F73                 xor     eax, ecx
.text:00405F75                 xor     esi, edx
.text:00405F77                 or      esi, eax
.text:00405F79                 jz      short loc_405F86
.text:00405F7B
.text:00405F7B loc_405F7B:                             ; CODE XREF: sub_404B50+140D↑j
.text:00405F7B                 mov     eax, 1
.text:00405F80                 mov     dword ptr [ebp+var_25C], eax
.text:00405F86
.text:00405F86 loc_405F86:                             ; CODE XREF: sub_404B50+1407↑j
.text:00405F86                                         ; sub_404B50+1429↑j
.text:00405F86                 mov     eax, dword ptr [ebp+var_25C]
.text:00405F8C                 lea     edx, [ebp+var_88]
.text:00405F92                 mov     ebx, [ebp+FileName]
.text:00405F95                 mov     [esp+298h+Size], edx ; int
.text:00405F99                 lea     esi, [ebp+var_F8]
.text:00405F9F                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:00405FA3                 mov     [esp+298h+AccessMode], esi ; int
.text:00405FA7                 mov     [esp+298h+Format], ebx ; char *
.text:00405FAA                 call    sub_407E30
.text:00405FAF                 test    eax, eax
.text:00405FB1                 js      short loc_405FC3
.text:00405FB3
.text:00405FB3 loc_405FB3:                             ; CODE XREF: sub_404B50+1805↓j
.text:00405FB3                                         ; sub_404B50+1895↓j
.text:00405FB3                 test    edi, edi
.text:00405FB5                 jz      loc_4059C0
.text:00405FBB                 mov     byte ptr [edi], 1
.text:00405FBE                 jmp     loc_4059C0
.text:00405FC3 ; ---------------------------------------------------------------------------
.text:00405FC3
.text:00405FC3 loc_405FC3:                             ; CODE XREF: sub_404B50+13D4↑j
.text:00405FC3                                         ; sub_404B50+13F9↑j ...
.text:00405FC3                 mov     ecx, [ebp+var_248]
.text:00405FC9                 and     ecx, 0F000h
.text:00405FCF                 cmp     ecx, 4000h
.text:00405FD5                 jz      loc_4063A0
.text:00405FDB                 mov     edx, [ebp+arg_18]
.text:00405FDE                 movzx   eax, byte ptr [edx+14h]
.text:00405FE2                 test    al, al
.text:00405FE4                 jz      loc_4063F6
.text:00405FEA                 mov     edx, [edx+10h]
.text:00405FED                 cmp     edx, 2
.text:00405FF0                 jz      loc_4063B8
.text:00405FF6
.text:00405FF6 loc_405FF6:                             ; CODE XREF: sub_404B50+187A↓j
.text:00405FF6                                         ; sub_404B50+18A1↓j
.text:00405FF6                 cmp     edx, 3
.text:00405FF9                 jz      loc_4062E4
.text:00405FFF                 cmp     edx, 4
.text:00406002                 jz      loc_4062A2
.text:00406008
.text:00406008 loc_406008:                             ; CODE XREF: sub_404B50+17FF↓j
.text:00406008                 mov     esi, [ebp+arg_18]
.text:0040600B                 movzx   eax, byte ptr [esi+14h]
.text:0040600F
.text:0040600F loc_40600F:                             ; CODE XREF: sub_404B50+1857↓j
.text:0040600F                                         ; sub_404B50+18B8↓j
.text:0040600F                 mov     edx, [ebp+var_F8]
.text:00406015
.text:00406015 loc_406015:                             ; CODE XREF: sub_404B50+1863↓j
.text:00406015                 test    al, al
.text:00406017                 jz      short loc_406045
.text:00406019                 mov     ebx, edx
.text:0040601B                 and     ebx, 0F000h
.text:00406021                 cmp     ebx, 4000h
.text:00406027                 jz      loc_406273
.text:0040602D                 mov     esi, [ebp+var_88]
.text:00406033                 and     esi, 0F000h
.text:00406039                 cmp     esi, 4000h
.text:0040603F                 jz      loc_406217
.text:00406045
.text:00406045 loc_406045:                             ; CODE XREF: sub_404B50+14C7↑j
.text:00406045                 mov     ebx, [ebp+arg_18]
.text:00406048                 mov     ecx, [ebx]
.text:0040604A                 test    ecx, ecx
.text:0040604C                 jz      loc_406190
.text:00406052                 mov     esi, edx
.text:00406054                 and     esi, 0F000h
.text:0040605A                 cmp     esi, 4000h
.text:00406060                 jz      loc_406190
.text:00406066                 mov     [esp+298h+AccessMode], ecx ; int
.text:0040606A                 mov     ecx, [ebp+FileName]
.text:0040606D                 mov     [esp+298h+Format], ecx ; char *
.text:00406070                 call    sub_409AD0
.text:00406075                 mov     esi, eax
.text:00406077                 mov     eax, [ebp+Str2]
.text:0040607A                 mov     [esp+298h+Format], esi ; Str1
.text:0040607D                 mov     [esp+298h+AccessMode], eax ; Str2
.text:00406081                 call    strcmp
.text:00406086                 test    eax, eax
.text:00406088                 jnz     short loc_406100
.text:0040608A                 mov     edi, [ebp+arg_18]
.text:0040608D                 cmp     byte ptr [edi+14h], 0
.text:00406091                 jz      short loc_4060F7
.text:00406093                 mov     [esp+298h+Format], offset aBackingUpSWoul ; "backing up %s would destroy source;  %s"...
.text:0040609A
.text:0040609A loc_40609A:                             ; CODE XREF: sub_404B50+15AE↓j
.text:0040609A                 call    ds:libintl_gettext
.text:004060A0                 mov     [esp+298h+Format], 1 ; int
.text:004060A7                 mov     ebx, [ebp+Str2]
.text:004060AA                 mov     edi, eax
.text:004060AC                 mov     [esp+298h+AccessMode], ebx ; char *
.text:004060B0                 call    sub_40AEE0
.text:004060B5                 mov     [esp+298h+Format], 0 ; int
.text:004060BC                 mov     edx, [ebp+FileName]
.text:004060BF                 mov     ebx, eax
.text:004060C1                 mov     [esp+298h+AccessMode], edx ; char *
.text:004060C5                 call    sub_40AEE0
.text:004060CA                 mov     dword ptr [esp+298h+var_28C], eax ; char
.text:004060CE                 mov     [esp+298h+var_288], ebx
.text:004060D2                 mov     [esp+298h+Size], edi ; char *
.text:004060D6                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:004060DE                 mov     [esp+298h+Format], 0 ; Code
.text:004060E5                 call    sub_4143B0
.text:004060EA                 mov     [esp+298h+Format], esi ; Block
.text:004060ED                 call    free
.text:004060F2                 jmp     loc_404C20
.text:004060F7 ; ---------------------------------------------------------------------------
.text:004060F7
.text:004060F7 loc_4060F7:                             ; CODE XREF: sub_404B50+1541↑j
.text:004060F7                 mov     [esp+298h+Format], offset aBackingUpSWoul_0 ; "backing up %s would destroy source;  %s"...
.text:004060FE                 jmp     short loc_40609A
.text:00406100 ; ---------------------------------------------------------------------------
.text:00406100
.text:00406100 loc_406100:                             ; CODE XREF: sub_404B50+1538↑j
.text:00406100                 mov     [esp+298h+Format], esi ; Size
.text:00406103                 call    strlen
.text:00406108                 lea     ecx, [eax+1]
.text:0040610B                 add     eax, 10h
.text:0040610E                 and     eax, 0FFFFFFF0h
.text:00406111                 call    __alloca
.text:00406116                 mov     [esp+298h+Size], ecx ; Size
.text:0040611A                 lea     ebx, [esp+298h+var_27C]
.text:0040611E                 mov     [esp+298h+AccessMode], esi ; Src
.text:00406122                 mov     [esp+298h+Format], ebx ; void *
.text:00406125                 call    memcpy
.text:0040612A                 mov     [ebp+lpFileName], eax
.text:00406130                 mov     [esp+298h+Format], esi ; Block
.text:00406133                 call    free
.text:00406138                 mov     ecx, [ebp+lpFileName]
.text:0040613E                 mov     esi, [ebp+FileName]
.text:00406141                 mov     [esp+298h+AccessMode], ecx ; lpFileName
.text:00406145                 mov     [esp+298h+Format], esi ; LPCSTR
.text:00406148                 call    sub_418A60
.text:0040614D                 test    eax, eax
.text:0040614F                 jnz     short loc_40615D
.text:00406151                 mov     [ebp+var_251], 1
.text:00406158                 jmp     loc_404D34
.text:0040615D ; ---------------------------------------------------------------------------
.text:0040615D
.text:0040615D loc_40615D:                             ; CODE XREF: sub_404B50+15FF↑j
.text:0040615D                 call    _errno
.text:00406162                 cmp     dword ptr [eax], 2
.text:00406165                 jz      short loc_40617E
.text:00406167                 mov     eax, [ebp+FileName]
.text:0040616A                 mov     [esp+298h+Format], eax ; char *
.text:0040616D                 call    sub_40AF10
.text:00406172                 mov     [esp+298h+Format], offset aCannotBackupS ; "cannot backup %s"
.text:00406179                 jmp     loc_404BF7
.text:0040617E ; ---------------------------------------------------------------------------
.text:0040617E
.text:0040617E loc_40617E:                             ; CODE XREF: sub_404B50+1615↑j
.text:0040617E                 xor     edx, edx
.text:00406180                 mov     [ebp+lpFileName], edx
.text:00406186                 jmp     loc_404D34
.text:00406186 ; ---------------------------------------------------------------------------
.text:0040618B                 align 10h
.text:00406190
.text:00406190 loc_406190:                             ; CODE XREF: sub_404B50+14FC↑j
.text:00406190                                         ; sub_404B50+1510↑j
.text:00406190                 and     edx, 0F000h
.text:00406196                 cmp     edx, 4000h
.text:0040619C                 jz      loc_404D40
.text:004061A2                 mov     eax, [ebp+arg_18]
.text:004061A5                 cmp     byte ptr [eax+0Ch], 0
.text:004061A9                 jnz     short loc_4061DF
.text:004061AB                 cmp     byte ptr [eax+20h], 0
.text:004061AF                 jz      short loc_4061BA
.text:004061B1                 cmp     [ebp+var_E0], 1
.text:004061B8                 ja      short loc_4061DF
.text:004061BA
.text:004061BA loc_4061BA:                             ; CODE XREF: sub_404B50+165F↑j
.text:004061BA                 mov     esi, [ebp+arg_18]
.text:004061BD                 cmp     dword ptr [esi+8], 2
.text:004061C1                 jnz     loc_404D40
.text:004061C7                 mov     ebx, [ebp+var_88]
.text:004061CD                 and     ebx, 0F000h
.text:004061D3                 cmp     ebx, 8000h
.text:004061D9                 jz      loc_404D40
.text:004061DF
.text:004061DF loc_4061DF:                             ; CODE XREF: sub_404B50+1659↑j
.text:004061DF                                         ; sub_404B50+1668↑j
.text:004061DF                 mov     eax, [ebp+FileName]
.text:004061E2                 mov     [esp+298h+Format], eax ; LPCSTR
.text:004061E5                 call    sub_418730
.text:004061EA                 test    eax, eax
.text:004061EC                 jz      loc_404D34
.text:004061F2                 call    _errno
.text:004061F7                 cmp     dword ptr [eax], 2
.text:004061FA                 jz      loc_404D34
.text:00406200                 mov     edi, [ebp+FileName]
.text:00406203
.text:00406203 loc_406203:                             ; CODE XREF: sub_404B50+1A48↓j
.text:00406203                 mov     [esp+298h+Format], edi ; char *
.text:00406206                 call    sub_40AF10
.text:0040620B                 mov     [esp+298h+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:00406212                 jmp     loc_404BF7
.text:00406217 ; ---------------------------------------------------------------------------
.text:00406217
.text:00406217 loc_406217:                             ; CODE XREF: sub_404B50+14EF↑j
.text:00406217                 mov     [esp+298h+Format], 0 ; int
.text:0040621E                 mov     edx, [ebp+FileName]
.text:00406221                 mov     [esp+298h+AccessMode], edx ; char *
.text:00406225                 call    sub_40AEE0
.text:0040622A                 mov     [esp+298h+Format], 0 ; int
.text:00406231                 mov     esi, eax
.text:00406233                 mov     eax, [ebp+Str2]
.text:00406236                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040623A                 call    sub_40AEE0
.text:0040623F                 mov     [esp+298h+Format], offset aCannotMoveDire ; "cannot move directory onto non-director"...
.text:00406246
.text:00406246 loc_406246:                             ; CODE XREF: sub_404B50+19B9↓j
.text:00406246                                         ; sub_404B50+19ED↓j ...
.text:00406246                 mov     ebx, eax
.text:00406248                 call    ds:libintl_gettext
.text:0040624E                 mov     [esp+298h+var_288], esi
.text:00406252                 mov     dword ptr [esp+298h+var_28C], ebx ; char
.text:00406256                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:0040625E                 mov     [esp+298h+Size], eax ; char *
.text:00406262                 mov     [esp+298h+Format], 0 ; Code
.text:00406269                 call    sub_4143B0
.text:0040626E                 jmp     loc_404C20
.text:00406273 ; ---------------------------------------------------------------------------
.text:00406273
.text:00406273 loc_406273:                             ; CODE XREF: sub_404B50+14D7↑j
.text:00406273                 mov     edi, [ebp+FileName]
.text:00406276                 mov     [esp+298h+Format], edi ; char *
.text:00406279                 call    sub_40AF10
.text:0040627E                 mov     [esp+298h+Format], offset aCannotOverwrit ; "cannot overwrite directory %s"
.text:00406285
.text:00406285 loc_406285:                             ; CODE XREF: sub_404B50+1985↓j
.text:00406285                                         ; sub_404B50+1AC1↓j
.text:00406285                 mov     ebx, eax
.text:00406287                 call    ds:libintl_gettext
.text:0040628D                 mov     dword ptr [esp+298h+var_28C], ebx
.text:00406291                 mov     [esp+298h+AccessMode], 0
.text:00406299                 mov     [esp+298h+Size], eax
.text:0040629D                 jmp     loc_404C14
.text:004062A2 ; ---------------------------------------------------------------------------
.text:004062A2
.text:004062A2 loc_4062A2:                             ; CODE XREF: sub_404B50+14B2↑j
.text:004062A2                 mov     ecx, [ebp+arg_18]
.text:004062A5                 cmp     byte ptr [ecx+32h], 0
.text:004062A9                 jz      loc_4063A0
.text:004062AF                 mov     edx, [ebp+var_F8]
.text:004062B5                 mov     ebx, edx
.text:004062B7                 and     ebx, 0F000h
.text:004062BD                 cmp     ebx, 0A000h
.text:004062C3                 jz      loc_4063AC
.text:004062C9                 mov     [esp+298h+AccessMode], 2 ; int
.text:004062D1                 mov     esi, [ebp+FileName]
.text:004062D4                 mov     [esp+298h+Format], esi ; LPCSTR
.text:004062D7                 call    sub_414650
.text:004062DC                 test    eax, eax
.text:004062DE                 jz      loc_4063A0
.text:004062E4
.text:004062E4 loc_4062E4:                             ; CODE XREF: sub_404B50+14A9↑j
.text:004062E4                 mov     [esp+298h+AccessMode], 2 ; int
.text:004062EC                 mov     edx, [ebp+FileName]
.text:004062EF                 mov     [esp+298h+Format], edx ; LPCSTR
.text:004062F2                 call    sub_414650
.text:004062F7                 test    eax, eax
.text:004062F9                 jz      short loc_40635A
.text:004062FB                 mov     edx, [ebp+FileName]
.text:004062FE                 mov     [esp+298h+Format], edx ; char *
.text:00406301                 call    sub_40AF10
.text:00406306                 mov     [esp+298h+Format], offset aSOverwriteSOve ; "%s: overwrite %s, overriding mode %04lo"...
.text:0040630D                 mov     esi, eax
.text:0040630F                 call    ds:libintl_gettext
.text:00406315                 mov     dword ptr [esp+298h+var_28C], esi
.text:00406319                 mov     ecx, [ebp+var_F8]
.text:0040631F                 mov     ebx, ds:dword_420750
.text:00406325                 mov     [esp+298h+AccessMode], eax ; Format
.text:00406329                 and     ecx, 0FFFh
.text:0040632F                 mov     [esp+298h+var_288], ecx
.text:00406333                 mov     ecx, ds:_iob
.text:00406339                 mov     [esp+298h+Size], ebx
.text:0040633D                 add     ecx, 40h ; '@'
.text:00406340                 mov     [esp+298h+Format], ecx ; Stream
.text:00406343                 call    fprintf
.text:00406348
.text:00406348 loc_406348:                             ; CODE XREF: sub_404B50+1847↓j
.text:00406348                 call    sub_40AFE0
.text:0040634D                 test    al, al
.text:0040634F                 jnz     loc_406008
.text:00406355                 jmp     loc_405FB3
.text:0040635A ; ---------------------------------------------------------------------------
.text:0040635A
.text:0040635A loc_40635A:                             ; CODE XREF: sub_404B50+17A9↑j
.text:0040635A                 mov     eax, [ebp+FileName]
.text:0040635D                 mov     [esp+298h+Format], eax ; char *
.text:00406360                 call    sub_40AF10
.text:00406365                 mov     [esp+298h+Format], offset aSOverwriteS ; "%s: overwrite %s? "
.text:0040636C                 mov     esi, eax
.text:0040636E                 call    ds:libintl_gettext
.text:00406374                 mov     dword ptr [esp+298h+var_28C], esi
.text:00406378                 mov     ebx, ds:_iob
.text:0040637E                 mov     esi, ds:dword_420750
.text:00406384                 mov     [esp+298h+AccessMode], eax ; Format
.text:00406388                 add     ebx, 40h ; '@'
.text:0040638B                 mov     [esp+298h+Size], esi
.text:0040638F                 mov     [esp+298h+Format], ebx ; Stream
.text:00406392                 call    fprintf
.text:00406397                 jmp     short loc_406348
.text:00406397 ; ---------------------------------------------------------------------------
.text:00406399                 align 10h
.text:004063A0
.text:004063A0 loc_4063A0:                             ; CODE XREF: sub_404B50+1485↑j
.text:004063A0                                         ; sub_404B50+1759↑j ...
.text:004063A0                 mov     ecx, [ebp+arg_18]
.text:004063A3                 movzx   eax, byte ptr [ecx+14h]
.text:004063A7                 jmp     loc_40600F
.text:004063AC ; ---------------------------------------------------------------------------
.text:004063AC
.text:004063AC loc_4063AC:                             ; CODE XREF: sub_404B50+1773↑j
.text:004063AC                 mov     ebx, [ebp+arg_18]
.text:004063AF                 movzx   eax, byte ptr [ebx+14h]
.text:004063B3                 jmp     loc_406015
.text:004063B8 ; ---------------------------------------------------------------------------
.text:004063B8
.text:004063B8 loc_4063B8:                             ; CODE XREF: sub_404B50+14A0↑j
.text:004063B8                 mov     esi, [ebp+var_F8]
.text:004063BE                 and     esi, 0F000h
.text:004063C4                 cmp     esi, 0A000h
.text:004063CA                 jz      loc_405FF6
.text:004063D0                 mov     [esp+298h+AccessMode], 2 ; int
.text:004063D8                 mov     edx, [ebp+FileName]
.text:004063DB                 mov     [esp+298h+Format], edx ; LPCSTR
.text:004063DE                 call    sub_414650
.text:004063E3                 test    eax, eax
.text:004063E5                 jnz     loc_405FB3
.text:004063EB                 mov     eax, [ebp+arg_18]
.text:004063EE                 mov     edx, [eax+10h]
.text:004063F1                 jmp     loc_405FF6
.text:004063F6 ; ---------------------------------------------------------------------------
.text:004063F6
.text:004063F6 loc_4063F6:                             ; CODE XREF: sub_404B50+1494↑j
.text:004063F6                 mov     ebx, [ebp+arg_18]
.text:004063F9                 mov     edx, [ebx+10h]
.text:004063FC                 cmp     edx, 2
.text:004063FF                 jz      loc_4059C0
.text:00406405                 cmp     edx, 3
.text:00406408                 jnz     loc_40600F
.text:0040640E                 mov     [esp+298h+AccessMode], 2 ; int
.text:00406416                 mov     ecx, [ebp+FileName]
.text:00406419                 mov     [esp+298h+Format], ecx ; LPCSTR
.text:0040641C                 call    sub_414650
.text:00406421                 test    eax, eax
.text:00406423                 jz      short loc_406484
.text:00406425                 mov     eax, [ebp+FileName]
.text:00406428                 mov     [esp+298h+Format], eax ; char *
.text:0040642B                 call    sub_40AF10
.text:00406430                 mov     [esp+298h+Format], offset aSOverwriteSOve ; "%s: overwrite %s, overriding mode %04lo"...
.text:00406437                 mov     esi, eax
.text:00406439                 call    ds:libintl_gettext
.text:0040643F                 mov     dword ptr [esp+298h+var_28C], esi
.text:00406443                 mov     ebx, [ebp+var_F8]
.text:00406449                 mov     edx, ds:_iob
.text:0040644F                 mov     esi, ds:dword_420750
.text:00406455                 and     ebx, 0FFFh
.text:0040645B                 add     edx, 40h ; '@'
.text:0040645E                 mov     [esp+298h+var_288], ebx
.text:00406462                 mov     [esp+298h+Size], esi
.text:00406466                 mov     [esp+298h+AccessMode], eax ; Format
.text:0040646A                 mov     [esp+298h+Format], edx ; Stream
.text:0040646D                 call    fprintf
.text:00406472
.text:00406472 loc_406472:                             ; CODE XREF: sub_404B50+1971↓j
.text:00406472                 call    sub_40AFE0
.text:00406477                 test    al, al
.text:00406479                 jnz     loc_4063A0
.text:0040647F                 jmp     loc_4059C0
.text:00406484 ; ---------------------------------------------------------------------------
.text:00406484
.text:00406484 loc_406484:                             ; CODE XREF: sub_404B50+18D3↑j
.text:00406484                 mov     edx, [ebp+FileName]
.text:00406487                 mov     [esp+298h+Format], edx ; char *
.text:0040648A                 call    sub_40AF10
.text:0040648F                 mov     [esp+298h+Format], offset aSOverwriteS ; "%s: overwrite %s? "
.text:00406496                 mov     esi, eax
.text:00406498                 call    ds:libintl_gettext
.text:0040649E                 mov     dword ptr [esp+298h+var_28C], esi
.text:004064A2                 mov     ecx, ds:_iob
.text:004064A8                 mov     esi, ds:dword_420750
.text:004064AE                 mov     [esp+298h+AccessMode], eax ; Format
.text:004064B2                 add     ecx, 40h ; '@'
.text:004064B5                 mov     [esp+298h+Size], esi
.text:004064B9                 mov     [esp+298h+Format], ecx ; Stream
.text:004064BC                 call    fprintf
.text:004064C1                 jmp     short loc_406472
.text:004064C3 ; ---------------------------------------------------------------------------
.text:004064C3
.text:004064C3 loc_4064C3:                             ; CODE XREF: sub_404B50+13EC↑j
.text:004064C3                 mov     edx, [ebp+FileName]
.text:004064C6                 mov     [esp+298h+Format], edx ; char *
.text:004064C9                 call    sub_40AF10
.text:004064CE                 mov     [esp+298h+Format], offset aCannotOverwrit_0 ; "cannot overwrite directory %s with non-"...
.text:004064D5                 jmp     loc_406285
.text:004064DA ; ---------------------------------------------------------------------------
.text:004064DA
.text:004064DA loc_4064DA:                             ; CODE XREF: sub_404B50+13BC↑j
.text:004064DA                 mov     [esp+298h+Format], 1 ; int
.text:004064E1                 mov     ecx, [ebp+Str2]
.text:004064E4                 mov     [esp+298h+AccessMode], ecx ; char *
.text:004064E8                 call    sub_40AEE0
.text:004064ED                 mov     [esp+298h+Format], 0 ; int
.text:004064F4                 mov     edi, [ebp+FileName]
.text:004064F7                 mov     esi, eax
.text:004064F9                 mov     [esp+298h+AccessMode], edi ; char *
.text:004064FD                 call    sub_40AEE0
.text:00406502                 mov     [esp+298h+Format], offset aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:00406509                 jmp     loc_406246
.text:0040650E ; ---------------------------------------------------------------------------
.text:0040650E
.text:0040650E loc_40650E:                             ; CODE XREF: sub_404B50+1351↑j
.text:0040650E                 mov     [esp+298h+Format], 1 ; int
.text:00406515                 mov     eax, [ebp+Str2]
.text:00406518                 mov     [esp+298h+AccessMode], eax ; char *
.text:0040651C                 call    sub_40AEE0
.text:00406521                 mov     [esp+298h+Format], 0 ; int
.text:00406528                 mov     edi, [ebp+FileName]
.text:0040652B                 mov     esi, eax
.text:0040652D                 mov     [esp+298h+AccessMode], edi ; char *
.text:00406531                 call    sub_40AEE0
.text:00406536                 mov     [esp+298h+Format], offset aCannotOverwrit_1 ; "cannot overwrite non-directory %s with "...
.text:0040653D                 jmp     loc_406246
.text:00406542 ; ---------------------------------------------------------------------------
.text:00406542
.text:00406542 loc_406542:                             ; CODE XREF: sub_404B50+1321↑j
.text:00406542                 mov     [esp+298h+Format], 1 ; int
.text:00406549                 mov     edx, [ebp+FileName]
.text:0040654C                 mov     [esp+298h+AccessMode], edx ; char *
.text:00406550                 call    sub_40AEE0
.text:00406555                 mov     [esp+298h+Format], 0 ; int
.text:0040655C                 mov     ebx, [ebp+Str2]
.text:0040655F                 mov     esi, eax
.text:00406561                 mov     [esp+298h+AccessMode], ebx ; char *
.text:00406565                 call    sub_40AEE0
.text:0040656A                 mov     [esp+298h+Format], offset aSAndSAreTheSam ; "%s and %s are the same file"
.text:00406571                 jmp     loc_406246
.text:00406576 ; ---------------------------------------------------------------------------
.text:00406576
.text:00406576 loc_406576:                             ; CODE XREF: sub_404B50+130C↑j
.text:00406576                 mov     eax, [ebp+Str2]
.text:00406579                 mov     [esp+298h+Format], eax ; LPCSTR
.text:0040657C                 call    sub_418730
.text:00406581                 test    eax, eax
.text:00406583                 jnz     short loc_406595
.text:00406585                 test    edi, edi
.text:00406587                 jz      loc_405E62
.text:0040658D                 mov     byte ptr [edi], 1
.text:00406590                 jmp     loc_405E62
.text:00406595 ; ---------------------------------------------------------------------------
.text:00406595
.text:00406595 loc_406595:                             ; CODE XREF: sub_404B50+1A33↑j
.text:00406595                 mov     edi, [ebp+Str2]
.text:00406598                 jmp     loc_406203
.text:0040659D ; ---------------------------------------------------------------------------
.text:0040659D
.text:0040659D loc_40659D:                             ; CODE XREF: sub_404B50+1AF↑j
.text:0040659D                 mov     ecx, [ebp+FileName]
.text:004065A0                 lea     esi, [ebp+var_F8]
.text:004065A6                 mov     [esp+298h+AccessMode], esi
.text:004065AA                 mov     [esp+298h+Format], ecx
.text:004065AD                 call    sub_4168B0
.text:004065B2                 jmp     loc_404D1A
.text:004065B7 ; ---------------------------------------------------------------------------
.text:004065B7
.text:004065B7 loc_4065B7:                             ; CODE XREF: sub_404B50+173↑j
.text:004065B7                 mov     eax, [ebp+Str2]
.text:004065BA                 mov     [esp+298h+Format], eax ; char *
.text:004065BD                 call    sub_40AF10
.text:004065C2                 mov     [esp+298h+Format], offset aWarningSourceF ; "warning: source file %s specified more "...
.text:004065C9                 mov     edi, eax
.text:004065CB                 call    ds:libintl_gettext
.text:004065D1                 mov     dword ptr [esp+298h+var_28C], edi ; char
.text:004065D5                 mov     [esp+298h+AccessMode], 0 ; ErrorMessage
.text:004065DD                 mov     [esp+298h+Format], 0 ; Code
.text:004065E4                 mov     [esp+298h+Size], eax ; char *
.text:004065E8                 call    sub_4143B0
.text:004065ED                 jmp     loc_4059C0
.text:004065F2 ; ---------------------------------------------------------------------------
.text:004065F2
.text:004065F2 loc_4065F2:                             ; CODE XREF: sub_404B50+FB↑j
.text:004065F2                 mov     edx, [ebp+arg_18]
.text:004065F5                 cmp     byte ptr [edx+22h], 0
.text:004065F9                 jnz     loc_404C51
.text:004065FF                 mov     esi, [ebp+Str2]
.text:00406602                 mov     [esp+298h+Format], esi ; char *
.text:00406605                 call    sub_40AF10
.text:0040660A                 mov     [esp+298h+Format], offset aOmittingDirect ; "omitting directory %s"
.text:00406611                 jmp     loc_406285
.text:00406616 ; ---------------------------------------------------------------------------
.text:00406616
.text:00406616 loc_406616:                             ; CODE XREF: sub_404B50+76↑j
.text:00406616                 mov     ebx, [ebp+Str2]
.text:00406619                 lea     eax, [ebp+var_88]
.text:0040661F                 mov     [esp+298h+AccessMode], eax
.text:00406623                 mov     [esp+298h+Format], ebx
.text:00406626                 call    sub_4168B0
.text:0040662B                 jmp     loc_404BE1
.text:0040662B sub_404B50      endp
.text:0040662B
.text:00406630
.text:00406630 ; =============== S U B R O U T I N E =======================================
.text:00406630
.text:00406630
.text:00406630 sub_406630      proc near               ; CODE XREF: sub_403840+363↑p
.text:00406630
.text:00406630 var_1C          = dword ptr -1Ch
.text:00406630 var_18          = dword ptr -18h
.text:00406630 var_14          = dword ptr -14h
.text:00406630 var_10          = dword ptr -10h
.text:00406630 var_C           = dword ptr -0Ch
.text:00406630 arg_0           = dword ptr  4
.text:00406630
.text:00406630                 sub     esp, 1Ch
.text:00406633                 mov     [esp+1Ch+var_C], offset sub_4076E0
.text:0040663B                 mov     [esp+1Ch+var_10], offset sub_407650
.text:00406643                 mov     [esp+1Ch+var_14], offset sub_4075C0
.text:0040664B                 mov     [esp+1Ch+var_18], 0
.text:00406653                 mov     [esp+1Ch+var_1C], 3Dh ; '='
.text:0040665A                 call    sub_40B140
.text:0040665F                 mov     ecx, [esp+1Ch+arg_0]
.text:00406663                 mov     [ecx+34h], eax
.text:00406666                 add     esp, 1Ch
.text:00406669                 retn
.text:00406669 sub_406630      endp
.text:00406669
.text:00406669 ; ---------------------------------------------------------------------------
.text:0040666A                 align 10h
.text:00406670
.text:00406670 ; =============== S U B R O U T I N E =======================================
.text:00406670
.text:00406670
.text:00406670 sub_406670      proc near               ; CODE XREF: sub_403840+36E↑p
.text:00406670
.text:00406670 var_1C          = dword ptr -1Ch
.text:00406670 var_18          = dword ptr -18h
.text:00406670 var_14          = dword ptr -14h
.text:00406670 var_10          = dword ptr -10h
.text:00406670 var_C           = dword ptr -0Ch
.text:00406670 arg_0           = dword ptr  4
.text:00406670
.text:00406670                 sub     esp, 1Ch
.text:00406673                 mov     [esp+1Ch+var_C], offset sub_4076E0
.text:0040667B                 mov     [esp+1Ch+var_10], offset sub_407650
.text:00406683                 mov     [esp+1Ch+var_14], offset sub_407620
.text:0040668B                 mov     [esp+1Ch+var_18], 0
.text:00406693                 mov     [esp+1Ch+var_1C], 3Dh ; '='
.text:0040669A                 call    sub_40B140
.text:0040669F                 mov     ecx, [esp+1Ch+arg_0]
.text:004066A3                 mov     [ecx+38h], eax
.text:004066A6                 add     esp, 1Ch
.text:004066A9                 retn
.text:004066A9 sub_406670      endp
.text:004066A9
.text:004066A9 ; ---------------------------------------------------------------------------
.text:004066AA                 align 20h
.text:004066C0 aCoreutils530Sr db '../../coreutils-5.3.0-src/src/copy.c',0
.text:004066C0                                         ; DATA XREF: sub_406770+A0↓o
.text:004066C0                                         ; sub_406770+BC↓o ...
.text:004066E5                 align 20h
.text:00406700 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.text:00406700                                         ; DATA XREF: sub_406770+A8↓o
.text:00406724                 align 20h
.text:00406740 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.text:00406740                                         ; DATA XREF: sub_406770+C4↓o
.text:00406764 aCoNull         db 'co != NULL',0       ; DATA XREF: sub_406770+DD↓o
.text:0040676F                 align 10h
.text:00406770
.text:00406770 ; =============== S U B R O U T I N E =======================================
.text:00406770
.text:00406770
.text:00406770 ; int __cdecl sub_406770(char *, char *, char, int, int, int)
.text:00406770 sub_406770      proc near               ; CODE XREF: sub_403840+228↑p
.text:00406770                                         ; sub_403840+3D5↑p
.text:00406770
.text:00406770 Str2            = dword ptr -3Ch
.text:00406770 FileName        = dword ptr -38h
.text:00406770 var_34          = dword ptr -34h
.text:00406770 var_30          = dword ptr -30h
.text:00406770 var_2C          = dword ptr -2Ch
.text:00406770 var_28          = dword ptr -28h
.text:00406770 var_24          = dword ptr -24h
.text:00406770 var_20          = byte ptr -20h
.text:00406770 var_1C          = dword ptr -1Ch
.text:00406770 var_18          = dword ptr -18h
.text:00406770 var_8           = dword ptr -8
.text:00406770 var_4           = dword ptr -4
.text:00406770 arg_0           = dword ptr  4
.text:00406770 arg_4           = dword ptr  8
.text:00406770 arg_8           = byte ptr  0Ch
.text:00406770 arg_C           = dword ptr  10h
.text:00406770 arg_10          = dword ptr  14h
.text:00406770 arg_14          = dword ptr  18h
.text:00406770
.text:00406770                 sub     esp, 3Ch
.text:00406773                 mov     edx, [esp+3Ch+arg_C]
.text:00406777                 mov     [esp+3Ch+var_8], ebx
.text:0040677B                 mov     ebx, [esp+3Ch+arg_4]
.text:0040677F                 test    edx, edx
.text:00406781                 mov     [esp+3Ch+var_4], esi
.text:00406785                 mov     esi, [esp+3Ch+arg_0]
.text:00406789                 movzx   ecx, [esp+3Ch+arg_8]
.text:0040678E                 jz      loc_40683D
.text:00406794                 cmp     dword ptr [edx], 3
.text:00406797                 ja      loc_406824
.text:0040679D                 mov     eax, [edx+28h]
.text:004067A0                 dec     eax
.text:004067A1                 cmp     eax, 2
.text:004067A4                 ja      short loc_406808
.text:004067A6                 mov     [esp+3Ch+var_24], edx ; int
.text:004067AA                 mov     eax, [esp+3Ch+arg_14]
.text:004067AE                 movzx   edx, cl
.text:004067B1                 mov     [esp+3Ch+FileName], ebx ; FileName
.text:004067B5                 mov     [esp+3Ch+var_18], eax ; int
.text:004067B9                 mov     eax, [esp+3Ch+arg_10]
.text:004067BD                 mov     [esp+3Ch+Str2], esi ; Str2
.text:004067C0                 mov     ds:dword_420060, esi
.text:004067C6                 mov     ds:dword_420070, ebx
.text:004067CC                 mov     [esp+3Ch+var_1C], eax ; int
.text:004067D0                 mov     dword ptr [esp+3Ch+var_20], 1 ; char
.text:004067D8                 mov     [esp+3Ch+var_28], 0 ; int
.text:004067E0                 mov     [esp+3Ch+var_30], 0 ; int
.text:004067E8                 mov     [esp+3Ch+var_2C], 0 ; int
.text:004067F0                 mov     [esp+3Ch+var_34], edx ; int
.text:004067F4                 call    sub_404B50
.text:004067F9                 mov     ebx, [esp+3Ch+var_8]
.text:004067FD                 movzx   eax, al
.text:00406800                 mov     esi, [esp+3Ch+var_4]
.text:00406804                 add     esp, 3Ch
.text:00406807                 retn
.text:00406808 ; ---------------------------------------------------------------------------
.text:00406808
.text:00406808 loc_406808:                             ; CODE XREF: sub_406770+34↑j
.text:00406808                 mov     [esp+3Ch+var_34], 67Ah
.text:00406810                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:00406818                 mov     [esp+3Ch+Str2], offset aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:0040681F
.text:0040681F loc_40681F:                             ; CODE XREF: sub_406770+CB↓j
.text:0040681F                                         ; sub_406770+E4↓j
.text:0040681F                 call    _assert
.text:00406824 ; ---------------------------------------------------------------------------
.text:00406824
.text:00406824 loc_406824:                             ; CODE XREF: sub_406770+27↑j
.text:00406824                 mov     [esp+3Ch+var_34], 679h
.text:0040682C                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:00406834                 mov     [esp+3Ch+Str2], offset aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:0040683B                 jmp     short loc_40681F
.text:0040683D ; ---------------------------------------------------------------------------
.text:0040683D
.text:0040683D loc_40683D:                             ; CODE XREF: sub_406770+1E↑j
.text:0040683D                 mov     [esp+3Ch+var_34], 678h
.text:00406845                 mov     [esp+3Ch+FileName], offset aCoreutils530Sr ; "../../coreutils-5.3.0-src/src/copy.c"
.text:0040684D                 mov     [esp+3Ch+Str2], offset aCoNull ; "co != NULL"
.text:00406854                 jmp     short loc_40681F
.text:00406854 sub_406770      endp
.text:00406854
.text:00406854 ; ---------------------------------------------------------------------------
.text:00406856 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: sub_406870+195↓o
.text:00406867                 align 10h
.text:00406870
.text:00406870 ; =============== S U B R O U T I N E =======================================
.text:00406870
.text:00406870
.text:00406870 ; int __cdecl sub_406870(char *, int, char, int, int, int, int)
.text:00406870 sub_406870      proc near               ; CODE XREF: sub_404B50+D9C↑p
.text:00406870
.text:00406870 Block           = dword ptr -9Ch
.text:00406870 ErrorMessage    = dword ptr -98h
.text:00406870 var_94          = dword ptr -94h
.text:00406870 var_90          = byte ptr -90h
.text:00406870 var_8C          = dword ptr -8Ch
.text:00406870 var_88          = dword ptr -88h
.text:00406870 var_84          = dword ptr -84h
.text:00406870 var_80          = byte ptr -80h
.text:00406870 var_7C          = dword ptr -7Ch
.text:00406870 var_78          = dword ptr -78h
.text:00406870 var_60          = byte ptr -60h
.text:00406870 var_5F          = byte ptr -5Fh
.text:00406870 var_5E          = byte ptr -5Eh
.text:00406870 var_5D          = dword ptr -5Dh
.text:00406870 var_54          = dword ptr -54h
.text:00406870 arg_0           = dword ptr  4
.text:00406870 arg_4           = dword ptr  8
.text:00406870 arg_8           = byte ptr  0Ch
.text:00406870 arg_C           = dword ptr  10h
.text:00406870 arg_10          = dword ptr  14h
.text:00406870 arg_14          = dword ptr  18h
.text:00406870 arg_18          = dword ptr  1Ch
.text:00406870
.text:00406870                 push    ebp
.text:00406871                 mov     ecx, 0Fh
.text:00406876                 push    edi
.text:00406877                 push    esi
.text:00406878                 push    ebx
.text:00406879                 sub     esp, 8Ch
.text:0040687F                 mov     ebx, [esp+9Ch+arg_14]
.text:00406886                 movzx   edx, [esp+9Ch+arg_8]
.text:0040688E                 lea     edi, [esp+9Ch+var_5D+1]
.text:00406892                 cld
.text:00406893                 mov     esi, ebx
.text:00406895                 rep movsd
.text:00406897                 mov     [esp+9Ch+var_5E], dl
.text:0040689B                 mov     edx, [esp+9Ch+arg_0]
.text:004068A2                 mov     [esp+9Ch+var_5F], 1
.text:004068A7                 mov     [esp+9Ch+Block], edx
.text:004068AA                 call    loc_40C090
.text:004068AF                 test    eax, eax
.text:004068B1                 mov     ebp, eax
.text:004068B3                 jz      loc_4069F6
.text:004068B9                 cmp     dword ptr [ebx+8], 3
.text:004068BD                 jz      loc_4069E9
.text:004068C3
.text:004068C3 loc_4068C3:                             ; CODE XREF: sub_406870+181↓j
.text:004068C3                 cmp     byte ptr [ebp+0], 0
.text:004068C7                 mov     ebx, ebp
.text:004068C9                 jz      loc_4069D1
.text:004068CF                 nop
.text:004068D0
.text:004068D0 loc_4068D0:                             ; CODE XREF: sub_406870+15B↓j
.text:004068D0                 mov     [esp+9Ch+var_94], 0 ; int
.text:004068D8                 mov     edi, [esp+9Ch+arg_0]
.text:004068DF                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:004068E3                 mov     [esp+9Ch+Block], edi ; int
.text:004068E6                 call    sub_40AAE0
.text:004068EB                 mov     [esp+9Ch+var_94], 0 ; int
.text:004068F3                 mov     edi, eax
.text:004068F5                 mov     eax, [esp+9Ch+arg_4]
.text:004068FC                 mov     [esp+9Ch+ErrorMessage], ebx ; char *
.text:00406900                 mov     [esp+9Ch+Block], eax ; int
.text:00406903                 call    sub_40AAE0
.text:00406908                 mov     [esp+9Ch+var_78], 0 ; int
.text:00406910                 mov     esi, eax
.text:00406912                 lea     ecx, [esp+9Ch+var_5D+1]
.text:00406916                 mov     [esp+9Ch+var_84], ecx ; int
.text:0040691A                 mov     eax, [esp+9Ch+arg_10]
.text:00406921                 lea     edx, [esp+9Ch+var_5D]
.text:00406925                 mov     [esp+9Ch+var_7C], edx ; int
.text:00406929                 mov     ecx, [esp+9Ch+arg_C]
.text:00406930                 mov     dword ptr [esp+9Ch+var_80], 0 ; char
.text:00406938                 mov     [esp+9Ch+var_88], eax ; int
.text:0040693C                 mov     edx, [ecx+14h]
.text:0040693F                 mov     [esp+9Ch+var_60], 0
.text:00406944                 mov     eax, [ecx+10h]
.text:00406947                 mov     [esp+9Ch+ErrorMessage], esi ; FileName
.text:0040694B                 mov     [esp+9Ch+var_8C], edx ; int
.text:0040694F                 movzx   edx, [esp+9Ch+var_5E]
.text:00406954                 mov     dword ptr [esp+9Ch+var_90], eax ; int
.text:00406958                 mov     [esp+9Ch+Block], edi ; Str2
.text:0040695B                 mov     [esp+9Ch+var_94], edx ; int
.text:0040695F                 call    sub_404B50
.text:00406964                 test    al, al
.text:00406966                 jz      short loc_406980
.text:00406968                 cmp     [esp+9Ch+var_5F], 0
.text:0040696D                 jz      short loc_406980
.text:0040696F                 mov     [esp+9Ch+var_60], 1
.text:00406974                 lea     esi, [esi+0]
.text:0040697A                 lea     edi, [edi+0]
.text:00406980
.text:00406980 loc_406980:                             ; CODE XREF: sub_406870+F6↑j
.text:00406980                                         ; sub_406870+FD↑j
.text:00406980                 movzx   ecx, [esp+9Ch+var_60]
.text:00406985                 xor     eax, eax
.text:00406987                 cmp     byte ptr [esp+9Ch+var_5D], 0
.text:0040698C                 mov     [esp+9Ch+var_5F], cl
.text:00406990                 jnz     short loc_40699E
.text:00406992                 mov     ecx, [esp+9Ch+arg_18]
.text:00406999                 cmp     byte ptr [ecx], 0
.text:0040699C                 jz      short loc_4069A0
.text:0040699E
.text:0040699E loc_40699E:                             ; CODE XREF: sub_406870+120↑j
.text:0040699E                 mov     al, 1
.text:004069A0
.text:004069A0 loc_4069A0:                             ; CODE XREF: sub_406870+12C↑j
.text:004069A0                 mov     edx, [esp+9Ch+arg_18]
.text:004069A7                 mov     [edx], al
.text:004069A9                 mov     [esp+9Ch+Block], esi ; Block
.text:004069AC                 call    free
.text:004069B1                 mov     [esp+9Ch+Block], edi ; Block
.text:004069B4                 call    free
.text:004069B9                 mov     [esp+9Ch+Block], ebx ; Str
.text:004069BC                 call    strlen
.text:004069C1                 lea     esi, [eax+ebx]
.text:004069C4                 lea     ebx, [esi+1]
.text:004069C7                 cmp     byte ptr [esi+1], 0
.text:004069CB                 jnz     loc_4068D0
.text:004069D1
.text:004069D1 loc_4069D1:                             ; CODE XREF: sub_406870+59↑j
.text:004069D1                 mov     [esp+9Ch+Block], ebp ; Block
.text:004069D4                 call    free
.text:004069D9                 movzx   eax, [esp+9Ch+var_5F]
.text:004069DE
.text:004069DE loc_4069DE:                             ; CODE XREF: sub_406870+1C7↓j
.text:004069DE                 add     esp, 8Ch
.text:004069E4                 pop     ebx
.text:004069E5                 pop     esi
.text:004069E6                 pop     edi
.text:004069E7                 pop     ebp
.text:004069E8                 retn
.text:004069E9 ; ---------------------------------------------------------------------------
.text:004069E9
.text:004069E9 loc_4069E9:                             ; CODE XREF: sub_406870+4D↑j
.text:004069E9                 mov     [esp+9Ch+var_54], 2
.text:004069F1                 jmp     loc_4068C3
.text:004069F6 ; ---------------------------------------------------------------------------
.text:004069F6
.text:004069F6 loc_4069F6:                             ; CODE XREF: sub_406870+43↑j
.text:004069F6                 mov     eax, [esp+9Ch+arg_0]
.text:004069FD                 mov     [esp+9Ch+Block], eax ; char *
.text:00406A00                 call    sub_40AF10
.text:00406A05                 mov     [esp+9Ch+Block], offset aCannotAccessS ; "cannot access %s"
.text:00406A0C                 mov     ebx, eax
.text:00406A0E                 call    ds:libintl_gettext
.text:00406A14                 mov     esi, eax
.text:00406A16                 call    _errno
.text:00406A1B                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00406A1F                 mov     [esp+9Ch+var_94], esi ; char *
.text:00406A23                 mov     ecx, [eax]
.text:00406A25                 mov     [esp+9Ch+Block], 0 ; Code
.text:00406A2C                 mov     [esp+9Ch+ErrorMessage], ecx ; ErrorMessage
.text:00406A30                 call    sub_4143B0
.text:00406A35                 xor     eax, eax
.text:00406A37                 jmp     short loc_4069DE
.text:00406A37 sub_406870      endp
.text:00406A37
.text:00406A37 ; ---------------------------------------------------------------------------
.text:00406A39                 align 10h
.text:00406A40 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.text:00406A40                                         ; DATA XREF: sub_406B00+BD↓o
.text:00406A78 aClosingS       db 'closing %s',0       ; DATA XREF: sub_406B00+11C↓o
.text:00406A78                                         ; sub_406B00+338↓o
.text:00406A83 aWritingS       db 'writing %s',0       ; DATA XREF: sub_406B00+2E0↓o
.text:00406A8E aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: sub_406B00+39E↓o
.text:00406A9E byte_406A9E     db 0                    ; DATA XREF: sub_406B00+3C1↓o
.text:00406A9F aReadingS       db 'reading %s',0       ; DATA XREF: sub_406B00+41E↓o
.text:00406AAA aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: sub_406B00+4D0↓o
.text:00406AAA                                         ; sub_406B00+5A7↓o
.text:00406ABA aCannotCreateRe db 'cannot create regular file %s',0
.text:00406ABA                                         ; DATA XREF: sub_406B00+533↓o
.text:00406AD8 aCannotOpenSFor db 'cannot open %s for reading',0
.text:00406AD8                                         ; DATA XREF: sub_406B00+5C2↓o
.text:00406AF3                 align 10h
.text:00406B00
.text:00406B00 ; =============== S U B R O U T I N E =======================================
.text:00406B00
.text:00406B00
.text:00406B00 ; int __cdecl sub_406B00(char *, LPCSTR, int, __int16, int, int)
.text:00406B00 sub_406B00      proc near               ; CODE XREF: sub_404B50+8D1↑p
.text:00406B00
.text:00406B00 FileName        = dword ptr -12Ch
.text:00406B00 OpenFlag        = dword ptr -128h
.text:00406B00 MaxCharCount    = dword ptr -124h
.text:00406B00 Origin          = dword ptr -120h
.text:00406B00 var_116         = byte ptr -116h
.text:00406B00 var_115         = byte ptr -115h
.text:00406B00 var_114         = dword ptr -114h
.text:00406B00 var_110         = dword ptr -110h
.text:00406B00 var_105         = byte ptr -105h
.text:00406B00 FileHandle      = dword ptr -104h
.text:00406B00 var_100         = dword ptr -100h
.text:00406B00 var_FC          = dword ptr -0FCh
.text:00406B00 var_F4          = dword ptr -0F4h
.text:00406B00 var_F0          = dword ptr -0F0h
.text:00406B00 var_EC          = dword ptr -0ECh
.text:00406B00 var_E8          = dword ptr -0E8h
.text:00406B00 var_8C          = dword ptr -8Ch
.text:00406B00 var_5C          = dword ptr -5Ch
.text:00406B00 var_58          = dword ptr -58h
.text:00406B00 var_3C          = dword ptr -3Ch
.text:00406B00 var_34          = dword ptr -34h
.text:00406B00 var_30          = dword ptr -30h
.text:00406B00 arg_0           = dword ptr  4
.text:00406B00 arg_4           = dword ptr  8
.text:00406B00 arg_8           = dword ptr  0Ch
.text:00406B00 arg_C           = word ptr  10h
.text:00406B00 arg_10          = dword ptr  14h
.text:00406B00 arg_14          = dword ptr  18h
.text:00406B00
.text:00406B00                 push    ebp
.text:00406B01                 push    edi
.text:00406B02                 push    esi
.text:00406B03                 push    ebx
.text:00406B04                 sub     esp, 11Ch
.text:00406B0A                 mov     edx, [esp+12Ch+arg_0]
.text:00406B11                 movzx   edi, [esp+12Ch+arg_C]
.text:00406B19                 mov     [esp+12Ch+var_105], 1
.text:00406B1E                 mov     ebp, [esp+12Ch+arg_14]
.text:00406B25                 mov     [esp+12Ch+var_114], 0
.text:00406B2D                 mov     [esp+12Ch+var_110], 0
.text:00406B35                 mov     [esp+12Ch+var_115], 0
.text:00406B3A                 mov     [esp+12Ch+var_116], 0
.text:00406B3F                 mov     [esp+12Ch+OpenFlag], 8000h ; OpenFlag
.text:00406B47                 mov     [esp+12Ch+FileName], edx ; FileName
.text:00406B4A                 call    _open
.text:00406B4F                 mov     [esp+12Ch+FileHandle], eax
.text:00406B53                 test    eax, eax
.text:00406B55                 js      loc_4070B3
.text:00406B5B                 mov     ecx, [esp+12Ch+arg_0]
.text:00406B62                 lea     esi, [esp+12Ch+var_FC]
.text:00406B66                 mov     [esp+12Ch+OpenFlag], esi ; int
.text:00406B6A                 mov     [esp+12Ch+FileName], ecx ; char *
.text:00406B6D                 call    sub_417BA0
.text:00406B72                 test    eax, eax
.text:00406B74                 jnz     loc_407098
.text:00406B7A                 mov     ebx, [ebp+0Ch]
.text:00406B7D                 mov     ecx, [ebp+8]
.text:00406B80                 mov     eax, [esp+12Ch+var_F4]
.text:00406B84                 mov     edx, [esp+12Ch+var_F0]
.text:00406B88                 mov     esi, ebx
.text:00406B8A                 xor     eax, ecx
.text:00406B8C                 xor     esi, edx
.text:00406B8E                 or      esi, eax
.text:00406B90                 jnz     short loc_406BAE
.text:00406B92                 mov     edx, [ebp+14h]
.text:00406B95                 mov     esi, [ebp+10h]
.text:00406B98                 mov     ecx, [esp+12Ch+var_E8]
.text:00406B9C                 mov     ebp, [esp+12Ch+var_EC]
.text:00406BA0                 mov     eax, edx
.text:00406BA2                 xor     eax, ecx
.text:00406BA4                 xor     ebp, esi
.text:00406BA6                 or      eax, ebp
.text:00406BA8                 jz      loc_406C53
.text:00406BAE
.text:00406BAE loc_406BAE:                             ; CODE XREF: sub_406B00+90↑j
.text:00406BAE                 mov     ebx, [esp+12Ch+arg_0]
.text:00406BB5                 mov     [esp+12Ch+FileName], ebx ; char *
.text:00406BB8                 call    sub_40AF10
.text:00406BBD                 mov     [esp+12Ch+FileName], offset aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:00406BC4                 mov     edi, eax
.text:00406BC6                 call    ds:libintl_gettext
.text:00406BCC                 mov     [esp+12Ch+Origin], edi ; char
.text:00406BD0                 mov     [esp+12Ch+OpenFlag], 0 ; ErrorMessage
.text:00406BD8                 mov     [esp+12Ch+MaxCharCount], eax ; char *
.text:00406BDC
.text:00406BDC loc_406BDC:                             ; CODE XREF: sub_406B00+35C↓j
.text:00406BDC                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00406BE3                 call    sub_4143B0
.text:00406BE8                 mov     [esp+12Ch+var_105], 0
.text:00406BED
.text:00406BED loc_406BED:                             ; CODE XREF: sub_406B00+323↓j
.text:00406BED                 mov     ecx, [esp+12Ch+FileHandle]
.text:00406BF1                 mov     [esp+12Ch+FileName], ecx ; FileHandle
.text:00406BF4                 call    _close
.text:00406BF9                 test    eax, eax
.text:00406BFB                 js      short loc_406C0D
.text:00406BFD
.text:00406BFD loc_406BFD:                             ; CODE XREF: sub_406B00+151↓j
.text:00406BFD                 movzx   eax, [esp+12Ch+var_105]
.text:00406C02
.text:00406C02 loc_406C02:                             ; CODE XREF: sub_406B00+5F4↓j
.text:00406C02                 add     esp, 11Ch
.text:00406C08                 pop     ebx
.text:00406C09                 pop     esi
.text:00406C0A                 pop     edi
.text:00406C0B                 pop     ebp
.text:00406C0C                 retn
.text:00406C0D ; ---------------------------------------------------------------------------
.text:00406C0D
.text:00406C0D loc_406C0D:                             ; CODE XREF: sub_406B00+FB↑j
.text:00406C0D                 mov     esi, [esp+12Ch+arg_0]
.text:00406C14                 mov     [esp+12Ch+FileName], esi ; char *
.text:00406C17                 call    sub_40AF10
.text:00406C1C                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:00406C23                 mov     ebx, eax
.text:00406C25                 call    ds:libintl_gettext
.text:00406C2B                 mov     ebp, eax
.text:00406C2D                 call    _errno
.text:00406C32                 mov     [esp+12Ch+Origin], ebx ; char
.text:00406C36                 mov     [esp+12Ch+MaxCharCount], ebp ; char *
.text:00406C3A                 mov     edx, [eax]
.text:00406C3C                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00406C43                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:00406C47                 call    sub_4143B0
.text:00406C4C                 mov     [esp+12Ch+var_105], 0
.text:00406C51                 jmp     short loc_406BFD
.text:00406C53 ; ---------------------------------------------------------------------------
.text:00406C53
.text:00406C53 loc_406C53:                             ; CODE XREF: sub_406B00+A8↑j
.text:00406C53                 mov     ebp, [esp+12Ch+arg_10]
.text:00406C5A                 cmp     byte ptr [ebp+0], 0
.text:00406C5E                 jnz     loc_40705C
.text:00406C64                 mov     [esp+12Ch+MaxCharCount], edi
.text:00406C68                 mov     eax, [esp+12Ch+arg_4]
.text:00406C6F                 mov     [esp+12Ch+OpenFlag], 8201h ; OpenFlag
.text:00406C77                 mov     [esp+12Ch+FileName], eax ; FileName
.text:00406C7A                 call    _open
.text:00406C7F                 mov     [esp+12Ch+var_100], eax
.text:00406C83                 test    eax, eax
.text:00406C85                 js      loc_40700B
.text:00406C8B
.text:00406C8B loc_406C8B:                             ; CODE XREF: sub_406B00+51E↓j
.text:00406C8B                 mov     esi, [esp+12Ch+var_100]
.text:00406C8F                 lea     ebx, [esp+12Ch+var_8C]
.text:00406C96                 mov     [esp+12Ch+OpenFlag], ebx
.text:00406C9A                 mov     [esp+12Ch+FileName], esi
.text:00406C9D                 call    sub_414760
.text:00406CA2                 test    eax, eax
.text:00406CA4                 jnz     loc_406FFF
.text:00406CAA                 mov     edx, [esp+12Ch+var_3C]
.text:00406CB1                 lea     edi, [edx-1]
.text:00406CB4                 mov     ebp, edx
.text:00406CB6                 cmp     edi, 3FFFFFh
.text:00406CBC                 jbe     short loc_406CC3
.text:00406CBE                 mov     ebp, 200h
.text:00406CC3
.text:00406CC3 loc_406CC3:                             ; CODE XREF: sub_406B00+1BC↑j
.text:00406CC3                 mov     esi, [esp+12Ch+arg_8]
.text:00406CCA                 mov     edx, [esi+28h]
.text:00406CCD                 cmp     edx, 3
.text:00406CD0                 jz      loc_406FDC
.text:00406CD6
.text:00406CD6 loc_406CD6:                             ; CODE XREF: sub_406B00+4EF↓j
.text:00406CD6                                         ; sub_406B00+4FA↓j
.text:00406CD6                 cmp     edx, 2
.text:00406CD9                 jz      loc_406F2A
.text:00406CDF
.text:00406CDF loc_406CDF:                             ; CODE XREF: sub_406B00+43D↓j
.text:00406CDF                                         ; sub_406B00+46A↓j ...
.text:00406CDF                 call    sub_418AE0
.text:00406CE4                 mov     ebx, eax
.text:00406CE6                 mov     esi, 4
.text:00406CEB                 mov     edi, eax
.text:00406CED                 mov     ecx, 4
.text:00406CF2                 lea     esi, [esi+0]
.text:00406CF9                 lea     edi, [edi+0]
.text:00406D00
.text:00406D00 loc_406D00:                             ; CODE XREF: sub_406B00+20C↓j
.text:00406D00                 mov     eax, edi
.text:00406D02                 xor     edx, edx
.text:00406D04                 mov     edi, ecx
.text:00406D06                 div     ecx
.text:00406D08                 test    edx, edx
.text:00406D0A                 mov     ecx, edx
.text:00406D0C                 jnz     short loc_406D00
.text:00406D0E                 mov     eax, esi
.text:00406D10                 xor     edx, edx
.text:00406D12                 div     edi
.text:00406D14                 imul    ebx, eax
.text:00406D17                 lea     edx, [ebx+ebp+3]
.text:00406D1B                 mov     [esp+12Ch+FileName], edx ; Size
.text:00406D1E                 call    malloc
.text:00406D23                 lea     ecx, [ebx+eax-1]
.text:00406D27                 xor     edx, edx
.text:00406D29                 mov     eax, ecx
.text:00406D2B                 div     ebx
.text:00406D2D                 mov     edi, ecx
.text:00406D2F                 sub     edi, edx
.text:00406D31                 jmp     short loc_406D40
.text:00406D31 ; ---------------------------------------------------------------------------
.text:00406D33                 align 10h
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: sub_406B00+231↑j
.text:00406D40                                         ; sub_406B00+2A7↓j ...
.text:00406D40                 mov     [esp+12Ch+MaxCharCount], ebp ; MaxCharCount
.text:00406D44                 mov     ebx, [esp+12Ch+FileHandle]
.text:00406D48                 mov     [esp+12Ch+OpenFlag], edi ; DstBuf
.text:00406D4C                 mov     [esp+12Ch+FileName], ebx ; FileHandle
.text:00406D4F                 call    _read
.text:00406D54                 test    eax, eax
.text:00406D56                 mov     ebx, eax
.text:00406D58                 js      loc_406F01
.text:00406D5E                 test    eax, eax
.text:00406D60                 jz      loc_406EAA
.text:00406D66                 cdq
.text:00406D67                 add     [esp+12Ch+var_114], eax
.text:00406D6B                 adc     [esp+12Ch+var_110], edx
.text:00406D6F                 cmp     [esp+12Ch+var_116], 0
.text:00406D74                 jz      short loc_406DB0
.text:00406D76                 mov     byte ptr [ebx+edi], 1
.text:00406D7A                 mov     esi, edi
.text:00406D7C                 lea     esi, [esi+0]
.text:00406D80
.text:00406D80 loc_406D80:                             ; CODE XREF: sub_406B00+287↓j
.text:00406D80                 mov     ecx, [esi]
.text:00406D82                 add     esi, 4
.text:00406D85                 test    ecx, ecx
.text:00406D87                 jz      short loc_406D80
.text:00406D89                 lea     edx, [esi-4]
.text:00406D8C                 lea     esi, [esi+0]
.text:00406D90
.text:00406D90 loc_406D90:                             ; CODE XREF: sub_406B00+296↓j
.text:00406D90                 movzx   ecx, byte ptr [edx]
.text:00406D93                 inc     edx
.text:00406D94                 test    cl, cl
.text:00406D96                 jz      short loc_406D90
.text:00406D98                 lea     ecx, [ebx+edi]
.text:00406D9B                 cmp     edx, ecx
.text:00406D9D                 ja      loc_406E61
.text:00406DA3                 xor     esi, esi
.text:00406DA5
.text:00406DA5 loc_406DA5:                             ; CODE XREF: sub_406B00+389↓j
.text:00406DA5                 test    esi, esi
.text:00406DA7                 jnz     short loc_406D40
.text:00406DA9                 lea     esi, [esi+0]
.text:00406DB0
.text:00406DB0 loc_406DB0:                             ; CODE XREF: sub_406B00+274↑j
.text:00406DB0                 mov     [esp+12Ch+MaxCharCount], ebx
.text:00406DB4                 mov     esi, [esp+12Ch+var_100]
.text:00406DB8                 mov     [esp+12Ch+OpenFlag], edi
.text:00406DBC                 mov     [esp+12Ch+FileName], esi
.text:00406DBF                 call    sub_40C030
.text:00406DC4                 mov     [esp+12Ch+var_115], 0
.text:00406DC9                 cmp     eax, ebx
.text:00406DCB                 jz      loc_406D40
.text:00406DD1
.text:00406DD1 loc_406DD1:                             ; CODE XREF: sub_406B00+3D2↓j
.text:00406DD1                                         ; sub_406B00+3FC↓j
.text:00406DD1                 mov     edx, [esp+12Ch+arg_4]
.text:00406DD8                 mov     [esp+12Ch+FileName], edx ; char *
.text:00406DDB                 call    sub_40AF10
.text:00406DE0                 mov     [esp+12Ch+FileName], offset aWritingS ; "writing %s"
.text:00406DE7
.text:00406DE7 loc_406DE7:                             ; CODE XREF: sub_406B00+3A5↓j
.text:00406DE7                                         ; sub_406B00+425↓j ...
.text:00406DE7                 mov     esi, eax
.text:00406DE9                 call    ds:libintl_gettext
.text:00406DEF                 mov     edi, eax
.text:00406DF1                 call    _errno
.text:00406DF6                 mov     [esp+12Ch+Origin], esi ; char
.text:00406DFA                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:00406DFE                 mov     esi, [eax]
.text:00406E00                 mov     [esp+12Ch+FileName], 0 ; Code
.text:00406E07                 mov     [esp+12Ch+OpenFlag], esi ; ErrorMessage
.text:00406E0B                 call    sub_4143B0
.text:00406E10                 mov     [esp+12Ch+var_105], 0
.text:00406E15
.text:00406E15 loc_406E15:                             ; CODE XREF: sub_406B00+3AF↓j
.text:00406E15                                         ; sub_406B00+3F6↓j
.text:00406E15                 mov     eax, [esp+12Ch+var_100]
.text:00406E19                 mov     [esp+12Ch+FileName], eax ; FileHandle
.text:00406E1C                 call    _close
.text:00406E21                 test    eax, eax
.text:00406E23                 jns     loc_406BED
.text:00406E29                 mov     ebx, [esp+12Ch+arg_4]
.text:00406E30                 mov     [esp+12Ch+FileName], ebx ; char *
.text:00406E33                 call    sub_40AF10
.text:00406E38                 mov     [esp+12Ch+FileName], offset aClosingS ; "closing %s"
.text:00406E3F
.text:00406E3F loc_406E3F:                             ; CODE XREF: sub_406B00+53A↓j
.text:00406E3F                                         ; sub_406B00+593↓j ...
.text:00406E3F                 mov     esi, eax
.text:00406E41                 call    ds:libintl_gettext
.text:00406E47                 mov     edi, eax
.text:00406E49                 call    _errno
.text:00406E4E                 mov     [esp+12Ch+Origin], esi
.text:00406E52                 mov     [esp+12Ch+MaxCharCount], edi
.text:00406E56                 mov     ebp, [eax]
.text:00406E58                 mov     [esp+12Ch+OpenFlag], ebp
.text:00406E5C                 jmp     loc_406BDC
.text:00406E61 ; ---------------------------------------------------------------------------
.text:00406E61
.text:00406E61 loc_406E61:                             ; CODE XREF: sub_406B00+29D↑j
.text:00406E61                 mov     [esp+12Ch+Origin], 1 ; Origin
.text:00406E69                 mov     edx, [esp+12Ch+var_100]
.text:00406E6D                 mov     eax, ebx
.text:00406E6F                 mov     [esp+12Ch+OpenFlag], ebx ; Offset
.text:00406E73                 sar     eax, 1Fh
.text:00406E76                 mov     [esp+12Ch+MaxCharCount], eax
.text:00406E7A                 mov     [esp+12Ch+FileName], edx ; FileHandle
.text:00406E7D                 call    _lseeki64
.text:00406E82                 mov     [esp+12Ch+var_115], 1
.text:00406E87                 test    edx, edx
.text:00406E89                 jns     loc_406DA5
.text:00406E8F                 mov     eax, [esp+12Ch+arg_4]
.text:00406E96                 mov     [esp+12Ch+FileName], eax ; char *
.text:00406E99                 call    sub_40AF10
.text:00406E9E                 mov     [esp+12Ch+FileName], offset aCannotLseekS ; "cannot lseek %s"
.text:00406EA5                 jmp     loc_406DE7
.text:00406EAA ; ---------------------------------------------------------------------------
.text:00406EAA
.text:00406EAA loc_406EAA:                             ; CODE XREF: sub_406B00+260↑j
.text:00406EAA                 cmp     [esp+12Ch+var_115], 0
.text:00406EAF                 jz      loc_406E15
.text:00406EB5                 mov     [esp+12Ch+MaxCharCount], 1
.text:00406EBD                 mov     edi, [esp+12Ch+var_100]
.text:00406EC1                 mov     [esp+12Ch+OpenFlag], offset byte_406A9E
.text:00406EC9                 mov     [esp+12Ch+FileName], edi
.text:00406ECC                 call    sub_40C030
.text:00406ED1                 dec     eax
.text:00406ED2                 jnz     loc_406DD1
.text:00406ED8                 mov     ecx, [esp+12Ch+var_114]
.text:00406EDC                 mov     ebp, [esp+12Ch+var_110]
.text:00406EE0                 mov     ebx, [esp+12Ch+var_100]
.text:00406EE4                 mov     [esp+12Ch+OpenFlag], ecx
.text:00406EE8                 mov     [esp+12Ch+MaxCharCount], ebp
.text:00406EEC                 mov     [esp+12Ch+FileName], ebx
.text:00406EEF                 call    sub_418980
.text:00406EF4                 test    eax, eax
.text:00406EF6                 jns     loc_406E15
.text:00406EFC                 jmp     loc_406DD1
.text:00406F01 ; ---------------------------------------------------------------------------
.text:00406F01
.text:00406F01 loc_406F01:                             ; CODE XREF: sub_406B00+258↑j
.text:00406F01                 call    _errno
.text:00406F06                 cmp     dword ptr [eax], 4
.text:00406F09                 jz      loc_406D40
.text:00406F0F                 mov     ebp, [esp+12Ch+arg_0]
.text:00406F16                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00406F19                 call    sub_40AF10
.text:00406F1E                 mov     [esp+12Ch+FileName], offset aReadingS ; "reading %s"
.text:00406F25                 jmp     loc_406DE7
.text:00406F2A ; ---------------------------------------------------------------------------
.text:00406F2A
.text:00406F2A loc_406F2A:                             ; CODE XREF: sub_406B00+1D9↑j
.text:00406F2A                 mov     edi, [esp+12Ch+var_8C]
.text:00406F31                 and     edi, 0F000h
.text:00406F37                 cmp     edi, 8000h
.text:00406F3D                 jnz     loc_406CDF
.text:00406F43                 mov     [esp+12Ch+OpenFlag], ebx
.text:00406F47                 mov     ebx, [esp+12Ch+FileHandle]
.text:00406F4B                 mov     [esp+12Ch+FileName], ebx
.text:00406F4E                 call    sub_414760
.text:00406F53                 test    eax, eax
.text:00406F55                 jnz     short loc_406FC1
.text:00406F57                 mov     edx, [esp+12Ch+var_8C]
.text:00406F5E                 and     edx, 0F000h
.text:00406F64                 cmp     edx, 8000h
.text:00406F6A                 jnz     loc_406CDF
.text:00406F70                 mov     edx, [esp+12Ch+var_58]
.text:00406F77                 mov     eax, [esp+12Ch+var_5C]
.text:00406F7E                 test    edx, edx
.text:00406F80                 js      short loc_406FB7
.text:00406F82
.text:00406F82 loc_406F82:                             ; CODE XREF: sub_406B00+4BF↓j
.text:00406F82                 mov     esi, [esp+12Ch+var_30]
.text:00406F89                 mov     edi, edx
.text:00406F8B                 mov     ecx, eax
.text:00406F8D                 shrd    ecx, edx, 9
.text:00406F91                 mov     eax, [esp+12Ch+var_34]
.text:00406F98                 sar     edi, 9
.text:00406F9B                 cmp     edi, esi
.text:00406F9D                 jl      loc_406CDF
.text:00406FA3                 jg      short loc_406FAD
.text:00406FA5                 cmp     ecx, eax
.text:00406FA7                 jbe     loc_406CDF
.text:00406FAD
.text:00406FAD loc_406FAD:                             ; CODE XREF: sub_406B00+4A3↑j
.text:00406FAD                 mov     [esp+12Ch+var_116], 1
.text:00406FB2                 jmp     loc_406CDF
.text:00406FB7 ; ---------------------------------------------------------------------------
.text:00406FB7
.text:00406FB7 loc_406FB7:                             ; CODE XREF: sub_406B00+480↑j
.text:00406FB7                 add     eax, 1FFh
.text:00406FBC                 adc     edx, 0
.text:00406FBF                 jmp     short loc_406F82
.text:00406FC1 ; ---------------------------------------------------------------------------
.text:00406FC1
.text:00406FC1 loc_406FC1:                             ; CODE XREF: sub_406B00+455↑j
.text:00406FC1                 mov     ebp, [esp+12Ch+arg_0]
.text:00406FC8                 mov     [esp+12Ch+FileName], ebp ; char *
.text:00406FCB
.text:00406FCB loc_406FCB:                             ; CODE XREF: sub_406B00+509↓j
.text:00406FCB                 call    sub_40AF10
.text:00406FD0                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:00406FD7                 jmp     loc_406DE7
.text:00406FDC ; ---------------------------------------------------------------------------
.text:00406FDC
.text:00406FDC loc_406FDC:                             ; CODE XREF: sub_406B00+1D0↑j
.text:00406FDC                 mov     ecx, [esp+12Ch+var_8C]
.text:00406FE3                 and     ecx, 0F000h
.text:00406FE9                 cmp     ecx, 8000h
.text:00406FEF                 jnz     loc_406CD6
.text:00406FF5                 mov     [esp+12Ch+var_116], 1
.text:00406FFA                 jmp     loc_406CD6
.text:00406FFF ; ---------------------------------------------------------------------------
.text:00406FFF
.text:00406FFF loc_406FFF:                             ; CODE XREF: sub_406B00+1A4↑j
.text:00406FFF                 mov     ecx, [esp+12Ch+arg_4]
.text:00407006                 mov     [esp+12Ch+FileName], ecx
.text:00407009                 jmp     short loc_406FCB
.text:0040700B ; ---------------------------------------------------------------------------
.text:0040700B
.text:0040700B loc_40700B:                             ; CODE XREF: sub_406B00+185↑j
.text:0040700B                 mov     esi, [esp+12Ch+arg_8]
.text:00407012                 cmp     byte ptr [esi+0Dh], 0
.text:00407016                 jnz     short loc_40703F
.text:00407018
.text:00407018 loc_407018:                             ; CODE XREF: sub_406B00+57B↓j
.text:00407018                 mov     ebp, [esp+12Ch+var_100]
.text:0040701C                 test    ebp, ebp
.text:0040701E                 jns     loc_406C8B
.text:00407024                 mov     eax, [esp+12Ch+arg_4]
.text:0040702B                 mov     [esp+12Ch+FileName], eax ; char *
.text:0040702E                 call    sub_40AF10
.text:00407033                 mov     [esp+12Ch+FileName], offset aCannotCreateRe ; "cannot create regular file %s"
.text:0040703A                 jmp     loc_406E3F
.text:0040703F ; ---------------------------------------------------------------------------
.text:0040703F
.text:0040703F loc_40703F:                             ; CODE XREF: sub_406B00+516↑j
.text:0040703F                 mov     ecx, [esp+12Ch+arg_4]
.text:00407046                 mov     [esp+12Ch+FileName], ecx ; LPCSTR
.text:00407049                 call    sub_418730
.text:0040704E                 test    eax, eax
.text:00407050                 jnz     short loc_40707D
.text:00407052                 mov     ebx, [esp+12Ch+arg_10]
.text:00407059                 mov     byte ptr [ebx], 1
.text:0040705C
.text:0040705C loc_40705C:                             ; CODE XREF: sub_406B00+15E↑j
.text:0040705C                 mov     [esp+12Ch+MaxCharCount], edi
.text:00407060                 mov     edi, [esp+12Ch+arg_4]
.text:00407067                 mov     [esp+12Ch+OpenFlag], 8101h ; OpenFlag
.text:0040706F                 mov     [esp+12Ch+FileName], edi ; FileName
.text:00407072                 call    _open
.text:00407077                 mov     [esp+12Ch+var_100], eax
.text:0040707B                 jmp     short loc_407018
.text:0040707D ; ---------------------------------------------------------------------------
.text:0040707D
.text:0040707D loc_40707D:                             ; CODE XREF: sub_406B00+550↑j
.text:0040707D                 mov     edx, [esp+12Ch+arg_4]
.text:00407084                 mov     [esp+12Ch+FileName], edx ; char *
.text:00407087                 call    sub_40AF10
.text:0040708C                 mov     [esp+12Ch+FileName], offset aCannotRemoveS ; "cannot remove %s"
.text:00407093                 jmp     loc_406E3F
.text:00407098 ; ---------------------------------------------------------------------------
.text:00407098
.text:00407098 loc_407098:                             ; CODE XREF: sub_406B00+74↑j
.text:00407098                 mov     ebp, [esp+12Ch+arg_0]
.text:0040709F                 mov     [esp+12Ch+FileName], ebp ; char *
.text:004070A2                 call    sub_40AF10
.text:004070A7                 mov     [esp+12Ch+FileName], offset aCannotFstatS ; "cannot fstat %s"
.text:004070AE                 jmp     loc_406E3F
.text:004070B3 ; ---------------------------------------------------------------------------
.text:004070B3
.text:004070B3 loc_4070B3:                             ; CODE XREF: sub_406B00+55↑j
.text:004070B3                 mov     eax, [esp+12Ch+arg_0]
.text:004070BA                 mov     [esp+12Ch+FileName], eax ; char *
.text:004070BD                 call    sub_40AF10
.text:004070C2                 mov     [esp+12Ch+FileName], offset aCannotOpenSFor ; "cannot open %s for reading"
.text:004070C9                 mov     ebx, eax
.text:004070CB                 call    ds:libintl_gettext
.text:004070D1                 mov     edi, eax
.text:004070D3                 call    _errno
.text:004070D8                 mov     [esp+12Ch+Origin], ebx ; char
.text:004070DC                 mov     [esp+12Ch+MaxCharCount], edi ; char *
.text:004070E0                 mov     edx, [eax]
.text:004070E2                 mov     [esp+12Ch+FileName], 0 ; Code
.text:004070E9                 mov     [esp+12Ch+OpenFlag], edx ; ErrorMessage
.text:004070ED                 call    sub_4143B0
.text:004070F2                 xor     eax, eax
.text:004070F4                 jmp     loc_406C02
.text:004070F4 sub_406B00      endp
.text:004070F4
.text:004070F4 ; ---------------------------------------------------------------------------
.text:004070F9                 align 10h
.text:00407100
.text:00407100 ; =============== S U B R O U T I N E =======================================
.text:00407100
.text:00407100
.text:00407100 ; int __cdecl sub_407100(char *, int, char *, int, int, int, int)
.text:00407100 sub_407100      proc near               ; CODE XREF: sub_404B50+12FE↑p
.text:00407100
.text:00407100 var_11C         = dword ptr -11Ch
.text:00407100 var_118         = dword ptr -118h
.text:00407100 var_102         = byte ptr -102h
.text:00407100 var_101         = byte ptr -101h
.text:00407100 var_100         = dword ptr -100h
.text:00407100 var_FC          = dword ptr -0FCh
.text:00407100 var_F4          = dword ptr -0F4h
.text:00407100 var_F0          = dword ptr -0F0h
.text:00407100 var_EC          = dword ptr -0ECh
.text:00407100 var_E8          = dword ptr -0E8h
.text:00407100 var_8C          = dword ptr -8Ch
.text:00407100 var_84          = dword ptr -84h
.text:00407100 var_80          = dword ptr -80h
.text:00407100 var_7C          = dword ptr -7Ch
.text:00407100 var_78          = dword ptr -78h
.text:00407100 arg_0           = dword ptr  4
.text:00407100 arg_4           = dword ptr  8
.text:00407100 arg_8           = dword ptr  0Ch
.text:00407100 arg_C           = dword ptr  10h
.text:00407100 arg_10          = dword ptr  14h
.text:00407100 arg_14          = dword ptr  18h
.text:00407100 arg_18          = dword ptr  1Ch
.text:00407100
.text:00407100                 push    ebp
.text:00407101                 push    edi
.text:00407102                 push    esi
.text:00407103                 push    ebx
.text:00407104                 sub     esp, 10Ch
.text:0040710A                 mov     edi, [esp+11Ch+arg_4]
.text:00407111                 mov     [esp+11Ch+var_101], 0
.text:00407116                 mov     ebp, [esp+11Ch+arg_C]
.text:0040711D                 mov     ebx, [edi+0Ch]
.text:00407120                 mov     ecx, [edi+8]
.text:00407123                 mov     eax, [ebp+8]
.text:00407126                 mov     edx, [ebp+0Ch]
.text:00407129                 mov     esi, ebx
.text:0040712B                 xor     eax, ecx
.text:0040712D                 xor     esi, edx
.text:0040712F                 or      esi, eax
.text:00407131                 jnz     short loc_407150
.text:00407133                 mov     ebx, [edi+14h]
.text:00407136                 mov     ecx, [edi+10h]
.text:00407139                 mov     eax, [ebp+10h]
.text:0040713C                 mov     edx, [ebp+14h]
.text:0040713F                 mov     esi, ebx
.text:00407141                 xor     eax, ecx
.text:00407143                 xor     esi, edx
.text:00407145                 or      esi, eax
.text:00407147                 jnz     short loc_407150
.text:00407149                 mov     [esp+11Ch+var_101], 1
.text:0040714E                 mov     esi, esi
.text:00407150
.text:00407150 loc_407150:                             ; CODE XREF: sub_407100+31↑j
.text:00407150                                         ; sub_407100+47↑j
.text:00407150                 cmp     [esp+11Ch+var_101], 0
.text:00407155                 mov     eax, [esp+11Ch+arg_14]
.text:0040715C                 mov     ecx, [esp+11Ch+arg_18]
.text:00407163                 mov     byte ptr [eax], 0
.text:00407166                 mov     byte ptr [ecx], 0
.text:00407169                 jz      short loc_40717C
.text:0040716B                 mov     edx, [esp+11Ch+arg_10]
.text:00407172                 cmp     byte ptr [edx+0Eh], 0
.text:00407176                 jnz     loc_407540
.text:0040717C
.text:0040717C loc_40717C:                             ; CODE XREF: sub_407100+69↑j
.text:0040717C                 mov     ecx, [esp+11Ch+arg_10]
.text:00407183                 cmp     dword ptr [ecx+8], 2
.text:00407187                 jz      loc_407572
.text:0040718D                 cmp     [esp+11Ch+var_101], 0
.text:00407192                 mov     edx, 1
.text:00407197                 jnz     short loc_4071A6
.text:00407199
.text:00407199 loc_407199:                             ; CODE XREF: sub_407100+D5↓j
.text:00407199                                         ; sub_407100+1BE↓j ...
.text:00407199                 add     esp, 10Ch
.text:0040719F                 mov     eax, edx
.text:004071A1                 pop     ebx
.text:004071A2                 pop     esi
.text:004071A3                 pop     edi
.text:004071A4                 pop     ebp
.text:004071A5                 retn
.text:004071A6 ; ---------------------------------------------------------------------------
.text:004071A6
.text:004071A6 loc_4071A6:                             ; CODE XREF: sub_407100+97↑j
.text:004071A6                 mov     ebp, [esp+11Ch+arg_8]
.text:004071AD                 lea     edi, [esp+11Ch+var_8C]
.text:004071B4                 mov     [esp+11Ch+var_118], edi
.text:004071B8                 mov     [esp+11Ch+var_11C], ebp
.text:004071BB                 call    sub_4168B0
.text:004071C0                 test    eax, eax
.text:004071C2                 jz      short loc_4071D7
.text:004071C4                 lea     esi, [esi+0]
.text:004071CA                 lea     edi, [edi+0]
.text:004071D0
.text:004071D0 loc_4071D0:                             ; CODE XREF: sub_407100+F0↓j
.text:004071D0                                         ; sub_407100+185↓j ...
.text:004071D0                 mov     edx, 1
.text:004071D5                 jmp     short loc_407199
.text:004071D7 ; ---------------------------------------------------------------------------
.text:004071D7
.text:004071D7 loc_4071D7:                             ; CODE XREF: sub_407100+C2↑j
.text:004071D7                 mov     edx, [esp+11Ch+arg_0]
.text:004071DE                 lea     ecx, [esp+11Ch+var_FC]
.text:004071E2                 mov     [esp+11Ch+var_118], ecx
.text:004071E6                 mov     [esp+11Ch+var_11C], edx
.text:004071E9                 call    sub_4168B0
.text:004071EE                 test    eax, eax
.text:004071F0                 jnz     short loc_4071D0
.text:004071F2                 mov     [esp+11Ch+var_102], 0
.text:004071F7                 lea     ebx, [esp+11Ch+var_FC]
.text:004071FB                 mov     ecx, [esp+11Ch+var_F4]
.text:004071FF                 mov     [esp+11Ch+var_100], ebx
.text:00407203                 mov     eax, [esp+11Ch+var_84]
.text:0040720A                 mov     ebp, edi
.text:0040720C                 mov     ebx, [esp+11Ch+var_F0]
.text:00407210                 mov     edx, [esp+11Ch+var_80]
.text:00407217                 xor     eax, ecx
.text:00407219                 mov     esi, ebx
.text:0040721B                 xor     esi, edx
.text:0040721D                 or      esi, eax
.text:0040721F                 jnz     short loc_407246
.text:00407221                 mov     ebx, [esp+11Ch+var_E8]
.text:00407225                 mov     ecx, [esp+11Ch+var_EC]
.text:00407229                 mov     eax, [esp+11Ch+var_7C]
.text:00407230                 mov     edx, [esp+11Ch+var_78]
.text:00407237                 mov     esi, ebx
.text:00407239                 xor     eax, ecx
.text:0040723B                 xor     esi, edx
.text:0040723D                 or      esi, eax
.text:0040723F                 jnz     short loc_407246
.text:00407241                 mov     [esp+11Ch+var_102], 1
.text:00407246
.text:00407246 loc_407246:                             ; CODE XREF: sub_407100+11F↑j
.text:00407246                                         ; sub_407100+13F↑j
.text:00407246                 movzx   ecx, [esp+11Ch+var_102]
.text:0040724B                 mov     esi, [esp+11Ch+var_FC]
.text:0040724F                 and     esi, 0F000h
.text:00407255                 cmp     esi, 0A000h
.text:0040725B                 jz      loc_407548
.text:00407261                 jmp     short loc_407270
.text:00407261 ; ---------------------------------------------------------------------------
.text:00407263                 align 10h
.text:00407270
.text:00407270 loc_407270:                             ; CODE XREF: sub_407100+161↑j
.text:00407270                                         ; sub_407100+456↓j ...
.text:00407270                 mov     esi, [esp+11Ch+arg_10]
.text:00407277                 mov     edi, [esi]
.text:00407279                 test    edi, edi
.text:0040727B                 jz      short loc_4072F7
.text:0040727D                 test    cl, cl
.text:0040727F                 jnz     short loc_4072D0
.text:00407281                 cmp     byte ptr [esi+14h], 0
.text:00407285                 jnz     loc_4071D0
.text:0040728B                 cmp     dword ptr [esi+8], 2
.text:0040728F                 jz      loc_4071D0
.text:00407295                 mov     ebx, [esp+11Ch+var_100]
.text:00407299                 mov     ecx, [ebx]
.text:0040729B                 and     ecx, 0F000h
.text:004072A1                 cmp     ecx, 0A000h
.text:004072A7                 jnz     loc_4071D0
.text:004072AD                 mov     esi, [ebp+0]
.text:004072B0                 xor     edx, edx
.text:004072B2                 and     esi, 0F000h
.text:004072B8                 cmp     esi, 0A000h
.text:004072BE                 jnz     loc_407199
.text:004072C4                 jmp     loc_4071D0
.text:004072C4 ; ---------------------------------------------------------------------------
.text:004072C9                 align 10h
.text:004072D0
.text:004072D0 loc_4072D0:                             ; CODE XREF: sub_407100+17F↑j
.text:004072D0                 mov     edx, [esp+11Ch+arg_8]
.text:004072D7                 mov     ebp, [esp+11Ch+arg_0]
.text:004072DE                 mov     [esp+11Ch+var_118], edx ; void *
.text:004072E2                 mov     [esp+11Ch+var_11C], ebp ; void *
.text:004072E5
.text:004072E5 loc_4072E5:                             ; CODE XREF: sub_407100+4B6↓j
.text:004072E5                 call    sub_407B90
.text:004072EA                 test    al, al
.text:004072EC
.text:004072EC loc_4072EC:                             ; CODE XREF: sub_407100+3EF↓j
.text:004072EC                 setz    cl
.text:004072EF                 movzx   edx, cl
.text:004072F2                 jmp     loc_407199
.text:004072F7 ; ---------------------------------------------------------------------------
.text:004072F7
.text:004072F7 loc_4072F7:                             ; CODE XREF: sub_407100+17B↑j
.text:004072F7                 mov     edx, [esp+11Ch+arg_10]
.text:004072FE                 cmp     byte ptr [edx+14h], 0
.text:00407302                 jnz     short loc_40730A
.text:00407304                 cmp     byte ptr [edx+0Ch], 0
.text:00407308                 jz      short loc_407332
.text:0040730A
.text:0040730A loc_40730A:                             ; CODE XREF: sub_407100+202↑j
.text:0040730A                 mov     edi, [ebp+0]
.text:0040730D                 mov     edx, 1
.text:00407312                 and     edi, 0F000h
.text:00407318                 cmp     edi, 0A000h
.text:0040731E                 jz      loc_407199
.text:00407324                 test    cl, cl
.text:00407326                 jz      short loc_407332
.text:00407328                 cmp     dword ptr [ebp+18h], 1
.text:0040732C                 ja      loc_4074F4
.text:00407332
.text:00407332 loc_407332:                             ; CODE XREF: sub_407100+208↑j
.text:00407332                                         ; sub_407100+226↑j ...
.text:00407332                 mov     edx, [esp+11Ch+var_100]
.text:00407336                 mov     edi, [edx]
.text:00407338                 mov     esi, edi
.text:0040733A                 and     esi, 0F000h
.text:00407340                 cmp     esi, 0A000h
.text:00407346                 jz      short loc_4073A2
.text:00407348                 mov     ecx, [ebp+0]
.text:0040734B                 and     ecx, 0F000h
.text:00407351                 cmp     ecx, 0A000h
.text:00407357                 jz      short loc_4073A2
.text:00407359                 mov     ebx, [edx+0Ch]
.text:0040735C                 mov     ecx, [edx+8]
.text:0040735F                 mov     eax, [ebp+8]
.text:00407362                 mov     edx, [ebp+0Ch]
.text:00407365                 mov     esi, ebx
.text:00407367                 xor     eax, ecx
.text:00407369                 xor     esi, edx
.text:0040736B                 or      esi, eax
.text:0040736D                 jnz     loc_4071D0
.text:00407373                 mov     edx, [esp+11Ch+var_100]
.text:00407377                 mov     eax, [ebp+10h]
.text:0040737A                 mov     ebx, [edx+14h]
.text:0040737D                 mov     ecx, [edx+10h]
.text:00407380                 mov     edx, [ebp+14h]
.text:00407383                 mov     esi, ebx
.text:00407385                 xor     eax, ecx
.text:00407387                 xor     esi, edx
.text:00407389                 or      esi, eax
.text:0040738B                 jnz     loc_4071D0
.text:00407391                 mov     ebx, [esp+11Ch+arg_10]
.text:00407398                 cmp     byte ptr [ebx+0Eh], 0
.text:0040739C                 jnz     loc_407475
.text:004073A2
.text:004073A2 loc_4073A2:                             ; CODE XREF: sub_407100+246↑j
.text:004073A2                                         ; sub_407100+257↑j
.text:004073A2                 mov     esi, [esp+11Ch+arg_10]
.text:004073A9                 cmp     byte ptr [esi+0Ch], 0
.text:004073AD                 jz      short loc_4073C4
.text:004073AF                 mov     ecx, [ebp+0]
.text:004073B2                 and     ecx, 0F000h
.text:004073B8                 cmp     ecx, 0A000h
.text:004073BE                 jz      loc_4074D9
.text:004073C4
.text:004073C4 loc_4073C4:                             ; CODE XREF: sub_407100+2AD↑j
.text:004073C4                 mov     esi, [esp+11Ch+arg_10]
.text:004073CB                 cmp     dword ptr [esi+8], 2
.text:004073CF                 jz      short loc_4073D8
.text:004073D1
.text:004073D1 loc_4073D1:                             ; CODE XREF: sub_407100+36F↓j
.text:004073D1                 xor     edx, edx
.text:004073D3                 jmp     loc_407199
.text:004073D8 ; ---------------------------------------------------------------------------
.text:004073D8
.text:004073D8 loc_4073D8:                             ; CODE XREF: sub_407100+2CF↑j
.text:004073D8                 and     edi, 0F000h
.text:004073DE                 cmp     edi, 0A000h
.text:004073E4                 jz      loc_4074B0
.text:004073EA                 cld
.text:004073EB                 mov     ecx, 1Ah
.text:004073F0                 mov     esi, [esp+11Ch+var_100]
.text:004073F4                 lea     edi, [esp+11Ch+var_FC]
.text:004073F8                 rep movsd
.text:004073FA
.text:004073FA loc_4073FA:                             ; CODE XREF: sub_407100+3D4↓j
.text:004073FA                 mov     ebx, [ebp+0]
.text:004073FD                 and     ebx, 0F000h
.text:00407403                 cmp     ebx, 0A000h
.text:00407409                 jz      short loc_407484
.text:0040740B                 cld
.text:0040740C                 mov     ecx, 1Ah
.text:00407411                 lea     edi, [esp+11Ch+var_8C]
.text:00407418                 mov     esi, ebp
.text:0040741A                 rep movsd
.text:0040741C
.text:0040741C loc_40741C:                             ; CODE XREF: sub_407100+3AB↓j
.text:0040741C                 mov     edx, [esp+11Ch+var_F0]
.text:00407420                 mov     esi, [esp+11Ch+var_F4]
.text:00407424                 mov     edi, [esp+11Ch+var_84]
.text:0040742B                 mov     ebp, [esp+11Ch+var_80]
.text:00407432                 mov     eax, edx
.text:00407434                 xor     edi, esi
.text:00407436                 xor     eax, ebp
.text:00407438                 or      eax, edi
.text:0040743A                 jnz     loc_4071D0
.text:00407440                 mov     ebp, [esp+11Ch+var_E8]
.text:00407444                 mov     esi, [esp+11Ch+var_EC]
.text:00407448                 mov     edi, [esp+11Ch+var_7C]
.text:0040744F                 mov     ecx, [esp+11Ch+var_78]
.text:00407456                 mov     eax, ebp
.text:00407458                 xor     edi, esi
.text:0040745A                 xor     eax, ecx
.text:0040745C                 or      eax, edi
.text:0040745E                 jnz     loc_4071D0
.text:00407464                 mov     ebx, [esp+11Ch+arg_10]
.text:0040746B                 cmp     byte ptr [ebx+0Eh], 0
.text:0040746F                 jz      loc_4073D1
.text:00407475
.text:00407475 loc_407475:                             ; CODE XREF: sub_407100+29C↑j
.text:00407475                 mov     edi, [esp+11Ch+arg_14]
.text:0040747C                 mov     byte ptr [edi], 1
.text:0040747F                 jmp     loc_4071D0
.text:00407484 ; ---------------------------------------------------------------------------
.text:00407484
.text:00407484 loc_407484:                             ; CODE XREF: sub_407100+309↑j
.text:00407484                 mov     ebp, [esp+11Ch+arg_8]
.text:0040748B                 lea     ecx, [esp+11Ch+var_8C]
.text:00407492                 mov     [esp+11Ch+var_118], ecx ; int
.text:00407496                 mov     [esp+11Ch+var_11C], ebp ; char *
.text:00407499                 call    sub_417BA0
.text:0040749E                 test    eax, eax
.text:004074A0                 mov     edx, 1
.text:004074A5                 jnz     loc_407199
.text:004074AB                 jmp     loc_40741C
.text:004074B0 ; ---------------------------------------------------------------------------
.text:004074B0
.text:004074B0 loc_4074B0:                             ; CODE XREF: sub_407100+2E4↑j
.text:004074B0                 mov     edi, [esp+11Ch+arg_0]
.text:004074B7                 lea     edx, [esp+11Ch+var_FC]
.text:004074BB                 mov     [esp+11Ch+var_118], edx ; int
.text:004074BF                 mov     [esp+11Ch+var_11C], edi ; char *
.text:004074C2                 call    sub_417BA0
.text:004074C7                 test    eax, eax
.text:004074C9                 mov     edx, 1
.text:004074CE                 jnz     loc_407199
.text:004074D4                 jmp     loc_4073FA
.text:004074D9 ; ---------------------------------------------------------------------------
.text:004074D9
.text:004074D9 loc_4074D9:                             ; CODE XREF: sub_407100+2BE↑j
.text:004074D9                 mov     ebx, [esp+11Ch+var_100]
.text:004074DD                 mov     edx, [ebp+10h]
.text:004074E0                 mov     edi, [ebp+14h]
.text:004074E3                 mov     eax, [ebx+10h]
.text:004074E6                 mov     ebp, [ebx+14h]
.text:004074E9                 xor     edx, eax
.text:004074EB                 xor     edi, ebp
.text:004074ED                 or      edx, edi
.text:004074EF                 jmp     loc_4072EC
.text:004074F4 ; ---------------------------------------------------------------------------
.text:004074F4
.text:004074F4 loc_4074F4:                             ; CODE XREF: sub_407100+22C↑j
.text:004074F4                 mov     eax, [esp+11Ch+arg_8]
.text:004074FB                 mov     ecx, [esp+11Ch+arg_0]
.text:00407502                 mov     [esp+11Ch+var_118], eax ; void *
.text:00407506                 mov     [esp+11Ch+var_11C], ecx ; void *
.text:00407509                 call    sub_407B90
.text:0040750E                 test    al, al
.text:00407510                 jnz     loc_407332
.text:00407516                 mov     ebx, [esp+11Ch+arg_10]
.text:0040751D                 cmp     byte ptr [ebx+14h], 0
.text:00407521                 jz      loc_4071D0
.text:00407527                 mov     ebp, [esp+11Ch+arg_18]
.text:0040752E                 mov     eax, [esp+11Ch+arg_14]
.text:00407535                 mov     byte ptr [ebp+0], 1
.text:00407539                 lea     esi, [esi+0]
.text:00407540
.text:00407540 loc_407540:                             ; CODE XREF: sub_407100+76↑j
.text:00407540                 mov     byte ptr [eax], 1
.text:00407543                 jmp     loc_4071D0
.text:00407548 ; ---------------------------------------------------------------------------
.text:00407548
.text:00407548 loc_407548:                             ; CODE XREF: sub_407100+15B↑j
.text:00407548                 mov     edx, [edi]
.text:0040754A                 and     edx, 0F000h
.text:00407550                 cmp     edx, 0A000h
.text:00407556                 jnz     loc_407270
.text:0040755C                 mov     eax, [esp+11Ch+arg_10]
.text:00407563                 cmp     byte ptr [eax+0Ch], 0
.text:00407567                 jnz     loc_4071D0
.text:0040756D                 jmp     loc_407270
.text:00407572 ; ---------------------------------------------------------------------------
.text:00407572
.text:00407572 loc_407572:                             ; CODE XREF: sub_407100+87↑j
.text:00407572                 movzx   ecx, [esp+11Ch+var_101]
.text:00407577                 mov     ebx, [edi]
.text:00407579                 and     ebx, 0F000h
.text:0040757F                 cmp     ebx, 0A000h
.text:00407585                 jz      short loc_407590
.text:00407587
.text:00407587 loc_407587:                             ; CODE XREF: sub_407100+49F↓j
.text:00407587                 mov     [esp+11Ch+var_100], edi
.text:0040758B                 jmp     loc_407270
.text:00407590 ; ---------------------------------------------------------------------------
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_407100+485↑j
.text:00407590                 mov     esi, [ebp+0]
.text:00407593                 and     esi, 0F000h
.text:00407599                 cmp     esi, 0A000h
.text:0040759F                 jnz     short loc_407587
.text:004075A1                 mov     edi, [esp+11Ch+arg_8]
.text:004075A8                 mov     eax, [esp+11Ch+arg_0]
.text:004075AF                 mov     [esp+11Ch+var_118], edi
.text:004075B3                 mov     [esp+11Ch+var_11C], eax
.text:004075B6                 jmp     loc_4072E5
.text:004075B6 sub_407100      endp
.text:004075B6
.text:004075B6 ; ---------------------------------------------------------------------------
.text:004075BB                 align 10h
.text:004075C0
.text:004075C0 ; =============== S U B R O U T I N E =======================================
.text:004075C0
.text:004075C0
.text:004075C0 sub_4075C0      proc near               ; DATA XREF: sub_406630+13↑o
.text:004075C0
.text:004075C0 var_1C          = dword ptr -1Ch
.text:004075C0 var_18          = dword ptr -18h
.text:004075C0 var_14          = dword ptr -14h
.text:004075C0 var_10          = dword ptr -10h
.text:004075C0 var_8           = dword ptr -8
.text:004075C0 var_4           = dword ptr -4
.text:004075C0 arg_0           = dword ptr  4
.text:004075C0 arg_4           = dword ptr  8
.text:004075C0
.text:004075C0                 sub     esp, 1Ch
.text:004075C3                 mov     [esp+1Ch+var_4], esi
.text:004075C7                 mov     esi, [esp+1Ch+arg_4]
.text:004075CB                 mov     [esp+1Ch+var_8], ebx
.text:004075CF                 mov     ebx, [esp+1Ch+arg_0]
.text:004075D3                 mov     [esp+1Ch+var_18], esi
.text:004075D7                 mov     edx, [ebx]
.text:004075D9                 mov     [esp+1Ch+var_1C], edx
.text:004075DC                 call    sub_40BFF0
.text:004075E1                 mov     ecx, [ebx+8]
.text:004075E4                 xor     edx, edx
.text:004075E6                 mov     ebx, [ebx+0Ch]
.text:004075E9                 mov     [esp+1Ch+var_14], esi
.text:004075ED                 or      eax, ecx
.text:004075EF                 or      edx, ebx
.text:004075F1                 mov     [esp+1Ch+var_10], 0
.text:004075F9                 mov     [esp+1Ch+var_1C], eax
.text:004075FC                 mov     [esp+1Ch+var_18], edx
.text:00407600                 call    sub_41D750
.text:00407605                 mov     ebx, [esp+1Ch+var_8]
.text:00407609                 mov     esi, [esp+1Ch+var_4]
.text:0040760D                 add     esp, 1Ch
.text:00407610                 retn
.text:00407610 sub_4075C0      endp
.text:00407610
.text:00407611 ; ---------------------------------------------------------------------------
.text:00407611                 jmp     short sub_407620
.text:00407611 ; ---------------------------------------------------------------------------
.text:00407613                 align 10h
.text:00407620
.text:00407620 ; =============== S U B R O U T I N E =======================================
.text:00407620
.text:00407620
.text:00407620 sub_407620      proc near               ; CODE XREF: .text:00407611↑j
.text:00407620                                         ; DATA XREF: sub_406670+13↑o
.text:00407620
.text:00407620 var_1C          = dword ptr -1Ch
.text:00407620 var_18          = dword ptr -18h
.text:00407620 var_14          = dword ptr -14h
.text:00407620 var_10          = dword ptr -10h
.text:00407620 arg_0           = dword ptr  4
.text:00407620 arg_4           = dword ptr  8
.text:00407620
.text:00407620                 sub     esp, 1Ch
.text:00407623                 mov     ecx, [esp+1Ch+arg_0]
.text:00407627                 mov     edx, [ecx+0Ch]
.text:0040762A                 mov     eax, [ecx+8]
.text:0040762D                 mov     ecx, [esp+1Ch+arg_4]
.text:00407631                 mov     [esp+1Ch+var_10], 0
.text:00407639                 mov     [esp+1Ch+var_1C], eax
.text:0040763C                 mov     [esp+1Ch+var_14], ecx
.text:00407640                 mov     [esp+1Ch+var_18], edx
.text:00407644                 call    sub_41D750
.text:00407649                 add     esp, 1Ch
.text:0040764C                 retn
.text:0040764C sub_407620      endp
.text:0040764C
.text:0040764C ; ---------------------------------------------------------------------------
.text:0040764D                 align 10h
.text:00407650
.text:00407650 ; =============== S U B R O U T I N E =======================================
.text:00407650
.text:00407650
.text:00407650 sub_407650      proc near               ; DATA XREF: sub_406630+B↑o
.text:00407650                                         ; sub_406670+B↑o
.text:00407650
.text:00407650 var_1C          = dword ptr -1Ch
.text:00407650 var_18          = dword ptr -18h
.text:00407650 var_11          = byte ptr -11h
.text:00407650 var_10          = dword ptr -10h
.text:00407650 var_C           = dword ptr -0Ch
.text:00407650 var_8           = dword ptr -8
.text:00407650 var_4           = dword ptr -4
.text:00407650 arg_0           = dword ptr  4
.text:00407650 arg_4           = dword ptr  8
.text:00407650
.text:00407650                 sub     esp, 1Ch
.text:00407653                 mov     [esp+1Ch+var_4], ebp
.text:00407657                 mov     ebp, [esp+1Ch+arg_0]
.text:0040765B                 mov     [esp+1Ch+var_8], edi
.text:0040765F                 mov     edi, [esp+1Ch+arg_4]
.text:00407663                 mov     [esp+1Ch+var_C], esi
.text:00407667                 mov     [esp+1Ch+var_10], ebx
.text:0040766B                 mov     ebx, [ebp+0Ch]
.text:0040766E                 mov     [esp+1Ch+var_11], 0
.text:00407673                 mov     ecx, [ebp+8]
.text:00407676                 mov     eax, [edi+8]
.text:00407679                 mov     edx, [edi+0Ch]
.text:0040767C                 mov     esi, ebx
.text:0040767E                 xor     eax, ecx
.text:00407680                 xor     esi, edx
.text:00407682                 or      esi, eax
.text:00407684                 jnz     short loc_40769C
.text:00407686                 mov     ebx, [ebp+14h]
.text:00407689                 mov     ecx, [ebp+10h]
.text:0040768C                 mov     eax, [edi+10h]
.text:0040768F                 mov     edx, [edi+14h]
.text:00407692                 mov     esi, ebx
.text:00407694                 xor     eax, ecx
.text:00407696                 xor     esi, edx
.text:00407698                 or      esi, eax
.text:0040769A                 jz      short loc_4076B5
.text:0040769C
.text:0040769C loc_40769C:                             ; CODE XREF: sub_407650+34↑j
.text:0040769C                                         ; sub_407650+78↓j ...
.text:0040769C                 movzx   eax, [esp+1Ch+var_11]
.text:004076A1                 mov     ebx, [esp+1Ch+var_10]
.text:004076A5                 mov     esi, [esp+1Ch+var_C]
.text:004076A9                 mov     edi, [esp+1Ch+var_8]
.text:004076AD                 mov     ebp, [esp+1Ch+var_4]
.text:004076B1                 add     esp, 1Ch
.text:004076B4                 retn
.text:004076B5 ; ---------------------------------------------------------------------------
.text:004076B5
.text:004076B5 loc_4076B5:                             ; CODE XREF: sub_407650+4A↑j
.text:004076B5                 mov     edx, [edi]
.text:004076B7                 mov     [esp+1Ch+var_18], edx ; void *
.text:004076BB                 mov     edx, [ebp+0]
.text:004076BE                 mov     [esp+1Ch+var_1C], edx ; void *
.text:004076C1                 call    sub_407B90
.text:004076C6                 test    al, al
.text:004076C8                 jz      short loc_40769C
.text:004076CA                 mov     [esp+1Ch+var_11], 1
.text:004076CF                 jmp     short loc_40769C
.text:004076CF sub_407650      endp
.text:004076CF
.text:004076D1 ; ---------------------------------------------------------------------------
.text:004076D1                 jmp     short sub_4076E0
.text:004076D1 ; ---------------------------------------------------------------------------
.text:004076D3                 align 10h
.text:004076E0
.text:004076E0 ; =============== S U B R O U T I N E =======================================
.text:004076E0
.text:004076E0
.text:004076E0 ; int __cdecl sub_4076E0(void *)
.text:004076E0 sub_4076E0      proc near               ; CODE XREF: .text:004076D1↑j
.text:004076E0                                         ; DATA XREF: sub_406630+3↑o ...
.text:004076E0
.text:004076E0 Block           = dword ptr -0Ch
.text:004076E0 var_4           = dword ptr -4
.text:004076E0 arg_0           = dword ptr  4
.text:004076E0
.text:004076E0                 sub     esp, 0Ch
.text:004076E3                 mov     [esp+0Ch+var_4], ebx
.text:004076E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004076EB                 mov     edx, [ebx]
.text:004076ED                 mov     [esp+0Ch+Block], edx ; Block
.text:004076F0                 call    free
.text:004076F5                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:004076F9                 mov     ebx, [esp+0Ch+var_4]
.text:004076FD                 add     esp, 0Ch
.text:00407700                 jmp     free
.text:00407700 sub_4076E0      endp
.text:00407700
.text:00407700 ; ---------------------------------------------------------------------------
.text:00407705                 align 10h
.text:00407710
.text:00407710 ; =============== S U B R O U T I N E =======================================
.text:00407710
.text:00407710
.text:00407710 ; int __cdecl sub_407710(int, char *, int)
.text:00407710 sub_407710      proc near               ; CODE XREF: sub_404B50+19A↑p
.text:00407710                                         ; sub_404B50+658↑p ...
.text:00407710
.text:00407710 Block           = dword ptr -9Ch
.text:00407710 var_98          = dword ptr -98h
.text:00407710 var_8C          = byte ptr -8Ch
.text:00407710 var_84          = dword ptr -84h
.text:00407710 var_80          = dword ptr -80h
.text:00407710 var_7C          = dword ptr -7Ch
.text:00407710 var_78          = dword ptr -78h
.text:00407710 var_10          = dword ptr -10h
.text:00407710 var_C           = dword ptr -0Ch
.text:00407710 var_8           = dword ptr -8
.text:00407710 var_4           = dword ptr -4
.text:00407710 arg_0           = dword ptr  4
.text:00407710 arg_4           = dword ptr  8
.text:00407710 arg_8           = dword ptr  0Ch
.text:00407710
.text:00407710                 sub     esp, 9Ch
.text:00407716                 mov     [esp+9Ch+var_4], ebp
.text:0040771D                 mov     ebp, [esp+9Ch+arg_0]
.text:00407724                 mov     [esp+9Ch+var_C], esi
.text:0040772B                 mov     esi, [esp+9Ch+arg_8]
.text:00407732                 test    ebp, ebp
.text:00407734                 mov     [esp+9Ch+var_8], edi
.text:0040773B                 mov     edi, [esp+9Ch+arg_4]
.text:00407742                 mov     [esp+9Ch+var_10], ebx
.text:00407749                 jz      short loc_4077A5
.text:0040774B                 mov     [esp+9Ch+Block], 18h ; size_t
.text:00407752                 call    sub_40A850
.text:00407757                 mov     [esp+9Ch+Block], edi ; char *
.text:0040775A                 mov     ebx, eax
.text:0040775C                 call    sub_40AA10
.text:00407761                 mov     [ebx], eax
.text:00407763                 test    esi, esi
.text:00407765                 jz      short loc_4077C8
.text:00407767                 mov     edx, [esi+8]
.text:0040776A                 mov     ecx, [esi+0Ch]
.text:0040776D                 mov     [ebx+8], edx
.text:00407770                 mov     [ebx+0Ch], ecx
.text:00407773                 mov     eax, [esi+10h]
.text:00407776                 mov     edx, [esi+14h]
.text:00407779
.text:00407779 loc_407779:                             ; CODE XREF: sub_407710+E2↓j
.text:00407779                 mov     [ebx+10h], eax
.text:0040777C                 mov     [ebx+14h], edx
.text:0040777F                 mov     [esp+9Ch+var_98], ebx
.text:00407783                 mov     [esp+9Ch+Block], ebp
.text:00407786                 call    sub_40B690
.text:0040778B                 test    eax, eax
.text:0040778D                 jz      short loc_4077F4
.text:0040778F                 cmp     eax, ebx
.text:00407791                 jz      short loc_4077A5
.text:00407793                 mov     ebp, [ebx]
.text:00407795                 mov     [esp+9Ch+Block], ebp ; Block
.text:00407798                 call    free
.text:0040779D                 mov     [esp+9Ch+Block], ebx ; Block
.text:004077A0                 call    free
.text:004077A5
.text:004077A5 loc_4077A5:                             ; CODE XREF: sub_407710+39↑j
.text:004077A5                                         ; sub_407710+81↑j ...
.text:004077A5                 mov     ebx, [esp+9Ch+var_10]
.text:004077AC                 mov     esi, [esp+9Ch+var_C]
.text:004077B3                 mov     edi, [esp+9Ch+var_8]
.text:004077BA                 mov     ebp, [esp+9Ch+var_4]
.text:004077C1                 add     esp, 9Ch
.text:004077C7                 retn
.text:004077C8 ; ---------------------------------------------------------------------------
.text:004077C8
.text:004077C8 loc_4077C8:                             ; CODE XREF: sub_407710+55↑j
.text:004077C8                 mov     [esp+9Ch+Block], edi
.text:004077CB                 lea     ecx, [esp+9Ch+var_8C]
.text:004077CF                 mov     [esp+9Ch+var_98], ecx
.text:004077D3                 call    sub_4168B0
.text:004077D8                 test    eax, eax
.text:004077DA                 jnz     short loc_4077A5
.text:004077DC                 mov     edi, [esp+9Ch+var_84]
.text:004077E0                 mov     esi, [esp+9Ch+var_80]
.text:004077E4                 mov     [ebx+8], edi
.text:004077E7                 mov     [ebx+0Ch], esi
.text:004077EA                 mov     eax, [esp+9Ch+var_7C]
.text:004077EE                 mov     edx, [esp+9Ch+var_78]
.text:004077F2                 jmp     short loc_407779
.text:004077F4 ; ---------------------------------------------------------------------------
.text:004077F4
.text:004077F4 loc_4077F4:                             ; CODE XREF: sub_407710+7D↑j
.text:004077F4                 call    sub_40B0D0
.text:004077F4 sub_407710      endp
.text:004077F4
.text:004077F4 ; ---------------------------------------------------------------------------
.text:004077F9                 align 10h
.text:00407800
.text:00407800 ; =============== S U B R O U T I N E =======================================
.text:00407800
.text:00407800
.text:00407800 sub_407800      proc near               ; CODE XREF: sub_404B50+781↑p
.text:00407800                                         ; sub_404B50+F88↑p
.text:00407800
.text:00407800 Block           = dword ptr -3Ch
.text:00407800 var_38          = dword ptr -38h
.text:00407800 var_2C          = dword ptr -2Ch
.text:00407800 var_28          = dword ptr -28h
.text:00407800 var_24          = dword ptr -24h
.text:00407800 var_20          = dword ptr -20h
.text:00407800 var_1C          = dword ptr -1Ch
.text:00407800 var_4           = dword ptr -4
.text:00407800 arg_0           = dword ptr  4
.text:00407800 arg_4           = dword ptr  8
.text:00407800 arg_8           = dword ptr  0Ch
.text:00407800 arg_C           = dword ptr  10h
.text:00407800
.text:00407800                 sub     esp, 3Ch
.text:00407803                 mov     edx, [esp+3Ch+arg_0]
.text:00407807                 mov     [esp+3Ch+var_4], ebx
.text:0040780B                 mov     ecx, [esp+3Ch+arg_4]
.text:0040780F                 mov     [esp+3Ch+var_1C], 0
.text:00407817                 mov     ebx, [esp+3Ch+arg_8]
.text:0040781B                 mov     [esp+3Ch+var_2C], edx
.text:0040781F                 lea     edx, [esp+3Ch+var_2C]
.text:00407823                 mov     [esp+3Ch+var_28], ecx
.text:00407827                 mov     ecx, [esp+3Ch+arg_C]
.text:0040782B                 mov     [esp+3Ch+var_38], edx
.text:0040782F                 mov     edx, ds:dword_420080
.text:00407835                 mov     [esp+3Ch+var_24], ebx
.text:00407839                 mov     [esp+3Ch+var_20], ecx
.text:0040783D                 mov     [esp+3Ch+Block], edx
.text:00407840                 call    sub_40BD60
.text:00407845                 test    eax, eax
.text:00407847                 mov     ebx, eax
.text:00407849                 jz      short loc_40785E
.text:0040784B                 mov     ecx, [eax+10h]
.text:0040784E                 mov     [esp+3Ch+Block], ecx ; Block
.text:00407851                 call    free
.text:00407856                 mov     [esp+3Ch+Block], ebx ; Block
.text:00407859                 call    free
.text:0040785E
.text:0040785E loc_40785E:                             ; CODE XREF: sub_407800+49↑j
.text:0040785E                 mov     ebx, [esp+3Ch+var_4]
.text:00407862                 add     esp, 3Ch
.text:00407865                 retn
.text:00407865 sub_407800      endp
.text:00407865
.text:00407865 ; ---------------------------------------------------------------------------
.text:00407866 ; const char word_407866[]
.text:00407866 word_407866     dw 7325h                ; DATA XREF: sub_407870+C3↓o
.text:00407868                 align 10h
.text:00407870
.text:00407870 ; =============== S U B R O U T I N E =======================================
.text:00407870
.text:00407870
.text:00407870 ; int __cdecl sub_407870(char *)
.text:00407870 sub_407870      proc near               ; CODE XREF: sub_404B50+D14↑p
.text:00407870
.text:00407870 Block           = dword ptr -0ACh
.text:00407870 ErrorMessage    = dword ptr -0A8h
.text:00407870 var_A4          = dword ptr -0A4h
.text:00407870 var_A0          = byte ptr -0A0h
.text:00407870 var_94          = dword ptr -94h
.text:00407870 var_90          = dword ptr -90h
.text:00407870 var_8C          = dword ptr -8Ch
.text:00407870 var_84          = dword ptr -84h
.text:00407870 var_80          = dword ptr -80h
.text:00407870 var_7C          = dword ptr -7Ch
.text:00407870 var_78          = dword ptr -78h
.text:00407870 arg_0           = dword ptr  4
.text:00407870
.text:00407870                 push    ebp
.text:00407871                 push    edi
.text:00407872                 push    esi
.text:00407873                 push    ebx
.text:00407874                 sub     esp, 9Ch
.text:0040787A                 mov     ebp, [esp+0ACh+arg_0]
.text:00407881                 lea     edx, [esp+0ACh+var_8C]
.text:00407885                 mov     [esp+0ACh+ErrorMessage], edx ; int
.text:00407889                 mov     [esp+0ACh+Block], ebp ; char *
.text:0040788C                 call    sub_417BA0
.text:00407891                 test    eax, eax
.text:00407893                 js      loc_407920
.text:00407899                 mov     [esp+0ACh+Block], 18h ; size_t
.text:004078A0                 mov     edx, [esp+0ACh+var_7C]
.text:004078A4                 mov     edi, [esp+0ACh+var_78]
.text:004078A8                 mov     ebx, [esp+0ACh+var_84]
.text:004078AC                 mov     esi, [esp+0ACh+var_80]
.text:004078B0                 mov     [esp+0ACh+var_94], edx
.text:004078B4                 mov     [esp+0ACh+var_90], edi
.text:004078B8                 call    sub_40A850
.text:004078BD                 mov     [esp+0ACh+Block], ebp ; char *
.text:004078C0                 mov     edi, eax
.text:004078C2                 call    sub_40AA10
.text:004078C7                 mov     [edi], ebx
.text:004078C9                 mov     ebp, [esp+0ACh+var_94]
.text:004078CD                 mov     ebx, [esp+0ACh+var_90]
.text:004078D1                 mov     [edi+10h], eax
.text:004078D4                 mov     ecx, ds:dword_420080
.text:004078DA                 mov     [edi+4], esi
.text:004078DD                 mov     [edi+8], ebp
.text:004078E0                 mov     [edi+0Ch], ebx
.text:004078E3                 mov     [esp+0ACh+ErrorMessage], edi
.text:004078E7                 mov     [esp+0ACh+Block], ecx
.text:004078EA                 call    sub_40B690
.text:004078EF                 test    eax, eax
.text:004078F1                 jz      short loc_407951
.text:004078F3                 cmp     eax, edi
.text:004078F5                 jz      short loc_40790A
.text:004078F7                 mov     esi, [edi+10h]
.text:004078FA                 mov     [esp+0ACh+Block], esi ; Block
.text:004078FD                 call    free
.text:00407902                 mov     [esp+0ACh+Block], edi ; Block
.text:00407905                 call    free
.text:0040790A
.text:0040790A loc_40790A:                             ; CODE XREF: sub_407870+85↑j
.text:0040790A                 mov     eax, 1
.text:0040790F
.text:0040790F loc_40790F:                             ; CODE XREF: sub_407870+DF↓j
.text:0040790F                 add     esp, 9Ch
.text:00407915                 pop     ebx
.text:00407916                 pop     esi
.text:00407917                 pop     edi
.text:00407918                 pop     ebp
.text:00407919                 retn
.text:00407919 ; ---------------------------------------------------------------------------
.text:0040791A                 align 10h
.text:00407920
.text:00407920 loc_407920:                             ; CODE XREF: sub_407870+23↑j
.text:00407920                 mov     [esp+0ACh+Block], ebp ; char *
.text:00407923                 call    sub_40AF10
.text:00407928                 mov     esi, eax
.text:0040792A                 call    _errno
.text:0040792F                 mov     dword ptr [esp+0ACh+var_A0], esi ; char
.text:00407933                 mov     [esp+0ACh+var_A4], offset word_407866 ; char *
.text:0040793B                 mov     edx, [eax]
.text:0040793D                 mov     [esp+0ACh+Block], 0 ; Code
.text:00407944                 mov     [esp+0ACh+ErrorMessage], edx ; ErrorMessage
.text:00407948                 call    sub_4143B0
.text:0040794D                 xor     eax, eax
.text:0040794F                 jmp     short loc_40790F
.text:00407951 ; ---------------------------------------------------------------------------
.text:00407951
.text:00407951 loc_407951:                             ; CODE XREF: sub_407870+81↑j
.text:00407951                 call    sub_40B0D0
.text:00407951 sub_407870      endp
.text:00407951
.text:00407951 ; ---------------------------------------------------------------------------
.text:00407956                 align 10h
.text:00407960
.text:00407960 ; =============== S U B R O U T I N E =======================================
.text:00407960
.text:00407960
.text:00407960 sub_407960      proc near               ; CODE XREF: sub_404B50+126C↑p
.text:00407960
.text:00407960 var_3C          = dword ptr -3Ch
.text:00407960 var_38          = dword ptr -38h
.text:00407960 var_2C          = dword ptr -2Ch
.text:00407960 var_28          = dword ptr -28h
.text:00407960 var_24          = dword ptr -24h
.text:00407960 var_20          = dword ptr -20h
.text:00407960 arg_0           = dword ptr  4
.text:00407960 arg_4           = dword ptr  8
.text:00407960 arg_8           = dword ptr  0Ch
.text:00407960 arg_C           = dword ptr  10h
.text:00407960
.text:00407960                 sub     esp, 3Ch
.text:00407963                 mov     edx, [esp+3Ch+arg_0]
.text:00407967                 mov     ecx, [esp+3Ch+arg_4]
.text:0040796B                 mov     [esp+3Ch+var_2C], edx
.text:0040796F                 mov     edx, [esp+3Ch+arg_8]
.text:00407973                 mov     [esp+3Ch+var_28], ecx
.text:00407977                 mov     ecx, [esp+3Ch+arg_C]
.text:0040797B                 mov     [esp+3Ch+var_24], edx
.text:0040797F                 lea     edx, [esp+3Ch+var_2C]
.text:00407983                 mov     [esp+3Ch+var_38], edx
.text:00407987                 mov     edx, ds:dword_420080
.text:0040798D                 mov     [esp+3Ch+var_20], ecx
.text:00407991                 mov     [esp+3Ch+var_3C], edx
.text:00407994                 call    sub_40BAE0
.text:00407999                 xor     edx, edx
.text:0040799B                 test    eax, eax
.text:0040799D                 jz      short loc_4079A2
.text:0040799F                 mov     edx, [eax+10h]
.text:004079A2
.text:004079A2 loc_4079A2:                             ; CODE XREF: sub_407960+3D↑j
.text:004079A2                 mov     eax, edx
.text:004079A4                 add     esp, 3Ch
.text:004079A7                 retn
.text:004079A7 sub_407960      endp
.text:004079A7
.text:004079A7 ; ---------------------------------------------------------------------------
.text:004079A8                 align 10h
.text:004079B0
.text:004079B0 ; =============== S U B R O U T I N E =======================================
.text:004079B0
.text:004079B0
.text:004079B0 ; int __cdecl sub_4079B0(char *, int, int, int, int)
.text:004079B0 sub_4079B0      proc near               ; CODE XREF: sub_404B50+1092↑p
.text:004079B0
.text:004079B0 Block           = dword ptr -1Ch
.text:004079B0 var_18          = dword ptr -18h
.text:004079B0 var_14          = dword ptr -14h
.text:004079B0 var_10          = dword ptr -10h
.text:004079B0 arg_0           = dword ptr  4
.text:004079B0 arg_4           = dword ptr  8
.text:004079B0 arg_8           = dword ptr  0Ch
.text:004079B0 arg_C           = dword ptr  10h
.text:004079B0 arg_10          = dword ptr  14h
.text:004079B0
.text:004079B0                 push    edi
.text:004079B1                 push    esi
.text:004079B2                 push    ebx
.text:004079B3                 sub     esp, 10h
.text:004079B6                 mov     edx, [esp+1Ch+arg_C]
.text:004079BA                 mov     [esp+1Ch+Block], 18h ; size_t
.text:004079C1                 mov     edi, [esp+1Ch+arg_10]
.text:004079C5                 mov     ebx, [esp+1Ch+arg_4]
.text:004079C9                 mov     [esp+1Ch+var_14], edx
.text:004079CD                 mov     esi, [esp+1Ch+arg_8]
.text:004079D1                 mov     [esp+1Ch+var_10], edi
.text:004079D5                 call    sub_40A850
.text:004079DA                 mov     ecx, [esp+1Ch+arg_0]
.text:004079DE                 mov     edi, eax
.text:004079E0                 mov     [esp+1Ch+Block], ecx ; char *
.text:004079E3                 call    sub_40AA10
.text:004079E8                 mov     [edi+10h], eax
.text:004079EB                 mov     edx, [esp+1Ch+var_14]
.text:004079EF                 mov     ecx, [esp+1Ch+var_10]
.text:004079F3                 mov     [edi], ebx
.text:004079F5                 mov     [edi+8], edx
.text:004079F8                 mov     edx, ds:dword_420080
.text:004079FE                 mov     [edi+4], esi
.text:00407A01                 mov     [edi+0Ch], ecx
.text:00407A04                 mov     [esp+1Ch+var_18], edi
.text:00407A08                 mov     [esp+1Ch+Block], edx
.text:00407A0B                 call    sub_40B690
.text:00407A10                 test    eax, eax
.text:00407A12                 mov     ebx, eax
.text:00407A14                 jz      short loc_407A39
.text:00407A16                 xor     eax, eax
.text:00407A18                 cmp     ebx, edi
.text:00407A1A                 jz      short loc_407A32
.text:00407A1C                 mov     esi, [edi+10h]
.text:00407A1F                 mov     [esp+1Ch+Block], esi ; Block
.text:00407A22                 call    free
.text:00407A27                 mov     [esp+1Ch+Block], edi ; Block
.text:00407A2A                 call    free
.text:00407A2F                 mov     eax, [ebx+10h]
.text:00407A32
.text:00407A32 loc_407A32:                             ; CODE XREF: sub_4079B0+6A↑j
.text:00407A32                 add     esp, 10h
.text:00407A35                 pop     ebx
.text:00407A36                 pop     esi
.text:00407A37                 pop     edi
.text:00407A38                 retn
.text:00407A39 ; ---------------------------------------------------------------------------
.text:00407A39
.text:00407A39 loc_407A39:                             ; CODE XREF: sub_4079B0+64↑j
.text:00407A39                 call    sub_40B0D0
.text:00407A39 sub_4079B0      endp
.text:00407A39
.text:00407A39 ; ---------------------------------------------------------------------------
.text:00407A3E                 align 10h
.text:00407A40
.text:00407A40 ; =============== S U B R O U T I N E =======================================
.text:00407A40
.text:00407A40
.text:00407A40 sub_407A40      proc near               ; CODE XREF: sub_4027B0:loc_4033D5↑p
.text:00407A40
.text:00407A40 var_1C          = dword ptr -1Ch
.text:00407A40 var_18          = dword ptr -18h
.text:00407A40 var_14          = dword ptr -14h
.text:00407A40 var_10          = dword ptr -10h
.text:00407A40 var_C           = dword ptr -0Ch
.text:00407A40
.text:00407A40                 sub     esp, 1Ch
.text:00407A43                 mov     [esp+1Ch+var_C], offset sub_407B50
.text:00407A4B                 mov     [esp+1Ch+var_10], offset sub_407AE0
.text:00407A53                 mov     [esp+1Ch+var_14], offset sub_407AB0
.text:00407A5B                 mov     [esp+1Ch+var_18], 0
.text:00407A63                 mov     [esp+1Ch+var_1C], 67h ; 'g'
.text:00407A6A                 call    sub_40B140
.text:00407A6F                 mov     ds:dword_420080, eax
.text:00407A74                 test    eax, eax
.text:00407A76                 jz      short loc_407A7C
.text:00407A78                 add     esp, 1Ch
.text:00407A7B                 retn
.text:00407A7C ; ---------------------------------------------------------------------------
.text:00407A7C
.text:00407A7C loc_407A7C:                             ; CODE XREF: sub_407A40+36↑j
.text:00407A7C                 call    sub_40B0D0
.text:00407A7C sub_407A40      endp
.text:00407A7C
.text:00407A81 ; ---------------------------------------------------------------------------
.text:00407A81                 jmp     short sub_407A90
.text:00407A81 ; ---------------------------------------------------------------------------
.text:00407A83                 align 10h
.text:00407A90
.text:00407A90 ; =============== S U B R O U T I N E =======================================
.text:00407A90
.text:00407A90
.text:00407A90 sub_407A90      proc near               ; CODE XREF: sub_4027B0+C59↑p
.text:00407A90                                         ; .text:00407A81↑j
.text:00407A90
.text:00407A90 var_C           = dword ptr -0Ch
.text:00407A90
.text:00407A90                 sub     esp, 0Ch
.text:00407A93                 mov     edx, ds:dword_420080
.text:00407A99                 mov     [esp+0Ch+var_C], edx ; void *
.text:00407A9C                 call    sub_40B420
.text:00407AA1                 add     esp, 0Ch
.text:00407AA4                 retn
.text:00407AA4 sub_407A90      endp
.text:00407AA4
.text:00407AA4 ; ---------------------------------------------------------------------------
.text:00407AA5                 align 10h
.text:00407AB0
.text:00407AB0 ; =============== S U B R O U T I N E =======================================
.text:00407AB0
.text:00407AB0
.text:00407AB0 sub_407AB0      proc near               ; DATA XREF: sub_407A40+13↑o
.text:00407AB0
.text:00407AB0 var_1C          = dword ptr -1Ch
.text:00407AB0 var_18          = dword ptr -18h
.text:00407AB0 var_14          = dword ptr -14h
.text:00407AB0 var_10          = dword ptr -10h
.text:00407AB0 arg_0           = dword ptr  4
.text:00407AB0 arg_4           = dword ptr  8
.text:00407AB0
.text:00407AB0                 sub     esp, 1Ch
.text:00407AB3                 mov     ecx, [esp+1Ch+arg_0]
.text:00407AB7                 mov     edx, [ecx+4]
.text:00407ABA                 mov     eax, [ecx]
.text:00407ABC                 mov     ecx, [esp+1Ch+arg_4]
.text:00407AC0                 mov     [esp+1Ch+var_10], 0
.text:00407AC8                 mov     [esp+1Ch+var_1C], eax
.text:00407ACB                 mov     [esp+1Ch+var_14], ecx
.text:00407ACF                 mov     [esp+1Ch+var_18], edx
.text:00407AD3                 call    sub_41D750
.text:00407AD8                 add     esp, 1Ch
.text:00407ADB                 retn
.text:00407ADB sub_407AB0      endp
.text:00407ADB
.text:00407ADB ; ---------------------------------------------------------------------------
.text:00407ADC                 align 10h
.text:00407AE0
.text:00407AE0 ; =============== S U B R O U T I N E =======================================
.text:00407AE0
.text:00407AE0
.text:00407AE0 sub_407AE0      proc near               ; DATA XREF: sub_407A40+B↑o
.text:00407AE0
.text:00407AE0 var_11          = byte ptr -11h
.text:00407AE0 var_10          = dword ptr -10h
.text:00407AE0 var_C           = dword ptr -0Ch
.text:00407AE0 var_8           = dword ptr -8
.text:00407AE0 var_4           = dword ptr -4
.text:00407AE0 arg_0           = dword ptr  4
.text:00407AE0 arg_4           = dword ptr  8
.text:00407AE0
.text:00407AE0                 sub     esp, 14h
.text:00407AE3                 mov     [esp+14h+var_8], edi
.text:00407AE7                 mov     edi, [esp+14h+arg_0]
.text:00407AEB                 mov     [esp+14h+var_4], ebp
.text:00407AEF                 mov     ebp, [esp+14h+arg_4]
.text:00407AF3                 mov     [esp+14h+var_C], esi
.text:00407AF7                 mov     [esp+14h+var_10], ebx
.text:00407AFB                 mov     ebx, [edi+4]
.text:00407AFE                 mov     [esp+14h+var_11], 0
.text:00407B03                 mov     ecx, [edi]
.text:00407B05                 mov     eax, [ebp+0]
.text:00407B08                 mov     edx, [ebp+4]
.text:00407B0B                 mov     esi, ebx
.text:00407B0D                 xor     eax, ecx
.text:00407B0F                 xor     esi, edx
.text:00407B11                 or      esi, eax
.text:00407B13                 jnz     short loc_407B30
.text:00407B15                 mov     edx, [edi+0Ch]
.text:00407B18                 mov     esi, [edi+8]
.text:00407B1B                 mov     ecx, [ebp+0Ch]
.text:00407B1E                 mov     edi, [ebp+8]
.text:00407B21                 mov     eax, edx
.text:00407B23                 xor     eax, ecx
.text:00407B25                 xor     edi, esi
.text:00407B27                 or      eax, edi
.text:00407B29                 jnz     short loc_407B30
.text:00407B2B                 mov     [esp+14h+var_11], 1
.text:00407B30
.text:00407B30 loc_407B30:                             ; CODE XREF: sub_407AE0+33↑j
.text:00407B30                                         ; sub_407AE0+49↑j
.text:00407B30                 movzx   eax, [esp+14h+var_11]
.text:00407B35                 mov     ebx, [esp+14h+var_10]
.text:00407B39                 mov     esi, [esp+14h+var_C]
.text:00407B3D                 mov     edi, [esp+14h+var_8]
.text:00407B41                 mov     ebp, [esp+14h+var_4]
.text:00407B45                 add     esp, 14h
.text:00407B48                 retn
.text:00407B48 sub_407AE0      endp
.text:00407B48
.text:00407B48 ; ---------------------------------------------------------------------------
.text:00407B49                 align 10h
.text:00407B50
.text:00407B50 ; =============== S U B R O U T I N E =======================================
.text:00407B50
.text:00407B50
.text:00407B50 ; int __cdecl sub_407B50(void *)
.text:00407B50 sub_407B50      proc near               ; DATA XREF: sub_407A40+3↑o
.text:00407B50
.text:00407B50 Block           = dword ptr -0Ch
.text:00407B50 var_4           = dword ptr -4
.text:00407B50 arg_0           = dword ptr  4
.text:00407B50
.text:00407B50                 sub     esp, 0Ch
.text:00407B53                 mov     [esp+0Ch+var_4], ebx
.text:00407B57                 mov     ebx, [esp+0Ch+arg_0]
.text:00407B5B                 mov     edx, [ebx+10h]
.text:00407B5E                 mov     [esp+0Ch+Block], edx ; Block
.text:00407B61                 call    free
.text:00407B66                 mov     [esp+0Ch+arg_0], ebx ; Block
.text:00407B6A                 mov     ebx, [esp+0Ch+var_4]
.text:00407B6E                 add     esp, 0Ch
.text:00407B71                 jmp     free
.text:00407B71 sub_407B50      endp
.text:00407B71
.text:00407B71 ; ---------------------------------------------------------------------------
.text:00407B76                 align 10h
.text:00407B80 ; const char dword_407B80[]
.text:00407B80 dword_407B80    dd 8D007325h, 0B6h, 27BC8D00h, 0
.text:00407B80                                         ; DATA XREF: sub_407B90+1FA↓o
.text:00407B80                                         ; sub_407B90+225↓o ...
.text:00407B90
.text:00407B90 ; =============== S U B R O U T I N E =======================================
.text:00407B90
.text:00407B90
.text:00407B90 ; int __cdecl sub_407B90(void *, void *)
.text:00407B90 sub_407B90      proc near               ; CODE XREF: sub_404B50+1182↑p
.text:00407B90                                         ; sub_407100:loc_4072E5↑p ...
.text:00407B90
.text:00407B90 Block           = dword ptr -12Ch
.text:00407B90 ErrorMessage    = dword ptr -128h
.text:00407B90 var_124         = dword ptr -124h
.text:00407B90 var_120         = byte ptr -120h
.text:00407B90 var_111         = byte ptr -111h
.text:00407B90 var_110         = dword ptr -110h
.text:00407B90 var_10C         = dword ptr -10Ch
.text:00407B90 var_107         = byte ptr -107h
.text:00407B90 var_106         = byte ptr -106h
.text:00407B90 var_105         = byte ptr -105h
.text:00407B90 var_104         = dword ptr -104h
.text:00407B90 var_100         = dword ptr -100h
.text:00407B90 var_FC          = dword ptr -0FCh
.text:00407B90 var_F4          = dword ptr -0F4h
.text:00407B90 var_F0          = dword ptr -0F0h
.text:00407B90 var_EC          = dword ptr -0ECh
.text:00407B90 var_E8          = dword ptr -0E8h
.text:00407B90 var_8C          = dword ptr -8Ch
.text:00407B90 var_84          = dword ptr -84h
.text:00407B90 var_80          = dword ptr -80h
.text:00407B90 var_7C          = dword ptr -7Ch
.text:00407B90 var_78          = dword ptr -78h
.text:00407B90 arg_0           = dword ptr  4
.text:00407B90 arg_4           = dword ptr  8
.text:00407B90
.text:00407B90                 push    ebp
.text:00407B91                 push    edi
.text:00407B92                 push    esi
.text:00407B93                 push    ebx
.text:00407B94                 sub     esp, 11Ch
.text:00407B9A                 mov     ecx, [esp+12Ch+arg_0]
.text:00407BA1                 mov     [esp+12Ch+Block], ecx
.text:00407BA4                 call    sub_40AC10
.text:00407BA9                 mov     [esp+12Ch+var_100], eax
.text:00407BAD                 mov     eax, [esp+12Ch+arg_4]
.text:00407BB4                 mov     [esp+12Ch+Block], eax
.text:00407BB7                 call    sub_40AC10
.text:00407BBC                 mov     [esp+12Ch+var_104], eax
.text:00407BC0                 mov     edx, [esp+12Ch+var_100]
.text:00407BC4                 mov     [esp+12Ch+Block], edx ; char *
.text:00407BC7                 call    sub_40AC70
.text:00407BCC                 mov     ebx, eax
.text:00407BCE                 mov     eax, [esp+12Ch+var_104]
.text:00407BD2                 mov     [esp+12Ch+Block], eax ; char *
.text:00407BD5                 call    sub_40AC70
.text:00407BDA                 mov     [esp+12Ch+var_105], 0
.text:00407BDF                 cmp     ebx, eax
.text:00407BE1                 mov     ebp, eax
.text:00407BE3                 jz      loc_407E08
.text:00407BE9
.text:00407BE9 loc_407BE9:                             ; CODE XREF: sub_407B90+287↓j
.text:00407BE9                                         ; sub_407B90+292↓j
.text:00407BE9                 movzx   edx, [esp+12Ch+var_105]
.text:00407BEE                 cmp     ebp, ebx
.text:00407BF0                 mov     [esp+12Ch+var_107], 0
.text:00407BF5                 mov     eax, 0FFh
.text:00407BFA                 mov     [esp+12Ch+var_106], dl
.text:00407BFE                 jbe     short loc_407C02
.text:00407C00                 mov     ebp, ebx
.text:00407C02
.text:00407C02 loc_407C02:                             ; CODE XREF: sub_407B90+6E↑j
.text:00407C02                 cmp     eax, ebp
.text:00407C04                 ja      short loc_407C30
.text:00407C06                 cld
.text:00407C07                 mov     esi, [esp+12Ch+var_100]
.text:00407C0B                 mov     ecx, 0FFh
.text:00407C10                 mov     edi, [esp+12Ch+var_104]
.text:00407C14                 cmp     eax, 0FFh
.text:00407C19                 repe cmpsb
.text:00407C1B                 jnz     short loc_407C30
.text:00407C1D                 mov     [esp+12Ch+var_106], 1
.text:00407C22                 lea     esi, [esi+0]
.text:00407C29                 lea     edi, [edi+0]
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: sub_407B90+74↑j
.text:00407C30                                         ; sub_407B90+8B↑j
.text:00407C30                 cmp     [esp+12Ch+var_106], 0
.text:00407C35                 jnz     short loc_407C47
.text:00407C37
.text:00407C37 loc_407C37:                             ; CODE XREF: sub_407B90+19C↓j
.text:00407C37                 movzx   eax, [esp+12Ch+var_107]
.text:00407C3C                 add     esp, 11Ch
.text:00407C42                 pop     ebx
.text:00407C43                 pop     esi
.text:00407C44                 pop     edi
.text:00407C45                 pop     ebp
.text:00407C46                 retn
.text:00407C47 ; ---------------------------------------------------------------------------
.text:00407C47
.text:00407C47 loc_407C47:                             ; CODE XREF: sub_407B90+A5↑j
.text:00407C47                 mov     eax, [esp+12Ch+arg_0]
.text:00407C4E                 lea     esi, [esp+12Ch+var_8C]
.text:00407C55                 mov     [esp+12Ch+Block], eax ; void *
.text:00407C58                 call    sub_40AD30
.text:00407C5D                 mov     [esp+12Ch+var_10C], eax
.text:00407C61                 mov     edi, [esp+12Ch+arg_4]
.text:00407C68                 mov     [esp+12Ch+Block], edi ; void *
.text:00407C6B                 call    sub_40AD30
.text:00407C70                 mov     [esp+12Ch+var_110], eax
.text:00407C74                 mov     ebx, [esp+12Ch+var_10C]
.text:00407C78                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00407C7C                 mov     [esp+12Ch+Block], ebx ; char *
.text:00407C7F                 call    sub_417BA0
.text:00407C84                 test    eax, eax
.text:00407C86                 jnz     loc_407DDC
.text:00407C8C
.text:00407C8C loc_407C8C:                             ; CODE XREF: sub_407B90+273↓j
.text:00407C8C                 mov     edx, [esp+12Ch+var_110]
.text:00407C90                 lea     esi, [esp+12Ch+var_FC]
.text:00407C94                 mov     [esp+12Ch+ErrorMessage], esi ; int
.text:00407C98                 mov     [esp+12Ch+Block], edx ; char *
.text:00407C9B                 call    sub_417BA0
.text:00407CA0                 test    eax, eax
.text:00407CA2                 jnz     loc_407DB0
.text:00407CA8
.text:00407CA8 loc_407CA8:                             ; CODE XREF: sub_407B90+247↓j
.text:00407CA8                 mov     [esp+12Ch+var_111], 0
.text:00407CAD                 mov     edx, [esp+12Ch+var_80]
.text:00407CB4                 mov     esi, [esp+12Ch+var_84]
.text:00407CBB                 mov     edi, [esp+12Ch+var_F4]
.text:00407CBF                 mov     ecx, [esp+12Ch+var_F0]
.text:00407CC3                 mov     eax, edx
.text:00407CC5                 xor     edi, esi
.text:00407CC7                 xor     eax, ecx
.text:00407CC9                 or      eax, edi
.text:00407CCB                 jnz     short loc_407D00
.text:00407CCD                 mov     edx, [esp+12Ch+var_78]
.text:00407CD4                 mov     esi, [esp+12Ch+var_7C]
.text:00407CDB                 mov     edi, [esp+12Ch+var_EC]
.text:00407CDF                 mov     ecx, [esp+12Ch+var_E8]
.text:00407CE3                 mov     eax, edx
.text:00407CE5                 xor     edi, esi
.text:00407CE7                 xor     eax, ecx
.text:00407CE9                 or      eax, edi
.text:00407CEB                 jnz     short loc_407D00
.text:00407CED                 mov     [esp+12Ch+var_111], 1
.text:00407CF2                 lea     esi, [esi+0]
.text:00407CF9                 lea     edi, [edi+0]
.text:00407D00
.text:00407D00 loc_407D00:                             ; CODE XREF: sub_407B90+13B↑j
.text:00407D00                                         ; sub_407B90+15B↑j
.text:00407D00                 movzx   ebx, [esp+12Ch+var_111]
.text:00407D05                 test    bl, bl
.text:00407D07                 mov     [esp+12Ch+var_107], bl
.text:00407D0B                 jz      short loc_407D14
.text:00407D0D                 cmp     [esp+12Ch+var_105], 0
.text:00407D12                 jz      short loc_407D31
.text:00407D14
.text:00407D14 loc_407D14:                             ; CODE XREF: sub_407B90+17B↑j
.text:00407D14                                         ; sub_407B90+1E1↓j ...
.text:00407D14                 mov     edx, [esp+12Ch+var_10C]
.text:00407D18                 mov     [esp+12Ch+Block], edx ; Block
.text:00407D1B                 call    free
.text:00407D20                 mov     eax, [esp+12Ch+var_110]
.text:00407D24                 mov     [esp+12Ch+Block], eax ; Block
.text:00407D27                 call    free
.text:00407D2C                 jmp     loc_407C37
.text:00407D31 ; ---------------------------------------------------------------------------
.text:00407D31
.text:00407D31 loc_407D31:                             ; CODE XREF: sub_407B90+182↑j
.text:00407D31                 call    _errno
.text:00407D36                 mov     dword ptr [eax], 0
.text:00407D3C                 mov     edi, [esp+12Ch+var_110]
.text:00407D40                 mov     [esp+12Ch+ErrorMessage], 3
.text:00407D48                 mov     [esp+12Ch+Block], edi
.text:00407D4B                 call    sub_418B30
.text:00407D50                 test    eax, eax
.text:00407D52                 js      short loc_407D73
.text:00407D54                 xor     ebx, ebx
.text:00407D56                 cmp     eax, ebp
.text:00407D58                 ja      short loc_407D6D
.text:00407D5A                 cld
.text:00407D5B                 mov     esi, [esp+12Ch+var_100]
.text:00407D5F                 cmp     eax, eax
.text:00407D61                 mov     edi, [esp+12Ch+var_104]
.text:00407D65                 mov     ecx, eax
.text:00407D67                 repe cmpsb
.text:00407D69                 jnz     short loc_407D6D
.text:00407D6B                 mov     bl, 1
.text:00407D6D
.text:00407D6D loc_407D6D:                             ; CODE XREF: sub_407B90+1C8↑j
.text:00407D6D                                         ; sub_407B90+1D9↑j
.text:00407D6D                 mov     [esp+12Ch+var_107], bl
.text:00407D71                 jmp     short loc_407D14
.text:00407D73 ; ---------------------------------------------------------------------------
.text:00407D73
.text:00407D73 loc_407D73:                             ; CODE XREF: sub_407B90+1C2↑j
.text:00407D73                 call    _errno
.text:00407D78                 mov     ebp, [eax]
.text:00407D7A                 test    ebp, ebp
.text:00407D7C                 jnz     short loc_407D85
.text:00407D7E
.text:00407D7E loc_407D7E:                             ; CODE XREF: sub_407B90+21C↓j
.text:00407D7E                 mov     [esp+12Ch+var_107], 0
.text:00407D83                 jmp     short loc_407D14
.text:00407D85 ; ---------------------------------------------------------------------------
.text:00407D85
.text:00407D85 loc_407D85:                             ; CODE XREF: sub_407B90+1EC↑j
.text:00407D85                 call    _errno
.text:00407D8A                 mov     [esp+12Ch+var_124], offset dword_407B80 ; char *
.text:00407D92                 mov     ecx, [esp+12Ch+var_110]
.text:00407D96                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00407D9A                 mov     esi, [eax]
.text:00407D9C                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407DA3                 mov     [esp+12Ch+ErrorMessage], esi ; ErrorMessage
.text:00407DA7                 call    sub_4143B0
.text:00407DAC                 jmp     short loc_407D7E
.text:00407DAC ; ---------------------------------------------------------------------------
.text:00407DAE                 align 10h
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: sub_407B90+112↑j
.text:00407DB0                 call    _errno
.text:00407DB5                 mov     [esp+12Ch+var_124], offset dword_407B80 ; char *
.text:00407DBD                 mov     ecx, [esp+12Ch+var_110]
.text:00407DC1                 mov     dword ptr [esp+12Ch+var_120], ecx ; char
.text:00407DC5                 mov     edi, [eax]
.text:00407DC7                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407DCE                 mov     [esp+12Ch+ErrorMessage], edi ; ErrorMessage
.text:00407DD2                 call    sub_4143B0
.text:00407DD7                 jmp     loc_407CA8
.text:00407DDC ; ---------------------------------------------------------------------------
.text:00407DDC
.text:00407DDC loc_407DDC:                             ; CODE XREF: sub_407B90+F6↑j
.text:00407DDC                 call    _errno
.text:00407DE1                 mov     [esp+12Ch+var_124], offset dword_407B80 ; char *
.text:00407DE9                 mov     ebx, [esp+12Ch+var_10C]
.text:00407DED                 mov     dword ptr [esp+12Ch+var_120], ebx ; char
.text:00407DF1                 mov     ecx, [eax]
.text:00407DF3                 mov     [esp+12Ch+Block], 1 ; Code
.text:00407DFA                 mov     [esp+12Ch+ErrorMessage], ecx ; ErrorMessage
.text:00407DFE                 call    sub_4143B0
.text:00407E03                 jmp     loc_407C8C
.text:00407E08 ; ---------------------------------------------------------------------------
.text:00407E08
.text:00407E08 loc_407E08:                             ; CODE XREF: sub_407B90+53↑j
.text:00407E08                 cld
.text:00407E09                 mov     esi, [esp+12Ch+var_100]
.text:00407E0D                 cmp     ebx, ebx
.text:00407E0F                 mov     edi, [esp+12Ch+var_104]
.text:00407E13                 mov     ecx, ebx
.text:00407E15                 repe cmpsb
.text:00407E17                 jnz     loc_407BE9
.text:00407E1D                 mov     [esp+12Ch+var_105], 1
.text:00407E22                 jmp     loc_407BE9
.text:00407E22 sub_407B90      endp
.text:00407E22
.text:00407E22 ; ---------------------------------------------------------------------------
.text:00407E27                 align 10h
.text:00407E30
.text:00407E30 ; =============== S U B R O U T I N E =======================================
.text:00407E30
.text:00407E30
.text:00407E30 ; int __cdecl sub_407E30(char *, int, int, char)
.text:00407E30 sub_407E30      proc near               ; CODE XREF: sub_404B50+145A↑p
.text:00407E30
.text:00407E30 var_FC          = dword ptr -0FCh
.text:00407E30 var_F8          = dword ptr -0F8h
.text:00407E30 var_F4          = dword ptr -0F4h
.text:00407E30 var_F0          = dword ptr -0F0h
.text:00407E30 var_EC          = dword ptr -0ECh
.text:00407E30 var_D4          = dword ptr -0D4h
.text:00407E30 var_D0          = dword ptr -0D0h
.text:00407E30 var_C4          = dword ptr -0C4h
.text:00407E30 var_BD          = byte ptr -0BDh
.text:00407E30 var_BC          = dword ptr -0BCh
.text:00407E30 var_B8          = dword ptr -0B8h
.text:00407E30 var_B4          = dword ptr -0B4h
.text:00407E30 var_B0          = dword ptr -0B0h
.text:00407E30 var_AC          = dword ptr -0ACh
.text:00407E30 var_A8          = dword ptr -0A8h
.text:00407E30 var_A4          = dword ptr -0A4h
.text:00407E30 var_A0          = dword ptr -0A0h
.text:00407E30 var_9C          = dword ptr -9Ch
.text:00407E30 var_5C          = dword ptr -5Ch
.text:00407E30 var_58          = dword ptr -58h
.text:00407E30 var_2C          = dword ptr -2Ch
.text:00407E30 var_28          = dword ptr -28h
.text:00407E30 var_24          = dword ptr -24h
.text:00407E30 var_20          = dword ptr -20h
.text:00407E30 arg_0           = dword ptr  4
.text:00407E30 arg_4           = dword ptr  8
.text:00407E30 arg_8           = dword ptr  0Ch
.text:00407E30 arg_C           = byte ptr  10h
.text:00407E30
.text:00407E30                 push    ebp
.text:00407E31                 push    edi
.text:00407E32                 push    esi
.text:00407E33                 push    ebx
.text:00407E34                 sub     esp, 0ECh
.text:00407E3A                 mov     esi, [esp+0FCh+arg_8]
.text:00407E41                 test    [esp+0FCh+arg_C], 1
.text:00407E49                 mov     edx, [esp+0FCh+arg_4]
.text:00407E50                 mov     edi, [esp+0FCh+arg_4]
.text:00407E57                 mov     ebx, [esi+40h]
.text:00407E5A                 mov     eax, [edx+44h]
.text:00407E5D                 mov     ecx, [edi+40h]
.text:00407E60                 mov     [esp+0FCh+var_A4], ebx
.text:00407E64                 mov     edx, [esi+44h]
.text:00407E67                 mov     [esp+0FCh+var_A8], eax
.text:00407E6B                 mov     [esp+0FCh+var_A0], ecx
.text:00407E6F                 mov     [esp+0FCh+var_AC], edx
.text:00407E73                 jz      loc_408236
.text:00407E79                 mov     ebp, ds:dword_420090
.text:00407E7F                 test    ebp, ebp
.text:00407E81                 jz      loc_408333
.text:00407E87
.text:00407E87 loc_407E87:                             ; CODE XREF: sub_407E30+534↓j
.text:00407E87                 mov     ecx, ds:dword_4200A0
.text:00407E8D                 test    ecx, ecx
.text:00407E8F                 jz      loc_408310
.text:00407E95
.text:00407E95 loc_407E95:                             ; CODE XREF: sub_407E30+4FE↓j
.text:00407E95                 mov     eax, [esp+0FCh+arg_4]
.text:00407E9C                 mov     esi, ds:dword_420090
.text:00407EA2                 mov     edx, [eax+10h]
.text:00407EA5                 mov     edi, [eax+14h]
.text:00407EA8                 mov     [ecx], edx
.text:00407EAA                 mov     [ecx+4], edi
.text:00407EAD                 mov     [esp+0FCh+var_F8], ecx
.text:00407EB1                 mov     [esp+0FCh+var_FC], esi
.text:00407EB4                 call    sub_40B690
.text:00407EB9                 mov     [esp+0FCh+var_B0], eax
.text:00407EBD                 test    eax, eax
.text:00407EBF                 jz      loc_408369
.text:00407EC5                 mov     ebx, [esp+0FCh+var_B0]
.text:00407EC9                 cmp     ebx, ds:dword_4200A0
.text:00407ECF                 jz      loc_4082FC
.text:00407ED5
.text:00407ED5 loc_407ED5:                             ; CODE XREF: sub_407E30+4D4↓j
.text:00407ED5                 mov     ebp, [esp+0FCh+var_B0]
.text:00407ED9                 mov     edi, [esp+0FCh+var_B0]
.text:00407EDD                 cmp     byte ptr [ebp+0Ch], 0
.text:00407EE1                 mov     esi, [edi+8]
.text:00407EE4                 mov     [esp+0FCh+var_B4], esi
.text:00407EE8                 mov     [esp+0FCh+var_C4], esi
.text:00407EEC                 jnz     loc_40821F
.text:00407EF2                 mov     [esp+0FCh+var_B4], 3E8h
.text:00407EFA                 mov     esi, [esp+0FCh+arg_4]
.text:00407F01                 mov     edx, [esp+0FCh+arg_4]
.text:00407F08                 mov     eax, [esp+0FCh+var_A0]
.text:00407F0C                 mov     edi, [esi+3Ch]
.text:00407F0F                 mov     esi, [esp+0FCh+arg_4]
.text:00407F16                 mov     ecx, [edx+38h]
.text:00407F19                 mov     [esp+0FCh+var_BC], edi
.text:00407F1D                 mov     ebp, [esi+48h]
.text:00407F20                 mov     edx, ecx
.text:00407F22                 mov     [esp+0FCh+var_B8], ecx
.text:00407F26                 mov     edi, [esi+4Ch]
.text:00407F29                 or      edx, ebp
.text:00407F2B                 or      edx, eax
.text:00407F2D                 mov     ecx, 2710h
.text:00407F32                 mov     eax, [esp+0FCh+var_BC]
.text:00407F36                 and     dl, 1
.text:00407F39                 mov     [esp+0FCh+var_BD], dl
.text:00407F3D                 cdq
.text:00407F3E                 idiv    ecx
.text:00407F40                 mov     esi, eax
.text:00407F42                 mov     ebp, edx
.text:00407F44                 mov     eax, edi
.text:00407F46                 cdq
.text:00407F47                 idiv    ecx
.text:00407F49                 mov     ebx, eax
.text:00407F4B                 or      ebp, edx
.text:00407F4D                 mov     eax, [esp+0FCh+var_A8]
.text:00407F51                 cdq
.text:00407F52                 idiv    ecx
.text:00407F54                 or      ebp, edx
.text:00407F56                 jnz     loc_408020
.text:00407F5C                 mov     [esp+0FCh+var_B4], 2710h
.text:00407F64                 mov     ecx, esi
.text:00407F66                 mov     ebp, eax
.text:00407F68                 nop
.text:00407F69                 lea     esi, [esi+0]
.text:00407F70
.text:00407F70 loc_407F70:                             ; CODE XREF: sub_407E30+1CF↓j
.text:00407F70                 mov     edi, [esp+0FCh+var_C4]
.text:00407F74                 cmp     [esp+0FCh+var_B4], edi
.text:00407F78                 jge     loc_408020
.text:00407F7E                 mov     eax, 66666667h
.text:00407F83                 imul    ecx
.text:00407F85                 mov     eax, 66666667h
.text:00407F8A                 mov     edi, edx
.text:00407F8C                 mov     edx, ecx
.text:00407F8E                 sar     edi, 2
.text:00407F91                 sar     edx, 1Fh
.text:00407F94                 sub     edi, edx
.text:00407F96                 imul    ebx
.text:00407F98                 lea     esi, [edi+edi*4]
.text:00407F9B                 mov     eax, 66666667h
.text:00407FA0                 add     esi, esi
.text:00407FA2                 sub     ecx, esi
.text:00407FA4                 mov     [esp+0FCh+var_D0], edx
.text:00407FA8                 mov     esi, [esp+0FCh+var_D0]
.text:00407FAC                 mov     edx, ebx
.text:00407FAE                 sar     edx, 1Fh
.text:00407FB1                 sar     esi, 2
.text:00407FB4                 sub     esi, edx
.text:00407FB6                 lea     edx, [esi+esi*4]
.text:00407FB9                 add     edx, edx
.text:00407FBB                 sub     ebx, edx
.text:00407FBD                 imul    ebp
.text:00407FBF                 or      ecx, ebx
.text:00407FC1                 mov     ebx, ebp
.text:00407FC3                 sar     ebx, 1Fh
.text:00407FC6                 mov     [esp+0FCh+var_D0], edx
.text:00407FCA                 mov     edx, [esp+0FCh+var_D0]
.text:00407FCE                 mov     [esp+0FCh+var_D4], eax
.text:00407FD2                 sar     edx, 2
.text:00407FD5                 sub     edx, ebx
.text:00407FD7                 lea     ebx, [edx+edx*4]
.text:00407FDA                 add     ebx, ebx
.text:00407FDC                 sub     ebp, ebx
.text:00407FDE                 or      ecx, ebp
.text:00407FE0                 jnz     short loc_408020
.text:00407FE2                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:00407FEA                 jz      short loc_408004
.text:00407FEC                 mov     eax, [esp+0FCh+var_B4]
.text:00407FF0                 mov     ecx, edi
.text:00407FF2                 mov     ebp, edx
.text:00407FF4                 lea     ebx, [eax+eax*4]
.text:00407FF7                 add     ebx, ebx
.text:00407FF9                 mov     [esp+0FCh+var_B4], ebx
.text:00407FFD                 mov     ebx, esi
.text:00407FFF                 jmp     loc_407F70
.text:00408004 ; ---------------------------------------------------------------------------
.text:00408004
.text:00408004 loc_408004:                             ; CODE XREF: sub_407E30+1BA↑j
.text:00408004                 cmp     [esp+0FCh+var_BD], 0
.text:00408009                 jnz     short loc_408020
.text:0040800B                 mov     [esp+0FCh+var_B4], 77359400h
.text:00408013                 lea     esi, [esi+0]
.text:00408019                 lea     edi, [edi+0]
.text:00408020
.text:00408020 loc_408020:                             ; CODE XREF: sub_407E30+126↑j
.text:00408020                                         ; sub_407E30+148↑j ...
.text:00408020                 mov     ebp, [esp+0FCh+var_B4]
.text:00408024                 mov     eax, [esp+0FCh+var_B0]
.text:00408028                 cmp     ebp, 3E8h
.text:0040802E                 mov     [eax+8], ebp
.text:00408031                 jle     loc_408210
.text:00408037                 mov     eax, 10624DD3h
.text:0040803C                 mov     ecx, [esp+0FCh+var_AC]
.text:00408040                 imul    [esp+0FCh+var_AC]
.text:00408044                 mov     eax, [esp+0FCh+var_A4]
.text:00408048                 sar     ecx, 1Fh
.text:0040804B                 sar     edx, 6
.text:0040804E                 sub     edx, ecx
.text:00408050                 imul    edx, 3E8h
.text:00408056                 cmp     [esp+0FCh+var_B4], 77359400h
.text:0040805E                 mov     [esp+0FCh+var_AC], edx
.text:00408062                 jz      loc_4082F4
.text:00408068
.text:00408068 loc_408068:                             ; CODE XREF: sub_407E30+4C7↓j
.text:00408068                 mov     ebx, [esp+0FCh+var_A0]
.text:0040806C                 cmp     [esp+0FCh+var_A4], ebx
.text:00408070                 jl      loc_4082EA
.text:00408076                 cmp     [esp+0FCh+var_A4], ebx
.text:0040807A                 jz      loc_4082DC
.text:00408080
.text:00408080 loc_408080:                             ; CODE XREF: sub_407E30+4B4↓j
.text:00408080                 cmp     [esp+0FCh+var_A0], eax
.text:00408084                 jl      loc_4082D2
.text:0040808A                 cmp     [esp+0FCh+var_A0], eax
.text:0040808E                 jz      loc_4082B9
.text:00408094
.text:00408094 loc_408094:                             ; CODE XREF: sub_407E30+49C↓j
.text:00408094                 cmp     [esp+0FCh+var_B4], 77359400h
.text:0040809C                 mov     ebp, [esp+0FCh+var_B8]
.text:004080A0                 mov     esi, [esp+0FCh+var_BC]
.text:004080A4                 mov     eax, [esp+0FCh+var_A0]
.text:004080A8                 mov     [esp+0FCh+var_2C], ebp
.text:004080AF                 mov     [esp+0FCh+var_28], esi
.text:004080B6                 jz      loc_4082B1
.text:004080BC
.text:004080BC loc_4080BC:                             ; CODE XREF: sub_407E30+484↓j
.text:004080BC                 mov     [esp+0FCh+var_24], eax
.text:004080C3                 mov     esi, 38E38E39h
.text:004080C8                 mov     ebx, [esp+0FCh+var_B4]
.text:004080CC                 mov     eax, [esp+0FCh+var_B4]
.text:004080D0                 mov     edi, [esp+0FCh+var_A8]
.text:004080D4                 sar     ebx, 1Fh
.text:004080D7                 imul    esi
.text:004080D9                 mov     eax, [esp+0FCh+arg_4]
.text:004080E0                 mov     ecx, [eax]
.text:004080E2                 sar     edx, 1
.text:004080E4                 sub     edx, ebx
.text:004080E6                 and     ecx, 0F000h
.text:004080EC                 add     edx, edi
.text:004080EE                 cmp     ecx, 0A000h
.text:004080F4                 mov     [esp+0FCh+var_20], edx
.text:004080FB                 jz      short loc_40811B
.text:004080FD                 mov     edx, [esp+0FCh+arg_0]
.text:00408104                 lea     esi, [esp+0FCh+var_2C]
.text:0040810B                 mov     [esp+0FCh+var_F8], esi ; int
.text:0040810F                 mov     [esp+0FCh+var_FC], edx ; char *
.text:00408112                 call    sub_40AEB0
.text:00408117                 test    eax, eax
.text:00408119                 jz      short loc_40812B
.text:0040811B
.text:0040811B loc_40811B:                             ; CODE XREF: sub_407E30+2CB↑j
.text:0040811B                 mov     eax, 0FFFFFFFEh
.text:00408120
.text:00408120 loc_408120:                             ; CODE XREF: sub_407E30+33F↓j
.text:00408120                                         ; sub_407E30+413↓j ...
.text:00408120                 add     esp, 0ECh
.text:00408126                 pop     ebx
.text:00408127                 pop     esi
.text:00408128                 pop     edi
.text:00408129                 pop     ebp
.text:0040812A                 retn
.text:0040812B ; ---------------------------------------------------------------------------
.text:0040812B
.text:0040812B loc_40812B:                             ; CODE XREF: sub_407E30+2E9↑j
.text:0040812B                 mov     edi, [esp+0FCh+arg_0]
.text:00408132                 lea     ebx, [esp+0FCh+var_9C]
.text:00408136                 mov     [esp+0FCh+var_F8], ebx ; int
.text:0040813A                 mov     [esp+0FCh+var_FC], edi ; char *
.text:0040813D                 call    sub_417BA0
.text:00408142                 mov     edx, [esp+0FCh+var_A0]
.text:00408146                 mov     ebx, eax
.text:00408148                 mov     ecx, [esp+0FCh+var_5C]
.text:0040814F                 mov     ebp, [esp+0FCh+var_A8]
.text:00408153                 xor     edx, ecx
.text:00408155                 or      edx, eax
.text:00408157                 mov     eax, [esp+0FCh+var_58]
.text:0040815E                 xor     ebp, eax
.text:00408160                 or      edx, ebp
.text:00408162                 jnz     loc_408283
.text:00408168
.text:00408168 loc_408168:                             ; CODE XREF: sub_407E30+47C↓j
.text:00408168                 test    ebx, ebx
.text:0040816A                 mov     eax, 0FFFFFFFEh
.text:0040816F                 jnz     short loc_408120
.text:00408171                 mov     ebx, [esp+0FCh+var_5C]
.text:00408178                 mov     ecx, [esp+0FCh+var_58]
.text:0040817F                 mov     esi, [esp+0FCh+var_B4]
.text:00408183                 mov     [esp+0FCh+var_B4], 3E8h
.text:0040818B                 and     ebx, 1
.text:0040818E                 imul    ebx, 3B9ACA00h
.text:00408194                 add     ebx, ecx
.text:00408196                 mov     eax, ebx
.text:00408198                 cdq
.text:00408199                 idiv    [esp+0FCh+var_B4]
.text:0040819D                 mov     ecx, eax
.text:0040819F                 mov     eax, 66666667h
.text:004081A4                 imul    ecx
.text:004081A6                 mov     eax, ecx
.text:004081A8                 mov     ebp, edx
.text:004081AA                 sar     ebp, 2
.text:004081AD                 cdq
.text:004081AE                 sub     ebp, edx
.text:004081B0                 lea     edi, [ebp+ebp*4+0]
.text:004081B4                 add     edi, edi
.text:004081B6                 cmp     ecx, edi
.text:004081B8                 jz      short loc_408210
.text:004081BA                 mov     ebx, 66666667h
.text:004081BF
.text:004081BF loc_4081BF:                             ; CODE XREF: sub_407E30+3D3↓j
.text:004081BF                 cmp     [esp+0FCh+var_B4], 3B9ACA00h
.text:004081C7                 jz      loc_408279
.text:004081CD                 mov     eax, [esp+0FCh+var_B4]
.text:004081D1                 lea     edi, [eax+eax*4]
.text:004081D4                 add     edi, edi
.text:004081D6                 mov     [esp+0FCh+var_B4], edi
.text:004081DA                 cmp     edi, esi
.text:004081DC                 jz      short loc_408210
.text:004081DE                 mov     eax, ecx
.text:004081E0                 mov     ebp, ecx
.text:004081E2                 sar     ebp, 1Fh
.text:004081E5                 imul    ebx
.text:004081E7                 sar     edx, 2
.text:004081EA                 sub     edx, ebp
.text:004081EC                 mov     eax, edx
.text:004081EE                 mov     ecx, edx
.text:004081F0                 imul    ebx
.text:004081F2                 mov     eax, ecx
.text:004081F4                 mov     edi, edx
.text:004081F6                 sar     edi, 2
.text:004081F9                 cdq
.text:004081FA                 sub     edi, edx
.text:004081FC                 lea     edx, [edi+edi*4]
.text:004081FF                 add     edx, edx
.text:00408201                 cmp     ecx, edx
.text:00408203                 jnz     short loc_4081BF
.text:00408205                 lea     esi, [esi+0]
.text:00408209                 lea     edi, [edi+0]
.text:00408210
.text:00408210 loc_408210:                             ; CODE XREF: sub_407E30+201↑j
.text:00408210                                         ; sub_407E30+388↑j ...
.text:00408210                 mov     esi, [esp+0FCh+var_B0]
.text:00408214                 mov     ebx, [esp+0FCh+var_B4]
.text:00408218                 mov     byte ptr [esi+0Ch], 1
.text:0040821C                 mov     [esi+8], ebx
.text:0040821F
.text:0040821F loc_40821F:                             ; CODE XREF: sub_407E30+BC↑j
.text:0040821F                 cmp     [esp+0FCh+var_B4], 77359400h
.text:00408227                 jz      short loc_408272
.text:00408229
.text:00408229 loc_408229:                             ; CODE XREF: sub_407E30+447↓j
.text:00408229                 mov     eax, [esp+0FCh+var_AC]
.text:0040822D                 cdq
.text:0040822E                 idiv    [esp+0FCh+var_B4]
.text:00408232                 sub     [esp+0FCh+var_AC], edx
.text:00408236
.text:00408236 loc_408236:                             ; CODE XREF: sub_407E30+43↑j
.text:00408236                 mov     ecx, [esp+0FCh+var_A4]
.text:0040823A                 mov     eax, 0FFFFFFFFh
.text:0040823F                 cmp     [esp+0FCh+var_A0], ecx
.text:00408243                 jl      loc_408120
.text:00408249                 mov     eax, 1
.text:0040824E                 jg      loc_408120
.text:00408254                 mov     edi, [esp+0FCh+var_AC]
.text:00408258                 mov     eax, 0FFFFFFFFh
.text:0040825D                 cmp     [esp+0FCh+var_A8], edi
.text:00408261                 jl      loc_408120
.text:00408267                 setnle  dl
.text:0040826A                 movzx   eax, dl
.text:0040826D                 jmp     loc_408120
.text:00408272 ; ---------------------------------------------------------------------------
.text:00408272
.text:00408272 loc_408272:                             ; CODE XREF: sub_407E30+3F7↑j
.text:00408272                 and     [esp+0FCh+var_A4], 0FFFFFFFEh
.text:00408277                 jmp     short loc_408229
.text:00408279 ; ---------------------------------------------------------------------------
.text:00408279
.text:00408279 loc_408279:                             ; CODE XREF: sub_407E30+397↑j
.text:00408279                 mov     [esp+0FCh+var_B4], 77359400h
.text:00408281                 jmp     short loc_408210
.text:00408283 ; ---------------------------------------------------------------------------
.text:00408283
.text:00408283 loc_408283:                             ; CODE XREF: sub_407E30+332↑j
.text:00408283                 mov     [esp+0FCh+var_F8], esi ; int
.text:00408287                 mov     edx, [esp+0FCh+var_A0]
.text:0040828B                 mov     ebp, [esp+0FCh+var_A8]
.text:0040828F                 mov     esi, [esp+0FCh+arg_0]
.text:00408296                 mov     [esp+0FCh+var_24], edx
.text:0040829D                 mov     [esp+0FCh+var_20], ebp
.text:004082A4                 mov     [esp+0FCh+var_FC], esi ; char *
.text:004082A7                 call    sub_40AEB0
.text:004082AC                 jmp     loc_408168
.text:004082B1 ; ---------------------------------------------------------------------------
.text:004082B1
.text:004082B1 loc_4082B1:                             ; CODE XREF: sub_407E30+286↑j
.text:004082B1                 or      eax, 1
.text:004082B4                 jmp     loc_4080BC
.text:004082B9 ; ---------------------------------------------------------------------------
.text:004082B9
.text:004082B9 loc_4082B9:                             ; CODE XREF: sub_407E30+25E↑j
.text:004082B9                 mov     eax, [esp+0FCh+var_AC]
.text:004082BD                 mov     ebx, [esp+0FCh+var_AC]
.text:004082C1                 cdq
.text:004082C2                 idiv    [esp+0FCh+var_B4]
.text:004082C6                 sub     ebx, edx
.text:004082C8                 cmp     [esp+0FCh+var_A8], ebx
.text:004082CC                 jge     loc_408094
.text:004082D2
.text:004082D2 loc_4082D2:                             ; CODE XREF: sub_407E30+254↑j
.text:004082D2                 mov     eax, 0FFFFFFFFh
.text:004082D7                 jmp     loc_408120
.text:004082DC ; ---------------------------------------------------------------------------
.text:004082DC
.text:004082DC loc_4082DC:                             ; CODE XREF: sub_407E30+24A↑j
.text:004082DC                 mov     edi, [esp+0FCh+var_A8]
.text:004082E0                 cmp     [esp+0FCh+var_AC], edi
.text:004082E4                 jg      loc_408080
.text:004082EA
.text:004082EA loc_4082EA:                             ; CODE XREF: sub_407E30+240↑j
.text:004082EA                 mov     eax, 1
.text:004082EF                 jmp     loc_408120
.text:004082F4 ; ---------------------------------------------------------------------------
.text:004082F4
.text:004082F4 loc_4082F4:                             ; CODE XREF: sub_407E30+232↑j
.text:004082F4                 and     eax, 0FFFFFFFEh
.text:004082F7                 jmp     loc_408068
.text:004082FC ; ---------------------------------------------------------------------------
.text:004082FC
.text:004082FC loc_4082FC:                             ; CODE XREF: sub_407E30+9F↑j
.text:004082FC                 xor     ecx, ecx
.text:004082FE                 mov     ds:dword_4200A0, ecx
.text:00408304                 jmp     loc_407ED5
.text:00408304 ; ---------------------------------------------------------------------------
.text:00408309                 align 10h
.text:00408310
.text:00408310 loc_408310:                             ; CODE XREF: sub_407E30+5F↑j
.text:00408310                 mov     [esp+0FCh+var_FC], 10h ; size_t
.text:00408317                 call    sub_40A850
.text:0040831C                 mov     ds:dword_4200A0, eax
.text:00408321                 mov     ecx, eax
.text:00408323                 mov     dword ptr [eax+8], 77359400h
.text:0040832A                 mov     byte ptr [eax+0Ch], 0
.text:0040832E                 jmp     loc_407E95
.text:00408333 ; ---------------------------------------------------------------------------
.text:00408333
.text:00408333 loc_408333:                             ; CODE XREF: sub_407E30+51↑j
.text:00408333                 mov     [esp+0FCh+var_EC], offset free
.text:0040833B                 mov     [esp+0FCh+var_F0], offset sub_4083A0
.text:00408343                 mov     [esp+0FCh+var_F4], offset sub_408370
.text:0040834B                 mov     [esp+0FCh+var_F8], 0
.text:00408353                 mov     [esp+0FCh+var_FC], 10h
.text:0040835A                 call    sub_40B140
.text:0040835F                 mov     ds:dword_420090, eax
.text:00408364                 jmp     loc_407E87
.text:00408369 ; ---------------------------------------------------------------------------
.text:00408369
.text:00408369 loc_408369:                             ; CODE XREF: sub_407E30+8F↑j
.text:00408369                 call    sub_40B0D0
.text:00408369 sub_407E30      endp
.text:00408369
.text:00408369 ; ---------------------------------------------------------------------------
.text:0040836E                 align 10h
.text:00408370
.text:00408370 ; =============== S U B R O U T I N E =======================================
.text:00408370
.text:00408370
.text:00408370 sub_408370      proc near               ; DATA XREF: sub_407E30+513↑o
.text:00408370
.text:00408370 var_1C          = dword ptr -1Ch
.text:00408370 var_18          = dword ptr -18h
.text:00408370 var_14          = dword ptr -14h
.text:00408370 var_10          = dword ptr -10h
.text:00408370 arg_0           = dword ptr  4
.text:00408370 arg_4           = dword ptr  8
.text:00408370
.text:00408370                 sub     esp, 1Ch
.text:00408373                 mov     ecx, [esp+1Ch+arg_0]
.text:00408377                 mov     edx, [ecx+4]
.text:0040837A                 mov     eax, [ecx]
.text:0040837C                 mov     ecx, [esp+1Ch+arg_4]
.text:00408380                 mov     [esp+1Ch+var_10], 0
.text:00408388                 mov     [esp+1Ch+var_1C], eax
.text:0040838B                 mov     [esp+1Ch+var_14], ecx
.text:0040838F                 mov     [esp+1Ch+var_18], edx
.text:00408393                 call    sub_41D750
.text:00408398                 add     esp, 1Ch
.text:0040839B                 retn
.text:0040839B sub_408370      endp
.text:0040839B
.text:0040839B ; ---------------------------------------------------------------------------
.text:0040839C                 align 10h
.text:004083A0
.text:004083A0 ; =============== S U B R O U T I N E =======================================
.text:004083A0
.text:004083A0
.text:004083A0 sub_4083A0      proc near               ; DATA XREF: sub_407E30+50B↑o
.text:004083A0
.text:004083A0 arg_0           = dword ptr  4
.text:004083A0 arg_4           = dword ptr  8
.text:004083A0
.text:004083A0                 push    ebx
.text:004083A1                 mov     ecx, [esp+4+arg_0]
.text:004083A5                 mov     edx, [ecx+4]
.text:004083A8                 mov     eax, [ecx]
.text:004083AA                 mov     ecx, [esp+4+arg_4]
.text:004083AE                 mov     ebx, [ecx+4]
.text:004083B1                 mov     ecx, [ecx]
.text:004083B3                 xor     edx, ebx
.text:004083B5                 xor     eax, ecx
.text:004083B7                 pop     ebx
.text:004083B8                 or      eax, edx
.text:004083BA                 setz    dl
.text:004083BD                 movzx   eax, dl
.text:004083C0                 retn
.text:004083C0 sub_4083A0      endp
.text:004083C0
.text:004083C0 ; ---------------------------------------------------------------------------
.text:004083C1                 align 10h
.text:004083D0
.text:004083D0 ; =============== S U B R O U T I N E =======================================
.text:004083D0
.text:004083D0
.text:004083D0 ; int __cdecl sub_4083D0(char *, int, int)
.text:004083D0 sub_4083D0      proc near               ; CODE XREF: sub_404060+1B1↑p
.text:004083D0                                         ; sub_404B50+412↑p
.text:004083D0
.text:004083D0 FileName        = dword ptr -9Ch
.text:004083D0 OpenFlag        = dword ptr -98h
.text:004083D0 var_94          = dword ptr -94h
.text:004083D0 var_8C          = dword ptr -8Ch
.text:004083D0 var_70          = dword ptr -70h
.text:004083D0 var_6C          = dword ptr -6Ch
.text:004083D0 var_10          = dword ptr -10h
.text:004083D0 var_C           = dword ptr -0Ch
.text:004083D0 var_8           = dword ptr -8
.text:004083D0 var_4           = dword ptr -4
.text:004083D0 arg_0           = dword ptr  4
.text:004083D0 arg_4           = dword ptr  8
.text:004083D0 arg_8           = dword ptr  0Ch
.text:004083D0
.text:004083D0                 sub     esp, 9Ch
.text:004083D6                 mov     [esp+9Ch+var_10], ebx
.text:004083DD                 mov     ebx, [esp+9Ch+arg_8]
.text:004083E4                 mov     [esp+9Ch+var_8], edi
.text:004083EB                 mov     edi, [esp+9Ch+arg_4]
.text:004083F2                 cmp     ebx, 0FFFFFFFFh
.text:004083F5                 mov     [esp+9Ch+var_4], ebp
.text:004083FC                 mov     ebp, [esp+9Ch+arg_0]
.text:00408403                 mov     [esp+9Ch+var_C], esi
.text:0040840A                 jz      loc_4084B0
.text:00408410                 cmp     edi, 0FFFFFFFFh
.text:00408413                 jz      loc_4084B0
.text:00408419
.text:00408419 loc_408419:                             ; CODE XREF: sub_4083D0+101↓j
.text:00408419                                         ; sub_4083D0+10B↓j
.text:00408419                 mov     [esp+9Ch+OpenFlag], 4 ; OpenFlag
.text:00408421                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:00408424                 call    _open
.text:00408429                 test    eax, eax
.text:0040842B                 mov     esi, eax
.text:0040842D                 js      short loc_408490
.text:0040842F
.text:0040842F loc_40842F:                             ; CODE XREF: sub_4083D0+D9↓j
.text:0040842F                 mov     [esp+9Ch+var_94], ebx
.text:00408433                 mov     [esp+9Ch+OpenFlag], edi
.text:00408437                 mov     [esp+9Ch+FileName], esi
.text:0040843A                 call    sub_418B60
.text:0040843F                 test    eax, eax
.text:00408441                 jnz     short loc_408472
.text:00408443                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:00408446                 call    _close
.text:0040844B                 mov     edx, eax
.text:0040844D
.text:0040844D loc_40844D:                             ; CODE XREF: sub_4083D0+BD↓j
.text:0040844D                                         ; sub_4083D0+DB↓j ...
.text:0040844D                 mov     ebx, [esp+9Ch+var_10]
.text:00408454                 mov     eax, edx
.text:00408456                 mov     esi, [esp+9Ch+var_C]
.text:0040845D                 mov     edi, [esp+9Ch+var_8]
.text:00408464                 mov     ebp, [esp+9Ch+var_4]
.text:0040846B                 add     esp, 9Ch
.text:00408471                 retn
.text:00408472 ; ---------------------------------------------------------------------------
.text:00408472
.text:00408472 loc_408472:                             ; CODE XREF: sub_4083D0+71↑j
.text:00408472                 call    _errno
.text:00408477                 mov     edi, [eax]
.text:00408479                 mov     [esp+9Ch+FileName], esi ; FileHandle
.text:0040847C                 call    _close
.text:00408481                 call    _errno
.text:00408486                 mov     [eax], edi
.text:00408488                 mov     edx, 0FFFFFFFFh
.text:0040848D                 jmp     short loc_40844D
.text:0040848D ; ---------------------------------------------------------------------------
.text:0040848F                 align 10h
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: sub_4083D0+5D↑j
.text:00408490                 mov     [esp+9Ch+OpenFlag], 5 ; OpenFlag
.text:00408498                 mov     [esp+9Ch+FileName], ebp ; FileName
.text:0040849B                 call    _open
.text:004084A0                 test    eax, eax
.text:004084A2                 mov     esi, eax
.text:004084A4                 mov     edx, 0FFFFFFFFh
.text:004084A9                 jns     short loc_40842F
.text:004084AB                 jmp     short loc_40844D
.text:004084AB ; ---------------------------------------------------------------------------
.text:004084AD                 align 10h
.text:004084B0
.text:004084B0 loc_4084B0:                             ; CODE XREF: sub_4083D0+3A↑j
.text:004084B0                                         ; sub_4083D0+43↑j
.text:004084B0                 mov     [esp+9Ch+FileName], ebp ; char *
.text:004084B3                 lea     edx, [esp+9Ch+var_8C]
.text:004084B7                 mov     [esp+9Ch+OpenFlag], edx ; int
.text:004084BB                 call    sub_417BA0
.text:004084C0                 test    eax, eax
.text:004084C2                 mov     edx, 1
.text:004084C7                 jnz     short loc_40844D
.text:004084C9                 cmp     ebx, 0FFFFFFFFh
.text:004084CC                 jz      short loc_4084E0
.text:004084CE
.text:004084CE loc_4084CE:                             ; CODE XREF: sub_4083D0+114↓j
.text:004084CE                 cmp     edi, 0FFFFFFFFh
.text:004084D1                 jnz     loc_408419
.text:004084D7                 mov     edi, [esp+9Ch+var_70]
.text:004084DB                 jmp     loc_408419
.text:004084E0 ; ---------------------------------------------------------------------------
.text:004084E0
.text:004084E0 loc_4084E0:                             ; CODE XREF: sub_4083D0+FC↑j
.text:004084E0                 mov     ebx, [esp+9Ch+var_6C]
.text:004084E4                 jmp     short loc_4084CE
.text:004084E4 sub_4083D0      endp
.text:004084E4
.text:004084E4 ; ---------------------------------------------------------------------------
.text:004084E6                 align 10h
.text:004084F0
.text:004084F0 ; =============== S U B R O U T I N E =======================================
.text:004084F0
.text:004084F0
.text:004084F0 ; int __cdecl sub_4084F0(char *, int, int, int)
.text:004084F0 sub_4084F0      proc near               ; CODE XREF: sub_408810+32↓p
.text:004084F0
.text:004084F0 Str             = dword ptr -2Ch
.text:004084F0 Str2            = dword ptr -28h
.text:004084F0 MaxCount        = dword ptr -24h
.text:004084F0 var_20          = dword ptr -20h
.text:004084F0 var_19          = byte ptr -19h
.text:004084F0 var_18          = dword ptr -18h
.text:004084F0 var_14          = dword ptr -14h
.text:004084F0 arg_0           = dword ptr  4
.text:004084F0 arg_4           = dword ptr  8
.text:004084F0 arg_8           = dword ptr  0Ch
.text:004084F0 arg_C           = dword ptr  10h
.text:004084F0
.text:004084F0                 push    ebp
.text:004084F1                 push    edi
.text:004084F2                 push    esi
.text:004084F3                 push    ebx
.text:004084F4                 sub     esp, 1Ch
.text:004084F7                 xor     ebx, ebx
.text:004084F9                 mov     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00408501                 mov     edx, [esp+2Ch+arg_0]
.text:00408505                 mov     ebp, [esp+2Ch+arg_C]
.text:00408509                 mov     [esp+2Ch+var_19], 0
.text:0040850E                 mov     [esp+2Ch+Str], edx ; Str
.text:00408511                 call    strlen
.text:00408516                 mov     [esp+2Ch+var_14], eax
.text:0040851A                 mov     ecx, [esp+2Ch+arg_4]
.text:0040851E                 mov     eax, [ecx]
.text:00408520                 test    eax, eax
.text:00408522                 jz      short loc_408568
.text:00408524                 mov     [esp+2Ch+var_20], 0
.text:0040852C                 lea     esi, [esi+0]
.text:00408530
.text:00408530 loc_408530:                             ; CODE XREF: sub_4084F0+6A↓j
.text:00408530                 mov     [esp+2Ch+Str], eax ; Str1
.text:00408533                 mov     esi, [esp+2Ch+var_14]
.text:00408537                 mov     ecx, [esp+2Ch+arg_0]
.text:0040853B                 mov     [esp+2Ch+MaxCount], esi ; MaxCount
.text:0040853F                 mov     [esp+2Ch+Str2], ecx ; Str2
.text:00408543                 call    strncmp
.text:00408548                 test    eax, eax
.text:0040854A                 jz      short loc_408576
.text:0040854C
.text:0040854C loc_40854C:                             ; CODE XREF: sub_4084F0+CA↓j
.text:0040854C                                         ; sub_4084F0+D1↓j ...
.text:0040854C                 add     [esp+2Ch+var_20], ebp
.text:00408550                 inc     ebx
.text:00408551                 mov     esi, [esp+2Ch+arg_4]
.text:00408555                 mov     eax, [esi+ebx*4]
.text:00408558                 test    eax, eax
.text:0040855A                 jnz     short loc_408530
.text:0040855C                 cmp     [esp+2Ch+var_19], 0
.text:00408561                 mov     edx, 0FFFFFFFEh
.text:00408566                 jnz     short loc_40856C
.text:00408568
.text:00408568 loc_408568:                             ; CODE XREF: sub_4084F0+32↑j
.text:00408568                 mov     edx, [esp+2Ch+var_18]
.text:0040856C
.text:0040856C loc_40856C:                             ; CODE XREF: sub_4084F0+76↑j
.text:0040856C                                         ; sub_4084F0+9B↓j
.text:0040856C                 add     esp, 1Ch
.text:0040856F                 mov     eax, edx
.text:00408571                 pop     ebx
.text:00408572                 pop     esi
.text:00408573                 pop     edi
.text:00408574                 pop     ebp
.text:00408575                 retn
.text:00408576 ; ---------------------------------------------------------------------------
.text:00408576
.text:00408576 loc_408576:                             ; CODE XREF: sub_4084F0+5A↑j
.text:00408576                 mov     eax, [esp+2Ch+arg_4]
.text:0040857A                 mov     edi, [eax+ebx*4]
.text:0040857D                 mov     [esp+2Ch+Str], edi ; Str
.text:00408580                 call    strlen
.text:00408585                 cmp     eax, [esp+2Ch+var_14]
.text:00408589                 mov     edx, ebx
.text:0040858B                 jz      short loc_40856C
.text:0040858D                 cmp     [esp+2Ch+var_18], 0FFFFFFFFh
.text:00408592                 jz      short loc_4085C3
.text:00408594                 mov     ecx, [esp+2Ch+arg_8]
.text:00408598                 test    ecx, ecx
.text:0040859A                 jz      short loc_4085BC
.text:0040859C                 cld
.text:0040859D                 mov     edi, [esp+2Ch+var_18]
.text:004085A1                 mov     ecx, ebp
.text:004085A3                 mov     esi, [esp+2Ch+arg_8]
.text:004085A7                 mov     edx, [esp+2Ch+var_20]
.text:004085AB                 imul    edi, ebp
.text:004085AE                 add     esi, edi
.text:004085B0                 mov     edi, [esp+2Ch+arg_8]
.text:004085B4                 add     edi, edx
.text:004085B6                 cmp     ebp, ebp
.text:004085B8                 repe cmpsb
.text:004085BA                 jz      short loc_40854C
.text:004085BC
.text:004085BC loc_4085BC:                             ; CODE XREF: sub_4084F0+AA↑j
.text:004085BC                 mov     [esp+2Ch+var_19], 1
.text:004085C1                 jmp     short loc_40854C
.text:004085C3 ; ---------------------------------------------------------------------------
.text:004085C3
.text:004085C3 loc_4085C3:                             ; CODE XREF: sub_4084F0+A2↑j
.text:004085C3                 mov     [esp+2Ch+var_18], ebx
.text:004085C7                 jmp     short loc_40854C
.text:004085C7 sub_4084F0      endp
.text:004085C7
.text:004085C7 ; ---------------------------------------------------------------------------
.text:004085C9 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.text:004085C9                                         ; DATA XREF: .text:00408622↓o
.text:004085C9                                         ; sub_408810+5A↓o
.text:004085E6 aInvalidArgumen db 'invalid argument %s for %s',0
.text:004085E6                                         ; DATA XREF: .text:loc_408690↓o
.text:004085E6                                         ; sub_408810:loc_408A06↓o
.text:00408601 ; ---------------------------------------------------------------------------
.text:00408601                 jmp     short loc_408610
.text:00408601 ; ---------------------------------------------------------------------------
.text:00408603                 align 10h
.text:00408610
.text:00408610 loc_408610:                             ; CODE XREF: .text:00408601↑j
.text:00408610                 sub     esp, 1Ch
.text:00408613                 cmp     dword ptr [esp+28h], 0FFFFFFFFh
.text:00408618                 mov     [esp+14h], ebx
.text:0040861C                 mov     [esp+18h], esi
.text:00408620                 jz      short loc_408690
.text:00408622                 mov     dword ptr [esp], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00408629
.text:00408629 loc_408629:                             ; CODE XREF: .text:00408697↓j
.text:00408629                 call    ds:libintl_gettext
.text:0040862F                 mov     dword ptr [esp], 1
.text:00408636                 mov     edx, [esp+20h]
.text:0040863A                 mov     esi, eax
.text:0040863C                 mov     [esp+4], edx
.text:00408640                 call    sub_40AEE0
.text:00408645                 mov     dword ptr [esp+4], 5
.text:0040864D                 mov     edx, [esp+24h]
.text:00408651                 mov     ebx, eax
.text:00408653                 mov     dword ptr [esp], 0
.text:0040865A                 mov     [esp+8], edx
.text:0040865E                 call    sub_40CFA0
.text:00408663                 mov     [esp+0Ch], eax
.text:00408667                 mov     [esp+10h], ebx
.text:0040866B                 mov     [esp+8], esi
.text:0040866F                 mov     dword ptr [esp+4], 0
.text:00408677                 mov     dword ptr [esp], 0
.text:0040867E                 call    sub_4143B0
.text:00408683                 mov     ebx, [esp+14h]
.text:00408687                 mov     esi, [esp+18h]
.text:0040868B                 add     esp, 1Ch
.text:0040868E                 retn
.text:0040868E ; ---------------------------------------------------------------------------
.text:0040868F                 align 10h
.text:00408690
.text:00408690 loc_408690:                             ; CODE XREF: .text:00408620↑j
.text:00408690                 mov     dword ptr [esp], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00408697                 jmp     short loc_408629
.text:00408697 ; ---------------------------------------------------------------------------
.text:00408699 aValidArguments db 'Valid arguments are:',0
.text:00408699                                         ; DATA XREF: .text:004086E3↓o
.text:00408699                                         ; sub_408810+CB↓o
.text:004086AE ; const char aS[]
.text:004086AE aS              db 0Ah                  ; DATA XREF: .text:0040875D↓o
.text:004086AE                                         ; sub_408810:loc_408948↓o
.text:004086AE                 db '  - `%s',27h,0
.text:004086B8 ; const char aS_0[]
.text:004086B8 aS_0            db ', `%s',27h,0        ; DATA XREF: .text:004087EA↓o
.text:004086B8                                         ; sub_408810:loc_4089E0↓o
.text:004086BF                 align 10h
.text:004086C0                 push    ebp
.text:004086C1                 push    edi
.text:004086C2                 push    esi
.text:004086C3                 push    ebx
.text:004086C4                 sub     esp, 2Ch
.text:004086C7                 mov     ecx, [esp+40h]
.text:004086CB                 mov     dword ptr [esp+1Ch], 0
.text:004086D3                 mov     eax, [esp+44h]
.text:004086D7                 mov     ebp, [esp+48h]
.text:004086DB                 mov     [esp+28h], ecx
.text:004086DF                 mov     [esp+24h], eax
.text:004086E3                 mov     dword ptr [esp], offset aValidArguments ; "Valid arguments are:"
.text:004086EA                 call    ds:libintl_gettext
.text:004086F0                 mov     edx, ds:_iob
.text:004086F6                 add     edx, 40h ; '@'
.text:004086F9                 mov     [esp], edx
.text:004086FC                 mov     [esp+4], eax
.text:00408700                 call    fprintf
.text:00408705                 mov     dword ptr [esp+20h], 0
.text:0040870D                 mov     edx, [esp+28h]
.text:00408711                 mov     eax, [edx]
.text:00408713                 test    eax, eax
.text:00408715                 jz      short loc_408795
.text:00408717                 mov     dword ptr [esp+14h], 0
.text:0040871F                 mov     esi, [esp+24h]
.text:00408723                 mov     ebx, eax
.text:00408725                 mov     [esp+18h], esi
.text:00408729                 lea     esi, [esi+0]
.text:00408730
.text:00408730 loc_408730:                             ; CODE XREF: .text:00408793↓j
.text:00408730                 mov     edi, [esp+20h]
.text:00408734                 test    edi, edi
.text:00408736                 jz      short loc_408753
.text:00408738                 cld
.text:00408739                 mov     edi, [esp+24h]
.text:0040873D                 mov     ecx, ebp
.text:0040873F                 mov     edx, [esp+14h]
.text:00408743                 mov     esi, [esp+1Ch]
.text:00408747                 add     edi, edx
.text:00408749                 cmp     ebp, ebp
.text:0040874B                 repe cmpsb
.text:0040874D                 jz      loc_4087E0
.text:00408753
.text:00408753 loc_408753:                             ; CODE XREF: .text:00408736↑j
.text:00408753                 mov     [esp+8], ebx
.text:00408757                 mov     ecx, ds:_iob
.text:0040875D                 mov     dword ptr [esp+4], offset aS ; "\n  - `%s'"
.text:00408765                 add     ecx, 40h ; '@'
.text:00408768                 mov     [esp], ecx
.text:0040876B                 call    fprintf
.text:00408770                 mov     ebx, [esp+18h]
.text:00408774                 mov     [esp+1Ch], ebx
.text:00408778
.text:00408778 loc_408778:                             ; CODE XREF: .text:004087FD↓j
.text:00408778                 inc     dword ptr [esp+20h]
.text:0040877C                 mov     eax, [esp+28h]
.text:00408780                 add     [esp+14h], ebp
.text:00408784                 mov     edx, [esp+20h]
.text:00408788                 add     [esp+18h], ebp
.text:0040878C                 mov     edi, [eax+edx*4]
.text:0040878F                 test    edi, edi
.text:00408791                 mov     ebx, edi
.text:00408793                 jnz     short loc_408730
.text:00408795
.text:00408795 loc_408795:                             ; CODE XREF: .text:00408715↑j
.text:00408795                 mov     ebx, ds:_iob
.text:0040879B                 mov     ebp, [ebx+44h]
.text:0040879E                 dec     ebp
.text:0040879F                 mov     [ebx+44h], ebp
.text:004087A2                 test    ebp, ebp
.text:004087A4                 js      short loc_4087BD
.text:004087A6                 mov     ecx, ds:_iob
.text:004087AC                 mov     esi, [ecx+40h]
.text:004087AF                 mov     byte ptr [esi], 0Ah
.text:004087B2                 inc     dword ptr [ecx+40h]
.text:004087B5                 add     esp, 2Ch
.text:004087B8                 pop     ebx
.text:004087B9                 pop     esi
.text:004087BA                 pop     edi
.text:004087BB                 pop     ebp
.text:004087BC                 retn
.text:004087BD ; ---------------------------------------------------------------------------
.text:004087BD
.text:004087BD loc_4087BD:                             ; CODE XREF: .text:004087A4↑j
.text:004087BD                 mov     dword ptr [esp+40h], 0Ah
.text:004087C5                 mov     edi, ds:_iob
.text:004087CB                 add     edi, 40h ; '@'
.text:004087CE                 mov     [esp+44h], edi
.text:004087D2                 add     esp, 2Ch
.text:004087D5                 pop     ebx
.text:004087D6                 pop     esi
.text:004087D7                 pop     edi
.text:004087D8                 pop     ebp
.text:004087D9                 jmp     _flsbuf
.text:004087D9 ; ---------------------------------------------------------------------------
.text:004087DE                 align 10h
.text:004087E0
.text:004087E0 loc_4087E0:                             ; CODE XREF: .text:0040874D↑j
.text:004087E0                 mov     [esp+8], ebx
.text:004087E4                 mov     esi, ds:_iob
.text:004087EA                 mov     dword ptr [esp+4], offset aS_0 ; ", `%s'"
.text:004087F2                 add     esi, 40h ; '@'
.text:004087F5                 mov     [esp], esi
.text:004087F8                 call    fprintf
.text:004087FD                 jmp     loc_408778
.text:004087FD ; ---------------------------------------------------------------------------
.text:00408802                 align 10h
.text:00408810
.text:00408810 ; =============== S U B R O U T I N E =======================================
.text:00408810
.text:00408810
.text:00408810 ; int __cdecl sub_408810(char *, char *, int, int, int, int)
.text:00408810 sub_408810      proc near               ; CODE XREF: sub_4027B0+5D3↑p
.text:00408810                                         ; sub_4027B0+B7A↑p ...
.text:00408810
.text:00408810 Stream          = dword ptr -4Ch
.text:00408810 Format          = dword ptr -48h
.text:00408810 var_44          = dword ptr -44h
.text:00408810 var_40          = byte ptr -40h
.text:00408810 var_3C          = dword ptr -3Ch
.text:00408810 var_2C          = dword ptr -2Ch
.text:00408810 var_28          = dword ptr -28h
.text:00408810 var_24          = dword ptr -24h
.text:00408810 var_20          = dword ptr -20h
.text:00408810 var_1C          = dword ptr -1Ch
.text:00408810 var_18          = dword ptr -18h
.text:00408810 var_14          = dword ptr -14h
.text:00408810 var_10          = dword ptr -10h
.text:00408810 var_C           = dword ptr -0Ch
.text:00408810 var_8           = dword ptr -8
.text:00408810 var_4           = dword ptr -4
.text:00408810 arg_0           = dword ptr  4
.text:00408810 arg_4           = dword ptr  8
.text:00408810 arg_8           = dword ptr  0Ch
.text:00408810 arg_C           = dword ptr  10h
.text:00408810 arg_10          = dword ptr  14h
.text:00408810 arg_14          = dword ptr  18h
.text:00408810
.text:00408810                 sub     esp, 4Ch
.text:00408813                 mov     edx, [esp+4Ch+arg_10]
.text:00408817                 mov     [esp+4Ch+var_10], ebx
.text:0040881B                 mov     ebx, [esp+4Ch+arg_C]
.text:0040881F                 mov     [esp+4Ch+var_C], esi
.text:00408823                 mov     esi, [esp+4Ch+arg_4]
.text:00408827                 mov     [esp+4Ch+var_4], ebp
.text:0040882B                 mov     ebp, [esp+4Ch+arg_8]
.text:0040882F                 mov     dword ptr [esp+4Ch+var_40], edx ; int
.text:00408833                 mov     [esp+4Ch+var_8], edi
.text:00408837                 mov     [esp+4Ch+var_44], ebx ; int
.text:0040883B                 mov     [esp+4Ch+Format], ebp ; int
.text:0040883F                 mov     [esp+4Ch+Stream], esi ; char *
.text:00408842                 call    sub_4084F0
.text:00408847                 test    eax, eax
.text:00408849                 mov     edx, eax
.text:0040884B                 js      short loc_408863
.text:0040884D
.text:0040884D loc_40884D:                             ; CODE XREF: sub_408810+1AA↓j
.text:0040884D                 mov     ebx, [esp+4Ch+var_10]
.text:00408851                 mov     eax, edx
.text:00408853                 mov     esi, [esp+4Ch+var_C]
.text:00408857                 mov     edi, [esp+4Ch+var_8]
.text:0040885B                 mov     ebp, [esp+4Ch+var_4]
.text:0040885F                 add     esp, 4Ch
.text:00408862                 retn
.text:00408863 ; ---------------------------------------------------------------------------
.text:00408863
.text:00408863 loc_408863:                             ; CODE XREF: sub_408810+3B↑j
.text:00408863                 inc     eax
.text:00408864                 jz      loc_408A06
.text:0040886A                 mov     [esp+4Ch+Stream], offset aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00408871
.text:00408871 loc_408871:                             ; CODE XREF: sub_408810+1FD↓j
.text:00408871                 call    ds:libintl_gettext
.text:00408877                 mov     [esp+4Ch+Stream], 1 ; int
.text:0040887E                 mov     edi, [esp+4Ch+arg_0]
.text:00408882                 mov     [esp+4Ch+var_14], eax
.text:00408886                 mov     [esp+4Ch+Format], edi ; char *
.text:0040888A                 call    sub_40AEE0
.text:0040888F                 mov     [esp+4Ch+var_18], eax
.text:00408893                 mov     [esp+4Ch+var_44], esi ; char *
.text:00408897                 mov     [esp+4Ch+Format], 5 ; int
.text:0040889F                 mov     [esp+4Ch+Stream], 0 ; int
.text:004088A6                 call    sub_40CFA0
.text:004088AB                 mov     dword ptr [esp+4Ch+var_40], eax ; char
.text:004088AF                 mov     ecx, [esp+4Ch+var_18]
.text:004088B3                 mov     eax, [esp+4Ch+var_14]
.text:004088B7                 mov     [esp+4Ch+Format], 0 ; ErrorMessage
.text:004088BF                 mov     [esp+4Ch+var_3C], ecx
.text:004088C3                 mov     [esp+4Ch+var_44], eax ; char *
.text:004088C7                 mov     [esp+4Ch+Stream], 0 ; Code
.text:004088CE                 call    sub_4143B0
.text:004088D3                 mov     [esp+4Ch+var_20], 0
.text:004088DB                 mov     [esp+4Ch+Stream], offset aValidArguments ; "Valid arguments are:"
.text:004088E2                 call    ds:libintl_gettext
.text:004088E8                 mov     edx, ds:_iob
.text:004088EE                 add     edx, 40h ; '@'
.text:004088F1                 mov     [esp+4Ch+Format], eax ; Format
.text:004088F5                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004088F8                 call    fprintf
.text:004088FD                 mov     [esp+4Ch+var_1C], 0
.text:00408905                 mov     eax, [ebp+0]
.text:00408908                 test    eax, eax
.text:0040890A                 jz      loc_408991
.text:00408910                 mov     [esp+4Ch+var_24], eax
.text:00408914                 mov     [esp+4Ch+var_28], ebx
.text:00408918                 mov     [esp+4Ch+var_2C], 0
.text:00408920
.text:00408920 loc_408920:                             ; CODE XREF: sub_408810+17F↓j
.text:00408920                 mov     esi, [esp+4Ch+var_1C]
.text:00408924                 test    esi, esi
.text:00408926                 jz      short loc_408948
.text:00408928                 cld
.text:00408929                 mov     eax, [esp+4Ch+var_2C]
.text:0040892D                 mov     edx, [esp+4Ch+arg_10]
.text:00408931                 mov     esi, [esp+4Ch+var_20]
.text:00408935                 lea     ecx, [eax+ebx]
.text:00408938                 mov     edi, ecx
.text:0040893A                 mov     ecx, [esp+4Ch+arg_10]
.text:0040893E                 cmp     edx, edx
.text:00408940                 repe cmpsb
.text:00408942                 jz      loc_4089E0
.text:00408948
.text:00408948 loc_408948:                             ; CODE XREF: sub_408810+116↑j
.text:00408948                 mov     [esp+4Ch+Format], offset aS ; "\n  - `%s'"
.text:00408950                 mov     esi, ds:_iob
.text:00408956                 mov     ecx, [esp+4Ch+var_24]
.text:0040895A                 add     esi, 40h ; '@'
.text:0040895D                 mov     [esp+4Ch+var_44], ecx
.text:00408961                 mov     [esp+4Ch+Stream], esi ; Stream
.text:00408964                 call    fprintf
.text:00408969                 mov     edi, [esp+4Ch+var_28]
.text:0040896D                 mov     [esp+4Ch+var_20], edi
.text:00408971
.text:00408971 loc_408971:                             ; CODE XREF: sub_408810+1F1↓j
.text:00408971                 inc     [esp+4Ch+var_1C]
.text:00408975                 mov     ecx, [esp+4Ch+arg_10]
.text:00408979                 add     [esp+4Ch+var_2C], ecx
.text:0040897D                 mov     esi, [esp+4Ch+var_1C]
.text:00408981                 add     [esp+4Ch+var_28], ecx
.text:00408985                 mov     edi, [ebp+esi*4+0]
.text:00408989                 test    edi, edi
.text:0040898B                 mov     [esp+4Ch+var_24], edi
.text:0040898F                 jnz     short loc_408920
.text:00408991
.text:00408991 loc_408991:                             ; CODE XREF: sub_408810+FA↑j
.text:00408991                 mov     ebp, ds:_iob
.text:00408997                 mov     ebx, [ebp+44h]
.text:0040899A                 dec     ebx
.text:0040899B                 mov     [ebp+44h], ebx
.text:0040899E                 test    ebx, ebx
.text:004089A0                 js      short loc_4089BF
.text:004089A2                 mov     edi, ds:_iob
.text:004089A8                 mov     eax, [edi+40h]
.text:004089AB                 mov     byte ptr [eax], 0Ah
.text:004089AE                 inc     dword ptr [edi+40h]
.text:004089B1
.text:004089B1 loc_4089B1:                             ; CODE XREF: sub_408810+1C8↓j
.text:004089B1                 call    [esp+4Ch+arg_14]
.text:004089B5                 mov     edx, 0FFFFFFFFh
.text:004089BA                 jmp     loc_40884D
.text:004089BF ; ---------------------------------------------------------------------------
.text:004089BF
.text:004089BF loc_4089BF:                             ; CODE XREF: sub_408810+190↑j
.text:004089BF                 mov     [esp+4Ch+Stream], 0Ah ; Ch
.text:004089C6                 mov     edx, ds:_iob
.text:004089CC                 add     edx, 40h ; '@'
.text:004089CF                 mov     [esp+4Ch+Format], edx ; File
.text:004089D3                 call    _flsbuf
.text:004089D8                 jmp     short loc_4089B1
.text:004089D8 ; ---------------------------------------------------------------------------
.text:004089DA                 align 10h
.text:004089E0
.text:004089E0 loc_4089E0:                             ; CODE XREF: sub_408810+132↑j
.text:004089E0                 mov     [esp+4Ch+Format], offset aS_0 ; ", `%s'"
.text:004089E8                 mov     edx, ds:_iob
.text:004089EE                 mov     eax, [esp+4Ch+var_24]
.text:004089F2                 add     edx, 40h ; '@'
.text:004089F5                 mov     [esp+4Ch+var_44], eax
.text:004089F9                 mov     [esp+4Ch+Stream], edx ; Stream
.text:004089FC                 call    fprintf
.text:00408A01                 jmp     loc_408971
.text:00408A06 ; ---------------------------------------------------------------------------
.text:00408A06
.text:00408A06 loc_408A06:                             ; CODE XREF: sub_408810+54↑j
.text:00408A06                 mov     [esp+4Ch+Stream], offset aInvalidArgumen ; "invalid argument %s for %s"
.text:00408A0D                 jmp     loc_408871
.text:00408A0D sub_408810      endp
.text:00408A0D
.text:00408A0D ; ---------------------------------------------------------------------------
.text:00408A12                 align 10h
.text:00408A20                 push    ebp
.text:00408A21                 push    edi
.text:00408A22                 push    esi
.text:00408A23                 push    ebx
.text:00408A24                 sub     esp, 4
.text:00408A27                 mov     ecx, [esp+1Ch]
.text:00408A2B                 mov     dword ptr [esp], 0
.text:00408A32                 mov     ebx, [esp+24h]
.text:00408A36                 mov     edx, [ecx]
.text:00408A38                 test    edx, edx
.text:00408A3A                 jz      short loc_408A65
.text:00408A3C                 cld
.text:00408A3D                 xor     ebp, ebp
.text:00408A3F                 nop
.text:00408A40
.text:00408A40 loc_408A40:                             ; CODE XREF: .text:00408A63↓j
.text:00408A40                 mov     edi, [esp+20h]
.text:00408A44                 mov     ecx, ebx
.text:00408A46                 mov     esi, [esp+18h]
.text:00408A4A                 add     edi, ebp
.text:00408A4C                 cmp     ebx, ebx
.text:00408A4E                 repe cmpsb
.text:00408A50                 jz      short loc_408A6D
.text:00408A52                 inc     dword ptr [esp]
.text:00408A55                 add     ebp, ebx
.text:00408A57                 mov     eax, [esp+1Ch]
.text:00408A5B                 mov     ecx, [esp]
.text:00408A5E                 mov     edi, [eax+ecx*4]
.text:00408A61                 test    edi, edi
.text:00408A63                 jnz     short loc_408A40
.text:00408A65
.text:00408A65 loc_408A65:                             ; CODE XREF: .text:00408A3A↑j
.text:00408A65                 xor     eax, eax
.text:00408A67
.text:00408A67 loc_408A67:                             ; CODE XREF: .text:00408A77↓j
.text:00408A67                 pop     ebp
.text:00408A68                 pop     ebx
.text:00408A69                 pop     esi
.text:00408A6A                 pop     edi
.text:00408A6B                 pop     ebp
.text:00408A6C                 retn
.text:00408A6D ; ---------------------------------------------------------------------------
.text:00408A6D
.text:00408A6D loc_408A6D:                             ; CODE XREF: .text:00408A50↑j
.text:00408A6D                 mov     esi, [esp]
.text:00408A70                 mov     ebx, [esp+1Ch]
.text:00408A74                 mov     eax, [ebx+esi*4]
.text:00408A77                 jmp     short loc_408A67
.text:00408A77 ; ---------------------------------------------------------------------------
.text:00408A79                 align 10h
.text:00408A80
.text:00408A80 ; =============== S U B R O U T I N E =======================================
.text:00408A80
.text:00408A80 ; Attributes: noreturn
.text:00408A80
.text:00408A80 sub_408A80      proc near               ; DATA XREF: .data:off_41F010↓o
.text:00408A80
.text:00408A80 Code            = dword ptr -0Ch
.text:00408A80
.text:00408A80                 sub     esp, 0Ch
.text:00408A83                 mov     [esp+0Ch+Code], 1 ; Code
.text:00408A8A                 call    sub_403490
.text:00408A8A sub_408A80      endp
.text:00408A8A
.text:00408A8A ; ---------------------------------------------------------------------------
.text:00408A8F                 db  83h ; ƒ
.text:00408A90                 db 0C4h ; Ä
.text:00408A91                 db  0Ch
.text:00408A92                 db 0C3h ; Ã
.text:00408A93                 align 10h
.text:00408AA0 dword_408AA0    dd 90002D2Dh, 7 dup(90909090h)
.text:00408AA0                                         ; DATA XREF: sub_408CF0+E4↓o
.text:00408AC0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00408AC0                                         ; DATA XREF: sub_408CF0+2FC↓o
.text:00408AED                 align 20h
.text:00408B00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00408B00                                         ; DATA XREF: sub_408CF0:loc_409052↓o
.text:00408B2D                 align 20h
.text:00408B40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00408B40                                         ; DATA XREF: sub_408CF0:loc_4090F0↓o
.text:00408B40                                         ; sub_408CF0:loc_4094B7↓o
.text:00408B66                 align 20h
.text:00408B80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00408B80                                         ; DATA XREF: sub_408CF0+48E↓o
.text:00408BA0 dword_408BA0    dd 90909000h, 7 dup(90909090h)
.text:00408BA0                                         ; DATA XREF: sub_408CF0:loc_4091C1↓o
.text:00408BC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00408BC0                                         ; DATA XREF: sub_408CF0:loc_4091DA↓o
.text:00408BE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00408BE0                                         ; DATA XREF: sub_408CF0:loc_4092BF↓o
.text:00408BE0                                         ; sub_408CF0:loc_4095EC↓o
.text:00408C07                 align 20h
.text:00408C20 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00408C20                                         ; DATA XREF: sub_408CF0:loc_409433↓o
.text:00408C4E                 align 20h
.text:00408C60 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00408C60                                         ; DATA XREF: sub_408CF0:loc_40951F↓o
.text:00408C81 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00408C81                                         ; DATA XREF: sub_408CF0+93F↓o
.text:00408C9B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00408C9B                                         ; DATA XREF: sub_408CF0:loc_409667↓o
.text:00408CB5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00408CB5                                         ; DATA XREF: sub_408CF0:loc_40968E↓o
.text:00408CD3 ; const char aPosixlyCorrect[]
.text:00408CD3 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_408CF0:loc_409840↓o
.text:00408CE3                 align 10h
.text:00408CF0
.text:00408CF0 ; =============== S U B R O U T I N E =======================================
.text:00408CF0
.text:00408CF0
.text:00408CF0 ; int __cdecl sub_408CF0(int, int, char *Str, int, int, int, int, int)
.text:00408CF0 sub_408CF0      proc near               ; CODE XREF: sub_409880+5A↓p
.text:00408CF0                                         ; .text:0040996A↓p ...
.text:00408CF0
.text:00408CF0 Str1            = dword ptr -5Ch
.text:00408CF0 Str2            = dword ptr -58h
.text:00408CF0 MaxCount        = dword ptr -54h
.text:00408CF0 var_50          = dword ptr -50h
.text:00408CF0 var_4C          = dword ptr -4Ch
.text:00408CF0 var_3C          = dword ptr -3Ch
.text:00408CF0 var_38          = dword ptr -38h
.text:00408CF0 var_34          = dword ptr -34h
.text:00408CF0 var_30          = dword ptr -30h
.text:00408CF0 var_2C          = dword ptr -2Ch
.text:00408CF0 var_28          = dword ptr -28h
.text:00408CF0 var_24          = dword ptr -24h
.text:00408CF0 var_20          = dword ptr -20h
.text:00408CF0 var_1C          = dword ptr -1Ch
.text:00408CF0 var_18          = dword ptr -18h
.text:00408CF0 var_14          = dword ptr -14h
.text:00408CF0 arg_0           = dword ptr  4
.text:00408CF0 arg_4           = dword ptr  8
.text:00408CF0 Str             = dword ptr  0Ch
.text:00408CF0 arg_C           = dword ptr  10h
.text:00408CF0 arg_10          = dword ptr  14h
.text:00408CF0 arg_14          = dword ptr  18h
.text:00408CF0 arg_18          = dword ptr  1Ch
.text:00408CF0 arg_1C          = dword ptr  20h
.text:00408CF0
.text:00408CF0                 push    ebp
.text:00408CF1                 mov     eax, 0FFFFFFFFh
.text:00408CF6                 push    edi
.text:00408CF7                 push    esi
.text:00408CF8                 push    ebx
.text:00408CF9                 sub     esp, 4Ch
.text:00408CFC                 mov     esi, [esp+5Ch+Str]
.text:00408D00                 mov     ebp, [esp+5Ch+arg_1C]
.text:00408D04                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00408D07                 mov     ebx, [ebp+4]
.text:00408D0A                 setz    dl
.text:00408D0D                 movzx   ecx, dl
.text:00408D10                 dec     ecx
.text:00408D11                 and     ecx, ebx
.text:00408D13                 mov     [esp+5Ch+var_14], ecx
.text:00408D17                 mov     ecx, [esp+5Ch+arg_0]
.text:00408D1B                 test    ecx, ecx
.text:00408D1D                 jle     loc_408E47
.text:00408D23                 mov     dword ptr [ebp+0Ch], 0
.text:00408D2A                 mov     ebx, [ebp+0]
.text:00408D2D                 test    ebx, ebx
.text:00408D2F                 jz      loc_409860
.text:00408D35                 mov     edi, [ebp+10h]
.text:00408D38                 test    edi, edi
.text:00408D3A                 jnz     short loc_408D93
.text:00408D3C                 lea     esi, [esi+0]
.text:00408D40
.text:00408D40 loc_408D40:                             ; CODE XREF: sub_408CF0+B7C↓j
.text:00408D40                 mov     [ebp+24h], ebx
.text:00408D43                 mov     esi, [esp+5Ch+Str]
.text:00408D47                 mov     [ebp+20h], ebx
.text:00408D4A                 mov     ecx, [esp+5Ch+arg_18]
.text:00408D4E                 xor     ebx, ebx
.text:00408D50                 mov     dword ptr [ebp+14h], 0
.text:00408D57                 test    ecx, ecx
.text:00408D59                 jz      loc_409840
.text:00408D5F
.text:00408D5F loc_408D5F:                             ; CODE XREF: sub_408CF0+B64↓j
.text:00408D5F                 mov     ebx, 1
.text:00408D64
.text:00408D64 loc_408D64:                             ; CODE XREF: sub_408CF0+B5E↓j
.text:00408D64                 mov     [ebp+1Ch], ebx
.text:00408D67                 mov     ecx, [esp+5Ch+Str]
.text:00408D6B                 movzx   eax, byte ptr [ecx]
.text:00408D6E                 cmp     al, 2Dh ; '-'
.text:00408D70                 jz      loc_409830
.text:00408D76                 cmp     al, 2Bh ; '+'
.text:00408D78                 jz      loc_409819
.text:00408D7E                 xor     edx, edx
.text:00408D80                 test    ebx, ebx
.text:00408D82                 setz    dl
.text:00408D85                 mov     [ebp+18h], edx
.text:00408D88
.text:00408D88 loc_408D88:                             ; CODE XREF: sub_408CF0+B35↓j
.text:00408D88                 mov     [esp+5Ch+Str], esi
.text:00408D8C                 mov     dword ptr [ebp+10h], 1
.text:00408D93
.text:00408D93 loc_408D93:                             ; CODE XREF: sub_408CF0+4A↑j
.text:00408D93                 mov     eax, [ebp+14h]
.text:00408D96                 test    eax, eax
.text:00408D98                 jz      short loc_408DA3
.text:00408D9A                 cmp     byte ptr [eax], 0
.text:00408D9D                 jnz     loc_408E80
.text:00408DA3
.text:00408DA3 loc_408DA3:                             ; CODE XREF: sub_408CF0+A8↑j
.text:00408DA3                 mov     ebx, [ebp+0]
.text:00408DA6                 cmp     [ebp+24h], ebx
.text:00408DA9                 jle     short loc_408DAE
.text:00408DAB                 mov     [ebp+24h], ebx
.text:00408DAE
.text:00408DAE loc_408DAE:                             ; CODE XREF: sub_408CF0+B9↑j
.text:00408DAE                 cmp     [ebp+20h], ebx
.text:00408DB1                 jle     short loc_408DB6
.text:00408DB3                 mov     [ebp+20h], ebx
.text:00408DB6
.text:00408DB6 loc_408DB6:                             ; CODE XREF: sub_408CF0+C1↑j
.text:00408DB6                 cmp     dword ptr [ebp+18h], 1
.text:00408DBA                 jz      loc_409790
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; CODE XREF: sub_408CF0+B13↓j
.text:00408DC0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00408DC4                 jz      loc_409774
.text:00408DCA                 cld
.text:00408DCB                 mov     ecx, [esp+5Ch+arg_4]
.text:00408DCF                 mov     edx, 3
.text:00408DD4                 mov     edi, offset dword_408AA0
.text:00408DD9                 mov     esi, [ecx+ebx*4]
.text:00408DDC                 mov     ecx, edx
.text:00408DDE                 repe cmpsb
.text:00408DE0                 jnz     short loc_408E1C
.text:00408DE2                 mov     edx, [ebp+24h]
.text:00408DE5                 lea     eax, [ebx+1]
.text:00408DE8                 cmp     [ebp+20h], edx
.text:00408DEB                 mov     [ebp+0], eax
.text:00408DEE                 jz      loc_409788
.text:00408DF4                 cmp     edx, eax
.text:00408DF6                 jz      short loc_408E10
.text:00408DF8                 mov     [esp+5Ch+Str2], ebp
.text:00408DFC                 mov     ebx, [esp+5Ch+arg_4]
.text:00408E00                 mov     [esp+5Ch+Str1], ebx
.text:00408E03                 call    sub_4099A0
.text:00408E08                 nop
.text:00408E09                 lea     esi, [esi+0]
.text:00408E10
.text:00408E10 loc_408E10:                             ; CODE XREF: sub_408CF0+106↑j
.text:00408E10                                         ; sub_408CF0+A9B↓j
.text:00408E10                 mov     eax, [esp+5Ch+arg_0]
.text:00408E14                 mov     ebx, eax
.text:00408E16                 mov     [ebp+24h], eax
.text:00408E19                 mov     [ebp+0], eax
.text:00408E1C
.text:00408E1C loc_408E1C:                             ; CODE XREF: sub_408CF0+F0↑j
.text:00408E1C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00408E20                 jz      loc_409774
.text:00408E26                 mov     esi, [esp+5Ch+arg_4]
.text:00408E2A                 mov     eax, [esi+ebx*4]
.text:00408E2D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00408E30                 jz      short loc_408E57
.text:00408E32
.text:00408E32 loc_408E32:                             ; CODE XREF: sub_408CF0+16D↓j
.text:00408E32                 mov     edx, [ebp+18h]
.text:00408E35                 test    edx, edx
.text:00408E37                 jz      short loc_408E50
.text:00408E39                 mov     [ebp+0Ch], eax
.text:00408E3C                 lea     edi, [ebx+1]
.text:00408E3F                 mov     eax, 1
.text:00408E44                 mov     [ebp+0], edi
.text:00408E47
.text:00408E47 loc_408E47:                             ; CODE XREF: sub_408CF0+2D↑j
.text:00408E47                                         ; sub_408CF0+165↓j ...
.text:00408E47                 add     esp, 4Ch
.text:00408E4A                 pop     ebx
.text:00408E4B                 pop     esi
.text:00408E4C                 pop     edi
.text:00408E4D                 pop     ebp
.text:00408E4E                 retn
.text:00408E4E ; ---------------------------------------------------------------------------
.text:00408E4F                 align 10h
.text:00408E50
.text:00408E50 loc_408E50:                             ; CODE XREF: sub_408CF0+147↑j
.text:00408E50                                         ; sub_408CF0+A8A↓j ...
.text:00408E50                 mov     eax, 0FFFFFFFFh
.text:00408E55                 jmp     short loc_408E47
.text:00408E57 ; ---------------------------------------------------------------------------
.text:00408E57
.text:00408E57 loc_408E57:                             ; CODE XREF: sub_408CF0+140↑j
.text:00408E57                 movzx   edx, byte ptr [eax+1]
.text:00408E5B                 test    dl, dl
.text:00408E5D                 jz      short loc_408E32
.text:00408E5F                 mov     ebx, [esp+5Ch+arg_C]
.text:00408E63                 xor     ecx, ecx
.text:00408E65                 test    ebx, ebx
.text:00408E67                 jz      short loc_408E72
.text:00408E69                 cmp     dl, 2Dh ; '-'
.text:00408E6C                 jz      loc_40976A
.text:00408E72
.text:00408E72 loc_408E72:                             ; CODE XREF: sub_408CF0+177↑j
.text:00408E72                                         ; sub_408CF0+A7F↓j
.text:00408E72                 lea     esi, [ecx+eax+1]
.text:00408E76                 mov     [ebp+14h], esi
.text:00408E79                 lea     esi, [esi+0]
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: sub_408CF0+AD↑j
.text:00408E80                 mov     ecx, [esp+5Ch+arg_C]
.text:00408E84                 test    ecx, ecx
.text:00408E86                 jz      loc_409210
.text:00408E8C                 mov     edx, [ebp+0]
.text:00408E8F                 mov     edi, [esp+5Ch+arg_4]
.text:00408E93                 mov     eax, [edi+edx*4]
.text:00408E96                 movzx   edx, byte ptr [eax+1]
.text:00408E9A                 cmp     dl, 2Dh ; '-'
.text:00408E9D                 jz      short loc_408EB5
.text:00408E9F                 mov     ebx, [esp+5Ch+arg_14]
.text:00408EA3                 test    ebx, ebx
.text:00408EA5                 jz      loc_409210
.text:00408EAB                 cmp     byte ptr [eax+2], 0
.text:00408EAF                 jz      loc_40974A
.text:00408EB5
.text:00408EB5 loc_408EB5:                             ; CODE XREF: sub_408CF0+1AD↑j
.text:00408EB5                                         ; sub_408CF0+A75↓j
.text:00408EB5                 mov     [esp+5Ch+var_18], 0
.text:00408EBD                 mov     ecx, [ebp+14h]
.text:00408EC0                 mov     [esp+5Ch+var_1C], 0
.text:00408EC8                 mov     [esp+5Ch+var_20], 0
.text:00408ED0                 mov     edi, ecx
.text:00408ED2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00408EDA                 movzx   eax, byte ptr [ecx]
.text:00408EDD                 test    al, al
.text:00408EDF                 jz      short loc_408EFC
.text:00408EE1                 cmp     al, 3Dh ; '='
.text:00408EE3                 jz      short loc_408EFC
.text:00408EE5                 lea     esi, [esi+0]
.text:00408EE9                 lea     edi, [edi+0]
.text:00408EF0
.text:00408EF0 loc_408EF0:                             ; CODE XREF: sub_408CF0+20A↓j
.text:00408EF0                 inc     edi
.text:00408EF1                 movzx   eax, byte ptr [edi]
.text:00408EF4                 test    al, al
.text:00408EF6                 jz      short loc_408EFC
.text:00408EF8                 cmp     al, 3Dh ; '='
.text:00408EFA                 jnz     short loc_408EF0
.text:00408EFC
.text:00408EFC loc_408EFC:                             ; CODE XREF: sub_408CF0+1EF↑j
.text:00408EFC                                         ; sub_408CF0+1F3↑j ...
.text:00408EFC                 mov     [esp+5Ch+var_28], 0
.text:00408F04                 mov     esi, [esp+5Ch+arg_C]
.text:00408F08                 mov     ebx, [esi]
.text:00408F0A                 test    ebx, ebx
.text:00408F0C                 mov     edx, ebx
.text:00408F0E                 jz      loc_409130
.text:00408F14                 lea     esi, [esi+0]
.text:00408F1A                 lea     edi, [edi+0]
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: sub_408CF0+25E↓j
.text:00408F20                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00408F24                 mov     ebx, edi
.text:00408F26                 sub     ebx, ecx
.text:00408F28                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00408F2C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00408F2F                 call    strncmp
.text:00408F34                 test    eax, eax
.text:00408F36                 jz      loc_4096C6
.text:00408F3C
.text:00408F3C loc_408F3C:                             ; CODE XREF: sub_408CF0+A0F↓j
.text:00408F3C                                         ; sub_408CF0+A24↓j ...
.text:00408F3C                 inc     [esp+5Ch+var_28]
.text:00408F40                 add     esi, 10h
.text:00408F43                 mov     ecx, [esi]
.text:00408F45                 test    ecx, ecx
.text:00408F47                 mov     edx, ecx
.text:00408F49                 jz      short loc_408F50
.text:00408F4B                 mov     ecx, [ebp+14h]
.text:00408F4E                 jmp     short loc_408F20
.text:00408F50 ; ---------------------------------------------------------------------------
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: sub_408CF0+259↑j
.text:00408F50                                         ; sub_408CF0+A55↓j
.text:00408F50                 mov     esi, [esp+5Ch+var_20]
.text:00408F54                 test    esi, esi
.text:00408F56                 jz      short loc_408F64
.text:00408F58                 mov     edx, [esp+5Ch+var_1C]
.text:00408F5C                 test    edx, edx
.text:00408F5E                 jz      loc_409670
.text:00408F64
.text:00408F64 loc_408F64:                             ; CODE XREF: sub_408CF0+266↑j
.text:00408F64                 mov     eax, [esp+5Ch+var_18]
.text:00408F68                 test    eax, eax
.text:00408F6A                 jz      loc_409130
.text:00408F70                 mov     ecx, [ebp+0]
.text:00408F73                 lea     eax, [ecx+1]
.text:00408F76                 mov     [ebp+0], eax
.text:00408F79                 cmp     byte ptr [edi], 0
.text:00408F7C                 jz      loc_409090
.text:00408F82                 mov     ecx, [esp+5Ch+var_18]
.text:00408F86                 mov     esi, [ecx+4]
.text:00408F89                 test    esi, esi
.text:00408F8B                 jz      short loc_408FD6
.text:00408F8D                 lea     ebx, [edi+1]
.text:00408F90                 mov     [ebp+0Ch], ebx
.text:00408F93
.text:00408F93 loc_408F93:                             ; CODE XREF: sub_408CF0+3A8↓j
.text:00408F93                                         ; sub_408CF0+3C4↓j
.text:00408F93                 mov     ebx, [ebp+14h]
.text:00408F96                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00408F99                 call    strlen
.text:00408F9E                 add     [ebp+14h], eax
.text:00408FA1                 mov     esi, [esp+5Ch+arg_10]
.text:00408FA5                 test    esi, esi
.text:00408FA7                 jz      short loc_408FB3
.text:00408FA9                 mov     ebp, [esp+5Ch+var_24]
.text:00408FAD                 mov     ecx, [esp+5Ch+arg_10]
.text:00408FB1                 mov     [ecx], ebp
.text:00408FB3
.text:00408FB3 loc_408FB3:                             ; CODE XREF: sub_408CF0+2B7↑j
.text:00408FB3                 mov     eax, [esp+5Ch+var_18]
.text:00408FB7                 mov     ecx, [eax+8]
.text:00408FBA                 test    ecx, ecx
.text:00408FBC                 jnz     short loc_408FCA
.text:00408FBE                 mov     ecx, [esp+5Ch+var_18]
.text:00408FC2
.text:00408FC2 loc_408FC2:                             ; CODE XREF: sub_408CF0+723↓j
.text:00408FC2                 mov     eax, [ecx+0Ch]
.text:00408FC5                 jmp     loc_408E47
.text:00408FCA ; ---------------------------------------------------------------------------
.text:00408FCA
.text:00408FCA loc_408FCA:                             ; CODE XREF: sub_408CF0+2CC↑j
.text:00408FCA                                         ; sub_408CF0+719↓j
.text:00408FCA                 mov     esi, [eax+0Ch]
.text:00408FCD                 xor     eax, eax
.text:00408FCF                 mov     [ecx], esi
.text:00408FD1                 jmp     loc_408E47
.text:00408FD6 ; ---------------------------------------------------------------------------
.text:00408FD6
.text:00408FD6 loc_408FD6:                             ; CODE XREF: sub_408CF0+29B↑j
.text:00408FD6                 mov     edi, [esp+5Ch+var_14]
.text:00408FDA                 test    edi, edi
.text:00408FDC                 jz      short loc_409030
.text:00408FDE                 mov     esi, [esp+5Ch+arg_4]
.text:00408FE2                 mov     edx, [esi+eax*4-4]
.text:00408FE6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00408FEA                 jz      short loc_409052
.text:00408FEC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00408FF3                 call    ds:libintl_gettext
.text:00408FF9                 mov     edx, [esp+5Ch+var_18]
.text:00408FFD                 mov     edi, [edx]
.text:00408FFF                 mov     [esp+5Ch+var_4C], edi
.text:00409003                 mov     ebx, [ebp+0]
.text:00409006                 mov     edi, [esp+5Ch+arg_4]
.text:0040900A                 mov     ecx, [edi+ebx*4-4]
.text:0040900E                 movsx   esi, byte ptr [ecx]
.text:00409011                 mov     ecx, ds:_iob
.text:00409017                 add     ecx, 40h ; '@'
.text:0040901A                 mov     [esp+5Ch+var_50], esi
.text:0040901E                 mov     ebx, [edi]
.text:00409020                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409024                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409027                 mov     [esp+5Ch+MaxCount], ebx
.text:0040902B                 call    fprintf
.text:00409030
.text:00409030 loc_409030:                             ; CODE XREF: sub_408CF0+2EC↑j
.text:00409030                                         ; sub_408CF0+398↓j
.text:00409030                 mov     ecx, [ebp+14h]
.text:00409033                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409036                 call    strlen
.text:0040903B                 add     [ebp+14h], eax
.text:0040903E                 mov     eax, [esp+5Ch+var_18]
.text:00409042                 mov     esi, [eax+0Ch]
.text:00409045                 mov     [ebp+8], esi
.text:00409048
.text:00409048 loc_409048:                             ; CODE XREF: sub_408CF0+4E5↓j
.text:00409048                                         ; sub_408CF0+73E↓j ...
.text:00409048                 mov     eax, 3Fh ; '?'
.text:0040904D                 jmp     loc_408E47
.text:00409052 ; ---------------------------------------------------------------------------
.text:00409052
.text:00409052 loc_409052:                             ; CODE XREF: sub_408CF0+2FA↑j
.text:00409052                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00409059                 call    ds:libintl_gettext
.text:0040905F                 mov     edx, [esp+5Ch+var_18]
.text:00409063                 mov     edi, [esp+5Ch+arg_4]
.text:00409067                 mov     ecx, ds:_iob
.text:0040906D                 mov     esi, [edx]
.text:0040906F                 add     ecx, 40h ; '@'
.text:00409072                 mov     [esp+5Ch+var_50], esi
.text:00409076                 mov     ebx, [edi]
.text:00409078                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040907C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040907F                 mov     [esp+5Ch+MaxCount], ebx
.text:00409083                 call    fprintf
.text:00409088                 jmp     short loc_409030
.text:00409088 ; ---------------------------------------------------------------------------
.text:0040908A                 align 10h
.text:00409090
.text:00409090 loc_409090:                             ; CODE XREF: sub_408CF0+28C↑j
.text:00409090                 mov     ebx, [esp+5Ch+var_18]
.text:00409094                 cmp     dword ptr [ebx+4], 1
.text:00409098                 jnz     loc_408F93
.text:0040909E                 cmp     eax, [esp+5Ch+arg_0]
.text:004090A2                 jge     short loc_4090B9
.text:004090A4                 mov     ebx, [esp+5Ch+arg_4]
.text:004090A8                 lea     edi, [ecx+2]
.text:004090AB                 mov     [ebp+0], edi
.text:004090AE                 mov     esi, [ebx+eax*4]
.text:004090B1                 mov     [ebp+0Ch], esi
.text:004090B4                 jmp     loc_408F93
.text:004090B9 ; ---------------------------------------------------------------------------
.text:004090B9
.text:004090B9 loc_4090B9:                             ; CODE XREF: sub_408CF0+3B2↑j
.text:004090B9                 mov     edx, [esp+5Ch+var_14]
.text:004090BD                 test    edx, edx
.text:004090BF                 jnz     short loc_4090F0
.text:004090C1
.text:004090C1 loc_4090C1:                             ; CODE XREF: sub_408CF0+437↓j
.text:004090C1                 mov     edx, [ebp+14h]
.text:004090C4                 mov     [esp+5Ch+Str1], edx ; Str
.text:004090C7                 call    strlen
.text:004090CC                 add     [ebp+14h], eax
.text:004090CF                 mov     eax, [esp+5Ch+var_18]
.text:004090D3                 mov     edi, [eax+0Ch]
.text:004090D6                 mov     [ebp+8], edi
.text:004090D9
.text:004090D9 loc_4090D9:                             ; CODE XREF: sub_408CF0+7C2↓j
.text:004090D9                 mov     ebp, [esp+5Ch+Str]
.text:004090DD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004090E1                 setnz   bl
.text:004090E4                 movzx   esi, bl
.text:004090E7                 lea     eax, [esi+esi*4+3Ah]
.text:004090EB                 jmp     loc_408E47
.text:004090F0 ; ---------------------------------------------------------------------------
.text:004090F0
.text:004090F0 loc_4090F0:                             ; CODE XREF: sub_408CF0+3CF↑j
.text:004090F0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004090F7                 call    ds:libintl_gettext
.text:004090FD                 mov     ecx, [ebp+0]
.text:00409100                 mov     esi, [esp+5Ch+arg_4]
.text:00409104                 mov     ebx, [esi+ecx*4-4]
.text:00409108                 mov     ecx, ds:_iob
.text:0040910E                 mov     [esp+5Ch+var_50], ebx
.text:00409112                 mov     edi, [esi]
.text:00409114                 add     ecx, 40h ; '@'
.text:00409117                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040911B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040911E                 mov     [esp+5Ch+MaxCount], edi
.text:00409122                 call    fprintf
.text:00409127                 jmp     short loc_4090C1
.text:00409127 ; ---------------------------------------------------------------------------
.text:00409129                 align 10h
.text:00409130
.text:00409130 loc_409130:                             ; CODE XREF: sub_408CF0+21E↑j
.text:00409130                                         ; sub_408CF0+27A↑j
.text:00409130                 mov     eax, [esp+5Ch+arg_14]
.text:00409134                 test    eax, eax
.text:00409136                 jz      short loc_409166
.text:00409138                 mov     ebx, [ebp+0]
.text:0040913B                 mov     esi, [esp+5Ch+arg_4]
.text:0040913F                 mov     edi, [esi+ebx*4]
.text:00409142                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00409146                 jz      short loc_409169
.text:00409148                 mov     ecx, [ebp+14h]
.text:0040914B                 mov     edx, [esp+5Ch+Str]
.text:0040914F                 movsx   ebx, byte ptr [ecx]
.text:00409152                 mov     [esp+5Ch+Str1], edx ; Str
.text:00409155                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00409159                 call    strchr
.text:0040915E                 test    eax, eax
.text:00409160                 jnz     loc_409210
.text:00409166
.text:00409166 loc_409166:                             ; CODE XREF: sub_408CF0+446↑j
.text:00409166                 mov     ebx, [ebp+0]
.text:00409169
.text:00409169 loc_409169:                             ; CODE XREF: sub_408CF0+456↑j
.text:00409169                 mov     eax, [esp+5Ch+var_14]
.text:0040916D                 test    eax, eax
.text:0040916F                 jz      short loc_4091C1
.text:00409171                 mov     esi, [esp+5Ch+arg_4]
.text:00409175                 mov     edi, [esi+ebx*4]
.text:00409178                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040917C                 jz      short loc_4091DA
.text:0040917E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00409185                 call    ds:libintl_gettext
.text:0040918B                 mov     edi, [ebp+14h]
.text:0040918E                 mov     [esp+5Ch+var_4C], edi
.text:00409192                 mov     ebx, [ebp+0]
.text:00409195                 mov     edi, [esp+5Ch+arg_4]
.text:00409199                 mov     esi, [edi+ebx*4]
.text:0040919C                 movsx   ecx, byte ptr [esi]
.text:0040919F                 mov     esi, ds:_iob
.text:004091A5                 add     esi, 40h ; '@'
.text:004091A8                 mov     [esp+5Ch+var_50], ecx
.text:004091AC                 mov     ebx, [edi]
.text:004091AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004091B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004091B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004091B9                 call    fprintf
.text:004091BE
.text:004091BE loc_4091BE:                             ; CODE XREF: sub_408CF0+51D↓j
.text:004091BE                 mov     ebx, [ebp+0]
.text:004091C1
.text:004091C1 loc_4091C1:                             ; CODE XREF: sub_408CF0+47F↑j
.text:004091C1                 mov     dword ptr [ebp+14h], offset dword_408BA0
.text:004091C8                 lea     edx, [ebx+1]
.text:004091CB                 mov     [ebp+0], edx
.text:004091CE
.text:004091CE loc_4091CE:                             ; CODE XREF: sub_408CF0+999↓j
.text:004091CE                 mov     dword ptr [ebp+8], 0
.text:004091D5                 jmp     loc_409048
.text:004091DA ; ---------------------------------------------------------------------------
.text:004091DA
.text:004091DA loc_4091DA:                             ; CODE XREF: sub_408CF0+48C↑j
.text:004091DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004091E1                 call    ds:libintl_gettext
.text:004091E7                 mov     ecx, [ebp+14h]
.text:004091EA                 mov     edi, [esp+5Ch+arg_4]
.text:004091EE                 mov     edx, ds:_iob
.text:004091F4                 mov     [esp+5Ch+var_50], ecx
.text:004091F8                 mov     ebx, [edi]
.text:004091FA                 add     edx, 40h ; '@'
.text:004091FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409201                 mov     [esp+5Ch+MaxCount], ebx
.text:00409205                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00409208                 call    fprintf
.text:0040920D                 jmp     short loc_4091BE
.text:0040920D ; ---------------------------------------------------------------------------
.text:0040920F                 align 10h
.text:00409210
.text:00409210 loc_409210:                             ; CODE XREF: sub_408CF0+196↑j
.text:00409210                                         ; sub_408CF0+1B5↑j ...
.text:00409210                 mov     esi, [ebp+14h]
.text:00409213                 movzx   ebx, byte ptr [esi]
.text:00409216                 inc     esi
.text:00409217                 mov     [ebp+14h], esi
.text:0040921A                 mov     ecx, [esp+5Ch+Str]
.text:0040921E                 movsx   esi, bl
.text:00409221                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409225                 mov     edi, esi
.text:00409227                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040922A                 call    strchr
.text:0040922F                 mov     ecx, [ebp+14h]
.text:00409232                 cmp     byte ptr [ecx], 0
.text:00409235                 jnz     short loc_40923A
.text:00409237                 inc     dword ptr [ebp+0]
.text:0040923A
.text:0040923A loc_40923A:                             ; CODE XREF: sub_408CF0+545↑j
.text:0040923A                 test    eax, eax
.text:0040923C                 jz      loc_409620
.text:00409242                 cmp     bl, 3Ah ; ':'
.text:00409245                 jz      loc_409620
.text:0040924B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040924E                 jz      loc_409306
.text:00409254                 movzx   edx, byte ptr [eax+1]
.text:00409258
.text:00409258 loc_409258:                             ; CODE XREF: sub_408CF0+61D↓j
.text:00409258                 cmp     dl, 3Ah ; ':'
.text:0040925B                 jz      short loc_409264
.text:0040925D
.text:0040925D loc_40925D:                             ; CODE XREF: sub_408CF0+590↓j
.text:0040925D                 mov     eax, esi
.text:0040925F                 jmp     loc_408E47
.text:00409264 ; ---------------------------------------------------------------------------
.text:00409264
.text:00409264 loc_409264:                             ; CODE XREF: sub_408CF0+56B↑j
.text:00409264                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00409268                 jz      loc_4092F1
.text:0040926E                 cmp     byte ptr [ecx], 0
.text:00409271                 jz      short loc_409282
.text:00409273
.text:00409273 loc_409273:                             ; CODE XREF: sub_408CF0+604↓j
.text:00409273                 inc     dword ptr [ebp+0]
.text:00409276                 mov     [ebp+0Ch], ecx
.text:00409279
.text:00409279 loc_409279:                             ; CODE XREF: sub_408CF0+5AB↓j
.text:00409279                                         ; sub_408CF0+5C6↓j ...
.text:00409279                 mov     dword ptr [ebp+14h], 0
.text:00409280                 jmp     short loc_40925D
.text:00409282 ; ---------------------------------------------------------------------------
.text:00409282
.text:00409282 loc_409282:                             ; CODE XREF: sub_408CF0+581↑j
.text:00409282                 mov     ecx, [ebp+0]
.text:00409285                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409289                 jz      short loc_40929D
.text:0040928B                 mov     eax, [esp+5Ch+arg_4]
.text:0040928F                 lea     edx, [ecx+1]
.text:00409292                 mov     [ebp+0], edx
.text:00409295                 mov     ebx, [eax+ecx*4]
.text:00409298                 mov     [ebp+0Ch], ebx
.text:0040929B                 jmp     short loc_409279
.text:0040929D ; ---------------------------------------------------------------------------
.text:0040929D
.text:0040929D loc_40929D:                             ; CODE XREF: sub_408CF0+599↑j
.text:0040929D                 mov     ecx, [esp+5Ch+var_14]
.text:004092A1                 test    ecx, ecx
.text:004092A3                 jnz     short loc_4092BF
.text:004092A5
.text:004092A5 loc_4092A5:                             ; CODE XREF: sub_408CF0+5FF↓j
.text:004092A5                 mov     [ebp+8], edi
.text:004092A8                 mov     edi, [esp+5Ch+Str]
.text:004092AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004092AF                 jz      short loc_4092B8
.text:004092B1                 mov     esi, 3Fh ; '?'
.text:004092B6                 jmp     short loc_409279
.text:004092B8 ; ---------------------------------------------------------------------------
.text:004092B8
.text:004092B8 loc_4092B8:                             ; CODE XREF: sub_408CF0+5BF↑j
.text:004092B8                 mov     esi, 3Ah ; ':'
.text:004092BD                 jmp     short loc_409279
.text:004092BF ; ---------------------------------------------------------------------------
.text:004092BF
.text:004092BF loc_4092BF:                             ; CODE XREF: sub_408CF0+5B3↑j
.text:004092BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004092C6                 call    ds:libintl_gettext
.text:004092CC                 mov     [esp+5Ch+var_50], edi
.text:004092D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004092D4                 mov     edx, ds:_iob
.text:004092DA                 mov     esi, [ebx]
.text:004092DC                 add     edx, 40h ; '@'
.text:004092DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004092E3                 mov     [esp+5Ch+MaxCount], esi
.text:004092E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004092EA                 call    fprintf
.text:004092EF                 jmp     short loc_4092A5
.text:004092F1 ; ---------------------------------------------------------------------------
.text:004092F1
.text:004092F1 loc_4092F1:                             ; CODE XREF: sub_408CF0+578↑j
.text:004092F1                 cmp     byte ptr [ecx], 0
.text:004092F4                 jnz     loc_409273
.text:004092FA                 mov     dword ptr [ebp+0Ch], 0
.text:00409301                 jmp     loc_409279
.text:00409306 ; ---------------------------------------------------------------------------
.text:00409306
.text:00409306 loc_409306:                             ; CODE XREF: sub_408CF0+55E↑j
.text:00409306                 movzx   edx, byte ptr [eax+1]
.text:0040930A                 cmp     dl, 3Bh ; ';'
.text:0040930D                 jnz     loc_409258
.text:00409313                 mov     [esp+5Ch+var_2C], 0
.text:0040931B                 mov     [esp+5Ch+var_30], 0
.text:00409323                 mov     [esp+5Ch+var_34], 0
.text:0040932B                 mov     [esp+5Ch+var_38], 0
.text:00409333                 cmp     byte ptr [ecx], 0
.text:00409336                 jz      loc_4095AB
.text:0040933C                 inc     dword ptr [ebp+0]
.text:0040933F                 mov     [ebp+0Ch], ecx
.text:00409342
.text:00409342 loc_409342:                             ; CODE XREF: sub_408CF0+8D4↓j
.text:00409342                 mov     edi, [ebp+0Ch]
.text:00409345                 mov     [ebp+14h], edi
.text:00409348                 movzx   eax, byte ptr [edi]
.text:0040934B                 test    al, al
.text:0040934D                 jz      short loc_40935F
.text:0040934F                 cmp     al, 3Dh ; '='
.text:00409351                 jz      short loc_40935F
.text:00409353
.text:00409353 loc_409353:                             ; CODE XREF: sub_408CF0+66D↓j
.text:00409353                 inc     edi
.text:00409354                 movzx   eax, byte ptr [edi]
.text:00409357                 test    al, al
.text:00409359                 jz      short loc_40935F
.text:0040935B                 cmp     al, 3Dh ; '='
.text:0040935D                 jnz     short loc_409353
.text:0040935F
.text:0040935F loc_40935F:                             ; CODE XREF: sub_408CF0+65D↑j
.text:0040935F                                         ; sub_408CF0+661↑j ...
.text:0040935F                 mov     [esp+5Ch+var_3C], 0
.text:00409367                 mov     esi, [esp+5Ch+arg_C]
.text:0040936B                 mov     eax, [esi]
.text:0040936D                 test    eax, eax
.text:0040936F                 jz      loc_4094F0
.text:00409375                 mov     ecx, eax
.text:00409377
.text:00409377 loc_409377:                             ; CODE XREF: sub_408CF0+6B3↓j
.text:00409377                 mov     ebx, [ebp+14h]
.text:0040937A                 mov     eax, edi
.text:0040937C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040937F                 sub     eax, ebx
.text:00409381                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00409385                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00409389                 call    strncmp
.text:0040938E                 test    eax, eax
.text:00409390                 jz      loc_409557
.text:00409396
.text:00409396 loc_409396:                             ; CODE XREF: sub_408CF0+88C↓j
.text:00409396                                         ; sub_408CF0+89D↓j
.text:00409396                 inc     [esp+5Ch+var_3C]
.text:0040939A                 add     esi, 10h
.text:0040939D                 mov     edx, [esi]
.text:0040939F                 test    edx, edx
.text:004093A1                 mov     ecx, edx
.text:004093A3                 jnz     short loc_409377
.text:004093A5
.text:004093A5 loc_4093A5:                             ; CODE XREF: sub_408CF0+8B6↓j
.text:004093A5                 mov     esi, [esp+5Ch+var_34]
.text:004093A9                 test    esi, esi
.text:004093AB                 jz      short loc_4093B9
.text:004093AD                 mov     ebx, [esp+5Ch+var_30]
.text:004093B1                 test    ebx, ebx
.text:004093B3                 jz      loc_409501
.text:004093B9
.text:004093B9 loc_4093B9:                             ; CODE XREF: sub_408CF0+6BB↑j
.text:004093B9                 mov     esi, [esp+5Ch+var_2C]
.text:004093BD                 test    esi, esi
.text:004093BF                 jz      loc_4094F0
.text:004093C5                 cmp     byte ptr [edi], 0
.text:004093C8                 jz      loc_409470
.text:004093CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004093D2                 mov     ebx, [ecx+4]
.text:004093D5                 test    ebx, ebx
.text:004093D7                 jz      short loc_409418
.text:004093D9                 lea     edx, [edi+1]
.text:004093DC                 mov     [ebp+0Ch], edx
.text:004093DF
.text:004093DF loc_4093DF:                             ; CODE XREF: sub_408CF0+788↓j
.text:004093DF                                         ; sub_408CF0+7A7↓j
.text:004093DF                 mov     edi, [ebp+14h]
.text:004093E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004093E5                 call    strlen
.text:004093EA                 add     [ebp+14h], eax
.text:004093ED                 mov     eax, [esp+5Ch+arg_10]
.text:004093F1                 test    eax, eax
.text:004093F3                 jz      short loc_409400
.text:004093F5                 mov     edx, [esp+5Ch+var_38]
.text:004093F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004093FD                 mov     [ebp+0], edx
.text:00409400
.text:00409400 loc_409400:                             ; CODE XREF: sub_408CF0+703↑j
.text:00409400                 mov     eax, [esp+5Ch+var_2C]
.text:00409404                 mov     ecx, [eax+8]
.text:00409407                 test    ecx, ecx
.text:00409409                 jnz     loc_408FCA
.text:0040940F                 mov     ecx, [esp+5Ch+var_2C]
.text:00409413                 jmp     loc_408FC2
.text:00409418 ; ---------------------------------------------------------------------------
.text:00409418
.text:00409418 loc_409418:                             ; CODE XREF: sub_408CF0+6E7↑j
.text:00409418                 mov     eax, [esp+5Ch+var_14]
.text:0040941C                 test    eax, eax
.text:0040941E                 jnz     short loc_409433
.text:00409420
.text:00409420 loc_409420:                             ; CODE XREF: sub_408CF0+779↓j
.text:00409420                 mov     ecx, [ebp+14h]
.text:00409423                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409426                 call    strlen
.text:0040942B                 add     [ebp+14h], eax
.text:0040942E                 jmp     loc_409048
.text:00409433 ; ---------------------------------------------------------------------------
.text:00409433
.text:00409433 loc_409433:                             ; CODE XREF: sub_408CF0+72E↑j
.text:00409433                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040943A                 call    ds:libintl_gettext
.text:00409440                 mov     edx, [esp+5Ch+var_2C]
.text:00409444                 mov     ebx, [esp+5Ch+arg_4]
.text:00409448                 mov     edi, [edx]
.text:0040944A                 mov     [esp+5Ch+var_50], edi
.text:0040944E                 mov     edi, ds:_iob
.text:00409454                 mov     esi, [ebx]
.text:00409456                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040945A                 add     edi, 40h ; '@'
.text:0040945D                 mov     [esp+5Ch+MaxCount], esi
.text:00409461                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00409464                 call    fprintf
.text:00409469                 jmp     short loc_409420
.text:00409469 ; ---------------------------------------------------------------------------
.text:0040946B                 align 10h
.text:00409470
.text:00409470 loc_409470:                             ; CODE XREF: sub_408CF0+6D8↑j
.text:00409470                 mov     esi, [esp+5Ch+var_2C]
.text:00409474                 cmp     dword ptr [esi+4], 1
.text:00409478                 jnz     loc_4093DF
.text:0040947E                 mov     ecx, [ebp+0]
.text:00409481                 cmp     ecx, [esp+5Ch+arg_0]
.text:00409485                 jge     short loc_40949C
.text:00409487                 mov     eax, [esp+5Ch+arg_4]
.text:0040948B                 lea     ebx, [ecx+1]
.text:0040948E                 mov     [ebp+0], ebx
.text:00409491                 mov     edi, [eax+ecx*4]
.text:00409494                 mov     [ebp+0Ch], edi
.text:00409497                 jmp     loc_4093DF
.text:0040949C ; ---------------------------------------------------------------------------
.text:0040949C
.text:0040949C loc_40949C:                             ; CODE XREF: sub_408CF0+795↑j
.text:0040949C                 mov     edx, [esp+5Ch+var_14]
.text:004094A0                 test    edx, edx
.text:004094A2                 jnz     short loc_4094B7
.text:004094A4
.text:004094A4 loc_4094A4:                             ; CODE XREF: sub_408CF0+7FE↓j
.text:004094A4                 mov     edx, [ebp+14h]
.text:004094A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004094AA                 call    strlen
.text:004094AF                 add     [ebp+14h], eax
.text:004094B2                 jmp     loc_4090D9
.text:004094B7 ; ---------------------------------------------------------------------------
.text:004094B7
.text:004094B7 loc_4094B7:                             ; CODE XREF: sub_408CF0+7B2↑j
.text:004094B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004094BE                 call    ds:libintl_gettext
.text:004094C4                 mov     ecx, [ebp+0]
.text:004094C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004094CB                 mov     edi, [ebx+ecx*4-4]
.text:004094CF                 mov     ecx, ds:_iob
.text:004094D5                 mov     [esp+5Ch+var_50], edi
.text:004094D9                 mov     esi, [ebx]
.text:004094DB                 add     ecx, 40h ; '@'
.text:004094DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004094E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004094E5                 mov     [esp+5Ch+MaxCount], esi
.text:004094E9                 call    fprintf
.text:004094EE                 jmp     short loc_4094A4
.text:004094F0 ; ---------------------------------------------------------------------------
.text:004094F0
.text:004094F0 loc_4094F0:                             ; CODE XREF: sub_408CF0+67F↑j
.text:004094F0                                         ; sub_408CF0+6CF↑j
.text:004094F0                 mov     dword ptr [ebp+14h], 0
.text:004094F7                 mov     eax, 57h ; 'W'
.text:004094FC                 jmp     loc_408E47
.text:00409501 ; ---------------------------------------------------------------------------
.text:00409501
.text:00409501 loc_409501:                             ; CODE XREF: sub_408CF0+6C3↑j
.text:00409501                 mov     edi, [esp+5Ch+var_14]
.text:00409505                 test    edi, edi
.text:00409507                 jnz     short loc_40951F
.text:00409509
.text:00409509 loc_409509:                             ; CODE XREF: sub_408CF0+865↓j
.text:00409509                 mov     edx, [ebp+14h]
.text:0040950C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040950F                 call    strlen
.text:00409514                 add     [ebp+14h], eax
.text:00409517                 inc     dword ptr [ebp+0]
.text:0040951A                 jmp     loc_409048
.text:0040951F ; ---------------------------------------------------------------------------
.text:0040951F
.text:0040951F loc_40951F:                             ; CODE XREF: sub_408CF0+817↑j
.text:0040951F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00409526                 call    ds:libintl_gettext
.text:0040952C                 mov     ecx, [ebp+0]
.text:0040952F                 mov     ebx, [esp+5Ch+arg_4]
.text:00409533                 mov     edi, [ebx+ecx*4]
.text:00409536                 mov     ecx, ds:_iob
.text:0040953C                 mov     [esp+5Ch+var_50], edi
.text:00409540                 mov     esi, [ebx]
.text:00409542                 add     ecx, 40h ; '@'
.text:00409545                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409549                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040954C                 mov     [esp+5Ch+MaxCount], esi
.text:00409550                 call    fprintf
.text:00409555                 jmp     short loc_409509
.text:00409557 ; ---------------------------------------------------------------------------
.text:00409557
.text:00409557 loc_409557:                             ; CODE XREF: sub_408CF0+6A0↑j
.text:00409557                 mov     edx, [ebp+14h]
.text:0040955A                 mov     ebx, edi
.text:0040955C                 mov     ecx, [esi]
.text:0040955E                 sub     ebx, edx
.text:00409560                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00409563                 call    strlen
.text:00409568                 cmp     ebx, eax
.text:0040956A                 jz      short loc_409592
.text:0040956C                 mov     ebx, [esp+5Ch+var_2C]
.text:00409570                 test    ebx, ebx
.text:00409572                 jz      short loc_409581
.text:00409574                 mov     [esp+5Ch+var_34], 1
.text:0040957C                 jmp     loc_409396
.text:00409581 ; ---------------------------------------------------------------------------
.text:00409581
.text:00409581 loc_409581:                             ; CODE XREF: sub_408CF0+882↑j
.text:00409581                 mov     [esp+5Ch+var_2C], esi
.text:00409585                 mov     ecx, [esp+5Ch+var_3C]
.text:00409589                 mov     [esp+5Ch+var_38], ecx
.text:0040958D                 jmp     loc_409396
.text:00409592 ; ---------------------------------------------------------------------------
.text:00409592
.text:00409592 loc_409592:                             ; CODE XREF: sub_408CF0+87A↑j
.text:00409592                 mov     [esp+5Ch+var_2C], esi
.text:00409596                 mov     eax, [esp+5Ch+var_3C]
.text:0040959A                 mov     [esp+5Ch+var_30], 1
.text:004095A2                 mov     [esp+5Ch+var_38], eax
.text:004095A6                 jmp     loc_4093A5
.text:004095AB ; ---------------------------------------------------------------------------
.text:004095AB
.text:004095AB loc_4095AB:                             ; CODE XREF: sub_408CF0+646↑j
.text:004095AB                 mov     edx, [ebp+0]
.text:004095AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004095B2                 jz      short loc_4095C9
.text:004095B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004095B8                 lea     esi, [edx+1]
.text:004095BB                 mov     [ebp+0], esi
.text:004095BE                 mov     edi, [ebx+edx*4]
.text:004095C1                 mov     [ebp+0Ch], edi
.text:004095C4                 jmp     loc_409342
.text:004095C9 ; ---------------------------------------------------------------------------
.text:004095C9
.text:004095C9 loc_4095C9:                             ; CODE XREF: sub_408CF0+8C2↑j
.text:004095C9                 mov     edi, [esp+5Ch+var_14]
.text:004095CD                 test    edi, edi
.text:004095CF                 jnz     short loc_4095EC
.text:004095D1
.text:004095D1 loc_4095D1:                             ; CODE XREF: sub_408CF0+92C↓j
.text:004095D1                 mov     [ebp+8], esi
.text:004095D4                 mov     ebp, [esp+5Ch+Str]
.text:004095D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004095DC                 jz      short loc_4095E8
.text:004095DE                 mov     bl, 3Fh ; '?'
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: sub_408CF0+8FA↓j
.text:004095E0                 movsx   eax, bl
.text:004095E3                 jmp     loc_408E47
.text:004095E8 ; ---------------------------------------------------------------------------
.text:004095E8
.text:004095E8 loc_4095E8:                             ; CODE XREF: sub_408CF0+8EC↑j
.text:004095E8                 mov     bl, 3Ah ; ':'
.text:004095EA                 jmp     short loc_4095E0
.text:004095EC ; ---------------------------------------------------------------------------
.text:004095EC
.text:004095EC loc_4095EC:                             ; CODE XREF: sub_408CF0+8DF↑j
.text:004095EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004095F3                 call    ds:libintl_gettext
.text:004095F9                 mov     [esp+5Ch+var_50], esi
.text:004095FD                 mov     edx, [esp+5Ch+arg_4]
.text:00409601                 mov     ecx, ds:_iob
.text:00409607                 mov     ebx, [edx]
.text:00409609                 add     ecx, 40h ; '@'
.text:0040960C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409610                 mov     [esp+5Ch+MaxCount], ebx
.text:00409614                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00409617                 call    fprintf
.text:0040961C                 jmp     short loc_4095D1
.text:0040961C ; ---------------------------------------------------------------------------
.text:0040961E                 align 10h
.text:00409620
.text:00409620 loc_409620:                             ; CODE XREF: sub_408CF0+54C↑j
.text:00409620                                         ; sub_408CF0+555↑j
.text:00409620                 mov     eax, [esp+5Ch+var_14]
.text:00409624                 test    eax, eax
.text:00409626                 jz      short loc_40965F
.text:00409628                 mov     ebx, [ebp+1Ch]
.text:0040962B                 test    ebx, ebx
.text:0040962D                 jz      short loc_409667
.text:0040962F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00409636
.text:00409636 loc_409636:                             ; CODE XREF: sub_408CF0+97E↓j
.text:00409636                 call    ds:libintl_gettext
.text:0040963C                 mov     [esp+5Ch+var_50], esi
.text:00409640                 mov     ebx, [esp+5Ch+arg_4]
.text:00409644                 mov     edx, ds:_iob
.text:0040964A                 mov     esi, [ebx]
.text:0040964C                 add     edx, 40h ; '@'
.text:0040964F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00409653                 mov     [esp+5Ch+MaxCount], esi
.text:00409657                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040965A                 call    fprintf
.text:0040965F
.text:0040965F loc_40965F:                             ; CODE XREF: sub_408CF0+936↑j
.text:0040965F                 mov     [ebp+8], edi
.text:00409662                 jmp     loc_409048
.text:00409667 ; ---------------------------------------------------------------------------
.text:00409667
.text:00409667 loc_409667:                             ; CODE XREF: sub_408CF0+93D↑j
.text:00409667                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040966E                 jmp     short loc_409636
.text:00409670 ; ---------------------------------------------------------------------------
.text:00409670
.text:00409670 loc_409670:                             ; CODE XREF: sub_408CF0+26E↑j
.text:00409670                 mov     edi, [esp+5Ch+var_14]
.text:00409674                 test    edi, edi
.text:00409676                 jnz     short loc_40968E
.text:00409678
.text:00409678 loc_409678:                             ; CODE XREF: sub_408CF0+9D4↓j
.text:00409678                 mov     edx, [ebp+14h]
.text:0040967B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040967E                 call    strlen
.text:00409683                 add     [ebp+14h], eax
.text:00409686                 inc     dword ptr [ebp+0]
.text:00409689                 jmp     loc_4091CE
.text:0040968E ; ---------------------------------------------------------------------------
.text:0040968E
.text:0040968E loc_40968E:                             ; CODE XREF: sub_408CF0+986↑j
.text:0040968E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00409695                 call    ds:libintl_gettext
.text:0040969B                 mov     ebx, [ebp+0]
.text:0040969E                 mov     edi, [esp+5Ch+arg_4]
.text:004096A2                 mov     ecx, [edi+ebx*4]
.text:004096A5                 mov     ebx, ds:_iob
.text:004096AB                 mov     [esp+5Ch+var_50], ecx
.text:004096AF                 mov     esi, [edi]
.text:004096B1                 add     ebx, 40h ; '@'
.text:004096B4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004096B8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004096BB                 mov     [esp+5Ch+MaxCount], esi
.text:004096BF                 call    fprintf
.text:004096C4                 jmp     short loc_409678
.text:004096C6 ; ---------------------------------------------------------------------------
.text:004096C6
.text:004096C6 loc_4096C6:                             ; CODE XREF: sub_408CF0+246↑j
.text:004096C6                 mov     ecx, [ebp+14h]
.text:004096C9                 mov     ebx, edi
.text:004096CB                 mov     edx, [esi]
.text:004096CD                 sub     ebx, ecx
.text:004096CF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004096D2                 call    strlen
.text:004096D7                 cmp     ebx, eax
.text:004096D9                 jz      short loc_409731
.text:004096DB                 mov     ebx, [esp+5Ch+var_18]
.text:004096DF                 test    ebx, ebx
.text:004096E1                 jz      short loc_409720
.text:004096E3                 mov     edx, [esp+5Ch+arg_14]
.text:004096E7                 test    edx, edx
.text:004096E9                 jnz     short loc_4096F7
.text:004096EB                 mov     ecx, [esp+5Ch+var_18]
.text:004096EF                 mov     ebx, [esi+4]
.text:004096F2                 cmp     [ecx+4], ebx
.text:004096F5                 jz      short loc_409704
.text:004096F7
.text:004096F7 loc_4096F7:                             ; CODE XREF: sub_408CF0+9F9↑j
.text:004096F7                                         ; sub_408CF0+A1A↓j ...
.text:004096F7                 mov     [esp+5Ch+var_20], 1
.text:004096FF                 jmp     loc_408F3C
.text:00409704 ; ---------------------------------------------------------------------------
.text:00409704
.text:00409704 loc_409704:                             ; CODE XREF: sub_408CF0+A05↑j
.text:00409704                 mov     edx, [esi+8]
.text:00409707                 cmp     [ecx+8], edx
.text:0040970A                 jnz     short loc_4096F7
.text:0040970C                 mov     ebx, [esi+0Ch]
.text:0040970F                 cmp     [ecx+0Ch], ebx
.text:00409712                 jnz     short loc_4096F7
.text:00409714                 jmp     loc_408F3C
.text:00409714 ; ---------------------------------------------------------------------------
.text:00409719                 align 10h
.text:00409720
.text:00409720 loc_409720:                             ; CODE XREF: sub_408CF0+9F1↑j
.text:00409720                 mov     [esp+5Ch+var_18], esi
.text:00409724                 mov     eax, [esp+5Ch+var_28]
.text:00409728                 mov     [esp+5Ch+var_24], eax
.text:0040972C                 jmp     loc_408F3C
.text:00409731 ; ---------------------------------------------------------------------------
.text:00409731
.text:00409731 loc_409731:                             ; CODE XREF: sub_408CF0+9E9↑j
.text:00409731                 mov     [esp+5Ch+var_18], esi
.text:00409735                 mov     ecx, [esp+5Ch+var_28]
.text:00409739                 mov     [esp+5Ch+var_1C], 1
.text:00409741                 mov     [esp+5Ch+var_24], ecx
.text:00409745                 jmp     loc_408F50
.text:0040974A ; ---------------------------------------------------------------------------
.text:0040974A
.text:0040974A loc_40974A:                             ; CODE XREF: sub_408CF0+1BF↑j
.text:0040974A                 mov     eax, [esp+5Ch+Str]
.text:0040974E                 movsx   esi, dl
.text:00409751                 mov     [esp+5Ch+Str2], esi ; Val
.text:00409755                 mov     [esp+5Ch+Str1], eax ; Str
.text:00409758                 call    strchr
.text:0040975D                 test    eax, eax
.text:0040975F                 jnz     loc_409210
.text:00409765                 jmp     loc_408EB5
.text:0040976A ; ---------------------------------------------------------------------------
.text:0040976A
.text:0040976A loc_40976A:                             ; CODE XREF: sub_408CF0+17C↑j
.text:0040976A                 mov     ecx, 1
.text:0040976F                 jmp     loc_408E72
.text:00409774 ; ---------------------------------------------------------------------------
.text:00409774
.text:00409774 loc_409774:                             ; CODE XREF: sub_408CF0+D4↑j
.text:00409774                                         ; sub_408CF0+130↑j
.text:00409774                 mov     eax, [ebp+20h]
.text:00409777                 cmp     eax, [ebp+24h]
.text:0040977A                 jz      loc_408E50
.text:00409780                 mov     [ebp+0], eax
.text:00409783                 jmp     loc_408E50
.text:00409788 ; ---------------------------------------------------------------------------
.text:00409788
.text:00409788 loc_409788:                             ; CODE XREF: sub_408CF0+FE↑j
.text:00409788                 mov     [ebp+20h], eax
.text:0040978B                 jmp     loc_408E10
.text:00409790 ; ---------------------------------------------------------------------------
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: sub_408CF0+CA↑j
.text:00409790                 mov     edx, [ebp+20h]
.text:00409793                 mov     eax, [ebp+24h]
.text:00409796                 cmp     edx, eax
.text:00409798                 jz      short loc_409810
.text:0040979A                 cmp     eax, ebx
.text:0040979C                 jz      short loc_4097B1
.text:0040979E                 mov     [esp+5Ch+Str2], ebp
.text:004097A2                 mov     ebx, [esp+5Ch+arg_4]
.text:004097A6                 mov     [esp+5Ch+Str1], ebx
.text:004097A9                 call    sub_4099A0
.text:004097AE                 mov     ebx, [ebp+0]
.text:004097B1
.text:004097B1 loc_4097B1:                             ; CODE XREF: sub_408CF0+AAC↑j
.text:004097B1                                         ; sub_408CF0+B22↓j ...
.text:004097B1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004097B5                 jge     short loc_409800
.text:004097B7                 mov     esi, [esp+5Ch+arg_4]
.text:004097BB                 mov     eax, [esi+ebx*4]
.text:004097BE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004097C1                 jz      short loc_409808
.text:004097C3                 lea     esi, [esi+0]
.text:004097C9                 lea     edi, [edi+0]
.text:004097D0
.text:004097D0 loc_4097D0:                             ; CODE XREF: sub_408CF0+AFC↓j
.text:004097D0                                         ; sub_408CF0+B1C↓j
.text:004097D0                 lea     eax, [ebx+1]
.text:004097D3                 mov     ebx, eax
.text:004097D5                 mov     [ebp+0], eax
.text:004097D8                 cmp     eax, [esp+5Ch+arg_0]
.text:004097DC                 jge     short loc_409800
.text:004097DE                 mov     edi, [esp+5Ch+arg_4]
.text:004097E2                 mov     edx, [edi+eax*4]
.text:004097E5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004097E8                 jz      short loc_4097F0
.text:004097EA
.text:004097EA loc_4097EA:                             ; CODE XREF: sub_408CF0+B04↓j
.text:004097EA                 mov     ebx, eax
.text:004097EC                 jmp     short loc_4097D0
.text:004097EC ; ---------------------------------------------------------------------------
.text:004097EE                 align 10h
.text:004097F0
.text:004097F0 loc_4097F0:                             ; CODE XREF: sub_408CF0+AF8↑j
.text:004097F0                 cmp     byte ptr [edx+1], 0
.text:004097F4                 jz      short loc_4097EA
.text:004097F6                 lea     esi, [esi+0]
.text:004097F9                 lea     edi, [edi+0]
.text:00409800
.text:00409800 loc_409800:                             ; CODE XREF: sub_408CF0+AC5↑j
.text:00409800                                         ; sub_408CF0+AEC↑j ...
.text:00409800                 mov     [ebp+24h], ebx
.text:00409803                 jmp     loc_408DC0
.text:00409808 ; ---------------------------------------------------------------------------
.text:00409808
.text:00409808 loc_409808:                             ; CODE XREF: sub_408CF0+AD1↑j
.text:00409808                 cmp     byte ptr [eax+1], 0
.text:0040980C                 jz      short loc_4097D0
.text:0040980E                 jmp     short loc_409800
.text:00409810 ; ---------------------------------------------------------------------------
.text:00409810
.text:00409810 loc_409810:                             ; CODE XREF: sub_408CF0+AA8↑j
.text:00409810                 cmp     edx, ebx
.text:00409812                 jz      short loc_4097B1
.text:00409814                 mov     [ebp+20h], ebx
.text:00409817                 jmp     short loc_4097B1
.text:00409819 ; ---------------------------------------------------------------------------
.text:00409819
.text:00409819 loc_409819:                             ; CODE XREF: sub_408CF0+88↑j
.text:00409819                 mov     dword ptr [ebp+18h], 0
.text:00409820                 mov     esi, [esp+5Ch+Str]
.text:00409824
.text:00409824 loc_409824:                             ; CODE XREF: sub_408CF0+B49↓j
.text:00409824                 inc     esi
.text:00409825                 jmp     loc_408D88
.text:00409825 ; ---------------------------------------------------------------------------
.text:0040982A                 align 10h
.text:00409830
.text:00409830 loc_409830:                             ; CODE XREF: sub_408CF0+80↑j
.text:00409830                 mov     dword ptr [ebp+18h], 2
.text:00409837                 mov     esi, ecx
.text:00409839                 jmp     short loc_409824
.text:00409839 ; ---------------------------------------------------------------------------
.text:0040983B                 align 10h
.text:00409840
.text:00409840 loc_409840:                             ; CODE XREF: sub_408CF0+69↑j
.text:00409840                 mov     [esp+5Ch+Str1], offset aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:00409847                 call    getenv
.text:0040984C                 test    eax, eax
.text:0040984E                 jz      loc_408D64
.text:00409854                 jmp     loc_408D5F
.text:00409854 ; ---------------------------------------------------------------------------
.text:00409859                 align 10h
.text:00409860
.text:00409860 loc_409860:                             ; CODE XREF: sub_408CF0+3F↑j
.text:00409860                 mov     dword ptr [ebp+0], 1
.text:00409867                 mov     ebx, 1
.text:0040986C                 jmp     loc_408D40
.text:0040986C sub_408CF0      endp
.text:0040986C
.text:00409871 ; ---------------------------------------------------------------------------
.text:00409871                 jmp     short sub_409880
.text:00409871 ; ---------------------------------------------------------------------------
.text:00409873                 align 10h
.text:00409880
.text:00409880 ; =============== S U B R O U T I N E =======================================
.text:00409880
.text:00409880
.text:00409880 ; int __cdecl sub_409880(int, int, char *, int, int, int, int)
.text:00409880 sub_409880      proc near               ; CODE XREF: .text:00409871↑j
.text:00409880                                         ; sub_40A5C0+3A↓p ...
.text:00409880
.text:00409880 var_2C          = dword ptr -2Ch
.text:00409880 var_28          = dword ptr -28h
.text:00409880 Str             = dword ptr -24h
.text:00409880 var_20          = dword ptr -20h
.text:00409880 var_1C          = dword ptr -1Ch
.text:00409880 var_18          = dword ptr -18h
.text:00409880 var_14          = dword ptr -14h
.text:00409880 var_10          = dword ptr -10h
.text:00409880 arg_0           = dword ptr  4
.text:00409880 arg_4           = dword ptr  8
.text:00409880 arg_8           = dword ptr  0Ch
.text:00409880 arg_C           = dword ptr  10h
.text:00409880 arg_10          = dword ptr  14h
.text:00409880 arg_14          = dword ptr  18h
.text:00409880 arg_18          = dword ptr  1Ch
.text:00409880
.text:00409880                 sub     esp, 2Ch
.text:00409883                 mov     edx, dword_41F020
.text:00409889                 mov     [esp+2Ch+var_10], offset dword_4200B0 ; int
.text:00409891                 mov     ecx, dword_41F024
.text:00409897                 mov     ds:dword_4200B0, edx
.text:0040989D                 mov     edx, [esp+2Ch+arg_18]
.text:004098A1                 mov     ds:dword_4200B4, ecx
.text:004098A7                 mov     ecx, [esp+2Ch+arg_14]
.text:004098AB                 mov     [esp+2Ch+var_14], edx ; int
.text:004098AF                 mov     edx, [esp+2Ch+arg_10]
.text:004098B3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004098B7                 mov     ecx, [esp+2Ch+arg_C]
.text:004098BB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004098BF                 mov     edx, [esp+2Ch+arg_8]
.text:004098C3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004098C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004098CB                 mov     [esp+2Ch+Str], edx ; Str
.text:004098CF                 mov     edx, [esp+2Ch+arg_0]
.text:004098D3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004098D7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004098DA                 call    sub_408CF0
.text:004098DF                 mov     ecx, ds:dword_4200B0
.text:004098E5                 mov     dword_41F020, ecx
.text:004098EB                 mov     ecx, ds:dword_4200BC
.text:004098F1                 mov     ds:Block, ecx
.text:004098F7                 mov     ecx, ds:dword_4200B8
.text:004098FD                 mov     dword_41F028, ecx
.text:00409903                 add     esp, 2Ch
.text:00409906                 retn
.text:00409906 sub_409880      endp
.text:00409906
.text:00409906 ; ---------------------------------------------------------------------------
.text:00409907                 align 10h
.text:00409910                 sub     esp, 2Ch
.text:00409913                 mov     edx, dword_41F020
.text:00409919                 mov     dword ptr [esp+1Ch], offset dword_4200B0
.text:00409921                 mov     ecx, dword_41F024
.text:00409927                 mov     dword ptr [esp+18h], 1
.text:0040992F                 mov     ds:dword_4200B0, edx
.text:00409935                 mov     edx, [esp+38h]
.text:00409939                 mov     ds:dword_4200B4, ecx
.text:0040993F                 mov     ecx, [esp+34h]
.text:00409943                 mov     [esp+8], edx
.text:00409947                 mov     edx, [esp+30h]
.text:0040994B                 mov     [esp+4], ecx
.text:0040994F                 mov     dword ptr [esp+14h], 0
.text:00409957                 mov     dword ptr [esp+10h], 0
.text:0040995F                 mov     dword ptr [esp+0Ch], 0
.text:00409967                 mov     [esp], edx
.text:0040996A                 call    sub_408CF0
.text:0040996F                 mov     ecx, ds:dword_4200B0
.text:00409975                 mov     dword_41F020, ecx
.text:0040997B                 mov     ecx, ds:dword_4200BC
.text:00409981                 mov     ds:Block, ecx
.text:00409987                 mov     ecx, ds:dword_4200B8
.text:0040998D                 mov     dword_41F028, ecx
.text:00409993                 add     esp, 2Ch
.text:00409996                 retn
.text:00409996 ; ---------------------------------------------------------------------------
.text:00409997                 align 10h
.text:004099A0
.text:004099A0 ; =============== S U B R O U T I N E =======================================
.text:004099A0
.text:004099A0
.text:004099A0 sub_4099A0      proc near               ; CODE XREF: sub_408CF0+113↑p
.text:004099A0                                         ; sub_408CF0+AB9↑p
.text:004099A0
.text:004099A0 var_2C          = dword ptr -2Ch
.text:004099A0 var_28          = dword ptr -28h
.text:004099A0 var_24          = dword ptr -24h
.text:004099A0 var_20          = dword ptr -20h
.text:004099A0 var_1C          = dword ptr -1Ch
.text:004099A0 var_18          = dword ptr -18h
.text:004099A0 var_14          = dword ptr -14h
.text:004099A0 arg_0           = dword ptr  4
.text:004099A0 arg_4           = dword ptr  8
.text:004099A0
.text:004099A0                 push    ebp
.text:004099A1                 push    edi
.text:004099A2                 push    esi
.text:004099A3                 push    ebx
.text:004099A4                 sub     esp, 1Ch
.text:004099A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004099AB                 mov     eax, [esp+2Ch+arg_4]
.text:004099AF                 mov     ebx, [esp+2Ch+arg_4]
.text:004099B3                 mov     edx, [ecx+20h]
.text:004099B6                 mov     edi, [esp+2Ch+arg_0]
.text:004099BA                 mov     ecx, [ebx]
.text:004099BC                 mov     [esp+2Ch+var_2C], edx
.text:004099BF                 mov     [esp+2Ch+var_14], edx
.text:004099C3                 mov     edx, [eax+24h]
.text:004099C6                 mov     [esp+2Ch+var_28], ecx
.text:004099CA                 mov     [esp+2Ch+var_1C], ecx
.text:004099CE                 cmp     ecx, edx
.text:004099D0                 mov     [esp+2Ch+var_18], edx
.text:004099D4                 jle     short loc_409A50
.text:004099D6                 mov     esi, [esp+2Ch+var_2C]
.text:004099D9                 cmp     edx, esi
.text:004099DB                 jle     short loc_409A50
.text:004099DD                 lea     esi, [esi+0]
.text:004099E0
.text:004099E0 loc_4099E0:                             ; CODE XREF: sub_4099A0+A1↓j
.text:004099E0                 mov     ebx, [esp+2Ch+var_1C]
.text:004099E4                 mov     edx, [esp+2Ch+var_18]
.text:004099E8                 mov     ebp, [esp+2Ch+var_18]
.text:004099EC                 mov     eax, [esp+2Ch+var_14]
.text:004099F0                 sub     ebx, edx
.text:004099F2                 mov     [esp+2Ch+var_20], ebx
.text:004099F6                 sub     ebp, eax
.text:004099F8                 cmp     ebx, ebp
.text:004099FA                 jle     short loc_409A75
.text:004099FC                 xor     esi, esi
.text:004099FE                 cmp     esi, ebp
.text:00409A00                 jge     short loc_409A2D
.text:00409A02                 mov     ecx, [esp+2Ch+var_1C]
.text:00409A06                 sub     ecx, ebp
.text:00409A08                 mov     [esp+2Ch+var_24], ecx
.text:00409A0C                 lea     esi, [esi+0]
.text:00409A10
.text:00409A10 loc_409A10:                             ; CODE XREF: sub_4099A0+8B↓j
.text:00409A10                 mov     ecx, [esp+2Ch+var_14]
.text:00409A14                 mov     edx, [esp+2Ch+var_24]
.text:00409A18                 add     ecx, esi
.text:00409A1A                 add     edx, esi
.text:00409A1C                 mov     ebx, [edi+ecx*4]
.text:00409A1F                 mov     eax, [edi+edx*4]
.text:00409A22                 inc     esi
.text:00409A23                 cmp     esi, ebp
.text:00409A25                 mov     [edi+ecx*4], eax
.text:00409A28                 mov     [edi+edx*4], ebx
.text:00409A2B                 jl      short loc_409A10
.text:00409A2D
.text:00409A2D loc_409A2D:                             ; CODE XREF: sub_4099A0+60↑j
.text:00409A2D                 sub     [esp+2Ch+var_1C], ebp
.text:00409A31
.text:00409A31 loc_409A31:                             ; CODE XREF: sub_4099A0+107↓j
.text:00409A31                 mov     eax, [esp+2Ch+var_18]
.text:00409A35                 cmp     [esp+2Ch+var_1C], eax
.text:00409A39                 jle     short loc_409A50
.text:00409A3B                 mov     ebp, [esp+2Ch+var_14]
.text:00409A3F                 cmp     eax, ebp
.text:00409A41                 jg      short loc_4099E0
.text:00409A43                 lea     esi, [esi+0]
.text:00409A49                 lea     edi, [edi+0]
.text:00409A50
.text:00409A50 loc_409A50:                             ; CODE XREF: sub_4099A0+34↑j
.text:00409A50                                         ; sub_4099A0+3B↑j ...
.text:00409A50                 mov     esi, [esp+2Ch+var_28]
.text:00409A54                 mov     ecx, [esp+2Ch+var_18]
.text:00409A58                 mov     eax, [esp+2Ch+var_2C]
.text:00409A5B                 mov     edi, [esp+2Ch+arg_4]
.text:00409A5F                 mov     edx, [esp+2Ch+var_28]
.text:00409A63                 sub     esi, ecx
.text:00409A65                 add     esi, eax
.text:00409A67                 mov     [edi+20h], esi
.text:00409A6A                 mov     [edi+24h], edx
.text:00409A6D                 add     esp, 1Ch
.text:00409A70                 pop     ebx
.text:00409A71                 pop     esi
.text:00409A72                 pop     edi
.text:00409A73                 pop     ebp
.text:00409A74                 retn
.text:00409A75 ; ---------------------------------------------------------------------------
.text:00409A75
.text:00409A75 loc_409A75:                             ; CODE XREF: sub_4099A0+5A↑j
.text:00409A75                 xor     esi, esi
.text:00409A77                 cmp     esi, [esp+2Ch+var_20]
.text:00409A7B                 jge     short loc_409A9F
.text:00409A7D                 lea     esi, [esi+0]
.text:00409A80
.text:00409A80 loc_409A80:                             ; CODE XREF: sub_4099A0+FD↓j
.text:00409A80                 mov     ebx, [esp+2Ch+var_14]
.text:00409A84                 mov     ebp, [esp+2Ch+var_18]
.text:00409A88                 add     ebx, esi
.text:00409A8A                 add     ebp, esi
.text:00409A8C                 mov     edx, [edi+ebx*4]
.text:00409A8F                 inc     esi
.text:00409A90                 cmp     esi, [esp+2Ch+var_20]
.text:00409A94                 mov     ecx, [edi+ebp*4]
.text:00409A97                 mov     [edi+ebx*4], ecx
.text:00409A9A                 mov     [edi+ebp*4], edx
.text:00409A9D                 jl      short loc_409A80
.text:00409A9F
.text:00409A9F loc_409A9F:                             ; CODE XREF: sub_4099A0+DB↑j
.text:00409A9F                 mov     esi, [esp+2Ch+var_20]
.text:00409AA3                 add     [esp+2Ch+var_14], esi
.text:00409AA7                 jmp     short loc_409A31
.text:00409AA7 sub_4099A0      endp
.text:00409AA7
.text:00409AA7 ; ---------------------------------------------------------------------------
.text:00409AA9                 align 20h
.text:00409AC0
.text:00409AC0 ; =============== S U B R O U T I N E =======================================
.text:00409AC0
.text:00409AC0
.text:00409AC0 sub_409AC0      proc near               ; DATA XREF: .data:Src↓o
.text:00409AC0                 jle     short $+2
.text:00409AC2
.text:00409AC2 loc_409AC2:                             ; CODE XREF: sub_409AC0↑j
.text:00409AC2                 lea     esi, [esi+0]
.text:00409AC9                 lea     edi, [edi+0]
.text:00409AC9 sub_409AC0      endp
.text:00409AC9
.text:00409AD0
.text:00409AD0 ; =============== S U B R O U T I N E =======================================
.text:00409AD0
.text:00409AD0
.text:00409AD0 ; int __cdecl sub_409AD0(char *, int)
.text:00409AD0 sub_409AD0      proc near               ; CODE XREF: sub_403840+429↑p
.text:00409AD0                                         ; sub_404B50+1520↑p
.text:00409AD0
.text:00409AD0 Str             = dword ptr -2Ch
.text:00409AD0 Src             = dword ptr -28h
.text:00409AD0 Size            = dword ptr -24h
.text:00409AD0 var_14          = dword ptr -14h
.text:00409AD0 arg_0           = dword ptr  4
.text:00409AD0 arg_4           = dword ptr  8
.text:00409AD0
.text:00409AD0                 push    ebp
.text:00409AD1                 push    edi
.text:00409AD2                 push    esi
.text:00409AD3                 push    ebx
.text:00409AD4                 sub     esp, 1Ch
.text:00409AD7                 mov     ebp, [esp+2Ch+arg_0]
.text:00409ADB                 mov     [esp+2Ch+Str], ebp ; Str
.text:00409ADE                 call    strlen
.text:00409AE3                 mov     edx, Src
.text:00409AE9                 mov     ebx, eax
.text:00409AEB                 mov     [esp+2Ch+Str], edx ; Str
.text:00409AEE                 call    strlen
.text:00409AF3                 lea     esi, [eax+1]
.text:00409AF6                 cmp     esi, 8
.text:00409AF9                 mov     eax, esi
.text:00409AFB                 ja      short loc_409B02
.text:00409AFD                 mov     eax, 9
.text:00409B02
.text:00409B02 loc_409B02:                             ; CODE XREF: sub_409AD0+2B↑j
.text:00409B02                 lea     edi, [eax+ebx+1]
.text:00409B06                 mov     [esp+2Ch+Str], edi ; size_t
.text:00409B09                 call    sub_40A850
.text:00409B0E                 mov     [esp+2Ch+var_14], eax
.text:00409B12                 lea     ecx, [ebx+1]
.text:00409B15                 mov     [esp+2Ch+Size], ecx ; Size
.text:00409B19                 mov     [esp+2Ch+Src], ebp ; Src
.text:00409B1D                 mov     [esp+2Ch+Str], eax ; void *
.text:00409B20                 call    memcpy
.text:00409B25                 cmp     [esp+2Ch+arg_4], 1
.text:00409B2A                 jz      short loc_409B50
.text:00409B2C                 mov     [esp+2Ch+Size], ebx
.text:00409B30                 lea     edx, [esp+2Ch+var_14]
.text:00409B34                 mov     [esp+2Ch+Src], edi
.text:00409B38                 mov     [esp+2Ch+Str], edx
.text:00409B3B                 call    sub_409E20
.text:00409B40                 cmp     eax, 1
.text:00409B43                 jz      short loc_409B6C
.text:00409B45                 cmp     eax, 1
.text:00409B48                 jb      short loc_409B84
.text:00409B4A                 cmp     eax, 2
.text:00409B4D                 jz      short loc_409B90
.text:00409B4F                 nop
.text:00409B50
.text:00409B50 loc_409B50:                             ; CODE XREF: sub_409AD0+5A↑j
.text:00409B50                                         ; sub_409AD0+C7↓j
.text:00409B50                 mov     [esp+2Ch+Size], esi ; Size
.text:00409B54                 mov     edi, [esp+2Ch+var_14]
.text:00409B58                 mov     esi, Src
.text:00409B5E                 add     edi, ebx
.text:00409B60                 mov     [esp+2Ch+Src], esi ; Src
.text:00409B64                 mov     [esp+2Ch+Str], edi ; void *
.text:00409B67                 call    memcpy
.text:00409B6C
.text:00409B6C loc_409B6C:                             ; CODE XREF: sub_409AD0+73↑j
.text:00409B6C                                         ; sub_409AD0+C5↓j
.text:00409B6C                 mov     [esp+2Ch+Src], ebx
.text:00409B70                 mov     ebx, [esp+2Ch+var_14]
.text:00409B74                 mov     [esp+2Ch+Size], 7Eh ; '~'
.text:00409B7C                 mov     [esp+2Ch+Str], ebx
.text:00409B7F                 call    sub_409D60
.text:00409B84
.text:00409B84 loc_409B84:                             ; CODE XREF: sub_409AD0+78↑j
.text:00409B84                 mov     eax, [esp+2Ch+var_14]
.text:00409B88                 add     esp, 1Ch
.text:00409B8B                 pop     ebx
.text:00409B8C                 pop     esi
.text:00409B8D                 pop     edi
.text:00409B8E                 pop     ebp
.text:00409B8F                 retn
.text:00409B90 ; ---------------------------------------------------------------------------
.text:00409B90
.text:00409B90 loc_409B90:                             ; CODE XREF: sub_409AD0+7D↑j
.text:00409B90                 cmp     [esp+2Ch+arg_4], 2
.text:00409B95                 jnz     short loc_409B6C
.text:00409B97                 jmp     short loc_409B50
.text:00409B97 sub_409AD0      endp
.text:00409B97
.text:00409B97 ; ---------------------------------------------------------------------------
.text:00409B99 aNone           db 'none',0             ; DATA XREF: .text:off_409BE0↓o
.text:00409B9E aOff            db 'off',0              ; DATA XREF: .text:00409BE4↓o
.text:00409BA2 aSimple         db 'simple',0           ; DATA XREF: .text:00409BE8↓o
.text:00409BA9 aNever_0        db 'never',0            ; DATA XREF: .text:00409BEC↓o
.text:00409BAF aExisting       db 'existing',0         ; DATA XREF: .text:00409BF0↓o
.text:00409BB8 aNil            db 'nil',0              ; DATA XREF: .text:00409BF4↓o
.text:00409BBC aNumbered       db 'numbered',0         ; DATA XREF: .text:00409BF8↓o
.text:00409BC5 aT              db 't',0                ; DATA XREF: .text:00409BFC↓o
.text:00409BC7                 align 20h
.text:00409BE0 off_409BE0      dd offset aNone         ; DATA XREF: .text:00409C82↓o
.text:00409BE0                                         ; sub_409CC0+46↓o ...
.text:00409BE0                                         ; "none"
.text:00409BE4                 dd offset aOff          ; "off"
.text:00409BE8                 dd offset aSimple       ; "simple"
.text:00409BEC                 dd offset aNever_0      ; "never"
.text:00409BF0                 dd offset aExisting     ; "existing"
.text:00409BF4                 dd offset aNil          ; "nil"
.text:00409BF8                 dd offset aNumbered     ; "numbered"
.text:00409BFC                 dd offset aT            ; "t"
.text:00409C00                 dd 0
.text:00409C04                 align 20h
.text:00409C20 dword_409C20    dd 0                    ; DATA XREF: .text:00409C7A↓o
.text:00409C20                                         ; .text:00409C92↓r ...
.text:00409C24                 align 8
.text:00409C28                 dd 2 dup(1), 2 dup(2), 2 dup(3), 8B1CEC83h, 85242454h
.text:00409C28                 dd 800574D2h, 1075003Ah, 2B8h
.text:00409C54                 db 0
.text:00409C55 ; ---------------------------------------------------------------------------
.text:00409C55
.text:00409C55 loc_409C55:                             ; CODE XREF: .text:00409C99↓j
.text:00409C55                 add     esp, 1Ch
.text:00409C58                 retn
.text:00409C58 ; ---------------------------------------------------------------------------
.text:00409C59                 align 10h
.text:00409C60                 mov     [esp+4], edx
.text:00409C64                 mov     ecx, off_41F010
.text:00409C6A                 mov     edx, [esp+20h]
.text:00409C6E                 mov     dword ptr [esp+10h], 4
.text:00409C76                 mov     [esp+14h], ecx
.text:00409C7A                 mov     dword ptr [esp+0Ch], offset dword_409C20
.text:00409C82                 mov     dword ptr [esp+8], offset off_409BE0 ; "none"
.text:00409C8A                 mov     [esp], edx
.text:00409C8D                 call    sub_408810
.text:00409C92                 mov     eax, ds:dword_409C20[eax*4]
.text:00409C99                 jmp     short loc_409C55
.text:00409C99 ; ---------------------------------------------------------------------------
.text:00409C9B ; const char aVersionControl[]
.text:00409C9B aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: sub_409CC0:loc_409CD0↓o
.text:00409CAB ; const char aVersionControl_0[]
.text:00409CAB aVersionControl_0 db '$VERSION_CONTROL',0
.text:00409CAB                                         ; DATA XREF: sub_409CC0+56↓o
.text:00409CBC                 align 10h
.text:00409CC0
.text:00409CC0 ; =============== S U B R O U T I N E =======================================
.text:00409CC0
.text:00409CC0
.text:00409CC0 sub_409CC0      proc near               ; CODE XREF: sub_4027B0+C9E↑p
.text:00409CC0
.text:00409CC0 VarName         = dword ptr -1Ch
.text:00409CC0 var_18          = dword ptr -18h
.text:00409CC0 var_14          = dword ptr -14h
.text:00409CC0 var_10          = dword ptr -10h
.text:00409CC0 var_C           = dword ptr -0Ch
.text:00409CC0 var_8           = dword ptr -8
.text:00409CC0 arg_0           = dword ptr  4
.text:00409CC0 arg_4           = dword ptr  8
.text:00409CC0
.text:00409CC0                 sub     esp, 1Ch
.text:00409CC3                 mov     edx, [esp+1Ch+arg_4]
.text:00409CC7                 test    edx, edx
.text:00409CC9                 jz      short loc_409CD0
.text:00409CCB                 cmp     byte ptr [edx], 0
.text:00409CCE                 jnz     short loc_409D30
.text:00409CD0
.text:00409CD0 loc_409CD0:                             ; CODE XREF: sub_409CC0+9↑j
.text:00409CD0                 mov     [esp+1Ch+VarName], offset aVersionControl ; "VERSION_CONTROL"
.text:00409CD7                 call    getenv
.text:00409CDC                 test    eax, eax
.text:00409CDE                 jz      short loc_409CE5
.text:00409CE0                 cmp     byte ptr [eax], 0
.text:00409CE3                 jnz     short loc_409CF0
.text:00409CE5
.text:00409CE5 loc_409CE5:                             ; CODE XREF: sub_409CC0+1E↑j
.text:00409CE5                 mov     eax, 2
.text:00409CEA
.text:00409CEA loc_409CEA:                             ; CODE XREF: sub_409CC0+69↓j
.text:00409CEA                 add     esp, 1Ch
.text:00409CED                 retn
.text:00409CED ; ---------------------------------------------------------------------------
.text:00409CEE                 align 10h
.text:00409CF0
.text:00409CF0 loc_409CF0:                             ; CODE XREF: sub_409CC0+23↑j
.text:00409CF0                 mov     [esp+1Ch+var_C], 4 ; int
.text:00409CF8                 mov     ecx, off_41F010
.text:00409CFE                 mov     [esp+1Ch+var_10], offset dword_409C20 ; int
.text:00409D06                 mov     [esp+1Ch+var_14], offset off_409BE0 ; int
.text:00409D0E                 mov     [esp+1Ch+var_8], ecx ; int
.text:00409D12                 mov     [esp+1Ch+var_18], eax ; char *
.text:00409D16                 mov     [esp+1Ch+VarName], offset aVersionControl_0 ; "$VERSION_CONTROL"
.text:00409D1D
.text:00409D1D loc_409D1D:                             ; CODE XREF: sub_409CC0+9D↓j
.text:00409D1D                 call    sub_408810
.text:00409D22                 mov     eax, ds:dword_409C20[eax*4]
.text:00409D29                 jmp     short loc_409CEA
.text:00409D29 ; ---------------------------------------------------------------------------
.text:00409D2B                 align 10h
.text:00409D30
.text:00409D30 loc_409D30:                             ; CODE XREF: sub_409CC0+E↑j
.text:00409D30                 mov     [esp+1Ch+var_18], edx
.text:00409D34                 mov     ecx, off_41F010
.text:00409D3A                 mov     edx, [esp+1Ch+arg_0]
.text:00409D3E                 mov     [esp+1Ch+var_C], 4
.text:00409D46                 mov     [esp+1Ch+var_8], ecx
.text:00409D4A                 mov     [esp+1Ch+var_10], offset dword_409C20
.text:00409D52                 mov     [esp+1Ch+var_14], offset off_409BE0 ; "none"
.text:00409D5A                 mov     [esp+1Ch+VarName], edx
.text:00409D5D                 jmp     short loc_409D1D
.text:00409D5D sub_409CC0      endp
.text:00409D5D
.text:00409D5D ; ---------------------------------------------------------------------------
.text:00409D5F                 align 10h
.text:00409D60
.text:00409D60 ; =============== S U B R O U T I N E =======================================
.text:00409D60
.text:00409D60
.text:00409D60 sub_409D60      proc near               ; CODE XREF: sub_409AD0+AF↑p
.text:00409D60
.text:00409D60 var_1C          = dword ptr -1Ch
.text:00409D60 var_18          = dword ptr -18h
.text:00409D60 var_14          = dword ptr -14h
.text:00409D60 var_10          = dword ptr -10h
.text:00409D60 var_C           = dword ptr -0Ch
.text:00409D60 var_8           = dword ptr -8
.text:00409D60 var_4           = dword ptr -4
.text:00409D60 arg_0           = dword ptr  4
.text:00409D60 arg_4           = dword ptr  8
.text:00409D60 arg_8           = byte ptr  0Ch
.text:00409D60
.text:00409D60                 sub     esp, 1Ch
.text:00409D63                 movzx   edx, [esp+1Ch+arg_8]
.text:00409D68                 mov     [esp+1Ch+var_10], ebx
.text:00409D6C                 mov     [esp+1Ch+var_C], esi
.text:00409D70                 mov     [esp+1Ch+var_8], edi
.text:00409D74                 mov     edi, 0FFh
.text:00409D79                 mov     byte ptr [esp+1Ch+var_14+3], dl
.text:00409D7D                 mov     edx, [esp+1Ch+arg_0]
.text:00409D81                 mov     [esp+1Ch+var_4], ebp
.text:00409D85                 mov     [esp+1Ch+var_1C], edx
.text:00409D88                 call    sub_40AC10
.text:00409D8D                 mov     [esp+1Ch+var_1C], eax ; char *
.text:00409D90                 mov     esi, eax
.text:00409D92                 call    sub_40AC70
.text:00409D97                 cmp     eax, 0Eh
.text:00409D9A                 mov     ebx, eax
.text:00409D9C                 ja      short loc_409DD6
.text:00409D9E
.text:00409D9E loc_409D9E:                             ; CODE XREF: sub_409D60+B1↓j
.text:00409D9E                 cmp     edi, ebx
.text:00409DA0                 jnb     short loc_409DC2
.text:00409DA2                 mov     ebx, [esp+1Ch+arg_0]
.text:00409DA6                 mov     ebp, [esp+1Ch+arg_4]
.text:00409DAA                 add     ebx, ebp
.text:00409DAC                 sub     ebx, esi
.text:00409DAE                 cmp     edi, ebx
.text:00409DB0                 ja      short loc_409DB5
.text:00409DB2                 lea     ebx, [edi-1]
.text:00409DB5
.text:00409DB5 loc_409DB5:                             ; CODE XREF: sub_409D60+50↑j
.text:00409DB5                 movzx   ecx, byte ptr [esp+1Ch+var_14+3]
.text:00409DBA                 mov     byte ptr [ebx+esi+1], 0
.text:00409DBF                 mov     [ebx+esi], cl
.text:00409DC2
.text:00409DC2 loc_409DC2:                             ; CODE XREF: sub_409D60+40↑j
.text:00409DC2                 mov     ebx, [esp+1Ch+var_10]
.text:00409DC6                 mov     esi, [esp+1Ch+var_C]
.text:00409DCA                 mov     edi, [esp+1Ch+var_8]
.text:00409DCE                 mov     ebp, [esp+1Ch+var_4]
.text:00409DD2                 add     esp, 1Ch
.text:00409DD5                 retn
.text:00409DD6 ; ---------------------------------------------------------------------------
.text:00409DD6
.text:00409DD6 loc_409DD6:                             ; CODE XREF: sub_409D60+3C↑j
.text:00409DD6                 movzx   ebp, word ptr [esi]
.text:00409DD9                 mov     word ptr [esp+1Ch+var_14], bp
.text:00409DDE                 mov     word ptr [esi], 2Eh ; '.'
.text:00409DE3                 call    _errno
.text:00409DE8                 mov     dword ptr [eax], 0
.text:00409DEE                 mov     ecx, [esp+1Ch+arg_0]
.text:00409DF2                 mov     [esp+1Ch+var_18], 3
.text:00409DFA                 mov     [esp+1Ch+var_1C], ecx
.text:00409DFD                 call    sub_418B30
.text:00409E02                 test    eax, eax
.text:00409E04                 mov     ebp, eax
.text:00409E06                 js      short loc_409E13
.text:00409E08
.text:00409E08 loc_409E08:                             ; CODE XREF: sub_409D60+BE↓j
.text:00409E08                 mov     edi, ebp
.text:00409E0A
.text:00409E0A loc_409E0A:                             ; CODE XREF: sub_409D60+BC↓j
.text:00409E0A                 mov     edx, [esp+1Ch+var_14]
.text:00409E0E                 mov     [esi], dx
.text:00409E11                 jmp     short loc_409D9E
.text:00409E13 ; ---------------------------------------------------------------------------
.text:00409E13
.text:00409E13 loc_409E13:                             ; CODE XREF: sub_409D60+A6↑j
.text:00409E13                 call    _errno
.text:00409E18                 mov     ecx, [eax]
.text:00409E1A                 test    ecx, ecx
.text:00409E1C                 jnz     short loc_409E0A
.text:00409E1E                 jmp     short loc_409E08
.text:00409E1E sub_409D60      endp
.text:00409E1E
.text:00409E20
.text:00409E20 ; =============== S U B R O U T I N E =======================================
.text:00409E20
.text:00409E20
.text:00409E20 sub_409E20      proc near               ; CODE XREF: sub_409AD0+6B↑p
.text:00409E20
.text:00409E20 var_3C          = dword ptr -3Ch
.text:00409E20 Src             = dword ptr -38h
.text:00409E20 Size            = dword ptr -34h
.text:00409E20 var_29          = byte ptr -29h
.text:00409E20 var_28          = dword ptr -28h
.text:00409E20 var_24          = dword ptr -24h
.text:00409E20 var_20          = dword ptr -20h
.text:00409E20 var_1C          = dword ptr -1Ch
.text:00409E20 var_18          = dword ptr -18h
.text:00409E20 var_14          = dword ptr -14h
.text:00409E20 arg_0           = dword ptr  4
.text:00409E20 arg_4           = dword ptr  8
.text:00409E20 arg_8           = dword ptr  0Ch
.text:00409E20
.text:00409E20                 push    ebp
.text:00409E21                 push    edi
.text:00409E22                 push    esi
.text:00409E23                 push    ebx
.text:00409E24                 sub     esp, 2Ch
.text:00409E27                 mov     edx, [esp+3Ch+arg_0]
.text:00409E2B                 mov     [esp+3Ch+var_14], 2
.text:00409E33                 mov     [esp+3Ch+var_20], 1
.text:00409E3B                 mov     ebp, [edx]
.text:00409E3D                 mov     [esp+3Ch+var_1C], ebp
.text:00409E41                 mov     [esp+3Ch+var_3C], ebp
.text:00409E44                 call    sub_40AC10
.text:00409E49                 mov     [esp+3Ch+var_3C], eax ; char *
.text:00409E4C                 mov     esi, [esp+3Ch+var_1C]
.text:00409E50                 mov     ecx, eax
.text:00409E52                 mov     edi, eax
.text:00409E54                 sub     ecx, esi
.text:00409E56                 mov     [esp+3Ch+var_24], ecx
.text:00409E5A                 call    sub_40AC70
.text:00409E5F                 mov     [esp+3Ch+var_28], eax
.text:00409E63                 movzx   ebx, word ptr [edi]
.text:00409E66                 mov     word ptr [edi], 2Eh ; '.'
.text:00409E6B                 mov     eax, [esp+3Ch+var_1C]
.text:00409E6F                 mov     [esp+3Ch+var_3C], eax ; LPCSTR
.text:00409E72                 call    sub_418C00
.text:00409E77                 mov     [esp+3Ch+var_18], eax
.text:00409E7B                 mov     eax, 2
.text:00409E80                 mov     [edi], bx
.text:00409E83                 mov     edx, [esp+3Ch+var_28]
.text:00409E87                 mov     dword ptr [edx+edi], 7E317E2Eh
.text:00409E8E                 mov     byte ptr [edx+edi+4], 0
.text:00409E93                 mov     edx, [esp+3Ch+var_18]
.text:00409E97                 test    edx, edx
.text:00409E99                 jz      loc_40A09C
.text:00409E9F                 nop
.text:00409EA0
.text:00409EA0 loc_409EA0:                             ; CODE XREF: sub_409E20+9F↓j
.text:00409EA0                                         ; sub_409E20+E5↓j ...
.text:00409EA0                 mov     ebx, [esp+3Ch+var_18]
.text:00409EA4                 mov     [esp+3Ch+var_3C], ebx
.text:00409EA7                 call    sub_417310
.text:00409EAC                 test    eax, eax
.text:00409EAE                 mov     ebx, eax
.text:00409EB0                 jz      loc_40A081
.text:00409EB6                 mov     ecx, [ebx+4]
.text:00409EB9                 mov     edi, [ebx]
.text:00409EBB                 mov     eax, ecx
.text:00409EBD                 or      eax, edi
.text:00409EBF                 jz      short loc_409EA0
.text:00409EC1                 lea     ebp, [ebx+0Ch]
.text:00409EC4                 mov     ecx, ebp
.text:00409EC6                 mov     esi, ebp
.text:00409EC8                 nop
.text:00409EC9                 lea     esi, [esi+0]
.text:00409ED0
.text:00409ED0 loc_409ED0:                             ; CODE XREF: sub_409E20+C5↓j
.text:00409ED0                 mov     edi, [ecx]
.text:00409ED2                 add     ecx, 4
.text:00409ED5                 lea     edx, [edi-1010101h]
.text:00409EDB                 not     edi
.text:00409EDD                 and     edx, edi
.text:00409EDF                 and     edx, 80808080h
.text:00409EE5                 jz      short loc_409ED0
.text:00409EE7                 test    edx, 8080h
.text:00409EED                 jnz     short loc_409EF5
.text:00409EEF                 shr     edx, 10h
.text:00409EF2                 add     ecx, 2
.text:00409EF5
.text:00409EF5 loc_409EF5:                             ; CODE XREF: sub_409E20+CD↑j
.text:00409EF5                 add     dl, dl
.text:00409EF7                 sbb     ecx, 3
.text:00409EFA                 sub     ecx, esi
.text:00409EFC                 mov     esi, [esp+3Ch+var_28]
.text:00409F00                 add     esi, 4
.text:00409F03                 cmp     ecx, esi
.text:00409F05                 jb      short loc_409EA0
.text:00409F07                 cld
.text:00409F08                 mov     ecx, [esp+3Ch+var_28]
.text:00409F0C                 mov     edi, ebp
.text:00409F0E                 mov     esi, [esp+3Ch+var_1C]
.text:00409F12                 mov     edx, [esp+3Ch+var_24]
.text:00409F16                 add     ecx, 2
.text:00409F19                 add     esi, edx
.text:00409F1B                 cmp     ecx, ecx
.text:00409F1D                 repe cmpsb
.text:00409F1F                 jnz     loc_409EA0
.text:00409F25                 mov     ebp, [esp+3Ch+var_28]
.text:00409F29                 lea     edx, [ebp+ebx+0]
.text:00409F2D                 lea     ebp, [edx+0Eh]
.text:00409F30                 movzx   ecx, byte ptr [edx+0Eh]
.text:00409F34                 mov     bl, cl
.text:00409F36                 sub     bl, 31h ; '1'
.text:00409F39                 cmp     bl, 8
.text:00409F3C                 ja      loc_409EA0
.text:00409F42                 cmp     cl, 39h ; '9'
.text:00409F45                 mov     ebx, 1
.text:00409F4A                 setz    [esp+3Ch+var_29]
.text:00409F4F                 movsx   ecx, byte ptr [edx+0Fh]
.text:00409F53                 sub     ecx, 30h ; '0'
.text:00409F56                 cmp     ecx, 9
.text:00409F59                 ja      loc_40A078
.text:00409F5F                 movzx   edx, byte ptr [ebp+1]
.text:00409F63
.text:00409F63 loc_409F63:                             ; CODE XREF: sub_409E20+160↓j
.text:00409F63                 xor     eax, eax
.text:00409F65                 cmp     dl, 39h ; '9'
.text:00409F68                 jz      loc_40A066
.text:00409F6E
.text:00409F6E loc_409F6E:                             ; CODE XREF: sub_409E20+24B↓j
.text:00409F6E                                         ; sub_409E20+253↓j
.text:00409F6E                 mov     [esp+3Ch+var_29], al
.text:00409F72                 inc     ebx
.text:00409F73                 movzx   edx, byte ptr [ebx+ebp]
.text:00409F77                 movsx   edi, dl
.text:00409F7A                 sub     edi, 30h ; '0'
.text:00409F7D                 cmp     edi, 9
.text:00409F80                 jbe     short loc_409F63
.text:00409F82
.text:00409F82 loc_409F82:                             ; CODE XREF: sub_409E20+25C↓j
.text:00409F82                 cmp     dl, 7Eh ; '~'
.text:00409F85                 jnz     loc_409EA0
.text:00409F8B                 cmp     byte ptr [ebx+ebp+1], 0
.text:00409F90                 jnz     loc_409EA0
.text:00409F96                 cmp     [esp+3Ch+var_20], ebx
.text:00409F9A                 jb      short loc_409FCB
.text:00409F9C                 cmp     [esp+3Ch+var_20], ebx
.text:00409FA0                 jnz     loc_409EA0
.text:00409FA6                 cld
.text:00409FA7                 mov     edi, [esp+3Ch+var_1C]
.text:00409FAB                 mov     ecx, ebx
.text:00409FAD                 mov     eax, [esp+3Ch+arg_8]
.text:00409FB1                 cmp     ebx, ebx
.text:00409FB3                 lea     esi, [eax+edi+2]
.text:00409FB7                 mov     edi, ebp
.text:00409FB9                 repe cmpsb
.text:00409FBB                 setnbe  dl
.text:00409FBE                 setb    cl
.text:00409FC1                 sub     dl, cl
.text:00409FC3                 test    dl, dl
.text:00409FC5                 jg      loc_409EA0
.text:00409FCB
.text:00409FCB loc_409FCB:                             ; CODE XREF: sub_409E20+17A↑j
.text:00409FCB                 movzx   edi, [esp+3Ch+var_29]
.text:00409FD0                 xor     edx, edx
.text:00409FD2                 mov     ecx, [esp+3Ch+arg_8]
.text:00409FD6                 cmp     [esp+3Ch+var_29], 0
.text:00409FDB                 lea     esi, [ebx+edi]
.text:00409FDE                 mov     [esp+3Ch+var_20], esi
.text:00409FE2                 mov     eax, [esp+3Ch+var_20]
.text:00409FE6                 setnz   dl
.text:00409FE9                 lea     esi, [eax+ecx+3]
.text:00409FED                 cmp     [esp+3Ch+arg_4], esi
.text:00409FF1                 mov     [esp+3Ch+var_14], edx
.text:00409FF5                 jbe     short loc_40A042
.text:00409FF7
.text:00409FF7 loc_409FF7:                             ; CODE XREF: sub_409E20+244↓j
.text:00409FF7                 mov     esi, [esp+3Ch+var_1C]
.text:00409FFB                 mov     eax, [esp+3Ch+arg_8]
.text:00409FFF                 add     esi, eax
.text:0040A001                 mov     byte ptr [esi], 2Eh ; '.'
.text:0040A004                 inc     esi
.text:0040A005                 mov     byte ptr [esi], 7Eh ; '~'
.text:0040A008                 inc     esi
.text:0040A009                 mov     byte ptr [esi], 30h ; '0'
.text:0040A00C                 add     esi, edi
.text:0040A00E                 lea     edi, [ebx+2]
.text:0040A011                 mov     [esp+3Ch+var_3C], esi ; void *
.text:0040A014                 lea     esi, [ebx+esi-1]
.text:0040A018                 mov     [esp+3Ch+Size], edi ; Size
.text:0040A01C                 mov     [esp+3Ch+Src], ebp ; Src
.text:0040A020                 call    memcpy
.text:0040A025                 movzx   eax, byte ptr [esi]
.text:0040A028                 cmp     al, 39h ; '9'
.text:0040A02A                 jz      short loc_40A035
.text:0040A02C
.text:0040A02C loc_40A02C:                             ; CODE XREF: sub_409E20+220↓j
.text:0040A02C                 inc     al
.text:0040A02E                 mov     [esi], al
.text:0040A030                 jmp     loc_409EA0
.text:0040A035 ; ---------------------------------------------------------------------------
.text:0040A035
.text:0040A035 loc_40A035:                             ; CODE XREF: sub_409E20+20A↑j
.text:0040A035                                         ; sub_409E20+21E↓j
.text:0040A035                 mov     byte ptr [esi], 30h ; '0'
.text:0040A038                 dec     esi
.text:0040A039                 movzx   eax, byte ptr [esi]
.text:0040A03C                 cmp     al, 39h ; '9'
.text:0040A03E                 jz      short loc_40A035
.text:0040A040                 jmp     short loc_40A02C
.text:0040A042 ; ---------------------------------------------------------------------------
.text:0040A042
.text:0040A042 loc_40A042:                             ; CODE XREF: sub_409E20+1D5↑j
.text:0040A042                 mov     [esp+3Ch+Size], esi ; int
.text:0040A046                 mov     ecx, [esp+3Ch+var_1C]
.text:0040A04A                 add     esi, esi
.text:0040A04C                 mov     [esp+3Ch+Src], 2 ; int
.text:0040A054                 mov     [esp+3Ch+var_3C], ecx ; void *
.text:0040A057                 call    sub_40A880
.text:0040A05C                 mov     [esp+3Ch+var_1C], eax
.text:0040A060                 mov     [esp+3Ch+arg_4], esi
.text:0040A064                 jmp     short loc_409FF7
.text:0040A066 ; ---------------------------------------------------------------------------
.text:0040A066
.text:0040A066 loc_40A066:                             ; CODE XREF: sub_409E20+148↑j
.text:0040A066                 cmp     [esp+3Ch+var_29], 0
.text:0040A06B                 jz      loc_409F6E
.text:0040A071                 mov     al, 1
.text:0040A073                 jmp     loc_409F6E
.text:0040A078 ; ---------------------------------------------------------------------------
.text:0040A078
.text:0040A078 loc_40A078:                             ; CODE XREF: sub_409E20+139↑j
.text:0040A078                 movzx   edx, byte ptr [ebp+1]
.text:0040A07C                 jmp     loc_409F82
.text:0040A081 ; ---------------------------------------------------------------------------
.text:0040A081
.text:0040A081 loc_40A081:                             ; CODE XREF: sub_409E20+90↑j
.text:0040A081                 mov     edx, [esp+3Ch+var_18]
.text:0040A085                 mov     [esp+3Ch+var_3C], edx ; void *
.text:0040A088                 call    sub_418B90
.text:0040A08D                 mov     esi, [esp+3Ch+var_1C]
.text:0040A091                 mov     ebp, [esp+3Ch+arg_0]
.text:0040A095                 mov     eax, [esp+3Ch+var_14]
.text:0040A099                 mov     [ebp+0], esi
.text:0040A09C
.text:0040A09C loc_40A09C:                             ; CODE XREF: sub_409E20+79↑j
.text:0040A09C                 add     esp, 2Ch
.text:0040A09F                 pop     ebx
.text:0040A0A0                 pop     esi
.text:0040A0A1                 pop     edi
.text:0040A0A2                 pop     ebp
.text:0040A0A3                 retn
.text:0040A0A3 sub_409E20      endp
.text:0040A0A3
.text:0040A0A3 ; ---------------------------------------------------------------------------
.text:0040A0A4                 align 20h
.text:0040A0C0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:0040A0C0                                         ; DATA XREF: .data:Buffer↓o
.text:0040A0F2 ; const char aSSS[]
.text:0040A0F2 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_40A3B0+50↓o
.text:0040A0FE aWrittenByS     db 'Written by %s.',0Ah,0
.text:0040A0FE                                         ; DATA XREF: sub_40A3B0:loc_40A451↓o
.text:0040A10E                 align 20h
.text:0040A120 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:0040A120                                         ; DATA XREF: sub_40A3B0+100↓o
.text:0040A120                 db 'ere is NO',0Ah
.text:0040A120                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:0040A120                 db 'R PURPOSE.',0Ah,0
.text:0040A1B8 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:0040A1B8                                         ; DATA XREF: sub_40A3B0:loc_40A4F1↓o
.text:0040A1CF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:0040A1CF                                         ; DATA XREF: sub_40A3B0:loc_40A4FD↓o
.text:0040A1EB                 align 20h
.text:0040A200 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:0040A200                                         ; DATA XREF: sub_40A3B0:loc_40A509↓o
.text:0040A200                 db 'and %s.',0Ah,0
.text:0040A220 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:0040A220                                         ; DATA XREF: sub_40A3B0:loc_40A515↓o
.text:0040A220                 db '%s, and %s.',0Ah,0
.text:0040A244                 align 20h
.text:0040A260 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:0040A260                                         ; DATA XREF: sub_40A3B0:loc_40A521↓o
.text:0040A260                 db '%s, %s, and %s.',0Ah,0
.text:0040A288                 align 20h
.text:0040A2A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:0040A2A0                                         ; DATA XREF: sub_40A3B0:loc_40A52D↓o
.text:0040A2A0                 db '%s, %s, %s, and %s.',0Ah,0
.text:0040A2CC                 align 20h
.text:0040A2E0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:0040A2E0                                         ; DATA XREF: sub_40A3B0:loc_40A539↓o
.text:0040A2E0                 db '%s, %s, %s, %s,',0Ah
.text:0040A2E0                 db 'and %s.',0Ah,0
.text:0040A310                 align 20h
.text:0040A320 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:0040A320                                         ; DATA XREF: sub_40A3B0:loc_40A545↓o
.text:0040A320                 db '%s, %s, %s, %s,',0Ah
.text:0040A320                 db '%s, and %s.',0Ah,0
.text:0040A354                 align 10h
.text:0040A360 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:0040A360                                         ; DATA XREF: sub_40A3B0:def_40A41D↓o
.text:0040A360                 db '%s, %s, %s, %s,',0Ah
.text:0040A360                 db '%s, %s, and others.',0Ah,0
.text:0040A39C ; const char aSS_2[]
.text:0040A39C aSS_2           db '%s %s',0Ah,0        ; DATA XREF: sub_40A3B0+1B5↓o
.text:0040A3A3                 align 10h
.text:0040A3B0
.text:0040A3B0 ; =============== S U B R O U T I N E =======================================
.text:0040A3B0
.text:0040A3B0
.text:0040A3B0 ; int __cdecl sub_40A3B0(FILE *, FILE *, int, int, va_list)
.text:0040A3B0 sub_40A3B0      proc near               ; CODE XREF: sub_40A580+2A↓p
.text:0040A3B0
.text:0040A3B0 Stream          = dword ptr -2Ch
.text:0040A3B0 Format          = dword ptr -28h
.text:0040A3B0 ArgList         = dword ptr -24h
.text:0040A3B0 var_20          = dword ptr -20h
.text:0040A3B0 var_1C          = dword ptr -1Ch
.text:0040A3B0 var_14          = dword ptr -14h
.text:0040A3B0 arg_0           = dword ptr  4
.text:0040A3B0 arg_4           = dword ptr  8
.text:0040A3B0 arg_8           = dword ptr  0Ch
.text:0040A3B0 arg_C           = dword ptr  10h
.text:0040A3B0 arg_10          = dword ptr  14h
.text:0040A3B0
.text:0040A3B0                 push    ebp
.text:0040A3B1                 push    edi
.text:0040A3B2                 push    esi
.text:0040A3B3                 push    ebx
.text:0040A3B4                 sub     esp, 1Ch
.text:0040A3B7                 xor     ebx, ebx
.text:0040A3B9                 mov     edi, [esp+2Ch+arg_10]
.text:0040A3BD                 mov     edx, [esp+2Ch+arg_8]
.text:0040A3C1                 mov     esi, [esp+2Ch+arg_0]
.text:0040A3C5                 mov     eax, [edi]
.text:0040A3C7                 mov     ecx, [esp+2Ch+arg_4]
.text:0040A3CB                 mov     [esp+2Ch+var_14], edx
.text:0040A3CF                 mov     ebp, [esp+2Ch+arg_C]
.text:0040A3D3                 lea     edx, [edi+4]
.text:0040A3D6                 test    eax, eax
.text:0040A3D8                 jz      short loc_40A3EC
.text:0040A3DA                 lea     esi, [esi+0]
.text:0040A3E0
.text:0040A3E0 loc_40A3E0:                             ; CODE XREF: sub_40A3B0+3A↓j
.text:0040A3E0                 mov     eax, edx
.text:0040A3E2                 inc     ebx
.text:0040A3E3                 mov     eax, [eax]
.text:0040A3E5                 add     edx, 4
.text:0040A3E8                 test    eax, eax
.text:0040A3EA                 jnz     short loc_40A3E0
.text:0040A3EC
.text:0040A3EC loc_40A3EC:                             ; CODE XREF: sub_40A3B0+28↑j
.text:0040A3EC                 test    ecx, ecx
.text:0040A3EE                 jz      loc_40A55D
.text:0040A3F4                 mov     [esp+2Ch+var_1C], ebp
.text:0040A3F8                 mov     edx, [esp+2Ch+var_14]
.text:0040A3FC                 mov     [esp+2Ch+ArgList], ecx
.text:0040A400                 mov     [esp+2Ch+Format], offset aSSS ; "%s (%s) %s\n"
.text:0040A408                 mov     [esp+2Ch+var_20], edx
.text:0040A40C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A40F                 call    fprintf
.text:0040A414
.text:0040A414 loc_40A414:                             ; CODE XREF: sub_40A3B0+1C9↓j
.text:0040A414                 cmp     ebx, 9          ; switch 10 cases
.text:0040A417                 ja      def_40A41D      ; jumptable 0040A41D default case
.text:0040A41D                 jmp     ds:jpt_40A41D[ebx*4] ; switch jump
.text:0040A41D ; ---------------------------------------------------------------------------
.text:0040A424 jpt_40A41D      dd offset loc_40A44C    ; DATA XREF: sub_40A3B0+6D↑r
.text:0040A424                 dd offset loc_40A451    ; jump table for switch statement
.text:0040A424                 dd offset loc_40A4F1
.text:0040A424                 dd offset loc_40A4FD
.text:0040A424                 dd offset loc_40A509
.text:0040A424                 dd offset loc_40A515
.text:0040A424                 dd offset loc_40A521
.text:0040A424                 dd offset loc_40A52D
.text:0040A424                 dd offset loc_40A539
.text:0040A424                 dd offset loc_40A545
.text:0040A44C ; ---------------------------------------------------------------------------
.text:0040A44C
.text:0040A44C loc_40A44C:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A44C                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A44C                 call    abort           ; jumptable 0040A41D case 0
.text:0040A451 ; ---------------------------------------------------------------------------
.text:0040A451
.text:0040A451 loc_40A451:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A451                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A451                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 0040A41D case 1
.text:0040A458                 nop
.text:0040A459                 lea     esi, [esi+0]
.text:0040A460
.text:0040A460 loc_40A460:                             ; CODE XREF: sub_40A3B0+148↓j
.text:0040A460                                         ; sub_40A3B0+154↓j ...
.text:0040A460                 call    ds:libintl_gettext
.text:0040A466                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:0040A46A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A46D                 mov     [esp+2Ch+Format], eax ; Format
.text:0040A471                 call    vfprintf
.text:0040A476                 mov     ebx, [esi+4]
.text:0040A479                 dec     ebx
.text:0040A47A                 test    ebx, ebx
.text:0040A47C                 mov     [esi+4], ebx
.text:0040A47F                 js      short loc_40A4DF
.text:0040A481                 mov     edi, [esi]
.text:0040A483                 mov     byte ptr [edi], 0Ah
.text:0040A486                 inc     dword ptr [esi]
.text:0040A488
.text:0040A488 loc_40A488:                             ; CODE XREF: sub_40A3B0+13F↓j
.text:0040A488                 mov     [esp+2Ch+Format], esi ; Stream
.text:0040A48C                 mov     edx, Buffer
.text:0040A492                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:0040A495                 call    fputs
.text:0040A49A                 mov     ebp, [esi+4]
.text:0040A49D                 dec     ebp
.text:0040A49E                 test    ebp, ebp
.text:0040A4A0                 mov     [esi+4], ebp
.text:0040A4A3                 js      short loc_40A4CD
.text:0040A4A5                 mov     ecx, [esi]
.text:0040A4A7                 mov     byte ptr [ecx], 0Ah
.text:0040A4AA                 inc     dword ptr [esi]
.text:0040A4AC
.text:0040A4AC loc_40A4AC:                             ; CODE XREF: sub_40A3B0+12D↓j
.text:0040A4AC                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:0040A4B0                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:0040A4B7                 call    ds:libintl_gettext
.text:0040A4BD                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:0040A4C1                 add     esp, 1Ch
.text:0040A4C4                 pop     ebx
.text:0040A4C5                 pop     esi
.text:0040A4C6                 pop     edi
.text:0040A4C7                 pop     ebp
.text:0040A4C8                 jmp     fputs
.text:0040A4CD ; ---------------------------------------------------------------------------
.text:0040A4CD
.text:0040A4CD loc_40A4CD:                             ; CODE XREF: sub_40A3B0+F3↑j
.text:0040A4CD                 mov     [esp+2Ch+Format], esi ; File
.text:0040A4D1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040A4D8                 call    _flsbuf
.text:0040A4DD                 jmp     short loc_40A4AC
.text:0040A4DF ; ---------------------------------------------------------------------------
.text:0040A4DF
.text:0040A4DF loc_40A4DF:                             ; CODE XREF: sub_40A3B0+CF↑j
.text:0040A4DF                 mov     [esp+2Ch+Format], esi ; File
.text:0040A4E3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:0040A4EA                 call    _flsbuf
.text:0040A4EF                 jmp     short loc_40A488
.text:0040A4F1 ; ---------------------------------------------------------------------------
.text:0040A4F1
.text:0040A4F1 loc_40A4F1:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A4F1                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A4F1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 0040A41D case 2
.text:0040A4F8                 jmp     loc_40A460
.text:0040A4FD ; ---------------------------------------------------------------------------
.text:0040A4FD
.text:0040A4FD loc_40A4FD:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A4FD                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A4FD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 0040A41D case 3
.text:0040A504                 jmp     loc_40A460
.text:0040A509 ; ---------------------------------------------------------------------------
.text:0040A509
.text:0040A509 loc_40A509:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A509                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A509                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 0040A41D case 4
.text:0040A510                 jmp     loc_40A460
.text:0040A515 ; ---------------------------------------------------------------------------
.text:0040A515
.text:0040A515 loc_40A515:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A515                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A515                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 0040A41D case 5
.text:0040A51C                 jmp     loc_40A460
.text:0040A521 ; ---------------------------------------------------------------------------
.text:0040A521
.text:0040A521 loc_40A521:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A521                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A521                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 0040A41D case 6
.text:0040A528                 jmp     loc_40A460
.text:0040A52D ; ---------------------------------------------------------------------------
.text:0040A52D
.text:0040A52D loc_40A52D:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A52D                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A52D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 0040A41D case 7
.text:0040A534                 jmp     loc_40A460
.text:0040A539 ; ---------------------------------------------------------------------------
.text:0040A539
.text:0040A539 loc_40A539:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A539                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A539                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 0040A41D case 8
.text:0040A540                 jmp     loc_40A460
.text:0040A545 ; ---------------------------------------------------------------------------
.text:0040A545
.text:0040A545 loc_40A545:                             ; CODE XREF: sub_40A3B0+6D↑j
.text:0040A545                                         ; DATA XREF: sub_40A3B0:jpt_40A41D↑o
.text:0040A545                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 0040A41D case 9
.text:0040A54C                 jmp     loc_40A460
.text:0040A551 ; ---------------------------------------------------------------------------
.text:0040A551
.text:0040A551 def_40A41D:                             ; CODE XREF: sub_40A3B0+67↑j
.text:0040A551                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 0040A41D default case
.text:0040A558                 jmp     loc_40A460
.text:0040A55D ; ---------------------------------------------------------------------------
.text:0040A55D
.text:0040A55D loc_40A55D:                             ; CODE XREF: sub_40A3B0+3E↑j
.text:0040A55D                 mov     [esp+2Ch+var_20], ebp
.text:0040A561                 mov     ecx, [esp+2Ch+var_14]
.text:0040A565                 mov     [esp+2Ch+Format], offset aSS_2 ; "%s %s\n"
.text:0040A56D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A570                 mov     [esp+2Ch+ArgList], ecx
.text:0040A574                 call    fprintf
.text:0040A579                 jmp     loc_40A414
.text:0040A579 sub_40A3B0      endp
.text:0040A579
.text:0040A579 ; ---------------------------------------------------------------------------
.text:0040A57E                 align 10h
.text:0040A580
.text:0040A580 ; =============== S U B R O U T I N E =======================================
.text:0040A580
.text:0040A580
.text:0040A580 ; int __cdecl sub_40A580(FILE *, FILE *, int, int, char)
.text:0040A580 sub_40A580      proc near               ; CODE XREF: sub_4027B0+62B↑p
.text:0040A580
.text:0040A580 var_1C          = dword ptr -1Ch
.text:0040A580 var_18          = dword ptr -18h
.text:0040A580 var_14          = dword ptr -14h
.text:0040A580 var_10          = dword ptr -10h
.text:0040A580 var_C           = dword ptr -0Ch
.text:0040A580 arg_0           = dword ptr  4
.text:0040A580 arg_4           = dword ptr  8
.text:0040A580 arg_8           = dword ptr  0Ch
.text:0040A580 arg_C           = dword ptr  10h
.text:0040A580 arg_10          = byte ptr  14h
.text:0040A580
.text:0040A580                 sub     esp, 1Ch
.text:0040A583                 mov     edx, [esp+1Ch+arg_C]
.text:0040A587                 lea     ecx, [esp+1Ch+arg_10]
.text:0040A58B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040A58F                 mov     ecx, [esp+1Ch+arg_8]
.text:0040A593                 mov     [esp+1Ch+var_10], edx ; int
.text:0040A597                 mov     edx, [esp+1Ch+arg_4]
.text:0040A59B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040A59F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:0040A5A3                 mov     edx, [esp+1Ch+arg_0]
.text:0040A5A7                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040A5AA                 call    sub_40A3B0
.text:0040A5AF                 add     esp, 1Ch
.text:0040A5B2                 retn
.text:0040A5B2 sub_40A580      endp
.text:0040A5B2
.text:0040A5B2 ; ---------------------------------------------------------------------------
.text:0040A5B3                 align 10h
.text:0040A5C0
.text:0040A5C0 ; =============== S U B R O U T I N E =======================================
.text:0040A5C0
.text:0040A5C0
.text:0040A5C0 ; int __cdecl sub_40A5C0(int, int, char *, int, int)
.text:0040A5C0 sub_40A5C0      proc near               ; CODE XREF: sub_4027B0+14F↑p
.text:0040A5C0
.text:0040A5C0 var_1C          = dword ptr -1Ch
.text:0040A5C0 var_18          = dword ptr -18h
.text:0040A5C0 var_14          = dword ptr -14h
.text:0040A5C0 var_10          = dword ptr -10h
.text:0040A5C0 var_C           = dword ptr -0Ch
.text:0040A5C0 var_8           = dword ptr -8
.text:0040A5C0 var_4           = dword ptr -4
.text:0040A5C0 arg_0           = dword ptr  4
.text:0040A5C0 arg_4           = dword ptr  8
.text:0040A5C0 arg_8           = dword ptr  0Ch
.text:0040A5C0 arg_C           = dword ptr  10h
.text:0040A5C0 arg_10          = dword ptr  14h
.text:0040A5C0
.text:0040A5C0                 sub     esp, 1Ch
.text:0040A5C3                 mov     edx, [esp+1Ch+arg_C]
.text:0040A5C7                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040A5CF                 mov     ecx, [esp+1Ch+arg_10]
.text:0040A5D3                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040A5DB                 mov     [esp+1Ch+var_10], edx ; int
.text:0040A5DF                 mov     edx, [esp+1Ch+arg_4]
.text:0040A5E3                 mov     [esp+1Ch+var_C], ecx ; int
.text:0040A5E7                 mov     ecx, [esp+1Ch+arg_8]
.text:0040A5EB                 mov     [esp+1Ch+var_18], edx ; int
.text:0040A5EF                 mov     edx, [esp+1Ch+arg_0]
.text:0040A5F3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:0040A5F7                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040A5FA                 call    sub_409880
.text:0040A5FF                 add     esp, 1Ch
.text:0040A602                 retn
.text:0040A602 sub_40A5C0      endp
.text:0040A602
.text:0040A602 ; ---------------------------------------------------------------------------
.text:0040A603                 align 10h
.text:0040A610                 sub     esp, 2Ch
.text:0040A613                 mov     edx, [esp+44h]
.text:0040A617                 mov     dword ptr [esp+18h], 0
.text:0040A61F                 mov     ecx, [esp+40h]
.text:0040A623                 mov     dword ptr [esp+14h], 0
.text:0040A62B                 mov     [esp+1Ch], edx
.text:0040A62F                 mov     edx, [esp+3Ch]
.text:0040A633                 mov     [esp+10h], ecx
.text:0040A637                 mov     ecx, [esp+38h]
.text:0040A63B                 mov     [esp+0Ch], edx
.text:0040A63F                 mov     edx, [esp+34h]
.text:0040A643                 mov     [esp+8], ecx
.text:0040A647                 mov     [esp+4], edx
.text:0040A64B                 mov     edx, [esp+30h]
.text:0040A64F                 mov     [esp], edx
.text:0040A652                 call    sub_408CF0
.text:0040A657                 add     esp, 2Ch
.text:0040A65A                 retn
.text:0040A65A ; ---------------------------------------------------------------------------
.text:0040A65B                 align 10h
.text:0040A660                 sub     esp, 1Ch
.text:0040A663                 mov     edx, [esp+2Ch]
.text:0040A667                 mov     dword ptr [esp+18h], 0
.text:0040A66F                 mov     ecx, [esp+30h]
.text:0040A673                 mov     dword ptr [esp+14h], 1
.text:0040A67B                 mov     [esp+0Ch], edx
.text:0040A67F                 mov     edx, [esp+24h]
.text:0040A683                 mov     [esp+10h], ecx
.text:0040A687                 mov     ecx, [esp+28h]
.text:0040A68B                 mov     [esp+4], edx
.text:0040A68F                 mov     edx, [esp+20h]
.text:0040A693                 mov     [esp+8], ecx
.text:0040A697                 mov     [esp], edx
.text:0040A69A                 call    sub_409880
.text:0040A69F                 add     esp, 1Ch
.text:0040A6A2                 retn
.text:0040A6A2 ; ---------------------------------------------------------------------------
.text:0040A6A3                 align 10h
.text:0040A6B0                 sub     esp, 2Ch
.text:0040A6B3                 mov     edx, [esp+44h]
.text:0040A6B7                 mov     dword ptr [esp+18h], 0
.text:0040A6BF                 mov     ecx, [esp+40h]
.text:0040A6C3                 mov     dword ptr [esp+14h], 1
.text:0040A6CB                 mov     [esp+1Ch], edx
.text:0040A6CF                 mov     edx, [esp+3Ch]
.text:0040A6D3                 mov     [esp+10h], ecx
.text:0040A6D7                 mov     ecx, [esp+38h]
.text:0040A6DB                 mov     [esp+0Ch], edx
.text:0040A6DF                 mov     edx, [esp+34h]
.text:0040A6E3                 mov     [esp+8], ecx
.text:0040A6E7                 mov     [esp+4], edx
.text:0040A6EB                 mov     edx, [esp+30h]
.text:0040A6EF                 mov     [esp], edx
.text:0040A6F2                 call    sub_408CF0
.text:0040A6F7                 add     esp, 2Ch
.text:0040A6FA                 retn
.text:0040A6FA ; ---------------------------------------------------------------------------
.text:0040A6FB                 align 10h
.text:0040A700                 mov     edx, [esp+4]
.text:0040A704                 mov     ds:dword_4200E0, edx
.text:0040A70A                 retn
.text:0040A70A ; ---------------------------------------------------------------------------
.text:0040A70B aWriteError     db 'write error',0      ; DATA XREF: sub_40A730:loc_40A779↓o
.text:0040A717 ; const char aSS_3[]
.text:0040A717 aSS_3           db '%s: %s',0           ; DATA XREF: sub_40A730+77↓o
.text:0040A71E ; const char aS_4[]
.text:0040A71E aS_4            db '%s',0               ; DATA XREF: sub_40A730+A0↓o
.text:0040A721 ; ---------------------------------------------------------------------------
.text:0040A721                 jmp     short sub_40A730
.text:0040A721 ; ---------------------------------------------------------------------------
.text:0040A723                 align 10h
.text:0040A730
.text:0040A730 ; =============== S U B R O U T I N E =======================================
.text:0040A730
.text:0040A730
.text:0040A730 ; void __cdecl sub_40A730()
.text:0040A730 sub_40A730      proc near               ; CODE XREF: .text:0040A721↑j
.text:0040A730                                         ; DATA XREF: sub_4027B0+7E↑o
.text:0040A730
.text:0040A730 Stream          = dword ptr -2Ch
.text:0040A730 ErrorMessage    = dword ptr -28h
.text:0040A730 var_24          = dword ptr -24h
.text:0040A730 var_20          = byte ptr -20h
.text:0040A730 var_1C          = dword ptr -1Ch
.text:0040A730 var_9           = byte ptr -9
.text:0040A730
.text:0040A730                 push    esi
.text:0040A731                 push    ebx
.text:0040A732                 sub     esp, 24h
.text:0040A735                 mov     edx, ds:_iob
.text:0040A73B                 mov     ecx, [edx+2Ch]
.text:0040A73E                 lea     esi, [edx+20h]
.text:0040A741                 shr     ecx, 5
.text:0040A744                 mov     bl, cl
.text:0040A746                 mov     ecx, [edx+20h]
.text:0040A749                 and     bl, 1
.text:0040A74C                 cmp     ecx, [esi+8]
.text:0040A74F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:0040A752                 setz    [esp+2Ch+var_9]
.text:0040A757                 call    fclose
.text:0040A75C                 test    eax, eax
.text:0040A75E                 setnz   al
.text:0040A761                 test    bl, bl
.text:0040A763                 jnz     loc_40A7F3
.text:0040A769                 test    al, al
.text:0040A76B                 jz      short loc_40A7C0
.text:0040A76D
.text:0040A76D loc_40A76D:                             ; CODE XREF: sub_40A730+CD↓j
.text:0040A76D                 call    _errno
.text:0040A772                 mov     esi, [eax]
.text:0040A774
.text:0040A774 loc_40A774:                             ; CODE XREF: sub_40A730+C7↓j
.text:0040A774                 cmp     esi, 9
.text:0040A777                 jz      short loc_40A7E6
.text:0040A779
.text:0040A779 loc_40A779:                             ; CODE XREF: sub_40A730+B8↓j
.text:0040A779                                         ; sub_40A730+C1↓j
.text:0040A779                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:0040A780                 call    ds:libintl_gettext
.text:0040A786                 mov     ebx, eax
.text:0040A788                 mov     eax, ds:dword_4200E0
.text:0040A78D                 test    eax, eax
.text:0040A78F                 jz      short loc_40A7C6
.text:0040A791                 mov     [esp+2Ch+Stream], eax ; char *
.text:0040A794                 call    sub_40D310
.text:0040A799                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040A79D                 mov     edx, Code
.text:0040A7A3                 mov     [esp+2Ch+var_1C], ebx
.text:0040A7A7                 mov     [esp+2Ch+var_24], offset aSS_3 ; "%s: %s"
.text:0040A7AF                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A7B3                 mov     [esp+2Ch+Stream], edx ; Code
.text:0040A7B6                 call    sub_4143B0
.text:0040A7BB                 nop
.text:0040A7BC                 lea     esi, [esi+0]
.text:0040A7C0
.text:0040A7C0 loc_40A7C0:                             ; CODE XREF: sub_40A730+3B↑j
.text:0040A7C0                                         ; sub_40A730+B4↓j ...
.text:0040A7C0                 add     esp, 24h
.text:0040A7C3                 pop     ebx
.text:0040A7C4                 pop     esi
.text:0040A7C5                 retn
.text:0040A7C6 ; ---------------------------------------------------------------------------
.text:0040A7C6
.text:0040A7C6 loc_40A7C6:                             ; CODE XREF: sub_40A730+5F↑j
.text:0040A7C6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040A7CA                 mov     ebx, Code
.text:0040A7D0                 mov     [esp+2Ch+var_24], offset aS_4 ; "%s"
.text:0040A7D8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040A7DC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040A7DF                 call    sub_4143B0
.text:0040A7E4                 jmp     short loc_40A7C0
.text:0040A7E6 ; ---------------------------------------------------------------------------
.text:0040A7E6
.text:0040A7E6 loc_40A7E6:                             ; CODE XREF: sub_40A730+47↑j
.text:0040A7E6                 test    bl, bl
.text:0040A7E8                 jnz     short loc_40A779
.text:0040A7EA                 cmp     [esp+2Ch+var_9], 0
.text:0040A7EF                 jnz     short loc_40A7C0
.text:0040A7F1                 jmp     short loc_40A779
.text:0040A7F3 ; ---------------------------------------------------------------------------
.text:0040A7F3
.text:0040A7F3 loc_40A7F3:                             ; CODE XREF: sub_40A730+33↑j
.text:0040A7F3                 xor     esi, esi
.text:0040A7F5                 test    al, al
.text:0040A7F7                 jz      loc_40A774
.text:0040A7FD                 jmp     loc_40A76D
.text:0040A7FD sub_40A730      endp
.text:0040A7FD
.text:0040A7FD ; ---------------------------------------------------------------------------
.text:0040A802                 align 10h
.text:0040A810                 sub     esp, 0Ch
.text:0040A813                 xor     edx, edx
.text:0040A815                 mov     ecx, [esp+14h]
.text:0040A819                 mov     [esp+8], ebx
.text:0040A81D                 mov     eax, 0FFFFFFFFh
.text:0040A822                 mov     ebx, [esp+10h]
.text:0040A826                 div     ecx
.text:0040A828                 cmp     eax, ebx
.text:0040A82A                 jb      short loc_40A849
.text:0040A82C                 mov     edx, ebx
.text:0040A82E                 imul    edx, ecx
.text:0040A831                 mov     [esp], edx
.text:0040A834                 call    malloc
.text:0040A839                 test    eax, eax
.text:0040A83B                 jz      short loc_40A845
.text:0040A83D
.text:0040A83D loc_40A83D:                             ; CODE XREF: .text:0040A847↓j
.text:0040A83D                 mov     ebx, [esp+8]
.text:0040A841                 add     esp, 0Ch
.text:0040A844                 retn
.text:0040A845 ; ---------------------------------------------------------------------------
.text:0040A845
.text:0040A845 loc_40A845:                             ; CODE XREF: .text:0040A83B↑j
.text:0040A845                 test    ebx, ebx
.text:0040A847                 jz      short loc_40A83D
.text:0040A849
.text:0040A849 loc_40A849:                             ; CODE XREF: .text:0040A82A↑j
.text:0040A849                 call    sub_40B0D0
.text:0040A849 ; ---------------------------------------------------------------------------
.text:0040A84E                 align 10h
.text:0040A850
.text:0040A850 ; =============== S U B R O U T I N E =======================================
.text:0040A850
.text:0040A850
.text:0040A850 ; int __cdecl sub_40A850(size_t)
.text:0040A850 sub_40A850      proc near               ; CODE XREF: sub_404320+D1↑p
.text:0040A850                                         ; sub_407710+42↑p ...
.text:0040A850
.text:0040A850 Size            = dword ptr -0Ch
.text:0040A850 var_4           = dword ptr -4
.text:0040A850 arg_0           = dword ptr  4
.text:0040A850
.text:0040A850                 sub     esp, 0Ch
.text:0040A853                 mov     [esp+0Ch+var_4], ebx
.text:0040A857                 mov     ebx, [esp+0Ch+arg_0]
.text:0040A85B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A85E                 call    malloc
.text:0040A863                 test    eax, eax
.text:0040A865                 jz      short loc_40A870
.text:0040A867
.text:0040A867 loc_40A867:                             ; CODE XREF: sub_40A850+22↓j
.text:0040A867                 mov     ebx, [esp+0Ch+var_4]
.text:0040A86B                 add     esp, 0Ch
.text:0040A86E                 retn
.text:0040A86E ; ---------------------------------------------------------------------------
.text:0040A86F                 align 10h
.text:0040A870
.text:0040A870 loc_40A870:                             ; CODE XREF: sub_40A850+15↑j
.text:0040A870                 test    ebx, ebx
.text:0040A872                 jz      short loc_40A867
.text:0040A874                 call    sub_40B0D0
.text:0040A874 sub_40A850      endp
.text:0040A874
.text:0040A874 ; ---------------------------------------------------------------------------
.text:0040A879                 align 10h
.text:0040A880
.text:0040A880 ; =============== S U B R O U T I N E =======================================
.text:0040A880
.text:0040A880
.text:0040A880 ; int __cdecl sub_40A880(void *, int, int)
.text:0040A880 sub_40A880      proc near               ; CODE XREF: sub_409E20+237↑p
.text:0040A880
.text:0040A880 Block           = dword ptr -1Ch
.text:0040A880 Size            = dword ptr -18h
.text:0040A880 var_8           = dword ptr -8
.text:0040A880 var_4           = dword ptr -4
.text:0040A880 arg_0           = dword ptr  4
.text:0040A880 arg_4           = dword ptr  8
.text:0040A880 arg_8           = dword ptr  0Ch
.text:0040A880
.text:0040A880                 sub     esp, 1Ch
.text:0040A883                 xor     edx, edx
.text:0040A885                 mov     eax, 0FFFFFFFFh
.text:0040A88A                 mov     [esp+1Ch+var_8], ebx
.text:0040A88E                 mov     ecx, [esp+1Ch+arg_0]
.text:0040A892                 mov     ebx, [esp+1Ch+arg_8]
.text:0040A896                 mov     [esp+1Ch+var_4], esi
.text:0040A89A                 mov     esi, [esp+1Ch+arg_4]
.text:0040A89E                 div     ebx
.text:0040A8A0                 cmp     eax, esi
.text:0040A8A2                 jb      short loc_40A8D4
.text:0040A8A4                 mov     [esp+1Ch+Block], ecx ; Block
.text:0040A8A7                 mov     edx, esi
.text:0040A8A9                 imul    edx, ebx
.text:0040A8AC                 mov     [esp+1Ch+Size], edx ; Size
.text:0040A8B0                 call    realloc
.text:0040A8B5                 test    eax, eax
.text:0040A8B7                 mov     ecx, eax
.text:0040A8B9                 jz      short loc_40A8D0
.text:0040A8BB
.text:0040A8BB loc_40A8BB:                             ; CODE XREF: sub_40A880+52↓j
.text:0040A8BB                 mov     ebx, [esp+1Ch+var_8]
.text:0040A8BF                 mov     eax, ecx
.text:0040A8C1                 mov     esi, [esp+1Ch+var_4]
.text:0040A8C5                 add     esp, 1Ch
.text:0040A8C8                 retn
.text:0040A8C8 ; ---------------------------------------------------------------------------
.text:0040A8C9                 align 10h
.text:0040A8D0
.text:0040A8D0 loc_40A8D0:                             ; CODE XREF: sub_40A880+39↑j
.text:0040A8D0                 test    esi, esi
.text:0040A8D2                 jz      short loc_40A8BB
.text:0040A8D4
.text:0040A8D4 loc_40A8D4:                             ; CODE XREF: sub_40A880+22↑j
.text:0040A8D4                 call    sub_40B0D0
.text:0040A8D4 sub_40A880      endp
.text:0040A8D4
.text:0040A8D4 ; ---------------------------------------------------------------------------
.text:0040A8D9                 align 10h
.text:0040A8E0
.text:0040A8E0 ; =============== S U B R O U T I N E =======================================
.text:0040A8E0
.text:0040A8E0
.text:0040A8E0 ; int __cdecl sub_40A8E0(void *, size_t)
.text:0040A8E0 sub_40A8E0      proc near               ; CODE XREF: .text:0040C14C↓p
.text:0040A8E0                                         ; sub_40D3B0+5B↓p
.text:0040A8E0
.text:0040A8E0 Block           = dword ptr -0Ch
.text:0040A8E0 Size            = dword ptr -8
.text:0040A8E0 var_4           = dword ptr -4
.text:0040A8E0 arg_0           = dword ptr  4
.text:0040A8E0 arg_4           = dword ptr  8
.text:0040A8E0
.text:0040A8E0                 sub     esp, 0Ch
.text:0040A8E3                 mov     edx, [esp+0Ch+arg_0]
.text:0040A8E7                 mov     [esp+0Ch+var_4], ebx
.text:0040A8EB                 mov     ebx, [esp+0Ch+arg_4]
.text:0040A8EF                 mov     [esp+0Ch+Block], edx ; Block
.text:0040A8F2                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040A8F6                 call    realloc
.text:0040A8FB                 test    eax, eax
.text:0040A8FD                 jz      short loc_40A907
.text:0040A8FF
.text:0040A8FF loc_40A8FF:                             ; CODE XREF: sub_40A8E0+29↓j
.text:0040A8FF                 mov     ebx, [esp+0Ch+var_4]
.text:0040A903                 add     esp, 0Ch
.text:0040A906                 retn
.text:0040A907 ; ---------------------------------------------------------------------------
.text:0040A907
.text:0040A907 loc_40A907:                             ; CODE XREF: sub_40A8E0+1D↑j
.text:0040A907                 test    ebx, ebx
.text:0040A909                 jz      short loc_40A8FF
.text:0040A90B                 call    sub_40B0D0
.text:0040A90B sub_40A8E0      endp
.text:0040A90B
.text:0040A910 ; ---------------------------------------------------------------------------
.text:0040A910                 jmp     sub_40AA60
.text:0040A910 ; ---------------------------------------------------------------------------
.text:0040A915                 align 10h
.text:0040A920                 sub     esp, 0Ch
.text:0040A923                 mov     edx, [esp+14h]
.text:0040A927                 mov     dword ptr [esp+8], 1
.text:0040A92F                 mov     [esp+4], edx
.text:0040A933                 mov     edx, [esp+10h]
.text:0040A937                 mov     [esp], edx
.text:0040A93A                 call    sub_40AA60
.text:0040A93F                 add     esp, 0Ch
.text:0040A942                 retn
.text:0040A942 ; ---------------------------------------------------------------------------
.text:0040A943                 align 10h
.text:0040A950                 sub     esp, 1Ch
.text:0040A953                 mov     [esp+18h], ebx
.text:0040A957                 mov     ebx, [esp+20h]
.text:0040A95B                 mov     [esp], ebx
.text:0040A95E                 call    malloc
.text:0040A963                 test    eax, eax
.text:0040A965                 jz      short loc_40A983
.text:0040A967
.text:0040A967 loc_40A967:                             ; CODE XREF: .text:0040A985↓j
.text:0040A967                 mov     [esp+8], ebx
.text:0040A96B                 mov     dword ptr [esp+4], 0
.text:0040A973                 mov     [esp], eax
.text:0040A976                 call    memset
.text:0040A97B                 mov     ebx, [esp+18h]
.text:0040A97F                 add     esp, 1Ch
.text:0040A982                 retn
.text:0040A983 ; ---------------------------------------------------------------------------
.text:0040A983
.text:0040A983 loc_40A983:                             ; CODE XREF: .text:0040A965↑j
.text:0040A983                 test    ebx, ebx
.text:0040A985                 jz      short loc_40A967
.text:0040A987                 call    sub_40B0D0
.text:0040A987 ; ---------------------------------------------------------------------------
.text:0040A98C                 align 10h
.text:0040A990                 sub     esp, 0Ch
.text:0040A993                 xor     edx, edx
.text:0040A995                 mov     ecx, [esp+14h]
.text:0040A999                 mov     [esp+8], ebx
.text:0040A99D                 mov     eax, 0FFFFFFFFh
.text:0040A9A2                 mov     ebx, [esp+10h]
.text:0040A9A6                 div     ecx
.text:0040A9A8                 cmp     eax, ebx
.text:0040A9AA                 jb      short loc_40A9C8
.text:0040A9AC                 mov     [esp+4], ecx
.text:0040A9B0                 mov     [esp], ebx
.text:0040A9B3                 call    calloc
.text:0040A9B8                 test    eax, eax
.text:0040A9BA                 jz      short loc_40A9C4
.text:0040A9BC
.text:0040A9BC loc_40A9BC:                             ; CODE XREF: .text:0040A9C6↓j
.text:0040A9BC                 mov     ebx, [esp+8]
.text:0040A9C0                 add     esp, 0Ch
.text:0040A9C3                 retn
.text:0040A9C4 ; ---------------------------------------------------------------------------
.text:0040A9C4
.text:0040A9C4 loc_40A9C4:                             ; CODE XREF: .text:0040A9BA↑j
.text:0040A9C4                 test    ebx, ebx
.text:0040A9C6                 jz      short loc_40A9BC
.text:0040A9C8
.text:0040A9C8 loc_40A9C8:                             ; CODE XREF: .text:0040A9AA↑j
.text:0040A9C8                 call    sub_40B0D0
.text:0040A9C8 ; ---------------------------------------------------------------------------
.text:0040A9CD                 align 10h
.text:0040A9D0                 sub     esp, 1Ch
.text:0040A9D3                 mov     [esp+18h], ebx
.text:0040A9D7                 mov     ebx, [esp+24h]
.text:0040A9DB                 mov     [esp], ebx
.text:0040A9DE                 call    malloc
.text:0040A9E3                 test    eax, eax
.text:0040A9E5                 mov     edx, eax
.text:0040A9E7                 jz      short loc_40AA05
.text:0040A9E9
.text:0040A9E9 loc_40A9E9:                             ; CODE XREF: .text:0040AA07↓j
.text:0040A9E9                 mov     [esp+8], ebx
.text:0040A9ED                 mov     ecx, [esp+20h]
.text:0040A9F1                 mov     [esp], edx
.text:0040A9F4                 mov     [esp+4], ecx
.text:0040A9F8                 call    memcpy
.text:0040A9FD                 mov     ebx, [esp+18h]
.text:0040AA01                 add     esp, 1Ch
.text:0040AA04                 retn
.text:0040AA05 ; ---------------------------------------------------------------------------
.text:0040AA05
.text:0040AA05 loc_40AA05:                             ; CODE XREF: .text:0040A9E7↑j
.text:0040AA05                 test    ebx, ebx
.text:0040AA07                 jz      short loc_40A9E9
.text:0040AA09                 call    sub_40B0D0
.text:0040AA09 ; ---------------------------------------------------------------------------
.text:0040AA0E                 align 10h
.text:0040AA10
.text:0040AA10 ; =============== S U B R O U T I N E =======================================
.text:0040AA10
.text:0040AA10
.text:0040AA10 ; int __cdecl sub_40AA10(char *)
.text:0040AA10 sub_40AA10      proc near               ; CODE XREF: sub_4027B0+BC6↑p
.text:0040AA10                                         ; sub_403840+321↑p ...
.text:0040AA10
.text:0040AA10 Str             = dword ptr -1Ch
.text:0040AA10 Src             = dword ptr -18h
.text:0040AA10 Size            = dword ptr -14h
.text:0040AA10 var_8           = dword ptr -8
.text:0040AA10 var_4           = dword ptr -4
.text:0040AA10 arg_0           = dword ptr  4
.text:0040AA10
.text:0040AA10                 sub     esp, 1Ch
.text:0040AA13                 mov     [esp+1Ch+var_4], esi
.text:0040AA17                 mov     esi, [esp+1Ch+arg_0]
.text:0040AA1B                 mov     [esp+1Ch+var_8], ebx
.text:0040AA1F                 mov     [esp+1Ch+Str], esi ; Str
.text:0040AA22                 call    strlen
.text:0040AA27                 lea     ebx, [eax+1]
.text:0040AA2A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040AA2D                 call    malloc
.text:0040AA32                 test    eax, eax
.text:0040AA34                 jz      short loc_40AA52
.text:0040AA36
.text:0040AA36 loc_40AA36:                             ; CODE XREF: sub_40AA10+44↓j
.text:0040AA36                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040AA3A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040AA3E                 mov     [esp+1Ch+Str], eax ; void *
.text:0040AA41                 call    memcpy
.text:0040AA46                 mov     ebx, [esp+1Ch+var_8]
.text:0040AA4A                 mov     esi, [esp+1Ch+var_4]
.text:0040AA4E                 add     esp, 1Ch
.text:0040AA51                 retn
.text:0040AA52 ; ---------------------------------------------------------------------------
.text:0040AA52
.text:0040AA52 loc_40AA52:                             ; CODE XREF: sub_40AA10+24↑j
.text:0040AA52                 test    ebx, ebx
.text:0040AA54                 jz      short loc_40AA36
.text:0040AA56                 call    sub_40B0D0
.text:0040AA56 sub_40AA10      endp
.text:0040AA56
.text:0040AA56 ; ---------------------------------------------------------------------------
.text:0040AA5B                 align 10h
.text:0040AA60
.text:0040AA60 ; =============== S U B R O U T I N E =======================================
.text:0040AA60
.text:0040AA60
.text:0040AA60 ; int __cdecl sub_40AA60(void *, int, int)
.text:0040AA60 sub_40AA60      proc near               ; CODE XREF: .text:0040A910↑j
.text:0040AA60                                         ; .text:0040A93A↑p
.text:0040AA60
.text:0040AA60 Block           = dword ptr -1Ch
.text:0040AA60 Size            = dword ptr -18h
.text:0040AA60 var_C           = dword ptr -0Ch
.text:0040AA60 var_8           = dword ptr -8
.text:0040AA60 var_4           = dword ptr -4
.text:0040AA60 arg_0           = dword ptr  4
.text:0040AA60 arg_4           = dword ptr  8
.text:0040AA60 arg_8           = dword ptr  0Ch
.text:0040AA60
.text:0040AA60                 sub     esp, 1Ch
.text:0040AA63                 mov     [esp+1Ch+var_8], esi
.text:0040AA67                 mov     esi, [esp+1Ch+arg_0]
.text:0040AA6B                 mov     [esp+1Ch+var_4], edi
.text:0040AA6F                 mov     edi, [esp+1Ch+arg_4]
.text:0040AA73                 test    esi, esi
.text:0040AA75                 mov     [esp+1Ch+var_C], ebx
.text:0040AA79                 mov     ecx, [edi]
.text:0040AA7B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040AA7F                 jz      short loc_40AAC0
.text:0040AA81                 xor     edx, edx
.text:0040AA83                 mov     eax, 7FFFFFFFh
.text:0040AA88                 div     ebx
.text:0040AA8A                 cmp     eax, ecx
.text:0040AA8C                 jb      short loc_40AAB9
.text:0040AA8E                 add     ecx, ecx
.text:0040AA90
.text:0040AA90 loc_40AA90:                             ; CODE XREF: sub_40AA60+62↓j
.text:0040AA90                                         ; sub_40AA60+71↓j ...
.text:0040AA90                 mov     [edi], ecx
.text:0040AA92                 imul    ebx, ecx
.text:0040AA95                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AA98                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040AA9C                 call    realloc
.text:0040AAA1                 test    eax, eax
.text:0040AAA3                 jz      short loc_40AAB5
.text:0040AAA5
.text:0040AAA5 loc_40AAA5:                             ; CODE XREF: sub_40AA60+57↓j
.text:0040AAA5                 mov     ebx, [esp+1Ch+var_C]
.text:0040AAA9                 mov     esi, [esp+1Ch+var_8]
.text:0040AAAD                 mov     edi, [esp+1Ch+var_4]
.text:0040AAB1                 add     esp, 1Ch
.text:0040AAB4                 retn
.text:0040AAB5 ; ---------------------------------------------------------------------------
.text:0040AAB5
.text:0040AAB5 loc_40AAB5:                             ; CODE XREF: sub_40AA60+43↑j
.text:0040AAB5                 test    ebx, ebx
.text:0040AAB7                 jz      short loc_40AAA5
.text:0040AAB9
.text:0040AAB9 loc_40AAB9:                             ; CODE XREF: sub_40AA60+2C↑j
.text:0040AAB9                 call    sub_40B0D0
.text:0040AAB9 ; ---------------------------------------------------------------------------
.text:0040AABE                 align 10h
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: sub_40AA60+1F↑j
.text:0040AAC0                 test    ecx, ecx
.text:0040AAC2                 jnz     short loc_40AA90
.text:0040AAC4                 xor     edx, edx
.text:0040AAC6                 mov     eax, 40h ; '@'
.text:0040AACB                 div     ebx
.text:0040AACD                 test    eax, eax
.text:0040AACF                 mov     ecx, eax
.text:0040AAD1                 jnz     short loc_40AA90
.text:0040AAD3                 mov     ecx, 1
.text:0040AAD8                 jmp     short loc_40AA90
.text:0040AAD8 sub_40AA60      endp
.text:0040AAD8
.text:0040AAD8 ; ---------------------------------------------------------------------------
.text:0040AADA                 align 10h
.text:0040AAE0
.text:0040AAE0 ; =============== S U B R O U T I N E =======================================
.text:0040AAE0
.text:0040AAE0
.text:0040AAE0 ; int __cdecl sub_40AAE0(int, char *, int)
.text:0040AAE0 sub_40AAE0      proc near               ; CODE XREF: sub_403840+155↑p
.text:0040AAE0                                         ; sub_403840+342↑p ...
.text:0040AAE0
.text:0040AAE0 Str             = dword ptr -2Ch
.text:0040AAE0 var_28          = dword ptr -28h
.text:0040AAE0 var_24          = dword ptr -24h
.text:0040AAE0 var_18          = dword ptr -18h
.text:0040AAE0 var_14          = dword ptr -14h
.text:0040AAE0 arg_0           = dword ptr  4
.text:0040AAE0 arg_4           = dword ptr  8
.text:0040AAE0 arg_8           = dword ptr  0Ch
.text:0040AAE0
.text:0040AAE0                 push    ebp
.text:0040AAE1                 push    edi
.text:0040AAE2                 push    esi
.text:0040AAE3                 push    ebx
.text:0040AAE4                 sub     esp, 1Ch
.text:0040AAE7                 mov     ebp, [esp+2Ch+arg_0]
.text:0040AAEB                 mov     [esp+2Ch+Str], ebp
.text:0040AAEE                 call    sub_40AC10
.text:0040AAF3                 mov     [esp+2Ch+Str], eax ; char *
.text:0040AAF6                 mov     ebx, eax
.text:0040AAF8                 call    sub_40AC70
.text:0040AAFD                 mov     [esp+2Ch+var_18], 0
.text:0040AB05                 mov     ecx, ebx
.text:0040AB07                 sub     ecx, ebp
.text:0040AB09                 add     ecx, eax
.text:0040AB0B                 test    eax, eax
.text:0040AB0D                 mov     [esp+2Ch+var_14], ecx
.text:0040AB11                 jz      short loc_40AB28
.text:0040AB13                 movzx   eax, byte ptr [eax+ebx-1]
.text:0040AB18                 cmp     al, 2Fh ; '/'
.text:0040AB1A                 jz      short loc_40AB28
.text:0040AB1C                 cmp     al, 5Ch ; '\'
.text:0040AB1E                 jz      short loc_40AB28
.text:0040AB20                 mov     [esp+2Ch+var_18], 1
.text:0040AB28
.text:0040AB28 loc_40AB28:                             ; CODE XREF: sub_40AAE0+31↑j
.text:0040AB28                                         ; sub_40AAE0+3A↑j ...
.text:0040AB28                 mov     ebx, [esp+2Ch+arg_4]
.text:0040AB2C                 cmp     byte ptr [ebx], 0
.text:0040AB2F                 jz      short loc_40AB3B
.text:0040AB31                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040AB35                 jz      loc_40ABBF
.text:0040AB3B
.text:0040AB3B loc_40AB3B:                             ; CODE XREF: sub_40AAE0+4F↑j
.text:0040AB3B                                         ; sub_40AAE0+E2↓j
.text:0040AB3B                 movzx   eax, byte ptr [ebx]
.text:0040AB3E                 cmp     al, 2Fh ; '/'
.text:0040AB40                 jz      short loc_40ABB1
.text:0040AB42                 cmp     al, 5Ch ; '\'
.text:0040AB44                 jz      short loc_40ABB1
.text:0040AB46
.text:0040AB46 loc_40AB46:                             ; CODE XREF: sub_40AAE0+DD↓j
.text:0040AB46                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040AB49                 call    strlen
.text:0040AB4E                 mov     esi, eax
.text:0040AB50                 mov     edx, [esp+2Ch+var_14]
.text:0040AB54                 mov     eax, [esp+2Ch+var_18]
.text:0040AB58                 add     edx, eax
.text:0040AB5A                 lea     edi, [esi+edx+1]
.text:0040AB5E                 mov     [esp+2Ch+Str], edi ; size_t
.text:0040AB61                 call    sub_40A850
.text:0040AB66                 mov     [esp+2Ch+Str], eax
.text:0040AB69                 mov     ecx, [esp+2Ch+var_14]
.text:0040AB6D                 mov     edi, eax
.text:0040AB6F                 mov     [esp+2Ch+var_28], ebp
.text:0040AB73                 mov     [esp+2Ch+var_24], ecx
.text:0040AB77                 call    sub_418D60
.text:0040AB7C                 mov     byte ptr [eax], 2Fh ; '/'
.text:0040AB7F                 mov     edx, [esp+2Ch+var_18]
.text:0040AB83                 mov     ecx, [esp+2Ch+arg_8]
.text:0040AB87                 add     eax, edx
.text:0040AB89                 test    ecx, ecx
.text:0040AB8B                 jz      short loc_40AB94
.text:0040AB8D                 mov     ebp, [esp+2Ch+arg_8]
.text:0040AB91                 mov     [ebp+0], eax
.text:0040AB94
.text:0040AB94 loc_40AB94:                             ; CODE XREF: sub_40AAE0+AB↑j
.text:0040AB94                 mov     [esp+2Ch+var_24], esi
.text:0040AB98                 mov     [esp+2Ch+var_28], ebx
.text:0040AB9C                 mov     [esp+2Ch+Str], eax
.text:0040AB9F                 call    sub_418D60
.text:0040ABA4                 mov     byte ptr [eax], 0
.text:0040ABA7                 add     esp, 1Ch
.text:0040ABAA                 mov     eax, edi
.text:0040ABAC                 pop     ebx
.text:0040ABAD                 pop     esi
.text:0040ABAE                 pop     edi
.text:0040ABAF                 pop     ebp
.text:0040ABB0                 retn
.text:0040ABB1 ; ---------------------------------------------------------------------------
.text:0040ABB1
.text:0040ABB1 loc_40ABB1:                             ; CODE XREF: sub_40AAE0+60↑j
.text:0040ABB1                                         ; sub_40AAE0+64↑j ...
.text:0040ABB1                 inc     ebx
.text:0040ABB2                 movzx   eax, byte ptr [ebx]
.text:0040ABB5                 cmp     al, 2Fh ; '/'
.text:0040ABB7                 jz      short loc_40ABB1
.text:0040ABB9                 cmp     al, 5Ch ; '\'
.text:0040ABBB                 jz      short loc_40ABB1
.text:0040ABBD                 jmp     short loc_40AB46
.text:0040ABBF ; ---------------------------------------------------------------------------
.text:0040ABBF
.text:0040ABBF loc_40ABBF:                             ; CODE XREF: sub_40AAE0+55↑j
.text:0040ABBF                 add     ebx, 2
.text:0040ABC2                 jmp     loc_40AB3B
.text:0040ABC2 sub_40AAE0      endp
.text:0040ABC2
.text:0040ABC2 ; ---------------------------------------------------------------------------
.text:0040ABC7                 align 10h
.text:0040ABD0
.text:0040ABD0 ; =============== S U B R O U T I N E =======================================
.text:0040ABD0
.text:0040ABD0
.text:0040ABD0 sub_40ABD0      proc near               ; CODE XREF: sub_403840+13C↑p
.text:0040ABD0                                         ; sub_403840+302↑p ...
.text:0040ABD0
.text:0040ABD0 var_C           = dword ptr -0Ch
.text:0040ABD0 var_4           = dword ptr -4
.text:0040ABD0 arg_0           = dword ptr  4
.text:0040ABD0
.text:0040ABD0                 sub     esp, 0Ch
.text:0040ABD3                 mov     edx, [esp+0Ch+arg_0]
.text:0040ABD7                 mov     [esp+0Ch+var_4], ebx
.text:0040ABDB                 mov     [esp+0Ch+var_C], edx
.text:0040ABDE                 call    sub_40AC10
.text:0040ABE3                 mov     [esp+0Ch+var_C], eax ; char *
.text:0040ABE6                 mov     ebx, eax
.text:0040ABE8                 call    sub_40AC70
.text:0040ABED                 lea     edx, [eax+ebx]
.text:0040ABF0                 cmp     byte ptr [edx], 0
.text:0040ABF3                 mov     byte ptr [edx], 0
.text:0040ABF6                 mov     ebx, [esp+0Ch+var_4]
.text:0040ABFA                 setnz   cl
.text:0040ABFD                 add     esp, 0Ch
.text:0040AC00                 movzx   eax, cl
.text:0040AC03                 retn
.text:0040AC03 sub_40ABD0      endp
.text:0040AC03
.text:0040AC03 ; ---------------------------------------------------------------------------
.text:0040AC04                 align 10h
.text:0040AC10
.text:0040AC10 ; =============== S U B R O U T I N E =======================================
.text:0040AC10
.text:0040AC10
.text:0040AC10 sub_40AC10      proc near               ; CODE XREF: sub_403840+30A↑p
.text:0040AC10                                         ; sub_403840+551↑p ...
.text:0040AC10
.text:0040AC10 arg_0           = dword ptr  4
.text:0040AC10
.text:0040AC10                 mov     ecx, [esp+arg_0]
.text:0040AC14                 movzx   eax, byte ptr [ecx]
.text:0040AC17                 test    al, al
.text:0040AC19                 jz      short loc_40AC21
.text:0040AC1B                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:0040AC1F                 jz      short loc_40AC67
.text:0040AC21
.text:0040AC21 loc_40AC21:                             ; CODE XREF: sub_40AC10+9↑j
.text:0040AC21                                         ; sub_40AC10+5D↓j
.text:0040AC21                 test    al, al
.text:0040AC23                 mov     edx, ecx
.text:0040AC25                 jz      short loc_40AC40
.text:0040AC27                 movzx   eax, byte ptr [ecx]
.text:0040AC2A                 lea     esi, [esi+0]
.text:0040AC30
.text:0040AC30 loc_40AC30:                             ; CODE XREF: sub_40AC10+2E↓j
.text:0040AC30                 cmp     al, 2Fh ; '/'
.text:0040AC32                 jz      short loc_40AC43
.text:0040AC34                 cmp     al, 5Ch ; '\'
.text:0040AC36                 jz      short loc_40AC43
.text:0040AC38
.text:0040AC38 loc_40AC38:                             ; CODE XREF: sub_40AC10+45↓j
.text:0040AC38                 inc     edx
.text:0040AC39                 movzx   eax, byte ptr [edx]
.text:0040AC3C                 test    al, al
.text:0040AC3E                 jnz     short loc_40AC30
.text:0040AC40
.text:0040AC40 loc_40AC40:                             ; CODE XREF: sub_40AC10+15↑j
.text:0040AC40                                         ; sub_40AC10+50↓j ...
.text:0040AC40                 mov     eax, ecx
.text:0040AC42                 retn
.text:0040AC43 ; ---------------------------------------------------------------------------
.text:0040AC43
.text:0040AC43 loc_40AC43:                             ; CODE XREF: sub_40AC10+22↑j
.text:0040AC43                                         ; sub_40AC10+26↑j ...
.text:0040AC43                 inc     edx
.text:0040AC44                 movzx   eax, byte ptr [edx]
.text:0040AC47                 cmp     al, 2Fh ; '/'
.text:0040AC49                 jz      short loc_40AC43
.text:0040AC4B                 cmp     al, 5Ch ; '\'
.text:0040AC4D                 jz      short loc_40AC43
.text:0040AC4F                 test    al, al
.text:0040AC51                 jz      short loc_40AC57
.text:0040AC53                 mov     ecx, edx
.text:0040AC55                 jmp     short loc_40AC38
.text:0040AC57 ; ---------------------------------------------------------------------------
.text:0040AC57
.text:0040AC57 loc_40AC57:                             ; CODE XREF: sub_40AC10+41↑j
.text:0040AC57                 movzx   eax, byte ptr [ecx]
.text:0040AC5A                 cmp     al, 2Fh ; '/'
.text:0040AC5C                 jz      short loc_40AC62
.text:0040AC5E                 cmp     al, 5Ch ; '\'
.text:0040AC60                 jnz     short loc_40AC40
.text:0040AC62
.text:0040AC62 loc_40AC62:                             ; CODE XREF: sub_40AC10+4C↑j
.text:0040AC62                 lea     ecx, [edx-1]
.text:0040AC65                 jmp     short loc_40AC40
.text:0040AC67 ; ---------------------------------------------------------------------------
.text:0040AC67
.text:0040AC67 loc_40AC67:                             ; CODE XREF: sub_40AC10+F↑j
.text:0040AC67                 add     ecx, 2
.text:0040AC6A                 movzx   eax, byte ptr [ecx]
.text:0040AC6D                 jmp     short loc_40AC21
.text:0040AC6D sub_40AC10      endp
.text:0040AC6D
.text:0040AC6D ; ---------------------------------------------------------------------------
.text:0040AC6F                 align 10h
.text:0040AC70
.text:0040AC70 ; =============== S U B R O U T I N E =======================================
.text:0040AC70
.text:0040AC70
.text:0040AC70 ; int __cdecl sub_40AC70(char *)
.text:0040AC70 sub_40AC70      proc near               ; CODE XREF: sub_407B90+37↑p
.text:0040AC70                                         ; sub_407B90+45↑p ...
.text:0040AC70
.text:0040AC70 Str             = dword ptr -0Ch
.text:0040AC70 arg_0           = dword ptr  4
.text:0040AC70
.text:0040AC70                 push    ebx
.text:0040AC71                 sub     esp, 8
.text:0040AC74                 mov     ebx, [esp+0Ch+arg_0]
.text:0040AC78                 mov     [esp+0Ch+Str], ebx ; Str
.text:0040AC7B                 call    strlen
.text:0040AC80                 cmp     eax, 1
.text:0040AC83                 jbe     short loc_40ACA0
.text:0040AC85                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040AC8A                 cmp     dl, 2Fh ; '/'
.text:0040AC8D                 jz      short loc_40ACA5
.text:0040AC8F                 cmp     dl, 5Ch ; '\'
.text:0040AC92                 jz      short loc_40ACA5
.text:0040AC94                 lea     esi, [esi+0]
.text:0040AC9A                 lea     edi, [edi+0]
.text:0040ACA0
.text:0040ACA0 loc_40ACA0:                             ; CODE XREF: sub_40AC70+13↑j
.text:0040ACA0                                         ; sub_40AC70+39↓j ...
.text:0040ACA0                 add     esp, 8
.text:0040ACA3                 pop     ebx
.text:0040ACA4                 retn
.text:0040ACA5 ; ---------------------------------------------------------------------------
.text:0040ACA5
.text:0040ACA5 loc_40ACA5:                             ; CODE XREF: sub_40AC70+1D↑j
.text:0040ACA5                                         ; sub_40AC70+22↑j ...
.text:0040ACA5                 dec     eax
.text:0040ACA6                 cmp     eax, 1
.text:0040ACA9                 jbe     short loc_40ACA0
.text:0040ACAB                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040ACB0                 cmp     dl, 2Fh ; '/'
.text:0040ACB3                 jz      short loc_40ACA5
.text:0040ACB5                 cmp     dl, 5Ch ; '\'
.text:0040ACB8                 jz      short loc_40ACA5
.text:0040ACBA                 jmp     short loc_40ACA0
.text:0040ACBA sub_40AC70      endp
.text:0040ACBA
.text:0040ACBA ; ---------------------------------------------------------------------------
.text:0040ACBC                 align 10h
.text:0040ACC0
.text:0040ACC0 ; =============== S U B R O U T I N E =======================================
.text:0040ACC0
.text:0040ACC0
.text:0040ACC0 sub_40ACC0      proc near               ; CODE XREF: sub_404320+53↑p
.text:0040ACC0
.text:0040ACC0 var_C           = dword ptr -0Ch
.text:0040ACC0 arg_0           = dword ptr  4
.text:0040ACC0
.text:0040ACC0                 push    esi
.text:0040ACC1                 push    ebx
.text:0040ACC2                 sub     esp, 4
.text:0040ACC5                 mov     ebx, [esp+0Ch+arg_0]
.text:0040ACC9                 cmp     byte ptr [ebx], 0
.text:0040ACCC                 jz      short loc_40ACD4
.text:0040ACCE                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:0040ACD2                 jz      short loc_40AD26
.text:0040ACD4
.text:0040ACD4 loc_40ACD4:                             ; CODE XREF: sub_40ACC0+C↑j
.text:0040ACD4                 xor     esi, esi
.text:0040ACD6
.text:0040ACD6 loc_40ACD6:                             ; CODE XREF: sub_40ACC0+6B↓j
.text:0040ACD6                 mov     [esp+0Ch+var_C], ebx
.text:0040ACD9                 call    sub_40AC10
.text:0040ACDE                 sub     eax, ebx
.text:0040ACE0                 cmp     esi, eax
.text:0040ACE2                 jnb     short loc_40AD06
.text:0040ACE4                 lea     esi, [esi+0]
.text:0040ACEA                 lea     edi, [edi+0]
.text:0040ACF0
.text:0040ACF0 loc_40ACF0:                             ; CODE XREF: sub_40ACC0+44↓j
.text:0040ACF0                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040ACF5                 cmp     dl, 2Fh ; '/'
.text:0040ACF8                 jz      short loc_40AD01
.text:0040ACFA                 cmp     dl, 5Ch ; '\'
.text:0040ACFD                 mov     ecx, eax
.text:0040ACFF                 jnz     short loc_40AD19
.text:0040AD01
.text:0040AD01 loc_40AD01:                             ; CODE XREF: sub_40ACC0+38↑j
.text:0040AD01                 dec     eax
.text:0040AD02                 cmp     esi, eax
.text:0040AD04                 jb      short loc_40ACF0
.text:0040AD06
.text:0040AD06 loc_40AD06:                             ; CODE XREF: sub_40ACC0+22↑j
.text:0040AD06                 movzx   edx, byte ptr [esi+ebx]
.text:0040AD0A                 xor     eax, eax
.text:0040AD0C                 cmp     dl, 2Fh ; '/'
.text:0040AD0F                 jz      short loc_40AD1F
.text:0040AD11                 cmp     dl, 5Ch ; '\'
.text:0040AD14                 jz      short loc_40AD1F
.text:0040AD16
.text:0040AD16 loc_40AD16:                             ; CODE XREF: sub_40ACC0+64↓j
.text:0040AD16                 lea     ecx, [eax+esi]
.text:0040AD19
.text:0040AD19 loc_40AD19:                             ; CODE XREF: sub_40ACC0+3F↑j
.text:0040AD19                 pop     edx
.text:0040AD1A                 mov     eax, ecx
.text:0040AD1C                 pop     ebx
.text:0040AD1D                 pop     esi
.text:0040AD1E                 retn
.text:0040AD1F ; ---------------------------------------------------------------------------
.text:0040AD1F
.text:0040AD1F loc_40AD1F:                             ; CODE XREF: sub_40ACC0+4F↑j
.text:0040AD1F                                         ; sub_40ACC0+54↑j
.text:0040AD1F                 mov     eax, 1
.text:0040AD24                 jmp     short loc_40AD16
.text:0040AD26 ; ---------------------------------------------------------------------------
.text:0040AD26
.text:0040AD26 loc_40AD26:                             ; CODE XREF: sub_40ACC0+12↑j
.text:0040AD26                 mov     esi, 2
.text:0040AD2B                 jmp     short loc_40ACD6
.text:0040AD2B sub_40ACC0      endp
.text:0040AD2B
.text:0040AD2B ; ---------------------------------------------------------------------------
.text:0040AD2D                 align 10h
.text:0040AD30
.text:0040AD30 ; =============== S U B R O U T I N E =======================================
.text:0040AD30
.text:0040AD30
.text:0040AD30 ; int __cdecl sub_40AD30(void *)
.text:0040AD30 sub_40AD30      proc near               ; CODE XREF: sub_404B50+349↑p
.text:0040AD30                                         ; sub_407B90+C8↑p ...
.text:0040AD30
.text:0040AD30 var_2C          = dword ptr -2Ch
.text:0040AD30 Src             = dword ptr -28h
.text:0040AD30 Size            = dword ptr -24h
.text:0040AD30 var_11          = byte ptr -11h
.text:0040AD30 arg_0           = dword ptr  4
.text:0040AD30
.text:0040AD30                 push    ebp
.text:0040AD31                 push    edi
.text:0040AD32                 push    esi
.text:0040AD33                 push    ebx
.text:0040AD34                 sub     esp, 1Ch
.text:0040AD37                 mov     edi, [esp+2Ch+arg_0]
.text:0040AD3B                 cmp     byte ptr [edi], 0
.text:0040AD3E                 jz      short loc_40AD4A
.text:0040AD40                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040AD44                 jz      loc_40ADE7
.text:0040AD4A
.text:0040AD4A loc_40AD4A:                             ; CODE XREF: sub_40AD30+E↑j
.text:0040AD4A                 xor     esi, esi
.text:0040AD4C
.text:0040AD4C loc_40AD4C:                             ; CODE XREF: sub_40AD30+BC↓j
.text:0040AD4C                 mov     [esp+2Ch+var_2C], edi
.text:0040AD4F                 call    sub_40AC10
.text:0040AD54                 sub     eax, edi
.text:0040AD56                 cmp     esi, eax
.text:0040AD58                 jnb     short loc_40AD76
.text:0040AD5A                 lea     esi, [esi+0]
.text:0040AD60
.text:0040AD60 loc_40AD60:                             ; CODE XREF: sub_40AD30+44↓j
.text:0040AD60                 movzx   edx, byte ptr [eax+edi-1]
.text:0040AD65                 cmp     dl, 2Fh ; '/'
.text:0040AD68                 jz      short loc_40AD71
.text:0040AD6A                 cmp     dl, 5Ch ; '\'
.text:0040AD6D                 mov     ebx, eax
.text:0040AD6F                 jnz     short loc_40AD87
.text:0040AD71
.text:0040AD71 loc_40AD71:                             ; CODE XREF: sub_40AD30+38↑j
.text:0040AD71                 dec     eax
.text:0040AD72                 cmp     esi, eax
.text:0040AD74                 jb      short loc_40AD60
.text:0040AD76
.text:0040AD76 loc_40AD76:                             ; CODE XREF: sub_40AD30+28↑j
.text:0040AD76                 movzx   eax, byte ptr [esi+edi]
.text:0040AD7A                 xor     edx, edx
.text:0040AD7C                 cmp     al, 2Fh ; '/'
.text:0040AD7E                 jz      short loc_40ADE0
.text:0040AD80                 cmp     al, 5Ch ; '\'
.text:0040AD82                 jz      short loc_40ADE0
.text:0040AD84
.text:0040AD84 loc_40AD84:                             ; CODE XREF: sub_40AD30+B5↓j
.text:0040AD84                 lea     ebx, [edx+esi]
.text:0040AD87
.text:0040AD87 loc_40AD87:                             ; CODE XREF: sub_40AD30+3F↑j
.text:0040AD87                 cmp     byte ptr [edi], 0
.text:0040AD8A                 mov     ebp, ebx
.text:0040AD8C                 jz      short loc_40AD94
.text:0040AD8E                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:0040AD92                 jz      short loc_40ADDB
.text:0040AD94
.text:0040AD94 loc_40AD94:                             ; CODE XREF: sub_40AD30+5C↑j
.text:0040AD94                 test    ebx, ebx
.text:0040AD96
.text:0040AD96 loc_40AD96:                             ; CODE XREF: sub_40AD30+AE↓j
.text:0040AD96                 setz    [esp+2Ch+var_11]
.text:0040AD9B                 movzx   ecx, [esp+2Ch+var_11]
.text:0040ADA0                 lea     edx, [ecx+ebx+1]
.text:0040ADA4                 mov     [esp+2Ch+var_2C], edx ; size_t
.text:0040ADA7                 call    sub_40A850
.text:0040ADAC                 mov     [esp+2Ch+var_2C], eax ; void *
.text:0040ADAF                 mov     esi, eax
.text:0040ADB1                 mov     [esp+2Ch+Size], ebx ; Size
.text:0040ADB5                 mov     [esp+2Ch+Src], edi ; Src
.text:0040ADB9                 call    memcpy
.text:0040ADBE                 cmp     [esp+2Ch+var_11], 0
.text:0040ADC3                 jz      short loc_40ADCC
.text:0040ADC5                 mov     byte ptr [ebx+esi], 2Eh ; '.'
.text:0040ADC9                 lea     ebp, [ebx+1]
.text:0040ADCC
.text:0040ADCC loc_40ADCC:                             ; CODE XREF: sub_40AD30+93↑j
.text:0040ADCC                 mov     byte ptr [ebp+esi+0], 0
.text:0040ADD1                 mov     eax, esi
.text:0040ADD3                 add     esp, 1Ch
.text:0040ADD6                 pop     ebx
.text:0040ADD7                 pop     esi
.text:0040ADD8                 pop     edi
.text:0040ADD9                 pop     ebp
.text:0040ADDA                 retn
.text:0040ADDB ; ---------------------------------------------------------------------------
.text:0040ADDB
.text:0040ADDB loc_40ADDB:                             ; CODE XREF: sub_40AD30+62↑j
.text:0040ADDB                 cmp     ebx, 2
.text:0040ADDE                 jmp     short loc_40AD96
.text:0040ADE0 ; ---------------------------------------------------------------------------
.text:0040ADE0
.text:0040ADE0 loc_40ADE0:                             ; CODE XREF: sub_40AD30+4E↑j
.text:0040ADE0                                         ; sub_40AD30+52↑j
.text:0040ADE0                 mov     edx, 1
.text:0040ADE5                 jmp     short loc_40AD84
.text:0040ADE7 ; ---------------------------------------------------------------------------
.text:0040ADE7
.text:0040ADE7 loc_40ADE7:                             ; CODE XREF: sub_40AD30+14↑j
.text:0040ADE7                 mov     esi, 2
.text:0040ADEC                 jmp     loc_40AD4C
.text:0040ADEC sub_40AD30      endp
.text:0040ADEC
.text:0040ADEC ; ---------------------------------------------------------------------------
.text:0040ADF1                 align 10h
.text:0040AE00
.text:0040AE00 ; =============== S U B R O U T I N E =======================================
.text:0040AE00
.text:0040AE00
.text:0040AE00 ; int __cdecl sub_40AE00(int, char *, int)
.text:0040AE00 sub_40AE00      proc near               ; CODE XREF: sub_40AEB0+1A↓p
.text:0040AE00
.text:0040AE00 var_2C          = dword ptr -2Ch
.text:0040AE00 var_28          = dword ptr -28h
.text:0040AE00 var_1C          = dword ptr -1Ch
.text:0040AE00 var_18          = dword ptr -18h
.text:0040AE00 var_14          = dword ptr -14h
.text:0040AE00 var_10          = dword ptr -10h
.text:0040AE00 arg_0           = dword ptr  4
.text:0040AE00 arg_4           = dword ptr  8
.text:0040AE00 arg_8           = dword ptr  0Ch
.text:0040AE00
.text:0040AE00                 push    edi
.text:0040AE01                 push    esi
.text:0040AE02                 push    ebx
.text:0040AE03                 sub     esp, 20h
.text:0040AE06                 xor     ebx, ebx
.text:0040AE08                 mov     ecx, [esp+2Ch+arg_8]
.text:0040AE0C                 mov     esi, [esp+2Ch+arg_0]
.text:0040AE10                 test    ecx, ecx
.text:0040AE12                 jz      short loc_40AE54
.text:0040AE14                 mov     ebx, [ecx]
.text:0040AE16                 mov     [esp+2Ch+var_1C], ebx
.text:0040AE1A                 mov     edi, [ecx+4]
.text:0040AE1D                 mov     ebx, 10624DD3h
.text:0040AE22                 mov     eax, edi
.text:0040AE24                 imul    ebx
.text:0040AE26                 mov     eax, edi
.text:0040AE28                 sar     eax, 1Fh
.text:0040AE2B                 sar     edx, 6
.text:0040AE2E                 sub     edx, eax
.text:0040AE30                 mov     [esp+2Ch+var_18], edx
.text:0040AE34                 mov     edx, [ecx+8]
.text:0040AE37                 mov     [esp+2Ch+var_14], edx
.text:0040AE3B                 mov     edi, [ecx+0Ch]
.text:0040AE3E                 mov     eax, edi
.text:0040AE40                 imul    ebx
.text:0040AE42                 mov     ebx, edi
.text:0040AE44                 sar     ebx, 1Fh
.text:0040AE47                 sar     edx, 6
.text:0040AE4A                 sub     edx, ebx
.text:0040AE4C                 lea     ebx, [esp+2Ch+var_1C]
.text:0040AE50                 mov     [esp+2Ch+var_10], edx
.text:0040AE54
.text:0040AE54 loc_40AE54:                             ; CODE XREF: sub_40AE00+12↑j
.text:0040AE54                 test    esi, esi
.text:0040AE56                 js      short loc_40AE87
.text:0040AE58                 mov     [esp+2Ch+var_28], ebx
.text:0040AE5C                 mov     [esp+2Ch+var_2C], esi
.text:0040AE5F                 call    sub_418E00
.text:0040AE64                 xor     edx, edx
.text:0040AE66                 test    eax, eax
.text:0040AE68                 jnz     short loc_40AE73
.text:0040AE6A
.text:0040AE6A loc_40AE6A:                             ; CODE XREF: sub_40AE00+99↓j
.text:0040AE6A                                         ; sub_40AE00+A0↓j
.text:0040AE6A                 add     esp, 20h
.text:0040AE6D                 mov     eax, edx
.text:0040AE6F                 pop     ebx
.text:0040AE70                 pop     esi
.text:0040AE71                 pop     edi
.text:0040AE72                 retn
.text:0040AE73 ; ---------------------------------------------------------------------------
.text:0040AE73
.text:0040AE73 loc_40AE73:                             ; CODE XREF: sub_40AE00+68↑j
.text:0040AE73                 call    _errno
.text:0040AE78                 mov     eax, [eax]
.text:0040AE7A                 cmp     eax, 5
.text:0040AE7D                 jz      short loc_40AE9B
.text:0040AE7F                 cmp     eax, 5
.text:0040AE82                 jg      short loc_40AEA2
.text:0040AE84                 dec     eax
.text:0040AE85
.text:0040AE85 loc_40AE85:                             ; CODE XREF: sub_40AE00+AA↓j
.text:0040AE85                 jz      short loc_40AE9B
.text:0040AE87
.text:0040AE87 loc_40AE87:                             ; CODE XREF: sub_40AE00+56↑j
.text:0040AE87                 mov     [esp+2Ch+var_28], ebx ; int
.text:0040AE8B                 mov     ecx, [esp+2Ch+arg_4]
.text:0040AE8F                 mov     [esp+2Ch+var_2C], ecx ; char *
.text:0040AE92                 call    sub_4187E0
.text:0040AE97                 mov     edx, eax
.text:0040AE99                 jmp     short loc_40AE6A
.text:0040AE9B ; ---------------------------------------------------------------------------
.text:0040AE9B
.text:0040AE9B loc_40AE9B:                             ; CODE XREF: sub_40AE00+7D↑j
.text:0040AE9B                                         ; sub_40AE00:loc_40AE85↑j ...
.text:0040AE9B                 mov     edx, 0FFFFFFFFh
.text:0040AEA0                 jmp     short loc_40AE6A
.text:0040AEA2 ; ---------------------------------------------------------------------------
.text:0040AEA2
.text:0040AEA2 loc_40AEA2:                             ; CODE XREF: sub_40AE00+82↑j
.text:0040AEA2                 cmp     eax, 0Dh
.text:0040AEA5                 jz      short loc_40AE9B
.text:0040AEA7                 cmp     eax, 1Eh
.text:0040AEAA                 jmp     short loc_40AE85
.text:0040AEAA sub_40AE00      endp
.text:0040AEAA
.text:0040AEAA ; ---------------------------------------------------------------------------
.text:0040AEAC                 align 10h
.text:0040AEB0
.text:0040AEB0 ; =============== S U B R O U T I N E =======================================
.text:0040AEB0
.text:0040AEB0
.text:0040AEB0 ; int __cdecl sub_40AEB0(char *, int)
.text:0040AEB0 sub_40AEB0      proc near               ; CODE XREF: sub_404060+222↑p
.text:0040AEB0                                         ; sub_404B50+5E2↑p ...
.text:0040AEB0
.text:0040AEB0 var_C           = dword ptr -0Ch
.text:0040AEB0 var_8           = dword ptr -8
.text:0040AEB0 var_4           = dword ptr -4
.text:0040AEB0 arg_0           = dword ptr  4
.text:0040AEB0 arg_4           = dword ptr  8
.text:0040AEB0
.text:0040AEB0                 sub     esp, 0Ch
.text:0040AEB3                 mov     edx, [esp+0Ch+arg_4]
.text:0040AEB7                 mov     [esp+0Ch+var_C], 0FFFFFFFFh ; int
.text:0040AEBE                 mov     [esp+0Ch+var_4], edx ; int
.text:0040AEC2                 mov     edx, [esp+0Ch+arg_0]
.text:0040AEC6                 mov     [esp+0Ch+var_8], edx ; char *
.text:0040AECA                 call    sub_40AE00
.text:0040AECF                 add     esp, 0Ch
.text:0040AED2                 retn
.text:0040AED2 sub_40AEB0      endp
.text:0040AED2
.text:0040AED2 ; ---------------------------------------------------------------------------
.text:0040AED3                 align 10h
.text:0040AEE0
.text:0040AEE0 ; =============== S U B R O U T I N E =======================================
.text:0040AEE0
.text:0040AEE0
.text:0040AEE0 ; int __cdecl sub_40AEE0(int, char *)
.text:0040AEE0 sub_40AEE0      proc near               ; CODE XREF: sub_404B50+21F↑p
.text:0040AEE0                                         ; sub_404B50+234↑p ...
.text:0040AEE0
.text:0040AEE0 var_C           = dword ptr -0Ch
.text:0040AEE0 var_8           = dword ptr -8
.text:0040AEE0 var_4           = dword ptr -4
.text:0040AEE0 arg_0           = dword ptr  4
.text:0040AEE0 arg_4           = dword ptr  8
.text:0040AEE0
.text:0040AEE0                 sub     esp, 0Ch
.text:0040AEE3                 mov     edx, [esp+0Ch+arg_4]
.text:0040AEE7                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040AEEF                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040AEF3                 mov     edx, [esp+0Ch+arg_0]
.text:0040AEF7                 mov     [esp+0Ch+var_C], edx ; int
.text:0040AEFA                 call    sub_40CFA0
.text:0040AEFF                 add     esp, 0Ch
.text:0040AF02                 retn
.text:0040AF02 sub_40AEE0      endp
.text:0040AF02
.text:0040AF02 ; ---------------------------------------------------------------------------
.text:0040AF03                 align 10h
.text:0040AF10
.text:0040AF10 ; =============== S U B R O U T I N E =======================================
.text:0040AF10
.text:0040AF10
.text:0040AF10 ; int __cdecl sub_40AF10(char *)
.text:0040AF10 sub_40AF10      proc near               ; CODE XREF: sub_4027B0+A0A↑p
.text:0040AF10                                         ; sub_4027B0+A45↑p ...
.text:0040AF10
.text:0040AF10 var_C           = dword ptr -0Ch
.text:0040AF10 var_8           = dword ptr -8
.text:0040AF10 var_4           = dword ptr -4
.text:0040AF10 arg_0           = dword ptr  4
.text:0040AF10
.text:0040AF10                 sub     esp, 0Ch
.text:0040AF13                 mov     edx, [esp+0Ch+arg_0]
.text:0040AF17                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040AF1F                 mov     [esp+0Ch+var_C], 0 ; int
.text:0040AF26                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040AF2A                 call    sub_40CFA0
.text:0040AF2F                 add     esp, 0Ch
.text:0040AF32                 retn
.text:0040AF32 sub_40AF10      endp
.text:0040AF32
.text:0040AF32 ; ---------------------------------------------------------------------------
.text:0040AF33                 align 10h
.text:0040AF40
.text:0040AF40 ; =============== S U B R O U T I N E =======================================
.text:0040AF40
.text:0040AF40
.text:0040AF40 ; int __cdecl sub_40AF40(char *, int)
.text:0040AF40 sub_40AF40      proc near               ; CODE XREF: sub_404B50+967↑p
.text:0040AF40                                         ; sub_404B50+AC6↑p
.text:0040AF40
.text:0040AF40 Block           = dword ptr -1Ch
.text:0040AF40 lpString1       = dword ptr -18h
.text:0040AF40 var_14          = dword ptr -14h
.text:0040AF40 arg_0           = dword ptr  4
.text:0040AF40 arg_4           = dword ptr  8
.text:0040AF40
.text:0040AF40                 push    ebp
.text:0040AF41                 push    edi
.text:0040AF42                 mov     edi, 7FFFFFFFh
.text:0040AF47                 push    esi
.text:0040AF48                 push    ebx
.text:0040AF49                 sub     esp, 0Ch
.text:0040AF4C                 mov     eax, [esp+1Ch+arg_4]
.text:0040AF50                 mov     ebp, [esp+1Ch+arg_0]
.text:0040AF54                 cmp     eax, 7FFFFFFEh
.text:0040AF59                 ja      short loc_40AF60
.text:0040AF5B                 lea     edi, [eax+1]
.text:0040AF5E                 mov     esi, esi
.text:0040AF60
.text:0040AF60 loc_40AF60:                             ; CODE XREF: sub_40AF40+19↑j
.text:0040AF60                                         ; sub_40AF40+56↓j ...
.text:0040AF60                 mov     [esp+1Ch+Block], edi ; size_t
.text:0040AF63                 call    sub_40A850
.text:0040AF68                 mov     [esp+1Ch+lpString1], eax ; lpString1
.text:0040AF6C                 mov     esi, eax
.text:0040AF6E                 mov     [esp+1Ch+var_14], edi
.text:0040AF72                 mov     [esp+1Ch+Block], ebp ; char *
.text:0040AF75                 call    sub_417670
.text:0040AF7A                 test    eax, eax
.text:0040AF7C                 mov     ebx, eax
.text:0040AF7E                 js      short loc_40AFB5
.text:0040AF80
.text:0040AF80 loc_40AF80:                             ; CODE XREF: sub_40AF40+7D↓j
.text:0040AF80                 cmp     ebx, edi
.text:0040AF82                 jb      short loc_40AFA7
.text:0040AF84                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AF87                 call    free
.text:0040AF8C                 cmp     edi, 3FFFFFFFh
.text:0040AF92                 ja      short loc_40AF98
.text:0040AF94                 add     edi, edi
.text:0040AF96                 jmp     short loc_40AF60
.text:0040AF98 ; ---------------------------------------------------------------------------
.text:0040AF98
.text:0040AF98 loc_40AF98:                             ; CODE XREF: sub_40AF40+52↑j
.text:0040AF98                 cmp     edi, 7FFFFFFEh
.text:0040AF9E                 ja      short loc_40AFD9
.text:0040AFA0                 mov     edi, 7FFFFFFFh
.text:0040AFA5                 jmp     short loc_40AF60
.text:0040AFA7 ; ---------------------------------------------------------------------------
.text:0040AFA7
.text:0040AFA7 loc_40AFA7:                             ; CODE XREF: sub_40AF40+42↑j
.text:0040AFA7                 mov     byte ptr [ebx+esi], 0
.text:0040AFAB                 mov     eax, esi
.text:0040AFAD
.text:0040AFAD loc_40AFAD:                             ; CODE XREF: sub_40AF40+97↓j
.text:0040AFAD                 add     esp, 0Ch
.text:0040AFB0                 pop     ebx
.text:0040AFB1                 pop     esi
.text:0040AFB2                 pop     edi
.text:0040AFB3                 pop     ebp
.text:0040AFB4                 retn
.text:0040AFB5 ; ---------------------------------------------------------------------------
.text:0040AFB5
.text:0040AFB5 loc_40AFB5:                             ; CODE XREF: sub_40AF40+3E↑j
.text:0040AFB5                 call    _errno
.text:0040AFBA                 cmp     dword ptr [eax], 22h ; '"'
.text:0040AFBD                 jz      short loc_40AF80
.text:0040AFBF                 call    _errno
.text:0040AFC4                 mov     edi, [eax]
.text:0040AFC6                 mov     [esp+1Ch+Block], esi ; Block
.text:0040AFC9                 call    free
.text:0040AFCE                 call    _errno
.text:0040AFD3                 mov     [eax], edi
.text:0040AFD5                 xor     eax, eax
.text:0040AFD7                 jmp     short loc_40AFAD
.text:0040AFD9 ; ---------------------------------------------------------------------------
.text:0040AFD9
.text:0040AFD9 loc_40AFD9:                             ; CODE XREF: sub_40AF40+5E↑j
.text:0040AFD9                 call    sub_40B0D0
.text:0040AFD9 sub_40AF40      endp
.text:0040AFD9
.text:0040AFD9 ; ---------------------------------------------------------------------------
.text:0040AFDE                 align 10h
.text:0040AFE0
.text:0040AFE0 ; =============== S U B R O U T I N E =======================================
.text:0040AFE0
.text:0040AFE0
.text:0040AFE0 sub_40AFE0      proc near               ; CODE XREF: sub_404B50:loc_406348↑p
.text:0040AFE0                                         ; sub_404B50:loc_406472↑p
.text:0040AFE0
.text:0040AFE0 C               = dword ptr -9Ch
.text:0040AFE0 Type            = dword ptr -98h
.text:0040AFE0 var_8C          = byte ptr -8Ch
.text:0040AFE0
.text:0040AFE0                 push    esi
.text:0040AFE1                 xor     esi, esi
.text:0040AFE3                 push    ebx
.text:0040AFE4                 sub     esp, 94h
.text:0040AFEA                 lea     esi, [esi+0]
.text:0040AFF0
.text:0040AFF0 loc_40AFF0:                             ; CODE XREF: sub_40AFE0+47↓j
.text:0040AFF0                                         ; sub_40AFE0+66↓j ...
.text:0040AFF0                 mov     ecx, ds:_iob
.text:0040AFF6                 mov     ebx, [ecx+4]
.text:0040AFF9                 dec     ebx
.text:0040AFFA                 mov     [ecx+4], ebx
.text:0040AFFD                 test    ebx, ebx
.text:0040AFFF                 js      loc_40B090
.text:0040B005                 mov     ecx, ds:_iob
.text:0040B00B                 mov     edx, [ecx]
.text:0040B00D                 movzx   ebx, byte ptr [edx]
.text:0040B010                 inc     edx
.text:0040B011                 mov     [ecx], edx
.text:0040B013
.text:0040B013 loc_40B013:                             ; CODE XREF: sub_40AFE0+C0↓j
.text:0040B013                 cmp     ebx, 0FFFFFFFFh
.text:0040B016                 jz      short loc_40B068
.text:0040B018                 cmp     ebx, 0Ah
.text:0040B01B                 jz      short loc_40B068
.text:0040B01D                 lea     edx, [esi-1]
.text:0040B020                 cmp     edx, 7Dh ; '}'
.text:0040B023                 jbe     short loc_40B050
.text:0040B025                 test    esi, esi
.text:0040B027                 jnz     short loc_40AFF0
.text:0040B029                 mov     edx, ds:__mb_cur_max
.text:0040B02F                 cmp     dword ptr [edx], 1
.text:0040B032                 jz      short loc_40B057
.text:0040B034                 mov     [esp+9Ch+Type], 8 ; Type
.text:0040B03C                 mov     [esp+9Ch+C], ebx ; C
.text:0040B03F                 call    _isctype
.text:0040B044
.text:0040B044 loc_40B044:                             ; CODE XREF: sub_40AFE0+86↓j
.text:0040B044                 test    eax, eax
.text:0040B046                 jnz     short loc_40AFF0
.text:0040B048                 nop
.text:0040B049                 lea     esi, [esi+0]
.text:0040B050
.text:0040B050 loc_40B050:                             ; CODE XREF: sub_40AFE0+43↑j
.text:0040B050                 mov     [esp+esi+9Ch+var_8C], bl
.text:0040B054                 inc     esi
.text:0040B055                 jmp     short loc_40AFF0
.text:0040B057 ; ---------------------------------------------------------------------------
.text:0040B057
.text:0040B057 loc_40B057:                             ; CODE XREF: sub_40AFE0+52↑j
.text:0040B057                 mov     edx, ds:_pctype
.text:0040B05D                 mov     ecx, [edx]
.text:0040B05F                 movzx   eax, word ptr [ecx+ebx*2]
.text:0040B063                 and     eax, 8
.text:0040B066                 jmp     short loc_40B044
.text:0040B068 ; ---------------------------------------------------------------------------
.text:0040B068
.text:0040B068 loc_40B068:                             ; CODE XREF: sub_40AFE0+36↑j
.text:0040B068                                         ; sub_40AFE0+3B↑j
.text:0040B068                 mov     [esp+esi+9Ch+var_8C], 0
.text:0040B06D                 lea     esi, [esp+9Ch+var_8C]
.text:0040B071                 mov     [esp+9Ch+C], esi
.text:0040B074                 call    near ptr loc_40D58B+5
.text:0040B079                 dec     eax
.text:0040B07A                 setz    cl
.text:0040B07D                 add     esp, 94h
.text:0040B083                 pop     ebx
.text:0040B084                 movzx   eax, cl
.text:0040B087                 pop     esi
.text:0040B088                 retn
.text:0040B088 ; ---------------------------------------------------------------------------
.text:0040B089                 align 10h
.text:0040B090
.text:0040B090 loc_40B090:                             ; CODE XREF: sub_40AFE0+1F↑j
.text:0040B090                 mov     ebx, ds:_iob
.text:0040B096                 mov     [esp+9Ch+C], ebx ; File
.text:0040B099                 call    _filbuf
.text:0040B09E                 mov     ebx, eax
.text:0040B0A0                 jmp     loc_40B013
.text:0040B0A0 sub_40AFE0      endp
.text:0040B0A0
.text:0040B0A0 ; ---------------------------------------------------------------------------
.text:0040B0A5                 align 10h
.text:0040B0B0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_40B0D0+3↓o
.text:0040B0C1 ; const char aS_1[]
.text:0040B0C1 aS_1            db '%s',0               ; DATA XREF: sub_40B0D0+10↓o
.text:0040B0C4                 align 10h
.text:0040B0D0
.text:0040B0D0 ; =============== S U B R O U T I N E =======================================
.text:0040B0D0
.text:0040B0D0 ; Attributes: noreturn
.text:0040B0D0
.text:0040B0D0 sub_40B0D0      proc near               ; CODE XREF: sub_407710:loc_4077F4↑p
.text:0040B0D0                                         ; sub_407870:loc_407951↑p ...
.text:0040B0D0
.text:0040B0D0 Code            = dword ptr -1Ch
.text:0040B0D0 ErrorMessage    = dword ptr -18h
.text:0040B0D0 var_14          = dword ptr -14h
.text:0040B0D0 var_10          = byte ptr -10h
.text:0040B0D0
.text:0040B0D0                 sub     esp, 1Ch
.text:0040B0D3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040B0DA                 call    ds:libintl_gettext
.text:0040B0E0                 mov     [esp+1Ch+var_14], offset aS_1 ; "%s"
.text:0040B0E8                 mov     edx, Code
.text:0040B0EE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:0040B0F6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040B0FA                 mov     [esp+1Ch+Code], edx ; Code
.text:0040B0FD                 call    sub_4143B0
.text:0040B102                 call    abort
.text:0040B102 sub_40B0D0      endp
.text:0040B102
.text:0040B102 ; ---------------------------------------------------------------------------
.text:0040B107                 align 10h
.text:0040B110 dword_40B110    dd 0                    ; DATA XREF: sub_40B140+D2↓o
.text:0040B110                                         ; sub_40B140:loc_40B370↓o ...
.text:0040B114 dword_40B114    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:0040B114                                         ; DATA XREF: .text:0040BD2C↓r
.text:0040B114                                         ; .text:0040BD35↓r ...
.text:0040B124 flt_40B124      dd 0.1                  ; DATA XREF: sub_40B140:loc_40B18F↓r
.text:0040B128 flt_40B128      dd 4.2949673e9          ; DATA XREF: sub_40B140+101↓r
.text:0040B12C flt_40B12C      dd 0.89999998           ; DATA XREF: sub_40B140+66↓r
.text:0040B130 flt_40B130      dd 1.1                  ; DATA XREF: sub_40B140+7A↓r
.text:0040B134                 align 10h
.text:0040B140
.text:0040B140 ; =============== S U B R O U T I N E =======================================
.text:0040B140
.text:0040B140
.text:0040B140 sub_40B140      proc near               ; CODE XREF: sub_406630+2A↑p
.text:0040B140                                         ; sub_406670+2A↑p ...
.text:0040B140
.text:0040B140 var_44          = qword ptr -44h
.text:0040B140 Size            = dword ptr -3Ch
.text:0040B140 var_38          = dword ptr -38h
.text:0040B140 var_28          = dword ptr -28h
.text:0040B140 var_24          = qword ptr -24h
.text:0040B140 var_18          = word ptr -18h
.text:0040B140 var_16          = word ptr -16h
.text:0040B140 var_10          = dword ptr -10h
.text:0040B140 var_C           = dword ptr -0Ch
.text:0040B140 var_8           = dword ptr -8
.text:0040B140 var_4           = dword ptr -4
.text:0040B140 arg_0           = dword ptr  4
.text:0040B140 arg_4           = dword ptr  8
.text:0040B140 arg_8           = dword ptr  0Ch
.text:0040B140 arg_C           = dword ptr  10h
.text:0040B140 arg_10          = dword ptr  14h
.text:0040B140
.text:0040B140                 sub     esp, 3Ch
.text:0040B143                 mov     [esp+3Ch+var_4], ebp
.text:0040B147                 mov     ebp, [esp+3Ch+arg_8]
.text:0040B14B                 mov     [esp+3Ch+var_10], ebx
.text:0040B14F                 mov     ebx, [esp+3Ch+arg_4]
.text:0040B153                 test    ebp, ebp
.text:0040B155                 mov     [esp+3Ch+var_C], esi
.text:0040B159                 mov     [esp+3Ch+var_8], edi
.text:0040B15D                 jz      loc_40B221
.text:0040B163                 mov     edx, [esp+3Ch+arg_C]
.text:0040B167                 test    edx, edx
.text:0040B169                 jz      loc_40B221
.text:0040B16F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:0040B176                 call    malloc
.text:0040B17B                 mov     esi, eax
.text:0040B17D                 xor     eax, eax
.text:0040B17F                 test    esi, esi
.text:0040B181                 jz      loc_40B223
.text:0040B187                 test    ebx, ebx
.text:0040B189                 jz      loc_40B370
.text:0040B18F
.text:0040B18F loc_40B18F:                             ; CODE XREF: sub_40B140+235↓j
.text:0040B18F                 fld     ds:flt_40B124
.text:0040B195                 fld     dword ptr [ebx+8]
.text:0040B198                 mov     [esi+14h], ebx
.text:0040B19B                 fucom   st(1)
.text:0040B19D                 fnstsw  ax
.text:0040B19F                 sahf
.text:0040B1A0                 jbe     loc_40B360
.text:0040B1A6                 fld     ds:flt_40B12C
.text:0040B1AC                 fucomp  st(1)
.text:0040B1AE                 fnstsw  ax
.text:0040B1B0                 sahf
.text:0040B1B1                 jbe     loc_40B360
.text:0040B1B7                 fld     dword ptr [ebx+0Ch]
.text:0040B1BA                 fld     ds:flt_40B130
.text:0040B1C0                 fxch    st(1)
.text:0040B1C2                 fucompp
.text:0040B1C4                 fnstsw  ax
.text:0040B1C6                 sahf
.text:0040B1C7                 jbe     loc_40B360
.text:0040B1CD                 fld     dword ptr [ebx]
.text:0040B1CF                 fldz
.text:0040B1D1                 fxch    st(1)
.text:0040B1D3                 fucom   st(1)
.text:0040B1D5                 fnstsw  ax
.text:0040B1D7                 fstp    st(1)
.text:0040B1D9                 sahf
.text:0040B1DA                 jb      loc_40B367
.text:0040B1E0                 faddp   st(2), st
.text:0040B1E2                 fld     dword ptr [ebx+4]
.text:0040B1E5                 fucom   st(2)
.text:0040B1E7                 fnstsw  ax
.text:0040B1E9                 sahf
.text:0040B1EA                 jbe     loc_40B367
.text:0040B1F0                 fld1
.text:0040B1F2                 fucompp
.text:0040B1F4                 fnstsw  ax
.text:0040B1F6                 sahf
.text:0040B1F7                 jb      loc_40B360
.text:0040B1FD                 fucom   st(1)
.text:0040B1FF                 fnstsw  ax
.text:0040B201                 fstp    st(1)
.text:0040B203                 sahf
.text:0040B204                 ja      short loc_40B237
.text:0040B206                 lea     esi, [esi+0]
.text:0040B209                 lea     edi, [edi+0]
.text:0040B210
.text:0040B210 loc_40B210:                             ; CODE XREF: sub_40B140+222↓j
.text:0040B210                 fstp    st
.text:0040B212                 mov     dword ptr [esi+14h], offset dword_40B110
.text:0040B219
.text:0040B219 loc_40B219:                             ; CODE XREF: sub_40B140+155↓j
.text:0040B219                                         ; sub_40B140+1BF↓j ...
.text:0040B219                 mov     [esp+3Ch+Size], esi ; Block
.text:0040B21C                 call    free
.text:0040B221
.text:0040B221 loc_40B221:                             ; CODE XREF: sub_40B140+1D↑j
.text:0040B221                                         ; sub_40B140+29↑j
.text:0040B221                 xor     eax, eax
.text:0040B223
.text:0040B223 loc_40B223:                             ; CODE XREF: sub_40B140+41↑j
.text:0040B223                                         ; sub_40B140+208↓j
.text:0040B223                 mov     ebx, [esp+3Ch+var_10]
.text:0040B227                 mov     esi, [esp+3Ch+var_C]
.text:0040B22B                 mov     edi, [esp+3Ch+var_8]
.text:0040B22F                 mov     ebp, [esp+3Ch+var_4]
.text:0040B233                 add     esp, 3Ch
.text:0040B236                 retn
.text:0040B237 ; ---------------------------------------------------------------------------
.text:0040B237
.text:0040B237 loc_40B237:                             ; CODE XREF: sub_40B140+C4↑j
.text:0040B237                 cmp     byte ptr [ebx+10h], 0
.text:0040B23B                 jnz     loc_40B354
.text:0040B241                 fld     ds:flt_40B128
.text:0040B247                 xor     eax, eax
.text:0040B249                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B24D                 push    eax
.text:0040B24E                 push    ecx
.text:0040B24F                 fild    [esp+44h+var_44]
.text:0040B252                 add     esp, 8
.text:0040B255                 fdivrp  st(2), st
.text:0040B257                 fxch    st(1)
.text:0040B259                 fucom   st(1)
.text:0040B25B                 fnstsw  ax
.text:0040B25D                 fstp    st(1)
.text:0040B25F                 sahf
.text:0040B260                 jnb     loc_40B34D
.text:0040B266                 fnstcw  [esp+3Ch+var_16]
.text:0040B26A                 movzx   ebx, [esp+3Ch+var_16]
.text:0040B26F                 or      bx, 0C00h
.text:0040B274                 mov     [esp+3Ch+var_18], bx
.text:0040B279                 fldcw   [esp+3Ch+var_18]
.text:0040B27D                 fistp   [esp+3Ch+var_24]
.text:0040B281                 fldcw   [esp+3Ch+var_16]
.text:0040B285                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:0040B289                 mov     [esp+3Ch+arg_0], edx
.text:0040B28D
.text:0040B28D loc_40B28D:                             ; CODE XREF: sub_40B140+216↓j
.text:0040B28D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:0040B295                 ja      short loc_40B219
.text:0040B297                 mov     ecx, [esp+3Ch+arg_0]
.text:0040B29B                 cmp     ecx, 9
.text:0040B29E                 ja      short loc_40B2A5
.text:0040B2A0                 mov     ecx, 0Ah
.text:0040B2A5
.text:0040B2A5 loc_40B2A5:                             ; CODE XREF: sub_40B140+15E↑j
.text:0040B2A5                 or      ecx, 1
.text:0040B2A8
.text:0040B2A8 loc_40B2A8:                             ; CODE XREF: sub_40B140+1B4↓j
.text:0040B2A8                 mov     [esp+3Ch+var_28], 3
.text:0040B2B0                 mov     edi, 9
.text:0040B2B5                 cmp     edi, ecx
.text:0040B2B7                 jnb     short loc_40B2E5
.text:0040B2B9                 xor     edx, edx
.text:0040B2BB                 mov     eax, ecx
.text:0040B2BD                 div     [esp+3Ch+var_28]
.text:0040B2C1                 test    edx, edx
.text:0040B2C3                 jz      short loc_40B2E5
.text:0040B2C5
.text:0040B2C5 loc_40B2C5:                             ; CODE XREF: sub_40B140+1A3↓j
.text:0040B2C5                 inc     [esp+3Ch+var_28]
.text:0040B2C9                 mov     edx, [esp+3Ch+var_28]
.text:0040B2CD                 lea     edi, [edi+edx*4]
.text:0040B2D0                 inc     edx
.text:0040B2D1                 cmp     edi, ecx
.text:0040B2D3                 mov     [esp+3Ch+var_28], edx
.text:0040B2D7                 jnb     short loc_40B2E5
.text:0040B2D9                 xor     edx, edx
.text:0040B2DB                 mov     eax, ecx
.text:0040B2DD                 div     [esp+3Ch+var_28]
.text:0040B2E1                 test    edx, edx
.text:0040B2E3                 jnz     short loc_40B2C5
.text:0040B2E5
.text:0040B2E5 loc_40B2E5:                             ; CODE XREF: sub_40B140+177↑j
.text:0040B2E5                                         ; sub_40B140+183↑j ...
.text:0040B2E5                 xor     edx, edx
.text:0040B2E7                 mov     eax, ecx
.text:0040B2E9                 div     [esp+3Ch+var_28]
.text:0040B2ED                 test    edx, edx
.text:0040B2EF                 jnz     short loc_40B2F6
.text:0040B2F1                 add     ecx, 2
.text:0040B2F4                 jmp     short loc_40B2A8
.text:0040B2F6 ; ---------------------------------------------------------------------------
.text:0040B2F6
.text:0040B2F6 loc_40B2F6:                             ; CODE XREF: sub_40B140+1AF↑j
.text:0040B2F6                 mov     [esi+8], ecx
.text:0040B2F9                 cmp     ecx, 1FFFFFFFh
.text:0040B2FF                 ja      loc_40B219
.text:0040B305                 mov     [esp+3Ch+Size], ecx ; Count
.text:0040B308                 mov     [esp+3Ch+var_38], 8 ; Size
.text:0040B310                 call    calloc
.text:0040B315                 mov     [esi+18h], ebp
.text:0040B318                 mov     ebx, [esi+8]
.text:0040B31B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040B31F                 mov     [esi], eax
.text:0040B321                 mov     edi, [esp+3Ch+arg_10]
.text:0040B325                 lea     ecx, [eax+ebx*8]
.text:0040B328                 mov     [esi+4], ecx
.text:0040B32B                 mov     eax, esi
.text:0040B32D                 mov     dword ptr [esi+0Ch], 0
.text:0040B334                 mov     dword ptr [esi+10h], 0
.text:0040B33B                 mov     [esi+1Ch], ebp
.text:0040B33E                 mov     [esi+20h], edi
.text:0040B341                 mov     dword ptr [esi+24h], 0
.text:0040B348                 jmp     loc_40B223
.text:0040B34D ; ---------------------------------------------------------------------------
.text:0040B34D
.text:0040B34D loc_40B34D:                             ; CODE XREF: sub_40B140+120↑j
.text:0040B34D                 fstp    st
.text:0040B34F                 jmp     loc_40B219
.text:0040B354 ; ---------------------------------------------------------------------------
.text:0040B354
.text:0040B354 loc_40B354:                             ; CODE XREF: sub_40B140+FB↑j
.text:0040B354                 fstp    st
.text:0040B356                 jmp     loc_40B28D
.text:0040B356 ; ---------------------------------------------------------------------------
.text:0040B35B                 align 10h
.text:0040B360
.text:0040B360 loc_40B360:                             ; CODE XREF: sub_40B140+60↑j
.text:0040B360                                         ; sub_40B140+71↑j ...
.text:0040B360                 fstp    st
.text:0040B362                 jmp     loc_40B210
.text:0040B367 ; ---------------------------------------------------------------------------
.text:0040B367
.text:0040B367 loc_40B367:                             ; CODE XREF: sub_40B140+9A↑j
.text:0040B367                                         ; sub_40B140+AA↑j
.text:0040B367                 fstp    st
.text:0040B369                 jmp     short loc_40B360
.text:0040B369 ; ---------------------------------------------------------------------------
.text:0040B36B                 align 10h
.text:0040B370
.text:0040B370 loc_40B370:                             ; CODE XREF: sub_40B140+49↑j
.text:0040B370                 mov     ebx, offset dword_40B110
.text:0040B375                 jmp     loc_40B18F
.text:0040B375 sub_40B140      endp
.text:0040B375
.text:0040B375 ; ---------------------------------------------------------------------------
.text:0040B37A                 align 10h
.text:0040B380                 push    edi
.text:0040B381                 push    esi
.text:0040B382                 push    ebx
.text:0040B383                 sub     esp, 10h
.text:0040B386                 mov     edi, [esp+20h]
.text:0040B38A                 mov     esi, [edi]
.text:0040B38C                 mov     eax, [edi+4]
.text:0040B38F                 cmp     esi, eax
.text:0040B391                 jnb     short loc_40B3E7
.text:0040B393                 lea     esi, [esi+0]
.text:0040B399                 lea     edi, [edi+0]
.text:0040B3A0
.text:0040B3A0 loc_40B3A0:                             ; CODE XREF: .text:0040B3E5↓j
.text:0040B3A0                 mov     ecx, [esi]
.text:0040B3A2                 test    ecx, ecx
.text:0040B3A4                 jz      short loc_40B3E0
.text:0040B3A6                 mov     ebx, [esi+4]
.text:0040B3A9                 test    ebx, ebx
.text:0040B3AB                 jz      short loc_40B411
.text:0040B3AD                 mov     ecx, [edi+20h]
.text:0040B3B0
.text:0040B3B0 loc_40B3B0:                             ; CODE XREF: .text:0040B3CA↓j
.text:0040B3B0                 test    ecx, ecx
.text:0040B3B2                 jnz     short loc_40B405
.text:0040B3B4
.text:0040B3B4 loc_40B3B4:                             ; CODE XREF: .text:0040B40F↓j
.text:0040B3B4                 mov     dword ptr [ebx], 0
.text:0040B3BA                 mov     edx, [ebx+4]
.text:0040B3BD                 mov     eax, [edi+24h]
.text:0040B3C0                 test    edx, edx
.text:0040B3C2                 mov     [ebx+4], eax
.text:0040B3C5                 mov     [edi+24h], ebx
.text:0040B3C8                 mov     ebx, edx
.text:0040B3CA                 jnz     short loc_40B3B0
.text:0040B3CC
.text:0040B3CC loc_40B3CC:                             ; CODE XREF: .text:0040B414↓j
.text:0040B3CC                 test    ecx, ecx
.text:0040B3CE                 jnz     short loc_40B3FC
.text:0040B3D0
.text:0040B3D0 loc_40B3D0:                             ; CODE XREF: .text:0040B403↓j
.text:0040B3D0                 mov     dword ptr [esi+4], 0
.text:0040B3D7                 mov     eax, [edi+4]
.text:0040B3DA                 mov     dword ptr [esi], 0
.text:0040B3E0
.text:0040B3E0 loc_40B3E0:                             ; CODE XREF: .text:0040B3A4↑j
.text:0040B3E0                 add     esi, 8
.text:0040B3E3                 cmp     esi, eax
.text:0040B3E5                 jb      short loc_40B3A0
.text:0040B3E7
.text:0040B3E7 loc_40B3E7:                             ; CODE XREF: .text:0040B391↑j
.text:0040B3E7                 mov     dword ptr [edi+0Ch], 0
.text:0040B3EE                 mov     dword ptr [edi+10h], 0
.text:0040B3F5                 add     esp, 10h
.text:0040B3F8                 pop     ebx
.text:0040B3F9                 pop     esi
.text:0040B3FA                 pop     edi
.text:0040B3FB                 retn
.text:0040B3FC ; ---------------------------------------------------------------------------
.text:0040B3FC
.text:0040B3FC loc_40B3FC:                             ; CODE XREF: .text:0040B3CE↑j
.text:0040B3FC                 mov     ebx, [esi]
.text:0040B3FE                 mov     [esp], ebx
.text:0040B401                 call    ecx
.text:0040B403                 jmp     short loc_40B3D0
.text:0040B405 ; ---------------------------------------------------------------------------
.text:0040B405
.text:0040B405 loc_40B405:                             ; CODE XREF: .text:0040B3B2↑j
.text:0040B405                 mov     edx, [ebx]
.text:0040B407                 mov     [esp], edx
.text:0040B40A                 call    ecx
.text:0040B40C                 mov     ecx, [edi+20h]
.text:0040B40F                 jmp     short loc_40B3B4
.text:0040B411 ; ---------------------------------------------------------------------------
.text:0040B411
.text:0040B411 loc_40B411:                             ; CODE XREF: .text:0040B3AB↑j
.text:0040B411                 mov     ecx, [edi+20h]
.text:0040B414                 jmp     short loc_40B3CC
.text:0040B414 ; ---------------------------------------------------------------------------
.text:0040B416                 align 10h
.text:0040B420
.text:0040B420 ; =============== S U B R O U T I N E =======================================
.text:0040B420
.text:0040B420
.text:0040B420 ; int __cdecl sub_40B420(void *)
.text:0040B420 sub_40B420      proc near               ; CODE XREF: sub_407A90+C↑p
.text:0040B420
.text:0040B420 Block           = dword ptr -1Ch
.text:0040B420 arg_0           = dword ptr  4
.text:0040B420
.text:0040B420                 push    ebp
.text:0040B421                 push    edi
.text:0040B422                 push    esi
.text:0040B423                 push    ebx
.text:0040B424                 sub     esp, 0Ch
.text:0040B427                 mov     ebp, [esp+1Ch+arg_0]
.text:0040B42B                 mov     eax, [ebp+20h]
.text:0040B42E                 test    eax, eax
.text:0040B430                 jz      loc_40B4FC
.text:0040B436                 mov     eax, [ebp+10h]
.text:0040B439                 test    eax, eax
.text:0040B43B                 jz      loc_40B4FC
.text:0040B441                 mov     edi, [ebp+0]
.text:0040B444                 mov     eax, [ebp+4]
.text:0040B447                 cmp     edi, eax
.text:0040B449                 jnb     short loc_40B4BB
.text:0040B44B
.text:0040B44B loc_40B44B:                             ; CODE XREF: sub_40B420+57↓j
.text:0040B44B                 mov     edx, [edi]
.text:0040B44D                 test    edx, edx
.text:0040B44F                 jz      short loc_40B472
.text:0040B451                 test    edi, edi
.text:0040B453                 mov     ebx, edi
.text:0040B455                 jz      short loc_40B472
.text:0040B457                 mov     esi, esi
.text:0040B459                 lea     edi, [edi+0]
.text:0040B460
.text:0040B460 loc_40B460:                             ; CODE XREF: sub_40B420+4D↓j
.text:0040B460                 mov     ecx, [ebx]
.text:0040B462                 mov     [esp+1Ch+Block], ecx
.text:0040B465                 call    dword ptr [ebp+20h]
.text:0040B468                 mov     ebx, [ebx+4]
.text:0040B46B                 test    ebx, ebx
.text:0040B46D                 jnz     short loc_40B460
.text:0040B46F                 mov     eax, [ebp+4]
.text:0040B472
.text:0040B472 loc_40B472:                             ; CODE XREF: sub_40B420+2F↑j
.text:0040B472                                         ; sub_40B420+35↑j
.text:0040B472                 add     edi, 8
.text:0040B475                 cmp     edi, eax
.text:0040B477                 jb      short loc_40B44B
.text:0040B479                 mov     edx, [ebp+0]
.text:0040B47C
.text:0040B47C loc_40B47C:                             ; CODE XREF: sub_40B420+E2↓j
.text:0040B47C                 cmp     edx, eax
.text:0040B47E                 mov     edi, edx
.text:0040B480                 jnb     short loc_40B4BB
.text:0040B482                 lea     esi, [esi+0]
.text:0040B489                 lea     edi, [edi+0]
.text:0040B490
.text:0040B490 loc_40B490:                             ; CODE XREF: sub_40B420+99↓j
.text:0040B490                 mov     ebx, [edi+4]
.text:0040B493                 test    ebx, ebx
.text:0040B495                 jz      short loc_40B4B4
.text:0040B497                 mov     esi, esi
.text:0040B499                 lea     edi, [edi+0]
.text:0040B4A0
.text:0040B4A0 loc_40B4A0:                             ; CODE XREF: sub_40B420+8F↓j
.text:0040B4A0                 mov     esi, [ebx+4]
.text:0040B4A3                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B4A6                 call    free
.text:0040B4AB                 test    esi, esi
.text:0040B4AD                 mov     ebx, esi
.text:0040B4AF                 jnz     short loc_40B4A0
.text:0040B4B1                 mov     eax, [ebp+4]
.text:0040B4B4
.text:0040B4B4 loc_40B4B4:                             ; CODE XREF: sub_40B420+75↑j
.text:0040B4B4                 add     edi, 8
.text:0040B4B7                 cmp     edi, eax
.text:0040B4B9                 jb      short loc_40B490
.text:0040B4BB
.text:0040B4BB loc_40B4BB:                             ; CODE XREF: sub_40B420+29↑j
.text:0040B4BB                                         ; sub_40B420+60↑j
.text:0040B4BB                 mov     ebx, [ebp+24h]
.text:0040B4BE                 test    ebx, ebx
.text:0040B4C0                 jz      short loc_40B4E1
.text:0040B4C2                 lea     esi, [esi+0]
.text:0040B4C9                 lea     edi, [edi+0]
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: sub_40B420+BF↓j
.text:0040B4D0                 mov     edi, [ebx+4]
.text:0040B4D3                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B4D6                 call    free
.text:0040B4DB                 test    edi, edi
.text:0040B4DD                 mov     ebx, edi
.text:0040B4DF                 jnz     short loc_40B4D0
.text:0040B4E1
.text:0040B4E1 loc_40B4E1:                             ; CODE XREF: sub_40B420+A0↑j
.text:0040B4E1                 mov     ebx, [ebp+0]
.text:0040B4E4                 mov     [esp+1Ch+Block], ebx ; Block
.text:0040B4E7                 call    free
.text:0040B4EC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:0040B4F0                 add     esp, 0Ch
.text:0040B4F3                 pop     ebx
.text:0040B4F4                 pop     esi
.text:0040B4F5                 pop     edi
.text:0040B4F6                 pop     ebp
.text:0040B4F7                 jmp     free
.text:0040B4FC ; ---------------------------------------------------------------------------
.text:0040B4FC
.text:0040B4FC loc_40B4FC:                             ; CODE XREF: sub_40B420+10↑j
.text:0040B4FC                                         ; sub_40B420+1B↑j
.text:0040B4FC                 mov     edx, [ebp+0]
.text:0040B4FF                 mov     eax, [ebp+4]
.text:0040B502                 jmp     loc_40B47C
.text:0040B502 sub_40B420      endp
.text:0040B502
.text:0040B502 ; ---------------------------------------------------------------------------
.text:0040B507                 align 10h
.text:0040B510
.text:0040B510 ; =============== S U B R O U T I N E =======================================
.text:0040B510
.text:0040B510
.text:0040B510 sub_40B510      proc near               ; CODE XREF: sub_40B690+1B2↓p
.text:0040B510                                         ; sub_40BD60+156↓p
.text:0040B510
.text:0040B510 Block           = dword ptr -2Ch
.text:0040B510 var_28          = dword ptr -28h
.text:0040B510 var_24          = dword ptr -24h
.text:0040B510 var_20          = dword ptr -20h
.text:0040B510 var_1C          = dword ptr -1Ch
.text:0040B510 var_18          = dword ptr -18h
.text:0040B510 var_14          = dword ptr -14h
.text:0040B510 arg_0           = dword ptr  4
.text:0040B510 arg_4           = dword ptr  8
.text:0040B510
.text:0040B510                 push    ebp
.text:0040B511                 push    edi
.text:0040B512                 push    esi
.text:0040B513                 push    ebx
.text:0040B514                 sub     esp, 1Ch
.text:0040B517                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B51B                 mov     edi, [ebx+20h]
.text:0040B51E                 mov     [esp+2Ch+var_1C], edi
.text:0040B522                 mov     esi, [ebx+1Ch]
.text:0040B525                 mov     [esp+2Ch+var_20], esi
.text:0040B529                 mov     edx, [ebx+18h]
.text:0040B52C                 mov     [esp+2Ch+var_24], edx
.text:0040B530                 mov     ecx, [ebx+14h]
.text:0040B533                 mov     edx, [esp+2Ch+arg_4]
.text:0040B537                 mov     [esp+2Ch+var_28], ecx
.text:0040B53B                 mov     [esp+2Ch+Block], edx
.text:0040B53E                 call    sub_40B140
.text:0040B543                 mov     edi, eax
.text:0040B545                 xor     eax, eax
.text:0040B547                 test    edi, edi
.text:0040B549                 jz      loc_40B612
.text:0040B54F                 mov     ebp, [esp+2Ch+arg_0]
.text:0040B553                 mov     edx, [ebp+0]
.text:0040B556                 mov     eax, [ebp+4]
.text:0040B559                 mov     ecx, [ebp+24h]
.text:0040B55C                 mov     [esp+2Ch+var_14], edx
.text:0040B560                 cmp     edx, eax
.text:0040B562                 mov     [edi+24h], ecx
.text:0040B565                 jnb     short loc_40B5DD
.text:0040B567                 mov     esi, esi
.text:0040B569                 lea     edi, [edi+0]
.text:0040B570
.text:0040B570 loc_40B570:                             ; CODE XREF: sub_40B510+C5↓j
.text:0040B570                 mov     edx, [esp+2Ch+var_14]
.text:0040B574                 mov     ebx, [edx]
.text:0040B576                 test    ebx, ebx
.text:0040B578                 jz      short loc_40B5CC
.text:0040B57A                 mov     ebx, edx
.text:0040B57C                 lea     esi, [esi+0]
.text:0040B580
.text:0040B580 loc_40B580:                             ; CODE XREF: sub_40B510+B3↓j
.text:0040B580                 mov     ebp, [ebx]
.text:0040B582                 mov     edx, [edi+8]
.text:0040B585                 mov     [esp+2Ch+Block], ebp
.text:0040B588                 mov     [esp+2Ch+var_28], edx
.text:0040B58C                 call    dword ptr [edi+18h]
.text:0040B58F                 mov     ecx, [edi]
.text:0040B591                 lea     esi, [ecx+eax*8]
.text:0040B594                 cmp     esi, [edi+4]
.text:0040B597                 jnb     loc_40B673
.text:0040B59D                 mov     ecx, [esi]
.text:0040B59F                 mov     eax, [ebx+4]
.text:0040B5A2                 test    ecx, ecx
.text:0040B5A4                 mov     [esp+2Ch+var_18], eax
.text:0040B5A8                 jz      loc_40B650
.text:0040B5AE                 cmp     ebx, [esp+2Ch+var_14]
.text:0040B5B2                 jz      short loc_40B61A
.text:0040B5B4                 mov     edx, [esi+4]
.text:0040B5B7                 mov     [ebx+4], edx
.text:0040B5BA                 mov     [esi+4], ebx
.text:0040B5BD
.text:0040B5BD loc_40B5BD:                             ; CODE XREF: sub_40B510+12A↓j
.text:0040B5BD                                         ; sub_40B510+149↓j ...
.text:0040B5BD                 mov     ebx, [esp+2Ch+var_18]
.text:0040B5C1                 test    ebx, ebx
.text:0040B5C3                 jnz     short loc_40B580
.text:0040B5C5                 mov     ecx, [esp+2Ch+arg_0]
.text:0040B5C9                 mov     eax, [ecx+4]
.text:0040B5CC
.text:0040B5CC loc_40B5CC:                             ; CODE XREF: sub_40B510+68↑j
.text:0040B5CC                 add     [esp+2Ch+var_14], 8
.text:0040B5D1                 cmp     [esp+2Ch+var_14], eax
.text:0040B5D5                 jb      short loc_40B570
.text:0040B5D7                 mov     eax, [esp+2Ch+arg_0]
.text:0040B5DB                 mov     edx, [eax]
.text:0040B5DD
.text:0040B5DD loc_40B5DD:                             ; CODE XREF: sub_40B510+55↑j
.text:0040B5DD                 mov     [esp+2Ch+Block], edx ; Block
.text:0040B5E0                 call    free
.text:0040B5E5                 mov     ebx, [esp+2Ch+arg_0]
.text:0040B5E9                 mov     ebp, [edi]
.text:0040B5EB                 mov     ecx, [edi+4]
.text:0040B5EE                 mov     esi, [edi+8]
.text:0040B5F1                 mov     edx, [edi+0Ch]
.text:0040B5F4                 mov     [ebx], ebp
.text:0040B5F6                 mov     ebp, [edi+24h]
.text:0040B5F9                 mov     [ebx+4], ecx
.text:0040B5FC                 mov     [ebx+8], esi
.text:0040B5FF                 mov     [ebx+0Ch], edx
.text:0040B602                 mov     [ebx+24h], ebp
.text:0040B605                 mov     [esp+2Ch+Block], edi ; Block
.text:0040B608                 call    free
.text:0040B60D                 mov     eax, 1
.text:0040B612
.text:0040B612 loc_40B612:                             ; CODE XREF: sub_40B510+39↑j
.text:0040B612                                         ; sub_40B510+11D↓j
.text:0040B612                 add     esp, 1Ch
.text:0040B615                 pop     ebx
.text:0040B616                 pop     esi
.text:0040B617                 pop     edi
.text:0040B618                 pop     ebp
.text:0040B619                 retn
.text:0040B61A ; ---------------------------------------------------------------------------
.text:0040B61A
.text:0040B61A loc_40B61A:                             ; CODE XREF: sub_40B510+A2↑j
.text:0040B61A                 mov     eax, [edi+24h]
.text:0040B61D                 test    eax, eax
.text:0040B61F                 jz      short loc_40B63C
.text:0040B621                 mov     ebx, [eax+4]
.text:0040B624                 mov     edx, eax
.text:0040B626                 mov     [edi+24h], ebx
.text:0040B629
.text:0040B629 loc_40B629:                             ; CODE XREF: sub_40B510+13A↓j
.text:0040B629                 xor     eax, eax
.text:0040B62B                 test    edx, edx
.text:0040B62D                 jz      short loc_40B612
.text:0040B62F                 mov     [edx], ebp
.text:0040B631                 mov     ebp, [esi+4]
.text:0040B634                 mov     [edx+4], ebp
.text:0040B637                 mov     [esi+4], edx
.text:0040B63A                 jmp     short loc_40B5BD
.text:0040B63C ; ---------------------------------------------------------------------------
.text:0040B63C
.text:0040B63C loc_40B63C:                             ; CODE XREF: sub_40B510+10F↑j
.text:0040B63C                 mov     [esp+2Ch+Block], 8 ; Size
.text:0040B643                 call    malloc
.text:0040B648                 mov     edx, eax
.text:0040B64A                 jmp     short loc_40B629
.text:0040B64A ; ---------------------------------------------------------------------------
.text:0040B64C                 align 10h
.text:0040B650
.text:0040B650 loc_40B650:                             ; CODE XREF: sub_40B510+98↑j
.text:0040B650                 inc     dword ptr [edi+0Ch]
.text:0040B653                 cmp     ebx, [esp+2Ch+var_14]
.text:0040B657                 mov     [esi], ebp
.text:0040B659                 jz      loc_40B5BD
.text:0040B65F                 mov     dword ptr [ebx], 0
.text:0040B665                 mov     esi, [edi+24h]
.text:0040B668                 mov     [ebx+4], esi
.text:0040B66B                 mov     [edi+24h], ebx
.text:0040B66E                 jmp     loc_40B5BD
.text:0040B673 ; ---------------------------------------------------------------------------
.text:0040B673
.text:0040B673 loc_40B673:                             ; CODE XREF: sub_40B510+87↑j
.text:0040B673                 call    abort
.text:0040B673 sub_40B510      endp
.text:0040B673
.text:0040B673 ; ---------------------------------------------------------------------------
.text:0040B678 flt_40B678      dd 0.1                  ; DATA XREF: sub_40B690+C3↓r
.text:0040B67C flt_40B67C      dd 4.2949673e9          ; DATA XREF: sub_40B690:loc_40B807↓r
.text:0040B680 flt_40B680      dd 0.89999998           ; DATA XREF: sub_40B690+D6↓r
.text:0040B684 flt_40B684      dd 1.1                  ; DATA XREF: sub_40B690+EA↓r
.text:0040B688                 align 10h
.text:0040B690
.text:0040B690 ; =============== S U B R O U T I N E =======================================
.text:0040B690
.text:0040B690
.text:0040B690 sub_40B690      proc near               ; CODE XREF: sub_407710+76↑p
.text:0040B690                                         ; sub_407870+7A↑p ...
.text:0040B690
.text:0040B690 var_34          = qword ptr -34h
.text:0040B690 Size            = dword ptr -2Ch
.text:0040B690 var_28          = dword ptr -28h
.text:0040B690 var_24          = dword ptr -24h
.text:0040B690 var_20          = dword ptr -20h
.text:0040B690 var_1C          = qword ptr -1Ch
.text:0040B690 var_14          = word ptr -14h
.text:0040B690 var_12          = word ptr -12h
.text:0040B690 var_10          = dword ptr -10h
.text:0040B690 var_8           = dword ptr -8
.text:0040B690 var_4           = dword ptr -4
.text:0040B690 arg_0           = dword ptr  4
.text:0040B690 arg_4           = dword ptr  8
.text:0040B690
.text:0040B690                 sub     esp, 2Ch
.text:0040B693                 mov     [esp+2Ch+var_8], ebx
.text:0040B697                 mov     ebx, [esp+2Ch+arg_4]
.text:0040B69B                 mov     [esp+2Ch+var_4], esi
.text:0040B69F                 mov     esi, [esp+2Ch+arg_0]
.text:0040B6A3                 test    ebx, ebx
.text:0040B6A5                 jz      loc_40B87A
.text:0040B6AB                 mov     [esp+2Ch+var_20], 0
.text:0040B6B3                 lea     edx, [esp+2Ch+var_10]
.text:0040B6B7                 mov     [esp+2Ch+var_24], edx
.text:0040B6BB                 mov     [esp+2Ch+var_28], ebx
.text:0040B6BF                 mov     [esp+2Ch+Size], esi
.text:0040B6C2                 call    sub_40BEF0
.text:0040B6C7                 test    eax, eax
.text:0040B6C9                 jz      short loc_40B6D7
.text:0040B6CB
.text:0040B6CB loc_40B6CB:                             ; CODE XREF: sub_40B690+64↓j
.text:0040B6CB                                         ; sub_40B690+7A↓j ...
.text:0040B6CB                 mov     ebx, [esp+2Ch+var_8]
.text:0040B6CF                 mov     esi, [esp+2Ch+var_4]
.text:0040B6D3                 add     esp, 2Ch
.text:0040B6D6                 retn
.text:0040B6D7 ; ---------------------------------------------------------------------------
.text:0040B6D7
.text:0040B6D7 loc_40B6D7:                             ; CODE XREF: sub_40B690+39↑j
.text:0040B6D7                 mov     eax, [esp+2Ch+var_10]
.text:0040B6DB                 mov     ecx, [eax]
.text:0040B6DD                 test    ecx, ecx
.text:0040B6DF                 jz      short loc_40B71C
.text:0040B6E1                 mov     eax, [esi+24h]
.text:0040B6E4                 test    eax, eax
.text:0040B6E6                 jz      short loc_40B70C
.text:0040B6E8                 mov     edx, [eax+4]
.text:0040B6EB                 mov     ecx, eax
.text:0040B6ED                 mov     [esi+24h], edx
.text:0040B6F0
.text:0040B6F0 loc_40B6F0:                             ; CODE XREF: sub_40B690+8A↓j
.text:0040B6F0                 xor     eax, eax
.text:0040B6F2                 test    ecx, ecx
.text:0040B6F4                 jz      short loc_40B6CB
.text:0040B6F6                 inc     dword ptr [esi+10h]
.text:0040B6F9                 mov     edx, [esp+2Ch+var_10]
.text:0040B6FD                 mov     [ecx], ebx
.text:0040B6FF                 mov     eax, [edx+4]
.text:0040B702                 mov     [ecx+4], eax
.text:0040B705                 mov     [edx+4], ecx
.text:0040B708
.text:0040B708 loc_40B708:                             ; CODE XREF: sub_40B690+1C2↓j
.text:0040B708                                         ; sub_40B690+1D8↓j
.text:0040B708                 mov     eax, ebx
.text:0040B70A                 jmp     short loc_40B6CB
.text:0040B70C ; ---------------------------------------------------------------------------
.text:0040B70C
.text:0040B70C loc_40B70C:                             ; CODE XREF: sub_40B690+56↑j
.text:0040B70C                 mov     [esp+2Ch+Size], 8 ; Size
.text:0040B713                 call    malloc
.text:0040B718                 mov     ecx, eax
.text:0040B71A                 jmp     short loc_40B6F0
.text:0040B71C ; ---------------------------------------------------------------------------
.text:0040B71C
.text:0040B71C loc_40B71C:                             ; CODE XREF: sub_40B690+4F↑j
.text:0040B71C                 inc     dword ptr [esi+0Ch]
.text:0040B71F                 xor     edx, edx
.text:0040B721                 mov     [eax], ebx
.text:0040B723                 xor     eax, eax
.text:0040B725                 mov     ecx, [esi+0Ch]
.text:0040B728                 inc     dword ptr [esi+10h]
.text:0040B72B                 push    eax
.text:0040B72C                 push    ecx
.text:0040B72D                 mov     eax, [esi+8]
.text:0040B730                 mov     ecx, [esi+14h]
.text:0040B733                 fild    [esp+34h+var_34]
.text:0040B736                 add     esp, 8
.text:0040B739                 push    edx
.text:0040B73A                 push    eax
.text:0040B73B                 fild    [esp+34h+var_34]
.text:0040B73E                 add     esp, 8
.text:0040B741                 fld     dword ptr [ecx+8]
.text:0040B744                 fmul    st(1), st
.text:0040B746                 fxch    st(2)
.text:0040B748                 fucompp
.text:0040B74A                 fnstsw  ax
.text:0040B74C                 sahf
.text:0040B74D                 jbe     loc_40B866
.text:0040B753                 fld     ds:flt_40B678
.text:0040B759                 fxch    st(1)
.text:0040B75B                 fucom   st(1)
.text:0040B75D                 fnstsw  ax
.text:0040B75F                 sahf
.text:0040B760                 jbe     loc_40B86D
.text:0040B766                 fld     ds:flt_40B680
.text:0040B76C                 fucomp  st(1)
.text:0040B76E                 fnstsw  ax
.text:0040B770                 sahf
.text:0040B771                 jbe     loc_40B86D
.text:0040B777                 fld     dword ptr [ecx+0Ch]
.text:0040B77A                 fld     ds:flt_40B684
.text:0040B780                 fxch    st(1)
.text:0040B782                 fucompp
.text:0040B784                 fnstsw  ax
.text:0040B786                 sahf
.text:0040B787                 jbe     loc_40B86D
.text:0040B78D                 fld     dword ptr [ecx]
.text:0040B78F                 fldz
.text:0040B791                 fxch    st(1)
.text:0040B793                 fucom   st(1)
.text:0040B795                 fnstsw  ax
.text:0040B797                 fstp    st(1)
.text:0040B799                 sahf
.text:0040B79A                 jb      loc_40B876
.text:0040B7A0                 faddp   st(2), st
.text:0040B7A2                 fld     dword ptr [ecx+4]
.text:0040B7A5                 fucom   st(2)
.text:0040B7A7                 fnstsw  ax
.text:0040B7A9                 sahf
.text:0040B7AA                 jbe     loc_40B876
.text:0040B7B0                 fld1
.text:0040B7B2                 fucompp
.text:0040B7B4                 fnstsw  ax
.text:0040B7B6                 sahf
.text:0040B7B7                 jb      loc_40B86D
.text:0040B7BD                 fucompp
.text:0040B7BF                 fnstsw  ax
.text:0040B7C1                 sahf
.text:0040B7C2                 ja      short loc_40B7D0
.text:0040B7C4
.text:0040B7C4 loc_40B7C4:                             ; CODE XREF: sub_40B690+1E1↓j
.text:0040B7C4                 mov     dword ptr [esi+14h], offset dword_40B110
.text:0040B7CB                 mov     ecx, offset dword_40B110
.text:0040B7D0
.text:0040B7D0 loc_40B7D0:                             ; CODE XREF: sub_40B690+132↑j
.text:0040B7D0                 mov     eax, [esi+0Ch]
.text:0040B7D3                 xor     edx, edx
.text:0040B7D5                 push    edx
.text:0040B7D6                 xor     edx, edx
.text:0040B7D8                 push    eax
.text:0040B7D9                 mov     eax, [esi+8]
.text:0040B7DC                 fild    [esp+34h+var_34]
.text:0040B7DF                 add     esp, 8
.text:0040B7E2                 push    edx
.text:0040B7E3                 push    eax
.text:0040B7E4                 fild    [esp+34h+var_34]
.text:0040B7E7                 add     esp, 8
.text:0040B7EA                 fld     dword ptr [ecx+8]
.text:0040B7ED                 fld     st
.text:0040B7EF                 fmul    st, st(2)
.text:0040B7F1                 fxch    st(3)
.text:0040B7F3                 fucomp  st(3)
.text:0040B7F5                 fnstsw  ax
.text:0040B7F7                 fstp    st(2)
.text:0040B7F9                 sahf
.text:0040B7FA                 jbe     short loc_40B864
.text:0040B7FC                 cmp     byte ptr [ecx+10h], 0
.text:0040B800                 fmul    dword ptr [ecx+0Ch]
.text:0040B803                 jnz     short loc_40B860
.text:0040B805                 fmulp   st(1), st
.text:0040B807
.text:0040B807 loc_40B807:                             ; CODE XREF: sub_40B690+1D2↓j
.text:0040B807                 fld     ds:flt_40B67C
.text:0040B80D                 fxch    st(1)
.text:0040B80F                 fucom   st(1)
.text:0040B811                 fnstsw  ax
.text:0040B813                 fstp    st(1)
.text:0040B815                 sahf
.text:0040B816                 jnb     short loc_40B857
.text:0040B818                 fnstcw  [esp+2Ch+var_12]
.text:0040B81C                 movzx   edx, [esp+2Ch+var_12]
.text:0040B821                 mov     [esp+2Ch+Size], esi
.text:0040B824                 or      dx, 0C00h
.text:0040B829                 mov     [esp+2Ch+var_14], dx
.text:0040B82E                 fldcw   [esp+2Ch+var_14]
.text:0040B832                 fistp   [esp+2Ch+var_1C]
.text:0040B836                 fldcw   [esp+2Ch+var_12]
.text:0040B83A                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:0040B83E                 mov     [esp+2Ch+var_28], ecx
.text:0040B842                 call    sub_40B510
.text:0040B847                 test    al, al
.text:0040B849                 setz    dl
.text:0040B84C                 movzx   esi, dl
.text:0040B84F                 dec     esi
.text:0040B850                 and     ebx, esi
.text:0040B852                 jmp     loc_40B708
.text:0040B857 ; ---------------------------------------------------------------------------
.text:0040B857
.text:0040B857 loc_40B857:                             ; CODE XREF: sub_40B690+186↑j
.text:0040B857                 fstp    st
.text:0040B859                 xor     eax, eax
.text:0040B85B                 jmp     loc_40B6CB
.text:0040B860 ; ---------------------------------------------------------------------------
.text:0040B860
.text:0040B860 loc_40B860:                             ; CODE XREF: sub_40B690+173↑j
.text:0040B860                 fstp    st(1)
.text:0040B862                 jmp     short loc_40B807
.text:0040B864 ; ---------------------------------------------------------------------------
.text:0040B864
.text:0040B864 loc_40B864:                             ; CODE XREF: sub_40B690+16A↑j
.text:0040B864                 fstp    st
.text:0040B866
.text:0040B866 loc_40B866:                             ; CODE XREF: sub_40B690+BD↑j
.text:0040B866                 fstp    st
.text:0040B868                 jmp     loc_40B708
.text:0040B86D ; ---------------------------------------------------------------------------
.text:0040B86D
.text:0040B86D loc_40B86D:                             ; CODE XREF: sub_40B690+D0↑j
.text:0040B86D                                         ; sub_40B690+E1↑j ...
.text:0040B86D                 fstp    st
.text:0040B86F                 fstp    st
.text:0040B871                 jmp     loc_40B7C4
.text:0040B876 ; ---------------------------------------------------------------------------
.text:0040B876
.text:0040B876 loc_40B876:                             ; CODE XREF: sub_40B690+10A↑j
.text:0040B876                                         ; sub_40B690+11A↑j
.text:0040B876                 fstp    st
.text:0040B878                 jmp     short loc_40B86D
.text:0040B87A ; ---------------------------------------------------------------------------
.text:0040B87A
.text:0040B87A loc_40B87A:                             ; CODE XREF: sub_40B690+15↑j
.text:0040B87A                 call    abort
.text:0040B87A sub_40B690      endp
.text:0040B87A
.text:0040B87A ; ---------------------------------------------------------------------------
.text:0040B87F                 align 10h
.text:0040B880                 mov     edx, [esp+4]
.text:0040B884                 mov     eax, [edx+8]
.text:0040B887                 retn
.text:0040B887 ; ---------------------------------------------------------------------------
.text:0040B888                 align 10h
.text:0040B890                 mov     edx, [esp+4]
.text:0040B894                 mov     eax, [edx+0Ch]
.text:0040B897                 retn
.text:0040B897 ; ---------------------------------------------------------------------------
.text:0040B898                 align 10h
.text:0040B8A0                 mov     edx, [esp+4]
.text:0040B8A4                 mov     eax, [edx+10h]
.text:0040B8A7                 retn
.text:0040B8A7 ; ---------------------------------------------------------------------------
.text:0040B8A8                 align 10h
.text:0040B8B0                 push    esi
.text:0040B8B1                 xor     esi, esi
.text:0040B8B3                 push    ebx
.text:0040B8B4                 mov     edx, [esp+0Ch]
.text:0040B8B8                 mov     ecx, [edx]
.text:0040B8BA                 mov     ebx, [edx+4]
.text:0040B8BD                 cmp     ecx, ebx
.text:0040B8BF                 jnb     short loc_40B907
.text:0040B8C1                 jmp     short loc_40B8D0
.text:0040B8C1 ; ---------------------------------------------------------------------------
.text:0040B8C3                 align 10h
.text:0040B8D0
.text:0040B8D0 loc_40B8D0:                             ; CODE XREF: .text:0040B8C1↑j
.text:0040B8D0                                         ; .text:0040B905↓j
.text:0040B8D0                 mov     edx, [ecx]
.text:0040B8D2                 test    edx, edx
.text:0040B8D4                 jz      short loc_40B900
.text:0040B8D6                 mov     eax, [ecx+4]
.text:0040B8D9                 mov     edx, 1
.text:0040B8DE                 test    eax, eax
.text:0040B8E0                 jz      short loc_40B8F8
.text:0040B8E2                 lea     esi, [esi+0]
.text:0040B8E9                 lea     edi, [edi+0]
.text:0040B8F0
.text:0040B8F0 loc_40B8F0:                             ; CODE XREF: .text:0040B8F6↓j
.text:0040B8F0                 mov     eax, [eax+4]
.text:0040B8F3                 inc     edx
.text:0040B8F4                 test    eax, eax
.text:0040B8F6                 jnz     short loc_40B8F0
.text:0040B8F8
.text:0040B8F8 loc_40B8F8:                             ; CODE XREF: .text:0040B8E0↑j
.text:0040B8F8                 cmp     edx, esi
.text:0040B8FA                 jbe     short loc_40B900
.text:0040B8FC                 mov     esi, edx
.text:0040B8FE                 mov     esi, esi
.text:0040B900
.text:0040B900 loc_40B900:                             ; CODE XREF: .text:0040B8D4↑j
.text:0040B900                                         ; .text:0040B8FA↑j
.text:0040B900                 add     ecx, 8
.text:0040B903                 cmp     ecx, ebx
.text:0040B905                 jb      short loc_40B8D0
.text:0040B907
.text:0040B907 loc_40B907:                             ; CODE XREF: .text:0040B8BF↑j
.text:0040B907                 pop     ebx
.text:0040B908                 mov     eax, esi
.text:0040B90A                 pop     esi
.text:0040B90B                 retn
.text:0040B90B ; ---------------------------------------------------------------------------
.text:0040B90C                 align 10h
.text:0040B910                 push    edi
.text:0040B911                 xor     ecx, ecx
.text:0040B913                 push    esi
.text:0040B914                 xor     esi, esi
.text:0040B916                 push    ebx
.text:0040B917                 mov     edi, [esp+10h]
.text:0040B91B                 mov     edx, [edi]
.text:0040B91D                 mov     ebx, [edi+4]
.text:0040B920                 cmp     edx, ebx
.text:0040B922                 jnb     short loc_40B94F
.text:0040B924                 lea     esi, [esi+0]
.text:0040B92A                 lea     edi, [edi+0]
.text:0040B930
.text:0040B930 loc_40B930:                             ; CODE XREF: .text:0040B94D↓j
.text:0040B930                 mov     eax, [edx]
.text:0040B932                 test    eax, eax
.text:0040B934                 jz      short loc_40B948
.text:0040B936                 mov     eax, [edx+4]
.text:0040B939                 inc     esi
.text:0040B93A                 inc     ecx
.text:0040B93B                 test    eax, eax
.text:0040B93D                 jz      short loc_40B948
.text:0040B93F                 nop
.text:0040B940
.text:0040B940 loc_40B940:                             ; CODE XREF: .text:0040B946↓j
.text:0040B940                 mov     eax, [eax+4]
.text:0040B943                 inc     ecx
.text:0040B944                 test    eax, eax
.text:0040B946                 jnz     short loc_40B940
.text:0040B948
.text:0040B948 loc_40B948:                             ; CODE XREF: .text:0040B934↑j
.text:0040B948                                         ; .text:0040B93D↑j
.text:0040B948                 add     edx, 8
.text:0040B94B                 cmp     edx, ebx
.text:0040B94D                 jb      short loc_40B930
.text:0040B94F
.text:0040B94F loc_40B94F:                             ; CODE XREF: .text:0040B922↑j
.text:0040B94F                 cmp     esi, [edi+0Ch]
.text:0040B952                 jz      short loc_40B95A
.text:0040B954
.text:0040B954 loc_40B954:                             ; CODE XREF: .text:0040B95D↓j
.text:0040B954                 xor     eax, eax
.text:0040B956
.text:0040B956 loc_40B956:                             ; CODE XREF: .text:0040B964↓j
.text:0040B956                 pop     ebx
.text:0040B957                 pop     esi
.text:0040B958                 pop     edi
.text:0040B959                 retn
.text:0040B95A ; ---------------------------------------------------------------------------
.text:0040B95A
.text:0040B95A loc_40B95A:                             ; CODE XREF: .text:0040B952↑j
.text:0040B95A                 cmp     ecx, [edi+10h]
.text:0040B95D                 jnz     short loc_40B954
.text:0040B95F                 mov     eax, 1
.text:0040B964                 jmp     short loc_40B956
.text:0040B964 ; ---------------------------------------------------------------------------
.text:0040B966 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:0040B966                                         ; DATA XREF: .text:0040BA5E↓o
.text:0040B97E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:0040B97E                                         ; DATA XREF: .text:0040BA76↓o
.text:0040B996                 db 1Ah dup(90h)
.text:0040B9B0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:0040B9B0                                         ; DATA XREF: .text:0040BAB0↓o
.text:0040B9D1 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:0040B9D1                                         ; DATA XREF: .text:0040BACA↓o
.text:0040B9E9                 db 8Dh, 76h, 0
.text:0040B9EC flt_40B9EC      dd 100.0                ; DATA XREF: .text:0040BAA3↓r
.text:0040B9F0 ; ---------------------------------------------------------------------------
.text:0040B9F0                 push    ebp
.text:0040B9F1                 push    edi
.text:0040B9F2                 push    esi
.text:0040B9F3                 xor     esi, esi
.text:0040B9F5                 push    ebx
.text:0040B9F6                 sub     esp, 1Ch
.text:0040B9F9                 mov     ebx, [esp+30h]
.text:0040B9FD                 mov     edi, [esp+34h]
.text:0040BA01                 mov     ecx, [ebx+10h]
.text:0040BA04                 mov     eax, [ebx+0Ch]
.text:0040BA07                 mov     ebp, [ebx+8]
.text:0040BA0A                 mov     [esp+18h], ecx
.text:0040BA0E                 mov     ecx, [ebx]
.text:0040BA10                 mov     [esp+14h], eax
.text:0040BA14                 mov     eax, [ebx+4]
.text:0040BA17                 cmp     ecx, eax
.text:0040BA19                 jnb     short loc_40BA57
.text:0040BA1B                 mov     ebx, eax
.text:0040BA1D                 lea     esi, [esi+0]
.text:0040BA20
.text:0040BA20 loc_40BA20:                             ; CODE XREF: .text:0040BA55↓j
.text:0040BA20                 mov     edx, [ecx]
.text:0040BA22                 test    edx, edx
.text:0040BA24                 jz      short loc_40BA50
.text:0040BA26                 mov     eax, [ecx+4]
.text:0040BA29                 mov     edx, 1
.text:0040BA2E                 test    eax, eax
.text:0040BA30                 jz      short loc_40BA48
.text:0040BA32                 lea     esi, [esi+0]
.text:0040BA39                 lea     edi, [edi+0]
.text:0040BA40
.text:0040BA40 loc_40BA40:                             ; CODE XREF: .text:0040BA46↓j
.text:0040BA40                 mov     eax, [eax+4]
.text:0040BA43                 inc     edx
.text:0040BA44                 test    eax, eax
.text:0040BA46                 jnz     short loc_40BA40
.text:0040BA48
.text:0040BA48 loc_40BA48:                             ; CODE XREF: .text:0040BA30↑j
.text:0040BA48                 cmp     edx, esi
.text:0040BA4A                 jbe     short loc_40BA50
.text:0040BA4C                 mov     esi, edx
.text:0040BA4E                 mov     esi, esi
.text:0040BA50
.text:0040BA50 loc_40BA50:                             ; CODE XREF: .text:0040BA24↑j
.text:0040BA50                                         ; .text:0040BA4A↑j
.text:0040BA50                 add     ecx, 8
.text:0040BA53                 cmp     ecx, ebx
.text:0040BA55                 jb      short loc_40BA20
.text:0040BA57
.text:0040BA57 loc_40BA57:                             ; CODE XREF: .text:0040BA19↑j
.text:0040BA57                 mov     [esp], edi
.text:0040BA5A                 mov     edx, [esp+18h]
.text:0040BA5E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:0040BA66                 mov     [esp+8], edx
.text:0040BA6A                 call    fprintf
.text:0040BA6F                 mov     [esp+8], ebp
.text:0040BA73                 mov     [esp], edi
.text:0040BA76                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:0040BA7E                 call    fprintf
.text:0040BA83                 mov     ebx, [esp+14h]
.text:0040BA87                 xor     eax, eax
.text:0040BA89                 mov     ecx, ebp
.text:0040BA8B                 push    eax
.text:0040BA8C                 xor     ebp, ebp
.text:0040BA8E                 push    ebx
.text:0040BA8F                 fild    qword ptr [esp]
.text:0040BA92                 add     esp, 8
.text:0040BA95                 push    ebp
.text:0040BA96                 push    ecx
.text:0040BA97                 fild    qword ptr [esp]
.text:0040BA9A                 fxch    st(1)
.text:0040BA9C                 add     esp, 8
.text:0040BA9F                 mov     ebx, [esp+14h]
.text:0040BAA3                 fmul    ds:flt_40B9EC
.text:0040BAA9                 mov     [esp], edi
.text:0040BAAC                 mov     [esp+8], ebx
.text:0040BAB0                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0040BAB8                 fdivrp  st(1), st
.text:0040BABA                 fstp    qword ptr [esp+0Ch]
.text:0040BABE                 call    fprintf
.text:0040BAC3                 mov     [esp+8], esi
.text:0040BAC7                 mov     [esp], edi
.text:0040BACA                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:0040BAD2                 call    fprintf
.text:0040BAD7                 add     esp, 1Ch
.text:0040BADA                 pop     ebx
.text:0040BADB                 pop     esi
.text:0040BADC                 pop     edi
.text:0040BADD                 pop     ebp
.text:0040BADE                 retn
.text:0040BADE ; ---------------------------------------------------------------------------
.text:0040BADF                 align 10h
.text:0040BAE0
.text:0040BAE0 ; =============== S U B R O U T I N E =======================================
.text:0040BAE0
.text:0040BAE0
.text:0040BAE0 sub_40BAE0      proc near               ; CODE XREF: sub_404B50+16C↑p
.text:0040BAE0                                         ; sub_404B50+13B5↑p ...
.text:0040BAE0
.text:0040BAE0 var_1C          = dword ptr -1Ch
.text:0040BAE0 var_18          = dword ptr -18h
.text:0040BAE0 arg_0           = dword ptr  4
.text:0040BAE0 arg_4           = dword ptr  8
.text:0040BAE0
.text:0040BAE0                 push    edi
.text:0040BAE1                 push    esi
.text:0040BAE2                 push    ebx
.text:0040BAE3                 sub     esp, 10h
.text:0040BAE6                 mov     esi, [esp+1Ch+arg_0]
.text:0040BAEA                 mov     edi, [esp+1Ch+arg_4]
.text:0040BAEE                 mov     edx, [esi+8]
.text:0040BAF1                 mov     [esp+1Ch+var_1C], edi
.text:0040BAF4                 mov     [esp+1Ch+var_18], edx
.text:0040BAF8                 call    dword ptr [esi+18h]
.text:0040BAFB                 mov     ecx, [esi]
.text:0040BAFD                 lea     eax, [ecx+eax*8]
.text:0040BB00                 cmp     eax, [esi+4]
.text:0040BB03                 jnb     short loc_40BB44
.text:0040BB05                 mov     ecx, [eax]
.text:0040BB07                 test    ecx, ecx
.text:0040BB09                 jz      short loc_40BB37
.text:0040BB0B                 test    eax, eax
.text:0040BB0D                 mov     ebx, eax
.text:0040BB0F                 jz      short loc_40BB37
.text:0040BB11                 jmp     short loc_40BB20
.text:0040BB11 ; ---------------------------------------------------------------------------
.text:0040BB13                 align 10h
.text:0040BB20
.text:0040BB20 loc_40BB20:                             ; CODE XREF: sub_40BAE0+31↑j
.text:0040BB20                                         ; sub_40BAE0+55↓j
.text:0040BB20                 mov     edx, [ebx]
.text:0040BB22                 mov     [esp+1Ch+var_1C], edi
.text:0040BB25                 mov     [esp+1Ch+var_18], edx
.text:0040BB29                 call    dword ptr [esi+1Ch]
.text:0040BB2C                 test    al, al
.text:0040BB2E                 jnz     short loc_40BB40
.text:0040BB30                 mov     ebx, [ebx+4]
.text:0040BB33                 test    ebx, ebx
.text:0040BB35                 jnz     short loc_40BB20
.text:0040BB37
.text:0040BB37 loc_40BB37:                             ; CODE XREF: sub_40BAE0+29↑j
.text:0040BB37                                         ; sub_40BAE0+2F↑j
.text:0040BB37                 xor     eax, eax
.text:0040BB39
.text:0040BB39 loc_40BB39:                             ; CODE XREF: sub_40BAE0+62↓j
.text:0040BB39                 add     esp, 10h
.text:0040BB3C                 pop     ebx
.text:0040BB3D                 pop     esi
.text:0040BB3E                 pop     edi
.text:0040BB3F                 retn
.text:0040BB40 ; ---------------------------------------------------------------------------
.text:0040BB40
.text:0040BB40 loc_40BB40:                             ; CODE XREF: sub_40BAE0+4E↑j
.text:0040BB40                 mov     eax, [ebx]
.text:0040BB42                 jmp     short loc_40BB39
.text:0040BB44 ; ---------------------------------------------------------------------------
.text:0040BB44
.text:0040BB44 loc_40BB44:                             ; CODE XREF: sub_40BAE0+23↑j
.text:0040BB44                 call    abort
.text:0040BB44 sub_40BAE0      endp
.text:0040BB44
.text:0040BB44 ; ---------------------------------------------------------------------------
.text:0040BB49                 align 10h
.text:0040BB50                 sub     esp, 0Ch
.text:0040BB53                 mov     eax, [esp+10h]
.text:0040BB57                 mov     edx, [eax+10h]
.text:0040BB5A                 test    edx, edx
.text:0040BB5C                 jz      short loc_40BB83
.text:0040BB5E                 mov     edx, [eax]
.text:0040BB60                 mov     ecx, [eax+4]
.text:0040BB63                 lea     esi, [esi+0]
.text:0040BB69                 lea     edi, [edi+0]
.text:0040BB70
.text:0040BB70 loc_40BB70:                             ; CODE XREF: .text:0040BB7D↓j
.text:0040BB70                 cmp     edx, ecx
.text:0040BB72                 jnb     short loc_40BB87
.text:0040BB74                 mov     eax, [edx]
.text:0040BB76                 test    eax, eax
.text:0040BB78                 jnz     short loc_40BB7F
.text:0040BB7A                 add     edx, 8
.text:0040BB7D                 jmp     short loc_40BB70
.text:0040BB7F ; ---------------------------------------------------------------------------
.text:0040BB7F
.text:0040BB7F loc_40BB7F:                             ; CODE XREF: .text:0040BB78↑j
.text:0040BB7F                                         ; .text:0040BB85↓j
.text:0040BB7F                 add     esp, 0Ch
.text:0040BB82                 retn
.text:0040BB83 ; ---------------------------------------------------------------------------
.text:0040BB83
.text:0040BB83 loc_40BB83:                             ; CODE XREF: .text:0040BB5C↑j
.text:0040BB83                 xor     eax, eax
.text:0040BB85                 jmp     short loc_40BB7F
.text:0040BB87 ; ---------------------------------------------------------------------------
.text:0040BB87
.text:0040BB87 loc_40BB87:                             ; CODE XREF: .text:0040BB72↑j
.text:0040BB87                 call    abort
.text:0040BB87 ; ---------------------------------------------------------------------------
.text:0040BB8C                 align 10h
.text:0040BB90                 push    esi
.text:0040BB91                 push    ebx
.text:0040BB92                 sub     esp, 14h
.text:0040BB95                 mov     ebx, [esp+20h]
.text:0040BB99                 mov     esi, [esp+24h]
.text:0040BB9D                 mov     edx, [ebx+8]
.text:0040BBA0                 mov     [esp], esi
.text:0040BBA3                 mov     [esp+4], edx
.text:0040BBA7                 call    dword ptr [ebx+18h]
.text:0040BBAA                 mov     ecx, [ebx]
.text:0040BBAC                 lea     edx, [ecx+eax*8]
.text:0040BBAF                 mov     ecx, [ebx+4]
.text:0040BBB2                 cmp     edx, ecx
.text:0040BBB4                 jnb     short loc_40BC00
.text:0040BBB6                 test    edx, edx
.text:0040BBB8                 mov     eax, edx
.text:0040BBBA                 jz      short loc_40BBCB
.text:0040BBBC                 lea     esi, [esi+0]
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: .text:0040BBC9↓j
.text:0040BBC0                 cmp     [eax], esi
.text:0040BBC2                 jz      short loc_40BBF5
.text:0040BBC4                 mov     eax, [eax+4]
.text:0040BBC7
.text:0040BBC7 loc_40BBC7:                             ; CODE XREF: .text:0040BBFA↓j
.text:0040BBC7                 test    eax, eax
.text:0040BBC9                 jnz     short loc_40BBC0
.text:0040BBCB
.text:0040BBCB loc_40BBCB:                             ; CODE XREF: .text:0040BBBA↑j
.text:0040BBCB                 add     edx, 8
.text:0040BBCE                 cmp     edx, ecx
.text:0040BBD0                 jnb     short loc_40BBED
.text:0040BBD2                 lea     esi, [esi+0]
.text:0040BBD9                 lea     edi, [edi+0]
.text:0040BBE0
.text:0040BBE0 loc_40BBE0:                             ; CODE XREF: .text:0040BBEB↓j
.text:0040BBE0                 mov     eax, [edx]
.text:0040BBE2                 test    eax, eax
.text:0040BBE4                 jnz     short loc_40BBEF
.text:0040BBE6                 add     edx, 8
.text:0040BBE9                 cmp     edx, ecx
.text:0040BBEB                 jb      short loc_40BBE0
.text:0040BBED
.text:0040BBED loc_40BBED:                             ; CODE XREF: .text:0040BBD0↑j
.text:0040BBED                 xor     eax, eax
.text:0040BBEF
.text:0040BBEF loc_40BBEF:                             ; CODE XREF: .text:0040BBE4↑j
.text:0040BBEF                                         ; .text:0040BBFE↓j
.text:0040BBEF                 add     esp, 14h
.text:0040BBF2                 pop     ebx
.text:0040BBF3                 pop     esi
.text:0040BBF4                 retn
.text:0040BBF5 ; ---------------------------------------------------------------------------
.text:0040BBF5
.text:0040BBF5 loc_40BBF5:                             ; CODE XREF: .text:0040BBC2↑j
.text:0040BBF5                 mov     eax, [eax+4]
.text:0040BBF8                 test    eax, eax
.text:0040BBFA                 jz      short loc_40BBC7
.text:0040BBFC                 mov     eax, [eax]
.text:0040BBFE                 jmp     short loc_40BBEF
.text:0040BC00 ; ---------------------------------------------------------------------------
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: .text:0040BBB4↑j
.text:0040BC00                 call    abort
.text:0040BC00 ; ---------------------------------------------------------------------------
.text:0040BC05                 align 10h
.text:0040BC10                 push    ebp
.text:0040BC11                 xor     ecx, ecx
.text:0040BC13                 push    edi
.text:0040BC14                 push    esi
.text:0040BC15                 push    ebx
.text:0040BC16                 mov     edx, [esp+14h]
.text:0040BC1A                 mov     ebp, [esp+18h]
.text:0040BC1E                 mov     edi, [esp+1Ch]
.text:0040BC22                 mov     ebx, [edx]
.text:0040BC24                 mov     esi, [edx+4]
.text:0040BC27                 cmp     ebx, esi
.text:0040BC29                 jnb     short loc_40BC60
.text:0040BC2B                 nop
.text:0040BC2C                 lea     esi, [esi+0]
.text:0040BC30
.text:0040BC30 loc_40BC30:                             ; CODE XREF: .text:0040BC57↓j
.text:0040BC30                 mov     edx, [ebx]
.text:0040BC32                 test    edx, edx
.text:0040BC34                 jz      short loc_40BC52
.text:0040BC36                 mov     edx, ebx
.text:0040BC38                 nop
.text:0040BC39                 lea     esi, [esi+0]
.text:0040BC40
.text:0040BC40 loc_40BC40:                             ; CODE XREF: .text:0040BC50↓j
.text:0040BC40                 cmp     ecx, edi
.text:0040BC42                 jnb     short loc_40BC60
.text:0040BC44                 mov     eax, [edx]
.text:0040BC46                 mov     edx, [edx+4]
.text:0040BC49                 mov     [ebp+ecx*4+0], eax
.text:0040BC4D                 inc     ecx
.text:0040BC4E                 test    edx, edx
.text:0040BC50                 jnz     short loc_40BC40
.text:0040BC52
.text:0040BC52 loc_40BC52:                             ; CODE XREF: .text:0040BC34↑j
.text:0040BC52                 add     ebx, 8
.text:0040BC55                 cmp     ebx, esi
.text:0040BC57                 jb      short loc_40BC30
.text:0040BC59                 lea     esi, [esi+0]
.text:0040BC60
.text:0040BC60 loc_40BC60:                             ; CODE XREF: .text:0040BC29↑j
.text:0040BC60                                         ; .text:0040BC42↑j
.text:0040BC60                 pop     ebx
.text:0040BC61                 mov     eax, ecx
.text:0040BC63                 pop     esi
.text:0040BC64                 pop     edi
.text:0040BC65                 pop     ebp
.text:0040BC66                 retn
.text:0040BC66 ; ---------------------------------------------------------------------------
.text:0040BC67                 align 10h
.text:0040BC70                 push    ebp
.text:0040BC71                 push    edi
.text:0040BC72                 xor     edi, edi
.text:0040BC74                 push    esi
.text:0040BC75                 push    ebx
.text:0040BC76                 sub     esp, 0Ch
.text:0040BC79                 mov     edx, [esp+20h]
.text:0040BC7D                 mov     ebp, [esp+28h]
.text:0040BC81                 mov     esi, [edx]
.text:0040BC83                 mov     eax, [edx+4]
.text:0040BC86                 cmp     esi, eax
.text:0040BC88                 jnb     short loc_40BCD0
.text:0040BC8A                 lea     esi, [esi+0]
.text:0040BC90
.text:0040BC90 loc_40BC90:                             ; CODE XREF: .text:0040BCC5↓j
.text:0040BC90                 mov     ecx, [esi]
.text:0040BC92                 test    ecx, ecx
.text:0040BC94                 jz      short loc_40BCC0
.text:0040BC96                 mov     ebx, esi
.text:0040BC98                 nop
.text:0040BC99                 lea     esi, [esi+0]
.text:0040BCA0
.text:0040BCA0 loc_40BCA0:                             ; CODE XREF: .text:0040BCB7↓j
.text:0040BCA0                 mov     [esp+4], ebp
.text:0040BCA4                 mov     edx, [ebx]
.text:0040BCA6                 mov     [esp], edx
.text:0040BCA9                 call    dword ptr [esp+24h]
.text:0040BCAD                 test    al, al
.text:0040BCAF                 jz      short loc_40BCD0
.text:0040BCB1                 mov     ebx, [ebx+4]
.text:0040BCB4                 inc     edi
.text:0040BCB5                 test    ebx, ebx
.text:0040BCB7                 jnz     short loc_40BCA0
.text:0040BCB9                 mov     ebx, [esp+20h]
.text:0040BCBD                 mov     eax, [ebx+4]
.text:0040BCC0
.text:0040BCC0 loc_40BCC0:                             ; CODE XREF: .text:0040BC94↑j
.text:0040BCC0                 add     esi, 8
.text:0040BCC3                 cmp     esi, eax
.text:0040BCC5                 jb      short loc_40BC90
.text:0040BCC7                 mov     esi, esi
.text:0040BCC9                 lea     edi, [edi+0]
.text:0040BCD0
.text:0040BCD0 loc_40BCD0:                             ; CODE XREF: .text:0040BC88↑j
.text:0040BCD0                                         ; .text:0040BCAF↑j
.text:0040BCD0                 add     esp, 0Ch
.text:0040BCD3                 mov     eax, edi
.text:0040BCD5                 pop     ebx
.text:0040BCD6                 pop     esi
.text:0040BCD7                 pop     edi
.text:0040BCD8                 pop     ebp
.text:0040BCD9                 retn
.text:0040BCD9 ; ---------------------------------------------------------------------------
.text:0040BCDA                 align 10h
.text:0040BCE0                 push    esi
.text:0040BCE1                 push    ebx
.text:0040BCE2                 mov     ecx, [esp+0Ch]
.text:0040BCE6                 xor     ebx, ebx
.text:0040BCE8                 mov     esi, [esp+10h]
.text:0040BCEC                 movzx   edx, byte ptr [ecx]
.text:0040BCEF                 test    dl, dl
.text:0040BCF1                 jz      short loc_40BD1A
.text:0040BCF3                 lea     esi, [esi+0]
.text:0040BCF9                 lea     edi, [edi+0]
.text:0040BD00
.text:0040BD00 loc_40BD00:                             ; CODE XREF: .text:0040BD18↓j
.text:0040BD00                 mov     eax, ebx
.text:0040BD02                 inc     ecx
.text:0040BD03                 shl     eax, 5
.text:0040BD06                 sub     eax, ebx
.text:0040BD08                 movzx   ebx, dl
.text:0040BD0B                 add     eax, ebx
.text:0040BD0D                 xor     edx, edx
.text:0040BD0F                 div     esi
.text:0040BD11                 mov     ebx, edx
.text:0040BD13                 movzx   edx, byte ptr [ecx]
.text:0040BD16                 test    dl, dl
.text:0040BD18                 jnz     short loc_40BD00
.text:0040BD1A
.text:0040BD1A loc_40BD1A:                             ; CODE XREF: .text:0040BCF1↑j
.text:0040BD1A                 mov     eax, ebx
.text:0040BD1C                 pop     ebx
.text:0040BD1D                 pop     esi
.text:0040BD1E                 retn
.text:0040BD1E ; ---------------------------------------------------------------------------
.text:0040BD1F                 align 10h
.text:0040BD20                 mov     ecx, [esp+4]
.text:0040BD24                 mov     edx, ds:dword_40B110
.text:0040BD2A                 mov     [ecx], edx
.text:0040BD2C                 mov     edx, ds:dword_40B114
.text:0040BD32                 mov     [ecx+4], edx
.text:0040BD35                 mov     edx, ds:dword_40B114+4
.text:0040BD3B                 mov     [ecx+8], edx
.text:0040BD3E                 mov     edx, ds:dword_40B114+8
.text:0040BD44                 mov     [ecx+0Ch], edx
.text:0040BD47                 mov     edx, ds:dword_40B114+0Ch
.text:0040BD4D                 mov     [ecx+10h], edx
.text:0040BD50                 retn
.text:0040BD50 ; ---------------------------------------------------------------------------
.text:0040BD51                 align 4
.text:0040BD54 flt_40BD54      dd 0.1                  ; DATA XREF: sub_40BD60+79↓r
.text:0040BD58 flt_40BD58      dd 0.89999998           ; DATA XREF: sub_40BD60+8D↓r
.text:0040BD5C flt_40BD5C      dd 1.1                  ; DATA XREF: sub_40BD60+A1↓r
.text:0040BD60
.text:0040BD60 ; =============== S U B R O U T I N E =======================================
.text:0040BD60
.text:0040BD60
.text:0040BD60 sub_40BD60      proc near               ; CODE XREF: sub_407800+40↑p
.text:0040BD60
.text:0040BD60 var_34          = qword ptr -34h
.text:0040BD60 var_2C          = dword ptr -2Ch
.text:0040BD60 var_28          = dword ptr -28h
.text:0040BD60 var_24          = dword ptr -24h
.text:0040BD60 var_20          = dword ptr -20h
.text:0040BD60 var_1C          = qword ptr -1Ch
.text:0040BD60 var_14          = word ptr -14h
.text:0040BD60 var_12          = word ptr -12h
.text:0040BD60 var_10          = dword ptr -10h
.text:0040BD60 arg_0           = dword ptr  4
.text:0040BD60 arg_4           = dword ptr  8
.text:0040BD60
.text:0040BD60                 push    esi
.text:0040BD61                 push    ebx
.text:0040BD62                 sub     esp, 24h
.text:0040BD65                 lea     edx, [esp+2Ch+var_10]
.text:0040BD69                 mov     [esp+2Ch+var_24], edx
.text:0040BD6D                 mov     ebx, [esp+2Ch+arg_0]
.text:0040BD71                 mov     edx, [esp+2Ch+arg_4]
.text:0040BD75                 mov     [esp+2Ch+var_20], 1
.text:0040BD7D                 mov     [esp+2Ch+var_2C], ebx
.text:0040BD80                 mov     [esp+2Ch+var_28], edx
.text:0040BD84                 call    sub_40BEF0
.text:0040BD89                 mov     esi, eax
.text:0040BD8B                 xor     eax, eax
.text:0040BD8D                 test    esi, esi
.text:0040BD8F                 jz      loc_40BEC2
.text:0040BD95                 dec     dword ptr [ebx+10h]
.text:0040BD98                 mov     ecx, [esp+2Ch+var_10]
.text:0040BD9C                 mov     edx, [ecx]
.text:0040BD9E                 test    edx, edx
.text:0040BDA0                 jnz     loc_40BEC0
.text:0040BDA6                 dec     dword ptr [ebx+0Ch]
.text:0040BDA9                 xor     eax, eax
.text:0040BDAB                 xor     edx, edx
.text:0040BDAD                 mov     ecx, [ebx+0Ch]
.text:0040BDB0                 push    eax
.text:0040BDB1                 push    ecx
.text:0040BDB2                 mov     eax, [ebx+8]
.text:0040BDB5                 mov     ecx, [ebx+14h]
.text:0040BDB8                 fild    [esp+34h+var_34]
.text:0040BDBB                 add     esp, 8
.text:0040BDBE                 push    edx
.text:0040BDBF                 push    eax
.text:0040BDC0                 fild    [esp+34h+var_34]
.text:0040BDC3                 add     esp, 8
.text:0040BDC6                 fld     dword ptr [ecx]
.text:0040BDC8                 fmul    st(1), st
.text:0040BDCA                 fxch    st(1)
.text:0040BDCC                 fucomp  st(2)
.text:0040BDCE                 fnstsw  ax
.text:0040BDD0                 fstp    st(1)
.text:0040BDD2                 sahf
.text:0040BDD3                 jbe     loc_40BED0
.text:0040BDD9                 fld     ds:flt_40BD54
.text:0040BDDF                 fld     dword ptr [ecx+8]
.text:0040BDE2                 fucom   st(1)
.text:0040BDE4                 fnstsw  ax
.text:0040BDE6                 sahf
.text:0040BDE7                 jbe     loc_40BEE0
.text:0040BDED                 fld     ds:flt_40BD58
.text:0040BDF3                 fucomp  st(1)
.text:0040BDF5                 fnstsw  ax
.text:0040BDF7                 sahf
.text:0040BDF8                 jbe     loc_40BEE0
.text:0040BDFE                 fld     dword ptr [ecx+0Ch]
.text:0040BE01                 fld     ds:flt_40BD5C
.text:0040BE07                 fxch    st(1)
.text:0040BE09                 fucompp
.text:0040BE0B                 fnstsw  ax
.text:0040BE0D                 sahf
.text:0040BE0E                 jbe     loc_40BEE0
.text:0040BE14                 fldz
.text:0040BE16                 fxch    st(3)
.text:0040BE18                 fucom   st(3)
.text:0040BE1A                 fnstsw  ax
.text:0040BE1C                 fstp    st(3)
.text:0040BE1E                 sahf
.text:0040BE1F                 jb      loc_40BEE0
.text:0040BE25                 fxch    st(1)
.text:0040BE27                 faddp   st(2), st
.text:0040BE29                 fld     dword ptr [ecx+4]
.text:0040BE2C                 fucom   st(2)
.text:0040BE2E                 fnstsw  ax
.text:0040BE30                 sahf
.text:0040BE31                 jbe     loc_40BEE0
.text:0040BE37                 fld1
.text:0040BE39                 fucompp
.text:0040BE3B                 fnstsw  ax
.text:0040BE3D                 sahf
.text:0040BE3E                 jb      loc_40BED4
.text:0040BE44                 fucompp
.text:0040BE46                 fnstsw  ax
.text:0040BE48                 sahf
.text:0040BE49                 ja      short loc_40BE5C
.text:0040BE4B                 nop
.text:0040BE4C                 lea     esi, [esi+0]
.text:0040BE50
.text:0040BE50 loc_40BE50:                             ; CODE XREF: sub_40BD60+178↓j
.text:0040BE50                 mov     dword ptr [ebx+14h], offset dword_40B110
.text:0040BE57                 mov     ecx, offset dword_40B110
.text:0040BE5C
.text:0040BE5C loc_40BE5C:                             ; CODE XREF: sub_40BD60+E9↑j
.text:0040BE5C                 mov     eax, [ebx+0Ch]
.text:0040BE5F                 xor     edx, edx
.text:0040BE61                 push    edx
.text:0040BE62                 xor     edx, edx
.text:0040BE64                 push    eax
.text:0040BE65                 mov     eax, [ebx+8]
.text:0040BE68                 fild    [esp+34h+var_34]
.text:0040BE6B                 add     esp, 8
.text:0040BE6E                 push    edx
.text:0040BE6F                 push    eax
.text:0040BE70                 fild    [esp+34h+var_34]
.text:0040BE73                 add     esp, 8
.text:0040BE76                 fld     dword ptr [ecx]
.text:0040BE78                 fmul    st, st(1)
.text:0040BE7A                 fucomp  st(2)
.text:0040BE7C                 fnstsw  ax
.text:0040BE7E                 fstp    st(1)
.text:0040BE80                 sahf
.text:0040BE81                 jbe     short loc_40BED0
.text:0040BE83                 cmp     byte ptr [ecx+10h], 0
.text:0040BE87                 jz      short loc_40BEC8
.text:0040BE89                 fmul    dword ptr [ecx+4]
.text:0040BE8C
.text:0040BE8C loc_40BE8C:                             ; CODE XREF: sub_40BD60+16E↓j
.text:0040BE8C                 fnstcw  [esp+2Ch+var_12]
.text:0040BE90                 movzx   ecx, [esp+2Ch+var_12]
.text:0040BE95                 mov     [esp+2Ch+var_2C], ebx
.text:0040BE98                 or      cx, 0C00h
.text:0040BE9D                 mov     [esp+2Ch+var_14], cx
.text:0040BEA2                 fldcw   [esp+2Ch+var_14]
.text:0040BEA6                 fistp   [esp+2Ch+var_1C]
.text:0040BEAA                 fldcw   [esp+2Ch+var_12]
.text:0040BEAE                 mov     edx, dword ptr [esp+2Ch+var_1C]
.text:0040BEB2                 mov     [esp+2Ch+var_28], edx
.text:0040BEB6                 call    sub_40B510
.text:0040BEBB                 nop
.text:0040BEBC                 lea     esi, [esi+0]
.text:0040BEC0
.text:0040BEC0 loc_40BEC0:                             ; CODE XREF: sub_40BD60+40↑j
.text:0040BEC0                                         ; sub_40BD60+172↓j
.text:0040BEC0                 mov     eax, esi
.text:0040BEC2
.text:0040BEC2 loc_40BEC2:                             ; CODE XREF: sub_40BD60+2F↑j
.text:0040BEC2                 add     esp, 24h
.text:0040BEC5                 pop     ebx
.text:0040BEC6                 pop     esi
.text:0040BEC7                 retn
.text:0040BEC8 ; ---------------------------------------------------------------------------
.text:0040BEC8
.text:0040BEC8 loc_40BEC8:                             ; CODE XREF: sub_40BD60+127↑j
.text:0040BEC8                 fmul    dword ptr [ecx+4]
.text:0040BECB                 fmul    dword ptr [ecx+8]
.text:0040BECE                 jmp     short loc_40BE8C
.text:0040BED0 ; ---------------------------------------------------------------------------
.text:0040BED0
.text:0040BED0 loc_40BED0:                             ; CODE XREF: sub_40BD60+73↑j
.text:0040BED0                                         ; sub_40BD60+121↑j
.text:0040BED0                 fstp    st
.text:0040BED2                 jmp     short loc_40BEC0
.text:0040BED4 ; ---------------------------------------------------------------------------
.text:0040BED4
.text:0040BED4 loc_40BED4:                             ; CODE XREF: sub_40BD60+DE↑j
.text:0040BED4                                         ; sub_40BD60+182↓j
.text:0040BED4                 fstp    st
.text:0040BED6                 fstp    st
.text:0040BED8                 jmp     loc_40BE50
.text:0040BED8 ; ---------------------------------------------------------------------------
.text:0040BEDD                 align 10h
.text:0040BEE0
.text:0040BEE0 loc_40BEE0:                             ; CODE XREF: sub_40BD60+87↑j
.text:0040BEE0                                         ; sub_40BD60+98↑j ...
.text:0040BEE0                 fstp    st
.text:0040BEE2                 jmp     short loc_40BED4
.text:0040BEE2 sub_40BD60      endp
.text:0040BEE2
.text:0040BEE2 ; ---------------------------------------------------------------------------
.text:0040BEE4                 align 10h
.text:0040BEF0
.text:0040BEF0 ; =============== S U B R O U T I N E =======================================
.text:0040BEF0
.text:0040BEF0
.text:0040BEF0 sub_40BEF0      proc near               ; CODE XREF: sub_40B690+32↑p
.text:0040BEF0                                         ; sub_40BD60+24↑p
.text:0040BEF0
.text:0040BEF0 var_1C          = dword ptr -1Ch
.text:0040BEF0 var_18          = dword ptr -18h
.text:0040BEF0 var_D           = byte ptr -0Dh
.text:0040BEF0 arg_0           = dword ptr  4
.text:0040BEF0 arg_4           = dword ptr  8
.text:0040BEF0 arg_8           = dword ptr  0Ch
.text:0040BEF0 arg_C           = byte ptr  10h
.text:0040BEF0
.text:0040BEF0                 push    edi
.text:0040BEF1                 push    esi
.text:0040BEF2                 push    ebx
.text:0040BEF3                 sub     esp, 10h
.text:0040BEF6                 mov     esi, [esp+1Ch+arg_0]
.text:0040BEFA                 movzx   ecx, [esp+1Ch+arg_C]
.text:0040BEFF                 mov     edi, [esp+1Ch+arg_4]
.text:0040BF03                 mov     edx, [esi+8]
.text:0040BF06                 mov     [esp+1Ch+var_D], cl
.text:0040BF0A                 mov     [esp+1Ch+var_18], edx
.text:0040BF0E                 mov     [esp+1Ch+var_1C], edi
.text:0040BF11                 call    dword ptr [esi+18h]
.text:0040BF14                 mov     ecx, [esi]
.text:0040BF16                 lea     ebx, [ecx+eax*8]
.text:0040BF19                 cmp     ebx, [esi+4]
.text:0040BF1C                 jnb     loc_40BFD3
.text:0040BF22                 mov     edx, [esp+1Ch+arg_8]
.text:0040BF26                 xor     eax, eax
.text:0040BF28                 mov     [edx], ebx
.text:0040BF2A                 mov     edx, [ebx]
.text:0040BF2C                 test    edx, edx
.text:0040BF2E                 jz      short loc_40BF72
.text:0040BF30                 mov     [esp+1Ch+var_18], edx
.text:0040BF34                 mov     [esp+1Ch+var_1C], edi
.text:0040BF37                 call    dword ptr [esi+1Ch]
.text:0040BF3A                 test    al, al
.text:0040BF3C                 jz      short loc_40BF81
.text:0040BF3E                 cmp     [esp+1Ch+var_D], 0
.text:0040BF43                 mov     edi, [ebx]
.text:0040BF45                 jz      short loc_40BF70
.text:0040BF47                 mov     ecx, [ebx+4]
.text:0040BF4A                 test    ecx, ecx
.text:0040BF4C                 jz      short loc_40BF79
.text:0040BF4E                 mov     eax, [ecx]
.text:0040BF50                 mov     edx, [ecx+4]
.text:0040BF53                 mov     [ebx], eax
.text:0040BF55                 mov     [ebx+4], edx
.text:0040BF58                 mov     ebx, [esi+24h]
.text:0040BF5B                 mov     dword ptr [ecx], 0
.text:0040BF61                 mov     [ecx+4], ebx
.text:0040BF64                 mov     [esi+24h], ecx
.text:0040BF67                 mov     esi, esi
.text:0040BF69                 lea     edi, [edi+0]
.text:0040BF70
.text:0040BF70 loc_40BF70:                             ; CODE XREF: sub_40BEF0+55↑j
.text:0040BF70                                         ; sub_40BEF0+8F↓j
.text:0040BF70                 mov     eax, edi
.text:0040BF72
.text:0040BF72 loc_40BF72:                             ; CODE XREF: sub_40BEF0+3E↑j
.text:0040BF72                                         ; sub_40BEF0+BC↓j ...
.text:0040BF72                 add     esp, 10h
.text:0040BF75                 pop     ebx
.text:0040BF76                 pop     esi
.text:0040BF77                 pop     edi
.text:0040BF78                 retn
.text:0040BF79 ; ---------------------------------------------------------------------------
.text:0040BF79
.text:0040BF79 loc_40BF79:                             ; CODE XREF: sub_40BEF0+5C↑j
.text:0040BF79                 mov     dword ptr [ebx], 0
.text:0040BF7F                 jmp     short loc_40BF70
.text:0040BF81 ; ---------------------------------------------------------------------------
.text:0040BF81
.text:0040BF81 loc_40BF81:                             ; CODE XREF: sub_40BEF0+4C↑j
.text:0040BF81                 mov     eax, [ebx+4]
.text:0040BF84                 test    eax, eax
.text:0040BF86                 jz      short loc_40BFAA
.text:0040BF88                 nop
.text:0040BF89                 lea     esi, [esi+0]
.text:0040BF90
.text:0040BF90 loc_40BF90:                             ; CODE XREF: sub_40BEF0+B8↓j
.text:0040BF90                 mov     ecx, [eax]
.text:0040BF92                 mov     [esp+1Ch+var_1C], edi
.text:0040BF95                 mov     [esp+1Ch+var_18], ecx
.text:0040BF99                 call    dword ptr [esi+1Ch]
.text:0040BF9C                 test    al, al
.text:0040BF9E                 jnz     short loc_40BFAE
.text:0040BFA0                 mov     ebx, [ebx+4]
.text:0040BFA3                 mov     eax, [ebx+4]
.text:0040BFA6                 test    eax, eax
.text:0040BFA8                 jnz     short loc_40BF90
.text:0040BFAA
.text:0040BFAA loc_40BFAA:                             ; CODE XREF: sub_40BEF0+96↑j
.text:0040BFAA                 xor     eax, eax
.text:0040BFAC                 jmp     short loc_40BF72
.text:0040BFAE ; ---------------------------------------------------------------------------
.text:0040BFAE
.text:0040BFAE loc_40BFAE:                             ; CODE XREF: sub_40BEF0+AE↑j
.text:0040BFAE                 cmp     [esp+1Ch+var_D], 0
.text:0040BFB3                 mov     edx, [ebx+4]
.text:0040BFB6                 mov     ecx, [edx]
.text:0040BFB8                 jz      short loc_40BFCF
.text:0040BFBA                 mov     dword ptr [edx], 0
.text:0040BFC0                 mov     edi, [edx+4]
.text:0040BFC3                 mov     [ebx+4], edi
.text:0040BFC6                 mov     edi, [esi+24h]
.text:0040BFC9                 mov     [edx+4], edi
.text:0040BFCC                 mov     [esi+24h], edx
.text:0040BFCF
.text:0040BFCF loc_40BFCF:                             ; CODE XREF: sub_40BEF0+C8↑j
.text:0040BFCF                 mov     eax, ecx
.text:0040BFD1                 jmp     short loc_40BF72
.text:0040BFD3 ; ---------------------------------------------------------------------------
.text:0040BFD3
.text:0040BFD3 loc_40BFD3:                             ; CODE XREF: sub_40BEF0+2C↑j
.text:0040BFD3                 call    abort
.text:0040BFD3 sub_40BEF0      endp
.text:0040BFD3
.text:0040BFD3 ; ---------------------------------------------------------------------------
.text:0040BFD8                 db 18h dup(90h)
.text:0040BFF0
.text:0040BFF0 ; =============== S U B R O U T I N E =======================================
.text:0040BFF0
.text:0040BFF0
.text:0040BFF0 sub_40BFF0      proc near               ; CODE XREF: sub_4075C0+1C↑p
.text:0040BFF0
.text:0040BFF0 arg_0           = dword ptr  4
.text:0040BFF0 arg_4           = dword ptr  8
.text:0040BFF0
.text:0040BFF0                 push    esi
.text:0040BFF1                 push    ebx
.text:0040BFF2                 mov     ecx, [esp+8+arg_0]
.text:0040BFF6                 xor     ebx, ebx
.text:0040BFF8                 mov     esi, [esp+8+arg_4]
.text:0040BFFC                 movzx   eax, byte ptr [ecx]
.text:0040BFFF                 test    al, al
.text:0040C001                 jz      short loc_40C023
.text:0040C003                 lea     esi, [esi+0]
.text:0040C009                 lea     edi, [edi+0]
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: sub_40BFF0+31↓j
.text:0040C010                 movsx   edx, al
.text:0040C013                 inc     ecx
.text:0040C014                 mov     eax, ebx
.text:0040C016                 rol     eax, 9
.text:0040C019                 lea     ebx, [eax+edx]
.text:0040C01C                 movzx   eax, byte ptr [ecx]
.text:0040C01F                 test    al, al
.text:0040C021                 jnz     short loc_40C010
.text:0040C023
.text:0040C023 loc_40C023:                             ; CODE XREF: sub_40BFF0+11↑j
.text:0040C023                 mov     eax, ebx
.text:0040C025                 xor     edx, edx
.text:0040C027                 div     esi
.text:0040C029                 pop     ebx
.text:0040C02A                 pop     esi
.text:0040C02B                 mov     eax, edx
.text:0040C02D                 retn
.text:0040C02D sub_40BFF0      endp
.text:0040C02D
.text:0040C02D ; ---------------------------------------------------------------------------
.text:0040C02E                 align 10h
.text:0040C030
.text:0040C030 ; =============== S U B R O U T I N E =======================================
.text:0040C030
.text:0040C030
.text:0040C030 sub_40C030      proc near               ; CODE XREF: sub_406B00+2BF↑p
.text:0040C030                                         ; sub_406B00+3CC↑p
.text:0040C030
.text:0040C030 var_1C          = dword ptr -1Ch
.text:0040C030 var_18          = dword ptr -18h
.text:0040C030 var_14          = dword ptr -14h
.text:0040C030 arg_0           = dword ptr  4
.text:0040C030 arg_4           = dword ptr  8
.text:0040C030 arg_8           = dword ptr  0Ch
.text:0040C030
.text:0040C030                 push    ebp
.text:0040C031                 push    edi
.text:0040C032                 xor     edi, edi
.text:0040C034                 push    esi
.text:0040C035                 push    ebx
.text:0040C036                 sub     esp, 0Ch
.text:0040C039                 mov     ebx, [esp+1Ch+arg_8]
.text:0040C03D                 mov     ebp, [esp+1Ch+arg_0]
.text:0040C041                 mov     esi, [esp+1Ch+arg_4]
.text:0040C045                 test    ebx, ebx
.text:0040C047                 jnz     short loc_40C053
.text:0040C049
.text:0040C049 loc_40C049:                             ; CODE XREF: sub_40C030+36↓j
.text:0040C049                                         ; sub_40C030+44↓j ...
.text:0040C049                 add     esp, 0Ch
.text:0040C04C                 mov     eax, edi
.text:0040C04E                 pop     ebx
.text:0040C04F                 pop     esi
.text:0040C050                 pop     edi
.text:0040C051                 pop     ebp
.text:0040C052                 retn
.text:0040C053 ; ---------------------------------------------------------------------------
.text:0040C053
.text:0040C053 loc_40C053:                             ; CODE XREF: sub_40C030+17↑j
.text:0040C053                                         ; sub_40C030+42↓j
.text:0040C053                 mov     [esp+1Ch+var_14], ebx
.text:0040C057                 mov     [esp+1Ch+var_18], esi
.text:0040C05B                 mov     [esp+1Ch+var_1C], ebp
.text:0040C05E                 call    sub_40D6D0
.text:0040C063                 cmp     eax, 0FFFFFFFFh
.text:0040C066                 jz      short loc_40C049
.text:0040C068                 test    eax, eax
.text:0040C06A                 jz      short loc_40C076
.text:0040C06C                 add     edi, eax
.text:0040C06E                 add     esi, eax
.text:0040C070                 sub     ebx, eax
.text:0040C072                 jnz     short loc_40C053
.text:0040C074                 jmp     short loc_40C049
.text:0040C076 ; ---------------------------------------------------------------------------
.text:0040C076
.text:0040C076 loc_40C076:                             ; CODE XREF: sub_40C030+3A↑j
.text:0040C076                 call    _errno
.text:0040C07B                 mov     dword ptr [eax], 1Ch
.text:0040C081                 jmp     short loc_40C049
.text:0040C081 sub_40C030      endp
.text:0040C081
.text:0040C081 ; ---------------------------------------------------------------------------
.text:0040C083                 align 10h
.text:0040C090
.text:0040C090 loc_40C090:                             ; CODE XREF: sub_406870+3A↑p
.text:0040C090                 push    ebp
.text:0040C091                 push    edi
.text:0040C092                 mov     edi, 200h
.text:0040C097                 push    esi
.text:0040C098                 push    ebx
.text:0040C099                 sub     esp, 1Ch
.text:0040C09C                 mov     edx, [esp+30h]
.text:0040C0A0                 mov     dword ptr [esp+10h], 0
.text:0040C0A8                 mov     [esp], edx
.text:0040C0AB                 call    sub_418C00
.text:0040C0B0                 mov     [esp+18h], eax
.text:0040C0B4                 mov     edx, [esp+18h]
.text:0040C0B8                 xor     eax, eax
.text:0040C0BA                 test    edx, edx
.text:0040C0BC                 jz      loc_40C1B5
.text:0040C0C2                 mov     dword ptr [esp], 200h
.text:0040C0C9                 call    sub_40A850
.text:0040C0CE                 mov     [esp+14h], eax
.text:0040C0D2                 call    _errno
.text:0040C0D7                 mov     dword ptr [eax], 0
.text:0040C0DD                 lea     esi, [esi+0]
.text:0040C0E0
.text:0040C0E0 loc_40C0E0:                             ; CODE XREF: .text:0040C102↓j
.text:0040C0E0                                         ; .text:0040C173↓j
.text:0040C0E0                 mov     ebx, [esp+18h]
.text:0040C0E4                 mov     [esp], ebx
.text:0040C0E7                 call    sub_417310
.text:0040C0EC                 test    eax, eax
.text:0040C0EE                 jz      loc_40C18E
.text:0040C0F4                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:0040C0F8                 lea     esi, [eax+0Ch]
.text:0040C0FB                 jz      short loc_40C178
.text:0040C0FD                 mov     eax, esi
.text:0040C0FF
.text:0040C0FF loc_40C0FF:                             ; CODE XREF: .text:0040C181↓j
.text:0040C0FF                                         ; .text:0040C189↓j
.text:0040C0FF                 cmp     byte ptr [eax], 0
.text:0040C102                 jz      short loc_40C0E0
.text:0040C104                 mov     [esp], esi
.text:0040C107                 call    strlen
.text:0040C10C                 mov     ebx, [esp+10h]
.text:0040C110                 lea     ebp, [eax+1]
.text:0040C113                 add     ebx, ebp
.text:0040C115                 cmp     ebx, [esp+10h]
.text:0040C119                 jb      loc_40C1D0
.text:0040C11F                 cmp     edi, ebx
.text:0040C121                 ja      short loc_40C155
.text:0040C123                 lea     esi, [esi+0]
.text:0040C129                 lea     edi, [edi+0]
.text:0040C130
.text:0040C130 loc_40C130:                             ; CODE XREF: .text:0040C13F↓j
.text:0040C130                 lea     eax, [edi+edi]
.text:0040C133                 cmp     eax, edi
.text:0040C135                 jb      loc_40C1D0
.text:0040C13B                 cmp     eax, ebx
.text:0040C13D                 mov     edi, eax
.text:0040C13F                 jbe     short loc_40C130
.text:0040C141                 mov     [esp+4], eax
.text:0040C145                 mov     ecx, [esp+14h]
.text:0040C149                 mov     [esp], ecx
.text:0040C14C                 call    sub_40A8E0
.text:0040C151                 mov     [esp+14h], eax
.text:0040C155
.text:0040C155 loc_40C155:                             ; CODE XREF: .text:0040C121↑j
.text:0040C155                 mov     [esp+8], ebp
.text:0040C159                 mov     ecx, [esp+14h]
.text:0040C15D                 mov     eax, [esp+10h]
.text:0040C161                 mov     [esp+4], esi
.text:0040C165                 add     ecx, eax
.text:0040C167                 mov     [esp], ecx
.text:0040C16A                 call    memcpy
.text:0040C16F                 mov     [esp+10h], ebx
.text:0040C173                 jmp     loc_40C0E0
.text:0040C178 ; ---------------------------------------------------------------------------
.text:0040C178
.text:0040C178 loc_40C178:                             ; CODE XREF: .text:0040C0FB↑j
.text:0040C178                 cmp     byte ptr [esi+1], 2Eh ; '.'
.text:0040C17C                 jz      short loc_40C186
.text:0040C17E                 add     eax, 0Dh
.text:0040C181                 jmp     loc_40C0FF
.text:0040C186 ; ---------------------------------------------------------------------------
.text:0040C186
.text:0040C186 loc_40C186:                             ; CODE XREF: .text:0040C17C↑j
.text:0040C186                 add     eax, 0Eh
.text:0040C189                 jmp     loc_40C0FF
.text:0040C18E ; ---------------------------------------------------------------------------
.text:0040C18E
.text:0040C18E loc_40C18E:                             ; CODE XREF: .text:0040C0EE↑j
.text:0040C18E                 mov     ebp, [esp+14h]
.text:0040C192                 mov     edi, [esp+10h]
.text:0040C196                 mov     byte ptr [edi+ebp], 0
.text:0040C19A                 call    _errno
.text:0040C19F                 mov     ebx, [eax]
.text:0040C1A1                 mov     esi, [esp+18h]
.text:0040C1A5                 mov     [esp], esi
.text:0040C1A8                 call    sub_418B90
.text:0040C1AD                 test    ebx, ebx
.text:0040C1AF                 mov     eax, [esp+14h]
.text:0040C1B3                 jnz     short loc_40C1BD
.text:0040C1B5
.text:0040C1B5 loc_40C1B5:                             ; CODE XREF: .text:0040C0BC↑j
.text:0040C1B5                                         ; .text:0040C1CE↓j
.text:0040C1B5                 add     esp, 1Ch
.text:0040C1B8                 pop     ebx
.text:0040C1B9                 pop     esi
.text:0040C1BA                 pop     edi
.text:0040C1BB                 pop     ebp
.text:0040C1BC                 retn
.text:0040C1BD ; ---------------------------------------------------------------------------
.text:0040C1BD
.text:0040C1BD loc_40C1BD:                             ; CODE XREF: .text:0040C1B3↑j
.text:0040C1BD                 mov     [esp], eax
.text:0040C1C0                 call    free
.text:0040C1C5                 call    _errno
.text:0040C1CA                 mov     [eax], ebx
.text:0040C1CC                 xor     eax, eax
.text:0040C1CE                 jmp     short loc_40C1B5
.text:0040C1D0 ; ---------------------------------------------------------------------------
.text:0040C1D0
.text:0040C1D0 loc_40C1D0:                             ; CODE XREF: .text:0040C119↑j
.text:0040C1D0                                         ; .text:0040C135↑j
.text:0040C1D0                 call    sub_40B0D0
.text:0040C1D0 ; ---------------------------------------------------------------------------
.text:0040C1D5                 align 10h
.text:0040C1E0 aLiteral        db 'literal',0          ; DATA XREF: .text:0040C220↓o
.text:0040C1E8 aShell          db 'shell',0            ; DATA XREF: .text:0040C224↓o
.text:0040C1EE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:0040C228↓o
.text:0040C1FB aC              db 'c',0
.text:0040C1FD aEscape         db 'escape',0
.text:0040C204 aLocale         db 'locale',0
.text:0040C20B aClocale        db 'clocale',0          ; DATA XREF: .text:0040C238↓o
.text:0040C213                 align 10h
.text:0040C220                 dd offset aLiteral      ; "literal"
.text:0040C224                 dd offset aShell        ; "shell"
.text:0040C228                 dd offset aShellAlways  ; "shell-always"
.text:0040C22C ; ---------------------------------------------------------------------------
.text:0040C22C                 sti
.text:0040C22D                 rol     dword ptr [eax+0], 0FDh
.text:0040C231                 rol     dword ptr [eax+0], 4
.text:0040C235                 retn    40h ; '@'
.text:0040C235 ; ---------------------------------------------------------------------------
.text:0040C238                 dd offset aClocale      ; "clocale"
.text:0040C23C                 dd 2 dup(0)
.text:0040C244                 dd 1, 2, 3, 4, 5, 6
.text:0040C25C asc_40C25C:                             ; DATA XREF: sub_40C270+7E↓o
.text:0040C25C                                         ; sub_40C270+A39↓o ...
.text:0040C25C                 text "UTF-16LE", '"',27h,'`'
.text:0040C262                 align 10h
.text:0040C270
.text:0040C270 ; =============== S U B R O U T I N E =======================================
.text:0040C270
.text:0040C270
.text:0040C270 ; int __cdecl sub_40C270(int, int, char *Str, int, int, int)
.text:0040C270 sub_40C270      proc near               ; CODE XREF: sub_40C270+43A↓p
.text:0040C270                                         ; .text:0040CE33↓p ...
.text:0040C270
.text:0040C270 C               = dword ptr -4Ch
.text:0040C270 Type            = dword ptr -48h
.text:0040C270 SizeInBytes     = dword ptr -44h
.text:0040C270 State           = dword ptr -40h
.text:0040C270 var_3C          = dword ptr -3Ch
.text:0040C270 var_38          = dword ptr -38h
.text:0040C270 var_34          = dword ptr -34h
.text:0040C270 var_30          = dword ptr -30h
.text:0040C270 var_29          = byte ptr -29h
.text:0040C270 var_28          = dword ptr -28h
.text:0040C270 var_22          = byte ptr -22h
.text:0040C270 var_21          = byte ptr -21h
.text:0040C270 var_20          = dword ptr -20h
.text:0040C270 var_1C          = dword ptr -1Ch
.text:0040C270 var_18          = mbstate_t ptr -18h
.text:0040C270 arg_0           = dword ptr  4
.text:0040C270 arg_4           = dword ptr  8
.text:0040C270 Str             = dword ptr  0Ch
.text:0040C270 arg_C           = dword ptr  10h
.text:0040C270 arg_10          = dword ptr  14h
.text:0040C270 arg_14          = dword ptr  18h
.text:0040C270
.text:0040C270                 push    ebp
.text:0040C271                 push    edi
.text:0040C272                 push    esi
.text:0040C273                 push    ebx
.text:0040C274                 sub     esp, 3Ch
.text:0040C277                 mov     edx, ds:__mb_cur_max
.text:0040C27D                 mov     [esp+4Ch+var_34], 0
.text:0040C285                 mov     [esp+4Ch+var_1C], 0
.text:0040C28D                 cmp     dword ptr [edx], 1
.text:0040C290                 mov     [esp+4Ch+var_20], 0
.text:0040C298                 mov     [esp+4Ch+var_21], 0
.text:0040C29D                 setz    [esp+4Ch+var_22]
.text:0040C2A2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:0040C2A7                 ja      short def_40C2AD ; jumptable 0040C2AD default case, cases 0,1
.text:0040C2A9                 mov     edx, [esp+4Ch+arg_10]
.text:0040C2AD                 jmp     ds:jpt_40C2AD[edx*4] ; switch jump
.text:0040C2AD ; ---------------------------------------------------------------------------
.text:0040C2B4 jpt_40C2AD      dd offset def_40C2AD    ; DATA XREF: sub_40C270+3D↑r
.text:0040C2B4                 dd offset def_40C2AD    ; jump table for switch statement
.text:0040C2B4                 dd offset loc_40CBF5
.text:0040C2B4                 dd offset loc_40C2D0
.text:0040C2B4                 dd offset loc_40CC1B
.text:0040C2B4                 dd offset loc_40CC25
.text:0040C2B4                 dd offset loc_40CC25
.text:0040C2D0 ; ---------------------------------------------------------------------------
.text:0040C2D0
.text:0040C2D0 loc_40C2D0:                             ; CODE XREF: sub_40C270+3D↑j
.text:0040C2D0                                         ; DATA XREF: sub_40C270:jpt_40C2AD↑o
.text:0040C2D0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040C2AD case 3
.text:0040C2D4                 cmp     [esp+4Ch+var_34], eax
.text:0040C2D8                 jnb     short loc_40C2E1
.text:0040C2DA                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C2DE                 mov     byte ptr [ebx], 22h ; '"'
.text:0040C2E1
.text:0040C2E1 loc_40C2E1:                             ; CODE XREF: sub_40C270+68↑j
.text:0040C2E1                 mov     [esp+4Ch+var_34], 1
.text:0040C2E9                 mov     [esp+4Ch+var_21], 1
.text:0040C2EE                 mov     [esp+4Ch+var_1C], offset asc_40C25C ; "\"'`"
.text:0040C2F6
.text:0040C2F6 loc_40C2F6:                             ; CODE XREF: sub_40C270+9A6↓j
.text:0040C2F6                 mov     [esp+4Ch+var_20], 1
.text:0040C2FE
.text:0040C2FE def_40C2AD:                             ; CODE XREF: sub_40C270+37↑j
.text:0040C2FE                                         ; sub_40C270+3D↑j ...
.text:0040C2FE                 xor     ebp, ebp        ; jumptable 0040C2AD default case, cases 0,1
.text:0040C300
.text:0040C300 loc_40C300:                             ; CODE XREF: sub_40C270+3DB↓j
.text:0040C300                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040C305                 jz      loc_40CBE7
.text:0040C30B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040C30F
.text:0040C30F loc_40C30F:                             ; CODE XREF: sub_40C270+980↓j
.text:0040C30F                 jz      loc_40CB7E
.text:0040C315                 cmp     [esp+4Ch+var_21], 0
.text:0040C31A                 jz      short loc_40C360
.text:0040C31C                 mov     esi, [esp+4Ch+var_20]
.text:0040C320                 test    esi, esi
.text:0040C322                 jz      short loc_40C360
.text:0040C324                 mov     ecx, [esp+4Ch+var_20]
.text:0040C328                 lea     edi, [ecx+ebp]
.text:0040C32B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040C32F                 ja      short loc_40C360
.text:0040C331                 cld
.text:0040C332                 mov     ebx, [esp+4Ch+Str]
.text:0040C336                 mov     edi, [esp+4Ch+var_1C]
.text:0040C33A                 add     ebx, ebp
.text:0040C33C                 mov     esi, ebx
.text:0040C33E                 cmp     ecx, ecx
.text:0040C340                 repe cmpsb
.text:0040C342                 jnz     short loc_40C360
.text:0040C344                 mov     edx, [esp+4Ch+arg_4]
.text:0040C348                 cmp     [esp+4Ch+var_34], edx
.text:0040C34C                 jnb     short loc_40C35A
.text:0040C34E                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C352                 mov     eax, [esp+4Ch+var_34]
.text:0040C356                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040C35A
.text:0040C35A loc_40C35A:                             ; CODE XREF: sub_40C270+DC↑j
.text:0040C35A                 inc     [esp+4Ch+var_34]
.text:0040C35E                 mov     esi, esi
.text:0040C360
.text:0040C360 loc_40C360:                             ; CODE XREF: sub_40C270+AA↑j
.text:0040C360                                         ; sub_40C270+B2↑j ...
.text:0040C360                 mov     edi, [esp+4Ch+Str]
.text:0040C364                 movzx   ebx, byte ptr [ebp+edi+0]
.text:0040C369                 movzx   eax, bl
.text:0040C36C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040C36F                 ja      def_40C375      ; jumptable 0040C375 default case, cases 1-6,14-31,64
.text:0040C375                 jmp     ds:jpt_40C375[eax*4] ; switch jump
.text:0040C375 ; ---------------------------------------------------------------------------
.text:0040C37C jpt_40C375      dd offset loc_40C578, offset def_40C375, offset def_40C375
.text:0040C37C                                         ; DATA XREF: sub_40C270+105↑r
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375 ; jump table for switch statement
.text:0040C37C                 dd offset def_40C375, offset loc_40C650, offset loc_40C66E
.text:0040C37C                 dd offset loc_40C672, offset loc_40C6B7, offset loc_40C6BB
.text:0040C37C                 dd offset loc_40C6BF, offset loc_40C6C3, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset def_40C375
.text:0040C37C                 dd offset def_40C375, offset def_40C375, offset loc_40CB48
.text:0040C37C                 dd offset loc_40CB48, offset loc_40CB48, offset loc_40CB6A
.text:0040C37C                 dd offset loc_40CB48, offset def_40C772, offset loc_40CB48
.text:0040C37C                 dd offset loc_40C6C7, offset loc_40CB48, offset loc_40CB48
.text:0040C37C                 dd offset loc_40CB48, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset loc_40CB48
.text:0040C37C                 dd offset loc_40CB48, offset loc_40CB48, offset loc_40CB48
.text:0040C37C                 dd offset loc_40C72C, offset def_40C375, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset loc_40CB48, offset loc_40CB41
.text:0040C37C                 dd offset def_40C772, offset loc_40CB48, offset def_40C772
.text:0040C37C                 dd offset loc_40CB48, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset def_40C772, offset def_40C772, offset def_40C772
.text:0040C37C                 dd offset loc_40CB58, offset loc_40CB48, offset loc_40CB58
.text:0040C37C                 dd offset loc_40CB6A
.text:0040C578 ; ---------------------------------------------------------------------------
.text:0040C578
.text:0040C578 loc_40C578:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C578                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C578                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040C375 case 0
.text:0040C57D                 lea     eax, [ebp+1]
.text:0040C580                 jz      loc_40C630
.text:0040C586                 mov     esi, [esp+4Ch+arg_4]
.text:0040C58A                 cmp     [esp+4Ch+var_34], esi
.text:0040C58E                 jnb     short loc_40C59C
.text:0040C590                 mov     eax, [esp+4Ch+arg_0]
.text:0040C594                 mov     ebx, [esp+4Ch+var_34]
.text:0040C598                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040C59C
.text:0040C59C loc_40C59C:                             ; CODE XREF: sub_40C270+31E↑j
.text:0040C59C                 inc     [esp+4Ch+var_34]
.text:0040C5A0                 mov     edx, [esp+4Ch+arg_4]
.text:0040C5A4                 cmp     [esp+4Ch+var_34], edx
.text:0040C5A8                 jnb     short loc_40C5B6
.text:0040C5AA                 mov     edi, [esp+4Ch+arg_0]
.text:0040C5AE                 mov     ecx, [esp+4Ch+var_34]
.text:0040C5B2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:0040C5B6
.text:0040C5B6 loc_40C5B6:                             ; CODE XREF: sub_40C270+338↑j
.text:0040C5B6                 inc     [esp+4Ch+var_34]
.text:0040C5BA                 mov     esi, [esp+4Ch+arg_4]
.text:0040C5BE                 cmp     [esp+4Ch+var_34], esi
.text:0040C5C2                 jnb     short loc_40C5D0
.text:0040C5C4                 mov     ebx, [esp+4Ch+arg_0]
.text:0040C5C8                 mov     eax, [esp+4Ch+var_34]
.text:0040C5CC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:0040C5D0
.text:0040C5D0 loc_40C5D0:                             ; CODE XREF: sub_40C270+352↑j
.text:0040C5D0                 inc     [esp+4Ch+var_34]
.text:0040C5D4                 mov     bl, 30h ; '0'
.text:0040C5D6                 lea     esi, [esi+0]
.text:0040C5D9                 lea     edi, [edi+0]
.text:0040C5E0
.text:0040C5E0 def_40C772:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C5E0                                         ; sub_40C270+463↓j ...
.text:0040C5E0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C5E0                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C5E5                 lea     eax, [ebp+1]
.text:0040C5E8                 jz      short loc_40C630
.text:0040C5EA                 mov     cl, bl
.text:0040C5EC                 mov     edi, [esp+4Ch+arg_14]
.text:0040C5F0                 mov     esi, 1
.text:0040C5F5                 shr     cl, 5
.text:0040C5F8                 movzx   edx, cl
.text:0040C5FB                 mov     ecx, ebx
.text:0040C5FD                 and     ecx, 1Fh
.text:0040C600                 shl     esi, cl
.text:0040C602                 test    [edi+edx*4+4], esi
.text:0040C606                 jz      short loc_40C622
.text:0040C608
.text:0040C608 loc_40C608:                             ; CODE XREF: sub_40C270+3FC↓j
.text:0040C608                 mov     edx, [esp+4Ch+arg_4]
.text:0040C60C                 cmp     [esp+4Ch+var_34], edx
.text:0040C610                 jnb     short loc_40C61E
.text:0040C612                 mov     edi, [esp+4Ch+arg_0]
.text:0040C616                 mov     esi, [esp+4Ch+var_34]
.text:0040C61A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040C61E
.text:0040C61E loc_40C61E:                             ; CODE XREF: sub_40C270+3A0↑j
.text:0040C61E                 inc     [esp+4Ch+var_34]
.text:0040C622
.text:0040C622 loc_40C622:                             ; CODE XREF: sub_40C270+396↑j
.text:0040C622                 lea     eax, [ebp+1]
.text:0040C625                 lea     esi, [esi+0]
.text:0040C629                 lea     edi, [edi+0]
.text:0040C630
.text:0040C630 loc_40C630:                             ; CODE XREF: sub_40C270+310↑j
.text:0040C630                                         ; sub_40C270+378↑j ...
.text:0040C630                 mov     ebp, [esp+4Ch+arg_4]
.text:0040C634                 cmp     [esp+4Ch+var_34], ebp
.text:0040C638                 jnb     short loc_40C645
.text:0040C63A                 mov     edx, [esp+4Ch+arg_0]
.text:0040C63E                 mov     ecx, [esp+4Ch+var_34]
.text:0040C642                 mov     [ecx+edx], bl
.text:0040C645
.text:0040C645 loc_40C645:                             ; CODE XREF: sub_40C270+3C8↑j
.text:0040C645                 inc     [esp+4Ch+var_34]
.text:0040C649                 mov     ebp, eax
.text:0040C64B                 jmp     loc_40C300
.text:0040C650 ; ---------------------------------------------------------------------------
.text:0040C650
.text:0040C650 loc_40C650:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C650                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C650                 mov     dl, 61h ; 'a'   ; jumptable 0040C375 case 7
.text:0040C652                 lea     esi, [esi+0]
.text:0040C659                 lea     edi, [edi+0]
.text:0040C660
.text:0040C660 loc_40C660:                             ; CODE XREF: sub_40C270+400↓j
.text:0040C660                                         ; sub_40C270+409↓j ...
.text:0040C660                 cmp     [esp+4Ch+var_21], 0
.text:0040C665                 lea     eax, [ebp+1]
.text:0040C668                 jz      short loc_40C630
.text:0040C66A                 mov     bl, dl
.text:0040C66C                 jmp     short loc_40C608
.text:0040C66E ; ---------------------------------------------------------------------------
.text:0040C66E
.text:0040C66E loc_40C66E:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C66E                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C66E                 mov     dl, 62h ; 'b'   ; jumptable 0040C375 case 8
.text:0040C670                 jmp     short loc_40C660
.text:0040C672 ; ---------------------------------------------------------------------------
.text:0040C672
.text:0040C672 loc_40C672:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C672                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C672                 mov     dl, 74h ; 't'   ; jumptable 0040C375 case 9
.text:0040C674
.text:0040C674 loc_40C674:                             ; CODE XREF: sub_40C270+449↓j
.text:0040C674                                         ; sub_40C270+455↓j ...
.text:0040C674                 cmp     [esp+4Ch+arg_10], 1
.text:0040C679                 jnz     short loc_40C660
.text:0040C67B
.text:0040C67B loc_40C67B:                             ; CODE XREF: sub_40C270+45C↓j
.text:0040C67B                                         ; sub_40C270+4C1↓j ...
.text:0040C67B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 0040CA42 cases 91,92,94,96,124
.text:0040C683                 mov     eax, [esp+4Ch+arg_14]
.text:0040C687                 mov     edx, [esp+4Ch+arg_C]
.text:0040C68B                 mov     ecx, [esp+4Ch+Str]
.text:0040C68F                 mov     ebx, [esp+4Ch+arg_4]
.text:0040C693                 mov     [esp+4Ch+var_38], eax ; int
.text:0040C697                 mov     ebp, [esp+4Ch+arg_0]
.text:0040C69B                 mov     [esp+4Ch+State], edx ; int
.text:0040C69F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:0040C6A3                 mov     [esp+4Ch+Type], ebx ; int
.text:0040C6A7                 mov     [esp+4Ch+C], ebp ; int
.text:0040C6AA                 call    sub_40C270
.text:0040C6AF
.text:0040C6AF loc_40C6AF:                             ; CODE XREF: sub_40C270+972↓j
.text:0040C6AF                 add     esp, 3Ch
.text:0040C6B2                 pop     ebx
.text:0040C6B3                 pop     esi
.text:0040C6B4                 pop     edi
.text:0040C6B5                 pop     ebp
.text:0040C6B6                 retn
.text:0040C6B7 ; ---------------------------------------------------------------------------
.text:0040C6B7
.text:0040C6B7 loc_40C6B7:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C6B7                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C6B7                 mov     dl, 6Eh ; 'n'   ; jumptable 0040C375 case 10
.text:0040C6B9                 jmp     short loc_40C674
.text:0040C6BB ; ---------------------------------------------------------------------------
.text:0040C6BB
.text:0040C6BB loc_40C6BB:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C6BB                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C6BB                 mov     dl, 76h ; 'v'   ; jumptable 0040C375 case 11
.text:0040C6BD                 jmp     short loc_40C660
.text:0040C6BF ; ---------------------------------------------------------------------------
.text:0040C6BF
.text:0040C6BF loc_40C6BF:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C6BF                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C6BF                 mov     dl, 66h ; 'f'   ; jumptable 0040C375 case 12
.text:0040C6C1                 jmp     short loc_40C660
.text:0040C6C3 ; ---------------------------------------------------------------------------
.text:0040C6C3
.text:0040C6C3 loc_40C6C3:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C6C3                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C6C3                 mov     dl, 72h ; 'r'   ; jumptable 0040C375 case 13
.text:0040C6C5                 jmp     short loc_40C674
.text:0040C6C7 ; ---------------------------------------------------------------------------
.text:0040C6C7
.text:0040C6C7 loc_40C6C7:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C6C7                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C6C7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C375 case 39
.text:0040C6CC                 jz      short loc_40C67B ; jumptable 0040CA42 cases 91,92,94,96,124
.text:0040C6CE                 cmp     [esp+4Ch+arg_10], 2
.text:0040C6D3                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C6D3                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C6D9                 mov     edx, [esp+4Ch+arg_4]
.text:0040C6DD                 cmp     [esp+4Ch+var_34], edx
.text:0040C6E1                 jnb     short loc_40C6EF
.text:0040C6E3                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C6E7                 mov     edi, [esp+4Ch+var_34]
.text:0040C6EB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040C6EF
.text:0040C6EF loc_40C6EF:                             ; CODE XREF: sub_40C270+471↑j
.text:0040C6EF                 inc     [esp+4Ch+var_34]
.text:0040C6F3                 mov     eax, [esp+4Ch+arg_4]
.text:0040C6F7                 cmp     [esp+4Ch+var_34], eax
.text:0040C6FB                 jnb     short loc_40C709
.text:0040C6FD                 mov     esi, [esp+4Ch+arg_0]
.text:0040C701                 mov     edx, [esp+4Ch+var_34]
.text:0040C705                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:0040C709
.text:0040C709 loc_40C709:                             ; CODE XREF: sub_40C270+48B↑j
.text:0040C709                 inc     [esp+4Ch+var_34]
.text:0040C70D                 mov     edi, [esp+4Ch+arg_4]
.text:0040C711                 cmp     [esp+4Ch+var_34], edi
.text:0040C715                 jnb     short loc_40C723
.text:0040C717                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C71B                 mov     eax, [esp+4Ch+var_34]
.text:0040C71F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:0040C723
.text:0040C723 loc_40C723:                             ; CODE XREF: sub_40C270+4A5↑j
.text:0040C723                                         ; sub_40C270+5C4↓j ...
.text:0040C723                 inc     [esp+4Ch+var_34]
.text:0040C727                 jmp     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C727                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C72C ; ---------------------------------------------------------------------------
.text:0040C72C
.text:0040C72C loc_40C72C:                             ; CODE XREF: sub_40C270+105↑j
.text:0040C72C                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040C72C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C375 case 63
.text:0040C731                 jz      loc_40C67B      ; jumptable 0040CA42 cases 91,92,94,96,124
.text:0040C737                 cmp     [esp+4Ch+arg_10], 3
.text:0040C73C                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C73C                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C742                 lea     edx, [ebp+2]
.text:0040C745                 cmp     edx, [esp+4Ch+arg_C]
.text:0040C749                 jnb     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C749                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C74F                 mov     esi, [esp+4Ch+Str]
.text:0040C753                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:0040C758                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C758                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C75E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:0040C763                 movsx   eax, cl
.text:0040C766                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:0040C769                 cmp     eax, 1Dh
.text:0040C76C                 ja      def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C76C                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C772                 jmp     ds:jpt_40C772[eax*4] ; switch jump
.text:0040C772 ; ---------------------------------------------------------------------------
.text:0040C779                 align 4
.text:0040C77C jpt_40C772      dd offset loc_40C7F4    ; DATA XREF: sub_40C270+502↑r
.text:0040C77C                 dd offset def_40C772    ; jump table for switch statement
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset def_40C772
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C77C                 dd offset loc_40C7F4
.text:0040C7F4 ; ---------------------------------------------------------------------------
.text:0040C7F4
.text:0040C7F4 loc_40C7F4:                             ; CODE XREF: sub_40C270+502↑j
.text:0040C7F4                                         ; DATA XREF: sub_40C270:jpt_40C772↑o
.text:0040C7F4                 mov     ebp, edx        ; jumptable 0040C772 cases 33,39-41,45,47,60-62
.text:0040C7F6                 mov     bl, cl
.text:0040C7F8                 mov     edx, [esp+4Ch+arg_4]
.text:0040C7FC                 cmp     [esp+4Ch+var_34], edx
.text:0040C800                 jnb     short loc_40C80E
.text:0040C802                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C806                 mov     edi, [esp+4Ch+var_34]
.text:0040C80A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:0040C80E
.text:0040C80E loc_40C80E:                             ; CODE XREF: sub_40C270+590↑j
.text:0040C80E                 inc     [esp+4Ch+var_34]
.text:0040C812                 mov     eax, [esp+4Ch+arg_4]
.text:0040C816                 cmp     [esp+4Ch+var_34], eax
.text:0040C81A                 jnb     short loc_40C828
.text:0040C81C                 mov     edx, [esp+4Ch+arg_0]
.text:0040C820                 mov     esi, [esp+4Ch+var_34]
.text:0040C824                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:0040C828
.text:0040C828 loc_40C828:                             ; CODE XREF: sub_40C270+5AA↑j
.text:0040C828                 inc     [esp+4Ch+var_34]
.text:0040C82C                 mov     edi, [esp+4Ch+arg_4]
.text:0040C830                 cmp     [esp+4Ch+var_34], edi
.text:0040C834                 jnb     loc_40C723
.text:0040C83A                 mov     eax, [esp+4Ch+arg_0]
.text:0040C83E                 mov     ecx, [esp+4Ch+var_34]
.text:0040C842                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:0040C846                 jmp     loc_40C723
.text:0040C846 ; ---------------------------------------------------------------------------
.text:0040C84B                 align 10h
.text:0040C850
.text:0040C850 def_40C375:                             ; CODE XREF: sub_40C270+FF↑j
.text:0040C850                                         ; sub_40C270+105↑j
.text:0040C850                                         ; DATA XREF: ...
.text:0040C850                 cmp     [esp+4Ch+var_22], 0 ; jumptable 0040C375 default case, cases 1-6,14-31,64
.text:0040C855                 jz      loc_40C980
.text:0040C85B                 mov     [esp+4Ch+var_28], 1
.text:0040C863                 mov     esi, ds:__mb_cur_max
.text:0040C869                 movzx   edx, bl
.text:0040C86C                 cmp     dword ptr [esi], 1
.text:0040C86F                 jz      loc_40C964
.text:0040C875                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040C87D                 mov     [esp+4Ch+C], edx ; C
.text:0040C880                 call    _isctype
.text:0040C885
.text:0040C885 loc_40C885:                             ; CODE XREF: sub_40C270+705↓j
.text:0040C885                 test    eax, eax
.text:0040C887                 setnz   [esp+4Ch+var_29]
.text:0040C88C
.text:0040C88C loc_40C88C:                             ; CODE XREF: sub_40C270+7A5↓j
.text:0040C88C                 cmp     [esp+4Ch+var_21], 0
.text:0040C891                 lea     eax, [ebp+1]
.text:0040C894                 jz      loc_40C630
.text:0040C89A                 cmp     [esp+4Ch+var_29], 0
.text:0040C89F                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040C89F                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040C8A5
.text:0040C8A5 loc_40C8A5:                             ; CODE XREF: sub_40C270+7AB↓j
.text:0040C8A5                 mov     eax, [esp+4Ch+var_28]
.text:0040C8A9                 lea     edx, [eax+ebp]
.text:0040C8AC                 lea     esi, [esi+0]
.text:0040C8B0
.text:0040C8B0 loc_40C8B0:                             ; CODE XREF: sub_40C270+6EF↓j
.text:0040C8B0                 cmp     [esp+4Ch+var_21], 0
.text:0040C8B5                 jz      short loc_40C930
.text:0040C8B7                 cmp     [esp+4Ch+var_29], 0
.text:0040C8BC                 jnz     short loc_40C930
.text:0040C8BE                 mov     edi, [esp+4Ch+arg_4]
.text:0040C8C2                 cmp     [esp+4Ch+var_34], edi
.text:0040C8C6                 jnb     short loc_40C8D4
.text:0040C8C8                 mov     esi, [esp+4Ch+arg_0]
.text:0040C8CC                 mov     eax, [esp+4Ch+var_34]
.text:0040C8D0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:0040C8D4
.text:0040C8D4 loc_40C8D4:                             ; CODE XREF: sub_40C270+656↑j
.text:0040C8D4                 inc     [esp+4Ch+var_34]
.text:0040C8D8                 mov     ecx, [esp+4Ch+arg_4]
.text:0040C8DC                 cmp     [esp+4Ch+var_34], ecx
.text:0040C8E0                 jnb     short loc_40C8F5
.text:0040C8E2                 mov     cl, bl
.text:0040C8E4                 mov     esi, [esp+4Ch+arg_0]
.text:0040C8E8                 mov     edi, [esp+4Ch+var_34]
.text:0040C8EC                 shr     cl, 6
.text:0040C8EF                 add     cl, 30h ; '0'
.text:0040C8F2                 mov     [edi+esi], cl
.text:0040C8F5
.text:0040C8F5 loc_40C8F5:                             ; CODE XREF: sub_40C270+670↑j
.text:0040C8F5                 inc     [esp+4Ch+var_34]
.text:0040C8F9                 mov     edi, [esp+4Ch+arg_4]
.text:0040C8FD                 cmp     [esp+4Ch+var_34], edi
.text:0040C901                 jnb     short loc_40C919
.text:0040C903                 mov     cl, bl
.text:0040C905                 mov     esi, [esp+4Ch+arg_0]
.text:0040C909                 shr     cl, 3
.text:0040C90C                 mov     edi, [esp+4Ch+var_34]
.text:0040C910                 and     cl, 7
.text:0040C913                 add     cl, 30h ; '0'
.text:0040C916                 mov     [edi+esi], cl
.text:0040C919
.text:0040C919 loc_40C919:                             ; CODE XREF: sub_40C270+691↑j
.text:0040C919                 inc     [esp+4Ch+var_34]
.text:0040C91D                 and     bl, 7
.text:0040C920                 add     bl, 30h ; '0'
.text:0040C923                 lea     esi, [esi+0]
.text:0040C929                 lea     edi, [edi+0]
.text:0040C930
.text:0040C930 loc_40C930:                             ; CODE XREF: sub_40C270+645↑j
.text:0040C930                                         ; sub_40C270+64C↑j
.text:0040C930                 lea     eax, [ebp+1]
.text:0040C933                 cmp     edx, eax
.text:0040C935                 jbe     loc_40C630
.text:0040C93B                 mov     ebp, [esp+4Ch+arg_4]
.text:0040C93F                 cmp     [esp+4Ch+var_34], ebp
.text:0040C943                 jnb     short loc_40C950
.text:0040C945                 mov     ecx, [esp+4Ch+arg_0]
.text:0040C949                 mov     edi, [esp+4Ch+var_34]
.text:0040C94D                 mov     [edi+ecx], bl
.text:0040C950
.text:0040C950 loc_40C950:                             ; CODE XREF: sub_40C270+6D3↑j
.text:0040C950                 inc     [esp+4Ch+var_34]
.text:0040C954                 mov     ebp, eax
.text:0040C956                 mov     eax, [esp+4Ch+Str]
.text:0040C95A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:0040C95F                 jmp     loc_40C8B0
.text:0040C964 ; ---------------------------------------------------------------------------
.text:0040C964
.text:0040C964 loc_40C964:                             ; CODE XREF: sub_40C270+5FF↑j
.text:0040C964                 mov     ecx, ds:_pctype
.text:0040C96A                 mov     edi, [ecx]
.text:0040C96C                 movzx   eax, word ptr [edi+edx*2]
.text:0040C970                 and     eax, 157h
.text:0040C975                 jmp     loc_40C885
.text:0040C975 ; ---------------------------------------------------------------------------
.text:0040C97A                 align 10h
.text:0040C980
.text:0040C980 loc_40C980:                             ; CODE XREF: sub_40C270+5E5↑j
.text:0040C980                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:0040C985                 mov     [esp+4Ch+var_18._Wchar], 0
.text:0040C98D                 mov     [esp+4Ch+var_28], 0
.text:0040C995                 mov     [esp+4Ch+var_29], 1
.text:0040C99A                 jz      loc_40CB2C
.text:0040C9A0
.text:0040C9A0 loc_40C9A0:                             ; CODE XREF: sub_40C270+8CC↓j
.text:0040C9A0                 mov     ecx, [esp+4Ch+arg_C]
.text:0040C9A4                 lea     edx, [esp+4Ch+var_18]
.text:0040C9A8                 mov     edi, [esp+4Ch+Str]
.text:0040C9AC                 mov     [esp+4Ch+State], edx ; State
.text:0040C9B0                 lea     esi, [esp+4Ch+var_18._State]
.text:0040C9B4                 sub     ecx, ebp
.text:0040C9B6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:0040C9BA                 add     edi, ebp
.text:0040C9BC                 mov     [esp+4Ch+var_30], edi
.text:0040C9C0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:0040C9C4                 mov     [esp+4Ch+C], esi ; DstCh
.text:0040C9C7                 call    mbrtowc
.text:0040C9CC                 test    eax, eax
.text:0040C9CE                 mov     edi, eax
.text:0040C9D0                 jz      short loc_40CA10
.text:0040C9D2                 cmp     eax, 0FFFFFFFFh
.text:0040C9D5                 jz      loc_40CB22
.text:0040C9DB                 cmp     eax, 0FFFFFFFEh
.text:0040C9DE                 jz      loc_40CAE2
.text:0040C9E4                 cmp     [esp+4Ch+arg_10], 1
.text:0040C9E9                 jz      short loc_40CA20
.text:0040C9EB
.text:0040C9EB loc_40C9EB:                             ; CODE XREF: sub_40C270+7B9↓j
.text:0040C9EB                                         ; sub_40C270+86D↓j
.text:0040C9EB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:0040C9F0                 mov     [esp+4Ch+Type], 157h ; Type
.text:0040C9F8                 mov     [esp+4Ch+C], ecx ; C
.text:0040C9FB                 call    iswctype
.text:0040CA00                 test    eax, eax
.text:0040CA02                 jnz     short loc_40CA09
.text:0040CA04                 mov     [esp+4Ch+var_29], 0
.text:0040CA09
.text:0040CA09 loc_40CA09:                             ; CODE XREF: sub_40C270+792↑j
.text:0040CA09                 mov     [esp+4Ch+var_28], edi
.text:0040CA0D                 lea     esi, [esi+0]
.text:0040CA10
.text:0040CA10 loc_40CA10:                             ; CODE XREF: sub_40C270+760↑j
.text:0040CA10                                         ; sub_40C270+87B↓j ...
.text:0040CA10                 cmp     [esp+4Ch+var_28], 1
.text:0040CA15                 jbe     loc_40C88C
.text:0040CA1B                 jmp     loc_40C8A5
.text:0040CA20 ; ---------------------------------------------------------------------------
.text:0040CA20
.text:0040CA20 loc_40CA20:                             ; CODE XREF: sub_40C270+779↑j
.text:0040CA20                 cmp     [esp+4Ch+arg_10], eax
.text:0040CA24                 mov     edx, 1
.text:0040CA29                 jnb     short loc_40C9EB
.text:0040CA2B
.text:0040CA2B loc_40CA2B:                             ; CODE XREF: sub_40C270+867↓j
.text:0040CA2B                 mov     ecx, [esp+4Ch+Str]
.text:0040CA2F                 lea     esi, [edx+ebp]
.text:0040CA32                 movsx   eax, byte ptr [esi+ecx]
.text:0040CA36                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:0040CA39                 cmp     eax, 21h
.text:0040CA3C                 ja      def_40CA42      ; jumptable 0040CA42 default case, cases 93,95,97-123
.text:0040CA42                 jmp     ds:jpt_40CA42[eax*4] ; switch jump
.text:0040CA42 ; ---------------------------------------------------------------------------
.text:0040CA49                 align 4
.text:0040CA4C jpt_40CA42      dd offset loc_40C67B    ; DATA XREF: sub_40C270+7D2↑r
.text:0040CA4C                 dd offset loc_40C67B    ; jump table for switch statement
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset loc_40C67B
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset loc_40C67B
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset def_40CA42
.text:0040CA4C                 dd offset loc_40C67B
.text:0040CAD4 ; ---------------------------------------------------------------------------
.text:0040CAD4
.text:0040CAD4 def_40CA42:                             ; CODE XREF: sub_40C270+7CC↑j
.text:0040CAD4                                         ; sub_40C270+7D2↑j
.text:0040CAD4                                         ; DATA XREF: ...
.text:0040CAD4                 inc     edx             ; jumptable 0040CA42 default case, cases 93,95,97-123
.text:0040CAD5                 cmp     edx, edi
.text:0040CAD7                 jb      loc_40CA2B
.text:0040CADD                 jmp     loc_40C9EB
.text:0040CAE2 ; ---------------------------------------------------------------------------
.text:0040CAE2
.text:0040CAE2 loc_40CAE2:                             ; CODE XREF: sub_40C270+76E↑j
.text:0040CAE2                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040CAE6                 mov     [esp+4Ch+var_29], 0
.text:0040CAEB                 jnb     loc_40CA10
.text:0040CAF1                 mov     eax, [esp+4Ch+var_30]
.text:0040CAF5                 cmp     byte ptr [eax], 0
.text:0040CAF8                 jz      loc_40CA10
.text:0040CAFE
.text:0040CAFE loc_40CAFE:                             ; CODE XREF: sub_40C270+8AB↓j
.text:0040CAFE                 inc     [esp+4Ch+var_28]
.text:0040CB02                 mov     esi, [esp+4Ch+var_28]
.text:0040CB06                 lea     eax, [esi+ebp]
.text:0040CB09                 cmp     eax, [esp+4Ch+arg_C]
.text:0040CB0D                 jnb     loc_40CA10
.text:0040CB13                 mov     edi, [esp+4Ch+Str]
.text:0040CB17                 cmp     byte ptr [eax+edi], 0
.text:0040CB1B                 jnz     short loc_40CAFE
.text:0040CB1D                 jmp     loc_40CA10
.text:0040CB22 ; ---------------------------------------------------------------------------
.text:0040CB22
.text:0040CB22 loc_40CB22:                             ; CODE XREF: sub_40C270+765↑j
.text:0040CB22                 mov     [esp+4Ch+var_29], 0
.text:0040CB27                 jmp     loc_40CA10
.text:0040CB2C ; ---------------------------------------------------------------------------
.text:0040CB2C
.text:0040CB2C loc_40CB2C:                             ; CODE XREF: sub_40C270+72A↑j
.text:0040CB2C                 mov     edx, [esp+4Ch+Str]
.text:0040CB30                 mov     [esp+4Ch+C], edx ; Str
.text:0040CB33                 call    strlen
.text:0040CB38                 mov     [esp+4Ch+arg_C], eax
.text:0040CB3C                 jmp     loc_40C9A0
.text:0040CB41 ; ---------------------------------------------------------------------------
.text:0040CB41
.text:0040CB41 loc_40CB41:                             ; CODE XREF: sub_40C270+105↑j
.text:0040CB41                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040CB41                 mov     dl, bl          ; jumptable 0040C375 case 92
.text:0040CB43                 jmp     loc_40C674
.text:0040CB48 ; ---------------------------------------------------------------------------
.text:0040CB48
.text:0040CB48 loc_40CB48:                             ; CODE XREF: sub_40C270+105↑j
.text:0040CB48                                         ; sub_40C270+902↓j
.text:0040CB48                                         ; DATA XREF: ...
.text:0040CB48                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 0040C375 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040CB4D                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040CB4D                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040CB53                 jmp     loc_40C67B      ; jumptable 0040CA42 cases 91,92,94,96,124
.text:0040CB58 ; ---------------------------------------------------------------------------
.text:0040CB58
.text:0040CB58 loc_40CB58:                             ; CODE XREF: sub_40C270+105↑j
.text:0040CB58                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040CB58                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 0040C375 cases 123,125
.text:0040CB5D                 jz      short loc_40CB74
.text:0040CB5F                 cmp     [esp+4Ch+arg_C], 1
.text:0040CB64
.text:0040CB64 loc_40CB64:                             ; CODE XREF: sub_40C270+90C↓j
.text:0040CB64                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040CB64                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040CB6A
.text:0040CB6A loc_40CB6A:                             ; CODE XREF: sub_40C270+105↑j
.text:0040CB6A                                         ; DATA XREF: sub_40C270:jpt_40C375↑o
.text:0040CB6A                 test    ebp, ebp        ; jumptable 0040C375 cases 35,126
.text:0040CB6C                 jnz     def_40C772      ; jumptable 0040C375 cases 37,43-58,65-90,93,95,97-122
.text:0040CB6C                                         ; jumptable 0040C772 default case, cases 34-38,42-44,46,48-59
.text:0040CB72                 jmp     short loc_40CB48 ; jumptable 0040C375 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:0040CB74 ; ---------------------------------------------------------------------------
.text:0040CB74
.text:0040CB74 loc_40CB74:                             ; CODE XREF: sub_40C270+8ED↑j
.text:0040CB74                 mov     esi, [esp+4Ch+Str]
.text:0040CB78                 cmp     byte ptr [esi+1], 0
.text:0040CB7C                 jmp     short loc_40CB64
.text:0040CB7E ; ---------------------------------------------------------------------------
.text:0040CB7E
.text:0040CB7E loc_40CB7E:                             ; CODE XREF: sub_40C270:loc_40C30F↑j
.text:0040CB7E                 test    ebp, ebp
.text:0040CB80                 jnz     short loc_40CB8D
.text:0040CB82                 cmp     [esp+4Ch+arg_10], 1
.text:0040CB87                 jz      loc_40C67B      ; jumptable 0040CA42 cases 91,92,94,96,124
.text:0040CB8D
.text:0040CB8D loc_40CB8D:                             ; CODE XREF: sub_40C270+910↑j
.text:0040CB8D                 mov     esi, [esp+4Ch+var_1C]
.text:0040CB91                 test    esi, esi
.text:0040CB93                 jz      short loc_40CBC8
.text:0040CB95                 mov     edi, [esp+4Ch+var_1C]
.text:0040CB99                 movzx   eax, byte ptr [edi]
.text:0040CB9C                 test    al, al
.text:0040CB9E                 jz      short loc_40CBC8
.text:0040CBA0
.text:0040CBA0 loc_40CBA0:                             ; CODE XREF: sub_40C270+956↓j
.text:0040CBA0                 mov     ebp, [esp+4Ch+arg_4]
.text:0040CBA4                 cmp     [esp+4Ch+var_34], ebp
.text:0040CBA8                 jnb     short loc_40CBB5
.text:0040CBAA                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CBAE                 mov     ebx, [esp+4Ch+var_34]
.text:0040CBB2                 mov     [ebx+ecx], al
.text:0040CBB5
.text:0040CBB5 loc_40CBB5:                             ; CODE XREF: sub_40C270+938↑j
.text:0040CBB5                 inc     [esp+4Ch+var_1C]
.text:0040CBB9                 inc     [esp+4Ch+var_34]
.text:0040CBBD                 mov     edx, [esp+4Ch+var_1C]
.text:0040CBC1                 movzx   eax, byte ptr [edx]
.text:0040CBC4                 test    al, al
.text:0040CBC6                 jnz     short loc_40CBA0
.text:0040CBC8
.text:0040CBC8 loc_40CBC8:                             ; CODE XREF: sub_40C270+923↑j
.text:0040CBC8                                         ; sub_40C270+92E↑j
.text:0040CBC8                 mov     eax, [esp+4Ch+arg_4]
.text:0040CBCC                 cmp     [esp+4Ch+var_34], eax
.text:0040CBD0                 jnb     short loc_40CBDE
.text:0040CBD2                 mov     edi, [esp+4Ch+arg_0]
.text:0040CBD6                 mov     esi, [esp+4Ch+var_34]
.text:0040CBDA                 mov     byte ptr [esi+edi], 0
.text:0040CBDE
.text:0040CBDE loc_40CBDE:                             ; CODE XREF: sub_40C270+960↑j
.text:0040CBDE                 mov     eax, [esp+4Ch+var_34]
.text:0040CBE2                 jmp     loc_40C6AF
.text:0040CBE7 ; ---------------------------------------------------------------------------
.text:0040CBE7
.text:0040CBE7 loc_40CBE7:                             ; CODE XREF: sub_40C270+95↑j
.text:0040CBE7                 mov     ebx, [esp+4Ch+Str]
.text:0040CBEB                 cmp     byte ptr [ebp+ebx+0], 0
.text:0040CBF0                 jmp     loc_40C30F
.text:0040CBF5 ; ---------------------------------------------------------------------------
.text:0040CBF5
.text:0040CBF5 loc_40CBF5:                             ; CODE XREF: sub_40C270+3D↑j
.text:0040CBF5                                         ; DATA XREF: sub_40C270:jpt_40C2AD↑o
.text:0040CBF5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040C2AD case 2
.text:0040CBF9                 cmp     [esp+4Ch+var_34], edx
.text:0040CBFD                 jnb     short loc_40CC06
.text:0040CBFF                 mov     ecx, [esp+4Ch+arg_0]
.text:0040CC03                 mov     byte ptr [ecx], 27h ; '''
.text:0040CC06
.text:0040CC06 loc_40CC06:                             ; CODE XREF: sub_40C270+98D↑j
.text:0040CC06                 mov     [esp+4Ch+var_34], 1
.text:0040CC0E                 mov     [esp+4Ch+var_1C], 40C25Eh
.text:0040CC16                 jmp     loc_40C2F6
.text:0040CC1B ; ---------------------------------------------------------------------------
.text:0040CC1B
.text:0040CC1B loc_40CC1B:                             ; CODE XREF: sub_40C270+3D↑j
.text:0040CC1B                                         ; DATA XREF: sub_40C270:jpt_40C2AD↑o
.text:0040CC1B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040C2AD case 4
.text:0040CC20                 jmp     def_40C2AD      ; jumptable 0040C2AD default case, cases 0,1
.text:0040CC25 ; ---------------------------------------------------------------------------
.text:0040CC25
.text:0040CC25 loc_40CC25:                             ; CODE XREF: sub_40C270+3D↑j
.text:0040CC25                                         ; DATA XREF: sub_40C270:jpt_40C2AD↑o
.text:0040CC25                 mov     [esp+4Ch+C], 40C260h ; jumptable 0040C2AD cases 5,6
.text:0040CC2C                 call    ds:libintl_gettext
.text:0040CC32                 cmp     eax, 40C260h
.text:0040CC37                 mov     edi, eax
.text:0040CC39                 jz      short loc_40CCB0
.text:0040CC3B
.text:0040CC3B loc_40CC3B:                             ; CODE XREF: sub_40C270+A45↓j
.text:0040CC3B                                         ; sub_40C270+A4C↓j
.text:0040CC3B                 mov     [esp+4Ch+C], 40C25Eh
.text:0040CC42                 call    ds:libintl_gettext
.text:0040CC48                 cmp     eax, 40C25Eh
.text:0040CC4D                 mov     edx, eax
.text:0040CC4F                 jz      short loc_40CCA2
.text:0040CC51
.text:0040CC51 loc_40CC51:                             ; CODE XREF: sub_40C270+A37↓j
.text:0040CC51                                         ; sub_40C270+A3E↓j
.text:0040CC51                 mov     [esp+4Ch+var_1C], edi
.text:0040CC55                 cmp     byte ptr [edi], 0
.text:0040CC58                 jz      short loc_40CC88
.text:0040CC5A
.text:0040CC5A loc_40CC5A:                             ; CODE XREF: sub_40C270+A16↓j
.text:0040CC5A                 mov     ecx, [esp+4Ch+arg_4]
.text:0040CC5E                 cmp     [esp+4Ch+var_34], ecx
.text:0040CC62                 jnb     short loc_40CC77
.text:0040CC64                 mov     ebp, [esp+4Ch+var_1C]
.text:0040CC68                 mov     edi, [esp+4Ch+arg_0]
.text:0040CC6C                 mov     esi, [esp+4Ch+var_34]
.text:0040CC70                 movzx   ebx, byte ptr [ebp+0]
.text:0040CC74                 mov     [esi+edi], bl
.text:0040CC77
.text:0040CC77 loc_40CC77:                             ; CODE XREF: sub_40C270+9F2↑j
.text:0040CC77                 inc     [esp+4Ch+var_1C]
.text:0040CC7B                 inc     [esp+4Ch+var_34]
.text:0040CC7F                 mov     eax, [esp+4Ch+var_1C]
.text:0040CC83                 cmp     byte ptr [eax], 0
.text:0040CC86                 jnz     short loc_40CC5A
.text:0040CC88
.text:0040CC88 loc_40CC88:                             ; CODE XREF: sub_40C270+9E8↑j
.text:0040CC88                 mov     [esp+4Ch+var_21], 1
.text:0040CC8D                 mov     [esp+4Ch+var_1C], edx
.text:0040CC91                 mov     [esp+4Ch+C], edx ; Str
.text:0040CC94                 call    strlen
.text:0040CC99                 mov     [esp+4Ch+var_20], eax
.text:0040CC9D                 jmp     def_40C2AD      ; jumptable 0040C2AD default case, cases 0,1
.text:0040CCA2 ; ---------------------------------------------------------------------------
.text:0040CCA2
.text:0040CCA2 loc_40CCA2:                             ; CODE XREF: sub_40C270+9DF↑j
.text:0040CCA2                 cmp     [esp+4Ch+arg_10], 6
.text:0040CCA7                 jnz     short loc_40CC51
.text:0040CCA9                 mov     edx, offset asc_40C25C ; "\"'`"
.text:0040CCAE                 jmp     short loc_40CC51
.text:0040CCB0 ; ---------------------------------------------------------------------------
.text:0040CCB0
.text:0040CCB0 loc_40CCB0:                             ; CODE XREF: sub_40C270+9C9↑j
.text:0040CCB0                 cmp     [esp+4Ch+arg_10], 6
.text:0040CCB5                 jnz     short loc_40CC3B
.text:0040CCB7                 mov     edi, offset asc_40C25C ; "\"'`"
.text:0040CCBC                 jmp     loc_40CC3B
.text:0040CCBC sub_40C270      endp
.text:0040CCBC
.text:0040CCC1 ; ---------------------------------------------------------------------------
.text:0040CCC1                 jmp     short loc_40CCD0
.text:0040CCC1 ; ---------------------------------------------------------------------------
.text:0040CCC3                 align 10h
.text:0040CCD0
.text:0040CCD0 loc_40CCD0:                             ; CODE XREF: .text:0040CCC1↑j
.text:0040CCD0                 sub     esp, 0Ch
.text:0040CCD3                 mov     [esp+4], ebx
.text:0040CCD7                 mov     [esp+8], esi
.text:0040CCDB                 call    _errno
.text:0040CCE0                 mov     esi, [eax]
.text:0040CCE2                 mov     dword ptr [esp], 24h ; '$'
.text:0040CCE9                 call    sub_40A850
.text:0040CCEE                 mov     edx, [esp+10h]
.text:0040CCF2                 mov     ebx, eax
.text:0040CCF4                 test    edx, edx
.text:0040CCF6                 jz      short loc_40CD41
.text:0040CCF8
.text:0040CCF8 loc_40CCF8:                             ; CODE XREF: .text:0040CD46↓j
.text:0040CCF8                 mov     ecx, [edx]
.text:0040CCFA                 mov     [ebx], ecx
.text:0040CCFC                 mov     ecx, [edx+4]
.text:0040CCFF                 mov     [ebx+4], ecx
.text:0040CD02                 mov     ecx, [edx+8]
.text:0040CD05                 mov     [ebx+8], ecx
.text:0040CD08                 mov     ecx, [edx+0Ch]
.text:0040CD0B                 mov     [ebx+0Ch], ecx
.text:0040CD0E                 mov     ecx, [edx+10h]
.text:0040CD11                 mov     [ebx+10h], ecx
.text:0040CD14                 mov     ecx, [edx+14h]
.text:0040CD17                 mov     [ebx+14h], ecx
.text:0040CD1A                 mov     ecx, [edx+18h]
.text:0040CD1D                 mov     [ebx+18h], ecx
.text:0040CD20                 mov     ecx, [edx+1Ch]
.text:0040CD23                 mov     [ebx+1Ch], ecx
.text:0040CD26                 mov     ecx, [edx+20h]
.text:0040CD29                 mov     [ebx+20h], ecx
.text:0040CD2C                 call    _errno
.text:0040CD31                 mov     [eax], esi
.text:0040CD33                 mov     esi, [esp+8]
.text:0040CD37                 mov     eax, ebx
.text:0040CD39                 mov     ebx, [esp+4]
.text:0040CD3D                 add     esp, 0Ch
.text:0040CD40                 retn
.text:0040CD41 ; ---------------------------------------------------------------------------
.text:0040CD41
.text:0040CD41 loc_40CD41:                             ; CODE XREF: .text:0040CCF6↑j
.text:0040CD41                 mov     edx, offset dword_4201F0
.text:0040CD46                 jmp     short loc_40CCF8
.text:0040CD46 ; ---------------------------------------------------------------------------
.text:0040CD48                 align 10h
.text:0040CD50                 mov     eax, [esp+4]
.text:0040CD54                 test    eax, eax
.text:0040CD56                 jz      short loc_40CD60
.text:0040CD58
.text:0040CD58 loc_40CD58:                             ; CODE XREF: .text:0040CD65↓j
.text:0040CD58                 mov     eax, [eax]
.text:0040CD5A                 retn
.text:0040CD5A ; ---------------------------------------------------------------------------
.text:0040CD5B                 align 10h
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: .text:0040CD56↑j
.text:0040CD60                 mov     eax, offset dword_4201F0
.text:0040CD65                 jmp     short loc_40CD58
.text:0040CD65 ; ---------------------------------------------------------------------------
.text:0040CD67                 align 10h
.text:0040CD70                 mov     edx, [esp+4]
.text:0040CD74                 test    edx, edx
.text:0040CD76                 jz      short loc_40CD80
.text:0040CD78
.text:0040CD78 loc_40CD78:                             ; CODE XREF: .text:0040CD85↓j
.text:0040CD78                 mov     ecx, [esp+8]
.text:0040CD7C                 mov     [edx], ecx
.text:0040CD7E                 retn
.text:0040CD7E ; ---------------------------------------------------------------------------
.text:0040CD7F                 align 10h
.text:0040CD80
.text:0040CD80 loc_40CD80:                             ; CODE XREF: .text:0040CD76↑j
.text:0040CD80                 mov     edx, offset dword_4201F0
.text:0040CD85                 jmp     short loc_40CD78
.text:0040CD85 ; ---------------------------------------------------------------------------
.text:0040CD87                 align 10h
.text:0040CD90                 sub     esp, 8
.text:0040CD93                 mov     eax, [esp+0Ch]
.text:0040CD97                 movzx   ecx, byte ptr [esp+10h]
.text:0040CD9C                 mov     [esp], ebx
.text:0040CD9F                 mov     ebx, [esp+14h]
.text:0040CDA3                 mov     [esp+4], esi
.text:0040CDA7                 mov     dl, cl
.text:0040CDA9                 shr     dl, 5
.text:0040CDAC                 movzx   edx, dl
.text:0040CDAF                 shl     edx, 2
.text:0040CDB2                 test    eax, eax
.text:0040CDB4                 lea     esi, [edx+eax+4]
.text:0040CDB8                 jz      short loc_40CDE0
.text:0040CDBA
.text:0040CDBA loc_40CDBA:                             ; CODE XREF: .text:0040CDE6↓j
.text:0040CDBA                 mov     edx, [esi]
.text:0040CDBC                 and     ecx, 1Fh
.text:0040CDBF                 and     ebx, 1
.text:0040CDC2                 mov     eax, edx
.text:0040CDC4                 shr     eax, cl
.text:0040CDC6                 and     eax, 1
.text:0040CDC9                 xor     ebx, eax
.text:0040CDCB                 shl     ebx, cl
.text:0040CDCD                 xor     edx, ebx
.text:0040CDCF                 mov     [esi], edx
.text:0040CDD1                 mov     ebx, [esp]
.text:0040CDD4                 mov     esi, [esp+4]
.text:0040CDD8                 add     esp, 8
.text:0040CDDB                 retn
.text:0040CDDB ; ---------------------------------------------------------------------------
.text:0040CDDC                 align 10h
.text:0040CDE0
.text:0040CDE0 loc_40CDE0:                             ; CODE XREF: .text:0040CDB8↑j
.text:0040CDE0                 lea     esi, dword_4201F4[edx]
.text:0040CDE6                 jmp     short loc_40CDBA
.text:0040CDE6 ; ---------------------------------------------------------------------------
.text:0040CDE8                 align 10h
.text:0040CDF0                 sub     esp, 2Ch
.text:0040CDF3                 mov     [esp+24h], ebx
.text:0040CDF7                 mov     ebx, [esp+40h]
.text:0040CDFB                 mov     [esp+28h], esi
.text:0040CDFF                 test    ebx, ebx
.text:0040CE01                 jz      short loc_40CE50
.text:0040CE03
.text:0040CE03 loc_40CE03:                             ; CODE XREF: .text:0040CE55↓j
.text:0040CE03                 call    _errno
.text:0040CE08                 mov     esi, [eax]
.text:0040CE0A                 mov     [esp+14h], ebx
.text:0040CE0E                 mov     edx, [ebx]
.text:0040CE10                 mov     ecx, [esp+38h]
.text:0040CE14                 mov     ebx, [esp+3Ch]
.text:0040CE18                 mov     [esp+10h], edx
.text:0040CE1C                 mov     edx, [esp+34h]
.text:0040CE20                 mov     [esp+0Ch], ebx
.text:0040CE24                 mov     [esp+8], ecx
.text:0040CE28                 mov     [esp+4], edx
.text:0040CE2C                 mov     edx, [esp+30h]
.text:0040CE30                 mov     [esp], edx
.text:0040CE33                 call    sub_40C270
.text:0040CE38                 mov     ebx, eax
.text:0040CE3A                 call    _errno
.text:0040CE3F                 mov     [eax], esi
.text:0040CE41                 mov     esi, [esp+28h]
.text:0040CE45                 mov     eax, ebx
.text:0040CE47                 mov     ebx, [esp+24h]
.text:0040CE4B                 add     esp, 2Ch
.text:0040CE4E                 retn
.text:0040CE4E ; ---------------------------------------------------------------------------
.text:0040CE4F                 align 10h
.text:0040CE50
.text:0040CE50 loc_40CE50:                             ; CODE XREF: .text:0040CE01↑j
.text:0040CE50                 mov     ebx, offset dword_4201F0
.text:0040CE55                 jmp     short loc_40CE03
.text:0040CE55 ; ---------------------------------------------------------------------------
.text:0040CE57                 align 10h
.text:0040CE60                 push    ebp
.text:0040CE61                 push    edi
.text:0040CE62                 push    esi
.text:0040CE63                 push    ebx
.text:0040CE64                 sub     esp, 2Ch
.text:0040CE67                 mov     ebp, [esp+48h]
.text:0040CE6B                 call    _errno
.text:0040CE70                 mov     edx, [eax]
.text:0040CE72                 test    ebp, ebp
.text:0040CE74                 mov     ebx, ebp
.text:0040CE76                 mov     [esp+28h], edx
.text:0040CE7A                 jz      loc_40CF30
.text:0040CE80
.text:0040CE80 loc_40CE80:                             ; CODE XREF: .text:0040CF35↓j
.text:0040CE80                 call    _errno
.text:0040CE85                 mov     edi, [eax]
.text:0040CE87                 mov     esi, ebp
.text:0040CE89                 mov     [esp+14h], ebx
.text:0040CE8D                 mov     ecx, [ebx]
.text:0040CE8F                 mov     dword ptr [esp], 0
.text:0040CE96                 mov     edx, [esp+44h]
.text:0040CE9A                 mov     dword ptr [esp+4], 0
.text:0040CEA2                 mov     eax, [esp+40h]
.text:0040CEA6                 mov     [esp+10h], ecx
.text:0040CEAA                 mov     [esp+0Ch], edx
.text:0040CEAE                 mov     [esp+8], eax
.text:0040CEB2                 call    sub_40C270
.text:0040CEB7                 mov     ebx, eax
.text:0040CEB9                 call    _errno
.text:0040CEBE                 mov     [eax], edi
.text:0040CEC0                 lea     edi, [ebx+1]
.text:0040CEC3                 mov     [esp], edi
.text:0040CEC6                 call    sub_40A850
.text:0040CECB                 mov     [esp+24h], eax
.text:0040CECF                 test    ebp, ebp
.text:0040CED1                 jz      short loc_40CF22
.text:0040CED3
.text:0040CED3 loc_40CED3:                             ; CODE XREF: .text:0040CF27↓j
.text:0040CED3                 call    _errno
.text:0040CED8                 mov     ebp, [eax]
.text:0040CEDA                 mov     [esp+14h], esi
.text:0040CEDE                 mov     ecx, [esi]
.text:0040CEE0                 mov     [esp+4], edi
.text:0040CEE4                 mov     edx, [esp+44h]
.text:0040CEE8                 mov     esi, [esp+24h]
.text:0040CEEC                 mov     [esp+10h], ecx
.text:0040CEF0                 mov     eax, [esp+40h]
.text:0040CEF4                 mov     [esp+0Ch], edx
.text:0040CEF8                 mov     [esp], esi
.text:0040CEFB                 mov     [esp+8], eax
.text:0040CEFF                 call    sub_40C270
.text:0040CF04                 call    _errno
.text:0040CF09                 mov     [eax], ebp
.text:0040CF0B                 call    _errno
.text:0040CF10                 mov     ebx, [esp+28h]
.text:0040CF14                 mov     [eax], ebx
.text:0040CF16                 mov     eax, [esp+24h]
.text:0040CF1A                 add     esp, 2Ch
.text:0040CF1D                 pop     ebx
.text:0040CF1E                 pop     esi
.text:0040CF1F                 pop     edi
.text:0040CF20                 pop     ebp
.text:0040CF21                 retn
.text:0040CF22 ; ---------------------------------------------------------------------------
.text:0040CF22
.text:0040CF22 loc_40CF22:                             ; CODE XREF: .text:0040CED1↑j
.text:0040CF22                 mov     esi, offset dword_4201F0
.text:0040CF27                 jmp     short loc_40CED3
.text:0040CF27 ; ---------------------------------------------------------------------------
.text:0040CF29                 align 10h
.text:0040CF30
.text:0040CF30 loc_40CF30:                             ; CODE XREF: .text:0040CE7A↑j
.text:0040CF30                 mov     ebx, offset dword_4201F0
.text:0040CF35                 jmp     loc_40CE80
.text:0040CF35 ; ---------------------------------------------------------------------------
.text:0040CF3A                 align 10h
.text:0040CF40                 sub     esp, 1Ch
.text:0040CF43                 mov     edx, [esp+24h]
.text:0040CF47                 mov     dword ptr [esp+0Ch], offset dword_4201F0
.text:0040CF4F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040CF57                 mov     [esp+4], edx
.text:0040CF5B                 mov     edx, [esp+20h]
.text:0040CF5F                 mov     [esp], edx
.text:0040CF62                 call    sub_40D3B0
.text:0040CF67                 add     esp, 1Ch
.text:0040CF6A                 retn
.text:0040CF6A ; ---------------------------------------------------------------------------
.text:0040CF6B                 align 10h
.text:0040CF70                 sub     esp, 1Ch
.text:0040CF73                 mov     edx, [esp+20h]
.text:0040CF77                 mov     dword ptr [esp+0Ch], offset dword_4201F0
.text:0040CF7F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040CF87                 mov     [esp+4], edx
.text:0040CF8B                 mov     dword ptr [esp], 0
.text:0040CF92                 call    sub_40D3B0
.text:0040CF97                 add     esp, 1Ch
.text:0040CF9A                 retn
.text:0040CF9A ; ---------------------------------------------------------------------------
.text:0040CF9B                 align 10h
.text:0040CFA0
.text:0040CFA0 ; =============== S U B R O U T I N E =======================================
.text:0040CFA0
.text:0040CFA0
.text:0040CFA0 ; int __cdecl sub_40CFA0(int, int, char *)
.text:0040CFA0 sub_40CFA0      proc near               ; CODE XREF: .text:0040865E↑p
.text:0040CFA0                                         ; sub_408810+96↑p ...
.text:0040CFA0
.text:0040CFA0 var_BC          = dword ptr -0BCh
.text:0040CFA0 var_B8          = dword ptr -0B8h
.text:0040CFA0 var_B4          = dword ptr -0B4h
.text:0040CFA0 var_B0          = dword ptr -0B0h
.text:0040CFA0 var_AC          = dword ptr -0ACh
.text:0040CFA0 var_A8          = dword ptr -0A8h
.text:0040CFA0 var_A4          = dword ptr -0A4h
.text:0040CFA0 var_A0          = dword ptr -0A0h
.text:0040CFA0 var_9C          = dword ptr -9Ch
.text:0040CFA0 var_98          = dword ptr -98h
.text:0040CFA0 var_94          = dword ptr -94h
.text:0040CFA0 var_90          = dword ptr -90h
.text:0040CFA0 var_8C          = dword ptr -8Ch
.text:0040CFA0 var_7C          = dword ptr -7Ch
.text:0040CFA0 var_78          = dword ptr -78h
.text:0040CFA0 var_74          = dword ptr -74h
.text:0040CFA0 var_70          = dword ptr -70h
.text:0040CFA0 var_6C          = dword ptr -6Ch
.text:0040CFA0 var_68          = dword ptr -68h
.text:0040CFA0 var_64          = dword ptr -64h
.text:0040CFA0 var_60          = dword ptr -60h
.text:0040CFA0 var_5C          = dword ptr -5Ch
.text:0040CFA0 var_4C          = dword ptr -4Ch
.text:0040CFA0 var_48          = dword ptr -48h
.text:0040CFA0 var_44          = dword ptr -44h
.text:0040CFA0 var_40          = dword ptr -40h
.text:0040CFA0 var_3C          = dword ptr -3Ch
.text:0040CFA0 var_38          = dword ptr -38h
.text:0040CFA0 var_34          = dword ptr -34h
.text:0040CFA0 var_30          = dword ptr -30h
.text:0040CFA0 var_2C          = dword ptr -2Ch
.text:0040CFA0 arg_0           = dword ptr  4
.text:0040CFA0 arg_4           = dword ptr  8
.text:0040CFA0 arg_8           = dword ptr  0Ch
.text:0040CFA0
.text:0040CFA0                 push    ebp
.text:0040CFA1                 xor     eax, eax
.text:0040CFA3                 mov     ecx, 8
.text:0040CFA8                 push    edi
.text:0040CFA9                 push    esi
.text:0040CFAA                 push    ebx
.text:0040CFAB                 sub     esp, 0ACh
.text:0040CFB1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040CFB8                 cld
.text:0040CFB9                 lea     edi, [esp+0BCh+var_A8]
.text:0040CFBD                 mov     [esp+0BCh+var_AC], ebp
.text:0040CFC1                 rep stosd
.text:0040CFC3                 mov     eax, [esp+0BCh+var_8C]
.text:0040CFC7                 mov     edi, [esp+0BCh+var_AC]
.text:0040CFCB                 mov     esi, [esp+0BCh+var_A8]
.text:0040CFCF                 mov     [esp+0BCh+var_5C], eax
.text:0040CFD3                 mov     ebp, [esp+0BCh+var_A4]
.text:0040CFD7                 mov     eax, [esp+0BCh+var_AC]
.text:0040CFDB                 mov     [esp+0BCh+var_7C], edi
.text:0040CFDF                 mov     ecx, [esp+0BCh+var_94]
.text:0040CFE3                 mov     edi, [esp+0BCh+var_A0]
.text:0040CFE7                 mov     [esp+0BCh+var_78], esi
.text:0040CFEB                 mov     edx, [esp+0BCh+var_90]
.text:0040CFEF                 mov     esi, [esp+0BCh+var_9C]
.text:0040CFF3                 mov     [esp+0BCh+var_4C], eax
.text:0040CFF7                 mov     ebx, [esp+0BCh+var_98]
.text:0040CFFB                 mov     eax, [esp+0BCh+var_A8]
.text:0040CFFF                 mov     [esp+0BCh+var_74], ebp
.text:0040D003                 mov     [esp+0BCh+var_70], edi
.text:0040D007                 mov     [esp+0BCh+var_6C], esi
.text:0040D00B                 mov     [esp+0BCh+var_68], ebx
.text:0040D00F                 mov     [esp+0BCh+var_64], ecx
.text:0040D013                 mov     [esp+0BCh+var_60], edx
.text:0040D017                 mov     [esp+0BCh+var_48], eax
.text:0040D01B                 mov     [esp+0BCh+var_44], ebp
.text:0040D01F                 mov     [esp+0BCh+var_40], edi
.text:0040D023                 mov     [esp+0BCh+var_3C], esi
.text:0040D02A                 mov     [esp+0BCh+var_38], ebx
.text:0040D031                 mov     ebx, [esp+0BCh+var_8C]
.text:0040D035                 mov     [esp+0BCh+var_30], edx
.text:0040D03C                 mov     edx, [esp+0BCh+arg_8]
.text:0040D043                 mov     [esp+0BCh+var_34], ecx
.text:0040D04A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040D04E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:0040D052                 mov     edx, [esp+0BCh+arg_0]
.text:0040D059                 mov     [esp+0BCh+var_2C], ebx
.text:0040D060                 mov     [esp+0BCh+var_B0], ecx ; int
.text:0040D064                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040D06C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040D06F                 call    sub_40D3B0
.text:0040D074                 add     esp, 0ACh
.text:0040D07A                 pop     ebx
.text:0040D07B                 pop     esi
.text:0040D07C                 pop     edi
.text:0040D07D                 pop     ebp
.text:0040D07E                 retn
.text:0040D07E sub_40CFA0      endp
.text:0040D07E
.text:0040D07E ; ---------------------------------------------------------------------------
.text:0040D07F                 align 10h
.text:0040D080                 push    ebp
.text:0040D081                 xor     eax, eax
.text:0040D083                 mov     ecx, 8
.text:0040D088                 push    edi
.text:0040D089                 push    esi
.text:0040D08A                 push    ebx
.text:0040D08B                 sub     esp, 0ACh
.text:0040D091                 mov     edx, [esp+0C4h]
.text:0040D098                 cld
.text:0040D099                 lea     edi, [esp+14h]
.text:0040D09D                 mov     [esp+10h], edx
.text:0040D0A1                 rep stosd
.text:0040D0A3                 mov     eax, [esp+30h]
.text:0040D0A7                 mov     ebp, [esp+10h]
.text:0040D0AB                 mov     edi, [esp+14h]
.text:0040D0AF                 mov     [esp+60h], eax
.text:0040D0B3                 mov     esi, [esp+20h]
.text:0040D0B7                 mov     eax, [esp+10h]
.text:0040D0BB                 mov     [esp+40h], ebp
.text:0040D0BF                 mov     ecx, [esp+28h]
.text:0040D0C3                 mov     ebp, [esp+18h]
.text:0040D0C7                 mov     [esp+44h], edi
.text:0040D0CB                 mov     edx, [esp+2Ch]
.text:0040D0CF                 mov     edi, [esp+1Ch]
.text:0040D0D3                 mov     [esp+70h], eax
.text:0040D0D7                 mov     ebx, [esp+24h]
.text:0040D0DB                 mov     eax, [esp+14h]
.text:0040D0DF                 mov     [esp+48h], ebp
.text:0040D0E3                 mov     [esp+4Ch], edi
.text:0040D0E7                 mov     [esp+50h], esi
.text:0040D0EB                 mov     [esp+54h], ebx
.text:0040D0EF                 mov     [esp+58h], ecx
.text:0040D0F3                 mov     [esp+5Ch], edx
.text:0040D0F7                 mov     [esp+74h], eax
.text:0040D0FB                 mov     [esp+78h], ebp
.text:0040D0FF                 mov     [esp+7Ch], edi
.text:0040D103                 mov     [esp+80h], esi
.text:0040D10A                 mov     [esp+84h], ebx
.text:0040D111                 mov     esi, [esp+30h]
.text:0040D115                 lea     ebx, [esp+70h]
.text:0040D119                 mov     [esp+8Ch], edx
.text:0040D120                 mov     edx, [esp+0C8h]
.text:0040D127                 mov     [esp+88h], ecx
.text:0040D12E                 mov     ecx, [esp+0CCh]
.text:0040D135                 mov     [esp+4], edx
.text:0040D139                 mov     edx, [esp+0C0h]
.text:0040D140                 mov     [esp+90h], esi
.text:0040D147                 mov     [esp+0Ch], ebx
.text:0040D14B                 mov     [esp+8], ecx
.text:0040D14F                 mov     [esp], edx
.text:0040D152                 call    sub_40D3B0
.text:0040D157                 add     esp, 0ACh
.text:0040D15D                 pop     ebx
.text:0040D15E                 pop     esi
.text:0040D15F                 pop     edi
.text:0040D160                 pop     ebp
.text:0040D161                 retn
.text:0040D161 ; ---------------------------------------------------------------------------
.text:0040D162                 align 10h
.text:0040D170                 push    ebp
.text:0040D171                 xor     eax, eax
.text:0040D173                 mov     ecx, 8
.text:0040D178                 push    edi
.text:0040D179                 push    esi
.text:0040D17A                 push    ebx
.text:0040D17B                 sub     esp, 0ACh
.text:0040D181                 mov     edi, [esp+0C0h]
.text:0040D188                 cld
.text:0040D189                 mov     [esp+10h], edi
.text:0040D18D                 lea     edi, [esp+14h]
.text:0040D191                 rep stosd
.text:0040D193                 mov     eax, [esp+30h]
.text:0040D197                 mov     esi, [esp+10h]
.text:0040D19B                 mov     ebx, [esp+14h]
.text:0040D19F                 mov     [esp+60h], eax
.text:0040D1A3                 mov     ebp, [esp+18h]
.text:0040D1A7                 mov     eax, [esp+10h]
.text:0040D1AB                 mov     [esp+40h], esi
.text:0040D1AF                 mov     edi, [esp+1Ch]
.text:0040D1B3                 mov     esi, [esp+20h]
.text:0040D1B7                 mov     [esp+44h], ebx
.text:0040D1BB                 mov     ecx, [esp+28h]
.text:0040D1BF                 mov     edx, [esp+2Ch]
.text:0040D1C3                 mov     [esp+70h], eax
.text:0040D1C7                 mov     ebx, [esp+24h]
.text:0040D1CB                 mov     eax, [esp+14h]
.text:0040D1CF                 mov     [esp+48h], ebp
.text:0040D1D3                 mov     [esp+4Ch], edi
.text:0040D1D7                 mov     [esp+50h], esi
.text:0040D1DB                 mov     [esp+54h], ebx
.text:0040D1DF                 mov     [esp+58h], ecx
.text:0040D1E3                 mov     [esp+5Ch], edx
.text:0040D1E7                 mov     [esp+74h], eax
.text:0040D1EB                 mov     [esp+78h], ebp
.text:0040D1EF                 mov     [esp+7Ch], edi
.text:0040D1F3                 mov     [esp+80h], esi
.text:0040D1FA                 mov     [esp+84h], ebx
.text:0040D201                 mov     [esp+8Ch], edx
.text:0040D208                 lea     edx, [esp+70h]
.text:0040D20C                 mov     [esp+88h], ecx
.text:0040D213                 mov     ecx, [esp+30h]
.text:0040D217                 mov     [esp+0Ch], edx
.text:0040D21B                 mov     edx, [esp+0C4h]
.text:0040D222                 mov     [esp+90h], ecx
.text:0040D229                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D231                 mov     [esp+4], edx
.text:0040D235                 mov     dword ptr [esp], 0
.text:0040D23C                 call    sub_40D3B0
.text:0040D241                 add     esp, 0ACh
.text:0040D247                 pop     ebx
.text:0040D248                 pop     esi
.text:0040D249                 pop     edi
.text:0040D24A                 pop     ebp
.text:0040D24B                 retn
.text:0040D24B ; ---------------------------------------------------------------------------
.text:0040D24C                 align 10h
.text:0040D250                 push    edi
.text:0040D251                 push    esi
.text:0040D252                 push    ebx
.text:0040D253                 sub     esp, 40h
.text:0040D256                 mov     edx, ds:dword_4201FC
.text:0040D25C                 mov     ebx, ds:dword_4201F0
.text:0040D262                 mov     esi, ds:dword_4201F8
.text:0040D268                 mov     edi, ds:dword_4201F4
.text:0040D26E                 mov     [esp+1Ch], edx
.text:0040D272                 mov     ecx, ds:dword_420200
.text:0040D278                 mov     edx, ds:dword_420210
.text:0040D27E                 mov     [esp+10h], ebx
.text:0040D282                 mov     ebx, ds:dword_420204
.text:0040D288                 mov     [esp+30h], edx
.text:0040D28C                 movzx   edx, byte ptr [esp+54h]
.text:0040D291                 mov     [esp+18h], esi
.text:0040D295                 mov     esi, ds:dword_42020C
.text:0040D29B                 mov     [esp+14h], edi
.text:0040D29F                 mov     edi, ds:dword_420208
.text:0040D2A5                 mov     [esp+20h], ecx
.text:0040D2A9                 mov     cl, dl
.text:0040D2AB                 shr     cl, 5
.text:0040D2AE                 mov     [esp+24h], ebx
.text:0040D2B2                 movzx   ebx, cl
.text:0040D2B5                 mov     [esp+2Ch], esi
.text:0040D2B9                 lea     esi, [esp+10h]
.text:0040D2BD                 mov     [esp+28h], edi
.text:0040D2C1                 lea     edi, [esi+ebx*4]
.text:0040D2C4                 mov     ebx, edx
.text:0040D2C6                 mov     edx, [edi+4]
.text:0040D2C9                 and     ebx, 1Fh
.text:0040D2CC                 mov     cl, bl
.text:0040D2CE                 mov     eax, edx
.text:0040D2D0                 shr     eax, cl
.text:0040D2D2                 and     eax, 1
.text:0040D2D5                 xor     eax, 1
.text:0040D2D8                 shl     eax, cl
.text:0040D2DA                 xor     edx, eax
.text:0040D2DC                 mov     [edi+4], edx
.text:0040D2DF                 mov     edx, [esp+50h]
.text:0040D2E3                 mov     [esp+0Ch], esi
.text:0040D2E7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040D2EF                 mov     [esp+4], edx
.text:0040D2F3                 mov     dword ptr [esp], 0
.text:0040D2FA                 call    sub_40D3B0
.text:0040D2FF                 add     esp, 40h
.text:0040D302                 pop     ebx
.text:0040D303                 pop     esi
.text:0040D304                 pop     edi
.text:0040D305                 retn
.text:0040D305 ; ---------------------------------------------------------------------------
.text:0040D306                 align 10h
.text:0040D310
.text:0040D310 ; =============== S U B R O U T I N E =======================================
.text:0040D310
.text:0040D310
.text:0040D310 ; int __cdecl sub_40D310(char *)
.text:0040D310 sub_40D310      proc near               ; CODE XREF: sub_40A730+64↑p
.text:0040D310
.text:0040D310 var_4C          = dword ptr -4Ch
.text:0040D310 var_48          = dword ptr -48h
.text:0040D310 var_44          = dword ptr -44h
.text:0040D310 var_40          = dword ptr -40h
.text:0040D310 var_3C          = dword ptr -3Ch
.text:0040D310 var_38          = dword ptr -38h
.text:0040D310 var_34          = dword ptr -34h
.text:0040D310 var_30          = dword ptr -30h
.text:0040D310 var_2C          = dword ptr -2Ch
.text:0040D310 var_28          = dword ptr -28h
.text:0040D310 var_24          = dword ptr -24h
.text:0040D310 var_20          = dword ptr -20h
.text:0040D310 var_1C          = dword ptr -1Ch
.text:0040D310 arg_0           = dword ptr  4
.text:0040D310
.text:0040D310                 sub     esp, 4Ch
.text:0040D313                 mov     ecx, ds:dword_4201F0
.text:0040D319                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:0040D321                 mov     edx, ds:dword_4201F4
.text:0040D327                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040D32E                 mov     [esp+4Ch+var_3C], ecx
.text:0040D332                 mov     ecx, ds:dword_4201FC
.text:0040D338                 mov     [esp+4Ch+var_38], edx
.text:0040D33C                 mov     edx, ds:dword_4201F8
.text:0040D342                 mov     [esp+4Ch+var_30], ecx
.text:0040D346                 mov     ecx, ds:dword_420200
.text:0040D34C                 mov     eax, edx
.text:0040D34E                 shr     eax, 1Ah
.text:0040D351                 and     eax, 1
.text:0040D354                 xor     eax, 1
.text:0040D357                 mov     [esp+4Ch+var_2C], ecx
.text:0040D35B                 shl     eax, 1Ah
.text:0040D35E                 mov     ecx, ds:dword_420204
.text:0040D364                 xor     edx, eax
.text:0040D366                 mov     [esp+4Ch+var_34], edx
.text:0040D36A                 mov     edx, [esp+4Ch+arg_0]
.text:0040D36E                 mov     [esp+4Ch+var_28], ecx
.text:0040D372                 mov     ecx, ds:dword_420208
.text:0040D378                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040D37C                 mov     [esp+4Ch+var_24], ecx
.text:0040D380                 mov     ecx, ds:dword_42020C
.text:0040D386                 mov     [esp+4Ch+var_20], ecx
.text:0040D38A                 mov     ecx, ds:dword_420210
.text:0040D390                 mov     [esp+4Ch+var_1C], ecx
.text:0040D394                 lea     ecx, [esp+4Ch+var_3C]
.text:0040D398                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040D39C                 call    sub_40D3B0
.text:0040D3A1                 add     esp, 4Ch
.text:0040D3A4                 retn
.text:0040D3A4 sub_40D310      endp
.text:0040D3A4
.text:0040D3A4 ; ---------------------------------------------------------------------------
.text:0040D3A5                 align 10h
.text:0040D3B0
.text:0040D3B0 ; =============== S U B R O U T I N E =======================================
.text:0040D3B0
.text:0040D3B0
.text:0040D3B0 ; int __cdecl sub_40D3B0(int, char *, int, int)
.text:0040D3B0 sub_40D3B0      proc near               ; CODE XREF: .text:0040CF62↑p
.text:0040D3B0                                         ; .text:0040CF92↑p ...
.text:0040D3B0
.text:0040D3B0 Block           = dword ptr -2Ch
.text:0040D3B0 var_28          = dword ptr -28h
.text:0040D3B0 Str             = dword ptr -24h
.text:0040D3B0 var_20          = dword ptr -20h
.text:0040D3B0 var_1C          = dword ptr -1Ch
.text:0040D3B0 var_18          = dword ptr -18h
.text:0040D3B0 var_14          = dword ptr -14h
.text:0040D3B0 arg_0           = dword ptr  4
.text:0040D3B0 arg_4           = dword ptr  8
.text:0040D3B0 arg_8           = dword ptr  0Ch
.text:0040D3B0 arg_C           = dword ptr  10h
.text:0040D3B0
.text:0040D3B0                 push    ebp
.text:0040D3B1                 push    edi
.text:0040D3B2                 push    esi
.text:0040D3B3                 push    ebx
.text:0040D3B4                 sub     esp, 1Ch
.text:0040D3B7                 call    _errno
.text:0040D3BC                 mov     edx, [eax]
.text:0040D3BE                 mov     eax, [esp+2Ch+arg_0]
.text:0040D3C2                 mov     [esp+2Ch+var_14], edx
.text:0040D3C6                 test    eax, eax
.text:0040D3C8                 js      loc_40D56A
.text:0040D3CE                 mov     eax, [esp+2Ch+arg_0]
.text:0040D3D2                 cmp     dword_41F050, eax
.text:0040D3D8                 ja      short loc_40D450
.text:0040D3DA                 mov     esi, eax
.text:0040D3DC                 inc     esi
.text:0040D3DD                 cmp     esi, 1FFFFFFFh
.text:0040D3E3                 ja      loc_40D56F
.text:0040D3E9                 mov     ebx, off_41F05C
.text:0040D3EF                 cmp     ebx, offset dword_41F054
.text:0040D3F5                 jz      loc_40D541
.text:0040D3FB
.text:0040D3FB loc_40D3FB:                             ; CODE XREF: sub_40D3B0+1B5↓j
.text:0040D3FB                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040D3FE                 lea     ecx, ds:0[esi*8]
.text:0040D405                 mov     ebp, esi
.text:0040D407                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040D40B                 call    sub_40A8E0
.text:0040D410                 mov     off_41F05C, eax
.text:0040D415                 mov     ebx, dword_41F050
.text:0040D41B                 sub     ebp, ebx
.text:0040D41D                 lea     edi, [eax+ebx*8]
.text:0040D420                 lea     eax, ds:0[ebp*8]
.text:0040D427                 cmp     eax, 7
.text:0040D42A                 jbe     short loc_40D440
.text:0040D42C                 test    edi, 4
.text:0040D432                 jz      short loc_40D440
.text:0040D434                 mov     dword ptr [edi], 0
.text:0040D43A                 sub     eax, 4
.text:0040D43D                 add     edi, 4
.text:0040D440
.text:0040D440 loc_40D440:                             ; CODE XREF: sub_40D3B0+7A↑j
.text:0040D440                                         ; sub_40D3B0+82↑j
.text:0040D440                 cld
.text:0040D441                 mov     ecx, eax
.text:0040D443                 shr     ecx, 2
.text:0040D446                 xor     eax, eax
.text:0040D448                 rep stosd
.text:0040D44A                 mov     dword_41F050, esi
.text:0040D450
.text:0040D450 loc_40D450:                             ; CODE XREF: sub_40D3B0+28↑j
.text:0040D450                 mov     esi, off_41F05C
.text:0040D456                 mov     eax, [esp+2Ch+arg_0]
.text:0040D45A                 mov     ebp, [esi+eax*8]
.text:0040D45D                 mov     edi, [esi+eax*8+4]
.text:0040D461                 mov     esi, [esp+2Ch+arg_C]
.text:0040D465                 test    esi, esi
.text:0040D467                 jz      loc_40D537
.text:0040D46D
.text:0040D46D loc_40D46D:                             ; CODE XREF: sub_40D3B0+18C↓j
.text:0040D46D                 call    _errno
.text:0040D472                 mov     ebx, [eax]
.text:0040D474                 mov     [esp+2Ch+var_18], esi ; int
.text:0040D478                 mov     ecx, [esi]
.text:0040D47A                 mov     [esp+2Ch+Block], edi ; int
.text:0040D47D                 mov     edx, [esp+2Ch+arg_8]
.text:0040D481                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040D485                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040D489                 mov     ecx, [esp+2Ch+arg_4]
.text:0040D48D                 mov     [esp+2Ch+var_20], edx ; int
.text:0040D491                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040D495                 call    sub_40C270
.text:0040D49A                 mov     esi, eax
.text:0040D49C                 call    _errno
.text:0040D4A1                 mov     [eax], ebx
.text:0040D4A3                 cmp     ebp, esi
.text:0040D4A5                 ja      short loc_40D51B
.text:0040D4A7                 lea     ebp, [esi+1]
.text:0040D4AA                 mov     ebx, off_41F05C
.text:0040D4B0                 cmp     edi, offset unk_4200F0
.text:0040D4B6                 mov     esi, [esp+2Ch+arg_0]
.text:0040D4BA                 mov     [ebx+esi*8], ebp
.text:0040D4BD                 jz      short loc_40D4CD
.text:0040D4BF                 mov     [esp+2Ch+Block], edi ; Block
.text:0040D4C2                 call    free
.text:0040D4C7                 mov     ebx, off_41F05C
.text:0040D4CD
.text:0040D4CD loc_40D4CD:                             ; CODE XREF: sub_40D3B0+10D↑j
.text:0040D4CD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:0040D4D0                 call    sub_40A850
.text:0040D4D5                 mov     esi, [esp+2Ch+arg_C]
.text:0040D4D9                 mov     edi, eax
.text:0040D4DB                 mov     eax, [esp+2Ch+arg_0]
.text:0040D4DF                 test    esi, esi
.text:0040D4E1                 mov     [ebx+eax*8+4], edi
.text:0040D4E5                 jz      short loc_40D530
.text:0040D4E7
.text:0040D4E7 loc_40D4E7:                             ; CODE XREF: sub_40D3B0+185↓j
.text:0040D4E7                 call    _errno
.text:0040D4EC                 mov     ebx, [eax]
.text:0040D4EE                 mov     [esp+2Ch+var_18], esi ; int
.text:0040D4F2                 mov     ecx, [esi]
.text:0040D4F4                 mov     [esp+2Ch+Block], edi ; int
.text:0040D4F7                 mov     edx, [esp+2Ch+arg_8]
.text:0040D4FB                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040D4FF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:0040D503                 mov     ecx, [esp+2Ch+arg_4]
.text:0040D507                 mov     [esp+2Ch+var_20], edx ; int
.text:0040D50B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040D50F                 call    sub_40C270
.text:0040D514                 call    _errno
.text:0040D519                 mov     [eax], ebx
.text:0040D51B
.text:0040D51B loc_40D51B:                             ; CODE XREF: sub_40D3B0+F5↑j
.text:0040D51B                 call    _errno
.text:0040D520                 mov     ebp, [esp+2Ch+var_14]
.text:0040D524                 mov     [eax], ebp
.text:0040D526                 add     esp, 1Ch
.text:0040D529                 mov     eax, edi
.text:0040D52B                 pop     ebx
.text:0040D52C                 pop     esi
.text:0040D52D                 pop     edi
.text:0040D52E                 pop     ebp
.text:0040D52F                 retn
.text:0040D530 ; ---------------------------------------------------------------------------
.text:0040D530
.text:0040D530 loc_40D530:                             ; CODE XREF: sub_40D3B0+135↑j
.text:0040D530                 mov     esi, offset dword_4201F0
.text:0040D535                 jmp     short loc_40D4E7
.text:0040D537 ; ---------------------------------------------------------------------------
.text:0040D537
.text:0040D537 loc_40D537:                             ; CODE XREF: sub_40D3B0+B7↑j
.text:0040D537                 mov     esi, offset dword_4201F0
.text:0040D53C                 jmp     loc_40D46D
.text:0040D541 ; ---------------------------------------------------------------------------
.text:0040D541
.text:0040D541 loc_40D541:                             ; CODE XREF: sub_40D3B0+45↑j
.text:0040D541                 mov     [esp+2Ch+Block], 8 ; size_t
.text:0040D548                 call    sub_40A850
.text:0040D54D                 mov     off_41F05C, eax
.text:0040D552                 mov     edi, dword_41F054
.text:0040D558                 mov     ebx, eax
.text:0040D55A                 mov     ecx, off_41F058
.text:0040D560                 mov     [eax], edi
.text:0040D562                 mov     [eax+4], ecx
.text:0040D565                 jmp     loc_40D3FB
.text:0040D56A ; ---------------------------------------------------------------------------
.text:0040D56A
.text:0040D56A loc_40D56A:                             ; CODE XREF: sub_40D3B0+18↑j
.text:0040D56A                 call    abort
.text:0040D56F ; ---------------------------------------------------------------------------
.text:0040D56F
.text:0040D56F loc_40D56F:                             ; CODE XREF: sub_40D3B0+33↑j
.text:0040D56F                 call    sub_40B0D0
.text:0040D56F sub_40D3B0      endp
.text:0040D56F
.text:0040D56F ; ---------------------------------------------------------------------------
.text:0040D574                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580
.text:0040D580 sub_40D580      proc near               ; DATA XREF: .text:0040D599↓o
.text:0040D580                 pop     esi
.text:0040D581                 pop     ebx
.text:0040D582                 jns     short near ptr loc_40D5DA+3
.text:0040D584                 pop     ebp
.text:0040D585                 add     [esi+5Bh], bl
.text:0040D588                 outsb
.text:0040D589                 dec     esi
.text:0040D58A                 pop     ebp
.text:0040D58B
.text:0040D58B loc_40D58B:                             ; CODE XREF: sub_40AFE0+94↑p
.text:0040D58B                 add     [ebp+56002674h], cl
.text:0040D58B sub_40D580      endp ; sp-analysis failed
.text:0040D58B
.text:0040D591                 push    ebx
.text:0040D592                 sub     esp, 14h
.text:0040D595                 mov     esi, [esp+20h]
.text:0040D599                 mov     dword ptr [esp], offset sub_40D580
.text:0040D5A0                 call    ds:libintl_gettext
.text:0040D5A6                 mov     ebx, eax
.text:0040D5A8                 mov     eax, ds:dword_420220
.text:0040D5AD                 cmp     ebx, eax
.text:0040D5AF                 jz      short loc_40D5E0
.text:0040D5B1                 test    eax, eax
.text:0040D5B3                 jnz     loc_40D6B0
.text:0040D5B9
.text:0040D5B9 loc_40D5B9:                             ; CODE XREF: .text:0040D6C3↓j
.text:0040D5B9                 mov     dword ptr [esp+8], 1
.text:0040D5C1                 mov     [esp+4], ebx
.text:0040D5C5                 mov     dword ptr [esp], offset unk_420240
.text:0040D5CC                 call    sub_4103A0
.text:0040D5D1                 test    eax, eax
.text:0040D5D3                 mov     edx, 0FFFFFFFFh
.text:0040D5D8                 jnz     short loc_40D60F
.text:0040D5DA
.text:0040D5DA loc_40D5DA:                             ; CODE XREF: sub_40D580+2↑j
.text:0040D5DA                 mov     ds:dword_420220, ebx
.text:0040D5E0
.text:0040D5E0 loc_40D5E0:                             ; CODE XREF: .text:0040D5AF↑j
.text:0040D5E0                 mov     dword ptr [esp+10h], 0
.text:0040D5E8                 mov     dword ptr [esp+0Ch], 0
.text:0040D5F0                 mov     dword ptr [esp+8], 0
.text:0040D5F8                 mov     [esp+4], esi
.text:0040D5FC                 mov     dword ptr [esp], offset unk_420240
.text:0040D603                 call    sub_410520
.text:0040D608                 xor     edx, edx
.text:0040D60A                 test    eax, eax
.text:0040D60C                 setz    dl
.text:0040D60F
.text:0040D60F loc_40D60F:                             ; CODE XREF: .text:0040D5D8↑j
.text:0040D60F                 test    edx, edx
.text:0040D611                 mov     eax, edx
.text:0040D613                 jz      short loc_40D620
.text:0040D615
.text:0040D615 loc_40D615:                             ; CODE XREF: .text:0040D695↓j
.text:0040D615                 add     esp, 14h
.text:0040D618                 pop     ebx
.text:0040D619                 pop     esi
.text:0040D61A                 retn
.text:0040D61A ; ---------------------------------------------------------------------------
.text:0040D61B                 align 10h
.text:0040D620
.text:0040D620 loc_40D620:                             ; CODE XREF: .text:0040D613↑j
.text:0040D620                 mov     dword ptr [esp], 40D586h
.text:0040D627                 call    ds:libintl_gettext
.text:0040D62D                 mov     ebx, eax
.text:0040D62F                 mov     eax, ds:dword_420230
.text:0040D634                 cmp     ebx, eax
.text:0040D636                 jz      short loc_40D663
.text:0040D638                 test    eax, eax
.text:0040D63A                 jnz     short loc_40D69A
.text:0040D63C
.text:0040D63C loc_40D63C:                             ; CODE XREF: .text:0040D6AE↓j
.text:0040D63C                 mov     dword ptr [esp+8], 1
.text:0040D644                 mov     [esp+4], ebx
.text:0040D648                 mov     dword ptr [esp], offset unk_420260
.text:0040D64F                 call    sub_4103A0
.text:0040D654                 test    eax, eax
.text:0040D656                 mov     edx, 0FFFFFFFFh
.text:0040D65B                 jnz     short loc_40D693
.text:0040D65D                 mov     ds:dword_420230, ebx
.text:0040D663
.text:0040D663 loc_40D663:                             ; CODE XREF: .text:0040D636↑j
.text:0040D663                 mov     dword ptr [esp+10h], 0
.text:0040D66B                 mov     dword ptr [esp+0Ch], 0
.text:0040D673                 mov     dword ptr [esp+8], 0
.text:0040D67B                 mov     [esp+4], esi
.text:0040D67F                 mov     dword ptr [esp], offset unk_420260
.text:0040D686                 call    sub_410520
.text:0040D68B                 xor     edx, edx
.text:0040D68D                 test    eax, eax
.text:0040D68F                 setz    dl
.text:0040D692                 dec     edx
.text:0040D693
.text:0040D693 loc_40D693:                             ; CODE XREF: .text:0040D65B↑j
.text:0040D693                 mov     eax, edx
.text:0040D695                 jmp     loc_40D615
.text:0040D69A ; ---------------------------------------------------------------------------
.text:0040D69A
.text:0040D69A loc_40D69A:                             ; CODE XREF: .text:0040D63A↑j
.text:0040D69A                 mov     dword ptr [esp], offset unk_420260
.text:0040D6A1                 call    sub_4108E0
.text:0040D6A6                 xor     edx, edx
.text:0040D6A8                 mov     ds:dword_420230, edx
.text:0040D6AE                 jmp     short loc_40D63C
.text:0040D6B0 ; ---------------------------------------------------------------------------
.text:0040D6B0
.text:0040D6B0 loc_40D6B0:                             ; CODE XREF: .text:0040D5B3↑j
.text:0040D6B0                 mov     dword ptr [esp], offset unk_420240
.text:0040D6B7                 call    sub_4108E0
.text:0040D6BC                 xor     eax, eax
.text:0040D6BE                 mov     ds:dword_420220, eax
.text:0040D6C3                 jmp     loc_40D5B9
.text:0040D6C3 ; ---------------------------------------------------------------------------
.text:0040D6C8                 align 10h
.text:0040D6D0
.text:0040D6D0 ; =============== S U B R O U T I N E =======================================
.text:0040D6D0
.text:0040D6D0
.text:0040D6D0 sub_40D6D0      proc near               ; CODE XREF: sub_40C030+2E↑p
.text:0040D6D0
.text:0040D6D0 FileHandle      = dword ptr -1Ch
.text:0040D6D0 Buf             = dword ptr -18h
.text:0040D6D0 MaxCharCount    = dword ptr -14h
.text:0040D6D0 arg_0           = dword ptr  4
.text:0040D6D0 arg_4           = dword ptr  8
.text:0040D6D0 arg_8           = dword ptr  0Ch
.text:0040D6D0
.text:0040D6D0                 push    ebp
.text:0040D6D1                 push    edi
.text:0040D6D2                 push    esi
.text:0040D6D3                 push    ebx
.text:0040D6D4                 sub     esp, 0Ch
.text:0040D6D7                 mov     ebp, [esp+1Ch+arg_0]
.text:0040D6DB                 mov     edi, [esp+1Ch+arg_4]
.text:0040D6DF                 mov     ebx, [esp+1Ch+arg_8]
.text:0040D6E3                 lea     esi, [esi+0]
.text:0040D6E9                 lea     edi, [edi+0]
.text:0040D6F0
.text:0040D6F0 loc_40D6F0:                             ; CODE XREF: sub_40D6D0+3E↓j
.text:0040D6F0                                         ; sub_40D6D0+57↓j
.text:0040D6F0                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:0040D6F4                 mov     [esp+1Ch+Buf], edi ; Buf
.text:0040D6F8                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040D6FB                 call    _write
.text:0040D700                 test    eax, eax
.text:0040D702                 mov     esi, eax
.text:0040D704                 jns     short loc_40D729
.text:0040D706                 call    _errno
.text:0040D70B                 cmp     dword ptr [eax], 4
.text:0040D70E                 jz      short loc_40D6F0
.text:0040D710                 call    _errno
.text:0040D715                 cmp     dword ptr [eax], 16h
.text:0040D718                 jnz     short loc_40D729
.text:0040D71A                 cmp     ebx, 7FFFE000h
.text:0040D720                 jbe     short loc_40D729
.text:0040D722                 mov     ebx, 7FFFE000h
.text:0040D727                 jmp     short loc_40D6F0
.text:0040D729 ; ---------------------------------------------------------------------------
.text:0040D729
.text:0040D729 loc_40D729:                             ; CODE XREF: sub_40D6D0+34↑j
.text:0040D729                                         ; sub_40D6D0+48↑j ...
.text:0040D729                 add     esp, 0Ch
.text:0040D72C                 mov     eax, esi
.text:0040D72E                 pop     ebx
.text:0040D72F                 pop     esi
.text:0040D730                 pop     edi
.text:0040D731                 pop     ebp
.text:0040D732                 retn
.text:0040D732 sub_40D6D0      endp
.text:0040D732
.text:0040D732 ; ---------------------------------------------------------------------------
.text:0040D733                 align 10h
.text:0040D740
.text:0040D740 ; =============== S U B R O U T I N E =======================================
.text:0040D740
.text:0040D740
.text:0040D740 sub_40D740      proc near               ; CODE XREF: sub_40D790+3A↓j
.text:0040D740                                         ; sub_410970+46B↓p ...
.text:0040D740
.text:0040D740 arg_0           = dword ptr  4
.text:0040D740 arg_4           = dword ptr  8
.text:0040D740 arg_8           = dword ptr  0Ch
.text:0040D740
.text:0040D740                 mov     edx, [esp+arg_8]
.text:0040D744                 mov     ecx, [esp+arg_4]
.text:0040D748                 mov     eax, [esp+arg_0]
.text:0040D74C                 mov     [ecx+1], dl
.text:0040D74F                 sar     edx, 8
.text:0040D752                 mov     [ecx], al
.text:0040D754                 mov     [ecx+2], dl
.text:0040D757                 retn
.text:0040D757 sub_40D740      endp
.text:0040D757
.text:0040D757 ; ---------------------------------------------------------------------------
.text:0040D758                 align 10h
.text:0040D760
.text:0040D760 ; =============== S U B R O U T I N E =======================================
.text:0040D760
.text:0040D760
.text:0040D760 sub_40D760      proc near               ; CODE XREF: sub_40D7D0+3F↓j
.text:0040D760                                         ; sub_410970+313B↓p
.text:0040D760
.text:0040D760 arg_0           = dword ptr  4
.text:0040D760 arg_4           = dword ptr  8
.text:0040D760 arg_8           = dword ptr  0Ch
.text:0040D760 arg_C           = dword ptr  10h
.text:0040D760
.text:0040D760                 push    ebx
.text:0040D761                 mov     edx, [esp+4+arg_8]
.text:0040D765                 mov     ebx, [esp+4+arg_C]
.text:0040D769                 mov     ecx, [esp+4+arg_4]
.text:0040D76D                 mov     eax, [esp+4+arg_0]
.text:0040D771                 mov     [ecx+1], dl
.text:0040D774                 sar     edx, 8
.text:0040D777                 mov     [ecx+3], bl
.text:0040D77A                 sar     ebx, 8
.text:0040D77D                 mov     [ecx], al
.text:0040D77F                 mov     [ecx+2], dl
.text:0040D782                 mov     [ecx+4], bl
.text:0040D785                 pop     ebx
.text:0040D786                 retn
.text:0040D786 sub_40D760      endp
.text:0040D786
.text:0040D786 ; ---------------------------------------------------------------------------
.text:0040D787                 align 10h
.text:0040D790
.text:0040D790 ; =============== S U B R O U T I N E =======================================
.text:0040D790
.text:0040D790
.text:0040D790 sub_40D790      proc near               ; CODE XREF: sub_410970+967↓p
.text:0040D790                                         ; sub_410970+137C↓p ...
.text:0040D790
.text:0040D790 arg_0           = dword ptr  4
.text:0040D790 arg_4           = dword ptr  8
.text:0040D790 arg_8           = dword ptr  0Ch
.text:0040D790 arg_C           = dword ptr  10h
.text:0040D790
.text:0040D790                 push    edi
.text:0040D791                 push    esi
.text:0040D792                 push    ebx
.text:0040D793                 mov     edx, [esp+0Ch+arg_C]
.text:0040D797                 mov     ebx, [esp+0Ch+arg_4]
.text:0040D79B                 mov     edi, [esp+0Ch+arg_0]
.text:0040D79F                 mov     esi, [esp+0Ch+arg_8]
.text:0040D7A3                 lea     ecx, [edx+3]
.text:0040D7A6                 cmp     edx, ebx
.text:0040D7A8                 jz      short loc_40D7BB
.text:0040D7AA                 lea     esi, [esi+0]
.text:0040D7B0
.text:0040D7B0 loc_40D7B0:                             ; CODE XREF: sub_40D790+29↓j
.text:0040D7B0                 dec     edx
.text:0040D7B1                 dec     ecx
.text:0040D7B2                 cmp     edx, ebx
.text:0040D7B4                 movzx   eax, byte ptr [edx]
.text:0040D7B7                 mov     [ecx], al
.text:0040D7B9                 jnz     short loc_40D7B0
.text:0040D7BB
.text:0040D7BB loc_40D7BB:                             ; CODE XREF: sub_40D790+18↑j
.text:0040D7BB                 mov     [esp+0Ch+arg_8], esi
.text:0040D7BF                 mov     [esp+0Ch+arg_0], edi
.text:0040D7C3                 mov     [esp+0Ch+arg_4], ebx
.text:0040D7C7                 pop     ebx
.text:0040D7C8                 pop     esi
.text:0040D7C9                 pop     edi
.text:0040D7CA                 jmp     sub_40D740
.text:0040D7CA sub_40D790      endp
.text:0040D7CA
.text:0040D7CA ; ---------------------------------------------------------------------------
.text:0040D7CF                 align 10h
.text:0040D7D0
.text:0040D7D0 ; =============== S U B R O U T I N E =======================================
.text:0040D7D0
.text:0040D7D0
.text:0040D7D0 sub_40D7D0      proc near               ; CODE XREF: sub_410970+30CC↓p
.text:0040D7D0                                         ; sub_410970+30F8↓p ...
.text:0040D7D0
.text:0040D7D0 arg_0           = dword ptr  4
.text:0040D7D0 arg_4           = dword ptr  8
.text:0040D7D0 arg_8           = dword ptr  0Ch
.text:0040D7D0 arg_C           = dword ptr  10h
.text:0040D7D0 arg_10          = dword ptr  14h
.text:0040D7D0
.text:0040D7D0                 push    ebp
.text:0040D7D1                 push    edi
.text:0040D7D2                 push    esi
.text:0040D7D3                 push    ebx
.text:0040D7D4                 mov     edx, [esp+10h+arg_10]
.text:0040D7D8                 mov     ebx, [esp+10h+arg_4]
.text:0040D7DC                 mov     ebp, [esp+10h+arg_0]
.text:0040D7E0                 mov     edi, [esp+10h+arg_8]
.text:0040D7E4                 lea     ecx, [edx+5]
.text:0040D7E7                 cmp     edx, ebx
.text:0040D7E9                 mov     esi, [esp+10h+arg_C]
.text:0040D7ED                 jz      short loc_40D7FB
.text:0040D7EF                 nop
.text:0040D7F0
.text:0040D7F0 loc_40D7F0:                             ; CODE XREF: sub_40D7D0+29↓j
.text:0040D7F0                 dec     edx
.text:0040D7F1                 dec     ecx
.text:0040D7F2                 cmp     edx, ebx
.text:0040D7F4                 movzx   eax, byte ptr [edx]
.text:0040D7F7                 mov     [ecx], al
.text:0040D7F9                 jnz     short loc_40D7F0
.text:0040D7FB
.text:0040D7FB loc_40D7FB:                             ; CODE XREF: sub_40D7D0+1D↑j
.text:0040D7FB                 mov     [esp+10h+arg_C], esi
.text:0040D7FF                 mov     [esp+10h+arg_8], edi
.text:0040D803                 mov     [esp+10h+arg_0], ebp
.text:0040D807                 mov     [esp+10h+arg_4], ebx
.text:0040D80B                 pop     ebx
.text:0040D80C                 pop     esi
.text:0040D80D                 pop     edi
.text:0040D80E                 pop     ebp
.text:0040D80F                 jmp     sub_40D760
.text:0040D80F sub_40D7D0      endp
.text:0040D80F
.text:0040D80F ; ---------------------------------------------------------------------------
.text:0040D814                 align 10h
.text:0040D820
.text:0040D820 ; =============== S U B R O U T I N E =======================================
.text:0040D820
.text:0040D820
.text:0040D820 sub_40D820      proc near               ; CODE XREF: sub_410970+5C6↓p
.text:0040D820
.text:0040D820 arg_0           = dword ptr  4
.text:0040D820 arg_4           = dword ptr  8
.text:0040D820 arg_8           = dword ptr  0Ch
.text:0040D820
.text:0040D820                 push    ebx
.text:0040D821                 mov     edx, [esp+4+arg_4]
.text:0040D825                 xor     ebx, ebx
.text:0040D827                 mov     ecx, [esp+4+arg_8]
.text:0040D82B                 sub     edx, 2
.text:0040D82E                 cmp     edx, [esp+4+arg_0]
.text:0040D832                 jbe     short loc_40D83A
.text:0040D834                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:0040D838                 jz      short loc_40D872
.text:0040D83A
.text:0040D83A loc_40D83A:                             ; CODE XREF: sub_40D820+12↑j
.text:0040D83A                                         ; sub_40D820+54↓j
.text:0040D83A                 movzx   edx, byte ptr [edx]
.text:0040D83D                 xor     eax, eax
.text:0040D83F                 cmp     dl, 28h ; '('
.text:0040D842                 jz      short loc_40D867
.text:0040D844
.text:0040D844 loc_40D844:                             ; CODE XREF: sub_40D820+50↓j
.text:0040D844                 cmp     dl, 7Ch ; '|'
.text:0040D847                 jz      short loc_40D850
.text:0040D849
.text:0040D849 loc_40D849:                             ; CODE XREF: sub_40D820+3D↓j
.text:0040D849                                         ; sub_40D820+45↓j
.text:0040D849                 pop     ebx
.text:0040D84A                 retn
.text:0040D84A ; ---------------------------------------------------------------------------
.text:0040D84B                 align 10h
.text:0040D850
.text:0040D850 loc_40D850:                             ; CODE XREF: sub_40D820+27↑j
.text:0040D850                 and     ecx, 0FFFF8000h
.text:0040D856                 test    cx, cx
.text:0040D859                 jnz     short loc_40D860
.text:0040D85B                 test    bl, bl
.text:0040D85D                 jz      short loc_40D849
.text:0040D85F                 nop
.text:0040D860
.text:0040D860 loc_40D860:                             ; CODE XREF: sub_40D820+39↑j
.text:0040D860                                         ; sub_40D820+4A↓j ...
.text:0040D860                 mov     eax, 1
.text:0040D865                 jmp     short loc_40D849
.text:0040D867 ; ---------------------------------------------------------------------------
.text:0040D867
.text:0040D867 loc_40D867:                             ; CODE XREF: sub_40D820+22↑j
.text:0040D867                 test    ch, 20h
.text:0040D86A                 jnz     short loc_40D860
.text:0040D86C                 test    bl, bl
.text:0040D86E                 jnz     short loc_40D860
.text:0040D870                 jmp     short loc_40D844
.text:0040D872 ; ---------------------------------------------------------------------------
.text:0040D872
.text:0040D872 loc_40D872:                             ; CODE XREF: sub_40D820+18↑j
.text:0040D872                 mov     bl, 1
.text:0040D874                 jmp     short loc_40D83A
.text:0040D874 sub_40D820      endp
.text:0040D874
.text:0040D874 ; ---------------------------------------------------------------------------
.text:0040D876                 align 10h
.text:0040D880
.text:0040D880 ; =============== S U B R O U T I N E =======================================
.text:0040D880
.text:0040D880
.text:0040D880 sub_40D880      proc near               ; CODE XREF: sub_410970+B9A↓p
.text:0040D880
.text:0040D880 var_9           = byte ptr -9
.text:0040D880 var_8           = dword ptr -8
.text:0040D880 var_4           = dword ptr -4
.text:0040D880 arg_0           = dword ptr  4
.text:0040D880 arg_4           = dword ptr  8
.text:0040D880 arg_8           = dword ptr  0Ch
.text:0040D880
.text:0040D880                 sub     esp, 0Ch
.text:0040D883                 mov     edx, [esp+0Ch+arg_8]
.text:0040D887                 mov     [esp+0Ch+var_4], esi
.text:0040D88B                 mov     esi, [esp+0Ch+arg_0]
.text:0040D88F                 mov     [esp+0Ch+var_8], ebx
.text:0040D893                 lea     eax, [esi+1]
.text:0040D896                 movzx   ebx, byte ptr [esi]
.text:0040D899                 cmp     bl, 5Ch ; '\'
.text:0040D89C                 setz    [esp+0Ch+var_9]
.text:0040D8A1                 cmp     eax, [esp+0Ch+arg_4]
.text:0040D8A5                 sbb     ecx, ecx
.text:0040D8A7                 and     ecx, eax
.text:0040D8A9                 xor     eax, eax
.text:0040D8AB                 test    dh, 20h
.text:0040D8AE                 jz      short loc_40D8E8
.text:0040D8B0                 cmp     bl, 29h ; ')'
.text:0040D8B3
.text:0040D8B3 loc_40D8B3:                             ; CODE XREF: sub_40D880+76↓j
.text:0040D8B3                 jz      short loc_40D8D1
.text:0040D8B5
.text:0040D8B5 loc_40D8B5:                             ; CODE XREF: sub_40D880+6D↓j
.text:0040D8B5                                         ; sub_40D880+71↓j
.text:0040D8B5                 and     edx, 0FFFF8000h
.text:0040D8BB                 test    dx, dx
.text:0040D8BE                 jz      short loc_40D8D8
.text:0040D8C0                 cmp     byte ptr [esi], 7Ch ; '|'
.text:0040D8C3
.text:0040D8C3 loc_40D8C3:                             ; CODE XREF: sub_40D880+66↓j
.text:0040D8C3                 jz      short loc_40D8D1
.text:0040D8C5
.text:0040D8C5 loc_40D8C5:                             ; CODE XREF: sub_40D880+56↓j
.text:0040D8C5                                         ; sub_40D880+5D↓j ...
.text:0040D8C5                 mov     ebx, [esp+0Ch+var_8]
.text:0040D8C9                 mov     esi, [esp+0Ch+var_4]
.text:0040D8CD                 add     esp, 0Ch
.text:0040D8D0                 retn
.text:0040D8D1 ; ---------------------------------------------------------------------------
.text:0040D8D1
.text:0040D8D1 loc_40D8D1:                             ; CODE XREF: sub_40D880:loc_40D8B3↑j
.text:0040D8D1                                         ; sub_40D880:loc_40D8C3↑j
.text:0040D8D1                 mov     eax, 1
.text:0040D8D6                 jmp     short loc_40D8C5
.text:0040D8D8 ; ---------------------------------------------------------------------------
.text:0040D8D8
.text:0040D8D8 loc_40D8D8:                             ; CODE XREF: sub_40D880+3E↑j
.text:0040D8D8                 cmp     [esp+0Ch+var_9], 0
.text:0040D8DD                 jz      short loc_40D8C5
.text:0040D8DF                 test    ecx, ecx
.text:0040D8E1                 jz      short loc_40D8C5
.text:0040D8E3                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:0040D8E6                 jmp     short loc_40D8C3
.text:0040D8E8 ; ---------------------------------------------------------------------------
.text:0040D8E8
.text:0040D8E8 loc_40D8E8:                             ; CODE XREF: sub_40D880+2E↑j
.text:0040D8E8                 cmp     [esp+0Ch+var_9], 0
.text:0040D8ED                 jz      short loc_40D8B5
.text:0040D8EF                 test    ecx, ecx
.text:0040D8F1                 jz      short loc_40D8B5
.text:0040D8F3                 cmp     byte ptr [ecx], 29h ; ')'
.text:0040D8F6                 jmp     short loc_40D8B3
.text:0040D8F6 sub_40D880      endp
.text:0040D8F6
.text:0040D8F6 ; ---------------------------------------------------------------------------
.text:0040D8F8                 align 10h
.text:0040D900
.text:0040D900 ; =============== S U B R O U T I N E =======================================
.text:0040D900
.text:0040D900
.text:0040D900 sub_40D900      proc near               ; CODE XREF: sub_410970:loc_412A53↓p
.text:0040D900
.text:0040D900 arg_0           = dword ptr  4
.text:0040D900 arg_4           = dword ptr  8
.text:0040D900 arg_8           = dword ptr  0Ch
.text:0040D900 arg_C           = dword ptr  10h
.text:0040D900 arg_10          = dword ptr  14h
.text:0040D900 arg_14          = dword ptr  18h
.text:0040D900
.text:0040D900                 push    ebp
.text:0040D901                 push    edi
.text:0040D902                 push    esi
.text:0040D903                 push    ebx
.text:0040D904                 mov     ecx, [esp+10h+arg_4]
.text:0040D908                 mov     esi, [esp+10h+arg_0]
.text:0040D90C                 mov     ebx, [esp+10h+arg_C]
.text:0040D910                 mov     edx, [ecx]
.text:0040D912                 cmp     edx, [esp+10h+arg_8]
.text:0040D916                 jz      loc_40D9CA
.text:0040D91C                 lea     edi, [edx+1]
.text:0040D91F                 mov     [ecx], edi
.text:0040D921                 xor     ecx, ecx
.text:0040D923                 test    [esp+10h+arg_10], 10000h
.text:0040D92B                 setz    cl
.text:0040D92E                 dec     ecx
.text:0040D92F                 and     ecx, 0Bh
.text:0040D932                 test    ebx, ebx
.text:0040D934                 jz      loc_40D9C5
.text:0040D93A                 movzx   edi, byte ptr [edx]
.text:0040D93D                 and     esi, 0FFh
.text:0040D943                 movsx   esi, byte ptr [esi+ebx]
.text:0040D947                 movzx   ebp, byte ptr [edi+ebx]
.text:0040D94B
.text:0040D94B loc_40D94B:                             ; CODE XREF: sub_40D900+C8↓j
.text:0040D94B                 cmp     esi, ebp
.text:0040D94D                 mov     edx, esi
.text:0040D94F                 ja      short loc_40D9BE
.text:0040D951                 jmp     short loc_40D960
.text:0040D951 ; ---------------------------------------------------------------------------
.text:0040D953                 align 10h
.text:0040D960
.text:0040D960 loc_40D960:                             ; CODE XREF: sub_40D900+51↑j
.text:0040D960                                         ; sub_40D900+BC↓j
.text:0040D960                 test    ebx, ebx
.text:0040D962                 movzx   eax, dl
.text:0040D965                 jz      short loc_40D96E
.text:0040D967                 movzx   ecx, dl
.text:0040D96A                 movzx   eax, byte ptr [ecx+ebx]
.text:0040D96E
.text:0040D96E loc_40D96E:                             ; CODE XREF: sub_40D900+65↑j
.text:0040D96E                 mov     edi, [esp+10h+arg_14]
.text:0040D972                 sar     eax, 3
.text:0040D975                 add     edi, eax
.text:0040D977                 test    ebx, ebx
.text:0040D979                 movzx   eax, dl
.text:0040D97C                 jz      short loc_40D985
.text:0040D97E                 movzx   esi, dl
.text:0040D981                 movzx   eax, byte ptr [esi+ebx]
.text:0040D985
.text:0040D985 loc_40D985:                             ; CODE XREF: sub_40D900+7C↑j
.text:0040D985                 mov     esi, [esp+10h+arg_14]
.text:0040D989                 sar     eax, 3
.text:0040D98C                 movzx   ecx, dl
.text:0040D98F                 add     eax, esi
.text:0040D991                 test    ebx, ebx
.text:0040D993                 movzx   esi, byte ptr [eax]
.text:0040D996                 jz      short loc_40D99F
.text:0040D998                 movzx   eax, dl
.text:0040D99B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040D99F
.text:0040D99F loc_40D99F:                             ; CODE XREF: sub_40D900+96↑j
.text:0040D99F                 mov     eax, ecx
.text:0040D9A1                 inc     edx
.text:0040D9A2                 and     eax, 1F8h
.text:0040D9A7                 sub     ecx, eax
.text:0040D9A9                 mov     eax, 1
.text:0040D9AE                 shl     eax, cl
.text:0040D9B0                 mov     ecx, eax
.text:0040D9B2                 mov     eax, esi
.text:0040D9B4                 or      al, cl
.text:0040D9B6                 mov     [edi], al
.text:0040D9B8                 xor     ecx, ecx
.text:0040D9BA                 cmp     edx, ebp
.text:0040D9BC                 jbe     short loc_40D960
.text:0040D9BE
.text:0040D9BE loc_40D9BE:                             ; CODE XREF: sub_40D900+4F↑j
.text:0040D9BE                 mov     eax, ecx
.text:0040D9C0
.text:0040D9C0 loc_40D9C0:                             ; CODE XREF: sub_40D900+CF↓j
.text:0040D9C0                 pop     ebx
.text:0040D9C1                 pop     esi
.text:0040D9C2                 pop     edi
.text:0040D9C3                 pop     ebp
.text:0040D9C4                 retn
.text:0040D9C5 ; ---------------------------------------------------------------------------
.text:0040D9C5
.text:0040D9C5 loc_40D9C5:                             ; CODE XREF: sub_40D900+34↑j
.text:0040D9C5                 movzx   ebp, byte ptr [edx]
.text:0040D9C8                 jmp     short loc_40D94B
.text:0040D9CA ; ---------------------------------------------------------------------------
.text:0040D9CA
.text:0040D9CA loc_40D9CA:                             ; CODE XREF: sub_40D900+16↑j
.text:0040D9CA                 mov     eax, 0Bh
.text:0040D9CF                 jmp     short loc_40D9C0
.text:0040D9CF sub_40D900      endp
.text:0040D9CF
.text:0040D9CF ; ---------------------------------------------------------------------------
.text:0040D9D1                 db 0EBh, 0Dh, 90h
.text:0040D9D4                 align 10h
.text:0040D9E0 jpt_40DCD7      dd offset loc_40E28B    ; DATA XREF: sub_40DA60:loc_40DCD0↓r
.text:0040D9E0                                         ; sub_40DA60+BEF↓r ...
.text:0040D9E0                 dd offset loc_40E2A3    ; jump table for switch statement
.text:0040D9E0                 dd offset loc_40E2A8
.text:0040D9E0                 dd offset loc_40E3A3
.text:0040D9E0                 dd offset loc_40FC06
.text:0040D9E0                 dd offset loc_40FB10
.text:0040D9F8 jpt_40E464      dd offset loc_40FA24    ; DATA XREF: sub_40DA60+9FD↓r
.text:0040D9F8                 dd offset loc_40F620    ; jump table for switch statement
.text:0040DA00                 dd offset loc_40F483
.text:0040DA04                 dd offset loc_40F439
.text:0040DA08                 dd offset loc_40F3DD
.text:0040DA0C                 dd offset loc_40F3A0
.text:0040DA10                 dd offset loc_40F386
.text:0040DA14                 dd offset loc_40E9FA
.text:0040DA18                 dd offset loc_40F381
.text:0040DA1C                 dd offset loc_40F37C
.text:0040DA20                 dd offset loc_40F201
.text:0040DA24                 dd offset loc_40F005
.text:0040DA28                 dd offset loc_40EF6C
.text:0040DA2C                 dd offset loc_40EDE6
.text:0040DA30                 dd offset loc_40EC60
.text:0040DA34                 dd offset loc_40EA18
.text:0040DA38                 dd offset loc_40E9CF
.text:0040DA3C                 dd offset loc_40E977
.text:0040DA40                 dd offset loc_40E8C7
.text:0040DA44                 dd offset loc_40E816
.text:0040DA48                 dd offset loc_40E72A
.text:0040DA4C                 dd offset loc_40E658
.text:0040DA50                 dd offset loc_40E552
.text:0040DA54                 dd offset loc_40E466
.text:0040DA58                 align 10h
.text:0040DA60
.text:0040DA60 ; =============== S U B R O U T I N E =======================================
.text:0040DA60
.text:0040DA60
.text:0040DA60 sub_40DA60      proc near               ; CODE XREF: .text:004107BE↓p
.text:0040DA60                                         ; .text:004107D0↓j ...
.text:0040DA60
.text:0040DA60 Size            = dword ptr -0BCh
.text:0040DA60 var_B8          = dword ptr -0B8h
.text:0040DA60 var_B4          = dword ptr -0B4h
.text:0040DA60 var_B0          = dword ptr -0B0h
.text:0040DA60 var_A5          = byte ptr -0A5h
.text:0040DA60 var_A4          = dword ptr -0A4h
.text:0040DA60 var_A0          = dword ptr -0A0h
.text:0040DA60 var_9C          = dword ptr -9Ch
.text:0040DA60 var_97          = byte ptr -97h
.text:0040DA60 var_96          = byte ptr -96h
.text:0040DA60 var_95          = byte ptr -95h
.text:0040DA60 var_94          = dword ptr -94h
.text:0040DA60 var_90          = dword ptr -90h
.text:0040DA60 var_8C          = dword ptr -8Ch
.text:0040DA60 var_88          = dword ptr -88h
.text:0040DA60 var_84          = dword ptr -84h
.text:0040DA60 var_80          = dword ptr -80h
.text:0040DA60 var_7C          = dword ptr -7Ch
.text:0040DA60 var_78          = dword ptr -78h
.text:0040DA60 var_74          = dword ptr -74h
.text:0040DA60 var_70          = dword ptr -70h
.text:0040DA60 var_6C          = dword ptr -6Ch
.text:0040DA60 var_68          = dword ptr -68h
.text:0040DA60 var_64          = dword ptr -64h
.text:0040DA60 var_60          = dword ptr -60h
.text:0040DA60 var_5C          = dword ptr -5Ch
.text:0040DA60 var_58          = dword ptr -58h
.text:0040DA60 var_54          = dword ptr -54h
.text:0040DA60 var_50          = dword ptr -50h
.text:0040DA60 var_4C          = dword ptr -4Ch
.text:0040DA60 var_48          = dword ptr -48h
.text:0040DA60 var_44          = dword ptr -44h
.text:0040DA60 var_40          = dword ptr -40h
.text:0040DA60 var_3C          = dword ptr -3Ch
.text:0040DA60 var_38          = dword ptr -38h
.text:0040DA60 var_34          = dword ptr -34h
.text:0040DA60 var_30          = dword ptr -30h
.text:0040DA60 Src             = dword ptr -2Ch
.text:0040DA60 var_28          = dword ptr -28h
.text:0040DA60 var_24          = dword ptr -24h
.text:0040DA60 arg_0           = dword ptr  4
.text:0040DA60 arg_4           = dword ptr  8
.text:0040DA60 arg_8           = dword ptr  0Ch
.text:0040DA60 arg_C           = dword ptr  10h
.text:0040DA60 arg_10          = dword ptr  14h
.text:0040DA60 arg_14          = dword ptr  18h
.text:0040DA60 arg_18          = dword ptr  1Ch
.text:0040DA60 arg_1C          = dword ptr  20h
.text:0040DA60
.text:0040DA60                 push    ebp
.text:0040DA61                 push    edi
.text:0040DA62                 push    esi
.text:0040DA63                 push    ebx
.text:0040DA64                 sub     esp, 0ACh
.text:0040DA6A                 mov     ebx, [esp+0BCh+arg_0]
.text:0040DA71                 mov     [esp+0BCh+var_54], 0
.text:0040DA79                 mov     ecx, [esp+0BCh+arg_0]
.text:0040DA80                 mov     esi, [esp+0BCh+arg_1C]
.text:0040DA87                 mov     [esp+0BCh+var_60], 101h
.text:0040DA8F                 mov     ebp, [ebx+8]
.text:0040DA92                 mov     edi, [ecx]
.text:0040DA94                 mov     [esp+0BCh+var_64], 100h
.text:0040DA9C                 mov     eax, [ebx+18h]
.text:0040DA9F                 mov     edx, [ebx+14h]
.text:0040DAA2                 mov     [esp+0BCh+var_4C], edi
.text:0040DAA6                 inc     eax
.text:0040DAA7                 add     edi, ebp
.text:0040DAA9                 mov     [esp+0BCh+var_58], edx
.text:0040DAAD                 mov     [esp+0BCh+var_50], edi
.text:0040DAB1                 mov     [esp+0BCh+var_5C], eax
.text:0040DAB5                 mov     [esp+0BCh+var_7C], 0
.text:0040DABD                 mov     [esp+0BCh+var_88], 0
.text:0040DAC5                 mov     [esp+0BCh+var_8C], 0
.text:0040DACD                 mov     [esp+0BCh+Size], 14h ; Size
.text:0040DAD4                 call    malloc
.text:0040DAD9                 mov     [esp+0BCh+Src], eax
.text:0040DAE0                 mov     edx, eax
.text:0040DAE2                 test    edx, edx
.text:0040DAE4                 mov     eax, 0FFFFFFFEh
.text:0040DAE9                 jz      loc_40E1B7
.text:0040DAEF                 mov     edx, [esp+0BCh+arg_0]
.text:0040DAF6                 xor     edi, edi
.text:0040DAF8                 mov     ebp, 5
.text:0040DAFD                 mov     [esp+0BCh+var_28], ebp
.text:0040DB04                 mov     [esp+0BCh+var_24], edi
.text:0040DB0B                 mov     ebx, [edx+18h]
.text:0040DB0E                 test    ebx, ebx
.text:0040DB10                 jnz     loc_40FCF7
.text:0040DB16                 mov     [esp+0BCh+var_90], 0
.text:0040DB1E                 mov     [esp+0BCh+var_84], 0
.text:0040DB26                 mov     [esp+0BCh+var_80], 0
.text:0040DB2E                 mov     [esp+0BCh+var_74], 0
.text:0040DB36                 mov     [esp+0BCh+var_70], 0
.text:0040DB3E                 mov     [esp+0BCh+var_6C], 0
.text:0040DB46                 mov     [esp+0BCh+var_68], 0
.text:0040DB4E                 mov     [esp+0BCh+var_94], 0
.text:0040DB56                 mov     [esp+0BCh+var_78], 0
.text:0040DB5E
.text:0040DB5E loc_40DB5E:                             ; CODE XREF: sub_40DA60+236C↓j
.text:0040DB5E                 mov     eax, [esp+0BCh+arg_14]
.text:0040DB65                 test    eax, eax
.text:0040DB67                 js      loc_40E255
.text:0040DB6D                 mov     ebp, [esp+0BCh+arg_8]
.text:0040DB74                 mov     ecx, [esp+0BCh+arg_10]
.text:0040DB7B                 add     ebp, ecx
.text:0040DB7D                 cmp     [esp+0BCh+arg_14], ebp
.text:0040DB84                 jg      loc_40E255
.text:0040DB8A                 mov     ebp, 1
.text:0040DB8F                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040DB93                 jnb     short loc_40DBD8
.text:0040DB95                 mov     eax, [esp+0BCh+var_78]
.text:0040DB99                 add     eax, 4
.text:0040DB9C
.text:0040DB9C loc_40DB9C:                             ; CODE XREF: sub_40DA60+176↓j
.text:0040DB9C                 mov     ecx, [esp+0BCh+var_74]
.text:0040DBA0                 mov     ebx, [esp+0BCh+var_70]
.text:0040DBA4                 mov     edx, [esp+0BCh+var_6C]
.text:0040DBA8                 mov     dword ptr [ecx+ebp*4], offset unk_420390
.text:0040DBAF                 mov     edi, [esp+0BCh+var_68]
.text:0040DBB3                 mov     dword ptr [ebx+ebp*4], offset unk_420390
.text:0040DBBA                 mov     dword ptr [edx+ebp*4], offset unk_420390
.text:0040DBC1                 mov     dword ptr [edi+ebp*4], offset unk_420390
.text:0040DBC8                 inc     ebp
.text:0040DBC9                 or      dword ptr [eax], 3
.text:0040DBCC                 and     byte ptr [eax], 0E3h
.text:0040DBCF                 add     eax, 4
.text:0040DBD2                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040DBD6                 jb      short loc_40DB9C
.text:0040DBD8
.text:0040DBD8 loc_40DBD8:                             ; CODE XREF: sub_40DA60+133↑j
.text:0040DBD8                 mov     eax, [esp+0BCh+arg_10]
.text:0040DBDF                 test    eax, eax
.text:0040DBE1                 jnz     short loc_40DC1C
.text:0040DBE3                 mov     ebp, [esp+0BCh+arg_4]
.text:0040DBEA                 test    ebp, ebp
.text:0040DBEC                 jz      short loc_40DC1C
.text:0040DBEE                 mov     ebx, [esp+0BCh+arg_4]
.text:0040DBF5                 xor     edx, edx
.text:0040DBF7                 xor     edi, edi
.text:0040DBF9                 mov     [esp+0BCh+arg_4], edx
.text:0040DC00                 mov     ecx, [esp+0BCh+arg_8]
.text:0040DC07                 mov     [esp+0BCh+arg_8], edi
.text:0040DC0E                 mov     [esp+0BCh+arg_C], ebx
.text:0040DC15                 mov     [esp+0BCh+arg_10], ecx
.text:0040DC1C
.text:0040DC1C loc_40DC1C:                             ; CODE XREF: sub_40DA60+181↑j
.text:0040DC1C                                         ; sub_40DA60+18C↑j
.text:0040DC1C                 mov     ecx, [esp+0BCh+arg_4]
.text:0040DC23                 mov     eax, [esp+0BCh+arg_8]
.text:0040DC2A                 mov     ebp, [esp+0BCh+arg_C]
.text:0040DC31                 mov     edi, [esp+0BCh+arg_10]
.text:0040DC38                 add     ecx, eax
.text:0040DC3A                 mov     [esp+0BCh+var_34], ecx
.text:0040DC41                 add     ebp, edi
.text:0040DC43                 cmp     esi, [esp+0BCh+arg_8]
.text:0040DC4A                 mov     [esp+0BCh+var_38], ebp
.text:0040DC51                 jg      loc_40FCD2
.text:0040DC57                 mov     edx, [esp+0BCh+arg_4]
.text:0040DC5E                 add     esi, edx
.text:0040DC60                 mov     [esp+0BCh+var_3C], esi
.text:0040DC67                 mov     esi, [esp+0BCh+arg_C]
.text:0040DC6E
.text:0040DC6E loc_40DC6E:                             ; CODE XREF: sub_40DA60+2292↓j
.text:0040DC6E                 mov     [esp+0BCh+var_40], esi
.text:0040DC72                 mov     ecx, [esp+0BCh+arg_8]
.text:0040DC79                 test    ecx, ecx
.text:0040DC7B                 jle     loc_40FCA8
.text:0040DC81                 mov     eax, [esp+0BCh+arg_8]
.text:0040DC88                 cmp     [esp+0BCh+arg_14], eax
.text:0040DC8F                 jg      loc_40FCA8
.text:0040DC95                 mov     edx, [esp+0BCh+arg_4]
.text:0040DC9C                 mov     ebx, [esp+0BCh+arg_14]
.text:0040DCA3                 mov     esi, [esp+0BCh+var_3C]
.text:0040DCAA                 add     edx, ebx
.text:0040DCAC                 mov     [esp+0BCh+var_44], edx
.text:0040DCB0                 mov     [esp+0BCh+var_48], esi
.text:0040DCB4
.text:0040DCB4 loc_40DCB4:                             ; CODE XREF: sub_40DA60+469↓j
.text:0040DCB4                                         ; sub_40DA60+47A↓j ...
.text:0040DCB4                 mov     edx, [esp+0BCh+var_50]
.text:0040DCB8                 mov     eax, offset loc_40DCD9
.text:0040DCBD                 cmp     [esp+0BCh+var_4C], edx
.text:0040DCC1                 jz      short loc_40DCD7
.text:0040DCC3
.text:0040DCC3 loc_40DCC3:                             ; CODE XREF: sub_40DA60+838↓j
.text:0040DCC3                 mov     ebp, [esp+0BCh+var_4C]
.text:0040DCC7                 movzx   ebx, byte ptr [ebp+0]
.text:0040DCCB                 inc     ebp
.text:0040DCCC                 mov     [esp+0BCh+var_4C], ebp
.text:0040DCD0
.text:0040DCD0 loc_40DCD0:                             ; CODE XREF: sub_40DA60+1CA0↓j
.text:0040DCD0                 mov     eax, ds:jpt_40DCD7[ebx*4] ; switch 6 cases
.text:0040DCD7
.text:0040DCD7 loc_40DCD7:                             ; CODE XREF: sub_40DA60+261↑j
.text:0040DCD7                                         ; sub_40DA60+83E↓j ...
.text:0040DCD7                 jmp     eax             ; switch jump
.text:0040DCD9 ; ---------------------------------------------------------------------------
.text:0040DCD9
.text:0040DCD9 loc_40DCD9:                             ; DATA XREF: sub_40DA60+258↑o
.text:0040DCD9                                         ; sub_40DA60+82F↓o ...
.text:0040DCD9                 mov     eax, [esp+0BCh+var_40]
.text:0040DCDD                 cmp     [esp+0BCh+var_44], eax
.text:0040DCE1                 jz      loc_40DF69
.text:0040DCE7                 mov     edi, [esp+0BCh+arg_8]
.text:0040DCEE                 xor     edx, edx
.text:0040DCF0                 test    edi, edi
.text:0040DCF2                 jz      short loc_40DD0C
.text:0040DCF4                 mov     eax, [esp+0BCh+var_88]
.text:0040DCF8                 cmp     [esp+0BCh+arg_4], eax
.text:0040DCFF                 ja      short loc_40DD0C
.text:0040DD01                 mov     esi, [esp+0BCh+var_34]
.text:0040DD08                 cmp     eax, esi
.text:0040DD0A                 jbe     short loc_40DD0E
.text:0040DD0C
.text:0040DD0C loc_40DD0C:                             ; CODE XREF: sub_40DA60+292↑j
.text:0040DD0C                                         ; sub_40DA60+29F↑j
.text:0040DD0C                 mov     dl, 1
.text:0040DD0E
.text:0040DD0E loc_40DD0E:                             ; CODE XREF: sub_40DA60+2AA↑j
.text:0040DD0E                 mov     ebp, [esp+0BCh+var_3C]
.text:0040DD15                 cmp     [esp+0BCh+var_48], ebp
.text:0040DD19                 setz    cl
.text:0040DD1C                 cmp     dl, cl
.text:0040DD1E                 jz      loc_40E278
.text:0040DD24                 mov     edx, [esp+0BCh+var_88]
.text:0040DD28                 cmp     [esp+0BCh+var_44], edx
.text:0040DD2C                 setnbe  al
.text:0040DD2F
.text:0040DD2F loc_40DD2F:                             ; CODE XREF: sub_40DA60+826↓j
.text:0040DD2F                 mov     esi, [esp+0BCh+var_24]
.text:0040DD36                 test    esi, esi
.text:0040DD38                 jz      loc_40E25F
.text:0040DD3E                 mov     ecx, [esp+0BCh+var_7C]
.text:0040DD42                 test    ecx, ecx
.text:0040DD44                 jz      short loc_40DD4A
.text:0040DD46                 test    al, al
.text:0040DD48                 jz      short loc_40DD90
.text:0040DD4A
.text:0040DD4A loc_40DD4A:                             ; CODE XREF: sub_40DA60+2E4↑j
.text:0040DD4A                 mov     [esp+0BCh+var_7C], 1
.text:0040DD52                 mov     eax, [esp+0BCh+var_5C]
.text:0040DD56                 mov     ebp, 1
.text:0040DD5B                 mov     edi, [esp+0BCh+var_44]
.text:0040DD5F                 cmp     ebp, eax
.text:0040DD61                 mov     [esp+0BCh+var_88], edi
.text:0040DD65                 jnb     short loc_40DD90
.text:0040DD67
.text:0040DD67 loc_40DD67:                             ; CODE XREF: sub_40DA60+328↓j
.text:0040DD67                 mov     edx, [esp+0BCh+var_68]
.text:0040DD6B                 mov     ecx, [esp+0BCh+var_80]
.text:0040DD6F                 mov     eax, [esp+0BCh+var_6C]
.text:0040DD73                 mov     edi, [edx+ebp*4]
.text:0040DD76                 mov     edx, [esp+0BCh+var_84]
.text:0040DD7A                 mov     [ecx+ebp*4], edi
.text:0040DD7D                 mov     ebx, [eax+ebp*4]
.text:0040DD80                 mov     [edx+ebp*4], ebx
.text:0040DD83                 inc     ebp
.text:0040DD84                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040DD88                 jb      short loc_40DD67
.text:0040DD8A                 lea     esi, [esi+0]
.text:0040DD90
.text:0040DD90 loc_40DD90:                             ; CODE XREF: sub_40DA60+2E8↑j
.text:0040DD90                                         ; sub_40DA60+305↑j ...
.text:0040DD90                 test    esi, esi
.text:0040DD92                 mov     eax, esi
.text:0040DD94                 jz      loc_40DEFE
.text:0040DD9A                 mov     ebx, [esp+0BCh+Src]
.text:0040DDA1                 dec     esi
.text:0040DDA2                 mov     [esp+0BCh+var_24], esi
.text:0040DDA9                 mov     esi, [ebx+esi*4]
.text:0040DDAC                 test    esi, esi
.text:0040DDAE                 jz      short loc_40DDB4
.text:0040DDB0                 mov     [esp+0BCh+var_44], esi
.text:0040DDB4
.text:0040DDB4 loc_40DDB4:                             ; CODE XREF: sub_40DA60+34E↑j
.text:0040DDB4                 lea     ecx, [eax-2]
.text:0040DDB7                 lea     edx, [eax-3]
.text:0040DDBA                 mov     [esp+0BCh+var_24], ecx
.text:0040DDC1                 mov     ebp, [ebx+ecx*4]
.text:0040DDC4                 lea     ecx, [eax-4]
.text:0040DDC7                 mov     [esp+0BCh+var_24], edx
.text:0040DDCE                 mov     [esp+0BCh+var_4C], ebp
.text:0040DDD2                 mov     edi, [ebx+edx*4]
.text:0040DDD5                 mov     [esp+0BCh+var_24], ecx
.text:0040DDDC                 mov     [esp+0BCh+var_64], edi
.text:0040DDE0                 mov     ebp, [ebx+ecx*4]
.text:0040DDE3                 mov     ecx, [esp+0BCh+var_64]
.text:0040DDE7                 mov     [esp+0BCh+var_60], ebp
.text:0040DDEB                 cmp     ecx, ebp
.text:0040DDED                 jb      short loc_40DE49
.text:0040DDEF                 nop
.text:0040DDF0
.text:0040DDF0 loc_40DDF0:                             ; CODE XREF: sub_40DA60+3E7↓j
.text:0040DDF0                 mov     eax, [esp+0BCh+var_24]
.text:0040DDF7                 mov     ebp, [esp+0BCh+var_78]
.text:0040DDFB                 dec     eax
.text:0040DDFC                 mov     [esp+0BCh+var_24], eax
.text:0040DE03                 mov     edi, [ebx+eax*4]
.text:0040DE06                 mov     [ebp+ecx*4+0], edi
.text:0040DE0A                 mov     ebp, [esp+0BCh+var_24]
.text:0040DE11                 mov     esi, [esp+0BCh+Src]
.text:0040DE18                 lea     edx, [ebp-1]
.text:0040DE1B                 sub     ebp, 2
.text:0040DE1E                 mov     ebx, esi
.text:0040DE20                 mov     [esp+0BCh+var_24], edx
.text:0040DE27                 mov     edi, [esi+edx*4]
.text:0040DE2A                 mov     edx, [esp+0BCh+var_6C]
.text:0040DE2E                 mov     [esp+0BCh+var_24], ebp
.text:0040DE35                 mov     [edx+ecx*4], edi
.text:0040DE38                 mov     edi, [esi+ebp*4]
.text:0040DE3B                 mov     esi, [esp+0BCh+var_68]
.text:0040DE3F                 mov     [esi+ecx*4], edi
.text:0040DE42                 dec     ecx
.text:0040DE43                 cmp     ecx, [esp+0BCh+var_60]
.text:0040DE47                 jnb     short loc_40DDF0
.text:0040DE49
.text:0040DE49 loc_40DE49:                             ; CODE XREF: sub_40DA60+38D↑j
.text:0040DE49                 mov     [esp+0BCh+var_8C], 0
.text:0040DE51                 mov     ebx, [esp+0BCh+var_4C]
.text:0040DE55                 test    ebx, ebx
.text:0040DE57                 jz      short loc_40DEB2
.text:0040DE59                 mov     edx, [esp+0BCh+var_50]
.text:0040DE5D                 cmp     [esp+0BCh+var_4C], edx
.text:0040DE61                 jnb     short loc_40DEBE
.text:0040DE63                 mov     ecx, [esp+0BCh+var_4C]
.text:0040DE67                 xor     edx, edx
.text:0040DE69                 movzx   eax, byte ptr [ecx]
.text:0040DE6C                 cmp     eax, 12h
.text:0040DE6F                 ja      loc_40DEF5
.text:0040DE75                 cmp     eax, 11h
.text:0040DE78                 jnb     short loc_40DE80
.text:0040DE7A                 cmp     eax, 0Dh
.text:0040DE7D                 jnz     short loc_40DEBE
.text:0040DE7F                 nop
.text:0040DE80
.text:0040DE80 loc_40DE80:                             ; CODE XREF: sub_40DA60+418↑j
.text:0040DE80                                         ; sub_40DA60+49C↓j
.text:0040DE80                 mov     ebp, [esp+0BCh+var_4C]
.text:0040DE84                 mov     ecx, [esp+0BCh+var_4C]
.text:0040DE88                 inc     ebp
.text:0040DE89                 mov     [esp+0BCh+var_30], ebp
.text:0040DE90                 movsx   esi, byte ptr [ebp+1]
.text:0040DE94                 movzx   eax, byte ptr [ecx+1]
.text:0040DE98                 shl     esi, 8
.text:0040DE9B                 lea     edi, [esi+eax]
.text:0040DE9E                 lea     eax, [edi+ecx+3]
.text:0040DEA2                 test    dl, dl
.text:0040DEA4                 mov     [esp+0BCh+var_30], eax
.text:0040DEAB                 jz      short loc_40DEF0
.text:0040DEAD                 cmp     byte ptr [eax], 15h
.text:0040DEB0
.text:0040DEB0 loc_40DEB0:                             ; CODE XREF: sub_40DA60+493↓j
.text:0040DEB0                 jnz     short loc_40DEBE
.text:0040DEB2
.text:0040DEB2 loc_40DEB2:                             ; CODE XREF: sub_40DA60+3F7↑j
.text:0040DEB2                                         ; sub_40DA60+889↓j ...
.text:0040DEB2                 mov     esi, [esp+0BCh+var_24]
.text:0040DEB9                 jmp     loc_40DD90
.text:0040DEBE ; ---------------------------------------------------------------------------
.text:0040DEBE
.text:0040DEBE loc_40DEBE:                             ; CODE XREF: sub_40DA60+401↑j
.text:0040DEBE                                         ; sub_40DA60+41D↑j ...
.text:0040DEBE                 mov     ebx, [esp+0BCh+arg_4]
.text:0040DEC5                 cmp     [esp+0BCh+var_44], ebx
.text:0040DEC9                 jb      loc_40DCB4
.text:0040DECF                 mov     edi, [esp+0BCh+var_34]
.text:0040DED6                 cmp     [esp+0BCh+var_44], edi
.text:0040DEDA                 ja      loc_40DCB4
.text:0040DEE0                 mov     edx, [esp+0BCh+var_3C]
.text:0040DEE7                 mov     [esp+0BCh+var_48], edx
.text:0040DEEB                 jmp     loc_40DCB4
.text:0040DEF0 ; ---------------------------------------------------------------------------
.text:0040DEF0
.text:0040DEF0 loc_40DEF0:                             ; CODE XREF: sub_40DA60+44B↑j
.text:0040DEF0                 cmp     byte ptr [eax], 0Fh
.text:0040DEF3                 jmp     short loc_40DEB0
.text:0040DEF5 ; ---------------------------------------------------------------------------
.text:0040DEF5
.text:0040DEF5 loc_40DEF5:                             ; CODE XREF: sub_40DA60+40F↑j
.text:0040DEF5                 cmp     eax, 16h
.text:0040DEF8                 jnz     short loc_40DEBE
.text:0040DEFA                 mov     dl, 1
.text:0040DEFC                 jmp     short loc_40DE80
.text:0040DEFE ; ---------------------------------------------------------------------------
.text:0040DEFE
.text:0040DEFE loc_40DEFE:                             ; CODE XREF: sub_40DA60+334↑j
.text:0040DEFE                 mov     ecx, [esp+0BCh+var_7C]
.text:0040DF02                 test    ecx, ecx
.text:0040DF04                 jz      loc_40E255
.text:0040DF0A
.text:0040DF0A loc_40DF0A:                             ; CODE XREF: sub_40DA60+813↓j
.text:0040DF0A                 mov     esi, [esp+0BCh+var_88]
.text:0040DF0E                 mov     ebx, [esp+0BCh+arg_4]
.text:0040DF15                 mov     [esp+0BCh+var_44], esi
.text:0040DF19                 cmp     esi, ebx
.text:0040DF1B                 jb      short loc_40DF33
.text:0040DF1D                 mov     eax, [esp+0BCh+var_34]
.text:0040DF24                 mov     ecx, [esp+0BCh+var_3C]
.text:0040DF2B                 cmp     esi, eax
.text:0040DF2D                 mov     [esp+0BCh+var_48], ecx
.text:0040DF31                 jbe     short loc_40DF3B
.text:0040DF33
.text:0040DF33 loc_40DF33:                             ; CODE XREF: sub_40DA60+4BB↑j
.text:0040DF33                 mov     esi, [esp+0BCh+var_40]
.text:0040DF37                 mov     [esp+0BCh+var_48], esi
.text:0040DF3B
.text:0040DF3B loc_40DF3B:                             ; CODE XREF: sub_40DA60+4D1↑j
.text:0040DF3B                 mov     ebp, 1
.text:0040DF40                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040DF44                 jnb     short loc_40DF69
.text:0040DF46
.text:0040DF46 loc_40DF46:                             ; CODE XREF: sub_40DA60+507↓j
.text:0040DF46                 mov     eax, [esp+0BCh+var_80]
.text:0040DF4A                 mov     ecx, [esp+0BCh+var_68]
.text:0040DF4E                 mov     ebx, [esp+0BCh+var_84]
.text:0040DF52                 mov     edi, [eax+ebp*4]
.text:0040DF55                 mov     [ecx+ebp*4], edi
.text:0040DF58                 mov     edx, [ebx+ebp*4]
.text:0040DF5B                 mov     edi, [esp+0BCh+var_6C]
.text:0040DF5F                 mov     [edi+ebp*4], edx
.text:0040DF62                 inc     ebp
.text:0040DF63                 cmp     ebp, [esp+0BCh+var_5C]
.text:0040DF67                 jb      short loc_40DF46
.text:0040DF69
.text:0040DF69 loc_40DF69:                             ; CODE XREF: sub_40DA60+281↑j
.text:0040DF69                                         ; sub_40DA60+4E4↑j ...
.text:0040DF69                 mov     ebp, [esp+0BCh+arg_18]
.text:0040DF70                 test    ebp, ebp
.text:0040DF72                 jz      loc_40E182
.text:0040DF78                 mov     edx, [esp+0BCh+arg_0]
.text:0040DF7F                 movzx   eax, byte ptr [edx+1Ch]
.text:0040DF83                 test    al, 10h
.text:0040DF85                 jnz     loc_40E182
.text:0040DF8B                 shr     al, 1
.text:0040DF8D                 and     eax, 3
.text:0040DF90                 jnz     loc_40E1E8
.text:0040DF96                 mov     eax, [esp+0BCh+var_5C]
.text:0040DF9A                 inc     eax
.text:0040DF9B                 cmp     eax, 1Eh
.text:0040DF9E                 jnb     short loc_40DFA5
.text:0040DFA0                 mov     eax, 1Eh
.text:0040DFA5
.text:0040DFA5 loc_40DFA5:                             ; CODE XREF: sub_40DA60+53E↑j
.text:0040DFA5                 mov     ebp, [esp+0BCh+arg_18]
.text:0040DFAC                 mov     [ebp+0], eax
.text:0040DFAF                 shl     eax, 2
.text:0040DFB2                 mov     [esp+0BCh+Size], eax ; Size
.text:0040DFB5                 call    malloc
.text:0040DFBA                 mov     edi, [esp+0BCh+arg_18]
.text:0040DFC1                 mov     ebx, [edi]
.text:0040DFC3                 mov     [edi+4], eax
.text:0040DFC6                 shl     ebx, 2
.text:0040DFC9                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040DFCC                 call    malloc
.text:0040DFD1                 mov     ecx, [esp+0BCh+arg_18]
.text:0040DFD8                 mov     esi, [ecx+4]
.text:0040DFDB                 mov     [ecx+8], eax
.text:0040DFDE                 test    esi, esi
.text:0040DFE0                 jz      loc_40E1E1
.text:0040DFE6                 test    eax, eax
.text:0040DFE8                 jz      loc_40E1E1
.text:0040DFEE                 mov     edx, [esp+0BCh+arg_0]
.text:0040DFF5                 movzx   ecx, byte ptr [edx+1Ch]
.text:0040DFF9                 and     cl, 0F9h
.text:0040DFFC                 or      cl, 2
.text:0040DFFF                 mov     [edx+1Ch], cl
.text:0040E002
.text:0040E002 loc_40E002:                             ; CODE XREF: sub_40DA60+7ED↓j
.text:0040E002                 mov     ecx, [esp+0BCh+arg_18]
.text:0040E009                 mov     edx, [ecx]
.text:0040E00B
.text:0040E00B loc_40E00B:                             ; CODE XREF: sub_40DA60+794↓j
.text:0040E00B                                         ; sub_40DA60+7A9↓j
.text:0040E00B                 test    edx, edx
.text:0040E00D                 jz      short loc_40E058
.text:0040E00F                 mov     esi, [esp+0BCh+arg_18]
.text:0040E016                 mov     edi, [esp+0BCh+var_3C]
.text:0040E01D                 mov     edx, [esp+0BCh+arg_14]
.text:0040E024                 cmp     [esp+0BCh+var_48], edi
.text:0040E028                 mov     ebp, [esi+4]
.text:0040E02B                 mov     [ebp+0], edx
.text:0040E02E                 mov     edx, [esi+8]
.text:0040E031                 jz      loc_40E1CF
.text:0040E037                 mov     eax, [esp+0BCh+var_44]
.text:0040E03B                 mov     esi, [esp+0BCh+arg_C]
.text:0040E042                 mov     ecx, [esp+0BCh+arg_8]
.text:0040E049                 sub     eax, esi
.text:0040E04B                 add     eax, ecx
.text:0040E04D
.text:0040E04D loc_40E04D:                             ; CODE XREF: sub_40DA60+77C↓j
.text:0040E04D                 mov     [edx], eax
.text:0040E04F                 mov     edi, [esp+0BCh+arg_18]
.text:0040E056                 mov     edx, [edi]
.text:0040E058
.text:0040E058 loc_40E058:                             ; CODE XREF: sub_40DA60+5AD↑j
.text:0040E058                 mov     ebp, 1
.text:0040E05D
.text:0040E05D loc_40E05D:                             ; CODE XREF: sub_40DA60+6A8↓j
.text:0040E05D                 cmp     edx, [esp+0BCh+var_5C]
.text:0040E061                 mov     eax, edx
.text:0040E063                 jbe     short loc_40E069
.text:0040E065                 mov     eax, [esp+0BCh+var_5C]
.text:0040E069
.text:0040E069 loc_40E069:                             ; CODE XREF: sub_40DA60+603↑j
.text:0040E069                 cmp     ebp, eax
.text:0040E06B                 jnb     loc_40E153
.text:0040E071                 mov     ebx, [esp+0BCh+var_68]
.text:0040E075                 mov     eax, [ebx+ebp*4]
.text:0040E078                 cmp     eax, offset unk_420390
.text:0040E07D                 jz      loc_40E136
.text:0040E083                 mov     esi, [esp+0BCh+var_6C]
.text:0040E087                 mov     edx, [esi+ebp*4]
.text:0040E08A                 cmp     edx, offset unk_420390
.text:0040E090                 jz      loc_40E136
.text:0040E096                 mov     edi, [esp+0BCh+arg_8]
.text:0040E09D                 mov     ebx, [esp+0BCh+arg_18]
.text:0040E0A4                 test    edi, edi
.text:0040E0A6                 mov     ecx, [ebx+4]
.text:0040E0A9                 jz      short loc_40E122
.text:0040E0AB                 cmp     [esp+0BCh+arg_4], eax
.text:0040E0B2                 ja      short loc_40E122
.text:0040E0B4                 cmp     eax, [esp+0BCh+var_34]
.text:0040E0BB                 ja      short loc_40E122
.text:0040E0BD                 mov     esi, [esp+0BCh+arg_4]
.text:0040E0C4                 sub     eax, esi
.text:0040E0C6
.text:0040E0C6 loc_40E0C6:                             ; CODE XREF: sub_40DA60+6D4↓j
.text:0040E0C6                 mov     [ecx+ebp*4], eax
.text:0040E0C9                 mov     esi, [esp+0BCh+arg_18]
.text:0040E0D0                 mov     eax, [esp+0BCh+arg_8]
.text:0040E0D7                 mov     ecx, [esi+8]
.text:0040E0DA                 test    eax, eax
.text:0040E0DC                 jz      short loc_40E10D
.text:0040E0DE                 cmp     [esp+0BCh+arg_4], edx
.text:0040E0E5                 ja      short loc_40E10D
.text:0040E0E7                 cmp     edx, [esp+0BCh+var_34]
.text:0040E0EE                 ja      short loc_40E10D
.text:0040E0F0                 mov     eax, edx
.text:0040E0F2                 mov     edx, [esp+0BCh+arg_4]
.text:0040E0F9                 sub     eax, edx
.text:0040E0FB
.text:0040E0FB loc_40E0FB:                             ; CODE XREF: sub_40DA60+6C0↓j
.text:0040E0FB                 mov     [ecx+ebp*4], eax
.text:0040E0FE
.text:0040E0FE loc_40E0FE:                             ; CODE XREF: sub_40DA60+6F1↓j
.text:0040E0FE                 mov     ecx, [esp+0BCh+arg_18]
.text:0040E105                 inc     ebp
.text:0040E106                 mov     edx, [ecx]
.text:0040E108                 jmp     loc_40E05D
.text:0040E10D ; ---------------------------------------------------------------------------
.text:0040E10D
.text:0040E10D loc_40E10D:                             ; CODE XREF: sub_40DA60+67C↑j
.text:0040E10D                                         ; sub_40DA60+685↑j ...
.text:0040E10D                 mov     eax, [esp+0BCh+arg_C]
.text:0040E114                 mov     edi, [esp+0BCh+arg_8]
.text:0040E11B                 sub     edx, eax
.text:0040E11D                 lea     eax, [edi+edx]
.text:0040E120                 jmp     short loc_40E0FB
.text:0040E122 ; ---------------------------------------------------------------------------
.text:0040E122
.text:0040E122 loc_40E122:                             ; CODE XREF: sub_40DA60+649↑j
.text:0040E122                                         ; sub_40DA60+652↑j ...
.text:0040E122                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E129                 mov     edi, [esp+0BCh+arg_8]
.text:0040E130                 sub     eax, ebx
.text:0040E132                 add     eax, edi
.text:0040E134                 jmp     short loc_40E0C6
.text:0040E136 ; ---------------------------------------------------------------------------
.text:0040E136
.text:0040E136 loc_40E136:                             ; CODE XREF: sub_40DA60+61D↑j
.text:0040E136                                         ; sub_40DA60+630↑j
.text:0040E136                 mov     eax, [esp+0BCh+arg_18]
.text:0040E13D                 mov     ecx, [eax+4]
.text:0040E140                 mov     edx, [eax+8]
.text:0040E143                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040E14A                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:0040E151                 jmp     short loc_40E0FE
.text:0040E153 ; ---------------------------------------------------------------------------
.text:0040E153
.text:0040E153 loc_40E153:                             ; CODE XREF: sub_40DA60+60B↑j
.text:0040E153                 mov     ebp, [esp+0BCh+var_5C]
.text:0040E157                 cmp     ebp, edx
.text:0040E159                 jnb     short loc_40E182
.text:0040E15B                 mov     esi, [esp+0BCh+arg_18]
.text:0040E162                 mov     edx, [esi+4]
.text:0040E165                 mov     eax, [esi+8]
.text:0040E168
.text:0040E168 loc_40E168:                             ; CODE XREF: sub_40DA60+720↓j
.text:0040E168                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:0040E16F                 mov     edi, [esp+0BCh+arg_18]
.text:0040E176                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:0040E17D                 inc     ebp
.text:0040E17E                 cmp     ebp, [edi]
.text:0040E180                 jb      short loc_40E168
.text:0040E182
.text:0040E182 loc_40E182:                             ; CODE XREF: sub_40DA60+512↑j
.text:0040E182                                         ; sub_40DA60+525↑j ...
.text:0040E182                 mov     eax, [esp+0BCh+var_44]
.text:0040E186                 mov     ecx, [esp+0BCh+arg_14]
.text:0040E18D                 mov     ebp, [esp+0BCh+var_3C]
.text:0040E194                 sub     eax, ecx
.text:0040E196                 cmp     [esp+0BCh+var_48], ebp
.text:0040E19A                 jz      short loc_40E1C2
.text:0040E19C                 mov     ebx, [esp+0BCh+arg_8]
.text:0040E1A3                 mov     ebp, eax
.text:0040E1A5                 sub     [esp+0BCh+arg_C], ebx
.text:0040E1AC                 mov     edx, [esp+0BCh+arg_C]
.text:0040E1B3                 sub     ebp, edx
.text:0040E1B5
.text:0040E1B5 loc_40E1B5:                             ; CODE XREF: sub_40DA60+76D↓j
.text:0040E1B5                 mov     eax, ebp
.text:0040E1B7
.text:0040E1B7 loc_40E1B7:                             ; CODE XREF: sub_40DA60+89↑j
.text:0040E1B7                                         ; sub_40DA60+786↓j ...
.text:0040E1B7                 add     esp, 0ACh
.text:0040E1BD                 pop     ebx
.text:0040E1BE                 pop     esi
.text:0040E1BF                 pop     edi
.text:0040E1C0                 pop     ebp
.text:0040E1C1                 retn
.text:0040E1C2 ; ---------------------------------------------------------------------------
.text:0040E1C2
.text:0040E1C2 loc_40E1C2:                             ; CODE XREF: sub_40DA60+73A↑j
.text:0040E1C2                 mov     esi, [esp+0BCh+arg_4]
.text:0040E1C9                 mov     ebp, eax
.text:0040E1CB                 sub     ebp, esi
.text:0040E1CD                 jmp     short loc_40E1B5
.text:0040E1CF ; ---------------------------------------------------------------------------
.text:0040E1CF
.text:0040E1CF loc_40E1CF:                             ; CODE XREF: sub_40DA60+5D1↑j
.text:0040E1CF                 mov     eax, [esp+0BCh+var_44]
.text:0040E1D3                 mov     ebx, [esp+0BCh+arg_4]
.text:0040E1DA                 sub     eax, ebx
.text:0040E1DC                 jmp     loc_40E04D
.text:0040E1E1 ; ---------------------------------------------------------------------------
.text:0040E1E1
.text:0040E1E1 loc_40E1E1:                             ; CODE XREF: sub_40DA60+580↑j
.text:0040E1E1                                         ; sub_40DA60+588↑j ...
.text:0040E1E1                 mov     eax, 0FFFFFFFEh
.text:0040E1E6                 jmp     short loc_40E1B7
.text:0040E1E8 ; ---------------------------------------------------------------------------
.text:0040E1E8
.text:0040E1E8 loc_40E1E8:                             ; CODE XREF: sub_40DA60+530↑j
.text:0040E1E8                 dec     eax
.text:0040E1E9                 jz      short loc_40E1F9
.text:0040E1EB                 mov     eax, [esp+0BCh+arg_18]
.text:0040E1F2                 mov     edx, [eax]
.text:0040E1F4                 jmp     loc_40E00B
.text:0040E1F9 ; ---------------------------------------------------------------------------
.text:0040E1F9
.text:0040E1F9 loc_40E1F9:                             ; CODE XREF: sub_40DA60+789↑j
.text:0040E1F9                 mov     ecx, [esp+0BCh+arg_18]
.text:0040E200                 mov     eax, [esp+0BCh+var_5C]
.text:0040E204                 mov     edx, [ecx]
.text:0040E206                 inc     eax
.text:0040E207                 cmp     edx, eax
.text:0040E209                 jnb     loc_40E00B
.text:0040E20F                 mov     [ecx], eax
.text:0040E211                 shl     eax, 2
.text:0040E214                 mov     [esp+0BCh+var_B8], eax ; Size
.text:0040E218                 mov     edx, [ecx+4]
.text:0040E21B                 mov     [esp+0BCh+Size], edx ; Block
.text:0040E21E                 call    realloc
.text:0040E223                 mov     edi, [esp+0BCh+arg_18]
.text:0040E22A                 mov     ebp, [edi]
.text:0040E22C                 mov     [edi+4], eax
.text:0040E22F                 shl     ebp, 2
.text:0040E232                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:0040E236                 mov     ebx, [edi+8]
.text:0040E239                 mov     [esp+0BCh+Size], ebx ; Block
.text:0040E23C                 call    realloc
.text:0040E241                 mov     [edi+8], eax
.text:0040E244                 mov     esi, [edi+4]
.text:0040E247                 test    esi, esi
.text:0040E249                 jz      short loc_40E1E1
.text:0040E24B                 test    eax, eax
.text:0040E24D                 jnz     loc_40E002
.text:0040E253                 jmp     short loc_40E1E1
.text:0040E255 ; ---------------------------------------------------------------------------
.text:0040E255
.text:0040E255 loc_40E255:                             ; CODE XREF: sub_40DA60+107↑j
.text:0040E255                                         ; sub_40DA60+124↑j ...
.text:0040E255                 mov     eax, 0FFFFFFFFh
.text:0040E25A                 jmp     loc_40E1B7
.text:0040E25F ; ---------------------------------------------------------------------------
.text:0040E25F
.text:0040E25F loc_40E25F:                             ; CODE XREF: sub_40DA60+2D8↑j
.text:0040E25F                 mov     ebp, [esp+0BCh+var_7C]
.text:0040E263                 test    ebp, ebp
.text:0040E265                 jz      loc_40DF69
.text:0040E26B                 test    al, al
.text:0040E26D                 jnz     loc_40DF69
.text:0040E273                 jmp     loc_40DF0A
.text:0040E278 ; ---------------------------------------------------------------------------
.text:0040E278
.text:0040E278 loc_40E278:                             ; CODE XREF: sub_40DA60+2BE↑j
.text:0040E278                 mov     ebx, [esp+0BCh+var_3C]
.text:0040E27F                 cmp     [esp+0BCh+var_48], ebx
.text:0040E283                 setnz   al
.text:0040E286                 jmp     loc_40DD2F
.text:0040E28B ; ---------------------------------------------------------------------------
.text:0040E28B
.text:0040E28B loc_40E28B:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040E28B                                         ; sub_40DA60+898↓j ...
.text:0040E28B                 mov     edx, [esp+0BCh+var_50] ; jumptable 0040DCD7 case 0
.text:0040E28B                                         ; jumptable 0040E656 case 0
.text:0040E28B                                         ; jumptable 0040E728 case 0
.text:0040E28F                 mov     eax, offset loc_40DCD9
.text:0040E294                 cmp     [esp+0BCh+var_4C], edx
.text:0040E298                 jnz     loc_40DCC3
.text:0040E29E                 jmp     loc_40DCD7
.text:0040E2A3 ; ---------------------------------------------------------------------------
.text:0040E2A3
.text:0040E2A3 loc_40E2A3:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040E2A3                                         ; sub_40DA60+BF6↓j ...
.text:0040E2A3                 jmp     loc_40DF69      ; jumptable 0040DCD7 case 1
.text:0040E2A3                                         ; jumptable 0040E656 case 1
.text:0040E2A3                                         ; jumptable 0040E728 case 1
.text:0040E2A8 ; ---------------------------------------------------------------------------
.text:0040E2A8
.text:0040E2A8 loc_40E2A8:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040E2A8                                         ; sub_40DA60+BF6↓j ...
.text:0040E2A8                 mov     eax, [esp+0BCh+var_4C] ; jumptable 0040DCD7 case 2
.text:0040E2A8                                         ; jumptable 0040E656 case 2
.text:0040E2A8                                         ; jumptable 0040E728 case 2
.text:0040E2AC                 mov     edi, [esp+0BCh+var_58]
.text:0040E2B0                 movzx   ebp, byte ptr [eax]
.text:0040E2B3                 inc     eax
.text:0040E2B4                 test    edi, edi
.text:0040E2B6                 mov     [esp+0BCh+var_4C], eax
.text:0040E2BA                 jz      loc_40E349
.text:0040E2C0
.text:0040E2C0 loc_40E2C0:                             ; CODE XREF: sub_40DA60+890↓j
.text:0040E2C0                 mov     ecx, [esp+0BCh+var_48]
.text:0040E2C4                 cmp     [esp+0BCh+var_44], ecx
.text:0040E2C8                 jz      short loc_40E326
.text:0040E2CA
.text:0040E2CA loc_40E2CA:                             ; CODE XREF: sub_40DA60+8E7↓j
.text:0040E2CA                 mov     ecx, [esp+0BCh+var_44]
.text:0040E2CE                 mov     ebx, [esp+0BCh+var_4C]
.text:0040E2D2                 mov     edx, [esp+0BCh+var_58]
.text:0040E2D6                 movzx   edi, byte ptr [ecx]
.text:0040E2D9                 inc     ecx
.text:0040E2DA                 movzx   eax, byte ptr [ebx]
.text:0040E2DD                 inc     ebx
.text:0040E2DE                 mov     [esp+0BCh+var_4C], ebx
.text:0040E2E2                 mov     [esp+0BCh+var_44], ecx
.text:0040E2E6                 cmp     [edi+edx], al
.text:0040E2E9                 jnz     loc_40DEB2
.text:0040E2EF                 dec     ebp
.text:0040E2F0                 jnz     short loc_40E2C0
.text:0040E2F2
.text:0040E2F2 loc_40E2F2:                             ; CODE XREF: sub_40DA60+916↓j
.text:0040E2F2                 mov     ebp, [esp+0BCh+var_8C]
.text:0040E2F6                 test    ebp, ebp
.text:0040E2F8                 jnz     short loc_40E28B ; jumptable 0040DCD7 case 0
.text:0040E2F8                                         ; jumptable 0040E656 case 0
.text:0040E2F8                                         ; jumptable 0040E728 case 0
.text:0040E2FA                 mov     [esp+0BCh+var_8C], 1
.text:0040E302                 mov     eax, [esp+0BCh+var_60]
.text:0040E306                 mov     edx, [esp+0BCh+var_64]
.text:0040E30A                 cmp     eax, edx
.text:0040E30C                 ja      loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040E30C                                         ; jumptable 0040E656 case 0
.text:0040E30C                                         ; jumptable 0040E728 case 0
.text:0040E312
.text:0040E312 loc_40E312:                             ; CODE XREF: sub_40DA60+8BF↓j
.text:0040E312                 mov     esi, [esp+0BCh+var_78]
.text:0040E316                 or      byte ptr [esi+eax*4], 18h
.text:0040E31A                 inc     eax
.text:0040E31B                 cmp     eax, [esp+0BCh+var_64]
.text:0040E31F                 jbe     short loc_40E312
.text:0040E321                 jmp     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040E321                                         ; jumptable 0040E656 case 0
.text:0040E321                                         ; jumptable 0040E728 case 0
.text:0040E326 ; ---------------------------------------------------------------------------
.text:0040E326
.text:0040E326 loc_40E326:                             ; CODE XREF: sub_40DA60+868↑j
.text:0040E326                                         ; sub_40DA60+8E5↓j
.text:0040E326                 mov     edx, [esp+0BCh+var_40]
.text:0040E32A                 cmp     [esp+0BCh+var_48], edx
.text:0040E32E                 jz      loc_40DEB2
.text:0040E334                 mov     [esp+0BCh+var_48], edx
.text:0040E338                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E33F                 cmp     ebx, edx
.text:0040E341                 mov     [esp+0BCh+var_44], ebx
.text:0040E345                 jz      short loc_40E326
.text:0040E347                 jmp     short loc_40E2CA
.text:0040E349 ; ---------------------------------------------------------------------------
.text:0040E349
.text:0040E349 loc_40E349:                             ; CODE XREF: sub_40DA60+85A↑j
.text:0040E349                                         ; sub_40DA60+914↓j
.text:0040E349                 mov     esi, [esp+0BCh+var_48]
.text:0040E34D                 cmp     [esp+0BCh+var_44], esi
.text:0040E351                 jz      short loc_40E380
.text:0040E353
.text:0040E353 loc_40E353:                             ; CODE XREF: sub_40DA60+941↓j
.text:0040E353                 mov     ebx, [esp+0BCh+var_4C]
.text:0040E357                 mov     eax, [esp+0BCh+var_44]
.text:0040E35B                 movzx   edx, byte ptr [ebx]
.text:0040E35E                 inc     ebx
.text:0040E35F                 mov     [esp+0BCh+var_4C], ebx
.text:0040E363                 movzx   ecx, byte ptr [eax]
.text:0040E366                 inc     eax
.text:0040E367                 mov     [esp+0BCh+var_44], eax
.text:0040E36B                 cmp     cl, dl
.text:0040E36D                 jnz     loc_40DEB2
.text:0040E373                 dec     ebp
.text:0040E374                 jnz     short loc_40E349
.text:0040E376                 jmp     loc_40E2F2
.text:0040E376 ; ---------------------------------------------------------------------------
.text:0040E37B                 align 10h
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: sub_40DA60+8F1↑j
.text:0040E380                                         ; sub_40DA60+93F↓j
.text:0040E380                 mov     esi, [esp+0BCh+var_40]
.text:0040E384                 cmp     [esp+0BCh+var_48], esi
.text:0040E388                 jz      loc_40DEB2
.text:0040E38E                 mov     [esp+0BCh+var_48], esi
.text:0040E392                 mov     edi, [esp+0BCh+arg_C]
.text:0040E399                 cmp     edi, esi
.text:0040E39B                 mov     [esp+0BCh+var_44], edi
.text:0040E39F                 jz      short loc_40E380
.text:0040E3A1                 jmp     short loc_40E353
.text:0040E3A3 ; ---------------------------------------------------------------------------
.text:0040E3A3
.text:0040E3A3 loc_40E3A3:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040E3A3                                         ; sub_40DA60+BF6↓j ...
.text:0040E3A3                 mov     edi, [esp+0BCh+var_48] ; jumptable 0040DCD7 case 3
.text:0040E3A3                                         ; jumptable 0040E656 case 3
.text:0040E3A3                                         ; jumptable 0040E728 case 3
.text:0040E3A7                 cmp     [esp+0BCh+var_44], edi
.text:0040E3AB                 jz      loc_40FC82
.text:0040E3B1
.text:0040E3B1 loc_40E3B1:                             ; CODE XREF: sub_40DA60+2243↓j
.text:0040E3B1                 mov     eax, [esp+0BCh+arg_0]
.text:0040E3B8                 test    byte ptr [eax+0Ch], 40h
.text:0040E3BC                 jnz     short loc_40E3E0
.text:0040E3BE                 mov     ebx, [esp+0BCh+var_58]
.text:0040E3C2                 test    ebx, ebx
.text:0040E3C4                 jz      loc_40FC76
.text:0040E3CA                 mov     esi, [esp+0BCh+var_44]
.text:0040E3CE                 mov     edx, [esp+0BCh+var_58]
.text:0040E3D2                 movzx   ebp, byte ptr [esi]
.text:0040E3D5                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:0040E3DA
.text:0040E3DA loc_40E3DA:                             ; CODE XREF: sub_40DA60+221D↓j
.text:0040E3DA                 jz      loc_40DEB2
.text:0040E3E0
.text:0040E3E0 loc_40E3E0:                             ; CODE XREF: sub_40DA60+95C↑j
.text:0040E3E0                 mov     ecx, [esp+0BCh+arg_0]
.text:0040E3E7                 cmp     byte ptr [ecx+0Ch], 0
.text:0040E3EB                 jns     short loc_40E40F
.text:0040E3ED                 mov     ebx, [esp+0BCh+var_58]
.text:0040E3F1                 test    ebx, ebx
.text:0040E3F3                 jz      loc_40FC6A
.text:0040E3F9                 mov     edx, [esp+0BCh+var_44]
.text:0040E3FD                 mov     eax, [esp+0BCh+var_58]
.text:0040E401                 movzx   ebp, byte ptr [edx]
.text:0040E404                 cmp     byte ptr [ebp+eax+0], 0
.text:0040E409
.text:0040E409 loc_40E409:                             ; CODE XREF: sub_40DA60+2211↓j
.text:0040E409                 jz      loc_40DEB2
.text:0040E40F
.text:0040E40F loc_40E40F:                             ; CODE XREF: sub_40DA60+98B↑j
.text:0040E40F                 mov     esi, [esp+0BCh+var_8C]
.text:0040E413                 test    esi, esi
.text:0040E415                 jnz     short loc_40E43A
.text:0040E417                 mov     [esp+0BCh+var_8C], 1
.text:0040E41F                 mov     eax, [esp+0BCh+var_60]
.text:0040E423                 mov     ecx, [esp+0BCh+var_64]
.text:0040E427                 cmp     eax, ecx
.text:0040E429                 ja      short loc_40E43A
.text:0040E42B
.text:0040E42B loc_40E42B:                             ; CODE XREF: sub_40DA60+9D8↓j
.text:0040E42B                 mov     ebx, [esp+0BCh+var_78]
.text:0040E42F                 or      byte ptr [ebx+eax*4], 18h
.text:0040E433                 inc     eax
.text:0040E434                 cmp     eax, [esp+0BCh+var_64]
.text:0040E438                 jbe     short loc_40E42B
.text:0040E43A
.text:0040E43A loc_40E43A:                             ; CODE XREF: sub_40DA60+9B5↑j
.text:0040E43A                                         ; sub_40DA60+9C9↑j
.text:0040E43A                 inc     [esp+0BCh+var_44]
.text:0040E43E
.text:0040E43E loc_40E43E:                             ; CODE XREF: sub_40DA60:loc_40E504↓j
.text:0040E43E                                         ; sub_40DA60+B8C↓j ...
.text:0040E43E                 mov     edx, [esp+0BCh+var_50]
.text:0040E442                 mov     eax, offset loc_40DCD9
.text:0040E447                 cmp     [esp+0BCh+var_4C], edx
.text:0040E44B                 jz      loc_40DCD7
.text:0040E451                 mov     esi, [esp+0BCh+var_4C]
.text:0040E455
.text:0040E455 loc_40E455:                             ; CODE XREF: sub_40DA60+F64↓j
.text:0040E455                 movzx   edi, byte ptr [esi]
.text:0040E458                 inc     esi
.text:0040E459                 mov     [esp+0BCh+var_4C], esi
.text:0040E45D                 mov     eax, ds:(jpt_40E464-18h)[edi*4] ; switch 2 cases
.text:0040E464                 jmp     eax             ; switch jump
.text:0040E466 ; ---------------------------------------------------------------------------
.text:0040E466
.text:0040E466 loc_40E466:                             ; DATA XREF: .text:0040DA54↑o
.text:0040E466                 mov     edx, [esp+0BCh+arg_8]
.text:0040E46D                 test    edx, edx
.text:0040E46F                 jz      loc_40E542
.text:0040E475                 mov     edi, [esp+0BCh+arg_4]
.text:0040E47C                 cmp     [esp+0BCh+var_44], edi
.text:0040E480
.text:0040E480 loc_40E480:                             ; CODE XREF: sub_40DA60+AED↓j
.text:0040E480                 jz      loc_40DEB2
.text:0040E486                 mov     ecx, [esp+0BCh+arg_10]
.text:0040E48D                 test    ecx, ecx
.text:0040E48F                 jz      loc_40DEB2
.text:0040E495                 mov     ebp, [esp+0BCh+var_38]
.text:0040E49C                 cmp     [esp+0BCh+var_44], ebp
.text:0040E4A0                 jz      loc_40DEB2
.text:0040E4A6                 mov     edx, [esp+0BCh+var_44]
.text:0040E4AA                 dec     edx
.text:0040E4AB                 cmp     edx, [esp+0BCh+var_34]
.text:0040E4B2                 jz      loc_40E536
.text:0040E4B8                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E4BF                 dec     ebx
.text:0040E4C0                 cmp     edx, ebx
.text:0040E4C2                 jz      short loc_40E529
.text:0040E4C4                 mov     edi, [esp+0BCh+var_44]
.text:0040E4C8                 movzx   eax, byte ptr [edi-1]
.text:0040E4CC
.text:0040E4CC loc_40E4CC:                             ; CODE XREF: sub_40DA60+AD4↓j
.text:0040E4CC                                         ; sub_40DA60+AE0↓j
.text:0040E4CC                 cmp     ds:byte_420290[eax], 1
.text:0040E4D3                 mov     eax, [esp+0BCh+var_34]
.text:0040E4DA                 setz    dl
.text:0040E4DD                 cmp     [esp+0BCh+var_44], eax
.text:0040E4E1                 jz      short loc_40E51D
.text:0040E4E3                 mov     ebp, [esp+0BCh+arg_C]
.text:0040E4EA                 dec     ebp
.text:0040E4EB                 cmp     [esp+0BCh+var_44], ebp
.text:0040E4EF                 jz      short loc_40E510
.text:0040E4F1                 mov     esi, [esp+0BCh+var_44]
.text:0040E4F5                 movzx   eax, byte ptr [esi]
.text:0040E4F8
.text:0040E4F8 loc_40E4F8:                             ; CODE XREF: sub_40DA60+ABB↓j
.text:0040E4F8                                         ; sub_40DA60+AC7↓j
.text:0040E4F8                 cmp     ds:byte_420290[eax], 1
.text:0040E4FF                 setz    cl
.text:0040E502                 cmp     dl, cl
.text:0040E504
.text:0040E504 loc_40E504:                             ; CODE XREF: sub_40DA60+1A07↓j
.text:0040E504                 jz      loc_40E43E
.text:0040E50A                 jmp     loc_40DEB2
.text:0040E50A ; ---------------------------------------------------------------------------
.text:0040E50F                 align 10h
.text:0040E510
.text:0040E510 loc_40E510:                             ; CODE XREF: sub_40DA60+A8F↑j
.text:0040E510                 mov     ebx, [esp+0BCh+var_34]
.text:0040E517                 movzx   eax, byte ptr [ebx-1]
.text:0040E51B                 jmp     short loc_40E4F8
.text:0040E51D ; ---------------------------------------------------------------------------
.text:0040E51D
.text:0040E51D loc_40E51D:                             ; CODE XREF: sub_40DA60+A81↑j
.text:0040E51D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E524                 movzx   eax, byte ptr [ecx]
.text:0040E527                 jmp     short loc_40E4F8
.text:0040E529 ; ---------------------------------------------------------------------------
.text:0040E529
.text:0040E529 loc_40E529:                             ; CODE XREF: sub_40DA60+A62↑j
.text:0040E529                 mov     edx, [esp+0BCh+var_34]
.text:0040E530                 movzx   eax, byte ptr [edx-1]
.text:0040E534                 jmp     short loc_40E4CC
.text:0040E536 ; ---------------------------------------------------------------------------
.text:0040E536
.text:0040E536 loc_40E536:                             ; CODE XREF: sub_40DA60+A52↑j
.text:0040E536                 mov     esi, [esp+0BCh+arg_C]
.text:0040E53D                 movzx   eax, byte ptr [esi]
.text:0040E540                 jmp     short loc_40E4CC
.text:0040E542 ; ---------------------------------------------------------------------------
.text:0040E542
.text:0040E542 loc_40E542:                             ; CODE XREF: sub_40DA60+A0F↑j
.text:0040E542                 mov     eax, [esp+0BCh+arg_C]
.text:0040E549                 cmp     [esp+0BCh+var_44], eax
.text:0040E54D                 jmp     loc_40E480
.text:0040E552 ; ---------------------------------------------------------------------------
.text:0040E552
.text:0040E552 loc_40E552:                             ; DATA XREF: .text:0040DA50↑o
.text:0040E552                 mov     esi, [esp+0BCh+arg_8]
.text:0040E559                 test    esi, esi
.text:0040E55B                 jz      loc_40FC5A
.text:0040E561                 mov     ebp, [esp+0BCh+arg_4]
.text:0040E568                 cmp     [esp+0BCh+var_44], ebp
.text:0040E56C
.text:0040E56C loc_40E56C:                             ; CODE XREF: sub_40DA60+2205↓j
.text:0040E56C                 jz      loc_40E630
.text:0040E572                 mov     edi, [esp+0BCh+arg_10]
.text:0040E579                 test    edi, edi
.text:0040E57B                 jz      loc_40E630
.text:0040E581                 mov     edx, [esp+0BCh+var_38]
.text:0040E588                 cmp     [esp+0BCh+var_44], edx
.text:0040E58C                 jz      loc_40E630
.text:0040E592                 mov     edx, [esp+0BCh+var_44]
.text:0040E596                 dec     edx
.text:0040E597                 cmp     edx, [esp+0BCh+var_34]
.text:0040E59E                 jz      short loc_40E61D
.text:0040E5A0                 mov     esi, [esp+0BCh+arg_C]
.text:0040E5A7                 dec     esi
.text:0040E5A8                 cmp     edx, esi
.text:0040E5AA                 jz      short loc_40E610
.text:0040E5AC                 mov     ebx, [esp+0BCh+var_44]
.text:0040E5B0                 movzx   eax, byte ptr [ebx-1]
.text:0040E5B4
.text:0040E5B4 loc_40E5B4:                             ; CODE XREF: sub_40DA60+BBB↓j
.text:0040E5B4                                         ; sub_40DA60+BC7↓j
.text:0040E5B4                 cmp     ds:byte_420290[eax], 1
.text:0040E5BB                 mov     eax, [esp+0BCh+var_34]
.text:0040E5C2                 setz    dl
.text:0040E5C5                 cmp     [esp+0BCh+var_44], eax
.text:0040E5C9                 jz      short loc_40E604
.text:0040E5CB                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E5D2                 dec     ecx
.text:0040E5D3                 cmp     [esp+0BCh+var_44], ecx
.text:0040E5D7                 jz      short loc_40E5F7
.text:0040E5D9                 mov     esi, [esp+0BCh+var_44]
.text:0040E5DD                 movzx   eax, byte ptr [esi]
.text:0040E5E0
.text:0040E5E0 loc_40E5E0:                             ; CODE XREF: sub_40DA60+BA2↓j
.text:0040E5E0                                         ; sub_40DA60+BAE↓j
.text:0040E5E0                 cmp     ds:byte_420290[eax], 1
.text:0040E5E7                 setz    bl
.text:0040E5EA                 cmp     dl, bl
.text:0040E5EC                 jnz     loc_40E43E
.text:0040E5F2                 jmp     loc_40DEB2
.text:0040E5F7 ; ---------------------------------------------------------------------------
.text:0040E5F7
.text:0040E5F7 loc_40E5F7:                             ; CODE XREF: sub_40DA60+B77↑j
.text:0040E5F7                 mov     ebp, [esp+0BCh+var_34]
.text:0040E5FE                 movzx   eax, byte ptr [ebp-1]
.text:0040E602                 jmp     short loc_40E5E0
.text:0040E604 ; ---------------------------------------------------------------------------
.text:0040E604
.text:0040E604 loc_40E604:                             ; CODE XREF: sub_40DA60+B69↑j
.text:0040E604                 mov     edi, [esp+0BCh+arg_C]
.text:0040E60B                 movzx   eax, byte ptr [edi]
.text:0040E60E                 jmp     short loc_40E5E0
.text:0040E610 ; ---------------------------------------------------------------------------
.text:0040E610
.text:0040E610 loc_40E610:                             ; CODE XREF: sub_40DA60+B4A↑j
.text:0040E610                 mov     ebp, [esp+0BCh+var_34]
.text:0040E617                 movzx   eax, byte ptr [ebp-1]
.text:0040E61B                 jmp     short loc_40E5B4
.text:0040E61D ; ---------------------------------------------------------------------------
.text:0040E61D
.text:0040E61D loc_40E61D:                             ; CODE XREF: sub_40DA60+B3E↑j
.text:0040E61D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E624                 movzx   eax, byte ptr [ecx]
.text:0040E627                 jmp     short loc_40E5B4
.text:0040E627 ; ---------------------------------------------------------------------------
.text:0040E629                 align 10h
.text:0040E630
.text:0040E630 loc_40E630:                             ; CODE XREF: sub_40DA60:loc_40E56C↑j
.text:0040E630                                         ; sub_40DA60+B1B↑j ...
.text:0040E630                 mov     ebp, [esp+0BCh+var_50]
.text:0040E634                 mov     eax, offset loc_40DCD9
.text:0040E639                 cmp     [esp+0BCh+var_4C], ebp
.text:0040E63D                 jz      loc_40DCD7
.text:0040E643                 mov     ebx, [esp+0BCh+var_4C]
.text:0040E647                 movzx   esi, byte ptr [ebx]
.text:0040E64A                 inc     ebx
.text:0040E64B                 mov     [esp+0BCh+var_4C], ebx
.text:0040E64F                 mov     eax, ds:jpt_40DCD7[esi*4] ; switch 6 cases
.text:0040E656                 jmp     eax             ; switch jump
.text:0040E658 ; ---------------------------------------------------------------------------
.text:0040E658
.text:0040E658 loc_40E658:                             ; DATA XREF: .text:0040DA4C↑o
.text:0040E658                 mov     ecx, [esp+0BCh+arg_8]
.text:0040E65F                 test    ecx, ecx
.text:0040E661                 jz      loc_40FC4A
.text:0040E667                 mov     eax, [esp+0BCh+arg_4]
.text:0040E66E                 cmp     [esp+0BCh+var_44], eax
.text:0040E672
.text:0040E672 loc_40E672:                             ; CODE XREF: sub_40DA60+21F5↓j
.text:0040E672                 jz      loc_40DEB2
.text:0040E678                 mov     edi, [esp+0BCh+arg_10]
.text:0040E67F                 test    edi, edi
.text:0040E681                 jz      loc_40DEB2
.text:0040E687                 mov     edx, [esp+0BCh+var_44]
.text:0040E68B                 dec     edx
.text:0040E68C                 cmp     edx, [esp+0BCh+var_34]
.text:0040E693                 jz      loc_40FC3A
.text:0040E699                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E6A0                 dec     ebx
.text:0040E6A1                 cmp     edx, ebx
.text:0040E6A3                 jz      loc_40FC2A
.text:0040E6A9                 mov     ecx, [esp+0BCh+var_44]
.text:0040E6AD                 movzx   eax, byte ptr [ecx-1]
.text:0040E6B1
.text:0040E6B1 loc_40E6B1:                             ; CODE XREF: sub_40DA60+21D5↓j
.text:0040E6B1                                         ; sub_40DA60+21E5↓j
.text:0040E6B1                 cmp     ds:byte_420290[eax], 1
.text:0040E6B8                 jnz     loc_40DEB2
.text:0040E6BE                 mov     eax, [esp+0BCh+var_38]
.text:0040E6C5                 cmp     [esp+0BCh+var_44], eax
.text:0040E6C9                 jz      short loc_40E702
.text:0040E6CB                 mov     edx, [esp+0BCh+var_34]
.text:0040E6D2                 cmp     [esp+0BCh+var_44], edx
.text:0040E6D6                 jz      loc_40FC1B
.text:0040E6DC                 mov     ebp, [esp+0BCh+arg_C]
.text:0040E6E3                 dec     ebp
.text:0040E6E4                 cmp     [esp+0BCh+var_44], ebp
.text:0040E6E8                 jz      loc_40FC0B
.text:0040E6EE                 mov     esi, [esp+0BCh+var_44]
.text:0040E6F2                 movzx   eax, byte ptr [esi]
.text:0040E6F5
.text:0040E6F5 loc_40E6F5:                             ; CODE XREF: sub_40DA60+21B6↓j
.text:0040E6F5                                         ; sub_40DA60+21C5↓j
.text:0040E6F5                 cmp     ds:byte_420290[eax], 1
.text:0040E6FC                 jz      loc_40DEB2
.text:0040E702
.text:0040E702 loc_40E702:                             ; CODE XREF: sub_40DA60+C69↑j
.text:0040E702                                         ; sub_40DA60+E23↓j ...
.text:0040E702                 mov     ecx, [esp+0BCh+var_50]
.text:0040E706                 mov     eax, offset loc_40DCD9
.text:0040E70B                 cmp     [esp+0BCh+var_4C], ecx
.text:0040E70F                 jz      loc_40DCD7
.text:0040E715                 mov     edi, [esp+0BCh+var_4C]
.text:0040E719                 movzx   edx, byte ptr [edi]
.text:0040E71C                 inc     edi
.text:0040E71D                 mov     [esp+0BCh+var_4C], edi
.text:0040E721                 mov     eax, ds:jpt_40DCD7[edx*4] ; switch 6 cases
.text:0040E728                 jmp     eax             ; switch jump
.text:0040E72A ; ---------------------------------------------------------------------------
.text:0040E72A
.text:0040E72A loc_40E72A:                             ; DATA XREF: .text:0040DA48↑o
.text:0040E72A                 mov     ebp, [esp+0BCh+var_38]
.text:0040E731                 cmp     [esp+0BCh+var_44], ebp
.text:0040E735                 jz      loc_40DEB2
.text:0040E73B                 mov     eax, [esp+0BCh+var_34]
.text:0040E742                 cmp     [esp+0BCh+var_44], eax
.text:0040E746                 jz      loc_40E807
.text:0040E74C                 mov     esi, [esp+0BCh+arg_C]
.text:0040E753                 dec     esi
.text:0040E754                 cmp     [esp+0BCh+var_44], esi
.text:0040E758                 jz      loc_40E7F7
.text:0040E75E                 mov     edx, [esp+0BCh+var_44]
.text:0040E762                 movzx   eax, byte ptr [edx]
.text:0040E765
.text:0040E765 loc_40E765:                             ; CODE XREF: sub_40DA60+DA2↓j
.text:0040E765                                         ; sub_40DA60+DB1↓j
.text:0040E765                 cmp     ds:byte_420290[eax], 1
.text:0040E76C                 jnz     loc_40DEB2
.text:0040E772                 mov     edi, [esp+0BCh+arg_8]
.text:0040E779                 test    edi, edi
.text:0040E77B                 jz      short loc_40E7EA
.text:0040E77D                 mov     ebp, [esp+0BCh+arg_4]
.text:0040E784                 cmp     [esp+0BCh+var_44], ebp
.text:0040E788
.text:0040E788 loc_40E788:                             ; CODE XREF: sub_40DA60+D95↓j
.text:0040E788                 jz      loc_40E630
.text:0040E78E                 mov     ebx, [esp+0BCh+arg_10]
.text:0040E795                 test    ebx, ebx
.text:0040E797                 jz      loc_40E630
.text:0040E79D                 mov     edx, [esp+0BCh+var_44]
.text:0040E7A1                 dec     edx
.text:0040E7A2                 cmp     edx, [esp+0BCh+var_34]
.text:0040E7A9                 jz      short loc_40E7DE
.text:0040E7AB                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E7B2                 dec     ecx
.text:0040E7B3                 cmp     edx, ecx
.text:0040E7B5                 jz      short loc_40E7D1
.text:0040E7B7                 mov     edi, [esp+0BCh+var_44]
.text:0040E7BB                 movzx   eax, byte ptr [edi-1]
.text:0040E7BF
.text:0040E7BF loc_40E7BF:                             ; CODE XREF: sub_40DA60+D7C↓j
.text:0040E7BF                                         ; sub_40DA60+D88↓j
.text:0040E7BF                 cmp     ds:byte_420290[eax], 1
.text:0040E7C6                 jnz     loc_40E630
.text:0040E7CC                 jmp     loc_40DEB2
.text:0040E7D1 ; ---------------------------------------------------------------------------
.text:0040E7D1
.text:0040E7D1 loc_40E7D1:                             ; CODE XREF: sub_40DA60+D55↑j
.text:0040E7D1                 mov     edx, [esp+0BCh+var_34]
.text:0040E7D8                 movzx   eax, byte ptr [edx-1]
.text:0040E7DC                 jmp     short loc_40E7BF
.text:0040E7DE ; ---------------------------------------------------------------------------
.text:0040E7DE
.text:0040E7DE loc_40E7DE:                             ; CODE XREF: sub_40DA60+D49↑j
.text:0040E7DE                 mov     esi, [esp+0BCh+arg_C]
.text:0040E7E5                 movzx   eax, byte ptr [esi]
.text:0040E7E8                 jmp     short loc_40E7BF
.text:0040E7EA ; ---------------------------------------------------------------------------
.text:0040E7EA
.text:0040E7EA loc_40E7EA:                             ; CODE XREF: sub_40DA60+D1B↑j
.text:0040E7EA                 mov     eax, [esp+0BCh+arg_C]
.text:0040E7F1                 cmp     [esp+0BCh+var_44], eax
.text:0040E7F5                 jmp     short loc_40E788
.text:0040E7F7 ; ---------------------------------------------------------------------------
.text:0040E7F7
.text:0040E7F7 loc_40E7F7:                             ; CODE XREF: sub_40DA60+CF8↑j
.text:0040E7F7                 mov     ecx, [esp+0BCh+var_34]
.text:0040E7FE                 movzx   eax, byte ptr [ecx-1]
.text:0040E802                 jmp     loc_40E765
.text:0040E807 ; ---------------------------------------------------------------------------
.text:0040E807
.text:0040E807 loc_40E807:                             ; CODE XREF: sub_40DA60+CE6↑j
.text:0040E807                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E80E                 movzx   eax, byte ptr [ebx]
.text:0040E811                 jmp     loc_40E765
.text:0040E816 ; ---------------------------------------------------------------------------
.text:0040E816
.text:0040E816 loc_40E816:                             ; DATA XREF: .text:0040DA44↑o
.text:0040E816                 mov     ebp, [esp+0BCh+var_48]
.text:0040E81A                 cmp     [esp+0BCh+var_44], ebp
.text:0040E81E                 jz      loc_40E8A1
.text:0040E824
.text:0040E824 loc_40E824:                             ; CODE XREF: sub_40DA60+E62↓j
.text:0040E824                 mov     esi, [esp+0BCh+var_34]
.text:0040E82B                 cmp     [esp+0BCh+var_44], esi
.text:0040E82F                 jz      short loc_40E895
.text:0040E831                 mov     edi, [esp+0BCh+arg_C]
.text:0040E838                 dec     edi
.text:0040E839                 cmp     [esp+0BCh+var_44], edi
.text:0040E83D                 jz      short loc_40E888
.text:0040E83F                 mov     ebp, [esp+0BCh+var_44]
.text:0040E843                 movzx   eax, byte ptr [ebp+0]
.text:0040E847
.text:0040E847 loc_40E847:                             ; CODE XREF: sub_40DA60+E33↓j
.text:0040E847                                         ; sub_40DA60+E3F↓j
.text:0040E847                 cmp     ds:byte_420290[eax], 1
.text:0040E84E                 jz      loc_40DEB2
.text:0040E854                 mov     eax, [esp+0BCh+var_8C]
.text:0040E858                 test    eax, eax
.text:0040E85A                 jnz     short loc_40E87F
.text:0040E85C                 mov     [esp+0BCh+var_8C], 1
.text:0040E864                 mov     eax, [esp+0BCh+var_60]
.text:0040E868                 mov     ebx, [esp+0BCh+var_64]
.text:0040E86C                 cmp     eax, ebx
.text:0040E86E                 ja      short loc_40E87F
.text:0040E870
.text:0040E870 loc_40E870:                             ; CODE XREF: sub_40DA60+E1D↓j
.text:0040E870                 mov     esi, [esp+0BCh+var_78]
.text:0040E874                 or      byte ptr [esi+eax*4], 18h
.text:0040E878                 inc     eax
.text:0040E879                 cmp     eax, [esp+0BCh+var_64]
.text:0040E87D                 jbe     short loc_40E870
.text:0040E87F
.text:0040E87F loc_40E87F:                             ; CODE XREF: sub_40DA60+DFA↑j
.text:0040E87F                                         ; sub_40DA60+E0E↑j ...
.text:0040E87F                 inc     [esp+0BCh+var_44]
.text:0040E883                 jmp     loc_40E702
.text:0040E888 ; ---------------------------------------------------------------------------
.text:0040E888
.text:0040E888 loc_40E888:                             ; CODE XREF: sub_40DA60+DDD↑j
.text:0040E888                 mov     edx, [esp+0BCh+var_34]
.text:0040E88F                 movzx   eax, byte ptr [edx-1]
.text:0040E893                 jmp     short loc_40E847
.text:0040E895 ; ---------------------------------------------------------------------------
.text:0040E895
.text:0040E895 loc_40E895:                             ; CODE XREF: sub_40DA60+DCF↑j
.text:0040E895                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E89C                 movzx   eax, byte ptr [ecx]
.text:0040E89F                 jmp     short loc_40E847
.text:0040E8A1 ; ---------------------------------------------------------------------------
.text:0040E8A1
.text:0040E8A1 loc_40E8A1:                             ; CODE XREF: sub_40DA60+DBE↑j
.text:0040E8A1                                         ; sub_40DA60+E60↓j
.text:0040E8A1                 mov     eax, [esp+0BCh+var_40]
.text:0040E8A5                 cmp     [esp+0BCh+var_48], eax
.text:0040E8A9                 jz      loc_40DEB2
.text:0040E8AF                 mov     [esp+0BCh+var_48], eax
.text:0040E8B3                 mov     ebx, [esp+0BCh+arg_C]
.text:0040E8BA                 cmp     ebx, eax
.text:0040E8BC                 mov     [esp+0BCh+var_44], ebx
.text:0040E8C0                 jz      short loc_40E8A1
.text:0040E8C2                 jmp     loc_40E824
.text:0040E8C7 ; ---------------------------------------------------------------------------
.text:0040E8C7
.text:0040E8C7 loc_40E8C7:                             ; DATA XREF: .text:0040DA40↑o
.text:0040E8C7                 mov     eax, [esp+0BCh+var_48]
.text:0040E8CB                 cmp     [esp+0BCh+var_44], eax
.text:0040E8CF                 jz      loc_40E951
.text:0040E8D5
.text:0040E8D5 loc_40E8D5:                             ; CODE XREF: sub_40DA60+F12↓j
.text:0040E8D5                 mov     edx, [esp+0BCh+var_34]
.text:0040E8DC                 cmp     [esp+0BCh+var_44], edx
.text:0040E8E0                 jz      short loc_40E945
.text:0040E8E2                 mov     ebp, [esp+0BCh+arg_C]
.text:0040E8E9                 dec     ebp
.text:0040E8EA                 cmp     [esp+0BCh+var_44], ebp
.text:0040E8EE                 jz      short loc_40E938
.text:0040E8F0                 mov     esi, [esp+0BCh+var_44]
.text:0040E8F4                 movzx   eax, byte ptr [esi]
.text:0040E8F7
.text:0040E8F7 loc_40E8F7:                             ; CODE XREF: sub_40DA60+EE3↓j
.text:0040E8F7                                         ; sub_40DA60+EEF↓j
.text:0040E8F7                 cmp     ds:byte_420290[eax], 1
.text:0040E8FE                 jnz     loc_40DEB2
.text:0040E904                 mov     eax, [esp+0BCh+var_8C]
.text:0040E908                 test    eax, eax
.text:0040E90A                 jnz     short loc_40E92F
.text:0040E90C                 mov     [esp+0BCh+var_8C], 1
.text:0040E914                 mov     eax, [esp+0BCh+var_60]
.text:0040E918                 mov     ecx, [esp+0BCh+var_64]
.text:0040E91C                 cmp     eax, ecx
.text:0040E91E                 ja      short loc_40E92F
.text:0040E920
.text:0040E920 loc_40E920:                             ; CODE XREF: sub_40DA60+ECD↓j
.text:0040E920                 mov     edi, [esp+0BCh+var_78]
.text:0040E924                 or      byte ptr [edi+eax*4], 18h
.text:0040E928                 inc     eax
.text:0040E929                 cmp     eax, [esp+0BCh+var_64]
.text:0040E92D                 jbe     short loc_40E920
.text:0040E92F
.text:0040E92F loc_40E92F:                             ; CODE XREF: sub_40DA60+EAA↑j
.text:0040E92F                                         ; sub_40DA60+EBE↑j
.text:0040E92F                 inc     [esp+0BCh+var_44]
.text:0040E933                 jmp     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040E933                                         ; jumptable 0040E656 case 0
.text:0040E933                                         ; jumptable 0040E728 case 0
.text:0040E938 ; ---------------------------------------------------------------------------
.text:0040E938
.text:0040E938 loc_40E938:                             ; CODE XREF: sub_40DA60+E8E↑j
.text:0040E938                 mov     ebx, [esp+0BCh+var_34]
.text:0040E93F                 movzx   eax, byte ptr [ebx-1]
.text:0040E943                 jmp     short loc_40E8F7
.text:0040E945 ; ---------------------------------------------------------------------------
.text:0040E945
.text:0040E945 loc_40E945:                             ; CODE XREF: sub_40DA60+E80↑j
.text:0040E945                 mov     edi, [esp+0BCh+arg_C]
.text:0040E94C                 movzx   eax, byte ptr [edi]
.text:0040E94F                 jmp     short loc_40E8F7
.text:0040E951 ; ---------------------------------------------------------------------------
.text:0040E951
.text:0040E951 loc_40E951:                             ; CODE XREF: sub_40DA60+E6F↑j
.text:0040E951                                         ; sub_40DA60+F10↓j
.text:0040E951                 mov     ebx, [esp+0BCh+var_40]
.text:0040E955                 cmp     [esp+0BCh+var_48], ebx
.text:0040E959                 jz      loc_40DEB2
.text:0040E95F                 mov     [esp+0BCh+var_48], ebx
.text:0040E963                 mov     ecx, [esp+0BCh+arg_C]
.text:0040E96A                 cmp     ecx, ebx
.text:0040E96C                 mov     [esp+0BCh+var_44], ecx
.text:0040E970                 jz      short loc_40E951
.text:0040E972                 jmp     loc_40E8D5
.text:0040E977 ; ---------------------------------------------------------------------------
.text:0040E977
.text:0040E977 loc_40E977:                             ; DATA XREF: .text:0040DA3C↑o
.text:0040E977                 mov     esi, [esp+0BCh+var_4C]
.text:0040E97B                 movsx   ecx, byte ptr [esi+1]
.text:0040E97F                 movzx   eax, byte ptr [esi]
.text:0040E982                 add     esi, 2
.text:0040E985                 mov     ebp, esi
.text:0040E987                 shl     ecx, 8
.text:0040E98A                 lea     edi, [ecx+eax]
.text:0040E98D                 add     ebp, edi
.text:0040E98F                 mov     [esp+0BCh+var_30], ebp
.text:0040E996                 mov     eax, offset loc_40DCD9
.text:0040E99B                 movsx   edx, byte ptr [esi+1]
.text:0040E99F                 movzx   ecx, byte ptr [esi]
.text:0040E9A2                 add     esi, 2
.text:0040E9A5                 mov     [esp+0BCh+var_4C], esi
.text:0040E9A9                 shl     edx, 8
.text:0040E9AC                 add     ecx, edx
.text:0040E9AE                 mov     [ebp+0], cl
.text:0040E9B1                 mov     edi, [esp+0BCh+var_30]
.text:0040E9B8                 sar     ecx, 8
.text:0040E9BB                 mov     [edi+1], cl
.text:0040E9BE                 mov     edx, [esp+0BCh+var_50]
.text:0040E9C2                 cmp     esi, edx
.text:0040E9C4                 jnz     loc_40E455
.text:0040E9CA                 jmp     loc_40DCD7
.text:0040E9CF ; ---------------------------------------------------------------------------
.text:0040E9CF
.text:0040E9CF loc_40E9CF:                             ; DATA XREF: .text:0040DA38↑o
.text:0040E9CF                 mov     esi, [esp+0BCh+var_4C]
.text:0040E9D3                 movsx   edi, byte ptr [esi+3]
.text:0040E9D7                 movzx   ebp, byte ptr [esi+2]
.text:0040E9DB                 shl     edi, 8
.text:0040E9DE                 add     ebp, edi
.text:0040E9E0                 jnz     short loc_40E9EC
.text:0040E9E2                 add     [esp+0BCh+var_4C], 4
.text:0040E9E7                 jmp     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040E9E7                                         ; jumptable 0040E656 case 0
.text:0040E9E7                                         ; jumptable 0040E728 case 0
.text:0040E9EC ; ---------------------------------------------------------------------------
.text:0040E9EC
.text:0040E9EC loc_40E9EC:                             ; CODE XREF: sub_40DA60+F80↑j
.text:0040E9EC                 dec     ebp
.text:0040E9ED                 mov     ebx, ebp
.text:0040E9EF                 sar     ebp, 8
.text:0040E9F2                 mov     [esi+2], bl
.text:0040E9F5                 mov     ecx, ebp
.text:0040E9F7                 mov     [esi+3], cl
.text:0040E9FA
.text:0040E9FA loc_40E9FA:                             ; CODE XREF: sub_40DA60+14FE↓j
.text:0040E9FA                                         ; sub_40DA60+15A0↓j ...
.text:0040E9FA                 mov     ebx, [esp+0BCh+var_4C]
.text:0040E9FE                 movsx   ecx, byte ptr [ebx+1]
.text:0040EA02                 movzx   edx, byte ptr [ebx]
.text:0040EA05                 shl     ecx, 8
.text:0040EA08                 lea     esi, [ecx+edx]
.text:0040EA0B                 lea     edi, [esi+ebx+2]
.text:0040EA0F                 mov     [esp+0BCh+var_4C], edi
.text:0040EA13                 jmp     loc_40E43E
.text:0040EA18 ; ---------------------------------------------------------------------------
.text:0040EA18
.text:0040EA18 loc_40EA18:                             ; DATA XREF: .text:0040DA34↑o
.text:0040EA18                 mov     ecx, [esp+0BCh+var_4C]
.text:0040EA1C                 movsx   ebx, byte ptr [ecx+3]
.text:0040EA20                 movzx   ebp, byte ptr [ecx+2]
.text:0040EA24                 shl     ebx, 8
.text:0040EA27                 add     ebp, ebx
.text:0040EA29                 test    ebp, ebp
.text:0040EA2B                 jle     short loc_40EA49
.text:0040EA2D                 dec     ebp
.text:0040EA2E                 add     ecx, 2
.text:0040EA31                 mov     eax, ebp
.text:0040EA33                 mov     [ecx], al
.text:0040EA35                 sar     ebp, 8
.text:0040EA38                 mov     edx, ebp
.text:0040EA3A                 mov     [ecx+1], dl
.text:0040EA3D                 add     ecx, 2
.text:0040EA40                 mov     [esp+0BCh+var_4C], ecx
.text:0040EA44                 jmp     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040EA44                                         ; jumptable 0040E656 case 0
.text:0040EA44                                         ; jumptable 0040E728 case 0
.text:0040EA49 ; ---------------------------------------------------------------------------
.text:0040EA49
.text:0040EA49 loc_40EA49:                             ; CODE XREF: sub_40DA60+FCB↑j
.text:0040EA49                 test    ebp, ebp
.text:0040EA4B                 jnz     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040EA4B                                         ; jumptable 0040E656 case 0
.text:0040EA4B                                         ; jumptable 0040E728 case 0
.text:0040EA51                 mov     ebp, [esp+0BCh+var_4C]
.text:0040EA55                 mov     byte ptr [ebp+2], 0
.text:0040EA59                 mov     byte ptr [ebp+3], 0
.text:0040EA5D
.text:0040EA5D loc_40EA5D:                             ; CODE XREF: sub_40DA60:loc_40F37C↓j
.text:0040EA5D                 mov     edx, [esp+0BCh+var_4C]
.text:0040EA61                 movsx   ecx, byte ptr [edx+1]
.text:0040EA65                 movzx   ebp, byte ptr [edx]
.text:0040EA68                 add     edx, 2
.text:0040EA6B                 mov     ebx, edx
.text:0040EA6D                 mov     [esp+0BCh+var_4C], edx
.text:0040EA71                 shl     ecx, 8
.text:0040EA74                 add     ebp, ecx
.text:0040EA76                 cmp     edx, [esp+0BCh+var_50]
.text:0040EA7A                 mov     [esp+0BCh+var_30], edx
.text:0040EA81                 jnb     short loc_40EAB2
.text:0040EA83                 cmp     byte ptr [edx], 0
.text:0040EA86                 jnz     short loc_40EAA3
.text:0040EA88                 lea     eax, [edx+1]
.text:0040EA8B
.text:0040EA8B loc_40EA8B:                             ; CODE XREF: sub_40DA60+1041↓j
.text:0040EA8B                 mov     [esp+0BCh+var_30], eax
.text:0040EA92                 mov     ebx, eax
.text:0040EA94                 lea     eax, [eax+1]
.text:0040EA97                 cmp     ebx, [esp+0BCh+var_50]
.text:0040EA9B                 jnb     short loc_40EAB2
.text:0040EA9D                 cmp     byte ptr [eax-1], 0
.text:0040EAA1                 jz      short loc_40EA8B
.text:0040EAA3
.text:0040EAA3 loc_40EAA3:                             ; CODE XREF: sub_40DA60+1026↑j
.text:0040EAA3                 cmp     ebx, [esp+0BCh+var_50]
.text:0040EAA7                 jnb     short loc_40EAB2
.text:0040EAA9                 cmp     byte ptr [ebx], 6
.text:0040EAAC                 jz      loc_40EC3A
.text:0040EAB2
.text:0040EAB2 loc_40EAB2:                             ; CODE XREF: sub_40DA60+1021↑j
.text:0040EAB2                                         ; sub_40DA60+103B↑j ...
.text:0040EAB2                 mov     edi, [esp+0BCh+var_60]
.text:0040EAB6                 mov     ebx, [esp+0BCh+var_64]
.text:0040EABA                 mov     ecx, [esp+0BCh+var_28]
.text:0040EAC1                 mov     esi, [esp+0BCh+var_24]
.text:0040EAC8                 sub     ebx, edi
.text:0040EACA                 mov     edx, ecx
.text:0040EACC                 lea     edi, [ebx+ebx]
.text:0040EACF                 sub     edx, esi
.text:0040EAD1                 lea     eax, [ebx+edi+7]
.text:0040EAD5                 cmp     edx, eax
.text:0040EAD7                 jnb     short loc_40EB4D
.text:0040EAD9                 mov     edi, eax
.text:0040EADB
.text:0040EADB loc_40EADB:                             ; CODE XREF: sub_40DA60+10EB↓j
.text:0040EADB                 mov     edx, dword_41F070
.text:0040EAE1                 lea     ebx, [edx+edx*8]
.text:0040EAE4                 lea     esi, [edx+ebx*2]
.text:0040EAE7                 cmp     ecx, esi
.text:0040EAE9                 ja      loc_40E1E1
.text:0040EAEF                 lea     edx, ds:0[ecx*8]
.text:0040EAF6                 mov     [esp+0BCh+Size], edx ; Size
.text:0040EAF9                 call    malloc
.text:0040EAFE                 mov     [esp+0BCh+Size], eax ; void *
.text:0040EB01                 mov     ebx, [esp+0BCh+var_28]
.text:0040EB08                 mov     esi, [esp+0BCh+Src]
.text:0040EB0F                 shl     ebx, 2
.text:0040EB12                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040EB16                 mov     [esp+0BCh+var_B8], esi ; Src
.text:0040EB1A                 call    memcpy
.text:0040EB1F                 mov     [esp+0BCh+Src], eax
.text:0040EB26                 test    eax, eax
.text:0040EB28                 jz      loc_40E1E1
.text:0040EB2E                 mov     ebx, [esp+0BCh+var_28]
.text:0040EB35                 mov     esi, [esp+0BCh+var_24]
.text:0040EB3C                 add     ebx, ebx
.text:0040EB3E                 mov     [esp+0BCh+var_28], ebx
.text:0040EB45                 mov     ecx, ebx
.text:0040EB47                 sub     ebx, esi
.text:0040EB49                 cmp     ebx, edi
.text:0040EB4B                 jb      short loc_40EADB
.text:0040EB4D
.text:0040EB4D loc_40EB4D:                             ; CODE XREF: sub_40DA60+1077↑j
.text:0040EB4D                 mov     ecx, [esp+0BCh+var_60]
.text:0040EB51                 mov     eax, [esp+0BCh+var_64]
.text:0040EB55                 cmp     ecx, eax
.text:0040EB57                 ja      loc_40EC31
.text:0040EB5D                 mov     ebx, [esp+0BCh+Src]
.text:0040EB64
.text:0040EB64 loc_40EB64:                             ; CODE XREF: sub_40DA60+1162↓j
.text:0040EB64                 mov     eax, [esp+0BCh+var_68]
.text:0040EB68                 mov     edi, [eax+ecx*4]
.text:0040EB6B                 mov     [ebx+esi*4], edi
.text:0040EB6E                 mov     edx, [esp+0BCh+var_6C]
.text:0040EB72                 mov     edi, [esp+0BCh+var_24]
.text:0040EB79                 mov     ebx, [esp+0BCh+Src]
.text:0040EB80                 mov     esi, [edx+ecx*4]
.text:0040EB83                 inc     edi
.text:0040EB84                 mov     [esp+0BCh+var_24], edi
.text:0040EB8B                 mov     [ebx+edi*4], esi
.text:0040EB8E                 mov     edi, [esp+0BCh+var_24]
.text:0040EB95                 mov     eax, [esp+0BCh+var_78]
.text:0040EB99                 mov     ebx, [esp+0BCh+Src]
.text:0040EBA0                 inc     edi
.text:0040EBA1                 mov     [esp+0BCh+var_24], edi
.text:0040EBA8                 mov     esi, [eax+ecx*4]
.text:0040EBAB                 inc     ecx
.text:0040EBAC                 mov     [ebx+edi*4], esi
.text:0040EBAF                 mov     esi, [esp+0BCh+var_24]
.text:0040EBB6                 inc     esi
.text:0040EBB7                 cmp     ecx, [esp+0BCh+var_64]
.text:0040EBBB                 mov     [esp+0BCh+var_24], esi
.text:0040EBC2                 jbe     short loc_40EB64
.text:0040EBC4
.text:0040EBC4 loc_40EBC4:                             ; CODE XREF: sub_40DA60+11D8↓j
.text:0040EBC4                 mov     eax, [esp+0BCh+var_60]
.text:0040EBC8                 mov     [ebx+esi*4], eax
.text:0040EBCB                 mov     ecx, [esp+0BCh+var_24]
.text:0040EBD2                 mov     edi, [esp+0BCh+var_64]
.text:0040EBD6                 mov     edx, [esp+0BCh+Src]
.text:0040EBDD                 inc     ecx
.text:0040EBDE                 mov     [esp+0BCh+var_24], ecx
.text:0040EBE5                 mov     [edx+ecx*4], edi
.text:0040EBE8                 mov     eax, [esp+0BCh+var_24]
.text:0040EBEF                 mov     esi, [esp+0BCh+var_4C]
.text:0040EBF3                 mov     edi, [esp+0BCh+Src]
.text:0040EBFA                 inc     eax
.text:0040EBFB                 add     esi, ebp
.text:0040EBFD                 mov     [esp+0BCh+var_24], eax
.text:0040EC04                 mov     [edi+eax*4], esi
.text:0040EC07                 mov     ecx, [esp+0BCh+var_24]
.text:0040EC0E                 mov     ebp, [esp+0BCh+Src]
.text:0040EC15                 mov     ebx, [esp+0BCh+var_44]
.text:0040EC19                 inc     ecx
.text:0040EC1A                 mov     [esp+0BCh+var_24], ecx
.text:0040EC21                 mov     [ebp+ecx*4+0], ebx
.text:0040EC25                 inc     [esp+0BCh+var_24]
.text:0040EC2C                 jmp     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040EC2C                                         ; jumptable 0040E656 case 0
.text:0040EC2C                                         ; jumptable 0040E728 case 0
.text:0040EC31 ; ---------------------------------------------------------------------------
.text:0040EC31
.text:0040EC31 loc_40EC31:                             ; CODE XREF: sub_40DA60+10F7↑j
.text:0040EC31                 mov     ebx, [esp+0BCh+Src]
.text:0040EC38                 jmp     short loc_40EBC4
.text:0040EC3A ; ---------------------------------------------------------------------------
.text:0040EC3A
.text:0040EC3A loc_40EC3A:                             ; CODE XREF: sub_40DA60+104C↑j
.text:0040EC3A                 movzx   edx, byte ptr [ebx+1]
.text:0040EC3E                 movzx   edi, byte ptr [ebx+2]
.text:0040EC42                 cmp     [esp+0BCh+var_60], 101h
.text:0040EC4A                 lea     ebx, [edi+edx]
.text:0040EC4D                 mov     [esp+0BCh+var_64], ebx
.text:0040EC51                 jnz     loc_40EAB2
.text:0040EC57                 mov     [esp+0BCh+var_60], edx
.text:0040EC5B                 jmp     loc_40EAB2
.text:0040EC60 ; ---------------------------------------------------------------------------
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; DATA XREF: .text:0040DA30↑o
.text:0040EC60                 mov     eax, [esp+0BCh+var_60]
.text:0040EC64                 mov     edx, [esp+0BCh+var_64]
.text:0040EC68                 mov     ecx, [esp+0BCh+var_28]
.text:0040EC6F                 mov     esi, [esp+0BCh+var_24]
.text:0040EC76                 sub     edx, eax
.text:0040EC78                 mov     ebp, ecx
.text:0040EC7A                 lea     ebx, [edx+edx]
.text:0040EC7D                 sub     ebp, esi
.text:0040EC7F                 lea     eax, [edx+ebx+7]
.text:0040EC83                 cmp     ebp, eax
.text:0040EC85                 jnb     short loc_40ECFB
.text:0040EC87                 mov     edi, eax
.text:0040EC89
.text:0040EC89 loc_40EC89:                             ; CODE XREF: sub_40DA60+1299↓j
.text:0040EC89                 mov     edx, dword_41F070
.text:0040EC8F                 lea     ebp, [edx+edx*8]
.text:0040EC92                 lea     esi, [edx+ebp*2]
.text:0040EC95                 cmp     ecx, esi
.text:0040EC97                 ja      loc_40E1E1
.text:0040EC9D                 lea     ebp, ds:0[ecx*8]
.text:0040ECA4                 mov     [esp+0BCh+Size], ebp ; Size
.text:0040ECA7                 call    malloc
.text:0040ECAC                 mov     [esp+0BCh+Size], eax ; void *
.text:0040ECAF                 mov     esi, [esp+0BCh+var_28]
.text:0040ECB6                 mov     ebx, [esp+0BCh+Src]
.text:0040ECBD                 shl     esi, 2
.text:0040ECC0                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040ECC4                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040ECC8                 call    memcpy
.text:0040ECCD                 mov     [esp+0BCh+Src], eax
.text:0040ECD4                 test    eax, eax
.text:0040ECD6                 jz      loc_40E1E1
.text:0040ECDC                 mov     edx, [esp+0BCh+var_28]
.text:0040ECE3                 mov     esi, [esp+0BCh+var_24]
.text:0040ECEA                 add     edx, edx
.text:0040ECEC                 mov     [esp+0BCh+var_28], edx
.text:0040ECF3                 mov     ecx, edx
.text:0040ECF5                 sub     edx, esi
.text:0040ECF7                 cmp     edx, edi
.text:0040ECF9                 jb      short loc_40EC89
.text:0040ECFB
.text:0040ECFB loc_40ECFB:                             ; CODE XREF: sub_40DA60+1225↑j
.text:0040ECFB                 mov     ecx, [esp+0BCh+var_60]
.text:0040ECFF                 mov     edi, [esp+0BCh+var_64]
.text:0040ED03                 cmp     ecx, edi
.text:0040ED05                 ja      loc_40EDDD
.text:0040ED0B                 mov     ebx, [esp+0BCh+Src]
.text:0040ED12
.text:0040ED12 loc_40ED12:                             ; CODE XREF: sub_40DA60+1310↓j
.text:0040ED12                 mov     eax, [esp+0BCh+var_68]
.text:0040ED16                 mov     edi, [eax+ecx*4]
.text:0040ED19                 mov     [ebx+esi*4], edi
.text:0040ED1C                 mov     edx, [esp+0BCh+var_6C]
.text:0040ED20                 mov     edi, [esp+0BCh+var_24]
.text:0040ED27                 mov     ebx, [esp+0BCh+Src]
.text:0040ED2E                 mov     ebp, [edx+ecx*4]
.text:0040ED31                 inc     edi
.text:0040ED32                 mov     [esp+0BCh+var_24], edi
.text:0040ED39                 mov     [ebx+edi*4], ebp
.text:0040ED3C                 mov     ebp, [esp+0BCh+var_24]
.text:0040ED43                 mov     eax, [esp+0BCh+var_78]
.text:0040ED47                 mov     ebx, [esp+0BCh+Src]
.text:0040ED4E                 inc     ebp
.text:0040ED4F                 mov     [esp+0BCh+var_24], ebp
.text:0040ED56                 mov     esi, [eax+ecx*4]
.text:0040ED59                 inc     ecx
.text:0040ED5A                 mov     [ebx+ebp*4], esi
.text:0040ED5D                 mov     esi, [esp+0BCh+var_24]
.text:0040ED64                 inc     esi
.text:0040ED65                 cmp     ecx, [esp+0BCh+var_64]
.text:0040ED69                 mov     [esp+0BCh+var_24], esi
.text:0040ED70                 jbe     short loc_40ED12
.text:0040ED72
.text:0040ED72 loc_40ED72:                             ; CODE XREF: sub_40DA60+1384↓j
.text:0040ED72                 mov     edi, [esp+0BCh+var_60]
.text:0040ED76                 mov     [ebx+esi*4], edi
.text:0040ED79                 mov     edx, [esp+0BCh+var_24]
.text:0040ED80                 mov     ebp, [esp+0BCh+Src]
.text:0040ED87                 mov     esi, [esp+0BCh+var_64]
.text:0040ED8B                 inc     edx
.text:0040ED8C                 mov     [esp+0BCh+var_24], edx
.text:0040ED93                 mov     [ebp+edx*4+0], esi
.text:0040ED97                 mov     ebx, [esp+0BCh+var_24]
.text:0040ED9E                 mov     ecx, [esp+0BCh+Src]
.text:0040EDA5                 inc     ebx
.text:0040EDA6                 mov     [esp+0BCh+var_24], ebx
.text:0040EDAD                 mov     dword ptr [ecx+ebx*4], 0
.text:0040EDB4
.text:0040EDB4 loc_40EDB4:                             ; CODE XREF: sub_40DA60+190E↓j
.text:0040EDB4                 mov     eax, [esp+0BCh+var_24]
.text:0040EDBB                 mov     ecx, [esp+0BCh+Src]
.text:0040EDC2                 inc     eax
.text:0040EDC3                 mov     [esp+0BCh+var_24], eax
.text:0040EDCA                 mov     dword ptr [ecx+eax*4], 0
.text:0040EDD1                 inc     [esp+0BCh+var_24]
.text:0040EDD8                 jmp     loc_40E702
.text:0040EDDD ; ---------------------------------------------------------------------------
.text:0040EDDD
.text:0040EDDD loc_40EDDD:                             ; CODE XREF: sub_40DA60+12A5↑j
.text:0040EDDD                 mov     ebx, [esp+0BCh+Src]
.text:0040EDE4                 jmp     short loc_40ED72
.text:0040EDE6 ; ---------------------------------------------------------------------------
.text:0040EDE6
.text:0040EDE6 loc_40EDE6:                             ; DATA XREF: .text:0040DA2C↑o
.text:0040EDE6                 mov     eax, [esp+0BCh+var_60]
.text:0040EDEA                 mov     ebx, [esp+0BCh+var_64]
.text:0040EDEE                 mov     ecx, [esp+0BCh+var_28]
.text:0040EDF5                 mov     esi, [esp+0BCh+var_24]
.text:0040EDFC                 sub     ebx, eax
.text:0040EDFE                 mov     edx, ecx
.text:0040EE00                 lea     ebp, [ebx+ebx]
.text:0040EE03                 sub     edx, esi
.text:0040EE05                 lea     eax, [ebx+ebp+7]
.text:0040EE09                 cmp     edx, eax
.text:0040EE0B                 jnb     short loc_40EE81
.text:0040EE0D                 mov     edi, eax
.text:0040EE0F
.text:0040EE0F loc_40EE0F:                             ; CODE XREF: sub_40DA60+141F↓j
.text:0040EE0F                 mov     edx, dword_41F070
.text:0040EE15                 lea     ebx, [edx+edx*8]
.text:0040EE18                 lea     esi, [edx+ebx*2]
.text:0040EE1B                 cmp     ecx, esi
.text:0040EE1D                 ja      loc_40E1E1
.text:0040EE23                 lea     ebx, ds:0[ecx*8]
.text:0040EE2A                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040EE2D                 call    malloc
.text:0040EE32                 mov     [esp+0BCh+Size], eax ; void *
.text:0040EE35                 mov     esi, [esp+0BCh+var_28]
.text:0040EE3C                 mov     ebp, [esp+0BCh+Src]
.text:0040EE43                 shl     esi, 2
.text:0040EE46                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040EE4A                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:0040EE4E                 call    memcpy
.text:0040EE53                 mov     [esp+0BCh+Src], eax
.text:0040EE5A                 test    eax, eax
.text:0040EE5C                 jz      loc_40E1E1
.text:0040EE62                 mov     edx, [esp+0BCh+var_28]
.text:0040EE69                 mov     esi, [esp+0BCh+var_24]
.text:0040EE70                 add     edx, edx
.text:0040EE72                 mov     [esp+0BCh+var_28], edx
.text:0040EE79                 mov     ecx, edx
.text:0040EE7B                 sub     edx, esi
.text:0040EE7D                 cmp     edx, edi
.text:0040EE7F                 jb      short loc_40EE0F
.text:0040EE81
.text:0040EE81 loc_40EE81:                             ; CODE XREF: sub_40DA60+13AB↑j
.text:0040EE81                 mov     ecx, [esp+0BCh+var_60]
.text:0040EE85                 mov     edi, [esp+0BCh+var_64]
.text:0040EE89                 cmp     ecx, edi
.text:0040EE8B                 ja      loc_40EF63
.text:0040EE91                 mov     ebx, [esp+0BCh+Src]
.text:0040EE98
.text:0040EE98 loc_40EE98:                             ; CODE XREF: sub_40DA60+1496↓j
.text:0040EE98                 mov     eax, [esp+0BCh+var_68]
.text:0040EE9C                 mov     edi, [eax+ecx*4]
.text:0040EE9F                 mov     [ebx+esi*4], edi
.text:0040EEA2                 mov     edx, [esp+0BCh+var_6C]
.text:0040EEA6                 mov     edi, [esp+0BCh+var_24]
.text:0040EEAD                 mov     ebx, [esp+0BCh+Src]
.text:0040EEB4                 mov     ebp, [edx+ecx*4]
.text:0040EEB7                 inc     edi
.text:0040EEB8                 mov     [esp+0BCh+var_24], edi
.text:0040EEBF                 mov     [ebx+edi*4], ebp
.text:0040EEC2                 mov     ebp, [esp+0BCh+var_24]
.text:0040EEC9                 mov     eax, [esp+0BCh+var_78]
.text:0040EECD                 mov     ebx, [esp+0BCh+Src]
.text:0040EED4                 inc     ebp
.text:0040EED5                 mov     [esp+0BCh+var_24], ebp
.text:0040EEDC                 mov     esi, [eax+ecx*4]
.text:0040EEDF                 inc     ecx
.text:0040EEE0                 mov     [ebx+ebp*4], esi
.text:0040EEE3                 mov     esi, [esp+0BCh+var_24]
.text:0040EEEA                 inc     esi
.text:0040EEEB                 cmp     ecx, [esp+0BCh+var_64]
.text:0040EEEF                 mov     [esp+0BCh+var_24], esi
.text:0040EEF6                 jbe     short loc_40EE98
.text:0040EEF8
.text:0040EEF8 loc_40EEF8:                             ; CODE XREF: sub_40DA60+150A↓j
.text:0040EEF8                 mov     ebp, [esp+0BCh+var_60]
.text:0040EEFC                 mov     [ebx+esi*4], ebp
.text:0040EEFF                 mov     eax, [esp+0BCh+var_24]
.text:0040EF06                 mov     edi, [esp+0BCh+Src]
.text:0040EF0D                 mov     esi, [esp+0BCh+var_64]
.text:0040EF11                 inc     eax
.text:0040EF12                 mov     [esp+0BCh+var_24], eax
.text:0040EF19                 mov     [edi+eax*4], esi
.text:0040EF1C                 mov     edx, [esp+0BCh+var_24]
.text:0040EF23                 mov     ebp, [esp+0BCh+Src]
.text:0040EF2A                 inc     edx
.text:0040EF2B                 mov     [esp+0BCh+var_24], edx
.text:0040EF32                 mov     dword ptr [ebp+edx*4+0], 0
.text:0040EF3A                 mov     ebx, [esp+0BCh+var_24]
.text:0040EF41                 mov     ecx, [esp+0BCh+Src]
.text:0040EF48                 inc     ebx
.text:0040EF49                 mov     [esp+0BCh+var_24], ebx
.text:0040EF50                 mov     dword ptr [ecx+ebx*4], 0
.text:0040EF57                 inc     [esp+0BCh+var_24]
.text:0040EF5E                 jmp     loc_40E9FA
.text:0040EF63 ; ---------------------------------------------------------------------------
.text:0040EF63
.text:0040EF63 loc_40EF63:                             ; CODE XREF: sub_40DA60+142B↑j
.text:0040EF63                 mov     ebx, [esp+0BCh+Src]
.text:0040EF6A                 jmp     short loc_40EEF8
.text:0040EF6C ; ---------------------------------------------------------------------------
.text:0040EF6C
.text:0040EF6C loc_40EF6C:                             ; DATA XREF: .text:0040DA28↑o
.text:0040EF6C                 mov     esi, [esp+0BCh+var_4C]
.text:0040EF70                 movsx   ebx, byte ptr [esi+1]
.text:0040EF74                 movzx   ebp, byte ptr [esi]
.text:0040EF77                 add     esi, 2
.text:0040EF7A                 mov     [esp+0BCh+var_4C], esi
.text:0040EF7E                 shl     ebx, 8
.text:0040EF81                 add     ebp, ebx
.text:0040EF83
.text:0040EF83 loc_40EF83:                             ; CODE XREF: sub_40DA60+153A↓j
.text:0040EF83                                         ; sub_40DA60+154C↓j
.text:0040EF83                 lea     edx, [esi+2]
.text:0040EF86                 cmp     edx, [esp+0BCh+var_50]
.text:0040EF8A                 jnb     short def_40E464 ; jumptable 0040E464 default case
.text:0040EF8C                 movzx   ecx, byte ptr [esi]
.text:0040EF8F                 sub     cl, 6
.text:0040EF92                 cmp     cl, 1
.text:0040EF95                 ja      short def_40E464 ; jumptable 0040E464 default case
.text:0040EF97                 add     esi, 3
.text:0040EF9A                 jmp     short loc_40EF83
.text:0040EF9C ; ---------------------------------------------------------------------------
.text:0040EF9C
.text:0040EF9C def_40E464:                             ; CODE XREF: sub_40DA60+152A↑j
.text:0040EF9C                                         ; sub_40DA60+1535↑j
.text:0040EF9C                 lea     eax, [esi+6]    ; jumptable 0040E464 default case
.text:0040EF9F                 cmp     eax, [esp+0BCh+var_50]
.text:0040EFA3                 jnb     short loc_40EFAE
.text:0040EFA5                 cmp     byte ptr [esi], 13h
.text:0040EFA8                 jnz     short loc_40EFAE
.text:0040EFAA                 mov     esi, eax
.text:0040EFAC                 jmp     short loc_40EF83
.text:0040EFAE ; ---------------------------------------------------------------------------
.text:0040EFAE
.text:0040EFAE loc_40EFAE:                             ; CODE XREF: sub_40DA60+1543↑j
.text:0040EFAE                                         ; sub_40DA60+1548↑j
.text:0040EFAE                 mov     edi, [esp+0BCh+var_4C]
.text:0040EFB2                 add     edi, ebp
.text:0040EFB4                 cmp     esi, [esp+0BCh+var_50]
.text:0040EFB8                 mov     [esp+0BCh+var_30], edi
.text:0040EFBF                 jz      loc_40F145
.text:0040EFC5                 movzx   eax, byte ptr [esi]
.text:0040EFC8                 cmp     al, 2
.text:0040EFCA                 jz      loc_40F1FB
.text:0040EFD0                 mov     ebp, [esp+0BCh+arg_0]
.text:0040EFD7                 test    byte ptr [ebp+1Ch], 80h
.text:0040EFDB                 jz      short loc_40EFE5
.text:0040EFDD                 cmp     al, 0Ah
.text:0040EFDF                 jz      loc_40F18B
.text:0040EFE5
.text:0040EFE5 loc_40EFE5:                             ; CODE XREF: sub_40DA60+157B↑j
.text:0040EFE5                 cmp     al, 4
.text:0040EFE7                 jz      loc_40F095
.text:0040EFED
.text:0040EFED loc_40EFED:                             ; CODE XREF: sub_40DA60+1652↓j
.text:0040EFED                                         ; sub_40DA60:loc_40F0F4↓j ...
.text:0040EFED                 sub     [esp+0BCh+var_4C], 2
.text:0040EFF2                 mov     esi, [esp+0BCh+var_4C]
.text:0040EFF6                 cmp     byte ptr [esi-1], 11h
.text:0040EFFA                 jz      short loc_40F005
.text:0040EFFC                 mov     byte ptr [esi-1], 0Dh
.text:0040F000                 jmp     loc_40E9FA
.text:0040F005 ; ---------------------------------------------------------------------------
.text:0040F005
.text:0040F005 loc_40F005:                             ; CODE XREF: sub_40DA60+159A↑j
.text:0040F005                                         ; DATA XREF: .text:0040DA24↑o
.text:0040F005                 mov     edi, [esp+0BCh+var_24]
.text:0040F00C                 mov     ebx, [esp+0BCh+Src]
.text:0040F013                 lea     eax, [edi-3]
.text:0040F016                 mov     [esp+0BCh+var_24], eax
.text:0040F01D                 lea     ecx, [edi-4]
.text:0040F020                 mov     ebp, [ebx+eax*4]
.text:0040F023                 mov     [esp+0BCh+var_24], ecx
.text:0040F02A                 mov     edi, [ebx+ecx*4]
.text:0040F02D                 mov     ecx, ebp
.text:0040F02F                 cmp     ebp, edi
.text:0040F031                 jb      short loc_40F088
.text:0040F033
.text:0040F033 loc_40F033:                             ; CODE XREF: sub_40DA60+1626↓j
.text:0040F033                 mov     eax, [esp+0BCh+var_24]
.text:0040F03A                 dec     eax
.text:0040F03B                 mov     [esp+0BCh+var_24], eax
.text:0040F042                 mov     edx, [ebx+eax*4]
.text:0040F045                 mov     ebx, [esp+0BCh+var_94]
.text:0040F049                 mov     [ebx+ecx*4], edx
.text:0040F04C                 mov     edx, [esp+0BCh+var_24]
.text:0040F053                 mov     ebx, [esp+0BCh+Src]
.text:0040F05A                 mov     esi, [esp+0BCh+var_90]
.text:0040F05E                 lea     ebp, [edx-1]
.text:0040F061                 mov     [esp+0BCh+var_24], ebp
.text:0040F068                 mov     eax, [ebx+ebp*4]
.text:0040F06B                 mov     ebp, [esp+0BCh+var_90]
.text:0040F06F                 mov     [ebp+ecx*4+0], eax
.text:0040F073                 lea     ebp, [edx-2]
.text:0040F076                 mov     [esp+0BCh+var_24], ebp
.text:0040F07D                 mov     edx, [ebx+ebp*4]
.text:0040F080                 mov     [esi+ecx*4], edx
.text:0040F083                 dec     ecx
.text:0040F084                 cmp     ecx, edi
.text:0040F086                 jnb     short loc_40F033
.text:0040F088
.text:0040F088 loc_40F088:                             ; CODE XREF: sub_40DA60+15D1↑j
.text:0040F088                 mov     [esp+0BCh+var_8C], 0
.text:0040F090                 jmp     loc_40E9FA
.text:0040F095 ; ---------------------------------------------------------------------------
.text:0040F095
.text:0040F095 loc_40F095:                             ; CODE XREF: sub_40DA60+1587↑j
.text:0040F095                 mov     ebx, [esp+0BCh+var_30]
.text:0040F09C                 mov     edi, ebx
.text:0040F09E                 cmp     byte ptr [ebx+3], 2
.text:0040F0A2                 jz      loc_40F152
.text:0040F0A8
.text:0040F0A8 loc_40F0A8:                             ; CODE XREF: sub_40DA60+1718↓j
.text:0040F0A8                 movzx   eax, byte ptr [edi+3]
.text:0040F0AC                 cmp     al, 5
.text:0040F0AE                 jz      short loc_40F107
.text:0040F0B0                 cmp     al, 4
.text:0040F0B2                 jnz     loc_40EFED
.text:0040F0B8                 movzx   eax, byte ptr [esi+1]
.text:0040F0BC                 xor     edx, edx
.text:0040F0BE                 movzx   ebx, al
.text:0040F0C1                 mov     [esp+0BCh+var_A5], al
.text:0040F0C5                 cmp     edx, ebx
.text:0040F0C7                 jge     short loc_40F0E5
.text:0040F0C9                 movzx   ecx, byte ptr [edi+4]
.text:0040F0CD                 cmp     edx, ecx
.text:0040F0CF                 jge     short loc_40F0E5
.text:0040F0D1
.text:0040F0D1 loc_40F0D1:                             ; CODE XREF: sub_40DA60+1683↓j
.text:0040F0D1                 movzx   eax, byte ptr [edx+edi+5]
.text:0040F0D6                 test    [edx+esi+2], al
.text:0040F0DA                 jnz     short loc_40F0E5
.text:0040F0DC                 inc     edx
.text:0040F0DD                 cmp     edx, ebx
.text:0040F0DF                 jge     short loc_40F0E5
.text:0040F0E1                 cmp     edx, ecx
.text:0040F0E3                 jl      short loc_40F0D1
.text:0040F0E5
.text:0040F0E5 loc_40F0E5:                             ; CODE XREF: sub_40DA60+1667↑j
.text:0040F0E5                                         ; sub_40DA60+166F↑j ...
.text:0040F0E5                 movzx   ebp, [esp+0BCh+var_A5]
.text:0040F0EA                 cmp     edx, ebp
.text:0040F0EC                 jz      short loc_40F0FA
.text:0040F0EE                 movzx   ebx, byte ptr [edi+4]
.text:0040F0F2                 cmp     edx, ebx
.text:0040F0F4
.text:0040F0F4 loc_40F0F4:                             ; CODE XREF: sub_40DA60+1784↓j
.text:0040F0F4                 jnz     loc_40EFED
.text:0040F0FA
.text:0040F0FA loc_40F0FA:                             ; CODE XREF: sub_40DA60+168C↑j
.text:0040F0FA                 mov     edx, [esp+0BCh+var_4C]
.text:0040F0FE                 mov     byte ptr [edx-3], 11h
.text:0040F102                 jmp     loc_40EFED
.text:0040F107 ; ---------------------------------------------------------------------------
.text:0040F107
.text:0040F107 loc_40F107:                             ; CODE XREF: sub_40DA60+164E↑j
.text:0040F107                 movzx   ebx, byte ptr [esi+1]
.text:0040F10B                 xor     ecx, ecx
.text:0040F10D                 movzx   eax, bl
.text:0040F110                 cmp     ecx, eax
.text:0040F112                 jge     short loc_40F13A
.text:0040F114                 mov     ebp, eax
.text:0040F116
.text:0040F116 loc_40F116:                             ; CODE XREF: sub_40DA60+16D8↓j
.text:0040F116                 movzx   edx, byte ptr [ecx+esi+2]
.text:0040F11B                 test    dl, dl
.text:0040F11D                 jz      short loc_40F135
.text:0040F11F                 movzx   eax, byte ptr [edi+4]
.text:0040F123                 cmp     ecx, eax
.text:0040F125                 jge     short loc_40F13A
.text:0040F127                 movzx   eax, byte ptr [ecx+edi+5]
.text:0040F12C                 movzx   edx, dl
.text:0040F12F                 not     eax
.text:0040F131                 test    eax, edx
.text:0040F133                 jnz     short loc_40F13A
.text:0040F135
.text:0040F135 loc_40F135:                             ; CODE XREF: sub_40DA60+16BD↑j
.text:0040F135                 inc     ecx
.text:0040F136                 cmp     ecx, ebp
.text:0040F138                 jl      short loc_40F116
.text:0040F13A
.text:0040F13A loc_40F13A:                             ; CODE XREF: sub_40DA60+16B2↑j
.text:0040F13A                                         ; sub_40DA60+16C5↑j ...
.text:0040F13A                 movzx   esi, bl
.text:0040F13D                 cmp     ecx, esi
.text:0040F13F                 jnz     loc_40EFED
.text:0040F145
.text:0040F145 loc_40F145:                             ; CODE XREF: sub_40DA60+155F↑j
.text:0040F145                 mov     ecx, [esp+0BCh+var_4C]
.text:0040F149                 mov     byte ptr [ecx-3], 11h
.text:0040F14D                 jmp     loc_40EFED
.text:0040F152 ; ---------------------------------------------------------------------------
.text:0040F152
.text:0040F152 loc_40F152:                             ; CODE XREF: sub_40DA60+1642↑j
.text:0040F152                 movzx   edx, byte ptr [esi+1]
.text:0040F156                 movzx   ecx, byte ptr [ebx+5]
.text:0040F15A                 shl     edx, 3
.text:0040F15D                 movzx   ebp, cl
.text:0040F160                 cmp     edx, ebp
.text:0040F162                 jle     short loc_40F17E
.text:0040F164                 mov     dl, cl
.text:0040F166                 shr     dl, 3
.text:0040F169                 and     ecx, 7
.text:0040F16C                 movzx   ebx, dl
.text:0040F16F                 movzx   eax, byte ptr [ebx+esi+2]
.text:0040F174                 sar     eax, cl
.text:0040F176                 test    al, 1
.text:0040F178                 jnz     loc_40F0A8
.text:0040F17E
.text:0040F17E loc_40F17E:                             ; CODE XREF: sub_40DA60+1702↑j
.text:0040F17E                 mov     edi, [esp+0BCh+var_4C]
.text:0040F182                 mov     byte ptr [edi-3], 11h
.text:0040F186                 jmp     loc_40EFED
.text:0040F18B ; ---------------------------------------------------------------------------
.text:0040F18B
.text:0040F18B loc_40F18B:                             ; CODE XREF: sub_40DA60+157F↑j
.text:0040F18B                 mov     cl, 0Ah
.text:0040F18D
.text:0040F18D loc_40F18D:                             ; CODE XREF: sub_40DA60+179F↓j
.text:0040F18D                 mov     ebx, [esp+0BCh+var_30]
.text:0040F194                 mov     esi, ebx
.text:0040F196                 cmp     byte ptr [ebx+3], 2
.text:0040F19A                 jz      short loc_40F1E9
.text:0040F19C
.text:0040F19C loc_40F19C:                             ; CODE XREF: sub_40DA60+178C↓j
.text:0040F19C                 movzx   edx, byte ptr [esi+3]
.text:0040F1A0                 mov     bl, dl
.text:0040F1A2                 sub     bl, 4
.text:0040F1A5                 cmp     bl, 1
.text:0040F1A8                 ja      loc_40EFED
.text:0040F1AE                 movzx   edi, byte ptr [esi+4]
.text:0040F1B2                 xor     ebx, ebx
.text:0040F1B4                 cmp     dl, 5
.text:0040F1B7                 setz    bl
.text:0040F1BA                 movzx   eax, cl
.text:0040F1BD                 shl     edi, 3
.text:0040F1C0                 cmp     eax, edi
.text:0040F1C2                 jnb     short loc_40F1E2
.text:0040F1C4                 mov     al, cl
.text:0040F1C6                 shr     al, 3
.text:0040F1C9                 and     ecx, 7
.text:0040F1CC                 movzx   edx, al
.text:0040F1CF                 movzx   eax, byte ptr [edx+esi+5]
.text:0040F1D4                 sar     eax, cl
.text:0040F1D6                 test    al, 1
.text:0040F1D8                 jz      short loc_40F1E2
.text:0040F1DA                 test    ebx, ebx
.text:0040F1DC                 setz    cl
.text:0040F1DF                 movzx   ebx, cl
.text:0040F1E2
.text:0040F1E2 loc_40F1E2:                             ; CODE XREF: sub_40DA60+1762↑j
.text:0040F1E2                                         ; sub_40DA60+1778↑j
.text:0040F1E2                 test    ebx, ebx
.text:0040F1E4                 jmp     loc_40F0F4
.text:0040F1E9 ; ---------------------------------------------------------------------------
.text:0040F1E9
.text:0040F1E9 loc_40F1E9:                             ; CODE XREF: sub_40DA60+173A↑j
.text:0040F1E9                 cmp     [ebx+5], cl
.text:0040F1EC                 jz      short loc_40F19C
.text:0040F1EE                 mov     esi, [esp+0BCh+var_4C]
.text:0040F1F2                 mov     byte ptr [esi-3], 11h
.text:0040F1F6                 jmp     loc_40EFED
.text:0040F1FB ; ---------------------------------------------------------------------------
.text:0040F1FB
.text:0040F1FB loc_40F1FB:                             ; CODE XREF: sub_40DA60+156A↑j
.text:0040F1FB                 movzx   ecx, byte ptr [esi+2]
.text:0040F1FF                 jmp     short loc_40F18D
.text:0040F201 ; ---------------------------------------------------------------------------
.text:0040F201
.text:0040F201 loc_40F201:                             ; DATA XREF: .text:0040DA20↑o
.text:0040F201                 mov     edx, [esp+0BCh+var_4C]
.text:0040F205                 mov     edi, [esp+0BCh+var_60]
.text:0040F209                 mov     ebx, [esp+0BCh+var_64]
.text:0040F20D                 movsx   ecx, byte ptr [edx+1]
.text:0040F211                 mov     esi, [esp+0BCh+var_24]
.text:0040F218                 sub     ebx, edi
.text:0040F21A                 movzx   ebp, byte ptr [edx]
.text:0040F21D                 lea     edi, [ebx+ebx]
.text:0040F220                 shl     ecx, 8
.text:0040F223                 add     edx, 2
.text:0040F226                 lea     eax, [ebx+edi+7]
.text:0040F22A                 mov     [esp+0BCh+var_4C], edx
.text:0040F22E                 add     ebp, ecx
.text:0040F230                 mov     ecx, [esp+0BCh+var_28]
.text:0040F237                 mov     edx, ecx
.text:0040F239                 sub     edx, esi
.text:0040F23B                 cmp     edx, eax
.text:0040F23D                 jnb     short loc_40F2B3
.text:0040F23F                 mov     edi, eax
.text:0040F241
.text:0040F241 loc_40F241:                             ; CODE XREF: sub_40DA60+1851↓j
.text:0040F241                 mov     edx, dword_41F070
.text:0040F247                 lea     esi, [edx+edx*8]
.text:0040F24A                 lea     ebx, [edx+esi*2]
.text:0040F24D                 cmp     ecx, ebx
.text:0040F24F                 ja      loc_40E1E1
.text:0040F255                 lea     edx, ds:0[ecx*8]
.text:0040F25C                 mov     [esp+0BCh+Size], edx ; Size
.text:0040F25F                 call    malloc
.text:0040F264                 mov     [esp+0BCh+Size], eax ; void *
.text:0040F267                 mov     esi, [esp+0BCh+var_28]
.text:0040F26E                 mov     ebx, [esp+0BCh+Src]
.text:0040F275                 shl     esi, 2
.text:0040F278                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040F27C                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040F280                 call    memcpy
.text:0040F285                 mov     [esp+0BCh+Src], eax
.text:0040F28C                 test    eax, eax
.text:0040F28E                 jz      loc_40E1E1
.text:0040F294                 mov     ebx, [esp+0BCh+var_28]
.text:0040F29B                 mov     esi, [esp+0BCh+var_24]
.text:0040F2A2                 add     ebx, ebx
.text:0040F2A4                 mov     [esp+0BCh+var_28], ebx
.text:0040F2AB                 mov     ecx, ebx
.text:0040F2AD                 sub     ebx, esi
.text:0040F2AF                 cmp     ebx, edi
.text:0040F2B1                 jb      short loc_40F241
.text:0040F2B3
.text:0040F2B3 loc_40F2B3:                             ; CODE XREF: sub_40DA60+17DD↑j
.text:0040F2B3                 mov     ecx, [esp+0BCh+var_60]
.text:0040F2B7                 mov     eax, [esp+0BCh+var_64]
.text:0040F2BB                 cmp     ecx, eax
.text:0040F2BD                 ja      loc_40F373
.text:0040F2C3                 mov     ebx, [esp+0BCh+Src]
.text:0040F2CA
.text:0040F2CA loc_40F2CA:                             ; CODE XREF: sub_40DA60+18C8↓j
.text:0040F2CA                 mov     eax, [esp+0BCh+var_68]
.text:0040F2CE                 mov     edi, [eax+ecx*4]
.text:0040F2D1                 mov     [ebx+esi*4], edi
.text:0040F2D4                 mov     edx, [esp+0BCh+var_6C]
.text:0040F2D8                 mov     edi, [esp+0BCh+var_24]
.text:0040F2DF                 mov     ebx, [esp+0BCh+Src]
.text:0040F2E6                 mov     esi, [edx+ecx*4]
.text:0040F2E9                 inc     edi
.text:0040F2EA                 mov     [esp+0BCh+var_24], edi
.text:0040F2F1                 mov     [ebx+edi*4], esi
.text:0040F2F4                 mov     edi, [esp+0BCh+var_24]
.text:0040F2FB                 mov     eax, [esp+0BCh+var_78]
.text:0040F2FF                 mov     ebx, [esp+0BCh+Src]
.text:0040F306                 inc     edi
.text:0040F307                 mov     [esp+0BCh+var_24], edi
.text:0040F30E                 mov     esi, [eax+ecx*4]
.text:0040F311                 inc     ecx
.text:0040F312                 mov     [ebx+edi*4], esi
.text:0040F315                 mov     esi, [esp+0BCh+var_24]
.text:0040F31C                 inc     esi
.text:0040F31D                 cmp     ecx, [esp+0BCh+var_64]
.text:0040F321                 mov     [esp+0BCh+var_24], esi
.text:0040F328                 jbe     short loc_40F2CA
.text:0040F32A
.text:0040F32A loc_40F32A:                             ; CODE XREF: sub_40DA60+191A↓j
.text:0040F32A                 mov     eax, [esp+0BCh+var_60]
.text:0040F32E                 mov     [ebx+esi*4], eax
.text:0040F331                 mov     edi, [esp+0BCh+var_24]
.text:0040F338                 mov     edx, [esp+0BCh+Src]
.text:0040F33F                 mov     esi, [esp+0BCh+var_64]
.text:0040F343                 inc     edi
.text:0040F344                 mov     [esp+0BCh+var_24], edi
.text:0040F34B                 mov     [edx+edi*4], esi
.text:0040F34E                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F352                 mov     ecx, [esp+0BCh+var_24]
.text:0040F359                 add     ebx, ebp
.text:0040F35B                 mov     ebp, [esp+0BCh+Src]
.text:0040F362                 inc     ecx
.text:0040F363                 mov     [esp+0BCh+var_24], ecx
.text:0040F36A                 mov     [ebp+ecx*4+0], ebx
.text:0040F36E                 jmp     loc_40EDB4
.text:0040F373 ; ---------------------------------------------------------------------------
.text:0040F373
.text:0040F373 loc_40F373:                             ; CODE XREF: sub_40DA60+185D↑j
.text:0040F373                 mov     ebx, [esp+0BCh+Src]
.text:0040F37A                 jmp     short loc_40F32A
.text:0040F37C ; ---------------------------------------------------------------------------
.text:0040F37C
.text:0040F37C loc_40F37C:                             ; DATA XREF: .text:0040DA1C↑o
.text:0040F37C                 jmp     loc_40EA5D
.text:0040F381 ; ---------------------------------------------------------------------------
.text:0040F381
.text:0040F381 loc_40F381:                             ; DATA XREF: .text:0040DA18↑o
.text:0040F381                 jmp     loc_40E9FA
.text:0040F386 ; ---------------------------------------------------------------------------
.text:0040F386
.text:0040F386 loc_40F386:                             ; DATA XREF: .text:0040DA10↑o
.text:0040F386                 mov     eax, [esp+0BCh+var_38]
.text:0040F38D                 cmp     [esp+0BCh+var_44], eax
.text:0040F391                 jz      loc_40E702
.text:0040F397                 jmp     loc_40DEB2
.text:0040F397 ; ---------------------------------------------------------------------------
.text:0040F39C                 align 10h
.text:0040F3A0
.text:0040F3A0 loc_40F3A0:                             ; DATA XREF: .text:0040DA0C↑o
.text:0040F3A0                 mov     ecx, [esp+0BCh+arg_8]
.text:0040F3A7                 test    ecx, ecx
.text:0040F3A9                 jz      short loc_40F3D0
.text:0040F3AB                 mov     ebx, [esp+0BCh+arg_4]
.text:0040F3B2                 cmp     [esp+0BCh+var_44], ebx
.text:0040F3B6
.text:0040F3B6 loc_40F3B6:                             ; CODE XREF: sub_40DA60+197B↓j
.text:0040F3B6                 jz      loc_40E630
.text:0040F3BC                 mov     edi, [esp+0BCh+arg_10]
.text:0040F3C3                 test    edi, edi
.text:0040F3C5
.text:0040F3C5 loc_40F3C5:                             ; CODE XREF: sub_40DA60+19D7↓j
.text:0040F3C5                 jz      loc_40E630
.text:0040F3CB                 jmp     loc_40DEB2
.text:0040F3D0 ; ---------------------------------------------------------------------------
.text:0040F3D0
.text:0040F3D0 loc_40F3D0:                             ; CODE XREF: sub_40DA60+1949↑j
.text:0040F3D0                 mov     esi, [esp+0BCh+arg_C]
.text:0040F3D7                 cmp     [esp+0BCh+var_44], esi
.text:0040F3DB                 jmp     short loc_40F3B6
.text:0040F3DD ; ---------------------------------------------------------------------------
.text:0040F3DD
.text:0040F3DD loc_40F3DD:                             ; DATA XREF: .text:0040DA08↑o
.text:0040F3DD                 mov     ebx, [esp+0BCh+var_38]
.text:0040F3E4                 cmp     [esp+0BCh+var_44], ebx
.text:0040F3E8                 jz      short loc_40F42C
.text:0040F3EA                 mov     edi, [esp+0BCh+var_34]
.text:0040F3F1                 cmp     [esp+0BCh+var_44], edi
.text:0040F3F5                 jz      short loc_40F420
.text:0040F3F7                 mov     edx, [esp+0BCh+var_44]
.text:0040F3FB                 cmp     byte ptr [edx], 0Ah
.text:0040F3FE
.text:0040F3FE loc_40F3FE:                             ; CODE XREF: sub_40DA60+19CA↓j
.text:0040F3FE                                         ; sub_40DA60+1A14↓j
.text:0040F3FE                 jnz     loc_40DEB2
.text:0040F404                 mov     ebp, [esp+0BCh+arg_0]
.text:0040F40B                 test    byte ptr [ebp+1Ch], 80h
.text:0040F40F                 jnz     loc_40E28B      ; jumptable 0040DCD7 case 0
.text:0040F40F                                         ; jumptable 0040E656 case 0
.text:0040F40F                                         ; jumptable 0040E728 case 0
.text:0040F415                 jmp     loc_40DEB2
.text:0040F415 ; ---------------------------------------------------------------------------
.text:0040F41A                 align 10h
.text:0040F420
.text:0040F420 loc_40F420:                             ; CODE XREF: sub_40DA60+1995↑j
.text:0040F420                 mov     eax, [esp+0BCh+arg_C]
.text:0040F427                 cmp     byte ptr [eax], 0Ah
.text:0040F42A                 jmp     short loc_40F3FE
.text:0040F42C ; ---------------------------------------------------------------------------
.text:0040F42C
.text:0040F42C loc_40F42C:                             ; CODE XREF: sub_40DA60+1988↑j
.text:0040F42C                 mov     esi, [esp+0BCh+arg_0]
.text:0040F433                 test    byte ptr [esi+1Ch], 40h
.text:0040F437                 jmp     short loc_40F3C5
.text:0040F439 ; ---------------------------------------------------------------------------
.text:0040F439
.text:0040F439 loc_40F439:                             ; DATA XREF: .text:0040DA04↑o
.text:0040F439                 mov     ebx, [esp+0BCh+arg_8]
.text:0040F440                 test    ebx, ebx
.text:0040F442                 jz      short loc_40F476
.text:0040F444                 mov     edi, [esp+0BCh+arg_4]
.text:0040F44B                 cmp     [esp+0BCh+var_44], edi
.text:0040F44F
.text:0040F44F loc_40F44F:                             ; CODE XREF: sub_40DA60+1A21↓j
.text:0040F44F                 jz      short loc_40F45C
.text:0040F451                 mov     edx, [esp+0BCh+arg_10]
.text:0040F458                 test    edx, edx
.text:0040F45A                 jnz     short loc_40F46C
.text:0040F45C
.text:0040F45C loc_40F45C:                             ; CODE XREF: sub_40DA60:loc_40F44F↑j
.text:0040F45C                 mov     ebp, [esp+0BCh+arg_0]
.text:0040F463                 test    byte ptr [ebp+1Ch], 20h
.text:0040F467                 jmp     loc_40E504
.text:0040F46C ; ---------------------------------------------------------------------------
.text:0040F46C
.text:0040F46C loc_40F46C:                             ; CODE XREF: sub_40DA60+19FA↑j
.text:0040F46C                 mov     ecx, [esp+0BCh+var_44]
.text:0040F470                 cmp     byte ptr [ecx-1], 0Ah
.text:0040F474                 jmp     short loc_40F3FE
.text:0040F476 ; ---------------------------------------------------------------------------
.text:0040F476
.text:0040F476 loc_40F476:                             ; CODE XREF: sub_40DA60+19E2↑j
.text:0040F476                 mov     eax, [esp+0BCh+arg_C]
.text:0040F47D                 cmp     [esp+0BCh+var_44], eax
.text:0040F481                 jmp     short loc_40F44F
.text:0040F483 ; ---------------------------------------------------------------------------
.text:0040F483
.text:0040F483 loc_40F483:                             ; DATA XREF: .text:0040DA00↑o
.text:0040F483                 mov     eax, [esp+0BCh+var_4C]
.text:0040F487                 mov     ecx, [esp+0BCh+var_68]
.text:0040F48B                 movzx   esi, byte ptr [eax]
.text:0040F48E                 inc     [esp+0BCh+var_4C]
.text:0040F492                 mov     edi, [ecx+esi*4]
.text:0040F495                 mov     [esp+0BCh+var_A4], esi
.text:0040F499                 cmp     edi, offset unk_420390
.text:0040F49F                 jz      loc_40DEB2
.text:0040F4A5                 mov     ebp, [esp+0BCh+var_6C]
.text:0040F4A9                 mov     eax, [ebp+esi*4+0]
.text:0040F4AD                 cmp     eax, offset unk_420390
.text:0040F4B2                 jz      loc_40DEB2
.text:0040F4B8                 mov     [esp+0BCh+var_A0], edi
.text:0040F4BC                 mov     esi, [esp+0BCh+arg_8]
.text:0040F4C3                 xor     ecx, ecx
.text:0040F4C5                 test    esi, esi
.text:0040F4C7                 jz      short loc_40F4DD
.text:0040F4C9                 cmp     [esp+0BCh+arg_4], edi
.text:0040F4D0                 ja      short loc_40F4DD
.text:0040F4D2                 mov     edx, [esp+0BCh+var_34]
.text:0040F4D9                 cmp     edi, edx
.text:0040F4DB                 jbe     short loc_40F4E2
.text:0040F4DD
.text:0040F4DD loc_40F4DD:                             ; CODE XREF: sub_40DA60+1A67↑j
.text:0040F4DD                                         ; sub_40DA60+1A70↑j
.text:0040F4DD                 mov     ecx, 1
.text:0040F4E2
.text:0040F4E2 loc_40F4E2:                             ; CODE XREF: sub_40DA60+1A7B↑j
.text:0040F4E2                 mov     edi, [esp+0BCh+arg_8]
.text:0040F4E9                 xor     edx, edx
.text:0040F4EB                 test    edi, edi
.text:0040F4ED                 jz      short loc_40F506
.text:0040F4EF                 cmp     [esp+0BCh+arg_4], eax
.text:0040F4F6                 ja      short loc_40F506
.text:0040F4F8                 cmp     eax, [esp+0BCh+var_34]
.text:0040F4FF                 ja      short loc_40F506
.text:0040F501                 mov     edx, 1
.text:0040F506
.text:0040F506 loc_40F506:                             ; CODE XREF: sub_40DA60+1A8D↑j
.text:0040F506                                         ; sub_40DA60+1A96↑j ...
.text:0040F506                 cmp     ecx, edx
.text:0040F508                 mov     ebx, eax
.text:0040F50A                 jnz     short loc_40F513
.text:0040F50C                 mov     ebx, [esp+0BCh+var_3C]
.text:0040F513
.text:0040F513 loc_40F513:                             ; CODE XREF: sub_40DA60+1AAA↑j
.text:0040F513                                         ; sub_40DA60+1B21↓j ...
.text:0040F513                 cmp     [esp+0BCh+var_A0], ebx
.text:0040F517                 jz      loc_40F5E6
.text:0040F51D
.text:0040F51D loc_40F51D:                             ; CODE XREF: sub_40DA60+1BAC↓j
.text:0040F51D                                         ; sub_40DA60+1BB5↓j
.text:0040F51D                 mov     eax, [esp+0BCh+var_48]
.text:0040F521                 cmp     [esp+0BCh+var_44], eax
.text:0040F525                 jz      loc_40F5C0
.text:0040F52B
.text:0040F52B loc_40F52B:                             ; CODE XREF: sub_40DA60+1B81↓j
.text:0040F52B                 mov     ecx, [esp+0BCh+var_44]
.text:0040F52F                 mov     ebp, [esp+0BCh+var_48]
.text:0040F533                 mov     edx, [esp+0BCh+var_A0]
.text:0040F537                 sub     ebp, ecx
.text:0040F539                 mov     ecx, ebx
.text:0040F53B                 sub     ecx, edx
.text:0040F53D                 cmp     ebp, ecx
.text:0040F53F                 jle     short loc_40F543
.text:0040F541                 mov     ebp, ecx
.text:0040F543
.text:0040F543 loc_40F543:                             ; CODE XREF: sub_40DA60+1ADF↑j
.text:0040F543                 mov     esi, [esp+0BCh+var_58]
.text:0040F547                 test    esi, esi
.text:0040F549                 jz      short loc_40F5AF
.text:0040F54B                 mov     [esp+0BCh+var_B4], ebp
.text:0040F54F                 mov     edx, [esp+0BCh+var_58]
.text:0040F553                 mov     eax, [esp+0BCh+var_A0]
.text:0040F557                 mov     edi, [esp+0BCh+var_44]
.text:0040F55B                 mov     [esp+0BCh+var_B0], edx
.text:0040F55F                 mov     [esp+0BCh+var_B8], eax
.text:0040F563                 mov     [esp+0BCh+Size], edi
.text:0040F566                 call    sub_410120
.text:0040F56B                 test    eax, eax
.text:0040F56D
.text:0040F56D loc_40F56D:                             ; CODE XREF: sub_40DA60+1B5E↓j
.text:0040F56D                 jnz     loc_40DEB2
.text:0040F573                 add     [esp+0BCh+var_44], ebp
.text:0040F577                 add     [esp+0BCh+var_A0], ebp
.text:0040F57B                 mov     ebp, [esp+0BCh+var_8C]
.text:0040F57F                 test    ebp, ebp
.text:0040F581                 jnz     short loc_40F513
.text:0040F583                 mov     [esp+0BCh+var_8C], 1
.text:0040F58B                 mov     eax, [esp+0BCh+var_60]
.text:0040F58F                 mov     ecx, [esp+0BCh+var_64]
.text:0040F593                 cmp     eax, ecx
.text:0040F595                 ja      loc_40F513
.text:0040F59B
.text:0040F59B loc_40F59B:                             ; CODE XREF: sub_40DA60+1B48↓j
.text:0040F59B                 mov     esi, [esp+0BCh+var_78]
.text:0040F59F                 or      byte ptr [esi+eax*4], 18h
.text:0040F5A3                 inc     eax
.text:0040F5A4                 cmp     eax, [esp+0BCh+var_64]
.text:0040F5A8                 jbe     short loc_40F59B
.text:0040F5AA                 jmp     loc_40F513
.text:0040F5AF ; ---------------------------------------------------------------------------
.text:0040F5AF
.text:0040F5AF loc_40F5AF:                             ; CODE XREF: sub_40DA60+1AE9↑j
.text:0040F5AF                 cld
.text:0040F5B0                 mov     esi, [esp+0BCh+var_44]
.text:0040F5B4                 cmp     ebp, ebp
.text:0040F5B6                 mov     edi, [esp+0BCh+var_A0]
.text:0040F5BA                 mov     ecx, ebp
.text:0040F5BC                 repe cmpsb
.text:0040F5BE                 jmp     short loc_40F56D
.text:0040F5C0 ; ---------------------------------------------------------------------------
.text:0040F5C0
.text:0040F5C0 loc_40F5C0:                             ; CODE XREF: sub_40DA60+1AC5↑j
.text:0040F5C0                                         ; sub_40DA60+1B7F↓j
.text:0040F5C0                 mov     eax, [esp+0BCh+var_40]
.text:0040F5C4                 cmp     [esp+0BCh+var_48], eax
.text:0040F5C8                 jz      loc_40DEB2
.text:0040F5CE                 mov     [esp+0BCh+var_48], eax
.text:0040F5D2                 mov     edi, [esp+0BCh+arg_C]
.text:0040F5D9                 cmp     edi, eax
.text:0040F5DB                 mov     [esp+0BCh+var_44], edi
.text:0040F5DF                 jz      short loc_40F5C0
.text:0040F5E1                 jmp     loc_40F52B
.text:0040F5E6 ; ---------------------------------------------------------------------------
.text:0040F5E6
.text:0040F5E6 loc_40F5E6:                             ; CODE XREF: sub_40DA60+1AB7↑j
.text:0040F5E6                                         ; sub_40DA60+1BAA↓j
.text:0040F5E6                 cmp     ebx, [esp+0BCh+var_40]
.text:0040F5EA                 jz      short loc_40F611
.text:0040F5EC                 mov     ebp, [esp+0BCh+var_A4]
.text:0040F5F0                 mov     ecx, [esp+0BCh+var_6C]
.text:0040F5F4                 mov     eax, [ecx+ebp*4]
.text:0040F5F7                 cmp     ebx, eax
.text:0040F5F9                 jz      short loc_40F611
.text:0040F5FB                 mov     esi, [esp+0BCh+arg_C]
.text:0040F602                 mov     ebx, eax
.text:0040F604                 cmp     esi, eax
.text:0040F606                 mov     [esp+0BCh+var_A0], esi
.text:0040F60A                 jz      short loc_40F5E6
.text:0040F60C                 jmp     loc_40F51D
.text:0040F611 ; ---------------------------------------------------------------------------
.text:0040F611
.text:0040F611 loc_40F611:                             ; CODE XREF: sub_40DA60+1B8A↑j
.text:0040F611                                         ; sub_40DA60+1B99↑j
.text:0040F611                 cmp     [esp+0BCh+var_A0], ebx
.text:0040F615                 jnz     loc_40F51D
.text:0040F61B                 jmp     loc_40E43E
.text:0040F620 ; ---------------------------------------------------------------------------
.text:0040F620
.text:0040F620 loc_40F620:                             ; CODE XREF: sub_40DA60+A04↑j
.text:0040F620                                         ; DATA XREF: .text:jpt_40E464↑o
.text:0040F620                 mov     esi, [esp+0BCh+var_4C] ; jumptable 0040E464 case 7
.text:0040F624                 mov     ebx, [esp+0BCh+var_78]
.text:0040F628                 movzx   edx, byte ptr [esi]
.text:0040F62B                 test    byte ptr [ebx+edx*4], 3
.text:0040F62F                 jz      loc_40FA17
.text:0040F635                 mov     edi, [esp+0BCh+var_6C]
.text:0040F639                 mov     eax, [edi+edx*4]
.text:0040F63C                 cmp     eax, offset unk_420390
.text:0040F641                 jz      loc_40FA0E
.text:0040F647
.text:0040F647 loc_40F647:                             ; CODE XREF: sub_40DA60+1FB2↓j
.text:0040F647                                         ; sub_40DA60+1FBF↓j
.text:0040F647                 mov     ecx, [esp+0BCh+var_74]
.text:0040F64B                 mov     edi, [esp+0BCh+var_6C]
.text:0040F64F                 mov     ebx, [esp+0BCh+var_78]
.text:0040F653                 mov     [ecx+edx*4], eax
.text:0040F656                 mov     edx, [esp+0BCh+var_4C]
.text:0040F65A                 mov     eax, [esp+0BCh+var_44]
.text:0040F65E                 movzx   ebp, byte ptr [edx]
.text:0040F661                 mov     [edi+ebp*4], eax
.text:0040F664                 movzx   esi, byte ptr [edx]
.text:0040F667                 and     byte ptr [ebx+esi*4], 0FBh
.text:0040F66B                 mov     [esp+0BCh+var_8C], 0
.text:0040F673                 mov     ecx, [esp+0BCh+var_64]
.text:0040F677                 cmp     [esp+0BCh+var_60], ecx
.text:0040F67B                 jz      loc_40F9F6
.text:0040F681                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F685                 movzx   ecx, byte ptr [ebx]
.text:0040F688                 mov     dl, cl
.text:0040F68A                 dec     dl
.text:0040F68C                 jz      short loc_40F6B5
.text:0040F68E                 mov     esi, [esp+0BCh+var_78]
.text:0040F692                 movzx   edi, dl
.text:0040F695                 test    byte ptr [esi+edi*4], 4
.text:0040F699                 jnz     short loc_40F6AD
.text:0040F69B
.text:0040F69B loc_40F69B:                             ; CODE XREF: sub_40DA60+1C4B↓j
.text:0040F69B                 dec     dl
.text:0040F69D                 jz      short loc_40F6B5
.text:0040F69F                 mov     ebp, [esp+0BCh+var_78]
.text:0040F6A3                 movzx   ebx, dl
.text:0040F6A6                 test    byte ptr [ebp+ebx*4+0], 4
.text:0040F6AB                 jz      short loc_40F69B
.text:0040F6AD
.text:0040F6AD loc_40F6AD:                             ; CODE XREF: sub_40DA60+1C39↑j
.text:0040F6AD                 test    dl, dl
.text:0040F6AF                 jnz     loc_40F9EA
.text:0040F6B5
.text:0040F6B5 loc_40F6B5:                             ; CODE XREF: sub_40DA60+1C2C↑j
.text:0040F6B5                                         ; sub_40DA60+1C3D↑j
.text:0040F6B5                 mov     [esp+0BCh+var_60], 101h
.text:0040F6BD                 mov     [esp+0BCh+var_64], 100h
.text:0040F6C5
.text:0040F6C5 loc_40F6C5:                             ; CODE XREF: sub_40DA60+1F91↓j
.text:0040F6C5                                         ; sub_40DA60+1FA9↓j
.text:0040F6C5                 movzx   edx, cl
.text:0040F6C8                 mov     ecx, [esp+0BCh+var_78]
.text:0040F6CC                 test    byte ptr [ecx+edx*4], 8
.text:0040F6D0                 jz      short loc_40F705
.text:0040F6D2                 mov     esi, [esp+0BCh+var_4C]
.text:0040F6D6                 mov     edi, [esp+0BCh+var_4C]
.text:0040F6DA                 dec     esi
.text:0040F6DB                 cmp     [esp+0BCh+var_54], esi
.text:0040F6DF                 lea     ecx, [edi+2]
.text:0040F6E2                 jz      short loc_40F705
.text:0040F6E4
.text:0040F6E4 loc_40F6E4:                             ; CODE XREF: sub_40DA60+1CB0↓j
.text:0040F6E4                                         ; sub_40DA60+1D01↓j ...
.text:0040F6E4                 mov     [esp+0BCh+var_4C], ecx
.text:0040F6E8                 mov     ebp, [esp+0BCh+var_50]
.text:0040F6EC                 mov     eax, offset loc_40DCD9
.text:0040F6F1                 cmp     ecx, ebp
.text:0040F6F3                 jz      loc_40DCD7
.text:0040F6F9                 movzx   ebx, byte ptr [ecx]
.text:0040F6FC                 inc     [esp+0BCh+var_4C]
.text:0040F700                 jmp     loc_40DCD0
.text:0040F705 ; ---------------------------------------------------------------------------
.text:0040F705
.text:0040F705 loc_40F705:                             ; CODE XREF: sub_40DA60+1C70↑j
.text:0040F705                                         ; sub_40DA60+1C82↑j
.text:0040F705                 mov     ecx, [esp+0BCh+var_4C]
.text:0040F709                 add     ecx, 2
.text:0040F70C                 cmp     ecx, [esp+0BCh+var_50]
.text:0040F710                 jnb     short loc_40F6E4
.text:0040F712                 mov     [esp+0BCh+var_30], ecx
.text:0040F719                 mov     ebx, [esp+0BCh+var_4C]
.text:0040F71D                 xor     ebp, ebp
.text:0040F71F                 mov     [esp+0BCh+var_97], 0
.text:0040F724                 mov     edx, ebx
.text:0040F726                 add     edx, 3
.text:0040F729                 movzx   eax, byte ptr [ebx+2]
.text:0040F72D                 mov     [esp+0BCh+var_30], edx
.text:0040F734                 cmp     eax, 13h
.text:0040F737                 ja      loc_40F9DA
.text:0040F73D                 cmp     eax, 11h
.text:0040F740                 jnb     loc_40F9A3
.text:0040F746                 cmp     eax, 0Dh
.text:0040F749                 jz      loc_40F9A3
.text:0040F74F
.text:0040F74F loc_40F74F:                             ; CODE XREF: sub_40DA60+1F65↓j
.text:0040F74F                                         ; sub_40DA60+1F75↓j ...
.text:0040F74F                 mov     ebx, [esp+0BCh+var_30]
.text:0040F756                 add     ebx, ebp
.text:0040F758                 test    ebp, ebp
.text:0040F75A                 mov     [esp+0BCh+var_30], ebx
.text:0040F761                 jns     short loc_40F6E4
.text:0040F763                 cmp     byte ptr [ebx], 0Fh
.text:0040F766                 jnz     loc_40F6E4
.text:0040F76C                 cmp     byte ptr [ebx+3], 6
.text:0040F770                 jnz     loc_40F6E4
.text:0040F776                 movzx   eax, byte ptr [ebx+4]
.text:0040F77A                 mov     ebp, [esp+0BCh+var_4C]
.text:0040F77E                 cmp     al, [ebp+0]
.text:0040F781                 jnz     loc_40F6E4
.text:0040F787                 mov     ecx, [esp+0BCh+var_78]
.text:0040F78B                 movzx   edx, al
.text:0040F78E                 movzx   eax, byte ptr [ecx+edx*4]
.text:0040F792                 test    al, 10h
.text:0040F794                 jz      short loc_40F7E8
.text:0040F796                 and     al, 0EFh
.text:0040F798                 mov     [ecx+edx*4], al
.text:0040F79B                 mov     eax, [esp+0BCh+var_4C]
.text:0040F79F                 movzx   ecx, byte ptr [eax]
.text:0040F7A2                 movzx   esi, byte ptr [eax+1]
.text:0040F7A6                 lea     edx, [esi+ecx]
.text:0040F7A9                 cmp     ecx, edx
.text:0040F7AB                 jnb     short loc_40F7E1
.text:0040F7AD
.text:0040F7AD loc_40F7AD:                             ; CODE XREF: sub_40DA60+1D7F↓j
.text:0040F7AD                 mov     edx, [esp+0BCh+var_70]
.text:0040F7B1                 mov     ebx, [esp+0BCh+var_68]
.text:0040F7B5                 mov     ebp, [esp+0BCh+var_74]
.text:0040F7B9                 mov     edi, [edx+ecx*4]
.text:0040F7BC                 mov     [ebx+ecx*4], edi
.text:0040F7BF                 mov     edx, [ebp+ecx*4+0]
.text:0040F7C3                 cmp     edx, edi
.text:0040F7C5                 jb      short loc_40F7CE
.text:0040F7C7                 mov     eax, [esp+0BCh+var_6C]
.text:0040F7CB                 mov     [eax+ecx*4], edx
.text:0040F7CE
.text:0040F7CE loc_40F7CE:                             ; CODE XREF: sub_40DA60+1D65↑j
.text:0040F7CE                 mov     ebp, [esp+0BCh+var_4C]
.text:0040F7D2                 inc     ecx
.text:0040F7D3                 movzx   esi, byte ptr [ebp+0]
.text:0040F7D7                 movzx   edi, byte ptr [ebp+1]
.text:0040F7DB                 add     esi, edi
.text:0040F7DD                 cmp     ecx, esi
.text:0040F7DF                 jb      short loc_40F7AD
.text:0040F7E1
.text:0040F7E1 loc_40F7E1:                             ; CODE XREF: sub_40DA60+1D4B↑j
.text:0040F7E1                 mov     ebx, [esp+0BCh+var_30]
.text:0040F7E8
.text:0040F7E8 loc_40F7E8:                             ; CODE XREF: sub_40DA60+1D34↑j
.text:0040F7E8                 mov     esi, ebx
.text:0040F7EA                 mov     eax, [esp+0BCh+var_60]
.text:0040F7EE                 inc     ebx
.text:0040F7EF                 mov     [esp+0BCh+var_30], ebx
.text:0040F7F6                 lea     ecx, [esi+3]
.text:0040F7F9                 mov     edi, [esp+0BCh+var_28]
.text:0040F800                 movsx   edx, byte ptr [ebx+1]
.text:0040F804                 movzx   ebp, byte ptr [esi+1]
.text:0040F808                 mov     esi, [esp+0BCh+var_24]
.text:0040F80F                 mov     [esp+0BCh+var_30], ecx
.text:0040F816                 mov     ecx, [esp+0BCh+var_64]
.text:0040F81A                 shl     edx, 8
.text:0040F81D                 add     ebp, edx
.text:0040F81F                 mov     edx, edi
.text:0040F821                 sub     ecx, eax
.text:0040F823                 lea     ebx, [ecx+ecx]
.text:0040F826                 sub     edx, esi
.text:0040F828                 lea     eax, [ecx+ebx+7]
.text:0040F82C                 cmp     edx, eax
.text:0040F82E                 jnb     short loc_40F8A8
.text:0040F830                 mov     [esp+0BCh+var_9C], eax
.text:0040F834
.text:0040F834 loc_40F834:                             ; CODE XREF: sub_40DA60+1E46↓j
.text:0040F834                 mov     edx, dword_41F070
.text:0040F83A                 lea     esi, [edx+edx*8]
.text:0040F83D                 lea     ebx, [edx+esi*2]
.text:0040F840                 cmp     edi, ebx
.text:0040F842                 ja      loc_40E1E1
.text:0040F848                 lea     esi, ds:0[edi*8]
.text:0040F84F                 mov     [esp+0BCh+Size], esi ; Size
.text:0040F852                 call    malloc
.text:0040F857                 mov     [esp+0BCh+Size], eax ; void *
.text:0040F85A                 mov     ebx, [esp+0BCh+var_28]
.text:0040F861                 mov     ecx, [esp+0BCh+Src]
.text:0040F868                 shl     ebx, 2
.text:0040F86B                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040F86F                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:0040F873                 call    memcpy
.text:0040F878                 mov     [esp+0BCh+Src], eax
.text:0040F87F                 test    eax, eax
.text:0040F881                 jz      loc_40E1E1
.text:0040F887                 mov     edx, [esp+0BCh+var_28]
.text:0040F88E                 mov     esi, [esp+0BCh+var_24]
.text:0040F895                 add     edx, edx
.text:0040F897                 mov     [esp+0BCh+var_28], edx
.text:0040F89E                 mov     edi, edx
.text:0040F8A0                 sub     edx, esi
.text:0040F8A2                 cmp     edx, [esp+0BCh+var_9C]
.text:0040F8A6                 jb      short loc_40F834
.text:0040F8A8
.text:0040F8A8 loc_40F8A8:                             ; CODE XREF: sub_40DA60+1DCE↑j
.text:0040F8A8                 mov     ecx, [esp+0BCh+var_60]
.text:0040F8AC                 mov     eax, [esp+0BCh+var_64]
.text:0040F8B0                 cmp     ecx, eax
.text:0040F8B2                 ja      loc_40F997
.text:0040F8B8                 mov     ebx, [esp+0BCh+Src]
.text:0040F8BF
.text:0040F8BF loc_40F8BF:                             ; CODE XREF: sub_40DA60+1EBD↓j
.text:0040F8BF                 mov     eax, [esp+0BCh+var_68]
.text:0040F8C3                 mov     edi, [eax+ecx*4]
.text:0040F8C6                 mov     [ebx+esi*4], edi
.text:0040F8C9                 mov     edx, [esp+0BCh+var_6C]
.text:0040F8CD                 mov     edi, [esp+0BCh+var_24]
.text:0040F8D4                 mov     ebx, [esp+0BCh+Src]
.text:0040F8DB                 mov     esi, [edx+ecx*4]
.text:0040F8DE                 inc     edi
.text:0040F8DF                 mov     [esp+0BCh+var_24], edi
.text:0040F8E6                 mov     [ebx+edi*4], esi
.text:0040F8E9                 mov     edi, [esp+0BCh+var_24]
.text:0040F8F0                 mov     eax, [esp+0BCh+var_78]
.text:0040F8F4                 mov     ebx, [esp+0BCh+Src]
.text:0040F8FB                 inc     edi
.text:0040F8FC                 mov     [esp+0BCh+var_24], edi
.text:0040F903                 mov     esi, [eax+ecx*4]
.text:0040F906                 inc     ecx
.text:0040F907                 mov     [ebx+edi*4], esi
.text:0040F90A                 mov     esi, [esp+0BCh+var_24]
.text:0040F911                 inc     esi
.text:0040F912                 cmp     ecx, [esp+0BCh+var_64]
.text:0040F916                 mov     [esp+0BCh+var_24], esi
.text:0040F91D                 jbe     short loc_40F8BF
.text:0040F91F
.text:0040F91F loc_40F91F:                             ; CODE XREF: sub_40DA60+1F3E↓j
.text:0040F91F                 mov     edi, [esp+0BCh+var_60]
.text:0040F923                 mov     [ebx+esi*4], edi
.text:0040F926                 mov     eax, [esp+0BCh+var_24]
.text:0040F92D                 mov     ecx, [esp+0BCh+Src]
.text:0040F934                 mov     edx, [esp+0BCh+var_64]
.text:0040F938                 inc     eax
.text:0040F939                 mov     [esp+0BCh+var_24], eax
.text:0040F940                 mov     [ecx+eax*4], edx
.text:0040F943                 mov     edi, [esp+0BCh+var_24]
.text:0040F94A                 mov     esi, [esp+0BCh+var_30]
.text:0040F951                 mov     edx, [esp+0BCh+Src]
.text:0040F958                 inc     edi
.text:0040F959                 add     ebp, esi
.text:0040F95B                 mov     [esp+0BCh+var_24], edi
.text:0040F962                 mov     [edx+edi*4], ebp
.text:0040F965                 mov     ecx, [esp+0BCh+var_24]
.text:0040F96C                 mov     ebp, [esp+0BCh+Src]
.text:0040F973                 mov     ebx, [esp+0BCh+var_44]
.text:0040F977                 inc     ecx
.text:0040F978                 mov     [esp+0BCh+var_24], ecx
.text:0040F97F                 mov     [ebp+ecx*4+0], ebx
.text:0040F983                 mov     esi, [esp+0BCh+var_24]
.text:0040F98A                 inc     esi
.text:0040F98B                 mov     [esp+0BCh+var_24], esi
.text:0040F992                 jmp     loc_40DD90
.text:0040F997 ; ---------------------------------------------------------------------------
.text:0040F997
.text:0040F997 loc_40F997:                             ; CODE XREF: sub_40DA60+1E52↑j
.text:0040F997                 mov     ebx, [esp+0BCh+Src]
.text:0040F99E                 jmp     loc_40F91F
.text:0040F9A3 ; ---------------------------------------------------------------------------
.text:0040F9A3
.text:0040F9A3 loc_40F9A3:                             ; CODE XREF: sub_40DA60+1CE0↑j
.text:0040F9A3                                         ; sub_40DA60+1CE9↑j ...
.text:0040F9A3                 mov     edx, [esp+0BCh+var_30]
.text:0040F9AA                 lea     eax, [edx+2]
.text:0040F9AD                 movsx   esi, byte ptr [edx+1]
.text:0040F9B1                 movzx   ebp, byte ptr [edx]
.text:0040F9B4                 mov     [esp+0BCh+var_30], eax
.text:0040F9BB                 shl     esi, 8
.text:0040F9BE                 add     ebp, esi
.text:0040F9C0                 cmp     [esp+0BCh+var_97], 0
.text:0040F9C5                 jz      loc_40F74F
.text:0040F9CB                 lea     edi, [edx+4]
.text:0040F9CE                 mov     [esp+0BCh+var_30], edi
.text:0040F9D5                 jmp     loc_40F74F
.text:0040F9DA ; ---------------------------------------------------------------------------
.text:0040F9DA
.text:0040F9DA loc_40F9DA:                             ; CODE XREF: sub_40DA60+1CD7↑j
.text:0040F9DA                 cmp     eax, 16h
.text:0040F9DD                 jnz     loc_40F74F
.text:0040F9E3                 mov     [esp+0BCh+var_97], 1
.text:0040F9E8                 jmp     short loc_40F9A3
.text:0040F9EA ; ---------------------------------------------------------------------------
.text:0040F9EA
.text:0040F9EA loc_40F9EA:                             ; CODE XREF: sub_40DA60+1C4F↑j
.text:0040F9EA                 movzx   eax, dl
.text:0040F9ED                 mov     [esp+0BCh+var_64], eax
.text:0040F9F1                 jmp     loc_40F6C5
.text:0040F9F6 ; ---------------------------------------------------------------------------
.text:0040F9F6
.text:0040F9F6 loc_40F9F6:                             ; CODE XREF: sub_40DA60+1C1B↑j
.text:0040F9F6                 mov     [esp+0BCh+var_60], 101h
.text:0040F9FE                 mov     [esp+0BCh+var_64], 100h
.text:0040FA06                 movzx   ecx, byte ptr [edx]
.text:0040FA09                 jmp     loc_40F6C5
.text:0040FA0E ; ---------------------------------------------------------------------------
.text:0040FA0E
.text:0040FA0E loc_40FA0E:                             ; CODE XREF: sub_40DA60+1BE1↑j
.text:0040FA0E                 mov     eax, [esp+0BCh+var_44]
.text:0040FA12                 jmp     loc_40F647
.text:0040FA17 ; ---------------------------------------------------------------------------
.text:0040FA17
.text:0040FA17 loc_40FA17:                             ; CODE XREF: sub_40DA60+1BCF↑j
.text:0040FA17                 mov     ebp, [esp+0BCh+var_6C]
.text:0040FA1B                 mov     eax, [ebp+edx*4+0]
.text:0040FA1F                 jmp     loc_40F647
.text:0040FA24 ; ---------------------------------------------------------------------------
.text:0040FA24
.text:0040FA24 loc_40FA24:                             ; CODE XREF: sub_40DA60+A04↑j
.text:0040FA24                                         ; DATA XREF: .text:jpt_40E464↑o
.text:0040FA24                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 0040E464 case 6
.text:0040FA28                 mov     edx, [esp+0BCh+var_78]
.text:0040FA2C                 mov     [esp+0BCh+var_30], ebx
.text:0040FA33                 movzx   ecx, byte ptr [ebx]
.text:0040FA36                 movzx   esi, cl
.text:0040FA39                 movzx   ebp, byte ptr [edx+esi*4]
.text:0040FA3D                 and     ebp, 3
.text:0040FA40                 cmp     ebp, 3
.text:0040FA43                 jz      loc_40FAD4
.text:0040FA49
.text:0040FA49 loc_40FA49:                             ; CODE XREF: sub_40DA60+20A6↓j
.text:0040FA49                 mov     esi, [esp+0BCh+var_78]
.text:0040FA4D                 movzx   edx, cl
.text:0040FA50                 test    byte ptr [esi+edx*4], 3
.text:0040FA54                 jz      short loc_40FACB
.text:0040FA56                 mov     ebx, [esp+0BCh+var_68]
.text:0040FA5A                 mov     eax, [ebx+edx*4]
.text:0040FA5D                 cmp     eax, offset unk_420390
.text:0040FA62                 jz      short loc_40FAC5
.text:0040FA64
.text:0040FA64 loc_40FA64:                             ; CODE XREF: sub_40DA60+2069↓j
.text:0040FA64                                         ; sub_40DA60+2072↓j
.text:0040FA64                 mov     ebp, [esp+0BCh+var_70]
.text:0040FA68                 mov     ebx, [esp+0BCh+var_68]
.text:0040FA6C                 mov     ecx, [esp+0BCh+var_78]
.text:0040FA70                 mov     [ebp+edx*4+0], eax
.text:0040FA74                 mov     ebp, [esp+0BCh+var_4C]
.text:0040FA78                 mov     eax, [esp+0BCh+var_44]
.text:0040FA7C                 movzx   edi, byte ptr [ebp+0]
.text:0040FA80                 mov     [ebx+edi*4], eax
.text:0040FA83                 movzx   esi, byte ptr [ebp+0]
.text:0040FA87                 or      byte ptr [ecx+esi*4], 4
.text:0040FA8B                 movzx   edx, byte ptr [ebp+0]
.text:0040FA8F                 and     byte ptr [ecx+edx*4], 0F7h
.text:0040FA93                 mov     [esp+0BCh+var_8C], 0
.text:0040FA9B                 movzx   esi, byte ptr [ebp+0]
.text:0040FA9F                 cmp     [esp+0BCh+var_60], 101h
.text:0040FAA7                 mov     [esp+0BCh+var_64], esi
.text:0040FAAB                 jz      short loc_40FABF
.text:0040FAAD
.text:0040FAAD loc_40FAAD:                             ; CODE XREF: sub_40DA60+2063↓j
.text:0040FAAD                 add     [esp+0BCh+var_4C], 2
.text:0040FAB2                 mov     ecx, [esp+0BCh+var_4C]
.text:0040FAB6                 mov     [esp+0BCh+var_54], ecx
.text:0040FABA                 jmp     loc_40E630
.text:0040FABF ; ---------------------------------------------------------------------------
.text:0040FABF
.text:0040FABF loc_40FABF:                             ; CODE XREF: sub_40DA60+204B↑j
.text:0040FABF                 mov     [esp+0BCh+var_60], esi
.text:0040FAC3                 jmp     short loc_40FAAD
.text:0040FAC5 ; ---------------------------------------------------------------------------
.text:0040FAC5
.text:0040FAC5 loc_40FAC5:                             ; CODE XREF: sub_40DA60+2002↑j
.text:0040FAC5                 mov     eax, [esp+0BCh+var_44]
.text:0040FAC9                 jmp     short loc_40FA64
.text:0040FACB ; ---------------------------------------------------------------------------
.text:0040FACB
.text:0040FACB loc_40FACB:                             ; CODE XREF: sub_40DA60+1FF4↑j
.text:0040FACB                 mov     edi, [esp+0BCh+var_68]
.text:0040FACF                 mov     eax, [edi+edx*4]
.text:0040FAD2                 jmp     short loc_40FA64
.text:0040FAD4 ; ---------------------------------------------------------------------------
.text:0040FAD4
.text:0040FAD4 loc_40FAD4:                             ; CODE XREF: sub_40DA60+1FE3↑j
.text:0040FAD4                 mov     [esp+0BCh+var_B4], edx
.text:0040FAD8                 mov     eax, [esp+0BCh+var_50]
.text:0040FADC                 lea     edx, [esp+0BCh+var_30]
.text:0040FAE3                 mov     [esp+0BCh+Size], edx
.text:0040FAE6                 mov     [esp+0BCh+var_B8], eax
.text:0040FAEA                 call    sub_40FDE0
.text:0040FAEF                 mov     edi, [esp+0BCh+var_78]
.text:0040FAF3                 mov     ebp, eax
.text:0040FAF5                 and     ebp, 3
.text:0040FAF8                 mov     ecx, [edi+esi*4]
.text:0040FAFB                 and     ecx, 0FFFFFFFCh
.text:0040FAFE                 or      ecx, ebp
.text:0040FB00                 mov     [edi+esi*4], ecx
.text:0040FB03                 movzx   ecx, byte ptr [ebx]
.text:0040FB06                 jmp     loc_40FA49
.text:0040FB06 ; ---------------------------------------------------------------------------
.text:0040FB0B                 align 10h
.text:0040FB10
.text:0040FB10 loc_40FB10:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040FB10                                         ; sub_40DA60+BF6↑j ...
.text:0040FB10                 mov     edx, [esp+0BCh+var_4C] ; jumptable 0040DCD7 case 5
.text:0040FB10                                         ; jumptable 0040E656 case 5
.text:0040FB10                                         ; jumptable 0040E728 case 5
.text:0040FB14                 mov     ebp, [esp+0BCh+var_48]
.text:0040FB18                 cmp     byte ptr [edx-1], 5
.text:0040FB1C                 setz    [esp+0BCh+var_95]
.text:0040FB21                 cmp     [esp+0BCh+var_44], ebp
.text:0040FB25                 jz      loc_40FBE0
.text:0040FB2B
.text:0040FB2B loc_40FB2B:                             ; CODE XREF: sub_40DA60+21A1↓j
.text:0040FB2B                 mov     esi, [esp+0BCh+var_58]
.text:0040FB2F                 test    esi, esi
.text:0040FB31                 jz      loc_40FBCF
.text:0040FB37                 mov     ebx, [esp+0BCh+var_44]
.text:0040FB3B                 mov     ecx, [esp+0BCh+var_58]
.text:0040FB3F                 movzx   edi, byte ptr [ebx]
.text:0040FB42                 movzx   ebx, byte ptr [edi+ecx]
.text:0040FB46
.text:0040FB46 loc_40FB46:                             ; CODE XREF: sub_40DA60+2177↓j
.text:0040FB46                 mov     esi, [esp+0BCh+var_4C]
.text:0040FB4A                 movzx   eax, bl
.text:0040FB4D                 movzx   edx, byte ptr [esi]
.text:0040FB50                 movzx   edi, dl
.text:0040FB53                 shl     edi, 3
.text:0040FB56                 mov     [esp+0BCh+var_96], dl
.text:0040FB5A                 cmp     eax, edi
.text:0040FB5C                 jnb     short loc_40FB7B
.text:0040FB5E                 mov     dl, bl
.text:0040FB60                 shr     dl, 3
.text:0040FB63                 movzx   ecx, dl
.text:0040FB66                 movzx   eax, byte ptr [ecx+esi+1]
.text:0040FB6B                 mov     ecx, ebx
.text:0040FB6D                 and     ecx, 7
.text:0040FB70                 sar     eax, cl
.text:0040FB72                 test    al, 1
.text:0040FB74                 jz      short loc_40FB7B
.text:0040FB76                 xor     [esp+0BCh+var_95], 1
.text:0040FB7B
.text:0040FB7B loc_40FB7B:                             ; CODE XREF: sub_40DA60+20FC↑j
.text:0040FB7B                                         ; sub_40DA60+2114↑j
.text:0040FB7B                 movzx   ebx, [esp+0BCh+var_96]
.text:0040FB80                 mov     ebp, [esp+0BCh+var_4C]
.text:0040FB84                 cmp     [esp+0BCh+var_95], 0
.text:0040FB89                 lea     esi, [ebx+ebp+1]
.text:0040FB8D                 mov     [esp+0BCh+var_4C], esi
.text:0040FB91                 jz      loc_40DEB2
.text:0040FB97                 mov     edi, [esp+0BCh+var_8C]
.text:0040FB9B                 test    edi, edi
.text:0040FB9D                 jnz     loc_40E87F
.text:0040FBA3                 mov     [esp+0BCh+var_8C], 1
.text:0040FBAB                 mov     eax, [esp+0BCh+var_60]
.text:0040FBAF                 mov     edx, [esp+0BCh+var_64]
.text:0040FBB3                 cmp     eax, edx
.text:0040FBB5                 ja      loc_40E87F
.text:0040FBBB
.text:0040FBBB loc_40FBBB:                             ; CODE XREF: sub_40DA60+2168↓j
.text:0040FBBB                 mov     ecx, [esp+0BCh+var_78]
.text:0040FBBF                 or      byte ptr [ecx+eax*4], 18h
.text:0040FBC3                 inc     eax
.text:0040FBC4                 cmp     eax, [esp+0BCh+var_64]
.text:0040FBC8                 jbe     short loc_40FBBB
.text:0040FBCA                 jmp     loc_40E87F
.text:0040FBCF ; ---------------------------------------------------------------------------
.text:0040FBCF
.text:0040FBCF loc_40FBCF:                             ; CODE XREF: sub_40DA60+20D1↑j
.text:0040FBCF                 mov     ebp, [esp+0BCh+var_44]
.text:0040FBD3                 movzx   ebx, byte ptr [ebp+0]
.text:0040FBD7                 jmp     loc_40FB46
.text:0040FBD7 ; ---------------------------------------------------------------------------
.text:0040FBDC                 align 10h
.text:0040FBE0
.text:0040FBE0 loc_40FBE0:                             ; CODE XREF: sub_40DA60+20C5↑j
.text:0040FBE0                                         ; sub_40DA60+219F↓j
.text:0040FBE0                 mov     ecx, [esp+0BCh+var_40]
.text:0040FBE4                 cmp     [esp+0BCh+var_48], ecx
.text:0040FBE8                 jz      loc_40DEB2
.text:0040FBEE                 mov     [esp+0BCh+var_48], ecx
.text:0040FBF2                 mov     eax, [esp+0BCh+arg_C]
.text:0040FBF9                 cmp     eax, ecx
.text:0040FBFB                 mov     [esp+0BCh+var_44], eax
.text:0040FBFF                 jz      short loc_40FBE0
.text:0040FC01                 jmp     loc_40FB2B
.text:0040FC06 ; ---------------------------------------------------------------------------
.text:0040FC06
.text:0040FC06 loc_40FC06:                             ; CODE XREF: sub_40DA60:loc_40DCD7↑j
.text:0040FC06                                         ; sub_40DA60+BF6↑j ...
.text:0040FC06                 jmp     loc_40FB10      ; jumptable 0040DCD7 case 4
.text:0040FC06                                         ; jumptable 0040E656 case 4
.text:0040FC06                                         ; jumptable 0040E728 case 4
.text:0040FC0B ; ---------------------------------------------------------------------------
.text:0040FC0B
.text:0040FC0B loc_40FC0B:                             ; CODE XREF: sub_40DA60+C88↑j
.text:0040FC0B                 mov     ebx, [esp+0BCh+var_34]
.text:0040FC12                 movzx   eax, byte ptr [ebx-1]
.text:0040FC16                 jmp     loc_40E6F5
.text:0040FC1B ; ---------------------------------------------------------------------------
.text:0040FC1B
.text:0040FC1B loc_40FC1B:                             ; CODE XREF: sub_40DA60+C76↑j
.text:0040FC1B                 mov     edi, [esp+0BCh+arg_C]
.text:0040FC22                 movzx   eax, byte ptr [edi]
.text:0040FC25                 jmp     loc_40E6F5
.text:0040FC2A ; ---------------------------------------------------------------------------
.text:0040FC2A
.text:0040FC2A loc_40FC2A:                             ; CODE XREF: sub_40DA60+C43↑j
.text:0040FC2A                 mov     esi, [esp+0BCh+var_34]
.text:0040FC31                 movzx   eax, byte ptr [esi-1]
.text:0040FC35                 jmp     loc_40E6B1
.text:0040FC3A ; ---------------------------------------------------------------------------
.text:0040FC3A
.text:0040FC3A loc_40FC3A:                             ; CODE XREF: sub_40DA60+C33↑j
.text:0040FC3A                 mov     ebp, [esp+0BCh+arg_C]
.text:0040FC41                 movzx   eax, byte ptr [ebp+0]
.text:0040FC45                 jmp     loc_40E6B1
.text:0040FC4A ; ---------------------------------------------------------------------------
.text:0040FC4A
.text:0040FC4A loc_40FC4A:                             ; CODE XREF: sub_40DA60+C01↑j
.text:0040FC4A                 mov     edx, [esp+0BCh+arg_C]
.text:0040FC51                 cmp     [esp+0BCh+var_44], edx
.text:0040FC55                 jmp     loc_40E672
.text:0040FC5A ; ---------------------------------------------------------------------------
.text:0040FC5A
.text:0040FC5A loc_40FC5A:                             ; CODE XREF: sub_40DA60+AFB↑j
.text:0040FC5A                 mov     ebx, [esp+0BCh+arg_C]
.text:0040FC61                 cmp     [esp+0BCh+var_44], ebx
.text:0040FC65                 jmp     loc_40E56C
.text:0040FC6A ; ---------------------------------------------------------------------------
.text:0040FC6A
.text:0040FC6A loc_40FC6A:                             ; CODE XREF: sub_40DA60+993↑j
.text:0040FC6A                 mov     edi, [esp+0BCh+var_44]
.text:0040FC6E                 cmp     byte ptr [edi], 0
.text:0040FC71                 jmp     loc_40E409
.text:0040FC76 ; ---------------------------------------------------------------------------
.text:0040FC76
.text:0040FC76 loc_40FC76:                             ; CODE XREF: sub_40DA60+964↑j
.text:0040FC76                 mov     edi, [esp+0BCh+var_44]
.text:0040FC7A                 cmp     byte ptr [edi], 0Ah
.text:0040FC7D                 jmp     loc_40E3DA
.text:0040FC82 ; ---------------------------------------------------------------------------
.text:0040FC82
.text:0040FC82 loc_40FC82:                             ; CODE XREF: sub_40DA60+94B↑j
.text:0040FC82                                         ; sub_40DA60+2241↓j
.text:0040FC82                 mov     eax, [esp+0BCh+var_40]
.text:0040FC86                 cmp     [esp+0BCh+var_48], eax
.text:0040FC8A                 jz      loc_40DEB2
.text:0040FC90                 mov     [esp+0BCh+var_48], eax
.text:0040FC94                 mov     ecx, [esp+0BCh+arg_C]
.text:0040FC9B                 cmp     ecx, eax
.text:0040FC9D                 mov     [esp+0BCh+var_44], ecx
.text:0040FCA1                 jz      short loc_40FC82
.text:0040FCA3                 jmp     loc_40E3B1
.text:0040FCA8 ; ---------------------------------------------------------------------------
.text:0040FCA8
.text:0040FCA8 loc_40FCA8:                             ; CODE XREF: sub_40DA60+21B↑j
.text:0040FCA8                                         ; sub_40DA60+22F↑j
.text:0040FCA8                 mov     edi, [esp+0BCh+arg_C]
.text:0040FCAF                 mov     esi, [esp+0BCh+arg_14]
.text:0040FCB6                 mov     ecx, [esp+0BCh+arg_8]
.text:0040FCBD                 mov     ebp, [esp+0BCh+var_40]
.text:0040FCC1                 add     edi, esi
.text:0040FCC3                 sub     edi, ecx
.text:0040FCC5                 mov     [esp+0BCh+var_44], edi
.text:0040FCC9                 mov     [esp+0BCh+var_48], ebp
.text:0040FCCD                 jmp     loc_40DCB4
.text:0040FCD2 ; ---------------------------------------------------------------------------
.text:0040FCD2
.text:0040FCD2 loc_40FCD2:                             ; CODE XREF: sub_40DA60+1F1↑j
.text:0040FCD2                 mov     ebp, [esp+0BCh+arg_C]
.text:0040FCD9                 mov     ebx, [esp+0BCh+arg_8]
.text:0040FCE0                 mov     edi, [esp+0BCh+var_34]
.text:0040FCE7                 add     esi, ebp
.text:0040FCE9                 sub     esi, ebx
.text:0040FCEB                 mov     [esp+0BCh+var_3C], edi
.text:0040FCF2                 jmp     loc_40DC6E
.text:0040FCF7 ; ---------------------------------------------------------------------------
.text:0040FCF7
.text:0040FCF7 loc_40FCF7:                             ; CODE XREF: sub_40DA60+B0↑j
.text:0040FCF7                 mov     edi, [esp+0BCh+var_5C]
.text:0040FCFB                 shl     edi, 2
.text:0040FCFE                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD01                 call    malloc
.text:0040FD06                 mov     [esp+0BCh+var_68], eax
.text:0040FD0A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD0D                 call    malloc
.text:0040FD12                 mov     [esp+0BCh+var_6C], eax
.text:0040FD16                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD19                 call    malloc
.text:0040FD1E                 mov     [esp+0BCh+var_70], eax
.text:0040FD22                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD25                 call    malloc
.text:0040FD2A                 mov     [esp+0BCh+var_74], eax
.text:0040FD2E                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD31                 call    malloc
.text:0040FD36                 mov     [esp+0BCh+var_80], eax
.text:0040FD3A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD3D                 call    malloc
.text:0040FD42                 mov     [esp+0BCh+var_84], eax
.text:0040FD46                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD49                 call    malloc
.text:0040FD4E                 mov     [esp+0BCh+var_78], eax
.text:0040FD52                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD55                 call    malloc
.text:0040FD5A                 mov     [esp+0BCh+var_90], eax
.text:0040FD5E                 mov     [esp+0BCh+Size], edi ; Size
.text:0040FD61                 call    malloc
.text:0040FD66                 mov     [esp+0BCh+var_94], eax
.text:0040FD6A                 mov     ecx, [esp+0BCh+var_68]
.text:0040FD6E                 test    ecx, ecx
.text:0040FD70                 jz      loc_40E1E1
.text:0040FD76                 mov     ebx, [esp+0BCh+var_6C]
.text:0040FD7A                 test    ebx, ebx
.text:0040FD7C                 jz      loc_40E1E1
.text:0040FD82                 mov     edx, [esp+0BCh+var_70]
.text:0040FD86                 test    edx, edx
.text:0040FD88                 jz      loc_40E1E1
.text:0040FD8E                 mov     ebp, [esp+0BCh+var_74]
.text:0040FD92                 test    ebp, ebp
.text:0040FD94                 jz      loc_40E1E1
.text:0040FD9A                 mov     ecx, [esp+0BCh+var_78]
.text:0040FD9E                 test    ecx, ecx
.text:0040FDA0                 jz      loc_40E1E1
.text:0040FDA6                 mov     edi, [esp+0BCh+var_80]
.text:0040FDAA                 test    edi, edi
.text:0040FDAC                 jz      loc_40E1E1
.text:0040FDB2                 mov     ebx, [esp+0BCh+var_84]
.text:0040FDB6                 test    ebx, ebx
.text:0040FDB8                 jz      loc_40E1E1
.text:0040FDBE                 mov     edx, [esp+0BCh+var_90]
.text:0040FDC2                 test    edx, edx
.text:0040FDC4                 jz      loc_40E1E1
.text:0040FDCA                 test    eax, eax
.text:0040FDCC                 jnz     loc_40DB5E
.text:0040FDD2                 jmp     loc_40E1E1
.text:0040FDD2 sub_40DA60      endp
.text:0040FDD2
.text:0040FDD2 ; ---------------------------------------------------------------------------
.text:0040FDD7                 align 10h
.text:0040FDE0
.text:0040FDE0 ; =============== S U B R O U T I N E =======================================
.text:0040FDE0
.text:0040FDE0
.text:0040FDE0 sub_40FDE0      proc near               ; CODE XREF: sub_40DA60+208A↑p
.text:0040FDE0                                         ; sub_40FF90+CA↓p
.text:0040FDE0
.text:0040FDE0 var_2C          = dword ptr -2Ch
.text:0040FDE0 var_28          = dword ptr -28h
.text:0040FDE0 var_24          = dword ptr -24h
.text:0040FDE0 var_14          = dword ptr -14h
.text:0040FDE0 arg_0           = dword ptr  4
.text:0040FDE0 arg_4           = dword ptr  8
.text:0040FDE0 arg_8           = dword ptr  0Ch
.text:0040FDE0
.text:0040FDE0                 push    ebp
.text:0040FDE1                 push    edi
.text:0040FDE2                 push    esi
.text:0040FDE3                 push    ebx
.text:0040FDE4                 sub     esp, 1Ch
.text:0040FDE7                 mov     ebp, [esp+2Ch+arg_0]
.text:0040FDEB                 mov     edi, [esp+2Ch+arg_4]
.text:0040FDEF                 mov     esi, [esp+2Ch+arg_8]
.text:0040FDF3                 mov     eax, [ebp+0]
.text:0040FDF6                 add     eax, 2
.text:0040FDF9                 cmp     eax, edi
.text:0040FDFB                 mov     ecx, eax
.text:0040FDFD                 mov     [esp+2Ch+var_14], eax
.text:0040FE01                 jnb     short loc_40FE43
.text:0040FE03                 lea     esi, [esi+0]
.text:0040FE09                 lea     edi, [edi+0]
.text:0040FE10
.text:0040FE10 loc_40FE10:                             ; CODE XREF: sub_40FDE0+61↓j
.text:0040FE10                 movzx   eax, byte ptr [ecx]
.text:0040FE13                 cmp     eax, 7
.text:0040FE16                 jz      loc_40FEF3
.text:0040FE1C                 cmp     eax, 0Fh
.text:0040FE1F                 jz      short loc_40FE50
.text:0040FE21                 mov     [esp+2Ch+var_24], esi
.text:0040FE25                 lea     ebx, [esp+2Ch+var_14]
.text:0040FE29                 mov     [esp+2Ch+var_28], edi
.text:0040FE2D                 mov     [esp+2Ch+var_2C], ebx
.text:0040FE30                 call    sub_40FF90
.text:0040FE35                 xor     edx, edx
.text:0040FE37                 test    al, al
.text:0040FE39                 jz      short loc_40FE45
.text:0040FE3B
.text:0040FE3B loc_40FE3B:                             ; CODE XREF: sub_40FDE0+8B↓j
.text:0040FE3B                                         ; sub_40FDE0+BE↓j
.text:0040FE3B                 mov     ecx, [esp+2Ch+var_14]
.text:0040FE3F                 cmp     ecx, edi
.text:0040FE41                 jb      short loc_40FE10
.text:0040FE43
.text:0040FE43 loc_40FE43:                             ; CODE XREF: sub_40FDE0+21↑j
.text:0040FE43                 xor     edx, edx
.text:0040FE45
.text:0040FE45 loc_40FE45:                             ; CODE XREF: sub_40FDE0+59↑j
.text:0040FE45                                         ; sub_40FDE0+B8↓j ...
.text:0040FE45                 add     esp, 1Ch
.text:0040FE48                 mov     eax, edx
.text:0040FE4A                 pop     ebx
.text:0040FE4B                 pop     esi
.text:0040FE4C                 pop     edi
.text:0040FE4D                 pop     ebp
.text:0040FE4E                 retn
.text:0040FE4E ; ---------------------------------------------------------------------------
.text:0040FE4F                 align 10h
.text:0040FE50
.text:0040FE50 loc_40FE50:                             ; CODE XREF: sub_40FDE0+3F↑j
.text:0040FE50                 lea     edx, [ecx+1]
.text:0040FE53                 mov     [esp+2Ch+var_14], edx
.text:0040FE57                 movsx   eax, byte ptr [edx+1]
.text:0040FE5B                 lea     edx, [ecx+3]
.text:0040FE5E                 movzx   ebx, byte ptr [ecx+1]
.text:0040FE62                 mov     [esp+2Ch+var_14], edx
.text:0040FE66                 shl     eax, 8
.text:0040FE69                 add     ebx, eax
.text:0040FE6B                 js      short loc_40FE3B
.text:0040FE6D                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:0040FE72                 jz      short loc_40FEA0
.text:0040FE74
.text:0040FE74 loc_40FE74:                             ; CODE XREF: sub_40FDE0+E9↓j
.text:0040FE74                                         ; sub_40FDE0+111↓j
.text:0040FE74                 movsx   ecx, byte ptr [edx-1]
.text:0040FE78                 movzx   ebx, byte ptr [edx-2]
.text:0040FE7C                 mov     [esp+2Ch+var_2C], edx
.text:0040FE7F                 mov     [esp+2Ch+var_24], esi
.text:0040FE83                 shl     ecx, 8
.text:0040FE86                 add     ebx, ecx
.text:0040FE88                 lea     ecx, [ebx+edx]
.text:0040FE8B                 mov     [esp+2Ch+var_28], ecx
.text:0040FE8F                 call    sub_40FF10
.text:0040FE94                 xor     edx, edx
.text:0040FE96                 test    al, al
.text:0040FE98                 jz      short loc_40FE45
.text:0040FE9A                 add     [esp+2Ch+var_14], ebx
.text:0040FE9E                 jmp     short loc_40FE3B
.text:0040FEA0 ; ---------------------------------------------------------------------------
.text:0040FEA0
.text:0040FEA0 loc_40FEA0:                             ; CODE XREF: sub_40FDE0+92↑j
.text:0040FEA0                                         ; sub_40FDE0+109↓j
.text:0040FEA0                 mov     [esp+2Ch+var_2C], edx
.text:0040FEA3                 lea     ecx, [ebx+edx-3]
.text:0040FEA7                 mov     [esp+2Ch+var_24], esi
.text:0040FEAB                 mov     [esp+2Ch+var_28], ecx
.text:0040FEAF                 call    sub_40FF10
.text:0040FEB4                 xor     edx, edx
.text:0040FEB6                 test    al, al
.text:0040FEB8                 jz      short loc_40FE45
.text:0040FEBA                 mov     ecx, [esp+2Ch+var_14]
.text:0040FEBE                 add     ecx, ebx
.text:0040FEC0                 mov     edx, ecx
.text:0040FEC2                 mov     [esp+2Ch+var_14], ecx
.text:0040FEC6                 cmp     byte ptr [ecx], 0Fh
.text:0040FEC9                 jnz     short loc_40FE74
.text:0040FECB                 inc     edx
.text:0040FECC                 mov     [esp+2Ch+var_14], edx
.text:0040FED0                 movsx   eax, byte ptr [edx+1]
.text:0040FED4                 lea     edx, [ecx+3]
.text:0040FED7                 movzx   ebx, byte ptr [ecx+1]
.text:0040FEDB                 mov     [esp+2Ch+var_14], edx
.text:0040FEDF                 shl     eax, 8
.text:0040FEE2                 add     ebx, eax
.text:0040FEE4                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:0040FEE9                 jz      short loc_40FEA0
.text:0040FEEB                 mov     [esp+2Ch+var_14], ecx
.text:0040FEEF                 mov     edx, ecx
.text:0040FEF1                 jmp     short loc_40FE74
.text:0040FEF3 ; ---------------------------------------------------------------------------
.text:0040FEF3
.text:0040FEF3 loc_40FEF3:                             ; CODE XREF: sub_40FDE0+36↑j
.text:0040FEF3                 lea     edx, [ecx+2]
.text:0040FEF6                 mov     [ebp+0], edx
.text:0040FEF9                 mov     edx, 1
.text:0040FEFE                 jmp     loc_40FE45
.text:0040FEFE sub_40FDE0      endp
.text:0040FEFE
.text:0040FEFE ; ---------------------------------------------------------------------------
.text:0040FF03                 align 10h
.text:0040FF10
.text:0040FF10 ; =============== S U B R O U T I N E =======================================
.text:0040FF10
.text:0040FF10
.text:0040FF10 sub_40FF10      proc near               ; CODE XREF: sub_40FDE0+AF↑p
.text:0040FF10                                         ; sub_40FDE0+CF↑p
.text:0040FF10
.text:0040FF10 var_1C          = dword ptr -1Ch
.text:0040FF10 var_18          = dword ptr -18h
.text:0040FF10 var_14          = dword ptr -14h
.text:0040FF10 var_C           = dword ptr -0Ch
.text:0040FF10 arg_0           = dword ptr  4
.text:0040FF10 arg_4           = dword ptr  8
.text:0040FF10 arg_8           = dword ptr  0Ch
.text:0040FF10
.text:0040FF10                 push    esi
.text:0040FF11                 push    ebx
.text:0040FF12                 sub     esp, 14h
.text:0040FF15                 mov     edx, [esp+1Ch+arg_0]
.text:0040FF19                 mov     ebx, [esp+1Ch+arg_4]
.text:0040FF1D                 mov     esi, [esp+1Ch+arg_8]
.text:0040FF21                 mov     ecx, edx
.text:0040FF23                 mov     [esp+1Ch+var_C], edx
.text:0040FF27                 cmp     edx, ebx
.text:0040FF29                 jnb     short loc_40FF57
.text:0040FF2B                 nop
.text:0040FF2C                 lea     esi, [esi+0]
.text:0040FF30
.text:0040FF30 loc_40FF30:                             ; CODE XREF: sub_40FF10+45↓j
.text:0040FF30                 cmp     byte ptr [ecx], 0Fh
.text:0040FF33                 jz      short loc_40FF64
.text:0040FF35                 mov     [esp+1Ch+var_14], esi
.text:0040FF39                 lea     edx, [esp+1Ch+var_C]
.text:0040FF3D                 mov     [esp+1Ch+var_1C], edx
.text:0040FF40                 mov     [esp+1Ch+var_18], ebx
.text:0040FF44                 call    sub_40FF90
.text:0040FF49                 xor     edx, edx
.text:0040FF4B                 test    al, al
.text:0040FF4D                 jz      short loc_40FF5C
.text:0040FF4F
.text:0040FF4F loc_40FF4F:                             ; CODE XREF: sub_40FF10+70↓j
.text:0040FF4F                 mov     ecx, [esp+1Ch+var_C]
.text:0040FF53                 cmp     ecx, ebx
.text:0040FF55                 jb      short loc_40FF30
.text:0040FF57
.text:0040FF57 loc_40FF57:                             ; CODE XREF: sub_40FF10+19↑j
.text:0040FF57                 mov     edx, 1
.text:0040FF5C
.text:0040FF5C loc_40FF5C:                             ; CODE XREF: sub_40FF10+3D↑j
.text:0040FF5C                 add     esp, 14h
.text:0040FF5F                 mov     eax, edx
.text:0040FF61                 pop     ebx
.text:0040FF62                 pop     esi
.text:0040FF63                 retn
.text:0040FF64 ; ---------------------------------------------------------------------------
.text:0040FF64
.text:0040FF64 loc_40FF64:                             ; CODE XREF: sub_40FF10+23↑j
.text:0040FF64                 lea     eax, [ecx+1]
.text:0040FF67                 mov     [esp+1Ch+var_C], eax
.text:0040FF6B                 movsx   eax, byte ptr [eax+1]
.text:0040FF6F                 movzx   edx, byte ptr [ecx+1]
.text:0040FF73                 shl     eax, 8
.text:0040FF76                 add     edx, eax
.text:0040FF78                 lea     eax, [edx+ecx+3]
.text:0040FF7C                 mov     [esp+1Ch+var_C], eax
.text:0040FF80                 jmp     short loc_40FF4F
.text:0040FF80 sub_40FF10      endp
.text:0040FF80
.text:0040FF80 ; ---------------------------------------------------------------------------
.text:0040FF82                 align 10h
.text:0040FF90
.text:0040FF90 ; =============== S U B R O U T I N E =======================================
.text:0040FF90
.text:0040FF90
.text:0040FF90 sub_40FF90      proc near               ; CODE XREF: sub_40FDE0+50↑p
.text:0040FF90                                         ; sub_40FF10+34↑p
.text:0040FF90
.text:0040FF90 var_1C          = dword ptr -1Ch
.text:0040FF90 var_18          = dword ptr -18h
.text:0040FF90 var_14          = dword ptr -14h
.text:0040FF90 var_10          = dword ptr -10h
.text:0040FF90 var_C           = dword ptr -0Ch
.text:0040FF90 var_8           = dword ptr -8
.text:0040FF90 var_4           = dword ptr -4
.text:0040FF90 arg_0           = dword ptr  4
.text:0040FF90 arg_4           = dword ptr  8
.text:0040FF90 arg_8           = dword ptr  0Ch
.text:0040FF90
.text:0040FF90                 sub     esp, 1Ch
.text:0040FF93                 mov     [esp+1Ch+var_4], edi
.text:0040FF97                 mov     edi, [esp+1Ch+arg_0]
.text:0040FF9B                 mov     [esp+1Ch+var_C], ebx
.text:0040FF9F                 mov     ebx, [esp+1Ch+arg_8]
.text:0040FFA3                 mov     [esp+1Ch+var_8], esi
.text:0040FFA7                 mov     edx, [edi]
.text:0040FFA9                 mov     [esp+1Ch+var_10], edx
.text:0040FFAD                 movzx   eax, byte ptr [edx]
.text:0040FFB0                 inc     edx
.text:0040FFB1                 mov     [esp+1Ch+var_10], edx
.text:0040FFB5                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040FFB8                 ja      def_40FFBE      ; jumptable 0040FFBE default case, cases 1-5,7,14-20,22,24,25
.text:0040FFBE                 jmp     ds:jpt_40FFBE[eax*4] ; switch jump
.text:0040FFBE ; ---------------------------------------------------------------------------
.text:0040FFC5                 align 4
.text:0040FFC8 jpt_40FFBE      dd offset loc_410073    ; DATA XREF: sub_40FF90+2E↑r
.text:0040FFC8                 dd offset def_40FFBE    ; jump table for switch statement
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset loc_410040
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset loc_4100A2
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_4100B4
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset loc_4100D5
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset loc_410111
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset def_40FFBE
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:0040FFC8                 dd offset loc_410073
.text:00410040 ; ---------------------------------------------------------------------------
.text:00410040
.text:00410040 loc_410040:                             ; CODE XREF: sub_40FF90+2E↑j
.text:00410040                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:00410040                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040FFBE case 6
.text:00410044                 mov     edx, [esp+1Ch+arg_4]
.text:00410048                 movzx   esi, byte ptr [ecx]
.text:0041004B                 lea     ecx, [esp+1Ch+var_10]
.text:0041004F                 mov     [esp+1Ch+var_18], edx
.text:00410053                 mov     [esp+1Ch+var_1C], ecx
.text:00410056                 mov     [esp+1Ch+var_14], ebx
.text:0041005A                 call    sub_40FDE0
.text:0041005F                 movzx   edx, byte ptr [ebx+esi*4]
.text:00410063                 mov     cl, al
.text:00410065                 and     edx, 3
.text:00410068                 cmp     edx, 3
.text:0041006B                 jz      short loc_410090
.text:0041006D
.text:0041006D loc_41006D:                             ; CODE XREF: sub_40FF90+110↓j
.text:0041006D                 xor     eax, eax
.text:0041006F                 test    cl, cl
.text:00410071                 jz      short loc_410080
.text:00410073
.text:00410073 loc_410073:                             ; CODE XREF: sub_40FF90+2E↑j
.text:00410073                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:00410073                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040FFBE cases 0,9-12,26-29
.text:00410077
.text:00410077 loc_410077:                             ; CODE XREF: sub_40FF90+11D↓j
.text:00410077                                         ; sub_40FF90+143↓j
.text:00410077                 mov     [edi], ecx
.text:00410079                 mov     eax, 1
.text:0041007E                 mov     esi, esi
.text:00410080
.text:00410080 loc_410080:                             ; CODE XREF: sub_40FF90+E1↑j
.text:00410080                                         ; sub_40FF90+122↓j ...
.text:00410080                 mov     ebx, [esp+1Ch+var_C]
.text:00410084                 mov     esi, [esp+1Ch+var_8]
.text:00410088                 mov     edi, [esp+1Ch+var_4]
.text:0041008C                 add     esp, 1Ch
.text:0041008F                 retn
.text:00410090 ; ---------------------------------------------------------------------------
.text:00410090
.text:00410090 loc_410090:                             ; CODE XREF: sub_40FF90+DB↑j
.text:00410090                 mov     eax, [ebx+esi*4]
.text:00410093                 mov     edx, ecx
.text:00410095                 and     edx, 3
.text:00410098                 and     eax, 0FFFFFFFCh
.text:0041009B                 or      eax, edx
.text:0041009D                 mov     [ebx+esi*4], eax
.text:004100A0                 jmp     short loc_41006D
.text:004100A2 ; ---------------------------------------------------------------------------
.text:004100A2
.text:004100A2 loc_4100A2:                             ; CODE XREF: sub_40FF90+2E↑j
.text:004100A2                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:004100A2                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040FFBE case 8
.text:004100A6                 movzx   esi, byte ptr [ecx]
.text:004100A9                 test    byte ptr [ebx+esi*4], 3
.text:004100AD                 jnz     short loc_410077
.text:004100AF                 nop
.text:004100B0
.text:004100B0 def_40FFBE:                             ; CODE XREF: sub_40FF90+28↑j
.text:004100B0                                         ; sub_40FF90+2E↑j ...
.text:004100B0                 xor     eax, eax        ; jumptable 0040FFBE default case, cases 1-5,7,14-20,22,24,25
.text:004100B2                 jmp     short loc_410080
.text:004100B4 ; ---------------------------------------------------------------------------
.text:004100B4
.text:004100B4 loc_4100B4:                             ; CODE XREF: sub_40FF90+2E↑j
.text:004100B4                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:004100B4                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040FFBE case 13
.text:004100B8                 lea     ecx, [edx+2]
.text:004100BB                 movsx   esi, byte ptr [edx+1]
.text:004100BF                 movzx   ebx, byte ptr [edx]
.text:004100C2                 mov     [esp+1Ch+var_10], ecx
.text:004100C6                 shl     esi, 8
.text:004100C9                 add     ebx, esi
.text:004100CB                 js      short def_40FFBE ; jumptable 0040FFBE default case, cases 1-5,7,14-20,22,24,25
.text:004100CD                 add     ecx, ebx
.text:004100CF
.text:004100CF loc_4100CF:                             ; CODE XREF: sub_40FF90+17F↓j
.text:004100CF                 mov     [esp+1Ch+var_10], ecx
.text:004100D3                 jmp     short loc_410077
.text:004100D5 ; ---------------------------------------------------------------------------
.text:004100D5
.text:004100D5 loc_4100D5:                             ; CODE XREF: sub_40FF90+2E↑j
.text:004100D5                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:004100D5                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040FFBE case 21
.text:004100D9                 lea     esi, [edx+2]
.text:004100DC                 mov     [esp+1Ch+var_10], esi
.text:004100E0                 movsx   eax, byte ptr [esi+1]
.text:004100E4                 movzx   ebx, byte ptr [edx+2]
.text:004100E8                 shl     eax, 8
.text:004100EB                 add     ebx, eax
.text:004100ED                 lea     eax, [edx+4]
.text:004100F0                 mov     [esp+1Ch+var_10], eax
.text:004100F4                 xor     eax, eax
.text:004100F6                 test    ebx, ebx
.text:004100F8                 jnz     short loc_410080
.text:004100FA                 mov     [esp+1Ch+var_10], edx
.text:004100FE                 mov     eax, edx
.text:00410100                 movsx   ebx, byte ptr [eax+1]
.text:00410104                 movzx   edx, byte ptr [edx]
.text:00410107                 shl     ebx, 8
.text:0041010A                 add     edx, ebx
.text:0041010C                 lea     ecx, [edx+esi]
.text:0041010F                 jmp     short loc_4100CF
.text:00410111 ; ---------------------------------------------------------------------------
.text:00410111
.text:00410111 loc_410111:                             ; CODE XREF: sub_40FF90+2E↑j
.text:00410111                                         ; DATA XREF: sub_40FF90:jpt_40FFBE↑o
.text:00410111                 add     [esp+1Ch+var_10], 4 ; jumptable 0040FFBE case 23
.text:00410116                 jmp     short def_40FFBE ; jumptable 0040FFBE default case, cases 1-5,7,14-20,22,24,25
.text:00410116 sub_40FF90      endp
.text:00410116
.text:00410116 ; ---------------------------------------------------------------------------
.text:00410118                 align 10h
.text:00410120
.text:00410120 ; =============== S U B R O U T I N E =======================================
.text:00410120
.text:00410120
.text:00410120 sub_410120      proc near               ; CODE XREF: sub_40DA60+1B06↑p
.text:00410120
.text:00410120 arg_0           = dword ptr  4
.text:00410120 arg_4           = dword ptr  8
.text:00410120 arg_8           = dword ptr  0Ch
.text:00410120 arg_C           = dword ptr  10h
.text:00410120
.text:00410120                 push    edi
.text:00410121                 push    esi
.text:00410122                 push    ebx
.text:00410123                 mov     esi, [esp+0Ch+arg_8]
.text:00410127                 mov     edi, [esp+0Ch+arg_C]
.text:0041012B                 mov     ebx, [esp+0Ch+arg_0]
.text:0041012F                 test    esi, esi
.text:00410131                 mov     ecx, [esp+0Ch+arg_4]
.text:00410135                 jz      short loc_410154
.text:00410137                 mov     esi, esi
.text:00410139                 lea     edi, [edi+0]
.text:00410140
.text:00410140 loc_410140:                             ; CODE XREF: sub_410120+32↓j
.text:00410140                 movzx   eax, byte ptr [ecx]
.text:00410143                 inc     ecx
.text:00410144                 movzx   edx, byte ptr [ebx]
.text:00410147                 inc     ebx
.text:00410148                 movzx   eax, byte ptr [eax+edi]
.text:0041014C                 cmp     [edx+edi], al
.text:0041014F                 jnz     short loc_41015A
.text:00410151                 dec     esi
.text:00410152                 jnz     short loc_410140
.text:00410154
.text:00410154 loc_410154:                             ; CODE XREF: sub_410120+15↑j
.text:00410154                 xor     eax, eax
.text:00410156
.text:00410156 loc_410156:                             ; CODE XREF: sub_410120+3F↓j
.text:00410156                 pop     ebx
.text:00410157                 pop     esi
.text:00410158                 pop     edi
.text:00410159                 retn
.text:0041015A ; ---------------------------------------------------------------------------
.text:0041015A
.text:0041015A loc_41015A:                             ; CODE XREF: sub_410120+2F↑j
.text:0041015A                 mov     eax, 1
.text:0041015F                 jmp     short loc_410156
.text:0041015F sub_410120      endp
.text:0041015F
.text:0041015F ; ---------------------------------------------------------------------------
.text:00410161                 align 20h
.text:00410180 aSuccess        db 'Success',0          ; DATA XREF: .text:00410821↓o
.text:00410180                                         ; .text:0041086B↓o
.text:00410188 aNoMatch        db 'No match',0
.text:00410191 aInvalidRegular db 'Invalid regular expression',0
.text:004101AC aInvalidCollati db 'Invalid collation character',0
.text:004101C8 aInvalidCharact db 'Invalid character class name',0
.text:004101E5 aTrailingBacksl db 'Trailing backslash',0
.text:004101F8 aInvalidBackRef db 'Invalid back reference',0
.text:0041020F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:00410221 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:00410233 aUnmatched      db 'Unmatched \{',0
.text:00410240 aInvalidContent db 'Invalid content of \{\}',0
.text:00410258 aInvalidRangeEn db 'Invalid range end',0
.text:0041026A aMemoryExhauste_0 db 'Memory exhausted',0
.text:0041027B aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:004102A0 aPrematureEndOf db 'Premature end of regular expression',0
.text:004102C4 aRegularExpress db 'Regular expression too big',0
.text:004102DF aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:004102F1                 db 0EBh, 0Dh, 90h
.text:004102F4                 db 0Ch dup(90h)
.text:00410300 dword_410300    dd 0                    ; DATA XREF: .text:0041081A↓r
.text:00410300                                         ; .text:00410864↓r
.text:00410304                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:00410304                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:00410350
.text:00410350 ; =============== S U B R O U T I N E =======================================
.text:00410350
.text:00410350
.text:00410350 sub_410350      proc near               ; CODE XREF: sub_410970+25A0↓p
.text:00410350
.text:00410350 arg_0           = dword ptr  4
.text:00410350 arg_8           = dword ptr  0Ch
.text:00410350 arg_C           = dword ptr  10h
.text:00410350
.text:00410350                 mov     edx, [esp+arg_8]
.text:00410354                 mov     ecx, [esp+arg_C]
.text:00410358                 dec     edx
.text:00410359                 js      short loc_41037A
.text:0041035B                 lea     eax, [edx+edx*4]
.text:0041035E                 shl     eax, 2
.text:00410361                 add     eax, [esp+arg_0]
.text:00410365                 add     eax, 10h
.text:00410368                 nop
.text:00410369                 lea     esi, [esi+0]
.text:00410370
.text:00410370 loc_410370:                             ; CODE XREF: sub_410350+28↓j
.text:00410370                 cmp     [eax], ecx
.text:00410372                 jz      short loc_41037D
.text:00410374                 sub     eax, 14h
.text:00410377                 dec     edx
.text:00410378                 jns     short loc_410370
.text:0041037A
.text:0041037A loc_41037A:                             ; CODE XREF: sub_410350+9↑j
.text:0041037A                 xor     eax, eax
.text:0041037C                 retn
.text:0041037D ; ---------------------------------------------------------------------------
.text:0041037D
.text:0041037D loc_41037D:                             ; CODE XREF: sub_410350+22↑j
.text:0041037D                 mov     eax, 1
.text:00410382                 retn
.text:00410382 sub_410350      endp
.text:00410382
.text:00410382 ; ---------------------------------------------------------------------------
.text:00410383                 align 10h
.text:00410390
.text:00410390 ; =============== S U B R O U T I N E =======================================
.text:00410390
.text:00410390 ; Attributes: thunk
.text:00410390
.text:00410390 sub_410390      proc near               ; CODE XREF: sub_4103A0+D1↓p
.text:00410390                                         ; sub_413CE0+258↓p
.text:00410390                 jmp     sub_413F80
.text:00410390 sub_410390      endp
.text:00410390
.text:00410390 ; ---------------------------------------------------------------------------
.text:00410395                 align 10h
.text:004103A0
.text:004103A0 ; =============== S U B R O U T I N E =======================================
.text:004103A0
.text:004103A0
.text:004103A0 ; int __cdecl sub_4103A0(int, char *Str, int)
.text:004103A0 sub_4103A0      proc near               ; CODE XREF: .text:0040D5CC↑p
.text:004103A0                                         ; .text:0040D64F↑p
.text:004103A0
.text:004103A0 Size            = dword ptr -2Ch
.text:004103A0 Type            = dword ptr -28h
.text:004103A0 var_24          = dword ptr -24h
.text:004103A0 var_20          = dword ptr -20h
.text:004103A0 arg_0           = dword ptr  4
.text:004103A0 Str             = dword ptr  8
.text:004103A0 arg_8           = dword ptr  0Ch
.text:004103A0
.text:004103A0                 push    ebp
.text:004103A1                 push    edi
.text:004103A2                 push    esi
.text:004103A3                 push    ebx
.text:004103A4                 sub     esp, 1Ch
.text:004103A7                 mov     edi, [esp+2Ch+arg_0]
.text:004103AB                 test    byte ptr [esp+2Ch+arg_8], 1
.text:004103B0                 mov     dword ptr [edi], 0
.text:004103B6                 setnz   dl
.text:004103B9                 mov     dword ptr [edi+4], 0
.text:004103C0                 mov     dword ptr [edi+8], 0
.text:004103C7                 mov     [esp+2Ch+Size], 100h ; Size
.text:004103CE                 movzx   ebp, dl
.text:004103D1                 dec     ebp
.text:004103D2                 and     ebp, 0FFFD4FCAh
.text:004103D8                 add     ebp, 3B2FCh
.text:004103DE                 call    malloc
.text:004103E3                 test    byte ptr [esp+2Ch+arg_8], 2
.text:004103E8                 mov     [edi+10h], eax
.text:004103EB                 jnz     loc_4104A0
.text:004103F1                 mov     dword ptr [edi+14h], 0
.text:004103F8
.text:004103F8 loc_4103F8:                             ; CODE XREF: sub_4103A0+150↓j
.text:004103F8                 test    byte ptr [esp+2Ch+arg_8], 4
.text:004103FD                 jz      loc_410497
.text:00410403                 or      byte ptr [edi+1Ch], 80h
.text:00410407                 and     ebp, 0FFFFFFBFh
.text:0041040A                 or      ebp, 100h
.text:00410410
.text:00410410 loc_410410:                             ; CODE XREF: sub_4103A0+FB↓j
.text:00410410                 shr     [esp+2Ch+arg_8], 3
.text:00410415                 movzx   edx, byte ptr [esp+2Ch+arg_8]
.text:0041041A                 movzx   ecx, byte ptr [edi+1Ch]
.text:0041041E                 and     dl, 1
.text:00410421                 shl     dl, 4
.text:00410424                 and     cl, 0EFh
.text:00410427                 or      cl, dl
.text:00410429                 mov     [edi+1Ch], cl
.text:0041042C                 mov     esi, [esp+2Ch+Str]
.text:00410430                 mov     [esp+2Ch+Size], esi ; Str
.text:00410433                 call    strlen
.text:00410438                 mov     [esp+2Ch+Type], eax
.text:0041043C                 mov     ebx, [esp+2Ch+Str]
.text:00410440                 mov     [esp+2Ch+var_20], edi
.text:00410444                 mov     [esp+2Ch+var_24], ebp
.text:00410448                 mov     [esp+2Ch+Size], ebx
.text:0041044B                 call    sub_410970
.text:00410450                 cmp     eax, 10h
.text:00410453                 mov     ebx, eax
.text:00410455                 jz      short loc_410490
.text:00410457
.text:00410457 loc_410457:                             ; CODE XREF: sub_4103A0+F5↓j
.text:00410457                 test    ebx, ebx
.text:00410459                 jnz     short loc_410462
.text:0041045B                 mov     ebp, [edi+10h]
.text:0041045E                 test    ebp, ebp
.text:00410460                 jnz     short loc_41046E
.text:00410462
.text:00410462 loc_410462:                             ; CODE XREF: sub_4103A0+B9↑j
.text:00410462                                         ; sub_4103A0+D9↓j ...
.text:00410462                 mov     edx, ebx
.text:00410464
.text:00410464 loc_410464:                             ; CODE XREF: sub_4103A0+116↓j
.text:00410464                 add     esp, 1Ch
.text:00410467                 mov     eax, edx
.text:00410469                 pop     ebx
.text:0041046A                 pop     esi
.text:0041046B                 pop     edi
.text:0041046C                 pop     ebp
.text:0041046D                 retn
.text:0041046E ; ---------------------------------------------------------------------------
.text:0041046E
.text:0041046E loc_41046E:                             ; CODE XREF: sub_4103A0+C0↑j
.text:0041046E                 mov     [esp+2Ch+Size], edi
.text:00410471                 call    sub_410390
.text:00410476                 cmp     eax, 0FFFFFFFEh
.text:00410479                 jnz     short loc_410462
.text:0041047B                 mov     esi, [edi+10h]
.text:0041047E                 mov     [esp+2Ch+Size], esi ; Block
.text:00410481                 call    free
.text:00410486                 mov     dword ptr [edi+10h], 0
.text:0041048D                 jmp     short loc_410462
.text:0041048D ; ---------------------------------------------------------------------------
.text:0041048F                 align 10h
.text:00410490
.text:00410490 loc_410490:                             ; CODE XREF: sub_4103A0+B5↑j
.text:00410490                 mov     ebx, 8
.text:00410495                 jmp     short loc_410457
.text:00410497 ; ---------------------------------------------------------------------------
.text:00410497
.text:00410497 loc_410497:                             ; CODE XREF: sub_4103A0+5D↑j
.text:00410497                 and     byte ptr [edi+1Ch], 7Fh
.text:0041049B                 jmp     loc_410410
.text:004104A0 ; ---------------------------------------------------------------------------
.text:004104A0
.text:004104A0 loc_4104A0:                             ; CODE XREF: sub_4103A0+4B↑j
.text:004104A0                 mov     [esp+2Ch+Size], 100h ; Size
.text:004104A7                 call    malloc
.text:004104AC                 mov     [edi+14h], eax
.text:004104AF                 test    eax, eax
.text:004104B1                 mov     edx, 0Ch
.text:004104B6                 jz      short loc_410464
.text:004104B8                 xor     ebx, ebx
.text:004104BA                 lea     esi, [esi+0]
.text:004104C0
.text:004104C0 loc_4104C0:                             ; CODE XREF: sub_4103A0+14E↓j
.text:004104C0                 mov     edx, ds:__mb_cur_max
.text:004104C6                 mov     esi, [edi+14h]
.text:004104C9                 cmp     dword ptr [edx], 1
.text:004104CC                 jz      short loc_410501
.text:004104CE                 mov     [esp+2Ch+Type], 1 ; Type
.text:004104D6                 mov     [esp+2Ch+Size], ebx ; C
.text:004104D9                 call    _isctype
.text:004104DE
.text:004104DE loc_4104DE:                             ; CODE XREF: sub_4103A0+170↓j
.text:004104DE                 test    eax, eax
.text:004104E0                 mov     dl, bl
.text:004104E2                 jnz     short loc_4104F5
.text:004104E4
.text:004104E4 loc_4104E4:                             ; CODE XREF: sub_4103A0+15F↓j
.text:004104E4                 mov     [ebx+esi], dl
.text:004104E7                 inc     ebx
.text:004104E8                 cmp     ebx, 0FFh
.text:004104EE                 jbe     short loc_4104C0
.text:004104F0                 jmp     loc_4103F8
.text:004104F5 ; ---------------------------------------------------------------------------
.text:004104F5
.text:004104F5 loc_4104F5:                             ; CODE XREF: sub_4103A0+142↑j
.text:004104F5                 mov     [esp+2Ch+Size], ebx ; C
.text:004104F8                 call    tolower
.text:004104FD                 mov     dl, al
.text:004104FF                 jmp     short loc_4104E4
.text:00410501 ; ---------------------------------------------------------------------------
.text:00410501
.text:00410501 loc_410501:                             ; CODE XREF: sub_4103A0+12C↑j
.text:00410501                 mov     edx, ds:_pctype
.text:00410507                 mov     ecx, [edx]
.text:00410509                 movzx   eax, word ptr [ecx+ebx*2]
.text:0041050D                 and     eax, 1
.text:00410510                 jmp     short loc_4104DE
.text:00410510 sub_4103A0      endp
.text:00410510
.text:00410510 ; ---------------------------------------------------------------------------
.text:00410512                 align 10h
.text:00410520
.text:00410520 ; =============== S U B R O U T I N E =======================================
.text:00410520
.text:00410520
.text:00410520 ; int __cdecl sub_410520(int, char *, int, int, int)
.text:00410520 sub_410520      proc near               ; CODE XREF: .text:0040D603↑p
.text:00410520                                         ; .text:0040D686↑p
.text:00410520
.text:00410520 Str             = dword ptr -8Ch
.text:00410520 var_88          = dword ptr -88h
.text:00410520 var_84          = dword ptr -84h
.text:00410520 var_80          = dword ptr -80h
.text:00410520 var_7C          = dword ptr -7Ch
.text:00410520 var_78          = dword ptr -78h
.text:00410520 var_74          = dword ptr -74h
.text:00410520 var_70          = dword ptr -70h
.text:00410520 var_6C          = dword ptr -6Ch
.text:00410520 var_4D          = byte ptr -4Dh
.text:00410520 var_4C          = dword ptr -4Ch
.text:00410520 var_48          = dword ptr -48h
.text:00410520 var_44          = dword ptr -44h
.text:00410520 var_40          = dword ptr -40h
.text:00410520 var_3C          = dword ptr -3Ch
.text:00410520 var_38          = dword ptr -38h
.text:00410520 var_34          = dword ptr -34h
.text:00410520 var_30          = dword ptr -30h
.text:00410520 var_2C          = dword ptr -2Ch
.text:00410520 Block           = dword ptr -28h
.text:00410520 var_24          = dword ptr -24h
.text:00410520 arg_0           = dword ptr  4
.text:00410520 arg_4           = dword ptr  8
.text:00410520 arg_8           = dword ptr  0Ch
.text:00410520 arg_C           = dword ptr  10h
.text:00410520 arg_10          = dword ptr  14h
.text:00410520
.text:00410520                 push    ebp
.text:00410521                 push    edi
.text:00410522                 push    esi
.text:00410523                 push    ebx
.text:00410524                 sub     esp, 7Ch
.text:00410527                 mov     ebx, [esp+8Ch+arg_0]
.text:0041052E                 mov     edx, [esp+8Ch+arg_4]
.text:00410535                 mov     ebp, [esp+8Ch+arg_8]
.text:0041053C                 mov     esi, [esp+8Ch+arg_10]
.text:00410543                 mov     [esp+8Ch+Str], edx ; Str
.text:00410546                 call    strlen
.text:0041054B                 test    byte ptr [ebx+1Ch], 10h
.text:0041054F                 mov     edi, eax
.text:00410551                 mov     [esp+8Ch+var_4D], 0
.text:00410556                 jnz     short loc_410570
.text:00410558                 test    ebp, ebp
.text:0041055A                 jz      short loc_410570
.text:0041055C                 mov     [esp+8Ch+var_4D], 1
.text:00410561                 jmp     short loc_410570
.text:00410561 ; ---------------------------------------------------------------------------
.text:00410563                 align 10h
.text:00410570
.text:00410570 loc_410570:                             ; CODE XREF: sub_410520+36↑j
.text:00410570                                         ; sub_410520+3A↑j ...
.text:00410570                 mov     edx, [ebx]
.text:00410572                 mov     [esp+8Ch+var_4C], edx
.text:00410576                 mov     ecx, [ebx+4]
.text:00410579                 mov     [esp+8Ch+var_48], ecx
.text:0041057D                 mov     edx, [ebx+8]
.text:00410580                 mov     [esp+8Ch+var_44], edx
.text:00410584                 mov     ecx, [ebx+0Ch]
.text:00410587                 mov     [esp+8Ch+var_40], ecx
.text:0041058B                 mov     edx, [ebx+10h]
.text:0041058E                 mov     [esp+8Ch+var_3C], edx
.text:00410592                 mov     ecx, [ebx+14h]
.text:00410595                 mov     [esp+8Ch+var_38], ecx
.text:00410599                 mov     edx, [ebx+18h]
.text:0041059C                 mov     [esp+8Ch+var_34], edx
.text:004105A0                 mov     ecx, [ebx+1Ch]
.text:004105A3                 mov     edx, esi
.text:004105A5                 shr     esi, 1
.text:004105A7                 and     dl, 1
.text:004105AA                 mov     eax, esi
.text:004105AC                 mov     [esp+8Ch+var_30], ecx
.text:004105B0                 shl     dl, 5
.text:004105B3                 and     al, 1
.text:004105B5                 movzx   ebx, byte ptr [esp+8Ch+var_30]
.text:004105BA                 shl     al, 6
.text:004105BD                 and     bl, 9Fh
.text:004105C0                 or      bl, dl
.text:004105C2                 or      bl, al
.text:004105C4                 and     bl, 0F9h
.text:004105C7                 or      bl, 4
.text:004105CA                 cmp     [esp+8Ch+var_4D], 0
.text:004105CF                 mov     byte ptr [esp+8Ch+var_30], bl
.text:004105D3                 jnz     loc_410686
.text:004105D9
.text:004105D9 loc_4105D9:                             ; CODE XREF: sub_410520+18F↓j
.text:004105D9                 movzx   ecx, [esp+8Ch+var_4D]
.text:004105DE                 lea     esi, [esp+8Ch+var_2C]
.text:004105E2                 mov     [esp+8Ch+var_6C], edi
.text:004105E6                 lea     ebx, [esp+8Ch+var_4C]
.text:004105EA                 mov     [esp+8Ch+var_74], edi
.text:004105EE                 mov     [esp+8Ch+var_78], 0
.text:004105F6                 xor     cl, 1
.text:004105F9                 movzx   edx, cl
.text:004105FC                 mov     [esp+8Ch+var_7C], edi
.text:00410600                 mov     ecx, [esp+8Ch+arg_4]
.text:00410607                 dec     edx
.text:00410608                 mov     [esp+8Ch+var_84], 0
.text:00410610                 and     esi, edx
.text:00410612                 mov     [esp+8Ch+var_70], esi
.text:00410616                 mov     [esp+8Ch+var_80], ecx
.text:0041061A                 mov     [esp+8Ch+var_88], 0
.text:00410622                 mov     [esp+8Ch+Str], ebx
.text:00410625                 call    sub_413CE0
.text:0041062A                 cmp     [esp+8Ch+var_4D], 0
.text:0041062F                 mov     esi, eax
.text:00410631                 jz      short loc_410671
.text:00410633                 test    eax, eax
.text:00410635                 js      short loc_410680
.text:00410637                 xor     edx, edx
.text:00410639                 cmp     edx, ebp
.text:0041063B                 jnb     short loc_410680
.text:0041063D                 mov     ecx, [esp+8Ch+Block]
.text:00410641                 mov     ebx, [esp+8Ch+var_24]
.text:00410645                 lea     esi, [esi+0]
.text:00410649                 lea     edi, [edi+0]
.text:00410650
.text:00410650 loc_410650:                             ; CODE XREF: sub_410520+147↓j
.text:00410650                 mov     eax, [ecx+edx*4]
.text:00410653                 mov     edi, [esp+8Ch+arg_C]
.text:0041065A                 mov     [edi+edx*8], eax
.text:0041065D                 mov     eax, [ebx+edx*4]
.text:00410660                 mov     [edi+edx*8+4], eax
.text:00410664                 inc     edx
.text:00410665                 cmp     edx, ebp
.text:00410667                 jb      short loc_410650
.text:00410669
.text:00410669 loc_410669:                             ; CODE XREF: sub_410520+164↓j
.text:00410669                 mov     [esp+8Ch+Str], ecx ; Block
.text:0041066C                 call    free
.text:00410671
.text:00410671 loc_410671:                             ; CODE XREF: sub_410520+111↑j
.text:00410671                 mov     eax, esi
.text:00410673                 shr     eax, 1Fh
.text:00410676
.text:00410676 loc_410676:                             ; CODE XREF: sub_410520+186↓j
.text:00410676                 add     esp, 7Ch
.text:00410679                 pop     ebx
.text:0041067A                 pop     esi
.text:0041067B                 pop     edi
.text:0041067C                 pop     ebp
.text:0041067D                 retn
.text:0041067D ; ---------------------------------------------------------------------------
.text:0041067E                 align 10h
.text:00410680
.text:00410680 loc_410680:                             ; CODE XREF: sub_410520+115↑j
.text:00410680                                         ; sub_410520+11B↑j
.text:00410680                 mov     ecx, [esp+8Ch+Block]
.text:00410684                 jmp     short loc_410669
.text:00410686 ; ---------------------------------------------------------------------------
.text:00410686
.text:00410686 loc_410686:                             ; CODE XREF: sub_410520+B3↑j
.text:00410686                 mov     [esp+8Ch+var_2C], ebp
.text:0041068A                 lea     esi, ds:0[ebp*8]
.text:00410691                 mov     [esp+8Ch+Str], esi ; Size
.text:00410694                 call    malloc
.text:00410699                 mov     [esp+8Ch+Block], eax
.text:0041069D                 mov     ecx, eax
.text:0041069F                 test    ecx, ecx
.text:004106A1                 mov     eax, 1
.text:004106A6                 jz      short loc_410676
.text:004106A8                 lea     eax, [ecx+ebp*4]
.text:004106AB                 mov     [esp+8Ch+var_24], eax
.text:004106AF                 jmp     loc_4105D9
.text:004106AF sub_410520      endp
.text:004106AF
.text:004106AF ; ---------------------------------------------------------------------------
.text:004106B4                 align 10h
.text:004106C0                 mov     eax, ds:dword_420780
.text:004106C5                 mov     ecx, [esp+4]
.text:004106C9                 mov     ds:dword_420780, ecx
.text:004106CF                 retn
.text:004106D0 ; ---------------------------------------------------------------------------
.text:004106D0                 push    ebx
.text:004106D1                 mov     ebx, [esp+10h]
.text:004106D5                 mov     edx, [esp+8]
.text:004106D9                 mov     ecx, [esp+0Ch]
.text:004106DD                 test    ebx, ebx
.text:004106DF                 jz      short loc_410700
.text:004106E1                 movzx   eax, byte ptr [edx+1Ch]
.text:004106E5                 and     al, 0F9h
.text:004106E7                 or      al, 2
.text:004106E9                 mov     [edx+1Ch], al
.text:004106EC                 mov     edx, [esp+14h]
.text:004106F0                 mov     [ecx], ebx
.text:004106F2                 mov     [ecx+4], edx
.text:004106F5                 mov     edx, [esp+18h]
.text:004106F9                 mov     [ecx+8], edx
.text:004106FC
.text:004106FC loc_4106FC:                             ; CODE XREF: .text:00410718↓j
.text:004106FC                 pop     ebx
.text:004106FD                 retn
.text:004106FD ; ---------------------------------------------------------------------------
.text:004106FE                 align 10h
.text:00410700
.text:00410700 loc_410700:                             ; CODE XREF: .text:004106DF↑j
.text:00410700                 and     byte ptr [edx+1Ch], 0F9h
.text:00410704                 mov     dword ptr [ecx], 0
.text:0041070A                 mov     dword ptr [ecx+8], 0
.text:00410711                 mov     dword ptr [ecx+4], 0
.text:00410718                 jmp     short loc_4106FC
.text:00410718 ; ---------------------------------------------------------------------------
.text:0041071A                 align 10h
.text:00410720                 sub     esp, 2Ch
.text:00410723                 mov     edx, [esp+44h]
.text:00410727                 mov     dword ptr [esp+8], 0
.text:0041072F                 mov     ecx, [esp+38h]
.text:00410733                 mov     dword ptr [esp+4], 0
.text:0041073B                 mov     [esp+1Ch], edx
.text:0041073F                 mov     edx, [esp+40h]
.text:00410743                 mov     [esp+20h], ecx
.text:00410747                 mov     [esp+10h], ecx
.text:0041074B                 mov     [esp+18h], edx
.text:0041074F                 mov     edx, [esp+3Ch]
.text:00410753                 mov     [esp+14h], edx
.text:00410757                 mov     edx, [esp+34h]
.text:0041075B                 mov     [esp+0Ch], edx
.text:0041075F                 mov     edx, [esp+30h]
.text:00410763                 mov     [esp], edx
.text:00410766                 call    sub_413CE0
.text:0041076B                 add     esp, 2Ch
.text:0041076E                 retn
.text:0041076E ; ---------------------------------------------------------------------------
.text:0041076F                 align 10h
.text:00410770                 jmp     sub_413CE0
.text:00410770 ; ---------------------------------------------------------------------------
.text:00410775                 align 10h
.text:00410780                 sub     esp, 2Ch
.text:00410783                 mov     edx, [esp+40h]
.text:00410787                 mov     dword ptr [esp+8], 0
.text:0041078F                 mov     ecx, [esp+38h]
.text:00410793                 mov     dword ptr [esp+4], 0
.text:0041079B                 mov     [esp+18h], edx
.text:0041079F                 mov     edx, [esp+3Ch]
.text:004107A3                 mov     [esp+1Ch], ecx
.text:004107A7                 mov     [esp+10h], ecx
.text:004107AB                 mov     [esp+14h], edx
.text:004107AF                 mov     edx, [esp+34h]
.text:004107B3                 mov     [esp+0Ch], edx
.text:004107B7                 mov     edx, [esp+30h]
.text:004107BB                 mov     [esp], edx
.text:004107BE                 call    sub_40DA60
.text:004107C3                 add     esp, 2Ch
.text:004107C6                 retn
.text:004107C6 ; ---------------------------------------------------------------------------
.text:004107C7                 align 10h
.text:004107D0                 jmp     sub_40DA60
.text:004107D0 ; ---------------------------------------------------------------------------
.text:004107D5                 align 10h
.text:004107E0                 sub     esp, 1Ch
.text:004107E3                 mov     ecx, [esp+28h]
.text:004107E7                 movzx   edx, byte ptr [ecx+1Ch]
.text:004107EB                 and     dl, 0E9h
.text:004107EE                 or      dl, 80h
.text:004107F1                 mov     [ecx+1Ch], dl
.text:004107F4                 mov     edx, [esp+24h]
.text:004107F8                 mov     [esp+0Ch], ecx
.text:004107FC                 mov     ecx, ds:dword_420780
.text:00410802                 mov     [esp+4], edx
.text:00410806                 mov     edx, [esp+20h]
.text:0041080A                 mov     [esp+8], ecx
.text:0041080E                 mov     [esp], edx
.text:00410811                 call    sub_410970
.text:00410816                 test    eax, eax
.text:00410818                 jz      short loc_410834
.text:0041081A                 mov     ecx, ds:dword_410300[eax*4]
.text:00410821                 add     ecx, offset aSuccess ; "Success"
.text:00410827                 mov     [esp+20h], ecx
.text:0041082B                 add     esp, 1Ch
.text:0041082E                 jmp     ds:libintl_gettext
.text:00410834 ; ---------------------------------------------------------------------------
.text:00410834
.text:00410834 loc_410834:                             ; CODE XREF: .text:00410818↑j
.text:00410834                 xor     eax, eax
.text:00410836                 add     esp, 1Ch
.text:00410839                 retn
.text:00410839 ; ---------------------------------------------------------------------------
.text:0041083A                 align 10h
.text:00410840                 sub     esp, 1Ch
.text:00410843                 mov     eax, [esp+20h]
.text:00410847                 mov     [esp+14h], edi
.text:0041084B                 mov     edi, [esp+2Ch]
.text:0041084F                 cmp     eax, 10h
.text:00410852                 mov     [esp+18h], ebp
.text:00410856                 mov     ebp, [esp+28h]
.text:0041085A                 mov     [esp+0Ch], ebx
.text:0041085E                 mov     [esp+10h], esi
.text:00410862                 ja      short loc_4108D8
.text:00410864                 mov     edx, ds:dword_410300[eax*4]
.text:0041086B                 add     edx, offset aSuccess ; "Success"
.text:00410871                 mov     [esp], edx
.text:00410874                 call    ds:libintl_gettext
.text:0041087A                 mov     [esp], eax
.text:0041087D                 mov     ebx, eax
.text:0041087F                 call    strlen
.text:00410884                 test    edi, edi
.text:00410886                 lea     esi, [eax+1]
.text:00410889                 jz      short loc_4108B0
.text:0041088B                 cmp     esi, edi
.text:0041088D                 jbe     short loc_4108C6
.text:0041088F                 mov     [esp+4], ebx
.text:00410893                 lea     edx, [edi-1]
.text:00410896                 mov     [esp+8], edx
.text:0041089A                 mov     [esp], ebp
.text:0041089D                 call    sub_418D60
.text:004108A2                 mov     byte ptr [eax], 0
.text:004108A5                 lea     esi, [esi+0]
.text:004108A9                 lea     edi, [edi+0]
.text:004108B0
.text:004108B0 loc_4108B0:                             ; CODE XREF: .text:00410889↑j
.text:004108B0                                         ; .text:004108D6↓j
.text:004108B0                 mov     eax, esi
.text:004108B2                 mov     ebx, [esp+0Ch]
.text:004108B6                 mov     esi, [esp+10h]
.text:004108BA                 mov     edi, [esp+14h]
.text:004108BE                 mov     ebp, [esp+18h]
.text:004108C2                 add     esp, 1Ch
.text:004108C5                 retn
.text:004108C6 ; ---------------------------------------------------------------------------
.text:004108C6
.text:004108C6 loc_4108C6:                             ; CODE XREF: .text:0041088D↑j
.text:004108C6                 mov     [esp+8], esi
.text:004108CA                 mov     [esp+4], ebx
.text:004108CE                 mov     [esp], ebp
.text:004108D1                 call    memcpy
.text:004108D6                 jmp     short loc_4108B0
.text:004108D8 ; ---------------------------------------------------------------------------
.text:004108D8
.text:004108D8 loc_4108D8:                             ; CODE XREF: .text:00410862↑j
.text:004108D8                 call    abort
.text:004108D8 ; ---------------------------------------------------------------------------
.text:004108DD                 align 10h
.text:004108E0
.text:004108E0 ; =============== S U B R O U T I N E =======================================
.text:004108E0
.text:004108E0
.text:004108E0 sub_4108E0      proc near               ; CODE XREF: .text:0040D6A1↑p
.text:004108E0                                         ; .text:0040D6B7↑p
.text:004108E0
.text:004108E0 Block           = dword ptr -0Ch
.text:004108E0 var_4           = dword ptr -4
.text:004108E0 arg_0           = dword ptr  4
.text:004108E0
.text:004108E0                 sub     esp, 0Ch
.text:004108E3                 mov     [esp+0Ch+var_4], ebx
.text:004108E7                 mov     ebx, [esp+0Ch+arg_0]
.text:004108EB                 mov     eax, [ebx]
.text:004108ED                 test    eax, eax
.text:004108EF                 jnz     short loc_410950
.text:004108F1
.text:004108F1 loc_4108F1:                             ; CODE XREF: sub_4108E0+78↓j
.text:004108F1                 mov     dword ptr [ebx], 0
.text:004108F7                 mov     eax, [ebx+10h]
.text:004108FA                 mov     dword ptr [ebx+4], 0
.text:00410901                 mov     dword ptr [ebx+8], 0
.text:00410908                 test    eax, eax
.text:0041090A                 jnz     short loc_410940
.text:0041090C
.text:0041090C loc_41090C:                             ; CODE XREF: sub_4108E0+68↓j
.text:0041090C                 and     byte ptr [ebx+1Ch], 0F7h
.text:00410910                 mov     eax, [ebx+14h]
.text:00410913                 mov     dword ptr [ebx+10h], 0
.text:0041091A                 test    eax, eax
.text:0041091C                 jnz     short loc_410930
.text:0041091E
.text:0041091E loc_41091E:                             ; CODE XREF: sub_4108E0+58↓j
.text:0041091E                 mov     dword ptr [ebx+14h], 0
.text:00410925                 mov     ebx, [esp+0Ch+var_4]
.text:00410929                 add     esp, 0Ch
.text:0041092C                 retn
.text:0041092C ; ---------------------------------------------------------------------------
.text:0041092D                 align 10h
.text:00410930
.text:00410930 loc_410930:                             ; CODE XREF: sub_4108E0+3C↑j
.text:00410930                 mov     [esp+0Ch+Block], eax ; Block
.text:00410933                 call    free
.text:00410938                 jmp     short loc_41091E
.text:00410938 ; ---------------------------------------------------------------------------
.text:0041093A                 align 10h
.text:00410940
.text:00410940 loc_410940:                             ; CODE XREF: sub_4108E0+2A↑j
.text:00410940                 mov     [esp+0Ch+Block], eax ; Block
.text:00410943                 call    free
.text:00410948                 jmp     short loc_41090C
.text:00410948 ; ---------------------------------------------------------------------------
.text:0041094A                 align 10h
.text:00410950
.text:00410950 loc_410950:                             ; CODE XREF: sub_4108E0+F↑j
.text:00410950                 mov     [esp+0Ch+Block], eax ; Block
.text:00410953                 call    free
.text:00410958                 jmp     short loc_4108F1
.text:00410958 sub_4108E0      endp
.text:00410958
.text:00410958 ; ---------------------------------------------------------------------------
.text:0041095A aLower          db 'lower',0            ; DATA XREF: sub_410970+1EEB↓o
.text:00410960 aUpper          db 'upper',0            ; DATA XREF: sub_410970+1F11↓o
.text:00410966                 align 10h
.text:00410970
.text:00410970 ; =============== S U B R O U T I N E =======================================
.text:00410970
.text:00410970
.text:00410970 sub_410970      proc near               ; CODE XREF: sub_4103A0+AB↑p
.text:00410970                                         ; .text:00410811↑p
.text:00410970
.text:00410970 Size            = dword ptr -97Ch
.text:00410970 var_978         = dword ptr -978h
.text:00410970 var_974         = dword ptr -974h
.text:00410970 var_970         = dword ptr -970h
.text:00410970 var_96C         = dword ptr -96Ch
.text:00410970 var_968         = dword ptr -968h
.text:00410970 var_950         = dword ptr -950h
.text:00410970 var_940         = dword ptr -940h
.text:00410970 var_93C         = dword ptr -93Ch
.text:00410970 var_938         = dword ptr -938h
.text:00410970 var_934         = dword ptr -934h
.text:00410970 var_930         = dword ptr -930h
.text:00410970 Type            = word ptr -92Ch
.text:00410970 var_926         = byte ptr -926h
.text:00410970 var_925         = byte ptr -925h
.text:00410970 var_924         = dword ptr -924h
.text:00410970 var_91E         = byte ptr -91Eh
.text:00410970 var_91D         = byte ptr -91Dh
.text:00410970 var_91C         = byte ptr -91Ch
.text:00410970 var_90C         = dword ptr -90Ch
.text:00410970 var_908         = dword ptr -908h
.text:00410970 var_904         = dword ptr -904h
.text:00410970 var_900         = dword ptr -900h
.text:00410970 var_8FC         = dword ptr -8FCh
.text:00410970 var_8F8         = dword ptr -8F8h
.text:00410970 var_8F4         = dword ptr -8F4h
.text:00410970 var_8F0         = dword ptr -8F0h
.text:00410970 var_8EC         = byte ptr -8ECh
.text:00410970 var_8D0         = dword ptr -8D0h
.text:00410970 var_8CC         = byte ptr -8CCh
.text:00410970 var_84C         = byte ptr -84Ch
.text:00410970 name            = byte ptr -83Ch
.text:00410970 Block           = dword ptr -2Ch
.text:00410970 var_28          = dword ptr -28h
.text:00410970 var_24          = dword ptr -24h
.text:00410970 arg_0           = dword ptr  4
.text:00410970 arg_4           = dword ptr  8
.text:00410970 arg_8           = dword ptr  0Ch
.text:00410970 arg_C           = dword ptr  10h
.text:00410970
.text:00410970                 push    ebp
.text:00410971                 mov     ebp, 0Ch
.text:00410976                 push    edi
.text:00410977                 push    esi
.text:00410978                 push    ebx
.text:00410979                 sub     esp, 96Ch
.text:0041097F                 mov     eax, [esp+97Ch+arg_0]
.text:00410986                 mov     [esp+97Ch+var_900], 0
.text:0041098E                 mov     ecx, [esp+97Ch+arg_C]
.text:00410995                 mov     ebx, [esp+97Ch+arg_4]
.text:0041099C                 mov     [esp+97Ch+var_8D0], eax
.text:004109A3                 mov     edx, [ecx+14h]
.text:004109A6                 add     eax, ebx
.text:004109A8                 mov     [esp+97Ch+var_8F4], eax
.text:004109AF                 xor     eax, eax
.text:004109B1                 mov     [esp+97Ch+var_8F8], edx
.text:004109B8                 mov     [esp+97Ch+var_8FC], eax
.text:004109BF                 mov     [esp+97Ch+var_908], 0
.text:004109C7                 mov     [esp+97Ch+var_90C], 0
.text:004109CF                 mov     [esp+97Ch+Size], 280h ; Size
.text:004109D6                 call    malloc
.text:004109DB                 mov     [esp+97Ch+Block], eax
.text:004109E2                 test    eax, eax
.text:004109E4                 jz      loc_410D86
.text:004109EA                 mov     edi, [esp+97Ch+arg_C]
.text:004109F1                 xor     edx, edx
.text:004109F3                 mov     ecx, 20h ; ' '
.text:004109F8                 mov     [esp+97Ch+var_28], ecx
.text:004109FF                 mov     ebp, [esp+97Ch+arg_8]
.text:00410A06                 mov     [esp+97Ch+var_24], edx
.text:00410A0D                 and     byte ptr [edi+1Ch], 97h
.text:00410A11                 mov     [edi+0Ch], ebp
.text:00410A14                 mov     dword ptr [edi+8], 0
.text:00410A1B                 mov     esi, ds:dword_420280
.text:00410A21                 mov     dword ptr [edi+18h], 0
.text:00410A28                 test    esi, esi
.text:00410A2A                 jz      loc_413C61
.text:00410A30
.text:00410A30 loc_410A30:                             ; CODE XREF: sub_410970+3351↓j
.text:00410A30                 mov     ebx, [esp+97Ch+arg_C]
.text:00410A37                 mov     edx, [ebx+4]
.text:00410A3A                 test    edx, edx
.text:00410A3C                 jnz     loc_413C52
.text:00410A42                 mov     eax, [ebx]
.text:00410A44                 test    eax, eax
.text:00410A46                 jz      loc_413C38
.text:00410A4C                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:00410A54                 mov     [esp+97Ch+Size], eax ; Block
.text:00410A57                 call    realloc
.text:00410A5C                 mov     [ebx], eax
.text:00410A5E
.text:00410A5E loc_410A5E:                             ; CODE XREF: sub_410970+32DD↓j
.text:00410A5E                 mov     esi, [esp+97Ch+arg_C]
.text:00410A65                 mov     edi, [esi]
.text:00410A67                 test    edi, edi
.text:00410A69                 jz      loc_413C27
.text:00410A6F                 mov     eax, [esp+97Ch+arg_C]
.text:00410A76                 mov     dword ptr [eax+4], 20h ; ' '
.text:00410A7D
.text:00410A7D loc_410A7D:                             ; CODE XREF: sub_410970+32EC↓j
.text:00410A7D                 mov     [esp+97Ch+var_950], edi
.text:00410A81                 mov     [esp+97Ch+var_904], edi
.text:00410A85                 mov     edi, [esp+97Ch+var_8D0]
.text:00410A8C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00410A93                 jz      loc_410DE0
.text:00410A99
.text:00410A99 loc_410A99:                             ; CODE XREF: sub_410970+43D↓j
.text:00410A99                 movzx   ebx, byte ptr [edi]
.text:00410A9C                 inc     edi
.text:00410A9D                 mov     edx, [esp+97Ch+var_8F8]
.text:00410AA4                 mov     [esp+97Ch+var_8D0], edi
.text:00410AAB                 test    edx, edx
.text:00410AAD                 mov     [esp+97Ch+var_8EC], bl
.text:00410AB4                 jz      short loc_410ACB
.text:00410AB6                 mov     edi, [esp+97Ch+var_8F8]
.text:00410ABD                 movzx   ecx, bl
.text:00410AC0                 movzx   ebx, byte ptr [ecx+edi]
.text:00410AC4                 mov     [esp+97Ch+var_8EC], bl
.text:00410ACB
.text:00410ACB loc_410ACB:                             ; CODE XREF: sub_410970+144↑j
.text:00410ACB                 movzx   eax, [esp+97Ch+var_8EC]
.text:00410AD3                 sub     eax, 0Ah        ; switch 115 cases
.text:00410AD6                 cmp     eax, 72h
.text:00410AD9                 ja      def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00410ADF                 jmp     ds:jpt_410ADF[eax*4] ; switch jump
.text:00410ADF ; ---------------------------------------------------------------------------
.text:00410AE6                 align 4
.text:00410AE8 jpt_410ADF      dd offset loc_4111D5, offset def_410ADF, offset def_410ADF
.text:00410AE8                                         ; DATA XREF: sub_410970+16F↑r
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF ; jump table for switch statement
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset loc_41140D
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset loc_41151C, offset loc_411706, offset loc_4119D0
.text:00410AE8                 dd offset loc_412044, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset loc_411F60, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset loc_412044
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset loc_41205A, offset loc_412BE6, offset def_410ADF
.text:00410AE8                 dd offset loc_410CB4, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset def_410ADF
.text:00410AE8                 dd offset def_410ADF, offset def_410ADF, offset loc_413BF4
.text:00410AE8                 dd offset loc_413C12
.text:00410CB4 ; ---------------------------------------------------------------------------
.text:00410CB4
.text:00410CB4 loc_410CB4:                             ; CODE XREF: sub_410970+16F↑j
.text:00410CB4                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00410CB4                 mov     esi, [esp+97Ch+arg_0] ; jumptable 00410ADF case 94
.text:00410CBB                 mov     edx, [esp+97Ch+var_8D0]
.text:00410CC2                 inc     esi
.text:00410CC3                 cmp     edx, esi
.text:00410CC5                 jz      short loc_410CD5
.text:00410CC7                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00410CCF                 jz      loc_410F1D
.text:00410CD5
.text:00410CD5 loc_410CD5:                             ; CODE XREF: sub_410970+355↑j
.text:00410CD5                                         ; sub_410970+3D7↓j ...
.text:00410CD5                 mov     eax, [esp+97Ch+arg_C]
.text:00410CDC                 mov     ebp, [esp+97Ch+var_950]
.text:00410CE0                 mov     edi, [eax]
.text:00410CE2                 mov     edx, [eax+4]
.text:00410CE5                 sub     ebp, edi
.text:00410CE7                 inc     ebp
.text:00410CE8                 cmp     ebp, edx
.text:00410CEA                 jbe     loc_410D93
.text:00410CF0                 cmp     edx, 10000h
.text:00410CF6                 mov     ebp, 0Fh
.text:00410CFB                 jz      loc_410D86
.text:00410D01                 lea     ebx, [edx+edx]
.text:00410D04                 mov     edx, [esp+97Ch+arg_C]
.text:00410D0B                 cmp     ebx, 10000h
.text:00410D11                 mov     [edx+4], ebx
.text:00410D14                 jbe     short loc_410D1D
.text:00410D16                 mov     dword ptr [edx+4], 10000h
.text:00410D1D
.text:00410D1D loc_410D1D:                             ; CODE XREF: sub_410970+3A4↑j
.text:00410D1D                 mov     ebp, [esp+97Ch+arg_C]
.text:00410D24                 mov     esi, [ebp+4]
.text:00410D27                 mov     ebp, 0Ch
.text:00410D2C                 mov     [esp+97Ch+Size], edi ; Block
.text:00410D2F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00410D33                 call    realloc
.text:00410D38                 mov     edx, [esp+97Ch+arg_C]
.text:00410D3F                 test    eax, eax
.text:00410D41                 mov     [edx], eax
.text:00410D43                 jz      short loc_410D86
.text:00410D45                 cmp     edi, eax
.text:00410D47                 jz      short loc_410CD5
.text:00410D49                 mov     ecx, [esp+97Ch+var_908]
.text:00410D4D                 sub     eax, edi
.text:00410D4F                 add     [esp+97Ch+var_950], eax
.text:00410D53                 add     [esp+97Ch+var_904], eax
.text:00410D57                 test    ecx, ecx
.text:00410D59                 jz      short loc_410D5F
.text:00410D5B                 add     [esp+97Ch+var_908], eax
.text:00410D5F
.text:00410D5F loc_410D5F:                             ; CODE XREF: sub_410970+3E9↑j
.text:00410D5F                 mov     ebx, [esp+97Ch+var_900]
.text:00410D63                 test    ebx, ebx
.text:00410D65                 jz      short loc_410D6B
.text:00410D67                 add     [esp+97Ch+var_900], eax
.text:00410D6B
.text:00410D6B loc_410D6B:                             ; CODE XREF: sub_410970+3F5↑j
.text:00410D6B                 mov     edi, [esp+97Ch+var_8FC]
.text:00410D72                 test    edi, edi
.text:00410D74                 jz      loc_410CD5
.text:00410D7A                 add     [esp+97Ch+var_8FC], eax
.text:00410D81                 jmp     loc_410CD5
.text:00410D86 ; ---------------------------------------------------------------------------
.text:00410D86
.text:00410D86 loc_410D86:                             ; CODE XREF: sub_410970+74↑j
.text:00410D86                                         ; sub_410970+38B↑j ...
.text:00410D86                 add     esp, 96Ch
.text:00410D8C                 mov     eax, ebp
.text:00410D8E                 pop     ebx
.text:00410D8F                 pop     esi
.text:00410D90                 pop     edi
.text:00410D91                 pop     ebp
.text:00410D92                 retn
.text:00410D93 ; ---------------------------------------------------------------------------
.text:00410D93
.text:00410D93 loc_410D93:                             ; CODE XREF: sub_410970+37A↑j
.text:00410D93                 mov     edi, [esp+97Ch+var_950]
.text:00410D97                 mov     byte ptr [edi], 9
.text:00410D9A
.text:00410D9A loc_410D9A:                             ; CODE XREF: sub_410970+16CF↓j
.text:00410D9A                                         ; sub_410970+2518↓j ...
.text:00410D9A                 inc     edi
.text:00410D9B
.text:00410D9B loc_410D9B:                             ; CODE XREF: sub_410970+1496↓j
.text:00410D9B                 mov     [esp+97Ch+var_950], edi
.text:00410D9F
.text:00410D9F loc_410D9F:                             ; CODE XREF: sub_410970+7DA↓j
.text:00410D9F                                         ; sub_410970+A98↓j ...
.text:00410D9F                 mov     edi, [esp+97Ch+var_8D0]
.text:00410DA6                 cmp     edi, [esp+97Ch+var_8F4]
.text:00410DAD                 jnz     loc_410A99
.text:00410DB3                 mov     ebx, [esp+97Ch+var_908]
.text:00410DB7                 test    ebx, ebx
.text:00410DB9                 jz      short loc_410DE0
.text:00410DBB                 mov     [esp+97Ch+Size], 0Eh
.text:00410DC2                 mov     ebp, [esp+97Ch+var_950]
.text:00410DC6                 mov     edx, [esp+97Ch+var_908]
.text:00410DCA                 mov     esi, [esp+97Ch+var_908]
.text:00410DCE                 sub     ebp, edx
.text:00410DD0                 sub     ebp, 3
.text:00410DD3                 mov     [esp+97Ch+var_974], ebp
.text:00410DD7                 mov     [esp+97Ch+var_978], esi
.text:00410DDB                 call    sub_40D740
.text:00410DE0
.text:00410DE0 loc_410DE0:                             ; CODE XREF: sub_410970+123↑j
.text:00410DE0                                         ; sub_410970+449↑j
.text:00410DE0                 mov     eax, [esp+97Ch+var_24]
.text:00410DE7                 test    eax, eax
.text:00410DE9                 jnz     loc_410F04
.text:00410DEF                 test    [esp+97Ch+arg_8], 40000h
.text:00410DFA                 jz      loc_410ED3
.text:00410E00                 mov     ecx, [esp+97Ch+arg_C]
.text:00410E07                 mov     ebp, [esp+97Ch+var_950]
.text:00410E0B                 mov     ebx, [ecx]
.text:00410E0D                 mov     edx, [ecx+4]
.text:00410E10                 sub     ebp, ebx
.text:00410E12                 mov     edi, ebx
.text:00410E14                 inc     ebp
.text:00410E15                 cmp     ebp, edx
.text:00410E17                 jbe     loc_410EC7
.text:00410E1D
.text:00410E1D loc_410E1D:                             ; CODE XREF: sub_410970+551↓j
.text:00410E1D                 cmp     edx, 10000h
.text:00410E23                 mov     ebp, 0Fh
.text:00410E28                 jz      loc_410D86
.text:00410E2E                 mov     esi, [esp+97Ch+arg_C]
.text:00410E35                 lea     ebp, [edx+edx]
.text:00410E38                 cmp     ebp, 10000h
.text:00410E3E                 mov     [esi+4], ebp
.text:00410E41                 jbe     short loc_410E4A
.text:00410E43                 mov     dword ptr [esi+4], 10000h
.text:00410E4A
.text:00410E4A loc_410E4A:                             ; CODE XREF: sub_410970+4D1↑j
.text:00410E4A                 mov     eax, [esp+97Ch+arg_C]
.text:00410E51                 mov     ebp, 0Ch
.text:00410E56                 mov     esi, [eax+4]
.text:00410E59                 mov     [esp+97Ch+Size], edi ; Block
.text:00410E5C                 mov     [esp+97Ch+var_978], esi ; Size
.text:00410E60                 call    realloc
.text:00410E65                 mov     edx, [esp+97Ch+arg_C]
.text:00410E6C                 test    eax, eax
.text:00410E6E                 mov     [edx], eax
.text:00410E70                 jz      loc_410D86
.text:00410E76                 cmp     ebx, eax
.text:00410E78                 jz      short loc_410EAA
.text:00410E7A                 mov     edi, [esp+97Ch+var_908]
.text:00410E7E                 sub     eax, ebx
.text:00410E80                 add     [esp+97Ch+var_950], eax
.text:00410E84                 test    edi, edi
.text:00410E86                 jz      short loc_410E8C
.text:00410E88                 add     [esp+97Ch+var_908], eax
.text:00410E8C
.text:00410E8C loc_410E8C:                             ; CODE XREF: sub_410970+516↑j
.text:00410E8C                 mov     ebx, [esp+97Ch+var_900]
.text:00410E90                 test    ebx, ebx
.text:00410E92                 jz      short loc_410E98
.text:00410E94                 add     [esp+97Ch+var_900], eax
.text:00410E98
.text:00410E98 loc_410E98:                             ; CODE XREF: sub_410970+522↑j
.text:00410E98                 mov     ecx, [esp+97Ch+var_8FC]
.text:00410E9F                 test    ecx, ecx
.text:00410EA1                 jz      short loc_410EAA
.text:00410EA3                 add     [esp+97Ch+var_8FC], eax
.text:00410EAA
.text:00410EAA loc_410EAA:                             ; CODE XREF: sub_410970+508↑j
.text:00410EAA                                         ; sub_410970+531↑j
.text:00410EAA                 mov     eax, [esp+97Ch+arg_C]
.text:00410EB1                 mov     ebp, [esp+97Ch+var_950]
.text:00410EB5                 mov     ebx, [eax]
.text:00410EB7                 mov     edx, [eax+4]
.text:00410EBA                 sub     ebp, ebx
.text:00410EBC                 mov     edi, ebx
.text:00410EBE                 inc     ebp
.text:00410EBF                 cmp     ebp, edx
.text:00410EC1                 ja      loc_410E1D
.text:00410EC7
.text:00410EC7 loc_410EC7:                             ; CODE XREF: sub_410970+4A7↑j
.text:00410EC7                 mov     edx, [esp+97Ch+var_950]
.text:00410ECB                 mov     byte ptr [edx], 1
.text:00410ECE                 inc     edx
.text:00410ECF                 mov     [esp+97Ch+var_950], edx
.text:00410ED3
.text:00410ED3 loc_410ED3:                             ; CODE XREF: sub_410970+48A↑j
.text:00410ED3                 mov     ebp, [esp+97Ch+Block]
.text:00410EDA                 mov     [esp+97Ch+Size], ebp ; Block
.text:00410EDD                 xor     ebp, ebp
.text:00410EDF                 call    free
.text:00410EE4                 mov     ecx, [esp+97Ch+arg_C]
.text:00410EEB                 mov     esi, [esp+97Ch+arg_C]
.text:00410EF2                 mov     ebx, [ecx]
.text:00410EF4                 sub     [esp+97Ch+var_950], ebx
.text:00410EF8                 mov     edi, [esp+97Ch+var_950]
.text:00410EFC                 mov     [esi+8], edi
.text:00410EFF                 jmp     loc_410D86
.text:00410F04 ; ---------------------------------------------------------------------------
.text:00410F04
.text:00410F04 loc_410F04:                             ; CODE XREF: sub_410970+479↑j
.text:00410F04                 mov     edi, [esp+97Ch+Block]
.text:00410F0B                 mov     ebp, 8
.text:00410F10
.text:00410F10 loc_410F10:                             ; CODE XREF: sub_410970+15BC↓j
.text:00410F10                                         ; sub_410970+32C3↓j
.text:00410F10                 mov     [esp+97Ch+Size], edi ; Block
.text:00410F13
.text:00410F13 loc_410F13:                             ; CODE XREF: sub_410970+EDF↓j
.text:00410F13                                         ; sub_410970+1C4C↓j ...
.text:00410F13                 call    free
.text:00410F18                 jmp     loc_410D86
.text:00410F1D ; ---------------------------------------------------------------------------
.text:00410F1D
.text:00410F1D loc_410F1D:                             ; CODE XREF: sub_410970+35F↑j
.text:00410F1D                 mov     [esp+97Ch+var_978], edx
.text:00410F21                 mov     eax, [esp+97Ch+arg_8]
.text:00410F28                 mov     ebp, [esp+97Ch+arg_0]
.text:00410F2F                 mov     [esp+97Ch+var_974], eax
.text:00410F33                 mov     [esp+97Ch+Size], ebp
.text:00410F36                 call    sub_40D820
.text:00410F3B                 test    al, al
.text:00410F3D                 jnz     loc_410CD5
.text:00410F43
.text:00410F43 def_410ADF:                             ; CODE XREF: sub_410970+169↑j
.text:00410F43                                         ; sub_410970+16F↑j ...
.text:00410F43                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00410F4A                 test    edx, edx
.text:00410F4C                 jz      short loc_410F69
.text:00410F4E                 mov     eax, [esp+97Ch+var_8FC]
.text:00410F55                 movzx   edx, byte ptr [eax]
.text:00410F58                 movzx   ebx, dl
.text:00410F5B                 lea     ebp, [ebx+eax+1]
.text:00410F5F                 cmp     ebp, [esp+97Ch+var_950]
.text:00410F63                 jz      loc_41114F
.text:00410F69
.text:00410F69 loc_410F69:                             ; CODE XREF: sub_410970+5DC↑j
.text:00410F69                                         ; sub_410970+7E1↓j ...
.text:00410F69                 mov     edi, [esp+97Ch+var_950]
.text:00410F6D                 mov     ebp, [esp+97Ch+arg_C]
.text:00410F74                 mov     ecx, [esp+97Ch+var_950]
.text:00410F78                 mov     [esp+97Ch+var_900], edi
.text:00410F7C                 mov     edi, [ebp+0]
.text:00410F7F                 mov     edx, [ebp+4]
.text:00410F82                 sub     ecx, edi
.text:00410F84                 mov     ebx, edi
.text:00410F86                 add     ecx, 2
.text:00410F89                 cmp     ecx, edx
.text:00410F8B                 jbe     loc_411048
.text:00410F91
.text:00410F91 loc_410F91:                             ; CODE XREF: sub_410970+6D2↓j
.text:00410F91                 cmp     edx, 10000h
.text:00410F97                 mov     ebp, 0Fh
.text:00410F9C                 jz      loc_410D86
.text:00410FA2                 lea     esi, [edx+edx]
.text:00410FA5                 mov     edx, [esp+97Ch+arg_C]
.text:00410FAC                 cmp     esi, 10000h
.text:00410FB2                 mov     [edx+4], esi
.text:00410FB5                 jbe     short loc_410FBE
.text:00410FB7                 mov     dword ptr [edx+4], 10000h
.text:00410FBE
.text:00410FBE loc_410FBE:                             ; CODE XREF: sub_410970+645↑j
.text:00410FBE                 mov     eax, [esp+97Ch+arg_C]
.text:00410FC5                 mov     ebp, [eax+4]
.text:00410FC8                 mov     [esp+97Ch+Size], edi ; Block
.text:00410FCB                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00410FCF                 mov     ebp, 0Ch
.text:00410FD4                 call    realloc
.text:00410FD9                 mov     edx, [esp+97Ch+arg_C]
.text:00410FE0                 test    eax, eax
.text:00410FE2                 mov     [edx], eax
.text:00410FE4                 jz      loc_410D86
.text:00410FEA                 cmp     ebx, eax
.text:00410FEC                 jz      short loc_411022
.text:00410FEE                 sub     eax, ebx
.text:00410FF0                 mov     ebx, [esp+97Ch+var_908]
.text:00410FF4                 add     [esp+97Ch+var_950], eax
.text:00410FF8                 add     [esp+97Ch+var_904], eax
.text:00410FFC                 test    ebx, ebx
.text:00410FFE                 jz      short loc_411004
.text:00411000                 add     [esp+97Ch+var_908], eax
.text:00411004
.text:00411004 loc_411004:                             ; CODE XREF: sub_410970+68E↑j
.text:00411004                 mov     ecx, [esp+97Ch+var_900]
.text:00411008                 test    ecx, ecx
.text:0041100A                 jz      short loc_411010
.text:0041100C                 add     [esp+97Ch+var_900], eax
.text:00411010
.text:00411010 loc_411010:                             ; CODE XREF: sub_410970+69A↑j
.text:00411010                 mov     edi, [esp+97Ch+var_8FC]
.text:00411017                 test    edi, edi
.text:00411019                 jz      short loc_411022
.text:0041101B                 add     [esp+97Ch+var_8FC], eax
.text:00411022
.text:00411022 loc_411022:                             ; CODE XREF: sub_410970+67C↑j
.text:00411022                                         ; sub_410970+6A9↑j
.text:00411022                 mov     edx, [esp+97Ch+arg_C]
.text:00411029                 mov     ebp, [esp+97Ch+arg_C]
.text:00411030                 mov     esi, [esp+97Ch+var_950]
.text:00411034                 mov     edi, [edx]
.text:00411036                 mov     edx, [ebp+4]
.text:00411039                 sub     esi, edi
.text:0041103B                 add     esi, 2
.text:0041103E                 mov     ebx, edi
.text:00411040                 cmp     esi, edx
.text:00411042                 ja      loc_410F91
.text:00411048
.text:00411048 loc_411048:                             ; CODE XREF: sub_410970+61B↑j
.text:00411048                 mov     eax, [esp+97Ch+var_950]
.text:0041104C                 mov     byte ptr [eax], 2
.text:0041104F                 inc     eax
.text:00411050                 mov     byte ptr [eax], 0
.text:00411053                 mov     ecx, [esp+97Ch+arg_C]
.text:0041105A                 inc     eax
.text:0041105B                 mov     [esp+97Ch+var_950], eax
.text:0041105F                 dec     eax
.text:00411060                 mov     edi, [ecx]
.text:00411062                 mov     [esp+97Ch+var_8FC], eax
.text:00411069                 mov     edx, [ecx+4]
.text:0041106C                 mov     eax, [esp+97Ch+var_950]
.text:00411070                 mov     ebx, edi
.text:00411072                 sub     eax, edi
.text:00411074
.text:00411074 loc_411074:                             ; CODE XREF: sub_410970+7B9↓j
.text:00411074                 inc     eax
.text:00411075                 cmp     eax, edx
.text:00411077                 jbe     loc_41112E
.text:0041107D                 cmp     edx, 10000h
.text:00411083                 mov     ebp, 0Fh
.text:00411088                 jz      loc_410D86
.text:0041108E                 lea     esi, [edx+edx]
.text:00411091                 mov     edx, [esp+97Ch+arg_C]
.text:00411098                 cmp     esi, 10000h
.text:0041109E                 mov     [edx+4], esi
.text:004110A1                 jbe     short loc_4110AA
.text:004110A3                 mov     dword ptr [edx+4], 10000h
.text:004110AA
.text:004110AA loc_4110AA:                             ; CODE XREF: sub_410970+731↑j
.text:004110AA                 mov     edx, [esp+97Ch+arg_C]
.text:004110B1                 mov     ebp, [edx+4]
.text:004110B4                 mov     [esp+97Ch+Size], edi ; Block
.text:004110B7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004110BB                 mov     ebp, 0Ch
.text:004110C0                 call    realloc
.text:004110C5                 mov     edi, [esp+97Ch+arg_C]
.text:004110CC                 test    eax, eax
.text:004110CE                 mov     [edi], eax
.text:004110D0                 jz      loc_410D86
.text:004110D6                 cmp     ebx, eax
.text:004110D8                 jz      short loc_41110E
.text:004110DA                 mov     ecx, [esp+97Ch+var_908]
.text:004110DE                 sub     eax, ebx
.text:004110E0                 add     [esp+97Ch+var_950], eax
.text:004110E4                 add     [esp+97Ch+var_904], eax
.text:004110E8                 test    ecx, ecx
.text:004110EA                 jz      short loc_4110F0
.text:004110EC                 add     [esp+97Ch+var_908], eax
.text:004110F0
.text:004110F0 loc_4110F0:                             ; CODE XREF: sub_410970+77A↑j
.text:004110F0                 mov     ebx, [esp+97Ch+var_900]
.text:004110F4                 test    ebx, ebx
.text:004110F6                 jz      short loc_4110FC
.text:004110F8                 add     [esp+97Ch+var_900], eax
.text:004110FC
.text:004110FC loc_4110FC:                             ; CODE XREF: sub_410970+786↑j
.text:004110FC                 mov     esi, [esp+97Ch+var_8FC]
.text:00411103                 test    esi, esi
.text:00411105                 jz      short loc_41110E
.text:00411107                 add     [esp+97Ch+var_8FC], eax
.text:0041110E
.text:0041110E loc_41110E:                             ; CODE XREF: sub_410970+768↑j
.text:0041110E                                         ; sub_410970+795↑j ...
.text:0041110E                 mov     edx, [esp+97Ch+arg_C]
.text:00411115                 mov     ebp, [esp+97Ch+arg_C]
.text:0041111C                 mov     eax, [esp+97Ch+var_950]
.text:00411120                 mov     edi, [edx]
.text:00411122                 mov     edx, [ebp+4]
.text:00411125                 sub     eax, edi
.text:00411127                 mov     ebx, edi
.text:00411129                 jmp     loc_411074
.text:0041112E ; ---------------------------------------------------------------------------
.text:0041112E
.text:0041112E loc_41112E:                             ; CODE XREF: sub_410970+707↑j
.text:0041112E                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00411136                 mov     edi, [esp+97Ch+var_950]
.text:0041113A                 mov     [edi], cl
.text:0041113C                 mov     eax, [esp+97Ch+var_8FC]
.text:00411143                 inc     edi
.text:00411144                 mov     [esp+97Ch+var_950], edi
.text:00411148                 inc     byte ptr [eax]
.text:0041114A                 jmp     loc_410D9F
.text:0041114F ; ---------------------------------------------------------------------------
.text:0041114F
.text:0041114F loc_41114F:                             ; CODE XREF: sub_410970+5F3↑j
.text:0041114F                 inc     dl
.text:00411151                 jz      loc_410F69
.text:00411157                 mov     edi, [esp+97Ch+var_8D0]
.text:0041115E                 mov     edx, edi
.text:00411160                 movzx   eax, byte ptr [edi]
.text:00411163                 cmp     al, 2Ah ; '*'
.text:00411165                 jz      loc_410F69
.text:0041116B                 cmp     al, 5Eh ; '^'
.text:0041116D                 jz      loc_410F69
.text:00411173                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0041117B                 jz      short loc_4111C4
.text:0041117D                 cmp     al, 5Ch ; '\'
.text:0041117F                 jz      short loc_4111C0
.text:00411181
.text:00411181 loc_411181:                             ; CODE XREF: sub_410970+85E↓j
.text:00411181                 test    [esp+97Ch+arg_8], 200h
.text:0041118C                 jz      short loc_41110E
.text:0041118E                 test    [esp+97Ch+arg_8], 1000h
.text:00411199                 jz      short loc_4111B0
.text:0041119B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0041119E
.text:0041119E loc_41119E:                             ; CODE XREF: sub_410970+84D↓j
.text:0041119E                 jnz     loc_41110E
.text:004111A4                 jmp     loc_410F69
.text:004111A4 ; ---------------------------------------------------------------------------
.text:004111A9                 align 10h
.text:004111B0
.text:004111B0 loc_4111B0:                             ; CODE XREF: sub_410970+829↑j
.text:004111B0                 cmp     byte ptr [edx], 5Ch ; '\'
.text:004111B3                 jnz     loc_41110E
.text:004111B9                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:004111BD                 jmp     short loc_41119E
.text:004111BD ; ---------------------------------------------------------------------------
.text:004111BF                 align 10h
.text:004111C0
.text:004111C0 loc_4111C0:                             ; CODE XREF: sub_410970+80F↑j
.text:004111C0                 movzx   eax, byte ptr [edi+1]
.text:004111C4
.text:004111C4 loc_4111C4:                             ; CODE XREF: sub_410970+80B↑j
.text:004111C4                 cmp     al, 2Bh ; '+'
.text:004111C6                 jz      loc_410F69
.text:004111CC                 cmp     al, 3Fh ; '?'
.text:004111CE                 jnz     short loc_411181
.text:004111D0                 jmp     loc_410F69
.text:004111D5 ; ---------------------------------------------------------------------------
.text:004111D5
.text:004111D5 loc_4111D5:                             ; CODE XREF: sub_410970+16F↑j
.text:004111D5                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:004111D5                 test    [esp+97Ch+arg_8], 800h ; jumptable 00410ADF case 10
.text:004111E0
.text:004111E0 loc_4111E0:                             ; CODE XREF: sub_410970+32B2↓j
.text:004111E0                 jz      def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004111E6
.text:004111E6 loc_4111E6:                             ; CODE XREF: sub_410970+3279↓j
.text:004111E6                 test    [esp+97Ch+arg_8], 400h
.text:004111F1                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004111F7
.text:004111F7 loc_4111F7:                             ; CODE XREF: sub_410970+8FF↓j
.text:004111F7                                         ; sub_410970+92C↓j ...
.text:004111F7                 mov     eax, [esp+97Ch+arg_C]
.text:004111FE                 mov     ebp, [esp+97Ch+var_950]
.text:00411202                 mov     edi, [eax]
.text:00411204                 mov     edx, [eax+4]
.text:00411207                 sub     ebp, edi
.text:00411209                 add     ebp, 3
.text:0041120C                 cmp     ebp, edx
.text:0041120E                 jbe     loc_4112AE
.text:00411214                 cmp     edx, 10000h
.text:0041121A                 mov     ebp, 0Fh
.text:0041121F                 jz      loc_410D86
.text:00411225                 lea     ebx, [edx+edx]
.text:00411228                 mov     edx, [esp+97Ch+arg_C]
.text:0041122F                 cmp     ebx, 10000h
.text:00411235                 mov     [edx+4], ebx
.text:00411238                 jbe     short loc_411241
.text:0041123A                 mov     dword ptr [edx+4], 10000h
.text:00411241
.text:00411241 loc_411241:                             ; CODE XREF: sub_410970+8C8↑j
.text:00411241                 mov     eax, [esp+97Ch+arg_C]
.text:00411248                 mov     ebp, [eax+4]
.text:0041124B                 mov     [esp+97Ch+Size], edi ; Block
.text:0041124E                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00411252                 mov     ebp, 0Ch
.text:00411257                 call    realloc
.text:0041125C                 mov     esi, [esp+97Ch+arg_C]
.text:00411263                 test    eax, eax
.text:00411265                 mov     [esi], eax
.text:00411267                 jz      loc_410D86
.text:0041126D                 cmp     edi, eax
.text:0041126F                 jz      short loc_4111F7
.text:00411271                 mov     ecx, [esp+97Ch+var_908]
.text:00411275                 sub     eax, edi
.text:00411277                 add     [esp+97Ch+var_950], eax
.text:0041127B                 add     [esp+97Ch+var_904], eax
.text:0041127F                 test    ecx, ecx
.text:00411281                 jz      short loc_411287
.text:00411283                 add     [esp+97Ch+var_908], eax
.text:00411287
.text:00411287 loc_411287:                             ; CODE XREF: sub_410970+911↑j
.text:00411287                 mov     edx, [esp+97Ch+var_900]
.text:0041128B                 test    edx, edx
.text:0041128D                 jz      short loc_411293
.text:0041128F                 add     [esp+97Ch+var_900], eax
.text:00411293
.text:00411293 loc_411293:                             ; CODE XREF: sub_410970+91D↑j
.text:00411293                 mov     ebx, [esp+97Ch+var_8FC]
.text:0041129A                 test    ebx, ebx
.text:0041129C                 jz      loc_4111F7
.text:004112A2                 add     [esp+97Ch+var_8FC], eax
.text:004112A9                 jmp     loc_4111F7
.text:004112AE ; ---------------------------------------------------------------------------
.text:004112AE
.text:004112AE loc_4112AE:                             ; CODE XREF: sub_410970+89E↑j
.text:004112AE                 mov     [esp+97Ch+Size], 0Fh
.text:004112B5                 mov     edi, [esp+97Ch+var_950]
.text:004112B9                 mov     ebp, [esp+97Ch+var_904]
.text:004112BD                 mov     edx, [esp+97Ch+var_904]
.text:004112C1                 mov     ebx, edi
.text:004112C3                 sub     ebx, ebp
.text:004112C5                 mov     [esp+97Ch+var_970], edi
.text:004112C9                 add     ebx, 3
.text:004112CC                 add     edi, 3
.text:004112CF                 mov     [esp+97Ch+var_974], ebx
.text:004112D3                 mov     [esp+97Ch+var_978], edx
.text:004112D7                 call    sub_40D790
.text:004112DC                 mov     [esp+97Ch+var_950], edi
.text:004112E0                 mov     esi, [esp+97Ch+var_908]
.text:004112E4                 xor     ecx, ecx
.text:004112E6                 mov     [esp+97Ch+var_8FC], ecx
.text:004112ED                 test    esi, esi
.text:004112EF                 jz      short loc_411314
.text:004112F1                 mov     [esp+97Ch+Size], 0Eh
.text:004112F8                 mov     eax, [esp+97Ch+var_908]
.text:004112FC                 mov     esi, edi
.text:004112FE                 mov     edi, [esp+97Ch+var_908]
.text:00411302                 sub     esi, eax
.text:00411304                 sub     esi, 3
.text:00411307                 mov     [esp+97Ch+var_974], esi
.text:0041130B                 mov     [esp+97Ch+var_978], edi
.text:0041130F                 call    sub_40D740
.text:00411314
.text:00411314 loc_411314:                             ; CODE XREF: sub_410970+97F↑j
.text:00411314                 mov     esi, [esp+97Ch+arg_C]
.text:0041131B                 mov     edx, [esp+97Ch+var_950]
.text:0041131F                 mov     ecx, [esp+97Ch+arg_C]
.text:00411326                 mov     edi, [esi]
.text:00411328                 mov     ebp, edx
.text:0041132A                 mov     [esp+97Ch+var_908], edx
.text:0041132E                 mov     edx, [ecx+4]
.text:00411331                 sub     ebp, edi
.text:00411333                 add     ebp, 3
.text:00411336                 mov     ebx, edi
.text:00411338                 cmp     ebp, edx
.text:0041133A                 jbe     loc_4113F3
.text:00411340
.text:00411340 loc_411340:                             ; CODE XREF: sub_410970+A7D↓j
.text:00411340                 cmp     edx, 10000h
.text:00411346                 mov     ebp, 0Fh
.text:0041134B                 jz      loc_410D86
.text:00411351                 lea     ebp, [edx+edx]
.text:00411354                 mov     edx, [esp+97Ch+arg_C]
.text:0041135B                 cmp     ebp, 10000h
.text:00411361                 mov     [edx+4], ebp
.text:00411364                 jbe     short loc_41136D
.text:00411366                 mov     dword ptr [edx+4], 10000h
.text:0041136D
.text:0041136D loc_41136D:                             ; CODE XREF: sub_410970+9F4↑j
.text:0041136D                 mov     eax, [esp+97Ch+arg_C]
.text:00411374                 mov     ebp, 0Ch
.text:00411379                 mov     edx, [eax+4]
.text:0041137C                 mov     [esp+97Ch+Size], edi ; Block
.text:0041137F                 mov     [esp+97Ch+var_978], edx ; Size
.text:00411383                 call    realloc
.text:00411388                 mov     edi, [esp+97Ch+arg_C]
.text:0041138F                 test    eax, eax
.text:00411391                 mov     [edi], eax
.text:00411393                 jz      loc_410D86
.text:00411399                 cmp     ebx, eax
.text:0041139B                 jz      short loc_4113CD
.text:0041139D                 sub     eax, ebx
.text:0041139F                 mov     ebx, [esp+97Ch+var_908]
.text:004113A3                 add     [esp+97Ch+var_950], eax
.text:004113A7                 test    ebx, ebx
.text:004113A9                 jz      short loc_4113AF
.text:004113AB                 add     [esp+97Ch+var_908], eax
.text:004113AF
.text:004113AF loc_4113AF:                             ; CODE XREF: sub_410970+A39↑j
.text:004113AF                 mov     ecx, [esp+97Ch+var_900]
.text:004113B3                 test    ecx, ecx
.text:004113B5                 jz      short loc_4113BB
.text:004113B7                 add     [esp+97Ch+var_900], eax
.text:004113BB
.text:004113BB loc_4113BB:                             ; CODE XREF: sub_410970+A45↑j
.text:004113BB                 mov     ebp, [esp+97Ch+var_8FC]
.text:004113C2                 test    ebp, ebp
.text:004113C4                 jz      short loc_4113CD
.text:004113C6                 add     [esp+97Ch+var_8FC], eax
.text:004113CD
.text:004113CD loc_4113CD:                             ; CODE XREF: sub_410970+A2B↑j
.text:004113CD                                         ; sub_410970+A54↑j
.text:004113CD                 mov     edx, [esp+97Ch+arg_C]
.text:004113D4                 mov     eax, [esp+97Ch+arg_C]
.text:004113DB                 mov     esi, [esp+97Ch+var_950]
.text:004113DF                 mov     edi, [edx]
.text:004113E1                 mov     edx, [eax+4]
.text:004113E4                 sub     esi, edi
.text:004113E6                 add     esi, 3
.text:004113E9                 mov     ebx, edi
.text:004113EB                 cmp     esi, edx
.text:004113ED                 ja      loc_411340
.text:004113F3
.text:004113F3 loc_4113F3:                             ; CODE XREF: sub_410970+9CA↑j
.text:004113F3                 add     [esp+97Ch+var_950], 3
.text:004113F8                 mov     [esp+97Ch+var_900], 0
.text:00411400                 mov     edi, [esp+97Ch+var_950]
.text:00411404                 mov     [esp+97Ch+var_904], edi
.text:00411408                 jmp     loc_410D9F
.text:0041140D ; ---------------------------------------------------------------------------
.text:0041140D
.text:0041140D loc_41140D:                             ; CODE XREF: sub_410970+16F↑j
.text:0041140D                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:0041140D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 00410ADF case 36
.text:00411414                 cmp     eax, [esp+97Ch+var_8F4]
.text:0041141B                 jz      short loc_41142B
.text:0041141D                 test    byte ptr [esp+97Ch+arg_8], 8
.text:00411425                 jz      loc_4114F1
.text:0041142B
.text:0041142B loc_41142B:                             ; CODE XREF: sub_410970+AAB↑j
.text:0041142B                                         ; sub_410970+B31↓j ...
.text:0041142B                 mov     ecx, [esp+97Ch+arg_C]
.text:00411432                 mov     eax, [esp+97Ch+arg_C]
.text:00411439                 mov     ebx, [esp+97Ch+var_950]
.text:0041143D                 mov     edi, [ecx]
.text:0041143F                 mov     edx, [eax+4]
.text:00411442                 sub     ebx, edi
.text:00411444                 inc     ebx
.text:00411445                 cmp     ebx, edx
.text:00411447                 jbe     loc_4114E0
.text:0041144D                 cmp     edx, 10000h
.text:00411453                 mov     ebp, 0Fh
.text:00411458                 jz      loc_410D86
.text:0041145E                 mov     ebx, [esp+97Ch+arg_C]
.text:00411465                 lea     ecx, [edx+edx]
.text:00411468                 cmp     ecx, 10000h
.text:0041146E                 mov     [ebx+4], ecx
.text:00411471                 jbe     short loc_41147A
.text:00411473                 mov     dword ptr [ebx+4], 10000h
.text:0041147A
.text:0041147A loc_41147A:                             ; CODE XREF: sub_410970+B01↑j
.text:0041147A                 mov     ebx, [esp+97Ch+arg_C]
.text:00411481                 mov     ebp, [ebx+4]
.text:00411484                 mov     [esp+97Ch+Size], edi ; Block
.text:00411487                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0041148B                 mov     ebp, 0Ch
.text:00411490                 call    realloc
.text:00411495                 mov     [ebx], eax
.text:00411497                 test    eax, eax
.text:00411499                 jz      loc_410D86
.text:0041149F                 cmp     edi, eax
.text:004114A1                 jz      short loc_41142B
.text:004114A3                 sub     eax, edi
.text:004114A5                 mov     edi, [esp+97Ch+var_908]
.text:004114A9                 add     [esp+97Ch+var_950], eax
.text:004114AD                 add     [esp+97Ch+var_904], eax
.text:004114B1                 test    edi, edi
.text:004114B3                 jz      short loc_4114B9
.text:004114B5                 add     [esp+97Ch+var_908], eax
.text:004114B9
.text:004114B9 loc_4114B9:                             ; CODE XREF: sub_410970+B43↑j
.text:004114B9                 mov     edx, [esp+97Ch+var_900]
.text:004114BD                 test    edx, edx
.text:004114BF                 jz      short loc_4114C5
.text:004114C1                 add     [esp+97Ch+var_900], eax
.text:004114C5
.text:004114C5 loc_4114C5:                             ; CODE XREF: sub_410970+B4F↑j
.text:004114C5                 mov     esi, [esp+97Ch+var_8FC]
.text:004114CC                 test    esi, esi
.text:004114CE                 jz      loc_41142B
.text:004114D4                 add     [esp+97Ch+var_8FC], eax
.text:004114DB                 jmp     loc_41142B
.text:004114E0 ; ---------------------------------------------------------------------------
.text:004114E0
.text:004114E0 loc_4114E0:                             ; CODE XREF: sub_410970+AD7↑j
.text:004114E0                 mov     ebx, [esp+97Ch+var_950]
.text:004114E4                 mov     byte ptr [ebx], 0Ah
.text:004114E7
.text:004114E7 loc_4114E7:                             ; CODE XREF: sub_410970+1059↓j
.text:004114E7                 inc     ebx
.text:004114E8                 mov     [esp+97Ch+var_950], ebx
.text:004114EC                 jmp     loc_410D9F
.text:004114F1 ; ---------------------------------------------------------------------------
.text:004114F1
.text:004114F1 loc_4114F1:                             ; CODE XREF: sub_410970+AB5↑j
.text:004114F1                 mov     [esp+97Ch+Size], eax
.text:004114F4                 mov     esi, [esp+97Ch+arg_8]
.text:004114FB                 mov     edx, [esp+97Ch+var_8F4]
.text:00411502                 mov     [esp+97Ch+var_974], esi
.text:00411506                 mov     [esp+97Ch+var_978], edx
.text:0041150A                 call    sub_40D880
.text:0041150F                 test    al, al
.text:00411511                 jnz     loc_41142B
.text:00411517                 jmp     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041151C ; ---------------------------------------------------------------------------
.text:0041151C
.text:0041151C loc_41151C:                             ; CODE XREF: sub_410970+16F↑j
.text:0041151C                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:0041151C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 00410ADF case 40
.text:00411527                 jz      def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041152D
.text:0041152D loc_41152D:                             ; CODE XREF: sub_410970+2417↓j
.text:0041152D                 inc     [esp+97Ch+var_90C]
.text:00411531                 mov     eax, [esp+97Ch+arg_C]
.text:00411538                 inc     dword ptr [eax+18h]
.text:0041153B                 mov     ecx, [esp+97Ch+var_24]
.text:00411542                 cmp     ecx, [esp+97Ch+var_28]
.text:00411549                 jz      loc_4116C6
.text:0041154F
.text:0041154F loc_41154F:                             ; CODE XREF: sub_410970+D91↓j
.text:0041154F                 mov     edx, [esp+97Ch+arg_C]
.text:00411556                 lea     edi, [ecx+ecx*4]
.text:00411559                 xor     eax, eax
.text:0041155B                 lea     ebp, ds:0[edi*4]
.text:00411562                 mov     ebx, [esp+97Ch+Block]
.text:00411569                 mov     edi, [edx]
.text:0041156B                 sub     [esp+97Ch+var_904], edi
.text:0041156F                 mov     edx, edi
.text:00411571                 mov     esi, [esp+97Ch+var_904]
.text:00411575                 mov     [ebx+ebp], esi
.text:00411578                 mov     esi, [esp+97Ch+var_908]
.text:0041157C                 test    esi, esi
.text:0041157E                 jz      short loc_411587
.text:00411580                 mov     eax, [esp+97Ch+var_908]
.text:00411584                 sub     eax, edi
.text:00411586                 inc     eax
.text:00411587
.text:00411587 loc_411587:                             ; CODE XREF: sub_410970+C0E↑j
.text:00411587                 mov     [ebx+ebp+4], eax
.text:0041158B                 lea     esi, [ecx+ecx*4]
.text:0041158E                 mov     ebp, [esp+97Ch+var_90C]
.text:00411592                 mov     ecx, [esp+97Ch+var_950]
.text:00411596                 shl     esi, 2
.text:00411599                 mov     [ebx+esi+10h], ebp
.text:0041159D                 sub     ecx, edx
.text:0041159F                 cmp     ebp, 0FFh
.text:004115A5                 mov     [ebx+esi+0Ch], ecx
.text:004115A9                 ja      loc_411699
.text:004115AF                 mov     edx, [esp+97Ch+var_24]
.text:004115B6                 lea     esi, [ecx+2]
.text:004115B9                 mov     eax, [esp+97Ch+arg_C]
.text:004115C0                 lea     ebp, [edx+edx*4]
.text:004115C3                 lea     edx, [ecx+3]
.text:004115C6                 mov     [ebx+ebp*4+8], esi
.text:004115CA                 mov     ecx, [eax+4]
.text:004115CD                 cmp     edx, ecx
.text:004115CF                 jbe     loc_411681
.text:004115D5
.text:004115D5 loc_4115D5:                             ; CODE XREF: sub_410970+D0B↓j
.text:004115D5                 cmp     ecx, 10000h
.text:004115DB                 mov     ebp, 0Fh
.text:004115E0                 jz      loc_410D86
.text:004115E6                 mov     esi, [esp+97Ch+arg_C]
.text:004115ED                 lea     ebx, [ecx+ecx]
.text:004115F0                 cmp     ebx, 10000h
.text:004115F6                 mov     [esi+4], ebx
.text:004115F9                 jbe     short loc_411602
.text:004115FB                 mov     dword ptr [esi+4], 10000h
.text:00411602
.text:00411602 loc_411602:                             ; CODE XREF: sub_410970+C89↑j
.text:00411602                 mov     eax, [esp+97Ch+arg_C]
.text:00411609                 mov     ecx, [eax+4]
.text:0041160C                 mov     [esp+97Ch+Size], edi ; Block
.text:0041160F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00411613                 call    realloc
.text:00411618                 mov     ebp, [esp+97Ch+arg_C]
.text:0041161F                 test    eax, eax
.text:00411621                 mov     [ebp+0], eax
.text:00411624                 mov     ebp, 0Ch
.text:00411629                 jz      loc_410D86
.text:0041162F                 cmp     edi, eax
.text:00411631                 jz      short loc_411663
.text:00411633                 sub     eax, edi
.text:00411635                 mov     edi, [esp+97Ch+var_908]
.text:00411639                 add     [esp+97Ch+var_950], eax
.text:0041163D                 test    edi, edi
.text:0041163F                 jz      short loc_411645
.text:00411641                 add     [esp+97Ch+var_908], eax
.text:00411645
.text:00411645 loc_411645:                             ; CODE XREF: sub_410970+CCF↑j
.text:00411645                 mov     esi, [esp+97Ch+var_900]
.text:00411649                 test    esi, esi
.text:0041164B                 jz      short loc_411651
.text:0041164D                 add     [esp+97Ch+var_900], eax
.text:00411651
.text:00411651 loc_411651:                             ; CODE XREF: sub_410970+CDB↑j
.text:00411651                 mov     ebx, [esp+97Ch+var_8FC]
.text:00411658                 test    ebx, ebx
.text:0041165A                 jz      short loc_411663
.text:0041165C                 add     [esp+97Ch+var_8FC], eax
.text:00411663
.text:00411663 loc_411663:                             ; CODE XREF: sub_410970+CC1↑j
.text:00411663                                         ; sub_410970+CEA↑j
.text:00411663                 mov     ebp, [esp+97Ch+arg_C]
.text:0041166A                 mov     edx, [esp+97Ch+var_950]
.text:0041166E                 mov     edi, [ebp+0]
.text:00411671                 mov     ecx, [ebp+4]
.text:00411674                 sub     edx, edi
.text:00411676                 add     edx, 3
.text:00411679                 cmp     edx, ecx
.text:0041167B                 ja      loc_4115D5
.text:00411681
.text:00411681 loc_411681:                             ; CODE XREF: sub_410970+C5F↑j
.text:00411681                 mov     ecx, [esp+97Ch+var_950]
.text:00411685                 mov     byte ptr [ecx], 6
.text:00411688                 inc     ecx
.text:00411689                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:0041168E                 mov     [ecx], bl
.text:00411690                 inc     ecx
.text:00411691                 mov     byte ptr [ecx], 0
.text:00411694                 inc     ecx
.text:00411695                 mov     [esp+97Ch+var_950], ecx
.text:00411699
.text:00411699 loc_411699:                             ; CODE XREF: sub_410970+C39↑j
.text:00411699                 inc     [esp+97Ch+var_24]
.text:004116A0                 mov     eax, [esp+97Ch+var_950]
.text:004116A4                 mov     [esp+97Ch+var_908], 0
.text:004116AC                 mov     [esp+97Ch+var_900], 0
.text:004116B4                 mov     [esp+97Ch+var_904], eax
.text:004116B8
.text:004116B8 loc_4116B8:                             ; CODE XREF: sub_410970+2F9A↓j
.text:004116B8                                         ; sub_410970+3107↓j ...
.text:004116B8                 xor     eax, eax
.text:004116BA                 mov     [esp+97Ch+var_8FC], eax
.text:004116C1                 jmp     loc_410D9F
.text:004116C6 ; ---------------------------------------------------------------------------
.text:004116C6
.text:004116C6 loc_4116C6:                             ; CODE XREF: sub_410970+BD9↑j
.text:004116C6                 mov     ebp, [esp+97Ch+Block]
.text:004116CD                 lea     edi, [ecx+ecx*4]
.text:004116D0                 shl     edi, 3
.text:004116D3                 mov     [esp+97Ch+var_978], edi ; Size
.text:004116D7                 mov     [esp+97Ch+Size], ebp ; Block
.text:004116DA                 mov     ebp, 0Ch
.text:004116DF                 call    realloc
.text:004116E4                 mov     [esp+97Ch+Block], eax
.text:004116EB                 test    eax, eax
.text:004116ED                 jz      loc_410D86
.text:004116F3                 shl     [esp+97Ch+var_28], 1
.text:004116FA                 mov     ecx, [esp+97Ch+var_24]
.text:00411701                 jmp     loc_41154F
.text:00411706 ; ---------------------------------------------------------------------------
.text:00411706
.text:00411706 loc_411706:                             ; CODE XREF: sub_410970+16F↑j
.text:00411706                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00411706                 test    [esp+97Ch+arg_8], 2000h ; jumptable 00410ADF case 41
.text:00411711                 jz      def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411717
.text:00411717 loc_411717:                             ; CODE XREF: sub_410970+2537↓j
.text:00411717                 mov     esi, [esp+97Ch+var_908]
.text:0041171B                 test    esi, esi
.text:0041171D                 jz      loc_411824
.text:00411723                 mov     eax, [esp+97Ch+arg_C]
.text:0041172A                 mov     ebp, [esp+97Ch+var_950]
.text:0041172E                 mov     edi, [eax]
.text:00411730                 mov     edx, [eax+4]
.text:00411733                 sub     ebp, edi
.text:00411735                 mov     ebx, edi
.text:00411737                 inc     ebp
.text:00411738                 cmp     ebp, edx
.text:0041173A                 jbe     loc_4117F5
.text:00411740
.text:00411740 loc_411740:                             ; CODE XREF: sub_410970+E7F↓j
.text:00411740                 cmp     edx, 10000h
.text:00411746                 mov     ebp, 0Fh
.text:0041174B                 jz      loc_410D86
.text:00411751                 mov     esi, [esp+97Ch+arg_C]
.text:00411758                 lea     ecx, [edx+edx]
.text:0041175B                 cmp     ecx, 10000h
.text:00411761                 mov     [esi+4], ecx
.text:00411764                 jbe     short loc_41176D
.text:00411766                 mov     dword ptr [esi+4], 10000h
.text:0041176D
.text:0041176D loc_41176D:                             ; CODE XREF: sub_410970+DF4↑j
.text:0041176D                 mov     ebp, [esp+97Ch+arg_C]
.text:00411774                 mov     esi, [ebp+4]
.text:00411777                 mov     ebp, 0Ch
.text:0041177C                 mov     [esp+97Ch+Size], edi ; Block
.text:0041177F                 mov     [esp+97Ch+var_978], esi ; Size
.text:00411783                 call    realloc
.text:00411788                 mov     edx, [esp+97Ch+arg_C]
.text:0041178F                 test    eax, eax
.text:00411791                 mov     [edx], eax
.text:00411793                 jz      loc_410D86
.text:00411799                 cmp     ebx, eax
.text:0041179B                 jz      short loc_4117D1
.text:0041179D                 sub     eax, ebx
.text:0041179F                 mov     ebx, [esp+97Ch+var_908]
.text:004117A3                 add     [esp+97Ch+var_950], eax
.text:004117A7                 add     [esp+97Ch+var_904], eax
.text:004117AB                 test    ebx, ebx
.text:004117AD                 jz      short loc_4117B3
.text:004117AF                 add     [esp+97Ch+var_908], eax
.text:004117B3
.text:004117B3 loc_4117B3:                             ; CODE XREF: sub_410970+E3D↑j
.text:004117B3                 mov     edi, [esp+97Ch+var_900]
.text:004117B7                 test    edi, edi
.text:004117B9                 jz      short loc_4117BF
.text:004117BB                 add     [esp+97Ch+var_900], eax
.text:004117BF
.text:004117BF loc_4117BF:                             ; CODE XREF: sub_410970+E49↑j
.text:004117BF                 mov     edx, [esp+97Ch+var_8FC]
.text:004117C6                 test    edx, edx
.text:004117C8                 jz      short loc_4117D1
.text:004117CA                 add     [esp+97Ch+var_8FC], eax
.text:004117D1
.text:004117D1 loc_4117D1:                             ; CODE XREF: sub_410970+E2B↑j
.text:004117D1                                         ; sub_410970+E58↑j
.text:004117D1                 mov     esi, [esp+97Ch+arg_C]
.text:004117D8                 mov     eax, [esp+97Ch+arg_C]
.text:004117DF                 mov     ecx, [esp+97Ch+var_950]
.text:004117E3                 mov     edi, [esi]
.text:004117E5                 mov     edx, [eax+4]
.text:004117E8                 sub     ecx, edi
.text:004117EA                 inc     ecx
.text:004117EB                 mov     ebx, edi
.text:004117ED                 cmp     ecx, edx
.text:004117EF                 ja      loc_411740
.text:004117F5
.text:004117F5 loc_4117F5:                             ; CODE XREF: sub_410970+DCA↑j
.text:004117F5                 mov     edx, [esp+97Ch+var_950]
.text:004117F9                 mov     byte ptr [edx], 14h
.text:004117FC                 mov     edi, [esp+97Ch+var_908]
.text:00411800                 inc     edx
.text:00411801                 mov     [esp+97Ch+var_950], edx
.text:00411805                 mov     ebx, edx
.text:00411807                 mov     ebp, [esp+97Ch+var_908]
.text:0041180B                 mov     [esp+97Ch+Size], 0Eh
.text:00411812                 sub     ebx, edi
.text:00411814                 sub     ebx, 4
.text:00411817                 mov     [esp+97Ch+var_974], ebx
.text:0041181B                 mov     [esp+97Ch+var_978], ebp
.text:0041181F                 call    sub_40D740
.text:00411824
.text:00411824 loc_411824:                             ; CODE XREF: sub_410970+DAD↑j
.text:00411824                 mov     eax, [esp+97Ch+var_24]
.text:0041182B                 test    eax, eax
.text:0041182D                 jnz     short loc_411854
.text:0041182F                 test    [esp+97Ch+arg_8], 20000h
.text:0041183A                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411840
.text:00411840 loc_411840:                             ; CODE XREF: sub_410970+254E↓j
.text:00411840                 mov     ecx, [esp+97Ch+Block]
.text:00411847                 mov     ebp, 10h
.text:0041184C
.text:0041184C loc_41184C:                             ; CODE XREF: sub_410970+15EA↓j
.text:0041184C                                         ; sub_410970+21AF↓j
.text:0041184C                 mov     [esp+97Ch+Size], ecx
.text:0041184F                 jmp     loc_410F13
.text:00411854 ; ---------------------------------------------------------------------------
.text:00411854
.text:00411854 loc_411854:                             ; CODE XREF: sub_410970+EBD↑j
.text:00411854                 dec     eax
.text:00411855                 mov     edx, [esp+97Ch+Block]
.text:0041185C                 mov     ebp, [esp+97Ch+arg_C]
.text:00411863                 mov     [esp+97Ch+var_24], eax
.text:0041186A                 lea     esi, [eax+eax*4]
.text:0041186D                 shl     esi, 2
.text:00411870                 mov     ebx, [ebp+0]
.text:00411873                 mov     edi, [edx+esi]
.text:00411876                 mov     ebp, [edx+esi+4]
.text:0041187A                 mov     ecx, ebx
.text:0041187C                 add     edi, ebx
.text:0041187E                 test    ebp, ebp
.text:00411880                 mov     [esp+97Ch+var_904], edi
.text:00411884                 lea     edi, [ebp+ebx-1]
.text:00411888                 setz    bl
.text:0041188B                 movzx   esi, bl
.text:0041188E                 mov     ebx, [esp+97Ch+var_24]
.text:00411895                 dec     esi
.text:00411896                 and     edi, esi
.text:00411898                 lea     eax, [ebx+ebx*4]
.text:0041189B                 mov     [esp+97Ch+var_908], edi
.text:0041189F                 shl     eax, 2
.text:004118A2                 xor     esi, esi
.text:004118A4                 mov     [esp+97Ch+var_8FC], esi
.text:004118AB                 mov     ebx, [edx+eax+10h]
.text:004118AF                 mov     ebp, [edx+eax+0Ch]
.text:004118B3                 mov     [esp+97Ch+var_930], ebx
.text:004118B7                 add     ebp, ecx
.text:004118B9                 cmp     ebx, 0FFh
.text:004118BF                 mov     [esp+97Ch+var_900], ebp
.text:004118C3                 ja      loc_410D9F
.text:004118C9                 mov     esi, [edx+eax+8]
.text:004118CD                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:004118D2                 add     ecx, esi
.text:004118D4                 sub     dl, bl
.text:004118D6                 mov     [ecx], dl
.text:004118D8                 mov     eax, [esp+97Ch+arg_C]
.text:004118DF                 mov     ecx, [esp+97Ch+var_950]
.text:004118E3                 mov     edi, [eax]
.text:004118E5                 mov     edx, [eax+4]
.text:004118E8                 sub     ecx, edi
.text:004118EA                 add     ecx, 3
.text:004118ED                 mov     ebx, edi
.text:004118EF                 cmp     ecx, edx
.text:004118F1                 jbe     loc_4119AE
.text:004118F7
.text:004118F7 loc_4118F7:                             ; CODE XREF: sub_410970+1038↓j
.text:004118F7                 cmp     edx, 10000h
.text:004118FD                 mov     ebp, 0Fh
.text:00411902                 jz      loc_410D86
.text:00411908                 lea     ebp, [edx+edx]
.text:0041190B                 mov     edx, [esp+97Ch+arg_C]
.text:00411912                 cmp     ebp, 10000h
.text:00411918                 mov     [edx+4], ebp
.text:0041191B                 jbe     short loc_411924
.text:0041191D                 mov     dword ptr [edx+4], 10000h
.text:00411924
.text:00411924 loc_411924:                             ; CODE XREF: sub_410970+FAB↑j
.text:00411924                 mov     eax, [esp+97Ch+arg_C]
.text:0041192B                 mov     ebp, 0Ch
.text:00411930                 mov     edx, [eax+4]
.text:00411933                 mov     [esp+97Ch+Size], edi ; Block
.text:00411936                 mov     [esp+97Ch+var_978], edx ; Size
.text:0041193A                 call    realloc
.text:0041193F                 mov     edi, [esp+97Ch+arg_C]
.text:00411946                 test    eax, eax
.text:00411948                 mov     [edi], eax
.text:0041194A                 jz      loc_410D86
.text:00411950                 cmp     ebx, eax
.text:00411952                 jz      short loc_411988
.text:00411954                 sub     eax, ebx
.text:00411956                 mov     ebx, [esp+97Ch+var_908]
.text:0041195A                 add     [esp+97Ch+var_950], eax
.text:0041195E                 add     [esp+97Ch+var_904], eax
.text:00411962                 test    ebx, ebx
.text:00411964                 jz      short loc_41196A
.text:00411966                 add     [esp+97Ch+var_908], eax
.text:0041196A
.text:0041196A loc_41196A:                             ; CODE XREF: sub_410970+FF4↑j
.text:0041196A                 mov     ecx, [esp+97Ch+var_900]
.text:0041196E                 test    ecx, ecx
.text:00411970                 jz      short loc_411976
.text:00411972                 add     [esp+97Ch+var_900], eax
.text:00411976
.text:00411976 loc_411976:                             ; CODE XREF: sub_410970+1000↑j
.text:00411976                 mov     esi, [esp+97Ch+var_8FC]
.text:0041197D                 test    esi, esi
.text:0041197F                 jz      short loc_411988
.text:00411981                 add     [esp+97Ch+var_8FC], eax
.text:00411988
.text:00411988 loc_411988:                             ; CODE XREF: sub_410970+FE2↑j
.text:00411988                                         ; sub_410970+100F↑j
.text:00411988                 mov     edx, [esp+97Ch+arg_C]
.text:0041198F                 mov     eax, [esp+97Ch+arg_C]
.text:00411996                 mov     ebp, [esp+97Ch+var_950]
.text:0041199A                 mov     edi, [edx]
.text:0041199C                 mov     edx, [eax+4]
.text:0041199F                 sub     ebp, edi
.text:004119A1                 add     ebp, 3
.text:004119A4                 mov     ebx, edi
.text:004119A6                 cmp     ebp, edx
.text:004119A8                 ja      loc_4118F7
.text:004119AE
.text:004119AE loc_4119AE:                             ; CODE XREF: sub_410970+F81↑j
.text:004119AE                 mov     ebx, [esp+97Ch+var_950]
.text:004119B2                 mov     byte ptr [ebx], 7
.text:004119B5                 inc     ebx
.text:004119B6                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:004119BB                 mov     [ebx], dl
.text:004119BD                 inc     ebx
.text:004119BE                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:004119C3                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:004119C7                 mov     [ebx], cl
.text:004119C9                 jmp     loc_4114E7
.text:004119C9 ; ---------------------------------------------------------------------------
.text:004119CE                 align 10h
.text:004119D0
.text:004119D0 loc_4119D0:                             ; CODE XREF: sub_410970+16F↑j
.text:004119D0                                         ; sub_410970+16DF↓j ...
.text:004119D0                 mov     ebp, [esp+97Ch+var_900] ; jumptable 00410ADF case 42
.text:004119D4                 test    ebp, ebp
.text:004119D6                 jz      loc_411F31
.text:004119DC
.text:004119DC loc_4119DC:                             ; CODE XREF: sub_410970+15D3↓j
.text:004119DC                 mov     [esp+97Ch+var_91C], 0
.text:004119E1                 xor     ecx, ecx
.text:004119E3                 mov     [esp+97Ch+var_91D], 0
.text:004119E8
.text:004119E8 loc_4119E8:                             ; CODE XREF: sub_410970+10ED↓j
.text:004119E8                                         ; sub_410970+1105↓j ...
.text:004119E8                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:004119F0                 movsx   eax, [esp+97Ch+var_91D]
.text:004119F5                 jz      short loc_4119FA
.text:004119F7                 or      eax, 1
.text:004119FA
.text:004119FA loc_4119FA:                             ; CODE XREF: sub_410970+1085↑j
.text:004119FA                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00411A02                 mov     [esp+97Ch+var_91D], al
.text:00411A06                 movsx   eax, cl
.text:00411A09                 jz      short loc_411A0E
.text:00411A0B                 or      eax, 1
.text:00411A0E
.text:00411A0E loc_411A0E:                             ; CODE XREF: sub_410970+1099↑j
.text:00411A0E                 mov     edx, [esp+97Ch+var_8D0]
.text:00411A15                 mov     cl, al
.text:00411A17                 cmp     edx, [esp+97Ch+var_8F4]
.text:00411A1E                 jz      short loc_411A90
.text:00411A20                 movzx   eax, byte ptr [edx]
.text:00411A23                 lea     edi, [edx+1]
.text:00411A26                 mov     esi, [esp+97Ch+var_8F8]
.text:00411A2D                 mov     [esp+97Ch+var_8D0], edi
.text:00411A34                 test    esi, esi
.text:00411A36                 mov     [esp+97Ch+var_8EC], al
.text:00411A3D                 jz      short loc_411A55
.text:00411A3F                 mov     esi, [esp+97Ch+var_8F8]
.text:00411A46                 movzx   ebp, al
.text:00411A49                 movzx   eax, byte ptr [ebp+esi+0]
.text:00411A4E                 mov     [esp+97Ch+var_8EC], al
.text:00411A55
.text:00411A55 loc_411A55:                             ; CODE XREF: sub_410970+10CD↑j
.text:00411A55                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:00411A5D                 jz      short loc_4119E8
.text:00411A5F                 test    byte ptr [esp+97Ch+arg_8], 2
.text:00411A67                 jnz     loc_411EC0
.text:00411A6D                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:00411A75                 jz      loc_4119E8
.text:00411A7B                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:00411A83                 jz      loc_4119E8
.text:00411A89
.text:00411A89 loc_411A89:                             ; CODE XREF: sub_410970+1558↓j
.text:00411A89                 dec     [esp+97Ch+var_8D0]
.text:00411A90
.text:00411A90 loc_411A90:                             ; CODE XREF: sub_410970+10AE↑j
.text:00411A90                                         ; sub_410970+15AB↓j
.text:00411A90                 mov     edx, [esp+97Ch+var_900]
.text:00411A94                 test    edx, edx
.text:00411A96                 jz      loc_410D9F
.text:00411A9C                 test    cl, cl
.text:00411A9E                 jz      loc_411CA3
.text:00411AA4                 mov     ebx, [esp+97Ch+arg_C]
.text:00411AAB                 mov     ebp, [esp+97Ch+arg_C]
.text:00411AB2                 mov     esi, [esp+97Ch+var_950]
.text:00411AB6                 mov     edi, [ebx]
.text:00411AB8                 mov     edx, [ebp+4]
.text:00411ABB                 sub     esi, edi
.text:00411ABD                 add     esi, 3
.text:00411AC0                 mov     ebx, edi
.text:00411AC2                 cmp     esi, edx
.text:00411AC4                 jbe     loc_411B81
.text:00411ACA
.text:00411ACA loc_411ACA:                             ; CODE XREF: sub_410970+120B↓j
.text:00411ACA                 cmp     edx, 10000h
.text:00411AD0                 mov     ebp, 0Fh
.text:00411AD5                 jz      loc_410D86
.text:00411ADB                 mov     esi, [esp+97Ch+arg_C]
.text:00411AE2                 lea     ecx, [edx+edx]
.text:00411AE5                 cmp     ecx, 10000h
.text:00411AEB                 mov     [esi+4], ecx
.text:00411AEE                 jbe     short loc_411AF7
.text:00411AF0                 mov     dword ptr [esi+4], 10000h
.text:00411AF7
.text:00411AF7 loc_411AF7:                             ; CODE XREF: sub_410970+117E↑j
.text:00411AF7                 mov     eax, [esp+97Ch+arg_C]
.text:00411AFE                 mov     ebp, 0Ch
.text:00411B03                 mov     esi, [eax+4]
.text:00411B06                 mov     [esp+97Ch+Size], edi ; Block
.text:00411B09                 mov     [esp+97Ch+var_978], esi ; Size
.text:00411B0D                 call    realloc
.text:00411B12                 mov     edi, [esp+97Ch+arg_C]
.text:00411B19                 test    eax, eax
.text:00411B1B                 mov     [edi], eax
.text:00411B1D                 jz      loc_410D86
.text:00411B23                 cmp     ebx, eax
.text:00411B25                 jz      short loc_411B5B
.text:00411B27                 mov     edx, [esp+97Ch+var_908]
.text:00411B2B                 sub     eax, ebx
.text:00411B2D                 add     [esp+97Ch+var_950], eax
.text:00411B31                 add     [esp+97Ch+var_904], eax
.text:00411B35                 test    edx, edx
.text:00411B37                 jz      short loc_411B3D
.text:00411B39                 add     [esp+97Ch+var_908], eax
.text:00411B3D
.text:00411B3D loc_411B3D:                             ; CODE XREF: sub_410970+11C7↑j
.text:00411B3D                 mov     ebp, [esp+97Ch+var_900]
.text:00411B41                 test    ebp, ebp
.text:00411B43                 jz      short loc_411B49
.text:00411B45                 add     [esp+97Ch+var_900], eax
.text:00411B49
.text:00411B49 loc_411B49:                             ; CODE XREF: sub_410970+11D3↑j
.text:00411B49                 mov     ebx, [esp+97Ch+var_8FC]
.text:00411B50                 test    ebx, ebx
.text:00411B52                 jz      short loc_411B5B
.text:00411B54                 add     [esp+97Ch+var_8FC], eax
.text:00411B5B
.text:00411B5B loc_411B5B:                             ; CODE XREF: sub_410970+11B5↑j
.text:00411B5B                                         ; sub_410970+11E2↑j
.text:00411B5B                 mov     esi, [esp+97Ch+arg_C]
.text:00411B62                 mov     eax, [esp+97Ch+arg_C]
.text:00411B69                 mov     ecx, [esp+97Ch+var_950]
.text:00411B6D                 mov     edi, [esi]
.text:00411B6F                 mov     edx, [eax+4]
.text:00411B72                 sub     ecx, edi
.text:00411B74                 add     ecx, 3
.text:00411B77                 mov     ebx, edi
.text:00411B79                 cmp     ecx, edx
.text:00411B7B                 ja      loc_411ACA
.text:00411B81
.text:00411B81 loc_411B81:                             ; CODE XREF: sub_410970+1154↑j
.text:00411B81                 mov     edi, [esp+97Ch+var_8F8]
.text:00411B88                 test    edi, edi
.text:00411B8A                 jz      loc_411EAA
.text:00411B90                 mov     edi, [esp+97Ch+var_8D0]
.text:00411B97                 mov     ebx, [esp+97Ch+var_8F8]
.text:00411B9E                 movzx   ebp, byte ptr [edi-2]
.text:00411BA2                 movsx   edx, byte ptr [ebp+ebx+0]
.text:00411BA7
.text:00411BA7 loc_411BA7:                             ; CODE XREF: sub_410970+1545↓j
.text:00411BA7                 mov     ecx, [esp+97Ch+var_8F8]
.text:00411BAE                 test    ecx, ecx
.text:00411BB0                 jz      loc_411EA2
.text:00411BB6                 mov     eax, [esp+97Ch+var_8F8]
.text:00411BBD                 movsx   esi, byte ptr [eax+2Eh]
.text:00411BC1                 cmp     edx, esi
.text:00411BC3
.text:00411BC3 loc_411BC3:                             ; CODE XREF: sub_410970+1535↓j
.text:00411BC3                 jz      loc_411E0B
.text:00411BC9
.text:00411BC9 loc_411BC9:                             ; CODE XREF: sub_410970+14A0↓j
.text:00411BC9                                         ; sub_410970+14AD↓j ...
.text:00411BC9                 mov     [esp+97Ch+Size], 12h
.text:00411BD0                 mov     ebx, [esp+97Ch+var_900]
.text:00411BD4                 mov     ecx, [esp+97Ch+var_950]
.text:00411BD8                 mov     edi, [esp+97Ch+var_950]
.text:00411BDC                 sub     ebx, ecx
.text:00411BDE                 sub     ebx, 6
.text:00411BE1                 mov     [esp+97Ch+var_974], ebx
.text:00411BE5                 mov     [esp+97Ch+var_978], edi
.text:00411BE9                 call    sub_40D740
.text:00411BEE
.text:00411BEE loc_411BEE:                             ; CODE XREF: sub_410970+1523↓j
.text:00411BEE                 add     [esp+97Ch+var_950], 3
.text:00411BF3                 mov     esi, [esp+97Ch+arg_C]
.text:00411BFA                 mov     eax, [esp+97Ch+var_950]
.text:00411BFE                 mov     edi, [esi]
.text:00411C00                 mov     edx, [esi+4]
.text:00411C03
.text:00411C03 loc_411C03:                             ; CODE XREF: sub_410970+134A↓j
.text:00411C03                 sub     eax, edi
.text:00411C05                 mov     ebx, edi
.text:00411C07                 add     eax, 3
.text:00411C0A                 cmp     eax, edx
.text:00411C0C                 jbe     loc_411CBF
.text:00411C12                 cmp     edx, 10000h
.text:00411C18                 mov     ebp, 0Fh
.text:00411C1D                 jz      loc_410D86
.text:00411C23                 mov     esi, [esp+97Ch+arg_C]
.text:00411C2A                 lea     ebp, [edx+edx]
.text:00411C2D                 cmp     ebp, 10000h
.text:00411C33                 mov     [esi+4], ebp
.text:00411C36                 jbe     short loc_411C3F
.text:00411C38                 mov     dword ptr [esi+4], 10000h
.text:00411C3F
.text:00411C3F loc_411C3F:                             ; CODE XREF: sub_410970+12C6↑j
.text:00411C3F                 mov     eax, [esp+97Ch+arg_C]
.text:00411C46                 mov     ebp, 0Ch
.text:00411C4B                 mov     ecx, [eax+4]
.text:00411C4E                 mov     [esp+97Ch+Size], edi ; Block
.text:00411C51                 mov     [esp+97Ch+var_978], ecx ; Size
.text:00411C55                 call    realloc
.text:00411C5A                 mov     edx, [esp+97Ch+arg_C]
.text:00411C61                 test    eax, eax
.text:00411C63                 mov     [edx], eax
.text:00411C65                 jz      loc_410D86
.text:00411C6B                 cmp     ebx, eax
.text:00411C6D                 jz      short loc_411CA3
.text:00411C6F                 mov     edi, [esp+97Ch+var_908]
.text:00411C73                 sub     eax, ebx
.text:00411C75                 add     [esp+97Ch+var_950], eax
.text:00411C79                 add     [esp+97Ch+var_904], eax
.text:00411C7D                 test    edi, edi
.text:00411C7F                 jz      short loc_411C85
.text:00411C81                 add     [esp+97Ch+var_908], eax
.text:00411C85
.text:00411C85 loc_411C85:                             ; CODE XREF: sub_410970+130F↑j
.text:00411C85                 mov     ebx, [esp+97Ch+var_900]
.text:00411C89                 test    ebx, ebx
.text:00411C8B                 jz      short loc_411C91
.text:00411C8D                 add     [esp+97Ch+var_900], eax
.text:00411C91
.text:00411C91 loc_411C91:                             ; CODE XREF: sub_410970+131B↑j
.text:00411C91                 mov     esi, [esp+97Ch+var_8FC]
.text:00411C98                 test    esi, esi
.text:00411C9A                 jz      short loc_411CA3
.text:00411C9C                 add     [esp+97Ch+var_8FC], eax
.text:00411CA3
.text:00411CA3 loc_411CA3:                             ; CODE XREF: sub_410970+112E↑j
.text:00411CA3                                         ; sub_410970+12FD↑j ...
.text:00411CA3                 mov     edx, [esp+97Ch+arg_C]
.text:00411CAA                 mov     ebp, [esp+97Ch+arg_C]
.text:00411CB1                 mov     eax, [esp+97Ch+var_950]
.text:00411CB5                 mov     edi, [edx]
.text:00411CB7                 mov     edx, [ebp+4]
.text:00411CBA                 jmp     loc_411C03
.text:00411CBF ; ---------------------------------------------------------------------------
.text:00411CBF
.text:00411CBF loc_411CBF:                             ; CODE XREF: sub_410970+129C↑j
.text:00411CBF                 movzx   edx, [esp+97Ch+var_91C]
.text:00411CC4                 mov     ebx, [esp+97Ch+var_950]
.text:00411CC8                 mov     eax, [esp+97Ch+var_900]
.text:00411CCC                 mov     edi, [esp+97Ch+var_900]
.text:00411CD0                 mov     esi, ebx
.text:00411CD2                 and     edx, 1
.text:00411CD5                 mov     [esp+97Ch+var_970], ebx
.text:00411CD9                 sub     esi, eax
.text:00411CDB                 add     edx, 0Fh
.text:00411CDE                 mov     [esp+97Ch+var_974], esi
.text:00411CE2                 add     ebx, 3
.text:00411CE5                 mov     [esp+97Ch+var_978], edi
.text:00411CE9                 mov     [esp+97Ch+Size], edx
.text:00411CEC                 call    sub_40D790
.text:00411CF1                 mov     [esp+97Ch+var_950], ebx
.text:00411CF5                 xor     ecx, ecx
.text:00411CF7                 cmp     [esp+97Ch+var_91D], 0
.text:00411CFC                 mov     [esp+97Ch+var_8FC], ecx
.text:00411D03                 jnz     loc_410D9F
.text:00411D09                 mov     ecx, [esp+97Ch+arg_C]
.text:00411D10                 mov     ebp, [esp+97Ch+var_950]
.text:00411D14                 mov     edi, [ecx]
.text:00411D16                 mov     edx, [ecx+4]
.text:00411D19                 sub     ebp, edi
.text:00411D1B                 mov     ebx, edi
.text:00411D1D                 add     ebp, 3
.text:00411D20                 cmp     ebp, edx
.text:00411D22                 jbe     loc_411DDF
.text:00411D28
.text:00411D28 loc_411D28:                             ; CODE XREF: sub_410970+1469↓j
.text:00411D28                 cmp     edx, 10000h
.text:00411D2E                 mov     ebp, 0Fh
.text:00411D33                 jz      loc_410D86
.text:00411D39                 mov     esi, [esp+97Ch+arg_C]
.text:00411D40                 lea     ebp, [edx+edx]
.text:00411D43                 cmp     ebp, 10000h
.text:00411D49                 mov     [esi+4], ebp
.text:00411D4C                 jbe     short loc_411D55
.text:00411D4E                 mov     dword ptr [esi+4], 10000h
.text:00411D55
.text:00411D55 loc_411D55:                             ; CODE XREF: sub_410970+13DC↑j
.text:00411D55                 mov     eax, [esp+97Ch+arg_C]
.text:00411D5C                 mov     ebp, 0Ch
.text:00411D61                 mov     esi, [eax+4]
.text:00411D64                 mov     [esp+97Ch+Size], edi ; Block
.text:00411D67                 mov     [esp+97Ch+var_978], esi ; Size
.text:00411D6B                 call    realloc
.text:00411D70                 mov     edx, [esp+97Ch+arg_C]
.text:00411D77                 test    eax, eax
.text:00411D79                 mov     [edx], eax
.text:00411D7B                 jz      loc_410D86
.text:00411D81                 cmp     ebx, eax
.text:00411D83                 jz      short loc_411DB9
.text:00411D85                 mov     edi, [esp+97Ch+var_908]
.text:00411D89                 sub     eax, ebx
.text:00411D8B                 add     [esp+97Ch+var_950], eax
.text:00411D8F                 add     [esp+97Ch+var_904], eax
.text:00411D93                 test    edi, edi
.text:00411D95                 jz      short loc_411D9B
.text:00411D97                 add     [esp+97Ch+var_908], eax
.text:00411D9B
.text:00411D9B loc_411D9B:                             ; CODE XREF: sub_410970+1425↑j
.text:00411D9B                 mov     ebx, [esp+97Ch+var_900]
.text:00411D9F                 test    ebx, ebx
.text:00411DA1                 jz      short loc_411DA7
.text:00411DA3                 add     [esp+97Ch+var_900], eax
.text:00411DA7
.text:00411DA7 loc_411DA7:                             ; CODE XREF: sub_410970+1431↑j
.text:00411DA7                 mov     ecx, [esp+97Ch+var_8FC]
.text:00411DAE                 test    ecx, ecx
.text:00411DB0                 jz      short loc_411DB9
.text:00411DB2                 add     [esp+97Ch+var_8FC], eax
.text:00411DB9
.text:00411DB9 loc_411DB9:                             ; CODE XREF: sub_410970+1413↑j
.text:00411DB9                                         ; sub_410970+1440↑j
.text:00411DB9                 mov     edx, [esp+97Ch+arg_C]
.text:00411DC0                 mov     eax, [esp+97Ch+arg_C]
.text:00411DC7                 mov     ebp, [esp+97Ch+var_950]
.text:00411DCB                 mov     edi, [edx]
.text:00411DCD                 mov     edx, [eax+4]
.text:00411DD0                 sub     ebp, edi
.text:00411DD2                 add     ebp, 3
.text:00411DD5                 mov     ebx, edi
.text:00411DD7                 cmp     ebp, edx
.text:00411DD9                 ja      loc_411D28
.text:00411DDF
.text:00411DDF loc_411DDF:                             ; CODE XREF: sub_410970+13B2↑j
.text:00411DDF                 mov     [esp+97Ch+var_974], 3
.text:00411DE7                 mov     edi, [esp+97Ch+var_950]
.text:00411DEB                 mov     esi, [esp+97Ch+var_900]
.text:00411DEF                 mov     [esp+97Ch+Size], 13h
.text:00411DF6                 mov     [esp+97Ch+var_970], edi
.text:00411DFA                 add     edi, 3
.text:00411DFD                 mov     [esp+97Ch+var_978], esi
.text:00411E01                 call    sub_40D790
.text:00411E06                 jmp     loc_410D9B
.text:00411E0B ; ---------------------------------------------------------------------------
.text:00411E0B
.text:00411E0B loc_411E0B:                             ; CODE XREF: sub_410970:loc_411BC3↑j
.text:00411E0B                 cmp     [esp+97Ch+var_91D], 0
.text:00411E10                 jz      loc_411BC9
.text:00411E16                 cmp     edi, [esp+97Ch+var_8F4]
.text:00411E1D                 jnb     loc_411BC9
.text:00411E23                 mov     edx, [esp+97Ch+var_8F8]
.text:00411E2A                 test    edx, edx
.text:00411E2C                 jz      short loc_411E9D
.text:00411E2E                 movzx   ebp, byte ptr [edi]
.text:00411E31                 mov     edi, [esp+97Ch+var_8F8]
.text:00411E38                 movsx   edx, byte ptr [ebp+edi+0]
.text:00411E3D
.text:00411E3D loc_411E3D:                             ; CODE XREF: sub_410970+1530↓j
.text:00411E3D                 mov     ebx, [esp+97Ch+var_8F8]
.text:00411E44                 test    ebx, ebx
.text:00411E46                 jz      short loc_411E98
.text:00411E48                 mov     esi, [esp+97Ch+var_8F8]
.text:00411E4F                 movsx   ecx, byte ptr [esi+0Ah]
.text:00411E53                 cmp     edx, ecx
.text:00411E55
.text:00411E55 loc_411E55:                             ; CODE XREF: sub_410970+152B↓j
.text:00411E55                 jnz     loc_411BC9
.text:00411E5B                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:00411E63                 jnz     loc_411BC9
.text:00411E69                 mov     [esp+97Ch+Size], 0Dh
.text:00411E70                 mov     ebp, [esp+97Ch+var_900]
.text:00411E74                 mov     eax, [esp+97Ch+var_950]
.text:00411E78                 mov     edx, [esp+97Ch+var_950]
.text:00411E7C                 sub     ebp, eax
.text:00411E7E                 sub     ebp, 3
.text:00411E81                 mov     [esp+97Ch+var_974], ebp
.text:00411E85                 mov     [esp+97Ch+var_978], edx
.text:00411E89                 call    sub_40D740
.text:00411E8E                 mov     [esp+97Ch+var_91C], 1
.text:00411E93                 jmp     loc_411BEE
.text:00411E98 ; ---------------------------------------------------------------------------
.text:00411E98
.text:00411E98 loc_411E98:                             ; CODE XREF: sub_410970+14D6↑j
.text:00411E98                 cmp     edx, 0Ah
.text:00411E9B                 jmp     short loc_411E55
.text:00411E9D ; ---------------------------------------------------------------------------
.text:00411E9D
.text:00411E9D loc_411E9D:                             ; CODE XREF: sub_410970+14BC↑j
.text:00411E9D                 movsx   edx, byte ptr [edi]
.text:00411EA0                 jmp     short loc_411E3D
.text:00411EA2 ; ---------------------------------------------------------------------------
.text:00411EA2
.text:00411EA2 loc_411EA2:                             ; CODE XREF: sub_410970+1240↑j
.text:00411EA2                 cmp     edx, 2Eh ; '.'
.text:00411EA5                 jmp     loc_411BC3
.text:00411EAA ; ---------------------------------------------------------------------------
.text:00411EAA
.text:00411EAA loc_411EAA:                             ; CODE XREF: sub_410970+121A↑j
.text:00411EAA                 mov     edi, [esp+97Ch+var_8D0]
.text:00411EB1                 movsx   edx, byte ptr [edi-2]
.text:00411EB5                 jmp     loc_411BA7
.text:00411EB5 ; ---------------------------------------------------------------------------
.text:00411EBA                 align 10h
.text:00411EC0
.text:00411EC0 loc_411EC0:                             ; CODE XREF: sub_410970+10F7↑j
.text:00411EC0                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00411EC8                 jnz     loc_411A89
.text:00411ECE                 cmp     edi, [esp+97Ch+var_8F4]
.text:00411ED5                 jz      short loc_411F20
.text:00411ED7                 movzx   ebx, byte ptr [edx+1]
.text:00411EDB                 lea     ebp, [edx+2]
.text:00411EDE                 mov     eax, [esp+97Ch+var_8F8]
.text:00411EE5                 mov     [esp+97Ch+var_8D0], ebp
.text:00411EEC                 test    eax, eax
.text:00411EEE                 jz      short loc_411EFE
.text:00411EF0                 mov     eax, [esp+97Ch+var_8F8]
.text:00411EF7                 movzx   edi, bl
.text:00411EFA                 movzx   ebx, byte ptr [edi+eax]
.text:00411EFE
.text:00411EFE loc_411EFE:                             ; CODE XREF: sub_410970+157E↑j
.text:00411EFE                 cmp     bl, 2Bh ; '+'
.text:00411F01                 jz      short loc_411F08
.text:00411F03                 cmp     bl, 3Fh ; '?'
.text:00411F06                 jnz     short loc_411F14
.text:00411F08
.text:00411F08 loc_411F08:                             ; CODE XREF: sub_410970+1591↑j
.text:00411F08                 mov     [esp+97Ch+var_8EC], bl
.text:00411F0F                 jmp     loc_4119E8
.text:00411F14 ; ---------------------------------------------------------------------------
.text:00411F14
.text:00411F14 loc_411F14:                             ; CODE XREF: sub_410970+1596↑j
.text:00411F14                 mov     [esp+97Ch+var_8D0], edx
.text:00411F1B                 jmp     loc_411A90
.text:00411F20 ; ---------------------------------------------------------------------------
.text:00411F20
.text:00411F20 loc_411F20:                             ; CODE XREF: sub_410970+1565↑j
.text:00411F20                                         ; sub_410970+21FF↓j ...
.text:00411F20                 mov     edi, [esp+97Ch+Block]
.text:00411F27                 mov     ebp, 5
.text:00411F2C                 jmp     loc_410F10
.text:00411F31 ; ---------------------------------------------------------------------------
.text:00411F31
.text:00411F31 loc_411F31:                             ; CODE XREF: sub_410970+1066↑j
.text:00411F31                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:00411F39                 jnz     short loc_411F4E
.text:00411F3B                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:00411F43                 jnz     loc_4119DC
.text:00411F49                 jmp     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00411F4E ; ---------------------------------------------------------------------------
.text:00411F4E
.text:00411F4E loc_411F4E:                             ; CODE XREF: sub_410970+15C9↑j
.text:00411F4E                                         ; sub_410970+31A3↓j
.text:00411F4E                 mov     ecx, [esp+97Ch+Block]
.text:00411F55                 mov     ebp, 0Dh
.text:00411F5A                 jmp     loc_41184C
.text:00411F5A ; ---------------------------------------------------------------------------
.text:00411F5F                 align 10h
.text:00411F60
.text:00411F60 loc_411F60:                             ; CODE XREF: sub_410970+16F↑j
.text:00411F60                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00411F60                 mov     eax, [esp+97Ch+arg_C] ; jumptable 00410ADF case 46
.text:00411F67                 mov     ecx, [esp+97Ch+var_950]
.text:00411F6B                 mov     edi, [eax]
.text:00411F6D                 mov     [esp+97Ch+var_900], ecx
.text:00411F71                 mov     ebp, ecx
.text:00411F73                 mov     edx, [eax+4]
.text:00411F76                 sub     ebp, edi
.text:00411F78                 mov     ebx, edi
.text:00411F7A                 inc     ebp
.text:00411F7B                 cmp     ebp, edx
.text:00411F7D                 jbe     loc_412038
.text:00411F83
.text:00411F83 loc_411F83:                             ; CODE XREF: sub_410970+16C2↓j
.text:00411F83                 cmp     edx, 10000h
.text:00411F89                 mov     ebp, 0Fh
.text:00411F8E                 jz      loc_410D86
.text:00411F94                 mov     esi, [esp+97Ch+arg_C]
.text:00411F9B                 lea     ebp, [edx+edx]
.text:00411F9E                 cmp     ebp, 10000h
.text:00411FA4                 mov     [esi+4], ebp
.text:00411FA7                 jbe     short loc_411FB0
.text:00411FA9                 mov     dword ptr [esi+4], 10000h
.text:00411FB0
.text:00411FB0 loc_411FB0:                             ; CODE XREF: sub_410970+1637↑j
.text:00411FB0                 mov     eax, [esp+97Ch+arg_C]
.text:00411FB7                 mov     ebp, 0Ch
.text:00411FBC                 mov     esi, [eax+4]
.text:00411FBF                 mov     [esp+97Ch+Size], edi ; Block
.text:00411FC2                 mov     [esp+97Ch+var_978], esi ; Size
.text:00411FC6                 call    realloc
.text:00411FCB                 mov     edi, [esp+97Ch+arg_C]
.text:00411FD2                 test    eax, eax
.text:00411FD4                 mov     [edi], eax
.text:00411FD6                 jz      loc_410D86
.text:00411FDC                 cmp     ebx, eax
.text:00411FDE                 jz      short loc_412014
.text:00411FE0                 sub     eax, ebx
.text:00411FE2                 mov     ebx, [esp+97Ch+var_908]
.text:00411FE6                 add     [esp+97Ch+var_950], eax
.text:00411FEA                 add     [esp+97Ch+var_904], eax
.text:00411FEE                 test    ebx, ebx
.text:00411FF0                 jz      short loc_411FF6
.text:00411FF2                 add     [esp+97Ch+var_908], eax
.text:00411FF6
.text:00411FF6 loc_411FF6:                             ; CODE XREF: sub_410970+1680↑j
.text:00411FF6                 mov     edx, [esp+97Ch+var_900]
.text:00411FFA                 test    edx, edx
.text:00411FFC                 jz      short loc_412002
.text:00411FFE                 add     [esp+97Ch+var_900], eax
.text:00412002
.text:00412002 loc_412002:                             ; CODE XREF: sub_410970+168C↑j
.text:00412002                 mov     ecx, [esp+97Ch+var_8FC]
.text:00412009                 test    ecx, ecx
.text:0041200B                 jz      short loc_412014
.text:0041200D                 add     [esp+97Ch+var_8FC], eax
.text:00412014
.text:00412014 loc_412014:                             ; CODE XREF: sub_410970+166E↑j
.text:00412014                                         ; sub_410970+169B↑j
.text:00412014                 mov     esi, [esp+97Ch+arg_C]
.text:0041201B                 mov     eax, [esp+97Ch+arg_C]
.text:00412022                 mov     ebp, [esp+97Ch+var_950]
.text:00412026                 mov     edi, [esi]
.text:00412028                 mov     edx, [eax+4]
.text:0041202B                 sub     ebp, edi
.text:0041202D                 inc     ebp
.text:0041202E                 mov     ebx, edi
.text:00412030                 cmp     ebp, edx
.text:00412032                 ja      loc_411F83
.text:00412038
.text:00412038 loc_412038:                             ; CODE XREF: sub_410970+160D↑j
.text:00412038                 mov     edi, [esp+97Ch+var_950]
.text:0041203C                 mov     byte ptr [edi], 3
.text:0041203F                 jmp     loc_410D9A
.text:00412044 ; ---------------------------------------------------------------------------
.text:00412044
.text:00412044 loc_412044:                             ; CODE XREF: sub_410970+16F↑j
.text:00412044                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00412044                 test    [esp+97Ch+arg_8], 402h ; jumptable 00410ADF cases 43,63
.text:0041204F                 jz      loc_4119D0      ; jumptable 00410ADF case 42
.text:00412055                 jmp     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041205A ; ---------------------------------------------------------------------------
.text:0041205A
.text:0041205A loc_41205A:                             ; CODE XREF: sub_410970+16F↑j
.text:0041205A                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:0041205A                 mov     [esp+97Ch+var_91E], 0 ; jumptable 00410ADF case 91
.text:0041205F                 mov     edi, [esp+97Ch+var_8F4]
.text:00412066                 cmp     [esp+97Ch+var_8D0], edi
.text:0041206D                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00412075                 jz      loc_4125CF
.text:0041207B
.text:0041207B loc_41207B:                             ; CODE XREF: sub_410970+1784↓j
.text:0041207B                                         ; sub_410970+17B1↓j ...
.text:0041207B                 mov     ebp, [esp+97Ch+arg_C]
.text:00412082                 mov     ecx, [esp+97Ch+var_950]
.text:00412086                 mov     edi, [ebp+0]
.text:00412089                 mov     edx, [ebp+4]
.text:0041208C                 sub     ecx, edi
.text:0041208E                 lea     ebx, [ecx+22h]
.text:00412091                 cmp     ebx, edx
.text:00412093                 jbe     loc_412133
.text:00412099                 cmp     edx, 10000h
.text:0041209F                 mov     ebp, 0Fh
.text:004120A4                 jz      loc_410D86
.text:004120AA                 lea     ebx, [edx+edx]
.text:004120AD                 mov     edx, [esp+97Ch+arg_C]
.text:004120B4                 cmp     ebx, 10000h
.text:004120BA                 mov     [edx+4], ebx
.text:004120BD                 jbe     short loc_4120C6
.text:004120BF                 mov     dword ptr [edx+4], 10000h
.text:004120C6
.text:004120C6 loc_4120C6:                             ; CODE XREF: sub_410970+174D↑j
.text:004120C6                 mov     eax, [esp+97Ch+arg_C]
.text:004120CD                 mov     ebp, [eax+4]
.text:004120D0                 mov     [esp+97Ch+Size], edi ; Block
.text:004120D3                 mov     [esp+97Ch+var_978], ebp ; Size
.text:004120D7                 mov     ebp, 0Ch
.text:004120DC                 call    realloc
.text:004120E1                 mov     edx, [esp+97Ch+arg_C]
.text:004120E8                 test    eax, eax
.text:004120EA                 mov     [edx], eax
.text:004120EC                 jz      loc_410D86
.text:004120F2                 cmp     edi, eax
.text:004120F4                 jz      short loc_41207B
.text:004120F6                 mov     ecx, [esp+97Ch+var_908]
.text:004120FA                 sub     eax, edi
.text:004120FC                 add     [esp+97Ch+var_950], eax
.text:00412100                 add     [esp+97Ch+var_904], eax
.text:00412104                 test    ecx, ecx
.text:00412106                 jz      short loc_41210C
.text:00412108                 add     [esp+97Ch+var_908], eax
.text:0041210C
.text:0041210C loc_41210C:                             ; CODE XREF: sub_410970+1796↑j
.text:0041210C                 mov     esi, [esp+97Ch+var_900]
.text:00412110                 test    esi, esi
.text:00412112                 jz      short loc_412118
.text:00412114                 add     [esp+97Ch+var_900], eax
.text:00412118
.text:00412118 loc_412118:                             ; CODE XREF: sub_410970+17A2↑j
.text:00412118                 mov     edi, [esp+97Ch+var_8FC]
.text:0041211F                 test    edi, edi
.text:00412121                 jz      loc_41207B
.text:00412127                 add     [esp+97Ch+var_8FC], eax
.text:0041212E                 jmp     loc_41207B
.text:00412133 ; ---------------------------------------------------------------------------
.text:00412133
.text:00412133 loc_412133:                             ; CODE XREF: sub_410970+1723↑j
.text:00412133                 mov     ebx, [esp+97Ch+var_950]
.text:00412137                 lea     esi, [ecx+1]
.text:0041213A                 cmp     esi, edx
.text:0041213C                 mov     [esp+97Ch+var_900], ebx
.text:00412140                 mov     ebx, edi
.text:00412142                 jbe     loc_4121FD
.text:00412148
.text:00412148 loc_412148:                             ; CODE XREF: sub_410970+1887↓j
.text:00412148                 cmp     edx, 10000h
.text:0041214E                 mov     ebp, 0Fh
.text:00412153                 jz      loc_410D86
.text:00412159                 lea     ecx, [edx+edx]
.text:0041215C                 mov     edx, [esp+97Ch+arg_C]
.text:00412163                 cmp     ecx, 10000h
.text:00412169                 mov     [edx+4], ecx
.text:0041216C                 jbe     short loc_412175
.text:0041216E                 mov     dword ptr [edx+4], 10000h
.text:00412175
.text:00412175 loc_412175:                             ; CODE XREF: sub_410970+17FC↑j
.text:00412175                 mov     eax, [esp+97Ch+arg_C]
.text:0041217C                 mov     ebp, [eax+4]
.text:0041217F                 mov     [esp+97Ch+Size], edi ; Block
.text:00412182                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00412186                 mov     ebp, 0Ch
.text:0041218B                 call    realloc
.text:00412190                 mov     edx, [esp+97Ch+arg_C]
.text:00412197                 test    eax, eax
.text:00412199                 mov     [edx], eax
.text:0041219B                 jz      loc_410D86
.text:004121A1                 cmp     ebx, eax
.text:004121A3                 jz      short loc_4121D9
.text:004121A5                 mov     edi, [esp+97Ch+var_908]
.text:004121A9                 sub     eax, ebx
.text:004121AB                 add     [esp+97Ch+var_950], eax
.text:004121AF                 add     [esp+97Ch+var_904], eax
.text:004121B3                 test    edi, edi
.text:004121B5                 jz      short loc_4121BB
.text:004121B7                 add     [esp+97Ch+var_908], eax
.text:004121BB
.text:004121BB loc_4121BB:                             ; CODE XREF: sub_410970+1845↑j
.text:004121BB                 mov     esi, [esp+97Ch+var_900]
.text:004121BF                 test    esi, esi
.text:004121C1                 jz      short loc_4121C7
.text:004121C3                 add     [esp+97Ch+var_900], eax
.text:004121C7
.text:004121C7 loc_4121C7:                             ; CODE XREF: sub_410970+1851↑j
.text:004121C7                 mov     ebx, [esp+97Ch+var_8FC]
.text:004121CE                 test    ebx, ebx
.text:004121D0                 jz      short loc_4121D9
.text:004121D2                 add     [esp+97Ch+var_8FC], eax
.text:004121D9
.text:004121D9 loc_4121D9:                             ; CODE XREF: sub_410970+1833↑j
.text:004121D9                                         ; sub_410970+1860↑j
.text:004121D9                 mov     ecx, [esp+97Ch+arg_C]
.text:004121E0                 mov     eax, [esp+97Ch+arg_C]
.text:004121E7                 mov     ebp, [esp+97Ch+var_950]
.text:004121EB                 mov     edi, [ecx]
.text:004121ED                 mov     edx, [eax+4]
.text:004121F0                 sub     ebp, edi
.text:004121F2                 inc     ebp
.text:004121F3                 mov     ebx, edi
.text:004121F5                 cmp     ebp, edx
.text:004121F7                 ja      loc_412148
.text:004121FD
.text:004121FD loc_4121FD:                             ; CODE XREF: sub_410970+17D2↑j
.text:004121FD                 mov     edi, [esp+97Ch+var_950]
.text:00412201                 mov     bl, 5
.text:00412203                 mov     edx, [esp+97Ch+var_8D0]
.text:0041220A                 inc     [esp+97Ch+var_950]
.text:0041220E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:00412211                 setnz   al
.text:00412214                 sub     bl, al
.text:00412216                 mov     [edi], bl
.text:00412218                 mov     edi, [esp+97Ch+var_8D0]
.text:0041221F                 cmp     byte ptr [edi], 5Eh ; '^'
.text:00412222                 jz      loc_412BD9
.text:00412228
.text:00412228 loc_412228:                             ; CODE XREF: sub_410970+2271↓j
.text:00412228                 mov     [esp+97Ch+var_8F0], edi
.text:0041222F                 mov     esi, [esp+97Ch+arg_C]
.text:00412236                 mov     ecx, [esp+97Ch+arg_C]
.text:0041223D                 mov     ebp, [esp+97Ch+var_950]
.text:00412241                 mov     edi, [esi]
.text:00412243                 mov     edx, [ecx+4]
.text:00412246                 sub     ebp, edi
.text:00412248                 mov     ebx, edi
.text:0041224A                 inc     ebp
.text:0041224B                 cmp     ebp, edx
.text:0041224D                 jbe     loc_412308
.text:00412253
.text:00412253 loc_412253:                             ; CODE XREF: sub_410970+1992↓j
.text:00412253                 cmp     edx, 10000h
.text:00412259                 mov     ebp, 0Fh
.text:0041225E                 jz      loc_410D86
.text:00412264                 lea     ebp, [edx+edx]
.text:00412267                 mov     edx, [esp+97Ch+arg_C]
.text:0041226E                 cmp     ebp, 10000h
.text:00412274                 mov     [edx+4], ebp
.text:00412277                 jbe     short loc_412280
.text:00412279                 mov     dword ptr [edx+4], 10000h
.text:00412280
.text:00412280 loc_412280:                             ; CODE XREF: sub_410970+1907↑j
.text:00412280                 mov     eax, [esp+97Ch+arg_C]
.text:00412287                 mov     ebp, 0Ch
.text:0041228C                 mov     edx, [eax+4]
.text:0041228F                 mov     [esp+97Ch+Size], edi ; Block
.text:00412292                 mov     [esp+97Ch+var_978], edx ; Size
.text:00412296                 call    realloc
.text:0041229B                 mov     edi, [esp+97Ch+arg_C]
.text:004122A2                 test    eax, eax
.text:004122A4                 mov     [edi], eax
.text:004122A6                 jz      loc_410D86
.text:004122AC                 cmp     ebx, eax
.text:004122AE                 jz      short loc_4122E4
.text:004122B0                 mov     ecx, [esp+97Ch+var_908]
.text:004122B4                 sub     eax, ebx
.text:004122B6                 add     [esp+97Ch+var_950], eax
.text:004122BA                 add     [esp+97Ch+var_904], eax
.text:004122BE                 test    ecx, ecx
.text:004122C0                 jz      short loc_4122C6
.text:004122C2                 add     [esp+97Ch+var_908], eax
.text:004122C6
.text:004122C6 loc_4122C6:                             ; CODE XREF: sub_410970+1950↑j
.text:004122C6                 mov     ebx, [esp+97Ch+var_900]
.text:004122CA                 test    ebx, ebx
.text:004122CC                 jz      short loc_4122D2
.text:004122CE                 add     [esp+97Ch+var_900], eax
.text:004122D2
.text:004122D2 loc_4122D2:                             ; CODE XREF: sub_410970+195C↑j
.text:004122D2                 mov     esi, [esp+97Ch+var_8FC]
.text:004122D9                 test    esi, esi
.text:004122DB                 jz      short loc_4122E4
.text:004122DD                 add     [esp+97Ch+var_8FC], eax
.text:004122E4
.text:004122E4 loc_4122E4:                             ; CODE XREF: sub_410970+193E↑j
.text:004122E4                                         ; sub_410970+196B↑j
.text:004122E4                 mov     edx, [esp+97Ch+arg_C]
.text:004122EB                 mov     eax, [esp+97Ch+arg_C]
.text:004122F2                 mov     ebp, [esp+97Ch+var_950]
.text:004122F6                 mov     edi, [edx]
.text:004122F8                 mov     edx, [eax+4]
.text:004122FB                 sub     ebp, edi
.text:004122FD                 inc     ebp
.text:004122FE                 mov     ebx, edi
.text:00412300                 cmp     ebp, edx
.text:00412302                 ja      loc_412253
.text:00412308
.text:00412308 loc_412308:                             ; CODE XREF: sub_410970+18DD↑j
.text:00412308                 cld
.text:00412309                 mov     ebx, [esp+97Ch+var_950]
.text:0041230D                 xor     eax, eax
.text:0041230F                 mov     ecx, 8
.text:00412314                 mov     byte ptr [ebx], 20h ; ' '
.text:00412317                 inc     ebx
.text:00412318                 mov     edi, ebx
.text:0041231A                 mov     [esp+97Ch+var_950], ebx
.text:0041231E                 rep stosd
.text:00412320                 cmp     byte ptr [ebx-2], 5
.text:00412324                 jz      loc_412BBF
.text:0041232A
.text:0041232A loc_41232A:                             ; CODE XREF: sub_410970+1ACD↓j
.text:0041232A                                         ; sub_410970+1BD8↓j ...
.text:0041232A                 mov     edx, [esp+97Ch+var_8D0]
.text:00412331                 cmp     edx, [esp+97Ch+var_8F4]
.text:00412338                 jz      loc_4125CF
.text:0041233E                 movzx   eax, byte ptr [edx]
.text:00412341                 lea     edi, [edx+1]
.text:00412344                 mov     ecx, [esp+97Ch+var_8F8]
.text:0041234B                 mov     [esp+97Ch+var_8D0], edi
.text:00412352                 test    ecx, ecx
.text:00412354                 mov     [esp+97Ch+var_8EC], al
.text:0041235B                 jz      short loc_412372
.text:0041235D                 mov     ebp, [esp+97Ch+var_8F8]
.text:00412364                 movzx   esi, al
.text:00412367                 movzx   ebx, byte ptr [esi+ebp]
.text:0041236B                 mov     [esp+97Ch+var_8EC], bl
.text:00412372
.text:00412372 loc_412372:                             ; CODE XREF: sub_410970+19EB↑j
.text:00412372                 test    byte ptr [esp+97Ch+arg_8], 1
.text:0041237A                 jz      short loc_41238A
.text:0041237C                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00412384                 jz      loc_412B68
.text:0041238A
.text:0041238A loc_41238A:                             ; CODE XREF: sub_410970+1A0A↑j
.text:0041238A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:00412392                 jz      loc_412B24
.text:00412398                 mov     edi, [esp+97Ch+var_8D0]
.text:0041239F
.text:0041239F loc_41239F:                             ; CODE XREF: sub_410970+21C5↓j
.text:0041239F                 cmp     [esp+97Ch+var_91E], 0
.text:004123A4                 jz      loc_412A89
.text:004123AA                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:004123B2                 jz      loc_412A80
.text:004123B8
.text:004123B8 loc_4123B8:                             ; CODE XREF: sub_410970+2121↓j
.text:004123B8                                         ; sub_410970+2137↓j ...
.text:004123B8                 cmp     byte ptr [edi], 2Dh ; '-'
.text:004123BB                 jz      loc_4129F0
.text:004123C1
.text:004123C1 loc_4123C1:                             ; CODE XREF: sub_410970+2084↓j
.text:004123C1                 test    byte ptr [esp+97Ch+arg_8], 4
.text:004123C9                 jz      short loc_4123D9
.text:004123CB                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:004123D3                 jz      loc_412756
.text:004123D9
.text:004123D9 loc_4123D9:                             ; CODE XREF: sub_410970+1A59↑j
.text:004123D9                                         ; sub_410970+1DE9↓j
.text:004123D9                 test    byte ptr [esp+97Ch+arg_8], 4
.text:004123E1                 jz      short loc_4123F1
.text:004123E3                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:004123EB                 jz      loc_4125E3
.text:004123F1
.text:004123F1 loc_4123F1:                             ; CODE XREF: sub_410970+1A71↑j
.text:004123F1                                         ; sub_410970+1C76↓j
.text:004123F1                 test    byte ptr [esp+97Ch+arg_8], 4
.text:004123F9                 jz      short loc_412405
.text:004123FB                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:00412403                 jz      short loc_412442
.text:00412405
.text:00412405 loc_412405:                             ; CODE XREF: sub_410970+1A89↑j
.text:00412405                                         ; sub_410970+1AD5↓j
.text:00412405                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0041240D                 mov     edx, 1
.text:00412412                 mov     [esp+97Ch+var_91E], 0
.text:00412417                 mov     esi, [esp+97Ch+var_950]
.text:0041241B                 shr     cl, 3
.text:0041241E                 movzx   edi, cl
.text:00412421                 movzx   ecx, [esp+97Ch+var_8EC]
.text:00412429                 and     ecx, 7
.text:0041242C                 shl     edx, cl
.text:0041242E                 or      [edi+esi], dl
.text:00412431                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00412439
.text:00412439 loc_412439:                             ; CODE XREF: sub_410970+224A↓j
.text:00412439                 mov     [esp+97Ch+var_924], ebx
.text:0041243D                 jmp     loc_41232A
.text:00412442 ; ---------------------------------------------------------------------------
.text:00412442
.text:00412442 loc_412442:                             ; CODE XREF: sub_410970+1A93↑j
.text:00412442                 cmp     byte ptr [edi], 2Eh ; '.'
.text:00412445                 jnz     short loc_412405
.text:00412447                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041244E                 mov     ebp, 0Eh
.text:00412453                 jz      loc_410D86
.text:00412459                 inc     edi
.text:0041245A                 xor     ebx, ebx
.text:0041245C                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412463                 mov     [esp+97Ch+var_8D0], edi
.text:0041246A                 jz      loc_4125CF
.text:00412470
.text:00412470 loc_412470:                             ; CODE XREF: sub_410970+1B75↓j
.text:00412470                 movzx   eax, byte ptr [edi]
.text:00412473                 inc     edi
.text:00412474                 mov     esi, [esp+97Ch+var_8F8]
.text:0041247B                 mov     [esp+97Ch+var_8D0], edi
.text:00412482                 test    esi, esi
.text:00412484                 mov     [esp+97Ch+var_8EC], al
.text:0041248B                 jz      short loc_4124A3
.text:0041248D                 mov     esi, [esp+97Ch+var_8F8]
.text:00412494                 movzx   ebp, al
.text:00412497                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0041249C                 mov     [esp+97Ch+var_8EC], cl
.text:004124A3
.text:004124A3 loc_4124A3:                             ; CODE XREF: sub_410970+1B1B↑j
.text:004124A3                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:004124AB                 jz      loc_4125C1
.text:004124B1
.text:004124B1 loc_4124B1:                             ; CODE XREF: sub_410970+1C54↓j
.text:004124B1                 cmp     edi, [esp+97Ch+var_8F4]
.text:004124B8                 jz      short loc_4124FA
.text:004124BA                 test    bl, bl
.text:004124BC                 js      short loc_4124F0
.text:004124BE                 movzx   eax, [esp+97Ch+var_8EC]
.text:004124C6                 movzx   edx, bl
.text:004124C9                 inc     bl
.text:004124CB                 mov     [esp+edx+97Ch+var_8CC], al
.text:004124D2                 mov     edi, [esp+97Ch+var_8D0]
.text:004124D9
.text:004124D9 loc_4124D9:                             ; CODE XREF: sub_410970+1B88↓j
.text:004124D9                 cmp     edi, [esp+97Ch+var_8F4]
.text:004124E0                 mov     ebp, 0Eh
.text:004124E5                 jnz     short loc_412470
.text:004124E7                 jmp     loc_410D86
.text:004124E7 ; ---------------------------------------------------------------------------
.text:004124EC                 align 10h
.text:004124F0
.text:004124F0 loc_4124F0:                             ; CODE XREF: sub_410970+1B4C↑j
.text:004124F0                 mov     [esp+97Ch+var_8CC], 0
.text:004124F8                 jmp     short loc_4124D9
.text:004124FA ; ---------------------------------------------------------------------------
.text:004124FA
.text:004124FA loc_4124FA:                             ; CODE XREF: sub_410970+1B48↑j
.text:004124FA                                         ; sub_410970+1C5A↓j
.text:004124FA                 xor     ecx, ecx
.text:004124FC                 movzx   edi, bl
.text:004124FF                 mov     [esp+edi+97Ch+var_8CC], cl
.text:00412506                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0041250E                 jz      short loc_41254D
.text:00412510
.text:00412510 loc_412510:                             ; CODE XREF: sub_410970+1BE7↓j
.text:00412510                                         ; sub_410970+1BF3↓j
.text:00412510                 cmp     bl, 0FFh
.text:00412513                 jz      short loc_41252F
.text:00412515                 mov     eax, [esp+97Ch+var_8D0]
.text:0041251C
.text:0041251C loc_41251C:                             ; CODE XREF: sub_410970+1BB6↓j
.text:0041251C                 dec     bl
.text:0041251E                 lea     edi, [eax-1]
.text:00412521                 cmp     bl, 0FFh
.text:00412524                 mov     eax, edi
.text:00412526                 jnz     short loc_41251C
.text:00412528                 mov     [esp+97Ch+var_8D0], edi
.text:0041252F
.text:0041252F loc_41252F:                             ; CODE XREF: sub_410970+1BA3↑j
.text:0041252F                 mov     eax, [esp+97Ch+var_950]
.text:00412533                 or      byte ptr [eax+0Bh], 8
.text:00412537                 or      byte ptr [eax+5], 40h
.text:0041253B                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:00412543
.text:00412543 loc_412543:                             ; CODE XREF: sub_410970+1C3B↓j
.text:00412543                                         ; sub_410970+1D73↓j ...
.text:00412543                 mov     [esp+97Ch+var_91E], 0
.text:00412548                 jmp     loc_41232A
.text:0041254D ; ---------------------------------------------------------------------------
.text:0041254D
.text:0041254D loc_41254D:                             ; CODE XREF: sub_410970+1B9E↑j
.text:0041254D                 mov     eax, [esp+97Ch+var_8D0]
.text:00412554                 cmp     byte ptr [eax], 5Dh ; ']'
.text:00412557                 jnz     short loc_412510
.text:00412559                 movzx   ecx, [esp+97Ch+var_8CC]
.text:00412561                 test    cl, cl
.text:00412563                 jz      short loc_412510
.text:00412565                 dec     bl
.text:00412567                 jnz     short loc_4125AD
.text:00412569                 cmp     eax, [esp+97Ch+var_8F4]
.text:00412570                 mov     ebp, 0Eh
.text:00412575                 jz      loc_410D86
.text:0041257B                 mov     bl, cl
.text:0041257D                 mov     esi, [esp+97Ch+var_950]
.text:00412581                 lea     ebp, [eax+1]
.text:00412584                 mov     [esp+97Ch+var_8D0], ebp
.text:0041258B                 shr     bl, 3
.text:0041258E                 and     ecx, 7
.text:00412591                 mov     edx, 1
.text:00412596                 movzx   ebp, bl
.text:00412599                 shl     edx, cl
.text:0041259B                 or      [ebp+esi+0], dl
.text:0041259F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:004125A7                 mov     [esp+97Ch+var_924], ebx
.text:004125AB                 jmp     short loc_412543
.text:004125AD ; ---------------------------------------------------------------------------
.text:004125AD
.text:004125AD loc_4125AD:                             ; CODE XREF: sub_410970+1BF7↑j
.text:004125AD                                         ; sub_410970+1D92↓j
.text:004125AD                 mov     edx, [esp+97Ch+Block]
.text:004125B4                 mov     ebp, 3
.text:004125B9                 mov     [esp+97Ch+Size], edx
.text:004125BC                 jmp     loc_410F13
.text:004125C1 ; ---------------------------------------------------------------------------
.text:004125C1
.text:004125C1 loc_4125C1:                             ; CODE XREF: sub_410970+1B3B↑j
.text:004125C1                 cmp     byte ptr [edi], 5Dh ; ']'
.text:004125C4                 jnz     loc_4124B1
.text:004125CA                 jmp     loc_4124FA
.text:004125CF ; ---------------------------------------------------------------------------
.text:004125CF
.text:004125CF loc_4125CF:                             ; CODE XREF: sub_410970+1705↑j
.text:004125CF                                         ; sub_410970+19C8↑j ...
.text:004125CF                 mov     ebp, [esp+97Ch+Block]
.text:004125D6                 mov     [esp+97Ch+Size], ebp
.text:004125D9                 mov     ebp, 7
.text:004125DE                 jmp     loc_410F13
.text:004125E3 ; ---------------------------------------------------------------------------
.text:004125E3
.text:004125E3 loc_4125E3:                             ; CODE XREF: sub_410970+1A7B↑j
.text:004125E3                 cmp     byte ptr [edi], 3Dh ; '='
.text:004125E6                 jnz     loc_4123F1
.text:004125EC                 cmp     edi, [esp+97Ch+var_8F4]
.text:004125F3                 mov     ebp, 0Eh
.text:004125F8                 jz      loc_410D86
.text:004125FE                 inc     edi
.text:004125FF                 xor     ebx, ebx
.text:00412601                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412608                 mov     [esp+97Ch+var_8D0], edi
.text:0041260F                 jz      short loc_4125CF
.text:00412611
.text:00412611 loc_412611:                             ; CODE XREF: sub_410970+1D17↓j
.text:00412611                 movzx   eax, byte ptr [edi]
.text:00412614                 inc     edi
.text:00412615                 mov     esi, [esp+97Ch+var_8F8]
.text:0041261C                 mov     [esp+97Ch+var_8D0], edi
.text:00412623                 test    esi, esi
.text:00412625                 mov     [esp+97Ch+var_8EC], al
.text:0041262C                 jz      short loc_412644
.text:0041262E                 mov     esi, [esp+97Ch+var_8F8]
.text:00412635                 movzx   ebp, al
.text:00412638                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0041263D                 mov     [esp+97Ch+var_8EC], cl
.text:00412644
.text:00412644 loc_412644:                             ; CODE XREF: sub_410970+1CBC↑j
.text:00412644                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0041264C                 jz      loc_412748
.text:00412652
.text:00412652 loc_412652:                             ; CODE XREF: sub_410970+1DDB↓j
.text:00412652                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412659                 jz      short loc_41269A
.text:0041265B                 cmp     bl, 1
.text:0041265E                 ja      short loc_412690
.text:00412660                 movzx   edx, [esp+97Ch+var_8EC]
.text:00412668                 movzx   edi, bl
.text:0041266B                 inc     bl
.text:0041266D                 mov     [esp+edi+97Ch+var_84C], dl
.text:00412674                 mov     edi, [esp+97Ch+var_8D0]
.text:0041267B
.text:0041267B loc_41267B:                             ; CODE XREF: sub_410970+1D28↓j
.text:0041267B                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412682                 mov     ebp, 0Eh
.text:00412687                 jnz     short loc_412611
.text:00412689                 jmp     loc_410D86
.text:00412689 ; ---------------------------------------------------------------------------
.text:0041268E                 align 10h
.text:00412690
.text:00412690 loc_412690:                             ; CODE XREF: sub_410970+1CEE↑j
.text:00412690                 mov     [esp+97Ch+var_84C], 0
.text:00412698                 jmp     short loc_41267B
.text:0041269A ; ---------------------------------------------------------------------------
.text:0041269A
.text:0041269A loc_41269A:                             ; CODE XREF: sub_410970+1CE9↑j
.text:0041269A                                         ; sub_410970+1DE1↓j
.text:0041269A                 xor     eax, eax
.text:0041269C                 movzx   ecx, bl
.text:0041269F                 mov     [esp+ecx+97Ch+var_84C], al
.text:004126A6                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:004126AE                 jz      short loc_4126E8
.text:004126B0
.text:004126B0 loc_4126B0:                             ; CODE XREF: sub_410970+1D82↓j
.text:004126B0                                         ; sub_410970+1D8E↓j
.text:004126B0                 cmp     bl, 0FFh
.text:004126B3                 jz      short loc_4126CF
.text:004126B5                 mov     eax, [esp+97Ch+var_8D0]
.text:004126BC
.text:004126BC loc_4126BC:                             ; CODE XREF: sub_410970+1D56↓j
.text:004126BC                 dec     bl
.text:004126BE                 lea     edi, [eax-1]
.text:004126C1                 cmp     bl, 0FFh
.text:004126C4                 mov     eax, edi
.text:004126C6                 jnz     short loc_4126BC
.text:004126C8                 mov     [esp+97Ch+var_8D0], edi
.text:004126CF
.text:004126CF loc_4126CF:                             ; CODE XREF: sub_410970+1D43↑j
.text:004126CF                 mov     edi, [esp+97Ch+var_950]
.text:004126D3                 or      byte ptr [edi+0Bh], 8
.text:004126D7                 or      byte ptr [edi+7], 20h
.text:004126DB                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:004126E3                 jmp     loc_412543
.text:004126E8 ; ---------------------------------------------------------------------------
.text:004126E8
.text:004126E8 loc_4126E8:                             ; CODE XREF: sub_410970+1D3E↑j
.text:004126E8                 mov     eax, [esp+97Ch+var_8D0]
.text:004126EF                 cmp     byte ptr [eax], 5Dh ; ']'
.text:004126F2                 jnz     short loc_4126B0
.text:004126F4                 movzx   ecx, [esp+97Ch+var_84C]
.text:004126FC                 test    cl, cl
.text:004126FE                 jz      short loc_4126B0
.text:00412700                 dec     bl
.text:00412702                 jnz     loc_4125AD
.text:00412708                 cmp     eax, [esp+97Ch+var_8F4]
.text:0041270F                 mov     ebp, 0Eh
.text:00412714                 jz      loc_410D86
.text:0041271A                 mov     dl, cl
.text:0041271C                 mov     esi, [esp+97Ch+var_950]
.text:00412720                 lea     ebp, [eax+1]
.text:00412723                 mov     [esp+97Ch+var_8D0], ebp
.text:0041272A                 shr     dl, 3
.text:0041272D                 and     ecx, 7
.text:00412730                 mov     ebx, 1
.text:00412735                 movzx   ebp, dl
.text:00412738                 shl     ebx, cl
.text:0041273A                 or      [ebp+esi+0], bl
.text:0041273E                 mov     [esp+97Ch+var_91E], 1
.text:00412743                 jmp     loc_41232A
.text:00412748 ; ---------------------------------------------------------------------------
.text:00412748
.text:00412748 loc_412748:                             ; CODE XREF: sub_410970+1CDC↑j
.text:00412748                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0041274B                 jnz     loc_412652
.text:00412751                 jmp     loc_41269A
.text:00412756 ; ---------------------------------------------------------------------------
.text:00412756
.text:00412756 loc_412756:                             ; CODE XREF: sub_410970+1A63↑j
.text:00412756                 cmp     byte ptr [edi], 3Ah ; ':'
.text:00412759                 jnz     loc_4123D9
.text:0041275F                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412766                 mov     ebp, 0Eh
.text:0041276B                 jz      loc_410D86
.text:00412771                 inc     edi
.text:00412772                 xor     ebx, ebx
.text:00412774                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041277B                 mov     [esp+97Ch+var_8D0], edi
.text:00412782                 jz      loc_4125CF
.text:00412788
.text:00412788 loc_412788:                             ; CODE XREF: sub_410970+1E89↓j
.text:00412788                 movzx   ecx, byte ptr [edi]
.text:0041278B                 inc     edi
.text:0041278C                 mov     ebp, [esp+97Ch+var_8F8]
.text:00412793                 mov     [esp+97Ch+var_8D0], edi
.text:0041279A                 test    ebp, ebp
.text:0041279C                 mov     [esp+97Ch+var_8EC], cl
.text:004127A3                 jz      short loc_4127BB
.text:004127A5                 movzx   ebp, cl
.text:004127A8                 mov     ecx, [esp+97Ch+var_8F8]
.text:004127AF                 movzx   edx, byte ptr [ebp+ecx+0]
.text:004127B4                 mov     [esp+97Ch+var_8EC], dl
.text:004127BB
.text:004127BB loc_4127BB:                             ; CODE XREF: sub_410970+1E33↑j
.text:004127BB                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:004127C3                 jz      loc_4129E0
.text:004127C9
.text:004127C9 loc_4127C9:                             ; CODE XREF: sub_410970+2073↓j
.text:004127C9                 cmp     edi, [esp+97Ch+var_8F4]
.text:004127D0                 jz      short loc_412800
.text:004127D2                 movzx   eax, [esp+97Ch+var_8EC]
.text:004127DA                 movzx   esi, bl
.text:004127DD                 inc     bl
.text:004127DF                 mov     ebp, 0Eh
.text:004127E4                 mov     [esp+esi+97Ch+name], al
.text:004127EB                 mov     edi, [esp+97Ch+var_8D0]
.text:004127F2                 cmp     edi, [esp+97Ch+var_8F4]
.text:004127F9                 jnz     short loc_412788
.text:004127FB                 jmp     loc_410D86
.text:00412800 ; ---------------------------------------------------------------------------
.text:00412800
.text:00412800 loc_412800:                             ; CODE XREF: sub_410970+1E60↑j
.text:00412800                                         ; sub_410970+2079↓j
.text:00412800                 xor     eax, eax
.text:00412802                 movzx   edi, bl
.text:00412805                 mov     [esp+edi+97Ch+name], al
.text:0041280C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:00412814                 jz      short loc_41284E
.text:00412816
.text:00412816 loc_412816:                             ; CODE XREF: sub_410970+1EE8↓j
.text:00412816                 cmp     bl, 0FFh
.text:00412819                 jz      short loc_412835
.text:0041281B                 mov     eax, [esp+97Ch+var_8D0]
.text:00412822
.text:00412822 loc_412822:                             ; CODE XREF: sub_410970+1EBC↓j
.text:00412822                 dec     bl
.text:00412824                 lea     edi, [eax-1]
.text:00412827                 cmp     bl, 0FFh
.text:0041282A                 mov     eax, edi
.text:0041282C                 jnz     short loc_412822
.text:0041282E                 mov     [esp+97Ch+var_8D0], edi
.text:00412835
.text:00412835 loc_412835:                             ; CODE XREF: sub_410970+1EA9↑j
.text:00412835                 mov     eax, [esp+97Ch+var_950]
.text:00412839                 or      byte ptr [eax+0Bh], 8
.text:0041283D                 or      byte ptr [eax+7], 4
.text:00412841                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:00412849                 jmp     loc_412543
.text:0041284E ; ---------------------------------------------------------------------------
.text:0041284E
.text:0041284E loc_41284E:                             ; CODE XREF: sub_410970+1EA4↑j
.text:0041284E                 mov     esi, [esp+97Ch+var_8D0]
.text:00412855                 cmp     byte ptr [esi], 5Dh ; ']'
.text:00412858                 jnz     short loc_412816
.text:0041285A                 cld
.text:0041285B                 mov     edi, offset aLower ; "lower"
.text:00412860                 lea     ebx, [esp+97Ch+name]
.text:00412867                 mov     esi, ebx
.text:00412869                 mov     ecx, 6
.text:0041286E                 lea     ebp, [esp+97Ch+name]
.text:00412875                 repe cmpsb
.text:00412877                 setz    [esp+97Ch+var_925]
.text:0041287C                 mov     ecx, 6
.text:00412881                 mov     edi, offset aUpper ; "upper"
.text:00412886                 mov     esi, ebp
.text:00412888                 lea     edx, [esp+97Ch+name]
.text:0041288F                 repe cmpsb
.text:00412891                 setz    [esp+97Ch+var_926]
.text:00412896                 mov     [esp+97Ch+Size], edx ; name
.text:00412899                 call    wctype
.text:0041289E                 movzx   ebx, ax
.text:004128A1                 test    bx, bx
.text:004128A4                 mov     dword ptr [esp+97Ch+Type], ebx
.text:004128A8                 jz      loc_4129CC
.text:004128AE                 mov     eax, [esp+97Ch+var_8D0]
.text:004128B5                 mov     ebp, 0Eh
.text:004128BA                 cmp     eax, [esp+97Ch+var_8F4]
.text:004128C1                 jz      loc_410D86
.text:004128C7                 lea     ecx, [eax+1]
.text:004128CA                 cmp     ecx, [esp+97Ch+var_8F4]
.text:004128D1                 mov     [esp+97Ch+var_8D0], ecx
.text:004128D8                 jz      loc_4125CF
.text:004128DE                 xor     edi, edi
.text:004128E0
.text:004128E0 loc_4128E0:                             ; CODE XREF: sub_410970+202E↓j
.text:004128E0                 mov     [esp+97Ch+Size], edi ; Ch
.text:004128E3                 call    btowc
.text:004128E8                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:004128EC                 movzx   esi, ax
.text:004128EF                 mov     [esp+97Ch+Size], esi ; C
.text:004128F2                 mov     [esp+97Ch+var_978], ebp ; Type
.text:004128F6                 call    iswctype
.text:004128FB                 test    eax, eax
.text:004128FD                 jz      short loc_41291C
.text:004128FF                 mov     ecx, edi
.text:00412901                 mov     ebx, edi
.text:00412903                 mov     edx, [esp+97Ch+var_950]
.text:00412907                 shr     cl, 3
.text:0041290A                 movzx   esi, cl
.text:0041290D                 mov     ecx, ebx
.text:0041290F                 and     ecx, 7
.text:00412912                 mov     ebx, 1
.text:00412917                 shl     ebx, cl
.text:00412919                 or      [esi+edx], bl
.text:0041291C
.text:0041291C loc_41291C:                             ; CODE XREF: sub_410970+1F8D↑j
.text:0041291C                 mov     eax, [esp+97Ch+var_8F8]
.text:00412923                 test    eax, eax
.text:00412925                 jz      short loc_412992
.text:00412927                 cmp     [esp+97Ch+var_926], 0
.text:0041292C                 jnz     short loc_412935
.text:0041292E                 cmp     [esp+97Ch+var_925], 0
.text:00412933                 jz      short loc_412992
.text:00412935
.text:00412935 loc_412935:                             ; CODE XREF: sub_410970+1FBC↑j
.text:00412935                 mov     ebp, ds:__mb_cur_max
.text:0041293B                 cmp     dword ptr [ebp+0], 1
.text:0041293F                 jz      short loc_4129BB
.text:00412941                 mov     [esp+97Ch+var_978], 1 ; Type
.text:00412949                 mov     [esp+97Ch+Size], edi ; C
.text:0041294C                 call    _isctype
.text:00412951
.text:00412951 loc_412951:                             ; CODE XREF: sub_410970+205A↓j
.text:00412951                 test    eax, eax
.text:00412953                 jnz     short loc_412974
.text:00412955                 mov     ebx, ds:__mb_cur_max
.text:0041295B                 cmp     dword ptr [ebx], 1
.text:0041295E                 jz      short loc_4129A9
.text:00412960                 mov     [esp+97Ch+var_978], 2 ; Type
.text:00412968                 mov     [esp+97Ch+Size], edi ; C
.text:0041296B                 call    _isctype
.text:00412970
.text:00412970 loc_412970:                             ; CODE XREF: sub_410970+2049↓j
.text:00412970                 test    eax, eax
.text:00412972                 jz      short loc_412992
.text:00412974
.text:00412974 loc_412974:                             ; CODE XREF: sub_410970+1FE3↑j
.text:00412974                 mov     ecx, edi
.text:00412976                 mov     ebx, edi
.text:00412978                 mov     edx, [esp+97Ch+var_950]
.text:0041297C                 shr     cl, 3
.text:0041297F                 movzx   ebp, cl
.text:00412982                 mov     ecx, ebx
.text:00412984                 and     ecx, 7
.text:00412987                 mov     ebx, 1
.text:0041298C                 shl     ebx, cl
.text:0041298E                 or      [ebp+edx+0], bl
.text:00412992
.text:00412992 loc_412992:                             ; CODE XREF: sub_410970+1FB5↑j
.text:00412992                                         ; sub_410970+1FC3↑j ...
.text:00412992                 mov     [esp+97Ch+var_91E], 1
.text:00412997                 inc     edi
.text:00412998                 cmp     edi, 0FFh
.text:0041299E                 jle     loc_4128E0
.text:004129A4                 jmp     loc_41232A
.text:004129A9 ; ---------------------------------------------------------------------------
.text:004129A9
.text:004129A9 loc_4129A9:                             ; CODE XREF: sub_410970+1FEE↑j
.text:004129A9                 mov     ebp, ds:_pctype
.text:004129AF                 mov     ecx, [ebp+0]
.text:004129B2                 movzx   eax, word ptr [ecx+edi*2]
.text:004129B6                 and     eax, 2
.text:004129B9                 jmp     short loc_412970
.text:004129BB ; ---------------------------------------------------------------------------
.text:004129BB
.text:004129BB loc_4129BB:                             ; CODE XREF: sub_410970+1FCF↑j
.text:004129BB                 mov     edx, ds:_pctype
.text:004129C1                 mov     esi, [edx]
.text:004129C3                 movzx   eax, word ptr [esi+edi*2]
.text:004129C7                 and     eax, 1
.text:004129CA                 jmp     short loc_412951
.text:004129CC ; ---------------------------------------------------------------------------
.text:004129CC
.text:004129CC loc_4129CC:                             ; CODE XREF: sub_410970+1F38↑j
.text:004129CC                 mov     ebx, [esp+97Ch+Block]
.text:004129D3                 mov     ebp, 4
.text:004129D8
.text:004129D8 loc_4129D8:                             ; CODE XREF: sub_410970+26A5↓j
.text:004129D8                 mov     [esp+97Ch+Size], ebx
.text:004129DB                 jmp     loc_410F13
.text:004129E0 ; ---------------------------------------------------------------------------
.text:004129E0
.text:004129E0 loc_4129E0:                             ; CODE XREF: sub_410970+1E53↑j
.text:004129E0                 cmp     byte ptr [edi], 5Dh ; ']'
.text:004129E3                 jnz     loc_4127C9
.text:004129E9                 jmp     loc_412800
.text:004129E9 ; ---------------------------------------------------------------------------
.text:004129EE                 align 10h
.text:004129F0
.text:004129F0 loc_4129F0:                             ; CODE XREF: sub_410970+1A4B↑j
.text:004129F0                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:004129F4                 jz      loc_4123C1
.text:004129FA                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412A01                 mov     ebp, 0Eh
.text:00412A06                 jz      loc_410D86
.text:00412A0C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00412A14                 inc     edi
.text:00412A15                 mov     ecx, [esp+97Ch+var_950]
.text:00412A19                 mov     [esp+97Ch+var_8D0], edi
.text:00412A20                 mov     edx, [esp+97Ch+arg_8]
.text:00412A27                 lea     edi, [esp+97Ch+var_8D0]
.text:00412A2E                 mov     [esp+97Ch+var_978], edi
.text:00412A32                 mov     ebx, [esp+97Ch+var_8F8]
.text:00412A39                 mov     eax, [esp+97Ch+var_8F4]
.text:00412A40                 mov     [esp+97Ch+var_968], ecx
.text:00412A44                 mov     [esp+97Ch+var_96C], edx
.text:00412A48                 mov     [esp+97Ch+var_970], ebx
.text:00412A4C                 mov     [esp+97Ch+var_974], eax
.text:00412A50                 mov     [esp+97Ch+Size], ebp
.text:00412A53
.text:00412A53 loc_412A53:                             ; CODE XREF: sub_410970+2193↓j
.text:00412A53                 call    sub_40D900
.text:00412A58                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:00412A60                 test    eax, eax
.text:00412A62                 mov     ebx, eax
.text:00412A64                 jz      loc_41232A
.text:00412A6A                 mov     esi, [esp+97Ch+Block]
.text:00412A71                 mov     ebp, ebx
.text:00412A73
.text:00412A73 loc_412A73:                             ; CODE XREF: sub_410970+318E↓j
.text:00412A73                 mov     [esp+97Ch+Size], esi
.text:00412A76                 jmp     loc_410F13
.text:00412A76 ; ---------------------------------------------------------------------------
.text:00412A7B                 align 10h
.text:00412A80
.text:00412A80 loc_412A80:                             ; CODE XREF: sub_410970+1A42↑j
.text:00412A80                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00412A83                 jnz     loc_412B13
.text:00412A89
.text:00412A89 loc_412A89:                             ; CODE XREF: sub_410970+1A34↑j
.text:00412A89                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:00412A91                 jnz     loc_4123B8
.text:00412A97                 lea     esi, [edi-2]
.text:00412A9A                 cmp     esi, [esp+97Ch+arg_0]
.text:00412AA1                 jb      short loc_412AAD
.text:00412AA3                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:00412AA7                 jz      loc_4123B8
.text:00412AAD
.text:00412AAD loc_412AAD:                             ; CODE XREF: sub_410970+2131↑j
.text:00412AAD                 lea     ebp, [edi-3]
.text:00412AB0                 cmp     ebp, [esp+97Ch+arg_0]
.text:00412AB7                 jb      short loc_412ABF
.text:00412AB9                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:00412ABD                 jz      short loc_412B08
.text:00412ABF
.text:00412ABF loc_412ABF:                             ; CODE XREF: sub_410970+2147↑j
.text:00412ABF                                         ; sub_410970+219C↓j
.text:00412ABF                 cmp     byte ptr [edi], 5Dh ; ']'
.text:00412AC2                 jz      loc_4123B8
.text:00412AC8                 mov     esi, [esp+97Ch+var_950]
.text:00412ACC                 lea     edi, [esp+97Ch+var_8D0]
.text:00412AD3                 mov     ecx, [esp+97Ch+arg_8]
.text:00412ADA                 mov     [esp+97Ch+var_978], edi
.text:00412ADE                 mov     ebx, [esp+97Ch+var_8F8]
.text:00412AE5                 mov     edx, [esp+97Ch+var_8F4]
.text:00412AEC                 mov     [esp+97Ch+var_968], esi
.text:00412AF0                 mov     eax, [esp+97Ch+var_924]
.text:00412AF4                 mov     [esp+97Ch+var_96C], ecx
.text:00412AF8                 mov     [esp+97Ch+var_970], ebx
.text:00412AFC                 mov     [esp+97Ch+var_974], edx
.text:00412B00                 mov     [esp+97Ch+Size], eax
.text:00412B03                 jmp     loc_412A53
.text:00412B08 ; ---------------------------------------------------------------------------
.text:00412B08
.text:00412B08 loc_412B08:                             ; CODE XREF: sub_410970+214D↑j
.text:00412B08                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:00412B0C                 jnz     short loc_412ABF
.text:00412B0E                 jmp     loc_4123B8
.text:00412B13 ; ---------------------------------------------------------------------------
.text:00412B13
.text:00412B13 loc_412B13:                             ; CODE XREF: sub_410970+2113↑j
.text:00412B13                 mov     ecx, [esp+97Ch+Block]
.text:00412B1A                 mov     ebp, 0Bh
.text:00412B1F                 jmp     loc_41184C
.text:00412B24 ; ---------------------------------------------------------------------------
.text:00412B24
.text:00412B24 loc_412B24:                             ; CODE XREF: sub_410970+1A22↑j
.text:00412B24                 mov     ebx, [esp+97Ch+var_8F0]
.text:00412B2B                 mov     edi, [esp+97Ch+var_8D0]
.text:00412B32                 inc     ebx
.text:00412B33                 cmp     edi, ebx
.text:00412B35                 jz      loc_41239F
.text:00412B3B
.text:00412B3B loc_412B3B:                             ; CODE XREF: sub_410970+21EA↓j
.text:00412B3B                 mov     edi, [esp+97Ch+var_950]
.text:00412B3F                 movzx   edx, byte ptr [edi-1]
.text:00412B43                 test    dl, dl
.text:00412B45                 jz      short loc_412B5C
.text:00412B47                 movzx   ebp, dl
.text:00412B4A                 cmp     byte ptr [ebp+edi-1], 0
.text:00412B4F                 jnz     short loc_412B5C
.text:00412B51                 mov     ebx, [esp+97Ch+var_950]
.text:00412B55                 dec     dl
.text:00412B57                 mov     [ebx-1], dl
.text:00412B5A                 jmp     short loc_412B3B
.text:00412B5C ; ---------------------------------------------------------------------------
.text:00412B5C
.text:00412B5C loc_412B5C:                             ; CODE XREF: sub_410970+21D5↑j
.text:00412B5C                                         ; sub_410970+21DF↑j
.text:00412B5C                 movzx   edi, dl
.text:00412B5F                 add     [esp+97Ch+var_950], edi
.text:00412B63                 jmp     loc_410D9F
.text:00412B68 ; ---------------------------------------------------------------------------
.text:00412B68
.text:00412B68 loc_412B68:                             ; CODE XREF: sub_410970+1A14↑j
.text:00412B68                 cmp     edi, [esp+97Ch+var_8F4]
.text:00412B6F                 jz      loc_411F20
.text:00412B75                 movzx   ebx, byte ptr [edx+1]
.text:00412B79                 lea     ecx, [edx+2]
.text:00412B7C                 mov     eax, [esp+97Ch+var_8F8]
.text:00412B83                 mov     [esp+97Ch+var_8D0], ecx
.text:00412B8A                 test    eax, eax
.text:00412B8C                 jz      short loc_412B9C
.text:00412B8E                 mov     edx, [esp+97Ch+var_8F8]
.text:00412B95                 movzx   edi, bl
.text:00412B98                 movzx   ebx, byte ptr [edi+edx]
.text:00412B9C
.text:00412B9C loc_412B9C:                             ; CODE XREF: sub_410970+221C↑j
.text:00412B9C                 mov     cl, bl
.text:00412B9E                 mov     ebp, [esp+97Ch+var_950]
.text:00412BA2                 mov     edx, 1
.text:00412BA7                 shr     cl, 3
.text:00412BAA                 movzx   esi, cl
.text:00412BAD                 mov     ecx, ebx
.text:00412BAF                 and     ecx, 7
.text:00412BB2                 movzx   ebx, bl
.text:00412BB5                 shl     edx, cl
.text:00412BB7                 or      [esi+ebp], dl
.text:00412BBA                 jmp     loc_412439
.text:00412BBF ; ---------------------------------------------------------------------------
.text:00412BBF
.text:00412BBF loc_412BBF:                             ; CODE XREF: sub_410970+19B4↑j
.text:00412BBF                 test    [esp+97Ch+arg_8], 100h
.text:00412BCA                 jz      loc_41232A
.text:00412BD0                 or      byte ptr [ebx+1], 4
.text:00412BD4                 jmp     loc_41232A
.text:00412BD9 ; ---------------------------------------------------------------------------
.text:00412BD9
.text:00412BD9 loc_412BD9:                             ; CODE XREF: sub_410970+18B2↑j
.text:00412BD9                 inc     edi
.text:00412BDA                 mov     [esp+97Ch+var_8D0], edi
.text:00412BE1                 jmp     loc_412228
.text:00412BE6 ; ---------------------------------------------------------------------------
.text:00412BE6
.text:00412BE6 loc_412BE6:                             ; CODE XREF: sub_410970+16F↑j
.text:00412BE6                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00412BE6                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 00410ADF case 92
.text:00412BED                 cmp     eax, [esp+97Ch+var_8F4]
.text:00412BF4                 jz      loc_411F20
.text:00412BFA                 movzx   ecx, byte ptr [eax]
.text:00412BFD                 lea     ebx, [eax+1]
.text:00412C00                 mov     [esp+97Ch+var_8D0], ebx
.text:00412C07                 movzx   eax, cl
.text:00412C0A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:00412C0D                 mov     [esp+97Ch+var_8EC], cl
.text:00412C14                 cmp     eax, 55h
.text:00412C17                 ja      def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00412C1D                 jmp     ds:jpt_412C1D[eax*4] ; switch jump
.text:00412C1D ; ---------------------------------------------------------------------------
.text:00412C24 jpt_412C1D      dd offset loc_412DBB, offset loc_412D7C, offset loc_412E8D
.text:00412C24                                         ; DATA XREF: sub_410970+22AD↑r
.text:00412C24                 dd offset def_412C1D, offset loc_4131BE, offset def_412C1D ; jump table for switch statement
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset loc_412EC3, offset loc_412EC3
.text:00412C24                 dd offset loc_412EC3, offset loc_412EC3, offset loc_412EC3
.text:00412C24                 dd offset loc_412EC3, offset loc_412EC3, offset loc_412EC3
.text:00412C24                 dd offset loc_412EC3, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset loc_41301A, offset def_412C1D, offset loc_4130EC
.text:00412C24                 dd offset loc_4131BE, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset loc_4131D1, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset loc_4132A3, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset loc_413396, offset def_412C1D, offset loc_413468
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset loc_41353A
.text:00412C24                 dd offset def_412C1D, offset def_412C1D, offset def_412C1D
.text:00412C24                 dd offset loc_41362F, offset loc_413BD9
.text:00412D7C ; ---------------------------------------------------------------------------
.text:00412D7C
.text:00412D7C loc_412D7C:                             ; CODE XREF: sub_410970+22AD↑j
.text:00412D7C                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00412D7C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 00412C1D case 40
.text:00412D87                 jz      loc_41152D
.text:00412D8D
.text:00412D8D def_412C1D:                             ; CODE XREF: sub_410970+22A7↑j
.text:00412D8D                                         ; sub_410970+22AD↑j ...
.text:00412D8D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00412D94                 test    ebx, ebx
.text:00412D96                 jz      def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412D9C                 movzx   edi, [esp+97Ch+var_8EC]
.text:00412DA4                 mov     esi, [esp+97Ch+var_8F8]
.text:00412DAB                 movzx   ecx, byte ptr [edi+esi]
.text:00412DAF                 mov     [esp+97Ch+var_8EC], cl
.text:00412DB6                 jmp     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412DBB ; ---------------------------------------------------------------------------
.text:00412DBB
.text:00412DBB loc_412DBB:                             ; CODE XREF: sub_410970+22AD↑j
.text:00412DBB                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00412DBB                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 39
.text:00412DC6                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412DCC
.text:00412DCC loc_412DCC:                             ; CODE XREF: sub_410970+24D2↓j
.text:00412DCC                                         ; sub_410970+24FF↓j ...
.text:00412DCC                 mov     eax, [esp+97Ch+arg_C]
.text:00412DD3                 mov     ebp, [esp+97Ch+var_950]
.text:00412DD7                 mov     edi, [eax]
.text:00412DD9                 mov     edx, [eax+4]
.text:00412DDC                 sub     ebp, edi
.text:00412DDE                 inc     ebp
.text:00412DDF                 cmp     ebp, edx
.text:00412DE1                 jbe     loc_412E81
.text:00412DE7                 cmp     edx, 10000h
.text:00412DED                 mov     ebp, 0Fh
.text:00412DF2                 jz      loc_410D86
.text:00412DF8                 lea     ebp, [edx+edx]
.text:00412DFB                 mov     edx, [esp+97Ch+arg_C]
.text:00412E02                 cmp     ebp, 10000h
.text:00412E08                 mov     [edx+4], ebp
.text:00412E0B                 jbe     short loc_412E14
.text:00412E0D                 mov     dword ptr [edx+4], 10000h
.text:00412E14
.text:00412E14 loc_412E14:                             ; CODE XREF: sub_410970+249B↑j
.text:00412E14                 mov     ebx, [esp+97Ch+arg_C]
.text:00412E1B                 mov     ebp, 0Ch
.text:00412E20                 mov     esi, [ebx+4]
.text:00412E23                 mov     [esp+97Ch+Size], edi ; Block
.text:00412E26                 mov     [esp+97Ch+var_978], esi ; Size
.text:00412E2A                 call    realloc
.text:00412E2F                 mov     edx, [esp+97Ch+arg_C]
.text:00412E36                 test    eax, eax
.text:00412E38                 mov     [edx], eax
.text:00412E3A                 jz      loc_410D86
.text:00412E40                 cmp     edi, eax
.text:00412E42                 jz      short loc_412DCC
.text:00412E44                 sub     eax, edi
.text:00412E46                 mov     edi, [esp+97Ch+var_908]
.text:00412E4A                 add     [esp+97Ch+var_950], eax
.text:00412E4E                 add     [esp+97Ch+var_904], eax
.text:00412E52                 test    edi, edi
.text:00412E54                 jz      short loc_412E5A
.text:00412E56                 add     [esp+97Ch+var_908], eax
.text:00412E5A
.text:00412E5A loc_412E5A:                             ; CODE XREF: sub_410970+24E4↑j
.text:00412E5A                 mov     ecx, [esp+97Ch+var_900]
.text:00412E5E                 test    ecx, ecx
.text:00412E60                 jz      short loc_412E66
.text:00412E62                 add     [esp+97Ch+var_900], eax
.text:00412E66
.text:00412E66 loc_412E66:                             ; CODE XREF: sub_410970+24F0↑j
.text:00412E66                 mov     edx, [esp+97Ch+var_8FC]
.text:00412E6D                 test    edx, edx
.text:00412E6F                 jz      loc_412DCC
.text:00412E75                 add     [esp+97Ch+var_8FC], eax
.text:00412E7C                 jmp     loc_412DCC
.text:00412E81 ; ---------------------------------------------------------------------------
.text:00412E81
.text:00412E81 loc_412E81:                             ; CODE XREF: sub_410970+2471↑j
.text:00412E81                 mov     edi, [esp+97Ch+var_950]
.text:00412E85                 mov     byte ptr [edi], 0Ch
.text:00412E88                 jmp     loc_410D9A
.text:00412E8D ; ---------------------------------------------------------------------------
.text:00412E8D
.text:00412E8D loc_412E8D:                             ; CODE XREF: sub_410970+22AD↑j
.text:00412E8D                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00412E8D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 00412C1D case 41
.text:00412E98                 jnz     def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00412E9E                 mov     edi, [esp+97Ch+var_24]
.text:00412EA5                 test    edi, edi
.text:00412EA7                 jnz     loc_411717
.text:00412EAD                 test    [esp+97Ch+arg_8], 20000h
.text:00412EB8                 jnz     def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00412EBE                 jmp     loc_411840
.text:00412EC3 ; ---------------------------------------------------------------------------
.text:00412EC3
.text:00412EC3 loc_412EC3:                             ; CODE XREF: sub_410970+22AD↑j
.text:00412EC3                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00412EC3                 test    [esp+97Ch+arg_8], 4000h ; jumptable 00412C1D cases 49-57
.text:00412ECE                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412ED4                 movzx   ebx, [esp+97Ch+var_8EC]
.text:00412EDC                 sub     bl, 30h ; '0'
.text:00412EDF                 movzx   eax, bl
.text:00412EE2                 cmp     eax, [esp+97Ch+var_90C]
.text:00412EE6                 ja      loc_413009
.text:00412EEC                 mov     [esp+97Ch+var_970], eax
.text:00412EF0                 mov     ecx, [esp+97Ch+Block]
.text:00412EF7                 mov     edi, [esp+97Ch+var_28]
.text:00412EFE                 mov     esi, [esp+97Ch+var_24]
.text:00412F05                 mov     [esp+97Ch+Size], ecx
.text:00412F08                 mov     [esp+97Ch+var_978], edi
.text:00412F0C                 mov     [esp+97Ch+var_974], esi
.text:00412F10                 call    sub_410350
.text:00412F15                 test    al, al
.text:00412F17                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00412F1D                 mov     esi, [esp+97Ch+arg_C]
.text:00412F24                 mov     ebp, [esp+97Ch+var_950]
.text:00412F28                 mov     edi, [esi]
.text:00412F2A                 mov     [esp+97Ch+var_900], ebp
.text:00412F2E                 mov     edx, [esi+4]
.text:00412F31                 sub     ebp, edi
.text:00412F33                 mov     [esp+97Ch+var_940], edi
.text:00412F37                 add     ebp, 2
.text:00412F3A                 cmp     ebp, edx
.text:00412F3C                 jbe     loc_412FFA
.text:00412F42
.text:00412F42 loc_412F42:                             ; CODE XREF: sub_410970+2684↓j
.text:00412F42                 cmp     edx, 10000h
.text:00412F48                 mov     ebp, 0Fh
.text:00412F4D                 jz      loc_410D86
.text:00412F53                 mov     esi, [esp+97Ch+arg_C]
.text:00412F5A                 lea     ecx, [edx+edx]
.text:00412F5D                 cmp     ecx, 10000h
.text:00412F63                 mov     [esi+4], ecx
.text:00412F66                 jbe     short loc_412F6F
.text:00412F68                 mov     dword ptr [esi+4], 10000h
.text:00412F6F
.text:00412F6F loc_412F6F:                             ; CODE XREF: sub_410970+25F6↑j
.text:00412F6F                 mov     eax, [esp+97Ch+arg_C]
.text:00412F76                 mov     ebp, [eax+4]
.text:00412F79                 mov     [esp+97Ch+Size], edi ; Block
.text:00412F7C                 mov     [esp+97Ch+var_978], ebp ; Size
.text:00412F80                 mov     ebp, 0Ch
.text:00412F85                 call    realloc
.text:00412F8A                 mov     edx, [esp+97Ch+arg_C]
.text:00412F91                 test    eax, eax
.text:00412F93                 mov     [edx], eax
.text:00412F95                 jz      loc_410D86
.text:00412F9B                 cmp     [esp+97Ch+var_940], eax
.text:00412F9F                 jz      short loc_412FD9
.text:00412FA1                 mov     esi, [esp+97Ch+var_940]
.text:00412FA5                 mov     edi, [esp+97Ch+var_908]
.text:00412FA9                 sub     eax, esi
.text:00412FAB                 add     [esp+97Ch+var_950], eax
.text:00412FAF                 add     [esp+97Ch+var_904], eax
.text:00412FB3                 test    edi, edi
.text:00412FB5                 jz      short loc_412FBB
.text:00412FB7                 add     [esp+97Ch+var_908], eax
.text:00412FBB
.text:00412FBB loc_412FBB:                             ; CODE XREF: sub_410970+2645↑j
.text:00412FBB                 mov     edx, [esp+97Ch+var_900]
.text:00412FBF                 test    edx, edx
.text:00412FC1                 jz      short loc_412FC7
.text:00412FC3                 add     [esp+97Ch+var_900], eax
.text:00412FC7
.text:00412FC7 loc_412FC7:                             ; CODE XREF: sub_410970+2651↑j
.text:00412FC7                 mov     ecx, [esp+97Ch+var_8FC]
.text:00412FCE                 test    ecx, ecx
.text:00412FD0                 jz      short loc_412FD9
.text:00412FD2                 add     [esp+97Ch+var_8FC], eax
.text:00412FD9
.text:00412FD9 loc_412FD9:                             ; CODE XREF: sub_410970+262F↑j
.text:00412FD9                                         ; sub_410970+2660↑j
.text:00412FD9                 mov     eax, [esp+97Ch+arg_C]
.text:00412FE0                 mov     ebp, [esp+97Ch+var_950]
.text:00412FE4                 mov     edi, [eax]
.text:00412FE6                 mov     edx, [eax+4]
.text:00412FE9                 sub     ebp, edi
.text:00412FEB                 add     ebp, 2
.text:00412FEE                 mov     [esp+97Ch+var_940], edi
.text:00412FF2                 cmp     ebp, edx
.text:00412FF4                 ja      loc_412F42
.text:00412FFA
.text:00412FFA loc_412FFA:                             ; CODE XREF: sub_410970+25CC↑j
.text:00412FFA                 mov     edi, [esp+97Ch+var_950]
.text:00412FFE                 mov     byte ptr [edi], 8
.text:00413001                 inc     edi
.text:00413002                 mov     [edi], bl
.text:00413004                 jmp     loc_410D9A
.text:00413009 ; ---------------------------------------------------------------------------
.text:00413009
.text:00413009 loc_413009:                             ; CODE XREF: sub_410970+2576↑j
.text:00413009                 mov     ebx, [esp+97Ch+Block]
.text:00413010                 mov     ebp, 6
.text:00413015                 jmp     loc_4129D8
.text:0041301A ; ---------------------------------------------------------------------------
.text:0041301A
.text:0041301A loc_41301A:                             ; CODE XREF: sub_410970+22AD↑j
.text:0041301A                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:0041301A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 60
.text:00413025                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041302B
.text:0041302B loc_41302B:                             ; CODE XREF: sub_410970+2731↓j
.text:0041302B                                         ; sub_410970+275E↓j ...
.text:0041302B                 mov     eax, [esp+97Ch+arg_C]
.text:00413032                 mov     ebx, [esp+97Ch+var_950]
.text:00413036                 mov     edi, [eax]
.text:00413038                 mov     edx, [eax+4]
.text:0041303B                 sub     ebx, edi
.text:0041303D                 inc     ebx
.text:0041303E                 cmp     ebx, edx
.text:00413040                 jbe     loc_4130E0
.text:00413046                 cmp     edx, 10000h
.text:0041304C                 mov     ebp, 0Fh
.text:00413051                 jz      loc_410D86
.text:00413057                 lea     ebx, [edx+edx]
.text:0041305A                 mov     edx, [esp+97Ch+arg_C]
.text:00413061                 cmp     ebx, 10000h
.text:00413067                 mov     [edx+4], ebx
.text:0041306A                 jbe     short loc_413073
.text:0041306C                 mov     dword ptr [edx+4], 10000h
.text:00413073
.text:00413073 loc_413073:                             ; CODE XREF: sub_410970+26FA↑j
.text:00413073                 mov     ebp, [esp+97Ch+arg_C]
.text:0041307A                 mov     edx, [ebp+4]
.text:0041307D                 mov     ebp, 0Ch
.text:00413082                 mov     [esp+97Ch+Size], edi ; Block
.text:00413085                 mov     [esp+97Ch+var_978], edx ; Size
.text:00413089                 call    realloc
.text:0041308E                 mov     ecx, [esp+97Ch+arg_C]
.text:00413095                 test    eax, eax
.text:00413097                 mov     [ecx], eax
.text:00413099                 jz      loc_410D86
.text:0041309F                 cmp     edi, eax
.text:004130A1                 jz      short loc_41302B
.text:004130A3                 mov     esi, [esp+97Ch+var_908]
.text:004130A7                 sub     eax, edi
.text:004130A9                 add     [esp+97Ch+var_950], eax
.text:004130AD                 add     [esp+97Ch+var_904], eax
.text:004130B1                 test    esi, esi
.text:004130B3                 jz      short loc_4130B9
.text:004130B5                 add     [esp+97Ch+var_908], eax
.text:004130B9
.text:004130B9 loc_4130B9:                             ; CODE XREF: sub_410970+2743↑j
.text:004130B9                 mov     edi, [esp+97Ch+var_900]
.text:004130BD                 test    edi, edi
.text:004130BF                 jz      short loc_4130C5
.text:004130C1                 add     [esp+97Ch+var_900], eax
.text:004130C5
.text:004130C5 loc_4130C5:                             ; CODE XREF: sub_410970+274F↑j
.text:004130C5                 mov     ecx, [esp+97Ch+var_8FC]
.text:004130CC                 test    ecx, ecx
.text:004130CE                 jz      loc_41302B
.text:004130D4                 add     [esp+97Ch+var_8FC], eax
.text:004130DB                 jmp     loc_41302B
.text:004130E0 ; ---------------------------------------------------------------------------
.text:004130E0
.text:004130E0 loc_4130E0:                             ; CODE XREF: sub_410970+26D0↑j
.text:004130E0                 mov     edi, [esp+97Ch+var_950]
.text:004130E4                 mov     byte ptr [edi], 1Ah
.text:004130E7                 jmp     loc_410D9A
.text:004130EC ; ---------------------------------------------------------------------------
.text:004130EC
.text:004130EC loc_4130EC:                             ; CODE XREF: sub_410970+22AD↑j
.text:004130EC                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:004130EC                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 62
.text:004130F7                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004130FD
.text:004130FD loc_4130FD:                             ; CODE XREF: sub_410970+2803↓j
.text:004130FD                                         ; sub_410970+2830↓j ...
.text:004130FD                 mov     eax, [esp+97Ch+arg_C]
.text:00413104                 mov     ebp, [esp+97Ch+var_950]
.text:00413108                 mov     edi, [eax]
.text:0041310A                 mov     edx, [eax+4]
.text:0041310D                 sub     ebp, edi
.text:0041310F                 inc     ebp
.text:00413110                 cmp     ebp, edx
.text:00413112                 jbe     loc_4131B2
.text:00413118                 cmp     edx, 10000h
.text:0041311E                 mov     ebp, 0Fh
.text:00413123                 jz      loc_410D86
.text:00413129                 lea     ebp, [edx+edx]
.text:0041312C                 mov     edx, [esp+97Ch+arg_C]
.text:00413133                 cmp     ebp, 10000h
.text:00413139                 mov     [edx+4], ebp
.text:0041313C                 jbe     short loc_413145
.text:0041313E                 mov     dword ptr [edx+4], 10000h
.text:00413145
.text:00413145 loc_413145:                             ; CODE XREF: sub_410970+27CC↑j
.text:00413145                 mov     ebx, [esp+97Ch+arg_C]
.text:0041314C                 mov     ebp, 0Ch
.text:00413151                 mov     esi, [ebx+4]
.text:00413154                 mov     [esp+97Ch+Size], edi ; Block
.text:00413157                 mov     [esp+97Ch+var_978], esi ; Size
.text:0041315B                 call    realloc
.text:00413160                 mov     edx, [esp+97Ch+arg_C]
.text:00413167                 test    eax, eax
.text:00413169                 mov     [edx], eax
.text:0041316B                 jz      loc_410D86
.text:00413171                 cmp     edi, eax
.text:00413173                 jz      short loc_4130FD
.text:00413175                 sub     eax, edi
.text:00413177                 mov     edi, [esp+97Ch+var_908]
.text:0041317B                 add     [esp+97Ch+var_950], eax
.text:0041317F                 add     [esp+97Ch+var_904], eax
.text:00413183                 test    edi, edi
.text:00413185                 jz      short loc_41318B
.text:00413187                 add     [esp+97Ch+var_908], eax
.text:0041318B
.text:0041318B loc_41318B:                             ; CODE XREF: sub_410970+2815↑j
.text:0041318B                 mov     ecx, [esp+97Ch+var_900]
.text:0041318F                 test    ecx, ecx
.text:00413191                 jz      short loc_413197
.text:00413193                 add     [esp+97Ch+var_900], eax
.text:00413197
.text:00413197 loc_413197:                             ; CODE XREF: sub_410970+2821↑j
.text:00413197                 mov     edx, [esp+97Ch+var_8FC]
.text:0041319E                 test    edx, edx
.text:004131A0                 jz      loc_4130FD
.text:004131A6                 add     [esp+97Ch+var_8FC], eax
.text:004131AD                 jmp     loc_4130FD
.text:004131B2 ; ---------------------------------------------------------------------------
.text:004131B2
.text:004131B2 loc_4131B2:                             ; CODE XREF: sub_410970+27A2↑j
.text:004131B2                 mov     edi, [esp+97Ch+var_950]
.text:004131B6                 mov     byte ptr [edi], 1Bh
.text:004131B9                 jmp     loc_410D9A
.text:004131BE ; ---------------------------------------------------------------------------
.text:004131BE
.text:004131BE loc_4131BE:                             ; CODE XREF: sub_410970+22AD↑j
.text:004131BE                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:004131BE                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 00412C1D cases 43,63
.text:004131C6                 jz      def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:004131CC                 jmp     loc_4119D0      ; jumptable 00410ADF case 42
.text:004131D1 ; ---------------------------------------------------------------------------
.text:004131D1
.text:004131D1 loc_4131D1:                             ; CODE XREF: sub_410970+22AD↑j
.text:004131D1                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:004131D1                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 66
.text:004131DC                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004131E2
.text:004131E2 loc_4131E2:                             ; CODE XREF: sub_410970+28E8↓j
.text:004131E2                                         ; sub_410970+2915↓j ...
.text:004131E2                 mov     eax, [esp+97Ch+arg_C]
.text:004131E9                 mov     ebp, [esp+97Ch+var_950]
.text:004131ED                 mov     edi, [eax]
.text:004131EF                 mov     edx, [eax+4]
.text:004131F2                 sub     ebp, edi
.text:004131F4                 inc     ebp
.text:004131F5                 cmp     ebp, edx
.text:004131F7                 jbe     loc_413297
.text:004131FD                 cmp     edx, 10000h
.text:00413203                 mov     ebp, 0Fh
.text:00413208                 jz      loc_410D86
.text:0041320E                 lea     ebx, [edx+edx]
.text:00413211                 mov     edx, [esp+97Ch+arg_C]
.text:00413218                 cmp     ebx, 10000h
.text:0041321E                 mov     [edx+4], ebx
.text:00413221                 jbe     short loc_41322A
.text:00413223                 mov     dword ptr [edx+4], 10000h
.text:0041322A
.text:0041322A loc_41322A:                             ; CODE XREF: sub_410970+28B1↑j
.text:0041322A                 mov     esi, [esp+97Ch+arg_C]
.text:00413231                 mov     ebp, [esi+4]
.text:00413234                 mov     [esp+97Ch+Size], edi ; Block
.text:00413237                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0041323B                 mov     ebp, 0Ch
.text:00413240                 call    realloc
.text:00413245                 mov     edx, [esp+97Ch+arg_C]
.text:0041324C                 test    eax, eax
.text:0041324E                 mov     [edx], eax
.text:00413250                 jz      loc_410D86
.text:00413256                 cmp     edi, eax
.text:00413258                 jz      short loc_4131E2
.text:0041325A                 sub     eax, edi
.text:0041325C                 mov     edi, [esp+97Ch+var_908]
.text:00413260                 add     [esp+97Ch+var_950], eax
.text:00413264                 add     [esp+97Ch+var_904], eax
.text:00413268                 test    edi, edi
.text:0041326A                 jz      short loc_413270
.text:0041326C                 add     [esp+97Ch+var_908], eax
.text:00413270
.text:00413270 loc_413270:                             ; CODE XREF: sub_410970+28FA↑j
.text:00413270                 mov     ecx, [esp+97Ch+var_900]
.text:00413274                 test    ecx, ecx
.text:00413276                 jz      short loc_41327C
.text:00413278                 add     [esp+97Ch+var_900], eax
.text:0041327C
.text:0041327C loc_41327C:                             ; CODE XREF: sub_410970+2906↑j
.text:0041327C                 mov     ebx, [esp+97Ch+var_8FC]
.text:00413283                 test    ebx, ebx
.text:00413285                 jz      loc_4131E2
.text:0041328B                 add     [esp+97Ch+var_8FC], eax
.text:00413292                 jmp     loc_4131E2
.text:00413297 ; ---------------------------------------------------------------------------
.text:00413297
.text:00413297 loc_413297:                             ; CODE XREF: sub_410970+2887↑j
.text:00413297                 mov     edi, [esp+97Ch+var_950]
.text:0041329B                 mov     byte ptr [edi], 1Dh
.text:0041329E                 jmp     loc_410D9A
.text:004132A3 ; ---------------------------------------------------------------------------
.text:004132A3
.text:004132A3 loc_4132A3:                             ; CODE XREF: sub_410970+22AD↑j
.text:004132A3                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:004132A3                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 87
.text:004132AE                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004132B4                 mov     ecx, [esp+97Ch+arg_C]
.text:004132BB                 mov     esi, [esp+97Ch+var_950]
.text:004132BF                 mov     edi, [ecx]
.text:004132C1                 mov     [esp+97Ch+var_900], esi
.text:004132C5                 mov     edx, [ecx+4]
.text:004132C8                 sub     esi, edi
.text:004132CA                 inc     esi
.text:004132CB                 mov     ebx, edi
.text:004132CD                 cmp     esi, edx
.text:004132CF                 jbe     loc_41338A
.text:004132D5
.text:004132D5 loc_4132D5:                             ; CODE XREF: sub_410970+2A14↓j
.text:004132D5                 cmp     edx, 10000h
.text:004132DB                 mov     ebp, 0Fh
.text:004132E0                 jz      loc_410D86
.text:004132E6                 mov     esi, [esp+97Ch+arg_C]
.text:004132ED                 lea     ebp, [edx+edx]
.text:004132F0                 cmp     ebp, 10000h
.text:004132F6                 mov     [esi+4], ebp
.text:004132F9                 jbe     short loc_413302
.text:004132FB                 mov     dword ptr [esi+4], 10000h
.text:00413302
.text:00413302 loc_413302:                             ; CODE XREF: sub_410970+2989↑j
.text:00413302                 mov     eax, [esp+97Ch+arg_C]
.text:00413309                 mov     ebp, 0Ch
.text:0041330E                 mov     esi, [eax+4]
.text:00413311                 mov     [esp+97Ch+Size], edi ; Block
.text:00413314                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413318                 call    realloc
.text:0041331D                 mov     edi, [esp+97Ch+arg_C]
.text:00413324                 test    eax, eax
.text:00413326                 mov     [edi], eax
.text:00413328                 jz      loc_410D86
.text:0041332E                 cmp     ebx, eax
.text:00413330                 jz      short loc_413366
.text:00413332                 sub     eax, ebx
.text:00413334                 mov     ebx, [esp+97Ch+var_908]
.text:00413338                 add     [esp+97Ch+var_950], eax
.text:0041333C                 add     [esp+97Ch+var_904], eax
.text:00413340                 test    ebx, ebx
.text:00413342                 jz      short loc_413348
.text:00413344                 add     [esp+97Ch+var_908], eax
.text:00413348
.text:00413348 loc_413348:                             ; CODE XREF: sub_410970+29D2↑j
.text:00413348                 mov     ecx, [esp+97Ch+var_900]
.text:0041334C                 test    ecx, ecx
.text:0041334E                 jz      short loc_413354
.text:00413350                 add     [esp+97Ch+var_900], eax
.text:00413354
.text:00413354 loc_413354:                             ; CODE XREF: sub_410970+29DE↑j
.text:00413354                 mov     edx, [esp+97Ch+var_8FC]
.text:0041335B                 test    edx, edx
.text:0041335D                 jz      short loc_413366
.text:0041335F                 add     [esp+97Ch+var_8FC], eax
.text:00413366
.text:00413366 loc_413366:                             ; CODE XREF: sub_410970+29C0↑j
.text:00413366                                         ; sub_410970+29ED↑j
.text:00413366                 mov     esi, [esp+97Ch+arg_C]
.text:0041336D                 mov     eax, [esp+97Ch+arg_C]
.text:00413374                 mov     ebp, [esp+97Ch+var_950]
.text:00413378                 mov     edi, [esi]
.text:0041337A                 mov     edx, [eax+4]
.text:0041337D                 sub     ebp, edi
.text:0041337F                 inc     ebp
.text:00413380                 mov     ebx, edi
.text:00413382                 cmp     ebp, edx
.text:00413384                 ja      loc_4132D5
.text:0041338A
.text:0041338A loc_41338A:                             ; CODE XREF: sub_410970+295F↑j
.text:0041338A                 mov     edi, [esp+97Ch+var_950]
.text:0041338E                 mov     byte ptr [edi], 19h
.text:00413391                 jmp     loc_410D9A
.text:00413396 ; ---------------------------------------------------------------------------
.text:00413396
.text:00413396 loc_413396:                             ; CODE XREF: sub_410970+22AD↑j
.text:00413396                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00413396                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 96
.text:004133A1                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:004133A7
.text:004133A7 loc_4133A7:                             ; CODE XREF: sub_410970+2AAD↓j
.text:004133A7                                         ; sub_410970+2ADA↓j ...
.text:004133A7                 mov     eax, [esp+97Ch+arg_C]
.text:004133AE                 mov     ebx, [esp+97Ch+var_950]
.text:004133B2                 mov     edi, [eax]
.text:004133B4                 mov     edx, [eax+4]
.text:004133B7                 sub     ebx, edi
.text:004133B9                 inc     ebx
.text:004133BA                 cmp     ebx, edx
.text:004133BC                 jbe     loc_41345C
.text:004133C2                 cmp     edx, 10000h
.text:004133C8                 mov     ebp, 0Fh
.text:004133CD                 jz      loc_410D86
.text:004133D3                 lea     esi, [edx+edx]
.text:004133D6                 mov     edx, [esp+97Ch+arg_C]
.text:004133DD                 cmp     esi, 10000h
.text:004133E3                 mov     [edx+4], esi
.text:004133E6                 jbe     short loc_4133EF
.text:004133E8                 mov     dword ptr [edx+4], 10000h
.text:004133EF
.text:004133EF loc_4133EF:                             ; CODE XREF: sub_410970+2A76↑j
.text:004133EF                 mov     ebp, [esp+97Ch+arg_C]
.text:004133F6                 mov     ebx, [ebp+4]
.text:004133F9                 mov     ebp, 0Ch
.text:004133FE                 mov     [esp+97Ch+Size], edi ; Block
.text:00413401                 mov     [esp+97Ch+var_978], ebx ; Size
.text:00413405                 call    realloc
.text:0041340A                 mov     edx, [esp+97Ch+arg_C]
.text:00413411                 test    eax, eax
.text:00413413                 mov     [edx], eax
.text:00413415                 jz      loc_410D86
.text:0041341B                 cmp     edi, eax
.text:0041341D                 jz      short loc_4133A7
.text:0041341F                 mov     ecx, [esp+97Ch+var_908]
.text:00413423                 sub     eax, edi
.text:00413425                 add     [esp+97Ch+var_950], eax
.text:00413429                 add     [esp+97Ch+var_904], eax
.text:0041342D                 test    ecx, ecx
.text:0041342F                 jz      short loc_413435
.text:00413431                 add     [esp+97Ch+var_908], eax
.text:00413435
.text:00413435 loc_413435:                             ; CODE XREF: sub_410970+2ABF↑j
.text:00413435                 mov     edi, [esp+97Ch+var_900]
.text:00413439                 test    edi, edi
.text:0041343B                 jz      short loc_413441
.text:0041343D                 add     [esp+97Ch+var_900], eax
.text:00413441
.text:00413441 loc_413441:                             ; CODE XREF: sub_410970+2ACB↑j
.text:00413441                 mov     esi, [esp+97Ch+var_8FC]
.text:00413448                 test    esi, esi
.text:0041344A                 jz      loc_4133A7
.text:00413450                 add     [esp+97Ch+var_8FC], eax
.text:00413457                 jmp     loc_4133A7
.text:0041345C ; ---------------------------------------------------------------------------
.text:0041345C
.text:0041345C loc_41345C:                             ; CODE XREF: sub_410970+2A4C↑j
.text:0041345C                 mov     edi, [esp+97Ch+var_950]
.text:00413460                 mov     byte ptr [edi], 0Bh
.text:00413463                 jmp     loc_410D9A
.text:00413468 ; ---------------------------------------------------------------------------
.text:00413468
.text:00413468 loc_413468:                             ; CODE XREF: sub_410970+22AD↑j
.text:00413468                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00413468                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 98
.text:00413473                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413479
.text:00413479 loc_413479:                             ; CODE XREF: sub_410970+2B7F↓j
.text:00413479                                         ; sub_410970+2BAC↓j ...
.text:00413479                 mov     eax, [esp+97Ch+arg_C]
.text:00413480                 mov     ecx, [esp+97Ch+var_950]
.text:00413484                 mov     edi, [eax]
.text:00413486                 mov     edx, [eax+4]
.text:00413489                 sub     ecx, edi
.text:0041348B                 inc     ecx
.text:0041348C                 cmp     ecx, edx
.text:0041348E                 jbe     loc_41352E
.text:00413494                 cmp     edx, 10000h
.text:0041349A                 mov     ebp, 0Fh
.text:0041349F                 jz      loc_410D86
.text:004134A5                 lea     esi, [edx+edx]
.text:004134A8                 mov     edx, [esp+97Ch+arg_C]
.text:004134AF                 cmp     esi, 10000h
.text:004134B5                 mov     [edx+4], esi
.text:004134B8                 jbe     short loc_4134C1
.text:004134BA                 mov     dword ptr [edx+4], 10000h
.text:004134C1
.text:004134C1 loc_4134C1:                             ; CODE XREF: sub_410970+2B48↑j
.text:004134C1                 mov     edx, [esp+97Ch+arg_C]
.text:004134C8                 mov     ebp, 0Ch
.text:004134CD                 mov     ebx, [edx+4]
.text:004134D0                 mov     [esp+97Ch+Size], edi ; Block
.text:004134D3                 mov     [esp+97Ch+var_978], ebx ; Size
.text:004134D7                 call    realloc
.text:004134DC                 mov     ecx, [esp+97Ch+arg_C]
.text:004134E3                 test    eax, eax
.text:004134E5                 mov     [ecx], eax
.text:004134E7                 jz      loc_410D86
.text:004134ED                 cmp     edi, eax
.text:004134EF                 jz      short loc_413479
.text:004134F1                 mov     ebp, [esp+97Ch+var_908]
.text:004134F5                 sub     eax, edi
.text:004134F7                 add     [esp+97Ch+var_950], eax
.text:004134FB                 add     [esp+97Ch+var_904], eax
.text:004134FF                 test    ebp, ebp
.text:00413501                 jz      short loc_413507
.text:00413503                 add     [esp+97Ch+var_908], eax
.text:00413507
.text:00413507 loc_413507:                             ; CODE XREF: sub_410970+2B91↑j
.text:00413507                 mov     edi, [esp+97Ch+var_900]
.text:0041350B                 test    edi, edi
.text:0041350D                 jz      short loc_413513
.text:0041350F                 add     [esp+97Ch+var_900], eax
.text:00413513
.text:00413513 loc_413513:                             ; CODE XREF: sub_410970+2B9D↑j
.text:00413513                 mov     esi, [esp+97Ch+var_8FC]
.text:0041351A                 test    esi, esi
.text:0041351C                 jz      loc_413479
.text:00413522                 add     [esp+97Ch+var_8FC], eax
.text:00413529                 jmp     loc_413479
.text:0041352E ; ---------------------------------------------------------------------------
.text:0041352E
.text:0041352E loc_41352E:                             ; CODE XREF: sub_410970+2B1E↑j
.text:0041352E                 mov     edi, [esp+97Ch+var_950]
.text:00413532                 mov     byte ptr [edi], 1Ch
.text:00413535                 jmp     loc_410D9A
.text:0041353A ; ---------------------------------------------------------------------------
.text:0041353A
.text:0041353A loc_41353A:                             ; CODE XREF: sub_410970+22AD↑j
.text:0041353A                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:0041353A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 00412C1D case 119
.text:00413545                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041354B                 mov     eax, [esp+97Ch+arg_C]
.text:00413552                 mov     ecx, [esp+97Ch+var_950]
.text:00413556                 mov     edi, [eax]
.text:00413558                 mov     [esp+97Ch+var_900], ecx
.text:0041355C                 mov     esi, ecx
.text:0041355E                 mov     edx, [eax+4]
.text:00413561                 sub     esi, edi
.text:00413563                 mov     ebx, edi
.text:00413565                 inc     esi
.text:00413566                 cmp     esi, edx
.text:00413568                 jbe     loc_413623
.text:0041356E
.text:0041356E loc_41356E:                             ; CODE XREF: sub_410970+2CAD↓j
.text:0041356E                 cmp     edx, 10000h
.text:00413574                 mov     ebp, 0Fh
.text:00413579                 jz      loc_410D86
.text:0041357F                 mov     esi, [esp+97Ch+arg_C]
.text:00413586                 lea     ebp, [edx+edx]
.text:00413589                 cmp     ebp, 10000h
.text:0041358F                 mov     [esi+4], ebp
.text:00413592                 jbe     short loc_41359B
.text:00413594                 mov     dword ptr [esi+4], 10000h
.text:0041359B
.text:0041359B loc_41359B:                             ; CODE XREF: sub_410970+2C22↑j
.text:0041359B                 mov     eax, [esp+97Ch+arg_C]
.text:004135A2                 mov     ebp, 0Ch
.text:004135A7                 mov     esi, [eax+4]
.text:004135AA                 mov     [esp+97Ch+Size], edi ; Block
.text:004135AD                 mov     [esp+97Ch+var_978], esi ; Size
.text:004135B1                 call    realloc
.text:004135B6                 mov     edx, [esp+97Ch+arg_C]
.text:004135BD                 test    eax, eax
.text:004135BF                 mov     [edx], eax
.text:004135C1                 jz      loc_410D86
.text:004135C7                 cmp     ebx, eax
.text:004135C9                 jz      short loc_4135FF
.text:004135CB                 sub     eax, ebx
.text:004135CD                 mov     ebx, [esp+97Ch+var_908]
.text:004135D1                 add     [esp+97Ch+var_950], eax
.text:004135D5                 add     [esp+97Ch+var_904], eax
.text:004135D9                 test    ebx, ebx
.text:004135DB                 jz      short loc_4135E1
.text:004135DD                 add     [esp+97Ch+var_908], eax
.text:004135E1
.text:004135E1 loc_4135E1:                             ; CODE XREF: sub_410970+2C6B↑j
.text:004135E1                 mov     edi, [esp+97Ch+var_900]
.text:004135E5                 test    edi, edi
.text:004135E7                 jz      short loc_4135ED
.text:004135E9                 add     [esp+97Ch+var_900], eax
.text:004135ED
.text:004135ED loc_4135ED:                             ; CODE XREF: sub_410970+2C77↑j
.text:004135ED                 mov     ecx, [esp+97Ch+var_8FC]
.text:004135F4                 test    ecx, ecx
.text:004135F6                 jz      short loc_4135FF
.text:004135F8                 add     [esp+97Ch+var_8FC], eax
.text:004135FF
.text:004135FF loc_4135FF:                             ; CODE XREF: sub_410970+2C59↑j
.text:004135FF                                         ; sub_410970+2C86↑j
.text:004135FF                 mov     edx, [esp+97Ch+arg_C]
.text:00413606                 mov     eax, [esp+97Ch+arg_C]
.text:0041360D                 mov     ebp, [esp+97Ch+var_950]
.text:00413611                 mov     edi, [edx]
.text:00413613                 mov     edx, [eax+4]
.text:00413616                 sub     ebp, edi
.text:00413618                 inc     ebp
.text:00413619                 mov     ebx, edi
.text:0041361B                 cmp     ebp, edx
.text:0041361D                 ja      loc_41356E
.text:00413623
.text:00413623 loc_413623:                             ; CODE XREF: sub_410970+2BF8↑j
.text:00413623                 mov     edi, [esp+97Ch+var_950]
.text:00413627                 mov     byte ptr [edi], 18h
.text:0041362A                 jmp     loc_410D9A
.text:0041362F ; ---------------------------------------------------------------------------
.text:0041362F
.text:0041362F loc_41362F:                             ; CODE XREF: sub_410970+22AD↑j
.text:0041362F                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:0041362F                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 00412C1D case 123
.text:00413636                 and     ebx, 1200h
.text:0041363C                 cmp     ebx, 200h
.text:00413642                 jnz     def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413648
.text:00413648 loc_413648:                             ; CODE XREF: sub_410970+329D↓j
.text:00413648                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:00413650                 mov     edi, [esp+97Ch+var_8D0]
.text:00413657                 cmp     edi, [esp+97Ch+var_8F4]
.text:0041365E                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:00413666                 mov     ecx, edi
.text:00413668                 jz      loc_413729
.text:0041366E
.text:0041366E loc_41366E:                             ; CODE XREF: sub_410970+2D74↓j
.text:0041366E                 movzx   eax, byte ptr [edi]
.text:00413671                 inc     edi
.text:00413672                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413679                 mov     [esp+97Ch+var_8D0], edi
.text:00413680                 test    ebp, ebp
.text:00413682                 mov     [esp+97Ch+var_8EC], al
.text:00413689                 jz      short loc_4136A0
.text:0041368B                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413692                 movzx   esi, al
.text:00413695                 movzx   ebx, byte ptr [esi+ebp]
.text:00413699                 mov     [esp+97Ch+var_8EC], bl
.text:004136A0
.text:004136A0 loc_4136A0:                             ; CODE XREF: sub_410970+2D19↑j
.text:004136A0                 movzx   edx, [esp+97Ch+var_8EC]
.text:004136A8                 sub     dl, 30h ; '0'
.text:004136AB                 cmp     dl, 9
.text:004136AE                 ja      short loc_4136E6
.text:004136B0                 cmp     [esp+97Ch+var_934], 7FFFh
.text:004136B8                 jg      short loc_4136DD
.text:004136BA                 movzx   ebp, [esp+97Ch+var_8EC]
.text:004136C2                 mov     edx, [esp+97Ch+var_934]
.text:004136C6                 shr     edx, 1Fh
.text:004136C9                 dec     edx
.text:004136CA                 and     [esp+97Ch+var_934], edx
.text:004136CE                 mov     eax, [esp+97Ch+var_934]
.text:004136D2                 lea     esi, [eax+eax*4]
.text:004136D5                 lea     ebx, [ebp+esi*2-30h]
.text:004136D9                 mov     [esp+97Ch+var_934], ebx
.text:004136DD
.text:004136DD loc_4136DD:                             ; CODE XREF: sub_410970+2D48↑j
.text:004136DD                 cmp     edi, [esp+97Ch+var_8F4]
.text:004136E4                 jnz     short loc_41366E
.text:004136E6
.text:004136E6 loc_4136E6:                             ; CODE XREF: sub_410970+2D3E↑j
.text:004136E6                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:004136EE                 jz      loc_413B34
.text:004136F4                 mov     ebx, [esp+97Ch+var_934]
.text:004136F8                 mov     [esp+97Ch+var_938], ebx
.text:004136FC
.text:004136FC loc_4136FC:                             ; CODE XREF: sub_410970+3256↓j
.text:004136FC                                         ; sub_410970+3264↓j
.text:004136FC                 mov     esi, [esp+97Ch+var_934]
.text:00413700                 test    esi, esi
.text:00413702                 js      short loc_413729
.text:00413704                 mov     ebp, [esp+97Ch+var_938]
.text:00413708                 cmp     [esp+97Ch+var_934], ebp
.text:0041370C                 jg      short loc_413729
.text:0041370E                 test    [esp+97Ch+arg_8], 1000h
.text:00413719                 jnz     loc_4137CA
.text:0041371F                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:00413727                 jz      short loc_413786
.text:00413729
.text:00413729 loc_413729:                             ; CODE XREF: sub_410970+2CF8↑j
.text:00413729                                         ; sub_410970+2D92↑j ...
.text:00413729                 test    [esp+97Ch+arg_8], 200000h
.text:00413734                 jz      short loc_41375B
.text:00413736
.text:00413736 loc_413736:                             ; CODE XREF: sub_410970+31B1↓j
.text:00413736                 test    [esp+97Ch+arg_8], 1000h
.text:00413741                 mov     [esp+97Ch+var_8D0], ecx
.text:00413748                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:00413750                 jz      def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413756                 jmp     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0041375B ; ---------------------------------------------------------------------------
.text:0041375B
.text:0041375B loc_41375B:                             ; CODE XREF: sub_410970+2DC4↑j
.text:0041375B                 mov     edi, [esp+97Ch+Block]
.text:00413762                 mov     [esp+97Ch+Size], edi ; Block
.text:00413765                 call    free
.text:0041376A                 mov     ebp, [esp+97Ch+var_8F4]
.text:00413771                 cmp     [esp+97Ch+var_8D0], ebp
.text:00413778                 setnz   cl
.text:0041377B                 movzx   ebx, cl
.text:0041377E                 lea     ebp, [ebx+9]
.text:00413781                 jmp     loc_410D86
.text:00413786 ; ---------------------------------------------------------------------------
.text:00413786
.text:00413786 loc_413786:                             ; CODE XREF: sub_410970+2DB7↑j
.text:00413786                 mov     eax, [esp+97Ch+var_8D0]
.text:0041378D                 cmp     eax, [esp+97Ch+var_8F4]
.text:00413794                 jz      short loc_413729
.text:00413796                 movzx   edx, byte ptr [eax]
.text:00413799                 lea     ebx, [eax+1]
.text:0041379C                 mov     eax, [esp+97Ch+var_8F8]
.text:004137A3                 mov     [esp+97Ch+var_8D0], ebx
.text:004137AA                 test    eax, eax
.text:004137AC                 mov     [esp+97Ch+var_8EC], dl
.text:004137B3                 jz      short loc_4137CA
.text:004137B5                 mov     esi, [esp+97Ch+var_8F8]
.text:004137BC                 movzx   edi, dl
.text:004137BF                 movzx   edx, byte ptr [edi+esi]
.text:004137C3                 mov     [esp+97Ch+var_8EC], dl
.text:004137CA
.text:004137CA loc_4137CA:                             ; CODE XREF: sub_410970+2DA9↑j
.text:004137CA                                         ; sub_410970+2E43↑j
.text:004137CA                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:004137D2                 jnz     loc_413729
.text:004137D8                 mov     ebp, [esp+97Ch+var_900]
.text:004137DC                 test    ebp, ebp
.text:004137DE                 jz      loc_413B03
.text:004137E4
.text:004137E4 loc_4137E4:                             ; CODE XREF: sub_410970+31BF↓j
.text:004137E4                 cmp     [esp+97Ch+var_938], 7FFFh
.text:004137EC                 jg      loc_413AF2
.text:004137F2                 mov     eax, [esp+97Ch+var_938]
.text:004137F6                 test    eax, eax
.text:004137F8                 jnz     loc_41390F
.text:004137FE                 mov     edx, [esp+97Ch+arg_C]
.text:00413805                 mov     ebp, [esp+97Ch+arg_C]
.text:0041380C                 mov     esi, [esp+97Ch+var_950]
.text:00413810                 mov     edi, [edx]
.text:00413812                 mov     edx, [ebp+4]
.text:00413815                 sub     esi, edi
.text:00413817                 add     esi, 3
.text:0041381A                 mov     ebx, edi
.text:0041381C                 cmp     esi, edx
.text:0041381E                 jbe     loc_4138DB
.text:00413824
.text:00413824 loc_413824:                             ; CODE XREF: sub_410970+2F65↓j
.text:00413824                 cmp     edx, 10000h
.text:0041382A                 mov     ebp, 0Fh
.text:0041382F                 jz      loc_410D86
.text:00413835                 mov     esi, [esp+97Ch+arg_C]
.text:0041383C                 lea     ecx, [edx+edx]
.text:0041383F                 cmp     ecx, 10000h
.text:00413845                 mov     [esi+4], ecx
.text:00413848                 jbe     short loc_413851
.text:0041384A                 mov     dword ptr [esi+4], 10000h
.text:00413851
.text:00413851 loc_413851:                             ; CODE XREF: sub_410970+2ED8↑j
.text:00413851                 mov     eax, [esp+97Ch+arg_C]
.text:00413858                 mov     ebp, 0Ch
.text:0041385D                 mov     esi, [eax+4]
.text:00413860                 mov     [esp+97Ch+Size], edi ; Block
.text:00413863                 mov     [esp+97Ch+var_978], esi ; Size
.text:00413867                 call    realloc
.text:0041386C                 mov     edi, [esp+97Ch+arg_C]
.text:00413873                 test    eax, eax
.text:00413875                 mov     [edi], eax
.text:00413877                 jz      loc_410D86
.text:0041387D                 cmp     ebx, eax
.text:0041387F                 jz      short loc_4138B5
.text:00413881                 sub     eax, ebx
.text:00413883                 mov     ebx, [esp+97Ch+var_908]
.text:00413887                 add     [esp+97Ch+var_950], eax
.text:0041388B                 add     [esp+97Ch+var_904], eax
.text:0041388F                 test    ebx, ebx
.text:00413891                 jz      short loc_413897
.text:00413893                 add     [esp+97Ch+var_908], eax
.text:00413897
.text:00413897 loc_413897:                             ; CODE XREF: sub_410970+2F21↑j
.text:00413897                 mov     edx, [esp+97Ch+var_900]
.text:0041389B                 test    edx, edx
.text:0041389D                 jz      short loc_4138A3
.text:0041389F                 add     [esp+97Ch+var_900], eax
.text:004138A3
.text:004138A3 loc_4138A3:                             ; CODE XREF: sub_410970+2F2D↑j
.text:004138A3                 mov     ebp, [esp+97Ch+var_8FC]
.text:004138AA                 test    ebp, ebp
.text:004138AC                 jz      short loc_4138B5
.text:004138AE                 add     [esp+97Ch+var_8FC], eax
.text:004138B5
.text:004138B5 loc_4138B5:                             ; CODE XREF: sub_410970+2F0F↑j
.text:004138B5                                         ; sub_410970+2F3C↑j
.text:004138B5                 mov     esi, [esp+97Ch+arg_C]
.text:004138BC                 mov     eax, [esp+97Ch+arg_C]
.text:004138C3                 mov     ecx, [esp+97Ch+var_950]
.text:004138C7                 mov     edi, [esi]
.text:004138C9                 mov     edx, [eax+4]
.text:004138CC                 sub     ecx, edi
.text:004138CE                 add     ecx, 3
.text:004138D1                 mov     ebx, edi
.text:004138D3                 cmp     ecx, edx
.text:004138D5                 ja      loc_413824
.text:004138DB
.text:004138DB loc_4138DB:                             ; CODE XREF: sub_410970+2EAE↑j
.text:004138DB                 mov     [esp+97Ch+Size], 0Dh
.text:004138E2                 mov     ebx, [esp+97Ch+var_950]
.text:004138E6                 mov     ebp, [esp+97Ch+var_900]
.text:004138EA                 mov     edi, [esp+97Ch+var_900]
.text:004138EE                 mov     edx, ebx
.text:004138F0                 sub     edx, ebp
.text:004138F2                 mov     [esp+97Ch+var_970], ebx
.text:004138F6                 add     ebx, 3
.text:004138F9                 mov     [esp+97Ch+var_974], edx
.text:004138FD                 mov     [esp+97Ch+var_978], edi
.text:00413901                 call    sub_40D790
.text:00413906                 mov     [esp+97Ch+var_950], ebx
.text:0041390A                 jmp     loc_4116B8
.text:0041390F ; ---------------------------------------------------------------------------
.text:0041390F
.text:0041390F loc_41390F:                             ; CODE XREF: sub_410970+2E88↑j
.text:0041390F                 cmp     [esp+97Ch+var_938], 1
.text:00413914                 mov     [esp+97Ch+var_93C], 14h
.text:0041391C                 jg      loc_4139DA
.text:00413922                 mov     [esp+97Ch+var_93C], 0Ah
.text:0041392A                 mov     ecx, [esp+97Ch+arg_C]
.text:00413931                 mov     eax, [esp+97Ch+var_950]
.text:00413935                 mov     edi, [ecx]
.text:00413937                 mov     edx, [ecx+4]
.text:0041393A                 sub     eax, edi
.text:0041393C                 mov     ebx, edi
.text:0041393E                 add     eax, 0Ah
.text:00413941
.text:00413941 loc_413941:                             ; CODE XREF: sub_410970+308B↓j
.text:00413941                 cmp     eax, edx
.text:00413943                 jbe     loc_413A00
.text:00413949                 cmp     edx, 10000h
.text:0041394F                 mov     ebp, 0Fh
.text:00413954                 jz      loc_410D86
.text:0041395A                 mov     esi, [esp+97Ch+arg_C]
.text:00413961                 lea     ebp, [edx+edx]
.text:00413964                 cmp     ebp, 10000h
.text:0041396A                 mov     [esi+4], ebp
.text:0041396D                 jbe     short loc_413976
.text:0041396F                 mov     dword ptr [esi+4], 10000h
.text:00413976
.text:00413976 loc_413976:                             ; CODE XREF: sub_410970+2FFD↑j
.text:00413976                 mov     eax, [esp+97Ch+arg_C]
.text:0041397D                 mov     ebp, 0Ch
.text:00413982                 mov     esi, [eax+4]
.text:00413985                 mov     [esp+97Ch+Size], edi ; Block
.text:00413988                 mov     [esp+97Ch+var_978], esi ; Size
.text:0041398C                 call    realloc
.text:00413991                 mov     edi, [esp+97Ch+arg_C]
.text:00413998                 test    eax, eax
.text:0041399A                 mov     [edi], eax
.text:0041399C                 jz      loc_410D86
.text:004139A2                 cmp     ebx, eax
.text:004139A4                 jz      short loc_4139DA
.text:004139A6                 mov     edx, [esp+97Ch+var_908]
.text:004139AA                 sub     eax, ebx
.text:004139AC                 add     [esp+97Ch+var_950], eax
.text:004139B0                 add     [esp+97Ch+var_904], eax
.text:004139B4                 test    edx, edx
.text:004139B6                 jz      short loc_4139BC
.text:004139B8                 add     [esp+97Ch+var_908], eax
.text:004139BC
.text:004139BC loc_4139BC:                             ; CODE XREF: sub_410970+3046↑j
.text:004139BC                 mov     ebx, [esp+97Ch+var_900]
.text:004139C0                 test    ebx, ebx
.text:004139C2                 jz      short loc_4139C8
.text:004139C4                 add     [esp+97Ch+var_900], eax
.text:004139C8
.text:004139C8 loc_4139C8:                             ; CODE XREF: sub_410970+3052↑j
.text:004139C8                 mov     ecx, [esp+97Ch+var_8FC]
.text:004139CF                 test    ecx, ecx
.text:004139D1                 jz      short loc_4139DA
.text:004139D3                 add     [esp+97Ch+var_8FC], eax
.text:004139DA
.text:004139DA loc_4139DA:                             ; CODE XREF: sub_410970+2FAC↑j
.text:004139DA                                         ; sub_410970+3034↑j ...
.text:004139DA                 mov     eax, [esp+97Ch+arg_C]
.text:004139E1                 mov     ebp, [esp+97Ch+arg_C]
.text:004139E8                 mov     esi, [esp+97Ch+var_93C]
.text:004139EC                 mov     edi, [eax]
.text:004139EE                 mov     eax, [esp+97Ch+var_950]
.text:004139F2                 mov     edx, [ebp+4]
.text:004139F5                 mov     ebx, edi
.text:004139F7                 sub     eax, edi
.text:004139F9                 add     eax, esi
.text:004139FB                 jmp     loc_413941
.text:00413A00 ; ---------------------------------------------------------------------------
.text:00413A00
.text:00413A00 loc_413A00:                             ; CODE XREF: sub_410970+2FD3↑j
.text:00413A00                 mov     edi, [esp+97Ch+var_950]
.text:00413A04                 mov     edx, [esp+97Ch+var_934]
.text:00413A08                 mov     [esp+97Ch+var_96C], edi
.text:00413A0C                 add     edi, 5
.text:00413A0F                 cmp     [esp+97Ch+var_938], 1
.text:00413A14                 mov     [esp+97Ch+var_970], edx
.text:00413A18                 jle     loc_413AE2
.text:00413A1E                 mov     ebx, [esp+97Ch+var_900]
.text:00413A22                 mov     eax, edi
.text:00413A24                 sub     eax, ebx
.text:00413A26                 add     eax, 2
.text:00413A29
.text:00413A29 loc_413A29:                             ; CODE XREF: sub_410970+317D↓j
.text:00413A29                 mov     [esp+97Ch+var_974], eax
.text:00413A2D                 mov     esi, [esp+97Ch+var_900]
.text:00413A31                 mov     [esp+97Ch+Size], 15h
.text:00413A38                 mov     [esp+97Ch+var_978], esi
.text:00413A3C                 call    sub_40D7D0
.text:00413A41                 mov     [esp+97Ch+var_950], edi
.text:00413A45                 mov     ebp, [esp+97Ch+var_934]
.text:00413A49                 mov     [esp+97Ch+var_96C], edi
.text:00413A4D                 mov     edi, [esp+97Ch+var_900]
.text:00413A51                 mov     [esp+97Ch+var_970], ebp
.text:00413A55                 mov     [esp+97Ch+var_974], 5
.text:00413A5D                 mov     [esp+97Ch+var_978], edi
.text:00413A61                 mov     [esp+97Ch+Size], 17h
.text:00413A68                 call    sub_40D7D0
.text:00413A6D                 add     [esp+97Ch+var_950], 5
.text:00413A72                 cmp     [esp+97Ch+var_938], 1
.text:00413A77                 jle     loc_4116B8
.text:00413A7D                 mov     [esp+97Ch+Size], 16h
.text:00413A84                 mov     edx, [esp+97Ch+var_900]
.text:00413A88                 mov     esi, [esp+97Ch+var_950]
.text:00413A8C                 mov     edi, [esp+97Ch+var_938]
.text:00413A90                 mov     ebp, [esp+97Ch+var_950]
.text:00413A94                 sub     edx, esi
.text:00413A96                 add     edx, 2
.text:00413A99                 dec     edi
.text:00413A9A                 mov     [esp+97Ch+var_974], edx
.text:00413A9E                 mov     [esp+97Ch+var_978], ebp
.text:00413AA2                 add     ebp, 5
.text:00413AA5                 mov     ebx, ebp
.text:00413AA7                 mov     [esp+97Ch+var_970], edi
.text:00413AAB                 call    sub_40D760
.text:00413AB0                 mov     [esp+97Ch+var_96C], ebp
.text:00413AB4                 mov     ecx, [esp+97Ch+var_900]
.text:00413AB8                 add     ebp, 5
.text:00413ABB                 mov     [esp+97Ch+var_970], edi
.text:00413ABF                 mov     eax, [esp+97Ch+var_900]
.text:00413AC3                 mov     [esp+97Ch+Size], 17h
.text:00413ACA                 sub     ebx, ecx
.text:00413ACC                 mov     [esp+97Ch+var_974], ebx
.text:00413AD0                 mov     [esp+97Ch+var_978], eax
.text:00413AD4                 call    sub_40D7D0
.text:00413AD9                 mov     [esp+97Ch+var_950], ebp
.text:00413ADD                 jmp     loc_4116B8
.text:00413AE2 ; ---------------------------------------------------------------------------
.text:00413AE2
.text:00413AE2 loc_413AE2:                             ; CODE XREF: sub_410970+30A8↑j
.text:00413AE2                 mov     ecx, [esp+97Ch+var_900]
.text:00413AE6                 mov     eax, edi
.text:00413AE8                 sub     eax, ecx
.text:00413AEA                 sub     eax, 3
.text:00413AED                 jmp     loc_413A29
.text:00413AF2 ; ---------------------------------------------------------------------------
.text:00413AF2
.text:00413AF2 loc_413AF2:                             ; CODE XREF: sub_410970+2E7C↑j
.text:00413AF2                 mov     esi, [esp+97Ch+Block]
.text:00413AF9                 mov     ebp, 0Ah
.text:00413AFE                 jmp     loc_412A73
.text:00413B03 ; ---------------------------------------------------------------------------
.text:00413B03
.text:00413B03 loc_413B03:                             ; CODE XREF: sub_410970+2E6E↑j
.text:00413B03                 mov     ebx, [esp+97Ch+arg_8]
.text:00413B0A                 and     ebx, 200020h
.text:00413B10                 cmp     ebx, 20h ; ' '
.text:00413B13                 jz      loc_411F4E
.text:00413B19                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:00413B21                 jz      loc_413736
.text:00413B27                 mov     ecx, [esp+97Ch+var_950]
.text:00413B2B                 mov     [esp+97Ch+var_900], ecx
.text:00413B2F                 jmp     loc_4137E4
.text:00413B34 ; ---------------------------------------------------------------------------
.text:00413B34
.text:00413B34 loc_413B34:                             ; CODE XREF: sub_410970+2D7E↑j
.text:00413B34                 mov     edi, [esp+97Ch+var_8D0]
.text:00413B3B                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413B42                 jz      loc_413BCC
.text:00413B48
.text:00413B48 loc_413B48:                             ; CODE XREF: sub_410970+324E↓j
.text:00413B48                 movzx   eax, byte ptr [edi]
.text:00413B4B                 inc     edi
.text:00413B4C                 mov     ebx, [esp+97Ch+var_8F8]
.text:00413B53                 mov     [esp+97Ch+var_8D0], edi
.text:00413B5A                 test    ebx, ebx
.text:00413B5C                 mov     [esp+97Ch+var_8EC], al
.text:00413B63                 jz      short loc_413B7A
.text:00413B65                 mov     ebp, [esp+97Ch+var_8F8]
.text:00413B6C                 movzx   esi, al
.text:00413B6F                 movzx   ebx, byte ptr [esi+ebp]
.text:00413B73                 mov     [esp+97Ch+var_8EC], bl
.text:00413B7A
.text:00413B7A loc_413B7A:                             ; CODE XREF: sub_410970+31F3↑j
.text:00413B7A                 movzx   edx, [esp+97Ch+var_8EC]
.text:00413B82                 sub     dl, 30h ; '0'
.text:00413B85                 cmp     dl, 9
.text:00413B88                 ja      short loc_413BC0
.text:00413B8A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:00413B92                 jg      short loc_413BB7
.text:00413B94                 movzx   ebp, [esp+97Ch+var_8EC]
.text:00413B9C                 mov     edx, [esp+97Ch+var_938]
.text:00413BA0                 shr     edx, 1Fh
.text:00413BA3                 dec     edx
.text:00413BA4                 and     [esp+97Ch+var_938], edx
.text:00413BA8                 mov     eax, [esp+97Ch+var_938]
.text:00413BAC                 lea     esi, [eax+eax*4]
.text:00413BAF                 lea     ebx, [ebp+esi*2-30h]
.text:00413BB3                 mov     [esp+97Ch+var_938], ebx
.text:00413BB7
.text:00413BB7 loc_413BB7:                             ; CODE XREF: sub_410970+3222↑j
.text:00413BB7                 cmp     edi, [esp+97Ch+var_8F4]
.text:00413BBE                 jnz     short loc_413B48
.text:00413BC0
.text:00413BC0 loc_413BC0:                             ; CODE XREF: sub_410970+3218↑j
.text:00413BC0                 mov     edi, [esp+97Ch+var_938]
.text:00413BC4                 test    edi, edi
.text:00413BC6                 jns     loc_4136FC
.text:00413BCC
.text:00413BCC loc_413BCC:                             ; CODE XREF: sub_410970+31D2↑j
.text:00413BCC                 mov     [esp+97Ch+var_938], 7FFFh
.text:00413BD4                 jmp     loc_4136FC
.text:00413BD9 ; ---------------------------------------------------------------------------
.text:00413BD9
.text:00413BD9 loc_413BD9:                             ; CODE XREF: sub_410970+22AD↑j
.text:00413BD9                                         ; DATA XREF: sub_410970:jpt_412C1D↑o
.text:00413BD9                 mov     edi, [esp+97Ch+arg_8] ; jumptable 00412C1D case 124
.text:00413BE0                 and     edi, 0FFFF8400h
.text:00413BE6                 test    di, di
.text:00413BE9                 jz      loc_4111E6
.text:00413BEF                 jmp     def_412C1D      ; jumptable 00412C1D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:00413BF4 ; ---------------------------------------------------------------------------
.text:00413BF4
.text:00413BF4 loc_413BF4:                             ; CODE XREF: sub_410970+16F↑j
.text:00413BF4                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00413BF4                 mov     edx, [esp+97Ch+arg_8] ; jumptable 00410ADF case 123
.text:00413BFB                 and     edx, 1200h
.text:00413C01                 cmp     edx, 1200h
.text:00413C07                 jnz     def_410ADF      ; jumptable 00410ADF default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:00413C0D                 jmp     loc_413648
.text:00413C12 ; ---------------------------------------------------------------------------
.text:00413C12
.text:00413C12 loc_413C12:                             ; CODE XREF: sub_410970+16F↑j
.text:00413C12                                         ; DATA XREF: sub_410970:jpt_410ADF↑o
.text:00413C12                 mov     esi, [esp+97Ch+arg_8] ; jumptable 00410ADF case 124
.text:00413C19                 and     esi, 0FFFF8000h
.text:00413C1F                 test    si, si
.text:00413C22                 jmp     loc_4111E0
.text:00413C27 ; ---------------------------------------------------------------------------
.text:00413C27
.text:00413C27 loc_413C27:                             ; CODE XREF: sub_410970+F9↑j
.text:00413C27                 mov     edi, [esp+97Ch+Block]
.text:00413C2E                 mov     ebp, 0Ch
.text:00413C33                 jmp     loc_410F10
.text:00413C38 ; ---------------------------------------------------------------------------
.text:00413C38
.text:00413C38 loc_413C38:                             ; CODE XREF: sub_410970+D6↑j
.text:00413C38                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:00413C3F                 call    malloc
.text:00413C44                 mov     ecx, [esp+97Ch+arg_C]
.text:00413C4B                 mov     [ecx], eax
.text:00413C4D                 jmp     loc_410A5E
.text:00413C52 ; ---------------------------------------------------------------------------
.text:00413C52
.text:00413C52 loc_413C52:                             ; CODE XREF: sub_410970+CC↑j
.text:00413C52                 mov     ebp, [esp+97Ch+arg_C]
.text:00413C59                 mov     edi, [ebp+0]
.text:00413C5C                 jmp     loc_410A7D
.text:00413C61 ; ---------------------------------------------------------------------------
.text:00413C61
.text:00413C61 loc_413C61:                             ; CODE XREF: sub_410970+BA↑j
.text:00413C61                 mov     [esp+97Ch+var_974], 100h ; Size
.text:00413C69                 xor     ebx, ebx
.text:00413C6B                 mov     [esp+97Ch+var_978], 0 ; Val
.text:00413C73                 mov     [esp+97Ch+Size], offset byte_420290 ; void *
.text:00413C7A                 call    memset
.text:00413C7F                 nop
.text:00413C80
.text:00413C80 loc_413C80:                             ; CODE XREF: sub_410970+333D↓j
.text:00413C80                 mov     esi, ds:__mb_cur_max
.text:00413C86                 cmp     dword ptr [esi], 1
.text:00413C89                 jz      short loc_413CC6
.text:00413C8B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:00413C93                 mov     [esp+97Ch+Size], ebx ; C
.text:00413C96                 call    _isctype
.text:00413C9B
.text:00413C9B loc_413C9B:                             ; CODE XREF: sub_410970+3368↓j
.text:00413C9B                 test    eax, eax
.text:00413C9D                 jz      short loc_413CA6
.text:00413C9F                 mov     ds:byte_420290[ebx], 1
.text:00413CA6
.text:00413CA6 loc_413CA6:                             ; CODE XREF: sub_410970+332D↑j
.text:00413CA6                 inc     ebx
.text:00413CA7                 cmp     ebx, 0FFh
.text:00413CAD                 jle     short loc_413C80
.text:00413CAF                 mov     ds:byte_4202EF, 1
.text:00413CB6                 mov     ebx, 1
.text:00413CBB                 mov     ds:dword_420280, ebx
.text:00413CC1                 jmp     loc_410A30
.text:00413CC6 ; ---------------------------------------------------------------------------
.text:00413CC6
.text:00413CC6 loc_413CC6:                             ; CODE XREF: sub_410970+3319↑j
.text:00413CC6                 mov     ebp, ds:_pctype
.text:00413CCC                 mov     edi, [ebp+0]
.text:00413CCF                 movzx   eax, word ptr [edi+ebx*2]
.text:00413CD3                 and     eax, 107h
.text:00413CD8                 jmp     short loc_413C9B
.text:00413CD8 sub_410970      endp
.text:00413CD8
.text:00413CD8 ; ---------------------------------------------------------------------------
.text:00413CDA                 align 10h
.text:00413CE0
.text:00413CE0 ; =============== S U B R O U T I N E =======================================
.text:00413CE0
.text:00413CE0
.text:00413CE0 sub_413CE0      proc near               ; CODE XREF: sub_410520+105↑p
.text:00413CE0                                         ; .text:00410766↑p ...
.text:00413CE0
.text:00413CE0 var_4C          = dword ptr -4Ch
.text:00413CE0 var_48          = dword ptr -48h
.text:00413CE0 var_44          = dword ptr -44h
.text:00413CE0 var_40          = dword ptr -40h
.text:00413CE0 var_3C          = dword ptr -3Ch
.text:00413CE0 var_38          = dword ptr -38h
.text:00413CE0 var_34          = dword ptr -34h
.text:00413CE0 var_30          = dword ptr -30h
.text:00413CE0 var_20          = dword ptr -20h
.text:00413CE0 var_1C          = dword ptr -1Ch
.text:00413CE0 var_18          = dword ptr -18h
.text:00413CE0 var_14          = dword ptr -14h
.text:00413CE0 arg_0           = dword ptr  4
.text:00413CE0 arg_4           = dword ptr  8
.text:00413CE0 arg_8           = dword ptr  0Ch
.text:00413CE0 arg_C           = dword ptr  10h
.text:00413CE0 arg_10          = dword ptr  14h
.text:00413CE0 arg_14          = dword ptr  18h
.text:00413CE0 arg_18          = dword ptr  1Ch
.text:00413CE0 arg_1C          = dword ptr  20h
.text:00413CE0 arg_20          = dword ptr  24h
.text:00413CE0
.text:00413CE0                 push    ebp
.text:00413CE1                 push    edi
.text:00413CE2                 push    esi
.text:00413CE3                 push    ebx
.text:00413CE4                 sub     esp, 3Ch
.text:00413CE7                 mov     edi, [esp+4Ch+arg_0]
.text:00413CEB                 mov     ebx, [esp+4Ch+arg_14]
.text:00413CEF                 mov     ecx, [esp+4Ch+arg_10]
.text:00413CF3                 mov     edx, [edi+14h]
.text:00413CF6                 mov     esi, [esp+4Ch+arg_18]
.text:00413CFA                 mov     ebp, [edi+10h]
.text:00413CFD                 mov     [esp+4Ch+var_14], edx
.text:00413D01                 mov     edx, [esp+4Ch+arg_8]
.text:00413D05                 lea     eax, [esi+ebx]
.text:00413D08                 add     edx, ecx
.text:00413D0A                 test    ebx, ebx
.text:00413D0C                 mov     [esp+4Ch+var_18], edx
.text:00413D10                 js      loc_413EB0
.text:00413D16                 cmp     ebx, edx
.text:00413D18                 jg      loc_413EB0
.text:00413D1E                 test    eax, eax
.text:00413D20                 js      loc_413F71
.text:00413D26                 cmp     eax, [esp+4Ch+var_18]
.text:00413D2A                 jle     short loc_413D32
.text:00413D2C                 mov     esi, [esp+4Ch+var_18]
.text:00413D30                 sub     esi, ebx
.text:00413D32
.text:00413D32 loc_413D32:                             ; CODE XREF: sub_413CE0+4A↑j
.text:00413D32                                         ; sub_413CE0+295↓j
.text:00413D32                 mov     eax, [edi+8]
.text:00413D35                 test    eax, eax
.text:00413D37                 jz      short loc_413D60
.text:00413D39                 test    esi, esi
.text:00413D3B                 jle     short loc_413D60
.text:00413D3D                 mov     ecx, [edi]
.text:00413D3F                 movzx   eax, byte ptr [ecx]
.text:00413D42                 cmp     al, 0Bh
.text:00413D44                 jz      loc_413F5A
.text:00413D4A                 cmp     al, 9
.text:00413D4C                 jz      loc_413F50
.text:00413D52                 lea     esi, [esi+0]
.text:00413D59                 lea     edi, [edi+0]
.text:00413D60
.text:00413D60 loc_413D60:                             ; CODE XREF: sub_413CE0+57↑j
.text:00413D60                                         ; sub_413CE0+5B↑j ...
.text:00413D60                 test    ebp, ebp
.text:00413D62                 jz      loc_413E20
.text:00413D68                 test    byte ptr [edi+1Ch], 8
.text:00413D6C                 jz      loc_413F35
.text:00413D72
.text:00413D72 loc_413D72:                             ; CODE XREF: sub_413CE0+1AF↓j
.text:00413D72                                         ; sub_413CE0+1B6↓j ...
.text:00413D72                 test    ebp, ebp
.text:00413D74                 jz      loc_413E20
.text:00413D7A                 cmp     ebx, [esp+4Ch+var_18]
.text:00413D7E                 jge     loc_413E20
.text:00413D84                 test    byte ptr [edi+1Ch], 1
.text:00413D88                 jnz     loc_413E20
.text:00413D8E                 test    esi, esi
.text:00413D90                 jle     loc_413EE4
.text:00413D96                 cmp     ebx, [esp+4Ch+arg_8]
.text:00413D9A                 mov     [esp+4Ch+var_20], 0
.text:00413DA2                 mov     [esp+4Ch+var_1C], esi
.text:00413DA6                 jge     loc_413ED2
.text:00413DAC                 lea     edx, [esi+ebx]
.text:00413DAF                 cmp     edx, [esp+4Ch+arg_8]
.text:00413DB3                 jl      short loc_413DC3
.text:00413DB5                 mov     ecx, [esp+4Ch+arg_8]
.text:00413DB9                 mov     edx, esi
.text:00413DBB                 sub     ecx, ebx
.text:00413DBD                 sub     edx, ecx
.text:00413DBF                 mov     [esp+4Ch+var_20], edx
.text:00413DC3
.text:00413DC3 loc_413DC3:                             ; CODE XREF: sub_413CE0+D3↑j
.text:00413DC3                 mov     edx, [esp+4Ch+arg_4]
.text:00413DC7                 add     edx, ebx
.text:00413DC9
.text:00413DC9 loc_413DC9:                             ; CODE XREF: sub_413CE0+1FF↓j
.text:00413DC9                 mov     ecx, [esp+4Ch+var_14]
.text:00413DCD                 test    ecx, ecx
.text:00413DCF                 jz      loc_413EB7
.text:00413DD5                 cmp     esi, [esp+4Ch+var_20]
.text:00413DD9                 jle     short loc_413E09
.text:00413DDB                 movzx   eax, byte ptr [edx]
.text:00413DDE                 inc     edx
.text:00413DDF                 mov     ecx, [esp+4Ch+var_14]
.text:00413DE3                 movzx   ecx, byte ptr [eax+ecx]
.text:00413DE7                 cmp     byte ptr [ecx+ebp], 0
.text:00413DEB                 jnz     short loc_413E09
.text:00413DED                 lea     esi, [esi+0]
.text:00413DF0
.text:00413DF0 loc_413DF0:                             ; CODE XREF: sub_413CE0+127↓j
.text:00413DF0                 dec     esi
.text:00413DF1                 cmp     esi, [esp+4Ch+var_20]
.text:00413DF5                 jle     short loc_413E09
.text:00413DF7                 movzx   eax, byte ptr [edx]
.text:00413DFA                 inc     edx
.text:00413DFB                 mov     ecx, [esp+4Ch+var_14]
.text:00413DFF                 movzx   eax, byte ptr [eax+ecx]
.text:00413E03                 cmp     byte ptr [eax+ebp], 0
.text:00413E07                 jz      short loc_413DF0
.text:00413E09
.text:00413E09 loc_413E09:                             ; CODE XREF: sub_413CE0+F9↑j
.text:00413E09                                         ; sub_413CE0+10B↑j ...
.text:00413E09                 sub     [esp+4Ch+var_1C], esi
.text:00413E0D                 mov     edx, [esp+4Ch+var_1C]
.text:00413E11                 add     ebx, edx
.text:00413E13                 lea     esi, [esi+0]
.text:00413E19                 lea     edi, [edi+0]
.text:00413E20
.text:00413E20 loc_413E20:                             ; CODE XREF: sub_413CE0+82↑j
.text:00413E20                                         ; sub_413CE0+94↑j ...
.text:00413E20                 test    esi, esi
.text:00413E22                 js      short loc_413E2A
.text:00413E24                 cmp     ebx, [esp+4Ch+var_18]
.text:00413E28                 jz      short loc_413EA0
.text:00413E2A
.text:00413E2A loc_413E2A:                             ; CODE XREF: sub_413CE0+142↑j
.text:00413E2A                                         ; sub_413CE0+1C2↓j ...
.text:00413E2A                 mov     [esp+4Ch+var_38], ebx
.text:00413E2E                 mov     edx, [esp+4Ch+arg_20]
.text:00413E32                 mov     ecx, [esp+4Ch+arg_1C]
.text:00413E36                 mov     [esp+4Ch+var_4C], edi
.text:00413E39                 mov     eax, [esp+4Ch+arg_10]
.text:00413E3D                 mov     [esp+4Ch+var_30], edx
.text:00413E41                 mov     edx, [esp+4Ch+arg_C]
.text:00413E45                 mov     [esp+4Ch+var_34], ecx
.text:00413E49                 mov     ecx, [esp+4Ch+arg_8]
.text:00413E4D                 mov     [esp+4Ch+var_3C], eax
.text:00413E51                 mov     eax, [esp+4Ch+arg_4]
.text:00413E55                 mov     [esp+4Ch+var_40], edx
.text:00413E59                 mov     [esp+4Ch+var_44], ecx
.text:00413E5D                 mov     [esp+4Ch+var_48], eax
.text:00413E61                 call    sub_40DA60
.text:00413E66                 test    eax, eax
.text:00413E68                 mov     edx, ebx
.text:00413E6A                 js      short loc_413E76
.text:00413E6C
.text:00413E6C loc_413E6C:                             ; CODE XREF: sub_413CE0+19E↓j
.text:00413E6C                                         ; sub_413CE0+1A7↓j ...
.text:00413E6C                 add     esp, 3Ch
.text:00413E6F                 mov     eax, edx
.text:00413E71                 pop     ebx
.text:00413E72                 pop     esi
.text:00413E73                 pop     edi
.text:00413E74                 pop     ebp
.text:00413E75                 retn
.text:00413E76 ; ---------------------------------------------------------------------------
.text:00413E76
.text:00413E76 loc_413E76:                             ; CODE XREF: sub_413CE0+18A↑j
.text:00413E76                 cmp     eax, 0FFFFFFFEh
.text:00413E79                 mov     edx, 0FFFFFFFEh
.text:00413E7E                 jz      short loc_413E6C
.text:00413E80
.text:00413E80 loc_413E80:                             ; CODE XREF: sub_413CE0+241↓j
.text:00413E80                 test    esi, esi
.text:00413E82                 mov     edx, 0FFFFFFFFh
.text:00413E87                 jz      short loc_413E6C
.text:00413E89                 test    esi, esi
.text:00413E8B                 jle     short loc_413E94
.text:00413E8D                 dec     esi
.text:00413E8E                 inc     ebx
.text:00413E8F                 jmp     loc_413D72
.text:00413E94 ; ---------------------------------------------------------------------------
.text:00413E94
.text:00413E94 loc_413E94:                             ; CODE XREF: sub_413CE0+1AB↑j
.text:00413E94                 inc     esi
.text:00413E95                 dec     ebx
.text:00413E96                 jmp     loc_413D72
.text:00413E96 ; ---------------------------------------------------------------------------
.text:00413E9B                 align 10h
.text:00413EA0
.text:00413EA0 loc_413EA0:                             ; CODE XREF: sub_413CE0+148↑j
.text:00413EA0                 test    ebp, ebp
.text:00413EA2                 jz      short loc_413E2A
.text:00413EA4                 test    byte ptr [edi+1Ch], 1
.text:00413EA8                 jnz     short loc_413E2A
.text:00413EAA                 lea     esi, [esi+0]
.text:00413EB0
.text:00413EB0 loc_413EB0:                             ; CODE XREF: sub_413CE0+30↑j
.text:00413EB0                                         ; sub_413CE0+38↑j
.text:00413EB0                 mov     edx, 0FFFFFFFFh
.text:00413EB5                 jmp     short loc_413E6C
.text:00413EB7 ; ---------------------------------------------------------------------------
.text:00413EB7
.text:00413EB7 loc_413EB7:                             ; CODE XREF: sub_413CE0+EF↑j
.text:00413EB7                                         ; sub_413CE0+1F0↓j
.text:00413EB7                 cmp     esi, [esp+4Ch+var_20]
.text:00413EBB                 jle     loc_413E09
.text:00413EC1                 movzx   ecx, byte ptr [edx]
.text:00413EC4                 inc     edx
.text:00413EC5                 cmp     byte ptr [ecx+ebp], 0
.text:00413EC9                 jnz     loc_413E09
.text:00413ECF                 dec     esi
.text:00413ED0                 jmp     short loc_413EB7
.text:00413ED2 ; ---------------------------------------------------------------------------
.text:00413ED2
.text:00413ED2 loc_413ED2:                             ; CODE XREF: sub_413CE0+C6↑j
.text:00413ED2                 mov     ecx, [esp+4Ch+arg_C]
.text:00413ED6                 mov     eax, [esp+4Ch+arg_8]
.text:00413EDA                 sub     ecx, eax
.text:00413EDC                 lea     edx, [ebx+ecx]
.text:00413EDF                 jmp     loc_413DC9
.text:00413EE4 ; ---------------------------------------------------------------------------
.text:00413EE4
.text:00413EE4 loc_413EE4:                             ; CODE XREF: sub_413CE0+B0↑j
.text:00413EE4                 mov     ecx, [esp+4Ch+arg_8]
.text:00413EE8                 test    ecx, ecx
.text:00413EEA                 jz      short loc_413EF2
.text:00413EEC                 cmp     ebx, [esp+4Ch+arg_8]
.text:00413EF0                 jl      short loc_413F2B
.text:00413EF2
.text:00413EF2 loc_413EF2:                             ; CODE XREF: sub_413CE0+20A↑j
.text:00413EF2                 mov     edx, [esp+4Ch+arg_8]
.text:00413EF6                 mov     eax, ebx
.text:00413EF8                 mov     ecx, [esp+4Ch+arg_C]
.text:00413EFC                 sub     eax, edx
.text:00413EFE                 movzx   eax, byte ptr [eax+ecx]
.text:00413F02
.text:00413F02 loc_413F02:                             ; CODE XREF: sub_413CE0+253↓j
.text:00413F02                 mov     ecx, [esp+4Ch+var_14]
.text:00413F06                 test    ecx, ecx
.text:00413F08                 jz      short loc_413F26
.text:00413F0A                 mov     edx, [esp+4Ch+var_14]
.text:00413F0E                 movzx   ecx, al
.text:00413F11                 movzx   eax, byte ptr [ecx+edx]
.text:00413F15
.text:00413F15 loc_413F15:                             ; CODE XREF: sub_413CE0+249↓j
.text:00413F15                 lea     edx, [eax+ebp]
.text:00413F18                 cmp     byte ptr [edx], 0
.text:00413F1B                 jnz     loc_413E20
.text:00413F21                 jmp     loc_413E80
.text:00413F26 ; ---------------------------------------------------------------------------
.text:00413F26
.text:00413F26 loc_413F26:                             ; CODE XREF: sub_413CE0+228↑j
.text:00413F26                 movzx   eax, al
.text:00413F29                 jmp     short loc_413F15
.text:00413F2B ; ---------------------------------------------------------------------------
.text:00413F2B
.text:00413F2B loc_413F2B:                             ; CODE XREF: sub_413CE0+210↑j
.text:00413F2B                 mov     edx, [esp+4Ch+arg_4]
.text:00413F2F                 movzx   eax, byte ptr [ebx+edx]
.text:00413F33                 jmp     short loc_413F02
.text:00413F35 ; ---------------------------------------------------------------------------
.text:00413F35
.text:00413F35 loc_413F35:                             ; CODE XREF: sub_413CE0+8C↑j
.text:00413F35                 mov     [esp+4Ch+var_4C], edi
.text:00413F38                 call    sub_410390
.text:00413F3D                 cmp     eax, 0FFFFFFFEh
.text:00413F40                 mov     edx, 0FFFFFFFEh
.text:00413F45                 jnz     loc_413D72
.text:00413F4B                 jmp     loc_413E6C
.text:00413F50 ; ---------------------------------------------------------------------------
.text:00413F50
.text:00413F50 loc_413F50:                             ; CODE XREF: sub_413CE0+6C↑j
.text:00413F50                 test    byte ptr [edi+1Ch], 80h
.text:00413F54                 jnz     loc_413D60
.text:00413F5A
.text:00413F5A loc_413F5A:                             ; CODE XREF: sub_413CE0+64↑j
.text:00413F5A                 test    ebx, ebx
.text:00413F5C                 mov     edx, 0FFFFFFFFh
.text:00413F61                 jg      loc_413E6C
.text:00413F67                 mov     esi, 1
.text:00413F6C                 jmp     loc_413D60
.text:00413F71 ; ---------------------------------------------------------------------------
.text:00413F71
.text:00413F71 loc_413F71:                             ; CODE XREF: sub_413CE0+40↑j
.text:00413F71                 mov     esi, ebx
.text:00413F73                 neg     esi
.text:00413F75                 jmp     loc_413D32
.text:00413F75 sub_413CE0      endp
.text:00413F75
.text:00413F75 ; ---------------------------------------------------------------------------
.text:00413F7A                 align 10h
.text:00413F80
.text:00413F80 ; =============== S U B R O U T I N E =======================================
.text:00413F80
.text:00413F80
.text:00413F80 sub_413F80      proc near               ; CODE XREF: sub_410390↑j
.text:00413F80
.text:00413F80 Size            = dword ptr -6Ch
.text:00413F80 Val             = dword ptr -68h
.text:00413F80 var_64          = dword ptr -64h
.text:00413F80 var_4D          = byte ptr -4Dh
.text:00413F80 var_4C          = byte ptr -4Ch
.text:00413F80 var_30          = dword ptr -30h
.text:00413F80 Src             = dword ptr -2Ch
.text:00413F80 var_28          = dword ptr -28h
.text:00413F80 var_24          = dword ptr -24h
.text:00413F80 arg_0           = dword ptr  4
.text:00413F80
.text:00413F80                 push    ebp
.text:00413F81                 push    edi
.text:00413F82                 push    esi
.text:00413F83                 push    ebx
.text:00413F84                 sub     esp, 5Ch
.text:00413F87                 mov     ebp, [esp+6Ch+arg_0]
.text:00413F8B                 mov     [esp+6Ch+var_4C], 1
.text:00413F90                 mov     [esp+6Ch+var_4D], 0
.text:00413F95                 mov     ecx, [ebp+0]
.text:00413F98                 mov     eax, [ebp+8]
.text:00413F9B                 mov     esi, [ebp+10h]
.text:00413F9E                 mov     edi, ecx
.text:00413FA0                 add     eax, ecx
.text:00413FA2                 mov     [esp+6Ch+var_30], eax
.text:00413FA6                 mov     [esp+6Ch+Size], 14h ; Size
.text:00413FAD                 call    malloc
.text:00413FB2                 mov     [esp+6Ch+Src], eax
.text:00413FB6                 test    eax, eax
.text:00413FB8                 mov     edx, 0FFFFFFFEh
.text:00413FBD                 jz      loc_4140A2
.text:00413FC3                 mov     [esp+6Ch+var_28], 5
.text:00413FCB                 mov     [esp+6Ch+var_24], 0
.text:00413FD3                 mov     [esp+6Ch+var_64], 100h ; Size
.text:00413FDB                 mov     [esp+6Ch+Val], 0 ; Val
.text:00413FE3                 mov     [esp+6Ch+Size], esi ; void *
.text:00413FE6                 call    memset
.text:00413FEB                 movzx   edx, byte ptr [ebp+1Ch]
.text:00413FEF                 or      dl, 8
.text:00413FF2                 and     dl, 0FEh
.text:00413FF5                 mov     [ebp+1Ch], dl
.text:00413FF8
.text:00413FF8 loc_413FF8:                             ; CODE XREF: sub_413F80+9A↓j
.text:00413FF8                                         ; sub_413F80+13D↓j ...
.text:00413FF8                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0041401A cases 0,9-12,20,26-29
.text:00413FFC                 jz      loc_414300
.text:00414002                 movzx   eax, byte ptr [edi]
.text:00414005                 cmp     al, 1
.text:00414007                 jz      loc_414300
.text:0041400D                 movzx   eax, al
.text:00414010                 inc     edi
.text:00414011                 cmp     eax, 1Dh        ; switch 30 cases
.text:00414014                 ja      def_41401A      ; jumptable 0041401A default case, case 1
.text:0041401A                 jmp     ds:jpt_41401A[eax*4] ; switch jump
.text:0041401A ; ---------------------------------------------------------------------------
.text:00414021                 align 4
.text:00414024 jpt_41401A      dd offset loc_413FF8    ; DATA XREF: sub_413F80+9A↑r
.text:00414024                 dd offset def_41401A    ; jump table for switch statement
.text:00414024                 dd offset loc_4140AC
.text:00414024                 dd offset loc_4140C2
.text:00414024                 dd offset loc_4140F0
.text:00414024                 dd offset loc_414128
.text:00414024                 dd offset loc_41418C
.text:00414024                 dd offset loc_41418C
.text:00414024                 dd offset loc_41409C
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_414194
.text:00414024                 dd offset loc_414194
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_41422E
.text:00414024                 dd offset loc_414255
.text:00414024                 dd offset loc_4142B3
.text:00414024                 dd offset loc_4142BB
.text:00414024                 dd offset loc_4142DD
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:00414024                 dd offset loc_413FF8
.text:0041409C ; ---------------------------------------------------------------------------
.text:0041409C
.text:0041409C loc_41409C:                             ; CODE XREF: sub_413F80+9A↑j
.text:0041409C                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:0041409C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0041401A case 8
.text:004140A0
.text:004140A0 loc_4140A0:                             ; CODE XREF: sub_413F80+16E↓j
.text:004140A0                                         ; sub_413F80+3C8↓j
.text:004140A0                 xor     edx, edx
.text:004140A2
.text:004140A2 loc_4140A2:                             ; CODE XREF: sub_413F80+3D↑j
.text:004140A2                                         ; sub_413F80+2A3↓j
.text:004140A2                 add     esp, 5Ch
.text:004140A5                 mov     eax, edx
.text:004140A7                 pop     ebx
.text:004140A8                 pop     esi
.text:004140A9                 pop     edi
.text:004140AA                 pop     ebp
.text:004140AB                 retn
.text:004140AC ; ---------------------------------------------------------------------------
.text:004140AC
.text:004140AC loc_4140AC:                             ; CODE XREF: sub_413F80+9A↑j
.text:004140AC                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004140AC                 movzx   ecx, byte ptr [edi+1] ; jumptable 0041401A case 2
.text:004140B0                 mov     byte ptr [ecx+esi], 1
.text:004140B4
.text:004140B4 loc_4140B4:                             ; CODE XREF: sub_413F80+166↓j
.text:004140B4                                         ; sub_413F80+16C↓j ...
.text:004140B4                 mov     [esp+6Ch+var_4C], 0
.text:004140B9                 mov     edi, [esp+6Ch+var_30]
.text:004140BD                 jmp     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:004140C2 ; ---------------------------------------------------------------------------
.text:004140C2
.text:004140C2 loc_4140C2:                             ; CODE XREF: sub_413F80+9A↑j
.text:004140C2                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004140C2                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0041401A case 3
.text:004140C6                 xor     ebx, ebx
.text:004140C8                 nop
.text:004140C9                 lea     esi, [esi+0]
.text:004140D0
.text:004140D0 loc_4140D0:                             ; CODE XREF: sub_413F80+15B↓j
.text:004140D0                 mov     byte ptr [ebx+esi], 1
.text:004140D4                 inc     ebx
.text:004140D5                 cmp     ebx, 0FFh
.text:004140DB                 jle     short loc_4140D0
.text:004140DD                 test    byte ptr [ebp+0Ch], 40h
.text:004140E1                 jnz     short loc_4140E8
.text:004140E3                 mov     [esi+0Ah], al
.text:004140E6                 jmp     short loc_4140B4
.text:004140E8 ; ---------------------------------------------------------------------------
.text:004140E8
.text:004140E8 loc_4140E8:                             ; CODE XREF: sub_413F80+161↑j
.text:004140E8                 test    byte ptr [ebp+1Ch], 1
.text:004140EC                 jz      short loc_4140B4
.text:004140EE                 jmp     short loc_4140A0
.text:004140F0 ; ---------------------------------------------------------------------------
.text:004140F0
.text:004140F0 loc_4140F0:                             ; CODE XREF: sub_413F80+9A↑j
.text:004140F0                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004140F0                 movzx   edx, byte ptr [edi] ; jumptable 0041401A case 4
.text:004140F3                 inc     edi
.text:004140F4                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:004140FB                 test    ebx, ebx
.text:004140FD                 js      short loc_4140B4
.text:004140FF
.text:004140FF loc_4140FF:                             ; CODE XREF: sub_413F80+19F↓j
.text:004140FF                 test    ebx, ebx
.text:00414101                 mov     eax, ebx
.text:00414103                 js      short loc_414123
.text:00414105
.text:00414105 loc_414105:                             ; CODE XREF: sub_413F80+1A6↓j
.text:00414105                 sar     eax, 3
.text:00414108                 mov     ecx, ebx
.text:0041410A                 movzx   edx, byte ptr [eax+edi]
.text:0041410E                 shl     eax, 3
.text:00414111                 sub     ecx, eax
.text:00414113                 sar     edx, cl
.text:00414115                 test    dl, 1
.text:00414118                 jz      short loc_41411E
.text:0041411A                 mov     byte ptr [ebx+esi], 1
.text:0041411E
.text:0041411E loc_41411E:                             ; CODE XREF: sub_413F80+198↑j
.text:0041411E                 dec     ebx
.text:0041411F                 jns     short loc_4140FF
.text:00414121                 jmp     short loc_4140B4
.text:00414123 ; ---------------------------------------------------------------------------
.text:00414123
.text:00414123 loc_414123:                             ; CODE XREF: sub_413F80+183↑j
.text:00414123                 lea     eax, [ebx+7]
.text:00414126                 jmp     short loc_414105
.text:00414128 ; ---------------------------------------------------------------------------
.text:00414128
.text:00414128 loc_414128:                             ; CODE XREF: sub_413F80+9A↑j
.text:00414128                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:00414128                 movzx   edx, byte ptr [edi] ; jumptable 0041401A case 5
.text:0041412B                 movzx   ecx, dl
.text:0041412E                 lea     ebx, ds:0[ecx*8]
.text:00414135                 cmp     ebx, 0FFh
.text:0041413B                 jg      short loc_41414D
.text:0041413D
.text:0041413D loc_41413D:                             ; CODE XREF: sub_413F80+1C8↓j
.text:0041413D                 mov     byte ptr [ebx+esi], 1
.text:00414141                 inc     ebx
.text:00414142                 cmp     ebx, 0FFh
.text:00414148                 jle     short loc_41413D
.text:0041414A                 movzx   edx, byte ptr [edi]
.text:0041414D
.text:0041414D loc_41414D:                             ; CODE XREF: sub_413F80+1BB↑j
.text:0041414D                 movzx   ecx, dl
.text:00414150                 inc     edi
.text:00414151                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:00414158                 test    ebx, ebx
.text:0041415A                 js      loc_4140B4
.text:00414160
.text:00414160 loc_414160:                             ; CODE XREF: sub_413F80+200↓j
.text:00414160                 test    ebx, ebx
.text:00414162                 mov     eax, ebx
.text:00414164                 js      short loc_414187
.text:00414166
.text:00414166 loc_414166:                             ; CODE XREF: sub_413F80+20A↓j
.text:00414166                 sar     eax, 3
.text:00414169                 mov     ecx, ebx
.text:0041416B                 movzx   edx, byte ptr [eax+edi]
.text:0041416F                 shl     eax, 3
.text:00414172                 sub     ecx, eax
.text:00414174                 sar     edx, cl
.text:00414176                 test    dl, 1
.text:00414179                 jnz     short loc_41417F
.text:0041417B                 mov     byte ptr [ebx+esi], 1
.text:0041417F
.text:0041417F loc_41417F:                             ; CODE XREF: sub_413F80+1F9↑j
.text:0041417F                 dec     ebx
.text:00414180                 jns     short loc_414160
.text:00414182                 jmp     loc_4140B4
.text:00414187 ; ---------------------------------------------------------------------------
.text:00414187
.text:00414187 loc_414187:                             ; CODE XREF: sub_413F80+1E4↑j
.text:00414187                 lea     eax, [ebx+7]
.text:0041418A                 jmp     short loc_414166
.text:0041418C ; ---------------------------------------------------------------------------
.text:0041418C
.text:0041418C loc_41418C:                             ; CODE XREF: sub_413F80+9A↑j
.text:0041418C                                         ; sub_413F80+251↓j
.text:0041418C                                         ; DATA XREF: ...
.text:0041418C                 add     edi, 2          ; jumptable 0041401A cases 6,7
.text:0041418F                 jmp     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:00414194 ; ---------------------------------------------------------------------------
.text:00414194
.text:00414194 loc_414194:                             ; CODE XREF: sub_413F80+9A↑j
.text:00414194                                         ; sub_413F80+2D0↓j
.text:00414194                                         ; DATA XREF: ...
.text:00414194                 movsx   ecx, byte ptr [edi+1] ; jumptable 0041401A cases 15,16
.text:00414198                 movzx   edx, byte ptr [edi]
.text:0041419B                 add     edi, 2
.text:0041419E                 shl     ecx, 8
.text:004141A1                 add     edx, ecx
.text:004141A3                 lea     ebx, [edx+edi]
.text:004141A6                 cmp     ebx, [esp+6Ch+var_30]
.text:004141AA                 jnb     short loc_414228
.text:004141AC                 mov     ecx, [esp+6Ch+var_24]
.text:004141B0                 cmp     ecx, [esp+6Ch+var_28]
.text:004141B4                 jz      short loc_4141D3
.text:004141B6
.text:004141B6 loc_4141B6:                             ; CODE XREF: sub_413F80+29C↓j
.text:004141B6                 mov     edx, [esp+6Ch+Src]
.text:004141BA                 mov     [edx+ecx*4], ebx
.text:004141BD                 inc     [esp+6Ch+var_24]
.text:004141C1
.text:004141C1 loc_4141C1:                             ; CODE XREF: sub_413F80+2AC↓j
.text:004141C1                 cmp     [esp+6Ch+var_4D], 0
.text:004141C6                 jz      loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:004141CC                 mov     [esp+6Ch+var_4D], 0
.text:004141D1                 jmp     short loc_41418C ; jumptable 0041401A cases 6,7
.text:004141D3 ; ---------------------------------------------------------------------------
.text:004141D3
.text:004141D3 loc_4141D3:                             ; CODE XREF: sub_413F80+234↑j
.text:004141D3                 mov     eax, dword_41F070
.text:004141D8                 lea     edx, [eax+eax*8]
.text:004141DB                 lea     edx, [eax+edx*2]
.text:004141DE                 cmp     ecx, edx
.text:004141E0                 ja      short loc_41421E
.text:004141E2                 lea     edx, ds:0[ecx*8]
.text:004141E9                 mov     [esp+6Ch+Size], edx ; Size
.text:004141EC                 call    malloc
.text:004141F1                 mov     [esp+6Ch+Size], eax ; void *
.text:004141F4                 mov     ecx, [esp+6Ch+var_28]
.text:004141F8                 shl     ecx, 2
.text:004141FB                 mov     [esp+6Ch+var_64], ecx ; Size
.text:004141FF                 mov     ecx, [esp+6Ch+Src]
.text:00414203                 mov     [esp+6Ch+Val], ecx ; Src
.text:00414207                 call    memcpy
.text:0041420C                 mov     [esp+6Ch+Src], eax
.text:00414210                 test    eax, eax
.text:00414212                 jz      short loc_41421E
.text:00414214                 shl     [esp+6Ch+var_28], 1
.text:00414218                 mov     ecx, [esp+6Ch+var_24]
.text:0041421C                 jmp     short loc_4141B6
.text:0041421E ; ---------------------------------------------------------------------------
.text:0041421E
.text:0041421E loc_41421E:                             ; CODE XREF: sub_413F80+260↑j
.text:0041421E                                         ; sub_413F80+292↑j
.text:0041421E                 mov     edx, 0FFFFFFFEh
.text:00414223                 jmp     loc_4140A2
.text:00414228 ; ---------------------------------------------------------------------------
.text:00414228
.text:00414228 loc_414228:                             ; CODE XREF: sub_413F80+22A↑j
.text:00414228                 or      byte ptr [ebp+1Ch], 1
.text:0041422C                 jmp     short loc_4141C1
.text:0041422E ; ---------------------------------------------------------------------------
.text:0041422E
.text:0041422E loc_41422E:                             ; CODE XREF: sub_413F80+9A↑j
.text:0041422E                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:0041422E                 add     edi, 2          ; jumptable 0041401A case 21
.text:00414231                 movsx   ecx, byte ptr [edi+1]
.text:00414235                 movzx   ebx, byte ptr [edi]
.text:00414238                 add     edi, 2
.text:0041423B                 shl     ecx, 8
.text:0041423E                 add     ebx, ecx
.text:00414240                 test    ebx, ebx
.text:00414242                 jnz     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:00414248                 mov     [esp+6Ch+var_4D], 1
.text:0041424D                 sub     edi, 4
.text:00414250                 jmp     loc_414194      ; jumptable 0041401A cases 15,16
.text:00414255 ; ---------------------------------------------------------------------------
.text:00414255
.text:00414255 loc_414255:                             ; CODE XREF: sub_413F80+9A↑j
.text:00414255                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:00414255                 movsx   ebx, byte ptr [edi+1] ; jumptable 0041401A cases 13,14,17-19,22
.text:00414259                 movzx   ecx, byte ptr [edi]
.text:0041425C                 shl     ebx, 8
.text:0041425F                 add     ecx, ebx
.text:00414261                 test    ecx, ecx
.text:00414263                 lea     edi, [ecx+edi+2]
.text:00414267                 jg      loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:0041426D                 movzx   eax, byte ptr [edi]
.text:00414270                 cmp     al, 0Fh
.text:00414272                 jz      short loc_41427C
.text:00414274                 cmp     al, 15h
.text:00414276                 jnz     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:0041427C
.text:0041427C loc_41427C:                             ; CODE XREF: sub_413F80+2F2↑j
.text:0041427C                 inc     edi
.text:0041427D                 movsx   ecx, byte ptr [edi+1]
.text:00414281                 movzx   edx, byte ptr [edi]
.text:00414284                 shl     ecx, 8
.text:00414287                 add     edx, ecx
.text:00414289                 lea     edi, [edx+edi+2]
.text:0041428D                 mov     edx, [esp+6Ch+var_24]
.text:00414291                 test    edx, edx
.text:00414293                 jz      loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:00414299                 mov     ebx, [esp+6Ch+Src]
.text:0041429D                 cmp     [ebx+edx*4-4], edi
.text:004142A1                 jnz     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:004142A7                 lea     eax, [edx-1]
.text:004142AA                 mov     [esp+6Ch+var_24], eax
.text:004142AE                 jmp     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:004142B3 ; ---------------------------------------------------------------------------
.text:004142B3
.text:004142B3 loc_4142B3:                             ; CODE XREF: sub_413F80+9A↑j
.text:004142B3                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004142B3                 add     edi, 4          ; jumptable 0041401A case 23
.text:004142B6                 jmp     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:004142BB ; ---------------------------------------------------------------------------
.text:004142BB
.text:004142BB loc_4142BB:                             ; CODE XREF: sub_413F80+9A↑j
.text:004142BB                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004142BB                 xor     ebx, ebx        ; jumptable 0041401A case 24
.text:004142BD
.text:004142BD loc_4142BD:                             ; CODE XREF: sub_413F80+350↓j
.text:004142BD                 movzx   edi, bl
.text:004142C0                 cmp     ds:byte_420290[edi], 1
.text:004142C7                 jz      short loc_4142D7
.text:004142C9
.text:004142C9 loc_4142C9:                             ; CODE XREF: sub_413F80+35B↓j
.text:004142C9                 inc     ebx
.text:004142CA                 cmp     ebx, 0FFh
.text:004142D0                 jle     short loc_4142BD
.text:004142D2                 jmp     loc_4140B4
.text:004142D7 ; ---------------------------------------------------------------------------
.text:004142D7
.text:004142D7 loc_4142D7:                             ; CODE XREF: sub_413F80+347↑j
.text:004142D7                 mov     byte ptr [ebx+esi], 1
.text:004142DB                 jmp     short loc_4142C9
.text:004142DD ; ---------------------------------------------------------------------------
.text:004142DD
.text:004142DD loc_4142DD:                             ; CODE XREF: sub_413F80+9A↑j
.text:004142DD                                         ; DATA XREF: sub_413F80:jpt_41401A↑o
.text:004142DD                 xor     ebx, ebx        ; jumptable 0041401A case 25
.text:004142DF
.text:004142DF loc_4142DF:                             ; CODE XREF: sub_413F80+376↓j
.text:004142DF                 movzx   edx, bl
.text:004142E2                 cmp     ds:byte_420290[edx], 1
.text:004142E9                 jz      short loc_4142EF
.text:004142EB                 mov     byte ptr [ebx+esi], 1
.text:004142EF
.text:004142EF loc_4142EF:                             ; CODE XREF: sub_413F80+369↑j
.text:004142EF                 inc     ebx
.text:004142F0                 cmp     ebx, 0FFh
.text:004142F6                 jle     short loc_4142DF
.text:004142F8                 jmp     loc_4140B4
.text:004142F8 ; ---------------------------------------------------------------------------
.text:004142FD                 align 10h
.text:00414300
.text:00414300 loc_414300:                             ; CODE XREF: sub_413F80+7C↑j
.text:00414300                                         ; sub_413F80+87↑j
.text:00414300                 mov     ecx, [esp+6Ch+var_24]
.text:00414304                 test    ecx, ecx
.text:00414306                 jz      short loc_414333
.text:00414308                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0041430C                 dec     ecx
.text:0041430D                 movzx   eax, [esp+6Ch+var_4C]
.text:00414312                 or      eax, ebx
.text:00414314                 and     al, 1
.text:00414316                 and     bl, 0FEh
.text:00414319                 or      bl, al
.text:0041431B                 mov     [ebp+1Ch], bl
.text:0041431E                 mov     ebx, [esp+6Ch+Src]
.text:00414322                 mov     [esp+6Ch+var_4C], 1
.text:00414327                 mov     [esp+6Ch+var_24], ecx
.text:0041432B                 mov     edi, [ebx+ecx*4]
.text:0041432E                 jmp     loc_413FF8      ; jumptable 0041401A cases 0,9-12,20,26-29
.text:00414333 ; ---------------------------------------------------------------------------
.text:00414333
.text:00414333 loc_414333:                             ; CODE XREF: sub_413F80+386↑j
.text:00414333                 movzx   ebx, byte ptr [ebp+1Ch]
.text:00414337                 movzx   eax, [esp+6Ch+var_4C]
.text:0041433C                 or      eax, ebx
.text:0041433E                 and     al, 1
.text:00414340                 and     bl, 0FEh
.text:00414343                 or      bl, al
.text:00414345                 mov     [ebp+1Ch], bl
.text:00414348                 jmp     loc_4140A0
.text:0041434D ; ---------------------------------------------------------------------------
.text:0041434D
.text:0041434D def_41401A:                             ; CODE XREF: sub_413F80+94↑j
.text:0041434D                                         ; sub_413F80+9A↑j
.text:0041434D                                         ; DATA XREF: ...
.text:0041434D                 call    abort           ; jumptable 0041401A default case, case 1
.text:0041434D sub_413F80      endp
.text:0041434D
.text:0041434D ; ---------------------------------------------------------------------------
.text:00414352                 align 10h
.text:00414360                 jmp     ds:libintl_bindtextdomain
.text:00414360 ; ---------------------------------------------------------------------------
.text:00414366                 align 10h
.text:00414370                 jmp     ds:libintl_textdomain
.text:00414370 ; ---------------------------------------------------------------------------
.text:00414376                 align 10h
.text:00414380                 jmp     ds:libintl_gettext
.text:00414380 ; ---------------------------------------------------------------------------
.text:00414386                 align 10h
.text:00414390 ; const char aS_2[]
.text:00414390 aS_2            db ': %s',0             ; DATA XREF: sub_4143B0+B8↓o
.text:00414390                                         ; sub_4144B4+122↓o
.text:00414395 aUnknownSystemE db 'Unknown system error',0
.text:00414395                                         ; DATA XREF: sub_4143B0:loc_41447D↓o
.text:00414395                                         ; sub_4144B4:loc_4145EE↓o
.text:004143AA ; const char aS_3[]
.text:004143AA aS_3            db '%s: ',0             ; DATA XREF: sub_4143B0:loc_414484↓o
.text:004143AF                 align 10h
.text:004143B0
.text:004143B0 ; =============== S U B R O U T I N E =======================================
.text:004143B0
.text:004143B0
.text:004143B0 ; int __cdecl sub_4143B0(int Code, int ErrorMessage, char *, char)
.text:004143B0 sub_4143B0      proc near               ; CODE XREF: sub_4027B0+910↑p
.text:004143B0                                         ; sub_4027B0+9C1↑p ...
.text:004143B0
.text:004143B0 Stream          = dword ptr -1Ch
.text:004143B0 Format          = dword ptr -18h
.text:004143B0 ArgList         = dword ptr -14h
.text:004143B0 Code            = dword ptr  4
.text:004143B0 ErrorMessage    = dword ptr  8
.text:004143B0 arg_8           = dword ptr  0Ch
.text:004143B0 arg_C           = byte ptr  10h
.text:004143B0
.text:004143B0                 push    esi
.text:004143B1                 push    ebx
.text:004143B2                 sub     esp, 14h
.text:004143B5                 mov     edx, ds:_iob
.text:004143BB                 mov     esi, [esp+1Ch+Code]
.text:004143BF                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:004143C3                 add     edx, 20h ; ' '
.text:004143C6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004143C9                 call    fflush
.text:004143CE                 mov     eax, ds:dword_420790
.text:004143D3                 test    eax, eax
.text:004143D5                 jz      loc_414484
.text:004143DB                 call    eax ; dword_420790
.text:004143DD
.text:004143DD loc_4143DD:                             ; CODE XREF: sub_4143B0+F7↓j
.text:004143DD                 lea     edx, [esp+1Ch+arg_C]
.text:004143E1                 mov     ecx, [esp+1Ch+arg_8]
.text:004143E5                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:004143E9                 mov     edx, ds:_iob
.text:004143EF                 mov     [esp+1Ch+Format], ecx ; Format
.text:004143F3                 add     edx, 40h ; '@'
.text:004143F6                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004143F9                 call    vfprintf
.text:004143FE                 inc     ds:dword_4207A0
.text:00414404                 test    ebx, ebx
.text:00414406                 jnz     short loc_414452
.text:00414408
.text:00414408 loc_414408:                             ; CODE XREF: sub_4143B0+CB↓j
.text:00414408                 mov     edx, ds:_iob
.text:0041440E                 lea     ecx, [edx+40h]
.text:00414411                 mov     ebx, [ecx+4]
.text:00414414                 dec     ebx
.text:00414415                 test    ebx, ebx
.text:00414417                 mov     [ecx+4], ebx
.text:0041441A                 js      short loc_414440
.text:0041441C                 mov     ecx, [edx+40h]
.text:0041441F                 mov     byte ptr [ecx], 0Ah
.text:00414422                 inc     dword ptr [edx+40h]
.text:00414425
.text:00414425 loc_414425:                             ; CODE XREF: sub_4143B0+A0↓j
.text:00414425                 mov     edx, ds:_iob
.text:0041442B                 add     edx, 40h ; '@'
.text:0041442E                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00414431                 call    fflush
.text:00414436                 test    esi, esi
.text:00414438                 jnz     short loc_4144AC
.text:0041443A                 add     esp, 14h
.text:0041443D                 pop     ebx
.text:0041443E                 pop     esi
.text:0041443F                 retn
.text:00414440 ; ---------------------------------------------------------------------------
.text:00414440
.text:00414440 loc_414440:                             ; CODE XREF: sub_4143B0+6A↑j
.text:00414440                 mov     [esp+1Ch+Format], ecx ; File
.text:00414444                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0041444B                 call    _flsbuf
.text:00414450                 jmp     short loc_414425
.text:00414452 ; ---------------------------------------------------------------------------
.text:00414452
.text:00414452 loc_414452:                             ; CODE XREF: sub_4143B0+56↑j
.text:00414452                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:00414455                 call    strerror
.text:0041445A                 test    eax, eax
.text:0041445C                 jz      short loc_41447D
.text:0041445E
.text:0041445E loc_41445E:                             ; CODE XREF: sub_4143B0+D2↓j
.text:0041445E                 mov     [esp+1Ch+ArgList], eax
.text:00414462                 mov     ebx, ds:_iob
.text:00414468                 mov     [esp+1Ch+Format], offset aS_2 ; ": %s"
.text:00414470                 add     ebx, 40h ; '@'
.text:00414473                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00414476                 call    fprintf
.text:0041447B                 jmp     short loc_414408
.text:0041447D ; ---------------------------------------------------------------------------
.text:0041447D
.text:0041447D loc_41447D:                             ; CODE XREF: sub_4143B0+AC↑j
.text:0041447D                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00414482                 jmp     short loc_41445E
.text:00414484 ; ---------------------------------------------------------------------------
.text:00414484
.text:00414484 loc_414484:                             ; CODE XREF: sub_4143B0+25↑j
.text:00414484                 mov     [esp+1Ch+Format], offset aS_3 ; "%s: "
.text:0041448C                 mov     edx, ds:_iob
.text:00414492                 mov     ecx, ds:dword_420750
.text:00414498                 add     edx, 40h ; '@'
.text:0041449B                 mov     [esp+1Ch+ArgList], ecx
.text:0041449F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004144A2                 call    fprintf
.text:004144A7                 jmp     loc_4143DD
.text:004144AC ; ---------------------------------------------------------------------------
.text:004144AC
.text:004144AC loc_4144AC:                             ; CODE XREF: sub_4143B0+88↑j
.text:004144AC                 mov     [esp+1Ch+Stream], esi ; Code
.text:004144AF                 call    exit
.text:004144AF sub_4143B0      endp
.text:004144AF
.text:004144B4
.text:004144B4 ; =============== S U B R O U T I N E =======================================
.text:004144B4
.text:004144B4
.text:004144B4 ; int __cdecl sub_4144B4(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:004144B4 sub_4144B4      proc near               ; DATA XREF: sub_4144B4+77↓o
.text:004144B4
.text:004144B4 Stream          = dword ptr -28h
.text:004144B4 Format          = dword ptr -24h
.text:004144B4 ArgList         = dword ptr -20h
.text:004144B4 var_1C          = dword ptr -1Ch
.text:004144B4 Code            = dword ptr  8
.text:004144B4 ErrorMessage    = dword ptr  0Ch
.text:004144B4 Str2            = dword ptr  10h
.text:004144B4 arg_10          = dword ptr  14h
.text:004144B4 arg_14          = dword ptr  18h
.text:004144B4 arg_18          = byte ptr  1Ch
.text:004144B4
.text:004144B4                 and     eax, 64253A73h
.text:004144B9                 cmp     ah, [eax]
.text:004144BB
.text:004144BB loc_4144BB:                             ; DATA XREF: sub_4144B4:loc_4145F5↓o
.text:004144BB                 add     ds:55003A73h, ah
.text:004144C1                 push    edi
.text:004144C2                 push    esi
.text:004144C3                 push    ebx
.text:004144C4                 sub     esp, 1Ch
.text:004144C7                 mov     edx, ds:dword_4207D0
.text:004144CD                 mov     ebp, [esp+28h+Code]
.text:004144D1                 mov     edi, [esp+28h+ErrorMessage]
.text:004144D5                 test    edx, edx
.text:004144D7                 mov     ebx, [esp+28h+Str2]
.text:004144DB                 mov     esi, [esp+28h+arg_10]
.text:004144DF                 jz      short loc_4144F9
.text:004144E1                 cmp     ds:dword_4203B0, esi
.text:004144E7                 jz      loc_414620
.text:004144ED
.text:004144ED loc_4144ED:                             ; CODE XREF: sub_4144B4+18D↓j
.text:004144ED                 mov     ds:Str1, ebx
.text:004144F3                 mov     ds:dword_4203B0, esi
.text:004144F9
.text:004144F9 loc_4144F9:                             ; CODE XREF: sub_4144B4+2B↑j
.text:004144F9                 mov     edx, ds:_iob
.text:004144FF                 add     edx, 20h ; ' '
.text:00414502                 mov     [esp+28h+Stream], edx ; Stream
.text:00414505                 call    fflush
.text:0041450A                 mov     eax, ds:dword_420790
.text:0041450F                 test    eax, eax
.text:00414511                 jz      loc_4145F5
.text:00414517                 call    eax ; dword_420790
.text:00414519
.text:00414519 loc_414519:                             ; CODE XREF: sub_4144B4+164↓j
.text:00414519                 test    ebx, ebx
.text:0041451B                 jz      short loc_41453E
.text:0041451D                 mov     [esp+28h+ArgList], ebx
.text:00414521                 mov     ebx, ds:_iob
.text:00414527                 mov     [esp+28h+var_1C], esi
.text:0041452B                 mov     [esp+28h+Format], offset sub_4144B4 ; Format
.text:00414533                 add     ebx, 40h ; '@'
.text:00414536                 mov     [esp+28h+Stream], ebx ; Stream
.text:00414539                 call    fprintf
.text:0041453E
.text:0041453E loc_41453E:                             ; CODE XREF: sub_4144B4+67↑j
.text:0041453E                 mov     esi, ds:_iob
.text:00414544                 lea     edx, [esp+28h+arg_18]
.text:00414548                 mov     ecx, [esp+28h+arg_14]
.text:0041454C                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00414550                 add     esi, 40h ; '@'
.text:00414553                 mov     [esp+28h+Format], ecx ; Format
.text:00414557                 mov     [esp+28h+Stream], esi ; Stream
.text:0041455A                 call    vfprintf
.text:0041455F                 inc     ds:dword_4207A0
.text:00414565                 test    edi, edi
.text:00414567                 jnz     short loc_4145C0
.text:00414569
.text:00414569 loc_414569:                             ; CODE XREF: sub_4144B4+135↓j
.text:00414569                 mov     edx, ds:_iob
.text:0041456F                 lea     ecx, [edx+40h]
.text:00414572                 mov     ebx, [ecx+4]
.text:00414575                 dec     ebx
.text:00414576                 test    ebx, ebx
.text:00414578                 mov     [ecx+4], ebx
.text:0041457B                 js      short loc_4145A7
.text:0041457D                 mov     esi, [edx+40h]
.text:00414580                 mov     byte ptr [esi], 0Ah
.text:00414583                 inc     dword ptr [edx+40h]
.text:00414586
.text:00414586 loc_414586:                             ; CODE XREF: sub_4144B4+103↓j
.text:00414586                 mov     ecx, ds:_iob
.text:0041458C                 add     ecx, 40h ; '@'
.text:0041458F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00414592                 call    fflush
.text:00414597                 test    ebp, ebp
.text:00414599                 jnz     loc_414646
.text:0041459F
.text:0041459F loc_41459F:                             ; CODE XREF: sub_4144B4+173↓j
.text:0041459F                                         ; sub_4144B4+187↓j
.text:0041459F                 add     esp, 1Ch
.text:004145A2                 pop     ebx
.text:004145A3                 pop     esi
.text:004145A4                 pop     edi
.text:004145A5                 pop     ebp
.text:004145A6                 retn
.text:004145A7 ; ---------------------------------------------------------------------------
.text:004145A7
.text:004145A7 loc_4145A7:                             ; CODE XREF: sub_4144B4+C7↑j
.text:004145A7                 mov     [esp+28h+Format], ecx ; File
.text:004145AB                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:004145B2                 call    _flsbuf
.text:004145B7                 jmp     short loc_414586
.text:004145B7 ; ---------------------------------------------------------------------------
.text:004145B9                 align 10h
.text:004145C0
.text:004145C0 loc_4145C0:                             ; CODE XREF: sub_4144B4+B3↑j
.text:004145C0                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:004145C3                 call    strerror
.text:004145C8                 test    eax, eax
.text:004145CA                 jz      short loc_4145EE
.text:004145CC
.text:004145CC loc_4145CC:                             ; CODE XREF: sub_4144B4+13F↓j
.text:004145CC                 mov     [esp+28h+ArgList], eax
.text:004145D0                 mov     edi, ds:_iob
.text:004145D6                 mov     [esp+28h+Format], offset aS_2 ; ": %s"
.text:004145DE                 add     edi, 40h ; '@'
.text:004145E1                 mov     [esp+28h+Stream], edi ; Stream
.text:004145E4                 call    fprintf
.text:004145E9                 jmp     loc_414569
.text:004145EE ; ---------------------------------------------------------------------------
.text:004145EE
.text:004145EE loc_4145EE:                             ; CODE XREF: sub_4144B4+116↑j
.text:004145EE                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:004145F3                 jmp     short loc_4145CC
.text:004145F5 ; ---------------------------------------------------------------------------
.text:004145F5
.text:004145F5 loc_4145F5:                             ; CODE XREF: sub_4144B4+5D↑j
.text:004145F5                 mov     [esp+28h+Format], (offset loc_4144BB+1) ; Format
.text:004145FD                 mov     ecx, ds:_iob
.text:00414603                 mov     edx, ds:dword_420750
.text:00414609                 add     ecx, 40h ; '@'
.text:0041460C                 mov     [esp+28h+ArgList], edx
.text:00414610                 mov     [esp+28h+Stream], ecx ; Stream
.text:00414613                 call    fprintf
.text:00414618                 jmp     loc_414519
.text:00414618 ; ---------------------------------------------------------------------------
.text:0041461D                 align 10h
.text:00414620
.text:00414620 loc_414620:                             ; CODE XREF: sub_4144B4+33↑j
.text:00414620                 mov     eax, ds:Str1
.text:00414625                 cmp     ebx, eax
.text:00414627                 jz      loc_41459F
.text:0041462D                 mov     [esp+28h+Format], ebx ; Str2
.text:00414631                 mov     [esp+28h+Stream], eax ; Str1
.text:00414634                 call    strcmp
.text:00414639                 test    eax, eax
.text:0041463B                 jz      loc_41459F
.text:00414641                 jmp     loc_4144ED
.text:00414646 ; ---------------------------------------------------------------------------
.text:00414646
.text:00414646 loc_414646:                             ; CODE XREF: sub_4144B4+E5↑j
.text:00414646                 mov     [esp+28h+Stream], ebp ; Code
.text:00414649                 call    exit
.text:00414649 sub_4144B4      endp ; sp-analysis failed
.text:00414649
.text:00414649 ; ---------------------------------------------------------------------------
.text:0041464E                 align 10h
.text:00414650
.text:00414650 ; =============== S U B R O U T I N E =======================================
.text:00414650
.text:00414650
.text:00414650 ; int __cdecl sub_414650(LPCSTR, int)
.text:00414650 sub_414650      proc near               ; CODE XREF: sub_404B50+1787↑p
.text:00414650                                         ; sub_404B50+17A2↑p ...
.text:00414650
.text:00414650 lpFileName      = dword ptr -7Ch
.text:00414650 var_78          = dword ptr -78h
.text:00414650 var_74          = dword ptr -74h
.text:00414650 var_6C          = dword ptr -6Ch
.text:00414650 var_50          = dword ptr -50h
.text:00414650 var_4C          = dword ptr -4Ch
.text:00414650 var_4           = dword ptr -4
.text:00414650 arg_0           = dword ptr  4
.text:00414650 arg_4           = dword ptr  8
.text:00414650
.text:00414650                 sub     esp, 7Ch
.text:00414653                 mov     ecx, ds:dword_420670
.text:00414659                 mov     [esp+7Ch+var_4], ebx
.text:0041465D                 mov     edx, [esp+7Ch+arg_0]
.text:00414664                 mov     ebx, [esp+7Ch+arg_4]
.text:0041466B                 test    ecx, ecx
.text:0041466D                 jnz     short loc_414687
.text:0041466F                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:00414672                 mov     [esp+7Ch+var_78], ebx ; int
.text:00414676                 call    sub_418EF0
.text:0041467B                 mov     edx, eax
.text:0041467D
.text:0041467D loc_41467D:                             ; CODE XREF: sub_414650+56↓j
.text:0041467D                                         ; sub_414650+82↓j ...
.text:0041467D                 mov     ebx, [esp+7Ch+var_4]
.text:00414681                 mov     eax, edx
.text:00414683                 add     esp, 7Ch
.text:00414686                 retn
.text:00414687 ; ---------------------------------------------------------------------------
.text:00414687
.text:00414687 loc_414687:                             ; CODE XREF: sub_414650+1D↑j
.text:00414687                 mov     [esp+7Ch+var_78], edx ; char *
.text:0041468B                 lea     ecx, [esp+7Ch+var_6C]
.text:0041468F                 mov     [esp+7Ch+var_74], ecx ; int
.text:00414693                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:0041469A                 call    sub_4188B0
.text:0041469F                 test    eax, eax
.text:004146A1                 mov     edx, 0FFFFFFFFh
.text:004146A6                 jnz     short loc_41467D
.text:004146A8                 and     ebx, 7
.text:004146AB                 jz      short loc_4146D0
.text:004146AD                 mov     edx, ds:dword_4203E0
.text:004146B3                 test    edx, edx
.text:004146B5                 jz      loc_414739
.text:004146BB
.text:004146BB loc_4146BB:                             ; CODE XREF: sub_414650+108↓j
.text:004146BB                 mov     eax, ds:dword_4203C0
.text:004146C0                 test    eax, eax
.text:004146C2                 jnz     short loc_4146D4
.text:004146C4                 test    bl, 1
.text:004146C7                 jz      short loc_4146D0
.text:004146C9                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:004146CE                 jz      short loc_4146D4
.text:004146D0
.text:004146D0 loc_4146D0:                             ; CODE XREF: sub_414650+5B↑j
.text:004146D0                                         ; sub_414650+77↑j
.text:004146D0                 xor     edx, edx
.text:004146D2                 jmp     short loc_41467D
.text:004146D4 ; ---------------------------------------------------------------------------
.text:004146D4
.text:004146D4 loc_4146D4:                             ; CODE XREF: sub_414650+72↑j
.text:004146D4                                         ; sub_414650+7E↑j
.text:004146D4                 cmp     eax, [esp+7Ch+var_50]
.text:004146D8                 jz      short loc_414729
.text:004146DA                 mov     eax, [esp+7Ch+var_4C]
.text:004146DE                 cmp     ds:dword_4203D0, eax
.text:004146E4                 jz      short loc_4146F2
.text:004146E6                 mov     [esp+7Ch+lpFileName], eax
.text:004146E9                 call    sub_418E80
.text:004146EE                 test    eax, eax
.text:004146F0                 jz      short loc_414721
.text:004146F2
.text:004146F2 loc_4146F2:                             ; CODE XREF: sub_414650+94↑j
.text:004146F2                 mov     ecx, [esp+7Ch+var_6C]
.text:004146F6                 lea     eax, ds:0[ebx*8]
.text:004146FD                 and     eax, ecx
.text:004146FF                 shr     eax, 3
.text:00414702
.text:00414702 loc_414702:                             ; CODE XREF: sub_414650+D7↓j
.text:00414702                                         ; sub_414650+E7↓j
.text:00414702                 xor     edx, edx
.text:00414704                 cmp     eax, ebx
.text:00414706                 jz      loc_41467D
.text:0041470C                 call    _errno
.text:00414711                 mov     dword ptr [eax], 0Dh
.text:00414717                 mov     edx, 0FFFFFFFFh
.text:0041471C                 jmp     loc_41467D
.text:00414721 ; ---------------------------------------------------------------------------
.text:00414721
.text:00414721 loc_414721:                             ; CODE XREF: sub_414650+A0↑j
.text:00414721                 mov     eax, [esp+7Ch+var_6C]
.text:00414725                 and     eax, ebx
.text:00414727                 jmp     short loc_414702
.text:00414729 ; ---------------------------------------------------------------------------
.text:00414729
.text:00414729 loc_414729:                             ; CODE XREF: sub_414650+88↑j
.text:00414729                 mov     edx, [esp+7Ch+var_6C]
.text:0041472D                 mov     eax, ebx
.text:0041472F                 shl     eax, 6
.text:00414732                 and     eax, edx
.text:00414734                 shr     eax, 6
.text:00414737                 jmp     short loc_414702
.text:00414739 ; ---------------------------------------------------------------------------
.text:00414739
.text:00414739 loc_414739:                             ; CODE XREF: sub_414650+65↑j
.text:00414739                 mov     ecx, 1
.text:0041473E                 mov     ds:dword_4203E0, ecx
.text:00414744                 call    sub_418970
.text:00414749                 mov     ds:dword_4203C0, eax
.text:0041474E                 call    sub_418EE0
.text:00414753                 mov     ds:dword_4203D0, eax
.text:00414758                 jmp     loc_4146BB
.text:00414758 sub_414650      endp
.text:00414758
.text:00414758 ; ---------------------------------------------------------------------------
.text:0041475D                 align 10h
.text:00414760
.text:00414760 ; =============== S U B R O U T I N E =======================================
.text:00414760
.text:00414760
.text:00414760 sub_414760      proc near               ; CODE XREF: sub_406B00+19D↑p
.text:00414760                                         ; sub_406B00+44E↑p
.text:00414760
.text:00414760 hNamedPipe      = dword ptr -0Ch
.text:00414760 var_8           = dword ptr -8
.text:00414760 var_4           = dword ptr -4
.text:00414760 arg_0           = dword ptr  4
.text:00414760 arg_4           = dword ptr  8
.text:00414760
.text:00414760                 sub     esp, 0Ch
.text:00414763                 mov     edx, [esp+0Ch+arg_4]
.text:00414767                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:0041476E                 mov     [esp+0Ch+var_4], edx ; int
.text:00414772                 mov     edx, [esp+0Ch+arg_0]
.text:00414776                 mov     [esp+0Ch+var_8], edx ; int
.text:0041477A                 call    sub_4149D0
.text:0041477F                 add     esp, 0Ch
.text:00414782                 retn
.text:00414782 sub_414760      endp
.text:00414782
.text:00414782 ; ---------------------------------------------------------------------------
.text:00414783 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00414783                                         ; DATA XREF: .text:0041486E↓o
.text:00414796 aModeO          db 'mode:      %#o',0Ah,0
.text:00414796                                         ; DATA XREF: .text:00414884↓o
.text:004147A6 aUidLd          db 'uid:       %ld',0Ah,0
.text:004147A6                                         ; DATA XREF: .text:00414897↓o
.text:004147B6 aGidLd          db 'gid:       %ld',0Ah,0
.text:004147B6                                         ; DATA XREF: .text:004148AA↓o
.text:004147C6 aDevLu          db 'dev:       %lu',0Ah,0
.text:004147C6                                         ; DATA XREF: .text:004148BD↓o
.text:004147D6 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:004147D6                                         ; DATA XREF: .text:004148D0↓o
.text:004147E6 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:004147E6                                         ; DATA XREF: .text:004148E6↓o
.text:004147F8 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:004147F8                                         ; DATA XREF: .text:004148FD↓o
.text:00414807 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00414807                                         ; DATA XREF: .text:00414913↓o
.text:00414819 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00414819                                         ; DATA XREF: .text:00414939↓o
.text:0041482C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:0041482C                                         ; DATA XREF: .text:0041495B↓o
.text:0041483F aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:0041483F                                         ; DATA XREF: .text:0041497D↓o
.text:00414853                 align 10h
.text:00414860                 push    ebx
.text:00414861                 sub     esp, 18h
.text:00414864                 mov     ebx, [esp+20h]
.text:00414868                 mov     edx, [ebx+8]
.text:0041486B                 mov     ecx, [ebx+0Ch]
.text:0041486E                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00414875                 mov     [esp+4], edx
.text:00414879                 mov     [esp+8], ecx
.text:0041487D                 call    printf
.text:00414882                 mov     ecx, [ebx]
.text:00414884                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:0041488B                 mov     [esp+4], ecx
.text:0041488F                 call    printf
.text:00414894                 mov     edx, [ebx+1Ch]
.text:00414897                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:0041489E                 mov     [esp+4], edx
.text:004148A2                 call    printf
.text:004148A7                 mov     ecx, [ebx+20h]
.text:004148AA                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:004148B1                 mov     [esp+4], ecx
.text:004148B5                 call    printf
.text:004148BA                 mov     edx, [ebx+10h]
.text:004148BD                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:004148C4                 mov     [esp+4], edx
.text:004148C8                 call    printf
.text:004148CD                 mov     ecx, [ebx+18h]
.text:004148D0                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:004148D7                 mov     [esp+4], ecx
.text:004148DB                 call    printf
.text:004148E0                 mov     edx, [ebx+30h]
.text:004148E3                 mov     ecx, [ebx+34h]
.text:004148E6                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:004148ED                 mov     [esp+4], edx
.text:004148F1                 mov     [esp+8], ecx
.text:004148F5                 call    printf
.text:004148FA                 mov     ecx, [ebx+50h]
.text:004148FD                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00414904                 mov     [esp+4], ecx
.text:00414908                 call    printf
.text:0041490D                 mov     ecx, [ebx+5Ch]
.text:00414910                 mov     edx, [ebx+58h]
.text:00414913                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:0041491A                 mov     [esp+8], ecx
.text:0041491E                 mov     [esp+4], edx
.text:00414922                 call    printf
.text:00414927                 lea     edx, [ebx+38h]
.text:0041492A                 mov     [esp], edx
.text:0041492D                 call    ctime
.text:00414932                 mov     [esp+8], eax
.text:00414936                 mov     ecx, [ebx+38h]
.text:00414939                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00414940                 mov     [esp+4], ecx
.text:00414944                 call    printf
.text:00414949                 lea     edx, [ebx+40h]
.text:0041494C                 mov     [esp], edx
.text:0041494F                 call    ctime
.text:00414954                 mov     [esp+8], eax
.text:00414958                 mov     ecx, [ebx+40h]
.text:0041495B                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00414962                 mov     [esp+4], ecx
.text:00414966                 call    printf
.text:0041496B                 lea     edx, [ebx+48h]
.text:0041496E                 mov     [esp], edx
.text:00414971                 call    ctime
.text:00414976                 mov     [esp+8], eax
.text:0041497A                 mov     edx, [ebx+48h]
.text:0041497D                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00414984                 mov     [esp+4], edx
.text:00414988                 call    printf
.text:0041498D                 add     esp, 18h
.text:00414990                 xor     eax, eax
.text:00414992                 pop     ebx
.text:00414993                 retn
.text:00414993 ; ---------------------------------------------------------------------------
.text:00414994                 align 10h
.text:004149A0 ; const char aFxstat64BadFil[]
.text:004149A0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:004149A0                                         ; DATA XREF: sub_4149D0+7B↓o
.text:004149C4                 align 10h
.text:004149D0
.text:004149D0 ; =============== S U B R O U T I N E =======================================
.text:004149D0
.text:004149D0
.text:004149D0 ; int __cdecl sub_4149D0(HANDLE hNamedPipe, int, int)
.text:004149D0 sub_4149D0      proc near               ; CODE XREF: sub_414760+1A↑p
.text:004149D0                                         ; .text:00417A99↓p
.text:004149D0
.text:004149D0 FileHandle      = dword ptr -1Ch
.text:004149D0 var_18          = dword ptr -18h
.text:004149D0 var_C           = dword ptr -0Ch
.text:004149D0 var_8           = dword ptr -8
.text:004149D0 var_4           = dword ptr -4
.text:004149D0 hNamedPipe      = dword ptr  4
.text:004149D0 arg_4           = dword ptr  8
.text:004149D0 arg_8           = dword ptr  0Ch
.text:004149D0
.text:004149D0                 sub     esp, 1Ch
.text:004149D3                 mov     edx, [esp+1Ch+arg_4]
.text:004149D7                 mov     [esp+1Ch+var_C], ebx
.text:004149DB                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:004149DF                 mov     [esp+1Ch+var_8], esi
.text:004149E3                 mov     esi, [esp+1Ch+arg_8]
.text:004149E7                 test    ebx, ebx
.text:004149E9                 mov     [esp+1Ch+var_4], edi
.text:004149ED                 jnz     short loc_414A27
.text:004149EF                 test    edx, edx
.text:004149F1                 js      short loc_414A47
.text:004149F3                 test    esi, esi
.text:004149F5                 jz      short loc_414A27
.text:004149F7                 cld
.text:004149F8                 mov     eax, ebx
.text:004149FA                 mov     edi, esi
.text:004149FC                 mov     ecx, 18h
.text:00414A01                 rep stosd
.text:00414A03                 mov     [esp+1Ch+arg_4], esi ; int
.text:00414A07                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:00414A0A                 call    _get_osfhandle
.text:00414A0F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00414A13                 mov     ebx, [esp+1Ch+var_C]
.text:00414A17                 mov     esi, [esp+1Ch+var_8]
.text:00414A1B                 mov     edi, [esp+1Ch+var_4]
.text:00414A1F                 add     esp, 1Ch
.text:00414A22                 jmp     sub_414DB0
.text:00414A27 ; ---------------------------------------------------------------------------
.text:00414A27
.text:00414A27 loc_414A27:                             ; CODE XREF: sub_4149D0+1D↑j
.text:00414A27                                         ; sub_4149D0+25↑j
.text:00414A27                 call    _errno
.text:00414A2C                 mov     dword ptr [eax], 16h
.text:00414A32
.text:00414A32 loc_414A32:                             ; CODE XREF: sub_4149D0+92↓j
.text:00414A32                 mov     ebx, [esp+1Ch+var_C]
.text:00414A36                 mov     eax, 0FFFFFFFFh
.text:00414A3B                 mov     esi, [esp+1Ch+var_8]
.text:00414A3F                 mov     edi, [esp+1Ch+var_4]
.text:00414A43                 add     esp, 1Ch
.text:00414A46                 retn
.text:00414A47 ; ---------------------------------------------------------------------------
.text:00414A47
.text:00414A47 loc_414A47:                             ; CODE XREF: sub_4149D0+21↑j
.text:00414A47                 mov     [esp+1Ch+var_18], edx
.text:00414A4B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00414A52                 call    printf
.text:00414A57                 call    _errno
.text:00414A5C                 mov     dword ptr [eax], 9
.text:00414A62                 jmp     short loc_414A32
.text:00414A62 sub_4149D0      endp
.text:00414A62
.text:00414A62 ; ---------------------------------------------------------------------------
.text:00414A64                 align 20h
.text:00414A80 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00414A80                                         ; DATA XREF: .data:off_41F084↓o
.text:00414A94 ; const CHAR ModuleName[]
.text:00414A94 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_414AC0+11↓o
.text:00414A94                                         ; sub_414C30+C↓o ...
.text:00414AA1 ; const CHAR ProcName[]
.text:00414AA1 ProcName        db 'GetFileAttributesExA',0
.text:00414AA1                                         ; DATA XREF: sub_414AC0+28↓o
.text:00414AB6                 align 10h
.text:00414AC0
.text:00414AC0 ; =============== S U B R O U T I N E =======================================
.text:00414AC0
.text:00414AC0
.text:00414AC0 ; int __cdecl sub_414AC0(LPCSTR lpFileName, int)
.text:00414AC0 sub_414AC0      proc near               ; CODE XREF: .text:00415C64↓p
.text:00414AC0                                         ; sub_416060+37↓p
.text:00414AC0
.text:00414AC0 lpModuleName    = dword ptr -18Ch
.text:00414AC0 lpProcName      = dword ptr -188h
.text:00414AC0 var_184         = dword ptr -184h
.text:00414AC0 var_170         = dword ptr -170h
.text:00414AC0 var_164         = dword ptr -164h
.text:00414AC0 hModule         = dword ptr -160h
.text:00414AC0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00414AC0 lpFileName      = dword ptr  4
.text:00414AC0 arg_4           = dword ptr  8
.text:00414AC0
.text:00414AC0                 push    ebp
.text:00414AC1                 push    edi
.text:00414AC2                 push    esi
.text:00414AC3                 push    ebx
.text:00414AC4                 sub     esp, 17Ch
.text:00414ACA                 mov     ebx, [esp+18Ch+arg_4]
.text:00414AD1                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00414AD8                 call    GetModuleHandleA
.text:00414ADD                 sub     esp, 4
.text:00414AE0                 mov     [esp+18Ch+hModule], eax
.text:00414AE4                 mov     edx, [esp+18Ch+hModule]
.text:00414AE8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00414AF0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00414AF3                 call    GetProcAddress
.text:00414AF8                 sub     esp, 8
.text:00414AFB                 mov     ebp, eax
.text:00414AFD                 mov     eax, [esp+18Ch+lpFileName]
.text:00414B04                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00414B07                 call    GetFileAttributesA
.text:00414B0C                 sub     esp, 4
.text:00414B0F                 mov     [esp+18Ch+var_164], eax
.text:00414B13                 xor     eax, eax
.text:00414B15                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00414B1A                 jz      short loc_414B71
.text:00414B1C                 cld
.text:00414B1D                 mov     ecx, 50h ; 'P'
.text:00414B22                 lea     esi, [esp+18Ch+FindFileData]
.text:00414B26                 mov     edi, esi
.text:00414B28                 test    ebp, ebp
.text:00414B2A                 rep stosd
.text:00414B2C                 mov     [esp+18Ch+var_170], 0
.text:00414B34                 jz      short loc_414B55
.text:00414B36                 mov     [esp+18Ch+var_184], ebx
.text:00414B3A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00414B41                 mov     [esp+18Ch+lpProcName], 0
.text:00414B49                 mov     [esp+18Ch+lpModuleName], ecx
.text:00414B4C                 call    ebp
.text:00414B4E                 sub     esp, 0Ch
.text:00414B51                 mov     [esp+18Ch+var_170], eax
.text:00414B55
.text:00414B55 loc_414B55:                             ; CODE XREF: sub_414AC0+74↑j
.text:00414B55                 mov     eax, [esp+18Ch+var_170]
.text:00414B59                 test    eax, eax
.text:00414B5B                 jz      short loc_414B80
.text:00414B5D
.text:00414B5D loc_414B5D:                             ; CODE XREF: sub_414AC0+131↓j
.text:00414B5D                                         ; sub_414AC0+14B↓j
.text:00414B5D                 mov     ebx, [esp+18Ch+hModule]
.text:00414B61                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00414B64                 call    FreeLibrary
.text:00414B69                 sub     esp, 4
.text:00414B6C                 mov     eax, 1
.text:00414B71
.text:00414B71 loc_414B71:                             ; CODE XREF: sub_414AC0+5A↑j
.text:00414B71                 add     esp, 17Ch
.text:00414B77                 pop     ebx
.text:00414B78                 pop     esi
.text:00414B79                 pop     edi
.text:00414B7A                 pop     ebp
.text:00414B7B                 retn
.text:00414B7B ; ---------------------------------------------------------------------------
.text:00414B7C                 align 10h
.text:00414B80
.text:00414B80 loc_414B80:                             ; CODE XREF: sub_414AC0+9B↑j
.text:00414B80                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00414B84                 mov     edx, [esp+18Ch+lpFileName]
.text:00414B8B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00414B8E                 call    FindFirstFileA
.text:00414B93                 sub     esp, 8
.text:00414B96                 xor     ecx, ecx
.text:00414B98                 cmp     eax, 0FFFFFFFFh
.text:00414B9B                 setnz   cl
.text:00414B9E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00414BA2                 mov     [ebx], edi
.text:00414BA4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00414BA8                 mov     [esp+18Ch+var_170], ecx
.text:00414BAC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00414BB0                 mov     [ebx+8], esi
.text:00414BB3                 mov     [ebx+4], ecx
.text:00414BB6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00414BBA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00414BBE                 mov     [ebx+0Ch], ebp
.text:00414BC1                 mov     [ebx+10h], edi
.text:00414BC4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00414BC8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00414BCC                 mov     [ebx+18h], esi
.text:00414BCF                 mov     [ebx+14h], ecx
.text:00414BD2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00414BD6                 mov     [ebx+1Ch], ebp
.text:00414BD9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00414BDD                 mov     [ebx+20h], edi
.text:00414BE0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00414BE3                 call    FindClose
.text:00414BE8                 sub     esp, 4
.text:00414BEB                 mov     esi, [esp+18Ch+var_170]
.text:00414BEF                 test    esi, esi
.text:00414BF1                 jnz     loc_414B5D
.text:00414BF7                 cld
.text:00414BF8                 mov     eax, [esp+18Ch+var_170]
.text:00414BFC                 mov     ecx, 9
.text:00414C01                 mov     edi, ebx
.text:00414C03                 rep stosd
.text:00414C05                 mov     ebp, [esp+18Ch+var_164]
.text:00414C09                 mov     [ebx], ebp
.text:00414C0B                 jmp     loc_414B5D
.text:00414C0B sub_414AC0      endp
.text:00414C0B
.text:00414C0B ; ---------------------------------------------------------------------------
.text:00414C10 ; const CHAR aFindfirstfilee[]
.text:00414C10 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_414C30+23↓o
.text:00414C21 ; const char Source[]
.text:00414C21 Source          db '\*',0               ; DATA XREF: sub_414C30:loc_414CBD↓o
.text:00414C24                 align 10h
.text:00414C30
.text:00414C30 ; =============== S U B R O U T I N E =======================================
.text:00414C30
.text:00414C30
.text:00414C30 ; int __cdecl sub_414C30(char *Str)
.text:00414C30 sub_414C30      proc near               ; CODE XREF: .text:00415D63↓p
.text:00414C30                                         ; sub_416060+3FA↓p ...
.text:00414C30
.text:00414C30 lpLibFileName   = dword ptr -18Ch
.text:00414C30 lpProcName      = dword ptr -188h
.text:00414C30 var_184         = dword ptr -184h
.text:00414C30 var_180         = dword ptr -180h
.text:00414C30 var_17C         = dword ptr -17Ch
.text:00414C30 var_178         = dword ptr -178h
.text:00414C30 var_164         = dword ptr -164h
.text:00414C30 hModule         = dword ptr -160h
.text:00414C30 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00414C30 Str             = dword ptr  4
.text:00414C30
.text:00414C30                 push    ebp
.text:00414C31                 push    edi
.text:00414C32                 xor     edi, edi
.text:00414C34                 push    esi
.text:00414C35                 push    ebx
.text:00414C36                 sub     esp, 17Ch
.text:00414C3C                 mov     [esp+18Ch+lpLibFileName], offset ModuleName ; "KERNEL32.DLL"
.text:00414C43                 call    LoadLibraryA
.text:00414C48                 sub     esp, 4
.text:00414C4B                 mov     [esp+18Ch+hModule], eax
.text:00414C4F                 mov     ecx, [esp+18Ch+hModule]
.text:00414C53                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00414C5B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00414C5E                 call    GetProcAddress
.text:00414C63                 sub     esp, 8
.text:00414C66                 mov     edx, [esp+18Ch+Str]
.text:00414C6D                 mov     [esp+18Ch+var_164], eax
.text:00414C71                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00414C74                 call    strlen
.text:00414C79                 lea     edx, [eax+5]
.text:00414C7C                 mov     ebx, eax
.text:00414C7E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00414C81                 call    malloc
.text:00414C86                 mov     esi, eax
.text:00414C88                 test    esi, esi
.text:00414C8A                 mov     eax, 1
.text:00414C8F                 jz      loc_414D6D
.text:00414C95                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00414C98                 mov     ebp, [esp+18Ch+Str]
.text:00414C9F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00414CA3                 call    strcpy
.text:00414CA8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00414CAD                 cmp     al, 2Fh ; '/'
.text:00414CAF                 jz      loc_414D9B
.text:00414CB5                 cmp     al, 5Ch ; '\'
.text:00414CB7                 jz      loc_414D9B
.text:00414CBD
.text:00414CBD loc_414CBD:                             ; CODE XREF: sub_414C30+170↓j
.text:00414CBD                 mov     [esp+18Ch+lpProcName], offset Source ; "\\*"
.text:00414CC5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00414CC8                 call    strcat
.text:00414CCD                 mov     eax, [esp+18Ch+var_164]
.text:00414CD1                 test    eax, eax
.text:00414CD3                 jz      loc_414D95
.text:00414CD9                 mov     [esp+18Ch+var_178], 0
.text:00414CE1                 lea     ebp, [esp+18Ch+FindFileData]
.text:00414CE5                 mov     [esp+18Ch+var_17C], 0
.text:00414CED                 mov     [esp+18Ch+var_180], 1
.text:00414CF5                 mov     [esp+18Ch+var_184], ebp
.text:00414CF9                 mov     [esp+18Ch+lpProcName], 0
.text:00414D01                 mov     [esp+18Ch+lpLibFileName], esi
.text:00414D04                 call    [esp+18Ch+var_164]
.text:00414D08                 sub     esp, 18h
.text:00414D0B                 mov     ebx, eax
.text:00414D0D                 cmp     eax, 0FFFFFFFFh
.text:00414D10                 jz      short loc_414D78
.text:00414D12                 lea     esi, [esi+0]
.text:00414D19                 lea     edi, [edi+0]
.text:00414D20
.text:00414D20 loc_414D20:                             ; CODE XREF: sub_414C30+109↓j
.text:00414D20                                         ; sub_414C30+161↓j
.text:00414D20                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00414D25                 jz      short loc_414D28
.text:00414D27                 inc     edi
.text:00414D28
.text:00414D28 loc_414D28:                             ; CODE XREF: sub_414C30+F5↑j
.text:00414D28                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00414D2C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00414D2F                 call    FindNextFileA
.text:00414D34                 sub     esp, 8
.text:00414D37                 test    eax, eax
.text:00414D39                 jnz     short loc_414D20
.text:00414D3B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00414D3E                 call    FindClose
.text:00414D43                 sub     esp, 4
.text:00414D46                 mov     esi, [esp+18Ch+hModule]
.text:00414D4A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00414D4D                 call    FreeLibrary
.text:00414D52                 sub     esp, 4
.text:00414D55                 mov     ebx, [esp+18Ch+Str]
.text:00414D5C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00414D5F                 call    sub_417B30
.text:00414D64                 test    eax, eax
.text:00414D66                 jz      short loc_414D6B
.text:00414D68                 add     edi, 2
.text:00414D6B
.text:00414D6B loc_414D6B:                             ; CODE XREF: sub_414C30+136↑j
.text:00414D6B                 mov     eax, edi
.text:00414D6D
.text:00414D6D loc_414D6D:                             ; CODE XREF: sub_414C30+5F↑j
.text:00414D6D                                         ; sub_414C30+163↓j
.text:00414D6D                 add     esp, 17Ch
.text:00414D73                 pop     ebx
.text:00414D74                 pop     esi
.text:00414D75                 pop     edi
.text:00414D76                 pop     ebp
.text:00414D77                 retn
.text:00414D78 ; ---------------------------------------------------------------------------
.text:00414D78
.text:00414D78 loc_414D78:                             ; CODE XREF: sub_414C30+E0↑j
.text:00414D78                                         ; sub_414C30+169↓j
.text:00414D78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00414D7C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00414D7F                 call    FindFirstFileA
.text:00414D84                 mov     ebx, eax
.text:00414D86                 sub     esp, 8
.text:00414D89                 cmp     ebx, 0FFFFFFFFh
.text:00414D8C                 mov     eax, 2
.text:00414D91                 jnz     short loc_414D20
.text:00414D93                 jmp     short loc_414D6D
.text:00414D95 ; ---------------------------------------------------------------------------
.text:00414D95
.text:00414D95 loc_414D95:                             ; CODE XREF: sub_414C30+A3↑j
.text:00414D95                 lea     ebp, [esp+18Ch+FindFileData]
.text:00414D99                 jmp     short loc_414D78
.text:00414D9B ; ---------------------------------------------------------------------------
.text:00414D9B
.text:00414D9B loc_414D9B:                             ; CODE XREF: sub_414C30+7F↑j
.text:00414D9B                                         ; sub_414C30+87↑j
.text:00414D9B                 mov     byte ptr [ebx+esi-1], 0
.text:00414DA0                 jmp     loc_414CBD
.text:00414DA0 sub_414C30      endp
.text:00414DA0
.text:00414DA0 ; ---------------------------------------------------------------------------
.text:00414DA5                 align 10h
.text:00414DB0
.text:00414DB0 ; =============== S U B R O U T I N E =======================================
.text:00414DB0
.text:00414DB0
.text:00414DB0 ; int __cdecl sub_414DB0(HANDLE hNamedPipe, int)
.text:00414DB0 sub_414DB0      proc near               ; CODE XREF: sub_4149D0+52↑j
.text:00414DB0                                         ; sub_4168E0-3B9↓p
.text:00414DB0
.text:00414DB0 hFile           = dword ptr -0ECh
.text:00414DB0 lpFileInformation= dword ptr -0E8h
.text:00414DB0 nBufferSize     = dword ptr -0E4h
.text:00414DB0 lpBytesRead     = dword ptr -0E0h
.text:00414DB0 lpTotalBytesAvail= dword ptr -0DCh
.text:00414DB0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00414DB0 var_C4          = dword ptr -0C4h
.text:00414DB0 var_C0          = dword ptr -0C0h
.text:00414DB0 var_BC          = dword ptr -0BCh
.text:00414DB0 var_B8          = dword ptr -0B8h
.text:00414DB0 var_B4          = dword ptr -0B4h
.text:00414DB0 var_B0          = dword ptr -0B0h
.text:00414DB0 var_AC          = dword ptr -0ACh
.text:00414DB0 var_A8          = dword ptr -0A8h
.text:00414DB0 TotalBytesAvail = dword ptr -0A0h
.text:00414DB0 var_9C          = dword ptr -9Ch
.text:00414DB0 var_98          = dword ptr -98h
.text:00414DB0 var_94          = dword ptr -94h
.text:00414DB0 var_90          = dword ptr -90h
.text:00414DB0 var_8C          = dword ptr -8Ch
.text:00414DB0 var_88          = dword ptr -88h
.text:00414DB0 var_84          = dword ptr -84h
.text:00414DB0 var_80          = dword ptr -80h
.text:00414DB0 var_7C          = dword ptr -7Ch
.text:00414DB0 var_78          = dword ptr -78h
.text:00414DB0 var_74          = dword ptr -74h
.text:00414DB0 var_70          = dword ptr -70h
.text:00414DB0 var_6C          = dword ptr -6Ch
.text:00414DB0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00414DB0 hNamedPipe      = dword ptr  4
.text:00414DB0 arg_4           = dword ptr  8
.text:00414DB0
.text:00414DB0                 push    ebp
.text:00414DB1                 mov     eax, 0FFFFFFFFh
.text:00414DB6                 push    edi
.text:00414DB7                 push    esi
.text:00414DB8                 push    ebx
.text:00414DB9                 sub     esp, 0DCh
.text:00414DBF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00414DC6                 mov     ebp, [esp+0ECh+arg_4]
.text:00414DCD                 cmp     esi, 0FFFFFFFFh
.text:00414DD0                 jz      loc_415151
.text:00414DD6                 cld
.text:00414DD7                 xor     eax, eax
.text:00414DD9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00414DE0                 mov     ecx, 0Dh
.text:00414DE5                 mov     edi, ebx
.text:00414DE7                 rep stosd
.text:00414DE9                 mov     dword ptr [ebp+18h], 1
.text:00414DF0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00414DF3                 call    GetFileType
.text:00414DF8                 sub     esp, 4
.text:00414DFB                 xor     edx, edx
.text:00414DFD                 cmp     eax, 2
.text:00414E00                 jz      loc_415230
.text:00414E06                 cmp     eax, 3
.text:00414E09                 jz      loc_415220
.text:00414E0F
.text:00414E0F loc_414E0F:                             ; CODE XREF: sub_414DB0+475↓j
.text:00414E0F                                         ; sub_414DB0+485↓j
.text:00414E0F                 or      [ebp+0], edx
.text:00414E12                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00414E16                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00414E19                 call    GetFileInformationByHandle
.text:00414E1E                 sub     esp, 8
.text:00414E21                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00414E28                 test    ecx, ecx
.text:00414E2A                 jnz     short loc_414E60
.text:00414E2C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00414E33                 test    edx, edx
.text:00414E35                 jnz     short loc_414E60
.text:00414E37                 mov     edx, [ebp+0]
.text:00414E3A                 and     edx, 0F000h
.text:00414E40                 cmp     edx, 1000h
.text:00414E46                 jz      loc_4151B6
.text:00414E4C
.text:00414E4C loc_414E4C:                             ; CODE XREF: sub_414DB0+459↓j
.text:00414E4C                                         ; sub_414DB0+465↓j
.text:00414E4C                 test    ecx, ecx
.text:00414E4E                 jnz     short loc_414E60
.text:00414E50                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00414E57                 test    edx, edx
.text:00414E59                 jz      loc_415194
.text:00414E5F                 nop
.text:00414E60
.text:00414E60 loc_414E60:                             ; CODE XREF: sub_414DB0+7A↑j
.text:00414E60                                         ; sub_414DB0+85↑j ...
.text:00414E60                 cld
.text:00414E61                 mov     esi, ebx
.text:00414E63                 mov     dword ptr [ebp+14h], 0
.text:00414E6A                 lea     edi, [esp+0ECh+var_9C]
.text:00414E6E                 mov     ecx, 0Dh
.text:00414E73                 rep movsd
.text:00414E75                 xor     ebx, ebx
.text:00414E77                 xor     edi, edi
.text:00414E79                 mov     edx, [esp+0ECh+var_6C]
.text:00414E80                 mov     esi, [esp+0ECh+var_70]
.text:00414E84                 or      edx, ebx
.text:00414E86                 mov     ebx, [esp+0ECh+var_9C]
.text:00414E8A                 mov     [ebp+8], edx
.text:00414E8D                 or      edi, esi
.text:00414E8F                 xor     edx, edx
.text:00414E91                 mov     [ebp+0Ch], edi
.text:00414E94                 test    bl, 10h
.text:00414E97                 mov     esi, [esp+0ECh+var_80]
.text:00414E9B                 setz    dl
.text:00414E9E                 mov     [ebp+10h], esi
.text:00414EA1                 dec     edx
.text:00414EA2                 and     edx, 0FFFFC000h
.text:00414EA8                 add     edx, 8000h
.text:00414EAE                 or      edx, 124h
.text:00414EB4                 test    bl, 1
.text:00414EB7                 movzx   eax, dx
.text:00414EBA                 jnz     short loc_414EC1
.text:00414EBC                 or      eax, 92h
.text:00414EC1
.text:00414EC1 loc_414EC1:                             ; CODE XREF: sub_414DB0+10A↑j
.text:00414EC1                 or      [ebp+0], eax
.text:00414EC4                 xor     edx, edx
.text:00414EC6                 mov     ebx, [esp+0ECh+var_7C]
.text:00414ECA                 mov     ecx, [esp+0ECh+var_78]
.text:00414ECE                 mov     eax, edx
.text:00414ED0                 xor     esi, esi
.text:00414ED2                 mov     edx, [esp+0ECh+var_8C]
.text:00414ED6                 mov     edi, ebx
.text:00414ED8                 or      eax, edi
.text:00414EDA                 mov     [esp+0ECh+var_A8], eax
.text:00414EDE                 mov     ebx, ecx
.text:00414EE0                 mov     edi, [esp+0ECh+var_74]
.text:00414EE4                 or      ebx, esi
.text:00414EE6                 mov     esi, [esp+0ECh+var_A8]
.text:00414EEA                 mov     [esp+0ECh+var_AC], ebx
.text:00414EEE                 xor     ebx, ebx
.text:00414EF0                 mov     ecx, [esp+0ECh+var_AC]
.text:00414EF4                 mov     [ebp+34h], esi
.text:00414EF7                 mov     esi, [esp+0ECh+var_90]
.text:00414EFB                 mov     [ebp+18h], edi
.text:00414EFE                 xor     edi, edi
.text:00414F00                 or      esi, ebx
.text:00414F02                 mov     [ebp+30h], ecx
.text:00414F05                 or      edi, edx
.text:00414F07                 mov     edx, esi
.text:00414F09                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00414F11                 sub     edx, 0D53E8000h
.text:00414F17                 mov     ebx, edi
.text:00414F19                 sbb     ebx, 19DB1DEh
.text:00414F1F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00414F23                 mov     [esp+0ECh+lpBytesRead], 0
.text:00414F2B                 mov     [esp+0ECh+hFile], edx
.text:00414F2E                 call    sub_41D8D0
.text:00414F33                 mov     ecx, eax
.text:00414F35                 shr     eax, 1Fh
.text:00414F38                 dec     eax
.text:00414F39                 and     ecx, eax
.text:00414F3B                 mov     [ebp+38h], ecx
.text:00414F3E                 mov     [esp+0ECh+hFile], esi
.text:00414F41                 mov     [esp+0ECh+lpFileInformation], edi
.text:00414F45                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00414F4D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00414F55                 call    sub_41D750
.text:00414F5A                 lea     ebx, [eax+eax*4]
.text:00414F5D                 xor     ecx, ecx
.text:00414F5F                 lea     esi, [ebx+ebx*4]
.text:00414F62                 shl     esi, 2
.text:00414F65                 mov     edi, esi
.text:00414F67                 shr     edi, 1Fh
.text:00414F6A                 dec     edi
.text:00414F6B                 and     edi, esi
.text:00414F6D                 mov     [ebp+3Ch], edi
.text:00414F70                 mov     esi, [esp+0ECh+var_98]
.text:00414F74                 xor     edi, edi
.text:00414F76                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00414F7E                 mov     edx, [esp+0ECh+var_94]
.text:00414F82                 mov     [esp+0ECh+lpBytesRead], 0
.text:00414F8A                 or      esi, ecx
.text:00414F8C                 or      edi, edx
.text:00414F8E                 mov     edx, esi
.text:00414F90                 mov     ecx, edi
.text:00414F92                 sub     edx, 0D53E8000h
.text:00414F98                 sbb     ecx, 19DB1DEh
.text:00414F9E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:00414FA2                 mov     [esp+0ECh+hFile], edx
.text:00414FA5                 call    sub_41D8D0
.text:00414FAA                 mov     ebx, eax
.text:00414FAC                 shr     eax, 1Fh
.text:00414FAF                 dec     eax
.text:00414FB0                 and     ebx, eax
.text:00414FB2                 mov     [ebp+48h], ebx
.text:00414FB5                 xor     ebx, ebx
.text:00414FB7                 mov     [esp+0ECh+hFile], esi
.text:00414FBA                 mov     [esp+0ECh+lpFileInformation], edi
.text:00414FBE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00414FC6                 mov     [esp+0ECh+lpBytesRead], 0
.text:00414FCE                 call    sub_41D750
.text:00414FD3                 lea     ecx, [eax+eax*4]
.text:00414FD6                 lea     esi, [ecx+ecx*4]
.text:00414FD9                 shl     esi, 2
.text:00414FDC                 mov     edi, esi
.text:00414FDE                 shr     edi, 1Fh
.text:00414FE1                 dec     edi
.text:00414FE2                 and     edi, esi
.text:00414FE4                 mov     [ebp+4Ch], edi
.text:00414FE7                 mov     esi, [esp+0ECh+var_88]
.text:00414FEB                 xor     edi, edi
.text:00414FED                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00414FF5                 mov     edx, [esp+0ECh+var_84]
.text:00414FF9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415001                 or      esi, ebx
.text:00415003                 or      edi, edx
.text:00415005                 mov     edx, esi
.text:00415007                 mov     ebx, edi
.text:00415009                 sub     edx, 0D53E8000h
.text:0041500F                 sbb     ebx, 19DB1DEh
.text:00415015                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00415019                 mov     [esp+0ECh+hFile], edx
.text:0041501C                 call    sub_41D8D0
.text:00415021                 mov     ecx, eax
.text:00415023                 shr     eax, 1Fh
.text:00415026                 dec     eax
.text:00415027                 and     ecx, eax
.text:00415029                 mov     [ebp+40h], ecx
.text:0041502C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00415030                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00415038                 mov     [esp+0ECh+lpBytesRead], 0
.text:00415040                 mov     [esp+0ECh+hFile], esi
.text:00415043                 call    sub_41D750
.text:00415048                 mov     dword ptr [ebp+50h], 200h
.text:0041504F                 lea     ebx, [eax+eax*4]
.text:00415052                 mov     edi, [esp+0ECh+var_A8]
.text:00415056                 lea     edx, [ebx+ebx*4]
.text:00415059                 mov     eax, [esp+0ECh+var_AC]
.text:0041505D                 shl     edx, 2
.text:00415060                 mov     ecx, edx
.text:00415062                 shr     ecx, 1Fh
.text:00415065                 dec     ecx
.text:00415066                 and     ecx, edx
.text:00415068                 test    edi, edi
.text:0041506A                 mov     edx, [esp+0ECh+var_A8]
.text:0041506E                 mov     [ebp+44h], ecx
.text:00415071                 js      loc_415187
.text:00415077
.text:00415077 loc_415077:                             ; CODE XREF: sub_414DB0+3DF↓j
.text:00415077                 mov     edi, [esp+0ECh+var_AC]
.text:0041507B                 xor     esi, esi
.text:0041507D                 mov     ecx, eax
.text:0041507F                 shrd    ecx, edx, 9
.text:00415083                 mov     ebx, edx
.text:00415085                 mov     eax, esi
.text:00415087                 and     edi, 1FFh
.text:0041508D                 sar     ebx, 9
.text:00415090                 or      eax, edi
.text:00415092                 jz      short loc_41509A
.text:00415094                 add     ecx, 1
.text:00415097                 adc     ebx, 0
.text:0041509A
.text:0041509A loc_41509A:                             ; CODE XREF: sub_414DB0+2E2↑j
.text:0041509A                 mov     [ebp+5Ch], ebx
.text:0041509D                 mov     esi, dword_41F080
.text:004150A3                 xor     edi, edi
.text:004150A5                 mov     [ebp+58h], ecx
.text:004150A8                 mov     ebx, dword_41F080
.text:004150AE                 mov     ecx, [esp+0ECh+var_A8]
.text:004150B2                 mov     edx, [esp+0ECh+var_AC]
.text:004150B6                 mov     [ebp+50h], ebx
.text:004150B9                 shr     ebx, 9
.text:004150BC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004150C0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004150C4                 mov     [esp+0ECh+nBufferSize], esi
.text:004150C8                 mov     [esp+0ECh+hFile], edx
.text:004150CB                 call    sub_41D8D0
.text:004150D0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004150D4                 mov     ecx, [esp+0ECh+var_AC]
.text:004150D8                 mov     edi, [esp+0ECh+var_A8]
.text:004150DC                 mov     [esp+0ECh+var_BC], ebx
.text:004150E0                 mov     [esp+0ECh+var_B4], eax
.text:004150E4                 mov     [esp+0ECh+var_B0], edx
.text:004150E8                 mov     [esp+0ECh+var_B8], 0
.text:004150F0                 mov     [esp+0ECh+nBufferSize], esi
.text:004150F4                 mov     [esp+0ECh+hFile], ecx
.text:004150F7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004150FB                 call    sub_41D750
.text:00415100                 mov     ebx, edx
.text:00415102                 or      ebx, eax
.text:00415104                 jz      short loc_415160
.text:00415106                 mov     edi, [esp+0ECh+var_B4]
.text:0041510A                 mov     esi, [esp+0ECh+var_B0]
.text:0041510E                 mov     eax, [esp+0ECh+var_BC]
.text:00415112                 mov     [esp+0ECh+var_C4], edi
.text:00415116                 mov     ecx, [esp+0ECh+var_B8]
.text:0041511A                 add     [esp+0ECh+var_C4], 1
.text:0041511F                 mov     [esp+0ECh+var_C0], esi
.text:00415123                 adc     [esp+0ECh+var_C0], 0
.text:00415128                 mul     [esp+0ECh+var_C4]
.text:0041512C                 mov     edi, [esp+0ECh+var_C0]
.text:00415130                 mov     ebx, edx
.text:00415132                 mov     edx, [esp+0ECh+var_C4]
.text:00415136                 mov     esi, eax
.text:00415138                 mov     eax, ebx
.text:0041513A                 imul    ecx, edx
.text:0041513D                 mov     edx, [esp+0ECh+var_BC]
.text:00415141                 imul    edx, edi
.text:00415144                 add     eax, ecx
.text:00415146                 lea     edi, [edx+eax]
.text:00415149
.text:00415149 loc_415149:                             ; CODE XREF: sub_414DB0+3D5↓j
.text:00415149                 mov     [ebp+58h], esi
.text:0041514C                 xor     eax, eax
.text:0041514E                 mov     [ebp+5Ch], edi
.text:00415151
.text:00415151 loc_415151:                             ; CODE XREF: sub_414DB0+20↑j
.text:00415151                 add     esp, 0DCh
.text:00415157                 pop     ebx
.text:00415158                 pop     esi
.text:00415159                 pop     edi
.text:0041515A                 pop     ebp
.text:0041515B                 retn
.text:0041515B ; ---------------------------------------------------------------------------
.text:0041515C                 align 10h
.text:00415160
.text:00415160 loc_415160:                             ; CODE XREF: sub_414DB0+354↑j
.text:00415160                 mov     eax, [esp+0ECh+var_B4]
.text:00415164                 mov     edi, [esp+0ECh+var_B8]
.text:00415168                 mov     ebx, [esp+0ECh+var_B4]
.text:0041516C                 mul     [esp+0ECh+var_BC]
.text:00415170                 mov     ecx, [esp+0ECh+var_BC]
.text:00415174                 imul    ebx, edi
.text:00415177                 mov     esi, eax
.text:00415179                 mov     eax, [esp+0ECh+var_B0]
.text:0041517D                 add     edx, ebx
.text:0041517F                 imul    ecx, eax
.text:00415182                 lea     edi, [ecx+edx]
.text:00415185                 jmp     short loc_415149
.text:00415187 ; ---------------------------------------------------------------------------
.text:00415187
.text:00415187 loc_415187:                             ; CODE XREF: sub_414DB0+2C1↑j
.text:00415187                 add     eax, 1FFh
.text:0041518C                 adc     edx, 0
.text:0041518F                 jmp     loc_415077
.text:00415194 ; ---------------------------------------------------------------------------
.text:00415194
.text:00415194 loc_415194:                             ; CODE XREF: sub_414DB0+A9↑j
.text:00415194                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00415197                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0041519E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004151A2                 call    GetFileSize
.text:004151A7                 sub     esp, 8
.text:004151AA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004151B1                 jmp     loc_414E60
.text:004151B6 ; ---------------------------------------------------------------------------
.text:004151B6
.text:004151B6 loc_4151B6:                             ; CODE XREF: sub_414DB0+96↑j
.text:004151B6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004151BE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004151C2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004151CA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004151CE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004151D6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004151DE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004151E6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004151E9                 call    PeekNamedPipe
.text:004151EE                 sub     esp, 18h
.text:004151F1                 test    eax, eax
.text:004151F3                 jz      short loc_41520E
.text:004151F5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004151F9                 xor     eax, eax
.text:004151FB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00415202                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00415209                 jmp     loc_414E4C
.text:0041520E ; ---------------------------------------------------------------------------
.text:0041520E
.text:0041520E loc_41520E:                             ; CODE XREF: sub_414DB0+443↑j
.text:0041520E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00415215                 jmp     loc_414E4C
.text:00415215 ; ---------------------------------------------------------------------------
.text:0041521A                 align 10h
.text:00415220
.text:00415220 loc_415220:                             ; CODE XREF: sub_414DB0+59↑j
.text:00415220                 mov     edx, 1000h
.text:00415225                 jmp     loc_414E0F
.text:00415225 ; ---------------------------------------------------------------------------
.text:0041522A                 align 10h
.text:00415230
.text:00415230 loc_415230:                             ; CODE XREF: sub_414DB0+50↑j
.text:00415230                 mov     edx, 2000h
.text:00415235                 jmp     loc_414E0F
.text:00415235 sub_414DB0      endp
.text:00415235
.text:00415235 ; ---------------------------------------------------------------------------
.text:0041523A aLnk            db '.lnk',0             ; DATA XREF: sub_415280+E0↓o
.text:0041523A                                         ; sub_415900+2A↓o ...
.text:0041523F ; const CHAR aKernel32_0[]
.text:0041523F aKernel32_0     db 'KERNEL32',0         ; DATA XREF: sub_415280+12D↓o
.text:0041523F                                         ; .text:00415FDB↓o
.text:00415248 ; const CHAR aGetcompressedf[]
.text:00415248 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00415248                                         ; DATA XREF: sub_415280+13E↓o
.text:00415248                                         ; .text:00415FEC↓o
.text:0041525F ; const CHAR aGetbinarytypea[]
.text:0041525F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_415280+333↓o
.text:0041525F                                         ; .text:00415986↓o ...
.text:0041526E ; const char aPathext[]
.text:0041526E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_415280:loc_415667↓o
.text:0041526E                                         ; .text:loc_415A30↓o ...
.text:00415276                 align 10h
.text:00415280
.text:00415280 ; =============== S U B R O U T I N E =======================================
.text:00415280
.text:00415280
.text:00415280 ; int __cdecl sub_415280(char *String1, int)
.text:00415280 sub_415280      proc near               ; CODE XREF: sub_416060+3CD↓p
.text:00415280                                         ; sub_4168E0-39B↓p
.text:00415280
.text:00415280 Str             = dword ptr -6Ch
.text:00415280 lpProcName      = dword ptr -68h
.text:00415280 var_64          = dword ptr -64h
.text:00415280 var_60          = dword ptr -60h
.text:00415280 var_5C          = dword ptr -5Ch
.text:00415280 var_4C          = dword ptr -4Ch
.text:00415280 var_48          = dword ptr -48h
.text:00415280 var_44          = dword ptr -44h
.text:00415280 var_40          = dword ptr -40h
.text:00415280 var_3C          = dword ptr -3Ch
.text:00415280 var_38          = dword ptr -38h
.text:00415280 lpRootPathName  = dword ptr -30h
.text:00415280 var_2C          = byte ptr -2Ch
.text:00415280 var_28          = dword ptr -28h
.text:00415280 var_24          = dword ptr -24h
.text:00415280 var_20          = dword ptr -20h
.text:00415280 var_1C          = dword ptr -1Ch
.text:00415280 var_18          = byte ptr -18h
.text:00415280 String1         = dword ptr  4
.text:00415280 arg_4           = dword ptr  8
.text:00415280
.text:00415280                 push    ebp
.text:00415281                 push    edi
.text:00415282                 push    esi
.text:00415283                 push    ebx
.text:00415284                 sub     esp, 5Ch
.text:00415287                 mov     edx, [esp+6Ch+String1]
.text:0041528B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0041528E                 call    sub_417760
.text:00415293                 mov     [esp+6Ch+Str], eax
.text:00415296                 call    sub_416EE0
.text:0041529B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0041529F                 test    eax, eax
.text:004152A1                 jz      loc_4154D3
.text:004152A7                 mov     [esp+6Ch+Str], eax ; Str
.text:004152AA                 call    strlen
.text:004152AF                 mov     edx, [esp+6Ch+arg_4]
.text:004152B3                 mov     ebx, eax
.text:004152B5                 mov     esi, [edx+0Ch]
.text:004152B8                 mov     edi, [edx+8]
.text:004152BB                 mov     eax, esi
.text:004152BD                 or      eax, edi
.text:004152BF                 jz      loc_4156E0
.text:004152C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004152C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004152CC                 call    GetDriveTypeA
.text:004152D1                 sub     esp, 4
.text:004152D4                 cmp     eax, 4
.text:004152D7                 jz      loc_4156E0
.text:004152DD
.text:004152DD loc_4152DD:                             ; CODE XREF: sub_415280+48A↓j
.text:004152DD                                         ; sub_415280+4B2↓j
.text:004152DD                 mov     edx, [esp+6Ch+arg_4]
.text:004152E1                 mov     esi, [edx+14h]
.text:004152E4                 mov     edi, [edx+10h]
.text:004152E7                 mov     ecx, esi
.text:004152E9                 or      ecx, edi
.text:004152EB                 jnz     short loc_415315
.text:004152ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004152F1                 xor     esi, esi
.text:004152F3                 xor     edi, edi
.text:004152F5                 test    ebp, ebp
.text:004152F7                 jz      short loc_415307
.text:004152F9                 movzx   ebx, byte ptr [ebp+0]
.text:004152FD                 test    bl, bl
.text:004152FF                 mov     cl, bl
.text:00415301                 jnz     loc_415691
.text:00415307
.text:00415307 loc_415307:                             ; CODE XREF: sub_415280+77↑j
.text:00415307                 xor     eax, eax
.text:00415309                 xor     edx, edx
.text:0041530B
.text:0041530B loc_41530B:                             ; CODE XREF: sub_415280+458↓j
.text:0041530B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041530F                 mov     [ebp+10h], eax
.text:00415312                 mov     [ebp+14h], edx
.text:00415315
.text:00415315 loc_415315:                             ; CODE XREF: sub_415280+6B↑j
.text:00415315                 mov     edi, [esp+6Ch+String1]
.text:00415319                 xor     ebx, ebx
.text:0041531B                 test    edi, edi
.text:0041531D                 jz      loc_415593
.text:00415323                 mov     esi, [esp+6Ch+String1]
.text:00415327                 cmp     byte ptr [esi], 0
.text:0041532A                 jnz     loc_4155A0
.text:00415330
.text:00415330 loc_415330:                             ; CODE XREF: sub_415280+38C↓j
.text:00415330                                         ; sub_415280+397↓j
.text:00415330                 mov     ebp, [esp+6Ch+String1]
.text:00415334                 test    ebp, ebp
.text:00415336                 jz      loc_415593
.text:0041533C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00415344                 mov     edi, [esp+6Ch+String1]
.text:00415348                 mov     [esp+6Ch+Str], edi ; Str
.text:0041534B                 call    strrchr
.text:00415350                 test    eax, eax
.text:00415352                 jz      loc_415593
.text:00415358                 cld
.text:00415359                 mov     ecx, 5
.text:0041535E                 mov     esi, eax
.text:00415360                 mov     edi, offset aLnk ; ".lnk"
.text:00415365                 repe cmpsb
.text:00415367                 setz    cl
.text:0041536A                 movzx   eax, cl
.text:0041536D                 lea     esi, [esi+0]
.text:00415370
.text:00415370 loc_415370:                             ; CODE XREF: sub_415280+315↓j
.text:00415370                 test    eax, eax
.text:00415372                 jz      short loc_41537A
.text:00415374                 or      ebx, 0A000h
.text:0041537A
.text:0041537A loc_41537A:                             ; CODE XREF: sub_415280+F2↑j
.text:0041537A                 mov     esi, [esp+6Ch+arg_4]
.text:0041537E                 xor     ecx, ecx
.text:00415380                 mov     edi, ds:dword_4203F0
.text:00415386                 or      [esi], ebx
.text:00415388                 mov     ebx, [esi+14h]
.text:0041538B                 mov     ebp, [esi+10h]
.text:0041538E                 mov     eax, ebx
.text:00415390                 xor     eax, ecx
.text:00415392                 xor     ebp, edi
.text:00415394                 or      eax, ebp
.text:00415396                 jnz     loc_415520
.text:0041539C
.text:0041539C loc_41539C:                             ; CODE XREF: sub_415280+30E↓j
.text:0041539C                 mov     ecx, dword_41F080
.text:004153A2                 xor     esi, esi
.text:004153A4                 xor     edi, edi
.text:004153A6                 mov     edx, [esp+6Ch+arg_4]
.text:004153AA                 mov     [edx+50h], ecx
.text:004153AD                 mov     [esp+6Ch+Str], offset aKernel32_0 ; "KERNEL32"
.text:004153B4                 call    LoadLibraryA
.text:004153B9                 sub     esp, 4
.text:004153BC                 mov     ebp, eax
.text:004153BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004153C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004153C9                 call    GetProcAddress
.text:004153CE                 sub     esp, 8
.text:004153D1                 test    eax, eax
.text:004153D3                 jz      short loc_415408
.text:004153D5                 mov     ebx, [esp+6Ch+String1]
.text:004153D9                 lea     esi, [esp+6Ch+var_2C]
.text:004153DD                 mov     [esp+6Ch+lpProcName], esi
.text:004153E1                 mov     [esp+6Ch+Str], ebx
.text:004153E4                 call    eax
.text:004153E6                 sub     esp, 8
.text:004153E9                 mov     ebx, eax
.text:004153EB                 cmp     eax, 0FFFFFFFFh
.text:004153EE                 jz      loc_415509
.text:004153F4
.text:004153F4 loc_4153F4:                             ; CODE XREF: sub_415280+29A↓j
.text:004153F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004153F8                 mov     ecx, ebx
.text:004153FA                 xor     edi, edi
.text:004153FC                 xor     ebx, ebx
.text:004153FE                 mov     edx, esi
.text:00415400                 mov     esi, ecx
.text:00415402                 or      esi, edi
.text:00415404                 mov     edi, ebx
.text:00415406                 or      edi, edx
.text:00415408
.text:00415408 loc_415408:                             ; CODE XREF: sub_415280+153↑j
.text:00415408                                         ; sub_415280+294↓j
.text:00415408                 test    ebp, ebp
.text:0041540A                 jz      short loc_415417
.text:0041540C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041540F                 call    FreeLibrary
.text:00415414                 sub     esp, 4
.text:00415417
.text:00415417 loc_415417:                             ; CODE XREF: sub_415280+18A↑j
.text:00415417                 mov     ebp, edi
.text:00415419                 mov     edx, ebp
.text:0041541B                 mov     edi, esi
.text:0041541D                 or      edx, esi
.text:0041541F                 jnz     short loc_41542B
.text:00415421                 mov     eax, [esp+6Ch+arg_4]
.text:00415425                 mov     edi, [eax+30h]
.text:00415428                 mov     ebp, [eax+34h]
.text:0041542B
.text:0041542B loc_41542B:                             ; CODE XREF: sub_415280+19F↑j
.text:0041542B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041542F                 mov     ebx, dword_41F080
.text:00415435                 xor     esi, esi
.text:00415437                 mov     [esp+6Ch+var_60], esi
.text:0041543B                 mov     [esp+6Ch+Str], edi
.text:0041543E                 mov     [esp+6Ch+var_64], ebx
.text:00415442                 call    sub_41D8D0
.text:00415447                 mov     [esp+6Ch+var_3C], eax
.text:0041544B                 mov     ecx, dword_41F080
.text:00415451                 mov     [esp+6Ch+lpProcName], ebp
.text:00415455                 mov     [esp+6Ch+var_38], edx
.text:00415459                 shr     ecx, 9
.text:0041545C                 mov     [esp+6Ch+var_44], ecx
.text:00415460                 mov     [esp+6Ch+var_40], 0
.text:00415468                 mov     [esp+6Ch+var_64], ebx
.text:0041546C                 mov     [esp+6Ch+var_60], esi
.text:00415470                 mov     [esp+6Ch+Str], edi
.text:00415473                 call    sub_41D750
.text:00415478                 mov     ebp, edx
.text:0041547A                 or      ebp, eax
.text:0041547C                 jz      short loc_4154E0
.text:0041547E                 mov     ebp, [esp+6Ch+var_3C]
.text:00415482                 mov     esi, [esp+6Ch+var_38]
.text:00415486                 mov     eax, [esp+6Ch+var_44]
.text:0041548A                 mov     [esp+6Ch+var_4C], ebp
.text:0041548E                 mov     ecx, [esp+6Ch+var_40]
.text:00415492                 mov     ebx, [esp+6Ch+var_44]
.text:00415496                 add     [esp+6Ch+var_4C], 1
.text:0041549B                 mov     [esp+6Ch+var_48], esi
.text:0041549F                 mov     edi, [esp+6Ch+var_4C]
.text:004154A3                 adc     [esp+6Ch+var_48], 0
.text:004154A8                 mul     [esp+6Ch+var_4C]
.text:004154AC                 imul    ecx, edi
.text:004154AF                 mov     esi, eax
.text:004154B1                 mov     eax, [esp+6Ch+var_48]
.text:004154B5                 add     edx, ecx
.text:004154B7                 imul    ebx, eax
.text:004154BA                 lea     edi, [ebx+edx]
.text:004154BD
.text:004154BD loc_4154BD:                             ; CODE XREF: sub_415280+287↓j
.text:004154BD                 mov     ebx, [esp+6Ch+arg_4]
.text:004154C1                 mov     [ebx+58h], esi
.text:004154C4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004154C8                 mov     [ebx+5Ch], edi
.text:004154CB                 mov     [esp+6Ch+Str], esi ; Block
.text:004154CE                 call    free
.text:004154D3
.text:004154D3 loc_4154D3:                             ; CODE XREF: sub_415280+21↑j
.text:004154D3                 add     esp, 5Ch
.text:004154D6                 xor     eax, eax
.text:004154D8                 pop     ebx
.text:004154D9                 pop     esi
.text:004154DA                 pop     edi
.text:004154DB                 pop     ebp
.text:004154DC                 retn
.text:004154DC ; ---------------------------------------------------------------------------
.text:004154DD                 align 10h
.text:004154E0
.text:004154E0 loc_4154E0:                             ; CODE XREF: sub_415280+1FC↑j
.text:004154E0                 mov     eax, [esp+6Ch+var_3C]
.text:004154E4                 mov     edi, [esp+6Ch+var_40]
.text:004154E8                 mov     ecx, [esp+6Ch+var_3C]
.text:004154EC                 mul     [esp+6Ch+var_44]
.text:004154F0                 mov     ebx, [esp+6Ch+var_44]
.text:004154F4                 imul    ecx, edi
.text:004154F7                 mov     ebp, edx
.text:004154F9                 mov     esi, eax
.text:004154FB                 mov     edx, [esp+6Ch+var_38]
.text:004154FF                 add     ebp, ecx
.text:00415501                 imul    ebx, edx
.text:00415504                 lea     edi, [ebx+ebp]
.text:00415507                 jmp     short loc_4154BD
.text:00415509 ; ---------------------------------------------------------------------------
.text:00415509
.text:00415509 loc_415509:                             ; CODE XREF: sub_415280+16E↑j
.text:00415509                 call    GetLastError
.text:0041550E                 xor     esi, esi
.text:00415510                 xor     edi, edi
.text:00415512                 test    eax, eax
.text:00415514                 jnz     loc_415408
.text:0041551A                 jmp     loc_4153F4
.text:0041551A ; ---------------------------------------------------------------------------
.text:0041551F                 align 10h
.text:00415520
.text:00415520 loc_415520:                             ; CODE XREF: sub_415280+116↑j
.text:00415520                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00415524                 lea     ecx, [esp+6Ch+var_20]
.text:00415528                 lea     ebx, [esp+6Ch+var_1C]
.text:0041552C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00415530                 lea     edi, [esp+6Ch+var_24]
.text:00415534                 lea     ebp, [esp+6Ch+var_28]
.text:00415538                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0041553C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00415540                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00415544                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00415547                 call    sub_4181B0
.text:0041554C                 test    eax, eax
.text:0041554E                 jnz     short loc_415570
.text:00415550                 mov     [esp+6Ch+var_28], 1
.text:00415558                 mov     [esp+6Ch+var_24], 200h
.text:00415560                 mov     [esp+6Ch+var_20], 0
.text:00415568                 mov     [esp+6Ch+var_1C], 0
.text:00415570
.text:00415570 loc_415570:                             ; CODE XREF: sub_415280+2CE↑j
.text:00415570                 mov     ebp, [esp+6Ch+var_24]
.text:00415574                 mov     edi, [esp+6Ch+var_28]
.text:00415578                 mov     eax, [esp+6Ch+arg_4]
.text:0041557C                 imul    ebp, edi
.text:0041557F                 mov     esi, [eax+10h]
.text:00415582                 mov     dword_41F080, ebp
.text:00415588                 mov     ds:dword_4203F0, esi
.text:0041558E                 jmp     loc_41539C
.text:00415593 ; ---------------------------------------------------------------------------
.text:00415593
.text:00415593 loc_415593:                             ; CODE XREF: sub_415280+9D↑j
.text:00415593                                         ; sub_415280+B6↑j ...
.text:00415593                 xor     eax, eax
.text:00415595                 jmp     loc_415370
.text:00415595 ; ---------------------------------------------------------------------------
.text:0041559A                 align 10h
.text:004155A0
.text:004155A0 loc_4155A0:                             ; CODE XREF: sub_415280+AA↑j
.text:004155A0                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:004155A7                 xor     ebp, ebp
.text:004155A9                 call    GetModuleHandleA
.text:004155AE                 sub     esp, 4
.text:004155B1                 mov     edi, eax
.text:004155B3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004155BB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004155BE                 call    GetProcAddress
.text:004155C3                 sub     esp, 8
.text:004155C6                 mov     edx, eax
.text:004155C8                 test    eax, eax
.text:004155CA                 jz      short loc_4155E4
.text:004155CC                 mov     eax, [esp+6Ch+String1]
.text:004155D0                 lea     ecx, [esp+6Ch+var_18]
.text:004155D4                 mov     [esp+6Ch+lpProcName], ecx
.text:004155D8                 mov     [esp+6Ch+Str], eax
.text:004155DB                 call    edx
.text:004155DD                 sub     esp, 8
.text:004155E0                 test    eax, eax
.text:004155E2                 jnz     short loc_415648
.text:004155E4
.text:004155E4 loc_4155E4:                             ; CODE XREF: sub_415280+34A↑j
.text:004155E4                 mov     edx, ds:Str
.text:004155EA                 test    edx, edx
.text:004155EC                 jz      short loc_415667
.text:004155EE
.text:004155EE loc_4155EE:                             ; CODE XREF: sub_415280+3FA↓j
.text:004155EE                                         ; sub_415280+40C↓j
.text:004155EE                 mov     eax, [esp+6Ch+String1]
.text:004155F2                 test    eax, eax
.text:004155F4                 jz      short loc_4155FF
.text:004155F6                 mov     esi, [esp+6Ch+String1]
.text:004155FA                 cmp     byte ptr [esi], 0
.text:004155FD                 jnz     short loc_41561C
.text:004155FF
.text:004155FF loc_4155FF:                             ; CODE XREF: sub_415280+374↑j
.text:004155FF                                         ; sub_415280+3B0↓j ...
.text:004155FF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00415602                 call    FreeLibrary
.text:00415607                 sub     esp, 4
.text:0041560A                 test    ebp, ebp
.text:0041560C                 jz      loc_415330
.text:00415612                 mov     ebx, 49h ; 'I'
.text:00415617                 jmp     loc_415330
.text:0041561C ; ---------------------------------------------------------------------------
.text:0041561C
.text:0041561C loc_41561C:                             ; CODE XREF: sub_415280+37D↑j
.text:0041561C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041561F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00415627                 call    strrchr
.text:0041562C                 test    eax, eax
.text:0041562E                 mov     esi, eax
.text:00415630                 jz      short loc_4155FF
.text:00415632                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00415636                 mov     ecx, ds:Str
.text:0041563C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0041563F                 call    strstr
.text:00415644                 test    eax, eax
.text:00415646                 jz      short loc_41564F
.text:00415648
.text:00415648 loc_415648:                             ; CODE XREF: sub_415280+362↑j
.text:00415648                                         ; sub_415280+3E5↓j
.text:00415648                 mov     ebp, 1
.text:0041564D                 jmp     short loc_4155FF
.text:0041564F ; ---------------------------------------------------------------------------
.text:0041564F
.text:0041564F loc_41564F:                             ; CODE XREF: sub_415280+3C6↑j
.text:0041564F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00415653                 mov     edx, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415659                 mov     [esp+6Ch+Str], edx ; Str
.text:0041565C                 call    strstr
.text:00415661                 test    eax, eax
.text:00415663                 jz      short loc_4155FF
.text:00415665                 jmp     short loc_415648
.text:00415667 ; ---------------------------------------------------------------------------
.text:00415667
.text:00415667 loc_415667:                             ; CODE XREF: sub_415280+36C↑j
.text:00415667                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0041566E                 call    getenv
.text:00415673                 mov     ds:Str, eax
.text:00415678                 test    eax, eax
.text:0041567A                 jnz     loc_4155EE
.text:00415680                 mov     esi, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415686                 mov     ds:Str, esi
.text:0041568C                 jmp     loc_4155EE
.text:00415691 ; ---------------------------------------------------------------------------
.text:00415691
.text:00415691 loc_415691:                             ; CODE XREF: sub_415280+81↑j
.text:00415691                                         ; sub_415280+452↓j
.text:00415691                 shld    edi, esi, 8
.text:00415695                 movsx   eax, cl
.text:00415698                 shl     esi, 8
.text:0041569B                 cdq
.text:0041569C                 add     esi, eax
.text:0041569E                 adc     edi, edx
.text:004156A0                 mov     edx, edi
.text:004156A2                 xor     ebx, ebx
.text:004156A4                 and     edx, 0FF000000h
.text:004156AA                 mov     eax, edx
.text:004156AC                 or      eax, ebx
.text:004156AE                 jz      short loc_4156C9
.text:004156B0                 mov     ecx, edx
.text:004156B2                 xor     eax, eax
.text:004156B4                 shr     ecx, 10h
.text:004156B7                 mov     edx, esi
.text:004156B9                 xor     edx, ecx
.text:004156BB                 mov     ecx, edi
.text:004156BD                 xor     ecx, eax
.text:004156BF                 mov     esi, edx
.text:004156C1                 mov     edi, ecx
.text:004156C3                 and     edi, 0FFFFFFh
.text:004156C9
.text:004156C9 loc_4156C9:                             ; CODE XREF: sub_415280+42E↑j
.text:004156C9                 inc     ebp
.text:004156CA                 movzx   ebx, byte ptr [ebp+0]
.text:004156CE                 test    bl, bl
.text:004156D0                 mov     cl, bl
.text:004156D2                 jnz     short loc_415691
.text:004156D4                 mov     eax, esi
.text:004156D6                 mov     edx, edi
.text:004156D8                 jmp     loc_41530B
.text:004156D8 ; ---------------------------------------------------------------------------
.text:004156DD                 align 10h
.text:004156E0
.text:004156E0 loc_4156E0:                             ; CODE XREF: sub_415280+3F↑j
.text:004156E0                                         ; sub_415280+57↑j
.text:004156E0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004156E4                 mov     ebp, [esp+6Ch+String1]
.text:004156E8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004156EC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004156EF                 call    _stricmp
.text:004156F4                 test    eax, eax
.text:004156F6                 jnz     short loc_415710
.text:004156F8                 mov     ebx, [esp+6Ch+arg_4]
.text:004156FC                 mov     dword ptr [ebx+8], 5
.text:00415703                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041570A                 jmp     loc_4152DD
.text:0041570A ; ---------------------------------------------------------------------------
.text:0041570F                 align 10h
.text:00415710
.text:00415710 loc_415710:                             ; CODE XREF: sub_415280+476↑j
.text:00415710                 mov     ebp, [esp+6Ch+String1]
.text:00415714                 xor     esi, esi
.text:00415716                 xor     edi, edi
.text:00415718                 add     ebp, ebx
.text:0041571A                 jz      short loc_415724
.text:0041571C                 movzx   ecx, byte ptr [ebp+0]
.text:00415720                 test    cl, cl
.text:00415722                 jnz     short loc_415737
.text:00415724
.text:00415724 loc_415724:                             ; CODE XREF: sub_415280+49A↑j
.text:00415724                 xor     eax, eax
.text:00415726                 xor     edx, edx
.text:00415728
.text:00415728 loc_415728:                             ; CODE XREF: sub_415280+4FE↓j
.text:00415728                 mov     ebp, [esp+6Ch+arg_4]
.text:0041572C                 mov     [ebp+8], eax
.text:0041572F                 mov     [ebp+0Ch], edx
.text:00415732                 jmp     loc_4152DD
.text:00415737 ; ---------------------------------------------------------------------------
.text:00415737
.text:00415737 loc_415737:                             ; CODE XREF: sub_415280+4A2↑j
.text:00415737                                         ; sub_415280+4F8↓j
.text:00415737                 shld    edi, esi, 8
.text:0041573B                 movsx   eax, cl
.text:0041573E                 shl     esi, 8
.text:00415741                 cdq
.text:00415742                 add     esi, eax
.text:00415744                 adc     edi, edx
.text:00415746                 mov     edx, edi
.text:00415748                 xor     ebx, ebx
.text:0041574A                 and     edx, 0FF000000h
.text:00415750                 mov     eax, edx
.text:00415752                 or      eax, ebx
.text:00415754                 jz      short loc_41576F
.text:00415756                 mov     ecx, edx
.text:00415758                 xor     eax, eax
.text:0041575A                 shr     ecx, 10h
.text:0041575D                 mov     edx, esi
.text:0041575F                 xor     edx, ecx
.text:00415761                 mov     ecx, edi
.text:00415763                 xor     ecx, eax
.text:00415765                 mov     esi, edx
.text:00415767                 mov     edi, ecx
.text:00415769                 and     edi, 0FFFFFFh
.text:0041576F
.text:0041576F loc_41576F:                             ; CODE XREF: sub_415280+4D4↑j
.text:0041576F                 inc     ebp
.text:00415770                 movzx   ebx, byte ptr [ebp+0]
.text:00415774                 test    bl, bl
.text:00415776                 mov     cl, bl
.text:00415778                 jnz     short loc_415737
.text:0041577A                 mov     eax, esi
.text:0041577C                 mov     edx, edi
.text:0041577E                 jmp     short loc_415728
.text:0041577E sub_415280      endp
.text:0041577E
.text:00415780
.text:00415780 ; =============== S U B R O U T I N E =======================================
.text:00415780
.text:00415780
.text:00415780 ; int __cdecl sub_415780(LPCSTR)
.text:00415780 sub_415780      proc near               ; CODE XREF: sub_417880+CA↓p
.text:00415780
.text:00415780 lpRootPathName  = dword ptr -83Ch
.text:00415780 lpVolumeNameBuffer= dword ptr -838h
.text:00415780 nVolumeNameSize = dword ptr -834h
.text:00415780 lpVolumeSerialNumber= dword ptr -830h
.text:00415780 lpMaximumComponentLength= dword ptr -82Ch
.text:00415780 lpFileSystemFlags= dword ptr -828h
.text:00415780 lpFileSystemNameBuffer= dword ptr -824h
.text:00415780 nFileSystemNameSize= dword ptr -820h
.text:00415780 VolumeSerialNumber= dword ptr -818h
.text:00415780 MaximumComponentLength= dword ptr -814h
.text:00415780 FileSystemFlags = dword ptr -810h
.text:00415780 FileSystemNameBuffer= byte ptr -80Ch
.text:00415780 VolumeNameBuffer= byte ptr -40Ch
.text:00415780 var_4           = dword ptr -4
.text:00415780 arg_0           = dword ptr  4
.text:00415780
.text:00415780                 sub     esp, 83Ch
.text:00415786                 mov     [esp+83Ch+var_4], ebx
.text:0041578D                 mov     ebx, [esp+83Ch+arg_0]
.text:00415794                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00415797                 call    sub_417760
.text:0041579C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0041579F                 call    sub_416EE0
.text:004157A4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004157A7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004157AB                 mov     ebx, eax
.text:004157AD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004157B1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004157B5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004157B9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004157BD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004157C1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004157C5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004157CC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004157D0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004157D4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004157DC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004157E4                 call    GetVolumeInformationA
.text:004157E9                 sub     esp, 20h
.text:004157EC                 test    eax, eax
.text:004157EE                 setz    cl
.text:004157F1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:004157F4                 movzx   edx, cl
.text:004157F7                 dec     edx
.text:004157F8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:004157FC                 call    free
.text:00415801                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00415805                 mov     ebx, [esp+83Ch+var_4]
.text:0041580C                 add     esp, 83Ch
.text:00415812                 retn
.text:00415812 sub_415780      endp
.text:00415812
.text:00415812 ; ---------------------------------------------------------------------------
.text:00415813                 align 10h
.text:00415820                 push    ebp
.text:00415821                 push    edi
.text:00415822                 xor     edi, edi
.text:00415824                 push    esi
.text:00415825                 xor     esi, esi
.text:00415827                 push    ebx
.text:00415828                 mov     ebp, [esp+14h]
.text:0041582C                 test    ebp, ebp
.text:0041582E                 jz      short loc_415838
.text:00415830                 movzx   ecx, byte ptr [ebp+0]
.text:00415834                 test    cl, cl
.text:00415836                 jnz     short loc_415841
.text:00415838
.text:00415838 loc_415838:                             ; CODE XREF: .text:0041582E↑j
.text:00415838                 xor     eax, eax
.text:0041583A                 xor     edx, edx
.text:0041583C
.text:0041583C loc_41583C:                             ; CODE XREF: .text:00415888↓j
.text:0041583C                 pop     ebx
.text:0041583D                 pop     esi
.text:0041583E                 pop     edi
.text:0041583F                 pop     ebp
.text:00415840                 retn
.text:00415841 ; ---------------------------------------------------------------------------
.text:00415841
.text:00415841 loc_415841:                             ; CODE XREF: .text:00415836↑j
.text:00415841                                         ; .text:00415882↓j
.text:00415841                 shld    edi, esi, 8
.text:00415845                 movsx   eax, cl
.text:00415848                 shl     esi, 8
.text:0041584B                 cdq
.text:0041584C                 add     esi, eax
.text:0041584E                 adc     edi, edx
.text:00415850                 mov     edx, edi
.text:00415852                 xor     ebx, ebx
.text:00415854                 and     edx, 0FF000000h
.text:0041585A                 mov     eax, edx
.text:0041585C                 or      eax, ebx
.text:0041585E                 jz      short loc_415879
.text:00415860                 mov     ecx, edx
.text:00415862                 xor     eax, eax
.text:00415864                 shr     ecx, 10h
.text:00415867                 mov     edx, esi
.text:00415869                 xor     edx, ecx
.text:0041586B                 mov     ecx, edi
.text:0041586D                 xor     ecx, eax
.text:0041586F                 mov     esi, edx
.text:00415871                 mov     edi, ecx
.text:00415873                 and     edi, 0FFFFFFh
.text:00415879
.text:00415879 loc_415879:                             ; CODE XREF: .text:0041585E↑j
.text:00415879                 inc     ebp
.text:0041587A                 movzx   ebx, byte ptr [ebp+0]
.text:0041587E                 test    bl, bl
.text:00415880                 mov     cl, bl
.text:00415882                 jnz     short loc_415841
.text:00415884                 mov     eax, esi
.text:00415886                 mov     edx, edi
.text:00415888                 jmp     short loc_41583C
.text:00415888 ; ---------------------------------------------------------------------------
.text:0041588A                 align 10h
.text:00415890                 sub     esp, 2Ch
.text:00415893                 lea     edx, [esp+24h]
.text:00415897                 lea     ecx, [esp+28h]
.text:0041589B                 mov     [esp+0Ch], edx
.text:0041589F                 lea     edx, [esp+1Ch]
.text:004158A3                 mov     [esp+4], edx
.text:004158A7                 mov     edx, [esp+30h]
.text:004158AB                 mov     [esp+10h], ecx
.text:004158AF                 lea     ecx, [esp+20h]
.text:004158B3                 mov     [esp+8], ecx
.text:004158B7                 mov     [esp], edx
.text:004158BA                 call    sub_4181B0
.text:004158BF                 test    eax, eax
.text:004158C1                 jnz     short loc_4158E3
.text:004158C3                 mov     dword ptr [esp+1Ch], 1
.text:004158CB                 mov     dword ptr [esp+20h], 200h
.text:004158D3                 mov     dword ptr [esp+24h], 0
.text:004158DB                 mov     dword ptr [esp+28h], 0
.text:004158E3
.text:004158E3 loc_4158E3:                             ; CODE XREF: .text:004158C1↑j
.text:004158E3                 mov     eax, [esp+20h]
.text:004158E7                 mov     ecx, [esp+1Ch]
.text:004158EB                 add     esp, 2Ch
.text:004158EE                 imul    eax, ecx
.text:004158F1                 retn
.text:004158F1 ; ---------------------------------------------------------------------------
.text:004158F2                 align 10h
.text:00415900
.text:00415900 ; =============== S U B R O U T I N E =======================================
.text:00415900
.text:00415900
.text:00415900 ; int __cdecl sub_415900(char *)
.text:00415900 sub_415900      proc near               ; CODE XREF: sub_4187E0+30↓p
.text:00415900
.text:00415900 Str             = dword ptr -1Ch
.text:00415900 var_18          = dword ptr -18h
.text:00415900 var_8           = dword ptr -8
.text:00415900 var_4           = dword ptr -4
.text:00415900 arg_0           = dword ptr  4
.text:00415900
.text:00415900                 sub     esp, 1Ch
.text:00415903                 mov     eax, [esp+1Ch+arg_0]
.text:00415907                 mov     [esp+1Ch+var_8], esi
.text:0041590B                 mov     [esp+1Ch+var_4], edi
.text:0041590F                 test    eax, eax
.text:00415911                 jz      short loc_415950
.text:00415913                 mov     [esp+1Ch+var_18], 2Eh ; '.' ; Ch
.text:0041591B                 mov     [esp+1Ch+Str], eax ; Str
.text:0041591E                 call    strrchr
.text:00415923                 test    eax, eax
.text:00415925                 jz      short loc_415950
.text:00415927                 cld
.text:00415928                 mov     esi, eax
.text:0041592A                 mov     edi, offset aLnk ; ".lnk"
.text:0041592F                 mov     ecx, 5
.text:00415934                 repe cmpsb
.text:00415936                 setz    dl
.text:00415939                 movzx   eax, dl
.text:0041593C                 lea     esi, [esi+0]
.text:00415940
.text:00415940 loc_415940:                             ; CODE XREF: sub_415900+52↓j
.text:00415940                 mov     esi, [esp+1Ch+var_8]
.text:00415944                 mov     edi, [esp+1Ch+var_4]
.text:00415948                 add     esp, 1Ch
.text:0041594B                 retn
.text:0041594B ; ---------------------------------------------------------------------------
.text:0041594C                 align 10h
.text:00415950
.text:00415950 loc_415950:                             ; CODE XREF: sub_415900+11↑j
.text:00415950                                         ; sub_415900+25↑j
.text:00415950                 xor     eax, eax
.text:00415952                 jmp     short loc_415940
.text:00415952 sub_415900      endp
.text:00415952
.text:00415952 ; ---------------------------------------------------------------------------
.text:00415954                 align 10h
.text:00415960                 sub     esp, 1Ch
.text:00415963                 mov     [esp+10h], ebx
.text:00415967                 mov     ebx, [esp+20h]
.text:0041596B                 mov     [esp+14h], esi
.text:0041596F                 mov     [esp+18h], edi
.text:00415973                 xor     edi, edi
.text:00415975                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:0041597C                 call    GetModuleHandleA
.text:00415981                 sub     esp, 4
.text:00415984                 mov     esi, eax
.text:00415986                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0041598E                 mov     [esp], eax
.text:00415991                 call    GetProcAddress
.text:00415996                 sub     esp, 8
.text:00415999                 test    eax, eax
.text:0041599B                 jz      short loc_4159B1
.text:0041599D                 mov     [esp], ebx
.text:004159A0                 lea     ecx, [esp+0Ch]
.text:004159A4                 mov     [esp+4], ecx
.text:004159A8                 call    eax
.text:004159AA                 sub     esp, 8
.text:004159AD                 test    eax, eax
.text:004159AF                 jnz     short loc_415A10
.text:004159B1
.text:004159B1 loc_4159B1:                             ; CODE XREF: .text:0041599B↑j
.text:004159B1                 mov     eax, ds:Str
.text:004159B6                 test    eax, eax
.text:004159B8                 jz      short loc_415A30
.text:004159BA
.text:004159BA loc_4159BA:                             ; CODE XREF: .text:00415A43↓j
.text:004159BA                                         ; .text:00415A55↓j
.text:004159BA                 test    ebx, ebx
.text:004159BC                 jz      short loc_4159C3
.text:004159BE                 cmp     byte ptr [ebx], 0
.text:004159C1                 jnz     short loc_4159E0
.text:004159C3
.text:004159C3 loc_4159C3:                             ; CODE XREF: .text:004159BC↑j
.text:004159C3                                         ; .text:004159F4↓j ...
.text:004159C3                 mov     [esp], esi
.text:004159C6                 call    FreeLibrary
.text:004159CB                 sub     esp, 4
.text:004159CE                 mov     eax, edi
.text:004159D0                 mov     ebx, [esp+10h]
.text:004159D4                 mov     esi, [esp+14h]
.text:004159D8                 mov     edi, [esp+18h]
.text:004159DC                 add     esp, 1Ch
.text:004159DF                 retn
.text:004159E0 ; ---------------------------------------------------------------------------
.text:004159E0
.text:004159E0 loc_4159E0:                             ; CODE XREF: .text:004159C1↑j
.text:004159E0                 mov     [esp], ebx
.text:004159E3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:004159EB                 call    strrchr
.text:004159F0                 test    eax, eax
.text:004159F2                 mov     ebx, eax
.text:004159F4                 jz      short loc_4159C3
.text:004159F6                 mov     [esp+4], eax
.text:004159FA                 mov     ecx, ds:Str
.text:00415A00                 mov     [esp], ecx
.text:00415A03                 call    strstr
.text:00415A08                 test    eax, eax
.text:00415A0A                 jz      short loc_415A17
.text:00415A0C                 lea     esi, [esi+0]
.text:00415A10
.text:00415A10 loc_415A10:                             ; CODE XREF: .text:004159AF↑j
.text:00415A10                                         ; .text:00415A2D↓j
.text:00415A10                 mov     edi, 1
.text:00415A15                 jmp     short loc_4159C3
.text:00415A17 ; ---------------------------------------------------------------------------
.text:00415A17
.text:00415A17 loc_415A17:                             ; CODE XREF: .text:00415A0A↑j
.text:00415A17                 mov     [esp+4], ebx
.text:00415A1B                 mov     ebx, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415A21                 mov     [esp], ebx
.text:00415A24                 call    strstr
.text:00415A29                 test    eax, eax
.text:00415A2B                 jz      short loc_4159C3
.text:00415A2D                 jmp     short loc_415A10
.text:00415A2D ; ---------------------------------------------------------------------------
.text:00415A2F                 align 10h
.text:00415A30
.text:00415A30 loc_415A30:                             ; CODE XREF: .text:004159B8↑j
.text:00415A30                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00415A37                 call    getenv
.text:00415A3C                 mov     ds:Str, eax
.text:00415A41                 test    eax, eax
.text:00415A43                 jnz     loc_4159BA
.text:00415A49                 mov     edx, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415A4F                 mov     ds:Str, edx
.text:00415A55                 jmp     loc_4159BA
.text:00415A55 ; ---------------------------------------------------------------------------
.text:00415A5A                 align 10h
.text:00415A60                 sub     esp, 0Ch
.text:00415A63                 mov     edx, [esp+10h]
.text:00415A67                 mov     [esp], edx
.text:00415A6A                 call    GetFileType
.text:00415A6F                 sub     esp, 4
.text:00415A72                 xor     edx, edx
.text:00415A74                 cmp     eax, 2
.text:00415A77                 jz      short loc_415A90
.text:00415A79                 cmp     eax, 3
.text:00415A7C                 jz      short loc_415A84
.text:00415A7E
.text:00415A7E loc_415A7E:                             ; CODE XREF: .text:00415A89↓j
.text:00415A7E                                         ; .text:00415A95↓j
.text:00415A7E                 mov     eax, edx
.text:00415A80                 add     esp, 0Ch
.text:00415A83                 retn
.text:00415A84 ; ---------------------------------------------------------------------------
.text:00415A84
.text:00415A84 loc_415A84:                             ; CODE XREF: .text:00415A7C↑j
.text:00415A84                 mov     edx, 1000h
.text:00415A89                 jmp     short loc_415A7E
.text:00415A89 ; ---------------------------------------------------------------------------
.text:00415A8B                 align 10h
.text:00415A90
.text:00415A90 loc_415A90:                             ; CODE XREF: .text:00415A77↑j
.text:00415A90                 mov     edx, 2000h
.text:00415A95                 jmp     short loc_415A7E
.text:00415A95 ; ---------------------------------------------------------------------------
.text:00415A97                 align 10h
.text:00415AA0                 mov     ecx, [esp+4]
.text:00415AA4                 xor     edx, edx
.text:00415AA6                 test    cl, 10h
.text:00415AA9                 setz    dl
.text:00415AAC                 dec     edx
.text:00415AAD                 and     edx, 0FFFFC000h
.text:00415AB3                 add     edx, 8000h
.text:00415AB9                 or      edx, 124h
.text:00415ABF                 test    cl, 1
.text:00415AC2                 movzx   eax, dx
.text:00415AC5                 jnz     short locret_415ACC
.text:00415AC7                 or      eax, 92h
.text:00415ACC
.text:00415ACC locret_415ACC:                          ; CODE XREF: .text:00415AC5↑j
.text:00415ACC                 retn
.text:00415ACC ; ---------------------------------------------------------------------------
.text:00415ACD                 align 10h
.text:00415AD0                 sub     esp, 2Ch
.text:00415AD3                 mov     [esp+20h], esi
.text:00415AD7                 mov     esi, [esp+30h]
.text:00415ADB                 mov     [esp+1Ch], ebx
.text:00415ADF                 xor     ebx, ebx
.text:00415AE1                 test    esi, esi
.text:00415AE3                 mov     [esp+24h], edi
.text:00415AE7                 mov     [esp+28h], ebp
.text:00415AEB                 jz      short loc_415B40
.text:00415AED                 cmp     byte ptr [esi], 0
.text:00415AF0                 jnz     short loc_415B44
.text:00415AF2
.text:00415AF2 loc_415AF2:                             ; CODE XREF: .text:00415BAC↓j
.text:00415AF2                                         ; .text:00415BB7↓j
.text:00415AF2                 test    esi, esi
.text:00415AF4                 jz      short loc_415B40
.text:00415AF6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00415AFE                 mov     [esp], esi
.text:00415B01                 call    strrchr
.text:00415B06                 test    eax, eax
.text:00415B08                 jz      short loc_415B40
.text:00415B0A                 cld
.text:00415B0B                 mov     ecx, 5
.text:00415B10                 mov     esi, eax
.text:00415B12                 mov     edi, offset aLnk ; ".lnk"
.text:00415B17                 repe cmpsb
.text:00415B19                 setz    cl
.text:00415B1C                 movzx   eax, cl
.text:00415B1F                 nop
.text:00415B20
.text:00415B20 loc_415B20:                             ; CODE XREF: .text:00415B42↓j
.text:00415B20                 test    eax, eax
.text:00415B22                 jz      short loc_415B2A
.text:00415B24                 or      ebx, 0A000h
.text:00415B2A
.text:00415B2A loc_415B2A:                             ; CODE XREF: .text:00415B22↑j
.text:00415B2A                 mov     eax, ebx
.text:00415B2C                 mov     esi, [esp+20h]
.text:00415B30                 mov     ebx, [esp+1Ch]
.text:00415B34                 mov     edi, [esp+24h]
.text:00415B38                 mov     ebp, [esp+28h]
.text:00415B3C                 add     esp, 2Ch
.text:00415B3F                 retn
.text:00415B40 ; ---------------------------------------------------------------------------
.text:00415B40
.text:00415B40 loc_415B40:                             ; CODE XREF: .text:00415AEB↑j
.text:00415B40                                         ; .text:00415AF4↑j ...
.text:00415B40                 xor     eax, eax
.text:00415B42                 jmp     short loc_415B20
.text:00415B44 ; ---------------------------------------------------------------------------
.text:00415B44
.text:00415B44 loc_415B44:                             ; CODE XREF: .text:00415AF0↑j
.text:00415B44                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00415B4B                 call    GetModuleHandleA
.text:00415B50                 sub     esp, 4
.text:00415B53                 mov     ebp, eax
.text:00415B55                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00415B5D                 mov     [esp], eax
.text:00415B60                 call    GetProcAddress
.text:00415B65                 sub     esp, 8
.text:00415B68                 test    eax, eax
.text:00415B6A                 mov     dword ptr [esp+14h], 0
.text:00415B72                 jz      short loc_415B88
.text:00415B74                 mov     [esp], esi
.text:00415B77                 lea     ecx, [esp+18h]
.text:00415B7B                 mov     [esp+4], ecx
.text:00415B7F                 call    eax
.text:00415B81                 sub     esp, 8
.text:00415B84                 test    eax, eax
.text:00415B86                 jnz     short loc_415BE8
.text:00415B88
.text:00415B88 loc_415B88:                             ; CODE XREF: .text:00415B72↑j
.text:00415B88                 mov     edx, ds:Str
.text:00415B8E                 test    edx, edx
.text:00415B90                 jz      short loc_415C10
.text:00415B92
.text:00415B92 loc_415B92:                             ; CODE XREF: .text:00415C23↓j
.text:00415B92                                         ; .text:00415C35↓j
.text:00415B92                 test    esi, esi
.text:00415B94                 jz      short loc_415B9B
.text:00415B96                 cmp     byte ptr [esi], 0
.text:00415B99                 jnz     short loc_415BBC
.text:00415B9B
.text:00415B9B loc_415B9B:                             ; CODE XREF: .text:00415B94↑j
.text:00415B9B                                         ; .text:00415BD0↓j ...
.text:00415B9B                 mov     [esp], ebp
.text:00415B9E                 call    FreeLibrary
.text:00415BA3                 sub     esp, 4
.text:00415BA6                 mov     eax, [esp+14h]
.text:00415BAA                 test    eax, eax
.text:00415BAC                 jz      loc_415AF2
.text:00415BB2                 mov     ebx, 49h ; 'I'
.text:00415BB7                 jmp     loc_415AF2
.text:00415BBC ; ---------------------------------------------------------------------------
.text:00415BBC
.text:00415BBC loc_415BBC:                             ; CODE XREF: .text:00415B99↑j
.text:00415BBC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00415BC4                 mov     [esp], esi
.text:00415BC7                 call    strrchr
.text:00415BCC                 test    eax, eax
.text:00415BCE                 mov     edi, eax
.text:00415BD0                 jz      short loc_415B9B
.text:00415BD2                 mov     [esp+4], eax
.text:00415BD6                 mov     edx, ds:Str
.text:00415BDC                 mov     [esp], edx
.text:00415BDF                 call    strstr
.text:00415BE4                 test    eax, eax
.text:00415BE6                 jz      short loc_415BF2
.text:00415BE8
.text:00415BE8 loc_415BE8:                             ; CODE XREF: .text:00415B86↑j
.text:00415BE8                                         ; .text:00415C08↓j
.text:00415BE8                 mov     dword ptr [esp+14h], 1
.text:00415BF0                 jmp     short loc_415B9B
.text:00415BF2 ; ---------------------------------------------------------------------------
.text:00415BF2
.text:00415BF2 loc_415BF2:                             ; CODE XREF: .text:00415BE6↑j
.text:00415BF2                 mov     [esp+4], edi
.text:00415BF6                 mov     edi, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415BFC                 mov     [esp], edi
.text:00415BFF                 call    strstr
.text:00415C04                 test    eax, eax
.text:00415C06                 jz      short loc_415B9B
.text:00415C08                 jmp     short loc_415BE8
.text:00415C08 ; ---------------------------------------------------------------------------
.text:00415C0A                 align 10h
.text:00415C10
.text:00415C10 loc_415C10:                             ; CODE XREF: .text:00415B90↑j
.text:00415C10                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00415C17                 call    getenv
.text:00415C1C                 mov     ds:Str, eax
.text:00415C21                 test    eax, eax
.text:00415C23                 jnz     loc_415B92
.text:00415C29                 mov     ecx, off_41F084 ; ".com;.exe;.bat;.cmd"
.text:00415C2F                 mov     ds:Str, ecx
.text:00415C35                 jmp     loc_415B92
.text:00415C35 ; ---------------------------------------------------------------------------
.text:00415C3A                 align 10h
.text:00415C40                 push    esi
.text:00415C41                 push    ebx
.text:00415C42                 sub     esp, 864h
.text:00415C48                 mov     ebx, [esp+870h]
.text:00415C4F                 lea     edx, [esp+830h]
.text:00415C56                 mov     esi, [esp+874h]
.text:00415C5D                 mov     [esp+4], edx
.text:00415C61                 mov     [esp], ebx
.text:00415C64                 call    sub_414AC0
.text:00415C69                 xor     edx, edx
.text:00415C6B                 test    eax, eax
.text:00415C6D                 jz      loc_415D55
.text:00415C73                 mov     ecx, [esp+830h]
.text:00415C7A                 test    cl, 10h
.text:00415C7D                 mov     [esi], ecx
.text:00415C7F                 mov     eax, [esp+834h]
.text:00415C86                 mov     edx, [esp+838h]
.text:00415C8D                 mov     [esi+4], eax
.text:00415C90                 mov     [esi+8], edx
.text:00415C93                 mov     eax, [esp+83Ch]
.text:00415C9A                 mov     edx, [esp+840h]
.text:00415CA1                 mov     [esi+0Ch], eax
.text:00415CA4                 mov     [esi+10h], edx
.text:00415CA7                 mov     edx, [esp+848h]
.text:00415CAE                 mov     eax, [esp+844h]
.text:00415CB5                 mov     [esi+18h], edx
.text:00415CB8                 mov     [esi+14h], eax
.text:00415CBB                 mov     edx, [esp+84Ch]
.text:00415CC2                 mov     [esi+20h], edx
.text:00415CC5                 mov     edx, [esp+850h]
.text:00415CCC                 mov     [esi+24h], edx
.text:00415CCF                 jnz     loc_415D60
.text:00415CD5                 mov     dword ptr [esi+28h], 1
.text:00415CDC
.text:00415CDC loc_415CDC:                             ; CODE XREF: .text:00415D6B↓j
.text:00415CDC                 mov     [esp], ebx
.text:00415CDF                 call    sub_417760
.text:00415CE4                 mov     [esp], eax
.text:00415CE7                 call    sub_416EE0
.text:00415CEC                 mov     [esp], eax
.text:00415CEF                 lea     edx, [esp+30h]
.text:00415CF3                 mov     ebx, eax
.text:00415CF5                 mov     [esp+18h], edx
.text:00415CF9                 lea     ecx, [esp+2Ch]
.text:00415CFD                 lea     edx, [esp+28h]
.text:00415D01                 mov     [esp+14h], ecx
.text:00415D05                 lea     ecx, [esp+24h]
.text:00415D09                 mov     [esp+10h], edx
.text:00415D0D                 lea     edx, [esp+430h]
.text:00415D14                 mov     [esp+0Ch], ecx
.text:00415D18                 mov     [esp+4], edx
.text:00415D1C                 mov     dword ptr [esp+1Ch], 400h
.text:00415D24                 mov     dword ptr [esp+8], 400h
.text:00415D2C                 call    GetVolumeInformationA
.text:00415D31                 sub     esp, 20h
.text:00415D34                 test    eax, eax
.text:00415D36                 setz    cl
.text:00415D39                 mov     [esp], ebx
.text:00415D3C                 movzx   edx, cl
.text:00415D3F                 dec     edx
.text:00415D40                 and     [esp+24h], edx
.text:00415D44                 call    free
.text:00415D49                 mov     ecx, [esp+24h]
.text:00415D4D                 mov     edx, 1
.text:00415D52                 mov     [esi+1Ch], ecx
.text:00415D55
.text:00415D55 loc_415D55:                             ; CODE XREF: .text:00415C6D↑j
.text:00415D55                 add     esp, 864h
.text:00415D5B                 mov     eax, edx
.text:00415D5D                 pop     ebx
.text:00415D5E                 pop     esi
.text:00415D5F                 retn
.text:00415D60 ; ---------------------------------------------------------------------------
.text:00415D60
.text:00415D60 loc_415D60:                             ; CODE XREF: .text:00415CCF↑j
.text:00415D60                 mov     [esp], ebx
.text:00415D63                 call    sub_414C30
.text:00415D68                 mov     [esi+28h], eax
.text:00415D6B                 jmp     loc_415CDC
.text:00415D70 ; ---------------------------------------------------------------------------
.text:00415D70                 push    ebp
.text:00415D71                 xor     edx, edx
.text:00415D73                 push    edi
.text:00415D74                 push    esi
.text:00415D75                 xor     esi, esi
.text:00415D77                 push    ebx
.text:00415D78                 sub     esp, 1Ch
.text:00415D7B                 mov     ebx, [esp+5Ch]
.text:00415D7F                 mov     ecx, [esp+30h]
.text:00415D83                 mov     edi, [esp+60h]
.text:00415D87                 or      esi, ebx
.text:00415D89                 mov     eax, [esp+4Ch]
.text:00415D8D                 or      edi, edx
.text:00415D8F                 mov     ebx, [esp+64h]
.text:00415D93                 xor     edx, edx
.text:00415D95                 test    cl, 10h
.text:00415D98                 setz    dl
.text:00415D9B                 mov     [ebx+10h], eax
.text:00415D9E                 mov     [ebx+8], edi
.text:00415DA1                 mov     [ebx+0Ch], esi
.text:00415DA4                 dec     edx
.text:00415DA5                 and     edx, 0FFFFC000h
.text:00415DAB                 mov     dword ptr [ebx+14h], 0
.text:00415DB2                 add     edx, 8000h
.text:00415DB8                 or      edx, 124h
.text:00415DBE                 test    cl, 1
.text:00415DC1                 movzx   eax, dx
.text:00415DC4                 jnz     short loc_415DCB
.text:00415DC6                 or      eax, 92h
.text:00415DCB
.text:00415DCB loc_415DCB:                             ; CODE XREF: .text:00415DC4↑j
.text:00415DCB                 mov     ebx, [esp+54h]
.text:00415DCF                 xor     edx, edx
.text:00415DD1                 xor     ebp, ebp
.text:00415DD3                 mov     edi, [esp+50h]
.text:00415DD7                 mov     ecx, [esp+64h]
.text:00415DDB                 mov     esi, edi
.text:00415DDD                 or      [ecx], eax
.text:00415DDF                 mov     edi, ebx
.text:00415DE1                 or      edi, ebp
.text:00415DE3                 mov     ebp, edx
.text:00415DE5                 mov     ebx, [esp+64h]
.text:00415DE9                 or      ebp, esi
.text:00415DEB                 mov     esi, [esp+58h]
.text:00415DEF                 mov     edx, [esp+40h]
.text:00415DF3                 mov     [ebx+30h], edi
.text:00415DF6                 mov     [ebx+18h], esi
.text:00415DF9                 mov     ecx, edx
.text:00415DFB                 xor     esi, esi
.text:00415DFD                 mov     [ebx+34h], ebp
.text:00415E00                 xor     edx, edx
.text:00415E02                 or      esi, ecx
.text:00415E04                 mov     dword ptr [esp+8], 989680h
.text:00415E0C                 mov     ebx, [esp+3Ch]
.text:00415E10                 mov     ecx, esi
.text:00415E12                 mov     dword ptr [esp+0Ch], 0
.text:00415E1A                 or      ebx, edx
.text:00415E1C                 mov     edx, ebx
.text:00415E1E                 sub     edx, 0D53E8000h
.text:00415E24                 sbb     ecx, 19DB1DEh
.text:00415E2A                 mov     [esp+4], ecx
.text:00415E2E                 mov     [esp], edx
.text:00415E31                 call    sub_41D8D0
.text:00415E36                 mov     edx, eax
.text:00415E38                 mov     ecx, [esp+64h]
.text:00415E3C                 shr     eax, 1Fh
.text:00415E3F                 dec     eax
.text:00415E40                 and     edx, eax
.text:00415E42                 mov     [ecx+38h], edx
.text:00415E45                 mov     [esp], ebx
.text:00415E48                 mov     [esp+4], esi
.text:00415E4C                 mov     dword ptr [esp+8], 989680h
.text:00415E54                 mov     dword ptr [esp+0Ch], 0
.text:00415E5C                 call    sub_41D750
.text:00415E61                 lea     ecx, [eax+eax*4]
.text:00415E64                 lea     esi, [ecx+ecx*4]
.text:00415E67                 mov     eax, [esp+64h]
.text:00415E6B                 shl     esi, 2
.text:00415E6E                 mov     ebx, esi
.text:00415E70                 shr     ebx, 1Fh
.text:00415E73                 dec     ebx
.text:00415E74                 and     ebx, esi
.text:00415E76                 xor     esi, esi
.text:00415E78                 mov     [eax+3Ch], ebx
.text:00415E7B                 mov     edx, [esp+38h]
.text:00415E7F                 mov     dword ptr [esp+8], 989680h
.text:00415E87                 mov     ebx, [esp+34h]
.text:00415E8B                 mov     dword ptr [esp+0Ch], 0
.text:00415E93                 mov     ecx, edx
.text:00415E95                 xor     edx, edx
.text:00415E97                 or      ebx, edx
.text:00415E99                 or      esi, ecx
.text:00415E9B                 mov     edx, ebx
.text:00415E9D                 sub     edx, 0D53E8000h
.text:00415EA3                 mov     ecx, esi
.text:00415EA5                 sbb     ecx, 19DB1DEh
.text:00415EAB                 mov     [esp+4], ecx
.text:00415EAF                 mov     [esp], edx
.text:00415EB2                 call    sub_41D8D0
.text:00415EB7                 mov     edx, eax
.text:00415EB9                 mov     ecx, [esp+64h]
.text:00415EBD                 shr     eax, 1Fh
.text:00415EC0                 dec     eax
.text:00415EC1                 and     edx, eax
.text:00415EC3                 mov     [ecx+48h], edx
.text:00415EC6                 mov     [esp], ebx
.text:00415EC9                 mov     [esp+4], esi
.text:00415ECD                 mov     dword ptr [esp+8], 989680h
.text:00415ED5                 mov     dword ptr [esp+0Ch], 0
.text:00415EDD                 call    sub_41D750
.text:00415EE2                 lea     edx, [eax+eax*4]
.text:00415EE5                 mov     ebx, [esp+64h]
.text:00415EE9                 lea     ecx, [edx+edx*4]
.text:00415EEC                 shl     ecx, 2
.text:00415EEF                 mov     esi, ecx
.text:00415EF1                 shr     esi, 1Fh
.text:00415EF4                 dec     esi
.text:00415EF5                 and     esi, ecx
.text:00415EF7                 mov     [ebx+4Ch], esi
.text:00415EFA                 mov     edx, [esp+48h]
.text:00415EFE                 xor     esi, esi
.text:00415F00                 mov     dword ptr [esp+8], 989680h
.text:00415F08                 mov     ebx, [esp+44h]
.text:00415F0C                 mov     dword ptr [esp+0Ch], 0
.text:00415F14                 mov     ecx, edx
.text:00415F16                 xor     edx, edx
.text:00415F18                 or      ebx, edx
.text:00415F1A                 or      esi, ecx
.text:00415F1C                 mov     edx, ebx
.text:00415F1E                 sub     edx, 0D53E8000h
.text:00415F24                 mov     ecx, esi
.text:00415F26                 sbb     ecx, 19DB1DEh
.text:00415F2C                 mov     [esp+4], ecx
.text:00415F30                 mov     [esp], edx
.text:00415F33                 call    sub_41D8D0
.text:00415F38                 mov     edx, eax
.text:00415F3A                 mov     ecx, [esp+64h]
.text:00415F3E                 shr     eax, 1Fh
.text:00415F41                 dec     eax
.text:00415F42                 and     edx, eax
.text:00415F44                 mov     [ecx+40h], edx
.text:00415F47                 mov     [esp+4], esi
.text:00415F4B                 mov     dword ptr [esp+8], 989680h
.text:00415F53                 mov     dword ptr [esp+0Ch], 0
.text:00415F5B                 mov     [esp], ebx
.text:00415F5E                 call    sub_41D750
.text:00415F63                 lea     edx, [eax+eax*4]
.text:00415F66                 lea     esi, [edx+edx*4]
.text:00415F69                 mov     eax, [esp+64h]
.text:00415F6D                 shl     esi, 2
.text:00415F70                 mov     edx, ebp
.text:00415F72                 mov     ecx, esi
.text:00415F74                 mov     dword ptr [eax+50h], 200h
.text:00415F7B                 shr     ecx, 1Fh
.text:00415F7E                 dec     ecx
.text:00415F7F                 and     ecx, esi
.text:00415F81                 test    ebp, ebp
.text:00415F83                 mov     [eax+44h], ecx
.text:00415F86                 mov     eax, edi
.text:00415F88                 js      short loc_415FC2
.text:00415F8A
.text:00415F8A loc_415F8A:                             ; CODE XREF: .text:00415FCA↓j
.text:00415F8A                 xor     esi, esi
.text:00415F8C                 mov     ebp, edi
.text:00415F8E                 mov     ecx, eax
.text:00415F90                 shrd    ecx, edx, 9
.text:00415F94                 mov     ebx, edx
.text:00415F96                 and     ebp, 1FFh
.text:00415F9C                 mov     eax, esi
.text:00415F9E                 sar     ebx, 9
.text:00415FA1                 or      eax, ebp
.text:00415FA3                 jz      short loc_415FAB
.text:00415FA5                 add     ecx, 1
.text:00415FA8                 adc     ebx, 0
.text:00415FAB
.text:00415FAB loc_415FAB:                             ; CODE XREF: .text:00415FA3↑j
.text:00415FAB                 mov     edx, [esp+64h]
.text:00415FAF                 mov     eax, 1
.text:00415FB4                 mov     [edx+58h], ecx
.text:00415FB7                 mov     [edx+5Ch], ebx
.text:00415FBA                 add     esp, 1Ch
.text:00415FBD                 pop     ebx
.text:00415FBE                 pop     esi
.text:00415FBF                 pop     edi
.text:00415FC0                 pop     ebp
.text:00415FC1                 retn
.text:00415FC2 ; ---------------------------------------------------------------------------
.text:00415FC2
.text:00415FC2 loc_415FC2:                             ; CODE XREF: .text:00415F88↑j
.text:00415FC2                 add     eax, 1FFh
.text:00415FC7                 adc     edx, 0
.text:00415FCA                 jmp     short loc_415F8A
.text:00415FCA ; ---------------------------------------------------------------------------
.text:00415FCC                 align 10h
.text:00415FD0                 push    ebp
.text:00415FD1                 push    edi
.text:00415FD2                 xor     edi, edi
.text:00415FD4                 push    esi
.text:00415FD5                 xor     esi, esi
.text:00415FD7                 push    ebx
.text:00415FD8                 sub     esp, 0Ch
.text:00415FDB                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00415FE2                 call    LoadLibraryA
.text:00415FE7                 sub     esp, 4
.text:00415FEA                 mov     ebp, eax
.text:00415FEC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00415FF4                 mov     [esp], eax
.text:00415FF7                 call    GetProcAddress
.text:00415FFC                 sub     esp, 8
.text:00415FFF                 test    eax, eax
.text:00416001                 jz      short loc_416032
.text:00416003                 lea     ecx, [esp+8]
.text:00416007                 mov     [esp+4], ecx
.text:0041600B                 mov     ecx, [esp+20h]
.text:0041600F                 mov     [esp], ecx
.text:00416012                 call    eax
.text:00416014                 sub     esp, 8
.text:00416017                 mov     ebx, eax
.text:00416019                 cmp     eax, 0FFFFFFFFh
.text:0041601C                 jz      short loc_41604D
.text:0041601E
.text:0041601E loc_41601E:                             ; CODE XREF: .text:00416056↓j
.text:0041601E                 mov     esi, [esp+8]
.text:00416022                 mov     ecx, ebx
.text:00416024                 xor     edi, edi
.text:00416026                 xor     ebx, ebx
.text:00416028                 mov     edx, esi
.text:0041602A                 mov     esi, ecx
.text:0041602C                 or      esi, edi
.text:0041602E                 mov     edi, ebx
.text:00416030                 or      edi, edx
.text:00416032
.text:00416032 loc_416032:                             ; CODE XREF: .text:00416001↑j
.text:00416032                                         ; .text:00416054↓j
.text:00416032                 test    ebp, ebp
.text:00416034                 jz      short loc_416041
.text:00416036                 mov     [esp], ebp
.text:00416039                 call    FreeLibrary
.text:0041603E                 sub     esp, 4
.text:00416041
.text:00416041 loc_416041:                             ; CODE XREF: .text:00416034↑j
.text:00416041                 add     esp, 0Ch
.text:00416044                 mov     eax, esi
.text:00416046                 mov     edx, edi
.text:00416048                 pop     ebx
.text:00416049                 pop     esi
.text:0041604A                 pop     edi
.text:0041604B                 pop     ebp
.text:0041604C                 retn
.text:0041604D ; ---------------------------------------------------------------------------
.text:0041604D
.text:0041604D loc_41604D:                             ; CODE XREF: .text:0041601C↑j
.text:0041604D                 call    GetLastError
.text:00416052                 test    eax, eax
.text:00416054                 jnz     short loc_416032
.text:00416056                 jmp     short loc_41601E
.text:00416056 ; ---------------------------------------------------------------------------
.text:00416058                 align 10h
.text:00416060
.text:00416060 ; =============== S U B R O U T I N E =======================================
.text:00416060
.text:00416060
.text:00416060 ; int __cdecl sub_416060(LPCSTR lpFileName, int)
.text:00416060 sub_416060      proc near               ; CODE XREF: sub_4168E0-33F↓p
.text:00416060
.text:00416060 lpRootPathName  = dword ptr -8FCh
.text:00416060 lpVolumeNameBuffer= dword ptr -8F8h
.text:00416060 nVolumeNameSize = dword ptr -8F4h
.text:00416060 lpVolumeSerialNumber= dword ptr -8F0h
.text:00416060 lpMaximumComponentLength= dword ptr -8ECh
.text:00416060 lpFileSystemFlags= dword ptr -8E8h
.text:00416060 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00416060 nFileSystemNameSize= dword ptr -8E0h
.text:00416060 VolumeSerialNumber= dword ptr -8D8h
.text:00416060 MaximumComponentLength= dword ptr -8D4h
.text:00416060 FileSystemFlags = dword ptr -8D0h
.text:00416060 var_8CC         = dword ptr -8CCh
.text:00416060 var_8C8         = dword ptr -8C8h
.text:00416060 var_8C4         = dword ptr -8C4h
.text:00416060 var_8C0         = dword ptr -8C0h
.text:00416060 var_8BC         = dword ptr -8BCh
.text:00416060 var_8B8         = dword ptr -8B8h
.text:00416060 var_8B4         = dword ptr -8B4h
.text:00416060 var_8B0         = dword ptr -8B0h
.text:00416060 var_8AC         = dword ptr -8ACh
.text:00416060 var_8A8         = dword ptr -8A8h
.text:00416060 var_8A4         = dword ptr -8A4h
.text:00416060 var_8A0         = dword ptr -8A0h
.text:00416060 var_89C         = dword ptr -89Ch
.text:00416060 FileSystemNameBuffer= byte ptr -88Ch
.text:00416060 VolumeNameBuffer= byte ptr -48Ch
.text:00416060 var_8C          = dword ptr -8Ch
.text:00416060 var_88          = dword ptr -88h
.text:00416060 var_84          = dword ptr -84h
.text:00416060 var_80          = dword ptr -80h
.text:00416060 var_7C          = dword ptr -7Ch
.text:00416060 var_78          = dword ptr -78h
.text:00416060 var_74          = dword ptr -74h
.text:00416060 var_70          = dword ptr -70h
.text:00416060 var_6C          = dword ptr -6Ch
.text:00416060 var_5C          = dword ptr -5Ch
.text:00416060 var_58          = dword ptr -58h
.text:00416060 var_54          = dword ptr -54h
.text:00416060 var_50          = dword ptr -50h
.text:00416060 var_4C          = dword ptr -4Ch
.text:00416060 var_48          = dword ptr -48h
.text:00416060 var_44          = dword ptr -44h
.text:00416060 var_3C          = dword ptr -3Ch
.text:00416060 var_38          = dword ptr -38h
.text:00416060 var_34          = dword ptr -34h
.text:00416060 lpFileName      = dword ptr  4
.text:00416060 arg_4           = dword ptr  8
.text:00416060
.text:00416060                 push    ebp
.text:00416061                 xor     eax, eax
.text:00416063                 mov     ecx, 0Dh
.text:00416068                 push    edi
.text:00416069                 push    esi
.text:0041606A                 push    ebx
.text:0041606B                 sub     esp, 8ECh
.text:00416071                 lea     edi, [esp+8FCh+var_5C]
.text:00416078                 cld
.text:00416079                 lea     edx, [esp+8FCh+var_8C]
.text:00416080                 rep stosd
.text:00416082                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00416086                 lea     esi, [esp+8FCh+var_5C]
.text:0041608D                 mov     edx, [esp+8FCh+lpFileName]
.text:00416094                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00416097                 call    sub_414AC0
.text:0041609C                 test    eax, eax
.text:0041609E                 mov     edx, 0FFFFFFFFh
.text:004160A3                 jz      loc_416434
.text:004160A9                 mov     edx, [esp+8FCh+var_88]
.text:004160B0                 mov     ebp, [esp+8FCh+var_84]
.text:004160B7                 mov     edi, [esp+8FCh+var_80]
.text:004160BE                 mov     [esp+8FCh+var_58], edx
.text:004160C5                 mov     ecx, [esp+8FCh+var_7C]
.text:004160CC                 mov     ebx, [esp+8FCh+var_8C]
.text:004160D3                 mov     [esp+8FCh+var_54], ebp
.text:004160DA                 mov     edx, [esp+8FCh+var_78]
.text:004160E1                 mov     ebp, [esp+8FCh+var_74]
.text:004160E8                 mov     [esp+8FCh+var_50], edi
.text:004160EF                 test    bl, 10h
.text:004160F2                 mov     edi, [esp+8FCh+var_70]
.text:004160F9                 mov     [esp+8FCh+var_4C], ecx
.text:00416100                 mov     ecx, [esp+8FCh+var_6C]
.text:00416107                 mov     [esp+8FCh+var_5C], ebx
.text:0041610E                 mov     [esp+8FCh+var_48], edx
.text:00416115                 mov     [esp+8FCh+var_44], ebp
.text:0041611C                 mov     [esp+8FCh+var_3C], edi
.text:00416123                 mov     [esp+8FCh+var_38], ecx
.text:0041612A                 jnz     loc_416450
.text:00416130                 mov     ebx, 1
.text:00416135                 mov     [esp+8FCh+var_34], ebx
.text:0041613C
.text:0041613C loc_41613C:                             ; CODE XREF: sub_416060+406↓j
.text:0041613C                 mov     eax, [esp+8FCh+lpFileName]
.text:00416143                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00416147                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0041614B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0041614E                 call    sub_417760
.text:00416153                 mov     [esp+8FCh+lpRootPathName], eax
.text:00416156                 call    sub_416EE0
.text:0041615B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0041615F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00416163                 mov     ebp, eax
.text:00416165                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00416169                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0041616D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00416174                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00416178                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0041617C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00416180                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00416188                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00416190                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00416193                 call    GetVolumeInformationA
.text:00416198                 sub     esp, 20h
.text:0041619B                 test    eax, eax
.text:0041619D                 lea     edi, [esp+8FCh+var_8CC]
.text:004161A1                 setz    bl
.text:004161A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004161A7                 xor     ebp, ebp
.text:004161A9                 movzx   edx, bl
.text:004161AC                 dec     edx
.text:004161AD                 xor     ebx, ebx
.text:004161AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004161B3                 call    free
.text:004161B8                 cld
.text:004161B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004161BD                 mov     [esi+1Ch], ecx
.text:004161C0                 mov     ecx, 0Dh
.text:004161C5                 rep movsd
.text:004161C7                 mov     edi, [esp+8FCh+var_8A0]
.text:004161CB                 mov     edx, [esp+8FCh+var_89C]
.text:004161CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004161D3                 or      ebp, edi
.text:004161D5                 mov     esi, [esp+8FCh+var_8B0]
.text:004161D9                 mov     edi, [esp+8FCh+arg_4]
.text:004161E0                 or      edx, ebx
.text:004161E2                 mov     [edi+8], edx
.text:004161E5                 xor     edx, edx
.text:004161E7                 test    cl, 10h
.text:004161EA                 setz    dl
.text:004161ED                 mov     [edi+0Ch], ebp
.text:004161F0                 mov     [edi+10h], esi
.text:004161F3                 mov     dword ptr [edi+14h], 0
.text:004161FA                 dec     edx
.text:004161FB                 and     edx, 0FFFFC000h
.text:00416201                 add     edx, 8000h
.text:00416207                 or      edx, 124h
.text:0041620D                 test    cl, 1
.text:00416210                 movzx   eax, dx
.text:00416213                 jnz     short loc_41621A
.text:00416215                 or      eax, 92h
.text:0041621A
.text:0041621A loc_41621A:                             ; CODE XREF: sub_416060+1B3↑j
.text:0041621A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041621E                 xor     edx, edx
.text:00416220                 xor     ebp, ebp
.text:00416222                 mov     edi, [esp+8FCh+var_8AC]
.text:00416226                 mov     ecx, [esp+8FCh+arg_4]
.text:0041622D                 mov     esi, edi
.text:0041622F                 or      [ecx], eax
.text:00416231                 mov     edi, ebx
.text:00416233                 or      edi, ebp
.text:00416235                 mov     ebp, edx
.text:00416237                 mov     ebx, [esp+8FCh+var_8A4]
.text:0041623B                 or      ebp, esi
.text:0041623D                 mov     esi, [esp+8FCh+arg_4]
.text:00416244                 mov     edx, [esp+8FCh+var_8BC]
.text:00416248                 mov     [esi+18h], ebx
.text:0041624B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0041624F                 mov     ecx, edx
.text:00416251                 mov     [esi+30h], edi
.text:00416254                 xor     edx, edx
.text:00416256                 mov     [esi+34h], ebp
.text:00416259                 or      ebx, edx
.text:0041625B                 xor     esi, esi
.text:0041625D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00416265                 or      esi, ecx
.text:00416267                 mov     edx, ebx
.text:00416269                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00416271                 sub     edx, 0D53E8000h
.text:00416277                 mov     ecx, esi
.text:00416279                 sbb     ecx, 19DB1DEh
.text:0041627F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00416283                 mov     [esp+8FCh+lpRootPathName], edx
.text:00416286                 call    sub_41D8D0
.text:0041628B                 mov     edx, eax
.text:0041628D                 mov     ecx, [esp+8FCh+arg_4]
.text:00416294                 shr     eax, 1Fh
.text:00416297                 dec     eax
.text:00416298                 and     edx, eax
.text:0041629A                 mov     [ecx+38h], edx
.text:0041629D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004162A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004162A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004162AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004162B4                 call    sub_41D750
.text:004162B9                 lea     ecx, [eax+eax*4]
.text:004162BC                 lea     ebx, [ecx+ecx*4]
.text:004162BF                 mov     eax, [esp+8FCh+arg_4]
.text:004162C6                 shl     ebx, 2
.text:004162C9                 mov     esi, ebx
.text:004162CB                 shr     esi, 1Fh
.text:004162CE                 dec     esi
.text:004162CF                 and     esi, ebx
.text:004162D1                 mov     [eax+3Ch], esi
.text:004162D4                 mov     edx, [esp+8FCh+var_8C4]
.text:004162D8                 xor     esi, esi
.text:004162DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004162E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004162E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004162EE                 mov     ecx, edx
.text:004162F0                 xor     edx, edx
.text:004162F2                 or      ebx, edx
.text:004162F4                 or      esi, ecx
.text:004162F6                 mov     edx, ebx
.text:004162F8                 sub     edx, 0D53E8000h
.text:004162FE                 mov     ecx, esi
.text:00416300                 sbb     ecx, 19DB1DEh
.text:00416306                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041630A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041630D                 call    sub_41D8D0
.text:00416312                 mov     edx, eax
.text:00416314                 mov     ecx, [esp+8FCh+arg_4]
.text:0041631B                 shr     eax, 1Fh
.text:0041631E                 dec     eax
.text:0041631F                 and     edx, eax
.text:00416321                 mov     [ecx+48h], edx
.text:00416324                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00416327                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041632B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00416333                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041633B                 call    sub_41D750
.text:00416340                 lea     ecx, [eax+eax*4]
.text:00416343                 lea     ebx, [ecx+ecx*4]
.text:00416346                 mov     eax, [esp+8FCh+arg_4]
.text:0041634D                 shl     ebx, 2
.text:00416350                 mov     esi, ebx
.text:00416352                 shr     esi, 1Fh
.text:00416355                 dec     esi
.text:00416356                 and     esi, ebx
.text:00416358                 mov     [eax+4Ch], esi
.text:0041635B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041635F                 xor     esi, esi
.text:00416361                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00416369                 mov     ebx, [esp+8FCh+var_8B8]
.text:0041636D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00416375                 mov     ecx, edx
.text:00416377                 xor     edx, edx
.text:00416379                 or      ebx, edx
.text:0041637B                 or      esi, ecx
.text:0041637D                 mov     edx, ebx
.text:0041637F                 sub     edx, 0D53E8000h
.text:00416385                 mov     ecx, esi
.text:00416387                 sbb     ecx, 19DB1DEh
.text:0041638D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00416391                 mov     [esp+8FCh+lpRootPathName], edx
.text:00416394                 call    sub_41D8D0
.text:00416399                 mov     edx, eax
.text:0041639B                 mov     ecx, [esp+8FCh+arg_4]
.text:004163A2                 shr     eax, 1Fh
.text:004163A5                 dec     eax
.text:004163A6                 and     edx, eax
.text:004163A8                 mov     [ecx+40h], edx
.text:004163AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004163AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004163B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004163BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004163C2                 call    sub_41D750
.text:004163C7                 lea     ebx, [eax+eax*4]
.text:004163CA                 mov     esi, [esp+8FCh+arg_4]
.text:004163D1                 lea     edx, [ebx+ebx*4]
.text:004163D4                 shl     edx, 2
.text:004163D7                 mov     eax, edi
.text:004163D9                 mov     ecx, edx
.text:004163DB                 mov     dword ptr [esi+50h], 200h
.text:004163E2                 shr     ecx, 1Fh
.text:004163E5                 dec     ecx
.text:004163E6                 and     ecx, edx
.text:004163E8                 test    ebp, ebp
.text:004163EA                 mov     edx, ebp
.text:004163EC                 mov     [esi+44h], ecx
.text:004163EF                 js      short loc_416441
.text:004163F1
.text:004163F1 loc_4163F1:                             ; CODE XREF: sub_416060+3E9↓j
.text:004163F1                 xor     esi, esi
.text:004163F3                 mov     ebp, edi
.text:004163F5                 mov     ecx, eax
.text:004163F7                 shrd    ecx, edx, 9
.text:004163FB                 mov     ebx, edx
.text:004163FD                 and     ebp, 1FFh
.text:00416403                 mov     eax, esi
.text:00416405                 sar     ebx, 9
.text:00416408                 or      eax, ebp
.text:0041640A                 jz      short loc_416412
.text:0041640C                 add     ecx, 1
.text:0041640F                 adc     ebx, 0
.text:00416412
.text:00416412 loc_416412:                             ; CODE XREF: sub_416060+3AA↑j
.text:00416412                 mov     edx, [esp+8FCh+arg_4]
.text:00416419                 mov     [edx+5Ch], ebx
.text:0041641C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00416423                 mov     [edx+58h], ecx
.text:00416426                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041642A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041642D                 call    sub_415280
.text:00416432                 xor     edx, edx
.text:00416434
.text:00416434 loc_416434:                             ; CODE XREF: sub_416060+43↑j
.text:00416434                 add     esp, 8ECh
.text:0041643A                 mov     eax, edx
.text:0041643C                 pop     ebx
.text:0041643D                 pop     esi
.text:0041643E                 pop     edi
.text:0041643F                 pop     ebp
.text:00416440                 retn
.text:00416441 ; ---------------------------------------------------------------------------
.text:00416441
.text:00416441 loc_416441:                             ; CODE XREF: sub_416060+38F↑j
.text:00416441                 add     eax, 1FFh
.text:00416446                 adc     edx, 0
.text:00416449                 jmp     short loc_4163F1
.text:00416449 ; ---------------------------------------------------------------------------
.text:0041644B                 align 10h
.text:00416450
.text:00416450 loc_416450:                             ; CODE XREF: sub_416060+CA↑j
.text:00416450                 mov     eax, [esp+8FCh+lpFileName]
.text:00416457                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0041645A                 call    sub_414C30
.text:0041645F                 mov     [esp+8FCh+var_34], eax
.text:00416466                 jmp     loc_41613C
.text:00416466 sub_416060      endp
.text:00416466
.text:00416466 ; ---------------------------------------------------------------------------
.text:0041646B                 align 10h
.text:00416470 ; START OF FUNCTION CHUNK FOR sub_4168E0
.text:00416470
.text:00416470 loc_416470:                             ; CODE XREF: sub_4168E0+26↓j
.text:00416470                 cld
.text:00416471                 sub     esp, 2Ch
.text:00416474                 xor     eax, eax
.text:00416476                 mov     [esp+2Ch+var_10], ebx
.text:0041647A                 mov     ecx, 18h
.text:0041647F                 mov     ebx, [esp+2Ch+arg_0]
.text:00416483                 mov     [esp+2Ch+var_C], esi
.text:00416487                 mov     esi, [esp+2Ch+arg_4]
.text:0041648B                 test    ebx, ebx
.text:0041648D                 mov     [esp+2Ch+var_8], edi
.text:00416491                 mov     edi, esi
.text:00416493                 mov     [esp+2Ch+var_4], ebp
.text:00416497                 rep stosd
.text:00416499                 jz      short loc_4164A0
.text:0041649B                 cmp     byte ptr [ebx], 0
.text:0041649E                 jnz     short loc_4164B8
.text:004164A0
.text:004164A0 loc_4164A0:                             ; CODE XREF: sub_4168E0-447↑j
.text:004164A0                 xor     edx, edx
.text:004164A2
.text:004164A2 loc_4164A2:                             ; CODE XREF: sub_4168E0-411↓j
.text:004164A2                                         ; sub_4168E0-368↓j
.text:004164A2                 mov     ebx, [esp+2Ch+var_10]
.text:004164A6                 mov     eax, edx
.text:004164A8                 mov     esi, [esp+2Ch+var_C]
.text:004164AC                 mov     edi, [esp+2Ch+var_8]
.text:004164B0                 mov     ebp, [esp+2Ch+var_4]
.text:004164B4                 add     esp, 2Ch
.text:004164B7                 retn
.text:004164B8 ; ---------------------------------------------------------------------------
.text:004164B8
.text:004164B8 loc_4164B8:                             ; CODE XREF: sub_4168E0-442↑j
.text:004164B8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004164C0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004164C3                 call    sub_418EF0
.text:004164C8                 test    eax, eax
.text:004164CA                 mov     edx, 0FFFFFFFFh
.text:004164CF                 jnz     short loc_4164A2
.text:004164D1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004164D4                 call    sub_4192A0
.text:004164D9                 mov     [esp+2Ch+lpFileName], eax
.text:004164DC                 call    sub_416EE0
.text:004164E1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:004164E4                 mov     ebp, eax
.text:004164E6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:004164EE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:004164F6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:004164FE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00416506                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041650E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00416516                 call    CreateFileA
.text:0041651B                 sub     esp, 1Ch
.text:0041651E                 mov     ebx, eax
.text:00416520                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00416524                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00416527                 call    sub_414DB0
.text:0041652C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041652F                 mov     edi, eax
.text:00416531                 call    CloseHandle
.text:00416536                 sub     esp, 4
.text:00416539                 cmp     edi, 0FFFFFFFFh
.text:0041653C                 jz      short loc_41659A
.text:0041653E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00416542                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00416545                 call    sub_415280
.text:0041654A
.text:0041654A loc_41654A:                             ; CODE XREF: sub_4168E0-338↓j
.text:0041654A                 mov     edx, [esi]
.text:0041654C                 and     edx, 0F000h
.text:00416552                 cmp     edx, 4000h
.text:00416558                 jz      short loc_41658D
.text:0041655A
.text:0041655A loc_41655A:                             ; CODE XREF: sub_4168E0-348↓j
.text:0041655A                 cmp     edi, 0FFFFFFFFh
.text:0041655D                 jz      short loc_41657D
.text:0041655F
.text:0041655F loc_41655F:                             ; CODE XREF: sub_4168E0-355↓j
.text:0041655F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00416566                 call    SetErrorMode
.text:0041656B                 sub     esp, 4
.text:0041656E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00416571                 call    free
.text:00416576                 mov     edx, edi
.text:00416578                 jmp     loc_4164A2
.text:0041657D ; ---------------------------------------------------------------------------
.text:0041657D
.text:0041657D loc_41657D:                             ; CODE XREF: sub_4168E0-383↑j
.text:0041657D                 call    sub_419250
.text:00416582                 mov     esi, eax
.text:00416584                 call    _errno
.text:00416589                 mov     [eax], esi
.text:0041658B                 jmp     short loc_41655F
.text:0041658D ; ---------------------------------------------------------------------------
.text:0041658D
.text:0041658D loc_41658D:                             ; CODE XREF: sub_4168E0-388↑j
.text:0041658D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00416590                 call    sub_414C30
.text:00416595                 mov     [esi+18h], eax
.text:00416598                 jmp     short loc_41655A
.text:0041659A ; ---------------------------------------------------------------------------
.text:0041659A
.text:0041659A loc_41659A:                             ; CODE XREF: sub_4168E0-3A4↑j
.text:0041659A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0041659E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004165A1                 call    sub_416060
.text:004165A6                 mov     edi, eax
.text:004165A8                 jmp     short loc_41654A
.text:004165A8 ; END OF FUNCTION CHUNK FOR sub_4168E0
.text:004165A8 ; ---------------------------------------------------------------------------
.text:004165AA                 align 10h
.text:004165B0
.text:004165B0 ; =============== S U B R O U T I N E =======================================
.text:004165B0
.text:004165B0
.text:004165B0 ; int __cdecl sub_4165B0(LPCSTR, LPCSTR)
.text:004165B0 sub_4165B0      proc near               ; CODE XREF: sub_416790+A7↓p
.text:004165B0
.text:004165B0 lpFileName      = dword ptr -27Ch
.text:004165B0 dwDesiredAccess = dword ptr -278h
.text:004165B0 dwShareMode     = dword ptr -274h
.text:004165B0 lpSecurityAttributes= dword ptr -270h
.text:004165B0 dwCreationDisposition= dword ptr -26Ch
.text:004165B0 dwFlagsAndAttributes= dword ptr -268h
.text:004165B0 hTemplateFile   = dword ptr -264h
.text:004165B0 NumberOfBytesWritten= dword ptr -254h
.text:004165B0 Context         = dword ptr -250h
.text:004165B0 Dest            = word ptr -24Ch
.text:004165B0 Buffer          = byte ptr -3Ch
.text:004165B0 var_38          = dword ptr -38h
.text:004165B0 var_34          = dword ptr -34h
.text:004165B0 var_30          = dword ptr -30h
.text:004165B0 var_2C          = dword ptr -2Ch
.text:004165B0 arg_0           = dword ptr  4
.text:004165B0 arg_4           = dword ptr  8
.text:004165B0
.text:004165B0                 push    ebp
.text:004165B1                 push    edi
.text:004165B2                 push    esi
.text:004165B3                 push    ebx
.text:004165B4                 sub     esp, 26Ch
.text:004165BA                 mov     edx, [esp+27Ch+arg_0]
.text:004165C1                 mov     [esp+27Ch+Context], 0
.text:004165C9                 mov     [esp+27Ch+hTemplateFile], 0 ; hTemplateFile
.text:004165D1                 mov     [esp+27Ch+dwFlagsAndAttributes], 3000000h ; dwFlagsAndAttributes
.text:004165D9                 mov     [esp+27Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:004165E1                 mov     [esp+27Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:004165E9                 mov     [esp+27Ch+dwShareMode], 0 ; dwShareMode
.text:004165F1                 mov     [esp+27Ch+dwDesiredAccess], 40000000h ; dwDesiredAccess
.text:004165F9                 mov     [esp+27Ch+lpFileName], edx ; lpFileName
.text:004165FC                 call    CreateFileA
.text:00416601                 sub     esp, 1Ch
.text:00416604                 mov     ebx, eax
.text:00416606                 cmp     eax, 0FFFFFFFFh
.text:00416609                 jz      loc_416767
.text:0041660F                 mov     edx, [esp+27Ch+arg_4]
.text:00416616                 lea     esi, [esp+27Ch+Dest]
.text:0041661A                 xor     edi, edi
.text:0041661C                 mov     ebp, 5
.text:00416621                 mov     [esp+27Ch+lpFileName], edx ; LPCSTR
.text:00416624                 call    sub_4192A0
.text:00416629                 mov     [esp+27Ch+lpFileName], eax
.text:0041662C                 call    sub_416EE0
.text:00416631                 mov     [esp+27Ch+dwDesiredAccess], eax ; Source
.text:00416635                 mov     [esp+27Ch+lpFileName], esi ; Dest
.text:00416638                 mov     [esp+27Ch+dwShareMode], 104h ; MaxCount
.text:00416640                 call    mbstowcs
.text:00416645                 mov     dword ptr [esp+27Ch+Buffer], ebp
.text:0041664C                 lea     esi, [eax+eax]
.text:0041664F                 xor     eax, eax
.text:00416651                 mov     [esp+27Ch+var_2C], edi
.text:00416658                 mov     ecx, esi
.text:0041665A                 lea     ebp, [esp+27Ch+Context]
.text:0041665E                 mov     [esp+27Ch+var_38], eax
.text:00416665                 sar     ecx, 1Fh
.text:00416668                 lea     edi, [esp+27Ch+NumberOfBytesWritten]
.text:0041666C                 mov     [esp+27Ch+var_34], esi
.text:00416673                 lea     edx, [esp+27Ch+Buffer]
.text:0041667A                 mov     [esp+27Ch+var_30], ecx
.text:00416681                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00416685                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:0041668D                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:00416695                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00416699                 mov     [esp+27Ch+dwShareMode], 14h ; nNumberOfBytesToWrite
.text:004166A1                 mov     [esp+27Ch+dwDesiredAccess], edx ; lpBuffer
.text:004166A5                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:004166A8                 call    BackupWrite
.text:004166AD                 sub     esp, 1Ch
.text:004166B0                 test    eax, eax
.text:004166B2                 jz      loc_416747
.text:004166B8                 cmp     [esp+27Ch+NumberOfBytesWritten], 14h
.text:004166BD                 jnz     loc_416747
.text:004166C3                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:004166C7                 lea     ecx, [esp+27Ch+Dest]
.text:004166CB                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:004166D3                 mov     [esp+27Ch+dwCreationDisposition], 0 ; bAbort
.text:004166DB                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:004166DF                 mov     [esp+27Ch+dwShareMode], esi ; nNumberOfBytesToWrite
.text:004166E3                 mov     [esp+27Ch+dwDesiredAccess], ecx ; lpBuffer
.text:004166E7                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:004166EA                 call    BackupWrite
.text:004166EF                 sub     esp, 1Ch
.text:004166F2                 test    eax, eax
.text:004166F4                 jz      short loc_416747
.text:004166F6                 cmp     [esp+27Ch+NumberOfBytesWritten], esi
.text:004166FA                 jnz     short loc_416747
.text:004166FC                 mov     [esp+27Ch+hTemplateFile], ebp ; lpContext
.text:00416700                 mov     [esp+27Ch+dwFlagsAndAttributes], 0 ; bProcessSecurity
.text:00416708                 mov     [esp+27Ch+dwCreationDisposition], 1 ; bAbort
.text:00416710                 mov     [esp+27Ch+lpSecurityAttributes], edi ; lpNumberOfBytesWritten
.text:00416714                 mov     [esp+27Ch+dwShareMode], 0 ; nNumberOfBytesToWrite
.text:0041671C                 mov     [esp+27Ch+dwDesiredAccess], 0 ; lpBuffer
.text:00416724                 mov     [esp+27Ch+lpFileName], ebx ; hFile
.text:00416727                 call    BackupWrite
.text:0041672C                 sub     esp, 1Ch
.text:0041672F                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:00416732                 call    CloseHandle
.text:00416737                 sub     esp, 4
.text:0041673A                 xor     eax, eax
.text:0041673C
.text:0041673C loc_41673C:                             ; CODE XREF: sub_4165B0+1B5↓j
.text:0041673C                 add     esp, 26Ch
.text:00416742                 pop     ebx
.text:00416743                 pop     esi
.text:00416744                 pop     edi
.text:00416745                 pop     ebp
.text:00416746                 retn
.text:00416747 ; ---------------------------------------------------------------------------
.text:00416747
.text:00416747 loc_416747:                             ; CODE XREF: sub_4165B0+102↑j
.text:00416747                                         ; sub_4165B0+10D↑j ...
.text:00416747                 mov     [esp+27Ch+lpFileName], ebx ; hObject
.text:0041674A
.text:0041674A loc_41674A:                             ; CODE XREF: sub_4165B0+1BE↓j
.text:0041674A                 call    CloseHandle
.text:0041674F                 sub     esp, 4
.text:00416752                 call    sub_419250
.text:00416757                 mov     edi, eax
.text:00416759                 call    _errno
.text:0041675E                 mov     [eax], edi
.text:00416760                 mov     eax, 0FFFFFFFFh
.text:00416765                 jmp     short loc_41673C
.text:00416767 ; ---------------------------------------------------------------------------
.text:00416767
.text:00416767 loc_416767:                             ; CODE XREF: sub_4165B0+59↑j
.text:00416767                 mov     [esp+27Ch+lpFileName], 0FFFFFFFFh
.text:0041676E                 jmp     short loc_41674A
.text:0041676E sub_4165B0      endp
.text:0041676E
.text:0041676E ; ---------------------------------------------------------------------------
.text:00416770 ; const CHAR LibFileName[]
.text:00416770 LibFileName     db 'KERNEL32',0         ; DATA XREF: sub_416790+2C↓o
.text:00416779 ; const CHAR aCreatehardlink[]
.text:00416779 aCreatehardlink db 'CreateHardLinkA',0  ; DATA XREF: sub_416790+41↓o
.text:00416789                 align 10h
.text:00416790
.text:00416790 ; =============== S U B R O U T I N E =======================================
.text:00416790
.text:00416790
.text:00416790 ; int __cdecl sub_416790(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:00416790 sub_416790      proc near               ; CODE XREF: sub_404B50+C1C↑p
.text:00416790                                         ; sub_404B50+10D5↑p ...
.text:00416790
.text:00416790 lpLibFileName   = dword ptr -1Ch
.text:00416790 lpProcName      = dword ptr -18h
.text:00416790 bFailIfExists   = dword ptr -14h
.text:00416790 var_C           = dword ptr -0Ch
.text:00416790 var_8           = dword ptr -8
.text:00416790 var_4           = dword ptr -4
.text:00416790 lpExistingFileName= dword ptr  4
.text:00416790 lpNewFileName   = dword ptr  8
.text:00416790
.text:00416790                 sub     esp, 1Ch
.text:00416793                 mov     [esp+1Ch+var_4], edi
.text:00416797                 mov     edi, [esp+1Ch+lpExistingFileName]
.text:0041679B                 mov     [esp+1Ch+var_C], ebx
.text:0041679F                 mov     ebx, [esp+1Ch+lpNewFileName]
.text:004167A3                 test    edi, edi
.text:004167A5                 mov     [esp+1Ch+var_8], esi
.text:004167A9                 mov     esi, 0FFFFFFFFh
.text:004167AE                 jz      loc_416880
.text:004167B4                 test    ebx, ebx
.text:004167B6                 jz      loc_416880
.text:004167BC                 mov     [esp+1Ch+lpLibFileName], offset LibFileName ; "KERNEL32"
.text:004167C3                 call    LoadLibraryA
.text:004167C8                 sub     esp, 4
.text:004167CB                 xor     edx, edx
.text:004167CD                 test    eax, eax
.text:004167CF                 jz      short loc_4167E6
.text:004167D1                 mov     [esp+1Ch+lpProcName], offset aCreatehardlink ; "CreateHardLinkA"
.text:004167D9                 mov     [esp+1Ch+lpLibFileName], eax ; hModule
.text:004167DC                 call    GetProcAddress
.text:004167E1                 sub     esp, 8
.text:004167E4                 mov     edx, eax
.text:004167E6
.text:004167E6 loc_4167E6:                             ; CODE XREF: sub_416790+3F↑j
.text:004167E6                 test    edx, edx
.text:004167E8                 jz      short loc_416830
.text:004167EA                 mov     [esp+1Ch+bFailIfExists], 0
.text:004167F2                 mov     [esp+1Ch+lpProcName], edi
.text:004167F6                 mov     [esp+1Ch+lpLibFileName], ebx
.text:004167F9                 call    edx
.text:004167FB                 sub     esp, 0Ch
.text:004167FE                 test    eax, eax
.text:00416800                 jz      short loc_416822
.text:00416802                 xor     esi, esi
.text:00416804                 lea     esi, [esi+0]
.text:0041680A                 lea     edi, [edi+0]
.text:00416810
.text:00416810 loc_416810:                             ; CODE XREF: sub_416790+95↓j
.text:00416810                                         ; sub_416790+B1↓j ...
.text:00416810                 mov     eax, esi
.text:00416812
.text:00416812 loc_416812:                             ; CODE XREF: sub_416790+100↓j
.text:00416812                 mov     ebx, [esp+1Ch+var_C]
.text:00416816                 mov     esi, [esp+1Ch+var_8]
.text:0041681A                 mov     edi, [esp+1Ch+var_4]
.text:0041681E                 add     esp, 1Ch
.text:00416821                 retn
.text:00416822 ; ---------------------------------------------------------------------------
.text:00416822
.text:00416822 loc_416822:                             ; CODE XREF: sub_416790+70↑j
.text:00416822                 cmp     esi, 0FFFFFFFFh
.text:00416825                 jnz     short loc_416810
.text:00416827                 mov     esi, esi
.text:00416829                 lea     edi, [edi+0]
.text:00416830
.text:00416830 loc_416830:                             ; CODE XREF: sub_416790+58↑j
.text:00416830                 mov     [esp+1Ch+lpProcName], ebx ; LPCSTR
.text:00416834                 mov     [esp+1Ch+lpLibFileName], edi ; LPCSTR
.text:00416837                 call    sub_4165B0
.text:0041683C                 cmp     eax, 0FFFFFFFFh
.text:0041683F                 mov     esi, eax
.text:00416841                 jnz     short loc_416810
.text:00416843                 mov     [esp+1Ch+bFailIfExists], 1 ; bFailIfExists
.text:0041684B                 mov     [esp+1Ch+lpProcName], ebx ; lpNewFileName
.text:0041684F                 mov     [esp+1Ch+lpLibFileName], edi ; lpExistingFileName
.text:00416852                 call    CopyFileA
.text:00416857                 sub     esp, 0Ch
.text:0041685A                 test    eax, eax
.text:0041685C                 setnz   cl
.text:0041685F                 movzx   edx, cl
.text:00416862                 lea     esi, [edx-1]
.text:00416865                 cmp     esi, 0FFFFFFFFh
.text:00416868                 jnz     short loc_416810
.text:0041686A                 call    sub_419250
.text:0041686F                 mov     edi, eax
.text:00416871                 call    _errno
.text:00416876                 mov     [eax], edi
.text:00416878                 jmp     short loc_416810
.text:00416878 ; ---------------------------------------------------------------------------
.text:0041687A                 align 10h
.text:00416880
.text:00416880 loc_416880:                             ; CODE XREF: sub_416790+1E↑j
.text:00416880                                         ; sub_416790+26↑j
.text:00416880                 call    _errno
.text:00416885                 mov     dword ptr [eax], 16h
.text:0041688B                 mov     eax, 0FFFFFFFFh
.text:00416890                 jmp     short loc_416812
.text:00416890 sub_416790      endp
.text:00416890
.text:00416890 ; ---------------------------------------------------------------------------
.text:00416892                 align 10h
.text:004168A0                 retn
.text:004168A0 ; ---------------------------------------------------------------------------
.text:004168A1                 align 10h
.text:004168B0
.text:004168B0 ; =============== S U B R O U T I N E =======================================
.text:004168B0
.text:004168B0
.text:004168B0 sub_4168B0      proc near               ; CODE XREF: sub_404060+273↑p
.text:004168B0                                         ; sub_404B50+1A5D↑p ...
.text:004168B0
.text:004168B0 var_C           = dword ptr -0Ch
.text:004168B0 var_8           = dword ptr -8
.text:004168B0 var_4           = dword ptr -4
.text:004168B0 arg_0           = dword ptr  4
.text:004168B0 arg_4           = dword ptr  8
.text:004168B0
.text:004168B0                 sub     esp, 0Ch
.text:004168B3                 mov     edx, [esp+0Ch+arg_4]
.text:004168B7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004168BE                 mov     [esp+0Ch+var_4], edx ; int
.text:004168C2                 mov     edx, [esp+0Ch+arg_0]
.text:004168C6                 mov     [esp+0Ch+var_8], edx ; int
.text:004168CA                 call    sub_4168E0
.text:004168CF                 add     esp, 0Ch
.text:004168D2                 retn
.text:004168D2 sub_4168B0      endp
.text:004168D2
.text:004168D2 ; ---------------------------------------------------------------------------
.text:004168D3                 align 10h
.text:004168E0
.text:004168E0 ; =============== S U B R O U T I N E =======================================
.text:004168E0
.text:004168E0
.text:004168E0 ; int __cdecl sub_4168E0(LPCSTR, int, int)
.text:004168E0 sub_4168E0      proc near               ; CODE XREF: sub_4168B0+1A↑p
.text:004168E0                                         ; sub_417310+90↓p ...
.text:004168E0
.text:004168E0 lpFileName      = dword ptr -2Ch
.text:004168E0 dwDesiredAccess = dword ptr -28h
.text:004168E0 dwShareMode     = dword ptr -24h
.text:004168E0 lpSecurityAttributes= dword ptr -20h
.text:004168E0 dwCreationDisposition= dword ptr -1Ch
.text:004168E0 dwFlagsAndAttributes= dword ptr -18h
.text:004168E0 hTemplateFile   = dword ptr -14h
.text:004168E0 var_10          = dword ptr -10h
.text:004168E0 var_C           = dword ptr -0Ch
.text:004168E0 var_8           = dword ptr -8
.text:004168E0 var_4           = dword ptr -4
.text:004168E0 arg_0           = dword ptr  4
.text:004168E0 arg_4           = dword ptr  8
.text:004168E0 arg_8           = dword ptr  0Ch
.text:004168E0
.text:004168E0 ; FUNCTION CHUNK AT .text:00416470 SIZE 0000013A BYTES
.text:004168E0
.text:004168E0                 sub     esp, 0Ch
.text:004168E3                 mov     ecx, [esp+0Ch+arg_0]
.text:004168E7                 mov     edx, [esp+0Ch+arg_4]
.text:004168EB                 mov     eax, [esp+0Ch+arg_8]
.text:004168EF                 test    ecx, ecx
.text:004168F1                 jnz     short loc_416910
.text:004168F3                 test    edx, edx
.text:004168F5                 jz      short loc_416910
.text:004168F7                 test    eax, eax
.text:004168F9                 jz      short loc_416910
.text:004168FB                 mov     [esp+0Ch+arg_4], eax
.text:004168FF                 mov     [esp+0Ch+arg_0], edx
.text:00416903                 add     esp, 0Ch
.text:00416906                 jmp     loc_416470
.text:00416906 ; ---------------------------------------------------------------------------
.text:0041690B                 align 10h
.text:00416910
.text:00416910 loc_416910:                             ; CODE XREF: sub_4168E0+11↑j
.text:00416910                                         ; sub_4168E0+15↑j ...
.text:00416910                 call    _errno
.text:00416915                 mov     dword ptr [eax], 16h
.text:0041691B                 mov     eax, 0FFFFFFFFh
.text:00416920                 add     esp, 0Ch
.text:00416923                 retn
.text:00416923 sub_4168E0      endp
.text:00416923
.text:00416923 ; ---------------------------------------------------------------------------
.text:00416924                 align 10h
.text:00416930
.text:00416930 ; =============== S U B R O U T I N E =======================================
.text:00416930
.text:00416930
.text:00416930 ; int __cdecl sub_416930(LPCSTR, int AccessMode)
.text:00416930 sub_416930      proc near               ; CODE XREF: sub_404320+18E↑p
.text:00416930                                         ; sub_404B50+D01↑p ...
.text:00416930
.text:00416930 lpPathName      = dword ptr -1Ch
.text:00416930 lpSecurityAttributes= dword ptr -18h
.text:00416930 var_8           = dword ptr -8
.text:00416930 var_4           = dword ptr -4
.text:00416930 arg_0           = dword ptr  4
.text:00416930 AccessMode      = dword ptr  8
.text:00416930
.text:00416930                 sub     esp, 1Ch
.text:00416933                 mov     [esp+1Ch+var_8], ebx
.text:00416937                 mov     ebx, [esp+1Ch+arg_0]
.text:0041693B                 mov     [esp+1Ch+var_4], esi
.text:0041693F                 mov     esi, [esp+1Ch+AccessMode]
.text:00416943                 test    ebx, ebx
.text:00416945                 jz      short loc_416995
.text:00416947                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041694F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00416952                 call    CreateDirectoryA
.text:00416957                 sub     esp, 8
.text:0041695A                 test    eax, eax
.text:0041695C                 jz      short loc_416976
.text:0041695E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00416962                 mov     esi, [esp+1Ch+var_4]
.text:00416966                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0041696A                 mov     ebx, [esp+1Ch+var_8]
.text:0041696E                 add     esp, 1Ch
.text:00416971                 jmp     _chmod
.text:00416976 ; ---------------------------------------------------------------------------
.text:00416976
.text:00416976 loc_416976:                             ; CODE XREF: sub_416930+2C↑j
.text:00416976                 call    sub_419250
.text:0041697B                 mov     esi, eax
.text:0041697D                 call    _errno
.text:00416982                 mov     [eax], esi
.text:00416984
.text:00416984 loc_416984:                             ; CODE XREF: sub_416930+70↓j
.text:00416984                 mov     ebx, [esp+1Ch+var_8]
.text:00416988                 mov     eax, 0FFFFFFFFh
.text:0041698D                 mov     esi, [esp+1Ch+var_4]
.text:00416991                 add     esp, 1Ch
.text:00416994                 retn
.text:00416995 ; ---------------------------------------------------------------------------
.text:00416995
.text:00416995 loc_416995:                             ; CODE XREF: sub_416930+15↑j
.text:00416995                 call    _errno
.text:0041699A                 mov     dword ptr [eax], 16h
.text:004169A0                 jmp     short loc_416984
.text:004169A0 sub_416930      endp
.text:004169A0
.text:004169A0 ; ---------------------------------------------------------------------------
.text:004169A2                 align 10h
.text:004169B0
.text:004169B0 ; =============== S U B R O U T I N E =======================================
.text:004169B0
.text:004169B0
.text:004169B0 ; int __cdecl sub_4169B0(char *, __int16)
.text:004169B0 sub_4169B0      proc near               ; CODE XREF: sub_404B50+BC2↑p
.text:004169B0
.text:004169B0 Destination     = dword ptr -13Ch
.text:004169B0 Source          = dword ptr -138h
.text:004169B0 dwPipeMode      = dword ptr -134h
.text:004169B0 nMaxInstances   = dword ptr -130h
.text:004169B0 nOutBufferSize  = dword ptr -12Ch
.text:004169B0 nInBufferSize   = dword ptr -128h
.text:004169B0 nDefaultTimeOut = dword ptr -124h
.text:004169B0 lpSecurityAttributes= dword ptr -120h
.text:004169B0 Name            = byte ptr -11Ch
.text:004169B0 var_118         = dword ptr -118h
.text:004169B0 var_114         = word ptr -114h
.text:004169B0 var_8           = dword ptr -8
.text:004169B0 var_4           = dword ptr -4
.text:004169B0 arg_0           = dword ptr  4
.text:004169B0 arg_4           = word ptr  8
.text:004169B0
.text:004169B0                 sub     esp, 13Ch
.text:004169B6                 mov     eax, [esp+13Ch+arg_0]
.text:004169BD                 mov     [esp+13Ch+var_4], esi
.text:004169C4                 mov     [esp+13Ch+var_8], ebx
.text:004169CB                 test    eax, eax
.text:004169CD                 movzx   esi, [esp+13Ch+arg_4]
.text:004169D5                 jz      loc_416A7D
.text:004169DB                 mov     dword ptr [esp+13Ch+Name], 5C2E5C5Ch
.text:004169E3                 lea     ebx, [esp+13Ch+Name]
.text:004169E7                 mov     [esp+13Ch+var_118], 65706970h
.text:004169EF                 mov     [esp+13Ch+var_114], 5Ch ; '\'
.text:004169F6                 mov     [esp+13Ch+Source], eax ; Source
.text:004169FA                 mov     [esp+13Ch+Destination], ebx ; Destination
.text:004169FD                 call    strcat
.text:00416A02                 mov     [esp+13Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00416A0A                 mov     [esp+13Ch+nDefaultTimeOut], 1388h ; nDefaultTimeOut
.text:00416A12                 mov     [esp+13Ch+nInBufferSize], 400h ; nInBufferSize
.text:00416A1A                 mov     [esp+13Ch+nOutBufferSize], 400h ; nOutBufferSize
.text:00416A22                 mov     [esp+13Ch+nMaxInstances], 0FFh ; nMaxInstances
.text:00416A2A                 mov     [esp+13Ch+dwPipeMode], 6 ; dwPipeMode
.text:00416A32                 mov     [esp+13Ch+Source], 3 ; dwOpenMode
.text:00416A3A                 mov     [esp+13Ch+Destination], ebx ; lpName
.text:00416A3D                 call    CreateNamedPipeA
.text:00416A42                 sub     esp, 20h
.text:00416A45                 cmp     eax, 0FFFFFFFFh
.text:00416A48                 jz      short loc_416A6B
.text:00416A4A                 mov     [esp+13Ch+Source], esi ; Flags
.text:00416A4E                 mov     [esp+13Ch+Destination], eax ; OSFileHandle
.text:00416A51                 call    _open_osfhandle
.text:00416A56
.text:00416A56 loc_416A56:                             ; CODE XREF: sub_4169B0+CB↓j
.text:00416A56                 mov     ebx, [esp+13Ch+var_8]
.text:00416A5D                 mov     esi, [esp+13Ch+var_4]
.text:00416A64                 add     esp, 13Ch
.text:00416A6A                 retn
.text:00416A6B ; ---------------------------------------------------------------------------
.text:00416A6B
.text:00416A6B loc_416A6B:                             ; CODE XREF: sub_4169B0+98↑j
.text:00416A6B                 call    _errno
.text:00416A70                 mov     dword ptr [eax], 9
.text:00416A76
.text:00416A76 loc_416A76:                             ; CODE XREF: sub_4169B0+D8↓j
.text:00416A76                 mov     eax, 0FFFFFFFFh
.text:00416A7B                 jmp     short loc_416A56
.text:00416A7D ; ---------------------------------------------------------------------------
.text:00416A7D
.text:00416A7D loc_416A7D:                             ; CODE XREF: sub_4169B0+25↑j
.text:00416A7D                 call    _errno
.text:00416A82                 mov     dword ptr [eax], 16h
.text:00416A88                 jmp     short loc_416A76
.text:00416A88 sub_4169B0      endp
.text:00416A88
.text:00416A88 ; ---------------------------------------------------------------------------
.text:00416A8A                 align 10h
.text:00416A90
.text:00416A90 ; =============== S U B R O U T I N E =======================================
.text:00416A90
.text:00416A90 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00416A90
.text:00416A90 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00416A90 _win32_longpath proc near               ; CODE XREF: .text:00417254↓p
.text:00416A90
.text:00416A90 C               = dword ptr -278h
.text:00416A90 lpFindFileData  = dword ptr -274h
.text:00416A90 Destination     = byte ptr -268h
.text:00416A90 var_267         = byte ptr -267h
.text:00416A90 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00416A90 lpFileName      = dword ptr  8
.text:00416A90
.text:00416A90                 push    ebp
.text:00416A91                 xor     eax, eax
.text:00416A93                 push    edi
.text:00416A94                 push    esi
.text:00416A95                 push    ebx
.text:00416A96                 sub     esp, 26Ch
.text:00416A9C                 mov     esi, [esp+278h+lpFileName]
.text:00416AA3                 lea     ebp, [esp+278h+Destination]
.text:00416AA7                 test    esi, esi
.text:00416AA9                 jz      loc_416C07
.text:00416AAF                 movsx   edx, byte ptr [esi]
.text:00416AB2                 mov     [esp+278h+C], edx ; C
.text:00416AB5                 call    isalpha
.text:00416ABA                 test    eax, eax
.text:00416ABC                 jz      short loc_416ACF
.text:00416ABE                 mov     eax, [esp+278h+lpFileName]
.text:00416AC5                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00416AC9                 jz      loc_416E0B
.text:00416ACF
.text:00416ACF loc_416ACF:                             ; CODE XREF: _win32_longpath+2C↑j
.text:00416ACF                 mov     edx, [esp+278h+lpFileName]
.text:00416AD6                 movzx   eax, byte ptr [edx]
.text:00416AD9                 cmp     al, 2Fh ; '/'
.text:00416ADB                 jz      loc_416CEB
.text:00416AE1                 cmp     al, 5Ch ; '\'
.text:00416AE3                 jz      loc_416CEB
.text:00416AE9
.text:00416AE9 loc_416AE9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00416AE9                                         ; _win32_longpath+2B1↓j ...
.text:00416AE9                 mov     [ebp+268h+Destination], 0
.text:00416AED                 movzx   ebx, byte ptr [esi]
.text:00416AF0                 test    bl, bl
.text:00416AF2                 jz      loc_416BE9
.text:00416AF8                 nop
.text:00416AF9                 lea     esi, [esi+0]
.text:00416B00
.text:00416B00 loc_416B00:                             ; CODE XREF: _win32_longpath+153↓j
.text:00416B00                 cmp     bl, 2Fh ; '/'
.text:00416B03                 jz      loc_416CA0
.text:00416B09                 cmp     bl, 5Ch ; '\'
.text:00416B0C                 jz      loc_416CA0
.text:00416B12
.text:00416B12 loc_416B12:                             ; CODE XREF: _win32_longpath+21E↓j
.text:00416B12                                         ; _win32_longpath+22C↓j ...
.text:00416B12                 cmp     bl, 2Eh ; '.'
.text:00416B15                 jz      loc_416C40
.text:00416B1B
.text:00416B1B loc_416B1B:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:00416B1B                                         ; _win32_longpath+203↓j
.text:00416B1B                 test    bl, bl
.text:00416B1D                 jz      loc_416BE9
.text:00416B23                 cmp     bl, 2Fh ; '/'
.text:00416B26                 jz      short loc_416B42
.text:00416B28                 cmp     bl, 5Ch ; '\'
.text:00416B2B                 jz      short loc_416B42
.text:00416B2D                 lea     esi, [esi+0]
.text:00416B30
.text:00416B30 loc_416B30:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00416B30                 inc     esi
.text:00416B31                 movzx   ebx, byte ptr [esi]
.text:00416B34                 test    bl, bl
.text:00416B36                 jz      short loc_416B42
.text:00416B38                 cmp     bl, 2Fh ; '/'
.text:00416B3B                 jz      short loc_416B42
.text:00416B3D                 cmp     bl, 5Ch ; '\'
.text:00416B40                 jnz     short loc_416B30
.text:00416B42
.text:00416B42 loc_416B42:                             ; CODE XREF: _win32_longpath+96↑j
.text:00416B42                                         ; _win32_longpath+9B↑j ...
.text:00416B42                 mov     byte ptr [esi], 0
.text:00416B45                 lea     edx, [esp+278h+FindFileData]
.text:00416B4C                 mov     eax, [esp+278h+lpFileName]
.text:00416B53                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00416B57                 mov     [esp+278h+C], eax ; lpFileName
.text:00416B5A                 call    FindFirstFileA
.text:00416B5F                 mov     [esi], bl
.text:00416B61                 sub     esp, 8
.text:00416B64                 mov     edi, eax
.text:00416B66                 cmp     eax, 0FFFFFFFFh
.text:00416B69                 jz      loc_416C2C
.text:00416B6F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00416B76                 mov     ecx, ebx
.text:00416B78                 nop
.text:00416B79                 lea     esi, [esi+0]
.text:00416B80
.text:00416B80 loc_416B80:                             ; CODE XREF: _win32_longpath+105↓j
.text:00416B80                 mov     eax, [ebx]
.text:00416B82                 add     ebx, 4
.text:00416B85                 lea     edx, [eax-1010101h]
.text:00416B8B                 not     eax
.text:00416B8D                 and     edx, eax
.text:00416B8F                 and     edx, 80808080h
.text:00416B95                 jz      short loc_416B80
.text:00416B97                 test    edx, 8080h
.text:00416B9D                 jnz     short loc_416BA5
.text:00416B9F                 shr     edx, 10h
.text:00416BA2                 add     ebx, 2
.text:00416BA5
.text:00416BA5 loc_416BA5:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00416BA5                 add     dl, dl
.text:00416BA7                 sbb     ebx, 3
.text:00416BAA                 sub     ebx, ecx
.text:00416BAC                 lea     ecx, [esp+278h+Destination]
.text:00416BB0                 sub     ecx, ebp
.text:00416BB2                 add     ecx, 105h
.text:00416BB8                 cmp     ecx, ebx
.text:00416BBA                 jle     short loc_416C12
.text:00416BBC                 mov     [esp+278h+C], ebp ; Destination
.text:00416BBF                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00416BC6                 add     ebp, ebx
.text:00416BC8                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00416BCC                 call    strcpy
.text:00416BD1                 mov     [esp+278h+C], edi ; hFindFile
.text:00416BD4                 call    FindClose
.text:00416BD9                 sub     esp, 4
.text:00416BDC
.text:00416BDC loc_416BDC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00416BDC                 movzx   ecx, byte ptr [esi]
.text:00416BDF                 test    cl, cl
.text:00416BE1                 mov     bl, cl
.text:00416BE3                 jnz     loc_416B00
.text:00416BE9
.text:00416BE9 loc_416BE9:                             ; CODE XREF: _win32_longpath+62↑j
.text:00416BE9                                         ; _win32_longpath+8D↑j
.text:00416BE9                 mov     esi, [esp+278h+lpFileName]
.text:00416BF0                 lea     ebp, [esp+278h+Destination]
.text:00416BF4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00416BF8                 mov     [esp+278h+C], esi ; Destination
.text:00416BFB                 call    strcpy
.text:00416C00                 mov     eax, [esp+278h+lpFileName]
.text:00416C07
.text:00416C07 loc_416C07:                             ; CODE XREF: _win32_longpath+19↑j
.text:00416C07                                         ; _win32_longpath+19A↓j
.text:00416C07                 add     esp, 26Ch
.text:00416C0D                 pop     ebx
.text:00416C0E                 pop     esi
.text:00416C0F                 pop     edi
.text:00416C10                 pop     ebp
.text:00416C11                 retn
.text:00416C12 ; ---------------------------------------------------------------------------
.text:00416C12
.text:00416C12 loc_416C12:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00416C12                 mov     [esp+278h+C], edi ; hFindFile
.text:00416C15                 call    FindClose
.text:00416C1A                 sub     esp, 4
.text:00416C1D                 call    _errno
.text:00416C22                 mov     dword ptr [eax], 22h ; '"'
.text:00416C28
.text:00416C28 loc_416C28:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00416C28                 xor     eax, eax
.text:00416C2A                 jmp     short loc_416C07
.text:00416C2C ; ---------------------------------------------------------------------------
.text:00416C2C
.text:00416C2C loc_416C2C:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00416C2C                 call    _errno
.text:00416C31                 mov     dword ptr [eax], 16h
.text:00416C37                 jmp     short loc_416C28
.text:00416C37 ; ---------------------------------------------------------------------------
.text:00416C39                 align 10h
.text:00416C40
.text:00416C40 loc_416C40:                             ; CODE XREF: _win32_longpath+85↑j
.text:00416C40                 movzx   eax, byte ptr [esi+1]
.text:00416C44                 test    al, al
.text:00416C46                 jnz     short loc_416C75
.text:00416C48
.text:00416C48 loc_416C48:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00416C48                                         ; _win32_longpath+1EB↓j ...
.text:00416C48                 test    bl, bl
.text:00416C4A                 jz      short loc_416C6C
.text:00416C4C                 cmp     bl, 2Fh ; '/'
.text:00416C4F                 jz      short loc_416C6C
.text:00416C51                 cmp     bl, 5Ch ; '\'
.text:00416C54                 jz      short loc_416C6C
.text:00416C56
.text:00416C56 loc_416C56:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00416C56                 mov     [ebp+268h+Destination], bl
.text:00416C59                 inc     esi
.text:00416C5A                 inc     ebp
.text:00416C5B                 movzx   ebx, byte ptr [esi]
.text:00416C5E                 test    bl, bl
.text:00416C60                 jz      short loc_416C6C
.text:00416C62                 cmp     bl, 2Fh ; '/'
.text:00416C65                 jz      short loc_416C6C
.text:00416C67                 cmp     bl, 5Ch ; '\'
.text:00416C6A                 jnz     short loc_416C56
.text:00416C6C
.text:00416C6C loc_416C6C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00416C6C                                         ; _win32_longpath+1BF↑j ...
.text:00416C6C                 mov     [ebp+268h+Destination], 0
.text:00416C70                 jmp     loc_416BDC
.text:00416C75 ; ---------------------------------------------------------------------------
.text:00416C75
.text:00416C75 loc_416C75:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00416C75                 cmp     al, 2Fh ; '/'
.text:00416C77                 jz      short loc_416C48
.text:00416C79                 cmp     al, 5Ch ; '\'
.text:00416C7B                 jz      short loc_416C48
.text:00416C7D                 cmp     al, 2Eh ; '.'
.text:00416C7F                 jnz     loc_416B1B
.text:00416C85                 movzx   eax, byte ptr [esi+2]
.text:00416C89                 test    al, al
.text:00416C8B                 jz      short loc_416C48
.text:00416C8D                 cmp     al, 2Fh ; '/'
.text:00416C8F                 jz      short loc_416C48
.text:00416C91                 cmp     al, 5Ch ; '\'
.text:00416C93                 jnz     loc_416B1B
.text:00416C99                 jmp     short loc_416C48
.text:00416C99 ; ---------------------------------------------------------------------------
.text:00416C9B                 align 10h
.text:00416CA0
.text:00416CA0 loc_416CA0:                             ; CODE XREF: _win32_longpath+73↑j
.text:00416CA0                                         ; _win32_longpath+7C↑j
.text:00416CA0                 mov     [ebp+268h+Destination], bl
.text:00416CA3                 inc     esi
.text:00416CA4                 inc     ebp
.text:00416CA5                 mov     [ebp+268h+Destination], 0
.text:00416CA9                 movzx   ebx, byte ptr [esi]
.text:00416CAC                 test    bl, bl
.text:00416CAE                 jz      loc_416B12
.text:00416CB4                 cmp     bl, 2Fh ; '/'
.text:00416CB7                 jz      short loc_416CD0
.text:00416CB9                 cmp     bl, 5Ch ; '\'
.text:00416CBC                 jnz     loc_416B12
.text:00416CC2                 lea     esi, [esi+0]
.text:00416CC9                 lea     edi, [edi+0]
.text:00416CD0
.text:00416CD0 loc_416CD0:                             ; CODE XREF: _win32_longpath+227↑j
.text:00416CD0                                         ; _win32_longpath+24F↓j ...
.text:00416CD0                 inc     esi
.text:00416CD1                 movzx   ebx, byte ptr [esi]
.text:00416CD4                 test    bl, bl
.text:00416CD6                 jz      loc_416B12
.text:00416CDC                 cmp     bl, 2Fh ; '/'
.text:00416CDF                 jz      short loc_416CD0
.text:00416CE1                 cmp     bl, 5Ch ; '\'
.text:00416CE4                 jz      short loc_416CD0
.text:00416CE6                 jmp     loc_416B12
.text:00416CEB ; ---------------------------------------------------------------------------
.text:00416CEB
.text:00416CEB loc_416CEB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00416CEB                                         ; _win32_longpath+53↑j
.text:00416CEB                 mov     edi, [esp+278h+lpFileName]
.text:00416CF2                 movzx   edx, byte ptr [edi+1]
.text:00416CF6                 cmp     dl, 2Fh ; '/'
.text:00416CF9                 jz      short loc_416D04
.text:00416CFB                 cmp     dl, 5Ch ; '\'
.text:00416CFE                 jnz     loc_416AE9
.text:00416D04
.text:00416D04 loc_416D04:                             ; CODE XREF: _win32_longpath+269↑j
.text:00416D04                 mov     esi, [esp+278h+lpFileName]
.text:00416D0B                 mov     [ebp+268h+Destination], al
.text:00416D0E                 mov     ecx, [esp+278h+lpFileName]
.text:00416D15                 inc     ebp
.text:00416D16                 add     esi, 2
.text:00416D19                 movzx   ebx, byte ptr [ecx+1]
.text:00416D1D                 mov     [ebp+268h+Destination], bl
.text:00416D20                 inc     ebp
.text:00416D21                 movzx   eax, byte ptr [ecx+2]
.text:00416D25                 test    al, al
.text:00416D27                 jz      loc_416E03
.text:00416D2D                 cmp     al, 2Fh ; '/'
.text:00416D2F                 jz      loc_416DE8
.text:00416D35                 cmp     al, 5Ch ; '\'
.text:00416D37                 mov     bl, al
.text:00416D39                 jz      loc_416DE8
.text:00416D3F
.text:00416D3F loc_416D3F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00416D3F                                         ; _win32_longpath+376↓j
.text:00416D3F                 test    bl, bl
.text:00416D41                 jz      loc_416AE9
.text:00416D47                 cmp     bl, 2Fh ; '/'
.text:00416D4A                 jz      short loc_416D6B
.text:00416D4C                 cmp     bl, 5Ch ; '\'
.text:00416D4F                 jz      short loc_416D6B
.text:00416D51
.text:00416D51 loc_416D51:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00416D51                 mov     [ebp+268h+Destination], bl
.text:00416D54                 inc     esi
.text:00416D55                 inc     ebp
.text:00416D56                 movzx   ebx, byte ptr [esi]
.text:00416D59                 test    bl, bl
.text:00416D5B                 jz      loc_416AE9
.text:00416D61                 cmp     bl, 2Fh ; '/'
.text:00416D64                 jz      short loc_416D6B
.text:00416D66                 cmp     bl, 5Ch ; '\'
.text:00416D69                 jnz     short loc_416D51
.text:00416D6B
.text:00416D6B loc_416D6B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00416D6B                                         ; _win32_longpath+2BF↑j ...
.text:00416D6B                 test    bl, bl
.text:00416D6D                 jz      loc_416AE9
.text:00416D73                 mov     [ebp+268h+Destination], bl
.text:00416D76                 inc     esi
.text:00416D77                 inc     ebp
.text:00416D78                 movzx   ebx, byte ptr [esi]
.text:00416D7B                 test    bl, bl
.text:00416D7D                 jz      loc_416AE9
.text:00416D83                 cmp     bl, 2Fh ; '/'
.text:00416D86                 jz      short loc_416DD0
.text:00416D88                 cmp     bl, 5Ch ; '\'
.text:00416D8B                 jz      short loc_416DD0
.text:00416D8D
.text:00416D8D loc_416D8D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00416D8D                 test    bl, bl
.text:00416D8F                 jz      loc_416AE9
.text:00416D95                 cmp     bl, 2Fh ; '/'
.text:00416D98                 jz      loc_416AE9
.text:00416D9E                 cmp     bl, 5Ch ; '\'
.text:00416DA1                 jz      loc_416AE9
.text:00416DA7
.text:00416DA7 loc_416DA7:                             ; CODE XREF: _win32_longpath+333↓j
.text:00416DA7                 mov     [ebp+268h+Destination], bl
.text:00416DAA                 inc     esi
.text:00416DAB                 inc     ebp
.text:00416DAC                 movzx   ebx, byte ptr [esi]
.text:00416DAF                 test    bl, bl
.text:00416DB1                 jz      loc_416AE9
.text:00416DB7                 cmp     bl, 2Fh ; '/'
.text:00416DBA                 jz      loc_416AE9
.text:00416DC0                 cmp     bl, 5Ch ; '\'
.text:00416DC3                 jnz     short loc_416DA7
.text:00416DC5                 jmp     loc_416AE9
.text:00416DC5 ; ---------------------------------------------------------------------------
.text:00416DCA                 align 10h
.text:00416DD0
.text:00416DD0 loc_416DD0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00416DD0                                         ; _win32_longpath+2FB↑j ...
.text:00416DD0                 inc     esi
.text:00416DD1                 movzx   ebx, byte ptr [esi]
.text:00416DD4                 test    bl, bl
.text:00416DD6                 jz      loc_416AE9
.text:00416DDC                 cmp     bl, 2Fh ; '/'
.text:00416DDF                 jz      short loc_416DD0
.text:00416DE1                 cmp     bl, 5Ch ; '\'
.text:00416DE4                 jz      short loc_416DD0
.text:00416DE6                 jmp     short loc_416D8D
.text:00416DE8 ; ---------------------------------------------------------------------------
.text:00416DE8
.text:00416DE8 loc_416DE8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00416DE8                                         ; _win32_longpath+2A9↑j ...
.text:00416DE8                 inc     esi
.text:00416DE9                 movzx   ebx, byte ptr [esi]
.text:00416DEC                 test    bl, bl
.text:00416DEE                 jz      loc_416AE9
.text:00416DF4                 cmp     bl, 2Fh ; '/'
.text:00416DF7                 jz      short loc_416DE8
.text:00416DF9                 cmp     bl, 5Ch ; '\'
.text:00416DFC                 jz      short loc_416DE8
.text:00416DFE                 jmp     loc_416D3F
.text:00416E03 ; ---------------------------------------------------------------------------
.text:00416E03
.text:00416E03 loc_416E03:                             ; CODE XREF: _win32_longpath+297↑j
.text:00416E03                 movzx   ebx, byte ptr [esi]
.text:00416E06                 jmp     loc_416D3F
.text:00416E0B ; ---------------------------------------------------------------------------
.text:00416E0B
.text:00416E0B loc_416E0B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00416E0B                 movzx   ecx, byte ptr [eax]
.text:00416E0E                 mov     esi, eax
.text:00416E10                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00416E15                 add     esi, 2
.text:00416E18                 lea     ebp, [esp+12h]
.text:00416E1C                 mov     [esp+278h+Destination], cl
.text:00416E20                 jmp     loc_416AE9
.text:00416E20 _win32_longpath endp
.text:00416E20
.text:00416E20 ; ---------------------------------------------------------------------------
.text:00416E25                 align 10h
.text:00416E30                 sub     esp, 0Ch
.text:00416E33                 mov     edx, [esp+10h]
.text:00416E37                 mov     dword ptr [esp+4], 0
.text:00416E3F                 mov     [esp], edx
.text:00416E42                 call    sub_418EF0
.text:00416E47                 inc     eax
.text:00416E48                 setnz   dl
.text:00416E4B                 add     esp, 0Ch
.text:00416E4E                 movzx   eax, dl
.text:00416E51                 retn
.text:00416E51 ; ---------------------------------------------------------------------------
.text:00416E52                 align 10h
.text:00416E60
.text:00416E60 ; =============== S U B R O U T I N E =======================================
.text:00416E60
.text:00416E60
.text:00416E60 sub_416E60      proc near               ; CODE XREF: sub_417670+B4↓p
.text:00416E60                                         ; sub_418610+CE↓p ...
.text:00416E60
.text:00416E60 arg_0           = dword ptr  4
.text:00416E60
.text:00416E60                 mov     ecx, [esp+arg_0]
.text:00416E64                 mov     edx, ecx
.text:00416E66                 movzx   eax, byte ptr [ecx]
.text:00416E69                 test    al, al
.text:00416E6B                 jz      short loc_416E7C
.text:00416E6D                 lea     esi, [esi+0]
.text:00416E70
.text:00416E70 loc_416E70:                             ; CODE XREF: sub_416E60+1A↓j
.text:00416E70                 cmp     al, 5Ch ; '\'
.text:00416E72                 jz      short loc_416E80
.text:00416E74
.text:00416E74 loc_416E74:                             ; CODE XREF: sub_416E60+23↓j
.text:00416E74                 inc     edx
.text:00416E75                 movzx   eax, byte ptr [edx]
.text:00416E78                 test    al, al
.text:00416E7A                 jnz     short loc_416E70
.text:00416E7C
.text:00416E7C loc_416E7C:                             ; CODE XREF: sub_416E60+B↑j
.text:00416E7C                 mov     eax, ecx
.text:00416E7E                 retn
.text:00416E7E ; ---------------------------------------------------------------------------
.text:00416E7F                 align 10h
.text:00416E80
.text:00416E80 loc_416E80:                             ; CODE XREF: sub_416E60+12↑j
.text:00416E80                 mov     byte ptr [edx], 2Fh ; '/'
.text:00416E83                 jmp     short loc_416E74
.text:00416E83 sub_416E60      endp
.text:00416E83
.text:00416E83 ; ---------------------------------------------------------------------------
.text:00416E85                 align 10h
.text:00416E90                 push    ebx
.text:00416E91                 sub     esp, 8
.text:00416E94                 mov     ebx, [esp+14h]
.text:00416E98                 mov     edx, [esp+10h]
.text:00416E9C                 mov     [esp], ebx
.text:00416E9F                 mov     [esp+4], edx
.text:00416EA3                 call    strcpy
.text:00416EA8                 movzx   eax, byte ptr [ebx]
.text:00416EAB                 mov     edx, ebx
.text:00416EAD                 test    al, al
.text:00416EAF                 jz      short loc_416ECC
.text:00416EB1                 jmp     short loc_416EC0
.text:00416EB1 ; ---------------------------------------------------------------------------
.text:00416EB3                 align 10h
.text:00416EC0
.text:00416EC0 loc_416EC0:                             ; CODE XREF: .text:00416EB1↑j
.text:00416EC0                                         ; .text:00416ECA↓j
.text:00416EC0                 cmp     al, 5Ch ; '\'
.text:00416EC2                 jz      short loc_416ED3
.text:00416EC4
.text:00416EC4 loc_416EC4:                             ; CODE XREF: .text:00416ED6↓j
.text:00416EC4                 inc     edx
.text:00416EC5                 movzx   eax, byte ptr [edx]
.text:00416EC8                 test    al, al
.text:00416ECA                 jnz     short loc_416EC0
.text:00416ECC
.text:00416ECC loc_416ECC:                             ; CODE XREF: .text:00416EAF↑j
.text:00416ECC                 add     esp, 8
.text:00416ECF                 xor     eax, eax
.text:00416ED1                 pop     ebx
.text:00416ED2                 retn
.text:00416ED3 ; ---------------------------------------------------------------------------
.text:00416ED3
.text:00416ED3 loc_416ED3:                             ; CODE XREF: .text:00416EC2↑j
.text:00416ED3                 mov     byte ptr [edx], 2Fh ; '/'
.text:00416ED6                 jmp     short loc_416EC4
.text:00416ED6 ; ---------------------------------------------------------------------------
.text:00416ED8                 align 10h
.text:00416EE0
.text:00416EE0 ; =============== S U B R O U T I N E =======================================
.text:00416EE0
.text:00416EE0
.text:00416EE0 sub_416EE0      proc near               ; CODE XREF: sub_415280+16↑p
.text:00416EE0                                         ; sub_415780+1F↑p ...
.text:00416EE0
.text:00416EE0 arg_0           = dword ptr  4
.text:00416EE0
.text:00416EE0                 mov     ecx, [esp+arg_0]
.text:00416EE4                 mov     edx, ecx
.text:00416EE6                 movzx   eax, byte ptr [ecx]
.text:00416EE9                 test    al, al
.text:00416EEB                 jz      short loc_416EFC
.text:00416EED                 lea     esi, [esi+0]
.text:00416EF0
.text:00416EF0 loc_416EF0:                             ; CODE XREF: sub_416EE0+1A↓j
.text:00416EF0                 cmp     al, 2Fh ; '/'
.text:00416EF2                 jz      short loc_416F00
.text:00416EF4
.text:00416EF4 loc_416EF4:                             ; CODE XREF: sub_416EE0+23↓j
.text:00416EF4                 inc     edx
.text:00416EF5                 movzx   eax, byte ptr [edx]
.text:00416EF8                 test    al, al
.text:00416EFA                 jnz     short loc_416EF0
.text:00416EFC
.text:00416EFC loc_416EFC:                             ; CODE XREF: sub_416EE0+B↑j
.text:00416EFC                 mov     eax, ecx
.text:00416EFE                 retn
.text:00416EFE ; ---------------------------------------------------------------------------
.text:00416EFF                 align 10h
.text:00416F00
.text:00416F00 loc_416F00:                             ; CODE XREF: sub_416EE0+12↑j
.text:00416F00                 mov     byte ptr [edx], 5Ch ; '\'
.text:00416F03                 jmp     short loc_416EF4
.text:00416F03 sub_416EE0      endp
.text:00416F03
.text:00416F03 ; ---------------------------------------------------------------------------
.text:00416F05                 align 10h
.text:00416F10                 push    ebx
.text:00416F11                 sub     esp, 8
.text:00416F14                 mov     ebx, [esp+14h]
.text:00416F18                 mov     edx, [esp+10h]
.text:00416F1C                 mov     [esp], ebx
.text:00416F1F                 mov     [esp+4], edx
.text:00416F23                 call    strcpy
.text:00416F28                 movzx   eax, byte ptr [ebx]
.text:00416F2B                 mov     edx, ebx
.text:00416F2D                 test    al, al
.text:00416F2F                 jz      short loc_416F4C
.text:00416F31                 jmp     short loc_416F40
.text:00416F31 ; ---------------------------------------------------------------------------
.text:00416F33                 align 10h
.text:00416F40
.text:00416F40 loc_416F40:                             ; CODE XREF: .text:00416F31↑j
.text:00416F40                                         ; .text:00416F4A↓j
.text:00416F40                 cmp     al, 2Fh ; '/'
.text:00416F42                 jz      short loc_416F53
.text:00416F44
.text:00416F44 loc_416F44:                             ; CODE XREF: .text:00416F56↓j
.text:00416F44                 inc     edx
.text:00416F45                 movzx   eax, byte ptr [edx]
.text:00416F48                 test    al, al
.text:00416F4A                 jnz     short loc_416F40
.text:00416F4C
.text:00416F4C loc_416F4C:                             ; CODE XREF: .text:00416F2F↑j
.text:00416F4C                 add     esp, 8
.text:00416F4F                 xor     eax, eax
.text:00416F51                 pop     ebx
.text:00416F52                 retn
.text:00416F53 ; ---------------------------------------------------------------------------
.text:00416F53
.text:00416F53 loc_416F53:                             ; CODE XREF: .text:00416F42↑j
.text:00416F53                 mov     byte ptr [edx], 5Ch ; '\'
.text:00416F56                 jmp     short loc_416F44
.text:00416F56 ; ---------------------------------------------------------------------------
.text:00416F58                 align 10h
.text:00416F60                 push    ebx
.text:00416F61                 sub     esp, 8
.text:00416F64                 mov     ebx, [esp+14h]
.text:00416F68                 mov     edx, [esp+10h]
.text:00416F6C                 mov     [esp+4], ebx
.text:00416F70                 mov     [esp], edx
.text:00416F73                 call    sub_419270
.text:00416F78                 movzx   eax, byte ptr [ebx]
.text:00416F7B                 mov     edx, ebx
.text:00416F7D                 test    al, al
.text:00416F7F                 jz      short loc_416F9C
.text:00416F81                 jmp     short loc_416F90
.text:00416F81 ; ---------------------------------------------------------------------------
.text:00416F83                 align 10h
.text:00416F90
.text:00416F90 loc_416F90:                             ; CODE XREF: .text:00416F81↑j
.text:00416F90                                         ; .text:00416F9A↓j
.text:00416F90                 cmp     al, 2Fh ; '/'
.text:00416F92                 jz      short loc_416FA3
.text:00416F94
.text:00416F94 loc_416F94:                             ; CODE XREF: .text:00416FA6↓j
.text:00416F94                 inc     edx
.text:00416F95                 movzx   eax, byte ptr [edx]
.text:00416F98                 test    al, al
.text:00416F9A                 jnz     short loc_416F90
.text:00416F9C
.text:00416F9C loc_416F9C:                             ; CODE XREF: .text:00416F7F↑j
.text:00416F9C                 add     esp, 8
.text:00416F9F                 xor     eax, eax
.text:00416FA1                 pop     ebx
.text:00416FA2                 retn
.text:00416FA3 ; ---------------------------------------------------------------------------
.text:00416FA3
.text:00416FA3 loc_416FA3:                             ; CODE XREF: .text:00416F92↑j
.text:00416FA3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00416FA6                 jmp     short loc_416F94
.text:00416FA6 ; ---------------------------------------------------------------------------
.text:00416FA8                 align 10h
.text:00416FB0                 push    ebx
.text:00416FB1                 sub     esp, 8
.text:00416FB4                 mov     ebx, [esp+14h]
.text:00416FB8                 mov     edx, [esp+10h]
.text:00416FBC                 mov     [esp], ebx
.text:00416FBF                 mov     [esp+4], edx
.text:00416FC3                 call    sub_419270
.text:00416FC8                 movzx   eax, byte ptr [ebx]
.text:00416FCB                 mov     edx, ebx
.text:00416FCD                 test    al, al
.text:00416FCF                 jz      short loc_416FEC
.text:00416FD1                 jmp     short loc_416FE0
.text:00416FD1 ; ---------------------------------------------------------------------------
.text:00416FD3                 align 10h
.text:00416FE0
.text:00416FE0 loc_416FE0:                             ; CODE XREF: .text:00416FD1↑j
.text:00416FE0                                         ; .text:00416FEA↓j
.text:00416FE0                 cmp     al, 5Ch ; '\'
.text:00416FE2                 jz      short loc_416FF1
.text:00416FE4
.text:00416FE4 loc_416FE4:                             ; CODE XREF: .text:00416FF4↓j
.text:00416FE4                 inc     edx
.text:00416FE5                 movzx   eax, byte ptr [edx]
.text:00416FE8                 test    al, al
.text:00416FEA                 jnz     short loc_416FE0
.text:00416FEC
.text:00416FEC loc_416FEC:                             ; CODE XREF: .text:00416FCF↑j
.text:00416FEC                 add     esp, 8
.text:00416FEF                 pop     ebx
.text:00416FF0                 retn
.text:00416FF1 ; ---------------------------------------------------------------------------
.text:00416FF1
.text:00416FF1 loc_416FF1:                             ; CODE XREF: .text:00416FE2↑j
.text:00416FF1                 mov     byte ptr [edx], 2Fh ; '/'
.text:00416FF4                 jmp     short loc_416FE4
.text:00416FF4 ; ---------------------------------------------------------------------------
.text:00416FF6                 align 10h
.text:00417000
.text:00417000 ; =============== S U B R O U T I N E =======================================
.text:00417000
.text:00417000
.text:00417000 ; int __cdecl sub_417000(LPSTR)
.text:00417000 sub_417000      proc near               ; CODE XREF: .text:0041708E↓p
.text:00417000                                         ; .text:004170CE↓p ...
.text:00417000
.text:00417000 hModule         = dword ptr -1Ch
.text:00417000 lpFilename      = dword ptr -18h
.text:00417000 nSize           = dword ptr -14h
.text:00417000 arg_0           = dword ptr  4
.text:00417000
.text:00417000                 push    esi
.text:00417001                 push    ebx
.text:00417002                 sub     esp, 14h
.text:00417005                 mov     esi, [esp+1Ch+arg_0]
.text:00417009                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00417011                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00417018                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:0041701C                 call    GetModuleFileNameA
.text:00417021                 sub     esp, 0Ch
.text:00417024                 test    eax, eax
.text:00417026                 jz      short loc_417068
.text:00417028                 cmp     eax, 104h
.text:0041702D                 jg      short loc_417059
.text:0041702F
.text:0041702F loc_41702F:                             ; CODE XREF: sub_417000+66↓j
.text:0041702F                                         ; sub_417000+78↓j
.text:0041702F                 movzx   eax, byte ptr [esi]
.text:00417032                 mov     edx, esi
.text:00417034                 test    al, al
.text:00417036                 jz      short loc_41704C
.text:00417038                 nop
.text:00417039                 lea     esi, [esi+0]
.text:00417040
.text:00417040 loc_417040:                             ; CODE XREF: sub_417000+4A↓j
.text:00417040                 cmp     al, 5Ch ; '\'
.text:00417042                 jz      short loc_417054
.text:00417044
.text:00417044 loc_417044:                             ; CODE XREF: sub_417000+57↓j
.text:00417044                 inc     edx
.text:00417045                 movzx   eax, byte ptr [edx]
.text:00417048                 test    al, al
.text:0041704A                 jnz     short loc_417040
.text:0041704C
.text:0041704C loc_41704C:                             ; CODE XREF: sub_417000+36↑j
.text:0041704C                 add     esp, 14h
.text:0041704F                 mov     eax, esi
.text:00417051                 pop     ebx
.text:00417052                 pop     esi
.text:00417053                 retn
.text:00417054 ; ---------------------------------------------------------------------------
.text:00417054
.text:00417054 loc_417054:                             ; CODE XREF: sub_417000+42↑j
.text:00417054                 mov     byte ptr [edx], 2Fh ; '/'
.text:00417057                 jmp     short loc_417044
.text:00417059 ; ---------------------------------------------------------------------------
.text:00417059
.text:00417059 loc_417059:                             ; CODE XREF: sub_417000+2D↑j
.text:00417059                 call    _errno
.text:0041705E                 mov     dword ptr [eax], 26h ; '&'
.text:00417064                 xor     esi, esi
.text:00417066                 jmp     short loc_41702F
.text:00417068 ; ---------------------------------------------------------------------------
.text:00417068
.text:00417068 loc_417068:                             ; CODE XREF: sub_417000+26↑j
.text:00417068                 call    sub_419250
.text:0041706D                 mov     ebx, eax
.text:0041706F                 xor     esi, esi
.text:00417071                 call    _errno
.text:00417076                 mov     [eax], ebx
.text:00417078                 jmp     short loc_41702F
.text:00417078 sub_417000      endp
.text:00417078
.text:00417078 ; ---------------------------------------------------------------------------
.text:0041707A                 align 10h
.text:00417080                 sub     esp, 0Ch
.text:00417083                 mov     [esp+8], ebx
.text:00417087                 mov     ebx, [esp+10h]
.text:0041708B                 mov     [esp], ebx
.text:0041708E                 call    sub_417000
.text:00417093                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041709B                 mov     [esp], ebx
.text:0041709E                 call    strrchr
.text:004170A3                 test    eax, eax
.text:004170A5                 jz      short loc_4170AA
.text:004170A7                 lea     ebx, [eax+1]
.text:004170AA
.text:004170AA loc_4170AA:                             ; CODE XREF: .text:004170A5↑j
.text:004170AA                 mov     eax, ebx
.text:004170AC                 mov     ebx, [esp+8]
.text:004170B0                 add     esp, 0Ch
.text:004170B3                 retn
.text:004170B3 ; ---------------------------------------------------------------------------
.text:004170B4                 align 10h
.text:004170C0                 sub     esp, 0Ch
.text:004170C3                 mov     [esp+8], ebx
.text:004170C7                 mov     ebx, [esp+10h]
.text:004170CB                 mov     [esp], ebx
.text:004170CE                 call    sub_417000
.text:004170D3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:004170DB                 mov     [esp], ebx
.text:004170DE                 call    strrchr
.text:004170E3                 test    eax, eax
.text:004170E5                 jz      short loc_4170EA
.text:004170E7                 mov     byte ptr [eax], 0
.text:004170EA
.text:004170EA loc_4170EA:                             ; CODE XREF: .text:004170E5↑j
.text:004170EA                 mov     eax, ebx
.text:004170EC                 mov     ebx, [esp+8]
.text:004170F0                 add     esp, 0Ch
.text:004170F3                 retn
.text:004170F3 ; ---------------------------------------------------------------------------
.text:004170F4                 align 10h
.text:00417100                 sub     esp, 0Ch
.text:00417103                 mov     [esp+8], ebx
.text:00417107                 mov     ebx, [esp+10h]
.text:0041710B                 mov     [esp], ebx
.text:0041710E                 call    sub_417000
.text:00417113                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:0041711B                 mov     [esp], ebx
.text:0041711E                 call    strrchr
.text:00417123                 test    eax, eax
.text:00417125                 jz      short loc_41712A
.text:00417127                 mov     byte ptr [eax], 0
.text:0041712A
.text:0041712A loc_41712A:                             ; CODE XREF: .text:00417125↑j
.text:0041712A                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00417132                 mov     [esp], ebx
.text:00417135                 call    strrchr
.text:0041713A                 test    eax, eax
.text:0041713C                 jz      short loc_417141
.text:0041713E                 mov     byte ptr [eax], 0
.text:00417141
.text:00417141 loc_417141:                             ; CODE XREF: .text:0041713C↑j
.text:00417141                 mov     eax, ebx
.text:00417143                 mov     ebx, [esp+8]
.text:00417147                 add     esp, 0Ch
.text:0041714A                 retn
.text:0041714A ; ---------------------------------------------------------------------------
.text:0041714B                 align 10h
.text:00417150                 sub     esp, 1Ch
.text:00417153                 mov     edx, [esp+20h]
.text:00417157                 mov     [esp+10h], ebx
.text:0041715B                 xor     ebx, ebx
.text:0041715D                 mov     [esp+14h], esi
.text:00417161                 mov     [esp+18h], edi
.text:00417165                 mov     [esp], edx
.text:00417168                 call    sub_4192A0
.text:0041716D                 mov     edx, [esp+24h]
.text:00417171                 mov     edi, eax
.text:00417173                 mov     [esp], edx
.text:00417176                 call    sub_4192A0
.text:0041717B                 mov     [esp+4], eax
.text:0041717F                 mov     esi, eax
.text:00417181                 mov     [esp], edi
.text:00417184                 call    _stricmp_0
.text:00417189                 mov     [esp], edi
.text:0041718C                 test    eax, eax
.text:0041718E                 setz    bl
.text:00417191                 call    free
.text:00417196                 mov     [esp], esi
.text:00417199                 call    free
.text:0041719E                 mov     eax, ebx
.text:004171A0                 mov     esi, [esp+14h]
.text:004171A4                 mov     ebx, [esp+10h]
.text:004171A8                 mov     edi, [esp+18h]
.text:004171AC                 add     esp, 1Ch
.text:004171AF                 retn
.text:004171B0 ; ---------------------------------------------------------------------------
.text:004171B0                 xor     eax, eax
.text:004171B2                 retn
.text:004171B2 ; ---------------------------------------------------------------------------
.text:004171B3 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:004171E7↓o
.text:004171C0 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:004171F6↓o
.text:004171D0 ; ---------------------------------------------------------------------------
.text:004171D0                 sub     esp, 1Ch
.text:004171D3                 mov     [esp+10h], ebx
.text:004171D7                 mov     ebx, [esp+20h]
.text:004171DB                 mov     [esp+18h], edi
.text:004171DF                 mov     edi, [esp+24h]
.text:004171E3                 mov     [esp+14h], esi
.text:004171E7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:004171EE                 call    GetModuleHandleA
.text:004171F3                 sub     esp, 4
.text:004171F6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:004171FE                 mov     [esp], eax
.text:00417201                 call    GetProcAddress
.text:00417206                 sub     esp, 8
.text:00417209                 test    eax, eax
.text:0041720B                 jz      short loc_417223
.text:0041720D                 mov     dword ptr [esp+8], 104h
.text:00417215                 mov     [esp+4], ebx
.text:00417219                 mov     [esp], edi
.text:0041721C                 call    eax
.text:0041721E                 sub     esp, 0Ch
.text:00417221                 mov     esi, eax
.text:00417223
.text:00417223 loc_417223:                             ; CODE XREF: .text:0041720B↑j
.text:00417223                 test    esi, esi
.text:00417225                 jz      short loc_417240
.text:00417227
.text:00417227 loc_417227:                             ; CODE XREF: .text:0041725B↓j
.text:00417227                 mov     eax, ebx
.text:00417229                 mov     esi, [esp+14h]
.text:0041722D                 mov     ebx, [esp+10h]
.text:00417231                 mov     edi, [esp+18h]
.text:00417235                 add     esp, 1Ch
.text:00417238                 retn
.text:00417238 ; ---------------------------------------------------------------------------
.text:00417239                 align 10h
.text:00417240
.text:00417240 loc_417240:                             ; CODE XREF: .text:00417225↑j
.text:00417240                 call    sub_419C60
.text:00417245                 mov     [esp], ebx
.text:00417248                 mov     [esp+4], edi
.text:0041724C                 call    strcpy
.text:00417251                 mov     [esp], ebx
.text:00417254                 call    _win32_longpath
.text:00417259                 mov     ebx, eax
.text:0041725B                 jmp     short loc_417227
.text:0041725B ; ---------------------------------------------------------------------------
.text:0041725D                 align 10h
.text:00417260                 sub     esp, 1Ch
.text:00417263                 mov     [esp+18h], edi
.text:00417267                 mov     edi, [esp+20h]
.text:0041726B                 mov     [esp+10h], ebx
.text:0041726F                 mov     [esp+14h], esi
.text:00417273                 mov     dword ptr [esp+8], 0
.text:0041727B                 mov     dword ptr [esp+4], 0
.text:00417283                 mov     [esp], edi
.text:00417286                 call    GetShortPathNameA
.text:0041728B                 sub     esp, 0Ch
.text:0041728E                 mov     ebx, eax
.text:00417290                 test    eax, eax
.text:00417292                 jz      short loc_4172E0
.text:00417294                 lea     edx, [eax+1]
.text:00417297                 mov     [esp], edx
.text:0041729A                 call    malloc
.text:0041729F                 test    eax, eax
.text:004172A1                 mov     esi, eax
.text:004172A3                 jz      short loc_4172E0
.text:004172A5                 mov     [esp+8], ebx
.text:004172A9                 mov     [esp+4], eax
.text:004172AD                 mov     [esp], edi
.text:004172B0                 call    GetShortPathNameA
.text:004172B5                 sub     esp, 0Ch
.text:004172B8                 mov     edx, esi
.text:004172BA                 test    eax, eax
.text:004172BC                 jz      short loc_4172D2
.text:004172BE                 mov     esi, esi
.text:004172C0
.text:004172C0 loc_4172C0:                             ; CODE XREF: .text:004172F0↓j
.text:004172C0                 mov     ebx, [esp+10h]
.text:004172C4                 mov     eax, edx
.text:004172C6                 mov     esi, [esp+14h]
.text:004172CA                 mov     edi, [esp+18h]
.text:004172CE                 add     esp, 1Ch
.text:004172D1                 retn
.text:004172D2 ; ---------------------------------------------------------------------------
.text:004172D2
.text:004172D2 loc_4172D2:                             ; CODE XREF: .text:004172BC↑j
.text:004172D2                 mov     [esp], esi
.text:004172D5                 call    free
.text:004172DA                 lea     esi, [esi+0]
.text:004172E0
.text:004172E0 loc_4172E0:                             ; CODE XREF: .text:00417292↑j
.text:004172E0                                         ; .text:004172A3↑j
.text:004172E0                 call    sub_419250
.text:004172E5                 mov     esi, eax
.text:004172E7                 call    _errno
.text:004172EC                 mov     [eax], esi
.text:004172EE                 mov     edx, edi
.text:004172F0                 jmp     short loc_4172C0
.text:004172F0 ; ---------------------------------------------------------------------------
.text:004172F2                 align 10h
.text:00417300
.text:00417300 ; =============== S U B R O U T I N E =======================================
.text:00417300
.text:00417300
.text:00417300 sub_417300      proc near               ; DATA XREF: sub_417310+186↓o
.text:00417300                 sub     al, [eax]
.text:00417302                 lea     esi, [esi+0]
.text:00417309                 lea     edi, [edi+0]
.text:00417309 sub_417300      endp
.text:00417309
.text:00417310
.text:00417310 ; =============== S U B R O U T I N E =======================================
.text:00417310
.text:00417310
.text:00417310 sub_417310      proc near               ; CODE XREF: sub_409E20+87↑p
.text:00417310                                         ; .text:0040C0E7↑p
.text:00417310
.text:00417310 hFindFile       = dword ptr -2DCh
.text:00417310 lpFindFileData  = dword ptr -2D8h
.text:00417310 Count           = dword ptr -2D4h
.text:00417310 Destination     = byte ptr -2CCh
.text:00417310 var_1BC         = dword ptr -1BCh
.text:00417310 var_1B4         = dword ptr -1B4h
.text:00417310 var_1B0         = dword ptr -1B0h
.text:00417310 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00417310 arg_0           = dword ptr  4
.text:00417310
.text:00417310                 push    ebp
.text:00417311                 push    edi
.text:00417312                 push    esi
.text:00417313                 push    ebx
.text:00417314                 sub     esp, 2CCh
.text:0041731A                 mov     ebp, [esp+2DCh+arg_0]
.text:00417321                 test    ebp, ebp
.text:00417323                 mov     ebx, [ebp+4]
.text:00417326                 jz      loc_4174DD
.text:0041732C                 mov     edx, [ebp+0]
.text:0041732F                 cmp     edx, 0FFFFFFFFh
.text:00417332                 jz      loc_417467
.text:00417338                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0041733B                 lea     ecx, [esp+2DCh+FindFileData]
.text:00417342                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:00417346                 call    FindNextFileA
.text:0041734B                 sub     esp, 8
.text:0041734E                 test    eax, eax
.text:00417350                 jz      loc_41745B
.text:00417356
.text:00417356 loc_417356:                             ; CODE XREF: sub_417310+1BC↓j
.text:00417356                 mov     [esp+2DCh+Count], 104h ; Count
.text:0041735E                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:00417365                 mov     esi, [ebx]
.text:00417367                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:0041736B                 lea     esi, [ebx+14h]
.text:0041736E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00417371                 call    strncpy
.text:00417376                 mov     [esp+2DCh+Count], 104h ; Count
.text:0041737E                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00417382                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00417385                 call    strncat
.text:0041738A                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:0041738E                 lea     edx, [esp+2DCh+var_1BC]
.text:00417395                 mov     [esp+2DCh+Count], edx ; int
.text:00417399                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:004173A0                 call    sub_4168E0
.text:004173A5                 test    eax, eax
.text:004173A7                 jnz     loc_417449
.text:004173AD                 mov     ecx, [esp+2DCh+var_1BC]
.text:004173B4                 and     ecx, 0F000h
.text:004173BA                 shr     ecx, 0Ch
.text:004173BD                 mov     [ebx+12h], cl
.text:004173C0                 mov     ecx, edi
.text:004173C2                 lea     esi, [esi+0]
.text:004173C9                 lea     edi, [edi+0]
.text:004173D0
.text:004173D0 loc_4173D0:                             ; CODE XREF: sub_417310+D5↓j
.text:004173D0                 mov     eax, [ecx]
.text:004173D2                 add     ecx, 4
.text:004173D5                 lea     edx, [eax-1010101h]
.text:004173DB                 not     eax
.text:004173DD                 and     edx, eax
.text:004173DF                 and     edx, 80808080h
.text:004173E5                 jz      short loc_4173D0
.text:004173E7                 test    edx, 8080h
.text:004173ED                 jnz     short loc_4173F5
.text:004173EF                 shr     edx, 10h
.text:004173F2                 add     ecx, 2
.text:004173F5
.text:004173F5 loc_4173F5:                             ; CODE XREF: sub_417310+DD↑j
.text:004173F5                 mov     word ptr [ebx+10h], 110h
.text:004173FB                 add     dl, dl
.text:004173FD                 sbb     ecx, 3
.text:00417400                 sub     ecx, edi
.text:00417402                 mov     [ebx+13h], cl
.text:00417405                 mov     edx, [esp+2DCh+var_1B4]
.text:0041740C                 mov     ecx, [esp+2DCh+var_1B0]
.text:00417413                 mov     [ebx+8], edx
.text:00417416                 mov     [ebx+0Ch], ecx
.text:00417419                 mov     [esp+2DCh+Count], 104h ; Count
.text:00417421                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00417425                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00417428                 call    strncpy
.text:0041742D                 inc     dword ptr [ebp+14h]
.text:00417430                 call    _errno
.text:00417435                 mov     dword ptr [eax], 0
.text:0041743B                 lea     eax, [ebx+8]
.text:0041743E
.text:0041743E loc_41743E:                             ; CODE XREF: sub_417310+149↓j
.text:0041743E                 add     esp, 2CCh
.text:00417444                 pop     ebx
.text:00417445                 pop     esi
.text:00417446                 pop     edi
.text:00417447                 pop     ebp
.text:00417448                 retn
.text:00417449 ; ---------------------------------------------------------------------------
.text:00417449
.text:00417449 loc_417449:                             ; CODE XREF: sub_417310+97↑j
.text:00417449                                         ; sub_417310+153↓j ...
.text:00417449                 call    sub_419250
.text:0041744E                 mov     ebp, eax
.text:00417450                 call    _errno
.text:00417455                 mov     [eax], ebp
.text:00417457
.text:00417457 loc_417457:                             ; CODE XREF: sub_417310+155↓j
.text:00417457                                         ; sub_417310+1D8↓j
.text:00417457                 xor     eax, eax
.text:00417459                 jmp     short loc_41743E
.text:0041745B ; ---------------------------------------------------------------------------
.text:0041745B
.text:0041745B loc_41745B:                             ; CODE XREF: sub_417310+40↑j
.text:0041745B                 call    GetLastError
.text:00417460                 cmp     eax, 12h
.text:00417463                 jnz     short loc_417449
.text:00417465                 jmp     short loc_417457
.text:00417467 ; ---------------------------------------------------------------------------
.text:00417467
.text:00417467 loc_417467:                             ; CODE XREF: sub_417310+22↑j
.text:00417467                 mov     edx, [ebx]
.text:00417469                 lea     esi, [esp+2DCh+Destination]
.text:0041746D                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00417470                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:00417474                 call    strcpy
.text:00417479                 mov     ecx, esi
.text:0041747B                 nop
.text:0041747C                 lea     esi, [esi+0]
.text:00417480
.text:00417480 loc_417480:                             ; CODE XREF: sub_417310+184↓j
.text:00417480                 mov     edi, [ecx]
.text:00417482                 add     ecx, 4
.text:00417485                 lea     eax, [edi-1010101h]
.text:0041748B                 not     edi
.text:0041748D                 and     eax, edi
.text:0041748F                 test    eax, 80808080h
.text:00417494                 jz      short loc_417480
.text:00417496                 mov     [esp+2DCh+lpFindFileData], offset sub_417300 ; Source
.text:0041749E                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004174A1                 call    strcat
.text:004174A6                 mov     [esp+2DCh+hFindFile], esi
.text:004174A9                 call    sub_416EE0
.text:004174AE                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:004174B1                 lea     edx, [esp+2DCh+FindFileData]
.text:004174B8                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:004174BC                 call    FindFirstFileA
.text:004174C1                 sub     esp, 8
.text:004174C4                 cmp     eax, 0FFFFFFFFh
.text:004174C7                 jz      short loc_4174D1
.text:004174C9                 mov     [ebp+0], eax
.text:004174CC                 jmp     loc_417356
.text:004174D1 ; ---------------------------------------------------------------------------
.text:004174D1
.text:004174D1 loc_4174D1:                             ; CODE XREF: sub_417310+1B7↑j
.text:004174D1                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:004174D8                 jmp     loc_417449
.text:004174DD ; ---------------------------------------------------------------------------
.text:004174DD
.text:004174DD loc_4174DD:                             ; CODE XREF: sub_417310+16↑j
.text:004174DD                 call    _errno
.text:004174E2                 mov     dword ptr [eax], 9
.text:004174E8                 jmp     loc_417457
.text:004174E8 sub_417310      endp
.text:004174E8
.text:004174E8 ; ---------------------------------------------------------------------------
.text:004174ED                 align 10h
.text:004174F0
.text:004174F0 ; =============== S U B R O U T I N E =======================================
.text:004174F0
.text:004174F0
.text:004174F0 ; int __cdecl sub_4174F0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004174F0 sub_4174F0      proc near               ; CODE XREF: sub_417670+93↓p
.text:004174F0
.text:004174F0 pvReserved      = dword ptr -35Ch
.text:004174F0 pUnkOuter       = dword ptr -358h
.text:004174F0 dwClsContext    = dword ptr -354h
.text:004174F0 riid            = dword ptr -350h
.text:004174F0 ppv             = dword ptr -34Ch
.text:004174F0 cchWideChar     = dword ptr -348h
.text:004174F0 var_334         = byte ptr -334h
.text:004174F0 var_330         = dword ptr -330h
.text:004174F0 String2         = byte ptr -32Ch
.text:004174F0 WideCharStr     = word ptr -21Ch
.text:004174F0 lpMultiByteStr  = dword ptr  4
.text:004174F0 lpString1       = dword ptr  8
.text:004174F0
.text:004174F0                 push    edi
.text:004174F1                 push    esi
.text:004174F2                 push    ebx
.text:004174F3                 sub     esp, 350h
.text:004174F9                 mov     edi, [esp+35Ch+lpString1]
.text:00417500                 mov     byte ptr [edi], 0
.text:00417503                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0041750A                 call    OleInitialize
.text:0041750F                 sub     esp, 4
.text:00417512                 cmp     eax, 1
.text:00417515                 ja      loc_41764F
.text:0041751B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00417523                 lea     ecx, [esp+35Ch+var_330]
.text:00417527                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0041752B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00417533                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0041753B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00417542                 call    CoCreateInstance
.text:00417547                 sub     esp, 14h
.text:0041754A                 test    eax, eax
.text:0041754C                 js      loc_41764F
.text:00417552                 mov     ebx, [esp+35Ch+var_330]
.text:00417556                 lea     edx, [esp+35Ch+var_334]
.text:0041755A                 mov     esi, [ebx]
.text:0041755C                 mov     [esp+35Ch+dwClsContext], edx
.text:00417560                 mov     [esp+35Ch+pvReserved], ebx
.text:00417563                 xor     ebx, ebx
.text:00417565                 mov     [esp+35Ch+pUnkOuter], offset dword_41CEE0
.text:0041756D                 call    dword ptr [esi]
.text:0041756F                 sub     esp, 0Ch
.text:00417572                 lea     esi, [esp+35Ch+WideCharStr]
.text:00417579                 call    AreFileApisANSI
.text:0041757E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00417586                 test    eax, eax
.text:00417588                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041758F                 setz    bl
.text:00417592                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00417596                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041759E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:004175A2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:004175AA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:004175AD                 call    MultiByteToWideChar
.text:004175B2                 sub     esp, 18h
.text:004175B5                 test    eax, eax
.text:004175B7                 js      loc_41764F
.text:004175BD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:004175C1                 mov     ebx, [edx]
.text:004175C3                 mov     [esp+35Ch+dwClsContext], 0
.text:004175CB                 mov     [esp+35Ch+pUnkOuter], esi
.text:004175CF                 mov     [esp+35Ch+pvReserved], edx
.text:004175D2                 call    dword ptr [ebx+14h]
.text:004175D5                 sub     esp, 0Ch
.text:004175D8                 test    eax, eax
.text:004175DA                 js      short loc_41764F
.text:004175DC                 mov     ebx, [esp+35Ch+var_330]
.text:004175E0                 lea     esi, [esp+35Ch+String2]
.text:004175E4                 mov     ecx, [ebx]
.text:004175E6                 mov     [esp+35Ch+pvReserved], ebx
.text:004175E9                 mov     [esp+35Ch+ppv], 0
.text:004175F1                 mov     [esp+35Ch+riid], 0
.text:004175F9                 mov     [esp+35Ch+dwClsContext], 104h
.text:00417601                 mov     [esp+35Ch+pUnkOuter], esi
.text:00417605                 call    dword ptr [ecx+0Ch]
.text:00417608                 sub     esp, 14h
.text:0041760B                 mov     ebx, eax
.text:0041760D                 test    eax, eax
.text:0041760F                 js      short loc_41764F
.text:00417611                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:00417615                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:00417618                 call    lstrcpyA
.text:0041761D                 sub     esp, 8
.text:00417620                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00417624                 mov     ecx, [edi]
.text:00417626                 mov     [esp+35Ch+pvReserved], edi
.text:00417629                 call    dword ptr [ecx+8]
.text:0041762C                 sub     esp, 4
.text:0041762F                 mov     edx, [esp+35Ch+var_330]
.text:00417633                 mov     esi, [edx]
.text:00417635                 mov     [esp+35Ch+pvReserved], edx
.text:00417638                 call    dword ptr [esi+8]
.text:0041763B                 sub     esp, 4
.text:0041763E                 call    CoUninitialize
.text:00417643                 mov     eax, ebx
.text:00417645
.text:00417645 loc_417645:                             ; CODE XREF: sub_4174F0+177↓j
.text:00417645                 add     esp, 350h
.text:0041764B                 pop     ebx
.text:0041764C                 pop     esi
.text:0041764D                 pop     edi
.text:0041764E                 retn
.text:0041764F ; ---------------------------------------------------------------------------
.text:0041764F
.text:0041764F loc_41764F:                             ; CODE XREF: sub_4174F0+25↑j
.text:0041764F                                         ; sub_4174F0+5C↑j ...
.text:0041764F                 call    sub_419250
.text:00417654                 mov     edi, eax
.text:00417656                 call    _errno
.text:0041765B                 mov     [eax], edi
.text:0041765D                 call    CoUninitialize
.text:00417662                 mov     eax, 0FFFFFFFFh
.text:00417667                 jmp     short loc_417645
.text:00417667 sub_4174F0      endp
.text:00417667
.text:00417667 ; ---------------------------------------------------------------------------
.text:00417669 ; const char aLnk_0[]
.text:00417669 aLnk_0          db '.lnk',0             ; DATA XREF: sub_417670+53↓o
.text:00417669                                         ; sub_417670:loc_4176D5↓o
.text:0041766E                 align 10h
.text:00417670
.text:00417670 ; =============== S U B R O U T I N E =======================================
.text:00417670
.text:00417670
.text:00417670 ; int __cdecl sub_417670(char *, LPSTR lpString1)
.text:00417670 sub_417670      proc near               ; CODE XREF: sub_40AF40+35↑p
.text:00417670                                         ; sub_4187E0+4C↓p ...
.text:00417670
.text:00417670 Str             = dword ptr -1Ch
.text:00417670 Source          = dword ptr -18h
.text:00417670 Destination     = dword ptr -14h
.text:00417670 arg_0           = dword ptr  4
.text:00417670 lpString1       = dword ptr  8
.text:00417670
.text:00417670                 push    ebp
.text:00417671                 push    edi
.text:00417672                 push    esi
.text:00417673                 push    ebx
.text:00417674                 sub     esp, 0Ch
.text:00417677                 mov     ebx, [esp+1Ch+arg_0]
.text:0041767B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041767F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00417682                 call    strlen
.text:00417687                 add     eax, 5
.text:0041768A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041768D                 call    malloc
.text:00417692                 mov     [esp+1Ch+Destination], eax
.text:00417696                 test    eax, eax
.text:00417698                 jz      loc_417740
.text:0041769E                 mov     [esp+1Ch+Source], ebx ; Source
.text:004176A2                 mov     [esp+1Ch+Str], eax ; Destination
.text:004176A5                 call    strcpy
.text:004176AA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:004176B2                 mov     eax, [esp+1Ch+Destination]
.text:004176B6                 mov     [esp+1Ch+Str], eax ; Str
.text:004176B9                 call    strrchr
.text:004176BE                 test    eax, eax
.text:004176C0                 jz      short loc_4176D5
.text:004176C2                 cld
.text:004176C3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:004176C8                 mov     ecx, 5
.text:004176CD                 mov     esi, eax
.text:004176CF                 mov     edi, ebx
.text:004176D1                 repe cmpsb
.text:004176D3                 jz      short loc_4176E9
.text:004176D5
.text:004176D5 loc_4176D5:                             ; CODE XREF: sub_417670+50↑j
.text:004176D5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:004176DD                 mov     edx, [esp+1Ch+Destination]
.text:004176E1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004176E4                 call    strcat
.text:004176E9
.text:004176E9 loc_4176E9:                             ; CODE XREF: sub_417670+63↑j
.text:004176E9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004176F0                 call    SetErrorMode
.text:004176F5                 sub     esp, 4
.text:004176F8                 mov     ebx, [esp+1Ch+Destination]
.text:004176FC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:00417700                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:00417703                 call    sub_4174F0
.text:00417708                 mov     [esp+1Ch+Str], ebx ; Block
.text:0041770B                 mov     esi, eax
.text:0041770D                 call    free
.text:00417712                 mov     [esp+1Ch+Str], 0 ; uMode
.text:00417719                 call    SetErrorMode
.text:0041771E                 sub     esp, 4
.text:00417721                 mov     [esp+1Ch+Str], ebp
.text:00417724                 call    sub_416E60
.text:00417729                 inc     esi
.text:0041772A                 jz      short loc_417740
.text:0041772C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00417730                 add     esp, 0Ch
.text:00417733                 pop     ebx
.text:00417734                 pop     esi
.text:00417735                 pop     edi
.text:00417736                 pop     ebp
.text:00417737                 jmp     strlen
.text:00417737 ; ---------------------------------------------------------------------------
.text:0041773C                 align 10h
.text:00417740
.text:00417740 loc_417740:                             ; CODE XREF: sub_417670+28↑j
.text:00417740                                         ; sub_417670+BA↑j
.text:00417740                 add     esp, 0Ch
.text:00417743                 mov     eax, 0FFFFFFFFh
.text:00417748                 pop     ebx
.text:00417749                 pop     esi
.text:0041774A                 pop     edi
.text:0041774B                 pop     ebp
.text:0041774C                 retn
.text:0041774C sub_417670      endp
.text:0041774C
.text:0041774C ; ---------------------------------------------------------------------------
.text:0041774D                 align 10h
.text:00417750 ; const char String[4]
.text:00417750 String          db ' :/',0              ; DATA XREF: sub_417760+FA↓o
.text:00417754                 align 10h
.text:00417760
.text:00417760 ; =============== S U B R O U T I N E =======================================
.text:00417760
.text:00417760
.text:00417760 ; int __cdecl sub_417760(LPCSTR)
.text:00417760 sub_417760      proc near               ; CODE XREF: sub_415280+E↑p
.text:00417760                                         ; sub_415780+17↑p ...
.text:00417760
.text:00417760 Str             = dword ptr -1Ch
.text:00417760 Val             = dword ptr -18h
.text:00417760 Count           = dword ptr -14h
.text:00417760 var_10          = dword ptr -10h
.text:00417760 var_C           = dword ptr -0Ch
.text:00417760 var_8           = dword ptr -8
.text:00417760 var_4           = dword ptr -4
.text:00417760 arg_0           = dword ptr  4
.text:00417760
.text:00417760                 sub     esp, 1Ch
.text:00417763                 mov     edx, [esp+1Ch+arg_0]
.text:00417767                 mov     [esp+1Ch+var_8], edi
.text:0041776B                 mov     [esp+1Ch+var_10], ebx
.text:0041776F                 mov     [esp+1Ch+var_C], esi
.text:00417773                 mov     [esp+1Ch+var_4], ebp
.text:00417777                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:0041777A                 call    sub_4192A0
.text:0041777F                 test    eax, eax
.text:00417781                 mov     edi, eax
.text:00417783                 jz      short loc_4177C0
.text:00417785                 mov     [esp+1Ch+Str], eax ; Str
.text:00417788                 call    strlen
.text:0041778D                 cmp     eax, 2
.text:00417790                 jbe     short loc_41779C
.text:00417792                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00417796                 jz      loc_417850
.text:0041779C
.text:0041779C loc_41779C:                             ; CODE XREF: sub_417760+30↑j
.text:0041779C                                         ; sub_417760+F4↓j
.text:0041779C                 test    edi, edi
.text:0041779E                 jz      short loc_4177C0
.text:004177A0                 mov     [esp+1Ch+Str], edi ; Str
.text:004177A3                 call    strlen
.text:004177A8                 cmp     eax, 4
.text:004177AB                 mov     ebp, eax
.text:004177AD                 jle     short loc_4177C0
.text:004177AF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:004177B2                 jz      short loc_4177E0
.text:004177B4                 lea     esi, [esi+0]
.text:004177BA                 lea     edi, [edi+0]
.text:004177C0
.text:004177C0 loc_4177C0:                             ; CODE XREF: sub_417760+23↑j
.text:004177C0                                         ; sub_417760+3E↑j ...
.text:004177C0                 xor     esi, esi
.text:004177C2
.text:004177C2 loc_4177C2:                             ; CODE XREF: sub_417760+CD↓j
.text:004177C2                                         ; sub_417760+115↓j
.text:004177C2                 mov     [esp+1Ch+Str], edi ; Block
.text:004177C5                 call    free
.text:004177CA                 mov     eax, esi
.text:004177CC                 mov     ebx, [esp+1Ch+var_10]
.text:004177D0                 mov     esi, [esp+1Ch+var_C]
.text:004177D4                 mov     edi, [esp+1Ch+var_8]
.text:004177D8                 mov     ebp, [esp+1Ch+var_4]
.text:004177DC                 add     esp, 1Ch
.text:004177DF                 retn
.text:004177E0 ; ---------------------------------------------------------------------------
.text:004177E0
.text:004177E0 loc_4177E0:                             ; CODE XREF: sub_417760+52↑j
.text:004177E0                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:004177E4                 jnz     short loc_4177C0
.text:004177E6                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:004177EE                 lea     ecx, [edi+2]
.text:004177F1                 mov     [esp+1Ch+Str], ecx ; Str
.text:004177F4                 call    strchr
.text:004177F9                 test    eax, eax
.text:004177FB                 jnz     short loc_41782F
.text:004177FD
.text:004177FD loc_4177FD:                             ; CODE XREF: sub_417760+E2↓j
.text:004177FD                 inc     ebp
.text:004177FE
.text:004177FE loc_4177FE:                             ; CODE XREF: sub_417760+E9↓j
.text:004177FE                 mov     [esp+1Ch+Val], 1 ; Size
.text:00417806                 lea     ebx, [ebp+1]
.text:00417809                 mov     [esp+1Ch+Str], ebx ; Count
.text:0041780C                 call    calloc
.text:00417811                 mov     [esp+1Ch+Str], eax ; Destination
.text:00417814                 mov     esi, eax
.text:00417816                 mov     [esp+1Ch+Count], ebx ; Count
.text:0041781A                 mov     [esp+1Ch+Val], edi ; Source
.text:0041781E                 call    strncpy
.text:00417823                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00417828                 mov     byte ptr [ebp+esi+0], 0
.text:0041782D                 jmp     short loc_4177C2
.text:0041782F ; ---------------------------------------------------------------------------
.text:0041782F
.text:0041782F loc_41782F:                             ; CODE XREF: sub_417760+9B↑j
.text:0041782F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00417837                 inc     eax
.text:00417838                 mov     [esp+1Ch+Str], eax ; Str
.text:0041783B                 call    strchr
.text:00417840                 test    eax, eax
.text:00417842                 jz      short loc_4177FD
.text:00417844                 sub     eax, edi
.text:00417846                 lea     ebp, [eax+1]
.text:00417849                 jmp     short loc_4177FE
.text:00417849 ; ---------------------------------------------------------------------------
.text:0041784B                 align 10h
.text:00417850
.text:00417850 loc_417850:                             ; CODE XREF: sub_417760+36↑j
.text:00417850                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00417854                 jnz     loc_41779C
.text:0041785A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00417861                 call    _strdup
.text:00417866                 movsx   edx, byte ptr [edi]
.text:00417869                 mov     esi, eax
.text:0041786B                 mov     [esp+1Ch+Str], edx ; C
.text:0041786E                 call    toupper
.text:00417873                 mov     [esi], al
.text:00417875                 jmp     loc_4177C2
.text:00417875 sub_417760      endp
.text:00417875
.text:00417875 ; ---------------------------------------------------------------------------
.text:0041787A                 align 10h
.text:00417880
.text:00417880 ; =============== S U B R O U T I N E =======================================
.text:00417880
.text:00417880
.text:00417880 sub_417880      proc near               ; CODE XREF: .text:004179D4↓p
.text:00417880                                         ; .text:00417AB8↓p
.text:00417880
.text:00417880 Str             = dword ptr -2Ch
.text:00417880 Val             = dword ptr -28h
.text:00417880 var_18          = dword ptr -18h
.text:00417880 var_11          = byte ptr -11h
.text:00417880 arg_0           = dword ptr  4
.text:00417880
.text:00417880                 push    ebp
.text:00417881                 push    edi
.text:00417882                 push    esi
.text:00417883                 push    ebx
.text:00417884                 sub     esp, 1Ch
.text:00417887                 mov     edx, [esp+2Ch+arg_0]
.text:0041788B                 cmp     edx, ds:dword_420420
.text:00417891                 mov     [esp+2Ch+var_11], 0
.text:00417896                 jz      loc_417994
.text:0041789C                 mov     ebx, ds:dword_420410
.text:004178A2                 test    ebx, ebx
.text:004178A4                 jz      short loc_417912
.text:004178A6
.text:004178A6 loc_4178A6:                             ; CODE XREF: sub_417880+10F↓j
.text:004178A6                 mov     ebx, [esp+2Ch+arg_0]
.text:004178AA                 xor     edi, edi
.text:004178AC                 xor     esi, esi
.text:004178AE                 mov     ebp, offset dword_420438
.text:004178B3                 lea     esi, [esi+0]
.text:004178B9                 lea     edi, [edi+0]
.text:004178C0
.text:004178C0 loc_4178C0:                             ; CODE XREF: sub_417880+60↓j
.text:004178C0                 mov     edx, [ebp+4]
.text:004178C3                 mov     ecx, edi
.text:004178C5                 mov     eax, [ebp+0]
.text:004178C8                 shl     ecx, 4
.text:004178CB                 mov     [esp+2Ch+var_18], ecx
.text:004178CF                 mov     ecx, edx
.text:004178D1                 xor     eax, ebx
.text:004178D3                 xor     ecx, esi
.text:004178D5                 or      ecx, eax
.text:004178D7                 jz      short loc_417901
.text:004178D9                 inc     edi
.text:004178DA                 add     ebp, 10h
.text:004178DD                 cmp     edi, 20h ; ' '
.text:004178E0                 jle     short loc_4178C0
.text:004178E2
.text:004178E2 loc_4178E2:                             ; CODE XREF: sub_417880+90↓j
.text:004178E2                 movzx   ebx, [esp+2Ch+var_11]
.text:004178E7                 mov     eax, [esp+2Ch+arg_0]
.text:004178EB                 mov     byte_41F090, bl
.text:004178F1                 mov     ds:dword_420420, eax
.text:004178F6                 movsx   eax, bl
.text:004178F9
.text:004178F9 loc_4178F9:                             ; CODE XREF: sub_417880+11B↓j
.text:004178F9                 add     esp, 1Ch
.text:004178FC                 pop     ebx
.text:004178FD                 pop     esi
.text:004178FE                 pop     edi
.text:004178FF                 pop     ebp
.text:00417900                 retn
.text:00417901 ; ---------------------------------------------------------------------------
.text:00417901
.text:00417901 loc_417901:                             ; CODE XREF: sub_417880+57↑j
.text:00417901                 mov     edx, [esp+2Ch+var_18]
.text:00417905                 movzx   eax, byte ptr ds:dword_420430[edx]
.text:0041790C                 mov     [esp+2Ch+var_11], al
.text:00417910                 jmp     short loc_4178E2
.text:00417912 ; ---------------------------------------------------------------------------
.text:00417912
.text:00417912 loc_417912:                             ; CODE XREF: sub_417880+24↑j
.text:00417912                 mov     [esp+2Ch+Str], 0
.text:00417919                 call    sub_41AA40
.text:0041791E                 test    eax, eax
.text:00417920                 mov     ebx, eax
.text:00417922                 jz      short loc_41797C
.text:00417924                 movzx   ecx, byte ptr [eax]
.text:00417927                 mov     esi, 0FFFFFFF0h
.text:0041792C                 test    cl, cl
.text:0041792E                 jz      short loc_41797C
.text:00417930
.text:00417930 loc_417930:                             ; CODE XREF: sub_417880+FA↓j
.text:00417930                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00417933                 movsx   ebp, cl
.text:00417936                 add     esi, 10h
.text:00417939                 mov     ds:dword_420430[esi], ebp
.text:0041793F                 mov     edi, ebp
.text:00417941                 sar     edi, 1Fh
.text:00417944                 mov     ds:dword_420434[esi], edi
.text:0041794A                 call    sub_415780
.text:0041794F                 mov     ds:dword_420438[esi], eax
.text:00417955                 xor     ecx, ecx
.text:00417957                 mov     [esp+2Ch+Str], ebx ; Str
.text:0041795A                 mov     ds:dword_42043C[esi], ecx
.text:00417960                 mov     [esp+2Ch+Val], 0 ; Val
.text:00417968                 call    strchr
.text:0041796D                 mov     ebx, eax
.text:0041796F                 inc     ebx
.text:00417970                 jz      short loc_41797C
.text:00417972                 movzx   edx, byte ptr [eax+1]
.text:00417976                 test    dl, dl
.text:00417978                 mov     cl, dl
.text:0041797A                 jnz     short loc_417930
.text:0041797C
.text:0041797C loc_41797C:                             ; CODE XREF: sub_417880+A2↑j
.text:0041797C                                         ; sub_417880+AE↑j ...
.text:0041797C                 mov     [esp+2Ch+Str], ebx ; Block
.text:0041797F                 mov     esi, 1
.text:00417984                 mov     ds:dword_420410, esi
.text:0041798A                 call    free
.text:0041798F                 jmp     loc_4178A6
.text:00417994 ; ---------------------------------------------------------------------------
.text:00417994
.text:00417994 loc_417994:                             ; CODE XREF: sub_417880+16↑j
.text:00417994                 movsx   eax, byte_41F090
.text:0041799B                 jmp     loc_4178F9
.text:0041799B sub_417880      endp
.text:0041799B
.text:0041799B ; ---------------------------------------------------------------------------
.text:004179A0 dword_4179A0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:004179A0                                         ; DATA XREF: .text:004179C3↓o
.text:004179A0                                         ; .text:00417AA3↓o
.text:004179B0 ; ---------------------------------------------------------------------------
.text:004179B0                 sub     esp, 1Ch
.text:004179B3                 mov     [esp+14h], esi
.text:004179B7                 mov     esi, [esp+20h]
.text:004179BB                 mov     [esp+18h], edi
.text:004179BF                 mov     [esp+10h], ebx
.text:004179C3                 mov     dword ptr [esp], offset dword_4179A0
.text:004179CA                 call    _strdup
.text:004179CF                 mov     [esp], esi
.text:004179D2                 mov     edi, eax
.text:004179D4                 call    sub_417880
.text:004179D9                 mov     [edi], al
.text:004179DB                 test    al, al
.text:004179DD                 jz      short loc_4179F1
.text:004179DF                 mov     eax, edi
.text:004179E1                 mov     ebx, [esp+10h]
.text:004179E5                 mov     esi, [esp+14h]
.text:004179E9                 mov     edi, [esp+18h]
.text:004179ED                 add     esp, 1Ch
.text:004179F0                 retn
.text:004179F1 ; ---------------------------------------------------------------------------
.text:004179F1
.text:004179F1 loc_4179F1:                             ; CODE XREF: .text:004179DD↑j
.text:004179F1                 mov     [esp], edi
.text:004179F4                 call    free
.text:004179F9                 mov     dword ptr [esp+4], 0
.text:00417A01                 mov     dword ptr [esp], 0
.text:00417A08                 call    GetCurrentDirectoryA
.text:00417A0D                 sub     esp, 8
.text:00417A10                 lea     esi, [eax+1]
.text:00417A13                 mov     [esp], esi
.text:00417A16                 call    malloc
.text:00417A1B                 mov     [esp+4], eax
.text:00417A1F                 mov     edi, eax
.text:00417A21                 mov     [esp], esi
.text:00417A24                 call    GetCurrentDirectoryA
.text:00417A29                 sub     esp, 8
.text:00417A2C                 test    eax, eax
.text:00417A2E                 jnz     short loc_417A50
.text:00417A30                 mov     dword ptr [esp+20h], 4179A4h
.text:00417A38                 mov     ebx, [esp+10h]
.text:00417A3C                 mov     esi, [esp+14h]
.text:00417A40                 mov     edi, [esp+18h]
.text:00417A44                 add     esp, 1Ch
.text:00417A47                 jmp     _strdup
.text:00417A47 ; ---------------------------------------------------------------------------
.text:00417A4C                 align 10h
.text:00417A50
.text:00417A50 loc_417A50:                             ; CODE XREF: .text:00417A2E↑j
.text:00417A50                 mov     [esp+20h], edi
.text:00417A54                 mov     ebx, [esp+10h]
.text:00417A58                 mov     esi, [esp+14h]
.text:00417A5C                 mov     edi, [esp+18h]
.text:00417A60                 add     esp, 1Ch
.text:00417A63                 jmp     sub_417760
.text:00417A63 ; ---------------------------------------------------------------------------
.text:00417A68                 align 10h
.text:00417A70                 sub     esp, 7Ch
.text:00417A73                 lea     edx, [esp+10h]
.text:00417A77                 mov     [esp+8], edx
.text:00417A7B                 mov     edx, [esp+80h]
.text:00417A82                 mov     [esp+70h], ebx
.text:00417A86                 mov     [esp+74h], esi
.text:00417A8A                 mov     [esp+4], edx
.text:00417A8E                 mov     [esp+78h], edi
.text:00417A92                 mov     dword ptr [esp], 0
.text:00417A99                 call    sub_4149D0
.text:00417A9E                 xor     edx, edx
.text:00417AA0                 inc     eax
.text:00417AA1                 jz      short loc_417AC5
.text:00417AA3                 mov     dword ptr [esp], offset dword_4179A0
.text:00417AAA                 mov     esi, [esp+20h]
.text:00417AAE                 call    _strdup
.text:00417AB3                 mov     edi, eax
.text:00417AB5                 mov     [esp], esi
.text:00417AB8                 call    sub_417880
.text:00417ABD                 mov     [edi], al
.text:00417ABF                 test    al, al
.text:00417AC1                 mov     edx, edi
.text:00417AC3                 jz      short loc_417AD7
.text:00417AC5
.text:00417AC5 loc_417AC5:                             ; CODE XREF: .text:00417AA1↑j
.text:00417AC5                                         ; .text:00417B24↓j
.text:00417AC5                 mov     ebx, [esp+70h]
.text:00417AC9                 mov     eax, edx
.text:00417ACB                 mov     esi, [esp+74h]
.text:00417ACF                 mov     edi, [esp+78h]
.text:00417AD3                 add     esp, 7Ch
.text:00417AD6                 retn
.text:00417AD7 ; ---------------------------------------------------------------------------
.text:00417AD7
.text:00417AD7 loc_417AD7:                             ; CODE XREF: .text:00417AC3↑j
.text:00417AD7                 mov     [esp], edi
.text:00417ADA                 call    free
.text:00417ADF                 mov     dword ptr [esp+4], 0
.text:00417AE7                 mov     dword ptr [esp], 0
.text:00417AEE                 call    GetCurrentDirectoryA
.text:00417AF3                 sub     esp, 8
.text:00417AF6                 lea     esi, [eax+1]
.text:00417AF9                 mov     [esp], esi
.text:00417AFC                 call    malloc
.text:00417B01                 mov     [esp+4], eax
.text:00417B05                 mov     edi, eax
.text:00417B07                 mov     [esp], esi
.text:00417B0A                 call    GetCurrentDirectoryA
.text:00417B0F                 sub     esp, 8
.text:00417B12                 test    eax, eax
.text:00417B14                 jnz     short loc_417B26
.text:00417B16                 mov     dword ptr [esp], 4179A4h
.text:00417B1D                 call    _strdup
.text:00417B22
.text:00417B22 loc_417B22:                             ; CODE XREF: .text:00417B2E↓j
.text:00417B22                 mov     edx, eax
.text:00417B24                 jmp     short loc_417AC5
.text:00417B26 ; ---------------------------------------------------------------------------
.text:00417B26
.text:00417B26 loc_417B26:                             ; CODE XREF: .text:00417B14↑j
.text:00417B26                 mov     [esp], edi
.text:00417B29                 call    sub_417760
.text:00417B2E                 jmp     short loc_417B22
.text:00417B30
.text:00417B30 ; =============== S U B R O U T I N E =======================================
.text:00417B30
.text:00417B30
.text:00417B30 ; int __cdecl sub_417B30(LPCSTR)
.text:00417B30 sub_417B30      proc near               ; CODE XREF: sub_414C30+12F↑p
.text:00417B30
.text:00417B30 String1         = dword ptr -1Ch
.text:00417B30 String2         = dword ptr -18h
.text:00417B30 var_C           = dword ptr -0Ch
.text:00417B30 var_8           = dword ptr -8
.text:00417B30 var_4           = dword ptr -4
.text:00417B30 arg_0           = dword ptr  4
.text:00417B30
.text:00417B30                 sub     esp, 1Ch
.text:00417B33                 mov     [esp+1Ch+var_4], edi
.text:00417B37                 mov     edi, [esp+1Ch+arg_0]
.text:00417B3B                 mov     [esp+1Ch+var_C], ebx
.text:00417B3F                 mov     [esp+1Ch+var_8], esi
.text:00417B43                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00417B46                 call    sub_4192A0
.text:00417B4B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00417B4E                 mov     esi, eax
.text:00417B50                 call    sub_417760
.text:00417B55                 mov     [esp+1Ch+String2], eax ; String2
.text:00417B59                 mov     ebx, eax
.text:00417B5B                 mov     [esp+1Ch+String1], esi ; String1
.text:00417B5E                 call    _stricmp
.text:00417B63                 test    eax, eax
.text:00417B65                 setz    dl
.text:00417B68                 test    esi, esi
.text:00417B6A                 movzx   edi, dl
.text:00417B6D                 jz      short loc_417B77
.text:00417B6F                 mov     [esp+1Ch+String1], esi ; Block
.text:00417B72                 call    free
.text:00417B77
.text:00417B77 loc_417B77:                             ; CODE XREF: sub_417B30+3D↑j
.text:00417B77                 test    ebx, ebx
.text:00417B79                 jz      short loc_417B83
.text:00417B7B                 mov     [esp+1Ch+String1], ebx ; Block
.text:00417B7E                 call    free
.text:00417B83
.text:00417B83 loc_417B83:                             ; CODE XREF: sub_417B30+49↑j
.text:00417B83                 mov     eax, edi
.text:00417B85                 mov     ebx, [esp+1Ch+var_C]
.text:00417B89                 mov     esi, [esp+1Ch+var_8]
.text:00417B8D                 mov     edi, [esp+1Ch+var_4]
.text:00417B91                 add     esp, 1Ch
.text:00417B94                 retn
.text:00417B94 sub_417B30      endp
.text:00417B94
.text:00417B94 ; ---------------------------------------------------------------------------
.text:00417B95                 align 10h
.text:00417BA0
.text:00417BA0 ; =============== S U B R O U T I N E =======================================
.text:00417BA0
.text:00417BA0
.text:00417BA0 ; int __cdecl sub_417BA0(char *, int)
.text:00417BA0 sub_417BA0      proc near               ; CODE XREF: sub_4027B0+9E4↑p
.text:00417BA0                                         ; sub_403840+593↑p ...
.text:00417BA0
.text:00417BA0 var_C           = dword ptr -0Ch
.text:00417BA0 var_8           = dword ptr -8
.text:00417BA0 var_4           = dword ptr -4
.text:00417BA0 arg_0           = dword ptr  4
.text:00417BA0 arg_4           = dword ptr  8
.text:00417BA0
.text:00417BA0                 sub     esp, 0Ch
.text:00417BA3                 mov     edx, [esp+0Ch+arg_4]
.text:00417BA7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:00417BAE                 mov     [esp+0Ch+var_4], edx ; int
.text:00417BB2                 mov     edx, [esp+0Ch+arg_0]
.text:00417BB6                 mov     [esp+0Ch+var_8], edx ; char *
.text:00417BBA                 call    sub_4188B0
.text:00417BBF                 add     esp, 0Ch
.text:00417BC2                 retn
.text:00417BC2 sub_417BA0      endp
.text:00417BC2
.text:00417BC2 ; ---------------------------------------------------------------------------
.text:00417BC3                 align 10h
.text:00417BD0 aKernel32       db 'KERNEL32',0         ; DATA XREF: .text:00417C21↓o
.text:00417BD9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00417BD9                                         ; DATA XREF: .text:00417C32↓o
.text:00417BED ; const CHAR FileName[]
.text:00417BED FileName        db '\\.\vwin32',0       ; DATA XREF: .text:00417D7C↓o
.text:00417BED                                         ; sub_4181B0+17C↓o
.text:00417BF8 ; ---------------------------------------------------------------------------
.text:00417BF8
.text:00417BF8 loc_417BF8:                             ; DATA XREF: .text:00417E92↓o
.text:00417BF8                 dec     esi
.text:00417BF9                 push    esp
.text:00417BFA                 inc     esi
.text:00417BFB                 push    ebx
.text:00417BFC                 add     [esi+41h], al
.text:00417BFF                 push    esp
.text:00417C00                 xor     esi, [edx]
.text:00417C02                 add     [esi+41h], al
.text:00417C05                 push    esp
.text:00417C06                 add     [ebx+44h], al
.text:00417C09                 inc     esi
.text:00417C0A                 push    ebx
.text:00417C0B
.text:00417C0B loc_417C0B:                             ; CODE XREF: sub_4181B0+101↓p
.text:00417C0B                 add     [ebp+55002674h], cl
.text:00417C11                 push    edi
.text:00417C12                 push    esi
.text:00417C13                 push    ebx
.text:00417C14                 sub     esp, 8BCh
.text:00417C1A                 mov     ebp, [esp+8D0h]
.text:00417C21                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00417C28                 call    LoadLibraryA
.text:00417C2D                 sub     esp, 4
.text:00417C30                 mov     edi, eax
.text:00417C32                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:00417C3A                 mov     [esp], eax
.text:00417C3D                 call    GetProcAddress
.text:00417C42                 sub     esp, 8
.text:00417C45                 mov     esi, eax
.text:00417C47                 test    ebp, ebp
.text:00417C49                 mov     dword ptr [esp+20h], 0
.text:00417C51                 jz      loc_418191
.text:00417C57                 mov     [esp], ebp
.text:00417C5A                 call    sub_416EE0
.text:00417C5F                 mov     [esp], eax
.text:00417C62                 mov     ebp, eax
.text:00417C64                 call    strlen
.text:00417C69                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:00417C6E                 mov     ebx, eax
.text:00417C70                 jz      short loc_417C8C
.text:00417C72                 mov     [esp], ebp
.text:00417C75                 lea     edx, [eax+1]
.text:00417C78                 mov     [esp+4], edx
.text:00417C7C                 call    realloc
.text:00417C81                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00417C85                 mov     ebp, eax
.text:00417C87                 mov     byte ptr [ebx+eax+1], 0
.text:00417C8C
.text:00417C8C loc_417C8C:                             ; CODE XREF: .text:00417C70↑j
.text:00417C8C                 mov     dword ptr [esp+1Ch], 400h
.text:00417C94                 lea     edx, [esp+0B0h]
.text:00417C9B                 lea     ebx, [esp+5Ch]
.text:00417C9F                 mov     [esp+18h], edx
.text:00417CA3                 lea     ecx, [esp+58h]
.text:00417CA7                 lea     edx, [esp+54h]
.text:00417CAB                 mov     [esp+14h], ebx
.text:00417CAF                 lea     eax, [esp+4B0h]
.text:00417CB6                 mov     [esp+10h], ecx
.text:00417CBA                 mov     [esp+0Ch], edx
.text:00417CBE                 mov     dword ptr [esp+8], 400h
.text:00417CC6                 mov     [esp+4], eax
.text:00417CCA                 mov     [esp], ebp
.text:00417CCD                 call    GetVolumeInformationA
.text:00417CD2                 sub     esp, 20h
.text:00417CD5                 test    eax, eax
.text:00417CD7                 jz      loc_41816E
.text:00417CDD                 test    esi, esi
.text:00417CDF                 jz      short loc_417D05
.text:00417CE1                 mov     [esp], ebp
.text:00417CE4                 lea     edx, [esp+48h]
.text:00417CE8                 lea     ebx, [esp+40h]
.text:00417CEC                 mov     [esp+0Ch], edx
.text:00417CF0                 lea     ecx, [esp+38h]
.text:00417CF4                 mov     [esp+8], ebx
.text:00417CF8                 mov     [esp+4], ecx
.text:00417CFC                 call    esi
.text:00417CFE                 sub     esp, 10h
.text:00417D01                 mov     [esp+20h], eax
.text:00417D05
.text:00417D05 loc_417D05:                             ; CODE XREF: .text:00417CDF↑j
.text:00417D05                 test    edi, edi
.text:00417D07                 jz      short loc_417D14
.text:00417D09                 mov     [esp], edi
.text:00417D0C                 call    FreeLibrary
.text:00417D11                 sub     esp, 4
.text:00417D14
.text:00417D14 loc_417D14:                             ; CODE XREF: .text:00417D07↑j
.text:00417D14                 call    sub_419C60
.text:00417D19                 test    eax, eax
.text:00417D1B                 lea     esi, [esp+28h]
.text:00417D1F                 jz      loc_418150
.text:00417D25                 call    sub_419C60
.text:00417D2A                 test    eax, eax
.text:00417D2C                 jz      short loc_417D3C
.text:00417D2E                 call    sub_419BB0
.text:00417D33                 cmp     eax, 0Bh
.text:00417D36                 jle     loc_418124
.text:00417D3C
.text:00417D3C loc_417D3C:                             ; CODE XREF: .text:00417D2C↑j
.text:00417D3C                 cld
.text:00417D3D                 xor     eax, eax
.text:00417D3F                 lea     ebx, [esp+60h]
.text:00417D43                 mov     ecx, 7
.text:00417D48                 mov     edi, ebx
.text:00417D4A                 rep stosd
.text:00417D4C                 mov     dword ptr [esp+18h], 0
.text:00417D54                 mov     dword ptr [esp+14h], 4000000h
.text:00417D5C                 mov     dword ptr [esp+10h], 0
.text:00417D64                 mov     dword ptr [esp+0Ch], 0
.text:00417D6C                 mov     dword ptr [esp+8], 0
.text:00417D74                 mov     dword ptr [esp+4], 0
.text:00417D7C                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:00417D83                 call    CreateFileA
.text:00417D88                 sub     esp, 1Ch
.text:00417D8B                 mov     edi, eax
.text:00417D8D                 cmp     eax, 0FFFFFFFFh
.text:00417D90                 jz      short loc_417E10
.text:00417D92                 mov     [esp+10h], ebx
.text:00417D96                 lea     edx, [esp+80h]
.text:00417D9D                 lea     ecx, [esp+24h]
.text:00417DA1                 mov     [esp+70h], edx
.text:00417DA5                 mov     [esp+18h], ecx
.text:00417DA9                 mov     [esp+8], ebx
.text:00417DAD                 mov     dword ptr [esp+6Ch], 7303h
.text:00417DB5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:00417DBD                 mov     [esp+64h], ebp
.text:00417DC1                 mov     dword ptr [esp+78h], 1
.text:00417DC9                 mov     dword ptr [esp+1Ch], 0
.text:00417DD1                 mov     dword ptr [esp+14h], 1Ch
.text:00417DD9                 mov     dword ptr [esp+0Ch], 1Ch
.text:00417DE1                 mov     dword ptr [esp+4], 6
.text:00417DE9                 mov     [esp], eax
.text:00417DEC                 call    DeviceIoControl
.text:00417DF1                 sub     esp, 20h
.text:00417DF4                 mov     ebx, eax
.text:00417DF6                 mov     [esp], edi
.text:00417DF9                 call    CloseHandle
.text:00417DFE                 sub     esp, 4
.text:00417E01                 test    ebx, ebx
.text:00417E03                 jz      short loc_417E10
.text:00417E05                 test    byte ptr [esp+78h], 1
.text:00417E0A                 jz      loc_4180F0
.text:00417E10
.text:00417E10 loc_417E10:                             ; CODE XREF: .text:00417D90↑j
.text:00417E10                                         ; .text:00417E03↑j
.text:00417E10                 call    sub_419250
.text:00417E15                 mov     edi, eax
.text:00417E17                 call    _errno
.text:00417E1C                 mov     [eax], edi
.text:00417E1E                 xor     eax, eax
.text:00417E20
.text:00417E20 loc_417E20:                             ; CODE XREF: .text:0041811F↓j
.text:00417E20                                         ; .text:0041814B↓j
.text:00417E20                 test    eax, eax
.text:00417E22                 jnz     short loc_417E44
.text:00417E24                 mov     dword ptr [esp+34h], 1
.text:00417E2C                 mov     dword ptr [esp+30h], 200h
.text:00417E34                 mov     dword ptr [esp+2Ch], 0
.text:00417E3C                 mov     dword ptr [esp+28h], 0
.text:00417E44
.text:00417E44 loc_417E44:                             ; CODE XREF: .text:00417E22↑j
.text:00417E44                 mov     edx, [esp+30h]
.text:00417E48                 mov     edi, [esp+34h]
.text:00417E4C                 mov     ecx, [esp+20h]
.text:00417E50                 imul    edi, edx
.text:00417E53                 test    ecx, ecx
.text:00417E55                 jnz     short loc_417E7D
.text:00417E57                 mov     eax, [esp+28h]
.text:00417E5B                 mul     edi
.text:00417E5D                 mov     esi, eax
.text:00417E5F                 mov     eax, [esp+2Ch]
.text:00417E63                 mov     [esp+44h], edx
.text:00417E67                 mov     [esp+40h], esi
.text:00417E6B                 mul     edi
.text:00417E6D                 mov     [esp+48h], eax
.text:00417E71                 mov     [esp+4Ch], edx
.text:00417E75                 mov     [esp+38h], eax
.text:00417E79                 mov     [esp+3Ch], edx
.text:00417E7D
.text:00417E7D loc_417E7D:                             ; CODE XREF: .text:00417E55↑j
.text:00417E7D                 mov     ebx, [esp+5Ch]
.text:00417E81                 lea     edx, [esp+0B0h]
.text:00417E88                 mov     ecx, [esp+8D4h]
.text:00417E8F                 mov     [ecx+48h], ebx
.text:00417E92                 mov     dword ptr [esp+4], offset loc_417BF8
.text:00417E9A                 mov     [esp], edx
.text:00417E9D                 call    _stricmp
.text:00417EA2                 test    eax, eax
.text:00417EA4                 jnz     loc_418060
.text:00417EAA                 mov     esi, [esp+8D4h]
.text:00417EB1                 mov     dword ptr [esi], 5346544Eh
.text:00417EB7
.text:00417EB7 loc_417EB7:                             ; CODE XREF: .text:00418088↓j
.text:00417EB7                                         ; .text:004180B5↓j ...
.text:00417EB7                 mov     ebx, [esp+30h]
.text:00417EBB                 mov     esi, [esp+8D4h]
.text:00417EC2                 mov     [esi+4], ebx
.text:00417EC5                 mov     [esi+8], ebx
.text:00417EC8                 mov     ebx, [esi+8]
.text:00417ECB                 mov     [esi+0Ch], edi
.text:00417ECE                 mov     ecx, [esp+44h]
.text:00417ED2                 xor     esi, esi
.text:00417ED4                 mov     [esp+8], ebx
.text:00417ED8                 mov     edx, [esp+40h]
.text:00417EDC                 mov     [esp+0Ch], esi
.text:00417EE0                 mov     [esp+4], ecx
.text:00417EE4                 mov     [esp], edx
.text:00417EE7                 call    sub_41D8D0
.text:00417EEC                 mov     ecx, [esp+8D4h]
.text:00417EF3                 mov     [ecx+10h], eax
.text:00417EF6                 mov     [ecx+14h], edx
.text:00417EF9                 mov     ecx, [esp+4Ch]
.text:00417EFD                 mov     [esp+8], ebx
.text:00417F01                 mov     edx, [esp+48h]
.text:00417F05                 mov     [esp+0Ch], esi
.text:00417F09                 mov     [esp+4], ecx
.text:00417F0D                 mov     [esp], edx
.text:00417F10                 call    sub_41D8D0
.text:00417F15                 mov     ecx, [esp+8D4h]
.text:00417F1C                 mov     [ecx+18h], eax
.text:00417F1F                 mov     [ecx+1Ch], edx
.text:00417F22                 mov     ecx, [esp+38h]
.text:00417F26                 mov     [esp+8], ebx
.text:00417F2A                 mov     ebx, [esp+3Ch]
.text:00417F2E                 mov     [esp+0Ch], esi
.text:00417F32                 mov     [esp], ecx
.text:00417F35                 mov     [esp+4], ebx
.text:00417F39                 call    sub_41D8D0
.text:00417F3E                 mov     esi, [esp+8D4h]
.text:00417F45                 mov     [esi+20h], eax
.text:00417F48                 mov     [esi+24h], edx
.text:00417F4B                 mov     ecx, [esp+44h]
.text:00417F4F                 mov     esi, edi
.text:00417F51                 mov     [esp+8], esi
.text:00417F55                 mov     edx, [esp+40h]
.text:00417F59                 xor     edi, edi
.text:00417F5B                 mov     [esp+0Ch], edi
.text:00417F5F                 mov     [esp+4], ecx
.text:00417F63                 mov     [esp], edx
.text:00417F66                 call    sub_41D8D0
.text:00417F6B                 mov     ebx, [esp+8D4h]
.text:00417F72                 mov     [ebx+28h], eax
.text:00417F75                 mov     [ebx+2Ch], edx
.text:00417F78                 mov     ecx, [esp+4Ch]
.text:00417F7C                 mov     [esp+8], esi
.text:00417F80                 mov     edx, [esp+48h]
.text:00417F84                 mov     [esp+0Ch], edi
.text:00417F88                 mov     [esp+4], ecx
.text:00417F8C                 mov     [esp], edx
.text:00417F8F                 call    sub_41D8D0
.text:00417F94                 mov     ebx, [esp+8D4h]
.text:00417F9B                 mov     [ebx+30h], eax
.text:00417F9E                 mov     [ebx+34h], edx
.text:00417FA1                 mov     ecx, [esp+3Ch]
.text:00417FA5                 mov     [esp+8], esi
.text:00417FA9                 mov     edx, [esp+38h]
.text:00417FAD                 mov     [esp+0Ch], edi
.text:00417FB1                 mov     [esp+4], ecx
.text:00417FB5                 mov     [esp], edx
.text:00417FB8                 call    sub_41D8D0
.text:00417FBD                 mov     edx, [esp+8D4h]
.text:00417FC4                 lea     ecx, [esp+0B0h]
.text:00417FCB                 mov     [edx+38h], eax
.text:00417FCE                 mov     esi, [esp+58h]
.text:00417FD2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00417FD9                 mov     [edx+110h], esi
.text:00417FDF                 mov     esi, edx
.text:00417FE1                 add     esi, 4Ch ; 'L'
.text:00417FE4                 movzx   ebx, word ptr [esp+56h]
.text:00417FE9                 movzx   edi, word ptr [esp+54h]
.text:00417FEE                 mov     [edx+3Ch], ebx
.text:00417FF1                 lea     ebx, [esp+4B0h]
.text:00417FF8                 mov     [edx+40h], edi
.text:00417FFB                 mov     [esp+4], ecx
.text:00417FFF                 mov     dword ptr [esp+8], 10h
.text:00418007                 mov     [esp], esi
.text:0041800A                 call    strncpy
.text:0041800F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00418017                 mov     edi, [esp+8D4h]
.text:0041801E                 mov     [esp+4], ebx
.text:00418022                 add     edi, 5Ch ; '\'
.text:00418025                 mov     [esp], edi
.text:00418028                 call    strncpy
.text:0041802D                 mov     [esp+4], ebp
.text:00418031                 mov     ebp, [esp+8D4h]
.text:00418038                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00418040                 add     ebp, 0B6h ; '¶'
.text:00418046                 mov     [esp], ebp
.text:00418049                 call    strncpy
.text:0041804E                 xor     eax, eax
.text:00418050
.text:00418050 loc_418050:                             ; CODE XREF: .text:0041818C↓j
.text:00418050                 add     esp, 8BCh
.text:00418056                 pop     ebx
.text:00418057                 pop     esi
.text:00418058                 pop     edi
.text:00418059                 pop     ebp
.text:0041805A                 retn
.text:0041805A ; ---------------------------------------------------------------------------
.text:0041805B                 align 10h
.text:00418060
.text:00418060 loc_418060:                             ; CODE XREF: .text:00417EA4↑j
.text:00418060                 mov     dword ptr [esp+4], 417BFDh
.text:00418068                 lea     eax, [esp+0B0h]
.text:0041806F                 mov     [esp], eax
.text:00418072                 call    _stricmp
.text:00418077                 test    eax, eax
.text:00418079                 jnz     short loc_41808D
.text:0041807B                 mov     edx, [esp+8D4h]
.text:00418082                 mov     dword ptr [edx], 4008h
.text:00418088                 jmp     loc_417EB7
.text:0041808D ; ---------------------------------------------------------------------------
.text:0041808D
.text:0041808D loc_41808D:                             ; CODE XREF: .text:00418079↑j
.text:0041808D                 mov     dword ptr [esp+4], 417C03h
.text:00418095                 lea     ecx, [esp+0B0h]
.text:0041809C                 mov     [esp], ecx
.text:0041809F                 call    _stricmp
.text:004180A4                 test    eax, eax
.text:004180A6                 jnz     short loc_4180BA
.text:004180A8                 mov     ebx, [esp+8D4h]
.text:004180AF                 mov     dword ptr [ebx], 4006h
.text:004180B5                 jmp     loc_417EB7
.text:004180BA ; ---------------------------------------------------------------------------
.text:004180BA
.text:004180BA loc_4180BA:                             ; CODE XREF: .text:004180A6↑j
.text:004180BA                 mov     dword ptr [esp+4], 417C07h
.text:004180C2                 lea     eax, [esp+0B0h]
.text:004180C9                 mov     [esp], eax
.text:004180CC                 call    _stricmp
.text:004180D1                 test    eax, eax
.text:004180D3                 mov     esi, [esp+8D4h]
.text:004180DA                 setnz   cl
.text:004180DD                 movzx   edx, cl
.text:004180E0                 dec     edx
.text:004180E1                 and     edx, 4000h
.text:004180E7                 mov     [esi], edx
.text:004180E9                 jmp     loc_417EB7
.text:004180E9 ; ---------------------------------------------------------------------------
.text:004180EE                 align 10h
.text:004180F0
.text:004180F0 loc_4180F0:                             ; CODE XREF: .text:00417E0A↑j
.text:004180F0                 mov     edi, [esp+84h]
.text:004180F7                 mov     eax, 1
.text:004180FC                 mov     edx, [esp+88h]
.text:00418103                 mov     ecx, [esp+8Ch]
.text:0041810A                 mov     ebx, [esp+90h]
.text:00418111                 mov     [esp+34h], edi
.text:00418115                 mov     [esp+30h], edx
.text:00418119                 mov     [esp+2Ch], ecx
.text:0041811D                 mov     [esi], ebx
.text:0041811F                 jmp     loc_417E20
.text:00418124 ; ---------------------------------------------------------------------------
.text:00418124
.text:00418124 loc_418124:                             ; CODE XREF: .text:00417D36↑j
.text:00418124                 mov     [esp+10h], esi
.text:00418128                 lea     eax, [esp+2Ch]
.text:0041812C                 lea     esi, [esp+30h]
.text:00418130                 mov     [esp+0Ch], eax
.text:00418134                 lea     edi, [esp+34h]
.text:00418138                 mov     [esp+8], esi
.text:0041813C                 mov     [esp+4], edi
.text:00418140
.text:00418140 loc_418140:                             ; CODE XREF: .text:0041816C↓j
.text:00418140                 mov     [esp], ebp
.text:00418143                 call    GetDiskFreeSpaceA
.text:00418148                 sub     esp, 14h
.text:0041814B                 jmp     loc_417E20
.text:00418150 ; ---------------------------------------------------------------------------
.text:00418150
.text:00418150 loc_418150:                             ; CODE XREF: .text:00417D1F↑j
.text:00418150                 mov     [esp+10h], esi
.text:00418154                 lea     ebx, [esp+2Ch]
.text:00418158                 lea     eax, [esp+30h]
.text:0041815C                 mov     [esp+0Ch], ebx
.text:00418160                 lea     esi, [esp+34h]
.text:00418164                 mov     [esp+8], eax
.text:00418168                 mov     [esp+4], esi
.text:0041816C                 jmp     short loc_418140
.text:0041816E ; ---------------------------------------------------------------------------
.text:0041816E
.text:0041816E loc_41816E:                             ; CODE XREF: .text:00417CD7↑j
.text:0041816E                 mov     [esp], edi
.text:00418171                 call    FreeLibrary
.text:00418176                 sub     esp, 4
.text:00418179                 call    sub_419250
.text:0041817E                 mov     esi, eax
.text:00418180                 call    _errno
.text:00418185                 mov     [eax], esi
.text:00418187
.text:00418187 loc_418187:                             ; CODE XREF: .text:004181A7↓j
.text:00418187                 mov     eax, 0FFFFFFFFh
.text:0041818C                 jmp     loc_418050
.text:00418191 ; ---------------------------------------------------------------------------
.text:00418191
.text:00418191 loc_418191:                             ; CODE XREF: .text:00417C51↑j
.text:00418191                 mov     [esp], edi
.text:00418194                 call    FreeLibrary
.text:00418199                 sub     esp, 4
.text:0041819C                 call    _errno
.text:004181A1                 mov     dword ptr [eax], 2
.text:004181A7                 jmp     short loc_418187
.text:004181A7 ; ---------------------------------------------------------------------------
.text:004181A9                 align 10h
.text:004181B0
.text:004181B0 ; =============== S U B R O U T I N E =======================================
.text:004181B0
.text:004181B0
.text:004181B0 ; int __cdecl sub_4181B0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:004181B0 sub_4181B0      proc near               ; CODE XREF: sub_415280+2C7↑p
.text:004181B0                                         ; .text:004158BA↑p
.text:004181B0
.text:004181B0 lpFileName      = dword ptr -9Ch
.text:004181B0 dwDesiredAccess = dword ptr -98h
.text:004181B0 dwShareMode     = dword ptr -94h
.text:004181B0 lpSecurityAttributes= dword ptr -90h
.text:004181B0 dwCreationDisposition= dword ptr -8Ch
.text:004181B0 dwFlagsAndAttributes= dword ptr -88h
.text:004181B0 hTemplateFile   = dword ptr -84h
.text:004181B0 lpOverlapped    = dword ptr -80h
.text:004181B0 BytesReturned   = dword ptr -70h
.text:004181B0 InBuffer        = byte ptr -6Ch
.text:004181B0 var_68          = dword ptr -68h
.text:004181B0 var_64          = dword ptr -64h
.text:004181B0 var_60          = dword ptr -60h
.text:004181B0 var_5C          = dword ptr -5Ch
.text:004181B0 var_54          = dword ptr -54h
.text:004181B0 var_4C          = byte ptr -4Ch
.text:004181B0 var_48          = dword ptr -48h
.text:004181B0 var_44          = dword ptr -44h
.text:004181B0 var_40          = dword ptr -40h
.text:004181B0 var_3C          = dword ptr -3Ch
.text:004181B0 lpRootPathName  = dword ptr -2Ch
.text:004181B0 lpSectorsPerCluster= dword ptr -28h
.text:004181B0 lpBytesPerSector= dword ptr -24h
.text:004181B0 lpNumberOfFreeClusters= dword ptr -20h
.text:004181B0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:004181B0 var_18          = dword ptr -18h
.text:004181B0 var_14          = dword ptr -14h
.text:004181B0 var_10          = dword ptr -10h
.text:004181B0 var_C           = dword ptr -0Ch
.text:004181B0 var_8           = dword ptr -8
.text:004181B0 var_4           = dword ptr -4
.text:004181B0 arg_0           = dword ptr  4
.text:004181B0 arg_4           = dword ptr  8
.text:004181B0 arg_8           = dword ptr  0Ch
.text:004181B0 arg_C           = dword ptr  10h
.text:004181B0 arg_10          = dword ptr  14h
.text:004181B0
.text:004181B0                 sub     esp, 2Ch
.text:004181B3                 mov     edx, [esp+2Ch+arg_0]
.text:004181B7                 mov     [esp+2Ch+var_10], ebx
.text:004181BB                 mov     ebx, [esp+2Ch+arg_10]
.text:004181BF                 mov     [esp+2Ch+var_C], esi
.text:004181C3                 mov     esi, [esp+2Ch+arg_C]
.text:004181C7                 mov     [esp+2Ch+var_8], edi
.text:004181CB                 mov     edi, [esp+2Ch+arg_8]
.text:004181CF                 mov     [esp+2Ch+var_4], ebp
.text:004181D3                 mov     ebp, [esp+2Ch+arg_4]
.text:004181D7                 mov     [esp+2Ch+var_14], edx
.text:004181DB                 call    sub_419C60
.text:004181E0                 test    eax, eax
.text:004181E2                 jz      short loc_418214
.text:004181E4                 mov     [esp+2Ch+arg_10], ebx
.text:004181E8                 mov     edx, [esp+2Ch+var_14]
.text:004181EC                 mov     ebx, [esp+2Ch+var_10]
.text:004181F0                 mov     [esp+2Ch+arg_C], esi
.text:004181F4                 mov     esi, [esp+2Ch+var_C]
.text:004181F8                 mov     [esp+2Ch+arg_8], edi
.text:004181FC                 mov     edi, [esp+2Ch+var_8]
.text:00418200                 mov     [esp+2Ch+arg_4], ebp
.text:00418204                 mov     ebp, [esp+2Ch+var_4]
.text:00418208                 mov     [esp+2Ch+arg_0], edx
.text:0041820C                 add     esp, 2Ch
.text:0041820F                 jmp     loc_4182C0
.text:00418214 ; ---------------------------------------------------------------------------
.text:00418214
.text:00418214 loc_418214:                             ; CODE XREF: sub_4181B0+32↑j
.text:00418214                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00418218                 mov     ecx, [esp+2Ch+var_14]
.text:0041821C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00418220                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00418224                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00418228                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0041822B                 call    GetDiskFreeSpaceA
.text:00418230                 sub     esp, 14h
.text:00418233                 mov     ebx, [esp+2Ch+var_10]
.text:00418237                 mov     esi, [esp+2Ch+var_C]
.text:0041823B                 mov     edi, [esp+2Ch+var_8]
.text:0041823F                 mov     ebp, [esp+2Ch+var_4]
.text:00418243                 add     esp, 2Ch
.text:00418246                 retn
.text:00418246 ; ---------------------------------------------------------------------------
.text:00418247                 align 10h
.text:00418250
.text:00418250 loc_418250:                             ; CODE XREF: .text:00419F7D↓p
.text:00418250                 sub     esp, 1Ch
.text:00418253                 mov     [esp+1Ch+var_4], esi
.text:00418257                 mov     esi, [esp+1Ch+arg_0]
.text:0041825B                 mov     [esp+1Ch+var_8], ebx
.text:0041825F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00418262                 call    sub_417760
.text:00418267                 test    eax, eax
.text:00418269                 mov     ebx, eax
.text:0041826B                 jz      short loc_418280
.text:0041826D                 cmp     byte ptr [eax], 0
.text:00418270                 jz      short loc_418280
.text:00418272                 test    esi, esi
.text:00418274                 jz      short loc_418280
.text:00418276                 cmp     byte ptr [esi], 0
.text:00418279                 jnz     short loc_4182A6
.text:0041827B                 nop
.text:0041827C                 lea     esi, [esi+0]
.text:00418280
.text:00418280 loc_418280:                             ; CODE XREF: sub_4181B0+BB↑j
.text:00418280                                         ; sub_4181B0+C0↑j ...
.text:00418280                 call    _errno
.text:00418285                 mov     dword ptr [eax], 2
.text:0041828B                 mov     esi, 0FFFFFFFFh
.text:00418290
.text:00418290 loc_418290:                             ; CODE XREF: sub_4181B0+108↓j
.text:00418290                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00418293                 call    free
.text:00418298                 mov     eax, esi
.text:0041829A                 mov     ebx, [esp+1Ch+var_8]
.text:0041829E                 mov     esi, [esp+1Ch+var_4]
.text:004182A2                 add     esp, 1Ch
.text:004182A5                 retn
.text:004182A6 ; ---------------------------------------------------------------------------
.text:004182A6
.text:004182A6 loc_4182A6:                             ; CODE XREF: sub_4181B0+C9↑j
.text:004182A6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:004182A9                 mov     edx, [esp+1Ch+arg_4]
.text:004182AD                 mov     [esp+1Ch+var_18], edx
.text:004182B1                 call    near ptr loc_417C0B+5
.text:004182B6                 mov     esi, eax
.text:004182B8                 jmp     short loc_418290
.text:004182B8 ; ---------------------------------------------------------------------------
.text:004182BA                 align 10h
.text:004182C0
.text:004182C0 loc_4182C0:                             ; CODE XREF: sub_4181B0+5F↑j
.text:004182C0                 push    ebp
.text:004182C1                 push    edi
.text:004182C2                 push    esi
.text:004182C3                 push    ebx
.text:004182C4                 sub     esp, 8Ch
.text:004182CA                 mov     ebp, [esp+9Ch+arg_0]
.text:004182D1                 call    sub_419C60
.text:004182D6                 test    eax, eax
.text:004182D8                 jz      short loc_4182E8
.text:004182DA                 call    sub_419BB0
.text:004182DF                 cmp     eax, 0Bh
.text:004182E2                 jle     loc_418410
.text:004182E8
.text:004182E8 loc_4182E8:                             ; CODE XREF: sub_4181B0+128↑j
.text:004182E8                 cld
.text:004182E9                 xor     eax, eax
.text:004182EB                 lea     ebx, [esp+9Ch+InBuffer]
.text:004182EF                 mov     ecx, 7
.text:004182F4                 mov     edi, ebx
.text:004182F6                 lea     esi, [esp+9Ch+var_4C]
.text:004182FA                 rep stosd
.text:004182FC                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00418304                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0041830C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00418314                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041831C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00418324                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0041832C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00418333                 call    CreateFileA
.text:00418338                 sub     esp, 1Ch
.text:0041833B                 mov     edi, eax
.text:0041833D                 cmp     eax, 0FFFFFFFFh
.text:00418340                 jz      short loc_4183B5
.text:00418342                 mov     [esp+9Ch+var_68], ebp
.text:00418346                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0041834A                 mov     [esp+9Ch+var_5C], esi
.text:0041834E                 mov     [esp+9Ch+var_60], 7303h
.text:00418356                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:0041835E                 mov     [esp+9Ch+var_54], 1
.text:00418366                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:0041836E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00418372                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:0041837A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:0041837E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00418386                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:0041838A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00418392                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00418395                 call    DeviceIoControl
.text:0041839A                 sub     esp, 20h
.text:0041839D                 mov     esi, eax
.text:0041839F                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:004183A2                 call    CloseHandle
.text:004183A7                 sub     esp, 4
.text:004183AA                 test    esi, esi
.text:004183AC                 jz      short loc_4183B5
.text:004183AE                 test    byte ptr [esp+9Ch+var_54], 1
.text:004183B3                 jz      short loc_4183D0
.text:004183B5
.text:004183B5 loc_4183B5:                             ; CODE XREF: sub_4181B0+190↑j
.text:004183B5                                         ; sub_4181B0+1FC↑j
.text:004183B5                 call    sub_419250
.text:004183BA                 mov     edi, eax
.text:004183BC                 call    _errno
.text:004183C1                 mov     [eax], edi
.text:004183C3                 xor     eax, eax
.text:004183C5
.text:004183C5 loc_4183C5:                             ; CODE XREF: sub_4181B0+25A↓j
.text:004183C5                                         ; sub_4181B0+297↓j
.text:004183C5                 add     esp, 8Ch
.text:004183CB                 pop     ebx
.text:004183CC                 pop     esi
.text:004183CD                 pop     edi
.text:004183CE                 pop     ebp
.text:004183CF                 retn
.text:004183D0 ; ---------------------------------------------------------------------------
.text:004183D0
.text:004183D0 loc_4183D0:                             ; CODE XREF: sub_4181B0+203↑j
.text:004183D0                 mov     edx, [esp+9Ch+var_48]
.text:004183D4                 mov     eax, 1
.text:004183D9                 mov     ebx, [esp+9Ch+arg_4]
.text:004183E0                 mov     ebp, [esp+9Ch+arg_8]
.text:004183E7                 mov     ecx, [esp+9Ch+arg_C]
.text:004183EE                 mov     [ebx], edx
.text:004183F0                 mov     edi, [esp+9Ch+var_44]
.text:004183F4                 mov     ebx, [esp+9Ch+arg_10]
.text:004183FB                 mov     [ebp+0], edi
.text:004183FE                 mov     esi, [esp+9Ch+var_40]
.text:00418402                 mov     [ecx], esi
.text:00418404                 mov     edx, [esp+9Ch+var_3C]
.text:00418408                 mov     [ebx], edx
.text:0041840A                 jmp     short loc_4183C5
.text:0041840A ; ---------------------------------------------------------------------------
.text:0041840C                 align 10h
.text:00418410
.text:00418410 loc_418410:                             ; CODE XREF: sub_4181B0+132↑j
.text:00418410                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00418413                 mov     eax, [esp+9Ch+arg_C]
.text:0041841A                 mov     ecx, [esp+9Ch+arg_10]
.text:00418421                 mov     edx, [esp+9Ch+arg_8]
.text:00418428                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0041842C                 mov     eax, [esp+9Ch+arg_4]
.text:00418433                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00418437                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0041843B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0041843F                 call    GetDiskFreeSpaceA
.text:00418444                 sub     esp, 14h
.text:00418447                 jmp     loc_4183C5
.text:00418447 sub_4181B0      endp ; sp-analysis failed
.text:00418447
.text:00418447 ; ---------------------------------------------------------------------------
.text:0041844C                 align 10h
.text:00418450
.text:00418450 ; =============== S U B R O U T I N E =======================================
.text:00418450
.text:00418450
.text:00418450 ; int __cdecl sub_418450(int, LPCSTR lpMultiByteStr, int, int)
.text:00418450 sub_418450      proc near               ; CODE XREF: sub_418610+E8↓p
.text:00418450
.text:00418450 var_254         = dword ptr -254h
.text:00418450 lpFileName      = dword ptr -24Ch
.text:00418450 dwFileAttributes= dword ptr -248h
.text:00418450 dwClsContext    = dword ptr -244h
.text:00418450 riid            = dword ptr -240h
.text:00418450 ppv             = dword ptr -23Ch
.text:00418450 cchWideChar     = dword ptr -238h
.text:00418450 var_22C         = dword ptr -22Ch
.text:00418450 var_224         = dword ptr -224h
.text:00418450 var_220         = dword ptr -220h
.text:00418450 WideCharStr     = word ptr -21Ch
.text:00418450 arg_0           = dword ptr  4
.text:00418450 lpMultiByteStr  = dword ptr  8
.text:00418450 arg_C           = dword ptr  10h
.text:00418450
.text:00418450                 push    edi
.text:00418451                 push    esi
.text:00418452                 push    ebx
.text:00418453                 sub     esp, 240h
.text:00418459                 mov     edi, [esp+24Ch+lpMultiByteStr]
.text:00418460                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00418463                 call    GetFileAttributesA
.text:00418468                 sub     esp, 4
.text:0041846B                 cmp     eax, 0FFFFFFFFh
.text:0041846E                 jz      short loc_41848A
.text:00418470                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:00418473                 and     eax, 0FFFFFFFEh
.text:00418476                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:0041847A                 call    SetFileAttributesA
.text:0041847F                 sub     esp, 8
.text:00418482                 test    eax, eax
.text:00418484                 jz      loc_4185F6
.text:0041848A
.text:0041848A loc_41848A:                             ; CODE XREF: sub_418450+1E↑j
.text:0041848A                                         ; sub_418450+1AE↓j
.text:0041848A                 mov     [esp+24Ch+lpFileName], 0 ; pvReserved
.text:00418491                 call    OleInitialize
.text:00418496                 sub     esp, 4
.text:00418499                 cmp     eax, 1
.text:0041849C                 ja      loc_4185DC
.text:004184A2                 mov     [esp+24Ch+riid], offset riid ; riid
.text:004184AA                 lea     ecx, [esp+24Ch+var_220]
.text:004184AE                 mov     [esp+24Ch+ppv], ecx ; ppv
.text:004184B2                 mov     [esp+24Ch+dwClsContext], 1 ; dwClsContext
.text:004184BA                 mov     [esp+24Ch+dwFileAttributes], 0 ; pUnkOuter
.text:004184C2                 mov     [esp+24Ch+lpFileName], offset rclsid ; rclsid
.text:004184C9                 call    CoCreateInstance
.text:004184CE                 sub     esp, 14h
.text:004184D1                 test    eax, eax
.text:004184D3                 js      loc_4185DC
.text:004184D9                 mov     ebx, [esp+24Ch+var_220]
.text:004184DD                 mov     edx, [esp+24Ch+arg_0]
.text:004184E4                 mov     esi, [ebx]
.text:004184E6                 mov     [esp+24Ch+dwFileAttributes], edx
.text:004184EA                 mov     [esp+24Ch+lpFileName], ebx
.text:004184ED                 call    dword ptr [esi+50h]
.text:004184F0                 sub     esp, 8
.text:004184F3                 mov     ebx, dword ptr [esp+248h+WideCharStr]
.text:004184F7                 mov     ecx, [esp+248h+arg_C]
.text:004184FE                 mov     esi, [ebx]
.text:00418500                 mov     [esp+248h+dwClsContext], ecx
.text:00418504                 mov     [esp+248h+dwFileAttributes], ebx
.text:00418507                 call    dword ptr [esi+1Ch]
.text:0041850A                 sub     esp, 8
.text:0041850D                 mov     ecx, dword ptr [esp+248h+WideCharStr]
.text:00418511                 lea     edx, [esp+248h+var_220]
.text:00418515                 mov     ebx, [ecx]
.text:00418517                 mov     [esp+248h+riid], edx
.text:0041851B                 mov     [esp+248h+dwClsContext], offset dword_41CEE0
.text:00418523                 mov     [esp+248h+dwFileAttributes], ecx
.text:00418526                 call    dword ptr [ebx]
.text:00418528                 sub     esp, 0Ch
.text:0041852B                 test    eax, eax
.text:0041852D                 js      loc_4185DC
.text:00418533                 call    AreFileApisANSI
.text:00418538                 mov     [esp+24Ch+cchWideChar], 104h ; cchWideChar
.text:00418540                 test    eax, eax
.text:00418542                 lea     esi, [esp+24Ch+WideCharStr]
.text:00418546                 setz    dl
.text:00418549                 mov     [esp+24Ch+ppv], esi ; lpWideCharStr
.text:0041854D                 mov     [esp+24Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:00418555                 mov     [esp+24Ch+dwClsContext], edi ; lpMultiByteStr
.text:00418559                 movzx   ebx, dl
.text:0041855C                 mov     [esp+24Ch+dwFileAttributes], 0 ; dwFlags
.text:00418564                 mov     [esp+24Ch+lpFileName], ebx ; CodePage
.text:00418567                 call    MultiByteToWideChar
.text:0041856C                 sub     esp, 18h
.text:0041856F                 test    eax, eax
.text:00418571                 js      short loc_4185DC
.text:00418573                 mov     ecx, [esp+24Ch+var_224]
.text:00418577                 mov     ebx, [ecx]
.text:00418579                 mov     [esp+24Ch+dwFileAttributes], esi
.text:0041857D                 mov     [esp+24Ch+lpFileName], ecx
.text:00418580                 mov     [esp+24Ch+dwClsContext], 1
.text:00418588                 call    dword ptr [ebx+18h]
.text:0041858B                 sub     esp, 0Ch
.text:0041858E                 mov     esi, eax
.text:00418590                 mov     edx, [esp+254h+var_22C]
.text:00418594                 mov     ecx, [edx]
.text:00418596                 mov     [esp+254h+var_254], edx
.text:00418599                 call    dword ptr [ecx+8]
.text:0041859C                 sub     esp, 4
.text:0041859F                 mov     ebx, [esp+24Ch+var_220]
.text:004185A3                 mov     ecx, [ebx]
.text:004185A5                 mov     [esp+24Ch+lpFileName], ebx
.text:004185A8                 call    dword ptr [ecx+8]
.text:004185AB                 sub     esp, 4
.text:004185AE                 call    CoUninitialize
.text:004185B3                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:004185B6                 call    GetFileAttributesA
.text:004185BB                 sub     esp, 4
.text:004185BE                 or      eax, 1
.text:004185C1                 mov     [esp+24Ch+dwFileAttributes], eax ; dwFileAttributes
.text:004185C5                 mov     [esp+24Ch+lpFileName], edi ; lpFileName
.text:004185C8                 call    SetFileAttributesA
.text:004185CD                 sub     esp, 8
.text:004185D0                 mov     eax, esi
.text:004185D2
.text:004185D2 loc_4185D2:                             ; CODE XREF: sub_418450+1A4↓j
.text:004185D2                 add     esp, 240h
.text:004185D8                 pop     ebx
.text:004185D9                 pop     esi
.text:004185DA                 pop     edi
.text:004185DB                 retn
.text:004185DC ; ---------------------------------------------------------------------------
.text:004185DC
.text:004185DC loc_4185DC:                             ; CODE XREF: sub_418450+4C↑j
.text:004185DC                                         ; sub_418450+83↑j ...
.text:004185DC                 call    sub_419250
.text:004185E1                 mov     edi, eax
.text:004185E3                 call    _errno
.text:004185E8                 mov     [eax], edi
.text:004185EA                 call    CoUninitialize
.text:004185EF                 mov     eax, 0FFFFFFFFh
.text:004185F4                 jmp     short loc_4185D2
.text:004185F6 ; ---------------------------------------------------------------------------
.text:004185F6
.text:004185F6 loc_4185F6:                             ; CODE XREF: sub_418450+34↑j
.text:004185F6                 mov     [esp+24Ch+lpFileName], edi
.text:004185F9                 call    sub_41AD20
.text:004185FE                 jmp     loc_41848A
.text:004185FE sub_418450      endp
.text:004185FE
.text:004185FE ; ---------------------------------------------------------------------------
.text:00418603 ; const char aLnk_1[]
.text:00418603 aLnk_1          db '.lnk',0             ; DATA XREF: sub_418610+7F↓o
.text:00418603                                         ; sub_418610:loc_41869F↓o
.text:00418608                 align 10h
.text:00418610
.text:00418610 ; =============== S U B R O U T I N E =======================================
.text:00418610
.text:00418610
.text:00418610 ; int __cdecl sub_418610(char *String, char *)
.text:00418610 sub_418610      proc near               ; CODE XREF: sub_404B50+39A↑p
.text:00418610                                         ; sub_404B50+980↑p
.text:00418610
.text:00418610 Str             = dword ptr -2Ch
.text:00418610 Source          = dword ptr -28h
.text:00418610 var_24          = dword ptr -24h
.text:00418610 Destination     = dword ptr -18h
.text:00418610 Block           = dword ptr -14h
.text:00418610 String          = dword ptr  4
.text:00418610 arg_4           = dword ptr  8
.text:00418610
.text:00418610                 push    ebp
.text:00418611                 push    edi
.text:00418612                 push    esi
.text:00418613                 push    ebx
.text:00418614                 sub     esp, 1Ch
.text:00418617                 mov     ebp, [esp+2Ch+String]
.text:0041861B                 mov     ebx, [esp+2Ch+arg_4]
.text:0041861F                 mov     [esp+2Ch+Str], ebp ; LPCSTR
.text:00418622                 call    sub_4192A0
.text:00418627                 mov     [esp+2Ch+Block], eax
.text:0041862B                 mov     edx, [esp+2Ch+Block]
.text:0041862F                 mov     eax, 0FFFFFFFFh
.text:00418634                 test    edx, edx
.text:00418636                 jz      loc_418721
.text:0041863C                 mov     [esp+2Ch+Str], ebx ; Str
.text:0041863F                 call    strlen
.text:00418644                 add     eax, 5
.text:00418647                 mov     [esp+2Ch+Str], eax ; Size
.text:0041864A                 call    malloc
.text:0041864F                 mov     [esp+2Ch+Destination], eax
.text:00418653                 mov     ecx, [esp+2Ch+Destination]
.text:00418657                 mov     eax, 0FFFFFFFFh
.text:0041865C                 test    ecx, ecx
.text:0041865E                 jz      loc_418721
.text:00418664                 mov     [esp+2Ch+Source], ebx ; Source
.text:00418668                 mov     edx, [esp+2Ch+Destination]
.text:0041866C                 mov     [esp+2Ch+Str], edx ; Destination
.text:0041866F                 call    strcpy
.text:00418674                 mov     [esp+2Ch+Source], 2Eh ; '.' ; Ch
.text:0041867C                 mov     eax, [esp+2Ch+Destination]
.text:00418680                 mov     [esp+2Ch+Str], eax ; Str
.text:00418683                 call    strrchr
.text:00418688                 test    eax, eax
.text:0041868A                 mov     esi, eax
.text:0041868C                 jz      short loc_41869F
.text:0041868E                 cld
.text:0041868F                 mov     ebx, offset aLnk_1 ; ".lnk"
.text:00418694                 mov     ecx, 5
.text:00418699                 mov     edi, ebx
.text:0041869B                 repe cmpsb
.text:0041869D                 jz      short loc_4186B3
.text:0041869F
.text:0041869F loc_41869F:                             ; CODE XREF: sub_418610+7C↑j
.text:0041869F                 mov     [esp+2Ch+Source], offset aLnk_1 ; ".lnk"
.text:004186A7                 mov     esi, [esp+2Ch+Destination]
.text:004186AB                 mov     [esp+2Ch+Str], esi ; Destination
.text:004186AE                 call    strcat
.text:004186B3
.text:004186B3 loc_4186B3:                             ; CODE XREF: sub_418610+8D↑j
.text:004186B3                 mov     esi, [esp+2Ch+Block]
.text:004186B7                 mov     [esp+2Ch+Str], esi
.text:004186BA                 call    sub_416EE0
.text:004186BF                 mov     [esp+2Ch+Block], eax
.text:004186C3                 mov     ebx, [esp+2Ch+Destination]
.text:004186C7                 mov     [esp+2Ch+Str], ebx
.text:004186CA                 call    sub_416EE0
.text:004186CF                 mov     [esp+2Ch+Destination], eax
.text:004186D3                 mov     [esp+2Ch+Str], ebp ; String
.text:004186D6                 call    _strdup
.text:004186DB                 mov     [esp+2Ch+Str], eax
.text:004186DE                 call    sub_416E60
.text:004186E3                 mov     [esp+2Ch+var_24], eax ; int
.text:004186E7                 mov     ebp, eax
.text:004186E9                 mov     edx, [esp+2Ch+Block]
.text:004186ED                 mov     eax, [esp+2Ch+Destination]
.text:004186F1                 mov     [esp+2Ch+Str], edx ; int
.text:004186F4                 mov     [esp+2Ch+Source], eax ; lpMultiByteStr
.text:004186F8                 call    sub_418450
.text:004186FD                 mov     ecx, [esp+2Ch+Block]
.text:00418701                 mov     esi, eax
.text:00418703                 mov     [esp+2Ch+Str], ecx ; Block
.text:00418706                 call    free
.text:0041870B                 mov     edi, [esp+2Ch+Destination]
.text:0041870F                 mov     [esp+2Ch+Str], edi ; Block
.text:00418712                 call    free
.text:00418717                 mov     [esp+2Ch+Str], ebp ; Block
.text:0041871A                 call    free
.text:0041871F                 mov     eax, esi
.text:00418721
.text:00418721 loc_418721:                             ; CODE XREF: sub_418610+26↑j
.text:00418721                                         ; sub_418610+4E↑j
.text:00418721                 add     esp, 1Ch
.text:00418724                 pop     ebx
.text:00418725                 pop     esi
.text:00418726                 pop     edi
.text:00418727                 pop     ebp
.text:00418728                 retn
.text:00418728 sub_418610      endp
.text:00418728
.text:00418728 ; ---------------------------------------------------------------------------
.text:00418729                 align 10h
.text:00418730
.text:00418730 ; =============== S U B R O U T I N E =======================================
.text:00418730
.text:00418730
.text:00418730 ; int __cdecl sub_418730(LPCSTR)
.text:00418730 sub_418730      proc near               ; CODE XREF: sub_404B50+F98↑p
.text:00418730                                         ; sub_404B50+1136↑p ...
.text:00418730
.text:00418730 lpFileName      = dword ptr -1Ch
.text:00418730 AccessMode      = dword ptr -18h
.text:00418730 var_8           = dword ptr -8
.text:00418730 var_4           = dword ptr -4
.text:00418730 arg_0           = dword ptr  4
.text:00418730
.text:00418730                 sub     esp, 1Ch
.text:00418733                 mov     [esp+1Ch+var_8], ebx
.text:00418737                 mov     ebx, [esp+1Ch+arg_0]
.text:0041873B                 mov     [esp+1Ch+var_4], esi
.text:0041873F                 test    ebx, ebx
.text:00418741                 jz      loc_4187D2
.text:00418747                 call    _errno
.text:0041874C                 mov     esi, [eax]
.text:0041874E                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:00418756                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00418759                 call    sub_418EF0
.text:0041875E                 test    eax, eax
.text:00418760                 jnz     short loc_4187C0
.text:00418762
.text:00418762 loc_418762:                             ; CODE XREF: sub_418730+A0↓j
.text:00418762                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0041876A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0041876D                 call    sub_418EF0
.text:00418772                 test    eax, eax
.text:00418774                 jz      short loc_4187B1
.text:00418776                 call    _errno
.text:0041877B                 mov     [eax], esi
.text:0041877D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00418780                 call    DeleteFileA
.text:00418785                 sub     esp, 4
.text:00418788                 xor     edx, edx
.text:0041878A                 test    eax, eax
.text:0041878C                 jz      short loc_41879C
.text:0041878E
.text:0041878E loc_41878E:                             ; CODE XREF: sub_418730+7F↓j
.text:0041878E                 mov     ebx, [esp+1Ch+var_8]
.text:00418792                 mov     eax, edx
.text:00418794                 mov     esi, [esp+1Ch+var_4]
.text:00418798                 add     esp, 1Ch
.text:0041879B                 retn
.text:0041879C ; ---------------------------------------------------------------------------
.text:0041879C
.text:0041879C loc_41879C:                             ; CODE XREF: sub_418730+5C↑j
.text:0041879C                 call    sub_419250
.text:004187A1                 mov     esi, eax
.text:004187A3                 call    _errno
.text:004187A8                 mov     [eax], esi
.text:004187AA
.text:004187AA loc_4187AA:                             ; CODE XREF: sub_418730+8C↓j
.text:004187AA                                         ; sub_418730+AD↓j
.text:004187AA                 mov     edx, 0FFFFFFFFh
.text:004187AF                 jmp     short loc_41878E
.text:004187B1 ; ---------------------------------------------------------------------------
.text:004187B1
.text:004187B1 loc_4187B1:                             ; CODE XREF: sub_418730+44↑j
.text:004187B1                 call    _errno
.text:004187B6                 mov     dword ptr [eax], 15h
.text:004187BC                 jmp     short loc_4187AA
.text:004187BC ; ---------------------------------------------------------------------------
.text:004187BE                 align 10h
.text:004187C0
.text:004187C0 loc_4187C0:                             ; CODE XREF: sub_418730+30↑j
.text:004187C0                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:004187C8                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:004187CB                 call    _chmod_0
.text:004187D0                 jmp     short loc_418762
.text:004187D2 ; ---------------------------------------------------------------------------
.text:004187D2
.text:004187D2 loc_4187D2:                             ; CODE XREF: sub_418730+11↑j
.text:004187D2                 call    _errno
.text:004187D7                 mov     dword ptr [eax], 16h
.text:004187DD                 jmp     short loc_4187AA
.text:004187DD sub_418730      endp
.text:004187DD
.text:004187DD ; ---------------------------------------------------------------------------
.text:004187DF                 align 10h
.text:004187E0
.text:004187E0 ; =============== S U B R O U T I N E =======================================
.text:004187E0
.text:004187E0
.text:004187E0 ; int __cdecl sub_4187E0(char *, int)
.text:004187E0 sub_4187E0      proc near               ; CODE XREF: sub_40AE00+92↑p
.text:004187E0
.text:004187E0 var_12C         = dword ptr -12Ch
.text:004187E0 lpString1       = dword ptr -128h
.text:004187E0 var_124         = dword ptr -124h
.text:004187E0 String1         = byte ptr -11Ch
.text:004187E0 var_C           = dword ptr -0Ch
.text:004187E0 var_8           = dword ptr -8
.text:004187E0 var_4           = dword ptr -4
.text:004187E0 arg_0           = dword ptr  4
.text:004187E0 arg_4           = dword ptr  8
.text:004187E0
.text:004187E0                 sub     esp, 12Ch
.text:004187E6                 mov     [esp+12Ch+var_C], ebx
.text:004187ED                 mov     ebx, [esp+12Ch+arg_0]
.text:004187F4                 mov     [esp+12Ch+var_4], edi
.text:004187FB                 mov     edi, [esp+12Ch+arg_4]
.text:00418802                 test    ebx, ebx
.text:00418804                 mov     [esp+12Ch+var_8], esi
.text:0041880B                 jz      short loc_41886E
.text:0041880D                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:00418810                 call    sub_415900
.text:00418815                 test    eax, eax
.text:00418817                 jz      short loc_418865
.text:00418819                 mov     [esp+12Ch+var_124], 104h
.text:00418821                 lea     esi, [esp+12Ch+String1]
.text:00418825                 mov     [esp+12Ch+lpString1], esi ; lpString1
.text:00418829                 mov     [esp+12Ch+var_12C], ebx ; char *
.text:0041882C                 call    sub_417670
.text:00418831                 inc     eax
.text:00418832                 mov     edx, 0FFFFFFFFh
.text:00418837                 jz      short loc_418847
.text:00418839                 mov     [esp+12Ch+lpString1], edi ; int
.text:0041883D                 mov     [esp+12Ch+var_12C], esi ; LPCSTR
.text:00418840
.text:00418840 loc_418840:                             ; CODE XREF: sub_4187E0+8C↓j
.text:00418840                 call    sub_41B000
.text:00418845                 mov     edx, eax
.text:00418847
.text:00418847 loc_418847:                             ; CODE XREF: sub_4187E0+57↑j
.text:00418847                                         ; sub_4187E0+9E↓j
.text:00418847                 mov     ebx, [esp+12Ch+var_C]
.text:0041884E                 mov     eax, edx
.text:00418850                 mov     esi, [esp+12Ch+var_8]
.text:00418857                 mov     edi, [esp+12Ch+var_4]
.text:0041885E                 add     esp, 12Ch
.text:00418864                 retn
.text:00418865 ; ---------------------------------------------------------------------------
.text:00418865
.text:00418865 loc_418865:                             ; CODE XREF: sub_4187E0+37↑j
.text:00418865                 mov     [esp+12Ch+lpString1], edi
.text:00418869                 mov     [esp+12Ch+var_12C], ebx
.text:0041886C                 jmp     short loc_418840
.text:0041886E ; ---------------------------------------------------------------------------
.text:0041886E
.text:0041886E loc_41886E:                             ; CODE XREF: sub_4187E0+2B↑j
.text:0041886E                 call    _errno
.text:00418873                 mov     dword ptr [eax], 16h
.text:00418879                 mov     edx, 0FFFFFFFFh
.text:0041887E                 jmp     short loc_418847
.text:0041887E sub_4187E0      endp
.text:0041887E
.text:00418880
.text:00418880 ; =============== S U B R O U T I N E =======================================
.text:00418880
.text:00418880
.text:00418880 sub_418880      proc near               ; CODE XREF: sub_404B50+B5F↑p
.text:00418880
.text:00418880 arg_0           = dword ptr  4
.text:00418880
.text:00418880                 sub     esp, 0Ch
.text:00418883                 mov     edx, [esp+0Ch+arg_0]
.text:00418887                 test    edx, edx
.text:00418889                 jz      short loc_4188A0
.text:0041888B                 call    _errno
.text:00418890                 mov     dword ptr [eax], 16h
.text:00418896
.text:00418896 loc_418896:                             ; CODE XREF: sub_418880+2B↓j
.text:00418896                 mov     eax, 0FFFFFFFFh
.text:0041889B                 add     esp, 0Ch
.text:0041889E                 retn
.text:0041889E ; ---------------------------------------------------------------------------
.text:0041889F                 align 10h
.text:004188A0
.text:004188A0 loc_4188A0:                             ; CODE XREF: sub_418880+9↑j
.text:004188A0                 call    _errno
.text:004188A5                 mov     dword ptr [eax], 28h ; '('
.text:004188AB                 jmp     short loc_418896
.text:004188AB sub_418880      endp
.text:004188AB
.text:004188AB ; ---------------------------------------------------------------------------
.text:004188AD                 align 10h
.text:004188B0
.text:004188B0 ; =============== S U B R O U T I N E =======================================
.text:004188B0
.text:004188B0
.text:004188B0 ; int __cdecl sub_4188B0(LPCSTR, char *, int)
.text:004188B0 sub_4188B0      proc near               ; CODE XREF: sub_414650+4A↑p
.text:004188B0                                         ; sub_417BA0+1A↑p ...
.text:004188B0
.text:004188B0 var_13C         = dword ptr -13Ch
.text:004188B0 lpString1       = dword ptr -138h
.text:004188B0 var_134         = dword ptr -134h
.text:004188B0 String1         = byte ptr -12Ch
.text:004188B0 var_10          = dword ptr -10h
.text:004188B0 var_C           = dword ptr -0Ch
.text:004188B0 var_8           = dword ptr -8
.text:004188B0 var_4           = dword ptr -4
.text:004188B0 arg_0           = dword ptr  4
.text:004188B0 arg_4           = dword ptr  8
.text:004188B0 arg_8           = dword ptr  0Ch
.text:004188B0
.text:004188B0                 sub     esp, 13Ch
.text:004188B6                 mov     [esp+13Ch+var_10], ebx
.text:004188BD                 mov     ebx, [esp+13Ch+arg_8]
.text:004188C4                 mov     [esp+13Ch+var_C], esi
.text:004188CB                 mov     esi, [esp+13Ch+arg_4]
.text:004188D2                 mov     [esp+13Ch+var_8], edi
.text:004188D9                 mov     edi, [esp+13Ch+arg_0]
.text:004188E0                 mov     [esp+13Ch+var_4], ebp
.text:004188E7                 mov     [esp+13Ch+var_134], ebx ; int
.text:004188EB                 mov     [esp+13Ch+lpString1], esi ; int
.text:004188EF                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004188F2                 call    sub_4168E0
.text:004188F7                 cmp     eax, 0FFFFFFFFh
.text:004188FA                 mov     edx, eax
.text:004188FC                 jz      short loc_41890E
.text:004188FE                 mov     ecx, [ebx]
.text:00418900                 and     ecx, 0F000h
.text:00418906                 cmp     ecx, 0A000h
.text:0041890C                 jz      short loc_418933
.text:0041890E
.text:0041890E loc_41890E:                             ; CODE XREF: sub_4188B0+4C↑j
.text:0041890E                                         ; sub_4188B0+A1↓j ...
.text:0041890E                 mov     ebx, [esp+13Ch+var_10]
.text:00418915                 mov     eax, edx
.text:00418917                 mov     esi, [esp+13Ch+var_C]
.text:0041891E                 mov     edi, [esp+13Ch+var_8]
.text:00418925                 mov     ebp, [esp+13Ch+var_4]
.text:0041892C                 add     esp, 13Ch
.text:00418932                 retn
.text:00418933 ; ---------------------------------------------------------------------------
.text:00418933
.text:00418933 loc_418933:                             ; CODE XREF: sub_4188B0+5C↑j
.text:00418933                 mov     [esp+13Ch+var_134], 104h
.text:0041893B                 lea     ebp, [esp+13Ch+String1]
.text:0041893F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00418943                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00418946                 call    sub_417670
.text:0041894B                 inc     eax
.text:0041894C                 mov     edx, 0FFFFFFFFh
.text:00418951                 jz      short loc_41890E
.text:00418953                 mov     [esp+13Ch+var_134], ebx ; int
.text:00418957                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0041895B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0041895E                 call    sub_4168E0
.text:00418963                 mov     edx, eax
.text:00418965                 jmp     short loc_41890E
.text:00418965 sub_4188B0      endp
.text:00418965
.text:00418965 ; ---------------------------------------------------------------------------
.text:00418967                 align 10h
.text:00418970
.text:00418970 ; =============== S U B R O U T I N E =======================================
.text:00418970
.text:00418970
.text:00418970 sub_418970      proc near               ; CODE XREF: sub_4027B0+A8↑p
.text:00418970                                         ; sub_404060+92↑p ...
.text:00418970                 xor     eax, eax
.text:00418972                 retn
.text:00418972 sub_418970      endp
.text:00418972
.text:00418972 ; ---------------------------------------------------------------------------
.text:00418973                 align 10h
.text:00418980
.text:00418980 ; =============== S U B R O U T I N E =======================================
.text:00418980
.text:00418980
.text:00418980 sub_418980      proc near               ; CODE XREF: sub_406B00+3EF↑p
.text:00418980
.text:00418980 FileHandle      = dword ptr -2Ch
.text:00418980 Offset          = qword ptr -28h
.text:00418980 Origin          = dword ptr -20h
.text:00418980 var_10          = dword ptr -10h
.text:00418980 var_C           = dword ptr -0Ch
.text:00418980 var_8           = dword ptr -8
.text:00418980 var_4           = dword ptr -4
.text:00418980 arg_0           = dword ptr  4
.text:00418980 arg_4           = qword ptr  8
.text:00418980
.text:00418980                 sub     esp, 2Ch
.text:00418983                 mov     [esp+2Ch+var_4], ebp
.text:00418987                 mov     ebp, [esp+2Ch+arg_0]
.text:0041898B                 mov     [esp+2Ch+var_10], ebx
.text:0041898F                 mov     ebx, dword ptr [esp+2Ch+arg_4]
.text:00418993                 mov     [esp+2Ch+var_C], esi
.text:00418997                 mov     esi, dword ptr [esp+2Ch+arg_4+4]
.text:0041899B                 mov     [esp+2Ch+var_8], edi
.text:0041899F                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004189A2                 call    _get_osfhandle
.text:004189A7                 cmp     eax, 0FFFFFFFFh
.text:004189AA                 mov     edi, eax
.text:004189AC                 jz      short loc_418A16
.text:004189AE                 mov     [esp+2Ch+FileHandle], ebp ; FileHandle
.text:004189B1                 mov     [esp+2Ch+Origin], 0 ; Origin
.text:004189B9                 mov     dword ptr [esp+2Ch+Offset], ebx ; Offset
.text:004189BD                 mov     dword ptr [esp+2Ch+Offset+4], esi
.text:004189C1                 call    _lseeki64
.text:004189C6                 mov     ebp, edx
.text:004189C8                 xor     eax, ebx
.text:004189CA                 xor     ebp, esi
.text:004189CC                 or      ebp, eax
.text:004189CE                 jnz     short loc_418A09
.text:004189D0                 mov     [esp+2Ch+FileHandle], edi ; hFile
.text:004189D3                 call    SetEndOfFile
.text:004189D8                 sub     esp, 4
.text:004189DB                 xor     edx, edx
.text:004189DD                 test    eax, eax
.text:004189DF                 jz      short loc_4189F7
.text:004189E1
.text:004189E1 loc_4189E1:                             ; CODE XREF: sub_418980+87↓j
.text:004189E1                 mov     ebx, [esp+2Ch+var_10]
.text:004189E5                 mov     eax, edx
.text:004189E7                 mov     esi, [esp+2Ch+var_C]
.text:004189EB                 mov     edi, [esp+2Ch+var_8]
.text:004189EF                 mov     ebp, [esp+2Ch+var_4]
.text:004189F3                 add     esp, 2Ch
.text:004189F6                 retn
.text:004189F7 ; ---------------------------------------------------------------------------
.text:004189F7
.text:004189F7 loc_4189F7:                             ; CODE XREF: sub_418980+5F↑j
.text:004189F7                 call    _errno
.text:004189FC                 mov     dword ptr [eax], offset sub_419250
.text:00418A02
.text:00418A02 loc_418A02:                             ; CODE XREF: sub_418980+94↓j
.text:00418A02                                         ; sub_418980+A1↓j
.text:00418A02                 mov     edx, 0FFFFFFFFh
.text:00418A07                 jmp     short loc_4189E1
.text:00418A09 ; ---------------------------------------------------------------------------
.text:00418A09
.text:00418A09 loc_418A09:                             ; CODE XREF: sub_418980+4E↑j
.text:00418A09                 call    _errno
.text:00418A0E                 mov     dword ptr [eax], 16h
.text:00418A14                 jmp     short loc_418A02
.text:00418A16 ; ---------------------------------------------------------------------------
.text:00418A16
.text:00418A16 loc_418A16:                             ; CODE XREF: sub_418980+2C↑j
.text:00418A16                 call    _errno
.text:00418A1B                 mov     dword ptr [eax], 9
.text:00418A21                 jmp     short loc_418A02
.text:00418A21 sub_418980      endp
.text:00418A21
.text:00418A21 ; ---------------------------------------------------------------------------
.text:00418A23                 align 10h
.text:00418A30
.text:00418A30 ; =============== S U B R O U T I N E =======================================
.text:00418A30
.text:00418A30
.text:00418A30 sub_418A30      proc near               ; CODE XREF: sub_404B50+9BD↑p
.text:00418A30
.text:00418A30 arg_0           = dword ptr  4
.text:00418A30
.text:00418A30                 sub     esp, 0Ch
.text:00418A33                 mov     edx, [esp+0Ch+arg_0]
.text:00418A37                 test    edx, edx
.text:00418A39                 jz      short loc_418A41
.text:00418A3B                 xor     eax, eax
.text:00418A3D
.text:00418A3D loc_418A3D:                             ; CODE XREF: sub_418A30+21↓j
.text:00418A3D                 add     esp, 0Ch
.text:00418A40                 retn
.text:00418A41 ; ---------------------------------------------------------------------------
.text:00418A41
.text:00418A41 loc_418A41:                             ; CODE XREF: sub_418A30+9↑j
.text:00418A41                 call    _errno
.text:00418A46                 mov     dword ptr [eax], 16h
.text:00418A4C                 mov     eax, 0FFFFFFFFh
.text:00418A51                 jmp     short loc_418A3D
.text:00418A51 sub_418A30      endp
.text:00418A51
.text:00418A51 ; ---------------------------------------------------------------------------
.text:00418A53                 align 10h
.text:00418A60
.text:00418A60 ; =============== S U B R O U T I N E =======================================
.text:00418A60
.text:00418A60
.text:00418A60 ; int __cdecl sub_418A60(LPCSTR, LPCSTR lpFileName)
.text:00418A60 sub_418A60      proc near               ; CODE XREF: sub_404B50+6EA↑p
.text:00418A60                                         ; sub_404B50+E31↑p ...
.text:00418A60
.text:00418A60 lpExistingFileName= dword ptr -1Ch
.text:00418A60 lpNewFileName   = dword ptr -18h
.text:00418A60 var_8           = dword ptr -8
.text:00418A60 var_4           = dword ptr -4
.text:00418A60 arg_0           = dword ptr  4
.text:00418A60 lpFileName      = dword ptr  8
.text:00418A60
.text:00418A60                 sub     esp, 1Ch
.text:00418A63                 mov     [esp+1Ch+var_4], esi
.text:00418A67                 mov     esi, [esp+1Ch+arg_0]
.text:00418A6B                 mov     [esp+1Ch+var_8], ebx
.text:00418A6F                 mov     ebx, [esp+1Ch+lpFileName]
.text:00418A73                 test    esi, esi
.text:00418A75                 jz      short loc_418AD1
.text:00418A77                 test    ebx, ebx
.text:00418A79                 jz      short loc_418AD1
.text:00418A7B                 mov     [esp+1Ch+lpNewFileName], 0 ; int
.text:00418A83                 mov     [esp+1Ch+lpExistingFileName], ebx ; lpFileName
.text:00418A86                 call    sub_418EF0
.text:00418A8B                 test    eax, eax
.text:00418A8D                 jz      short loc_418AC7
.text:00418A8F
.text:00418A8F loc_418A8F:                             ; CODE XREF: sub_418A60+6F↓j
.text:00418A8F                 mov     [esp+1Ch+lpNewFileName], ebx ; lpNewFileName
.text:00418A93                 mov     [esp+1Ch+lpExistingFileName], esi ; lpExistingFileName
.text:00418A96                 call    MoveFileA
.text:00418A9B                 sub     esp, 8
.text:00418A9E                 xor     edx, edx
.text:00418AA0                 test    eax, eax
.text:00418AA2                 jz      short loc_418AB2
.text:00418AA4
.text:00418AA4 loc_418AA4:                             ; CODE XREF: sub_418A60+65↓j
.text:00418AA4                 mov     ebx, [esp+1Ch+var_8]
.text:00418AA8                 mov     eax, edx
.text:00418AAA                 mov     esi, [esp+1Ch+var_4]
.text:00418AAE                 add     esp, 1Ch
.text:00418AB1                 retn
.text:00418AB2 ; ---------------------------------------------------------------------------
.text:00418AB2
.text:00418AB2 loc_418AB2:                             ; CODE XREF: sub_418A60+42↑j
.text:00418AB2                 call    sub_419250
.text:00418AB7                 mov     esi, eax
.text:00418AB9                 call    _errno
.text:00418ABE                 mov     [eax], esi
.text:00418AC0
.text:00418AC0 loc_418AC0:                             ; CODE XREF: sub_418A60+7C↓j
.text:00418AC0                 mov     edx, 0FFFFFFFFh
.text:00418AC5                 jmp     short loc_418AA4
.text:00418AC7 ; ---------------------------------------------------------------------------
.text:00418AC7
.text:00418AC7 loc_418AC7:                             ; CODE XREF: sub_418A60+2D↑j
.text:00418AC7                 mov     [esp+1Ch+lpExistingFileName], ebx ; LPCSTR
.text:00418ACA                 call    sub_418730
.text:00418ACF                 jmp     short loc_418A8F
.text:00418AD1 ; ---------------------------------------------------------------------------
.text:00418AD1
.text:00418AD1 loc_418AD1:                             ; CODE XREF: sub_418A60+15↑j
.text:00418AD1                                         ; sub_418A60+19↑j
.text:00418AD1                 call    _errno
.text:00418AD6                 mov     dword ptr [eax], 16h
.text:00418ADC                 jmp     short loc_418AC0
.text:00418ADC sub_418A60      endp
.text:00418ADC
.text:00418ADC ; ---------------------------------------------------------------------------
.text:00418ADE                 align 10h
.text:00418AE0
.text:00418AE0 ; =============== S U B R O U T I N E =======================================
.text:00418AE0
.text:00418AE0
.text:00418AE0 sub_418AE0      proc near               ; CODE XREF: sub_406B00:loc_406CDF↑p
.text:00418AE0
.text:00418AE0 lpSystemInfo    = dword ptr -0Ch
.text:00418AE0 var_4           = dword ptr -4
.text:00418AE0
.text:00418AE0                 sub     esp, 0Ch
.text:00418AE3                 mov     [esp+0Ch+var_4], edi
.text:00418AE7                 mov     edi, ds:dword_420630
.text:00418AED                 test    edi, edi
.text:00418AEF                 mov     eax, edi
.text:00418AF1                 jz      short loc_418B00
.text:00418AF3
.text:00418AF3 loc_418AF3:                             ; CODE XREF: sub_418AE0+48↓j
.text:00418AF3                 mov     eax, [edi+4]
.text:00418AF6                 mov     edi, [esp+0Ch+var_4]
.text:00418AFA                 add     esp, 0Ch
.text:00418AFD                 retn
.text:00418AFD ; ---------------------------------------------------------------------------
.text:00418AFE                 align 10h
.text:00418B00
.text:00418B00 loc_418B00:                             ; CODE XREF: sub_418AE0+11↑j
.text:00418B00                 cld
.text:00418B01                 mov     edi, offset SystemInfo
.text:00418B06                 mov     ecx, 9
.text:00418B0B                 mov     ds:dword_420630, edi
.text:00418B11                 rep stosd
.text:00418B13                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00418B1A                 call    GetSystemInfo
.text:00418B1F                 mov     edi, ds:dword_420630
.text:00418B25                 sub     esp, 4
.text:00418B28                 jmp     short loc_418AF3
.text:00418B28 sub_418AE0      endp
.text:00418B28
.text:00418B28 ; ---------------------------------------------------------------------------
.text:00418B2A                 align 10h
.text:00418B30
.text:00418B30 ; =============== S U B R O U T I N E =======================================
.text:00418B30
.text:00418B30
.text:00418B30 sub_418B30      proc near               ; CODE XREF: sub_407B90+1BB↑p
.text:00418B30                                         ; sub_409D60+9D↑p
.text:00418B30
.text:00418B30 arg_0           = dword ptr  4
.text:00418B30
.text:00418B30                 sub     esp, 0Ch
.text:00418B33                 mov     edx, [esp+0Ch+arg_0]
.text:00418B37                 test    edx, edx
.text:00418B39                 jz      short loc_418B4B
.text:00418B3B                 mov     [esp+0Ch+arg_0], 0
.text:00418B43                 add     esp, 0Ch
.text:00418B46                 jmp     sub_41B0A0
.text:00418B4B ; ---------------------------------------------------------------------------
.text:00418B4B
.text:00418B4B loc_418B4B:                             ; CODE XREF: sub_418B30+9↑j
.text:00418B4B                 call    _errno
.text:00418B50                 mov     dword ptr [eax], 16h
.text:00418B56                 mov     eax, 0FFFFFFFFh
.text:00418B5B                 add     esp, 0Ch
.text:00418B5E                 retn
.text:00418B5E sub_418B30      endp
.text:00418B5E
.text:00418B5E ; ---------------------------------------------------------------------------
.text:00418B5F                 align 10h
.text:00418B60
.text:00418B60 ; =============== S U B R O U T I N E =======================================
.text:00418B60
.text:00418B60
.text:00418B60 sub_418B60      proc near               ; CODE XREF: sub_4083D0+6A↑p
.text:00418B60
.text:00418B60 arg_0           = dword ptr  4
.text:00418B60
.text:00418B60                 sub     esp, 0Ch
.text:00418B63                 mov     edx, [esp+0Ch+arg_0]
.text:00418B67                 test    edx, edx
.text:00418B69                 js      short loc_418B71
.text:00418B6B                 xor     eax, eax
.text:00418B6D
.text:00418B6D loc_418B6D:                             ; CODE XREF: sub_418B60+21↓j
.text:00418B6D                 add     esp, 0Ch
.text:00418B70                 retn
.text:00418B71 ; ---------------------------------------------------------------------------
.text:00418B71
.text:00418B71 loc_418B71:                             ; CODE XREF: sub_418B60+9↑j
.text:00418B71                 call    _errno
.text:00418B76                 mov     dword ptr [eax], 16h
.text:00418B7C                 mov     eax, 0FFFFFFFFh
.text:00418B81                 jmp     short loc_418B6D
.text:00418B81 sub_418B60      endp
.text:00418B81
.text:00418B81 ; ---------------------------------------------------------------------------
.text:00418B83                 align 10h
.text:00418B90
.text:00418B90 ; =============== S U B R O U T I N E =======================================
.text:00418B90
.text:00418B90
.text:00418B90 ; int __cdecl sub_418B90(void *)
.text:00418B90 sub_418B90      proc near               ; CODE XREF: sub_409E20+268↑p
.text:00418B90                                         ; .text:0040C1A8↑p
.text:00418B90
.text:00418B90 Block           = dword ptr -0Ch
.text:00418B90 var_4           = dword ptr -4
.text:00418B90 arg_0           = dword ptr  4
.text:00418B90
.text:00418B90                 sub     esp, 0Ch
.text:00418B93                 mov     [esp+0Ch+var_4], ebx
.text:00418B97                 mov     ebx, [esp+0Ch+arg_0]
.text:00418B9B                 test    ebx, ebx
.text:00418B9D                 jz      short loc_418BDB
.text:00418B9F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:00418BA2                 jz      short loc_418BC9
.text:00418BA4                 mov     [esp+0Ch+Block], ebx
.text:00418BA7                 call    sub_41B0F0
.text:00418BAC                 mov     edx, [ebx+4]
.text:00418BAF                 mov     [esp+0Ch+Block], edx ; Block
.text:00418BB2                 call    free
.text:00418BB7                 mov     [esp+0Ch+Block], ebx ; Block
.text:00418BBA                 call    free
.text:00418BBF                 xor     eax, eax
.text:00418BC1
.text:00418BC1 loc_418BC1:                             ; CODE XREF: sub_418B90+49↓j
.text:00418BC1                 mov     ebx, [esp+0Ch+var_4]
.text:00418BC5                 add     esp, 0Ch
.text:00418BC8                 retn
.text:00418BC9 ; ---------------------------------------------------------------------------
.text:00418BC9
.text:00418BC9 loc_418BC9:                             ; CODE XREF: sub_418B90+12↑j
.text:00418BC9                 call    _errno
.text:00418BCE                 mov     dword ptr [eax], 9
.text:00418BD4
.text:00418BD4 loc_418BD4:                             ; CODE XREF: sub_418B90+56↓j
.text:00418BD4                 mov     eax, 0FFFFFFFFh
.text:00418BD9                 jmp     short loc_418BC1
.text:00418BDB ; ---------------------------------------------------------------------------
.text:00418BDB
.text:00418BDB loc_418BDB:                             ; CODE XREF: sub_418B90+D↑j
.text:00418BDB                 call    _errno
.text:00418BE0                 mov     dword ptr [eax], 16h
.text:00418BE6                 jmp     short loc_418BD4
.text:00418BE6 sub_418B90      endp
.text:00418BE6
.text:00418BE6 ; ---------------------------------------------------------------------------
.text:00418BE8                 align 10h
.text:00418BF0 ; const char asc_418BF0[2]
.text:00418BF0 asc_418BF0      db '\',0                ; DATA XREF: sub_418C00+D2↓o
.text:00418BF2                 align 10h
.text:00418C00
.text:00418C00 ; =============== S U B R O U T I N E =======================================
.text:00418C00
.text:00418C00
.text:00418C00 ; int __cdecl sub_418C00(LPCSTR)
.text:00418C00 sub_418C00      proc near               ; CODE XREF: sub_409E20+52↑p
.text:00418C00                                         ; .text:0040C0AB↑p
.text:00418C00
.text:00418C00 lpFileName      = dword ptr -13Ch
.text:00418C00 Source          = dword ptr -138h
.text:00418C00 Destination     = byte ptr -12Ch
.text:00418C00 var_10          = dword ptr -10h
.text:00418C00 var_C           = dword ptr -0Ch
.text:00418C00 var_8           = dword ptr -8
.text:00418C00 var_4           = dword ptr -4
.text:00418C00 arg_0           = dword ptr  4
.text:00418C00
.text:00418C00                 sub     esp, 13Ch
.text:00418C06                 mov     [esp+13Ch+var_C], esi
.text:00418C0D                 mov     esi, [esp+13Ch+arg_0]
.text:00418C14                 mov     [esp+13Ch+var_10], ebx
.text:00418C1B                 mov     [esp+13Ch+var_8], edi
.text:00418C22                 test    esi, esi
.text:00418C24                 mov     [esp+13Ch+var_4], ebp
.text:00418C2B                 jz      short loc_418C32
.text:00418C2D                 cmp     byte ptr [esi], 0
.text:00418C30                 jnz     short loc_418C62
.text:00418C32
.text:00418C32 loc_418C32:                             ; CODE XREF: sub_418C00+2B↑j
.text:00418C32                 call    _errno
.text:00418C37                 mov     dword ptr [eax], 2
.text:00418C3D
.text:00418C3D loc_418C3D:                             ; CODE XREF: sub_418C00+139↓j
.text:00418C3D                                         ; sub_418C00+14C↓j
.text:00418C3D                 xor     eax, eax
.text:00418C3F
.text:00418C3F loc_418C3F:                             ; CODE XREF: sub_418C00+90↓j
.text:00418C3F                                         ; sub_418C00+A4↓j ...
.text:00418C3F                 mov     ebx, [esp+13Ch+var_10]
.text:00418C46                 mov     esi, [esp+13Ch+var_C]
.text:00418C4D                 mov     edi, [esp+13Ch+var_8]
.text:00418C54                 mov     ebp, [esp+13Ch+var_4]
.text:00418C5B                 add     esp, 13Ch
.text:00418C61                 retn
.text:00418C62 ; ---------------------------------------------------------------------------
.text:00418C62
.text:00418C62 loc_418C62:                             ; CODE XREF: sub_418C00+30↑j
.text:00418C62                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:00418C65                 call    GetFileAttributesA
.text:00418C6A                 sub     esp, 4
.text:00418C6D                 cmp     eax, 0FFFFFFFFh
.text:00418C70                 jz      loc_418D3E
.text:00418C76                 test    al, 10h
.text:00418C78                 jz      loc_418D2E
.text:00418C7E                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:00418C85                 call    malloc
.text:00418C8A                 mov     ebx, eax
.text:00418C8C                 xor     eax, eax
.text:00418C8E                 test    ebx, ebx
.text:00418C90                 jz      short loc_418C3F
.text:00418C92                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:00418C99                 call    malloc
.text:00418C9E                 mov     edi, eax
.text:00418CA0                 xor     eax, eax
.text:00418CA2                 test    edi, edi
.text:00418CA4                 jz      short loc_418C3F
.text:00418CA6                 mov     [esp+13Ch+Source], esi ; Source
.text:00418CAA                 lea     ebp, [esp+13Ch+Destination]
.text:00418CAE                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00418CB1                 call    strcpy
.text:00418CB6                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00418CB9                 call    strlen
.text:00418CBE                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:00418CC2                 jz      short loc_418CF0
.text:00418CC4                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00418CC7                 call    strlen
.text:00418CCC                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:00418CD0                 jz      short loc_418CF0
.text:00418CD2                 mov     [esp+13Ch+Source], offset asc_418BF0 ; "\\"
.text:00418CDA                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00418CDD                 call    strcat
.text:00418CE2                 lea     esi, [esi+0]
.text:00418CE9                 lea     edi, [edi+0]
.text:00418CF0
.text:00418CF0 loc_418CF0:                             ; CODE XREF: sub_418C00+C2↑j
.text:00418CF0                                         ; sub_418C00+D0↑j
.text:00418CF0                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:00418CF3                 call    sub_4192A0
.text:00418CF8                 mov     [esp+13Ch+lpFileName], eax
.text:00418CFB                 call    sub_416EE0
.text:00418D00                 mov     [edi], eax
.text:00418D02                 mov     eax, ebx
.text:00418D04                 mov     [ebx+4], edi
.text:00418D07                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:00418D0D                 mov     dword ptr [ebx+8], 118h
.text:00418D14                 mov     dword ptr [ebx+0Ch], 118h
.text:00418D1B                 mov     dword ptr [ebx+10h], 8
.text:00418D22                 mov     dword ptr [ebx+14h], 1
.text:00418D29                 jmp     loc_418C3F
.text:00418D2E ; ---------------------------------------------------------------------------
.text:00418D2E
.text:00418D2E loc_418D2E:                             ; CODE XREF: sub_418C00+78↑j
.text:00418D2E                 call    _errno
.text:00418D33                 mov     dword ptr [eax], 14h
.text:00418D39                 jmp     loc_418C3D
.text:00418D3E ; ---------------------------------------------------------------------------
.text:00418D3E
.text:00418D3E loc_418D3E:                             ; CODE XREF: sub_418C00+70↑j
.text:00418D3E                 call    sub_419250
.text:00418D43                 mov     esi, eax
.text:00418D45                 call    _errno
.text:00418D4A                 mov     [eax], esi
.text:00418D4C                 jmp     loc_418C3D
.text:00418D4C sub_418C00      endp
.text:00418D4C
.text:00418D4C ; ---------------------------------------------------------------------------
.text:00418D51                 align 10h
.text:00418D60
.text:00418D60 ; =============== S U B R O U T I N E =======================================
.text:00418D60
.text:00418D60
.text:00418D60 sub_418D60      proc near               ; CODE XREF: sub_40AAE0+97↑p
.text:00418D60                                         ; sub_40AAE0+BF↑p ...
.text:00418D60
.text:00418D60 var_1C          = dword ptr -1Ch
.text:00418D60 var_18          = dword ptr -18h
.text:00418D60 var_14          = dword ptr -14h
.text:00418D60 arg_0           = dword ptr  4
.text:00418D60 arg_4           = dword ptr  8
.text:00418D60 arg_8           = dword ptr  0Ch
.text:00418D60
.text:00418D60                 push    edi
.text:00418D61                 push    esi
.text:00418D62                 push    ebx
.text:00418D63                 sub     esp, 10h
.text:00418D66                 mov     edi, [esp+1Ch+arg_8]
.text:00418D6A                 mov     esi, [esp+1Ch+arg_0]
.text:00418D6E                 mov     ebx, [esp+1Ch+arg_4]
.text:00418D72                 cmp     edi, 0Fh
.text:00418D75                 jbe     short loc_418DC0
.text:00418D77                 mov     ecx, esi
.text:00418D79                 neg     ecx
.text:00418D7B                 and     ecx, 3
.text:00418D7E                 sub     edi, ecx
.text:00418D80                 mov     edx, ecx
.text:00418D82                 test    ecx, ecx
.text:00418D84                 jz      short loc_418D9A
.text:00418D86                 lea     esi, [esi+0]
.text:00418D89                 lea     edi, [edi+0]
.text:00418D90
.text:00418D90 loc_418D90:                             ; CODE XREF: sub_418D60+38↓j
.text:00418D90                 movzx   ecx, byte ptr [ebx]
.text:00418D93                 inc     ebx
.text:00418D94                 mov     [esi], cl
.text:00418D96                 inc     esi
.text:00418D97                 dec     edx
.text:00418D98                 jnz     short loc_418D90
.text:00418D9A
.text:00418D9A loc_418D9A:                             ; CODE XREF: sub_418D60+24↑j
.text:00418D9A                 test    bl, 3
.text:00418D9D                 jnz     short loc_418DE3
.text:00418D9F                 mov     [esp+1Ch+var_18], ebx
.text:00418DA3                 mov     edx, edi
.text:00418DA5                 shr     edx, 2
.text:00418DA8                 mov     [esp+1Ch+var_14], edx
.text:00418DAC                 mov     [esp+1Ch+var_1C], esi
.text:00418DAF                 call    sub_41B150
.text:00418DB4
.text:00418DB4 loc_418DB4:                             ; CODE XREF: sub_418D60+98↓j
.text:00418DB4                 mov     edx, edi
.text:00418DB6                 and     edx, 0FFFFFFFCh
.text:00418DB9                 and     edi, 3
.text:00418DBC                 add     ebx, edx
.text:00418DBE                 add     esi, edx
.text:00418DC0
.text:00418DC0 loc_418DC0:                             ; CODE XREF: sub_418D60+15↑j
.text:00418DC0                 test    edi, edi
.text:00418DC2                 mov     edx, edi
.text:00418DC4                 jz      short loc_418DDA
.text:00418DC6                 lea     esi, [esi+0]
.text:00418DC9                 lea     edi, [edi+0]
.text:00418DD0
.text:00418DD0 loc_418DD0:                             ; CODE XREF: sub_418D60+78↓j
.text:00418DD0                 movzx   ecx, byte ptr [ebx]
.text:00418DD3                 inc     ebx
.text:00418DD4                 mov     [esi], cl
.text:00418DD6                 inc     esi
.text:00418DD7                 dec     edx
.text:00418DD8                 jnz     short loc_418DD0
.text:00418DDA
.text:00418DDA loc_418DDA:                             ; CODE XREF: sub_418D60+64↑j
.text:00418DDA                 add     esp, 10h
.text:00418DDD                 mov     eax, esi
.text:00418DDF                 pop     ebx
.text:00418DE0                 pop     esi
.text:00418DE1                 pop     edi
.text:00418DE2                 retn
.text:00418DE3 ; ---------------------------------------------------------------------------
.text:00418DE3
.text:00418DE3 loc_418DE3:                             ; CODE XREF: sub_418D60+3D↑j
.text:00418DE3                 mov     [esp+1Ch+var_18], ebx
.text:00418DE7                 mov     ecx, edi
.text:00418DE9                 shr     ecx, 2
.text:00418DEC                 mov     [esp+1Ch+var_14], ecx
.text:00418DF0                 mov     [esp+1Ch+var_1C], esi
.text:00418DF3                 call    sub_41B250
.text:00418DF8                 jmp     short loc_418DB4
.text:00418DF8 sub_418D60      endp
.text:00418DF8
.text:00418DF8 ; ---------------------------------------------------------------------------
.text:00418DFA                 align 10h
.text:00418E00
.text:00418E00 ; =============== S U B R O U T I N E =======================================
.text:00418E00
.text:00418E00
.text:00418E00 sub_418E00      proc near               ; CODE XREF: sub_40AE00+5F↑p
.text:00418E00
.text:00418E00 FileHandle      = dword ptr -0Ch
.text:00418E00 lpFileName      = dword ptr -8
.text:00418E00 var_4           = dword ptr -4
.text:00418E00 arg_0           = dword ptr  4
.text:00418E00 arg_4           = dword ptr  8
.text:00418E00
.text:00418E00                 sub     esp, 0Ch
.text:00418E03                 mov     edx, [esp+0Ch+arg_0]
.text:00418E07                 mov     [esp+0Ch+FileHandle], edx ; FileHandle
.text:00418E0A                 call    _get_osfhandle
.text:00418E0F                 mov     [esp+0Ch+FileHandle], eax ; HANDLE
.text:00418E12                 mov     ecx, [esp+0Ch+arg_4]
.text:00418E16                 mov     [esp+0Ch+lpFileName], 0 ; lpFileName
.text:00418E1E                 mov     [esp+0Ch+var_4], ecx ; int
.text:00418E22                 call    sub_41AF00
.text:00418E27                 add     esp, 0Ch
.text:00418E2A                 retn
.text:00418E2A sub_418E00      endp
.text:00418E2A
.text:00418E2A ; ---------------------------------------------------------------------------
.text:00418E2B                 align 10h
.text:00418E30                 sub     esp, 0Ch
.text:00418E33                 mov     [esp+4], ebx
.text:00418E37                 mov     [esp+8], esi
.text:00418E3B                 xor     esi, esi
.text:00418E3D                 call    sub_418970
.text:00418E42                 mov     ebx, eax
.text:00418E44                 call    sub_41B5F0
.text:00418E49                 cmp     ebx, eax
.text:00418E4B                 jz      short loc_418E64
.text:00418E4D
.text:00418E4D loc_418E4D:                             ; CODE XREF: .text:00418E72↓j
.text:00418E4D                 mov     esi, 1
.text:00418E52
.text:00418E52 loc_418E52:                             ; CODE XREF: .text:00418E74↓j
.text:00418E52                 mov     ds:dword_420670, esi
.text:00418E58                 mov     ebx, [esp+4]
.text:00418E5C                 mov     esi, [esp+8]
.text:00418E60                 add     esp, 0Ch
.text:00418E63                 retn
.text:00418E64 ; ---------------------------------------------------------------------------
.text:00418E64
.text:00418E64 loc_418E64:                             ; CODE XREF: .text:00418E4B↑j
.text:00418E64                 call    sub_418EE0
.text:00418E69                 mov     ebx, eax
.text:00418E6B                 call    sub_41B5E0
.text:00418E70                 cmp     ebx, eax
.text:00418E72                 jnz     short loc_418E4D
.text:00418E74                 jmp     short loc_418E52
.text:00418E74 ; ---------------------------------------------------------------------------
.text:00418E76                 align 10h
.text:00418E80
.text:00418E80 ; =============== S U B R O U T I N E =======================================
.text:00418E80
.text:00418E80
.text:00418E80 sub_418E80      proc near               ; CODE XREF: sub_414650+99↑p
.text:00418E80
.text:00418E80 Size            = dword ptr -1Ch
.text:00418E80 var_18          = dword ptr -18h
.text:00418E80 arg_0           = dword ptr  4
.text:00418E80
.text:00418E80                 push    edi
.text:00418E81                 push    esi
.text:00418E82                 push    ebx
.text:00418E83                 sub     esp, 10h
.text:00418E86                 xor     ebx, ebx
.text:00418E88                 mov     edi, [esp+1Ch+arg_0]
.text:00418E8C                 lea     esi, [esi+0]
.text:00418E90
.text:00418E90 loc_418E90:                             ; CODE XREF: sub_418E80+38↓j
.text:00418E90                 lea     edx, ds:0[ebx*4]
.text:00418E97                 mov     [esp+1Ch+Size], edx ; Size
.text:00418E9A                 call    malloc
.text:00418E9F                 mov     [esp+1Ch+var_18], eax
.text:00418EA3                 mov     esi, eax
.text:00418EA5                 mov     [esp+1Ch+Size], ebx
.text:00418EA8                 call    sub_41B600
.text:00418EAD                 lea     ecx, [ebx+ebx]
.text:00418EB0                 mov     edx, eax
.text:00418EB2                 mov     ebx, ecx
.text:00418EB4                 sar     ecx, 1
.text:00418EB6                 cmp     eax, ecx
.text:00418EB8                 jz      short loc_418E90
.text:00418EBA                 test    eax, eax
.text:00418EBC                 js      short loc_418ECC
.text:00418EBE                 mov     esi, esi
.text:00418EC0
.text:00418EC0 loc_418EC0:                             ; CODE XREF: sub_418E80+4A↓j
.text:00418EC0                 mov     ecx, edx
.text:00418EC2                 dec     edx
.text:00418EC3                 cmp     [esi+ecx*4], edi
.text:00418EC6                 jz      short loc_418ED5
.text:00418EC8                 test    edx, edx
.text:00418ECA                 jns     short loc_418EC0
.text:00418ECC
.text:00418ECC loc_418ECC:                             ; CODE XREF: sub_418E80+3C↑j
.text:00418ECC                 xor     eax, eax
.text:00418ECE
.text:00418ECE loc_418ECE:                             ; CODE XREF: sub_418E80+5A↓j
.text:00418ECE                 add     esp, 10h
.text:00418ED1                 pop     ebx
.text:00418ED2                 pop     esi
.text:00418ED3                 pop     edi
.text:00418ED4                 retn
.text:00418ED5 ; ---------------------------------------------------------------------------
.text:00418ED5
.text:00418ED5 loc_418ED5:                             ; CODE XREF: sub_418E80+46↑j
.text:00418ED5                 mov     eax, 1
.text:00418EDA                 jmp     short loc_418ECE
.text:00418EDA sub_418E80      endp
.text:00418EDA
.text:00418EDA ; ---------------------------------------------------------------------------
.text:00418EDC                 align 10h
.text:00418EE0
.text:00418EE0 ; =============== S U B R O U T I N E =======================================
.text:00418EE0
.text:00418EE0
.text:00418EE0 sub_418EE0      proc near               ; CODE XREF: sub_414650+FE↑p
.text:00418EE0                                         ; .text:loc_418E64↑p
.text:00418EE0                 xor     eax, eax
.text:00418EE2                 retn
.text:00418EE2 sub_418EE0      endp
.text:00418EE2
.text:00418EE2 ; ---------------------------------------------------------------------------
.text:00418EE3                 align 10h
.text:00418EF0
.text:00418EF0 ; =============== S U B R O U T I N E =======================================
.text:00418EF0
.text:00418EF0
.text:00418EF0 ; int __cdecl sub_418EF0(LPCSTR lpFileName, int)
.text:00418EF0 sub_418EF0      proc near               ; CODE XREF: sub_414650+26↑p
.text:00418EF0                                         ; sub_4168E0-41D↑p ...
.text:00418EF0
.text:00418EF0 uMode           = dword ptr -1Ch
.text:00418EF0 var_10          = dword ptr -10h
.text:00418EF0 var_C           = dword ptr -0Ch
.text:00418EF0 var_8           = dword ptr -8
.text:00418EF0 var_4           = dword ptr -4
.text:00418EF0 lpFileName      = dword ptr  4
.text:00418EF0 arg_4           = dword ptr  8
.text:00418EF0
.text:00418EF0                 sub     esp, 1Ch
.text:00418EF3                 mov     [esp+1Ch+var_10], ebx
.text:00418EF7                 mov     ebx, [esp+1Ch+lpFileName]
.text:00418EFB                 mov     [esp+1Ch+var_4], ebp
.text:00418EFF                 xor     ebp, ebp
.text:00418F01                 test    ebx, ebx
.text:00418F03                 mov     [esp+1Ch+var_C], esi
.text:00418F07                 mov     esi, [esp+1Ch+arg_4]
.text:00418F0B                 mov     [esp+1Ch+var_8], edi
.text:00418F0F                 jz      short loc_418F19
.text:00418F11                 test    esi, 0FFFFFFE8h
.text:00418F17                 jz      short loc_418F40
.text:00418F19
.text:00418F19 loc_418F19:                             ; CODE XREF: sub_418EF0+1F↑j
.text:00418F19                 call    _errno
.text:00418F1E                 mov     dword ptr [eax], 16h
.text:00418F24
.text:00418F24 loc_418F24:                             ; CODE XREF: sub_418EF0+B1↓j
.text:00418F24                 mov     eax, 0FFFFFFFFh
.text:00418F29
.text:00418F29 loc_418F29:                             ; CODE XREF: sub_418EF0+86↓j
.text:00418F29                                         ; sub_418EF0+A4↓j
.text:00418F29                 mov     ebx, [esp+1Ch+var_10]
.text:00418F2D                 mov     esi, [esp+1Ch+var_C]
.text:00418F31                 mov     edi, [esp+1Ch+var_8]
.text:00418F35                 mov     ebp, [esp+1Ch+var_4]
.text:00418F39                 add     esp, 1Ch
.text:00418F3C                 retn
.text:00418F3C ; ---------------------------------------------------------------------------
.text:00418F3D                 align 10h
.text:00418F40
.text:00418F40 loc_418F40:                             ; CODE XREF: sub_418EF0+27↑j
.text:00418F40                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00418F47                 call    SetErrorMode
.text:00418F4C                 sub     esp, 4
.text:00418F4F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00418F52                 call    GetFileAttributesA
.text:00418F57                 sub     esp, 4
.text:00418F5A                 mov     edi, eax
.text:00418F5C                 cmp     eax, 0FFFFFFFFh
.text:00418F5F                 jz      short loc_418FA3
.text:00418F61
.text:00418F61 loc_418F61:                             ; CODE XREF: sub_418EF0+C6↓j
.text:00418F61                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00418F68                 call    SetErrorMode
.text:00418F6D                 sub     esp, 4
.text:00418F70                 mov     eax, 0FFFFFFFFh
.text:00418F75                 inc     ebp
.text:00418F76                 jz      short loc_418F29
.text:00418F78                 test    esi, 10h
.text:00418F7E                 jz      short loc_418F88
.text:00418F80                 test    edi, 10h
.text:00418F86                 jz      short loc_418F96
.text:00418F88
.text:00418F88 loc_418F88:                             ; CODE XREF: sub_418EF0+8E↑j
.text:00418F88                 and     esi, 2
.text:00418F8B                 jz      short loc_418F92
.text:00418F8D                 and     edi, 1
.text:00418F90                 jnz     short loc_418F96
.text:00418F92
.text:00418F92 loc_418F92:                             ; CODE XREF: sub_418EF0+9B↑j
.text:00418F92                 xor     eax, eax
.text:00418F94                 jmp     short loc_418F29
.text:00418F96 ; ---------------------------------------------------------------------------
.text:00418F96
.text:00418F96 loc_418F96:                             ; CODE XREF: sub_418EF0+96↑j
.text:00418F96                                         ; sub_418EF0+A0↑j
.text:00418F96                 call    _errno
.text:00418F9B                 mov     dword ptr [eax], 0Dh
.text:00418FA1                 jmp     short loc_418F24
.text:00418FA3 ; ---------------------------------------------------------------------------
.text:00418FA3
.text:00418FA3 loc_418FA3:                             ; CODE XREF: sub_418EF0+6F↑j
.text:00418FA3                 call    sub_419250
.text:00418FA8                 mov     ebp, eax
.text:00418FAA                 call    _errno
.text:00418FAF                 mov     [eax], ebp
.text:00418FB1                 mov     ebp, 0FFFFFFFFh
.text:00418FB6                 jmp     short loc_418F61
.text:00418FB6 sub_418EF0      endp
.text:00418FB6
.text:00418FB6 ; ---------------------------------------------------------------------------
.text:00418FB8                 align 10h
.text:00418FC0
.text:00418FC0 ; =============== S U B R O U T I N E =======================================
.text:00418FC0
.text:00418FC0 ; Attributes: info_from_lumina
.text:00418FC0
.text:00418FC0 ___get_errno    proc near               ; CODE XREF: sub_419250+B↓p
.text:00418FC0
.text:00418FC0 arg_0           = dword ptr  4
.text:00418FC0
.text:00418FC0                 mov     eax, [esp+arg_0]
.text:00418FC4                 cmp     eax, 53h ; 'S'
.text:00418FC7                 jg      loc_4190C0
.text:00418FCD                 cmp     eax, 52h ; 'R'
.text:00418FD0                 jge     short loc_419022
.text:00418FD2                 cmp     eax, 0Fh
.text:00418FD5                 jz      short loc_418FF0
.text:00418FD7                 cmp     eax, 0Fh
.text:00418FDA                 jg      short loc_419050
.text:00418FDC                 cmp     eax, 9
.text:00418FDF                 jg      short loc_419030
.text:00418FE1                 cmp     eax, 7
.text:00418FE4                 jge     short loc_419029
.text:00418FE6                 cmp     eax, 3
.text:00418FE9                 jg      short loc_41900A
.text:00418FEB                 cmp     eax, 2
.text:00418FEE                 jl      short loc_419003
.text:00418FF0
.text:00418FF0 loc_418FF0:                             ; CODE XREF: ___get_errno+15↑j
.text:00418FF0                                         ; ___get_errno+9D↓j ...
.text:00418FF0                 mov     edx, 2
.text:00418FF5                 lea     esi, [esi+0]
.text:00418FF9                 lea     edi, [edi+0]
.text:00419000
.text:00419000 loc_419000:                             ; CODE XREF: ___get_errno+48↓j
.text:00419000                                         ; ___get_errno+59↓j ...
.text:00419000                 mov     eax, edx
.text:00419002                 retn
.text:00419003 ; ---------------------------------------------------------------------------
.text:00419003
.text:00419003 loc_419003:                             ; CODE XREF: ___get_errno+2E↑j
.text:00419003                                         ; ___get_errno+78↓j ...
.text:00419003                 mov     edx, 16h
.text:00419008                 jmp     short loc_419000
.text:0041900A ; ---------------------------------------------------------------------------
.text:0041900A
.text:0041900A loc_41900A:                             ; CODE XREF: ___get_errno+29↑j
.text:0041900A                 cmp     eax, 5
.text:0041900D                 jz      short loc_419022
.text:0041900F                 cmp     eax, 5
.text:00419012                 jg      short loc_41901B
.text:00419014                 mov     edx, 18h
.text:00419019                 jmp     short loc_419000
.text:0041901B ; ---------------------------------------------------------------------------
.text:0041901B
.text:0041901B loc_41901B:                             ; CODE XREF: ___get_errno+52↑j
.text:0041901B                                         ; ___get_errno+180↓j
.text:0041901B                 mov     edx, 9
.text:00419020                 jmp     short loc_419000
.text:00419022 ; ---------------------------------------------------------------------------
.text:00419022
.text:00419022 loc_419022:                             ; CODE XREF: ___get_errno+10↑j
.text:00419022                                         ; ___get_errno+4D↑j ...
.text:00419022                 mov     edx, 0Dh
.text:00419027                 jmp     short loc_419000
.text:00419029 ; ---------------------------------------------------------------------------
.text:00419029
.text:00419029 loc_419029:                             ; CODE XREF: ___get_errno+24↑j
.text:00419029                                         ; ___get_errno+73↓j ...
.text:00419029                 mov     edx, 0Ch
.text:0041902E                 jmp     short loc_419000
.text:00419030 ; ---------------------------------------------------------------------------
.text:00419030
.text:00419030 loc_419030:                             ; CODE XREF: ___get_errno+1F↑j
.text:00419030                 cmp     eax, 0Dh
.text:00419033                 jg      short loc_419029
.text:00419035                 cmp     eax, 0Ch
.text:00419038                 jge     short loc_419003
.text:0041903A                 cmp     eax, 0Ah
.text:0041903D                 mov     edx, 7
.text:00419042                 jz      short loc_419000
.text:00419044                 cmp     eax, 0Bh
.text:00419047                 jnz     short loc_419003
.text:00419049
.text:00419049 loc_419049:                             ; CODE XREF: ___get_errno+21A↓j
.text:00419049                 mov     edx, 8
.text:0041904E                 jmp     short loc_419000
.text:00419050 ; ---------------------------------------------------------------------------
.text:00419050
.text:00419050 loc_419050:                             ; CODE XREF: ___get_errno+1A↑j
.text:00419050                 cmp     eax, 22h ; '"'
.text:00419053                 jg      short loc_419084
.text:00419055                 cmp     eax, 16h
.text:00419058                 jge     short loc_419022
.text:0041905A                 cmp     eax, 12h
.text:0041905D                 jz      short loc_418FF0
.text:0041905F                 cmp     eax, 12h
.text:00419062                 jg      short loc_419075
.text:00419064                 cmp     eax, 10h
.text:00419067                 jz      short loc_419022
.text:00419069                 mov     edx, 12h
.text:0041906E                 cmp     eax, 11h
.text:00419071
.text:00419071 loc_419071:                             ; CODE XREF: ___get_errno+172↓j
.text:00419071                                         ; ___get_errno+24C↓j ...
.text:00419071                 jnz     short loc_419003
.text:00419073                 jmp     short loc_419000
.text:00419075 ; ---------------------------------------------------------------------------
.text:00419075
.text:00419075 loc_419075:                             ; CODE XREF: ___get_errno+A2↑j
.text:00419075                 cmp     eax, 14h
.text:00419078                 jle     short loc_419022
.text:0041907A
.text:0041907A loc_41907A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0041907A                 mov     edx, 10h
.text:0041907F                 jmp     loc_419000
.text:00419084 ; ---------------------------------------------------------------------------
.text:00419084
.text:00419084 loc_419084:                             ; CODE XREF: ___get_errno+93↑j
.text:00419084                 cmp     eax, 41h ; 'A'
.text:00419087                 jz      short loc_419022
.text:00419089                 cmp     eax, 41h ; 'A'
.text:0041908C                 jg      short loc_4190A1
.text:0041908E                 cmp     eax, 24h ; '$'
.text:00419091                 jz      short loc_419022
.text:00419093                 cmp     eax, 35h ; '5'
.text:00419096                 jnz     loc_419003
.text:0041909C                 jmp     loc_418FF0
.text:004190A1 ; ---------------------------------------------------------------------------
.text:004190A1
.text:004190A1 loc_4190A1:                             ; CODE XREF: ___get_errno+CC↑j
.text:004190A1                 cmp     eax, 43h ; 'C'
.text:004190A4                 jz      loc_418FF0
.text:004190AA                 cmp     eax, 50h ; 'P'
.text:004190AD                 jnz     loc_419003
.text:004190B3
.text:004190B3 loc_4190B3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004190B3                 mov     edx, 11h
.text:004190B8                 jmp     loc_419000
.text:004190B8 ; ---------------------------------------------------------------------------
.text:004190BD                 align 10h
.text:004190C0
.text:004190C0 loc_4190C0:                             ; CODE XREF: ___get_errno+7↑j
.text:004190C0                 cmp     eax, 0A1h ; '¡'
.text:004190C5                 jz      loc_418FF0
.text:004190CB                 cmp     eax, 0A1h ; '¡'
.text:004190D0                 jg      loc_419180
.text:004190D6                 cmp     eax, 81h
.text:004190DB                 jg      short loc_419145
.text:004190DD                 cmp     eax, 80h ; '€'
.text:004190E2                 mov     edx, 0Ah
.text:004190E7                 jge     loc_419000
.text:004190ED                 cmp     eax, 6Ch ; 'l'
.text:004190F0                 jz      loc_419022
.text:004190F6                 cmp     eax, 6Ch ; 'l'
.text:004190F9                 jg      short loc_419117
.text:004190FB                 cmp     eax, 57h ; 'W'
.text:004190FE                 jz      loc_419003
.text:00419104                 cmp     eax, 59h ; 'Y'
.text:00419107                 jnz     loc_419003
.text:0041910D
.text:0041910D loc_41910D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0041910D                                         ; ___get_errno+23C↓j
.text:0041910D                 mov     edx, 0Bh
.text:00419112                 jmp     loc_419000
.text:00419117 ; ---------------------------------------------------------------------------
.text:00419117
.text:00419117 loc_419117:                             ; CODE XREF: ___get_errno+139↑j
.text:00419117                 cmp     eax, 70h ; 'p'
.text:0041911A                 mov     edx, 1Ch
.text:0041911F                 jz      loc_419000
.text:00419125                 cmp     eax, 70h ; 'p'
.text:00419128                 jg      short loc_419137
.text:0041912A                 mov     edx, 20h ; ' '
.text:0041912F                 cmp     eax, 6Dh ; 'm'
.text:00419132                 jmp     loc_419071
.text:00419137 ; ---------------------------------------------------------------------------
.text:00419137
.text:00419137 loc_419137:                             ; CODE XREF: ___get_errno+168↑j
.text:00419137                 cmp     eax, 72h ; 'r'
.text:0041913A
.text:0041913A loc_41913A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0041913A                 jnz     loc_419003
.text:00419140                 jmp     loc_41901B
.text:00419145 ; ---------------------------------------------------------------------------
.text:00419145
.text:00419145 loc_419145:                             ; CODE XREF: ___get_errno+11B↑j
.text:00419145                 cmp     eax, 84h ; '„'
.text:0041914A                 jz      loc_419022
.text:00419150                 cmp     eax, 84h ; '„'
.text:00419155                 jg      short loc_41915E
.text:00419157                 cmp     eax, 82h ; '‚'
.text:0041915C                 jmp     short loc_41913A
.text:0041915E ; ---------------------------------------------------------------------------
.text:0041915E
.text:0041915E loc_41915E:                             ; CODE XREF: ___get_errno+195↑j
.text:0041915E                 cmp     eax, 91h ; '‘'
.text:00419163                 mov     edx, 29h ; ')'
.text:00419168                 jz      loc_419000
.text:0041916E                 cmp     eax, 9Eh ; 'ž'
.text:00419173
.text:00419173 loc_419173:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00419173                 jnz     loc_419003
.text:00419179                 jmp     loc_419022
.text:00419179 ; ---------------------------------------------------------------------------
.text:0041917E                 align 10h
.text:00419180
.text:00419180 loc_419180:                             ; CODE XREF: ___get_errno+110↑j
.text:00419180                 cmp     eax, 0CEh ; 'Î'
.text:00419185                 jz      loc_418FF0
.text:0041918B                 cmp     eax, 0CEh ; 'Î'
.text:00419190                 jg      short loc_4191E0
.text:00419192                 cmp     eax, 0AAh ; 'ª'
.text:00419197                 jz      loc_41907A
.text:0041919D                 cmp     eax, 0AAh ; 'ª'
.text:004191A2                 jg      short loc_4191B6
.text:004191A4                 cmp     eax, 0A4h ; '¤'
.text:004191A9                 jz      loc_41910D
.text:004191AF                 cmp     eax, 0A7h ; '§'
.text:004191B4                 jmp     short loc_419173
.text:004191B6 ; ---------------------------------------------------------------------------
.text:004191B6
.text:004191B6 loc_4191B6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004191B6                 cmp     eax, 0B7h ; '·'
.text:004191BB                 jz      loc_4190B3
.text:004191C1                 cmp     eax, 0B7h ; '·'
.text:004191C6                 jl      loc_419003
.text:004191CC                 sub     eax, 0BCh ; '¼'
.text:004191D1                 cmp     eax, 0Eh
.text:004191D4                 ja      loc_419003
.text:004191DA                 jmp     loc_419049
.text:004191DA ; ---------------------------------------------------------------------------
.text:004191DF                 align 10h
.text:004191E0
.text:004191E0 loc_4191E0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004191E0                 cmp     eax, 46Bh
.text:004191E5                 mov     edx, 24h ; '$'
.text:004191EA                 jz      loc_419000
.text:004191F0                 cmp     eax, 46Bh
.text:004191F5                 jg      short loc_419211
.text:004191F7                 cmp     eax, 0D7h ; '×'
.text:004191FC                 jz      loc_41910D
.text:00419202                 mov     edx, 5
.text:00419207                 cmp     eax, 45Dh
.text:0041920C                 jmp     loc_419071
.text:00419211 ; ---------------------------------------------------------------------------
.text:00419211
.text:00419211 loc_419211:                             ; CODE XREF: ___get_errno+235↑j
.text:00419211                 cmp     eax, 4D5h
.text:00419216                 mov     edx, 4
.text:0041921B                 jz      loc_419000
.text:00419221                 cmp     eax, 4D5h
.text:00419226                 jg      short loc_419237
.text:00419228                 mov     edx, 13h
.text:0041922D                 cmp     eax, 4B0h
.text:00419232                 jmp     loc_419071
.text:00419237 ; ---------------------------------------------------------------------------
.text:00419237
.text:00419237 loc_419237:                             ; CODE XREF: ___get_errno+266↑j
.text:00419237                 cmp     eax, 718h
.text:0041923C                 jnz     loc_419003
.text:00419242                 jmp     loc_419029
.text:00419242 ___get_errno    endp
.text:00419242
.text:00419242 ; ---------------------------------------------------------------------------
.text:00419247                 align 10h
.text:00419250
.text:00419250 ; =============== S U B R O U T I N E =======================================
.text:00419250
.text:00419250
.text:00419250 sub_419250      proc near               ; CODE XREF: sub_4168E0:loc_41657D↑p
.text:00419250                                         ; sub_4165B0+1A2↑p ...
.text:00419250
.text:00419250 var_C           = dword ptr -0Ch
.text:00419250
.text:00419250                 sub     esp, 0Ch
.text:00419253                 call    GetLastError
.text:00419258                 mov     [esp+0Ch+var_C], eax
.text:0041925B                 call    ___get_errno
.text:00419260                 add     esp, 0Ch
.text:00419263                 retn
.text:00419263 sub_419250      endp
.text:00419263
.text:00419263 ; ---------------------------------------------------------------------------
.text:00419264                 align 10h
.text:00419270
.text:00419270 ; =============== S U B R O U T I N E =======================================
.text:00419270
.text:00419270
.text:00419270 sub_419270      proc near               ; CODE XREF: .text:00416F73↑p
.text:00419270                                         ; .text:00416FC3↑p
.text:00419270
.text:00419270 arg_4           = dword ptr  8
.text:00419270
.text:00419270                 sub     esp, 0Ch
.text:00419273                 mov     edx, [esp+0Ch+arg_4]
.text:00419277                 test    edx, edx
.text:00419279                 jz      short loc_419280
.text:0041927B                 add     esp, 0Ch
.text:0041927E                 jmp     short sub_4192C0
.text:00419280 ; ---------------------------------------------------------------------------
.text:00419280
.text:00419280 loc_419280:                             ; CODE XREF: sub_419270+9↑j
.text:00419280                 call    _errno
.text:00419285                 mov     dword ptr [eax], 16h
.text:0041928B                 xor     eax, eax
.text:0041928D                 add     esp, 0Ch
.text:00419290                 retn
.text:00419290 sub_419270      endp
.text:00419290
.text:00419291 ; ---------------------------------------------------------------------------
.text:00419291                 jmp     short sub_4192A0
.text:00419291 ; ---------------------------------------------------------------------------
.text:00419293                 align 10h
.text:004192A0
.text:004192A0 ; =============== S U B R O U T I N E =======================================
.text:004192A0
.text:004192A0
.text:004192A0 ; int __cdecl sub_4192A0(LPCSTR)
.text:004192A0 sub_4192A0      proc near               ; CODE XREF: sub_4168E0-40C↑p
.text:004192A0                                         ; sub_4165B0+74↑p ...
.text:004192A0
.text:004192A0 lpFileName      = dword ptr -0Ch
.text:004192A0 Destination     = dword ptr -8
.text:004192A0 arg_0           = dword ptr  4
.text:004192A0
.text:004192A0                 sub     esp, 0Ch
.text:004192A3                 mov     edx, [esp+0Ch+arg_0]
.text:004192A7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:004192AF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:004192B2                 call    sub_4192C0
.text:004192B7                 add     esp, 0Ch
.text:004192BA                 retn
.text:004192BA sub_4192A0      endp
.text:004192BA
.text:004192BA ; ---------------------------------------------------------------------------
.text:004192BB                 align 10h
.text:004192C0
.text:004192C0 ; =============== S U B R O U T I N E =======================================
.text:004192C0
.text:004192C0
.text:004192C0 ; int __cdecl sub_4192C0(LPCSTR lpFileName, char *Destination)
.text:004192C0 sub_4192C0      proc near               ; CODE XREF: sub_419270+E↑j
.text:004192C0                                         ; sub_4192A0+12↑p
.text:004192C0
.text:004192C0 Size            = dword ptr -2Ch
.text:004192C0 nBufferLength   = dword ptr -28h
.text:004192C0 lpBuffer        = dword ptr -24h
.text:004192C0 lpFilePart      = dword ptr -20h
.text:004192C0 FilePart        = dword ptr -14h
.text:004192C0 lpFileName      = dword ptr  4
.text:004192C0 Destination     = dword ptr  8
.text:004192C0
.text:004192C0                 push    ebp
.text:004192C1                 push    edi
.text:004192C2                 push    esi
.text:004192C3                 push    ebx
.text:004192C4                 sub     esp, 1Ch
.text:004192C7                 mov     edi, [esp+2Ch+lpFileName]
.text:004192CB                 mov     ebp, [esp+2Ch+Destination]
.text:004192CF                 test    edi, edi
.text:004192D1                 jz      loc_4193D9
.text:004192D7                 cmp     byte ptr [edi], 0
.text:004192DA                 jz      loc_4193CC
.text:004192E0                 mov     [esp+2Ch+Size], 104h ; Size
.text:004192E7                 call    malloc
.text:004192EC                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004192F0                 lea     edx, [esp+2Ch+FilePart]
.text:004192F4                 mov     ebx, eax
.text:004192F6                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004192FA                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00419302                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00419305                 call    GetFullPathNameA
.text:0041930A                 sub     esp, 10h
.text:0041930D                 mov     esi, eax
.text:0041930F                 test    eax, eax
.text:00419311                 jz      loc_4193BA
.text:00419317                 cmp     eax, 104h
.text:0041931C                 jle     short loc_41932D
.text:0041931E                 test    ebp, ebp
.text:00419320                 jz      short loc_419389
.text:00419322                 call    _errno
.text:00419327                 mov     dword ptr [eax], 26h ; '&'
.text:0041932D
.text:0041932D loc_41932D:                             ; CODE XREF: sub_4192C0+5C↑j
.text:0041932D                                         ; sub_4192C0+F5↓j
.text:0041932D                 call    _errno
.text:00419332                 mov     edi, [eax]
.text:00419334                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041933C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041933F                 call    sub_418EF0
.text:00419344                 test    eax, eax
.text:00419346                 jnz     short loc_419360
.text:00419348                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041934D                 cmp     al, 2Fh ; '/'
.text:0041934F                 jz      short loc_419360
.text:00419351                 cmp     al, 5Ch ; '\'
.text:00419353                 jz      short loc_419360
.text:00419355                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00419359                 mov     byte ptr [esi+ebx+1], 0
.text:0041935E                 mov     esi, esi
.text:00419360
.text:00419360 loc_419360:                             ; CODE XREF: sub_4192C0+86↑j
.text:00419360                                         ; sub_4192C0+8F↑j ...
.text:00419360                 call    _errno
.text:00419365                 mov     [eax], edi
.text:00419367                 mov     [esp+2Ch+Size], ebx
.text:0041936A                 call    sub_416E60
.text:0041936F                 test    ebp, ebp
.text:00419371                 mov     eax, ebx
.text:00419373                 jz      short loc_419381
.text:00419375                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00419379                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041937C                 call    strcpy
.text:00419381
.text:00419381 loc_419381:                             ; CODE XREF: sub_4192C0+B3↑j
.text:00419381                                         ; sub_4192C0+10A↓j
.text:00419381                 add     esp, 1Ch
.text:00419384                 pop     ebx
.text:00419385                 pop     esi
.text:00419386                 pop     edi
.text:00419387                 pop     ebp
.text:00419388                 retn
.text:00419389 ; ---------------------------------------------------------------------------
.text:00419389
.text:00419389 loc_419389:                             ; CODE XREF: sub_4192C0+60↑j
.text:00419389                 mov     [esp+2Ch+Size], ebx ; Block
.text:0041938C                 lea     ecx, [eax+2]
.text:0041938F                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:00419393                 call    realloc
.text:00419398                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:0041939C                 lea     edx, [esp+2Ch+FilePart]
.text:004193A0                 mov     ebx, eax
.text:004193A2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004193A6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:004193AA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004193AD                 call    GetFullPathNameA
.text:004193B2                 sub     esp, 10h
.text:004193B5                 jmp     loc_41932D
.text:004193BA ; ---------------------------------------------------------------------------
.text:004193BA
.text:004193BA loc_4193BA:                             ; CODE XREF: sub_4192C0+51↑j
.text:004193BA                 call    sub_419250
.text:004193BF                 mov     esi, eax
.text:004193C1                 call    _errno
.text:004193C6                 mov     [eax], esi
.text:004193C8
.text:004193C8 loc_4193C8:                             ; CODE XREF: sub_4192C0+117↓j
.text:004193C8                                         ; sub_4192C0+124↓j
.text:004193C8                 xor     eax, eax
.text:004193CA                 jmp     short loc_419381
.text:004193CC ; ---------------------------------------------------------------------------
.text:004193CC
.text:004193CC loc_4193CC:                             ; CODE XREF: sub_4192C0+1A↑j
.text:004193CC                 call    _errno
.text:004193D1                 mov     dword ptr [eax], 2
.text:004193D7                 jmp     short loc_4193C8
.text:004193D9 ; ---------------------------------------------------------------------------
.text:004193D9
.text:004193D9 loc_4193D9:                             ; CODE XREF: sub_4192C0+11↑j
.text:004193D9                 call    _errno
.text:004193DE                 mov     dword ptr [eax], 16h
.text:004193E4                 jmp     short loc_4193C8
.text:004193E4 sub_4192C0      endp
.text:004193E4
.text:004193E4 ; ---------------------------------------------------------------------------
.text:004193E6                 align 10h
.text:004193F0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:0041960F↓o
.text:004193FC aLu             db '%lu',0              ; DATA XREF: .text:0041961F↓o
.text:00419400 asc_419400      db ' ',0                ; DATA XREF: .text:loc_419708↓o
.text:00419402                 align 10h
.text:00419410 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00419410                                         ; DATA XREF: .text:0041973F↓o
.text:00419430 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_41974D↓o
.text:0041943C aServer         db ' Server',0          ; DATA XREF: .text:00419776↓o
.text:0041943C                                         ; .text:loc_4198EE↓o
.text:00419444 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_419788↓o
.text:00419455 aDatacenterServ db ' Datacenter Server',0
.text:00419455                                         ; DATA XREF: .text:loc_419792↓o
.text:00419468 aStandardEditio db ' Standard Edition',0
.text:00419468                                         ; DATA XREF: .text:004197BA↓o
.text:0041947A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_4197C4↓o
.text:00419487 aEnterpriseEdit db ' Enterprise Edition',0
.text:00419487                                         ; DATA XREF: .text:loc_4197CE↓o
.text:0041949B aDatacenterEdit db ' Datacenter Edition',0
.text:0041949B                                         ; DATA XREF: .text:loc_4197D8↓o
.text:004194AF aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:004197EB↓o
.text:004194BD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_4197F5↓o
.text:004194BD                                         ; .text:loc_419900↓o
.text:004194CB                 align 10h
.text:004194D0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:004194D0                                         ; DATA XREF: .text:00419822↓o
.text:00419500 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00419869↓o
.text:0041950C aWinnt          db 'WINNT',0            ; DATA XREF: .text:004198A4↓o
.text:00419512 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004198BB↓o
.text:0041951B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:004198D2↓o
.text:00419524                 align 10h
.text:00419530 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00419530                                         ; DATA XREF: .text:00419A47↓o
.text:00419553                 db 1Dh dup(90h)
.text:00419570 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00419570                                         ; DATA XREF: .text:00419AA6↓o
.text:00419596 ; ---------------------------------------------------------------------------
.text:00419596
.text:00419596 loc_419596:                             ; DATA XREF: .text:loc_419B11↓o
.text:00419596                 and     [ebx+45h], dl
.text:00419599                 add     [eax], ah
.text:0041959B                 push    ebx
.text:0041959C                 push    eax
.text:0041959D                 xor     [eax], eax
.text:0041959F
.text:0041959F loc_41959F:                             ; DATA XREF: .text:loc_419B8B↓o
.text:0041959F                 and     [edi+53h], cl
.text:004195A2                 push    edx
.text:004195A3                 xor     al, [eax]
.text:004195A5                 lea     esi, [esi+0]
.text:004195A9                 lea     edi, [edi+0]
.text:004195B0                 push    edi
.text:004195B1                 push    esi
.text:004195B2                 push    ebx
.text:004195B3                 sub     esp, 130h
.text:004195B9                 mov     ebx, [esp+140h]
.text:004195C0                 call    sub_419CC0
.text:004195C5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004195CA                 cmp     eax, 1
.text:004195CD                 jz      loc_419A70
.text:004195D3                 cmp     eax, 1
.text:004195D6                 jb      loc_419A46
.text:004195DC                 cmp     eax, 2
.text:004195DF                 jz      loc_419690
.text:004195E5                 cmp     eax, 3
.text:004195E8                 jz      short loc_41964F
.text:004195EA                 lea     esi, [esi+0]
.text:004195F0
.text:004195F0 loc_4195F0:                             ; CODE XREF: .text:00419685↓j
.text:004195F0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004195F6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004195FC
.text:004195FC loc_4195FC:                             ; CODE XREF: .text:00419A8F↓j
.text:004195FC                 mov     [esp+10h], edx
.text:00419600                 mov     ebx, [esp+144h]
.text:00419607                 mov     [esp+0Ch], ecx
.text:0041960B                 mov     [esp+8], eax
.text:0041960F                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00419617                 mov     [esp], ebx
.text:0041961A                 call    sprintf
.text:0041961F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00419627                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0041962D                 mov     ecx, [esp+148h]
.text:00419634                 mov     [esp+8], edi
.text:00419638                 mov     [esp], ecx
.text:0041963B                 call    sprintf
.text:00419640                 mov     eax, 1
.text:00419645
.text:00419645 loc_419645:                             ; CODE XREF: .text:0041983F↓j
.text:00419645                                         ; .text:0041988C↓j
.text:00419645                 add     esp, 130h
.text:0041964B                 pop     ebx
.text:0041964C                 pop     esi
.text:0041964D                 pop     edi
.text:0041964E                 retn
.text:0041964F ; ---------------------------------------------------------------------------
.text:0041964F
.text:0041964F loc_41964F:                             ; CODE XREF: .text:004195E8↑j
.text:0041964F                 mov     dword ptr [ebx], 7263694Dh
.text:00419655                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041965C                 mov     dword ptr [ebx+8], 69572074h
.text:00419663                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041966A                 mov     dword ptr [ebx+10h], 45432073h
.text:00419671                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00419677                 mov     esi, esi
.text:00419679                 lea     edi, [edi+0]
.text:00419680
.text:00419680 loc_419680:                             ; CODE XREF: .text:00419728↓j
.text:00419680                                         ; .text:00419A69↓j ...
.text:00419680                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00419685                 jmp     loc_4195F0
.text:00419685 ; ---------------------------------------------------------------------------
.text:0041968A                 align 10h
.text:00419690
.text:00419690 loc_419690:                             ; CODE XREF: .text:004195DF↑j
.text:00419690                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00419696                 cmp     edx, 3
.text:00419699                 mov     eax, edx
.text:0041969B                 jz      loc_419A05
.text:004196A1
.text:004196A1 loc_4196A1:                             ; CODE XREF: .text:00419A0C↓j
.text:004196A1                 cmp     eax, 4
.text:004196A4                 jz      loc_4199C5
.text:004196AA
.text:004196AA loc_4196AA:                             ; CODE XREF: .text:004199CD↓j
.text:004196AA                 cmp     eax, 4
.text:004196AD                 ja      loc_419912
.text:004196B3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004196B9                 test    ecx, ecx
.text:004196BB                 jnz     loc_419912
.text:004196C1                 mov     dword ptr [ebx], 7263694Dh
.text:004196C7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004196CE                 mov     dword ptr [ebx+8], 69572074h
.text:004196D5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004196DC                 mov     dword ptr [ebx+10h], 544E2073h
.text:004196E3
.text:004196E3 loc_4196E3:                             ; CODE XREF: .text:00419985↓j
.text:004196E3                 mov     byte ptr [ebx+14h], 0
.text:004196E7
.text:004196E7 loc_4196E7:                             ; CODE XREF: .text:00419915↓j
.text:004196E7                                         ; .text:0041992C↓j ...
.text:004196E7                 mov     esi, dword_41F0A0
.text:004196ED                 test    esi, esi
.text:004196EF                 jz      loc_419802
.text:004196F5                 movzx   eax, ds:byte_42072A
.text:004196FC                 cmp     al, 1
.text:004196FE                 jz      loc_4197E2
.text:00419704                 cmp     al, 3
.text:00419706                 jz      short loc_41972D
.text:00419708
.text:00419708 loc_419708:                             ; CODE XREF: .text:0041974B↓j
.text:00419708                                         ; .text:00419786↓j ...
.text:00419708                 mov     dword ptr [esp+4], offset asc_419400 ; " "
.text:00419710                 mov     [esp], ebx
.text:00419713                 call    strcat
.text:00419718                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00419720                 mov     [esp], ebx
.text:00419723                 call    strcat
.text:00419728                 jmp     loc_419680
.text:0041972D ; ---------------------------------------------------------------------------
.text:0041972D
.text:0041972D loc_41972D:                             ; CODE XREF: .text:00419706↑j
.text:0041972D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00419734                 jz      short loc_419756
.text:00419736
.text:00419736 loc_419736:                             ; CODE XREF: .text:00419762↓j
.text:00419736                 test    byte ptr ds:word_420728, 2
.text:0041973D                 jz      short loc_41974D
.text:0041973F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00419746
.text:00419746 loc_419746:                             ; CODE XREF: .text:00419754↓j
.text:00419746                 call    printf
.text:0041974B                 jmp     short loc_419708
.text:0041974D ; ---------------------------------------------------------------------------
.text:0041974D
.text:0041974D loc_41974D:                             ; CODE XREF: .text:0041973D↑j
.text:0041974D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00419754                 jmp     short loc_419746
.text:00419756 ; ---------------------------------------------------------------------------
.text:00419756
.text:00419756 loc_419756:                             ; CODE XREF: .text:00419734↑j
.text:00419756                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041975B                 cmp     eax, 2
.text:0041975E                 jz      short loc_4197A0
.text:00419760                 test    eax, eax
.text:00419762                 jnz     short loc_419736
.text:00419764                 cmp     byte ptr ds:word_420728, 0
.text:0041976B                 js      short loc_419792
.text:0041976D                 test    byte ptr ds:word_420728, 2
.text:00419774                 jnz     short loc_419788
.text:00419776                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0041977E
.text:0041977E loc_41977E:                             ; CODE XREF: .text:00419790↓j
.text:0041977E                                         ; .text:0041979A↓j ...
.text:0041977E                 mov     [esp], ebx
.text:00419781                 call    strcat
.text:00419786                 jmp     short loc_419708
.text:00419788 ; ---------------------------------------------------------------------------
.text:00419788
.text:00419788 loc_419788:                             ; CODE XREF: .text:00419774↑j
.text:00419788                                         ; .text:004198E9↓j
.text:00419788                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00419790                 jmp     short loc_41977E
.text:00419792 ; ---------------------------------------------------------------------------
.text:00419792
.text:00419792 loc_419792:                             ; CODE XREF: .text:0041976B↑j
.text:00419792                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0041979A                 jmp     short loc_41977E
.text:0041979A ; ---------------------------------------------------------------------------
.text:0041979C                 align 10h
.text:004197A0
.text:004197A0 loc_4197A0:                             ; CODE XREF: .text:0041975E↑j
.text:004197A0                 cmp     byte ptr ds:word_420728, 0
.text:004197A7                 js      short loc_4197D8
.text:004197A9                 movzx   eax, ds:word_420728
.text:004197B0                 test    al, 2
.text:004197B2                 jnz     short loc_4197CE
.text:004197B4                 cmp     ax, 400h
.text:004197B8                 jz      short loc_4197C4
.text:004197BA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:004197C2                 jmp     short loc_41977E
.text:004197C4 ; ---------------------------------------------------------------------------
.text:004197C4
.text:004197C4 loc_4197C4:                             ; CODE XREF: .text:004197B8↑j
.text:004197C4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:004197CC                 jmp     short loc_41977E
.text:004197CE ; ---------------------------------------------------------------------------
.text:004197CE
.text:004197CE loc_4197CE:                             ; CODE XREF: .text:004197B2↑j
.text:004197CE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:004197D6                 jmp     short loc_41977E
.text:004197D8 ; ---------------------------------------------------------------------------
.text:004197D8
.text:004197D8 loc_4197D8:                             ; CODE XREF: .text:004197A7↑j
.text:004197D8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:004197E0                 jmp     short loc_41977E
.text:004197E2 ; ---------------------------------------------------------------------------
.text:004197E2
.text:004197E2 loc_4197E2:                             ; CODE XREF: .text:004196FE↑j
.text:004197E2                 test    byte ptr ds:word_420728+1, 2
.text:004197E9                 jz      short loc_4197F5
.text:004197EB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:004197F3                 jmp     short loc_41977E
.text:004197F5 ; ---------------------------------------------------------------------------
.text:004197F5
.text:004197F5 loc_4197F5:                             ; CODE XREF: .text:004197E9↑j
.text:004197F5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:004197FD                 jmp     loc_41977E
.text:00419802 ; ---------------------------------------------------------------------------
.text:00419802
.text:00419802 loc_419802:                             ; CODE XREF: .text:004196EF↑j
.text:00419802                 mov     dword ptr [esp+28h], 0FFh
.text:0041980A                 lea     edx, [esp+2Ch]
.text:0041980E                 mov     [esp+10h], edx
.text:00419812                 mov     dword ptr [esp+0Ch], 1
.text:0041981A                 mov     dword ptr [esp+8], 0
.text:00419822                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0041982A                 mov     dword ptr [esp], 80000002h
.text:00419831                 call    RegOpenKeyExA
.text:00419836                 mov     edi, eax
.text:00419838                 sub     esp, 14h
.text:0041983B                 xor     eax, eax
.text:0041983D                 test    edi, edi
.text:0041983F                 jnz     loc_419645
.text:00419845                 mov     dword ptr [esp+0Ch], 0
.text:0041984D                 mov     edi, [esp+2Ch]
.text:00419851                 lea     esi, [esp+28h]
.text:00419855                 mov     [esp+14h], esi
.text:00419859                 lea     esi, [esp+30h]
.text:0041985D                 mov     [esp+10h], esi
.text:00419861                 mov     dword ptr [esp+8], 0
.text:00419869                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00419871                 mov     [esp], edi
.text:00419874                 call    RegQueryValueExA
.text:00419879                 sub     esp, 18h
.text:0041987C                 test    eax, eax
.text:0041987E                 jnz     short loc_41988A
.text:00419880                 cmp     dword ptr [esp+28h], 0FFh
.text:00419888                 jbe     short loc_419891
.text:0041988A
.text:0041988A loc_41988A:                             ; CODE XREF: .text:0041987E↑j
.text:0041988A                 xor     eax, eax
.text:0041988C                 jmp     loc_419645
.text:00419891 ; ---------------------------------------------------------------------------
.text:00419891
.text:00419891 loc_419891:                             ; CODE XREF: .text:00419888↑j
.text:00419891                 mov     edx, [esp+2Ch]
.text:00419895                 mov     [esp], edx
.text:00419898                 call    RegCloseKey
.text:0041989D                 sub     esp, 4
.text:004198A0                 mov     [esp+4], esi
.text:004198A4                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:004198AB                 call    lstrcmpiA
.text:004198B0                 sub     esp, 8
.text:004198B3                 test    eax, eax
.text:004198B5                 jz      short loc_419900
.text:004198B7
.text:004198B7 loc_4198B7:                             ; CODE XREF: .text:00419910↓j
.text:004198B7                 mov     [esp+4], esi
.text:004198BB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:004198C2                 call    lstrcmpiA
.text:004198C7                 sub     esp, 8
.text:004198CA                 test    eax, eax
.text:004198CC                 jz      short loc_4198EE
.text:004198CE
.text:004198CE loc_4198CE:                             ; CODE XREF: .text:004198FE↓j
.text:004198CE                 mov     [esp+4], esi
.text:004198D2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:004198D9                 call    lstrcmpiA
.text:004198DE                 sub     esp, 8
.text:004198E1                 test    eax, eax
.text:004198E3                 jnz     loc_419708
.text:004198E9                 jmp     loc_419788
.text:004198EE ; ---------------------------------------------------------------------------
.text:004198EE
.text:004198EE loc_4198EE:                             ; CODE XREF: .text:004198CC↑j
.text:004198EE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004198F6                 mov     [esp], ebx
.text:004198F9                 call    strcat
.text:004198FE                 jmp     short loc_4198CE
.text:00419900 ; ---------------------------------------------------------------------------
.text:00419900
.text:00419900 loc_419900:                             ; CODE XREF: .text:004198B5↑j
.text:00419900                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00419908                 mov     [esp], ebx
.text:0041990B                 call    strcat
.text:00419910                 jmp     short loc_4198B7
.text:00419912 ; ---------------------------------------------------------------------------
.text:00419912
.text:00419912 loc_419912:                             ; CODE XREF: .text:004196AD↑j
.text:00419912                                         ; .text:004196BB↑j
.text:00419912                 cmp     eax, 5
.text:00419915                 jnz     loc_4196E7
.text:0041991B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00419920                 cmp     eax, 2
.text:00419923                 jz      short loc_41998A
.text:00419925                 cmp     eax, 1
.text:00419928                 jz      short loc_419963
.text:0041992A                 test    eax, eax
.text:0041992C                 jnz     loc_4196E7
.text:00419932                 mov     dword ptr [ebx], 7263694Dh
.text:00419938                 mov     dword ptr [ebx+4], 666F736Fh
.text:0041993F                 mov     dword ptr [ebx+8], 69572074h
.text:00419946                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041994D                 mov     dword ptr [ebx+10h], 30322073h
.text:00419954                 mov     word ptr [ebx+14h], 3030h
.text:0041995A                 mov     byte ptr [ebx+16h], 0
.text:0041995E                 jmp     loc_4196E7
.text:00419963 ; ---------------------------------------------------------------------------
.text:00419963
.text:00419963 loc_419963:                             ; CODE XREF: .text:00419928↑j
.text:00419963                 mov     dword ptr [ebx], 7263694Dh
.text:00419969                 mov     dword ptr [ebx+4], 666F736Fh
.text:00419970                 mov     dword ptr [ebx+8], 69572074h
.text:00419977                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0041997E                 mov     dword ptr [ebx+10h], 50582073h
.text:00419985                 jmp     loc_4196E3
.text:0041998A ; ---------------------------------------------------------------------------
.text:0041998A
.text:0041998A loc_41998A:                             ; CODE XREF: .text:00419923↑j
.text:0041998A                 mov     dword ptr [ebx], 7263694Dh
.text:00419990                 mov     dword ptr [ebx+4], 666F736Fh
.text:00419997                 mov     dword ptr [ebx+8], 69572074h
.text:0041999E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004199A5                 mov     dword ptr [ebx+10h], 65532073h
.text:004199AC                 mov     dword ptr [ebx+14h], 72657672h
.text:004199B3                 mov     dword ptr [ebx+18h], 30303220h
.text:004199BA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:004199C0                 jmp     loc_4196E7
.text:004199C5 ; ---------------------------------------------------------------------------
.text:004199C5
.text:004199C5 loc_4199C5:                             ; CODE XREF: .text:004196A4↑j
.text:004199C5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004199CB                 test    edx, edx
.text:004199CD                 jnz     loc_4196AA
.text:004199D3                 mov     dword ptr [ebx], 7263694Dh
.text:004199D9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004199E0                 mov     dword ptr [ebx+8], 69572074h
.text:004199E7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004199EE                 mov     dword ptr [ebx+10h], 544E2073h
.text:004199F5                 mov     dword ptr [ebx+14h], 302E3420h
.text:004199FC                 mov     byte ptr [ebx+18h], 0
.text:00419A00                 jmp     loc_4196E7
.text:00419A05 ; ---------------------------------------------------------------------------
.text:00419A05
.text:00419A05 loc_419A05:                             ; CODE XREF: .text:0041969B↑j
.text:00419A05                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00419A0C                 jnz     loc_4196A1
.text:00419A12                 mov     dword ptr [ebx], 7263694Dh
.text:00419A18                 mov     dword ptr [ebx+4], 666F736Fh
.text:00419A1F                 mov     dword ptr [ebx+8], 69572074h
.text:00419A26                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00419A2D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00419A34                 mov     dword ptr [ebx+14h], 352E3320h
.text:00419A3B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00419A41                 jmp     loc_4196E7
.text:00419A46 ; ---------------------------------------------------------------------------
.text:00419A46
.text:00419A46 loc_419A46:                             ; CODE XREF: .text:004195D6↑j
.text:00419A46                 cld
.text:00419A47                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00419A4C                 mov     ecx, 8
.text:00419A51                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00419A58                 mov     edi, ebx
.text:00419A5A                 rep movsd
.text:00419A5C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00419A63                 mov     [edi+2], dl
.text:00419A66                 mov     [edi], si
.text:00419A69                 jmp     loc_419680
.text:00419A69 ; ---------------------------------------------------------------------------
.text:00419A6E                 align 10h
.text:00419A70
.text:00419A70 loc_419A70:                             ; CODE XREF: .text:004195CD↑j
.text:00419A70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00419A76                 cmp     ecx, 4
.text:00419A79                 jz      loc_419B30
.text:00419A7F
.text:00419A7F loc_419A7F:                             ; CODE XREF: .text:00419B86↓j
.text:00419A7F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00419A85
.text:00419A85 loc_419A85:                             ; CODE XREF: .text:00419B38↓j
.text:00419A85                 cmp     ecx, 4
.text:00419A88                 jz      short loc_419A94
.text:00419A8A
.text:00419A8A loc_419A8A:                             ; CODE XREF: .text:00419A9C↓j
.text:00419A8A                                         ; .text:00419AA1↓j
.text:00419A8A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00419A8F                 jmp     loc_4195FC
.text:00419A94 ; ---------------------------------------------------------------------------
.text:00419A94
.text:00419A94 loc_419A94:                             ; CODE XREF: .text:00419A88↑j
.text:00419A94                 cmp     edx, 0Ah
.text:00419A97                 jz      short loc_419AC1
.text:00419A99
.text:00419A99 loc_419A99:                             ; CODE XREF: .text:00419B0F↓j
.text:00419A99                 cmp     ecx, 4
.text:00419A9C                 jnz     short loc_419A8A
.text:00419A9E                 cmp     edx, 5Ah ; 'Z'
.text:00419AA1                 jnz     short loc_419A8A
.text:00419AA3                 cld
.text:00419AA4                 mov     edi, ebx
.text:00419AA6                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00419AAB                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00419AB2                 mov     ecx, 9
.text:00419AB7                 rep movsd
.text:00419AB9                 mov     [edi], bx
.text:00419ABC                 jmp     loc_419680
.text:00419AC1 ; ---------------------------------------------------------------------------
.text:00419AC1
.text:00419AC1 loc_419AC1:                             ; CODE XREF: .text:00419A97↑j
.text:00419AC1                 mov     dword ptr [ebx], 7263694Dh
.text:00419AC7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00419ACE                 mov     dword ptr [ebx+8], 69572074h
.text:00419AD5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00419ADC                 mov     dword ptr [ebx+10h], 38392073h
.text:00419AE3                 mov     byte ptr [ebx+14h], 0
.text:00419AE7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00419AED                 lea     edi, [edx-7CFh]
.text:00419AF3                 cmp     edi, 0B7h ; '·'
.text:00419AF9                 jbe     short loc_419B23
.text:00419AFB                 cmp     edx, 886h
.text:00419B01                 ja      short loc_419B11
.text:00419B03
.text:00419B03 loc_419B03:                             ; CODE XREF: .text:00419B21↓j
.text:00419B03                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00419B09                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00419B0F                 jmp     short loc_419A99
.text:00419B11 ; ---------------------------------------------------------------------------
.text:00419B11
.text:00419B11 loc_419B11:                             ; CODE XREF: .text:00419B01↑j
.text:00419B11                 mov     dword ptr [esp+4], offset loc_419596
.text:00419B19
.text:00419B19 loc_419B19:                             ; CODE XREF: .text:00419B2B↓j
.text:00419B19                 mov     [esp], ebx
.text:00419B1C                 call    strcat
.text:00419B21                 jmp     short loc_419B03
.text:00419B23 ; ---------------------------------------------------------------------------
.text:00419B23
.text:00419B23 loc_419B23:                             ; CODE XREF: .text:00419AF9↑j
.text:00419B23                 mov     dword ptr [esp+4], 41959Ah
.text:00419B2B                 jmp     short loc_419B19
.text:00419B2B ; ---------------------------------------------------------------------------
.text:00419B2D                 align 10h
.text:00419B30
.text:00419B30 loc_419B30:                             ; CODE XREF: .text:00419A79↑j
.text:00419B30                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00419B36                 test    edx, edx
.text:00419B38                 jnz     loc_419A85
.text:00419B3E                 mov     dword ptr [ebx], 7263694Dh
.text:00419B44                 mov     dword ptr [ebx+4], 666F736Fh
.text:00419B4B                 mov     dword ptr [ebx+8], 69572074h
.text:00419B52                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00419B59                 mov     dword ptr [ebx+10h], 35392073h
.text:00419B60                 mov     byte ptr [ebx+14h], 0
.text:00419B64                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00419B6A                 lea     ecx, [edx-3B7h]
.text:00419B70                 cmp     ecx, 81h
.text:00419B76                 jbe     short loc_419B9D
.text:00419B78                 cmp     edx, 438h
.text:00419B7E                 ja      short loc_419B8B
.text:00419B80
.text:00419B80 loc_419B80:                             ; CODE XREF: .text:00419B9B↓j
.text:00419B80                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00419B86                 jmp     loc_419A7F
.text:00419B8B ; ---------------------------------------------------------------------------
.text:00419B8B
.text:00419B8B loc_419B8B:                             ; CODE XREF: .text:00419B7E↑j
.text:00419B8B                 mov     dword ptr [esp+4], offset loc_41959F
.text:00419B93
.text:00419B93 loc_419B93:                             ; CODE XREF: .text:00419BA5↓j
.text:00419B93                 mov     [esp], ebx
.text:00419B96                 call    strcat
.text:00419B9B                 jmp     short loc_419B80
.text:00419B9D ; ---------------------------------------------------------------------------
.text:00419B9D
.text:00419B9D loc_419B9D:                             ; CODE XREF: .text:00419B76↑j
.text:00419B9D                 mov     dword ptr [esp+4], 41959Ah
.text:00419BA5                 jmp     short loc_419B93
.text:00419BA5 ; ---------------------------------------------------------------------------
.text:00419BA7                 align 10h
.text:00419BB0
.text:00419BB0 ; =============== S U B R O U T I N E =======================================
.text:00419BB0
.text:00419BB0
.text:00419BB0 sub_419BB0      proc near               ; CODE XREF: .text:00417D2E↑p
.text:00419BB0                                         ; sub_4181B0+12A↑p
.text:00419BB0                 sub     esp, 0Ch
.text:00419BB3                 call    sub_419CC0
.text:00419BB8                 mov     eax, ds:dword_420680
.text:00419BBD                 add     esp, 0Ch
.text:00419BC0                 retn
.text:00419BC0 sub_419BB0      endp
.text:00419BC0
.text:00419BC1 ; ---------------------------------------------------------------------------
.text:00419BC1                 jmp     short loc_419BD0
.text:00419BC1 ; ---------------------------------------------------------------------------
.text:00419BC3                 align 10h
.text:00419BD0
.text:00419BD0 loc_419BD0:                             ; CODE XREF: .text:00419BC1↑j
.text:00419BD0                 sub     esp, 0Ch
.text:00419BD3                 call    sub_419CC0
.text:00419BD8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00419BDD                 add     esp, 0Ch
.text:00419BE0                 retn
.text:00419BE1 ; ---------------------------------------------------------------------------
.text:00419BE1                 jmp     short loc_419BF0
.text:00419BE1 ; ---------------------------------------------------------------------------
.text:00419BE3                 align 10h
.text:00419BF0
.text:00419BF0 loc_419BF0:                             ; CODE XREF: .text:00419BE1↑j
.text:00419BF0                 sub     esp, 0Ch
.text:00419BF3                 call    sub_419CC0
.text:00419BF8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00419BFD                 add     esp, 0Ch
.text:00419C00                 retn
.text:00419C01 ; ---------------------------------------------------------------------------
.text:00419C01                 jmp     short loc_419C10
.text:00419C01 ; ---------------------------------------------------------------------------
.text:00419C03                 align 10h
.text:00419C10
.text:00419C10 loc_419C10:                             ; CODE XREF: .text:00419C01↑j
.text:00419C10                 sub     esp, 0Ch
.text:00419C13                 call    sub_419CC0
.text:00419C18                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00419C1D                 add     esp, 0Ch
.text:00419C20                 retn
.text:00419C21 ; ---------------------------------------------------------------------------
.text:00419C21                 jmp     short loc_419C30
.text:00419C21 ; ---------------------------------------------------------------------------
.text:00419C23                 align 10h
.text:00419C30
.text:00419C30 loc_419C30:                             ; CODE XREF: .text:00419C21↑j
.text:00419C30                 sub     esp, 0Ch
.text:00419C33                 call    GetVersion
.text:00419C38                 shr     eax, 10h
.text:00419C3B                 add     esp, 0Ch
.text:00419C3E                 retn
.text:00419C3E ; ---------------------------------------------------------------------------
.text:00419C3F                 align 10h
.text:00419C40                 sub     esp, 0Ch
.text:00419C43                 call    sub_419CC0
.text:00419C48                 xor     eax, eax
.text:00419C4A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00419C51                 setz    al
.text:00419C54                 add     esp, 0Ch
.text:00419C57                 retn
.text:00419C57 ; ---------------------------------------------------------------------------
.text:00419C58                 align 10h
.text:00419C60
.text:00419C60 ; =============== S U B R O U T I N E =======================================
.text:00419C60
.text:00419C60
.text:00419C60 sub_419C60      proc near               ; CODE XREF: .text:loc_417240↑p
.text:00419C60                                         ; .text:loc_417D14↑p ...
.text:00419C60                 sub     esp, 0Ch
.text:00419C63                 call    sub_419CC0
.text:00419C68                 xor     eax, eax
.text:00419C6A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00419C71                 setz    al
.text:00419C74                 add     esp, 0Ch
.text:00419C77                 retn
.text:00419C77 sub_419C60      endp
.text:00419C77
.text:00419C77 ; ---------------------------------------------------------------------------
.text:00419C78                 align 10h
.text:00419C80                 sub     esp, 0Ch
.text:00419C83                 call    sub_419CC0
.text:00419C88                 xor     eax, eax
.text:00419C8A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00419C91                 setz    al
.text:00419C94                 add     esp, 0Ch
.text:00419C97                 retn
.text:00419C97 ; ---------------------------------------------------------------------------
.text:00419C98                 align 10h
.text:00419CA0                 sub     esp, 0Ch
.text:00419CA3                 call    sub_419CC0
.text:00419CA8                 xor     eax, eax
.text:00419CAA                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00419CB1                 setz    al
.text:00419CB4                 add     esp, 0Ch
.text:00419CB7                 retn
.text:00419CB7 ; ---------------------------------------------------------------------------
.text:00419CB8                 align 10h
.text:00419CC0
.text:00419CC0 ; =============== S U B R O U T I N E =======================================
.text:00419CC0
.text:00419CC0
.text:00419CC0 sub_419CC0      proc near               ; CODE XREF: .text:004195C0↑p
.text:00419CC0                                         ; sub_419BB0+3↑p ...
.text:00419CC0
.text:00419CC0 lpVersionInformation= dword ptr -0BCh
.text:00419CC0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00419CC0
.text:00419CC0                 sub     esp, 0BCh
.text:00419CC6                 mov     edx, ds:dword_420730
.text:00419CCC                 test    edx, edx
.text:00419CCE                 jz      short loc_419CE0
.text:00419CD0
.text:00419CD0 loc_419CD0:                             ; CODE XREF: sub_419CC0+7B↓j
.text:00419CD0                 mov     edx, 1
.text:00419CD5
.text:00419CD5 loc_419CD5:                             ; CODE XREF: sub_419CC0+217↓j
.text:00419CD5                 mov     eax, edx
.text:00419CD7                 add     esp, 0BCh
.text:00419CDD                 retn
.text:00419CDD ; ---------------------------------------------------------------------------
.text:00419CDE                 align 10h
.text:00419CE0
.text:00419CE0 loc_419CE0:                             ; CODE XREF: sub_419CC0+E↑j
.text:00419CE0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00419CE7                 mov     edx, 9Ch ; 'œ'
.text:00419CEC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00419CF2                 call    GetVersionExA
.text:00419CF7                 sub     esp, 4
.text:00419CFA                 test    eax, eax
.text:00419CFC                 jz      loc_419EB4
.text:00419D02
.text:00419D02 loc_419D02:                             ; CODE XREF: sub_419CC0+245↓j
.text:00419D02                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00419D09                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00419D0E                 cmp     eax, 1
.text:00419D11                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00419D17                 jz      loc_419E00
.text:00419D1D                 cmp     eax, 1
.text:00419D20                 jb      loc_419DF0
.text:00419D26                 cmp     eax, 2
.text:00419D29                 jz      short loc_419D4A
.text:00419D2B                 cmp     eax, 3
.text:00419D2E                 jz      short loc_419D3D
.text:00419D30
.text:00419D30 loc_419D30:                             ; CODE XREF: sub_419CC0+88↓j
.text:00419D30                                         ; sub_419CC0+C0↓j ...
.text:00419D30                 mov     edx, 1
.text:00419D35                 mov     ds:dword_420730, edx
.text:00419D3B                 jmp     short loc_419CD0
.text:00419D3D ; ---------------------------------------------------------------------------
.text:00419D3D
.text:00419D3D loc_419D3D:                             ; CODE XREF: sub_419CC0+6E↑j
.text:00419D3D                 mov     ecx, 17h
.text:00419D42
.text:00419D42 loc_419D42:                             ; CODE XREF: sub_419CC0+1A7↓j
.text:00419D42                 mov     ds:dword_420680, ecx
.text:00419D48                 jmp     short loc_419D30
.text:00419D4A ; ---------------------------------------------------------------------------
.text:00419D4A
.text:00419D4A loc_419D4A:                             ; CODE XREF: sub_419CC0+69↑j
.text:00419D4A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00419D4F                 cmp     eax, 3
.text:00419D52                 jz      short loc_419DCB
.text:00419D54                 cmp     eax, 4
.text:00419D57                 jz      short loc_419DBA
.text:00419D59
.text:00419D59 loc_419D59:                             ; CODE XREF: sub_419CC0+102↓j
.text:00419D59                 cmp     eax, 4
.text:00419D5C                 ja      short loc_419D82
.text:00419D5E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00419D64                 test    ecx, ecx
.text:00419D66                 jnz     short loc_419D82
.text:00419D68                 mov     edx, 1Eh
.text:00419D6D
.text:00419D6D loc_419D6D:                             ; CODE XREF: sub_419CC0+DF↓j
.text:00419D6D                 mov     ds:dword_420680, edx
.text:00419D73
.text:00419D73 loc_419D73:                             ; CODE XREF: sub_419CC0+C5↓j
.text:00419D73                                         ; sub_419CC0+D8↓j ...
.text:00419D73                 movzx   ecx, ds:word_420724
.text:00419D7A                 add     ds:dword_420680, ecx
.text:00419D80                 jmp     short loc_419D30
.text:00419D82 ; ---------------------------------------------------------------------------
.text:00419D82
.text:00419D82 loc_419D82:                             ; CODE XREF: sub_419CC0+9C↑j
.text:00419D82                                         ; sub_419CC0+A6↑j
.text:00419D82                 cmp     eax, 5
.text:00419D85                 jnz     short loc_419D73
.text:00419D87                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00419D8C                 cmp     eax, 2
.text:00419D8F                 jz      short loc_419DAE
.text:00419D91                 cmp     eax, 1
.text:00419D94                 jz      short loc_419DA1
.text:00419D96                 test    eax, eax
.text:00419D98                 jnz     short loc_419D73
.text:00419D9A                 mov     edx, 32h ; '2'
.text:00419D9F                 jmp     short loc_419D6D
.text:00419DA1 ; ---------------------------------------------------------------------------
.text:00419DA1
.text:00419DA1 loc_419DA1:                             ; CODE XREF: sub_419CC0+D4↑j
.text:00419DA1                 mov     ecx, 3Ch ; '<'
.text:00419DA6
.text:00419DA6 loc_419DA6:                             ; CODE XREF: sub_419CC0+122↓j
.text:00419DA6                 mov     ds:dword_420680, ecx
.text:00419DAC                 jmp     short loc_419D73
.text:00419DAE ; ---------------------------------------------------------------------------
.text:00419DAE
.text:00419DAE loc_419DAE:                             ; CODE XREF: sub_419CC0+CF↑j
.text:00419DAE                 mov     eax, 46h ; 'F'
.text:00419DB3
.text:00419DB3 loc_419DB3:                             ; CODE XREF: sub_419CC0+109↓j
.text:00419DB3                                         ; sub_419CC0+129↓j
.text:00419DB3                 mov     ds:dword_420680, eax
.text:00419DB8                 jmp     short loc_419D73
.text:00419DBA ; ---------------------------------------------------------------------------
.text:00419DBA
.text:00419DBA loc_419DBA:                             ; CODE XREF: sub_419CC0+97↑j
.text:00419DBA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00419DC0                 test    ecx, ecx
.text:00419DC2                 jnz     short loc_419D59
.text:00419DC4                 mov     eax, 28h ; '('
.text:00419DC9                 jmp     short loc_419DB3
.text:00419DCB ; ---------------------------------------------------------------------------
.text:00419DCB
.text:00419DCB loc_419DCB:                             ; CODE XREF: sub_419CC0+92↑j
.text:00419DCB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00419DD0                 cmp     eax, 33h ; '3'
.text:00419DD3                 jz      short loc_419DE4
.text:00419DD5                 cmp     eax, 5
.text:00419DD8                 setz    cl
.text:00419DDB                 movzx   edx, cl
.text:00419DDE                 lea     ecx, [edx+edx*4+1Eh]
.text:00419DE2                 jmp     short loc_419DA6
.text:00419DE4 ; ---------------------------------------------------------------------------
.text:00419DE4
.text:00419DE4 loc_419DE4:                             ; CODE XREF: sub_419CC0+113↑j
.text:00419DE4                 mov     eax, 24h ; '$'
.text:00419DE9                 jmp     short loc_419DB3
.text:00419DE9 ; ---------------------------------------------------------------------------
.text:00419DEB                 align 10h
.text:00419DF0
.text:00419DF0 loc_419DF0:                             ; CODE XREF: sub_419CC0+60↑j
.text:00419DF0                 mov     edx, 2
.text:00419DF5                 mov     ds:dword_420680, edx
.text:00419DFB                 jmp     loc_419D30
.text:00419E00 ; ---------------------------------------------------------------------------
.text:00419E00
.text:00419E00 loc_419E00:                             ; CODE XREF: sub_419CC0+57↑j
.text:00419E00                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00419E06                 cmp     ecx, 4
.text:00419E09                 jnz     loc_419D30
.text:00419E0F                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00419E14                 test    eax, eax
.text:00419E16                 jnz     short loc_419E3A
.text:00419E18                 mov     eax, 0Ah
.text:00419E1D                 mov     ds:dword_420680, eax
.text:00419E22                 lea     eax, [edx-3B7h]
.text:00419E28                 cmp     eax, 81h
.text:00419E2D                 ja      short loc_419EA5
.text:00419E2F                 mov     edx, 0Bh
.text:00419E34
.text:00419E34 loc_419E34:                             ; CODE XREF: sub_419CC0+1F2↓j
.text:00419E34                 mov     ds:dword_420680, edx
.text:00419E3A
.text:00419E3A loc_419E3A:                             ; CODE XREF: sub_419CC0+156↑j
.text:00419E3A                                         ; sub_419CC0+1EB↓j
.text:00419E3A                 cmp     ecx, 4
.text:00419E3D                 jnz     loc_419D30
.text:00419E43                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00419E4A                 jz      short loc_419E6C
.text:00419E4C
.text:00419E4C loc_419E4C:                             ; CODE XREF: sub_419CC0+1D4↓j
.text:00419E4C                                         ; sub_419CC0+1DC↓j
.text:00419E4C                 cmp     ecx, 4
.text:00419E4F                 jnz     loc_419D30
.text:00419E55                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00419E5C                 jnz     loc_419D30
.text:00419E62                 mov     ecx, 12h
.text:00419E67                 jmp     loc_419D42
.text:00419E6C ; ---------------------------------------------------------------------------
.text:00419E6C
.text:00419E6C loc_419E6C:                             ; CODE XREF: sub_419CC0+18A↑j
.text:00419E6C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00419E72                 mov     eax, 0Eh
.text:00419E77                 mov     ds:dword_420680, eax
.text:00419E7C                 lea     eax, [edx-7CFh]
.text:00419E82                 cmp     eax, 0B7h ; '·'
.text:00419E87                 ja      short loc_419E96
.text:00419E89                 mov     edx, 0Fh
.text:00419E8E
.text:00419E8E loc_419E8E:                             ; CODE XREF: sub_419CC0+1E3↓j
.text:00419E8E                 mov     ds:dword_420680, edx
.text:00419E94                 jmp     short loc_419E4C
.text:00419E96 ; ---------------------------------------------------------------------------
.text:00419E96
.text:00419E96 loc_419E96:                             ; CODE XREF: sub_419CC0+1C7↑j
.text:00419E96                 cmp     edx, 886h
.text:00419E9C                 jbe     short loc_419E4C
.text:00419E9E                 mov     edx, 10h
.text:00419EA3                 jmp     short loc_419E8E
.text:00419EA5 ; ---------------------------------------------------------------------------
.text:00419EA5
.text:00419EA5 loc_419EA5:                             ; CODE XREF: sub_419CC0+16D↑j
.text:00419EA5                 cmp     edx, 438h
.text:00419EAB                 jbe     short loc_419E3A
.text:00419EAD                 mov     edx, 0Ch
.text:00419EB2                 jmp     short loc_419E34
.text:00419EB4 ; ---------------------------------------------------------------------------
.text:00419EB4
.text:00419EB4 loc_419EB4:                             ; CODE XREF: sub_419CC0+3C↑j
.text:00419EB4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00419EBC                 xor     edx, edx
.text:00419EBE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00419EC2                 mov     dword_41F0A0, edx
.text:00419EC8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00419ECB                 call    GetVersionExA
.text:00419ED0                 sub     esp, 4
.text:00419ED3                 xor     edx, edx
.text:00419ED5                 test    eax, eax
.text:00419ED7                 jz      loc_419CD5
.text:00419EDD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00419EE1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00419EE5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00419EEB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00419EEF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00419EF5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00419EF9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00419EFF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00419F05                 jmp     loc_419D02
.text:00419F05 sub_419CC0      endp
.text:00419F05
.text:00419F05 ; ---------------------------------------------------------------------------
.text:00419F0A                 align 10h
.text:00419F10 aNotset         db 'notset',0           ; DATA XREF: .data:off_41F0B0↓o
.text:00419F10                                         ; .data:off_41F0B4↓o
.text:00419F17 ; ---------------------------------------------------------------------------
.text:00419F17
.text:00419F17 loc_419F17:                             ; DATA XREF: .text:loc_419FB5↓o
.text:00419F17                 jb      short loc_419F90
.text:00419F19                 add     [eax], ah
.text:00419F1B                 or      [eax], eax
.text:00419F1D
.text:00419F1D loc_419F1D:                             ; DATA XREF: .text:0041A008↓o
.text:00419F1D                                         ; .text:0041A06E↓o ...
.text:00419F1D                 add     [eax], ah
.text:00419F1F                 and     eax, 64252064h
.text:00419F24                 and     [eax], al
.text:00419F26                 lea     esi, [esi+0]
.text:00419F29                 lea     edi, [edi+0]
.text:00419F30                 push    ebp
.text:00419F31                 push    edi
.text:00419F32                 push    esi
.text:00419F33                 push    ebx
.text:00419F34                 sub     esp, 14Ch
.text:00419F3A                 mov     edx, off_41F0B0 ; "notset"
.text:00419F40                 mov     edi, [esp+164h]
.text:00419F47                 mov     ebp, [esp+168h]
.text:00419F4E                 mov     [esp+4], edx
.text:00419F52                 mov     edx, off_41F0B4 ; "notset"
.text:00419F58                 mov     [esp], edx
.text:00419F5B                 call    strcmp
.text:00419F60                 test    eax, eax
.text:00419F62                 jz      loc_41A350
.text:00419F68
.text:00419F68 loc_419F68:                             ; CODE XREF: .text:0041A39C↓j
.text:00419F68                 lea     ebx, [esp+20h]
.text:00419F6C                 lea     esi, [esi+0]
.text:00419F70
.text:00419F70 loc_419F70:                             ; CODE XREF: .text:00419FA6↓j
.text:00419F70                 mov     [esp+4], ebx
.text:00419F74                 mov     ecx, off_41F0B4 ; "notset"
.text:00419F7A                 mov     [esp], ecx
.text:00419F7D                 call    loc_418250
.text:00419F82                 test    eax, eax
.text:00419F84                 jns     short loc_419FB5
.text:00419F86                 mov     eax, off_41F0B4 ; "notset"
.text:00419F8B                 cmp     byte ptr [eax], 0
.text:00419F8E                 jz      short loc_419FA8
.text:00419F90
.text:00419F90 loc_419F90:                             ; CODE XREF: .text:loc_419F17↑j
.text:00419F90                 mov     dword ptr [esp+4], 0
.text:00419F98                 mov     [esp], eax
.text:00419F9B                 call    strchr
.text:00419FA0                 inc     eax
.text:00419FA1                 mov     off_41F0B4, eax ; "notset"
.text:00419FA6                 jmp     short loc_419F70
.text:00419FA8 ; ---------------------------------------------------------------------------
.text:00419FA8
.text:00419FA8 loc_419FA8:                             ; CODE XREF: .text:00419F8E↑j
.text:00419FA8                 xor     eax, eax
.text:00419FAA
.text:00419FAA loc_419FAA:                             ; CODE XREF: .text:0041A16C↓j
.text:00419FAA                 add     esp, 14Ch
.text:00419FB0                 pop     ebx
.text:00419FB1                 pop     esi
.text:00419FB2                 pop     edi
.text:00419FB3                 pop     ebp
.text:00419FB4                 retn
.text:00419FB5 ; ---------------------------------------------------------------------------
.text:00419FB5
.text:00419FB5 loc_419FB5:                             ; CODE XREF: .text:00419F84↑j
.text:00419FB5                 mov     dword ptr [edi+0Ch], offset loc_419F17
.text:00419FBC                 lea     ecx, [esp+0D6h]
.text:00419FC3                 lea     edx, [esp+6Ch]
.text:00419FC7                 mov     [edi+4], ecx
.text:00419FCA                 lea     ebx, [esp+7Ch]
.text:00419FCE                 mov     [edi+8], edx
.text:00419FD1                 mov     [edi], ebx
.text:00419FD3                 mov     [esp], ebp
.text:00419FD6                 mov     [esp+4], edi
.text:00419FDA                 call    ___addmntentstr
.text:00419FDF                 mov     [esp], ebp
.text:00419FE2                 mov     dword ptr [esp+4], 419F1Ah
.text:00419FEA                 call    strspn
.text:00419FEF                 mov     dword ptr [esp+4], 0
.text:00419FF7                 mov     ebx, off_41F0B4 ; "notset"
.text:00419FFD                 lea     esi, [eax+ebp]
.text:0041A000                 mov     [esp+1Ch], esi
.text:0041A004                 lea     ebp, [esp+1Ch]
.text:0041A008                 mov     esi, offset loc_419F1D
.text:0041A00D                 mov     [esp], ebx
.text:0041A010                 call    strchr
.text:0041A015                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A01D                 inc     eax
.text:0041A01E                 mov     off_41F0B4, eax ; "notset"
.text:0041A023                 mov     [esp], ebp
.text:0041A026                 call    sub_41B680
.text:0041A02B                 test    eax, eax
.text:0041A02D                 mov     ebx, eax
.text:0041A02F                 jz      short loc_41A058
.text:0041A031                 mov     edx, eax
.text:0041A033                 mov     ecx, eax
.text:0041A035                 lea     esi, [esi+0]
.text:0041A039                 lea     edi, [edi+0]
.text:0041A040
.text:0041A040 loc_41A040:                             ; CODE XREF: .text:0041A056↓j
.text:0041A040                 movzx   eax, byte ptr [edx]
.text:0041A043                 cmp     al, 5Ch ; '\'
.text:0041A045                 jz      loc_41A2F4
.text:0041A04B
.text:0041A04B loc_41A04B:                             ; CODE XREF: .text:0041A2FC↓j
.text:0041A04B                                         ; .text:0041A30A↓j ...
.text:0041A04B                 mov     [ecx], al
.text:0041A04D
.text:0041A04D loc_41A04D:                             ; CODE XREF: .text:0041A31E↓j
.text:0041A04D                 inc     ecx
.text:0041A04E
.text:0041A04E loc_41A04E:                             ; CODE XREF: .text:0041A336↓j
.text:0041A04E                 movzx   eax, byte ptr [edx]
.text:0041A051                 mov     esi, ebx
.text:0041A053                 inc     edx
.text:0041A054                 test    al, al
.text:0041A056                 jnz     short loc_41A040
.text:0041A058
.text:0041A058 loc_41A058:                             ; CODE XREF: .text:0041A02F↑j
.text:0041A058                 mov     [edi], esi
.text:0041A05A                 mov     eax, [esp+1Ch]
.text:0041A05E                 test    eax, eax
.text:0041A060                 jnz     loc_41A2DB
.text:0041A066
.text:0041A066 loc_41A066:                             ; CODE XREF: .text:0041A2EF↓j
.text:0041A066                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A06E                 mov     esi, offset loc_419F1D
.text:0041A073                 mov     [esp], ebp
.text:0041A076                 call    sub_41B680
.text:0041A07B                 test    eax, eax
.text:0041A07D                 mov     ebx, eax
.text:0041A07F                 jz      short loc_41A0A8
.text:0041A081                 mov     edx, eax
.text:0041A083                 mov     ecx, eax
.text:0041A085                 lea     esi, [esi+0]
.text:0041A089                 lea     edi, [edi+0]
.text:0041A090
.text:0041A090 loc_41A090:                             ; CODE XREF: .text:0041A0A6↓j
.text:0041A090                 movzx   eax, byte ptr [edx]
.text:0041A093                 cmp     al, 5Ch ; '\'
.text:0041A095                 jz      loc_41A283
.text:0041A09B
.text:0041A09B loc_41A09B:                             ; CODE XREF: .text:0041A28B↓j
.text:0041A09B                                         ; .text:0041A299↓j ...
.text:0041A09B                 mov     [ecx], al
.text:0041A09D
.text:0041A09D loc_41A09D:                             ; CODE XREF: .text:0041A2AD↓j
.text:0041A09D                 inc     ecx
.text:0041A09E
.text:0041A09E loc_41A09E:                             ; CODE XREF: .text:0041A2C5↓j
.text:0041A09E                 movzx   eax, byte ptr [edx]
.text:0041A0A1                 mov     esi, ebx
.text:0041A0A3                 inc     edx
.text:0041A0A4                 test    al, al
.text:0041A0A6                 jnz     short loc_41A090
.text:0041A0A8
.text:0041A0A8 loc_41A0A8:                             ; CODE XREF: .text:0041A07F↑j
.text:0041A0A8                 mov     [edi+4], esi
.text:0041A0AB                 mov     eax, [esp+1Ch]
.text:0041A0AF                 test    eax, eax
.text:0041A0B1                 jnz     loc_41A26A
.text:0041A0B7
.text:0041A0B7 loc_41A0B7:                             ; CODE XREF: .text:0041A27E↓j
.text:0041A0B7                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A0BF                 mov     esi, offset loc_419F1D
.text:0041A0C4                 mov     [esp], ebp
.text:0041A0C7                 call    sub_41B680
.text:0041A0CC                 test    eax, eax
.text:0041A0CE                 mov     ebx, eax
.text:0041A0D0                 jz      short loc_41A0F8
.text:0041A0D2                 mov     edx, eax
.text:0041A0D4                 mov     ecx, eax
.text:0041A0D6                 lea     esi, [esi+0]
.text:0041A0D9                 lea     edi, [edi+0]
.text:0041A0E0
.text:0041A0E0 loc_41A0E0:                             ; CODE XREF: .text:0041A0F6↓j
.text:0041A0E0                 movzx   eax, byte ptr [edx]
.text:0041A0E3                 cmp     al, 5Ch ; '\'
.text:0041A0E5                 jz      loc_41A212
.text:0041A0EB
.text:0041A0EB loc_41A0EB:                             ; CODE XREF: .text:0041A21A↓j
.text:0041A0EB                                         ; .text:0041A228↓j ...
.text:0041A0EB                 mov     [ecx], al
.text:0041A0ED
.text:0041A0ED loc_41A0ED:                             ; CODE XREF: .text:0041A23C↓j
.text:0041A0ED                 inc     ecx
.text:0041A0EE
.text:0041A0EE loc_41A0EE:                             ; CODE XREF: .text:0041A254↓j
.text:0041A0EE                 movzx   eax, byte ptr [edx]
.text:0041A0F1                 mov     esi, ebx
.text:0041A0F3                 inc     edx
.text:0041A0F4                 test    al, al
.text:0041A0F6                 jnz     short loc_41A0E0
.text:0041A0F8
.text:0041A0F8 loc_41A0F8:                             ; CODE XREF: .text:0041A0D0↑j
.text:0041A0F8                 mov     [edi+8], esi
.text:0041A0FB                 mov     eax, [esp+1Ch]
.text:0041A0FF                 test    eax, eax
.text:0041A101                 jnz     loc_41A1F9
.text:0041A107
.text:0041A107 loc_41A107:                             ; CODE XREF: .text:0041A20D↓j
.text:0041A107                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A10F                 mov     esi, offset loc_419F1D
.text:0041A114                 mov     [esp], ebp
.text:0041A117                 call    sub_41B680
.text:0041A11C                 test    eax, eax
.text:0041A11E                 mov     ebx, eax
.text:0041A120                 jz      short loc_41A144
.text:0041A122                 mov     edx, eax
.text:0041A124                 mov     ecx, eax
.text:0041A126                 lea     esi, [esi+0]
.text:0041A129                 lea     edi, [edi+0]
.text:0041A130
.text:0041A130 loc_41A130:                             ; CODE XREF: .text:0041A142↓j
.text:0041A130                 movzx   eax, byte ptr [edx]
.text:0041A133                 cmp     al, 5Ch ; '\'
.text:0041A135                 jz      short loc_41A1A5
.text:0041A137
.text:0041A137 loc_41A137:                             ; CODE XREF: .text:0041A1AD↓j
.text:0041A137                                         ; .text:0041A1B7↓j ...
.text:0041A137                 mov     [ecx], al
.text:0041A139
.text:0041A139 loc_41A139:                             ; CODE XREF: .text:0041A1CB↓j
.text:0041A139                 inc     ecx
.text:0041A13A
.text:0041A13A loc_41A13A:                             ; CODE XREF: .text:0041A1E3↓j
.text:0041A13A                 movzx   eax, byte ptr [edx]
.text:0041A13D                 mov     esi, ebx
.text:0041A13F                 inc     edx
.text:0041A140                 test    al, al
.text:0041A142                 jnz     short loc_41A130
.text:0041A144
.text:0041A144 loc_41A144:                             ; CODE XREF: .text:0041A120↑j
.text:0041A144                 mov     [edi+0Ch], esi
.text:0041A147                 xor     eax, eax
.text:0041A149                 mov     edx, [esp+1Ch]
.text:0041A14D                 test    edx, edx
.text:0041A14F                 jnz     short loc_41A185
.text:0041A151
.text:0041A151 loc_41A151:                             ; CODE XREF: .text:0041A1A3↓j
.text:0041A151                 cmp     eax, 1
.text:0041A154                 jz      short loc_41A17C
.text:0041A156                 cmp     eax, 1
.text:0041A159                 jle     short loc_41A171
.text:0041A15B
.text:0041A15B loc_41A15B:                             ; CODE XREF: .text:0041A173↓j
.text:0041A15B                                         ; .text:0041A183↓j
.text:0041A15B                 mov     edx, [esp+160h]
.text:0041A162                 mov     [esp], edx
.text:0041A165                 call    sub_41B620
.text:0041A16A                 mov     eax, edi
.text:0041A16C                 jmp     loc_419FAA
.text:0041A171 ; ---------------------------------------------------------------------------
.text:0041A171
.text:0041A171 loc_41A171:                             ; CODE XREF: .text:0041A159↑j
.text:0041A171                 test    eax, eax
.text:0041A173                 jnz     short loc_41A15B
.text:0041A175                 mov     dword ptr [edi+10h], 0
.text:0041A17C
.text:0041A17C loc_41A17C:                             ; CODE XREF: .text:0041A154↑j
.text:0041A17C                 mov     dword ptr [edi+14h], 0
.text:0041A183                 jmp     short loc_41A15B
.text:0041A185 ; ---------------------------------------------------------------------------
.text:0041A185
.text:0041A185 loc_41A185:                             ; CODE XREF: .text:0041A14F↑j
.text:0041A185                 mov     dword ptr [esp+4], 419F1Eh
.text:0041A18D                 lea     esi, [edi+14h]
.text:0041A190                 lea     ebp, [edi+10h]
.text:0041A193                 mov     [esp+0Ch], esi
.text:0041A197                 mov     [esp+8], ebp
.text:0041A19B                 mov     [esp], edx
.text:0041A19E                 call    sscanf
.text:0041A1A3                 jmp     short loc_41A151
.text:0041A1A5 ; ---------------------------------------------------------------------------
.text:0041A1A5
.text:0041A1A5 loc_41A1A5:                             ; CODE XREF: .text:0041A135↑j
.text:0041A1A5                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A1A9                 jz      short loc_41A1E8
.text:0041A1AB
.text:0041A1AB loc_41A1AB:                             ; CODE XREF: .text:0041A1EC↓j
.text:0041A1AB                                         ; .text:0041A1F2↓j
.text:0041A1AB                 cmp     al, 5Ch ; '\'
.text:0041A1AD                 jnz     short loc_41A137
.text:0041A1AF                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A1B3                 jz      short loc_41A1D0
.text:0041A1B5
.text:0041A1B5 loc_41A1B5:                             ; CODE XREF: .text:0041A1D4↓j
.text:0041A1B5                                         ; .text:0041A1DA↓j
.text:0041A1B5                 cmp     al, 5Ch ; '\'
.text:0041A1B7                 jnz     loc_41A137
.text:0041A1BD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A1C1                 jnz     loc_41A137
.text:0041A1C7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A1CA                 inc     edx
.text:0041A1CB                 jmp     loc_41A139
.text:0041A1D0 ; ---------------------------------------------------------------------------
.text:0041A1D0
.text:0041A1D0 loc_41A1D0:                             ; CODE XREF: .text:0041A1B3↑j
.text:0041A1D0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A1D4                 jnz     short loc_41A1B5
.text:0041A1D6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A1DA                 jnz     short loc_41A1B5
.text:0041A1DC                 mov     byte ptr [ecx], 9
.text:0041A1DF
.text:0041A1DF loc_41A1DF:                             ; CODE XREF: .text:0041A1F7↓j
.text:0041A1DF                 inc     ecx
.text:0041A1E0                 add     edx, 3
.text:0041A1E3                 jmp     loc_41A13A
.text:0041A1E8 ; ---------------------------------------------------------------------------
.text:0041A1E8
.text:0041A1E8 loc_41A1E8:                             ; CODE XREF: .text:0041A1A9↑j
.text:0041A1E8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A1EC                 jnz     short loc_41A1AB
.text:0041A1EE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A1F2                 jnz     short loc_41A1AB
.text:0041A1F4                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A1F7                 jmp     short loc_41A1DF
.text:0041A1F9 ; ---------------------------------------------------------------------------
.text:0041A1F9
.text:0041A1F9 loc_41A1F9:                             ; CODE XREF: .text:0041A101↑j
.text:0041A1F9                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A201                 mov     [esp], eax
.text:0041A204                 call    strspn
.text:0041A209                 add     [esp+1Ch], eax
.text:0041A20D                 jmp     loc_41A107
.text:0041A212 ; ---------------------------------------------------------------------------
.text:0041A212
.text:0041A212 loc_41A212:                             ; CODE XREF: .text:0041A0E5↑j
.text:0041A212                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A216                 jz      short loc_41A259
.text:0041A218
.text:0041A218 loc_41A218:                             ; CODE XREF: .text:0041A25D↓j
.text:0041A218                                         ; .text:0041A263↓j
.text:0041A218                 cmp     al, 5Ch ; '\'
.text:0041A21A                 jnz     loc_41A0EB
.text:0041A220                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A224                 jz      short loc_41A241
.text:0041A226
.text:0041A226 loc_41A226:                             ; CODE XREF: .text:0041A245↓j
.text:0041A226                                         ; .text:0041A24B↓j
.text:0041A226                 cmp     al, 5Ch ; '\'
.text:0041A228                 jnz     loc_41A0EB
.text:0041A22E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A232                 jnz     loc_41A0EB
.text:0041A238                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A23B                 inc     edx
.text:0041A23C                 jmp     loc_41A0ED
.text:0041A241 ; ---------------------------------------------------------------------------
.text:0041A241
.text:0041A241 loc_41A241:                             ; CODE XREF: .text:0041A224↑j
.text:0041A241                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A245                 jnz     short loc_41A226
.text:0041A247                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A24B                 jnz     short loc_41A226
.text:0041A24D                 mov     byte ptr [ecx], 9
.text:0041A250
.text:0041A250 loc_41A250:                             ; CODE XREF: .text:0041A268↓j
.text:0041A250                 inc     ecx
.text:0041A251                 add     edx, 3
.text:0041A254                 jmp     loc_41A0EE
.text:0041A259 ; ---------------------------------------------------------------------------
.text:0041A259
.text:0041A259 loc_41A259:                             ; CODE XREF: .text:0041A216↑j
.text:0041A259                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A25D                 jnz     short loc_41A218
.text:0041A25F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A263                 jnz     short loc_41A218
.text:0041A265                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A268                 jmp     short loc_41A250
.text:0041A26A ; ---------------------------------------------------------------------------
.text:0041A26A
.text:0041A26A loc_41A26A:                             ; CODE XREF: .text:0041A0B1↑j
.text:0041A26A                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A272                 mov     [esp], eax
.text:0041A275                 call    strspn
.text:0041A27A                 add     [esp+1Ch], eax
.text:0041A27E                 jmp     loc_41A0B7
.text:0041A283 ; ---------------------------------------------------------------------------
.text:0041A283
.text:0041A283 loc_41A283:                             ; CODE XREF: .text:0041A095↑j
.text:0041A283                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A287                 jz      short loc_41A2CA
.text:0041A289
.text:0041A289 loc_41A289:                             ; CODE XREF: .text:0041A2CE↓j
.text:0041A289                                         ; .text:0041A2D4↓j
.text:0041A289                 cmp     al, 5Ch ; '\'
.text:0041A28B                 jnz     loc_41A09B
.text:0041A291                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A295                 jz      short loc_41A2B2
.text:0041A297
.text:0041A297 loc_41A297:                             ; CODE XREF: .text:0041A2B6↓j
.text:0041A297                                         ; .text:0041A2BC↓j
.text:0041A297                 cmp     al, 5Ch ; '\'
.text:0041A299                 jnz     loc_41A09B
.text:0041A29F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A2A3                 jnz     loc_41A09B
.text:0041A2A9                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A2AC                 inc     edx
.text:0041A2AD                 jmp     loc_41A09D
.text:0041A2B2 ; ---------------------------------------------------------------------------
.text:0041A2B2
.text:0041A2B2 loc_41A2B2:                             ; CODE XREF: .text:0041A295↑j
.text:0041A2B2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A2B6                 jnz     short loc_41A297
.text:0041A2B8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A2BC                 jnz     short loc_41A297
.text:0041A2BE                 mov     byte ptr [ecx], 9
.text:0041A2C1
.text:0041A2C1 loc_41A2C1:                             ; CODE XREF: .text:0041A2D9↓j
.text:0041A2C1                 inc     ecx
.text:0041A2C2                 add     edx, 3
.text:0041A2C5                 jmp     loc_41A09E
.text:0041A2CA ; ---------------------------------------------------------------------------
.text:0041A2CA
.text:0041A2CA loc_41A2CA:                             ; CODE XREF: .text:0041A287↑j
.text:0041A2CA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A2CE                 jnz     short loc_41A289
.text:0041A2D0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A2D4                 jnz     short loc_41A289
.text:0041A2D6                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A2D9                 jmp     short loc_41A2C1
.text:0041A2DB ; ---------------------------------------------------------------------------
.text:0041A2DB
.text:0041A2DB loc_41A2DB:                             ; CODE XREF: .text:0041A060↑j
.text:0041A2DB                 mov     dword ptr [esp+4], 419F1Ah
.text:0041A2E3                 mov     [esp], eax
.text:0041A2E6                 call    strspn
.text:0041A2EB                 add     [esp+1Ch], eax
.text:0041A2EF                 jmp     loc_41A066
.text:0041A2F4 ; ---------------------------------------------------------------------------
.text:0041A2F4
.text:0041A2F4 loc_41A2F4:                             ; CODE XREF: .text:0041A045↑j
.text:0041A2F4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A2F8                 jz      short loc_41A33B
.text:0041A2FA
.text:0041A2FA loc_41A2FA:                             ; CODE XREF: .text:0041A33F↓j
.text:0041A2FA                                         ; .text:0041A345↓j
.text:0041A2FA                 cmp     al, 5Ch ; '\'
.text:0041A2FC                 jnz     loc_41A04B
.text:0041A302                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0041A306                 jz      short loc_41A323
.text:0041A308
.text:0041A308 loc_41A308:                             ; CODE XREF: .text:0041A327↓j
.text:0041A308                                         ; .text:0041A32D↓j
.text:0041A308                 cmp     al, 5Ch ; '\'
.text:0041A30A                 jnz     loc_41A04B
.text:0041A310                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0041A314                 jnz     loc_41A04B
.text:0041A31A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041A31D                 inc     edx
.text:0041A31E                 jmp     loc_41A04D
.text:0041A323 ; ---------------------------------------------------------------------------
.text:0041A323
.text:0041A323 loc_41A323:                             ; CODE XREF: .text:0041A306↑j
.text:0041A323                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0041A327                 jnz     short loc_41A308
.text:0041A329                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041A32D                 jnz     short loc_41A308
.text:0041A32F                 mov     byte ptr [ecx], 9
.text:0041A332
.text:0041A332 loc_41A332:                             ; CODE XREF: .text:0041A34A↓j
.text:0041A332                 inc     ecx
.text:0041A333                 add     edx, 3
.text:0041A336                 jmp     loc_41A04E
.text:0041A33B ; ---------------------------------------------------------------------------
.text:0041A33B
.text:0041A33B loc_41A33B:                             ; CODE XREF: .text:0041A2F8↑j
.text:0041A33B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041A33F                 jnz     short loc_41A2FA
.text:0041A341                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0041A345                 jnz     short loc_41A2FA
.text:0041A347                 mov     byte ptr [ecx], 20h ; ' '
.text:0041A34A                 jmp     short loc_41A332
.text:0041A34A ; ---------------------------------------------------------------------------
.text:0041A34C                 align 10h
.text:0041A350
.text:0041A350 loc_41A350:                             ; CODE XREF: .text:00419F62↑j
.text:0041A350                 mov     dword ptr [esp+4], 0
.text:0041A358                 mov     dword ptr [esp], 0
.text:0041A35F                 call    GetLogicalDriveStringsA
.text:0041A364                 sub     esp, 8
.text:0041A367                 mov     ebx, eax
.text:0041A369                 call    GetProcessHeap
.text:0041A36E                 mov     [esp], eax
.text:0041A371                 mov     [esp+8], ebx
.text:0041A375                 mov     dword ptr [esp+4], 0
.text:0041A37D                 call    HeapAlloc
.text:0041A382                 sub     esp, 0Ch
.text:0041A385                 mov     esi, eax
.text:0041A387                 mov     [esp+4], eax
.text:0041A38B                 mov     [esp], ebx
.text:0041A38E                 call    GetLogicalDriveStringsA
.text:0041A393                 mov     off_41F0B4, esi ; "notset"
.text:0041A399                 sub     esp, 8
.text:0041A39C                 jmp     loc_419F68
.text:0041A39C ; ---------------------------------------------------------------------------
.text:0041A3A1 ; const char aSSSSDD[]
.text:0041A3A1 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0041A3A1                                         ; DATA XREF: .text:0041A4E0↓o
.text:0041A3A1                                         ; ___addmntentstr+F0↓o
.text:0041A3B4                 align 10h
.text:0041A3C0                 push    esi
.text:0041A3C1                 push    ebx
.text:0041A3C2                 sub     esp, 44h
.text:0041A3C5                 mov     ebx, [esp+54h]
.text:0041A3C9                 mov     esi, [esp+50h]
.text:0041A3CD                 mov     edx, [ebx]
.text:0041A3CF                 mov     [esp+20h], edx
.text:0041A3D3                 mov     ecx, [ebx+4]
.text:0041A3D6                 mov     [esp+24h], ecx
.text:0041A3DA                 mov     edx, [ebx+8]
.text:0041A3DD                 mov     [esp+28h], edx
.text:0041A3E1                 mov     ecx, [ebx+0Ch]
.text:0041A3E4                 mov     [esp+2Ch], ecx
.text:0041A3E8                 mov     edx, [ebx+10h]
.text:0041A3EB                 mov     [esp+30h], edx
.text:0041A3EF                 mov     ecx, [ebx+14h]
.text:0041A3F2                 mov     dword ptr [esp+8], 2
.text:0041A3FA                 mov     dword ptr [esp+4], 0
.text:0041A402                 mov     [esp+34h], ecx
.text:0041A406                 mov     [esp], esi
.text:0041A409                 call    sub_41B610
.text:0041A40E ; ---------------------------------------------------------------------------
.text:0041A40E                 test    eax, eax
.text:0041A410                 mov     edx, 1
.text:0041A415                 jnz     loc_41A515
.text:0041A41B                 mov     ebx, [esp+20h]
.text:0041A41F                 mov     edx, ebx
.text:0041A421                 movzx   eax, byte ptr [ebx]
.text:0041A424                 test    al, al
.text:0041A426                 jz      short loc_41A450
.text:0041A428                 nop
.text:0041A429                 lea     esi, [esi+0]
.text:0041A430
.text:0041A430 loc_41A430:                             ; CODE XREF: .text:0041A44E↓j
.text:0041A430                 cmp     al, 20h ; ' '
.text:0041A432                 jz      loc_41A68A
.text:0041A438                 cmp     al, 9
.text:0041A43A                 jz      loc_41A68A
.text:0041A440                 cmp     al, 5Ch ; '\'
.text:0041A442                 jz      loc_41A68A
.text:0041A448                 inc     ebx
.text:0041A449                 movzx   eax, byte ptr [ebx]
.text:0041A44C                 test    al, al
.text:0041A44E                 jnz     short loc_41A430
.text:0041A450
.text:0041A450 loc_41A450:                             ; CODE XREF: .text:0041A426↑j
.text:0041A450                                         ; .text:0041A68C↓j ...
.text:0041A450                 mov     ebx, [esp+24h]
.text:0041A454                 mov     edx, ebx
.text:0041A456                 movzx   eax, byte ptr [ebx]
.text:0041A459                 test    al, al
.text:0041A45B                 jz      short loc_41A480
.text:0041A45D                 lea     esi, [esi+0]
.text:0041A460
.text:0041A460 loc_41A460:                             ; CODE XREF: .text:0041A47E↓j
.text:0041A460                 cmp     al, 20h ; ' '
.text:0041A462                 jz      loc_41A60A
.text:0041A468                 cmp     al, 9
.text:0041A46A                 jz      loc_41A60A
.text:0041A470                 cmp     al, 5Ch ; '\'
.text:0041A472                 jz      loc_41A60A
.text:0041A478                 inc     ebx
.text:0041A479                 movzx   eax, byte ptr [ebx]
.text:0041A47C                 test    al, al
.text:0041A47E                 jnz     short loc_41A460
.text:0041A480
.text:0041A480 loc_41A480:                             ; CODE XREF: .text:0041A45B↑j
.text:0041A480                                         ; .text:0041A60C↓j ...
.text:0041A480                 mov     ebx, [esp+28h]
.text:0041A484                 mov     edx, ebx
.text:0041A486                 movzx   eax, byte ptr [ebx]
.text:0041A489                 test    al, al
.text:0041A48B                 jz      short loc_41A4B0
.text:0041A48D                 lea     esi, [esi+0]
.text:0041A490
.text:0041A490 loc_41A490:                             ; CODE XREF: .text:0041A4AE↓j
.text:0041A490                 cmp     al, 20h ; ' '
.text:0041A492                 jz      loc_41A58E
.text:0041A498                 cmp     al, 9
.text:0041A49A                 jz      loc_41A58E
.text:0041A4A0                 cmp     al, 5Ch ; '\'
.text:0041A4A2                 jz      loc_41A58E
.text:0041A4A8                 inc     ebx
.text:0041A4A9                 movzx   eax, byte ptr [ebx]
.text:0041A4AC                 test    al, al
.text:0041A4AE                 jnz     short loc_41A490
.text:0041A4B0
.text:0041A4B0 loc_41A4B0:                             ; CODE XREF: .text:0041A48B↑j
.text:0041A4B0                                         ; .text:0041A590↓j ...
.text:0041A4B0                 mov     edx, [esp+2Ch]
.text:0041A4B4                 mov     ebx, edx
.text:0041A4B6                 movzx   eax, byte ptr [edx]
.text:0041A4B9                 test    al, al
.text:0041A4BB                 jz      short loc_41A4D4
.text:0041A4BD                 lea     esi, [esi+0]
.text:0041A4C0
.text:0041A4C0 loc_41A4C0:                             ; CODE XREF: .text:0041A4D2↓j
.text:0041A4C0                 cmp     al, 20h ; ' '
.text:0041A4C2                 jz      short loc_41A51D
.text:0041A4C4                 cmp     al, 9
.text:0041A4C6                 jz      short loc_41A51D
.text:0041A4C8                 cmp     al, 5Ch ; '\'
.text:0041A4CA                 jz      short loc_41A51D
.text:0041A4CC                 inc     ebx
.text:0041A4CD                 movzx   eax, byte ptr [ebx]
.text:0041A4D0                 test    al, al
.text:0041A4D2                 jnz     short loc_41A4C0
.text:0041A4D4
.text:0041A4D4 loc_41A4D4:                             ; CODE XREF: .text:0041A4BB↑j
.text:0041A4D4                                         ; .text:0041A51F↓j ...
.text:0041A4D4                 mov     [esp+14h], edx
.text:0041A4D8                 mov     ecx, [esp+34h]
.text:0041A4DC                 mov     ebx, [esp+30h]
.text:0041A4E0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041A4E8                 mov     edx, [esp+24h]
.text:0041A4EC                 mov     [esp+1Ch], ecx
.text:0041A4F0                 mov     ecx, [esp+28h]
.text:0041A4F4                 mov     [esp+18h], ebx
.text:0041A4F8                 mov     ebx, [esp+20h]
.text:0041A4FC                 mov     [esp+0Ch], edx
.text:0041A500                 mov     [esp+10h], ecx
.text:0041A504                 mov     [esp+8], ebx
.text:0041A508                 mov     [esp], esi
.text:0041A50B                 call    fprintf
.text:0041A510                 mov     edx, eax
.text:0041A512                 shr     edx, 1Fh
.text:0041A515
.text:0041A515 loc_41A515:                             ; CODE XREF: .text:0041A415↑j
.text:0041A515                 add     esp, 44h
.text:0041A518                 mov     eax, edx
.text:0041A51A                 pop     ebx
.text:0041A51B                 pop     esi
.text:0041A51C                 retn
.text:0041A51D ; ---------------------------------------------------------------------------
.text:0041A51D
.text:0041A51D loc_41A51D:                             ; CODE XREF: .text:0041A4C2↑j
.text:0041A51D                                         ; .text:0041A4C6↑j ...
.text:0041A51D                 test    al, al
.text:0041A51F                 jz      short loc_41A4D4
.text:0041A521                 mov     [esp], edx
.text:0041A524                 mov     ebx, edx
.text:0041A526                 call    strlen
.text:0041A52B                 lea     edx, ds:1[eax*4]
.text:0041A532                 mov     [esp], edx
.text:0041A535                 call    malloc
.text:0041A53A                 mov     [esp+2Ch], eax
.text:0041A53E                 mov     edx, eax
.text:0041A540
.text:0041A540 loc_41A540:                             ; CODE XREF: .text:0041A558↓j
.text:0041A540                 movzx   eax, byte ptr [ebx]
.text:0041A543                 cmp     al, 20h ; ' '
.text:0041A545                 jz      short loc_41A57D
.text:0041A547                 cmp     al, 9
.text:0041A549                 jz      short loc_41A56C
.text:0041A54B                 cmp     al, 5Ch ; '\'
.text:0041A54D                 jz      short loc_41A563
.text:0041A54F                 mov     [edx], al
.text:0041A551
.text:0041A551 loc_41A551:                             ; CODE XREF: .text:0041A56A↓j
.text:0041A551                                         ; .text:0041A57B↓j ...
.text:0041A551                 movzx   ecx, byte ptr [ebx]
.text:0041A554                 inc     edx
.text:0041A555                 inc     ebx
.text:0041A556                 test    cl, cl
.text:0041A558                 jnz     short loc_41A540
.text:0041A55A                 mov     edx, [esp+2Ch]
.text:0041A55E                 jmp     loc_41A4D4
.text:0041A563 ; ---------------------------------------------------------------------------
.text:0041A563
.text:0041A563 loc_41A563:                             ; CODE XREF: .text:0041A54D↑j
.text:0041A563                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A566                 inc     edx
.text:0041A567                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A56A                 jmp     short loc_41A551
.text:0041A56C ; ---------------------------------------------------------------------------
.text:0041A56C
.text:0041A56C loc_41A56C:                             ; CODE XREF: .text:0041A549↑j
.text:0041A56C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A56F                 inc     edx
.text:0041A570                 mov     byte ptr [edx], 30h ; '0'
.text:0041A573                 inc     edx
.text:0041A574                 mov     byte ptr [edx], 31h ; '1'
.text:0041A577                 inc     edx
.text:0041A578                 mov     byte ptr [edx], 32h ; '2'
.text:0041A57B                 jmp     short loc_41A551
.text:0041A57D ; ---------------------------------------------------------------------------
.text:0041A57D
.text:0041A57D loc_41A57D:                             ; CODE XREF: .text:0041A545↑j
.text:0041A57D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A580                 inc     edx
.text:0041A581                 mov     byte ptr [edx], 30h ; '0'
.text:0041A584                 inc     edx
.text:0041A585                 mov     byte ptr [edx], 34h ; '4'
.text:0041A588                 inc     edx
.text:0041A589                 mov     byte ptr [edx], 30h ; '0'
.text:0041A58C                 jmp     short loc_41A551
.text:0041A58E ; ---------------------------------------------------------------------------
.text:0041A58E
.text:0041A58E loc_41A58E:                             ; CODE XREF: .text:0041A492↑j
.text:0041A58E                                         ; .text:0041A49A↑j ...
.text:0041A58E                 test    al, al
.text:0041A590                 jz      loc_41A4B0
.text:0041A596                 mov     [esp], edx
.text:0041A599                 mov     ebx, edx
.text:0041A59B                 call    strlen
.text:0041A5A0                 lea     edx, ds:1[eax*4]
.text:0041A5A7                 mov     [esp], edx
.text:0041A5AA                 call    malloc
.text:0041A5AF                 mov     [esp+28h], eax
.text:0041A5B3                 mov     edx, eax
.text:0041A5B5                 lea     esi, [esi+0]
.text:0041A5B9                 lea     edi, [edi+0]
.text:0041A5C0
.text:0041A5C0 loc_41A5C0:                             ; CODE XREF: .text:0041A5D8↓j
.text:0041A5C0                 movzx   eax, byte ptr [ebx]
.text:0041A5C3                 cmp     al, 20h ; ' '
.text:0041A5C5                 jz      short loc_41A5F9
.text:0041A5C7                 cmp     al, 9
.text:0041A5C9                 jz      short loc_41A5E8
.text:0041A5CB                 cmp     al, 5Ch ; '\'
.text:0041A5CD                 jz      short loc_41A5DF
.text:0041A5CF                 mov     [edx], al
.text:0041A5D1
.text:0041A5D1 loc_41A5D1:                             ; CODE XREF: .text:0041A5E6↓j
.text:0041A5D1                                         ; .text:0041A5F7↓j ...
.text:0041A5D1                 movzx   ecx, byte ptr [ebx]
.text:0041A5D4                 inc     edx
.text:0041A5D5                 inc     ebx
.text:0041A5D6                 test    cl, cl
.text:0041A5D8                 jnz     short loc_41A5C0
.text:0041A5DA                 jmp     loc_41A4B0
.text:0041A5DF ; ---------------------------------------------------------------------------
.text:0041A5DF
.text:0041A5DF loc_41A5DF:                             ; CODE XREF: .text:0041A5CD↑j
.text:0041A5DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5E2                 inc     edx
.text:0041A5E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5E6                 jmp     short loc_41A5D1
.text:0041A5E8 ; ---------------------------------------------------------------------------
.text:0041A5E8
.text:0041A5E8 loc_41A5E8:                             ; CODE XREF: .text:0041A5C9↑j
.text:0041A5E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5EB                 inc     edx
.text:0041A5EC                 mov     byte ptr [edx], 30h ; '0'
.text:0041A5EF                 inc     edx
.text:0041A5F0                 mov     byte ptr [edx], 31h ; '1'
.text:0041A5F3                 inc     edx
.text:0041A5F4                 mov     byte ptr [edx], 32h ; '2'
.text:0041A5F7                 jmp     short loc_41A5D1
.text:0041A5F9 ; ---------------------------------------------------------------------------
.text:0041A5F9
.text:0041A5F9 loc_41A5F9:                             ; CODE XREF: .text:0041A5C5↑j
.text:0041A5F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A5FC                 inc     edx
.text:0041A5FD                 mov     byte ptr [edx], 30h ; '0'
.text:0041A600                 inc     edx
.text:0041A601                 mov     byte ptr [edx], 34h ; '4'
.text:0041A604                 inc     edx
.text:0041A605                 mov     byte ptr [edx], 30h ; '0'
.text:0041A608                 jmp     short loc_41A5D1
.text:0041A60A ; ---------------------------------------------------------------------------
.text:0041A60A
.text:0041A60A loc_41A60A:                             ; CODE XREF: .text:0041A462↑j
.text:0041A60A                                         ; .text:0041A46A↑j ...
.text:0041A60A                 test    al, al
.text:0041A60C                 jz      loc_41A480
.text:0041A612                 mov     [esp], edx
.text:0041A615                 mov     ebx, edx
.text:0041A617                 call    strlen
.text:0041A61C                 lea     edx, ds:1[eax*4]
.text:0041A623                 mov     [esp], edx
.text:0041A626                 call    malloc
.text:0041A62B                 mov     [esp+24h], eax
.text:0041A62F                 mov     edx, eax
.text:0041A631                 jmp     short loc_41A640
.text:0041A631 ; ---------------------------------------------------------------------------
.text:0041A633                 align 10h
.text:0041A640
.text:0041A640 loc_41A640:                             ; CODE XREF: .text:0041A631↑j
.text:0041A640                                         ; .text:0041A658↓j
.text:0041A640                 movzx   eax, byte ptr [ebx]
.text:0041A643                 cmp     al, 20h ; ' '
.text:0041A645                 jz      short loc_41A679
.text:0041A647                 cmp     al, 9
.text:0041A649                 jz      short loc_41A668
.text:0041A64B                 cmp     al, 5Ch ; '\'
.text:0041A64D                 jz      short loc_41A65F
.text:0041A64F                 mov     [edx], al
.text:0041A651
.text:0041A651 loc_41A651:                             ; CODE XREF: .text:0041A666↓j
.text:0041A651                                         ; .text:0041A677↓j ...
.text:0041A651                 movzx   ecx, byte ptr [ebx]
.text:0041A654                 inc     edx
.text:0041A655                 inc     ebx
.text:0041A656                 test    cl, cl
.text:0041A658                 jnz     short loc_41A640
.text:0041A65A                 jmp     loc_41A480
.text:0041A65F ; ---------------------------------------------------------------------------
.text:0041A65F
.text:0041A65F loc_41A65F:                             ; CODE XREF: .text:0041A64D↑j
.text:0041A65F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A662                 inc     edx
.text:0041A663                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A666                 jmp     short loc_41A651
.text:0041A668 ; ---------------------------------------------------------------------------
.text:0041A668
.text:0041A668 loc_41A668:                             ; CODE XREF: .text:0041A649↑j
.text:0041A668                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A66B                 inc     edx
.text:0041A66C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A66F                 inc     edx
.text:0041A670                 mov     byte ptr [edx], 31h ; '1'
.text:0041A673                 inc     edx
.text:0041A674                 mov     byte ptr [edx], 32h ; '2'
.text:0041A677                 jmp     short loc_41A651
.text:0041A679 ; ---------------------------------------------------------------------------
.text:0041A679
.text:0041A679 loc_41A679:                             ; CODE XREF: .text:0041A645↑j
.text:0041A679                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A67C                 inc     edx
.text:0041A67D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A680                 inc     edx
.text:0041A681                 mov     byte ptr [edx], 34h ; '4'
.text:0041A684                 inc     edx
.text:0041A685                 mov     byte ptr [edx], 30h ; '0'
.text:0041A688                 jmp     short loc_41A651
.text:0041A68A ; ---------------------------------------------------------------------------
.text:0041A68A
.text:0041A68A loc_41A68A:                             ; CODE XREF: .text:0041A432↑j
.text:0041A68A                                         ; .text:0041A43A↑j ...
.text:0041A68A                 test    al, al
.text:0041A68C                 jz      loc_41A450
.text:0041A692                 mov     [esp], edx
.text:0041A695                 mov     ebx, edx
.text:0041A697                 call    strlen
.text:0041A69C                 lea     ecx, ds:1[eax*4]
.text:0041A6A3                 mov     [esp], ecx
.text:0041A6A6                 call    malloc
.text:0041A6AB                 mov     [esp+20h], eax
.text:0041A6AF                 mov     edx, eax
.text:0041A6B1                 jmp     short loc_41A6C0
.text:0041A6B1 ; ---------------------------------------------------------------------------
.text:0041A6B3                 align 10h
.text:0041A6C0
.text:0041A6C0 loc_41A6C0:                             ; CODE XREF: .text:0041A6B1↑j
.text:0041A6C0                                         ; .text:0041A6D8↓j
.text:0041A6C0                 movzx   eax, byte ptr [ebx]
.text:0041A6C3                 cmp     al, 20h ; ' '
.text:0041A6C5                 jz      short loc_41A6F9
.text:0041A6C7                 cmp     al, 9
.text:0041A6C9                 jz      short loc_41A6E8
.text:0041A6CB                 cmp     al, 5Ch ; '\'
.text:0041A6CD                 jz      short loc_41A6DF
.text:0041A6CF                 mov     [edx], al
.text:0041A6D1
.text:0041A6D1 loc_41A6D1:                             ; CODE XREF: .text:0041A6E6↓j
.text:0041A6D1                                         ; .text:0041A6F7↓j ...
.text:0041A6D1                 movzx   ecx, byte ptr [ebx]
.text:0041A6D4                 inc     edx
.text:0041A6D5                 inc     ebx
.text:0041A6D6                 test    cl, cl
.text:0041A6D8                 jnz     short loc_41A6C0
.text:0041A6DA                 jmp     loc_41A450
.text:0041A6DF ; ---------------------------------------------------------------------------
.text:0041A6DF
.text:0041A6DF loc_41A6DF:                             ; CODE XREF: .text:0041A6CD↑j
.text:0041A6DF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6E2                 inc     edx
.text:0041A6E3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6E6                 jmp     short loc_41A6D1
.text:0041A6E8 ; ---------------------------------------------------------------------------
.text:0041A6E8
.text:0041A6E8 loc_41A6E8:                             ; CODE XREF: .text:0041A6C9↑j
.text:0041A6E8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6EB                 inc     edx
.text:0041A6EC                 mov     byte ptr [edx], 30h ; '0'
.text:0041A6EF                 inc     edx
.text:0041A6F0                 mov     byte ptr [edx], 31h ; '1'
.text:0041A6F3                 inc     edx
.text:0041A6F4                 mov     byte ptr [edx], 32h ; '2'
.text:0041A6F7                 jmp     short loc_41A6D1
.text:0041A6F9 ; ---------------------------------------------------------------------------
.text:0041A6F9
.text:0041A6F9 loc_41A6F9:                             ; CODE XREF: .text:0041A6C5↑j
.text:0041A6F9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A6FC                 inc     edx
.text:0041A6FD                 mov     byte ptr [edx], 30h ; '0'
.text:0041A700                 inc     edx
.text:0041A701                 mov     byte ptr [edx], 34h ; '4'
.text:0041A704                 inc     edx
.text:0041A705                 mov     byte ptr [edx], 30h ; '0'
.text:0041A708                 jmp     short loc_41A6D1
.text:0041A708 ; ---------------------------------------------------------------------------
.text:0041A70A                 align 10h
.text:0041A710
.text:0041A710 ; =============== S U B R O U T I N E =======================================
.text:0041A710
.text:0041A710 ; Attributes: info_from_lumina
.text:0041A710
.text:0041A710 ; int __cdecl __addmntentstr(char *, int)
.text:0041A710 ___addmntentstr proc near               ; CODE XREF: .text:00419FDA↑p
.text:0041A710
.text:0041A710 Buffer          = dword ptr -4Ch
.text:0041A710 Format          = dword ptr -48h
.text:0041A710 var_44          = dword ptr -44h
.text:0041A710 var_40          = dword ptr -40h
.text:0041A710 var_3C          = dword ptr -3Ch
.text:0041A710 var_38          = dword ptr -38h
.text:0041A710 var_34          = dword ptr -34h
.text:0041A710 var_30          = dword ptr -30h
.text:0041A710 var_2C          = dword ptr -2Ch
.text:0041A710 var_28          = dword ptr -28h
.text:0041A710 var_24          = dword ptr -24h
.text:0041A710 Str             = dword ptr -20h
.text:0041A710 var_1C          = dword ptr -1Ch
.text:0041A710 var_18          = dword ptr -18h
.text:0041A710 arg_0           = dword ptr  4
.text:0041A710 arg_4           = dword ptr  8
.text:0041A710
.text:0041A710                 push    ebx
.text:0041A711                 sub     esp, 48h
.text:0041A714                 mov     edx, [esp+4Ch+arg_4]
.text:0041A718                 mov     ecx, [edx]
.text:0041A71A                 mov     [esp+4Ch+var_2C], ecx
.text:0041A71E                 mov     ebx, [edx+4]
.text:0041A721                 mov     [esp+4Ch+var_28], ebx
.text:0041A725                 mov     ebx, [edx+8]
.text:0041A728                 mov     [esp+4Ch+var_24], ebx
.text:0041A72C                 mov     ebx, [edx+0Ch]
.text:0041A72F                 mov     [esp+4Ch+Str], ebx
.text:0041A733                 mov     ebx, [edx+10h]
.text:0041A736                 mov     [esp+4Ch+var_1C], ebx
.text:0041A73A                 mov     ebx, [edx+14h]
.text:0041A73D                 mov     [esp+4Ch+var_18], ebx
.text:0041A741                 mov     ebx, ecx
.text:0041A743                 movzx   eax, byte ptr [ecx]
.text:0041A746                 test    al, al
.text:0041A748                 jz      loc_41AA31
.text:0041A74E                 mov     esi, esi
.text:0041A750
.text:0041A750 loc_41A750:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0041A750                 cmp     al, 20h ; ' '
.text:0041A752                 jz      loc_41A9B0
.text:0041A758                 cmp     al, 9
.text:0041A75A                 jz      loc_41A9B0
.text:0041A760                 cmp     al, 5Ch ; '\'
.text:0041A762                 jz      loc_41A9B0
.text:0041A768                 inc     ebx
.text:0041A769                 movzx   eax, byte ptr [ebx]
.text:0041A76C                 test    al, al
.text:0041A76E                 jnz     short loc_41A750
.text:0041A770
.text:0041A770 loc_41A770:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0041A770                                         ; ___addmntentstr+2EA↓j
.text:0041A770                 mov     ebx, [esp+4Ch+var_28]
.text:0041A774                 mov     edx, ebx
.text:0041A776                 movzx   eax, byte ptr [ebx]
.text:0041A779                 test    al, al
.text:0041A77B                 jz      short loc_41A7A0
.text:0041A77D                 lea     esi, [esi+0]
.text:0041A780
.text:0041A780 loc_41A780:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0041A780                 cmp     al, 20h ; ' '
.text:0041A782                 jz      loc_41A92A
.text:0041A788                 cmp     al, 9
.text:0041A78A                 jz      loc_41A92A
.text:0041A790                 cmp     al, 5Ch ; '\'
.text:0041A792                 jz      loc_41A92A
.text:0041A798                 inc     ebx
.text:0041A799                 movzx   eax, byte ptr [ebx]
.text:0041A79C                 test    al, al
.text:0041A79E                 jnz     short loc_41A780
.text:0041A7A0
.text:0041A7A0 loc_41A7A0:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0041A7A0                                         ; ___addmntentstr+21C↓j ...
.text:0041A7A0                 mov     ebx, [esp+4Ch+var_24]
.text:0041A7A4                 mov     edx, ebx
.text:0041A7A6                 movzx   eax, byte ptr [ebx]
.text:0041A7A9                 test    al, al
.text:0041A7AB                 jz      short loc_41A7D0
.text:0041A7AD                 lea     esi, [esi+0]
.text:0041A7B0
.text:0041A7B0 loc_41A7B0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0041A7B0                 cmp     al, 20h ; ' '
.text:0041A7B2                 jz      loc_41A8AE
.text:0041A7B8                 cmp     al, 9
.text:0041A7BA                 jz      loc_41A8AE
.text:0041A7C0                 cmp     al, 5Ch ; '\'
.text:0041A7C2                 jz      loc_41A8AE
.text:0041A7C8                 inc     ebx
.text:0041A7C9                 movzx   eax, byte ptr [ebx]
.text:0041A7CC                 test    al, al
.text:0041A7CE                 jnz     short loc_41A7B0
.text:0041A7D0
.text:0041A7D0 loc_41A7D0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0041A7D0                                         ; ___addmntentstr+1A0↓j ...
.text:0041A7D0                 mov     edx, [esp+4Ch+Str]
.text:0041A7D4                 mov     ebx, edx
.text:0041A7D6                 movzx   eax, byte ptr [edx]
.text:0041A7D9                 test    al, al
.text:0041A7DB                 jz      short loc_41A7F4
.text:0041A7DD                 lea     esi, [esi+0]
.text:0041A7E0
.text:0041A7E0 loc_41A7E0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0041A7E0                 cmp     al, 20h ; ' '
.text:0041A7E2                 jz      short loc_41A83C
.text:0041A7E4                 cmp     al, 9
.text:0041A7E6                 jz      short loc_41A83C
.text:0041A7E8                 cmp     al, 5Ch ; '\'
.text:0041A7EA                 jz      short loc_41A83C
.text:0041A7EC                 inc     ebx
.text:0041A7ED                 movzx   eax, byte ptr [ebx]
.text:0041A7F0                 test    al, al
.text:0041A7F2                 jnz     short loc_41A7E0
.text:0041A7F4
.text:0041A7F4 loc_41A7F4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0041A7F4                                         ; ___addmntentstr+12E↓j ...
.text:0041A7F4                 mov     [esp+4Ch+var_38], edx
.text:0041A7F8                 mov     ebx, [esp+4Ch+var_18]
.text:0041A7FC                 mov     ecx, [esp+4Ch+var_1C]
.text:0041A800                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0041A808                 mov     edx, [esp+4Ch+var_2C]
.text:0041A80C                 mov     [esp+4Ch+var_30], ebx
.text:0041A810                 mov     ebx, [esp+4Ch+var_24]
.text:0041A814                 mov     [esp+4Ch+var_34], ecx
.text:0041A818                 mov     ecx, [esp+4Ch+var_28]
.text:0041A81C                 mov     [esp+4Ch+var_3C], ebx
.text:0041A820                 mov     ebx, [esp+4Ch+arg_0]
.text:0041A824                 mov     [esp+4Ch+var_40], ecx
.text:0041A828                 mov     [esp+4Ch+var_44], edx
.text:0041A82C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0041A82F                 call    sprintf
.text:0041A834                 add     esp, 48h
.text:0041A837                 shr     eax, 1Fh
.text:0041A83A                 pop     ebx
.text:0041A83B                 retn
.text:0041A83C ; ---------------------------------------------------------------------------
.text:0041A83C
.text:0041A83C loc_41A83C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0041A83C                                         ; ___addmntentstr+D6↑j ...
.text:0041A83C                 test    al, al
.text:0041A83E                 jz      short loc_41A7F4
.text:0041A840                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A843                 mov     ebx, edx
.text:0041A845                 call    strlen
.text:0041A84A                 lea     edx, ds:1[eax*4]
.text:0041A851                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A854                 call    malloc
.text:0041A859                 mov     [esp+4Ch+Str], eax
.text:0041A85D                 mov     edx, eax
.text:0041A85F                 nop
.text:0041A860
.text:0041A860 loc_41A860:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0041A860                 movzx   eax, byte ptr [ebx]
.text:0041A863                 cmp     al, 20h ; ' '
.text:0041A865                 jz      short loc_41A89D
.text:0041A867                 cmp     al, 9
.text:0041A869                 jz      short loc_41A88C
.text:0041A86B                 cmp     al, 5Ch ; '\'
.text:0041A86D                 jz      short loc_41A883
.text:0041A86F                 mov     [edx], al
.text:0041A871
.text:0041A871 loc_41A871:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0041A871                                         ; ___addmntentstr+18B↓j ...
.text:0041A871                 movzx   ecx, byte ptr [ebx]
.text:0041A874                 inc     edx
.text:0041A875                 inc     ebx
.text:0041A876                 test    cl, cl
.text:0041A878                 jnz     short loc_41A860
.text:0041A87A                 mov     edx, [esp+4Ch+Str]
.text:0041A87E                 jmp     loc_41A7F4
.text:0041A883 ; ---------------------------------------------------------------------------
.text:0041A883
.text:0041A883 loc_41A883:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0041A883                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A886                 inc     edx
.text:0041A887                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A88A                 jmp     short loc_41A871
.text:0041A88C ; ---------------------------------------------------------------------------
.text:0041A88C
.text:0041A88C loc_41A88C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0041A88C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A88F                 inc     edx
.text:0041A890                 mov     byte ptr [edx], 30h ; '0'
.text:0041A893                 inc     edx
.text:0041A894                 mov     byte ptr [edx], 31h ; '1'
.text:0041A897                 inc     edx
.text:0041A898                 mov     byte ptr [edx], 32h ; '2'
.text:0041A89B                 jmp     short loc_41A871
.text:0041A89D ; ---------------------------------------------------------------------------
.text:0041A89D
.text:0041A89D loc_41A89D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0041A89D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A8A0                 inc     edx
.text:0041A8A1                 mov     byte ptr [edx], 30h ; '0'
.text:0041A8A4                 inc     edx
.text:0041A8A5                 mov     byte ptr [edx], 34h ; '4'
.text:0041A8A8                 inc     edx
.text:0041A8A9                 mov     byte ptr [edx], 30h ; '0'
.text:0041A8AC                 jmp     short loc_41A871
.text:0041A8AE ; ---------------------------------------------------------------------------
.text:0041A8AE
.text:0041A8AE loc_41A8AE:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0041A8AE                                         ; ___addmntentstr+AA↑j ...
.text:0041A8AE                 test    al, al
.text:0041A8B0                 jz      loc_41A7D0
.text:0041A8B6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A8B9                 mov     ebx, edx
.text:0041A8BB                 call    strlen
.text:0041A8C0                 lea     edx, ds:1[eax*4]
.text:0041A8C7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A8CA                 call    malloc
.text:0041A8CF                 mov     [esp+4Ch+var_24], eax
.text:0041A8D3                 mov     edx, eax
.text:0041A8D5                 lea     esi, [esi+0]
.text:0041A8D9                 lea     edi, [edi+0]
.text:0041A8E0
.text:0041A8E0 loc_41A8E0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0041A8E0                 movzx   eax, byte ptr [ebx]
.text:0041A8E3                 cmp     al, 20h ; ' '
.text:0041A8E5                 jz      short loc_41A919
.text:0041A8E7                 cmp     al, 9
.text:0041A8E9                 jz      short loc_41A908
.text:0041A8EB                 cmp     al, 5Ch ; '\'
.text:0041A8ED                 jz      short loc_41A8FF
.text:0041A8EF                 mov     [edx], al
.text:0041A8F1
.text:0041A8F1 loc_41A8F1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0041A8F1                                         ; ___addmntentstr+207↓j ...
.text:0041A8F1                 movzx   ecx, byte ptr [ebx]
.text:0041A8F4                 inc     edx
.text:0041A8F5                 inc     ebx
.text:0041A8F6                 test    cl, cl
.text:0041A8F8                 jnz     short loc_41A8E0
.text:0041A8FA                 jmp     loc_41A7D0
.text:0041A8FF ; ---------------------------------------------------------------------------
.text:0041A8FF
.text:0041A8FF loc_41A8FF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0041A8FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A902                 inc     edx
.text:0041A903                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A906                 jmp     short loc_41A8F1
.text:0041A908 ; ---------------------------------------------------------------------------
.text:0041A908
.text:0041A908 loc_41A908:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0041A908                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A90B                 inc     edx
.text:0041A90C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A90F                 inc     edx
.text:0041A910                 mov     byte ptr [edx], 31h ; '1'
.text:0041A913                 inc     edx
.text:0041A914                 mov     byte ptr [edx], 32h ; '2'
.text:0041A917                 jmp     short loc_41A8F1
.text:0041A919 ; ---------------------------------------------------------------------------
.text:0041A919
.text:0041A919 loc_41A919:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0041A919                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A91C                 inc     edx
.text:0041A91D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A920                 inc     edx
.text:0041A921                 mov     byte ptr [edx], 34h ; '4'
.text:0041A924                 inc     edx
.text:0041A925                 mov     byte ptr [edx], 30h ; '0'
.text:0041A928                 jmp     short loc_41A8F1
.text:0041A92A ; ---------------------------------------------------------------------------
.text:0041A92A
.text:0041A92A loc_41A92A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0041A92A                                         ; ___addmntentstr+7A↑j ...
.text:0041A92A                 test    al, al
.text:0041A92C                 jz      loc_41A7A0
.text:0041A932                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0041A935                 mov     ebx, edx
.text:0041A937                 call    strlen
.text:0041A93C                 lea     edx, ds:1[eax*4]
.text:0041A943                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A946                 call    malloc
.text:0041A94B                 mov     [esp+4Ch+var_28], eax
.text:0041A94F                 mov     edx, eax
.text:0041A951                 jmp     short loc_41A960
.text:0041A951 ; ---------------------------------------------------------------------------
.text:0041A953                 align 10h
.text:0041A960
.text:0041A960 loc_41A960:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0041A960                                         ; ___addmntentstr+268↓j
.text:0041A960                 movzx   eax, byte ptr [ebx]
.text:0041A963                 cmp     al, 20h ; ' '
.text:0041A965                 jz      short loc_41A999
.text:0041A967                 cmp     al, 9
.text:0041A969                 jz      short loc_41A988
.text:0041A96B                 cmp     al, 5Ch ; '\'
.text:0041A96D                 jz      short loc_41A97F
.text:0041A96F                 mov     [edx], al
.text:0041A971
.text:0041A971 loc_41A971:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0041A971                                         ; ___addmntentstr+287↓j ...
.text:0041A971                 movzx   ecx, byte ptr [ebx]
.text:0041A974                 inc     edx
.text:0041A975                 inc     ebx
.text:0041A976                 test    cl, cl
.text:0041A978                 jnz     short loc_41A960
.text:0041A97A                 jmp     loc_41A7A0
.text:0041A97F ; ---------------------------------------------------------------------------
.text:0041A97F
.text:0041A97F loc_41A97F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0041A97F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A982                 inc     edx
.text:0041A983                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A986                 jmp     short loc_41A971
.text:0041A988 ; ---------------------------------------------------------------------------
.text:0041A988
.text:0041A988 loc_41A988:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0041A988                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A98B                 inc     edx
.text:0041A98C                 mov     byte ptr [edx], 30h ; '0'
.text:0041A98F                 inc     edx
.text:0041A990                 mov     byte ptr [edx], 31h ; '1'
.text:0041A993                 inc     edx
.text:0041A994                 mov     byte ptr [edx], 32h ; '2'
.text:0041A997                 jmp     short loc_41A971
.text:0041A999 ; ---------------------------------------------------------------------------
.text:0041A999
.text:0041A999 loc_41A999:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0041A999                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041A99C                 inc     edx
.text:0041A99D                 mov     byte ptr [edx], 30h ; '0'
.text:0041A9A0                 inc     edx
.text:0041A9A1                 mov     byte ptr [edx], 34h ; '4'
.text:0041A9A4                 inc     edx
.text:0041A9A5                 mov     byte ptr [edx], 30h ; '0'
.text:0041A9A8                 jmp     short loc_41A971
.text:0041A9A8 ; ---------------------------------------------------------------------------
.text:0041A9AA                 align 10h
.text:0041A9B0
.text:0041A9B0 loc_41A9B0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0041A9B0                                         ; ___addmntentstr+4A↑j ...
.text:0041A9B0                 test    al, al
.text:0041A9B2                 jz      loc_41A770
.text:0041A9B8                 mov     ebx, [esp+4Ch+var_2C]
.text:0041A9BC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0041A9BF                 call    strlen
.text:0041A9C4                 lea     edx, ds:1[eax*4]
.text:0041A9CB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0041A9CE                 call    malloc
.text:0041A9D3                 mov     [esp+4Ch+var_2C], eax
.text:0041A9D7                 mov     edx, eax
.text:0041A9D9                 lea     esi, [esi+0]
.text:0041A9E0
.text:0041A9E0 loc_41A9E0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0041A9E0                 movzx   eax, byte ptr [ebx]
.text:0041A9E3                 cmp     al, 20h ; ' '
.text:0041A9E5                 jz      short loc_41AA20
.text:0041A9E7                 cmp     al, 9
.text:0041A9E9                 jz      short loc_41AA08
.text:0041A9EB                 cmp     al, 5Ch ; '\'
.text:0041A9ED                 jz      short loc_41A9FF
.text:0041A9EF                 mov     [edx], al
.text:0041A9F1
.text:0041A9F1 loc_41A9F1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0041A9F1                                         ; ___addmntentstr+307↓j ...
.text:0041A9F1                 movzx   ecx, byte ptr [ebx]
.text:0041A9F4                 inc     edx
.text:0041A9F5                 inc     ebx
.text:0041A9F6                 test    cl, cl
.text:0041A9F8                 jnz     short loc_41A9E0
.text:0041A9FA                 jmp     loc_41A770
.text:0041A9FF ; ---------------------------------------------------------------------------
.text:0041A9FF
.text:0041A9FF loc_41A9FF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0041A9FF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA02                 inc     edx
.text:0041AA03                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA06                 jmp     short loc_41A9F1
.text:0041AA08 ; ---------------------------------------------------------------------------
.text:0041AA08
.text:0041AA08 loc_41AA08:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0041AA08                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA0B                 inc     edx
.text:0041AA0C                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA0F                 inc     edx
.text:0041AA10                 mov     byte ptr [edx], 31h ; '1'
.text:0041AA13                 inc     edx
.text:0041AA14                 mov     byte ptr [edx], 32h ; '2'
.text:0041AA17                 jmp     short loc_41A9F1
.text:0041AA17 ; ---------------------------------------------------------------------------
.text:0041AA19                 align 10h
.text:0041AA20
.text:0041AA20 loc_41AA20:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0041AA20                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041AA23                 inc     edx
.text:0041AA24                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA27                 inc     edx
.text:0041AA28                 mov     byte ptr [edx], 34h ; '4'
.text:0041AA2B                 inc     edx
.text:0041AA2C                 mov     byte ptr [edx], 30h ; '0'
.text:0041AA2F                 jmp     short loc_41A9F1
.text:0041AA31 ; ---------------------------------------------------------------------------
.text:0041AA31
.text:0041AA31 loc_41AA31:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0041AA31                 movzx   eax, byte ptr [ecx]
.text:0041AA34                 jmp     loc_41A9B0
.text:0041AA34 ___addmntentstr endp
.text:0041AA34
.text:0041AA34 ; ---------------------------------------------------------------------------
.text:0041AA39                 align 10h
.text:0041AA40
.text:0041AA40 ; =============== S U B R O U T I N E =======================================
.text:0041AA40
.text:0041AA40
.text:0041AA40 sub_41AA40      proc near               ; CODE XREF: sub_417880+99↑p
.text:0041AA40
.text:0041AA40 nBufferLength   = dword ptr -1Ch
.text:0041AA40 lpBuffer        = dword ptr -18h
.text:0041AA40 dwBytes         = dword ptr -14h
.text:0041AA40 var_8           = dword ptr -8
.text:0041AA40 var_4           = dword ptr -4
.text:0041AA40
.text:0041AA40                 sub     esp, 1Ch
.text:0041AA43                 mov     [esp+1Ch+var_8], ebx
.text:0041AA47                 mov     [esp+1Ch+var_4], esi
.text:0041AA4B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0041AA53                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0041AA5A                 call    GetLogicalDriveStringsA
.text:0041AA5F                 sub     esp, 8
.text:0041AA62                 mov     ebx, eax
.text:0041AA64                 call    GetProcessHeap
.text:0041AA69                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0041AA6C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0041AA70                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0041AA78                 call    HeapAlloc
.text:0041AA7D                 sub     esp, 0Ch
.text:0041AA80                 mov     esi, eax
.text:0041AA82                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0041AA85                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0041AA89                 call    GetLogicalDriveStringsA
.text:0041AA8E                 sub     esp, 8
.text:0041AA91                 mov     eax, esi
.text:0041AA93                 mov     ebx, [esp+1Ch+var_8]
.text:0041AA97                 mov     esi, [esp+1Ch+var_4]
.text:0041AA9B                 add     esp, 1Ch
.text:0041AA9E                 retn
.text:0041AA9E sub_41AA40      endp
.text:0041AA9E
.text:0041AA9F
.text:0041AA9F ; =============== S U B R O U T I N E =======================================
.text:0041AA9F
.text:0041AA9F
.text:0041AA9F ; int __cdecl sub_41AA9F(char *, char *)
.text:0041AA9F sub_41AA9F      proc near               ; DATA XREF: sub_41AA9F:loc_41AB2D↓o
.text:0041AA9F
.text:0041AA9F FileName        = dword ptr -1Ch
.text:0041AA9F Mode            = dword ptr -18h
.text:0041AA9F dwBytes         = dword ptr -14h
.text:0041AA9F arg_0           = dword ptr  4
.text:0041AA9F arg_4           = dword ptr  8
.text:0041AA9F
.text:0041AA9F                 ja      short $+2
.text:0041AAA1
.text:0041AAA1 loc_41AAA1:                             ; CODE XREF: sub_41AA9F↑j
.text:0041AAA1                 jmp     short loc_41AAB0
.text:0041AAA1 ; ---------------------------------------------------------------------------
.text:0041AAA3                 align 10h
.text:0041AAB0
.text:0041AAB0 loc_41AAB0:                             ; CODE XREF: sub_41AA9F:loc_41AAA1↑j
.text:0041AAB0                 push    edi
.text:0041AAB1                 push    esi
.text:0041AAB2                 push    ebx
.text:0041AAB3                 sub     esp, 10h
.text:0041AAB6                 mov     ebx, [esp+1Ch+arg_0]
.text:0041AABA                 mov     edx, [esp+1Ch+arg_4]
.text:0041AABE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041AAC1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0041AAC5                 call    fopen
.text:0041AACA                 test    eax, eax
.text:0041AACC                 mov     edi, eax
.text:0041AACE                 jz      short loc_41AB2D
.text:0041AAD0
.text:0041AAD0 loc_41AAD0:                             ; CODE XREF: sub_41AA9F+A2↓j
.text:0041AAD0                                         ; sub_41AA9F+AB↓j
.text:0041AAD0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0041AAD8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0041AADF                 call    GetLogicalDriveStringsA
.text:0041AAE4                 sub     esp, 8
.text:0041AAE7                 mov     esi, eax
.text:0041AAE9                 call    GetProcessHeap
.text:0041AAEE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0041AAF1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0041AAF5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0041AAFD                 call    HeapAlloc
.text:0041AB02                 sub     esp, 0Ch
.text:0041AB05                 mov     ebx, eax
.text:0041AB07                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0041AB0A                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0041AB0E                 call    GetLogicalDriveStringsA
.text:0041AB13                 mov     off_41F0B4, ebx ; "notset"
.text:0041AB19                 sub     esp, 8
.text:0041AB1C                 xor     eax, eax
.text:0041AB1E                 test    ebx, ebx
.text:0041AB20                 setz    al
.text:0041AB23                 add     esp, 10h
.text:0041AB26                 pop     ebx
.text:0041AB27                 dec     eax
.text:0041AB28                 and     eax, edi
.text:0041AB2A                 pop     esi
.text:0041AB2B                 pop     edi
.text:0041AB2C                 retn
.text:0041AB2D ; ---------------------------------------------------------------------------
.text:0041AB2D
.text:0041AB2D loc_41AB2D:                             ; CODE XREF: sub_41AA9F+2F↑j
.text:0041AB2D                 mov     [esp+1Ch+Mode], offset sub_41AA9F ; Mode
.text:0041AB35                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0041AB38                 call    fopen
.text:0041AB3D                 test    eax, eax
.text:0041AB3F                 mov     edi, eax
.text:0041AB41                 jnz     short loc_41AAD0
.text:0041AB43                 call    sub_41B720
.text:0041AB48                 mov     edi, eax
.text:0041AB4A                 jmp     short loc_41AAD0
.text:0041AB4A sub_41AA9F      endp
.text:0041AB4A
.text:0041AB4A ; ---------------------------------------------------------------------------
.text:0041AB4C                 align 10h
.text:0041AB50                 sub     esp, 0Ch
.text:0041AB53                 mov     eax, [esp+10h]
.text:0041AB57                 test    eax, eax
.text:0041AB59                 jz      short loc_41AB63
.text:0041AB5B                 mov     [esp], eax
.text:0041AB5E                 call    fclose
.text:0041AB63
.text:0041AB63 loc_41AB63:                             ; CODE XREF: .text:0041AB59↑j
.text:0041AB63                 call    GetProcessHeap
.text:0041AB68                 mov     [esp], eax
.text:0041AB6B                 mov     ecx, off_41F0B4 ; "notset"
.text:0041AB71                 mov     dword ptr [esp+4], 0
.text:0041AB79                 mov     [esp+8], ecx
.text:0041AB7D                 call    HeapFree
.text:0041AB82                 mov     edx, off_41F0B0 ; "notset"
.text:0041AB88                 sub     esp, 0Ch
.text:0041AB8B                 mov     eax, 1
.text:0041AB90                 mov     off_41F0B4, edx ; "notset"
.text:0041AB96                 add     esp, 0Ch
.text:0041AB99                 retn
.text:0041AB99 ; ---------------------------------------------------------------------------
.text:0041AB9A                 align 10h
.text:0041ABA0                 push    edi
.text:0041ABA1                 push    esi
.text:0041ABA2                 push    ebx
.text:0041ABA3                 sub     esp, 10h
.text:0041ABA6                 mov     edi, [esp+24h]
.text:0041ABAA                 mov     [esp], edi
.text:0041ABAD                 call    strlen
.text:0041ABB2                 mov     edx, [esp+20h]
.text:0041ABB6                 mov     esi, eax
.text:0041ABB8                 mov     ebx, [edx+0Ch]
.text:0041ABBB                 nop
.text:0041ABBC                 lea     esi, [esi+0]
.text:0041ABC0
.text:0041ABC0 loc_41ABC0:                             ; CODE XREF: .text:0041ABF1↓j
.text:0041ABC0                 mov     [esp+4], edi
.text:0041ABC4                 mov     [esp], ebx
.text:0041ABC7                 call    strstr
.text:0041ABCC                 test    eax, eax
.text:0041ABCE                 jz      short loc_41ABF3
.text:0041ABD0                 cmp     eax, ebx
.text:0041ABD2                 jz      short loc_41ABF5
.text:0041ABD4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0041ABD8                 jz      short loc_41AC00
.text:0041ABDA
.text:0041ABDA loc_41ABDA:                             ; CODE XREF: .text:0041AC10↓j
.text:0041ABDA                 mov     [esp], ebx
.text:0041ABDD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0041ABE5                 call    strchr
.text:0041ABEA                 test    eax, eax
.text:0041ABEC                 mov     ebx, eax
.text:0041ABEE                 jz      short loc_41ABF3
.text:0041ABF0                 inc     ebx
.text:0041ABF1                 jmp     short loc_41ABC0
.text:0041ABF3 ; ---------------------------------------------------------------------------
.text:0041ABF3
.text:0041ABF3 loc_41ABF3:                             ; CODE XREF: .text:0041ABCE↑j
.text:0041ABF3                                         ; .text:0041ABEE↑j
.text:0041ABF3                 xor     eax, eax
.text:0041ABF5
.text:0041ABF5 loc_41ABF5:                             ; CODE XREF: .text:0041ABD2↑j
.text:0041ABF5                                         ; .text:0041AC06↓j ...
.text:0041ABF5                 add     esp, 10h
.text:0041ABF8                 pop     ebx
.text:0041ABF9                 pop     esi
.text:0041ABFA                 pop     edi
.text:0041ABFB                 retn
.text:0041ABFB ; ---------------------------------------------------------------------------
.text:0041ABFC                 align 10h
.text:0041AC00
.text:0041AC00 loc_41AC00:                             ; CODE XREF: .text:0041ABD8↑j
.text:0041AC00                 movzx   edx, byte ptr [esi+eax]
.text:0041AC04                 test    dl, dl
.text:0041AC06                 jz      short loc_41ABF5
.text:0041AC08                 cmp     dl, 3Dh ; '='
.text:0041AC0B                 jz      short loc_41ABF5
.text:0041AC0D                 cmp     dl, 2Ch ; ','
.text:0041AC10                 jnz     short loc_41ABDA
.text:0041AC12                 jmp     short loc_41ABF5
.text:0041AC12 ; ---------------------------------------------------------------------------
.text:0041AC14                 align 10h
.text:0041AC20                 sub     esp, 2Ch
.text:0041AC23                 lea     edx, [esp+28h]
.text:0041AC27                 mov     [esp+10h], edx
.text:0041AC2B                 mov     edx, [esp+30h]
.text:0041AC2F                 mov     dword ptr [esp+18h], 0
.text:0041AC37                 mov     dword ptr [esp+14h], 0
.text:0041AC3F                 mov     dword ptr [esp+0Ch], 400h
.text:0041AC47                 mov     [esp+8], edx
.text:0041AC4B                 mov     dword ptr [esp+4], 0
.text:0041AC53                 mov     dword ptr [esp], 13FFh
.text:0041AC5A                 call    FormatMessageA
.text:0041AC5F                 sub     esp, 1Ch
.text:0041AC62                 mov     eax, [esp+28h]
.text:0041AC66                 add     esp, 2Ch
.text:0041AC69                 retn
.text:0041AC69 ; ---------------------------------------------------------------------------
.text:0041AC6A ; const char aSWindowsErrorL[]
.text:0041AC6A aSWindowsErrorL db '%s: Windows error %ld: %s',0Ah,0
.text:0041AC6A                                         ; DATA XREF: .text:0041ACE6↓o
.text:0041AC6A                                         ; sub_41AD20+59↓o ...
.text:0041AC85                 align 10h
.text:0041AC90                 sub     esp, 2Ch
.text:0041AC93                 lea     ecx, [esp+20h]
.text:0041AC97                 mov     [esp+28h], esi
.text:0041AC9B                 mov     esi, [esp+34h]
.text:0041AC9F                 mov     [esp+10h], ecx
.text:0041ACA3                 mov     [esp+24h], ebx
.text:0041ACA7                 mov     [esp+8], esi
.text:0041ACAB                 mov     dword ptr [esp+18h], 0
.text:0041ACB3                 mov     dword ptr [esp+14h], 0
.text:0041ACBB                 mov     dword ptr [esp+0Ch], 400h
.text:0041ACC3                 mov     dword ptr [esp+4], 0
.text:0041ACCB                 mov     dword ptr [esp], 13FFh
.text:0041ACD2                 call    FormatMessageA
.text:0041ACD7                 sub     esp, 1Ch
.text:0041ACDA                 mov     edx, [esp+30h]
.text:0041ACDE                 mov     [esp+0Ch], esi
.text:0041ACE2                 mov     ebx, [esp+20h]
.text:0041ACE6                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041ACEE                 mov     [esp+8], edx
.text:0041ACF2                 mov     edx, ds:_iob
.text:0041ACF8                 mov     [esp+10h], ebx
.text:0041ACFC                 add     edx, 40h ; '@'
.text:0041ACFF                 mov     [esp], edx
.text:0041AD02                 call    fprintf
.text:0041AD07                 mov     [esp], ebx
.text:0041AD0A                 call    LocalFree
.text:0041AD0F                 sub     esp, 4
.text:0041AD12                 mov     ebx, [esp+24h]
.text:0041AD16                 mov     esi, [esp+28h]
.text:0041AD1A                 add     esp, 2Ch
.text:0041AD1D                 retn
.text:0041AD1D ; ---------------------------------------------------------------------------
.text:0041AD1E                 align 10h
.text:0041AD20
.text:0041AD20 ; =============== S U B R O U T I N E =======================================
.text:0041AD20
.text:0041AD20
.text:0041AD20 sub_41AD20      proc near               ; CODE XREF: sub_418450+1A9↑p
.text:0041AD20
.text:0041AD20 dwFlags         = dword ptr -2Ch
.text:0041AD20 lpSource        = dword ptr -28h
.text:0041AD20 dwMessageId     = dword ptr -24h
.text:0041AD20 dwLanguageId    = dword ptr -20h
.text:0041AD20 lpBuffer        = dword ptr -1Ch
.text:0041AD20 nSize           = dword ptr -18h
.text:0041AD20 Arguments       = dword ptr -14h
.text:0041AD20 Buffer          = byte ptr -0Ch
.text:0041AD20 var_8           = dword ptr -8
.text:0041AD20 var_4           = dword ptr -4
.text:0041AD20 arg_0           = dword ptr  4
.text:0041AD20
.text:0041AD20                 sub     esp, 2Ch
.text:0041AD23                 mov     [esp+2Ch+var_8], ebx
.text:0041AD27                 mov     [esp+2Ch+var_4], esi
.text:0041AD2B                 call    GetLastError
.text:0041AD30                 mov     [esp+2Ch+dwMessageId], eax ; dwMessageId
.text:0041AD34                 lea     ecx, [esp+2Ch+Buffer]
.text:0041AD38                 mov     esi, eax
.text:0041AD3A                 mov     [esp+2Ch+lpBuffer], ecx ; lpBuffer
.text:0041AD3E                 mov     [esp+2Ch+Arguments], 0 ; Arguments
.text:0041AD46                 mov     [esp+2Ch+nSize], 0 ; nSize
.text:0041AD4E                 mov     [esp+2Ch+dwLanguageId], 400h ; dwLanguageId
.text:0041AD56                 mov     [esp+2Ch+lpSource], 0 ; lpSource
.text:0041AD5E                 mov     [esp+2Ch+dwFlags], 13FFh ; dwFlags
.text:0041AD65                 call    FormatMessageA
.text:0041AD6A                 sub     esp, 1Ch
.text:0041AD6D                 mov     edx, [esp+2Ch+arg_0]
.text:0041AD71                 mov     [esp+2Ch+dwLanguageId], esi
.text:0041AD75                 mov     ebx, dword ptr [esp+2Ch+Buffer]
.text:0041AD79                 mov     [esp+2Ch+lpSource], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041AD81                 mov     [esp+2Ch+dwMessageId], edx
.text:0041AD85                 mov     edx, ds:_iob
.text:0041AD8B                 mov     [esp+2Ch+lpBuffer], ebx
.text:0041AD8F                 add     edx, 40h ; '@'
.text:0041AD92                 mov     [esp+2Ch+dwFlags], edx ; Stream
.text:0041AD95                 call    fprintf
.text:0041AD9A                 mov     [esp+2Ch+dwFlags], ebx ; hMem
.text:0041AD9D                 call    LocalFree
.text:0041ADA2                 sub     esp, 4
.text:0041ADA5                 mov     ebx, [esp+2Ch+var_8]
.text:0041ADA9                 mov     esi, [esp+2Ch+var_4]
.text:0041ADAD                 add     esp, 2Ch
.text:0041ADB0                 retn
.text:0041ADB0 sub_41AD20      endp
.text:0041ADB0
.text:0041ADB0 ; ---------------------------------------------------------------------------
.text:0041ADB1 aNtdllDll       db 'ntdll.dll',0        ; DATA XREF: .text:0041ADE3↓o
.text:0041ADB1                                         ; .text:0041AE3B↓o
.text:0041ADBB aRtlntstatustod db 'RtlNtStatusToDosError',0
.text:0041ADBB                                         ; DATA XREF: .text:0041ADF2↓o
.text:0041ADBB                                         ; .text:0041AE4A↓o
.text:0041ADD1 ; ---------------------------------------------------------------------------
.text:0041ADD1                 jmp     short loc_41ADE0
.text:0041ADD1 ; ---------------------------------------------------------------------------
.text:0041ADD3                 align 10h
.text:0041ADE0
.text:0041ADE0 loc_41ADE0:                             ; CODE XREF: .text:0041ADD1↑j
.text:0041ADE0                 sub     esp, 0Ch
.text:0041ADE3                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041ADEA                 call    GetModuleHandleA
.text:0041ADEF                 sub     esp, 4
.text:0041ADF2                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041ADFA                 mov     [esp], eax
.text:0041ADFD                 call    GetProcAddress
.text:0041AE02                 sub     esp, 8
.text:0041AE05                 test    eax, eax
.text:0041AE07                 jz      short loc_41AE20
.text:0041AE09                 mov     ecx, [esp+10h]
.text:0041AE0D                 mov     [esp], ecx
.text:0041AE10                 call    eax
.text:0041AE12                 sub     esp, 4
.text:0041AE15                 mov     [esp], eax
.text:0041AE18                 call    SetLastError
.text:0041AE1D                 sub     esp, 4
.text:0041AE20
.text:0041AE20 loc_41AE20:                             ; CODE XREF: .text:0041AE07↑j
.text:0041AE20                 add     esp, 0Ch
.text:0041AE23                 retn
.text:0041AE23 ; ---------------------------------------------------------------------------
.text:0041AE24                 align 10h
.text:0041AE30                 sub     esp, 2Ch
.text:0041AE33                 mov     [esp+24h], ebx
.text:0041AE37                 mov     [esp+28h], esi
.text:0041AE3B                 mov     dword ptr [esp], offset aNtdllDll ; "ntdll.dll"
.text:0041AE42                 call    GetModuleHandleA
.text:0041AE47                 sub     esp, 4
.text:0041AE4A                 mov     dword ptr [esp+4], offset aRtlntstatustod ; "RtlNtStatusToDosError"
.text:0041AE52                 mov     [esp], eax
.text:0041AE55                 call    GetProcAddress
.text:0041AE5A                 sub     esp, 8
.text:0041AE5D                 test    eax, eax
.text:0041AE5F                 jz      loc_41AEE6
.text:0041AE65                 mov     ebx, [esp+34h]
.text:0041AE69                 mov     [esp], ebx
.text:0041AE6C                 call    eax
.text:0041AE6E                 sub     esp, 4
.text:0041AE71                 mov     esi, eax
.text:0041AE73                 lea     ecx, [esp+20h]
.text:0041AE77                 mov     [esp+10h], ecx
.text:0041AE7B                 mov     dword ptr [esp+18h], 0
.text:0041AE83                 mov     dword ptr [esp+14h], 0
.text:0041AE8B                 mov     dword ptr [esp+0Ch], 400h
.text:0041AE93                 mov     [esp+8], eax
.text:0041AE97                 mov     dword ptr [esp+4], 0
.text:0041AE9F                 mov     dword ptr [esp], 13FFh
.text:0041AEA6                 call    FormatMessageA
.text:0041AEAB                 sub     esp, 1Ch
.text:0041AEAE                 mov     edx, [esp+30h]
.text:0041AEB2                 mov     [esp+0Ch], esi
.text:0041AEB6                 mov     ebx, [esp+20h]
.text:0041AEBA                 mov     dword ptr [esp+4], offset aSWindowsErrorL ; "%s: Windows error %ld: %s\n"
.text:0041AEC2                 mov     [esp+8], edx
.text:0041AEC6                 mov     edx, ds:_iob
.text:0041AECC                 mov     [esp+10h], ebx
.text:0041AED0                 add     edx, 40h ; '@'
.text:0041AED3                 mov     [esp], edx
.text:0041AED6                 call    fprintf
.text:0041AEDB                 mov     [esp], ebx
.text:0041AEDE                 call    LocalFree
.text:0041AEE3                 sub     esp, 4
.text:0041AEE6
.text:0041AEE6 loc_41AEE6:                             ; CODE XREF: .text:0041AE5F↑j
.text:0041AEE6                 mov     ebx, [esp+24h]
.text:0041AEEA                 mov     esi, [esp+28h]
.text:0041AEEE                 add     esp, 2Ch
.text:0041AEF1                 retn
.text:0041AEF1 ; ---------------------------------------------------------------------------
.text:0041AEF2                 align 10h
.text:0041AF00
.text:0041AF00 ; =============== S U B R O U T I N E =======================================
.text:0041AF00
.text:0041AF00
.text:0041AF00 ; int __cdecl sub_41AF00(HANDLE, LPCSTR lpFileName, int)
.text:0041AF00 sub_41AF00      proc near               ; CODE XREF: sub_418E00+22↑p
.text:0041AF00                                         ; sub_41B000+5F↓p
.text:0041AF00
.text:0041AF00 hFile           = dword ptr -3Ch
.text:0041AF00 lpCreationTime  = dword ptr -38h
.text:0041AF00 lpLastAccessTime= dword ptr -34h
.text:0041AF00 lpLastWriteTime = dword ptr -30h
.text:0041AF00 LastWriteTime   = FILETIME ptr -24h
.text:0041AF00 LastAccessTime  = FILETIME ptr -1Ch
.text:0041AF00 arg_0           = dword ptr  4
.text:0041AF00 lpFileName      = dword ptr  8
.text:0041AF00 arg_8           = dword ptr  0Ch
.text:0041AF00
.text:0041AF00                 push    ebp
.text:0041AF01                 push    edi
.text:0041AF02                 push    esi
.text:0041AF03                 push    ebx
.text:0041AF04                 sub     esp, 2Ch
.text:0041AF07                 mov     ebp, [esp+3Ch+arg_0]
.text:0041AF0B                 mov     edi, [esp+3Ch+arg_8]
.text:0041AF0F                 cmp     ebp, 0FFFFFFFFh
.text:0041AF12                 jz      loc_41AFE1
.text:0041AF18                 test    edi, edi
.text:0041AF1A                 jz      loc_41AFC0
.text:0041AF20                 mov     eax, [edi]
.text:0041AF22                 mov     esi, 989680h
.text:0041AF27                 imul    esi
.text:0041AF29                 mov     ebx, edx
.text:0041AF2B                 mov     ecx, eax
.text:0041AF2D                 mov     edx, [edi+4]
.text:0041AF30                 lea     eax, [edx+edx*4]
.text:0041AF33                 add     eax, eax
.text:0041AF35                 cdq
.text:0041AF36                 add     ecx, eax
.text:0041AF38                 adc     ebx, edx
.text:0041AF3A                 add     ecx, 0D53E8000h
.text:0041AF40                 adc     ebx, 19DB1DEh
.text:0041AF46                 mov     [esp+3Ch+LastAccessTime.dwLowDateTime], ecx
.text:0041AF4A                 mov     [esp+3Ch+LastAccessTime.dwHighDateTime], ebx
.text:0041AF4E                 mov     eax, [edi+8]
.text:0041AF51                 imul    esi
.text:0041AF53                 mov     ecx, edx
.text:0041AF55                 mov     esi, eax
.text:0041AF57                 mov     edx, [edi+0Ch]
.text:0041AF5A                 lea     eax, [edx+edx*4]
.text:0041AF5D                 add     eax, eax
.text:0041AF5F                 cdq
.text:0041AF60                 add     esi, eax
.text:0041AF62                 adc     ecx, edx
.text:0041AF64                 add     esi, 0D53E8000h
.text:0041AF6A                 adc     ecx, 19DB1DEh
.text:0041AF70                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041AF74                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], esi
.text:0041AF78
.text:0041AF78 loc_41AF78:                             ; CODE XREF: sub_41AF00+DF↓j
.text:0041AF78                 mov     [esp+3Ch+lpCreationTime], 0 ; lpCreationTime
.text:0041AF80                 lea     eax, [esp+3Ch+LastWriteTime]
.text:0041AF84                 lea     edi, [esp+3Ch+LastAccessTime]
.text:0041AF88                 mov     [esp+3Ch+lpLastWriteTime], eax ; lpLastWriteTime
.text:0041AF8C                 mov     [esp+3Ch+lpLastAccessTime], edi ; lpLastAccessTime
.text:0041AF90                 mov     [esp+3Ch+hFile], ebp ; hFile
.text:0041AF93                 call    SetFileTime
.text:0041AF98                 sub     esp, 10h
.text:0041AF9B                 xor     edx, edx
.text:0041AF9D                 test    eax, eax
.text:0041AF9F
.text:0041AF9F loc_41AF9F:                             ; CODE XREF: sub_41AF00+F4↓j
.text:0041AF9F                 jz      short loc_41AFAB
.text:0041AFA1
.text:0041AFA1 loc_41AFA1:                             ; CODE XREF: sub_41AF00+BE↓j
.text:0041AFA1                 add     esp, 2Ch
.text:0041AFA4                 mov     eax, edx
.text:0041AFA6                 pop     ebx
.text:0041AFA7                 pop     esi
.text:0041AFA8                 pop     edi
.text:0041AFA9                 pop     ebp
.text:0041AFAA                 retn
.text:0041AFAB ; ---------------------------------------------------------------------------
.text:0041AFAB
.text:0041AFAB loc_41AFAB:                             ; CODE XREF: sub_41AF00:loc_41AF9F↑j
.text:0041AFAB                 call    sub_419250
.text:0041AFB0                 mov     ebp, eax
.text:0041AFB2                 call    _errno
.text:0041AFB7                 mov     [eax], ebp
.text:0041AFB9                 mov     edx, 0FFFFFFFFh
.text:0041AFBE                 jmp     short loc_41AFA1
.text:0041AFC0 ; ---------------------------------------------------------------------------
.text:0041AFC0
.text:0041AFC0 loc_41AFC0:                             ; CODE XREF: sub_41AF00+1A↑j
.text:0041AFC0                 lea     ebx, [esp+3Ch+LastAccessTime]
.text:0041AFC4                 mov     [esp+3Ch+hFile], ebx ; lpSystemTimeAsFileTime
.text:0041AFC7                 call    GetSystemTimeAsFileTime
.text:0041AFCC                 sub     esp, 4
.text:0041AFCF                 mov     edx, [esp+3Ch+LastAccessTime.dwLowDateTime]
.text:0041AFD3                 mov     ecx, [esp+3Ch+LastAccessTime.dwHighDateTime]
.text:0041AFD7                 mov     [esp+3Ch+LastWriteTime.dwLowDateTime], edx
.text:0041AFDB                 mov     [esp+3Ch+LastWriteTime.dwHighDateTime], ecx
.text:0041AFDF                 jmp     short loc_41AF78
.text:0041AFE1 ; ---------------------------------------------------------------------------
.text:0041AFE1
.text:0041AFE1 loc_41AFE1:                             ; CODE XREF: sub_41AF00+12↑j
.text:0041AFE1                 mov     edx, [esp+3Ch+lpFileName]
.text:0041AFE5                 mov     [esp+3Ch+hFile], edx ; lpFileName
.text:0041AFE8                 call    GetFileAttributesA
.text:0041AFED                 sub     esp, 4
.text:0041AFF0                 xor     edx, edx
.text:0041AFF2                 test    al, 10h
.text:0041AFF4                 jmp     short loc_41AF9F
.text:0041AFF4 sub_41AF00      endp
.text:0041AFF4
.text:0041AFF4 ; ---------------------------------------------------------------------------
.text:0041AFF6                 align 10h
.text:0041B000
.text:0041B000 ; =============== S U B R O U T I N E =======================================
.text:0041B000
.text:0041B000
.text:0041B000 ; int __cdecl sub_41B000(LPCSTR, int)
.text:0041B000 sub_41B000      proc near               ; CODE XREF: sub_4187E0:loc_418840↑p
.text:0041B000
.text:0041B000 lpFileName      = dword ptr -2Ch
.text:0041B000 dwDesiredAccess = dword ptr -28h
.text:0041B000 dwShareMode     = dword ptr -24h
.text:0041B000 lpSecurityAttributes= dword ptr -20h
.text:0041B000 dwCreationDisposition= dword ptr -1Ch
.text:0041B000 dwFlagsAndAttributes= dword ptr -18h
.text:0041B000 hTemplateFile   = dword ptr -14h
.text:0041B000 var_8           = dword ptr -8
.text:0041B000 var_4           = dword ptr -4
.text:0041B000 arg_0           = dword ptr  4
.text:0041B000 arg_4           = dword ptr  8
.text:0041B000
.text:0041B000                 sub     esp, 2Ch
.text:0041B003                 mov     [esp+2Ch+var_8], ebx
.text:0041B007                 mov     ebx, [esp+2Ch+arg_0]
.text:0041B00B                 mov     [esp+2Ch+var_4], esi
.text:0041B00F                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0041B017                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000080h ; dwFlagsAndAttributes
.text:0041B01F                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0041B027                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041B02F                 mov     [esp+2Ch+dwShareMode], 3 ; dwShareMode
.text:0041B037                 mov     [esp+2Ch+dwDesiredAccess], 100h ; dwDesiredAccess
.text:0041B03F                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:0041B042                 call    CreateFileA
.text:0041B047                 sub     esp, 1Ch
.text:0041B04A                 mov     esi, eax
.text:0041B04C                 test    ebx, ebx
.text:0041B04E                 jz      short loc_41B07F
.text:0041B050                 mov     [esp+2Ch+dwDesiredAccess], ebx ; lpFileName
.text:0041B054                 mov     edx, [esp+2Ch+arg_4]
.text:0041B058                 mov     [esp+2Ch+lpFileName], eax ; HANDLE
.text:0041B05B                 mov     [esp+2Ch+dwShareMode], edx ; int
.text:0041B05F                 call    sub_41AF00
.text:0041B064                 mov     [esp+2Ch+lpFileName], esi ; hObject
.text:0041B067                 mov     ebx, eax
.text:0041B069                 call    CloseHandle
.text:0041B06E                 sub     esp, 4
.text:0041B071                 mov     eax, ebx
.text:0041B073
.text:0041B073 loc_41B073:                             ; CODE XREF: sub_41B000+8F↓j
.text:0041B073                 mov     ebx, [esp+2Ch+var_8]
.text:0041B077                 mov     esi, [esp+2Ch+var_4]
.text:0041B07B                 add     esp, 2Ch
.text:0041B07E                 retn
.text:0041B07F ; ---------------------------------------------------------------------------
.text:0041B07F
.text:0041B07F loc_41B07F:                             ; CODE XREF: sub_41B000+4E↑j
.text:0041B07F                 call    _errno
.text:0041B084                 mov     dword ptr [eax], 16h
.text:0041B08A                 mov     eax, 0FFFFFFFFh
.text:0041B08F                 jmp     short loc_41B073
.text:0041B08F sub_41B000      endp
.text:0041B08F
.text:0041B08F ; ---------------------------------------------------------------------------
.text:0041B091                 align 10h
.text:0041B0A0
.text:0041B0A0 ; =============== S U B R O U T I N E =======================================
.text:0041B0A0
.text:0041B0A0
.text:0041B0A0 sub_41B0A0      proc near               ; CODE XREF: sub_418B30+16↑j
.text:0041B0A0
.text:0041B0A0 arg_0           = dword ptr  4
.text:0041B0A0 arg_4           = dword ptr  8
.text:0041B0A0
.text:0041B0A0                 sub     esp, 0Ch
.text:0041B0A3                 mov     ecx, [esp+0Ch+arg_0]
.text:0041B0A7                 mov     eax, [esp+0Ch+arg_4]
.text:0041B0AB                 test    ecx, ecx
.text:0041B0AD                 js      short loc_41B0DE
.text:0041B0AF                 test    eax, eax
.text:0041B0B1                 js      short loc_41B0BD
.text:0041B0B3                 cmp     eax, 8
.text:0041B0B6                 jle     short loc_41B0D1
.text:0041B0B8                 cmp     eax, 0Ch
.text:0041B0BB                 jz      short loc_41B0D1
.text:0041B0BD
.text:0041B0BD loc_41B0BD:                             ; CODE XREF: sub_41B0A0+11↑j
.text:0041B0BD                 call    _errno
.text:0041B0C2                 mov     dword ptr [eax], 16h
.text:0041B0C8
.text:0041B0C8 loc_41B0C8:                             ; CODE XREF: sub_41B0A0+3C↓j
.text:0041B0C8                                         ; sub_41B0A0+49↓j
.text:0041B0C8                 mov     eax, 0FFFFFFFFh
.text:0041B0CD                 add     esp, 0Ch
.text:0041B0D0                 retn
.text:0041B0D1 ; ---------------------------------------------------------------------------
.text:0041B0D1
.text:0041B0D1 loc_41B0D1:                             ; CODE XREF: sub_41B0A0+16↑j
.text:0041B0D1                                         ; sub_41B0A0+1B↑j
.text:0041B0D1                 call    _errno
.text:0041B0D6                 mov     dword ptr [eax], 28h ; '('
.text:0041B0DC                 jmp     short loc_41B0C8
.text:0041B0DE ; ---------------------------------------------------------------------------
.text:0041B0DE
.text:0041B0DE loc_41B0DE:                             ; CODE XREF: sub_41B0A0+D↑j
.text:0041B0DE                 call    _errno
.text:0041B0E3                 mov     dword ptr [eax], 9
.text:0041B0E9                 jmp     short loc_41B0C8
.text:0041B0E9 sub_41B0A0      endp
.text:0041B0E9
.text:0041B0E9 ; ---------------------------------------------------------------------------
.text:0041B0EB                 align 10h
.text:0041B0F0
.text:0041B0F0 ; =============== S U B R O U T I N E =======================================
.text:0041B0F0
.text:0041B0F0
.text:0041B0F0 sub_41B0F0      proc near               ; CODE XREF: sub_418B90+17↑p
.text:0041B0F0
.text:0041B0F0 hFindFile       = dword ptr -0Ch
.text:0041B0F0 var_8           = dword ptr -8
.text:0041B0F0 var_4           = dword ptr -4
.text:0041B0F0 arg_0           = dword ptr  4
.text:0041B0F0
.text:0041B0F0                 sub     esp, 0Ch
.text:0041B0F3                 mov     [esp+0Ch+var_4], esi
.text:0041B0F7                 mov     esi, [esp+0Ch+arg_0]
.text:0041B0FB                 mov     [esp+0Ch+var_8], ebx
.text:0041B0FF                 test    esi, esi
.text:0041B101                 jz      short loc_41B142
.text:0041B103                 mov     eax, [esi]
.text:0041B105                 cmp     eax, 0FFFFFFFFh
.text:0041B108                 jz      short loc_41B11F
.text:0041B10A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041B10D                 call    FindClose
.text:0041B112                 sub     esp, 4
.text:0041B115                 test    eax, eax
.text:0041B117                 jz      short loc_41B132
.text:0041B119
.text:0041B119 loc_41B119:                             ; CODE XREF: sub_41B0F0+50↓j
.text:0041B119                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041B11F
.text:0041B11F loc_41B11F:                             ; CODE XREF: sub_41B0F0+18↑j
.text:0041B11F                 mov     dword ptr [esi+14h], 1
.text:0041B126
.text:0041B126 loc_41B126:                             ; CODE XREF: sub_41B0F0+5D↓j
.text:0041B126                 mov     ebx, [esp+0Ch+var_8]
.text:0041B12A                 mov     esi, [esp+0Ch+var_4]
.text:0041B12E                 add     esp, 0Ch
.text:0041B131                 retn
.text:0041B132 ; ---------------------------------------------------------------------------
.text:0041B132
.text:0041B132 loc_41B132:                             ; CODE XREF: sub_41B0F0+27↑j
.text:0041B132                 call    sub_419250
.text:0041B137                 mov     ebx, eax
.text:0041B139                 call    _errno
.text:0041B13E                 mov     [eax], ebx
.text:0041B140                 jmp     short loc_41B119
.text:0041B142 ; ---------------------------------------------------------------------------
.text:0041B142
.text:0041B142 loc_41B142:                             ; CODE XREF: sub_41B0F0+11↑j
.text:0041B142                 call    _errno
.text:0041B147                 mov     dword ptr [eax], 16h
.text:0041B14D                 jmp     short loc_41B126
.text:0041B14D sub_41B0F0      endp
.text:0041B14D
.text:0041B14D ; ---------------------------------------------------------------------------
.text:0041B14F                 align 10h
.text:0041B150
.text:0041B150 ; =============== S U B R O U T I N E =======================================
.text:0041B150
.text:0041B150
.text:0041B150 sub_41B150      proc near               ; CODE XREF: sub_418D60+4F↑p
.text:0041B150
.text:0041B150 var_8           = dword ptr -8
.text:0041B150 var_4           = dword ptr -4
.text:0041B150 arg_0           = dword ptr  4
.text:0041B150 arg_4           = dword ptr  8
.text:0041B150 arg_8           = dword ptr  0Ch
.text:0041B150
.text:0041B150                 sub     esp, 8
.text:0041B153                 mov     ecx, [esp+8+arg_0]
.text:0041B157                 mov     [esp+8+var_8], ebx
.text:0041B15A                 mov     ebx, [esp+8+arg_8]
.text:0041B15E                 mov     [esp+8+var_4], esi
.text:0041B162                 mov     edx, [esp+8+arg_4]
.text:0041B166                 mov     eax, ebx
.text:0041B168                 and     eax, 7
.text:0041B16B                 cmp     eax, 7          ; switch 8 cases
.text:0041B16E                 ja      short def_41B170 ; jumptable 0041B170 default case
.text:0041B170                 jmp     ds:jpt_41B170[eax*4] ; switch jump
.text:0041B170 ; ---------------------------------------------------------------------------
.text:0041B177                 align 4
.text:0041B178 jpt_41B170      dd offset loc_41B1FA    ; DATA XREF: sub_41B150+20↑r
.text:0041B178                 dd offset loc_41B201    ; jump table for switch statement
.text:0041B178                 dd offset loc_41B198
.text:0041B178                 dd offset loc_41B209
.text:0041B178                 dd offset loc_41B216
.text:0041B178                 dd offset loc_41B223
.text:0041B178                 dd offset loc_41B230
.text:0041B178                 dd offset loc_41B23D
.text:0041B198 ; ---------------------------------------------------------------------------
.text:0041B198
.text:0041B198 loc_41B198:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B198                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B198                 mov     eax, [edx]      ; jumptable 0041B170 case 2
.text:0041B19A                 sub     ecx, 1Ch
.text:0041B19D                 add     ebx, 6
.text:0041B1A0                 sub     edx, 18h
.text:0041B1A3                 lea     esi, [esi+0]
.text:0041B1A9                 lea     edi, [edi+0]
.text:0041B1B0
.text:0041B1B0 loc_41B1B0:                             ; CODE XREF: sub_41B150+A8↓j
.text:0041B1B0                 mov     esi, [edx+1Ch]
.text:0041B1B3                 add     edx, 20h ; ' '
.text:0041B1B6                 mov     [ecx+1Ch], eax
.text:0041B1B9                 add     ecx, 20h ; ' '
.text:0041B1BC                 sub     ebx, 8
.text:0041B1BF                 jnz     short def_41B170 ; jumptable 0041B170 default case
.text:0041B1C1                 mov     [ecx], esi
.text:0041B1C3                 mov     ebx, [esp+8+var_8]
.text:0041B1C6                 mov     esi, [esp+8+var_4]
.text:0041B1CA                 add     esp, 8
.text:0041B1CD                 retn
.text:0041B1CD ; ---------------------------------------------------------------------------
.text:0041B1CE                 align 10h
.text:0041B1D0
.text:0041B1D0 def_41B170:                             ; CODE XREF: sub_41B150+1E↑j
.text:0041B1D0                                         ; sub_41B150+6F↑j ...
.text:0041B1D0                 mov     eax, [edx]      ; jumptable 0041B170 default case
.text:0041B1D2                 mov     [ecx], esi
.text:0041B1D4
.text:0041B1D4 loc_41B1D4:                             ; CODE XREF: sub_41B150+AF↓j
.text:0041B1D4                 mov     esi, [edx+4]
.text:0041B1D7                 mov     [ecx+4], eax
.text:0041B1DA
.text:0041B1DA loc_41B1DA:                             ; CODE XREF: sub_41B150+F6↓j
.text:0041B1DA                 mov     eax, [edx+8]
.text:0041B1DD                 mov     [ecx+8], esi
.text:0041B1E0
.text:0041B1E0 loc_41B1E0:                             ; CODE XREF: sub_41B150+EB↓j
.text:0041B1E0                 mov     esi, [edx+0Ch]
.text:0041B1E3                 mov     [ecx+0Ch], eax
.text:0041B1E6
.text:0041B1E6 loc_41B1E6:                             ; CODE XREF: sub_41B150+DE↓j
.text:0041B1E6                 mov     eax, [edx+10h]
.text:0041B1E9                 mov     [ecx+10h], esi
.text:0041B1EC
.text:0041B1EC loc_41B1EC:                             ; CODE XREF: sub_41B150+D1↓j
.text:0041B1EC                 mov     esi, [edx+14h]
.text:0041B1EF                 mov     [ecx+14h], eax
.text:0041B1F2
.text:0041B1F2 loc_41B1F2:                             ; CODE XREF: sub_41B150+C4↓j
.text:0041B1F2                 mov     eax, [edx+18h]
.text:0041B1F5                 mov     [ecx+18h], esi
.text:0041B1F8                 jmp     short loc_41B1B0
.text:0041B1FA ; ---------------------------------------------------------------------------
.text:0041B1FA
.text:0041B1FA loc_41B1FA:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B1FA                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B1FA                 mov     eax, [edx]      ; jumptable 0041B170 case 0
.text:0041B1FC                 sub     ecx, 4
.text:0041B1FF                 jmp     short loc_41B1D4
.text:0041B201 ; ---------------------------------------------------------------------------
.text:0041B201
.text:0041B201 loc_41B201:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B201                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B201                 mov     esi, [edx]      ; jumptable 0041B170 case 1
.text:0041B203                 dec     ebx
.text:0041B204                 add     edx, 4
.text:0041B207                 jmp     short def_41B170 ; jumptable 0041B170 default case
.text:0041B209 ; ---------------------------------------------------------------------------
.text:0041B209
.text:0041B209 loc_41B209:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B209                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B209                 mov     esi, [edx]      ; jumptable 0041B170 case 3
.text:0041B20B                 sub     ecx, 18h
.text:0041B20E                 add     ebx, 5
.text:0041B211                 sub     edx, 14h
.text:0041B214                 jmp     short loc_41B1F2
.text:0041B216 ; ---------------------------------------------------------------------------
.text:0041B216
.text:0041B216 loc_41B216:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B216                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B216                 mov     eax, [edx]      ; jumptable 0041B170 case 4
.text:0041B218                 sub     ecx, 14h
.text:0041B21B                 add     ebx, 4
.text:0041B21E                 sub     edx, 10h
.text:0041B221                 jmp     short loc_41B1EC
.text:0041B223 ; ---------------------------------------------------------------------------
.text:0041B223
.text:0041B223 loc_41B223:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B223                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B223                 mov     esi, [edx]      ; jumptable 0041B170 case 5
.text:0041B225                 sub     ecx, 10h
.text:0041B228                 add     ebx, 3
.text:0041B22B                 sub     edx, 0Ch
.text:0041B22E                 jmp     short loc_41B1E6
.text:0041B230 ; ---------------------------------------------------------------------------
.text:0041B230
.text:0041B230 loc_41B230:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B230                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B230                 mov     eax, [edx]      ; jumptable 0041B170 case 6
.text:0041B232                 sub     ecx, 0Ch
.text:0041B235                 add     ebx, 2
.text:0041B238                 sub     edx, 8
.text:0041B23B                 jmp     short loc_41B1E0
.text:0041B23D ; ---------------------------------------------------------------------------
.text:0041B23D
.text:0041B23D loc_41B23D:                             ; CODE XREF: sub_41B150+20↑j
.text:0041B23D                                         ; DATA XREF: sub_41B150:jpt_41B170↑o
.text:0041B23D                 mov     esi, [edx]      ; jumptable 0041B170 case 7
.text:0041B23F                 sub     ecx, 8
.text:0041B242                 inc     ebx
.text:0041B243                 sub     edx, 4
.text:0041B246                 jmp     short loc_41B1DA
.text:0041B246 sub_41B150      endp
.text:0041B246
.text:0041B246 ; ---------------------------------------------------------------------------
.text:0041B248                 align 10h
.text:0041B250
.text:0041B250 ; =============== S U B R O U T I N E =======================================
.text:0041B250
.text:0041B250
.text:0041B250 sub_41B250      proc near               ; CODE XREF: sub_418D60+93↑p
.text:0041B250
.text:0041B250 var_1C          = dword ptr -1Ch
.text:0041B250 var_18          = dword ptr -18h
.text:0041B250 var_14          = dword ptr -14h
.text:0041B250 arg_0           = dword ptr  4
.text:0041B250 arg_4           = dword ptr  8
.text:0041B250 arg_8           = dword ptr  0Ch
.text:0041B250
.text:0041B250                 push    ebp
.text:0041B251                 push    edi
.text:0041B252                 push    esi
.text:0041B253                 push    ebx
.text:0041B254                 sub     esp, 0Ch
.text:0041B257                 mov     edx, [esp+1Ch+arg_4]
.text:0041B25B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:0041B263                 mov     eax, [esp+1Ch+arg_8]
.text:0041B267                 mov     esi, [esp+1Ch+arg_0]
.text:0041B26B                 mov     ecx, edx
.text:0041B26D                 and     ecx, 3
.text:0041B270                 and     eax, 3
.text:0041B273                 shl     ecx, 3
.text:0041B276                 and     edx, 0FFFFFFFCh
.text:0041B279                 sub     [esp+1Ch+var_14], ecx
.text:0041B27D                 cmp     eax, 1
.text:0041B280                 mov     [esp+1Ch+var_18], ecx
.text:0041B284                 jz      loc_41B370
.text:0041B28A                 cmp     eax, 1
.text:0041B28D                 jb      loc_41B360
.text:0041B293                 cmp     eax, 2
.text:0041B296                 jz      loc_41B344
.text:0041B29C                 cmp     eax, 3
.text:0041B29F                 jz      loc_41B333
.text:0041B2A5
.text:0041B2A5 loc_41B2A5:                             ; CODE XREF: sub_41B250+C7↓j
.text:0041B2A5                                         ; sub_41B250+12C↓j
.text:0041B2A5                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041B2AA                 mov     eax, edi
.text:0041B2AC                 mov     ebx, [edx]
.text:0041B2AE                 shr     ebp, cl
.text:0041B2B0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041B2B5                 shl     eax, cl
.text:0041B2B7                 or      ebp, eax
.text:0041B2B9                 mov     [esi], ebp
.text:0041B2BB
.text:0041B2BB loc_41B2BB:                             ; CODE XREF: sub_41B250+11B↓j
.text:0041B2BB                 mov     ecx, [edx+4]
.text:0041B2BE                 mov     ebp, ebx
.text:0041B2C0                 mov     [esp+1Ch+var_1C], ecx
.text:0041B2C3                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041B2C8                 shr     edi, cl
.text:0041B2CA                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041B2CF                 shl     ebp, cl
.text:0041B2D1                 or      edi, ebp
.text:0041B2D3                 mov     [esi+4], edi
.text:0041B2D6
.text:0041B2D6 loc_41B2D6:                             ; CODE XREF: sub_41B250+F2↓j
.text:0041B2D6                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041B2DB                 mov     edi, [esp+1Ch+var_1C]
.text:0041B2DE                 mov     ebp, [edx+8]
.text:0041B2E1                 shr     ebx, cl
.text:0041B2E3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041B2E8                 shl     edi, cl
.text:0041B2EA                 or      ebx, edi
.text:0041B2EC                 mov     [esi+8], ebx
.text:0041B2EF
.text:0041B2EF loc_41B2EF:                             ; CODE XREF: sub_41B250+107↓j
.text:0041B2EF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041B2F4                 mov     ebx, ebp
.text:0041B2F6                 mov     edi, [edx+0Ch]
.text:0041B2F9                 add     edx, 10h
.text:0041B2FC                 shr     [esp+1Ch+var_1C], cl
.text:0041B2FF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041B304                 shl     ebx, cl
.text:0041B306                 or      [esp+1Ch+var_1C], ebx
.text:0041B309                 mov     ebx, [esp+1Ch+var_1C]
.text:0041B30C                 mov     [esi+0Ch], ebx
.text:0041B30F                 add     esi, 10h
.text:0041B312                 sub     [esp+1Ch+arg_8], 4
.text:0041B317                 jnz     short loc_41B2A5
.text:0041B319                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041B31E                 shr     ebp, cl
.text:0041B320                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041B325                 shl     edi, cl
.text:0041B327                 or      ebp, edi
.text:0041B329                 mov     [esi], ebp
.text:0041B32B                 add     esp, 0Ch
.text:0041B32E                 pop     ebx
.text:0041B32F                 pop     esi
.text:0041B330                 pop     edi
.text:0041B331                 pop     ebp
.text:0041B332                 retn
.text:0041B333 ; ---------------------------------------------------------------------------
.text:0041B333
.text:0041B333 loc_41B333:                             ; CODE XREF: sub_41B250+4F↑j
.text:0041B333                 inc     [esp+1Ch+arg_8]
.text:0041B337                 sub     esi, 8
.text:0041B33A                 mov     eax, [edx+4]
.text:0041B33D                 mov     ebx, [edx]
.text:0041B33F                 mov     [esp+1Ch+var_1C], eax
.text:0041B342                 jmp     short loc_41B2D6
.text:0041B344 ; ---------------------------------------------------------------------------
.text:0041B344
.text:0041B344 loc_41B344:                             ; CODE XREF: sub_41B250+46↑j
.text:0041B344                 add     [esp+1Ch+arg_8], 2
.text:0041B349                 sub     esi, 0Ch
.text:0041B34C                 mov     ecx, [edx]
.text:0041B34E                 mov     ebp, [edx+4]
.text:0041B351                 sub     edx, 4
.text:0041B354                 mov     [esp+1Ch+var_1C], ecx
.text:0041B357                 jmp     short loc_41B2EF
.text:0041B357 ; ---------------------------------------------------------------------------
.text:0041B359                 align 10h
.text:0041B360
.text:0041B360 loc_41B360:                             ; CODE XREF: sub_41B250+3D↑j
.text:0041B360                 mov     edi, [edx]
.text:0041B362                 sub     esi, 4
.text:0041B365                 mov     ebx, [edx+4]
.text:0041B368                 add     edx, 4
.text:0041B36B                 jmp     loc_41B2BB
.text:0041B370 ; ---------------------------------------------------------------------------
.text:0041B370
.text:0041B370 loc_41B370:                             ; CODE XREF: sub_41B250+34↑j
.text:0041B370                 dec     [esp+1Ch+arg_8]
.text:0041B374                 mov     ebp, [edx]
.text:0041B376                 mov     edi, [edx+4]
.text:0041B379                 add     edx, 8
.text:0041B37C                 jmp     loc_41B2A5
.text:0041B37C sub_41B250      endp
.text:0041B37C
.text:0041B381 ; ---------------------------------------------------------------------------
.text:0041B381                 jmp     short loc_41B390
.text:0041B381 ; ---------------------------------------------------------------------------
.text:0041B383                 align 10h
.text:0041B390
.text:0041B390 loc_41B390:                             ; CODE XREF: .text:0041B381↑j
.text:0041B390                 sub     esp, 8
.text:0041B393                 mov     ecx, [esp+0Ch]
.text:0041B397                 mov     [esp+4], esi
.text:0041B39B                 mov     esi, [esp+14h]
.text:0041B39F                 mov     [esp], ebx
.text:0041B3A2                 mov     edx, [esp+10h]
.text:0041B3A6                 mov     eax, esi
.text:0041B3A8                 and     eax, 7
.text:0041B3AB                 cmp     eax, 7          ; switch 8 cases
.text:0041B3AE                 ja      short def_41B3B0 ; jumptable 0041B3B0 default case
.text:0041B3B0                 jmp     ds:jpt_41B3B0[eax*4] ; switch jump
.text:0041B3B0 ; ---------------------------------------------------------------------------
.text:0041B3B7                 align 4
.text:0041B3B8 jpt_41B3B0      dd offset loc_41B43C    ; DATA XREF: .text:0041B3B0↑r
.text:0041B3B8                 dd offset loc_41B447    ; jump table for switch statement
.text:0041B3B8                 dd offset loc_41B3D8
.text:0041B3B8                 dd offset loc_41B453
.text:0041B3B8                 dd offset loc_41B461
.text:0041B3B8                 dd offset loc_41B46F
.text:0041B3B8                 dd offset loc_41B47D
.text:0041B3B8                 dd offset loc_41B48B
.text:0041B3D8 ; ---------------------------------------------------------------------------
.text:0041B3D8
.text:0041B3D8 loc_41B3D8:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B3D8                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B3D8                 sub     edx, 8          ; jumptable 0041B3B0 case 2
.text:0041B3DB                 sub     ecx, 4
.text:0041B3DE                 mov     eax, [edx+4]
.text:0041B3E1                 add     esi, 6
.text:0041B3E4                 lea     esi, [esi+0]
.text:0041B3EA                 lea     edi, [edi+0]
.text:0041B3F0
.text:0041B3F0 loc_41B3F0:                             ; CODE XREF: .text:0041B43A↓j
.text:0041B3F0                 mov     ebx, [edx]
.text:0041B3F2                 sub     edx, 20h ; ' '
.text:0041B3F5                 mov     [ecx], eax
.text:0041B3F7                 sub     ecx, 20h ; ' '
.text:0041B3FA                 sub     esi, 8
.text:0041B3FD                 jnz     short def_41B3B0 ; jumptable 0041B3B0 default case
.text:0041B3FF                 mov     [ecx+1Ch], ebx
.text:0041B402                 mov     ebx, [esp]
.text:0041B405                 mov     esi, [esp+4]
.text:0041B409                 add     esp, 8
.text:0041B40C                 retn
.text:0041B40C ; ---------------------------------------------------------------------------
.text:0041B40D                 align 10h
.text:0041B410
.text:0041B410 def_41B3B0:                             ; CODE XREF: .text:0041B3AE↑j
.text:0041B410                                         ; .text:0041B3FD↑j ...
.text:0041B410                 mov     eax, [edx+1Ch]  ; jumptable 0041B3B0 default case
.text:0041B413                 mov     [ecx+1Ch], ebx
.text:0041B416
.text:0041B416 loc_41B416:                             ; CODE XREF: .text:0041B445↓j
.text:0041B416                 mov     ebx, [edx+18h]
.text:0041B419                 mov     [ecx+18h], eax
.text:0041B41C
.text:0041B41C loc_41B41C:                             ; CODE XREF: .text:0041B495↓j
.text:0041B41C                 mov     eax, [edx+14h]
.text:0041B41F                 mov     [ecx+14h], ebx
.text:0041B422
.text:0041B422 loc_41B422:                             ; CODE XREF: .text:0041B489↓j
.text:0041B422                 mov     ebx, [edx+10h]
.text:0041B425                 mov     [ecx+10h], eax
.text:0041B428
.text:0041B428 loc_41B428:                             ; CODE XREF: .text:0041B47B↓j
.text:0041B428                 mov     eax, [edx+0Ch]
.text:0041B42B                 mov     [ecx+0Ch], ebx
.text:0041B42E
.text:0041B42E loc_41B42E:                             ; CODE XREF: .text:0041B46D↓j
.text:0041B42E                 mov     ebx, [edx+8]
.text:0041B431                 mov     [ecx+8], eax
.text:0041B434
.text:0041B434 loc_41B434:                             ; CODE XREF: .text:0041B45F↓j
.text:0041B434                 mov     eax, [edx+4]
.text:0041B437                 mov     [ecx+4], ebx
.text:0041B43A                 jmp     short loc_41B3F0
.text:0041B43C ; ---------------------------------------------------------------------------
.text:0041B43C
.text:0041B43C loc_41B43C:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B43C                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B43C                 sub     edx, 20h ; ' '  ; jumptable 0041B3B0 case 0
.text:0041B43F                 sub     ecx, 1Ch
.text:0041B442                 mov     eax, [edx+1Ch]
.text:0041B445                 jmp     short loc_41B416
.text:0041B447 ; ---------------------------------------------------------------------------
.text:0041B447
.text:0041B447 loc_41B447:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B447                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B447                 sub     edx, 24h ; '$'  ; jumptable 0041B3B0 case 1
.text:0041B44A                 sub     ecx, 20h ; ' '
.text:0041B44D                 mov     ebx, [edx+20h]
.text:0041B450                 dec     esi
.text:0041B451                 jmp     short def_41B3B0 ; jumptable 0041B3B0 default case
.text:0041B453 ; ---------------------------------------------------------------------------
.text:0041B453
.text:0041B453 loc_41B453:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B453                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B453                 sub     edx, 0Ch        ; jumptable 0041B3B0 case 3
.text:0041B456                 sub     ecx, 8
.text:0041B459                 mov     ebx, [edx+8]
.text:0041B45C                 add     esi, 5
.text:0041B45F                 jmp     short loc_41B434
.text:0041B461 ; ---------------------------------------------------------------------------
.text:0041B461
.text:0041B461 loc_41B461:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B461                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B461                 sub     edx, 10h        ; jumptable 0041B3B0 case 4
.text:0041B464                 sub     ecx, 0Ch
.text:0041B467                 mov     eax, [edx+0Ch]
.text:0041B46A                 add     esi, 4
.text:0041B46D                 jmp     short loc_41B42E
.text:0041B46F ; ---------------------------------------------------------------------------
.text:0041B46F
.text:0041B46F loc_41B46F:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B46F                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B46F                 sub     edx, 14h        ; jumptable 0041B3B0 case 5
.text:0041B472                 sub     ecx, 10h
.text:0041B475                 mov     ebx, [edx+10h]
.text:0041B478                 add     esi, 3
.text:0041B47B                 jmp     short loc_41B428
.text:0041B47D ; ---------------------------------------------------------------------------
.text:0041B47D
.text:0041B47D loc_41B47D:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B47D                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B47D                 sub     edx, 18h        ; jumptable 0041B3B0 case 6
.text:0041B480                 sub     ecx, 14h
.text:0041B483                 mov     eax, [edx+14h]
.text:0041B486                 add     esi, 2
.text:0041B489                 jmp     short loc_41B422
.text:0041B48B ; ---------------------------------------------------------------------------
.text:0041B48B
.text:0041B48B loc_41B48B:                             ; CODE XREF: .text:0041B3B0↑j
.text:0041B48B                                         ; DATA XREF: .text:jpt_41B3B0↑o
.text:0041B48B                 sub     edx, 1Ch        ; jumptable 0041B3B0 case 7
.text:0041B48E                 sub     ecx, 18h
.text:0041B491                 mov     ebx, [edx+18h]
.text:0041B494                 inc     esi
.text:0041B495                 jmp     short loc_41B41C
.text:0041B495 ; ---------------------------------------------------------------------------
.text:0041B497                 align 10h
.text:0041B4A0                 push    ebp
.text:0041B4A1                 push    edi
.text:0041B4A2                 push    esi
.text:0041B4A3                 push    ebx
.text:0041B4A4                 sub     esp, 8
.text:0041B4A7                 mov     edx, [esp+20h]
.text:0041B4AB                 mov     dword ptr [esp+4], 20h ; ' '
.text:0041B4B3                 mov     eax, [esp+24h]
.text:0041B4B7                 mov     ecx, edx
.text:0041B4B9                 and     ecx, 3
.text:0041B4BC                 and     eax, 3
.text:0041B4BF                 shl     ecx, 3
.text:0041B4C2                 sub     [esp+4], ecx
.text:0041B4C6                 and     edx, 0FFFFFFFCh
.text:0041B4C9                 add     edx, 4
.text:0041B4CC                 mov     [esp], ecx
.text:0041B4CF                 cmp     eax, 1
.text:0041B4D2                 jz      loc_41B5C8
.text:0041B4D8                 cmp     eax, 1
.text:0041B4DB                 jb      loc_41B5B5
.text:0041B4E1                 cmp     eax, 2
.text:0041B4E4                 jz      loc_41B5A0
.text:0041B4EA                 cmp     eax, 3
.text:0041B4ED                 jz      loc_41B58C
.text:0041B4F3
.text:0041B4F3 loc_41B4F3:                             ; CODE XREF: .text:0041B56C↓j
.text:0041B4F3                                         ; .text:0041B5DA↓j
.text:0041B4F3                 movzx   ecx, byte ptr [esp]
.text:0041B4F7                 mov     eax, edi
.text:0041B4F9                 mov     ebx, [esp+1Ch]
.text:0041B4FD                 mov     esi, [edx+0Ch]
.text:0041B500                 shr     eax, cl
.text:0041B502                 movzx   ecx, byte ptr [esp+4]
.text:0041B507                 shl     ebp, cl
.text:0041B509                 or      eax, ebp
.text:0041B50B                 mov     [ebx+0Ch], eax
.text:0041B50E
.text:0041B50E loc_41B50E:                             ; CODE XREF: .text:0041B5C3↓j
.text:0041B50E                 movzx   ecx, byte ptr [esp]
.text:0041B512                 mov     ebp, esi
.text:0041B514                 mov     ebx, [edx+8]
.text:0041B517                 shr     ebp, cl
.text:0041B519                 movzx   ecx, byte ptr [esp+4]
.text:0041B51E                 shl     edi, cl
.text:0041B520                 or      ebp, edi
.text:0041B522                 mov     edi, [esp+1Ch]
.text:0041B526                 mov     [edi+8], ebp
.text:0041B529
.text:0041B529 loc_41B529:                             ; CODE XREF: .text:0041B59E↓j
.text:0041B529                 movzx   ecx, byte ptr [esp]
.text:0041B52D                 mov     edi, ebx
.text:0041B52F                 mov     ebp, [edx+4]
.text:0041B532                 shr     edi, cl
.text:0041B534                 movzx   ecx, byte ptr [esp+4]
.text:0041B539                 shl     esi, cl
.text:0041B53B                 or      edi, esi
.text:0041B53D                 mov     esi, [esp+1Ch]
.text:0041B541                 mov     [esi+4], edi
.text:0041B544
.text:0041B544 loc_41B544:                             ; CODE XREF: .text:0041B5B3↓j
.text:0041B544                 movzx   ecx, byte ptr [esp]
.text:0041B548                 mov     esi, ebp
.text:0041B54A                 mov     edi, [edx]
.text:0041B54C                 sub     edx, 10h
.text:0041B54F                 shr     esi, cl
.text:0041B551                 movzx   ecx, byte ptr [esp+4]
.text:0041B556                 shl     ebx, cl
.text:0041B558                 or      esi, ebx
.text:0041B55A                 mov     ebx, [esp+1Ch]
.text:0041B55E                 mov     [ebx], esi
.text:0041B560                 sub     ebx, 10h
.text:0041B563                 sub     dword ptr [esp+24h], 4
.text:0041B568                 mov     [esp+1Ch], ebx
.text:0041B56C                 jnz     short loc_41B4F3
.text:0041B56E                 movzx   ecx, byte ptr [esp]
.text:0041B572                 mov     edx, [esp+1Ch]
.text:0041B576                 shr     edi, cl
.text:0041B578                 movzx   ecx, byte ptr [esp+4]
.text:0041B57D                 shl     ebp, cl
.text:0041B57F                 or      edi, ebp
.text:0041B581                 mov     [edx+0Ch], edi
.text:0041B584                 add     esp, 8
.text:0041B587                 pop     ebx
.text:0041B588                 pop     esi
.text:0041B589                 pop     edi
.text:0041B58A                 pop     ebp
.text:0041B58B                 retn
.text:0041B58C ; ---------------------------------------------------------------------------
.text:0041B58C
.text:0041B58C loc_41B58C:                             ; CODE XREF: .text:0041B4ED↑j
.text:0041B58C                 sub     dword ptr [esp+1Ch], 8
.text:0041B591                 sub     edx, 10h
.text:0041B594                 inc     dword ptr [esp+24h]
.text:0041B598                 mov     esi, [edx+0Ch]
.text:0041B59B                 mov     ebx, [edx+8]
.text:0041B59E                 jmp     short loc_41B529
.text:0041B5A0 ; ---------------------------------------------------------------------------
.text:0041B5A0
.text:0041B5A0 loc_41B5A0:                             ; CODE XREF: .text:0041B4E4↑j
.text:0041B5A0                 sub     dword ptr [esp+1Ch], 4
.text:0041B5A5                 sub     edx, 0Ch
.text:0041B5A8                 add     dword ptr [esp+24h], 2
.text:0041B5AD                 mov     ebx, [edx+8]
.text:0041B5B0                 mov     ebp, [edx+4]
.text:0041B5B3                 jmp     short loc_41B544
.text:0041B5B5 ; ---------------------------------------------------------------------------
.text:0041B5B5
.text:0041B5B5 loc_41B5B5:                             ; CODE XREF: .text:0041B4DB↑j
.text:0041B5B5                 sub     dword ptr [esp+1Ch], 0Ch
.text:0041B5BA                 sub     edx, 14h
.text:0041B5BD                 mov     edi, [edx+10h]
.text:0041B5C0                 mov     esi, [edx+0Ch]
.text:0041B5C3                 jmp     loc_41B50E
.text:0041B5C8 ; ---------------------------------------------------------------------------
.text:0041B5C8
.text:0041B5C8 loc_41B5C8:                             ; CODE XREF: .text:0041B4D2↑j
.text:0041B5C8                 sub     dword ptr [esp+1Ch], 10h
.text:0041B5CD                 sub     edx, 18h
.text:0041B5D0                 dec     dword ptr [esp+24h]
.text:0041B5D4                 mov     ebp, [edx+14h]
.text:0041B5D7                 mov     edi, [edx+10h]
.text:0041B5DA                 jmp     loc_41B4F3
.text:0041B5DA ; ---------------------------------------------------------------------------
.text:0041B5DF                 align 10h
.text:0041B5E0
.text:0041B5E0 ; =============== S U B R O U T I N E =======================================
.text:0041B5E0
.text:0041B5E0
.text:0041B5E0 sub_41B5E0      proc near               ; CODE XREF: .text:00418E6B↑p
.text:0041B5E0                 xor     eax, eax
.text:0041B5E2                 retn
.text:0041B5E2 sub_41B5E0      endp
.text:0041B5E2
.text:0041B5E2 ; ---------------------------------------------------------------------------
.text:0041B5E3                 align 10h
.text:0041B5F0
.text:0041B5F0 ; =============== S U B R O U T I N E =======================================
.text:0041B5F0
.text:0041B5F0
.text:0041B5F0 sub_41B5F0      proc near               ; CODE XREF: .text:00418E44↑p
.text:0041B5F0                 xor     eax, eax
.text:0041B5F2                 retn
.text:0041B5F2 sub_41B5F0      endp
.text:0041B5F2
.text:0041B5F2 ; ---------------------------------------------------------------------------
.text:0041B5F3                 align 10h
.text:0041B600
.text:0041B600 ; =============== S U B R O U T I N E =======================================
.text:0041B600
.text:0041B600
.text:0041B600 sub_41B600      proc near               ; CODE XREF: sub_418E80+28↑p
.text:0041B600                 xor     eax, eax
.text:0041B602                 retn
.text:0041B602 sub_41B600      endp
.text:0041B602
.text:0041B602 ; ---------------------------------------------------------------------------
.text:0041B603                 align 10h
.text:0041B610
.text:0041B610 ; =============== S U B R O U T I N E =======================================
.text:0041B610
.text:0041B610 ; Attributes: noreturn
.text:0041B610
.text:0041B610 sub_41B610      proc near               ; CODE XREF: .text:0041A409↑p
.text:0041B610                                         ; sub_41B610↓j
.text:0041B610                 jmp     short sub_41B610
.text:0041B610 sub_41B610      endp
.text:0041B610
.text:0041B610 ; ---------------------------------------------------------------------------
.text:0041B612                 align 10h
.text:0041B620
.text:0041B620 ; =============== S U B R O U T I N E =======================================
.text:0041B620
.text:0041B620
.text:0041B620 sub_41B620      proc near               ; CODE XREF: .text:0041A165↑p
.text:0041B620
.text:0041B620 FileHandle      = dword ptr -1Ch
.text:0041B620 dwFileOffsetLow = dword ptr -18h
.text:0041B620 dwFileOffsetHigh= dword ptr -14h
.text:0041B620 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0041B620 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0041B620 var_8           = dword ptr -8
.text:0041B620 var_4           = dword ptr -4
.text:0041B620 arg_0           = dword ptr  4
.text:0041B620
.text:0041B620                 sub     esp, 1Ch
.text:0041B623                 mov     edx, [esp+1Ch+arg_0]
.text:0041B627                 mov     [esp+1Ch+var_4], esi
.text:0041B62B                 mov     [esp+1Ch+var_8], ebx
.text:0041B62F                 mov     ebx, [edx+10h]
.text:0041B632                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041B635                 call    _get_osfhandle
.text:0041B63A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0041B63D                 mov     esi, eax
.text:0041B63F                 call    _filelengthi64
.text:0041B644                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0041B648                 cdq
.text:0041B649                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0041B64C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0041B650                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0041B658                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0041B660                 call    UnlockFile
.text:0041B665                 sub     esp, 14h
.text:0041B668                 mov     ebx, [esp+1Ch+var_8]
.text:0041B66C                 mov     esi, [esp+1Ch+var_4]
.text:0041B670                 add     esp, 1Ch
.text:0041B673                 retn
.text:0041B673 sub_41B620      endp
.text:0041B673
.text:0041B673 ; ---------------------------------------------------------------------------
.text:0041B674                 align 10h
.text:0041B680
.text:0041B680 ; =============== S U B R O U T I N E =======================================
.text:0041B680
.text:0041B680
.text:0041B680 ; int __cdecl sub_41B680(int, char *Control)
.text:0041B680 sub_41B680      proc near               ; CODE XREF: .text:0041A026↑p
.text:0041B680                                         ; .text:0041A076↑p ...
.text:0041B680
.text:0041B680 Str             = dword ptr -1Ch
.text:0041B680 Val             = dword ptr -18h
.text:0041B680 var_8           = dword ptr -8
.text:0041B680 var_4           = dword ptr -4
.text:0041B680 arg_0           = dword ptr  4
.text:0041B680 Control         = dword ptr  8
.text:0041B680
.text:0041B680                 sub     esp, 1Ch
.text:0041B683                 xor     eax, eax
.text:0041B685                 mov     edx, [esp+1Ch+Control]
.text:0041B689                 mov     [esp+1Ch+var_4], esi
.text:0041B68D                 mov     esi, [esp+1Ch+arg_0]
.text:0041B691                 mov     [esp+1Ch+var_8], ebx
.text:0041B695                 mov     ebx, [esi]
.text:0041B697                 test    ebx, ebx
.text:0041B699                 jz      short loc_41B6C8
.text:0041B69B                 movzx   eax, byte ptr [edx]
.text:0041B69E                 test    al, al
.text:0041B6A0                 jz      short loc_41B6C0
.text:0041B6A2                 cmp     byte ptr [edx+1], 0
.text:0041B6A6                 jnz     short loc_41B700
.text:0041B6A8                 movzx   ecx, byte ptr [ebx]
.text:0041B6AB                 mov     edx, ebx
.text:0041B6AD                 cmp     cl, al
.text:0041B6AF                 jz      short loc_41B6F2
.text:0041B6B1                 test    cl, cl
.text:0041B6B3                 jnz     short loc_41B6D4
.text:0041B6B5                 lea     esi, [esi+0]
.text:0041B6B9                 lea     edi, [edi+0]
.text:0041B6C0
.text:0041B6C0 loc_41B6C0:                             ; CODE XREF: sub_41B680+20↑j
.text:0041B6C0                                         ; sub_41B680+74↓j
.text:0041B6C0                 mov     dword ptr [esi], 0
.text:0041B6C6
.text:0041B6C6 loc_41B6C6:                             ; CODE XREF: sub_41B680+7C↓j
.text:0041B6C6                 mov     eax, ebx
.text:0041B6C8
.text:0041B6C8 loc_41B6C8:                             ; CODE XREF: sub_41B680+19↑j
.text:0041B6C8                 mov     ebx, [esp+1Ch+var_8]
.text:0041B6CC                 mov     esi, [esp+1Ch+var_4]
.text:0041B6D0                 add     esp, 1Ch
.text:0041B6D3                 retn
.text:0041B6D4 ; ---------------------------------------------------------------------------
.text:0041B6D4
.text:0041B6D4 loc_41B6D4:                             ; CODE XREF: sub_41B680+33↑j
.text:0041B6D4                 movsx   edx, al
.text:0041B6D7                 mov     [esp+1Ch+Val], edx ; Val
.text:0041B6DB                 lea     edx, [ebx+1]
.text:0041B6DE                 mov     [esp+1Ch+Str], edx ; Str
.text:0041B6E1                 call    strchr
.text:0041B6E6                 lea     esi, [esi+0]
.text:0041B6E9                 lea     edi, [edi+0]
.text:0041B6F0
.text:0041B6F0 loc_41B6F0:                             ; CODE XREF: sub_41B680+8C↓j
.text:0041B6F0                 mov     edx, eax
.text:0041B6F2
.text:0041B6F2 loc_41B6F2:                             ; CODE XREF: sub_41B680+2F↑j
.text:0041B6F2                 test    edx, edx
.text:0041B6F4                 jz      short loc_41B6C0
.text:0041B6F6                 mov     byte ptr [edx], 0
.text:0041B6F9                 inc     edx
.text:0041B6FA                 mov     [esi], edx
.text:0041B6FC                 jmp     short loc_41B6C6
.text:0041B6FC ; ---------------------------------------------------------------------------
.text:0041B6FE                 align 10h
.text:0041B700
.text:0041B700 loc_41B700:                             ; CODE XREF: sub_41B680+26↑j
.text:0041B700                 mov     [esp+1Ch+Val], edx ; Control
.text:0041B704                 mov     [esp+1Ch+Str], ebx ; Str
.text:0041B707                 call    strpbrk
.text:0041B70C                 jmp     short loc_41B6F0
.text:0041B70C sub_41B680      endp
.text:0041B70C
.text:0041B70C ; ---------------------------------------------------------------------------
.text:0041B70E                 align 10h
.text:0041B710 ; const char aTmpf[]
.text:0041B710 aTmpf           db 'tmpf',0             ; DATA XREF: sub_41B720+20↓o
.text:0041B715 ; const char aWBd[]
.text:0041B715 aWBd            db 'w+bD',0             ; DATA XREF: sub_41B720+5E↓o
.text:0041B71A                 align 10h
.text:0041B720
.text:0041B720 ; =============== S U B R O U T I N E =======================================
.text:0041B720
.text:0041B720
.text:0041B720 sub_41B720      proc near               ; CODE XREF: sub_41AA9F+A4↑p
.text:0041B720
.text:0041B720 FileHandle      = dword ptr -13Ch
.text:0041B720 Format          = dword ptr -138h
.text:0041B720 var_134         = dword ptr -134h
.text:0041B720 var_130         = dword ptr -130h
.text:0041B720 var_12C         = dword ptr -12Ch
.text:0041B720 Buffer          = byte ptr -11Ch
.text:0041B720 var_8           = dword ptr -8
.text:0041B720 var_4           = dword ptr -4
.text:0041B720
.text:0041B720                 sub     esp, 13Ch
.text:0041B726                 mov     [esp+13Ch+var_8], ebx
.text:0041B72D                 lea     ebx, [esp+13Ch+Buffer]
.text:0041B731                 mov     [esp+13Ch+var_4], esi
.text:0041B738                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0041B740                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0041B748                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0041B750                 mov     [esp+13Ch+Format], 104h ; int
.text:0041B758                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0041B75B                 call    sub_41B7F0
.text:0041B760                 xor     edx, edx
.text:0041B762                 test    eax, eax
.text:0041B764                 jnz     short loc_41B796
.text:0041B766                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0041B769                 mov     [esp+13Ch+Format], 0 ; int
.text:0041B771                 call    sub_41BB70
.text:0041B776                 xor     edx, edx
.text:0041B778                 mov     ebx, eax
.text:0041B77A                 test    eax, eax
.text:0041B77C                 js      short loc_41B796
.text:0041B77E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0041B786                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0041B789                 call    _fdopen
.text:0041B78E                 test    eax, eax
.text:0041B790                 mov     esi, eax
.text:0041B792                 jz      short loc_41B7AD
.text:0041B794
.text:0041B794 loc_41B794:                             ; CODE XREF: sub_41B720+95↓j
.text:0041B794                 mov     edx, esi
.text:0041B796
.text:0041B796 loc_41B796:                             ; CODE XREF: sub_41B720+44↑j
.text:0041B796                                         ; sub_41B720+5C↑j
.text:0041B796                 mov     ebx, [esp+13Ch+var_8]
.text:0041B79D                 mov     eax, edx
.text:0041B79F                 mov     esi, [esp+13Ch+var_4]
.text:0041B7A6                 add     esp, 13Ch
.text:0041B7AC                 retn
.text:0041B7AD ; ---------------------------------------------------------------------------
.text:0041B7AD
.text:0041B7AD loc_41B7AD:                             ; CODE XREF: sub_41B720+72↑j
.text:0041B7AD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0041B7B0                 call    _close_0
.text:0041B7B5                 jmp     short loc_41B794
.text:0041B7B5 sub_41B720      endp
.text:0041B7B5
.text:0041B7B5 ; ---------------------------------------------------------------------------
.text:0041B7B7                 align 10h
.text:0041B7C0 aFile           db 'file',0             ; DATA XREF: sub_41B7F0:loc_41B81C↓o
.text:0041B7C5 ; const char aSSxxxxxx[]
.text:0041B7C5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_41B7F0+9B↓o
.text:0041B7D5 ; const char aTemp[]
.text:0041B7D5 aTemp           db 'TEMP',0             ; DATA XREF: sub_41B7F0:loc_41B8D2↓o
.text:0041B7D5                                         ; sub_41B7F0:loc_41B912↓o ...
.text:0041B7DA ; const char aTmp[]
.text:0041B7DA aTmp            db '/tmp',0             ; DATA XREF: sub_41B7F0+12F↓o
.text:0041B7DA                                         ; sub_41B7F0+141↓o ...
.text:0041B7DF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_41B7F0:loc_41B990↓o
.text:0041B7E6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_41B7F0:loc_41BA20↓o
.text:0041B7EA                 align 10h
.text:0041B7F0
.text:0041B7F0 ; =============== S U B R O U T I N E =======================================
.text:0041B7F0
.text:0041B7F0
.text:0041B7F0 ; int __cdecl sub_41B7F0(char *Buffer, int, char *, char *, int)
.text:0041B7F0 sub_41B7F0      proc near               ; CODE XREF: sub_41B720+3B↑p
.text:0041B7F0
.text:0041B7F0 Str             = dword ptr -1BCh
.text:0041B7F0 Format          = dword ptr -1B8h
.text:0041B7F0 var_1B4         = dword ptr -1B4h
.text:0041B7F0 var_1B0         = dword ptr -1B0h
.text:0041B7F0 var_1AC         = dword ptr -1ACh
.text:0041B7F0 var_1A8         = dword ptr -1A8h
.text:0041B7F0 var_19C         = dword ptr -19Ch
.text:0041B7F0 var_13C         = dword ptr -13Ch
.text:0041B7F0 var_DC          = dword ptr -0DCh
.text:0041B7F0 var_7C          = dword ptr -7Ch
.text:0041B7F0 Buffer          = dword ptr  4
.text:0041B7F0 arg_4           = dword ptr  8
.text:0041B7F0 arg_8           = dword ptr  0Ch
.text:0041B7F0 arg_C           = dword ptr  10h
.text:0041B7F0 arg_10          = dword ptr  14h
.text:0041B7F0
.text:0041B7F0                 push    ebp
.text:0041B7F1                 push    edi
.text:0041B7F2                 push    esi
.text:0041B7F3                 push    ebx
.text:0041B7F4                 sub     esp, 1ACh
.text:0041B7FA                 mov     eax, [esp+1BCh+arg_C]
.text:0041B801                 mov     esi, [esp+1BCh+arg_8]
.text:0041B808                 test    eax, eax
.text:0041B80A                 jz      short loc_41B81C
.text:0041B80C                 mov     edx, [esp+1BCh+arg_C]
.text:0041B813                 cmp     byte ptr [edx], 0
.text:0041B816                 jnz     loc_41BA50
.text:0041B81C
.text:0041B81C loc_41B81C:                             ; CODE XREF: sub_41B7F0+1A↑j
.text:0041B81C                 mov     eax, offset aFile ; "file"
.text:0041B821                 mov     ebp, 4
.text:0041B826                 mov     [esp+1BCh+arg_C], eax
.text:0041B82D
.text:0041B82D loc_41B82D:                             ; CODE XREF: sub_41B7F0+274↓j
.text:0041B82D                                         ; sub_41B7F0+27F↓j
.text:0041B82D                 mov     ebx, [esp+1BCh+arg_10]
.text:0041B834                 test    ebx, ebx
.text:0041B836                 jnz     loc_41B990
.text:0041B83C
.text:0041B83C loc_41B83C:                             ; CODE XREF: sub_41B7F0+21C↓j
.text:0041B83C                                         ; sub_41B7F0+224↓j ...
.text:0041B83C                 test    esi, esi
.text:0041B83E                 jz      loc_41B8D2
.text:0041B844
.text:0041B844 loc_41B844:                             ; CODE XREF: sub_41B7F0+176↓j
.text:0041B844                                         ; sub_41B7F0+19A↓j
.text:0041B844                 mov     [esp+1BCh+Str], esi ; Str
.text:0041B847                 call    strlen
.text:0041B84C                 test    eax, eax
.text:0041B84E                 mov     edx, eax
.text:0041B850                 jz      short loc_41B860
.text:0041B852                 movzx   eax, byte ptr [eax+esi-1]
.text:0041B857                 cmp     al, 2Fh ; '/'
.text:0041B859                 jz      short loc_41B8C0
.text:0041B85B                 cmp     al, 5Ch ; '\'
.text:0041B85D                 jz      short loc_41B8C0
.text:0041B85F                 nop
.text:0041B860
.text:0041B860 loc_41B860:                             ; CODE XREF: sub_41B7F0+60↑j
.text:0041B860                                         ; sub_41B7F0+D1↓j ...
.text:0041B860                 lea     edi, [ebp+edx+8]
.text:0041B864                 cmp     [esp+1BCh+arg_4], edi
.text:0041B86B                 jb      short loc_41B8A8
.text:0041B86D                 mov     [esp+1BCh+var_1AC], ebp
.text:0041B871                 mov     ecx, [esp+1BCh+arg_C]
.text:0041B878                 mov     ebp, [esp+1BCh+Buffer]
.text:0041B87F                 mov     [esp+1BCh+var_1B0], esi
.text:0041B883                 mov     [esp+1BCh+var_1A8], ecx
.text:0041B887                 mov     [esp+1BCh+var_1B4], edx
.text:0041B88B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0041B893                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0041B896                 call    sprintf
.text:0041B89B                 xor     eax, eax
.text:0041B89D
.text:0041B89D loc_41B89D:                             ; CODE XREF: sub_41B7F0+C8↓j
.text:0041B89D                 add     esp, 1ACh
.text:0041B8A3                 pop     ebx
.text:0041B8A4                 pop     esi
.text:0041B8A5                 pop     edi
.text:0041B8A6                 pop     ebp
.text:0041B8A7                 retn
.text:0041B8A8 ; ---------------------------------------------------------------------------
.text:0041B8A8
.text:0041B8A8 loc_41B8A8:                             ; CODE XREF: sub_41B7F0+7B↑j
.text:0041B8A8                 call    _errno
.text:0041B8AD                 mov     dword ptr [eax], 16h
.text:0041B8B3
.text:0041B8B3 loc_41B8B3:                             ; CODE XREF: sub_41B7F0+187↓j
.text:0041B8B3                 mov     eax, 0FFFFFFFFh
.text:0041B8B8                 jmp     short loc_41B89D
.text:0041B8B8 ; ---------------------------------------------------------------------------
.text:0041B8BA                 align 10h
.text:0041B8C0
.text:0041B8C0 loc_41B8C0:                             ; CODE XREF: sub_41B7F0+69↑j
.text:0041B8C0                                         ; sub_41B7F0+6D↑j ...
.text:0041B8C0                 dec     edx
.text:0041B8C1                 jz      short loc_41B860
.text:0041B8C3                 movzx   eax, byte ptr [edx+esi-1]
.text:0041B8C8                 cmp     al, 2Fh ; '/'
.text:0041B8CA                 jz      short loc_41B8C0
.text:0041B8CC                 cmp     al, 5Ch ; '\'
.text:0041B8CE                 jz      short loc_41B8C0
.text:0041B8D0                 jmp     short loc_41B860
.text:0041B8D2 ; ---------------------------------------------------------------------------
.text:0041B8D2
.text:0041B8D2 loc_41B8D2:                             ; CODE XREF: sub_41B7F0+4E↑j
.text:0041B8D2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B8D9                 lea     esi, [esp+1BCh+var_13C]
.text:0041B8E0                 call    getenv
.text:0041B8E5                 mov     [esp+1BCh+Format], eax ; char *
.text:0041B8E9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041B8ED                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B8F4                 call    sub_4188B0
.text:0041B8F9                 test    eax, eax
.text:0041B8FB                 jnz     short loc_41B912
.text:0041B8FD                 mov     edi, [esp+1BCh+var_13C]
.text:0041B904                 and     edi, 0F000h
.text:0041B90A                 cmp     edi, 4000h
.text:0041B910                 jz      short loc_41B97C
.text:0041B912
.text:0041B912 loc_41B912:                             ; CODE XREF: sub_41B7F0+10B↑j
.text:0041B912                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B919                 call    getenv
.text:0041B91E                 cld
.text:0041B91F                 mov     edx, offset aTmp ; "/tmp"
.text:0041B924                 mov     esi, eax
.text:0041B926                 mov     ecx, 5
.text:0041B92B                 mov     edi, edx
.text:0041B92D                 repe cmpsb
.text:0041B92F                 jz      short loc_41B96C
.text:0041B931                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0041B939                 lea     ecx, [esp+1BCh+var_19C]
.text:0041B93D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041B941                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B948                 call    sub_4188B0
.text:0041B94D                 test    eax, eax
.text:0041B94F                 jnz     short loc_41B96C
.text:0041B951                 mov     ebx, [esp+1BCh+var_19C]
.text:0041B955                 mov     esi, offset aTmp ; "/tmp"
.text:0041B95A                 and     ebx, 0F000h
.text:0041B960                 cmp     ebx, 4000h
.text:0041B966                 jz      loc_41B844
.text:0041B96C
.text:0041B96C loc_41B96C:                             ; CODE XREF: sub_41B7F0+13F↑j
.text:0041B96C                                         ; sub_41B7F0+15F↑j
.text:0041B96C                 call    _errno
.text:0041B971                 mov     dword ptr [eax], 2
.text:0041B977                 jmp     loc_41B8B3
.text:0041B97C ; ---------------------------------------------------------------------------
.text:0041B97C
.text:0041B97C loc_41B97C:                             ; CODE XREF: sub_41B7F0+120↑j
.text:0041B97C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041B983                 call    getenv
.text:0041B988                 mov     esi, eax
.text:0041B98A                 jmp     loc_41B844
.text:0041B98A ; ---------------------------------------------------------------------------
.text:0041B98F                 align 10h
.text:0041B990
.text:0041B990 loc_41B990:                             ; CODE XREF: sub_41B7F0+46↑j
.text:0041B990                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0041B997                 call    sub_41C000
.text:0041B99C                 test    eax, eax
.text:0041B99E                 mov     ebx, eax
.text:0041B9A0                 jz      short loc_41BA20
.text:0041B9A2
.text:0041B9A2 loc_41B9A2:                             ; CODE XREF: sub_41B7F0+240↓j
.text:0041B9A2                                         ; sub_41B7F0+256↓j
.text:0041B9A2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0041B9A6                 lea     edi, [esp+1BCh+var_7C]
.text:0041B9AD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0041B9B1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B9B8                 call    sub_4188B0
.text:0041B9BD                 test    eax, eax
.text:0041B9BF                 jnz     short loc_41B9D6
.text:0041B9C1                 mov     edx, [esp+1BCh+var_7C]
.text:0041B9C8                 and     edx, 0F000h
.text:0041B9CE                 cmp     edx, 4000h
.text:0041B9D4                 jz      short loc_41BA19
.text:0041B9D6
.text:0041B9D6 loc_41B9D6:                             ; CODE XREF: sub_41B7F0+1CF↑j
.text:0041B9D6                                         ; sub_41B7F0+25C↓j
.text:0041B9D6                 test    esi, esi
.text:0041B9D8                 jz      short loc_41BA12
.text:0041B9DA                 mov     [esp+1BCh+Format], esi ; char *
.text:0041B9DE                 lea     ecx, [esp+1BCh+var_DC]
.text:0041B9E5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0041B9E9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0041B9F0                 call    sub_4188B0
.text:0041B9F5                 test    eax, eax
.text:0041B9F7                 jnz     short loc_41BA12
.text:0041B9F9                 mov     ebx, [esp+1BCh+var_DC]
.text:0041BA00                 and     ebx, 0F000h
.text:0041BA06                 cmp     ebx, 4000h
.text:0041BA0C                 jz      loc_41B83C
.text:0041BA12
.text:0041BA12 loc_41BA12:                             ; CODE XREF: sub_41B7F0+1E8↑j
.text:0041BA12                                         ; sub_41B7F0+207↑j
.text:0041BA12                 xor     esi, esi
.text:0041BA14                 jmp     loc_41B83C
.text:0041BA19 ; ---------------------------------------------------------------------------
.text:0041BA19
.text:0041BA19 loc_41BA19:                             ; CODE XREF: sub_41B7F0+1E4↑j
.text:0041BA19                 mov     esi, ebx
.text:0041BA1B                 jmp     loc_41B83C
.text:0041BA20 ; ---------------------------------------------------------------------------
.text:0041BA20
.text:0041BA20 loc_41BA20:                             ; CODE XREF: sub_41B7F0+1B0↑j
.text:0041BA20                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0041BA27                 call    sub_41C000
.text:0041BA2C                 test    eax, eax
.text:0041BA2E                 mov     ebx, eax
.text:0041BA30                 jnz     loc_41B9A2
.text:0041BA36                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0041BA3D                 call    sub_41C000
.text:0041BA42                 test    eax, eax
.text:0041BA44                 mov     ebx, eax
.text:0041BA46                 jnz     loc_41B9A2
.text:0041BA4C                 jmp     short loc_41B9D6
.text:0041BA4C ; ---------------------------------------------------------------------------
.text:0041BA4E                 align 10h
.text:0041BA50
.text:0041BA50 loc_41BA50:                             ; CODE XREF: sub_41B7F0+26↑j
.text:0041BA50                 mov     ecx, [esp+1BCh+arg_C]
.text:0041BA57                 mov     [esp+1BCh+Str], ecx ; Str
.text:0041BA5A                 call    strlen
.text:0041BA5F                 cmp     eax, 5
.text:0041BA62                 mov     ebp, eax
.text:0041BA64                 jbe     loc_41B82D
.text:0041BA6A                 mov     ebp, 5
.text:0041BA6F                 jmp     loc_41B82D
.text:0041BA6F sub_41B7F0      endp
.text:0041BA6F
.text:0041BA6F ; ---------------------------------------------------------------------------
.text:0041BA74                 align 10h
.text:0041BA80 byte_41BA80     db 61h                  ; DATA XREF: sub_41BB70+DC↓r
.text:0041BA80                                         ; sub_41BB70+122↓r ...
.text:0041BA81 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041BABF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_41BB70+39↓o
.text:0041BAC6                 align 20h
.text:0041BAE0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0041BAE0                                         ; DATA XREF: sub_41BB70:loc_41BDE8↓o
.text:0041BAFF                 align 10h
.text:0041BB00 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0041BB00                                         ; DATA XREF: sub_41BB70+405↓o
.text:0041BB2B                 align 20h
.text:0041BB40 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0041BB40                                         ; DATA XREF: sub_41BB70+40D↓o
.text:0041BB63                 align 10h
.text:0041BB70
.text:0041BB70 ; =============== S U B R O U T I N E =======================================
.text:0041BB70
.text:0041BB70
.text:0041BB70 ; int __cdecl sub_41BB70(char *FileName, int)
.text:0041BB70 sub_41BB70      proc near               ; CODE XREF: sub_41B720+51↑p
.text:0041BB70
.text:0041BB70 Str             = dword ptr -9Ch
.text:0041BB70 OpenFlag        = dword ptr -98h
.text:0041BB70 var_94          = dword ptr -94h
.text:0041BB70 var_90          = dword ptr -90h
.text:0041BB70 var_8C          = dword ptr -8Ch
.text:0041BB70 var_88          = dword ptr -88h
.text:0041BB70 var_84          = dword ptr -84h
.text:0041BB70 var_80          = dword ptr -80h
.text:0041BB70 var_7C          = dword ptr -7Ch
.text:0041BB70 FileName        = dword ptr  4
.text:0041BB70 arg_4           = dword ptr  8
.text:0041BB70
.text:0041BB70                 push    ebp
.text:0041BB71                 push    edi
.text:0041BB72                 push    esi
.text:0041BB73                 push    ebx
.text:0041BB74                 sub     esp, 8Ch
.text:0041BB7A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0041BB82                 call    _errno
.text:0041BB87                 mov     edx, [eax]
.text:0041BB89                 mov     [esp+9Ch+var_8C], edx
.text:0041BB8D                 mov     edx, [esp+9Ch+FileName]
.text:0041BB94                 mov     [esp+9Ch+Str], edx ; Str
.text:0041BB97                 call    strlen
.text:0041BB9C                 cmp     eax, 5
.text:0041BB9F                 jle     short loc_41BBBD
.text:0041BBA1                 cld
.text:0041BBA2                 mov     ecx, [esp+9Ch+FileName]
.text:0041BBA9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041BBAE                 lea     esi, [eax+ecx-6]
.text:0041BBB2                 mov     ecx, 7
.text:0041BBB7                 mov     ebp, esi
.text:0041BBB9                 repe cmpsb
.text:0041BBBB                 jz      short loc_41BBD8
.text:0041BBBD
.text:0041BBBD loc_41BBBD:                             ; CODE XREF: sub_41BB70+2F↑j
.text:0041BBBD                 call    _errno
.text:0041BBC2                 mov     dword ptr [eax], 16h
.text:0041BBC8
.text:0041BBC8 loc_41BBC8:                             ; CODE XREF: sub_41BB70+295↓j
.text:0041BBC8                                         ; sub_41BB70+2D8↓j ...
.text:0041BBC8                 mov     eax, 0FFFFFFFFh
.text:0041BBCD
.text:0041BBCD loc_41BBCD:                             ; CODE XREF: sub_41BB70+2EF↓j
.text:0041BBCD                                         ; sub_41BB70+332↓j
.text:0041BBCD                 add     esp, 8Ch
.text:0041BBD3                 pop     ebx
.text:0041BBD4                 pop     esi
.text:0041BBD5                 pop     edi
.text:0041BBD6                 pop     ebp
.text:0041BBD7                 retn
.text:0041BBD8 ; ---------------------------------------------------------------------------
.text:0041BBD8
.text:0041BBD8 loc_41BBD8:                             ; CODE XREF: sub_41BB70+4B↑j
.text:0041BBD8                 mov     ecx, ds:dword_420744
.text:0041BBDE                 mov     edi, ds:dword_420740
.text:0041BBE4                 mov     eax, ecx
.text:0041BBE6                 or      eax, edi
.text:0041BBE8                 jz      loc_41BF23
.text:0041BBEE
.text:0041BBEE loc_41BBEE:                             ; CODE XREF: sub_41BB70+3F8↓j
.text:0041BBEE                 rdtsc
.text:0041BBF0                 mov     edi, edx
.text:0041BBF2                 mov     esi, eax
.text:0041BBF4                 call    _getpid
.text:0041BBF9                 mov     ebx, eax
.text:0041BBFB                 mov     edx, esi
.text:0041BBFD                 sar     ebx, 1Fh
.text:0041BC00                 xor     edx, eax
.text:0041BC02                 mov     ecx, edi
.text:0041BC04                 xor     ecx, ebx
.text:0041BC06                 mov     ebx, edx
.text:0041BC08                 mov     esi, ecx
.text:0041BC0A                 add     ebx, ds:dword_420740
.text:0041BC10                 adc     esi, ds:dword_420744
.text:0041BC16                 xor     edi, edi
.text:0041BC18                 mov     ds:dword_420740, ebx
.text:0041BC1E                 mov     ds:dword_420744, esi
.text:0041BC24                 lea     esi, [esi+0]
.text:0041BC2A                 lea     edi, [edi+0]
.text:0041BC30
.text:0041BC30 loc_41BC30:                             ; CODE XREF: sub_41BB70+2C7↓j
.text:0041BC30                 mov     [esp+9Ch+Str], ebx
.text:0041BC33                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BC37                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BC3F                 mov     [esp+9Ch+var_90], 0
.text:0041BC47                 call    sub_41D750
.text:0041BC4C                 movzx   ecx, ds:byte_41BA80[eax]
.text:0041BC53                 mov     [ebp+0], cl
.text:0041BC56                 mov     [esp+9Ch+Str], ebx
.text:0041BC59                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BC5D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BC65                 mov     [esp+9Ch+var_90], 0
.text:0041BC6D                 call    sub_41D8D0
.text:0041BC72                 mov     [esp+9Ch+Str], eax
.text:0041BC75                 mov     ebx, eax
.text:0041BC77                 mov     esi, edx
.text:0041BC79                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BC81                 mov     [esp+9Ch+var_90], 0
.text:0041BC89                 mov     [esp+9Ch+OpenFlag], edx
.text:0041BC8D                 call    sub_41D750
.text:0041BC92                 movzx   edx, ds:byte_41BA80[eax]
.text:0041BC99                 mov     [ebp+1], dl
.text:0041BC9C                 mov     [esp+9Ch+Str], ebx
.text:0041BC9F                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BCA3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BCAB                 mov     [esp+9Ch+var_90], 0
.text:0041BCB3                 call    sub_41D8D0
.text:0041BCB8                 mov     [esp+9Ch+Str], eax
.text:0041BCBB                 mov     ebx, eax
.text:0041BCBD                 mov     esi, edx
.text:0041BCBF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BCC7                 mov     [esp+9Ch+var_90], 0
.text:0041BCCF                 mov     [esp+9Ch+OpenFlag], edx
.text:0041BCD3                 call    sub_41D750
.text:0041BCD8                 movzx   ecx, ds:byte_41BA80[eax]
.text:0041BCDF                 mov     [ebp+2], cl
.text:0041BCE2                 mov     [esp+9Ch+Str], ebx
.text:0041BCE5                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BCE9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BCF1                 mov     [esp+9Ch+var_90], 0
.text:0041BCF9                 call    sub_41D8D0
.text:0041BCFE                 mov     [esp+9Ch+Str], eax
.text:0041BD01                 mov     ebx, eax
.text:0041BD03                 mov     esi, edx
.text:0041BD05                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BD0D                 mov     [esp+9Ch+var_90], 0
.text:0041BD15                 mov     [esp+9Ch+OpenFlag], edx
.text:0041BD19                 call    sub_41D750
.text:0041BD1E                 movzx   edx, ds:byte_41BA80[eax]
.text:0041BD25                 mov     [ebp+3], dl
.text:0041BD28                 mov     [esp+9Ch+Str], ebx
.text:0041BD2B                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BD2F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BD37                 mov     [esp+9Ch+var_90], 0
.text:0041BD3F                 call    sub_41D8D0
.text:0041BD44                 mov     [esp+9Ch+Str], eax
.text:0041BD47                 mov     ebx, eax
.text:0041BD49                 mov     esi, edx
.text:0041BD4B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BD53                 mov     [esp+9Ch+var_90], 0
.text:0041BD5B                 mov     [esp+9Ch+OpenFlag], edx
.text:0041BD5F                 call    sub_41D750
.text:0041BD64                 movzx   ecx, ds:byte_41BA80[eax]
.text:0041BD6B                 mov     [ebp+4], cl
.text:0041BD6E                 mov     [esp+9Ch+Str], ebx
.text:0041BD71                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BD79                 mov     [esp+9Ch+var_90], 0
.text:0041BD81                 mov     [esp+9Ch+OpenFlag], esi
.text:0041BD85                 call    sub_41D8D0
.text:0041BD8A                 mov     [esp+9Ch+Str], eax
.text:0041BD8D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041BD95                 mov     [esp+9Ch+var_90], 0
.text:0041BD9D                 mov     [esp+9Ch+OpenFlag], edx
.text:0041BDA1                 call    sub_41D750
.text:0041BDA6                 movzx   ebx, ds:byte_41BA80[eax]
.text:0041BDAD                 mov     [ebp+5], bl
.text:0041BDB0                 cmp     [esp+9Ch+arg_4], 1
.text:0041BDB8                 jz      loc_41BF07
.text:0041BDBE                 cmp     [esp+9Ch+arg_4], 1
.text:0041BDC6                 jle     loc_41BED0
.text:0041BDCC                 cmp     [esp+9Ch+arg_4], 2
.text:0041BDD4                 jz      loc_41BEA7
.text:0041BDDA                 cmp     [esp+9Ch+arg_4], 3
.text:0041BDE2                 jz      loc_41BE64
.text:0041BDE8
.text:0041BDE8 loc_41BDE8:                             ; CODE XREF: sub_41BB70+369↓j
.text:0041BDE8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041BDED                 test    ebx, ebx
.text:0041BDEF                 jnz     loc_41BF6D
.text:0041BDF5
.text:0041BDF5 loc_41BDF5:                             ; CODE XREF: sub_41BB70+354↓j
.text:0041BDF5                 mov     eax, [esp+9Ch+var_88]
.text:0041BDF9                 test    eax, eax
.text:0041BDFB                 jns     short loc_41BE50
.text:0041BDFD                 call    _errno
.text:0041BE02                 cmp     dword ptr [eax], 11h
.text:0041BE05                 jnz     loc_41BBC8
.text:0041BE0B
.text:0041BE0B loc_41BE0B:                             ; CODE XREF: sub_41BB70+315↓j
.text:0041BE0B                 mov     edx, ds:dword_420740
.text:0041BE11                 mov     ecx, ds:dword_420744
.text:0041BE17                 add     edx, 1E61h
.text:0041BE1D                 adc     ecx, 0
.text:0041BE20                 mov     ebx, edx
.text:0041BE22                 inc     edi
.text:0041BE23                 mov     ds:dword_420740, edx
.text:0041BE29                 cmp     edi, 3A2F8h
.text:0041BE2F                 mov     esi, ecx
.text:0041BE31                 mov     ds:dword_420744, ecx
.text:0041BE37                 jb      loc_41BC30
.text:0041BE3D                 call    _errno
.text:0041BE42                 mov     dword ptr [eax], 11h
.text:0041BE48                 jmp     loc_41BBC8
.text:0041BE48 ; ---------------------------------------------------------------------------
.text:0041BE4D                 align 10h
.text:0041BE50
.text:0041BE50 loc_41BE50:                             ; CODE XREF: sub_41BB70+28B↑j
.text:0041BE50                 call    _errno
.text:0041BE55                 mov     esi, [esp+9Ch+var_8C]
.text:0041BE59                 mov     [eax], esi
.text:0041BE5B                 mov     eax, [esp+9Ch+var_88]
.text:0041BE5F                 jmp     loc_41BBCD
.text:0041BE64 ; ---------------------------------------------------------------------------
.text:0041BE64
.text:0041BE64 loc_41BE64:                             ; CODE XREF: sub_41BB70+272↑j
.text:0041BE64                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041BE6B                 mov     ecx, [esp+9Ch+FileName]
.text:0041BE72                 lea     esi, [esp+9Ch+var_7C]
.text:0041BE76                 mov     [esp+9Ch+var_94], esi ; int
.text:0041BE7A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041BE7E                 call    sub_4168E0
.text:0041BE83                 test    eax, eax
.text:0041BE85                 jns     short loc_41BE0B
.text:0041BE87                 call    _errno
.text:0041BE8C                 cmp     dword ptr [eax], 2
.text:0041BE8F                 jnz     loc_41BBC8
.text:0041BE95                 call    _errno
.text:0041BE9A                 mov     ebx, [esp+9Ch+var_8C]
.text:0041BE9E                 mov     [eax], ebx
.text:0041BEA0                 xor     eax, eax
.text:0041BEA2                 jmp     loc_41BBCD
.text:0041BEA7 ; ---------------------------------------------------------------------------
.text:0041BEA7
.text:0041BEA7 loc_41BEA7:                             ; CODE XREF: sub_41BB70+264↑j
.text:0041BEA7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041BEAF                 mov     edx, [esp+9Ch+FileName]
.text:0041BEB6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0041BEB9                 call    sub_416930
.text:0041BEBE                 mov     esi, esi
.text:0041BEC0
.text:0041BEC0 loc_41BEC0:                             ; CODE XREF: sub_41BB70+395↓j
.text:0041BEC0                 mov     [esp+9Ch+var_88], eax
.text:0041BEC4                 jmp     loc_41BDF5
.text:0041BEC4 ; ---------------------------------------------------------------------------
.text:0041BEC9                 align 10h
.text:0041BED0
.text:0041BED0 loc_41BED0:                             ; CODE XREF: sub_41BB70+256↑j
.text:0041BED0                 mov     eax, [esp+9Ch+arg_4]
.text:0041BED7                 test    eax, eax
.text:0041BED9                 jnz     loc_41BDE8
.text:0041BEDF                 mov     [esp+9Ch+var_94], 180h
.text:0041BEE7                 mov     esi, [esp+9Ch+FileName]
.text:0041BEEE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0041BEF6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0041BEF9                 lea     esi, [esi+0]
.text:0041BF00
.text:0041BF00 loc_41BF00:                             ; CODE XREF: sub_41BB70+3B1↓j
.text:0041BF00                 call    _open_0
.text:0041BF05                 jmp     short loc_41BEC0
.text:0041BF07 ; ---------------------------------------------------------------------------
.text:0041BF07
.text:0041BF07 loc_41BF07:                             ; CODE XREF: sub_41BB70+248↑j
.text:0041BF07                 mov     [esp+9Ch+var_94], 180h
.text:0041BF0F                 mov     ebx, [esp+9Ch+FileName]
.text:0041BF16                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0041BF1E                 mov     [esp+9Ch+Str], ebx
.text:0041BF21                 jmp     short loc_41BF00
.text:0041BF23 ; ---------------------------------------------------------------------------
.text:0041BF23
.text:0041BF23 loc_41BF23:                             ; CODE XREF: sub_41BB70+78↑j
.text:0041BF23                 mov     [esp+9Ch+OpenFlag], 0
.text:0041BF2B                 lea     ebx, [esp+9Ch+var_84]
.text:0041BF2F                 mov     [esp+9Ch+Str], ebx
.text:0041BF32                 call    sub_41BFA0
.text:0041BF37                 mov     edi, [esp+9Ch+var_80]
.text:0041BF3B                 mov     edx, [esp+9Ch+var_84]
.text:0041BF3F                 mov     ecx, edi
.text:0041BF41                 mov     ebx, edi
.text:0041BF43                 shl     ecx, 10h
.text:0041BF46                 sar     ebx, 1Fh
.text:0041BF49                 shld    ebx, edi, 10h
.text:0041BF4D                 mov     esi, edx
.text:0041BF4F                 mov     edi, edx
.text:0041BF51                 mov     edx, ecx
.text:0041BF53                 sar     edi, 1Fh
.text:0041BF56                 xor     edx, esi
.text:0041BF58                 mov     ds:dword_420740, edx
.text:0041BF5E                 mov     esi, ebx
.text:0041BF60                 xor     esi, edi
.text:0041BF62                 mov     ds:dword_420744, esi
.text:0041BF68                 jmp     loc_41BBEE
.text:0041BF6D ; ---------------------------------------------------------------------------
.text:0041BF6D
.text:0041BF6D loc_41BF6D:                             ; CODE XREF: sub_41BB70+27F↑j
.text:0041BF6D                 mov     [esp+9Ch+var_94], 151h
.text:0041BF75                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0041BF7D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0041BF84                 call    _assert
.text:0041BF84 sub_41BB70      endp
.text:0041BF84
.text:0041BF84 ; ---------------------------------------------------------------------------
.text:0041BF89                 align 20h
.text:0041BFA0
.text:0041BFA0 ; =============== S U B R O U T I N E =======================================
.text:0041BFA0
.text:0041BFA0
.text:0041BFA0 sub_41BFA0      proc near               ; CODE XREF: sub_41BB70+3C2↑p
.text:0041BFA0
.text:0041BFA0 var_1C          = dword ptr -1Ch
.text:0041BFA0 var_18          = dword ptr -18h
.text:0041BFA0 var_C           = dword ptr -0Ch
.text:0041BFA0 var_8           = dword ptr -8
.text:0041BFA0 var_4           = dword ptr -4
.text:0041BFA0 arg_0           = dword ptr  4
.text:0041BFA0 arg_4           = dword ptr  8
.text:0041BFA0
.text:0041BFA0                 sub     esp, 1Ch
.text:0041BFA3                 mov     edx, [esp+1Ch+arg_4]
.text:0041BFA7                 mov     [esp+1Ch+var_4], ebx
.text:0041BFAB                 mov     ebx, [esp+1Ch+arg_0]
.text:0041BFAF                 mov     [esp+1Ch+var_18], edx
.text:0041BFB3                 lea     edx, [esp+1Ch+var_C]
.text:0041BFB7                 mov     [esp+1Ch+var_1C], edx
.text:0041BFBA                 call    sub_41C020
.text:0041BFBF                 test    eax, eax
.text:0041BFC1                 mov     edx, 0FFFFFFFFh
.text:0041BFC6                 jnz     short loc_41BFEA
.text:0041BFC8                 mov     ecx, [esp+1Ch+var_C]
.text:0041BFCC                 mov     edx, 10624DD3h
.text:0041BFD1                 mov     [ebx], ecx
.text:0041BFD3                 mov     ecx, [esp+1Ch+var_8]
.text:0041BFD7                 mov     eax, ecx
.text:0041BFD9                 imul    edx
.text:0041BFDB                 mov     eax, ecx
.text:0041BFDD                 sar     eax, 1Fh
.text:0041BFE0                 sar     edx, 6
.text:0041BFE3                 sub     edx, eax
.text:0041BFE5                 mov     [ebx+4], edx
.text:0041BFE8                 xor     edx, edx
.text:0041BFEA
.text:0041BFEA loc_41BFEA:                             ; CODE XREF: sub_41BFA0+26↑j
.text:0041BFEA                 mov     ebx, [esp+1Ch+var_4]
.text:0041BFEE                 mov     eax, edx
.text:0041BFF0                 add     esp, 1Ch
.text:0041BFF3                 retn
.text:0041BFF3 sub_41BFA0      endp
.text:0041BFF3
.text:0041BFF3 ; ---------------------------------------------------------------------------
.text:0041BFF4                 align 10h
.text:0041C000
.text:0041C000 ; =============== S U B R O U T I N E =======================================
.text:0041C000
.text:0041C000
.text:0041C000 sub_41C000      proc near               ; CODE XREF: sub_41B7F0+1A7↑p
.text:0041C000                                         ; sub_41B7F0+237↑p ...
.text:0041C000                 mov     edx, ds:dword_420670
.text:0041C006                 test    edx, edx
.text:0041C008                 jnz     short loc_41C010
.text:0041C00A                 jmp     getenv
.text:0041C00A ; ---------------------------------------------------------------------------
.text:0041C00F                 align 10h
.text:0041C010
.text:0041C010 loc_41C010:                             ; CODE XREF: sub_41C000+8↑j
.text:0041C010                 xor     eax, eax
.text:0041C012                 retn
.text:0041C012 sub_41C000      endp
.text:0041C012
.text:0041C012 ; ---------------------------------------------------------------------------
.text:0041C013                 align 10h
.text:0041C020
.text:0041C020 ; =============== S U B R O U T I N E =======================================
.text:0041C020
.text:0041C020
.text:0041C020 sub_41C020      proc near               ; CODE XREF: sub_41BFA0+1A↑p
.text:0041C020
.text:0041C020 lpTimeZoneInformation= dword ptr -0DCh
.text:0041C020 var_D8          = dword ptr -0D8h
.text:0041C020 var_D4          = dword ptr -0D4h
.text:0041C020 var_D0          = dword ptr -0D0h
.text:0041C020 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0041C020 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0041C020 arg_0           = dword ptr  4
.text:0041C020 arg_4           = dword ptr  8
.text:0041C020
.text:0041C020                 push    edi
.text:0041C021                 push    esi
.text:0041C022                 push    ebx
.text:0041C023                 sub     esp, 0D0h
.text:0041C029                 mov     ebx, [esp+0DCh+arg_4]
.text:0041C030                 mov     edi, [esp+0DCh+arg_0]
.text:0041C037                 test    ebx, ebx
.text:0041C039                 jz      short loc_41C064
.text:0041C03B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0041C03F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0041C042                 call    GetTimeZoneInformation
.text:0041C047                 sub     esp, 4
.text:0041C04A                 cmp     eax, 0FFFFFFFFh
.text:0041C04D                 jz      loc_41C0E5
.text:0041C053                 xor     ecx, ecx
.text:0041C055                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0041C059                 cmp     eax, 2
.text:0041C05C                 setz    cl
.text:0041C05F                 mov     [ebx], esi
.text:0041C061                 mov     [ebx+4], ecx
.text:0041C064
.text:0041C064 loc_41C064:                             ; CODE XREF: sub_41C020+19↑j
.text:0041C064                                         ; sub_41C020+E0↓j
.text:0041C064                 test    edi, edi
.text:0041C066                 jz      short loc_41C0D9
.text:0041C068                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0041C06C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0041C06F                 call    GetSystemTimeAsFileTime
.text:0041C074                 sub     esp, 4
.text:0041C077                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0041C07B                 mov     [esp+0DCh+var_D4], 989680h
.text:0041C083                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0041C087                 mov     [esp+0DCh+var_D0], 0
.text:0041C08F                 add     ebx, 2AC18000h
.text:0041C095                 adc     esi, 0FE624E21h
.text:0041C09B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0041C09F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041C0A2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0041C0A6                 mov     [esp+0DCh+var_D8], esi
.text:0041C0AA                 call    sub_41D8D0
.text:0041C0AF                 mov     [edi], eax
.text:0041C0B1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0041C0B4                 mov     [esp+0DCh+var_D4], 989680h
.text:0041C0BC                 mov     [esp+0DCh+var_D0], 0
.text:0041C0C4                 mov     [esp+0DCh+var_D8], esi
.text:0041C0C8                 call    sub_41D750
.text:0041C0CD                 lea     ebx, [eax+eax*4]
.text:0041C0D0                 lea     edx, [ebx+ebx*4]
.text:0041C0D3                 shl     edx, 2
.text:0041C0D6                 mov     [edi+4], edx
.text:0041C0D9
.text:0041C0D9 loc_41C0D9:                             ; CODE XREF: sub_41C020+46↑j
.text:0041C0D9                 add     esp, 0D0h
.text:0041C0DF                 xor     eax, eax
.text:0041C0E1                 pop     ebx
.text:0041C0E2                 pop     esi
.text:0041C0E3                 pop     edi
.text:0041C0E4                 retn
.text:0041C0E5 ; ---------------------------------------------------------------------------
.text:0041C0E5
.text:0041C0E5 loc_41C0E5:                             ; CODE XREF: sub_41C020+2D↑j
.text:0041C0E5                 mov     dword ptr [ebx], 0
.text:0041C0EB                 mov     dword ptr [ebx+4], 0
.text:0041C0F2                 call    sub_419250
.text:0041C0F7                 mov     esi, eax
.text:0041C0F9                 call    _errno
.text:0041C0FE                 mov     [eax], esi
.text:0041C100                 jmp     loc_41C064
.text:0041C100 sub_41C020      endp
.text:0041C100
.text:0041C100 ; ---------------------------------------------------------------------------
.text:0041C105                 align 10h
.text:0041C110
.text:0041C110 ; =============== S U B R O U T I N E =======================================
.text:0041C110
.text:0041C110 ; Attributes: thunk
.text:0041C110
.text:0041C110 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0041C110 OleInitialize   proc near               ; CODE XREF: sub_4174F0+1A↑p
.text:0041C110                                         ; sub_418450+41↑p
.text:0041C110
.text:0041C110 pvReserved      = dword ptr  4
.text:0041C110
.text:0041C110                 jmp     ds:__imp_OleInitialize
.text:0041C110 OleInitialize   endp
.text:0041C110
.text:0041C110 ; ---------------------------------------------------------------------------
.text:0041C116                 align 10h
.text:0041C120
.text:0041C120 ; =============== S U B R O U T I N E =======================================
.text:0041C120
.text:0041C120 ; Attributes: thunk
.text:0041C120
.text:0041C120 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0041C120 CoCreateInstance proc near              ; CODE XREF: sub_4174F0+52↑p
.text:0041C120                                         ; sub_418450+79↑p
.text:0041C120
.text:0041C120 rclsid          = dword ptr  4
.text:0041C120 pUnkOuter       = dword ptr  8
.text:0041C120 dwClsContext    = dword ptr  0Ch
.text:0041C120 riid            = dword ptr  10h
.text:0041C120 ppv             = dword ptr  14h
.text:0041C120
.text:0041C120                 jmp     ds:__imp_CoCreateInstance
.text:0041C120 CoCreateInstance endp
.text:0041C120
.text:0041C120 ; ---------------------------------------------------------------------------
.text:0041C126                 align 10h
.text:0041C130
.text:0041C130 ; =============== S U B R O U T I N E =======================================
.text:0041C130
.text:0041C130 ; Attributes: thunk
.text:0041C130
.text:0041C130 ; void __stdcall CoUninitialize()
.text:0041C130 CoUninitialize  proc near               ; CODE XREF: sub_4174F0+14E↑p
.text:0041C130                                         ; sub_4174F0+16D↑p ...
.text:0041C130                 jmp     ds:__imp_CoUninitialize
.text:0041C130 CoUninitialize  endp
.text:0041C130
.text:0041C130 ; ---------------------------------------------------------------------------
.text:0041C136                 align 10h
.text:0041C140                 add     al, 0BAh ; 'º'
.text:0041C142                 retf
.text:0041C142 ; ---------------------------------------------------------------------------
.text:0041C143                 db 7Eh
.text:0041C144                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0041C144                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0041C144                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0041C144                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0041C144                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0041C144                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0041C144                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0041C144                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0041C144                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0041C144                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0041C144                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0041C144                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0041C144                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0041C144                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0041C144                 dd 0C4426C00h, 330h, 0
.text:0041C278                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041C278                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0041C278                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0041C278                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0041C2C8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C2C8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0041C2C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0041C2C8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0041C2C8                 dd 0BA94B00h, 1Bh, 0
.text:0041C328                 dd 0C0h, 46000000h, 1Ch, 0
.text:0041C338                 dd 0C0h, 46000000h, 331h, 0
.text:0041C348                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C348                 dd 312h, 0
.text:0041C368                 dd 0C0h, 46000000h, 30Eh, 0
.text:0041C378                 dd 0C0h, 46000000h, 30Dh, 0
.text:0041C388                 dd 0C0h, 46000000h, 311h, 0
.text:0041C398                 dd 0C0h, 46000000h, 313h, 0
.text:0041C3A8                 dd 0C0h, 46000000h, 30Ch, 0
.text:0041C3B8                 dd 0C0h, 46000000h, 30Fh, 0
.text:0041C3C8                 dd 0C0h, 46000000h, 310h, 0
.text:0041C3D8                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C3D8                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0041C408                 dd 0C0h, 46000000h, 319h, 0
.text:0041C418                 dd 0C0h, 46000000h, 315h, 0
.text:0041C428                 dd 0C0h, 46000000h, 316h, 0
.text:0041C438                 dd 0C0h, 46000000h, 315h, 0
.text:0041C448                 dd 0C0h, 46000000h, 2E005h, 0
.text:0041C458                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041C458                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0041C458                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0041C498                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0041C498                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0041C498                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0041C498                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0041C498                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0041C498                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0041C498                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0041C498                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0041C498                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0041C498                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0041C498                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0041C498                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041C498                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0041C498                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0041C498                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0041C498                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041C498                 dd 2DE81h, 0
.text:0041C5E8                 dd 0C0h, 46000000h, 4 dup(0)
.text:0041C600                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0041C600                 dd 0
.text:0041C618                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041C618                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0041C618                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0041C618                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0041C618                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0041C618                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0041C618                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0041C618                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0041C618                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0041C618                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0041C618                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0041C618                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0041C618                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0041C618                 dd 10Fh, 0
.text:0041C728                 dd 0C0h, 46000000h, 125h, 0
.text:0041C738                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041C738                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0041C738                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0041C778                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0041C778                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C778                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0041C778                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0041C778                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0041C7D8                 dd 0C0h, 46000000h, 2E012h, 0
.text:0041C7E8                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0041C7E8                 dd 140h, 0
.text:0041C808                 dd 0C0h, 46000000h, 1, 0
.text:0041C818                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0041C818                 dd 71D3400h, 13Dh, 0
.text:0041C838                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041C838                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0041C838                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0041C838                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0041C888                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0041C888                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041C888                 dd 20405h, 0
.text:0041C8B8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0041C8C8                 dd 0C0h, 46000000h, 20406h, 0
.text:0041C8D8                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0041C8E8                 dd 0C0h, 46000000h, 110h, 0
.text:0041C8F8                 dd 0C0h, 46000000h, 10Eh, 0
.text:0041C908                 dd 0C0h, 46000000h, 123h, 0
.text:0041C918                 dd 0C0h, 46000000h, 124h, 0
.text:0041C928                 dd 0C0h, 46000000h, 13h, 0
.text:0041C938                 dd 0C0h, 46000000h, 14h, 0
.text:0041C948                 dd 0C0h, 46000000h, 15h, 0
.text:0041C958                 dd 0C0h, 46000000h, 20400h, 0
.text:0041C968                 dd 0C0h, 46000000h, 121h, 0
.text:0041C978                 dd 0C0h, 46000000h, 122h, 0
.text:0041C988                 dd 0C0h, 46000000h, 2E011h, 0
.text:0041C998                 dd 0C0h, 46000000h, 108h, 0
.text:0041C9A8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0041C9A8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041C9A8                 dd 103h, 0
.text:0041C9D8                 dd 0C0h, 46000000h, 2E000h, 0
.text:0041C9E8                 dd 0C0h, 46000000h, 106h, 0
.text:0041C9F8                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041C9F8                 dd 107h, 0
.text:0041CA18                 dd 0C0h, 46000000h, 102h, 0
.text:0041CA28                 dd 0C0h, 46000000h, 104h, 0
.text:0041CA38                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0041CA38                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0041CA38                 dd 105h, 0
.text:0041CA68                 dd 0C0h, 46000000h, 13Bh, 0
.text:0041CA78                 dd 0C0h, 46000000h, 139h, 0
.text:0041CA88                 dd 0C0h, 46000000h, 0Dh, 0
.text:0041CA98                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041CA98                 dd 101h, 0
.text:0041CAB8                 dd 0C0h, 46000000h, 100h, 0
.text:0041CAC8                 dd 0C0h, 46000000h, 20404h, 0
.text:0041CAD8                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0041CAD8                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0041CB08                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0041CB08                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0041CB08                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0041CB08                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0041CB58                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041CB58                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0041CB58                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0041CB58                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0041CB58                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0041CB58                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0041CBD8                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0041CBD8                 dd 0Ah, 0
.text:0041CBF8                 dd 0C0h, 46000000h, 2, 0
.text:0041CC08                 dd 0C0h, 46000000h, 1Dh, 0
.text:0041CC18                 dd 0C0h, 46000000h, 3, 0
.text:0041CC28                 dd 0C0h, 46000000h, 16h, 0
.text:0041CC38                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0041CC38                 dd 1608D74Fh, 0Fh, 0
.text:0041CC58                 dd 0C0h, 46000000h, 20h, 0
.text:0041CC68                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0041CC68                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0041CC68                 dd 0
.text:0041CC98                 dd 0C0h, 46000000h, 11Eh, 0
.text:0041CCA8                 dd 0C0h, 46000000h, 128h, 0
.text:0041CCB8                 dd 0C0h, 46000000h, 129h, 0
.text:0041CCC8                 dd 0C0h, 46000000h, 118h, 0
.text:0041CCD8                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0041CCD8                 dd 70474000h, 11Bh, 0
.text:0041CCF8                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0041CCF8                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041CCF8                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0041CCF8                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0041CCF8                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0041CD58                 dd 0C0h, 46000000h, 116h, 0
.text:0041CD68                 dd 0C0h, 46000000h, 113h, 0
.text:0041CD78                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0041CD78                 dd 119h, 0
.text:0041CD98                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0041CD98                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0041CD98                 dd 0
.text:0041CDC8                 dd 0C0h, 46000000h, 11Ch, 0
.text:0041CDD8                 dd 0C0h, 46000000h, 11Dh, 0
.text:0041CDE8                 dd 0C0h, 46000000h, 11Fh, 0
.text:0041CDF8                 dd 0C0h, 46000000h, 112h, 0
.text:0041CE08                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0041CE08                 dd 18E6000h, 120h, 0
.text:0041CE28                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0041CE28                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0041CE28                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0041CE68                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0041CE68                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0041CE98                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041CE98                 dd 11Ah, 0
.text:0041CEB8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0041CEB8                 dd 10Ch, 0
.text:0041CED8                 dd 0C0h, 46000000h
.text:0041CEE0 dword_41CEE0    dd 10Bh, 0              ; DATA XREF: sub_4174F0+75↑o
.text:0041CEE0                                         ; sub_418450+CB↑o
.text:0041CEE8                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0041CEE8                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0041CEE8                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0041CEE8                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0041CF38                 dd 0C0h, 46000000h, 109h, 0
.text:0041CF48                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0041CF48                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0041CF48                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0041CF48                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0041CF48                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0041CF48                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0041CF48                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0041CF48                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0041CF48                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0041CF48                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0041CF48                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0041D028                 dd 0C0h, 46000000h, 138h, 0
.text:0041D038                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0041D038                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0041D038                 dd 27h, 0
.text:0041D068                 dd 0C0h, 46000000h, 8, 0
.text:0041D078                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0041D078                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0041D078                 dd 20D00h, 0
.text:0041D0A8                 dd 0C0h, 46000000h, 20D03h, 0
.text:0041D0B8                 dd 0C0h, 46000000h, 12h, 0
.text:0041D0C8                 dd 0C0h, 46000000h, 4, 0
.text:0041D0D8                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041D0D8                 dd 7, 0
.text:0041D0F8                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041D0F8                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0041D128                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0041D128                 dd 126h, 0
.text:0041D148                 dd 0C0h, 46000000h, 10h, 0
.text:0041D158                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0041D158                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0041D188                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0041D188                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0041D188                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0041D1C8                 dd 0C0h, 46000000h, 0Bh, 0
.text:0041D1D8                 dd 0C0h, 46000000h, 0Ch, 0
.text:0041D1E8                 dd 0C0h, 46000000h, 26h, 0
.text:0041D1F8                 dd 0C0h, 46000000h, 6, 0
.text:0041D208                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0041D208                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0041D208                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0041D248                 dd 0C0h, 46000000h, 20403h, 0
.text:0041D258                 dd 0C0h, 46000000h, 20401h, 0
.text:0041D268                 dd 0C0h, 46000000h, 20412h, 0
.text:0041D278                 dd 0C0h, 46000000h, 20402h, 0
.text:0041D288                 dd 0C0h, 46000000h, 20411h, 0
.text:0041D298                 dd 0C0h, 46000000h, 2 dup(0)
.text:0041D2A8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0041D2A8                 dd 10Dh, 0
.text:0041D2C8                 dd 0C0h, 46000000h, 127h, 0
.text:0041D2D8                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0041D2D8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0041D2D8                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0041D318                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0041D318                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0041D318                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0041D358                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0041D368                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0041D378                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0041D388                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0041D398                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0041D3A8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0041D3B8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0041D3C8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0041D3D8                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0041D3E8                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0041D3F8                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0041D408                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0041D418                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0041D428                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0041D438                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0041D448                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0041D458                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0041D468                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0041D478                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0041D488                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0041D498                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0041D4A8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0041D4B8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0041D4C8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0041D4D8                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0041D4E8                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0041D4F8                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0041D508                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0041D518                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0041D528                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0041D538                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0041D548                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0041D558                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0041D568                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0041D578                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0041D588                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0041D588                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0041D5B0
.text:0041D5B0 ; =============== S U B R O U T I N E =======================================
.text:0041D5B0
.text:0041D5B0 ; Attributes: thunk
.text:0041D5B0
.text:0041D5B0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0041D5B0 mbrtowc         proc near               ; CODE XREF: sub_40C270+757↑p
.text:0041D5B0
.text:0041D5B0 DstCh           = dword ptr  4
.text:0041D5B0 SrcCh           = dword ptr  8
.text:0041D5B0 SizeInBytes     = dword ptr  0Ch
.text:0041D5B0 State           = dword ptr  10h
.text:0041D5B0
.text:0041D5B0                 jmp     ds:__imp_mbrtowc
.text:0041D5B0 mbrtowc         endp
.text:0041D5B0
.text:0041D5B0 ; ---------------------------------------------------------------------------
.text:0041D5B6                 align 10h
.text:0041D5C0
.text:0041D5C0 ; =============== S U B R O U T I N E =======================================
.text:0041D5C0
.text:0041D5C0 ; Attributes: thunk
.text:0041D5C0
.text:0041D5C0 ; wint_t __cdecl btowc(int Ch)
.text:0041D5C0 btowc           proc near               ; CODE XREF: sub_410970+1F73↑p
.text:0041D5C0                 jmp     ds:__imp_btowc
.text:0041D5C0 btowc           endp
.text:0041D5C0
.text:0041D5C0 ; ---------------------------------------------------------------------------
.text:0041D5C6                 align 10h
.text:0041D5D0
.text:0041D5D0 ; =============== S U B R O U T I N E =======================================
.text:0041D5D0
.text:0041D5D0 ; Attributes: thunk
.text:0041D5D0
.text:0041D5D0 ; wctype_t __cdecl wctype(const char *name)
.text:0041D5D0 wctype          proc near               ; CODE XREF: sub_410970+1F29↑p
.text:0041D5D0
.text:0041D5D0 name            = dword ptr  4
.text:0041D5D0
.text:0041D5D0                 jmp     ds:__imp_wctype
.text:0041D5D0 wctype          endp
.text:0041D5D0
.text:0041D5D0 ; ---------------------------------------------------------------------------
.text:0041D5D6                 align 10h
.text:0041D5E0
.text:0041D5E0 ; =============== S U B R O U T I N E =======================================
.text:0041D5E0
.text:0041D5E0 ; Attributes: bp-based frame
.text:0041D5E0
.text:0041D5E0 sub_41D5E0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0041D5E0                 push    ebp
.text:0041D5E1                 mov     ecx, offset byte_420000
.text:0041D5E6                 cmp     ecx, offset byte_420000
.text:0041D5EC                 mov     ebp, esp
.text:0041D5EE                 jnb     short loc_41D606
.text:0041D5F0
.text:0041D5F0 loc_41D5F0:                             ; CODE XREF: sub_41D5E0+24↓j
.text:0041D5F0                 mov     edx, [ecx+4]
.text:0041D5F3                 mov     eax, [ecx]
.text:0041D5F5                 add     ecx, 8
.text:0041D5F8                 add     [edx+400000h], eax
.text:0041D5FE                 cmp     ecx, offset byte_420000
.text:0041D604                 jb      short loc_41D5F0
.text:0041D606
.text:0041D606 loc_41D606:                             ; CODE XREF: sub_41D5E0+E↑j
.text:0041D606                 pop     ebp
.text:0041D607                 retn
.text:0041D607 sub_41D5E0      endp
.text:0041D607
.text:0041D607 ; ---------------------------------------------------------------------------
.text:0041D608                 align 10h
.text:0041D610
.text:0041D610 ; =============== S U B R O U T I N E =======================================
.text:0041D610
.text:0041D610 ; Attributes: bp-based frame
.text:0041D610
.text:0041D610 sub_41D610      proc near               ; CODE XREF: sub_401080+16↑p
.text:0041D610                                         ; TopLevelExceptionFilter+D7↑p
.text:0041D610                 push    ebp
.text:0041D611                 mov     ebp, esp
.text:0041D613                 fninit
.text:0041D615                 pop     ebp
.text:0041D616                 retn
.text:0041D616 sub_41D610      endp
.text:0041D616
.text:0041D616 ; ---------------------------------------------------------------------------
.text:0041D617                 align 10h
.text:0041D620
.text:0041D620 ; =============== S U B R O U T I N E =======================================
.text:0041D620
.text:0041D620 ; Attributes: bp-based frame
.text:0041D620
.text:0041D620 ; void __cdecl sub_41D620()
.text:0041D620 sub_41D620      proc near               ; DATA XREF: .text:loc_41D669↓o
.text:0041D620                                         ; sub_41D6B0:loc_41D6DE↓o
.text:0041D620                 push    ebp
.text:0041D621                 mov     ebp, esp
.text:0041D623                 sub     esp, 8
.text:0041D626                 mov     eax, off_41F0F4
.text:0041D62B                 mov     edx, [eax]
.text:0041D62D                 test    edx, edx
.text:0041D62F                 jnz     short loc_41D635
.text:0041D631
.text:0041D631 loc_41D631:                             ; CODE XREF: sub_41D620+2C↓j
.text:0041D631                 mov     esp, ebp
.text:0041D633                 pop     ebp
.text:0041D634                 retn
.text:0041D635 ; ---------------------------------------------------------------------------
.text:0041D635
.text:0041D635 loc_41D635:                             ; CODE XREF: sub_41D620+F↑j
.text:0041D635                                         ; sub_41D620+2A↓j
.text:0041D635                 call    dword ptr [eax]
.text:0041D637                 mov     edx, off_41F0F4
.text:0041D63D                 mov     ecx, [edx+4]
.text:0041D640                 lea     eax, [edx+4]
.text:0041D643                 mov     off_41F0F4, eax
.text:0041D648                 test    ecx, ecx
.text:0041D64A                 jnz     short loc_41D635
.text:0041D64C                 jmp     short loc_41D631
.text:0041D64C sub_41D620      endp
.text:0041D64C
.text:0041D64C ; ---------------------------------------------------------------------------
.text:0041D64E                 align 10h
.text:0041D650                 push    ebp
.text:0041D651                 mov     ebp, esp
.text:0041D653                 sub     esp, 8
.text:0041D656                 mov     [ebp-4], ebx
.text:0041D659                 mov     eax, ds:dword_41E540
.text:0041D65E                 cmp     eax, 0FFFFFFFFh
.text:0041D661                 jz      short loc_41D68C
.text:0041D663
.text:0041D663 loc_41D663:                             ; CODE XREF: .text:0041D696↓j
.text:0041D663                                         ; .text:0041D6A9↓j
.text:0041D663                 test    eax, eax
.text:0041D665                 mov     ebx, eax
.text:0041D667                 jnz     short loc_41D680
.text:0041D669
.text:0041D669 loc_41D669:                             ; CODE XREF: .text:0041D68A↓j
.text:0041D669                 mov     dword ptr [esp], offset sub_41D620
.text:0041D670                 call    sub_401040
.text:0041D675                 mov     ebx, [ebp-4]
.text:0041D678                 mov     esp, ebp
.text:0041D67A                 pop     ebp
.text:0041D67B                 retn
.text:0041D67B ; ---------------------------------------------------------------------------
.text:0041D67C                 align 10h
.text:0041D680
.text:0041D680 loc_41D680:                             ; CODE XREF: .text:0041D667↑j
.text:0041D680                                         ; .text:0041D688↓j
.text:0041D680                 call    ds:dword_41E540[ebx*4]
.text:0041D687                 dec     ebx
.text:0041D688                 jnz     short loc_41D680
.text:0041D68A                 jmp     short loc_41D669
.text:0041D68C ; ---------------------------------------------------------------------------
.text:0041D68C
.text:0041D68C loc_41D68C:                             ; CODE XREF: .text:0041D661↑j
.text:0041D68C                 mov     ecx, ds:dword_41E544
.text:0041D692                 xor     eax, eax
.text:0041D694                 test    ecx, ecx
.text:0041D696                 jz      short loc_41D663
.text:0041D698                 mov     edx, offset dword_41E540
.text:0041D69D                 lea     esi, [esi+0]
.text:0041D6A0
.text:0041D6A0 loc_41D6A0:                             ; CODE XREF: .text:0041D6A7↓j
.text:0041D6A0                 inc     eax
.text:0041D6A1                 mov     ecx, [edx+eax*4+4]
.text:0041D6A5                 test    ecx, ecx
.text:0041D6A7                 jnz     short loc_41D6A0
.text:0041D6A9                 jmp     short loc_41D663
.text:0041D6A9 ; ---------------------------------------------------------------------------
.text:0041D6AB                 align 10h
.text:0041D6B0
.text:0041D6B0 ; =============== S U B R O U T I N E =======================================
.text:0041D6B0
.text:0041D6B0 ; Attributes: bp-based frame
.text:0041D6B0
.text:0041D6B0 sub_41D6B0      proc near               ; CODE XREF: sub_4027B0+1E↑p
.text:0041D6B0
.text:0041D6B0 var_8           = dword ptr -8
.text:0041D6B0 var_4           = dword ptr -4
.text:0041D6B0
.text:0041D6B0                 push    ebp
.text:0041D6B1                 mov     ebp, esp
.text:0041D6B3                 sub     esp, 8
.text:0041D6B6                 mov     [ebp+var_4], ebx
.text:0041D6B9                 mov     edx, dword_41F0F0
.text:0041D6BF                 test    edx, edx
.text:0041D6C1                 jnz     short loc_41D6EA
.text:0041D6C3                 mov     eax, ds:dword_41E540
.text:0041D6C8                 mov     edx, 1
.text:0041D6CD                 mov     dword_41F0F0, edx
.text:0041D6D3                 cmp     eax, 0FFFFFFFFh
.text:0041D6D6                 jz      short loc_41D6FD
.text:0041D6D8
.text:0041D6D8 loc_41D6D8:                             ; CODE XREF: sub_41D6B0+57↓j
.text:0041D6D8                                         ; sub_41D6B0+69↓j
.text:0041D6D8                 test    eax, eax
.text:0041D6DA                 mov     ebx, eax
.text:0041D6DC                 jnz     short loc_41D6F1
.text:0041D6DE
.text:0041D6DE loc_41D6DE:                             ; CODE XREF: sub_41D6B0+4B↓j
.text:0041D6DE                 mov     [esp+8+var_8], offset sub_41D620 ; void (__cdecl *)()
.text:0041D6E5                 call    sub_401040
.text:0041D6EA
.text:0041D6EA loc_41D6EA:                             ; CODE XREF: sub_41D6B0+11↑j
.text:0041D6EA                 mov     ebx, [ebp+var_4]
.text:0041D6ED                 mov     esp, ebp
.text:0041D6EF                 pop     ebp
.text:0041D6F0                 retn
.text:0041D6F1 ; ---------------------------------------------------------------------------
.text:0041D6F1
.text:0041D6F1 loc_41D6F1:                             ; CODE XREF: sub_41D6B0+2C↑j
.text:0041D6F1                                         ; sub_41D6B0+49↓j
.text:0041D6F1                 call    ds:dword_41E540[ebx*4]
.text:0041D6F8                 dec     ebx
.text:0041D6F9                 jnz     short loc_41D6F1
.text:0041D6FB                 jmp     short loc_41D6DE
.text:0041D6FD ; ---------------------------------------------------------------------------
.text:0041D6FD
.text:0041D6FD loc_41D6FD:                             ; CODE XREF: sub_41D6B0+26↑j
.text:0041D6FD                 mov     ecx, ds:dword_41E544
.text:0041D703                 xor     eax, eax
.text:0041D705                 test    ecx, ecx
.text:0041D707                 jz      short loc_41D6D8
.text:0041D709                 mov     edx, offset dword_41E540
.text:0041D70E                 mov     esi, esi
.text:0041D710
.text:0041D710 loc_41D710:                             ; CODE XREF: sub_41D6B0+67↓j
.text:0041D710                 inc     eax
.text:0041D711                 mov     ebx, [edx+eax*4+4]
.text:0041D715                 test    ebx, ebx
.text:0041D717                 jnz     short loc_41D710
.text:0041D719                 jmp     short loc_41D6D8
.text:0041D719 sub_41D6B0      endp
.text:0041D719
.text:0041D719 ; ---------------------------------------------------------------------------
.text:0041D71B                 align 10h
.text:0041D720
.text:0041D720 ; =============== S U B R O U T I N E =======================================
.text:0041D720
.text:0041D720 ; Attributes: info_from_lumina
.text:0041D720
.text:0041D720 ; void *__cdecl _alloca(size_t Size)
.text:0041D720 __alloca        proc near               ; CODE XREF: sub_4027B0+19↑p
.text:0041D720                                         ; sub_403840+112↑p ...
.text:0041D720                 push    ecx
.text:0041D721                 mov     ecx, esp
.text:0041D723                 add     ecx, 8
.text:0041D726
.text:0041D726 loc_41D726:                             ; CODE XREF: __alloca+1B↓j
.text:0041D726                 cmp     eax, 1000h
.text:0041D72B                 jb      short loc_41D73D
.text:0041D72D                 sub     ecx, 1000h
.text:0041D733                 or      dword ptr [ecx], 0
.text:0041D736                 sub     eax, 1000h
.text:0041D73B                 jmp     short loc_41D726
.text:0041D73D ; ---------------------------------------------------------------------------
.text:0041D73D
.text:0041D73D loc_41D73D:                             ; CODE XREF: __alloca+B↑j
.text:0041D73D                 sub     ecx, eax
.text:0041D73F                 or      dword ptr [ecx], 0
.text:0041D742                 mov     eax, esp
.text:0041D744                 mov     esp, ecx
.text:0041D746                 mov     ecx, [eax]
.text:0041D748                 mov     eax, [eax+4]
.text:0041D74B                 jmp     eax
.text:0041D74B __alloca        endp
.text:0041D74B
.text:0041D74B ; ---------------------------------------------------------------------------
.text:0041D74D                 align 10h
.text:0041D750
.text:0041D750 ; =============== S U B R O U T I N E =======================================
.text:0041D750
.text:0041D750 ; Attributes: bp-based frame
.text:0041D750
.text:0041D750 sub_41D750      proc near               ; CODE XREF: sub_4075C0+40↑p
.text:0041D750                                         ; sub_407620+24↑p ...
.text:0041D750
.text:0041D750 var_34          = dword ptr -34h
.text:0041D750 var_2C          = dword ptr -2Ch
.text:0041D750 var_28          = dword ptr -28h
.text:0041D750 var_24          = dword ptr -24h
.text:0041D750 var_20          = dword ptr -20h
.text:0041D750 var_1C          = dword ptr -1Ch
.text:0041D750 var_18          = dword ptr -18h
.text:0041D750 var_14          = dword ptr -14h
.text:0041D750 arg_0           = dword ptr  8
.text:0041D750 arg_4           = dword ptr  0Ch
.text:0041D750 arg_8           = dword ptr  10h
.text:0041D750 arg_C           = dword ptr  14h
.text:0041D750
.text:0041D750                 push    ebp
.text:0041D751                 mov     ebp, esp
.text:0041D753                 push    edi
.text:0041D754                 push    esi
.text:0041D755                 push    ebx
.text:0041D756                 sub     esp, 2Ch
.text:0041D759                 mov     edx, [ebp+arg_C]
.text:0041D75C                 mov     [ebp+var_20], 0
.text:0041D763                 mov     ecx, [ebp+arg_0]
.text:0041D766                 mov     ebx, [ebp+arg_4]
.text:0041D769                 mov     [ebp+var_1C], 0
.text:0041D770                 mov     eax, [ebp+arg_8]
.text:0041D773                 test    edx, edx
.text:0041D775                 mov     [ebp+var_24], edx
.text:0041D778                 mov     edi, ebx
.text:0041D77A                 mov     esi, eax
.text:0041D77C                 mov     [ebp+var_28], ecx
.text:0041D77F                 jnz     short loc_41D7E0
.text:0041D781                 cmp     eax, ebx
.text:0041D783                 jbe     short loc_41D7C0
.text:0041D785                 mov     eax, ecx
.text:0041D787                 mov     edx, ebx
.text:0041D789                 div     esi
.text:0041D78B
.text:0041D78B loc_41D78B:                             ; CODE XREF: sub_41D750+8B↓j
.text:0041D78B                 mov     [ebp+var_28], edx
.text:0041D78E                 lea     ecx, [ebp+var_18]
.text:0041D791                 test    ecx, ecx
.text:0041D793                 jz      short loc_41D7AE
.text:0041D795                 mov     [ebp+var_1C], 0
.text:0041D79C
.text:0041D79C loc_41D79C:                             ; CODE XREF: sub_41D750+DA↓j
.text:0041D79C                 mov     eax, [ebp+var_28]
.text:0041D79F                 mov     [ebp+var_20], eax
.text:0041D7A2                 mov     edx, [ebp+var_20]
.text:0041D7A5                 mov     ecx, [ebp+var_1C]
.text:0041D7A8                 mov     [ebp+var_18], edx
.text:0041D7AB                 mov     [ebp+var_14], ecx
.text:0041D7AE
.text:0041D7AE loc_41D7AE:                             ; CODE XREF: sub_41D750+43↑j
.text:0041D7AE                                         ; sub_41D750+A7↓j ...
.text:0041D7AE                 mov     eax, [ebp+var_18]
.text:0041D7B1                 mov     edx, [ebp+var_14]
.text:0041D7B4                 add     esp, 2Ch
.text:0041D7B7                 pop     ebx
.text:0041D7B8                 pop     esi
.text:0041D7B9                 pop     edi
.text:0041D7BA                 pop     ebp
.text:0041D7BB                 retn
.text:0041D7BB ; ---------------------------------------------------------------------------
.text:0041D7BC                 align 10h
.text:0041D7C0
.text:0041D7C0 loc_41D7C0:                             ; CODE XREF: sub_41D750+33↑j
.text:0041D7C0                 test    eax, eax
.text:0041D7C2                 jnz     short loc_41D7CF
.text:0041D7C4                 mov     eax, 1
.text:0041D7C9                 xor     edx, edx
.text:0041D7CB                 div     esi
.text:0041D7CD                 mov     esi, eax
.text:0041D7CF
.text:0041D7CF loc_41D7CF:                             ; CODE XREF: sub_41D750+72↑j
.text:0041D7CF                 mov     eax, edi
.text:0041D7D1                 mov     edx, [ebp+var_24]
.text:0041D7D4                 div     esi
.text:0041D7D6                 mov     eax, [ebp+var_28]
.text:0041D7D9                 div     esi
.text:0041D7DB                 jmp     short loc_41D78B
.text:0041D7DB ; ---------------------------------------------------------------------------
.text:0041D7DD                 align 10h
.text:0041D7E0
.text:0041D7E0 loc_41D7E0:                             ; CODE XREF: sub_41D750+2F↑j
.text:0041D7E0                 cmp     [ebp+var_24], ebx
.text:0041D7E3                 jbe     short loc_41D800
.text:0041D7E5                 mov     [ebp+var_20], ecx
.text:0041D7E8
.text:0041D7E8 loc_41D7E8:                             ; CODE XREF: sub_41D750+15B↓j
.text:0041D7E8                 mov     [ebp+var_1C], edi
.text:0041D7EB                 mov     eax, [ebp+var_20]
.text:0041D7EE                 mov     edx, [ebp+var_1C]
.text:0041D7F1                 mov     [ebp+var_18], eax
.text:0041D7F4                 mov     [ebp+var_14], edx
.text:0041D7F7                 jmp     short loc_41D7AE
.text:0041D7F7 ; ---------------------------------------------------------------------------
.text:0041D7F9                 align 10h
.text:0041D800
.text:0041D800 loc_41D800:                             ; CODE XREF: sub_41D750+93↑j
.text:0041D800                 bsr     eax, [ebp+var_24]
.text:0041D804                 mov     ebx, eax
.text:0041D806                 xor     ebx, 1Fh
.text:0041D809                 jnz     short loc_41D830
.text:0041D80B                 cmp     edi, [ebp+var_24]
.text:0041D80E                 ja      short loc_41D815
.text:0041D810                 cmp     [ebp+var_28], esi
.text:0041D813                 jb      short loc_41D820
.text:0041D815
.text:0041D815 loc_41D815:                             ; CODE XREF: sub_41D750+BE↑j
.text:0041D815                 mov     edx, [ebp+var_28]
.text:0041D818                 sub     edx, esi
.text:0041D81A                 sbb     edi, [ebp+var_24]
.text:0041D81D                 mov     [ebp+var_28], edx
.text:0041D820
.text:0041D820 loc_41D820:                             ; CODE XREF: sub_41D750+C3↑j
.text:0041D820                 lea     ecx, [ebp+var_18]
.text:0041D823                 test    ecx, ecx
.text:0041D825                 jz      short loc_41D7AE
.text:0041D827                 mov     [ebp+var_1C], edi
.text:0041D82A                 jmp     loc_41D79C
.text:0041D82A ; ---------------------------------------------------------------------------
.text:0041D82F                 align 10h
.text:0041D830
.text:0041D830 loc_41D830:                             ; CODE XREF: sub_41D750+B9↑j
.text:0041D830                 mov     edx, [ebp+var_24]
.text:0041D833                 mov     eax, 20h ; ' '
.text:0041D838                 mov     cl, bl
.text:0041D83A                 sub     eax, ebx
.text:0041D83C                 mov     [ebp+var_2C], eax
.text:0041D83F                 shl     edx, cl
.text:0041D841                 mov     eax, esi
.text:0041D843                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D847                 shr     eax, cl
.text:0041D849                 mov     cl, bl
.text:0041D84B                 shl     esi, cl
.text:0041D84D                 or      edx, eax
.text:0041D84F                 mov     eax, [ebp+var_28]
.text:0041D852                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D856                 mov     [ebp+var_24], edx
.text:0041D859                 mov     edx, edi
.text:0041D85B                 shr     edx, cl
.text:0041D85D                 mov     cl, bl
.text:0041D85F                 shl     edi, cl
.text:0041D861                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D865                 shr     eax, cl
.text:0041D867                 or      edi, eax
.text:0041D869                 mov     eax, edi
.text:0041D86B                 mov     cl, bl
.text:0041D86D                 div     [ebp+var_24]
.text:0041D870                 shl     [ebp+var_28], cl
.text:0041D873                 mov     edi, edx
.text:0041D875                 mul     esi
.text:0041D877                 mov     [ebp+var_34], eax
.text:0041D87A                 cmp     edx, edi
.text:0041D87C                 ja      short loc_41D8B8
.text:0041D87E                 cmp     edx, edi
.text:0041D880                 jz      short loc_41D8B0
.text:0041D882
.text:0041D882 loc_41D882:                             ; CODE XREF: sub_41D750+166↓j
.text:0041D882                                         ; sub_41D750+173↓j
.text:0041D882                 lea     eax, [ebp+var_18]
.text:0041D885                 test    eax, eax
.text:0041D887                 jz      loc_41D7AE
.text:0041D88D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0041D891                 mov     eax, [ebp+var_28]
.text:0041D894                 sub     eax, [ebp+var_34]
.text:0041D897                 sbb     edi, edx
.text:0041D899                 mov     [ebp+var_28], eax
.text:0041D89C                 mov     edx, edi
.text:0041D89E                 shl     edx, cl
.text:0041D8A0                 mov     cl, bl
.text:0041D8A2                 shr     eax, cl
.text:0041D8A4                 or      edx, eax
.text:0041D8A6                 mov     [ebp+var_20], edx
.text:0041D8A9                 shr     edi, cl
.text:0041D8AB                 jmp     loc_41D7E8
.text:0041D8B0 ; ---------------------------------------------------------------------------
.text:0041D8B0
.text:0041D8B0 loc_41D8B0:                             ; CODE XREF: sub_41D750+130↑j
.text:0041D8B0                 mov     eax, [ebp+var_28]
.text:0041D8B3                 cmp     [ebp+var_34], eax
.text:0041D8B6                 jbe     short loc_41D882
.text:0041D8B8
.text:0041D8B8 loc_41D8B8:                             ; CODE XREF: sub_41D750+12C↑j
.text:0041D8B8                 mov     ecx, [ebp+var_34]
.text:0041D8BB                 sub     ecx, esi
.text:0041D8BD                 sbb     edx, [ebp+var_24]
.text:0041D8C0                 mov     [ebp+var_34], ecx
.text:0041D8C3                 jmp     short loc_41D882
.text:0041D8C3 sub_41D750      endp
.text:0041D8C3
.text:0041D8C3 ; ---------------------------------------------------------------------------
.text:0041D8C5                 align 10h
.text:0041D8D0
.text:0041D8D0 ; =============== S U B R O U T I N E =======================================
.text:0041D8D0
.text:0041D8D0 ; Attributes: bp-based frame
.text:0041D8D0
.text:0041D8D0 sub_41D8D0      proc near               ; CODE XREF: sub_414DB0+17E↑p
.text:0041D8D0                                         ; sub_414DB0+1F5↑p ...
.text:0041D8D0
.text:0041D8D0 var_24          = dword ptr -24h
.text:0041D8D0 var_20          = dword ptr -20h
.text:0041D8D0 var_1C          = dword ptr -1Ch
.text:0041D8D0 var_18          = dword ptr -18h
.text:0041D8D0 var_14          = dword ptr -14h
.text:0041D8D0 var_C           = dword ptr -0Ch
.text:0041D8D0 var_8           = dword ptr -8
.text:0041D8D0 var_4           = dword ptr -4
.text:0041D8D0 arg_0           = dword ptr  8
.text:0041D8D0 arg_4           = dword ptr  0Ch
.text:0041D8D0 arg_8           = dword ptr  10h
.text:0041D8D0 arg_C           = dword ptr  14h
.text:0041D8D0
.text:0041D8D0                 push    ebp
.text:0041D8D1                 mov     ebp, esp
.text:0041D8D3                 sub     esp, 28h
.text:0041D8D6                 mov     [ebp+var_C], ebx
.text:0041D8D9                 mov     edx, [ebp+arg_C]
.text:0041D8DC                 mov     ecx, [ebp+arg_0]
.text:0041D8DF                 mov     [ebp+var_8], esi
.text:0041D8E2                 mov     eax, [ebp+arg_8]
.text:0041D8E5                 test    edx, edx
.text:0041D8E7                 mov     [ebp+var_4], edi
.text:0041D8EA                 mov     ebx, [ebp+arg_4]
.text:0041D8ED                 mov     esi, eax
.text:0041D8EF                 mov     [ebp+var_18], 0
.text:0041D8F6                 mov     [ebp+var_14], 0
.text:0041D8FD                 mov     [ebp+var_1C], ecx
.text:0041D900                 jnz     short loc_41D952
.text:0041D902                 cmp     eax, ebx
.text:0041D904                 jbe     short loc_41D930
.text:0041D906                 mov     eax, ecx
.text:0041D908                 mov     edx, ebx
.text:0041D90A                 div     esi
.text:0041D90C                 mov     edi, eax
.text:0041D90E                 mov     esi, esi
.text:0041D910
.text:0041D910 loc_41D910:                             ; CODE XREF: sub_41D8D0+88↓j
.text:0041D910                                         ; sub_41D8D0+A4↓j ...
.text:0041D910                 xor     ecx, ecx
.text:0041D912
.text:0041D912 loc_41D912:                             ; CODE XREF: sub_41D8D0+80↓j
.text:0041D912                 mov     [ebp+var_18], edi
.text:0041D915                 mov     ebx, [ebp+var_C]
.text:0041D918                 mov     eax, [ebp+var_18]
.text:0041D91B                 mov     [ebp+var_14], ecx
.text:0041D91E                 mov     esi, [ebp+var_8]
.text:0041D921                 mov     edx, [ebp+var_14]
.text:0041D924                 mov     edi, [ebp+var_4]
.text:0041D927                 mov     esp, ebp
.text:0041D929                 pop     ebp
.text:0041D92A                 retn
.text:0041D92A ; ---------------------------------------------------------------------------
.text:0041D92B                 align 10h
.text:0041D930
.text:0041D930 loc_41D930:                             ; CODE XREF: sub_41D8D0+34↑j
.text:0041D930                 test    eax, eax
.text:0041D932                 jnz     short loc_41D941
.text:0041D934                 mov     eax, 1
.text:0041D939                 xor     ecx, ecx
.text:0041D93B                 xor     edx, edx
.text:0041D93D                 div     ecx
.text:0041D93F                 mov     esi, eax
.text:0041D941
.text:0041D941 loc_41D941:                             ; CODE XREF: sub_41D8D0+62↑j
.text:0041D941                 mov     eax, ebx
.text:0041D943                 xor     edx, edx
.text:0041D945                 div     esi
.text:0041D947                 mov     ecx, eax
.text:0041D949                 mov     eax, [ebp+var_1C]
.text:0041D94C                 div     esi
.text:0041D94E                 mov     edi, eax
.text:0041D950                 jmp     short loc_41D912
.text:0041D952 ; ---------------------------------------------------------------------------
.text:0041D952
.text:0041D952 loc_41D952:                             ; CODE XREF: sub_41D8D0+30↑j
.text:0041D952                 cmp     edx, ebx
.text:0041D954                 jbe     short loc_41D960
.text:0041D956                 xor     edi, edi
.text:0041D958                 jmp     short loc_41D910
.text:0041D958 ; ---------------------------------------------------------------------------
.text:0041D95A                 align 10h
.text:0041D960
.text:0041D960 loc_41D960:                             ; CODE XREF: sub_41D8D0+84↑j
.text:0041D960                 bsr     eax, edx
.text:0041D963                 xor     eax, 1Fh
.text:0041D966                 mov     [ebp+var_20], eax
.text:0041D969                 jnz     short loc_41D980
.text:0041D96B                 cmp     ebx, edx
.text:0041D96D                 ja      short loc_41D976
.text:0041D96F                 xor     edi, edi
.text:0041D971                 cmp     [ebp+var_1C], esi
.text:0041D974                 jb      short loc_41D910
.text:0041D976
.text:0041D976 loc_41D976:                             ; CODE XREF: sub_41D8D0+9D↑j
.text:0041D976                 mov     edi, 1
.text:0041D97B                 jmp     short loc_41D910
.text:0041D97B ; ---------------------------------------------------------------------------
.text:0041D97D                 align 10h
.text:0041D980
.text:0041D980 loc_41D980:                             ; CODE XREF: sub_41D8D0+99↑j
.text:0041D980                 mov     eax, [ebp+var_20]
.text:0041D983                 mov     ecx, 20h ; ' '
.text:0041D988                 sub     ecx, eax
.text:0041D98A                 mov     [ebp+var_24], ecx
.text:0041D98D                 mov     eax, esi
.text:0041D98F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D993                 shl     edx, cl
.text:0041D995                 mov     edi, edx
.text:0041D997                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D99B                 mov     edx, ebx
.text:0041D99D                 shr     eax, cl
.text:0041D99F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D9A3                 or      edi, eax
.text:0041D9A5                 mov     eax, [ebp+var_1C]
.text:0041D9A8                 shl     esi, cl
.text:0041D9AA                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D9AE                 shr     edx, cl
.text:0041D9B0                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D9B4                 shl     ebx, cl
.text:0041D9B6                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041D9BA                 shr     eax, cl
.text:0041D9BC                 or      ebx, eax
.text:0041D9BE                 movzx   ecx, byte ptr [ebp+var_20]
.text:0041D9C2                 mov     eax, ebx
.text:0041D9C4                 div     edi
.text:0041D9C6                 mov     ebx, edx
.text:0041D9C8                 mov     edi, eax
.text:0041D9CA                 shl     [ebp+var_1C], cl
.text:0041D9CD                 mul     esi
.text:0041D9CF                 cmp     edx, ebx
.text:0041D9D1                 ja      short loc_41D9E4
.text:0041D9D3                 cmp     edx, ebx
.text:0041D9D5                 jnz     loc_41D910
.text:0041D9DB                 cmp     eax, [ebp+var_1C]
.text:0041D9DE                 jbe     loc_41D910
.text:0041D9E4
.text:0041D9E4 loc_41D9E4:                             ; CODE XREF: sub_41D8D0+101↑j
.text:0041D9E4                 dec     edi
.text:0041D9E5                 jmp     loc_41D910
.text:0041D9E5 sub_41D8D0      endp
.text:0041D9E5
.text:0041D9E5 ; ---------------------------------------------------------------------------
.text:0041D9EA                 align 10h
.text:0041D9F0
.text:0041D9F0 ; =============== S U B R O U T I N E =======================================
.text:0041D9F0
.text:0041D9F0 ; Attributes: thunk
.text:0041D9F0
.text:0041D9F0 ; int __cdecl umask(int Mode)
.text:0041D9F0 _umask          proc near               ; CODE XREF: sub_4027B0+F0↑p
.text:0041D9F0
.text:0041D9F0 Mode            = dword ptr  4
.text:0041D9F0
.text:0041D9F0                 jmp     ds:__imp__umask
.text:0041D9F0 _umask          endp
.text:0041D9F0
.text:0041D9F0 ; ---------------------------------------------------------------------------
.text:0041D9F6                 align 10h
.text:0041DA00
.text:0041DA00 ; =============== S U B R O U T I N E =======================================
.text:0041DA00
.text:0041DA00 ; Attributes: thunk
.text:0041DA00
.text:0041DA00 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0041DA00 _chmod          proc near               ; CODE XREF: sub_404060+13F↑p
.text:0041DA00                                         ; sub_404B50+4A5↑p ...
.text:0041DA00
.text:0041DA00 FileName        = dword ptr  4
.text:0041DA00 AccessMode      = dword ptr  8
.text:0041DA00
.text:0041DA00                 jmp     ds:__imp__chmod
.text:0041DA00 _chmod          endp
.text:0041DA00
.text:0041DA00 ; ---------------------------------------------------------------------------
.text:0041DA06                 align 10h
.text:0041DA10
.text:0041DA10 ; =============== S U B R O U T I N E =======================================
.text:0041DA10
.text:0041DA10 ; Attributes: thunk
.text:0041DA10
.text:0041DA10 ; int __cdecl close(int FileHandle)
.text:0041DA10 _close          proc near               ; CODE XREF: sub_406B00+F4↑p
.text:0041DA10                                         ; sub_406B00+31C↑p ...
.text:0041DA10
.text:0041DA10 FileHandle      = dword ptr  4
.text:0041DA10
.text:0041DA10                 jmp     ds:__imp__close
.text:0041DA10 _close          endp
.text:0041DA10
.text:0041DA10 ; ---------------------------------------------------------------------------
.text:0041DA16                 align 10h
.text:0041DA20
.text:0041DA20 ; =============== S U B R O U T I N E =======================================
.text:0041DA20
.text:0041DA20 ; Attributes: thunk
.text:0041DA20
.text:0041DA20 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0041DA20 _read           proc near               ; CODE XREF: sub_406B00+24F↑p
.text:0041DA20
.text:0041DA20 FileHandle      = dword ptr  4
.text:0041DA20 DstBuf          = dword ptr  8
.text:0041DA20 MaxCharCount    = dword ptr  0Ch
.text:0041DA20
.text:0041DA20                 jmp     ds:__imp__read
.text:0041DA20 _read           endp
.text:0041DA20
.text:0041DA20 ; ---------------------------------------------------------------------------
.text:0041DA26                 align 10h
.text:0041DA30
.text:0041DA30 ; =============== S U B R O U T I N E =======================================
.text:0041DA30
.text:0041DA30 ; Attributes: thunk
.text:0041DA30
.text:0041DA30 ; int open(const char *FileName, int OpenFlag, ...)
.text:0041DA30 _open           proc near               ; CODE XREF: sub_406B00+4A↑p
.text:0041DA30                                         ; sub_406B00+17A↑p ...
.text:0041DA30
.text:0041DA30 FileName        = dword ptr  4
.text:0041DA30 OpenFlag        = dword ptr  8
.text:0041DA30
.text:0041DA30                 jmp     ds:__imp__open
.text:0041DA30 _open           endp
.text:0041DA30
.text:0041DA30 ; ---------------------------------------------------------------------------
.text:0041DA36                 align 10h
.text:0041DA40
.text:0041DA40 ; =============== S U B R O U T I N E =======================================
.text:0041DA40
.text:0041DA40 ; Attributes: thunk
.text:0041DA40
.text:0041DA40 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0041DA40 _write          proc near               ; CODE XREF: sub_40D6D0+2B↑p
.text:0041DA40
.text:0041DA40 FileHandle      = dword ptr  4
.text:0041DA40 Buf             = dword ptr  8
.text:0041DA40 MaxCharCount    = dword ptr  0Ch
.text:0041DA40
.text:0041DA40                 jmp     ds:__imp__write
.text:0041DA40 _write          endp
.text:0041DA40
.text:0041DA40 ; ---------------------------------------------------------------------------
.text:0041DA46                 align 10h
.text:0041DA50
.text:0041DA50 ; =============== S U B R O U T I N E =======================================
.text:0041DA50
.text:0041DA50 ; Attributes: thunk
.text:0041DA50
.text:0041DA50 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0041DA50 _stricmp        proc near               ; CODE XREF: sub_415280+46F↑p
.text:0041DA50                                         ; sub_417B30+2E↑p ...
.text:0041DA50
.text:0041DA50 String1         = dword ptr  4
.text:0041DA50 String2         = dword ptr  8
.text:0041DA50
.text:0041DA50                 jmp     ds:__imp__stricmp
.text:0041DA50 _stricmp        endp
.text:0041DA50
.text:0041DA50 ; ---------------------------------------------------------------------------
.text:0041DA56                 align 10h
.text:0041DA60
.text:0041DA60 ; =============== S U B R O U T I N E =======================================
.text:0041DA60
.text:0041DA60 ; Attributes: thunk
.text:0041DA60
.text:0041DA60 ; char *__cdecl strdup(const char *String)
.text:0041DA60 _strdup         proc near               ; CODE XREF: sub_417760+101↑p
.text:0041DA60                                         ; .text:004179CA↑p ...
.text:0041DA60
.text:0041DA60 String          = dword ptr  4
.text:0041DA60
.text:0041DA60                 jmp     ds:__imp__strdup
.text:0041DA60 _strdup         endp
.text:0041DA60
.text:0041DA60 ; ---------------------------------------------------------------------------
.text:0041DA66                 align 10h
.text:0041DA70
.text:0041DA70 ; =============== S U B R O U T I N E =======================================
.text:0041DA70
.text:0041DA70 ; Attributes: thunk
.text:0041DA70
.text:0041DA70 ; int __cdecl getpid()
.text:0041DA70 _getpid         proc near               ; CODE XREF: sub_41BB70+84↑p
.text:0041DA70                 jmp     ds:__imp__getpid
.text:0041DA70 _getpid         endp
.text:0041DA70
.text:0041DA70 ; ---------------------------------------------------------------------------
.text:0041DA76                 align 10h
.text:0041DA80                 jmp     ds:__set_app_type
.text:0041DA80 ; ---------------------------------------------------------------------------
.text:0041DA86                 align 10h
.text:0041DA90
.text:0041DA90 ; =============== S U B R O U T I N E =======================================
.text:0041DA90
.text:0041DA90 ; Attributes: thunk
.text:0041DA90
.text:0041DA90 ; void __cdecl cexit()
.text:0041DA90 _cexit          proc near               ; CODE XREF: sub_401080+EC↑p
.text:0041DA90                 jmp     ds:__imp__cexit
.text:0041DA90 _cexit          endp
.text:0041DA90
.text:0041DA90 ; ---------------------------------------------------------------------------
.text:0041DA96                 align 10h
.text:0041DAA0
.text:0041DAA0 ; =============== S U B R O U T I N E =======================================
.text:0041DAA0
.text:0041DAA0 ; Attributes: thunk
.text:0041DAA0
.text:0041DAA0 ; char ***__cdecl _p__environ()
.text:0041DAA0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0041DAA0                 jmp     ds:__imp___p__environ
.text:0041DAA0 __p__environ    endp
.text:0041DAA0
.text:0041DAA0 ; ---------------------------------------------------------------------------
.text:0041DAA6                 align 10h
.text:0041DAB0
.text:0041DAB0 ; =============== S U B R O U T I N E =======================================
.text:0041DAB0
.text:0041DAB0 ; Attributes: thunk
.text:0041DAB0
.text:0041DAB0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0041DAB0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0041DAB0                                         ; TopLevelExceptionFilter+88↑p ...
.text:0041DAB0
.text:0041DAB0 Signal          = dword ptr  4
.text:0041DAB0 Function        = dword ptr  8
.text:0041DAB0
.text:0041DAB0                 jmp     ds:__imp_signal
.text:0041DAB0 signal          endp
.text:0041DAB0
.text:0041DAB0 ; ---------------------------------------------------------------------------
.text:0041DAB6                 align 10h
.text:0041DAC0
.text:0041DAC0 ; =============== S U B R O U T I N E =======================================
.text:0041DAC0
.text:0041DAC0 ; Attributes: thunk
.text:0041DAC0
.text:0041DAC0 ; int *__cdecl _p__fmode()
.text:0041DAC0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0041DAC0                 jmp     ds:__imp___p__fmode
.text:0041DAC0 __p__fmode      endp
.text:0041DAC0
.text:0041DAC0 ; ---------------------------------------------------------------------------
.text:0041DAC6                 align 10h
.text:0041DAD0
.text:0041DAD0 ; =============== S U B R O U T I N E =======================================
.text:0041DAD0
.text:0041DAD0 ; Attributes: thunk
.text:0041DAD0
.text:0041DAD0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0041DAD0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0041DAD0                                         ; sub_401080+90↑p ...
.text:0041DAD0
.text:0041DAD0 FileHandle      = dword ptr  4
.text:0041DAD0 Mode            = dword ptr  8
.text:0041DAD0
.text:0041DAD0                 jmp     ds:__imp__setmode
.text:0041DAD0 _setmode        endp
.text:0041DAD0
.text:0041DAD0 ; ---------------------------------------------------------------------------
.text:0041DAD6                 align 10h
.text:0041DAE0
.text:0041DAE0 ; =============== S U B R O U T I N E =======================================
.text:0041DAE0
.text:0041DAE0 ; Attributes: thunk
.text:0041DAE0
.text:0041DAE0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0041DAE0                 jmp     ds:__imp___getmainargs
.text:0041DAE0 __getmainargs   endp
.text:0041DAE0
.text:0041DAE0 ; ---------------------------------------------------------------------------
.text:0041DAE6                 align 10h
.text:0041DAF0
.text:0041DAF0 ; =============== S U B R O U T I N E =======================================
.text:0041DAF0
.text:0041DAF0 ; Attributes: thunk
.text:0041DAF0
.text:0041DAF0 ; char *__cdecl getenv(const char *VarName)
.text:0041DAF0 getenv          proc near               ; CODE XREF: sub_4027B0+118↑p
.text:0041DAF0                                         ; sub_408CF0+B57↑p ...
.text:0041DAF0
.text:0041DAF0 VarName         = dword ptr  4
.text:0041DAF0
.text:0041DAF0                 jmp     ds:__imp_getenv
.text:0041DAF0 getenv          endp
.text:0041DAF0
.text:0041DAF0 ; ---------------------------------------------------------------------------
.text:0041DAF6                 align 10h
.text:0041DB00
.text:0041DB00 ; =============== S U B R O U T I N E =======================================
.text:0041DB00
.text:0041DB00 ; Attributes: thunk
.text:0041DB00
.text:0041DB00 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0041DB00 setlocale       proc near               ; CODE XREF: sub_4027B0+57↑p
.text:0041DB00
.text:0041DB00 Category        = dword ptr  4
.text:0041DB00 Locale          = dword ptr  8
.text:0041DB00
.text:0041DB00                 jmp     ds:__imp_setlocale
.text:0041DB00 setlocale       endp
.text:0041DB00
.text:0041DB00 ; ---------------------------------------------------------------------------
.text:0041DB06                 align 10h
.text:0041DB10
.text:0041DB10 ; =============== S U B R O U T I N E =======================================
.text:0041DB10
.text:0041DB10 ; Attributes: noreturn thunk
.text:0041DB10
.text:0041DB10 ; void __cdecl __noreturn abort()
.text:0041DB10 abort           proc near               ; CODE XREF: sub_403F00:def_403F8C↑p
.text:0041DB10                                         ; sub_40A3B0:loc_40A44C↑p ...
.text:0041DB10                 jmp     ds:__imp_abort
.text:0041DB10 abort           endp
.text:0041DB10
.text:0041DB10 ; ---------------------------------------------------------------------------
.text:0041DB16                 align 10h
.text:0041DB20
.text:0041DB20 ; =============== S U B R O U T I N E =======================================
.text:0041DB20
.text:0041DB20 ; Attributes: thunk
.text:0041DB20
.text:0041DB20 ; void __cdecl free(void *Block)
.text:0041DB20 free            proc near               ; CODE XREF: sub_403840+1C0↑p
.text:0041DB20                                         ; sub_403F00+C5↑j ...
.text:0041DB20
.text:0041DB20 Block           = dword ptr  4
.text:0041DB20
.text:0041DB20                 jmp     ds:__imp_free
.text:0041DB20 free            endp
.text:0041DB20
.text:0041DB20 ; ---------------------------------------------------------------------------
.text:0041DB26                 align 10h
.text:0041DB30
.text:0041DB30 ; =============== S U B R O U T I N E =======================================
.text:0041DB30
.text:0041DB30 ; Attributes: thunk
.text:0041DB30
.text:0041DB30 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0041DB30 strcmp          proc near               ; CODE XREF: sub_403840+3F2↑p
.text:0041DB30                                         ; sub_404B50+AD4↑p ...
.text:0041DB30
.text:0041DB30 Str1            = dword ptr  4
.text:0041DB30 Str2            = dword ptr  8
.text:0041DB30
.text:0041DB30                 jmp     ds:__imp_strcmp
.text:0041DB30 strcmp          endp
.text:0041DB30
.text:0041DB30 ; ---------------------------------------------------------------------------
.text:0041DB36                 align 10h
.text:0041DB40
.text:0041DB40 ; =============== S U B R O U T I N E =======================================
.text:0041DB40
.text:0041DB40 ; Attributes: thunk
.text:0041DB40
.text:0041DB40 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0041DB40 memcpy          proc near               ; CODE XREF: sub_403840+132↑p
.text:0041DB40                                         ; sub_403840+2F8↑p ...
.text:0041DB40
.text:0041DB40 Src             = dword ptr  8
.text:0041DB40 Size            = dword ptr  0Ch
.text:0041DB40
.text:0041DB40                 jmp     ds:__imp_memcpy
.text:0041DB40 memcpy          endp
.text:0041DB40
.text:0041DB40 ; ---------------------------------------------------------------------------
.text:0041DB46                 align 10h
.text:0041DB50
.text:0041DB50 ; =============== S U B R O U T I N E =======================================
.text:0041DB50
.text:0041DB50 ; Attributes: thunk
.text:0041DB50
.text:0041DB50 ; int *__cdecl errno()
.text:0041DB50 _errno          proc near               ; CODE XREF: sub_4027B0+A5F↑p
.text:0041DB50                                         ; sub_403840:loc_403EA9↑p ...
.text:0041DB50                 jmp     ds:__imp__errno
.text:0041DB50 _errno          endp
.text:0041DB50
.text:0041DB50 ; ---------------------------------------------------------------------------
.text:0041DB56                 align 10h
.text:0041DB60
.text:0041DB60 ; =============== S U B R O U T I N E =======================================
.text:0041DB60
.text:0041DB60 ; Attributes: thunk
.text:0041DB60
.text:0041DB60 ; size_t __cdecl strlen(const char *Str)
.text:0041DB60 strlen          proc near               ; CODE XREF: sub_403840+104↑p
.text:0041DB60                                         ; sub_403840+2CB↑p ...
.text:0041DB60
.text:0041DB60 Str             = dword ptr  4
.text:0041DB60
.text:0041DB60                 jmp     ds:__imp_strlen
.text:0041DB60 strlen          endp
.text:0041DB60
.text:0041DB60 ; ---------------------------------------------------------------------------
.text:0041DB66                 align 10h
.text:0041DB70
.text:0041DB70 ; =============== S U B R O U T I N E =======================================
.text:0041DB70
.text:0041DB70 ; Attributes: noreturn thunk
.text:0041DB70
.text:0041DB70 ; void __cdecl __noreturn exit(int Code)
.text:0041DB70 exit            proc near               ; CODE XREF: sub_4027B0:loc_402DE7↑p
.text:0041DB70                                         ; sub_403490+3B↑p ...
.text:0041DB70
.text:0041DB70 Code            = dword ptr  4
.text:0041DB70
.text:0041DB70                 jmp     ds:__imp_exit
.text:0041DB70 exit            endp
.text:0041DB70
.text:0041DB70 ; ---------------------------------------------------------------------------
.text:0041DB76                 align 10h
.text:0041DB80
.text:0041DB80 ; =============== S U B R O U T I N E =======================================
.text:0041DB80
.text:0041DB80 ; Attributes: thunk
.text:0041DB80
.text:0041DB80 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0041DB80 fputs           proc near               ; CODE XREF: sub_4027B0+680↑p
.text:0041DB80                                         ; sub_4027B0+6A2↑p ...
.text:0041DB80
.text:0041DB80 Buffer          = dword ptr  4
.text:0041DB80 Stream          = dword ptr  8
.text:0041DB80
.text:0041DB80                 jmp     ds:__imp_fputs
.text:0041DB80 fputs           endp
.text:0041DB80
.text:0041DB80 ; ---------------------------------------------------------------------------
.text:0041DB86                 align 10h
.text:0041DB90
.text:0041DB90 ; =============== S U B R O U T I N E =======================================
.text:0041DB90
.text:0041DB90 ; Attributes: thunk
.text:0041DB90
.text:0041DB90 ; int printf(const char *const Format, ...)
.text:0041DB90 printf          proc near               ; CODE XREF: sub_4027B0+65E↑p
.text:0041DB90                                         ; sub_4027B0+89B↑p ...
.text:0041DB90
.text:0041DB90 Format          = dword ptr  4
.text:0041DB90
.text:0041DB90                 jmp     ds:__imp_printf
.text:0041DB90 printf          endp
.text:0041DB90
.text:0041DB90 ; ---------------------------------------------------------------------------
.text:0041DB96                 align 10h
.text:0041DBA0
.text:0041DBA0 ; =============== S U B R O U T I N E =======================================
.text:0041DBA0
.text:0041DBA0 ; Attributes: thunk
.text:0041DBA0
.text:0041DBA0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0041DBA0 fprintf         proc near               ; CODE XREF: sub_4027B0+AD2↑p
.text:0041DBA0                                         ; sub_403490+33↑p ...
.text:0041DBA0
.text:0041DBA0 Stream          = dword ptr  4
.text:0041DBA0 Format          = dword ptr  8
.text:0041DBA0
.text:0041DBA0                 jmp     ds:__imp_fprintf
.text:0041DBA0 fprintf         endp
.text:0041DBA0
.text:0041DBA0 ; ---------------------------------------------------------------------------
.text:0041DBA6                 align 10h
.text:0041DBB0
.text:0041DBB0 ; =============== S U B R O U T I N E =======================================
.text:0041DBB0
.text:0041DBB0 ; Attributes: thunk
.text:0041DBB0
.text:0041DBB0 ; char *__cdecl strchr(const char *Str, int Val)
.text:0041DBB0 strchr          proc near               ; CODE XREF: sub_403F00+3B↑p
.text:0041DBB0                                         ; sub_404320+BB↑p ...
.text:0041DBB0
.text:0041DBB0 Str             = dword ptr  4
.text:0041DBB0 Val             = dword ptr  8
.text:0041DBB0
.text:0041DBB0                 jmp     ds:__imp_strchr
.text:0041DBB0 strchr          endp
.text:0041DBB0
.text:0041DBB0 ; ---------------------------------------------------------------------------
.text:0041DBB6                 align 10h
.text:0041DBC0
.text:0041DBC0 ; =============== S U B R O U T I N E =======================================
.text:0041DBC0
.text:0041DBC0 ; Attributes: noreturn thunk
.text:0041DBC0
.text:0041DBC0 _assert         proc near               ; CODE XREF: sub_406770:loc_40681F↑p
.text:0041DBC0                                         ; sub_41BB70+414↑p
.text:0041DBC0                 jmp     ds:__imp__assert
.text:0041DBC0 _assert         endp
.text:0041DBC0
.text:0041DBC0 ; ---------------------------------------------------------------------------
.text:0041DBC6                 align 10h
.text:0041DBD0
.text:0041DBD0 ; =============== S U B R O U T I N E =======================================
.text:0041DBD0
.text:0041DBD0 ; Attributes: thunk
.text:0041DBD0
.text:0041DBD0 ; void *__cdecl malloc(size_t Size)
.text:0041DBD0 malloc          proc near               ; CODE XREF: sub_404B50+CA1↑p
.text:0041DBD0                                         ; sub_406B00+21E↑p ...
.text:0041DBD0
.text:0041DBD0 Size            = dword ptr  4
.text:0041DBD0
.text:0041DBD0                 jmp     ds:__imp_malloc
.text:0041DBD0 malloc          endp
.text:0041DBD0
.text:0041DBD0 ; ---------------------------------------------------------------------------
.text:0041DBD6                 align 10h
.text:0041DBE0
.text:0041DBE0 ; =============== S U B R O U T I N E =======================================
.text:0041DBE0
.text:0041DBE0 ; Attributes: thunk
.text:0041DBE0
.text:0041DBE0 ; __int64 __cdecl lseeki64(int FileHandle, __int64 Offset, int Origin)
.text:0041DBE0 _lseeki64       proc near               ; CODE XREF: sub_406B00+37D↑p
.text:0041DBE0                                         ; sub_418980+41↑p
.text:0041DBE0
.text:0041DBE0 FileHandle      = dword ptr  4
.text:0041DBE0 Offset          = qword ptr  8
.text:0041DBE0 Origin          = dword ptr  10h
.text:0041DBE0
.text:0041DBE0                 jmp     ds:__imp__lseeki64
.text:0041DBE0 _lseeki64       endp
.text:0041DBE0
.text:0041DBE0 ; ---------------------------------------------------------------------------
.text:0041DBE6                 align 10h
.text:0041DBF0
.text:0041DBF0 ; =============== S U B R O U T I N E =======================================
.text:0041DBF0
.text:0041DBF0 ; Attributes: thunk
.text:0041DBF0
.text:0041DBF0 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0041DBF0 _flsbuf         proc near               ; CODE XREF: sub_404B50+128A↑p
.text:0041DBF0                                         ; .text:004087D9↑j ...
.text:0041DBF0
.text:0041DBF0 File            = dword ptr  8
.text:0041DBF0
.text:0041DBF0                 jmp     ds:__imp__flsbuf
.text:0041DBF0 _flsbuf         endp
.text:0041DBF0
.text:0041DBF0 ; ---------------------------------------------------------------------------
.text:0041DBF6                 align 10h
.text:0041DC00
.text:0041DC00 ; =============== S U B R O U T I N E =======================================
.text:0041DC00
.text:0041DC00 ; Attributes: thunk
.text:0041DC00
.text:0041DC00 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0041DC00 strncmp         proc near               ; CODE XREF: sub_4084F0+53↑p
.text:0041DC00                                         ; sub_408CF0+23F↑p ...
.text:0041DC00
.text:0041DC00 Str1            = dword ptr  4
.text:0041DC00 Str2            = dword ptr  8
.text:0041DC00 MaxCount        = dword ptr  0Ch
.text:0041DC00
.text:0041DC00                 jmp     ds:__imp_strncmp
.text:0041DC00 strncmp         endp
.text:0041DC00
.text:0041DC00 ; ---------------------------------------------------------------------------
.text:0041DC06                 align 10h
.text:0041DC10
.text:0041DC10 ; =============== S U B R O U T I N E =======================================
.text:0041DC10
.text:0041DC10 ; Attributes: thunk
.text:0041DC10
.text:0041DC10 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0041DC10 vfprintf        proc near               ; CODE XREF: sub_40A3B0+C1↑p
.text:0041DC10                                         ; sub_4143B0+49↑p ...
.text:0041DC10
.text:0041DC10 Stream          = dword ptr  4
.text:0041DC10 Format          = dword ptr  8
.text:0041DC10 ArgList         = dword ptr  0Ch
.text:0041DC10
.text:0041DC10                 jmp     ds:__imp_vfprintf
.text:0041DC10 vfprintf        endp
.text:0041DC10
.text:0041DC10 ; ---------------------------------------------------------------------------
.text:0041DC16                 align 10h
.text:0041DC20
.text:0041DC20 ; =============== S U B R O U T I N E =======================================
.text:0041DC20
.text:0041DC20 ; Attributes: thunk
.text:0041DC20
.text:0041DC20 ; int __cdecl fclose(FILE *Stream)
.text:0041DC20 fclose          proc near               ; CODE XREF: sub_40A730+27↑p
.text:0041DC20                                         ; .text:0041AB5E↑p
.text:0041DC20
.text:0041DC20 Stream          = dword ptr  4
.text:0041DC20
.text:0041DC20                 jmp     ds:__imp_fclose
.text:0041DC20 fclose          endp
.text:0041DC20
.text:0041DC20 ; ---------------------------------------------------------------------------
.text:0041DC26                 align 10h
.text:0041DC30
.text:0041DC30 ; =============== S U B R O U T I N E =======================================
.text:0041DC30
.text:0041DC30 ; Attributes: thunk
.text:0041DC30
.text:0041DC30 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0041DC30 memset          proc near               ; CODE XREF: .text:0040A976↑p
.text:0041DC30                                         ; sub_410970+330A↑p ...
.text:0041DC30
.text:0041DC30 Val             = dword ptr  8
.text:0041DC30 Size            = dword ptr  0Ch
.text:0041DC30
.text:0041DC30                 jmp     ds:__imp_memset
.text:0041DC30 memset          endp
.text:0041DC30
.text:0041DC30 ; ---------------------------------------------------------------------------
.text:0041DC36                 align 10h
.text:0041DC40
.text:0041DC40 ; =============== S U B R O U T I N E =======================================
.text:0041DC40
.text:0041DC40 ; Attributes: thunk
.text:0041DC40
.text:0041DC40 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0041DC40 calloc          proc near               ; CODE XREF: .text:0040A9B3↑p
.text:0041DC40                                         ; sub_40B140+1D0↑p ...
.text:0041DC40
.text:0041DC40 Count           = dword ptr  4
.text:0041DC40 Size            = dword ptr  8
.text:0041DC40
.text:0041DC40                 jmp     ds:__imp_calloc
.text:0041DC40 calloc          endp
.text:0041DC40
.text:0041DC40 ; ---------------------------------------------------------------------------
.text:0041DC46                 align 10h
.text:0041DC50
.text:0041DC50 ; =============== S U B R O U T I N E =======================================
.text:0041DC50
.text:0041DC50 ; Attributes: thunk
.text:0041DC50
.text:0041DC50 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0041DC50 realloc         proc near               ; CODE XREF: sub_40A880+30↑p
.text:0041DC50                                         ; sub_40A8E0+16↑p ...
.text:0041DC50
.text:0041DC50 Block           = dword ptr  4
.text:0041DC50 Size            = dword ptr  8
.text:0041DC50
.text:0041DC50                 jmp     ds:__imp_realloc
.text:0041DC50 realloc         endp
.text:0041DC50
.text:0041DC50 ; ---------------------------------------------------------------------------
.text:0041DC56                 align 10h
.text:0041DC60
.text:0041DC60 ; =============== S U B R O U T I N E =======================================
.text:0041DC60
.text:0041DC60 ; Attributes: thunk
.text:0041DC60
.text:0041DC60 ; int __cdecl filbuf(FILE *File)
.text:0041DC60 _filbuf         proc near               ; CODE XREF: sub_40AFE0+B9↑p
.text:0041DC60
.text:0041DC60 File            = dword ptr  4
.text:0041DC60
.text:0041DC60                 jmp     ds:__imp__filbuf
.text:0041DC60 _filbuf         endp
.text:0041DC60
.text:0041DC60 ; ---------------------------------------------------------------------------
.text:0041DC66                 align 10h
.text:0041DC70
.text:0041DC70 ; =============== S U B R O U T I N E =======================================
.text:0041DC70
.text:0041DC70 ; Attributes: thunk
.text:0041DC70
.text:0041DC70 ; int __cdecl isctype(int C, int Type)
.text:0041DC70 _isctype        proc near               ; CODE XREF: sub_40AFE0+5F↑p
.text:0041DC70                                         ; sub_40C270+610↑p ...
.text:0041DC70
.text:0041DC70 C               = dword ptr  4
.text:0041DC70 Type            = dword ptr  8
.text:0041DC70
.text:0041DC70                 jmp     ds:__imp__isctype
.text:0041DC70 _isctype        endp
.text:0041DC70
.text:0041DC70 ; ---------------------------------------------------------------------------
.text:0041DC76                 align 10h
.text:0041DC80
.text:0041DC80 ; =============== S U B R O U T I N E =======================================
.text:0041DC80
.text:0041DC80 ; Attributes: thunk
.text:0041DC80
.text:0041DC80 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0041DC80 iswctype        proc near               ; CODE XREF: sub_40C270+78B↑p
.text:0041DC80                                         ; sub_410970+1F86↑p
.text:0041DC80
.text:0041DC80 C               = word ptr  4
.text:0041DC80 Type            = word ptr  8
.text:0041DC80
.text:0041DC80                 jmp     ds:__imp_iswctype
.text:0041DC80 iswctype        endp
.text:0041DC80
.text:0041DC80 ; ---------------------------------------------------------------------------
.text:0041DC86                 align 10h
.text:0041DC90
.text:0041DC90 ; =============== S U B R O U T I N E =======================================
.text:0041DC90
.text:0041DC90 ; Attributes: thunk
.text:0041DC90
.text:0041DC90 ; int __cdecl tolower(int C)
.text:0041DC90 tolower         proc near               ; CODE XREF: sub_4103A0+158↑p
.text:0041DC90
.text:0041DC90 C               = dword ptr  4
.text:0041DC90
.text:0041DC90                 jmp     ds:__imp_tolower
.text:0041DC90 tolower         endp
.text:0041DC90
.text:0041DC90 ; ---------------------------------------------------------------------------
.text:0041DC96                 align 10h
.text:0041DCA0
.text:0041DCA0 ; =============== S U B R O U T I N E =======================================
.text:0041DCA0
.text:0041DCA0 ; Attributes: thunk
.text:0041DCA0
.text:0041DCA0 ; int __cdecl fflush(FILE *Stream)
.text:0041DCA0 fflush          proc near               ; CODE XREF: sub_4143B0+19↑p
.text:0041DCA0                                         ; sub_4143B0+81↑p ...
.text:0041DCA0
.text:0041DCA0 Stream          = dword ptr  4
.text:0041DCA0
.text:0041DCA0                 jmp     ds:__imp_fflush
.text:0041DCA0 fflush          endp
.text:0041DCA0
.text:0041DCA0 ; ---------------------------------------------------------------------------
.text:0041DCA6                 align 10h
.text:0041DCB0
.text:0041DCB0 ; =============== S U B R O U T I N E =======================================
.text:0041DCB0
.text:0041DCB0 ; Attributes: thunk
.text:0041DCB0
.text:0041DCB0 ; char *__cdecl strerror(int ErrorMessage)
.text:0041DCB0 strerror        proc near               ; CODE XREF: sub_4143B0+A5↑p
.text:0041DCB0                                         ; sub_4144B4+10F↑p
.text:0041DCB0
.text:0041DCB0 ErrorMessage    = dword ptr  4
.text:0041DCB0
.text:0041DCB0                 jmp     ds:__imp_strerror
.text:0041DCB0 strerror        endp
.text:0041DCB0
.text:0041DCB0 ; ---------------------------------------------------------------------------
.text:0041DCB6                 align 10h
.text:0041DCC0
.text:0041DCC0 ; =============== S U B R O U T I N E =======================================
.text:0041DCC0
.text:0041DCC0 ; Attributes: thunk
.text:0041DCC0
.text:0041DCC0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0041DCC0 ctime           proc near               ; CODE XREF: .text:0041492D↑p
.text:0041DCC0                                         ; .text:0041494F↑p ...
.text:0041DCC0
.text:0041DCC0 Time            = dword ptr  4
.text:0041DCC0
.text:0041DCC0                 jmp     ds:__imp_ctime
.text:0041DCC0 ctime           endp
.text:0041DCC0
.text:0041DCC0 ; ---------------------------------------------------------------------------
.text:0041DCC6                 align 10h
.text:0041DCD0
.text:0041DCD0 ; =============== S U B R O U T I N E =======================================
.text:0041DCD0
.text:0041DCD0 ; Attributes: thunk
.text:0041DCD0
.text:0041DCD0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0041DCD0 _get_osfhandle  proc near               ; CODE XREF: sub_4149D0+3A↑p
.text:0041DCD0                                         ; sub_418980+22↑p ...
.text:0041DCD0
.text:0041DCD0 FileHandle      = dword ptr  4
.text:0041DCD0
.text:0041DCD0                 jmp     ds:__imp__get_osfhandle
.text:0041DCD0 _get_osfhandle  endp
.text:0041DCD0
.text:0041DCD0 ; ---------------------------------------------------------------------------
.text:0041DCD6                 align 10h
.text:0041DCE0
.text:0041DCE0 ; =============== S U B R O U T I N E =======================================
.text:0041DCE0
.text:0041DCE0 ; Attributes: thunk
.text:0041DCE0
.text:0041DCE0 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0041DCE0 strcat          proc near               ; CODE XREF: sub_414C30+98↑p
.text:0041DCE0                                         ; sub_4169B0+4D↑p ...
.text:0041DCE0
.text:0041DCE0 Destination     = dword ptr  4
.text:0041DCE0 Source          = dword ptr  8
.text:0041DCE0
.text:0041DCE0                 jmp     ds:__imp_strcat
.text:0041DCE0 strcat          endp
.text:0041DCE0
.text:0041DCE0 ; ---------------------------------------------------------------------------
.text:0041DCE6                 align 10h
.text:0041DCF0
.text:0041DCF0 ; =============== S U B R O U T I N E =======================================
.text:0041DCF0
.text:0041DCF0 ; Attributes: thunk
.text:0041DCF0
.text:0041DCF0 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0041DCF0 strcpy          proc near               ; CODE XREF: sub_414C30+73↑p
.text:0041DCF0                                         ; _win32_longpath+13C↑p ...
.text:0041DCF0
.text:0041DCF0 Destination     = dword ptr  4
.text:0041DCF0 Source          = dword ptr  8
.text:0041DCF0
.text:0041DCF0                 jmp     ds:__imp_strcpy
.text:0041DCF0 strcpy          endp
.text:0041DCF0
.text:0041DCF0 ; ---------------------------------------------------------------------------
.text:0041DCF6                 align 10h
.text:0041DD00
.text:0041DD00 ; =============== S U B R O U T I N E =======================================
.text:0041DD00
.text:0041DD00 ; Attributes: thunk
.text:0041DD00
.text:0041DD00 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0041DD00 strstr          proc near               ; CODE XREF: sub_415280+3BF↑p
.text:0041DD00                                         ; sub_415280+3DC↑p ...
.text:0041DD00
.text:0041DD00 Str             = dword ptr  4
.text:0041DD00 SubStr          = dword ptr  8
.text:0041DD00
.text:0041DD00                 jmp     ds:__imp_strstr
.text:0041DD00 strstr          endp
.text:0041DD00
.text:0041DD00 ; ---------------------------------------------------------------------------
.text:0041DD06                 align 10h
.text:0041DD10
.text:0041DD10 ; =============== S U B R O U T I N E =======================================
.text:0041DD10
.text:0041DD10 ; Attributes: thunk
.text:0041DD10
.text:0041DD10 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0041DD10 strrchr         proc near               ; CODE XREF: sub_415280+CB↑p
.text:0041DD10                                         ; sub_415280+3A7↑p ...
.text:0041DD10
.text:0041DD10 Str             = dword ptr  4
.text:0041DD10
.text:0041DD10                 jmp     ds:__imp_strrchr
.text:0041DD10 strrchr         endp
.text:0041DD10
.text:0041DD10 ; ---------------------------------------------------------------------------
.text:0041DD16                 align 10h
.text:0041DD20
.text:0041DD20 ; =============== S U B R O U T I N E =======================================
.text:0041DD20
.text:0041DD20 ; Attributes: thunk
.text:0041DD20
.text:0041DD20 ; size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount)
.text:0041DD20 mbstowcs        proc near               ; CODE XREF: sub_4165B0+90↑p
.text:0041DD20
.text:0041DD20 Dest            = dword ptr  4
.text:0041DD20 Source          = dword ptr  8
.text:0041DD20 MaxCount        = dword ptr  0Ch
.text:0041DD20
.text:0041DD20                 jmp     ds:__imp_mbstowcs
.text:0041DD20 mbstowcs        endp
.text:0041DD20
.text:0041DD20 ; ---------------------------------------------------------------------------
.text:0041DD26                 align 10h
.text:0041DD30
.text:0041DD30 ; =============== S U B R O U T I N E =======================================
.text:0041DD30
.text:0041DD30 ; Attributes: thunk
.text:0041DD30
.text:0041DD30 ; int __cdecl open_osfhandle(intptr_t OSFileHandle, int Flags)
.text:0041DD30 _open_osfhandle proc near               ; CODE XREF: sub_4169B0+A1↑p
.text:0041DD30
.text:0041DD30 OSFileHandle    = dword ptr  4
.text:0041DD30 Flags           = dword ptr  8
.text:0041DD30
.text:0041DD30                 jmp     ds:__imp__open_osfhandle
.text:0041DD30 _open_osfhandle endp
.text:0041DD30
.text:0041DD30 ; ---------------------------------------------------------------------------
.text:0041DD36                 align 10h
.text:0041DD40
.text:0041DD40 ; =============== S U B R O U T I N E =======================================
.text:0041DD40
.text:0041DD40 ; Attributes: thunk
.text:0041DD40
.text:0041DD40 ; int __cdecl isalpha(int C)
.text:0041DD40 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0041DD40
.text:0041DD40 C               = dword ptr  4
.text:0041DD40
.text:0041DD40                 jmp     ds:__imp_isalpha
.text:0041DD40 isalpha         endp
.text:0041DD40
.text:0041DD40 ; ---------------------------------------------------------------------------
.text:0041DD46                 align 10h
.text:0041DD50
.text:0041DD50 ; =============== S U B R O U T I N E =======================================
.text:0041DD50
.text:0041DD50 ; Attributes: thunk
.text:0041DD50
.text:0041DD50 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0041DD50 _stricmp_0      proc near               ; CODE XREF: .text:00417184↑p
.text:0041DD50
.text:0041DD50 String1         = dword ptr  4
.text:0041DD50 String2         = dword ptr  8
.text:0041DD50
.text:0041DD50                 jmp     ds:__imp__stricmp_0
.text:0041DD50 _stricmp_0      endp
.text:0041DD50
.text:0041DD50 ; ---------------------------------------------------------------------------
.text:0041DD56                 align 10h
.text:0041DD60
.text:0041DD60 ; =============== S U B R O U T I N E =======================================
.text:0041DD60
.text:0041DD60 ; Attributes: thunk
.text:0041DD60
.text:0041DD60 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:0041DD60 strncat         proc near               ; CODE XREF: sub_417310+75↑p
.text:0041DD60
.text:0041DD60 Destination     = dword ptr  4
.text:0041DD60 Source          = dword ptr  8
.text:0041DD60 Count           = dword ptr  0Ch
.text:0041DD60
.text:0041DD60                 jmp     ds:__imp_strncat
.text:0041DD60 strncat         endp
.text:0041DD60
.text:0041DD60 ; ---------------------------------------------------------------------------
.text:0041DD66                 align 10h
.text:0041DD70
.text:0041DD70 ; =============== S U B R O U T I N E =======================================
.text:0041DD70
.text:0041DD70 ; Attributes: thunk
.text:0041DD70
.text:0041DD70 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0041DD70 strncpy         proc near               ; CODE XREF: sub_417310+61↑p
.text:0041DD70                                         ; sub_417310+118↑p ...
.text:0041DD70
.text:0041DD70 Destination     = dword ptr  4
.text:0041DD70 Source          = dword ptr  8
.text:0041DD70 Count           = dword ptr  0Ch
.text:0041DD70
.text:0041DD70                 jmp     ds:__imp_strncpy
.text:0041DD70 strncpy         endp
.text:0041DD70
.text:0041DD70 ; ---------------------------------------------------------------------------
.text:0041DD76                 align 10h
.text:0041DD80
.text:0041DD80 ; =============== S U B R O U T I N E =======================================
.text:0041DD80
.text:0041DD80 ; Attributes: thunk
.text:0041DD80
.text:0041DD80 ; int __cdecl toupper(int C)
.text:0041DD80 toupper         proc near               ; CODE XREF: sub_417760+10E↑p
.text:0041DD80
.text:0041DD80 C               = dword ptr  4
.text:0041DD80
.text:0041DD80                 jmp     ds:__imp_toupper
.text:0041DD80 toupper         endp
.text:0041DD80
.text:0041DD80 ; ---------------------------------------------------------------------------
.text:0041DD86                 align 10h
.text:0041DD90
.text:0041DD90 ; =============== S U B R O U T I N E =======================================
.text:0041DD90
.text:0041DD90 ; Attributes: thunk
.text:0041DD90
.text:0041DD90 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:0041DD90 _chmod_0        proc near               ; CODE XREF: sub_418730+9B↑p
.text:0041DD90
.text:0041DD90 FileName        = dword ptr  4
.text:0041DD90 AccessMode      = dword ptr  8
.text:0041DD90
.text:0041DD90                 jmp     ds:__imp__chmod_0
.text:0041DD90 _chmod_0        endp
.text:0041DD90
.text:0041DD90 ; ---------------------------------------------------------------------------
.text:0041DD96                 align 10h
.text:0041DDA0
.text:0041DDA0 ; =============== S U B R O U T I N E =======================================
.text:0041DDA0
.text:0041DDA0 ; Attributes: thunk
.text:0041DDA0
.text:0041DDA0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0041DDA0 sprintf         proc near               ; CODE XREF: .text:0041961A↑p
.text:0041DDA0                                         ; .text:0041963B↑p ...
.text:0041DDA0
.text:0041DDA0 Buffer          = dword ptr  4
.text:0041DDA0 Format          = dword ptr  8
.text:0041DDA0
.text:0041DDA0                 jmp     ds:__imp_sprintf
.text:0041DDA0 sprintf         endp
.text:0041DDA0
.text:0041DDA0 ; ---------------------------------------------------------------------------
.text:0041DDA6                 align 10h
.text:0041DDB0
.text:0041DDB0 ; =============== S U B R O U T I N E =======================================
.text:0041DDB0
.text:0041DDB0 ; Attributes: thunk
.text:0041DDB0
.text:0041DDB0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0041DDB0 sscanf          proc near               ; CODE XREF: .text:0041A19E↑p
.text:0041DDB0
.text:0041DDB0 Buffer          = dword ptr  4
.text:0041DDB0 Format          = dword ptr  8
.text:0041DDB0
.text:0041DDB0                 jmp     ds:__imp_sscanf
.text:0041DDB0 sscanf          endp
.text:0041DDB0
.text:0041DDB0 ; ---------------------------------------------------------------------------
.text:0041DDB6                 align 10h
.text:0041DDC0
.text:0041DDC0 ; =============== S U B R O U T I N E =======================================
.text:0041DDC0
.text:0041DDC0 ; Attributes: thunk
.text:0041DDC0
.text:0041DDC0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0041DDC0 strspn          proc near               ; CODE XREF: .text:00419FEA↑p
.text:0041DDC0                                         ; .text:0041A204↑p ...
.text:0041DDC0
.text:0041DDC0 Str             = dword ptr  4
.text:0041DDC0 Control         = dword ptr  8
.text:0041DDC0
.text:0041DDC0                 jmp     ds:__imp_strspn
.text:0041DDC0 strspn          endp
.text:0041DDC0
.text:0041DDC0 ; ---------------------------------------------------------------------------
.text:0041DDC6                 align 10h
.text:0041DDD0
.text:0041DDD0 ; =============== S U B R O U T I N E =======================================
.text:0041DDD0
.text:0041DDD0 ; Attributes: thunk
.text:0041DDD0
.text:0041DDD0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0041DDD0 fopen           proc near               ; CODE XREF: sub_41AA9F+26↑p
.text:0041DDD0                                         ; sub_41AA9F+99↑p
.text:0041DDD0
.text:0041DDD0 FileName        = dword ptr  4
.text:0041DDD0 Mode            = dword ptr  8
.text:0041DDD0
.text:0041DDD0                 jmp     ds:__imp_fopen
.text:0041DDD0 fopen           endp
.text:0041DDD0
.text:0041DDD0 ; ---------------------------------------------------------------------------
.text:0041DDD6                 align 10h
.text:0041DDE0
.text:0041DDE0 ; =============== S U B R O U T I N E =======================================
.text:0041DDE0
.text:0041DDE0 ; Attributes: thunk
.text:0041DDE0
.text:0041DDE0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0041DDE0 _filelengthi64  proc near               ; CODE XREF: sub_41B620+1F↑p
.text:0041DDE0
.text:0041DDE0 FileHandle      = dword ptr  4
.text:0041DDE0
.text:0041DDE0                 jmp     ds:__imp__filelengthi64
.text:0041DDE0 _filelengthi64  endp
.text:0041DDE0
.text:0041DDE0 ; ---------------------------------------------------------------------------
.text:0041DDE6                 align 10h
.text:0041DDF0
.text:0041DDF0 ; =============== S U B R O U T I N E =======================================
.text:0041DDF0
.text:0041DDF0 ; Attributes: thunk
.text:0041DDF0
.text:0041DDF0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0041DDF0 strpbrk         proc near               ; CODE XREF: sub_41B680+87↑p
.text:0041DDF0
.text:0041DDF0 Str             = dword ptr  4
.text:0041DDF0 Control         = dword ptr  8
.text:0041DDF0
.text:0041DDF0                 jmp     ds:__imp_strpbrk
.text:0041DDF0 strpbrk         endp
.text:0041DDF0
.text:0041DDF0 ; ---------------------------------------------------------------------------
.text:0041DDF6                 align 10h
.text:0041DE00
.text:0041DE00 ; =============== S U B R O U T I N E =======================================
.text:0041DE00
.text:0041DE00 ; Attributes: thunk
.text:0041DE00
.text:0041DE00 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0041DE00 _fdopen         proc near               ; CODE XREF: sub_41B720+69↑p
.text:0041DE00
.text:0041DE00 FileHandle      = dword ptr  4
.text:0041DE00 Format          = dword ptr  8
.text:0041DE00
.text:0041DE00                 jmp     ds:__imp__fdopen
.text:0041DE00 _fdopen         endp
.text:0041DE00
.text:0041DE00 ; ---------------------------------------------------------------------------
.text:0041DE06                 align 10h
.text:0041DE10
.text:0041DE10 ; =============== S U B R O U T I N E =======================================
.text:0041DE10
.text:0041DE10 ; Attributes: thunk
.text:0041DE10
.text:0041DE10 ; int __cdecl close_0(int FileHandle)
.text:0041DE10 _close_0        proc near               ; CODE XREF: sub_41B720+90↑p
.text:0041DE10
.text:0041DE10 FileHandle      = dword ptr  4
.text:0041DE10
.text:0041DE10                 jmp     ds:__imp__close_0
.text:0041DE10 _close_0        endp
.text:0041DE10
.text:0041DE10 ; ---------------------------------------------------------------------------
.text:0041DE16                 align 10h
.text:0041DE20
.text:0041DE20 ; =============== S U B R O U T I N E =======================================
.text:0041DE20
.text:0041DE20 ; Attributes: thunk
.text:0041DE20
.text:0041DE20 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0041DE20 _open_0         proc near               ; CODE XREF: sub_41BB70:loc_41BF00↑p
.text:0041DE20
.text:0041DE20 FileName        = dword ptr  4
.text:0041DE20 OpenFlag        = dword ptr  8
.text:0041DE20
.text:0041DE20                 jmp     ds:__imp__open_0
.text:0041DE20 _open_0         endp
.text:0041DE20
.text:0041DE20 ; ---------------------------------------------------------------------------
.text:0041DE26                 align 10h
.text:0041DE30
.text:0041DE30 ; =============== S U B R O U T I N E =======================================
.text:0041DE30
.text:0041DE30 ; Attributes: thunk
.text:0041DE30
.text:0041DE30 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0041DE30 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0041DE30
.text:0041DE30 lpTopLevelExceptionFilter= dword ptr  4
.text:0041DE30
.text:0041DE30                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0041DE30 SetUnhandledExceptionFilter endp
.text:0041DE30
.text:0041DE30 ; ---------------------------------------------------------------------------
.text:0041DE36                 align 10h
.text:0041DE40
.text:0041DE40 ; =============== S U B R O U T I N E =======================================
.text:0041DE40
.text:0041DE40 ; Attributes: noreturn thunk
.text:0041DE40
.text:0041DE40 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0041DE40 ExitProcess     proc near               ; CODE XREF: sub_401080+F4↑p
.text:0041DE40
.text:0041DE40 uExitCode       = dword ptr  4
.text:0041DE40
.text:0041DE40                 jmp     ds:__imp_ExitProcess
.text:0041DE40 ExitProcess     endp
.text:0041DE40
.text:0041DE40 ; ---------------------------------------------------------------------------
.text:0041DE46                 align 10h
.text:0041DE50
.text:0041DE50 ; =============== S U B R O U T I N E =======================================
.text:0041DE50
.text:0041DE50 ; Attributes: thunk
.text:0041DE50
.text:0041DE50 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0041DE50 GetModuleHandleA proc near              ; CODE XREF: sub_414AC0+18↑p
.text:0041DE50                                         ; sub_415280+329↑p ...
.text:0041DE50
.text:0041DE50 lpModuleName    = dword ptr  4
.text:0041DE50
.text:0041DE50                 jmp     ds:__imp_GetModuleHandleA
.text:0041DE50 GetModuleHandleA endp
.text:0041DE50
.text:0041DE50 ; ---------------------------------------------------------------------------
.text:0041DE56                 align 10h
.text:0041DE60
.text:0041DE60 ; =============== S U B R O U T I N E =======================================
.text:0041DE60
.text:0041DE60 ; Attributes: thunk
.text:0041DE60
.text:0041DE60 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0041DE60 GetProcAddress  proc near               ; CODE XREF: sub_414AC0+33↑p
.text:0041DE60                                         ; sub_414C30+2E↑p ...
.text:0041DE60
.text:0041DE60 hModule         = dword ptr  4
.text:0041DE60 lpProcName      = dword ptr  8
.text:0041DE60
.text:0041DE60                 jmp     ds:__imp_GetProcAddress
.text:0041DE60 GetProcAddress  endp
.text:0041DE60
.text:0041DE60 ; ---------------------------------------------------------------------------
.text:0041DE66                 align 10h
.text:0041DE70
.text:0041DE70 ; =============== S U B R O U T I N E =======================================
.text:0041DE70
.text:0041DE70 ; Attributes: thunk
.text:0041DE70
.text:0041DE70 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0041DE70 GetFileAttributesA proc near            ; CODE XREF: sub_414AC0+47↑p
.text:0041DE70                                         ; sub_418450+13↑p ...
.text:0041DE70
.text:0041DE70 lpFileName      = dword ptr  4
.text:0041DE70
.text:0041DE70                 jmp     ds:__imp_GetFileAttributesA
.text:0041DE70 GetFileAttributesA endp
.text:0041DE70
.text:0041DE70 ; ---------------------------------------------------------------------------
.text:0041DE76                 align 10h
.text:0041DE80
.text:0041DE80 ; =============== S U B R O U T I N E =======================================
.text:0041DE80
.text:0041DE80 ; Attributes: thunk
.text:0041DE80
.text:0041DE80 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0041DE80 FreeLibrary     proc near               ; CODE XREF: sub_414AC0+A4↑p
.text:0041DE80                                         ; sub_414C30+11D↑p ...
.text:0041DE80
.text:0041DE80 hLibModule      = dword ptr  4
.text:0041DE80
.text:0041DE80                 jmp     ds:__imp_FreeLibrary
.text:0041DE80 FreeLibrary     endp
.text:0041DE80
.text:0041DE80 ; ---------------------------------------------------------------------------
.text:0041DE86                 align 10h
.text:0041DE90
.text:0041DE90 ; =============== S U B R O U T I N E =======================================
.text:0041DE90
.text:0041DE90 ; Attributes: thunk
.text:0041DE90
.text:0041DE90 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041DE90 FindFirstFileA  proc near               ; CODE XREF: sub_414AC0+CE↑p
.text:0041DE90                                         ; sub_414C30+14F↑p ...
.text:0041DE90
.text:0041DE90 lpFileName      = dword ptr  4
.text:0041DE90 lpFindFileData  = dword ptr  8
.text:0041DE90
.text:0041DE90                 jmp     ds:__imp_FindFirstFileA
.text:0041DE90 FindFirstFileA  endp
.text:0041DE90
.text:0041DE90 ; ---------------------------------------------------------------------------
.text:0041DE96                 align 10h
.text:0041DEA0
.text:0041DEA0 ; =============== S U B R O U T I N E =======================================
.text:0041DEA0
.text:0041DEA0 ; Attributes: thunk
.text:0041DEA0
.text:0041DEA0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0041DEA0 FindClose       proc near               ; CODE XREF: sub_414AC0+123↑p
.text:0041DEA0                                         ; sub_414C30+10E↑p ...
.text:0041DEA0
.text:0041DEA0 hFindFile       = dword ptr  4
.text:0041DEA0
.text:0041DEA0                 jmp     ds:__imp_FindClose
.text:0041DEA0 FindClose       endp
.text:0041DEA0
.text:0041DEA0 ; ---------------------------------------------------------------------------
.text:0041DEA6                 align 10h
.text:0041DEB0
.text:0041DEB0 ; =============== S U B R O U T I N E =======================================
.text:0041DEB0
.text:0041DEB0 ; Attributes: thunk
.text:0041DEB0
.text:0041DEB0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0041DEB0 LoadLibraryA    proc near               ; CODE XREF: sub_414C30+13↑p
.text:0041DEB0                                         ; sub_415280+134↑p ...
.text:0041DEB0
.text:0041DEB0 lpLibFileName   = dword ptr  4
.text:0041DEB0
.text:0041DEB0                 jmp     ds:__imp_LoadLibraryA
.text:0041DEB0 LoadLibraryA    endp
.text:0041DEB0
.text:0041DEB0 ; ---------------------------------------------------------------------------
.text:0041DEB6                 align 10h
.text:0041DEC0
.text:0041DEC0 ; =============== S U B R O U T I N E =======================================
.text:0041DEC0
.text:0041DEC0 ; Attributes: thunk
.text:0041DEC0
.text:0041DEC0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0041DEC0 FindNextFileA   proc near               ; CODE XREF: sub_414C30+FF↑p
.text:0041DEC0                                         ; sub_417310+36↑p
.text:0041DEC0
.text:0041DEC0 hFindFile       = dword ptr  4
.text:0041DEC0 lpFindFileData  = dword ptr  8
.text:0041DEC0
.text:0041DEC0                 jmp     ds:__imp_FindNextFileA
.text:0041DEC0 FindNextFileA   endp
.text:0041DEC0
.text:0041DEC0 ; ---------------------------------------------------------------------------
.text:0041DEC6                 align 10h
.text:0041DED0
.text:0041DED0 ; =============== S U B R O U T I N E =======================================
.text:0041DED0
.text:0041DED0 ; Attributes: thunk
.text:0041DED0
.text:0041DED0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0041DED0 GetFileType     proc near               ; CODE XREF: sub_414DB0+43↑p
.text:0041DED0                                         ; .text:00415A6A↑p
.text:0041DED0
.text:0041DED0 hFile           = dword ptr  4
.text:0041DED0
.text:0041DED0                 jmp     ds:__imp_GetFileType
.text:0041DED0 GetFileType     endp
.text:0041DED0
.text:0041DED0 ; ---------------------------------------------------------------------------
.text:0041DED6                 align 10h
.text:0041DEE0
.text:0041DEE0 ; =============== S U B R O U T I N E =======================================
.text:0041DEE0
.text:0041DEE0 ; Attributes: thunk
.text:0041DEE0
.text:0041DEE0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0041DEE0 GetFileInformationByHandle proc near    ; CODE XREF: sub_414DB0+69↑p
.text:0041DEE0
.text:0041DEE0 hFile           = dword ptr  4
.text:0041DEE0 lpFileInformation= dword ptr  8
.text:0041DEE0
.text:0041DEE0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0041DEE0 GetFileInformationByHandle endp
.text:0041DEE0
.text:0041DEE0 ; ---------------------------------------------------------------------------
.text:0041DEE6                 align 10h
.text:0041DEF0
.text:0041DEF0 ; =============== S U B R O U T I N E =======================================
.text:0041DEF0
.text:0041DEF0 ; Attributes: thunk
.text:0041DEF0
.text:0041DEF0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0041DEF0 GetFileSize     proc near               ; CODE XREF: sub_414DB0+3F2↑p
.text:0041DEF0
.text:0041DEF0 hFile           = dword ptr  4
.text:0041DEF0 lpFileSizeHigh  = dword ptr  8
.text:0041DEF0
.text:0041DEF0                 jmp     ds:__imp_GetFileSize
.text:0041DEF0 GetFileSize     endp
.text:0041DEF0
.text:0041DEF0 ; ---------------------------------------------------------------------------
.text:0041DEF6                 align 10h
.text:0041DF00
.text:0041DF00 ; =============== S U B R O U T I N E =======================================
.text:0041DF00
.text:0041DF00 ; Attributes: thunk
.text:0041DF00
.text:0041DF00 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0041DF00 PeekNamedPipe   proc near               ; CODE XREF: sub_414DB0+439↑p
.text:0041DF00
.text:0041DF00 hNamedPipe      = dword ptr  4
.text:0041DF00 lpBuffer        = dword ptr  8
.text:0041DF00 nBufferSize     = dword ptr  0Ch
.text:0041DF00 lpBytesRead     = dword ptr  10h
.text:0041DF00 lpTotalBytesAvail= dword ptr  14h
.text:0041DF00 lpBytesLeftThisMessage= dword ptr  18h
.text:0041DF00
.text:0041DF00                 jmp     ds:__imp_PeekNamedPipe
.text:0041DF00 PeekNamedPipe   endp
.text:0041DF00
.text:0041DF00 ; ---------------------------------------------------------------------------
.text:0041DF06                 align 10h
.text:0041DF10
.text:0041DF10 ; =============== S U B R O U T I N E =======================================
.text:0041DF10
.text:0041DF10 ; Attributes: thunk
.text:0041DF10
.text:0041DF10 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0041DF10 GetDriveTypeA   proc near               ; CODE XREF: sub_415280+4C↑p
.text:0041DF10
.text:0041DF10 lpRootPathName  = dword ptr  4
.text:0041DF10
.text:0041DF10                 jmp     ds:__imp_GetDriveTypeA
.text:0041DF10 GetDriveTypeA   endp
.text:0041DF10
.text:0041DF10 ; ---------------------------------------------------------------------------
.text:0041DF16                 align 10h
.text:0041DF20
.text:0041DF20 ; =============== S U B R O U T I N E =======================================
.text:0041DF20
.text:0041DF20 ; Attributes: thunk
.text:0041DF20
.text:0041DF20 ; DWORD __stdcall GetLastError()
.text:0041DF20 GetLastError    proc near               ; CODE XREF: sub_415280:loc_415509↑p
.text:0041DF20                                         ; .text:loc_41604D↑p ...
.text:0041DF20                 jmp     ds:__imp_GetLastError
.text:0041DF20 GetLastError    endp
.text:0041DF20
.text:0041DF20 ; ---------------------------------------------------------------------------
.text:0041DF26                 align 10h
.text:0041DF30
.text:0041DF30 ; =============== S U B R O U T I N E =======================================
.text:0041DF30
.text:0041DF30 ; Attributes: thunk
.text:0041DF30
.text:0041DF30 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0041DF30 GetVolumeInformationA proc near         ; CODE XREF: sub_415780+64↑p
.text:0041DF30                                         ; .text:00415D2C↑p ...
.text:0041DF30
.text:0041DF30 lpRootPathName  = dword ptr  4
.text:0041DF30 lpVolumeNameBuffer= dword ptr  8
.text:0041DF30 nVolumeNameSize = dword ptr  0Ch
.text:0041DF30 lpVolumeSerialNumber= dword ptr  10h
.text:0041DF30 lpMaximumComponentLength= dword ptr  14h
.text:0041DF30 lpFileSystemFlags= dword ptr  18h
.text:0041DF30 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0041DF30 nFileSystemNameSize= dword ptr  20h
.text:0041DF30
.text:0041DF30                 jmp     ds:__imp_GetVolumeInformationA
.text:0041DF30 GetVolumeInformationA endp
.text:0041DF30
.text:0041DF30 ; ---------------------------------------------------------------------------
.text:0041DF36                 align 10h
.text:0041DF40
.text:0041DF40 ; =============== S U B R O U T I N E =======================================
.text:0041DF40
.text:0041DF40 ; Attributes: thunk
.text:0041DF40
.text:0041DF40 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0041DF40 CreateFileA     proc near               ; CODE XREF: sub_4168E0-3CA↑p
.text:0041DF40                                         ; sub_4165B0+4C↑p ...
.text:0041DF40
.text:0041DF40 lpFileName      = dword ptr  4
.text:0041DF40 dwDesiredAccess = dword ptr  8
.text:0041DF40 dwShareMode     = dword ptr  0Ch
.text:0041DF40 lpSecurityAttributes= dword ptr  10h
.text:0041DF40 dwCreationDisposition= dword ptr  14h
.text:0041DF40 dwFlagsAndAttributes= dword ptr  18h
.text:0041DF40 hTemplateFile   = dword ptr  1Ch
.text:0041DF40
.text:0041DF40                 jmp     ds:__imp_CreateFileA
.text:0041DF40 CreateFileA     endp
.text:0041DF40
.text:0041DF40 ; ---------------------------------------------------------------------------
.text:0041DF46                 align 10h
.text:0041DF50
.text:0041DF50 ; =============== S U B R O U T I N E =======================================
.text:0041DF50
.text:0041DF50 ; Attributes: thunk
.text:0041DF50
.text:0041DF50 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0041DF50 CloseHandle     proc near               ; CODE XREF: sub_4168E0-3AF↑p
.text:0041DF50                                         ; sub_4165B0+182↑p ...
.text:0041DF50
.text:0041DF50 hObject         = dword ptr  4
.text:0041DF50
.text:0041DF50                 jmp     ds:__imp_CloseHandle
.text:0041DF50 CloseHandle     endp
.text:0041DF50
.text:0041DF50 ; ---------------------------------------------------------------------------
.text:0041DF56                 align 10h
.text:0041DF60
.text:0041DF60 ; =============== S U B R O U T I N E =======================================
.text:0041DF60
.text:0041DF60 ; Attributes: thunk
.text:0041DF60
.text:0041DF60 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0041DF60 SetErrorMode    proc near               ; CODE XREF: sub_4168E0-37A↑p
.text:0041DF60                                         ; sub_417670+80↑p ...
.text:0041DF60
.text:0041DF60 uMode           = dword ptr  4
.text:0041DF60
.text:0041DF60                 jmp     ds:__imp_SetErrorMode
.text:0041DF60 SetErrorMode    endp
.text:0041DF60
.text:0041DF60 ; ---------------------------------------------------------------------------
.text:0041DF66                 align 10h
.text:0041DF70
.text:0041DF70 ; =============== S U B R O U T I N E =======================================
.text:0041DF70
.text:0041DF70 ; Attributes: thunk
.text:0041DF70
.text:0041DF70 ; BOOL __stdcall BackupWrite(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.text:0041DF70 BackupWrite     proc near               ; CODE XREF: sub_4165B0+F8↑p
.text:0041DF70                                         ; sub_4165B0+13A↑p ...
.text:0041DF70
.text:0041DF70 hFile           = dword ptr  4
.text:0041DF70 lpBuffer        = dword ptr  8
.text:0041DF70 nNumberOfBytesToWrite= dword ptr  0Ch
.text:0041DF70 lpNumberOfBytesWritten= dword ptr  10h
.text:0041DF70 bAbort          = dword ptr  14h
.text:0041DF70 bProcessSecurity= dword ptr  18h
.text:0041DF70 lpContext       = dword ptr  1Ch
.text:0041DF70
.text:0041DF70                 jmp     ds:__imp_BackupWrite
.text:0041DF70 BackupWrite     endp
.text:0041DF70
.text:0041DF70 ; ---------------------------------------------------------------------------
.text:0041DF76                 align 10h
.text:0041DF80
.text:0041DF80 ; =============== S U B R O U T I N E =======================================
.text:0041DF80
.text:0041DF80 ; Attributes: thunk
.text:0041DF80
.text:0041DF80 ; BOOL __stdcall CopyFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.text:0041DF80 CopyFileA       proc near               ; CODE XREF: sub_416790+C2↑p
.text:0041DF80
.text:0041DF80 lpExistingFileName= dword ptr  4
.text:0041DF80 lpNewFileName   = dword ptr  8
.text:0041DF80 bFailIfExists   = dword ptr  0Ch
.text:0041DF80
.text:0041DF80                 jmp     ds:__imp_CopyFileA
.text:0041DF80 CopyFileA       endp
.text:0041DF80
.text:0041DF80 ; ---------------------------------------------------------------------------
.text:0041DF86                 align 10h
.text:0041DF90
.text:0041DF90 ; =============== S U B R O U T I N E =======================================
.text:0041DF90
.text:0041DF90 ; Attributes: thunk
.text:0041DF90
.text:0041DF90 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041DF90 CreateDirectoryA proc near              ; CODE XREF: sub_416930+22↑p
.text:0041DF90
.text:0041DF90 lpPathName      = dword ptr  4
.text:0041DF90 lpSecurityAttributes= dword ptr  8
.text:0041DF90
.text:0041DF90                 jmp     ds:__imp_CreateDirectoryA
.text:0041DF90 CreateDirectoryA endp
.text:0041DF90
.text:0041DF90 ; ---------------------------------------------------------------------------
.text:0041DF96                 align 10h
.text:0041DFA0
.text:0041DFA0 ; =============== S U B R O U T I N E =======================================
.text:0041DFA0
.text:0041DFA0 ; Attributes: thunk
.text:0041DFA0
.text:0041DFA0 ; HANDLE __stdcall CreateNamedPipeA(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0041DFA0 CreateNamedPipeA proc near              ; CODE XREF: sub_4169B0+8D↑p
.text:0041DFA0
.text:0041DFA0 lpName          = dword ptr  4
.text:0041DFA0 dwOpenMode      = dword ptr  8
.text:0041DFA0 dwPipeMode      = dword ptr  0Ch
.text:0041DFA0 nMaxInstances   = dword ptr  10h
.text:0041DFA0 nOutBufferSize  = dword ptr  14h
.text:0041DFA0 nInBufferSize   = dword ptr  18h
.text:0041DFA0 nDefaultTimeOut = dword ptr  1Ch
.text:0041DFA0 lpSecurityAttributes= dword ptr  20h
.text:0041DFA0
.text:0041DFA0                 jmp     ds:__imp_CreateNamedPipeA
.text:0041DFA0 CreateNamedPipeA endp
.text:0041DFA0
.text:0041DFA0 ; ---------------------------------------------------------------------------
.text:0041DFA6                 align 10h
.text:0041DFB0
.text:0041DFB0 ; =============== S U B R O U T I N E =======================================
.text:0041DFB0
.text:0041DFB0 ; Attributes: thunk
.text:0041DFB0
.text:0041DFB0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0041DFB0 GetModuleFileNameA proc near            ; CODE XREF: sub_417000+1C↑p
.text:0041DFB0
.text:0041DFB0 hModule         = dword ptr  4
.text:0041DFB0 lpFilename      = dword ptr  8
.text:0041DFB0 nSize           = dword ptr  0Ch
.text:0041DFB0
.text:0041DFB0                 jmp     ds:__imp_GetModuleFileNameA
.text:0041DFB0 GetModuleFileNameA endp
.text:0041DFB0
.text:0041DFB0 ; ---------------------------------------------------------------------------
.text:0041DFB6                 align 10h
.text:0041DFC0
.text:0041DFC0 ; =============== S U B R O U T I N E =======================================
.text:0041DFC0
.text:0041DFC0 ; Attributes: thunk
.text:0041DFC0
.text:0041DFC0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0041DFC0 GetShortPathNameA proc near             ; CODE XREF: .text:00417286↑p
.text:0041DFC0                                         ; .text:004172B0↑p
.text:0041DFC0
.text:0041DFC0 lpszLongPath    = dword ptr  4
.text:0041DFC0 lpszShortPath   = dword ptr  8
.text:0041DFC0 cchBuffer       = dword ptr  0Ch
.text:0041DFC0
.text:0041DFC0                 jmp     ds:__imp_GetShortPathNameA
.text:0041DFC0 GetShortPathNameA endp
.text:0041DFC0
.text:0041DFC0 ; ---------------------------------------------------------------------------
.text:0041DFC6                 align 10h
.text:0041DFD0
.text:0041DFD0 ; =============== S U B R O U T I N E =======================================
.text:0041DFD0
.text:0041DFD0 ; Attributes: thunk
.text:0041DFD0
.text:0041DFD0 ; BOOL __stdcall AreFileApisANSI()
.text:0041DFD0 AreFileApisANSI proc near               ; CODE XREF: sub_4174F0+89↑p
.text:0041DFD0                                         ; sub_418450+E3↑p
.text:0041DFD0                 jmp     ds:__imp_AreFileApisANSI
.text:0041DFD0 AreFileApisANSI endp
.text:0041DFD0
.text:0041DFD0 ; ---------------------------------------------------------------------------
.text:0041DFD6                 align 10h
.text:0041DFE0
.text:0041DFE0 ; =============== S U B R O U T I N E =======================================
.text:0041DFE0
.text:0041DFE0 ; Attributes: thunk
.text:0041DFE0
.text:0041DFE0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0041DFE0 MultiByteToWideChar proc near           ; CODE XREF: sub_4174F0+BD↑p
.text:0041DFE0                                         ; sub_418450+117↑p
.text:0041DFE0
.text:0041DFE0 CodePage        = dword ptr  4
.text:0041DFE0 dwFlags         = dword ptr  8
.text:0041DFE0 lpMultiByteStr  = dword ptr  0Ch
.text:0041DFE0 cbMultiByte     = dword ptr  10h
.text:0041DFE0 lpWideCharStr   = dword ptr  14h
.text:0041DFE0 cchWideChar     = dword ptr  18h
.text:0041DFE0
.text:0041DFE0                 jmp     ds:__imp_MultiByteToWideChar
.text:0041DFE0 MultiByteToWideChar endp
.text:0041DFE0
.text:0041DFE0 ; ---------------------------------------------------------------------------
.text:0041DFE6                 align 10h
.text:0041DFF0
.text:0041DFF0 ; =============== S U B R O U T I N E =======================================
.text:0041DFF0
.text:0041DFF0 ; Attributes: thunk
.text:0041DFF0
.text:0041DFF0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0041DFF0 lstrcpyA        proc near               ; CODE XREF: sub_4174F0+128↑p
.text:0041DFF0
.text:0041DFF0 lpString1       = dword ptr  4
.text:0041DFF0 lpString2       = dword ptr  8
.text:0041DFF0
.text:0041DFF0                 jmp     ds:__imp_lstrcpyA
.text:0041DFF0 lstrcpyA        endp
.text:0041DFF0
.text:0041DFF0 ; ---------------------------------------------------------------------------
.text:0041DFF6                 align 10h
.text:0041E000
.text:0041E000 ; =============== S U B R O U T I N E =======================================
.text:0041E000
.text:0041E000 ; Attributes: thunk
.text:0041E000
.text:0041E000 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041E000 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00417A08↑p
.text:0041E000                                         ; .text:00417A24↑p ...
.text:0041E000
.text:0041E000 nBufferLength   = dword ptr  4
.text:0041E000 lpBuffer        = dword ptr  8
.text:0041E000
.text:0041E000                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0041E000 GetCurrentDirectoryA endp
.text:0041E000
.text:0041E000 ; ---------------------------------------------------------------------------
.text:0041E006                 align 10h
.text:0041E010
.text:0041E010 ; =============== S U B R O U T I N E =======================================
.text:0041E010
.text:0041E010 ; Attributes: thunk
.text:0041E010
.text:0041E010 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0041E010 DeviceIoControl proc near               ; CODE XREF: .text:00417DEC↑p
.text:0041E010                                         ; sub_4181B0+1E5↑p
.text:0041E010
.text:0041E010 hDevice         = dword ptr  4
.text:0041E010 dwIoControlCode = dword ptr  8
.text:0041E010 lpInBuffer      = dword ptr  0Ch
.text:0041E010 nInBufferSize   = dword ptr  10h
.text:0041E010 lpOutBuffer     = dword ptr  14h
.text:0041E010 nOutBufferSize  = dword ptr  18h
.text:0041E010 lpBytesReturned = dword ptr  1Ch
.text:0041E010 lpOverlapped    = dword ptr  20h
.text:0041E010
.text:0041E010                 jmp     ds:__imp_DeviceIoControl
.text:0041E010 DeviceIoControl endp
.text:0041E010
.text:0041E010 ; ---------------------------------------------------------------------------
.text:0041E016                 align 10h
.text:0041E020
.text:0041E020 ; =============== S U B R O U T I N E =======================================
.text:0041E020
.text:0041E020 ; Attributes: thunk
.text:0041E020
.text:0041E020 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0041E020 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00418143↑p
.text:0041E020                                         ; sub_4181B0+7B↑p ...
.text:0041E020
.text:0041E020 lpRootPathName  = dword ptr  4
.text:0041E020 lpSectorsPerCluster= dword ptr  8
.text:0041E020 lpBytesPerSector= dword ptr  0Ch
.text:0041E020 lpNumberOfFreeClusters= dword ptr  10h
.text:0041E020 lpTotalNumberOfClusters= dword ptr  14h
.text:0041E020
.text:0041E020                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0041E020 GetDiskFreeSpaceA endp
.text:0041E020
.text:0041E020 ; ---------------------------------------------------------------------------
.text:0041E026                 align 10h
.text:0041E030
.text:0041E030 ; =============== S U B R O U T I N E =======================================
.text:0041E030
.text:0041E030 ; Attributes: thunk
.text:0041E030
.text:0041E030 ; BOOL __stdcall SetFileAttributesA(LPCSTR lpFileName, DWORD dwFileAttributes)
.text:0041E030 SetFileAttributesA proc near            ; CODE XREF: sub_418450+2A↑p
.text:0041E030                                         ; sub_418450+178↑p
.text:0041E030
.text:0041E030 lpFileName      = dword ptr  4
.text:0041E030 dwFileAttributes= dword ptr  8
.text:0041E030
.text:0041E030                 jmp     ds:__imp_SetFileAttributesA
.text:0041E030 SetFileAttributesA endp
.text:0041E030
.text:0041E030 ; ---------------------------------------------------------------------------
.text:0041E036                 align 10h
.text:0041E040
.text:0041E040 ; =============== S U B R O U T I N E =======================================
.text:0041E040
.text:0041E040 ; Attributes: thunk
.text:0041E040
.text:0041E040 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:0041E040 DeleteFileA     proc near               ; CODE XREF: sub_418730+50↑p
.text:0041E040
.text:0041E040 lpFileName      = dword ptr  4
.text:0041E040
.text:0041E040                 jmp     ds:__imp_DeleteFileA
.text:0041E040 DeleteFileA     endp
.text:0041E040
.text:0041E040 ; ---------------------------------------------------------------------------
.text:0041E046                 align 10h
.text:0041E050
.text:0041E050 ; =============== S U B R O U T I N E =======================================
.text:0041E050
.text:0041E050 ; Attributes: thunk
.text:0041E050
.text:0041E050 ; BOOL __stdcall SetEndOfFile(HANDLE hFile)
.text:0041E050 SetEndOfFile    proc near               ; CODE XREF: sub_418980+53↑p
.text:0041E050
.text:0041E050 hFile           = dword ptr  4
.text:0041E050
.text:0041E050                 jmp     ds:__imp_SetEndOfFile
.text:0041E050 SetEndOfFile    endp
.text:0041E050
.text:0041E050 ; ---------------------------------------------------------------------------
.text:0041E056                 align 10h
.text:0041E060
.text:0041E060 ; =============== S U B R O U T I N E =======================================
.text:0041E060
.text:0041E060 ; Attributes: thunk
.text:0041E060
.text:0041E060 ; BOOL __stdcall MoveFileA(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.text:0041E060 MoveFileA       proc near               ; CODE XREF: sub_418A60+36↑p
.text:0041E060
.text:0041E060 lpExistingFileName= dword ptr  4
.text:0041E060 lpNewFileName   = dword ptr  8
.text:0041E060
.text:0041E060                 jmp     ds:__imp_MoveFileA
.text:0041E060 MoveFileA       endp
.text:0041E060
.text:0041E060 ; ---------------------------------------------------------------------------
.text:0041E066                 align 10h
.text:0041E070
.text:0041E070 ; =============== S U B R O U T I N E =======================================
.text:0041E070
.text:0041E070 ; Attributes: thunk
.text:0041E070
.text:0041E070 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0041E070 GetSystemInfo   proc near               ; CODE XREF: sub_418AE0+3A↑p
.text:0041E070
.text:0041E070 lpSystemInfo    = dword ptr  4
.text:0041E070
.text:0041E070                 jmp     ds:__imp_GetSystemInfo
.text:0041E070 GetSystemInfo   endp
.text:0041E070
.text:0041E070 ; ---------------------------------------------------------------------------
.text:0041E076                 align 10h
.text:0041E080
.text:0041E080 ; =============== S U B R O U T I N E =======================================
.text:0041E080
.text:0041E080 ; Attributes: thunk
.text:0041E080
.text:0041E080 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0041E080 GetFullPathNameA proc near              ; CODE XREF: sub_4192C0+45↑p
.text:0041E080                                         ; sub_4192C0+ED↑p
.text:0041E080
.text:0041E080 lpFileName      = dword ptr  4
.text:0041E080 nBufferLength   = dword ptr  8
.text:0041E080 lpBuffer        = dword ptr  0Ch
.text:0041E080 lpFilePart      = dword ptr  10h
.text:0041E080
.text:0041E080                 jmp     ds:__imp_GetFullPathNameA
.text:0041E080 GetFullPathNameA endp
.text:0041E080
.text:0041E080 ; ---------------------------------------------------------------------------
.text:0041E086                 align 10h
.text:0041E090
.text:0041E090 ; =============== S U B R O U T I N E =======================================
.text:0041E090
.text:0041E090 ; Attributes: thunk
.text:0041E090
.text:0041E090 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0041E090 lstrcmpiA       proc near               ; CODE XREF: .text:004198AB↑p
.text:0041E090                                         ; .text:004198C2↑p ...
.text:0041E090
.text:0041E090 lpString1       = dword ptr  4
.text:0041E090 lpString2       = dword ptr  8
.text:0041E090
.text:0041E090                 jmp     ds:__imp_lstrcmpiA
.text:0041E090 lstrcmpiA       endp
.text:0041E090
.text:0041E090 ; ---------------------------------------------------------------------------
.text:0041E096                 align 10h
.text:0041E0A0
.text:0041E0A0 ; =============== S U B R O U T I N E =======================================
.text:0041E0A0
.text:0041E0A0 ; Attributes: thunk
.text:0041E0A0
.text:0041E0A0 ; DWORD __stdcall GetVersion()
.text:0041E0A0 GetVersion      proc near               ; CODE XREF: .text:00419C33↑p
.text:0041E0A0                 jmp     ds:__imp_GetVersion
.text:0041E0A0 GetVersion      endp
.text:0041E0A0
.text:0041E0A0 ; ---------------------------------------------------------------------------
.text:0041E0A6                 align 10h
.text:0041E0B0
.text:0041E0B0 ; =============== S U B R O U T I N E =======================================
.text:0041E0B0
.text:0041E0B0 ; Attributes: thunk
.text:0041E0B0
.text:0041E0B0 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0041E0B0 GetVersionExA   proc near               ; CODE XREF: sub_419CC0+32↑p
.text:0041E0B0                                         ; sub_419CC0+20B↑p
.text:0041E0B0
.text:0041E0B0 lpVersionInformation= dword ptr  4
.text:0041E0B0
.text:0041E0B0                 jmp     ds:__imp_GetVersionExA
.text:0041E0B0 GetVersionExA   endp
.text:0041E0B0
.text:0041E0B0 ; ---------------------------------------------------------------------------
.text:0041E0B6                 align 10h
.text:0041E0C0
.text:0041E0C0 ; =============== S U B R O U T I N E =======================================
.text:0041E0C0
.text:0041E0C0 ; Attributes: thunk
.text:0041E0C0
.text:0041E0C0 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0041E0C0 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041A35F↑p
.text:0041E0C0                                         ; .text:0041A38E↑p ...
.text:0041E0C0
.text:0041E0C0 nBufferLength   = dword ptr  4
.text:0041E0C0 lpBuffer        = dword ptr  8
.text:0041E0C0
.text:0041E0C0                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0041E0C0 GetLogicalDriveStringsA endp
.text:0041E0C0
.text:0041E0C0 ; ---------------------------------------------------------------------------
.text:0041E0C6                 align 10h
.text:0041E0D0
.text:0041E0D0 ; =============== S U B R O U T I N E =======================================
.text:0041E0D0
.text:0041E0D0 ; Attributes: thunk
.text:0041E0D0
.text:0041E0D0 ; HANDLE __stdcall GetProcessHeap()
.text:0041E0D0 GetProcessHeap  proc near               ; CODE XREF: .text:0041A369↑p
.text:0041E0D0                                         ; sub_41AA40+24↑p ...
.text:0041E0D0                 jmp     ds:__imp_GetProcessHeap
.text:0041E0D0 GetProcessHeap  endp
.text:0041E0D0
.text:0041E0D0 ; ---------------------------------------------------------------------------
.text:0041E0D6                 align 10h
.text:0041E0E0
.text:0041E0E0 ; =============== S U B R O U T I N E =======================================
.text:0041E0E0
.text:0041E0E0 ; Attributes: thunk
.text:0041E0E0
.text:0041E0E0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0041E0E0 HeapAlloc       proc near               ; CODE XREF: .text:0041A37D↑p
.text:0041E0E0                                         ; sub_41AA40+38↑p ...
.text:0041E0E0
.text:0041E0E0 hHeap           = dword ptr  4
.text:0041E0E0 dwFlags         = dword ptr  8
.text:0041E0E0 dwBytes         = dword ptr  0Ch
.text:0041E0E0
.text:0041E0E0                 jmp     ds:__imp_HeapAlloc
.text:0041E0E0 HeapAlloc       endp
.text:0041E0E0
.text:0041E0E0 ; ---------------------------------------------------------------------------
.text:0041E0E6                 align 10h
.text:0041E0F0
.text:0041E0F0 ; =============== S U B R O U T I N E =======================================
.text:0041E0F0
.text:0041E0F0 ; Attributes: thunk
.text:0041E0F0
.text:0041E0F0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0041E0F0 HeapFree        proc near               ; CODE XREF: .text:0041AB7D↑p
.text:0041E0F0
.text:0041E0F0 hHeap           = dword ptr  4
.text:0041E0F0 dwFlags         = dword ptr  8
.text:0041E0F0 lpMem           = dword ptr  0Ch
.text:0041E0F0
.text:0041E0F0                 jmp     ds:__imp_HeapFree
.text:0041E0F0 HeapFree        endp
.text:0041E0F0
.text:0041E0F0 ; ---------------------------------------------------------------------------
.text:0041E0F6                 align 10h
.text:0041E100
.text:0041E100 ; =============== S U B R O U T I N E =======================================
.text:0041E100
.text:0041E100 ; Attributes: thunk
.text:0041E100
.text:0041E100 ; DWORD __stdcall FormatMessageA(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.text:0041E100 FormatMessageA  proc near               ; CODE XREF: .text:0041AC5A↑p
.text:0041E100                                         ; .text:0041ACD2↑p ...
.text:0041E100
.text:0041E100 dwFlags         = dword ptr  4
.text:0041E100 lpSource        = dword ptr  8
.text:0041E100 dwMessageId     = dword ptr  0Ch
.text:0041E100 dwLanguageId    = dword ptr  10h
.text:0041E100 lpBuffer        = dword ptr  14h
.text:0041E100 nSize           = dword ptr  18h
.text:0041E100 Arguments       = dword ptr  1Ch
.text:0041E100
.text:0041E100                 jmp     ds:__imp_FormatMessageA
.text:0041E100 FormatMessageA  endp
.text:0041E100
.text:0041E100 ; ---------------------------------------------------------------------------
.text:0041E106                 align 10h
.text:0041E110
.text:0041E110 ; =============== S U B R O U T I N E =======================================
.text:0041E110
.text:0041E110 ; Attributes: thunk
.text:0041E110
.text:0041E110 ; HLOCAL __stdcall LocalFree(HLOCAL hMem)
.text:0041E110 LocalFree       proc near               ; CODE XREF: .text:0041AD0A↑p
.text:0041E110                                         ; sub_41AD20+7D↑p ...
.text:0041E110
.text:0041E110 hMem            = dword ptr  4
.text:0041E110
.text:0041E110                 jmp     ds:__imp_LocalFree
.text:0041E110 LocalFree       endp
.text:0041E110
.text:0041E110 ; ---------------------------------------------------------------------------
.text:0041E116                 align 10h
.text:0041E120
.text:0041E120 ; =============== S U B R O U T I N E =======================================
.text:0041E120
.text:0041E120 ; Attributes: thunk
.text:0041E120
.text:0041E120 ; void __stdcall SetLastError(DWORD dwErrCode)
.text:0041E120 SetLastError    proc near               ; CODE XREF: .text:0041AE18↑p
.text:0041E120
.text:0041E120 dwErrCode       = dword ptr  4
.text:0041E120
.text:0041E120                 jmp     ds:__imp_SetLastError
.text:0041E120 SetLastError    endp
.text:0041E120
.text:0041E120 ; ---------------------------------------------------------------------------
.text:0041E126                 align 10h
.text:0041E130
.text:0041E130 ; =============== S U B R O U T I N E =======================================
.text:0041E130
.text:0041E130 ; Attributes: thunk
.text:0041E130
.text:0041E130 ; BOOL __stdcall SetFileTime(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.text:0041E130 SetFileTime     proc near               ; CODE XREF: sub_41AF00+93↑p
.text:0041E130
.text:0041E130 hFile           = dword ptr  4
.text:0041E130 lpCreationTime  = dword ptr  8
.text:0041E130 lpLastAccessTime= dword ptr  0Ch
.text:0041E130 lpLastWriteTime = dword ptr  10h
.text:0041E130
.text:0041E130                 jmp     ds:__imp_SetFileTime
.text:0041E130 SetFileTime     endp
.text:0041E130
.text:0041E130 ; ---------------------------------------------------------------------------
.text:0041E136                 align 10h
.text:0041E140
.text:0041E140 ; =============== S U B R O U T I N E =======================================
.text:0041E140
.text:0041E140 ; Attributes: thunk
.text:0041E140
.text:0041E140 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0041E140 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_41AF00+C7↑p
.text:0041E140                                         ; sub_41C020+4F↑p
.text:0041E140
.text:0041E140 lpSystemTimeAsFileTime= dword ptr  4
.text:0041E140
.text:0041E140                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0041E140 GetSystemTimeAsFileTime endp
.text:0041E140
.text:0041E140 ; ---------------------------------------------------------------------------
.text:0041E146                 align 10h
.text:0041E150
.text:0041E150 ; =============== S U B R O U T I N E =======================================
.text:0041E150
.text:0041E150 ; Attributes: thunk
.text:0041E150
.text:0041E150 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0041E150 UnlockFile      proc near               ; CODE XREF: sub_41B620+40↑p
.text:0041E150
.text:0041E150 hFile           = dword ptr  4
.text:0041E150 dwFileOffsetLow = dword ptr  8
.text:0041E150 dwFileOffsetHigh= dword ptr  0Ch
.text:0041E150 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0041E150 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0041E150
.text:0041E150                 jmp     ds:__imp_UnlockFile
.text:0041E150 UnlockFile      endp
.text:0041E150
.text:0041E150 ; ---------------------------------------------------------------------------
.text:0041E156                 align 10h
.text:0041E160
.text:0041E160 ; =============== S U B R O U T I N E =======================================
.text:0041E160
.text:0041E160 ; Attributes: thunk
.text:0041E160
.text:0041E160 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0041E160 GetTimeZoneInformation proc near        ; CODE XREF: sub_41C020+22↑p
.text:0041E160
.text:0041E160 lpTimeZoneInformation= dword ptr  4
.text:0041E160
.text:0041E160                 jmp     ds:__imp_GetTimeZoneInformation
.text:0041E160 GetTimeZoneInformation endp
.text:0041E160
.text:0041E160 ; ---------------------------------------------------------------------------
.text:0041E166                 align 10h
.text:0041E170
.text:0041E170 ; =============== S U B R O U T I N E =======================================
.text:0041E170
.text:0041E170 ; Attributes: thunk
.text:0041E170
.text:0041E170 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0041E170 RegOpenKeyExA   proc near               ; CODE XREF: .text:00419831↑p
.text:0041E170
.text:0041E170 hKey            = dword ptr  4
.text:0041E170 lpSubKey        = dword ptr  8
.text:0041E170 ulOptions       = dword ptr  0Ch
.text:0041E170 samDesired      = dword ptr  10h
.text:0041E170 phkResult       = dword ptr  14h
.text:0041E170
.text:0041E170                 jmp     ds:__imp_RegOpenKeyExA
.text:0041E170 RegOpenKeyExA   endp
.text:0041E170
.text:0041E170 ; ---------------------------------------------------------------------------
.text:0041E176                 align 10h
.text:0041E180
.text:0041E180 ; =============== S U B R O U T I N E =======================================
.text:0041E180
.text:0041E180 ; Attributes: thunk
.text:0041E180
.text:0041E180 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0041E180 RegQueryValueExA proc near              ; CODE XREF: .text:00419874↑p
.text:0041E180
.text:0041E180 hKey            = dword ptr  4
.text:0041E180 lpValueName     = dword ptr  8
.text:0041E180 lpReserved      = dword ptr  0Ch
.text:0041E180 lpType          = dword ptr  10h
.text:0041E180 lpData          = dword ptr  14h
.text:0041E180 lpcbData        = dword ptr  18h
.text:0041E180
.text:0041E180                 jmp     ds:__imp_RegQueryValueExA
.text:0041E180 RegQueryValueExA endp
.text:0041E180
.text:0041E180 ; ---------------------------------------------------------------------------
.text:0041E186                 align 10h
.text:0041E190
.text:0041E190 ; =============== S U B R O U T I N E =======================================
.text:0041E190
.text:0041E190 ; Attributes: thunk
.text:0041E190
.text:0041E190 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0041E190 RegCloseKey     proc near               ; CODE XREF: .text:00419898↑p
.text:0041E190
.text:0041E190 hKey            = dword ptr  4
.text:0041E190
.text:0041E190                 jmp     ds:__imp_RegCloseKey
.text:0041E190 RegCloseKey     endp
.text:0041E190
.text:0041E190 ; ---------------------------------------------------------------------------
.text:0041E196                 db 2 dup(90h)
.text:0041E198                 dd 2 dup(0)
.text:0041E1A0                 dd 21400h, 0
.text:0041E1A8                 dd 0C0h, 46000000h
.text:0041E1B0 ; const IID rclsid
.text:0041E1B0 rclsid          dd 21401h               ; Data1
.text:0041E1B0                                         ; DATA XREF: sub_4174F0+4B↑o
.text:0041E1B0                                         ; sub_418450+72↑o
.text:0041E1B0                 dw 0                    ; Data2
.text:0041E1B0                 dw 0                    ; Data3
.text:0041E1B0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041E1C0                 dd 214A0h, 0
.text:0041E1C8                 dd 0C0h, 46000000h, 214A1h, 0
.text:0041E1D8                 dd 0C0h, 46000000h, 214D0h, 0
.text:0041E1E8                 dd 0C0h, 46000000h, 214D1h, 0
.text:0041E1F8                 dd 0C0h, 46000000h, 214D2h, 0
.text:0041E208                 dd 0C0h, 46000000h, 214E1h, 0
.text:0041E218                 dd 0C0h, 46000000h, 214E2h, 0
.text:0041E228                 dd 0C0h, 46000000h, 214E3h, 0
.text:0041E238                 dd 0C0h, 46000000h, 214E4h, 0
.text:0041E248                 dd 0C0h, 46000000h, 21500h, 0
.text:0041E258                 dd 0C0h, 46000000h, 214E5h, 0
.text:0041E268                 dd 0C0h, 46000000h, 214E6h, 0
.text:0041E278                 dd 0C0h, 46000000h, 214E8h, 0
.text:0041E288                 dd 0C0h, 46000000h, 214E9h, 0
.text:0041E298                 dd 0C0h, 46000000h, 214EAh, 0
.text:0041E2A8                 dd 0C0h, 46000000h, 214EBh, 0
.text:0041E2B8                 dd 0C0h, 46000000h
.text:0041E2C0 ; const IID riid
.text:0041E2C0 riid            dd 214EEh               ; Data1
.text:0041E2C0                                         ; DATA XREF: sub_4174F0+2B↑o
.text:0041E2C0                                         ; sub_418450+52↑o
.text:0041E2C0                 dw 0                    ; Data2
.text:0041E2C0                 dw 0                    ; Data3
.text:0041E2C0                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0041E2D0                 dd 214EFh, 0
.text:0041E2D8                 dd 0C0h, 46000000h, 214F0h, 0
.text:0041E2E8                 dd 0C0h, 46000000h, 214F1h, 0
.text:0041E2F8                 dd 0C0h, 46000000h, 214F2h, 0
.text:0041E308                 dd 0C0h, 46000000h, 214F3h, 0
.text:0041E318                 dd 0C0h, 46000000h, 214F4h, 0
.text:0041E328                 dd 0C0h, 46000000h, 214F5h, 0
.text:0041E338                 dd 0C0h, 46000000h, 214F6h, 0
.text:0041E348                 dd 0C0h, 46000000h, 214F7h, 0
.text:0041E358                 dd 0C0h, 46000000h, 214F8h, 0
.text:0041E368                 dd 0C0h, 46000000h, 214F9h, 0
.text:0041E378                 dd 0C0h, 46000000h, 214FAh, 0
.text:0041E388                 dd 0C0h, 46000000h, 214FBh, 0
.text:0041E398                 dd 0C0h, 46000000h, 214FCh, 0
.text:0041E3A8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0041E3A8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0041E3A8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0041E3A8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0041E3A8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041E3A8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0041E3A8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0041E3A8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0041E3A8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0041E3A8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0041E478                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0041E488                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0041E498                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0041E4A8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0041E4B8                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0041E4B8                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0041E4B8                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0041E4B8                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0041E4B8                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0041E4B8                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0041E4B8                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0041E540 dword_41E540    dd 0FFFFFFFFh           ; DATA XREF: .text:0041D659↑r
.text:0041E540                                         ; .text:loc_41D680↑r ...
.text:0041E544 dword_41E544    dd 0                    ; DATA XREF: .text:loc_41D68C↑r
.text:0041E544                                         ; sub_41D6B0:loc_41D6FD↑r
.text:0041E548                 dd 0FFFFFFFFh
.text:0041E54C dword_41E54C    dd 2Dh dup(0)           ; DATA XREF: .data:off_41F0F4↓o
.text:0041E600                 dd 280h dup(?)
.text:0041E600 _text           ends
.text:0041E600
.data:0041F000 ; Section 2. (virtual address 0001F000)
.data:0041F000 ; Virtual size                  : 00000110 (    272.)
.data:0041F000 ; Section size in file          : 00000200 (    512.)
.data:0041F000 ; Offset to raw data for section: 0001DA00
.data:0041F000 ; Flags C0000040: Data Readable Writable
.data:0041F000 ; Alignment     : default
.data:0041F000 ; ===========================================================================
.data:0041F000
.data:0041F000 ; Segment type: Pure data
.data:0041F000 ; Segment permissions: Read/Write
.data:0041F000 _data           segment para public 'DATA' use32
.data:0041F000                 assume cs:_data
.data:0041F000                 ;org 41F000h
.data:0041F000 dword_41F000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041F000                                         ; sub_401080+CC↑r
.data:0041F004 dword_41F004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041F004                                         ; sub_401080+D4↑r
.data:0041F008                 align 10h
.data:0041F010 ; int off_41F010
.data:0041F010 off_41F010      dd offset sub_408A80    ; DATA XREF: sub_4027B0+5A8↑r
.data:0041F010                                         ; sub_4027B0+B4F↑r ...
.data:0041F014                 align 10h
.data:0041F020 dword_41F020    dd 1                    ; DATA XREF: sub_4027B0+C38↑r
.data:0041F020                                         ; sub_409880+3↑r ...
.data:0041F024 dword_41F024    dd 1                    ; DATA XREF: sub_409880+11↑r
.data:0041F024                                         ; .text:00409921↑r
.data:0041F028 dword_41F028    dd 3Fh                  ; DATA XREF: sub_409880+7D↑w
.data:0041F028                                         ; .text:0040998D↑w
.data:0041F02C                 align 10h
.data:0041F030 ; char *Src
.data:0041F030 Src             dd offset sub_409AC0    ; DATA XREF: sub_4027B0+BCB↑w
.data:0041F030                                         ; sub_409AD0+13↑r ...
.data:0041F034                 align 10h
.data:0041F040 ; char *Buffer
.data:0041F040 Buffer          dd offset aCopyrightC2005
.data:0041F040                                         ; DATA XREF: sub_40A3B0+DC↑r
.data:0041F040                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041F044                 align 10h
.data:0041F050 dword_41F050    dd 1                    ; DATA XREF: sub_40D3B0+22↑r
.data:0041F050                                         ; sub_40D3B0+65↑r ...
.data:0041F054 dword_41F054    dd 100h                 ; DATA XREF: sub_40D3B0+3F↑o
.data:0041F054                                         ; sub_40D3B0+1A2↑r ...
.data:0041F058 off_41F058      dd offset unk_4200F0    ; DATA XREF: sub_40D3B0+1AA↑r
.data:0041F05C ; void *off_41F05C
.data:0041F05C off_41F05C      dd offset dword_41F054  ; DATA XREF: sub_40D3B0+39↑r
.data:0041F05C                                         ; sub_40D3B0+60↑w ...
.data:0041F060 ; int Code
.data:0041F060 Code            dd 1                    ; DATA XREF: sub_40A730+6D↑r
.data:0041F060                                         ; sub_40A730+9A↑r ...
.data:0041F064                 align 10h
.data:0041F070 dword_41F070    dd 0FA0h                ; DATA XREF: sub_40DA60:loc_40EADB↑r
.data:0041F070                                         ; sub_40DA60:loc_40EC89↑r ...
.data:0041F074                 align 10h
.data:0041F080 dword_41F080    dd 200h                 ; DATA XREF: sub_414DB0+2ED↑r
.data:0041F080                                         ; sub_414DB0+2F8↑r ...
.data:0041F084 ; char *off_41F084
.data:0041F084 off_41F084      dd offset aComExeBatCmd ; DATA XREF: sub_415280+3D3↑r
.data:0041F084                                         ; sub_415280+400↑r ...
.data:0041F084                                         ; ".com;.exe;.bat;.cmd"
.data:0041F088                 align 10h
.data:0041F090 byte_41F090     db 41h                  ; DATA XREF: sub_417880+6B↑w
.data:0041F090                                         ; sub_417880:loc_417994↑r
.data:0041F091                 align 10h
.data:0041F0A0 dword_41F0A0    dd 1                    ; DATA XREF: .text:loc_4196E7↑r
.data:0041F0A0                                         ; sub_419CC0+202↑w
.data:0041F0A4                 align 10h
.data:0041F0B0 off_41F0B0      dd offset aNotset       ; DATA XREF: .text:00419F3A↑r
.data:0041F0B0                                         ; .text:0041AB82↑r
.data:0041F0B0                                         ; "notset"
.data:0041F0B4 off_41F0B4      dd offset aNotset       ; DATA XREF: .text:00419F52↑r
.data:0041F0B4                                         ; .text:00419F74↑r ...
.data:0041F0B4                                         ; "notset"
.data:0041F0B8                 align 10h
.data:0041F0C0 dword_41F0C0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041F0C4                 align 10h
.data:0041F0D0 ; int Mode
.data:0041F0D0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041F0D0                                         ; sub_401080+80↑r ...
.data:0041F0D4                 align 10h
.data:0041F0E0 dword_41F0E0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041F0E0                                         ; sub_401080+BA↑r
.data:0041F0E4                 align 10h
.data:0041F0F0 dword_41F0F0    dd 0                    ; DATA XREF: sub_41D6B0+9↑r
.data:0041F0F0                                         ; sub_41D6B0+1D↑w
.data:0041F0F4 off_41F0F4      dd offset dword_41E54C  ; DATA XREF: sub_41D620+6↑r
.data:0041F0F4                                         ; sub_41D620+17↑r ...
.data:0041F0F8                 align 1000h
.data:0041F0F8 _data           ends
.data:0041F0F8
.bss:00420000 ; Section 3. (virtual address 00020000)
.bss:00420000 ; Virtual size                  : 00000800 (   2048.)
.bss:00420000 ; Section size in file          : 00000000 (      0.)
.bss:00420000 ; Offset to raw data for section: 00000000
.bss:00420000 ; Flags C0000080: Bss Readable Writable
.bss:00420000 ; Alignment     : default
.bss:00420000 ; ===========================================================================
.bss:00420000
.bss:00420000 ; Segment type: Uninitialized
.bss:00420000 ; Segment permissions: Read/Write
.bss:00420000 _bss            segment para public 'BSS' use32
.bss:00420000                 assume cs:_bss
.bss:00420000                 ;org 420000h
.bss:00420000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00420000 byte_420000     db ?                    ; DATA XREF: sub_4027B0:loc_4032C1↑w
.bss:00420000                                         ; sub_403840:loc_40392E↑r ...
.bss:00420001                 align 10h
.bss:00420010 dword_420010    dd ?                    ; DATA XREF: sub_403840+41B↑o
.bss:00420010                                         ; sub_403840+439↑o ...
.bss:00420014                 db    ? ;
.bss:00420015                 db    ? ;
.bss:00420016                 db    ? ;
.bss:00420017                 db    ? ;
.bss:00420018                 db    ? ;
.bss:00420019                 db    ? ;
.bss:0042001A                 db    ? ;
.bss:0042001B                 db    ? ;
.bss:0042001C                 db    ? ;
.bss:0042001D                 db    ? ;
.bss:0042001E                 db    ? ;
.bss:0042001F                 db    ? ;
.bss:00420020                 db    ? ;
.bss:00420021                 db    ? ;
.bss:00420022                 db    ? ;
.bss:00420023                 db    ? ;
.bss:00420024                 db    ? ;
.bss:00420025                 db    ? ;
.bss:00420026                 db    ? ;
.bss:00420027                 db    ? ;
.bss:00420028                 db    ? ;
.bss:00420029                 db    ? ;
.bss:0042002A                 db    ? ;
.bss:0042002B                 db    ? ;
.bss:0042002C                 db    ? ;
.bss:0042002D                 db    ? ;
.bss:0042002E                 db    ? ;
.bss:0042002F                 db    ? ;
.bss:00420030                 db    ? ;
.bss:00420031                 db    ? ;
.bss:00420032                 db    ? ;
.bss:00420033                 db    ? ;
.bss:00420034                 db    ? ;
.bss:00420035                 db    ? ;
.bss:00420036                 db    ? ;
.bss:00420037                 db    ? ;
.bss:00420038                 db    ? ;
.bss:00420039                 db    ? ;
.bss:0042003A                 db    ? ;
.bss:0042003B                 db    ? ;
.bss:0042003C                 db    ? ;
.bss:0042003D                 db    ? ;
.bss:0042003E                 db    ? ;
.bss:0042003F                 db    ? ;
.bss:00420040                 db    ? ;
.bss:00420041                 db    ? ;
.bss:00420042                 db    ? ;
.bss:00420043                 db    ? ;
.bss:00420044                 db    ? ;
.bss:00420045                 db    ? ;
.bss:00420046                 db    ? ;
.bss:00420047                 db    ? ;
.bss:00420048                 db    ? ;
.bss:00420049                 db    ? ;
.bss:0042004A                 db    ? ;
.bss:0042004B                 db    ? ;
.bss:0042004C                 db    ? ;
.bss:0042004D                 db    ? ;
.bss:0042004E                 db    ? ;
.bss:0042004F                 db    ? ;
.bss:00420050 byte_420050     db ?                    ; DATA XREF: sub_4027B0:loc_40333E↑w
.bss:00420050                                         ; sub_403840+D8↑r
.bss:00420051                 align 10h
.bss:00420060 ; char *dword_420060
.bss:00420060 dword_420060    dd ?                    ; DATA XREF: sub_404B50+101F↑r
.bss:00420060                                         ; sub_404B50+11A8↑r ...
.bss:00420064                 align 10h
.bss:00420070 ; char *dword_420070
.bss:00420070 dword_420070    dd ?                    ; DATA XREF: sub_404B50+1009↑r
.bss:00420070                                         ; sub_404B50+1192↑r ...
.bss:00420074                 align 10h
.bss:00420080 ; void *dword_420080
.bss:00420080 dword_420080    dd ?                    ; DATA XREF: sub_407800+2F↑r
.bss:00420080                                         ; sub_407870+64↑r ...
.bss:00420084                 align 10h
.bss:00420090 dword_420090    dd ?                    ; DATA XREF: sub_407E30+49↑r
.bss:00420090                                         ; sub_407E30+6C↑r ...
.bss:00420094                 align 10h
.bss:004200A0 dword_4200A0    dd ?                    ; DATA XREF: sub_407E30:loc_407E87↑r
.bss:004200A0                                         ; sub_407E30+99↑r ...
.bss:004200A4                 align 10h
.bss:004200B0 dword_4200B0    dd ?                    ; DATA XREF: sub_409880+9↑o
.bss:004200B0                                         ; sub_409880+17↑w ...
.bss:004200B4 dword_4200B4    dd ?                    ; DATA XREF: sub_409880+21↑w
.bss:004200B4                                         ; .text:00409939↑w
.bss:004200B8 dword_4200B8    dd ?                    ; DATA XREF: sub_409880+77↑r
.bss:004200B8                                         ; .text:00409987↑r
.bss:004200BC dword_4200BC    dd ?                    ; DATA XREF: sub_409880+6B↑r
.bss:004200BC                                         ; .text:0040997B↑r
.bss:004200C0                 db    ? ;
.bss:004200C1                 db    ? ;
.bss:004200C2                 db    ? ;
.bss:004200C3                 db    ? ;
.bss:004200C4                 db    ? ;
.bss:004200C5                 db    ? ;
.bss:004200C6                 db    ? ;
.bss:004200C7                 db    ? ;
.bss:004200C8                 db    ? ;
.bss:004200C9                 db    ? ;
.bss:004200CA                 db    ? ;
.bss:004200CB                 db    ? ;
.bss:004200CC                 db    ? ;
.bss:004200CD                 db    ? ;
.bss:004200CE                 db    ? ;
.bss:004200CF                 db    ? ;
.bss:004200D0                 db    ? ;
.bss:004200D1                 db    ? ;
.bss:004200D2                 db    ? ;
.bss:004200D3                 db    ? ;
.bss:004200D4                 db    ? ;
.bss:004200D5                 db    ? ;
.bss:004200D6                 db    ? ;
.bss:004200D7                 db    ? ;
.bss:004200D8                 db    ? ;
.bss:004200D9                 db    ? ;
.bss:004200DA                 db    ? ;
.bss:004200DB                 db    ? ;
.bss:004200DC                 db    ? ;
.bss:004200DD                 db    ? ;
.bss:004200DE                 db    ? ;
.bss:004200DF                 db    ? ;
.bss:004200E0 ; char *dword_4200E0
.bss:004200E0 dword_4200E0    dd ?                    ; DATA XREF: .text:0040A704↑w
.bss:004200E0                                         ; sub_40A730+58↑r
.bss:004200E4                 align 10h
.bss:004200F0 unk_4200F0      db    ? ;               ; DATA XREF: sub_40D3B0+100↑o
.bss:004200F0                                         ; .data:off_41F058↑o
.bss:004200F1                 db    ? ;
.bss:004200F2                 db    ? ;
.bss:004200F3                 db    ? ;
.bss:004200F4                 db    ? ;
.bss:004200F5                 db    ? ;
.bss:004200F6                 db    ? ;
.bss:004200F7                 db    ? ;
.bss:004200F8                 db    ? ;
.bss:004200F9                 db    ? ;
.bss:004200FA                 db    ? ;
.bss:004200FB                 db    ? ;
.bss:004200FC                 db    ? ;
.bss:004200FD                 db    ? ;
.bss:004200FE                 db    ? ;
.bss:004200FF                 db    ? ;
.bss:00420100                 db    ? ;
.bss:00420101                 db    ? ;
.bss:00420102                 db    ? ;
.bss:00420103                 db    ? ;
.bss:00420104                 db    ? ;
.bss:00420105                 db    ? ;
.bss:00420106                 db    ? ;
.bss:00420107                 db    ? ;
.bss:00420108                 db    ? ;
.bss:00420109                 db    ? ;
.bss:0042010A                 db    ? ;
.bss:0042010B                 db    ? ;
.bss:0042010C                 db    ? ;
.bss:0042010D                 db    ? ;
.bss:0042010E                 db    ? ;
.bss:0042010F                 db    ? ;
.bss:00420110                 db    ? ;
.bss:00420111                 db    ? ;
.bss:00420112                 db    ? ;
.bss:00420113                 db    ? ;
.bss:00420114                 db    ? ;
.bss:00420115                 db    ? ;
.bss:00420116                 db    ? ;
.bss:00420117                 db    ? ;
.bss:00420118                 db    ? ;
.bss:00420119                 db    ? ;
.bss:0042011A                 db    ? ;
.bss:0042011B                 db    ? ;
.bss:0042011C                 db    ? ;
.bss:0042011D                 db    ? ;
.bss:0042011E                 db    ? ;
.bss:0042011F                 db    ? ;
.bss:00420120                 db    ? ;
.bss:00420121                 db    ? ;
.bss:00420122                 db    ? ;
.bss:00420123                 db    ? ;
.bss:00420124                 db    ? ;
.bss:00420125                 db    ? ;
.bss:00420126                 db    ? ;
.bss:00420127                 db    ? ;
.bss:00420128                 db    ? ;
.bss:00420129                 db    ? ;
.bss:0042012A                 db    ? ;
.bss:0042012B                 db    ? ;
.bss:0042012C                 db    ? ;
.bss:0042012D                 db    ? ;
.bss:0042012E                 db    ? ;
.bss:0042012F                 db    ? ;
.bss:00420130                 db    ? ;
.bss:00420131                 db    ? ;
.bss:00420132                 db    ? ;
.bss:00420133                 db    ? ;
.bss:00420134                 db    ? ;
.bss:00420135                 db    ? ;
.bss:00420136                 db    ? ;
.bss:00420137                 db    ? ;
.bss:00420138                 db    ? ;
.bss:00420139                 db    ? ;
.bss:0042013A                 db    ? ;
.bss:0042013B                 db    ? ;
.bss:0042013C                 db    ? ;
.bss:0042013D                 db    ? ;
.bss:0042013E                 db    ? ;
.bss:0042013F                 db    ? ;
.bss:00420140                 db    ? ;
.bss:00420141                 db    ? ;
.bss:00420142                 db    ? ;
.bss:00420143                 db    ? ;
.bss:00420144                 db    ? ;
.bss:00420145                 db    ? ;
.bss:00420146                 db    ? ;
.bss:00420147                 db    ? ;
.bss:00420148                 db    ? ;
.bss:00420149                 db    ? ;
.bss:0042014A                 db    ? ;
.bss:0042014B                 db    ? ;
.bss:0042014C                 db    ? ;
.bss:0042014D                 db    ? ;
.bss:0042014E                 db    ? ;
.bss:0042014F                 db    ? ;
.bss:00420150                 db    ? ;
.bss:00420151                 db    ? ;
.bss:00420152                 db    ? ;
.bss:00420153                 db    ? ;
.bss:00420154                 db    ? ;
.bss:00420155                 db    ? ;
.bss:00420156                 db    ? ;
.bss:00420157                 db    ? ;
.bss:00420158                 db    ? ;
.bss:00420159                 db    ? ;
.bss:0042015A                 db    ? ;
.bss:0042015B                 db    ? ;
.bss:0042015C                 db    ? ;
.bss:0042015D                 db    ? ;
.bss:0042015E                 db    ? ;
.bss:0042015F                 db    ? ;
.bss:00420160                 db    ? ;
.bss:00420161                 db    ? ;
.bss:00420162                 db    ? ;
.bss:00420163                 db    ? ;
.bss:00420164                 db    ? ;
.bss:00420165                 db    ? ;
.bss:00420166                 db    ? ;
.bss:00420167                 db    ? ;
.bss:00420168                 db    ? ;
.bss:00420169                 db    ? ;
.bss:0042016A                 db    ? ;
.bss:0042016B                 db    ? ;
.bss:0042016C                 db    ? ;
.bss:0042016D                 db    ? ;
.bss:0042016E                 db    ? ;
.bss:0042016F                 db    ? ;
.bss:00420170                 db    ? ;
.bss:00420171                 db    ? ;
.bss:00420172                 db    ? ;
.bss:00420173                 db    ? ;
.bss:00420174                 db    ? ;
.bss:00420175                 db    ? ;
.bss:00420176                 db    ? ;
.bss:00420177                 db    ? ;
.bss:00420178                 db    ? ;
.bss:00420179                 db    ? ;
.bss:0042017A                 db    ? ;
.bss:0042017B                 db    ? ;
.bss:0042017C                 db    ? ;
.bss:0042017D                 db    ? ;
.bss:0042017E                 db    ? ;
.bss:0042017F                 db    ? ;
.bss:00420180                 db    ? ;
.bss:00420181                 db    ? ;
.bss:00420182                 db    ? ;
.bss:00420183                 db    ? ;
.bss:00420184                 db    ? ;
.bss:00420185                 db    ? ;
.bss:00420186                 db    ? ;
.bss:00420187                 db    ? ;
.bss:00420188                 db    ? ;
.bss:00420189                 db    ? ;
.bss:0042018A                 db    ? ;
.bss:0042018B                 db    ? ;
.bss:0042018C                 db    ? ;
.bss:0042018D                 db    ? ;
.bss:0042018E                 db    ? ;
.bss:0042018F                 db    ? ;
.bss:00420190                 db    ? ;
.bss:00420191                 db    ? ;
.bss:00420192                 db    ? ;
.bss:00420193                 db    ? ;
.bss:00420194                 db    ? ;
.bss:00420195                 db    ? ;
.bss:00420196                 db    ? ;
.bss:00420197                 db    ? ;
.bss:00420198                 db    ? ;
.bss:00420199                 db    ? ;
.bss:0042019A                 db    ? ;
.bss:0042019B                 db    ? ;
.bss:0042019C                 db    ? ;
.bss:0042019D                 db    ? ;
.bss:0042019E                 db    ? ;
.bss:0042019F                 db    ? ;
.bss:004201A0                 db    ? ;
.bss:004201A1                 db    ? ;
.bss:004201A2                 db    ? ;
.bss:004201A3                 db    ? ;
.bss:004201A4                 db    ? ;
.bss:004201A5                 db    ? ;
.bss:004201A6                 db    ? ;
.bss:004201A7                 db    ? ;
.bss:004201A8                 db    ? ;
.bss:004201A9                 db    ? ;
.bss:004201AA                 db    ? ;
.bss:004201AB                 db    ? ;
.bss:004201AC                 db    ? ;
.bss:004201AD                 db    ? ;
.bss:004201AE                 db    ? ;
.bss:004201AF                 db    ? ;
.bss:004201B0                 db    ? ;
.bss:004201B1                 db    ? ;
.bss:004201B2                 db    ? ;
.bss:004201B3                 db    ? ;
.bss:004201B4                 db    ? ;
.bss:004201B5                 db    ? ;
.bss:004201B6                 db    ? ;
.bss:004201B7                 db    ? ;
.bss:004201B8                 db    ? ;
.bss:004201B9                 db    ? ;
.bss:004201BA                 db    ? ;
.bss:004201BB                 db    ? ;
.bss:004201BC                 db    ? ;
.bss:004201BD                 db    ? ;
.bss:004201BE                 db    ? ;
.bss:004201BF                 db    ? ;
.bss:004201C0                 db    ? ;
.bss:004201C1                 db    ? ;
.bss:004201C2                 db    ? ;
.bss:004201C3                 db    ? ;
.bss:004201C4                 db    ? ;
.bss:004201C5                 db    ? ;
.bss:004201C6                 db    ? ;
.bss:004201C7                 db    ? ;
.bss:004201C8                 db    ? ;
.bss:004201C9                 db    ? ;
.bss:004201CA                 db    ? ;
.bss:004201CB                 db    ? ;
.bss:004201CC                 db    ? ;
.bss:004201CD                 db    ? ;
.bss:004201CE                 db    ? ;
.bss:004201CF                 db    ? ;
.bss:004201D0                 db    ? ;
.bss:004201D1                 db    ? ;
.bss:004201D2                 db    ? ;
.bss:004201D3                 db    ? ;
.bss:004201D4                 db    ? ;
.bss:004201D5                 db    ? ;
.bss:004201D6                 db    ? ;
.bss:004201D7                 db    ? ;
.bss:004201D8                 db    ? ;
.bss:004201D9                 db    ? ;
.bss:004201DA                 db    ? ;
.bss:004201DB                 db    ? ;
.bss:004201DC                 db    ? ;
.bss:004201DD                 db    ? ;
.bss:004201DE                 db    ? ;
.bss:004201DF                 db    ? ;
.bss:004201E0                 db    ? ;
.bss:004201E1                 db    ? ;
.bss:004201E2                 db    ? ;
.bss:004201E3                 db    ? ;
.bss:004201E4                 db    ? ;
.bss:004201E5                 db    ? ;
.bss:004201E6                 db    ? ;
.bss:004201E7                 db    ? ;
.bss:004201E8                 db    ? ;
.bss:004201E9                 db    ? ;
.bss:004201EA                 db    ? ;
.bss:004201EB                 db    ? ;
.bss:004201EC                 db    ? ;
.bss:004201ED                 db    ? ;
.bss:004201EE                 db    ? ;
.bss:004201EF                 db    ? ;
.bss:004201F0 dword_4201F0    dd ?                    ; DATA XREF: .text:loc_40CD41↑o
.bss:004201F0                                         ; .text:loc_40CD60↑o ...
.bss:004201F4 dword_4201F4    dd ?                    ; DATA XREF: .text:loc_40CDE0↑o
.bss:004201F4                                         ; .text:0040D268↑r ...
.bss:004201F8 dword_4201F8    dd ?                    ; DATA XREF: .text:0040D262↑r
.bss:004201F8                                         ; sub_40D310+2C↑r
.bss:004201FC dword_4201FC    dd ?                    ; DATA XREF: .text:0040D256↑r
.bss:004201FC                                         ; sub_40D310+22↑r
.bss:00420200 dword_420200    dd ?                    ; DATA XREF: .text:0040D272↑r
.bss:00420200                                         ; sub_40D310+36↑r
.bss:00420204 dword_420204    dd ?                    ; DATA XREF: .text:0040D282↑r
.bss:00420204                                         ; sub_40D310+4E↑r
.bss:00420208 dword_420208    dd ?                    ; DATA XREF: .text:0040D29F↑r
.bss:00420208                                         ; sub_40D310+62↑r
.bss:0042020C dword_42020C    dd ?                    ; DATA XREF: .text:0040D295↑r
.bss:0042020C                                         ; sub_40D310+70↑r
.bss:00420210 dword_420210    dd ?                    ; DATA XREF: .text:0040D278↑r
.bss:00420210                                         ; sub_40D310+7A↑r
.bss:00420214                 align 10h
.bss:00420220 dword_420220    dd ?                    ; DATA XREF: .text:0040D5A8↑r
.bss:00420220                                         ; .text:loc_40D5DA↑w ...
.bss:00420224                 align 10h
.bss:00420230 dword_420230    dd ?                    ; DATA XREF: .text:0040D62F↑r
.bss:00420230                                         ; .text:0040D65D↑w ...
.bss:00420234                 align 10h
.bss:00420240 unk_420240      db    ? ;               ; DATA XREF: .text:0040D5C5↑o
.bss:00420240                                         ; .text:0040D5FC↑o ...
.bss:00420241                 db    ? ;
.bss:00420242                 db    ? ;
.bss:00420243                 db    ? ;
.bss:00420244                 db    ? ;
.bss:00420245                 db    ? ;
.bss:00420246                 db    ? ;
.bss:00420247                 db    ? ;
.bss:00420248                 db    ? ;
.bss:00420249                 db    ? ;
.bss:0042024A                 db    ? ;
.bss:0042024B                 db    ? ;
.bss:0042024C                 db    ? ;
.bss:0042024D                 db    ? ;
.bss:0042024E                 db    ? ;
.bss:0042024F                 db    ? ;
.bss:00420250                 db    ? ;
.bss:00420251                 db    ? ;
.bss:00420252                 db    ? ;
.bss:00420253                 db    ? ;
.bss:00420254                 db    ? ;
.bss:00420255                 db    ? ;
.bss:00420256                 db    ? ;
.bss:00420257                 db    ? ;
.bss:00420258                 db    ? ;
.bss:00420259                 db    ? ;
.bss:0042025A                 db    ? ;
.bss:0042025B                 db    ? ;
.bss:0042025C                 db    ? ;
.bss:0042025D                 db    ? ;
.bss:0042025E                 db    ? ;
.bss:0042025F                 db    ? ;
.bss:00420260 unk_420260      db    ? ;               ; DATA XREF: .text:0040D648↑o
.bss:00420260                                         ; .text:0040D67F↑o ...
.bss:00420261                 db    ? ;
.bss:00420262                 db    ? ;
.bss:00420263                 db    ? ;
.bss:00420264                 db    ? ;
.bss:00420265                 db    ? ;
.bss:00420266                 db    ? ;
.bss:00420267                 db    ? ;
.bss:00420268                 db    ? ;
.bss:00420269                 db    ? ;
.bss:0042026A                 db    ? ;
.bss:0042026B                 db    ? ;
.bss:0042026C                 db    ? ;
.bss:0042026D                 db    ? ;
.bss:0042026E                 db    ? ;
.bss:0042026F                 db    ? ;
.bss:00420270                 db    ? ;
.bss:00420271                 db    ? ;
.bss:00420272                 db    ? ;
.bss:00420273                 db    ? ;
.bss:00420274                 db    ? ;
.bss:00420275                 db    ? ;
.bss:00420276                 db    ? ;
.bss:00420277                 db    ? ;
.bss:00420278                 db    ? ;
.bss:00420279                 db    ? ;
.bss:0042027A                 db    ? ;
.bss:0042027B                 db    ? ;
.bss:0042027C                 db    ? ;
.bss:0042027D                 db    ? ;
.bss:0042027E                 db    ? ;
.bss:0042027F                 db    ? ;
.bss:00420280 dword_420280    dd ?                    ; DATA XREF: sub_410970+AB↑r
.bss:00420280                                         ; sub_410970+334B↑w
.bss:00420284                 align 10h
.bss:00420290 byte_420290     db ?                    ; DATA XREF: sub_40DA60:loc_40E4CC↑r
.bss:00420290                                         ; sub_40DA60:loc_40E4F8↑r ...
.bss:00420291                 db    ? ;
.bss:00420292                 db    ? ;
.bss:00420293                 db    ? ;
.bss:00420294                 db    ? ;
.bss:00420295                 db    ? ;
.bss:00420296                 db    ? ;
.bss:00420297                 db    ? ;
.bss:00420298                 db    ? ;
.bss:00420299                 db    ? ;
.bss:0042029A                 db    ? ;
.bss:0042029B                 db    ? ;
.bss:0042029C                 db    ? ;
.bss:0042029D                 db    ? ;
.bss:0042029E                 db    ? ;
.bss:0042029F                 db    ? ;
.bss:004202A0                 db    ? ;
.bss:004202A1                 db    ? ;
.bss:004202A2                 db    ? ;
.bss:004202A3                 db    ? ;
.bss:004202A4                 db    ? ;
.bss:004202A5                 db    ? ;
.bss:004202A6                 db    ? ;
.bss:004202A7                 db    ? ;
.bss:004202A8                 db    ? ;
.bss:004202A9                 db    ? ;
.bss:004202AA                 db    ? ;
.bss:004202AB                 db    ? ;
.bss:004202AC                 db    ? ;
.bss:004202AD                 db    ? ;
.bss:004202AE                 db    ? ;
.bss:004202AF                 db    ? ;
.bss:004202B0                 db    ? ;
.bss:004202B1                 db    ? ;
.bss:004202B2                 db    ? ;
.bss:004202B3                 db    ? ;
.bss:004202B4                 db    ? ;
.bss:004202B5                 db    ? ;
.bss:004202B6                 db    ? ;
.bss:004202B7                 db    ? ;
.bss:004202B8                 db    ? ;
.bss:004202B9                 db    ? ;
.bss:004202BA                 db    ? ;
.bss:004202BB                 db    ? ;
.bss:004202BC                 db    ? ;
.bss:004202BD                 db    ? ;
.bss:004202BE                 db    ? ;
.bss:004202BF                 db    ? ;
.bss:004202C0                 db    ? ;
.bss:004202C1                 db    ? ;
.bss:004202C2                 db    ? ;
.bss:004202C3                 db    ? ;
.bss:004202C4                 db    ? ;
.bss:004202C5                 db    ? ;
.bss:004202C6                 db    ? ;
.bss:004202C7                 db    ? ;
.bss:004202C8                 db    ? ;
.bss:004202C9                 db    ? ;
.bss:004202CA                 db    ? ;
.bss:004202CB                 db    ? ;
.bss:004202CC                 db    ? ;
.bss:004202CD                 db    ? ;
.bss:004202CE                 db    ? ;
.bss:004202CF                 db    ? ;
.bss:004202D0                 db    ? ;
.bss:004202D1                 db    ? ;
.bss:004202D2                 db    ? ;
.bss:004202D3                 db    ? ;
.bss:004202D4                 db    ? ;
.bss:004202D5                 db    ? ;
.bss:004202D6                 db    ? ;
.bss:004202D7                 db    ? ;
.bss:004202D8                 db    ? ;
.bss:004202D9                 db    ? ;
.bss:004202DA                 db    ? ;
.bss:004202DB                 db    ? ;
.bss:004202DC                 db    ? ;
.bss:004202DD                 db    ? ;
.bss:004202DE                 db    ? ;
.bss:004202DF                 db    ? ;
.bss:004202E0                 db    ? ;
.bss:004202E1                 db    ? ;
.bss:004202E2                 db    ? ;
.bss:004202E3                 db    ? ;
.bss:004202E4                 db    ? ;
.bss:004202E5                 db    ? ;
.bss:004202E6                 db    ? ;
.bss:004202E7                 db    ? ;
.bss:004202E8                 db    ? ;
.bss:004202E9                 db    ? ;
.bss:004202EA                 db    ? ;
.bss:004202EB                 db    ? ;
.bss:004202EC                 db    ? ;
.bss:004202ED                 db    ? ;
.bss:004202EE                 db    ? ;
.bss:004202EF byte_4202EF     db ?                    ; DATA XREF: sub_410970+333F↑w
.bss:004202F0                 db    ? ;
.bss:004202F1                 db    ? ;
.bss:004202F2                 db    ? ;
.bss:004202F3                 db    ? ;
.bss:004202F4                 db    ? ;
.bss:004202F5                 db    ? ;
.bss:004202F6                 db    ? ;
.bss:004202F7                 db    ? ;
.bss:004202F8                 db    ? ;
.bss:004202F9                 db    ? ;
.bss:004202FA                 db    ? ;
.bss:004202FB                 db    ? ;
.bss:004202FC                 db    ? ;
.bss:004202FD                 db    ? ;
.bss:004202FE                 db    ? ;
.bss:004202FF                 db    ? ;
.bss:00420300                 db    ? ;
.bss:00420301                 db    ? ;
.bss:00420302                 db    ? ;
.bss:00420303                 db    ? ;
.bss:00420304                 db    ? ;
.bss:00420305                 db    ? ;
.bss:00420306                 db    ? ;
.bss:00420307                 db    ? ;
.bss:00420308                 db    ? ;
.bss:00420309                 db    ? ;
.bss:0042030A                 db    ? ;
.bss:0042030B                 db    ? ;
.bss:0042030C                 db    ? ;
.bss:0042030D                 db    ? ;
.bss:0042030E                 db    ? ;
.bss:0042030F                 db    ? ;
.bss:00420310                 db    ? ;
.bss:00420311                 db    ? ;
.bss:00420312                 db    ? ;
.bss:00420313                 db    ? ;
.bss:00420314                 db    ? ;
.bss:00420315                 db    ? ;
.bss:00420316                 db    ? ;
.bss:00420317                 db    ? ;
.bss:00420318                 db    ? ;
.bss:00420319                 db    ? ;
.bss:0042031A                 db    ? ;
.bss:0042031B                 db    ? ;
.bss:0042031C                 db    ? ;
.bss:0042031D                 db    ? ;
.bss:0042031E                 db    ? ;
.bss:0042031F                 db    ? ;
.bss:00420320                 db    ? ;
.bss:00420321                 db    ? ;
.bss:00420322                 db    ? ;
.bss:00420323                 db    ? ;
.bss:00420324                 db    ? ;
.bss:00420325                 db    ? ;
.bss:00420326                 db    ? ;
.bss:00420327                 db    ? ;
.bss:00420328                 db    ? ;
.bss:00420329                 db    ? ;
.bss:0042032A                 db    ? ;
.bss:0042032B                 db    ? ;
.bss:0042032C                 db    ? ;
.bss:0042032D                 db    ? ;
.bss:0042032E                 db    ? ;
.bss:0042032F                 db    ? ;
.bss:00420330                 db    ? ;
.bss:00420331                 db    ? ;
.bss:00420332                 db    ? ;
.bss:00420333                 db    ? ;
.bss:00420334                 db    ? ;
.bss:00420335                 db    ? ;
.bss:00420336                 db    ? ;
.bss:00420337                 db    ? ;
.bss:00420338                 db    ? ;
.bss:00420339                 db    ? ;
.bss:0042033A                 db    ? ;
.bss:0042033B                 db    ? ;
.bss:0042033C                 db    ? ;
.bss:0042033D                 db    ? ;
.bss:0042033E                 db    ? ;
.bss:0042033F                 db    ? ;
.bss:00420340                 db    ? ;
.bss:00420341                 db    ? ;
.bss:00420342                 db    ? ;
.bss:00420343                 db    ? ;
.bss:00420344                 db    ? ;
.bss:00420345                 db    ? ;
.bss:00420346                 db    ? ;
.bss:00420347                 db    ? ;
.bss:00420348                 db    ? ;
.bss:00420349                 db    ? ;
.bss:0042034A                 db    ? ;
.bss:0042034B                 db    ? ;
.bss:0042034C                 db    ? ;
.bss:0042034D                 db    ? ;
.bss:0042034E                 db    ? ;
.bss:0042034F                 db    ? ;
.bss:00420350                 db    ? ;
.bss:00420351                 db    ? ;
.bss:00420352                 db    ? ;
.bss:00420353                 db    ? ;
.bss:00420354                 db    ? ;
.bss:00420355                 db    ? ;
.bss:00420356                 db    ? ;
.bss:00420357                 db    ? ;
.bss:00420358                 db    ? ;
.bss:00420359                 db    ? ;
.bss:0042035A                 db    ? ;
.bss:0042035B                 db    ? ;
.bss:0042035C                 db    ? ;
.bss:0042035D                 db    ? ;
.bss:0042035E                 db    ? ;
.bss:0042035F                 db    ? ;
.bss:00420360                 db    ? ;
.bss:00420361                 db    ? ;
.bss:00420362                 db    ? ;
.bss:00420363                 db    ? ;
.bss:00420364                 db    ? ;
.bss:00420365                 db    ? ;
.bss:00420366                 db    ? ;
.bss:00420367                 db    ? ;
.bss:00420368                 db    ? ;
.bss:00420369                 db    ? ;
.bss:0042036A                 db    ? ;
.bss:0042036B                 db    ? ;
.bss:0042036C                 db    ? ;
.bss:0042036D                 db    ? ;
.bss:0042036E                 db    ? ;
.bss:0042036F                 db    ? ;
.bss:00420370                 db    ? ;
.bss:00420371                 db    ? ;
.bss:00420372                 db    ? ;
.bss:00420373                 db    ? ;
.bss:00420374                 db    ? ;
.bss:00420375                 db    ? ;
.bss:00420376                 db    ? ;
.bss:00420377                 db    ? ;
.bss:00420378                 db    ? ;
.bss:00420379                 db    ? ;
.bss:0042037A                 db    ? ;
.bss:0042037B                 db    ? ;
.bss:0042037C                 db    ? ;
.bss:0042037D                 db    ? ;
.bss:0042037E                 db    ? ;
.bss:0042037F                 db    ? ;
.bss:00420380                 db    ? ;
.bss:00420381                 db    ? ;
.bss:00420382                 db    ? ;
.bss:00420383                 db    ? ;
.bss:00420384                 db    ? ;
.bss:00420385                 db    ? ;
.bss:00420386                 db    ? ;
.bss:00420387                 db    ? ;
.bss:00420388                 db    ? ;
.bss:00420389                 db    ? ;
.bss:0042038A                 db    ? ;
.bss:0042038B                 db    ? ;
.bss:0042038C                 db    ? ;
.bss:0042038D                 db    ? ;
.bss:0042038E                 db    ? ;
.bss:0042038F                 db    ? ;
.bss:00420390 unk_420390      db    ? ;               ; DATA XREF: sub_40DA60+148↑o
.bss:00420390                                         ; sub_40DA60+153↑o ...
.bss:00420391                 db    ? ;
.bss:00420392                 db    ? ;
.bss:00420393                 db    ? ;
.bss:00420394                 db    ? ;
.bss:00420395                 db    ? ;
.bss:00420396                 db    ? ;
.bss:00420397                 db    ? ;
.bss:00420398                 db    ? ;
.bss:00420399                 db    ? ;
.bss:0042039A                 db    ? ;
.bss:0042039B                 db    ? ;
.bss:0042039C                 db    ? ;
.bss:0042039D                 db    ? ;
.bss:0042039E                 db    ? ;
.bss:0042039F                 db    ? ;
.bss:004203A0 ; char *Str1
.bss:004203A0 Str1            dd ?                    ; DATA XREF: sub_4144B4:loc_4144ED↑w
.bss:004203A0                                         ; sub_4144B4:loc_414620↑r
.bss:004203A4                 align 10h
.bss:004203B0 dword_4203B0    dd ?                    ; DATA XREF: sub_4144B4+2D↑r
.bss:004203B0                                         ; sub_4144B4+3F↑w
.bss:004203B4                 align 10h
.bss:004203C0 dword_4203C0    dd ?                    ; DATA XREF: sub_414650:loc_4146BB↑r
.bss:004203C0                                         ; sub_414650+F9↑w
.bss:004203C4                 align 10h
.bss:004203D0 dword_4203D0    dd ?                    ; DATA XREF: sub_414650+8E↑r
.bss:004203D0                                         ; sub_414650+103↑w
.bss:004203D4                 align 10h
.bss:004203E0 dword_4203E0    dd ?                    ; DATA XREF: sub_414650+5D↑r
.bss:004203E0                                         ; sub_414650+EE↑w
.bss:004203E4                 align 10h
.bss:004203F0 dword_4203F0    dd ?                    ; DATA XREF: sub_415280+100↑r
.bss:004203F0                                         ; sub_415280+308↑w
.bss:004203F4                 align 10h
.bss:00420400 ; char *Str
.bss:00420400 Str             dd ?                    ; DATA XREF: sub_415280:loc_4155E4↑r
.bss:00420400                                         ; sub_415280+3B6↑r ...
.bss:00420404                 align 10h
.bss:00420410 dword_420410    dd ?                    ; DATA XREF: sub_417880+1C↑r
.bss:00420410                                         ; sub_417880+104↑w
.bss:00420414                 align 10h
.bss:00420420 dword_420420    dd ?                    ; DATA XREF: sub_417880+B↑r
.bss:00420420                                         ; sub_417880+71↑w
.bss:00420424                 align 10h
.bss:00420430 dword_420430    dd ?                    ; DATA XREF: sub_417880+85↑r
.bss:00420430                                         ; sub_417880+B9↑w
.bss:00420434 dword_420434    dd ?                    ; DATA XREF: sub_417880+C4↑w
.bss:00420438 dword_420438    dd ?                    ; DATA XREF: sub_417880+2E↑o
.bss:00420438                                         ; sub_417880+CF↑w
.bss:0042043C dword_42043C    dd ?                    ; DATA XREF: sub_417880+DA↑w
.bss:00420440                 db    ? ;
.bss:00420441                 db    ? ;
.bss:00420442                 db    ? ;
.bss:00420443                 db    ? ;
.bss:00420444                 db    ? ;
.bss:00420445                 db    ? ;
.bss:00420446                 db    ? ;
.bss:00420447                 db    ? ;
.bss:00420448                 db    ? ;
.bss:00420449                 db    ? ;
.bss:0042044A                 db    ? ;
.bss:0042044B                 db    ? ;
.bss:0042044C                 db    ? ;
.bss:0042044D                 db    ? ;
.bss:0042044E                 db    ? ;
.bss:0042044F                 db    ? ;
.bss:00420450                 db    ? ;
.bss:00420451                 db    ? ;
.bss:00420452                 db    ? ;
.bss:00420453                 db    ? ;
.bss:00420454                 db    ? ;
.bss:00420455                 db    ? ;
.bss:00420456                 db    ? ;
.bss:00420457                 db    ? ;
.bss:00420458                 db    ? ;
.bss:00420459                 db    ? ;
.bss:0042045A                 db    ? ;
.bss:0042045B                 db    ? ;
.bss:0042045C                 db    ? ;
.bss:0042045D                 db    ? ;
.bss:0042045E                 db    ? ;
.bss:0042045F                 db    ? ;
.bss:00420460                 db    ? ;
.bss:00420461                 db    ? ;
.bss:00420462                 db    ? ;
.bss:00420463                 db    ? ;
.bss:00420464                 db    ? ;
.bss:00420465                 db    ? ;
.bss:00420466                 db    ? ;
.bss:00420467                 db    ? ;
.bss:00420468                 db    ? ;
.bss:00420469                 db    ? ;
.bss:0042046A                 db    ? ;
.bss:0042046B                 db    ? ;
.bss:0042046C                 db    ? ;
.bss:0042046D                 db    ? ;
.bss:0042046E                 db    ? ;
.bss:0042046F                 db    ? ;
.bss:00420470                 db    ? ;
.bss:00420471                 db    ? ;
.bss:00420472                 db    ? ;
.bss:00420473                 db    ? ;
.bss:00420474                 db    ? ;
.bss:00420475                 db    ? ;
.bss:00420476                 db    ? ;
.bss:00420477                 db    ? ;
.bss:00420478                 db    ? ;
.bss:00420479                 db    ? ;
.bss:0042047A                 db    ? ;
.bss:0042047B                 db    ? ;
.bss:0042047C                 db    ? ;
.bss:0042047D                 db    ? ;
.bss:0042047E                 db    ? ;
.bss:0042047F                 db    ? ;
.bss:00420480                 db    ? ;
.bss:00420481                 db    ? ;
.bss:00420482                 db    ? ;
.bss:00420483                 db    ? ;
.bss:00420484                 db    ? ;
.bss:00420485                 db    ? ;
.bss:00420486                 db    ? ;
.bss:00420487                 db    ? ;
.bss:00420488                 db    ? ;
.bss:00420489                 db    ? ;
.bss:0042048A                 db    ? ;
.bss:0042048B                 db    ? ;
.bss:0042048C                 db    ? ;
.bss:0042048D                 db    ? ;
.bss:0042048E                 db    ? ;
.bss:0042048F                 db    ? ;
.bss:00420490                 db    ? ;
.bss:00420491                 db    ? ;
.bss:00420492                 db    ? ;
.bss:00420493                 db    ? ;
.bss:00420494                 db    ? ;
.bss:00420495                 db    ? ;
.bss:00420496                 db    ? ;
.bss:00420497                 db    ? ;
.bss:00420498                 db    ? ;
.bss:00420499                 db    ? ;
.bss:0042049A                 db    ? ;
.bss:0042049B                 db    ? ;
.bss:0042049C                 db    ? ;
.bss:0042049D                 db    ? ;
.bss:0042049E                 db    ? ;
.bss:0042049F                 db    ? ;
.bss:004204A0                 db    ? ;
.bss:004204A1                 db    ? ;
.bss:004204A2                 db    ? ;
.bss:004204A3                 db    ? ;
.bss:004204A4                 db    ? ;
.bss:004204A5                 db    ? ;
.bss:004204A6                 db    ? ;
.bss:004204A7                 db    ? ;
.bss:004204A8                 db    ? ;
.bss:004204A9                 db    ? ;
.bss:004204AA                 db    ? ;
.bss:004204AB                 db    ? ;
.bss:004204AC                 db    ? ;
.bss:004204AD                 db    ? ;
.bss:004204AE                 db    ? ;
.bss:004204AF                 db    ? ;
.bss:004204B0                 db    ? ;
.bss:004204B1                 db    ? ;
.bss:004204B2                 db    ? ;
.bss:004204B3                 db    ? ;
.bss:004204B4                 db    ? ;
.bss:004204B5                 db    ? ;
.bss:004204B6                 db    ? ;
.bss:004204B7                 db    ? ;
.bss:004204B8                 db    ? ;
.bss:004204B9                 db    ? ;
.bss:004204BA                 db    ? ;
.bss:004204BB                 db    ? ;
.bss:004204BC                 db    ? ;
.bss:004204BD                 db    ? ;
.bss:004204BE                 db    ? ;
.bss:004204BF                 db    ? ;
.bss:004204C0                 db    ? ;
.bss:004204C1                 db    ? ;
.bss:004204C2                 db    ? ;
.bss:004204C3                 db    ? ;
.bss:004204C4                 db    ? ;
.bss:004204C5                 db    ? ;
.bss:004204C6                 db    ? ;
.bss:004204C7                 db    ? ;
.bss:004204C8                 db    ? ;
.bss:004204C9                 db    ? ;
.bss:004204CA                 db    ? ;
.bss:004204CB                 db    ? ;
.bss:004204CC                 db    ? ;
.bss:004204CD                 db    ? ;
.bss:004204CE                 db    ? ;
.bss:004204CF                 db    ? ;
.bss:004204D0                 db    ? ;
.bss:004204D1                 db    ? ;
.bss:004204D2                 db    ? ;
.bss:004204D3                 db    ? ;
.bss:004204D4                 db    ? ;
.bss:004204D5                 db    ? ;
.bss:004204D6                 db    ? ;
.bss:004204D7                 db    ? ;
.bss:004204D8                 db    ? ;
.bss:004204D9                 db    ? ;
.bss:004204DA                 db    ? ;
.bss:004204DB                 db    ? ;
.bss:004204DC                 db    ? ;
.bss:004204DD                 db    ? ;
.bss:004204DE                 db    ? ;
.bss:004204DF                 db    ? ;
.bss:004204E0                 db    ? ;
.bss:004204E1                 db    ? ;
.bss:004204E2                 db    ? ;
.bss:004204E3                 db    ? ;
.bss:004204E4                 db    ? ;
.bss:004204E5                 db    ? ;
.bss:004204E6                 db    ? ;
.bss:004204E7                 db    ? ;
.bss:004204E8                 db    ? ;
.bss:004204E9                 db    ? ;
.bss:004204EA                 db    ? ;
.bss:004204EB                 db    ? ;
.bss:004204EC                 db    ? ;
.bss:004204ED                 db    ? ;
.bss:004204EE                 db    ? ;
.bss:004204EF                 db    ? ;
.bss:004204F0                 db    ? ;
.bss:004204F1                 db    ? ;
.bss:004204F2                 db    ? ;
.bss:004204F3                 db    ? ;
.bss:004204F4                 db    ? ;
.bss:004204F5                 db    ? ;
.bss:004204F6                 db    ? ;
.bss:004204F7                 db    ? ;
.bss:004204F8                 db    ? ;
.bss:004204F9                 db    ? ;
.bss:004204FA                 db    ? ;
.bss:004204FB                 db    ? ;
.bss:004204FC                 db    ? ;
.bss:004204FD                 db    ? ;
.bss:004204FE                 db    ? ;
.bss:004204FF                 db    ? ;
.bss:00420500                 db    ? ;
.bss:00420501                 db    ? ;
.bss:00420502                 db    ? ;
.bss:00420503                 db    ? ;
.bss:00420504                 db    ? ;
.bss:00420505                 db    ? ;
.bss:00420506                 db    ? ;
.bss:00420507                 db    ? ;
.bss:00420508                 db    ? ;
.bss:00420509                 db    ? ;
.bss:0042050A                 db    ? ;
.bss:0042050B                 db    ? ;
.bss:0042050C                 db    ? ;
.bss:0042050D                 db    ? ;
.bss:0042050E                 db    ? ;
.bss:0042050F                 db    ? ;
.bss:00420510                 db    ? ;
.bss:00420511                 db    ? ;
.bss:00420512                 db    ? ;
.bss:00420513                 db    ? ;
.bss:00420514                 db    ? ;
.bss:00420515                 db    ? ;
.bss:00420516                 db    ? ;
.bss:00420517                 db    ? ;
.bss:00420518                 db    ? ;
.bss:00420519                 db    ? ;
.bss:0042051A                 db    ? ;
.bss:0042051B                 db    ? ;
.bss:0042051C                 db    ? ;
.bss:0042051D                 db    ? ;
.bss:0042051E                 db    ? ;
.bss:0042051F                 db    ? ;
.bss:00420520                 db    ? ;
.bss:00420521                 db    ? ;
.bss:00420522                 db    ? ;
.bss:00420523                 db    ? ;
.bss:00420524                 db    ? ;
.bss:00420525                 db    ? ;
.bss:00420526                 db    ? ;
.bss:00420527                 db    ? ;
.bss:00420528                 db    ? ;
.bss:00420529                 db    ? ;
.bss:0042052A                 db    ? ;
.bss:0042052B                 db    ? ;
.bss:0042052C                 db    ? ;
.bss:0042052D                 db    ? ;
.bss:0042052E                 db    ? ;
.bss:0042052F                 db    ? ;
.bss:00420530                 db    ? ;
.bss:00420531                 db    ? ;
.bss:00420532                 db    ? ;
.bss:00420533                 db    ? ;
.bss:00420534                 db    ? ;
.bss:00420535                 db    ? ;
.bss:00420536                 db    ? ;
.bss:00420537                 db    ? ;
.bss:00420538                 db    ? ;
.bss:00420539                 db    ? ;
.bss:0042053A                 db    ? ;
.bss:0042053B                 db    ? ;
.bss:0042053C                 db    ? ;
.bss:0042053D                 db    ? ;
.bss:0042053E                 db    ? ;
.bss:0042053F                 db    ? ;
.bss:00420540                 db    ? ;
.bss:00420541                 db    ? ;
.bss:00420542                 db    ? ;
.bss:00420543                 db    ? ;
.bss:00420544                 db    ? ;
.bss:00420545                 db    ? ;
.bss:00420546                 db    ? ;
.bss:00420547                 db    ? ;
.bss:00420548                 db    ? ;
.bss:00420549                 db    ? ;
.bss:0042054A                 db    ? ;
.bss:0042054B                 db    ? ;
.bss:0042054C                 db    ? ;
.bss:0042054D                 db    ? ;
.bss:0042054E                 db    ? ;
.bss:0042054F                 db    ? ;
.bss:00420550                 db    ? ;
.bss:00420551                 db    ? ;
.bss:00420552                 db    ? ;
.bss:00420553                 db    ? ;
.bss:00420554                 db    ? ;
.bss:00420555                 db    ? ;
.bss:00420556                 db    ? ;
.bss:00420557                 db    ? ;
.bss:00420558                 db    ? ;
.bss:00420559                 db    ? ;
.bss:0042055A                 db    ? ;
.bss:0042055B                 db    ? ;
.bss:0042055C                 db    ? ;
.bss:0042055D                 db    ? ;
.bss:0042055E                 db    ? ;
.bss:0042055F                 db    ? ;
.bss:00420560                 db    ? ;
.bss:00420561                 db    ? ;
.bss:00420562                 db    ? ;
.bss:00420563                 db    ? ;
.bss:00420564                 db    ? ;
.bss:00420565                 db    ? ;
.bss:00420566                 db    ? ;
.bss:00420567                 db    ? ;
.bss:00420568                 db    ? ;
.bss:00420569                 db    ? ;
.bss:0042056A                 db    ? ;
.bss:0042056B                 db    ? ;
.bss:0042056C                 db    ? ;
.bss:0042056D                 db    ? ;
.bss:0042056E                 db    ? ;
.bss:0042056F                 db    ? ;
.bss:00420570                 db    ? ;
.bss:00420571                 db    ? ;
.bss:00420572                 db    ? ;
.bss:00420573                 db    ? ;
.bss:00420574                 db    ? ;
.bss:00420575                 db    ? ;
.bss:00420576                 db    ? ;
.bss:00420577                 db    ? ;
.bss:00420578                 db    ? ;
.bss:00420579                 db    ? ;
.bss:0042057A                 db    ? ;
.bss:0042057B                 db    ? ;
.bss:0042057C                 db    ? ;
.bss:0042057D                 db    ? ;
.bss:0042057E                 db    ? ;
.bss:0042057F                 db    ? ;
.bss:00420580                 db    ? ;
.bss:00420581                 db    ? ;
.bss:00420582                 db    ? ;
.bss:00420583                 db    ? ;
.bss:00420584                 db    ? ;
.bss:00420585                 db    ? ;
.bss:00420586                 db    ? ;
.bss:00420587                 db    ? ;
.bss:00420588                 db    ? ;
.bss:00420589                 db    ? ;
.bss:0042058A                 db    ? ;
.bss:0042058B                 db    ? ;
.bss:0042058C                 db    ? ;
.bss:0042058D                 db    ? ;
.bss:0042058E                 db    ? ;
.bss:0042058F                 db    ? ;
.bss:00420590                 db    ? ;
.bss:00420591                 db    ? ;
.bss:00420592                 db    ? ;
.bss:00420593                 db    ? ;
.bss:00420594                 db    ? ;
.bss:00420595                 db    ? ;
.bss:00420596                 db    ? ;
.bss:00420597                 db    ? ;
.bss:00420598                 db    ? ;
.bss:00420599                 db    ? ;
.bss:0042059A                 db    ? ;
.bss:0042059B                 db    ? ;
.bss:0042059C                 db    ? ;
.bss:0042059D                 db    ? ;
.bss:0042059E                 db    ? ;
.bss:0042059F                 db    ? ;
.bss:004205A0                 db    ? ;
.bss:004205A1                 db    ? ;
.bss:004205A2                 db    ? ;
.bss:004205A3                 db    ? ;
.bss:004205A4                 db    ? ;
.bss:004205A5                 db    ? ;
.bss:004205A6                 db    ? ;
.bss:004205A7                 db    ? ;
.bss:004205A8                 db    ? ;
.bss:004205A9                 db    ? ;
.bss:004205AA                 db    ? ;
.bss:004205AB                 db    ? ;
.bss:004205AC                 db    ? ;
.bss:004205AD                 db    ? ;
.bss:004205AE                 db    ? ;
.bss:004205AF                 db    ? ;
.bss:004205B0                 db    ? ;
.bss:004205B1                 db    ? ;
.bss:004205B2                 db    ? ;
.bss:004205B3                 db    ? ;
.bss:004205B4                 db    ? ;
.bss:004205B5                 db    ? ;
.bss:004205B6                 db    ? ;
.bss:004205B7                 db    ? ;
.bss:004205B8                 db    ? ;
.bss:004205B9                 db    ? ;
.bss:004205BA                 db    ? ;
.bss:004205BB                 db    ? ;
.bss:004205BC                 db    ? ;
.bss:004205BD                 db    ? ;
.bss:004205BE                 db    ? ;
.bss:004205BF                 db    ? ;
.bss:004205C0                 db    ? ;
.bss:004205C1                 db    ? ;
.bss:004205C2                 db    ? ;
.bss:004205C3                 db    ? ;
.bss:004205C4                 db    ? ;
.bss:004205C5                 db    ? ;
.bss:004205C6                 db    ? ;
.bss:004205C7                 db    ? ;
.bss:004205C8                 db    ? ;
.bss:004205C9                 db    ? ;
.bss:004205CA                 db    ? ;
.bss:004205CB                 db    ? ;
.bss:004205CC                 db    ? ;
.bss:004205CD                 db    ? ;
.bss:004205CE                 db    ? ;
.bss:004205CF                 db    ? ;
.bss:004205D0                 db    ? ;
.bss:004205D1                 db    ? ;
.bss:004205D2                 db    ? ;
.bss:004205D3                 db    ? ;
.bss:004205D4                 db    ? ;
.bss:004205D5                 db    ? ;
.bss:004205D6                 db    ? ;
.bss:004205D7                 db    ? ;
.bss:004205D8                 db    ? ;
.bss:004205D9                 db    ? ;
.bss:004205DA                 db    ? ;
.bss:004205DB                 db    ? ;
.bss:004205DC                 db    ? ;
.bss:004205DD                 db    ? ;
.bss:004205DE                 db    ? ;
.bss:004205DF                 db    ? ;
.bss:004205E0                 db    ? ;
.bss:004205E1                 db    ? ;
.bss:004205E2                 db    ? ;
.bss:004205E3                 db    ? ;
.bss:004205E4                 db    ? ;
.bss:004205E5                 db    ? ;
.bss:004205E6                 db    ? ;
.bss:004205E7                 db    ? ;
.bss:004205E8                 db    ? ;
.bss:004205E9                 db    ? ;
.bss:004205EA                 db    ? ;
.bss:004205EB                 db    ? ;
.bss:004205EC                 db    ? ;
.bss:004205ED                 db    ? ;
.bss:004205EE                 db    ? ;
.bss:004205EF                 db    ? ;
.bss:004205F0                 db    ? ;
.bss:004205F1                 db    ? ;
.bss:004205F2                 db    ? ;
.bss:004205F3                 db    ? ;
.bss:004205F4                 db    ? ;
.bss:004205F5                 db    ? ;
.bss:004205F6                 db    ? ;
.bss:004205F7                 db    ? ;
.bss:004205F8                 db    ? ;
.bss:004205F9                 db    ? ;
.bss:004205FA                 db    ? ;
.bss:004205FB                 db    ? ;
.bss:004205FC                 db    ? ;
.bss:004205FD                 db    ? ;
.bss:004205FE                 db    ? ;
.bss:004205FF                 db    ? ;
.bss:00420600                 db    ? ;
.bss:00420601                 db    ? ;
.bss:00420602                 db    ? ;
.bss:00420603                 db    ? ;
.bss:00420604                 db    ? ;
.bss:00420605                 db    ? ;
.bss:00420606                 db    ? ;
.bss:00420607                 db    ? ;
.bss:00420608                 db    ? ;
.bss:00420609                 db    ? ;
.bss:0042060A                 db    ? ;
.bss:0042060B                 db    ? ;
.bss:0042060C                 db    ? ;
.bss:0042060D                 db    ? ;
.bss:0042060E                 db    ? ;
.bss:0042060F                 db    ? ;
.bss:00420610                 db    ? ;
.bss:00420611                 db    ? ;
.bss:00420612                 db    ? ;
.bss:00420613                 db    ? ;
.bss:00420614                 db    ? ;
.bss:00420615                 db    ? ;
.bss:00420616                 db    ? ;
.bss:00420617                 db    ? ;
.bss:00420618                 db    ? ;
.bss:00420619                 db    ? ;
.bss:0042061A                 db    ? ;
.bss:0042061B                 db    ? ;
.bss:0042061C                 db    ? ;
.bss:0042061D                 db    ? ;
.bss:0042061E                 db    ? ;
.bss:0042061F                 db    ? ;
.bss:00420620                 db    ? ;
.bss:00420621                 db    ? ;
.bss:00420622                 db    ? ;
.bss:00420623                 db    ? ;
.bss:00420624                 db    ? ;
.bss:00420625                 db    ? ;
.bss:00420626                 db    ? ;
.bss:00420627                 db    ? ;
.bss:00420628                 db    ? ;
.bss:00420629                 db    ? ;
.bss:0042062A                 db    ? ;
.bss:0042062B                 db    ? ;
.bss:0042062C                 db    ? ;
.bss:0042062D                 db    ? ;
.bss:0042062E                 db    ? ;
.bss:0042062F                 db    ? ;
.bss:00420630 dword_420630    dd ?                    ; DATA XREF: sub_418AE0+7↑r
.bss:00420630                                         ; sub_418AE0+2B↑w ...
.bss:00420634                 align 10h
.bss:00420640 ; struct _SYSTEM_INFO SystemInfo
.bss:00420640 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_418AE0+21↑o
.bss:00420640                                         ; sub_418AE0+33↑o
.bss:00420664                 align 10h
.bss:00420670 dword_420670    dd ?                    ; DATA XREF: sub_414650+3↑r
.bss:00420670                                         ; .text:loc_418E52↑w ...
.bss:00420674                 align 10h
.bss:00420680 dword_420680    dd ?                    ; DATA XREF: sub_419BB0+8↑r
.bss:00420680                                         ; sub_419CC0:loc_419D42↑w ...
.bss:00420684                 align 10h
.bss:00420690 ; struct _OSVERSIONINFOA VersionInformation
.bss:00420690 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_419CC0:loc_419CE0↑o
.bss:00420690                                         ; sub_419CC0+2C↑w ...
.bss:00420724 word_420724     dw ?                    ; DATA XREF: sub_419CC0:loc_419D73↑r
.bss:00420726                 align 4
.bss:00420728 word_420728     dw ?                    ; DATA XREF: .text:loc_419736↑r
.bss:00420728                                         ; .text:00419764↑r ...
.bss:0042072A byte_42072A     db ?                    ; DATA XREF: .text:004196F5↑r
.bss:0042072B                 align 10h
.bss:00420730 dword_420730    dd ?                    ; DATA XREF: sub_419CC0+6↑r
.bss:00420730                                         ; sub_419CC0+75↑w
.bss:00420734                 align 10h
.bss:00420740 dword_420740    dd ?                    ; DATA XREF: sub_41BB70+6E↑r
.bss:00420740                                         ; sub_41BB70+9A↑r ...
.bss:00420744 dword_420744    dd ?                    ; DATA XREF: sub_41BB70:loc_41BBD8↑r
.bss:00420744                                         ; sub_41BB70+A0↑r ...
.bss:00420748                 align 10h
.bss:00420750 dword_420750    dd ?                    ; DATA XREF: sub_4027B0+3B↑w
.bss:00420750                                         ; sub_4027B0+649↑r ...
.bss:00420754                 db    ? ;
.bss:00420755                 db    ? ;
.bss:00420756                 db    ? ;
.bss:00420757                 db    ? ;
.bss:00420758                 db    ? ;
.bss:00420759                 db    ? ;
.bss:0042075A                 db    ? ;
.bss:0042075B                 db    ? ;
.bss:0042075C                 db    ? ;
.bss:0042075D                 db    ? ;
.bss:0042075E                 db    ? ;
.bss:0042075F                 db    ? ;
.bss:00420760                 db    ? ;
.bss:00420761                 db    ? ;
.bss:00420762                 db    ? ;
.bss:00420763                 db    ? ;
.bss:00420764                 db    ? ;
.bss:00420765                 db    ? ;
.bss:00420766                 db    ? ;
.bss:00420767                 db    ? ;
.bss:00420768                 db    ? ;
.bss:00420769                 db    ? ;
.bss:0042076A                 db    ? ;
.bss:0042076B                 db    ? ;
.bss:0042076C                 db    ? ;
.bss:0042076D                 db    ? ;
.bss:0042076E                 db    ? ;
.bss:0042076F                 db    ? ;
.bss:00420770 ; char Block[]
.bss:00420770 Block           dd ?                    ; DATA XREF: sub_4027B0+5AE↑r
.bss:00420770                                         ; sub_4027B0+8D0↑r ...
.bss:00420774                 align 10h
.bss:00420780 dword_420780    dd ?                    ; DATA XREF: .text:004106C0↑r
.bss:00420780                                         ; .text:004106C9↑w ...
.bss:00420784                 align 10h
.bss:00420790 dword_420790    dd ?                    ; CODE XREF: sub_4144B4+63↑p
.bss:00420790                                         ; DATA XREF: sub_4143B0+1E↑r ...
.bss:00420794                 align 10h
.bss:004207A0 dword_4207A0    dd ?                    ; DATA XREF: sub_4143B0+4E↑w
.bss:004207A0                                         ; sub_4144B4+AB↑w
.bss:004207A4                 db    ? ;
.bss:004207A5                 db    ? ;
.bss:004207A6                 db    ? ;
.bss:004207A7                 db    ? ;
.bss:004207A8                 db    ? ;
.bss:004207A9                 db    ? ;
.bss:004207AA                 db    ? ;
.bss:004207AB                 db    ? ;
.bss:004207AC                 db    ? ;
.bss:004207AD                 db    ? ;
.bss:004207AE                 db    ? ;
.bss:004207AF                 db    ? ;
.bss:004207B0                 db    ? ;
.bss:004207B1                 db    ? ;
.bss:004207B2                 db    ? ;
.bss:004207B3                 db    ? ;
.bss:004207B4                 db    ? ;
.bss:004207B5                 db    ? ;
.bss:004207B6                 db    ? ;
.bss:004207B7                 db    ? ;
.bss:004207B8                 db    ? ;
.bss:004207B9                 db    ? ;
.bss:004207BA                 db    ? ;
.bss:004207BB                 db    ? ;
.bss:004207BC                 db    ? ;
.bss:004207BD                 db    ? ;
.bss:004207BE                 db    ? ;
.bss:004207BF                 db    ? ;
.bss:004207C0                 db    ? ;
.bss:004207C1                 db    ? ;
.bss:004207C2                 db    ? ;
.bss:004207C3                 db    ? ;
.bss:004207C4                 db    ? ;
.bss:004207C5                 db    ? ;
.bss:004207C6                 db    ? ;
.bss:004207C7                 db    ? ;
.bss:004207C8                 db    ? ;
.bss:004207C9                 db    ? ;
.bss:004207CA                 db    ? ;
.bss:004207CB                 db    ? ;
.bss:004207CC                 db    ? ;
.bss:004207CD                 db    ? ;
.bss:004207CE                 db    ? ;
.bss:004207CF                 db    ? ;
.bss:004207D0 dword_4207D0    dd ?                    ; DATA XREF: sub_4144B4+13↑r
.bss:004207D4                 align 1000h
.bss:004207D4 _bss            ends
.bss:004207D4
.idata:00421000 ; Section 4. (virtual address 00021000)
.idata:00421000 ; Virtual size                  : 00000FE8 (   4072.)
.idata:00421000 ; Section size in file          : 00001000 (   4096.)
.idata:00421000 ; Offset to raw data for section: 0001DC00
.idata:00421000 ; Flags C0000040: Data Readable Writable
.idata:00421000 ; Alignment     : default
.idata:00421000 ; ===========================================================================
.idata:00421000
.idata:00421000 ; Segment type: Externs
.idata:00421000 ; _idata
.idata:00421000
.idata:00421001
.idata:00421300 ;
.idata:00421300 ; Imports from libintl3.dll
.idata:00421300 ;
.idata:00421300                 extrn libintl_bindtextdomain:dword
.idata:00421300                                         ; CODE XREF: sub_4027B0+6B↑p
.idata:00421300                                         ; DATA XREF: sub_4027B0+6B↑r ...
.idata:00421304                 extrn libintl_gettext:dword
.idata:00421304                                         ; CODE XREF: sub_4027B0+643↑p
.idata:00421304                                         ; sub_4027B0+66A↑p ...
.idata:00421308                 extrn libintl_textdomain:dword
.idata:00421308                                         ; CODE XREF: sub_4027B0+78↑p
.idata:00421308                                         ; DATA XREF: sub_4027B0+78↑r ...
.idata:0042130C
.idata:00421314 ;
.idata:00421314 ; Imports from ADVAPI32.DLL
.idata:00421314 ;
.idata:00421314 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00421314                 extrn __imp_RegCloseKey:dword
.idata:00421314                                         ; DATA XREF: RegCloseKey↑r
.idata:00421318 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00421318                 extrn __imp_RegOpenKeyExA:dword
.idata:00421318                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0042131C ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0042131C                 extrn __imp_RegQueryValueExA:dword
.idata:0042131C                                         ; DATA XREF: RegQueryValueExA↑r
.idata:00421320
.idata:00421328 ;
.idata:00421328 ; Imports from KERNEL32.dll
.idata:00421328 ;
.idata:00421328 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:00421328                 extrn __imp_AreFileApisANSI:dword
.idata:00421328                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0042132C ; BOOL (__stdcall *BackupWrite)(HANDLE hFile, LPBYTE lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, BOOL bAbort, BOOL bProcessSecurity, LPVOID *lpContext)
.idata:0042132C                 extrn __imp_BackupWrite:dword
.idata:0042132C                                         ; DATA XREF: BackupWrite↑r
.idata:00421330 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:00421330                 extrn __imp_CloseHandle:dword
.idata:00421330                                         ; DATA XREF: CloseHandle↑r
.idata:00421334 ; BOOL (__stdcall *CopyFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName, BOOL bFailIfExists)
.idata:00421334                 extrn __imp_CopyFileA:dword
.idata:00421334                                         ; DATA XREF: CopyFileA↑r
.idata:00421338 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00421338                 extrn __imp_CreateDirectoryA:dword
.idata:00421338                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0042133C ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0042133C                 extrn __imp_CreateFileA:dword
.idata:0042133C                                         ; DATA XREF: CreateFileA↑r
.idata:00421340 ; HANDLE (__stdcall *CreateNamedPipeA)(LPCSTR lpName, DWORD dwOpenMode, DWORD dwPipeMode, DWORD nMaxInstances, DWORD nOutBufferSize, DWORD nInBufferSize, DWORD nDefaultTimeOut, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00421340                 extrn __imp_CreateNamedPipeA:dword
.idata:00421340                                         ; DATA XREF: CreateNamedPipeA↑r
.idata:00421344 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:00421344                 extrn __imp_DeleteFileA:dword
.idata:00421344                                         ; DATA XREF: DeleteFileA↑r
.idata:00421348 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:00421348                 extrn __imp_DeviceIoControl:dword
.idata:00421348                                         ; DATA XREF: DeviceIoControl↑r
.idata:0042134C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0042134C                 extrn __imp_ExitProcess:dword
.idata:0042134C                                         ; DATA XREF: ExitProcess↑r
.idata:00421350 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:00421350                 extrn __imp_FindClose:dword
.idata:00421350                                         ; DATA XREF: FindClose↑r
.idata:00421354 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00421354                 extrn __imp_FindFirstFileA:dword
.idata:00421354                                         ; DATA XREF: FindFirstFileA↑r
.idata:00421358 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:00421358                 extrn __imp_FindNextFileA:dword
.idata:00421358                                         ; DATA XREF: FindNextFileA↑r
.idata:0042135C ; DWORD (__stdcall *FormatMessageA)(DWORD dwFlags, LPCVOID lpSource, DWORD dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
.idata:0042135C                 extrn __imp_FormatMessageA:dword
.idata:0042135C                                         ; DATA XREF: FormatMessageA↑r
.idata:00421360 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00421360                 extrn __imp_FreeLibrary:dword
.idata:00421360                                         ; DATA XREF: FreeLibrary↑r
.idata:00421364 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00421364                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00421364                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00421368 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00421368                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00421368                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0042136C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0042136C                 extrn __imp_GetDriveTypeA:dword
.idata:0042136C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00421370 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00421370                 extrn __imp_GetFileAttributesA:dword
.idata:00421370                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00421374 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00421374                 extrn __imp_GetFileInformationByHandle:dword
.idata:00421374                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00421378 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00421378                 extrn __imp_GetFileSize:dword
.idata:00421378                                         ; DATA XREF: GetFileSize↑r
.idata:0042137C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0042137C                 extrn __imp_GetFileType:dword
.idata:0042137C                                         ; DATA XREF: GetFileType↑r
.idata:00421380 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00421380                 extrn __imp_GetFullPathNameA:dword
.idata:00421380                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00421384 ; DWORD (__stdcall *GetLastError)()
.idata:00421384                 extrn __imp_GetLastError:dword
.idata:00421384                                         ; DATA XREF: GetLastError↑r
.idata:00421388 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00421388                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00421388                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0042138C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0042138C                 extrn __imp_GetModuleFileNameA:dword
.idata:0042138C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00421390 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00421390                 extrn __imp_GetModuleHandleA:dword
.idata:00421390                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00421394 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00421394                 extrn __imp_GetProcAddress:dword
.idata:00421394                                         ; DATA XREF: GetProcAddress↑r
.idata:00421398 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00421398                 extrn __imp_GetProcessHeap:dword
.idata:00421398                                         ; DATA XREF: GetProcessHeap↑r
.idata:0042139C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0042139C                 extrn __imp_GetShortPathNameA:dword
.idata:0042139C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:004213A0 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:004213A0                 extrn __imp_GetSystemInfo:dword
.idata:004213A0                                         ; DATA XREF: GetSystemInfo↑r
.idata:004213A4 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:004213A4                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:004213A4                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:004213A8 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:004213A8                 extrn __imp_GetTimeZoneInformation:dword
.idata:004213A8                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:004213AC ; DWORD (__stdcall *GetVersion)()
.idata:004213AC                 extrn __imp_GetVersion:dword
.idata:004213AC                                         ; DATA XREF: GetVersion↑r
.idata:004213B0 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:004213B0                 extrn __imp_GetVersionExA:dword
.idata:004213B0                                         ; DATA XREF: GetVersionExA↑r
.idata:004213B4 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:004213B4                 extrn __imp_GetVolumeInformationA:dword
.idata:004213B4                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:004213B8 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:004213B8                 extrn __imp_HeapAlloc:dword
.idata:004213B8                                         ; DATA XREF: HeapAlloc↑r
.idata:004213BC ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:004213BC                 extrn __imp_HeapFree:dword
.idata:004213BC                                         ; DATA XREF: HeapFree↑r
.idata:004213C0 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:004213C0                 extrn __imp_LoadLibraryA:dword
.idata:004213C0                                         ; DATA XREF: LoadLibraryA↑r
.idata:004213C4 ; HLOCAL (__stdcall *LocalFree)(HLOCAL hMem)
.idata:004213C4                 extrn __imp_LocalFree:dword
.idata:004213C4                                         ; DATA XREF: LocalFree↑r
.idata:004213C8 ; BOOL (__stdcall *MoveFileA)(LPCSTR lpExistingFileName, LPCSTR lpNewFileName)
.idata:004213C8                 extrn __imp_MoveFileA:dword
.idata:004213C8                                         ; DATA XREF: MoveFileA↑r
.idata:004213CC ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:004213CC                 extrn __imp_MultiByteToWideChar:dword
.idata:004213CC                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:004213D0 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:004213D0                 extrn __imp_PeekNamedPipe:dword
.idata:004213D0                                         ; DATA XREF: PeekNamedPipe↑r
.idata:004213D4 ; BOOL (__stdcall *SetEndOfFile)(HANDLE hFile)
.idata:004213D4                 extrn __imp_SetEndOfFile:dword
.idata:004213D4                                         ; DATA XREF: SetEndOfFile↑r
.idata:004213D8 ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:004213D8                 extrn __imp_SetErrorMode:dword
.idata:004213D8                                         ; DATA XREF: SetErrorMode↑r
.idata:004213DC ; BOOL (__stdcall *SetFileAttributesA)(LPCSTR lpFileName, DWORD dwFileAttributes)
.idata:004213DC                 extrn __imp_SetFileAttributesA:dword
.idata:004213DC                                         ; DATA XREF: SetFileAttributesA↑r
.idata:004213E0 ; BOOL (__stdcall *SetFileTime)(HANDLE hFile, const FILETIME *lpCreationTime, const FILETIME *lpLastAccessTime, const FILETIME *lpLastWriteTime)
.idata:004213E0                 extrn __imp_SetFileTime:dword
.idata:004213E0                                         ; DATA XREF: SetFileTime↑r
.idata:004213E4 ; void (__stdcall *SetLastError)(DWORD dwErrCode)
.idata:004213E4                 extrn __imp_SetLastError:dword
.idata:004213E4                                         ; DATA XREF: SetLastError↑r
.idata:004213E8 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:004213E8                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:004213E8                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:004213EC ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:004213EC                 extrn __imp_UnlockFile:dword
.idata:004213EC                                         ; DATA XREF: UnlockFile↑r
.idata:004213F0 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:004213F0                 extrn __imp_lstrcmpiA:dword
.idata:004213F0                                         ; DATA XREF: lstrcmpiA↑r
.idata:004213F4 ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:004213F4                 extrn __imp_lstrcpyA:dword
.idata:004213F4                                         ; DATA XREF: lstrcpyA↑r
.idata:004213F8
.idata:00421400 ;
.idata:00421400 ; Imports from msvcrt.dll
.idata:00421400 ;
.idata:00421400 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00421400                 extrn __imp__chmod:dword
.idata:00421400                                         ; DATA XREF: _chmod↑r
.idata:00421404 ; int (__cdecl *_close)(int FileHandle)
.idata:00421404                 extrn __imp__close:dword
.idata:00421404                                         ; DATA XREF: _close↑r
.idata:00421408 ; int (__cdecl *_getpid)()
.idata:00421408                 extrn __imp__getpid:dword
.idata:00421408                                         ; DATA XREF: _getpid↑r
.idata:0042140C ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0042140C                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:00421410 ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:00421410                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:00421414 ; char *(__cdecl *_strdup)(const char *String)
.idata:00421414                 extrn __imp__strdup:dword
.idata:00421414                                         ; DATA XREF: _strdup↑r
.idata:00421418 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:00421418                 extrn __imp__stricmp:dword
.idata:00421418                                         ; DATA XREF: _stricmp↑r
.idata:0042141C ; int (__cdecl *_umask)(int Mode)
.idata:0042141C                 extrn __imp__umask:dword
.idata:0042141C                                         ; DATA XREF: _umask↑r
.idata:00421420 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:00421420                 extrn __imp__write:dword
.idata:00421420                                         ; DATA XREF: _write↑r
.idata:00421424
.idata:0042142C ;
.idata:0042142C ; Imports from MSVCP60.DLL
.idata:0042142C ;
.idata:0042142C ; wint_t (__cdecl *btowc)(int Ch)
.idata:0042142C                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:00421430 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:00421430                 extrn __imp_mbrtowc:dword
.idata:00421430                                         ; DATA XREF: mbrtowc↑r
.idata:00421434 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:00421434                 extrn __imp_wctype:dword
.idata:00421434                                         ; DATA XREF: wctype↑r
.idata:00421438
.idata:00421440 ;
.idata:00421440 ; Imports from msvcrt.dll
.idata:00421440 ;
.idata:00421440                 extrn __imp___getmainargs:dword
.idata:00421440                                         ; DATA XREF: __getmainargs↑r
.idata:00421444 ; int _mb_cur_max
.idata:00421444                 extrn __mb_cur_max:dword
.idata:00421444                                         ; DATA XREF: sub_40AFE0+49↑r
.idata:00421444                                         ; sub_40C270+7↑r ...
.idata:00421448 ; char ***(__cdecl *__p__environ)()
.idata:00421448                 extrn __imp___p__environ:dword
.idata:00421448                                         ; DATA XREF: __p__environ↑r
.idata:0042144C ; int *(__cdecl *__p__fmode)()
.idata:0042144C                 extrn __imp___p__fmode:dword
.idata:0042144C                                         ; DATA XREF: __p__fmode↑r
.idata:00421450 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:00421450                 extrn __set_app_type:dword
.idata:00421450                                         ; CODE XREF: start+D↑p
.idata:00421450                                         ; .text:0040102D↑p
.idata:00421450                                         ; DATA XREF: ...
.idata:00421454                 extrn __imp__assert:dword
.idata:00421454                                         ; DATA XREF: _assert↑r
.idata:00421458 ; void (__cdecl *_cexit)()
.idata:00421458                 extrn __imp__cexit:dword
.idata:00421458                                         ; DATA XREF: _cexit↑r
.idata:0042145C ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:0042145C                 extrn __imp__chmod_0:dword
.idata:0042145C                                         ; DATA XREF: _chmod_0↑r
.idata:00421460 ; int (__cdecl *_close_0)(int FileHandle)
.idata:00421460                 extrn __imp__close_0:dword
.idata:00421460                                         ; DATA XREF: _close_0↑r
.idata:00421464 ; int *(__cdecl *_errno)()
.idata:00421464                 extrn __imp__errno:dword
.idata:00421464                                         ; DATA XREF: _errno↑r
.idata:00421468 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:00421468                 extrn __imp__fdopen:dword
.idata:00421468                                         ; DATA XREF: _fdopen↑r
.idata:0042146C ; int (__cdecl *_filbuf)(FILE *File)
.idata:0042146C                 extrn __imp__filbuf:dword
.idata:0042146C                                         ; DATA XREF: _filbuf↑r
.idata:00421470 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:00421470                 extrn __imp__filelengthi64:dword
.idata:00421470                                         ; DATA XREF: _filelengthi64↑r
.idata:00421474 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:00421474                 extrn __imp__flsbuf:dword
.idata:00421474                                         ; DATA XREF: _flsbuf↑r
.idata:00421478 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:00421478                 extrn __imp__get_osfhandle:dword
.idata:00421478                                         ; DATA XREF: _get_osfhandle↑r
.idata:0042147C ; FILE iob[]
.idata:0042147C                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0042147C                                         ; sub_401080+75↑r ...
.idata:00421480 ; int (__cdecl *_isctype)(int C, int Type)
.idata:00421480                 extrn __imp__isctype:dword
.idata:00421480                                         ; DATA XREF: _isctype↑r
.idata:00421484 ; __int64 (__cdecl *_lseeki64)(int FileHandle, __int64 Offset, int Origin)
.idata:00421484                 extrn __imp__lseeki64:dword
.idata:00421484                                         ; DATA XREF: _lseeki64↑r
.idata:00421488 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:00421488                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:00421488                                         ; DATA XREF: .text:0040106C↑r
.idata:0042148C ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0042148C                 extrn __imp__open_0:dword
.idata:0042148C                                         ; DATA XREF: _open_0↑r
.idata:00421490 ; int (__cdecl *_open_osfhandle)(intptr_t OSFileHandle, int Flags)
.idata:00421490                 extrn __imp__open_osfhandle:dword
.idata:00421490                                         ; DATA XREF: _open_osfhandle↑r
.idata:00421494 ; const unsigned __int16 *pctype
.idata:00421494                 extrn _pctype:dword     ; DATA XREF: sub_40AFE0:loc_40B057↑r
.idata:00421494                                         ; sub_40C270:loc_40C964↑r ...
.idata:00421498 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00421498                 extrn __imp__setmode:dword
.idata:00421498                                         ; DATA XREF: _setmode↑r
.idata:0042149C ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0042149C                 extrn __imp__stricmp_0:dword
.idata:0042149C                                         ; DATA XREF: _stricmp_0↑r
.idata:004214A0 ; void (__cdecl __noreturn *abort)()
.idata:004214A0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004214A4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004214A4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004214A4                                         ; DATA XREF: sub_401040+C↑r
.idata:004214A8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004214A8                 extrn __imp_calloc:dword
.idata:004214A8                                         ; DATA XREF: calloc↑r
.idata:004214AC ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:004214AC                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:004214B0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004214B0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004214B4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004214B4                 extrn __imp_fclose:dword
.idata:004214B4                                         ; DATA XREF: fclose↑r
.idata:004214B8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004214B8                 extrn __imp_fflush:dword
.idata:004214B8                                         ; DATA XREF: fflush↑r
.idata:004214BC ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004214BC                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:004214C0 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:004214C0                 extrn __imp_fprintf:dword
.idata:004214C0                                         ; DATA XREF: fprintf↑r
.idata:004214C4 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:004214C4                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:004214C8 ; void (__cdecl *free)(void *Block)
.idata:004214C8                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:004214CC ; char *(__cdecl *getenv)(const char *VarName)
.idata:004214CC                 extrn __imp_getenv:dword
.idata:004214CC                                         ; DATA XREF: getenv↑r
.idata:004214D0 ; int (__cdecl *isalpha)(int C)
.idata:004214D0                 extrn __imp_isalpha:dword
.idata:004214D0                                         ; DATA XREF: isalpha↑r
.idata:004214D4 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:004214D4                 extrn __imp_iswctype:dword
.idata:004214D4                                         ; DATA XREF: iswctype↑r
.idata:004214D8 ; void *(__cdecl *malloc)(size_t Size)
.idata:004214D8                 extrn __imp_malloc:dword
.idata:004214D8                                         ; DATA XREF: malloc↑r
.idata:004214DC ; size_t (__cdecl *mbstowcs)(wchar_t *Dest, const char *Source, size_t MaxCount)
.idata:004214DC                 extrn __imp_mbstowcs:dword
.idata:004214DC                                         ; DATA XREF: mbstowcs↑r
.idata:004214E0 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004214E0                 extrn __imp_memcpy:dword
.idata:004214E0                                         ; DATA XREF: memcpy↑r
.idata:004214E4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004214E4                 extrn __imp_memset:dword
.idata:004214E4                                         ; DATA XREF: memset↑r
.idata:004214E8 ; int (*printf)(const char *const Format, ...)
.idata:004214E8                 extrn __imp_printf:dword
.idata:004214E8                                         ; DATA XREF: printf↑r
.idata:004214EC ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:004214EC                 extrn __imp_realloc:dword
.idata:004214EC                                         ; DATA XREF: realloc↑r
.idata:004214F0 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:004214F0                 extrn __imp_setlocale:dword
.idata:004214F0                                         ; DATA XREF: setlocale↑r
.idata:004214F4 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:004214F4                 extrn __imp_signal:dword
.idata:004214F4                                         ; DATA XREF: signal↑r
.idata:004214F8 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:004214F8                 extrn __imp_sprintf:dword
.idata:004214F8                                         ; DATA XREF: sprintf↑r
.idata:004214FC ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:004214FC                 extrn __imp_sscanf:dword
.idata:004214FC                                         ; DATA XREF: sscanf↑r
.idata:00421500 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00421500                 extrn __imp_strcat:dword
.idata:00421500                                         ; DATA XREF: strcat↑r
.idata:00421504 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00421504                 extrn __imp_strchr:dword
.idata:00421504                                         ; DATA XREF: strchr↑r
.idata:00421508 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00421508                 extrn __imp_strcmp:dword
.idata:00421508                                         ; DATA XREF: strcmp↑r
.idata:0042150C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0042150C                 extrn __imp_strcpy:dword
.idata:0042150C                                         ; DATA XREF: strcpy↑r
.idata:00421510 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00421510                 extrn __imp_strerror:dword
.idata:00421510                                         ; DATA XREF: strerror↑r
.idata:00421514 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00421514                 extrn __imp_strlen:dword
.idata:00421514                                         ; DATA XREF: strlen↑r
.idata:00421518 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:00421518                 extrn __imp_strncat:dword
.idata:00421518                                         ; DATA XREF: strncat↑r
.idata:0042151C ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0042151C                 extrn __imp_strncmp:dword
.idata:0042151C                                         ; DATA XREF: strncmp↑r
.idata:00421520 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:00421520                 extrn __imp_strncpy:dword
.idata:00421520                                         ; DATA XREF: strncpy↑r
.idata:00421524 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00421524                 extrn __imp_strpbrk:dword
.idata:00421524                                         ; DATA XREF: strpbrk↑r
.idata:00421528 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00421528                 extrn __imp_strrchr:dword
.idata:00421528                                         ; DATA XREF: strrchr↑r
.idata:0042152C ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0042152C                 extrn __imp_strspn:dword
.idata:0042152C                                         ; DATA XREF: strspn↑r
.idata:00421530 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:00421530                 extrn __imp_strstr:dword
.idata:00421530                                         ; DATA XREF: strstr↑r
.idata:00421534 ; int (__cdecl *tolower)(int C)
.idata:00421534                 extrn __imp_tolower:dword
.idata:00421534                                         ; DATA XREF: tolower↑r
.idata:00421538 ; int (__cdecl *toupper)(int C)
.idata:00421538                 extrn __imp_toupper:dword
.idata:00421538                                         ; DATA XREF: toupper↑r
.idata:0042153C ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0042153C                 extrn __imp_vfprintf:dword
.idata:0042153C                                         ; DATA XREF: vfprintf↑r
.idata:00421540
.idata:00421548 ;
.idata:00421548 ; Imports from OLE32.dll
.idata:00421548 ;
.idata:00421548 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:00421548                 extrn __imp_CoCreateInstance:dword
.idata:00421548                                         ; DATA XREF: CoCreateInstance↑r
.idata:0042154C ; void (__stdcall *CoUninitialize)()
.idata:0042154C                 extrn __imp_CoUninitialize:dword
.idata:0042154C                                         ; DATA XREF: CoUninitialize↑r
.idata:00421550 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:00421550                 extrn __imp_OleInitialize:dword
.idata:00421550                                         ; DATA XREF: OleInitialize↑r
.idata:00421554
.idata:00421554
.idata:00421554
.idata:00421554                 end start
