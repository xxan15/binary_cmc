.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : FEB9517D0B478E62CF6F487BF947956293125B35EF1AA300761A21C2B686832F
.text:00401000 ; Input MD5    : 60DD2174C899C50AE5C539051143DEC0
.text:00401000 ; Input CRC32  : 5E0AEAB8
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/rm.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A24D (Wed Apr 20 18:41:17 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 000183F0 (  99312.)
.text:00401000 ; Section size in file          : 00018400 (  99328.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4019A0+65↓p
.text:00401040                                         ; .text:004185A0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_418540
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_41A000
.text:004010A2                 mov     edx, dword_41A0C0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_41A004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_41A0E0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_41A0E0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_418510
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_41A000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_41A004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4019A0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_418540
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aDirectory      db 'directory',0        ; DATA XREF: .text:off_401300↓o
.text:0040128A aForce          db 'force',0            ; DATA XREF: .text:00401310↓o
.text:00401290 aInteractive    db 'interactive',0      ; DATA XREF: .text:00401320↓o
.text:0040129C aNoPreserveRoot_0 db 'no-preserve-root',0
.text:0040129C                                         ; DATA XREF: .text:00401330↓o
.text:004012AD aPreserveRoot   db 'preserve-root',0    ; DATA XREF: .text:00401340↓o
.text:004012BB aPresumeInputTt db 'presume-input-tty',0
.text:004012BB                                         ; DATA XREF: .text:00401350↓o
.text:004012CD aRecursive      db 'recursive',0        ; DATA XREF: .text:00401360↓o
.text:004012D7 aVerbose        db 'verbose',0          ; DATA XREF: .text:00401370↓o
.text:004012DF aHelp           db 'help',0             ; DATA XREF: .text:00401380↓o
.text:004012E4 aVersion        db 'version',0          ; DATA XREF: .text:00401390↓o
.text:004012EC                 align 20h
.text:00401300 off_401300      dd offset aDirectory    ; DATA XREF: sub_4019A0+A8↓o
.text:00401300                                         ; "directory"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 64h
.text:00401310                 dd offset aForce        ; "force"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 66h
.text:00401320                 dd offset aInteractive  ; "interactive"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 69h
.text:00401330                 dd offset aNoPreserveRoot_0 ; "no-preserve-root"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 80h
.text:00401340                 dd offset aPreserveRoot ; "preserve-root"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 81h
.text:00401350                 dd offset aPresumeInputTt ; "presume-input-tty"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 82h
.text:00401360                 dd offset aRecursive    ; "recursive"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 72h
.text:00401370                 dd offset aVerbose      ; "verbose"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 76h
.text:00401380                 dd offset aHelp         ; "help"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 0FFFFFF7Eh
.text:00401390                 dd offset aVersion      ; "version"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013B0 ; const char Locale
.text:004013B0 Locale          db 0                    ; DATA XREF: sub_4019A0+22↓o
.text:004013B1                 db 0EBh, 0Dh, 90h
.text:004013B4                 align 10h
.text:004013C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013C0                                         ; DATA XREF: sub_4019A0+3C↓o
.text:004013E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4019A0+44↓o
.text:004013E3                                         ; sub_4019A0+51↓o
.text:004013ED ; const char aDfirvr[]
.text:004013ED aDfirvr         db 'dfirvR',0           ; DATA XREF: sub_4019A0+B0↓o
.text:004013F4                 align 10h
.text:00401400 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401400                                         ; DATA XREF: sub_4019A0:loc_401AA1↓o
.text:00401400                                         ; .text:00401DDD↓o
.text:00401427                 align 20h
.text:00401440 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.text:00401440                                         ; DATA XREF: sub_4019A0+162↓o
.text:00401440                                         ; .text:00401E1F↓o
.text:0040145F                 align 10h
.text:00401460 aRemoveUnlinkTh db 'Remove (unlink) the FILE(s).',0Ah
.text:00401460                                         ; DATA XREF: sub_4019A0+183↓o
.text:00401460                                         ; .text:00401E40↓o
.text:00401460                 db 0Ah
.text:00401460                 db '  -d, --directory       unlink FILE, even if it is a non-empty di'
.text:00401460                 db 'rectory',0Ah
.text:00401460                 db '                          (super-user only; this works only if yo'
.text:00401460                 db 'ur system',0Ah
.text:00401460                 db '                           supports `unlink',27h,' for nonempty d'
.text:00401460                 db 'irectories)',0Ah
.text:00401460                 db '  -f, --force           ignore nonexistent files, never prompt',0Ah
.text:00401460                 db '  -i, --interactive     prompt before any removal',0Ah,0
.text:004015CB                 align 20h
.text:004015E0 aNoPreserveRoot db '      --no-preserve-root do not treat `/',27h,' specially (the de'
.text:004015E0                                         ; DATA XREF: sub_4019A0+1A5↓o
.text:004015E0                                         ; .text:00401E62↓o
.text:004015E0                 db 'fault)',0Ah
.text:004015E0                 db '      --preserve-root   fail to operate recursively on `/',27h,0Ah
.text:004015E0                 db '  -r, -R, --recursive   remove the contents of directories recurs'
.text:004015E0                 db 'ively',0Ah
.text:004015E0                 db '  -v, --verbose         explain what is being done',0Ah,0
.text:004016D8                 align 10h
.text:004016E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_4019A0+1C7↓o
.text:004016E0                                         ; .text:00401E84↓o
.text:0040170D                 align 20h
.text:00401720 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401720                                         ; DATA XREF: sub_4019A0+1E9↓o
.text:00401720                                         ; .text:00401EA6↓o
.text:00401756                 align 10h
.text:00401760 aToRemoveAFileW db 0Ah                  ; DATA XREF: sub_4019A0+20B↓o
.text:00401760                                         ; .text:00401EC8↓o
.text:00401760                 db 'To remove a file whose name starts with a `-',27h,', for example '
.text:00401760                 db '`-foo',27h,',',0Ah
.text:00401760                 db 'use one of these commands:',0Ah
.text:00401760                 db '  %s -- -foo',0Ah
.text:00401760                 db 0Ah
.text:00401760                 db '  %s ./-foo',0Ah,0
.text:004017DA                 align 10h
.text:004017E0 aNoteThatIfYouU db 0Ah                  ; DATA XREF: sub_4019A0+228↓o
.text:004017E0                                         ; .text:00401EE5↓o
.text:004017E0                 db 'Note that if you use rm to remove a file, it is usually possible '
.text:004017E0                 db 'to recover',0Ah
.text:004017E0                 db 'the contents of that file.  If you want more assurance that the c'
.text:004017E0                 db 'ontents are',0Ah
.text:004017E0                 db 'truly unrecoverable, consider using shred.',0Ah,0
.text:004018A6 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4019A0+24A↓o
.text:004018A6                                         ; .text:00401F07↓o
.text:004018A6                 db 'Report bugs to <%s>.',0Ah,0
.text:004018BD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004018BD                                         ; DATA XREF: sub_4019A0+257↓o
.text:004018BD                                         ; .text:00401F14↓o
.text:004018D3 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: sub_4019A0+281↓o
.text:004018E0 aDavidMackenzie db 'David MacKenzie, Richard Stallman',0
.text:004018E0                                         ; DATA XREF: sub_4019A0+289↓o
.text:00401902 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: sub_4019A0+294↓o
.text:0040190D a530            db '5.3.0',0            ; DATA XREF: sub_4019A0+29C↓o
.text:00401913 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4019A0+2A4↓o
.text:00401921 ; const FILE stru_401921
.text:00401921 stru_401921     FILE <6D006D72h, 69737369h, 6F20676Eh, 61726570h, 8D00646Eh, 0B6h, \
.text:00401921                                         ; DATA XREF: sub_4019A0+2AC↓o
.text:00401921                                         ; sub_4019A0+340↓o
.text:00401921                       0BF8D00h, 2E000000h>
.text:00401941                 db  2Eh ; .
.text:00401942                 db  2Fh ; /
.text:00401943                 db  2Eh ; .
.text:00401944                 db  2Eh ; .
.text:00401945                 db  2Fh ; /
.text:00401946                 db  63h ; c
.text:00401947                 db  6Fh ; o
.text:00401948                 db  72h ; r
.text:00401949                 db  65h ; e
.text:0040194A                 db  75h ; u
.text:0040194B                 db  74h ; t
.text:0040194C                 db  69h ; i
.text:0040194D                 db  6Ch ; l
.text:0040194E                 db  73h ; s
.text:0040194F                 db  2Dh ; -
.text:00401950                 db  35h ; 5
.text:00401951                 db  2Eh ; .
.text:00401952                 db  33h ; 3
.text:00401953                 db  2Eh ; .
.text:00401954                 db  30h ; 0
.text:00401955                 db  2Dh ; -
.text:00401956                 db  73h ; s
.text:00401957                 db  72h ; r
.text:00401958                 db  63h ; c
.text:00401959                 db  2Fh ; /
.text:0040195A                 db  73h ; s
.text:0040195B                 db  72h ; r
.text:0040195C                 db  63h ; c
.text:0040195D                 db  2Fh ; /
.text:0040195E                 db  72h ; r
.text:0040195F                 db  6Dh ; m
.text:00401960                 db  2Eh ; .
.text:00401961                 db  63h ; c
.text:00401962                 db    0
.text:00401963 aValidStatusSta db 'VALID_STATUS (status)',0
.text:00401963                                         ; DATA XREF: sub_4019A0+3AA↓o
.text:00401979 ; const char asc_401979[]
.text:00401979 asc_401979      db '/',0                ; DATA XREF: sub_4019A0:loc_401D80↓o
.text:0040197B                 align 10h
.text:00401980 aFailedToGetAtt db 'failed to get attributes of %s',0
.text:00401980                                         ; DATA XREF: sub_4019A0+3EF↓o
.text:0040199F                 align 10h
.text:004019A0
.text:004019A0 ; =============== S U B R O U T I N E =======================================
.text:004019A0
.text:004019A0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004019A0
.text:004019A0 sub_4019A0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004019A0
.text:004019A0 Category        = dword ptr -58h
.text:004019A0 Locale          = dword ptr -54h
.text:004019A0 var_50          = dword ptr -50h
.text:004019A0 var_4C          = byte ptr -4Ch
.text:004019A0 var_48          = byte ptr -48h
.text:004019A0 var_44          = dword ptr -44h
.text:004019A0 var_40          = dword ptr -40h
.text:004019A0 var_3C          = dword ptr -3Ch
.text:004019A0 var_2C          = byte ptr -2Ch
.text:004019A0 var_28          = byte ptr -28h
.text:004019A0 var_27          = byte ptr -27h
.text:004019A0 var_26          = byte ptr -26h
.text:004019A0 var_24          = dword ptr -24h
.text:004019A0 var_20          = byte ptr -20h
.text:004019A0 var_1F          = byte ptr -1Fh
.text:004019A0 var_1E          = byte ptr -1Eh
.text:004019A0 var_1D          = byte ptr -1Dh
.text:004019A0 arg_0           = dword ptr  8
.text:004019A0 arg_4           = dword ptr  0Ch
.text:004019A0
.text:004019A0                 push    ebp
.text:004019A1                 xor     eax, eax
.text:004019A3                 mov     ebp, esp
.text:004019A5                 push    edi
.text:004019A6                 push    esi
.text:004019A7                 push    ebx
.text:004019A8                 sub     esp, 4Ch
.text:004019AB                 xor     ebx, ebx
.text:004019AD                 mov     esi, [ebp+arg_4]
.text:004019B0                 and     esp, 0FFFFFFF0h
.text:004019B3                 mov     edi, [ebp+arg_0]
.text:004019B6                 call    __alloca
.text:004019BB                 call    sub_4185E0
.text:004019C0                 mov     edx, [esi]
.text:004019C2                 mov     [esp+58h+Locale], offset Locale ; Locale
.text:004019CA                 mov     [esp+58h+Category], 0 ; Category
.text:004019D1                 mov     ds:dword_41B8A0, edx
.text:004019D7                 call    setlocale
.text:004019DC                 mov     [esp+58h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004019E4                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004019EB                 call    ds:libintl_bindtextdomain
.text:004019F1                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004019F8                 call    ds:libintl_textdomain
.text:004019FE                 mov     [esp+58h+Category], offset sub_405F10 ; void (__cdecl *)()
.text:00401A05                 call    sub_401040
.text:00401A0A                 mov     [ebp+var_1F], 0
.text:00401A0E                 mov     [ebp+var_28], 0
.text:00401A12                 mov     [ebp+var_27], 0
.text:00401A16                 mov     [ebp+var_26], 0
.text:00401A1A                 mov     [ebp+var_24], 0
.text:00401A21                 mov     [esp+58h+Category], 0 ; FileHandle
.text:00401A28                 call    _isatty
.text:00401A2D                 mov     [ebp+var_1E], 0
.text:00401A31                 test    eax, eax
.text:00401A33                 setnz   [ebp+var_20]
.text:00401A37                 mov     [ebp+var_1D], 0
.text:00401A3B                 nop
.text:00401A3C                 lea     esi, [esi+0]
.text:00401A40
.text:00401A40 loc_401A40:                             ; CODE XREF: sub_4019A0+FF↓j
.text:00401A40                                         ; sub_4019A0+13D↓j ...
.text:00401A40                 mov     dword ptr [esp+58h+var_48], 0 ; int
.text:00401A48                 mov     dword ptr [esp+58h+var_4C], offset off_401300 ; char
.text:00401A50                 mov     [esp+58h+var_50], offset aDfirvr ; "dfirvR"
.text:00401A58                 mov     [esp+58h+Locale], esi ; int
.text:00401A5C                 mov     [esp+58h+Category], edi ; int
.text:00401A5F                 call    sub_405DA0
.text:00401A64                 cmp     eax, 0FFFFFFFFh
.text:00401A67                 jz      loc_401CCD
.text:00401A6D                 cmp     eax, 69h ; 'i'
.text:00401A70                 jz      loc_401CC0
.text:00401A76                 cmp     eax, 69h ; 'i'
.text:00401A79                 jg      loc_401C70
.text:00401A7F                 cmp     eax, 52h ; 'R'
.text:00401A82                 jz      loc_401C60
.text:00401A88                 cmp     eax, 52h ; 'R'
.text:00401A8B                 jle     short loc_401AE2
.text:00401A8D                 cmp     eax, 64h ; 'd'
.text:00401A90                 jz      short loc_401AD9
.text:00401A92                 cmp     eax, 66h ; 'f'
.text:00401A95                 jnz     short loc_401AA1
.text:00401A97                 mov     [ebp+var_27], 0
.text:00401A9B                 mov     [ebp+var_28], 1
.text:00401A9F                 jmp     short loc_401A40
.text:00401AA1 ; ---------------------------------------------------------------------------
.text:00401AA1
.text:00401AA1 loc_401AA1:                             ; CODE XREF: sub_4019A0+F5↑j
.text:00401AA1                                         ; sub_4019A0+152↓j ...
.text:00401AA1                 mov     [esp+58h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401AA8                 call    ds:libintl_gettext
.text:00401AAE                 mov     ecx, ds:_iob
.text:00401AB4                 mov     ebx, ds:dword_41B8A0
.text:00401ABA                 add     ecx, 40h ; '@'
.text:00401ABD                 mov     [esp+58h+var_50], ebx
.text:00401AC1                 mov     [esp+58h+Locale], eax ; Format
.text:00401AC5                 mov     [esp+58h+Category], ecx ; Stream
.text:00401AC8                 call    fprintf
.text:00401ACD                 mov     [esp+58h+Category], 1 ; Code
.text:00401AD4
.text:00401AD4 loc_401AD4:                             ; CODE XREF: sub_4019A0+26E↓j
.text:00401AD4                                         ; sub_4019A0+3C1↓j
.text:00401AD4                 call    exit
.text:00401AD9 ; ---------------------------------------------------------------------------
.text:00401AD9
.text:00401AD9 loc_401AD9:                             ; CODE XREF: sub_4019A0+F0↑j
.text:00401AD9                 mov     [ebp+var_1F], 1
.text:00401ADD                 jmp     loc_401A40
.text:00401AE2 ; ---------------------------------------------------------------------------
.text:00401AE2
.text:00401AE2 loc_401AE2:                             ; CODE XREF: sub_4019A0+EB↑j
.text:00401AE2                 cmp     eax, 0FFFFFF7Dh
.text:00401AE7                 jz      loc_401C13
.text:00401AED                 cmp     eax, 0FFFFFF7Eh
.text:00401AF2                 jnz     short loc_401AA1
.text:00401AF4                 mov     edx, ds:dword_41B8A0
.text:00401AFA                 mov     [esp+58h+Category], edx
.text:00401AFD                 call    sub_405FF0
.text:00401B02                 mov     [esp+58h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:00401B09                 mov     esi, eax
.text:00401B0B                 call    ds:libintl_gettext
.text:00401B11                 mov     edi, ds:dword_41B8A0
.text:00401B17                 mov     [esp+58h+Category], eax ; Format
.text:00401B1A                 mov     [esp+58h+Locale], edi
.text:00401B1E                 call    printf
.text:00401B23                 mov     [esp+58h+Category], offset aRemoveUnlinkTh ; "Remove (unlink) the FILE(s).\n\n  -d, -"...
.text:00401B2A                 call    ds:libintl_gettext
.text:00401B30                 mov     ebx, ds:_iob
.text:00401B36                 add     ebx, 20h ; ' '
.text:00401B39                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401B3D                 mov     [esp+58h+Category], eax ; Buffer
.text:00401B40                 call    fputs
.text:00401B45                 mov     [esp+58h+Category], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:00401B4C                 call    ds:libintl_gettext
.text:00401B52                 mov     ecx, ds:_iob
.text:00401B58                 add     ecx, 20h ; ' '
.text:00401B5B                 mov     [esp+58h+Locale], ecx ; Stream
.text:00401B5F                 mov     [esp+58h+Category], eax ; Buffer
.text:00401B62                 call    fputs
.text:00401B67                 mov     [esp+58h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401B6E                 call    ds:libintl_gettext
.text:00401B74                 mov     edi, ds:_iob
.text:00401B7A                 add     edi, 20h ; ' '
.text:00401B7D                 mov     [esp+58h+Locale], edi ; Stream
.text:00401B81                 mov     [esp+58h+Category], eax ; Buffer
.text:00401B84                 call    fputs
.text:00401B89                 mov     [esp+58h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401B90                 call    ds:libintl_gettext
.text:00401B96                 mov     ebx, ds:_iob
.text:00401B9C                 add     ebx, 20h ; ' '
.text:00401B9F                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401BA3                 mov     [esp+58h+Category], eax ; Buffer
.text:00401BA6                 call    fputs
.text:00401BAB                 mov     [esp+58h+Category], offset aToRemoveAFileW ; "\nTo remove a file whose name starts wi"...
.text:00401BB2                 call    ds:libintl_gettext
.text:00401BB8                 mov     [esp+58h+var_50], esi
.text:00401BBC                 mov     [esp+58h+Locale], esi
.text:00401BC0                 mov     [esp+58h+Category], eax ; Format
.text:00401BC3                 call    printf
.text:00401BC8                 mov     [esp+58h+Category], offset aNoteThatIfYouU ; "\nNote that if you use rm to remove a f"...
.text:00401BCF                 call    ds:libintl_gettext
.text:00401BD5                 mov     ecx, ds:_iob
.text:00401BDB                 add     ecx, 20h ; ' '
.text:00401BDE                 mov     [esp+58h+Locale], ecx ; Stream
.text:00401BE2                 mov     [esp+58h+Category], eax ; Buffer
.text:00401BE5                 call    fputs
.text:00401BEA                 mov     [esp+58h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401BF1                 call    ds:libintl_gettext
.text:00401BF7                 mov     [esp+58h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401BFF                 mov     [esp+58h+Category], eax ; Format
.text:00401C02                 call    printf
.text:00401C07
.text:00401C07 loc_401C07:                             ; CODE XREF: sub_4019A0+2BC↓j
.text:00401C07                                         ; sub_4019A0+33A↓j
.text:00401C07                 mov     [esp+58h+Category], 0
.text:00401C0E                 jmp     loc_401AD4
.text:00401C13 ; ---------------------------------------------------------------------------
.text:00401C13
.text:00401C13 loc_401C13:                             ; CODE XREF: sub_4019A0+147↑j
.text:00401C13                 mov     [esp+58h+var_3C], 0
.text:00401C1B                 mov     esi, ds:_iob
.text:00401C21                 mov     [esp+58h+var_40], offset aJimMeyering ; "Jim Meyering"
.text:00401C29                 mov     [esp+58h+var_44], offset aDavidMackenzie ; "David MacKenzie, Richard Stallman"
.text:00401C31                 add     esi, 20h ; ' '
.text:00401C34                 mov     dword ptr [esp+58h+var_48], offset aPaulRubin ; "Paul Rubin"
.text:00401C3C                 mov     dword ptr [esp+58h+var_4C], offset a530 ; "5.3.0"
.text:00401C44                 mov     [esp+58h+var_50], offset aGnuCoreutils ; "GNU coreutils"
.text:00401C4C                 mov     [esp+58h+Locale], offset stru_401921 ; FILE *
.text:00401C54                 mov     [esp+58h+Category], esi ; FILE *
.text:00401C57                 call    sub_405D60
.text:00401C5C                 jmp     short loc_401C07
.text:00401C5C ; ---------------------------------------------------------------------------
.text:00401C5E                 align 10h
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: sub_4019A0+E2↑j
.text:00401C60                                         ; sub_4019A0+2E1↓j
.text:00401C60                 mov     [ebp+var_26], 1
.text:00401C64                 jmp     loc_401A40
.text:00401C64 ; ---------------------------------------------------------------------------
.text:00401C69                 align 10h
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_4019A0+D9↑j
.text:00401C70                 cmp     eax, 80h ; '€'
.text:00401C75                 jz      short loc_401CB7
.text:00401C77                 cmp     eax, 80h ; '€'
.text:00401C7C                 jg      short loc_401C95
.text:00401C7E                 cmp     eax, 72h ; 'r'
.text:00401C81                 jz      short loc_401C60
.text:00401C83                 cmp     eax, 76h ; 'v'
.text:00401C86                 jnz     loc_401AA1
.text:00401C8C                 mov     [ebp+var_1E], 1
.text:00401C90                 jmp     loc_401A40
.text:00401C95 ; ---------------------------------------------------------------------------
.text:00401C95
.text:00401C95 loc_401C95:                             ; CODE XREF: sub_4019A0+2DC↑j
.text:00401C95                 cmp     eax, 81h
.text:00401C9A                 jz      short loc_401CB0
.text:00401C9C                 cmp     eax, 82h ; '‚'
.text:00401CA1                 jnz     loc_401AA1
.text:00401CA7                 mov     [ebp+var_20], 1
.text:00401CAB                 jmp     loc_401A40
.text:00401CB0 ; ---------------------------------------------------------------------------
.text:00401CB0
.text:00401CB0 loc_401CB0:                             ; CODE XREF: sub_4019A0+2FA↑j
.text:00401CB0                 mov     bl, 1
.text:00401CB2                 jmp     loc_401A40
.text:00401CB7 ; ---------------------------------------------------------------------------
.text:00401CB7
.text:00401CB7 loc_401CB7:                             ; CODE XREF: sub_4019A0+2D5↑j
.text:00401CB7                 xor     ebx, ebx
.text:00401CB9                 jmp     loc_401A40
.text:00401CB9 ; ---------------------------------------------------------------------------
.text:00401CBE                 align 10h
.text:00401CC0
.text:00401CC0 loc_401CC0:                             ; CODE XREF: sub_4019A0+D0↑j
.text:00401CC0                 mov     [ebp+var_27], 1
.text:00401CC4                 mov     [ebp+var_28], 0
.text:00401CC8                 jmp     loc_401A40
.text:00401CCD ; ---------------------------------------------------------------------------
.text:00401CCD
.text:00401CCD loc_401CCD:                             ; CODE XREF: sub_4019A0+C7↑j
.text:00401CCD                 mov     eax, dword_41A020
.text:00401CD2                 cmp     edi, eax
.text:00401CD4                 jg      short loc_401D10
.text:00401CD6                 cmp     [ebp+var_28], 0
.text:00401CDA                 jnz     loc_401C07
.text:00401CE0                 mov     [esp+58h+Category], (offset stru_401921._ptr+3)
.text:00401CE7                 call    ds:libintl_gettext
.text:00401CED                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401CF5                 mov     [esp+58h+Category], 0 ; Code
.text:00401CFC                 mov     [esp+58h+var_50], eax ; char *
.text:00401D00                 call    sub_40FF30
.text:00401D05                 jmp     loc_401AA1
.text:00401D05 ; ---------------------------------------------------------------------------
.text:00401D0A                 align 10h
.text:00401D10
.text:00401D10 loc_401D10:                             ; CODE XREF: sub_4019A0+334↑j
.text:00401D10                 test    bl, bl
.text:00401D12                 jz      short loc_401D1A
.text:00401D14                 cmp     [ebp+var_26], 0
.text:00401D18                 jnz     short loc_401D66
.text:00401D1A
.text:00401D1A loc_401D1A:                             ; CODE XREF: sub_4019A0+372↑j
.text:00401D1A                                         ; sub_4019A0+3DE↓j
.text:00401D1A                 sub     edi, eax
.text:00401D1C                 lea     ebx, [esi+eax*4]
.text:00401D1F                 lea     esi, [ebp+var_28]
.text:00401D22                 mov     [esp+58h+Category], edi
.text:00401D25                 mov     [esp+58h+var_50], esi
.text:00401D29                 mov     [esp+58h+Locale], ebx
.text:00401D2D                 call    sub_401FE0
.text:00401D32                 lea     edi, [eax-2]
.text:00401D35                 cmp     edi, 2
.text:00401D38                 jbe     short loc_401D56
.text:00401D3A                 mov     [esp+58h+var_50], 0F9h ; 'ù'
.text:00401D42                 mov     [esp+58h+Locale], (offset stru_401921._tmpfname+3)
.text:00401D4A                 mov     [esp+58h+Category], offset aValidStatusSta ; "VALID_STATUS (status)"
.text:00401D51                 call    _assert
.text:00401D56 ; ---------------------------------------------------------------------------
.text:00401D56
.text:00401D56 loc_401D56:                             ; CODE XREF: sub_4019A0+398↑j
.text:00401D56                 xor     ecx, ecx
.text:00401D58                 cmp     eax, 4
.text:00401D5B                 setz    cl
.text:00401D5E                 mov     [esp+58h+Category], ecx
.text:00401D61                 jmp     loc_401AD4
.text:00401D66 ; ---------------------------------------------------------------------------
.text:00401D66
.text:00401D66 loc_401D66:                             ; CODE XREF: sub_4019A0+378↑j
.text:00401D66                 mov     [esp+58h+Category], offset unk_41B000
.text:00401D6D                 call    sub_404780
.text:00401D72                 mov     [ebp+var_24], eax
.text:00401D75                 test    eax, eax
.text:00401D77                 jz      short loc_401D80
.text:00401D79
.text:00401D79 loc_401D79:                             ; CODE XREF: sub_4019A0+420↓j
.text:00401D79                 mov     eax, dword_41A020
.text:00401D7E                 jmp     short loc_401D1A
.text:00401D80 ; ---------------------------------------------------------------------------
.text:00401D80
.text:00401D80 loc_401D80:                             ; CODE XREF: sub_4019A0+3D7↑j
.text:00401D80                 mov     [esp+58h+Category], offset asc_401979 ; "/"
.text:00401D87                 call    sub_405870
.text:00401D8C                 mov     dword ptr [ebp+var_2C], eax
.text:00401D8F                 mov     [esp+58h+Category], offset aFailedToGetAtt ; "failed to get attributes of %s"
.text:00401D96                 call    ds:libintl_gettext
.text:00401D9C                 mov     ebx, eax
.text:00401D9E                 call    _errno
.text:00401DA3                 mov     [esp+58h+var_50], ebx ; char *
.text:00401DA7                 mov     ecx, dword ptr [ebp+var_2C]
.text:00401DAA                 mov     dword ptr [esp+58h+var_4C], ecx ; char
.text:00401DAE                 mov     edx, [eax]
.text:00401DB0                 mov     [esp+58h+Category], 1 ; Code
.text:00401DB7                 mov     [esp+58h+Locale], edx ; ErrorMessage
.text:00401DBB                 call    sub_40FF30
.text:00401DC0                 jmp     short loc_401D79
.text:00401DC0 sub_4019A0      endp
.text:00401DC0
.text:00401DC0 ; ---------------------------------------------------------------------------
.text:00401DC2                 align 10h
.text:00401DD0                 push    esi
.text:00401DD1                 push    ebx
.text:00401DD2                 sub     esp, 14h
.text:00401DD5                 mov     esi, [esp+20h]
.text:00401DD9                 test    esi, esi
.text:00401DDB                 jz      short loc_401E11
.text:00401DDD                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401DE4                 call    ds:libintl_gettext
.text:00401DEA                 mov     edx, ds:_iob
.text:00401DF0                 mov     ecx, ds:dword_41B8A0
.text:00401DF6                 add     edx, 40h ; '@'
.text:00401DF9                 mov     [esp+8], ecx
.text:00401DFD                 mov     [esp+4], eax
.text:00401E01                 mov     [esp], edx
.text:00401E04                 call    fprintf
.text:00401E09
.text:00401E09 loc_401E09:                             ; CODE XREF: .text:00401F24↓j
.text:00401E09                 mov     [esp], esi
.text:00401E0C                 call    exit
.text:00401E11 ; ---------------------------------------------------------------------------
.text:00401E11
.text:00401E11 loc_401E11:                             ; CODE XREF: .text:00401DDB↑j
.text:00401E11                 mov     edx, ds:dword_41B8A0
.text:00401E17                 mov     [esp], edx
.text:00401E1A                 call    sub_405FF0
.text:00401E1F                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:00401E26                 mov     ebx, eax
.text:00401E28                 call    ds:libintl_gettext
.text:00401E2E                 mov     ecx, ds:dword_41B8A0
.text:00401E34                 mov     [esp], eax
.text:00401E37                 mov     [esp+4], ecx
.text:00401E3B                 call    printf
.text:00401E40                 mov     dword ptr [esp], offset aRemoveUnlinkTh ; "Remove (unlink) the FILE(s).\n\n  -d, -"...
.text:00401E47                 call    ds:libintl_gettext
.text:00401E4D                 mov     ecx, ds:_iob
.text:00401E53                 add     ecx, 20h ; ' '
.text:00401E56                 mov     [esp+4], ecx
.text:00401E5A                 mov     [esp], eax
.text:00401E5D                 call    fputs
.text:00401E62                 mov     dword ptr [esp], offset aNoPreserveRoot ; "      --no-preserve-root do not treat `"...
.text:00401E69                 call    ds:libintl_gettext
.text:00401E6F                 mov     ecx, ds:_iob
.text:00401E75                 add     ecx, 20h ; ' '
.text:00401E78                 mov     [esp+4], ecx
.text:00401E7C                 mov     [esp], eax
.text:00401E7F                 call    fputs
.text:00401E84                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401E8B                 call    ds:libintl_gettext
.text:00401E91                 mov     ecx, ds:_iob
.text:00401E97                 add     ecx, 20h ; ' '
.text:00401E9A                 mov     [esp+4], ecx
.text:00401E9E                 mov     [esp], eax
.text:00401EA1                 call    fputs
.text:00401EA6                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401EAD                 call    ds:libintl_gettext
.text:00401EB3                 mov     ecx, ds:_iob
.text:00401EB9                 add     ecx, 20h ; ' '
.text:00401EBC                 mov     [esp+4], ecx
.text:00401EC0                 mov     [esp], eax
.text:00401EC3                 call    fputs
.text:00401EC8                 mov     dword ptr [esp], offset aToRemoveAFileW ; "\nTo remove a file whose name starts wi"...
.text:00401ECF                 call    ds:libintl_gettext
.text:00401ED5                 mov     [esp+8], ebx
.text:00401ED9                 mov     [esp+4], ebx
.text:00401EDD                 mov     [esp], eax
.text:00401EE0                 call    printf
.text:00401EE5                 mov     dword ptr [esp], offset aNoteThatIfYouU ; "\nNote that if you use rm to remove a f"...
.text:00401EEC                 call    ds:libintl_gettext
.text:00401EF2                 mov     ebx, ds:_iob
.text:00401EF8                 add     ebx, 20h ; ' '
.text:00401EFB                 mov     [esp+4], ebx
.text:00401EFF                 mov     [esp], eax
.text:00401F02                 call    fputs
.text:00401F07                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401F0E                 call    ds:libintl_gettext
.text:00401F14                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401F1C                 mov     [esp], eax
.text:00401F1F                 call    printf
.text:00401F24                 jmp     loc_401E09
.text:00401F24 ; ---------------------------------------------------------------------------
.text:00401F29                 align 20h
.text:00401F40 aCannotRestoreC db 'cannot restore current working directory',0
.text:00401F40                                         ; DATA XREF: sub_401FE0:loc_4020F0↓o
.text:00401F69 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: sub_401FE0+21E↓o
.text:00401F69                                         ; sub_402370+F3↓o ...
.text:00401F7A aCannotRemoveOr db 'cannot remove `.',27h,' or `..',27h,0
.text:00401F7A                                         ; DATA XREF: sub_401FE0:loc_402292↓o
.text:00401F94                 align 10h
.text:00401FA0 aCoreutils530Sr_0 db '../../coreutils-5.3.0-src/src/remove.c',0
.text:00401FA0                                         ; DATA XREF: sub_401FE0+2E4↓o
.text:00401FA0                                         ; sub_4026E0+848↓o ...
.text:00401FC7 aValidStatusS   db 'VALID_STATUS (s)',0 ; DATA XREF: sub_401FE0+2EC↓o
.text:00401FD8                 align 10h
.text:00401FE0
.text:00401FE0 ; =============== S U B R O U T I N E =======================================
.text:00401FE0
.text:00401FE0
.text:00401FE0 sub_401FE0      proc near               ; CODE XREF: sub_4019A0+38D↑p
.text:00401FE0
.text:00401FE0 Block           = dword ptr -2Ch
.text:00401FE0 ErrorMessage    = dword ptr -28h
.text:00401FE0 var_24          = dword ptr -24h
.text:00401FE0 var_20          = byte ptr -20h
.text:00401FE0 var_1C          = dword ptr -1Ch
.text:00401FE0 var_18          = dword ptr -18h
.text:00401FE0 var_14          = dword ptr -14h
.text:00401FE0 arg_0           = dword ptr  4
.text:00401FE0 arg_4           = dword ptr  8
.text:00401FE0 arg_8           = dword ptr  0Ch
.text:00401FE0
.text:00401FE0                 push    ebp
.text:00401FE1                 push    edi
.text:00401FE2                 push    esi
.text:00401FE3                 push    ebx
.text:00401FE4                 sub     esp, 1Ch
.text:00401FE7                 mov     [esp+2Ch+var_14], 0
.text:00401FEF                 mov     [esp+2Ch+Block], 0E8h ; 'è' ; size_t
.text:00401FF6                 call    sub_407140
.text:00401FFB                 mov     [esp+2Ch+Block], eax
.text:00401FFE                 mov     esi, eax
.text:00402000                 lea     ebx, [esi+2Ch]
.text:00402003                 mov     [esp+2Ch+var_1C], offset free
.text:0040200B                 mov     dword ptr [esp+2Ch+var_20], offset malloc
.text:00402013                 mov     [esp+2Ch+var_24], 0
.text:0040201B                 mov     [esp+2Ch+ErrorMessage], 0
.text:00402023                 call    sub_416C30
.text:00402028                 mov     [esp+2Ch+var_1C], offset free
.text:00402030                 mov     dword ptr [esp+2Ch+var_20], offset malloc
.text:00402038                 mov     [esp+2Ch+var_24], 0
.text:00402040                 mov     [esp+2Ch+ErrorMessage], 0
.text:00402048                 mov     [esp+2Ch+Block], ebx
.text:0040204B                 call    sub_416C30
.text:00402050                 mov     [esp+2Ch+var_1C], offset free
.text:00402058                 lea     ecx, [esi+58h]
.text:0040205B                 mov     dword ptr [esp+2Ch+var_20], offset malloc ; char
.text:00402063                 mov     [esp+2Ch+var_24], 0
.text:0040206B                 mov     [esp+2Ch+ErrorMessage], 0
.text:00402073                 mov     [esp+2Ch+Block], ecx
.text:00402076                 call    sub_416C30
.text:0040207B                 mov     [esp+2Ch+var_18], esi
.text:0040207F                 xor     edx, edx
.text:00402081                 mov     ds:dword_41B230, edx
.text:00402087                 mov     edx, [esp+2Ch+arg_0]
.text:0040208B                 test    edx, edx
.text:0040208D                 jnz     loc_402123
.text:00402093
.text:00402093 loc_402093:                             ; CODE XREF: sub_401FE0+199↓j
.text:00402093                 mov     ecx, [esp+2Ch+arg_8]
.text:00402097                 cmp     byte ptr [ecx+0Bh], 0
.text:0040209B                 jz      short loc_4020B0
.text:0040209D                 mov     eax, [esp+2Ch+var_14]
.text:004020A1                 test    eax, eax
.text:004020A3                 jz      short loc_4020B0
.text:004020A5                 mov     ebp, [eax]
.text:004020A7                 test    ebp, ebp
.text:004020A9                 jnz     short loc_4020F0
.text:004020AB                 nop
.text:004020AC                 lea     esi, [esi+0]
.text:004020B0
.text:004020B0 loc_4020B0:                             ; CODE XREF: sub_401FE0+BB↑j
.text:004020B0                                         ; sub_401FE0+C3↑j ...
.text:004020B0                 mov     edi, [esp+2Ch+var_18]
.text:004020B4                 mov     [esp+2Ch+Block], edi ; Block
.text:004020B7                 call    sub_4022E0
.text:004020BC                 mov     eax, [esp+2Ch+var_14]
.text:004020C0                 test    eax, eax
.text:004020C2                 jz      short loc_4020CA
.text:004020C4                 mov     ecx, [eax]
.text:004020C6                 test    ecx, ecx
.text:004020C8                 jz      short loc_4020E3
.text:004020CA
.text:004020CA loc_4020CA:                             ; CODE XREF: sub_401FE0+E2↑j
.text:004020CA                                         ; sub_401FE0+10E↓j
.text:004020CA                 mov     edx, [esp+2Ch+var_14]
.text:004020CE                 mov     [esp+2Ch+Block], edx ; Block
.text:004020D1                 call    free
.text:004020D6                 mov     eax, dword_41A010
.text:004020DB                 add     esp, 1Ch
.text:004020DE                 pop     ebx
.text:004020DF                 pop     esi
.text:004020E0                 pop     edi
.text:004020E1                 pop     ebp
.text:004020E2                 retn
.text:004020E3 ; ---------------------------------------------------------------------------
.text:004020E3
.text:004020E3 loc_4020E3:                             ; CODE XREF: sub_401FE0+E8↑j
.text:004020E3                 add     eax, 4
.text:004020E6                 mov     [esp+2Ch+Block], eax ; Block
.text:004020E9                 call    sub_406110
.text:004020EE                 jmp     short loc_4020CA
.text:004020F0 ; ---------------------------------------------------------------------------
.text:004020F0
.text:004020F0 loc_4020F0:                             ; CODE XREF: sub_401FE0+C9↑j
.text:004020F0                 mov     [esp+2Ch+Block], offset aCannotRestoreC ; "cannot restore current working director"...
.text:004020F7                 call    ds:libintl_gettext
.text:004020FD                 mov     esi, [esp+2Ch+var_14]
.text:00402101                 mov     [esp+2Ch+var_24], eax ; char *
.text:00402105                 mov     ebx, [esi]
.text:00402107                 mov     [esp+2Ch+Block], 0 ; Code
.text:0040210E                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00402112                 call    sub_40FF30
.text:00402117                 mov     eax, 4
.text:0040211C                 mov     dword_41A010, eax
.text:00402121                 jmp     short loc_4020B0
.text:00402123 ; ---------------------------------------------------------------------------
.text:00402123
.text:00402123 loc_402123:                             ; CODE XREF: sub_401FE0+AD↑j
.text:00402123                                         ; sub_401FE0+197↓j
.text:00402123                 mov     ebp, [esp+2Ch+var_18]
.text:00402127                 add     ebp, 88h ; 'ˆ'
.text:0040212D                 mov     [esp+2Ch+Block], ebp
.text:00402130                 call    sub_4044C0
.text:00402135                 mov     edi, [esp+2Ch+var_18]
.text:00402139                 add     edi, 0A8h ; '¨'
.text:0040213F                 mov     [esp+2Ch+Block], edi ; Buf
.text:00402142                 call    _setjmp
.text:00402147                 test    eax, eax
.text:00402149                 mov     edx, 4
.text:0040214E                 jz      short loc_402198
.text:00402150
.text:00402150 loc_402150:                             ; CODE XREF: sub_401FE0+252↓j
.text:00402150                 lea     edi, [edx-2]
.text:00402153                 cmp     edi, 2
.text:00402156                 ja      loc_4022BC
.text:0040215C                 cmp     edx, 4
.text:0040215F                 jz      short loc_402190
.text:00402161                 cmp     edx, 3
.text:00402164                 jz      short loc_402180
.text:00402166
.text:00402166 loc_402166:                             ; CODE XREF: sub_401FE0+1A7↓j
.text:00402166                                         ; sub_401FE0+1B6↓j
.text:00402166                 mov     edx, ds:dword_41B230
.text:0040216C                 inc     edx
.text:0040216D                 cmp     edx, [esp+2Ch+arg_0]
.text:00402171                 mov     ds:dword_41B230, edx
.text:00402177                 jb      short loc_402123
.text:00402179                 jmp     loc_402093
.text:00402179 ; ---------------------------------------------------------------------------
.text:0040217E                 align 10h
.text:00402180
.text:00402180 loc_402180:                             ; CODE XREF: sub_401FE0+184↑j
.text:00402180                 cmp     dword_41A010, 2
.text:00402187                 jnz     short loc_402166
.text:00402189                 lea     esi, [esi+0]
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401FE0+17F↑j
.text:00402190                 mov     dword_41A010, edx
.text:00402196                 jmp     short loc_402166
.text:00402198 ; ---------------------------------------------------------------------------
.text:00402198
.text:00402198 loc_402198:                             ; CODE XREF: sub_401FE0+16E↑j
.text:00402198                 mov     esi, [esp+2Ch+arg_4]
.text:0040219C                 lea     edi, [esp+2Ch+var_14]
.text:004021A0                 mov     edx, ds:dword_41B230
.text:004021A6                 mov     ebp, [esp+2Ch+var_18]
.text:004021AA                 mov     ebx, [esi+edx*4]
.text:004021AD                 mov     esi, [esp+2Ch+arg_8]
.text:004021B1                 mov     [esp+2Ch+Block], ebx
.text:004021B4                 call    sub_405FF0
.text:004021B9                 cmp     byte ptr [eax], 2Eh ; '.'
.text:004021BC                 jz      loc_402277
.text:004021C2
.text:004021C2 loc_4021C2:                             ; CODE XREF: sub_401FE0+2A2↓j
.text:004021C2                                         ; sub_401FE0+2AC↓j
.text:004021C2                 mov     eax, [edi]
.text:004021C4                 test    eax, eax
.text:004021C6                 jz      short loc_402237
.text:004021C8                 mov     ecx, [eax]
.text:004021CA                 test    ecx, ecx
.text:004021CC                 jz      short loc_402237
.text:004021CE                 cmp     byte ptr [ebx], 0
.text:004021D1                 mov     eax, ebx
.text:004021D3                 jz      short loc_4021DF
.text:004021D5                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:004021D9                 jz      loc_40226F
.text:004021DF
.text:004021DF loc_4021DF:                             ; CODE XREF: sub_401FE0+1F3↑j
.text:004021DF                                         ; sub_401FE0+292↓j
.text:004021DF                 cmp     byte ptr [eax], 2Fh ; '/'
.text:004021E2                 jz      short loc_402237
.text:004021E4                 cmp     byte ptr [ebx], 0
.text:004021E7                 mov     eax, ebx
.text:004021E9                 jz      short loc_4021F1
.text:004021EB                 cmp     byte ptr [ebx+1], 3Ah ; ':'
.text:004021EF                 jz      short loc_40226A
.text:004021F1
.text:004021F1 loc_4021F1:                             ; CODE XREF: sub_401FE0+209↑j
.text:004021F1                                         ; sub_401FE0+28D↓j
.text:004021F1                 cmp     byte ptr [eax], 5Ch ; '\'
.text:004021F4                 jz      short loc_402237
.text:004021F6                 mov     [esp+2Ch+Block], ebx ; char *
.text:004021F9                 call    sub_405870
.text:004021FE                 mov     [esp+2Ch+Block], offset aCannotRemoveS ; "cannot remove %s"
.text:00402205                 mov     esi, eax
.text:00402207                 call    ds:libintl_gettext
.text:0040220D                 mov     dword ptr [esp+2Ch+var_20], esi ; char
.text:00402211                 mov     [esp+2Ch+var_24], eax ; char *
.text:00402215                 mov     ebp, [edi]
.text:00402217                 mov     ebx, [ebp+0]
.text:0040221A                 mov     [esp+2Ch+Block], 0 ; Code
.text:00402221                 mov     [esp+2Ch+ErrorMessage], ebx ; ErrorMessage
.text:00402225                 call    sub_40FF30
.text:0040222A
.text:0040222A loc_40222A:                             ; CODE XREF: sub_401FE0+2D7↓j
.text:0040222A                 mov     eax, 4
.text:0040222F                 nop
.text:00402230
.text:00402230 loc_402230:                             ; CODE XREF: sub_401FE0+272↓j
.text:00402230                                         ; sub_401FE0+288↓j
.text:00402230                 mov     edx, eax
.text:00402232                 jmp     loc_402150
.text:00402237 ; ---------------------------------------------------------------------------
.text:00402237
.text:00402237 loc_402237:                             ; CODE XREF: sub_401FE0+1E6↑j
.text:00402237                                         ; sub_401FE0+1EC↑j ...
.text:00402237                 mov     dword ptr [esp+2Ch+var_20], 0 ; int
.text:0040223F                 mov     [esp+2Ch+var_24], esi ; int
.text:00402243                 mov     [esp+2Ch+ErrorMessage], ebx ; LPCSTR
.text:00402247                 mov     [esp+2Ch+Block], ebp ; int
.text:0040224A                 call    sub_402370
.text:0040224F                 cmp     eax, 5
.text:00402252                 jnz     short loc_402230
.text:00402254                 mov     dword ptr [esp+2Ch+var_20], esi ; int
.text:00402258                 mov     [esp+2Ch+var_24], edi ; int
.text:0040225C                 mov     [esp+2Ch+ErrorMessage], ebx ; LPCSTR
.text:00402260                 mov     [esp+2Ch+Block], ebp ; int
.text:00402263                 call    sub_4026E0
.text:00402268                 jmp     short loc_402230
.text:0040226A ; ---------------------------------------------------------------------------
.text:0040226A
.text:0040226A loc_40226A:                             ; CODE XREF: sub_401FE0+20F↑j
.text:0040226A                 lea     eax, [ebx+2]
.text:0040226D                 jmp     short loc_4021F1
.text:0040226F ; ---------------------------------------------------------------------------
.text:0040226F
.text:0040226F loc_40226F:                             ; CODE XREF: sub_401FE0+1F9↑j
.text:0040226F                 lea     eax, [ebx+2]
.text:00402272                 jmp     loc_4021DF
.text:00402277 ; ---------------------------------------------------------------------------
.text:00402277
.text:00402277 loc_402277:                             ; CODE XREF: sub_401FE0+1DC↑j
.text:00402277                 movzx   edx, byte ptr [eax+1]
.text:0040227B                 test    dl, dl
.text:0040227D                 jz      short loc_402292
.text:0040227F                 cmp     dl, 2Eh ; '.'
.text:00402282                 jnz     loc_4021C2
.text:00402288                 cmp     byte ptr [eax+2], 0
.text:0040228C                 jnz     loc_4021C2
.text:00402292
.text:00402292 loc_402292:                             ; CODE XREF: sub_401FE0+29D↑j
.text:00402292                 mov     [esp+2Ch+Block], offset aCannotRemoveOr ; "cannot remove `.' or `..'"
.text:00402299                 call    ds:libintl_gettext
.text:0040229F                 mov     [esp+2Ch+ErrorMessage], 0 ; ErrorMessage
.text:004022A7                 mov     [esp+2Ch+Block], 0 ; Code
.text:004022AE                 mov     [esp+2Ch+var_24], eax ; char *
.text:004022B2                 call    sub_40FF30
.text:004022B7                 jmp     loc_40222A
.text:004022BC ; ---------------------------------------------------------------------------
.text:004022BC
.text:004022BC loc_4022BC:                             ; CODE XREF: sub_401FE0+176↑j
.text:004022BC                 mov     [esp+2Ch+var_24], 4C5h
.text:004022C4                 mov     [esp+2Ch+ErrorMessage], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004022CC                 mov     [esp+2Ch+Block], offset aValidStatusS ; "VALID_STATUS (s)"
.text:004022D3                 call    _assert
.text:004022D3 sub_401FE0      endp
.text:004022D3
.text:004022D3 ; ---------------------------------------------------------------------------
.text:004022D8                 align 10h
.text:004022E0
.text:004022E0 ; =============== S U B R O U T I N E =======================================
.text:004022E0
.text:004022E0
.text:004022E0 ; int __cdecl sub_4022E0(void *Block)
.text:004022E0 sub_4022E0      proc near               ; CODE XREF: sub_401FE0+D7↑p
.text:004022E0
.text:004022E0 var_C           = dword ptr -0Ch
.text:004022E0 var_8           = dword ptr -8
.text:004022E0 var_4           = dword ptr -4
.text:004022E0 Block           = dword ptr  4
.text:004022E0
.text:004022E0                 sub     esp, 0Ch
.text:004022E3                 mov     [esp+0Ch+var_4], ebx
.text:004022E7                 mov     ebx, [esp+0Ch+Block]
.text:004022EB                 mov     [esp+0Ch+var_8], 0
.text:004022F3                 mov     [esp+0Ch+var_C], ebx
.text:004022F6                 call    sub_416F50
.text:004022FB                 mov     [esp+0Ch+var_8], 0
.text:00402303                 lea     edx, [ebx+2Ch]
.text:00402306                 mov     [esp+0Ch+var_C], edx
.text:00402309                 call    sub_416F50
.text:0040230E                 mov     [esp+0Ch+var_8], 0
.text:00402316                 lea     edx, [ebx+58h]
.text:00402319                 mov     [esp+0Ch+var_C], edx
.text:0040231C                 call    sub_416F50
.text:00402321                 mov     [esp+0Ch+Block], ebx ; Block
.text:00402325                 mov     ebx, [esp+0Ch+var_4]
.text:00402329                 add     esp, 0Ch
.text:0040232C                 jmp     free
.text:0040232C sub_4022E0      endp
.text:0040232C
.text:0040232C ; ---------------------------------------------------------------------------
.text:00402331 aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: sub_402370+167↓o
.text:0040233D aRemovedDirecto db 'removed directory: %s',0Ah,0
.text:0040233D                                         ; DATA XREF: sub_402370+1DC↓o
.text:0040233D                                         ; sub_4026E0+72E↓o
.text:00402354 aCannotRemoveDi db 'cannot remove directory %s',0
.text:00402354                                         ; DATA XREF: sub_402370+203↓o
.text:00402354                                         ; sub_4026E0+89↓o ...
.text:0040236F                 align 10h
.text:00402370
.text:00402370 ; =============== S U B R O U T I N E =======================================
.text:00402370
.text:00402370
.text:00402370 ; int __cdecl sub_402370(int, LPCSTR, int, int)
.text:00402370 sub_402370      proc near               ; CODE XREF: sub_401FE0+26A↑p
.text:00402370                                         ; sub_403D80+C4↓p
.text:00402370
.text:00402370 Format          = dword ptr -3Ch
.text:00402370 ErrorMessage    = dword ptr -38h
.text:00402370 var_34          = dword ptr -34h
.text:00402370 var_30          = byte ptr -30h
.text:00402370 var_2C          = dword ptr -2Ch
.text:00402370 var_28          = dword ptr -28h
.text:00402370 var_18          = dword ptr -18h
.text:00402370 var_14          = dword ptr -14h
.text:00402370 var_10          = dword ptr -10h
.text:00402370 var_C           = dword ptr -0Ch
.text:00402370 var_8           = dword ptr -8
.text:00402370 var_4           = dword ptr -4
.text:00402370 arg_0           = dword ptr  4
.text:00402370 arg_4           = dword ptr  8
.text:00402370 arg_8           = dword ptr  0Ch
.text:00402370 arg_C           = dword ptr  10h
.text:00402370
.text:00402370                 sub     esp, 3Ch
.text:00402373                 lea     edx, [esp+3Ch+var_14]
.text:00402377                 mov     [esp+3Ch+var_10], ebx
.text:0040237B                 mov     ebx, [esp+3Ch+arg_8]
.text:0040237F                 mov     [esp+3Ch+var_C], esi
.text:00402383                 mov     esi, [esp+3Ch+arg_4]
.text:00402387                 mov     [esp+3Ch+var_8], edi
.text:0040238B                 mov     edi, [esp+3Ch+arg_0]
.text:0040238F                 mov     [esp+3Ch+var_28], edx ; int
.text:00402393                 lea     edx, [esp+3Ch+var_18]
.text:00402397                 mov     [esp+3Ch+var_4], ebp
.text:0040239B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040239F                 mov     [esp+3Ch+var_2C], edx ; int
.text:004023A3                 mov     dword ptr [esp+3Ch+var_30], 2 ; int
.text:004023AB                 mov     [esp+3Ch+var_34], ebx ; int
.text:004023AF                 mov     [esp+3Ch+ErrorMessage], esi ; LPCSTR
.text:004023B3                 mov     [esp+3Ch+Format], edi ; int
.text:004023B6                 call    sub_403900
.text:004023BB                 cmp     eax, 2
.text:004023BE                 jz      short loc_4023D4
.text:004023C0
.text:004023C0 loc_4023C0:                             ; CODE XREF: sub_402370+128↓j
.text:004023C0                                         ; sub_402370+135↓j ...
.text:004023C0                 mov     ebx, [esp+3Ch+var_10]
.text:004023C4                 mov     esi, [esp+3Ch+var_C]
.text:004023C8                 mov     edi, [esp+3Ch+var_8]
.text:004023CC                 mov     ebp, [esp+3Ch+var_4]
.text:004023D0                 add     esp, 3Ch
.text:004023D3                 retn
.text:004023D4 ; ---------------------------------------------------------------------------
.text:004023D4
.text:004023D4 loc_4023D4:                             ; CODE XREF: sub_402370+4E↑j
.text:004023D4                 cmp     [esp+3Ch+var_18], 4
.text:004023D9                 jz      loc_402555
.text:004023DF
.text:004023DF loc_4023DF:                             ; CODE XREF: sub_402370+1E9↓j
.text:004023DF                 cmp     [esp+3Ch+var_14], 4
.text:004023E4                 jz      loc_4024F4
.text:004023EA
.text:004023EA loc_4023EA:                             ; CODE XREF: sub_402370+1AC↓j
.text:004023EA                 test    ebp, ebp
.text:004023EC                 jz      short loc_4023F8
.text:004023EE                 cmp     byte ptr [ebp+0Ah], 4
.text:004023F2                 jz      loc_4024A0
.text:004023F8
.text:004023F8 loc_4023F8:                             ; CODE XREF: sub_402370+7C↑j
.text:004023F8                 cmp     [esp+3Ch+var_18], 4
.text:004023FD                 jz      loc_4024A0
.text:00402403                 mov     [esp+3Ch+Format], esi ; LPCSTR
.text:00402406                 call    sub_410550
.text:0040240B                 test    eax, eax
.text:0040240D                 jz      loc_4024BD
.text:00402413                 call    _errno
.text:00402418                 cmp     dword ptr [eax], 2
.text:0040241B                 jz      loc_4024AA
.text:00402421
.text:00402421 loc_402421:                             ; CODE XREF: sub_402370+13D↓j
.text:00402421                 cmp     byte ptr [ebx+2], 0
.text:00402425                 jz      short loc_40244F
.text:00402427                 call    _errno
.text:0040242C                 cmp     dword ptr [eax], 2
.text:0040242F                 jz      short loc_40244F
.text:00402431                 call    _errno
.text:00402436                 cmp     dword ptr [eax], 14h
.text:00402439                 jz      short loc_40244F
.text:0040243B                 call    _errno
.text:00402440                 cmp     dword ptr [eax], 3Eh ; '>'
.text:00402443                 jz      short loc_40244F
.text:00402445                 call    _errno
.text:0040244A                 cmp     dword ptr [eax], 26h ; '&'
.text:0040244D                 jnz     short loc_4024A0
.text:0040244F
.text:0040244F loc_40244F:                             ; CODE XREF: sub_402370+B5↑j
.text:0040244F                                         ; sub_402370+BF↑j ...
.text:0040244F                 mov     [esp+3Ch+Format], edi ; int
.text:00402452                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:00402456                 call    sub_403390
.text:0040245B                 mov     [esp+3Ch+Format], eax ; char *
.text:0040245E                 call    sub_405870
.text:00402463                 mov     [esp+3Ch+Format], offset aCannotRemoveS ; "cannot remove %s"
.text:0040246A                 mov     ebx, eax
.text:0040246C                 call    ds:libintl_gettext
.text:00402472                 mov     edi, eax
.text:00402474                 call    _errno
.text:00402479                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:0040247D                 mov     [esp+3Ch+var_34], edi ; char *
.text:00402481                 mov     ecx, [eax]
.text:00402483                 mov     [esp+3Ch+ErrorMessage], ecx ; ErrorMessage
.text:00402487
.text:00402487 loc_402487:                             ; CODE XREF: sub_402370+222↓j
.text:00402487                 mov     [esp+3Ch+Format], 0 ; Code
.text:0040248E                 call    sub_40FF30
.text:00402493                 mov     eax, 4
.text:00402498                 jmp     loc_4023C0
.text:00402498 ; ---------------------------------------------------------------------------
.text:0040249D                 align 10h
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_402370+82↑j
.text:004024A0                                         ; sub_402370+8D↑j ...
.text:004024A0                 mov     eax, 5
.text:004024A5                 jmp     loc_4023C0
.text:004024AA ; ---------------------------------------------------------------------------
.text:004024AA
.text:004024AA loc_4024AA:                             ; CODE XREF: sub_402370+AB↑j
.text:004024AA                 cmp     byte ptr [ebx], 0
.text:004024AD                 jz      loc_402421
.text:004024B3
.text:004024B3 loc_4024B3:                             ; CODE XREF: sub_402370+151↓j
.text:004024B3                                         ; sub_402370+182↓j ...
.text:004024B3                 mov     eax, 2
.text:004024B8                 jmp     loc_4023C0
.text:004024BD ; ---------------------------------------------------------------------------
.text:004024BD
.text:004024BD loc_4024BD:                             ; CODE XREF: sub_402370+9D↑j
.text:004024BD                 cmp     byte ptr [ebx+0Ah], 0
.text:004024C1                 jz      short loc_4024B3
.text:004024C3                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:004024C7                 mov     [esp+3Ch+Format], edi ; int
.text:004024CA                 call    sub_403390
.text:004024CF                 mov     [esp+3Ch+Format], eax ; char *
.text:004024D2                 call    sub_405870
.text:004024D7                 mov     [esp+3Ch+Format], offset aRemovedS ; "removed %s\n"
.text:004024DE
.text:004024DE loc_4024DE:                             ; CODE XREF: sub_402370+1E3↓j
.text:004024DE                 mov     ebx, eax
.text:004024E0                 call    ds:libintl_gettext
.text:004024E6                 mov     [esp+3Ch+ErrorMessage], ebx
.text:004024EA                 mov     [esp+3Ch+Format], eax ; Format
.text:004024ED                 call    printf
.text:004024F2                 jmp     short loc_4024B3
.text:004024F4 ; ---------------------------------------------------------------------------
.text:004024F4
.text:004024F4 loc_4024F4:                             ; CODE XREF: sub_402370+74↑j
.text:004024F4                 mov     [esp+3Ch+Format], esi ; LPCSTR
.text:004024F7                 call    sub_4106C0
.text:004024FC                 test    eax, eax
.text:004024FE                 jz      short loc_40252E
.text:00402500                 call    _errno
.text:00402505                 cmp     dword ptr [eax], 2
.text:00402508                 jz      short loc_402527
.text:0040250A
.text:0040250A loc_40250A:                             ; CODE XREF: sub_402370+1BA↓j
.text:0040250A                 call    _errno
.text:0040250F                 cmp     dword ptr [eax], 29h ; ')'
.text:00402512                 jz      short loc_4024A0
.text:00402514                 call    _errno
.text:00402519                 cmp     dword ptr [eax], 11h
.text:0040251C                 jnz     loc_4023EA
.text:00402522                 jmp     loc_4024A0
.text:00402527 ; ---------------------------------------------------------------------------
.text:00402527
.text:00402527 loc_402527:                             ; CODE XREF: sub_402370+198↑j
.text:00402527                 cmp     byte ptr [ebx], 0
.text:0040252A                 jz      short loc_40250A
.text:0040252C                 jmp     short loc_4024B3
.text:0040252E ; ---------------------------------------------------------------------------
.text:0040252E
.text:0040252E loc_40252E:                             ; CODE XREF: sub_402370+18E↑j
.text:0040252E                 cmp     byte ptr [ebx+0Ah], 0
.text:00402532                 jz      loc_4024B3
.text:00402538                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:0040253C                 mov     [esp+3Ch+Format], edi ; int
.text:0040253F                 call    sub_403390
.text:00402544                 mov     [esp+3Ch+Format], eax ; char *
.text:00402547                 call    sub_405870
.text:0040254C                 mov     [esp+3Ch+Format], offset aRemovedDirecto ; "removed directory: %s\n"
.text:00402553                 jmp     short loc_4024DE
.text:00402555 ; ---------------------------------------------------------------------------
.text:00402555
.text:00402555 loc_402555:                             ; CODE XREF: sub_402370+69↑j
.text:00402555                 cmp     byte ptr [ebx+2], 0
.text:00402559                 jnz     loc_4023DF
.text:0040255F                 mov     [esp+3Ch+ErrorMessage], esi ; char *
.text:00402563                 mov     [esp+3Ch+Format], edi ; int
.text:00402566                 call    sub_403390
.text:0040256B                 mov     [esp+3Ch+Format], eax ; char *
.text:0040256E                 call    sub_405870
.text:00402573                 mov     [esp+3Ch+Format], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:0040257A                 mov     esi, eax
.text:0040257C                 call    ds:libintl_gettext
.text:00402582                 mov     dword ptr [esp+3Ch+var_30], esi
.text:00402586                 mov     [esp+3Ch+ErrorMessage], 15h
.text:0040258E                 mov     [esp+3Ch+var_34], eax
.text:00402592                 jmp     loc_402487
.text:00402592 sub_402370      endp
.text:00402592
.text:00402592 ; ---------------------------------------------------------------------------
.text:00402597 ; const CHAR byte_402597
.text:00402597 byte_402597     db 2Eh                  ; DATA XREF: sub_4026E0+151↓o
.text:00402597                                         ; sub_4026E0+27B↓o ...
.text:00402598                 db 0
.text:00402599 aCannotChdirFro db 'cannot chdir from %s to %s',0
.text:00402599                                         ; DATA XREF: sub_4026E0+17A↓o
.text:00402599                                         ; sub_403D80+2AF↓o
.text:004025B4 aSChangedDevIno db '%s changed dev/ino',0
.text:004025B4                                         ; DATA XREF: sub_4026E0+2FA↓o
.text:004025B4                                         ; sub_4026E0+54D↓o ...
.text:004025C7 aCannotLstatInS db 'cannot lstat `.',27h,' in %s',0
.text:004025C7                                         ; DATA XREF: sub_4026E0+618↓o
.text:004025C7                                         ; sub_4026E0+8B4↓o ...
.text:004025DE a1AdStackHeight db '1 < AD_stack_height (ds)',0
.text:004025DE                                         ; DATA XREF: sub_4026E0+850↓o
.text:004025F7 ; const char asc_4025F7[]
.text:004025F7 asc_4025F7      db '/',0                ; DATA XREF: sub_4026E0+8FB↓o
.text:004025F7                                         ; sub_4026E0:loc_403070↓o ...
.text:004025F9                 align 10h
.text:00402600 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.text:00402600                                         ; DATA XREF: sub_4026E0+936↓o
.text:0040262D                 align 20h
.text:00402640 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.text:00402640                                         ; DATA XREF: sub_4026E0:loc_403041↓o
.text:00402671                 db 0EBh, 0Dh, 90h
.text:00402674                 align 10h
.text:00402680 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.text:00402680                                         ; DATA XREF: sub_4026E0+9D0↓o
.text:004026BA aCannotLstatS   db 'cannot lstat %s',0  ; DATA XREF: sub_4026E0+A26↓o
.text:004026BA                                         ; sub_403900+2D3↓o ...
.text:004026CA aErrno0         db 'errno != 0',0       ; DATA XREF: sub_4026E0+B59↓o
.text:004026D5                 align 10h
.text:004026E0
.text:004026E0 ; =============== S U B R O U T I N E =======================================
.text:004026E0
.text:004026E0
.text:004026E0 ; int __cdecl sub_4026E0(int, LPCSTR, int, int)
.text:004026E0 sub_4026E0      proc near               ; CODE XREF: sub_401FE0+283↑p
.text:004026E0
.text:004026E0 Buf             = dword ptr -22Ch
.text:004026E0 Value           = dword ptr -228h
.text:004026E0 Size            = dword ptr -224h
.text:004026E0 var_220         = byte ptr -220h
.text:004026E0 var_21C         = dword ptr -21Ch
.text:004026E0 var_218         = dword ptr -218h
.text:004026E0 Src             = dword ptr -1F8h
.text:004026E0 var_1F4         = dword ptr -1F4h
.text:004026E0 var_1F0         = dword ptr -1F0h
.text:004026E0 var_1EC         = dword ptr -1ECh
.text:004026E0 var_1E8         = dword ptr -1E8h
.text:004026E0 var_1E4         = dword ptr -1E4h
.text:004026E0 Block           = dword ptr -1E0h
.text:004026E0 var_1DC         = byte ptr -1DCh
.text:004026E0 var_1D4         = dword ptr -1D4h
.text:004026E0 var_1D0         = dword ptr -1D0h
.text:004026E0 var_1CC         = dword ptr -1CCh
.text:004026E0 var_1C8         = dword ptr -1C8h
.text:004026E0 var_16C         = byte ptr -16Ch
.text:004026E0 var_164         = dword ptr -164h
.text:004026E0 var_160         = dword ptr -160h
.text:004026E0 var_15C         = dword ptr -15Ch
.text:004026E0 var_158         = dword ptr -158h
.text:004026E0 var_FC          = byte ptr -0FCh
.text:004026E0 var_F4          = dword ptr -0F4h
.text:004026E0 var_F0          = dword ptr -0F0h
.text:004026E0 var_EC          = dword ptr -0ECh
.text:004026E0 var_E8          = dword ptr -0E8h
.text:004026E0 var_8C          = dword ptr -8Ch
.text:004026E0 var_84          = dword ptr -84h
.text:004026E0 var_80          = dword ptr -80h
.text:004026E0 var_7C          = dword ptr -7Ch
.text:004026E0 var_78          = dword ptr -78h
.text:004026E0 arg_0           = dword ptr  4
.text:004026E0 arg_4           = dword ptr  8
.text:004026E0 arg_8           = dword ptr  0Ch
.text:004026E0 arg_C           = dword ptr  10h
.text:004026E0
.text:004026E0                 push    ebp
.text:004026E1                 push    edi
.text:004026E2                 push    esi
.text:004026E3                 push    ebx
.text:004026E4                 sub     esp, 21Ch
.text:004026EA                 call    _errno
.text:004026EF                 mov     ecx, [esp+22Ch+arg_8]
.text:004026F6                 mov     esi, [eax]
.text:004026F8                 mov     eax, [ecx]
.text:004026FA                 test    eax, eax
.text:004026FC                 jz      loc_40313F
.text:00402702
.text:00402702 loc_402702:                             ; CODE XREF: sub_4026E0+AF4↓j
.text:00402702                 mov     edi, [eax]
.text:00402704                 test    edi, edi
.text:00402706                 jz      loc_4027B3
.text:0040270C                 mov     edx, [esp+22Ch+arg_4]
.text:00402713                 movzx   eax, byte ptr [edx]
.text:00402716                 test    al, al
.text:00402718                 jz      short loc_402724
.text:0040271A                 cmp     byte ptr [edx+1], 3Ah ; ':'
.text:0040271E                 jz      loc_403137
.text:00402724
.text:00402724 loc_402724:                             ; CODE XREF: sub_4026E0+38↑j
.text:00402724                                         ; sub_4026E0+A5A↓j
.text:00402724                 cmp     byte ptr [edx], 2Fh ; '/'
.text:00402727                 jz      loc_4027B3
.text:0040272D                 test    al, al
.text:0040272F                 mov     edx, [esp+22Ch+arg_4]
.text:00402736                 jz      short loc_402742
.text:00402738                 cmp     byte ptr [edx+1], 3Ah ; ':'
.text:0040273C                 jz      loc_40312F
.text:00402742
.text:00402742 loc_402742:                             ; CODE XREF: sub_4026E0+56↑j
.text:00402742                                         ; sub_4026E0+A52↓j
.text:00402742                 cmp     byte ptr [edx], 5Ch ; '\'
.text:00402745                 jz      short loc_4027B3
.text:00402747                 mov     edx, [esp+22Ch+arg_4]
.text:0040274E                 mov     edi, [esp+22Ch+arg_0]
.text:00402755                 mov     [esp+22Ch+Value], edx ; char *
.text:00402759                 mov     [esp+22Ch+Buf], edi ; int
.text:0040275C                 call    sub_403390
.text:00402761                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402764                 call    sub_405870
.text:00402769                 mov     [esp+22Ch+Buf], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:00402770                 mov     ebp, eax
.text:00402772                 call    ds:libintl_gettext
.text:00402778                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:0040277C                 mov     ebp, edi
.text:0040277E                 add     ebp, 0A8h ; '¨'
.text:00402784                 mov     [esp+22Ch+Size], eax ; char *
.text:00402788                 mov     eax, [esp+22Ch+arg_8]
.text:0040278F                 mov     ebx, [eax]
.text:00402791                 mov     esi, [ebx]
.text:00402793                 mov     [esp+22Ch+Buf], 0 ; Code
.text:0040279A                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:0040279E                 call    sub_40FF30
.text:004027A3                 mov     [esp+22Ch+Value], 1 ; Value
.text:004027AB                 mov     [esp+22Ch+Buf], ebp ; Buf
.text:004027AE                 call    longjmp
.text:004027B3 ; ---------------------------------------------------------------------------
.text:004027B3
.text:004027B3 loc_4027B3:                             ; CODE XREF: sub_4026E0+26↑j
.text:004027B3                                         ; sub_4026E0+47↑j ...
.text:004027B3                 mov     edi, [esp+22Ch+arg_4]
.text:004027BA                 lea     ecx, [esp+22Ch+var_8C]
.text:004027C1                 mov     [esp+22Ch+Value], ecx
.text:004027C5                 mov     [esp+22Ch+Buf], edi
.text:004027C8                 call    sub_4047E0
.text:004027CD                 test    eax, eax
.text:004027CF                 jnz     loc_4030E4
.text:004027D5                 call    _errno
.text:004027DA                 mov     dword ptr [eax], 14h
.text:004027E0                 mov     edi, [esp+22Ch+var_8C]
.text:004027E7                 and     edi, 0F000h
.text:004027ED                 cmp     edi, 4000h
.text:004027F3                 jnz     short loc_40280C
.text:004027F5                 mov     ecx, [esp+22Ch+arg_4]
.text:004027FC                 mov     [esp+22Ch+Buf], ecx ; LPCSTR
.text:004027FF                 call    sub_4108E0
.text:00402804                 test    eax, eax
.text:00402806                 jz      loc_4028E9
.text:0040280C
.text:0040280C loc_40280C:                             ; CODE XREF: sub_4026E0+113↑j
.text:0040280C                 call    _errno
.text:00402811                 cmp     dword ptr [eax], 14h
.text:00402814                 jz      loc_40289E
.text:0040281A                 mov     [esp+22Ch+Buf], 1 ; int
.text:00402821                 mov     edi, [esp+22Ch+arg_4]
.text:00402828                 mov     [esp+22Ch+Value], edi ; char *
.text:0040282C                 call    sub_405840
.text:00402831                 mov     [esp+22Ch+Value], offset byte_402597 ; char *
.text:00402839                 mov     ebp, eax
.text:0040283B                 mov     eax, [esp+22Ch+arg_0]
.text:00402842                 mov     [esp+22Ch+Buf], eax ; int
.text:00402845                 call    sub_403390
.text:0040284A                 mov     [esp+22Ch+Value], eax ; char *
.text:0040284E                 mov     [esp+22Ch+Buf], 0 ; int
.text:00402855                 call    sub_405840
.text:0040285A                 mov     [esp+22Ch+Buf], offset aCannotChdirFro ; "cannot chdir from %s to %s"
.text:00402861                 mov     ebx, eax
.text:00402863                 call    ds:libintl_gettext
.text:00402869                 mov     esi, eax
.text:0040286B                 call    _errno
.text:00402870                 mov     [esp+22Ch+var_21C], ebp
.text:00402874                 mov     dword ptr [esp+22Ch+var_220], ebx ; char
.text:00402878                 mov     [esp+22Ch+Size], esi ; char *
.text:0040287C                 mov     esi, [eax]
.text:0040287E                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00402885                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00402889                 call    sub_40FF30
.text:0040288E
.text:0040288E loc_40288E:                             ; CODE XREF: sub_4026E0+207↓j
.text:0040288E                 mov     eax, 4
.text:00402893
.text:00402893 loc_402893:                             ; CODE XREF: sub_4026E0+6A6↓j
.text:00402893                                         ; sub_4026E0+83B↓j ...
.text:00402893                 add     esp, 21Ch
.text:00402899                 pop     ebx
.text:0040289A                 pop     esi
.text:0040289B                 pop     edi
.text:0040289C                 pop     ebp
.text:0040289D                 retn
.text:0040289E ; ---------------------------------------------------------------------------
.text:0040289E
.text:0040289E loc_40289E:                             ; CODE XREF: sub_4026E0+134↑j
.text:0040289E                 mov     edx, [esp+22Ch+arg_4]
.text:004028A5                 mov     ebx, [esp+22Ch+arg_0]
.text:004028AC                 mov     [esp+22Ch+Value], edx ; char *
.text:004028B0                 mov     [esp+22Ch+Buf], ebx ; int
.text:004028B3                 call    sub_403390
.text:004028B8                 mov     [esp+22Ch+Buf], eax ; char *
.text:004028BB                 call    sub_405870
.text:004028C0                 mov     [esp+22Ch+Buf], offset aCannotRemoveS ; "cannot remove %s"
.text:004028C7                 mov     ebp, eax
.text:004028C9                 call    ds:libintl_gettext
.text:004028CF                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:004028D3                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:004028D7                 mov     [esp+22Ch+Size], eax ; char *
.text:004028DB
.text:004028DB loc_4028DB:                             ; CODE XREF: sub_4026E0+A4A↓j
.text:004028DB                 mov     [esp+22Ch+Buf], 0 ; Code
.text:004028E2                 call    sub_40FF30
.text:004028E7                 jmp     short loc_40288E
.text:004028E9 ; ---------------------------------------------------------------------------
.text:004028E9
.text:004028E9 loc_4028E9:                             ; CODE XREF: sub_4026E0+126↑j
.text:004028E9                 mov     ecx, [esp+22Ch+arg_C]
.text:004028F0                 mov     edi, [ecx+4]
.text:004028F3                 test    edi, edi
.text:004028F5                 jz      short loc_402936
.text:004028F7                 mov     edx, [esp+22Ch+var_80]
.text:004028FE                 mov     ebp, [esp+22Ch+var_84]
.text:00402905                 mov     esi, [edi]
.text:00402907                 mov     ecx, [edi+4]
.text:0040290A                 mov     eax, edx
.text:0040290C                 xor     esi, ebp
.text:0040290E                 xor     eax, ecx
.text:00402910                 or      eax, esi
.text:00402912                 jnz     short loc_402936
.text:00402914                 mov     edx, [esp+22Ch+var_78]
.text:0040291B                 mov     ebp, [esp+22Ch+var_7C]
.text:00402922                 mov     esi, [edi+8]
.text:00402925                 mov     ecx, [edi+0Ch]
.text:00402928                 mov     eax, edx
.text:0040292A                 xor     esi, ebp
.text:0040292C                 xor     eax, ecx
.text:0040292E                 or      eax, esi
.text:00402930                 jz      loc_402FC9
.text:00402936
.text:00402936 loc_402936:                             ; CODE XREF: sub_4026E0+215↑j
.text:00402936                                         ; sub_4026E0+232↑j
.text:00402936                 mov     eax, [esp+22Ch+arg_0]
.text:0040293D                 lea     ebp, [esp+22Ch+var_FC]
.text:00402944                 mov     esi, [esp+22Ch+arg_4]
.text:0040294B                 mov     [esp+22Ch+Buf], eax ; int
.text:0040294E                 mov     [esp+22Ch+Value], esi ; char *
.text:00402952                 call    sub_403290
.text:00402957                 mov     [esp+22Ch+Value], ebp
.text:0040295B                 mov     [esp+22Ch+Buf], offset byte_402597
.text:00402962                 call    sub_4047E0
.text:00402967                 test    eax, eax
.text:00402969                 jnz     loc_402F75
.text:0040296F
.text:0040296F loc_40296F:                             ; CODE XREF: sub_4026E0+8E4↓j
.text:0040296F                 mov     esi, [esp+22Ch+var_F0]
.text:00402976                 mov     edi, [esp+22Ch+var_F4]
.text:0040297D                 mov     ebp, [esp+22Ch+var_84]
.text:00402984                 mov     ecx, [esp+22Ch+var_80]
.text:0040298B                 mov     eax, esi
.text:0040298D                 xor     ebp, edi
.text:0040298F                 xor     eax, ecx
.text:00402991                 or      eax, ebp
.text:00402993                 jnz     short loc_4029BB
.text:00402995                 mov     edx, [esp+22Ch+var_E8]
.text:0040299C                 mov     edi, [esp+22Ch+var_EC]
.text:004029A3                 mov     ebp, [esp+22Ch+var_7C]
.text:004029AA                 mov     ecx, [esp+22Ch+var_78]
.text:004029B1                 mov     eax, edx
.text:004029B3                 xor     ebp, edi
.text:004029B5                 xor     eax, ecx
.text:004029B7                 or      eax, ebp
.text:004029B9                 jz      short loc_402A05
.text:004029BB
.text:004029BB loc_4029BB:                             ; CODE XREF: sub_4026E0+2B3↑j
.text:004029BB                 mov     [esp+22Ch+Value], offset byte_402597 ; char *
.text:004029C3                 mov     ebx, [esp+22Ch+arg_0]
.text:004029CA                 mov     [esp+22Ch+Buf], ebx ; int
.text:004029CD                 call    sub_403390
.text:004029D2                 mov     [esp+22Ch+Buf], eax ; char *
.text:004029D5                 call    sub_405870
.text:004029DA                 mov     [esp+22Ch+Buf], offset aSChangedDevIno ; "%s changed dev/ino"
.text:004029E1                 mov     esi, eax
.text:004029E3                 call    ds:libintl_gettext
.text:004029E9                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:004029ED                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:004029F5                 mov     [esp+22Ch+Buf], 1 ; Code
.text:004029FC                 mov     [esp+22Ch+Size], eax ; char *
.text:00402A00                 call    sub_40FF30
.text:00402A05
.text:00402A05 loc_402A05:                             ; CODE XREF: sub_4026E0+2D9↑j
.text:00402A05                 mov     ecx, [esp+22Ch+arg_0]
.text:00402A0C                 add     ecx, 58h ; 'X'
.text:00402A0F                 mov     ebp, [ecx+10h]
.text:00402A12                 mov     [esp+22Ch+var_1F4], ecx
.text:00402A16                 mov     edx, [ecx+0Ch]
.text:00402A19                 sub     ebp, edx
.text:00402A1B                 cmp     ebp, 18h
.text:00402A1E                 jl      loc_402F59
.text:00402A24
.text:00402A24 loc_402A24:                             ; CODE XREF: sub_4026E0+890↓j
.text:00402A24                 mov     [esp+22Ch+var_1F0], 2
.text:00402A2C                 mov     esi, [esp+22Ch+var_1F4]
.text:00402A30                 lea     ebp, [edx+18h]
.text:00402A33                 mov     eax, [esp+22Ch+arg_0]
.text:00402A3A                 mov     ecx, [esp+22Ch+var_EC]
.text:00402A41                 mov     edi, [esp+22Ch+var_E8]
.text:00402A48                 mov     [esi+0Ch], ebp
.text:00402A4B                 mov     ebp, [eax+64h]
.text:00402A4E                 lea     esi, [ebp-18h]
.text:00402A51                 mov     [esi+10h], ecx
.text:00402A54                 mov     [esi+14h], edi
.text:00402A57                 mov     edx, [esp+22Ch+var_F4]
.text:00402A5E                 mov     dword ptr [ebp-18h], 0
.text:00402A65                 mov     ebx, [esp+22Ch+var_F0]
.text:00402A6C                 mov     dword ptr [esi+4], 2
.text:00402A73                 mov     [esi+8], edx
.text:00402A76                 mov     [esi+0Ch], ebx
.text:00402A79                 lea     esi, [esi+0]
.text:00402A80
.text:00402A80 loc_402A80:                             ; CODE XREF: sub_4026E0+5D6↓j
.text:00402A80                                         ; sub_4026E0+69C↓j
.text:00402A80                 mov     [esp+22Ch+Block], 0
.text:00402A88                 mov     ecx, [esp+22Ch+arg_C]
.text:00402A8F                 lea     edx, [esp+22Ch+var_16C]
.text:00402A96                 mov     [esp+22Ch+Size], edx
.text:00402A9A                 mov     ebx, [esp+22Ch+arg_0]
.text:00402AA1                 lea     edi, [esp+22Ch+Block]
.text:00402AA5                 mov     [esp+22Ch+Value], edi
.text:00402AA9                 mov     dword ptr [esp+22Ch+var_220], ecx
.text:00402AAD                 mov     [esp+22Ch+Buf], ebx
.text:00402AB0                 call    sub_403D80
.text:00402AB5                 cmp     eax, 2
.text:00402AB8                 mov     esi, eax
.text:00402ABA                 jz      loc_402B93
.text:00402AC0                 cmp     eax, 4
.text:00402AC3                 jz      loc_402F50
.text:00402AC9                 cmp     eax, 3
.text:00402ACC                 jz      loc_402F40
.text:00402AD2
.text:00402AD2 loc_402AD2:                             ; CODE XREF: sub_4026E0+865↓j
.text:00402AD2                                         ; sub_4026E0+874↓j
.text:00402AD2                 mov     edx, [esp+22Ch+arg_0]
.text:00402AD9                 mov     ecx, [edx+34h]
.text:00402ADC                 mov     eax, [edx+38h]
.text:00402ADF                 mov     edi, [edx+34h]
.text:00402AE2                 mov     ebp, [edx+64h]
.text:00402AE5                 sub     eax, ecx
.text:00402AE7                 shr     eax, 2
.text:00402AEA                 mov     ebx, [edi+eax*4-4]
.text:00402AEE                 mov     edi, [edx+0Ch]
.text:00402AF1                 mov     [esp+22Ch+Buf], ebx ; size_t
.text:00402AF4                 sub     edi, ebx
.text:00402AF6                 mov     [esp+22Ch+Src], edi
.text:00402AFA                 call    sub_407140
.text:00402AFF                 mov     [esp+22Ch+Buf], eax ; void *
.text:00402B02                 mov     ecx, [esp+22Ch+Src]
.text:00402B06                 mov     edi, eax
.text:00402B08                 lea     edx, [ebx-1]
.text:00402B0B                 mov     [esp+22Ch+Size], edx ; Size
.text:00402B0F                 mov     [esp+22Ch+Value], ecx ; Src
.text:00402B13                 call    memcpy
.text:00402B18                 mov     byte ptr [ebx+edi-1], 0
.text:00402B1D                 mov     ebx, [esp+22Ch+var_1F4]
.text:00402B21                 mov     eax, [ebx+8]
.text:00402B24                 mov     edx, [ebx+0Ch]
.text:00402B27                 sub     edx, eax
.text:00402B29                 mov     eax, 0AAAAAAABh
.text:00402B2E                 mul     edx
.text:00402B30                 shr     edx, 4
.text:00402B33                 cmp     edx, 1
.text:00402B36                 jbe     loc_402F20
.text:00402B3C                 mov     ecx, [ebp-30h]
.text:00402B3F                 lea     ebx, [ebp-30h]
.text:00402B42                 test    ecx, ecx
.text:00402B44                 jnz     short loc_402B7D
.text:00402B46                 mov     [esp+22Ch+var_21C], offset j_free
.text:00402B4E                 mov     dword ptr [esp+22Ch+var_220], offset sub_403260
.text:00402B56                 mov     [esp+22Ch+Size], offset sub_407430
.text:00402B5E                 mov     [esp+22Ch+Value], 0
.text:00402B66                 mov     [esp+22Ch+Buf], 0Dh
.text:00402B6D                 call    sub_406250
.text:00402B72                 mov     [ebp-30h], eax
.text:00402B75                 test    eax, eax
.text:00402B77                 jz      loc_403245
.text:00402B7D
.text:00402B7D loc_402B7D:                             ; CODE XREF: sub_4026E0+464↑j
.text:00402B7D                 mov     [esp+22Ch+Value], edi
.text:00402B81                 mov     ebp, [ebx]
.text:00402B83                 mov     [esp+22Ch+Buf], ebp
.text:00402B86                 call    sub_4067A0
.text:00402B8B                 test    eax, eax
.text:00402B8D                 jz      loc_403245
.text:00402B93
.text:00402B93 loc_402B93:                             ; CODE XREF: sub_4026E0+3DA↑j
.text:00402B93                 mov     eax, [esp+22Ch+Block]
.text:00402B97                 test    eax, eax
.text:00402B99                 jz      loc_402D30
.text:00402B9F                 mov     [esp+22Ch+Value], eax ; char *
.text:00402BA3                 mov     esi, [esp+22Ch+arg_0]
.text:00402BAA                 lea     edi, [esp+22Ch+var_1DC]
.text:00402BAE                 mov     [esp+22Ch+Buf], esi ; int
.text:00402BB1                 call    sub_403290
.text:00402BB6                 mov     [esp+22Ch+Value], edi
.text:00402BBA                 mov     [esp+22Ch+Buf], offset byte_402597
.text:00402BC1                 call    sub_4047E0
.text:00402BC6                 test    eax, eax
.text:00402BC8                 jnz     loc_402CE0
.text:00402BCE
.text:00402BCE loc_402BCE:                             ; CODE XREF: sub_4026E0+648↓j
.text:00402BCE                 mov     edx, [esp+22Ch+var_1D0]
.text:00402BD2                 mov     eax, [esp+22Ch+var_1D4]
.text:00402BD6                 mov     esi, [esp+22Ch+var_164]
.text:00402BDD                 mov     ecx, [esp+22Ch+var_160]
.text:00402BE4                 mov     edi, edx
.text:00402BE6                 xor     esi, eax
.text:00402BE8                 xor     edi, ecx
.text:00402BEA                 or      esi, edi
.text:00402BEC                 jnz     short loc_402C0E
.text:00402BEE                 mov     ecx, [esp+22Ch+var_1C8]
.text:00402BF2                 mov     esi, [esp+22Ch+var_1CC]
.text:00402BF6                 mov     edi, [esp+22Ch+var_15C]
.text:00402BFD                 mov     eax, [esp+22Ch+var_158]
.text:00402C04                 mov     ebp, ecx
.text:00402C06                 xor     edi, esi
.text:00402C08                 xor     ebp, eax
.text:00402C0A                 or      edi, ebp
.text:00402C0C                 jz      short loc_402C58
.text:00402C0E
.text:00402C0E loc_402C0E:                             ; CODE XREF: sub_4026E0+50C↑j
.text:00402C0E                 mov     [esp+22Ch+Value], offset byte_402597 ; char *
.text:00402C16                 mov     ebx, [esp+22Ch+arg_0]
.text:00402C1D                 mov     [esp+22Ch+Buf], ebx ; int
.text:00402C20                 call    sub_403390
.text:00402C25                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402C28                 call    sub_405870
.text:00402C2D                 mov     [esp+22Ch+Buf], offset aSChangedDevIno ; "%s changed dev/ino"
.text:00402C34                 mov     ebp, eax
.text:00402C36                 call    ds:libintl_gettext
.text:00402C3C                 mov     dword ptr [esp+22Ch+var_220], ebp ; char
.text:00402C40                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00402C48                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00402C4F                 mov     [esp+22Ch+Size], eax ; char *
.text:00402C53                 call    sub_40FF30
.text:00402C58
.text:00402C58 loc_402C58:                             ; CODE XREF: sub_4026E0+52C↑j
.text:00402C58                 mov     esi, [esp+22Ch+var_1F4]
.text:00402C5C                 mov     edi, [esi+10h]
.text:00402C5F                 mov     edx, [esi+0Ch]
.text:00402C62                 sub     edi, edx
.text:00402C64                 cmp     edi, 18h
.text:00402C67                 jl      short loc_402CC0
.text:00402C69
.text:00402C69 loc_402C69:                             ; CODE XREF: sub_4026E0+5F7↓j
.text:00402C69                 mov     ebp, [esp+22Ch+var_1F4]
.text:00402C6D                 lea     edi, [edx+18h]
.text:00402C70                 mov     eax, [esp+22Ch+arg_0]
.text:00402C77                 mov     edx, [esp+22Ch+var_1CC]
.text:00402C7B                 mov     esi, [esp+22Ch+var_1C8]
.text:00402C7F                 mov     [ebp+0Ch], edi
.text:00402C82                 mov     edi, [eax+64h]
.text:00402C85                 lea     ebp, [edi-18h]
.text:00402C88                 mov     [ebp+10h], edx
.text:00402C8B                 mov     edx, [esp+22Ch+Block]
.text:00402C8F                 mov     [ebp+14h], esi
.text:00402C92                 mov     ebx, [esp+22Ch+var_1D4]
.text:00402C96                 mov     dword ptr [edi-18h], 0
.text:00402C9D                 mov     ecx, [esp+22Ch+var_1D0]
.text:00402CA1                 mov     dword ptr [ebp+4], 2
.text:00402CA8                 mov     [ebp+8], ebx
.text:00402CAB                 mov     [ebp+0Ch], ecx
.text:00402CAE                 mov     [esp+22Ch+Buf], edx ; Block
.text:00402CB1                 call    free
.text:00402CB6                 jmp     loc_402A80
.text:00402CB6 ; ---------------------------------------------------------------------------
.text:00402CBB                 align 10h
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_4026E0+587↑j
.text:00402CC0                 mov     [esp+22Ch+Value], 18h
.text:00402CC8                 mov     [esp+22Ch+Buf], esi
.text:00402CCB                 call    sub_416D60
.text:00402CD0                 mov     eax, [esp+22Ch+var_1F4]
.text:00402CD4                 mov     edx, [eax+0Ch]
.text:00402CD7                 jmp     short loc_402C69
.text:00402CD7 ; ---------------------------------------------------------------------------
.text:00402CD9                 align 10h
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_4026E0+4E8↑j
.text:00402CE0                 mov     [esp+22Ch+Buf], esi ; int
.text:00402CE3                 mov     [esp+22Ch+Value], offset byte_402597 ; char *
.text:00402CEB                 call    sub_403390
.text:00402CF0                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402CF3                 call    sub_405870
.text:00402CF8                 mov     [esp+22Ch+Buf], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:00402CFF                 mov     ebx, eax
.text:00402D01                 call    ds:libintl_gettext
.text:00402D07                 mov     ebp, eax
.text:00402D09                 call    _errno
.text:00402D0E                 mov     dword ptr [esp+22Ch+var_220], ebx ; char
.text:00402D12                 mov     [esp+22Ch+Size], ebp ; char *
.text:00402D16                 mov     esi, [eax]
.text:00402D18                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00402D1F                 mov     [esp+22Ch+Value], esi ; ErrorMessage
.text:00402D23                 call    sub_40FF30
.text:00402D28                 jmp     loc_402BCE
.text:00402D28 ; ---------------------------------------------------------------------------
.text:00402D2D                 align 10h
.text:00402D30
.text:00402D30 loc_402D30:                             ; CODE XREF: sub_4026E0+4B9↑j
.text:00402D30                 mov     eax, [esp+22Ch+arg_8]
.text:00402D37                 lea     ecx, [esp+22Ch+var_1E4]
.text:00402D3B                 mov     ebx, [esp+22Ch+arg_0]
.text:00402D42                 mov     ebp, [eax]
.text:00402D44                 mov     [esp+22Ch+Value], ecx
.text:00402D48                 mov     [esp+22Ch+Buf], ebx
.text:00402D4B                 mov     [esp+22Ch+Size], ebp
.text:00402D4F                 call    sub_403580
.text:00402D54                 cmp     esi, 2
.text:00402D57                 jz      short loc_402D90
.text:00402D59
.text:00402D59 loc_402D59:                             ; CODE XREF: sub_4026E0+709↓j
.text:00402D59                                         ; sub_4026E0+749↓j ...
.text:00402D59                 mov     edx, [esp+22Ch+var_1E4]
.text:00402D5D                 mov     [esp+22Ch+Buf], edx ; Block
.text:00402D60                 call    free
.text:00402D65                 mov     eax, [esp+22Ch+var_1F4]
.text:00402D69                 mov     ebp, [eax+0Ch]
.text:00402D6C                 mov     esi, [eax+8]
.text:00402D6F                 mov     eax, 0AAAAAAABh
.text:00402D74                 sub     ebp, esi
.text:00402D76                 mul     ebp
.text:00402D78                 shr     edx, 4
.text:00402D7B                 dec     edx
.text:00402D7C                 jnz     loc_402A80
.text:00402D82                 mov     eax, [esp+22Ch+var_1F0]
.text:00402D86                 jmp     loc_402893
.text:00402D86 ; ---------------------------------------------------------------------------
.text:00402D8B                 align 10h
.text:00402D90
.text:00402D90 loc_402D90:                             ; CODE XREF: sub_4026E0+677↑j
.text:00402D90                 mov     dword ptr [esp+22Ch+var_220], 3 ; int
.text:00402D98                 lea     esi, [esp+22Ch+var_1EC]
.text:00402D9C                 mov     edi, [esp+22Ch+var_1E4]
.text:00402DA0                 mov     [esp+22Ch+var_21C], esi ; int
.text:00402DA4                 mov     edx, [esp+22Ch+arg_0]
.text:00402DAB                 lea     ebx, [esp+22Ch+var_1E8]
.text:00402DAF                 mov     [esp+22Ch+var_218], ebx ; int
.text:00402DB3                 mov     esi, [esp+22Ch+arg_C]
.text:00402DBA                 mov     [esp+22Ch+Value], edi ; LPCSTR
.text:00402DBE                 mov     [esp+22Ch+Buf], edx ; int
.text:00402DC1                 mov     [esp+22Ch+Size], esi ; int
.text:00402DC5                 call    sub_403900
.text:00402DCA                 cmp     eax, 2
.text:00402DCD                 mov     ebx, eax
.text:00402DCF                 jnz     loc_402F0D
.text:00402DD5                 mov     ecx, [esp+22Ch+var_1E4]
.text:00402DD9                 mov     [esp+22Ch+Buf], ecx ; LPCSTR
.text:00402DDC                 call    sub_4106C0
.text:00402DE1                 test    eax, eax
.text:00402DE3                 jnz     short loc_402E2E
.text:00402DE5                 cmp     byte ptr [esi+0Ah], 0
.text:00402DE9                 jz      loc_402D59
.text:00402DEF                 mov     edx, [esp+22Ch+var_1E4]
.text:00402DF3                 mov     eax, [esp+22Ch+arg_0]
.text:00402DFA                 mov     [esp+22Ch+Value], edx ; char *
.text:00402DFE                 mov     [esp+22Ch+Buf], eax ; int
.text:00402E01                 call    sub_403390
.text:00402E06                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402E09                 call    sub_405870
.text:00402E0E                 mov     [esp+22Ch+Buf], offset aRemovedDirecto ; "removed directory: %s\n"
.text:00402E15                 mov     ebp, eax
.text:00402E17                 call    ds:libintl_gettext
.text:00402E1D                 mov     [esp+22Ch+Value], ebp
.text:00402E21                 mov     [esp+22Ch+Buf], eax ; Format
.text:00402E24                 call    printf
.text:00402E29                 jmp     loc_402D59
.text:00402E2E ; ---------------------------------------------------------------------------
.text:00402E2E
.text:00402E2E loc_402E2E:                             ; CODE XREF: sub_4026E0+703↑j
.text:00402E2E                 mov     edx, [esp+22Ch+var_1E4]
.text:00402E32                 mov     eax, [esp+22Ch+arg_0]
.text:00402E39                 mov     [esp+22Ch+Value], edx ; char *
.text:00402E3D                 mov     [esp+22Ch+Buf], eax ; int
.text:00402E40                 call    sub_403390
.text:00402E45                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402E48                 call    sub_405870
.text:00402E4D                 mov     [esp+22Ch+Buf], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:00402E54                 mov     esi, eax
.text:00402E56                 call    ds:libintl_gettext
.text:00402E5C                 mov     ebp, eax
.text:00402E5E                 call    _errno
.text:00402E63                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00402E67                 mov     [esp+22Ch+Size], ebp ; char *
.text:00402E6B                 mov     ebx, [eax]
.text:00402E6D                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00402E74                 mov     [esp+22Ch+Value], ebx ; ErrorMessage
.text:00402E78                 call    sub_40FF30
.text:00402E7D                 mov     edi, [esp+22Ch+arg_0]
.text:00402E84                 mov     esi, [esp+22Ch+var_1E4]
.text:00402E88                 mov     ebx, [edi+64h]
.text:00402E8B                 mov     [esp+22Ch+Buf], esi ; char *
.text:00402E8E                 call    sub_407300
.text:00402E93                 mov     ecx, [ebx-18h]
.text:00402E96                 lea     edi, [ebx-18h]
.text:00402E99                 mov     esi, eax
.text:00402E9B                 test    ecx, ecx
.text:00402E9D                 jnz     short loc_402ED6
.text:00402E9F                 mov     [esp+22Ch+var_21C], offset j_free
.text:00402EA7                 mov     dword ptr [esp+22Ch+var_220], offset sub_403260
.text:00402EAF                 mov     [esp+22Ch+Size], offset sub_407430
.text:00402EB7                 mov     [esp+22Ch+Value], 0
.text:00402EBF                 mov     [esp+22Ch+Buf], 0Dh
.text:00402EC6                 call    sub_406250
.text:00402ECB                 mov     [ebx-18h], eax
.text:00402ECE                 test    eax, eax
.text:00402ED0                 jz      loc_403245
.text:00402ED6
.text:00402ED6 loc_402ED6:                             ; CODE XREF: sub_4026E0+7BD↑j
.text:00402ED6                 mov     [esp+22Ch+Value], esi
.text:00402EDA                 mov     ecx, [edi]
.text:00402EDC                 mov     [esp+22Ch+Buf], ecx
.text:00402EDF                 call    sub_4067A0
.text:00402EE4                 test    eax, eax
.text:00402EE6                 jz      loc_403245
.text:00402EEC                 mov     [esp+22Ch+var_1F0], 4
.text:00402EF4                 mov     ebx, [esp+22Ch+arg_0]
.text:00402EFB                 mov     edi, [ebx+64h]
.text:00402EFE                 sub     edi, 18h
.text:00402F01                 mov     dword ptr [edi+4], 4
.text:00402F08                 jmp     loc_402D59
.text:00402F0D ; ---------------------------------------------------------------------------
.text:00402F0D
.text:00402F0D loc_402F0D:                             ; CODE XREF: sub_4026E0+6EF↑j
.text:00402F0D                 mov     edi, [esp+22Ch+var_1E4]
.text:00402F11                 mov     [esp+22Ch+Buf], edi ; Block
.text:00402F14                 call    free
.text:00402F19                 mov     eax, ebx
.text:00402F1B                 jmp     loc_402893
.text:00402F20 ; ---------------------------------------------------------------------------
.text:00402F20
.text:00402F20 loc_402F20:                             ; CODE XREF: sub_4026E0+456↑j
.text:00402F20                 mov     [esp+22Ch+Size], 1CFh
.text:00402F28                 mov     [esp+22Ch+Value], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00402F30                 mov     [esp+22Ch+Buf], offset a1AdStackHeight ; "1 < AD_stack_height (ds)"
.text:00402F37
.text:00402F37 loc_402F37:                             ; CODE XREF: sub_4026E0+B60↓j
.text:00402F37                 call    _assert
.text:00402F37 ; ---------------------------------------------------------------------------
.text:00402F3C                 align 10h
.text:00402F40
.text:00402F40 loc_402F40:                             ; CODE XREF: sub_4026E0+3EC↑j
.text:00402F40                 cmp     [esp+22Ch+var_1F0], 2
.text:00402F45                 jnz     loc_402AD2
.text:00402F4B                 nop
.text:00402F4C                 lea     esi, [esi+0]
.text:00402F50
.text:00402F50 loc_402F50:                             ; CODE XREF: sub_4026E0+3E3↑j
.text:00402F50                 mov     [esp+22Ch+var_1F0], esi
.text:00402F54                 jmp     loc_402AD2
.text:00402F59 ; ---------------------------------------------------------------------------
.text:00402F59
.text:00402F59 loc_402F59:                             ; CODE XREF: sub_4026E0+33E↑j
.text:00402F59                 mov     [esp+22Ch+Value], 18h
.text:00402F61                 mov     [esp+22Ch+Buf], ecx
.text:00402F64                 call    sub_416D60
.text:00402F69                 mov     eax, [esp+22Ch+var_1F4]
.text:00402F6D                 mov     edx, [eax+0Ch]
.text:00402F70                 jmp     loc_402A24
.text:00402F75 ; ---------------------------------------------------------------------------
.text:00402F75
.text:00402F75 loc_402F75:                             ; CODE XREF: sub_4026E0+289↑j
.text:00402F75                 mov     [esp+22Ch+Value], offset byte_402597 ; char *
.text:00402F7D                 mov     edx, [esp+22Ch+arg_0]
.text:00402F84                 mov     [esp+22Ch+Buf], edx ; int
.text:00402F87                 call    sub_403390
.text:00402F8C                 mov     [esp+22Ch+Buf], eax ; char *
.text:00402F8F                 call    sub_405870
.text:00402F94                 mov     [esp+22Ch+Buf], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:00402F9B                 mov     esi, eax
.text:00402F9D                 call    ds:libintl_gettext
.text:00402FA3                 mov     ebp, eax
.text:00402FA5                 call    _errno
.text:00402FAA                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00402FAE                 mov     [esp+22Ch+Size], ebp ; char *
.text:00402FB2                 mov     ebx, [eax]
.text:00402FB4                 mov     [esp+22Ch+Buf], 1 ; Code
.text:00402FBB                 mov     [esp+22Ch+Value], ebx ; ErrorMessage
.text:00402FBF                 call    sub_40FF30
.text:00402FC4                 jmp     loc_40296F
.text:00402FC9 ; ---------------------------------------------------------------------------
.text:00402FC9
.text:00402FC9 loc_402FC9:                             ; CODE XREF: sub_4026E0+250↑j
.text:00402FC9                 mov     edi, [esp+22Ch+arg_4]
.text:00402FD0                 mov     ebx, [esp+22Ch+arg_0]
.text:00402FD7                 mov     [esp+22Ch+Value], edi ; char *
.text:00402FDB                 mov     edi, offset asc_4025F7 ; "/"
.text:00402FE0                 mov     [esp+22Ch+Buf], ebx ; int
.text:00402FE3                 call    sub_403390
.text:00402FE8                 cld
.text:00402FE9                 mov     esi, eax
.text:00402FEB                 mov     ecx, 2
.text:00402FF0                 repe cmpsb
.text:00402FF2                 jnz     short loc_403070
.text:00402FF4                 mov     ebp, [esp+22Ch+arg_4]
.text:00402FFB                 mov     eax, [esp+22Ch+arg_0]
.text:00403002                 mov     [esp+22Ch+Value], ebp ; char *
.text:00403006                 mov     [esp+22Ch+Buf], eax ; int
.text:00403009                 call    sub_403390
.text:0040300E                 mov     [esp+22Ch+Buf], eax ; char *
.text:00403011                 call    sub_405870
.text:00403016                 mov     [esp+22Ch+Buf], offset aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0040301D                 mov     esi, eax
.text:0040301F                 call    ds:libintl_gettext
.text:00403025                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:00403029                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00403031                 mov     [esp+22Ch+Buf], 0 ; Code
.text:00403038                 mov     [esp+22Ch+Size], eax ; char *
.text:0040303C                 call    sub_40FF30
.text:00403041
.text:00403041 loc_403041:                             ; CODE XREF: sub_4026E0+9FF↓j
.text:00403041                 mov     [esp+22Ch+Buf], offset aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00403048                 call    ds:libintl_gettext
.text:0040304E                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:00403056                 mov     [esp+22Ch+Buf], 0 ; Code
.text:0040305D                 mov     [esp+22Ch+Size], eax ; char *
.text:00403061                 call    sub_40FF30
.text:00403066                 mov     eax, 1
.text:0040306B                 jmp     loc_402893
.text:00403070 ; ---------------------------------------------------------------------------
.text:00403070
.text:00403070 loc_403070:                             ; CODE XREF: sub_4026E0+912↑j
.text:00403070                 mov     [esp+22Ch+Value], offset asc_4025F7 ; "/"
.text:00403078                 mov     [esp+22Ch+Buf], 1 ; int
.text:0040307F                 call    sub_405840
.text:00403084                 mov     edx, [esp+22Ch+arg_4]
.text:0040308B                 mov     ebx, eax
.text:0040308D                 mov     ecx, [esp+22Ch+arg_0]
.text:00403094                 mov     [esp+22Ch+Value], edx ; char *
.text:00403098                 mov     [esp+22Ch+Buf], ecx ; int
.text:0040309B                 call    sub_403390
.text:004030A0                 mov     [esp+22Ch+Value], eax ; char *
.text:004030A4                 mov     [esp+22Ch+Buf], 0 ; int
.text:004030AB                 call    sub_405840
.text:004030B0                 mov     [esp+22Ch+Buf], offset aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:004030B7                 mov     esi, eax
.text:004030B9                 call    ds:libintl_gettext
.text:004030BF                 mov     [esp+22Ch+var_21C], ebx
.text:004030C3                 mov     dword ptr [esp+22Ch+var_220], esi ; char
.text:004030C7                 mov     [esp+22Ch+Value], 0 ; ErrorMessage
.text:004030CF                 mov     [esp+22Ch+Size], eax ; char *
.text:004030D3                 mov     [esp+22Ch+Buf], 0 ; Code
.text:004030DA                 call    sub_40FF30
.text:004030DF                 jmp     loc_403041
.text:004030E4 ; ---------------------------------------------------------------------------
.text:004030E4
.text:004030E4 loc_4030E4:                             ; CODE XREF: sub_4026E0+EF↑j
.text:004030E4                 mov     edx, [esp+22Ch+arg_0]
.text:004030EB                 mov     eax, [esp+22Ch+arg_4]
.text:004030F2                 mov     [esp+22Ch+Buf], edx ; int
.text:004030F5                 mov     [esp+22Ch+Value], eax ; char *
.text:004030F9                 call    sub_403390
.text:004030FE                 mov     [esp+22Ch+Buf], eax ; char *
.text:00403101                 call    sub_405870
.text:00403106                 mov     [esp+22Ch+Buf], offset aCannotLstatS ; "cannot lstat %s"
.text:0040310D                 mov     ebx, eax
.text:0040310F                 call    ds:libintl_gettext
.text:00403115                 mov     ebp, eax
.text:00403117                 call    _errno
.text:0040311C                 mov     dword ptr [esp+22Ch+var_220], ebx
.text:00403120                 mov     [esp+22Ch+Size], ebp
.text:00403124                 mov     esi, [eax]
.text:00403126                 mov     [esp+22Ch+Value], esi
.text:0040312A                 jmp     loc_4028DB
.text:0040312F ; ---------------------------------------------------------------------------
.text:0040312F
.text:0040312F loc_40312F:                             ; CODE XREF: sub_4026E0+5C↑j
.text:0040312F                 add     edx, 2
.text:00403132                 jmp     loc_402742
.text:00403137 ; ---------------------------------------------------------------------------
.text:00403137
.text:00403137 loc_403137:                             ; CODE XREF: sub_4026E0+3E↑j
.text:00403137                 add     edx, 2
.text:0040313A                 jmp     loc_402724
.text:0040313F ; ---------------------------------------------------------------------------
.text:0040313F
.text:0040313F loc_40313F:                             ; CODE XREF: sub_4026E0+1C↑j
.text:0040313F                 mov     [esp+22Ch+Buf], 0Ch ; size_t
.text:00403146                 call    sub_407140
.text:0040314B                 mov     edx, [esp+22Ch+arg_8]
.text:00403152                 mov     [edx], eax
.text:00403154                 add     eax, 4
.text:00403157                 mov     [esp+22Ch+Buf], eax
.text:0040315A                 call    sub_4060A0
.text:0040315F                 test    eax, eax
.text:00403161                 jnz     loc_4031EE
.text:00403167                 mov     ebx, [esp+22Ch+arg_8]
.text:0040316E                 mov     edx, [ebx]
.text:00403170                 mov     dword ptr [edx], 0
.text:00403176
.text:00403176 loc_403176:                             ; CODE XREF: sub_4026E0+B44↓j
.text:00403176                 mov     ebx, [esp+22Ch+arg_0]
.text:0040317D                 add     ebx, 58h ; 'X'
.text:00403180                 mov     ecx, [ebx+10h]
.text:00403183                 mov     edx, [ebx+0Ch]
.text:00403186                 sub     ecx, edx
.text:00403188                 cmp     ecx, 18h
.text:0040318B                 jl      short loc_4031D9
.text:0040318D
.text:0040318D loc_40318D:                             ; CODE XREF: sub_4026E0+B0C↓j
.text:0040318D                 lea     ecx, [edx+18h]
.text:00403190                 mov     ebp, [esp+22Ch+arg_8]
.text:00403197                 mov     edx, [esp+22Ch+arg_0]
.text:0040319E                 mov     [ebx+0Ch], ecx
.text:004031A1                 mov     eax, [ebp+0]
.text:004031A4                 mov     ebx, [edx+64h]
.text:004031A7                 mov     dword ptr [ebx-18h], 0
.text:004031AE                 lea     edi, [ebx-18h]
.text:004031B1                 mov     dword ptr [edi+10h], 0FFFFFFFFh
.text:004031B8                 mov     dword ptr [edi+14h], 0FFFFFFFFh
.text:004031BF                 mov     dword ptr [edi+8], 0FFFFFFFFh
.text:004031C6                 mov     dword ptr [edi+0Ch], 0FFFFFFFFh
.text:004031CD                 mov     dword ptr [edi+4], 2
.text:004031D4                 jmp     loc_402702
.text:004031D9 ; ---------------------------------------------------------------------------
.text:004031D9
.text:004031D9 loc_4031D9:                             ; CODE XREF: sub_4026E0+AAB↑j
.text:004031D9                 mov     [esp+22Ch+Value], 18h
.text:004031E1                 mov     [esp+22Ch+Buf], ebx
.text:004031E4                 call    sub_416D60
.text:004031E9                 mov     edx, [ebx+0Ch]
.text:004031EC                 jmp     short loc_40318D
.text:004031EE ; ---------------------------------------------------------------------------
.text:004031EE
.text:004031EE loc_4031EE:                             ; CODE XREF: sub_4026E0+A81↑j
.text:004031EE                 mov     ebp, [esp+22Ch+arg_8]
.text:004031F5                 mov     edi, [ebp+0]
.text:004031F8                 call    _errno
.text:004031FD                 mov     ebx, [eax]
.text:004031FF                 mov     [edi], ebx
.text:00403201                 call    _errno
.text:00403206                 mov     ecx, [eax]
.text:00403208                 test    ecx, ecx
.text:0040320A                 jz      short loc_403229
.text:0040320C                 mov     eax, [esp+22Ch+arg_8]
.text:00403213                 mov     edi, [eax]
.text:00403215                 mov     [esp+22Ch+Buf], offset asc_4025F7 ; "/"
.text:0040321C                 call    sub_407300
.text:00403221                 mov     [edi+8], eax
.text:00403224                 jmp     loc_403176
.text:00403229 ; ---------------------------------------------------------------------------
.text:00403229
.text:00403229 loc_403229:                             ; CODE XREF: sub_4026E0+B2A↑j
.text:00403229                 mov     [esp+22Ch+Size], 3F9h
.text:00403231                 mov     [esp+22Ch+Value], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00403239                 mov     [esp+22Ch+Buf], offset aErrno0 ; "errno != 0"
.text:00403240                 jmp     loc_402F37
.text:00403245 ; ---------------------------------------------------------------------------
.text:00403245
.text:00403245 loc_403245:                             ; CODE XREF: sub_4026E0+497↑j
.text:00403245                                         ; sub_4026E0+4AD↑j ...
.text:00403245                 call    sub_4073F0
.text:00403245 sub_4026E0      endp
.text:00403245
.text:00403245 ; ---------------------------------------------------------------------------
.text:0040324A                 align 10h
.text:00403250
.text:00403250 ; =============== S U B R O U T I N E =======================================
.text:00403250
.text:00403250 ; Attributes: thunk
.text:00403250
.text:00403250 ; void __cdecl j_free(void *Block)
.text:00403250 j_free          proc near               ; DATA XREF: sub_4026E0+466↑o
.text:00403250                                         ; sub_4026E0+7BF↑o ...
.text:00403250
.text:00403250 Block           = dword ptr  4
.text:00403250
.text:00403250                 jmp     free
.text:00403250 j_free          endp
.text:00403250
.text:00403250 ; ---------------------------------------------------------------------------
.text:00403255                 align 10h
.text:00403260
.text:00403260 ; =============== S U B R O U T I N E =======================================
.text:00403260
.text:00403260
.text:00403260 ; int __cdecl sub_403260(char *, char *)
.text:00403260 sub_403260      proc near               ; DATA XREF: sub_4026E0+46E↑o
.text:00403260                                         ; sub_4026E0+7C7↑o ...
.text:00403260
.text:00403260 Str1            = dword ptr -0Ch
.text:00403260 Str2            = dword ptr -8
.text:00403260 arg_0           = dword ptr  4
.text:00403260 arg_4           = dword ptr  8
.text:00403260
.text:00403260                 sub     esp, 0Ch
.text:00403263                 mov     edx, [esp+0Ch+arg_0]
.text:00403267                 mov     ecx, [esp+0Ch+arg_4]
.text:0040326B                 mov     [esp+0Ch+Str1], edx ; Str1
.text:0040326E                 mov     [esp+0Ch+Str2], ecx ; Str2
.text:00403272                 call    strcmp
.text:00403277                 test    eax, eax
.text:00403279                 setz    dl
.text:0040327C                 add     esp, 0Ch
.text:0040327F                 movzx   eax, dl
.text:00403282                 retn
.text:00403282 sub_403260      endp
.text:00403282
.text:00403282 ; ---------------------------------------------------------------------------
.text:00403283                 align 10h
.text:00403290
.text:00403290 ; =============== S U B R O U T I N E =======================================
.text:00403290
.text:00403290
.text:00403290 ; int __cdecl sub_403290(int, char *)
.text:00403290 sub_403290      proc near               ; CODE XREF: sub_4026E0+272↑p
.text:00403290                                         ; sub_4026E0+4D1↑p
.text:00403290
.text:00403290 Str             = dword ptr -1Ch
.text:00403290 Src             = dword ptr -18h
.text:00403290 Size            = dword ptr -14h
.text:00403290 var_10          = dword ptr -10h
.text:00403290 arg_0           = dword ptr  4
.text:00403290 arg_4           = dword ptr  8
.text:00403290
.text:00403290                 push    edi
.text:00403291                 push    esi
.text:00403292                 push    ebx
.text:00403293                 sub     esp, 10h
.text:00403296                 mov     esi, [esp+1Ch+arg_0]
.text:0040329A                 mov     edi, [esp+1Ch+arg_4]
.text:0040329E                 mov     [esp+1Ch+Str], edi ; Str
.text:004032A1                 call    strlen
.text:004032A6                 mov     [esp+1Ch+var_10], eax
.text:004032AA                 mov     edx, [esi+0Ch]
.text:004032AD                 mov     ebx, eax
.text:004032AF                 lea     eax, [eax+edx]
.text:004032B2                 cmp     eax, [esi+10h]
.text:004032B5                 ja      loc_403342
.text:004032BB
.text:004032BB loc_4032BB:                             ; CODE XREF: sub_403290+C1↓j
.text:004032BB                 mov     [esp+1Ch+Str], edx ; void *
.text:004032BE                 mov     [esp+1Ch+Size], ebx ; Size
.text:004032C2                 mov     [esp+1Ch+Src], edi ; Src
.text:004032C6                 call    memcpy
.text:004032CB                 mov     edx, [esi+0Ch]
.text:004032CE                 add     edx, ebx
.text:004032D0                 mov     [esi+0Ch], edx
.text:004032D3                 inc     edx
.text:004032D4                 cmp     edx, [esi+10h]
.text:004032D7                 ja      short loc_403330
.text:004032D9
.text:004032D9 loc_4032D9:                             ; CODE XREF: sub_403290+B0↓j
.text:004032D9                 mov     edx, [esi+0Ch]
.text:004032DC                 lea     ebx, [esi+2Ch]
.text:004032DF                 mov     byte ptr [edx], 2Fh ; '/'
.text:004032E2                 inc     dword ptr [esi+0Ch]
.text:004032E5                 inc     [esp+1Ch+var_10]
.text:004032E9                 mov     edx, [ebx+0Ch]
.text:004032EC                 lea     ecx, [edx+4]
.text:004032EF                 cmp     ecx, [ebx+10h]
.text:004032F2                 ja      short loc_403317
.text:004032F4
.text:004032F4 loc_4032F4:                             ; CODE XREF: sub_403290+9A↓j
.text:004032F4                 mov     [esp+1Ch+Size], 4 ; Size
.text:004032FC                 lea     esi, [esp+1Ch+var_10]
.text:00403300                 mov     [esp+1Ch+Src], esi ; Src
.text:00403304                 mov     [esp+1Ch+Str], edx ; void *
.text:00403307                 call    memcpy
.text:0040330C                 add     dword ptr [ebx+0Ch], 4
.text:00403310                 add     esp, 10h
.text:00403313                 pop     ebx
.text:00403314                 pop     esi
.text:00403315                 pop     edi
.text:00403316                 retn
.text:00403317 ; ---------------------------------------------------------------------------
.text:00403317
.text:00403317 loc_403317:                             ; CODE XREF: sub_403290+62↑j
.text:00403317                 mov     [esp+1Ch+Src], 4
.text:0040331F                 mov     [esp+1Ch+Str], ebx
.text:00403322                 call    sub_416D60
.text:00403327                 mov     edx, [ebx+0Ch]
.text:0040332A                 jmp     short loc_4032F4
.text:0040332A ; ---------------------------------------------------------------------------
.text:0040332C                 align 10h
.text:00403330
.text:00403330 loc_403330:                             ; CODE XREF: sub_403290+47↑j
.text:00403330                 mov     [esp+1Ch+Src], 1
.text:00403338                 mov     [esp+1Ch+Str], esi
.text:0040333B                 call    sub_416D60
.text:00403340                 jmp     short loc_4032D9
.text:00403342 ; ---------------------------------------------------------------------------
.text:00403342
.text:00403342 loc_403342:                             ; CODE XREF: sub_403290+25↑j
.text:00403342                 mov     [esp+1Ch+Src], ebx
.text:00403346                 mov     [esp+1Ch+Str], esi
.text:00403349                 call    sub_416D60
.text:0040334E                 mov     edx, [esi+0Ch]
.text:00403351                 jmp     loc_4032BB
.text:00403351 sub_403290      endp
.text:00403351
.text:00403351 ; ---------------------------------------------------------------------------
.text:00403356                 align 10h
.text:00403360 aStrlenBuf1NByt db 'strlen (buf) + 1 == n_bytes_needed',0
.text:00403360                                         ; DATA XREF: sub_403390+1A8↓o
.text:00403383                 align 10h
.text:00403390
.text:00403390 ; =============== S U B R O U T I N E =======================================
.text:00403390
.text:00403390
.text:00403390 ; int __cdecl sub_403390(int, char *)
.text:00403390 sub_403390      proc near               ; CODE XREF: sub_402370+E6↑p
.text:00403390                                         ; sub_402370+15A↑p ...
.text:00403390
.text:00403390 Str             = dword ptr -2Ch
.text:00403390 Src             = dword ptr -28h
.text:00403390 Size            = dword ptr -24h
.text:00403390 var_15          = byte ptr -15h
.text:00403390 var_14          = dword ptr -14h
.text:00403390 arg_0           = dword ptr  4
.text:00403390 arg_4           = dword ptr  8
.text:00403390
.text:00403390                 push    ebp
.text:00403391                 push    edi
.text:00403392                 push    esi
.text:00403393                 push    ebx
.text:00403394                 sub     esp, 1Ch
.text:00403397                 mov     edx, [esp+2Ch+arg_0]
.text:0040339B                 mov     esi, [edx+0Ch]
.text:0040339E                 mov     ebp, [edx+8]
.text:004033A1                 mov     edx, [esp+2Ch+arg_4]
.text:004033A5                 sub     esi, ebp
.text:004033A7                 mov     [esp+2Ch+Str], edx ; Str
.text:004033AA                 call    strlen
.text:004033AF                 lea     edi, [eax+esi+1]
.text:004033B3                 mov     ebx, eax
.text:004033B5                 cmp     ds:dword_41B020, edi
.text:004033BB                 jb      loc_403442
.text:004033C1
.text:004033C1 loc_4033C1:                             ; CODE XREF: sub_403390+D3↓j
.text:004033C1                 cmp     ebx, 1
.text:004033C4                 jz      short loc_403417
.text:004033C6
.text:004033C6 loc_4033C6:                             ; CODE XREF: sub_403390+8E↓j
.text:004033C6                                         ; sub_403390+92↓j
.text:004033C6                 mov     [esp+2Ch+Size], esi
.text:004033CA                 mov     edx, ds:Block
.text:004033D0                 lea     esi, [ebx+1]
.text:004033D3                 mov     [esp+2Ch+Src], ebp
.text:004033D7                 mov     [esp+2Ch+Str], edx
.text:004033DA                 call    sub_410930
.text:004033DF                 mov     [esp+2Ch+Str], eax ; void *
.text:004033E2                 mov     ecx, [esp+2Ch+arg_4]
.text:004033E6                 mov     [esp+2Ch+Size], esi ; Size
.text:004033EA                 mov     [esp+2Ch+Src], ecx ; Src
.text:004033EE                 call    memcpy
.text:004033F3                 mov     ebp, ds:Block
.text:004033F9                 mov     [esp+2Ch+Str], ebp ; Str
.text:004033FC                 call    strlen
.text:00403401                 inc     eax
.text:00403402                 cmp     eax, edi
.text:00403404                 jnz     loc_403528
.text:0040340A
.text:0040340A loc_40340A:                             ; CODE XREF: sub_403390+B0↓j
.text:0040340A                 mov     eax, ds:Block
.text:0040340F
.text:0040340F loc_40340F:                             ; CODE XREF: sub_403390+166↓j
.text:0040340F                 add     esp, 1Ch
.text:00403412                 pop     ebx
.text:00403413                 pop     esi
.text:00403414                 pop     edi
.text:00403415                 pop     ebp
.text:00403416                 retn
.text:00403417 ; ---------------------------------------------------------------------------
.text:00403417
.text:00403417 loc_403417:                             ; CODE XREF: sub_403390+34↑j
.text:00403417                 mov     eax, [esp+2Ch+arg_4]
.text:0040341B                 cmp     byte ptr [eax], 2Eh ; '.'
.text:0040341E                 jnz     short loc_4033C6
.text:00403420                 test    esi, esi
.text:00403422                 jz      short loc_4033C6
.text:00403424                 mov     [esp+2Ch+Src], ebp
.text:00403428                 lea     edx, [esi-1]
.text:0040342B                 mov     esi, ds:Block
.text:00403431                 mov     [esp+2Ch+Size], edx
.text:00403435                 mov     [esp+2Ch+Str], esi
.text:00403438                 call    sub_410930
.text:0040343D                 mov     byte ptr [eax], 0
.text:00403440                 jmp     short loc_40340A
.text:00403442 ; ---------------------------------------------------------------------------
.text:00403442
.text:00403442 loc_403442:                             ; CODE XREF: sub_403390+2B↑j
.text:00403442                 mov     [esp+2Ch+Src], edi ; Size
.text:00403446                 mov     ecx, ds:Block
.text:0040344C                 mov     [esp+2Ch+Str], ecx ; Block
.text:0040344F                 call    realloc
.text:00403454                 mov     ds:dword_41B020, edi
.text:0040345A                 test    eax, eax
.text:0040345C                 jz      short loc_403468
.text:0040345E                 mov     ds:Block, eax
.text:00403463                 jmp     loc_4033C1
.text:00403468 ; ---------------------------------------------------------------------------
.text:00403468
.text:00403468 loc_403468:                             ; CODE XREF: sub_403390+CC↑j
.text:00403468                 mov     edi, ds:Block
.text:0040346E                 mov     [esp+2Ch+Str], edi ; Block
.text:00403471                 lea     edi, [ebx+1]
.text:00403474                 call    free
.text:00403479                 cmp     edi, 200h
.text:0040347F                 ja      loc_40350E
.text:00403485                 mov     eax, 200h
.text:0040348A                 mov     edx, [esp+2Ch+arg_4]
.text:0040348E                 sub     eax, edi
.text:00403490                 add     eax, offset dword_41B030
.text:00403495
.text:00403495 loc_403495:                             ; CODE XREF: sub_403390+193↓j
.text:00403495                 mov     [esp+2Ch+Size], edi ; Size
.text:00403499                 mov     [esp+2Ch+Src], edx ; Src
.text:0040349D                 mov     [esp+2Ch+Str], eax ; void *
.text:004034A0                 call    memcpy
.text:004034A5                 mov     [esp+2Ch+var_14], eax
.text:004034A9                 mov     ecx, esi
.text:004034AB                 mov     eax, 200h
.text:004034B0                 sub     eax, edi
.text:004034B2                 cmp     esi, eax
.text:004034B4                 ja      short loc_4034FB
.text:004034B6                 mov     [esp+2Ch+var_15], 0
.text:004034BB                 sub     eax, esi
.text:004034BD                 mov     ebx, ebp
.text:004034BF                 lea     edx, dword_41B030[eax]
.text:004034C5
.text:004034C5 loc_4034C5:                             ; CODE XREF: sub_403390+17C↓j
.text:004034C5                 mov     [esp+2Ch+Size], ecx ; Size
.text:004034C9                 mov     [esp+2Ch+Src], ebx ; Src
.text:004034CD                 mov     [esp+2Ch+Str], edx ; void *
.text:004034D0                 call    memcpy
.text:004034D5                 cmp     [esp+2Ch+var_15], 0
.text:004034DA                 mov     [esp+2Ch+var_14], eax
.text:004034DE                 jz      short loc_4034F2
.text:004034E0                 mov     ds:byte_41B034, 5Dh ; ']'
.text:004034E7                 mov     ebx, 2E2E2E5Bh
.text:004034EC                 mov     ds:dword_41B030, ebx
.text:004034F2
.text:004034F2 loc_4034F2:                             ; CODE XREF: sub_403390+14E↑j
.text:004034F2                 mov     eax, [esp+2Ch+var_14]
.text:004034F6                 jmp     loc_40340F
.text:004034FB ; ---------------------------------------------------------------------------
.text:004034FB
.text:004034FB loc_4034FB:                             ; CODE XREF: sub_403390+124↑j
.text:004034FB                 mov     [esp+2Ch+var_15], 1
.text:00403500                 sub     esi, eax
.text:00403502                 mov     edx, offset dword_41B030
.text:00403507                 lea     ebx, [esi+ebp]
.text:0040350A                 mov     ecx, eax
.text:0040350C                 jmp     short loc_4034C5
.text:0040350E ; ---------------------------------------------------------------------------
.text:0040350E
.text:0040350E loc_40350E:                             ; CODE XREF: sub_403390+EF↑j
.text:0040350E                 mov     ecx, [esp+2Ch+arg_4]
.text:00403512                 mov     eax, offset dword_41B030
.text:00403517                 mov     edi, 200h
.text:0040351C                 lea     edx, [ecx+ebx-1FFh]
.text:00403523                 jmp     loc_403495
.text:00403528 ; ---------------------------------------------------------------------------
.text:00403528
.text:00403528 loc_403528:                             ; CODE XREF: sub_403390+74↑j
.text:00403528                 mov     [esp+2Ch+Size], 151h
.text:00403530                 mov     [esp+2Ch+Src], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00403538                 mov     [esp+2Ch+Str], offset aStrlenBuf1NByt ; "strlen (buf) + 1 == n_bytes_needed"
.text:0040353F                 call    _assert
.text:0040353F sub_403390      endp
.text:0040353F
.text:0040353F ; ---------------------------------------------------------------------------
.text:00403544 ; const CHAR asc_403544[1]
.text:00403544 asc_403544      db '.'                  ; DATA XREF: sub_403580+E5↓o
.text:00403545                 db 2Eh, 0, 63h
.text:00403548 aAnnotChdirFrom db 'annot chdir from %s to ..',0
.text:00403562 aAdStackHeightD db 'AD_stack_height (ds)',0
.text:00403577                 align 10h
.text:00403580
.text:00403580 ; =============== S U B R O U T I N E =======================================
.text:00403580
.text:00403580
.text:00403580 sub_403580      proc near               ; CODE XREF: sub_4026E0+66F↑p
.text:00403580
.text:00403580 var_9C          = dword ptr -9Ch
.text:00403580 Src             = dword ptr -98h
.text:00403580 Size            = dword ptr -94h
.text:00403580 var_90          = byte ptr -90h
.text:00403580 var_8C          = byte ptr -8Ch
.text:00403580 var_84          = dword ptr -84h
.text:00403580 var_80          = dword ptr -80h
.text:00403580 var_7C          = dword ptr -7Ch
.text:00403580 var_78          = dword ptr -78h
.text:00403580 arg_0           = dword ptr  4
.text:00403580 arg_4           = dword ptr  8
.text:00403580 arg_8           = dword ptr  0Ch
.text:00403580
.text:00403580                 push    ebp
.text:00403581                 push    edi
.text:00403582                 push    esi
.text:00403583                 push    ebx
.text:00403584                 sub     esp, 8Ch
.text:0040358A                 mov     esi, [esp+9Ch+arg_0]
.text:00403591                 mov     edx, [esi+34h]
.text:00403594                 mov     ebx, esi
.text:00403596                 mov     eax, [esi+38h]
.text:00403599                 mov     edi, [esi+34h]
.text:0040359C                 mov     ecx, [esi+64h]
.text:0040359F                 sub     eax, edx
.text:004035A1                 shr     eax, 2
.text:004035A4                 mov     esi, [edi+eax*4-4]
.text:004035A8                 sub     ecx, 18h
.text:004035AB                 mov     edi, [ebx+0Ch]
.text:004035AE                 mov     ebp, [ecx+4]
.text:004035B1                 mov     [esp+9Ch+var_9C], esi ; size_t
.text:004035B4                 sub     edi, esi
.text:004035B6                 call    sub_407140
.text:004035BB                 mov     [esp+9Ch+var_9C], eax ; void *
.text:004035BE                 mov     ebx, eax
.text:004035C0                 lea     ecx, [esi-1]
.text:004035C3                 mov     [esp+9Ch+Size], ecx ; Size
.text:004035C7                 mov     [esp+9Ch+Src], edi ; Src
.text:004035CB                 call    memcpy
.text:004035D0                 mov     byte ptr [esi+ebx-1], 0
.text:004035D5                 mov     edx, [esp+9Ch+arg_4]
.text:004035DC                 mov     eax, [esp+9Ch+arg_0]
.text:004035E3                 mov     [edx], ebx
.text:004035E5                 mov     ecx, [eax+64h]
.text:004035E8                 mov     eax, [ecx-18h]
.text:004035EB                 test    eax, eax
.text:004035ED                 jnz     loc_403830
.text:004035F3
.text:004035F3 loc_4035F3:                             ; CODE XREF: sub_403580+2B8↓j
.text:004035F3                 mov     ebx, [esp+9Ch+arg_0]
.text:004035FA                 add     ebx, 58h ; 'X'
.text:004035FD                 mov     edi, [ebx+10h]
.text:00403600                 mov     edx, [ebx+0Ch]
.text:00403603                 sub     edi, edx
.text:00403605                 cmp     edi, 0FFFFFFE8h
.text:00403608                 jl      loc_403818
.text:0040360E
.text:0040360E loc_40360E:                             ; CODE XREF: sub_403580+2AB↓j
.text:0040360E                 mov     eax, [esp+9Ch+arg_0]
.text:00403615                 lea     ecx, [edx-18h]
.text:00403618                 mov     [ebx+0Ch], ecx
.text:0040361B                 mov     [esp+9Ch+var_9C], eax
.text:0040361E                 call    sub_4043B0
.text:00403623                 mov     esi, [esp+9Ch+arg_0]
.text:0040362A                 mov     edi, [esi+64h]
.text:0040362D                 sub     edi, 18h
.text:00403630                 cmp     ebp, 4
.text:00403633                 jz      loc_403810
.text:00403639                 cmp     ebp, 3
.text:0040363C                 jz      loc_4037F7
.text:00403642
.text:00403642 loc_403642:                             ; CODE XREF: sub_403580+27B↓j
.text:00403642                                         ; sub_403580+293↓j
.text:00403642                 mov     edx, [ebx+8]
.text:00403645                 mov     eax, 0AAAAAAABh
.text:0040364A                 mov     ebp, [ebx+0Ch]
.text:0040364D                 sub     ebp, edx
.text:0040364F                 mul     ebp
.text:00403651                 mov     eax, edx
.text:00403653                 shr     eax, 4
.text:00403656                 jz      loc_40383D
.text:0040365C                 cmp     eax, 1
.text:0040365F                 jbe     loc_4037C8
.text:00403665                 mov     [esp+9Ch+var_9C], offset asc_403544 ; "."
.text:0040366C                 call    sub_4108E0
.text:00403671                 test    eax, eax
.text:00403673                 jnz     loc_403774
.text:00403679
.text:00403679 loc_403679:                             ; CODE XREF: sub_403580+243↓j
.text:00403679                 mov     [esp+9Ch+var_9C], offset byte_402597
.text:00403680                 lea     ecx, [esp+9Ch+var_8C]
.text:00403684                 mov     [esp+9Ch+Src], ecx
.text:00403688                 call    sub_4047E0
.text:0040368D                 test    eax, eax
.text:0040368F                 jnz     loc_403720
.text:00403695
.text:00403695 loc_403695:                             ; CODE XREF: sub_403580+1EF↓j
.text:00403695                 mov     edx, [esp+9Ch+var_80]
.text:00403699                 mov     esi, [esp+9Ch+var_84]
.text:0040369D                 mov     ebp, [edi+8]
.text:004036A0                 mov     ecx, [edi+0Ch]
.text:004036A3                 mov     eax, edx
.text:004036A5                 xor     ebp, esi
.text:004036A7                 xor     eax, ecx
.text:004036A9                 or      eax, ebp
.text:004036AB                 jnz     short loc_4036C5
.text:004036AD                 mov     ecx, [esp+9Ch+var_78]
.text:004036B1                 mov     ebp, [edi+10h]
.text:004036B4                 mov     esi, [edi+14h]
.text:004036B7                 mov     eax, [esp+9Ch+var_7C]
.text:004036BB                 mov     edi, ecx
.text:004036BD                 xor     edi, esi
.text:004036BF                 xor     ebp, eax
.text:004036C1                 or      edi, ebp
.text:004036C3                 jz      short loc_403710
.text:004036C5
.text:004036C5 loc_4036C5:                             ; CODE XREF: sub_403580+12B↑j
.text:004036C5                 mov     [esp+9Ch+Src], offset byte_402597 ; char *
.text:004036CD                 mov     ebx, [esp+9Ch+arg_0]
.text:004036D4                 mov     [esp+9Ch+var_9C], ebx ; int
.text:004036D7                 call    sub_403390
.text:004036DC                 mov     [esp+9Ch+var_9C], eax ; char *
.text:004036DF                 call    sub_405870
.text:004036E4                 mov     [esp+9Ch+var_9C], offset aSChangedDevIno ; "%s changed dev/ino"
.text:004036EB                 mov     ebp, eax
.text:004036ED                 call    ds:libintl_gettext
.text:004036F3                 mov     dword ptr [esp+9Ch+var_90], ebp ; char
.text:004036F7                 mov     [esp+9Ch+Src], 0 ; ErrorMessage
.text:004036FF                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:00403706                 mov     [esp+9Ch+Size], eax ; char *
.text:0040370A                 call    sub_40FF30
.text:0040370F                 nop
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_403580+143↑j
.text:00403710                                         ; sub_403580+25C↓j ...
.text:00403710                 add     esp, 8Ch
.text:00403716                 pop     ebx
.text:00403717                 pop     esi
.text:00403718                 pop     edi
.text:00403719                 pop     ebp
.text:0040371A                 retn
.text:0040371A ; ---------------------------------------------------------------------------
.text:0040371B                 align 10h
.text:00403720
.text:00403720 loc_403720:                             ; CODE XREF: sub_403580+10F↑j
.text:00403720                 mov     [esp+9Ch+Src], offset byte_402597 ; char *
.text:00403728                 mov     eax, [esp+9Ch+arg_0]
.text:0040372F                 mov     [esp+9Ch+var_9C], eax ; int
.text:00403732                 call    sub_403390
.text:00403737                 mov     [esp+9Ch+var_9C], eax ; char *
.text:0040373A                 call    sub_405870
.text:0040373F                 mov     [esp+9Ch+var_9C], offset aCannotLstatInS ; "cannot lstat `.' in %s"
.text:00403746                 mov     ebx, eax
.text:00403748                 call    ds:libintl_gettext
.text:0040374E                 mov     ebp, eax
.text:00403750                 call    _errno
.text:00403755                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:00403759                 mov     [esp+9Ch+Size], ebp ; char *
.text:0040375D                 mov     edx, [eax]
.text:0040375F                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:00403766                 mov     [esp+9Ch+Src], edx ; ErrorMessage
.text:0040376A                 call    sub_40FF30
.text:0040376F                 jmp     loc_403695
.text:00403774 ; ---------------------------------------------------------------------------
.text:00403774
.text:00403774 loc_403774:                             ; CODE XREF: sub_403580+F3↑j
.text:00403774                 mov     [esp+9Ch+Src], offset byte_402597 ; char *
.text:0040377C                 mov     esi, [esp+9Ch+arg_0]
.text:00403783                 mov     [esp+9Ch+var_9C], esi ; int
.text:00403786                 call    sub_403390
.text:0040378B                 mov     [esp+9Ch+var_9C], eax ; char *
.text:0040378E                 call    sub_405870
.text:00403793                 mov     [esp+9Ch+var_9C], 403547h
.text:0040379A                 mov     ebx, eax
.text:0040379C                 call    ds:libintl_gettext
.text:004037A2                 mov     ebp, eax
.text:004037A4                 call    _errno
.text:004037A9                 mov     dword ptr [esp+9Ch+var_90], ebx ; char
.text:004037AD                 mov     [esp+9Ch+Size], ebp ; char *
.text:004037B1                 mov     ebx, [eax]
.text:004037B3                 mov     [esp+9Ch+var_9C], 1 ; Code
.text:004037BA                 mov     [esp+9Ch+Src], ebx ; ErrorMessage
.text:004037BE                 call    sub_40FF30
.text:004037C3                 jmp     loc_403679
.text:004037C8 ; ---------------------------------------------------------------------------
.text:004037C8
.text:004037C8 loc_4037C8:                             ; CODE XREF: sub_403580+DF↑j
.text:004037C8                 mov     edx, [esp+9Ch+arg_8]
.text:004037CF                 add     edx, 4
.text:004037D2                 mov     [esp+9Ch+var_9C], edx
.text:004037D5                 call    sub_4060E0
.text:004037DA                 test    eax, eax
.text:004037DC                 jz      loc_403710
.text:004037E2                 call    _errno
.text:004037E7                 mov     esi, [eax]
.text:004037E9                 mov     edi, [esp+9Ch+arg_8]
.text:004037F0                 mov     [edi], esi
.text:004037F2                 jmp     loc_403710
.text:004037F7 ; ---------------------------------------------------------------------------
.text:004037F7
.text:004037F7 loc_4037F7:                             ; CODE XREF: sub_403580+BC↑j
.text:004037F7                 cmp     dword ptr [edi+4], 2
.text:004037FB                 jnz     loc_403642
.text:00403801                 jmp     short loc_403810
.text:00403801 ; ---------------------------------------------------------------------------
.text:00403803                 align 10h
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403580+B3↑j
.text:00403810                                         ; sub_403580+281↑j
.text:00403810                 mov     [edi+4], ebp
.text:00403813                 jmp     loc_403642
.text:00403818 ; ---------------------------------------------------------------------------
.text:00403818
.text:00403818 loc_403818:                             ; CODE XREF: sub_403580+88↑j
.text:00403818                 mov     [esp+9Ch+Src], 0FFFFFFE8h
.text:00403820                 mov     [esp+9Ch+var_9C], ebx
.text:00403823                 call    sub_416D60
.text:00403828                 mov     edx, [ebx+0Ch]
.text:0040382B                 jmp     loc_40360E
.text:00403830 ; ---------------------------------------------------------------------------
.text:00403830
.text:00403830 loc_403830:                             ; CODE XREF: sub_403580+6D↑j
.text:00403830                 mov     [esp+9Ch+var_9C], eax ; void *
.text:00403833                 call    sub_406530
.text:00403838                 jmp     loc_4035F3
.text:0040383D ; ---------------------------------------------------------------------------
.text:0040383D
.text:0040383D loc_40383D:                             ; CODE XREF: sub_403580+D6↑j
.text:0040383D                 mov     [esp+9Ch+Size], 189h
.text:00403845                 mov     [esp+9Ch+Src], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:0040384D                 mov     [esp+9Ch+var_9C], 403562h
.text:00403854                 call    _assert
.text:00403854 sub_403580      endp
.text:00403854
.text:00403854 ; ---------------------------------------------------------------------------
.text:00403859                 align 10h
.text:00403860
.text:00403860 ; =============== S U B R O U T I N E =======================================
.text:00403860
.text:00403860
.text:00403860 sub_403860      proc near               ; DATA XREF: sub_403900+ED↓o
.text:00403860                 and     eax, 72203A73h
.text:00403865                 db      65h
.text:00403865                 insd
.text:00403867                 outsd
.text:00403868                 jbe     short near ptr loc_4038CB+4
.text:0040386A                 and     [edi+72h], dh
.text:0040386D                 imul    esi, [ebp+2Dh], 746F7270h
.text:00403875                 arpl    gs:[ebp+64h], si
.text:0040387A                 and     ds:73252073h, ah
.text:00403880                 aas
.text:00403881                 and     [eax], al
.text:00403883
.text:00403883 loc_403883:                             ; DATA XREF: sub_403900:loc_403A45↓o
.text:00403883                 and     eax, 72203A73h
.text:00403888                 db      65h
.text:00403888                 insd
.text:0040388A                 outsd
.text:0040388B                 jbe     short near ptr loc_4038F0+2
.text:0040388D                 and     ds:73252073h, ah
.text:00403893                 aas
.text:00403894                 and     [eax], al
.text:00403896                 lea     esi, [esi+0]
.text:00403899                 lea     edi, [edi+0]
.text:004038A0
.text:004038A0 loc_4038A0:                             ; DATA XREF: sub_403900+1DC↓o
.text:004038A0                 and     eax, 64203A73h
.text:004038A5                 db      65h
.text:004038A5                 jnb     short near ptr loc_403906+5
.text:004038A8                 outs    dx, byte ptr gs:[esi]
.text:004038AA                 and     fs:[ecx+6Eh], ch
.text:004038AE                 jz      short loc_40391F
.text:004038B0                 and     [edi+72h], dh
.text:004038B3                 imul    esi, [ebp+2Dh], 746F7270h
.text:004038BB                 arpl    gs:[ebp+64h], si
.text:004038C0                 and     [ecx+ebp*2+72h], ah
.text:004038C4                 arpl    gs:[edi+ebp*2+72h], si
.text:004038C9                 jns     short near ptr loc_4038EA+1
.text:004038CB
.text:004038CB loc_4038CB:                             ; CODE XREF: sub_403860+8↑j
.text:004038CB                 and     eax, 203F73h
.text:004038D0                 nop
.text:004038D1                 nop
.text:004038D2                 nop
.text:004038D3                 nop
.text:004038D4                 nop
.text:004038D5                 nop
.text:004038D6                 nop
.text:004038D7                 nop
.text:004038D8                 nop
.text:004038D9                 nop
.text:004038DA                 nop
.text:004038DB                 nop
.text:004038DC                 nop
.text:004038DD                 nop
.text:004038DE                 nop
.text:004038DF                 nop
.text:004038DF sub_403860      endp
.text:004038DF
.text:004038E0
.text:004038E0 ; =============== S U B R O U T I N E =======================================
.text:004038E0
.text:004038E0
.text:004038E0 sub_4038E0      proc near               ; DATA XREF: sub_403900:loc_403B17↓o
.text:004038E0                 and     eax, 64203A73h
.text:004038E5                 db      65h
.text:004038E5                 jnb     short near ptr loc_403949+2
.text:004038E8                 outs    dx, byte ptr gs:[esi]
.text:004038EA
.text:004038EA loc_4038EA:                             ; CODE XREF: sub_403860+69↑j
.text:004038EA                 and     fs:[ecx+6Eh], ch
.text:004038EE                 jz      short near ptr loc_40395C+3
.text:004038F0
.text:004038F0 loc_4038F0:                             ; CODE XREF: sub_403860+2B↑j
.text:004038F0                 and     [ecx+ebp*2+72h], ah
.text:004038F4                 arpl    gs:[edi+ebp*2+72h], si
.text:004038F9                 jns     short near ptr loc_403918+3
.text:004038FB                 and     eax, 203F73h
.text:004038FB sub_4038E0      endp
.text:004038FB
.text:00403900
.text:00403900 ; =============== S U B R O U T I N E =======================================
.text:00403900
.text:00403900
.text:00403900 ; int __cdecl sub_403900(int, LPCSTR, int, int, int, int)
.text:00403900 sub_403900      proc near               ; CODE XREF: sub_402370+46↑p
.text:00403900                                         ; sub_4026E0+6E5↑p
.text:00403900
.text:00403900 Stream          = dword ptr -0BCh
.text:00403900 Format          = dword ptr -0B8h
.text:00403900 var_B4          = dword ptr -0B4h
.text:00403900 var_B0          = byte ptr -0B0h
.text:00403900 var_AC          = dword ptr -0ACh
.text:00403900 var_94          = dword ptr -94h
.text:00403900 var_8E          = byte ptr -8Eh
.text:00403900 var_8D          = byte ptr -8Dh
.text:00403900 var_8C          = dword ptr -8Ch
.text:00403900 arg_0           = dword ptr  4
.text:00403900 arg_4           = dword ptr  8
.text:00403900 arg_8           = dword ptr  0Ch
.text:00403900 arg_C           = dword ptr  10h
.text:00403900 arg_10          = dword ptr  14h
.text:00403900 arg_14          = dword ptr  18h
.text:00403900
.text:00403900                 push    ebp
.text:00403901                 push    edi
.text:00403902                 push    esi
.text:00403903                 xor     esi, esi
.text:00403905                 push    ebx
.text:00403906
.text:00403906 loc_403906:                             ; CODE XREF: sub_403860+45↑j
.text:00403906                 sub     esp, 0ACh
.text:0040390C                 mov     ebx, [esp+0BCh+arg_8]
.text:00403913                 mov     [esp+0BCh+var_8D], 0
.text:00403918
.text:00403918 loc_403918:                             ; CODE XREF: sub_4038E0+19↑j
.text:00403918                 mov     edx, [esp+0BCh+arg_14]
.text:0040391F
.text:0040391F loc_40391F:                             ; CODE XREF: sub_403860+4E↑j
.text:0040391F                 mov     eax, [esp+0BCh+arg_10]
.text:00403926                 mov     ebp, [esp+0BCh+arg_4]
.text:0040392D                 mov     dword ptr [edx], 2
.text:00403933                 mov     dword ptr [eax], 2
.text:00403939                 xor     eax, eax
.text:0040393B                 cmp     byte ptr [ebx], 0
.text:0040393E                 setz    al
.text:00403941                 xor     edx, edx
.text:00403943                 cmp     byte ptr [ebx+8], 0
.text:00403947                 jnz     short loc_40394F
.text:00403949
.text:00403949 loc_403949:                             ; CODE XREF: sub_4038E0+5↑j
.text:00403949                 cmp     byte ptr [ebx+1], 0
.text:0040394D                 jz      short loc_403954
.text:0040394F
.text:0040394F loc_40394F:                             ; CODE XREF: sub_403900+47↑j
.text:0040394F                 mov     edx, 1
.text:00403954
.text:00403954 loc_403954:                             ; CODE XREF: sub_403900+4D↑j
.text:00403954                 test    edx, eax
.text:00403956                 jnz     loc_403C00
.text:0040395C
.text:0040395C loc_40395C:                             ; CODE XREF: sub_403900+35C↓j
.text:0040395C                                         ; sub_4038E0+E↑j
.text:0040395C                 cmp     byte ptr [ebx+1], 0
.text:00403960                 jz      loc_403A33
.text:00403966
.text:00403966 loc_403966:                             ; CODE XREF: sub_403900+356↓j
.text:00403966                 test    esi, esi
.text:00403968                 jz      loc_403BA0
.text:0040396E
.text:0040396E loc_40396E:                             ; CODE XREF: sub_403900+2B2↓j
.text:0040396E                 mov     edx, [esi]
.text:00403970                 mov     ecx, edx
.text:00403972                 and     ecx, 0F000h
.text:00403978                 cmp     ecx, 4000h
.text:0040397E                 jz      loc_403B44
.text:00403984
.text:00403984 loc_403984:                             ; CODE XREF: sub_403900+248↓j
.text:00403984                 and     edx, 0F000h
.text:0040398A                 cmp     edx, 0A000h
.text:00403990                 jz      loc_403B30
.text:00403996
.text:00403996 loc_403996:                             ; CODE XREF: sub_403900+23F↓j
.text:00403996                 mov     [esp+0BCh+Format], ebp ; char *
.text:0040399A                 mov     eax, [esp+0BCh+arg_0]
.text:004039A1                 mov     [esp+0BCh+Stream], eax ; int
.text:004039A4                 call    sub_403390
.text:004039A9                 mov     [esp+0BCh+Stream], eax ; char *
.text:004039AC                 call    sub_405870
.text:004039B1                 mov     [esp+0BCh+var_94], eax
.text:004039B5                 mov     edi, [esi]
.text:004039B7                 xor     ecx, ecx
.text:004039B9                 mov     edx, [esp+0BCh+arg_10]
.text:004039C0                 and     edi, 0F000h
.text:004039C6                 cmp     edi, 4000h
.text:004039CC                 setz    cl
.text:004039CF                 add     ecx, 3
.text:004039D2                 cmp     edi, 4000h
.text:004039D8                 mov     [edx], ecx
.text:004039DA                 jz      short loc_403A50
.text:004039DC
.text:004039DC loc_4039DC:                             ; CODE XREF: sub_403900+154↓j
.text:004039DC                                         ; sub_403900+15E↓j ...
.text:004039DC                 mov     [esp+0BCh+Stream], esi
.text:004039DF                 call    sub_4046A0
.text:004039E4                 cmp     [esp+0BCh+var_8D], 0
.text:004039E9                 mov     ebx, eax
.text:004039EB                 jz      short loc_403A45
.text:004039ED                 mov     [esp+0BCh+Stream], offset sub_403860
.text:004039F4
.text:004039F4 loc_4039F4:                             ; CODE XREF: sub_403900+14C↓j
.text:004039F4                 call    ds:libintl_gettext
.text:004039FA                 mov     dword ptr [esp+0BCh+var_B0], ebx
.text:004039FE                 mov     ecx, ds:_iob
.text:00403A04                 mov     esi, [esp+0BCh+var_94]
.text:00403A08                 mov     ebx, ds:dword_41B8A0
.text:00403A0E                 add     ecx, 40h ; '@'
.text:00403A11                 mov     [esp+0BCh+var_AC], esi
.text:00403A15                 mov     [esp+0BCh+var_B4], ebx
.text:00403A19                 mov     [esp+0BCh+Format], eax ; Format
.text:00403A1D                 mov     [esp+0BCh+Stream], ecx ; Stream
.text:00403A20                 call    fprintf
.text:00403A25
.text:00403A25 loc_403A25:                             ; CODE XREF: sub_403900+212↓j
.text:00403A25                 call    sub_406150
.text:00403A2A                 test    al, al
.text:00403A2C                 mov     edx, 3
.text:00403A31                 jz      short loc_403A38
.text:00403A33
.text:00403A33 loc_403A33:                             ; CODE XREF: sub_403900+60↑j
.text:00403A33                                         ; sub_403900+234↓j
.text:00403A33                 mov     edx, 2
.text:00403A38
.text:00403A38 loc_403A38:                             ; CODE XREF: sub_403900+131↑j
.text:00403A38                                         ; sub_403900+299↓j
.text:00403A38                 add     esp, 0ACh
.text:00403A3E                 mov     eax, edx
.text:00403A40                 pop     ebx
.text:00403A41                 pop     esi
.text:00403A42                 pop     edi
.text:00403A43                 pop     ebp
.text:00403A44                 retn
.text:00403A45 ; ---------------------------------------------------------------------------
.text:00403A45
.text:00403A45 loc_403A45:                             ; CODE XREF: sub_403900+EB↑j
.text:00403A45                 mov     [esp+0BCh+Stream], offset loc_403883
.text:00403A4C                 jmp     short loc_4039F4
.text:00403A4C ; ---------------------------------------------------------------------------
.text:00403A4E                 align 10h
.text:00403A50
.text:00403A50 loc_403A50:                             ; CODE XREF: sub_403900+DA↑j
.text:00403A50                 cmp     byte ptr [ebx+2], 0
.text:00403A54                 jz      short loc_4039DC
.text:00403A56                 cmp     [esp+0BCh+arg_C], 2
.text:00403A5E                 jnz     loc_4039DC
.text:00403A64                 mov     [esp+0BCh+Stream], ebp ; LPCSTR
.text:00403A67                 call    sub_410780
.text:00403A6C                 test    eax, eax
.text:00403A6E                 mov     edi, eax
.text:00403A70                 jz      short loc_403ABE
.text:00403A72                 call    _errno
.text:00403A77                 mov     dword ptr [eax], 0
.text:00403A7D                 lea     esi, [esi+0]
.text:00403A80
.text:00403A80 loc_403A80:                             ; CODE XREF: sub_403900+198↓j
.text:00403A80                                         ; sub_403900+1A9↓j
.text:00403A80                 mov     [esp+0BCh+Stream], edi
.text:00403A83                 call    sub_410370
.text:00403A88                 test    eax, eax
.text:00403A8A                 mov     ebx, eax
.text:00403A8C                 jz      short loc_403AAB
.text:00403A8E                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:00403A92                 jnz     short loc_403AAB
.text:00403A94                 cmp     byte ptr [eax+0Dh], 0
.text:00403A98                 jz      short loc_403A80
.text:00403A9A                 mov     ebp, [eax+0Ch]
.text:00403A9D                 and     ebp, 0FFFF00h
.text:00403AA3                 cmp     ebp, 2E00h
.text:00403AA9                 jz      short loc_403A80
.text:00403AAB
.text:00403AAB loc_403AAB:                             ; CODE XREF: sub_403900+18C↑j
.text:00403AAB                                         ; sub_403900+192↑j
.text:00403AAB                 call    _errno
.text:00403AB0                 mov     ebp, [eax]
.text:00403AB2                 mov     [esp+0BCh+Stream], edi ; void *
.text:00403AB5                 call    sub_410710
.text:00403ABA                 test    ebx, ebx
.text:00403ABC                 jz      short loc_403B20
.text:00403ABE
.text:00403ABE loc_403ABE:                             ; CODE XREF: sub_403900+170↑j
.text:00403ABE                                         ; sub_403900+229↓j
.text:00403ABE                 mov     eax, 3
.text:00403AC3
.text:00403AC3 loc_403AC3:                             ; CODE XREF: sub_403900+227↓j
.text:00403AC3                 mov     ebx, [esp+0BCh+arg_14]
.text:00403ACA                 cmp     eax, 3
.text:00403ACD                 mov     [ebx], eax
.text:00403ACF                 jnz     loc_4039DC
.text:00403AD5                 cmp     [esp+0BCh+var_8D], 0
.text:00403ADA                 jz      short loc_403B17
.text:00403ADC                 mov     [esp+0BCh+Stream], offset loc_4038A0
.text:00403AE3
.text:00403AE3 loc_403AE3:                             ; CODE XREF: sub_403900+21E↓j
.text:00403AE3                 call    ds:libintl_gettext
.text:00403AE9                 mov     esi, ds:_iob
.text:00403AEF                 mov     edx, ds:dword_41B8A0
.text:00403AF5                 mov     edi, eax
.text:00403AF7                 mov     [esp+0BCh+var_B4], edx
.text:00403AFB                 mov     eax, [esp+0BCh+var_94]
.text:00403AFF                 add     esi, 40h ; '@'
.text:00403B02                 mov     [esp+0BCh+Format], edi ; Format
.text:00403B06                 mov     [esp+0BCh+Stream], esi ; Stream
.text:00403B09                 mov     dword ptr [esp+0BCh+var_B0], eax
.text:00403B0D                 call    fprintf
.text:00403B12                 jmp     loc_403A25
.text:00403B17 ; ---------------------------------------------------------------------------
.text:00403B17
.text:00403B17 loc_403B17:                             ; CODE XREF: sub_403900+1DA↑j
.text:00403B17                 mov     [esp+0BCh+Stream], offset sub_4038E0
.text:00403B1E                 jmp     short loc_403AE3
.text:00403B20 ; ---------------------------------------------------------------------------
.text:00403B20
.text:00403B20 loc_403B20:                             ; CODE XREF: sub_403900+1BC↑j
.text:00403B20                 test    ebp, ebp
.text:00403B22                 mov     eax, 4
.text:00403B27                 jz      short loc_403AC3
.text:00403B29                 jmp     short loc_403ABE
.text:00403B29 ; ---------------------------------------------------------------------------
.text:00403B2B                 align 10h
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_403900+90↑j
.text:00403B30                 cmp     byte ptr [ebx+1], 0
.text:00403B34                 jz      loc_403A33
.text:00403B3A                 mov     [esp+0BCh+var_8D], 0
.text:00403B3F                 jmp     loc_403996
.text:00403B44 ; ---------------------------------------------------------------------------
.text:00403B44
.text:00403B44 loc_403B44:                             ; CODE XREF: sub_403900+7E↑j
.text:00403B44                 cmp     byte ptr [ebx+2], 0
.text:00403B48                 jnz     loc_403984
.text:00403B4E                 mov     [esp+0BCh+Format], ebp ; char *
.text:00403B52                 mov     edx, [esp+0BCh+arg_0]
.text:00403B59                 mov     [esp+0BCh+Stream], edx ; int
.text:00403B5C                 call    sub_403390
.text:00403B61                 mov     [esp+0BCh+Stream], eax ; char *
.text:00403B64                 call    sub_405870
.text:00403B69                 mov     [esp+0BCh+Stream], offset aCannotRemoveDi ; "cannot remove directory %s"
.text:00403B70                 mov     esi, eax
.text:00403B72                 call    ds:libintl_gettext
.text:00403B78                 mov     dword ptr [esp+0BCh+var_B0], esi ; char
.text:00403B7C                 mov     [esp+0BCh+Format], 15h ; ErrorMessage
.text:00403B84                 mov     [esp+0BCh+var_B4], eax ; char *
.text:00403B88
.text:00403B88 loc_403B88:                             ; CODE XREF: sub_403900+2F7↓j
.text:00403B88                 mov     [esp+0BCh+Stream], 0 ; Code
.text:00403B8F                 call    sub_40FF30
.text:00403B94                 mov     edx, 4
.text:00403B99                 jmp     loc_403A38
.text:00403B99 ; ---------------------------------------------------------------------------
.text:00403B9E                 align 10h
.text:00403BA0
.text:00403BA0 loc_403BA0:                             ; CODE XREF: sub_403900+68↑j
.text:00403BA0                 mov     [esp+0BCh+Stream], ebp
.text:00403BA3                 lea     esi, [esp+0BCh+var_8C]
.text:00403BA7                 mov     [esp+0BCh+Format], esi
.text:00403BAB                 call    sub_4047E0
.text:00403BB0                 test    eax, eax
.text:00403BB2                 jz      loc_40396E
.text:00403BB8                 mov     [esp+0BCh+Format], ebp ; char *
.text:00403BBC                 mov     eax, [esp+0BCh+arg_0]
.text:00403BC3                 mov     [esp+0BCh+Stream], eax ; int
.text:00403BC6                 call    sub_403390
.text:00403BCB                 mov     [esp+0BCh+Stream], eax ; char *
.text:00403BCE                 call    sub_405870
.text:00403BD3                 mov     [esp+0BCh+Stream], offset aCannotLstatS ; "cannot lstat %s"
.text:00403BDA                 mov     ebp, eax
.text:00403BDC                 call    ds:libintl_gettext
.text:00403BE2                 mov     edi, eax
.text:00403BE4                 call    _errno
.text:00403BE9                 mov     dword ptr [esp+0BCh+var_B0], ebp
.text:00403BED                 mov     [esp+0BCh+var_B4], edi
.text:00403BF1                 mov     ebx, [eax]
.text:00403BF3                 mov     [esp+0BCh+Format], ebx
.text:00403BF7                 jmp     short loc_403B88
.text:00403BF7 ; ---------------------------------------------------------------------------
.text:00403BF9                 align 10h
.text:00403C00
.text:00403C00 loc_403C00:                             ; CODE XREF: sub_403900+56↑j
.text:00403C00                 mov     [esp+0BCh+Stream], ebp
.text:00403C03                 lea     edi, [esp+0BCh+var_8C]
.text:00403C07                 mov     [esp+0BCh+Format], edi
.text:00403C0B                 call    sub_4047E0
.text:00403C10                 xor     edx, edx
.text:00403C12                 test    eax, eax
.text:00403C14                 jnz     short loc_403C50
.text:00403C16                 mov     ecx, [esp+0BCh+var_8C]
.text:00403C1A                 mov     esi, edi
.text:00403C1C                 and     ecx, 0F000h
.text:00403C22                 cmp     ecx, 0A000h
.text:00403C28                 jz      short loc_403C50
.text:00403C2A                 mov     [esp+0BCh+var_8E], 0
.text:00403C2F                 mov     [esp+0BCh+Format], 2 ; int
.text:00403C37                 mov     [esp+0BCh+Stream], ebp ; LPCSTR
.text:00403C3A                 call    sub_4101D0
.text:00403C3F                 inc     eax
.text:00403C40                 jz      short loc_403C61
.text:00403C42
.text:00403C42 loc_403C42:                             ; CODE XREF: sub_403900+369↓j
.text:00403C42                                         ; sub_403900+370↓j
.text:00403C42                 movzx   edx, [esp+0BCh+var_8E]
.text:00403C47                 mov     esi, esi
.text:00403C49                 lea     edi, [edi+0]
.text:00403C50
.text:00403C50 loc_403C50:                             ; CODE XREF: sub_403900+314↑j
.text:00403C50                                         ; sub_403900+328↑j
.text:00403C50                 mov     [esp+0BCh+var_8D], dl
.text:00403C54                 test    dl, dl
.text:00403C56                 jnz     loc_403966
.text:00403C5C                 jmp     loc_40395C
.text:00403C61 ; ---------------------------------------------------------------------------
.text:00403C61
.text:00403C61 loc_403C61:                             ; CODE XREF: sub_403900+340↑j
.text:00403C61                 call    _errno
.text:00403C66                 cmp     dword ptr [eax], 0Dh
.text:00403C69                 jnz     short loc_403C42
.text:00403C6B                 mov     [esp+0BCh+var_8E], 1
.text:00403C70                 jmp     short loc_403C42
.text:00403C70 sub_403900      endp
.text:00403C70
.text:00403C70 ; ---------------------------------------------------------------------------
.text:00403C72 aReadingDirecto db 'reading directory %s',0
.text:00403C72                                         ; DATA XREF: sub_403D80+12B↓o
.text:00403C87 aCannotOpenDire db 'cannot open directory %s',0
.text:00403C87                                         ; DATA XREF: sub_403D80+4CD↓o
.text:00403CA0 aValidStatusSta_0 db 'VALID_STATUS (status)',0
.text:00403CA0                                         ; DATA XREF: sub_403D80+517↓o
.text:00403CB6                 align 10h
.text:00403CC0 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.text:00403CC0                                         ; DATA XREF: sub_403D80+544↓o
.text:00403CC0                 db 'This almost certainly means that you have a corrupted file system'
.text:00403CC0                 db '.',0Ah
.text:00403CC0                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.text:00403CC0                 db 'The following directory is part of the cycle:',0Ah
.text:00403CC0                 db '  %s',0Ah,0
.text:00403D7A                 align 10h
.text:00403D80
.text:00403D80 ; =============== S U B R O U T I N E =======================================
.text:00403D80
.text:00403D80
.text:00403D80 sub_403D80      proc near               ; CODE XREF: sub_4026E0+3D0↑p
.text:00403D80
.text:00403D80 Buf             = dword ptr -3Ch
.text:00403D80 Value           = dword ptr -38h
.text:00403D80 var_34          = dword ptr -34h
.text:00403D80 var_30          = byte ptr -30h
.text:00403D80 var_2C          = dword ptr -2Ch
.text:00403D80 ErrorMessage    = dword ptr -28h
.text:00403D80 var_24          = dword ptr -24h
.text:00403D80 var_20          = dword ptr -20h
.text:00403D80 var_19          = byte ptr -19h
.text:00403D80 var_18          = dword ptr -18h
.text:00403D80 var_14          = dword ptr -14h
.text:00403D80 arg_0           = dword ptr  4
.text:00403D80 arg_4           = dword ptr  8
.text:00403D80 arg_8           = dword ptr  0Ch
.text:00403D80 arg_C           = dword ptr  10h
.text:00403D80
.text:00403D80                 push    ebp
.text:00403D81                 push    edi
.text:00403D82                 push    esi
.text:00403D83                 push    ebx
.text:00403D84                 sub     esp, 2Ch
.text:00403D87                 mov     [esp+3Ch+Buf], offset byte_402597 ; LPCSTR
.text:00403D8E                 call    sub_410780
.text:00403D93                 mov     edx, [esp+3Ch+arg_0]
.text:00403D97                 mov     ebp, eax
.text:00403D99                 mov     ecx, [edx+64h]
.text:00403D9C                 sub     ecx, 18h
.text:00403D9F                 mov     edi, [ecx+4]
.text:00403DA2                 mov     [esp+3Ch+var_14], ecx
.text:00403DA6                 lea     edx, [edi-2]
.text:00403DA9                 cmp     edx, 2
.text:00403DAC                 ja      loc_404287
.text:00403DB2                 mov     ebx, [esp+3Ch+arg_4]
.text:00403DB6                 test    eax, eax
.text:00403DB8                 mov     dword ptr [ebx], 0
.text:00403DBE                 jz      loc_40421A
.text:00403DC4
.text:00403DC4 loc_403DC4:                             ; CODE XREF: sub_403D80+A7↓j
.text:00403DC4                                         ; sub_403D80+F3↓j ...
.text:00403DC4                 call    _errno
.text:00403DC9                 mov     dword ptr [eax], 0
.text:00403DCF                 nop
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403D80+6C↓j
.text:00403DD0                                         ; sub_403D80+7D↓j
.text:00403DD0                 mov     [esp+3Ch+Buf], ebp
.text:00403DD3                 call    sub_410370
.text:00403DD8                 test    eax, eax
.text:00403DDA                 mov     ebx, eax
.text:00403DDC                 jz      loc_4041F0
.text:00403DE2                 cmp     byte ptr [eax+0Ch], 2Eh ; '.'
.text:00403DE6                 jnz     short loc_403DFF
.text:00403DE8                 cmp     byte ptr [eax+0Dh], 0
.text:00403DEC                 jz      short loc_403DD0
.text:00403DEE                 mov     edx, [eax+0Ch]
.text:00403DF1                 and     edx, 0FFFF00h
.text:00403DF7                 cmp     edx, 2E00h
.text:00403DFD                 jz      short loc_403DD0
.text:00403DFF
.text:00403DFF loc_403DFF:                             ; CODE XREF: sub_403D80+66↑j
.text:00403DFF                 mov     [esp+3Ch+var_19], 0
.text:00403E04                 mov     ecx, [esp+3Ch+arg_0]
.text:00403E08                 lea     eax, [ebx+0Ch]
.text:00403E0B                 mov     [esp+3Ch+var_18], eax
.text:00403E0F                 mov     eax, [ecx+64h]
.text:00403E12                 mov     esi, [eax-18h]
.text:00403E15                 test    esi, esi
.text:00403E17                 jnz     loc_4041D0
.text:00403E1D
.text:00403E1D loc_403E1D:                             ; CODE XREF: sub_403D80+46B↓j
.text:00403E1D                 mov     [esp+3Ch+var_19], 1
.text:00403E22
.text:00403E22 loc_403E22:                             ; CODE XREF: sub_403D80+465↓j
.text:00403E22                 cmp     [esp+3Ch+var_19], 0
.text:00403E27                 jz      short loc_403DC4
.text:00403E29                 mov     dword ptr [esp+3Ch+var_30], ebx ; int
.text:00403E2D                 mov     edx, [esp+3Ch+arg_C]
.text:00403E31                 mov     ebx, [esp+3Ch+arg_0]
.text:00403E35                 mov     ecx, [esp+3Ch+var_18]
.text:00403E39                 mov     [esp+3Ch+var_34], edx ; int
.text:00403E3D                 mov     [esp+3Ch+Buf], ebx ; int
.text:00403E40                 mov     [esp+3Ch+Value], ecx ; LPCSTR
.text:00403E44                 call    sub_402370
.text:00403E49                 cmp     eax, 4
.text:00403E4C                 mov     ebx, eax
.text:00403E4E                 ja      loc_403F94
.text:00403E54                 cmp     eax, 3
.text:00403E57                 jnb     loc_403EFC
.text:00403E5D
.text:00403E5D loc_403E5D:                             ; CODE XREF: sub_403D80+1FE↓j
.text:00403E5D                                         ; sub_403D80+207↓j ...
.text:00403E5D                 cmp     edi, 4
.text:00403E60                 jz      loc_403EF0
.text:00403E66                 cmp     edi, 3
.text:00403E69                 jz      short loc_403EE2
.text:00403E6B
.text:00403E6B loc_403E6B:                             ; CODE XREF: sub_403D80+16A↓j
.text:00403E6B                                         ; sub_403D80+177↓j
.text:00403E6B                 mov     ebx, [esp+3Ch+arg_4]
.text:00403E6F                 mov     esi, [ebx]
.text:00403E71                 test    esi, esi
.text:00403E73                 jz      loc_403DC4
.text:00403E79
.text:00403E79 loc_403E79:                             ; CODE XREF: sub_403D80+479↓j
.text:00403E79                 test    ebp, ebp
.text:00403E7B                 jz      short loc_403E8F
.text:00403E7D                 mov     [esp+3Ch+Buf], ebp ; void *
.text:00403E80                 call    sub_410710
.text:00403E85
.text:00403E85 loc_403E85:                             ; CODE XREF: sub_403D80+160↓j
.text:00403E85                 mov     eax, edi
.text:00403E87
.text:00403E87 loc_403E87:                             ; CODE XREF: sub_403D80+502↓j
.text:00403E87                 add     esp, 2Ch
.text:00403E8A                 pop     ebx
.text:00403E8B                 pop     esi
.text:00403E8C                 pop     edi
.text:00403E8D                 pop     ebp
.text:00403E8E                 retn
.text:00403E8F ; ---------------------------------------------------------------------------
.text:00403E8F
.text:00403E8F loc_403E8F:                             ; CODE XREF: sub_403D80+FB↑j
.text:00403E8F                                         ; sub_403D80+495↓j
.text:00403E8F                 mov     [esp+3Ch+Value], offset byte_402597 ; char *
.text:00403E97                 mov     eax, [esp+3Ch+arg_0]
.text:00403E9B                 mov     [esp+3Ch+Buf], eax ; int
.text:00403E9E                 call    sub_403390
.text:00403EA3                 mov     [esp+3Ch+Buf], eax ; char *
.text:00403EA6                 call    sub_405870
.text:00403EAB                 mov     [esp+3Ch+Buf], offset aReadingDirecto ; "reading directory %s"
.text:00403EB2                 mov     ebx, eax
.text:00403EB4                 call    ds:libintl_gettext
.text:00403EBA                 mov     edi, eax
.text:00403EBC                 call    _errno
.text:00403EC1                 mov     [esp+3Ch+var_34], edi ; char *
.text:00403EC5                 mov     edi, 4
.text:00403ECA                 mov     dword ptr [esp+3Ch+var_30], ebx ; char
.text:00403ECE                 mov     ebp, [eax]
.text:00403ED0                 mov     [esp+3Ch+Buf], 0 ; Code
.text:00403ED7                 mov     [esp+3Ch+Value], ebp ; ErrorMessage
.text:00403EDB                 call    sub_40FF30
.text:00403EE0                 jmp     short loc_403E85
.text:00403EE2 ; ---------------------------------------------------------------------------
.text:00403EE2
.text:00403EE2 loc_403EE2:                             ; CODE XREF: sub_403D80+E9↑j
.text:00403EE2                 mov     edx, [esp+3Ch+var_14]
.text:00403EE6                 cmp     dword ptr [edx+4], 2
.text:00403EEA                 jnz     loc_403E6B
.text:00403EF0
.text:00403EF0 loc_403EF0:                             ; CODE XREF: sub_403D80+E0↑j
.text:00403EF0                                         ; sub_403D80+34E↓j
.text:00403EF0                 mov     ecx, [esp+3Ch+var_14]
.text:00403EF4                 mov     [ecx+4], edi
.text:00403EF7                 jmp     loc_403E6B
.text:00403EFC ; ---------------------------------------------------------------------------
.text:00403EFC
.text:00403EFC loc_403EFC:                             ; CODE XREF: sub_403D80+D7↑j
.text:00403EFC                 mov     ecx, [esp+3Ch+arg_0]
.text:00403F00                 mov     eax, [esp+3Ch+var_18]
.text:00403F04                 mov     esi, [ecx+64h]
.text:00403F07                 mov     [esp+3Ch+Buf], eax ; char *
.text:00403F0A                 lea     edx, [esi-18h]
.text:00403F0D                 mov     [esp+3Ch+var_20], edx
.text:00403F11                 call    sub_407300
.text:00403F16                 mov     [esp+3Ch+var_24], eax
.text:00403F1A                 mov     ecx, [esi-18h]
.text:00403F1D                 test    ecx, ecx
.text:00403F1F                 jnz     short loc_403F58
.text:00403F21                 mov     [esp+3Ch+var_2C], offset j_free
.text:00403F29                 mov     dword ptr [esp+3Ch+var_30], offset sub_403260
.text:00403F31                 mov     [esp+3Ch+var_34], offset sub_407430
.text:00403F39                 mov     [esp+3Ch+Value], 0
.text:00403F41                 mov     [esp+3Ch+Buf], 0Dh
.text:00403F48                 call    sub_406250
.text:00403F4D                 mov     [esi-18h], eax
.text:00403F50                 test    eax, eax
.text:00403F52                 jz      loc_4042A3
.text:00403F58
.text:00403F58 loc_403F58:                             ; CODE XREF: sub_403D80+19F↑j
.text:00403F58                 mov     edx, [esp+3Ch+var_24]
.text:00403F5C                 mov     eax, [esp+3Ch+var_20]
.text:00403F60                 mov     [esp+3Ch+Value], edx
.text:00403F64                 mov     esi, [eax]
.text:00403F66                 mov     [esp+3Ch+Buf], esi
.text:00403F69                 call    sub_4067A0
.text:00403F6E                 test    eax, eax
.text:00403F70                 jz      loc_4042A3
.text:00403F76                 cmp     ebx, 4
.text:00403F79                 jz      short loc_403F8D
.text:00403F7B                 cmp     ebx, 3
.text:00403F7E                 jnz     loc_403E5D
.text:00403F84                 cmp     edi, 2
.text:00403F87                 jnz     loc_403E5D
.text:00403F8D
.text:00403F8D loc_403F8D:                             ; CODE XREF: sub_403D80+1F9↑j
.text:00403F8D                 mov     edi, ebx
.text:00403F8F                 jmp     loc_403E5D
.text:00403F94 ; ---------------------------------------------------------------------------
.text:00403F94
.text:00403F94 loc_403F94:                             ; CODE XREF: sub_403D80+CE↑j
.text:00403F94                 cmp     eax, 5
.text:00403F97                 jnz     loc_403E5D
.text:00403F9D                 call    _errno
.text:00403FA2                 mov     esi, [eax]
.text:00403FA4                 mov     ecx, [esp+3Ch+arg_8]
.text:00403FA8                 mov     ebx, [esp+3Ch+var_18]
.text:00403FAC                 mov     [esp+3Ch+ErrorMessage], esi
.text:00403FB0                 mov     [esp+3Ch+Value], ecx
.text:00403FB4                 mov     [esp+3Ch+Buf], ebx
.text:00403FB7                 call    sub_4047E0
.text:00403FBC                 test    eax, eax
.text:00403FBE                 jnz     loc_404179
.text:00403FC4
.text:00403FC4 loc_403FC4:                             ; CODE XREF: sub_403D80+445↓j
.text:00403FC4                 call    _errno
.text:00403FC9                 mov     dword ptr [eax], 14h
.text:00403FCF                 mov     esi, [esp+3Ch+arg_8]
.text:00403FD3                 mov     ecx, [esi]
.text:00403FD5                 and     ecx, 0F000h
.text:00403FDB                 cmp     ecx, 4000h
.text:00403FE1                 jz      loc_40412C
.text:00403FE7
.text:00403FE7 loc_403FE7:                             ; CODE XREF: sub_403D80+3BA↓j
.text:00403FE7                 call    _errno
.text:00403FEC                 cmp     dword ptr [eax], 14h
.text:00403FEF                 jz      loc_4040E0
.text:00403FF5                 mov     [esp+3Ch+Buf], 1 ; int
.text:00403FFC                 mov     edx, [esp+3Ch+var_18]
.text:00404000                 mov     [esp+3Ch+Value], edx ; char *
.text:00404004                 call    sub_405840
.text:00404009                 mov     [esp+3Ch+Value], offset byte_402597 ; char *
.text:00404011                 mov     esi, [esp+3Ch+arg_0]
.text:00404015                 mov     edi, eax
.text:00404017                 mov     [esp+3Ch+Buf], esi ; int
.text:0040401A                 call    sub_403390
.text:0040401F                 mov     [esp+3Ch+Value], eax ; char *
.text:00404023                 mov     [esp+3Ch+Buf], 0 ; int
.text:0040402A                 call    sub_405840
.text:0040402F                 mov     [esp+3Ch+Buf], offset aCannotChdirFro ; "cannot chdir from %s to %s"
.text:00404036                 mov     esi, eax
.text:00404038                 call    ds:libintl_gettext
.text:0040403E                 mov     ebx, eax
.text:00404040                 call    _errno
.text:00404045                 mov     [esp+3Ch+var_2C], edi
.text:00404049                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:0040404D                 mov     [esp+3Ch+var_34], ebx ; char *
.text:00404051                 mov     ecx, [eax]
.text:00404053                 mov     [esp+3Ch+Buf], 0 ; Code
.text:0040405A                 mov     [esp+3Ch+Value], ecx ; ErrorMessage
.text:0040405E                 call    sub_40FF30
.text:00404063
.text:00404063 loc_404063:                             ; CODE XREF: sub_403D80+3A7↓j
.text:00404063                 mov     esi, [esp+3Ch+arg_0]
.text:00404067                 mov     edi, [esp+3Ch+var_18]
.text:0040406B                 mov     ebx, [esi+64h]
.text:0040406E                 mov     [esp+3Ch+Buf], edi ; char *
.text:00404071                 call    sub_407300
.text:00404076                 mov     ecx, [ebx-18h]
.text:00404079                 lea     esi, [ebx-18h]
.text:0040407C                 mov     edi, eax
.text:0040407E                 test    ecx, ecx
.text:00404080                 jnz     short loc_4040B9
.text:00404082                 mov     [esp+3Ch+var_2C], offset j_free
.text:0040408A                 mov     dword ptr [esp+3Ch+var_30], offset sub_403260
.text:00404092                 mov     [esp+3Ch+var_34], offset sub_407430
.text:0040409A                 mov     [esp+3Ch+Value], 0
.text:004040A2                 mov     [esp+3Ch+Buf], 0Dh
.text:004040A9                 call    sub_406250
.text:004040AE                 mov     [ebx-18h], eax
.text:004040B1                 test    eax, eax
.text:004040B3                 jz      loc_4042A3
.text:004040B9
.text:004040B9 loc_4040B9:                             ; CODE XREF: sub_403D80+300↑j
.text:004040B9                 mov     [esp+3Ch+Value], edi
.text:004040BD                 mov     ebx, [esi]
.text:004040BF                 mov     edi, 4
.text:004040C4                 mov     [esp+3Ch+Buf], ebx
.text:004040C7                 call    sub_4067A0
.text:004040CC                 test    eax, eax
.text:004040CE                 jnz     loc_403EF0
.text:004040D4                 jmp     loc_4042A3
.text:004040D4 ; ---------------------------------------------------------------------------
.text:004040D9                 align 10h
.text:004040E0
.text:004040E0 loc_4040E0:                             ; CODE XREF: sub_403D80+26F↑j
.text:004040E0                 mov     eax, [esp+3Ch+var_18]
.text:004040E4                 mov     ebx, [esp+3Ch+arg_0]
.text:004040E8                 mov     [esp+3Ch+Value], eax ; char *
.text:004040EC                 mov     [esp+3Ch+Buf], ebx ; int
.text:004040EF                 call    sub_403390
.text:004040F4                 mov     [esp+3Ch+Buf], eax ; char *
.text:004040F7                 call    sub_405870
.text:004040FC                 mov     [esp+3Ch+Buf], offset aCannotRemoveS ; "cannot remove %s"
.text:00404103                 mov     esi, eax
.text:00404105                 call    ds:libintl_gettext
.text:0040410B                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:0040410F                 mov     edi, [esp+3Ch+ErrorMessage]
.text:00404113                 mov     [esp+3Ch+Buf], 0 ; Code
.text:0040411A                 mov     [esp+3Ch+var_34], eax ; char *
.text:0040411E                 mov     [esp+3Ch+Value], edi ; ErrorMessage
.text:00404122                 call    sub_40FF30
.text:00404127                 jmp     loc_404063
.text:0040412C ; ---------------------------------------------------------------------------
.text:0040412C
.text:0040412C loc_40412C:                             ; CODE XREF: sub_403D80+261↑j
.text:0040412C                 mov     edx, [esp+3Ch+var_18]
.text:00404130                 mov     [esp+3Ch+Buf], edx ; LPCSTR
.text:00404133                 call    sub_4108E0
.text:00404138                 test    eax, eax
.text:0040413A                 jnz     loc_403FE7
.text:00404140                 mov     edx, [esp+3Ch+arg_0]
.text:00404144                 mov     ecx, [esp+3Ch+arg_8]
.text:00404148                 add     edx, 88h ; 'ˆ'
.text:0040414E                 mov     [esp+3Ch+Value], ecx
.text:00404152                 mov     [esp+3Ch+Buf], edx
.text:00404155                 call    sub_404530
.text:0040415A                 test    al, al
.text:0040415C                 jnz     loc_4042A8
.text:00404162                 mov     ebx, [esp+3Ch+var_18]
.text:00404166                 mov     [esp+3Ch+Buf], ebx ; char *
.text:00404169                 call    sub_407300
.text:0040416E                 mov     esi, [esp+3Ch+arg_4]
.text:00404172                 mov     [esi], eax
.text:00404174                 jmp     loc_403E5D
.text:00404179 ; ---------------------------------------------------------------------------
.text:00404179
.text:00404179 loc_404179:                             ; CODE XREF: sub_403D80+23E↑j
.text:00404179                 mov     ebx, [esp+3Ch+var_18]
.text:0040417D                 mov     eax, [esp+3Ch+arg_0]
.text:00404181                 mov     [esp+3Ch+Value], ebx ; char *
.text:00404185                 mov     [esp+3Ch+Buf], eax ; int
.text:00404188                 call    sub_403390
.text:0040418D                 mov     [esp+3Ch+Buf], eax ; char *
.text:00404190                 call    sub_405870
.text:00404195                 mov     [esp+3Ch+Buf], offset aCannotLstatS ; "cannot lstat %s"
.text:0040419C                 mov     esi, eax
.text:0040419E                 call    ds:libintl_gettext
.text:004041A4                 mov     ebx, eax
.text:004041A6                 call    _errno
.text:004041AB                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:004041AF                 mov     [esp+3Ch+var_34], ebx ; char *
.text:004041B3                 mov     edx, [eax]
.text:004041B5                 mov     [esp+3Ch+Buf], 1 ; Code
.text:004041BC                 mov     [esp+3Ch+Value], edx ; ErrorMessage
.text:004041C0                 call    sub_40FF30
.text:004041C5                 jmp     loc_403FC4
.text:004041C5 ; ---------------------------------------------------------------------------
.text:004041CA                 align 10h
.text:004041D0
.text:004041D0 loc_4041D0:                             ; CODE XREF: sub_403D80+97↑j
.text:004041D0                 mov     esi, [esp+3Ch+var_18]
.text:004041D4                 mov     [esp+3Ch+Value], esi
.text:004041D8                 mov     edx, [eax-18h]
.text:004041DB                 mov     [esp+3Ch+Buf], edx
.text:004041DE                 call    sub_406BF0
.text:004041E3                 test    eax, eax
.text:004041E5                 jnz     loc_403E22
.text:004041EB                 jmp     loc_403E1D
.text:004041F0 ; ---------------------------------------------------------------------------
.text:004041F0
.text:004041F0 loc_4041F0:                             ; CODE XREF: sub_403D80+5C↑j
.text:004041F0                 call    _errno
.text:004041F5                 mov     ebx, [eax]
.text:004041F7                 test    ebx, ebx
.text:004041F9                 jz      loc_403E79
.text:004041FF                 call    _errno
.text:00404204                 mov     edi, [eax]
.text:00404206                 mov     [esp+3Ch+Buf], ebp ; void *
.text:00404209                 call    sub_410710
.text:0040420E                 call    _errno
.text:00404213                 mov     [eax], edi
.text:00404215                 jmp     loc_403E8F
.text:0040421A ; ---------------------------------------------------------------------------
.text:0040421A
.text:0040421A loc_40421A:                             ; CODE XREF: sub_403D80+3E↑j
.text:0040421A                 call    _errno
.text:0040421F                 cmp     dword ptr [eax], 2
.text:00404222                 jnz     short loc_404231
.text:00404224                 mov     eax, [esp+3Ch+arg_C]
.text:00404228                 cmp     byte ptr [eax], 0
.text:0040422B                 jnz     loc_403DC4
.text:00404231
.text:00404231 loc_404231:                             ; CODE XREF: sub_403D80+4A2↑j
.text:00404231                 mov     [esp+3Ch+Value], offset byte_402597 ; char *
.text:00404239                 mov     ecx, [esp+3Ch+arg_0]
.text:0040423D                 mov     [esp+3Ch+Buf], ecx ; int
.text:00404240                 call    sub_403390
.text:00404245                 mov     [esp+3Ch+Buf], eax ; char *
.text:00404248                 call    sub_405870
.text:0040424D                 mov     [esp+3Ch+Buf], offset aCannotOpenDire ; "cannot open directory %s"
.text:00404254                 mov     ebp, eax
.text:00404256                 call    ds:libintl_gettext
.text:0040425C                 mov     edi, eax
.text:0040425E                 call    _errno
.text:00404263                 mov     dword ptr [esp+3Ch+var_30], ebp ; char
.text:00404267                 mov     [esp+3Ch+var_34], edi ; char *
.text:0040426B                 mov     esi, [eax]
.text:0040426D                 mov     [esp+3Ch+Buf], 0 ; Code
.text:00404274                 mov     [esp+3Ch+Value], esi ; ErrorMessage
.text:00404278                 call    sub_40FF30
.text:0040427D                 mov     eax, 4
.text:00404282                 jmp     loc_403E87
.text:00404287 ; ---------------------------------------------------------------------------
.text:00404287
.text:00404287 loc_404287:                             ; CODE XREF: sub_403D80+2C↑j
.text:00404287                 mov     [esp+3Ch+var_34], 34Bh
.text:0040428F                 mov     [esp+3Ch+Value], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00404297                 mov     [esp+3Ch+Buf], offset aValidStatusSta_0 ; "VALID_STATUS (status)"
.text:0040429E                 call    _assert
.text:004042A3 ; ---------------------------------------------------------------------------
.text:004042A3
.text:004042A3 loc_4042A3:                             ; CODE XREF: sub_403D80+1D2↑j
.text:004042A3                                         ; sub_403D80+1F0↑j ...
.text:004042A3                 call    sub_4073F0
.text:004042A8 ; ---------------------------------------------------------------------------
.text:004042A8
.text:004042A8 loc_4042A8:                             ; CODE XREF: sub_403D80+3DC↑j
.text:004042A8                 mov     [esp+3Ch+Value], offset byte_402597 ; char *
.text:004042B0                 mov     eax, [esp+3Ch+arg_0]
.text:004042B4                 mov     [esp+3Ch+Buf], eax ; int
.text:004042B7                 call    sub_403390
.text:004042BC                 mov     [esp+3Ch+Buf], eax ; char *
.text:004042BF                 call    sub_405870
.text:004042C4                 mov     [esp+3Ch+Buf], offset aWarningCircula ; "WARNING: Circular directory structure."...
.text:004042CB                 mov     edi, eax
.text:004042CD                 call    ds:libintl_gettext
.text:004042D3                 mov     dword ptr [esp+3Ch+var_30], edi ; char
.text:004042D7                 mov     [esp+3Ch+Value], 0 ; ErrorMessage
.text:004042DF                 mov     [esp+3Ch+Buf], 0 ; Code
.text:004042E6                 mov     [esp+3Ch+var_34], eax ; char *
.text:004042EA                 call    sub_40FF30
.text:004042EF                 mov     [esp+3Ch+Value], 1 ; Value
.text:004042F7                 mov     ebp, [esp+3Ch+arg_0]
.text:004042FB                 add     ebp, 0A8h ; '¨'
.text:00404301                 mov     [esp+3Ch+Buf], ebp ; Buf
.text:00404304                 call    longjmp
.text:00404304 sub_403D80      endp
.text:00404304
.text:00404304 ; ---------------------------------------------------------------------------
.text:00404309                 align 20h
.text:00404320
.text:00404320 loc_404320:                             ; DATA XREF: sub_4043B0+9D↓o
.text:00404320                 outsd
.text:00404321                 bound   esi, [ebx+74h]
.text:00404324                 popa
.text:00404325                 arpl    [ebx+5Fh], bp
.text:00404328                 outsd
.text:00404329                 bound   ebp, [edx+65h]
.text:0040432C                 arpl    [edi+ebx*2+73h], si
.text:00404330                 imul    edi, [edx+65h], 64262820h
.text:00404337                 jnb     short loc_404366
.text:00404339                 db      3Eh
.text:00404339                 insb
.text:0040433B                 outs    dx, byte ptr gs:[esi]
.text:0040433D                 pop     edi
.text:0040433E                 jnb     short loc_4043B4
.text:00404340                 popa
.text:00404341                 arpl    [ebx+29h], bp
.text:00404344                 and     [esi], bh
.text:00404346                 cmp     eax, 7A697320h
.text:0040434B                 outs    dx, dword ptr gs:[esi]
.text:0040434D                 db      66h
.text:0040434D                 and     [eax], ch
.text:00404350                 jnb     short loc_4043BB
.text:00404352                 jp      short near ptr loc_4043B7+2
.text:00404354                 pop     edi
.text:00404355                 jz      short near ptr loc_404379+7
.text:00404357                 add     [eax+26B48Dh], dl
.text:00404357 ; ---------------------------------------------------------------------------
.text:0040435D                 db 3 dup(0)
.text:00404360 dword_404360    dd 7473626Fh            ; DATA XREF: sub_4043B0+D4↓o
.text:00404364                 db 61h, 63h
.text:00404366 ; ---------------------------------------------------------------------------
.text:00404366
.text:00404366 loc_404366:                             ; CODE XREF: .text:00404337↑j
.text:00404366                 imul    ebx, [edi+6Fh], 62h ; 'b'
.text:0040436A                 push    65h ; 'e'
.text:0040436C                 arpl    [edi+ebx*2+73h], si
.text:00404370                 imul    edi, [edx+65h], 64262820h
.text:00404377                 jnb     short near ptr loc_4043A5+1
.text:00404379
.text:00404379 loc_404379:                             ; CODE XREF: .text:00404355↑j
.text:00404379                 db      3Eh
.text:00404379                 imul    esi, fs:[edx+5Fh], 63617473h
.text:00404382                 imul    ebp, [ecx], 20h ; ' '
.text:00404385                 db      3Eh
.text:00404385                 cmp     eax, 706F7420h
.text:0040438B                 pop     edi
.text:0040438C                 insb
.text:0040438D                 outs    dx, byte ptr gs:[esi]
.text:0040438F                 add     [edi+ebp*2+70h], dh
.text:00404393                 pop     edi
.text:00404394                 insb
.text:00404395                 outs    dx, byte ptr gs:[esi]
.text:00404397                 and     [esi], bh
.text:00404399                 cmp     eax, 6E003220h
.text:0040439E                 pop     edi
.text:0040439F                 insb
.text:004043A0                 outs    dx, byte ptr gs:[esi]
.text:004043A2                 db      67h
.text:004043A2                 jz      near ptr loc_40440B+2
.text:004043A5
.text:004043A5 loc_4043A5:                             ; CODE XREF: .text:00404377↑j
.text:004043A5                 jnb     short loc_4043C7
.text:004043A7                 db      3Eh
.text:004043A7                 and     [eax], dh
.text:004043AA                 add     [eax+26748Dh], dl
.text:004043B0
.text:004043B0 ; =============== S U B R O U T I N E =======================================
.text:004043B0
.text:004043B0
.text:004043B0 sub_4043B0      proc near               ; CODE XREF: sub_403580+9E↑p
.text:004043B0
.text:004043B0 var_1C          = dword ptr -1Ch
.text:004043B0 var_18          = dword ptr -18h
.text:004043B0 var_14          = dword ptr -14h
.text:004043B0 arg_0           = dword ptr  4
.text:004043B0
.text:004043B0                 push    ebp
.text:004043B1                 push    edi
.text:004043B2                 push    esi
.text:004043B3                 push    ebx
.text:004043B4
.text:004043B4 loc_4043B4:                             ; CODE XREF: .text:0040433E↑j
.text:004043B4                 sub     esp, 0Ch
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: .text:00404352↑j
.text:004043B7                 mov     edi, [esp+1Ch+arg_0]
.text:004043BB
.text:004043BB loc_4043BB:                             ; CODE XREF: .text:00404350↑j
.text:004043BB                 lea     esi, [edi+2Ch]
.text:004043BE                 mov     edx, [edi+34h]
.text:004043C1                 mov     eax, [esi+0Ch]
.text:004043C4                 mov     ebp, [esi+8]
.text:004043C7
.text:004043C7 loc_4043C7:                             ; CODE XREF: .text:loc_4043A5↑j
.text:004043C7                 sub     eax, ebp
.text:004043C9                 shr     eax, 2
.text:004043CC                 jz      loc_4044A6
.text:004043D2                 mov     edx, [edx+eax*4-4]
.text:004043D6                 cmp     edx, 1
.text:004043D9                 jbe     loc_40448D
.text:004043DF                 mov     ecx, [edi+0Ch]
.text:004043E2                 mov     ebx, [edi+8]
.text:004043E5                 mov     eax, ecx
.text:004043E7                 sub     eax, ebx
.text:004043E9                 cmp     eax, edx
.text:004043EB                 jb      loc_404474
.text:004043F1                 mov     ebx, edx
.text:004043F3                 mov     edx, [edi+10h]
.text:004043F6                 neg     ebx
.text:004043F8                 sub     edx, ecx
.text:004043FA                 cmp     edx, ebx
.text:004043FC                 jl      short loc_404460
.text:004043FE
.text:004043FE loc_4043FE:                             ; CODE XREF: sub_4043B0+C2↓j
.text:004043FE                 lea     edx, [ebx+ecx]
.text:00404401                 mov     [edi+0Ch], edx
.text:00404404                 mov     edx, [esi+0Ch]
.text:00404407                 mov     ecx, edx
.text:00404409                 sub     ecx, ebp
.text:0040440B
.text:0040440B loc_40440B:                             ; CODE XREF: .text:004043A2↑j
.text:0040440B                 cmp     ecx, 3
.text:0040440E                 jbe     short loc_40443D
.text:00404410                 mov     ebx, [esi+10h]
.text:00404413                 sub     ebx, edx
.text:00404415                 cmp     ebx, 0FFFFFFFCh
.text:00404418                 jl      short loc_404428
.text:0040441A
.text:0040441A loc_40441A:                             ; CODE XREF: sub_4043B0+8B↓j
.text:0040441A                 lea     edi, [edx-4]
.text:0040441D                 mov     [esi+0Ch], edi
.text:00404420                 add     esp, 0Ch
.text:00404423                 pop     ebx
.text:00404424                 pop     esi
.text:00404425                 pop     edi
.text:00404426                 pop     ebp
.text:00404427                 retn
.text:00404428 ; ---------------------------------------------------------------------------
.text:00404428
.text:00404428 loc_404428:                             ; CODE XREF: sub_4043B0+68↑j
.text:00404428                 mov     [esp+1Ch+var_18], 0FFFFFFFCh
.text:00404430                 mov     [esp+1Ch+var_1C], esi
.text:00404433                 call    sub_416D60
.text:00404438                 mov     edx, [esi+0Ch]
.text:0040443B                 jmp     short loc_40441A
.text:0040443D ; ---------------------------------------------------------------------------
.text:0040443D
.text:0040443D loc_40443D:                             ; CODE XREF: sub_4043B0+5E↑j
.text:0040443D                 mov     [esp+1Ch+var_14], 0EBh ; 'ë'
.text:00404445                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:0040444D                 mov     [esp+1Ch+var_1C], offset loc_404320
.text:00404454
.text:00404454 loc_404454:                             ; CODE XREF: sub_4043B0+DB↓j
.text:00404454                                         ; sub_4043B0+F4↓j ...
.text:00404454                 call    _assert
.text:00404454 ; ---------------------------------------------------------------------------
.text:00404459                 align 10h
.text:00404460
.text:00404460 loc_404460:                             ; CODE XREF: sub_4043B0+4C↑j
.text:00404460                 mov     [esp+1Ch+var_18], ebx
.text:00404464                 mov     [esp+1Ch+var_1C], edi
.text:00404467                 call    sub_416D60
.text:0040446C                 mov     ebp, [esi+8]
.text:0040446F                 mov     ecx, [edi+0Ch]
.text:00404472                 jmp     short loc_4043FE
.text:00404474 ; ---------------------------------------------------------------------------
.text:00404474
.text:00404474 loc_404474:                             ; CODE XREF: sub_4043B0+3B↑j
.text:00404474                 mov     [esp+1Ch+var_14], 0E7h ; 'ç'
.text:0040447C                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:00404484                 mov     [esp+1Ch+var_1C], offset dword_404360
.text:0040448B                 jmp     short loc_404454
.text:0040448D ; ---------------------------------------------------------------------------
.text:0040448D
.text:0040448D loc_40448D:                             ; CODE XREF: sub_4043B0+29↑j
.text:0040448D                 mov     [esp+1Ch+var_14], 0E4h ; 'ä'
.text:00404495                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:0040449D                 mov     [esp+1Ch+var_1C], 404390h
.text:004044A4                 jmp     short loc_404454
.text:004044A6 ; ---------------------------------------------------------------------------
.text:004044A6
.text:004044A6 loc_4044A6:                             ; CODE XREF: sub_4043B0+1C↑j
.text:004044A6                 mov     [esp+1Ch+var_14], 0E2h ; 'â'
.text:004044AE                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_0 ; "../../coreutils-5.3.0-src/src/remove.c"
.text:004044B6                 mov     [esp+1Ch+var_1C], 40439Dh
.text:004044BD                 jmp     short loc_404454
.text:004044BD sub_4043B0      endp
.text:004044BD
.text:004044BD ; ---------------------------------------------------------------------------
.text:004044BF                 align 10h
.text:004044C0
.text:004044C0 ; =============== S U B R O U T I N E =======================================
.text:004044C0
.text:004044C0
.text:004044C0 sub_4044C0      proc near               ; CODE XREF: sub_401FE0+150↑p
.text:004044C0
.text:004044C0 arg_0           = dword ptr  4
.text:004044C0
.text:004044C0                 mov     edx, [esp+arg_0]
.text:004044C4                 mov     dword ptr [edx+10h], 0
.text:004044CB                 mov     dword ptr [edx+14h], 0
.text:004044D2                 mov     dword ptr [edx+18h], 95F616h
.text:004044D9                 retn
.text:004044D9 sub_4044C0      endp
.text:004044D9
.text:004044D9 ; ---------------------------------------------------------------------------
.text:004044DA                 align 10h
.text:004044E0 aCoreutils530Sr_1 db '../../coreutils-5.3.0-src/lib/cycle-check.c',0
.text:004044E0                                         ; DATA XREF: sub_404530+CE↓o
.text:0040450C aStateMagicCcMa db 'state->magic == CC_MAGIC',0
.text:0040450C                                         ; DATA XREF: sub_404530+D6↓o
.text:00404525                 align 10h
.text:00404530
.text:00404530 ; =============== S U B R O U T I N E =======================================
.text:00404530
.text:00404530
.text:00404530 sub_404530      proc near               ; CODE XREF: sub_403D80+3D5↑p
.text:00404530
.text:00404530 var_1C          = dword ptr -1Ch
.text:00404530 var_18          = dword ptr -18h
.text:00404530 var_14          = dword ptr -14h
.text:00404530 arg_0           = dword ptr  4
.text:00404530 arg_4           = dword ptr  8
.text:00404530
.text:00404530                 push    ebp
.text:00404531                 push    edi
.text:00404532                 push    esi
.text:00404533                 push    ebx
.text:00404534                 sub     esp, 0Ch
.text:00404537                 mov     edx, [esp+1Ch+arg_0]
.text:0040453B                 cmp     dword ptr [edx+18h], 95F616h
.text:00404542                 jnz     loc_4045F6
.text:00404548                 mov     edx, [esp+1Ch+arg_0]
.text:0040454C                 mov     ebp, [edx+14h]
.text:0040454F                 mov     edi, [edx+10h]
.text:00404552                 mov     eax, ebp
.text:00404554                 or      eax, edi
.text:00404556                 jz      short loc_4045A0
.text:00404558                 mov     esi, [esp+1Ch+arg_4]
.text:0040455C                 mov     ecx, [esi+8]
.text:0040455F                 mov     ebx, [esi+0Ch]
.text:00404562                 mov     esi, [esp+1Ch+arg_0]
.text:00404566                 mov     eax, [esi]
.text:00404568                 mov     edx, [esi+4]
.text:0040456B                 mov     esi, ebx
.text:0040456D                 xor     eax, ecx
.text:0040456F                 xor     esi, edx
.text:00404571                 or      esi, eax
.text:00404573                 jnz     short loc_4045A0
.text:00404575                 mov     edx, [esp+1Ch+arg_4]
.text:00404579                 mov     esi, [esp+1Ch+arg_0]
.text:0040457D                 mov     ebx, [edx+14h]
.text:00404580                 mov     ecx, [edx+10h]
.text:00404583                 mov     eax, [esi+8]
.text:00404586                 mov     edx, [esi+0Ch]
.text:00404589                 mov     esi, ebx
.text:0040458B                 xor     eax, ecx
.text:0040458D                 xor     esi, edx
.text:0040458F                 or      esi, eax
.text:00404591                 mov     edx, 1
.text:00404596                 jz      short loc_4045EC
.text:00404598                 nop
.text:00404599                 lea     esi, [esi+0]
.text:004045A0
.text:004045A0 loc_4045A0:                             ; CODE XREF: sub_404530+26↑j
.text:004045A0                                         ; sub_404530+43↑j
.text:004045A0                 mov     ecx, edi
.text:004045A2                 mov     ebx, ebp
.text:004045A4                 mov     edx, [esp+1Ch+arg_0]
.text:004045A8                 add     ecx, 1
.text:004045AB                 mov     esi, ecx
.text:004045AD                 adc     ebx, 0
.text:004045B0                 and     esi, edi
.text:004045B2                 mov     edi, ebx
.text:004045B4                 mov     [edx+10h], ecx
.text:004045B7                 and     edi, ebp
.text:004045B9                 or      esi, edi
.text:004045BB                 mov     [edx+14h], ebx
.text:004045BE                 jnz     short loc_4045EA
.text:004045C0                 mov     ebp, ebx
.text:004045C2                 mov     edx, 1
.text:004045C7                 or      ebp, ecx
.text:004045C9                 jz      short loc_4045EC
.text:004045CB                 mov     ebp, [esp+1Ch+arg_4]
.text:004045CF                 mov     ebx, [esp+1Ch+arg_0]
.text:004045D3                 mov     edx, [ebp+10h]
.text:004045D6                 mov     ecx, [ebp+14h]
.text:004045D9                 mov     [ebx+8], edx
.text:004045DC                 mov     [ebx+0Ch], ecx
.text:004045DF                 mov     esi, [ebp+8]
.text:004045E2                 mov     edi, [ebp+0Ch]
.text:004045E5                 mov     [ebx], esi
.text:004045E7                 mov     [ebx+4], edi
.text:004045EA
.text:004045EA loc_4045EA:                             ; CODE XREF: sub_404530+8E↑j
.text:004045EA                 xor     edx, edx
.text:004045EC
.text:004045EC loc_4045EC:                             ; CODE XREF: sub_404530+66↑j
.text:004045EC                                         ; sub_404530+99↑j
.text:004045EC                 add     esp, 0Ch
.text:004045EF                 mov     eax, edx
.text:004045F1                 pop     ebx
.text:004045F2                 pop     esi
.text:004045F3                 pop     edi
.text:004045F4                 pop     ebp
.text:004045F5                 retn
.text:004045F6 ; ---------------------------------------------------------------------------
.text:004045F6
.text:004045F6 loc_4045F6:                             ; CODE XREF: sub_404530+12↑j
.text:004045F6                 mov     [esp+1Ch+var_14], 45h ; 'E'
.text:004045FE                 mov     [esp+1Ch+var_18], offset aCoreutils530Sr_1 ; "../../coreutils-5.3.0-src/lib/cycle-che"...
.text:00404606                 mov     [esp+1Ch+var_1C], offset aStateMagicCcMa ; "state->magic == CC_MAGIC"
.text:0040460D                 call    _assert
.text:0040460D sub_404530      endp
.text:0040460D
.text:0040460D ; ---------------------------------------------------------------------------
.text:00404612                 align 10h
.text:00404620
.text:00404620 loc_404620:                             ; DATA XREF: sub_4046A0:loc_4046E3↓o
.text:00404620                 ja      short loc_404687
.text:00404622                 imul    esi, [edx+64h], 6C696620h
.text:00404629                 add     gs:[ebx+6Fh], dh
.text:0040462D                 arpl    [ebx+65h], bp
.text:00404630                 jz      short $+2
.text:00404632
.text:00404632 loc_404632:                             ; CODE XREF: .text:00404630↑j
.text:00404632                                         ; DATA XREF: sub_4046A0:loc_404703↓o
.text:00404632                 jnb     short near ptr loc_4046A9+4
.text:00404634                 insd
.text:00404635                 bound   ebp, [edi+6Ch]
.text:00404638                 imul    esp, [ebx+20h], 6B6E696Ch
.text:0040463F                 add     [esi+69h], ah
.text:00404642                 outsw
.text:00404644                 add     [ebx+68h], ah
.text:00404647                 popa
.text:00404648                 jb      short near ptr loc_4046A9+2
.text:0040464A                 arpl    [ebp+72h], si
.text:0040464E                 and     [ebx+70h], dh
.text:00404651                 arpl    gs:[ecx+61h], bp
.text:00404655                 insb
.text:00404656                 and     [esi+69h], ah
.text:00404659                 insb
.text:0040465A                 add     gs:[edx+6Ch], ah
.text:0040465E                 outsd
.text:0040465F                 arpl    [ebx+20h], bp
.text:00404662                 jnb     short near ptr loc_4046D3+1
.text:00404664                 arpl    gs:[ecx+61h], bp
.text:00404668                 insb
.text:00404669                 and     [esi+69h], ah
.text:0040466C                 insb
.text:0040466D                 add     gs:[ecx+ebp*2+72h], ah
.text:00404672                 arpl    gs:[edi+ebp*2+72h], si
.text:00404677                 jns     short $+2
.text:00404679
.text:00404679 loc_404679:                             ; CODE XREF: .text:00404677↑j
.text:00404679                                         ; DATA XREF: sub_4046A0+AC↓o
.text:00404679                 jb      short near ptr loc_4046DC+4
.text:0040467B                 db      67h
.text:0040467B                 jnz     near ptr loc_4046E3+7
.text:0040467E                 popa
.text:0040467F                 jb      short near ptr sub_4046A0+1
.text:00404681                 db      65h
.text:00404681                 insd
.text:00404683                 jo      short loc_4046F9
.text:00404685                 jns     short loc_4046A7
.text:00404687
.text:00404687 loc_404687:                             ; CODE XREF: .text:loc_404620↑j
.text:00404687                 imul    bp, [ebp+0], 6572h
.text:0040468E                 db      67h
.text:0040468E                 jnz     near ptr loc_4046F9+4
.text:00404691                 popa
.text:00404692                 jb      short near ptr loc_4046B3+1
.text:00404694                 imul    bp, [ebp+0], 0B48Dh
.text:0040469B                 add     es:[eax], al
.text:0040469B ; ---------------------------------------------------------------------------
.text:0040469E                 dw 0
.text:004046A0
.text:004046A0 ; =============== S U B R O U T I N E =======================================
.text:004046A0
.text:004046A0
.text:004046A0 sub_4046A0      proc near               ; CODE XREF: sub_403900+DF↑p
.text:004046A0                                         ; .text:0040467F↑j
.text:004046A0
.text:004046A0 var_C           = dword ptr -0Ch
.text:004046A0 arg_0           = dword ptr  4
.text:004046A0
.text:004046A0                 sub     esp, 0Ch
.text:004046A3                 mov     edx, [esp+0Ch+arg_0]
.text:004046A7
.text:004046A7 loc_4046A7:                             ; CODE XREF: .text:00404685↑j
.text:004046A7                 mov     eax, [edx]
.text:004046A9
.text:004046A9 loc_4046A9:                             ; CODE XREF: .text:00404648↑j
.text:004046A9                                         ; .text:loc_404632↑j
.text:004046A9                 and     eax, 0F000h
.text:004046AE                 cmp     eax, 8000h
.text:004046B3
.text:004046B3 loc_4046B3:                             ; CODE XREF: .text:00404692↑j
.text:004046B3                 jz      loc_404740
.text:004046B9                 cmp     eax, 4000h
.text:004046BE                 jz      short loc_404730
.text:004046C0                 cmp     eax, 6000h
.text:004046C5                 jz      short loc_404721
.text:004046C7                 cmp     eax, 2000h
.text:004046CC                 jz      short loc_404717
.text:004046CE                 cmp     eax, 1000h
.text:004046D3
.text:004046D3 loc_4046D3:                             ; CODE XREF: .text:00404662↑j
.text:004046D3                 jz      short loc_40470D
.text:004046D5                 cmp     eax, 0A000h
.text:004046DA                 jz      short loc_404703
.text:004046DC
.text:004046DC loc_4046DC:                             ; CODE XREF: .text:loc_404679↑j
.text:004046DC                 cmp     eax, 0C000h
.text:004046E1                 jz      short loc_4046F9
.text:004046E3
.text:004046E3 loc_4046E3:                             ; CODE XREF: .text:0040467B↑j
.text:004046E3                 mov     [esp+0Ch+arg_0], offset loc_404620
.text:004046EB                 nop
.text:004046EC                 lea     esi, [esi+0]
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_4046A0+61↓j
.text:004046F0                                         ; sub_4046A0+6B↓j ...
.text:004046F0                 add     esp, 0Ch
.text:004046F3                 jmp     ds:libintl_gettext
.text:004046F9 ; ---------------------------------------------------------------------------
.text:004046F9
.text:004046F9 loc_4046F9:                             ; CODE XREF: .text:00404683↑j
.text:004046F9                                         ; sub_4046A0+41↑j ...
.text:004046F9                 mov     [esp+0Ch+arg_0], 40462Bh
.text:00404701                 jmp     short loc_4046F0
.text:00404703 ; ---------------------------------------------------------------------------
.text:00404703
.text:00404703 loc_404703:                             ; CODE XREF: sub_4046A0+3A↑j
.text:00404703                 mov     [esp+0Ch+arg_0], offset loc_404632
.text:0040470B                 jmp     short loc_4046F0
.text:0040470D ; ---------------------------------------------------------------------------
.text:0040470D
.text:0040470D loc_40470D:                             ; CODE XREF: sub_4046A0:loc_4046D3↑j
.text:0040470D                 mov     [esp+0Ch+arg_0], 404640h
.text:00404715                 jmp     short loc_4046F0
.text:00404717 ; ---------------------------------------------------------------------------
.text:00404717
.text:00404717 loc_404717:                             ; CODE XREF: sub_4046A0+2C↑j
.text:00404717                 mov     [esp+0Ch+arg_0], 404645h
.text:0040471F                 jmp     short loc_4046F0
.text:00404721 ; ---------------------------------------------------------------------------
.text:00404721
.text:00404721 loc_404721:                             ; CODE XREF: sub_4046A0+25↑j
.text:00404721                 mov     [esp+0Ch+arg_0], 40465Ch
.text:00404729                 jmp     short loc_4046F0
.text:00404729 ; ---------------------------------------------------------------------------
.text:0040472B                 align 10h
.text:00404730
.text:00404730 loc_404730:                             ; CODE XREF: sub_4046A0+1E↑j
.text:00404730                 mov     [esp+0Ch+arg_0], 40466Fh
.text:00404738                 jmp     short loc_4046F0
.text:00404738 ; ---------------------------------------------------------------------------
.text:0040473A                 align 10h
.text:00404740
.text:00404740 loc_404740:                             ; CODE XREF: sub_4046A0:loc_4046B3↑j
.text:00404740                 mov     eax, [edx+30h]
.text:00404743                 mov     edx, [edx+34h]
.text:00404746                 mov     ecx, edx
.text:00404748                 or      ecx, eax
.text:0040474A                 jnz     short loc_404760
.text:0040474C                 mov     [esp+0Ch+var_C], offset loc_404679
.text:00404753
.text:00404753 loc_404753:                             ; CODE XREF: sub_4046A0+C7↓j
.text:00404753                 call    ds:libintl_gettext
.text:00404759                 add     esp, 0Ch
.text:0040475C                 retn
.text:0040475C ; ---------------------------------------------------------------------------
.text:0040475D                 align 10h
.text:00404760
.text:00404760 loc_404760:                             ; CODE XREF: sub_4046A0+AA↑j
.text:00404760                 mov     [esp+0Ch+var_C], 40468Ch
.text:00404767                 jmp     short loc_404753
.text:00404767 sub_4046A0      endp
.text:00404767
.text:00404767 ; ---------------------------------------------------------------------------
.text:00404769                 align 10h
.text:00404770 dword_404770    dd 0B48D002Fh, 26h, 27BC8D00h, 0
.text:00404770                                         ; DATA XREF: sub_404780+1C↓o
.text:00404780
.text:00404780 ; =============== S U B R O U T I N E =======================================
.text:00404780
.text:00404780
.text:00404780 sub_404780      proc near               ; CODE XREF: sub_4019A0+3CD↑p
.text:00404780
.text:00404780 var_8C          = dword ptr -8Ch
.text:00404780 var_88          = dword ptr -88h
.text:00404780 var_7C          = byte ptr -7Ch
.text:00404780 var_74          = dword ptr -74h
.text:00404780 var_70          = dword ptr -70h
.text:00404780 var_6C          = dword ptr -6Ch
.text:00404780 var_68          = dword ptr -68h
.text:00404780 var_4           = dword ptr -4
.text:00404780 arg_0           = dword ptr  4
.text:00404780
.text:00404780                 sub     esp, 8Ch
.text:00404786                 lea     edx, [esp+8Ch+var_7C]
.text:0040478A                 mov     [esp+8Ch+var_4], ebx
.text:00404791                 mov     ebx, [esp+8Ch+arg_0]
.text:00404798                 mov     [esp+8Ch+var_88], edx
.text:0040479C                 mov     [esp+8Ch+var_8C], offset dword_404770
.text:004047A3                 call    sub_4102E0
.text:004047A8                 xor     edx, edx
.text:004047AA                 test    eax, eax
.text:004047AC                 jnz     short loc_4047CB
.text:004047AE                 mov     edx, [esp+8Ch+var_74]
.text:004047B2                 mov     ecx, [esp+8Ch+var_70]
.text:004047B6                 mov     [ebx], edx
.text:004047B8                 mov     [ebx+4], ecx
.text:004047BB                 mov     edx, [esp+8Ch+var_6C]
.text:004047BF                 mov     ecx, [esp+8Ch+var_68]
.text:004047C3                 mov     [ebx+8], edx
.text:004047C6                 mov     edx, ebx
.text:004047C8                 mov     [ebx+0Ch], ecx
.text:004047CB
.text:004047CB loc_4047CB:                             ; CODE XREF: sub_404780+2C↑j
.text:004047CB                 mov     ebx, [esp+8Ch+var_4]
.text:004047D2                 mov     eax, edx
.text:004047D4                 add     esp, 8Ch
.text:004047DA                 retn
.text:004047DA sub_404780      endp
.text:004047DA
.text:004047DA ; ---------------------------------------------------------------------------
.text:004047DB                 align 10h
.text:004047E0
.text:004047E0 ; =============== S U B R O U T I N E =======================================
.text:004047E0
.text:004047E0
.text:004047E0 sub_4047E0      proc near               ; CODE XREF: sub_4026E0+E8↑p
.text:004047E0                                         ; sub_4026E0+282↑p ...
.text:004047E0
.text:004047E0 arg_0           = dword ptr  4
.text:004047E0 arg_4           = dword ptr  8
.text:004047E0
.text:004047E0                 sub     esp, 0Ch
.text:004047E3                 mov     eax, [esp+0Ch+arg_0]
.text:004047E7                 mov     edx, [esp+0Ch+arg_4]
.text:004047EB                 test    eax, eax
.text:004047ED                 jz      short loc_4047F4
.text:004047EF                 cmp     byte ptr [eax], 0
.text:004047F2                 jz      short loc_404804
.text:004047F4
.text:004047F4 loc_4047F4:                             ; CODE XREF: sub_4047E0+D↑j
.text:004047F4                 mov     [esp+0Ch+arg_4], edx
.text:004047F8                 mov     [esp+0Ch+arg_0], eax
.text:004047FC                 add     esp, 0Ch
.text:004047FF                 jmp     sub_4102E0
.text:00404804 ; ---------------------------------------------------------------------------
.text:00404804
.text:00404804 loc_404804:                             ; CODE XREF: sub_4047E0+12↑j
.text:00404804                 call    _errno
.text:00404809                 mov     dword ptr [eax], 2
.text:0040480F                 mov     eax, 0FFFFFFFFh
.text:00404814                 add     esp, 0Ch
.text:00404817                 retn
.text:00404817 sub_4047E0      endp
.text:00404817
.text:00404817 ; ---------------------------------------------------------------------------
.text:00404818                 align 10h
.text:00404820 dword_404820    dd 90002D2Dh, 7 dup(90909090h)
.text:00404820                                         ; DATA XREF: sub_404A70+E4↓o
.text:00404840 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404840                                         ; DATA XREF: sub_404A70+2FC↓o
.text:0040486D                 align 20h
.text:00404880 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00404880                                         ; DATA XREF: sub_404A70:loc_404DD2↓o
.text:004048AD                 align 20h
.text:004048C0 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:004048C0                                         ; DATA XREF: sub_404A70:loc_404E70↓o
.text:004048C0                                         ; sub_404A70:loc_405237↓o
.text:004048E6                 align 20h
.text:00404900 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00404900                                         ; DATA XREF: sub_404A70+48E↓o
.text:00404920 dword_404920    dd 90909000h, 7 dup(90909090h)
.text:00404920                                         ; DATA XREF: sub_404A70:loc_404F41↓o
.text:00404940 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00404940                                         ; DATA XREF: sub_404A70:loc_404F5A↓o
.text:00404960 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00404960                                         ; DATA XREF: sub_404A70:loc_40503F↓o
.text:00404960                                         ; sub_404A70:loc_40536C↓o
.text:00404987                 align 20h
.text:004049A0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004049A0                                         ; DATA XREF: sub_404A70:loc_4051B3↓o
.text:004049CE                 align 20h
.text:004049E0 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:004049E0                                         ; DATA XREF: sub_404A70:loc_40529F↓o
.text:00404A01 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00404A01                                         ; DATA XREF: sub_404A70+93F↓o
.text:00404A1B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00404A1B                                         ; DATA XREF: sub_404A70:loc_4053E7↓o
.text:00404A35 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00404A35                                         ; DATA XREF: sub_404A70:loc_40540E↓o
.text:00404A53 ; const char VarName[]
.text:00404A53 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_404A70:loc_4055C0↓o
.text:00404A63                 align 10h
.text:00404A70
.text:00404A70 ; =============== S U B R O U T I N E =======================================
.text:00404A70
.text:00404A70
.text:00404A70 ; int __cdecl sub_404A70(int, int, char *Str, int, int, int, int, int)
.text:00404A70 sub_404A70      proc near               ; CODE XREF: sub_405600+5A↓p
.text:00404A70                                         ; .text:004056EA↓p ...
.text:00404A70
.text:00404A70 Str1            = dword ptr -5Ch
.text:00404A70 Str2            = dword ptr -58h
.text:00404A70 MaxCount        = dword ptr -54h
.text:00404A70 var_50          = dword ptr -50h
.text:00404A70 var_4C          = dword ptr -4Ch
.text:00404A70 var_3C          = dword ptr -3Ch
.text:00404A70 var_38          = dword ptr -38h
.text:00404A70 var_34          = dword ptr -34h
.text:00404A70 var_30          = dword ptr -30h
.text:00404A70 var_2C          = dword ptr -2Ch
.text:00404A70 var_28          = dword ptr -28h
.text:00404A70 var_24          = dword ptr -24h
.text:00404A70 var_20          = dword ptr -20h
.text:00404A70 var_1C          = dword ptr -1Ch
.text:00404A70 var_18          = dword ptr -18h
.text:00404A70 var_14          = dword ptr -14h
.text:00404A70 arg_0           = dword ptr  4
.text:00404A70 arg_4           = dword ptr  8
.text:00404A70 Str             = dword ptr  0Ch
.text:00404A70 arg_C           = dword ptr  10h
.text:00404A70 arg_10          = dword ptr  14h
.text:00404A70 arg_14          = dword ptr  18h
.text:00404A70 arg_18          = dword ptr  1Ch
.text:00404A70 arg_1C          = dword ptr  20h
.text:00404A70
.text:00404A70                 push    ebp
.text:00404A71                 mov     eax, 0FFFFFFFFh
.text:00404A76                 push    edi
.text:00404A77                 push    esi
.text:00404A78                 push    ebx
.text:00404A79                 sub     esp, 4Ch
.text:00404A7C                 mov     esi, [esp+5Ch+Str]
.text:00404A80                 mov     ebp, [esp+5Ch+arg_1C]
.text:00404A84                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00404A87                 mov     ebx, [ebp+4]
.text:00404A8A                 setz    dl
.text:00404A8D                 movzx   ecx, dl
.text:00404A90                 dec     ecx
.text:00404A91                 and     ecx, ebx
.text:00404A93                 mov     [esp+5Ch+var_14], ecx
.text:00404A97                 mov     ecx, [esp+5Ch+arg_0]
.text:00404A9B                 test    ecx, ecx
.text:00404A9D                 jle     loc_404BC7
.text:00404AA3                 mov     dword ptr [ebp+0Ch], 0
.text:00404AAA                 mov     ebx, [ebp+0]
.text:00404AAD                 test    ebx, ebx
.text:00404AAF                 jz      loc_4055E0
.text:00404AB5                 mov     edi, [ebp+10h]
.text:00404AB8                 test    edi, edi
.text:00404ABA                 jnz     short loc_404B13
.text:00404ABC                 lea     esi, [esi+0]
.text:00404AC0
.text:00404AC0 loc_404AC0:                             ; CODE XREF: sub_404A70+B7C↓j
.text:00404AC0                 mov     [ebp+24h], ebx
.text:00404AC3                 mov     esi, [esp+5Ch+Str]
.text:00404AC7                 mov     [ebp+20h], ebx
.text:00404ACA                 mov     ecx, [esp+5Ch+arg_18]
.text:00404ACE                 xor     ebx, ebx
.text:00404AD0                 mov     dword ptr [ebp+14h], 0
.text:00404AD7                 test    ecx, ecx
.text:00404AD9                 jz      loc_4055C0
.text:00404ADF
.text:00404ADF loc_404ADF:                             ; CODE XREF: sub_404A70+B64↓j
.text:00404ADF                 mov     ebx, 1
.text:00404AE4
.text:00404AE4 loc_404AE4:                             ; CODE XREF: sub_404A70+B5E↓j
.text:00404AE4                 mov     [ebp+1Ch], ebx
.text:00404AE7                 mov     ecx, [esp+5Ch+Str]
.text:00404AEB                 movzx   eax, byte ptr [ecx]
.text:00404AEE                 cmp     al, 2Dh ; '-'
.text:00404AF0                 jz      loc_4055B0
.text:00404AF6                 cmp     al, 2Bh ; '+'
.text:00404AF8                 jz      loc_405599
.text:00404AFE                 xor     edx, edx
.text:00404B00                 test    ebx, ebx
.text:00404B02                 setz    dl
.text:00404B05                 mov     [ebp+18h], edx
.text:00404B08
.text:00404B08 loc_404B08:                             ; CODE XREF: sub_404A70+B35↓j
.text:00404B08                 mov     [esp+5Ch+Str], esi
.text:00404B0C                 mov     dword ptr [ebp+10h], 1
.text:00404B13
.text:00404B13 loc_404B13:                             ; CODE XREF: sub_404A70+4A↑j
.text:00404B13                 mov     eax, [ebp+14h]
.text:00404B16                 test    eax, eax
.text:00404B18                 jz      short loc_404B23
.text:00404B1A                 cmp     byte ptr [eax], 0
.text:00404B1D                 jnz     loc_404C00
.text:00404B23
.text:00404B23 loc_404B23:                             ; CODE XREF: sub_404A70+A8↑j
.text:00404B23                 mov     ebx, [ebp+0]
.text:00404B26                 cmp     [ebp+24h], ebx
.text:00404B29                 jle     short loc_404B2E
.text:00404B2B                 mov     [ebp+24h], ebx
.text:00404B2E
.text:00404B2E loc_404B2E:                             ; CODE XREF: sub_404A70+B9↑j
.text:00404B2E                 cmp     [ebp+20h], ebx
.text:00404B31                 jle     short loc_404B36
.text:00404B33                 mov     [ebp+20h], ebx
.text:00404B36
.text:00404B36 loc_404B36:                             ; CODE XREF: sub_404A70+C1↑j
.text:00404B36                 cmp     dword ptr [ebp+18h], 1
.text:00404B3A                 jz      loc_405510
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404A70+B13↓j
.text:00404B40                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404B44                 jz      loc_4054F4
.text:00404B4A                 cld
.text:00404B4B                 mov     ecx, [esp+5Ch+arg_4]
.text:00404B4F                 mov     edx, 3
.text:00404B54                 mov     edi, offset dword_404820
.text:00404B59                 mov     esi, [ecx+ebx*4]
.text:00404B5C                 mov     ecx, edx
.text:00404B5E                 repe cmpsb
.text:00404B60                 jnz     short loc_404B9C
.text:00404B62                 mov     edx, [ebp+24h]
.text:00404B65                 lea     eax, [ebx+1]
.text:00404B68                 cmp     [ebp+20h], edx
.text:00404B6B                 mov     [ebp+0], eax
.text:00404B6E                 jz      loc_405508
.text:00404B74                 cmp     edx, eax
.text:00404B76                 jz      short loc_404B90
.text:00404B78                 mov     [esp+5Ch+Str2], ebp
.text:00404B7C                 mov     ebx, [esp+5Ch+arg_4]
.text:00404B80                 mov     [esp+5Ch+Str1], ebx
.text:00404B83                 call    sub_405720
.text:00404B88                 nop
.text:00404B89                 lea     esi, [esi+0]
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404A70+106↑j
.text:00404B90                                         ; sub_404A70+A9B↓j
.text:00404B90                 mov     eax, [esp+5Ch+arg_0]
.text:00404B94                 mov     ebx, eax
.text:00404B96                 mov     [ebp+24h], eax
.text:00404B99                 mov     [ebp+0], eax
.text:00404B9C
.text:00404B9C loc_404B9C:                             ; CODE XREF: sub_404A70+F0↑j
.text:00404B9C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00404BA0                 jz      loc_4054F4
.text:00404BA6                 mov     esi, [esp+5Ch+arg_4]
.text:00404BAA                 mov     eax, [esi+ebx*4]
.text:00404BAD                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00404BB0                 jz      short loc_404BD7
.text:00404BB2
.text:00404BB2 loc_404BB2:                             ; CODE XREF: sub_404A70+16D↓j
.text:00404BB2                 mov     edx, [ebp+18h]
.text:00404BB5                 test    edx, edx
.text:00404BB7                 jz      short loc_404BD0
.text:00404BB9                 mov     [ebp+0Ch], eax
.text:00404BBC                 lea     edi, [ebx+1]
.text:00404BBF                 mov     eax, 1
.text:00404BC4                 mov     [ebp+0], edi
.text:00404BC7
.text:00404BC7 loc_404BC7:                             ; CODE XREF: sub_404A70+2D↑j
.text:00404BC7                                         ; sub_404A70+165↓j ...
.text:00404BC7                 add     esp, 4Ch
.text:00404BCA                 pop     ebx
.text:00404BCB                 pop     esi
.text:00404BCC                 pop     edi
.text:00404BCD                 pop     ebp
.text:00404BCE                 retn
.text:00404BCE ; ---------------------------------------------------------------------------
.text:00404BCF                 align 10h
.text:00404BD0
.text:00404BD0 loc_404BD0:                             ; CODE XREF: sub_404A70+147↑j
.text:00404BD0                                         ; sub_404A70+A8A↓j ...
.text:00404BD0                 mov     eax, 0FFFFFFFFh
.text:00404BD5                 jmp     short loc_404BC7
.text:00404BD7 ; ---------------------------------------------------------------------------
.text:00404BD7
.text:00404BD7 loc_404BD7:                             ; CODE XREF: sub_404A70+140↑j
.text:00404BD7                 movzx   edx, byte ptr [eax+1]
.text:00404BDB                 test    dl, dl
.text:00404BDD                 jz      short loc_404BB2
.text:00404BDF                 mov     ebx, [esp+5Ch+arg_C]
.text:00404BE3                 xor     ecx, ecx
.text:00404BE5                 test    ebx, ebx
.text:00404BE7                 jz      short loc_404BF2
.text:00404BE9                 cmp     dl, 2Dh ; '-'
.text:00404BEC                 jz      loc_4054EA
.text:00404BF2
.text:00404BF2 loc_404BF2:                             ; CODE XREF: sub_404A70+177↑j
.text:00404BF2                                         ; sub_404A70+A7F↓j
.text:00404BF2                 lea     esi, [ecx+eax+1]
.text:00404BF6                 mov     [ebp+14h], esi
.text:00404BF9                 lea     esi, [esi+0]
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404A70+AD↑j
.text:00404C00                 mov     ecx, [esp+5Ch+arg_C]
.text:00404C04                 test    ecx, ecx
.text:00404C06                 jz      loc_404F90
.text:00404C0C                 mov     edx, [ebp+0]
.text:00404C0F                 mov     edi, [esp+5Ch+arg_4]
.text:00404C13                 mov     eax, [edi+edx*4]
.text:00404C16                 movzx   edx, byte ptr [eax+1]
.text:00404C1A                 cmp     dl, 2Dh ; '-'
.text:00404C1D                 jz      short loc_404C35
.text:00404C1F                 mov     ebx, [esp+5Ch+arg_14]
.text:00404C23                 test    ebx, ebx
.text:00404C25                 jz      loc_404F90
.text:00404C2B                 cmp     byte ptr [eax+2], 0
.text:00404C2F                 jz      loc_4054CA
.text:00404C35
.text:00404C35 loc_404C35:                             ; CODE XREF: sub_404A70+1AD↑j
.text:00404C35                                         ; sub_404A70+A75↓j
.text:00404C35                 mov     [esp+5Ch+var_18], 0
.text:00404C3D                 mov     ecx, [ebp+14h]
.text:00404C40                 mov     [esp+5Ch+var_1C], 0
.text:00404C48                 mov     [esp+5Ch+var_20], 0
.text:00404C50                 mov     edi, ecx
.text:00404C52                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00404C5A                 movzx   eax, byte ptr [ecx]
.text:00404C5D                 test    al, al
.text:00404C5F                 jz      short loc_404C7C
.text:00404C61                 cmp     al, 3Dh ; '='
.text:00404C63                 jz      short loc_404C7C
.text:00404C65                 lea     esi, [esi+0]
.text:00404C69                 lea     edi, [edi+0]
.text:00404C70
.text:00404C70 loc_404C70:                             ; CODE XREF: sub_404A70+20A↓j
.text:00404C70                 inc     edi
.text:00404C71                 movzx   eax, byte ptr [edi]
.text:00404C74                 test    al, al
.text:00404C76                 jz      short loc_404C7C
.text:00404C78                 cmp     al, 3Dh ; '='
.text:00404C7A                 jnz     short loc_404C70
.text:00404C7C
.text:00404C7C loc_404C7C:                             ; CODE XREF: sub_404A70+1EF↑j
.text:00404C7C                                         ; sub_404A70+1F3↑j ...
.text:00404C7C                 mov     [esp+5Ch+var_28], 0
.text:00404C84                 mov     esi, [esp+5Ch+arg_C]
.text:00404C88                 mov     ebx, [esi]
.text:00404C8A                 test    ebx, ebx
.text:00404C8C                 mov     edx, ebx
.text:00404C8E                 jz      loc_404EB0
.text:00404C94                 lea     esi, [esi+0]
.text:00404C9A                 lea     edi, [edi+0]
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_404A70+25E↓j
.text:00404CA0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00404CA4                 mov     ebx, edi
.text:00404CA6                 sub     ebx, ecx
.text:00404CA8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00404CAC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00404CAF                 call    strncmp
.text:00404CB4                 test    eax, eax
.text:00404CB6                 jz      loc_405446
.text:00404CBC
.text:00404CBC loc_404CBC:                             ; CODE XREF: sub_404A70+A0F↓j
.text:00404CBC                                         ; sub_404A70+A24↓j ...
.text:00404CBC                 inc     [esp+5Ch+var_28]
.text:00404CC0                 add     esi, 10h
.text:00404CC3                 mov     ecx, [esi]
.text:00404CC5                 test    ecx, ecx
.text:00404CC7                 mov     edx, ecx
.text:00404CC9                 jz      short loc_404CD0
.text:00404CCB                 mov     ecx, [ebp+14h]
.text:00404CCE                 jmp     short loc_404CA0
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD0
.text:00404CD0 loc_404CD0:                             ; CODE XREF: sub_404A70+259↑j
.text:00404CD0                                         ; sub_404A70+A55↓j
.text:00404CD0                 mov     esi, [esp+5Ch+var_20]
.text:00404CD4                 test    esi, esi
.text:00404CD6                 jz      short loc_404CE4
.text:00404CD8                 mov     edx, [esp+5Ch+var_1C]
.text:00404CDC                 test    edx, edx
.text:00404CDE                 jz      loc_4053F0
.text:00404CE4
.text:00404CE4 loc_404CE4:                             ; CODE XREF: sub_404A70+266↑j
.text:00404CE4                 mov     eax, [esp+5Ch+var_18]
.text:00404CE8                 test    eax, eax
.text:00404CEA                 jz      loc_404EB0
.text:00404CF0                 mov     ecx, [ebp+0]
.text:00404CF3                 lea     eax, [ecx+1]
.text:00404CF6                 mov     [ebp+0], eax
.text:00404CF9                 cmp     byte ptr [edi], 0
.text:00404CFC                 jz      loc_404E10
.text:00404D02                 mov     ecx, [esp+5Ch+var_18]
.text:00404D06                 mov     esi, [ecx+4]
.text:00404D09                 test    esi, esi
.text:00404D0B                 jz      short loc_404D56
.text:00404D0D                 lea     ebx, [edi+1]
.text:00404D10                 mov     [ebp+0Ch], ebx
.text:00404D13
.text:00404D13 loc_404D13:                             ; CODE XREF: sub_404A70+3A8↓j
.text:00404D13                                         ; sub_404A70+3C4↓j
.text:00404D13                 mov     ebx, [ebp+14h]
.text:00404D16                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00404D19                 call    strlen
.text:00404D1E                 add     [ebp+14h], eax
.text:00404D21                 mov     esi, [esp+5Ch+arg_10]
.text:00404D25                 test    esi, esi
.text:00404D27                 jz      short loc_404D33
.text:00404D29                 mov     ebp, [esp+5Ch+var_24]
.text:00404D2D                 mov     ecx, [esp+5Ch+arg_10]
.text:00404D31                 mov     [ecx], ebp
.text:00404D33
.text:00404D33 loc_404D33:                             ; CODE XREF: sub_404A70+2B7↑j
.text:00404D33                 mov     eax, [esp+5Ch+var_18]
.text:00404D37                 mov     ecx, [eax+8]
.text:00404D3A                 test    ecx, ecx
.text:00404D3C                 jnz     short loc_404D4A
.text:00404D3E                 mov     ecx, [esp+5Ch+var_18]
.text:00404D42
.text:00404D42 loc_404D42:                             ; CODE XREF: sub_404A70+723↓j
.text:00404D42                 mov     eax, [ecx+0Ch]
.text:00404D45                 jmp     loc_404BC7
.text:00404D4A ; ---------------------------------------------------------------------------
.text:00404D4A
.text:00404D4A loc_404D4A:                             ; CODE XREF: sub_404A70+2CC↑j
.text:00404D4A                                         ; sub_404A70+719↓j
.text:00404D4A                 mov     esi, [eax+0Ch]
.text:00404D4D                 xor     eax, eax
.text:00404D4F                 mov     [ecx], esi
.text:00404D51                 jmp     loc_404BC7
.text:00404D56 ; ---------------------------------------------------------------------------
.text:00404D56
.text:00404D56 loc_404D56:                             ; CODE XREF: sub_404A70+29B↑j
.text:00404D56                 mov     edi, [esp+5Ch+var_14]
.text:00404D5A                 test    edi, edi
.text:00404D5C                 jz      short loc_404DB0
.text:00404D5E                 mov     esi, [esp+5Ch+arg_4]
.text:00404D62                 mov     edx, [esi+eax*4-4]
.text:00404D66                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00404D6A                 jz      short loc_404DD2
.text:00404D6C                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00404D73                 call    ds:libintl_gettext
.text:00404D79                 mov     edx, [esp+5Ch+var_18]
.text:00404D7D                 mov     edi, [edx]
.text:00404D7F                 mov     [esp+5Ch+var_4C], edi
.text:00404D83                 mov     ebx, [ebp+0]
.text:00404D86                 mov     edi, [esp+5Ch+arg_4]
.text:00404D8A                 mov     ecx, [edi+ebx*4-4]
.text:00404D8E                 movsx   esi, byte ptr [ecx]
.text:00404D91                 mov     ecx, ds:_iob
.text:00404D97                 add     ecx, 40h ; '@'
.text:00404D9A                 mov     [esp+5Ch+var_50], esi
.text:00404D9E                 mov     ebx, [edi]
.text:00404DA0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404DA4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404DA7                 mov     [esp+5Ch+MaxCount], ebx
.text:00404DAB                 call    fprintf
.text:00404DB0
.text:00404DB0 loc_404DB0:                             ; CODE XREF: sub_404A70+2EC↑j
.text:00404DB0                                         ; sub_404A70+398↓j
.text:00404DB0                 mov     ecx, [ebp+14h]
.text:00404DB3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404DB6                 call    strlen
.text:00404DBB                 add     [ebp+14h], eax
.text:00404DBE                 mov     eax, [esp+5Ch+var_18]
.text:00404DC2                 mov     esi, [eax+0Ch]
.text:00404DC5                 mov     [ebp+8], esi
.text:00404DC8
.text:00404DC8 loc_404DC8:                             ; CODE XREF: sub_404A70+4E5↓j
.text:00404DC8                                         ; sub_404A70+73E↓j ...
.text:00404DC8                 mov     eax, 3Fh ; '?'
.text:00404DCD                 jmp     loc_404BC7
.text:00404DD2 ; ---------------------------------------------------------------------------
.text:00404DD2
.text:00404DD2 loc_404DD2:                             ; CODE XREF: sub_404A70+2FA↑j
.text:00404DD2                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00404DD9                 call    ds:libintl_gettext
.text:00404DDF                 mov     edx, [esp+5Ch+var_18]
.text:00404DE3                 mov     edi, [esp+5Ch+arg_4]
.text:00404DE7                 mov     ecx, ds:_iob
.text:00404DED                 mov     esi, [edx]
.text:00404DEF                 add     ecx, 40h ; '@'
.text:00404DF2                 mov     [esp+5Ch+var_50], esi
.text:00404DF6                 mov     ebx, [edi]
.text:00404DF8                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404DFC                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404DFF                 mov     [esp+5Ch+MaxCount], ebx
.text:00404E03                 call    fprintf
.text:00404E08                 jmp     short loc_404DB0
.text:00404E08 ; ---------------------------------------------------------------------------
.text:00404E0A                 align 10h
.text:00404E10
.text:00404E10 loc_404E10:                             ; CODE XREF: sub_404A70+28C↑j
.text:00404E10                 mov     ebx, [esp+5Ch+var_18]
.text:00404E14                 cmp     dword ptr [ebx+4], 1
.text:00404E18                 jnz     loc_404D13
.text:00404E1E                 cmp     eax, [esp+5Ch+arg_0]
.text:00404E22                 jge     short loc_404E39
.text:00404E24                 mov     ebx, [esp+5Ch+arg_4]
.text:00404E28                 lea     edi, [ecx+2]
.text:00404E2B                 mov     [ebp+0], edi
.text:00404E2E                 mov     esi, [ebx+eax*4]
.text:00404E31                 mov     [ebp+0Ch], esi
.text:00404E34                 jmp     loc_404D13
.text:00404E39 ; ---------------------------------------------------------------------------
.text:00404E39
.text:00404E39 loc_404E39:                             ; CODE XREF: sub_404A70+3B2↑j
.text:00404E39                 mov     edx, [esp+5Ch+var_14]
.text:00404E3D                 test    edx, edx
.text:00404E3F                 jnz     short loc_404E70
.text:00404E41
.text:00404E41 loc_404E41:                             ; CODE XREF: sub_404A70+437↓j
.text:00404E41                 mov     edx, [ebp+14h]
.text:00404E44                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404E47                 call    strlen
.text:00404E4C                 add     [ebp+14h], eax
.text:00404E4F                 mov     eax, [esp+5Ch+var_18]
.text:00404E53                 mov     edi, [eax+0Ch]
.text:00404E56                 mov     [ebp+8], edi
.text:00404E59
.text:00404E59 loc_404E59:                             ; CODE XREF: sub_404A70+7C2↓j
.text:00404E59                 mov     ebp, [esp+5Ch+Str]
.text:00404E5D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00404E61                 setnz   bl
.text:00404E64                 movzx   esi, bl
.text:00404E67                 lea     eax, [esi+esi*4+3Ah]
.text:00404E6B                 jmp     loc_404BC7
.text:00404E70 ; ---------------------------------------------------------------------------
.text:00404E70
.text:00404E70 loc_404E70:                             ; CODE XREF: sub_404A70+3CF↑j
.text:00404E70                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00404E77                 call    ds:libintl_gettext
.text:00404E7D                 mov     ecx, [ebp+0]
.text:00404E80                 mov     esi, [esp+5Ch+arg_4]
.text:00404E84                 mov     ebx, [esi+ecx*4-4]
.text:00404E88                 mov     ecx, ds:_iob
.text:00404E8E                 mov     [esp+5Ch+var_50], ebx
.text:00404E92                 mov     edi, [esi]
.text:00404E94                 add     ecx, 40h ; '@'
.text:00404E97                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404E9B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00404E9E                 mov     [esp+5Ch+MaxCount], edi
.text:00404EA2                 call    fprintf
.text:00404EA7                 jmp     short loc_404E41
.text:00404EA7 ; ---------------------------------------------------------------------------
.text:00404EA9                 align 10h
.text:00404EB0
.text:00404EB0 loc_404EB0:                             ; CODE XREF: sub_404A70+21E↑j
.text:00404EB0                                         ; sub_404A70+27A↑j
.text:00404EB0                 mov     eax, [esp+5Ch+arg_14]
.text:00404EB4                 test    eax, eax
.text:00404EB6                 jz      short loc_404EE6
.text:00404EB8                 mov     ebx, [ebp+0]
.text:00404EBB                 mov     esi, [esp+5Ch+arg_4]
.text:00404EBF                 mov     edi, [esi+ebx*4]
.text:00404EC2                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404EC6                 jz      short loc_404EE9
.text:00404EC8                 mov     ecx, [ebp+14h]
.text:00404ECB                 mov     edx, [esp+5Ch+Str]
.text:00404ECF                 movsx   ebx, byte ptr [ecx]
.text:00404ED2                 mov     [esp+5Ch+Str1], edx ; Str
.text:00404ED5                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00404ED9                 call    strchr
.text:00404EDE                 test    eax, eax
.text:00404EE0                 jnz     loc_404F90
.text:00404EE6
.text:00404EE6 loc_404EE6:                             ; CODE XREF: sub_404A70+446↑j
.text:00404EE6                 mov     ebx, [ebp+0]
.text:00404EE9
.text:00404EE9 loc_404EE9:                             ; CODE XREF: sub_404A70+456↑j
.text:00404EE9                 mov     eax, [esp+5Ch+var_14]
.text:00404EED                 test    eax, eax
.text:00404EEF                 jz      short loc_404F41
.text:00404EF1                 mov     esi, [esp+5Ch+arg_4]
.text:00404EF5                 mov     edi, [esi+ebx*4]
.text:00404EF8                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00404EFC                 jz      short loc_404F5A
.text:00404EFE                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00404F05                 call    ds:libintl_gettext
.text:00404F0B                 mov     edi, [ebp+14h]
.text:00404F0E                 mov     [esp+5Ch+var_4C], edi
.text:00404F12                 mov     ebx, [ebp+0]
.text:00404F15                 mov     edi, [esp+5Ch+arg_4]
.text:00404F19                 mov     esi, [edi+ebx*4]
.text:00404F1C                 movsx   ecx, byte ptr [esi]
.text:00404F1F                 mov     esi, ds:_iob
.text:00404F25                 add     esi, 40h ; '@'
.text:00404F28                 mov     [esp+5Ch+var_50], ecx
.text:00404F2C                 mov     ebx, [edi]
.text:00404F2E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404F32                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00404F35                 mov     [esp+5Ch+MaxCount], ebx
.text:00404F39                 call    fprintf
.text:00404F3E
.text:00404F3E loc_404F3E:                             ; CODE XREF: sub_404A70+51D↓j
.text:00404F3E                 mov     ebx, [ebp+0]
.text:00404F41
.text:00404F41 loc_404F41:                             ; CODE XREF: sub_404A70+47F↑j
.text:00404F41                 mov     dword ptr [ebp+14h], offset dword_404920
.text:00404F48                 lea     edx, [ebx+1]
.text:00404F4B                 mov     [ebp+0], edx
.text:00404F4E
.text:00404F4E loc_404F4E:                             ; CODE XREF: sub_404A70+999↓j
.text:00404F4E                 mov     dword ptr [ebp+8], 0
.text:00404F55                 jmp     loc_404DC8
.text:00404F5A ; ---------------------------------------------------------------------------
.text:00404F5A
.text:00404F5A loc_404F5A:                             ; CODE XREF: sub_404A70+48C↑j
.text:00404F5A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00404F61                 call    ds:libintl_gettext
.text:00404F67                 mov     ecx, [ebp+14h]
.text:00404F6A                 mov     edi, [esp+5Ch+arg_4]
.text:00404F6E                 mov     edx, ds:_iob
.text:00404F74                 mov     [esp+5Ch+var_50], ecx
.text:00404F78                 mov     ebx, [edi]
.text:00404F7A                 add     edx, 40h ; '@'
.text:00404F7D                 mov     [esp+5Ch+Str2], eax ; Format
.text:00404F81                 mov     [esp+5Ch+MaxCount], ebx
.text:00404F85                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00404F88                 call    fprintf
.text:00404F8D                 jmp     short loc_404F3E
.text:00404F8D ; ---------------------------------------------------------------------------
.text:00404F8F                 align 10h
.text:00404F90
.text:00404F90 loc_404F90:                             ; CODE XREF: sub_404A70+196↑j
.text:00404F90                                         ; sub_404A70+1B5↑j ...
.text:00404F90                 mov     esi, [ebp+14h]
.text:00404F93                 movzx   ebx, byte ptr [esi]
.text:00404F96                 inc     esi
.text:00404F97                 mov     [ebp+14h], esi
.text:00404F9A                 mov     ecx, [esp+5Ch+Str]
.text:00404F9E                 movsx   esi, bl
.text:00404FA1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00404FA5                 mov     edi, esi
.text:00404FA7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00404FAA                 call    strchr
.text:00404FAF                 mov     ecx, [ebp+14h]
.text:00404FB2                 cmp     byte ptr [ecx], 0
.text:00404FB5                 jnz     short loc_404FBA
.text:00404FB7                 inc     dword ptr [ebp+0]
.text:00404FBA
.text:00404FBA loc_404FBA:                             ; CODE XREF: sub_404A70+545↑j
.text:00404FBA                 test    eax, eax
.text:00404FBC                 jz      loc_4053A0
.text:00404FC2                 cmp     bl, 3Ah ; ':'
.text:00404FC5                 jz      loc_4053A0
.text:00404FCB                 cmp     byte ptr [eax], 57h ; 'W'
.text:00404FCE                 jz      loc_405086
.text:00404FD4                 movzx   edx, byte ptr [eax+1]
.text:00404FD8
.text:00404FD8 loc_404FD8:                             ; CODE XREF: sub_404A70+61D↓j
.text:00404FD8                 cmp     dl, 3Ah ; ':'
.text:00404FDB                 jz      short loc_404FE4
.text:00404FDD
.text:00404FDD loc_404FDD:                             ; CODE XREF: sub_404A70+590↓j
.text:00404FDD                 mov     eax, esi
.text:00404FDF                 jmp     loc_404BC7
.text:00404FE4 ; ---------------------------------------------------------------------------
.text:00404FE4
.text:00404FE4 loc_404FE4:                             ; CODE XREF: sub_404A70+56B↑j
.text:00404FE4                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00404FE8                 jz      loc_405071
.text:00404FEE                 cmp     byte ptr [ecx], 0
.text:00404FF1                 jz      short loc_405002
.text:00404FF3
.text:00404FF3 loc_404FF3:                             ; CODE XREF: sub_404A70+604↓j
.text:00404FF3                 inc     dword ptr [ebp+0]
.text:00404FF6                 mov     [ebp+0Ch], ecx
.text:00404FF9
.text:00404FF9 loc_404FF9:                             ; CODE XREF: sub_404A70+5AB↓j
.text:00404FF9                                         ; sub_404A70+5C6↓j ...
.text:00404FF9                 mov     dword ptr [ebp+14h], 0
.text:00405000                 jmp     short loc_404FDD
.text:00405002 ; ---------------------------------------------------------------------------
.text:00405002
.text:00405002 loc_405002:                             ; CODE XREF: sub_404A70+581↑j
.text:00405002                 mov     ecx, [ebp+0]
.text:00405005                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405009                 jz      short loc_40501D
.text:0040500B                 mov     eax, [esp+5Ch+arg_4]
.text:0040500F                 lea     edx, [ecx+1]
.text:00405012                 mov     [ebp+0], edx
.text:00405015                 mov     ebx, [eax+ecx*4]
.text:00405018                 mov     [ebp+0Ch], ebx
.text:0040501B                 jmp     short loc_404FF9
.text:0040501D ; ---------------------------------------------------------------------------
.text:0040501D
.text:0040501D loc_40501D:                             ; CODE XREF: sub_404A70+599↑j
.text:0040501D                 mov     ecx, [esp+5Ch+var_14]
.text:00405021                 test    ecx, ecx
.text:00405023                 jnz     short loc_40503F
.text:00405025
.text:00405025 loc_405025:                             ; CODE XREF: sub_404A70+5FF↓j
.text:00405025                 mov     [ebp+8], edi
.text:00405028                 mov     edi, [esp+5Ch+Str]
.text:0040502C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040502F                 jz      short loc_405038
.text:00405031                 mov     esi, 3Fh ; '?'
.text:00405036                 jmp     short loc_404FF9
.text:00405038 ; ---------------------------------------------------------------------------
.text:00405038
.text:00405038 loc_405038:                             ; CODE XREF: sub_404A70+5BF↑j
.text:00405038                 mov     esi, 3Ah ; ':'
.text:0040503D                 jmp     short loc_404FF9
.text:0040503F ; ---------------------------------------------------------------------------
.text:0040503F
.text:0040503F loc_40503F:                             ; CODE XREF: sub_404A70+5B3↑j
.text:0040503F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405046                 call    ds:libintl_gettext
.text:0040504C                 mov     [esp+5Ch+var_50], edi
.text:00405050                 mov     ebx, [esp+5Ch+arg_4]
.text:00405054                 mov     edx, ds:_iob
.text:0040505A                 mov     esi, [ebx]
.text:0040505C                 add     edx, 40h ; '@'
.text:0040505F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405063                 mov     [esp+5Ch+MaxCount], esi
.text:00405067                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040506A                 call    fprintf
.text:0040506F                 jmp     short loc_405025
.text:00405071 ; ---------------------------------------------------------------------------
.text:00405071
.text:00405071 loc_405071:                             ; CODE XREF: sub_404A70+578↑j
.text:00405071                 cmp     byte ptr [ecx], 0
.text:00405074                 jnz     loc_404FF3
.text:0040507A                 mov     dword ptr [ebp+0Ch], 0
.text:00405081                 jmp     loc_404FF9
.text:00405086 ; ---------------------------------------------------------------------------
.text:00405086
.text:00405086 loc_405086:                             ; CODE XREF: sub_404A70+55E↑j
.text:00405086                 movzx   edx, byte ptr [eax+1]
.text:0040508A                 cmp     dl, 3Bh ; ';'
.text:0040508D                 jnz     loc_404FD8
.text:00405093                 mov     [esp+5Ch+var_2C], 0
.text:0040509B                 mov     [esp+5Ch+var_30], 0
.text:004050A3                 mov     [esp+5Ch+var_34], 0
.text:004050AB                 mov     [esp+5Ch+var_38], 0
.text:004050B3                 cmp     byte ptr [ecx], 0
.text:004050B6                 jz      loc_40532B
.text:004050BC                 inc     dword ptr [ebp+0]
.text:004050BF                 mov     [ebp+0Ch], ecx
.text:004050C2
.text:004050C2 loc_4050C2:                             ; CODE XREF: sub_404A70+8D4↓j
.text:004050C2                 mov     edi, [ebp+0Ch]
.text:004050C5                 mov     [ebp+14h], edi
.text:004050C8                 movzx   eax, byte ptr [edi]
.text:004050CB                 test    al, al
.text:004050CD                 jz      short loc_4050DF
.text:004050CF                 cmp     al, 3Dh ; '='
.text:004050D1                 jz      short loc_4050DF
.text:004050D3
.text:004050D3 loc_4050D3:                             ; CODE XREF: sub_404A70+66D↓j
.text:004050D3                 inc     edi
.text:004050D4                 movzx   eax, byte ptr [edi]
.text:004050D7                 test    al, al
.text:004050D9                 jz      short loc_4050DF
.text:004050DB                 cmp     al, 3Dh ; '='
.text:004050DD                 jnz     short loc_4050D3
.text:004050DF
.text:004050DF loc_4050DF:                             ; CODE XREF: sub_404A70+65D↑j
.text:004050DF                                         ; sub_404A70+661↑j ...
.text:004050DF                 mov     [esp+5Ch+var_3C], 0
.text:004050E7                 mov     esi, [esp+5Ch+arg_C]
.text:004050EB                 mov     eax, [esi]
.text:004050ED                 test    eax, eax
.text:004050EF                 jz      loc_405270
.text:004050F5                 mov     ecx, eax
.text:004050F7
.text:004050F7 loc_4050F7:                             ; CODE XREF: sub_404A70+6B3↓j
.text:004050F7                 mov     ebx, [ebp+14h]
.text:004050FA                 mov     eax, edi
.text:004050FC                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:004050FF                 sub     eax, ebx
.text:00405101                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00405105                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00405109                 call    strncmp
.text:0040510E                 test    eax, eax
.text:00405110                 jz      loc_4052D7
.text:00405116
.text:00405116 loc_405116:                             ; CODE XREF: sub_404A70+88C↓j
.text:00405116                                         ; sub_404A70+89D↓j
.text:00405116                 inc     [esp+5Ch+var_3C]
.text:0040511A                 add     esi, 10h
.text:0040511D                 mov     edx, [esi]
.text:0040511F                 test    edx, edx
.text:00405121                 mov     ecx, edx
.text:00405123                 jnz     short loc_4050F7
.text:00405125
.text:00405125 loc_405125:                             ; CODE XREF: sub_404A70+8B6↓j
.text:00405125                 mov     esi, [esp+5Ch+var_34]
.text:00405129                 test    esi, esi
.text:0040512B                 jz      short loc_405139
.text:0040512D                 mov     ebx, [esp+5Ch+var_30]
.text:00405131                 test    ebx, ebx
.text:00405133                 jz      loc_405281
.text:00405139
.text:00405139 loc_405139:                             ; CODE XREF: sub_404A70+6BB↑j
.text:00405139                 mov     esi, [esp+5Ch+var_2C]
.text:0040513D                 test    esi, esi
.text:0040513F                 jz      loc_405270
.text:00405145                 cmp     byte ptr [edi], 0
.text:00405148                 jz      loc_4051F0
.text:0040514E                 mov     ecx, [esp+5Ch+var_2C]
.text:00405152                 mov     ebx, [ecx+4]
.text:00405155                 test    ebx, ebx
.text:00405157                 jz      short loc_405198
.text:00405159                 lea     edx, [edi+1]
.text:0040515C                 mov     [ebp+0Ch], edx
.text:0040515F
.text:0040515F loc_40515F:                             ; CODE XREF: sub_404A70+788↓j
.text:0040515F                                         ; sub_404A70+7A7↓j
.text:0040515F                 mov     edi, [ebp+14h]
.text:00405162                 mov     [esp+5Ch+Str1], edi ; Str
.text:00405165                 call    strlen
.text:0040516A                 add     [ebp+14h], eax
.text:0040516D                 mov     eax, [esp+5Ch+arg_10]
.text:00405171                 test    eax, eax
.text:00405173                 jz      short loc_405180
.text:00405175                 mov     edx, [esp+5Ch+var_38]
.text:00405179                 mov     ebp, [esp+5Ch+arg_10]
.text:0040517D                 mov     [ebp+0], edx
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: sub_404A70+703↑j
.text:00405180                 mov     eax, [esp+5Ch+var_2C]
.text:00405184                 mov     ecx, [eax+8]
.text:00405187                 test    ecx, ecx
.text:00405189                 jnz     loc_404D4A
.text:0040518F                 mov     ecx, [esp+5Ch+var_2C]
.text:00405193                 jmp     loc_404D42
.text:00405198 ; ---------------------------------------------------------------------------
.text:00405198
.text:00405198 loc_405198:                             ; CODE XREF: sub_404A70+6E7↑j
.text:00405198                 mov     eax, [esp+5Ch+var_14]
.text:0040519C                 test    eax, eax
.text:0040519E                 jnz     short loc_4051B3
.text:004051A0
.text:004051A0 loc_4051A0:                             ; CODE XREF: sub_404A70+779↓j
.text:004051A0                 mov     ecx, [ebp+14h]
.text:004051A3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004051A6                 call    strlen
.text:004051AB                 add     [ebp+14h], eax
.text:004051AE                 jmp     loc_404DC8
.text:004051B3 ; ---------------------------------------------------------------------------
.text:004051B3
.text:004051B3 loc_4051B3:                             ; CODE XREF: sub_404A70+72E↑j
.text:004051B3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004051BA                 call    ds:libintl_gettext
.text:004051C0                 mov     edx, [esp+5Ch+var_2C]
.text:004051C4                 mov     ebx, [esp+5Ch+arg_4]
.text:004051C8                 mov     edi, [edx]
.text:004051CA                 mov     [esp+5Ch+var_50], edi
.text:004051CE                 mov     edi, ds:_iob
.text:004051D4                 mov     esi, [ebx]
.text:004051D6                 mov     [esp+5Ch+Str2], eax ; Format
.text:004051DA                 add     edi, 40h ; '@'
.text:004051DD                 mov     [esp+5Ch+MaxCount], esi
.text:004051E1                 mov     [esp+5Ch+Str1], edi ; Stream
.text:004051E4                 call    fprintf
.text:004051E9                 jmp     short loc_4051A0
.text:004051E9 ; ---------------------------------------------------------------------------
.text:004051EB                 align 10h
.text:004051F0
.text:004051F0 loc_4051F0:                             ; CODE XREF: sub_404A70+6D8↑j
.text:004051F0                 mov     esi, [esp+5Ch+var_2C]
.text:004051F4                 cmp     dword ptr [esi+4], 1
.text:004051F8                 jnz     loc_40515F
.text:004051FE                 mov     ecx, [ebp+0]
.text:00405201                 cmp     ecx, [esp+5Ch+arg_0]
.text:00405205                 jge     short loc_40521C
.text:00405207                 mov     eax, [esp+5Ch+arg_4]
.text:0040520B                 lea     ebx, [ecx+1]
.text:0040520E                 mov     [ebp+0], ebx
.text:00405211                 mov     edi, [eax+ecx*4]
.text:00405214                 mov     [ebp+0Ch], edi
.text:00405217                 jmp     loc_40515F
.text:0040521C ; ---------------------------------------------------------------------------
.text:0040521C
.text:0040521C loc_40521C:                             ; CODE XREF: sub_404A70+795↑j
.text:0040521C                 mov     edx, [esp+5Ch+var_14]
.text:00405220                 test    edx, edx
.text:00405222                 jnz     short loc_405237
.text:00405224
.text:00405224 loc_405224:                             ; CODE XREF: sub_404A70+7FE↓j
.text:00405224                 mov     edx, [ebp+14h]
.text:00405227                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040522A                 call    strlen
.text:0040522F                 add     [ebp+14h], eax
.text:00405232                 jmp     loc_404E59
.text:00405237 ; ---------------------------------------------------------------------------
.text:00405237
.text:00405237 loc_405237:                             ; CODE XREF: sub_404A70+7B2↑j
.text:00405237                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040523E                 call    ds:libintl_gettext
.text:00405244                 mov     ecx, [ebp+0]
.text:00405247                 mov     ebx, [esp+5Ch+arg_4]
.text:0040524B                 mov     edi, [ebx+ecx*4-4]
.text:0040524F                 mov     ecx, ds:_iob
.text:00405255                 mov     [esp+5Ch+var_50], edi
.text:00405259                 mov     esi, [ebx]
.text:0040525B                 add     ecx, 40h ; '@'
.text:0040525E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405262                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405265                 mov     [esp+5Ch+MaxCount], esi
.text:00405269                 call    fprintf
.text:0040526E                 jmp     short loc_405224
.text:00405270 ; ---------------------------------------------------------------------------
.text:00405270
.text:00405270 loc_405270:                             ; CODE XREF: sub_404A70+67F↑j
.text:00405270                                         ; sub_404A70+6CF↑j
.text:00405270                 mov     dword ptr [ebp+14h], 0
.text:00405277                 mov     eax, 57h ; 'W'
.text:0040527C                 jmp     loc_404BC7
.text:00405281 ; ---------------------------------------------------------------------------
.text:00405281
.text:00405281 loc_405281:                             ; CODE XREF: sub_404A70+6C3↑j
.text:00405281                 mov     edi, [esp+5Ch+var_14]
.text:00405285                 test    edi, edi
.text:00405287                 jnz     short loc_40529F
.text:00405289
.text:00405289 loc_405289:                             ; CODE XREF: sub_404A70+865↓j
.text:00405289                 mov     edx, [ebp+14h]
.text:0040528C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040528F                 call    strlen
.text:00405294                 add     [ebp+14h], eax
.text:00405297                 inc     dword ptr [ebp+0]
.text:0040529A                 jmp     loc_404DC8
.text:0040529F ; ---------------------------------------------------------------------------
.text:0040529F
.text:0040529F loc_40529F:                             ; CODE XREF: sub_404A70+817↑j
.text:0040529F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004052A6                 call    ds:libintl_gettext
.text:004052AC                 mov     ecx, [ebp+0]
.text:004052AF                 mov     ebx, [esp+5Ch+arg_4]
.text:004052B3                 mov     edi, [ebx+ecx*4]
.text:004052B6                 mov     ecx, ds:_iob
.text:004052BC                 mov     [esp+5Ch+var_50], edi
.text:004052C0                 mov     esi, [ebx]
.text:004052C2                 add     ecx, 40h ; '@'
.text:004052C5                 mov     [esp+5Ch+Str2], eax ; Format
.text:004052C9                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004052CC                 mov     [esp+5Ch+MaxCount], esi
.text:004052D0                 call    fprintf
.text:004052D5                 jmp     short loc_405289
.text:004052D7 ; ---------------------------------------------------------------------------
.text:004052D7
.text:004052D7 loc_4052D7:                             ; CODE XREF: sub_404A70+6A0↑j
.text:004052D7                 mov     edx, [ebp+14h]
.text:004052DA                 mov     ebx, edi
.text:004052DC                 mov     ecx, [esi]
.text:004052DE                 sub     ebx, edx
.text:004052E0                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004052E3                 call    strlen
.text:004052E8                 cmp     ebx, eax
.text:004052EA                 jz      short loc_405312
.text:004052EC                 mov     ebx, [esp+5Ch+var_2C]
.text:004052F0                 test    ebx, ebx
.text:004052F2                 jz      short loc_405301
.text:004052F4                 mov     [esp+5Ch+var_34], 1
.text:004052FC                 jmp     loc_405116
.text:00405301 ; ---------------------------------------------------------------------------
.text:00405301
.text:00405301 loc_405301:                             ; CODE XREF: sub_404A70+882↑j
.text:00405301                 mov     [esp+5Ch+var_2C], esi
.text:00405305                 mov     ecx, [esp+5Ch+var_3C]
.text:00405309                 mov     [esp+5Ch+var_38], ecx
.text:0040530D                 jmp     loc_405116
.text:00405312 ; ---------------------------------------------------------------------------
.text:00405312
.text:00405312 loc_405312:                             ; CODE XREF: sub_404A70+87A↑j
.text:00405312                 mov     [esp+5Ch+var_2C], esi
.text:00405316                 mov     eax, [esp+5Ch+var_3C]
.text:0040531A                 mov     [esp+5Ch+var_30], 1
.text:00405322                 mov     [esp+5Ch+var_38], eax
.text:00405326                 jmp     loc_405125
.text:0040532B ; ---------------------------------------------------------------------------
.text:0040532B
.text:0040532B loc_40532B:                             ; CODE XREF: sub_404A70+646↑j
.text:0040532B                 mov     edx, [ebp+0]
.text:0040532E                 cmp     edx, [esp+5Ch+arg_0]
.text:00405332                 jz      short loc_405349
.text:00405334                 mov     ebx, [esp+5Ch+arg_4]
.text:00405338                 lea     esi, [edx+1]
.text:0040533B                 mov     [ebp+0], esi
.text:0040533E                 mov     edi, [ebx+edx*4]
.text:00405341                 mov     [ebp+0Ch], edi
.text:00405344                 jmp     loc_4050C2
.text:00405349 ; ---------------------------------------------------------------------------
.text:00405349
.text:00405349 loc_405349:                             ; CODE XREF: sub_404A70+8C2↑j
.text:00405349                 mov     edi, [esp+5Ch+var_14]
.text:0040534D                 test    edi, edi
.text:0040534F                 jnz     short loc_40536C
.text:00405351
.text:00405351 loc_405351:                             ; CODE XREF: sub_404A70+92C↓j
.text:00405351                 mov     [ebp+8], esi
.text:00405354                 mov     ebp, [esp+5Ch+Str]
.text:00405358                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040535C                 jz      short loc_405368
.text:0040535E                 mov     bl, 3Fh ; '?'
.text:00405360
.text:00405360 loc_405360:                             ; CODE XREF: sub_404A70+8FA↓j
.text:00405360                 movsx   eax, bl
.text:00405363                 jmp     loc_404BC7
.text:00405368 ; ---------------------------------------------------------------------------
.text:00405368
.text:00405368 loc_405368:                             ; CODE XREF: sub_404A70+8EC↑j
.text:00405368                 mov     bl, 3Ah ; ':'
.text:0040536A                 jmp     short loc_405360
.text:0040536C ; ---------------------------------------------------------------------------
.text:0040536C
.text:0040536C loc_40536C:                             ; CODE XREF: sub_404A70+8DF↑j
.text:0040536C                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00405373                 call    ds:libintl_gettext
.text:00405379                 mov     [esp+5Ch+var_50], esi
.text:0040537D                 mov     edx, [esp+5Ch+arg_4]
.text:00405381                 mov     ecx, ds:_iob
.text:00405387                 mov     ebx, [edx]
.text:00405389                 add     ecx, 40h ; '@'
.text:0040538C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405390                 mov     [esp+5Ch+MaxCount], ebx
.text:00405394                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00405397                 call    fprintf
.text:0040539C                 jmp     short loc_405351
.text:0040539C ; ---------------------------------------------------------------------------
.text:0040539E                 align 10h
.text:004053A0
.text:004053A0 loc_4053A0:                             ; CODE XREF: sub_404A70+54C↑j
.text:004053A0                                         ; sub_404A70+555↑j
.text:004053A0                 mov     eax, [esp+5Ch+var_14]
.text:004053A4                 test    eax, eax
.text:004053A6                 jz      short loc_4053DF
.text:004053A8                 mov     ebx, [ebp+1Ch]
.text:004053AB                 test    ebx, ebx
.text:004053AD                 jz      short loc_4053E7
.text:004053AF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004053B6
.text:004053B6 loc_4053B6:                             ; CODE XREF: sub_404A70+97E↓j
.text:004053B6                 call    ds:libintl_gettext
.text:004053BC                 mov     [esp+5Ch+var_50], esi
.text:004053C0                 mov     ebx, [esp+5Ch+arg_4]
.text:004053C4                 mov     edx, ds:_iob
.text:004053CA                 mov     esi, [ebx]
.text:004053CC                 add     edx, 40h ; '@'
.text:004053CF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004053D3                 mov     [esp+5Ch+MaxCount], esi
.text:004053D7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004053DA                 call    fprintf
.text:004053DF
.text:004053DF loc_4053DF:                             ; CODE XREF: sub_404A70+936↑j
.text:004053DF                 mov     [ebp+8], edi
.text:004053E2                 jmp     loc_404DC8
.text:004053E7 ; ---------------------------------------------------------------------------
.text:004053E7
.text:004053E7 loc_4053E7:                             ; CODE XREF: sub_404A70+93D↑j
.text:004053E7                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:004053EE                 jmp     short loc_4053B6
.text:004053F0 ; ---------------------------------------------------------------------------
.text:004053F0
.text:004053F0 loc_4053F0:                             ; CODE XREF: sub_404A70+26E↑j
.text:004053F0                 mov     edi, [esp+5Ch+var_14]
.text:004053F4                 test    edi, edi
.text:004053F6                 jnz     short loc_40540E
.text:004053F8
.text:004053F8 loc_4053F8:                             ; CODE XREF: sub_404A70+9D4↓j
.text:004053F8                 mov     edx, [ebp+14h]
.text:004053FB                 mov     [esp+5Ch+Str1], edx ; Str
.text:004053FE                 call    strlen
.text:00405403                 add     [ebp+14h], eax
.text:00405406                 inc     dword ptr [ebp+0]
.text:00405409                 jmp     loc_404F4E
.text:0040540E ; ---------------------------------------------------------------------------
.text:0040540E
.text:0040540E loc_40540E:                             ; CODE XREF: sub_404A70+986↑j
.text:0040540E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00405415                 call    ds:libintl_gettext
.text:0040541B                 mov     ebx, [ebp+0]
.text:0040541E                 mov     edi, [esp+5Ch+arg_4]
.text:00405422                 mov     ecx, [edi+ebx*4]
.text:00405425                 mov     ebx, ds:_iob
.text:0040542B                 mov     [esp+5Ch+var_50], ecx
.text:0040542F                 mov     esi, [edi]
.text:00405431                 add     ebx, 40h ; '@'
.text:00405434                 mov     [esp+5Ch+Str2], eax ; Format
.text:00405438                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040543B                 mov     [esp+5Ch+MaxCount], esi
.text:0040543F                 call    fprintf
.text:00405444                 jmp     short loc_4053F8
.text:00405446 ; ---------------------------------------------------------------------------
.text:00405446
.text:00405446 loc_405446:                             ; CODE XREF: sub_404A70+246↑j
.text:00405446                 mov     ecx, [ebp+14h]
.text:00405449                 mov     ebx, edi
.text:0040544B                 mov     edx, [esi]
.text:0040544D                 sub     ebx, ecx
.text:0040544F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00405452                 call    strlen
.text:00405457                 cmp     ebx, eax
.text:00405459                 jz      short loc_4054B1
.text:0040545B                 mov     ebx, [esp+5Ch+var_18]
.text:0040545F                 test    ebx, ebx
.text:00405461                 jz      short loc_4054A0
.text:00405463                 mov     edx, [esp+5Ch+arg_14]
.text:00405467                 test    edx, edx
.text:00405469                 jnz     short loc_405477
.text:0040546B                 mov     ecx, [esp+5Ch+var_18]
.text:0040546F                 mov     ebx, [esi+4]
.text:00405472                 cmp     [ecx+4], ebx
.text:00405475                 jz      short loc_405484
.text:00405477
.text:00405477 loc_405477:                             ; CODE XREF: sub_404A70+9F9↑j
.text:00405477                                         ; sub_404A70+A1A↓j ...
.text:00405477                 mov     [esp+5Ch+var_20], 1
.text:0040547F                 jmp     loc_404CBC
.text:00405484 ; ---------------------------------------------------------------------------
.text:00405484
.text:00405484 loc_405484:                             ; CODE XREF: sub_404A70+A05↑j
.text:00405484                 mov     edx, [esi+8]
.text:00405487                 cmp     [ecx+8], edx
.text:0040548A                 jnz     short loc_405477
.text:0040548C                 mov     ebx, [esi+0Ch]
.text:0040548F                 cmp     [ecx+0Ch], ebx
.text:00405492                 jnz     short loc_405477
.text:00405494                 jmp     loc_404CBC
.text:00405494 ; ---------------------------------------------------------------------------
.text:00405499                 align 10h
.text:004054A0
.text:004054A0 loc_4054A0:                             ; CODE XREF: sub_404A70+9F1↑j
.text:004054A0                 mov     [esp+5Ch+var_18], esi
.text:004054A4                 mov     eax, [esp+5Ch+var_28]
.text:004054A8                 mov     [esp+5Ch+var_24], eax
.text:004054AC                 jmp     loc_404CBC
.text:004054B1 ; ---------------------------------------------------------------------------
.text:004054B1
.text:004054B1 loc_4054B1:                             ; CODE XREF: sub_404A70+9E9↑j
.text:004054B1                 mov     [esp+5Ch+var_18], esi
.text:004054B5                 mov     ecx, [esp+5Ch+var_28]
.text:004054B9                 mov     [esp+5Ch+var_1C], 1
.text:004054C1                 mov     [esp+5Ch+var_24], ecx
.text:004054C5                 jmp     loc_404CD0
.text:004054CA ; ---------------------------------------------------------------------------
.text:004054CA
.text:004054CA loc_4054CA:                             ; CODE XREF: sub_404A70+1BF↑j
.text:004054CA                 mov     eax, [esp+5Ch+Str]
.text:004054CE                 movsx   esi, dl
.text:004054D1                 mov     [esp+5Ch+Str2], esi ; Val
.text:004054D5                 mov     [esp+5Ch+Str1], eax ; Str
.text:004054D8                 call    strchr
.text:004054DD                 test    eax, eax
.text:004054DF                 jnz     loc_404F90
.text:004054E5                 jmp     loc_404C35
.text:004054EA ; ---------------------------------------------------------------------------
.text:004054EA
.text:004054EA loc_4054EA:                             ; CODE XREF: sub_404A70+17C↑j
.text:004054EA                 mov     ecx, 1
.text:004054EF                 jmp     loc_404BF2
.text:004054F4 ; ---------------------------------------------------------------------------
.text:004054F4
.text:004054F4 loc_4054F4:                             ; CODE XREF: sub_404A70+D4↑j
.text:004054F4                                         ; sub_404A70+130↑j
.text:004054F4                 mov     eax, [ebp+20h]
.text:004054F7                 cmp     eax, [ebp+24h]
.text:004054FA                 jz      loc_404BD0
.text:00405500                 mov     [ebp+0], eax
.text:00405503                 jmp     loc_404BD0
.text:00405508 ; ---------------------------------------------------------------------------
.text:00405508
.text:00405508 loc_405508:                             ; CODE XREF: sub_404A70+FE↑j
.text:00405508                 mov     [ebp+20h], eax
.text:0040550B                 jmp     loc_404B90
.text:00405510 ; ---------------------------------------------------------------------------
.text:00405510
.text:00405510 loc_405510:                             ; CODE XREF: sub_404A70+CA↑j
.text:00405510                 mov     edx, [ebp+20h]
.text:00405513                 mov     eax, [ebp+24h]
.text:00405516                 cmp     edx, eax
.text:00405518                 jz      short loc_405590
.text:0040551A                 cmp     eax, ebx
.text:0040551C                 jz      short loc_405531
.text:0040551E                 mov     [esp+5Ch+Str2], ebp
.text:00405522                 mov     ebx, [esp+5Ch+arg_4]
.text:00405526                 mov     [esp+5Ch+Str1], ebx
.text:00405529                 call    sub_405720
.text:0040552E                 mov     ebx, [ebp+0]
.text:00405531
.text:00405531 loc_405531:                             ; CODE XREF: sub_404A70+AAC↑j
.text:00405531                                         ; sub_404A70+B22↓j ...
.text:00405531                 cmp     ebx, [esp+5Ch+arg_0]
.text:00405535                 jge     short loc_405580
.text:00405537                 mov     esi, [esp+5Ch+arg_4]
.text:0040553B                 mov     eax, [esi+ebx*4]
.text:0040553E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00405541                 jz      short loc_405588
.text:00405543                 lea     esi, [esi+0]
.text:00405549                 lea     edi, [edi+0]
.text:00405550
.text:00405550 loc_405550:                             ; CODE XREF: sub_404A70+AFC↓j
.text:00405550                                         ; sub_404A70+B1C↓j
.text:00405550                 lea     eax, [ebx+1]
.text:00405553                 mov     ebx, eax
.text:00405555                 mov     [ebp+0], eax
.text:00405558                 cmp     eax, [esp+5Ch+arg_0]
.text:0040555C                 jge     short loc_405580
.text:0040555E                 mov     edi, [esp+5Ch+arg_4]
.text:00405562                 mov     edx, [edi+eax*4]
.text:00405565                 cmp     byte ptr [edx], 2Dh ; '-'
.text:00405568                 jz      short loc_405570
.text:0040556A
.text:0040556A loc_40556A:                             ; CODE XREF: sub_404A70+B04↓j
.text:0040556A                 mov     ebx, eax
.text:0040556C                 jmp     short loc_405550
.text:0040556C ; ---------------------------------------------------------------------------
.text:0040556E                 align 10h
.text:00405570
.text:00405570 loc_405570:                             ; CODE XREF: sub_404A70+AF8↑j
.text:00405570                 cmp     byte ptr [edx+1], 0
.text:00405574                 jz      short loc_40556A
.text:00405576                 lea     esi, [esi+0]
.text:00405579                 lea     edi, [edi+0]
.text:00405580
.text:00405580 loc_405580:                             ; CODE XREF: sub_404A70+AC5↑j
.text:00405580                                         ; sub_404A70+AEC↑j ...
.text:00405580                 mov     [ebp+24h], ebx
.text:00405583                 jmp     loc_404B40
.text:00405588 ; ---------------------------------------------------------------------------
.text:00405588
.text:00405588 loc_405588:                             ; CODE XREF: sub_404A70+AD1↑j
.text:00405588                 cmp     byte ptr [eax+1], 0
.text:0040558C                 jz      short loc_405550
.text:0040558E                 jmp     short loc_405580
.text:00405590 ; ---------------------------------------------------------------------------
.text:00405590
.text:00405590 loc_405590:                             ; CODE XREF: sub_404A70+AA8↑j
.text:00405590                 cmp     edx, ebx
.text:00405592                 jz      short loc_405531
.text:00405594                 mov     [ebp+20h], ebx
.text:00405597                 jmp     short loc_405531
.text:00405599 ; ---------------------------------------------------------------------------
.text:00405599
.text:00405599 loc_405599:                             ; CODE XREF: sub_404A70+88↑j
.text:00405599                 mov     dword ptr [ebp+18h], 0
.text:004055A0                 mov     esi, [esp+5Ch+Str]
.text:004055A4
.text:004055A4 loc_4055A4:                             ; CODE XREF: sub_404A70+B49↓j
.text:004055A4                 inc     esi
.text:004055A5                 jmp     loc_404B08
.text:004055A5 ; ---------------------------------------------------------------------------
.text:004055AA                 align 10h
.text:004055B0
.text:004055B0 loc_4055B0:                             ; CODE XREF: sub_404A70+80↑j
.text:004055B0                 mov     dword ptr [ebp+18h], 2
.text:004055B7                 mov     esi, ecx
.text:004055B9                 jmp     short loc_4055A4
.text:004055B9 ; ---------------------------------------------------------------------------
.text:004055BB                 align 10h
.text:004055C0
.text:004055C0 loc_4055C0:                             ; CODE XREF: sub_404A70+69↑j
.text:004055C0                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:004055C7                 call    getenv
.text:004055CC                 test    eax, eax
.text:004055CE                 jz      loc_404AE4
.text:004055D4                 jmp     loc_404ADF
.text:004055D4 ; ---------------------------------------------------------------------------
.text:004055D9                 align 10h
.text:004055E0
.text:004055E0 loc_4055E0:                             ; CODE XREF: sub_404A70+3F↑j
.text:004055E0                 mov     dword ptr [ebp+0], 1
.text:004055E7                 mov     ebx, 1
.text:004055EC                 jmp     loc_404AC0
.text:004055EC sub_404A70      endp
.text:004055EC
.text:004055F1 ; ---------------------------------------------------------------------------
.text:004055F1                 jmp     short sub_405600
.text:004055F1 ; ---------------------------------------------------------------------------
.text:004055F3                 align 10h
.text:00405600
.text:00405600 ; =============== S U B R O U T I N E =======================================
.text:00405600
.text:00405600
.text:00405600 ; int __cdecl sub_405600(int, int, char *, int, int, int, int)
.text:00405600 sub_405600      proc near               ; CODE XREF: .text:004055F1↑j
.text:00405600                                         ; sub_405DA0+3A↓p ...
.text:00405600
.text:00405600 var_2C          = dword ptr -2Ch
.text:00405600 var_28          = dword ptr -28h
.text:00405600 Str             = dword ptr -24h
.text:00405600 var_20          = dword ptr -20h
.text:00405600 var_1C          = dword ptr -1Ch
.text:00405600 var_18          = dword ptr -18h
.text:00405600 var_14          = dword ptr -14h
.text:00405600 var_10          = dword ptr -10h
.text:00405600 arg_0           = dword ptr  4
.text:00405600 arg_4           = dword ptr  8
.text:00405600 arg_8           = dword ptr  0Ch
.text:00405600 arg_C           = dword ptr  10h
.text:00405600 arg_10          = dword ptr  14h
.text:00405600 arg_14          = dword ptr  18h
.text:00405600 arg_18          = dword ptr  1Ch
.text:00405600
.text:00405600                 sub     esp, 2Ch
.text:00405603                 mov     edx, dword_41A020
.text:00405609                 mov     [esp+2Ch+var_10], offset dword_41B240 ; int
.text:00405611                 mov     ecx, dword_41A024
.text:00405617                 mov     ds:dword_41B240, edx
.text:0040561D                 mov     edx, [esp+2Ch+arg_18]
.text:00405621                 mov     ds:dword_41B244, ecx
.text:00405627                 mov     ecx, [esp+2Ch+arg_14]
.text:0040562B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040562F                 mov     edx, [esp+2Ch+arg_10]
.text:00405633                 mov     [esp+2Ch+var_18], ecx ; int
.text:00405637                 mov     ecx, [esp+2Ch+arg_C]
.text:0040563B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040563F                 mov     edx, [esp+2Ch+arg_8]
.text:00405643                 mov     [esp+2Ch+var_20], ecx ; int
.text:00405647                 mov     ecx, [esp+2Ch+arg_4]
.text:0040564B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040564F                 mov     edx, [esp+2Ch+arg_0]
.text:00405653                 mov     [esp+2Ch+var_28], ecx ; int
.text:00405657                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040565A                 call    sub_404A70
.text:0040565F                 mov     ecx, ds:dword_41B240
.text:00405665                 mov     dword_41A020, ecx
.text:0040566B                 mov     ecx, ds:dword_41B24C
.text:00405671                 mov     ds:dword_41B8C0, ecx
.text:00405677                 mov     ecx, ds:dword_41B248
.text:0040567D                 mov     dword_41A028, ecx
.text:00405683                 add     esp, 2Ch
.text:00405686                 retn
.text:00405686 sub_405600      endp
.text:00405686
.text:00405686 ; ---------------------------------------------------------------------------
.text:00405687                 align 10h
.text:00405690                 sub     esp, 2Ch
.text:00405693                 mov     edx, dword_41A020
.text:00405699                 mov     dword ptr [esp+1Ch], offset dword_41B240
.text:004056A1                 mov     ecx, dword_41A024
.text:004056A7                 mov     dword ptr [esp+18h], 1
.text:004056AF                 mov     ds:dword_41B240, edx
.text:004056B5                 mov     edx, [esp+38h]
.text:004056B9                 mov     ds:dword_41B244, ecx
.text:004056BF                 mov     ecx, [esp+34h]
.text:004056C3                 mov     [esp+8], edx
.text:004056C7                 mov     edx, [esp+30h]
.text:004056CB                 mov     [esp+4], ecx
.text:004056CF                 mov     dword ptr [esp+14h], 0
.text:004056D7                 mov     dword ptr [esp+10h], 0
.text:004056DF                 mov     dword ptr [esp+0Ch], 0
.text:004056E7                 mov     [esp], edx
.text:004056EA                 call    sub_404A70
.text:004056EF                 mov     ecx, ds:dword_41B240
.text:004056F5                 mov     dword_41A020, ecx
.text:004056FB                 mov     ecx, ds:dword_41B24C
.text:00405701                 mov     ds:dword_41B8C0, ecx
.text:00405707                 mov     ecx, ds:dword_41B248
.text:0040570D                 mov     dword_41A028, ecx
.text:00405713                 add     esp, 2Ch
.text:00405716                 retn
.text:00405716 ; ---------------------------------------------------------------------------
.text:00405717                 align 10h
.text:00405720
.text:00405720 ; =============== S U B R O U T I N E =======================================
.text:00405720
.text:00405720
.text:00405720 sub_405720      proc near               ; CODE XREF: sub_404A70+113↑p
.text:00405720                                         ; sub_404A70+AB9↑p
.text:00405720
.text:00405720 var_2C          = dword ptr -2Ch
.text:00405720 var_28          = dword ptr -28h
.text:00405720 var_24          = dword ptr -24h
.text:00405720 var_20          = dword ptr -20h
.text:00405720 var_1C          = dword ptr -1Ch
.text:00405720 var_18          = dword ptr -18h
.text:00405720 var_14          = dword ptr -14h
.text:00405720 arg_0           = dword ptr  4
.text:00405720 arg_4           = dword ptr  8
.text:00405720
.text:00405720                 push    ebp
.text:00405721                 push    edi
.text:00405722                 push    esi
.text:00405723                 push    ebx
.text:00405724                 sub     esp, 1Ch
.text:00405727                 mov     ecx, [esp+2Ch+arg_4]
.text:0040572B                 mov     eax, [esp+2Ch+arg_4]
.text:0040572F                 mov     ebx, [esp+2Ch+arg_4]
.text:00405733                 mov     edx, [ecx+20h]
.text:00405736                 mov     edi, [esp+2Ch+arg_0]
.text:0040573A                 mov     ecx, [ebx]
.text:0040573C                 mov     [esp+2Ch+var_2C], edx
.text:0040573F                 mov     [esp+2Ch+var_14], edx
.text:00405743                 mov     edx, [eax+24h]
.text:00405746                 mov     [esp+2Ch+var_28], ecx
.text:0040574A                 mov     [esp+2Ch+var_1C], ecx
.text:0040574E                 cmp     ecx, edx
.text:00405750                 mov     [esp+2Ch+var_18], edx
.text:00405754                 jle     short loc_4057D0
.text:00405756                 mov     esi, [esp+2Ch+var_2C]
.text:00405759                 cmp     edx, esi
.text:0040575B                 jle     short loc_4057D0
.text:0040575D                 lea     esi, [esi+0]
.text:00405760
.text:00405760 loc_405760:                             ; CODE XREF: sub_405720+A1↓j
.text:00405760                 mov     ebx, [esp+2Ch+var_1C]
.text:00405764                 mov     edx, [esp+2Ch+var_18]
.text:00405768                 mov     ebp, [esp+2Ch+var_18]
.text:0040576C                 mov     eax, [esp+2Ch+var_14]
.text:00405770                 sub     ebx, edx
.text:00405772                 mov     [esp+2Ch+var_20], ebx
.text:00405776                 sub     ebp, eax
.text:00405778                 cmp     ebx, ebp
.text:0040577A                 jle     short loc_4057F5
.text:0040577C                 xor     esi, esi
.text:0040577E                 cmp     esi, ebp
.text:00405780                 jge     short loc_4057AD
.text:00405782                 mov     ecx, [esp+2Ch+var_1C]
.text:00405786                 sub     ecx, ebp
.text:00405788                 mov     [esp+2Ch+var_24], ecx
.text:0040578C                 lea     esi, [esi+0]
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_405720+8B↓j
.text:00405790                 mov     ecx, [esp+2Ch+var_14]
.text:00405794                 mov     edx, [esp+2Ch+var_24]
.text:00405798                 add     ecx, esi
.text:0040579A                 add     edx, esi
.text:0040579C                 mov     ebx, [edi+ecx*4]
.text:0040579F                 mov     eax, [edi+edx*4]
.text:004057A2                 inc     esi
.text:004057A3                 cmp     esi, ebp
.text:004057A5                 mov     [edi+ecx*4], eax
.text:004057A8                 mov     [edi+edx*4], ebx
.text:004057AB                 jl      short loc_405790
.text:004057AD
.text:004057AD loc_4057AD:                             ; CODE XREF: sub_405720+60↑j
.text:004057AD                 sub     [esp+2Ch+var_1C], ebp
.text:004057B1
.text:004057B1 loc_4057B1:                             ; CODE XREF: sub_405720+107↓j
.text:004057B1                 mov     eax, [esp+2Ch+var_18]
.text:004057B5                 cmp     [esp+2Ch+var_1C], eax
.text:004057B9                 jle     short loc_4057D0
.text:004057BB                 mov     ebp, [esp+2Ch+var_14]
.text:004057BF                 cmp     eax, ebp
.text:004057C1                 jg      short loc_405760
.text:004057C3                 lea     esi, [esi+0]
.text:004057C9                 lea     edi, [edi+0]
.text:004057D0
.text:004057D0 loc_4057D0:                             ; CODE XREF: sub_405720+34↑j
.text:004057D0                                         ; sub_405720+3B↑j ...
.text:004057D0                 mov     esi, [esp+2Ch+var_28]
.text:004057D4                 mov     ecx, [esp+2Ch+var_18]
.text:004057D8                 mov     eax, [esp+2Ch+var_2C]
.text:004057DB                 mov     edi, [esp+2Ch+arg_4]
.text:004057DF                 mov     edx, [esp+2Ch+var_28]
.text:004057E3                 sub     esi, ecx
.text:004057E5                 add     esi, eax
.text:004057E7                 mov     [edi+20h], esi
.text:004057EA                 mov     [edi+24h], edx
.text:004057ED                 add     esp, 1Ch
.text:004057F0                 pop     ebx
.text:004057F1                 pop     esi
.text:004057F2                 pop     edi
.text:004057F3                 pop     ebp
.text:004057F4                 retn
.text:004057F5 ; ---------------------------------------------------------------------------
.text:004057F5
.text:004057F5 loc_4057F5:                             ; CODE XREF: sub_405720+5A↑j
.text:004057F5                 xor     esi, esi
.text:004057F7                 cmp     esi, [esp+2Ch+var_20]
.text:004057FB                 jge     short loc_40581F
.text:004057FD                 lea     esi, [esi+0]
.text:00405800
.text:00405800 loc_405800:                             ; CODE XREF: sub_405720+FD↓j
.text:00405800                 mov     ebx, [esp+2Ch+var_14]
.text:00405804                 mov     ebp, [esp+2Ch+var_18]
.text:00405808                 add     ebx, esi
.text:0040580A                 add     ebp, esi
.text:0040580C                 mov     edx, [edi+ebx*4]
.text:0040580F                 inc     esi
.text:00405810                 cmp     esi, [esp+2Ch+var_20]
.text:00405814                 mov     ecx, [edi+ebp*4]
.text:00405817                 mov     [edi+ebx*4], ecx
.text:0040581A                 mov     [edi+ebp*4], edx
.text:0040581D                 jl      short loc_405800
.text:0040581F
.text:0040581F loc_40581F:                             ; CODE XREF: sub_405720+DB↑j
.text:0040581F                 mov     esi, [esp+2Ch+var_20]
.text:00405823                 add     [esp+2Ch+var_14], esi
.text:00405827                 jmp     short loc_4057B1
.text:00405827 sub_405720      endp
.text:00405827
.text:00405827 ; ---------------------------------------------------------------------------
.text:00405829                 align 20h
.text:00405840
.text:00405840 ; =============== S U B R O U T I N E =======================================
.text:00405840
.text:00405840
.text:00405840 ; int __cdecl sub_405840(int, char *)
.text:00405840 sub_405840      proc near               ; CODE XREF: sub_4026E0+14C↑p
.text:00405840                                         ; sub_4026E0+175↑p ...
.text:00405840
.text:00405840 var_C           = dword ptr -0Ch
.text:00405840 var_8           = dword ptr -8
.text:00405840 var_4           = dword ptr -4
.text:00405840 arg_0           = dword ptr  4
.text:00405840 arg_4           = dword ptr  8
.text:00405840
.text:00405840                 sub     esp, 0Ch
.text:00405843                 mov     edx, [esp+0Ch+arg_4]
.text:00405847                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040584F                 mov     [esp+0Ch+var_4], edx ; char *
.text:00405853                 mov     edx, [esp+0Ch+arg_0]
.text:00405857                 mov     [esp+0Ch+var_C], edx ; int
.text:0040585A                 call    sub_408230
.text:0040585F                 add     esp, 0Ch
.text:00405862                 retn
.text:00405862 sub_405840      endp
.text:00405862
.text:00405862 ; ---------------------------------------------------------------------------
.text:00405863                 align 10h
.text:00405870
.text:00405870 ; =============== S U B R O U T I N E =======================================
.text:00405870
.text:00405870
.text:00405870 ; int __cdecl sub_405870(char *)
.text:00405870 sub_405870      proc near               ; CODE XREF: sub_4019A0+3E7↑p
.text:00405870                                         ; sub_401FE0+219↑p ...
.text:00405870
.text:00405870 var_C           = dword ptr -0Ch
.text:00405870 var_8           = dword ptr -8
.text:00405870 var_4           = dword ptr -4
.text:00405870 arg_0           = dword ptr  4
.text:00405870
.text:00405870                 sub     esp, 0Ch
.text:00405873                 mov     edx, [esp+0Ch+arg_0]
.text:00405877                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040587F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00405886                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040588A                 call    sub_408230
.text:0040588F                 add     esp, 0Ch
.text:00405892                 retn
.text:00405892 sub_405870      endp
.text:00405892
.text:00405892 ; ---------------------------------------------------------------------------
.text:00405893                 align 10h
.text:004058A0 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:004058A0                                         ; DATA XREF: .data:Buffer↓o
.text:004058D2 ; const char Format[]
.text:004058D2 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_405B90+50↓o
.text:004058DE aWrittenByS     db 'Written by %s.',0Ah,0
.text:004058DE                                         ; DATA XREF: sub_405B90:loc_405C31↓o
.text:004058EE                 align 20h
.text:00405900 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00405900                                         ; DATA XREF: sub_405B90+100↓o
.text:00405900                 db 'ere is NO',0Ah
.text:00405900                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00405900                 db 'R PURPOSE.',0Ah,0
.text:00405998 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00405998                                         ; DATA XREF: sub_405B90:loc_405CD1↓o
.text:004059AF aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:004059AF                                         ; DATA XREF: sub_405B90:loc_405CDD↓o
.text:004059CB                 align 20h
.text:004059E0 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:004059E0                                         ; DATA XREF: sub_405B90:loc_405CE9↓o
.text:004059E0                 db 'and %s.',0Ah,0
.text:00405A00 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00405A00                                         ; DATA XREF: sub_405B90:loc_405CF5↓o
.text:00405A00                 db '%s, and %s.',0Ah,0
.text:00405A24                 align 20h
.text:00405A40 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00405A40                                         ; DATA XREF: sub_405B90:loc_405D01↓o
.text:00405A40                 db '%s, %s, and %s.',0Ah,0
.text:00405A68                 align 20h
.text:00405A80 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00405A80                                         ; DATA XREF: sub_405B90:loc_405D0D↓o
.text:00405A80                 db '%s, %s, %s, and %s.',0Ah,0
.text:00405AAC                 align 20h
.text:00405AC0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00405AC0                                         ; DATA XREF: sub_405B90:loc_405D19↓o
.text:00405AC0                 db '%s, %s, %s, %s,',0Ah
.text:00405AC0                 db 'and %s.',0Ah,0
.text:00405AF0                 align 20h
.text:00405B00 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00405B00                                         ; DATA XREF: sub_405B90:loc_405D25↓o
.text:00405B00                 db '%s, %s, %s, %s,',0Ah
.text:00405B00                 db '%s, and %s.',0Ah,0
.text:00405B34                 align 10h
.text:00405B40 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00405B40                                         ; DATA XREF: sub_405B90:def_405BFD↓o
.text:00405B40                 db '%s, %s, %s, %s,',0Ah
.text:00405B40                 db '%s, %s, and others.',0Ah,0
.text:00405B7C ; const char aSS[]
.text:00405B7C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_405B90+1B5↓o
.text:00405B83                 align 10h
.text:00405B90
.text:00405B90 ; =============== S U B R O U T I N E =======================================
.text:00405B90
.text:00405B90
.text:00405B90 ; int __cdecl sub_405B90(FILE *, FILE *, int, int, va_list)
.text:00405B90 sub_405B90      proc near               ; CODE XREF: sub_405D60+2A↓p
.text:00405B90
.text:00405B90 Stream          = dword ptr -2Ch
.text:00405B90 Format          = dword ptr -28h
.text:00405B90 ArgList         = dword ptr -24h
.text:00405B90 var_20          = dword ptr -20h
.text:00405B90 var_1C          = dword ptr -1Ch
.text:00405B90 var_14          = dword ptr -14h
.text:00405B90 arg_0           = dword ptr  4
.text:00405B90 arg_4           = dword ptr  8
.text:00405B90 arg_8           = dword ptr  0Ch
.text:00405B90 arg_C           = dword ptr  10h
.text:00405B90 arg_10          = dword ptr  14h
.text:00405B90
.text:00405B90                 push    ebp
.text:00405B91                 push    edi
.text:00405B92                 push    esi
.text:00405B93                 push    ebx
.text:00405B94                 sub     esp, 1Ch
.text:00405B97                 xor     ebx, ebx
.text:00405B99                 mov     edi, [esp+2Ch+arg_10]
.text:00405B9D                 mov     edx, [esp+2Ch+arg_8]
.text:00405BA1                 mov     esi, [esp+2Ch+arg_0]
.text:00405BA5                 mov     eax, [edi]
.text:00405BA7                 mov     ecx, [esp+2Ch+arg_4]
.text:00405BAB                 mov     [esp+2Ch+var_14], edx
.text:00405BAF                 mov     ebp, [esp+2Ch+arg_C]
.text:00405BB3                 lea     edx, [edi+4]
.text:00405BB6                 test    eax, eax
.text:00405BB8                 jz      short loc_405BCC
.text:00405BBA                 lea     esi, [esi+0]
.text:00405BC0
.text:00405BC0 loc_405BC0:                             ; CODE XREF: sub_405B90+3A↓j
.text:00405BC0                 mov     eax, edx
.text:00405BC2                 inc     ebx
.text:00405BC3                 mov     eax, [eax]
.text:00405BC5                 add     edx, 4
.text:00405BC8                 test    eax, eax
.text:00405BCA                 jnz     short loc_405BC0
.text:00405BCC
.text:00405BCC loc_405BCC:                             ; CODE XREF: sub_405B90+28↑j
.text:00405BCC                 test    ecx, ecx
.text:00405BCE                 jz      loc_405D3D
.text:00405BD4                 mov     [esp+2Ch+var_1C], ebp
.text:00405BD8                 mov     edx, [esp+2Ch+var_14]
.text:00405BDC                 mov     [esp+2Ch+ArgList], ecx
.text:00405BE0                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00405BE8                 mov     [esp+2Ch+var_20], edx
.text:00405BEC                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405BEF                 call    fprintf
.text:00405BF4
.text:00405BF4 loc_405BF4:                             ; CODE XREF: sub_405B90+1C9↓j
.text:00405BF4                 cmp     ebx, 9          ; switch 10 cases
.text:00405BF7                 ja      def_405BFD      ; jumptable 00405BFD default case
.text:00405BFD                 jmp     ds:jpt_405BFD[ebx*4] ; switch jump
.text:00405BFD ; ---------------------------------------------------------------------------
.text:00405C04 jpt_405BFD      dd offset loc_405C2C    ; DATA XREF: sub_405B90+6D↑r
.text:00405C04                 dd offset loc_405C31    ; jump table for switch statement
.text:00405C04                 dd offset loc_405CD1
.text:00405C04                 dd offset loc_405CDD
.text:00405C04                 dd offset loc_405CE9
.text:00405C04                 dd offset loc_405CF5
.text:00405C04                 dd offset loc_405D01
.text:00405C04                 dd offset loc_405D0D
.text:00405C04                 dd offset loc_405D19
.text:00405C04                 dd offset loc_405D25
.text:00405C2C ; ---------------------------------------------------------------------------
.text:00405C2C
.text:00405C2C loc_405C2C:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405C2C                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405C2C                 call    abort           ; jumptable 00405BFD case 0
.text:00405C31 ; ---------------------------------------------------------------------------
.text:00405C31
.text:00405C31 loc_405C31:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405C31                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405C31                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00405BFD case 1
.text:00405C38                 nop
.text:00405C39                 lea     esi, [esi+0]
.text:00405C40
.text:00405C40 loc_405C40:                             ; CODE XREF: sub_405B90+148↓j
.text:00405C40                                         ; sub_405B90+154↓j ...
.text:00405C40                 call    ds:libintl_gettext
.text:00405C46                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00405C4A                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405C4D                 mov     [esp+2Ch+Format], eax ; Format
.text:00405C51                 call    vfprintf
.text:00405C56                 mov     ebx, [esi+4]
.text:00405C59                 dec     ebx
.text:00405C5A                 test    ebx, ebx
.text:00405C5C                 mov     [esi+4], ebx
.text:00405C5F                 js      short loc_405CBF
.text:00405C61                 mov     edi, [esi]
.text:00405C63                 mov     byte ptr [edi], 0Ah
.text:00405C66                 inc     dword ptr [esi]
.text:00405C68
.text:00405C68 loc_405C68:                             ; CODE XREF: sub_405B90+13F↓j
.text:00405C68                 mov     [esp+2Ch+Format], esi ; Stream
.text:00405C6C                 mov     edx, Buffer
.text:00405C72                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00405C75                 call    fputs
.text:00405C7A                 mov     ebp, [esi+4]
.text:00405C7D                 dec     ebp
.text:00405C7E                 test    ebp, ebp
.text:00405C80                 mov     [esi+4], ebp
.text:00405C83                 js      short loc_405CAD
.text:00405C85                 mov     ecx, [esi]
.text:00405C87                 mov     byte ptr [ecx], 0Ah
.text:00405C8A                 inc     dword ptr [esi]
.text:00405C8C
.text:00405C8C loc_405C8C:                             ; CODE XREF: sub_405B90+12D↓j
.text:00405C8C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00405C90                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00405C97                 call    ds:libintl_gettext
.text:00405C9D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00405CA1                 add     esp, 1Ch
.text:00405CA4                 pop     ebx
.text:00405CA5                 pop     esi
.text:00405CA6                 pop     edi
.text:00405CA7                 pop     ebp
.text:00405CA8                 jmp     fputs
.text:00405CAD ; ---------------------------------------------------------------------------
.text:00405CAD
.text:00405CAD loc_405CAD:                             ; CODE XREF: sub_405B90+F3↑j
.text:00405CAD                 mov     [esp+2Ch+Format], esi ; File
.text:00405CB1                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405CB8                 call    _flsbuf
.text:00405CBD                 jmp     short loc_405C8C
.text:00405CBF ; ---------------------------------------------------------------------------
.text:00405CBF
.text:00405CBF loc_405CBF:                             ; CODE XREF: sub_405B90+CF↑j
.text:00405CBF                 mov     [esp+2Ch+Format], esi ; File
.text:00405CC3                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00405CCA                 call    _flsbuf
.text:00405CCF                 jmp     short loc_405C68
.text:00405CD1 ; ---------------------------------------------------------------------------
.text:00405CD1
.text:00405CD1 loc_405CD1:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405CD1                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405CD1                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00405BFD case 2
.text:00405CD8                 jmp     loc_405C40
.text:00405CDD ; ---------------------------------------------------------------------------
.text:00405CDD
.text:00405CDD loc_405CDD:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405CDD                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405CDD                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00405BFD case 3
.text:00405CE4                 jmp     loc_405C40
.text:00405CE9 ; ---------------------------------------------------------------------------
.text:00405CE9
.text:00405CE9 loc_405CE9:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405CE9                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405CE9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00405BFD case 4
.text:00405CF0                 jmp     loc_405C40
.text:00405CF5 ; ---------------------------------------------------------------------------
.text:00405CF5
.text:00405CF5 loc_405CF5:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405CF5                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405CF5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00405BFD case 5
.text:00405CFC                 jmp     loc_405C40
.text:00405D01 ; ---------------------------------------------------------------------------
.text:00405D01
.text:00405D01 loc_405D01:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405D01                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405D01                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00405BFD case 6
.text:00405D08                 jmp     loc_405C40
.text:00405D0D ; ---------------------------------------------------------------------------
.text:00405D0D
.text:00405D0D loc_405D0D:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405D0D                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405D0D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00405BFD case 7
.text:00405D14                 jmp     loc_405C40
.text:00405D19 ; ---------------------------------------------------------------------------
.text:00405D19
.text:00405D19 loc_405D19:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405D19                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405D19                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00405BFD case 8
.text:00405D20                 jmp     loc_405C40
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405B90+6D↑j
.text:00405D25                                         ; DATA XREF: sub_405B90:jpt_405BFD↑o
.text:00405D25                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00405BFD case 9
.text:00405D2C                 jmp     loc_405C40
.text:00405D31 ; ---------------------------------------------------------------------------
.text:00405D31
.text:00405D31 def_405BFD:                             ; CODE XREF: sub_405B90+67↑j
.text:00405D31                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00405BFD default case
.text:00405D38                 jmp     loc_405C40
.text:00405D3D ; ---------------------------------------------------------------------------
.text:00405D3D
.text:00405D3D loc_405D3D:                             ; CODE XREF: sub_405B90+3E↑j
.text:00405D3D                 mov     [esp+2Ch+var_20], ebp
.text:00405D41                 mov     ecx, [esp+2Ch+var_14]
.text:00405D45                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00405D4D                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405D50                 mov     [esp+2Ch+ArgList], ecx
.text:00405D54                 call    fprintf
.text:00405D59                 jmp     loc_405BF4
.text:00405D59 sub_405B90      endp
.text:00405D59
.text:00405D59 ; ---------------------------------------------------------------------------
.text:00405D5E                 align 10h
.text:00405D60
.text:00405D60 ; =============== S U B R O U T I N E =======================================
.text:00405D60
.text:00405D60
.text:00405D60 ; int __cdecl sub_405D60(FILE *, FILE *, int, int, char)
.text:00405D60 sub_405D60      proc near               ; CODE XREF: sub_4019A0+2B7↑p
.text:00405D60
.text:00405D60 var_1C          = dword ptr -1Ch
.text:00405D60 var_18          = dword ptr -18h
.text:00405D60 var_14          = dword ptr -14h
.text:00405D60 var_10          = dword ptr -10h
.text:00405D60 var_C           = dword ptr -0Ch
.text:00405D60 arg_0           = dword ptr  4
.text:00405D60 arg_4           = dword ptr  8
.text:00405D60 arg_8           = dword ptr  0Ch
.text:00405D60 arg_C           = dword ptr  10h
.text:00405D60 arg_10          = byte ptr  14h
.text:00405D60
.text:00405D60                 sub     esp, 1Ch
.text:00405D63                 mov     edx, [esp+1Ch+arg_C]
.text:00405D67                 lea     ecx, [esp+1Ch+arg_10]
.text:00405D6B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00405D6F                 mov     ecx, [esp+1Ch+arg_8]
.text:00405D73                 mov     [esp+1Ch+var_10], edx ; int
.text:00405D77                 mov     edx, [esp+1Ch+arg_4]
.text:00405D7B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00405D7F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00405D83                 mov     edx, [esp+1Ch+arg_0]
.text:00405D87                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00405D8A                 call    sub_405B90
.text:00405D8F                 add     esp, 1Ch
.text:00405D92                 retn
.text:00405D92 sub_405D60      endp
.text:00405D92
.text:00405D92 ; ---------------------------------------------------------------------------
.text:00405D93                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0
.text:00405DA0 ; int __cdecl sub_405DA0(int, int, char *, int, int)
.text:00405DA0 sub_405DA0      proc near               ; CODE XREF: sub_4019A0+BF↑p
.text:00405DA0
.text:00405DA0 var_1C          = dword ptr -1Ch
.text:00405DA0 var_18          = dword ptr -18h
.text:00405DA0 var_14          = dword ptr -14h
.text:00405DA0 var_10          = dword ptr -10h
.text:00405DA0 var_C           = dword ptr -0Ch
.text:00405DA0 var_8           = dword ptr -8
.text:00405DA0 var_4           = dword ptr -4
.text:00405DA0 arg_0           = dword ptr  4
.text:00405DA0 arg_4           = dword ptr  8
.text:00405DA0 arg_8           = dword ptr  0Ch
.text:00405DA0 arg_C           = dword ptr  10h
.text:00405DA0 arg_10          = dword ptr  14h
.text:00405DA0
.text:00405DA0                 sub     esp, 1Ch
.text:00405DA3                 mov     edx, [esp+1Ch+arg_C]
.text:00405DA7                 mov     [esp+1Ch+var_4], 0 ; int
.text:00405DAF                 mov     ecx, [esp+1Ch+arg_10]
.text:00405DB3                 mov     [esp+1Ch+var_8], 0 ; int
.text:00405DBB                 mov     [esp+1Ch+var_10], edx ; int
.text:00405DBF                 mov     edx, [esp+1Ch+arg_4]
.text:00405DC3                 mov     [esp+1Ch+var_C], ecx ; int
.text:00405DC7                 mov     ecx, [esp+1Ch+arg_8]
.text:00405DCB                 mov     [esp+1Ch+var_18], edx ; int
.text:00405DCF                 mov     edx, [esp+1Ch+arg_0]
.text:00405DD3                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00405DD7                 mov     [esp+1Ch+var_1C], edx ; int
.text:00405DDA                 call    sub_405600
.text:00405DDF                 add     esp, 1Ch
.text:00405DE2                 retn
.text:00405DE2 sub_405DA0      endp
.text:00405DE2
.text:00405DE2 ; ---------------------------------------------------------------------------
.text:00405DE3                 align 10h
.text:00405DF0                 sub     esp, 2Ch
.text:00405DF3                 mov     edx, [esp+44h]
.text:00405DF7                 mov     dword ptr [esp+18h], 0
.text:00405DFF                 mov     ecx, [esp+40h]
.text:00405E03                 mov     dword ptr [esp+14h], 0
.text:00405E0B                 mov     [esp+1Ch], edx
.text:00405E0F                 mov     edx, [esp+3Ch]
.text:00405E13                 mov     [esp+10h], ecx
.text:00405E17                 mov     ecx, [esp+38h]
.text:00405E1B                 mov     [esp+0Ch], edx
.text:00405E1F                 mov     edx, [esp+34h]
.text:00405E23                 mov     [esp+8], ecx
.text:00405E27                 mov     [esp+4], edx
.text:00405E2B                 mov     edx, [esp+30h]
.text:00405E2F                 mov     [esp], edx
.text:00405E32                 call    sub_404A70
.text:00405E37                 add     esp, 2Ch
.text:00405E3A                 retn
.text:00405E3A ; ---------------------------------------------------------------------------
.text:00405E3B                 align 10h
.text:00405E40                 sub     esp, 1Ch
.text:00405E43                 mov     edx, [esp+2Ch]
.text:00405E47                 mov     dword ptr [esp+18h], 0
.text:00405E4F                 mov     ecx, [esp+30h]
.text:00405E53                 mov     dword ptr [esp+14h], 1
.text:00405E5B                 mov     [esp+0Ch], edx
.text:00405E5F                 mov     edx, [esp+24h]
.text:00405E63                 mov     [esp+10h], ecx
.text:00405E67                 mov     ecx, [esp+28h]
.text:00405E6B                 mov     [esp+4], edx
.text:00405E6F                 mov     edx, [esp+20h]
.text:00405E73                 mov     [esp+8], ecx
.text:00405E77                 mov     [esp], edx
.text:00405E7A                 call    sub_405600
.text:00405E7F                 add     esp, 1Ch
.text:00405E82                 retn
.text:00405E82 ; ---------------------------------------------------------------------------
.text:00405E83                 align 10h
.text:00405E90                 sub     esp, 2Ch
.text:00405E93                 mov     edx, [esp+44h]
.text:00405E97                 mov     dword ptr [esp+18h], 0
.text:00405E9F                 mov     ecx, [esp+40h]
.text:00405EA3                 mov     dword ptr [esp+14h], 1
.text:00405EAB                 mov     [esp+1Ch], edx
.text:00405EAF                 mov     edx, [esp+3Ch]
.text:00405EB3                 mov     [esp+10h], ecx
.text:00405EB7                 mov     ecx, [esp+38h]
.text:00405EBB                 mov     [esp+0Ch], edx
.text:00405EBF                 mov     edx, [esp+34h]
.text:00405EC3                 mov     [esp+8], ecx
.text:00405EC7                 mov     [esp+4], edx
.text:00405ECB                 mov     edx, [esp+30h]
.text:00405ECF                 mov     [esp], edx
.text:00405ED2                 call    sub_404A70
.text:00405ED7                 add     esp, 2Ch
.text:00405EDA                 retn
.text:00405EDA ; ---------------------------------------------------------------------------
.text:00405EDB                 align 10h
.text:00405EE0                 mov     edx, [esp+4]
.text:00405EE4                 mov     ds:dword_41B270, edx
.text:00405EEA                 retn
.text:00405EEA ; ---------------------------------------------------------------------------
.text:00405EEB aWriteError     db 'write error',0      ; DATA XREF: sub_405F10:loc_405F59↓o
.text:00405EF7 ; const char aSS_0[]
.text:00405EF7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_405F10+77↓o
.text:00405EFE ; const char aS_2[]
.text:00405EFE aS_2            db '%s',0               ; DATA XREF: sub_405F10+A0↓o
.text:00405F01 ; ---------------------------------------------------------------------------
.text:00405F01                 jmp     short sub_405F10
.text:00405F01 ; ---------------------------------------------------------------------------
.text:00405F03                 align 10h
.text:00405F10
.text:00405F10 ; =============== S U B R O U T I N E =======================================
.text:00405F10
.text:00405F10
.text:00405F10 ; void __cdecl sub_405F10()
.text:00405F10 sub_405F10      proc near               ; CODE XREF: .text:00405F01↑j
.text:00405F10                                         ; DATA XREF: sub_4019A0+5E↑o
.text:00405F10
.text:00405F10 Stream          = dword ptr -2Ch
.text:00405F10 ErrorMessage    = dword ptr -28h
.text:00405F10 var_24          = dword ptr -24h
.text:00405F10 var_20          = byte ptr -20h
.text:00405F10 var_1C          = dword ptr -1Ch
.text:00405F10 var_9           = byte ptr -9
.text:00405F10
.text:00405F10                 push    esi
.text:00405F11                 push    ebx
.text:00405F12                 sub     esp, 24h
.text:00405F15                 mov     edx, ds:_iob
.text:00405F1B                 mov     ecx, [edx+2Ch]
.text:00405F1E                 lea     esi, [edx+20h]
.text:00405F21                 shr     ecx, 5
.text:00405F24                 mov     bl, cl
.text:00405F26                 mov     ecx, [edx+20h]
.text:00405F29                 and     bl, 1
.text:00405F2C                 cmp     ecx, [esi+8]
.text:00405F2F                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00405F32                 setz    [esp+2Ch+var_9]
.text:00405F37                 call    fclose
.text:00405F3C                 test    eax, eax
.text:00405F3E                 setnz   al
.text:00405F41                 test    bl, bl
.text:00405F43                 jnz     loc_405FD3
.text:00405F49                 test    al, al
.text:00405F4B                 jz      short loc_405FA0
.text:00405F4D
.text:00405F4D loc_405F4D:                             ; CODE XREF: sub_405F10+CD↓j
.text:00405F4D                 call    _errno
.text:00405F52                 mov     esi, [eax]
.text:00405F54
.text:00405F54 loc_405F54:                             ; CODE XREF: sub_405F10+C7↓j
.text:00405F54                 cmp     esi, 9
.text:00405F57                 jz      short loc_405FC6
.text:00405F59
.text:00405F59 loc_405F59:                             ; CODE XREF: sub_405F10+B8↓j
.text:00405F59                                         ; sub_405F10+C1↓j
.text:00405F59                 mov     [esp+2Ch+Stream], offset aWriteError ; "write error"
.text:00405F60                 call    ds:libintl_gettext
.text:00405F66                 mov     ebx, eax
.text:00405F68                 mov     eax, ds:dword_41B270
.text:00405F6D                 test    eax, eax
.text:00405F6F                 jz      short loc_405FA6
.text:00405F71                 mov     [esp+2Ch+Stream], eax ; char *
.text:00405F74                 call    sub_4085A0
.text:00405F79                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:00405F7D                 mov     edx, dword_41A050
.text:00405F83                 mov     [esp+2Ch+var_1C], ebx
.text:00405F87                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:00405F8F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405F93                 mov     [esp+2Ch+Stream], edx ; Code
.text:00405F96                 call    sub_40FF30
.text:00405F9B                 nop
.text:00405F9C                 lea     esi, [esi+0]
.text:00405FA0
.text:00405FA0 loc_405FA0:                             ; CODE XREF: sub_405F10+3B↑j
.text:00405FA0                                         ; sub_405F10+B4↓j ...
.text:00405FA0                 add     esp, 24h
.text:00405FA3                 pop     ebx
.text:00405FA4                 pop     esi
.text:00405FA5                 retn
.text:00405FA6 ; ---------------------------------------------------------------------------
.text:00405FA6
.text:00405FA6 loc_405FA6:                             ; CODE XREF: sub_405F10+5F↑j
.text:00405FA6                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:00405FAA                 mov     ebx, dword_41A050
.text:00405FB0                 mov     [esp+2Ch+var_24], offset aS_2 ; "%s"
.text:00405FB8                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00405FBC                 mov     [esp+2Ch+Stream], ebx ; Code
.text:00405FBF                 call    sub_40FF30
.text:00405FC4                 jmp     short loc_405FA0
.text:00405FC6 ; ---------------------------------------------------------------------------
.text:00405FC6
.text:00405FC6 loc_405FC6:                             ; CODE XREF: sub_405F10+47↑j
.text:00405FC6                 test    bl, bl
.text:00405FC8                 jnz     short loc_405F59
.text:00405FCA                 cmp     [esp+2Ch+var_9], 0
.text:00405FCF                 jnz     short loc_405FA0
.text:00405FD1                 jmp     short loc_405F59
.text:00405FD3 ; ---------------------------------------------------------------------------
.text:00405FD3
.text:00405FD3 loc_405FD3:                             ; CODE XREF: sub_405F10+33↑j
.text:00405FD3                 xor     esi, esi
.text:00405FD5                 test    al, al
.text:00405FD7                 jz      loc_405F54
.text:00405FDD                 jmp     loc_405F4D
.text:00405FDD sub_405F10      endp
.text:00405FDD
.text:00405FDD ; ---------------------------------------------------------------------------
.text:00405FE2                 align 10h
.text:00405FF0
.text:00405FF0 ; =============== S U B R O U T I N E =======================================
.text:00405FF0
.text:00405FF0
.text:00405FF0 sub_405FF0      proc near               ; CODE XREF: sub_4019A0+15D↑p
.text:00405FF0                                         ; .text:00401E1A↑p ...
.text:00405FF0
.text:00405FF0 arg_0           = dword ptr  4
.text:00405FF0
.text:00405FF0                 mov     ecx, [esp+arg_0]
.text:00405FF4                 movzx   eax, byte ptr [ecx]
.text:00405FF7                 test    al, al
.text:00405FF9                 jz      short loc_406001
.text:00405FFB                 cmp     byte ptr [ecx+1], 3Ah ; ':'
.text:00405FFF                 jz      short loc_406047
.text:00406001
.text:00406001 loc_406001:                             ; CODE XREF: sub_405FF0+9↑j
.text:00406001                                         ; sub_405FF0+5D↓j
.text:00406001                 test    al, al
.text:00406003                 mov     edx, ecx
.text:00406005                 jz      short loc_406020
.text:00406007                 movzx   eax, byte ptr [ecx]
.text:0040600A                 lea     esi, [esi+0]
.text:00406010
.text:00406010 loc_406010:                             ; CODE XREF: sub_405FF0+2E↓j
.text:00406010                 cmp     al, 2Fh ; '/'
.text:00406012                 jz      short loc_406023
.text:00406014                 cmp     al, 5Ch ; '\'
.text:00406016                 jz      short loc_406023
.text:00406018
.text:00406018 loc_406018:                             ; CODE XREF: sub_405FF0+45↓j
.text:00406018                 inc     edx
.text:00406019                 movzx   eax, byte ptr [edx]
.text:0040601C                 test    al, al
.text:0040601E                 jnz     short loc_406010
.text:00406020
.text:00406020 loc_406020:                             ; CODE XREF: sub_405FF0+15↑j
.text:00406020                                         ; sub_405FF0+50↓j ...
.text:00406020                 mov     eax, ecx
.text:00406022                 retn
.text:00406023 ; ---------------------------------------------------------------------------
.text:00406023
.text:00406023 loc_406023:                             ; CODE XREF: sub_405FF0+22↑j
.text:00406023                                         ; sub_405FF0+26↑j ...
.text:00406023                 inc     edx
.text:00406024                 movzx   eax, byte ptr [edx]
.text:00406027                 cmp     al, 2Fh ; '/'
.text:00406029                 jz      short loc_406023
.text:0040602B                 cmp     al, 5Ch ; '\'
.text:0040602D                 jz      short loc_406023
.text:0040602F                 test    al, al
.text:00406031                 jz      short loc_406037
.text:00406033                 mov     ecx, edx
.text:00406035                 jmp     short loc_406018
.text:00406037 ; ---------------------------------------------------------------------------
.text:00406037
.text:00406037 loc_406037:                             ; CODE XREF: sub_405FF0+41↑j
.text:00406037                 movzx   eax, byte ptr [ecx]
.text:0040603A                 cmp     al, 2Fh ; '/'
.text:0040603C                 jz      short loc_406042
.text:0040603E                 cmp     al, 5Ch ; '\'
.text:00406040                 jnz     short loc_406020
.text:00406042
.text:00406042 loc_406042:                             ; CODE XREF: sub_405FF0+4C↑j
.text:00406042                 lea     ecx, [edx-1]
.text:00406045                 jmp     short loc_406020
.text:00406047 ; ---------------------------------------------------------------------------
.text:00406047
.text:00406047 loc_406047:                             ; CODE XREF: sub_405FF0+F↑j
.text:00406047                 add     ecx, 2
.text:0040604A                 movzx   eax, byte ptr [ecx]
.text:0040604D                 jmp     short loc_406001
.text:0040604D sub_405FF0      endp
.text:0040604D
.text:0040604D ; ---------------------------------------------------------------------------
.text:0040604F                 align 10h
.text:00406050                 push    ebx
.text:00406051                 sub     esp, 8
.text:00406054                 mov     ebx, [esp+10h]
.text:00406058                 mov     [esp], ebx
.text:0040605B                 call    strlen
.text:00406060                 cmp     eax, 1
.text:00406063                 jbe     short loc_406080
.text:00406065                 movzx   edx, byte ptr [eax+ebx-1]
.text:0040606A                 cmp     dl, 2Fh ; '/'
.text:0040606D                 jz      short loc_406085
.text:0040606F                 cmp     dl, 5Ch ; '\'
.text:00406072                 jz      short loc_406085
.text:00406074                 lea     esi, [esi+0]
.text:0040607A                 lea     edi, [edi+0]
.text:00406080
.text:00406080 loc_406080:                             ; CODE XREF: .text:00406063↑j
.text:00406080                                         ; .text:00406089↓j ...
.text:00406080                 add     esp, 8
.text:00406083                 pop     ebx
.text:00406084                 retn
.text:00406085 ; ---------------------------------------------------------------------------
.text:00406085
.text:00406085 loc_406085:                             ; CODE XREF: .text:0040606D↑j
.text:00406085                                         ; .text:00406072↑j ...
.text:00406085                 dec     eax
.text:00406086                 cmp     eax, 1
.text:00406089                 jbe     short loc_406080
.text:0040608B                 movzx   edx, byte ptr [eax+ebx-1]
.text:00406090                 cmp     dl, 2Fh ; '/'
.text:00406093                 jz      short loc_406085
.text:00406095                 cmp     dl, 5Ch ; '\'
.text:00406098                 jz      short loc_406085
.text:0040609A                 jmp     short loc_406080
.text:0040609A ; ---------------------------------------------------------------------------
.text:0040609C                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0
.text:004060A0 sub_4060A0      proc near               ; CODE XREF: sub_4026E0+A7A↑p
.text:004060A0                                         ; sub_409140+45↓p
.text:004060A0
.text:004060A0 var_4           = dword ptr -4
.text:004060A0 arg_0           = dword ptr  4
.text:004060A0
.text:004060A0                 sub     esp, 0Ch
.text:004060A3                 mov     [esp+0Ch+var_4], ebx
.text:004060A7                 mov     ebx, [esp+0Ch+arg_0]
.text:004060AB                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:004060B1                 mov     dword ptr [ebx+4], 0
.text:004060B8                 call    sub_408F30
.text:004060BD                 mov     [ebx+4], eax
.text:004060C0                 test    eax, eax
.text:004060C2                 mov     ebx, [esp+0Ch+var_4]
.text:004060C6                 setnz   dl
.text:004060C9                 add     esp, 0Ch
.text:004060CC                 movzx   eax, dl
.text:004060CF                 dec     eax
.text:004060D0                 retn
.text:004060D0 sub_4060A0      endp
.text:004060D0
.text:004060D1 ; ---------------------------------------------------------------------------
.text:004060D1                 jmp     short sub_4060E0
.text:004060D1 ; ---------------------------------------------------------------------------
.text:004060D3                 align 10h
.text:004060E0
.text:004060E0 ; =============== S U B R O U T I N E =======================================
.text:004060E0
.text:004060E0
.text:004060E0 sub_4060E0      proc near               ; CODE XREF: sub_403580+255↑p
.text:004060E0                                         ; .text:004060D1↑j ...
.text:004060E0
.text:004060E0 arg_0           = dword ptr  4
.text:004060E0
.text:004060E0                 sub     esp, 0Ch
.text:004060E3                 mov     eax, [esp+0Ch+arg_0]
.text:004060E7                 mov     ecx, [eax]
.text:004060E9                 test    ecx, ecx
.text:004060EB                 jns     short loc_4060FC
.text:004060ED                 mov     edx, [eax+4]
.text:004060F0                 mov     [esp+0Ch+arg_0], edx ; LPCSTR
.text:004060F4                 add     esp, 0Ch
.text:004060F7                 jmp     sub_4088A0
.text:004060FC ; ---------------------------------------------------------------------------
.text:004060FC
.text:004060FC loc_4060FC:                             ; CODE XREF: sub_4060E0+B↑j
.text:004060FC                 call    abort
.text:004060FC sub_4060E0      endp
.text:004060FC
.text:00406101 ; ---------------------------------------------------------------------------
.text:00406101                 jmp     short sub_406110
.text:00406101 ; ---------------------------------------------------------------------------
.text:00406103                 align 10h
.text:00406110
.text:00406110 ; =============== S U B R O U T I N E =======================================
.text:00406110
.text:00406110
.text:00406110 ; int __cdecl sub_406110(void *Block)
.text:00406110 sub_406110      proc near               ; CODE XREF: sub_401FE0+109↑p
.text:00406110                                         ; .text:00406101↑j ...
.text:00406110
.text:00406110 FileHandle      = dword ptr -0Ch
.text:00406110 var_4           = dword ptr -4
.text:00406110 Block           = dword ptr  4
.text:00406110
.text:00406110                 sub     esp, 0Ch
.text:00406113                 mov     [esp+0Ch+var_4], ebx
.text:00406117                 mov     ebx, [esp+0Ch+Block]
.text:0040611B                 mov     eax, [ebx]
.text:0040611D                 test    eax, eax
.text:0040611F                 js      short loc_406129
.text:00406121                 mov     [esp+0Ch+FileHandle], eax ; FileHandle
.text:00406124                 call    _close
.text:00406129
.text:00406129 loc_406129:                             ; CODE XREF: sub_406110+F↑j
.text:00406129                 mov     eax, [ebx+4]
.text:0040612C                 test    eax, eax
.text:0040612E                 jnz     short loc_406138
.text:00406130                 mov     ebx, [esp+0Ch+var_4]
.text:00406134                 add     esp, 0Ch
.text:00406137                 retn
.text:00406138 ; ---------------------------------------------------------------------------
.text:00406138
.text:00406138 loc_406138:                             ; CODE XREF: sub_406110+1E↑j
.text:00406138                 mov     [esp+0Ch+Block], eax ; Block
.text:0040613C                 mov     ebx, [esp+0Ch+var_4]
.text:00406140                 add     esp, 0Ch
.text:00406143                 jmp     free
.text:00406143 sub_406110      endp
.text:00406143
.text:00406143 ; ---------------------------------------------------------------------------
.text:00406148                 align 10h
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150
.text:00406150 sub_406150      proc near               ; CODE XREF: sub_403900:loc_403A25↑p
.text:00406150
.text:00406150 C               = dword ptr -9Ch
.text:00406150 Type            = dword ptr -98h
.text:00406150 var_8C          = byte ptr -8Ch
.text:00406150
.text:00406150                 push    esi
.text:00406151                 xor     esi, esi
.text:00406153                 push    ebx
.text:00406154                 sub     esp, 94h
.text:0040615A                 lea     esi, [esi+0]
.text:00406160
.text:00406160 loc_406160:                             ; CODE XREF: sub_406150+47↓j
.text:00406160                                         ; sub_406150+66↓j ...
.text:00406160                 mov     ecx, ds:_iob
.text:00406166                 mov     ebx, [ecx+4]
.text:00406169                 dec     ebx
.text:0040616A                 mov     [ecx+4], ebx
.text:0040616D                 test    ebx, ebx
.text:0040616F                 js      loc_406200
.text:00406175                 mov     ecx, ds:_iob
.text:0040617B                 mov     edx, [ecx]
.text:0040617D                 movzx   ebx, byte ptr [edx]
.text:00406180                 inc     edx
.text:00406181                 mov     [ecx], edx
.text:00406183
.text:00406183 loc_406183:                             ; CODE XREF: sub_406150+C0↓j
.text:00406183                 cmp     ebx, 0FFFFFFFFh
.text:00406186                 jz      short loc_4061D8
.text:00406188                 cmp     ebx, 0Ah
.text:0040618B                 jz      short loc_4061D8
.text:0040618D                 lea     edx, [esi-1]
.text:00406190                 cmp     edx, 7Dh ; '}'
.text:00406193                 jbe     short loc_4061C0
.text:00406195                 test    esi, esi
.text:00406197                 jnz     short loc_406160
.text:00406199                 mov     edx, ds:__mb_cur_max
.text:0040619F                 cmp     dword ptr [edx], 1
.text:004061A2                 jz      short loc_4061C7
.text:004061A4                 mov     [esp+9Ch+Type], 8 ; Type
.text:004061AC                 mov     [esp+9Ch+C], ebx ; C
.text:004061AF                 call    _isctype
.text:004061B4
.text:004061B4 loc_4061B4:                             ; CODE XREF: sub_406150+86↓j
.text:004061B4                 test    eax, eax
.text:004061B6                 jnz     short loc_406160
.text:004061B8                 nop
.text:004061B9                 lea     esi, [esi+0]
.text:004061C0
.text:004061C0 loc_4061C0:                             ; CODE XREF: sub_406150+43↑j
.text:004061C0                 mov     [esp+esi+9Ch+var_8C], bl
.text:004061C4                 inc     esi
.text:004061C5                 jmp     short loc_406160
.text:004061C7 ; ---------------------------------------------------------------------------
.text:004061C7
.text:004061C7 loc_4061C7:                             ; CODE XREF: sub_406150+52↑j
.text:004061C7                 mov     edx, ds:_pctype
.text:004061CD                 mov     ecx, [edx]
.text:004061CF                 movzx   eax, word ptr [ecx+ebx*2]
.text:004061D3                 and     eax, 8
.text:004061D6                 jmp     short loc_4061B4
.text:004061D8 ; ---------------------------------------------------------------------------
.text:004061D8
.text:004061D8 loc_4061D8:                             ; CODE XREF: sub_406150+36↑j
.text:004061D8                                         ; sub_406150+3B↑j
.text:004061D8                 mov     [esp+esi+9Ch+var_8C], 0
.text:004061DD                 lea     esi, [esp+9Ch+var_8C]
.text:004061E1                 mov     [esp+9Ch+C], esi
.text:004061E4                 call    near ptr loc_408F7B+5
.text:004061E9                 dec     eax
.text:004061EA                 setz    cl
.text:004061ED                 add     esp, 94h
.text:004061F3                 pop     ebx
.text:004061F4                 movzx   eax, cl
.text:004061F7                 pop     esi
.text:004061F8                 retn
.text:004061F8 ; ---------------------------------------------------------------------------
.text:004061F9                 align 10h
.text:00406200
.text:00406200 loc_406200:                             ; CODE XREF: sub_406150+1F↑j
.text:00406200                 mov     ebx, ds:_iob
.text:00406206                 mov     [esp+9Ch+C], ebx ; File
.text:00406209                 call    _filbuf
.text:0040620E                 mov     ebx, eax
.text:00406210                 jmp     loc_406183
.text:00406210 sub_406150      endp
.text:00406210
.text:00406210 ; ---------------------------------------------------------------------------
.text:00406215                 align 10h
.text:00406220 dword_406220    dd 0                    ; DATA XREF: sub_406250+D2↓o
.text:00406220                                         ; sub_406250:loc_406480↓o ...
.text:00406224 dword_406224    dd 3F800000h, 3F4CCCCDh, 3FB4FDF4h, 0
.text:00406224                                         ; DATA XREF: .text:00406E3C↓r
.text:00406224                                         ; .text:00406E45↓r ...
.text:00406234 flt_406234      dd 0.1                  ; DATA XREF: sub_406250:loc_40629F↓r
.text:00406238 flt_406238      dd 4.2949673e9          ; DATA XREF: sub_406250+101↓r
.text:0040623C flt_40623C      dd 0.89999998           ; DATA XREF: sub_406250+66↓r
.text:00406240 flt_406240      dd 1.1                  ; DATA XREF: sub_406250+7A↓r
.text:00406244                 align 10h
.text:00406250
.text:00406250 ; =============== S U B R O U T I N E =======================================
.text:00406250
.text:00406250
.text:00406250 sub_406250      proc near               ; CODE XREF: sub_4026E0+48D↑p
.text:00406250                                         ; sub_4026E0+7E6↑p ...
.text:00406250
.text:00406250 var_44          = qword ptr -44h
.text:00406250 Size            = dword ptr -3Ch
.text:00406250 var_38          = dword ptr -38h
.text:00406250 var_28          = dword ptr -28h
.text:00406250 var_24          = qword ptr -24h
.text:00406250 var_18          = word ptr -18h
.text:00406250 var_16          = word ptr -16h
.text:00406250 var_10          = dword ptr -10h
.text:00406250 var_C           = dword ptr -0Ch
.text:00406250 var_8           = dword ptr -8
.text:00406250 var_4           = dword ptr -4
.text:00406250 arg_0           = dword ptr  4
.text:00406250 arg_4           = dword ptr  8
.text:00406250 arg_8           = dword ptr  0Ch
.text:00406250 arg_C           = dword ptr  10h
.text:00406250 arg_10          = dword ptr  14h
.text:00406250
.text:00406250                 sub     esp, 3Ch
.text:00406253                 mov     [esp+3Ch+var_4], ebp
.text:00406257                 mov     ebp, [esp+3Ch+arg_8]
.text:0040625B                 mov     [esp+3Ch+var_10], ebx
.text:0040625F                 mov     ebx, [esp+3Ch+arg_4]
.text:00406263                 test    ebp, ebp
.text:00406265                 mov     [esp+3Ch+var_C], esi
.text:00406269                 mov     [esp+3Ch+var_8], edi
.text:0040626D                 jz      loc_406331
.text:00406273                 mov     edx, [esp+3Ch+arg_C]
.text:00406277                 test    edx, edx
.text:00406279                 jz      loc_406331
.text:0040627F                 mov     [esp+3Ch+Size], 28h ; '(' ; Size
.text:00406286                 call    malloc
.text:0040628B                 mov     esi, eax
.text:0040628D                 xor     eax, eax
.text:0040628F                 test    esi, esi
.text:00406291                 jz      loc_406333
.text:00406297                 test    ebx, ebx
.text:00406299                 jz      loc_406480
.text:0040629F
.text:0040629F loc_40629F:                             ; CODE XREF: sub_406250+235↓j
.text:0040629F                 fld     ds:flt_406234
.text:004062A5                 fld     dword ptr [ebx+8]
.text:004062A8                 mov     [esi+14h], ebx
.text:004062AB                 fucom   st(1)
.text:004062AD                 fnstsw  ax
.text:004062AF                 sahf
.text:004062B0                 jbe     loc_406470
.text:004062B6                 fld     ds:flt_40623C
.text:004062BC                 fucomp  st(1)
.text:004062BE                 fnstsw  ax
.text:004062C0                 sahf
.text:004062C1                 jbe     loc_406470
.text:004062C7                 fld     dword ptr [ebx+0Ch]
.text:004062CA                 fld     ds:flt_406240
.text:004062D0                 fxch    st(1)
.text:004062D2                 fucompp
.text:004062D4                 fnstsw  ax
.text:004062D6                 sahf
.text:004062D7                 jbe     loc_406470
.text:004062DD                 fld     dword ptr [ebx]
.text:004062DF                 fldz
.text:004062E1                 fxch    st(1)
.text:004062E3                 fucom   st(1)
.text:004062E5                 fnstsw  ax
.text:004062E7                 fstp    st(1)
.text:004062E9                 sahf
.text:004062EA                 jb      loc_406477
.text:004062F0                 faddp   st(2), st
.text:004062F2                 fld     dword ptr [ebx+4]
.text:004062F5                 fucom   st(2)
.text:004062F7                 fnstsw  ax
.text:004062F9                 sahf
.text:004062FA                 jbe     loc_406477
.text:00406300                 fld1
.text:00406302                 fucompp
.text:00406304                 fnstsw  ax
.text:00406306                 sahf
.text:00406307                 jb      loc_406470
.text:0040630D                 fucom   st(1)
.text:0040630F                 fnstsw  ax
.text:00406311                 fstp    st(1)
.text:00406313                 sahf
.text:00406314                 ja      short loc_406347
.text:00406316                 lea     esi, [esi+0]
.text:00406319                 lea     edi, [edi+0]
.text:00406320
.text:00406320 loc_406320:                             ; CODE XREF: sub_406250+222↓j
.text:00406320                 fstp    st
.text:00406322                 mov     dword ptr [esi+14h], offset dword_406220
.text:00406329
.text:00406329 loc_406329:                             ; CODE XREF: sub_406250+155↓j
.text:00406329                                         ; sub_406250+1BF↓j ...
.text:00406329                 mov     [esp+3Ch+Size], esi ; Block
.text:0040632C                 call    free
.text:00406331
.text:00406331 loc_406331:                             ; CODE XREF: sub_406250+1D↑j
.text:00406331                                         ; sub_406250+29↑j
.text:00406331                 xor     eax, eax
.text:00406333
.text:00406333 loc_406333:                             ; CODE XREF: sub_406250+41↑j
.text:00406333                                         ; sub_406250+208↓j
.text:00406333                 mov     ebx, [esp+3Ch+var_10]
.text:00406337                 mov     esi, [esp+3Ch+var_C]
.text:0040633B                 mov     edi, [esp+3Ch+var_8]
.text:0040633F                 mov     ebp, [esp+3Ch+var_4]
.text:00406343                 add     esp, 3Ch
.text:00406346                 retn
.text:00406347 ; ---------------------------------------------------------------------------
.text:00406347
.text:00406347 loc_406347:                             ; CODE XREF: sub_406250+C4↑j
.text:00406347                 cmp     byte ptr [ebx+10h], 0
.text:0040634B                 jnz     loc_406464
.text:00406351                 fld     ds:flt_406238
.text:00406357                 xor     eax, eax
.text:00406359                 mov     ecx, [esp+3Ch+arg_0]
.text:0040635D                 push    eax
.text:0040635E                 push    ecx
.text:0040635F                 fild    [esp+44h+var_44]
.text:00406362                 add     esp, 8
.text:00406365                 fdivrp  st(2), st
.text:00406367                 fxch    st(1)
.text:00406369                 fucom   st(1)
.text:0040636B                 fnstsw  ax
.text:0040636D                 fstp    st(1)
.text:0040636F                 sahf
.text:00406370                 jnb     loc_40645D
.text:00406376                 fnstcw  [esp+3Ch+var_16]
.text:0040637A                 movzx   ebx, [esp+3Ch+var_16]
.text:0040637F                 or      bx, 0C00h
.text:00406384                 mov     [esp+3Ch+var_18], bx
.text:00406389                 fldcw   [esp+3Ch+var_18]
.text:0040638D                 fistp   [esp+3Ch+var_24]
.text:00406391                 fldcw   [esp+3Ch+var_16]
.text:00406395                 mov     edx, dword ptr [esp+3Ch+var_24]
.text:00406399                 mov     [esp+3Ch+arg_0], edx
.text:0040639D
.text:0040639D loc_40639D:                             ; CODE XREF: sub_406250+216↓j
.text:0040639D                 cmp     [esp+3Ch+arg_0], 1FFFFFFFh
.text:004063A5                 ja      short loc_406329
.text:004063A7                 mov     ecx, [esp+3Ch+arg_0]
.text:004063AB                 cmp     ecx, 9
.text:004063AE                 ja      short loc_4063B5
.text:004063B0                 mov     ecx, 0Ah
.text:004063B5
.text:004063B5 loc_4063B5:                             ; CODE XREF: sub_406250+15E↑j
.text:004063B5                 or      ecx, 1
.text:004063B8
.text:004063B8 loc_4063B8:                             ; CODE XREF: sub_406250+1B4↓j
.text:004063B8                 mov     [esp+3Ch+var_28], 3
.text:004063C0                 mov     edi, 9
.text:004063C5                 cmp     edi, ecx
.text:004063C7                 jnb     short loc_4063F5
.text:004063C9                 xor     edx, edx
.text:004063CB                 mov     eax, ecx
.text:004063CD                 div     [esp+3Ch+var_28]
.text:004063D1                 test    edx, edx
.text:004063D3                 jz      short loc_4063F5
.text:004063D5
.text:004063D5 loc_4063D5:                             ; CODE XREF: sub_406250+1A3↓j
.text:004063D5                 inc     [esp+3Ch+var_28]
.text:004063D9                 mov     edx, [esp+3Ch+var_28]
.text:004063DD                 lea     edi, [edi+edx*4]
.text:004063E0                 inc     edx
.text:004063E1                 cmp     edi, ecx
.text:004063E3                 mov     [esp+3Ch+var_28], edx
.text:004063E7                 jnb     short loc_4063F5
.text:004063E9                 xor     edx, edx
.text:004063EB                 mov     eax, ecx
.text:004063ED                 div     [esp+3Ch+var_28]
.text:004063F1                 test    edx, edx
.text:004063F3                 jnz     short loc_4063D5
.text:004063F5
.text:004063F5 loc_4063F5:                             ; CODE XREF: sub_406250+177↑j
.text:004063F5                                         ; sub_406250+183↑j ...
.text:004063F5                 xor     edx, edx
.text:004063F7                 mov     eax, ecx
.text:004063F9                 div     [esp+3Ch+var_28]
.text:004063FD                 test    edx, edx
.text:004063FF                 jnz     short loc_406406
.text:00406401                 add     ecx, 2
.text:00406404                 jmp     short loc_4063B8
.text:00406406 ; ---------------------------------------------------------------------------
.text:00406406
.text:00406406 loc_406406:                             ; CODE XREF: sub_406250+1AF↑j
.text:00406406                 mov     [esi+8], ecx
.text:00406409                 cmp     ecx, 1FFFFFFFh
.text:0040640F                 ja      loc_406329
.text:00406415                 mov     [esp+3Ch+Size], ecx ; Count
.text:00406418                 mov     [esp+3Ch+var_38], 8 ; Size
.text:00406420                 call    calloc
.text:00406425                 mov     [esi+18h], ebp
.text:00406428                 mov     ebx, [esi+8]
.text:0040642B                 mov     ebp, [esp+3Ch+arg_C]
.text:0040642F                 mov     [esi], eax
.text:00406431                 mov     edi, [esp+3Ch+arg_10]
.text:00406435                 lea     ecx, [eax+ebx*8]
.text:00406438                 mov     [esi+4], ecx
.text:0040643B                 mov     eax, esi
.text:0040643D                 mov     dword ptr [esi+0Ch], 0
.text:00406444                 mov     dword ptr [esi+10h], 0
.text:0040644B                 mov     [esi+1Ch], ebp
.text:0040644E                 mov     [esi+20h], edi
.text:00406451                 mov     dword ptr [esi+24h], 0
.text:00406458                 jmp     loc_406333
.text:0040645D ; ---------------------------------------------------------------------------
.text:0040645D
.text:0040645D loc_40645D:                             ; CODE XREF: sub_406250+120↑j
.text:0040645D                 fstp    st
.text:0040645F                 jmp     loc_406329
.text:00406464 ; ---------------------------------------------------------------------------
.text:00406464
.text:00406464 loc_406464:                             ; CODE XREF: sub_406250+FB↑j
.text:00406464                 fstp    st
.text:00406466                 jmp     loc_40639D
.text:00406466 ; ---------------------------------------------------------------------------
.text:0040646B                 align 10h
.text:00406470
.text:00406470 loc_406470:                             ; CODE XREF: sub_406250+60↑j
.text:00406470                                         ; sub_406250+71↑j ...
.text:00406470                 fstp    st
.text:00406472                 jmp     loc_406320
.text:00406477 ; ---------------------------------------------------------------------------
.text:00406477
.text:00406477 loc_406477:                             ; CODE XREF: sub_406250+9A↑j
.text:00406477                                         ; sub_406250+AA↑j
.text:00406477                 fstp    st
.text:00406479                 jmp     short loc_406470
.text:00406479 ; ---------------------------------------------------------------------------
.text:0040647B                 align 10h
.text:00406480
.text:00406480 loc_406480:                             ; CODE XREF: sub_406250+49↑j
.text:00406480                 mov     ebx, offset dword_406220
.text:00406485                 jmp     loc_40629F
.text:00406485 sub_406250      endp
.text:00406485
.text:00406485 ; ---------------------------------------------------------------------------
.text:0040648A                 align 10h
.text:00406490                 push    edi
.text:00406491                 push    esi
.text:00406492                 push    ebx
.text:00406493                 sub     esp, 10h
.text:00406496                 mov     edi, [esp+20h]
.text:0040649A                 mov     esi, [edi]
.text:0040649C                 mov     eax, [edi+4]
.text:0040649F                 cmp     esi, eax
.text:004064A1                 jnb     short loc_4064F7
.text:004064A3                 lea     esi, [esi+0]
.text:004064A9                 lea     edi, [edi+0]
.text:004064B0
.text:004064B0 loc_4064B0:                             ; CODE XREF: .text:004064F5↓j
.text:004064B0                 mov     ecx, [esi]
.text:004064B2                 test    ecx, ecx
.text:004064B4                 jz      short loc_4064F0
.text:004064B6                 mov     ebx, [esi+4]
.text:004064B9                 test    ebx, ebx
.text:004064BB                 jz      short loc_406521
.text:004064BD                 mov     ecx, [edi+20h]
.text:004064C0
.text:004064C0 loc_4064C0:                             ; CODE XREF: .text:004064DA↓j
.text:004064C0                 test    ecx, ecx
.text:004064C2                 jnz     short loc_406515
.text:004064C4
.text:004064C4 loc_4064C4:                             ; CODE XREF: .text:0040651F↓j
.text:004064C4                 mov     dword ptr [ebx], 0
.text:004064CA                 mov     edx, [ebx+4]
.text:004064CD                 mov     eax, [edi+24h]
.text:004064D0                 test    edx, edx
.text:004064D2                 mov     [ebx+4], eax
.text:004064D5                 mov     [edi+24h], ebx
.text:004064D8                 mov     ebx, edx
.text:004064DA                 jnz     short loc_4064C0
.text:004064DC
.text:004064DC loc_4064DC:                             ; CODE XREF: .text:00406524↓j
.text:004064DC                 test    ecx, ecx
.text:004064DE                 jnz     short loc_40650C
.text:004064E0
.text:004064E0 loc_4064E0:                             ; CODE XREF: .text:00406513↓j
.text:004064E0                 mov     dword ptr [esi+4], 0
.text:004064E7                 mov     eax, [edi+4]
.text:004064EA                 mov     dword ptr [esi], 0
.text:004064F0
.text:004064F0 loc_4064F0:                             ; CODE XREF: .text:004064B4↑j
.text:004064F0                 add     esi, 8
.text:004064F3                 cmp     esi, eax
.text:004064F5                 jb      short loc_4064B0
.text:004064F7
.text:004064F7 loc_4064F7:                             ; CODE XREF: .text:004064A1↑j
.text:004064F7                 mov     dword ptr [edi+0Ch], 0
.text:004064FE                 mov     dword ptr [edi+10h], 0
.text:00406505                 add     esp, 10h
.text:00406508                 pop     ebx
.text:00406509                 pop     esi
.text:0040650A                 pop     edi
.text:0040650B                 retn
.text:0040650C ; ---------------------------------------------------------------------------
.text:0040650C
.text:0040650C loc_40650C:                             ; CODE XREF: .text:004064DE↑j
.text:0040650C                 mov     ebx, [esi]
.text:0040650E                 mov     [esp], ebx
.text:00406511                 call    ecx
.text:00406513                 jmp     short loc_4064E0
.text:00406515 ; ---------------------------------------------------------------------------
.text:00406515
.text:00406515 loc_406515:                             ; CODE XREF: .text:004064C2↑j
.text:00406515                 mov     edx, [ebx]
.text:00406517                 mov     [esp], edx
.text:0040651A                 call    ecx
.text:0040651C                 mov     ecx, [edi+20h]
.text:0040651F                 jmp     short loc_4064C4
.text:00406521 ; ---------------------------------------------------------------------------
.text:00406521
.text:00406521 loc_406521:                             ; CODE XREF: .text:004064BB↑j
.text:00406521                 mov     ecx, [edi+20h]
.text:00406524                 jmp     short loc_4064DC
.text:00406524 ; ---------------------------------------------------------------------------
.text:00406526                 align 10h
.text:00406530
.text:00406530 ; =============== S U B R O U T I N E =======================================
.text:00406530
.text:00406530
.text:00406530 ; int __cdecl sub_406530(void *)
.text:00406530 sub_406530      proc near               ; CODE XREF: sub_403580+2B3↑p
.text:00406530
.text:00406530 Block           = dword ptr -1Ch
.text:00406530 arg_0           = dword ptr  4
.text:00406530
.text:00406530                 push    ebp
.text:00406531                 push    edi
.text:00406532                 push    esi
.text:00406533                 push    ebx
.text:00406534                 sub     esp, 0Ch
.text:00406537                 mov     ebp, [esp+1Ch+arg_0]
.text:0040653B                 mov     eax, [ebp+20h]
.text:0040653E                 test    eax, eax
.text:00406540                 jz      loc_40660C
.text:00406546                 mov     eax, [ebp+10h]
.text:00406549                 test    eax, eax
.text:0040654B                 jz      loc_40660C
.text:00406551                 mov     edi, [ebp+0]
.text:00406554                 mov     eax, [ebp+4]
.text:00406557                 cmp     edi, eax
.text:00406559                 jnb     short loc_4065CB
.text:0040655B
.text:0040655B loc_40655B:                             ; CODE XREF: sub_406530+57↓j
.text:0040655B                 mov     edx, [edi]
.text:0040655D                 test    edx, edx
.text:0040655F                 jz      short loc_406582
.text:00406561                 test    edi, edi
.text:00406563                 mov     ebx, edi
.text:00406565                 jz      short loc_406582
.text:00406567                 mov     esi, esi
.text:00406569                 lea     edi, [edi+0]
.text:00406570
.text:00406570 loc_406570:                             ; CODE XREF: sub_406530+4D↓j
.text:00406570                 mov     ecx, [ebx]
.text:00406572                 mov     [esp+1Ch+Block], ecx
.text:00406575                 call    dword ptr [ebp+20h]
.text:00406578                 mov     ebx, [ebx+4]
.text:0040657B                 test    ebx, ebx
.text:0040657D                 jnz     short loc_406570
.text:0040657F                 mov     eax, [ebp+4]
.text:00406582
.text:00406582 loc_406582:                             ; CODE XREF: sub_406530+2F↑j
.text:00406582                                         ; sub_406530+35↑j
.text:00406582                 add     edi, 8
.text:00406585                 cmp     edi, eax
.text:00406587                 jb      short loc_40655B
.text:00406589                 mov     edx, [ebp+0]
.text:0040658C
.text:0040658C loc_40658C:                             ; CODE XREF: sub_406530+E2↓j
.text:0040658C                 cmp     edx, eax
.text:0040658E                 mov     edi, edx
.text:00406590                 jnb     short loc_4065CB
.text:00406592                 lea     esi, [esi+0]
.text:00406599                 lea     edi, [edi+0]
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_406530+99↓j
.text:004065A0                 mov     ebx, [edi+4]
.text:004065A3                 test    ebx, ebx
.text:004065A5                 jz      short loc_4065C4
.text:004065A7                 mov     esi, esi
.text:004065A9                 lea     edi, [edi+0]
.text:004065B0
.text:004065B0 loc_4065B0:                             ; CODE XREF: sub_406530+8F↓j
.text:004065B0                 mov     esi, [ebx+4]
.text:004065B3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004065B6                 call    free
.text:004065BB                 test    esi, esi
.text:004065BD                 mov     ebx, esi
.text:004065BF                 jnz     short loc_4065B0
.text:004065C1                 mov     eax, [ebp+4]
.text:004065C4
.text:004065C4 loc_4065C4:                             ; CODE XREF: sub_406530+75↑j
.text:004065C4                 add     edi, 8
.text:004065C7                 cmp     edi, eax
.text:004065C9                 jb      short loc_4065A0
.text:004065CB
.text:004065CB loc_4065CB:                             ; CODE XREF: sub_406530+29↑j
.text:004065CB                                         ; sub_406530+60↑j
.text:004065CB                 mov     ebx, [ebp+24h]
.text:004065CE                 test    ebx, ebx
.text:004065D0                 jz      short loc_4065F1
.text:004065D2                 lea     esi, [esi+0]
.text:004065D9                 lea     edi, [edi+0]
.text:004065E0
.text:004065E0 loc_4065E0:                             ; CODE XREF: sub_406530+BF↓j
.text:004065E0                 mov     edi, [ebx+4]
.text:004065E3                 mov     [esp+1Ch+Block], ebx ; Block
.text:004065E6                 call    free
.text:004065EB                 test    edi, edi
.text:004065ED                 mov     ebx, edi
.text:004065EF                 jnz     short loc_4065E0
.text:004065F1
.text:004065F1 loc_4065F1:                             ; CODE XREF: sub_406530+A0↑j
.text:004065F1                 mov     ebx, [ebp+0]
.text:004065F4                 mov     [esp+1Ch+Block], ebx ; Block
.text:004065F7                 call    free
.text:004065FC                 mov     [esp+1Ch+arg_0], ebp ; Block
.text:00406600                 add     esp, 0Ch
.text:00406603                 pop     ebx
.text:00406604                 pop     esi
.text:00406605                 pop     edi
.text:00406606                 pop     ebp
.text:00406607                 jmp     free
.text:0040660C ; ---------------------------------------------------------------------------
.text:0040660C
.text:0040660C loc_40660C:                             ; CODE XREF: sub_406530+10↑j
.text:0040660C                                         ; sub_406530+1B↑j
.text:0040660C                 mov     edx, [ebp+0]
.text:0040660F                 mov     eax, [ebp+4]
.text:00406612                 jmp     loc_40658C
.text:00406612 sub_406530      endp
.text:00406612
.text:00406612 ; ---------------------------------------------------------------------------
.text:00406617                 align 10h
.text:00406620
.text:00406620 ; =============== S U B R O U T I N E =======================================
.text:00406620
.text:00406620
.text:00406620 sub_406620      proc near               ; CODE XREF: sub_4067A0+1B2↓p
.text:00406620
.text:00406620 Block           = dword ptr -2Ch
.text:00406620 var_28          = dword ptr -28h
.text:00406620 var_24          = dword ptr -24h
.text:00406620 var_20          = dword ptr -20h
.text:00406620 var_1C          = dword ptr -1Ch
.text:00406620 var_18          = dword ptr -18h
.text:00406620 var_14          = dword ptr -14h
.text:00406620 arg_0           = dword ptr  4
.text:00406620 arg_4           = dword ptr  8
.text:00406620
.text:00406620                 push    ebp
.text:00406621                 push    edi
.text:00406622                 push    esi
.text:00406623                 push    ebx
.text:00406624                 sub     esp, 1Ch
.text:00406627                 mov     ebx, [esp+2Ch+arg_0]
.text:0040662B                 mov     edi, [ebx+20h]
.text:0040662E                 mov     [esp+2Ch+var_1C], edi
.text:00406632                 mov     esi, [ebx+1Ch]
.text:00406635                 mov     [esp+2Ch+var_20], esi
.text:00406639                 mov     edx, [ebx+18h]
.text:0040663C                 mov     [esp+2Ch+var_24], edx
.text:00406640                 mov     ecx, [ebx+14h]
.text:00406643                 mov     edx, [esp+2Ch+arg_4]
.text:00406647                 mov     [esp+2Ch+var_28], ecx
.text:0040664B                 mov     [esp+2Ch+Block], edx
.text:0040664E                 call    sub_406250
.text:00406653                 mov     edi, eax
.text:00406655                 xor     eax, eax
.text:00406657                 test    edi, edi
.text:00406659                 jz      loc_406722
.text:0040665F                 mov     ebp, [esp+2Ch+arg_0]
.text:00406663                 mov     edx, [ebp+0]
.text:00406666                 mov     eax, [ebp+4]
.text:00406669                 mov     ecx, [ebp+24h]
.text:0040666C                 mov     [esp+2Ch+var_14], edx
.text:00406670                 cmp     edx, eax
.text:00406672                 mov     [edi+24h], ecx
.text:00406675                 jnb     short loc_4066ED
.text:00406677                 mov     esi, esi
.text:00406679                 lea     edi, [edi+0]
.text:00406680
.text:00406680 loc_406680:                             ; CODE XREF: sub_406620+C5↓j
.text:00406680                 mov     edx, [esp+2Ch+var_14]
.text:00406684                 mov     ebx, [edx]
.text:00406686                 test    ebx, ebx
.text:00406688                 jz      short loc_4066DC
.text:0040668A                 mov     ebx, edx
.text:0040668C                 lea     esi, [esi+0]
.text:00406690
.text:00406690 loc_406690:                             ; CODE XREF: sub_406620+B3↓j
.text:00406690                 mov     ebp, [ebx]
.text:00406692                 mov     edx, [edi+8]
.text:00406695                 mov     [esp+2Ch+Block], ebp
.text:00406698                 mov     [esp+2Ch+var_28], edx
.text:0040669C                 call    dword ptr [edi+18h]
.text:0040669F                 mov     ecx, [edi]
.text:004066A1                 lea     esi, [ecx+eax*8]
.text:004066A4                 cmp     esi, [edi+4]
.text:004066A7                 jnb     loc_406783
.text:004066AD                 mov     ecx, [esi]
.text:004066AF                 mov     eax, [ebx+4]
.text:004066B2                 test    ecx, ecx
.text:004066B4                 mov     [esp+2Ch+var_18], eax
.text:004066B8                 jz      loc_406760
.text:004066BE                 cmp     ebx, [esp+2Ch+var_14]
.text:004066C2                 jz      short loc_40672A
.text:004066C4                 mov     edx, [esi+4]
.text:004066C7                 mov     [ebx+4], edx
.text:004066CA                 mov     [esi+4], ebx
.text:004066CD
.text:004066CD loc_4066CD:                             ; CODE XREF: sub_406620+12A↓j
.text:004066CD                                         ; sub_406620+149↓j ...
.text:004066CD                 mov     ebx, [esp+2Ch+var_18]
.text:004066D1                 test    ebx, ebx
.text:004066D3                 jnz     short loc_406690
.text:004066D5                 mov     ecx, [esp+2Ch+arg_0]
.text:004066D9                 mov     eax, [ecx+4]
.text:004066DC
.text:004066DC loc_4066DC:                             ; CODE XREF: sub_406620+68↑j
.text:004066DC                 add     [esp+2Ch+var_14], 8
.text:004066E1                 cmp     [esp+2Ch+var_14], eax
.text:004066E5                 jb      short loc_406680
.text:004066E7                 mov     eax, [esp+2Ch+arg_0]
.text:004066EB                 mov     edx, [eax]
.text:004066ED
.text:004066ED loc_4066ED:                             ; CODE XREF: sub_406620+55↑j
.text:004066ED                 mov     [esp+2Ch+Block], edx ; Block
.text:004066F0                 call    free
.text:004066F5                 mov     ebx, [esp+2Ch+arg_0]
.text:004066F9                 mov     ebp, [edi]
.text:004066FB                 mov     ecx, [edi+4]
.text:004066FE                 mov     esi, [edi+8]
.text:00406701                 mov     edx, [edi+0Ch]
.text:00406704                 mov     [ebx], ebp
.text:00406706                 mov     ebp, [edi+24h]
.text:00406709                 mov     [ebx+4], ecx
.text:0040670C                 mov     [ebx+8], esi
.text:0040670F                 mov     [ebx+0Ch], edx
.text:00406712                 mov     [ebx+24h], ebp
.text:00406715                 mov     [esp+2Ch+Block], edi ; Block
.text:00406718                 call    free
.text:0040671D                 mov     eax, 1
.text:00406722
.text:00406722 loc_406722:                             ; CODE XREF: sub_406620+39↑j
.text:00406722                                         ; sub_406620+11D↓j
.text:00406722                 add     esp, 1Ch
.text:00406725                 pop     ebx
.text:00406726                 pop     esi
.text:00406727                 pop     edi
.text:00406728                 pop     ebp
.text:00406729                 retn
.text:0040672A ; ---------------------------------------------------------------------------
.text:0040672A
.text:0040672A loc_40672A:                             ; CODE XREF: sub_406620+A2↑j
.text:0040672A                 mov     eax, [edi+24h]
.text:0040672D                 test    eax, eax
.text:0040672F                 jz      short loc_40674C
.text:00406731                 mov     ebx, [eax+4]
.text:00406734                 mov     edx, eax
.text:00406736                 mov     [edi+24h], ebx
.text:00406739
.text:00406739 loc_406739:                             ; CODE XREF: sub_406620+13A↓j
.text:00406739                 xor     eax, eax
.text:0040673B                 test    edx, edx
.text:0040673D                 jz      short loc_406722
.text:0040673F                 mov     [edx], ebp
.text:00406741                 mov     ebp, [esi+4]
.text:00406744                 mov     [edx+4], ebp
.text:00406747                 mov     [esi+4], edx
.text:0040674A                 jmp     short loc_4066CD
.text:0040674C ; ---------------------------------------------------------------------------
.text:0040674C
.text:0040674C loc_40674C:                             ; CODE XREF: sub_406620+10F↑j
.text:0040674C                 mov     [esp+2Ch+Block], 8 ; Size
.text:00406753                 call    malloc
.text:00406758                 mov     edx, eax
.text:0040675A                 jmp     short loc_406739
.text:0040675A ; ---------------------------------------------------------------------------
.text:0040675C                 align 10h
.text:00406760
.text:00406760 loc_406760:                             ; CODE XREF: sub_406620+98↑j
.text:00406760                 inc     dword ptr [edi+0Ch]
.text:00406763                 cmp     ebx, [esp+2Ch+var_14]
.text:00406767                 mov     [esi], ebp
.text:00406769                 jz      loc_4066CD
.text:0040676F                 mov     dword ptr [ebx], 0
.text:00406775                 mov     esi, [edi+24h]
.text:00406778                 mov     [ebx+4], esi
.text:0040677B                 mov     [edi+24h], ebx
.text:0040677E                 jmp     loc_4066CD
.text:00406783 ; ---------------------------------------------------------------------------
.text:00406783
.text:00406783 loc_406783:                             ; CODE XREF: sub_406620+87↑j
.text:00406783                 call    abort
.text:00406783 sub_406620      endp
.text:00406783
.text:00406783 ; ---------------------------------------------------------------------------
.text:00406788 flt_406788      dd 0.1                  ; DATA XREF: sub_4067A0+C3↓r
.text:0040678C flt_40678C      dd 4.2949673e9          ; DATA XREF: sub_4067A0:loc_406917↓r
.text:00406790 flt_406790      dd 0.89999998           ; DATA XREF: sub_4067A0+D6↓r
.text:00406794 flt_406794      dd 1.1                  ; DATA XREF: sub_4067A0+EA↓r
.text:00406798                 align 10h
.text:004067A0
.text:004067A0 ; =============== S U B R O U T I N E =======================================
.text:004067A0
.text:004067A0
.text:004067A0 sub_4067A0      proc near               ; CODE XREF: sub_4026E0+4A6↑p
.text:004067A0                                         ; sub_4026E0+7FF↑p ...
.text:004067A0
.text:004067A0 var_34          = qword ptr -34h
.text:004067A0 Size            = dword ptr -2Ch
.text:004067A0 var_28          = dword ptr -28h
.text:004067A0 var_24          = dword ptr -24h
.text:004067A0 var_20          = dword ptr -20h
.text:004067A0 var_1C          = qword ptr -1Ch
.text:004067A0 var_14          = word ptr -14h
.text:004067A0 var_12          = word ptr -12h
.text:004067A0 var_10          = dword ptr -10h
.text:004067A0 var_8           = dword ptr -8
.text:004067A0 var_4           = dword ptr -4
.text:004067A0 arg_0           = dword ptr  4
.text:004067A0 arg_4           = dword ptr  8
.text:004067A0
.text:004067A0                 sub     esp, 2Ch
.text:004067A3                 mov     [esp+2Ch+var_8], ebx
.text:004067A7                 mov     ebx, [esp+2Ch+arg_4]
.text:004067AB                 mov     [esp+2Ch+var_4], esi
.text:004067AF                 mov     esi, [esp+2Ch+arg_0]
.text:004067B3                 test    ebx, ebx
.text:004067B5                 jz      loc_40698A
.text:004067BB                 mov     [esp+2Ch+var_20], 0
.text:004067C3                 lea     edx, [esp+2Ch+var_10]
.text:004067C7                 mov     [esp+2Ch+var_24], edx
.text:004067CB                 mov     [esp+2Ch+var_28], ebx
.text:004067CF                 mov     [esp+2Ch+Size], esi
.text:004067D2                 call    sub_407000
.text:004067D7                 test    eax, eax
.text:004067D9                 jz      short loc_4067E7
.text:004067DB
.text:004067DB loc_4067DB:                             ; CODE XREF: sub_4067A0+64↓j
.text:004067DB                                         ; sub_4067A0+7A↓j ...
.text:004067DB                 mov     ebx, [esp+2Ch+var_8]
.text:004067DF                 mov     esi, [esp+2Ch+var_4]
.text:004067E3                 add     esp, 2Ch
.text:004067E6                 retn
.text:004067E7 ; ---------------------------------------------------------------------------
.text:004067E7
.text:004067E7 loc_4067E7:                             ; CODE XREF: sub_4067A0+39↑j
.text:004067E7                 mov     eax, [esp+2Ch+var_10]
.text:004067EB                 mov     ecx, [eax]
.text:004067ED                 test    ecx, ecx
.text:004067EF                 jz      short loc_40682C
.text:004067F1                 mov     eax, [esi+24h]
.text:004067F4                 test    eax, eax
.text:004067F6                 jz      short loc_40681C
.text:004067F8                 mov     edx, [eax+4]
.text:004067FB                 mov     ecx, eax
.text:004067FD                 mov     [esi+24h], edx
.text:00406800
.text:00406800 loc_406800:                             ; CODE XREF: sub_4067A0+8A↓j
.text:00406800                 xor     eax, eax
.text:00406802                 test    ecx, ecx
.text:00406804                 jz      short loc_4067DB
.text:00406806                 inc     dword ptr [esi+10h]
.text:00406809                 mov     edx, [esp+2Ch+var_10]
.text:0040680D                 mov     [ecx], ebx
.text:0040680F                 mov     eax, [edx+4]
.text:00406812                 mov     [ecx+4], eax
.text:00406815                 mov     [edx+4], ecx
.text:00406818
.text:00406818 loc_406818:                             ; CODE XREF: sub_4067A0+1C2↓j
.text:00406818                                         ; sub_4067A0+1D8↓j
.text:00406818                 mov     eax, ebx
.text:0040681A                 jmp     short loc_4067DB
.text:0040681C ; ---------------------------------------------------------------------------
.text:0040681C
.text:0040681C loc_40681C:                             ; CODE XREF: sub_4067A0+56↑j
.text:0040681C                 mov     [esp+2Ch+Size], 8 ; Size
.text:00406823                 call    malloc
.text:00406828                 mov     ecx, eax
.text:0040682A                 jmp     short loc_406800
.text:0040682C ; ---------------------------------------------------------------------------
.text:0040682C
.text:0040682C loc_40682C:                             ; CODE XREF: sub_4067A0+4F↑j
.text:0040682C                 inc     dword ptr [esi+0Ch]
.text:0040682F                 xor     edx, edx
.text:00406831                 mov     [eax], ebx
.text:00406833                 xor     eax, eax
.text:00406835                 mov     ecx, [esi+0Ch]
.text:00406838                 inc     dword ptr [esi+10h]
.text:0040683B                 push    eax
.text:0040683C                 push    ecx
.text:0040683D                 mov     eax, [esi+8]
.text:00406840                 mov     ecx, [esi+14h]
.text:00406843                 fild    [esp+34h+var_34]
.text:00406846                 add     esp, 8
.text:00406849                 push    edx
.text:0040684A                 push    eax
.text:0040684B                 fild    [esp+34h+var_34]
.text:0040684E                 add     esp, 8
.text:00406851                 fld     dword ptr [ecx+8]
.text:00406854                 fmul    st(1), st
.text:00406856                 fxch    st(2)
.text:00406858                 fucompp
.text:0040685A                 fnstsw  ax
.text:0040685C                 sahf
.text:0040685D                 jbe     loc_406976
.text:00406863                 fld     ds:flt_406788
.text:00406869                 fxch    st(1)
.text:0040686B                 fucom   st(1)
.text:0040686D                 fnstsw  ax
.text:0040686F                 sahf
.text:00406870                 jbe     loc_40697D
.text:00406876                 fld     ds:flt_406790
.text:0040687C                 fucomp  st(1)
.text:0040687E                 fnstsw  ax
.text:00406880                 sahf
.text:00406881                 jbe     loc_40697D
.text:00406887                 fld     dword ptr [ecx+0Ch]
.text:0040688A                 fld     ds:flt_406794
.text:00406890                 fxch    st(1)
.text:00406892                 fucompp
.text:00406894                 fnstsw  ax
.text:00406896                 sahf
.text:00406897                 jbe     loc_40697D
.text:0040689D                 fld     dword ptr [ecx]
.text:0040689F                 fldz
.text:004068A1                 fxch    st(1)
.text:004068A3                 fucom   st(1)
.text:004068A5                 fnstsw  ax
.text:004068A7                 fstp    st(1)
.text:004068A9                 sahf
.text:004068AA                 jb      loc_406986
.text:004068B0                 faddp   st(2), st
.text:004068B2                 fld     dword ptr [ecx+4]
.text:004068B5                 fucom   st(2)
.text:004068B7                 fnstsw  ax
.text:004068B9                 sahf
.text:004068BA                 jbe     loc_406986
.text:004068C0                 fld1
.text:004068C2                 fucompp
.text:004068C4                 fnstsw  ax
.text:004068C6                 sahf
.text:004068C7                 jb      loc_40697D
.text:004068CD                 fucompp
.text:004068CF                 fnstsw  ax
.text:004068D1                 sahf
.text:004068D2                 ja      short loc_4068E0
.text:004068D4
.text:004068D4 loc_4068D4:                             ; CODE XREF: sub_4067A0+1E1↓j
.text:004068D4                 mov     dword ptr [esi+14h], offset dword_406220
.text:004068DB                 mov     ecx, offset dword_406220
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: sub_4067A0+132↑j
.text:004068E0                 mov     eax, [esi+0Ch]
.text:004068E3                 xor     edx, edx
.text:004068E5                 push    edx
.text:004068E6                 xor     edx, edx
.text:004068E8                 push    eax
.text:004068E9                 mov     eax, [esi+8]
.text:004068EC                 fild    [esp+34h+var_34]
.text:004068EF                 add     esp, 8
.text:004068F2                 push    edx
.text:004068F3                 push    eax
.text:004068F4                 fild    [esp+34h+var_34]
.text:004068F7                 add     esp, 8
.text:004068FA                 fld     dword ptr [ecx+8]
.text:004068FD                 fld     st
.text:004068FF                 fmul    st, st(2)
.text:00406901                 fxch    st(3)
.text:00406903                 fucomp  st(3)
.text:00406905                 fnstsw  ax
.text:00406907                 fstp    st(2)
.text:00406909                 sahf
.text:0040690A                 jbe     short loc_406974
.text:0040690C                 cmp     byte ptr [ecx+10h], 0
.text:00406910                 fmul    dword ptr [ecx+0Ch]
.text:00406913                 jnz     short loc_406970
.text:00406915                 fmulp   st(1), st
.text:00406917
.text:00406917 loc_406917:                             ; CODE XREF: sub_4067A0+1D2↓j
.text:00406917                 fld     ds:flt_40678C
.text:0040691D                 fxch    st(1)
.text:0040691F                 fucom   st(1)
.text:00406921                 fnstsw  ax
.text:00406923                 fstp    st(1)
.text:00406925                 sahf
.text:00406926                 jnb     short loc_406967
.text:00406928                 fnstcw  [esp+2Ch+var_12]
.text:0040692C                 movzx   edx, [esp+2Ch+var_12]
.text:00406931                 mov     [esp+2Ch+Size], esi
.text:00406934                 or      dx, 0C00h
.text:00406939                 mov     [esp+2Ch+var_14], dx
.text:0040693E                 fldcw   [esp+2Ch+var_14]
.text:00406942                 fistp   [esp+2Ch+var_1C]
.text:00406946                 fldcw   [esp+2Ch+var_12]
.text:0040694A                 mov     ecx, dword ptr [esp+2Ch+var_1C]
.text:0040694E                 mov     [esp+2Ch+var_28], ecx
.text:00406952                 call    sub_406620
.text:00406957                 test    al, al
.text:00406959                 setz    dl
.text:0040695C                 movzx   esi, dl
.text:0040695F                 dec     esi
.text:00406960                 and     ebx, esi
.text:00406962                 jmp     loc_406818
.text:00406967 ; ---------------------------------------------------------------------------
.text:00406967
.text:00406967 loc_406967:                             ; CODE XREF: sub_4067A0+186↑j
.text:00406967                 fstp    st
.text:00406969                 xor     eax, eax
.text:0040696B                 jmp     loc_4067DB
.text:00406970 ; ---------------------------------------------------------------------------
.text:00406970
.text:00406970 loc_406970:                             ; CODE XREF: sub_4067A0+173↑j
.text:00406970                 fstp    st(1)
.text:00406972                 jmp     short loc_406917
.text:00406974 ; ---------------------------------------------------------------------------
.text:00406974
.text:00406974 loc_406974:                             ; CODE XREF: sub_4067A0+16A↑j
.text:00406974                 fstp    st
.text:00406976
.text:00406976 loc_406976:                             ; CODE XREF: sub_4067A0+BD↑j
.text:00406976                 fstp    st
.text:00406978                 jmp     loc_406818
.text:0040697D ; ---------------------------------------------------------------------------
.text:0040697D
.text:0040697D loc_40697D:                             ; CODE XREF: sub_4067A0+D0↑j
.text:0040697D                                         ; sub_4067A0+E1↑j ...
.text:0040697D                 fstp    st
.text:0040697F                 fstp    st
.text:00406981                 jmp     loc_4068D4
.text:00406986 ; ---------------------------------------------------------------------------
.text:00406986
.text:00406986 loc_406986:                             ; CODE XREF: sub_4067A0+10A↑j
.text:00406986                                         ; sub_4067A0+11A↑j
.text:00406986                 fstp    st
.text:00406988                 jmp     short loc_40697D
.text:0040698A ; ---------------------------------------------------------------------------
.text:0040698A
.text:0040698A loc_40698A:                             ; CODE XREF: sub_4067A0+15↑j
.text:0040698A                 call    abort
.text:0040698A sub_4067A0      endp
.text:0040698A
.text:0040698A ; ---------------------------------------------------------------------------
.text:0040698F                 align 10h
.text:00406990                 mov     edx, [esp+4]
.text:00406994                 mov     eax, [edx+8]
.text:00406997                 retn
.text:00406997 ; ---------------------------------------------------------------------------
.text:00406998                 align 10h
.text:004069A0                 mov     edx, [esp+4]
.text:004069A4                 mov     eax, [edx+0Ch]
.text:004069A7                 retn
.text:004069A7 ; ---------------------------------------------------------------------------
.text:004069A8                 align 10h
.text:004069B0                 mov     edx, [esp+4]
.text:004069B4                 mov     eax, [edx+10h]
.text:004069B7                 retn
.text:004069B7 ; ---------------------------------------------------------------------------
.text:004069B8                 align 10h
.text:004069C0                 push    esi
.text:004069C1                 xor     esi, esi
.text:004069C3                 push    ebx
.text:004069C4                 mov     edx, [esp+0Ch]
.text:004069C8                 mov     ecx, [edx]
.text:004069CA                 mov     ebx, [edx+4]
.text:004069CD                 cmp     ecx, ebx
.text:004069CF                 jnb     short loc_406A17
.text:004069D1                 jmp     short loc_4069E0
.text:004069D1 ; ---------------------------------------------------------------------------
.text:004069D3                 align 10h
.text:004069E0
.text:004069E0 loc_4069E0:                             ; CODE XREF: .text:004069D1↑j
.text:004069E0                                         ; .text:00406A15↓j
.text:004069E0                 mov     edx, [ecx]
.text:004069E2                 test    edx, edx
.text:004069E4                 jz      short loc_406A10
.text:004069E6                 mov     eax, [ecx+4]
.text:004069E9                 mov     edx, 1
.text:004069EE                 test    eax, eax
.text:004069F0                 jz      short loc_406A08
.text:004069F2                 lea     esi, [esi+0]
.text:004069F9                 lea     edi, [edi+0]
.text:00406A00
.text:00406A00 loc_406A00:                             ; CODE XREF: .text:00406A06↓j
.text:00406A00                 mov     eax, [eax+4]
.text:00406A03                 inc     edx
.text:00406A04                 test    eax, eax
.text:00406A06                 jnz     short loc_406A00
.text:00406A08
.text:00406A08 loc_406A08:                             ; CODE XREF: .text:004069F0↑j
.text:00406A08                 cmp     edx, esi
.text:00406A0A                 jbe     short loc_406A10
.text:00406A0C                 mov     esi, edx
.text:00406A0E                 mov     esi, esi
.text:00406A10
.text:00406A10 loc_406A10:                             ; CODE XREF: .text:004069E4↑j
.text:00406A10                                         ; .text:00406A0A↑j
.text:00406A10                 add     ecx, 8
.text:00406A13                 cmp     ecx, ebx
.text:00406A15                 jb      short loc_4069E0
.text:00406A17
.text:00406A17 loc_406A17:                             ; CODE XREF: .text:004069CF↑j
.text:00406A17                 pop     ebx
.text:00406A18                 mov     eax, esi
.text:00406A1A                 pop     esi
.text:00406A1B                 retn
.text:00406A1B ; ---------------------------------------------------------------------------
.text:00406A1C                 align 10h
.text:00406A20                 push    edi
.text:00406A21                 xor     ecx, ecx
.text:00406A23                 push    esi
.text:00406A24                 xor     esi, esi
.text:00406A26                 push    ebx
.text:00406A27                 mov     edi, [esp+10h]
.text:00406A2B                 mov     edx, [edi]
.text:00406A2D                 mov     ebx, [edi+4]
.text:00406A30                 cmp     edx, ebx
.text:00406A32                 jnb     short loc_406A5F
.text:00406A34                 lea     esi, [esi+0]
.text:00406A3A                 lea     edi, [edi+0]
.text:00406A40
.text:00406A40 loc_406A40:                             ; CODE XREF: .text:00406A5D↓j
.text:00406A40                 mov     eax, [edx]
.text:00406A42                 test    eax, eax
.text:00406A44                 jz      short loc_406A58
.text:00406A46                 mov     eax, [edx+4]
.text:00406A49                 inc     esi
.text:00406A4A                 inc     ecx
.text:00406A4B                 test    eax, eax
.text:00406A4D                 jz      short loc_406A58
.text:00406A4F                 nop
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: .text:00406A56↓j
.text:00406A50                 mov     eax, [eax+4]
.text:00406A53                 inc     ecx
.text:00406A54                 test    eax, eax
.text:00406A56                 jnz     short loc_406A50
.text:00406A58
.text:00406A58 loc_406A58:                             ; CODE XREF: .text:00406A44↑j
.text:00406A58                                         ; .text:00406A4D↑j
.text:00406A58                 add     edx, 8
.text:00406A5B                 cmp     edx, ebx
.text:00406A5D                 jb      short loc_406A40
.text:00406A5F
.text:00406A5F loc_406A5F:                             ; CODE XREF: .text:00406A32↑j
.text:00406A5F                 cmp     esi, [edi+0Ch]
.text:00406A62                 jz      short loc_406A6A
.text:00406A64
.text:00406A64 loc_406A64:                             ; CODE XREF: .text:00406A6D↓j
.text:00406A64                 xor     eax, eax
.text:00406A66
.text:00406A66 loc_406A66:                             ; CODE XREF: .text:00406A74↓j
.text:00406A66                 pop     ebx
.text:00406A67                 pop     esi
.text:00406A68                 pop     edi
.text:00406A69                 retn
.text:00406A6A ; ---------------------------------------------------------------------------
.text:00406A6A
.text:00406A6A loc_406A6A:                             ; CODE XREF: .text:00406A62↑j
.text:00406A6A                 cmp     ecx, [edi+10h]
.text:00406A6D                 jnz     short loc_406A64
.text:00406A6F                 mov     eax, 1
.text:00406A74                 jmp     short loc_406A66
.text:00406A74 ; ---------------------------------------------------------------------------
.text:00406A76 aEntriesLu      db '# entries:         %lu',0Ah,0
.text:00406A76                                         ; DATA XREF: .text:00406B6E↓o
.text:00406A8E aBucketsLu      db '# buckets:         %lu',0Ah,0
.text:00406A8E                                         ; DATA XREF: .text:00406B86↓o
.text:00406AA6                 align 20h
.text:00406AC0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.text:00406AC0                                         ; DATA XREF: .text:00406BC0↓o
.text:00406AE1 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.text:00406AE1                                         ; DATA XREF: .text:00406BDA↓o
.text:00406AF9                 db 8Dh, 76h, 0
.text:00406AFC flt_406AFC      dd 100.0                ; DATA XREF: .text:00406BB3↓r
.text:00406B00 ; ---------------------------------------------------------------------------
.text:00406B00                 push    ebp
.text:00406B01                 push    edi
.text:00406B02                 push    esi
.text:00406B03                 xor     esi, esi
.text:00406B05                 push    ebx
.text:00406B06                 sub     esp, 1Ch
.text:00406B09                 mov     ebx, [esp+30h]
.text:00406B0D                 mov     edi, [esp+34h]
.text:00406B11                 mov     ecx, [ebx+10h]
.text:00406B14                 mov     eax, [ebx+0Ch]
.text:00406B17                 mov     ebp, [ebx+8]
.text:00406B1A                 mov     [esp+18h], ecx
.text:00406B1E                 mov     ecx, [ebx]
.text:00406B20                 mov     [esp+14h], eax
.text:00406B24                 mov     eax, [ebx+4]
.text:00406B27                 cmp     ecx, eax
.text:00406B29                 jnb     short loc_406B67
.text:00406B2B                 mov     ebx, eax
.text:00406B2D                 lea     esi, [esi+0]
.text:00406B30
.text:00406B30 loc_406B30:                             ; CODE XREF: .text:00406B65↓j
.text:00406B30                 mov     edx, [ecx]
.text:00406B32                 test    edx, edx
.text:00406B34                 jz      short loc_406B60
.text:00406B36                 mov     eax, [ecx+4]
.text:00406B39                 mov     edx, 1
.text:00406B3E                 test    eax, eax
.text:00406B40                 jz      short loc_406B58
.text:00406B42                 lea     esi, [esi+0]
.text:00406B49                 lea     edi, [edi+0]
.text:00406B50
.text:00406B50 loc_406B50:                             ; CODE XREF: .text:00406B56↓j
.text:00406B50                 mov     eax, [eax+4]
.text:00406B53                 inc     edx
.text:00406B54                 test    eax, eax
.text:00406B56                 jnz     short loc_406B50
.text:00406B58
.text:00406B58 loc_406B58:                             ; CODE XREF: .text:00406B40↑j
.text:00406B58                 cmp     edx, esi
.text:00406B5A                 jbe     short loc_406B60
.text:00406B5C                 mov     esi, edx
.text:00406B5E                 mov     esi, esi
.text:00406B60
.text:00406B60 loc_406B60:                             ; CODE XREF: .text:00406B34↑j
.text:00406B60                                         ; .text:00406B5A↑j
.text:00406B60                 add     ecx, 8
.text:00406B63                 cmp     ecx, ebx
.text:00406B65                 jb      short loc_406B30
.text:00406B67
.text:00406B67 loc_406B67:                             ; CODE XREF: .text:00406B29↑j
.text:00406B67                 mov     [esp], edi
.text:00406B6A                 mov     edx, [esp+18h]
.text:00406B6E                 mov     dword ptr [esp+4], offset aEntriesLu ; "# entries:         %lu\n"
.text:00406B76                 mov     [esp+8], edx
.text:00406B7A                 call    fprintf
.text:00406B7F                 mov     [esp+8], ebp
.text:00406B83                 mov     [esp], edi
.text:00406B86                 mov     dword ptr [esp+4], offset aBucketsLu ; "# buckets:         %lu\n"
.text:00406B8E                 call    fprintf
.text:00406B93                 mov     ebx, [esp+14h]
.text:00406B97                 xor     eax, eax
.text:00406B99                 mov     ecx, ebp
.text:00406B9B                 push    eax
.text:00406B9C                 xor     ebp, ebp
.text:00406B9E                 push    ebx
.text:00406B9F                 fild    qword ptr [esp]
.text:00406BA2                 add     esp, 8
.text:00406BA5                 push    ebp
.text:00406BA6                 push    ecx
.text:00406BA7                 fild    qword ptr [esp]
.text:00406BAA                 fxch    st(1)
.text:00406BAC                 add     esp, 8
.text:00406BAF                 mov     ebx, [esp+14h]
.text:00406BB3                 fmul    ds:flt_406AFC
.text:00406BB9                 mov     [esp], edi
.text:00406BBC                 mov     [esp+8], ebx
.text:00406BC0                 mov     dword ptr [esp+4], offset aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:00406BC8                 fdivrp  st(1), st
.text:00406BCA                 fstp    qword ptr [esp+0Ch]
.text:00406BCE                 call    fprintf
.text:00406BD3                 mov     [esp+8], esi
.text:00406BD7                 mov     [esp], edi
.text:00406BDA                 mov     dword ptr [esp+4], offset aMaxBucketLengt ; "max bucket length: %lu\n"
.text:00406BE2                 call    fprintf
.text:00406BE7                 add     esp, 1Ch
.text:00406BEA                 pop     ebx
.text:00406BEB                 pop     esi
.text:00406BEC                 pop     edi
.text:00406BED                 pop     ebp
.text:00406BEE                 retn
.text:00406BEE ; ---------------------------------------------------------------------------
.text:00406BEF                 align 10h
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0
.text:00406BF0 sub_406BF0      proc near               ; CODE XREF: sub_403D80+45E↑p
.text:00406BF0
.text:00406BF0 var_1C          = dword ptr -1Ch
.text:00406BF0 var_18          = dword ptr -18h
.text:00406BF0 arg_0           = dword ptr  4
.text:00406BF0 arg_4           = dword ptr  8
.text:00406BF0
.text:00406BF0                 push    edi
.text:00406BF1                 push    esi
.text:00406BF2                 push    ebx
.text:00406BF3                 sub     esp, 10h
.text:00406BF6                 mov     esi, [esp+1Ch+arg_0]
.text:00406BFA                 mov     edi, [esp+1Ch+arg_4]
.text:00406BFE                 mov     edx, [esi+8]
.text:00406C01                 mov     [esp+1Ch+var_1C], edi
.text:00406C04                 mov     [esp+1Ch+var_18], edx
.text:00406C08                 call    dword ptr [esi+18h]
.text:00406C0B                 mov     ecx, [esi]
.text:00406C0D                 lea     eax, [ecx+eax*8]
.text:00406C10                 cmp     eax, [esi+4]
.text:00406C13                 jnb     short loc_406C54
.text:00406C15                 mov     ecx, [eax]
.text:00406C17                 test    ecx, ecx
.text:00406C19                 jz      short loc_406C47
.text:00406C1B                 test    eax, eax
.text:00406C1D                 mov     ebx, eax
.text:00406C1F                 jz      short loc_406C47
.text:00406C21                 jmp     short loc_406C30
.text:00406C21 ; ---------------------------------------------------------------------------
.text:00406C23                 align 10h
.text:00406C30
.text:00406C30 loc_406C30:                             ; CODE XREF: sub_406BF0+31↑j
.text:00406C30                                         ; sub_406BF0+55↓j
.text:00406C30                 mov     edx, [ebx]
.text:00406C32                 mov     [esp+1Ch+var_1C], edi
.text:00406C35                 mov     [esp+1Ch+var_18], edx
.text:00406C39                 call    dword ptr [esi+1Ch]
.text:00406C3C                 test    al, al
.text:00406C3E                 jnz     short loc_406C50
.text:00406C40                 mov     ebx, [ebx+4]
.text:00406C43                 test    ebx, ebx
.text:00406C45                 jnz     short loc_406C30
.text:00406C47
.text:00406C47 loc_406C47:                             ; CODE XREF: sub_406BF0+29↑j
.text:00406C47                                         ; sub_406BF0+2F↑j
.text:00406C47                 xor     eax, eax
.text:00406C49
.text:00406C49 loc_406C49:                             ; CODE XREF: sub_406BF0+62↓j
.text:00406C49                 add     esp, 10h
.text:00406C4C                 pop     ebx
.text:00406C4D                 pop     esi
.text:00406C4E                 pop     edi
.text:00406C4F                 retn
.text:00406C50 ; ---------------------------------------------------------------------------
.text:00406C50
.text:00406C50 loc_406C50:                             ; CODE XREF: sub_406BF0+4E↑j
.text:00406C50                 mov     eax, [ebx]
.text:00406C52                 jmp     short loc_406C49
.text:00406C54 ; ---------------------------------------------------------------------------
.text:00406C54
.text:00406C54 loc_406C54:                             ; CODE XREF: sub_406BF0+23↑j
.text:00406C54                 call    abort
.text:00406C54 sub_406BF0      endp
.text:00406C54
.text:00406C54 ; ---------------------------------------------------------------------------
.text:00406C59                 align 10h
.text:00406C60                 sub     esp, 0Ch
.text:00406C63                 mov     eax, [esp+10h]
.text:00406C67                 mov     edx, [eax+10h]
.text:00406C6A                 test    edx, edx
.text:00406C6C                 jz      short loc_406C93
.text:00406C6E                 mov     edx, [eax]
.text:00406C70                 mov     ecx, [eax+4]
.text:00406C73                 lea     esi, [esi+0]
.text:00406C79                 lea     edi, [edi+0]
.text:00406C80
.text:00406C80 loc_406C80:                             ; CODE XREF: .text:00406C8D↓j
.text:00406C80                 cmp     edx, ecx
.text:00406C82                 jnb     short loc_406C97
.text:00406C84                 mov     eax, [edx]
.text:00406C86                 test    eax, eax
.text:00406C88                 jnz     short loc_406C8F
.text:00406C8A                 add     edx, 8
.text:00406C8D                 jmp     short loc_406C80
.text:00406C8F ; ---------------------------------------------------------------------------
.text:00406C8F
.text:00406C8F loc_406C8F:                             ; CODE XREF: .text:00406C88↑j
.text:00406C8F                                         ; .text:00406C95↓j
.text:00406C8F                 add     esp, 0Ch
.text:00406C92                 retn
.text:00406C93 ; ---------------------------------------------------------------------------
.text:00406C93
.text:00406C93 loc_406C93:                             ; CODE XREF: .text:00406C6C↑j
.text:00406C93                 xor     eax, eax
.text:00406C95                 jmp     short loc_406C8F
.text:00406C97 ; ---------------------------------------------------------------------------
.text:00406C97
.text:00406C97 loc_406C97:                             ; CODE XREF: .text:00406C82↑j
.text:00406C97                 call    abort
.text:00406C97 ; ---------------------------------------------------------------------------
.text:00406C9C                 align 10h
.text:00406CA0                 push    esi
.text:00406CA1                 push    ebx
.text:00406CA2                 sub     esp, 14h
.text:00406CA5                 mov     ebx, [esp+20h]
.text:00406CA9                 mov     esi, [esp+24h]
.text:00406CAD                 mov     edx, [ebx+8]
.text:00406CB0                 mov     [esp], esi
.text:00406CB3                 mov     [esp+4], edx
.text:00406CB7                 call    dword ptr [ebx+18h]
.text:00406CBA                 mov     ecx, [ebx]
.text:00406CBC                 lea     edx, [ecx+eax*8]
.text:00406CBF                 mov     ecx, [ebx+4]
.text:00406CC2                 cmp     edx, ecx
.text:00406CC4                 jnb     short loc_406D10
.text:00406CC6                 test    edx, edx
.text:00406CC8                 mov     eax, edx
.text:00406CCA                 jz      short loc_406CDB
.text:00406CCC                 lea     esi, [esi+0]
.text:00406CD0
.text:00406CD0 loc_406CD0:                             ; CODE XREF: .text:00406CD9↓j
.text:00406CD0                 cmp     [eax], esi
.text:00406CD2                 jz      short loc_406D05
.text:00406CD4                 mov     eax, [eax+4]
.text:00406CD7
.text:00406CD7 loc_406CD7:                             ; CODE XREF: .text:00406D0A↓j
.text:00406CD7                 test    eax, eax
.text:00406CD9                 jnz     short loc_406CD0
.text:00406CDB
.text:00406CDB loc_406CDB:                             ; CODE XREF: .text:00406CCA↑j
.text:00406CDB                 add     edx, 8
.text:00406CDE                 cmp     edx, ecx
.text:00406CE0                 jnb     short loc_406CFD
.text:00406CE2                 lea     esi, [esi+0]
.text:00406CE9                 lea     edi, [edi+0]
.text:00406CF0
.text:00406CF0 loc_406CF0:                             ; CODE XREF: .text:00406CFB↓j
.text:00406CF0                 mov     eax, [edx]
.text:00406CF2                 test    eax, eax
.text:00406CF4                 jnz     short loc_406CFF
.text:00406CF6                 add     edx, 8
.text:00406CF9                 cmp     edx, ecx
.text:00406CFB                 jb      short loc_406CF0
.text:00406CFD
.text:00406CFD loc_406CFD:                             ; CODE XREF: .text:00406CE0↑j
.text:00406CFD                 xor     eax, eax
.text:00406CFF
.text:00406CFF loc_406CFF:                             ; CODE XREF: .text:00406CF4↑j
.text:00406CFF                                         ; .text:00406D0E↓j
.text:00406CFF                 add     esp, 14h
.text:00406D02                 pop     ebx
.text:00406D03                 pop     esi
.text:00406D04                 retn
.text:00406D05 ; ---------------------------------------------------------------------------
.text:00406D05
.text:00406D05 loc_406D05:                             ; CODE XREF: .text:00406CD2↑j
.text:00406D05                 mov     eax, [eax+4]
.text:00406D08                 test    eax, eax
.text:00406D0A                 jz      short loc_406CD7
.text:00406D0C                 mov     eax, [eax]
.text:00406D0E                 jmp     short loc_406CFF
.text:00406D10 ; ---------------------------------------------------------------------------
.text:00406D10
.text:00406D10 loc_406D10:                             ; CODE XREF: .text:00406CC4↑j
.text:00406D10                 call    abort
.text:00406D10 ; ---------------------------------------------------------------------------
.text:00406D15                 align 10h
.text:00406D20                 push    ebp
.text:00406D21                 xor     ecx, ecx
.text:00406D23                 push    edi
.text:00406D24                 push    esi
.text:00406D25                 push    ebx
.text:00406D26                 mov     edx, [esp+14h]
.text:00406D2A                 mov     ebp, [esp+18h]
.text:00406D2E                 mov     edi, [esp+1Ch]
.text:00406D32                 mov     ebx, [edx]
.text:00406D34                 mov     esi, [edx+4]
.text:00406D37                 cmp     ebx, esi
.text:00406D39                 jnb     short loc_406D70
.text:00406D3B                 nop
.text:00406D3C                 lea     esi, [esi+0]
.text:00406D40
.text:00406D40 loc_406D40:                             ; CODE XREF: .text:00406D67↓j
.text:00406D40                 mov     edx, [ebx]
.text:00406D42                 test    edx, edx
.text:00406D44                 jz      short loc_406D62
.text:00406D46                 mov     edx, ebx
.text:00406D48                 nop
.text:00406D49                 lea     esi, [esi+0]
.text:00406D50
.text:00406D50 loc_406D50:                             ; CODE XREF: .text:00406D60↓j
.text:00406D50                 cmp     ecx, edi
.text:00406D52                 jnb     short loc_406D70
.text:00406D54                 mov     eax, [edx]
.text:00406D56                 mov     edx, [edx+4]
.text:00406D59                 mov     [ebp+ecx*4+0], eax
.text:00406D5D                 inc     ecx
.text:00406D5E                 test    edx, edx
.text:00406D60                 jnz     short loc_406D50
.text:00406D62
.text:00406D62 loc_406D62:                             ; CODE XREF: .text:00406D44↑j
.text:00406D62                 add     ebx, 8
.text:00406D65                 cmp     ebx, esi
.text:00406D67                 jb      short loc_406D40
.text:00406D69                 lea     esi, [esi+0]
.text:00406D70
.text:00406D70 loc_406D70:                             ; CODE XREF: .text:00406D39↑j
.text:00406D70                                         ; .text:00406D52↑j
.text:00406D70                 pop     ebx
.text:00406D71                 mov     eax, ecx
.text:00406D73                 pop     esi
.text:00406D74                 pop     edi
.text:00406D75                 pop     ebp
.text:00406D76                 retn
.text:00406D76 ; ---------------------------------------------------------------------------
.text:00406D77                 align 10h
.text:00406D80                 push    ebp
.text:00406D81                 push    edi
.text:00406D82                 xor     edi, edi
.text:00406D84                 push    esi
.text:00406D85                 push    ebx
.text:00406D86                 sub     esp, 0Ch
.text:00406D89                 mov     edx, [esp+20h]
.text:00406D8D                 mov     ebp, [esp+28h]
.text:00406D91                 mov     esi, [edx]
.text:00406D93                 mov     eax, [edx+4]
.text:00406D96                 cmp     esi, eax
.text:00406D98                 jnb     short loc_406DE0
.text:00406D9A                 lea     esi, [esi+0]
.text:00406DA0
.text:00406DA0 loc_406DA0:                             ; CODE XREF: .text:00406DD5↓j
.text:00406DA0                 mov     ecx, [esi]
.text:00406DA2                 test    ecx, ecx
.text:00406DA4                 jz      short loc_406DD0
.text:00406DA6                 mov     ebx, esi
.text:00406DA8                 nop
.text:00406DA9                 lea     esi, [esi+0]
.text:00406DB0
.text:00406DB0 loc_406DB0:                             ; CODE XREF: .text:00406DC7↓j
.text:00406DB0                 mov     [esp+4], ebp
.text:00406DB4                 mov     edx, [ebx]
.text:00406DB6                 mov     [esp], edx
.text:00406DB9                 call    dword ptr [esp+24h]
.text:00406DBD                 test    al, al
.text:00406DBF                 jz      short loc_406DE0
.text:00406DC1                 mov     ebx, [ebx+4]
.text:00406DC4                 inc     edi
.text:00406DC5                 test    ebx, ebx
.text:00406DC7                 jnz     short loc_406DB0
.text:00406DC9                 mov     ebx, [esp+20h]
.text:00406DCD                 mov     eax, [ebx+4]
.text:00406DD0
.text:00406DD0 loc_406DD0:                             ; CODE XREF: .text:00406DA4↑j
.text:00406DD0                 add     esi, 8
.text:00406DD3                 cmp     esi, eax
.text:00406DD5                 jb      short loc_406DA0
.text:00406DD7                 mov     esi, esi
.text:00406DD9                 lea     edi, [edi+0]
.text:00406DE0
.text:00406DE0 loc_406DE0:                             ; CODE XREF: .text:00406D98↑j
.text:00406DE0                                         ; .text:00406DBF↑j
.text:00406DE0                 add     esp, 0Ch
.text:00406DE3                 mov     eax, edi
.text:00406DE5                 pop     ebx
.text:00406DE6                 pop     esi
.text:00406DE7                 pop     edi
.text:00406DE8                 pop     ebp
.text:00406DE9                 retn
.text:00406DE9 ; ---------------------------------------------------------------------------
.text:00406DEA                 align 10h
.text:00406DF0                 push    esi
.text:00406DF1                 push    ebx
.text:00406DF2                 mov     ecx, [esp+0Ch]
.text:00406DF6                 xor     ebx, ebx
.text:00406DF8                 mov     esi, [esp+10h]
.text:00406DFC                 movzx   edx, byte ptr [ecx]
.text:00406DFF                 test    dl, dl
.text:00406E01                 jz      short loc_406E2A
.text:00406E03                 lea     esi, [esi+0]
.text:00406E09                 lea     edi, [edi+0]
.text:00406E10
.text:00406E10 loc_406E10:                             ; CODE XREF: .text:00406E28↓j
.text:00406E10                 mov     eax, ebx
.text:00406E12                 inc     ecx
.text:00406E13                 shl     eax, 5
.text:00406E16                 sub     eax, ebx
.text:00406E18                 movzx   ebx, dl
.text:00406E1B                 add     eax, ebx
.text:00406E1D                 xor     edx, edx
.text:00406E1F                 div     esi
.text:00406E21                 mov     ebx, edx
.text:00406E23                 movzx   edx, byte ptr [ecx]
.text:00406E26                 test    dl, dl
.text:00406E28                 jnz     short loc_406E10
.text:00406E2A
.text:00406E2A loc_406E2A:                             ; CODE XREF: .text:00406E01↑j
.text:00406E2A                 mov     eax, ebx
.text:00406E2C                 pop     ebx
.text:00406E2D                 pop     esi
.text:00406E2E                 retn
.text:00406E2E ; ---------------------------------------------------------------------------
.text:00406E2F                 align 10h
.text:00406E30                 mov     ecx, [esp+4]
.text:00406E34                 mov     edx, ds:dword_406220
.text:00406E3A                 mov     [ecx], edx
.text:00406E3C                 mov     edx, ds:dword_406224
.text:00406E42                 mov     [ecx+4], edx
.text:00406E45                 mov     edx, ds:dword_406224+4
.text:00406E4B                 mov     [ecx+8], edx
.text:00406E4E                 mov     edx, ds:dword_406224+8
.text:00406E54                 mov     [ecx+0Ch], edx
.text:00406E57                 mov     edx, ds:dword_406224+0Ch
.text:00406E5D                 mov     [ecx+10h], edx
.text:00406E60                 retn
.text:00406E60 ; ---------------------------------------------------------------------------
.text:00406E61                 align 4
.text:00406E64                 dd 3DCCCCCDh, 3F666666h, 3F8CCCCDh, 0EC835356h, 24548D24h
.text:00406E64                 dd 2454891Ch, 245C8B08h, 24548B30h, 2444C734h, 10Ch, 241C8900h
.text:00406E64                 dd 4245489h, 167E8h, 31C68900h, 0FF685C0h, 12D84h, 104BFF00h
.text:00406E64                 dd 1C244C8Bh, 0D285118Bh, 11A850Fh, 4BFF0000h, 31C0310Ch
.text:00406E64                 dd 0C4B8BD2h, 438B5150h, 144B8B08h, 83242CDFh, 505208C4h
.text:00406E64                 dd 83242CDFh, 1D908C4h, 0C9D9C9DCh, 0E0DFEADDh, 0F9ED9DDh
.text:00406E64                 dd 0F786h, 6405D900h, 0D900406Eh, 0E1DD0841h, 0F9EE0DFh
.text:00406E64                 dd 0F386h, 6805D900h, 0DD00406Eh, 9EE0DFE9h, 0E2860Fh
.text:00406E64                 dd 41D90000h, 6C05D90Ch, 0D900406Eh, 0DFE9DAC9h, 860F9EE0h
.text:00406E64                 dd 0CCh, 0CBD9EED9h, 0E0DFE3DDh, 0F9EDBDDh, 0BB82h, 0DEC9D900h
.text:00406E64                 dd 441D9C2h, 0E0DFE2DDh, 0A9860F9Eh, 0D9000000h, 0DFE9DAE8h
.text:00406E64                 dd 820F9EE0h, 90h, 0E0DFE9DAh, 9011779Eh, 26748Dh, 201443C7h
.text:00406E64                 dd 0B9004062h, 406220h, 310C438Bh, 0D23152D2h, 8438B50h
.text:00406E64                 dd 83242CDFh, 505208C4h, 83242CDFh, 1D908C4h, 0EADDC9D8h
.text:00406E64                 dd 0D9DDE0DFh, 804D769Eh, 74001079h, 449D83Fh, 1A247CD9h
.text:00406E64                 dd 244CB70Fh, 241C891Ah, 0C98166h, 4C89660Ch, 6CD91824h
.text:00406E64                 dd 7CDF1824h, 6CD91024h, 548B1A24h, 54891024h, 55E80424h
.text:00406E64                 dd 90FFFFF6h, 26748Dh, 0C483F089h, 0C35E5B24h, 0D80449D8h
.text:00406E64                 dd 0BCEB0849h, 0ECEBD8DDh, 0D8DDD8DDh, 0FFFF73E9h, 768DFFh
.text:00406E64                 dd 0F0EBD8DDh, 0B68Dh, 0BF8D0000h, 0
.text:00407000
.text:00407000 ; =============== S U B R O U T I N E =======================================
.text:00407000
.text:00407000
.text:00407000 sub_407000      proc near               ; CODE XREF: sub_4067A0+32↑p
.text:00407000
.text:00407000 var_1C          = dword ptr -1Ch
.text:00407000 var_18          = dword ptr -18h
.text:00407000 var_D           = byte ptr -0Dh
.text:00407000 arg_0           = dword ptr  4
.text:00407000 arg_4           = dword ptr  8
.text:00407000 arg_8           = dword ptr  0Ch
.text:00407000 arg_C           = byte ptr  10h
.text:00407000
.text:00407000                 push    edi
.text:00407001                 push    esi
.text:00407002                 push    ebx
.text:00407003                 sub     esp, 10h
.text:00407006                 mov     esi, [esp+1Ch+arg_0]
.text:0040700A                 movzx   ecx, [esp+1Ch+arg_C]
.text:0040700F                 mov     edi, [esp+1Ch+arg_4]
.text:00407013                 mov     edx, [esi+8]
.text:00407016                 mov     [esp+1Ch+var_D], cl
.text:0040701A                 mov     [esp+1Ch+var_18], edx
.text:0040701E                 mov     [esp+1Ch+var_1C], edi
.text:00407021                 call    dword ptr [esi+18h]
.text:00407024                 mov     ecx, [esi]
.text:00407026                 lea     ebx, [ecx+eax*8]
.text:00407029                 cmp     ebx, [esi+4]
.text:0040702C                 jnb     loc_4070E3
.text:00407032                 mov     edx, [esp+1Ch+arg_8]
.text:00407036                 xor     eax, eax
.text:00407038                 mov     [edx], ebx
.text:0040703A                 mov     edx, [ebx]
.text:0040703C                 test    edx, edx
.text:0040703E                 jz      short loc_407082
.text:00407040                 mov     [esp+1Ch+var_18], edx
.text:00407044                 mov     [esp+1Ch+var_1C], edi
.text:00407047                 call    dword ptr [esi+1Ch]
.text:0040704A                 test    al, al
.text:0040704C                 jz      short loc_407091
.text:0040704E                 cmp     [esp+1Ch+var_D], 0
.text:00407053                 mov     edi, [ebx]
.text:00407055                 jz      short loc_407080
.text:00407057                 mov     ecx, [ebx+4]
.text:0040705A                 test    ecx, ecx
.text:0040705C                 jz      short loc_407089
.text:0040705E                 mov     eax, [ecx]
.text:00407060                 mov     edx, [ecx+4]
.text:00407063                 mov     [ebx], eax
.text:00407065                 mov     [ebx+4], edx
.text:00407068                 mov     ebx, [esi+24h]
.text:0040706B                 mov     dword ptr [ecx], 0
.text:00407071                 mov     [ecx+4], ebx
.text:00407074                 mov     [esi+24h], ecx
.text:00407077                 mov     esi, esi
.text:00407079                 lea     edi, [edi+0]
.text:00407080
.text:00407080 loc_407080:                             ; CODE XREF: sub_407000+55↑j
.text:00407080                                         ; sub_407000+8F↓j
.text:00407080                 mov     eax, edi
.text:00407082
.text:00407082 loc_407082:                             ; CODE XREF: sub_407000+3E↑j
.text:00407082                                         ; sub_407000+BC↓j ...
.text:00407082                 add     esp, 10h
.text:00407085                 pop     ebx
.text:00407086                 pop     esi
.text:00407087                 pop     edi
.text:00407088                 retn
.text:00407089 ; ---------------------------------------------------------------------------
.text:00407089
.text:00407089 loc_407089:                             ; CODE XREF: sub_407000+5C↑j
.text:00407089                 mov     dword ptr [ebx], 0
.text:0040708F                 jmp     short loc_407080
.text:00407091 ; ---------------------------------------------------------------------------
.text:00407091
.text:00407091 loc_407091:                             ; CODE XREF: sub_407000+4C↑j
.text:00407091                 mov     eax, [ebx+4]
.text:00407094                 test    eax, eax
.text:00407096                 jz      short loc_4070BA
.text:00407098                 nop
.text:00407099                 lea     esi, [esi+0]
.text:004070A0
.text:004070A0 loc_4070A0:                             ; CODE XREF: sub_407000+B8↓j
.text:004070A0                 mov     ecx, [eax]
.text:004070A2                 mov     [esp+1Ch+var_1C], edi
.text:004070A5                 mov     [esp+1Ch+var_18], ecx
.text:004070A9                 call    dword ptr [esi+1Ch]
.text:004070AC                 test    al, al
.text:004070AE                 jnz     short loc_4070BE
.text:004070B0                 mov     ebx, [ebx+4]
.text:004070B3                 mov     eax, [ebx+4]
.text:004070B6                 test    eax, eax
.text:004070B8                 jnz     short loc_4070A0
.text:004070BA
.text:004070BA loc_4070BA:                             ; CODE XREF: sub_407000+96↑j
.text:004070BA                 xor     eax, eax
.text:004070BC                 jmp     short loc_407082
.text:004070BE ; ---------------------------------------------------------------------------
.text:004070BE
.text:004070BE loc_4070BE:                             ; CODE XREF: sub_407000+AE↑j
.text:004070BE                 cmp     [esp+1Ch+var_D], 0
.text:004070C3                 mov     edx, [ebx+4]
.text:004070C6                 mov     ecx, [edx]
.text:004070C8                 jz      short loc_4070DF
.text:004070CA                 mov     dword ptr [edx], 0
.text:004070D0                 mov     edi, [edx+4]
.text:004070D3                 mov     [ebx+4], edi
.text:004070D6                 mov     edi, [esi+24h]
.text:004070D9                 mov     [edx+4], edi
.text:004070DC                 mov     [esi+24h], edx
.text:004070DF
.text:004070DF loc_4070DF:                             ; CODE XREF: sub_407000+C8↑j
.text:004070DF                 mov     eax, ecx
.text:004070E1                 jmp     short loc_407082
.text:004070E3 ; ---------------------------------------------------------------------------
.text:004070E3
.text:004070E3 loc_4070E3:                             ; CODE XREF: sub_407000+2C↑j
.text:004070E3                 call    abort
.text:004070E3 sub_407000      endp
.text:004070E3
.text:004070E3 ; ---------------------------------------------------------------------------
.text:004070E8                 align 20h
.text:00407100
.text:00407100 ; =============== S U B R O U T I N E =======================================
.text:00407100
.text:00407100
.text:00407100 sub_407100      proc near
.text:00407100
.text:00407100 Size            = dword ptr -0Ch
.text:00407100 var_4           = dword ptr -4
.text:00407100 arg_0           = dword ptr  4
.text:00407100 arg_4           = dword ptr  8
.text:00407100
.text:00407100                 sub     esp, 0Ch
.text:00407103                 xor     edx, edx
.text:00407105                 mov     ecx, [esp+0Ch+arg_4]
.text:00407109                 mov     [esp+0Ch+var_4], ebx
.text:0040710D                 mov     eax, 0FFFFFFFFh
.text:00407112                 mov     ebx, [esp+0Ch+arg_0]
.text:00407116                 div     ecx
.text:00407118                 cmp     eax, ebx
.text:0040711A                 jb      short loc_407139
.text:0040711C                 mov     edx, ebx
.text:0040711E                 imul    edx, ecx
.text:00407121                 mov     [esp+0Ch+Size], edx ; Size
.text:00407124                 call    malloc
.text:00407129                 test    eax, eax
.text:0040712B                 jz      short loc_407135
.text:0040712D
.text:0040712D loc_40712D:                             ; CODE XREF: sub_407100+37↓j
.text:0040712D                 mov     ebx, [esp+0Ch+var_4]
.text:00407131                 add     esp, 0Ch
.text:00407134                 retn
.text:00407135 ; ---------------------------------------------------------------------------
.text:00407135
.text:00407135 loc_407135:                             ; CODE XREF: sub_407100+2B↑j
.text:00407135                 test    ebx, ebx
.text:00407137                 jz      short loc_40712D
.text:00407139
.text:00407139 loc_407139:                             ; CODE XREF: sub_407100+1A↑j
.text:00407139                 call    sub_4073F0
.text:00407139 sub_407100      endp
.text:00407139
.text:00407139 ; ---------------------------------------------------------------------------
.text:0040713E                 align 10h
.text:00407140
.text:00407140 ; =============== S U B R O U T I N E =======================================
.text:00407140
.text:00407140
.text:00407140 ; int __cdecl sub_407140(size_t)
.text:00407140 sub_407140      proc near               ; CODE XREF: sub_401FE0+16↑p
.text:00407140                                         ; sub_4026E0+41A↑p ...
.text:00407140
.text:00407140 Size            = dword ptr -0Ch
.text:00407140 var_4           = dword ptr -4
.text:00407140 arg_0           = dword ptr  4
.text:00407140
.text:00407140                 sub     esp, 0Ch
.text:00407143                 mov     [esp+0Ch+var_4], ebx
.text:00407147                 mov     ebx, [esp+0Ch+arg_0]
.text:0040714B                 mov     [esp+0Ch+Size], ebx ; Size
.text:0040714E                 call    malloc
.text:00407153                 test    eax, eax
.text:00407155                 jz      short loc_407160
.text:00407157
.text:00407157 loc_407157:                             ; CODE XREF: sub_407140+22↓j
.text:00407157                 mov     ebx, [esp+0Ch+var_4]
.text:0040715B                 add     esp, 0Ch
.text:0040715E                 retn
.text:0040715E ; ---------------------------------------------------------------------------
.text:0040715F                 align 10h
.text:00407160
.text:00407160 loc_407160:                             ; CODE XREF: sub_407140+15↑j
.text:00407160                 test    ebx, ebx
.text:00407162                 jz      short loc_407157
.text:00407164                 call    sub_4073F0
.text:00407164 sub_407140      endp
.text:00407164
.text:00407164 ; ---------------------------------------------------------------------------
.text:00407169                 align 10h
.text:00407170                 sub     esp, 1Ch
.text:00407173                 xor     edx, edx
.text:00407175                 mov     eax, 0FFFFFFFFh
.text:0040717A                 mov     [esp+14h], ebx
.text:0040717E                 mov     ecx, [esp+20h]
.text:00407182                 mov     ebx, [esp+28h]
.text:00407186                 mov     [esp+18h], esi
.text:0040718A                 mov     esi, [esp+24h]
.text:0040718E                 div     ebx
.text:00407190                 cmp     eax, esi
.text:00407192                 jb      short loc_4071C4
.text:00407194                 mov     [esp], ecx
.text:00407197                 mov     edx, esi
.text:00407199                 imul    edx, ebx
.text:0040719C                 mov     [esp+4], edx
.text:004071A0                 call    realloc
.text:004071A5                 test    eax, eax
.text:004071A7                 mov     ecx, eax
.text:004071A9                 jz      short loc_4071C0
.text:004071AB
.text:004071AB loc_4071AB:                             ; CODE XREF: .text:004071C2↓j
.text:004071AB                 mov     ebx, [esp+14h]
.text:004071AF                 mov     eax, ecx
.text:004071B1                 mov     esi, [esp+18h]
.text:004071B5                 add     esp, 1Ch
.text:004071B8                 retn
.text:004071B8 ; ---------------------------------------------------------------------------
.text:004071B9                 align 10h
.text:004071C0
.text:004071C0 loc_4071C0:                             ; CODE XREF: .text:004071A9↑j
.text:004071C0                 test    esi, esi
.text:004071C2                 jz      short loc_4071AB
.text:004071C4
.text:004071C4 loc_4071C4:                             ; CODE XREF: .text:00407192↑j
.text:004071C4                 call    sub_4073F0
.text:004071C4 ; ---------------------------------------------------------------------------
.text:004071C9                 align 10h
.text:004071D0
.text:004071D0 ; =============== S U B R O U T I N E =======================================
.text:004071D0
.text:004071D0
.text:004071D0 ; int __cdecl sub_4071D0(void *, size_t)
.text:004071D0 sub_4071D0      proc near               ; CODE XREF: sub_408640+5B↓p
.text:004071D0
.text:004071D0 Block           = dword ptr -0Ch
.text:004071D0 Size            = dword ptr -8
.text:004071D0 var_4           = dword ptr -4
.text:004071D0 arg_0           = dword ptr  4
.text:004071D0 arg_4           = dword ptr  8
.text:004071D0
.text:004071D0                 sub     esp, 0Ch
.text:004071D3                 mov     edx, [esp+0Ch+arg_0]
.text:004071D7                 mov     [esp+0Ch+var_4], ebx
.text:004071DB                 mov     ebx, [esp+0Ch+arg_4]
.text:004071DF                 mov     [esp+0Ch+Block], edx ; Block
.text:004071E2                 mov     [esp+0Ch+Size], ebx ; Size
.text:004071E6                 call    realloc
.text:004071EB                 test    eax, eax
.text:004071ED                 jz      short loc_4071F7
.text:004071EF
.text:004071EF loc_4071EF:                             ; CODE XREF: sub_4071D0+29↓j
.text:004071EF                 mov     ebx, [esp+0Ch+var_4]
.text:004071F3                 add     esp, 0Ch
.text:004071F6                 retn
.text:004071F7 ; ---------------------------------------------------------------------------
.text:004071F7
.text:004071F7 loc_4071F7:                             ; CODE XREF: sub_4071D0+1D↑j
.text:004071F7                 test    ebx, ebx
.text:004071F9                 jz      short loc_4071EF
.text:004071FB                 call    sub_4073F0
.text:004071FB sub_4071D0      endp
.text:004071FB
.text:00407200 ; ---------------------------------------------------------------------------
.text:00407200                 jmp     sub_407350
.text:00407200 ; ---------------------------------------------------------------------------
.text:00407205                 align 10h
.text:00407210                 sub     esp, 0Ch
.text:00407213                 mov     edx, [esp+14h]
.text:00407217                 mov     dword ptr [esp+8], 1
.text:0040721F                 mov     [esp+4], edx
.text:00407223                 mov     edx, [esp+10h]
.text:00407227                 mov     [esp], edx
.text:0040722A                 call    sub_407350
.text:0040722F                 add     esp, 0Ch
.text:00407232                 retn
.text:00407232 ; ---------------------------------------------------------------------------
.text:00407233                 align 10h
.text:00407240                 sub     esp, 1Ch
.text:00407243                 mov     [esp+18h], ebx
.text:00407247                 mov     ebx, [esp+20h]
.text:0040724B                 mov     [esp], ebx
.text:0040724E                 call    malloc
.text:00407253                 test    eax, eax
.text:00407255                 jz      short loc_407273
.text:00407257
.text:00407257 loc_407257:                             ; CODE XREF: .text:00407275↓j
.text:00407257                 mov     [esp+8], ebx
.text:0040725B                 mov     dword ptr [esp+4], 0
.text:00407263                 mov     [esp], eax
.text:00407266                 call    memset
.text:0040726B                 mov     ebx, [esp+18h]
.text:0040726F                 add     esp, 1Ch
.text:00407272                 retn
.text:00407273 ; ---------------------------------------------------------------------------
.text:00407273
.text:00407273 loc_407273:                             ; CODE XREF: .text:00407255↑j
.text:00407273                 test    ebx, ebx
.text:00407275                 jz      short loc_407257
.text:00407277                 call    sub_4073F0
.text:00407277 ; ---------------------------------------------------------------------------
.text:0040727C                 align 10h
.text:00407280                 sub     esp, 0Ch
.text:00407283                 xor     edx, edx
.text:00407285                 mov     ecx, [esp+14h]
.text:00407289                 mov     [esp+8], ebx
.text:0040728D                 mov     eax, 0FFFFFFFFh
.text:00407292                 mov     ebx, [esp+10h]
.text:00407296                 div     ecx
.text:00407298                 cmp     eax, ebx
.text:0040729A                 jb      short loc_4072B8
.text:0040729C                 mov     [esp+4], ecx
.text:004072A0                 mov     [esp], ebx
.text:004072A3                 call    calloc
.text:004072A8                 test    eax, eax
.text:004072AA                 jz      short loc_4072B4
.text:004072AC
.text:004072AC loc_4072AC:                             ; CODE XREF: .text:004072B6↓j
.text:004072AC                 mov     ebx, [esp+8]
.text:004072B0                 add     esp, 0Ch
.text:004072B3                 retn
.text:004072B4 ; ---------------------------------------------------------------------------
.text:004072B4
.text:004072B4 loc_4072B4:                             ; CODE XREF: .text:004072AA↑j
.text:004072B4                 test    ebx, ebx
.text:004072B6                 jz      short loc_4072AC
.text:004072B8
.text:004072B8 loc_4072B8:                             ; CODE XREF: .text:0040729A↑j
.text:004072B8                 call    sub_4073F0
.text:004072B8 ; ---------------------------------------------------------------------------
.text:004072BD                 align 10h
.text:004072C0                 sub     esp, 1Ch
.text:004072C3                 mov     [esp+18h], ebx
.text:004072C7                 mov     ebx, [esp+24h]
.text:004072CB                 mov     [esp], ebx
.text:004072CE                 call    malloc
.text:004072D3                 test    eax, eax
.text:004072D5                 mov     edx, eax
.text:004072D7                 jz      short loc_4072F5
.text:004072D9
.text:004072D9 loc_4072D9:                             ; CODE XREF: .text:004072F7↓j
.text:004072D9                 mov     [esp+8], ebx
.text:004072DD                 mov     ecx, [esp+20h]
.text:004072E1                 mov     [esp], edx
.text:004072E4                 mov     [esp+4], ecx
.text:004072E8                 call    memcpy
.text:004072ED                 mov     ebx, [esp+18h]
.text:004072F1                 add     esp, 1Ch
.text:004072F4                 retn
.text:004072F5 ; ---------------------------------------------------------------------------
.text:004072F5
.text:004072F5 loc_4072F5:                             ; CODE XREF: .text:004072D7↑j
.text:004072F5                 test    ebx, ebx
.text:004072F7                 jz      short loc_4072D9
.text:004072F9                 call    sub_4073F0
.text:004072F9 ; ---------------------------------------------------------------------------
.text:004072FE                 align 10h
.text:00407300
.text:00407300 ; =============== S U B R O U T I N E =======================================
.text:00407300
.text:00407300
.text:00407300 ; int __cdecl sub_407300(char *)
.text:00407300 sub_407300      proc near               ; CODE XREF: sub_4026E0+7AE↑p
.text:00407300                                         ; sub_4026E0+B3C↑p ...
.text:00407300
.text:00407300 Str             = dword ptr -1Ch
.text:00407300 Src             = dword ptr -18h
.text:00407300 Size            = dword ptr -14h
.text:00407300 var_8           = dword ptr -8
.text:00407300 var_4           = dword ptr -4
.text:00407300 arg_0           = dword ptr  4
.text:00407300
.text:00407300                 sub     esp, 1Ch
.text:00407303                 mov     [esp+1Ch+var_4], esi
.text:00407307                 mov     esi, [esp+1Ch+arg_0]
.text:0040730B                 mov     [esp+1Ch+var_8], ebx
.text:0040730F                 mov     [esp+1Ch+Str], esi ; Str
.text:00407312                 call    strlen
.text:00407317                 lea     ebx, [eax+1]
.text:0040731A                 mov     [esp+1Ch+Str], ebx ; Size
.text:0040731D                 call    malloc
.text:00407322                 test    eax, eax
.text:00407324                 jz      short loc_407342
.text:00407326
.text:00407326 loc_407326:                             ; CODE XREF: sub_407300+44↓j
.text:00407326                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040732A                 mov     [esp+1Ch+Src], esi ; Src
.text:0040732E                 mov     [esp+1Ch+Str], eax ; void *
.text:00407331                 call    memcpy
.text:00407336                 mov     ebx, [esp+1Ch+var_8]
.text:0040733A                 mov     esi, [esp+1Ch+var_4]
.text:0040733E                 add     esp, 1Ch
.text:00407341                 retn
.text:00407342 ; ---------------------------------------------------------------------------
.text:00407342
.text:00407342 loc_407342:                             ; CODE XREF: sub_407300+24↑j
.text:00407342                 test    ebx, ebx
.text:00407344                 jz      short loc_407326
.text:00407346                 call    sub_4073F0
.text:00407346 sub_407300      endp
.text:00407346
.text:00407346 ; ---------------------------------------------------------------------------
.text:0040734B                 align 10h
.text:00407350
.text:00407350 ; =============== S U B R O U T I N E =======================================
.text:00407350
.text:00407350
.text:00407350 ; int __cdecl sub_407350(void *, int, int)
.text:00407350 sub_407350      proc near               ; CODE XREF: .text:00407200↑j
.text:00407350                                         ; .text:0040722A↑p
.text:00407350
.text:00407350 Block           = dword ptr -1Ch
.text:00407350 Size            = dword ptr -18h
.text:00407350 var_C           = dword ptr -0Ch
.text:00407350 var_8           = dword ptr -8
.text:00407350 var_4           = dword ptr -4
.text:00407350 arg_0           = dword ptr  4
.text:00407350 arg_4           = dword ptr  8
.text:00407350 arg_8           = dword ptr  0Ch
.text:00407350
.text:00407350                 sub     esp, 1Ch
.text:00407353                 mov     [esp+1Ch+var_8], esi
.text:00407357                 mov     esi, [esp+1Ch+arg_0]
.text:0040735B                 mov     [esp+1Ch+var_4], edi
.text:0040735F                 mov     edi, [esp+1Ch+arg_4]
.text:00407363                 test    esi, esi
.text:00407365                 mov     [esp+1Ch+var_C], ebx
.text:00407369                 mov     ecx, [edi]
.text:0040736B                 mov     ebx, [esp+1Ch+arg_8]
.text:0040736F                 jz      short loc_4073B0
.text:00407371                 xor     edx, edx
.text:00407373                 mov     eax, 7FFFFFFFh
.text:00407378                 div     ebx
.text:0040737A                 cmp     eax, ecx
.text:0040737C                 jb      short loc_4073A9
.text:0040737E                 add     ecx, ecx
.text:00407380
.text:00407380 loc_407380:                             ; CODE XREF: sub_407350+62↓j
.text:00407380                                         ; sub_407350+71↓j ...
.text:00407380                 mov     [edi], ecx
.text:00407382                 imul    ebx, ecx
.text:00407385                 mov     [esp+1Ch+Block], esi ; Block
.text:00407388                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040738C                 call    realloc
.text:00407391                 test    eax, eax
.text:00407393                 jz      short loc_4073A5
.text:00407395
.text:00407395 loc_407395:                             ; CODE XREF: sub_407350+57↓j
.text:00407395                 mov     ebx, [esp+1Ch+var_C]
.text:00407399                 mov     esi, [esp+1Ch+var_8]
.text:0040739D                 mov     edi, [esp+1Ch+var_4]
.text:004073A1                 add     esp, 1Ch
.text:004073A4                 retn
.text:004073A5 ; ---------------------------------------------------------------------------
.text:004073A5
.text:004073A5 loc_4073A5:                             ; CODE XREF: sub_407350+43↑j
.text:004073A5                 test    ebx, ebx
.text:004073A7                 jz      short loc_407395
.text:004073A9
.text:004073A9 loc_4073A9:                             ; CODE XREF: sub_407350+2C↑j
.text:004073A9                 call    sub_4073F0
.text:004073A9 ; ---------------------------------------------------------------------------
.text:004073AE                 align 10h
.text:004073B0
.text:004073B0 loc_4073B0:                             ; CODE XREF: sub_407350+1F↑j
.text:004073B0                 test    ecx, ecx
.text:004073B2                 jnz     short loc_407380
.text:004073B4                 xor     edx, edx
.text:004073B6                 mov     eax, 40h ; '@'
.text:004073BB                 div     ebx
.text:004073BD                 test    eax, eax
.text:004073BF                 mov     ecx, eax
.text:004073C1                 jnz     short loc_407380
.text:004073C3                 mov     ecx, 1
.text:004073C8                 jmp     short loc_407380
.text:004073C8 sub_407350      endp
.text:004073C8
.text:004073C8 ; ---------------------------------------------------------------------------
.text:004073CA                 align 10h
.text:004073D0 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_4073F0+3↓o
.text:004073E1 ; const char aS[]
.text:004073E1 aS              db '%s',0               ; DATA XREF: sub_4073F0+10↓o
.text:004073E4                 align 10h
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0 ; Attributes: noreturn
.text:004073F0
.text:004073F0 sub_4073F0      proc near               ; CODE XREF: sub_4026E0:loc_403245↑p
.text:004073F0                                         ; sub_403D80:loc_4042A3↑p ...
.text:004073F0
.text:004073F0 Code            = dword ptr -1Ch
.text:004073F0 ErrorMessage    = dword ptr -18h
.text:004073F0 var_14          = dword ptr -14h
.text:004073F0 var_10          = byte ptr -10h
.text:004073F0
.text:004073F0                 sub     esp, 1Ch
.text:004073F3                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:004073FA                 call    ds:libintl_gettext
.text:00407400                 mov     [esp+1Ch+var_14], offset aS ; "%s"
.text:00407408                 mov     edx, dword_41A050
.text:0040740E                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:00407416                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:0040741A                 mov     [esp+1Ch+Code], edx ; Code
.text:0040741D                 call    sub_40FF30
.text:00407422                 call    abort
.text:00407422 sub_4073F0      endp
.text:00407422
.text:00407422 ; ---------------------------------------------------------------------------
.text:00407427                 align 10h
.text:00407430
.text:00407430 ; =============== S U B R O U T I N E =======================================
.text:00407430
.text:00407430
.text:00407430 sub_407430      proc near               ; DATA XREF: sub_4026E0+476↑o
.text:00407430                                         ; sub_4026E0+7CF↑o ...
.text:00407430
.text:00407430 arg_0           = dword ptr  4
.text:00407430 arg_4           = dword ptr  8
.text:00407430
.text:00407430                 push    esi
.text:00407431                 push    ebx
.text:00407432                 mov     ecx, [esp+8+arg_0]
.text:00407436                 xor     ebx, ebx
.text:00407438                 mov     esi, [esp+8+arg_4]
.text:0040743C                 movzx   eax, byte ptr [ecx]
.text:0040743F                 test    al, al
.text:00407441                 jz      short loc_407463
.text:00407443                 lea     esi, [esi+0]
.text:00407449                 lea     edi, [edi+0]
.text:00407450
.text:00407450 loc_407450:                             ; CODE XREF: sub_407430+31↓j
.text:00407450                 movsx   edx, al
.text:00407453                 inc     ecx
.text:00407454                 mov     eax, ebx
.text:00407456                 rol     eax, 9
.text:00407459                 lea     ebx, [eax+edx]
.text:0040745C                 movzx   eax, byte ptr [ecx]
.text:0040745F                 test    al, al
.text:00407461                 jnz     short loc_407450
.text:00407463
.text:00407463 loc_407463:                             ; CODE XREF: sub_407430+11↑j
.text:00407463                 mov     eax, ebx
.text:00407465                 xor     edx, edx
.text:00407467                 div     esi
.text:00407469                 pop     ebx
.text:0040746A                 pop     esi
.text:0040746B                 mov     eax, edx
.text:0040746D                 retn
.text:0040746D sub_407430      endp
.text:0040746D
.text:0040746D ; ---------------------------------------------------------------------------
.text:0040746E                 align 10h
.text:00407470 aLiteral        db 'literal',0          ; DATA XREF: .text:004074B0↓o
.text:00407478 aShell          db 'shell',0            ; DATA XREF: .text:004074B4↓o
.text:0040747E aShellAlways    db 'shell-always',0     ; DATA XREF: .text:004074B8↓o
.text:0040748B aC              db 'c',0                ; DATA XREF: .text:004074BC↓o
.text:0040748D aEscape         db 'escape',0           ; DATA XREF: .text:004074C0↓o
.text:00407494 aLocale         db 'locale',0           ; DATA XREF: .text:004074C4↓o
.text:0040749B aClocale        db 'clocale',0          ; DATA XREF: .text:004074C8↓o
.text:004074A3                 align 10h
.text:004074B0                 dd offset aLiteral      ; "literal"
.text:004074B4                 dd offset aShell        ; "shell"
.text:004074B8                 dd offset aShellAlways  ; "shell-always"
.text:004074BC                 dd offset aC            ; "c"
.text:004074C0                 dd offset aEscape       ; "escape"
.text:004074C4                 dd offset aLocale       ; "locale"
.text:004074C8                 dd offset aClocale      ; "clocale"
.text:004074CC                 dd 2 dup(0)
.text:004074D4                 dd 1, 2, 3, 4, 5, 6
.text:004074EC asc_4074EC:                             ; DATA XREF: sub_407500+7E↓o
.text:004074EC                                         ; sub_407500+A39↓o ...
.text:004074EC                 text "UTF-16LE", '"',27h,'`'
.text:004074F2                 align 10h
.text:00407500
.text:00407500 ; =============== S U B R O U T I N E =======================================
.text:00407500
.text:00407500
.text:00407500 ; int __cdecl sub_407500(int, int, char *Str, int, int, int)
.text:00407500 sub_407500      proc near               ; CODE XREF: sub_407500+43A↓p
.text:00407500                                         ; .text:004080C3↓p ...
.text:00407500
.text:00407500 C               = dword ptr -4Ch
.text:00407500 Type            = dword ptr -48h
.text:00407500 SizeInBytes     = dword ptr -44h
.text:00407500 State           = dword ptr -40h
.text:00407500 var_3C          = dword ptr -3Ch
.text:00407500 var_38          = dword ptr -38h
.text:00407500 var_34          = dword ptr -34h
.text:00407500 var_30          = dword ptr -30h
.text:00407500 var_29          = byte ptr -29h
.text:00407500 var_28          = dword ptr -28h
.text:00407500 var_22          = byte ptr -22h
.text:00407500 var_21          = byte ptr -21h
.text:00407500 var_20          = dword ptr -20h
.text:00407500 var_1C          = dword ptr -1Ch
.text:00407500 var_18          = mbstate_t ptr -18h
.text:00407500 arg_0           = dword ptr  4
.text:00407500 arg_4           = dword ptr  8
.text:00407500 Str             = dword ptr  0Ch
.text:00407500 arg_C           = dword ptr  10h
.text:00407500 arg_10          = dword ptr  14h
.text:00407500 arg_14          = dword ptr  18h
.text:00407500
.text:00407500                 push    ebp
.text:00407501                 push    edi
.text:00407502                 push    esi
.text:00407503                 push    ebx
.text:00407504                 sub     esp, 3Ch
.text:00407507                 mov     edx, ds:__mb_cur_max
.text:0040750D                 mov     [esp+4Ch+var_34], 0
.text:00407515                 mov     [esp+4Ch+var_1C], 0
.text:0040751D                 cmp     dword ptr [edx], 1
.text:00407520                 mov     [esp+4Ch+var_20], 0
.text:00407528                 mov     [esp+4Ch+var_21], 0
.text:0040752D                 setz    [esp+4Ch+var_22]
.text:00407532                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00407537                 ja      short def_40753D ; jumptable 0040753D default case, cases 0,1
.text:00407539                 mov     edx, [esp+4Ch+arg_10]
.text:0040753D                 jmp     ds:jpt_40753D[edx*4] ; switch jump
.text:0040753D ; ---------------------------------------------------------------------------
.text:00407544 jpt_40753D      dd offset def_40753D    ; DATA XREF: sub_407500+3D↑r
.text:00407544                 dd offset def_40753D    ; jump table for switch statement
.text:00407544                 dd offset loc_407E85
.text:00407544                 dd offset loc_407560
.text:00407544                 dd offset loc_407EAB
.text:00407544                 dd offset loc_407EB5
.text:00407544                 dd offset loc_407EB5
.text:00407560 ; ---------------------------------------------------------------------------
.text:00407560
.text:00407560 loc_407560:                             ; CODE XREF: sub_407500+3D↑j
.text:00407560                                         ; DATA XREF: sub_407500:jpt_40753D↑o
.text:00407560                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040753D case 3
.text:00407564                 cmp     [esp+4Ch+var_34], eax
.text:00407568                 jnb     short loc_407571
.text:0040756A                 mov     ebx, [esp+4Ch+arg_0]
.text:0040756E                 mov     byte ptr [ebx], 22h ; '"'
.text:00407571
.text:00407571 loc_407571:                             ; CODE XREF: sub_407500+68↑j
.text:00407571                 mov     [esp+4Ch+var_34], 1
.text:00407579                 mov     [esp+4Ch+var_21], 1
.text:0040757E                 mov     [esp+4Ch+var_1C], offset asc_4074EC ; "\"'`"
.text:00407586
.text:00407586 loc_407586:                             ; CODE XREF: sub_407500+9A6↓j
.text:00407586                 mov     [esp+4Ch+var_20], 1
.text:0040758E
.text:0040758E def_40753D:                             ; CODE XREF: sub_407500+37↑j
.text:0040758E                                         ; sub_407500+3D↑j ...
.text:0040758E                 xor     ebp, ebp        ; jumptable 0040753D default case, cases 0,1
.text:00407590
.text:00407590 loc_407590:                             ; CODE XREF: sub_407500+3DB↓j
.text:00407590                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407595                 jz      loc_407E77
.text:0040759B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040759F
.text:0040759F loc_40759F:                             ; CODE XREF: sub_407500+980↓j
.text:0040759F                 jz      loc_407E0E
.text:004075A5                 cmp     [esp+4Ch+var_21], 0
.text:004075AA                 jz      short loc_4075F0
.text:004075AC                 mov     esi, [esp+4Ch+var_20]
.text:004075B0                 test    esi, esi
.text:004075B2                 jz      short loc_4075F0
.text:004075B4                 mov     ecx, [esp+4Ch+var_20]
.text:004075B8                 lea     edi, [ecx+ebp]
.text:004075BB                 cmp     edi, [esp+4Ch+arg_C]
.text:004075BF                 ja      short loc_4075F0
.text:004075C1                 cld
.text:004075C2                 mov     ebx, [esp+4Ch+Str]
.text:004075C6                 mov     edi, [esp+4Ch+var_1C]
.text:004075CA                 add     ebx, ebp
.text:004075CC                 mov     esi, ebx
.text:004075CE                 cmp     ecx, ecx
.text:004075D0                 repe cmpsb
.text:004075D2                 jnz     short loc_4075F0
.text:004075D4                 mov     edx, [esp+4Ch+arg_4]
.text:004075D8                 cmp     [esp+4Ch+var_34], edx
.text:004075DC                 jnb     short loc_4075EA
.text:004075DE                 mov     ecx, [esp+4Ch+arg_0]
.text:004075E2                 mov     eax, [esp+4Ch+var_34]
.text:004075E6                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:004075EA
.text:004075EA loc_4075EA:                             ; CODE XREF: sub_407500+DC↑j
.text:004075EA                 inc     [esp+4Ch+var_34]
.text:004075EE                 mov     esi, esi
.text:004075F0
.text:004075F0 loc_4075F0:                             ; CODE XREF: sub_407500+AA↑j
.text:004075F0                                         ; sub_407500+B2↑j ...
.text:004075F0                 mov     edi, [esp+4Ch+Str]
.text:004075F4                 movzx   ebx, byte ptr [ebp+edi+0]
.text:004075F9                 movzx   eax, bl
.text:004075FC                 cmp     eax, 7Eh        ; switch 127 cases
.text:004075FF                 ja      def_407605      ; jumptable 00407605 default case, cases 1-6,14-31,64
.text:00407605                 jmp     ds:jpt_407605[eax*4] ; switch jump
.text:00407605 ; ---------------------------------------------------------------------------
.text:0040760C jpt_407605      dd offset loc_407808, offset def_407605, offset def_407605
.text:0040760C                                         ; DATA XREF: sub_407500+105↑r
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605 ; jump table for switch statement
.text:0040760C                 dd offset def_407605, offset loc_4078E0, offset loc_4078FE
.text:0040760C                 dd offset loc_407902, offset loc_407947, offset loc_40794B
.text:0040760C                 dd offset loc_40794F, offset loc_407953, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset def_407605
.text:0040760C                 dd offset def_407605, offset def_407605, offset loc_407DD8
.text:0040760C                 dd offset loc_407DD8, offset loc_407DD8, offset loc_407DFA
.text:0040760C                 dd offset loc_407DD8, offset def_407A02, offset loc_407DD8
.text:0040760C                 dd offset loc_407957, offset loc_407DD8, offset loc_407DD8
.text:0040760C                 dd offset loc_407DD8, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset loc_407DD8
.text:0040760C                 dd offset loc_407DD8, offset loc_407DD8, offset loc_407DD8
.text:0040760C                 dd offset loc_4079BC, offset def_407605, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset loc_407DD8, offset loc_407DD1
.text:0040760C                 dd offset def_407A02, offset loc_407DD8, offset def_407A02
.text:0040760C                 dd offset loc_407DD8, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset def_407A02, offset def_407A02, offset def_407A02
.text:0040760C                 dd offset loc_407DE8, offset loc_407DD8, offset loc_407DE8
.text:0040760C                 dd offset loc_407DFA
.text:00407808 ; ---------------------------------------------------------------------------
.text:00407808
.text:00407808 loc_407808:                             ; CODE XREF: sub_407500+105↑j
.text:00407808                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407808                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407605 case 0
.text:0040780D                 lea     eax, [ebp+1]
.text:00407810                 jz      loc_4078C0
.text:00407816                 mov     esi, [esp+4Ch+arg_4]
.text:0040781A                 cmp     [esp+4Ch+var_34], esi
.text:0040781E                 jnb     short loc_40782C
.text:00407820                 mov     eax, [esp+4Ch+arg_0]
.text:00407824                 mov     ebx, [esp+4Ch+var_34]
.text:00407828                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040782C
.text:0040782C loc_40782C:                             ; CODE XREF: sub_407500+31E↑j
.text:0040782C                 inc     [esp+4Ch+var_34]
.text:00407830                 mov     edx, [esp+4Ch+arg_4]
.text:00407834                 cmp     [esp+4Ch+var_34], edx
.text:00407838                 jnb     short loc_407846
.text:0040783A                 mov     edi, [esp+4Ch+arg_0]
.text:0040783E                 mov     ecx, [esp+4Ch+var_34]
.text:00407842                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:00407846
.text:00407846 loc_407846:                             ; CODE XREF: sub_407500+338↑j
.text:00407846                 inc     [esp+4Ch+var_34]
.text:0040784A                 mov     esi, [esp+4Ch+arg_4]
.text:0040784E                 cmp     [esp+4Ch+var_34], esi
.text:00407852                 jnb     short loc_407860
.text:00407854                 mov     ebx, [esp+4Ch+arg_0]
.text:00407858                 mov     eax, [esp+4Ch+var_34]
.text:0040785C                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:00407860
.text:00407860 loc_407860:                             ; CODE XREF: sub_407500+352↑j
.text:00407860                 inc     [esp+4Ch+var_34]
.text:00407864                 mov     bl, 30h ; '0'
.text:00407866                 lea     esi, [esi+0]
.text:00407869                 lea     edi, [edi+0]
.text:00407870
.text:00407870 def_407A02:                             ; CODE XREF: sub_407500+105↑j
.text:00407870                                         ; sub_407500+463↓j ...
.text:00407870                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407870                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407875                 lea     eax, [ebp+1]
.text:00407878                 jz      short loc_4078C0
.text:0040787A                 mov     cl, bl
.text:0040787C                 mov     edi, [esp+4Ch+arg_14]
.text:00407880                 mov     esi, 1
.text:00407885                 shr     cl, 5
.text:00407888                 movzx   edx, cl
.text:0040788B                 mov     ecx, ebx
.text:0040788D                 and     ecx, 1Fh
.text:00407890                 shl     esi, cl
.text:00407892                 test    [edi+edx*4+4], esi
.text:00407896                 jz      short loc_4078B2
.text:00407898
.text:00407898 loc_407898:                             ; CODE XREF: sub_407500+3FC↓j
.text:00407898                 mov     edx, [esp+4Ch+arg_4]
.text:0040789C                 cmp     [esp+4Ch+var_34], edx
.text:004078A0                 jnb     short loc_4078AE
.text:004078A2                 mov     edi, [esp+4Ch+arg_0]
.text:004078A6                 mov     esi, [esp+4Ch+var_34]
.text:004078AA                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:004078AE
.text:004078AE loc_4078AE:                             ; CODE XREF: sub_407500+3A0↑j
.text:004078AE                 inc     [esp+4Ch+var_34]
.text:004078B2
.text:004078B2 loc_4078B2:                             ; CODE XREF: sub_407500+396↑j
.text:004078B2                 lea     eax, [ebp+1]
.text:004078B5                 lea     esi, [esi+0]
.text:004078B9                 lea     edi, [edi+0]
.text:004078C0
.text:004078C0 loc_4078C0:                             ; CODE XREF: sub_407500+310↑j
.text:004078C0                                         ; sub_407500+378↑j ...
.text:004078C0                 mov     ebp, [esp+4Ch+arg_4]
.text:004078C4                 cmp     [esp+4Ch+var_34], ebp
.text:004078C8                 jnb     short loc_4078D5
.text:004078CA                 mov     edx, [esp+4Ch+arg_0]
.text:004078CE                 mov     ecx, [esp+4Ch+var_34]
.text:004078D2                 mov     [ecx+edx], bl
.text:004078D5
.text:004078D5 loc_4078D5:                             ; CODE XREF: sub_407500+3C8↑j
.text:004078D5                 inc     [esp+4Ch+var_34]
.text:004078D9                 mov     ebp, eax
.text:004078DB                 jmp     loc_407590
.text:004078E0 ; ---------------------------------------------------------------------------
.text:004078E0
.text:004078E0 loc_4078E0:                             ; CODE XREF: sub_407500+105↑j
.text:004078E0                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:004078E0                 mov     dl, 61h ; 'a'   ; jumptable 00407605 case 7
.text:004078E2                 lea     esi, [esi+0]
.text:004078E9                 lea     edi, [edi+0]
.text:004078F0
.text:004078F0 loc_4078F0:                             ; CODE XREF: sub_407500+400↓j
.text:004078F0                                         ; sub_407500+409↓j ...
.text:004078F0                 cmp     [esp+4Ch+var_21], 0
.text:004078F5                 lea     eax, [ebp+1]
.text:004078F8                 jz      short loc_4078C0
.text:004078FA                 mov     bl, dl
.text:004078FC                 jmp     short loc_407898
.text:004078FE ; ---------------------------------------------------------------------------
.text:004078FE
.text:004078FE loc_4078FE:                             ; CODE XREF: sub_407500+105↑j
.text:004078FE                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:004078FE                 mov     dl, 62h ; 'b'   ; jumptable 00407605 case 8
.text:00407900                 jmp     short loc_4078F0
.text:00407902 ; ---------------------------------------------------------------------------
.text:00407902
.text:00407902 loc_407902:                             ; CODE XREF: sub_407500+105↑j
.text:00407902                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407902                 mov     dl, 74h ; 't'   ; jumptable 00407605 case 9
.text:00407904
.text:00407904 loc_407904:                             ; CODE XREF: sub_407500+449↓j
.text:00407904                                         ; sub_407500+455↓j ...
.text:00407904                 cmp     [esp+4Ch+arg_10], 1
.text:00407909                 jnz     short loc_4078F0
.text:0040790B
.text:0040790B loc_40790B:                             ; CODE XREF: sub_407500+45C↓j
.text:0040790B                                         ; sub_407500+4C1↓j ...
.text:0040790B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00407CD2 cases 91,92,94,96,124
.text:00407913                 mov     eax, [esp+4Ch+arg_14]
.text:00407917                 mov     edx, [esp+4Ch+arg_C]
.text:0040791B                 mov     ecx, [esp+4Ch+Str]
.text:0040791F                 mov     ebx, [esp+4Ch+arg_4]
.text:00407923                 mov     [esp+4Ch+var_38], eax ; int
.text:00407927                 mov     ebp, [esp+4Ch+arg_0]
.text:0040792B                 mov     [esp+4Ch+State], edx ; int
.text:0040792F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00407933                 mov     [esp+4Ch+Type], ebx ; int
.text:00407937                 mov     [esp+4Ch+C], ebp ; int
.text:0040793A                 call    sub_407500
.text:0040793F
.text:0040793F loc_40793F:                             ; CODE XREF: sub_407500+972↓j
.text:0040793F                 add     esp, 3Ch
.text:00407942                 pop     ebx
.text:00407943                 pop     esi
.text:00407944                 pop     edi
.text:00407945                 pop     ebp
.text:00407946                 retn
.text:00407947 ; ---------------------------------------------------------------------------
.text:00407947
.text:00407947 loc_407947:                             ; CODE XREF: sub_407500+105↑j
.text:00407947                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407947                 mov     dl, 6Eh ; 'n'   ; jumptable 00407605 case 10
.text:00407949                 jmp     short loc_407904
.text:0040794B ; ---------------------------------------------------------------------------
.text:0040794B
.text:0040794B loc_40794B:                             ; CODE XREF: sub_407500+105↑j
.text:0040794B                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:0040794B                 mov     dl, 76h ; 'v'   ; jumptable 00407605 case 11
.text:0040794D                 jmp     short loc_4078F0
.text:0040794F ; ---------------------------------------------------------------------------
.text:0040794F
.text:0040794F loc_40794F:                             ; CODE XREF: sub_407500+105↑j
.text:0040794F                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:0040794F                 mov     dl, 66h ; 'f'   ; jumptable 00407605 case 12
.text:00407951                 jmp     short loc_4078F0
.text:00407953 ; ---------------------------------------------------------------------------
.text:00407953
.text:00407953 loc_407953:                             ; CODE XREF: sub_407500+105↑j
.text:00407953                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407953                 mov     dl, 72h ; 'r'   ; jumptable 00407605 case 13
.text:00407955                 jmp     short loc_407904
.text:00407957 ; ---------------------------------------------------------------------------
.text:00407957
.text:00407957 loc_407957:                             ; CODE XREF: sub_407500+105↑j
.text:00407957                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407957                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407605 case 39
.text:0040795C                 jz      short loc_40790B ; jumptable 00407CD2 cases 91,92,94,96,124
.text:0040795E                 cmp     [esp+4Ch+arg_10], 2
.text:00407963                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407963                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407969                 mov     edx, [esp+4Ch+arg_4]
.text:0040796D                 cmp     [esp+4Ch+var_34], edx
.text:00407971                 jnb     short loc_40797F
.text:00407973                 mov     ecx, [esp+4Ch+arg_0]
.text:00407977                 mov     edi, [esp+4Ch+var_34]
.text:0040797B                 mov     byte ptr [edi+ecx], 27h ; '''
.text:0040797F
.text:0040797F loc_40797F:                             ; CODE XREF: sub_407500+471↑j
.text:0040797F                 inc     [esp+4Ch+var_34]
.text:00407983                 mov     eax, [esp+4Ch+arg_4]
.text:00407987                 cmp     [esp+4Ch+var_34], eax
.text:0040798B                 jnb     short loc_407999
.text:0040798D                 mov     esi, [esp+4Ch+arg_0]
.text:00407991                 mov     edx, [esp+4Ch+var_34]
.text:00407995                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00407999
.text:00407999 loc_407999:                             ; CODE XREF: sub_407500+48B↑j
.text:00407999                 inc     [esp+4Ch+var_34]
.text:0040799D                 mov     edi, [esp+4Ch+arg_4]
.text:004079A1                 cmp     [esp+4Ch+var_34], edi
.text:004079A5                 jnb     short loc_4079B3
.text:004079A7                 mov     ecx, [esp+4Ch+arg_0]
.text:004079AB                 mov     eax, [esp+4Ch+var_34]
.text:004079AF                 mov     byte ptr [eax+ecx], 27h ; '''
.text:004079B3
.text:004079B3 loc_4079B3:                             ; CODE XREF: sub_407500+4A5↑j
.text:004079B3                                         ; sub_407500+5C4↓j ...
.text:004079B3                 inc     [esp+4Ch+var_34]
.text:004079B7                 jmp     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:004079B7                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:004079BC ; ---------------------------------------------------------------------------
.text:004079BC
.text:004079BC loc_4079BC:                             ; CODE XREF: sub_407500+105↑j
.text:004079BC                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:004079BC                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407605 case 63
.text:004079C1                 jz      loc_40790B      ; jumptable 00407CD2 cases 91,92,94,96,124
.text:004079C7                 cmp     [esp+4Ch+arg_10], 3
.text:004079CC                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:004079CC                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:004079D2                 lea     edx, [ebp+2]
.text:004079D5                 cmp     edx, [esp+4Ch+arg_C]
.text:004079D9                 jnb     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:004079D9                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:004079DF                 mov     esi, [esp+4Ch+Str]
.text:004079E3                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:004079E8                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:004079E8                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:004079EE                 movzx   ecx, byte ptr [ebp+esi+2]
.text:004079F3                 movsx   eax, cl
.text:004079F6                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:004079F9                 cmp     eax, 1Dh
.text:004079FC                 ja      def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:004079FC                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407A02                 jmp     ds:jpt_407A02[eax*4] ; switch jump
.text:00407A02 ; ---------------------------------------------------------------------------
.text:00407A09                 align 4
.text:00407A0C jpt_407A02      dd offset loc_407A84    ; DATA XREF: sub_407500+502↑r
.text:00407A0C                 dd offset def_407A02    ; jump table for switch statement
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset def_407A02
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset loc_407A84
.text:00407A0C                 dd offset loc_407A84
.text:00407A84 ; ---------------------------------------------------------------------------
.text:00407A84
.text:00407A84 loc_407A84:                             ; CODE XREF: sub_407500+502↑j
.text:00407A84                                         ; DATA XREF: sub_407500:jpt_407A02↑o
.text:00407A84                 mov     ebp, edx        ; jumptable 00407A02 cases 33,39-41,45,47,60-62
.text:00407A86                 mov     bl, cl
.text:00407A88                 mov     edx, [esp+4Ch+arg_4]
.text:00407A8C                 cmp     [esp+4Ch+var_34], edx
.text:00407A90                 jnb     short loc_407A9E
.text:00407A92                 mov     ecx, [esp+4Ch+arg_0]
.text:00407A96                 mov     edi, [esp+4Ch+var_34]
.text:00407A9A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00407A9E
.text:00407A9E loc_407A9E:                             ; CODE XREF: sub_407500+590↑j
.text:00407A9E                 inc     [esp+4Ch+var_34]
.text:00407AA2                 mov     eax, [esp+4Ch+arg_4]
.text:00407AA6                 cmp     [esp+4Ch+var_34], eax
.text:00407AAA                 jnb     short loc_407AB8
.text:00407AAC                 mov     edx, [esp+4Ch+arg_0]
.text:00407AB0                 mov     esi, [esp+4Ch+var_34]
.text:00407AB4                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00407AB8
.text:00407AB8 loc_407AB8:                             ; CODE XREF: sub_407500+5AA↑j
.text:00407AB8                 inc     [esp+4Ch+var_34]
.text:00407ABC                 mov     edi, [esp+4Ch+arg_4]
.text:00407AC0                 cmp     [esp+4Ch+var_34], edi
.text:00407AC4                 jnb     loc_4079B3
.text:00407ACA                 mov     eax, [esp+4Ch+arg_0]
.text:00407ACE                 mov     ecx, [esp+4Ch+var_34]
.text:00407AD2                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00407AD6                 jmp     loc_4079B3
.text:00407AD6 ; ---------------------------------------------------------------------------
.text:00407ADB                 align 10h
.text:00407AE0
.text:00407AE0 def_407605:                             ; CODE XREF: sub_407500+FF↑j
.text:00407AE0                                         ; sub_407500+105↑j
.text:00407AE0                                         ; DATA XREF: ...
.text:00407AE0                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00407605 default case, cases 1-6,14-31,64
.text:00407AE5                 jz      loc_407C10
.text:00407AEB                 mov     [esp+4Ch+var_28], 1
.text:00407AF3                 mov     esi, ds:__mb_cur_max
.text:00407AF9                 movzx   edx, bl
.text:00407AFC                 cmp     dword ptr [esi], 1
.text:00407AFF                 jz      loc_407BF4
.text:00407B05                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407B0D                 mov     [esp+4Ch+C], edx ; C
.text:00407B10                 call    _isctype
.text:00407B15
.text:00407B15 loc_407B15:                             ; CODE XREF: sub_407500+705↓j
.text:00407B15                 test    eax, eax
.text:00407B17                 setnz   [esp+4Ch+var_29]
.text:00407B1C
.text:00407B1C loc_407B1C:                             ; CODE XREF: sub_407500+7A5↓j
.text:00407B1C                 cmp     [esp+4Ch+var_21], 0
.text:00407B21                 lea     eax, [ebp+1]
.text:00407B24                 jz      loc_4078C0
.text:00407B2A                 cmp     [esp+4Ch+var_29], 0
.text:00407B2F                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407B2F                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407B35
.text:00407B35 loc_407B35:                             ; CODE XREF: sub_407500+7AB↓j
.text:00407B35                 mov     eax, [esp+4Ch+var_28]
.text:00407B39                 lea     edx, [eax+ebp]
.text:00407B3C                 lea     esi, [esi+0]
.text:00407B40
.text:00407B40 loc_407B40:                             ; CODE XREF: sub_407500+6EF↓j
.text:00407B40                 cmp     [esp+4Ch+var_21], 0
.text:00407B45                 jz      short loc_407BC0
.text:00407B47                 cmp     [esp+4Ch+var_29], 0
.text:00407B4C                 jnz     short loc_407BC0
.text:00407B4E                 mov     edi, [esp+4Ch+arg_4]
.text:00407B52                 cmp     [esp+4Ch+var_34], edi
.text:00407B56                 jnb     short loc_407B64
.text:00407B58                 mov     esi, [esp+4Ch+arg_0]
.text:00407B5C                 mov     eax, [esp+4Ch+var_34]
.text:00407B60                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00407B64
.text:00407B64 loc_407B64:                             ; CODE XREF: sub_407500+656↑j
.text:00407B64                 inc     [esp+4Ch+var_34]
.text:00407B68                 mov     ecx, [esp+4Ch+arg_4]
.text:00407B6C                 cmp     [esp+4Ch+var_34], ecx
.text:00407B70                 jnb     short loc_407B85
.text:00407B72                 mov     cl, bl
.text:00407B74                 mov     esi, [esp+4Ch+arg_0]
.text:00407B78                 mov     edi, [esp+4Ch+var_34]
.text:00407B7C                 shr     cl, 6
.text:00407B7F                 add     cl, 30h ; '0'
.text:00407B82                 mov     [edi+esi], cl
.text:00407B85
.text:00407B85 loc_407B85:                             ; CODE XREF: sub_407500+670↑j
.text:00407B85                 inc     [esp+4Ch+var_34]
.text:00407B89                 mov     edi, [esp+4Ch+arg_4]
.text:00407B8D                 cmp     [esp+4Ch+var_34], edi
.text:00407B91                 jnb     short loc_407BA9
.text:00407B93                 mov     cl, bl
.text:00407B95                 mov     esi, [esp+4Ch+arg_0]
.text:00407B99                 shr     cl, 3
.text:00407B9C                 mov     edi, [esp+4Ch+var_34]
.text:00407BA0                 and     cl, 7
.text:00407BA3                 add     cl, 30h ; '0'
.text:00407BA6                 mov     [edi+esi], cl
.text:00407BA9
.text:00407BA9 loc_407BA9:                             ; CODE XREF: sub_407500+691↑j
.text:00407BA9                 inc     [esp+4Ch+var_34]
.text:00407BAD                 and     bl, 7
.text:00407BB0                 add     bl, 30h ; '0'
.text:00407BB3                 lea     esi, [esi+0]
.text:00407BB9                 lea     edi, [edi+0]
.text:00407BC0
.text:00407BC0 loc_407BC0:                             ; CODE XREF: sub_407500+645↑j
.text:00407BC0                                         ; sub_407500+64C↑j
.text:00407BC0                 lea     eax, [ebp+1]
.text:00407BC3                 cmp     edx, eax
.text:00407BC5                 jbe     loc_4078C0
.text:00407BCB                 mov     ebp, [esp+4Ch+arg_4]
.text:00407BCF                 cmp     [esp+4Ch+var_34], ebp
.text:00407BD3                 jnb     short loc_407BE0
.text:00407BD5                 mov     ecx, [esp+4Ch+arg_0]
.text:00407BD9                 mov     edi, [esp+4Ch+var_34]
.text:00407BDD                 mov     [edi+ecx], bl
.text:00407BE0
.text:00407BE0 loc_407BE0:                             ; CODE XREF: sub_407500+6D3↑j
.text:00407BE0                 inc     [esp+4Ch+var_34]
.text:00407BE4                 mov     ebp, eax
.text:00407BE6                 mov     eax, [esp+4Ch+Str]
.text:00407BEA                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00407BEF                 jmp     loc_407B40
.text:00407BF4 ; ---------------------------------------------------------------------------
.text:00407BF4
.text:00407BF4 loc_407BF4:                             ; CODE XREF: sub_407500+5FF↑j
.text:00407BF4                 mov     ecx, ds:_pctype
.text:00407BFA                 mov     edi, [ecx]
.text:00407BFC                 movzx   eax, word ptr [edi+edx*2]
.text:00407C00                 and     eax, 157h
.text:00407C05                 jmp     loc_407B15
.text:00407C05 ; ---------------------------------------------------------------------------
.text:00407C0A                 align 10h
.text:00407C10
.text:00407C10 loc_407C10:                             ; CODE XREF: sub_407500+5E5↑j
.text:00407C10                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00407C15                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00407C1D                 mov     [esp+4Ch+var_28], 0
.text:00407C25                 mov     [esp+4Ch+var_29], 1
.text:00407C2A                 jz      loc_407DBC
.text:00407C30
.text:00407C30 loc_407C30:                             ; CODE XREF: sub_407500+8CC↓j
.text:00407C30                 mov     ecx, [esp+4Ch+arg_C]
.text:00407C34                 lea     edx, [esp+4Ch+var_18]
.text:00407C38                 mov     edi, [esp+4Ch+Str]
.text:00407C3C                 mov     [esp+4Ch+State], edx ; State
.text:00407C40                 lea     esi, [esp+4Ch+var_18._State]
.text:00407C44                 sub     ecx, ebp
.text:00407C46                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00407C4A                 add     edi, ebp
.text:00407C4C                 mov     [esp+4Ch+var_30], edi
.text:00407C50                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00407C54                 mov     [esp+4Ch+C], esi ; DstCh
.text:00407C57                 call    mbrtowc
.text:00407C5C                 test    eax, eax
.text:00407C5E                 mov     edi, eax
.text:00407C60                 jz      short loc_407CA0
.text:00407C62                 cmp     eax, 0FFFFFFFFh
.text:00407C65                 jz      loc_407DB2
.text:00407C6B                 cmp     eax, 0FFFFFFFEh
.text:00407C6E                 jz      loc_407D72
.text:00407C74                 cmp     [esp+4Ch+arg_10], 1
.text:00407C79                 jz      short loc_407CB0
.text:00407C7B
.text:00407C7B loc_407C7B:                             ; CODE XREF: sub_407500+7B9↓j
.text:00407C7B                                         ; sub_407500+86D↓j
.text:00407C7B                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00407C80                 mov     [esp+4Ch+Type], 157h ; Type
.text:00407C88                 mov     [esp+4Ch+C], ecx ; C
.text:00407C8B                 call    iswctype
.text:00407C90                 test    eax, eax
.text:00407C92                 jnz     short loc_407C99
.text:00407C94                 mov     [esp+4Ch+var_29], 0
.text:00407C99
.text:00407C99 loc_407C99:                             ; CODE XREF: sub_407500+792↑j
.text:00407C99                 mov     [esp+4Ch+var_28], edi
.text:00407C9D                 lea     esi, [esi+0]
.text:00407CA0
.text:00407CA0 loc_407CA0:                             ; CODE XREF: sub_407500+760↑j
.text:00407CA0                                         ; sub_407500+87B↓j ...
.text:00407CA0                 cmp     [esp+4Ch+var_28], 1
.text:00407CA5                 jbe     loc_407B1C
.text:00407CAB                 jmp     loc_407B35
.text:00407CB0 ; ---------------------------------------------------------------------------
.text:00407CB0
.text:00407CB0 loc_407CB0:                             ; CODE XREF: sub_407500+779↑j
.text:00407CB0                 cmp     [esp+4Ch+arg_10], eax
.text:00407CB4                 mov     edx, 1
.text:00407CB9                 jnb     short loc_407C7B
.text:00407CBB
.text:00407CBB loc_407CBB:                             ; CODE XREF: sub_407500+867↓j
.text:00407CBB                 mov     ecx, [esp+4Ch+Str]
.text:00407CBF                 lea     esi, [edx+ebp]
.text:00407CC2                 movsx   eax, byte ptr [esi+ecx]
.text:00407CC6                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00407CC9                 cmp     eax, 21h
.text:00407CCC                 ja      def_407CD2      ; jumptable 00407CD2 default case, cases 93,95,97-123
.text:00407CD2                 jmp     ds:jpt_407CD2[eax*4] ; switch jump
.text:00407CD2 ; ---------------------------------------------------------------------------
.text:00407CD9                 align 4
.text:00407CDC jpt_407CD2      dd offset loc_40790B    ; DATA XREF: sub_407500+7D2↑r
.text:00407CDC                 dd offset loc_40790B    ; jump table for switch statement
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset loc_40790B
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset loc_40790B
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset def_407CD2
.text:00407CDC                 dd offset loc_40790B
.text:00407D64 ; ---------------------------------------------------------------------------
.text:00407D64
.text:00407D64 def_407CD2:                             ; CODE XREF: sub_407500+7CC↑j
.text:00407D64                                         ; sub_407500+7D2↑j
.text:00407D64                                         ; DATA XREF: ...
.text:00407D64                 inc     edx             ; jumptable 00407CD2 default case, cases 93,95,97-123
.text:00407D65                 cmp     edx, edi
.text:00407D67                 jb      loc_407CBB
.text:00407D6D                 jmp     loc_407C7B
.text:00407D72 ; ---------------------------------------------------------------------------
.text:00407D72
.text:00407D72 loc_407D72:                             ; CODE XREF: sub_407500+76E↑j
.text:00407D72                 cmp     ebp, [esp+4Ch+arg_C]
.text:00407D76                 mov     [esp+4Ch+var_29], 0
.text:00407D7B                 jnb     loc_407CA0
.text:00407D81                 mov     eax, [esp+4Ch+var_30]
.text:00407D85                 cmp     byte ptr [eax], 0
.text:00407D88                 jz      loc_407CA0
.text:00407D8E
.text:00407D8E loc_407D8E:                             ; CODE XREF: sub_407500+8AB↓j
.text:00407D8E                 inc     [esp+4Ch+var_28]
.text:00407D92                 mov     esi, [esp+4Ch+var_28]
.text:00407D96                 lea     eax, [esi+ebp]
.text:00407D99                 cmp     eax, [esp+4Ch+arg_C]
.text:00407D9D                 jnb     loc_407CA0
.text:00407DA3                 mov     edi, [esp+4Ch+Str]
.text:00407DA7                 cmp     byte ptr [eax+edi], 0
.text:00407DAB                 jnz     short loc_407D8E
.text:00407DAD                 jmp     loc_407CA0
.text:00407DB2 ; ---------------------------------------------------------------------------
.text:00407DB2
.text:00407DB2 loc_407DB2:                             ; CODE XREF: sub_407500+765↑j
.text:00407DB2                 mov     [esp+4Ch+var_29], 0
.text:00407DB7                 jmp     loc_407CA0
.text:00407DBC ; ---------------------------------------------------------------------------
.text:00407DBC
.text:00407DBC loc_407DBC:                             ; CODE XREF: sub_407500+72A↑j
.text:00407DBC                 mov     edx, [esp+4Ch+Str]
.text:00407DC0                 mov     [esp+4Ch+C], edx ; Str
.text:00407DC3                 call    strlen
.text:00407DC8                 mov     [esp+4Ch+arg_C], eax
.text:00407DCC                 jmp     loc_407C30
.text:00407DD1 ; ---------------------------------------------------------------------------
.text:00407DD1
.text:00407DD1 loc_407DD1:                             ; CODE XREF: sub_407500+105↑j
.text:00407DD1                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407DD1                 mov     dl, bl          ; jumptable 00407605 case 92
.text:00407DD3                 jmp     loc_407904
.text:00407DD8 ; ---------------------------------------------------------------------------
.text:00407DD8
.text:00407DD8 loc_407DD8:                             ; CODE XREF: sub_407500+105↑j
.text:00407DD8                                         ; sub_407500+902↓j
.text:00407DD8                                         ; DATA XREF: ...
.text:00407DD8                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00407605 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00407DDD                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407DDD                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407DE3                 jmp     loc_40790B      ; jumptable 00407CD2 cases 91,92,94,96,124
.text:00407DE8 ; ---------------------------------------------------------------------------
.text:00407DE8
.text:00407DE8 loc_407DE8:                             ; CODE XREF: sub_407500+105↑j
.text:00407DE8                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407DE8                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00407605 cases 123,125
.text:00407DED                 jz      short loc_407E04
.text:00407DEF                 cmp     [esp+4Ch+arg_C], 1
.text:00407DF4
.text:00407DF4 loc_407DF4:                             ; CODE XREF: sub_407500+90C↓j
.text:00407DF4                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407DF4                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407DFA
.text:00407DFA loc_407DFA:                             ; CODE XREF: sub_407500+105↑j
.text:00407DFA                                         ; DATA XREF: sub_407500:jpt_407605↑o
.text:00407DFA                 test    ebp, ebp        ; jumptable 00407605 cases 35,126
.text:00407DFC                 jnz     def_407A02      ; jumptable 00407605 cases 37,43-58,65-90,93,95,97-122
.text:00407DFC                                         ; jumptable 00407A02 default case, cases 34-38,42-44,46,48-59
.text:00407E02                 jmp     short loc_407DD8 ; jumptable 00407605 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00407E04 ; ---------------------------------------------------------------------------
.text:00407E04
.text:00407E04 loc_407E04:                             ; CODE XREF: sub_407500+8ED↑j
.text:00407E04                 mov     esi, [esp+4Ch+Str]
.text:00407E08                 cmp     byte ptr [esi+1], 0
.text:00407E0C                 jmp     short loc_407DF4
.text:00407E0E ; ---------------------------------------------------------------------------
.text:00407E0E
.text:00407E0E loc_407E0E:                             ; CODE XREF: sub_407500:loc_40759F↑j
.text:00407E0E                 test    ebp, ebp
.text:00407E10                 jnz     short loc_407E1D
.text:00407E12                 cmp     [esp+4Ch+arg_10], 1
.text:00407E17                 jz      loc_40790B      ; jumptable 00407CD2 cases 91,92,94,96,124
.text:00407E1D
.text:00407E1D loc_407E1D:                             ; CODE XREF: sub_407500+910↑j
.text:00407E1D                 mov     esi, [esp+4Ch+var_1C]
.text:00407E21                 test    esi, esi
.text:00407E23                 jz      short loc_407E58
.text:00407E25                 mov     edi, [esp+4Ch+var_1C]
.text:00407E29                 movzx   eax, byte ptr [edi]
.text:00407E2C                 test    al, al
.text:00407E2E                 jz      short loc_407E58
.text:00407E30
.text:00407E30 loc_407E30:                             ; CODE XREF: sub_407500+956↓j
.text:00407E30                 mov     ebp, [esp+4Ch+arg_4]
.text:00407E34                 cmp     [esp+4Ch+var_34], ebp
.text:00407E38                 jnb     short loc_407E45
.text:00407E3A                 mov     ecx, [esp+4Ch+arg_0]
.text:00407E3E                 mov     ebx, [esp+4Ch+var_34]
.text:00407E42                 mov     [ebx+ecx], al
.text:00407E45
.text:00407E45 loc_407E45:                             ; CODE XREF: sub_407500+938↑j
.text:00407E45                 inc     [esp+4Ch+var_1C]
.text:00407E49                 inc     [esp+4Ch+var_34]
.text:00407E4D                 mov     edx, [esp+4Ch+var_1C]
.text:00407E51                 movzx   eax, byte ptr [edx]
.text:00407E54                 test    al, al
.text:00407E56                 jnz     short loc_407E30
.text:00407E58
.text:00407E58 loc_407E58:                             ; CODE XREF: sub_407500+923↑j
.text:00407E58                                         ; sub_407500+92E↑j
.text:00407E58                 mov     eax, [esp+4Ch+arg_4]
.text:00407E5C                 cmp     [esp+4Ch+var_34], eax
.text:00407E60                 jnb     short loc_407E6E
.text:00407E62                 mov     edi, [esp+4Ch+arg_0]
.text:00407E66                 mov     esi, [esp+4Ch+var_34]
.text:00407E6A                 mov     byte ptr [esi+edi], 0
.text:00407E6E
.text:00407E6E loc_407E6E:                             ; CODE XREF: sub_407500+960↑j
.text:00407E6E                 mov     eax, [esp+4Ch+var_34]
.text:00407E72                 jmp     loc_40793F
.text:00407E77 ; ---------------------------------------------------------------------------
.text:00407E77
.text:00407E77 loc_407E77:                             ; CODE XREF: sub_407500+95↑j
.text:00407E77                 mov     ebx, [esp+4Ch+Str]
.text:00407E7B                 cmp     byte ptr [ebp+ebx+0], 0
.text:00407E80                 jmp     loc_40759F
.text:00407E85 ; ---------------------------------------------------------------------------
.text:00407E85
.text:00407E85 loc_407E85:                             ; CODE XREF: sub_407500+3D↑j
.text:00407E85                                         ; DATA XREF: sub_407500:jpt_40753D↑o
.text:00407E85                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040753D case 2
.text:00407E89                 cmp     [esp+4Ch+var_34], edx
.text:00407E8D                 jnb     short loc_407E96
.text:00407E8F                 mov     ecx, [esp+4Ch+arg_0]
.text:00407E93                 mov     byte ptr [ecx], 27h ; '''
.text:00407E96
.text:00407E96 loc_407E96:                             ; CODE XREF: sub_407500+98D↑j
.text:00407E96                 mov     [esp+4Ch+var_34], 1
.text:00407E9E                 mov     [esp+4Ch+var_1C], 4074EEh
.text:00407EA6                 jmp     loc_407586
.text:00407EAB ; ---------------------------------------------------------------------------
.text:00407EAB
.text:00407EAB loc_407EAB:                             ; CODE XREF: sub_407500+3D↑j
.text:00407EAB                                         ; DATA XREF: sub_407500:jpt_40753D↑o
.text:00407EAB                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040753D case 4
.text:00407EB0                 jmp     def_40753D      ; jumptable 0040753D default case, cases 0,1
.text:00407EB5 ; ---------------------------------------------------------------------------
.text:00407EB5
.text:00407EB5 loc_407EB5:                             ; CODE XREF: sub_407500+3D↑j
.text:00407EB5                                         ; DATA XREF: sub_407500:jpt_40753D↑o
.text:00407EB5                 mov     [esp+4Ch+C], 4074F0h ; jumptable 0040753D cases 5,6
.text:00407EBC                 call    ds:libintl_gettext
.text:00407EC2                 cmp     eax, 4074F0h
.text:00407EC7                 mov     edi, eax
.text:00407EC9                 jz      short loc_407F40
.text:00407ECB
.text:00407ECB loc_407ECB:                             ; CODE XREF: sub_407500+A45↓j
.text:00407ECB                                         ; sub_407500+A4C↓j
.text:00407ECB                 mov     [esp+4Ch+C], 4074EEh
.text:00407ED2                 call    ds:libintl_gettext
.text:00407ED8                 cmp     eax, 4074EEh
.text:00407EDD                 mov     edx, eax
.text:00407EDF                 jz      short loc_407F32
.text:00407EE1
.text:00407EE1 loc_407EE1:                             ; CODE XREF: sub_407500+A37↓j
.text:00407EE1                                         ; sub_407500+A3E↓j
.text:00407EE1                 mov     [esp+4Ch+var_1C], edi
.text:00407EE5                 cmp     byte ptr [edi], 0
.text:00407EE8                 jz      short loc_407F18
.text:00407EEA
.text:00407EEA loc_407EEA:                             ; CODE XREF: sub_407500+A16↓j
.text:00407EEA                 mov     ecx, [esp+4Ch+arg_4]
.text:00407EEE                 cmp     [esp+4Ch+var_34], ecx
.text:00407EF2                 jnb     short loc_407F07
.text:00407EF4                 mov     ebp, [esp+4Ch+var_1C]
.text:00407EF8                 mov     edi, [esp+4Ch+arg_0]
.text:00407EFC                 mov     esi, [esp+4Ch+var_34]
.text:00407F00                 movzx   ebx, byte ptr [ebp+0]
.text:00407F04                 mov     [esi+edi], bl
.text:00407F07
.text:00407F07 loc_407F07:                             ; CODE XREF: sub_407500+9F2↑j
.text:00407F07                 inc     [esp+4Ch+var_1C]
.text:00407F0B                 inc     [esp+4Ch+var_34]
.text:00407F0F                 mov     eax, [esp+4Ch+var_1C]
.text:00407F13                 cmp     byte ptr [eax], 0
.text:00407F16                 jnz     short loc_407EEA
.text:00407F18
.text:00407F18 loc_407F18:                             ; CODE XREF: sub_407500+9E8↑j
.text:00407F18                 mov     [esp+4Ch+var_21], 1
.text:00407F1D                 mov     [esp+4Ch+var_1C], edx
.text:00407F21                 mov     [esp+4Ch+C], edx ; Str
.text:00407F24                 call    strlen
.text:00407F29                 mov     [esp+4Ch+var_20], eax
.text:00407F2D                 jmp     def_40753D      ; jumptable 0040753D default case, cases 0,1
.text:00407F32 ; ---------------------------------------------------------------------------
.text:00407F32
.text:00407F32 loc_407F32:                             ; CODE XREF: sub_407500+9DF↑j
.text:00407F32                 cmp     [esp+4Ch+arg_10], 6
.text:00407F37                 jnz     short loc_407EE1
.text:00407F39                 mov     edx, offset asc_4074EC ; "\"'`"
.text:00407F3E                 jmp     short loc_407EE1
.text:00407F40 ; ---------------------------------------------------------------------------
.text:00407F40
.text:00407F40 loc_407F40:                             ; CODE XREF: sub_407500+9C9↑j
.text:00407F40                 cmp     [esp+4Ch+arg_10], 6
.text:00407F45                 jnz     short loc_407ECB
.text:00407F47                 mov     edi, offset asc_4074EC ; "\"'`"
.text:00407F4C                 jmp     loc_407ECB
.text:00407F4C sub_407500      endp
.text:00407F4C
.text:00407F51 ; ---------------------------------------------------------------------------
.text:00407F51                 jmp     short loc_407F60
.text:00407F51 ; ---------------------------------------------------------------------------
.text:00407F53                 align 10h
.text:00407F60
.text:00407F60 loc_407F60:                             ; CODE XREF: .text:00407F51↑j
.text:00407F60                 sub     esp, 0Ch
.text:00407F63                 mov     [esp+4], ebx
.text:00407F67                 mov     [esp+8], esi
.text:00407F6B                 call    _errno
.text:00407F70                 mov     esi, [eax]
.text:00407F72                 mov     dword ptr [esp], 24h ; '$'
.text:00407F79                 call    sub_407140
.text:00407F7E                 mov     edx, [esp+10h]
.text:00407F82                 mov     ebx, eax
.text:00407F84                 test    edx, edx
.text:00407F86                 jz      short loc_407FD1
.text:00407F88
.text:00407F88 loc_407F88:                             ; CODE XREF: .text:00407FD6↓j
.text:00407F88                 mov     ecx, [edx]
.text:00407F8A                 mov     [ebx], ecx
.text:00407F8C                 mov     ecx, [edx+4]
.text:00407F8F                 mov     [ebx+4], ecx
.text:00407F92                 mov     ecx, [edx+8]
.text:00407F95                 mov     [ebx+8], ecx
.text:00407F98                 mov     ecx, [edx+0Ch]
.text:00407F9B                 mov     [ebx+0Ch], ecx
.text:00407F9E                 mov     ecx, [edx+10h]
.text:00407FA1                 mov     [ebx+10h], ecx
.text:00407FA4                 mov     ecx, [edx+14h]
.text:00407FA7                 mov     [ebx+14h], ecx
.text:00407FAA                 mov     ecx, [edx+18h]
.text:00407FAD                 mov     [ebx+18h], ecx
.text:00407FB0                 mov     ecx, [edx+1Ch]
.text:00407FB3                 mov     [ebx+1Ch], ecx
.text:00407FB6                 mov     ecx, [edx+20h]
.text:00407FB9                 mov     [ebx+20h], ecx
.text:00407FBC                 call    _errno
.text:00407FC1                 mov     [eax], esi
.text:00407FC3                 mov     esi, [esp+8]
.text:00407FC7                 mov     eax, ebx
.text:00407FC9                 mov     ebx, [esp+4]
.text:00407FCD                 add     esp, 0Ch
.text:00407FD0                 retn
.text:00407FD1 ; ---------------------------------------------------------------------------
.text:00407FD1
.text:00407FD1 loc_407FD1:                             ; CODE XREF: .text:00407F86↑j
.text:00407FD1                 mov     edx, offset dword_41B380
.text:00407FD6                 jmp     short loc_407F88
.text:00407FD6 ; ---------------------------------------------------------------------------
.text:00407FD8                 align 10h
.text:00407FE0                 mov     eax, [esp+4]
.text:00407FE4                 test    eax, eax
.text:00407FE6                 jz      short loc_407FF0
.text:00407FE8
.text:00407FE8 loc_407FE8:                             ; CODE XREF: .text:00407FF5↓j
.text:00407FE8                 mov     eax, [eax]
.text:00407FEA                 retn
.text:00407FEA ; ---------------------------------------------------------------------------
.text:00407FEB                 align 10h
.text:00407FF0
.text:00407FF0 loc_407FF0:                             ; CODE XREF: .text:00407FE6↑j
.text:00407FF0                 mov     eax, offset dword_41B380
.text:00407FF5                 jmp     short loc_407FE8
.text:00407FF5 ; ---------------------------------------------------------------------------
.text:00407FF7                 align 10h
.text:00408000                 mov     edx, [esp+4]
.text:00408004                 test    edx, edx
.text:00408006                 jz      short loc_408010
.text:00408008
.text:00408008 loc_408008:                             ; CODE XREF: .text:00408015↓j
.text:00408008                 mov     ecx, [esp+8]
.text:0040800C                 mov     [edx], ecx
.text:0040800E                 retn
.text:0040800E ; ---------------------------------------------------------------------------
.text:0040800F                 align 10h
.text:00408010
.text:00408010 loc_408010:                             ; CODE XREF: .text:00408006↑j
.text:00408010                 mov     edx, offset dword_41B380
.text:00408015                 jmp     short loc_408008
.text:00408015 ; ---------------------------------------------------------------------------
.text:00408017                 align 10h
.text:00408020                 sub     esp, 8
.text:00408023                 mov     eax, [esp+0Ch]
.text:00408027                 movzx   ecx, byte ptr [esp+10h]
.text:0040802C                 mov     [esp], ebx
.text:0040802F                 mov     ebx, [esp+14h]
.text:00408033                 mov     [esp+4], esi
.text:00408037                 mov     dl, cl
.text:00408039                 shr     dl, 5
.text:0040803C                 movzx   edx, dl
.text:0040803F                 shl     edx, 2
.text:00408042                 test    eax, eax
.text:00408044                 lea     esi, [edx+eax+4]
.text:00408048                 jz      short loc_408070
.text:0040804A
.text:0040804A loc_40804A:                             ; CODE XREF: .text:00408076↓j
.text:0040804A                 mov     edx, [esi]
.text:0040804C                 and     ecx, 1Fh
.text:0040804F                 and     ebx, 1
.text:00408052                 mov     eax, edx
.text:00408054                 shr     eax, cl
.text:00408056                 and     eax, 1
.text:00408059                 xor     ebx, eax
.text:0040805B                 shl     ebx, cl
.text:0040805D                 xor     edx, ebx
.text:0040805F                 mov     [esi], edx
.text:00408061                 mov     ebx, [esp]
.text:00408064                 mov     esi, [esp+4]
.text:00408068                 add     esp, 8
.text:0040806B                 retn
.text:0040806B ; ---------------------------------------------------------------------------
.text:0040806C                 align 10h
.text:00408070
.text:00408070 loc_408070:                             ; CODE XREF: .text:00408048↑j
.text:00408070                 lea     esi, dword_41B384[edx]
.text:00408076                 jmp     short loc_40804A
.text:00408076 ; ---------------------------------------------------------------------------
.text:00408078                 align 10h
.text:00408080                 sub     esp, 2Ch
.text:00408083                 mov     [esp+24h], ebx
.text:00408087                 mov     ebx, [esp+40h]
.text:0040808B                 mov     [esp+28h], esi
.text:0040808F                 test    ebx, ebx
.text:00408091                 jz      short loc_4080E0
.text:00408093
.text:00408093 loc_408093:                             ; CODE XREF: .text:004080E5↓j
.text:00408093                 call    _errno
.text:00408098                 mov     esi, [eax]
.text:0040809A                 mov     [esp+14h], ebx
.text:0040809E                 mov     edx, [ebx]
.text:004080A0                 mov     ecx, [esp+38h]
.text:004080A4                 mov     ebx, [esp+3Ch]
.text:004080A8                 mov     [esp+10h], edx
.text:004080AC                 mov     edx, [esp+34h]
.text:004080B0                 mov     [esp+0Ch], ebx
.text:004080B4                 mov     [esp+8], ecx
.text:004080B8                 mov     [esp+4], edx
.text:004080BC                 mov     edx, [esp+30h]
.text:004080C0                 mov     [esp], edx
.text:004080C3                 call    sub_407500
.text:004080C8                 mov     ebx, eax
.text:004080CA                 call    _errno
.text:004080CF                 mov     [eax], esi
.text:004080D1                 mov     esi, [esp+28h]
.text:004080D5                 mov     eax, ebx
.text:004080D7                 mov     ebx, [esp+24h]
.text:004080DB                 add     esp, 2Ch
.text:004080DE                 retn
.text:004080DE ; ---------------------------------------------------------------------------
.text:004080DF                 align 10h
.text:004080E0
.text:004080E0 loc_4080E0:                             ; CODE XREF: .text:00408091↑j
.text:004080E0                 mov     ebx, offset dword_41B380
.text:004080E5                 jmp     short loc_408093
.text:004080E5 ; ---------------------------------------------------------------------------
.text:004080E7                 align 10h
.text:004080F0                 push    ebp
.text:004080F1                 push    edi
.text:004080F2                 push    esi
.text:004080F3                 push    ebx
.text:004080F4                 sub     esp, 2Ch
.text:004080F7                 mov     ebp, [esp+48h]
.text:004080FB                 call    _errno
.text:00408100                 mov     edx, [eax]
.text:00408102                 test    ebp, ebp
.text:00408104                 mov     ebx, ebp
.text:00408106                 mov     [esp+28h], edx
.text:0040810A                 jz      loc_4081C0
.text:00408110
.text:00408110 loc_408110:                             ; CODE XREF: .text:004081C5↓j
.text:00408110                 call    _errno
.text:00408115                 mov     edi, [eax]
.text:00408117                 mov     esi, ebp
.text:00408119                 mov     [esp+14h], ebx
.text:0040811D                 mov     ecx, [ebx]
.text:0040811F                 mov     dword ptr [esp], 0
.text:00408126                 mov     edx, [esp+44h]
.text:0040812A                 mov     dword ptr [esp+4], 0
.text:00408132                 mov     eax, [esp+40h]
.text:00408136                 mov     [esp+10h], ecx
.text:0040813A                 mov     [esp+0Ch], edx
.text:0040813E                 mov     [esp+8], eax
.text:00408142                 call    sub_407500
.text:00408147                 mov     ebx, eax
.text:00408149                 call    _errno
.text:0040814E                 mov     [eax], edi
.text:00408150                 lea     edi, [ebx+1]
.text:00408153                 mov     [esp], edi
.text:00408156                 call    sub_407140
.text:0040815B                 mov     [esp+24h], eax
.text:0040815F                 test    ebp, ebp
.text:00408161                 jz      short loc_4081B2
.text:00408163
.text:00408163 loc_408163:                             ; CODE XREF: .text:004081B7↓j
.text:00408163                 call    _errno
.text:00408168                 mov     ebp, [eax]
.text:0040816A                 mov     [esp+14h], esi
.text:0040816E                 mov     ecx, [esi]
.text:00408170                 mov     [esp+4], edi
.text:00408174                 mov     edx, [esp+44h]
.text:00408178                 mov     esi, [esp+24h]
.text:0040817C                 mov     [esp+10h], ecx
.text:00408180                 mov     eax, [esp+40h]
.text:00408184                 mov     [esp+0Ch], edx
.text:00408188                 mov     [esp], esi
.text:0040818B                 mov     [esp+8], eax
.text:0040818F                 call    sub_407500
.text:00408194                 call    _errno
.text:00408199                 mov     [eax], ebp
.text:0040819B                 call    _errno
.text:004081A0                 mov     ebx, [esp+28h]
.text:004081A4                 mov     [eax], ebx
.text:004081A6                 mov     eax, [esp+24h]
.text:004081AA                 add     esp, 2Ch
.text:004081AD                 pop     ebx
.text:004081AE                 pop     esi
.text:004081AF                 pop     edi
.text:004081B0                 pop     ebp
.text:004081B1                 retn
.text:004081B2 ; ---------------------------------------------------------------------------
.text:004081B2
.text:004081B2 loc_4081B2:                             ; CODE XREF: .text:00408161↑j
.text:004081B2                 mov     esi, offset dword_41B380
.text:004081B7                 jmp     short loc_408163
.text:004081B7 ; ---------------------------------------------------------------------------
.text:004081B9                 align 10h
.text:004081C0
.text:004081C0 loc_4081C0:                             ; CODE XREF: .text:0040810A↑j
.text:004081C0                 mov     ebx, offset dword_41B380
.text:004081C5                 jmp     loc_408110
.text:004081C5 ; ---------------------------------------------------------------------------
.text:004081CA                 align 10h
.text:004081D0                 sub     esp, 1Ch
.text:004081D3                 mov     edx, [esp+24h]
.text:004081D7                 mov     dword ptr [esp+0Ch], offset dword_41B380
.text:004081DF                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004081E7                 mov     [esp+4], edx
.text:004081EB                 mov     edx, [esp+20h]
.text:004081EF                 mov     [esp], edx
.text:004081F2                 call    sub_408640
.text:004081F7                 add     esp, 1Ch
.text:004081FA                 retn
.text:004081FA ; ---------------------------------------------------------------------------
.text:004081FB                 align 10h
.text:00408200                 sub     esp, 1Ch
.text:00408203                 mov     edx, [esp+20h]
.text:00408207                 mov     dword ptr [esp+0Ch], offset dword_41B380
.text:0040820F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00408217                 mov     [esp+4], edx
.text:0040821B                 mov     dword ptr [esp], 0
.text:00408222                 call    sub_408640
.text:00408227                 add     esp, 1Ch
.text:0040822A                 retn
.text:0040822A ; ---------------------------------------------------------------------------
.text:0040822B                 align 10h
.text:00408230
.text:00408230 ; =============== S U B R O U T I N E =======================================
.text:00408230
.text:00408230
.text:00408230 ; int __cdecl sub_408230(int, int, char *)
.text:00408230 sub_408230      proc near               ; CODE XREF: sub_405840+1A↑p
.text:00408230                                         ; sub_405870+1A↑p
.text:00408230
.text:00408230 var_BC          = dword ptr -0BCh
.text:00408230 var_B8          = dword ptr -0B8h
.text:00408230 var_B4          = dword ptr -0B4h
.text:00408230 var_B0          = dword ptr -0B0h
.text:00408230 var_AC          = dword ptr -0ACh
.text:00408230 var_A8          = dword ptr -0A8h
.text:00408230 var_A4          = dword ptr -0A4h
.text:00408230 var_A0          = dword ptr -0A0h
.text:00408230 var_9C          = dword ptr -9Ch
.text:00408230 var_98          = dword ptr -98h
.text:00408230 var_94          = dword ptr -94h
.text:00408230 var_90          = dword ptr -90h
.text:00408230 var_8C          = dword ptr -8Ch
.text:00408230 var_7C          = dword ptr -7Ch
.text:00408230 var_78          = dword ptr -78h
.text:00408230 var_74          = dword ptr -74h
.text:00408230 var_70          = dword ptr -70h
.text:00408230 var_6C          = dword ptr -6Ch
.text:00408230 var_68          = dword ptr -68h
.text:00408230 var_64          = dword ptr -64h
.text:00408230 var_60          = dword ptr -60h
.text:00408230 var_5C          = dword ptr -5Ch
.text:00408230 var_4C          = dword ptr -4Ch
.text:00408230 var_48          = dword ptr -48h
.text:00408230 var_44          = dword ptr -44h
.text:00408230 var_40          = dword ptr -40h
.text:00408230 var_3C          = dword ptr -3Ch
.text:00408230 var_38          = dword ptr -38h
.text:00408230 var_34          = dword ptr -34h
.text:00408230 var_30          = dword ptr -30h
.text:00408230 var_2C          = dword ptr -2Ch
.text:00408230 arg_0           = dword ptr  4
.text:00408230 arg_4           = dword ptr  8
.text:00408230 arg_8           = dword ptr  0Ch
.text:00408230
.text:00408230                 push    ebp
.text:00408231                 xor     eax, eax
.text:00408233                 mov     ecx, 8
.text:00408238                 push    edi
.text:00408239                 push    esi
.text:0040823A                 push    ebx
.text:0040823B                 sub     esp, 0ACh
.text:00408241                 mov     ebp, [esp+0BCh+arg_4]
.text:00408248                 cld
.text:00408249                 lea     edi, [esp+0BCh+var_A8]
.text:0040824D                 mov     [esp+0BCh+var_AC], ebp
.text:00408251                 rep stosd
.text:00408253                 mov     eax, [esp+0BCh+var_8C]
.text:00408257                 mov     edi, [esp+0BCh+var_AC]
.text:0040825B                 mov     esi, [esp+0BCh+var_A8]
.text:0040825F                 mov     [esp+0BCh+var_5C], eax
.text:00408263                 mov     ebp, [esp+0BCh+var_A4]
.text:00408267                 mov     eax, [esp+0BCh+var_AC]
.text:0040826B                 mov     [esp+0BCh+var_7C], edi
.text:0040826F                 mov     ecx, [esp+0BCh+var_94]
.text:00408273                 mov     edi, [esp+0BCh+var_A0]
.text:00408277                 mov     [esp+0BCh+var_78], esi
.text:0040827B                 mov     edx, [esp+0BCh+var_90]
.text:0040827F                 mov     esi, [esp+0BCh+var_9C]
.text:00408283                 mov     [esp+0BCh+var_4C], eax
.text:00408287                 mov     ebx, [esp+0BCh+var_98]
.text:0040828B                 mov     eax, [esp+0BCh+var_A8]
.text:0040828F                 mov     [esp+0BCh+var_74], ebp
.text:00408293                 mov     [esp+0BCh+var_70], edi
.text:00408297                 mov     [esp+0BCh+var_6C], esi
.text:0040829B                 mov     [esp+0BCh+var_68], ebx
.text:0040829F                 mov     [esp+0BCh+var_64], ecx
.text:004082A3                 mov     [esp+0BCh+var_60], edx
.text:004082A7                 mov     [esp+0BCh+var_48], eax
.text:004082AB                 mov     [esp+0BCh+var_44], ebp
.text:004082AF                 mov     [esp+0BCh+var_40], edi
.text:004082B3                 mov     [esp+0BCh+var_3C], esi
.text:004082BA                 mov     [esp+0BCh+var_38], ebx
.text:004082C1                 mov     ebx, [esp+0BCh+var_8C]
.text:004082C5                 mov     [esp+0BCh+var_30], edx
.text:004082CC                 mov     edx, [esp+0BCh+arg_8]
.text:004082D3                 mov     [esp+0BCh+var_34], ecx
.text:004082DA                 lea     ecx, [esp+0BCh+var_4C]
.text:004082DE                 mov     [esp+0BCh+var_B8], edx ; char *
.text:004082E2                 mov     edx, [esp+0BCh+arg_0]
.text:004082E9                 mov     [esp+0BCh+var_2C], ebx
.text:004082F0                 mov     [esp+0BCh+var_B0], ecx ; int
.text:004082F4                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:004082FC                 mov     [esp+0BCh+var_BC], edx ; int
.text:004082FF                 call    sub_408640
.text:00408304                 add     esp, 0ACh
.text:0040830A                 pop     ebx
.text:0040830B                 pop     esi
.text:0040830C                 pop     edi
.text:0040830D                 pop     ebp
.text:0040830E                 retn
.text:0040830E sub_408230      endp
.text:0040830E
.text:0040830E ; ---------------------------------------------------------------------------
.text:0040830F                 align 10h
.text:00408310                 push    ebp
.text:00408311                 xor     eax, eax
.text:00408313                 mov     ecx, 8
.text:00408318                 push    edi
.text:00408319                 push    esi
.text:0040831A                 push    ebx
.text:0040831B                 sub     esp, 0ACh
.text:00408321                 mov     edx, [esp+0C4h]
.text:00408328                 cld
.text:00408329                 lea     edi, [esp+14h]
.text:0040832D                 mov     [esp+10h], edx
.text:00408331                 rep stosd
.text:00408333                 mov     eax, [esp+30h]
.text:00408337                 mov     ebp, [esp+10h]
.text:0040833B                 mov     edi, [esp+14h]
.text:0040833F                 mov     [esp+60h], eax
.text:00408343                 mov     esi, [esp+20h]
.text:00408347                 mov     eax, [esp+10h]
.text:0040834B                 mov     [esp+40h], ebp
.text:0040834F                 mov     ecx, [esp+28h]
.text:00408353                 mov     ebp, [esp+18h]
.text:00408357                 mov     [esp+44h], edi
.text:0040835B                 mov     edx, [esp+2Ch]
.text:0040835F                 mov     edi, [esp+1Ch]
.text:00408363                 mov     [esp+70h], eax
.text:00408367                 mov     ebx, [esp+24h]
.text:0040836B                 mov     eax, [esp+14h]
.text:0040836F                 mov     [esp+48h], ebp
.text:00408373                 mov     [esp+4Ch], edi
.text:00408377                 mov     [esp+50h], esi
.text:0040837B                 mov     [esp+54h], ebx
.text:0040837F                 mov     [esp+58h], ecx
.text:00408383                 mov     [esp+5Ch], edx
.text:00408387                 mov     [esp+74h], eax
.text:0040838B                 mov     [esp+78h], ebp
.text:0040838F                 mov     [esp+7Ch], edi
.text:00408393                 mov     [esp+80h], esi
.text:0040839A                 mov     [esp+84h], ebx
.text:004083A1                 mov     esi, [esp+30h]
.text:004083A5                 lea     ebx, [esp+70h]
.text:004083A9                 mov     [esp+8Ch], edx
.text:004083B0                 mov     edx, [esp+0C8h]
.text:004083B7                 mov     [esp+88h], ecx
.text:004083BE                 mov     ecx, [esp+0CCh]
.text:004083C5                 mov     [esp+4], edx
.text:004083C9                 mov     edx, [esp+0C0h]
.text:004083D0                 mov     [esp+90h], esi
.text:004083D7                 mov     [esp+0Ch], ebx
.text:004083DB                 mov     [esp+8], ecx
.text:004083DF                 mov     [esp], edx
.text:004083E2                 call    sub_408640
.text:004083E7                 add     esp, 0ACh
.text:004083ED                 pop     ebx
.text:004083EE                 pop     esi
.text:004083EF                 pop     edi
.text:004083F0                 pop     ebp
.text:004083F1                 retn
.text:004083F1 ; ---------------------------------------------------------------------------
.text:004083F2                 align 10h
.text:00408400                 push    ebp
.text:00408401                 xor     eax, eax
.text:00408403                 mov     ecx, 8
.text:00408408                 push    edi
.text:00408409                 push    esi
.text:0040840A                 push    ebx
.text:0040840B                 sub     esp, 0ACh
.text:00408411                 mov     edi, [esp+0C0h]
.text:00408418                 cld
.text:00408419                 mov     [esp+10h], edi
.text:0040841D                 lea     edi, [esp+14h]
.text:00408421                 rep stosd
.text:00408423                 mov     eax, [esp+30h]
.text:00408427                 mov     esi, [esp+10h]
.text:0040842B                 mov     ebx, [esp+14h]
.text:0040842F                 mov     [esp+60h], eax
.text:00408433                 mov     ebp, [esp+18h]
.text:00408437                 mov     eax, [esp+10h]
.text:0040843B                 mov     [esp+40h], esi
.text:0040843F                 mov     edi, [esp+1Ch]
.text:00408443                 mov     esi, [esp+20h]
.text:00408447                 mov     [esp+44h], ebx
.text:0040844B                 mov     ecx, [esp+28h]
.text:0040844F                 mov     edx, [esp+2Ch]
.text:00408453                 mov     [esp+70h], eax
.text:00408457                 mov     ebx, [esp+24h]
.text:0040845B                 mov     eax, [esp+14h]
.text:0040845F                 mov     [esp+48h], ebp
.text:00408463                 mov     [esp+4Ch], edi
.text:00408467                 mov     [esp+50h], esi
.text:0040846B                 mov     [esp+54h], ebx
.text:0040846F                 mov     [esp+58h], ecx
.text:00408473                 mov     [esp+5Ch], edx
.text:00408477                 mov     [esp+74h], eax
.text:0040847B                 mov     [esp+78h], ebp
.text:0040847F                 mov     [esp+7Ch], edi
.text:00408483                 mov     [esp+80h], esi
.text:0040848A                 mov     [esp+84h], ebx
.text:00408491                 mov     [esp+8Ch], edx
.text:00408498                 lea     edx, [esp+70h]
.text:0040849C                 mov     [esp+88h], ecx
.text:004084A3                 mov     ecx, [esp+30h]
.text:004084A7                 mov     [esp+0Ch], edx
.text:004084AB                 mov     edx, [esp+0C4h]
.text:004084B2                 mov     [esp+90h], ecx
.text:004084B9                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004084C1                 mov     [esp+4], edx
.text:004084C5                 mov     dword ptr [esp], 0
.text:004084CC                 call    sub_408640
.text:004084D1                 add     esp, 0ACh
.text:004084D7                 pop     ebx
.text:004084D8                 pop     esi
.text:004084D9                 pop     edi
.text:004084DA                 pop     ebp
.text:004084DB                 retn
.text:004084DB ; ---------------------------------------------------------------------------
.text:004084DC                 align 10h
.text:004084E0                 push    edi
.text:004084E1                 push    esi
.text:004084E2                 push    ebx
.text:004084E3                 sub     esp, 40h
.text:004084E6                 mov     edx, ds:dword_41B38C
.text:004084EC                 mov     ebx, ds:dword_41B380
.text:004084F2                 mov     esi, ds:dword_41B388
.text:004084F8                 mov     edi, ds:dword_41B384
.text:004084FE                 mov     [esp+1Ch], edx
.text:00408502                 mov     ecx, ds:dword_41B390
.text:00408508                 mov     edx, ds:dword_41B3A0
.text:0040850E                 mov     [esp+10h], ebx
.text:00408512                 mov     ebx, ds:dword_41B394
.text:00408518                 mov     [esp+30h], edx
.text:0040851C                 movzx   edx, byte ptr [esp+54h]
.text:00408521                 mov     [esp+18h], esi
.text:00408525                 mov     esi, ds:dword_41B39C
.text:0040852B                 mov     [esp+14h], edi
.text:0040852F                 mov     edi, ds:dword_41B398
.text:00408535                 mov     [esp+20h], ecx
.text:00408539                 mov     cl, dl
.text:0040853B                 shr     cl, 5
.text:0040853E                 mov     [esp+24h], ebx
.text:00408542                 movzx   ebx, cl
.text:00408545                 mov     [esp+2Ch], esi
.text:00408549                 lea     esi, [esp+10h]
.text:0040854D                 mov     [esp+28h], edi
.text:00408551                 lea     edi, [esi+ebx*4]
.text:00408554                 mov     ebx, edx
.text:00408556                 mov     edx, [edi+4]
.text:00408559                 and     ebx, 1Fh
.text:0040855C                 mov     cl, bl
.text:0040855E                 mov     eax, edx
.text:00408560                 shr     eax, cl
.text:00408562                 and     eax, 1
.text:00408565                 xor     eax, 1
.text:00408568                 shl     eax, cl
.text:0040856A                 xor     edx, eax
.text:0040856C                 mov     [edi+4], edx
.text:0040856F                 mov     edx, [esp+50h]
.text:00408573                 mov     [esp+0Ch], esi
.text:00408577                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040857F                 mov     [esp+4], edx
.text:00408583                 mov     dword ptr [esp], 0
.text:0040858A                 call    sub_408640
.text:0040858F                 add     esp, 40h
.text:00408592                 pop     ebx
.text:00408593                 pop     esi
.text:00408594                 pop     edi
.text:00408595                 retn
.text:00408595 ; ---------------------------------------------------------------------------
.text:00408596                 align 10h
.text:004085A0
.text:004085A0 ; =============== S U B R O U T I N E =======================================
.text:004085A0
.text:004085A0
.text:004085A0 ; int __cdecl sub_4085A0(char *)
.text:004085A0 sub_4085A0      proc near               ; CODE XREF: sub_405F10+64↑p
.text:004085A0
.text:004085A0 var_4C          = dword ptr -4Ch
.text:004085A0 var_48          = dword ptr -48h
.text:004085A0 var_44          = dword ptr -44h
.text:004085A0 var_40          = dword ptr -40h
.text:004085A0 var_3C          = dword ptr -3Ch
.text:004085A0 var_38          = dword ptr -38h
.text:004085A0 var_34          = dword ptr -34h
.text:004085A0 var_30          = dword ptr -30h
.text:004085A0 var_2C          = dword ptr -2Ch
.text:004085A0 var_28          = dword ptr -28h
.text:004085A0 var_24          = dword ptr -24h
.text:004085A0 var_20          = dword ptr -20h
.text:004085A0 var_1C          = dword ptr -1Ch
.text:004085A0 arg_0           = dword ptr  4
.text:004085A0
.text:004085A0                 sub     esp, 4Ch
.text:004085A3                 mov     ecx, ds:dword_41B380
.text:004085A9                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:004085B1                 mov     edx, ds:dword_41B384
.text:004085B7                 mov     [esp+4Ch+var_4C], 0 ; int
.text:004085BE                 mov     [esp+4Ch+var_3C], ecx
.text:004085C2                 mov     ecx, ds:dword_41B38C
.text:004085C8                 mov     [esp+4Ch+var_38], edx
.text:004085CC                 mov     edx, ds:dword_41B388
.text:004085D2                 mov     [esp+4Ch+var_30], ecx
.text:004085D6                 mov     ecx, ds:dword_41B390
.text:004085DC                 mov     eax, edx
.text:004085DE                 shr     eax, 1Ah
.text:004085E1                 and     eax, 1
.text:004085E4                 xor     eax, 1
.text:004085E7                 mov     [esp+4Ch+var_2C], ecx
.text:004085EB                 shl     eax, 1Ah
.text:004085EE                 mov     ecx, ds:dword_41B394
.text:004085F4                 xor     edx, eax
.text:004085F6                 mov     [esp+4Ch+var_34], edx
.text:004085FA                 mov     edx, [esp+4Ch+arg_0]
.text:004085FE                 mov     [esp+4Ch+var_28], ecx
.text:00408602                 mov     ecx, ds:dword_41B398
.text:00408608                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040860C                 mov     [esp+4Ch+var_24], ecx
.text:00408610                 mov     ecx, ds:dword_41B39C
.text:00408616                 mov     [esp+4Ch+var_20], ecx
.text:0040861A                 mov     ecx, ds:dword_41B3A0
.text:00408620                 mov     [esp+4Ch+var_1C], ecx
.text:00408624                 lea     ecx, [esp+4Ch+var_3C]
.text:00408628                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040862C                 call    sub_408640
.text:00408631                 add     esp, 4Ch
.text:00408634                 retn
.text:00408634 sub_4085A0      endp
.text:00408634
.text:00408634 ; ---------------------------------------------------------------------------
.text:00408635                 align 10h
.text:00408640
.text:00408640 ; =============== S U B R O U T I N E =======================================
.text:00408640
.text:00408640
.text:00408640 ; int __cdecl sub_408640(int, char *, int, int)
.text:00408640 sub_408640      proc near               ; CODE XREF: .text:004081F2↑p
.text:00408640                                         ; .text:00408222↑p ...
.text:00408640
.text:00408640 Block           = dword ptr -2Ch
.text:00408640 var_28          = dword ptr -28h
.text:00408640 Str             = dword ptr -24h
.text:00408640 var_20          = dword ptr -20h
.text:00408640 var_1C          = dword ptr -1Ch
.text:00408640 var_18          = dword ptr -18h
.text:00408640 var_14          = dword ptr -14h
.text:00408640 arg_0           = dword ptr  4
.text:00408640 arg_4           = dword ptr  8
.text:00408640 arg_8           = dword ptr  0Ch
.text:00408640 arg_C           = dword ptr  10h
.text:00408640
.text:00408640                 push    ebp
.text:00408641                 push    edi
.text:00408642                 push    esi
.text:00408643                 push    ebx
.text:00408644                 sub     esp, 1Ch
.text:00408647                 call    _errno
.text:0040864C                 mov     edx, [eax]
.text:0040864E                 mov     eax, [esp+2Ch+arg_0]
.text:00408652                 mov     [esp+2Ch+var_14], edx
.text:00408656                 test    eax, eax
.text:00408658                 js      loc_4087FA
.text:0040865E                 mov     eax, [esp+2Ch+arg_0]
.text:00408662                 cmp     dword_41A040, eax
.text:00408668                 ja      short loc_4086E0
.text:0040866A                 mov     esi, eax
.text:0040866C                 inc     esi
.text:0040866D                 cmp     esi, 1FFFFFFFh
.text:00408673                 ja      loc_4087FF
.text:00408679                 mov     ebx, off_41A04C
.text:0040867F                 cmp     ebx, offset dword_41A044
.text:00408685                 jz      loc_4087D1
.text:0040868B
.text:0040868B loc_40868B:                             ; CODE XREF: sub_408640+1B5↓j
.text:0040868B                 mov     [esp+2Ch+Block], ebx ; void *
.text:0040868E                 lea     ecx, ds:0[esi*8]
.text:00408695                 mov     ebp, esi
.text:00408697                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040869B                 call    sub_4071D0
.text:004086A0                 mov     off_41A04C, eax
.text:004086A5                 mov     ebx, dword_41A040
.text:004086AB                 sub     ebp, ebx
.text:004086AD                 lea     edi, [eax+ebx*8]
.text:004086B0                 lea     eax, ds:0[ebp*8]
.text:004086B7                 cmp     eax, 7
.text:004086BA                 jbe     short loc_4086D0
.text:004086BC                 test    edi, 4
.text:004086C2                 jz      short loc_4086D0
.text:004086C4                 mov     dword ptr [edi], 0
.text:004086CA                 sub     eax, 4
.text:004086CD                 add     edi, 4
.text:004086D0
.text:004086D0 loc_4086D0:                             ; CODE XREF: sub_408640+7A↑j
.text:004086D0                                         ; sub_408640+82↑j
.text:004086D0                 cld
.text:004086D1                 mov     ecx, eax
.text:004086D3                 shr     ecx, 2
.text:004086D6                 xor     eax, eax
.text:004086D8                 rep stosd
.text:004086DA                 mov     dword_41A040, esi
.text:004086E0
.text:004086E0 loc_4086E0:                             ; CODE XREF: sub_408640+28↑j
.text:004086E0                 mov     esi, off_41A04C
.text:004086E6                 mov     eax, [esp+2Ch+arg_0]
.text:004086EA                 mov     ebp, [esi+eax*8]
.text:004086ED                 mov     edi, [esi+eax*8+4]
.text:004086F1                 mov     esi, [esp+2Ch+arg_C]
.text:004086F5                 test    esi, esi
.text:004086F7                 jz      loc_4087C7
.text:004086FD
.text:004086FD loc_4086FD:                             ; CODE XREF: sub_408640+18C↓j
.text:004086FD                 call    _errno
.text:00408702                 mov     ebx, [eax]
.text:00408704                 mov     [esp+2Ch+var_18], esi ; int
.text:00408708                 mov     ecx, [esi]
.text:0040870A                 mov     [esp+2Ch+Block], edi ; int
.text:0040870D                 mov     edx, [esp+2Ch+arg_8]
.text:00408711                 mov     [esp+2Ch+var_28], ebp ; int
.text:00408715                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408719                 mov     ecx, [esp+2Ch+arg_4]
.text:0040871D                 mov     [esp+2Ch+var_20], edx ; int
.text:00408721                 mov     [esp+2Ch+Str], ecx ; Str
.text:00408725                 call    sub_407500
.text:0040872A                 mov     esi, eax
.text:0040872C                 call    _errno
.text:00408731                 mov     [eax], ebx
.text:00408733                 cmp     ebp, esi
.text:00408735                 ja      short loc_4087AB
.text:00408737                 lea     ebp, [esi+1]
.text:0040873A                 mov     ebx, off_41A04C
.text:00408740                 cmp     edi, offset unk_41B280
.text:00408746                 mov     esi, [esp+2Ch+arg_0]
.text:0040874A                 mov     [ebx+esi*8], ebp
.text:0040874D                 jz      short loc_40875D
.text:0040874F                 mov     [esp+2Ch+Block], edi ; Block
.text:00408752                 call    free
.text:00408757                 mov     ebx, off_41A04C
.text:0040875D
.text:0040875D loc_40875D:                             ; CODE XREF: sub_408640+10D↑j
.text:0040875D                 mov     [esp+2Ch+Block], ebp ; size_t
.text:00408760                 call    sub_407140
.text:00408765                 mov     esi, [esp+2Ch+arg_C]
.text:00408769                 mov     edi, eax
.text:0040876B                 mov     eax, [esp+2Ch+arg_0]
.text:0040876F                 test    esi, esi
.text:00408771                 mov     [ebx+eax*8+4], edi
.text:00408775                 jz      short loc_4087C0
.text:00408777
.text:00408777 loc_408777:                             ; CODE XREF: sub_408640+185↓j
.text:00408777                 call    _errno
.text:0040877C                 mov     ebx, [eax]
.text:0040877E                 mov     [esp+2Ch+var_18], esi ; int
.text:00408782                 mov     ecx, [esi]
.text:00408784                 mov     [esp+2Ch+Block], edi ; int
.text:00408787                 mov     edx, [esp+2Ch+arg_8]
.text:0040878B                 mov     [esp+2Ch+var_28], ebp ; int
.text:0040878F                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00408793                 mov     ecx, [esp+2Ch+arg_4]
.text:00408797                 mov     [esp+2Ch+var_20], edx ; int
.text:0040879B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040879F                 call    sub_407500
.text:004087A4                 call    _errno
.text:004087A9                 mov     [eax], ebx
.text:004087AB
.text:004087AB loc_4087AB:                             ; CODE XREF: sub_408640+F5↑j
.text:004087AB                 call    _errno
.text:004087B0                 mov     ebp, [esp+2Ch+var_14]
.text:004087B4                 mov     [eax], ebp
.text:004087B6                 add     esp, 1Ch
.text:004087B9                 mov     eax, edi
.text:004087BB                 pop     ebx
.text:004087BC                 pop     esi
.text:004087BD                 pop     edi
.text:004087BE                 pop     ebp
.text:004087BF                 retn
.text:004087C0 ; ---------------------------------------------------------------------------
.text:004087C0
.text:004087C0 loc_4087C0:                             ; CODE XREF: sub_408640+135↑j
.text:004087C0                 mov     esi, offset dword_41B380
.text:004087C5                 jmp     short loc_408777
.text:004087C7 ; ---------------------------------------------------------------------------
.text:004087C7
.text:004087C7 loc_4087C7:                             ; CODE XREF: sub_408640+B7↑j
.text:004087C7                 mov     esi, offset dword_41B380
.text:004087CC                 jmp     loc_4086FD
.text:004087D1 ; ---------------------------------------------------------------------------
.text:004087D1
.text:004087D1 loc_4087D1:                             ; CODE XREF: sub_408640+45↑j
.text:004087D1                 mov     [esp+2Ch+Block], 8 ; size_t
.text:004087D8                 call    sub_407140
.text:004087DD                 mov     off_41A04C, eax
.text:004087E2                 mov     edi, dword_41A044
.text:004087E8                 mov     ebx, eax
.text:004087EA                 mov     ecx, off_41A048
.text:004087F0                 mov     [eax], edi
.text:004087F2                 mov     [eax+4], ecx
.text:004087F5                 jmp     loc_40868B
.text:004087FA ; ---------------------------------------------------------------------------
.text:004087FA
.text:004087FA loc_4087FA:                             ; CODE XREF: sub_408640+18↑j
.text:004087FA                 call    abort
.text:004087FF ; ---------------------------------------------------------------------------
.text:004087FF
.text:004087FF loc_4087FF:                             ; CODE XREF: sub_408640+33↑j
.text:004087FF                 call    sub_4073F0
.text:004087FF sub_408640      endp
.text:004087FF
.text:004087FF ; ---------------------------------------------------------------------------
.text:00408804                 align 10h
.text:00408810
.text:00408810 loc_408810:                             ; DATA XREF: sub_4088A0:loc_408920↓o
.text:00408810                                         ; sub_4088A0:loc_40896B↓o ...
.text:00408810                 das
.text:00408811                 add     [eax-6F6F6F70h], dl
.text:00408817                 nop
.text:00408818                 nop
.text:00408819                 nop
.text:0040881A                 nop
.text:0040881B                 nop
.text:0040881C                 nop
.text:0040881D                 nop
.text:0040881E                 nop
.text:0040881F                 nop
.text:00408820                 nop
.text:00408821                 nop
.text:00408822                 nop
.text:00408823                 nop
.text:00408824                 nop
.text:00408825                 nop
.text:00408826                 nop
.text:00408827                 nop
.text:00408828                 nop
.text:00408829                 nop
.text:0040882A                 nop
.text:0040882B                 nop
.text:0040882C                 nop
.text:0040882D                 nop
.text:0040882E                 nop
.text:0040882F                 nop
.text:00408830
.text:00408830 loc_408830:                             ; DATA XREF: sub_4088A0+22E↓o
.text:00408830                                         ; sub_4088A0+5CB↓o ...
.text:00408830                 db      2Eh, 2Eh
.text:00408830                 das
.text:00408833                 db      2Eh, 2Eh
.text:00408833                 das
.text:00408836                 arpl    [edi+72h], bp
.text:00408839                 db      65h
.text:00408839                 jnz     short near ptr loc_4088AA+6
.text:0040883C                 imul    ebp, [ebx+esi*2+2Dh], 2E332E35h
.text:00408844                 xor     ds:2F637273h, ch
.text:0040884A                 insb
.text:0040884B                 imul    esp, [edx+2Fh], 69646863h
.text:00408852                 jb      short near ptr loc_408880+1
.text:00408854                 insb
.text:00408855                 outsd
.text:00408856                 outsb
.text:00408857                 arpl    cs:[bx+si], ax
.text:0040885B
.text:0040885B loc_40885B:                             ; DATA XREF: sub_4088A0+236↓o
.text:0040885B                 insb
.text:0040885C                 outs    dx, byte ptr gs:[esi]
.text:0040885E                 and     ds:7473203Dh, bh
.text:00408864                 jb      short loc_4088C9
.text:00408866                 jnb     short loc_4088D8
.text:00408868                 outsb
.text:00408869                 and     [eax], ch
.text:0040886B                 jnb     short near ptr loc_4088DD+4
.text:0040886D                 popa
.text:0040886E                 jb      short near ptr loc_4088E2+2
.text:00408870                 sub     al, 20h ; ' '
.text:00408872                 and     ch, [edi]
.text:00408874                 and     ch, [ecx]
.text:00408876                 add     [edx], ch
.text:00408878                 and     fs:2F27203Dh, bh
.text:0040887F                 daa
.text:00408880
.text:00408880 loc_408880:                             ; CODE XREF: .text:00408852↑j
.text:00408880                 and     [esp+edi*2+20h], bh
.text:00408884                 sub     ah, [eax+3Dh]
.text:00408888                 cmp     eax, 305C2720h
.text:0040888D                 daa
.text:0040888E                 add     [eax], dh
.text:00408890                 and     [eax], bh
.text:00408893                 insb
.text:00408894                 outs    dx, byte ptr gs:[esi]
.text:00408896                 add     [ecx+27BC8DF6h], cl
.text:00408896 ; ---------------------------------------------------------------------------
.text:0040889C                 dd 0
.text:004088A0
.text:004088A0 ; =============== S U B R O U T I N E =======================================
.text:004088A0
.text:004088A0
.text:004088A0 ; int __cdecl sub_4088A0(LPCSTR)
.text:004088A0 sub_4088A0      proc near               ; CODE XREF: sub_4060E0+17↑j
.text:004088A0
.text:004088A0 Str             = dword ptr -14Ch
.text:004088A0 Control         = dword ptr -148h
.text:004088A0 MaxCount        = dword ptr -144h
.text:004088A0 var_130         = dword ptr -130h
.text:004088A0 var_12C         = byte ptr -12Ch
.text:004088A0 var_29          = byte ptr -29h
.text:004088A0 var_28          = dword ptr -28h
.text:004088A0 FileHandle      = dword ptr -24h
.text:004088A0 arg_0           = dword ptr  4
.text:004088A0
.text:004088A0                 push    ebp
.text:004088A1                 push    edi
.text:004088A2                 push    esi
.text:004088A3                 push    ebx
.text:004088A4                 sub     esp, 13Ch
.text:004088AA
.text:004088AA loc_4088AA:                             ; CODE XREF: .text:00408839↑j
.text:004088AA                 mov     esi, [esp+14Ch+arg_0]
.text:004088B1                 mov     [esp+14Ch+Str], esi ; LPCSTR
.text:004088B4                 call    sub_4108E0
.text:004088B9                 test    eax, eax
.text:004088BB                 mov     ebx, eax
.text:004088BD                 jnz     short loc_4088D0
.text:004088BF
.text:004088BF loc_4088BF:                             ; CODE XREF: sub_4088A0:loc_4088D8↓j
.text:004088BF                 mov     eax, ebx
.text:004088C1
.text:004088C1 loc_4088C1:                             ; CODE XREF: sub_4088A0+214↓j
.text:004088C1                                         ; sub_4088A0+2C7↓j
.text:004088C1                 add     esp, 13Ch
.text:004088C7                 pop     ebx
.text:004088C8                 pop     esi
.text:004088C9
.text:004088C9 loc_4088C9:                             ; CODE XREF: .text:00408864↑j
.text:004088C9                 pop     edi
.text:004088CA                 pop     ebp
.text:004088CB                 retn
.text:004088CB ; ---------------------------------------------------------------------------
.text:004088CC                 align 10h
.text:004088D0
.text:004088D0 loc_4088D0:                             ; CODE XREF: sub_4088A0+1D↑j
.text:004088D0                 call    _errno
.text:004088D5                 cmp     dword ptr [eax], 26h ; '&'
.text:004088D8
.text:004088D8 loc_4088D8:                             ; CODE XREF: .text:00408866↑j
.text:004088D8                 jnz     short loc_4088BF
.text:004088DA                 mov     [esp+14Ch+Str], esi ; Str
.text:004088DD
.text:004088DD loc_4088DD:                             ; CODE XREF: .text:0040886B↑j
.text:004088DD                 call    strlen
.text:004088E2
.text:004088E2 loc_4088E2:                             ; CODE XREF: .text:0040886E↑j
.text:004088E2                 lea     ecx, [eax+esi]
.text:004088E5                 test    eax, eax
.text:004088E7                 lea     edx, [esp+14Ch+var_12C]
.text:004088EB                 mov     [esp+14Ch+var_130], ecx
.text:004088EF                 mov     ecx, 0FFD19553h
.text:004088F4                 mov     [esp+14Ch+var_28], edx
.text:004088FB                 mov     [esp+14Ch+FileHandle], ecx
.text:00408902                 jz      loc_408F00
.text:00408908                 cmp     byte ptr [esi], 2Fh ; '/'
.text:0040890B                 jz      loc_408CA0
.text:00408911                 mov     ebp, esi
.text:00408913                 lea     esi, [esi+0]
.text:00408919                 lea     edi, [edi+0]
.text:00408920
.text:00408920 loc_408920:                             ; CODE XREF: sub_4088A0+16B↓j
.text:00408920                                         ; sub_4088A0+5B5↓j ...
.text:00408920                 mov     [esp+14Ch+Control], offset loc_408810 ; Control
.text:00408928                 mov     [esp+14Ch+Str], ebp ; Str
.text:0040892B                 call    strspn
.text:00408930                 lea     esi, [eax+ebp]
.text:00408933                 cmp     byte ptr [esi], 0
.text:00408936                 jz      loc_408C10
.text:0040893C                 mov     eax, [esp+14Ch+var_130]
.text:00408940                 sub     eax, esi
.text:00408942                 cmp     eax, 103h
.text:00408947                 jle     loc_408AE2
.text:0040894D                 mov     [esp+14Ch+MaxCount], eax ; MaxCount
.text:00408951                 mov     ebx, eax
.text:00408953                 mov     [esp+14Ch+Control], 2Fh ; '/' ; Val
.text:0040895B                 mov     [esp+14Ch+Str], esi ; Buf
.text:0040895E                 call    memchr
.text:00408963                 test    eax, eax
.text:00408965                 jz      short loc_40896B
.text:00408967                 mov     ebx, eax
.text:00408969                 sub     ebx, esi
.text:0040896B
.text:0040896B loc_40896B:                             ; CODE XREF: sub_4088A0+C5↑j
.text:0040896B                 mov     [esp+14Ch+Control], offset loc_408810 ; Control
.text:00408973                 mov     [esp+14Ch+Str], esi ; Str
.text:00408976                 call    strcspn
.text:0040897B                 cmp     ebx, eax
.text:0040897D                 jnz     loc_408AC6
.text:00408983                 mov     edx, [esp+14Ch+var_28]
.text:0040898A                 lea     ecx, [esp+14Ch+var_12C]
.text:0040898E                 xor     eax, eax
.text:00408990                 lea     ebp, [ebx+esi]
.text:00408993                 lea     edi, [esp+14Ch+var_29]
.text:0040899A                 cmp     ecx, edx
.text:0040899C                 jnb     short loc_4089A6
.text:0040899E                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:004089A2                 jz      short loc_4089A6
.text:004089A4                 mov     al, 1
.text:004089A6
.text:004089A6 loc_4089A6:                             ; CODE XREF: sub_4088A0+FC↑j
.text:004089A6                                         ; sub_4088A0+102↑j
.text:004089A6                 lea     edx, [ebx+1]
.text:004089A9                 mov     cl, al
.text:004089AB                 cmp     edx, 103h
.text:004089B1                 ja      loc_408AB9
.text:004089B7                 mov     edx, [esp+14Ch+var_28]
.text:004089BE                 movzx   eax, al
.text:004089C1                 lea     eax, [ebx+eax+1]
.text:004089C5                 sub     edi, edx
.text:004089C7                 cmp     edi, eax
.text:004089C9                 jnb     short loc_4089DC
.text:004089CB                 lea     eax, [esp+14Ch+var_12C]
.text:004089CF                 cmp     edx, eax
.text:004089D1                 jnz     short loc_408A10
.text:004089D3
.text:004089D3 loc_4089D3:                             ; CODE XREF: sub_4088A0+1BC↓j
.text:004089D3                 mov     edx, [esp+14Ch+var_28]
.text:004089DA                 xor     ecx, ecx
.text:004089DC
.text:004089DC loc_4089DC:                             ; CODE XREF: sub_4088A0+129↑j
.text:004089DC                 test    cl, cl
.text:004089DE                 jz      short loc_4089F4
.text:004089E0                 mov     byte ptr [edx], 2Fh ; '/'
.text:004089E3                 mov     ecx, [esp+14Ch+var_28]
.text:004089EA                 inc     ecx
.text:004089EB                 mov     [esp+14Ch+var_28], ecx
.text:004089F2                 mov     edx, ecx
.text:004089F4
.text:004089F4 loc_4089F4:                             ; CODE XREF: sub_4088A0+13E↑j
.text:004089F4                 mov     [esp+14Ch+MaxCount], ebx
.text:004089F8                 mov     [esp+14Ch+Control], esi
.text:004089FC
.text:004089FC loc_4089FC:                             ; CODE XREF: sub_4088A0+480↓j
.text:004089FC                 mov     [esp+14Ch+Str], edx
.text:004089FF                 call    sub_410930
.text:00408A04                 mov     [esp+14Ch+var_28], eax
.text:00408A0B                 jmp     loc_408920
.text:00408A10 ; ---------------------------------------------------------------------------
.text:00408A10
.text:00408A10 loc_408A10:                             ; CODE XREF: sub_4088A0+131↑j
.text:00408A10                 mov     byte ptr [edx], 0
.text:00408A13                 mov     ecx, [esp+14Ch+FileHandle]
.text:00408A1A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408A22                 mov     [esp+14Ch+Control], eax ; char *
.text:00408A26                 mov     [esp+14Ch+Str], ecx ; int
.text:00408A29                 call    sub_409140
.text:00408A2E                 test    eax, eax
.text:00408A30                 mov     edi, eax
.text:00408A32                 js      short loc_408A61
.text:00408A34
.text:00408A34 loc_408A34:                             ; CODE XREF: sub_4088A0+1E4↓j
.text:00408A34                 mov     eax, [esp+14Ch+FileHandle]
.text:00408A3B                 cmp     eax, 0FFD19553h
.text:00408A40                 jz      short loc_408A4A
.text:00408A42                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408A45                 call    _close
.text:00408A4A
.text:00408A4A loc_408A4A:                             ; CODE XREF: sub_4088A0+1A0↑j
.text:00408A4A                 mov     [esp+14Ch+FileHandle], edi
.text:00408A51                 lea     edx, [esp+14Ch+var_12C]
.text:00408A55                 mov     [esp+14Ch+var_28], edx
.text:00408A5C                 jmp     loc_4089D3
.text:00408A61 ; ---------------------------------------------------------------------------
.text:00408A61
.text:00408A61 loc_408A61:                             ; CODE XREF: sub_4088A0+192↑j
.text:00408A61                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408A69                 mov     edi, [esp+14Ch+FileHandle]
.text:00408A70                 lea     eax, [esp+14Ch+var_12C]
.text:00408A74                 mov     [esp+14Ch+Control], eax ; char *
.text:00408A78                 mov     [esp+14Ch+Str], edi ; int
.text:00408A7B                 call    sub_409140
.text:00408A80                 test    eax, eax
.text:00408A82                 mov     edi, eax
.text:00408A84                 jns     short loc_408A34
.text:00408A86
.text:00408A86 loc_408A86:                             ; CODE XREF: sub_4088A0+224↓j
.text:00408A86                                         ; sub_4088A0+2A4↓j ...
.text:00408A86                 call    _errno
.text:00408A8B                 mov     ebx, [eax]
.text:00408A8D                 mov     eax, [esp+14Ch+FileHandle]
.text:00408A94                 test    eax, eax
.text:00408A96                 js      short loc_408AA8
.text:00408A98                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408A9B                 call    _close
.text:00408AA0                 test    eax, eax
.text:00408AA2                 jnz     loc_408F1C
.text:00408AA8
.text:00408AA8 loc_408AA8:                             ; CODE XREF: sub_4088A0+1F6↑j
.text:00408AA8                 call    _errno
.text:00408AAD                 mov     [eax], ebx
.text:00408AAF                 mov     eax, 0FFFFFFFFh
.text:00408AB4                 jmp     loc_4088C1
.text:00408AB9 ; ---------------------------------------------------------------------------
.text:00408AB9
.text:00408AB9 loc_408AB9:                             ; CODE XREF: sub_4088A0+111↑j
.text:00408AB9                                         ; sub_4088A0+54E↓j
.text:00408AB9                 call    _errno
.text:00408ABE                 mov     dword ptr [eax], 26h ; '&'
.text:00408AC4                 jmp     short loc_408A86
.text:00408AC6 ; ---------------------------------------------------------------------------
.text:00408AC6
.text:00408AC6 loc_408AC6:                             ; CODE XREF: sub_4088A0+DD↑j
.text:00408AC6                 mov     [esp+14Ch+MaxCount], 105h
.text:00408ACE                 mov     [esp+14Ch+Control], offset loc_408830
.text:00408AD6                 mov     [esp+14Ch+Str], offset loc_40885B
.text:00408ADD
.text:00408ADD loc_408ADD:                             ; CODE XREF: sub_4088A0+5DA↓j
.text:00408ADD                                         ; sub_4088A0+677↓j
.text:00408ADD                 call    _assert
.text:00408AE2 ; ---------------------------------------------------------------------------
.text:00408AE2
.text:00408AE2 loc_408AE2:                             ; CODE XREF: sub_4088A0+A7↑j
.text:00408AE2                 mov     eax, [esp+14Ch+var_28]
.text:00408AE9                 lea     edx, [esp+14Ch+var_12C]
.text:00408AED                 cmp     eax, edx
.text:00408AEF                 jnz     loc_408B92
.text:00408AF5
.text:00408AF5 loc_408AF5:                             ; CODE XREF: sub_4088A0+33E↓j
.text:00408AF5                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408AFD                 mov     ebx, [esp+14Ch+FileHandle]
.text:00408B04                 mov     [esp+14Ch+Control], esi ; char *
.text:00408B08                 mov     [esp+14Ch+Str], ebx ; int
.text:00408B0B                 call    sub_409140
.text:00408B10                 test    eax, eax
.text:00408B12                 mov     ebx, eax
.text:00408B14                 js      short loc_408B6C
.text:00408B16
.text:00408B16 loc_408B16:                             ; CODE XREF: sub_4088A0+2EB↓j
.text:00408B16                 mov     eax, [esp+14Ch+FileHandle]
.text:00408B1D                 cmp     eax, 0FFD19553h
.text:00408B22                 jz      short loc_408B2C
.text:00408B24                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408B27                 call    _close
.text:00408B2C
.text:00408B2C loc_408B2C:                             ; CODE XREF: sub_4088A0+282↑j
.text:00408B2C                 mov     [esp+14Ch+FileHandle], ebx
.text:00408B33
.text:00408B33 loc_408B33:                             ; CODE XREF: sub_4088A0+37D↓j
.text:00408B33                                         ; sub_4088A0+3CF↓j
.text:00408B33                 mov     ebp, [esp+14Ch+FileHandle]
.text:00408B3A                 mov     [esp+14Ch+Str], ebp
.text:00408B3D                 call    sub_4092A0
.text:00408B42                 test    eax, eax
.text:00408B44                 jnz     loc_408A86
.text:00408B4A                 mov     eax, [esp+14Ch+FileHandle]
.text:00408B51                 test    eax, eax
.text:00408B53                 js      short loc_408B65
.text:00408B55                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408B58                 call    _close
.text:00408B5D                 test    eax, eax
.text:00408B5F                 jnz     loc_408F1C
.text:00408B65
.text:00408B65 loc_408B65:                             ; CODE XREF: sub_4088A0+2B3↑j
.text:00408B65                 xor     eax, eax
.text:00408B67                 jmp     loc_4088C1
.text:00408B6C ; ---------------------------------------------------------------------------
.text:00408B6C
.text:00408B6C loc_408B6C:                             ; CODE XREF: sub_4088A0+274↑j
.text:00408B6C                 mov     [esp+14Ch+Control], esi ; char *
.text:00408B70                 mov     esi, [esp+14Ch+FileHandle]
.text:00408B77                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408B7F                 mov     [esp+14Ch+Str], esi ; int
.text:00408B82                 call    sub_409140
.text:00408B87                 test    eax, eax
.text:00408B89                 mov     ebx, eax
.text:00408B8B                 jns     short loc_408B16
.text:00408B8D                 jmp     loc_408A86
.text:00408B92 ; ---------------------------------------------------------------------------
.text:00408B92
.text:00408B92 loc_408B92:                             ; CODE XREF: sub_4088A0+24F↑j
.text:00408B92                 mov     byte ptr [eax], 0
.text:00408B95                 mov     ebp, [esp+14Ch+FileHandle]
.text:00408B9C                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408BA4                 mov     [esp+14Ch+Control], edx ; char *
.text:00408BA8                 mov     [esp+14Ch+Str], ebp ; int
.text:00408BAB                 call    sub_409140
.text:00408BB0                 test    eax, eax
.text:00408BB2                 mov     ebx, eax
.text:00408BB4                 js      short loc_408BE3
.text:00408BB6
.text:00408BB6 loc_408BB6:                             ; CODE XREF: sub_4088A0+366↓j
.text:00408BB6                 mov     eax, [esp+14Ch+FileHandle]
.text:00408BBD                 cmp     eax, 0FFD19553h
.text:00408BC2                 jz      short loc_408BCC
.text:00408BC4                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408BC7                 call    _close
.text:00408BCC
.text:00408BCC loc_408BCC:                             ; CODE XREF: sub_4088A0+322↑j
.text:00408BCC                 mov     [esp+14Ch+FileHandle], ebx
.text:00408BD3                 lea     edi, [esp+14Ch+var_12C]
.text:00408BD7                 mov     [esp+14Ch+var_28], edi
.text:00408BDE                 jmp     loc_408AF5
.text:00408BE3 ; ---------------------------------------------------------------------------
.text:00408BE3
.text:00408BE3 loc_408BE3:                             ; CODE XREF: sub_4088A0+314↑j
.text:00408BE3                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408BEB                 mov     ecx, [esp+14Ch+FileHandle]
.text:00408BF2                 lea     eax, [esp+14Ch+var_12C]
.text:00408BF6                 mov     [esp+14Ch+Control], eax ; char *
.text:00408BFA                 mov     [esp+14Ch+Str], ecx ; int
.text:00408BFD                 call    sub_409140
.text:00408C02                 test    eax, eax
.text:00408C04                 mov     ebx, eax
.text:00408C06                 jns     short loc_408BB6
.text:00408C08                 jmp     loc_408A86
.text:00408C08 ; ---------------------------------------------------------------------------
.text:00408C0D                 align 10h
.text:00408C10
.text:00408C10 loc_408C10:                             ; CODE XREF: sub_4088A0+96↑j
.text:00408C10                 mov     eax, [esp+14Ch+var_28]
.text:00408C17                 lea     edx, [esp+14Ch+var_12C]
.text:00408C1B                 cmp     eax, edx
.text:00408C1D                 jz      loc_408B33
.text:00408C23                 mov     byte ptr [eax], 0
.text:00408C26                 mov     esi, [esp+14Ch+FileHandle]
.text:00408C2D                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408C35                 mov     [esp+14Ch+Control], edx ; char *
.text:00408C39                 mov     [esp+14Ch+Str], esi ; int
.text:00408C3C                 call    sub_409140
.text:00408C41                 test    eax, eax
.text:00408C43                 mov     ebx, eax
.text:00408C45                 js      short loc_408C74
.text:00408C47
.text:00408C47 loc_408C47:                             ; CODE XREF: sub_4088A0+3F7↓j
.text:00408C47                 mov     eax, [esp+14Ch+FileHandle]
.text:00408C4E                 cmp     eax, 0FFD19553h
.text:00408C53                 jz      short loc_408C5D
.text:00408C55                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408C58                 call    _close
.text:00408C5D
.text:00408C5D loc_408C5D:                             ; CODE XREF: sub_4088A0+3B3↑j
.text:00408C5D                 mov     [esp+14Ch+FileHandle], ebx
.text:00408C64                 lea     edx, [esp+14Ch+var_12C]
.text:00408C68                 mov     [esp+14Ch+var_28], edx
.text:00408C6F                 jmp     loc_408B33
.text:00408C74 ; ---------------------------------------------------------------------------
.text:00408C74
.text:00408C74 loc_408C74:                             ; CODE XREF: sub_4088A0+3A5↑j
.text:00408C74                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408C7C                 mov     edi, [esp+14Ch+FileHandle]
.text:00408C83                 lea     ebx, [esp+14Ch+var_12C]
.text:00408C87                 mov     [esp+14Ch+Control], ebx ; char *
.text:00408C8B                 mov     [esp+14Ch+Str], edi ; int
.text:00408C8E                 call    sub_409140
.text:00408C93                 test    eax, eax
.text:00408C95                 mov     ebx, eax
.text:00408C97                 jns     short loc_408C47
.text:00408C99                 jmp     loc_408A86
.text:00408C99 ; ---------------------------------------------------------------------------
.text:00408C9E                 align 10h
.text:00408CA0
.text:00408CA0 loc_408CA0:                             ; CODE XREF: sub_4088A0+6B↑j
.text:00408CA0                 cmp     eax, 2
.text:00408CA3                 jbe     short loc_408CAF
.text:00408CA5                 cmp     byte ptr [esi+1], 2Fh ; '/'
.text:00408CA9                 jz      loc_408DA0
.text:00408CAF
.text:00408CAF loc_408CAF:                             ; CODE XREF: sub_4088A0+403↑j
.text:00408CAF                                         ; sub_4088A0+504↓j
.text:00408CAF                 mov     edx, [esp+14Ch+var_28]
.text:00408CB6                 lea     ebp, [esp+14Ch+var_12C]
.text:00408CBA                 xor     eax, eax
.text:00408CBC                 lea     ebx, [esp+14Ch+var_29]
.text:00408CC3                 cmp     ebp, edx
.text:00408CC5                 jnb     short loc_408CCF
.text:00408CC7                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:00408CCB                 jz      short loc_408CCF
.text:00408CCD                 mov     al, 1
.text:00408CCF
.text:00408CCF loc_408CCF:                             ; CODE XREF: sub_4088A0+425↑j
.text:00408CCF                                         ; sub_4088A0+42B↑j
.text:00408CCF                 mov     edx, [esp+14Ch+var_28]
.text:00408CD6                 movzx   edi, al
.text:00408CD9                 mov     cl, al
.text:00408CDB                 add     edi, 2
.text:00408CDE                 sub     ebx, edx
.text:00408CE0                 cmp     ebx, edi
.text:00408CE2                 jnb     short loc_408CF5
.text:00408CE4                 lea     eax, [esp+14Ch+var_12C]
.text:00408CE8                 cmp     edx, eax
.text:00408CEA                 jnz     short loc_408D25
.text:00408CEC
.text:00408CEC loc_408CEC:                             ; CODE XREF: sub_4088A0+4D1↓j
.text:00408CEC                 mov     edx, [esp+14Ch+var_28]
.text:00408CF3                 xor     ecx, ecx
.text:00408CF5
.text:00408CF5 loc_408CF5:                             ; CODE XREF: sub_4088A0+442↑j
.text:00408CF5                 test    cl, cl
.text:00408CF7                 jz      short loc_408D0D
.text:00408CF9                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408CFC                 mov     ecx, [esp+14Ch+var_28]
.text:00408D03                 inc     ecx
.text:00408D04                 mov     [esp+14Ch+var_28], ecx
.text:00408D0B                 mov     edx, ecx
.text:00408D0D
.text:00408D0D loc_408D0D:                             ; CODE XREF: sub_4088A0+457↑j
.text:00408D0D                 mov     [esp+14Ch+MaxCount], 1
.text:00408D15                 lea     ebp, [esi+1]
.text:00408D18                 mov     [esp+14Ch+Control], offset loc_408810
.text:00408D20                 jmp     loc_4089FC
.text:00408D25 ; ---------------------------------------------------------------------------
.text:00408D25
.text:00408D25 loc_408D25:                             ; CODE XREF: sub_4088A0+44A↑j
.text:00408D25                 mov     byte ptr [edx], 0
.text:00408D28                 mov     ebx, [esp+14Ch+FileHandle]
.text:00408D2F                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408D37                 mov     [esp+14Ch+Control], eax ; char *
.text:00408D3B                 mov     [esp+14Ch+Str], ebx ; int
.text:00408D3E                 call    sub_409140
.text:00408D43                 test    eax, eax
.text:00408D45                 mov     ebx, eax
.text:00408D47                 js      short loc_408D76
.text:00408D49
.text:00408D49 loc_408D49:                             ; CODE XREF: sub_4088A0+4F9↓j
.text:00408D49                 mov     eax, [esp+14Ch+FileHandle]
.text:00408D50                 cmp     eax, 0FFD19553h
.text:00408D55                 jz      short loc_408D5F
.text:00408D57                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408D5A                 call    _close
.text:00408D5F
.text:00408D5F loc_408D5F:                             ; CODE XREF: sub_4088A0+4B5↑j
.text:00408D5F                 mov     [esp+14Ch+FileHandle], ebx
.text:00408D66                 lea     ebp, [esp+14Ch+var_12C]
.text:00408D6A                 mov     [esp+14Ch+var_28], ebp
.text:00408D71                 jmp     loc_408CEC
.text:00408D76 ; ---------------------------------------------------------------------------
.text:00408D76
.text:00408D76 loc_408D76:                             ; CODE XREF: sub_4088A0+4A7↑j
.text:00408D76                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408D7E                 mov     edx, [esp+14Ch+FileHandle]
.text:00408D85                 lea     eax, [esp+14Ch+var_12C]
.text:00408D89                 mov     [esp+14Ch+Control], eax ; char *
.text:00408D8D                 mov     [esp+14Ch+Str], edx ; int
.text:00408D90                 call    sub_409140
.text:00408D95                 test    eax, eax
.text:00408D97                 mov     ebx, eax
.text:00408D99                 jns     short loc_408D49
.text:00408D9B                 jmp     loc_408A86
.text:00408DA0 ; ---------------------------------------------------------------------------
.text:00408DA0
.text:00408DA0 loc_408DA0:                             ; CODE XREF: sub_4088A0+409↑j
.text:00408DA0                 cmp     byte ptr [esi+2], 2Fh ; '/'
.text:00408DA4                 jz      loc_408CAF
.text:00408DAA                 mov     [esp+14Ch+Control], offset loc_408810 ; Control
.text:00408DB2                 lea     ebx, [esi+3]
.text:00408DB5                 mov     [esp+14Ch+Str], ebx ; Str
.text:00408DB8                 lea     ebx, [esp+14Ch+var_29]
.text:00408DBF                 call    strcspn
.text:00408DC4                 mov     edx, [esp+14Ch+var_28]
.text:00408DCB                 lea     ecx, [esp+14Ch+var_12C]
.text:00408DCF                 lea     ebp, [eax+1]
.text:00408DD2                 lea     edi, [eax+3]
.text:00408DD5                 xor     eax, eax
.text:00408DD7                 cmp     ecx, edx
.text:00408DD9                 jnb     short loc_408DE3
.text:00408DDB                 cmp     byte ptr [edx-1], 2Fh ; '/'
.text:00408DDF                 jz      short loc_408DE3
.text:00408DE1                 mov     al, 1
.text:00408DE3
.text:00408DE3 loc_408DE3:                             ; CODE XREF: sub_4088A0+539↑j
.text:00408DE3                                         ; sub_4088A0+53F↑j
.text:00408DE3                 lea     edx, [edi+1]
.text:00408DE6                 mov     cl, al
.text:00408DE8                 cmp     edx, 103h
.text:00408DEE                 ja      loc_408AB9
.text:00408DF4                 mov     edx, [esp+14Ch+var_28]
.text:00408DFB                 movzx   eax, al
.text:00408DFE                 lea     eax, [edi+eax+1]
.text:00408E02                 sub     ebx, edx
.text:00408E04                 cmp     ebx, eax
.text:00408E06                 jnb     short loc_408E19
.text:00408E08                 lea     eax, [esp+14Ch+var_12C]
.text:00408E0C                 cmp     edx, eax
.text:00408E0E                 jnz     short loc_408E80
.text:00408E10
.text:00408E10 loc_408E10:                             ; CODE XREF: sub_4088A0+62C↓j
.text:00408E10                 mov     edx, [esp+14Ch+var_28]
.text:00408E17                 xor     ecx, ecx
.text:00408E19
.text:00408E19 loc_408E19:                             ; CODE XREF: sub_4088A0+566↑j
.text:00408E19                 test    cl, cl
.text:00408E1B                 jz      short loc_408E31
.text:00408E1D                 mov     byte ptr [edx], 2Fh ; '/'
.text:00408E20                 mov     ecx, [esp+14Ch+var_28]
.text:00408E27                 inc     ecx
.text:00408E28                 mov     [esp+14Ch+var_28], ecx
.text:00408E2F                 mov     edx, ecx
.text:00408E31
.text:00408E31 loc_408E31:                             ; CODE XREF: sub_4088A0+57B↑j
.text:00408E31                 mov     [esp+14Ch+MaxCount], edi
.text:00408E35                 lea     edi, [ebp+esi+0]
.text:00408E39                 lea     ebp, [edi+2]
.text:00408E3C                 mov     [esp+14Ch+Control], esi
.text:00408E40                 mov     [esp+14Ch+Str], edx
.text:00408E43                 call    sub_410930
.text:00408E48                 mov     [esp+14Ch+var_28], eax
.text:00408E4F                 movzx   eax, byte ptr [edi+2]
.text:00408E53                 cmp     al, 2Fh ; '/'
.text:00408E55                 jz      loc_408920
.text:00408E5B                 test    al, al
.text:00408E5D                 jz      loc_408920
.text:00408E63                 mov     [esp+14Ch+MaxCount], 0E1h ; 'á'
.text:00408E6B                 mov     [esp+14Ch+Control], offset loc_408830
.text:00408E73                 mov     [esp+14Ch+Str], 408877h
.text:00408E7A                 jmp     loc_408ADD
.text:00408E7A ; ---------------------------------------------------------------------------
.text:00408E7F                 align 10h
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: sub_4088A0+56E↑j
.text:00408E80                 mov     byte ptr [edx], 0
.text:00408E83                 mov     ecx, [esp+14Ch+FileHandle]
.text:00408E8A                 mov     [esp+14Ch+MaxCount], 0 ; int
.text:00408E92                 mov     [esp+14Ch+Control], eax ; char *
.text:00408E96                 mov     [esp+14Ch+Str], ecx ; int
.text:00408E99                 call    sub_409140
.text:00408E9E                 test    eax, eax
.text:00408EA0                 mov     ebx, eax
.text:00408EA2                 js      short loc_408ED1
.text:00408EA4
.text:00408EA4 loc_408EA4:                             ; CODE XREF: sub_4088A0+654↓j
.text:00408EA4                 mov     eax, [esp+14Ch+FileHandle]
.text:00408EAB                 cmp     eax, 0FFD19553h
.text:00408EB0                 jz      short loc_408EBA
.text:00408EB2                 mov     [esp+14Ch+Str], eax ; FileHandle
.text:00408EB5                 call    _close
.text:00408EBA
.text:00408EBA loc_408EBA:                             ; CODE XREF: sub_4088A0+610↑j
.text:00408EBA                 mov     [esp+14Ch+FileHandle], ebx
.text:00408EC1                 lea     edx, [esp+14Ch+var_12C]
.text:00408EC5                 mov     [esp+14Ch+var_28], edx
.text:00408ECC                 jmp     loc_408E10
.text:00408ED1 ; ---------------------------------------------------------------------------
.text:00408ED1
.text:00408ED1 loc_408ED1:                             ; CODE XREF: sub_4088A0+602↑j
.text:00408ED1                 mov     [esp+14Ch+MaxCount], 1 ; int
.text:00408ED9                 mov     ebx, [esp+14Ch+FileHandle]
.text:00408EE0                 lea     eax, [esp+14Ch+var_12C]
.text:00408EE4                 mov     [esp+14Ch+Control], eax ; char *
.text:00408EE8                 mov     [esp+14Ch+Str], ebx ; int
.text:00408EEB                 call    sub_409140
.text:00408EF0                 test    eax, eax
.text:00408EF2                 mov     ebx, eax
.text:00408EF4                 jns     short loc_408EA4
.text:00408EF6                 jmp     loc_408A86
.text:00408EF6 ; ---------------------------------------------------------------------------
.text:00408EFB                 align 10h
.text:00408F00
.text:00408F00 loc_408F00:                             ; CODE XREF: sub_4088A0+62↑j
.text:00408F00                 mov     [esp+14Ch+MaxCount], 0D0h ; 'Ð'
.text:00408F08                 mov     [esp+14Ch+Control], offset loc_408830
.text:00408F10                 mov     [esp+14Ch+Str], 40888Fh
.text:00408F17                 jmp     loc_408ADD
.text:00408F1C ; ---------------------------------------------------------------------------
.text:00408F1C
.text:00408F1C loc_408F1C:                             ; CODE XREF: sub_4088A0+202↑j
.text:00408F1C                                         ; sub_4088A0+2BF↑j
.text:00408F1C                 call    abort
.text:00408F1C sub_4088A0      endp
.text:00408F1C
.text:00408F1C ; ---------------------------------------------------------------------------
.text:00408F21                 align 10h
.text:00408F30
.text:00408F30 ; =============== S U B R O U T I N E =======================================
.text:00408F30
.text:00408F30
.text:00408F30 sub_408F30      proc near               ; CODE XREF: sub_4060A0+18↑p
.text:00408F30
.text:00408F30 DstBuf          = dword ptr -0Ch
.text:00408F30 SizeInBytes     = dword ptr -8
.text:00408F30 var_4           = dword ptr -4
.text:00408F30
.text:00408F30                 sub     esp, 0Ch
.text:00408F33                 mov     [esp+0Ch+var_4], ebx
.text:00408F37                 mov     [esp+0Ch+SizeInBytes], 0 ; SizeInBytes
.text:00408F3F                 mov     [esp+0Ch+DstBuf], 0 ; DstBuf
.text:00408F46                 call    j__getcwd
.text:00408F4B                 test    eax, eax
.text:00408F4D                 mov     ebx, eax
.text:00408F4F                 jz      short loc_408F5B
.text:00408F51
.text:00408F51 loc_408F51:                             ; CODE XREF: sub_408F30+33↓j
.text:00408F51                 mov     eax, ebx
.text:00408F53                 mov     ebx, [esp+0Ch+var_4]
.text:00408F57                 add     esp, 0Ch
.text:00408F5A                 retn
.text:00408F5B ; ---------------------------------------------------------------------------
.text:00408F5B
.text:00408F5B loc_408F5B:                             ; CODE XREF: sub_408F30+1F↑j
.text:00408F5B                 call    _errno
.text:00408F60                 cmp     dword ptr [eax], 0Ch
.text:00408F63                 jnz     short loc_408F51
.text:00408F65                 call    sub_4073F0
.text:00408F65 sub_408F30      endp
.text:00408F65
.text:00408F65 ; ---------------------------------------------------------------------------
.text:00408F6A                 align 10h
.text:00408F70
.text:00408F70 ; =============== S U B R O U T I N E =======================================
.text:00408F70
.text:00408F70
.text:00408F70 sub_408F70      proc near               ; DATA XREF: .text:00408F89↓o
.text:00408F70                 pop     esi
.text:00408F71                 pop     ebx
.text:00408F72                 jns     short near ptr loc_408FCA+3
.text:00408F74                 pop     ebp
.text:00408F75                 add     [esi+5Bh], bl
.text:00408F78                 outsb
.text:00408F79                 dec     esi
.text:00408F7A                 pop     ebp
.text:00408F7B
.text:00408F7B loc_408F7B:                             ; CODE XREF: sub_406150+94↑p
.text:00408F7B                 add     [ebp+56002674h], cl
.text:00408F7B sub_408F70      endp ; sp-analysis failed
.text:00408F7B
.text:00408F81                 push    ebx
.text:00408F82                 sub     esp, 14h
.text:00408F85                 mov     esi, [esp+20h]
.text:00408F89                 mov     dword ptr [esp], offset sub_408F70
.text:00408F90                 call    ds:libintl_gettext
.text:00408F96                 mov     ebx, eax
.text:00408F98                 mov     eax, ds:dword_41B3B0
.text:00408F9D                 cmp     ebx, eax
.text:00408F9F                 jz      short loc_408FD0
.text:00408FA1                 test    eax, eax
.text:00408FA3                 jnz     loc_4090A0
.text:00408FA9
.text:00408FA9 loc_408FA9:                             ; CODE XREF: .text:004090B3↓j
.text:00408FA9                 mov     dword ptr [esp+8], 1
.text:00408FB1                 mov     [esp+4], ebx
.text:00408FB5                 mov     dword ptr [esp], offset unk_41B3D0
.text:00408FBC                 call    sub_40BF20
.text:00408FC1                 test    eax, eax
.text:00408FC3                 mov     edx, 0FFFFFFFFh
.text:00408FC8                 jnz     short loc_408FFF
.text:00408FCA
.text:00408FCA loc_408FCA:                             ; CODE XREF: sub_408F70+2↑j
.text:00408FCA                 mov     ds:dword_41B3B0, ebx
.text:00408FD0
.text:00408FD0 loc_408FD0:                             ; CODE XREF: .text:00408F9F↑j
.text:00408FD0                 mov     dword ptr [esp+10h], 0
.text:00408FD8                 mov     dword ptr [esp+0Ch], 0
.text:00408FE0                 mov     dword ptr [esp+8], 0
.text:00408FE8                 mov     [esp+4], esi
.text:00408FEC                 mov     dword ptr [esp], offset unk_41B3D0
.text:00408FF3                 call    sub_40C0A0
.text:00408FF8                 xor     edx, edx
.text:00408FFA                 test    eax, eax
.text:00408FFC                 setz    dl
.text:00408FFF
.text:00408FFF loc_408FFF:                             ; CODE XREF: .text:00408FC8↑j
.text:00408FFF                 test    edx, edx
.text:00409001                 mov     eax, edx
.text:00409003                 jz      short loc_409010
.text:00409005
.text:00409005 loc_409005:                             ; CODE XREF: .text:00409085↓j
.text:00409005                 add     esp, 14h
.text:00409008                 pop     ebx
.text:00409009                 pop     esi
.text:0040900A                 retn
.text:0040900A ; ---------------------------------------------------------------------------
.text:0040900B                 align 10h
.text:00409010
.text:00409010 loc_409010:                             ; CODE XREF: .text:00409003↑j
.text:00409010                 mov     dword ptr [esp], 408F76h
.text:00409017                 call    ds:libintl_gettext
.text:0040901D                 mov     ebx, eax
.text:0040901F                 mov     eax, ds:dword_41B3C0
.text:00409024                 cmp     ebx, eax
.text:00409026                 jz      short loc_409053
.text:00409028                 test    eax, eax
.text:0040902A                 jnz     short loc_40908A
.text:0040902C
.text:0040902C loc_40902C:                             ; CODE XREF: .text:0040909E↓j
.text:0040902C                 mov     dword ptr [esp+8], 1
.text:00409034                 mov     [esp+4], ebx
.text:00409038                 mov     dword ptr [esp], offset unk_41B3F0
.text:0040903F                 call    sub_40BF20
.text:00409044                 test    eax, eax
.text:00409046                 mov     edx, 0FFFFFFFFh
.text:0040904B                 jnz     short loc_409083
.text:0040904D                 mov     ds:dword_41B3C0, ebx
.text:00409053
.text:00409053 loc_409053:                             ; CODE XREF: .text:00409026↑j
.text:00409053                 mov     dword ptr [esp+10h], 0
.text:0040905B                 mov     dword ptr [esp+0Ch], 0
.text:00409063                 mov     dword ptr [esp+8], 0
.text:0040906B                 mov     [esp+4], esi
.text:0040906F                 mov     dword ptr [esp], offset unk_41B3F0
.text:00409076                 call    sub_40C0A0
.text:0040907B                 xor     edx, edx
.text:0040907D                 test    eax, eax
.text:0040907F                 setz    dl
.text:00409082                 dec     edx
.text:00409083
.text:00409083 loc_409083:                             ; CODE XREF: .text:0040904B↑j
.text:00409083                 mov     eax, edx
.text:00409085                 jmp     loc_409005
.text:0040908A ; ---------------------------------------------------------------------------
.text:0040908A
.text:0040908A loc_40908A:                             ; CODE XREF: .text:0040902A↑j
.text:0040908A                 mov     dword ptr [esp], offset unk_41B3F0
.text:00409091                 call    sub_40C460
.text:00409096                 xor     edx, edx
.text:00409098                 mov     ds:dword_41B3C0, edx
.text:0040909E                 jmp     short loc_40902C
.text:004090A0 ; ---------------------------------------------------------------------------
.text:004090A0
.text:004090A0 loc_4090A0:                             ; CODE XREF: .text:00408FA3↑j
.text:004090A0                 mov     dword ptr [esp], offset unk_41B3D0
.text:004090A7                 call    sub_40C460
.text:004090AC                 xor     eax, eax
.text:004090AE                 mov     ds:dword_41B3B0, eax
.text:004090B3                 jmp     loc_408FA9
.text:004090B3 ; ---------------------------------------------------------------------------
.text:004090B8                 align 10h
.text:004090C0 aOpenatUnableTo db 'openat: unable to restore working directory',0
.text:004090C0                                         ; DATA XREF: sub_409140:loc_4091F8↓o
.text:004090EC                 align 20h
.text:00409100 aOpenatUnableTo_0 db 'openat: unable to record current working directory',0
.text:00409100                                         ; DATA XREF: sub_409140:loc_409247↓o
.text:00409133                 align 10h
.text:00409140
.text:00409140 ; =============== S U B R O U T I N E =======================================
.text:00409140
.text:00409140
.text:00409140 ; int __cdecl sub_409140(int, char *, int)
.text:00409140 sub_409140      proc near               ; CODE XREF: sub_4088A0+189↑p
.text:00409140                                         ; sub_4088A0+1DB↑p ...
.text:00409140
.text:00409140 FileName        = dword ptr -2Ch
.text:00409140 OpenFlag        = dword ptr -28h
.text:00409140 var_24          = dword ptr -24h
.text:00409140 Block           = byte ptr -1Ch
.text:00409140 var_10          = dword ptr -10h
.text:00409140 var_C           = dword ptr -0Ch
.text:00409140 var_8           = dword ptr -8
.text:00409140 var_4           = dword ptr -4
.text:00409140 arg_0           = dword ptr  4
.text:00409140 arg_4           = dword ptr  8
.text:00409140 arg_8           = dword ptr  0Ch
.text:00409140
.text:00409140                 sub     esp, 2Ch
.text:00409143                 mov     [esp+2Ch+var_C], esi
.text:00409147                 mov     esi, [esp+2Ch+arg_8]
.text:0040914B                 mov     [esp+2Ch+var_4], ebp
.text:0040914F                 mov     ebp, [esp+2Ch+arg_0]
.text:00409153                 test    esi, 100h
.text:00409159                 mov     [esp+2Ch+var_8], edi
.text:0040915D                 mov     edi, [esp+2Ch+arg_4]
.text:00409161                 mov     [esp+2Ch+var_10], ebx
.text:00409165                 jz      short loc_409169
.text:00409167                 int     5               ;  - PRINT-SCREEN KEY
.text:00409167                                         ; automatically called by keyboard scanner when print-screen key is pressed
.text:00409169
.text:00409169 loc_409169:                             ; CODE XREF: sub_409140+25↑j
.text:00409169                 cmp     ebp, 0FFD19553h
.text:0040916F                 jz      loc_409278
.text:00409175                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00409178                 jz      loc_409278
.text:0040917E                 lea     edx, [esp+2Ch+Block]
.text:00409182                 mov     [esp+2Ch+FileName], edx
.text:00409185                 call    sub_4060A0
.text:0040918A                 test    eax, eax
.text:0040918C                 jnz     loc_409247
.text:00409192
.text:00409192 loc_409192:                             ; CODE XREF: sub_409140+133↓j
.text:00409192                 mov     [esp+2Ch+FileName], ebp
.text:00409195                 call    sub_4092A0
.text:0040919A                 test    eax, eax
.text:0040919C                 jnz     loc_409226
.text:004091A2                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:004091A6                 lea     ebp, [esp+2Ch+Block]
.text:004091AA                 mov     [esp+2Ch+FileName], edi ; FileName
.text:004091AD                 mov     [esp+2Ch+var_24], 0
.text:004091B5                 call    _open
.text:004091BA                 mov     edi, eax
.text:004091BC                 call    _errno
.text:004091C1                 mov     esi, [eax]
.text:004091C3                 mov     [esp+2Ch+FileName], ebp
.text:004091C6                 call    sub_4060E0
.text:004091CB                 test    eax, eax
.text:004091CD                 jnz     short loc_4091F8
.text:004091CF
.text:004091CF loc_4091CF:                             ; CODE XREF: sub_409140+E4↓j
.text:004091CF                 lea     ebx, [esp+2Ch+Block]
.text:004091D3                 mov     [esp+2Ch+FileName], ebx ; Block
.text:004091D6                 call    sub_406110
.text:004091DB                 call    _errno
.text:004091E0                 mov     [eax], esi
.text:004091E2                 mov     eax, edi
.text:004091E4
.text:004091E4 loc_4091E4:                             ; CODE XREF: sub_409140+105↓j
.text:004091E4                                         ; sub_409140+14C↓j
.text:004091E4                 mov     ebx, [esp+2Ch+var_10]
.text:004091E8                 mov     esi, [esp+2Ch+var_C]
.text:004091EC                 mov     edi, [esp+2Ch+var_8]
.text:004091F0                 mov     ebp, [esp+2Ch+var_4]
.text:004091F4                 add     esp, 2Ch
.text:004091F7                 retn
.text:004091F8 ; ---------------------------------------------------------------------------
.text:004091F8
.text:004091F8 loc_4091F8:                             ; CODE XREF: sub_409140+8D↑j
.text:004091F8                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo ; "openat: unable to restore working direc"...
.text:004091FF                 call    ds:libintl_gettext
.text:00409205                 mov     ebp, eax
.text:00409207                 call    _errno
.text:0040920C                 mov     [esp+2Ch+var_24], ebp ; char *
.text:00409210                 mov     edx, dword_41A050
.text:00409216                 mov     ecx, [eax]
.text:00409218                 mov     [esp+2Ch+FileName], edx ; Code
.text:0040921B                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:0040921F                 call    sub_40FF30
.text:00409224                 jmp     short loc_4091CF
.text:00409226 ; ---------------------------------------------------------------------------
.text:00409226
.text:00409226 loc_409226:                             ; CODE XREF: sub_409140+5C↑j
.text:00409226                 call    _errno
.text:0040922B                 mov     ebx, [eax]
.text:0040922D                 lea     esi, [esp+2Ch+Block]
.text:00409231                 mov     [esp+2Ch+FileName], esi ; Block
.text:00409234                 call    sub_406110
.text:00409239                 call    _errno
.text:0040923E                 mov     [eax], ebx
.text:00409240                 mov     eax, 0FFFFFFFFh
.text:00409245                 jmp     short loc_4091E4
.text:00409247 ; ---------------------------------------------------------------------------
.text:00409247
.text:00409247 loc_409247:                             ; CODE XREF: sub_409140+4C↑j
.text:00409247                 mov     [esp+2Ch+FileName], offset aOpenatUnableTo_0 ; "openat: unable to record current workin"...
.text:0040924E                 call    ds:libintl_gettext
.text:00409254                 mov     ebx, eax
.text:00409256                 call    _errno
.text:0040925B                 mov     [esp+2Ch+var_24], ebx ; char *
.text:0040925F                 mov     edx, dword_41A050
.text:00409265                 mov     ecx, [eax]
.text:00409267                 mov     [esp+2Ch+FileName], edx ; Code
.text:0040926A                 mov     [esp+2Ch+OpenFlag], ecx ; ErrorMessage
.text:0040926E                 call    sub_40FF30
.text:00409273                 jmp     loc_409192
.text:00409278 ; ---------------------------------------------------------------------------
.text:00409278
.text:00409278 loc_409278:                             ; CODE XREF: sub_409140+2F↑j
.text:00409278                                         ; sub_409140+38↑j
.text:00409278                 mov     [esp+2Ch+var_24], 0
.text:00409280                 mov     [esp+2Ch+OpenFlag], esi ; OpenFlag
.text:00409284                 mov     [esp+2Ch+FileName], edi ; FileName
.text:00409287                 call    _open
.text:0040928C                 jmp     loc_4091E4
.text:0040928C sub_409140      endp
.text:0040928C
.text:0040928C ; ---------------------------------------------------------------------------
.text:00409291                 align 10h
.text:004092A0
.text:004092A0 ; =============== S U B R O U T I N E =======================================
.text:004092A0
.text:004092A0
.text:004092A0 sub_4092A0      proc near               ; CODE XREF: sub_4088A0+29D↑p
.text:004092A0                                         ; sub_409140+55↑p
.text:004092A0                 sub     esp, 0Ch
.text:004092A3                 call    _errno
.text:004092A8                 mov     dword ptr [eax], 28h ; '('
.text:004092AE                 mov     eax, 0FFFFFFFFh
.text:004092B3                 add     esp, 0Ch
.text:004092B6                 retn
.text:004092B6 sub_4092A0      endp
.text:004092B6
.text:004092B6 ; ---------------------------------------------------------------------------
.text:004092B7                 align 10h
.text:004092C0
.text:004092C0 ; =============== S U B R O U T I N E =======================================
.text:004092C0
.text:004092C0
.text:004092C0 sub_4092C0      proc near               ; CODE XREF: sub_409310+3A↓j
.text:004092C0                                         ; sub_40C4F0+46B↓p ...
.text:004092C0
.text:004092C0 arg_0           = dword ptr  4
.text:004092C0 arg_4           = dword ptr  8
.text:004092C0 arg_8           = dword ptr  0Ch
.text:004092C0
.text:004092C0                 mov     edx, [esp+arg_8]
.text:004092C4                 mov     ecx, [esp+arg_4]
.text:004092C8                 mov     eax, [esp+arg_0]
.text:004092CC                 mov     [ecx+1], dl
.text:004092CF                 sar     edx, 8
.text:004092D2                 mov     [ecx], al
.text:004092D4                 mov     [ecx+2], dl
.text:004092D7                 retn
.text:004092D7 sub_4092C0      endp
.text:004092D7
.text:004092D7 ; ---------------------------------------------------------------------------
.text:004092D8                 align 10h
.text:004092E0
.text:004092E0 ; =============== S U B R O U T I N E =======================================
.text:004092E0
.text:004092E0
.text:004092E0 sub_4092E0      proc near               ; CODE XREF: sub_409350+3F↓j
.text:004092E0                                         ; sub_40C4F0+313B↓p
.text:004092E0
.text:004092E0 arg_0           = dword ptr  4
.text:004092E0 arg_4           = dword ptr  8
.text:004092E0 arg_8           = dword ptr  0Ch
.text:004092E0 arg_C           = dword ptr  10h
.text:004092E0
.text:004092E0                 push    ebx
.text:004092E1                 mov     edx, [esp+4+arg_8]
.text:004092E5                 mov     ebx, [esp+4+arg_C]
.text:004092E9                 mov     ecx, [esp+4+arg_4]
.text:004092ED                 mov     eax, [esp+4+arg_0]
.text:004092F1                 mov     [ecx+1], dl
.text:004092F4                 sar     edx, 8
.text:004092F7                 mov     [ecx+3], bl
.text:004092FA                 sar     ebx, 8
.text:004092FD                 mov     [ecx], al
.text:004092FF                 mov     [ecx+2], dl
.text:00409302                 mov     [ecx+4], bl
.text:00409305                 pop     ebx
.text:00409306                 retn
.text:00409306 sub_4092E0      endp
.text:00409306
.text:00409306 ; ---------------------------------------------------------------------------
.text:00409307                 align 10h
.text:00409310
.text:00409310 ; =============== S U B R O U T I N E =======================================
.text:00409310
.text:00409310
.text:00409310 sub_409310      proc near               ; CODE XREF: sub_40C4F0+967↓p
.text:00409310                                         ; sub_40C4F0+137C↓p ...
.text:00409310
.text:00409310 arg_0           = dword ptr  4
.text:00409310 arg_4           = dword ptr  8
.text:00409310 arg_8           = dword ptr  0Ch
.text:00409310 arg_C           = dword ptr  10h
.text:00409310
.text:00409310                 push    edi
.text:00409311                 push    esi
.text:00409312                 push    ebx
.text:00409313                 mov     edx, [esp+0Ch+arg_C]
.text:00409317                 mov     ebx, [esp+0Ch+arg_4]
.text:0040931B                 mov     edi, [esp+0Ch+arg_0]
.text:0040931F                 mov     esi, [esp+0Ch+arg_8]
.text:00409323                 lea     ecx, [edx+3]
.text:00409326                 cmp     edx, ebx
.text:00409328                 jz      short loc_40933B
.text:0040932A                 lea     esi, [esi+0]
.text:00409330
.text:00409330 loc_409330:                             ; CODE XREF: sub_409310+29↓j
.text:00409330                 dec     edx
.text:00409331                 dec     ecx
.text:00409332                 cmp     edx, ebx
.text:00409334                 movzx   eax, byte ptr [edx]
.text:00409337                 mov     [ecx], al
.text:00409339                 jnz     short loc_409330
.text:0040933B
.text:0040933B loc_40933B:                             ; CODE XREF: sub_409310+18↑j
.text:0040933B                 mov     [esp+0Ch+arg_8], esi
.text:0040933F                 mov     [esp+0Ch+arg_0], edi
.text:00409343                 mov     [esp+0Ch+arg_4], ebx
.text:00409347                 pop     ebx
.text:00409348                 pop     esi
.text:00409349                 pop     edi
.text:0040934A                 jmp     sub_4092C0
.text:0040934A sub_409310      endp
.text:0040934A
.text:0040934A ; ---------------------------------------------------------------------------
.text:0040934F                 align 10h
.text:00409350
.text:00409350 ; =============== S U B R O U T I N E =======================================
.text:00409350
.text:00409350
.text:00409350 sub_409350      proc near               ; CODE XREF: sub_40C4F0+30CC↓p
.text:00409350                                         ; sub_40C4F0+30F8↓p ...
.text:00409350
.text:00409350 arg_0           = dword ptr  4
.text:00409350 arg_4           = dword ptr  8
.text:00409350 arg_8           = dword ptr  0Ch
.text:00409350 arg_C           = dword ptr  10h
.text:00409350 arg_10          = dword ptr  14h
.text:00409350
.text:00409350                 push    ebp
.text:00409351                 push    edi
.text:00409352                 push    esi
.text:00409353                 push    ebx
.text:00409354                 mov     edx, [esp+10h+arg_10]
.text:00409358                 mov     ebx, [esp+10h+arg_4]
.text:0040935C                 mov     ebp, [esp+10h+arg_0]
.text:00409360                 mov     edi, [esp+10h+arg_8]
.text:00409364                 lea     ecx, [edx+5]
.text:00409367                 cmp     edx, ebx
.text:00409369                 mov     esi, [esp+10h+arg_C]
.text:0040936D                 jz      short loc_40937B
.text:0040936F                 nop
.text:00409370
.text:00409370 loc_409370:                             ; CODE XREF: sub_409350+29↓j
.text:00409370                 dec     edx
.text:00409371                 dec     ecx
.text:00409372                 cmp     edx, ebx
.text:00409374                 movzx   eax, byte ptr [edx]
.text:00409377                 mov     [ecx], al
.text:00409379                 jnz     short loc_409370
.text:0040937B
.text:0040937B loc_40937B:                             ; CODE XREF: sub_409350+1D↑j
.text:0040937B                 mov     [esp+10h+arg_C], esi
.text:0040937F                 mov     [esp+10h+arg_8], edi
.text:00409383                 mov     [esp+10h+arg_0], ebp
.text:00409387                 mov     [esp+10h+arg_4], ebx
.text:0040938B                 pop     ebx
.text:0040938C                 pop     esi
.text:0040938D                 pop     edi
.text:0040938E                 pop     ebp
.text:0040938F                 jmp     sub_4092E0
.text:0040938F sub_409350      endp
.text:0040938F
.text:0040938F ; ---------------------------------------------------------------------------
.text:00409394                 align 10h
.text:004093A0
.text:004093A0 ; =============== S U B R O U T I N E =======================================
.text:004093A0
.text:004093A0
.text:004093A0 sub_4093A0      proc near               ; CODE XREF: sub_40C4F0+5C6↓p
.text:004093A0
.text:004093A0 arg_0           = dword ptr  4
.text:004093A0 arg_4           = dword ptr  8
.text:004093A0 arg_8           = dword ptr  0Ch
.text:004093A0
.text:004093A0                 push    ebx
.text:004093A1                 mov     edx, [esp+4+arg_4]
.text:004093A5                 xor     ebx, ebx
.text:004093A7                 mov     ecx, [esp+4+arg_8]
.text:004093AB                 sub     edx, 2
.text:004093AE                 cmp     edx, [esp+4+arg_0]
.text:004093B2                 jbe     short loc_4093BA
.text:004093B4                 cmp     byte ptr [edx-1], 5Ch ; '\'
.text:004093B8                 jz      short loc_4093F2
.text:004093BA
.text:004093BA loc_4093BA:                             ; CODE XREF: sub_4093A0+12↑j
.text:004093BA                                         ; sub_4093A0+54↓j
.text:004093BA                 movzx   edx, byte ptr [edx]
.text:004093BD                 xor     eax, eax
.text:004093BF                 cmp     dl, 28h ; '('
.text:004093C2                 jz      short loc_4093E7
.text:004093C4
.text:004093C4 loc_4093C4:                             ; CODE XREF: sub_4093A0+50↓j
.text:004093C4                 cmp     dl, 7Ch ; '|'
.text:004093C7                 jz      short loc_4093D0
.text:004093C9
.text:004093C9 loc_4093C9:                             ; CODE XREF: sub_4093A0+3D↓j
.text:004093C9                                         ; sub_4093A0+45↓j
.text:004093C9                 pop     ebx
.text:004093CA                 retn
.text:004093CA ; ---------------------------------------------------------------------------
.text:004093CB                 align 10h
.text:004093D0
.text:004093D0 loc_4093D0:                             ; CODE XREF: sub_4093A0+27↑j
.text:004093D0                 and     ecx, 0FFFF8000h
.text:004093D6                 test    cx, cx
.text:004093D9                 jnz     short loc_4093E0
.text:004093DB                 test    bl, bl
.text:004093DD                 jz      short loc_4093C9
.text:004093DF                 nop
.text:004093E0
.text:004093E0 loc_4093E0:                             ; CODE XREF: sub_4093A0+39↑j
.text:004093E0                                         ; sub_4093A0+4A↓j ...
.text:004093E0                 mov     eax, 1
.text:004093E5                 jmp     short loc_4093C9
.text:004093E7 ; ---------------------------------------------------------------------------
.text:004093E7
.text:004093E7 loc_4093E7:                             ; CODE XREF: sub_4093A0+22↑j
.text:004093E7                 test    ch, 20h
.text:004093EA                 jnz     short loc_4093E0
.text:004093EC                 test    bl, bl
.text:004093EE                 jnz     short loc_4093E0
.text:004093F0                 jmp     short loc_4093C4
.text:004093F2 ; ---------------------------------------------------------------------------
.text:004093F2
.text:004093F2 loc_4093F2:                             ; CODE XREF: sub_4093A0+18↑j
.text:004093F2                 mov     bl, 1
.text:004093F4                 jmp     short loc_4093BA
.text:004093F4 sub_4093A0      endp
.text:004093F4
.text:004093F4 ; ---------------------------------------------------------------------------
.text:004093F6                 align 10h
.text:00409400
.text:00409400 ; =============== S U B R O U T I N E =======================================
.text:00409400
.text:00409400
.text:00409400 sub_409400      proc near               ; CODE XREF: sub_40C4F0+B9A↓p
.text:00409400
.text:00409400 var_9           = byte ptr -9
.text:00409400 var_8           = dword ptr -8
.text:00409400 var_4           = dword ptr -4
.text:00409400 arg_0           = dword ptr  4
.text:00409400 arg_4           = dword ptr  8
.text:00409400 arg_8           = dword ptr  0Ch
.text:00409400
.text:00409400                 sub     esp, 0Ch
.text:00409403                 mov     edx, [esp+0Ch+arg_8]
.text:00409407                 mov     [esp+0Ch+var_4], esi
.text:0040940B                 mov     esi, [esp+0Ch+arg_0]
.text:0040940F                 mov     [esp+0Ch+var_8], ebx
.text:00409413                 lea     eax, [esi+1]
.text:00409416                 movzx   ebx, byte ptr [esi]
.text:00409419                 cmp     bl, 5Ch ; '\'
.text:0040941C                 setz    [esp+0Ch+var_9]
.text:00409421                 cmp     eax, [esp+0Ch+arg_4]
.text:00409425                 sbb     ecx, ecx
.text:00409427                 and     ecx, eax
.text:00409429                 xor     eax, eax
.text:0040942B                 test    dh, 20h
.text:0040942E                 jz      short loc_409468
.text:00409430                 cmp     bl, 29h ; ')'
.text:00409433
.text:00409433 loc_409433:                             ; CODE XREF: sub_409400+76↓j
.text:00409433                 jz      short loc_409451
.text:00409435
.text:00409435 loc_409435:                             ; CODE XREF: sub_409400+6D↓j
.text:00409435                                         ; sub_409400+71↓j
.text:00409435                 and     edx, 0FFFF8000h
.text:0040943B                 test    dx, dx
.text:0040943E                 jz      short loc_409458
.text:00409440                 cmp     byte ptr [esi], 7Ch ; '|'
.text:00409443
.text:00409443 loc_409443:                             ; CODE XREF: sub_409400+66↓j
.text:00409443                 jz      short loc_409451
.text:00409445
.text:00409445 loc_409445:                             ; CODE XREF: sub_409400+56↓j
.text:00409445                                         ; sub_409400+5D↓j ...
.text:00409445                 mov     ebx, [esp+0Ch+var_8]
.text:00409449                 mov     esi, [esp+0Ch+var_4]
.text:0040944D                 add     esp, 0Ch
.text:00409450                 retn
.text:00409451 ; ---------------------------------------------------------------------------
.text:00409451
.text:00409451 loc_409451:                             ; CODE XREF: sub_409400:loc_409433↑j
.text:00409451                                         ; sub_409400:loc_409443↑j
.text:00409451                 mov     eax, 1
.text:00409456                 jmp     short loc_409445
.text:00409458 ; ---------------------------------------------------------------------------
.text:00409458
.text:00409458 loc_409458:                             ; CODE XREF: sub_409400+3E↑j
.text:00409458                 cmp     [esp+0Ch+var_9], 0
.text:0040945D                 jz      short loc_409445
.text:0040945F                 test    ecx, ecx
.text:00409461                 jz      short loc_409445
.text:00409463                 cmp     byte ptr [ecx], 7Ch ; '|'
.text:00409466                 jmp     short loc_409443
.text:00409468 ; ---------------------------------------------------------------------------
.text:00409468
.text:00409468 loc_409468:                             ; CODE XREF: sub_409400+2E↑j
.text:00409468                 cmp     [esp+0Ch+var_9], 0
.text:0040946D                 jz      short loc_409435
.text:0040946F                 test    ecx, ecx
.text:00409471                 jz      short loc_409435
.text:00409473                 cmp     byte ptr [ecx], 29h ; ')'
.text:00409476                 jmp     short loc_409433
.text:00409476 sub_409400      endp
.text:00409476
.text:00409476 ; ---------------------------------------------------------------------------
.text:00409478                 align 10h
.text:00409480
.text:00409480 ; =============== S U B R O U T I N E =======================================
.text:00409480
.text:00409480
.text:00409480 sub_409480      proc near               ; CODE XREF: sub_40C4F0:loc_40E5D3↓p
.text:00409480
.text:00409480 arg_0           = dword ptr  4
.text:00409480 arg_4           = dword ptr  8
.text:00409480 arg_8           = dword ptr  0Ch
.text:00409480 arg_C           = dword ptr  10h
.text:00409480 arg_10          = dword ptr  14h
.text:00409480 arg_14          = dword ptr  18h
.text:00409480
.text:00409480                 push    ebp
.text:00409481                 push    edi
.text:00409482                 push    esi
.text:00409483                 push    ebx
.text:00409484                 mov     ecx, [esp+10h+arg_4]
.text:00409488                 mov     esi, [esp+10h+arg_0]
.text:0040948C                 mov     ebx, [esp+10h+arg_C]
.text:00409490                 mov     edx, [ecx]
.text:00409492                 cmp     edx, [esp+10h+arg_8]
.text:00409496                 jz      loc_40954A
.text:0040949C                 lea     edi, [edx+1]
.text:0040949F                 mov     [ecx], edi
.text:004094A1                 xor     ecx, ecx
.text:004094A3                 test    [esp+10h+arg_10], 10000h
.text:004094AB                 setz    cl
.text:004094AE                 dec     ecx
.text:004094AF                 and     ecx, 0Bh
.text:004094B2                 test    ebx, ebx
.text:004094B4                 jz      loc_409545
.text:004094BA                 movzx   edi, byte ptr [edx]
.text:004094BD                 and     esi, 0FFh
.text:004094C3                 movsx   esi, byte ptr [esi+ebx]
.text:004094C7                 movzx   ebp, byte ptr [edi+ebx]
.text:004094CB
.text:004094CB loc_4094CB:                             ; CODE XREF: sub_409480+C8↓j
.text:004094CB                 cmp     esi, ebp
.text:004094CD                 mov     edx, esi
.text:004094CF                 ja      short loc_40953E
.text:004094D1                 jmp     short loc_4094E0
.text:004094D1 ; ---------------------------------------------------------------------------
.text:004094D3                 align 10h
.text:004094E0
.text:004094E0 loc_4094E0:                             ; CODE XREF: sub_409480+51↑j
.text:004094E0                                         ; sub_409480+BC↓j
.text:004094E0                 test    ebx, ebx
.text:004094E2                 movzx   eax, dl
.text:004094E5                 jz      short loc_4094EE
.text:004094E7                 movzx   ecx, dl
.text:004094EA                 movzx   eax, byte ptr [ecx+ebx]
.text:004094EE
.text:004094EE loc_4094EE:                             ; CODE XREF: sub_409480+65↑j
.text:004094EE                 mov     edi, [esp+10h+arg_14]
.text:004094F2                 sar     eax, 3
.text:004094F5                 add     edi, eax
.text:004094F7                 test    ebx, ebx
.text:004094F9                 movzx   eax, dl
.text:004094FC                 jz      short loc_409505
.text:004094FE                 movzx   esi, dl
.text:00409501                 movzx   eax, byte ptr [esi+ebx]
.text:00409505
.text:00409505 loc_409505:                             ; CODE XREF: sub_409480+7C↑j
.text:00409505                 mov     esi, [esp+10h+arg_14]
.text:00409509                 sar     eax, 3
.text:0040950C                 movzx   ecx, dl
.text:0040950F                 add     eax, esi
.text:00409511                 test    ebx, ebx
.text:00409513                 movzx   esi, byte ptr [eax]
.text:00409516                 jz      short loc_40951F
.text:00409518                 movzx   eax, dl
.text:0040951B                 movzx   ecx, byte ptr [eax+ebx]
.text:0040951F
.text:0040951F loc_40951F:                             ; CODE XREF: sub_409480+96↑j
.text:0040951F                 mov     eax, ecx
.text:00409521                 inc     edx
.text:00409522                 and     eax, 1F8h
.text:00409527                 sub     ecx, eax
.text:00409529                 mov     eax, 1
.text:0040952E                 shl     eax, cl
.text:00409530                 mov     ecx, eax
.text:00409532                 mov     eax, esi
.text:00409534                 or      al, cl
.text:00409536                 mov     [edi], al
.text:00409538                 xor     ecx, ecx
.text:0040953A                 cmp     edx, ebp
.text:0040953C                 jbe     short loc_4094E0
.text:0040953E
.text:0040953E loc_40953E:                             ; CODE XREF: sub_409480+4F↑j
.text:0040953E                 mov     eax, ecx
.text:00409540
.text:00409540 loc_409540:                             ; CODE XREF: sub_409480+CF↓j
.text:00409540                 pop     ebx
.text:00409541                 pop     esi
.text:00409542                 pop     edi
.text:00409543                 pop     ebp
.text:00409544                 retn
.text:00409545 ; ---------------------------------------------------------------------------
.text:00409545
.text:00409545 loc_409545:                             ; CODE XREF: sub_409480+34↑j
.text:00409545                 movzx   ebp, byte ptr [edx]
.text:00409548                 jmp     short loc_4094CB
.text:0040954A ; ---------------------------------------------------------------------------
.text:0040954A
.text:0040954A loc_40954A:                             ; CODE XREF: sub_409480+16↑j
.text:0040954A                 mov     eax, 0Bh
.text:0040954F                 jmp     short loc_409540
.text:0040954F sub_409480      endp
.text:0040954F
.text:0040954F ; ---------------------------------------------------------------------------
.text:00409551                 db 0EBh, 0Dh, 90h
.text:00409554                 align 10h
.text:00409560 jpt_409857      dd offset loc_409E0B    ; DATA XREF: sub_4095E0:loc_409850↓r
.text:00409560                                         ; sub_4095E0+BEF↓r ...
.text:00409560                 dd offset loc_409E23    ; jump table for switch statement
.text:00409560                 dd offset loc_409E28
.text:00409560                 dd offset loc_409F23
.text:00409560                 dd offset loc_40B786
.text:00409560                 dd offset loc_40B690
.text:00409578 jpt_409FE4      dd offset loc_40B5A4    ; DATA XREF: sub_4095E0+9FD↓r
.text:00409578                 dd offset loc_40B1A0    ; jump table for switch statement
.text:00409580                 dd offset loc_40B003
.text:00409584                 dd offset loc_40AFB9
.text:00409588                 dd offset loc_40AF5D
.text:0040958C                 dd offset loc_40AF20
.text:00409590                 dd offset loc_40AF06
.text:00409594                 dd offset loc_40A57A
.text:00409598                 dd offset loc_40AF01
.text:0040959C                 dd offset loc_40AEFC
.text:004095A0                 dd offset loc_40AD81
.text:004095A4                 dd offset loc_40AB85
.text:004095A8                 dd offset loc_40AAEC
.text:004095AC                 dd offset loc_40A966
.text:004095B0                 dd offset loc_40A7E0
.text:004095B4                 dd offset loc_40A598
.text:004095B8                 dd offset loc_40A54F
.text:004095BC                 dd offset loc_40A4F7
.text:004095C0                 dd offset loc_40A447
.text:004095C4                 dd offset loc_40A396
.text:004095C8                 dd offset loc_40A2AA
.text:004095CC                 dd offset loc_40A1D8
.text:004095D0                 dd offset loc_40A0D2
.text:004095D4                 dd offset loc_409FE6
.text:004095D8                 align 10h
.text:004095E0
.text:004095E0 ; =============== S U B R O U T I N E =======================================
.text:004095E0
.text:004095E0
.text:004095E0 sub_4095E0      proc near               ; CODE XREF: .text:0040C33E↓p
.text:004095E0                                         ; .text:0040C350↓j ...
.text:004095E0
.text:004095E0 Size            = dword ptr -0BCh
.text:004095E0 var_B8          = dword ptr -0B8h
.text:004095E0 var_B4          = dword ptr -0B4h
.text:004095E0 var_B0          = dword ptr -0B0h
.text:004095E0 var_A5          = byte ptr -0A5h
.text:004095E0 var_A4          = dword ptr -0A4h
.text:004095E0 var_A0          = dword ptr -0A0h
.text:004095E0 var_9C          = dword ptr -9Ch
.text:004095E0 var_97          = byte ptr -97h
.text:004095E0 var_96          = byte ptr -96h
.text:004095E0 var_95          = byte ptr -95h
.text:004095E0 var_94          = dword ptr -94h
.text:004095E0 var_90          = dword ptr -90h
.text:004095E0 var_8C          = dword ptr -8Ch
.text:004095E0 var_88          = dword ptr -88h
.text:004095E0 var_84          = dword ptr -84h
.text:004095E0 var_80          = dword ptr -80h
.text:004095E0 var_7C          = dword ptr -7Ch
.text:004095E0 var_78          = dword ptr -78h
.text:004095E0 var_74          = dword ptr -74h
.text:004095E0 var_70          = dword ptr -70h
.text:004095E0 var_6C          = dword ptr -6Ch
.text:004095E0 var_68          = dword ptr -68h
.text:004095E0 var_64          = dword ptr -64h
.text:004095E0 var_60          = dword ptr -60h
.text:004095E0 var_5C          = dword ptr -5Ch
.text:004095E0 var_58          = dword ptr -58h
.text:004095E0 var_54          = dword ptr -54h
.text:004095E0 var_50          = dword ptr -50h
.text:004095E0 var_4C          = dword ptr -4Ch
.text:004095E0 var_48          = dword ptr -48h
.text:004095E0 var_44          = dword ptr -44h
.text:004095E0 var_40          = dword ptr -40h
.text:004095E0 var_3C          = dword ptr -3Ch
.text:004095E0 var_38          = dword ptr -38h
.text:004095E0 var_34          = dword ptr -34h
.text:004095E0 var_30          = dword ptr -30h
.text:004095E0 Src             = dword ptr -2Ch
.text:004095E0 var_28          = dword ptr -28h
.text:004095E0 var_24          = dword ptr -24h
.text:004095E0 arg_0           = dword ptr  4
.text:004095E0 arg_4           = dword ptr  8
.text:004095E0 arg_8           = dword ptr  0Ch
.text:004095E0 arg_C           = dword ptr  10h
.text:004095E0 arg_10          = dword ptr  14h
.text:004095E0 arg_14          = dword ptr  18h
.text:004095E0 arg_18          = dword ptr  1Ch
.text:004095E0 arg_1C          = dword ptr  20h
.text:004095E0
.text:004095E0                 push    ebp
.text:004095E1                 push    edi
.text:004095E2                 push    esi
.text:004095E3                 push    ebx
.text:004095E4                 sub     esp, 0ACh
.text:004095EA                 mov     ebx, [esp+0BCh+arg_0]
.text:004095F1                 mov     [esp+0BCh+var_54], 0
.text:004095F9                 mov     ecx, [esp+0BCh+arg_0]
.text:00409600                 mov     esi, [esp+0BCh+arg_1C]
.text:00409607                 mov     [esp+0BCh+var_60], 101h
.text:0040960F                 mov     ebp, [ebx+8]
.text:00409612                 mov     edi, [ecx]
.text:00409614                 mov     [esp+0BCh+var_64], 100h
.text:0040961C                 mov     eax, [ebx+18h]
.text:0040961F                 mov     edx, [ebx+14h]
.text:00409622                 mov     [esp+0BCh+var_4C], edi
.text:00409626                 inc     eax
.text:00409627                 add     edi, ebp
.text:00409629                 mov     [esp+0BCh+var_58], edx
.text:0040962D                 mov     [esp+0BCh+var_50], edi
.text:00409631                 mov     [esp+0BCh+var_5C], eax
.text:00409635                 mov     [esp+0BCh+var_7C], 0
.text:0040963D                 mov     [esp+0BCh+var_88], 0
.text:00409645                 mov     [esp+0BCh+var_8C], 0
.text:0040964D                 mov     [esp+0BCh+Size], 14h ; Size
.text:00409654                 call    malloc
.text:00409659                 mov     [esp+0BCh+Src], eax
.text:00409660                 mov     edx, eax
.text:00409662                 test    edx, edx
.text:00409664                 mov     eax, 0FFFFFFFEh
.text:00409669                 jz      loc_409D37
.text:0040966F                 mov     edx, [esp+0BCh+arg_0]
.text:00409676                 xor     edi, edi
.text:00409678                 mov     ebp, 5
.text:0040967D                 mov     [esp+0BCh+var_28], ebp
.text:00409684                 mov     [esp+0BCh+var_24], edi
.text:0040968B                 mov     ebx, [edx+18h]
.text:0040968E                 test    ebx, ebx
.text:00409690                 jnz     loc_40B877
.text:00409696                 mov     [esp+0BCh+var_90], 0
.text:0040969E                 mov     [esp+0BCh+var_84], 0
.text:004096A6                 mov     [esp+0BCh+var_80], 0
.text:004096AE                 mov     [esp+0BCh+var_74], 0
.text:004096B6                 mov     [esp+0BCh+var_70], 0
.text:004096BE                 mov     [esp+0BCh+var_6C], 0
.text:004096C6                 mov     [esp+0BCh+var_68], 0
.text:004096CE                 mov     [esp+0BCh+var_94], 0
.text:004096D6                 mov     [esp+0BCh+var_78], 0
.text:004096DE
.text:004096DE loc_4096DE:                             ; CODE XREF: sub_4095E0+236C↓j
.text:004096DE                 mov     eax, [esp+0BCh+arg_14]
.text:004096E5                 test    eax, eax
.text:004096E7                 js      loc_409DD5
.text:004096ED                 mov     ebp, [esp+0BCh+arg_8]
.text:004096F4                 mov     ecx, [esp+0BCh+arg_10]
.text:004096FB                 add     ebp, ecx
.text:004096FD                 cmp     [esp+0BCh+arg_14], ebp
.text:00409704                 jg      loc_409DD5
.text:0040970A                 mov     ebp, 1
.text:0040970F                 cmp     ebp, [esp+0BCh+var_5C]
.text:00409713                 jnb     short loc_409758
.text:00409715                 mov     eax, [esp+0BCh+var_78]
.text:00409719                 add     eax, 4
.text:0040971C
.text:0040971C loc_40971C:                             ; CODE XREF: sub_4095E0+176↓j
.text:0040971C                 mov     ecx, [esp+0BCh+var_74]
.text:00409720                 mov     ebx, [esp+0BCh+var_70]
.text:00409724                 mov     edx, [esp+0BCh+var_6C]
.text:00409728                 mov     dword ptr [ecx+ebp*4], offset unk_41B520
.text:0040972F                 mov     edi, [esp+0BCh+var_68]
.text:00409733                 mov     dword ptr [ebx+ebp*4], offset unk_41B520
.text:0040973A                 mov     dword ptr [edx+ebp*4], offset unk_41B520
.text:00409741                 mov     dword ptr [edi+ebp*4], offset unk_41B520
.text:00409748                 inc     ebp
.text:00409749                 or      dword ptr [eax], 3
.text:0040974C                 and     byte ptr [eax], 0E3h
.text:0040974F                 add     eax, 4
.text:00409752                 cmp     ebp, [esp+0BCh+var_5C]
.text:00409756                 jb      short loc_40971C
.text:00409758
.text:00409758 loc_409758:                             ; CODE XREF: sub_4095E0+133↑j
.text:00409758                 mov     eax, [esp+0BCh+arg_10]
.text:0040975F                 test    eax, eax
.text:00409761                 jnz     short loc_40979C
.text:00409763                 mov     ebp, [esp+0BCh+arg_4]
.text:0040976A                 test    ebp, ebp
.text:0040976C                 jz      short loc_40979C
.text:0040976E                 mov     ebx, [esp+0BCh+arg_4]
.text:00409775                 xor     edx, edx
.text:00409777                 xor     edi, edi
.text:00409779                 mov     [esp+0BCh+arg_4], edx
.text:00409780                 mov     ecx, [esp+0BCh+arg_8]
.text:00409787                 mov     [esp+0BCh+arg_8], edi
.text:0040978E                 mov     [esp+0BCh+arg_C], ebx
.text:00409795                 mov     [esp+0BCh+arg_10], ecx
.text:0040979C
.text:0040979C loc_40979C:                             ; CODE XREF: sub_4095E0+181↑j
.text:0040979C                                         ; sub_4095E0+18C↑j
.text:0040979C                 mov     ecx, [esp+0BCh+arg_4]
.text:004097A3                 mov     eax, [esp+0BCh+arg_8]
.text:004097AA                 mov     ebp, [esp+0BCh+arg_C]
.text:004097B1                 mov     edi, [esp+0BCh+arg_10]
.text:004097B8                 add     ecx, eax
.text:004097BA                 mov     [esp+0BCh+var_34], ecx
.text:004097C1                 add     ebp, edi
.text:004097C3                 cmp     esi, [esp+0BCh+arg_8]
.text:004097CA                 mov     [esp+0BCh+var_38], ebp
.text:004097D1                 jg      loc_40B852
.text:004097D7                 mov     edx, [esp+0BCh+arg_4]
.text:004097DE                 add     esi, edx
.text:004097E0                 mov     [esp+0BCh+var_3C], esi
.text:004097E7                 mov     esi, [esp+0BCh+arg_C]
.text:004097EE
.text:004097EE loc_4097EE:                             ; CODE XREF: sub_4095E0+2292↓j
.text:004097EE                 mov     [esp+0BCh+var_40], esi
.text:004097F2                 mov     ecx, [esp+0BCh+arg_8]
.text:004097F9                 test    ecx, ecx
.text:004097FB                 jle     loc_40B828
.text:00409801                 mov     eax, [esp+0BCh+arg_8]
.text:00409808                 cmp     [esp+0BCh+arg_14], eax
.text:0040980F                 jg      loc_40B828
.text:00409815                 mov     edx, [esp+0BCh+arg_4]
.text:0040981C                 mov     ebx, [esp+0BCh+arg_14]
.text:00409823                 mov     esi, [esp+0BCh+var_3C]
.text:0040982A                 add     edx, ebx
.text:0040982C                 mov     [esp+0BCh+var_44], edx
.text:00409830                 mov     [esp+0BCh+var_48], esi
.text:00409834
.text:00409834 loc_409834:                             ; CODE XREF: sub_4095E0+469↓j
.text:00409834                                         ; sub_4095E0+47A↓j ...
.text:00409834                 mov     edx, [esp+0BCh+var_50]
.text:00409838                 mov     eax, offset loc_409859
.text:0040983D                 cmp     [esp+0BCh+var_4C], edx
.text:00409841                 jz      short loc_409857
.text:00409843
.text:00409843 loc_409843:                             ; CODE XREF: sub_4095E0+838↓j
.text:00409843                 mov     ebp, [esp+0BCh+var_4C]
.text:00409847                 movzx   ebx, byte ptr [ebp+0]
.text:0040984B                 inc     ebp
.text:0040984C                 mov     [esp+0BCh+var_4C], ebp
.text:00409850
.text:00409850 loc_409850:                             ; CODE XREF: sub_4095E0+1CA0↓j
.text:00409850                 mov     eax, ds:jpt_409857[ebx*4] ; switch 6 cases
.text:00409857
.text:00409857 loc_409857:                             ; CODE XREF: sub_4095E0+261↑j
.text:00409857                                         ; sub_4095E0+83E↓j ...
.text:00409857                 jmp     eax             ; switch jump
.text:00409859 ; ---------------------------------------------------------------------------
.text:00409859
.text:00409859 loc_409859:                             ; DATA XREF: sub_4095E0+258↑o
.text:00409859                                         ; sub_4095E0+82F↓o ...
.text:00409859                 mov     eax, [esp+0BCh+var_40]
.text:0040985D                 cmp     [esp+0BCh+var_44], eax
.text:00409861                 jz      loc_409AE9
.text:00409867                 mov     edi, [esp+0BCh+arg_8]
.text:0040986E                 xor     edx, edx
.text:00409870                 test    edi, edi
.text:00409872                 jz      short loc_40988C
.text:00409874                 mov     eax, [esp+0BCh+var_88]
.text:00409878                 cmp     [esp+0BCh+arg_4], eax
.text:0040987F                 ja      short loc_40988C
.text:00409881                 mov     esi, [esp+0BCh+var_34]
.text:00409888                 cmp     eax, esi
.text:0040988A                 jbe     short loc_40988E
.text:0040988C
.text:0040988C loc_40988C:                             ; CODE XREF: sub_4095E0+292↑j
.text:0040988C                                         ; sub_4095E0+29F↑j
.text:0040988C                 mov     dl, 1
.text:0040988E
.text:0040988E loc_40988E:                             ; CODE XREF: sub_4095E0+2AA↑j
.text:0040988E                 mov     ebp, [esp+0BCh+var_3C]
.text:00409895                 cmp     [esp+0BCh+var_48], ebp
.text:00409899                 setz    cl
.text:0040989C                 cmp     dl, cl
.text:0040989E                 jz      loc_409DF8
.text:004098A4                 mov     edx, [esp+0BCh+var_88]
.text:004098A8                 cmp     [esp+0BCh+var_44], edx
.text:004098AC                 setnbe  al
.text:004098AF
.text:004098AF loc_4098AF:                             ; CODE XREF: sub_4095E0+826↓j
.text:004098AF                 mov     esi, [esp+0BCh+var_24]
.text:004098B6                 test    esi, esi
.text:004098B8                 jz      loc_409DDF
.text:004098BE                 mov     ecx, [esp+0BCh+var_7C]
.text:004098C2                 test    ecx, ecx
.text:004098C4                 jz      short loc_4098CA
.text:004098C6                 test    al, al
.text:004098C8                 jz      short loc_409910
.text:004098CA
.text:004098CA loc_4098CA:                             ; CODE XREF: sub_4095E0+2E4↑j
.text:004098CA                 mov     [esp+0BCh+var_7C], 1
.text:004098D2                 mov     eax, [esp+0BCh+var_5C]
.text:004098D6                 mov     ebp, 1
.text:004098DB                 mov     edi, [esp+0BCh+var_44]
.text:004098DF                 cmp     ebp, eax
.text:004098E1                 mov     [esp+0BCh+var_88], edi
.text:004098E5                 jnb     short loc_409910
.text:004098E7
.text:004098E7 loc_4098E7:                             ; CODE XREF: sub_4095E0+328↓j
.text:004098E7                 mov     edx, [esp+0BCh+var_68]
.text:004098EB                 mov     ecx, [esp+0BCh+var_80]
.text:004098EF                 mov     eax, [esp+0BCh+var_6C]
.text:004098F3                 mov     edi, [edx+ebp*4]
.text:004098F6                 mov     edx, [esp+0BCh+var_84]
.text:004098FA                 mov     [ecx+ebp*4], edi
.text:004098FD                 mov     ebx, [eax+ebp*4]
.text:00409900                 mov     [edx+ebp*4], ebx
.text:00409903                 inc     ebp
.text:00409904                 cmp     ebp, [esp+0BCh+var_5C]
.text:00409908                 jb      short loc_4098E7
.text:0040990A                 lea     esi, [esi+0]
.text:00409910
.text:00409910 loc_409910:                             ; CODE XREF: sub_4095E0+2E8↑j
.text:00409910                                         ; sub_4095E0+305↑j ...
.text:00409910                 test    esi, esi
.text:00409912                 mov     eax, esi
.text:00409914                 jz      loc_409A7E
.text:0040991A                 mov     ebx, [esp+0BCh+Src]
.text:00409921                 dec     esi
.text:00409922                 mov     [esp+0BCh+var_24], esi
.text:00409929                 mov     esi, [ebx+esi*4]
.text:0040992C                 test    esi, esi
.text:0040992E                 jz      short loc_409934
.text:00409930                 mov     [esp+0BCh+var_44], esi
.text:00409934
.text:00409934 loc_409934:                             ; CODE XREF: sub_4095E0+34E↑j
.text:00409934                 lea     ecx, [eax-2]
.text:00409937                 lea     edx, [eax-3]
.text:0040993A                 mov     [esp+0BCh+var_24], ecx
.text:00409941                 mov     ebp, [ebx+ecx*4]
.text:00409944                 lea     ecx, [eax-4]
.text:00409947                 mov     [esp+0BCh+var_24], edx
.text:0040994E                 mov     [esp+0BCh+var_4C], ebp
.text:00409952                 mov     edi, [ebx+edx*4]
.text:00409955                 mov     [esp+0BCh+var_24], ecx
.text:0040995C                 mov     [esp+0BCh+var_64], edi
.text:00409960                 mov     ebp, [ebx+ecx*4]
.text:00409963                 mov     ecx, [esp+0BCh+var_64]
.text:00409967                 mov     [esp+0BCh+var_60], ebp
.text:0040996B                 cmp     ecx, ebp
.text:0040996D                 jb      short loc_4099C9
.text:0040996F                 nop
.text:00409970
.text:00409970 loc_409970:                             ; CODE XREF: sub_4095E0+3E7↓j
.text:00409970                 mov     eax, [esp+0BCh+var_24]
.text:00409977                 mov     ebp, [esp+0BCh+var_78]
.text:0040997B                 dec     eax
.text:0040997C                 mov     [esp+0BCh+var_24], eax
.text:00409983                 mov     edi, [ebx+eax*4]
.text:00409986                 mov     [ebp+ecx*4+0], edi
.text:0040998A                 mov     ebp, [esp+0BCh+var_24]
.text:00409991                 mov     esi, [esp+0BCh+Src]
.text:00409998                 lea     edx, [ebp-1]
.text:0040999B                 sub     ebp, 2
.text:0040999E                 mov     ebx, esi
.text:004099A0                 mov     [esp+0BCh+var_24], edx
.text:004099A7                 mov     edi, [esi+edx*4]
.text:004099AA                 mov     edx, [esp+0BCh+var_6C]
.text:004099AE                 mov     [esp+0BCh+var_24], ebp
.text:004099B5                 mov     [edx+ecx*4], edi
.text:004099B8                 mov     edi, [esi+ebp*4]
.text:004099BB                 mov     esi, [esp+0BCh+var_68]
.text:004099BF                 mov     [esi+ecx*4], edi
.text:004099C2                 dec     ecx
.text:004099C3                 cmp     ecx, [esp+0BCh+var_60]
.text:004099C7                 jnb     short loc_409970
.text:004099C9
.text:004099C9 loc_4099C9:                             ; CODE XREF: sub_4095E0+38D↑j
.text:004099C9                 mov     [esp+0BCh+var_8C], 0
.text:004099D1                 mov     ebx, [esp+0BCh+var_4C]
.text:004099D5                 test    ebx, ebx
.text:004099D7                 jz      short loc_409A32
.text:004099D9                 mov     edx, [esp+0BCh+var_50]
.text:004099DD                 cmp     [esp+0BCh+var_4C], edx
.text:004099E1                 jnb     short loc_409A3E
.text:004099E3                 mov     ecx, [esp+0BCh+var_4C]
.text:004099E7                 xor     edx, edx
.text:004099E9                 movzx   eax, byte ptr [ecx]
.text:004099EC                 cmp     eax, 12h
.text:004099EF                 ja      loc_409A75
.text:004099F5                 cmp     eax, 11h
.text:004099F8                 jnb     short loc_409A00
.text:004099FA                 cmp     eax, 0Dh
.text:004099FD                 jnz     short loc_409A3E
.text:004099FF                 nop
.text:00409A00
.text:00409A00 loc_409A00:                             ; CODE XREF: sub_4095E0+418↑j
.text:00409A00                                         ; sub_4095E0+49C↓j
.text:00409A00                 mov     ebp, [esp+0BCh+var_4C]
.text:00409A04                 mov     ecx, [esp+0BCh+var_4C]
.text:00409A08                 inc     ebp
.text:00409A09                 mov     [esp+0BCh+var_30], ebp
.text:00409A10                 movsx   esi, byte ptr [ebp+1]
.text:00409A14                 movzx   eax, byte ptr [ecx+1]
.text:00409A18                 shl     esi, 8
.text:00409A1B                 lea     edi, [esi+eax]
.text:00409A1E                 lea     eax, [edi+ecx+3]
.text:00409A22                 test    dl, dl
.text:00409A24                 mov     [esp+0BCh+var_30], eax
.text:00409A2B                 jz      short loc_409A70
.text:00409A2D                 cmp     byte ptr [eax], 15h
.text:00409A30
.text:00409A30 loc_409A30:                             ; CODE XREF: sub_4095E0+493↓j
.text:00409A30                 jnz     short loc_409A3E
.text:00409A32
.text:00409A32 loc_409A32:                             ; CODE XREF: sub_4095E0+3F7↑j
.text:00409A32                                         ; sub_4095E0+889↓j ...
.text:00409A32                 mov     esi, [esp+0BCh+var_24]
.text:00409A39                 jmp     loc_409910
.text:00409A3E ; ---------------------------------------------------------------------------
.text:00409A3E
.text:00409A3E loc_409A3E:                             ; CODE XREF: sub_4095E0+401↑j
.text:00409A3E                                         ; sub_4095E0+41D↑j ...
.text:00409A3E                 mov     ebx, [esp+0BCh+arg_4]
.text:00409A45                 cmp     [esp+0BCh+var_44], ebx
.text:00409A49                 jb      loc_409834
.text:00409A4F                 mov     edi, [esp+0BCh+var_34]
.text:00409A56                 cmp     [esp+0BCh+var_44], edi
.text:00409A5A                 ja      loc_409834
.text:00409A60                 mov     edx, [esp+0BCh+var_3C]
.text:00409A67                 mov     [esp+0BCh+var_48], edx
.text:00409A6B                 jmp     loc_409834
.text:00409A70 ; ---------------------------------------------------------------------------
.text:00409A70
.text:00409A70 loc_409A70:                             ; CODE XREF: sub_4095E0+44B↑j
.text:00409A70                 cmp     byte ptr [eax], 0Fh
.text:00409A73                 jmp     short loc_409A30
.text:00409A75 ; ---------------------------------------------------------------------------
.text:00409A75
.text:00409A75 loc_409A75:                             ; CODE XREF: sub_4095E0+40F↑j
.text:00409A75                 cmp     eax, 16h
.text:00409A78                 jnz     short loc_409A3E
.text:00409A7A                 mov     dl, 1
.text:00409A7C                 jmp     short loc_409A00
.text:00409A7E ; ---------------------------------------------------------------------------
.text:00409A7E
.text:00409A7E loc_409A7E:                             ; CODE XREF: sub_4095E0+334↑j
.text:00409A7E                 mov     ecx, [esp+0BCh+var_7C]
.text:00409A82                 test    ecx, ecx
.text:00409A84                 jz      loc_409DD5
.text:00409A8A
.text:00409A8A loc_409A8A:                             ; CODE XREF: sub_4095E0+813↓j
.text:00409A8A                 mov     esi, [esp+0BCh+var_88]
.text:00409A8E                 mov     ebx, [esp+0BCh+arg_4]
.text:00409A95                 mov     [esp+0BCh+var_44], esi
.text:00409A99                 cmp     esi, ebx
.text:00409A9B                 jb      short loc_409AB3
.text:00409A9D                 mov     eax, [esp+0BCh+var_34]
.text:00409AA4                 mov     ecx, [esp+0BCh+var_3C]
.text:00409AAB                 cmp     esi, eax
.text:00409AAD                 mov     [esp+0BCh+var_48], ecx
.text:00409AB1                 jbe     short loc_409ABB
.text:00409AB3
.text:00409AB3 loc_409AB3:                             ; CODE XREF: sub_4095E0+4BB↑j
.text:00409AB3                 mov     esi, [esp+0BCh+var_40]
.text:00409AB7                 mov     [esp+0BCh+var_48], esi
.text:00409ABB
.text:00409ABB loc_409ABB:                             ; CODE XREF: sub_4095E0+4D1↑j
.text:00409ABB                 mov     ebp, 1
.text:00409AC0                 cmp     ebp, [esp+0BCh+var_5C]
.text:00409AC4                 jnb     short loc_409AE9
.text:00409AC6
.text:00409AC6 loc_409AC6:                             ; CODE XREF: sub_4095E0+507↓j
.text:00409AC6                 mov     eax, [esp+0BCh+var_80]
.text:00409ACA                 mov     ecx, [esp+0BCh+var_68]
.text:00409ACE                 mov     ebx, [esp+0BCh+var_84]
.text:00409AD2                 mov     edi, [eax+ebp*4]
.text:00409AD5                 mov     [ecx+ebp*4], edi
.text:00409AD8                 mov     edx, [ebx+ebp*4]
.text:00409ADB                 mov     edi, [esp+0BCh+var_6C]
.text:00409ADF                 mov     [edi+ebp*4], edx
.text:00409AE2                 inc     ebp
.text:00409AE3                 cmp     ebp, [esp+0BCh+var_5C]
.text:00409AE7                 jb      short loc_409AC6
.text:00409AE9
.text:00409AE9 loc_409AE9:                             ; CODE XREF: sub_4095E0+281↑j
.text:00409AE9                                         ; sub_4095E0+4E4↑j ...
.text:00409AE9                 mov     ebp, [esp+0BCh+arg_18]
.text:00409AF0                 test    ebp, ebp
.text:00409AF2                 jz      loc_409D02
.text:00409AF8                 mov     edx, [esp+0BCh+arg_0]
.text:00409AFF                 movzx   eax, byte ptr [edx+1Ch]
.text:00409B03                 test    al, 10h
.text:00409B05                 jnz     loc_409D02
.text:00409B0B                 shr     al, 1
.text:00409B0D                 and     eax, 3
.text:00409B10                 jnz     loc_409D68
.text:00409B16                 mov     eax, [esp+0BCh+var_5C]
.text:00409B1A                 inc     eax
.text:00409B1B                 cmp     eax, 1Eh
.text:00409B1E                 jnb     short loc_409B25
.text:00409B20                 mov     eax, 1Eh
.text:00409B25
.text:00409B25 loc_409B25:                             ; CODE XREF: sub_4095E0+53E↑j
.text:00409B25                 mov     ebp, [esp+0BCh+arg_18]
.text:00409B2C                 mov     [ebp+0], eax
.text:00409B2F                 shl     eax, 2
.text:00409B32                 mov     [esp+0BCh+Size], eax ; Size
.text:00409B35                 call    malloc
.text:00409B3A                 mov     edi, [esp+0BCh+arg_18]
.text:00409B41                 mov     ebx, [edi]
.text:00409B43                 mov     [edi+4], eax
.text:00409B46                 shl     ebx, 2
.text:00409B49                 mov     [esp+0BCh+Size], ebx ; Size
.text:00409B4C                 call    malloc
.text:00409B51                 mov     ecx, [esp+0BCh+arg_18]
.text:00409B58                 mov     esi, [ecx+4]
.text:00409B5B                 mov     [ecx+8], eax
.text:00409B5E                 test    esi, esi
.text:00409B60                 jz      loc_409D61
.text:00409B66                 test    eax, eax
.text:00409B68                 jz      loc_409D61
.text:00409B6E                 mov     edx, [esp+0BCh+arg_0]
.text:00409B75                 movzx   ecx, byte ptr [edx+1Ch]
.text:00409B79                 and     cl, 0F9h
.text:00409B7C                 or      cl, 2
.text:00409B7F                 mov     [edx+1Ch], cl
.text:00409B82
.text:00409B82 loc_409B82:                             ; CODE XREF: sub_4095E0+7ED↓j
.text:00409B82                 mov     ecx, [esp+0BCh+arg_18]
.text:00409B89                 mov     edx, [ecx]
.text:00409B8B
.text:00409B8B loc_409B8B:                             ; CODE XREF: sub_4095E0+794↓j
.text:00409B8B                                         ; sub_4095E0+7A9↓j
.text:00409B8B                 test    edx, edx
.text:00409B8D                 jz      short loc_409BD8
.text:00409B8F                 mov     esi, [esp+0BCh+arg_18]
.text:00409B96                 mov     edi, [esp+0BCh+var_3C]
.text:00409B9D                 mov     edx, [esp+0BCh+arg_14]
.text:00409BA4                 cmp     [esp+0BCh+var_48], edi
.text:00409BA8                 mov     ebp, [esi+4]
.text:00409BAB                 mov     [ebp+0], edx
.text:00409BAE                 mov     edx, [esi+8]
.text:00409BB1                 jz      loc_409D4F
.text:00409BB7                 mov     eax, [esp+0BCh+var_44]
.text:00409BBB                 mov     esi, [esp+0BCh+arg_C]
.text:00409BC2                 mov     ecx, [esp+0BCh+arg_8]
.text:00409BC9                 sub     eax, esi
.text:00409BCB                 add     eax, ecx
.text:00409BCD
.text:00409BCD loc_409BCD:                             ; CODE XREF: sub_4095E0+77C↓j
.text:00409BCD                 mov     [edx], eax
.text:00409BCF                 mov     edi, [esp+0BCh+arg_18]
.text:00409BD6                 mov     edx, [edi]
.text:00409BD8
.text:00409BD8 loc_409BD8:                             ; CODE XREF: sub_4095E0+5AD↑j
.text:00409BD8                 mov     ebp, 1
.text:00409BDD
.text:00409BDD loc_409BDD:                             ; CODE XREF: sub_4095E0+6A8↓j
.text:00409BDD                 cmp     edx, [esp+0BCh+var_5C]
.text:00409BE1                 mov     eax, edx
.text:00409BE3                 jbe     short loc_409BE9
.text:00409BE5                 mov     eax, [esp+0BCh+var_5C]
.text:00409BE9
.text:00409BE9 loc_409BE9:                             ; CODE XREF: sub_4095E0+603↑j
.text:00409BE9                 cmp     ebp, eax
.text:00409BEB                 jnb     loc_409CD3
.text:00409BF1                 mov     ebx, [esp+0BCh+var_68]
.text:00409BF5                 mov     eax, [ebx+ebp*4]
.text:00409BF8                 cmp     eax, offset unk_41B520
.text:00409BFD                 jz      loc_409CB6
.text:00409C03                 mov     esi, [esp+0BCh+var_6C]
.text:00409C07                 mov     edx, [esi+ebp*4]
.text:00409C0A                 cmp     edx, offset unk_41B520
.text:00409C10                 jz      loc_409CB6
.text:00409C16                 mov     edi, [esp+0BCh+arg_8]
.text:00409C1D                 mov     ebx, [esp+0BCh+arg_18]
.text:00409C24                 test    edi, edi
.text:00409C26                 mov     ecx, [ebx+4]
.text:00409C29                 jz      short loc_409CA2
.text:00409C2B                 cmp     [esp+0BCh+arg_4], eax
.text:00409C32                 ja      short loc_409CA2
.text:00409C34                 cmp     eax, [esp+0BCh+var_34]
.text:00409C3B                 ja      short loc_409CA2
.text:00409C3D                 mov     esi, [esp+0BCh+arg_4]
.text:00409C44                 sub     eax, esi
.text:00409C46
.text:00409C46 loc_409C46:                             ; CODE XREF: sub_4095E0+6D4↓j
.text:00409C46                 mov     [ecx+ebp*4], eax
.text:00409C49                 mov     esi, [esp+0BCh+arg_18]
.text:00409C50                 mov     eax, [esp+0BCh+arg_8]
.text:00409C57                 mov     ecx, [esi+8]
.text:00409C5A                 test    eax, eax
.text:00409C5C                 jz      short loc_409C8D
.text:00409C5E                 cmp     [esp+0BCh+arg_4], edx
.text:00409C65                 ja      short loc_409C8D
.text:00409C67                 cmp     edx, [esp+0BCh+var_34]
.text:00409C6E                 ja      short loc_409C8D
.text:00409C70                 mov     eax, edx
.text:00409C72                 mov     edx, [esp+0BCh+arg_4]
.text:00409C79                 sub     eax, edx
.text:00409C7B
.text:00409C7B loc_409C7B:                             ; CODE XREF: sub_4095E0+6C0↓j
.text:00409C7B                 mov     [ecx+ebp*4], eax
.text:00409C7E
.text:00409C7E loc_409C7E:                             ; CODE XREF: sub_4095E0+6F1↓j
.text:00409C7E                 mov     ecx, [esp+0BCh+arg_18]
.text:00409C85                 inc     ebp
.text:00409C86                 mov     edx, [ecx]
.text:00409C88                 jmp     loc_409BDD
.text:00409C8D ; ---------------------------------------------------------------------------
.text:00409C8D
.text:00409C8D loc_409C8D:                             ; CODE XREF: sub_4095E0+67C↑j
.text:00409C8D                                         ; sub_4095E0+685↑j ...
.text:00409C8D                 mov     eax, [esp+0BCh+arg_C]
.text:00409C94                 mov     edi, [esp+0BCh+arg_8]
.text:00409C9B                 sub     edx, eax
.text:00409C9D                 lea     eax, [edi+edx]
.text:00409CA0                 jmp     short loc_409C7B
.text:00409CA2 ; ---------------------------------------------------------------------------
.text:00409CA2
.text:00409CA2 loc_409CA2:                             ; CODE XREF: sub_4095E0+649↑j
.text:00409CA2                                         ; sub_4095E0+652↑j ...
.text:00409CA2                 mov     ebx, [esp+0BCh+arg_C]
.text:00409CA9                 mov     edi, [esp+0BCh+arg_8]
.text:00409CB0                 sub     eax, ebx
.text:00409CB2                 add     eax, edi
.text:00409CB4                 jmp     short loc_409C46
.text:00409CB6 ; ---------------------------------------------------------------------------
.text:00409CB6
.text:00409CB6 loc_409CB6:                             ; CODE XREF: sub_4095E0+61D↑j
.text:00409CB6                                         ; sub_4095E0+630↑j
.text:00409CB6                 mov     eax, [esp+0BCh+arg_18]
.text:00409CBD                 mov     ecx, [eax+4]
.text:00409CC0                 mov     edx, [eax+8]
.text:00409CC3                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:00409CCA                 mov     dword ptr [ecx+ebp*4], 0FFFFFFFFh
.text:00409CD1                 jmp     short loc_409C7E
.text:00409CD3 ; ---------------------------------------------------------------------------
.text:00409CD3
.text:00409CD3 loc_409CD3:                             ; CODE XREF: sub_4095E0+60B↑j
.text:00409CD3                 mov     ebp, [esp+0BCh+var_5C]
.text:00409CD7                 cmp     ebp, edx
.text:00409CD9                 jnb     short loc_409D02
.text:00409CDB                 mov     esi, [esp+0BCh+arg_18]
.text:00409CE2                 mov     edx, [esi+4]
.text:00409CE5                 mov     eax, [esi+8]
.text:00409CE8
.text:00409CE8 loc_409CE8:                             ; CODE XREF: sub_4095E0+720↓j
.text:00409CE8                 mov     dword ptr [eax+ebp*4], 0FFFFFFFFh
.text:00409CEF                 mov     edi, [esp+0BCh+arg_18]
.text:00409CF6                 mov     dword ptr [edx+ebp*4], 0FFFFFFFFh
.text:00409CFD                 inc     ebp
.text:00409CFE                 cmp     ebp, [edi]
.text:00409D00                 jb      short loc_409CE8
.text:00409D02
.text:00409D02 loc_409D02:                             ; CODE XREF: sub_4095E0+512↑j
.text:00409D02                                         ; sub_4095E0+525↑j ...
.text:00409D02                 mov     eax, [esp+0BCh+var_44]
.text:00409D06                 mov     ecx, [esp+0BCh+arg_14]
.text:00409D0D                 mov     ebp, [esp+0BCh+var_3C]
.text:00409D14                 sub     eax, ecx
.text:00409D16                 cmp     [esp+0BCh+var_48], ebp
.text:00409D1A                 jz      short loc_409D42
.text:00409D1C                 mov     ebx, [esp+0BCh+arg_8]
.text:00409D23                 mov     ebp, eax
.text:00409D25                 sub     [esp+0BCh+arg_C], ebx
.text:00409D2C                 mov     edx, [esp+0BCh+arg_C]
.text:00409D33                 sub     ebp, edx
.text:00409D35
.text:00409D35 loc_409D35:                             ; CODE XREF: sub_4095E0+76D↓j
.text:00409D35                 mov     eax, ebp
.text:00409D37
.text:00409D37 loc_409D37:                             ; CODE XREF: sub_4095E0+89↑j
.text:00409D37                                         ; sub_4095E0+786↓j ...
.text:00409D37                 add     esp, 0ACh
.text:00409D3D                 pop     ebx
.text:00409D3E                 pop     esi
.text:00409D3F                 pop     edi
.text:00409D40                 pop     ebp
.text:00409D41                 retn
.text:00409D42 ; ---------------------------------------------------------------------------
.text:00409D42
.text:00409D42 loc_409D42:                             ; CODE XREF: sub_4095E0+73A↑j
.text:00409D42                 mov     esi, [esp+0BCh+arg_4]
.text:00409D49                 mov     ebp, eax
.text:00409D4B                 sub     ebp, esi
.text:00409D4D                 jmp     short loc_409D35
.text:00409D4F ; ---------------------------------------------------------------------------
.text:00409D4F
.text:00409D4F loc_409D4F:                             ; CODE XREF: sub_4095E0+5D1↑j
.text:00409D4F                 mov     eax, [esp+0BCh+var_44]
.text:00409D53                 mov     ebx, [esp+0BCh+arg_4]
.text:00409D5A                 sub     eax, ebx
.text:00409D5C                 jmp     loc_409BCD
.text:00409D61 ; ---------------------------------------------------------------------------
.text:00409D61
.text:00409D61 loc_409D61:                             ; CODE XREF: sub_4095E0+580↑j
.text:00409D61                                         ; sub_4095E0+588↑j ...
.text:00409D61                 mov     eax, 0FFFFFFFEh
.text:00409D66                 jmp     short loc_409D37
.text:00409D68 ; ---------------------------------------------------------------------------
.text:00409D68
.text:00409D68 loc_409D68:                             ; CODE XREF: sub_4095E0+530↑j
.text:00409D68                 dec     eax
.text:00409D69                 jz      short loc_409D79
.text:00409D6B                 mov     eax, [esp+0BCh+arg_18]
.text:00409D72                 mov     edx, [eax]
.text:00409D74                 jmp     loc_409B8B
.text:00409D79 ; ---------------------------------------------------------------------------
.text:00409D79
.text:00409D79 loc_409D79:                             ; CODE XREF: sub_4095E0+789↑j
.text:00409D79                 mov     ecx, [esp+0BCh+arg_18]
.text:00409D80                 mov     eax, [esp+0BCh+var_5C]
.text:00409D84                 mov     edx, [ecx]
.text:00409D86                 inc     eax
.text:00409D87                 cmp     edx, eax
.text:00409D89                 jnb     loc_409B8B
.text:00409D8F                 mov     [ecx], eax
.text:00409D91                 shl     eax, 2
.text:00409D94                 mov     [esp+0BCh+var_B8], eax ; Size
.text:00409D98                 mov     edx, [ecx+4]
.text:00409D9B                 mov     [esp+0BCh+Size], edx ; Block
.text:00409D9E                 call    realloc
.text:00409DA3                 mov     edi, [esp+0BCh+arg_18]
.text:00409DAA                 mov     ebp, [edi]
.text:00409DAC                 mov     [edi+4], eax
.text:00409DAF                 shl     ebp, 2
.text:00409DB2                 mov     [esp+0BCh+var_B8], ebp ; Size
.text:00409DB6                 mov     ebx, [edi+8]
.text:00409DB9                 mov     [esp+0BCh+Size], ebx ; Block
.text:00409DBC                 call    realloc
.text:00409DC1                 mov     [edi+8], eax
.text:00409DC4                 mov     esi, [edi+4]
.text:00409DC7                 test    esi, esi
.text:00409DC9                 jz      short loc_409D61
.text:00409DCB                 test    eax, eax
.text:00409DCD                 jnz     loc_409B82
.text:00409DD3                 jmp     short loc_409D61
.text:00409DD5 ; ---------------------------------------------------------------------------
.text:00409DD5
.text:00409DD5 loc_409DD5:                             ; CODE XREF: sub_4095E0+107↑j
.text:00409DD5                                         ; sub_4095E0+124↑j ...
.text:00409DD5                 mov     eax, 0FFFFFFFFh
.text:00409DDA                 jmp     loc_409D37
.text:00409DDF ; ---------------------------------------------------------------------------
.text:00409DDF
.text:00409DDF loc_409DDF:                             ; CODE XREF: sub_4095E0+2D8↑j
.text:00409DDF                 mov     ebp, [esp+0BCh+var_7C]
.text:00409DE3                 test    ebp, ebp
.text:00409DE5                 jz      loc_409AE9
.text:00409DEB                 test    al, al
.text:00409DED                 jnz     loc_409AE9
.text:00409DF3                 jmp     loc_409A8A
.text:00409DF8 ; ---------------------------------------------------------------------------
.text:00409DF8
.text:00409DF8 loc_409DF8:                             ; CODE XREF: sub_4095E0+2BE↑j
.text:00409DF8                 mov     ebx, [esp+0BCh+var_3C]
.text:00409DFF                 cmp     [esp+0BCh+var_48], ebx
.text:00409E03                 setnz   al
.text:00409E06                 jmp     loc_4098AF
.text:00409E0B ; ---------------------------------------------------------------------------
.text:00409E0B
.text:00409E0B loc_409E0B:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:00409E0B                                         ; sub_4095E0+898↓j ...
.text:00409E0B                 mov     edx, [esp+0BCh+var_50] ; jumptable 00409857 case 0
.text:00409E0B                                         ; jumptable 0040A1D6 case 0
.text:00409E0B                                         ; jumptable 0040A2A8 case 0
.text:00409E0F                 mov     eax, offset loc_409859
.text:00409E14                 cmp     [esp+0BCh+var_4C], edx
.text:00409E18                 jnz     loc_409843
.text:00409E1E                 jmp     loc_409857
.text:00409E23 ; ---------------------------------------------------------------------------
.text:00409E23
.text:00409E23 loc_409E23:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:00409E23                                         ; sub_4095E0+BF6↓j ...
.text:00409E23                 jmp     loc_409AE9      ; jumptable 00409857 case 1
.text:00409E23                                         ; jumptable 0040A1D6 case 1
.text:00409E23                                         ; jumptable 0040A2A8 case 1
.text:00409E28 ; ---------------------------------------------------------------------------
.text:00409E28
.text:00409E28 loc_409E28:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:00409E28                                         ; sub_4095E0+BF6↓j ...
.text:00409E28                 mov     eax, [esp+0BCh+var_4C] ; jumptable 00409857 case 2
.text:00409E28                                         ; jumptable 0040A1D6 case 2
.text:00409E28                                         ; jumptable 0040A2A8 case 2
.text:00409E2C                 mov     edi, [esp+0BCh+var_58]
.text:00409E30                 movzx   ebp, byte ptr [eax]
.text:00409E33                 inc     eax
.text:00409E34                 test    edi, edi
.text:00409E36                 mov     [esp+0BCh+var_4C], eax
.text:00409E3A                 jz      loc_409EC9
.text:00409E40
.text:00409E40 loc_409E40:                             ; CODE XREF: sub_4095E0+890↓j
.text:00409E40                 mov     ecx, [esp+0BCh+var_48]
.text:00409E44                 cmp     [esp+0BCh+var_44], ecx
.text:00409E48                 jz      short loc_409EA6
.text:00409E4A
.text:00409E4A loc_409E4A:                             ; CODE XREF: sub_4095E0+8E7↓j
.text:00409E4A                 mov     ecx, [esp+0BCh+var_44]
.text:00409E4E                 mov     ebx, [esp+0BCh+var_4C]
.text:00409E52                 mov     edx, [esp+0BCh+var_58]
.text:00409E56                 movzx   edi, byte ptr [ecx]
.text:00409E59                 inc     ecx
.text:00409E5A                 movzx   eax, byte ptr [ebx]
.text:00409E5D                 inc     ebx
.text:00409E5E                 mov     [esp+0BCh+var_4C], ebx
.text:00409E62                 mov     [esp+0BCh+var_44], ecx
.text:00409E66                 cmp     [edi+edx], al
.text:00409E69                 jnz     loc_409A32
.text:00409E6F                 dec     ebp
.text:00409E70                 jnz     short loc_409E40
.text:00409E72
.text:00409E72 loc_409E72:                             ; CODE XREF: sub_4095E0+916↓j
.text:00409E72                 mov     ebp, [esp+0BCh+var_8C]
.text:00409E76                 test    ebp, ebp
.text:00409E78                 jnz     short loc_409E0B ; jumptable 00409857 case 0
.text:00409E78                                         ; jumptable 0040A1D6 case 0
.text:00409E78                                         ; jumptable 0040A2A8 case 0
.text:00409E7A                 mov     [esp+0BCh+var_8C], 1
.text:00409E82                 mov     eax, [esp+0BCh+var_60]
.text:00409E86                 mov     edx, [esp+0BCh+var_64]
.text:00409E8A                 cmp     eax, edx
.text:00409E8C                 ja      loc_409E0B      ; jumptable 00409857 case 0
.text:00409E8C                                         ; jumptable 0040A1D6 case 0
.text:00409E8C                                         ; jumptable 0040A2A8 case 0
.text:00409E92
.text:00409E92 loc_409E92:                             ; CODE XREF: sub_4095E0+8BF↓j
.text:00409E92                 mov     esi, [esp+0BCh+var_78]
.text:00409E96                 or      byte ptr [esi+eax*4], 18h
.text:00409E9A                 inc     eax
.text:00409E9B                 cmp     eax, [esp+0BCh+var_64]
.text:00409E9F                 jbe     short loc_409E92
.text:00409EA1                 jmp     loc_409E0B      ; jumptable 00409857 case 0
.text:00409EA1                                         ; jumptable 0040A1D6 case 0
.text:00409EA1                                         ; jumptable 0040A2A8 case 0
.text:00409EA6 ; ---------------------------------------------------------------------------
.text:00409EA6
.text:00409EA6 loc_409EA6:                             ; CODE XREF: sub_4095E0+868↑j
.text:00409EA6                                         ; sub_4095E0+8E5↓j
.text:00409EA6                 mov     edx, [esp+0BCh+var_40]
.text:00409EAA                 cmp     [esp+0BCh+var_48], edx
.text:00409EAE                 jz      loc_409A32
.text:00409EB4                 mov     [esp+0BCh+var_48], edx
.text:00409EB8                 mov     ebx, [esp+0BCh+arg_C]
.text:00409EBF                 cmp     ebx, edx
.text:00409EC1                 mov     [esp+0BCh+var_44], ebx
.text:00409EC5                 jz      short loc_409EA6
.text:00409EC7                 jmp     short loc_409E4A
.text:00409EC9 ; ---------------------------------------------------------------------------
.text:00409EC9
.text:00409EC9 loc_409EC9:                             ; CODE XREF: sub_4095E0+85A↑j
.text:00409EC9                                         ; sub_4095E0+914↓j
.text:00409EC9                 mov     esi, [esp+0BCh+var_48]
.text:00409ECD                 cmp     [esp+0BCh+var_44], esi
.text:00409ED1                 jz      short loc_409F00
.text:00409ED3
.text:00409ED3 loc_409ED3:                             ; CODE XREF: sub_4095E0+941↓j
.text:00409ED3                 mov     ebx, [esp+0BCh+var_4C]
.text:00409ED7                 mov     eax, [esp+0BCh+var_44]
.text:00409EDB                 movzx   edx, byte ptr [ebx]
.text:00409EDE                 inc     ebx
.text:00409EDF                 mov     [esp+0BCh+var_4C], ebx
.text:00409EE3                 movzx   ecx, byte ptr [eax]
.text:00409EE6                 inc     eax
.text:00409EE7                 mov     [esp+0BCh+var_44], eax
.text:00409EEB                 cmp     cl, dl
.text:00409EED                 jnz     loc_409A32
.text:00409EF3                 dec     ebp
.text:00409EF4                 jnz     short loc_409EC9
.text:00409EF6                 jmp     loc_409E72
.text:00409EF6 ; ---------------------------------------------------------------------------
.text:00409EFB                 align 10h
.text:00409F00
.text:00409F00 loc_409F00:                             ; CODE XREF: sub_4095E0+8F1↑j
.text:00409F00                                         ; sub_4095E0+93F↓j
.text:00409F00                 mov     esi, [esp+0BCh+var_40]
.text:00409F04                 cmp     [esp+0BCh+var_48], esi
.text:00409F08                 jz      loc_409A32
.text:00409F0E                 mov     [esp+0BCh+var_48], esi
.text:00409F12                 mov     edi, [esp+0BCh+arg_C]
.text:00409F19                 cmp     edi, esi
.text:00409F1B                 mov     [esp+0BCh+var_44], edi
.text:00409F1F                 jz      short loc_409F00
.text:00409F21                 jmp     short loc_409ED3
.text:00409F23 ; ---------------------------------------------------------------------------
.text:00409F23
.text:00409F23 loc_409F23:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:00409F23                                         ; sub_4095E0+BF6↓j ...
.text:00409F23                 mov     edi, [esp+0BCh+var_48] ; jumptable 00409857 case 3
.text:00409F23                                         ; jumptable 0040A1D6 case 3
.text:00409F23                                         ; jumptable 0040A2A8 case 3
.text:00409F27                 cmp     [esp+0BCh+var_44], edi
.text:00409F2B                 jz      loc_40B802
.text:00409F31
.text:00409F31 loc_409F31:                             ; CODE XREF: sub_4095E0+2243↓j
.text:00409F31                 mov     eax, [esp+0BCh+arg_0]
.text:00409F38                 test    byte ptr [eax+0Ch], 40h
.text:00409F3C                 jnz     short loc_409F60
.text:00409F3E                 mov     ebx, [esp+0BCh+var_58]
.text:00409F42                 test    ebx, ebx
.text:00409F44                 jz      loc_40B7F6
.text:00409F4A                 mov     esi, [esp+0BCh+var_44]
.text:00409F4E                 mov     edx, [esp+0BCh+var_58]
.text:00409F52                 movzx   ebp, byte ptr [esi]
.text:00409F55                 cmp     byte ptr [ebp+edx+0], 0Ah
.text:00409F5A
.text:00409F5A loc_409F5A:                             ; CODE XREF: sub_4095E0+221D↓j
.text:00409F5A                 jz      loc_409A32
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: sub_4095E0+95C↑j
.text:00409F60                 mov     ecx, [esp+0BCh+arg_0]
.text:00409F67                 cmp     byte ptr [ecx+0Ch], 0
.text:00409F6B                 jns     short loc_409F8F
.text:00409F6D                 mov     ebx, [esp+0BCh+var_58]
.text:00409F71                 test    ebx, ebx
.text:00409F73                 jz      loc_40B7EA
.text:00409F79                 mov     edx, [esp+0BCh+var_44]
.text:00409F7D                 mov     eax, [esp+0BCh+var_58]
.text:00409F81                 movzx   ebp, byte ptr [edx]
.text:00409F84                 cmp     byte ptr [ebp+eax+0], 0
.text:00409F89
.text:00409F89 loc_409F89:                             ; CODE XREF: sub_4095E0+2211↓j
.text:00409F89                 jz      loc_409A32
.text:00409F8F
.text:00409F8F loc_409F8F:                             ; CODE XREF: sub_4095E0+98B↑j
.text:00409F8F                 mov     esi, [esp+0BCh+var_8C]
.text:00409F93                 test    esi, esi
.text:00409F95                 jnz     short loc_409FBA
.text:00409F97                 mov     [esp+0BCh+var_8C], 1
.text:00409F9F                 mov     eax, [esp+0BCh+var_60]
.text:00409FA3                 mov     ecx, [esp+0BCh+var_64]
.text:00409FA7                 cmp     eax, ecx
.text:00409FA9                 ja      short loc_409FBA
.text:00409FAB
.text:00409FAB loc_409FAB:                             ; CODE XREF: sub_4095E0+9D8↓j
.text:00409FAB                 mov     ebx, [esp+0BCh+var_78]
.text:00409FAF                 or      byte ptr [ebx+eax*4], 18h
.text:00409FB3                 inc     eax
.text:00409FB4                 cmp     eax, [esp+0BCh+var_64]
.text:00409FB8                 jbe     short loc_409FAB
.text:00409FBA
.text:00409FBA loc_409FBA:                             ; CODE XREF: sub_4095E0+9B5↑j
.text:00409FBA                                         ; sub_4095E0+9C9↑j
.text:00409FBA                 inc     [esp+0BCh+var_44]
.text:00409FBE
.text:00409FBE loc_409FBE:                             ; CODE XREF: sub_4095E0:loc_40A084↓j
.text:00409FBE                                         ; sub_4095E0+B8C↓j ...
.text:00409FBE                 mov     edx, [esp+0BCh+var_50]
.text:00409FC2                 mov     eax, offset loc_409859
.text:00409FC7                 cmp     [esp+0BCh+var_4C], edx
.text:00409FCB                 jz      loc_409857
.text:00409FD1                 mov     esi, [esp+0BCh+var_4C]
.text:00409FD5
.text:00409FD5 loc_409FD5:                             ; CODE XREF: sub_4095E0+F64↓j
.text:00409FD5                 movzx   edi, byte ptr [esi]
.text:00409FD8                 inc     esi
.text:00409FD9                 mov     [esp+0BCh+var_4C], esi
.text:00409FDD                 mov     eax, ds:(jpt_409FE4-18h)[edi*4] ; switch 2 cases
.text:00409FE4                 jmp     eax             ; switch jump
.text:00409FE6 ; ---------------------------------------------------------------------------
.text:00409FE6
.text:00409FE6 loc_409FE6:                             ; DATA XREF: .text:004095D4↑o
.text:00409FE6                 mov     edx, [esp+0BCh+arg_8]
.text:00409FED                 test    edx, edx
.text:00409FEF                 jz      loc_40A0C2
.text:00409FF5                 mov     edi, [esp+0BCh+arg_4]
.text:00409FFC                 cmp     [esp+0BCh+var_44], edi
.text:0040A000
.text:0040A000 loc_40A000:                             ; CODE XREF: sub_4095E0+AED↓j
.text:0040A000                 jz      loc_409A32
.text:0040A006                 mov     ecx, [esp+0BCh+arg_10]
.text:0040A00D                 test    ecx, ecx
.text:0040A00F                 jz      loc_409A32
.text:0040A015                 mov     ebp, [esp+0BCh+var_38]
.text:0040A01C                 cmp     [esp+0BCh+var_44], ebp
.text:0040A020                 jz      loc_409A32
.text:0040A026                 mov     edx, [esp+0BCh+var_44]
.text:0040A02A                 dec     edx
.text:0040A02B                 cmp     edx, [esp+0BCh+var_34]
.text:0040A032                 jz      loc_40A0B6
.text:0040A038                 mov     ebx, [esp+0BCh+arg_C]
.text:0040A03F                 dec     ebx
.text:0040A040                 cmp     edx, ebx
.text:0040A042                 jz      short loc_40A0A9
.text:0040A044                 mov     edi, [esp+0BCh+var_44]
.text:0040A048                 movzx   eax, byte ptr [edi-1]
.text:0040A04C
.text:0040A04C loc_40A04C:                             ; CODE XREF: sub_4095E0+AD4↓j
.text:0040A04C                                         ; sub_4095E0+AE0↓j
.text:0040A04C                 cmp     ds:byte_41B420[eax], 1
.text:0040A053                 mov     eax, [esp+0BCh+var_34]
.text:0040A05A                 setz    dl
.text:0040A05D                 cmp     [esp+0BCh+var_44], eax
.text:0040A061                 jz      short loc_40A09D
.text:0040A063                 mov     ebp, [esp+0BCh+arg_C]
.text:0040A06A                 dec     ebp
.text:0040A06B                 cmp     [esp+0BCh+var_44], ebp
.text:0040A06F                 jz      short loc_40A090
.text:0040A071                 mov     esi, [esp+0BCh+var_44]
.text:0040A075                 movzx   eax, byte ptr [esi]
.text:0040A078
.text:0040A078 loc_40A078:                             ; CODE XREF: sub_4095E0+ABB↓j
.text:0040A078                                         ; sub_4095E0+AC7↓j
.text:0040A078                 cmp     ds:byte_41B420[eax], 1
.text:0040A07F                 setz    cl
.text:0040A082                 cmp     dl, cl
.text:0040A084
.text:0040A084 loc_40A084:                             ; CODE XREF: sub_4095E0+1A07↓j
.text:0040A084                 jz      loc_409FBE
.text:0040A08A                 jmp     loc_409A32
.text:0040A08A ; ---------------------------------------------------------------------------
.text:0040A08F                 align 10h
.text:0040A090
.text:0040A090 loc_40A090:                             ; CODE XREF: sub_4095E0+A8F↑j
.text:0040A090                 mov     ebx, [esp+0BCh+var_34]
.text:0040A097                 movzx   eax, byte ptr [ebx-1]
.text:0040A09B                 jmp     short loc_40A078
.text:0040A09D ; ---------------------------------------------------------------------------
.text:0040A09D
.text:0040A09D loc_40A09D:                             ; CODE XREF: sub_4095E0+A81↑j
.text:0040A09D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A0A4                 movzx   eax, byte ptr [ecx]
.text:0040A0A7                 jmp     short loc_40A078
.text:0040A0A9 ; ---------------------------------------------------------------------------
.text:0040A0A9
.text:0040A0A9 loc_40A0A9:                             ; CODE XREF: sub_4095E0+A62↑j
.text:0040A0A9                 mov     edx, [esp+0BCh+var_34]
.text:0040A0B0                 movzx   eax, byte ptr [edx-1]
.text:0040A0B4                 jmp     short loc_40A04C
.text:0040A0B6 ; ---------------------------------------------------------------------------
.text:0040A0B6
.text:0040A0B6 loc_40A0B6:                             ; CODE XREF: sub_4095E0+A52↑j
.text:0040A0B6                 mov     esi, [esp+0BCh+arg_C]
.text:0040A0BD                 movzx   eax, byte ptr [esi]
.text:0040A0C0                 jmp     short loc_40A04C
.text:0040A0C2 ; ---------------------------------------------------------------------------
.text:0040A0C2
.text:0040A0C2 loc_40A0C2:                             ; CODE XREF: sub_4095E0+A0F↑j
.text:0040A0C2                 mov     eax, [esp+0BCh+arg_C]
.text:0040A0C9                 cmp     [esp+0BCh+var_44], eax
.text:0040A0CD                 jmp     loc_40A000
.text:0040A0D2 ; ---------------------------------------------------------------------------
.text:0040A0D2
.text:0040A0D2 loc_40A0D2:                             ; DATA XREF: .text:004095D0↑o
.text:0040A0D2                 mov     esi, [esp+0BCh+arg_8]
.text:0040A0D9                 test    esi, esi
.text:0040A0DB                 jz      loc_40B7DA
.text:0040A0E1                 mov     ebp, [esp+0BCh+arg_4]
.text:0040A0E8                 cmp     [esp+0BCh+var_44], ebp
.text:0040A0EC
.text:0040A0EC loc_40A0EC:                             ; CODE XREF: sub_4095E0+2205↓j
.text:0040A0EC                 jz      loc_40A1B0
.text:0040A0F2                 mov     edi, [esp+0BCh+arg_10]
.text:0040A0F9                 test    edi, edi
.text:0040A0FB                 jz      loc_40A1B0
.text:0040A101                 mov     edx, [esp+0BCh+var_38]
.text:0040A108                 cmp     [esp+0BCh+var_44], edx
.text:0040A10C                 jz      loc_40A1B0
.text:0040A112                 mov     edx, [esp+0BCh+var_44]
.text:0040A116                 dec     edx
.text:0040A117                 cmp     edx, [esp+0BCh+var_34]
.text:0040A11E                 jz      short loc_40A19D
.text:0040A120                 mov     esi, [esp+0BCh+arg_C]
.text:0040A127                 dec     esi
.text:0040A128                 cmp     edx, esi
.text:0040A12A                 jz      short loc_40A190
.text:0040A12C                 mov     ebx, [esp+0BCh+var_44]
.text:0040A130                 movzx   eax, byte ptr [ebx-1]
.text:0040A134
.text:0040A134 loc_40A134:                             ; CODE XREF: sub_4095E0+BBB↓j
.text:0040A134                                         ; sub_4095E0+BC7↓j
.text:0040A134                 cmp     ds:byte_41B420[eax], 1
.text:0040A13B                 mov     eax, [esp+0BCh+var_34]
.text:0040A142                 setz    dl
.text:0040A145                 cmp     [esp+0BCh+var_44], eax
.text:0040A149                 jz      short loc_40A184
.text:0040A14B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A152                 dec     ecx
.text:0040A153                 cmp     [esp+0BCh+var_44], ecx
.text:0040A157                 jz      short loc_40A177
.text:0040A159                 mov     esi, [esp+0BCh+var_44]
.text:0040A15D                 movzx   eax, byte ptr [esi]
.text:0040A160
.text:0040A160 loc_40A160:                             ; CODE XREF: sub_4095E0+BA2↓j
.text:0040A160                                         ; sub_4095E0+BAE↓j
.text:0040A160                 cmp     ds:byte_41B420[eax], 1
.text:0040A167                 setz    bl
.text:0040A16A                 cmp     dl, bl
.text:0040A16C                 jnz     loc_409FBE
.text:0040A172                 jmp     loc_409A32
.text:0040A177 ; ---------------------------------------------------------------------------
.text:0040A177
.text:0040A177 loc_40A177:                             ; CODE XREF: sub_4095E0+B77↑j
.text:0040A177                 mov     ebp, [esp+0BCh+var_34]
.text:0040A17E                 movzx   eax, byte ptr [ebp-1]
.text:0040A182                 jmp     short loc_40A160
.text:0040A184 ; ---------------------------------------------------------------------------
.text:0040A184
.text:0040A184 loc_40A184:                             ; CODE XREF: sub_4095E0+B69↑j
.text:0040A184                 mov     edi, [esp+0BCh+arg_C]
.text:0040A18B                 movzx   eax, byte ptr [edi]
.text:0040A18E                 jmp     short loc_40A160
.text:0040A190 ; ---------------------------------------------------------------------------
.text:0040A190
.text:0040A190 loc_40A190:                             ; CODE XREF: sub_4095E0+B4A↑j
.text:0040A190                 mov     ebp, [esp+0BCh+var_34]
.text:0040A197                 movzx   eax, byte ptr [ebp-1]
.text:0040A19B                 jmp     short loc_40A134
.text:0040A19D ; ---------------------------------------------------------------------------
.text:0040A19D
.text:0040A19D loc_40A19D:                             ; CODE XREF: sub_4095E0+B3E↑j
.text:0040A19D                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A1A4                 movzx   eax, byte ptr [ecx]
.text:0040A1A7                 jmp     short loc_40A134
.text:0040A1A7 ; ---------------------------------------------------------------------------
.text:0040A1A9                 align 10h
.text:0040A1B0
.text:0040A1B0 loc_40A1B0:                             ; CODE XREF: sub_4095E0:loc_40A0EC↑j
.text:0040A1B0                                         ; sub_4095E0+B1B↑j ...
.text:0040A1B0                 mov     ebp, [esp+0BCh+var_50]
.text:0040A1B4                 mov     eax, offset loc_409859
.text:0040A1B9                 cmp     [esp+0BCh+var_4C], ebp
.text:0040A1BD                 jz      loc_409857
.text:0040A1C3                 mov     ebx, [esp+0BCh+var_4C]
.text:0040A1C7                 movzx   esi, byte ptr [ebx]
.text:0040A1CA                 inc     ebx
.text:0040A1CB                 mov     [esp+0BCh+var_4C], ebx
.text:0040A1CF                 mov     eax, ds:jpt_409857[esi*4] ; switch 6 cases
.text:0040A1D6                 jmp     eax             ; switch jump
.text:0040A1D8 ; ---------------------------------------------------------------------------
.text:0040A1D8
.text:0040A1D8 loc_40A1D8:                             ; DATA XREF: .text:004095CC↑o
.text:0040A1D8                 mov     ecx, [esp+0BCh+arg_8]
.text:0040A1DF                 test    ecx, ecx
.text:0040A1E1                 jz      loc_40B7CA
.text:0040A1E7                 mov     eax, [esp+0BCh+arg_4]
.text:0040A1EE                 cmp     [esp+0BCh+var_44], eax
.text:0040A1F2
.text:0040A1F2 loc_40A1F2:                             ; CODE XREF: sub_4095E0+21F5↓j
.text:0040A1F2                 jz      loc_409A32
.text:0040A1F8                 mov     edi, [esp+0BCh+arg_10]
.text:0040A1FF                 test    edi, edi
.text:0040A201                 jz      loc_409A32
.text:0040A207                 mov     edx, [esp+0BCh+var_44]
.text:0040A20B                 dec     edx
.text:0040A20C                 cmp     edx, [esp+0BCh+var_34]
.text:0040A213                 jz      loc_40B7BA
.text:0040A219                 mov     ebx, [esp+0BCh+arg_C]
.text:0040A220                 dec     ebx
.text:0040A221                 cmp     edx, ebx
.text:0040A223                 jz      loc_40B7AA
.text:0040A229                 mov     ecx, [esp+0BCh+var_44]
.text:0040A22D                 movzx   eax, byte ptr [ecx-1]
.text:0040A231
.text:0040A231 loc_40A231:                             ; CODE XREF: sub_4095E0+21D5↓j
.text:0040A231                                         ; sub_4095E0+21E5↓j
.text:0040A231                 cmp     ds:byte_41B420[eax], 1
.text:0040A238                 jnz     loc_409A32
.text:0040A23E                 mov     eax, [esp+0BCh+var_38]
.text:0040A245                 cmp     [esp+0BCh+var_44], eax
.text:0040A249                 jz      short loc_40A282
.text:0040A24B                 mov     edx, [esp+0BCh+var_34]
.text:0040A252                 cmp     [esp+0BCh+var_44], edx
.text:0040A256                 jz      loc_40B79B
.text:0040A25C                 mov     ebp, [esp+0BCh+arg_C]
.text:0040A263                 dec     ebp
.text:0040A264                 cmp     [esp+0BCh+var_44], ebp
.text:0040A268                 jz      loc_40B78B
.text:0040A26E                 mov     esi, [esp+0BCh+var_44]
.text:0040A272                 movzx   eax, byte ptr [esi]
.text:0040A275
.text:0040A275 loc_40A275:                             ; CODE XREF: sub_4095E0+21B6↓j
.text:0040A275                                         ; sub_4095E0+21C5↓j
.text:0040A275                 cmp     ds:byte_41B420[eax], 1
.text:0040A27C                 jz      loc_409A32
.text:0040A282
.text:0040A282 loc_40A282:                             ; CODE XREF: sub_4095E0+C69↑j
.text:0040A282                                         ; sub_4095E0+E23↓j ...
.text:0040A282                 mov     ecx, [esp+0BCh+var_50]
.text:0040A286                 mov     eax, offset loc_409859
.text:0040A28B                 cmp     [esp+0BCh+var_4C], ecx
.text:0040A28F                 jz      loc_409857
.text:0040A295                 mov     edi, [esp+0BCh+var_4C]
.text:0040A299                 movzx   edx, byte ptr [edi]
.text:0040A29C                 inc     edi
.text:0040A29D                 mov     [esp+0BCh+var_4C], edi
.text:0040A2A1                 mov     eax, ds:jpt_409857[edx*4] ; switch 6 cases
.text:0040A2A8                 jmp     eax             ; switch jump
.text:0040A2AA ; ---------------------------------------------------------------------------
.text:0040A2AA
.text:0040A2AA loc_40A2AA:                             ; DATA XREF: .text:004095C8↑o
.text:0040A2AA                 mov     ebp, [esp+0BCh+var_38]
.text:0040A2B1                 cmp     [esp+0BCh+var_44], ebp
.text:0040A2B5                 jz      loc_409A32
.text:0040A2BB                 mov     eax, [esp+0BCh+var_34]
.text:0040A2C2                 cmp     [esp+0BCh+var_44], eax
.text:0040A2C6                 jz      loc_40A387
.text:0040A2CC                 mov     esi, [esp+0BCh+arg_C]
.text:0040A2D3                 dec     esi
.text:0040A2D4                 cmp     [esp+0BCh+var_44], esi
.text:0040A2D8                 jz      loc_40A377
.text:0040A2DE                 mov     edx, [esp+0BCh+var_44]
.text:0040A2E2                 movzx   eax, byte ptr [edx]
.text:0040A2E5
.text:0040A2E5 loc_40A2E5:                             ; CODE XREF: sub_4095E0+DA2↓j
.text:0040A2E5                                         ; sub_4095E0+DB1↓j
.text:0040A2E5                 cmp     ds:byte_41B420[eax], 1
.text:0040A2EC                 jnz     loc_409A32
.text:0040A2F2                 mov     edi, [esp+0BCh+arg_8]
.text:0040A2F9                 test    edi, edi
.text:0040A2FB                 jz      short loc_40A36A
.text:0040A2FD                 mov     ebp, [esp+0BCh+arg_4]
.text:0040A304                 cmp     [esp+0BCh+var_44], ebp
.text:0040A308
.text:0040A308 loc_40A308:                             ; CODE XREF: sub_4095E0+D95↓j
.text:0040A308                 jz      loc_40A1B0
.text:0040A30E                 mov     ebx, [esp+0BCh+arg_10]
.text:0040A315                 test    ebx, ebx
.text:0040A317                 jz      loc_40A1B0
.text:0040A31D                 mov     edx, [esp+0BCh+var_44]
.text:0040A321                 dec     edx
.text:0040A322                 cmp     edx, [esp+0BCh+var_34]
.text:0040A329                 jz      short loc_40A35E
.text:0040A32B                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A332                 dec     ecx
.text:0040A333                 cmp     edx, ecx
.text:0040A335                 jz      short loc_40A351
.text:0040A337                 mov     edi, [esp+0BCh+var_44]
.text:0040A33B                 movzx   eax, byte ptr [edi-1]
.text:0040A33F
.text:0040A33F loc_40A33F:                             ; CODE XREF: sub_4095E0+D7C↓j
.text:0040A33F                                         ; sub_4095E0+D88↓j
.text:0040A33F                 cmp     ds:byte_41B420[eax], 1
.text:0040A346                 jnz     loc_40A1B0
.text:0040A34C                 jmp     loc_409A32
.text:0040A351 ; ---------------------------------------------------------------------------
.text:0040A351
.text:0040A351 loc_40A351:                             ; CODE XREF: sub_4095E0+D55↑j
.text:0040A351                 mov     edx, [esp+0BCh+var_34]
.text:0040A358                 movzx   eax, byte ptr [edx-1]
.text:0040A35C                 jmp     short loc_40A33F
.text:0040A35E ; ---------------------------------------------------------------------------
.text:0040A35E
.text:0040A35E loc_40A35E:                             ; CODE XREF: sub_4095E0+D49↑j
.text:0040A35E                 mov     esi, [esp+0BCh+arg_C]
.text:0040A365                 movzx   eax, byte ptr [esi]
.text:0040A368                 jmp     short loc_40A33F
.text:0040A36A ; ---------------------------------------------------------------------------
.text:0040A36A
.text:0040A36A loc_40A36A:                             ; CODE XREF: sub_4095E0+D1B↑j
.text:0040A36A                 mov     eax, [esp+0BCh+arg_C]
.text:0040A371                 cmp     [esp+0BCh+var_44], eax
.text:0040A375                 jmp     short loc_40A308
.text:0040A377 ; ---------------------------------------------------------------------------
.text:0040A377
.text:0040A377 loc_40A377:                             ; CODE XREF: sub_4095E0+CF8↑j
.text:0040A377                 mov     ecx, [esp+0BCh+var_34]
.text:0040A37E                 movzx   eax, byte ptr [ecx-1]
.text:0040A382                 jmp     loc_40A2E5
.text:0040A387 ; ---------------------------------------------------------------------------
.text:0040A387
.text:0040A387 loc_40A387:                             ; CODE XREF: sub_4095E0+CE6↑j
.text:0040A387                 mov     ebx, [esp+0BCh+arg_C]
.text:0040A38E                 movzx   eax, byte ptr [ebx]
.text:0040A391                 jmp     loc_40A2E5
.text:0040A396 ; ---------------------------------------------------------------------------
.text:0040A396
.text:0040A396 loc_40A396:                             ; DATA XREF: .text:004095C4↑o
.text:0040A396                 mov     ebp, [esp+0BCh+var_48]
.text:0040A39A                 cmp     [esp+0BCh+var_44], ebp
.text:0040A39E                 jz      loc_40A421
.text:0040A3A4
.text:0040A3A4 loc_40A3A4:                             ; CODE XREF: sub_4095E0+E62↓j
.text:0040A3A4                 mov     esi, [esp+0BCh+var_34]
.text:0040A3AB                 cmp     [esp+0BCh+var_44], esi
.text:0040A3AF                 jz      short loc_40A415
.text:0040A3B1                 mov     edi, [esp+0BCh+arg_C]
.text:0040A3B8                 dec     edi
.text:0040A3B9                 cmp     [esp+0BCh+var_44], edi
.text:0040A3BD                 jz      short loc_40A408
.text:0040A3BF                 mov     ebp, [esp+0BCh+var_44]
.text:0040A3C3                 movzx   eax, byte ptr [ebp+0]
.text:0040A3C7
.text:0040A3C7 loc_40A3C7:                             ; CODE XREF: sub_4095E0+E33↓j
.text:0040A3C7                                         ; sub_4095E0+E3F↓j
.text:0040A3C7                 cmp     ds:byte_41B420[eax], 1
.text:0040A3CE                 jz      loc_409A32
.text:0040A3D4                 mov     eax, [esp+0BCh+var_8C]
.text:0040A3D8                 test    eax, eax
.text:0040A3DA                 jnz     short loc_40A3FF
.text:0040A3DC                 mov     [esp+0BCh+var_8C], 1
.text:0040A3E4                 mov     eax, [esp+0BCh+var_60]
.text:0040A3E8                 mov     ebx, [esp+0BCh+var_64]
.text:0040A3EC                 cmp     eax, ebx
.text:0040A3EE                 ja      short loc_40A3FF
.text:0040A3F0
.text:0040A3F0 loc_40A3F0:                             ; CODE XREF: sub_4095E0+E1D↓j
.text:0040A3F0                 mov     esi, [esp+0BCh+var_78]
.text:0040A3F4                 or      byte ptr [esi+eax*4], 18h
.text:0040A3F8                 inc     eax
.text:0040A3F9                 cmp     eax, [esp+0BCh+var_64]
.text:0040A3FD                 jbe     short loc_40A3F0
.text:0040A3FF
.text:0040A3FF loc_40A3FF:                             ; CODE XREF: sub_4095E0+DFA↑j
.text:0040A3FF                                         ; sub_4095E0+E0E↑j ...
.text:0040A3FF                 inc     [esp+0BCh+var_44]
.text:0040A403                 jmp     loc_40A282
.text:0040A408 ; ---------------------------------------------------------------------------
.text:0040A408
.text:0040A408 loc_40A408:                             ; CODE XREF: sub_4095E0+DDD↑j
.text:0040A408                 mov     edx, [esp+0BCh+var_34]
.text:0040A40F                 movzx   eax, byte ptr [edx-1]
.text:0040A413                 jmp     short loc_40A3C7
.text:0040A415 ; ---------------------------------------------------------------------------
.text:0040A415
.text:0040A415 loc_40A415:                             ; CODE XREF: sub_4095E0+DCF↑j
.text:0040A415                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A41C                 movzx   eax, byte ptr [ecx]
.text:0040A41F                 jmp     short loc_40A3C7
.text:0040A421 ; ---------------------------------------------------------------------------
.text:0040A421
.text:0040A421 loc_40A421:                             ; CODE XREF: sub_4095E0+DBE↑j
.text:0040A421                                         ; sub_4095E0+E60↓j
.text:0040A421                 mov     eax, [esp+0BCh+var_40]
.text:0040A425                 cmp     [esp+0BCh+var_48], eax
.text:0040A429                 jz      loc_409A32
.text:0040A42F                 mov     [esp+0BCh+var_48], eax
.text:0040A433                 mov     ebx, [esp+0BCh+arg_C]
.text:0040A43A                 cmp     ebx, eax
.text:0040A43C                 mov     [esp+0BCh+var_44], ebx
.text:0040A440                 jz      short loc_40A421
.text:0040A442                 jmp     loc_40A3A4
.text:0040A447 ; ---------------------------------------------------------------------------
.text:0040A447
.text:0040A447 loc_40A447:                             ; DATA XREF: .text:004095C0↑o
.text:0040A447                 mov     eax, [esp+0BCh+var_48]
.text:0040A44B                 cmp     [esp+0BCh+var_44], eax
.text:0040A44F                 jz      loc_40A4D1
.text:0040A455
.text:0040A455 loc_40A455:                             ; CODE XREF: sub_4095E0+F12↓j
.text:0040A455                 mov     edx, [esp+0BCh+var_34]
.text:0040A45C                 cmp     [esp+0BCh+var_44], edx
.text:0040A460                 jz      short loc_40A4C5
.text:0040A462                 mov     ebp, [esp+0BCh+arg_C]
.text:0040A469                 dec     ebp
.text:0040A46A                 cmp     [esp+0BCh+var_44], ebp
.text:0040A46E                 jz      short loc_40A4B8
.text:0040A470                 mov     esi, [esp+0BCh+var_44]
.text:0040A474                 movzx   eax, byte ptr [esi]
.text:0040A477
.text:0040A477 loc_40A477:                             ; CODE XREF: sub_4095E0+EE3↓j
.text:0040A477                                         ; sub_4095E0+EEF↓j
.text:0040A477                 cmp     ds:byte_41B420[eax], 1
.text:0040A47E                 jnz     loc_409A32
.text:0040A484                 mov     eax, [esp+0BCh+var_8C]
.text:0040A488                 test    eax, eax
.text:0040A48A                 jnz     short loc_40A4AF
.text:0040A48C                 mov     [esp+0BCh+var_8C], 1
.text:0040A494                 mov     eax, [esp+0BCh+var_60]
.text:0040A498                 mov     ecx, [esp+0BCh+var_64]
.text:0040A49C                 cmp     eax, ecx
.text:0040A49E                 ja      short loc_40A4AF
.text:0040A4A0
.text:0040A4A0 loc_40A4A0:                             ; CODE XREF: sub_4095E0+ECD↓j
.text:0040A4A0                 mov     edi, [esp+0BCh+var_78]
.text:0040A4A4                 or      byte ptr [edi+eax*4], 18h
.text:0040A4A8                 inc     eax
.text:0040A4A9                 cmp     eax, [esp+0BCh+var_64]
.text:0040A4AD                 jbe     short loc_40A4A0
.text:0040A4AF
.text:0040A4AF loc_40A4AF:                             ; CODE XREF: sub_4095E0+EAA↑j
.text:0040A4AF                                         ; sub_4095E0+EBE↑j
.text:0040A4AF                 inc     [esp+0BCh+var_44]
.text:0040A4B3                 jmp     loc_409E0B      ; jumptable 00409857 case 0
.text:0040A4B3                                         ; jumptable 0040A1D6 case 0
.text:0040A4B3                                         ; jumptable 0040A2A8 case 0
.text:0040A4B8 ; ---------------------------------------------------------------------------
.text:0040A4B8
.text:0040A4B8 loc_40A4B8:                             ; CODE XREF: sub_4095E0+E8E↑j
.text:0040A4B8                 mov     ebx, [esp+0BCh+var_34]
.text:0040A4BF                 movzx   eax, byte ptr [ebx-1]
.text:0040A4C3                 jmp     short loc_40A477
.text:0040A4C5 ; ---------------------------------------------------------------------------
.text:0040A4C5
.text:0040A4C5 loc_40A4C5:                             ; CODE XREF: sub_4095E0+E80↑j
.text:0040A4C5                 mov     edi, [esp+0BCh+arg_C]
.text:0040A4CC                 movzx   eax, byte ptr [edi]
.text:0040A4CF                 jmp     short loc_40A477
.text:0040A4D1 ; ---------------------------------------------------------------------------
.text:0040A4D1
.text:0040A4D1 loc_40A4D1:                             ; CODE XREF: sub_4095E0+E6F↑j
.text:0040A4D1                                         ; sub_4095E0+F10↓j
.text:0040A4D1                 mov     ebx, [esp+0BCh+var_40]
.text:0040A4D5                 cmp     [esp+0BCh+var_48], ebx
.text:0040A4D9                 jz      loc_409A32
.text:0040A4DF                 mov     [esp+0BCh+var_48], ebx
.text:0040A4E3                 mov     ecx, [esp+0BCh+arg_C]
.text:0040A4EA                 cmp     ecx, ebx
.text:0040A4EC                 mov     [esp+0BCh+var_44], ecx
.text:0040A4F0                 jz      short loc_40A4D1
.text:0040A4F2                 jmp     loc_40A455
.text:0040A4F7 ; ---------------------------------------------------------------------------
.text:0040A4F7
.text:0040A4F7 loc_40A4F7:                             ; DATA XREF: .text:004095BC↑o
.text:0040A4F7                 mov     esi, [esp+0BCh+var_4C]
.text:0040A4FB                 movsx   ecx, byte ptr [esi+1]
.text:0040A4FF                 movzx   eax, byte ptr [esi]
.text:0040A502                 add     esi, 2
.text:0040A505                 mov     ebp, esi
.text:0040A507                 shl     ecx, 8
.text:0040A50A                 lea     edi, [ecx+eax]
.text:0040A50D                 add     ebp, edi
.text:0040A50F                 mov     [esp+0BCh+var_30], ebp
.text:0040A516                 mov     eax, offset loc_409859
.text:0040A51B                 movsx   edx, byte ptr [esi+1]
.text:0040A51F                 movzx   ecx, byte ptr [esi]
.text:0040A522                 add     esi, 2
.text:0040A525                 mov     [esp+0BCh+var_4C], esi
.text:0040A529                 shl     edx, 8
.text:0040A52C                 add     ecx, edx
.text:0040A52E                 mov     [ebp+0], cl
.text:0040A531                 mov     edi, [esp+0BCh+var_30]
.text:0040A538                 sar     ecx, 8
.text:0040A53B                 mov     [edi+1], cl
.text:0040A53E                 mov     edx, [esp+0BCh+var_50]
.text:0040A542                 cmp     esi, edx
.text:0040A544                 jnz     loc_409FD5
.text:0040A54A                 jmp     loc_409857
.text:0040A54F ; ---------------------------------------------------------------------------
.text:0040A54F
.text:0040A54F loc_40A54F:                             ; DATA XREF: .text:004095B8↑o
.text:0040A54F                 mov     esi, [esp+0BCh+var_4C]
.text:0040A553                 movsx   edi, byte ptr [esi+3]
.text:0040A557                 movzx   ebp, byte ptr [esi+2]
.text:0040A55B                 shl     edi, 8
.text:0040A55E                 add     ebp, edi
.text:0040A560                 jnz     short loc_40A56C
.text:0040A562                 add     [esp+0BCh+var_4C], 4
.text:0040A567                 jmp     loc_409E0B      ; jumptable 00409857 case 0
.text:0040A567                                         ; jumptable 0040A1D6 case 0
.text:0040A567                                         ; jumptable 0040A2A8 case 0
.text:0040A56C ; ---------------------------------------------------------------------------
.text:0040A56C
.text:0040A56C loc_40A56C:                             ; CODE XREF: sub_4095E0+F80↑j
.text:0040A56C                 dec     ebp
.text:0040A56D                 mov     ebx, ebp
.text:0040A56F                 sar     ebp, 8
.text:0040A572                 mov     [esi+2], bl
.text:0040A575                 mov     ecx, ebp
.text:0040A577                 mov     [esi+3], cl
.text:0040A57A
.text:0040A57A loc_40A57A:                             ; CODE XREF: sub_4095E0+14FE↓j
.text:0040A57A                                         ; sub_4095E0+15A0↓j ...
.text:0040A57A                 mov     ebx, [esp+0BCh+var_4C]
.text:0040A57E                 movsx   ecx, byte ptr [ebx+1]
.text:0040A582                 movzx   edx, byte ptr [ebx]
.text:0040A585                 shl     ecx, 8
.text:0040A588                 lea     esi, [ecx+edx]
.text:0040A58B                 lea     edi, [esi+ebx+2]
.text:0040A58F                 mov     [esp+0BCh+var_4C], edi
.text:0040A593                 jmp     loc_409FBE
.text:0040A598 ; ---------------------------------------------------------------------------
.text:0040A598
.text:0040A598 loc_40A598:                             ; DATA XREF: .text:004095B4↑o
.text:0040A598                 mov     ecx, [esp+0BCh+var_4C]
.text:0040A59C                 movsx   ebx, byte ptr [ecx+3]
.text:0040A5A0                 movzx   ebp, byte ptr [ecx+2]
.text:0040A5A4                 shl     ebx, 8
.text:0040A5A7                 add     ebp, ebx
.text:0040A5A9                 test    ebp, ebp
.text:0040A5AB                 jle     short loc_40A5C9
.text:0040A5AD                 dec     ebp
.text:0040A5AE                 add     ecx, 2
.text:0040A5B1                 mov     eax, ebp
.text:0040A5B3                 mov     [ecx], al
.text:0040A5B5                 sar     ebp, 8
.text:0040A5B8                 mov     edx, ebp
.text:0040A5BA                 mov     [ecx+1], dl
.text:0040A5BD                 add     ecx, 2
.text:0040A5C0                 mov     [esp+0BCh+var_4C], ecx
.text:0040A5C4                 jmp     loc_409E0B      ; jumptable 00409857 case 0
.text:0040A5C4                                         ; jumptable 0040A1D6 case 0
.text:0040A5C4                                         ; jumptable 0040A2A8 case 0
.text:0040A5C9 ; ---------------------------------------------------------------------------
.text:0040A5C9
.text:0040A5C9 loc_40A5C9:                             ; CODE XREF: sub_4095E0+FCB↑j
.text:0040A5C9                 test    ebp, ebp
.text:0040A5CB                 jnz     loc_409E0B      ; jumptable 00409857 case 0
.text:0040A5CB                                         ; jumptable 0040A1D6 case 0
.text:0040A5CB                                         ; jumptable 0040A2A8 case 0
.text:0040A5D1                 mov     ebp, [esp+0BCh+var_4C]
.text:0040A5D5                 mov     byte ptr [ebp+2], 0
.text:0040A5D9                 mov     byte ptr [ebp+3], 0
.text:0040A5DD
.text:0040A5DD loc_40A5DD:                             ; CODE XREF: sub_4095E0:loc_40AEFC↓j
.text:0040A5DD                 mov     edx, [esp+0BCh+var_4C]
.text:0040A5E1                 movsx   ecx, byte ptr [edx+1]
.text:0040A5E5                 movzx   ebp, byte ptr [edx]
.text:0040A5E8                 add     edx, 2
.text:0040A5EB                 mov     ebx, edx
.text:0040A5ED                 mov     [esp+0BCh+var_4C], edx
.text:0040A5F1                 shl     ecx, 8
.text:0040A5F4                 add     ebp, ecx
.text:0040A5F6                 cmp     edx, [esp+0BCh+var_50]
.text:0040A5FA                 mov     [esp+0BCh+var_30], edx
.text:0040A601                 jnb     short loc_40A632
.text:0040A603                 cmp     byte ptr [edx], 0
.text:0040A606                 jnz     short loc_40A623
.text:0040A608                 lea     eax, [edx+1]
.text:0040A60B
.text:0040A60B loc_40A60B:                             ; CODE XREF: sub_4095E0+1041↓j
.text:0040A60B                 mov     [esp+0BCh+var_30], eax
.text:0040A612                 mov     ebx, eax
.text:0040A614                 lea     eax, [eax+1]
.text:0040A617                 cmp     ebx, [esp+0BCh+var_50]
.text:0040A61B                 jnb     short loc_40A632
.text:0040A61D                 cmp     byte ptr [eax-1], 0
.text:0040A621                 jz      short loc_40A60B
.text:0040A623
.text:0040A623 loc_40A623:                             ; CODE XREF: sub_4095E0+1026↑j
.text:0040A623                 cmp     ebx, [esp+0BCh+var_50]
.text:0040A627                 jnb     short loc_40A632
.text:0040A629                 cmp     byte ptr [ebx], 6
.text:0040A62C                 jz      loc_40A7BA
.text:0040A632
.text:0040A632 loc_40A632:                             ; CODE XREF: sub_4095E0+1021↑j
.text:0040A632                                         ; sub_4095E0+103B↑j ...
.text:0040A632                 mov     edi, [esp+0BCh+var_60]
.text:0040A636                 mov     ebx, [esp+0BCh+var_64]
.text:0040A63A                 mov     ecx, [esp+0BCh+var_28]
.text:0040A641                 mov     esi, [esp+0BCh+var_24]
.text:0040A648                 sub     ebx, edi
.text:0040A64A                 mov     edx, ecx
.text:0040A64C                 lea     edi, [ebx+ebx]
.text:0040A64F                 sub     edx, esi
.text:0040A651                 lea     eax, [ebx+edi+7]
.text:0040A655                 cmp     edx, eax
.text:0040A657                 jnb     short loc_40A6CD
.text:0040A659                 mov     edi, eax
.text:0040A65B
.text:0040A65B loc_40A65B:                             ; CODE XREF: sub_4095E0+10EB↓j
.text:0040A65B                 mov     edx, dword_41A060
.text:0040A661                 lea     ebx, [edx+edx*8]
.text:0040A664                 lea     esi, [edx+ebx*2]
.text:0040A667                 cmp     ecx, esi
.text:0040A669                 ja      loc_409D61
.text:0040A66F                 lea     edx, ds:0[ecx*8]
.text:0040A676                 mov     [esp+0BCh+Size], edx ; Size
.text:0040A679                 call    malloc
.text:0040A67E                 mov     [esp+0BCh+Size], eax ; void *
.text:0040A681                 mov     ebx, [esp+0BCh+var_28]
.text:0040A688                 mov     esi, [esp+0BCh+Src]
.text:0040A68F                 shl     ebx, 2
.text:0040A692                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040A696                 mov     [esp+0BCh+var_B8], esi ; Src
.text:0040A69A                 call    memcpy
.text:0040A69F                 mov     [esp+0BCh+Src], eax
.text:0040A6A6                 test    eax, eax
.text:0040A6A8                 jz      loc_409D61
.text:0040A6AE                 mov     ebx, [esp+0BCh+var_28]
.text:0040A6B5                 mov     esi, [esp+0BCh+var_24]
.text:0040A6BC                 add     ebx, ebx
.text:0040A6BE                 mov     [esp+0BCh+var_28], ebx
.text:0040A6C5                 mov     ecx, ebx
.text:0040A6C7                 sub     ebx, esi
.text:0040A6C9                 cmp     ebx, edi
.text:0040A6CB                 jb      short loc_40A65B
.text:0040A6CD
.text:0040A6CD loc_40A6CD:                             ; CODE XREF: sub_4095E0+1077↑j
.text:0040A6CD                 mov     ecx, [esp+0BCh+var_60]
.text:0040A6D1                 mov     eax, [esp+0BCh+var_64]
.text:0040A6D5                 cmp     ecx, eax
.text:0040A6D7                 ja      loc_40A7B1
.text:0040A6DD                 mov     ebx, [esp+0BCh+Src]
.text:0040A6E4
.text:0040A6E4 loc_40A6E4:                             ; CODE XREF: sub_4095E0+1162↓j
.text:0040A6E4                 mov     eax, [esp+0BCh+var_68]
.text:0040A6E8                 mov     edi, [eax+ecx*4]
.text:0040A6EB                 mov     [ebx+esi*4], edi
.text:0040A6EE                 mov     edx, [esp+0BCh+var_6C]
.text:0040A6F2                 mov     edi, [esp+0BCh+var_24]
.text:0040A6F9                 mov     ebx, [esp+0BCh+Src]
.text:0040A700                 mov     esi, [edx+ecx*4]
.text:0040A703                 inc     edi
.text:0040A704                 mov     [esp+0BCh+var_24], edi
.text:0040A70B                 mov     [ebx+edi*4], esi
.text:0040A70E                 mov     edi, [esp+0BCh+var_24]
.text:0040A715                 mov     eax, [esp+0BCh+var_78]
.text:0040A719                 mov     ebx, [esp+0BCh+Src]
.text:0040A720                 inc     edi
.text:0040A721                 mov     [esp+0BCh+var_24], edi
.text:0040A728                 mov     esi, [eax+ecx*4]
.text:0040A72B                 inc     ecx
.text:0040A72C                 mov     [ebx+edi*4], esi
.text:0040A72F                 mov     esi, [esp+0BCh+var_24]
.text:0040A736                 inc     esi
.text:0040A737                 cmp     ecx, [esp+0BCh+var_64]
.text:0040A73B                 mov     [esp+0BCh+var_24], esi
.text:0040A742                 jbe     short loc_40A6E4
.text:0040A744
.text:0040A744 loc_40A744:                             ; CODE XREF: sub_4095E0+11D8↓j
.text:0040A744                 mov     eax, [esp+0BCh+var_60]
.text:0040A748                 mov     [ebx+esi*4], eax
.text:0040A74B                 mov     ecx, [esp+0BCh+var_24]
.text:0040A752                 mov     edi, [esp+0BCh+var_64]
.text:0040A756                 mov     edx, [esp+0BCh+Src]
.text:0040A75D                 inc     ecx
.text:0040A75E                 mov     [esp+0BCh+var_24], ecx
.text:0040A765                 mov     [edx+ecx*4], edi
.text:0040A768                 mov     eax, [esp+0BCh+var_24]
.text:0040A76F                 mov     esi, [esp+0BCh+var_4C]
.text:0040A773                 mov     edi, [esp+0BCh+Src]
.text:0040A77A                 inc     eax
.text:0040A77B                 add     esi, ebp
.text:0040A77D                 mov     [esp+0BCh+var_24], eax
.text:0040A784                 mov     [edi+eax*4], esi
.text:0040A787                 mov     ecx, [esp+0BCh+var_24]
.text:0040A78E                 mov     ebp, [esp+0BCh+Src]
.text:0040A795                 mov     ebx, [esp+0BCh+var_44]
.text:0040A799                 inc     ecx
.text:0040A79A                 mov     [esp+0BCh+var_24], ecx
.text:0040A7A1                 mov     [ebp+ecx*4+0], ebx
.text:0040A7A5                 inc     [esp+0BCh+var_24]
.text:0040A7AC                 jmp     loc_409E0B      ; jumptable 00409857 case 0
.text:0040A7AC                                         ; jumptable 0040A1D6 case 0
.text:0040A7AC                                         ; jumptable 0040A2A8 case 0
.text:0040A7B1 ; ---------------------------------------------------------------------------
.text:0040A7B1
.text:0040A7B1 loc_40A7B1:                             ; CODE XREF: sub_4095E0+10F7↑j
.text:0040A7B1                 mov     ebx, [esp+0BCh+Src]
.text:0040A7B8                 jmp     short loc_40A744
.text:0040A7BA ; ---------------------------------------------------------------------------
.text:0040A7BA
.text:0040A7BA loc_40A7BA:                             ; CODE XREF: sub_4095E0+104C↑j
.text:0040A7BA                 movzx   edx, byte ptr [ebx+1]
.text:0040A7BE                 movzx   edi, byte ptr [ebx+2]
.text:0040A7C2                 cmp     [esp+0BCh+var_60], 101h
.text:0040A7CA                 lea     ebx, [edi+edx]
.text:0040A7CD                 mov     [esp+0BCh+var_64], ebx
.text:0040A7D1                 jnz     loc_40A632
.text:0040A7D7                 mov     [esp+0BCh+var_60], edx
.text:0040A7DB                 jmp     loc_40A632
.text:0040A7E0 ; ---------------------------------------------------------------------------
.text:0040A7E0
.text:0040A7E0 loc_40A7E0:                             ; DATA XREF: .text:004095B0↑o
.text:0040A7E0                 mov     eax, [esp+0BCh+var_60]
.text:0040A7E4                 mov     edx, [esp+0BCh+var_64]
.text:0040A7E8                 mov     ecx, [esp+0BCh+var_28]
.text:0040A7EF                 mov     esi, [esp+0BCh+var_24]
.text:0040A7F6                 sub     edx, eax
.text:0040A7F8                 mov     ebp, ecx
.text:0040A7FA                 lea     ebx, [edx+edx]
.text:0040A7FD                 sub     ebp, esi
.text:0040A7FF                 lea     eax, [edx+ebx+7]
.text:0040A803                 cmp     ebp, eax
.text:0040A805                 jnb     short loc_40A87B
.text:0040A807                 mov     edi, eax
.text:0040A809
.text:0040A809 loc_40A809:                             ; CODE XREF: sub_4095E0+1299↓j
.text:0040A809                 mov     edx, dword_41A060
.text:0040A80F                 lea     ebp, [edx+edx*8]
.text:0040A812                 lea     esi, [edx+ebp*2]
.text:0040A815                 cmp     ecx, esi
.text:0040A817                 ja      loc_409D61
.text:0040A81D                 lea     ebp, ds:0[ecx*8]
.text:0040A824                 mov     [esp+0BCh+Size], ebp ; Size
.text:0040A827                 call    malloc
.text:0040A82C                 mov     [esp+0BCh+Size], eax ; void *
.text:0040A82F                 mov     esi, [esp+0BCh+var_28]
.text:0040A836                 mov     ebx, [esp+0BCh+Src]
.text:0040A83D                 shl     esi, 2
.text:0040A840                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040A844                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040A848                 call    memcpy
.text:0040A84D                 mov     [esp+0BCh+Src], eax
.text:0040A854                 test    eax, eax
.text:0040A856                 jz      loc_409D61
.text:0040A85C                 mov     edx, [esp+0BCh+var_28]
.text:0040A863                 mov     esi, [esp+0BCh+var_24]
.text:0040A86A                 add     edx, edx
.text:0040A86C                 mov     [esp+0BCh+var_28], edx
.text:0040A873                 mov     ecx, edx
.text:0040A875                 sub     edx, esi
.text:0040A877                 cmp     edx, edi
.text:0040A879                 jb      short loc_40A809
.text:0040A87B
.text:0040A87B loc_40A87B:                             ; CODE XREF: sub_4095E0+1225↑j
.text:0040A87B                 mov     ecx, [esp+0BCh+var_60]
.text:0040A87F                 mov     edi, [esp+0BCh+var_64]
.text:0040A883                 cmp     ecx, edi
.text:0040A885                 ja      loc_40A95D
.text:0040A88B                 mov     ebx, [esp+0BCh+Src]
.text:0040A892
.text:0040A892 loc_40A892:                             ; CODE XREF: sub_4095E0+1310↓j
.text:0040A892                 mov     eax, [esp+0BCh+var_68]
.text:0040A896                 mov     edi, [eax+ecx*4]
.text:0040A899                 mov     [ebx+esi*4], edi
.text:0040A89C                 mov     edx, [esp+0BCh+var_6C]
.text:0040A8A0                 mov     edi, [esp+0BCh+var_24]
.text:0040A8A7                 mov     ebx, [esp+0BCh+Src]
.text:0040A8AE                 mov     ebp, [edx+ecx*4]
.text:0040A8B1                 inc     edi
.text:0040A8B2                 mov     [esp+0BCh+var_24], edi
.text:0040A8B9                 mov     [ebx+edi*4], ebp
.text:0040A8BC                 mov     ebp, [esp+0BCh+var_24]
.text:0040A8C3                 mov     eax, [esp+0BCh+var_78]
.text:0040A8C7                 mov     ebx, [esp+0BCh+Src]
.text:0040A8CE                 inc     ebp
.text:0040A8CF                 mov     [esp+0BCh+var_24], ebp
.text:0040A8D6                 mov     esi, [eax+ecx*4]
.text:0040A8D9                 inc     ecx
.text:0040A8DA                 mov     [ebx+ebp*4], esi
.text:0040A8DD                 mov     esi, [esp+0BCh+var_24]
.text:0040A8E4                 inc     esi
.text:0040A8E5                 cmp     ecx, [esp+0BCh+var_64]
.text:0040A8E9                 mov     [esp+0BCh+var_24], esi
.text:0040A8F0                 jbe     short loc_40A892
.text:0040A8F2
.text:0040A8F2 loc_40A8F2:                             ; CODE XREF: sub_4095E0+1384↓j
.text:0040A8F2                 mov     edi, [esp+0BCh+var_60]
.text:0040A8F6                 mov     [ebx+esi*4], edi
.text:0040A8F9                 mov     edx, [esp+0BCh+var_24]
.text:0040A900                 mov     ebp, [esp+0BCh+Src]
.text:0040A907                 mov     esi, [esp+0BCh+var_64]
.text:0040A90B                 inc     edx
.text:0040A90C                 mov     [esp+0BCh+var_24], edx
.text:0040A913                 mov     [ebp+edx*4+0], esi
.text:0040A917                 mov     ebx, [esp+0BCh+var_24]
.text:0040A91E                 mov     ecx, [esp+0BCh+Src]
.text:0040A925                 inc     ebx
.text:0040A926                 mov     [esp+0BCh+var_24], ebx
.text:0040A92D                 mov     dword ptr [ecx+ebx*4], 0
.text:0040A934
.text:0040A934 loc_40A934:                             ; CODE XREF: sub_4095E0+190E↓j
.text:0040A934                 mov     eax, [esp+0BCh+var_24]
.text:0040A93B                 mov     ecx, [esp+0BCh+Src]
.text:0040A942                 inc     eax
.text:0040A943                 mov     [esp+0BCh+var_24], eax
.text:0040A94A                 mov     dword ptr [ecx+eax*4], 0
.text:0040A951                 inc     [esp+0BCh+var_24]
.text:0040A958                 jmp     loc_40A282
.text:0040A95D ; ---------------------------------------------------------------------------
.text:0040A95D
.text:0040A95D loc_40A95D:                             ; CODE XREF: sub_4095E0+12A5↑j
.text:0040A95D                 mov     ebx, [esp+0BCh+Src]
.text:0040A964                 jmp     short loc_40A8F2
.text:0040A966 ; ---------------------------------------------------------------------------
.text:0040A966
.text:0040A966 loc_40A966:                             ; DATA XREF: .text:004095AC↑o
.text:0040A966                 mov     eax, [esp+0BCh+var_60]
.text:0040A96A                 mov     ebx, [esp+0BCh+var_64]
.text:0040A96E                 mov     ecx, [esp+0BCh+var_28]
.text:0040A975                 mov     esi, [esp+0BCh+var_24]
.text:0040A97C                 sub     ebx, eax
.text:0040A97E                 mov     edx, ecx
.text:0040A980                 lea     ebp, [ebx+ebx]
.text:0040A983                 sub     edx, esi
.text:0040A985                 lea     eax, [ebx+ebp+7]
.text:0040A989                 cmp     edx, eax
.text:0040A98B                 jnb     short loc_40AA01
.text:0040A98D                 mov     edi, eax
.text:0040A98F
.text:0040A98F loc_40A98F:                             ; CODE XREF: sub_4095E0+141F↓j
.text:0040A98F                 mov     edx, dword_41A060
.text:0040A995                 lea     ebx, [edx+edx*8]
.text:0040A998                 lea     esi, [edx+ebx*2]
.text:0040A99B                 cmp     ecx, esi
.text:0040A99D                 ja      loc_409D61
.text:0040A9A3                 lea     ebx, ds:0[ecx*8]
.text:0040A9AA                 mov     [esp+0BCh+Size], ebx ; Size
.text:0040A9AD                 call    malloc
.text:0040A9B2                 mov     [esp+0BCh+Size], eax ; void *
.text:0040A9B5                 mov     esi, [esp+0BCh+var_28]
.text:0040A9BC                 mov     ebp, [esp+0BCh+Src]
.text:0040A9C3                 shl     esi, 2
.text:0040A9C6                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040A9CA                 mov     [esp+0BCh+var_B8], ebp ; Src
.text:0040A9CE                 call    memcpy
.text:0040A9D3                 mov     [esp+0BCh+Src], eax
.text:0040A9DA                 test    eax, eax
.text:0040A9DC                 jz      loc_409D61
.text:0040A9E2                 mov     edx, [esp+0BCh+var_28]
.text:0040A9E9                 mov     esi, [esp+0BCh+var_24]
.text:0040A9F0                 add     edx, edx
.text:0040A9F2                 mov     [esp+0BCh+var_28], edx
.text:0040A9F9                 mov     ecx, edx
.text:0040A9FB                 sub     edx, esi
.text:0040A9FD                 cmp     edx, edi
.text:0040A9FF                 jb      short loc_40A98F
.text:0040AA01
.text:0040AA01 loc_40AA01:                             ; CODE XREF: sub_4095E0+13AB↑j
.text:0040AA01                 mov     ecx, [esp+0BCh+var_60]
.text:0040AA05                 mov     edi, [esp+0BCh+var_64]
.text:0040AA09                 cmp     ecx, edi
.text:0040AA0B                 ja      loc_40AAE3
.text:0040AA11                 mov     ebx, [esp+0BCh+Src]
.text:0040AA18
.text:0040AA18 loc_40AA18:                             ; CODE XREF: sub_4095E0+1496↓j
.text:0040AA18                 mov     eax, [esp+0BCh+var_68]
.text:0040AA1C                 mov     edi, [eax+ecx*4]
.text:0040AA1F                 mov     [ebx+esi*4], edi
.text:0040AA22                 mov     edx, [esp+0BCh+var_6C]
.text:0040AA26                 mov     edi, [esp+0BCh+var_24]
.text:0040AA2D                 mov     ebx, [esp+0BCh+Src]
.text:0040AA34                 mov     ebp, [edx+ecx*4]
.text:0040AA37                 inc     edi
.text:0040AA38                 mov     [esp+0BCh+var_24], edi
.text:0040AA3F                 mov     [ebx+edi*4], ebp
.text:0040AA42                 mov     ebp, [esp+0BCh+var_24]
.text:0040AA49                 mov     eax, [esp+0BCh+var_78]
.text:0040AA4D                 mov     ebx, [esp+0BCh+Src]
.text:0040AA54                 inc     ebp
.text:0040AA55                 mov     [esp+0BCh+var_24], ebp
.text:0040AA5C                 mov     esi, [eax+ecx*4]
.text:0040AA5F                 inc     ecx
.text:0040AA60                 mov     [ebx+ebp*4], esi
.text:0040AA63                 mov     esi, [esp+0BCh+var_24]
.text:0040AA6A                 inc     esi
.text:0040AA6B                 cmp     ecx, [esp+0BCh+var_64]
.text:0040AA6F                 mov     [esp+0BCh+var_24], esi
.text:0040AA76                 jbe     short loc_40AA18
.text:0040AA78
.text:0040AA78 loc_40AA78:                             ; CODE XREF: sub_4095E0+150A↓j
.text:0040AA78                 mov     ebp, [esp+0BCh+var_60]
.text:0040AA7C                 mov     [ebx+esi*4], ebp
.text:0040AA7F                 mov     eax, [esp+0BCh+var_24]
.text:0040AA86                 mov     edi, [esp+0BCh+Src]
.text:0040AA8D                 mov     esi, [esp+0BCh+var_64]
.text:0040AA91                 inc     eax
.text:0040AA92                 mov     [esp+0BCh+var_24], eax
.text:0040AA99                 mov     [edi+eax*4], esi
.text:0040AA9C                 mov     edx, [esp+0BCh+var_24]
.text:0040AAA3                 mov     ebp, [esp+0BCh+Src]
.text:0040AAAA                 inc     edx
.text:0040AAAB                 mov     [esp+0BCh+var_24], edx
.text:0040AAB2                 mov     dword ptr [ebp+edx*4+0], 0
.text:0040AABA                 mov     ebx, [esp+0BCh+var_24]
.text:0040AAC1                 mov     ecx, [esp+0BCh+Src]
.text:0040AAC8                 inc     ebx
.text:0040AAC9                 mov     [esp+0BCh+var_24], ebx
.text:0040AAD0                 mov     dword ptr [ecx+ebx*4], 0
.text:0040AAD7                 inc     [esp+0BCh+var_24]
.text:0040AADE                 jmp     loc_40A57A
.text:0040AAE3 ; ---------------------------------------------------------------------------
.text:0040AAE3
.text:0040AAE3 loc_40AAE3:                             ; CODE XREF: sub_4095E0+142B↑j
.text:0040AAE3                 mov     ebx, [esp+0BCh+Src]
.text:0040AAEA                 jmp     short loc_40AA78
.text:0040AAEC ; ---------------------------------------------------------------------------
.text:0040AAEC
.text:0040AAEC loc_40AAEC:                             ; DATA XREF: .text:004095A8↑o
.text:0040AAEC                 mov     esi, [esp+0BCh+var_4C]
.text:0040AAF0                 movsx   ebx, byte ptr [esi+1]
.text:0040AAF4                 movzx   ebp, byte ptr [esi]
.text:0040AAF7                 add     esi, 2
.text:0040AAFA                 mov     [esp+0BCh+var_4C], esi
.text:0040AAFE                 shl     ebx, 8
.text:0040AB01                 add     ebp, ebx
.text:0040AB03
.text:0040AB03 loc_40AB03:                             ; CODE XREF: sub_4095E0+153A↓j
.text:0040AB03                                         ; sub_4095E0+154C↓j
.text:0040AB03                 lea     edx, [esi+2]
.text:0040AB06                 cmp     edx, [esp+0BCh+var_50]
.text:0040AB0A                 jnb     short def_409FE4 ; jumptable 00409FE4 default case
.text:0040AB0C                 movzx   ecx, byte ptr [esi]
.text:0040AB0F                 sub     cl, 6
.text:0040AB12                 cmp     cl, 1
.text:0040AB15                 ja      short def_409FE4 ; jumptable 00409FE4 default case
.text:0040AB17                 add     esi, 3
.text:0040AB1A                 jmp     short loc_40AB03
.text:0040AB1C ; ---------------------------------------------------------------------------
.text:0040AB1C
.text:0040AB1C def_409FE4:                             ; CODE XREF: sub_4095E0+152A↑j
.text:0040AB1C                                         ; sub_4095E0+1535↑j
.text:0040AB1C                 lea     eax, [esi+6]    ; jumptable 00409FE4 default case
.text:0040AB1F                 cmp     eax, [esp+0BCh+var_50]
.text:0040AB23                 jnb     short loc_40AB2E
.text:0040AB25                 cmp     byte ptr [esi], 13h
.text:0040AB28                 jnz     short loc_40AB2E
.text:0040AB2A                 mov     esi, eax
.text:0040AB2C                 jmp     short loc_40AB03
.text:0040AB2E ; ---------------------------------------------------------------------------
.text:0040AB2E
.text:0040AB2E loc_40AB2E:                             ; CODE XREF: sub_4095E0+1543↑j
.text:0040AB2E                                         ; sub_4095E0+1548↑j
.text:0040AB2E                 mov     edi, [esp+0BCh+var_4C]
.text:0040AB32                 add     edi, ebp
.text:0040AB34                 cmp     esi, [esp+0BCh+var_50]
.text:0040AB38                 mov     [esp+0BCh+var_30], edi
.text:0040AB3F                 jz      loc_40ACC5
.text:0040AB45                 movzx   eax, byte ptr [esi]
.text:0040AB48                 cmp     al, 2
.text:0040AB4A                 jz      loc_40AD7B
.text:0040AB50                 mov     ebp, [esp+0BCh+arg_0]
.text:0040AB57                 test    byte ptr [ebp+1Ch], 80h
.text:0040AB5B                 jz      short loc_40AB65
.text:0040AB5D                 cmp     al, 0Ah
.text:0040AB5F                 jz      loc_40AD0B
.text:0040AB65
.text:0040AB65 loc_40AB65:                             ; CODE XREF: sub_4095E0+157B↑j
.text:0040AB65                 cmp     al, 4
.text:0040AB67                 jz      loc_40AC15
.text:0040AB6D
.text:0040AB6D loc_40AB6D:                             ; CODE XREF: sub_4095E0+1652↓j
.text:0040AB6D                                         ; sub_4095E0:loc_40AC74↓j ...
.text:0040AB6D                 sub     [esp+0BCh+var_4C], 2
.text:0040AB72                 mov     esi, [esp+0BCh+var_4C]
.text:0040AB76                 cmp     byte ptr [esi-1], 11h
.text:0040AB7A                 jz      short loc_40AB85
.text:0040AB7C                 mov     byte ptr [esi-1], 0Dh
.text:0040AB80                 jmp     loc_40A57A
.text:0040AB85 ; ---------------------------------------------------------------------------
.text:0040AB85
.text:0040AB85 loc_40AB85:                             ; CODE XREF: sub_4095E0+159A↑j
.text:0040AB85                                         ; DATA XREF: .text:004095A4↑o
.text:0040AB85                 mov     edi, [esp+0BCh+var_24]
.text:0040AB8C                 mov     ebx, [esp+0BCh+Src]
.text:0040AB93                 lea     eax, [edi-3]
.text:0040AB96                 mov     [esp+0BCh+var_24], eax
.text:0040AB9D                 lea     ecx, [edi-4]
.text:0040ABA0                 mov     ebp, [ebx+eax*4]
.text:0040ABA3                 mov     [esp+0BCh+var_24], ecx
.text:0040ABAA                 mov     edi, [ebx+ecx*4]
.text:0040ABAD                 mov     ecx, ebp
.text:0040ABAF                 cmp     ebp, edi
.text:0040ABB1                 jb      short loc_40AC08
.text:0040ABB3
.text:0040ABB3 loc_40ABB3:                             ; CODE XREF: sub_4095E0+1626↓j
.text:0040ABB3                 mov     eax, [esp+0BCh+var_24]
.text:0040ABBA                 dec     eax
.text:0040ABBB                 mov     [esp+0BCh+var_24], eax
.text:0040ABC2                 mov     edx, [ebx+eax*4]
.text:0040ABC5                 mov     ebx, [esp+0BCh+var_94]
.text:0040ABC9                 mov     [ebx+ecx*4], edx
.text:0040ABCC                 mov     edx, [esp+0BCh+var_24]
.text:0040ABD3                 mov     ebx, [esp+0BCh+Src]
.text:0040ABDA                 mov     esi, [esp+0BCh+var_90]
.text:0040ABDE                 lea     ebp, [edx-1]
.text:0040ABE1                 mov     [esp+0BCh+var_24], ebp
.text:0040ABE8                 mov     eax, [ebx+ebp*4]
.text:0040ABEB                 mov     ebp, [esp+0BCh+var_90]
.text:0040ABEF                 mov     [ebp+ecx*4+0], eax
.text:0040ABF3                 lea     ebp, [edx-2]
.text:0040ABF6                 mov     [esp+0BCh+var_24], ebp
.text:0040ABFD                 mov     edx, [ebx+ebp*4]
.text:0040AC00                 mov     [esi+ecx*4], edx
.text:0040AC03                 dec     ecx
.text:0040AC04                 cmp     ecx, edi
.text:0040AC06                 jnb     short loc_40ABB3
.text:0040AC08
.text:0040AC08 loc_40AC08:                             ; CODE XREF: sub_4095E0+15D1↑j
.text:0040AC08                 mov     [esp+0BCh+var_8C], 0
.text:0040AC10                 jmp     loc_40A57A
.text:0040AC15 ; ---------------------------------------------------------------------------
.text:0040AC15
.text:0040AC15 loc_40AC15:                             ; CODE XREF: sub_4095E0+1587↑j
.text:0040AC15                 mov     ebx, [esp+0BCh+var_30]
.text:0040AC1C                 mov     edi, ebx
.text:0040AC1E                 cmp     byte ptr [ebx+3], 2
.text:0040AC22                 jz      loc_40ACD2
.text:0040AC28
.text:0040AC28 loc_40AC28:                             ; CODE XREF: sub_4095E0+1718↓j
.text:0040AC28                 movzx   eax, byte ptr [edi+3]
.text:0040AC2C                 cmp     al, 5
.text:0040AC2E                 jz      short loc_40AC87
.text:0040AC30                 cmp     al, 4
.text:0040AC32                 jnz     loc_40AB6D
.text:0040AC38                 movzx   eax, byte ptr [esi+1]
.text:0040AC3C                 xor     edx, edx
.text:0040AC3E                 movzx   ebx, al
.text:0040AC41                 mov     [esp+0BCh+var_A5], al
.text:0040AC45                 cmp     edx, ebx
.text:0040AC47                 jge     short loc_40AC65
.text:0040AC49                 movzx   ecx, byte ptr [edi+4]
.text:0040AC4D                 cmp     edx, ecx
.text:0040AC4F                 jge     short loc_40AC65
.text:0040AC51
.text:0040AC51 loc_40AC51:                             ; CODE XREF: sub_4095E0+1683↓j
.text:0040AC51                 movzx   eax, byte ptr [edx+edi+5]
.text:0040AC56                 test    [edx+esi+2], al
.text:0040AC5A                 jnz     short loc_40AC65
.text:0040AC5C                 inc     edx
.text:0040AC5D                 cmp     edx, ebx
.text:0040AC5F                 jge     short loc_40AC65
.text:0040AC61                 cmp     edx, ecx
.text:0040AC63                 jl      short loc_40AC51
.text:0040AC65
.text:0040AC65 loc_40AC65:                             ; CODE XREF: sub_4095E0+1667↑j
.text:0040AC65                                         ; sub_4095E0+166F↑j ...
.text:0040AC65                 movzx   ebp, [esp+0BCh+var_A5]
.text:0040AC6A                 cmp     edx, ebp
.text:0040AC6C                 jz      short loc_40AC7A
.text:0040AC6E                 movzx   ebx, byte ptr [edi+4]
.text:0040AC72                 cmp     edx, ebx
.text:0040AC74
.text:0040AC74 loc_40AC74:                             ; CODE XREF: sub_4095E0+1784↓j
.text:0040AC74                 jnz     loc_40AB6D
.text:0040AC7A
.text:0040AC7A loc_40AC7A:                             ; CODE XREF: sub_4095E0+168C↑j
.text:0040AC7A                 mov     edx, [esp+0BCh+var_4C]
.text:0040AC7E                 mov     byte ptr [edx-3], 11h
.text:0040AC82                 jmp     loc_40AB6D
.text:0040AC87 ; ---------------------------------------------------------------------------
.text:0040AC87
.text:0040AC87 loc_40AC87:                             ; CODE XREF: sub_4095E0+164E↑j
.text:0040AC87                 movzx   ebx, byte ptr [esi+1]
.text:0040AC8B                 xor     ecx, ecx
.text:0040AC8D                 movzx   eax, bl
.text:0040AC90                 cmp     ecx, eax
.text:0040AC92                 jge     short loc_40ACBA
.text:0040AC94                 mov     ebp, eax
.text:0040AC96
.text:0040AC96 loc_40AC96:                             ; CODE XREF: sub_4095E0+16D8↓j
.text:0040AC96                 movzx   edx, byte ptr [ecx+esi+2]
.text:0040AC9B                 test    dl, dl
.text:0040AC9D                 jz      short loc_40ACB5
.text:0040AC9F                 movzx   eax, byte ptr [edi+4]
.text:0040ACA3                 cmp     ecx, eax
.text:0040ACA5                 jge     short loc_40ACBA
.text:0040ACA7                 movzx   eax, byte ptr [ecx+edi+5]
.text:0040ACAC                 movzx   edx, dl
.text:0040ACAF                 not     eax
.text:0040ACB1                 test    eax, edx
.text:0040ACB3                 jnz     short loc_40ACBA
.text:0040ACB5
.text:0040ACB5 loc_40ACB5:                             ; CODE XREF: sub_4095E0+16BD↑j
.text:0040ACB5                 inc     ecx
.text:0040ACB6                 cmp     ecx, ebp
.text:0040ACB8                 jl      short loc_40AC96
.text:0040ACBA
.text:0040ACBA loc_40ACBA:                             ; CODE XREF: sub_4095E0+16B2↑j
.text:0040ACBA                                         ; sub_4095E0+16C5↑j ...
.text:0040ACBA                 movzx   esi, bl
.text:0040ACBD                 cmp     ecx, esi
.text:0040ACBF                 jnz     loc_40AB6D
.text:0040ACC5
.text:0040ACC5 loc_40ACC5:                             ; CODE XREF: sub_4095E0+155F↑j
.text:0040ACC5                 mov     ecx, [esp+0BCh+var_4C]
.text:0040ACC9                 mov     byte ptr [ecx-3], 11h
.text:0040ACCD                 jmp     loc_40AB6D
.text:0040ACD2 ; ---------------------------------------------------------------------------
.text:0040ACD2
.text:0040ACD2 loc_40ACD2:                             ; CODE XREF: sub_4095E0+1642↑j
.text:0040ACD2                 movzx   edx, byte ptr [esi+1]
.text:0040ACD6                 movzx   ecx, byte ptr [ebx+5]
.text:0040ACDA                 shl     edx, 3
.text:0040ACDD                 movzx   ebp, cl
.text:0040ACE0                 cmp     edx, ebp
.text:0040ACE2                 jle     short loc_40ACFE
.text:0040ACE4                 mov     dl, cl
.text:0040ACE6                 shr     dl, 3
.text:0040ACE9                 and     ecx, 7
.text:0040ACEC                 movzx   ebx, dl
.text:0040ACEF                 movzx   eax, byte ptr [ebx+esi+2]
.text:0040ACF4                 sar     eax, cl
.text:0040ACF6                 test    al, 1
.text:0040ACF8                 jnz     loc_40AC28
.text:0040ACFE
.text:0040ACFE loc_40ACFE:                             ; CODE XREF: sub_4095E0+1702↑j
.text:0040ACFE                 mov     edi, [esp+0BCh+var_4C]
.text:0040AD02                 mov     byte ptr [edi-3], 11h
.text:0040AD06                 jmp     loc_40AB6D
.text:0040AD0B ; ---------------------------------------------------------------------------
.text:0040AD0B
.text:0040AD0B loc_40AD0B:                             ; CODE XREF: sub_4095E0+157F↑j
.text:0040AD0B                 mov     cl, 0Ah
.text:0040AD0D
.text:0040AD0D loc_40AD0D:                             ; CODE XREF: sub_4095E0+179F↓j
.text:0040AD0D                 mov     ebx, [esp+0BCh+var_30]
.text:0040AD14                 mov     esi, ebx
.text:0040AD16                 cmp     byte ptr [ebx+3], 2
.text:0040AD1A                 jz      short loc_40AD69
.text:0040AD1C
.text:0040AD1C loc_40AD1C:                             ; CODE XREF: sub_4095E0+178C↓j
.text:0040AD1C                 movzx   edx, byte ptr [esi+3]
.text:0040AD20                 mov     bl, dl
.text:0040AD22                 sub     bl, 4
.text:0040AD25                 cmp     bl, 1
.text:0040AD28                 ja      loc_40AB6D
.text:0040AD2E                 movzx   edi, byte ptr [esi+4]
.text:0040AD32                 xor     ebx, ebx
.text:0040AD34                 cmp     dl, 5
.text:0040AD37                 setz    bl
.text:0040AD3A                 movzx   eax, cl
.text:0040AD3D                 shl     edi, 3
.text:0040AD40                 cmp     eax, edi
.text:0040AD42                 jnb     short loc_40AD62
.text:0040AD44                 mov     al, cl
.text:0040AD46                 shr     al, 3
.text:0040AD49                 and     ecx, 7
.text:0040AD4C                 movzx   edx, al
.text:0040AD4F                 movzx   eax, byte ptr [edx+esi+5]
.text:0040AD54                 sar     eax, cl
.text:0040AD56                 test    al, 1
.text:0040AD58                 jz      short loc_40AD62
.text:0040AD5A                 test    ebx, ebx
.text:0040AD5C                 setz    cl
.text:0040AD5F                 movzx   ebx, cl
.text:0040AD62
.text:0040AD62 loc_40AD62:                             ; CODE XREF: sub_4095E0+1762↑j
.text:0040AD62                                         ; sub_4095E0+1778↑j
.text:0040AD62                 test    ebx, ebx
.text:0040AD64                 jmp     loc_40AC74
.text:0040AD69 ; ---------------------------------------------------------------------------
.text:0040AD69
.text:0040AD69 loc_40AD69:                             ; CODE XREF: sub_4095E0+173A↑j
.text:0040AD69                 cmp     [ebx+5], cl
.text:0040AD6C                 jz      short loc_40AD1C
.text:0040AD6E                 mov     esi, [esp+0BCh+var_4C]
.text:0040AD72                 mov     byte ptr [esi-3], 11h
.text:0040AD76                 jmp     loc_40AB6D
.text:0040AD7B ; ---------------------------------------------------------------------------
.text:0040AD7B
.text:0040AD7B loc_40AD7B:                             ; CODE XREF: sub_4095E0+156A↑j
.text:0040AD7B                 movzx   ecx, byte ptr [esi+2]
.text:0040AD7F                 jmp     short loc_40AD0D
.text:0040AD81 ; ---------------------------------------------------------------------------
.text:0040AD81
.text:0040AD81 loc_40AD81:                             ; DATA XREF: .text:004095A0↑o
.text:0040AD81                 mov     edx, [esp+0BCh+var_4C]
.text:0040AD85                 mov     edi, [esp+0BCh+var_60]
.text:0040AD89                 mov     ebx, [esp+0BCh+var_64]
.text:0040AD8D                 movsx   ecx, byte ptr [edx+1]
.text:0040AD91                 mov     esi, [esp+0BCh+var_24]
.text:0040AD98                 sub     ebx, edi
.text:0040AD9A                 movzx   ebp, byte ptr [edx]
.text:0040AD9D                 lea     edi, [ebx+ebx]
.text:0040ADA0                 shl     ecx, 8
.text:0040ADA3                 add     edx, 2
.text:0040ADA6                 lea     eax, [ebx+edi+7]
.text:0040ADAA                 mov     [esp+0BCh+var_4C], edx
.text:0040ADAE                 add     ebp, ecx
.text:0040ADB0                 mov     ecx, [esp+0BCh+var_28]
.text:0040ADB7                 mov     edx, ecx
.text:0040ADB9                 sub     edx, esi
.text:0040ADBB                 cmp     edx, eax
.text:0040ADBD                 jnb     short loc_40AE33
.text:0040ADBF                 mov     edi, eax
.text:0040ADC1
.text:0040ADC1 loc_40ADC1:                             ; CODE XREF: sub_4095E0+1851↓j
.text:0040ADC1                 mov     edx, dword_41A060
.text:0040ADC7                 lea     esi, [edx+edx*8]
.text:0040ADCA                 lea     ebx, [edx+esi*2]
.text:0040ADCD                 cmp     ecx, ebx
.text:0040ADCF                 ja      loc_409D61
.text:0040ADD5                 lea     edx, ds:0[ecx*8]
.text:0040ADDC                 mov     [esp+0BCh+Size], edx ; Size
.text:0040ADDF                 call    malloc
.text:0040ADE4                 mov     [esp+0BCh+Size], eax ; void *
.text:0040ADE7                 mov     esi, [esp+0BCh+var_28]
.text:0040ADEE                 mov     ebx, [esp+0BCh+Src]
.text:0040ADF5                 shl     esi, 2
.text:0040ADF8                 mov     [esp+0BCh+var_B4], esi ; Size
.text:0040ADFC                 mov     [esp+0BCh+var_B8], ebx ; Src
.text:0040AE00                 call    memcpy
.text:0040AE05                 mov     [esp+0BCh+Src], eax
.text:0040AE0C                 test    eax, eax
.text:0040AE0E                 jz      loc_409D61
.text:0040AE14                 mov     ebx, [esp+0BCh+var_28]
.text:0040AE1B                 mov     esi, [esp+0BCh+var_24]
.text:0040AE22                 add     ebx, ebx
.text:0040AE24                 mov     [esp+0BCh+var_28], ebx
.text:0040AE2B                 mov     ecx, ebx
.text:0040AE2D                 sub     ebx, esi
.text:0040AE2F                 cmp     ebx, edi
.text:0040AE31                 jb      short loc_40ADC1
.text:0040AE33
.text:0040AE33 loc_40AE33:                             ; CODE XREF: sub_4095E0+17DD↑j
.text:0040AE33                 mov     ecx, [esp+0BCh+var_60]
.text:0040AE37                 mov     eax, [esp+0BCh+var_64]
.text:0040AE3B                 cmp     ecx, eax
.text:0040AE3D                 ja      loc_40AEF3
.text:0040AE43                 mov     ebx, [esp+0BCh+Src]
.text:0040AE4A
.text:0040AE4A loc_40AE4A:                             ; CODE XREF: sub_4095E0+18C8↓j
.text:0040AE4A                 mov     eax, [esp+0BCh+var_68]
.text:0040AE4E                 mov     edi, [eax+ecx*4]
.text:0040AE51                 mov     [ebx+esi*4], edi
.text:0040AE54                 mov     edx, [esp+0BCh+var_6C]
.text:0040AE58                 mov     edi, [esp+0BCh+var_24]
.text:0040AE5F                 mov     ebx, [esp+0BCh+Src]
.text:0040AE66                 mov     esi, [edx+ecx*4]
.text:0040AE69                 inc     edi
.text:0040AE6A                 mov     [esp+0BCh+var_24], edi
.text:0040AE71                 mov     [ebx+edi*4], esi
.text:0040AE74                 mov     edi, [esp+0BCh+var_24]
.text:0040AE7B                 mov     eax, [esp+0BCh+var_78]
.text:0040AE7F                 mov     ebx, [esp+0BCh+Src]
.text:0040AE86                 inc     edi
.text:0040AE87                 mov     [esp+0BCh+var_24], edi
.text:0040AE8E                 mov     esi, [eax+ecx*4]
.text:0040AE91                 inc     ecx
.text:0040AE92                 mov     [ebx+edi*4], esi
.text:0040AE95                 mov     esi, [esp+0BCh+var_24]
.text:0040AE9C                 inc     esi
.text:0040AE9D                 cmp     ecx, [esp+0BCh+var_64]
.text:0040AEA1                 mov     [esp+0BCh+var_24], esi
.text:0040AEA8                 jbe     short loc_40AE4A
.text:0040AEAA
.text:0040AEAA loc_40AEAA:                             ; CODE XREF: sub_4095E0+191A↓j
.text:0040AEAA                 mov     eax, [esp+0BCh+var_60]
.text:0040AEAE                 mov     [ebx+esi*4], eax
.text:0040AEB1                 mov     edi, [esp+0BCh+var_24]
.text:0040AEB8                 mov     edx, [esp+0BCh+Src]
.text:0040AEBF                 mov     esi, [esp+0BCh+var_64]
.text:0040AEC3                 inc     edi
.text:0040AEC4                 mov     [esp+0BCh+var_24], edi
.text:0040AECB                 mov     [edx+edi*4], esi
.text:0040AECE                 mov     ebx, [esp+0BCh+var_4C]
.text:0040AED2                 mov     ecx, [esp+0BCh+var_24]
.text:0040AED9                 add     ebx, ebp
.text:0040AEDB                 mov     ebp, [esp+0BCh+Src]
.text:0040AEE2                 inc     ecx
.text:0040AEE3                 mov     [esp+0BCh+var_24], ecx
.text:0040AEEA                 mov     [ebp+ecx*4+0], ebx
.text:0040AEEE                 jmp     loc_40A934
.text:0040AEF3 ; ---------------------------------------------------------------------------
.text:0040AEF3
.text:0040AEF3 loc_40AEF3:                             ; CODE XREF: sub_4095E0+185D↑j
.text:0040AEF3                 mov     ebx, [esp+0BCh+Src]
.text:0040AEFA                 jmp     short loc_40AEAA
.text:0040AEFC ; ---------------------------------------------------------------------------
.text:0040AEFC
.text:0040AEFC loc_40AEFC:                             ; DATA XREF: .text:0040959C↑o
.text:0040AEFC                 jmp     loc_40A5DD
.text:0040AF01 ; ---------------------------------------------------------------------------
.text:0040AF01
.text:0040AF01 loc_40AF01:                             ; DATA XREF: .text:00409598↑o
.text:0040AF01                 jmp     loc_40A57A
.text:0040AF06 ; ---------------------------------------------------------------------------
.text:0040AF06
.text:0040AF06 loc_40AF06:                             ; DATA XREF: .text:00409590↑o
.text:0040AF06                 mov     eax, [esp+0BCh+var_38]
.text:0040AF0D                 cmp     [esp+0BCh+var_44], eax
.text:0040AF11                 jz      loc_40A282
.text:0040AF17                 jmp     loc_409A32
.text:0040AF17 ; ---------------------------------------------------------------------------
.text:0040AF1C                 align 10h
.text:0040AF20
.text:0040AF20 loc_40AF20:                             ; DATA XREF: .text:0040958C↑o
.text:0040AF20                 mov     ecx, [esp+0BCh+arg_8]
.text:0040AF27                 test    ecx, ecx
.text:0040AF29                 jz      short loc_40AF50
.text:0040AF2B                 mov     ebx, [esp+0BCh+arg_4]
.text:0040AF32                 cmp     [esp+0BCh+var_44], ebx
.text:0040AF36
.text:0040AF36 loc_40AF36:                             ; CODE XREF: sub_4095E0+197B↓j
.text:0040AF36                 jz      loc_40A1B0
.text:0040AF3C                 mov     edi, [esp+0BCh+arg_10]
.text:0040AF43                 test    edi, edi
.text:0040AF45
.text:0040AF45 loc_40AF45:                             ; CODE XREF: sub_4095E0+19D7↓j
.text:0040AF45                 jz      loc_40A1B0
.text:0040AF4B                 jmp     loc_409A32
.text:0040AF50 ; ---------------------------------------------------------------------------
.text:0040AF50
.text:0040AF50 loc_40AF50:                             ; CODE XREF: sub_4095E0+1949↑j
.text:0040AF50                 mov     esi, [esp+0BCh+arg_C]
.text:0040AF57                 cmp     [esp+0BCh+var_44], esi
.text:0040AF5B                 jmp     short loc_40AF36
.text:0040AF5D ; ---------------------------------------------------------------------------
.text:0040AF5D
.text:0040AF5D loc_40AF5D:                             ; DATA XREF: .text:00409588↑o
.text:0040AF5D                 mov     ebx, [esp+0BCh+var_38]
.text:0040AF64                 cmp     [esp+0BCh+var_44], ebx
.text:0040AF68                 jz      short loc_40AFAC
.text:0040AF6A                 mov     edi, [esp+0BCh+var_34]
.text:0040AF71                 cmp     [esp+0BCh+var_44], edi
.text:0040AF75                 jz      short loc_40AFA0
.text:0040AF77                 mov     edx, [esp+0BCh+var_44]
.text:0040AF7B                 cmp     byte ptr [edx], 0Ah
.text:0040AF7E
.text:0040AF7E loc_40AF7E:                             ; CODE XREF: sub_4095E0+19CA↓j
.text:0040AF7E                                         ; sub_4095E0+1A14↓j
.text:0040AF7E                 jnz     loc_409A32
.text:0040AF84                 mov     ebp, [esp+0BCh+arg_0]
.text:0040AF8B                 test    byte ptr [ebp+1Ch], 80h
.text:0040AF8F                 jnz     loc_409E0B      ; jumptable 00409857 case 0
.text:0040AF8F                                         ; jumptable 0040A1D6 case 0
.text:0040AF8F                                         ; jumptable 0040A2A8 case 0
.text:0040AF95                 jmp     loc_409A32
.text:0040AF95 ; ---------------------------------------------------------------------------
.text:0040AF9A                 align 10h
.text:0040AFA0
.text:0040AFA0 loc_40AFA0:                             ; CODE XREF: sub_4095E0+1995↑j
.text:0040AFA0                 mov     eax, [esp+0BCh+arg_C]
.text:0040AFA7                 cmp     byte ptr [eax], 0Ah
.text:0040AFAA                 jmp     short loc_40AF7E
.text:0040AFAC ; ---------------------------------------------------------------------------
.text:0040AFAC
.text:0040AFAC loc_40AFAC:                             ; CODE XREF: sub_4095E0+1988↑j
.text:0040AFAC                 mov     esi, [esp+0BCh+arg_0]
.text:0040AFB3                 test    byte ptr [esi+1Ch], 40h
.text:0040AFB7                 jmp     short loc_40AF45
.text:0040AFB9 ; ---------------------------------------------------------------------------
.text:0040AFB9
.text:0040AFB9 loc_40AFB9:                             ; DATA XREF: .text:00409584↑o
.text:0040AFB9                 mov     ebx, [esp+0BCh+arg_8]
.text:0040AFC0                 test    ebx, ebx
.text:0040AFC2                 jz      short loc_40AFF6
.text:0040AFC4                 mov     edi, [esp+0BCh+arg_4]
.text:0040AFCB                 cmp     [esp+0BCh+var_44], edi
.text:0040AFCF
.text:0040AFCF loc_40AFCF:                             ; CODE XREF: sub_4095E0+1A21↓j
.text:0040AFCF                 jz      short loc_40AFDC
.text:0040AFD1                 mov     edx, [esp+0BCh+arg_10]
.text:0040AFD8                 test    edx, edx
.text:0040AFDA                 jnz     short loc_40AFEC
.text:0040AFDC
.text:0040AFDC loc_40AFDC:                             ; CODE XREF: sub_4095E0:loc_40AFCF↑j
.text:0040AFDC                 mov     ebp, [esp+0BCh+arg_0]
.text:0040AFE3                 test    byte ptr [ebp+1Ch], 20h
.text:0040AFE7                 jmp     loc_40A084
.text:0040AFEC ; ---------------------------------------------------------------------------
.text:0040AFEC
.text:0040AFEC loc_40AFEC:                             ; CODE XREF: sub_4095E0+19FA↑j
.text:0040AFEC                 mov     ecx, [esp+0BCh+var_44]
.text:0040AFF0                 cmp     byte ptr [ecx-1], 0Ah
.text:0040AFF4                 jmp     short loc_40AF7E
.text:0040AFF6 ; ---------------------------------------------------------------------------
.text:0040AFF6
.text:0040AFF6 loc_40AFF6:                             ; CODE XREF: sub_4095E0+19E2↑j
.text:0040AFF6                 mov     eax, [esp+0BCh+arg_C]
.text:0040AFFD                 cmp     [esp+0BCh+var_44], eax
.text:0040B001                 jmp     short loc_40AFCF
.text:0040B003 ; ---------------------------------------------------------------------------
.text:0040B003
.text:0040B003 loc_40B003:                             ; DATA XREF: .text:00409580↑o
.text:0040B003                 mov     eax, [esp+0BCh+var_4C]
.text:0040B007                 mov     ecx, [esp+0BCh+var_68]
.text:0040B00B                 movzx   esi, byte ptr [eax]
.text:0040B00E                 inc     [esp+0BCh+var_4C]
.text:0040B012                 mov     edi, [ecx+esi*4]
.text:0040B015                 mov     [esp+0BCh+var_A4], esi
.text:0040B019                 cmp     edi, offset unk_41B520
.text:0040B01F                 jz      loc_409A32
.text:0040B025                 mov     ebp, [esp+0BCh+var_6C]
.text:0040B029                 mov     eax, [ebp+esi*4+0]
.text:0040B02D                 cmp     eax, offset unk_41B520
.text:0040B032                 jz      loc_409A32
.text:0040B038                 mov     [esp+0BCh+var_A0], edi
.text:0040B03C                 mov     esi, [esp+0BCh+arg_8]
.text:0040B043                 xor     ecx, ecx
.text:0040B045                 test    esi, esi
.text:0040B047                 jz      short loc_40B05D
.text:0040B049                 cmp     [esp+0BCh+arg_4], edi
.text:0040B050                 ja      short loc_40B05D
.text:0040B052                 mov     edx, [esp+0BCh+var_34]
.text:0040B059                 cmp     edi, edx
.text:0040B05B                 jbe     short loc_40B062
.text:0040B05D
.text:0040B05D loc_40B05D:                             ; CODE XREF: sub_4095E0+1A67↑j
.text:0040B05D                                         ; sub_4095E0+1A70↑j
.text:0040B05D                 mov     ecx, 1
.text:0040B062
.text:0040B062 loc_40B062:                             ; CODE XREF: sub_4095E0+1A7B↑j
.text:0040B062                 mov     edi, [esp+0BCh+arg_8]
.text:0040B069                 xor     edx, edx
.text:0040B06B                 test    edi, edi
.text:0040B06D                 jz      short loc_40B086
.text:0040B06F                 cmp     [esp+0BCh+arg_4], eax
.text:0040B076                 ja      short loc_40B086
.text:0040B078                 cmp     eax, [esp+0BCh+var_34]
.text:0040B07F                 ja      short loc_40B086
.text:0040B081                 mov     edx, 1
.text:0040B086
.text:0040B086 loc_40B086:                             ; CODE XREF: sub_4095E0+1A8D↑j
.text:0040B086                                         ; sub_4095E0+1A96↑j ...
.text:0040B086                 cmp     ecx, edx
.text:0040B088                 mov     ebx, eax
.text:0040B08A                 jnz     short loc_40B093
.text:0040B08C                 mov     ebx, [esp+0BCh+var_3C]
.text:0040B093
.text:0040B093 loc_40B093:                             ; CODE XREF: sub_4095E0+1AAA↑j
.text:0040B093                                         ; sub_4095E0+1B21↓j ...
.text:0040B093                 cmp     [esp+0BCh+var_A0], ebx
.text:0040B097                 jz      loc_40B166
.text:0040B09D
.text:0040B09D loc_40B09D:                             ; CODE XREF: sub_4095E0+1BAC↓j
.text:0040B09D                                         ; sub_4095E0+1BB5↓j
.text:0040B09D                 mov     eax, [esp+0BCh+var_48]
.text:0040B0A1                 cmp     [esp+0BCh+var_44], eax
.text:0040B0A5                 jz      loc_40B140
.text:0040B0AB
.text:0040B0AB loc_40B0AB:                             ; CODE XREF: sub_4095E0+1B81↓j
.text:0040B0AB                 mov     ecx, [esp+0BCh+var_44]
.text:0040B0AF                 mov     ebp, [esp+0BCh+var_48]
.text:0040B0B3                 mov     edx, [esp+0BCh+var_A0]
.text:0040B0B7                 sub     ebp, ecx
.text:0040B0B9                 mov     ecx, ebx
.text:0040B0BB                 sub     ecx, edx
.text:0040B0BD                 cmp     ebp, ecx
.text:0040B0BF                 jle     short loc_40B0C3
.text:0040B0C1                 mov     ebp, ecx
.text:0040B0C3
.text:0040B0C3 loc_40B0C3:                             ; CODE XREF: sub_4095E0+1ADF↑j
.text:0040B0C3                 mov     esi, [esp+0BCh+var_58]
.text:0040B0C7                 test    esi, esi
.text:0040B0C9                 jz      short loc_40B12F
.text:0040B0CB                 mov     [esp+0BCh+var_B4], ebp
.text:0040B0CF                 mov     edx, [esp+0BCh+var_58]
.text:0040B0D3                 mov     eax, [esp+0BCh+var_A0]
.text:0040B0D7                 mov     edi, [esp+0BCh+var_44]
.text:0040B0DB                 mov     [esp+0BCh+var_B0], edx
.text:0040B0DF                 mov     [esp+0BCh+var_B8], eax
.text:0040B0E3                 mov     [esp+0BCh+Size], edi
.text:0040B0E6                 call    sub_40BCA0
.text:0040B0EB                 test    eax, eax
.text:0040B0ED
.text:0040B0ED loc_40B0ED:                             ; CODE XREF: sub_4095E0+1B5E↓j
.text:0040B0ED                 jnz     loc_409A32
.text:0040B0F3                 add     [esp+0BCh+var_44], ebp
.text:0040B0F7                 add     [esp+0BCh+var_A0], ebp
.text:0040B0FB                 mov     ebp, [esp+0BCh+var_8C]
.text:0040B0FF                 test    ebp, ebp
.text:0040B101                 jnz     short loc_40B093
.text:0040B103                 mov     [esp+0BCh+var_8C], 1
.text:0040B10B                 mov     eax, [esp+0BCh+var_60]
.text:0040B10F                 mov     ecx, [esp+0BCh+var_64]
.text:0040B113                 cmp     eax, ecx
.text:0040B115                 ja      loc_40B093
.text:0040B11B
.text:0040B11B loc_40B11B:                             ; CODE XREF: sub_4095E0+1B48↓j
.text:0040B11B                 mov     esi, [esp+0BCh+var_78]
.text:0040B11F                 or      byte ptr [esi+eax*4], 18h
.text:0040B123                 inc     eax
.text:0040B124                 cmp     eax, [esp+0BCh+var_64]
.text:0040B128                 jbe     short loc_40B11B
.text:0040B12A                 jmp     loc_40B093
.text:0040B12F ; ---------------------------------------------------------------------------
.text:0040B12F
.text:0040B12F loc_40B12F:                             ; CODE XREF: sub_4095E0+1AE9↑j
.text:0040B12F                 cld
.text:0040B130                 mov     esi, [esp+0BCh+var_44]
.text:0040B134                 cmp     ebp, ebp
.text:0040B136                 mov     edi, [esp+0BCh+var_A0]
.text:0040B13A                 mov     ecx, ebp
.text:0040B13C                 repe cmpsb
.text:0040B13E                 jmp     short loc_40B0ED
.text:0040B140 ; ---------------------------------------------------------------------------
.text:0040B140
.text:0040B140 loc_40B140:                             ; CODE XREF: sub_4095E0+1AC5↑j
.text:0040B140                                         ; sub_4095E0+1B7F↓j
.text:0040B140                 mov     eax, [esp+0BCh+var_40]
.text:0040B144                 cmp     [esp+0BCh+var_48], eax
.text:0040B148                 jz      loc_409A32
.text:0040B14E                 mov     [esp+0BCh+var_48], eax
.text:0040B152                 mov     edi, [esp+0BCh+arg_C]
.text:0040B159                 cmp     edi, eax
.text:0040B15B                 mov     [esp+0BCh+var_44], edi
.text:0040B15F                 jz      short loc_40B140
.text:0040B161                 jmp     loc_40B0AB
.text:0040B166 ; ---------------------------------------------------------------------------
.text:0040B166
.text:0040B166 loc_40B166:                             ; CODE XREF: sub_4095E0+1AB7↑j
.text:0040B166                                         ; sub_4095E0+1BAA↓j
.text:0040B166                 cmp     ebx, [esp+0BCh+var_40]
.text:0040B16A                 jz      short loc_40B191
.text:0040B16C                 mov     ebp, [esp+0BCh+var_A4]
.text:0040B170                 mov     ecx, [esp+0BCh+var_6C]
.text:0040B174                 mov     eax, [ecx+ebp*4]
.text:0040B177                 cmp     ebx, eax
.text:0040B179                 jz      short loc_40B191
.text:0040B17B                 mov     esi, [esp+0BCh+arg_C]
.text:0040B182                 mov     ebx, eax
.text:0040B184                 cmp     esi, eax
.text:0040B186                 mov     [esp+0BCh+var_A0], esi
.text:0040B18A                 jz      short loc_40B166
.text:0040B18C                 jmp     loc_40B09D
.text:0040B191 ; ---------------------------------------------------------------------------
.text:0040B191
.text:0040B191 loc_40B191:                             ; CODE XREF: sub_4095E0+1B8A↑j
.text:0040B191                                         ; sub_4095E0+1B99↑j
.text:0040B191                 cmp     [esp+0BCh+var_A0], ebx
.text:0040B195                 jnz     loc_40B09D
.text:0040B19B                 jmp     loc_409FBE
.text:0040B1A0 ; ---------------------------------------------------------------------------
.text:0040B1A0
.text:0040B1A0 loc_40B1A0:                             ; CODE XREF: sub_4095E0+A04↑j
.text:0040B1A0                                         ; DATA XREF: .text:jpt_409FE4↑o
.text:0040B1A0                 mov     esi, [esp+0BCh+var_4C] ; jumptable 00409FE4 case 7
.text:0040B1A4                 mov     ebx, [esp+0BCh+var_78]
.text:0040B1A8                 movzx   edx, byte ptr [esi]
.text:0040B1AB                 test    byte ptr [ebx+edx*4], 3
.text:0040B1AF                 jz      loc_40B597
.text:0040B1B5                 mov     edi, [esp+0BCh+var_6C]
.text:0040B1B9                 mov     eax, [edi+edx*4]
.text:0040B1BC                 cmp     eax, offset unk_41B520
.text:0040B1C1                 jz      loc_40B58E
.text:0040B1C7
.text:0040B1C7 loc_40B1C7:                             ; CODE XREF: sub_4095E0+1FB2↓j
.text:0040B1C7                                         ; sub_4095E0+1FBF↓j
.text:0040B1C7                 mov     ecx, [esp+0BCh+var_74]
.text:0040B1CB                 mov     edi, [esp+0BCh+var_6C]
.text:0040B1CF                 mov     ebx, [esp+0BCh+var_78]
.text:0040B1D3                 mov     [ecx+edx*4], eax
.text:0040B1D6                 mov     edx, [esp+0BCh+var_4C]
.text:0040B1DA                 mov     eax, [esp+0BCh+var_44]
.text:0040B1DE                 movzx   ebp, byte ptr [edx]
.text:0040B1E1                 mov     [edi+ebp*4], eax
.text:0040B1E4                 movzx   esi, byte ptr [edx]
.text:0040B1E7                 and     byte ptr [ebx+esi*4], 0FBh
.text:0040B1EB                 mov     [esp+0BCh+var_8C], 0
.text:0040B1F3                 mov     ecx, [esp+0BCh+var_64]
.text:0040B1F7                 cmp     [esp+0BCh+var_60], ecx
.text:0040B1FB                 jz      loc_40B576
.text:0040B201                 mov     ebx, [esp+0BCh+var_4C]
.text:0040B205                 movzx   ecx, byte ptr [ebx]
.text:0040B208                 mov     dl, cl
.text:0040B20A                 dec     dl
.text:0040B20C                 jz      short loc_40B235
.text:0040B20E                 mov     esi, [esp+0BCh+var_78]
.text:0040B212                 movzx   edi, dl
.text:0040B215                 test    byte ptr [esi+edi*4], 4
.text:0040B219                 jnz     short loc_40B22D
.text:0040B21B
.text:0040B21B loc_40B21B:                             ; CODE XREF: sub_4095E0+1C4B↓j
.text:0040B21B                 dec     dl
.text:0040B21D                 jz      short loc_40B235
.text:0040B21F                 mov     ebp, [esp+0BCh+var_78]
.text:0040B223                 movzx   ebx, dl
.text:0040B226                 test    byte ptr [ebp+ebx*4+0], 4
.text:0040B22B                 jz      short loc_40B21B
.text:0040B22D
.text:0040B22D loc_40B22D:                             ; CODE XREF: sub_4095E0+1C39↑j
.text:0040B22D                 test    dl, dl
.text:0040B22F                 jnz     loc_40B56A
.text:0040B235
.text:0040B235 loc_40B235:                             ; CODE XREF: sub_4095E0+1C2C↑j
.text:0040B235                                         ; sub_4095E0+1C3D↑j
.text:0040B235                 mov     [esp+0BCh+var_60], 101h
.text:0040B23D                 mov     [esp+0BCh+var_64], 100h
.text:0040B245
.text:0040B245 loc_40B245:                             ; CODE XREF: sub_4095E0+1F91↓j
.text:0040B245                                         ; sub_4095E0+1FA9↓j
.text:0040B245                 movzx   edx, cl
.text:0040B248                 mov     ecx, [esp+0BCh+var_78]
.text:0040B24C                 test    byte ptr [ecx+edx*4], 8
.text:0040B250                 jz      short loc_40B285
.text:0040B252                 mov     esi, [esp+0BCh+var_4C]
.text:0040B256                 mov     edi, [esp+0BCh+var_4C]
.text:0040B25A                 dec     esi
.text:0040B25B                 cmp     [esp+0BCh+var_54], esi
.text:0040B25F                 lea     ecx, [edi+2]
.text:0040B262                 jz      short loc_40B285
.text:0040B264
.text:0040B264 loc_40B264:                             ; CODE XREF: sub_4095E0+1CB0↓j
.text:0040B264                                         ; sub_4095E0+1D01↓j ...
.text:0040B264                 mov     [esp+0BCh+var_4C], ecx
.text:0040B268                 mov     ebp, [esp+0BCh+var_50]
.text:0040B26C                 mov     eax, offset loc_409859
.text:0040B271                 cmp     ecx, ebp
.text:0040B273                 jz      loc_409857
.text:0040B279                 movzx   ebx, byte ptr [ecx]
.text:0040B27C                 inc     [esp+0BCh+var_4C]
.text:0040B280                 jmp     loc_409850
.text:0040B285 ; ---------------------------------------------------------------------------
.text:0040B285
.text:0040B285 loc_40B285:                             ; CODE XREF: sub_4095E0+1C70↑j
.text:0040B285                                         ; sub_4095E0+1C82↑j
.text:0040B285                 mov     ecx, [esp+0BCh+var_4C]
.text:0040B289                 add     ecx, 2
.text:0040B28C                 cmp     ecx, [esp+0BCh+var_50]
.text:0040B290                 jnb     short loc_40B264
.text:0040B292                 mov     [esp+0BCh+var_30], ecx
.text:0040B299                 mov     ebx, [esp+0BCh+var_4C]
.text:0040B29D                 xor     ebp, ebp
.text:0040B29F                 mov     [esp+0BCh+var_97], 0
.text:0040B2A4                 mov     edx, ebx
.text:0040B2A6                 add     edx, 3
.text:0040B2A9                 movzx   eax, byte ptr [ebx+2]
.text:0040B2AD                 mov     [esp+0BCh+var_30], edx
.text:0040B2B4                 cmp     eax, 13h
.text:0040B2B7                 ja      loc_40B55A
.text:0040B2BD                 cmp     eax, 11h
.text:0040B2C0                 jnb     loc_40B523
.text:0040B2C6                 cmp     eax, 0Dh
.text:0040B2C9                 jz      loc_40B523
.text:0040B2CF
.text:0040B2CF loc_40B2CF:                             ; CODE XREF: sub_4095E0+1F65↓j
.text:0040B2CF                                         ; sub_4095E0+1F75↓j ...
.text:0040B2CF                 mov     ebx, [esp+0BCh+var_30]
.text:0040B2D6                 add     ebx, ebp
.text:0040B2D8                 test    ebp, ebp
.text:0040B2DA                 mov     [esp+0BCh+var_30], ebx
.text:0040B2E1                 jns     short loc_40B264
.text:0040B2E3                 cmp     byte ptr [ebx], 0Fh
.text:0040B2E6                 jnz     loc_40B264
.text:0040B2EC                 cmp     byte ptr [ebx+3], 6
.text:0040B2F0                 jnz     loc_40B264
.text:0040B2F6                 movzx   eax, byte ptr [ebx+4]
.text:0040B2FA                 mov     ebp, [esp+0BCh+var_4C]
.text:0040B2FE                 cmp     al, [ebp+0]
.text:0040B301                 jnz     loc_40B264
.text:0040B307                 mov     ecx, [esp+0BCh+var_78]
.text:0040B30B                 movzx   edx, al
.text:0040B30E                 movzx   eax, byte ptr [ecx+edx*4]
.text:0040B312                 test    al, 10h
.text:0040B314                 jz      short loc_40B368
.text:0040B316                 and     al, 0EFh
.text:0040B318                 mov     [ecx+edx*4], al
.text:0040B31B                 mov     eax, [esp+0BCh+var_4C]
.text:0040B31F                 movzx   ecx, byte ptr [eax]
.text:0040B322                 movzx   esi, byte ptr [eax+1]
.text:0040B326                 lea     edx, [esi+ecx]
.text:0040B329                 cmp     ecx, edx
.text:0040B32B                 jnb     short loc_40B361
.text:0040B32D
.text:0040B32D loc_40B32D:                             ; CODE XREF: sub_4095E0+1D7F↓j
.text:0040B32D                 mov     edx, [esp+0BCh+var_70]
.text:0040B331                 mov     ebx, [esp+0BCh+var_68]
.text:0040B335                 mov     ebp, [esp+0BCh+var_74]
.text:0040B339                 mov     edi, [edx+ecx*4]
.text:0040B33C                 mov     [ebx+ecx*4], edi
.text:0040B33F                 mov     edx, [ebp+ecx*4+0]
.text:0040B343                 cmp     edx, edi
.text:0040B345                 jb      short loc_40B34E
.text:0040B347                 mov     eax, [esp+0BCh+var_6C]
.text:0040B34B                 mov     [eax+ecx*4], edx
.text:0040B34E
.text:0040B34E loc_40B34E:                             ; CODE XREF: sub_4095E0+1D65↑j
.text:0040B34E                 mov     ebp, [esp+0BCh+var_4C]
.text:0040B352                 inc     ecx
.text:0040B353                 movzx   esi, byte ptr [ebp+0]
.text:0040B357                 movzx   edi, byte ptr [ebp+1]
.text:0040B35B                 add     esi, edi
.text:0040B35D                 cmp     ecx, esi
.text:0040B35F                 jb      short loc_40B32D
.text:0040B361
.text:0040B361 loc_40B361:                             ; CODE XREF: sub_4095E0+1D4B↑j
.text:0040B361                 mov     ebx, [esp+0BCh+var_30]
.text:0040B368
.text:0040B368 loc_40B368:                             ; CODE XREF: sub_4095E0+1D34↑j
.text:0040B368                 mov     esi, ebx
.text:0040B36A                 mov     eax, [esp+0BCh+var_60]
.text:0040B36E                 inc     ebx
.text:0040B36F                 mov     [esp+0BCh+var_30], ebx
.text:0040B376                 lea     ecx, [esi+3]
.text:0040B379                 mov     edi, [esp+0BCh+var_28]
.text:0040B380                 movsx   edx, byte ptr [ebx+1]
.text:0040B384                 movzx   ebp, byte ptr [esi+1]
.text:0040B388                 mov     esi, [esp+0BCh+var_24]
.text:0040B38F                 mov     [esp+0BCh+var_30], ecx
.text:0040B396                 mov     ecx, [esp+0BCh+var_64]
.text:0040B39A                 shl     edx, 8
.text:0040B39D                 add     ebp, edx
.text:0040B39F                 mov     edx, edi
.text:0040B3A1                 sub     ecx, eax
.text:0040B3A3                 lea     ebx, [ecx+ecx]
.text:0040B3A6                 sub     edx, esi
.text:0040B3A8                 lea     eax, [ecx+ebx+7]
.text:0040B3AC                 cmp     edx, eax
.text:0040B3AE                 jnb     short loc_40B428
.text:0040B3B0                 mov     [esp+0BCh+var_9C], eax
.text:0040B3B4
.text:0040B3B4 loc_40B3B4:                             ; CODE XREF: sub_4095E0+1E46↓j
.text:0040B3B4                 mov     edx, dword_41A060
.text:0040B3BA                 lea     esi, [edx+edx*8]
.text:0040B3BD                 lea     ebx, [edx+esi*2]
.text:0040B3C0                 cmp     edi, ebx
.text:0040B3C2                 ja      loc_409D61
.text:0040B3C8                 lea     esi, ds:0[edi*8]
.text:0040B3CF                 mov     [esp+0BCh+Size], esi ; Size
.text:0040B3D2                 call    malloc
.text:0040B3D7                 mov     [esp+0BCh+Size], eax ; void *
.text:0040B3DA                 mov     ebx, [esp+0BCh+var_28]
.text:0040B3E1                 mov     ecx, [esp+0BCh+Src]
.text:0040B3E8                 shl     ebx, 2
.text:0040B3EB                 mov     [esp+0BCh+var_B4], ebx ; Size
.text:0040B3EF                 mov     [esp+0BCh+var_B8], ecx ; Src
.text:0040B3F3                 call    memcpy
.text:0040B3F8                 mov     [esp+0BCh+Src], eax
.text:0040B3FF                 test    eax, eax
.text:0040B401                 jz      loc_409D61
.text:0040B407                 mov     edx, [esp+0BCh+var_28]
.text:0040B40E                 mov     esi, [esp+0BCh+var_24]
.text:0040B415                 add     edx, edx
.text:0040B417                 mov     [esp+0BCh+var_28], edx
.text:0040B41E                 mov     edi, edx
.text:0040B420                 sub     edx, esi
.text:0040B422                 cmp     edx, [esp+0BCh+var_9C]
.text:0040B426                 jb      short loc_40B3B4
.text:0040B428
.text:0040B428 loc_40B428:                             ; CODE XREF: sub_4095E0+1DCE↑j
.text:0040B428                 mov     ecx, [esp+0BCh+var_60]
.text:0040B42C                 mov     eax, [esp+0BCh+var_64]
.text:0040B430                 cmp     ecx, eax
.text:0040B432                 ja      loc_40B517
.text:0040B438                 mov     ebx, [esp+0BCh+Src]
.text:0040B43F
.text:0040B43F loc_40B43F:                             ; CODE XREF: sub_4095E0+1EBD↓j
.text:0040B43F                 mov     eax, [esp+0BCh+var_68]
.text:0040B443                 mov     edi, [eax+ecx*4]
.text:0040B446                 mov     [ebx+esi*4], edi
.text:0040B449                 mov     edx, [esp+0BCh+var_6C]
.text:0040B44D                 mov     edi, [esp+0BCh+var_24]
.text:0040B454                 mov     ebx, [esp+0BCh+Src]
.text:0040B45B                 mov     esi, [edx+ecx*4]
.text:0040B45E                 inc     edi
.text:0040B45F                 mov     [esp+0BCh+var_24], edi
.text:0040B466                 mov     [ebx+edi*4], esi
.text:0040B469                 mov     edi, [esp+0BCh+var_24]
.text:0040B470                 mov     eax, [esp+0BCh+var_78]
.text:0040B474                 mov     ebx, [esp+0BCh+Src]
.text:0040B47B                 inc     edi
.text:0040B47C                 mov     [esp+0BCh+var_24], edi
.text:0040B483                 mov     esi, [eax+ecx*4]
.text:0040B486                 inc     ecx
.text:0040B487                 mov     [ebx+edi*4], esi
.text:0040B48A                 mov     esi, [esp+0BCh+var_24]
.text:0040B491                 inc     esi
.text:0040B492                 cmp     ecx, [esp+0BCh+var_64]
.text:0040B496                 mov     [esp+0BCh+var_24], esi
.text:0040B49D                 jbe     short loc_40B43F
.text:0040B49F
.text:0040B49F loc_40B49F:                             ; CODE XREF: sub_4095E0+1F3E↓j
.text:0040B49F                 mov     edi, [esp+0BCh+var_60]
.text:0040B4A3                 mov     [ebx+esi*4], edi
.text:0040B4A6                 mov     eax, [esp+0BCh+var_24]
.text:0040B4AD                 mov     ecx, [esp+0BCh+Src]
.text:0040B4B4                 mov     edx, [esp+0BCh+var_64]
.text:0040B4B8                 inc     eax
.text:0040B4B9                 mov     [esp+0BCh+var_24], eax
.text:0040B4C0                 mov     [ecx+eax*4], edx
.text:0040B4C3                 mov     edi, [esp+0BCh+var_24]
.text:0040B4CA                 mov     esi, [esp+0BCh+var_30]
.text:0040B4D1                 mov     edx, [esp+0BCh+Src]
.text:0040B4D8                 inc     edi
.text:0040B4D9                 add     ebp, esi
.text:0040B4DB                 mov     [esp+0BCh+var_24], edi
.text:0040B4E2                 mov     [edx+edi*4], ebp
.text:0040B4E5                 mov     ecx, [esp+0BCh+var_24]
.text:0040B4EC                 mov     ebp, [esp+0BCh+Src]
.text:0040B4F3                 mov     ebx, [esp+0BCh+var_44]
.text:0040B4F7                 inc     ecx
.text:0040B4F8                 mov     [esp+0BCh+var_24], ecx
.text:0040B4FF                 mov     [ebp+ecx*4+0], ebx
.text:0040B503                 mov     esi, [esp+0BCh+var_24]
.text:0040B50A                 inc     esi
.text:0040B50B                 mov     [esp+0BCh+var_24], esi
.text:0040B512                 jmp     loc_409910
.text:0040B517 ; ---------------------------------------------------------------------------
.text:0040B517
.text:0040B517 loc_40B517:                             ; CODE XREF: sub_4095E0+1E52↑j
.text:0040B517                 mov     ebx, [esp+0BCh+Src]
.text:0040B51E                 jmp     loc_40B49F
.text:0040B523 ; ---------------------------------------------------------------------------
.text:0040B523
.text:0040B523 loc_40B523:                             ; CODE XREF: sub_4095E0+1CE0↑j
.text:0040B523                                         ; sub_4095E0+1CE9↑j ...
.text:0040B523                 mov     edx, [esp+0BCh+var_30]
.text:0040B52A                 lea     eax, [edx+2]
.text:0040B52D                 movsx   esi, byte ptr [edx+1]
.text:0040B531                 movzx   ebp, byte ptr [edx]
.text:0040B534                 mov     [esp+0BCh+var_30], eax
.text:0040B53B                 shl     esi, 8
.text:0040B53E                 add     ebp, esi
.text:0040B540                 cmp     [esp+0BCh+var_97], 0
.text:0040B545                 jz      loc_40B2CF
.text:0040B54B                 lea     edi, [edx+4]
.text:0040B54E                 mov     [esp+0BCh+var_30], edi
.text:0040B555                 jmp     loc_40B2CF
.text:0040B55A ; ---------------------------------------------------------------------------
.text:0040B55A
.text:0040B55A loc_40B55A:                             ; CODE XREF: sub_4095E0+1CD7↑j
.text:0040B55A                 cmp     eax, 16h
.text:0040B55D                 jnz     loc_40B2CF
.text:0040B563                 mov     [esp+0BCh+var_97], 1
.text:0040B568                 jmp     short loc_40B523
.text:0040B56A ; ---------------------------------------------------------------------------
.text:0040B56A
.text:0040B56A loc_40B56A:                             ; CODE XREF: sub_4095E0+1C4F↑j
.text:0040B56A                 movzx   eax, dl
.text:0040B56D                 mov     [esp+0BCh+var_64], eax
.text:0040B571                 jmp     loc_40B245
.text:0040B576 ; ---------------------------------------------------------------------------
.text:0040B576
.text:0040B576 loc_40B576:                             ; CODE XREF: sub_4095E0+1C1B↑j
.text:0040B576                 mov     [esp+0BCh+var_60], 101h
.text:0040B57E                 mov     [esp+0BCh+var_64], 100h
.text:0040B586                 movzx   ecx, byte ptr [edx]
.text:0040B589                 jmp     loc_40B245
.text:0040B58E ; ---------------------------------------------------------------------------
.text:0040B58E
.text:0040B58E loc_40B58E:                             ; CODE XREF: sub_4095E0+1BE1↑j
.text:0040B58E                 mov     eax, [esp+0BCh+var_44]
.text:0040B592                 jmp     loc_40B1C7
.text:0040B597 ; ---------------------------------------------------------------------------
.text:0040B597
.text:0040B597 loc_40B597:                             ; CODE XREF: sub_4095E0+1BCF↑j
.text:0040B597                 mov     ebp, [esp+0BCh+var_6C]
.text:0040B59B                 mov     eax, [ebp+edx*4+0]
.text:0040B59F                 jmp     loc_40B1C7
.text:0040B5A4 ; ---------------------------------------------------------------------------
.text:0040B5A4
.text:0040B5A4 loc_40B5A4:                             ; CODE XREF: sub_4095E0+A04↑j
.text:0040B5A4                                         ; DATA XREF: .text:jpt_409FE4↑o
.text:0040B5A4                 mov     ebx, [esp+0BCh+var_4C] ; jumptable 00409FE4 case 6
.text:0040B5A8                 mov     edx, [esp+0BCh+var_78]
.text:0040B5AC                 mov     [esp+0BCh+var_30], ebx
.text:0040B5B3                 movzx   ecx, byte ptr [ebx]
.text:0040B5B6                 movzx   esi, cl
.text:0040B5B9                 movzx   ebp, byte ptr [edx+esi*4]
.text:0040B5BD                 and     ebp, 3
.text:0040B5C0                 cmp     ebp, 3
.text:0040B5C3                 jz      loc_40B654
.text:0040B5C9
.text:0040B5C9 loc_40B5C9:                             ; CODE XREF: sub_4095E0+20A6↓j
.text:0040B5C9                 mov     esi, [esp+0BCh+var_78]
.text:0040B5CD                 movzx   edx, cl
.text:0040B5D0                 test    byte ptr [esi+edx*4], 3
.text:0040B5D4                 jz      short loc_40B64B
.text:0040B5D6                 mov     ebx, [esp+0BCh+var_68]
.text:0040B5DA                 mov     eax, [ebx+edx*4]
.text:0040B5DD                 cmp     eax, offset unk_41B520
.text:0040B5E2                 jz      short loc_40B645
.text:0040B5E4
.text:0040B5E4 loc_40B5E4:                             ; CODE XREF: sub_4095E0+2069↓j
.text:0040B5E4                                         ; sub_4095E0+2072↓j
.text:0040B5E4                 mov     ebp, [esp+0BCh+var_70]
.text:0040B5E8                 mov     ebx, [esp+0BCh+var_68]
.text:0040B5EC                 mov     ecx, [esp+0BCh+var_78]
.text:0040B5F0                 mov     [ebp+edx*4+0], eax
.text:0040B5F4                 mov     ebp, [esp+0BCh+var_4C]
.text:0040B5F8                 mov     eax, [esp+0BCh+var_44]
.text:0040B5FC                 movzx   edi, byte ptr [ebp+0]
.text:0040B600                 mov     [ebx+edi*4], eax
.text:0040B603                 movzx   esi, byte ptr [ebp+0]
.text:0040B607                 or      byte ptr [ecx+esi*4], 4
.text:0040B60B                 movzx   edx, byte ptr [ebp+0]
.text:0040B60F                 and     byte ptr [ecx+edx*4], 0F7h
.text:0040B613                 mov     [esp+0BCh+var_8C], 0
.text:0040B61B                 movzx   esi, byte ptr [ebp+0]
.text:0040B61F                 cmp     [esp+0BCh+var_60], 101h
.text:0040B627                 mov     [esp+0BCh+var_64], esi
.text:0040B62B                 jz      short loc_40B63F
.text:0040B62D
.text:0040B62D loc_40B62D:                             ; CODE XREF: sub_4095E0+2063↓j
.text:0040B62D                 add     [esp+0BCh+var_4C], 2
.text:0040B632                 mov     ecx, [esp+0BCh+var_4C]
.text:0040B636                 mov     [esp+0BCh+var_54], ecx
.text:0040B63A                 jmp     loc_40A1B0
.text:0040B63F ; ---------------------------------------------------------------------------
.text:0040B63F
.text:0040B63F loc_40B63F:                             ; CODE XREF: sub_4095E0+204B↑j
.text:0040B63F                 mov     [esp+0BCh+var_60], esi
.text:0040B643                 jmp     short loc_40B62D
.text:0040B645 ; ---------------------------------------------------------------------------
.text:0040B645
.text:0040B645 loc_40B645:                             ; CODE XREF: sub_4095E0+2002↑j
.text:0040B645                 mov     eax, [esp+0BCh+var_44]
.text:0040B649                 jmp     short loc_40B5E4
.text:0040B64B ; ---------------------------------------------------------------------------
.text:0040B64B
.text:0040B64B loc_40B64B:                             ; CODE XREF: sub_4095E0+1FF4↑j
.text:0040B64B                 mov     edi, [esp+0BCh+var_68]
.text:0040B64F                 mov     eax, [edi+edx*4]
.text:0040B652                 jmp     short loc_40B5E4
.text:0040B654 ; ---------------------------------------------------------------------------
.text:0040B654
.text:0040B654 loc_40B654:                             ; CODE XREF: sub_4095E0+1FE3↑j
.text:0040B654                 mov     [esp+0BCh+var_B4], edx
.text:0040B658                 mov     eax, [esp+0BCh+var_50]
.text:0040B65C                 lea     edx, [esp+0BCh+var_30]
.text:0040B663                 mov     [esp+0BCh+Size], edx
.text:0040B666                 mov     [esp+0BCh+var_B8], eax
.text:0040B66A                 call    sub_40B960
.text:0040B66F                 mov     edi, [esp+0BCh+var_78]
.text:0040B673                 mov     ebp, eax
.text:0040B675                 and     ebp, 3
.text:0040B678                 mov     ecx, [edi+esi*4]
.text:0040B67B                 and     ecx, 0FFFFFFFCh
.text:0040B67E                 or      ecx, ebp
.text:0040B680                 mov     [edi+esi*4], ecx
.text:0040B683                 movzx   ecx, byte ptr [ebx]
.text:0040B686                 jmp     loc_40B5C9
.text:0040B686 ; ---------------------------------------------------------------------------
.text:0040B68B                 align 10h
.text:0040B690
.text:0040B690 loc_40B690:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:0040B690                                         ; sub_4095E0+BF6↑j ...
.text:0040B690                 mov     edx, [esp+0BCh+var_4C] ; jumptable 00409857 case 5
.text:0040B690                                         ; jumptable 0040A1D6 case 5
.text:0040B690                                         ; jumptable 0040A2A8 case 5
.text:0040B694                 mov     ebp, [esp+0BCh+var_48]
.text:0040B698                 cmp     byte ptr [edx-1], 5
.text:0040B69C                 setz    [esp+0BCh+var_95]
.text:0040B6A1                 cmp     [esp+0BCh+var_44], ebp
.text:0040B6A5                 jz      loc_40B760
.text:0040B6AB
.text:0040B6AB loc_40B6AB:                             ; CODE XREF: sub_4095E0+21A1↓j
.text:0040B6AB                 mov     esi, [esp+0BCh+var_58]
.text:0040B6AF                 test    esi, esi
.text:0040B6B1                 jz      loc_40B74F
.text:0040B6B7                 mov     ebx, [esp+0BCh+var_44]
.text:0040B6BB                 mov     ecx, [esp+0BCh+var_58]
.text:0040B6BF                 movzx   edi, byte ptr [ebx]
.text:0040B6C2                 movzx   ebx, byte ptr [edi+ecx]
.text:0040B6C6
.text:0040B6C6 loc_40B6C6:                             ; CODE XREF: sub_4095E0+2177↓j
.text:0040B6C6                 mov     esi, [esp+0BCh+var_4C]
.text:0040B6CA                 movzx   eax, bl
.text:0040B6CD                 movzx   edx, byte ptr [esi]
.text:0040B6D0                 movzx   edi, dl
.text:0040B6D3                 shl     edi, 3
.text:0040B6D6                 mov     [esp+0BCh+var_96], dl
.text:0040B6DA                 cmp     eax, edi
.text:0040B6DC                 jnb     short loc_40B6FB
.text:0040B6DE                 mov     dl, bl
.text:0040B6E0                 shr     dl, 3
.text:0040B6E3                 movzx   ecx, dl
.text:0040B6E6                 movzx   eax, byte ptr [ecx+esi+1]
.text:0040B6EB                 mov     ecx, ebx
.text:0040B6ED                 and     ecx, 7
.text:0040B6F0                 sar     eax, cl
.text:0040B6F2                 test    al, 1
.text:0040B6F4                 jz      short loc_40B6FB
.text:0040B6F6                 xor     [esp+0BCh+var_95], 1
.text:0040B6FB
.text:0040B6FB loc_40B6FB:                             ; CODE XREF: sub_4095E0+20FC↑j
.text:0040B6FB                                         ; sub_4095E0+2114↑j
.text:0040B6FB                 movzx   ebx, [esp+0BCh+var_96]
.text:0040B700                 mov     ebp, [esp+0BCh+var_4C]
.text:0040B704                 cmp     [esp+0BCh+var_95], 0
.text:0040B709                 lea     esi, [ebx+ebp+1]
.text:0040B70D                 mov     [esp+0BCh+var_4C], esi
.text:0040B711                 jz      loc_409A32
.text:0040B717                 mov     edi, [esp+0BCh+var_8C]
.text:0040B71B                 test    edi, edi
.text:0040B71D                 jnz     loc_40A3FF
.text:0040B723                 mov     [esp+0BCh+var_8C], 1
.text:0040B72B                 mov     eax, [esp+0BCh+var_60]
.text:0040B72F                 mov     edx, [esp+0BCh+var_64]
.text:0040B733                 cmp     eax, edx
.text:0040B735                 ja      loc_40A3FF
.text:0040B73B
.text:0040B73B loc_40B73B:                             ; CODE XREF: sub_4095E0+2168↓j
.text:0040B73B                 mov     ecx, [esp+0BCh+var_78]
.text:0040B73F                 or      byte ptr [ecx+eax*4], 18h
.text:0040B743                 inc     eax
.text:0040B744                 cmp     eax, [esp+0BCh+var_64]
.text:0040B748                 jbe     short loc_40B73B
.text:0040B74A                 jmp     loc_40A3FF
.text:0040B74F ; ---------------------------------------------------------------------------
.text:0040B74F
.text:0040B74F loc_40B74F:                             ; CODE XREF: sub_4095E0+20D1↑j
.text:0040B74F                 mov     ebp, [esp+0BCh+var_44]
.text:0040B753                 movzx   ebx, byte ptr [ebp+0]
.text:0040B757                 jmp     loc_40B6C6
.text:0040B757 ; ---------------------------------------------------------------------------
.text:0040B75C                 align 10h
.text:0040B760
.text:0040B760 loc_40B760:                             ; CODE XREF: sub_4095E0+20C5↑j
.text:0040B760                                         ; sub_4095E0+219F↓j
.text:0040B760                 mov     ecx, [esp+0BCh+var_40]
.text:0040B764                 cmp     [esp+0BCh+var_48], ecx
.text:0040B768                 jz      loc_409A32
.text:0040B76E                 mov     [esp+0BCh+var_48], ecx
.text:0040B772                 mov     eax, [esp+0BCh+arg_C]
.text:0040B779                 cmp     eax, ecx
.text:0040B77B                 mov     [esp+0BCh+var_44], eax
.text:0040B77F                 jz      short loc_40B760
.text:0040B781                 jmp     loc_40B6AB
.text:0040B786 ; ---------------------------------------------------------------------------
.text:0040B786
.text:0040B786 loc_40B786:                             ; CODE XREF: sub_4095E0:loc_409857↑j
.text:0040B786                                         ; sub_4095E0+BF6↑j ...
.text:0040B786                 jmp     loc_40B690      ; jumptable 00409857 case 4
.text:0040B786                                         ; jumptable 0040A1D6 case 4
.text:0040B786                                         ; jumptable 0040A2A8 case 4
.text:0040B78B ; ---------------------------------------------------------------------------
.text:0040B78B
.text:0040B78B loc_40B78B:                             ; CODE XREF: sub_4095E0+C88↑j
.text:0040B78B                 mov     ebx, [esp+0BCh+var_34]
.text:0040B792                 movzx   eax, byte ptr [ebx-1]
.text:0040B796                 jmp     loc_40A275
.text:0040B79B ; ---------------------------------------------------------------------------
.text:0040B79B
.text:0040B79B loc_40B79B:                             ; CODE XREF: sub_4095E0+C76↑j
.text:0040B79B                 mov     edi, [esp+0BCh+arg_C]
.text:0040B7A2                 movzx   eax, byte ptr [edi]
.text:0040B7A5                 jmp     loc_40A275
.text:0040B7AA ; ---------------------------------------------------------------------------
.text:0040B7AA
.text:0040B7AA loc_40B7AA:                             ; CODE XREF: sub_4095E0+C43↑j
.text:0040B7AA                 mov     esi, [esp+0BCh+var_34]
.text:0040B7B1                 movzx   eax, byte ptr [esi-1]
.text:0040B7B5                 jmp     loc_40A231
.text:0040B7BA ; ---------------------------------------------------------------------------
.text:0040B7BA
.text:0040B7BA loc_40B7BA:                             ; CODE XREF: sub_4095E0+C33↑j
.text:0040B7BA                 mov     ebp, [esp+0BCh+arg_C]
.text:0040B7C1                 movzx   eax, byte ptr [ebp+0]
.text:0040B7C5                 jmp     loc_40A231
.text:0040B7CA ; ---------------------------------------------------------------------------
.text:0040B7CA
.text:0040B7CA loc_40B7CA:                             ; CODE XREF: sub_4095E0+C01↑j
.text:0040B7CA                 mov     edx, [esp+0BCh+arg_C]
.text:0040B7D1                 cmp     [esp+0BCh+var_44], edx
.text:0040B7D5                 jmp     loc_40A1F2
.text:0040B7DA ; ---------------------------------------------------------------------------
.text:0040B7DA
.text:0040B7DA loc_40B7DA:                             ; CODE XREF: sub_4095E0+AFB↑j
.text:0040B7DA                 mov     ebx, [esp+0BCh+arg_C]
.text:0040B7E1                 cmp     [esp+0BCh+var_44], ebx
.text:0040B7E5                 jmp     loc_40A0EC
.text:0040B7EA ; ---------------------------------------------------------------------------
.text:0040B7EA
.text:0040B7EA loc_40B7EA:                             ; CODE XREF: sub_4095E0+993↑j
.text:0040B7EA                 mov     edi, [esp+0BCh+var_44]
.text:0040B7EE                 cmp     byte ptr [edi], 0
.text:0040B7F1                 jmp     loc_409F89
.text:0040B7F6 ; ---------------------------------------------------------------------------
.text:0040B7F6
.text:0040B7F6 loc_40B7F6:                             ; CODE XREF: sub_4095E0+964↑j
.text:0040B7F6                 mov     edi, [esp+0BCh+var_44]
.text:0040B7FA                 cmp     byte ptr [edi], 0Ah
.text:0040B7FD                 jmp     loc_409F5A
.text:0040B802 ; ---------------------------------------------------------------------------
.text:0040B802
.text:0040B802 loc_40B802:                             ; CODE XREF: sub_4095E0+94B↑j
.text:0040B802                                         ; sub_4095E0+2241↓j
.text:0040B802                 mov     eax, [esp+0BCh+var_40]
.text:0040B806                 cmp     [esp+0BCh+var_48], eax
.text:0040B80A                 jz      loc_409A32
.text:0040B810                 mov     [esp+0BCh+var_48], eax
.text:0040B814                 mov     ecx, [esp+0BCh+arg_C]
.text:0040B81B                 cmp     ecx, eax
.text:0040B81D                 mov     [esp+0BCh+var_44], ecx
.text:0040B821                 jz      short loc_40B802
.text:0040B823                 jmp     loc_409F31
.text:0040B828 ; ---------------------------------------------------------------------------
.text:0040B828
.text:0040B828 loc_40B828:                             ; CODE XREF: sub_4095E0+21B↑j
.text:0040B828                                         ; sub_4095E0+22F↑j
.text:0040B828                 mov     edi, [esp+0BCh+arg_C]
.text:0040B82F                 mov     esi, [esp+0BCh+arg_14]
.text:0040B836                 mov     ecx, [esp+0BCh+arg_8]
.text:0040B83D                 mov     ebp, [esp+0BCh+var_40]
.text:0040B841                 add     edi, esi
.text:0040B843                 sub     edi, ecx
.text:0040B845                 mov     [esp+0BCh+var_44], edi
.text:0040B849                 mov     [esp+0BCh+var_48], ebp
.text:0040B84D                 jmp     loc_409834
.text:0040B852 ; ---------------------------------------------------------------------------
.text:0040B852
.text:0040B852 loc_40B852:                             ; CODE XREF: sub_4095E0+1F1↑j
.text:0040B852                 mov     ebp, [esp+0BCh+arg_C]
.text:0040B859                 mov     ebx, [esp+0BCh+arg_8]
.text:0040B860                 mov     edi, [esp+0BCh+var_34]
.text:0040B867                 add     esi, ebp
.text:0040B869                 sub     esi, ebx
.text:0040B86B                 mov     [esp+0BCh+var_3C], edi
.text:0040B872                 jmp     loc_4097EE
.text:0040B877 ; ---------------------------------------------------------------------------
.text:0040B877
.text:0040B877 loc_40B877:                             ; CODE XREF: sub_4095E0+B0↑j
.text:0040B877                 mov     edi, [esp+0BCh+var_5C]
.text:0040B87B                 shl     edi, 2
.text:0040B87E                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B881                 call    malloc
.text:0040B886                 mov     [esp+0BCh+var_68], eax
.text:0040B88A                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B88D                 call    malloc
.text:0040B892                 mov     [esp+0BCh+var_6C], eax
.text:0040B896                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B899                 call    malloc
.text:0040B89E                 mov     [esp+0BCh+var_70], eax
.text:0040B8A2                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8A5                 call    malloc
.text:0040B8AA                 mov     [esp+0BCh+var_74], eax
.text:0040B8AE                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8B1                 call    malloc
.text:0040B8B6                 mov     [esp+0BCh+var_80], eax
.text:0040B8BA                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8BD                 call    malloc
.text:0040B8C2                 mov     [esp+0BCh+var_84], eax
.text:0040B8C6                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8C9                 call    malloc
.text:0040B8CE                 mov     [esp+0BCh+var_78], eax
.text:0040B8D2                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8D5                 call    malloc
.text:0040B8DA                 mov     [esp+0BCh+var_90], eax
.text:0040B8DE                 mov     [esp+0BCh+Size], edi ; Size
.text:0040B8E1                 call    malloc
.text:0040B8E6                 mov     [esp+0BCh+var_94], eax
.text:0040B8EA                 mov     ecx, [esp+0BCh+var_68]
.text:0040B8EE                 test    ecx, ecx
.text:0040B8F0                 jz      loc_409D61
.text:0040B8F6                 mov     ebx, [esp+0BCh+var_6C]
.text:0040B8FA                 test    ebx, ebx
.text:0040B8FC                 jz      loc_409D61
.text:0040B902                 mov     edx, [esp+0BCh+var_70]
.text:0040B906                 test    edx, edx
.text:0040B908                 jz      loc_409D61
.text:0040B90E                 mov     ebp, [esp+0BCh+var_74]
.text:0040B912                 test    ebp, ebp
.text:0040B914                 jz      loc_409D61
.text:0040B91A                 mov     ecx, [esp+0BCh+var_78]
.text:0040B91E                 test    ecx, ecx
.text:0040B920                 jz      loc_409D61
.text:0040B926                 mov     edi, [esp+0BCh+var_80]
.text:0040B92A                 test    edi, edi
.text:0040B92C                 jz      loc_409D61
.text:0040B932                 mov     ebx, [esp+0BCh+var_84]
.text:0040B936                 test    ebx, ebx
.text:0040B938                 jz      loc_409D61
.text:0040B93E                 mov     edx, [esp+0BCh+var_90]
.text:0040B942                 test    edx, edx
.text:0040B944                 jz      loc_409D61
.text:0040B94A                 test    eax, eax
.text:0040B94C                 jnz     loc_4096DE
.text:0040B952                 jmp     loc_409D61
.text:0040B952 sub_4095E0      endp
.text:0040B952
.text:0040B952 ; ---------------------------------------------------------------------------
.text:0040B957                 align 10h
.text:0040B960
.text:0040B960 ; =============== S U B R O U T I N E =======================================
.text:0040B960
.text:0040B960
.text:0040B960 sub_40B960      proc near               ; CODE XREF: sub_4095E0+208A↑p
.text:0040B960                                         ; sub_40BB10+CA↓p
.text:0040B960
.text:0040B960 var_2C          = dword ptr -2Ch
.text:0040B960 var_28          = dword ptr -28h
.text:0040B960 var_24          = dword ptr -24h
.text:0040B960 var_14          = dword ptr -14h
.text:0040B960 arg_0           = dword ptr  4
.text:0040B960 arg_4           = dword ptr  8
.text:0040B960 arg_8           = dword ptr  0Ch
.text:0040B960
.text:0040B960                 push    ebp
.text:0040B961                 push    edi
.text:0040B962                 push    esi
.text:0040B963                 push    ebx
.text:0040B964                 sub     esp, 1Ch
.text:0040B967                 mov     ebp, [esp+2Ch+arg_0]
.text:0040B96B                 mov     edi, [esp+2Ch+arg_4]
.text:0040B96F                 mov     esi, [esp+2Ch+arg_8]
.text:0040B973                 mov     eax, [ebp+0]
.text:0040B976                 add     eax, 2
.text:0040B979                 cmp     eax, edi
.text:0040B97B                 mov     ecx, eax
.text:0040B97D                 mov     [esp+2Ch+var_14], eax
.text:0040B981                 jnb     short loc_40B9C3
.text:0040B983                 lea     esi, [esi+0]
.text:0040B989                 lea     edi, [edi+0]
.text:0040B990
.text:0040B990 loc_40B990:                             ; CODE XREF: sub_40B960+61↓j
.text:0040B990                 movzx   eax, byte ptr [ecx]
.text:0040B993                 cmp     eax, 7
.text:0040B996                 jz      loc_40BA73
.text:0040B99C                 cmp     eax, 0Fh
.text:0040B99F                 jz      short loc_40B9D0
.text:0040B9A1                 mov     [esp+2Ch+var_24], esi
.text:0040B9A5                 lea     ebx, [esp+2Ch+var_14]
.text:0040B9A9                 mov     [esp+2Ch+var_28], edi
.text:0040B9AD                 mov     [esp+2Ch+var_2C], ebx
.text:0040B9B0                 call    sub_40BB10
.text:0040B9B5                 xor     edx, edx
.text:0040B9B7                 test    al, al
.text:0040B9B9                 jz      short loc_40B9C5
.text:0040B9BB
.text:0040B9BB loc_40B9BB:                             ; CODE XREF: sub_40B960+8B↓j
.text:0040B9BB                                         ; sub_40B960+BE↓j
.text:0040B9BB                 mov     ecx, [esp+2Ch+var_14]
.text:0040B9BF                 cmp     ecx, edi
.text:0040B9C1                 jb      short loc_40B990
.text:0040B9C3
.text:0040B9C3 loc_40B9C3:                             ; CODE XREF: sub_40B960+21↑j
.text:0040B9C3                 xor     edx, edx
.text:0040B9C5
.text:0040B9C5 loc_40B9C5:                             ; CODE XREF: sub_40B960+59↑j
.text:0040B9C5                                         ; sub_40B960+B8↓j ...
.text:0040B9C5                 add     esp, 1Ch
.text:0040B9C8                 mov     eax, edx
.text:0040B9CA                 pop     ebx
.text:0040B9CB                 pop     esi
.text:0040B9CC                 pop     edi
.text:0040B9CD                 pop     ebp
.text:0040B9CE                 retn
.text:0040B9CE ; ---------------------------------------------------------------------------
.text:0040B9CF                 align 10h
.text:0040B9D0
.text:0040B9D0 loc_40B9D0:                             ; CODE XREF: sub_40B960+3F↑j
.text:0040B9D0                 lea     edx, [ecx+1]
.text:0040B9D3                 mov     [esp+2Ch+var_14], edx
.text:0040B9D7                 movsx   eax, byte ptr [edx+1]
.text:0040B9DB                 lea     edx, [ecx+3]
.text:0040B9DE                 movzx   ebx, byte ptr [ecx+1]
.text:0040B9E2                 mov     [esp+2Ch+var_14], edx
.text:0040B9E6                 shl     eax, 8
.text:0040B9E9                 add     ebx, eax
.text:0040B9EB                 js      short loc_40B9BB
.text:0040B9ED                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:0040B9F2                 jz      short loc_40BA20
.text:0040B9F4
.text:0040B9F4 loc_40B9F4:                             ; CODE XREF: sub_40B960+E9↓j
.text:0040B9F4                                         ; sub_40B960+111↓j
.text:0040B9F4                 movsx   ecx, byte ptr [edx-1]
.text:0040B9F8                 movzx   ebx, byte ptr [edx-2]
.text:0040B9FC                 mov     [esp+2Ch+var_2C], edx
.text:0040B9FF                 mov     [esp+2Ch+var_24], esi
.text:0040BA03                 shl     ecx, 8
.text:0040BA06                 add     ebx, ecx
.text:0040BA08                 lea     ecx, [ebx+edx]
.text:0040BA0B                 mov     [esp+2Ch+var_28], ecx
.text:0040BA0F                 call    sub_40BA90
.text:0040BA14                 xor     edx, edx
.text:0040BA16                 test    al, al
.text:0040BA18                 jz      short loc_40B9C5
.text:0040BA1A                 add     [esp+2Ch+var_14], ebx
.text:0040BA1E                 jmp     short loc_40B9BB
.text:0040BA20 ; ---------------------------------------------------------------------------
.text:0040BA20
.text:0040BA20 loc_40BA20:                             ; CODE XREF: sub_40B960+92↑j
.text:0040BA20                                         ; sub_40B960+109↓j
.text:0040BA20                 mov     [esp+2Ch+var_2C], edx
.text:0040BA23                 lea     ecx, [ebx+edx-3]
.text:0040BA27                 mov     [esp+2Ch+var_24], esi
.text:0040BA2B                 mov     [esp+2Ch+var_28], ecx
.text:0040BA2F                 call    sub_40BA90
.text:0040BA34                 xor     edx, edx
.text:0040BA36                 test    al, al
.text:0040BA38                 jz      short loc_40B9C5
.text:0040BA3A                 mov     ecx, [esp+2Ch+var_14]
.text:0040BA3E                 add     ecx, ebx
.text:0040BA40                 mov     edx, ecx
.text:0040BA42                 mov     [esp+2Ch+var_14], ecx
.text:0040BA46                 cmp     byte ptr [ecx], 0Fh
.text:0040BA49                 jnz     short loc_40B9F4
.text:0040BA4B                 inc     edx
.text:0040BA4C                 mov     [esp+2Ch+var_14], edx
.text:0040BA50                 movsx   eax, byte ptr [edx+1]
.text:0040BA54                 lea     edx, [ecx+3]
.text:0040BA57                 movzx   ebx, byte ptr [ecx+1]
.text:0040BA5B                 mov     [esp+2Ch+var_14], edx
.text:0040BA5F                 shl     eax, 8
.text:0040BA62                 add     ebx, eax
.text:0040BA64                 cmp     byte ptr [ebx+edx-3], 0Eh
.text:0040BA69                 jz      short loc_40BA20
.text:0040BA6B                 mov     [esp+2Ch+var_14], ecx
.text:0040BA6F                 mov     edx, ecx
.text:0040BA71                 jmp     short loc_40B9F4
.text:0040BA73 ; ---------------------------------------------------------------------------
.text:0040BA73
.text:0040BA73 loc_40BA73:                             ; CODE XREF: sub_40B960+36↑j
.text:0040BA73                 lea     edx, [ecx+2]
.text:0040BA76                 mov     [ebp+0], edx
.text:0040BA79                 mov     edx, 1
.text:0040BA7E                 jmp     loc_40B9C5
.text:0040BA7E sub_40B960      endp
.text:0040BA7E
.text:0040BA7E ; ---------------------------------------------------------------------------
.text:0040BA83                 align 10h
.text:0040BA90
.text:0040BA90 ; =============== S U B R O U T I N E =======================================
.text:0040BA90
.text:0040BA90
.text:0040BA90 sub_40BA90      proc near               ; CODE XREF: sub_40B960+AF↑p
.text:0040BA90                                         ; sub_40B960+CF↑p
.text:0040BA90
.text:0040BA90 var_1C          = dword ptr -1Ch
.text:0040BA90 var_18          = dword ptr -18h
.text:0040BA90 var_14          = dword ptr -14h
.text:0040BA90 var_C           = dword ptr -0Ch
.text:0040BA90 arg_0           = dword ptr  4
.text:0040BA90 arg_4           = dword ptr  8
.text:0040BA90 arg_8           = dword ptr  0Ch
.text:0040BA90
.text:0040BA90                 push    esi
.text:0040BA91                 push    ebx
.text:0040BA92                 sub     esp, 14h
.text:0040BA95                 mov     edx, [esp+1Ch+arg_0]
.text:0040BA99                 mov     ebx, [esp+1Ch+arg_4]
.text:0040BA9D                 mov     esi, [esp+1Ch+arg_8]
.text:0040BAA1                 mov     ecx, edx
.text:0040BAA3                 mov     [esp+1Ch+var_C], edx
.text:0040BAA7                 cmp     edx, ebx
.text:0040BAA9                 jnb     short loc_40BAD7
.text:0040BAAB                 nop
.text:0040BAAC                 lea     esi, [esi+0]
.text:0040BAB0
.text:0040BAB0 loc_40BAB0:                             ; CODE XREF: sub_40BA90+45↓j
.text:0040BAB0                 cmp     byte ptr [ecx], 0Fh
.text:0040BAB3                 jz      short loc_40BAE4
.text:0040BAB5                 mov     [esp+1Ch+var_14], esi
.text:0040BAB9                 lea     edx, [esp+1Ch+var_C]
.text:0040BABD                 mov     [esp+1Ch+var_1C], edx
.text:0040BAC0                 mov     [esp+1Ch+var_18], ebx
.text:0040BAC4                 call    sub_40BB10
.text:0040BAC9                 xor     edx, edx
.text:0040BACB                 test    al, al
.text:0040BACD                 jz      short loc_40BADC
.text:0040BACF
.text:0040BACF loc_40BACF:                             ; CODE XREF: sub_40BA90+70↓j
.text:0040BACF                 mov     ecx, [esp+1Ch+var_C]
.text:0040BAD3                 cmp     ecx, ebx
.text:0040BAD5                 jb      short loc_40BAB0
.text:0040BAD7
.text:0040BAD7 loc_40BAD7:                             ; CODE XREF: sub_40BA90+19↑j
.text:0040BAD7                 mov     edx, 1
.text:0040BADC
.text:0040BADC loc_40BADC:                             ; CODE XREF: sub_40BA90+3D↑j
.text:0040BADC                 add     esp, 14h
.text:0040BADF                 mov     eax, edx
.text:0040BAE1                 pop     ebx
.text:0040BAE2                 pop     esi
.text:0040BAE3                 retn
.text:0040BAE4 ; ---------------------------------------------------------------------------
.text:0040BAE4
.text:0040BAE4 loc_40BAE4:                             ; CODE XREF: sub_40BA90+23↑j
.text:0040BAE4                 lea     eax, [ecx+1]
.text:0040BAE7                 mov     [esp+1Ch+var_C], eax
.text:0040BAEB                 movsx   eax, byte ptr [eax+1]
.text:0040BAEF                 movzx   edx, byte ptr [ecx+1]
.text:0040BAF3                 shl     eax, 8
.text:0040BAF6                 add     edx, eax
.text:0040BAF8                 lea     eax, [edx+ecx+3]
.text:0040BAFC                 mov     [esp+1Ch+var_C], eax
.text:0040BB00                 jmp     short loc_40BACF
.text:0040BB00 sub_40BA90      endp
.text:0040BB00
.text:0040BB00 ; ---------------------------------------------------------------------------
.text:0040BB02                 align 10h
.text:0040BB10
.text:0040BB10 ; =============== S U B R O U T I N E =======================================
.text:0040BB10
.text:0040BB10
.text:0040BB10 sub_40BB10      proc near               ; CODE XREF: sub_40B960+50↑p
.text:0040BB10                                         ; sub_40BA90+34↑p
.text:0040BB10
.text:0040BB10 var_1C          = dword ptr -1Ch
.text:0040BB10 var_18          = dword ptr -18h
.text:0040BB10 var_14          = dword ptr -14h
.text:0040BB10 var_10          = dword ptr -10h
.text:0040BB10 var_C           = dword ptr -0Ch
.text:0040BB10 var_8           = dword ptr -8
.text:0040BB10 var_4           = dword ptr -4
.text:0040BB10 arg_0           = dword ptr  4
.text:0040BB10 arg_4           = dword ptr  8
.text:0040BB10 arg_8           = dword ptr  0Ch
.text:0040BB10
.text:0040BB10                 sub     esp, 1Ch
.text:0040BB13                 mov     [esp+1Ch+var_4], edi
.text:0040BB17                 mov     edi, [esp+1Ch+arg_0]
.text:0040BB1B                 mov     [esp+1Ch+var_C], ebx
.text:0040BB1F                 mov     ebx, [esp+1Ch+arg_8]
.text:0040BB23                 mov     [esp+1Ch+var_8], esi
.text:0040BB27                 mov     edx, [edi]
.text:0040BB29                 mov     [esp+1Ch+var_10], edx
.text:0040BB2D                 movzx   eax, byte ptr [edx]
.text:0040BB30                 inc     edx
.text:0040BB31                 mov     [esp+1Ch+var_10], edx
.text:0040BB35                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040BB38                 ja      def_40BB3E      ; jumptable 0040BB3E default case, cases 1-5,7,14-20,22,24,25
.text:0040BB3E                 jmp     ds:jpt_40BB3E[eax*4] ; switch jump
.text:0040BB3E ; ---------------------------------------------------------------------------
.text:0040BB45                 align 4
.text:0040BB48 jpt_40BB3E      dd offset loc_40BBF3    ; DATA XREF: sub_40BB10+2E↑r
.text:0040BB48                 dd offset def_40BB3E    ; jump table for switch statement
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset loc_40BBC0
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset loc_40BC22
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BC34
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset loc_40BC55
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset loc_40BC91
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset def_40BB3E
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BB48                 dd offset loc_40BBF3
.text:0040BBC0 ; ---------------------------------------------------------------------------
.text:0040BBC0
.text:0040BBC0 loc_40BBC0:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BBC0                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BBC0                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040BB3E case 6
.text:0040BBC4                 mov     edx, [esp+1Ch+arg_4]
.text:0040BBC8                 movzx   esi, byte ptr [ecx]
.text:0040BBCB                 lea     ecx, [esp+1Ch+var_10]
.text:0040BBCF                 mov     [esp+1Ch+var_18], edx
.text:0040BBD3                 mov     [esp+1Ch+var_1C], ecx
.text:0040BBD6                 mov     [esp+1Ch+var_14], ebx
.text:0040BBDA                 call    sub_40B960
.text:0040BBDF                 movzx   edx, byte ptr [ebx+esi*4]
.text:0040BBE3                 mov     cl, al
.text:0040BBE5                 and     edx, 3
.text:0040BBE8                 cmp     edx, 3
.text:0040BBEB                 jz      short loc_40BC10
.text:0040BBED
.text:0040BBED loc_40BBED:                             ; CODE XREF: sub_40BB10+110↓j
.text:0040BBED                 xor     eax, eax
.text:0040BBEF                 test    cl, cl
.text:0040BBF1                 jz      short loc_40BC00
.text:0040BBF3
.text:0040BBF3 loc_40BBF3:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BBF3                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BBF3                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040BB3E cases 0,9-12,26-29
.text:0040BBF7
.text:0040BBF7 loc_40BBF7:                             ; CODE XREF: sub_40BB10+11D↓j
.text:0040BBF7                                         ; sub_40BB10+143↓j
.text:0040BBF7                 mov     [edi], ecx
.text:0040BBF9                 mov     eax, 1
.text:0040BBFE                 mov     esi, esi
.text:0040BC00
.text:0040BC00 loc_40BC00:                             ; CODE XREF: sub_40BB10+E1↑j
.text:0040BC00                                         ; sub_40BB10+122↓j ...
.text:0040BC00                 mov     ebx, [esp+1Ch+var_C]
.text:0040BC04                 mov     esi, [esp+1Ch+var_8]
.text:0040BC08                 mov     edi, [esp+1Ch+var_4]
.text:0040BC0C                 add     esp, 1Ch
.text:0040BC0F                 retn
.text:0040BC10 ; ---------------------------------------------------------------------------
.text:0040BC10
.text:0040BC10 loc_40BC10:                             ; CODE XREF: sub_40BB10+DB↑j
.text:0040BC10                 mov     eax, [ebx+esi*4]
.text:0040BC13                 mov     edx, ecx
.text:0040BC15                 and     edx, 3
.text:0040BC18                 and     eax, 0FFFFFFFCh
.text:0040BC1B                 or      eax, edx
.text:0040BC1D                 mov     [ebx+esi*4], eax
.text:0040BC20                 jmp     short loc_40BBED
.text:0040BC22 ; ---------------------------------------------------------------------------
.text:0040BC22
.text:0040BC22 loc_40BC22:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BC22                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BC22                 mov     ecx, [esp+1Ch+var_10] ; jumptable 0040BB3E case 8
.text:0040BC26                 movzx   esi, byte ptr [ecx]
.text:0040BC29                 test    byte ptr [ebx+esi*4], 3
.text:0040BC2D                 jnz     short loc_40BBF7
.text:0040BC2F                 nop
.text:0040BC30
.text:0040BC30 def_40BB3E:                             ; CODE XREF: sub_40BB10+28↑j
.text:0040BC30                                         ; sub_40BB10+2E↑j ...
.text:0040BC30                 xor     eax, eax        ; jumptable 0040BB3E default case, cases 1-5,7,14-20,22,24,25
.text:0040BC32                 jmp     short loc_40BC00
.text:0040BC34 ; ---------------------------------------------------------------------------
.text:0040BC34
.text:0040BC34 loc_40BC34:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BC34                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BC34                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040BB3E case 13
.text:0040BC38                 lea     ecx, [edx+2]
.text:0040BC3B                 movsx   esi, byte ptr [edx+1]
.text:0040BC3F                 movzx   ebx, byte ptr [edx]
.text:0040BC42                 mov     [esp+1Ch+var_10], ecx
.text:0040BC46                 shl     esi, 8
.text:0040BC49                 add     ebx, esi
.text:0040BC4B                 js      short def_40BB3E ; jumptable 0040BB3E default case, cases 1-5,7,14-20,22,24,25
.text:0040BC4D                 add     ecx, ebx
.text:0040BC4F
.text:0040BC4F loc_40BC4F:                             ; CODE XREF: sub_40BB10+17F↓j
.text:0040BC4F                 mov     [esp+1Ch+var_10], ecx
.text:0040BC53                 jmp     short loc_40BBF7
.text:0040BC55 ; ---------------------------------------------------------------------------
.text:0040BC55
.text:0040BC55 loc_40BC55:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BC55                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BC55                 mov     edx, [esp+1Ch+var_10] ; jumptable 0040BB3E case 21
.text:0040BC59                 lea     esi, [edx+2]
.text:0040BC5C                 mov     [esp+1Ch+var_10], esi
.text:0040BC60                 movsx   eax, byte ptr [esi+1]
.text:0040BC64                 movzx   ebx, byte ptr [edx+2]
.text:0040BC68                 shl     eax, 8
.text:0040BC6B                 add     ebx, eax
.text:0040BC6D                 lea     eax, [edx+4]
.text:0040BC70                 mov     [esp+1Ch+var_10], eax
.text:0040BC74                 xor     eax, eax
.text:0040BC76                 test    ebx, ebx
.text:0040BC78                 jnz     short loc_40BC00
.text:0040BC7A                 mov     [esp+1Ch+var_10], edx
.text:0040BC7E                 mov     eax, edx
.text:0040BC80                 movsx   ebx, byte ptr [eax+1]
.text:0040BC84                 movzx   edx, byte ptr [edx]
.text:0040BC87                 shl     ebx, 8
.text:0040BC8A                 add     edx, ebx
.text:0040BC8C                 lea     ecx, [edx+esi]
.text:0040BC8F                 jmp     short loc_40BC4F
.text:0040BC91 ; ---------------------------------------------------------------------------
.text:0040BC91
.text:0040BC91 loc_40BC91:                             ; CODE XREF: sub_40BB10+2E↑j
.text:0040BC91                                         ; DATA XREF: sub_40BB10:jpt_40BB3E↑o
.text:0040BC91                 add     [esp+1Ch+var_10], 4 ; jumptable 0040BB3E case 23
.text:0040BC96                 jmp     short def_40BB3E ; jumptable 0040BB3E default case, cases 1-5,7,14-20,22,24,25
.text:0040BC96 sub_40BB10      endp
.text:0040BC96
.text:0040BC96 ; ---------------------------------------------------------------------------
.text:0040BC98                 align 10h
.text:0040BCA0
.text:0040BCA0 ; =============== S U B R O U T I N E =======================================
.text:0040BCA0
.text:0040BCA0
.text:0040BCA0 sub_40BCA0      proc near               ; CODE XREF: sub_4095E0+1B06↑p
.text:0040BCA0
.text:0040BCA0 arg_0           = dword ptr  4
.text:0040BCA0 arg_4           = dword ptr  8
.text:0040BCA0 arg_8           = dword ptr  0Ch
.text:0040BCA0 arg_C           = dword ptr  10h
.text:0040BCA0
.text:0040BCA0                 push    edi
.text:0040BCA1                 push    esi
.text:0040BCA2                 push    ebx
.text:0040BCA3                 mov     esi, [esp+0Ch+arg_8]
.text:0040BCA7                 mov     edi, [esp+0Ch+arg_C]
.text:0040BCAB                 mov     ebx, [esp+0Ch+arg_0]
.text:0040BCAF                 test    esi, esi
.text:0040BCB1                 mov     ecx, [esp+0Ch+arg_4]
.text:0040BCB5                 jz      short loc_40BCD4
.text:0040BCB7                 mov     esi, esi
.text:0040BCB9                 lea     edi, [edi+0]
.text:0040BCC0
.text:0040BCC0 loc_40BCC0:                             ; CODE XREF: sub_40BCA0+32↓j
.text:0040BCC0                 movzx   eax, byte ptr [ecx]
.text:0040BCC3                 inc     ecx
.text:0040BCC4                 movzx   edx, byte ptr [ebx]
.text:0040BCC7                 inc     ebx
.text:0040BCC8                 movzx   eax, byte ptr [eax+edi]
.text:0040BCCC                 cmp     [edx+edi], al
.text:0040BCCF                 jnz     short loc_40BCDA
.text:0040BCD1                 dec     esi
.text:0040BCD2                 jnz     short loc_40BCC0
.text:0040BCD4
.text:0040BCD4 loc_40BCD4:                             ; CODE XREF: sub_40BCA0+15↑j
.text:0040BCD4                 xor     eax, eax
.text:0040BCD6
.text:0040BCD6 loc_40BCD6:                             ; CODE XREF: sub_40BCA0+3F↓j
.text:0040BCD6                 pop     ebx
.text:0040BCD7                 pop     esi
.text:0040BCD8                 pop     edi
.text:0040BCD9                 retn
.text:0040BCDA ; ---------------------------------------------------------------------------
.text:0040BCDA
.text:0040BCDA loc_40BCDA:                             ; CODE XREF: sub_40BCA0+2F↑j
.text:0040BCDA                 mov     eax, 1
.text:0040BCDF                 jmp     short loc_40BCD6
.text:0040BCDF sub_40BCA0      endp
.text:0040BCDF
.text:0040BCDF ; ---------------------------------------------------------------------------
.text:0040BCE1                 align 20h
.text:0040BD00 aSuccess        db 'Success',0          ; DATA XREF: .text:0040C3A1↓o
.text:0040BD00                                         ; .text:0040C3EB↓o
.text:0040BD08 aNoMatch        db 'No match',0
.text:0040BD11 aInvalidRegular db 'Invalid regular expression',0
.text:0040BD2C aInvalidCollati db 'Invalid collation character',0
.text:0040BD48 aInvalidCharact db 'Invalid character class name',0
.text:0040BD65 aTrailingBacksl db 'Trailing backslash',0
.text:0040BD78 aInvalidBackRef db 'Invalid back reference',0
.text:0040BD8F aUnmatchedOr    db 'Unmatched [ or [^',0
.text:0040BDA1 aUnmatchedOr_0  db 'Unmatched ( or \(',0
.text:0040BDB3 aUnmatched      db 'Unmatched \{',0
.text:0040BDC0 aInvalidContent db 'Invalid content of \{\}',0
.text:0040BDD8 aInvalidRangeEn db 'Invalid range end',0
.text:0040BDEA aMemoryExhauste_1 db 'Memory exhausted',0
.text:0040BDFB aInvalidPrecedi db 'Invalid preceding regular expression',0
.text:0040BE20 aPrematureEndOf db 'Premature end of regular expression',0
.text:0040BE44 aRegularExpress db 'Regular expression too big',0
.text:0040BE5F aUnmatchedOr_1  db 'Unmatched ) or \)',0
.text:0040BE71                 db 0EBh, 0Dh, 90h
.text:0040BE74                 db 0Ch dup(90h)
.text:0040BE80 dword_40BE80    dd 0                    ; DATA XREF: .text:0040C39A↓r
.text:0040BE80                                         ; .text:0040C3E4↓r
.text:0040BE84                 dd 8, 11h, 2Ch, 48h, 65h, 78h, 8Fh, 0A1h, 0B3h, 0C0h, 0D8h
.text:0040BE84                 dd 0EAh, 0FBh, 120h, 144h, 15Fh, 0B68Dh, 0BF8D0000h, 0
.text:0040BED0
.text:0040BED0 ; =============== S U B R O U T I N E =======================================
.text:0040BED0
.text:0040BED0
.text:0040BED0 sub_40BED0      proc near               ; CODE XREF: sub_40C4F0+25A0↓p
.text:0040BED0
.text:0040BED0 arg_0           = dword ptr  4
.text:0040BED0 arg_8           = dword ptr  0Ch
.text:0040BED0 arg_C           = dword ptr  10h
.text:0040BED0
.text:0040BED0                 mov     edx, [esp+arg_8]
.text:0040BED4                 mov     ecx, [esp+arg_C]
.text:0040BED8                 dec     edx
.text:0040BED9                 js      short loc_40BEFA
.text:0040BEDB                 lea     eax, [edx+edx*4]
.text:0040BEDE                 shl     eax, 2
.text:0040BEE1                 add     eax, [esp+arg_0]
.text:0040BEE5                 add     eax, 10h
.text:0040BEE8                 nop
.text:0040BEE9                 lea     esi, [esi+0]
.text:0040BEF0
.text:0040BEF0 loc_40BEF0:                             ; CODE XREF: sub_40BED0+28↓j
.text:0040BEF0                 cmp     [eax], ecx
.text:0040BEF2                 jz      short loc_40BEFD
.text:0040BEF4                 sub     eax, 14h
.text:0040BEF7                 dec     edx
.text:0040BEF8                 jns     short loc_40BEF0
.text:0040BEFA
.text:0040BEFA loc_40BEFA:                             ; CODE XREF: sub_40BED0+9↑j
.text:0040BEFA                 xor     eax, eax
.text:0040BEFC                 retn
.text:0040BEFD ; ---------------------------------------------------------------------------
.text:0040BEFD
.text:0040BEFD loc_40BEFD:                             ; CODE XREF: sub_40BED0+22↑j
.text:0040BEFD                 mov     eax, 1
.text:0040BF02                 retn
.text:0040BF02 sub_40BED0      endp
.text:0040BF02
.text:0040BF02 ; ---------------------------------------------------------------------------
.text:0040BF03                 align 10h
.text:0040BF10
.text:0040BF10 ; =============== S U B R O U T I N E =======================================
.text:0040BF10
.text:0040BF10 ; Attributes: thunk
.text:0040BF10
.text:0040BF10 sub_40BF10      proc near               ; CODE XREF: sub_40BF20+D1↓p
.text:0040BF10                                         ; sub_40F860+258↓p
.text:0040BF10                 jmp     sub_40FB00
.text:0040BF10 sub_40BF10      endp
.text:0040BF10
.text:0040BF10 ; ---------------------------------------------------------------------------
.text:0040BF15                 align 10h
.text:0040BF20
.text:0040BF20 ; =============== S U B R O U T I N E =======================================
.text:0040BF20
.text:0040BF20
.text:0040BF20 ; int __cdecl sub_40BF20(int, char *Str, int)
.text:0040BF20 sub_40BF20      proc near               ; CODE XREF: .text:00408FBC↑p
.text:0040BF20                                         ; .text:0040903F↑p
.text:0040BF20
.text:0040BF20 Size            = dword ptr -2Ch
.text:0040BF20 Type            = dword ptr -28h
.text:0040BF20 var_24          = dword ptr -24h
.text:0040BF20 var_20          = dword ptr -20h
.text:0040BF20 arg_0           = dword ptr  4
.text:0040BF20 Str             = dword ptr  8
.text:0040BF20 arg_8           = dword ptr  0Ch
.text:0040BF20
.text:0040BF20                 push    ebp
.text:0040BF21                 push    edi
.text:0040BF22                 push    esi
.text:0040BF23                 push    ebx
.text:0040BF24                 sub     esp, 1Ch
.text:0040BF27                 mov     edi, [esp+2Ch+arg_0]
.text:0040BF2B                 test    byte ptr [esp+2Ch+arg_8], 1
.text:0040BF30                 mov     dword ptr [edi], 0
.text:0040BF36                 setnz   dl
.text:0040BF39                 mov     dword ptr [edi+4], 0
.text:0040BF40                 mov     dword ptr [edi+8], 0
.text:0040BF47                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040BF4E                 movzx   ebp, dl
.text:0040BF51                 dec     ebp
.text:0040BF52                 and     ebp, 0FFFD4FCAh
.text:0040BF58                 add     ebp, 3B2FCh
.text:0040BF5E                 call    malloc
.text:0040BF63                 test    byte ptr [esp+2Ch+arg_8], 2
.text:0040BF68                 mov     [edi+10h], eax
.text:0040BF6B                 jnz     loc_40C020
.text:0040BF71                 mov     dword ptr [edi+14h], 0
.text:0040BF78
.text:0040BF78 loc_40BF78:                             ; CODE XREF: sub_40BF20+150↓j
.text:0040BF78                 test    byte ptr [esp+2Ch+arg_8], 4
.text:0040BF7D                 jz      loc_40C017
.text:0040BF83                 or      byte ptr [edi+1Ch], 80h
.text:0040BF87                 and     ebp, 0FFFFFFBFh
.text:0040BF8A                 or      ebp, 100h
.text:0040BF90
.text:0040BF90 loc_40BF90:                             ; CODE XREF: sub_40BF20+FB↓j
.text:0040BF90                 shr     [esp+2Ch+arg_8], 3
.text:0040BF95                 movzx   edx, byte ptr [esp+2Ch+arg_8]
.text:0040BF9A                 movzx   ecx, byte ptr [edi+1Ch]
.text:0040BF9E                 and     dl, 1
.text:0040BFA1                 shl     dl, 4
.text:0040BFA4                 and     cl, 0EFh
.text:0040BFA7                 or      cl, dl
.text:0040BFA9                 mov     [edi+1Ch], cl
.text:0040BFAC                 mov     esi, [esp+2Ch+Str]
.text:0040BFB0                 mov     [esp+2Ch+Size], esi ; Str
.text:0040BFB3                 call    strlen
.text:0040BFB8                 mov     [esp+2Ch+Type], eax
.text:0040BFBC                 mov     ebx, [esp+2Ch+Str]
.text:0040BFC0                 mov     [esp+2Ch+var_20], edi
.text:0040BFC4                 mov     [esp+2Ch+var_24], ebp
.text:0040BFC8                 mov     [esp+2Ch+Size], ebx
.text:0040BFCB                 call    sub_40C4F0
.text:0040BFD0                 cmp     eax, 10h
.text:0040BFD3                 mov     ebx, eax
.text:0040BFD5                 jz      short loc_40C010
.text:0040BFD7
.text:0040BFD7 loc_40BFD7:                             ; CODE XREF: sub_40BF20+F5↓j
.text:0040BFD7                 test    ebx, ebx
.text:0040BFD9                 jnz     short loc_40BFE2
.text:0040BFDB                 mov     ebp, [edi+10h]
.text:0040BFDE                 test    ebp, ebp
.text:0040BFE0                 jnz     short loc_40BFEE
.text:0040BFE2
.text:0040BFE2 loc_40BFE2:                             ; CODE XREF: sub_40BF20+B9↑j
.text:0040BFE2                                         ; sub_40BF20+D9↓j ...
.text:0040BFE2                 mov     edx, ebx
.text:0040BFE4
.text:0040BFE4 loc_40BFE4:                             ; CODE XREF: sub_40BF20+116↓j
.text:0040BFE4                 add     esp, 1Ch
.text:0040BFE7                 mov     eax, edx
.text:0040BFE9                 pop     ebx
.text:0040BFEA                 pop     esi
.text:0040BFEB                 pop     edi
.text:0040BFEC                 pop     ebp
.text:0040BFED                 retn
.text:0040BFEE ; ---------------------------------------------------------------------------
.text:0040BFEE
.text:0040BFEE loc_40BFEE:                             ; CODE XREF: sub_40BF20+C0↑j
.text:0040BFEE                 mov     [esp+2Ch+Size], edi
.text:0040BFF1                 call    sub_40BF10
.text:0040BFF6                 cmp     eax, 0FFFFFFFEh
.text:0040BFF9                 jnz     short loc_40BFE2
.text:0040BFFB                 mov     esi, [edi+10h]
.text:0040BFFE                 mov     [esp+2Ch+Size], esi ; Block
.text:0040C001                 call    free
.text:0040C006                 mov     dword ptr [edi+10h], 0
.text:0040C00D                 jmp     short loc_40BFE2
.text:0040C00D ; ---------------------------------------------------------------------------
.text:0040C00F                 align 10h
.text:0040C010
.text:0040C010 loc_40C010:                             ; CODE XREF: sub_40BF20+B5↑j
.text:0040C010                 mov     ebx, 8
.text:0040C015                 jmp     short loc_40BFD7
.text:0040C017 ; ---------------------------------------------------------------------------
.text:0040C017
.text:0040C017 loc_40C017:                             ; CODE XREF: sub_40BF20+5D↑j
.text:0040C017                 and     byte ptr [edi+1Ch], 7Fh
.text:0040C01B                 jmp     loc_40BF90
.text:0040C020 ; ---------------------------------------------------------------------------
.text:0040C020
.text:0040C020 loc_40C020:                             ; CODE XREF: sub_40BF20+4B↑j
.text:0040C020                 mov     [esp+2Ch+Size], 100h ; Size
.text:0040C027                 call    malloc
.text:0040C02C                 mov     [edi+14h], eax
.text:0040C02F                 test    eax, eax
.text:0040C031                 mov     edx, 0Ch
.text:0040C036                 jz      short loc_40BFE4
.text:0040C038                 xor     ebx, ebx
.text:0040C03A                 lea     esi, [esi+0]
.text:0040C040
.text:0040C040 loc_40C040:                             ; CODE XREF: sub_40BF20+14E↓j
.text:0040C040                 mov     edx, ds:__mb_cur_max
.text:0040C046                 mov     esi, [edi+14h]
.text:0040C049                 cmp     dword ptr [edx], 1
.text:0040C04C                 jz      short loc_40C081
.text:0040C04E                 mov     [esp+2Ch+Type], 1 ; Type
.text:0040C056                 mov     [esp+2Ch+Size], ebx ; C
.text:0040C059                 call    _isctype
.text:0040C05E
.text:0040C05E loc_40C05E:                             ; CODE XREF: sub_40BF20+170↓j
.text:0040C05E                 test    eax, eax
.text:0040C060                 mov     dl, bl
.text:0040C062                 jnz     short loc_40C075
.text:0040C064
.text:0040C064 loc_40C064:                             ; CODE XREF: sub_40BF20+15F↓j
.text:0040C064                 mov     [ebx+esi], dl
.text:0040C067                 inc     ebx
.text:0040C068                 cmp     ebx, 0FFh
.text:0040C06E                 jbe     short loc_40C040
.text:0040C070                 jmp     loc_40BF78
.text:0040C075 ; ---------------------------------------------------------------------------
.text:0040C075
.text:0040C075 loc_40C075:                             ; CODE XREF: sub_40BF20+142↑j
.text:0040C075                 mov     [esp+2Ch+Size], ebx ; C
.text:0040C078                 call    tolower
.text:0040C07D                 mov     dl, al
.text:0040C07F                 jmp     short loc_40C064
.text:0040C081 ; ---------------------------------------------------------------------------
.text:0040C081
.text:0040C081 loc_40C081:                             ; CODE XREF: sub_40BF20+12C↑j
.text:0040C081                 mov     edx, ds:_pctype
.text:0040C087                 mov     ecx, [edx]
.text:0040C089                 movzx   eax, word ptr [ecx+ebx*2]
.text:0040C08D                 and     eax, 1
.text:0040C090                 jmp     short loc_40C05E
.text:0040C090 sub_40BF20      endp
.text:0040C090
.text:0040C090 ; ---------------------------------------------------------------------------
.text:0040C092                 align 10h
.text:0040C0A0
.text:0040C0A0 ; =============== S U B R O U T I N E =======================================
.text:0040C0A0
.text:0040C0A0
.text:0040C0A0 ; int __cdecl sub_40C0A0(int, char *, int, int, int)
.text:0040C0A0 sub_40C0A0      proc near               ; CODE XREF: .text:00408FF3↑p
.text:0040C0A0                                         ; .text:00409076↑p
.text:0040C0A0
.text:0040C0A0 Str             = dword ptr -8Ch
.text:0040C0A0 var_88          = dword ptr -88h
.text:0040C0A0 var_84          = dword ptr -84h
.text:0040C0A0 var_80          = dword ptr -80h
.text:0040C0A0 var_7C          = dword ptr -7Ch
.text:0040C0A0 var_78          = dword ptr -78h
.text:0040C0A0 var_74          = dword ptr -74h
.text:0040C0A0 var_70          = dword ptr -70h
.text:0040C0A0 var_6C          = dword ptr -6Ch
.text:0040C0A0 var_4D          = byte ptr -4Dh
.text:0040C0A0 var_4C          = dword ptr -4Ch
.text:0040C0A0 var_48          = dword ptr -48h
.text:0040C0A0 var_44          = dword ptr -44h
.text:0040C0A0 var_40          = dword ptr -40h
.text:0040C0A0 var_3C          = dword ptr -3Ch
.text:0040C0A0 var_38          = dword ptr -38h
.text:0040C0A0 var_34          = dword ptr -34h
.text:0040C0A0 var_30          = dword ptr -30h
.text:0040C0A0 var_2C          = dword ptr -2Ch
.text:0040C0A0 Block           = dword ptr -28h
.text:0040C0A0 var_24          = dword ptr -24h
.text:0040C0A0 arg_0           = dword ptr  4
.text:0040C0A0 arg_4           = dword ptr  8
.text:0040C0A0 arg_8           = dword ptr  0Ch
.text:0040C0A0 arg_C           = dword ptr  10h
.text:0040C0A0 arg_10          = dword ptr  14h
.text:0040C0A0
.text:0040C0A0                 push    ebp
.text:0040C0A1                 push    edi
.text:0040C0A2                 push    esi
.text:0040C0A3                 push    ebx
.text:0040C0A4                 sub     esp, 7Ch
.text:0040C0A7                 mov     ebx, [esp+8Ch+arg_0]
.text:0040C0AE                 mov     edx, [esp+8Ch+arg_4]
.text:0040C0B5                 mov     ebp, [esp+8Ch+arg_8]
.text:0040C0BC                 mov     esi, [esp+8Ch+arg_10]
.text:0040C0C3                 mov     [esp+8Ch+Str], edx ; Str
.text:0040C0C6                 call    strlen
.text:0040C0CB                 test    byte ptr [ebx+1Ch], 10h
.text:0040C0CF                 mov     edi, eax
.text:0040C0D1                 mov     [esp+8Ch+var_4D], 0
.text:0040C0D6                 jnz     short loc_40C0F0
.text:0040C0D8                 test    ebp, ebp
.text:0040C0DA                 jz      short loc_40C0F0
.text:0040C0DC                 mov     [esp+8Ch+var_4D], 1
.text:0040C0E1                 jmp     short loc_40C0F0
.text:0040C0E1 ; ---------------------------------------------------------------------------
.text:0040C0E3                 align 10h
.text:0040C0F0
.text:0040C0F0 loc_40C0F0:                             ; CODE XREF: sub_40C0A0+36↑j
.text:0040C0F0                                         ; sub_40C0A0+3A↑j ...
.text:0040C0F0                 mov     edx, [ebx]
.text:0040C0F2                 mov     [esp+8Ch+var_4C], edx
.text:0040C0F6                 mov     ecx, [ebx+4]
.text:0040C0F9                 mov     [esp+8Ch+var_48], ecx
.text:0040C0FD                 mov     edx, [ebx+8]
.text:0040C100                 mov     [esp+8Ch+var_44], edx
.text:0040C104                 mov     ecx, [ebx+0Ch]
.text:0040C107                 mov     [esp+8Ch+var_40], ecx
.text:0040C10B                 mov     edx, [ebx+10h]
.text:0040C10E                 mov     [esp+8Ch+var_3C], edx
.text:0040C112                 mov     ecx, [ebx+14h]
.text:0040C115                 mov     [esp+8Ch+var_38], ecx
.text:0040C119                 mov     edx, [ebx+18h]
.text:0040C11C                 mov     [esp+8Ch+var_34], edx
.text:0040C120                 mov     ecx, [ebx+1Ch]
.text:0040C123                 mov     edx, esi
.text:0040C125                 shr     esi, 1
.text:0040C127                 and     dl, 1
.text:0040C12A                 mov     eax, esi
.text:0040C12C                 mov     [esp+8Ch+var_30], ecx
.text:0040C130                 shl     dl, 5
.text:0040C133                 and     al, 1
.text:0040C135                 movzx   ebx, byte ptr [esp+8Ch+var_30]
.text:0040C13A                 shl     al, 6
.text:0040C13D                 and     bl, 9Fh
.text:0040C140                 or      bl, dl
.text:0040C142                 or      bl, al
.text:0040C144                 and     bl, 0F9h
.text:0040C147                 or      bl, 4
.text:0040C14A                 cmp     [esp+8Ch+var_4D], 0
.text:0040C14F                 mov     byte ptr [esp+8Ch+var_30], bl
.text:0040C153                 jnz     loc_40C206
.text:0040C159
.text:0040C159 loc_40C159:                             ; CODE XREF: sub_40C0A0+18F↓j
.text:0040C159                 movzx   ecx, [esp+8Ch+var_4D]
.text:0040C15E                 lea     esi, [esp+8Ch+var_2C]
.text:0040C162                 mov     [esp+8Ch+var_6C], edi
.text:0040C166                 lea     ebx, [esp+8Ch+var_4C]
.text:0040C16A                 mov     [esp+8Ch+var_74], edi
.text:0040C16E                 mov     [esp+8Ch+var_78], 0
.text:0040C176                 xor     cl, 1
.text:0040C179                 movzx   edx, cl
.text:0040C17C                 mov     [esp+8Ch+var_7C], edi
.text:0040C180                 mov     ecx, [esp+8Ch+arg_4]
.text:0040C187                 dec     edx
.text:0040C188                 mov     [esp+8Ch+var_84], 0
.text:0040C190                 and     esi, edx
.text:0040C192                 mov     [esp+8Ch+var_70], esi
.text:0040C196                 mov     [esp+8Ch+var_80], ecx
.text:0040C19A                 mov     [esp+8Ch+var_88], 0
.text:0040C1A2                 mov     [esp+8Ch+Str], ebx
.text:0040C1A5                 call    sub_40F860
.text:0040C1AA                 cmp     [esp+8Ch+var_4D], 0
.text:0040C1AF                 mov     esi, eax
.text:0040C1B1                 jz      short loc_40C1F1
.text:0040C1B3                 test    eax, eax
.text:0040C1B5                 js      short loc_40C200
.text:0040C1B7                 xor     edx, edx
.text:0040C1B9                 cmp     edx, ebp
.text:0040C1BB                 jnb     short loc_40C200
.text:0040C1BD                 mov     ecx, [esp+8Ch+Block]
.text:0040C1C1                 mov     ebx, [esp+8Ch+var_24]
.text:0040C1C5                 lea     esi, [esi+0]
.text:0040C1C9                 lea     edi, [edi+0]
.text:0040C1D0
.text:0040C1D0 loc_40C1D0:                             ; CODE XREF: sub_40C0A0+147↓j
.text:0040C1D0                 mov     eax, [ecx+edx*4]
.text:0040C1D3                 mov     edi, [esp+8Ch+arg_C]
.text:0040C1DA                 mov     [edi+edx*8], eax
.text:0040C1DD                 mov     eax, [ebx+edx*4]
.text:0040C1E0                 mov     [edi+edx*8+4], eax
.text:0040C1E4                 inc     edx
.text:0040C1E5                 cmp     edx, ebp
.text:0040C1E7                 jb      short loc_40C1D0
.text:0040C1E9
.text:0040C1E9 loc_40C1E9:                             ; CODE XREF: sub_40C0A0+164↓j
.text:0040C1E9                 mov     [esp+8Ch+Str], ecx ; Block
.text:0040C1EC                 call    free
.text:0040C1F1
.text:0040C1F1 loc_40C1F1:                             ; CODE XREF: sub_40C0A0+111↑j
.text:0040C1F1                 mov     eax, esi
.text:0040C1F3                 shr     eax, 1Fh
.text:0040C1F6
.text:0040C1F6 loc_40C1F6:                             ; CODE XREF: sub_40C0A0+186↓j
.text:0040C1F6                 add     esp, 7Ch
.text:0040C1F9                 pop     ebx
.text:0040C1FA                 pop     esi
.text:0040C1FB                 pop     edi
.text:0040C1FC                 pop     ebp
.text:0040C1FD                 retn
.text:0040C1FD ; ---------------------------------------------------------------------------
.text:0040C1FE                 align 10h
.text:0040C200
.text:0040C200 loc_40C200:                             ; CODE XREF: sub_40C0A0+115↑j
.text:0040C200                                         ; sub_40C0A0+11B↑j
.text:0040C200                 mov     ecx, [esp+8Ch+Block]
.text:0040C204                 jmp     short loc_40C1E9
.text:0040C206 ; ---------------------------------------------------------------------------
.text:0040C206
.text:0040C206 loc_40C206:                             ; CODE XREF: sub_40C0A0+B3↑j
.text:0040C206                 mov     [esp+8Ch+var_2C], ebp
.text:0040C20A                 lea     esi, ds:0[ebp*8]
.text:0040C211                 mov     [esp+8Ch+Str], esi ; Size
.text:0040C214                 call    malloc
.text:0040C219                 mov     [esp+8Ch+Block], eax
.text:0040C21D                 mov     ecx, eax
.text:0040C21F                 test    ecx, ecx
.text:0040C221                 mov     eax, 1
.text:0040C226                 jz      short loc_40C1F6
.text:0040C228                 lea     eax, [ecx+ebp*4]
.text:0040C22B                 mov     [esp+8Ch+var_24], eax
.text:0040C22F                 jmp     loc_40C159
.text:0040C22F sub_40C0A0      endp
.text:0040C22F
.text:0040C22F ; ---------------------------------------------------------------------------
.text:0040C234                 align 10h
.text:0040C240                 mov     eax, ds:dword_41B8D0
.text:0040C245                 mov     ecx, [esp+4]
.text:0040C249                 mov     ds:dword_41B8D0, ecx
.text:0040C24F                 retn
.text:0040C250 ; ---------------------------------------------------------------------------
.text:0040C250                 push    ebx
.text:0040C251                 mov     ebx, [esp+10h]
.text:0040C255                 mov     edx, [esp+8]
.text:0040C259                 mov     ecx, [esp+0Ch]
.text:0040C25D                 test    ebx, ebx
.text:0040C25F                 jz      short loc_40C280
.text:0040C261                 movzx   eax, byte ptr [edx+1Ch]
.text:0040C265                 and     al, 0F9h
.text:0040C267                 or      al, 2
.text:0040C269                 mov     [edx+1Ch], al
.text:0040C26C                 mov     edx, [esp+14h]
.text:0040C270                 mov     [ecx], ebx
.text:0040C272                 mov     [ecx+4], edx
.text:0040C275                 mov     edx, [esp+18h]
.text:0040C279                 mov     [ecx+8], edx
.text:0040C27C
.text:0040C27C loc_40C27C:                             ; CODE XREF: .text:0040C298↓j
.text:0040C27C                 pop     ebx
.text:0040C27D                 retn
.text:0040C27D ; ---------------------------------------------------------------------------
.text:0040C27E                 align 10h
.text:0040C280
.text:0040C280 loc_40C280:                             ; CODE XREF: .text:0040C25F↑j
.text:0040C280                 and     byte ptr [edx+1Ch], 0F9h
.text:0040C284                 mov     dword ptr [ecx], 0
.text:0040C28A                 mov     dword ptr [ecx+8], 0
.text:0040C291                 mov     dword ptr [ecx+4], 0
.text:0040C298                 jmp     short loc_40C27C
.text:0040C298 ; ---------------------------------------------------------------------------
.text:0040C29A                 align 10h
.text:0040C2A0                 sub     esp, 2Ch
.text:0040C2A3                 mov     edx, [esp+44h]
.text:0040C2A7                 mov     dword ptr [esp+8], 0
.text:0040C2AF                 mov     ecx, [esp+38h]
.text:0040C2B3                 mov     dword ptr [esp+4], 0
.text:0040C2BB                 mov     [esp+1Ch], edx
.text:0040C2BF                 mov     edx, [esp+40h]
.text:0040C2C3                 mov     [esp+20h], ecx
.text:0040C2C7                 mov     [esp+10h], ecx
.text:0040C2CB                 mov     [esp+18h], edx
.text:0040C2CF                 mov     edx, [esp+3Ch]
.text:0040C2D3                 mov     [esp+14h], edx
.text:0040C2D7                 mov     edx, [esp+34h]
.text:0040C2DB                 mov     [esp+0Ch], edx
.text:0040C2DF                 mov     edx, [esp+30h]
.text:0040C2E3                 mov     [esp], edx
.text:0040C2E6                 call    sub_40F860
.text:0040C2EB                 add     esp, 2Ch
.text:0040C2EE                 retn
.text:0040C2EE ; ---------------------------------------------------------------------------
.text:0040C2EF                 align 10h
.text:0040C2F0                 jmp     sub_40F860
.text:0040C2F0 ; ---------------------------------------------------------------------------
.text:0040C2F5                 align 10h
.text:0040C300                 sub     esp, 2Ch
.text:0040C303                 mov     edx, [esp+40h]
.text:0040C307                 mov     dword ptr [esp+8], 0
.text:0040C30F                 mov     ecx, [esp+38h]
.text:0040C313                 mov     dword ptr [esp+4], 0
.text:0040C31B                 mov     [esp+18h], edx
.text:0040C31F                 mov     edx, [esp+3Ch]
.text:0040C323                 mov     [esp+1Ch], ecx
.text:0040C327                 mov     [esp+10h], ecx
.text:0040C32B                 mov     [esp+14h], edx
.text:0040C32F                 mov     edx, [esp+34h]
.text:0040C333                 mov     [esp+0Ch], edx
.text:0040C337                 mov     edx, [esp+30h]
.text:0040C33B                 mov     [esp], edx
.text:0040C33E                 call    sub_4095E0
.text:0040C343                 add     esp, 2Ch
.text:0040C346                 retn
.text:0040C346 ; ---------------------------------------------------------------------------
.text:0040C347                 align 10h
.text:0040C350                 jmp     sub_4095E0
.text:0040C350 ; ---------------------------------------------------------------------------
.text:0040C355                 align 10h
.text:0040C360                 sub     esp, 1Ch
.text:0040C363                 mov     ecx, [esp+28h]
.text:0040C367                 movzx   edx, byte ptr [ecx+1Ch]
.text:0040C36B                 and     dl, 0E9h
.text:0040C36E                 or      dl, 80h
.text:0040C371                 mov     [ecx+1Ch], dl
.text:0040C374                 mov     edx, [esp+24h]
.text:0040C378                 mov     [esp+0Ch], ecx
.text:0040C37C                 mov     ecx, ds:dword_41B8D0
.text:0040C382                 mov     [esp+4], edx
.text:0040C386                 mov     edx, [esp+20h]
.text:0040C38A                 mov     [esp+8], ecx
.text:0040C38E                 mov     [esp], edx
.text:0040C391                 call    sub_40C4F0
.text:0040C396                 test    eax, eax
.text:0040C398                 jz      short loc_40C3B4
.text:0040C39A                 mov     ecx, ds:dword_40BE80[eax*4]
.text:0040C3A1                 add     ecx, offset aSuccess ; "Success"
.text:0040C3A7                 mov     [esp+20h], ecx
.text:0040C3AB                 add     esp, 1Ch
.text:0040C3AE                 jmp     ds:libintl_gettext
.text:0040C3B4 ; ---------------------------------------------------------------------------
.text:0040C3B4
.text:0040C3B4 loc_40C3B4:                             ; CODE XREF: .text:0040C398↑j
.text:0040C3B4                 xor     eax, eax
.text:0040C3B6                 add     esp, 1Ch
.text:0040C3B9                 retn
.text:0040C3B9 ; ---------------------------------------------------------------------------
.text:0040C3BA                 align 10h
.text:0040C3C0                 sub     esp, 1Ch
.text:0040C3C3                 mov     eax, [esp+20h]
.text:0040C3C7                 mov     [esp+14h], edi
.text:0040C3CB                 mov     edi, [esp+2Ch]
.text:0040C3CF                 cmp     eax, 10h
.text:0040C3D2                 mov     [esp+18h], ebp
.text:0040C3D6                 mov     ebp, [esp+28h]
.text:0040C3DA                 mov     [esp+0Ch], ebx
.text:0040C3DE                 mov     [esp+10h], esi
.text:0040C3E2                 ja      short loc_40C458
.text:0040C3E4                 mov     edx, ds:dword_40BE80[eax*4]
.text:0040C3EB                 add     edx, offset aSuccess ; "Success"
.text:0040C3F1                 mov     [esp], edx
.text:0040C3F4                 call    ds:libintl_gettext
.text:0040C3FA                 mov     [esp], eax
.text:0040C3FD                 mov     ebx, eax
.text:0040C3FF                 call    strlen
.text:0040C404                 test    edi, edi
.text:0040C406                 lea     esi, [eax+1]
.text:0040C409                 jz      short loc_40C430
.text:0040C40B                 cmp     esi, edi
.text:0040C40D                 jbe     short loc_40C446
.text:0040C40F                 mov     [esp+4], ebx
.text:0040C413                 lea     edx, [edi-1]
.text:0040C416                 mov     [esp+8], edx
.text:0040C41A                 mov     [esp], ebp
.text:0040C41D                 call    sub_410930
.text:0040C422                 mov     byte ptr [eax], 0
.text:0040C425                 lea     esi, [esi+0]
.text:0040C429                 lea     edi, [edi+0]
.text:0040C430
.text:0040C430 loc_40C430:                             ; CODE XREF: .text:0040C409↑j
.text:0040C430                                         ; .text:0040C456↓j
.text:0040C430                 mov     eax, esi
.text:0040C432                 mov     ebx, [esp+0Ch]
.text:0040C436                 mov     esi, [esp+10h]
.text:0040C43A                 mov     edi, [esp+14h]
.text:0040C43E                 mov     ebp, [esp+18h]
.text:0040C442                 add     esp, 1Ch
.text:0040C445                 retn
.text:0040C446 ; ---------------------------------------------------------------------------
.text:0040C446
.text:0040C446 loc_40C446:                             ; CODE XREF: .text:0040C40D↑j
.text:0040C446                 mov     [esp+8], esi
.text:0040C44A                 mov     [esp+4], ebx
.text:0040C44E                 mov     [esp], ebp
.text:0040C451                 call    memcpy
.text:0040C456                 jmp     short loc_40C430
.text:0040C458 ; ---------------------------------------------------------------------------
.text:0040C458
.text:0040C458 loc_40C458:                             ; CODE XREF: .text:0040C3E2↑j
.text:0040C458                 call    abort
.text:0040C458 ; ---------------------------------------------------------------------------
.text:0040C45D                 align 10h
.text:0040C460
.text:0040C460 ; =============== S U B R O U T I N E =======================================
.text:0040C460
.text:0040C460
.text:0040C460 sub_40C460      proc near               ; CODE XREF: .text:00409091↑p
.text:0040C460                                         ; .text:004090A7↑p
.text:0040C460
.text:0040C460 Block           = dword ptr -0Ch
.text:0040C460 var_4           = dword ptr -4
.text:0040C460 arg_0           = dword ptr  4
.text:0040C460
.text:0040C460                 sub     esp, 0Ch
.text:0040C463                 mov     [esp+0Ch+var_4], ebx
.text:0040C467                 mov     ebx, [esp+0Ch+arg_0]
.text:0040C46B                 mov     eax, [ebx]
.text:0040C46D                 test    eax, eax
.text:0040C46F                 jnz     short loc_40C4D0
.text:0040C471
.text:0040C471 loc_40C471:                             ; CODE XREF: sub_40C460+78↓j
.text:0040C471                 mov     dword ptr [ebx], 0
.text:0040C477                 mov     eax, [ebx+10h]
.text:0040C47A                 mov     dword ptr [ebx+4], 0
.text:0040C481                 mov     dword ptr [ebx+8], 0
.text:0040C488                 test    eax, eax
.text:0040C48A                 jnz     short loc_40C4C0
.text:0040C48C
.text:0040C48C loc_40C48C:                             ; CODE XREF: sub_40C460+68↓j
.text:0040C48C                 and     byte ptr [ebx+1Ch], 0F7h
.text:0040C490                 mov     eax, [ebx+14h]
.text:0040C493                 mov     dword ptr [ebx+10h], 0
.text:0040C49A                 test    eax, eax
.text:0040C49C                 jnz     short loc_40C4B0
.text:0040C49E
.text:0040C49E loc_40C49E:                             ; CODE XREF: sub_40C460+58↓j
.text:0040C49E                 mov     dword ptr [ebx+14h], 0
.text:0040C4A5                 mov     ebx, [esp+0Ch+var_4]
.text:0040C4A9                 add     esp, 0Ch
.text:0040C4AC                 retn
.text:0040C4AC ; ---------------------------------------------------------------------------
.text:0040C4AD                 align 10h
.text:0040C4B0
.text:0040C4B0 loc_40C4B0:                             ; CODE XREF: sub_40C460+3C↑j
.text:0040C4B0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040C4B3                 call    free
.text:0040C4B8                 jmp     short loc_40C49E
.text:0040C4B8 ; ---------------------------------------------------------------------------
.text:0040C4BA                 align 10h
.text:0040C4C0
.text:0040C4C0 loc_40C4C0:                             ; CODE XREF: sub_40C460+2A↑j
.text:0040C4C0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040C4C3                 call    free
.text:0040C4C8                 jmp     short loc_40C48C
.text:0040C4C8 ; ---------------------------------------------------------------------------
.text:0040C4CA                 align 10h
.text:0040C4D0
.text:0040C4D0 loc_40C4D0:                             ; CODE XREF: sub_40C460+F↑j
.text:0040C4D0                 mov     [esp+0Ch+Block], eax ; Block
.text:0040C4D3                 call    free
.text:0040C4D8                 jmp     short loc_40C471
.text:0040C4D8 sub_40C460      endp
.text:0040C4D8
.text:0040C4D8 ; ---------------------------------------------------------------------------
.text:0040C4DA aLower          db 'lower',0            ; DATA XREF: sub_40C4F0+1EEB↓o
.text:0040C4E0 aUpper          db 'upper',0            ; DATA XREF: sub_40C4F0+1F11↓o
.text:0040C4E6                 align 10h
.text:0040C4F0
.text:0040C4F0 ; =============== S U B R O U T I N E =======================================
.text:0040C4F0
.text:0040C4F0
.text:0040C4F0 sub_40C4F0      proc near               ; CODE XREF: sub_40BF20+AB↑p
.text:0040C4F0                                         ; .text:0040C391↑p
.text:0040C4F0
.text:0040C4F0 Size            = dword ptr -97Ch
.text:0040C4F0 var_978         = dword ptr -978h
.text:0040C4F0 var_974         = dword ptr -974h
.text:0040C4F0 var_970         = dword ptr -970h
.text:0040C4F0 var_96C         = dword ptr -96Ch
.text:0040C4F0 var_968         = dword ptr -968h
.text:0040C4F0 var_950         = dword ptr -950h
.text:0040C4F0 var_940         = dword ptr -940h
.text:0040C4F0 var_93C         = dword ptr -93Ch
.text:0040C4F0 var_938         = dword ptr -938h
.text:0040C4F0 var_934         = dword ptr -934h
.text:0040C4F0 var_930         = dword ptr -930h
.text:0040C4F0 Type            = word ptr -92Ch
.text:0040C4F0 var_926         = byte ptr -926h
.text:0040C4F0 var_925         = byte ptr -925h
.text:0040C4F0 var_924         = dword ptr -924h
.text:0040C4F0 var_91E         = byte ptr -91Eh
.text:0040C4F0 var_91D         = byte ptr -91Dh
.text:0040C4F0 var_91C         = byte ptr -91Ch
.text:0040C4F0 var_90C         = dword ptr -90Ch
.text:0040C4F0 var_908         = dword ptr -908h
.text:0040C4F0 var_904         = dword ptr -904h
.text:0040C4F0 var_900         = dword ptr -900h
.text:0040C4F0 var_8FC         = dword ptr -8FCh
.text:0040C4F0 var_8F8         = dword ptr -8F8h
.text:0040C4F0 var_8F4         = dword ptr -8F4h
.text:0040C4F0 var_8F0         = dword ptr -8F0h
.text:0040C4F0 var_8EC         = byte ptr -8ECh
.text:0040C4F0 var_8D0         = dword ptr -8D0h
.text:0040C4F0 var_8CC         = byte ptr -8CCh
.text:0040C4F0 var_84C         = byte ptr -84Ch
.text:0040C4F0 name            = byte ptr -83Ch
.text:0040C4F0 Block           = dword ptr -2Ch
.text:0040C4F0 var_28          = dword ptr -28h
.text:0040C4F0 var_24          = dword ptr -24h
.text:0040C4F0 arg_0           = dword ptr  4
.text:0040C4F0 arg_4           = dword ptr  8
.text:0040C4F0 arg_8           = dword ptr  0Ch
.text:0040C4F0 arg_C           = dword ptr  10h
.text:0040C4F0
.text:0040C4F0                 push    ebp
.text:0040C4F1                 mov     ebp, 0Ch
.text:0040C4F6                 push    edi
.text:0040C4F7                 push    esi
.text:0040C4F8                 push    ebx
.text:0040C4F9                 sub     esp, 96Ch
.text:0040C4FF                 mov     eax, [esp+97Ch+arg_0]
.text:0040C506                 mov     [esp+97Ch+var_900], 0
.text:0040C50E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040C515                 mov     ebx, [esp+97Ch+arg_4]
.text:0040C51C                 mov     [esp+97Ch+var_8D0], eax
.text:0040C523                 mov     edx, [ecx+14h]
.text:0040C526                 add     eax, ebx
.text:0040C528                 mov     [esp+97Ch+var_8F4], eax
.text:0040C52F                 xor     eax, eax
.text:0040C531                 mov     [esp+97Ch+var_8F8], edx
.text:0040C538                 mov     [esp+97Ch+var_8FC], eax
.text:0040C53F                 mov     [esp+97Ch+var_908], 0
.text:0040C547                 mov     [esp+97Ch+var_90C], 0
.text:0040C54F                 mov     [esp+97Ch+Size], 280h ; Size
.text:0040C556                 call    malloc
.text:0040C55B                 mov     [esp+97Ch+Block], eax
.text:0040C562                 test    eax, eax
.text:0040C564                 jz      loc_40C906
.text:0040C56A                 mov     edi, [esp+97Ch+arg_C]
.text:0040C571                 xor     edx, edx
.text:0040C573                 mov     ecx, 20h ; ' '
.text:0040C578                 mov     [esp+97Ch+var_28], ecx
.text:0040C57F                 mov     ebp, [esp+97Ch+arg_8]
.text:0040C586                 mov     [esp+97Ch+var_24], edx
.text:0040C58D                 and     byte ptr [edi+1Ch], 97h
.text:0040C591                 mov     [edi+0Ch], ebp
.text:0040C594                 mov     dword ptr [edi+8], 0
.text:0040C59B                 mov     esi, ds:dword_41B410
.text:0040C5A1                 mov     dword ptr [edi+18h], 0
.text:0040C5A8                 test    esi, esi
.text:0040C5AA                 jz      loc_40F7E1
.text:0040C5B0
.text:0040C5B0 loc_40C5B0:                             ; CODE XREF: sub_40C4F0+3351↓j
.text:0040C5B0                 mov     ebx, [esp+97Ch+arg_C]
.text:0040C5B7                 mov     edx, [ebx+4]
.text:0040C5BA                 test    edx, edx
.text:0040C5BC                 jnz     loc_40F7D2
.text:0040C5C2                 mov     eax, [ebx]
.text:0040C5C4                 test    eax, eax
.text:0040C5C6                 jz      loc_40F7B8
.text:0040C5CC                 mov     [esp+97Ch+var_978], 20h ; ' ' ; Size
.text:0040C5D4                 mov     [esp+97Ch+Size], eax ; Block
.text:0040C5D7                 call    realloc
.text:0040C5DC                 mov     [ebx], eax
.text:0040C5DE
.text:0040C5DE loc_40C5DE:                             ; CODE XREF: sub_40C4F0+32DD↓j
.text:0040C5DE                 mov     esi, [esp+97Ch+arg_C]
.text:0040C5E5                 mov     edi, [esi]
.text:0040C5E7                 test    edi, edi
.text:0040C5E9                 jz      loc_40F7A7
.text:0040C5EF                 mov     eax, [esp+97Ch+arg_C]
.text:0040C5F6                 mov     dword ptr [eax+4], 20h ; ' '
.text:0040C5FD
.text:0040C5FD loc_40C5FD:                             ; CODE XREF: sub_40C4F0+32EC↓j
.text:0040C5FD                 mov     [esp+97Ch+var_950], edi
.text:0040C601                 mov     [esp+97Ch+var_904], edi
.text:0040C605                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C60C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C613                 jz      loc_40C960
.text:0040C619
.text:0040C619 loc_40C619:                             ; CODE XREF: sub_40C4F0+43D↓j
.text:0040C619                 movzx   ebx, byte ptr [edi]
.text:0040C61C                 inc     edi
.text:0040C61D                 mov     edx, [esp+97Ch+var_8F8]
.text:0040C624                 mov     [esp+97Ch+var_8D0], edi
.text:0040C62B                 test    edx, edx
.text:0040C62D                 mov     [esp+97Ch+var_8EC], bl
.text:0040C634                 jz      short loc_40C64B
.text:0040C636                 mov     edi, [esp+97Ch+var_8F8]
.text:0040C63D                 movzx   ecx, bl
.text:0040C640                 movzx   ebx, byte ptr [ecx+edi]
.text:0040C644                 mov     [esp+97Ch+var_8EC], bl
.text:0040C64B
.text:0040C64B loc_40C64B:                             ; CODE XREF: sub_40C4F0+144↑j
.text:0040C64B                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040C653                 sub     eax, 0Ah        ; switch 115 cases
.text:0040C656                 cmp     eax, 72h
.text:0040C659                 ja      def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040C65F                 jmp     ds:jpt_40C65F[eax*4] ; switch jump
.text:0040C65F ; ---------------------------------------------------------------------------
.text:0040C666                 align 4
.text:0040C668 jpt_40C65F      dd offset loc_40CD55, offset def_40C65F, offset def_40C65F
.text:0040C668                                         ; DATA XREF: sub_40C4F0+16F↑r
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F ; jump table for switch statement
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset loc_40CF8D
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset loc_40D09C, offset loc_40D286, offset loc_40D550
.text:0040C668                 dd offset loc_40DBC4, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset loc_40DAE0, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset loc_40DBC4
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset loc_40DBDA, offset loc_40E766, offset def_40C65F
.text:0040C668                 dd offset loc_40C834, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset def_40C65F
.text:0040C668                 dd offset def_40C65F, offset def_40C65F, offset loc_40F774
.text:0040C668                 dd offset loc_40F792
.text:0040C834 ; ---------------------------------------------------------------------------
.text:0040C834
.text:0040C834 loc_40C834:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040C834                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040C834                 mov     esi, [esp+97Ch+arg_0] ; jumptable 0040C65F case 94
.text:0040C83B                 mov     edx, [esp+97Ch+var_8D0]
.text:0040C842                 inc     esi
.text:0040C843                 cmp     edx, esi
.text:0040C845                 jz      short loc_40C855
.text:0040C847                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040C84F                 jz      loc_40CA9D
.text:0040C855
.text:0040C855 loc_40C855:                             ; CODE XREF: sub_40C4F0+355↑j
.text:0040C855                                         ; sub_40C4F0+3D7↓j ...
.text:0040C855                 mov     eax, [esp+97Ch+arg_C]
.text:0040C85C                 mov     ebp, [esp+97Ch+var_950]
.text:0040C860                 mov     edi, [eax]
.text:0040C862                 mov     edx, [eax+4]
.text:0040C865                 sub     ebp, edi
.text:0040C867                 inc     ebp
.text:0040C868                 cmp     ebp, edx
.text:0040C86A                 jbe     loc_40C913
.text:0040C870                 cmp     edx, 10000h
.text:0040C876                 mov     ebp, 0Fh
.text:0040C87B                 jz      loc_40C906
.text:0040C881                 lea     ebx, [edx+edx]
.text:0040C884                 mov     edx, [esp+97Ch+arg_C]
.text:0040C88B                 cmp     ebx, 10000h
.text:0040C891                 mov     [edx+4], ebx
.text:0040C894                 jbe     short loc_40C89D
.text:0040C896                 mov     dword ptr [edx+4], 10000h
.text:0040C89D
.text:0040C89D loc_40C89D:                             ; CODE XREF: sub_40C4F0+3A4↑j
.text:0040C89D                 mov     ebp, [esp+97Ch+arg_C]
.text:0040C8A4                 mov     esi, [ebp+4]
.text:0040C8A7                 mov     ebp, 0Ch
.text:0040C8AC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C8AF                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040C8B3                 call    realloc
.text:0040C8B8                 mov     edx, [esp+97Ch+arg_C]
.text:0040C8BF                 test    eax, eax
.text:0040C8C1                 mov     [edx], eax
.text:0040C8C3                 jz      short loc_40C906
.text:0040C8C5                 cmp     edi, eax
.text:0040C8C7                 jz      short loc_40C855
.text:0040C8C9                 mov     ecx, [esp+97Ch+var_908]
.text:0040C8CD                 sub     eax, edi
.text:0040C8CF                 add     [esp+97Ch+var_950], eax
.text:0040C8D3                 add     [esp+97Ch+var_904], eax
.text:0040C8D7                 test    ecx, ecx
.text:0040C8D9                 jz      short loc_40C8DF
.text:0040C8DB                 add     [esp+97Ch+var_908], eax
.text:0040C8DF
.text:0040C8DF loc_40C8DF:                             ; CODE XREF: sub_40C4F0+3E9↑j
.text:0040C8DF                 mov     ebx, [esp+97Ch+var_900]
.text:0040C8E3                 test    ebx, ebx
.text:0040C8E5                 jz      short loc_40C8EB
.text:0040C8E7                 add     [esp+97Ch+var_900], eax
.text:0040C8EB
.text:0040C8EB loc_40C8EB:                             ; CODE XREF: sub_40C4F0+3F5↑j
.text:0040C8EB                 mov     edi, [esp+97Ch+var_8FC]
.text:0040C8F2                 test    edi, edi
.text:0040C8F4                 jz      loc_40C855
.text:0040C8FA                 add     [esp+97Ch+var_8FC], eax
.text:0040C901                 jmp     loc_40C855
.text:0040C906 ; ---------------------------------------------------------------------------
.text:0040C906
.text:0040C906 loc_40C906:                             ; CODE XREF: sub_40C4F0+74↑j
.text:0040C906                                         ; sub_40C4F0+38B↑j ...
.text:0040C906                 add     esp, 96Ch
.text:0040C90C                 mov     eax, ebp
.text:0040C90E                 pop     ebx
.text:0040C90F                 pop     esi
.text:0040C910                 pop     edi
.text:0040C911                 pop     ebp
.text:0040C912                 retn
.text:0040C913 ; ---------------------------------------------------------------------------
.text:0040C913
.text:0040C913 loc_40C913:                             ; CODE XREF: sub_40C4F0+37A↑j
.text:0040C913                 mov     edi, [esp+97Ch+var_950]
.text:0040C917                 mov     byte ptr [edi], 9
.text:0040C91A
.text:0040C91A loc_40C91A:                             ; CODE XREF: sub_40C4F0+16CF↓j
.text:0040C91A                                         ; sub_40C4F0+2518↓j ...
.text:0040C91A                 inc     edi
.text:0040C91B
.text:0040C91B loc_40C91B:                             ; CODE XREF: sub_40C4F0+1496↓j
.text:0040C91B                 mov     [esp+97Ch+var_950], edi
.text:0040C91F
.text:0040C91F loc_40C91F:                             ; CODE XREF: sub_40C4F0+7DA↓j
.text:0040C91F                                         ; sub_40C4F0+A98↓j ...
.text:0040C91F                 mov     edi, [esp+97Ch+var_8D0]
.text:0040C926                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040C92D                 jnz     loc_40C619
.text:0040C933                 mov     ebx, [esp+97Ch+var_908]
.text:0040C937                 test    ebx, ebx
.text:0040C939                 jz      short loc_40C960
.text:0040C93B                 mov     [esp+97Ch+Size], 0Eh
.text:0040C942                 mov     ebp, [esp+97Ch+var_950]
.text:0040C946                 mov     edx, [esp+97Ch+var_908]
.text:0040C94A                 mov     esi, [esp+97Ch+var_908]
.text:0040C94E                 sub     ebp, edx
.text:0040C950                 sub     ebp, 3
.text:0040C953                 mov     [esp+97Ch+var_974], ebp
.text:0040C957                 mov     [esp+97Ch+var_978], esi
.text:0040C95B                 call    sub_4092C0
.text:0040C960
.text:0040C960 loc_40C960:                             ; CODE XREF: sub_40C4F0+123↑j
.text:0040C960                                         ; sub_40C4F0+449↑j
.text:0040C960                 mov     eax, [esp+97Ch+var_24]
.text:0040C967                 test    eax, eax
.text:0040C969                 jnz     loc_40CA84
.text:0040C96F                 test    [esp+97Ch+arg_8], 40000h
.text:0040C97A                 jz      loc_40CA53
.text:0040C980                 mov     ecx, [esp+97Ch+arg_C]
.text:0040C987                 mov     ebp, [esp+97Ch+var_950]
.text:0040C98B                 mov     ebx, [ecx]
.text:0040C98D                 mov     edx, [ecx+4]
.text:0040C990                 sub     ebp, ebx
.text:0040C992                 mov     edi, ebx
.text:0040C994                 inc     ebp
.text:0040C995                 cmp     ebp, edx
.text:0040C997                 jbe     loc_40CA47
.text:0040C99D
.text:0040C99D loc_40C99D:                             ; CODE XREF: sub_40C4F0+551↓j
.text:0040C99D                 cmp     edx, 10000h
.text:0040C9A3                 mov     ebp, 0Fh
.text:0040C9A8                 jz      loc_40C906
.text:0040C9AE                 mov     esi, [esp+97Ch+arg_C]
.text:0040C9B5                 lea     ebp, [edx+edx]
.text:0040C9B8                 cmp     ebp, 10000h
.text:0040C9BE                 mov     [esi+4], ebp
.text:0040C9C1                 jbe     short loc_40C9CA
.text:0040C9C3                 mov     dword ptr [esi+4], 10000h
.text:0040C9CA
.text:0040C9CA loc_40C9CA:                             ; CODE XREF: sub_40C4F0+4D1↑j
.text:0040C9CA                 mov     eax, [esp+97Ch+arg_C]
.text:0040C9D1                 mov     ebp, 0Ch
.text:0040C9D6                 mov     esi, [eax+4]
.text:0040C9D9                 mov     [esp+97Ch+Size], edi ; Block
.text:0040C9DC                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040C9E0                 call    realloc
.text:0040C9E5                 mov     edx, [esp+97Ch+arg_C]
.text:0040C9EC                 test    eax, eax
.text:0040C9EE                 mov     [edx], eax
.text:0040C9F0                 jz      loc_40C906
.text:0040C9F6                 cmp     ebx, eax
.text:0040C9F8                 jz      short loc_40CA2A
.text:0040C9FA                 mov     edi, [esp+97Ch+var_908]
.text:0040C9FE                 sub     eax, ebx
.text:0040CA00                 add     [esp+97Ch+var_950], eax
.text:0040CA04                 test    edi, edi
.text:0040CA06                 jz      short loc_40CA0C
.text:0040CA08                 add     [esp+97Ch+var_908], eax
.text:0040CA0C
.text:0040CA0C loc_40CA0C:                             ; CODE XREF: sub_40C4F0+516↑j
.text:0040CA0C                 mov     ebx, [esp+97Ch+var_900]
.text:0040CA10                 test    ebx, ebx
.text:0040CA12                 jz      short loc_40CA18
.text:0040CA14                 add     [esp+97Ch+var_900], eax
.text:0040CA18
.text:0040CA18 loc_40CA18:                             ; CODE XREF: sub_40C4F0+522↑j
.text:0040CA18                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040CA1F                 test    ecx, ecx
.text:0040CA21                 jz      short loc_40CA2A
.text:0040CA23                 add     [esp+97Ch+var_8FC], eax
.text:0040CA2A
.text:0040CA2A loc_40CA2A:                             ; CODE XREF: sub_40C4F0+508↑j
.text:0040CA2A                                         ; sub_40C4F0+531↑j
.text:0040CA2A                 mov     eax, [esp+97Ch+arg_C]
.text:0040CA31                 mov     ebp, [esp+97Ch+var_950]
.text:0040CA35                 mov     ebx, [eax]
.text:0040CA37                 mov     edx, [eax+4]
.text:0040CA3A                 sub     ebp, ebx
.text:0040CA3C                 mov     edi, ebx
.text:0040CA3E                 inc     ebp
.text:0040CA3F                 cmp     ebp, edx
.text:0040CA41                 ja      loc_40C99D
.text:0040CA47
.text:0040CA47 loc_40CA47:                             ; CODE XREF: sub_40C4F0+4A7↑j
.text:0040CA47                 mov     edx, [esp+97Ch+var_950]
.text:0040CA4B                 mov     byte ptr [edx], 1
.text:0040CA4E                 inc     edx
.text:0040CA4F                 mov     [esp+97Ch+var_950], edx
.text:0040CA53
.text:0040CA53 loc_40CA53:                             ; CODE XREF: sub_40C4F0+48A↑j
.text:0040CA53                 mov     ebp, [esp+97Ch+Block]
.text:0040CA5A                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040CA5D                 xor     ebp, ebp
.text:0040CA5F                 call    free
.text:0040CA64                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CA6B                 mov     esi, [esp+97Ch+arg_C]
.text:0040CA72                 mov     ebx, [ecx]
.text:0040CA74                 sub     [esp+97Ch+var_950], ebx
.text:0040CA78                 mov     edi, [esp+97Ch+var_950]
.text:0040CA7C                 mov     [esi+8], edi
.text:0040CA7F                 jmp     loc_40C906
.text:0040CA84 ; ---------------------------------------------------------------------------
.text:0040CA84
.text:0040CA84 loc_40CA84:                             ; CODE XREF: sub_40C4F0+479↑j
.text:0040CA84                 mov     edi, [esp+97Ch+Block]
.text:0040CA8B                 mov     ebp, 8
.text:0040CA90
.text:0040CA90 loc_40CA90:                             ; CODE XREF: sub_40C4F0+15BC↓j
.text:0040CA90                                         ; sub_40C4F0+32C3↓j
.text:0040CA90                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CA93
.text:0040CA93 loc_40CA93:                             ; CODE XREF: sub_40C4F0+EDF↓j
.text:0040CA93                                         ; sub_40C4F0+1C4C↓j ...
.text:0040CA93                 call    free
.text:0040CA98                 jmp     loc_40C906
.text:0040CA9D ; ---------------------------------------------------------------------------
.text:0040CA9D
.text:0040CA9D loc_40CA9D:                             ; CODE XREF: sub_40C4F0+35F↑j
.text:0040CA9D                 mov     [esp+97Ch+var_978], edx
.text:0040CAA1                 mov     eax, [esp+97Ch+arg_8]
.text:0040CAA8                 mov     ebp, [esp+97Ch+arg_0]
.text:0040CAAF                 mov     [esp+97Ch+var_974], eax
.text:0040CAB3                 mov     [esp+97Ch+Size], ebp
.text:0040CAB6                 call    sub_4093A0
.text:0040CABB                 test    al, al
.text:0040CABD                 jnz     loc_40C855
.text:0040CAC3
.text:0040CAC3 def_40C65F:                             ; CODE XREF: sub_40C4F0+169↑j
.text:0040CAC3                                         ; sub_40C4F0+16F↑j ...
.text:0040CAC3                 mov     edx, [esp+97Ch+var_8FC] ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CACA                 test    edx, edx
.text:0040CACC                 jz      short loc_40CAE9
.text:0040CACE                 mov     eax, [esp+97Ch+var_8FC]
.text:0040CAD5                 movzx   edx, byte ptr [eax]
.text:0040CAD8                 movzx   ebx, dl
.text:0040CADB                 lea     ebp, [ebx+eax+1]
.text:0040CADF                 cmp     ebp, [esp+97Ch+var_950]
.text:0040CAE3                 jz      loc_40CCCF
.text:0040CAE9
.text:0040CAE9 loc_40CAE9:                             ; CODE XREF: sub_40C4F0+5DC↑j
.text:0040CAE9                                         ; sub_40C4F0+7E1↓j ...
.text:0040CAE9                 mov     edi, [esp+97Ch+var_950]
.text:0040CAED                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CAF4                 mov     ecx, [esp+97Ch+var_950]
.text:0040CAF8                 mov     [esp+97Ch+var_900], edi
.text:0040CAFC                 mov     edi, [ebp+0]
.text:0040CAFF                 mov     edx, [ebp+4]
.text:0040CB02                 sub     ecx, edi
.text:0040CB04                 mov     ebx, edi
.text:0040CB06                 add     ecx, 2
.text:0040CB09                 cmp     ecx, edx
.text:0040CB0B                 jbe     loc_40CBC8
.text:0040CB11
.text:0040CB11 loc_40CB11:                             ; CODE XREF: sub_40C4F0+6D2↓j
.text:0040CB11                 cmp     edx, 10000h
.text:0040CB17                 mov     ebp, 0Fh
.text:0040CB1C                 jz      loc_40C906
.text:0040CB22                 lea     esi, [edx+edx]
.text:0040CB25                 mov     edx, [esp+97Ch+arg_C]
.text:0040CB2C                 cmp     esi, 10000h
.text:0040CB32                 mov     [edx+4], esi
.text:0040CB35                 jbe     short loc_40CB3E
.text:0040CB37                 mov     dword ptr [edx+4], 10000h
.text:0040CB3E
.text:0040CB3E loc_40CB3E:                             ; CODE XREF: sub_40C4F0+645↑j
.text:0040CB3E                 mov     eax, [esp+97Ch+arg_C]
.text:0040CB45                 mov     ebp, [eax+4]
.text:0040CB48                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CB4B                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040CB4F                 mov     ebp, 0Ch
.text:0040CB54                 call    realloc
.text:0040CB59                 mov     edx, [esp+97Ch+arg_C]
.text:0040CB60                 test    eax, eax
.text:0040CB62                 mov     [edx], eax
.text:0040CB64                 jz      loc_40C906
.text:0040CB6A                 cmp     ebx, eax
.text:0040CB6C                 jz      short loc_40CBA2
.text:0040CB6E                 sub     eax, ebx
.text:0040CB70                 mov     ebx, [esp+97Ch+var_908]
.text:0040CB74                 add     [esp+97Ch+var_950], eax
.text:0040CB78                 add     [esp+97Ch+var_904], eax
.text:0040CB7C                 test    ebx, ebx
.text:0040CB7E                 jz      short loc_40CB84
.text:0040CB80                 add     [esp+97Ch+var_908], eax
.text:0040CB84
.text:0040CB84 loc_40CB84:                             ; CODE XREF: sub_40C4F0+68E↑j
.text:0040CB84                 mov     ecx, [esp+97Ch+var_900]
.text:0040CB88                 test    ecx, ecx
.text:0040CB8A                 jz      short loc_40CB90
.text:0040CB8C                 add     [esp+97Ch+var_900], eax
.text:0040CB90
.text:0040CB90 loc_40CB90:                             ; CODE XREF: sub_40C4F0+69A↑j
.text:0040CB90                 mov     edi, [esp+97Ch+var_8FC]
.text:0040CB97                 test    edi, edi
.text:0040CB99                 jz      short loc_40CBA2
.text:0040CB9B                 add     [esp+97Ch+var_8FC], eax
.text:0040CBA2
.text:0040CBA2 loc_40CBA2:                             ; CODE XREF: sub_40C4F0+67C↑j
.text:0040CBA2                                         ; sub_40C4F0+6A9↑j
.text:0040CBA2                 mov     edx, [esp+97Ch+arg_C]
.text:0040CBA9                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CBB0                 mov     esi, [esp+97Ch+var_950]
.text:0040CBB4                 mov     edi, [edx]
.text:0040CBB6                 mov     edx, [ebp+4]
.text:0040CBB9                 sub     esi, edi
.text:0040CBBB                 add     esi, 2
.text:0040CBBE                 mov     ebx, edi
.text:0040CBC0                 cmp     esi, edx
.text:0040CBC2                 ja      loc_40CB11
.text:0040CBC8
.text:0040CBC8 loc_40CBC8:                             ; CODE XREF: sub_40C4F0+61B↑j
.text:0040CBC8                 mov     eax, [esp+97Ch+var_950]
.text:0040CBCC                 mov     byte ptr [eax], 2
.text:0040CBCF                 inc     eax
.text:0040CBD0                 mov     byte ptr [eax], 0
.text:0040CBD3                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CBDA                 inc     eax
.text:0040CBDB                 mov     [esp+97Ch+var_950], eax
.text:0040CBDF                 dec     eax
.text:0040CBE0                 mov     edi, [ecx]
.text:0040CBE2                 mov     [esp+97Ch+var_8FC], eax
.text:0040CBE9                 mov     edx, [ecx+4]
.text:0040CBEC                 mov     eax, [esp+97Ch+var_950]
.text:0040CBF0                 mov     ebx, edi
.text:0040CBF2                 sub     eax, edi
.text:0040CBF4
.text:0040CBF4 loc_40CBF4:                             ; CODE XREF: sub_40C4F0+7B9↓j
.text:0040CBF4                 inc     eax
.text:0040CBF5                 cmp     eax, edx
.text:0040CBF7                 jbe     loc_40CCAE
.text:0040CBFD                 cmp     edx, 10000h
.text:0040CC03                 mov     ebp, 0Fh
.text:0040CC08                 jz      loc_40C906
.text:0040CC0E                 lea     esi, [edx+edx]
.text:0040CC11                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC18                 cmp     esi, 10000h
.text:0040CC1E                 mov     [edx+4], esi
.text:0040CC21                 jbe     short loc_40CC2A
.text:0040CC23                 mov     dword ptr [edx+4], 10000h
.text:0040CC2A
.text:0040CC2A loc_40CC2A:                             ; CODE XREF: sub_40C4F0+731↑j
.text:0040CC2A                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC31                 mov     ebp, [edx+4]
.text:0040CC34                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CC37                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040CC3B                 mov     ebp, 0Ch
.text:0040CC40                 call    realloc
.text:0040CC45                 mov     edi, [esp+97Ch+arg_C]
.text:0040CC4C                 test    eax, eax
.text:0040CC4E                 mov     [edi], eax
.text:0040CC50                 jz      loc_40C906
.text:0040CC56                 cmp     ebx, eax
.text:0040CC58                 jz      short loc_40CC8E
.text:0040CC5A                 mov     ecx, [esp+97Ch+var_908]
.text:0040CC5E                 sub     eax, ebx
.text:0040CC60                 add     [esp+97Ch+var_950], eax
.text:0040CC64                 add     [esp+97Ch+var_904], eax
.text:0040CC68                 test    ecx, ecx
.text:0040CC6A                 jz      short loc_40CC70
.text:0040CC6C                 add     [esp+97Ch+var_908], eax
.text:0040CC70
.text:0040CC70 loc_40CC70:                             ; CODE XREF: sub_40C4F0+77A↑j
.text:0040CC70                 mov     ebx, [esp+97Ch+var_900]
.text:0040CC74                 test    ebx, ebx
.text:0040CC76                 jz      short loc_40CC7C
.text:0040CC78                 add     [esp+97Ch+var_900], eax
.text:0040CC7C
.text:0040CC7C loc_40CC7C:                             ; CODE XREF: sub_40C4F0+786↑j
.text:0040CC7C                 mov     esi, [esp+97Ch+var_8FC]
.text:0040CC83                 test    esi, esi
.text:0040CC85                 jz      short loc_40CC8E
.text:0040CC87                 add     [esp+97Ch+var_8FC], eax
.text:0040CC8E
.text:0040CC8E loc_40CC8E:                             ; CODE XREF: sub_40C4F0+768↑j
.text:0040CC8E                                         ; sub_40C4F0+795↑j ...
.text:0040CC8E                 mov     edx, [esp+97Ch+arg_C]
.text:0040CC95                 mov     ebp, [esp+97Ch+arg_C]
.text:0040CC9C                 mov     eax, [esp+97Ch+var_950]
.text:0040CCA0                 mov     edi, [edx]
.text:0040CCA2                 mov     edx, [ebp+4]
.text:0040CCA5                 sub     eax, edi
.text:0040CCA7                 mov     ebx, edi
.text:0040CCA9                 jmp     loc_40CBF4
.text:0040CCAE ; ---------------------------------------------------------------------------
.text:0040CCAE
.text:0040CCAE loc_40CCAE:                             ; CODE XREF: sub_40C4F0+707↑j
.text:0040CCAE                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040CCB6                 mov     edi, [esp+97Ch+var_950]
.text:0040CCBA                 mov     [edi], cl
.text:0040CCBC                 mov     eax, [esp+97Ch+var_8FC]
.text:0040CCC3                 inc     edi
.text:0040CCC4                 mov     [esp+97Ch+var_950], edi
.text:0040CCC8                 inc     byte ptr [eax]
.text:0040CCCA                 jmp     loc_40C91F
.text:0040CCCF ; ---------------------------------------------------------------------------
.text:0040CCCF
.text:0040CCCF loc_40CCCF:                             ; CODE XREF: sub_40C4F0+5F3↑j
.text:0040CCCF                 inc     dl
.text:0040CCD1                 jz      loc_40CAE9
.text:0040CCD7                 mov     edi, [esp+97Ch+var_8D0]
.text:0040CCDE                 mov     edx, edi
.text:0040CCE0                 movzx   eax, byte ptr [edi]
.text:0040CCE3                 cmp     al, 2Ah ; '*'
.text:0040CCE5                 jz      loc_40CAE9
.text:0040CCEB                 cmp     al, 5Eh ; '^'
.text:0040CCED                 jz      loc_40CAE9
.text:0040CCF3                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040CCFB                 jz      short loc_40CD44
.text:0040CCFD                 cmp     al, 5Ch ; '\'
.text:0040CCFF                 jz      short loc_40CD40
.text:0040CD01
.text:0040CD01 loc_40CD01:                             ; CODE XREF: sub_40C4F0+85E↓j
.text:0040CD01                 test    [esp+97Ch+arg_8], 200h
.text:0040CD0C                 jz      short loc_40CC8E
.text:0040CD0E                 test    [esp+97Ch+arg_8], 1000h
.text:0040CD19                 jz      short loc_40CD30
.text:0040CD1B                 cmp     byte ptr [edx], 7Bh ; '{'
.text:0040CD1E
.text:0040CD1E loc_40CD1E:                             ; CODE XREF: sub_40C4F0+84D↓j
.text:0040CD1E                 jnz     loc_40CC8E
.text:0040CD24                 jmp     loc_40CAE9
.text:0040CD24 ; ---------------------------------------------------------------------------
.text:0040CD29                 align 10h
.text:0040CD30
.text:0040CD30 loc_40CD30:                             ; CODE XREF: sub_40C4F0+829↑j
.text:0040CD30                 cmp     byte ptr [edx], 5Ch ; '\'
.text:0040CD33                 jnz     loc_40CC8E
.text:0040CD39                 cmp     byte ptr [edx+1], 7Bh ; '{'
.text:0040CD3D                 jmp     short loc_40CD1E
.text:0040CD3D ; ---------------------------------------------------------------------------
.text:0040CD3F                 align 10h
.text:0040CD40
.text:0040CD40 loc_40CD40:                             ; CODE XREF: sub_40C4F0+80F↑j
.text:0040CD40                 movzx   eax, byte ptr [edi+1]
.text:0040CD44
.text:0040CD44 loc_40CD44:                             ; CODE XREF: sub_40C4F0+80B↑j
.text:0040CD44                 cmp     al, 2Bh ; '+'
.text:0040CD46                 jz      loc_40CAE9
.text:0040CD4C                 cmp     al, 3Fh ; '?'
.text:0040CD4E                 jnz     short loc_40CD01
.text:0040CD50                 jmp     loc_40CAE9
.text:0040CD55 ; ---------------------------------------------------------------------------
.text:0040CD55
.text:0040CD55 loc_40CD55:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040CD55                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040CD55                 test    [esp+97Ch+arg_8], 800h ; jumptable 0040C65F case 10
.text:0040CD60
.text:0040CD60 loc_40CD60:                             ; CODE XREF: sub_40C4F0+32B2↓j
.text:0040CD60                 jz      def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CD66
.text:0040CD66 loc_40CD66:                             ; CODE XREF: sub_40C4F0+3279↓j
.text:0040CD66                 test    [esp+97Ch+arg_8], 400h
.text:0040CD71                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040CD77
.text:0040CD77 loc_40CD77:                             ; CODE XREF: sub_40C4F0+8FF↓j
.text:0040CD77                                         ; sub_40C4F0+92C↓j ...
.text:0040CD77                 mov     eax, [esp+97Ch+arg_C]
.text:0040CD7E                 mov     ebp, [esp+97Ch+var_950]
.text:0040CD82                 mov     edi, [eax]
.text:0040CD84                 mov     edx, [eax+4]
.text:0040CD87                 sub     ebp, edi
.text:0040CD89                 add     ebp, 3
.text:0040CD8C                 cmp     ebp, edx
.text:0040CD8E                 jbe     loc_40CE2E
.text:0040CD94                 cmp     edx, 10000h
.text:0040CD9A                 mov     ebp, 0Fh
.text:0040CD9F                 jz      loc_40C906
.text:0040CDA5                 lea     ebx, [edx+edx]
.text:0040CDA8                 mov     edx, [esp+97Ch+arg_C]
.text:0040CDAF                 cmp     ebx, 10000h
.text:0040CDB5                 mov     [edx+4], ebx
.text:0040CDB8                 jbe     short loc_40CDC1
.text:0040CDBA                 mov     dword ptr [edx+4], 10000h
.text:0040CDC1
.text:0040CDC1 loc_40CDC1:                             ; CODE XREF: sub_40C4F0+8C8↑j
.text:0040CDC1                 mov     eax, [esp+97Ch+arg_C]
.text:0040CDC8                 mov     ebp, [eax+4]
.text:0040CDCB                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CDCE                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040CDD2                 mov     ebp, 0Ch
.text:0040CDD7                 call    realloc
.text:0040CDDC                 mov     esi, [esp+97Ch+arg_C]
.text:0040CDE3                 test    eax, eax
.text:0040CDE5                 mov     [esi], eax
.text:0040CDE7                 jz      loc_40C906
.text:0040CDED                 cmp     edi, eax
.text:0040CDEF                 jz      short loc_40CD77
.text:0040CDF1                 mov     ecx, [esp+97Ch+var_908]
.text:0040CDF5                 sub     eax, edi
.text:0040CDF7                 add     [esp+97Ch+var_950], eax
.text:0040CDFB                 add     [esp+97Ch+var_904], eax
.text:0040CDFF                 test    ecx, ecx
.text:0040CE01                 jz      short loc_40CE07
.text:0040CE03                 add     [esp+97Ch+var_908], eax
.text:0040CE07
.text:0040CE07 loc_40CE07:                             ; CODE XREF: sub_40C4F0+911↑j
.text:0040CE07                 mov     edx, [esp+97Ch+var_900]
.text:0040CE0B                 test    edx, edx
.text:0040CE0D                 jz      short loc_40CE13
.text:0040CE0F                 add     [esp+97Ch+var_900], eax
.text:0040CE13
.text:0040CE13 loc_40CE13:                             ; CODE XREF: sub_40C4F0+91D↑j
.text:0040CE13                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040CE1A                 test    ebx, ebx
.text:0040CE1C                 jz      loc_40CD77
.text:0040CE22                 add     [esp+97Ch+var_8FC], eax
.text:0040CE29                 jmp     loc_40CD77
.text:0040CE2E ; ---------------------------------------------------------------------------
.text:0040CE2E
.text:0040CE2E loc_40CE2E:                             ; CODE XREF: sub_40C4F0+89E↑j
.text:0040CE2E                 mov     [esp+97Ch+Size], 0Fh
.text:0040CE35                 mov     edi, [esp+97Ch+var_950]
.text:0040CE39                 mov     ebp, [esp+97Ch+var_904]
.text:0040CE3D                 mov     edx, [esp+97Ch+var_904]
.text:0040CE41                 mov     ebx, edi
.text:0040CE43                 sub     ebx, ebp
.text:0040CE45                 mov     [esp+97Ch+var_970], edi
.text:0040CE49                 add     ebx, 3
.text:0040CE4C                 add     edi, 3
.text:0040CE4F                 mov     [esp+97Ch+var_974], ebx
.text:0040CE53                 mov     [esp+97Ch+var_978], edx
.text:0040CE57                 call    sub_409310
.text:0040CE5C                 mov     [esp+97Ch+var_950], edi
.text:0040CE60                 mov     esi, [esp+97Ch+var_908]
.text:0040CE64                 xor     ecx, ecx
.text:0040CE66                 mov     [esp+97Ch+var_8FC], ecx
.text:0040CE6D                 test    esi, esi
.text:0040CE6F                 jz      short loc_40CE94
.text:0040CE71                 mov     [esp+97Ch+Size], 0Eh
.text:0040CE78                 mov     eax, [esp+97Ch+var_908]
.text:0040CE7C                 mov     esi, edi
.text:0040CE7E                 mov     edi, [esp+97Ch+var_908]
.text:0040CE82                 sub     esi, eax
.text:0040CE84                 sub     esi, 3
.text:0040CE87                 mov     [esp+97Ch+var_974], esi
.text:0040CE8B                 mov     [esp+97Ch+var_978], edi
.text:0040CE8F                 call    sub_4092C0
.text:0040CE94
.text:0040CE94 loc_40CE94:                             ; CODE XREF: sub_40C4F0+97F↑j
.text:0040CE94                 mov     esi, [esp+97Ch+arg_C]
.text:0040CE9B                 mov     edx, [esp+97Ch+var_950]
.text:0040CE9F                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CEA6                 mov     edi, [esi]
.text:0040CEA8                 mov     ebp, edx
.text:0040CEAA                 mov     [esp+97Ch+var_908], edx
.text:0040CEAE                 mov     edx, [ecx+4]
.text:0040CEB1                 sub     ebp, edi
.text:0040CEB3                 add     ebp, 3
.text:0040CEB6                 mov     ebx, edi
.text:0040CEB8                 cmp     ebp, edx
.text:0040CEBA                 jbe     loc_40CF73
.text:0040CEC0
.text:0040CEC0 loc_40CEC0:                             ; CODE XREF: sub_40C4F0+A7D↓j
.text:0040CEC0                 cmp     edx, 10000h
.text:0040CEC6                 mov     ebp, 0Fh
.text:0040CECB                 jz      loc_40C906
.text:0040CED1                 lea     ebp, [edx+edx]
.text:0040CED4                 mov     edx, [esp+97Ch+arg_C]
.text:0040CEDB                 cmp     ebp, 10000h
.text:0040CEE1                 mov     [edx+4], ebp
.text:0040CEE4                 jbe     short loc_40CEED
.text:0040CEE6                 mov     dword ptr [edx+4], 10000h
.text:0040CEED
.text:0040CEED loc_40CEED:                             ; CODE XREF: sub_40C4F0+9F4↑j
.text:0040CEED                 mov     eax, [esp+97Ch+arg_C]
.text:0040CEF4                 mov     ebp, 0Ch
.text:0040CEF9                 mov     edx, [eax+4]
.text:0040CEFC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040CEFF                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040CF03                 call    realloc
.text:0040CF08                 mov     edi, [esp+97Ch+arg_C]
.text:0040CF0F                 test    eax, eax
.text:0040CF11                 mov     [edi], eax
.text:0040CF13                 jz      loc_40C906
.text:0040CF19                 cmp     ebx, eax
.text:0040CF1B                 jz      short loc_40CF4D
.text:0040CF1D                 sub     eax, ebx
.text:0040CF1F                 mov     ebx, [esp+97Ch+var_908]
.text:0040CF23                 add     [esp+97Ch+var_950], eax
.text:0040CF27                 test    ebx, ebx
.text:0040CF29                 jz      short loc_40CF2F
.text:0040CF2B                 add     [esp+97Ch+var_908], eax
.text:0040CF2F
.text:0040CF2F loc_40CF2F:                             ; CODE XREF: sub_40C4F0+A39↑j
.text:0040CF2F                 mov     ecx, [esp+97Ch+var_900]
.text:0040CF33                 test    ecx, ecx
.text:0040CF35                 jz      short loc_40CF3B
.text:0040CF37                 add     [esp+97Ch+var_900], eax
.text:0040CF3B
.text:0040CF3B loc_40CF3B:                             ; CODE XREF: sub_40C4F0+A45↑j
.text:0040CF3B                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040CF42                 test    ebp, ebp
.text:0040CF44                 jz      short loc_40CF4D
.text:0040CF46                 add     [esp+97Ch+var_8FC], eax
.text:0040CF4D
.text:0040CF4D loc_40CF4D:                             ; CODE XREF: sub_40C4F0+A2B↑j
.text:0040CF4D                                         ; sub_40C4F0+A54↑j
.text:0040CF4D                 mov     edx, [esp+97Ch+arg_C]
.text:0040CF54                 mov     eax, [esp+97Ch+arg_C]
.text:0040CF5B                 mov     esi, [esp+97Ch+var_950]
.text:0040CF5F                 mov     edi, [edx]
.text:0040CF61                 mov     edx, [eax+4]
.text:0040CF64                 sub     esi, edi
.text:0040CF66                 add     esi, 3
.text:0040CF69                 mov     ebx, edi
.text:0040CF6B                 cmp     esi, edx
.text:0040CF6D                 ja      loc_40CEC0
.text:0040CF73
.text:0040CF73 loc_40CF73:                             ; CODE XREF: sub_40C4F0+9CA↑j
.text:0040CF73                 add     [esp+97Ch+var_950], 3
.text:0040CF78                 mov     [esp+97Ch+var_900], 0
.text:0040CF80                 mov     edi, [esp+97Ch+var_950]
.text:0040CF84                 mov     [esp+97Ch+var_904], edi
.text:0040CF88                 jmp     loc_40C91F
.text:0040CF8D ; ---------------------------------------------------------------------------
.text:0040CF8D
.text:0040CF8D loc_40CF8D:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040CF8D                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040CF8D                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040C65F case 36
.text:0040CF94                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040CF9B                 jz      short loc_40CFAB
.text:0040CF9D                 test    byte ptr [esp+97Ch+arg_8], 8
.text:0040CFA5                 jz      loc_40D071
.text:0040CFAB
.text:0040CFAB loc_40CFAB:                             ; CODE XREF: sub_40C4F0+AAB↑j
.text:0040CFAB                                         ; sub_40C4F0+B31↓j ...
.text:0040CFAB                 mov     ecx, [esp+97Ch+arg_C]
.text:0040CFB2                 mov     eax, [esp+97Ch+arg_C]
.text:0040CFB9                 mov     ebx, [esp+97Ch+var_950]
.text:0040CFBD                 mov     edi, [ecx]
.text:0040CFBF                 mov     edx, [eax+4]
.text:0040CFC2                 sub     ebx, edi
.text:0040CFC4                 inc     ebx
.text:0040CFC5                 cmp     ebx, edx
.text:0040CFC7                 jbe     loc_40D060
.text:0040CFCD                 cmp     edx, 10000h
.text:0040CFD3                 mov     ebp, 0Fh
.text:0040CFD8                 jz      loc_40C906
.text:0040CFDE                 mov     ebx, [esp+97Ch+arg_C]
.text:0040CFE5                 lea     ecx, [edx+edx]
.text:0040CFE8                 cmp     ecx, 10000h
.text:0040CFEE                 mov     [ebx+4], ecx
.text:0040CFF1                 jbe     short loc_40CFFA
.text:0040CFF3                 mov     dword ptr [ebx+4], 10000h
.text:0040CFFA
.text:0040CFFA loc_40CFFA:                             ; CODE XREF: sub_40C4F0+B01↑j
.text:0040CFFA                 mov     ebx, [esp+97Ch+arg_C]
.text:0040D001                 mov     ebp, [ebx+4]
.text:0040D004                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D007                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040D00B                 mov     ebp, 0Ch
.text:0040D010                 call    realloc
.text:0040D015                 mov     [ebx], eax
.text:0040D017                 test    eax, eax
.text:0040D019                 jz      loc_40C906
.text:0040D01F                 cmp     edi, eax
.text:0040D021                 jz      short loc_40CFAB
.text:0040D023                 sub     eax, edi
.text:0040D025                 mov     edi, [esp+97Ch+var_908]
.text:0040D029                 add     [esp+97Ch+var_950], eax
.text:0040D02D                 add     [esp+97Ch+var_904], eax
.text:0040D031                 test    edi, edi
.text:0040D033                 jz      short loc_40D039
.text:0040D035                 add     [esp+97Ch+var_908], eax
.text:0040D039
.text:0040D039 loc_40D039:                             ; CODE XREF: sub_40C4F0+B43↑j
.text:0040D039                 mov     edx, [esp+97Ch+var_900]
.text:0040D03D                 test    edx, edx
.text:0040D03F                 jz      short loc_40D045
.text:0040D041                 add     [esp+97Ch+var_900], eax
.text:0040D045
.text:0040D045 loc_40D045:                             ; CODE XREF: sub_40C4F0+B4F↑j
.text:0040D045                 mov     esi, [esp+97Ch+var_8FC]
.text:0040D04C                 test    esi, esi
.text:0040D04E                 jz      loc_40CFAB
.text:0040D054                 add     [esp+97Ch+var_8FC], eax
.text:0040D05B                 jmp     loc_40CFAB
.text:0040D060 ; ---------------------------------------------------------------------------
.text:0040D060
.text:0040D060 loc_40D060:                             ; CODE XREF: sub_40C4F0+AD7↑j
.text:0040D060                 mov     ebx, [esp+97Ch+var_950]
.text:0040D064                 mov     byte ptr [ebx], 0Ah
.text:0040D067
.text:0040D067 loc_40D067:                             ; CODE XREF: sub_40C4F0+1059↓j
.text:0040D067                 inc     ebx
.text:0040D068                 mov     [esp+97Ch+var_950], ebx
.text:0040D06C                 jmp     loc_40C91F
.text:0040D071 ; ---------------------------------------------------------------------------
.text:0040D071
.text:0040D071 loc_40D071:                             ; CODE XREF: sub_40C4F0+AB5↑j
.text:0040D071                 mov     [esp+97Ch+Size], eax
.text:0040D074                 mov     esi, [esp+97Ch+arg_8]
.text:0040D07B                 mov     edx, [esp+97Ch+var_8F4]
.text:0040D082                 mov     [esp+97Ch+var_974], esi
.text:0040D086                 mov     [esp+97Ch+var_978], edx
.text:0040D08A                 call    sub_409400
.text:0040D08F                 test    al, al
.text:0040D091                 jnz     loc_40CFAB
.text:0040D097                 jmp     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D09C ; ---------------------------------------------------------------------------
.text:0040D09C
.text:0040D09C loc_40D09C:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040D09C                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040D09C                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C65F case 40
.text:0040D0A7                 jz      def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D0AD
.text:0040D0AD loc_40D0AD:                             ; CODE XREF: sub_40C4F0+2417↓j
.text:0040D0AD                 inc     [esp+97Ch+var_90C]
.text:0040D0B1                 mov     eax, [esp+97Ch+arg_C]
.text:0040D0B8                 inc     dword ptr [eax+18h]
.text:0040D0BB                 mov     ecx, [esp+97Ch+var_24]
.text:0040D0C2                 cmp     ecx, [esp+97Ch+var_28]
.text:0040D0C9                 jz      loc_40D246
.text:0040D0CF
.text:0040D0CF loc_40D0CF:                             ; CODE XREF: sub_40C4F0+D91↓j
.text:0040D0CF                 mov     edx, [esp+97Ch+arg_C]
.text:0040D0D6                 lea     edi, [ecx+ecx*4]
.text:0040D0D9                 xor     eax, eax
.text:0040D0DB                 lea     ebp, ds:0[edi*4]
.text:0040D0E2                 mov     ebx, [esp+97Ch+Block]
.text:0040D0E9                 mov     edi, [edx]
.text:0040D0EB                 sub     [esp+97Ch+var_904], edi
.text:0040D0EF                 mov     edx, edi
.text:0040D0F1                 mov     esi, [esp+97Ch+var_904]
.text:0040D0F5                 mov     [ebx+ebp], esi
.text:0040D0F8                 mov     esi, [esp+97Ch+var_908]
.text:0040D0FC                 test    esi, esi
.text:0040D0FE                 jz      short loc_40D107
.text:0040D100                 mov     eax, [esp+97Ch+var_908]
.text:0040D104                 sub     eax, edi
.text:0040D106                 inc     eax
.text:0040D107
.text:0040D107 loc_40D107:                             ; CODE XREF: sub_40C4F0+C0E↑j
.text:0040D107                 mov     [ebx+ebp+4], eax
.text:0040D10B                 lea     esi, [ecx+ecx*4]
.text:0040D10E                 mov     ebp, [esp+97Ch+var_90C]
.text:0040D112                 mov     ecx, [esp+97Ch+var_950]
.text:0040D116                 shl     esi, 2
.text:0040D119                 mov     [ebx+esi+10h], ebp
.text:0040D11D                 sub     ecx, edx
.text:0040D11F                 cmp     ebp, 0FFh
.text:0040D125                 mov     [ebx+esi+0Ch], ecx
.text:0040D129                 ja      loc_40D219
.text:0040D12F                 mov     edx, [esp+97Ch+var_24]
.text:0040D136                 lea     esi, [ecx+2]
.text:0040D139                 mov     eax, [esp+97Ch+arg_C]
.text:0040D140                 lea     ebp, [edx+edx*4]
.text:0040D143                 lea     edx, [ecx+3]
.text:0040D146                 mov     [ebx+ebp*4+8], esi
.text:0040D14A                 mov     ecx, [eax+4]
.text:0040D14D                 cmp     edx, ecx
.text:0040D14F                 jbe     loc_40D201
.text:0040D155
.text:0040D155 loc_40D155:                             ; CODE XREF: sub_40C4F0+D0B↓j
.text:0040D155                 cmp     ecx, 10000h
.text:0040D15B                 mov     ebp, 0Fh
.text:0040D160                 jz      loc_40C906
.text:0040D166                 mov     esi, [esp+97Ch+arg_C]
.text:0040D16D                 lea     ebx, [ecx+ecx]
.text:0040D170                 cmp     ebx, 10000h
.text:0040D176                 mov     [esi+4], ebx
.text:0040D179                 jbe     short loc_40D182
.text:0040D17B                 mov     dword ptr [esi+4], 10000h
.text:0040D182
.text:0040D182 loc_40D182:                             ; CODE XREF: sub_40C4F0+C89↑j
.text:0040D182                 mov     eax, [esp+97Ch+arg_C]
.text:0040D189                 mov     ecx, [eax+4]
.text:0040D18C                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D18F                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040D193                 call    realloc
.text:0040D198                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D19F                 test    eax, eax
.text:0040D1A1                 mov     [ebp+0], eax
.text:0040D1A4                 mov     ebp, 0Ch
.text:0040D1A9                 jz      loc_40C906
.text:0040D1AF                 cmp     edi, eax
.text:0040D1B1                 jz      short loc_40D1E3
.text:0040D1B3                 sub     eax, edi
.text:0040D1B5                 mov     edi, [esp+97Ch+var_908]
.text:0040D1B9                 add     [esp+97Ch+var_950], eax
.text:0040D1BD                 test    edi, edi
.text:0040D1BF                 jz      short loc_40D1C5
.text:0040D1C1                 add     [esp+97Ch+var_908], eax
.text:0040D1C5
.text:0040D1C5 loc_40D1C5:                             ; CODE XREF: sub_40C4F0+CCF↑j
.text:0040D1C5                 mov     esi, [esp+97Ch+var_900]
.text:0040D1C9                 test    esi, esi
.text:0040D1CB                 jz      short loc_40D1D1
.text:0040D1CD                 add     [esp+97Ch+var_900], eax
.text:0040D1D1
.text:0040D1D1 loc_40D1D1:                             ; CODE XREF: sub_40C4F0+CDB↑j
.text:0040D1D1                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040D1D8                 test    ebx, ebx
.text:0040D1DA                 jz      short loc_40D1E3
.text:0040D1DC                 add     [esp+97Ch+var_8FC], eax
.text:0040D1E3
.text:0040D1E3 loc_40D1E3:                             ; CODE XREF: sub_40C4F0+CC1↑j
.text:0040D1E3                                         ; sub_40C4F0+CEA↑j
.text:0040D1E3                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D1EA                 mov     edx, [esp+97Ch+var_950]
.text:0040D1EE                 mov     edi, [ebp+0]
.text:0040D1F1                 mov     ecx, [ebp+4]
.text:0040D1F4                 sub     edx, edi
.text:0040D1F6                 add     edx, 3
.text:0040D1F9                 cmp     edx, ecx
.text:0040D1FB                 ja      loc_40D155
.text:0040D201
.text:0040D201 loc_40D201:                             ; CODE XREF: sub_40C4F0+C5F↑j
.text:0040D201                 mov     ecx, [esp+97Ch+var_950]
.text:0040D205                 mov     byte ptr [ecx], 6
.text:0040D208                 inc     ecx
.text:0040D209                 movzx   ebx, byte ptr [esp+97Ch+var_90C]
.text:0040D20E                 mov     [ecx], bl
.text:0040D210                 inc     ecx
.text:0040D211                 mov     byte ptr [ecx], 0
.text:0040D214                 inc     ecx
.text:0040D215                 mov     [esp+97Ch+var_950], ecx
.text:0040D219
.text:0040D219 loc_40D219:                             ; CODE XREF: sub_40C4F0+C39↑j
.text:0040D219                 inc     [esp+97Ch+var_24]
.text:0040D220                 mov     eax, [esp+97Ch+var_950]
.text:0040D224                 mov     [esp+97Ch+var_908], 0
.text:0040D22C                 mov     [esp+97Ch+var_900], 0
.text:0040D234                 mov     [esp+97Ch+var_904], eax
.text:0040D238
.text:0040D238 loc_40D238:                             ; CODE XREF: sub_40C4F0+2F9A↓j
.text:0040D238                                         ; sub_40C4F0+3107↓j ...
.text:0040D238                 xor     eax, eax
.text:0040D23A                 mov     [esp+97Ch+var_8FC], eax
.text:0040D241                 jmp     loc_40C91F
.text:0040D246 ; ---------------------------------------------------------------------------
.text:0040D246
.text:0040D246 loc_40D246:                             ; CODE XREF: sub_40C4F0+BD9↑j
.text:0040D246                 mov     ebp, [esp+97Ch+Block]
.text:0040D24D                 lea     edi, [ecx+ecx*4]
.text:0040D250                 shl     edi, 3
.text:0040D253                 mov     [esp+97Ch+var_978], edi ; Size
.text:0040D257                 mov     [esp+97Ch+Size], ebp ; Block
.text:0040D25A                 mov     ebp, 0Ch
.text:0040D25F                 call    realloc
.text:0040D264                 mov     [esp+97Ch+Block], eax
.text:0040D26B                 test    eax, eax
.text:0040D26D                 jz      loc_40C906
.text:0040D273                 shl     [esp+97Ch+var_28], 1
.text:0040D27A                 mov     ecx, [esp+97Ch+var_24]
.text:0040D281                 jmp     loc_40D0CF
.text:0040D286 ; ---------------------------------------------------------------------------
.text:0040D286
.text:0040D286 loc_40D286:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040D286                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040D286                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040C65F case 41
.text:0040D291                 jz      def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D297
.text:0040D297 loc_40D297:                             ; CODE XREF: sub_40C4F0+2537↓j
.text:0040D297                 mov     esi, [esp+97Ch+var_908]
.text:0040D29B                 test    esi, esi
.text:0040D29D                 jz      loc_40D3A4
.text:0040D2A3                 mov     eax, [esp+97Ch+arg_C]
.text:0040D2AA                 mov     ebp, [esp+97Ch+var_950]
.text:0040D2AE                 mov     edi, [eax]
.text:0040D2B0                 mov     edx, [eax+4]
.text:0040D2B3                 sub     ebp, edi
.text:0040D2B5                 mov     ebx, edi
.text:0040D2B7                 inc     ebp
.text:0040D2B8                 cmp     ebp, edx
.text:0040D2BA                 jbe     loc_40D375
.text:0040D2C0
.text:0040D2C0 loc_40D2C0:                             ; CODE XREF: sub_40C4F0+E7F↓j
.text:0040D2C0                 cmp     edx, 10000h
.text:0040D2C6                 mov     ebp, 0Fh
.text:0040D2CB                 jz      loc_40C906
.text:0040D2D1                 mov     esi, [esp+97Ch+arg_C]
.text:0040D2D8                 lea     ecx, [edx+edx]
.text:0040D2DB                 cmp     ecx, 10000h
.text:0040D2E1                 mov     [esi+4], ecx
.text:0040D2E4                 jbe     short loc_40D2ED
.text:0040D2E6                 mov     dword ptr [esi+4], 10000h
.text:0040D2ED
.text:0040D2ED loc_40D2ED:                             ; CODE XREF: sub_40C4F0+DF4↑j
.text:0040D2ED                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D2F4                 mov     esi, [ebp+4]
.text:0040D2F7                 mov     ebp, 0Ch
.text:0040D2FC                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D2FF                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D303                 call    realloc
.text:0040D308                 mov     edx, [esp+97Ch+arg_C]
.text:0040D30F                 test    eax, eax
.text:0040D311                 mov     [edx], eax
.text:0040D313                 jz      loc_40C906
.text:0040D319                 cmp     ebx, eax
.text:0040D31B                 jz      short loc_40D351
.text:0040D31D                 sub     eax, ebx
.text:0040D31F                 mov     ebx, [esp+97Ch+var_908]
.text:0040D323                 add     [esp+97Ch+var_950], eax
.text:0040D327                 add     [esp+97Ch+var_904], eax
.text:0040D32B                 test    ebx, ebx
.text:0040D32D                 jz      short loc_40D333
.text:0040D32F                 add     [esp+97Ch+var_908], eax
.text:0040D333
.text:0040D333 loc_40D333:                             ; CODE XREF: sub_40C4F0+E3D↑j
.text:0040D333                 mov     edi, [esp+97Ch+var_900]
.text:0040D337                 test    edi, edi
.text:0040D339                 jz      short loc_40D33F
.text:0040D33B                 add     [esp+97Ch+var_900], eax
.text:0040D33F
.text:0040D33F loc_40D33F:                             ; CODE XREF: sub_40C4F0+E49↑j
.text:0040D33F                 mov     edx, [esp+97Ch+var_8FC]
.text:0040D346                 test    edx, edx
.text:0040D348                 jz      short loc_40D351
.text:0040D34A                 add     [esp+97Ch+var_8FC], eax
.text:0040D351
.text:0040D351 loc_40D351:                             ; CODE XREF: sub_40C4F0+E2B↑j
.text:0040D351                                         ; sub_40C4F0+E58↑j
.text:0040D351                 mov     esi, [esp+97Ch+arg_C]
.text:0040D358                 mov     eax, [esp+97Ch+arg_C]
.text:0040D35F                 mov     ecx, [esp+97Ch+var_950]
.text:0040D363                 mov     edi, [esi]
.text:0040D365                 mov     edx, [eax+4]
.text:0040D368                 sub     ecx, edi
.text:0040D36A                 inc     ecx
.text:0040D36B                 mov     ebx, edi
.text:0040D36D                 cmp     ecx, edx
.text:0040D36F                 ja      loc_40D2C0
.text:0040D375
.text:0040D375 loc_40D375:                             ; CODE XREF: sub_40C4F0+DCA↑j
.text:0040D375                 mov     edx, [esp+97Ch+var_950]
.text:0040D379                 mov     byte ptr [edx], 14h
.text:0040D37C                 mov     edi, [esp+97Ch+var_908]
.text:0040D380                 inc     edx
.text:0040D381                 mov     [esp+97Ch+var_950], edx
.text:0040D385                 mov     ebx, edx
.text:0040D387                 mov     ebp, [esp+97Ch+var_908]
.text:0040D38B                 mov     [esp+97Ch+Size], 0Eh
.text:0040D392                 sub     ebx, edi
.text:0040D394                 sub     ebx, 4
.text:0040D397                 mov     [esp+97Ch+var_974], ebx
.text:0040D39B                 mov     [esp+97Ch+var_978], ebp
.text:0040D39F                 call    sub_4092C0
.text:0040D3A4
.text:0040D3A4 loc_40D3A4:                             ; CODE XREF: sub_40C4F0+DAD↑j
.text:0040D3A4                 mov     eax, [esp+97Ch+var_24]
.text:0040D3AB                 test    eax, eax
.text:0040D3AD                 jnz     short loc_40D3D4
.text:0040D3AF                 test    [esp+97Ch+arg_8], 20000h
.text:0040D3BA                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040D3C0
.text:0040D3C0 loc_40D3C0:                             ; CODE XREF: sub_40C4F0+254E↓j
.text:0040D3C0                 mov     ecx, [esp+97Ch+Block]
.text:0040D3C7                 mov     ebp, 10h
.text:0040D3CC
.text:0040D3CC loc_40D3CC:                             ; CODE XREF: sub_40C4F0+15EA↓j
.text:0040D3CC                                         ; sub_40C4F0+21AF↓j
.text:0040D3CC                 mov     [esp+97Ch+Size], ecx
.text:0040D3CF                 jmp     loc_40CA93
.text:0040D3D4 ; ---------------------------------------------------------------------------
.text:0040D3D4
.text:0040D3D4 loc_40D3D4:                             ; CODE XREF: sub_40C4F0+EBD↑j
.text:0040D3D4                 dec     eax
.text:0040D3D5                 mov     edx, [esp+97Ch+Block]
.text:0040D3DC                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D3E3                 mov     [esp+97Ch+var_24], eax
.text:0040D3EA                 lea     esi, [eax+eax*4]
.text:0040D3ED                 shl     esi, 2
.text:0040D3F0                 mov     ebx, [ebp+0]
.text:0040D3F3                 mov     edi, [edx+esi]
.text:0040D3F6                 mov     ebp, [edx+esi+4]
.text:0040D3FA                 mov     ecx, ebx
.text:0040D3FC                 add     edi, ebx
.text:0040D3FE                 test    ebp, ebp
.text:0040D400                 mov     [esp+97Ch+var_904], edi
.text:0040D404                 lea     edi, [ebp+ebx-1]
.text:0040D408                 setz    bl
.text:0040D40B                 movzx   esi, bl
.text:0040D40E                 mov     ebx, [esp+97Ch+var_24]
.text:0040D415                 dec     esi
.text:0040D416                 and     edi, esi
.text:0040D418                 lea     eax, [ebx+ebx*4]
.text:0040D41B                 mov     [esp+97Ch+var_908], edi
.text:0040D41F                 shl     eax, 2
.text:0040D422                 xor     esi, esi
.text:0040D424                 mov     [esp+97Ch+var_8FC], esi
.text:0040D42B                 mov     ebx, [edx+eax+10h]
.text:0040D42F                 mov     ebp, [edx+eax+0Ch]
.text:0040D433                 mov     [esp+97Ch+var_930], ebx
.text:0040D437                 add     ebp, ecx
.text:0040D439                 cmp     ebx, 0FFh
.text:0040D43F                 mov     [esp+97Ch+var_900], ebp
.text:0040D443                 ja      loc_40C91F
.text:0040D449                 mov     esi, [edx+eax+8]
.text:0040D44D                 movzx   edx, byte ptr [esp+97Ch+var_90C]
.text:0040D452                 add     ecx, esi
.text:0040D454                 sub     dl, bl
.text:0040D456                 mov     [ecx], dl
.text:0040D458                 mov     eax, [esp+97Ch+arg_C]
.text:0040D45F                 mov     ecx, [esp+97Ch+var_950]
.text:0040D463                 mov     edi, [eax]
.text:0040D465                 mov     edx, [eax+4]
.text:0040D468                 sub     ecx, edi
.text:0040D46A                 add     ecx, 3
.text:0040D46D                 mov     ebx, edi
.text:0040D46F                 cmp     ecx, edx
.text:0040D471                 jbe     loc_40D52E
.text:0040D477
.text:0040D477 loc_40D477:                             ; CODE XREF: sub_40C4F0+1038↓j
.text:0040D477                 cmp     edx, 10000h
.text:0040D47D                 mov     ebp, 0Fh
.text:0040D482                 jz      loc_40C906
.text:0040D488                 lea     ebp, [edx+edx]
.text:0040D48B                 mov     edx, [esp+97Ch+arg_C]
.text:0040D492                 cmp     ebp, 10000h
.text:0040D498                 mov     [edx+4], ebp
.text:0040D49B                 jbe     short loc_40D4A4
.text:0040D49D                 mov     dword ptr [edx+4], 10000h
.text:0040D4A4
.text:0040D4A4 loc_40D4A4:                             ; CODE XREF: sub_40C4F0+FAB↑j
.text:0040D4A4                 mov     eax, [esp+97Ch+arg_C]
.text:0040D4AB                 mov     ebp, 0Ch
.text:0040D4B0                 mov     edx, [eax+4]
.text:0040D4B3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D4B6                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040D4BA                 call    realloc
.text:0040D4BF                 mov     edi, [esp+97Ch+arg_C]
.text:0040D4C6                 test    eax, eax
.text:0040D4C8                 mov     [edi], eax
.text:0040D4CA                 jz      loc_40C906
.text:0040D4D0                 cmp     ebx, eax
.text:0040D4D2                 jz      short loc_40D508
.text:0040D4D4                 sub     eax, ebx
.text:0040D4D6                 mov     ebx, [esp+97Ch+var_908]
.text:0040D4DA                 add     [esp+97Ch+var_950], eax
.text:0040D4DE                 add     [esp+97Ch+var_904], eax
.text:0040D4E2                 test    ebx, ebx
.text:0040D4E4                 jz      short loc_40D4EA
.text:0040D4E6                 add     [esp+97Ch+var_908], eax
.text:0040D4EA
.text:0040D4EA loc_40D4EA:                             ; CODE XREF: sub_40C4F0+FF4↑j
.text:0040D4EA                 mov     ecx, [esp+97Ch+var_900]
.text:0040D4EE                 test    ecx, ecx
.text:0040D4F0                 jz      short loc_40D4F6
.text:0040D4F2                 add     [esp+97Ch+var_900], eax
.text:0040D4F6
.text:0040D4F6 loc_40D4F6:                             ; CODE XREF: sub_40C4F0+1000↑j
.text:0040D4F6                 mov     esi, [esp+97Ch+var_8FC]
.text:0040D4FD                 test    esi, esi
.text:0040D4FF                 jz      short loc_40D508
.text:0040D501                 add     [esp+97Ch+var_8FC], eax
.text:0040D508
.text:0040D508 loc_40D508:                             ; CODE XREF: sub_40C4F0+FE2↑j
.text:0040D508                                         ; sub_40C4F0+100F↑j
.text:0040D508                 mov     edx, [esp+97Ch+arg_C]
.text:0040D50F                 mov     eax, [esp+97Ch+arg_C]
.text:0040D516                 mov     ebp, [esp+97Ch+var_950]
.text:0040D51A                 mov     edi, [edx]
.text:0040D51C                 mov     edx, [eax+4]
.text:0040D51F                 sub     ebp, edi
.text:0040D521                 add     ebp, 3
.text:0040D524                 mov     ebx, edi
.text:0040D526                 cmp     ebp, edx
.text:0040D528                 ja      loc_40D477
.text:0040D52E
.text:0040D52E loc_40D52E:                             ; CODE XREF: sub_40C4F0+F81↑j
.text:0040D52E                 mov     ebx, [esp+97Ch+var_950]
.text:0040D532                 mov     byte ptr [ebx], 7
.text:0040D535                 inc     ebx
.text:0040D536                 movzx   edx, byte ptr [esp+97Ch+var_930]
.text:0040D53B                 mov     [ebx], dl
.text:0040D53D                 inc     ebx
.text:0040D53E                 movzx   ecx, byte ptr [esp+97Ch+var_90C]
.text:0040D543                 sub     cl, byte ptr [esp+97Ch+var_930]
.text:0040D547                 mov     [ebx], cl
.text:0040D549                 jmp     loc_40D067
.text:0040D549 ; ---------------------------------------------------------------------------
.text:0040D54E                 align 10h
.text:0040D550
.text:0040D550 loc_40D550:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040D550                                         ; sub_40C4F0+16DF↓j ...
.text:0040D550                 mov     ebp, [esp+97Ch+var_900] ; jumptable 0040C65F case 42
.text:0040D554                 test    ebp, ebp
.text:0040D556                 jz      loc_40DAB1
.text:0040D55C
.text:0040D55C loc_40D55C:                             ; CODE XREF: sub_40C4F0+15D3↓j
.text:0040D55C                 mov     [esp+97Ch+var_91C], 0
.text:0040D561                 xor     ecx, ecx
.text:0040D563                 mov     [esp+97Ch+var_91D], 0
.text:0040D568
.text:0040D568 loc_40D568:                             ; CODE XREF: sub_40C4F0+10ED↓j
.text:0040D568                                         ; sub_40C4F0+1105↓j ...
.text:0040D568                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040D570                 movsx   eax, [esp+97Ch+var_91D]
.text:0040D575                 jz      short loc_40D57A
.text:0040D577                 or      eax, 1
.text:0040D57A
.text:0040D57A loc_40D57A:                             ; CODE XREF: sub_40C4F0+1085↑j
.text:0040D57A                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040D582                 mov     [esp+97Ch+var_91D], al
.text:0040D586                 movsx   eax, cl
.text:0040D589                 jz      short loc_40D58E
.text:0040D58B                 or      eax, 1
.text:0040D58E
.text:0040D58E loc_40D58E:                             ; CODE XREF: sub_40C4F0+1099↑j
.text:0040D58E                 mov     edx, [esp+97Ch+var_8D0]
.text:0040D595                 mov     cl, al
.text:0040D597                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040D59E                 jz      short loc_40D610
.text:0040D5A0                 movzx   eax, byte ptr [edx]
.text:0040D5A3                 lea     edi, [edx+1]
.text:0040D5A6                 mov     esi, [esp+97Ch+var_8F8]
.text:0040D5AD                 mov     [esp+97Ch+var_8D0], edi
.text:0040D5B4                 test    esi, esi
.text:0040D5B6                 mov     [esp+97Ch+var_8EC], al
.text:0040D5BD                 jz      short loc_40D5D5
.text:0040D5BF                 mov     esi, [esp+97Ch+var_8F8]
.text:0040D5C6                 movzx   ebp, al
.text:0040D5C9                 movzx   eax, byte ptr [ebp+esi+0]
.text:0040D5CE                 mov     [esp+97Ch+var_8EC], al
.text:0040D5D5
.text:0040D5D5 loc_40D5D5:                             ; CODE XREF: sub_40C4F0+10CD↑j
.text:0040D5D5                 cmp     [esp+97Ch+var_8EC], 2Ah ; '*'
.text:0040D5DD                 jz      short loc_40D568
.text:0040D5DF                 test    byte ptr [esp+97Ch+arg_8], 2
.text:0040D5E7                 jnz     loc_40DA40
.text:0040D5ED                 cmp     [esp+97Ch+var_8EC], 2Bh ; '+'
.text:0040D5F5                 jz      loc_40D568
.text:0040D5FB                 cmp     [esp+97Ch+var_8EC], 3Fh ; '?'
.text:0040D603                 jz      loc_40D568
.text:0040D609
.text:0040D609 loc_40D609:                             ; CODE XREF: sub_40C4F0+1558↓j
.text:0040D609                 dec     [esp+97Ch+var_8D0]
.text:0040D610
.text:0040D610 loc_40D610:                             ; CODE XREF: sub_40C4F0+10AE↑j
.text:0040D610                                         ; sub_40C4F0+15AB↓j
.text:0040D610                 mov     edx, [esp+97Ch+var_900]
.text:0040D614                 test    edx, edx
.text:0040D616                 jz      loc_40C91F
.text:0040D61C                 test    cl, cl
.text:0040D61E                 jz      loc_40D823
.text:0040D624                 mov     ebx, [esp+97Ch+arg_C]
.text:0040D62B                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D632                 mov     esi, [esp+97Ch+var_950]
.text:0040D636                 mov     edi, [ebx]
.text:0040D638                 mov     edx, [ebp+4]
.text:0040D63B                 sub     esi, edi
.text:0040D63D                 add     esi, 3
.text:0040D640                 mov     ebx, edi
.text:0040D642                 cmp     esi, edx
.text:0040D644                 jbe     loc_40D701
.text:0040D64A
.text:0040D64A loc_40D64A:                             ; CODE XREF: sub_40C4F0+120B↓j
.text:0040D64A                 cmp     edx, 10000h
.text:0040D650                 mov     ebp, 0Fh
.text:0040D655                 jz      loc_40C906
.text:0040D65B                 mov     esi, [esp+97Ch+arg_C]
.text:0040D662                 lea     ecx, [edx+edx]
.text:0040D665                 cmp     ecx, 10000h
.text:0040D66B                 mov     [esi+4], ecx
.text:0040D66E                 jbe     short loc_40D677
.text:0040D670                 mov     dword ptr [esi+4], 10000h
.text:0040D677
.text:0040D677 loc_40D677:                             ; CODE XREF: sub_40C4F0+117E↑j
.text:0040D677                 mov     eax, [esp+97Ch+arg_C]
.text:0040D67E                 mov     ebp, 0Ch
.text:0040D683                 mov     esi, [eax+4]
.text:0040D686                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D689                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D68D                 call    realloc
.text:0040D692                 mov     edi, [esp+97Ch+arg_C]
.text:0040D699                 test    eax, eax
.text:0040D69B                 mov     [edi], eax
.text:0040D69D                 jz      loc_40C906
.text:0040D6A3                 cmp     ebx, eax
.text:0040D6A5                 jz      short loc_40D6DB
.text:0040D6A7                 mov     edx, [esp+97Ch+var_908]
.text:0040D6AB                 sub     eax, ebx
.text:0040D6AD                 add     [esp+97Ch+var_950], eax
.text:0040D6B1                 add     [esp+97Ch+var_904], eax
.text:0040D6B5                 test    edx, edx
.text:0040D6B7                 jz      short loc_40D6BD
.text:0040D6B9                 add     [esp+97Ch+var_908], eax
.text:0040D6BD
.text:0040D6BD loc_40D6BD:                             ; CODE XREF: sub_40C4F0+11C7↑j
.text:0040D6BD                 mov     ebp, [esp+97Ch+var_900]
.text:0040D6C1                 test    ebp, ebp
.text:0040D6C3                 jz      short loc_40D6C9
.text:0040D6C5                 add     [esp+97Ch+var_900], eax
.text:0040D6C9
.text:0040D6C9 loc_40D6C9:                             ; CODE XREF: sub_40C4F0+11D3↑j
.text:0040D6C9                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040D6D0                 test    ebx, ebx
.text:0040D6D2                 jz      short loc_40D6DB
.text:0040D6D4                 add     [esp+97Ch+var_8FC], eax
.text:0040D6DB
.text:0040D6DB loc_40D6DB:                             ; CODE XREF: sub_40C4F0+11B5↑j
.text:0040D6DB                                         ; sub_40C4F0+11E2↑j
.text:0040D6DB                 mov     esi, [esp+97Ch+arg_C]
.text:0040D6E2                 mov     eax, [esp+97Ch+arg_C]
.text:0040D6E9                 mov     ecx, [esp+97Ch+var_950]
.text:0040D6ED                 mov     edi, [esi]
.text:0040D6EF                 mov     edx, [eax+4]
.text:0040D6F2                 sub     ecx, edi
.text:0040D6F4                 add     ecx, 3
.text:0040D6F7                 mov     ebx, edi
.text:0040D6F9                 cmp     ecx, edx
.text:0040D6FB                 ja      loc_40D64A
.text:0040D701
.text:0040D701 loc_40D701:                             ; CODE XREF: sub_40C4F0+1154↑j
.text:0040D701                 mov     edi, [esp+97Ch+var_8F8]
.text:0040D708                 test    edi, edi
.text:0040D70A                 jz      loc_40DA2A
.text:0040D710                 mov     edi, [esp+97Ch+var_8D0]
.text:0040D717                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040D71E                 movzx   ebp, byte ptr [edi-2]
.text:0040D722                 movsx   edx, byte ptr [ebp+ebx+0]
.text:0040D727
.text:0040D727 loc_40D727:                             ; CODE XREF: sub_40C4F0+1545↓j
.text:0040D727                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040D72E                 test    ecx, ecx
.text:0040D730                 jz      loc_40DA22
.text:0040D736                 mov     eax, [esp+97Ch+var_8F8]
.text:0040D73D                 movsx   esi, byte ptr [eax+2Eh]
.text:0040D741                 cmp     edx, esi
.text:0040D743
.text:0040D743 loc_40D743:                             ; CODE XREF: sub_40C4F0+1535↓j
.text:0040D743                 jz      loc_40D98B
.text:0040D749
.text:0040D749 loc_40D749:                             ; CODE XREF: sub_40C4F0+14A0↓j
.text:0040D749                                         ; sub_40C4F0+14AD↓j ...
.text:0040D749                 mov     [esp+97Ch+Size], 12h
.text:0040D750                 mov     ebx, [esp+97Ch+var_900]
.text:0040D754                 mov     ecx, [esp+97Ch+var_950]
.text:0040D758                 mov     edi, [esp+97Ch+var_950]
.text:0040D75C                 sub     ebx, ecx
.text:0040D75E                 sub     ebx, 6
.text:0040D761                 mov     [esp+97Ch+var_974], ebx
.text:0040D765                 mov     [esp+97Ch+var_978], edi
.text:0040D769                 call    sub_4092C0
.text:0040D76E
.text:0040D76E loc_40D76E:                             ; CODE XREF: sub_40C4F0+1523↓j
.text:0040D76E                 add     [esp+97Ch+var_950], 3
.text:0040D773                 mov     esi, [esp+97Ch+arg_C]
.text:0040D77A                 mov     eax, [esp+97Ch+var_950]
.text:0040D77E                 mov     edi, [esi]
.text:0040D780                 mov     edx, [esi+4]
.text:0040D783
.text:0040D783 loc_40D783:                             ; CODE XREF: sub_40C4F0+134A↓j
.text:0040D783                 sub     eax, edi
.text:0040D785                 mov     ebx, edi
.text:0040D787                 add     eax, 3
.text:0040D78A                 cmp     eax, edx
.text:0040D78C                 jbe     loc_40D83F
.text:0040D792                 cmp     edx, 10000h
.text:0040D798                 mov     ebp, 0Fh
.text:0040D79D                 jz      loc_40C906
.text:0040D7A3                 mov     esi, [esp+97Ch+arg_C]
.text:0040D7AA                 lea     ebp, [edx+edx]
.text:0040D7AD                 cmp     ebp, 10000h
.text:0040D7B3                 mov     [esi+4], ebp
.text:0040D7B6                 jbe     short loc_40D7BF
.text:0040D7B8                 mov     dword ptr [esi+4], 10000h
.text:0040D7BF
.text:0040D7BF loc_40D7BF:                             ; CODE XREF: sub_40C4F0+12C6↑j
.text:0040D7BF                 mov     eax, [esp+97Ch+arg_C]
.text:0040D7C6                 mov     ebp, 0Ch
.text:0040D7CB                 mov     ecx, [eax+4]
.text:0040D7CE                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D7D1                 mov     [esp+97Ch+var_978], ecx ; Size
.text:0040D7D5                 call    realloc
.text:0040D7DA                 mov     edx, [esp+97Ch+arg_C]
.text:0040D7E1                 test    eax, eax
.text:0040D7E3                 mov     [edx], eax
.text:0040D7E5                 jz      loc_40C906
.text:0040D7EB                 cmp     ebx, eax
.text:0040D7ED                 jz      short loc_40D823
.text:0040D7EF                 mov     edi, [esp+97Ch+var_908]
.text:0040D7F3                 sub     eax, ebx
.text:0040D7F5                 add     [esp+97Ch+var_950], eax
.text:0040D7F9                 add     [esp+97Ch+var_904], eax
.text:0040D7FD                 test    edi, edi
.text:0040D7FF                 jz      short loc_40D805
.text:0040D801                 add     [esp+97Ch+var_908], eax
.text:0040D805
.text:0040D805 loc_40D805:                             ; CODE XREF: sub_40C4F0+130F↑j
.text:0040D805                 mov     ebx, [esp+97Ch+var_900]
.text:0040D809                 test    ebx, ebx
.text:0040D80B                 jz      short loc_40D811
.text:0040D80D                 add     [esp+97Ch+var_900], eax
.text:0040D811
.text:0040D811 loc_40D811:                             ; CODE XREF: sub_40C4F0+131B↑j
.text:0040D811                 mov     esi, [esp+97Ch+var_8FC]
.text:0040D818                 test    esi, esi
.text:0040D81A                 jz      short loc_40D823
.text:0040D81C                 add     [esp+97Ch+var_8FC], eax
.text:0040D823
.text:0040D823 loc_40D823:                             ; CODE XREF: sub_40C4F0+112E↑j
.text:0040D823                                         ; sub_40C4F0+12FD↑j ...
.text:0040D823                 mov     edx, [esp+97Ch+arg_C]
.text:0040D82A                 mov     ebp, [esp+97Ch+arg_C]
.text:0040D831                 mov     eax, [esp+97Ch+var_950]
.text:0040D835                 mov     edi, [edx]
.text:0040D837                 mov     edx, [ebp+4]
.text:0040D83A                 jmp     loc_40D783
.text:0040D83F ; ---------------------------------------------------------------------------
.text:0040D83F
.text:0040D83F loc_40D83F:                             ; CODE XREF: sub_40C4F0+129C↑j
.text:0040D83F                 movzx   edx, [esp+97Ch+var_91C]
.text:0040D844                 mov     ebx, [esp+97Ch+var_950]
.text:0040D848                 mov     eax, [esp+97Ch+var_900]
.text:0040D84C                 mov     edi, [esp+97Ch+var_900]
.text:0040D850                 mov     esi, ebx
.text:0040D852                 and     edx, 1
.text:0040D855                 mov     [esp+97Ch+var_970], ebx
.text:0040D859                 sub     esi, eax
.text:0040D85B                 add     edx, 0Fh
.text:0040D85E                 mov     [esp+97Ch+var_974], esi
.text:0040D862                 add     ebx, 3
.text:0040D865                 mov     [esp+97Ch+var_978], edi
.text:0040D869                 mov     [esp+97Ch+Size], edx
.text:0040D86C                 call    sub_409310
.text:0040D871                 mov     [esp+97Ch+var_950], ebx
.text:0040D875                 xor     ecx, ecx
.text:0040D877                 cmp     [esp+97Ch+var_91D], 0
.text:0040D87C                 mov     [esp+97Ch+var_8FC], ecx
.text:0040D883                 jnz     loc_40C91F
.text:0040D889                 mov     ecx, [esp+97Ch+arg_C]
.text:0040D890                 mov     ebp, [esp+97Ch+var_950]
.text:0040D894                 mov     edi, [ecx]
.text:0040D896                 mov     edx, [ecx+4]
.text:0040D899                 sub     ebp, edi
.text:0040D89B                 mov     ebx, edi
.text:0040D89D                 add     ebp, 3
.text:0040D8A0                 cmp     ebp, edx
.text:0040D8A2                 jbe     loc_40D95F
.text:0040D8A8
.text:0040D8A8 loc_40D8A8:                             ; CODE XREF: sub_40C4F0+1469↓j
.text:0040D8A8                 cmp     edx, 10000h
.text:0040D8AE                 mov     ebp, 0Fh
.text:0040D8B3                 jz      loc_40C906
.text:0040D8B9                 mov     esi, [esp+97Ch+arg_C]
.text:0040D8C0                 lea     ebp, [edx+edx]
.text:0040D8C3                 cmp     ebp, 10000h
.text:0040D8C9                 mov     [esi+4], ebp
.text:0040D8CC                 jbe     short loc_40D8D5
.text:0040D8CE                 mov     dword ptr [esi+4], 10000h
.text:0040D8D5
.text:0040D8D5 loc_40D8D5:                             ; CODE XREF: sub_40C4F0+13DC↑j
.text:0040D8D5                 mov     eax, [esp+97Ch+arg_C]
.text:0040D8DC                 mov     ebp, 0Ch
.text:0040D8E1                 mov     esi, [eax+4]
.text:0040D8E4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040D8E7                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040D8EB                 call    realloc
.text:0040D8F0                 mov     edx, [esp+97Ch+arg_C]
.text:0040D8F7                 test    eax, eax
.text:0040D8F9                 mov     [edx], eax
.text:0040D8FB                 jz      loc_40C906
.text:0040D901                 cmp     ebx, eax
.text:0040D903                 jz      short loc_40D939
.text:0040D905                 mov     edi, [esp+97Ch+var_908]
.text:0040D909                 sub     eax, ebx
.text:0040D90B                 add     [esp+97Ch+var_950], eax
.text:0040D90F                 add     [esp+97Ch+var_904], eax
.text:0040D913                 test    edi, edi
.text:0040D915                 jz      short loc_40D91B
.text:0040D917                 add     [esp+97Ch+var_908], eax
.text:0040D91B
.text:0040D91B loc_40D91B:                             ; CODE XREF: sub_40C4F0+1425↑j
.text:0040D91B                 mov     ebx, [esp+97Ch+var_900]
.text:0040D91F                 test    ebx, ebx
.text:0040D921                 jz      short loc_40D927
.text:0040D923                 add     [esp+97Ch+var_900], eax
.text:0040D927
.text:0040D927 loc_40D927:                             ; CODE XREF: sub_40C4F0+1431↑j
.text:0040D927                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040D92E                 test    ecx, ecx
.text:0040D930                 jz      short loc_40D939
.text:0040D932                 add     [esp+97Ch+var_8FC], eax
.text:0040D939
.text:0040D939 loc_40D939:                             ; CODE XREF: sub_40C4F0+1413↑j
.text:0040D939                                         ; sub_40C4F0+1440↑j
.text:0040D939                 mov     edx, [esp+97Ch+arg_C]
.text:0040D940                 mov     eax, [esp+97Ch+arg_C]
.text:0040D947                 mov     ebp, [esp+97Ch+var_950]
.text:0040D94B                 mov     edi, [edx]
.text:0040D94D                 mov     edx, [eax+4]
.text:0040D950                 sub     ebp, edi
.text:0040D952                 add     ebp, 3
.text:0040D955                 mov     ebx, edi
.text:0040D957                 cmp     ebp, edx
.text:0040D959                 ja      loc_40D8A8
.text:0040D95F
.text:0040D95F loc_40D95F:                             ; CODE XREF: sub_40C4F0+13B2↑j
.text:0040D95F                 mov     [esp+97Ch+var_974], 3
.text:0040D967                 mov     edi, [esp+97Ch+var_950]
.text:0040D96B                 mov     esi, [esp+97Ch+var_900]
.text:0040D96F                 mov     [esp+97Ch+Size], 13h
.text:0040D976                 mov     [esp+97Ch+var_970], edi
.text:0040D97A                 add     edi, 3
.text:0040D97D                 mov     [esp+97Ch+var_978], esi
.text:0040D981                 call    sub_409310
.text:0040D986                 jmp     loc_40C91B
.text:0040D98B ; ---------------------------------------------------------------------------
.text:0040D98B
.text:0040D98B loc_40D98B:                             ; CODE XREF: sub_40C4F0:loc_40D743↑j
.text:0040D98B                 cmp     [esp+97Ch+var_91D], 0
.text:0040D990                 jz      loc_40D749
.text:0040D996                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040D99D                 jnb     loc_40D749
.text:0040D9A3                 mov     edx, [esp+97Ch+var_8F8]
.text:0040D9AA                 test    edx, edx
.text:0040D9AC                 jz      short loc_40DA1D
.text:0040D9AE                 movzx   ebp, byte ptr [edi]
.text:0040D9B1                 mov     edi, [esp+97Ch+var_8F8]
.text:0040D9B8                 movsx   edx, byte ptr [ebp+edi+0]
.text:0040D9BD
.text:0040D9BD loc_40D9BD:                             ; CODE XREF: sub_40C4F0+1530↓j
.text:0040D9BD                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040D9C4                 test    ebx, ebx
.text:0040D9C6                 jz      short loc_40DA18
.text:0040D9C8                 mov     esi, [esp+97Ch+var_8F8]
.text:0040D9CF                 movsx   ecx, byte ptr [esi+0Ah]
.text:0040D9D3                 cmp     edx, ecx
.text:0040D9D5
.text:0040D9D5 loc_40D9D5:                             ; CODE XREF: sub_40C4F0+152B↓j
.text:0040D9D5                 jnz     loc_40D749
.text:0040D9DB                 test    byte ptr [esp+97Ch+arg_8], 40h
.text:0040D9E3                 jnz     loc_40D749
.text:0040D9E9                 mov     [esp+97Ch+Size], 0Dh
.text:0040D9F0                 mov     ebp, [esp+97Ch+var_900]
.text:0040D9F4                 mov     eax, [esp+97Ch+var_950]
.text:0040D9F8                 mov     edx, [esp+97Ch+var_950]
.text:0040D9FC                 sub     ebp, eax
.text:0040D9FE                 sub     ebp, 3
.text:0040DA01                 mov     [esp+97Ch+var_974], ebp
.text:0040DA05                 mov     [esp+97Ch+var_978], edx
.text:0040DA09                 call    sub_4092C0
.text:0040DA0E                 mov     [esp+97Ch+var_91C], 1
.text:0040DA13                 jmp     loc_40D76E
.text:0040DA18 ; ---------------------------------------------------------------------------
.text:0040DA18
.text:0040DA18 loc_40DA18:                             ; CODE XREF: sub_40C4F0+14D6↑j
.text:0040DA18                 cmp     edx, 0Ah
.text:0040DA1B                 jmp     short loc_40D9D5
.text:0040DA1D ; ---------------------------------------------------------------------------
.text:0040DA1D
.text:0040DA1D loc_40DA1D:                             ; CODE XREF: sub_40C4F0+14BC↑j
.text:0040DA1D                 movsx   edx, byte ptr [edi]
.text:0040DA20                 jmp     short loc_40D9BD
.text:0040DA22 ; ---------------------------------------------------------------------------
.text:0040DA22
.text:0040DA22 loc_40DA22:                             ; CODE XREF: sub_40C4F0+1240↑j
.text:0040DA22                 cmp     edx, 2Eh ; '.'
.text:0040DA25                 jmp     loc_40D743
.text:0040DA2A ; ---------------------------------------------------------------------------
.text:0040DA2A
.text:0040DA2A loc_40DA2A:                             ; CODE XREF: sub_40C4F0+121A↑j
.text:0040DA2A                 mov     edi, [esp+97Ch+var_8D0]
.text:0040DA31                 movsx   edx, byte ptr [edi-2]
.text:0040DA35                 jmp     loc_40D727
.text:0040DA35 ; ---------------------------------------------------------------------------
.text:0040DA3A                 align 10h
.text:0040DA40
.text:0040DA40 loc_40DA40:                             ; CODE XREF: sub_40C4F0+10F7↑j
.text:0040DA40                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040DA48                 jnz     loc_40D609
.text:0040DA4E                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040DA55                 jz      short loc_40DAA0
.text:0040DA57                 movzx   ebx, byte ptr [edx+1]
.text:0040DA5B                 lea     ebp, [edx+2]
.text:0040DA5E                 mov     eax, [esp+97Ch+var_8F8]
.text:0040DA65                 mov     [esp+97Ch+var_8D0], ebp
.text:0040DA6C                 test    eax, eax
.text:0040DA6E                 jz      short loc_40DA7E
.text:0040DA70                 mov     eax, [esp+97Ch+var_8F8]
.text:0040DA77                 movzx   edi, bl
.text:0040DA7A                 movzx   ebx, byte ptr [edi+eax]
.text:0040DA7E
.text:0040DA7E loc_40DA7E:                             ; CODE XREF: sub_40C4F0+157E↑j
.text:0040DA7E                 cmp     bl, 2Bh ; '+'
.text:0040DA81                 jz      short loc_40DA88
.text:0040DA83                 cmp     bl, 3Fh ; '?'
.text:0040DA86                 jnz     short loc_40DA94
.text:0040DA88
.text:0040DA88 loc_40DA88:                             ; CODE XREF: sub_40C4F0+1591↑j
.text:0040DA88                 mov     [esp+97Ch+var_8EC], bl
.text:0040DA8F                 jmp     loc_40D568
.text:0040DA94 ; ---------------------------------------------------------------------------
.text:0040DA94
.text:0040DA94 loc_40DA94:                             ; CODE XREF: sub_40C4F0+1596↑j
.text:0040DA94                 mov     [esp+97Ch+var_8D0], edx
.text:0040DA9B                 jmp     loc_40D610
.text:0040DAA0 ; ---------------------------------------------------------------------------
.text:0040DAA0
.text:0040DAA0 loc_40DAA0:                             ; CODE XREF: sub_40C4F0+1565↑j
.text:0040DAA0                                         ; sub_40C4F0+21FF↓j ...
.text:0040DAA0                 mov     edi, [esp+97Ch+Block]
.text:0040DAA7                 mov     ebp, 5
.text:0040DAAC                 jmp     loc_40CA90
.text:0040DAB1 ; ---------------------------------------------------------------------------
.text:0040DAB1
.text:0040DAB1 loc_40DAB1:                             ; CODE XREF: sub_40C4F0+1066↑j
.text:0040DAB1                 test    byte ptr [esp+97Ch+arg_8], 20h
.text:0040DAB9                 jnz     short loc_40DACE
.text:0040DABB                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040DAC3                 jnz     loc_40D55C
.text:0040DAC9                 jmp     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040DACE ; ---------------------------------------------------------------------------
.text:0040DACE
.text:0040DACE loc_40DACE:                             ; CODE XREF: sub_40C4F0+15C9↑j
.text:0040DACE                                         ; sub_40C4F0+31A3↓j
.text:0040DACE                 mov     ecx, [esp+97Ch+Block]
.text:0040DAD5                 mov     ebp, 0Dh
.text:0040DADA                 jmp     loc_40D3CC
.text:0040DADA ; ---------------------------------------------------------------------------
.text:0040DADF                 align 10h
.text:0040DAE0
.text:0040DAE0 loc_40DAE0:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040DAE0                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040DAE0                 mov     eax, [esp+97Ch+arg_C] ; jumptable 0040C65F case 46
.text:0040DAE7                 mov     ecx, [esp+97Ch+var_950]
.text:0040DAEB                 mov     edi, [eax]
.text:0040DAED                 mov     [esp+97Ch+var_900], ecx
.text:0040DAF1                 mov     ebp, ecx
.text:0040DAF3                 mov     edx, [eax+4]
.text:0040DAF6                 sub     ebp, edi
.text:0040DAF8                 mov     ebx, edi
.text:0040DAFA                 inc     ebp
.text:0040DAFB                 cmp     ebp, edx
.text:0040DAFD                 jbe     loc_40DBB8
.text:0040DB03
.text:0040DB03 loc_40DB03:                             ; CODE XREF: sub_40C4F0+16C2↓j
.text:0040DB03                 cmp     edx, 10000h
.text:0040DB09                 mov     ebp, 0Fh
.text:0040DB0E                 jz      loc_40C906
.text:0040DB14                 mov     esi, [esp+97Ch+arg_C]
.text:0040DB1B                 lea     ebp, [edx+edx]
.text:0040DB1E                 cmp     ebp, 10000h
.text:0040DB24                 mov     [esi+4], ebp
.text:0040DB27                 jbe     short loc_40DB30
.text:0040DB29                 mov     dword ptr [esi+4], 10000h
.text:0040DB30
.text:0040DB30 loc_40DB30:                             ; CODE XREF: sub_40C4F0+1637↑j
.text:0040DB30                 mov     eax, [esp+97Ch+arg_C]
.text:0040DB37                 mov     ebp, 0Ch
.text:0040DB3C                 mov     esi, [eax+4]
.text:0040DB3F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040DB42                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040DB46                 call    realloc
.text:0040DB4B                 mov     edi, [esp+97Ch+arg_C]
.text:0040DB52                 test    eax, eax
.text:0040DB54                 mov     [edi], eax
.text:0040DB56                 jz      loc_40C906
.text:0040DB5C                 cmp     ebx, eax
.text:0040DB5E                 jz      short loc_40DB94
.text:0040DB60                 sub     eax, ebx
.text:0040DB62                 mov     ebx, [esp+97Ch+var_908]
.text:0040DB66                 add     [esp+97Ch+var_950], eax
.text:0040DB6A                 add     [esp+97Ch+var_904], eax
.text:0040DB6E                 test    ebx, ebx
.text:0040DB70                 jz      short loc_40DB76
.text:0040DB72                 add     [esp+97Ch+var_908], eax
.text:0040DB76
.text:0040DB76 loc_40DB76:                             ; CODE XREF: sub_40C4F0+1680↑j
.text:0040DB76                 mov     edx, [esp+97Ch+var_900]
.text:0040DB7A                 test    edx, edx
.text:0040DB7C                 jz      short loc_40DB82
.text:0040DB7E                 add     [esp+97Ch+var_900], eax
.text:0040DB82
.text:0040DB82 loc_40DB82:                             ; CODE XREF: sub_40C4F0+168C↑j
.text:0040DB82                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040DB89                 test    ecx, ecx
.text:0040DB8B                 jz      short loc_40DB94
.text:0040DB8D                 add     [esp+97Ch+var_8FC], eax
.text:0040DB94
.text:0040DB94 loc_40DB94:                             ; CODE XREF: sub_40C4F0+166E↑j
.text:0040DB94                                         ; sub_40C4F0+169B↑j
.text:0040DB94                 mov     esi, [esp+97Ch+arg_C]
.text:0040DB9B                 mov     eax, [esp+97Ch+arg_C]
.text:0040DBA2                 mov     ebp, [esp+97Ch+var_950]
.text:0040DBA6                 mov     edi, [esi]
.text:0040DBA8                 mov     edx, [eax+4]
.text:0040DBAB                 sub     ebp, edi
.text:0040DBAD                 inc     ebp
.text:0040DBAE                 mov     ebx, edi
.text:0040DBB0                 cmp     ebp, edx
.text:0040DBB2                 ja      loc_40DB03
.text:0040DBB8
.text:0040DBB8 loc_40DBB8:                             ; CODE XREF: sub_40C4F0+160D↑j
.text:0040DBB8                 mov     edi, [esp+97Ch+var_950]
.text:0040DBBC                 mov     byte ptr [edi], 3
.text:0040DBBF                 jmp     loc_40C91A
.text:0040DBC4 ; ---------------------------------------------------------------------------
.text:0040DBC4
.text:0040DBC4 loc_40DBC4:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040DBC4                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040DBC4                 test    [esp+97Ch+arg_8], 402h ; jumptable 0040C65F cases 43,63
.text:0040DBCF                 jz      loc_40D550      ; jumptable 0040C65F case 42
.text:0040DBD5                 jmp     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040DBDA ; ---------------------------------------------------------------------------
.text:0040DBDA
.text:0040DBDA loc_40DBDA:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040DBDA                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040DBDA                 mov     [esp+97Ch+var_91E], 0 ; jumptable 0040C65F case 91
.text:0040DBDF                 mov     edi, [esp+97Ch+var_8F4]
.text:0040DBE6                 cmp     [esp+97Ch+var_8D0], edi
.text:0040DBED                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040DBF5                 jz      loc_40E14F
.text:0040DBFB
.text:0040DBFB loc_40DBFB:                             ; CODE XREF: sub_40C4F0+1784↓j
.text:0040DBFB                                         ; sub_40C4F0+17B1↓j ...
.text:0040DBFB                 mov     ebp, [esp+97Ch+arg_C]
.text:0040DC02                 mov     ecx, [esp+97Ch+var_950]
.text:0040DC06                 mov     edi, [ebp+0]
.text:0040DC09                 mov     edx, [ebp+4]
.text:0040DC0C                 sub     ecx, edi
.text:0040DC0E                 lea     ebx, [ecx+22h]
.text:0040DC11                 cmp     ebx, edx
.text:0040DC13                 jbe     loc_40DCB3
.text:0040DC19                 cmp     edx, 10000h
.text:0040DC1F                 mov     ebp, 0Fh
.text:0040DC24                 jz      loc_40C906
.text:0040DC2A                 lea     ebx, [edx+edx]
.text:0040DC2D                 mov     edx, [esp+97Ch+arg_C]
.text:0040DC34                 cmp     ebx, 10000h
.text:0040DC3A                 mov     [edx+4], ebx
.text:0040DC3D                 jbe     short loc_40DC46
.text:0040DC3F                 mov     dword ptr [edx+4], 10000h
.text:0040DC46
.text:0040DC46 loc_40DC46:                             ; CODE XREF: sub_40C4F0+174D↑j
.text:0040DC46                 mov     eax, [esp+97Ch+arg_C]
.text:0040DC4D                 mov     ebp, [eax+4]
.text:0040DC50                 mov     [esp+97Ch+Size], edi ; Block
.text:0040DC53                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040DC57                 mov     ebp, 0Ch
.text:0040DC5C                 call    realloc
.text:0040DC61                 mov     edx, [esp+97Ch+arg_C]
.text:0040DC68                 test    eax, eax
.text:0040DC6A                 mov     [edx], eax
.text:0040DC6C                 jz      loc_40C906
.text:0040DC72                 cmp     edi, eax
.text:0040DC74                 jz      short loc_40DBFB
.text:0040DC76                 mov     ecx, [esp+97Ch+var_908]
.text:0040DC7A                 sub     eax, edi
.text:0040DC7C                 add     [esp+97Ch+var_950], eax
.text:0040DC80                 add     [esp+97Ch+var_904], eax
.text:0040DC84                 test    ecx, ecx
.text:0040DC86                 jz      short loc_40DC8C
.text:0040DC88                 add     [esp+97Ch+var_908], eax
.text:0040DC8C
.text:0040DC8C loc_40DC8C:                             ; CODE XREF: sub_40C4F0+1796↑j
.text:0040DC8C                 mov     esi, [esp+97Ch+var_900]
.text:0040DC90                 test    esi, esi
.text:0040DC92                 jz      short loc_40DC98
.text:0040DC94                 add     [esp+97Ch+var_900], eax
.text:0040DC98
.text:0040DC98 loc_40DC98:                             ; CODE XREF: sub_40C4F0+17A2↑j
.text:0040DC98                 mov     edi, [esp+97Ch+var_8FC]
.text:0040DC9F                 test    edi, edi
.text:0040DCA1                 jz      loc_40DBFB
.text:0040DCA7                 add     [esp+97Ch+var_8FC], eax
.text:0040DCAE                 jmp     loc_40DBFB
.text:0040DCB3 ; ---------------------------------------------------------------------------
.text:0040DCB3
.text:0040DCB3 loc_40DCB3:                             ; CODE XREF: sub_40C4F0+1723↑j
.text:0040DCB3                 mov     ebx, [esp+97Ch+var_950]
.text:0040DCB7                 lea     esi, [ecx+1]
.text:0040DCBA                 cmp     esi, edx
.text:0040DCBC                 mov     [esp+97Ch+var_900], ebx
.text:0040DCC0                 mov     ebx, edi
.text:0040DCC2                 jbe     loc_40DD7D
.text:0040DCC8
.text:0040DCC8 loc_40DCC8:                             ; CODE XREF: sub_40C4F0+1887↓j
.text:0040DCC8                 cmp     edx, 10000h
.text:0040DCCE                 mov     ebp, 0Fh
.text:0040DCD3                 jz      loc_40C906
.text:0040DCD9                 lea     ecx, [edx+edx]
.text:0040DCDC                 mov     edx, [esp+97Ch+arg_C]
.text:0040DCE3                 cmp     ecx, 10000h
.text:0040DCE9                 mov     [edx+4], ecx
.text:0040DCEC                 jbe     short loc_40DCF5
.text:0040DCEE                 mov     dword ptr [edx+4], 10000h
.text:0040DCF5
.text:0040DCF5 loc_40DCF5:                             ; CODE XREF: sub_40C4F0+17FC↑j
.text:0040DCF5                 mov     eax, [esp+97Ch+arg_C]
.text:0040DCFC                 mov     ebp, [eax+4]
.text:0040DCFF                 mov     [esp+97Ch+Size], edi ; Block
.text:0040DD02                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040DD06                 mov     ebp, 0Ch
.text:0040DD0B                 call    realloc
.text:0040DD10                 mov     edx, [esp+97Ch+arg_C]
.text:0040DD17                 test    eax, eax
.text:0040DD19                 mov     [edx], eax
.text:0040DD1B                 jz      loc_40C906
.text:0040DD21                 cmp     ebx, eax
.text:0040DD23                 jz      short loc_40DD59
.text:0040DD25                 mov     edi, [esp+97Ch+var_908]
.text:0040DD29                 sub     eax, ebx
.text:0040DD2B                 add     [esp+97Ch+var_950], eax
.text:0040DD2F                 add     [esp+97Ch+var_904], eax
.text:0040DD33                 test    edi, edi
.text:0040DD35                 jz      short loc_40DD3B
.text:0040DD37                 add     [esp+97Ch+var_908], eax
.text:0040DD3B
.text:0040DD3B loc_40DD3B:                             ; CODE XREF: sub_40C4F0+1845↑j
.text:0040DD3B                 mov     esi, [esp+97Ch+var_900]
.text:0040DD3F                 test    esi, esi
.text:0040DD41                 jz      short loc_40DD47
.text:0040DD43                 add     [esp+97Ch+var_900], eax
.text:0040DD47
.text:0040DD47 loc_40DD47:                             ; CODE XREF: sub_40C4F0+1851↑j
.text:0040DD47                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040DD4E                 test    ebx, ebx
.text:0040DD50                 jz      short loc_40DD59
.text:0040DD52                 add     [esp+97Ch+var_8FC], eax
.text:0040DD59
.text:0040DD59 loc_40DD59:                             ; CODE XREF: sub_40C4F0+1833↑j
.text:0040DD59                                         ; sub_40C4F0+1860↑j
.text:0040DD59                 mov     ecx, [esp+97Ch+arg_C]
.text:0040DD60                 mov     eax, [esp+97Ch+arg_C]
.text:0040DD67                 mov     ebp, [esp+97Ch+var_950]
.text:0040DD6B                 mov     edi, [ecx]
.text:0040DD6D                 mov     edx, [eax+4]
.text:0040DD70                 sub     ebp, edi
.text:0040DD72                 inc     ebp
.text:0040DD73                 mov     ebx, edi
.text:0040DD75                 cmp     ebp, edx
.text:0040DD77                 ja      loc_40DCC8
.text:0040DD7D
.text:0040DD7D loc_40DD7D:                             ; CODE XREF: sub_40C4F0+17D2↑j
.text:0040DD7D                 mov     edi, [esp+97Ch+var_950]
.text:0040DD81                 mov     bl, 5
.text:0040DD83                 mov     edx, [esp+97Ch+var_8D0]
.text:0040DD8A                 inc     [esp+97Ch+var_950]
.text:0040DD8E                 cmp     byte ptr [edx], 5Eh ; '^'
.text:0040DD91                 setnz   al
.text:0040DD94                 sub     bl, al
.text:0040DD96                 mov     [edi], bl
.text:0040DD98                 mov     edi, [esp+97Ch+var_8D0]
.text:0040DD9F                 cmp     byte ptr [edi], 5Eh ; '^'
.text:0040DDA2                 jz      loc_40E759
.text:0040DDA8
.text:0040DDA8 loc_40DDA8:                             ; CODE XREF: sub_40C4F0+2271↓j
.text:0040DDA8                 mov     [esp+97Ch+var_8F0], edi
.text:0040DDAF                 mov     esi, [esp+97Ch+arg_C]
.text:0040DDB6                 mov     ecx, [esp+97Ch+arg_C]
.text:0040DDBD                 mov     ebp, [esp+97Ch+var_950]
.text:0040DDC1                 mov     edi, [esi]
.text:0040DDC3                 mov     edx, [ecx+4]
.text:0040DDC6                 sub     ebp, edi
.text:0040DDC8                 mov     ebx, edi
.text:0040DDCA                 inc     ebp
.text:0040DDCB                 cmp     ebp, edx
.text:0040DDCD                 jbe     loc_40DE88
.text:0040DDD3
.text:0040DDD3 loc_40DDD3:                             ; CODE XREF: sub_40C4F0+1992↓j
.text:0040DDD3                 cmp     edx, 10000h
.text:0040DDD9                 mov     ebp, 0Fh
.text:0040DDDE                 jz      loc_40C906
.text:0040DDE4                 lea     ebp, [edx+edx]
.text:0040DDE7                 mov     edx, [esp+97Ch+arg_C]
.text:0040DDEE                 cmp     ebp, 10000h
.text:0040DDF4                 mov     [edx+4], ebp
.text:0040DDF7                 jbe     short loc_40DE00
.text:0040DDF9                 mov     dword ptr [edx+4], 10000h
.text:0040DE00
.text:0040DE00 loc_40DE00:                             ; CODE XREF: sub_40C4F0+1907↑j
.text:0040DE00                 mov     eax, [esp+97Ch+arg_C]
.text:0040DE07                 mov     ebp, 0Ch
.text:0040DE0C                 mov     edx, [eax+4]
.text:0040DE0F                 mov     [esp+97Ch+Size], edi ; Block
.text:0040DE12                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040DE16                 call    realloc
.text:0040DE1B                 mov     edi, [esp+97Ch+arg_C]
.text:0040DE22                 test    eax, eax
.text:0040DE24                 mov     [edi], eax
.text:0040DE26                 jz      loc_40C906
.text:0040DE2C                 cmp     ebx, eax
.text:0040DE2E                 jz      short loc_40DE64
.text:0040DE30                 mov     ecx, [esp+97Ch+var_908]
.text:0040DE34                 sub     eax, ebx
.text:0040DE36                 add     [esp+97Ch+var_950], eax
.text:0040DE3A                 add     [esp+97Ch+var_904], eax
.text:0040DE3E                 test    ecx, ecx
.text:0040DE40                 jz      short loc_40DE46
.text:0040DE42                 add     [esp+97Ch+var_908], eax
.text:0040DE46
.text:0040DE46 loc_40DE46:                             ; CODE XREF: sub_40C4F0+1950↑j
.text:0040DE46                 mov     ebx, [esp+97Ch+var_900]
.text:0040DE4A                 test    ebx, ebx
.text:0040DE4C                 jz      short loc_40DE52
.text:0040DE4E                 add     [esp+97Ch+var_900], eax
.text:0040DE52
.text:0040DE52 loc_40DE52:                             ; CODE XREF: sub_40C4F0+195C↑j
.text:0040DE52                 mov     esi, [esp+97Ch+var_8FC]
.text:0040DE59                 test    esi, esi
.text:0040DE5B                 jz      short loc_40DE64
.text:0040DE5D                 add     [esp+97Ch+var_8FC], eax
.text:0040DE64
.text:0040DE64 loc_40DE64:                             ; CODE XREF: sub_40C4F0+193E↑j
.text:0040DE64                                         ; sub_40C4F0+196B↑j
.text:0040DE64                 mov     edx, [esp+97Ch+arg_C]
.text:0040DE6B                 mov     eax, [esp+97Ch+arg_C]
.text:0040DE72                 mov     ebp, [esp+97Ch+var_950]
.text:0040DE76                 mov     edi, [edx]
.text:0040DE78                 mov     edx, [eax+4]
.text:0040DE7B                 sub     ebp, edi
.text:0040DE7D                 inc     ebp
.text:0040DE7E                 mov     ebx, edi
.text:0040DE80                 cmp     ebp, edx
.text:0040DE82                 ja      loc_40DDD3
.text:0040DE88
.text:0040DE88 loc_40DE88:                             ; CODE XREF: sub_40C4F0+18DD↑j
.text:0040DE88                 cld
.text:0040DE89                 mov     ebx, [esp+97Ch+var_950]
.text:0040DE8D                 xor     eax, eax
.text:0040DE8F                 mov     ecx, 8
.text:0040DE94                 mov     byte ptr [ebx], 20h ; ' '
.text:0040DE97                 inc     ebx
.text:0040DE98                 mov     edi, ebx
.text:0040DE9A                 mov     [esp+97Ch+var_950], ebx
.text:0040DE9E                 rep stosd
.text:0040DEA0                 cmp     byte ptr [ebx-2], 5
.text:0040DEA4                 jz      loc_40E73F
.text:0040DEAA
.text:0040DEAA loc_40DEAA:                             ; CODE XREF: sub_40C4F0+1ACD↓j
.text:0040DEAA                                         ; sub_40C4F0+1BD8↓j ...
.text:0040DEAA                 mov     edx, [esp+97Ch+var_8D0]
.text:0040DEB1                 cmp     edx, [esp+97Ch+var_8F4]
.text:0040DEB8                 jz      loc_40E14F
.text:0040DEBE                 movzx   eax, byte ptr [edx]
.text:0040DEC1                 lea     edi, [edx+1]
.text:0040DEC4                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040DECB                 mov     [esp+97Ch+var_8D0], edi
.text:0040DED2                 test    ecx, ecx
.text:0040DED4                 mov     [esp+97Ch+var_8EC], al
.text:0040DEDB                 jz      short loc_40DEF2
.text:0040DEDD                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040DEE4                 movzx   esi, al
.text:0040DEE7                 movzx   ebx, byte ptr [esi+ebp]
.text:0040DEEB                 mov     [esp+97Ch+var_8EC], bl
.text:0040DEF2
.text:0040DEF2 loc_40DEF2:                             ; CODE XREF: sub_40C4F0+19EB↑j
.text:0040DEF2                 test    byte ptr [esp+97Ch+arg_8], 1
.text:0040DEFA                 jz      short loc_40DF0A
.text:0040DEFC                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040DF04                 jz      loc_40E6E8
.text:0040DF0A
.text:0040DF0A loc_40DF0A:                             ; CODE XREF: sub_40C4F0+1A0A↑j
.text:0040DF0A                 cmp     [esp+97Ch+var_8EC], 5Dh ; ']'
.text:0040DF12                 jz      loc_40E6A4
.text:0040DF18                 mov     edi, [esp+97Ch+var_8D0]
.text:0040DF1F
.text:0040DF1F loc_40DF1F:                             ; CODE XREF: sub_40C4F0+21C5↓j
.text:0040DF1F                 cmp     [esp+97Ch+var_91E], 0
.text:0040DF24                 jz      loc_40E609
.text:0040DF2A                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040DF32                 jz      loc_40E600
.text:0040DF38
.text:0040DF38 loc_40DF38:                             ; CODE XREF: sub_40C4F0+2121↓j
.text:0040DF38                                         ; sub_40C4F0+2137↓j ...
.text:0040DF38                 cmp     byte ptr [edi], 2Dh ; '-'
.text:0040DF3B                 jz      loc_40E570
.text:0040DF41
.text:0040DF41 loc_40DF41:                             ; CODE XREF: sub_40C4F0+2084↓j
.text:0040DF41                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040DF49                 jz      short loc_40DF59
.text:0040DF4B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040DF53                 jz      loc_40E2D6
.text:0040DF59
.text:0040DF59 loc_40DF59:                             ; CODE XREF: sub_40C4F0+1A59↑j
.text:0040DF59                                         ; sub_40C4F0+1DE9↓j
.text:0040DF59                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040DF61                 jz      short loc_40DF71
.text:0040DF63                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040DF6B                 jz      loc_40E163
.text:0040DF71
.text:0040DF71 loc_40DF71:                             ; CODE XREF: sub_40C4F0+1A71↑j
.text:0040DF71                                         ; sub_40C4F0+1C76↓j
.text:0040DF71                 test    byte ptr [esp+97Ch+arg_8], 4
.text:0040DF79                 jz      short loc_40DF85
.text:0040DF7B                 cmp     [esp+97Ch+var_8EC], 5Bh ; '['
.text:0040DF83                 jz      short loc_40DFC2
.text:0040DF85
.text:0040DF85 loc_40DF85:                             ; CODE XREF: sub_40C4F0+1A89↑j
.text:0040DF85                                         ; sub_40C4F0+1AD5↓j
.text:0040DF85                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040DF8D                 mov     edx, 1
.text:0040DF92                 mov     [esp+97Ch+var_91E], 0
.text:0040DF97                 mov     esi, [esp+97Ch+var_950]
.text:0040DF9B                 shr     cl, 3
.text:0040DF9E                 movzx   edi, cl
.text:0040DFA1                 movzx   ecx, [esp+97Ch+var_8EC]
.text:0040DFA9                 and     ecx, 7
.text:0040DFAC                 shl     edx, cl
.text:0040DFAE                 or      [edi+esi], dl
.text:0040DFB1                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040DFB9
.text:0040DFB9 loc_40DFB9:                             ; CODE XREF: sub_40C4F0+224A↓j
.text:0040DFB9                 mov     [esp+97Ch+var_924], ebx
.text:0040DFBD                 jmp     loc_40DEAA
.text:0040DFC2 ; ---------------------------------------------------------------------------
.text:0040DFC2
.text:0040DFC2 loc_40DFC2:                             ; CODE XREF: sub_40C4F0+1A93↑j
.text:0040DFC2                 cmp     byte ptr [edi], 2Eh ; '.'
.text:0040DFC5                 jnz     short loc_40DF85
.text:0040DFC7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040DFCE                 mov     ebp, 0Eh
.text:0040DFD3                 jz      loc_40C906
.text:0040DFD9                 inc     edi
.text:0040DFDA                 xor     ebx, ebx
.text:0040DFDC                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040DFE3                 mov     [esp+97Ch+var_8D0], edi
.text:0040DFEA                 jz      loc_40E14F
.text:0040DFF0
.text:0040DFF0 loc_40DFF0:                             ; CODE XREF: sub_40C4F0+1B75↓j
.text:0040DFF0                 movzx   eax, byte ptr [edi]
.text:0040DFF3                 inc     edi
.text:0040DFF4                 mov     esi, [esp+97Ch+var_8F8]
.text:0040DFFB                 mov     [esp+97Ch+var_8D0], edi
.text:0040E002                 test    esi, esi
.text:0040E004                 mov     [esp+97Ch+var_8EC], al
.text:0040E00B                 jz      short loc_40E023
.text:0040E00D                 mov     esi, [esp+97Ch+var_8F8]
.text:0040E014                 movzx   ebp, al
.text:0040E017                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040E01C                 mov     [esp+97Ch+var_8EC], cl
.text:0040E023
.text:0040E023 loc_40E023:                             ; CODE XREF: sub_40C4F0+1B1B↑j
.text:0040E023                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040E02B                 jz      loc_40E141
.text:0040E031
.text:0040E031 loc_40E031:                             ; CODE XREF: sub_40C4F0+1C54↓j
.text:0040E031                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E038                 jz      short loc_40E07A
.text:0040E03A                 test    bl, bl
.text:0040E03C                 js      short loc_40E070
.text:0040E03E                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040E046                 movzx   edx, bl
.text:0040E049                 inc     bl
.text:0040E04B                 mov     [esp+edx+97Ch+var_8CC], al
.text:0040E052                 mov     edi, [esp+97Ch+var_8D0]
.text:0040E059
.text:0040E059 loc_40E059:                             ; CODE XREF: sub_40C4F0+1B88↓j
.text:0040E059                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E060                 mov     ebp, 0Eh
.text:0040E065                 jnz     short loc_40DFF0
.text:0040E067                 jmp     loc_40C906
.text:0040E067 ; ---------------------------------------------------------------------------
.text:0040E06C                 align 10h
.text:0040E070
.text:0040E070 loc_40E070:                             ; CODE XREF: sub_40C4F0+1B4C↑j
.text:0040E070                 mov     [esp+97Ch+var_8CC], 0
.text:0040E078                 jmp     short loc_40E059
.text:0040E07A ; ---------------------------------------------------------------------------
.text:0040E07A
.text:0040E07A loc_40E07A:                             ; CODE XREF: sub_40C4F0+1B48↑j
.text:0040E07A                                         ; sub_40C4F0+1C5A↓j
.text:0040E07A                 xor     ecx, ecx
.text:0040E07C                 movzx   edi, bl
.text:0040E07F                 mov     [esp+edi+97Ch+var_8CC], cl
.text:0040E086                 cmp     [esp+97Ch+var_8EC], 2Eh ; '.'
.text:0040E08E                 jz      short loc_40E0CD
.text:0040E090
.text:0040E090 loc_40E090:                             ; CODE XREF: sub_40C4F0+1BE7↓j
.text:0040E090                                         ; sub_40C4F0+1BF3↓j
.text:0040E090                 cmp     bl, 0FFh
.text:0040E093                 jz      short loc_40E0AF
.text:0040E095                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E09C
.text:0040E09C loc_40E09C:                             ; CODE XREF: sub_40C4F0+1BB6↓j
.text:0040E09C                 dec     bl
.text:0040E09E                 lea     edi, [eax-1]
.text:0040E0A1                 cmp     bl, 0FFh
.text:0040E0A4                 mov     eax, edi
.text:0040E0A6                 jnz     short loc_40E09C
.text:0040E0A8                 mov     [esp+97Ch+var_8D0], edi
.text:0040E0AF
.text:0040E0AF loc_40E0AF:                             ; CODE XREF: sub_40C4F0+1BA3↑j
.text:0040E0AF                 mov     eax, [esp+97Ch+var_950]
.text:0040E0B3                 or      byte ptr [eax+0Bh], 8
.text:0040E0B7                 or      byte ptr [eax+5], 40h
.text:0040E0BB                 mov     [esp+97Ch+var_924], 2Eh ; '.'
.text:0040E0C3
.text:0040E0C3 loc_40E0C3:                             ; CODE XREF: sub_40C4F0+1C3B↓j
.text:0040E0C3                                         ; sub_40C4F0+1D73↓j ...
.text:0040E0C3                 mov     [esp+97Ch+var_91E], 0
.text:0040E0C8                 jmp     loc_40DEAA
.text:0040E0CD ; ---------------------------------------------------------------------------
.text:0040E0CD
.text:0040E0CD loc_40E0CD:                             ; CODE XREF: sub_40C4F0+1B9E↑j
.text:0040E0CD                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E0D4                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040E0D7                 jnz     short loc_40E090
.text:0040E0D9                 movzx   ecx, [esp+97Ch+var_8CC]
.text:0040E0E1                 test    cl, cl
.text:0040E0E3                 jz      short loc_40E090
.text:0040E0E5                 dec     bl
.text:0040E0E7                 jnz     short loc_40E12D
.text:0040E0E9                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040E0F0                 mov     ebp, 0Eh
.text:0040E0F5                 jz      loc_40C906
.text:0040E0FB                 mov     bl, cl
.text:0040E0FD                 mov     esi, [esp+97Ch+var_950]
.text:0040E101                 lea     ebp, [eax+1]
.text:0040E104                 mov     [esp+97Ch+var_8D0], ebp
.text:0040E10B                 shr     bl, 3
.text:0040E10E                 and     ecx, 7
.text:0040E111                 mov     edx, 1
.text:0040E116                 movzx   ebp, bl
.text:0040E119                 shl     edx, cl
.text:0040E11B                 or      [ebp+esi+0], dl
.text:0040E11F                 movzx   ebx, [esp+97Ch+var_8CC]
.text:0040E127                 mov     [esp+97Ch+var_924], ebx
.text:0040E12B                 jmp     short loc_40E0C3
.text:0040E12D ; ---------------------------------------------------------------------------
.text:0040E12D
.text:0040E12D loc_40E12D:                             ; CODE XREF: sub_40C4F0+1BF7↑j
.text:0040E12D                                         ; sub_40C4F0+1D92↓j
.text:0040E12D                 mov     edx, [esp+97Ch+Block]
.text:0040E134                 mov     ebp, 3
.text:0040E139                 mov     [esp+97Ch+Size], edx
.text:0040E13C                 jmp     loc_40CA93
.text:0040E141 ; ---------------------------------------------------------------------------
.text:0040E141
.text:0040E141 loc_40E141:                             ; CODE XREF: sub_40C4F0+1B3B↑j
.text:0040E141                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040E144                 jnz     loc_40E031
.text:0040E14A                 jmp     loc_40E07A
.text:0040E14F ; ---------------------------------------------------------------------------
.text:0040E14F
.text:0040E14F loc_40E14F:                             ; CODE XREF: sub_40C4F0+1705↑j
.text:0040E14F                                         ; sub_40C4F0+19C8↑j ...
.text:0040E14F                 mov     ebp, [esp+97Ch+Block]
.text:0040E156                 mov     [esp+97Ch+Size], ebp
.text:0040E159                 mov     ebp, 7
.text:0040E15E                 jmp     loc_40CA93
.text:0040E163 ; ---------------------------------------------------------------------------
.text:0040E163
.text:0040E163 loc_40E163:                             ; CODE XREF: sub_40C4F0+1A7B↑j
.text:0040E163                 cmp     byte ptr [edi], 3Dh ; '='
.text:0040E166                 jnz     loc_40DF71
.text:0040E16C                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E173                 mov     ebp, 0Eh
.text:0040E178                 jz      loc_40C906
.text:0040E17E                 inc     edi
.text:0040E17F                 xor     ebx, ebx
.text:0040E181                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E188                 mov     [esp+97Ch+var_8D0], edi
.text:0040E18F                 jz      short loc_40E14F
.text:0040E191
.text:0040E191 loc_40E191:                             ; CODE XREF: sub_40C4F0+1D17↓j
.text:0040E191                 movzx   eax, byte ptr [edi]
.text:0040E194                 inc     edi
.text:0040E195                 mov     esi, [esp+97Ch+var_8F8]
.text:0040E19C                 mov     [esp+97Ch+var_8D0], edi
.text:0040E1A3                 test    esi, esi
.text:0040E1A5                 mov     [esp+97Ch+var_8EC], al
.text:0040E1AC                 jz      short loc_40E1C4
.text:0040E1AE                 mov     esi, [esp+97Ch+var_8F8]
.text:0040E1B5                 movzx   ebp, al
.text:0040E1B8                 movzx   ecx, byte ptr [ebp+esi+0]
.text:0040E1BD                 mov     [esp+97Ch+var_8EC], cl
.text:0040E1C4
.text:0040E1C4 loc_40E1C4:                             ; CODE XREF: sub_40C4F0+1CBC↑j
.text:0040E1C4                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040E1CC                 jz      loc_40E2C8
.text:0040E1D2
.text:0040E1D2 loc_40E1D2:                             ; CODE XREF: sub_40C4F0+1DDB↓j
.text:0040E1D2                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E1D9                 jz      short loc_40E21A
.text:0040E1DB                 cmp     bl, 1
.text:0040E1DE                 ja      short loc_40E210
.text:0040E1E0                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040E1E8                 movzx   edi, bl
.text:0040E1EB                 inc     bl
.text:0040E1ED                 mov     [esp+edi+97Ch+var_84C], dl
.text:0040E1F4                 mov     edi, [esp+97Ch+var_8D0]
.text:0040E1FB
.text:0040E1FB loc_40E1FB:                             ; CODE XREF: sub_40C4F0+1D28↓j
.text:0040E1FB                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E202                 mov     ebp, 0Eh
.text:0040E207                 jnz     short loc_40E191
.text:0040E209                 jmp     loc_40C906
.text:0040E209 ; ---------------------------------------------------------------------------
.text:0040E20E                 align 10h
.text:0040E210
.text:0040E210 loc_40E210:                             ; CODE XREF: sub_40C4F0+1CEE↑j
.text:0040E210                 mov     [esp+97Ch+var_84C], 0
.text:0040E218                 jmp     short loc_40E1FB
.text:0040E21A ; ---------------------------------------------------------------------------
.text:0040E21A
.text:0040E21A loc_40E21A:                             ; CODE XREF: sub_40C4F0+1CE9↑j
.text:0040E21A                                         ; sub_40C4F0+1DE1↓j
.text:0040E21A                 xor     eax, eax
.text:0040E21C                 movzx   ecx, bl
.text:0040E21F                 mov     [esp+ecx+97Ch+var_84C], al
.text:0040E226                 cmp     [esp+97Ch+var_8EC], 3Dh ; '='
.text:0040E22E                 jz      short loc_40E268
.text:0040E230
.text:0040E230 loc_40E230:                             ; CODE XREF: sub_40C4F0+1D82↓j
.text:0040E230                                         ; sub_40C4F0+1D8E↓j
.text:0040E230                 cmp     bl, 0FFh
.text:0040E233                 jz      short loc_40E24F
.text:0040E235                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E23C
.text:0040E23C loc_40E23C:                             ; CODE XREF: sub_40C4F0+1D56↓j
.text:0040E23C                 dec     bl
.text:0040E23E                 lea     edi, [eax-1]
.text:0040E241                 cmp     bl, 0FFh
.text:0040E244                 mov     eax, edi
.text:0040E246                 jnz     short loc_40E23C
.text:0040E248                 mov     [esp+97Ch+var_8D0], edi
.text:0040E24F
.text:0040E24F loc_40E24F:                             ; CODE XREF: sub_40C4F0+1D43↑j
.text:0040E24F                 mov     edi, [esp+97Ch+var_950]
.text:0040E253                 or      byte ptr [edi+0Bh], 8
.text:0040E257                 or      byte ptr [edi+7], 20h
.text:0040E25B                 mov     [esp+97Ch+var_924], 3Dh ; '='
.text:0040E263                 jmp     loc_40E0C3
.text:0040E268 ; ---------------------------------------------------------------------------
.text:0040E268
.text:0040E268 loc_40E268:                             ; CODE XREF: sub_40C4F0+1D3E↑j
.text:0040E268                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E26F                 cmp     byte ptr [eax], 5Dh ; ']'
.text:0040E272                 jnz     short loc_40E230
.text:0040E274                 movzx   ecx, [esp+97Ch+var_84C]
.text:0040E27C                 test    cl, cl
.text:0040E27E                 jz      short loc_40E230
.text:0040E280                 dec     bl
.text:0040E282                 jnz     loc_40E12D
.text:0040E288                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040E28F                 mov     ebp, 0Eh
.text:0040E294                 jz      loc_40C906
.text:0040E29A                 mov     dl, cl
.text:0040E29C                 mov     esi, [esp+97Ch+var_950]
.text:0040E2A0                 lea     ebp, [eax+1]
.text:0040E2A3                 mov     [esp+97Ch+var_8D0], ebp
.text:0040E2AA                 shr     dl, 3
.text:0040E2AD                 and     ecx, 7
.text:0040E2B0                 mov     ebx, 1
.text:0040E2B5                 movzx   ebp, dl
.text:0040E2B8                 shl     ebx, cl
.text:0040E2BA                 or      [ebp+esi+0], bl
.text:0040E2BE                 mov     [esp+97Ch+var_91E], 1
.text:0040E2C3                 jmp     loc_40DEAA
.text:0040E2C8 ; ---------------------------------------------------------------------------
.text:0040E2C8
.text:0040E2C8 loc_40E2C8:                             ; CODE XREF: sub_40C4F0+1CDC↑j
.text:0040E2C8                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040E2CB                 jnz     loc_40E1D2
.text:0040E2D1                 jmp     loc_40E21A
.text:0040E2D6 ; ---------------------------------------------------------------------------
.text:0040E2D6
.text:0040E2D6 loc_40E2D6:                             ; CODE XREF: sub_40C4F0+1A63↑j
.text:0040E2D6                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040E2D9                 jnz     loc_40DF59
.text:0040E2DF                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E2E6                 mov     ebp, 0Eh
.text:0040E2EB                 jz      loc_40C906
.text:0040E2F1                 inc     edi
.text:0040E2F2                 xor     ebx, ebx
.text:0040E2F4                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E2FB                 mov     [esp+97Ch+var_8D0], edi
.text:0040E302                 jz      loc_40E14F
.text:0040E308
.text:0040E308 loc_40E308:                             ; CODE XREF: sub_40C4F0+1E89↓j
.text:0040E308                 movzx   ecx, byte ptr [edi]
.text:0040E30B                 inc     edi
.text:0040E30C                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040E313                 mov     [esp+97Ch+var_8D0], edi
.text:0040E31A                 test    ebp, ebp
.text:0040E31C                 mov     [esp+97Ch+var_8EC], cl
.text:0040E323                 jz      short loc_40E33B
.text:0040E325                 movzx   ebp, cl
.text:0040E328                 mov     ecx, [esp+97Ch+var_8F8]
.text:0040E32F                 movzx   edx, byte ptr [ebp+ecx+0]
.text:0040E334                 mov     [esp+97Ch+var_8EC], dl
.text:0040E33B
.text:0040E33B loc_40E33B:                             ; CODE XREF: sub_40C4F0+1E33↑j
.text:0040E33B                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040E343                 jz      loc_40E560
.text:0040E349
.text:0040E349 loc_40E349:                             ; CODE XREF: sub_40C4F0+2073↓j
.text:0040E349                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E350                 jz      short loc_40E380
.text:0040E352                 movzx   eax, [esp+97Ch+var_8EC]
.text:0040E35A                 movzx   esi, bl
.text:0040E35D                 inc     bl
.text:0040E35F                 mov     ebp, 0Eh
.text:0040E364                 mov     [esp+esi+97Ch+name], al
.text:0040E36B                 mov     edi, [esp+97Ch+var_8D0]
.text:0040E372                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E379                 jnz     short loc_40E308
.text:0040E37B                 jmp     loc_40C906
.text:0040E380 ; ---------------------------------------------------------------------------
.text:0040E380
.text:0040E380 loc_40E380:                             ; CODE XREF: sub_40C4F0+1E60↑j
.text:0040E380                                         ; sub_40C4F0+2079↓j
.text:0040E380                 xor     eax, eax
.text:0040E382                 movzx   edi, bl
.text:0040E385                 mov     [esp+edi+97Ch+name], al
.text:0040E38C                 cmp     [esp+97Ch+var_8EC], 3Ah ; ':'
.text:0040E394                 jz      short loc_40E3CE
.text:0040E396
.text:0040E396 loc_40E396:                             ; CODE XREF: sub_40C4F0+1EE8↓j
.text:0040E396                 cmp     bl, 0FFh
.text:0040E399                 jz      short loc_40E3B5
.text:0040E39B                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E3A2
.text:0040E3A2 loc_40E3A2:                             ; CODE XREF: sub_40C4F0+1EBC↓j
.text:0040E3A2                 dec     bl
.text:0040E3A4                 lea     edi, [eax-1]
.text:0040E3A7                 cmp     bl, 0FFh
.text:0040E3AA                 mov     eax, edi
.text:0040E3AC                 jnz     short loc_40E3A2
.text:0040E3AE                 mov     [esp+97Ch+var_8D0], edi
.text:0040E3B5
.text:0040E3B5 loc_40E3B5:                             ; CODE XREF: sub_40C4F0+1EA9↑j
.text:0040E3B5                 mov     eax, [esp+97Ch+var_950]
.text:0040E3B9                 or      byte ptr [eax+0Bh], 8
.text:0040E3BD                 or      byte ptr [eax+7], 4
.text:0040E3C1                 mov     [esp+97Ch+var_924], 3Ah ; ':'
.text:0040E3C9                 jmp     loc_40E0C3
.text:0040E3CE ; ---------------------------------------------------------------------------
.text:0040E3CE
.text:0040E3CE loc_40E3CE:                             ; CODE XREF: sub_40C4F0+1EA4↑j
.text:0040E3CE                 mov     esi, [esp+97Ch+var_8D0]
.text:0040E3D5                 cmp     byte ptr [esi], 5Dh ; ']'
.text:0040E3D8                 jnz     short loc_40E396
.text:0040E3DA                 cld
.text:0040E3DB                 mov     edi, offset aLower ; "lower"
.text:0040E3E0                 lea     ebx, [esp+97Ch+name]
.text:0040E3E7                 mov     esi, ebx
.text:0040E3E9                 mov     ecx, 6
.text:0040E3EE                 lea     ebp, [esp+97Ch+name]
.text:0040E3F5                 repe cmpsb
.text:0040E3F7                 setz    [esp+97Ch+var_925]
.text:0040E3FC                 mov     ecx, 6
.text:0040E401                 mov     edi, offset aUpper ; "upper"
.text:0040E406                 mov     esi, ebp
.text:0040E408                 lea     edx, [esp+97Ch+name]
.text:0040E40F                 repe cmpsb
.text:0040E411                 setz    [esp+97Ch+var_926]
.text:0040E416                 mov     [esp+97Ch+Size], edx ; name
.text:0040E419                 call    wctype
.text:0040E41E                 movzx   ebx, ax
.text:0040E421                 test    bx, bx
.text:0040E424                 mov     dword ptr [esp+97Ch+Type], ebx
.text:0040E428                 jz      loc_40E54C
.text:0040E42E                 mov     eax, [esp+97Ch+var_8D0]
.text:0040E435                 mov     ebp, 0Eh
.text:0040E43A                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040E441                 jz      loc_40C906
.text:0040E447                 lea     ecx, [eax+1]
.text:0040E44A                 cmp     ecx, [esp+97Ch+var_8F4]
.text:0040E451                 mov     [esp+97Ch+var_8D0], ecx
.text:0040E458                 jz      loc_40E14F
.text:0040E45E                 xor     edi, edi
.text:0040E460
.text:0040E460 loc_40E460:                             ; CODE XREF: sub_40C4F0+202E↓j
.text:0040E460                 mov     [esp+97Ch+Size], edi ; Ch
.text:0040E463                 call    btowc
.text:0040E468                 mov     ebp, dword ptr [esp+97Ch+Type]
.text:0040E46C                 movzx   esi, ax
.text:0040E46F                 mov     [esp+97Ch+Size], esi ; C
.text:0040E472                 mov     [esp+97Ch+var_978], ebp ; Type
.text:0040E476                 call    iswctype
.text:0040E47B                 test    eax, eax
.text:0040E47D                 jz      short loc_40E49C
.text:0040E47F                 mov     ecx, edi
.text:0040E481                 mov     ebx, edi
.text:0040E483                 mov     edx, [esp+97Ch+var_950]
.text:0040E487                 shr     cl, 3
.text:0040E48A                 movzx   esi, cl
.text:0040E48D                 mov     ecx, ebx
.text:0040E48F                 and     ecx, 7
.text:0040E492                 mov     ebx, 1
.text:0040E497                 shl     ebx, cl
.text:0040E499                 or      [esi+edx], bl
.text:0040E49C
.text:0040E49C loc_40E49C:                             ; CODE XREF: sub_40C4F0+1F8D↑j
.text:0040E49C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040E4A3                 test    eax, eax
.text:0040E4A5                 jz      short loc_40E512
.text:0040E4A7                 cmp     [esp+97Ch+var_926], 0
.text:0040E4AC                 jnz     short loc_40E4B5
.text:0040E4AE                 cmp     [esp+97Ch+var_925], 0
.text:0040E4B3                 jz      short loc_40E512
.text:0040E4B5
.text:0040E4B5 loc_40E4B5:                             ; CODE XREF: sub_40C4F0+1FBC↑j
.text:0040E4B5                 mov     ebp, ds:__mb_cur_max
.text:0040E4BB                 cmp     dword ptr [ebp+0], 1
.text:0040E4BF                 jz      short loc_40E53B
.text:0040E4C1                 mov     [esp+97Ch+var_978], 1 ; Type
.text:0040E4C9                 mov     [esp+97Ch+Size], edi ; C
.text:0040E4CC                 call    _isctype
.text:0040E4D1
.text:0040E4D1 loc_40E4D1:                             ; CODE XREF: sub_40C4F0+205A↓j
.text:0040E4D1                 test    eax, eax
.text:0040E4D3                 jnz     short loc_40E4F4
.text:0040E4D5                 mov     ebx, ds:__mb_cur_max
.text:0040E4DB                 cmp     dword ptr [ebx], 1
.text:0040E4DE                 jz      short loc_40E529
.text:0040E4E0                 mov     [esp+97Ch+var_978], 2 ; Type
.text:0040E4E8                 mov     [esp+97Ch+Size], edi ; C
.text:0040E4EB                 call    _isctype
.text:0040E4F0
.text:0040E4F0 loc_40E4F0:                             ; CODE XREF: sub_40C4F0+2049↓j
.text:0040E4F0                 test    eax, eax
.text:0040E4F2                 jz      short loc_40E512
.text:0040E4F4
.text:0040E4F4 loc_40E4F4:                             ; CODE XREF: sub_40C4F0+1FE3↑j
.text:0040E4F4                 mov     ecx, edi
.text:0040E4F6                 mov     ebx, edi
.text:0040E4F8                 mov     edx, [esp+97Ch+var_950]
.text:0040E4FC                 shr     cl, 3
.text:0040E4FF                 movzx   ebp, cl
.text:0040E502                 mov     ecx, ebx
.text:0040E504                 and     ecx, 7
.text:0040E507                 mov     ebx, 1
.text:0040E50C                 shl     ebx, cl
.text:0040E50E                 or      [ebp+edx+0], bl
.text:0040E512
.text:0040E512 loc_40E512:                             ; CODE XREF: sub_40C4F0+1FB5↑j
.text:0040E512                                         ; sub_40C4F0+1FC3↑j ...
.text:0040E512                 mov     [esp+97Ch+var_91E], 1
.text:0040E517                 inc     edi
.text:0040E518                 cmp     edi, 0FFh
.text:0040E51E                 jle     loc_40E460
.text:0040E524                 jmp     loc_40DEAA
.text:0040E529 ; ---------------------------------------------------------------------------
.text:0040E529
.text:0040E529 loc_40E529:                             ; CODE XREF: sub_40C4F0+1FEE↑j
.text:0040E529                 mov     ebp, ds:_pctype
.text:0040E52F                 mov     ecx, [ebp+0]
.text:0040E532                 movzx   eax, word ptr [ecx+edi*2]
.text:0040E536                 and     eax, 2
.text:0040E539                 jmp     short loc_40E4F0
.text:0040E53B ; ---------------------------------------------------------------------------
.text:0040E53B
.text:0040E53B loc_40E53B:                             ; CODE XREF: sub_40C4F0+1FCF↑j
.text:0040E53B                 mov     edx, ds:_pctype
.text:0040E541                 mov     esi, [edx]
.text:0040E543                 movzx   eax, word ptr [esi+edi*2]
.text:0040E547                 and     eax, 1
.text:0040E54A                 jmp     short loc_40E4D1
.text:0040E54C ; ---------------------------------------------------------------------------
.text:0040E54C
.text:0040E54C loc_40E54C:                             ; CODE XREF: sub_40C4F0+1F38↑j
.text:0040E54C                 mov     ebx, [esp+97Ch+Block]
.text:0040E553                 mov     ebp, 4
.text:0040E558
.text:0040E558 loc_40E558:                             ; CODE XREF: sub_40C4F0+26A5↓j
.text:0040E558                 mov     [esp+97Ch+Size], ebx
.text:0040E55B                 jmp     loc_40CA93
.text:0040E560 ; ---------------------------------------------------------------------------
.text:0040E560
.text:0040E560 loc_40E560:                             ; CODE XREF: sub_40C4F0+1E53↑j
.text:0040E560                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040E563                 jnz     loc_40E349
.text:0040E569                 jmp     loc_40E380
.text:0040E569 ; ---------------------------------------------------------------------------
.text:0040E56E                 align 10h
.text:0040E570
.text:0040E570 loc_40E570:                             ; CODE XREF: sub_40C4F0+1A4B↑j
.text:0040E570                 cmp     byte ptr [edi+1], 5Dh ; ']'
.text:0040E574                 jz      loc_40DF41
.text:0040E57A                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E581                 mov     ebp, 0Eh
.text:0040E586                 jz      loc_40C906
.text:0040E58C                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040E594                 inc     edi
.text:0040E595                 mov     ecx, [esp+97Ch+var_950]
.text:0040E599                 mov     [esp+97Ch+var_8D0], edi
.text:0040E5A0                 mov     edx, [esp+97Ch+arg_8]
.text:0040E5A7                 lea     edi, [esp+97Ch+var_8D0]
.text:0040E5AE                 mov     [esp+97Ch+var_978], edi
.text:0040E5B2                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040E5B9                 mov     eax, [esp+97Ch+var_8F4]
.text:0040E5C0                 mov     [esp+97Ch+var_968], ecx
.text:0040E5C4                 mov     [esp+97Ch+var_96C], edx
.text:0040E5C8                 mov     [esp+97Ch+var_970], ebx
.text:0040E5CC                 mov     [esp+97Ch+var_974], eax
.text:0040E5D0                 mov     [esp+97Ch+Size], ebp
.text:0040E5D3
.text:0040E5D3 loc_40E5D3:                             ; CODE XREF: sub_40C4F0+2193↓j
.text:0040E5D3                 call    sub_409480
.text:0040E5D8                 mov     [esp+97Ch+var_924], 0FFFFFFFFh
.text:0040E5E0                 test    eax, eax
.text:0040E5E2                 mov     ebx, eax
.text:0040E5E4                 jz      loc_40DEAA
.text:0040E5EA                 mov     esi, [esp+97Ch+Block]
.text:0040E5F1                 mov     ebp, ebx
.text:0040E5F3
.text:0040E5F3 loc_40E5F3:                             ; CODE XREF: sub_40C4F0+318E↓j
.text:0040E5F3                 mov     [esp+97Ch+Size], esi
.text:0040E5F6                 jmp     loc_40CA93
.text:0040E5F6 ; ---------------------------------------------------------------------------
.text:0040E5FB                 align 10h
.text:0040E600
.text:0040E600 loc_40E600:                             ; CODE XREF: sub_40C4F0+1A42↑j
.text:0040E600                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040E603                 jnz     loc_40E693
.text:0040E609
.text:0040E609 loc_40E609:                             ; CODE XREF: sub_40C4F0+1A34↑j
.text:0040E609                 cmp     [esp+97Ch+var_8EC], 2Dh ; '-'
.text:0040E611                 jnz     loc_40DF38
.text:0040E617                 lea     esi, [edi-2]
.text:0040E61A                 cmp     esi, [esp+97Ch+arg_0]
.text:0040E621                 jb      short loc_40E62D
.text:0040E623                 cmp     byte ptr [edi-2], 5Bh ; '['
.text:0040E627                 jz      loc_40DF38
.text:0040E62D
.text:0040E62D loc_40E62D:                             ; CODE XREF: sub_40C4F0+2131↑j
.text:0040E62D                 lea     ebp, [edi-3]
.text:0040E630                 cmp     ebp, [esp+97Ch+arg_0]
.text:0040E637                 jb      short loc_40E63F
.text:0040E639                 cmp     byte ptr [edi-3], 5Bh ; '['
.text:0040E63D                 jz      short loc_40E688
.text:0040E63F
.text:0040E63F loc_40E63F:                             ; CODE XREF: sub_40C4F0+2147↑j
.text:0040E63F                                         ; sub_40C4F0+219C↓j
.text:0040E63F                 cmp     byte ptr [edi], 5Dh ; ']'
.text:0040E642                 jz      loc_40DF38
.text:0040E648                 mov     esi, [esp+97Ch+var_950]
.text:0040E64C                 lea     edi, [esp+97Ch+var_8D0]
.text:0040E653                 mov     ecx, [esp+97Ch+arg_8]
.text:0040E65A                 mov     [esp+97Ch+var_978], edi
.text:0040E65E                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040E665                 mov     edx, [esp+97Ch+var_8F4]
.text:0040E66C                 mov     [esp+97Ch+var_968], esi
.text:0040E670                 mov     eax, [esp+97Ch+var_924]
.text:0040E674                 mov     [esp+97Ch+var_96C], ecx
.text:0040E678                 mov     [esp+97Ch+var_970], ebx
.text:0040E67C                 mov     [esp+97Ch+var_974], edx
.text:0040E680                 mov     [esp+97Ch+Size], eax
.text:0040E683                 jmp     loc_40E5D3
.text:0040E688 ; ---------------------------------------------------------------------------
.text:0040E688
.text:0040E688 loc_40E688:                             ; CODE XREF: sub_40C4F0+214D↑j
.text:0040E688                 cmp     byte ptr [edi-2], 5Eh ; '^'
.text:0040E68C                 jnz     short loc_40E63F
.text:0040E68E                 jmp     loc_40DF38
.text:0040E693 ; ---------------------------------------------------------------------------
.text:0040E693
.text:0040E693 loc_40E693:                             ; CODE XREF: sub_40C4F0+2113↑j
.text:0040E693                 mov     ecx, [esp+97Ch+Block]
.text:0040E69A                 mov     ebp, 0Bh
.text:0040E69F                 jmp     loc_40D3CC
.text:0040E6A4 ; ---------------------------------------------------------------------------
.text:0040E6A4
.text:0040E6A4 loc_40E6A4:                             ; CODE XREF: sub_40C4F0+1A22↑j
.text:0040E6A4                 mov     ebx, [esp+97Ch+var_8F0]
.text:0040E6AB                 mov     edi, [esp+97Ch+var_8D0]
.text:0040E6B2                 inc     ebx
.text:0040E6B3                 cmp     edi, ebx
.text:0040E6B5                 jz      loc_40DF1F
.text:0040E6BB
.text:0040E6BB loc_40E6BB:                             ; CODE XREF: sub_40C4F0+21EA↓j
.text:0040E6BB                 mov     edi, [esp+97Ch+var_950]
.text:0040E6BF                 movzx   edx, byte ptr [edi-1]
.text:0040E6C3                 test    dl, dl
.text:0040E6C5                 jz      short loc_40E6DC
.text:0040E6C7                 movzx   ebp, dl
.text:0040E6CA                 cmp     byte ptr [ebp+edi-1], 0
.text:0040E6CF                 jnz     short loc_40E6DC
.text:0040E6D1                 mov     ebx, [esp+97Ch+var_950]
.text:0040E6D5                 dec     dl
.text:0040E6D7                 mov     [ebx-1], dl
.text:0040E6DA                 jmp     short loc_40E6BB
.text:0040E6DC ; ---------------------------------------------------------------------------
.text:0040E6DC
.text:0040E6DC loc_40E6DC:                             ; CODE XREF: sub_40C4F0+21D5↑j
.text:0040E6DC                                         ; sub_40C4F0+21DF↑j
.text:0040E6DC                 movzx   edi, dl
.text:0040E6DF                 add     [esp+97Ch+var_950], edi
.text:0040E6E3                 jmp     loc_40C91F
.text:0040E6E8 ; ---------------------------------------------------------------------------
.text:0040E6E8
.text:0040E6E8 loc_40E6E8:                             ; CODE XREF: sub_40C4F0+1A14↑j
.text:0040E6E8                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040E6EF                 jz      loc_40DAA0
.text:0040E6F5                 movzx   ebx, byte ptr [edx+1]
.text:0040E6F9                 lea     ecx, [edx+2]
.text:0040E6FC                 mov     eax, [esp+97Ch+var_8F8]
.text:0040E703                 mov     [esp+97Ch+var_8D0], ecx
.text:0040E70A                 test    eax, eax
.text:0040E70C                 jz      short loc_40E71C
.text:0040E70E                 mov     edx, [esp+97Ch+var_8F8]
.text:0040E715                 movzx   edi, bl
.text:0040E718                 movzx   ebx, byte ptr [edi+edx]
.text:0040E71C
.text:0040E71C loc_40E71C:                             ; CODE XREF: sub_40C4F0+221C↑j
.text:0040E71C                 mov     cl, bl
.text:0040E71E                 mov     ebp, [esp+97Ch+var_950]
.text:0040E722                 mov     edx, 1
.text:0040E727                 shr     cl, 3
.text:0040E72A                 movzx   esi, cl
.text:0040E72D                 mov     ecx, ebx
.text:0040E72F                 and     ecx, 7
.text:0040E732                 movzx   ebx, bl
.text:0040E735                 shl     edx, cl
.text:0040E737                 or      [esi+ebp], dl
.text:0040E73A                 jmp     loc_40DFB9
.text:0040E73F ; ---------------------------------------------------------------------------
.text:0040E73F
.text:0040E73F loc_40E73F:                             ; CODE XREF: sub_40C4F0+19B4↑j
.text:0040E73F                 test    [esp+97Ch+arg_8], 100h
.text:0040E74A                 jz      loc_40DEAA
.text:0040E750                 or      byte ptr [ebx+1], 4
.text:0040E754                 jmp     loc_40DEAA
.text:0040E759 ; ---------------------------------------------------------------------------
.text:0040E759
.text:0040E759 loc_40E759:                             ; CODE XREF: sub_40C4F0+18B2↑j
.text:0040E759                 inc     edi
.text:0040E75A                 mov     [esp+97Ch+var_8D0], edi
.text:0040E761                 jmp     loc_40DDA8
.text:0040E766 ; ---------------------------------------------------------------------------
.text:0040E766
.text:0040E766 loc_40E766:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040E766                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040E766                 mov     eax, [esp+97Ch+var_8D0] ; jumptable 0040C65F case 92
.text:0040E76D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040E774                 jz      loc_40DAA0
.text:0040E77A                 movzx   ecx, byte ptr [eax]
.text:0040E77D                 lea     ebx, [eax+1]
.text:0040E780                 mov     [esp+97Ch+var_8D0], ebx
.text:0040E787                 movzx   eax, cl
.text:0040E78A                 sub     eax, 27h ; '''  ; switch 86 cases
.text:0040E78D                 mov     [esp+97Ch+var_8EC], cl
.text:0040E794                 cmp     eax, 55h
.text:0040E797                 ja      def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040E79D                 jmp     ds:jpt_40E79D[eax*4] ; switch jump
.text:0040E79D ; ---------------------------------------------------------------------------
.text:0040E7A4 jpt_40E79D      dd offset loc_40E93B, offset loc_40E8FC, offset loc_40EA0D
.text:0040E7A4                                         ; DATA XREF: sub_40C4F0+22AD↑r
.text:0040E7A4                 dd offset def_40E79D, offset loc_40ED3E, offset def_40E79D ; jump table for switch statement
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset loc_40EA43, offset loc_40EA43
.text:0040E7A4                 dd offset loc_40EA43, offset loc_40EA43, offset loc_40EA43
.text:0040E7A4                 dd offset loc_40EA43, offset loc_40EA43, offset loc_40EA43
.text:0040E7A4                 dd offset loc_40EA43, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset loc_40EB9A, offset def_40E79D, offset loc_40EC6C
.text:0040E7A4                 dd offset loc_40ED3E, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset loc_40ED51, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset loc_40EE23, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset loc_40EF16, offset def_40E79D, offset loc_40EFE8
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset loc_40F0BA
.text:0040E7A4                 dd offset def_40E79D, offset def_40E79D, offset def_40E79D
.text:0040E7A4                 dd offset loc_40F1AF, offset loc_40F759
.text:0040E8FC ; ---------------------------------------------------------------------------
.text:0040E8FC
.text:0040E8FC loc_40E8FC:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040E8FC                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040E8FC                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040E79D case 40
.text:0040E907                 jz      loc_40D0AD
.text:0040E90D
.text:0040E90D def_40E79D:                             ; CODE XREF: sub_40C4F0+22A7↑j
.text:0040E90D                                         ; sub_40C4F0+22AD↑j ...
.text:0040E90D                 mov     ebx, [esp+97Ch+var_8F8] ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040E914                 test    ebx, ebx
.text:0040E916                 jz      def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040E91C                 movzx   edi, [esp+97Ch+var_8EC]
.text:0040E924                 mov     esi, [esp+97Ch+var_8F8]
.text:0040E92B                 movzx   ecx, byte ptr [edi+esi]
.text:0040E92F                 mov     [esp+97Ch+var_8EC], cl
.text:0040E936                 jmp     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040E93B ; ---------------------------------------------------------------------------
.text:0040E93B
.text:0040E93B loc_40E93B:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040E93B                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040E93B                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 39
.text:0040E946                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040E94C
.text:0040E94C loc_40E94C:                             ; CODE XREF: sub_40C4F0+24D2↓j
.text:0040E94C                                         ; sub_40C4F0+24FF↓j ...
.text:0040E94C                 mov     eax, [esp+97Ch+arg_C]
.text:0040E953                 mov     ebp, [esp+97Ch+var_950]
.text:0040E957                 mov     edi, [eax]
.text:0040E959                 mov     edx, [eax+4]
.text:0040E95C                 sub     ebp, edi
.text:0040E95E                 inc     ebp
.text:0040E95F                 cmp     ebp, edx
.text:0040E961                 jbe     loc_40EA01
.text:0040E967                 cmp     edx, 10000h
.text:0040E96D                 mov     ebp, 0Fh
.text:0040E972                 jz      loc_40C906
.text:0040E978                 lea     ebp, [edx+edx]
.text:0040E97B                 mov     edx, [esp+97Ch+arg_C]
.text:0040E982                 cmp     ebp, 10000h
.text:0040E988                 mov     [edx+4], ebp
.text:0040E98B                 jbe     short loc_40E994
.text:0040E98D                 mov     dword ptr [edx+4], 10000h
.text:0040E994
.text:0040E994 loc_40E994:                             ; CODE XREF: sub_40C4F0+249B↑j
.text:0040E994                 mov     ebx, [esp+97Ch+arg_C]
.text:0040E99B                 mov     ebp, 0Ch
.text:0040E9A0                 mov     esi, [ebx+4]
.text:0040E9A3                 mov     [esp+97Ch+Size], edi ; Block
.text:0040E9A6                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040E9AA                 call    realloc
.text:0040E9AF                 mov     edx, [esp+97Ch+arg_C]
.text:0040E9B6                 test    eax, eax
.text:0040E9B8                 mov     [edx], eax
.text:0040E9BA                 jz      loc_40C906
.text:0040E9C0                 cmp     edi, eax
.text:0040E9C2                 jz      short loc_40E94C
.text:0040E9C4                 sub     eax, edi
.text:0040E9C6                 mov     edi, [esp+97Ch+var_908]
.text:0040E9CA                 add     [esp+97Ch+var_950], eax
.text:0040E9CE                 add     [esp+97Ch+var_904], eax
.text:0040E9D2                 test    edi, edi
.text:0040E9D4                 jz      short loc_40E9DA
.text:0040E9D6                 add     [esp+97Ch+var_908], eax
.text:0040E9DA
.text:0040E9DA loc_40E9DA:                             ; CODE XREF: sub_40C4F0+24E4↑j
.text:0040E9DA                 mov     ecx, [esp+97Ch+var_900]
.text:0040E9DE                 test    ecx, ecx
.text:0040E9E0                 jz      short loc_40E9E6
.text:0040E9E2                 add     [esp+97Ch+var_900], eax
.text:0040E9E6
.text:0040E9E6 loc_40E9E6:                             ; CODE XREF: sub_40C4F0+24F0↑j
.text:0040E9E6                 mov     edx, [esp+97Ch+var_8FC]
.text:0040E9ED                 test    edx, edx
.text:0040E9EF                 jz      loc_40E94C
.text:0040E9F5                 add     [esp+97Ch+var_8FC], eax
.text:0040E9FC                 jmp     loc_40E94C
.text:0040EA01 ; ---------------------------------------------------------------------------
.text:0040EA01
.text:0040EA01 loc_40EA01:                             ; CODE XREF: sub_40C4F0+2471↑j
.text:0040EA01                 mov     edi, [esp+97Ch+var_950]
.text:0040EA05                 mov     byte ptr [edi], 0Ch
.text:0040EA08                 jmp     loc_40C91A
.text:0040EA0D ; ---------------------------------------------------------------------------
.text:0040EA0D
.text:0040EA0D loc_40EA0D:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EA0D                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EA0D                 test    [esp+97Ch+arg_8], 2000h ; jumptable 0040E79D case 41
.text:0040EA18                 jnz     def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040EA1E                 mov     edi, [esp+97Ch+var_24]
.text:0040EA25                 test    edi, edi
.text:0040EA27                 jnz     loc_40D297
.text:0040EA2D                 test    [esp+97Ch+arg_8], 20000h
.text:0040EA38                 jnz     def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040EA3E                 jmp     loc_40D3C0
.text:0040EA43 ; ---------------------------------------------------------------------------
.text:0040EA43
.text:0040EA43 loc_40EA43:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EA43                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EA43                 test    [esp+97Ch+arg_8], 4000h ; jumptable 0040E79D cases 49-57
.text:0040EA4E                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EA54                 movzx   ebx, [esp+97Ch+var_8EC]
.text:0040EA5C                 sub     bl, 30h ; '0'
.text:0040EA5F                 movzx   eax, bl
.text:0040EA62                 cmp     eax, [esp+97Ch+var_90C]
.text:0040EA66                 ja      loc_40EB89
.text:0040EA6C                 mov     [esp+97Ch+var_970], eax
.text:0040EA70                 mov     ecx, [esp+97Ch+Block]
.text:0040EA77                 mov     edi, [esp+97Ch+var_28]
.text:0040EA7E                 mov     esi, [esp+97Ch+var_24]
.text:0040EA85                 mov     [esp+97Ch+Size], ecx
.text:0040EA88                 mov     [esp+97Ch+var_978], edi
.text:0040EA8C                 mov     [esp+97Ch+var_974], esi
.text:0040EA90                 call    sub_40BED0
.text:0040EA95                 test    al, al
.text:0040EA97                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EA9D                 mov     esi, [esp+97Ch+arg_C]
.text:0040EAA4                 mov     ebp, [esp+97Ch+var_950]
.text:0040EAA8                 mov     edi, [esi]
.text:0040EAAA                 mov     [esp+97Ch+var_900], ebp
.text:0040EAAE                 mov     edx, [esi+4]
.text:0040EAB1                 sub     ebp, edi
.text:0040EAB3                 mov     [esp+97Ch+var_940], edi
.text:0040EAB7                 add     ebp, 2
.text:0040EABA                 cmp     ebp, edx
.text:0040EABC                 jbe     loc_40EB7A
.text:0040EAC2
.text:0040EAC2 loc_40EAC2:                             ; CODE XREF: sub_40C4F0+2684↓j
.text:0040EAC2                 cmp     edx, 10000h
.text:0040EAC8                 mov     ebp, 0Fh
.text:0040EACD                 jz      loc_40C906
.text:0040EAD3                 mov     esi, [esp+97Ch+arg_C]
.text:0040EADA                 lea     ecx, [edx+edx]
.text:0040EADD                 cmp     ecx, 10000h
.text:0040EAE3                 mov     [esi+4], ecx
.text:0040EAE6                 jbe     short loc_40EAEF
.text:0040EAE8                 mov     dword ptr [esi+4], 10000h
.text:0040EAEF
.text:0040EAEF loc_40EAEF:                             ; CODE XREF: sub_40C4F0+25F6↑j
.text:0040EAEF                 mov     eax, [esp+97Ch+arg_C]
.text:0040EAF6                 mov     ebp, [eax+4]
.text:0040EAF9                 mov     [esp+97Ch+Size], edi ; Block
.text:0040EAFC                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040EB00                 mov     ebp, 0Ch
.text:0040EB05                 call    realloc
.text:0040EB0A                 mov     edx, [esp+97Ch+arg_C]
.text:0040EB11                 test    eax, eax
.text:0040EB13                 mov     [edx], eax
.text:0040EB15                 jz      loc_40C906
.text:0040EB1B                 cmp     [esp+97Ch+var_940], eax
.text:0040EB1F                 jz      short loc_40EB59
.text:0040EB21                 mov     esi, [esp+97Ch+var_940]
.text:0040EB25                 mov     edi, [esp+97Ch+var_908]
.text:0040EB29                 sub     eax, esi
.text:0040EB2B                 add     [esp+97Ch+var_950], eax
.text:0040EB2F                 add     [esp+97Ch+var_904], eax
.text:0040EB33                 test    edi, edi
.text:0040EB35                 jz      short loc_40EB3B
.text:0040EB37                 add     [esp+97Ch+var_908], eax
.text:0040EB3B
.text:0040EB3B loc_40EB3B:                             ; CODE XREF: sub_40C4F0+2645↑j
.text:0040EB3B                 mov     edx, [esp+97Ch+var_900]
.text:0040EB3F                 test    edx, edx
.text:0040EB41                 jz      short loc_40EB47
.text:0040EB43                 add     [esp+97Ch+var_900], eax
.text:0040EB47
.text:0040EB47 loc_40EB47:                             ; CODE XREF: sub_40C4F0+2651↑j
.text:0040EB47                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040EB4E                 test    ecx, ecx
.text:0040EB50                 jz      short loc_40EB59
.text:0040EB52                 add     [esp+97Ch+var_8FC], eax
.text:0040EB59
.text:0040EB59 loc_40EB59:                             ; CODE XREF: sub_40C4F0+262F↑j
.text:0040EB59                                         ; sub_40C4F0+2660↑j
.text:0040EB59                 mov     eax, [esp+97Ch+arg_C]
.text:0040EB60                 mov     ebp, [esp+97Ch+var_950]
.text:0040EB64                 mov     edi, [eax]
.text:0040EB66                 mov     edx, [eax+4]
.text:0040EB69                 sub     ebp, edi
.text:0040EB6B                 add     ebp, 2
.text:0040EB6E                 mov     [esp+97Ch+var_940], edi
.text:0040EB72                 cmp     ebp, edx
.text:0040EB74                 ja      loc_40EAC2
.text:0040EB7A
.text:0040EB7A loc_40EB7A:                             ; CODE XREF: sub_40C4F0+25CC↑j
.text:0040EB7A                 mov     edi, [esp+97Ch+var_950]
.text:0040EB7E                 mov     byte ptr [edi], 8
.text:0040EB81                 inc     edi
.text:0040EB82                 mov     [edi], bl
.text:0040EB84                 jmp     loc_40C91A
.text:0040EB89 ; ---------------------------------------------------------------------------
.text:0040EB89
.text:0040EB89 loc_40EB89:                             ; CODE XREF: sub_40C4F0+2576↑j
.text:0040EB89                 mov     ebx, [esp+97Ch+Block]
.text:0040EB90                 mov     ebp, 6
.text:0040EB95                 jmp     loc_40E558
.text:0040EB9A ; ---------------------------------------------------------------------------
.text:0040EB9A
.text:0040EB9A loc_40EB9A:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EB9A                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EB9A                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 60
.text:0040EBA5                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EBAB
.text:0040EBAB loc_40EBAB:                             ; CODE XREF: sub_40C4F0+2731↓j
.text:0040EBAB                                         ; sub_40C4F0+275E↓j ...
.text:0040EBAB                 mov     eax, [esp+97Ch+arg_C]
.text:0040EBB2                 mov     ebx, [esp+97Ch+var_950]
.text:0040EBB6                 mov     edi, [eax]
.text:0040EBB8                 mov     edx, [eax+4]
.text:0040EBBB                 sub     ebx, edi
.text:0040EBBD                 inc     ebx
.text:0040EBBE                 cmp     ebx, edx
.text:0040EBC0                 jbe     loc_40EC60
.text:0040EBC6                 cmp     edx, 10000h
.text:0040EBCC                 mov     ebp, 0Fh
.text:0040EBD1                 jz      loc_40C906
.text:0040EBD7                 lea     ebx, [edx+edx]
.text:0040EBDA                 mov     edx, [esp+97Ch+arg_C]
.text:0040EBE1                 cmp     ebx, 10000h
.text:0040EBE7                 mov     [edx+4], ebx
.text:0040EBEA                 jbe     short loc_40EBF3
.text:0040EBEC                 mov     dword ptr [edx+4], 10000h
.text:0040EBF3
.text:0040EBF3 loc_40EBF3:                             ; CODE XREF: sub_40C4F0+26FA↑j
.text:0040EBF3                 mov     ebp, [esp+97Ch+arg_C]
.text:0040EBFA                 mov     edx, [ebp+4]
.text:0040EBFD                 mov     ebp, 0Ch
.text:0040EC02                 mov     [esp+97Ch+Size], edi ; Block
.text:0040EC05                 mov     [esp+97Ch+var_978], edx ; Size
.text:0040EC09                 call    realloc
.text:0040EC0E                 mov     ecx, [esp+97Ch+arg_C]
.text:0040EC15                 test    eax, eax
.text:0040EC17                 mov     [ecx], eax
.text:0040EC19                 jz      loc_40C906
.text:0040EC1F                 cmp     edi, eax
.text:0040EC21                 jz      short loc_40EBAB
.text:0040EC23                 mov     esi, [esp+97Ch+var_908]
.text:0040EC27                 sub     eax, edi
.text:0040EC29                 add     [esp+97Ch+var_950], eax
.text:0040EC2D                 add     [esp+97Ch+var_904], eax
.text:0040EC31                 test    esi, esi
.text:0040EC33                 jz      short loc_40EC39
.text:0040EC35                 add     [esp+97Ch+var_908], eax
.text:0040EC39
.text:0040EC39 loc_40EC39:                             ; CODE XREF: sub_40C4F0+2743↑j
.text:0040EC39                 mov     edi, [esp+97Ch+var_900]
.text:0040EC3D                 test    edi, edi
.text:0040EC3F                 jz      short loc_40EC45
.text:0040EC41                 add     [esp+97Ch+var_900], eax
.text:0040EC45
.text:0040EC45 loc_40EC45:                             ; CODE XREF: sub_40C4F0+274F↑j
.text:0040EC45                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040EC4C                 test    ecx, ecx
.text:0040EC4E                 jz      loc_40EBAB
.text:0040EC54                 add     [esp+97Ch+var_8FC], eax
.text:0040EC5B                 jmp     loc_40EBAB
.text:0040EC60 ; ---------------------------------------------------------------------------
.text:0040EC60
.text:0040EC60 loc_40EC60:                             ; CODE XREF: sub_40C4F0+26D0↑j
.text:0040EC60                 mov     edi, [esp+97Ch+var_950]
.text:0040EC64                 mov     byte ptr [edi], 1Ah
.text:0040EC67                 jmp     loc_40C91A
.text:0040EC6C ; ---------------------------------------------------------------------------
.text:0040EC6C
.text:0040EC6C loc_40EC6C:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EC6C                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EC6C                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 62
.text:0040EC77                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EC7D
.text:0040EC7D loc_40EC7D:                             ; CODE XREF: sub_40C4F0+2803↓j
.text:0040EC7D                                         ; sub_40C4F0+2830↓j ...
.text:0040EC7D                 mov     eax, [esp+97Ch+arg_C]
.text:0040EC84                 mov     ebp, [esp+97Ch+var_950]
.text:0040EC88                 mov     edi, [eax]
.text:0040EC8A                 mov     edx, [eax+4]
.text:0040EC8D                 sub     ebp, edi
.text:0040EC8F                 inc     ebp
.text:0040EC90                 cmp     ebp, edx
.text:0040EC92                 jbe     loc_40ED32
.text:0040EC98                 cmp     edx, 10000h
.text:0040EC9E                 mov     ebp, 0Fh
.text:0040ECA3                 jz      loc_40C906
.text:0040ECA9                 lea     ebp, [edx+edx]
.text:0040ECAC                 mov     edx, [esp+97Ch+arg_C]
.text:0040ECB3                 cmp     ebp, 10000h
.text:0040ECB9                 mov     [edx+4], ebp
.text:0040ECBC                 jbe     short loc_40ECC5
.text:0040ECBE                 mov     dword ptr [edx+4], 10000h
.text:0040ECC5
.text:0040ECC5 loc_40ECC5:                             ; CODE XREF: sub_40C4F0+27CC↑j
.text:0040ECC5                 mov     ebx, [esp+97Ch+arg_C]
.text:0040ECCC                 mov     ebp, 0Ch
.text:0040ECD1                 mov     esi, [ebx+4]
.text:0040ECD4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040ECD7                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040ECDB                 call    realloc
.text:0040ECE0                 mov     edx, [esp+97Ch+arg_C]
.text:0040ECE7                 test    eax, eax
.text:0040ECE9                 mov     [edx], eax
.text:0040ECEB                 jz      loc_40C906
.text:0040ECF1                 cmp     edi, eax
.text:0040ECF3                 jz      short loc_40EC7D
.text:0040ECF5                 sub     eax, edi
.text:0040ECF7                 mov     edi, [esp+97Ch+var_908]
.text:0040ECFB                 add     [esp+97Ch+var_950], eax
.text:0040ECFF                 add     [esp+97Ch+var_904], eax
.text:0040ED03                 test    edi, edi
.text:0040ED05                 jz      short loc_40ED0B
.text:0040ED07                 add     [esp+97Ch+var_908], eax
.text:0040ED0B
.text:0040ED0B loc_40ED0B:                             ; CODE XREF: sub_40C4F0+2815↑j
.text:0040ED0B                 mov     ecx, [esp+97Ch+var_900]
.text:0040ED0F                 test    ecx, ecx
.text:0040ED11                 jz      short loc_40ED17
.text:0040ED13                 add     [esp+97Ch+var_900], eax
.text:0040ED17
.text:0040ED17 loc_40ED17:                             ; CODE XREF: sub_40C4F0+2821↑j
.text:0040ED17                 mov     edx, [esp+97Ch+var_8FC]
.text:0040ED1E                 test    edx, edx
.text:0040ED20                 jz      loc_40EC7D
.text:0040ED26                 add     [esp+97Ch+var_8FC], eax
.text:0040ED2D                 jmp     loc_40EC7D
.text:0040ED32 ; ---------------------------------------------------------------------------
.text:0040ED32
.text:0040ED32 loc_40ED32:                             ; CODE XREF: sub_40C4F0+27A2↑j
.text:0040ED32                 mov     edi, [esp+97Ch+var_950]
.text:0040ED36                 mov     byte ptr [edi], 1Bh
.text:0040ED39                 jmp     loc_40C91A
.text:0040ED3E ; ---------------------------------------------------------------------------
.text:0040ED3E
.text:0040ED3E loc_40ED3E:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040ED3E                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040ED3E                 test    byte ptr [esp+97Ch+arg_8], 2 ; jumptable 0040E79D cases 43,63
.text:0040ED46                 jz      def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040ED4C                 jmp     loc_40D550      ; jumptable 0040C65F case 42
.text:0040ED51 ; ---------------------------------------------------------------------------
.text:0040ED51
.text:0040ED51 loc_40ED51:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040ED51                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040ED51                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 66
.text:0040ED5C                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040ED62
.text:0040ED62 loc_40ED62:                             ; CODE XREF: sub_40C4F0+28E8↓j
.text:0040ED62                                         ; sub_40C4F0+2915↓j ...
.text:0040ED62                 mov     eax, [esp+97Ch+arg_C]
.text:0040ED69                 mov     ebp, [esp+97Ch+var_950]
.text:0040ED6D                 mov     edi, [eax]
.text:0040ED6F                 mov     edx, [eax+4]
.text:0040ED72                 sub     ebp, edi
.text:0040ED74                 inc     ebp
.text:0040ED75                 cmp     ebp, edx
.text:0040ED77                 jbe     loc_40EE17
.text:0040ED7D                 cmp     edx, 10000h
.text:0040ED83                 mov     ebp, 0Fh
.text:0040ED88                 jz      loc_40C906
.text:0040ED8E                 lea     ebx, [edx+edx]
.text:0040ED91                 mov     edx, [esp+97Ch+arg_C]
.text:0040ED98                 cmp     ebx, 10000h
.text:0040ED9E                 mov     [edx+4], ebx
.text:0040EDA1                 jbe     short loc_40EDAA
.text:0040EDA3                 mov     dword ptr [edx+4], 10000h
.text:0040EDAA
.text:0040EDAA loc_40EDAA:                             ; CODE XREF: sub_40C4F0+28B1↑j
.text:0040EDAA                 mov     esi, [esp+97Ch+arg_C]
.text:0040EDB1                 mov     ebp, [esi+4]
.text:0040EDB4                 mov     [esp+97Ch+Size], edi ; Block
.text:0040EDB7                 mov     [esp+97Ch+var_978], ebp ; Size
.text:0040EDBB                 mov     ebp, 0Ch
.text:0040EDC0                 call    realloc
.text:0040EDC5                 mov     edx, [esp+97Ch+arg_C]
.text:0040EDCC                 test    eax, eax
.text:0040EDCE                 mov     [edx], eax
.text:0040EDD0                 jz      loc_40C906
.text:0040EDD6                 cmp     edi, eax
.text:0040EDD8                 jz      short loc_40ED62
.text:0040EDDA                 sub     eax, edi
.text:0040EDDC                 mov     edi, [esp+97Ch+var_908]
.text:0040EDE0                 add     [esp+97Ch+var_950], eax
.text:0040EDE4                 add     [esp+97Ch+var_904], eax
.text:0040EDE8                 test    edi, edi
.text:0040EDEA                 jz      short loc_40EDF0
.text:0040EDEC                 add     [esp+97Ch+var_908], eax
.text:0040EDF0
.text:0040EDF0 loc_40EDF0:                             ; CODE XREF: sub_40C4F0+28FA↑j
.text:0040EDF0                 mov     ecx, [esp+97Ch+var_900]
.text:0040EDF4                 test    ecx, ecx
.text:0040EDF6                 jz      short loc_40EDFC
.text:0040EDF8                 add     [esp+97Ch+var_900], eax
.text:0040EDFC
.text:0040EDFC loc_40EDFC:                             ; CODE XREF: sub_40C4F0+2906↑j
.text:0040EDFC                 mov     ebx, [esp+97Ch+var_8FC]
.text:0040EE03                 test    ebx, ebx
.text:0040EE05                 jz      loc_40ED62
.text:0040EE0B                 add     [esp+97Ch+var_8FC], eax
.text:0040EE12                 jmp     loc_40ED62
.text:0040EE17 ; ---------------------------------------------------------------------------
.text:0040EE17
.text:0040EE17 loc_40EE17:                             ; CODE XREF: sub_40C4F0+2887↑j
.text:0040EE17                 mov     edi, [esp+97Ch+var_950]
.text:0040EE1B                 mov     byte ptr [edi], 1Dh
.text:0040EE1E                 jmp     loc_40C91A
.text:0040EE23 ; ---------------------------------------------------------------------------
.text:0040EE23
.text:0040EE23 loc_40EE23:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EE23                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EE23                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 87
.text:0040EE2E                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EE34                 mov     ecx, [esp+97Ch+arg_C]
.text:0040EE3B                 mov     esi, [esp+97Ch+var_950]
.text:0040EE3F                 mov     edi, [ecx]
.text:0040EE41                 mov     [esp+97Ch+var_900], esi
.text:0040EE45                 mov     edx, [ecx+4]
.text:0040EE48                 sub     esi, edi
.text:0040EE4A                 inc     esi
.text:0040EE4B                 mov     ebx, edi
.text:0040EE4D                 cmp     esi, edx
.text:0040EE4F                 jbe     loc_40EF0A
.text:0040EE55
.text:0040EE55 loc_40EE55:                             ; CODE XREF: sub_40C4F0+2A14↓j
.text:0040EE55                 cmp     edx, 10000h
.text:0040EE5B                 mov     ebp, 0Fh
.text:0040EE60                 jz      loc_40C906
.text:0040EE66                 mov     esi, [esp+97Ch+arg_C]
.text:0040EE6D                 lea     ebp, [edx+edx]
.text:0040EE70                 cmp     ebp, 10000h
.text:0040EE76                 mov     [esi+4], ebp
.text:0040EE79                 jbe     short loc_40EE82
.text:0040EE7B                 mov     dword ptr [esi+4], 10000h
.text:0040EE82
.text:0040EE82 loc_40EE82:                             ; CODE XREF: sub_40C4F0+2989↑j
.text:0040EE82                 mov     eax, [esp+97Ch+arg_C]
.text:0040EE89                 mov     ebp, 0Ch
.text:0040EE8E                 mov     esi, [eax+4]
.text:0040EE91                 mov     [esp+97Ch+Size], edi ; Block
.text:0040EE94                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040EE98                 call    realloc
.text:0040EE9D                 mov     edi, [esp+97Ch+arg_C]
.text:0040EEA4                 test    eax, eax
.text:0040EEA6                 mov     [edi], eax
.text:0040EEA8                 jz      loc_40C906
.text:0040EEAE                 cmp     ebx, eax
.text:0040EEB0                 jz      short loc_40EEE6
.text:0040EEB2                 sub     eax, ebx
.text:0040EEB4                 mov     ebx, [esp+97Ch+var_908]
.text:0040EEB8                 add     [esp+97Ch+var_950], eax
.text:0040EEBC                 add     [esp+97Ch+var_904], eax
.text:0040EEC0                 test    ebx, ebx
.text:0040EEC2                 jz      short loc_40EEC8
.text:0040EEC4                 add     [esp+97Ch+var_908], eax
.text:0040EEC8
.text:0040EEC8 loc_40EEC8:                             ; CODE XREF: sub_40C4F0+29D2↑j
.text:0040EEC8                 mov     ecx, [esp+97Ch+var_900]
.text:0040EECC                 test    ecx, ecx
.text:0040EECE                 jz      short loc_40EED4
.text:0040EED0                 add     [esp+97Ch+var_900], eax
.text:0040EED4
.text:0040EED4 loc_40EED4:                             ; CODE XREF: sub_40C4F0+29DE↑j
.text:0040EED4                 mov     edx, [esp+97Ch+var_8FC]
.text:0040EEDB                 test    edx, edx
.text:0040EEDD                 jz      short loc_40EEE6
.text:0040EEDF                 add     [esp+97Ch+var_8FC], eax
.text:0040EEE6
.text:0040EEE6 loc_40EEE6:                             ; CODE XREF: sub_40C4F0+29C0↑j
.text:0040EEE6                                         ; sub_40C4F0+29ED↑j
.text:0040EEE6                 mov     esi, [esp+97Ch+arg_C]
.text:0040EEED                 mov     eax, [esp+97Ch+arg_C]
.text:0040EEF4                 mov     ebp, [esp+97Ch+var_950]
.text:0040EEF8                 mov     edi, [esi]
.text:0040EEFA                 mov     edx, [eax+4]
.text:0040EEFD                 sub     ebp, edi
.text:0040EEFF                 inc     ebp
.text:0040EF00                 mov     ebx, edi
.text:0040EF02                 cmp     ebp, edx
.text:0040EF04                 ja      loc_40EE55
.text:0040EF0A
.text:0040EF0A loc_40EF0A:                             ; CODE XREF: sub_40C4F0+295F↑j
.text:0040EF0A                 mov     edi, [esp+97Ch+var_950]
.text:0040EF0E                 mov     byte ptr [edi], 19h
.text:0040EF11                 jmp     loc_40C91A
.text:0040EF16 ; ---------------------------------------------------------------------------
.text:0040EF16
.text:0040EF16 loc_40EF16:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EF16                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EF16                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 96
.text:0040EF21                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EF27
.text:0040EF27 loc_40EF27:                             ; CODE XREF: sub_40C4F0+2AAD↓j
.text:0040EF27                                         ; sub_40C4F0+2ADA↓j ...
.text:0040EF27                 mov     eax, [esp+97Ch+arg_C]
.text:0040EF2E                 mov     ebx, [esp+97Ch+var_950]
.text:0040EF32                 mov     edi, [eax]
.text:0040EF34                 mov     edx, [eax+4]
.text:0040EF37                 sub     ebx, edi
.text:0040EF39                 inc     ebx
.text:0040EF3A                 cmp     ebx, edx
.text:0040EF3C                 jbe     loc_40EFDC
.text:0040EF42                 cmp     edx, 10000h
.text:0040EF48                 mov     ebp, 0Fh
.text:0040EF4D                 jz      loc_40C906
.text:0040EF53                 lea     esi, [edx+edx]
.text:0040EF56                 mov     edx, [esp+97Ch+arg_C]
.text:0040EF5D                 cmp     esi, 10000h
.text:0040EF63                 mov     [edx+4], esi
.text:0040EF66                 jbe     short loc_40EF6F
.text:0040EF68                 mov     dword ptr [edx+4], 10000h
.text:0040EF6F
.text:0040EF6F loc_40EF6F:                             ; CODE XREF: sub_40C4F0+2A76↑j
.text:0040EF6F                 mov     ebp, [esp+97Ch+arg_C]
.text:0040EF76                 mov     ebx, [ebp+4]
.text:0040EF79                 mov     ebp, 0Ch
.text:0040EF7E                 mov     [esp+97Ch+Size], edi ; Block
.text:0040EF81                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040EF85                 call    realloc
.text:0040EF8A                 mov     edx, [esp+97Ch+arg_C]
.text:0040EF91                 test    eax, eax
.text:0040EF93                 mov     [edx], eax
.text:0040EF95                 jz      loc_40C906
.text:0040EF9B                 cmp     edi, eax
.text:0040EF9D                 jz      short loc_40EF27
.text:0040EF9F                 mov     ecx, [esp+97Ch+var_908]
.text:0040EFA3                 sub     eax, edi
.text:0040EFA5                 add     [esp+97Ch+var_950], eax
.text:0040EFA9                 add     [esp+97Ch+var_904], eax
.text:0040EFAD                 test    ecx, ecx
.text:0040EFAF                 jz      short loc_40EFB5
.text:0040EFB1                 add     [esp+97Ch+var_908], eax
.text:0040EFB5
.text:0040EFB5 loc_40EFB5:                             ; CODE XREF: sub_40C4F0+2ABF↑j
.text:0040EFB5                 mov     edi, [esp+97Ch+var_900]
.text:0040EFB9                 test    edi, edi
.text:0040EFBB                 jz      short loc_40EFC1
.text:0040EFBD                 add     [esp+97Ch+var_900], eax
.text:0040EFC1
.text:0040EFC1 loc_40EFC1:                             ; CODE XREF: sub_40C4F0+2ACB↑j
.text:0040EFC1                 mov     esi, [esp+97Ch+var_8FC]
.text:0040EFC8                 test    esi, esi
.text:0040EFCA                 jz      loc_40EF27
.text:0040EFD0                 add     [esp+97Ch+var_8FC], eax
.text:0040EFD7                 jmp     loc_40EF27
.text:0040EFDC ; ---------------------------------------------------------------------------
.text:0040EFDC
.text:0040EFDC loc_40EFDC:                             ; CODE XREF: sub_40C4F0+2A4C↑j
.text:0040EFDC                 mov     edi, [esp+97Ch+var_950]
.text:0040EFE0                 mov     byte ptr [edi], 0Bh
.text:0040EFE3                 jmp     loc_40C91A
.text:0040EFE8 ; ---------------------------------------------------------------------------
.text:0040EFE8
.text:0040EFE8 loc_40EFE8:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040EFE8                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040EFE8                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 98
.text:0040EFF3                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040EFF9
.text:0040EFF9 loc_40EFF9:                             ; CODE XREF: sub_40C4F0+2B7F↓j
.text:0040EFF9                                         ; sub_40C4F0+2BAC↓j ...
.text:0040EFF9                 mov     eax, [esp+97Ch+arg_C]
.text:0040F000                 mov     ecx, [esp+97Ch+var_950]
.text:0040F004                 mov     edi, [eax]
.text:0040F006                 mov     edx, [eax+4]
.text:0040F009                 sub     ecx, edi
.text:0040F00B                 inc     ecx
.text:0040F00C                 cmp     ecx, edx
.text:0040F00E                 jbe     loc_40F0AE
.text:0040F014                 cmp     edx, 10000h
.text:0040F01A                 mov     ebp, 0Fh
.text:0040F01F                 jz      loc_40C906
.text:0040F025                 lea     esi, [edx+edx]
.text:0040F028                 mov     edx, [esp+97Ch+arg_C]
.text:0040F02F                 cmp     esi, 10000h
.text:0040F035                 mov     [edx+4], esi
.text:0040F038                 jbe     short loc_40F041
.text:0040F03A                 mov     dword ptr [edx+4], 10000h
.text:0040F041
.text:0040F041 loc_40F041:                             ; CODE XREF: sub_40C4F0+2B48↑j
.text:0040F041                 mov     edx, [esp+97Ch+arg_C]
.text:0040F048                 mov     ebp, 0Ch
.text:0040F04D                 mov     ebx, [edx+4]
.text:0040F050                 mov     [esp+97Ch+Size], edi ; Block
.text:0040F053                 mov     [esp+97Ch+var_978], ebx ; Size
.text:0040F057                 call    realloc
.text:0040F05C                 mov     ecx, [esp+97Ch+arg_C]
.text:0040F063                 test    eax, eax
.text:0040F065                 mov     [ecx], eax
.text:0040F067                 jz      loc_40C906
.text:0040F06D                 cmp     edi, eax
.text:0040F06F                 jz      short loc_40EFF9
.text:0040F071                 mov     ebp, [esp+97Ch+var_908]
.text:0040F075                 sub     eax, edi
.text:0040F077                 add     [esp+97Ch+var_950], eax
.text:0040F07B                 add     [esp+97Ch+var_904], eax
.text:0040F07F                 test    ebp, ebp
.text:0040F081                 jz      short loc_40F087
.text:0040F083                 add     [esp+97Ch+var_908], eax
.text:0040F087
.text:0040F087 loc_40F087:                             ; CODE XREF: sub_40C4F0+2B91↑j
.text:0040F087                 mov     edi, [esp+97Ch+var_900]
.text:0040F08B                 test    edi, edi
.text:0040F08D                 jz      short loc_40F093
.text:0040F08F                 add     [esp+97Ch+var_900], eax
.text:0040F093
.text:0040F093 loc_40F093:                             ; CODE XREF: sub_40C4F0+2B9D↑j
.text:0040F093                 mov     esi, [esp+97Ch+var_8FC]
.text:0040F09A                 test    esi, esi
.text:0040F09C                 jz      loc_40EFF9
.text:0040F0A2                 add     [esp+97Ch+var_8FC], eax
.text:0040F0A9                 jmp     loc_40EFF9
.text:0040F0AE ; ---------------------------------------------------------------------------
.text:0040F0AE
.text:0040F0AE loc_40F0AE:                             ; CODE XREF: sub_40C4F0+2B1E↑j
.text:0040F0AE                 mov     edi, [esp+97Ch+var_950]
.text:0040F0B2                 mov     byte ptr [edi], 1Ch
.text:0040F0B5                 jmp     loc_40C91A
.text:0040F0BA ; ---------------------------------------------------------------------------
.text:0040F0BA
.text:0040F0BA loc_40F0BA:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040F0BA                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040F0BA                 test    [esp+97Ch+arg_8], 80000h ; jumptable 0040E79D case 119
.text:0040F0C5                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040F0CB                 mov     eax, [esp+97Ch+arg_C]
.text:0040F0D2                 mov     ecx, [esp+97Ch+var_950]
.text:0040F0D6                 mov     edi, [eax]
.text:0040F0D8                 mov     [esp+97Ch+var_900], ecx
.text:0040F0DC                 mov     esi, ecx
.text:0040F0DE                 mov     edx, [eax+4]
.text:0040F0E1                 sub     esi, edi
.text:0040F0E3                 mov     ebx, edi
.text:0040F0E5                 inc     esi
.text:0040F0E6                 cmp     esi, edx
.text:0040F0E8                 jbe     loc_40F1A3
.text:0040F0EE
.text:0040F0EE loc_40F0EE:                             ; CODE XREF: sub_40C4F0+2CAD↓j
.text:0040F0EE                 cmp     edx, 10000h
.text:0040F0F4                 mov     ebp, 0Fh
.text:0040F0F9                 jz      loc_40C906
.text:0040F0FF                 mov     esi, [esp+97Ch+arg_C]
.text:0040F106                 lea     ebp, [edx+edx]
.text:0040F109                 cmp     ebp, 10000h
.text:0040F10F                 mov     [esi+4], ebp
.text:0040F112                 jbe     short loc_40F11B
.text:0040F114                 mov     dword ptr [esi+4], 10000h
.text:0040F11B
.text:0040F11B loc_40F11B:                             ; CODE XREF: sub_40C4F0+2C22↑j
.text:0040F11B                 mov     eax, [esp+97Ch+arg_C]
.text:0040F122                 mov     ebp, 0Ch
.text:0040F127                 mov     esi, [eax+4]
.text:0040F12A                 mov     [esp+97Ch+Size], edi ; Block
.text:0040F12D                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040F131                 call    realloc
.text:0040F136                 mov     edx, [esp+97Ch+arg_C]
.text:0040F13D                 test    eax, eax
.text:0040F13F                 mov     [edx], eax
.text:0040F141                 jz      loc_40C906
.text:0040F147                 cmp     ebx, eax
.text:0040F149                 jz      short loc_40F17F
.text:0040F14B                 sub     eax, ebx
.text:0040F14D                 mov     ebx, [esp+97Ch+var_908]
.text:0040F151                 add     [esp+97Ch+var_950], eax
.text:0040F155                 add     [esp+97Ch+var_904], eax
.text:0040F159                 test    ebx, ebx
.text:0040F15B                 jz      short loc_40F161
.text:0040F15D                 add     [esp+97Ch+var_908], eax
.text:0040F161
.text:0040F161 loc_40F161:                             ; CODE XREF: sub_40C4F0+2C6B↑j
.text:0040F161                 mov     edi, [esp+97Ch+var_900]
.text:0040F165                 test    edi, edi
.text:0040F167                 jz      short loc_40F16D
.text:0040F169                 add     [esp+97Ch+var_900], eax
.text:0040F16D
.text:0040F16D loc_40F16D:                             ; CODE XREF: sub_40C4F0+2C77↑j
.text:0040F16D                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040F174                 test    ecx, ecx
.text:0040F176                 jz      short loc_40F17F
.text:0040F178                 add     [esp+97Ch+var_8FC], eax
.text:0040F17F
.text:0040F17F loc_40F17F:                             ; CODE XREF: sub_40C4F0+2C59↑j
.text:0040F17F                                         ; sub_40C4F0+2C86↑j
.text:0040F17F                 mov     edx, [esp+97Ch+arg_C]
.text:0040F186                 mov     eax, [esp+97Ch+arg_C]
.text:0040F18D                 mov     ebp, [esp+97Ch+var_950]
.text:0040F191                 mov     edi, [edx]
.text:0040F193                 mov     edx, [eax+4]
.text:0040F196                 sub     ebp, edi
.text:0040F198                 inc     ebp
.text:0040F199                 mov     ebx, edi
.text:0040F19B                 cmp     ebp, edx
.text:0040F19D                 ja      loc_40F0EE
.text:0040F1A3
.text:0040F1A3 loc_40F1A3:                             ; CODE XREF: sub_40C4F0+2BF8↑j
.text:0040F1A3                 mov     edi, [esp+97Ch+var_950]
.text:0040F1A7                 mov     byte ptr [edi], 18h
.text:0040F1AA                 jmp     loc_40C91A
.text:0040F1AF ; ---------------------------------------------------------------------------
.text:0040F1AF
.text:0040F1AF loc_40F1AF:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040F1AF                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040F1AF                 mov     ebx, [esp+97Ch+arg_8] ; jumptable 0040E79D case 123
.text:0040F1B6                 and     ebx, 1200h
.text:0040F1BC                 cmp     ebx, 200h
.text:0040F1C2                 jnz     def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040F1C8
.text:0040F1C8 loc_40F1C8:                             ; CODE XREF: sub_40C4F0+329D↓j
.text:0040F1C8                 mov     [esp+97Ch+var_934], 0FFFFFFFFh
.text:0040F1D0                 mov     edi, [esp+97Ch+var_8D0]
.text:0040F1D7                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040F1DE                 mov     [esp+97Ch+var_938], 0FFFFFFFFh
.text:0040F1E6                 mov     ecx, edi
.text:0040F1E8                 jz      loc_40F2A9
.text:0040F1EE
.text:0040F1EE loc_40F1EE:                             ; CODE XREF: sub_40C4F0+2D74↓j
.text:0040F1EE                 movzx   eax, byte ptr [edi]
.text:0040F1F1                 inc     edi
.text:0040F1F2                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040F1F9                 mov     [esp+97Ch+var_8D0], edi
.text:0040F200                 test    ebp, ebp
.text:0040F202                 mov     [esp+97Ch+var_8EC], al
.text:0040F209                 jz      short loc_40F220
.text:0040F20B                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040F212                 movzx   esi, al
.text:0040F215                 movzx   ebx, byte ptr [esi+ebp]
.text:0040F219                 mov     [esp+97Ch+var_8EC], bl
.text:0040F220
.text:0040F220 loc_40F220:                             ; CODE XREF: sub_40C4F0+2D19↑j
.text:0040F220                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040F228                 sub     dl, 30h ; '0'
.text:0040F22B                 cmp     dl, 9
.text:0040F22E                 ja      short loc_40F266
.text:0040F230                 cmp     [esp+97Ch+var_934], 7FFFh
.text:0040F238                 jg      short loc_40F25D
.text:0040F23A                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040F242                 mov     edx, [esp+97Ch+var_934]
.text:0040F246                 shr     edx, 1Fh
.text:0040F249                 dec     edx
.text:0040F24A                 and     [esp+97Ch+var_934], edx
.text:0040F24E                 mov     eax, [esp+97Ch+var_934]
.text:0040F252                 lea     esi, [eax+eax*4]
.text:0040F255                 lea     ebx, [ebp+esi*2-30h]
.text:0040F259                 mov     [esp+97Ch+var_934], ebx
.text:0040F25D
.text:0040F25D loc_40F25D:                             ; CODE XREF: sub_40C4F0+2D48↑j
.text:0040F25D                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040F264                 jnz     short loc_40F1EE
.text:0040F266
.text:0040F266 loc_40F266:                             ; CODE XREF: sub_40C4F0+2D3E↑j
.text:0040F266                 cmp     [esp+97Ch+var_8EC], 2Ch ; ','
.text:0040F26E                 jz      loc_40F6B4
.text:0040F274                 mov     ebx, [esp+97Ch+var_934]
.text:0040F278                 mov     [esp+97Ch+var_938], ebx
.text:0040F27C
.text:0040F27C loc_40F27C:                             ; CODE XREF: sub_40C4F0+3256↓j
.text:0040F27C                                         ; sub_40C4F0+3264↓j
.text:0040F27C                 mov     esi, [esp+97Ch+var_934]
.text:0040F280                 test    esi, esi
.text:0040F282                 js      short loc_40F2A9
.text:0040F284                 mov     ebp, [esp+97Ch+var_938]
.text:0040F288                 cmp     [esp+97Ch+var_934], ebp
.text:0040F28C                 jg      short loc_40F2A9
.text:0040F28E                 test    [esp+97Ch+arg_8], 1000h
.text:0040F299                 jnz     loc_40F34A
.text:0040F29F                 cmp     [esp+97Ch+var_8EC], 5Ch ; '\'
.text:0040F2A7                 jz      short loc_40F306
.text:0040F2A9
.text:0040F2A9 loc_40F2A9:                             ; CODE XREF: sub_40C4F0+2CF8↑j
.text:0040F2A9                                         ; sub_40C4F0+2D92↑j ...
.text:0040F2A9                 test    [esp+97Ch+arg_8], 200000h
.text:0040F2B4                 jz      short loc_40F2DB
.text:0040F2B6
.text:0040F2B6 loc_40F2B6:                             ; CODE XREF: sub_40C4F0+31B1↓j
.text:0040F2B6                 test    [esp+97Ch+arg_8], 1000h
.text:0040F2C1                 mov     [esp+97Ch+var_8D0], ecx
.text:0040F2C8                 mov     [esp+97Ch+var_8EC], 7Bh ; '{'
.text:0040F2D0                 jz      def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040F2D6                 jmp     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040F2DB ; ---------------------------------------------------------------------------
.text:0040F2DB
.text:0040F2DB loc_40F2DB:                             ; CODE XREF: sub_40C4F0+2DC4↑j
.text:0040F2DB                 mov     edi, [esp+97Ch+Block]
.text:0040F2E2                 mov     [esp+97Ch+Size], edi ; Block
.text:0040F2E5                 call    free
.text:0040F2EA                 mov     ebp, [esp+97Ch+var_8F4]
.text:0040F2F1                 cmp     [esp+97Ch+var_8D0], ebp
.text:0040F2F8                 setnz   cl
.text:0040F2FB                 movzx   ebx, cl
.text:0040F2FE                 lea     ebp, [ebx+9]
.text:0040F301                 jmp     loc_40C906
.text:0040F306 ; ---------------------------------------------------------------------------
.text:0040F306
.text:0040F306 loc_40F306:                             ; CODE XREF: sub_40C4F0+2DB7↑j
.text:0040F306                 mov     eax, [esp+97Ch+var_8D0]
.text:0040F30D                 cmp     eax, [esp+97Ch+var_8F4]
.text:0040F314                 jz      short loc_40F2A9
.text:0040F316                 movzx   edx, byte ptr [eax]
.text:0040F319                 lea     ebx, [eax+1]
.text:0040F31C                 mov     eax, [esp+97Ch+var_8F8]
.text:0040F323                 mov     [esp+97Ch+var_8D0], ebx
.text:0040F32A                 test    eax, eax
.text:0040F32C                 mov     [esp+97Ch+var_8EC], dl
.text:0040F333                 jz      short loc_40F34A
.text:0040F335                 mov     esi, [esp+97Ch+var_8F8]
.text:0040F33C                 movzx   edi, dl
.text:0040F33F                 movzx   edx, byte ptr [edi+esi]
.text:0040F343                 mov     [esp+97Ch+var_8EC], dl
.text:0040F34A
.text:0040F34A loc_40F34A:                             ; CODE XREF: sub_40C4F0+2DA9↑j
.text:0040F34A                                         ; sub_40C4F0+2E43↑j
.text:0040F34A                 cmp     [esp+97Ch+var_8EC], 7Dh ; '}'
.text:0040F352                 jnz     loc_40F2A9
.text:0040F358                 mov     ebp, [esp+97Ch+var_900]
.text:0040F35C                 test    ebp, ebp
.text:0040F35E                 jz      loc_40F683
.text:0040F364
.text:0040F364 loc_40F364:                             ; CODE XREF: sub_40C4F0+31BF↓j
.text:0040F364                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040F36C                 jg      loc_40F672
.text:0040F372                 mov     eax, [esp+97Ch+var_938]
.text:0040F376                 test    eax, eax
.text:0040F378                 jnz     loc_40F48F
.text:0040F37E                 mov     edx, [esp+97Ch+arg_C]
.text:0040F385                 mov     ebp, [esp+97Ch+arg_C]
.text:0040F38C                 mov     esi, [esp+97Ch+var_950]
.text:0040F390                 mov     edi, [edx]
.text:0040F392                 mov     edx, [ebp+4]
.text:0040F395                 sub     esi, edi
.text:0040F397                 add     esi, 3
.text:0040F39A                 mov     ebx, edi
.text:0040F39C                 cmp     esi, edx
.text:0040F39E                 jbe     loc_40F45B
.text:0040F3A4
.text:0040F3A4 loc_40F3A4:                             ; CODE XREF: sub_40C4F0+2F65↓j
.text:0040F3A4                 cmp     edx, 10000h
.text:0040F3AA                 mov     ebp, 0Fh
.text:0040F3AF                 jz      loc_40C906
.text:0040F3B5                 mov     esi, [esp+97Ch+arg_C]
.text:0040F3BC                 lea     ecx, [edx+edx]
.text:0040F3BF                 cmp     ecx, 10000h
.text:0040F3C5                 mov     [esi+4], ecx
.text:0040F3C8                 jbe     short loc_40F3D1
.text:0040F3CA                 mov     dword ptr [esi+4], 10000h
.text:0040F3D1
.text:0040F3D1 loc_40F3D1:                             ; CODE XREF: sub_40C4F0+2ED8↑j
.text:0040F3D1                 mov     eax, [esp+97Ch+arg_C]
.text:0040F3D8                 mov     ebp, 0Ch
.text:0040F3DD                 mov     esi, [eax+4]
.text:0040F3E0                 mov     [esp+97Ch+Size], edi ; Block
.text:0040F3E3                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040F3E7                 call    realloc
.text:0040F3EC                 mov     edi, [esp+97Ch+arg_C]
.text:0040F3F3                 test    eax, eax
.text:0040F3F5                 mov     [edi], eax
.text:0040F3F7                 jz      loc_40C906
.text:0040F3FD                 cmp     ebx, eax
.text:0040F3FF                 jz      short loc_40F435
.text:0040F401                 sub     eax, ebx
.text:0040F403                 mov     ebx, [esp+97Ch+var_908]
.text:0040F407                 add     [esp+97Ch+var_950], eax
.text:0040F40B                 add     [esp+97Ch+var_904], eax
.text:0040F40F                 test    ebx, ebx
.text:0040F411                 jz      short loc_40F417
.text:0040F413                 add     [esp+97Ch+var_908], eax
.text:0040F417
.text:0040F417 loc_40F417:                             ; CODE XREF: sub_40C4F0+2F21↑j
.text:0040F417                 mov     edx, [esp+97Ch+var_900]
.text:0040F41B                 test    edx, edx
.text:0040F41D                 jz      short loc_40F423
.text:0040F41F                 add     [esp+97Ch+var_900], eax
.text:0040F423
.text:0040F423 loc_40F423:                             ; CODE XREF: sub_40C4F0+2F2D↑j
.text:0040F423                 mov     ebp, [esp+97Ch+var_8FC]
.text:0040F42A                 test    ebp, ebp
.text:0040F42C                 jz      short loc_40F435
.text:0040F42E                 add     [esp+97Ch+var_8FC], eax
.text:0040F435
.text:0040F435 loc_40F435:                             ; CODE XREF: sub_40C4F0+2F0F↑j
.text:0040F435                                         ; sub_40C4F0+2F3C↑j
.text:0040F435                 mov     esi, [esp+97Ch+arg_C]
.text:0040F43C                 mov     eax, [esp+97Ch+arg_C]
.text:0040F443                 mov     ecx, [esp+97Ch+var_950]
.text:0040F447                 mov     edi, [esi]
.text:0040F449                 mov     edx, [eax+4]
.text:0040F44C                 sub     ecx, edi
.text:0040F44E                 add     ecx, 3
.text:0040F451                 mov     ebx, edi
.text:0040F453                 cmp     ecx, edx
.text:0040F455                 ja      loc_40F3A4
.text:0040F45B
.text:0040F45B loc_40F45B:                             ; CODE XREF: sub_40C4F0+2EAE↑j
.text:0040F45B                 mov     [esp+97Ch+Size], 0Dh
.text:0040F462                 mov     ebx, [esp+97Ch+var_950]
.text:0040F466                 mov     ebp, [esp+97Ch+var_900]
.text:0040F46A                 mov     edi, [esp+97Ch+var_900]
.text:0040F46E                 mov     edx, ebx
.text:0040F470                 sub     edx, ebp
.text:0040F472                 mov     [esp+97Ch+var_970], ebx
.text:0040F476                 add     ebx, 3
.text:0040F479                 mov     [esp+97Ch+var_974], edx
.text:0040F47D                 mov     [esp+97Ch+var_978], edi
.text:0040F481                 call    sub_409310
.text:0040F486                 mov     [esp+97Ch+var_950], ebx
.text:0040F48A                 jmp     loc_40D238
.text:0040F48F ; ---------------------------------------------------------------------------
.text:0040F48F
.text:0040F48F loc_40F48F:                             ; CODE XREF: sub_40C4F0+2E88↑j
.text:0040F48F                 cmp     [esp+97Ch+var_938], 1
.text:0040F494                 mov     [esp+97Ch+var_93C], 14h
.text:0040F49C                 jg      loc_40F55A
.text:0040F4A2                 mov     [esp+97Ch+var_93C], 0Ah
.text:0040F4AA                 mov     ecx, [esp+97Ch+arg_C]
.text:0040F4B1                 mov     eax, [esp+97Ch+var_950]
.text:0040F4B5                 mov     edi, [ecx]
.text:0040F4B7                 mov     edx, [ecx+4]
.text:0040F4BA                 sub     eax, edi
.text:0040F4BC                 mov     ebx, edi
.text:0040F4BE                 add     eax, 0Ah
.text:0040F4C1
.text:0040F4C1 loc_40F4C1:                             ; CODE XREF: sub_40C4F0+308B↓j
.text:0040F4C1                 cmp     eax, edx
.text:0040F4C3                 jbe     loc_40F580
.text:0040F4C9                 cmp     edx, 10000h
.text:0040F4CF                 mov     ebp, 0Fh
.text:0040F4D4                 jz      loc_40C906
.text:0040F4DA                 mov     esi, [esp+97Ch+arg_C]
.text:0040F4E1                 lea     ebp, [edx+edx]
.text:0040F4E4                 cmp     ebp, 10000h
.text:0040F4EA                 mov     [esi+4], ebp
.text:0040F4ED                 jbe     short loc_40F4F6
.text:0040F4EF                 mov     dword ptr [esi+4], 10000h
.text:0040F4F6
.text:0040F4F6 loc_40F4F6:                             ; CODE XREF: sub_40C4F0+2FFD↑j
.text:0040F4F6                 mov     eax, [esp+97Ch+arg_C]
.text:0040F4FD                 mov     ebp, 0Ch
.text:0040F502                 mov     esi, [eax+4]
.text:0040F505                 mov     [esp+97Ch+Size], edi ; Block
.text:0040F508                 mov     [esp+97Ch+var_978], esi ; Size
.text:0040F50C                 call    realloc
.text:0040F511                 mov     edi, [esp+97Ch+arg_C]
.text:0040F518                 test    eax, eax
.text:0040F51A                 mov     [edi], eax
.text:0040F51C                 jz      loc_40C906
.text:0040F522                 cmp     ebx, eax
.text:0040F524                 jz      short loc_40F55A
.text:0040F526                 mov     edx, [esp+97Ch+var_908]
.text:0040F52A                 sub     eax, ebx
.text:0040F52C                 add     [esp+97Ch+var_950], eax
.text:0040F530                 add     [esp+97Ch+var_904], eax
.text:0040F534                 test    edx, edx
.text:0040F536                 jz      short loc_40F53C
.text:0040F538                 add     [esp+97Ch+var_908], eax
.text:0040F53C
.text:0040F53C loc_40F53C:                             ; CODE XREF: sub_40C4F0+3046↑j
.text:0040F53C                 mov     ebx, [esp+97Ch+var_900]
.text:0040F540                 test    ebx, ebx
.text:0040F542                 jz      short loc_40F548
.text:0040F544                 add     [esp+97Ch+var_900], eax
.text:0040F548
.text:0040F548 loc_40F548:                             ; CODE XREF: sub_40C4F0+3052↑j
.text:0040F548                 mov     ecx, [esp+97Ch+var_8FC]
.text:0040F54F                 test    ecx, ecx
.text:0040F551                 jz      short loc_40F55A
.text:0040F553                 add     [esp+97Ch+var_8FC], eax
.text:0040F55A
.text:0040F55A loc_40F55A:                             ; CODE XREF: sub_40C4F0+2FAC↑j
.text:0040F55A                                         ; sub_40C4F0+3034↑j ...
.text:0040F55A                 mov     eax, [esp+97Ch+arg_C]
.text:0040F561                 mov     ebp, [esp+97Ch+arg_C]
.text:0040F568                 mov     esi, [esp+97Ch+var_93C]
.text:0040F56C                 mov     edi, [eax]
.text:0040F56E                 mov     eax, [esp+97Ch+var_950]
.text:0040F572                 mov     edx, [ebp+4]
.text:0040F575                 mov     ebx, edi
.text:0040F577                 sub     eax, edi
.text:0040F579                 add     eax, esi
.text:0040F57B                 jmp     loc_40F4C1
.text:0040F580 ; ---------------------------------------------------------------------------
.text:0040F580
.text:0040F580 loc_40F580:                             ; CODE XREF: sub_40C4F0+2FD3↑j
.text:0040F580                 mov     edi, [esp+97Ch+var_950]
.text:0040F584                 mov     edx, [esp+97Ch+var_934]
.text:0040F588                 mov     [esp+97Ch+var_96C], edi
.text:0040F58C                 add     edi, 5
.text:0040F58F                 cmp     [esp+97Ch+var_938], 1
.text:0040F594                 mov     [esp+97Ch+var_970], edx
.text:0040F598                 jle     loc_40F662
.text:0040F59E                 mov     ebx, [esp+97Ch+var_900]
.text:0040F5A2                 mov     eax, edi
.text:0040F5A4                 sub     eax, ebx
.text:0040F5A6                 add     eax, 2
.text:0040F5A9
.text:0040F5A9 loc_40F5A9:                             ; CODE XREF: sub_40C4F0+317D↓j
.text:0040F5A9                 mov     [esp+97Ch+var_974], eax
.text:0040F5AD                 mov     esi, [esp+97Ch+var_900]
.text:0040F5B1                 mov     [esp+97Ch+Size], 15h
.text:0040F5B8                 mov     [esp+97Ch+var_978], esi
.text:0040F5BC                 call    sub_409350
.text:0040F5C1                 mov     [esp+97Ch+var_950], edi
.text:0040F5C5                 mov     ebp, [esp+97Ch+var_934]
.text:0040F5C9                 mov     [esp+97Ch+var_96C], edi
.text:0040F5CD                 mov     edi, [esp+97Ch+var_900]
.text:0040F5D1                 mov     [esp+97Ch+var_970], ebp
.text:0040F5D5                 mov     [esp+97Ch+var_974], 5
.text:0040F5DD                 mov     [esp+97Ch+var_978], edi
.text:0040F5E1                 mov     [esp+97Ch+Size], 17h
.text:0040F5E8                 call    sub_409350
.text:0040F5ED                 add     [esp+97Ch+var_950], 5
.text:0040F5F2                 cmp     [esp+97Ch+var_938], 1
.text:0040F5F7                 jle     loc_40D238
.text:0040F5FD                 mov     [esp+97Ch+Size], 16h
.text:0040F604                 mov     edx, [esp+97Ch+var_900]
.text:0040F608                 mov     esi, [esp+97Ch+var_950]
.text:0040F60C                 mov     edi, [esp+97Ch+var_938]
.text:0040F610                 mov     ebp, [esp+97Ch+var_950]
.text:0040F614                 sub     edx, esi
.text:0040F616                 add     edx, 2
.text:0040F619                 dec     edi
.text:0040F61A                 mov     [esp+97Ch+var_974], edx
.text:0040F61E                 mov     [esp+97Ch+var_978], ebp
.text:0040F622                 add     ebp, 5
.text:0040F625                 mov     ebx, ebp
.text:0040F627                 mov     [esp+97Ch+var_970], edi
.text:0040F62B                 call    sub_4092E0
.text:0040F630                 mov     [esp+97Ch+var_96C], ebp
.text:0040F634                 mov     ecx, [esp+97Ch+var_900]
.text:0040F638                 add     ebp, 5
.text:0040F63B                 mov     [esp+97Ch+var_970], edi
.text:0040F63F                 mov     eax, [esp+97Ch+var_900]
.text:0040F643                 mov     [esp+97Ch+Size], 17h
.text:0040F64A                 sub     ebx, ecx
.text:0040F64C                 mov     [esp+97Ch+var_974], ebx
.text:0040F650                 mov     [esp+97Ch+var_978], eax
.text:0040F654                 call    sub_409350
.text:0040F659                 mov     [esp+97Ch+var_950], ebp
.text:0040F65D                 jmp     loc_40D238
.text:0040F662 ; ---------------------------------------------------------------------------
.text:0040F662
.text:0040F662 loc_40F662:                             ; CODE XREF: sub_40C4F0+30A8↑j
.text:0040F662                 mov     ecx, [esp+97Ch+var_900]
.text:0040F666                 mov     eax, edi
.text:0040F668                 sub     eax, ecx
.text:0040F66A                 sub     eax, 3
.text:0040F66D                 jmp     loc_40F5A9
.text:0040F672 ; ---------------------------------------------------------------------------
.text:0040F672
.text:0040F672 loc_40F672:                             ; CODE XREF: sub_40C4F0+2E7C↑j
.text:0040F672                 mov     esi, [esp+97Ch+Block]
.text:0040F679                 mov     ebp, 0Ah
.text:0040F67E                 jmp     loc_40E5F3
.text:0040F683 ; ---------------------------------------------------------------------------
.text:0040F683
.text:0040F683 loc_40F683:                             ; CODE XREF: sub_40C4F0+2E6E↑j
.text:0040F683                 mov     ebx, [esp+97Ch+arg_8]
.text:0040F68A                 and     ebx, 200020h
.text:0040F690                 cmp     ebx, 20h ; ' '
.text:0040F693                 jz      loc_40DACE
.text:0040F699                 test    byte ptr [esp+97Ch+arg_8], 10h
.text:0040F6A1                 jz      loc_40F2B6
.text:0040F6A7                 mov     ecx, [esp+97Ch+var_950]
.text:0040F6AB                 mov     [esp+97Ch+var_900], ecx
.text:0040F6AF                 jmp     loc_40F364
.text:0040F6B4 ; ---------------------------------------------------------------------------
.text:0040F6B4
.text:0040F6B4 loc_40F6B4:                             ; CODE XREF: sub_40C4F0+2D7E↑j
.text:0040F6B4                 mov     edi, [esp+97Ch+var_8D0]
.text:0040F6BB                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040F6C2                 jz      loc_40F74C
.text:0040F6C8
.text:0040F6C8 loc_40F6C8:                             ; CODE XREF: sub_40C4F0+324E↓j
.text:0040F6C8                 movzx   eax, byte ptr [edi]
.text:0040F6CB                 inc     edi
.text:0040F6CC                 mov     ebx, [esp+97Ch+var_8F8]
.text:0040F6D3                 mov     [esp+97Ch+var_8D0], edi
.text:0040F6DA                 test    ebx, ebx
.text:0040F6DC                 mov     [esp+97Ch+var_8EC], al
.text:0040F6E3                 jz      short loc_40F6FA
.text:0040F6E5                 mov     ebp, [esp+97Ch+var_8F8]
.text:0040F6EC                 movzx   esi, al
.text:0040F6EF                 movzx   ebx, byte ptr [esi+ebp]
.text:0040F6F3                 mov     [esp+97Ch+var_8EC], bl
.text:0040F6FA
.text:0040F6FA loc_40F6FA:                             ; CODE XREF: sub_40C4F0+31F3↑j
.text:0040F6FA                 movzx   edx, [esp+97Ch+var_8EC]
.text:0040F702                 sub     dl, 30h ; '0'
.text:0040F705                 cmp     dl, 9
.text:0040F708                 ja      short loc_40F740
.text:0040F70A                 cmp     [esp+97Ch+var_938], 7FFFh
.text:0040F712                 jg      short loc_40F737
.text:0040F714                 movzx   ebp, [esp+97Ch+var_8EC]
.text:0040F71C                 mov     edx, [esp+97Ch+var_938]
.text:0040F720                 shr     edx, 1Fh
.text:0040F723                 dec     edx
.text:0040F724                 and     [esp+97Ch+var_938], edx
.text:0040F728                 mov     eax, [esp+97Ch+var_938]
.text:0040F72C                 lea     esi, [eax+eax*4]
.text:0040F72F                 lea     ebx, [ebp+esi*2-30h]
.text:0040F733                 mov     [esp+97Ch+var_938], ebx
.text:0040F737
.text:0040F737 loc_40F737:                             ; CODE XREF: sub_40C4F0+3222↑j
.text:0040F737                 cmp     edi, [esp+97Ch+var_8F4]
.text:0040F73E                 jnz     short loc_40F6C8
.text:0040F740
.text:0040F740 loc_40F740:                             ; CODE XREF: sub_40C4F0+3218↑j
.text:0040F740                 mov     edi, [esp+97Ch+var_938]
.text:0040F744                 test    edi, edi
.text:0040F746                 jns     loc_40F27C
.text:0040F74C
.text:0040F74C loc_40F74C:                             ; CODE XREF: sub_40C4F0+31D2↑j
.text:0040F74C                 mov     [esp+97Ch+var_938], 7FFFh
.text:0040F754                 jmp     loc_40F27C
.text:0040F759 ; ---------------------------------------------------------------------------
.text:0040F759
.text:0040F759 loc_40F759:                             ; CODE XREF: sub_40C4F0+22AD↑j
.text:0040F759                                         ; DATA XREF: sub_40C4F0:jpt_40E79D↑o
.text:0040F759                 mov     edi, [esp+97Ch+arg_8] ; jumptable 0040E79D case 124
.text:0040F760                 and     edi, 0FFFF8400h
.text:0040F766                 test    di, di
.text:0040F769                 jz      loc_40CD66
.text:0040F76F                 jmp     def_40E79D      ; jumptable 0040E79D default case, cases 42,44-48,58,59,61,64,65,67-86,88-95,97,99-118,120-122
.text:0040F774 ; ---------------------------------------------------------------------------
.text:0040F774
.text:0040F774 loc_40F774:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040F774                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040F774                 mov     edx, [esp+97Ch+arg_8] ; jumptable 0040C65F case 123
.text:0040F77B                 and     edx, 1200h
.text:0040F781                 cmp     edx, 1200h
.text:0040F787                 jnz     def_40C65F      ; jumptable 0040C65F default case, cases 11-35,37-39,44,45,47-62,64-90,93,95-122
.text:0040F78D                 jmp     loc_40F1C8
.text:0040F792 ; ---------------------------------------------------------------------------
.text:0040F792
.text:0040F792 loc_40F792:                             ; CODE XREF: sub_40C4F0+16F↑j
.text:0040F792                                         ; DATA XREF: sub_40C4F0:jpt_40C65F↑o
.text:0040F792                 mov     esi, [esp+97Ch+arg_8] ; jumptable 0040C65F case 124
.text:0040F799                 and     esi, 0FFFF8000h
.text:0040F79F                 test    si, si
.text:0040F7A2                 jmp     loc_40CD60
.text:0040F7A7 ; ---------------------------------------------------------------------------
.text:0040F7A7
.text:0040F7A7 loc_40F7A7:                             ; CODE XREF: sub_40C4F0+F9↑j
.text:0040F7A7                 mov     edi, [esp+97Ch+Block]
.text:0040F7AE                 mov     ebp, 0Ch
.text:0040F7B3                 jmp     loc_40CA90
.text:0040F7B8 ; ---------------------------------------------------------------------------
.text:0040F7B8
.text:0040F7B8 loc_40F7B8:                             ; CODE XREF: sub_40C4F0+D6↑j
.text:0040F7B8                 mov     [esp+97Ch+Size], 20h ; ' ' ; Size
.text:0040F7BF                 call    malloc
.text:0040F7C4                 mov     ecx, [esp+97Ch+arg_C]
.text:0040F7CB                 mov     [ecx], eax
.text:0040F7CD                 jmp     loc_40C5DE
.text:0040F7D2 ; ---------------------------------------------------------------------------
.text:0040F7D2
.text:0040F7D2 loc_40F7D2:                             ; CODE XREF: sub_40C4F0+CC↑j
.text:0040F7D2                 mov     ebp, [esp+97Ch+arg_C]
.text:0040F7D9                 mov     edi, [ebp+0]
.text:0040F7DC                 jmp     loc_40C5FD
.text:0040F7E1 ; ---------------------------------------------------------------------------
.text:0040F7E1
.text:0040F7E1 loc_40F7E1:                             ; CODE XREF: sub_40C4F0+BA↑j
.text:0040F7E1                 mov     [esp+97Ch+var_974], 100h ; Size
.text:0040F7E9                 xor     ebx, ebx
.text:0040F7EB                 mov     [esp+97Ch+var_978], 0 ; Val
.text:0040F7F3                 mov     [esp+97Ch+Size], offset byte_41B420 ; void *
.text:0040F7FA                 call    memset
.text:0040F7FF                 nop
.text:0040F800
.text:0040F800 loc_40F800:                             ; CODE XREF: sub_40C4F0+333D↓j
.text:0040F800                 mov     esi, ds:__mb_cur_max
.text:0040F806                 cmp     dword ptr [esi], 1
.text:0040F809                 jz      short loc_40F846
.text:0040F80B                 mov     [esp+97Ch+var_978], 107h ; Type
.text:0040F813                 mov     [esp+97Ch+Size], ebx ; C
.text:0040F816                 call    _isctype
.text:0040F81B
.text:0040F81B loc_40F81B:                             ; CODE XREF: sub_40C4F0+3368↓j
.text:0040F81B                 test    eax, eax
.text:0040F81D                 jz      short loc_40F826
.text:0040F81F                 mov     ds:byte_41B420[ebx], 1
.text:0040F826
.text:0040F826 loc_40F826:                             ; CODE XREF: sub_40C4F0+332D↑j
.text:0040F826                 inc     ebx
.text:0040F827                 cmp     ebx, 0FFh
.text:0040F82D                 jle     short loc_40F800
.text:0040F82F                 mov     ds:byte_41B47F, 1
.text:0040F836                 mov     ebx, 1
.text:0040F83B                 mov     ds:dword_41B410, ebx
.text:0040F841                 jmp     loc_40C5B0
.text:0040F846 ; ---------------------------------------------------------------------------
.text:0040F846
.text:0040F846 loc_40F846:                             ; CODE XREF: sub_40C4F0+3319↑j
.text:0040F846                 mov     ebp, ds:_pctype
.text:0040F84C                 mov     edi, [ebp+0]
.text:0040F84F                 movzx   eax, word ptr [edi+ebx*2]
.text:0040F853                 and     eax, 107h
.text:0040F858                 jmp     short loc_40F81B
.text:0040F858 sub_40C4F0      endp
.text:0040F858
.text:0040F858 ; ---------------------------------------------------------------------------
.text:0040F85A                 align 10h
.text:0040F860
.text:0040F860 ; =============== S U B R O U T I N E =======================================
.text:0040F860
.text:0040F860
.text:0040F860 sub_40F860      proc near               ; CODE XREF: sub_40C0A0+105↑p
.text:0040F860                                         ; .text:0040C2E6↑p ...
.text:0040F860
.text:0040F860 var_4C          = dword ptr -4Ch
.text:0040F860 var_48          = dword ptr -48h
.text:0040F860 var_44          = dword ptr -44h
.text:0040F860 var_40          = dword ptr -40h
.text:0040F860 var_3C          = dword ptr -3Ch
.text:0040F860 var_38          = dword ptr -38h
.text:0040F860 var_34          = dword ptr -34h
.text:0040F860 var_30          = dword ptr -30h
.text:0040F860 var_20          = dword ptr -20h
.text:0040F860 var_1C          = dword ptr -1Ch
.text:0040F860 var_18          = dword ptr -18h
.text:0040F860 var_14          = dword ptr -14h
.text:0040F860 arg_0           = dword ptr  4
.text:0040F860 arg_4           = dword ptr  8
.text:0040F860 arg_8           = dword ptr  0Ch
.text:0040F860 arg_C           = dword ptr  10h
.text:0040F860 arg_10          = dword ptr  14h
.text:0040F860 arg_14          = dword ptr  18h
.text:0040F860 arg_18          = dword ptr  1Ch
.text:0040F860 arg_1C          = dword ptr  20h
.text:0040F860 arg_20          = dword ptr  24h
.text:0040F860
.text:0040F860                 push    ebp
.text:0040F861                 push    edi
.text:0040F862                 push    esi
.text:0040F863                 push    ebx
.text:0040F864                 sub     esp, 3Ch
.text:0040F867                 mov     edi, [esp+4Ch+arg_0]
.text:0040F86B                 mov     ebx, [esp+4Ch+arg_14]
.text:0040F86F                 mov     ecx, [esp+4Ch+arg_10]
.text:0040F873                 mov     edx, [edi+14h]
.text:0040F876                 mov     esi, [esp+4Ch+arg_18]
.text:0040F87A                 mov     ebp, [edi+10h]
.text:0040F87D                 mov     [esp+4Ch+var_14], edx
.text:0040F881                 mov     edx, [esp+4Ch+arg_8]
.text:0040F885                 lea     eax, [esi+ebx]
.text:0040F888                 add     edx, ecx
.text:0040F88A                 test    ebx, ebx
.text:0040F88C                 mov     [esp+4Ch+var_18], edx
.text:0040F890                 js      loc_40FA30
.text:0040F896                 cmp     ebx, edx
.text:0040F898                 jg      loc_40FA30
.text:0040F89E                 test    eax, eax
.text:0040F8A0                 js      loc_40FAF1
.text:0040F8A6                 cmp     eax, [esp+4Ch+var_18]
.text:0040F8AA                 jle     short loc_40F8B2
.text:0040F8AC                 mov     esi, [esp+4Ch+var_18]
.text:0040F8B0                 sub     esi, ebx
.text:0040F8B2
.text:0040F8B2 loc_40F8B2:                             ; CODE XREF: sub_40F860+4A↑j
.text:0040F8B2                                         ; sub_40F860+295↓j
.text:0040F8B2                 mov     eax, [edi+8]
.text:0040F8B5                 test    eax, eax
.text:0040F8B7                 jz      short loc_40F8E0
.text:0040F8B9                 test    esi, esi
.text:0040F8BB                 jle     short loc_40F8E0
.text:0040F8BD                 mov     ecx, [edi]
.text:0040F8BF                 movzx   eax, byte ptr [ecx]
.text:0040F8C2                 cmp     al, 0Bh
.text:0040F8C4                 jz      loc_40FADA
.text:0040F8CA                 cmp     al, 9
.text:0040F8CC                 jz      loc_40FAD0
.text:0040F8D2                 lea     esi, [esi+0]
.text:0040F8D9                 lea     edi, [edi+0]
.text:0040F8E0
.text:0040F8E0 loc_40F8E0:                             ; CODE XREF: sub_40F860+57↑j
.text:0040F8E0                                         ; sub_40F860+5B↑j ...
.text:0040F8E0                 test    ebp, ebp
.text:0040F8E2                 jz      loc_40F9A0
.text:0040F8E8                 test    byte ptr [edi+1Ch], 8
.text:0040F8EC                 jz      loc_40FAB5
.text:0040F8F2
.text:0040F8F2 loc_40F8F2:                             ; CODE XREF: sub_40F860+1AF↓j
.text:0040F8F2                                         ; sub_40F860+1B6↓j ...
.text:0040F8F2                 test    ebp, ebp
.text:0040F8F4                 jz      loc_40F9A0
.text:0040F8FA                 cmp     ebx, [esp+4Ch+var_18]
.text:0040F8FE                 jge     loc_40F9A0
.text:0040F904                 test    byte ptr [edi+1Ch], 1
.text:0040F908                 jnz     loc_40F9A0
.text:0040F90E                 test    esi, esi
.text:0040F910                 jle     loc_40FA64
.text:0040F916                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040F91A                 mov     [esp+4Ch+var_20], 0
.text:0040F922                 mov     [esp+4Ch+var_1C], esi
.text:0040F926                 jge     loc_40FA52
.text:0040F92C                 lea     edx, [esi+ebx]
.text:0040F92F                 cmp     edx, [esp+4Ch+arg_8]
.text:0040F933                 jl      short loc_40F943
.text:0040F935                 mov     ecx, [esp+4Ch+arg_8]
.text:0040F939                 mov     edx, esi
.text:0040F93B                 sub     ecx, ebx
.text:0040F93D                 sub     edx, ecx
.text:0040F93F                 mov     [esp+4Ch+var_20], edx
.text:0040F943
.text:0040F943 loc_40F943:                             ; CODE XREF: sub_40F860+D3↑j
.text:0040F943                 mov     edx, [esp+4Ch+arg_4]
.text:0040F947                 add     edx, ebx
.text:0040F949
.text:0040F949 loc_40F949:                             ; CODE XREF: sub_40F860+1FF↓j
.text:0040F949                 mov     ecx, [esp+4Ch+var_14]
.text:0040F94D                 test    ecx, ecx
.text:0040F94F                 jz      loc_40FA37
.text:0040F955                 cmp     esi, [esp+4Ch+var_20]
.text:0040F959                 jle     short loc_40F989
.text:0040F95B                 movzx   eax, byte ptr [edx]
.text:0040F95E                 inc     edx
.text:0040F95F                 mov     ecx, [esp+4Ch+var_14]
.text:0040F963                 movzx   ecx, byte ptr [eax+ecx]
.text:0040F967                 cmp     byte ptr [ecx+ebp], 0
.text:0040F96B                 jnz     short loc_40F989
.text:0040F96D                 lea     esi, [esi+0]
.text:0040F970
.text:0040F970 loc_40F970:                             ; CODE XREF: sub_40F860+127↓j
.text:0040F970                 dec     esi
.text:0040F971                 cmp     esi, [esp+4Ch+var_20]
.text:0040F975                 jle     short loc_40F989
.text:0040F977                 movzx   eax, byte ptr [edx]
.text:0040F97A                 inc     edx
.text:0040F97B                 mov     ecx, [esp+4Ch+var_14]
.text:0040F97F                 movzx   eax, byte ptr [eax+ecx]
.text:0040F983                 cmp     byte ptr [eax+ebp], 0
.text:0040F987                 jz      short loc_40F970
.text:0040F989
.text:0040F989 loc_40F989:                             ; CODE XREF: sub_40F860+F9↑j
.text:0040F989                                         ; sub_40F860+10B↑j ...
.text:0040F989                 sub     [esp+4Ch+var_1C], esi
.text:0040F98D                 mov     edx, [esp+4Ch+var_1C]
.text:0040F991                 add     ebx, edx
.text:0040F993                 lea     esi, [esi+0]
.text:0040F999                 lea     edi, [edi+0]
.text:0040F9A0
.text:0040F9A0 loc_40F9A0:                             ; CODE XREF: sub_40F860+82↑j
.text:0040F9A0                                         ; sub_40F860+94↑j ...
.text:0040F9A0                 test    esi, esi
.text:0040F9A2                 js      short loc_40F9AA
.text:0040F9A4                 cmp     ebx, [esp+4Ch+var_18]
.text:0040F9A8                 jz      short loc_40FA20
.text:0040F9AA
.text:0040F9AA loc_40F9AA:                             ; CODE XREF: sub_40F860+142↑j
.text:0040F9AA                                         ; sub_40F860+1C2↓j ...
.text:0040F9AA                 mov     [esp+4Ch+var_38], ebx
.text:0040F9AE                 mov     edx, [esp+4Ch+arg_20]
.text:0040F9B2                 mov     ecx, [esp+4Ch+arg_1C]
.text:0040F9B6                 mov     [esp+4Ch+var_4C], edi
.text:0040F9B9                 mov     eax, [esp+4Ch+arg_10]
.text:0040F9BD                 mov     [esp+4Ch+var_30], edx
.text:0040F9C1                 mov     edx, [esp+4Ch+arg_C]
.text:0040F9C5                 mov     [esp+4Ch+var_34], ecx
.text:0040F9C9                 mov     ecx, [esp+4Ch+arg_8]
.text:0040F9CD                 mov     [esp+4Ch+var_3C], eax
.text:0040F9D1                 mov     eax, [esp+4Ch+arg_4]
.text:0040F9D5                 mov     [esp+4Ch+var_40], edx
.text:0040F9D9                 mov     [esp+4Ch+var_44], ecx
.text:0040F9DD                 mov     [esp+4Ch+var_48], eax
.text:0040F9E1                 call    sub_4095E0
.text:0040F9E6                 test    eax, eax
.text:0040F9E8                 mov     edx, ebx
.text:0040F9EA                 js      short loc_40F9F6
.text:0040F9EC
.text:0040F9EC loc_40F9EC:                             ; CODE XREF: sub_40F860+19E↓j
.text:0040F9EC                                         ; sub_40F860+1A7↓j ...
.text:0040F9EC                 add     esp, 3Ch
.text:0040F9EF                 mov     eax, edx
.text:0040F9F1                 pop     ebx
.text:0040F9F2                 pop     esi
.text:0040F9F3                 pop     edi
.text:0040F9F4                 pop     ebp
.text:0040F9F5                 retn
.text:0040F9F6 ; ---------------------------------------------------------------------------
.text:0040F9F6
.text:0040F9F6 loc_40F9F6:                             ; CODE XREF: sub_40F860+18A↑j
.text:0040F9F6                 cmp     eax, 0FFFFFFFEh
.text:0040F9F9                 mov     edx, 0FFFFFFFEh
.text:0040F9FE                 jz      short loc_40F9EC
.text:0040FA00
.text:0040FA00 loc_40FA00:                             ; CODE XREF: sub_40F860+241↓j
.text:0040FA00                 test    esi, esi
.text:0040FA02                 mov     edx, 0FFFFFFFFh
.text:0040FA07                 jz      short loc_40F9EC
.text:0040FA09                 test    esi, esi
.text:0040FA0B                 jle     short loc_40FA14
.text:0040FA0D                 dec     esi
.text:0040FA0E                 inc     ebx
.text:0040FA0F                 jmp     loc_40F8F2
.text:0040FA14 ; ---------------------------------------------------------------------------
.text:0040FA14
.text:0040FA14 loc_40FA14:                             ; CODE XREF: sub_40F860+1AB↑j
.text:0040FA14                 inc     esi
.text:0040FA15                 dec     ebx
.text:0040FA16                 jmp     loc_40F8F2
.text:0040FA16 ; ---------------------------------------------------------------------------
.text:0040FA1B                 align 10h
.text:0040FA20
.text:0040FA20 loc_40FA20:                             ; CODE XREF: sub_40F860+148↑j
.text:0040FA20                 test    ebp, ebp
.text:0040FA22                 jz      short loc_40F9AA
.text:0040FA24                 test    byte ptr [edi+1Ch], 1
.text:0040FA28                 jnz     short loc_40F9AA
.text:0040FA2A                 lea     esi, [esi+0]
.text:0040FA30
.text:0040FA30 loc_40FA30:                             ; CODE XREF: sub_40F860+30↑j
.text:0040FA30                                         ; sub_40F860+38↑j
.text:0040FA30                 mov     edx, 0FFFFFFFFh
.text:0040FA35                 jmp     short loc_40F9EC
.text:0040FA37 ; ---------------------------------------------------------------------------
.text:0040FA37
.text:0040FA37 loc_40FA37:                             ; CODE XREF: sub_40F860+EF↑j
.text:0040FA37                                         ; sub_40F860+1F0↓j
.text:0040FA37                 cmp     esi, [esp+4Ch+var_20]
.text:0040FA3B                 jle     loc_40F989
.text:0040FA41                 movzx   ecx, byte ptr [edx]
.text:0040FA44                 inc     edx
.text:0040FA45                 cmp     byte ptr [ecx+ebp], 0
.text:0040FA49                 jnz     loc_40F989
.text:0040FA4F                 dec     esi
.text:0040FA50                 jmp     short loc_40FA37
.text:0040FA52 ; ---------------------------------------------------------------------------
.text:0040FA52
.text:0040FA52 loc_40FA52:                             ; CODE XREF: sub_40F860+C6↑j
.text:0040FA52                 mov     ecx, [esp+4Ch+arg_C]
.text:0040FA56                 mov     eax, [esp+4Ch+arg_8]
.text:0040FA5A                 sub     ecx, eax
.text:0040FA5C                 lea     edx, [ebx+ecx]
.text:0040FA5F                 jmp     loc_40F949
.text:0040FA64 ; ---------------------------------------------------------------------------
.text:0040FA64
.text:0040FA64 loc_40FA64:                             ; CODE XREF: sub_40F860+B0↑j
.text:0040FA64                 mov     ecx, [esp+4Ch+arg_8]
.text:0040FA68                 test    ecx, ecx
.text:0040FA6A                 jz      short loc_40FA72
.text:0040FA6C                 cmp     ebx, [esp+4Ch+arg_8]
.text:0040FA70                 jl      short loc_40FAAB
.text:0040FA72
.text:0040FA72 loc_40FA72:                             ; CODE XREF: sub_40F860+20A↑j
.text:0040FA72                 mov     edx, [esp+4Ch+arg_8]
.text:0040FA76                 mov     eax, ebx
.text:0040FA78                 mov     ecx, [esp+4Ch+arg_C]
.text:0040FA7C                 sub     eax, edx
.text:0040FA7E                 movzx   eax, byte ptr [eax+ecx]
.text:0040FA82
.text:0040FA82 loc_40FA82:                             ; CODE XREF: sub_40F860+253↓j
.text:0040FA82                 mov     ecx, [esp+4Ch+var_14]
.text:0040FA86                 test    ecx, ecx
.text:0040FA88                 jz      short loc_40FAA6
.text:0040FA8A                 mov     edx, [esp+4Ch+var_14]
.text:0040FA8E                 movzx   ecx, al
.text:0040FA91                 movzx   eax, byte ptr [ecx+edx]
.text:0040FA95
.text:0040FA95 loc_40FA95:                             ; CODE XREF: sub_40F860+249↓j
.text:0040FA95                 lea     edx, [eax+ebp]
.text:0040FA98                 cmp     byte ptr [edx], 0
.text:0040FA9B                 jnz     loc_40F9A0
.text:0040FAA1                 jmp     loc_40FA00
.text:0040FAA6 ; ---------------------------------------------------------------------------
.text:0040FAA6
.text:0040FAA6 loc_40FAA6:                             ; CODE XREF: sub_40F860+228↑j
.text:0040FAA6                 movzx   eax, al
.text:0040FAA9                 jmp     short loc_40FA95
.text:0040FAAB ; ---------------------------------------------------------------------------
.text:0040FAAB
.text:0040FAAB loc_40FAAB:                             ; CODE XREF: sub_40F860+210↑j
.text:0040FAAB                 mov     edx, [esp+4Ch+arg_4]
.text:0040FAAF                 movzx   eax, byte ptr [ebx+edx]
.text:0040FAB3                 jmp     short loc_40FA82
.text:0040FAB5 ; ---------------------------------------------------------------------------
.text:0040FAB5
.text:0040FAB5 loc_40FAB5:                             ; CODE XREF: sub_40F860+8C↑j
.text:0040FAB5                 mov     [esp+4Ch+var_4C], edi
.text:0040FAB8                 call    sub_40BF10
.text:0040FABD                 cmp     eax, 0FFFFFFFEh
.text:0040FAC0                 mov     edx, 0FFFFFFFEh
.text:0040FAC5                 jnz     loc_40F8F2
.text:0040FACB                 jmp     loc_40F9EC
.text:0040FAD0 ; ---------------------------------------------------------------------------
.text:0040FAD0
.text:0040FAD0 loc_40FAD0:                             ; CODE XREF: sub_40F860+6C↑j
.text:0040FAD0                 test    byte ptr [edi+1Ch], 80h
.text:0040FAD4                 jnz     loc_40F8E0
.text:0040FADA
.text:0040FADA loc_40FADA:                             ; CODE XREF: sub_40F860+64↑j
.text:0040FADA                 test    ebx, ebx
.text:0040FADC                 mov     edx, 0FFFFFFFFh
.text:0040FAE1                 jg      loc_40F9EC
.text:0040FAE7                 mov     esi, 1
.text:0040FAEC                 jmp     loc_40F8E0
.text:0040FAF1 ; ---------------------------------------------------------------------------
.text:0040FAF1
.text:0040FAF1 loc_40FAF1:                             ; CODE XREF: sub_40F860+40↑j
.text:0040FAF1                 mov     esi, ebx
.text:0040FAF3                 neg     esi
.text:0040FAF5                 jmp     loc_40F8B2
.text:0040FAF5 sub_40F860      endp
.text:0040FAF5
.text:0040FAF5 ; ---------------------------------------------------------------------------
.text:0040FAFA                 align 10h
.text:0040FB00
.text:0040FB00 ; =============== S U B R O U T I N E =======================================
.text:0040FB00
.text:0040FB00
.text:0040FB00 sub_40FB00      proc near               ; CODE XREF: sub_40BF10↑j
.text:0040FB00
.text:0040FB00 Size            = dword ptr -6Ch
.text:0040FB00 Val             = dword ptr -68h
.text:0040FB00 var_64          = dword ptr -64h
.text:0040FB00 var_4D          = byte ptr -4Dh
.text:0040FB00 var_4C          = byte ptr -4Ch
.text:0040FB00 var_30          = dword ptr -30h
.text:0040FB00 Src             = dword ptr -2Ch
.text:0040FB00 var_28          = dword ptr -28h
.text:0040FB00 var_24          = dword ptr -24h
.text:0040FB00 arg_0           = dword ptr  4
.text:0040FB00
.text:0040FB00                 push    ebp
.text:0040FB01                 push    edi
.text:0040FB02                 push    esi
.text:0040FB03                 push    ebx
.text:0040FB04                 sub     esp, 5Ch
.text:0040FB07                 mov     ebp, [esp+6Ch+arg_0]
.text:0040FB0B                 mov     [esp+6Ch+var_4C], 1
.text:0040FB10                 mov     [esp+6Ch+var_4D], 0
.text:0040FB15                 mov     ecx, [ebp+0]
.text:0040FB18                 mov     eax, [ebp+8]
.text:0040FB1B                 mov     esi, [ebp+10h]
.text:0040FB1E                 mov     edi, ecx
.text:0040FB20                 add     eax, ecx
.text:0040FB22                 mov     [esp+6Ch+var_30], eax
.text:0040FB26                 mov     [esp+6Ch+Size], 14h ; Size
.text:0040FB2D                 call    malloc
.text:0040FB32                 mov     [esp+6Ch+Src], eax
.text:0040FB36                 test    eax, eax
.text:0040FB38                 mov     edx, 0FFFFFFFEh
.text:0040FB3D                 jz      loc_40FC22
.text:0040FB43                 mov     [esp+6Ch+var_28], 5
.text:0040FB4B                 mov     [esp+6Ch+var_24], 0
.text:0040FB53                 mov     [esp+6Ch+var_64], 100h ; Size
.text:0040FB5B                 mov     [esp+6Ch+Val], 0 ; Val
.text:0040FB63                 mov     [esp+6Ch+Size], esi ; void *
.text:0040FB66                 call    memset
.text:0040FB6B                 movzx   edx, byte ptr [ebp+1Ch]
.text:0040FB6F                 or      dl, 8
.text:0040FB72                 and     dl, 0FEh
.text:0040FB75                 mov     [ebp+1Ch], dl
.text:0040FB78
.text:0040FB78 loc_40FB78:                             ; CODE XREF: sub_40FB00+9A↓j
.text:0040FB78                                         ; sub_40FB00+13D↓j ...
.text:0040FB78                 cmp     edi, [esp+6Ch+var_30] ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FB7C                 jz      loc_40FE80
.text:0040FB82                 movzx   eax, byte ptr [edi]
.text:0040FB85                 cmp     al, 1
.text:0040FB87                 jz      loc_40FE80
.text:0040FB8D                 movzx   eax, al
.text:0040FB90                 inc     edi
.text:0040FB91                 cmp     eax, 1Dh        ; switch 30 cases
.text:0040FB94                 ja      def_40FB9A      ; jumptable 0040FB9A default case, case 1
.text:0040FB9A                 jmp     ds:jpt_40FB9A[eax*4] ; switch jump
.text:0040FB9A ; ---------------------------------------------------------------------------
.text:0040FBA1                 align 4
.text:0040FBA4 jpt_40FB9A      dd offset loc_40FB78    ; DATA XREF: sub_40FB00+9A↑r
.text:0040FBA4                 dd offset def_40FB9A    ; jump table for switch statement
.text:0040FBA4                 dd offset loc_40FC2C
.text:0040FBA4                 dd offset loc_40FC42
.text:0040FBA4                 dd offset loc_40FC70
.text:0040FBA4                 dd offset loc_40FCA8
.text:0040FBA4                 dd offset loc_40FD0C
.text:0040FBA4                 dd offset loc_40FD0C
.text:0040FBA4                 dd offset loc_40FC1C
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FD14
.text:0040FBA4                 dd offset loc_40FD14
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FDAE
.text:0040FBA4                 dd offset loc_40FDD5
.text:0040FBA4                 dd offset loc_40FE33
.text:0040FBA4                 dd offset loc_40FE3B
.text:0040FBA4                 dd offset loc_40FE5D
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FBA4                 dd offset loc_40FB78
.text:0040FC1C ; ---------------------------------------------------------------------------
.text:0040FC1C
.text:0040FC1C loc_40FC1C:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FC1C                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FC1C                 or      byte ptr [ebp+1Ch], 1 ; jumptable 0040FB9A case 8
.text:0040FC20
.text:0040FC20 loc_40FC20:                             ; CODE XREF: sub_40FB00+16E↓j
.text:0040FC20                                         ; sub_40FB00+3C8↓j
.text:0040FC20                 xor     edx, edx
.text:0040FC22
.text:0040FC22 loc_40FC22:                             ; CODE XREF: sub_40FB00+3D↑j
.text:0040FC22                                         ; sub_40FB00+2A3↓j
.text:0040FC22                 add     esp, 5Ch
.text:0040FC25                 mov     eax, edx
.text:0040FC27                 pop     ebx
.text:0040FC28                 pop     esi
.text:0040FC29                 pop     edi
.text:0040FC2A                 pop     ebp
.text:0040FC2B                 retn
.text:0040FC2C ; ---------------------------------------------------------------------------
.text:0040FC2C
.text:0040FC2C loc_40FC2C:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FC2C                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FC2C                 movzx   ecx, byte ptr [edi+1] ; jumptable 0040FB9A case 2
.text:0040FC30                 mov     byte ptr [ecx+esi], 1
.text:0040FC34
.text:0040FC34 loc_40FC34:                             ; CODE XREF: sub_40FB00+166↓j
.text:0040FC34                                         ; sub_40FB00+16C↓j ...
.text:0040FC34                 mov     [esp+6Ch+var_4C], 0
.text:0040FC39                 mov     edi, [esp+6Ch+var_30]
.text:0040FC3D                 jmp     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FC42 ; ---------------------------------------------------------------------------
.text:0040FC42
.text:0040FC42 loc_40FC42:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FC42                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FC42                 movsx   eax, byte ptr [esi+0Ah] ; jumptable 0040FB9A case 3
.text:0040FC46                 xor     ebx, ebx
.text:0040FC48                 nop
.text:0040FC49                 lea     esi, [esi+0]
.text:0040FC50
.text:0040FC50 loc_40FC50:                             ; CODE XREF: sub_40FB00+15B↓j
.text:0040FC50                 mov     byte ptr [ebx+esi], 1
.text:0040FC54                 inc     ebx
.text:0040FC55                 cmp     ebx, 0FFh
.text:0040FC5B                 jle     short loc_40FC50
.text:0040FC5D                 test    byte ptr [ebp+0Ch], 40h
.text:0040FC61                 jnz     short loc_40FC68
.text:0040FC63                 mov     [esi+0Ah], al
.text:0040FC66                 jmp     short loc_40FC34
.text:0040FC68 ; ---------------------------------------------------------------------------
.text:0040FC68
.text:0040FC68 loc_40FC68:                             ; CODE XREF: sub_40FB00+161↑j
.text:0040FC68                 test    byte ptr [ebp+1Ch], 1
.text:0040FC6C                 jz      short loc_40FC34
.text:0040FC6E                 jmp     short loc_40FC20
.text:0040FC70 ; ---------------------------------------------------------------------------
.text:0040FC70
.text:0040FC70 loc_40FC70:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FC70                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FC70                 movzx   edx, byte ptr [edi] ; jumptable 0040FB9A case 4
.text:0040FC73                 inc     edi
.text:0040FC74                 lea     ebx, ds:0FFFFFFFFh[edx*8]
.text:0040FC7B                 test    ebx, ebx
.text:0040FC7D                 js      short loc_40FC34
.text:0040FC7F
.text:0040FC7F loc_40FC7F:                             ; CODE XREF: sub_40FB00+19F↓j
.text:0040FC7F                 test    ebx, ebx
.text:0040FC81                 mov     eax, ebx
.text:0040FC83                 js      short loc_40FCA3
.text:0040FC85
.text:0040FC85 loc_40FC85:                             ; CODE XREF: sub_40FB00+1A6↓j
.text:0040FC85                 sar     eax, 3
.text:0040FC88                 mov     ecx, ebx
.text:0040FC8A                 movzx   edx, byte ptr [eax+edi]
.text:0040FC8E                 shl     eax, 3
.text:0040FC91                 sub     ecx, eax
.text:0040FC93                 sar     edx, cl
.text:0040FC95                 test    dl, 1
.text:0040FC98                 jz      short loc_40FC9E
.text:0040FC9A                 mov     byte ptr [ebx+esi], 1
.text:0040FC9E
.text:0040FC9E loc_40FC9E:                             ; CODE XREF: sub_40FB00+198↑j
.text:0040FC9E                 dec     ebx
.text:0040FC9F                 jns     short loc_40FC7F
.text:0040FCA1                 jmp     short loc_40FC34
.text:0040FCA3 ; ---------------------------------------------------------------------------
.text:0040FCA3
.text:0040FCA3 loc_40FCA3:                             ; CODE XREF: sub_40FB00+183↑j
.text:0040FCA3                 lea     eax, [ebx+7]
.text:0040FCA6                 jmp     short loc_40FC85
.text:0040FCA8 ; ---------------------------------------------------------------------------
.text:0040FCA8
.text:0040FCA8 loc_40FCA8:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FCA8                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FCA8                 movzx   edx, byte ptr [edi] ; jumptable 0040FB9A case 5
.text:0040FCAB                 movzx   ecx, dl
.text:0040FCAE                 lea     ebx, ds:0[ecx*8]
.text:0040FCB5                 cmp     ebx, 0FFh
.text:0040FCBB                 jg      short loc_40FCCD
.text:0040FCBD
.text:0040FCBD loc_40FCBD:                             ; CODE XREF: sub_40FB00+1C8↓j
.text:0040FCBD                 mov     byte ptr [ebx+esi], 1
.text:0040FCC1                 inc     ebx
.text:0040FCC2                 cmp     ebx, 0FFh
.text:0040FCC8                 jle     short loc_40FCBD
.text:0040FCCA                 movzx   edx, byte ptr [edi]
.text:0040FCCD
.text:0040FCCD loc_40FCCD:                             ; CODE XREF: sub_40FB00+1BB↑j
.text:0040FCCD                 movzx   ecx, dl
.text:0040FCD0                 inc     edi
.text:0040FCD1                 lea     ebx, ds:0FFFFFFFFh[ecx*8]
.text:0040FCD8                 test    ebx, ebx
.text:0040FCDA                 js      loc_40FC34
.text:0040FCE0
.text:0040FCE0 loc_40FCE0:                             ; CODE XREF: sub_40FB00+200↓j
.text:0040FCE0                 test    ebx, ebx
.text:0040FCE2                 mov     eax, ebx
.text:0040FCE4                 js      short loc_40FD07
.text:0040FCE6
.text:0040FCE6 loc_40FCE6:                             ; CODE XREF: sub_40FB00+20A↓j
.text:0040FCE6                 sar     eax, 3
.text:0040FCE9                 mov     ecx, ebx
.text:0040FCEB                 movzx   edx, byte ptr [eax+edi]
.text:0040FCEF                 shl     eax, 3
.text:0040FCF2                 sub     ecx, eax
.text:0040FCF4                 sar     edx, cl
.text:0040FCF6                 test    dl, 1
.text:0040FCF9                 jnz     short loc_40FCFF
.text:0040FCFB                 mov     byte ptr [ebx+esi], 1
.text:0040FCFF
.text:0040FCFF loc_40FCFF:                             ; CODE XREF: sub_40FB00+1F9↑j
.text:0040FCFF                 dec     ebx
.text:0040FD00                 jns     short loc_40FCE0
.text:0040FD02                 jmp     loc_40FC34
.text:0040FD07 ; ---------------------------------------------------------------------------
.text:0040FD07
.text:0040FD07 loc_40FD07:                             ; CODE XREF: sub_40FB00+1E4↑j
.text:0040FD07                 lea     eax, [ebx+7]
.text:0040FD0A                 jmp     short loc_40FCE6
.text:0040FD0C ; ---------------------------------------------------------------------------
.text:0040FD0C
.text:0040FD0C loc_40FD0C:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FD0C                                         ; sub_40FB00+251↓j
.text:0040FD0C                                         ; DATA XREF: ...
.text:0040FD0C                 add     edi, 2          ; jumptable 0040FB9A cases 6,7
.text:0040FD0F                 jmp     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FD14 ; ---------------------------------------------------------------------------
.text:0040FD14
.text:0040FD14 loc_40FD14:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FD14                                         ; sub_40FB00+2D0↓j
.text:0040FD14                                         ; DATA XREF: ...
.text:0040FD14                 movsx   ecx, byte ptr [edi+1] ; jumptable 0040FB9A cases 15,16
.text:0040FD18                 movzx   edx, byte ptr [edi]
.text:0040FD1B                 add     edi, 2
.text:0040FD1E                 shl     ecx, 8
.text:0040FD21                 add     edx, ecx
.text:0040FD23                 lea     ebx, [edx+edi]
.text:0040FD26                 cmp     ebx, [esp+6Ch+var_30]
.text:0040FD2A                 jnb     short loc_40FDA8
.text:0040FD2C                 mov     ecx, [esp+6Ch+var_24]
.text:0040FD30                 cmp     ecx, [esp+6Ch+var_28]
.text:0040FD34                 jz      short loc_40FD53
.text:0040FD36
.text:0040FD36 loc_40FD36:                             ; CODE XREF: sub_40FB00+29C↓j
.text:0040FD36                 mov     edx, [esp+6Ch+Src]
.text:0040FD3A                 mov     [edx+ecx*4], ebx
.text:0040FD3D                 inc     [esp+6Ch+var_24]
.text:0040FD41
.text:0040FD41 loc_40FD41:                             ; CODE XREF: sub_40FB00+2AC↓j
.text:0040FD41                 cmp     [esp+6Ch+var_4D], 0
.text:0040FD46                 jz      loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FD4C                 mov     [esp+6Ch+var_4D], 0
.text:0040FD51                 jmp     short loc_40FD0C ; jumptable 0040FB9A cases 6,7
.text:0040FD53 ; ---------------------------------------------------------------------------
.text:0040FD53
.text:0040FD53 loc_40FD53:                             ; CODE XREF: sub_40FB00+234↑j
.text:0040FD53                 mov     eax, dword_41A060
.text:0040FD58                 lea     edx, [eax+eax*8]
.text:0040FD5B                 lea     edx, [eax+edx*2]
.text:0040FD5E                 cmp     ecx, edx
.text:0040FD60                 ja      short loc_40FD9E
.text:0040FD62                 lea     edx, ds:0[ecx*8]
.text:0040FD69                 mov     [esp+6Ch+Size], edx ; Size
.text:0040FD6C                 call    malloc
.text:0040FD71                 mov     [esp+6Ch+Size], eax ; void *
.text:0040FD74                 mov     ecx, [esp+6Ch+var_28]
.text:0040FD78                 shl     ecx, 2
.text:0040FD7B                 mov     [esp+6Ch+var_64], ecx ; Size
.text:0040FD7F                 mov     ecx, [esp+6Ch+Src]
.text:0040FD83                 mov     [esp+6Ch+Val], ecx ; Src
.text:0040FD87                 call    memcpy
.text:0040FD8C                 mov     [esp+6Ch+Src], eax
.text:0040FD90                 test    eax, eax
.text:0040FD92                 jz      short loc_40FD9E
.text:0040FD94                 shl     [esp+6Ch+var_28], 1
.text:0040FD98                 mov     ecx, [esp+6Ch+var_24]
.text:0040FD9C                 jmp     short loc_40FD36
.text:0040FD9E ; ---------------------------------------------------------------------------
.text:0040FD9E
.text:0040FD9E loc_40FD9E:                             ; CODE XREF: sub_40FB00+260↑j
.text:0040FD9E                                         ; sub_40FB00+292↑j
.text:0040FD9E                 mov     edx, 0FFFFFFFEh
.text:0040FDA3                 jmp     loc_40FC22
.text:0040FDA8 ; ---------------------------------------------------------------------------
.text:0040FDA8
.text:0040FDA8 loc_40FDA8:                             ; CODE XREF: sub_40FB00+22A↑j
.text:0040FDA8                 or      byte ptr [ebp+1Ch], 1
.text:0040FDAC                 jmp     short loc_40FD41
.text:0040FDAE ; ---------------------------------------------------------------------------
.text:0040FDAE
.text:0040FDAE loc_40FDAE:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FDAE                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FDAE                 add     edi, 2          ; jumptable 0040FB9A case 21
.text:0040FDB1                 movsx   ecx, byte ptr [edi+1]
.text:0040FDB5                 movzx   ebx, byte ptr [edi]
.text:0040FDB8                 add     edi, 2
.text:0040FDBB                 shl     ecx, 8
.text:0040FDBE                 add     ebx, ecx
.text:0040FDC0                 test    ebx, ebx
.text:0040FDC2                 jnz     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FDC8                 mov     [esp+6Ch+var_4D], 1
.text:0040FDCD                 sub     edi, 4
.text:0040FDD0                 jmp     loc_40FD14      ; jumptable 0040FB9A cases 15,16
.text:0040FDD5 ; ---------------------------------------------------------------------------
.text:0040FDD5
.text:0040FDD5 loc_40FDD5:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FDD5                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FDD5                 movsx   ebx, byte ptr [edi+1] ; jumptable 0040FB9A cases 13,14,17-19,22
.text:0040FDD9                 movzx   ecx, byte ptr [edi]
.text:0040FDDC                 shl     ebx, 8
.text:0040FDDF                 add     ecx, ebx
.text:0040FDE1                 test    ecx, ecx
.text:0040FDE3                 lea     edi, [ecx+edi+2]
.text:0040FDE7                 jg      loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FDED                 movzx   eax, byte ptr [edi]
.text:0040FDF0                 cmp     al, 0Fh
.text:0040FDF2                 jz      short loc_40FDFC
.text:0040FDF4                 cmp     al, 15h
.text:0040FDF6                 jnz     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FDFC
.text:0040FDFC loc_40FDFC:                             ; CODE XREF: sub_40FB00+2F2↑j
.text:0040FDFC                 inc     edi
.text:0040FDFD                 movsx   ecx, byte ptr [edi+1]
.text:0040FE01                 movzx   edx, byte ptr [edi]
.text:0040FE04                 shl     ecx, 8
.text:0040FE07                 add     edx, ecx
.text:0040FE09                 lea     edi, [edx+edi+2]
.text:0040FE0D                 mov     edx, [esp+6Ch+var_24]
.text:0040FE11                 test    edx, edx
.text:0040FE13                 jz      loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FE19                 mov     ebx, [esp+6Ch+Src]
.text:0040FE1D                 cmp     [ebx+edx*4-4], edi
.text:0040FE21                 jnz     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FE27                 lea     eax, [edx-1]
.text:0040FE2A                 mov     [esp+6Ch+var_24], eax
.text:0040FE2E                 jmp     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FE33 ; ---------------------------------------------------------------------------
.text:0040FE33
.text:0040FE33 loc_40FE33:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FE33                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FE33                 add     edi, 4          ; jumptable 0040FB9A case 23
.text:0040FE36                 jmp     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FE3B ; ---------------------------------------------------------------------------
.text:0040FE3B
.text:0040FE3B loc_40FE3B:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FE3B                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FE3B                 xor     ebx, ebx        ; jumptable 0040FB9A case 24
.text:0040FE3D
.text:0040FE3D loc_40FE3D:                             ; CODE XREF: sub_40FB00+350↓j
.text:0040FE3D                 movzx   edi, bl
.text:0040FE40                 cmp     ds:byte_41B420[edi], 1
.text:0040FE47                 jz      short loc_40FE57
.text:0040FE49
.text:0040FE49 loc_40FE49:                             ; CODE XREF: sub_40FB00+35B↓j
.text:0040FE49                 inc     ebx
.text:0040FE4A                 cmp     ebx, 0FFh
.text:0040FE50                 jle     short loc_40FE3D
.text:0040FE52                 jmp     loc_40FC34
.text:0040FE57 ; ---------------------------------------------------------------------------
.text:0040FE57
.text:0040FE57 loc_40FE57:                             ; CODE XREF: sub_40FB00+347↑j
.text:0040FE57                 mov     byte ptr [ebx+esi], 1
.text:0040FE5B                 jmp     short loc_40FE49
.text:0040FE5D ; ---------------------------------------------------------------------------
.text:0040FE5D
.text:0040FE5D loc_40FE5D:                             ; CODE XREF: sub_40FB00+9A↑j
.text:0040FE5D                                         ; DATA XREF: sub_40FB00:jpt_40FB9A↑o
.text:0040FE5D                 xor     ebx, ebx        ; jumptable 0040FB9A case 25
.text:0040FE5F
.text:0040FE5F loc_40FE5F:                             ; CODE XREF: sub_40FB00+376↓j
.text:0040FE5F                 movzx   edx, bl
.text:0040FE62                 cmp     ds:byte_41B420[edx], 1
.text:0040FE69                 jz      short loc_40FE6F
.text:0040FE6B                 mov     byte ptr [ebx+esi], 1
.text:0040FE6F
.text:0040FE6F loc_40FE6F:                             ; CODE XREF: sub_40FB00+369↑j
.text:0040FE6F                 inc     ebx
.text:0040FE70                 cmp     ebx, 0FFh
.text:0040FE76                 jle     short loc_40FE5F
.text:0040FE78                 jmp     loc_40FC34
.text:0040FE78 ; ---------------------------------------------------------------------------
.text:0040FE7D                 align 10h
.text:0040FE80
.text:0040FE80 loc_40FE80:                             ; CODE XREF: sub_40FB00+7C↑j
.text:0040FE80                                         ; sub_40FB00+87↑j
.text:0040FE80                 mov     ecx, [esp+6Ch+var_24]
.text:0040FE84                 test    ecx, ecx
.text:0040FE86                 jz      short loc_40FEB3
.text:0040FE88                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040FE8C                 dec     ecx
.text:0040FE8D                 movzx   eax, [esp+6Ch+var_4C]
.text:0040FE92                 or      eax, ebx
.text:0040FE94                 and     al, 1
.text:0040FE96                 and     bl, 0FEh
.text:0040FE99                 or      bl, al
.text:0040FE9B                 mov     [ebp+1Ch], bl
.text:0040FE9E                 mov     ebx, [esp+6Ch+Src]
.text:0040FEA2                 mov     [esp+6Ch+var_4C], 1
.text:0040FEA7                 mov     [esp+6Ch+var_24], ecx
.text:0040FEAB                 mov     edi, [ebx+ecx*4]
.text:0040FEAE                 jmp     loc_40FB78      ; jumptable 0040FB9A cases 0,9-12,20,26-29
.text:0040FEB3 ; ---------------------------------------------------------------------------
.text:0040FEB3
.text:0040FEB3 loc_40FEB3:                             ; CODE XREF: sub_40FB00+386↑j
.text:0040FEB3                 movzx   ebx, byte ptr [ebp+1Ch]
.text:0040FEB7                 movzx   eax, [esp+6Ch+var_4C]
.text:0040FEBC                 or      eax, ebx
.text:0040FEBE                 and     al, 1
.text:0040FEC0                 and     bl, 0FEh
.text:0040FEC3                 or      bl, al
.text:0040FEC5                 mov     [ebp+1Ch], bl
.text:0040FEC8                 jmp     loc_40FC20
.text:0040FECD ; ---------------------------------------------------------------------------
.text:0040FECD
.text:0040FECD def_40FB9A:                             ; CODE XREF: sub_40FB00+94↑j
.text:0040FECD                                         ; sub_40FB00+9A↑j
.text:0040FECD                                         ; DATA XREF: ...
.text:0040FECD                 call    abort           ; jumptable 0040FB9A default case, case 1
.text:0040FECD sub_40FB00      endp
.text:0040FECD
.text:0040FECD ; ---------------------------------------------------------------------------
.text:0040FED2                 align 10h
.text:0040FEE0                 jmp     ds:libintl_bindtextdomain
.text:0040FEE0 ; ---------------------------------------------------------------------------
.text:0040FEE6                 align 10h
.text:0040FEF0                 jmp     ds:libintl_textdomain
.text:0040FEF0 ; ---------------------------------------------------------------------------
.text:0040FEF6                 align 10h
.text:0040FF00                 jmp     ds:libintl_gettext
.text:0040FF00 ; ---------------------------------------------------------------------------
.text:0040FF06                 align 10h
.text:0040FF10 ; const char aS_0[]
.text:0040FF10 aS_0            db ': %s',0             ; DATA XREF: sub_40FF30+B8↓o
.text:0040FF10                                         ; sub_410034+122↓o
.text:0040FF15 aUnknownSystemE db 'Unknown system error',0
.text:0040FF15                                         ; DATA XREF: sub_40FF30:loc_40FFFD↓o
.text:0040FF15                                         ; sub_410034:loc_41016E↓o
.text:0040FF2A ; const char aS_1[]
.text:0040FF2A aS_1            db '%s: ',0             ; DATA XREF: sub_40FF30:loc_410004↓o
.text:0040FF2F                 align 10h
.text:0040FF30
.text:0040FF30 ; =============== S U B R O U T I N E =======================================
.text:0040FF30
.text:0040FF30
.text:0040FF30 ; int __cdecl sub_40FF30(int Code, int ErrorMessage, char *, char)
.text:0040FF30 sub_40FF30      proc near               ; CODE XREF: sub_4019A0+360↑p
.text:0040FF30                                         ; sub_4019A0+41B↑p ...
.text:0040FF30
.text:0040FF30 Stream          = dword ptr -1Ch
.text:0040FF30 Format          = dword ptr -18h
.text:0040FF30 ArgList         = dword ptr -14h
.text:0040FF30 Code            = dword ptr  4
.text:0040FF30 ErrorMessage    = dword ptr  8
.text:0040FF30 arg_8           = dword ptr  0Ch
.text:0040FF30 arg_C           = byte ptr  10h
.text:0040FF30
.text:0040FF30                 push    esi
.text:0040FF31                 push    ebx
.text:0040FF32                 sub     esp, 14h
.text:0040FF35                 mov     edx, ds:_iob
.text:0040FF3B                 mov     esi, [esp+1Ch+Code]
.text:0040FF3F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:0040FF43                 add     edx, 20h ; ' '
.text:0040FF46                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040FF49                 call    fflush
.text:0040FF4E                 mov     eax, ds:dword_41B8E0
.text:0040FF53                 test    eax, eax
.text:0040FF55                 jz      loc_410004
.text:0040FF5B                 call    eax ; dword_41B8E0
.text:0040FF5D
.text:0040FF5D loc_40FF5D:                             ; CODE XREF: sub_40FF30+F7↓j
.text:0040FF5D                 lea     edx, [esp+1Ch+arg_C]
.text:0040FF61                 mov     ecx, [esp+1Ch+arg_8]
.text:0040FF65                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:0040FF69                 mov     edx, ds:_iob
.text:0040FF6F                 mov     [esp+1Ch+Format], ecx ; Format
.text:0040FF73                 add     edx, 40h ; '@'
.text:0040FF76                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040FF79                 call    vfprintf
.text:0040FF7E                 inc     ds:dword_41B8F0
.text:0040FF84                 test    ebx, ebx
.text:0040FF86                 jnz     short loc_40FFD2
.text:0040FF88
.text:0040FF88 loc_40FF88:                             ; CODE XREF: sub_40FF30+CB↓j
.text:0040FF88                 mov     edx, ds:_iob
.text:0040FF8E                 lea     ecx, [edx+40h]
.text:0040FF91                 mov     ebx, [ecx+4]
.text:0040FF94                 dec     ebx
.text:0040FF95                 test    ebx, ebx
.text:0040FF97                 mov     [ecx+4], ebx
.text:0040FF9A                 js      short loc_40FFC0
.text:0040FF9C                 mov     ecx, [edx+40h]
.text:0040FF9F                 mov     byte ptr [ecx], 0Ah
.text:0040FFA2                 inc     dword ptr [edx+40h]
.text:0040FFA5
.text:0040FFA5 loc_40FFA5:                             ; CODE XREF: sub_40FF30+A0↓j
.text:0040FFA5                 mov     edx, ds:_iob
.text:0040FFAB                 add     edx, 40h ; '@'
.text:0040FFAE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:0040FFB1                 call    fflush
.text:0040FFB6                 test    esi, esi
.text:0040FFB8                 jnz     short loc_41002C
.text:0040FFBA                 add     esp, 14h
.text:0040FFBD                 pop     ebx
.text:0040FFBE                 pop     esi
.text:0040FFBF                 retn
.text:0040FFC0 ; ---------------------------------------------------------------------------
.text:0040FFC0
.text:0040FFC0 loc_40FFC0:                             ; CODE XREF: sub_40FF30+6A↑j
.text:0040FFC0                 mov     [esp+1Ch+Format], ecx ; File
.text:0040FFC4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:0040FFCB                 call    _flsbuf
.text:0040FFD0                 jmp     short loc_40FFA5
.text:0040FFD2 ; ---------------------------------------------------------------------------
.text:0040FFD2
.text:0040FFD2 loc_40FFD2:                             ; CODE XREF: sub_40FF30+56↑j
.text:0040FFD2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:0040FFD5                 call    strerror
.text:0040FFDA                 test    eax, eax
.text:0040FFDC                 jz      short loc_40FFFD
.text:0040FFDE
.text:0040FFDE loc_40FFDE:                             ; CODE XREF: sub_40FF30+D2↓j
.text:0040FFDE                 mov     [esp+1Ch+ArgList], eax
.text:0040FFE2                 mov     ebx, ds:_iob
.text:0040FFE8                 mov     [esp+1Ch+Format], offset aS_0 ; ": %s"
.text:0040FFF0                 add     ebx, 40h ; '@'
.text:0040FFF3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:0040FFF6                 call    fprintf
.text:0040FFFB                 jmp     short loc_40FF88
.text:0040FFFD ; ---------------------------------------------------------------------------
.text:0040FFFD
.text:0040FFFD loc_40FFFD:                             ; CODE XREF: sub_40FF30+AC↑j
.text:0040FFFD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00410002                 jmp     short loc_40FFDE
.text:00410004 ; ---------------------------------------------------------------------------
.text:00410004
.text:00410004 loc_410004:                             ; CODE XREF: sub_40FF30+25↑j
.text:00410004                 mov     [esp+1Ch+Format], offset aS_1 ; "%s: "
.text:0041000C                 mov     edx, ds:_iob
.text:00410012                 mov     ecx, ds:dword_41B8A0
.text:00410018                 add     edx, 40h ; '@'
.text:0041001B                 mov     [esp+1Ch+ArgList], ecx
.text:0041001F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00410022                 call    fprintf
.text:00410027                 jmp     loc_40FF5D
.text:0041002C ; ---------------------------------------------------------------------------
.text:0041002C
.text:0041002C loc_41002C:                             ; CODE XREF: sub_40FF30+88↑j
.text:0041002C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0041002F                 call    exit
.text:0041002F sub_40FF30      endp
.text:0041002F
.text:00410034
.text:00410034 ; =============== S U B R O U T I N E =======================================
.text:00410034
.text:00410034
.text:00410034 ; int __cdecl sub_410034(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00410034 sub_410034      proc near               ; DATA XREF: sub_410034+77↓o
.text:00410034
.text:00410034 Stream          = dword ptr -28h
.text:00410034 Format          = dword ptr -24h
.text:00410034 ArgList         = dword ptr -20h
.text:00410034 var_1C          = dword ptr -1Ch
.text:00410034 Code            = dword ptr  8
.text:00410034 ErrorMessage    = dword ptr  0Ch
.text:00410034 Str2            = dword ptr  10h
.text:00410034 arg_10          = dword ptr  14h
.text:00410034 arg_14          = dword ptr  18h
.text:00410034 arg_18          = byte ptr  1Ch
.text:00410034
.text:00410034                 and     eax, 64253A73h
.text:00410039                 cmp     ah, [eax]
.text:0041003B
.text:0041003B loc_41003B:                             ; DATA XREF: sub_410034:loc_410175↓o
.text:0041003B                 add     ds:55003A73h, ah
.text:00410041                 push    edi
.text:00410042                 push    esi
.text:00410043                 push    ebx
.text:00410044                 sub     esp, 1Ch
.text:00410047                 mov     edx, ds:dword_41B920
.text:0041004D                 mov     ebp, [esp+28h+Code]
.text:00410051                 mov     edi, [esp+28h+ErrorMessage]
.text:00410055                 test    edx, edx
.text:00410057                 mov     ebx, [esp+28h+Str2]
.text:0041005B                 mov     esi, [esp+28h+arg_10]
.text:0041005F                 jz      short loc_410079
.text:00410061                 cmp     ds:dword_41B540, esi
.text:00410067                 jz      loc_4101A0
.text:0041006D
.text:0041006D loc_41006D:                             ; CODE XREF: sub_410034+18D↓j
.text:0041006D                 mov     ds:Str1, ebx
.text:00410073                 mov     ds:dword_41B540, esi
.text:00410079
.text:00410079 loc_410079:                             ; CODE XREF: sub_410034+2B↑j
.text:00410079                 mov     edx, ds:_iob
.text:0041007F                 add     edx, 20h ; ' '
.text:00410082                 mov     [esp+28h+Stream], edx ; Stream
.text:00410085                 call    fflush
.text:0041008A                 mov     eax, ds:dword_41B8E0
.text:0041008F                 test    eax, eax
.text:00410091                 jz      loc_410175
.text:00410097                 call    eax ; dword_41B8E0
.text:00410099
.text:00410099 loc_410099:                             ; CODE XREF: sub_410034+164↓j
.text:00410099                 test    ebx, ebx
.text:0041009B                 jz      short loc_4100BE
.text:0041009D                 mov     [esp+28h+ArgList], ebx
.text:004100A1                 mov     ebx, ds:_iob
.text:004100A7                 mov     [esp+28h+var_1C], esi
.text:004100AB                 mov     [esp+28h+Format], offset sub_410034 ; Format
.text:004100B3                 add     ebx, 40h ; '@'
.text:004100B6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004100B9                 call    fprintf
.text:004100BE
.text:004100BE loc_4100BE:                             ; CODE XREF: sub_410034+67↑j
.text:004100BE                 mov     esi, ds:_iob
.text:004100C4                 lea     edx, [esp+28h+arg_18]
.text:004100C8                 mov     ecx, [esp+28h+arg_14]
.text:004100CC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004100D0                 add     esi, 40h ; '@'
.text:004100D3                 mov     [esp+28h+Format], ecx ; Format
.text:004100D7                 mov     [esp+28h+Stream], esi ; Stream
.text:004100DA                 call    vfprintf
.text:004100DF                 inc     ds:dword_41B8F0
.text:004100E5                 test    edi, edi
.text:004100E7                 jnz     short loc_410140
.text:004100E9
.text:004100E9 loc_4100E9:                             ; CODE XREF: sub_410034+135↓j
.text:004100E9                 mov     edx, ds:_iob
.text:004100EF                 lea     ecx, [edx+40h]
.text:004100F2                 mov     ebx, [ecx+4]
.text:004100F5                 dec     ebx
.text:004100F6                 test    ebx, ebx
.text:004100F8                 mov     [ecx+4], ebx
.text:004100FB                 js      short loc_410127
.text:004100FD                 mov     esi, [edx+40h]
.text:00410100                 mov     byte ptr [esi], 0Ah
.text:00410103                 inc     dword ptr [edx+40h]
.text:00410106
.text:00410106 loc_410106:                             ; CODE XREF: sub_410034+103↓j
.text:00410106                 mov     ecx, ds:_iob
.text:0041010C                 add     ecx, 40h ; '@'
.text:0041010F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00410112                 call    fflush
.text:00410117                 test    ebp, ebp
.text:00410119                 jnz     loc_4101C6
.text:0041011F
.text:0041011F loc_41011F:                             ; CODE XREF: sub_410034+173↓j
.text:0041011F                                         ; sub_410034+187↓j
.text:0041011F                 add     esp, 1Ch
.text:00410122                 pop     ebx
.text:00410123                 pop     esi
.text:00410124                 pop     edi
.text:00410125                 pop     ebp
.text:00410126                 retn
.text:00410127 ; ---------------------------------------------------------------------------
.text:00410127
.text:00410127 loc_410127:                             ; CODE XREF: sub_410034+C7↑j
.text:00410127                 mov     [esp+28h+Format], ecx ; File
.text:0041012B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00410132                 call    _flsbuf
.text:00410137                 jmp     short loc_410106
.text:00410137 ; ---------------------------------------------------------------------------
.text:00410139                 align 10h
.text:00410140
.text:00410140 loc_410140:                             ; CODE XREF: sub_410034+B3↑j
.text:00410140                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00410143                 call    strerror
.text:00410148                 test    eax, eax
.text:0041014A                 jz      short loc_41016E
.text:0041014C
.text:0041014C loc_41014C:                             ; CODE XREF: sub_410034+13F↓j
.text:0041014C                 mov     [esp+28h+ArgList], eax
.text:00410150                 mov     edi, ds:_iob
.text:00410156                 mov     [esp+28h+Format], offset aS_0 ; ": %s"
.text:0041015E                 add     edi, 40h ; '@'
.text:00410161                 mov     [esp+28h+Stream], edi ; Stream
.text:00410164                 call    fprintf
.text:00410169                 jmp     loc_4100E9
.text:0041016E ; ---------------------------------------------------------------------------
.text:0041016E
.text:0041016E loc_41016E:                             ; CODE XREF: sub_410034+116↑j
.text:0041016E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00410173                 jmp     short loc_41014C
.text:00410175 ; ---------------------------------------------------------------------------
.text:00410175
.text:00410175 loc_410175:                             ; CODE XREF: sub_410034+5D↑j
.text:00410175                 mov     [esp+28h+Format], (offset loc_41003B+1) ; Format
.text:0041017D                 mov     ecx, ds:_iob
.text:00410183                 mov     edx, ds:dword_41B8A0
.text:00410189                 add     ecx, 40h ; '@'
.text:0041018C                 mov     [esp+28h+ArgList], edx
.text:00410190                 mov     [esp+28h+Stream], ecx ; Stream
.text:00410193                 call    fprintf
.text:00410198                 jmp     loc_410099
.text:00410198 ; ---------------------------------------------------------------------------
.text:0041019D                 align 10h
.text:004101A0
.text:004101A0 loc_4101A0:                             ; CODE XREF: sub_410034+33↑j
.text:004101A0                 mov     eax, ds:Str1
.text:004101A5                 cmp     ebx, eax
.text:004101A7                 jz      loc_41011F
.text:004101AD                 mov     [esp+28h+Format], ebx ; Str2
.text:004101B1                 mov     [esp+28h+Stream], eax ; Str1
.text:004101B4                 call    strcmp
.text:004101B9                 test    eax, eax
.text:004101BB                 jz      loc_41011F
.text:004101C1                 jmp     loc_41006D
.text:004101C6 ; ---------------------------------------------------------------------------
.text:004101C6
.text:004101C6 loc_4101C6:                             ; CODE XREF: sub_410034+E5↑j
.text:004101C6                 mov     [esp+28h+Stream], ebp ; Code
.text:004101C9                 call    exit
.text:004101C9 sub_410034      endp ; sp-analysis failed
.text:004101C9
.text:004101C9 ; ---------------------------------------------------------------------------
.text:004101CE                 align 10h
.text:004101D0
.text:004101D0 ; =============== S U B R O U T I N E =======================================
.text:004101D0
.text:004101D0
.text:004101D0 ; int __cdecl sub_4101D0(LPCSTR, int)
.text:004101D0 sub_4101D0      proc near               ; CODE XREF: sub_403900+33A↑p
.text:004101D0
.text:004101D0 lpFileName      = dword ptr -7Ch
.text:004101D0 var_78          = dword ptr -78h
.text:004101D0 var_74          = dword ptr -74h
.text:004101D0 var_6C          = dword ptr -6Ch
.text:004101D0 var_50          = dword ptr -50h
.text:004101D0 var_4C          = dword ptr -4Ch
.text:004101D0 var_4           = dword ptr -4
.text:004101D0 arg_0           = dword ptr  4
.text:004101D0 arg_4           = dword ptr  8
.text:004101D0
.text:004101D0                 sub     esp, 7Ch
.text:004101D3                 mov     ecx, ds:dword_41B580
.text:004101D9                 mov     [esp+7Ch+var_4], ebx
.text:004101DD                 mov     edx, [esp+7Ch+arg_0]
.text:004101E4                 mov     ebx, [esp+7Ch+arg_4]
.text:004101EB                 test    ecx, ecx
.text:004101ED                 jnz     short loc_410207
.text:004101EF                 mov     [esp+7Ch+lpFileName], edx ; lpFileName
.text:004101F2                 mov     [esp+7Ch+var_78], ebx ; int
.text:004101F6                 call    sub_410AB0
.text:004101FB                 mov     edx, eax
.text:004101FD
.text:004101FD loc_4101FD:                             ; CODE XREF: sub_4101D0+56↓j
.text:004101FD                                         ; sub_4101D0+82↓j ...
.text:004101FD                 mov     ebx, [esp+7Ch+var_4]
.text:00410201                 mov     eax, edx
.text:00410203                 add     esp, 7Ch
.text:00410206                 retn
.text:00410207 ; ---------------------------------------------------------------------------
.text:00410207
.text:00410207 loc_410207:                             ; CODE XREF: sub_4101D0+1D↑j
.text:00410207                 mov     [esp+7Ch+var_78], edx ; char *
.text:0041020B                 lea     ecx, [esp+7Ch+var_6C]
.text:0041020F                 mov     [esp+7Ch+var_74], ecx ; int
.text:00410213                 mov     [esp+7Ch+lpFileName], 0 ; LPCSTR
.text:0041021A                 call    sub_410600
.text:0041021F                 test    eax, eax
.text:00410221                 mov     edx, 0FFFFFFFFh
.text:00410226                 jnz     short loc_4101FD
.text:00410228                 and     ebx, 7
.text:0041022B                 jz      short loc_410250
.text:0041022D                 mov     edx, ds:dword_41B570
.text:00410233                 test    edx, edx
.text:00410235                 jz      loc_4102B9
.text:0041023B
.text:0041023B loc_41023B:                             ; CODE XREF: sub_4101D0+108↓j
.text:0041023B                 mov     eax, ds:dword_41B550
.text:00410240                 test    eax, eax
.text:00410242                 jnz     short loc_410254
.text:00410244                 test    bl, 1
.text:00410247                 jz      short loc_410250
.text:00410249                 test    byte ptr [esp+7Ch+var_6C], 49h
.text:0041024E                 jz      short loc_410254
.text:00410250
.text:00410250 loc_410250:                             ; CODE XREF: sub_4101D0+5B↑j
.text:00410250                                         ; sub_4101D0+77↑j
.text:00410250                 xor     edx, edx
.text:00410252                 jmp     short loc_4101FD
.text:00410254 ; ---------------------------------------------------------------------------
.text:00410254
.text:00410254 loc_410254:                             ; CODE XREF: sub_4101D0+72↑j
.text:00410254                                         ; sub_4101D0+7E↑j
.text:00410254                 cmp     eax, [esp+7Ch+var_50]
.text:00410258                 jz      short loc_4102A9
.text:0041025A                 mov     eax, [esp+7Ch+var_4C]
.text:0041025E                 cmp     ds:dword_41B560, eax
.text:00410264                 jz      short loc_410272
.text:00410266                 mov     [esp+7Ch+lpFileName], eax
.text:00410269                 call    sub_410A30
.text:0041026E                 test    eax, eax
.text:00410270                 jz      short loc_4102A1
.text:00410272
.text:00410272 loc_410272:                             ; CODE XREF: sub_4101D0+94↑j
.text:00410272                 mov     ecx, [esp+7Ch+var_6C]
.text:00410276                 lea     eax, ds:0[ebx*8]
.text:0041027D                 and     eax, ecx
.text:0041027F                 shr     eax, 3
.text:00410282
.text:00410282 loc_410282:                             ; CODE XREF: sub_4101D0+D7↓j
.text:00410282                                         ; sub_4101D0+E7↓j
.text:00410282                 xor     edx, edx
.text:00410284                 cmp     eax, ebx
.text:00410286                 jz      loc_4101FD
.text:0041028C                 call    _errno
.text:00410291                 mov     dword ptr [eax], 0Dh
.text:00410297                 mov     edx, 0FFFFFFFFh
.text:0041029C                 jmp     loc_4101FD
.text:004102A1 ; ---------------------------------------------------------------------------
.text:004102A1
.text:004102A1 loc_4102A1:                             ; CODE XREF: sub_4101D0+A0↑j
.text:004102A1                 mov     eax, [esp+7Ch+var_6C]
.text:004102A5                 and     eax, ebx
.text:004102A7                 jmp     short loc_410282
.text:004102A9 ; ---------------------------------------------------------------------------
.text:004102A9
.text:004102A9 loc_4102A9:                             ; CODE XREF: sub_4101D0+88↑j
.text:004102A9                 mov     edx, [esp+7Ch+var_6C]
.text:004102AD                 mov     eax, ebx
.text:004102AF                 shl     eax, 6
.text:004102B2                 and     eax, edx
.text:004102B4                 shr     eax, 6
.text:004102B7                 jmp     short loc_410282
.text:004102B9 ; ---------------------------------------------------------------------------
.text:004102B9
.text:004102B9 loc_4102B9:                             ; CODE XREF: sub_4101D0+65↑j
.text:004102B9                 mov     ecx, 1
.text:004102BE                 mov     ds:dword_41B570, ecx
.text:004102C4                 call    sub_410AA0
.text:004102C9                 mov     ds:dword_41B550, eax
.text:004102CE                 call    sub_410A90
.text:004102D3                 mov     ds:dword_41B560, eax
.text:004102D8                 jmp     loc_41023B
.text:004102D8 sub_4101D0      endp
.text:004102D8
.text:004102D8 ; ---------------------------------------------------------------------------
.text:004102DD                 align 10h
.text:004102E0
.text:004102E0 ; =============== S U B R O U T I N E =======================================
.text:004102E0
.text:004102E0
.text:004102E0 sub_4102E0      proc near               ; CODE XREF: sub_404780+23↑p
.text:004102E0                                         ; sub_4047E0+1F↑j
.text:004102E0
.text:004102E0 var_C           = dword ptr -0Ch
.text:004102E0 var_8           = dword ptr -8
.text:004102E0 var_4           = dword ptr -4
.text:004102E0 arg_0           = dword ptr  4
.text:004102E0 arg_4           = dword ptr  8
.text:004102E0
.text:004102E0                 sub     esp, 0Ch
.text:004102E3                 mov     edx, [esp+0Ch+arg_4]
.text:004102E7                 mov     [esp+0Ch+var_C], 0 ; LPCSTR
.text:004102EE                 mov     [esp+0Ch+var_4], edx ; int
.text:004102F2                 mov     edx, [esp+0Ch+arg_0]
.text:004102F6                 mov     [esp+0Ch+var_8], edx ; int
.text:004102FA                 call    sub_410310
.text:004102FF                 add     esp, 0Ch
.text:00410302                 retn
.text:00410302 sub_4102E0      endp
.text:00410302
.text:00410302 ; ---------------------------------------------------------------------------
.text:00410303                 align 10h
.text:00410310
.text:00410310 ; =============== S U B R O U T I N E =======================================
.text:00410310
.text:00410310
.text:00410310 ; int __cdecl sub_410310(LPCSTR, int, int)
.text:00410310 sub_410310      proc near               ; CODE XREF: sub_4102E0+1A↑p
.text:00410310                                         ; sub_410370+90↓p ...
.text:00410310
.text:00410310 lpFileName      = dword ptr -2Ch
.text:00410310 dwDesiredAccess = dword ptr -28h
.text:00410310 dwShareMode     = dword ptr -24h
.text:00410310 lpSecurityAttributes= dword ptr -20h
.text:00410310 dwCreationDisposition= dword ptr -1Ch
.text:00410310 dwFlagsAndAttributes= dword ptr -18h
.text:00410310 hTemplateFile   = dword ptr -14h
.text:00410310 var_10          = dword ptr -10h
.text:00410310 var_C           = dword ptr -0Ch
.text:00410310 var_8           = dword ptr -8
.text:00410310 var_4           = dword ptr -4
.text:00410310 arg_0           = dword ptr  4
.text:00410310 arg_4           = dword ptr  8
.text:00410310 arg_8           = dword ptr  0Ch
.text:00410310
.text:00410310 ; FUNCTION CHUNK AT .text:00412570 SIZE 0000013A BYTES
.text:00410310
.text:00410310                 sub     esp, 0Ch
.text:00410313                 mov     ecx, [esp+0Ch+arg_0]
.text:00410317                 mov     edx, [esp+0Ch+arg_4]
.text:0041031B                 mov     eax, [esp+0Ch+arg_8]
.text:0041031F                 test    ecx, ecx
.text:00410321                 jnz     short loc_410340
.text:00410323                 test    edx, edx
.text:00410325                 jz      short loc_410340
.text:00410327                 test    eax, eax
.text:00410329                 jz      short loc_410340
.text:0041032B                 mov     [esp+0Ch+arg_4], eax
.text:0041032F                 mov     [esp+0Ch+arg_0], edx
.text:00410333                 add     esp, 0Ch
.text:00410336                 jmp     loc_412570
.text:00410336 ; ---------------------------------------------------------------------------
.text:0041033B                 align 10h
.text:00410340
.text:00410340 loc_410340:                             ; CODE XREF: sub_410310+11↑j
.text:00410340                                         ; sub_410310+15↑j ...
.text:00410340                 call    _errno
.text:00410345                 mov     dword ptr [eax], 16h
.text:0041034B                 mov     eax, 0FFFFFFFFh
.text:00410350                 add     esp, 0Ch
.text:00410353                 retn
.text:00410353 sub_410310      endp
.text:00410353
.text:00410353 ; ---------------------------------------------------------------------------
.text:00410354                 align 10h
.text:00410360
.text:00410360 ; =============== S U B R O U T I N E =======================================
.text:00410360
.text:00410360
.text:00410360 sub_410360      proc near               ; DATA XREF: sub_410370+186↓o
.text:00410360                 sub     al, [eax]
.text:00410362                 lea     esi, [esi+0]
.text:00410369                 lea     edi, [edi+0]
.text:00410369 sub_410360      endp
.text:00410369
.text:00410370
.text:00410370 ; =============== S U B R O U T I N E =======================================
.text:00410370
.text:00410370
.text:00410370 sub_410370      proc near               ; CODE XREF: sub_403900+183↑p
.text:00410370                                         ; sub_403D80+53↑p
.text:00410370
.text:00410370 hFindFile       = dword ptr -2DCh
.text:00410370 lpFindFileData  = dword ptr -2D8h
.text:00410370 Count           = dword ptr -2D4h
.text:00410370 Destination     = byte ptr -2CCh
.text:00410370 var_1BC         = dword ptr -1BCh
.text:00410370 var_1B4         = dword ptr -1B4h
.text:00410370 var_1B0         = dword ptr -1B0h
.text:00410370 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00410370 arg_0           = dword ptr  4
.text:00410370
.text:00410370                 push    ebp
.text:00410371                 push    edi
.text:00410372                 push    esi
.text:00410373                 push    ebx
.text:00410374                 sub     esp, 2CCh
.text:0041037A                 mov     ebp, [esp+2DCh+arg_0]
.text:00410381                 test    ebp, ebp
.text:00410383                 mov     ebx, [ebp+4]
.text:00410386                 jz      loc_41053D
.text:0041038C                 mov     edx, [ebp+0]
.text:0041038F                 cmp     edx, 0FFFFFFFFh
.text:00410392                 jz      loc_4104C7
.text:00410398                 mov     [esp+2DCh+hFindFile], edx ; hFindFile
.text:0041039B                 lea     ecx, [esp+2DCh+FindFileData]
.text:004103A2                 mov     [esp+2DCh+lpFindFileData], ecx ; lpFindFileData
.text:004103A6                 call    FindNextFileA
.text:004103AB                 sub     esp, 8
.text:004103AE                 test    eax, eax
.text:004103B0                 jz      loc_4104BB
.text:004103B6
.text:004103B6 loc_4103B6:                             ; CODE XREF: sub_410370+1BC↓j
.text:004103B6                 mov     [esp+2DCh+Count], 104h ; Count
.text:004103BE                 lea     edi, [esp+2DCh+FindFileData.cFileName]
.text:004103C5                 mov     esi, [ebx]
.text:004103C7                 mov     [esp+2DCh+lpFindFileData], esi ; Source
.text:004103CB                 lea     esi, [ebx+14h]
.text:004103CE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004103D1                 call    strncpy
.text:004103D6                 mov     [esp+2DCh+Count], 104h ; Count
.text:004103DE                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:004103E2                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004103E5                 call    strncat
.text:004103EA                 mov     [esp+2DCh+lpFindFileData], esi ; int
.text:004103EE                 lea     edx, [esp+2DCh+var_1BC]
.text:004103F5                 mov     [esp+2DCh+Count], edx ; int
.text:004103F9                 mov     [esp+2DCh+hFindFile], 0 ; LPCSTR
.text:00410400                 call    sub_410310
.text:00410405                 test    eax, eax
.text:00410407                 jnz     loc_4104A9
.text:0041040D                 mov     ecx, [esp+2DCh+var_1BC]
.text:00410414                 and     ecx, 0F000h
.text:0041041A                 shr     ecx, 0Ch
.text:0041041D                 mov     [ebx+12h], cl
.text:00410420                 mov     ecx, edi
.text:00410422                 lea     esi, [esi+0]
.text:00410429                 lea     edi, [edi+0]
.text:00410430
.text:00410430 loc_410430:                             ; CODE XREF: sub_410370+D5↓j
.text:00410430                 mov     eax, [ecx]
.text:00410432                 add     ecx, 4
.text:00410435                 lea     edx, [eax-1010101h]
.text:0041043B                 not     eax
.text:0041043D                 and     edx, eax
.text:0041043F                 and     edx, 80808080h
.text:00410445                 jz      short loc_410430
.text:00410447                 test    edx, 8080h
.text:0041044D                 jnz     short loc_410455
.text:0041044F                 shr     edx, 10h
.text:00410452                 add     ecx, 2
.text:00410455
.text:00410455 loc_410455:                             ; CODE XREF: sub_410370+DD↑j
.text:00410455                 mov     word ptr [ebx+10h], 110h
.text:0041045B                 add     dl, dl
.text:0041045D                 sbb     ecx, 3
.text:00410460                 sub     ecx, edi
.text:00410462                 mov     [ebx+13h], cl
.text:00410465                 mov     edx, [esp+2DCh+var_1B4]
.text:0041046C                 mov     ecx, [esp+2DCh+var_1B0]
.text:00410473                 mov     [ebx+8], edx
.text:00410476                 mov     [ebx+0Ch], ecx
.text:00410479                 mov     [esp+2DCh+Count], 104h ; Count
.text:00410481                 mov     [esp+2DCh+lpFindFileData], edi ; Source
.text:00410485                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00410488                 call    strncpy
.text:0041048D                 inc     dword ptr [ebp+14h]
.text:00410490                 call    _errno
.text:00410495                 mov     dword ptr [eax], 0
.text:0041049B                 lea     eax, [ebx+8]
.text:0041049E
.text:0041049E loc_41049E:                             ; CODE XREF: sub_410370+149↓j
.text:0041049E                 add     esp, 2CCh
.text:004104A4                 pop     ebx
.text:004104A5                 pop     esi
.text:004104A6                 pop     edi
.text:004104A7                 pop     ebp
.text:004104A8                 retn
.text:004104A9 ; ---------------------------------------------------------------------------
.text:004104A9
.text:004104A9 loc_4104A9:                             ; CODE XREF: sub_410370+97↑j
.text:004104A9                                         ; sub_410370+153↓j ...
.text:004104A9                 call    sub_412940
.text:004104AE                 mov     ebp, eax
.text:004104B0                 call    _errno
.text:004104B5                 mov     [eax], ebp
.text:004104B7
.text:004104B7 loc_4104B7:                             ; CODE XREF: sub_410370+155↓j
.text:004104B7                                         ; sub_410370+1D8↓j
.text:004104B7                 xor     eax, eax
.text:004104B9                 jmp     short loc_41049E
.text:004104BB ; ---------------------------------------------------------------------------
.text:004104BB
.text:004104BB loc_4104BB:                             ; CODE XREF: sub_410370+40↑j
.text:004104BB                 call    GetLastError
.text:004104C0                 cmp     eax, 12h
.text:004104C3                 jnz     short loc_4104A9
.text:004104C5                 jmp     short loc_4104B7
.text:004104C7 ; ---------------------------------------------------------------------------
.text:004104C7
.text:004104C7 loc_4104C7:                             ; CODE XREF: sub_410370+22↑j
.text:004104C7                 mov     edx, [ebx]
.text:004104C9                 lea     esi, [esp+2DCh+Destination]
.text:004104CD                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:004104D0                 mov     [esp+2DCh+lpFindFileData], edx ; Source
.text:004104D4                 call    strcpy
.text:004104D9                 mov     ecx, esi
.text:004104DB                 nop
.text:004104DC                 lea     esi, [esi+0]
.text:004104E0
.text:004104E0 loc_4104E0:                             ; CODE XREF: sub_410370+184↓j
.text:004104E0                 mov     edi, [ecx]
.text:004104E2                 add     ecx, 4
.text:004104E5                 lea     eax, [edi-1010101h]
.text:004104EB                 not     edi
.text:004104ED                 and     eax, edi
.text:004104EF                 test    eax, 80808080h
.text:004104F4                 jz      short loc_4104E0
.text:004104F6                 mov     [esp+2DCh+lpFindFileData], offset sub_410360 ; Source
.text:004104FE                 mov     [esp+2DCh+hFindFile], esi ; Destination
.text:00410501                 call    strcat
.text:00410506                 mov     [esp+2DCh+hFindFile], esi
.text:00410509                 call    sub_412DB0
.text:0041050E                 mov     [esp+2DCh+hFindFile], esi ; lpFileName
.text:00410511                 lea     edx, [esp+2DCh+FindFileData]
.text:00410518                 mov     [esp+2DCh+lpFindFileData], edx ; lpFindFileData
.text:0041051C                 call    FindFirstFileA
.text:00410521                 sub     esp, 8
.text:00410524                 cmp     eax, 0FFFFFFFFh
.text:00410527                 jz      short loc_410531
.text:00410529                 mov     [ebp+0], eax
.text:0041052C                 jmp     loc_4103B6
.text:00410531 ; ---------------------------------------------------------------------------
.text:00410531
.text:00410531 loc_410531:                             ; CODE XREF: sub_410370+1B7↑j
.text:00410531                 mov     dword ptr [ebp+0], 0FFFFFFFFh
.text:00410538                 jmp     loc_4104A9
.text:0041053D ; ---------------------------------------------------------------------------
.text:0041053D
.text:0041053D loc_41053D:                             ; CODE XREF: sub_410370+16↑j
.text:0041053D                 call    _errno
.text:00410542                 mov     dword ptr [eax], 9
.text:00410548                 jmp     loc_4104B7
.text:00410548 sub_410370      endp
.text:00410548
.text:00410548 ; ---------------------------------------------------------------------------
.text:0041054D                 align 10h
.text:00410550
.text:00410550 ; =============== S U B R O U T I N E =======================================
.text:00410550
.text:00410550
.text:00410550 ; int __cdecl sub_410550(LPCSTR)
.text:00410550 sub_410550      proc near               ; CODE XREF: sub_402370+96↑p
.text:00410550
.text:00410550 lpFileName      = dword ptr -1Ch
.text:00410550 AccessMode      = dword ptr -18h
.text:00410550 var_8           = dword ptr -8
.text:00410550 var_4           = dword ptr -4
.text:00410550 arg_0           = dword ptr  4
.text:00410550
.text:00410550                 sub     esp, 1Ch
.text:00410553                 mov     [esp+1Ch+var_8], ebx
.text:00410557                 mov     ebx, [esp+1Ch+arg_0]
.text:0041055B                 mov     [esp+1Ch+var_4], esi
.text:0041055F                 test    ebx, ebx
.text:00410561                 jz      loc_4105F2
.text:00410567                 call    _errno
.text:0041056C                 mov     esi, [eax]
.text:0041056E                 mov     [esp+1Ch+AccessMode], 2 ; int
.text:00410576                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:00410579                 call    sub_410AB0
.text:0041057E                 test    eax, eax
.text:00410580                 jnz     short loc_4105E0
.text:00410582
.text:00410582 loc_410582:                             ; CODE XREF: sub_410550+A0↓j
.text:00410582                 mov     [esp+1Ch+AccessMode], 10h ; int
.text:0041058A                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:0041058D                 call    sub_410AB0
.text:00410592                 test    eax, eax
.text:00410594                 jz      short loc_4105D1
.text:00410596                 call    _errno
.text:0041059B                 mov     [eax], esi
.text:0041059D                 mov     [esp+1Ch+lpFileName], ebx ; lpFileName
.text:004105A0                 call    DeleteFileA
.text:004105A5                 sub     esp, 4
.text:004105A8                 xor     edx, edx
.text:004105AA                 test    eax, eax
.text:004105AC                 jz      short loc_4105BC
.text:004105AE
.text:004105AE loc_4105AE:                             ; CODE XREF: sub_410550+7F↓j
.text:004105AE                 mov     ebx, [esp+1Ch+var_8]
.text:004105B2                 mov     eax, edx
.text:004105B4                 mov     esi, [esp+1Ch+var_4]
.text:004105B8                 add     esp, 1Ch
.text:004105BB                 retn
.text:004105BC ; ---------------------------------------------------------------------------
.text:004105BC
.text:004105BC loc_4105BC:                             ; CODE XREF: sub_410550+5C↑j
.text:004105BC                 call    sub_412940
.text:004105C1                 mov     esi, eax
.text:004105C3                 call    _errno
.text:004105C8                 mov     [eax], esi
.text:004105CA
.text:004105CA loc_4105CA:                             ; CODE XREF: sub_410550+8C↓j
.text:004105CA                                         ; sub_410550+AD↓j
.text:004105CA                 mov     edx, 0FFFFFFFFh
.text:004105CF                 jmp     short loc_4105AE
.text:004105D1 ; ---------------------------------------------------------------------------
.text:004105D1
.text:004105D1 loc_4105D1:                             ; CODE XREF: sub_410550+44↑j
.text:004105D1                 call    _errno
.text:004105D6                 mov     dword ptr [eax], 15h
.text:004105DC                 jmp     short loc_4105CA
.text:004105DC ; ---------------------------------------------------------------------------
.text:004105DE                 align 10h
.text:004105E0
.text:004105E0 loc_4105E0:                             ; CODE XREF: sub_410550+30↑j
.text:004105E0                 mov     [esp+1Ch+AccessMode], 180h ; AccessMode
.text:004105E8                 mov     [esp+1Ch+lpFileName], ebx ; FileName
.text:004105EB                 call    _chmod_0
.text:004105F0                 jmp     short loc_410582
.text:004105F2 ; ---------------------------------------------------------------------------
.text:004105F2
.text:004105F2 loc_4105F2:                             ; CODE XREF: sub_410550+11↑j
.text:004105F2                 call    _errno
.text:004105F7                 mov     dword ptr [eax], 16h
.text:004105FD                 jmp     short loc_4105CA
.text:004105FD sub_410550      endp
.text:004105FD
.text:004105FD ; ---------------------------------------------------------------------------
.text:004105FF                 align 10h
.text:00410600
.text:00410600 ; =============== S U B R O U T I N E =======================================
.text:00410600
.text:00410600
.text:00410600 ; int __cdecl sub_410600(LPCSTR, char *, int)
.text:00410600 sub_410600      proc near               ; CODE XREF: sub_4101D0+4A↑p
.text:00410600                                         ; sub_416290+104↓p ...
.text:00410600
.text:00410600 var_13C         = dword ptr -13Ch
.text:00410600 lpString1       = dword ptr -138h
.text:00410600 var_134         = dword ptr -134h
.text:00410600 String1         = byte ptr -12Ch
.text:00410600 var_10          = dword ptr -10h
.text:00410600 var_C           = dword ptr -0Ch
.text:00410600 var_8           = dword ptr -8
.text:00410600 var_4           = dword ptr -4
.text:00410600 arg_0           = dword ptr  4
.text:00410600 arg_4           = dword ptr  8
.text:00410600 arg_8           = dword ptr  0Ch
.text:00410600
.text:00410600                 sub     esp, 13Ch
.text:00410606                 mov     [esp+13Ch+var_10], ebx
.text:0041060D                 mov     ebx, [esp+13Ch+arg_8]
.text:00410614                 mov     [esp+13Ch+var_C], esi
.text:0041061B                 mov     esi, [esp+13Ch+arg_4]
.text:00410622                 mov     [esp+13Ch+var_8], edi
.text:00410629                 mov     edi, [esp+13Ch+arg_0]
.text:00410630                 mov     [esp+13Ch+var_4], ebp
.text:00410637                 mov     [esp+13Ch+var_134], ebx ; int
.text:0041063B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0041063F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:00410642                 call    sub_410310
.text:00410647                 cmp     eax, 0FFFFFFFFh
.text:0041064A                 mov     edx, eax
.text:0041064C                 jz      short loc_41065E
.text:0041064E                 mov     ecx, [ebx]
.text:00410650                 and     ecx, 0F000h
.text:00410656                 cmp     ecx, 0A000h
.text:0041065C                 jz      short loc_410683
.text:0041065E
.text:0041065E loc_41065E:                             ; CODE XREF: sub_410600+4C↑j
.text:0041065E                                         ; sub_410600+A1↓j ...
.text:0041065E                 mov     ebx, [esp+13Ch+var_10]
.text:00410665                 mov     eax, edx
.text:00410667                 mov     esi, [esp+13Ch+var_C]
.text:0041066E                 mov     edi, [esp+13Ch+var_8]
.text:00410675                 mov     ebp, [esp+13Ch+var_4]
.text:0041067C                 add     esp, 13Ch
.text:00410682                 retn
.text:00410683 ; ---------------------------------------------------------------------------
.text:00410683
.text:00410683 loc_410683:                             ; CODE XREF: sub_410600+5C↑j
.text:00410683                 mov     [esp+13Ch+var_134], 104h
.text:0041068B                 lea     ebp, [esp+13Ch+String1]
.text:0041068F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:00410693                 mov     [esp+13Ch+var_13C], esi ; char *
.text:00410696                 call    sub_413350
.text:0041069B                 inc     eax
.text:0041069C                 mov     edx, 0FFFFFFFFh
.text:004106A1                 jz      short loc_41065E
.text:004106A3                 mov     [esp+13Ch+var_134], ebx ; int
.text:004106A7                 mov     [esp+13Ch+lpString1], ebp ; int
.text:004106AB                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:004106AE                 call    sub_410310
.text:004106B3                 mov     edx, eax
.text:004106B5                 jmp     short loc_41065E
.text:004106B5 sub_410600      endp
.text:004106B5
.text:004106B5 ; ---------------------------------------------------------------------------
.text:004106B7                 align 10h
.text:004106C0
.text:004106C0 ; =============== S U B R O U T I N E =======================================
.text:004106C0
.text:004106C0
.text:004106C0 ; int __cdecl sub_4106C0(LPCSTR)
.text:004106C0 sub_4106C0      proc near               ; CODE XREF: sub_402370+187↑p
.text:004106C0                                         ; sub_4026E0+6FC↑p
.text:004106C0
.text:004106C0 lpPathName      = dword ptr -0Ch
.text:004106C0 var_4           = dword ptr -4
.text:004106C0 arg_0           = dword ptr  4
.text:004106C0
.text:004106C0                 sub     esp, 0Ch
.text:004106C3                 mov     eax, [esp+0Ch+arg_0]
.text:004106C7                 mov     [esp+0Ch+var_4], ebx
.text:004106CB                 test    eax, eax
.text:004106CD                 jz      short loc_4106FF
.text:004106CF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:004106D2                 call    RemoveDirectoryA
.text:004106D7                 sub     esp, 4
.text:004106DA                 xor     edx, edx
.text:004106DC                 test    eax, eax
.text:004106DE                 jz      short loc_4106EA
.text:004106E0
.text:004106E0 loc_4106E0:                             ; CODE XREF: sub_4106C0+3D↓j
.text:004106E0                 mov     ebx, [esp+0Ch+var_4]
.text:004106E4                 mov     eax, edx
.text:004106E6                 add     esp, 0Ch
.text:004106E9                 retn
.text:004106EA ; ---------------------------------------------------------------------------
.text:004106EA
.text:004106EA loc_4106EA:                             ; CODE XREF: sub_4106C0+1E↑j
.text:004106EA                 call    sub_412940
.text:004106EF                 mov     ebx, eax
.text:004106F1                 call    _errno
.text:004106F6                 mov     [eax], ebx
.text:004106F8
.text:004106F8 loc_4106F8:                             ; CODE XREF: sub_4106C0+4A↓j
.text:004106F8                 mov     edx, 0FFFFFFFFh
.text:004106FD                 jmp     short loc_4106E0
.text:004106FF ; ---------------------------------------------------------------------------
.text:004106FF
.text:004106FF loc_4106FF:                             ; CODE XREF: sub_4106C0+D↑j
.text:004106FF                 call    _errno
.text:00410704                 mov     dword ptr [eax], 16h
.text:0041070A                 jmp     short loc_4106F8
.text:0041070A sub_4106C0      endp
.text:0041070A
.text:0041070A ; ---------------------------------------------------------------------------
.text:0041070C                 align 10h
.text:00410710
.text:00410710 ; =============== S U B R O U T I N E =======================================
.text:00410710
.text:00410710
.text:00410710 ; int __cdecl sub_410710(void *)
.text:00410710 sub_410710      proc near               ; CODE XREF: sub_403900+1B5↑p
.text:00410710                                         ; sub_403D80+100↑p ...
.text:00410710
.text:00410710 Block           = dword ptr -0Ch
.text:00410710 var_4           = dword ptr -4
.text:00410710 arg_0           = dword ptr  4
.text:00410710
.text:00410710                 sub     esp, 0Ch
.text:00410713                 mov     [esp+0Ch+var_4], ebx
.text:00410717                 mov     ebx, [esp+0Ch+arg_0]
.text:0041071B                 test    ebx, ebx
.text:0041071D                 jz      short loc_41075B
.text:0041071F                 cmp     dword ptr [ebx], 0FFFFFFFFh
.text:00410722                 jz      short loc_410749
.text:00410724                 mov     [esp+0Ch+Block], ebx
.text:00410727                 call    sub_413430
.text:0041072C                 mov     edx, [ebx+4]
.text:0041072F                 mov     [esp+0Ch+Block], edx ; Block
.text:00410732                 call    free
.text:00410737                 mov     [esp+0Ch+Block], ebx ; Block
.text:0041073A                 call    free
.text:0041073F                 xor     eax, eax
.text:00410741
.text:00410741 loc_410741:                             ; CODE XREF: sub_410710+49↓j
.text:00410741                 mov     ebx, [esp+0Ch+var_4]
.text:00410745                 add     esp, 0Ch
.text:00410748                 retn
.text:00410749 ; ---------------------------------------------------------------------------
.text:00410749
.text:00410749 loc_410749:                             ; CODE XREF: sub_410710+12↑j
.text:00410749                 call    _errno
.text:0041074E                 mov     dword ptr [eax], 9
.text:00410754
.text:00410754 loc_410754:                             ; CODE XREF: sub_410710+56↓j
.text:00410754                 mov     eax, 0FFFFFFFFh
.text:00410759                 jmp     short loc_410741
.text:0041075B ; ---------------------------------------------------------------------------
.text:0041075B
.text:0041075B loc_41075B:                             ; CODE XREF: sub_410710+D↑j
.text:0041075B                 call    _errno
.text:00410760                 mov     dword ptr [eax], 16h
.text:00410766                 jmp     short loc_410754
.text:00410766 sub_410710      endp
.text:00410766
.text:00410766 ; ---------------------------------------------------------------------------
.text:00410768                 align 10h
.text:00410770 ; const char Source[2]
.text:00410770 Source          db '\',0                ; DATA XREF: sub_410780+D2↓o
.text:00410772                 align 10h
.text:00410780
.text:00410780 ; =============== S U B R O U T I N E =======================================
.text:00410780
.text:00410780
.text:00410780 ; int __cdecl sub_410780(LPCSTR)
.text:00410780 sub_410780      proc near               ; CODE XREF: sub_403900+167↑p
.text:00410780                                         ; sub_403D80+E↑p
.text:00410780
.text:00410780 lpFileName      = dword ptr -13Ch
.text:00410780 Source          = dword ptr -138h
.text:00410780 Destination     = byte ptr -12Ch
.text:00410780 var_10          = dword ptr -10h
.text:00410780 var_C           = dword ptr -0Ch
.text:00410780 var_8           = dword ptr -8
.text:00410780 var_4           = dword ptr -4
.text:00410780 arg_0           = dword ptr  4
.text:00410780
.text:00410780                 sub     esp, 13Ch
.text:00410786                 mov     [esp+13Ch+var_C], esi
.text:0041078D                 mov     esi, [esp+13Ch+arg_0]
.text:00410794                 mov     [esp+13Ch+var_10], ebx
.text:0041079B                 mov     [esp+13Ch+var_8], edi
.text:004107A2                 test    esi, esi
.text:004107A4                 mov     [esp+13Ch+var_4], ebp
.text:004107AB                 jz      short loc_4107B2
.text:004107AD                 cmp     byte ptr [esi], 0
.text:004107B0                 jnz     short loc_4107E2
.text:004107B2
.text:004107B2 loc_4107B2:                             ; CODE XREF: sub_410780+2B↑j
.text:004107B2                 call    _errno
.text:004107B7                 mov     dword ptr [eax], 2
.text:004107BD
.text:004107BD loc_4107BD:                             ; CODE XREF: sub_410780+139↓j
.text:004107BD                                         ; sub_410780+14C↓j
.text:004107BD                 xor     eax, eax
.text:004107BF
.text:004107BF loc_4107BF:                             ; CODE XREF: sub_410780+90↓j
.text:004107BF                                         ; sub_410780+A4↓j ...
.text:004107BF                 mov     ebx, [esp+13Ch+var_10]
.text:004107C6                 mov     esi, [esp+13Ch+var_C]
.text:004107CD                 mov     edi, [esp+13Ch+var_8]
.text:004107D4                 mov     ebp, [esp+13Ch+var_4]
.text:004107DB                 add     esp, 13Ch
.text:004107E1                 retn
.text:004107E2 ; ---------------------------------------------------------------------------
.text:004107E2
.text:004107E2 loc_4107E2:                             ; CODE XREF: sub_410780+30↑j
.text:004107E2                 mov     [esp+13Ch+lpFileName], esi ; lpFileName
.text:004107E5                 call    GetFileAttributesA
.text:004107EA                 sub     esp, 4
.text:004107ED                 cmp     eax, 0FFFFFFFFh
.text:004107F0                 jz      loc_4108BE
.text:004107F6                 test    al, 10h
.text:004107F8                 jz      loc_4108AE
.text:004107FE                 mov     [esp+13Ch+lpFileName], 18h ; Size
.text:00410805                 call    malloc
.text:0041080A                 mov     ebx, eax
.text:0041080C                 xor     eax, eax
.text:0041080E                 test    ebx, ebx
.text:00410810                 jz      short loc_4107BF
.text:00410812                 mov     [esp+13Ch+lpFileName], 118h ; Size
.text:00410819                 call    malloc
.text:0041081E                 mov     edi, eax
.text:00410820                 xor     eax, eax
.text:00410822                 test    edi, edi
.text:00410824                 jz      short loc_4107BF
.text:00410826                 mov     [esp+13Ch+Source], esi ; Source
.text:0041082A                 lea     ebp, [esp+13Ch+Destination]
.text:0041082E                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:00410831                 call    strcpy
.text:00410836                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00410839                 call    strlen
.text:0041083E                 cmp     byte ptr [eax+esi], 2Fh ; '/'
.text:00410842                 jz      short loc_410870
.text:00410844                 mov     [esp+13Ch+lpFileName], esi ; Str
.text:00410847                 call    strlen
.text:0041084C                 cmp     byte ptr [eax+esi], 5Ch ; '\'
.text:00410850                 jz      short loc_410870
.text:00410852                 mov     [esp+13Ch+Source], offset Source ; "\\"
.text:0041085A                 mov     [esp+13Ch+lpFileName], ebp ; Destination
.text:0041085D                 call    strcat
.text:00410862                 lea     esi, [esi+0]
.text:00410869                 lea     edi, [edi+0]
.text:00410870
.text:00410870 loc_410870:                             ; CODE XREF: sub_410780+C2↑j
.text:00410870                                         ; sub_410780+D0↑j
.text:00410870                 mov     [esp+13Ch+lpFileName], esi ; LPCSTR
.text:00410873                 call    sub_4134C0
.text:00410878                 mov     [esp+13Ch+lpFileName], eax
.text:0041087B                 call    sub_412DB0
.text:00410880                 mov     [edi], eax
.text:00410882                 mov     eax, ebx
.text:00410884                 mov     [ebx+4], edi
.text:00410887                 mov     dword ptr [ebx], 0FFFFFFFFh
.text:0041088D                 mov     dword ptr [ebx+8], 118h
.text:00410894                 mov     dword ptr [ebx+0Ch], 118h
.text:0041089B                 mov     dword ptr [ebx+10h], 8
.text:004108A2                 mov     dword ptr [ebx+14h], 1
.text:004108A9                 jmp     loc_4107BF
.text:004108AE ; ---------------------------------------------------------------------------
.text:004108AE
.text:004108AE loc_4108AE:                             ; CODE XREF: sub_410780+78↑j
.text:004108AE                 call    _errno
.text:004108B3                 mov     dword ptr [eax], 14h
.text:004108B9                 jmp     loc_4107BD
.text:004108BE ; ---------------------------------------------------------------------------
.text:004108BE
.text:004108BE loc_4108BE:                             ; CODE XREF: sub_410780+70↑j
.text:004108BE                 call    sub_412940
.text:004108C3                 mov     esi, eax
.text:004108C5                 call    _errno
.text:004108CA                 mov     [eax], esi
.text:004108CC                 jmp     loc_4107BD
.text:004108CC sub_410780      endp
.text:004108CC
.text:004108CC ; ---------------------------------------------------------------------------
.text:004108D1                 align 10h
.text:004108E0
.text:004108E0 ; =============== S U B R O U T I N E =======================================
.text:004108E0
.text:004108E0
.text:004108E0 ; int __cdecl sub_4108E0(LPCSTR)
.text:004108E0 sub_4108E0      proc near               ; CODE XREF: sub_4026E0+11F↑p
.text:004108E0                                         ; sub_403580+EC↑p ...
.text:004108E0
.text:004108E0 lpPathName      = dword ptr -0Ch
.text:004108E0 var_4           = dword ptr -4
.text:004108E0 arg_0           = dword ptr  4
.text:004108E0
.text:004108E0                 sub     esp, 0Ch
.text:004108E3                 mov     eax, [esp+0Ch+arg_0]
.text:004108E7                 mov     [esp+0Ch+var_4], ebx
.text:004108EB                 test    eax, eax
.text:004108ED                 jz      short loc_41091F
.text:004108EF                 mov     [esp+0Ch+lpPathName], eax ; lpPathName
.text:004108F2                 call    SetCurrentDirectoryA
.text:004108F7                 sub     esp, 4
.text:004108FA                 xor     edx, edx
.text:004108FC                 test    eax, eax
.text:004108FE                 jz      short loc_41090A
.text:00410900
.text:00410900 loc_410900:                             ; CODE XREF: sub_4108E0+3D↓j
.text:00410900                 mov     ebx, [esp+0Ch+var_4]
.text:00410904                 mov     eax, edx
.text:00410906                 add     esp, 0Ch
.text:00410909                 retn
.text:0041090A ; ---------------------------------------------------------------------------
.text:0041090A
.text:0041090A loc_41090A:                             ; CODE XREF: sub_4108E0+1E↑j
.text:0041090A                 call    sub_412940
.text:0041090F                 mov     ebx, eax
.text:00410911                 call    _errno
.text:00410916                 mov     [eax], ebx
.text:00410918
.text:00410918 loc_410918:                             ; CODE XREF: sub_4108E0+4A↓j
.text:00410918                 mov     edx, 0FFFFFFFFh
.text:0041091D                 jmp     short loc_410900
.text:0041091F ; ---------------------------------------------------------------------------
.text:0041091F
.text:0041091F loc_41091F:                             ; CODE XREF: sub_4108E0+D↑j
.text:0041091F                 call    _errno
.text:00410924                 mov     dword ptr [eax], 16h
.text:0041092A                 jmp     short loc_410918
.text:0041092A sub_4108E0      endp
.text:0041092A
.text:0041092A ; ---------------------------------------------------------------------------
.text:0041092C                 align 10h
.text:00410930
.text:00410930 ; =============== S U B R O U T I N E =======================================
.text:00410930
.text:00410930
.text:00410930 sub_410930      proc near               ; CODE XREF: sub_403390+4A↑p
.text:00410930                                         ; sub_403390+A8↑p ...
.text:00410930
.text:00410930 var_1C          = dword ptr -1Ch
.text:00410930 var_18          = dword ptr -18h
.text:00410930 var_14          = dword ptr -14h
.text:00410930 arg_0           = dword ptr  4
.text:00410930 arg_4           = dword ptr  8
.text:00410930 arg_8           = dword ptr  0Ch
.text:00410930
.text:00410930                 push    edi
.text:00410931                 push    esi
.text:00410932                 push    ebx
.text:00410933                 sub     esp, 10h
.text:00410936                 mov     edi, [esp+1Ch+arg_8]
.text:0041093A                 mov     esi, [esp+1Ch+arg_0]
.text:0041093E                 mov     ebx, [esp+1Ch+arg_4]
.text:00410942                 cmp     edi, 0Fh
.text:00410945                 jbe     short loc_410990
.text:00410947                 mov     ecx, esi
.text:00410949                 neg     ecx
.text:0041094B                 and     ecx, 3
.text:0041094E                 sub     edi, ecx
.text:00410950                 mov     edx, ecx
.text:00410952                 test    ecx, ecx
.text:00410954                 jz      short loc_41096A
.text:00410956                 lea     esi, [esi+0]
.text:00410959                 lea     edi, [edi+0]
.text:00410960
.text:00410960 loc_410960:                             ; CODE XREF: sub_410930+38↓j
.text:00410960                 movzx   ecx, byte ptr [ebx]
.text:00410963                 inc     ebx
.text:00410964                 mov     [esi], cl
.text:00410966                 inc     esi
.text:00410967                 dec     edx
.text:00410968                 jnz     short loc_410960
.text:0041096A
.text:0041096A loc_41096A:                             ; CODE XREF: sub_410930+24↑j
.text:0041096A                 test    bl, 3
.text:0041096D                 jnz     short loc_4109B3
.text:0041096F                 mov     [esp+1Ch+var_18], ebx
.text:00410973                 mov     edx, edi
.text:00410975                 shr     edx, 2
.text:00410978                 mov     [esp+1Ch+var_14], edx
.text:0041097C                 mov     [esp+1Ch+var_1C], esi
.text:0041097F                 call    sub_413610
.text:00410984
.text:00410984 loc_410984:                             ; CODE XREF: sub_410930+98↓j
.text:00410984                 mov     edx, edi
.text:00410986                 and     edx, 0FFFFFFFCh
.text:00410989                 and     edi, 3
.text:0041098C                 add     ebx, edx
.text:0041098E                 add     esi, edx
.text:00410990
.text:00410990 loc_410990:                             ; CODE XREF: sub_410930+15↑j
.text:00410990                 test    edi, edi
.text:00410992                 mov     edx, edi
.text:00410994                 jz      short loc_4109AA
.text:00410996                 lea     esi, [esi+0]
.text:00410999                 lea     edi, [edi+0]
.text:004109A0
.text:004109A0 loc_4109A0:                             ; CODE XREF: sub_410930+78↓j
.text:004109A0                 movzx   ecx, byte ptr [ebx]
.text:004109A3                 inc     ebx
.text:004109A4                 mov     [esi], cl
.text:004109A6                 inc     esi
.text:004109A7                 dec     edx
.text:004109A8                 jnz     short loc_4109A0
.text:004109AA
.text:004109AA loc_4109AA:                             ; CODE XREF: sub_410930+64↑j
.text:004109AA                 add     esp, 10h
.text:004109AD                 mov     eax, esi
.text:004109AF                 pop     ebx
.text:004109B0                 pop     esi
.text:004109B1                 pop     edi
.text:004109B2                 retn
.text:004109B3 ; ---------------------------------------------------------------------------
.text:004109B3
.text:004109B3 loc_4109B3:                             ; CODE XREF: sub_410930+3D↑j
.text:004109B3                 mov     [esp+1Ch+var_18], ebx
.text:004109B7                 mov     ecx, edi
.text:004109B9                 shr     ecx, 2
.text:004109BC                 mov     [esp+1Ch+var_14], ecx
.text:004109C0                 mov     [esp+1Ch+var_1C], esi
.text:004109C3                 call    sub_413710
.text:004109C8                 jmp     short loc_410984
.text:004109C8 sub_410930      endp
.text:004109C8
.text:004109C8 ; ---------------------------------------------------------------------------
.text:004109CA                 align 10h
.text:004109D0
.text:004109D0 ; =============== S U B R O U T I N E =======================================
.text:004109D0
.text:004109D0 ; Attributes: thunk
.text:004109D0
.text:004109D0 ; char *__cdecl j__getcwd(char *DstBuf, int SizeInBytes)
.text:004109D0 j__getcwd       proc near               ; CODE XREF: sub_408F30+16↑p
.text:004109D0
.text:004109D0 DstBuf          = dword ptr  4
.text:004109D0 SizeInBytes     = dword ptr  8
.text:004109D0
.text:004109D0                 jmp     _getcwd
.text:004109D0 j__getcwd       endp
.text:004109D0
.text:004109D0 ; ---------------------------------------------------------------------------
.text:004109D5                 align 10h
.text:004109E0                 sub     esp, 0Ch
.text:004109E3                 mov     [esp+4], ebx
.text:004109E7                 mov     [esp+8], esi
.text:004109EB                 xor     esi, esi
.text:004109ED                 call    sub_410AA0
.text:004109F2                 mov     ebx, eax
.text:004109F4                 call    sub_413AB0
.text:004109F9                 cmp     ebx, eax
.text:004109FB                 jz      short loc_410A14
.text:004109FD
.text:004109FD loc_4109FD:                             ; CODE XREF: .text:00410A22↓j
.text:004109FD                 mov     esi, 1
.text:00410A02
.text:00410A02 loc_410A02:                             ; CODE XREF: .text:00410A24↓j
.text:00410A02                 mov     ds:dword_41B580, esi
.text:00410A08                 mov     ebx, [esp+4]
.text:00410A0C                 mov     esi, [esp+8]
.text:00410A10                 add     esp, 0Ch
.text:00410A13                 retn
.text:00410A14 ; ---------------------------------------------------------------------------
.text:00410A14
.text:00410A14 loc_410A14:                             ; CODE XREF: .text:004109FB↑j
.text:00410A14                 call    sub_410A90
.text:00410A19                 mov     ebx, eax
.text:00410A1B                 call    sub_413AA0
.text:00410A20                 cmp     ebx, eax
.text:00410A22                 jnz     short loc_4109FD
.text:00410A24                 jmp     short loc_410A02
.text:00410A24 ; ---------------------------------------------------------------------------
.text:00410A26                 align 10h
.text:00410A30
.text:00410A30 ; =============== S U B R O U T I N E =======================================
.text:00410A30
.text:00410A30
.text:00410A30 sub_410A30      proc near               ; CODE XREF: sub_4101D0+99↑p
.text:00410A30
.text:00410A30 Size            = dword ptr -1Ch
.text:00410A30 var_18          = dword ptr -18h
.text:00410A30 arg_0           = dword ptr  4
.text:00410A30
.text:00410A30                 push    edi
.text:00410A31                 push    esi
.text:00410A32                 push    ebx
.text:00410A33                 sub     esp, 10h
.text:00410A36                 xor     ebx, ebx
.text:00410A38                 mov     edi, [esp+1Ch+arg_0]
.text:00410A3C                 lea     esi, [esi+0]
.text:00410A40
.text:00410A40 loc_410A40:                             ; CODE XREF: sub_410A30+38↓j
.text:00410A40                 lea     edx, ds:0[ebx*4]
.text:00410A47                 mov     [esp+1Ch+Size], edx ; Size
.text:00410A4A                 call    malloc
.text:00410A4F                 mov     [esp+1Ch+var_18], eax
.text:00410A53                 mov     esi, eax
.text:00410A55                 mov     [esp+1Ch+Size], ebx
.text:00410A58                 call    sub_413AC0
.text:00410A5D                 lea     ecx, [ebx+ebx]
.text:00410A60                 mov     edx, eax
.text:00410A62                 mov     ebx, ecx
.text:00410A64                 sar     ecx, 1
.text:00410A66                 cmp     eax, ecx
.text:00410A68                 jz      short loc_410A40
.text:00410A6A                 test    eax, eax
.text:00410A6C                 js      short loc_410A7C
.text:00410A6E                 mov     esi, esi
.text:00410A70
.text:00410A70 loc_410A70:                             ; CODE XREF: sub_410A30+4A↓j
.text:00410A70                 mov     ecx, edx
.text:00410A72                 dec     edx
.text:00410A73                 cmp     [esi+ecx*4], edi
.text:00410A76                 jz      short loc_410A85
.text:00410A78                 test    edx, edx
.text:00410A7A                 jns     short loc_410A70
.text:00410A7C
.text:00410A7C loc_410A7C:                             ; CODE XREF: sub_410A30+3C↑j
.text:00410A7C                 xor     eax, eax
.text:00410A7E
.text:00410A7E loc_410A7E:                             ; CODE XREF: sub_410A30+5A↓j
.text:00410A7E                 add     esp, 10h
.text:00410A81                 pop     ebx
.text:00410A82                 pop     esi
.text:00410A83                 pop     edi
.text:00410A84                 retn
.text:00410A85 ; ---------------------------------------------------------------------------
.text:00410A85
.text:00410A85 loc_410A85:                             ; CODE XREF: sub_410A30+46↑j
.text:00410A85                 mov     eax, 1
.text:00410A8A                 jmp     short loc_410A7E
.text:00410A8A sub_410A30      endp
.text:00410A8A
.text:00410A8A ; ---------------------------------------------------------------------------
.text:00410A8C                 align 10h
.text:00410A90
.text:00410A90 ; =============== S U B R O U T I N E =======================================
.text:00410A90
.text:00410A90
.text:00410A90 sub_410A90      proc near               ; CODE XREF: sub_4101D0+FE↑p
.text:00410A90                                         ; .text:loc_410A14↑p
.text:00410A90                 xor     eax, eax
.text:00410A92                 retn
.text:00410A92 sub_410A90      endp
.text:00410A92
.text:00410A92 ; ---------------------------------------------------------------------------
.text:00410A93                 align 10h
.text:00410AA0
.text:00410AA0 ; =============== S U B R O U T I N E =======================================
.text:00410AA0
.text:00410AA0
.text:00410AA0 sub_410AA0      proc near               ; CODE XREF: sub_4101D0+F4↑p
.text:00410AA0                                         ; .text:004109ED↑p
.text:00410AA0                 xor     eax, eax
.text:00410AA2                 retn
.text:00410AA2 sub_410AA0      endp
.text:00410AA2
.text:00410AA2 ; ---------------------------------------------------------------------------
.text:00410AA3                 align 10h
.text:00410AB0
.text:00410AB0 ; =============== S U B R O U T I N E =======================================
.text:00410AB0
.text:00410AB0
.text:00410AB0 ; int __cdecl sub_410AB0(LPCSTR lpFileName, int)
.text:00410AB0 sub_410AB0      proc near               ; CODE XREF: sub_4101D0+26↑p
.text:00410AB0                                         ; sub_410550+29↑p ...
.text:00410AB0
.text:00410AB0 uMode           = dword ptr -1Ch
.text:00410AB0 var_10          = dword ptr -10h
.text:00410AB0 var_C           = dword ptr -0Ch
.text:00410AB0 var_8           = dword ptr -8
.text:00410AB0 var_4           = dword ptr -4
.text:00410AB0 lpFileName      = dword ptr  4
.text:00410AB0 arg_4           = dword ptr  8
.text:00410AB0
.text:00410AB0                 sub     esp, 1Ch
.text:00410AB3                 mov     [esp+1Ch+var_10], ebx
.text:00410AB7                 mov     ebx, [esp+1Ch+lpFileName]
.text:00410ABB                 mov     [esp+1Ch+var_4], ebp
.text:00410ABF                 xor     ebp, ebp
.text:00410AC1                 test    ebx, ebx
.text:00410AC3                 mov     [esp+1Ch+var_C], esi
.text:00410AC7                 mov     esi, [esp+1Ch+arg_4]
.text:00410ACB                 mov     [esp+1Ch+var_8], edi
.text:00410ACF                 jz      short loc_410AD9
.text:00410AD1                 test    esi, 0FFFFFFE8h
.text:00410AD7                 jz      short loc_410B00
.text:00410AD9
.text:00410AD9 loc_410AD9:                             ; CODE XREF: sub_410AB0+1F↑j
.text:00410AD9                 call    _errno
.text:00410ADE                 mov     dword ptr [eax], 16h
.text:00410AE4
.text:00410AE4 loc_410AE4:                             ; CODE XREF: sub_410AB0+B1↓j
.text:00410AE4                 mov     eax, 0FFFFFFFFh
.text:00410AE9
.text:00410AE9 loc_410AE9:                             ; CODE XREF: sub_410AB0+86↓j
.text:00410AE9                                         ; sub_410AB0+A4↓j
.text:00410AE9                 mov     ebx, [esp+1Ch+var_10]
.text:00410AED                 mov     esi, [esp+1Ch+var_C]
.text:00410AF1                 mov     edi, [esp+1Ch+var_8]
.text:00410AF5                 mov     ebp, [esp+1Ch+var_4]
.text:00410AF9                 add     esp, 1Ch
.text:00410AFC                 retn
.text:00410AFC ; ---------------------------------------------------------------------------
.text:00410AFD                 align 10h
.text:00410B00
.text:00410B00 loc_410B00:                             ; CODE XREF: sub_410AB0+27↑j
.text:00410B00                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00410B07                 call    SetErrorMode
.text:00410B0C                 sub     esp, 4
.text:00410B0F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00410B12                 call    GetFileAttributesA
.text:00410B17                 sub     esp, 4
.text:00410B1A                 mov     edi, eax
.text:00410B1C                 cmp     eax, 0FFFFFFFFh
.text:00410B1F                 jz      short loc_410B63
.text:00410B21
.text:00410B21 loc_410B21:                             ; CODE XREF: sub_410AB0+C6↓j
.text:00410B21                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00410B28                 call    SetErrorMode
.text:00410B2D                 sub     esp, 4
.text:00410B30                 mov     eax, 0FFFFFFFFh
.text:00410B35                 inc     ebp
.text:00410B36                 jz      short loc_410AE9
.text:00410B38                 test    esi, 10h
.text:00410B3E                 jz      short loc_410B48
.text:00410B40                 test    edi, 10h
.text:00410B46                 jz      short loc_410B56
.text:00410B48
.text:00410B48 loc_410B48:                             ; CODE XREF: sub_410AB0+8E↑j
.text:00410B48                 and     esi, 2
.text:00410B4B                 jz      short loc_410B52
.text:00410B4D                 and     edi, 1
.text:00410B50                 jnz     short loc_410B56
.text:00410B52
.text:00410B52 loc_410B52:                             ; CODE XREF: sub_410AB0+9B↑j
.text:00410B52                 xor     eax, eax
.text:00410B54                 jmp     short loc_410AE9
.text:00410B56 ; ---------------------------------------------------------------------------
.text:00410B56
.text:00410B56 loc_410B56:                             ; CODE XREF: sub_410AB0+96↑j
.text:00410B56                                         ; sub_410AB0+A0↑j
.text:00410B56                 call    _errno
.text:00410B5B                 mov     dword ptr [eax], 0Dh
.text:00410B61                 jmp     short loc_410AE4
.text:00410B63 ; ---------------------------------------------------------------------------
.text:00410B63
.text:00410B63 loc_410B63:                             ; CODE XREF: sub_410AB0+6F↑j
.text:00410B63                 call    sub_412940
.text:00410B68                 mov     ebp, eax
.text:00410B6A                 call    _errno
.text:00410B6F                 mov     [eax], ebp
.text:00410B71                 mov     ebp, 0FFFFFFFFh
.text:00410B76                 jmp     short loc_410B21
.text:00410B76 sub_410AB0      endp
.text:00410B76
.text:00410B76 ; ---------------------------------------------------------------------------
.text:00410B78                 align 10h
.text:00410B80 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00410B80                                         ; DATA XREF: .data:off_41A074↓o
.text:00410B94 ; const CHAR LibFileName[]
.text:00410B94 LibFileName     db 'KERNEL32.DLL',0     ; DATA XREF: sub_410BC0+11↓o
.text:00410B94                                         ; sub_410D30+C↓o ...
.text:00410BA1 ; const CHAR ProcName[]
.text:00410BA1 ProcName        db 'GetFileAttributesExA',0
.text:00410BA1                                         ; DATA XREF: sub_410BC0+28↓o
.text:00410BB6                 align 10h
.text:00410BC0
.text:00410BC0 ; =============== S U B R O U T I N E =======================================
.text:00410BC0
.text:00410BC0
.text:00410BC0 ; int __cdecl sub_410BC0(LPCSTR lpFileName, int)
.text:00410BC0 sub_410BC0      proc near               ; CODE XREF: .text:00411D64↓p
.text:00410BC0                                         ; sub_412160+37↓p
.text:00410BC0
.text:00410BC0 lpModuleName    = dword ptr -18Ch
.text:00410BC0 lpProcName      = dword ptr -188h
.text:00410BC0 var_184         = dword ptr -184h
.text:00410BC0 var_170         = dword ptr -170h
.text:00410BC0 var_164         = dword ptr -164h
.text:00410BC0 hModule         = dword ptr -160h
.text:00410BC0 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00410BC0 lpFileName      = dword ptr  4
.text:00410BC0 arg_4           = dword ptr  8
.text:00410BC0
.text:00410BC0                 push    ebp
.text:00410BC1                 push    edi
.text:00410BC2                 push    esi
.text:00410BC3                 push    ebx
.text:00410BC4                 sub     esp, 17Ch
.text:00410BCA                 mov     ebx, [esp+18Ch+arg_4]
.text:00410BD1                 mov     [esp+18Ch+lpModuleName], offset LibFileName ; "KERNEL32.DLL"
.text:00410BD8                 call    GetModuleHandleA
.text:00410BDD                 sub     esp, 4
.text:00410BE0                 mov     [esp+18Ch+hModule], eax
.text:00410BE4                 mov     edx, [esp+18Ch+hModule]
.text:00410BE8                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00410BF0                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00410BF3                 call    GetProcAddress
.text:00410BF8                 sub     esp, 8
.text:00410BFB                 mov     ebp, eax
.text:00410BFD                 mov     eax, [esp+18Ch+lpFileName]
.text:00410C04                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00410C07                 call    GetFileAttributesA
.text:00410C0C                 sub     esp, 4
.text:00410C0F                 mov     [esp+18Ch+var_164], eax
.text:00410C13                 xor     eax, eax
.text:00410C15                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00410C1A                 jz      short loc_410C71
.text:00410C1C                 cld
.text:00410C1D                 mov     ecx, 50h ; 'P'
.text:00410C22                 lea     esi, [esp+18Ch+FindFileData]
.text:00410C26                 mov     edi, esi
.text:00410C28                 test    ebp, ebp
.text:00410C2A                 rep stosd
.text:00410C2C                 mov     [esp+18Ch+var_170], 0
.text:00410C34                 jz      short loc_410C55
.text:00410C36                 mov     [esp+18Ch+var_184], ebx
.text:00410C3A                 mov     ecx, [esp+18Ch+lpFileName]
.text:00410C41                 mov     [esp+18Ch+lpProcName], 0
.text:00410C49                 mov     [esp+18Ch+lpModuleName], ecx
.text:00410C4C                 call    ebp
.text:00410C4E                 sub     esp, 0Ch
.text:00410C51                 mov     [esp+18Ch+var_170], eax
.text:00410C55
.text:00410C55 loc_410C55:                             ; CODE XREF: sub_410BC0+74↑j
.text:00410C55                 mov     eax, [esp+18Ch+var_170]
.text:00410C59                 test    eax, eax
.text:00410C5B                 jz      short loc_410C80
.text:00410C5D
.text:00410C5D loc_410C5D:                             ; CODE XREF: sub_410BC0+131↓j
.text:00410C5D                                         ; sub_410BC0+14B↓j
.text:00410C5D                 mov     ebx, [esp+18Ch+hModule]
.text:00410C61                 mov     [esp+18Ch+lpModuleName], ebx ; hLibModule
.text:00410C64                 call    FreeLibrary
.text:00410C69                 sub     esp, 4
.text:00410C6C                 mov     eax, 1
.text:00410C71
.text:00410C71 loc_410C71:                             ; CODE XREF: sub_410BC0+5A↑j
.text:00410C71                 add     esp, 17Ch
.text:00410C77                 pop     ebx
.text:00410C78                 pop     esi
.text:00410C79                 pop     edi
.text:00410C7A                 pop     ebp
.text:00410C7B                 retn
.text:00410C7B ; ---------------------------------------------------------------------------
.text:00410C7C                 align 10h
.text:00410C80
.text:00410C80 loc_410C80:                             ; CODE XREF: sub_410BC0+9B↑j
.text:00410C80                 mov     [esp+18Ch+lpProcName], esi ; lpFindFileData
.text:00410C84                 mov     edx, [esp+18Ch+lpFileName]
.text:00410C8B                 mov     [esp+18Ch+lpModuleName], edx ; lpFileName
.text:00410C8E                 call    FindFirstFileA
.text:00410C93                 sub     esp, 8
.text:00410C96                 xor     ecx, ecx
.text:00410C98                 cmp     eax, 0FFFFFFFFh
.text:00410C9B                 setnz   cl
.text:00410C9E                 mov     edi, [esp+18Ch+FindFileData.dwFileAttributes]
.text:00410CA2                 mov     [ebx], edi
.text:00410CA4                 mov     esi, [esp+18Ch+FindFileData.ftCreationTime.dwHighDateTime]
.text:00410CA8                 mov     [esp+18Ch+var_170], ecx
.text:00410CAC                 mov     ecx, [esp+18Ch+FindFileData.ftCreationTime.dwLowDateTime]
.text:00410CB0                 mov     [ebx+8], esi
.text:00410CB3                 mov     [ebx+4], ecx
.text:00410CB6                 mov     ebp, [esp+18Ch+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00410CBA                 mov     edi, [esp+18Ch+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00410CBE                 mov     [ebx+0Ch], ebp
.text:00410CC1                 mov     [ebx+10h], edi
.text:00410CC4                 mov     esi, [esp+18Ch+FindFileData.ftLastWriteTime.dwHighDateTime]
.text:00410CC8                 mov     ecx, [esp+18Ch+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00410CCC                 mov     [ebx+18h], esi
.text:00410CCF                 mov     [ebx+14h], ecx
.text:00410CD2                 mov     ebp, [esp+18Ch+FindFileData.nFileSizeHigh]
.text:00410CD6                 mov     [ebx+1Ch], ebp
.text:00410CD9                 mov     edi, [esp+18Ch+FindFileData.nFileSizeLow]
.text:00410CDD                 mov     [ebx+20h], edi
.text:00410CE0                 mov     [esp+18Ch+lpModuleName], eax ; hFindFile
.text:00410CE3                 call    FindClose
.text:00410CE8                 sub     esp, 4
.text:00410CEB                 mov     esi, [esp+18Ch+var_170]
.text:00410CEF                 test    esi, esi
.text:00410CF1                 jnz     loc_410C5D
.text:00410CF7                 cld
.text:00410CF8                 mov     eax, [esp+18Ch+var_170]
.text:00410CFC                 mov     ecx, 9
.text:00410D01                 mov     edi, ebx
.text:00410D03                 rep stosd
.text:00410D05                 mov     ebp, [esp+18Ch+var_164]
.text:00410D09                 mov     [ebx], ebp
.text:00410D0B                 jmp     loc_410C5D
.text:00410D0B sub_410BC0      endp
.text:00410D0B
.text:00410D0B ; ---------------------------------------------------------------------------
.text:00410D10 ; const CHAR aFindfirstfilee[]
.text:00410D10 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_410D30+23↓o
.text:00410D21 ; const char asc_410D21[]
.text:00410D21 asc_410D21      db '\*',0               ; DATA XREF: sub_410D30:loc_410DBD↓o
.text:00410D24                 align 10h
.text:00410D30
.text:00410D30 ; =============== S U B R O U T I N E =======================================
.text:00410D30
.text:00410D30
.text:00410D30 ; int __cdecl sub_410D30(char *Str)
.text:00410D30 sub_410D30      proc near               ; CODE XREF: .text:00411E63↓p
.text:00410D30                                         ; sub_412160+3FA↓p ...
.text:00410D30
.text:00410D30 lpLibFileName   = dword ptr -18Ch
.text:00410D30 lpProcName      = dword ptr -188h
.text:00410D30 var_184         = dword ptr -184h
.text:00410D30 var_180         = dword ptr -180h
.text:00410D30 var_17C         = dword ptr -17Ch
.text:00410D30 var_178         = dword ptr -178h
.text:00410D30 var_164         = dword ptr -164h
.text:00410D30 hModule         = dword ptr -160h
.text:00410D30 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00410D30 Str             = dword ptr  4
.text:00410D30
.text:00410D30                 push    ebp
.text:00410D31                 push    edi
.text:00410D32                 xor     edi, edi
.text:00410D34                 push    esi
.text:00410D35                 push    ebx
.text:00410D36                 sub     esp, 17Ch
.text:00410D3C                 mov     [esp+18Ch+lpLibFileName], offset LibFileName ; "KERNEL32.DLL"
.text:00410D43                 call    LoadLibraryA
.text:00410D48                 sub     esp, 4
.text:00410D4B                 mov     [esp+18Ch+hModule], eax
.text:00410D4F                 mov     ecx, [esp+18Ch+hModule]
.text:00410D53                 mov     [esp+18Ch+lpProcName], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00410D5B                 mov     [esp+18Ch+lpLibFileName], ecx ; hModule
.text:00410D5E                 call    GetProcAddress
.text:00410D63                 sub     esp, 8
.text:00410D66                 mov     edx, [esp+18Ch+Str]
.text:00410D6D                 mov     [esp+18Ch+var_164], eax
.text:00410D71                 mov     [esp+18Ch+lpLibFileName], edx ; Str
.text:00410D74                 call    strlen
.text:00410D79                 lea     edx, [eax+5]
.text:00410D7C                 mov     ebx, eax
.text:00410D7E                 mov     [esp+18Ch+lpLibFileName], edx ; Size
.text:00410D81                 call    malloc
.text:00410D86                 mov     esi, eax
.text:00410D88                 test    esi, esi
.text:00410D8A                 mov     eax, 1
.text:00410D8F                 jz      loc_410E6D
.text:00410D95                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00410D98                 mov     ebp, [esp+18Ch+Str]
.text:00410D9F                 mov     [esp+18Ch+lpProcName], ebp ; Source
.text:00410DA3                 call    strcpy
.text:00410DA8                 movzx   eax, byte ptr [ebx+esi-1]
.text:00410DAD                 cmp     al, 2Fh ; '/'
.text:00410DAF                 jz      loc_410E9B
.text:00410DB5                 cmp     al, 5Ch ; '\'
.text:00410DB7                 jz      loc_410E9B
.text:00410DBD
.text:00410DBD loc_410DBD:                             ; CODE XREF: sub_410D30+170↓j
.text:00410DBD                 mov     [esp+18Ch+lpProcName], offset asc_410D21 ; "\\*"
.text:00410DC5                 mov     [esp+18Ch+lpLibFileName], esi ; Destination
.text:00410DC8                 call    strcat
.text:00410DCD                 mov     eax, [esp+18Ch+var_164]
.text:00410DD1                 test    eax, eax
.text:00410DD3                 jz      loc_410E95
.text:00410DD9                 mov     [esp+18Ch+var_178], 0
.text:00410DE1                 lea     ebp, [esp+18Ch+FindFileData]
.text:00410DE5                 mov     [esp+18Ch+var_17C], 0
.text:00410DED                 mov     [esp+18Ch+var_180], 1
.text:00410DF5                 mov     [esp+18Ch+var_184], ebp
.text:00410DF9                 mov     [esp+18Ch+lpProcName], 0
.text:00410E01                 mov     [esp+18Ch+lpLibFileName], esi
.text:00410E04                 call    [esp+18Ch+var_164]
.text:00410E08                 sub     esp, 18h
.text:00410E0B                 mov     ebx, eax
.text:00410E0D                 cmp     eax, 0FFFFFFFFh
.text:00410E10                 jz      short loc_410E78
.text:00410E12                 lea     esi, [esi+0]
.text:00410E19                 lea     edi, [edi+0]
.text:00410E20
.text:00410E20 loc_410E20:                             ; CODE XREF: sub_410D30+109↓j
.text:00410E20                                         ; sub_410D30+161↓j
.text:00410E20                 test    byte ptr [esp+18Ch+FindFileData.dwFileAttributes], 10h
.text:00410E25                 jz      short loc_410E28
.text:00410E27                 inc     edi
.text:00410E28
.text:00410E28 loc_410E28:                             ; CODE XREF: sub_410D30+F5↑j
.text:00410E28                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00410E2C                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00410E2F                 call    FindNextFileA
.text:00410E34                 sub     esp, 8
.text:00410E37                 test    eax, eax
.text:00410E39                 jnz     short loc_410E20
.text:00410E3B                 mov     [esp+18Ch+lpLibFileName], ebx ; hFindFile
.text:00410E3E                 call    FindClose
.text:00410E43                 sub     esp, 4
.text:00410E46                 mov     esi, [esp+18Ch+hModule]
.text:00410E4A                 mov     [esp+18Ch+lpLibFileName], esi ; hLibModule
.text:00410E4D                 call    FreeLibrary
.text:00410E52                 sub     esp, 4
.text:00410E55                 mov     ebx, [esp+18Ch+Str]
.text:00410E5C                 mov     [esp+18Ch+lpLibFileName], ebx ; LPCSTR
.text:00410E5F                 call    sub_413EB0
.text:00410E64                 test    eax, eax
.text:00410E66                 jz      short loc_410E6B
.text:00410E68                 add     edi, 2
.text:00410E6B
.text:00410E6B loc_410E6B:                             ; CODE XREF: sub_410D30+136↑j
.text:00410E6B                 mov     eax, edi
.text:00410E6D
.text:00410E6D loc_410E6D:                             ; CODE XREF: sub_410D30+5F↑j
.text:00410E6D                                         ; sub_410D30+163↓j
.text:00410E6D                 add     esp, 17Ch
.text:00410E73                 pop     ebx
.text:00410E74                 pop     esi
.text:00410E75                 pop     edi
.text:00410E76                 pop     ebp
.text:00410E77                 retn
.text:00410E78 ; ---------------------------------------------------------------------------
.text:00410E78
.text:00410E78 loc_410E78:                             ; CODE XREF: sub_410D30+E0↑j
.text:00410E78                                         ; sub_410D30+169↓j
.text:00410E78                 mov     [esp+18Ch+lpProcName], ebp ; lpFindFileData
.text:00410E7C                 mov     [esp+18Ch+lpLibFileName], esi ; lpFileName
.text:00410E7F                 call    FindFirstFileA
.text:00410E84                 mov     ebx, eax
.text:00410E86                 sub     esp, 8
.text:00410E89                 cmp     ebx, 0FFFFFFFFh
.text:00410E8C                 mov     eax, 2
.text:00410E91                 jnz     short loc_410E20
.text:00410E93                 jmp     short loc_410E6D
.text:00410E95 ; ---------------------------------------------------------------------------
.text:00410E95
.text:00410E95 loc_410E95:                             ; CODE XREF: sub_410D30+A3↑j
.text:00410E95                 lea     ebp, [esp+18Ch+FindFileData]
.text:00410E99                 jmp     short loc_410E78
.text:00410E9B ; ---------------------------------------------------------------------------
.text:00410E9B
.text:00410E9B loc_410E9B:                             ; CODE XREF: sub_410D30+7F↑j
.text:00410E9B                                         ; sub_410D30+87↑j
.text:00410E9B                 mov     byte ptr [ebx+esi-1], 0
.text:00410EA0                 jmp     loc_410DBD
.text:00410EA0 sub_410D30      endp
.text:00410EA0
.text:00410EA0 ; ---------------------------------------------------------------------------
.text:00410EA5                 align 10h
.text:00410EB0
.text:00410EB0 ; =============== S U B R O U T I N E =======================================
.text:00410EB0
.text:00410EB0
.text:00410EB0 ; int __cdecl sub_410EB0(HANDLE hNamedPipe, int)
.text:00410EB0 sub_410EB0      proc near               ; CODE XREF: sub_410310+2317↓p
.text:00410EB0                                         ; sub_416000+52↓j
.text:00410EB0
.text:00410EB0 hFile           = dword ptr -0ECh
.text:00410EB0 lpFileInformation= dword ptr -0E8h
.text:00410EB0 nBufferSize     = dword ptr -0E4h
.text:00410EB0 lpBytesRead     = dword ptr -0E0h
.text:00410EB0 lpTotalBytesAvail= dword ptr -0DCh
.text:00410EB0 lpBytesLeftThisMessage= dword ptr -0D8h
.text:00410EB0 var_C4          = dword ptr -0C4h
.text:00410EB0 var_C0          = dword ptr -0C0h
.text:00410EB0 var_BC          = dword ptr -0BCh
.text:00410EB0 var_B8          = dword ptr -0B8h
.text:00410EB0 var_B4          = dword ptr -0B4h
.text:00410EB0 var_B0          = dword ptr -0B0h
.text:00410EB0 var_AC          = dword ptr -0ACh
.text:00410EB0 var_A8          = dword ptr -0A8h
.text:00410EB0 TotalBytesAvail = dword ptr -0A0h
.text:00410EB0 var_9C          = dword ptr -9Ch
.text:00410EB0 var_98          = dword ptr -98h
.text:00410EB0 var_94          = dword ptr -94h
.text:00410EB0 var_90          = dword ptr -90h
.text:00410EB0 var_8C          = dword ptr -8Ch
.text:00410EB0 var_88          = dword ptr -88h
.text:00410EB0 var_84          = dword ptr -84h
.text:00410EB0 var_80          = dword ptr -80h
.text:00410EB0 var_7C          = dword ptr -7Ch
.text:00410EB0 var_78          = dword ptr -78h
.text:00410EB0 var_74          = dword ptr -74h
.text:00410EB0 var_70          = dword ptr -70h
.text:00410EB0 var_6C          = dword ptr -6Ch
.text:00410EB0 FileInformation = _BY_HANDLE_FILE_INFORMATION ptr -5Ch
.text:00410EB0 hNamedPipe      = dword ptr  4
.text:00410EB0 arg_4           = dword ptr  8
.text:00410EB0
.text:00410EB0                 push    ebp
.text:00410EB1                 mov     eax, 0FFFFFFFFh
.text:00410EB6                 push    edi
.text:00410EB7                 push    esi
.text:00410EB8                 push    ebx
.text:00410EB9                 sub     esp, 0DCh
.text:00410EBF                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00410EC6                 mov     ebp, [esp+0ECh+arg_4]
.text:00410ECD                 cmp     esi, 0FFFFFFFFh
.text:00410ED0                 jz      loc_411251
.text:00410ED6                 cld
.text:00410ED7                 xor     eax, eax
.text:00410ED9                 lea     ebx, [esp+0ECh+FileInformation]
.text:00410EE0                 mov     ecx, 0Dh
.text:00410EE5                 mov     edi, ebx
.text:00410EE7                 rep stosd
.text:00410EE9                 mov     dword ptr [ebp+18h], 1
.text:00410EF0                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00410EF3                 call    GetFileType
.text:00410EF8                 sub     esp, 4
.text:00410EFB                 xor     edx, edx
.text:00410EFD                 cmp     eax, 2
.text:00410F00                 jz      loc_411330
.text:00410F06                 cmp     eax, 3
.text:00410F09                 jz      loc_411320
.text:00410F0F
.text:00410F0F loc_410F0F:                             ; CODE XREF: sub_410EB0+475↓j
.text:00410F0F                                         ; sub_410EB0+485↓j
.text:00410F0F                 or      [ebp+0], edx
.text:00410F12                 mov     [esp+0ECh+lpFileInformation], ebx ; lpFileInformation
.text:00410F16                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00410F19                 call    GetFileInformationByHandle
.text:00410F1E                 sub     esp, 8
.text:00410F21                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00410F28                 test    ecx, ecx
.text:00410F2A                 jnz     short loc_410F60
.text:00410F2C                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00410F33                 test    edx, edx
.text:00410F35                 jnz     short loc_410F60
.text:00410F37                 mov     edx, [ebp+0]
.text:00410F3A                 and     edx, 0F000h
.text:00410F40                 cmp     edx, 1000h
.text:00410F46                 jz      loc_4112B6
.text:00410F4C
.text:00410F4C loc_410F4C:                             ; CODE XREF: sub_410EB0+459↓j
.text:00410F4C                                         ; sub_410EB0+465↓j
.text:00410F4C                 test    ecx, ecx
.text:00410F4E                 jnz     short loc_410F60
.text:00410F50                 mov     edx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:00410F57                 test    edx, edx
.text:00410F59                 jz      loc_411294
.text:00410F5F                 nop
.text:00410F60
.text:00410F60 loc_410F60:                             ; CODE XREF: sub_410EB0+7A↑j
.text:00410F60                                         ; sub_410EB0+85↑j ...
.text:00410F60                 cld
.text:00410F61                 mov     esi, ebx
.text:00410F63                 mov     dword ptr [ebp+14h], 0
.text:00410F6A                 lea     edi, [esp+0ECh+var_9C]
.text:00410F6E                 mov     ecx, 0Dh
.text:00410F73                 rep movsd
.text:00410F75                 xor     ebx, ebx
.text:00410F77                 xor     edi, edi
.text:00410F79                 mov     edx, [esp+0ECh+var_6C]
.text:00410F80                 mov     esi, [esp+0ECh+var_70]
.text:00410F84                 or      edx, ebx
.text:00410F86                 mov     ebx, [esp+0ECh+var_9C]
.text:00410F8A                 mov     [ebp+8], edx
.text:00410F8D                 or      edi, esi
.text:00410F8F                 xor     edx, edx
.text:00410F91                 mov     [ebp+0Ch], edi
.text:00410F94                 test    bl, 10h
.text:00410F97                 mov     esi, [esp+0ECh+var_80]
.text:00410F9B                 setz    dl
.text:00410F9E                 mov     [ebp+10h], esi
.text:00410FA1                 dec     edx
.text:00410FA2                 and     edx, 0FFFFC000h
.text:00410FA8                 add     edx, 8000h
.text:00410FAE                 or      edx, 124h
.text:00410FB4                 test    bl, 1
.text:00410FB7                 movzx   eax, dx
.text:00410FBA                 jnz     short loc_410FC1
.text:00410FBC                 or      eax, 92h
.text:00410FC1
.text:00410FC1 loc_410FC1:                             ; CODE XREF: sub_410EB0+10A↑j
.text:00410FC1                 or      [ebp+0], eax
.text:00410FC4                 xor     edx, edx
.text:00410FC6                 mov     ebx, [esp+0ECh+var_7C]
.text:00410FCA                 mov     ecx, [esp+0ECh+var_78]
.text:00410FCE                 mov     eax, edx
.text:00410FD0                 xor     esi, esi
.text:00410FD2                 mov     edx, [esp+0ECh+var_8C]
.text:00410FD6                 mov     edi, ebx
.text:00410FD8                 or      eax, edi
.text:00410FDA                 mov     [esp+0ECh+var_A8], eax
.text:00410FDE                 mov     ebx, ecx
.text:00410FE0                 mov     edi, [esp+0ECh+var_74]
.text:00410FE4                 or      ebx, esi
.text:00410FE6                 mov     esi, [esp+0ECh+var_A8]
.text:00410FEA                 mov     [esp+0ECh+var_AC], ebx
.text:00410FEE                 xor     ebx, ebx
.text:00410FF0                 mov     ecx, [esp+0ECh+var_AC]
.text:00410FF4                 mov     [ebp+34h], esi
.text:00410FF7                 mov     esi, [esp+0ECh+var_90]
.text:00410FFB                 mov     [ebp+18h], edi
.text:00410FFE                 xor     edi, edi
.text:00411000                 or      esi, ebx
.text:00411002                 mov     [ebp+30h], ecx
.text:00411005                 or      edi, edx
.text:00411007                 mov     edx, esi
.text:00411009                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00411011                 sub     edx, 0D53E8000h
.text:00411017                 mov     ebx, edi
.text:00411019                 sbb     ebx, 19DB1DEh
.text:0041101F                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00411023                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041102B                 mov     [esp+0ECh+hFile], edx
.text:0041102E                 call    sub_418680
.text:00411033                 mov     ecx, eax
.text:00411035                 shr     eax, 1Fh
.text:00411038                 dec     eax
.text:00411039                 and     ecx, eax
.text:0041103B                 mov     [ebp+38h], ecx
.text:0041103E                 mov     [esp+0ECh+hFile], esi
.text:00411041                 mov     [esp+0ECh+lpFileInformation], edi
.text:00411045                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0041104D                 mov     [esp+0ECh+lpBytesRead], 0
.text:00411055                 call    sub_4187A0
.text:0041105A                 lea     ebx, [eax+eax*4]
.text:0041105D                 xor     ecx, ecx
.text:0041105F                 lea     esi, [ebx+ebx*4]
.text:00411062                 shl     esi, 2
.text:00411065                 mov     edi, esi
.text:00411067                 shr     edi, 1Fh
.text:0041106A                 dec     edi
.text:0041106B                 and     edi, esi
.text:0041106D                 mov     [ebp+3Ch], edi
.text:00411070                 mov     esi, [esp+0ECh+var_98]
.text:00411074                 xor     edi, edi
.text:00411076                 mov     [esp+0ECh+nBufferSize], 989680h
.text:0041107E                 mov     edx, [esp+0ECh+var_94]
.text:00411082                 mov     [esp+0ECh+lpBytesRead], 0
.text:0041108A                 or      esi, ecx
.text:0041108C                 or      edi, edx
.text:0041108E                 mov     edx, esi
.text:00411090                 mov     ecx, edi
.text:00411092                 sub     edx, 0D53E8000h
.text:00411098                 sbb     ecx, 19DB1DEh
.text:0041109E                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004110A2                 mov     [esp+0ECh+hFile], edx
.text:004110A5                 call    sub_418680
.text:004110AA                 mov     ebx, eax
.text:004110AC                 shr     eax, 1Fh
.text:004110AF                 dec     eax
.text:004110B0                 and     ebx, eax
.text:004110B2                 mov     [ebp+48h], ebx
.text:004110B5                 xor     ebx, ebx
.text:004110B7                 mov     [esp+0ECh+hFile], esi
.text:004110BA                 mov     [esp+0ECh+lpFileInformation], edi
.text:004110BE                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004110C6                 mov     [esp+0ECh+lpBytesRead], 0
.text:004110CE                 call    sub_4187A0
.text:004110D3                 lea     ecx, [eax+eax*4]
.text:004110D6                 lea     esi, [ecx+ecx*4]
.text:004110D9                 shl     esi, 2
.text:004110DC                 mov     edi, esi
.text:004110DE                 shr     edi, 1Fh
.text:004110E1                 dec     edi
.text:004110E2                 and     edi, esi
.text:004110E4                 mov     [ebp+4Ch], edi
.text:004110E7                 mov     esi, [esp+0ECh+var_88]
.text:004110EB                 xor     edi, edi
.text:004110ED                 mov     [esp+0ECh+nBufferSize], 989680h
.text:004110F5                 mov     edx, [esp+0ECh+var_84]
.text:004110F9                 mov     [esp+0ECh+lpBytesRead], 0
.text:00411101                 or      esi, ebx
.text:00411103                 or      edi, edx
.text:00411105                 mov     edx, esi
.text:00411107                 mov     ebx, edi
.text:00411109                 sub     edx, 0D53E8000h
.text:0041110F                 sbb     ebx, 19DB1DEh
.text:00411115                 mov     [esp+0ECh+lpFileInformation], ebx
.text:00411119                 mov     [esp+0ECh+hFile], edx
.text:0041111C                 call    sub_418680
.text:00411121                 mov     ecx, eax
.text:00411123                 shr     eax, 1Fh
.text:00411126                 dec     eax
.text:00411127                 and     ecx, eax
.text:00411129                 mov     [ebp+40h], ecx
.text:0041112C                 mov     [esp+0ECh+lpFileInformation], edi
.text:00411130                 mov     [esp+0ECh+nBufferSize], 989680h
.text:00411138                 mov     [esp+0ECh+lpBytesRead], 0
.text:00411140                 mov     [esp+0ECh+hFile], esi
.text:00411143                 call    sub_4187A0
.text:00411148                 mov     dword ptr [ebp+50h], 200h
.text:0041114F                 lea     ebx, [eax+eax*4]
.text:00411152                 mov     edi, [esp+0ECh+var_A8]
.text:00411156                 lea     edx, [ebx+ebx*4]
.text:00411159                 mov     eax, [esp+0ECh+var_AC]
.text:0041115D                 shl     edx, 2
.text:00411160                 mov     ecx, edx
.text:00411162                 shr     ecx, 1Fh
.text:00411165                 dec     ecx
.text:00411166                 and     ecx, edx
.text:00411168                 test    edi, edi
.text:0041116A                 mov     edx, [esp+0ECh+var_A8]
.text:0041116E                 mov     [ebp+44h], ecx
.text:00411171                 js      loc_411287
.text:00411177
.text:00411177 loc_411177:                             ; CODE XREF: sub_410EB0+3DF↓j
.text:00411177                 mov     edi, [esp+0ECh+var_AC]
.text:0041117B                 xor     esi, esi
.text:0041117D                 mov     ecx, eax
.text:0041117F                 shrd    ecx, edx, 9
.text:00411183                 mov     ebx, edx
.text:00411185                 mov     eax, esi
.text:00411187                 and     edi, 1FFh
.text:0041118D                 sar     ebx, 9
.text:00411190                 or      eax, edi
.text:00411192                 jz      short loc_41119A
.text:00411194                 add     ecx, 1
.text:00411197                 adc     ebx, 0
.text:0041119A
.text:0041119A loc_41119A:                             ; CODE XREF: sub_410EB0+2E2↑j
.text:0041119A                 mov     [ebp+5Ch], ebx
.text:0041119D                 mov     esi, dword_41A070
.text:004111A3                 xor     edi, edi
.text:004111A5                 mov     [ebp+58h], ecx
.text:004111A8                 mov     ebx, dword_41A070
.text:004111AE                 mov     ecx, [esp+0ECh+var_A8]
.text:004111B2                 mov     edx, [esp+0ECh+var_AC]
.text:004111B6                 mov     [ebp+50h], ebx
.text:004111B9                 shr     ebx, 9
.text:004111BC                 mov     [esp+0ECh+lpBytesRead], edi
.text:004111C0                 mov     [esp+0ECh+lpFileInformation], ecx
.text:004111C4                 mov     [esp+0ECh+nBufferSize], esi
.text:004111C8                 mov     [esp+0ECh+hFile], edx
.text:004111CB                 call    sub_418680
.text:004111D0                 mov     [esp+0ECh+lpBytesRead], edi
.text:004111D4                 mov     ecx, [esp+0ECh+var_AC]
.text:004111D8                 mov     edi, [esp+0ECh+var_A8]
.text:004111DC                 mov     [esp+0ECh+var_BC], ebx
.text:004111E0                 mov     [esp+0ECh+var_B4], eax
.text:004111E4                 mov     [esp+0ECh+var_B0], edx
.text:004111E8                 mov     [esp+0ECh+var_B8], 0
.text:004111F0                 mov     [esp+0ECh+nBufferSize], esi
.text:004111F4                 mov     [esp+0ECh+hFile], ecx
.text:004111F7                 mov     [esp+0ECh+lpFileInformation], edi
.text:004111FB                 call    sub_4187A0
.text:00411200                 mov     ebx, edx
.text:00411202                 or      ebx, eax
.text:00411204                 jz      short loc_411260
.text:00411206                 mov     edi, [esp+0ECh+var_B4]
.text:0041120A                 mov     esi, [esp+0ECh+var_B0]
.text:0041120E                 mov     eax, [esp+0ECh+var_BC]
.text:00411212                 mov     [esp+0ECh+var_C4], edi
.text:00411216                 mov     ecx, [esp+0ECh+var_B8]
.text:0041121A                 add     [esp+0ECh+var_C4], 1
.text:0041121F                 mov     [esp+0ECh+var_C0], esi
.text:00411223                 adc     [esp+0ECh+var_C0], 0
.text:00411228                 mul     [esp+0ECh+var_C4]
.text:0041122C                 mov     edi, [esp+0ECh+var_C0]
.text:00411230                 mov     ebx, edx
.text:00411232                 mov     edx, [esp+0ECh+var_C4]
.text:00411236                 mov     esi, eax
.text:00411238                 mov     eax, ebx
.text:0041123A                 imul    ecx, edx
.text:0041123D                 mov     edx, [esp+0ECh+var_BC]
.text:00411241                 imul    edx, edi
.text:00411244                 add     eax, ecx
.text:00411246                 lea     edi, [edx+eax]
.text:00411249
.text:00411249 loc_411249:                             ; CODE XREF: sub_410EB0+3D5↓j
.text:00411249                 mov     [ebp+58h], esi
.text:0041124C                 xor     eax, eax
.text:0041124E                 mov     [ebp+5Ch], edi
.text:00411251
.text:00411251 loc_411251:                             ; CODE XREF: sub_410EB0+20↑j
.text:00411251                 add     esp, 0DCh
.text:00411257                 pop     ebx
.text:00411258                 pop     esi
.text:00411259                 pop     edi
.text:0041125A                 pop     ebp
.text:0041125B                 retn
.text:0041125B ; ---------------------------------------------------------------------------
.text:0041125C                 align 10h
.text:00411260
.text:00411260 loc_411260:                             ; CODE XREF: sub_410EB0+354↑j
.text:00411260                 mov     eax, [esp+0ECh+var_B4]
.text:00411264                 mov     edi, [esp+0ECh+var_B8]
.text:00411268                 mov     ebx, [esp+0ECh+var_B4]
.text:0041126C                 mul     [esp+0ECh+var_BC]
.text:00411270                 mov     ecx, [esp+0ECh+var_BC]
.text:00411274                 imul    ebx, edi
.text:00411277                 mov     esi, eax
.text:00411279                 mov     eax, [esp+0ECh+var_B0]
.text:0041127D                 add     edx, ebx
.text:0041127F                 imul    ecx, eax
.text:00411282                 lea     edi, [ecx+edx]
.text:00411285                 jmp     short loc_411249
.text:00411287 ; ---------------------------------------------------------------------------
.text:00411287
.text:00411287 loc_411287:                             ; CODE XREF: sub_410EB0+2C1↑j
.text:00411287                 add     eax, 1FFh
.text:0041128C                 adc     edx, 0
.text:0041128F                 jmp     loc_411177
.text:00411294 ; ---------------------------------------------------------------------------
.text:00411294
.text:00411294 loc_411294:                             ; CODE XREF: sub_410EB0+A9↑j
.text:00411294                 mov     [esp+0ECh+hFile], esi ; hFile
.text:00411297                 lea     ecx, [esp+0ECh+FileInformation.nFileSizeHigh]
.text:0041129E                 mov     [esp+0ECh+lpFileInformation], ecx ; lpFileSizeHigh
.text:004112A2                 call    GetFileSize
.text:004112A7                 sub     esp, 8
.text:004112AA                 mov     [esp+0ECh+FileInformation.nFileSizeLow], eax
.text:004112B1                 jmp     loc_410F60
.text:004112B6 ; ---------------------------------------------------------------------------
.text:004112B6
.text:004112B6 loc_4112B6:                             ; CODE XREF: sub_410EB0+96↑j
.text:004112B6                 mov     [esp+0ECh+TotalBytesAvail], 0
.text:004112BE                 lea     ecx, [esp+0ECh+TotalBytesAvail]
.text:004112C2                 mov     [esp+0ECh+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
.text:004112CA                 mov     [esp+0ECh+lpTotalBytesAvail], ecx ; lpTotalBytesAvail
.text:004112CE                 mov     [esp+0ECh+lpBytesRead], 0 ; lpBytesRead
.text:004112D6                 mov     [esp+0ECh+nBufferSize], 0 ; nBufferSize
.text:004112DE                 mov     [esp+0ECh+lpFileInformation], 0 ; lpBuffer
.text:004112E6                 mov     [esp+0ECh+hFile], esi ; hNamedPipe
.text:004112E9                 call    PeekNamedPipe
.text:004112EE                 sub     esp, 18h
.text:004112F1                 test    eax, eax
.text:004112F3                 jz      short loc_41130E
.text:004112F5                 mov     ecx, [esp+0ECh+TotalBytesAvail]
.text:004112F9                 xor     eax, eax
.text:004112FB                 mov     [esp+0ECh+FileInformation.nFileSizeHigh], eax
.text:00411302                 mov     [esp+0ECh+FileInformation.nFileSizeLow], ecx
.text:00411309                 jmp     loc_410F4C
.text:0041130E ; ---------------------------------------------------------------------------
.text:0041130E
.text:0041130E loc_41130E:                             ; CODE XREF: sub_410EB0+443↑j
.text:0041130E                 mov     ecx, [esp+0ECh+FileInformation.nFileSizeLow]
.text:00411315                 jmp     loc_410F4C
.text:00411315 ; ---------------------------------------------------------------------------
.text:0041131A                 align 10h
.text:00411320
.text:00411320 loc_411320:                             ; CODE XREF: sub_410EB0+59↑j
.text:00411320                 mov     edx, 1000h
.text:00411325                 jmp     loc_410F0F
.text:00411325 ; ---------------------------------------------------------------------------
.text:0041132A                 align 10h
.text:00411330
.text:00411330 loc_411330:                             ; CODE XREF: sub_410EB0+50↑j
.text:00411330                 mov     edx, 2000h
.text:00411335                 jmp     loc_410F0F
.text:00411335 sub_410EB0      endp
.text:00411335
.text:00411335 ; ---------------------------------------------------------------------------
.text:0041133A aLnk            db '.lnk',0             ; DATA XREF: sub_411380+E0↓o
.text:0041133A                                         ; .text:00411A2A↓o ...
.text:0041133F ; const CHAR aKernel32[]
.text:0041133F aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_411380+12D↓o
.text:0041133F                                         ; .text:004120DB↓o
.text:00411348 ; const CHAR aGetcompressedf[]
.text:00411348 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:00411348                                         ; DATA XREF: sub_411380+13E↓o
.text:00411348                                         ; .text:004120EC↓o
.text:0041135F ; const CHAR aGetbinarytypea[]
.text:0041135F aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_411380+333↓o
.text:0041135F                                         ; .text:00411A86↓o ...
.text:0041136E ; const char aPathext[]
.text:0041136E aPathext        db 'PATHEXT',0          ; DATA XREF: sub_411380:loc_411767↓o
.text:0041136E                                         ; .text:loc_411B30↓o ...
.text:00411376                 align 10h
.text:00411380
.text:00411380 ; =============== S U B R O U T I N E =======================================
.text:00411380
.text:00411380
.text:00411380 ; int __cdecl sub_411380(char *String1, int)
.text:00411380 sub_411380      proc near               ; CODE XREF: sub_412160+3CD↓p
.text:00411380                                         ; sub_410310+2335↓p
.text:00411380
.text:00411380 Str             = dword ptr -6Ch
.text:00411380 lpProcName      = dword ptr -68h
.text:00411380 var_64          = dword ptr -64h
.text:00411380 var_60          = dword ptr -60h
.text:00411380 var_5C          = dword ptr -5Ch
.text:00411380 var_4C          = dword ptr -4Ch
.text:00411380 var_48          = dword ptr -48h
.text:00411380 var_44          = dword ptr -44h
.text:00411380 var_40          = dword ptr -40h
.text:00411380 var_3C          = dword ptr -3Ch
.text:00411380 var_38          = dword ptr -38h
.text:00411380 lpRootPathName  = dword ptr -30h
.text:00411380 var_2C          = byte ptr -2Ch
.text:00411380 var_28          = dword ptr -28h
.text:00411380 var_24          = dword ptr -24h
.text:00411380 var_20          = dword ptr -20h
.text:00411380 var_1C          = dword ptr -1Ch
.text:00411380 var_18          = byte ptr -18h
.text:00411380 String1         = dword ptr  4
.text:00411380 arg_4           = dword ptr  8
.text:00411380
.text:00411380                 push    ebp
.text:00411381                 push    edi
.text:00411382                 push    esi
.text:00411383                 push    ebx
.text:00411384                 sub     esp, 5Ch
.text:00411387                 mov     edx, [esp+6Ch+String1]
.text:0041138B                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:0041138E                 call    sub_413AE0
.text:00411393                 mov     [esp+6Ch+Str], eax
.text:00411396                 call    sub_412DB0
.text:0041139B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0041139F                 test    eax, eax
.text:004113A1                 jz      loc_4115D3
.text:004113A7                 mov     [esp+6Ch+Str], eax ; Str
.text:004113AA                 call    strlen
.text:004113AF                 mov     edx, [esp+6Ch+arg_4]
.text:004113B3                 mov     ebx, eax
.text:004113B5                 mov     esi, [edx+0Ch]
.text:004113B8                 mov     edi, [edx+8]
.text:004113BB                 mov     eax, esi
.text:004113BD                 or      eax, edi
.text:004113BF                 jz      loc_4117E0
.text:004113C5                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:004113C9                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:004113CC                 call    GetDriveTypeA
.text:004113D1                 sub     esp, 4
.text:004113D4                 cmp     eax, 4
.text:004113D7                 jz      loc_4117E0
.text:004113DD
.text:004113DD loc_4113DD:                             ; CODE XREF: sub_411380+48A↓j
.text:004113DD                                         ; sub_411380+4B2↓j
.text:004113DD                 mov     edx, [esp+6Ch+arg_4]
.text:004113E1                 mov     esi, [edx+14h]
.text:004113E4                 mov     edi, [edx+10h]
.text:004113E7                 mov     ecx, esi
.text:004113E9                 or      ecx, edi
.text:004113EB                 jnz     short loc_411415
.text:004113ED                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:004113F1                 xor     esi, esi
.text:004113F3                 xor     edi, edi
.text:004113F5                 test    ebp, ebp
.text:004113F7                 jz      short loc_411407
.text:004113F9                 movzx   ebx, byte ptr [ebp+0]
.text:004113FD                 test    bl, bl
.text:004113FF                 mov     cl, bl
.text:00411401                 jnz     loc_411791
.text:00411407
.text:00411407 loc_411407:                             ; CODE XREF: sub_411380+77↑j
.text:00411407                 xor     eax, eax
.text:00411409                 xor     edx, edx
.text:0041140B
.text:0041140B loc_41140B:                             ; CODE XREF: sub_411380+458↓j
.text:0041140B                 mov     ebp, [esp+6Ch+arg_4]
.text:0041140F                 mov     [ebp+10h], eax
.text:00411412                 mov     [ebp+14h], edx
.text:00411415
.text:00411415 loc_411415:                             ; CODE XREF: sub_411380+6B↑j
.text:00411415                 mov     edi, [esp+6Ch+String1]
.text:00411419                 xor     ebx, ebx
.text:0041141B                 test    edi, edi
.text:0041141D                 jz      loc_411693
.text:00411423                 mov     esi, [esp+6Ch+String1]
.text:00411427                 cmp     byte ptr [esi], 0
.text:0041142A                 jnz     loc_4116A0
.text:00411430
.text:00411430 loc_411430:                             ; CODE XREF: sub_411380+38C↓j
.text:00411430                                         ; sub_411380+397↓j
.text:00411430                 mov     ebp, [esp+6Ch+String1]
.text:00411434                 test    ebp, ebp
.text:00411436                 jz      loc_411693
.text:0041143C                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00411444                 mov     edi, [esp+6Ch+String1]
.text:00411448                 mov     [esp+6Ch+Str], edi ; Str
.text:0041144B                 call    strrchr
.text:00411450                 test    eax, eax
.text:00411452                 jz      loc_411693
.text:00411458                 cld
.text:00411459                 mov     ecx, 5
.text:0041145E                 mov     esi, eax
.text:00411460                 mov     edi, offset aLnk ; ".lnk"
.text:00411465                 repe cmpsb
.text:00411467                 setz    cl
.text:0041146A                 movzx   eax, cl
.text:0041146D                 lea     esi, [esi+0]
.text:00411470
.text:00411470 loc_411470:                             ; CODE XREF: sub_411380+315↓j
.text:00411470                 test    eax, eax
.text:00411472                 jz      short loc_41147A
.text:00411474                 or      ebx, 0A000h
.text:0041147A
.text:0041147A loc_41147A:                             ; CODE XREF: sub_411380+F2↑j
.text:0041147A                 mov     esi, [esp+6Ch+arg_4]
.text:0041147E                 xor     ecx, ecx
.text:00411480                 mov     edi, ds:dword_41B590
.text:00411486                 or      [esi], ebx
.text:00411488                 mov     ebx, [esi+14h]
.text:0041148B                 mov     ebp, [esi+10h]
.text:0041148E                 mov     eax, ebx
.text:00411490                 xor     eax, ecx
.text:00411492                 xor     ebp, edi
.text:00411494                 or      eax, ebp
.text:00411496                 jnz     loc_411620
.text:0041149C
.text:0041149C loc_41149C:                             ; CODE XREF: sub_411380+30E↓j
.text:0041149C                 mov     ecx, dword_41A070
.text:004114A2                 xor     esi, esi
.text:004114A4                 xor     edi, edi
.text:004114A6                 mov     edx, [esp+6Ch+arg_4]
.text:004114AA                 mov     [edx+50h], ecx
.text:004114AD                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:004114B4                 call    LoadLibraryA
.text:004114B9                 sub     esp, 4
.text:004114BC                 mov     ebp, eax
.text:004114BE                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004114C6                 mov     [esp+6Ch+Str], eax ; hModule
.text:004114C9                 call    GetProcAddress
.text:004114CE                 sub     esp, 8
.text:004114D1                 test    eax, eax
.text:004114D3                 jz      short loc_411508
.text:004114D5                 mov     ebx, [esp+6Ch+String1]
.text:004114D9                 lea     esi, [esp+6Ch+var_2C]
.text:004114DD                 mov     [esp+6Ch+lpProcName], esi
.text:004114E1                 mov     [esp+6Ch+Str], ebx
.text:004114E4                 call    eax
.text:004114E6                 sub     esp, 8
.text:004114E9                 mov     ebx, eax
.text:004114EB                 cmp     eax, 0FFFFFFFFh
.text:004114EE                 jz      loc_411609
.text:004114F4
.text:004114F4 loc_4114F4:                             ; CODE XREF: sub_411380+29A↓j
.text:004114F4                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:004114F8                 mov     ecx, ebx
.text:004114FA                 xor     edi, edi
.text:004114FC                 xor     ebx, ebx
.text:004114FE                 mov     edx, esi
.text:00411500                 mov     esi, ecx
.text:00411502                 or      esi, edi
.text:00411504                 mov     edi, ebx
.text:00411506                 or      edi, edx
.text:00411508
.text:00411508 loc_411508:                             ; CODE XREF: sub_411380+153↑j
.text:00411508                                         ; sub_411380+294↓j
.text:00411508                 test    ebp, ebp
.text:0041150A                 jz      short loc_411517
.text:0041150C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0041150F                 call    FreeLibrary
.text:00411514                 sub     esp, 4
.text:00411517
.text:00411517 loc_411517:                             ; CODE XREF: sub_411380+18A↑j
.text:00411517                 mov     ebp, edi
.text:00411519                 mov     edx, ebp
.text:0041151B                 mov     edi, esi
.text:0041151D                 or      edx, esi
.text:0041151F                 jnz     short loc_41152B
.text:00411521                 mov     eax, [esp+6Ch+arg_4]
.text:00411525                 mov     edi, [eax+30h]
.text:00411528                 mov     ebp, [eax+34h]
.text:0041152B
.text:0041152B loc_41152B:                             ; CODE XREF: sub_411380+19F↑j
.text:0041152B                 mov     [esp+6Ch+lpProcName], ebp
.text:0041152F                 mov     ebx, dword_41A070
.text:00411535                 xor     esi, esi
.text:00411537                 mov     [esp+6Ch+var_60], esi
.text:0041153B                 mov     [esp+6Ch+Str], edi
.text:0041153E                 mov     [esp+6Ch+var_64], ebx
.text:00411542                 call    sub_418680
.text:00411547                 mov     [esp+6Ch+var_3C], eax
.text:0041154B                 mov     ecx, dword_41A070
.text:00411551                 mov     [esp+6Ch+lpProcName], ebp
.text:00411555                 mov     [esp+6Ch+var_38], edx
.text:00411559                 shr     ecx, 9
.text:0041155C                 mov     [esp+6Ch+var_44], ecx
.text:00411560                 mov     [esp+6Ch+var_40], 0
.text:00411568                 mov     [esp+6Ch+var_64], ebx
.text:0041156C                 mov     [esp+6Ch+var_60], esi
.text:00411570                 mov     [esp+6Ch+Str], edi
.text:00411573                 call    sub_4187A0
.text:00411578                 mov     ebp, edx
.text:0041157A                 or      ebp, eax
.text:0041157C                 jz      short loc_4115E0
.text:0041157E                 mov     ebp, [esp+6Ch+var_3C]
.text:00411582                 mov     esi, [esp+6Ch+var_38]
.text:00411586                 mov     eax, [esp+6Ch+var_44]
.text:0041158A                 mov     [esp+6Ch+var_4C], ebp
.text:0041158E                 mov     ecx, [esp+6Ch+var_40]
.text:00411592                 mov     ebx, [esp+6Ch+var_44]
.text:00411596                 add     [esp+6Ch+var_4C], 1
.text:0041159B                 mov     [esp+6Ch+var_48], esi
.text:0041159F                 mov     edi, [esp+6Ch+var_4C]
.text:004115A3                 adc     [esp+6Ch+var_48], 0
.text:004115A8                 mul     [esp+6Ch+var_4C]
.text:004115AC                 imul    ecx, edi
.text:004115AF                 mov     esi, eax
.text:004115B1                 mov     eax, [esp+6Ch+var_48]
.text:004115B5                 add     edx, ecx
.text:004115B7                 imul    ebx, eax
.text:004115BA                 lea     edi, [ebx+edx]
.text:004115BD
.text:004115BD loc_4115BD:                             ; CODE XREF: sub_411380+287↓j
.text:004115BD                 mov     ebx, [esp+6Ch+arg_4]
.text:004115C1                 mov     [ebx+58h], esi
.text:004115C4                 mov     esi, [esp+6Ch+lpRootPathName]
.text:004115C8                 mov     [ebx+5Ch], edi
.text:004115CB                 mov     [esp+6Ch+Str], esi ; Block
.text:004115CE                 call    free
.text:004115D3
.text:004115D3 loc_4115D3:                             ; CODE XREF: sub_411380+21↑j
.text:004115D3                 add     esp, 5Ch
.text:004115D6                 xor     eax, eax
.text:004115D8                 pop     ebx
.text:004115D9                 pop     esi
.text:004115DA                 pop     edi
.text:004115DB                 pop     ebp
.text:004115DC                 retn
.text:004115DC ; ---------------------------------------------------------------------------
.text:004115DD                 align 10h
.text:004115E0
.text:004115E0 loc_4115E0:                             ; CODE XREF: sub_411380+1FC↑j
.text:004115E0                 mov     eax, [esp+6Ch+var_3C]
.text:004115E4                 mov     edi, [esp+6Ch+var_40]
.text:004115E8                 mov     ecx, [esp+6Ch+var_3C]
.text:004115EC                 mul     [esp+6Ch+var_44]
.text:004115F0                 mov     ebx, [esp+6Ch+var_44]
.text:004115F4                 imul    ecx, edi
.text:004115F7                 mov     ebp, edx
.text:004115F9                 mov     esi, eax
.text:004115FB                 mov     edx, [esp+6Ch+var_38]
.text:004115FF                 add     ebp, ecx
.text:00411601                 imul    ebx, edx
.text:00411604                 lea     edi, [ebx+ebp]
.text:00411607                 jmp     short loc_4115BD
.text:00411609 ; ---------------------------------------------------------------------------
.text:00411609
.text:00411609 loc_411609:                             ; CODE XREF: sub_411380+16E↑j
.text:00411609                 call    GetLastError
.text:0041160E                 xor     esi, esi
.text:00411610                 xor     edi, edi
.text:00411612                 test    eax, eax
.text:00411614                 jnz     loc_411508
.text:0041161A                 jmp     loc_4114F4
.text:0041161A ; ---------------------------------------------------------------------------
.text:0041161F                 align 10h
.text:00411620
.text:00411620 loc_411620:                             ; CODE XREF: sub_411380+116↑j
.text:00411620                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00411624                 lea     ecx, [esp+6Ch+var_20]
.text:00411628                 lea     ebx, [esp+6Ch+var_1C]
.text:0041162C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:00411630                 lea     edi, [esp+6Ch+var_24]
.text:00411634                 lea     ebp, [esp+6Ch+var_28]
.text:00411638                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:0041163C                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:00411640                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:00411644                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:00411647                 call    sub_414500
.text:0041164C                 test    eax, eax
.text:0041164E                 jnz     short loc_411670
.text:00411650                 mov     [esp+6Ch+var_28], 1
.text:00411658                 mov     [esp+6Ch+var_24], 200h
.text:00411660                 mov     [esp+6Ch+var_20], 0
.text:00411668                 mov     [esp+6Ch+var_1C], 0
.text:00411670
.text:00411670 loc_411670:                             ; CODE XREF: sub_411380+2CE↑j
.text:00411670                 mov     ebp, [esp+6Ch+var_24]
.text:00411674                 mov     edi, [esp+6Ch+var_28]
.text:00411678                 mov     eax, [esp+6Ch+arg_4]
.text:0041167C                 imul    ebp, edi
.text:0041167F                 mov     esi, [eax+10h]
.text:00411682                 mov     dword_41A070, ebp
.text:00411688                 mov     ds:dword_41B590, esi
.text:0041168E                 jmp     loc_41149C
.text:00411693 ; ---------------------------------------------------------------------------
.text:00411693
.text:00411693 loc_411693:                             ; CODE XREF: sub_411380+9D↑j
.text:00411693                                         ; sub_411380+B6↑j ...
.text:00411693                 xor     eax, eax
.text:00411695                 jmp     loc_411470
.text:00411695 ; ---------------------------------------------------------------------------
.text:0041169A                 align 10h
.text:004116A0
.text:004116A0 loc_4116A0:                             ; CODE XREF: sub_411380+AA↑j
.text:004116A0                 mov     [esp+6Ch+Str], offset LibFileName ; "KERNEL32.DLL"
.text:004116A7                 xor     ebp, ebp
.text:004116A9                 call    GetModuleHandleA
.text:004116AE                 sub     esp, 4
.text:004116B1                 mov     edi, eax
.text:004116B3                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:004116BB                 mov     [esp+6Ch+Str], eax ; hModule
.text:004116BE                 call    GetProcAddress
.text:004116C3                 sub     esp, 8
.text:004116C6                 mov     edx, eax
.text:004116C8                 test    eax, eax
.text:004116CA                 jz      short loc_4116E4
.text:004116CC                 mov     eax, [esp+6Ch+String1]
.text:004116D0                 lea     ecx, [esp+6Ch+var_18]
.text:004116D4                 mov     [esp+6Ch+lpProcName], ecx
.text:004116D8                 mov     [esp+6Ch+Str], eax
.text:004116DB                 call    edx
.text:004116DD                 sub     esp, 8
.text:004116E0                 test    eax, eax
.text:004116E2                 jnz     short loc_411748
.text:004116E4
.text:004116E4 loc_4116E4:                             ; CODE XREF: sub_411380+34A↑j
.text:004116E4                 mov     edx, ds:Str
.text:004116EA                 test    edx, edx
.text:004116EC                 jz      short loc_411767
.text:004116EE
.text:004116EE loc_4116EE:                             ; CODE XREF: sub_411380+3FA↓j
.text:004116EE                                         ; sub_411380+40C↓j
.text:004116EE                 mov     eax, [esp+6Ch+String1]
.text:004116F2                 test    eax, eax
.text:004116F4                 jz      short loc_4116FF
.text:004116F6                 mov     esi, [esp+6Ch+String1]
.text:004116FA                 cmp     byte ptr [esi], 0
.text:004116FD                 jnz     short loc_41171C
.text:004116FF
.text:004116FF loc_4116FF:                             ; CODE XREF: sub_411380+374↑j
.text:004116FF                                         ; sub_411380+3B0↓j ...
.text:004116FF                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00411702                 call    FreeLibrary
.text:00411707                 sub     esp, 4
.text:0041170A                 test    ebp, ebp
.text:0041170C                 jz      loc_411430
.text:00411712                 mov     ebx, 49h ; 'I'
.text:00411717                 jmp     loc_411430
.text:0041171C ; ---------------------------------------------------------------------------
.text:0041171C
.text:0041171C loc_41171C:                             ; CODE XREF: sub_411380+37D↑j
.text:0041171C                 mov     [esp+6Ch+Str], esi ; Str
.text:0041171F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00411727                 call    strrchr
.text:0041172C                 test    eax, eax
.text:0041172E                 mov     esi, eax
.text:00411730                 jz      short loc_4116FF
.text:00411732                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:00411736                 mov     ecx, ds:Str
.text:0041173C                 mov     [esp+6Ch+Str], ecx ; Str
.text:0041173F                 call    strstr
.text:00411744                 test    eax, eax
.text:00411746                 jz      short loc_41174F
.text:00411748
.text:00411748 loc_411748:                             ; CODE XREF: sub_411380+362↑j
.text:00411748                                         ; sub_411380+3E5↓j
.text:00411748                 mov     ebp, 1
.text:0041174D                 jmp     short loc_4116FF
.text:0041174F ; ---------------------------------------------------------------------------
.text:0041174F
.text:0041174F loc_41174F:                             ; CODE XREF: sub_411380+3C6↑j
.text:0041174F                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:00411753                 mov     edx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411759                 mov     [esp+6Ch+Str], edx ; Str
.text:0041175C                 call    strstr
.text:00411761                 test    eax, eax
.text:00411763                 jz      short loc_4116FF
.text:00411765                 jmp     short loc_411748
.text:00411767 ; ---------------------------------------------------------------------------
.text:00411767
.text:00411767 loc_411767:                             ; CODE XREF: sub_411380+36C↑j
.text:00411767                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:0041176E                 call    getenv
.text:00411773                 mov     ds:Str, eax
.text:00411778                 test    eax, eax
.text:0041177A                 jnz     loc_4116EE
.text:00411780                 mov     esi, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411786                 mov     ds:Str, esi
.text:0041178C                 jmp     loc_4116EE
.text:00411791 ; ---------------------------------------------------------------------------
.text:00411791
.text:00411791 loc_411791:                             ; CODE XREF: sub_411380+81↑j
.text:00411791                                         ; sub_411380+452↓j
.text:00411791                 shld    edi, esi, 8
.text:00411795                 movsx   eax, cl
.text:00411798                 shl     esi, 8
.text:0041179B                 cdq
.text:0041179C                 add     esi, eax
.text:0041179E                 adc     edi, edx
.text:004117A0                 mov     edx, edi
.text:004117A2                 xor     ebx, ebx
.text:004117A4                 and     edx, 0FF000000h
.text:004117AA                 mov     eax, edx
.text:004117AC                 or      eax, ebx
.text:004117AE                 jz      short loc_4117C9
.text:004117B0                 mov     ecx, edx
.text:004117B2                 xor     eax, eax
.text:004117B4                 shr     ecx, 10h
.text:004117B7                 mov     edx, esi
.text:004117B9                 xor     edx, ecx
.text:004117BB                 mov     ecx, edi
.text:004117BD                 xor     ecx, eax
.text:004117BF                 mov     esi, edx
.text:004117C1                 mov     edi, ecx
.text:004117C3                 and     edi, 0FFFFFFh
.text:004117C9
.text:004117C9 loc_4117C9:                             ; CODE XREF: sub_411380+42E↑j
.text:004117C9                 inc     ebp
.text:004117CA                 movzx   ebx, byte ptr [ebp+0]
.text:004117CE                 test    bl, bl
.text:004117D0                 mov     cl, bl
.text:004117D2                 jnz     short loc_411791
.text:004117D4                 mov     eax, esi
.text:004117D6                 mov     edx, edi
.text:004117D8                 jmp     loc_41140B
.text:004117D8 ; ---------------------------------------------------------------------------
.text:004117DD                 align 10h
.text:004117E0
.text:004117E0 loc_4117E0:                             ; CODE XREF: sub_411380+3F↑j
.text:004117E0                                         ; sub_411380+57↑j
.text:004117E0                 mov     edi, [esp+6Ch+lpRootPathName]
.text:004117E4                 mov     ebp, [esp+6Ch+String1]
.text:004117E8                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:004117EC                 mov     [esp+6Ch+Str], ebp ; String1
.text:004117EF                 call    _stricmp
.text:004117F4                 test    eax, eax
.text:004117F6                 jnz     short loc_411810
.text:004117F8                 mov     ebx, [esp+6Ch+arg_4]
.text:004117FC                 mov     dword ptr [ebx+8], 5
.text:00411803                 mov     dword ptr [ebx+0Ch], 50000h
.text:0041180A                 jmp     loc_4113DD
.text:0041180A ; ---------------------------------------------------------------------------
.text:0041180F                 align 10h
.text:00411810
.text:00411810 loc_411810:                             ; CODE XREF: sub_411380+476↑j
.text:00411810                 mov     ebp, [esp+6Ch+String1]
.text:00411814                 xor     esi, esi
.text:00411816                 xor     edi, edi
.text:00411818                 add     ebp, ebx
.text:0041181A                 jz      short loc_411824
.text:0041181C                 movzx   ecx, byte ptr [ebp+0]
.text:00411820                 test    cl, cl
.text:00411822                 jnz     short loc_411837
.text:00411824
.text:00411824 loc_411824:                             ; CODE XREF: sub_411380+49A↑j
.text:00411824                 xor     eax, eax
.text:00411826                 xor     edx, edx
.text:00411828
.text:00411828 loc_411828:                             ; CODE XREF: sub_411380+4FE↓j
.text:00411828                 mov     ebp, [esp+6Ch+arg_4]
.text:0041182C                 mov     [ebp+8], eax
.text:0041182F                 mov     [ebp+0Ch], edx
.text:00411832                 jmp     loc_4113DD
.text:00411837 ; ---------------------------------------------------------------------------
.text:00411837
.text:00411837 loc_411837:                             ; CODE XREF: sub_411380+4A2↑j
.text:00411837                                         ; sub_411380+4F8↓j
.text:00411837                 shld    edi, esi, 8
.text:0041183B                 movsx   eax, cl
.text:0041183E                 shl     esi, 8
.text:00411841                 cdq
.text:00411842                 add     esi, eax
.text:00411844                 adc     edi, edx
.text:00411846                 mov     edx, edi
.text:00411848                 xor     ebx, ebx
.text:0041184A                 and     edx, 0FF000000h
.text:00411850                 mov     eax, edx
.text:00411852                 or      eax, ebx
.text:00411854                 jz      short loc_41186F
.text:00411856                 mov     ecx, edx
.text:00411858                 xor     eax, eax
.text:0041185A                 shr     ecx, 10h
.text:0041185D                 mov     edx, esi
.text:0041185F                 xor     edx, ecx
.text:00411861                 mov     ecx, edi
.text:00411863                 xor     ecx, eax
.text:00411865                 mov     esi, edx
.text:00411867                 mov     edi, ecx
.text:00411869                 and     edi, 0FFFFFFh
.text:0041186F
.text:0041186F loc_41186F:                             ; CODE XREF: sub_411380+4D4↑j
.text:0041186F                 inc     ebp
.text:00411870                 movzx   ebx, byte ptr [ebp+0]
.text:00411874                 test    bl, bl
.text:00411876                 mov     cl, bl
.text:00411878                 jnz     short loc_411837
.text:0041187A                 mov     eax, esi
.text:0041187C                 mov     edx, edi
.text:0041187E                 jmp     short loc_411828
.text:0041187E sub_411380      endp
.text:0041187E
.text:00411880
.text:00411880 ; =============== S U B R O U T I N E =======================================
.text:00411880
.text:00411880
.text:00411880 ; int __cdecl sub_411880(LPCSTR)
.text:00411880 sub_411880      proc near               ; CODE XREF: sub_413C00+CA↓p
.text:00411880
.text:00411880 lpRootPathName  = dword ptr -83Ch
.text:00411880 lpVolumeNameBuffer= dword ptr -838h
.text:00411880 nVolumeNameSize = dword ptr -834h
.text:00411880 lpVolumeSerialNumber= dword ptr -830h
.text:00411880 lpMaximumComponentLength= dword ptr -82Ch
.text:00411880 lpFileSystemFlags= dword ptr -828h
.text:00411880 lpFileSystemNameBuffer= dword ptr -824h
.text:00411880 nFileSystemNameSize= dword ptr -820h
.text:00411880 VolumeSerialNumber= dword ptr -818h
.text:00411880 MaximumComponentLength= dword ptr -814h
.text:00411880 FileSystemFlags = dword ptr -810h
.text:00411880 FileSystemNameBuffer= byte ptr -80Ch
.text:00411880 VolumeNameBuffer= byte ptr -40Ch
.text:00411880 var_4           = dword ptr -4
.text:00411880 arg_0           = dword ptr  4
.text:00411880
.text:00411880                 sub     esp, 83Ch
.text:00411886                 mov     [esp+83Ch+var_4], ebx
.text:0041188D                 mov     ebx, [esp+83Ch+arg_0]
.text:00411894                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00411897                 call    sub_413AE0
.text:0041189C                 mov     [esp+83Ch+lpRootPathName], eax
.text:0041189F                 call    sub_412DB0
.text:004118A4                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:004118A7                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:004118AB                 mov     ebx, eax
.text:004118AD                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:004118B1                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:004118B5                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:004118B9                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:004118BD                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:004118C1                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004118C5                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:004118CC                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004118D0                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:004118D4                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004118DC                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:004118E4                 call    GetVolumeInformationA
.text:004118E9                 sub     esp, 20h
.text:004118EC                 test    eax, eax
.text:004118EE                 setz    cl
.text:004118F1                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:004118F4                 movzx   edx, cl
.text:004118F7                 dec     edx
.text:004118F8                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:004118FC                 call    free
.text:00411901                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00411905                 mov     ebx, [esp+83Ch+var_4]
.text:0041190C                 add     esp, 83Ch
.text:00411912                 retn
.text:00411912 sub_411880      endp
.text:00411912
.text:00411912 ; ---------------------------------------------------------------------------
.text:00411913                 align 10h
.text:00411920                 push    ebp
.text:00411921                 push    edi
.text:00411922                 xor     edi, edi
.text:00411924                 push    esi
.text:00411925                 xor     esi, esi
.text:00411927                 push    ebx
.text:00411928                 mov     ebp, [esp+14h]
.text:0041192C                 test    ebp, ebp
.text:0041192E                 jz      short loc_411938
.text:00411930                 movzx   ecx, byte ptr [ebp+0]
.text:00411934                 test    cl, cl
.text:00411936                 jnz     short loc_411941
.text:00411938
.text:00411938 loc_411938:                             ; CODE XREF: .text:0041192E↑j
.text:00411938                 xor     eax, eax
.text:0041193A                 xor     edx, edx
.text:0041193C
.text:0041193C loc_41193C:                             ; CODE XREF: .text:00411988↓j
.text:0041193C                 pop     ebx
.text:0041193D                 pop     esi
.text:0041193E                 pop     edi
.text:0041193F                 pop     ebp
.text:00411940                 retn
.text:00411941 ; ---------------------------------------------------------------------------
.text:00411941
.text:00411941 loc_411941:                             ; CODE XREF: .text:00411936↑j
.text:00411941                                         ; .text:00411982↓j
.text:00411941                 shld    edi, esi, 8
.text:00411945                 movsx   eax, cl
.text:00411948                 shl     esi, 8
.text:0041194B                 cdq
.text:0041194C                 add     esi, eax
.text:0041194E                 adc     edi, edx
.text:00411950                 mov     edx, edi
.text:00411952                 xor     ebx, ebx
.text:00411954                 and     edx, 0FF000000h
.text:0041195A                 mov     eax, edx
.text:0041195C                 or      eax, ebx
.text:0041195E                 jz      short loc_411979
.text:00411960                 mov     ecx, edx
.text:00411962                 xor     eax, eax
.text:00411964                 shr     ecx, 10h
.text:00411967                 mov     edx, esi
.text:00411969                 xor     edx, ecx
.text:0041196B                 mov     ecx, edi
.text:0041196D                 xor     ecx, eax
.text:0041196F                 mov     esi, edx
.text:00411971                 mov     edi, ecx
.text:00411973                 and     edi, 0FFFFFFh
.text:00411979
.text:00411979 loc_411979:                             ; CODE XREF: .text:0041195E↑j
.text:00411979                 inc     ebp
.text:0041197A                 movzx   ebx, byte ptr [ebp+0]
.text:0041197E                 test    bl, bl
.text:00411980                 mov     cl, bl
.text:00411982                 jnz     short loc_411941
.text:00411984                 mov     eax, esi
.text:00411986                 mov     edx, edi
.text:00411988                 jmp     short loc_41193C
.text:00411988 ; ---------------------------------------------------------------------------
.text:0041198A                 align 10h
.text:00411990                 sub     esp, 2Ch
.text:00411993                 lea     edx, [esp+24h]
.text:00411997                 lea     ecx, [esp+28h]
.text:0041199B                 mov     [esp+0Ch], edx
.text:0041199F                 lea     edx, [esp+1Ch]
.text:004119A3                 mov     [esp+4], edx
.text:004119A7                 mov     edx, [esp+30h]
.text:004119AB                 mov     [esp+10h], ecx
.text:004119AF                 lea     ecx, [esp+20h]
.text:004119B3                 mov     [esp+8], ecx
.text:004119B7                 mov     [esp], edx
.text:004119BA                 call    sub_414500
.text:004119BF                 test    eax, eax
.text:004119C1                 jnz     short loc_4119E3
.text:004119C3                 mov     dword ptr [esp+1Ch], 1
.text:004119CB                 mov     dword ptr [esp+20h], 200h
.text:004119D3                 mov     dword ptr [esp+24h], 0
.text:004119DB                 mov     dword ptr [esp+28h], 0
.text:004119E3
.text:004119E3 loc_4119E3:                             ; CODE XREF: .text:004119C1↑j
.text:004119E3                 mov     eax, [esp+20h]
.text:004119E7                 mov     ecx, [esp+1Ch]
.text:004119EB                 add     esp, 2Ch
.text:004119EE                 imul    eax, ecx
.text:004119F1                 retn
.text:004119F1 ; ---------------------------------------------------------------------------
.text:004119F2                 align 10h
.text:00411A00                 sub     esp, 1Ch
.text:00411A03                 mov     eax, [esp+20h]
.text:00411A07                 mov     [esp+14h], esi
.text:00411A0B                 mov     [esp+18h], edi
.text:00411A0F                 test    eax, eax
.text:00411A11                 jz      short loc_411A50
.text:00411A13                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411A1B                 mov     [esp], eax
.text:00411A1E                 call    strrchr
.text:00411A23                 test    eax, eax
.text:00411A25                 jz      short loc_411A50
.text:00411A27                 cld
.text:00411A28                 mov     esi, eax
.text:00411A2A                 mov     edi, offset aLnk ; ".lnk"
.text:00411A2F                 mov     ecx, 5
.text:00411A34                 repe cmpsb
.text:00411A36                 setz    dl
.text:00411A39                 movzx   eax, dl
.text:00411A3C                 lea     esi, [esi+0]
.text:00411A40
.text:00411A40 loc_411A40:                             ; CODE XREF: .text:00411A52↓j
.text:00411A40                 mov     esi, [esp+14h]
.text:00411A44                 mov     edi, [esp+18h]
.text:00411A48                 add     esp, 1Ch
.text:00411A4B                 retn
.text:00411A4B ; ---------------------------------------------------------------------------
.text:00411A4C                 align 10h
.text:00411A50
.text:00411A50 loc_411A50:                             ; CODE XREF: .text:00411A11↑j
.text:00411A50                                         ; .text:00411A25↑j
.text:00411A50                 xor     eax, eax
.text:00411A52                 jmp     short loc_411A40
.text:00411A52 ; ---------------------------------------------------------------------------
.text:00411A54                 align 10h
.text:00411A60                 sub     esp, 1Ch
.text:00411A63                 mov     [esp+10h], ebx
.text:00411A67                 mov     ebx, [esp+20h]
.text:00411A6B                 mov     [esp+14h], esi
.text:00411A6F                 mov     [esp+18h], edi
.text:00411A73                 xor     edi, edi
.text:00411A75                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00411A7C                 call    GetModuleHandleA
.text:00411A81                 sub     esp, 4
.text:00411A84                 mov     esi, eax
.text:00411A86                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00411A8E                 mov     [esp], eax
.text:00411A91                 call    GetProcAddress
.text:00411A96                 sub     esp, 8
.text:00411A99                 test    eax, eax
.text:00411A9B                 jz      short loc_411AB1
.text:00411A9D                 mov     [esp], ebx
.text:00411AA0                 lea     ecx, [esp+0Ch]
.text:00411AA4                 mov     [esp+4], ecx
.text:00411AA8                 call    eax
.text:00411AAA                 sub     esp, 8
.text:00411AAD                 test    eax, eax
.text:00411AAF                 jnz     short loc_411B10
.text:00411AB1
.text:00411AB1 loc_411AB1:                             ; CODE XREF: .text:00411A9B↑j
.text:00411AB1                 mov     eax, ds:Str
.text:00411AB6                 test    eax, eax
.text:00411AB8                 jz      short loc_411B30
.text:00411ABA
.text:00411ABA loc_411ABA:                             ; CODE XREF: .text:00411B43↓j
.text:00411ABA                                         ; .text:00411B55↓j
.text:00411ABA                 test    ebx, ebx
.text:00411ABC                 jz      short loc_411AC3
.text:00411ABE                 cmp     byte ptr [ebx], 0
.text:00411AC1                 jnz     short loc_411AE0
.text:00411AC3
.text:00411AC3 loc_411AC3:                             ; CODE XREF: .text:00411ABC↑j
.text:00411AC3                                         ; .text:00411AF4↓j ...
.text:00411AC3                 mov     [esp], esi
.text:00411AC6                 call    FreeLibrary
.text:00411ACB                 sub     esp, 4
.text:00411ACE                 mov     eax, edi
.text:00411AD0                 mov     ebx, [esp+10h]
.text:00411AD4                 mov     esi, [esp+14h]
.text:00411AD8                 mov     edi, [esp+18h]
.text:00411ADC                 add     esp, 1Ch
.text:00411ADF                 retn
.text:00411AE0 ; ---------------------------------------------------------------------------
.text:00411AE0
.text:00411AE0 loc_411AE0:                             ; CODE XREF: .text:00411AC1↑j
.text:00411AE0                 mov     [esp], ebx
.text:00411AE3                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411AEB                 call    strrchr
.text:00411AF0                 test    eax, eax
.text:00411AF2                 mov     ebx, eax
.text:00411AF4                 jz      short loc_411AC3
.text:00411AF6                 mov     [esp+4], eax
.text:00411AFA                 mov     ecx, ds:Str
.text:00411B00                 mov     [esp], ecx
.text:00411B03                 call    strstr
.text:00411B08                 test    eax, eax
.text:00411B0A                 jz      short loc_411B17
.text:00411B0C                 lea     esi, [esi+0]
.text:00411B10
.text:00411B10 loc_411B10:                             ; CODE XREF: .text:00411AAF↑j
.text:00411B10                                         ; .text:00411B2D↓j
.text:00411B10                 mov     edi, 1
.text:00411B15                 jmp     short loc_411AC3
.text:00411B17 ; ---------------------------------------------------------------------------
.text:00411B17
.text:00411B17 loc_411B17:                             ; CODE XREF: .text:00411B0A↑j
.text:00411B17                 mov     [esp+4], ebx
.text:00411B1B                 mov     ebx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411B21                 mov     [esp], ebx
.text:00411B24                 call    strstr
.text:00411B29                 test    eax, eax
.text:00411B2B                 jz      short loc_411AC3
.text:00411B2D                 jmp     short loc_411B10
.text:00411B2D ; ---------------------------------------------------------------------------
.text:00411B2F                 align 10h
.text:00411B30
.text:00411B30 loc_411B30:                             ; CODE XREF: .text:00411AB8↑j
.text:00411B30                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00411B37                 call    getenv
.text:00411B3C                 mov     ds:Str, eax
.text:00411B41                 test    eax, eax
.text:00411B43                 jnz     loc_411ABA
.text:00411B49                 mov     edx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411B4F                 mov     ds:Str, edx
.text:00411B55                 jmp     loc_411ABA
.text:00411B55 ; ---------------------------------------------------------------------------
.text:00411B5A                 align 10h
.text:00411B60                 sub     esp, 0Ch
.text:00411B63                 mov     edx, [esp+10h]
.text:00411B67                 mov     [esp], edx
.text:00411B6A                 call    GetFileType
.text:00411B6F                 sub     esp, 4
.text:00411B72                 xor     edx, edx
.text:00411B74                 cmp     eax, 2
.text:00411B77                 jz      short loc_411B90
.text:00411B79                 cmp     eax, 3
.text:00411B7C                 jz      short loc_411B84
.text:00411B7E
.text:00411B7E loc_411B7E:                             ; CODE XREF: .text:00411B89↓j
.text:00411B7E                                         ; .text:00411B95↓j
.text:00411B7E                 mov     eax, edx
.text:00411B80                 add     esp, 0Ch
.text:00411B83                 retn
.text:00411B84 ; ---------------------------------------------------------------------------
.text:00411B84
.text:00411B84 loc_411B84:                             ; CODE XREF: .text:00411B7C↑j
.text:00411B84                 mov     edx, 1000h
.text:00411B89                 jmp     short loc_411B7E
.text:00411B89 ; ---------------------------------------------------------------------------
.text:00411B8B                 align 10h
.text:00411B90
.text:00411B90 loc_411B90:                             ; CODE XREF: .text:00411B77↑j
.text:00411B90                 mov     edx, 2000h
.text:00411B95                 jmp     short loc_411B7E
.text:00411B95 ; ---------------------------------------------------------------------------
.text:00411B97                 align 10h
.text:00411BA0                 mov     ecx, [esp+4]
.text:00411BA4                 xor     edx, edx
.text:00411BA6                 test    cl, 10h
.text:00411BA9                 setz    dl
.text:00411BAC                 dec     edx
.text:00411BAD                 and     edx, 0FFFFC000h
.text:00411BB3                 add     edx, 8000h
.text:00411BB9                 or      edx, 124h
.text:00411BBF                 test    cl, 1
.text:00411BC2                 movzx   eax, dx
.text:00411BC5                 jnz     short locret_411BCC
.text:00411BC7                 or      eax, 92h
.text:00411BCC
.text:00411BCC locret_411BCC:                          ; CODE XREF: .text:00411BC5↑j
.text:00411BCC                 retn
.text:00411BCC ; ---------------------------------------------------------------------------
.text:00411BCD                 align 10h
.text:00411BD0                 sub     esp, 2Ch
.text:00411BD3                 mov     [esp+20h], esi
.text:00411BD7                 mov     esi, [esp+30h]
.text:00411BDB                 mov     [esp+1Ch], ebx
.text:00411BDF                 xor     ebx, ebx
.text:00411BE1                 test    esi, esi
.text:00411BE3                 mov     [esp+24h], edi
.text:00411BE7                 mov     [esp+28h], ebp
.text:00411BEB                 jz      short loc_411C40
.text:00411BED                 cmp     byte ptr [esi], 0
.text:00411BF0                 jnz     short loc_411C44
.text:00411BF2
.text:00411BF2 loc_411BF2:                             ; CODE XREF: .text:00411CAC↓j
.text:00411BF2                                         ; .text:00411CB7↓j
.text:00411BF2                 test    esi, esi
.text:00411BF4                 jz      short loc_411C40
.text:00411BF6                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411BFE                 mov     [esp], esi
.text:00411C01                 call    strrchr
.text:00411C06                 test    eax, eax
.text:00411C08                 jz      short loc_411C40
.text:00411C0A                 cld
.text:00411C0B                 mov     ecx, 5
.text:00411C10                 mov     esi, eax
.text:00411C12                 mov     edi, offset aLnk ; ".lnk"
.text:00411C17                 repe cmpsb
.text:00411C19                 setz    cl
.text:00411C1C                 movzx   eax, cl
.text:00411C1F                 nop
.text:00411C20
.text:00411C20 loc_411C20:                             ; CODE XREF: .text:00411C42↓j
.text:00411C20                 test    eax, eax
.text:00411C22                 jz      short loc_411C2A
.text:00411C24                 or      ebx, 0A000h
.text:00411C2A
.text:00411C2A loc_411C2A:                             ; CODE XREF: .text:00411C22↑j
.text:00411C2A                 mov     eax, ebx
.text:00411C2C                 mov     esi, [esp+20h]
.text:00411C30                 mov     ebx, [esp+1Ch]
.text:00411C34                 mov     edi, [esp+24h]
.text:00411C38                 mov     ebp, [esp+28h]
.text:00411C3C                 add     esp, 2Ch
.text:00411C3F                 retn
.text:00411C40 ; ---------------------------------------------------------------------------
.text:00411C40
.text:00411C40 loc_411C40:                             ; CODE XREF: .text:00411BEB↑j
.text:00411C40                                         ; .text:00411BF4↑j ...
.text:00411C40                 xor     eax, eax
.text:00411C42                 jmp     short loc_411C20
.text:00411C44 ; ---------------------------------------------------------------------------
.text:00411C44
.text:00411C44 loc_411C44:                             ; CODE XREF: .text:00411BF0↑j
.text:00411C44                 mov     dword ptr [esp], offset LibFileName ; "KERNEL32.DLL"
.text:00411C4B                 call    GetModuleHandleA
.text:00411C50                 sub     esp, 4
.text:00411C53                 mov     ebp, eax
.text:00411C55                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00411C5D                 mov     [esp], eax
.text:00411C60                 call    GetProcAddress
.text:00411C65                 sub     esp, 8
.text:00411C68                 test    eax, eax
.text:00411C6A                 mov     dword ptr [esp+14h], 0
.text:00411C72                 jz      short loc_411C88
.text:00411C74                 mov     [esp], esi
.text:00411C77                 lea     ecx, [esp+18h]
.text:00411C7B                 mov     [esp+4], ecx
.text:00411C7F                 call    eax
.text:00411C81                 sub     esp, 8
.text:00411C84                 test    eax, eax
.text:00411C86                 jnz     short loc_411CE8
.text:00411C88
.text:00411C88 loc_411C88:                             ; CODE XREF: .text:00411C72↑j
.text:00411C88                 mov     edx, ds:Str
.text:00411C8E                 test    edx, edx
.text:00411C90                 jz      short loc_411D10
.text:00411C92
.text:00411C92 loc_411C92:                             ; CODE XREF: .text:00411D23↓j
.text:00411C92                                         ; .text:00411D35↓j
.text:00411C92                 test    esi, esi
.text:00411C94                 jz      short loc_411C9B
.text:00411C96                 cmp     byte ptr [esi], 0
.text:00411C99                 jnz     short loc_411CBC
.text:00411C9B
.text:00411C9B loc_411C9B:                             ; CODE XREF: .text:00411C94↑j
.text:00411C9B                                         ; .text:00411CD0↓j ...
.text:00411C9B                 mov     [esp], ebp
.text:00411C9E                 call    FreeLibrary
.text:00411CA3                 sub     esp, 4
.text:00411CA6                 mov     eax, [esp+14h]
.text:00411CAA                 test    eax, eax
.text:00411CAC                 jz      loc_411BF2
.text:00411CB2                 mov     ebx, 49h ; 'I'
.text:00411CB7                 jmp     loc_411BF2
.text:00411CBC ; ---------------------------------------------------------------------------
.text:00411CBC
.text:00411CBC loc_411CBC:                             ; CODE XREF: .text:00411C99↑j
.text:00411CBC                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00411CC4                 mov     [esp], esi
.text:00411CC7                 call    strrchr
.text:00411CCC                 test    eax, eax
.text:00411CCE                 mov     edi, eax
.text:00411CD0                 jz      short loc_411C9B
.text:00411CD2                 mov     [esp+4], eax
.text:00411CD6                 mov     edx, ds:Str
.text:00411CDC                 mov     [esp], edx
.text:00411CDF                 call    strstr
.text:00411CE4                 test    eax, eax
.text:00411CE6                 jz      short loc_411CF2
.text:00411CE8
.text:00411CE8 loc_411CE8:                             ; CODE XREF: .text:00411C86↑j
.text:00411CE8                                         ; .text:00411D08↓j
.text:00411CE8                 mov     dword ptr [esp+14h], 1
.text:00411CF0                 jmp     short loc_411C9B
.text:00411CF2 ; ---------------------------------------------------------------------------
.text:00411CF2
.text:00411CF2 loc_411CF2:                             ; CODE XREF: .text:00411CE6↑j
.text:00411CF2                 mov     [esp+4], edi
.text:00411CF6                 mov     edi, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411CFC                 mov     [esp], edi
.text:00411CFF                 call    strstr
.text:00411D04                 test    eax, eax
.text:00411D06                 jz      short loc_411C9B
.text:00411D08                 jmp     short loc_411CE8
.text:00411D08 ; ---------------------------------------------------------------------------
.text:00411D0A                 align 10h
.text:00411D10
.text:00411D10 loc_411D10:                             ; CODE XREF: .text:00411C90↑j
.text:00411D10                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00411D17                 call    getenv
.text:00411D1C                 mov     ds:Str, eax
.text:00411D21                 test    eax, eax
.text:00411D23                 jnz     loc_411C92
.text:00411D29                 mov     ecx, off_41A074 ; ".com;.exe;.bat;.cmd"
.text:00411D2F                 mov     ds:Str, ecx
.text:00411D35                 jmp     loc_411C92
.text:00411D35 ; ---------------------------------------------------------------------------
.text:00411D3A                 align 10h
.text:00411D40                 push    esi
.text:00411D41                 push    ebx
.text:00411D42                 sub     esp, 864h
.text:00411D48                 mov     ebx, [esp+870h]
.text:00411D4F                 lea     edx, [esp+830h]
.text:00411D56                 mov     esi, [esp+874h]
.text:00411D5D                 mov     [esp+4], edx
.text:00411D61                 mov     [esp], ebx
.text:00411D64                 call    sub_410BC0
.text:00411D69                 xor     edx, edx
.text:00411D6B                 test    eax, eax
.text:00411D6D                 jz      loc_411E55
.text:00411D73                 mov     ecx, [esp+830h]
.text:00411D7A                 test    cl, 10h
.text:00411D7D                 mov     [esi], ecx
.text:00411D7F                 mov     eax, [esp+834h]
.text:00411D86                 mov     edx, [esp+838h]
.text:00411D8D                 mov     [esi+4], eax
.text:00411D90                 mov     [esi+8], edx
.text:00411D93                 mov     eax, [esp+83Ch]
.text:00411D9A                 mov     edx, [esp+840h]
.text:00411DA1                 mov     [esi+0Ch], eax
.text:00411DA4                 mov     [esi+10h], edx
.text:00411DA7                 mov     edx, [esp+848h]
.text:00411DAE                 mov     eax, [esp+844h]
.text:00411DB5                 mov     [esi+18h], edx
.text:00411DB8                 mov     [esi+14h], eax
.text:00411DBB                 mov     edx, [esp+84Ch]
.text:00411DC2                 mov     [esi+20h], edx
.text:00411DC5                 mov     edx, [esp+850h]
.text:00411DCC                 mov     [esi+24h], edx
.text:00411DCF                 jnz     loc_411E60
.text:00411DD5                 mov     dword ptr [esi+28h], 1
.text:00411DDC
.text:00411DDC loc_411DDC:                             ; CODE XREF: .text:00411E6B↓j
.text:00411DDC                 mov     [esp], ebx
.text:00411DDF                 call    sub_413AE0
.text:00411DE4                 mov     [esp], eax
.text:00411DE7                 call    sub_412DB0
.text:00411DEC                 mov     [esp], eax
.text:00411DEF                 lea     edx, [esp+30h]
.text:00411DF3                 mov     ebx, eax
.text:00411DF5                 mov     [esp+18h], edx
.text:00411DF9                 lea     ecx, [esp+2Ch]
.text:00411DFD                 lea     edx, [esp+28h]
.text:00411E01                 mov     [esp+14h], ecx
.text:00411E05                 lea     ecx, [esp+24h]
.text:00411E09                 mov     [esp+10h], edx
.text:00411E0D                 lea     edx, [esp+430h]
.text:00411E14                 mov     [esp+0Ch], ecx
.text:00411E18                 mov     [esp+4], edx
.text:00411E1C                 mov     dword ptr [esp+1Ch], 400h
.text:00411E24                 mov     dword ptr [esp+8], 400h
.text:00411E2C                 call    GetVolumeInformationA
.text:00411E31                 sub     esp, 20h
.text:00411E34                 test    eax, eax
.text:00411E36                 setz    cl
.text:00411E39                 mov     [esp], ebx
.text:00411E3C                 movzx   edx, cl
.text:00411E3F                 dec     edx
.text:00411E40                 and     [esp+24h], edx
.text:00411E44                 call    free
.text:00411E49                 mov     ecx, [esp+24h]
.text:00411E4D                 mov     edx, 1
.text:00411E52                 mov     [esi+1Ch], ecx
.text:00411E55
.text:00411E55 loc_411E55:                             ; CODE XREF: .text:00411D6D↑j
.text:00411E55                 add     esp, 864h
.text:00411E5B                 mov     eax, edx
.text:00411E5D                 pop     ebx
.text:00411E5E                 pop     esi
.text:00411E5F                 retn
.text:00411E60 ; ---------------------------------------------------------------------------
.text:00411E60
.text:00411E60 loc_411E60:                             ; CODE XREF: .text:00411DCF↑j
.text:00411E60                 mov     [esp], ebx
.text:00411E63                 call    sub_410D30
.text:00411E68                 mov     [esi+28h], eax
.text:00411E6B                 jmp     loc_411DDC
.text:00411E70 ; ---------------------------------------------------------------------------
.text:00411E70                 push    ebp
.text:00411E71                 xor     edx, edx
.text:00411E73                 push    edi
.text:00411E74                 push    esi
.text:00411E75                 xor     esi, esi
.text:00411E77                 push    ebx
.text:00411E78                 sub     esp, 1Ch
.text:00411E7B                 mov     ebx, [esp+5Ch]
.text:00411E7F                 mov     ecx, [esp+30h]
.text:00411E83                 mov     edi, [esp+60h]
.text:00411E87                 or      esi, ebx
.text:00411E89                 mov     eax, [esp+4Ch]
.text:00411E8D                 or      edi, edx
.text:00411E8F                 mov     ebx, [esp+64h]
.text:00411E93                 xor     edx, edx
.text:00411E95                 test    cl, 10h
.text:00411E98                 setz    dl
.text:00411E9B                 mov     [ebx+10h], eax
.text:00411E9E                 mov     [ebx+8], edi
.text:00411EA1                 mov     [ebx+0Ch], esi
.text:00411EA4                 dec     edx
.text:00411EA5                 and     edx, 0FFFFC000h
.text:00411EAB                 mov     dword ptr [ebx+14h], 0
.text:00411EB2                 add     edx, 8000h
.text:00411EB8                 or      edx, 124h
.text:00411EBE                 test    cl, 1
.text:00411EC1                 movzx   eax, dx
.text:00411EC4                 jnz     short loc_411ECB
.text:00411EC6                 or      eax, 92h
.text:00411ECB
.text:00411ECB loc_411ECB:                             ; CODE XREF: .text:00411EC4↑j
.text:00411ECB                 mov     ebx, [esp+54h]
.text:00411ECF                 xor     edx, edx
.text:00411ED1                 xor     ebp, ebp
.text:00411ED3                 mov     edi, [esp+50h]
.text:00411ED7                 mov     ecx, [esp+64h]
.text:00411EDB                 mov     esi, edi
.text:00411EDD                 or      [ecx], eax
.text:00411EDF                 mov     edi, ebx
.text:00411EE1                 or      edi, ebp
.text:00411EE3                 mov     ebp, edx
.text:00411EE5                 mov     ebx, [esp+64h]
.text:00411EE9                 or      ebp, esi
.text:00411EEB                 mov     esi, [esp+58h]
.text:00411EEF                 mov     edx, [esp+40h]
.text:00411EF3                 mov     [ebx+30h], edi
.text:00411EF6                 mov     [ebx+18h], esi
.text:00411EF9                 mov     ecx, edx
.text:00411EFB                 xor     esi, esi
.text:00411EFD                 mov     [ebx+34h], ebp
.text:00411F00                 xor     edx, edx
.text:00411F02                 or      esi, ecx
.text:00411F04                 mov     dword ptr [esp+8], 989680h
.text:00411F0C                 mov     ebx, [esp+3Ch]
.text:00411F10                 mov     ecx, esi
.text:00411F12                 mov     dword ptr [esp+0Ch], 0
.text:00411F1A                 or      ebx, edx
.text:00411F1C                 mov     edx, ebx
.text:00411F1E                 sub     edx, 0D53E8000h
.text:00411F24                 sbb     ecx, 19DB1DEh
.text:00411F2A                 mov     [esp+4], ecx
.text:00411F2E                 mov     [esp], edx
.text:00411F31                 call    sub_418680
.text:00411F36                 mov     edx, eax
.text:00411F38                 mov     ecx, [esp+64h]
.text:00411F3C                 shr     eax, 1Fh
.text:00411F3F                 dec     eax
.text:00411F40                 and     edx, eax
.text:00411F42                 mov     [ecx+38h], edx
.text:00411F45                 mov     [esp], ebx
.text:00411F48                 mov     [esp+4], esi
.text:00411F4C                 mov     dword ptr [esp+8], 989680h
.text:00411F54                 mov     dword ptr [esp+0Ch], 0
.text:00411F5C                 call    sub_4187A0
.text:00411F61                 lea     ecx, [eax+eax*4]
.text:00411F64                 lea     esi, [ecx+ecx*4]
.text:00411F67                 mov     eax, [esp+64h]
.text:00411F6B                 shl     esi, 2
.text:00411F6E                 mov     ebx, esi
.text:00411F70                 shr     ebx, 1Fh
.text:00411F73                 dec     ebx
.text:00411F74                 and     ebx, esi
.text:00411F76                 xor     esi, esi
.text:00411F78                 mov     [eax+3Ch], ebx
.text:00411F7B                 mov     edx, [esp+38h]
.text:00411F7F                 mov     dword ptr [esp+8], 989680h
.text:00411F87                 mov     ebx, [esp+34h]
.text:00411F8B                 mov     dword ptr [esp+0Ch], 0
.text:00411F93                 mov     ecx, edx
.text:00411F95                 xor     edx, edx
.text:00411F97                 or      ebx, edx
.text:00411F99                 or      esi, ecx
.text:00411F9B                 mov     edx, ebx
.text:00411F9D                 sub     edx, 0D53E8000h
.text:00411FA3                 mov     ecx, esi
.text:00411FA5                 sbb     ecx, 19DB1DEh
.text:00411FAB                 mov     [esp+4], ecx
.text:00411FAF                 mov     [esp], edx
.text:00411FB2                 call    sub_418680
.text:00411FB7                 mov     edx, eax
.text:00411FB9                 mov     ecx, [esp+64h]
.text:00411FBD                 shr     eax, 1Fh
.text:00411FC0                 dec     eax
.text:00411FC1                 and     edx, eax
.text:00411FC3                 mov     [ecx+48h], edx
.text:00411FC6                 mov     [esp], ebx
.text:00411FC9                 mov     [esp+4], esi
.text:00411FCD                 mov     dword ptr [esp+8], 989680h
.text:00411FD5                 mov     dword ptr [esp+0Ch], 0
.text:00411FDD                 call    sub_4187A0
.text:00411FE2                 lea     edx, [eax+eax*4]
.text:00411FE5                 mov     ebx, [esp+64h]
.text:00411FE9                 lea     ecx, [edx+edx*4]
.text:00411FEC                 shl     ecx, 2
.text:00411FEF                 mov     esi, ecx
.text:00411FF1                 shr     esi, 1Fh
.text:00411FF4                 dec     esi
.text:00411FF5                 and     esi, ecx
.text:00411FF7                 mov     [ebx+4Ch], esi
.text:00411FFA                 mov     edx, [esp+48h]
.text:00411FFE                 xor     esi, esi
.text:00412000                 mov     dword ptr [esp+8], 989680h
.text:00412008                 mov     ebx, [esp+44h]
.text:0041200C                 mov     dword ptr [esp+0Ch], 0
.text:00412014                 mov     ecx, edx
.text:00412016                 xor     edx, edx
.text:00412018                 or      ebx, edx
.text:0041201A                 or      esi, ecx
.text:0041201C                 mov     edx, ebx
.text:0041201E                 sub     edx, 0D53E8000h
.text:00412024                 mov     ecx, esi
.text:00412026                 sbb     ecx, 19DB1DEh
.text:0041202C                 mov     [esp+4], ecx
.text:00412030                 mov     [esp], edx
.text:00412033                 call    sub_418680
.text:00412038                 mov     edx, eax
.text:0041203A                 mov     ecx, [esp+64h]
.text:0041203E                 shr     eax, 1Fh
.text:00412041                 dec     eax
.text:00412042                 and     edx, eax
.text:00412044                 mov     [ecx+40h], edx
.text:00412047                 mov     [esp+4], esi
.text:0041204B                 mov     dword ptr [esp+8], 989680h
.text:00412053                 mov     dword ptr [esp+0Ch], 0
.text:0041205B                 mov     [esp], ebx
.text:0041205E                 call    sub_4187A0
.text:00412063                 lea     edx, [eax+eax*4]
.text:00412066                 lea     esi, [edx+edx*4]
.text:00412069                 mov     eax, [esp+64h]
.text:0041206D                 shl     esi, 2
.text:00412070                 mov     edx, ebp
.text:00412072                 mov     ecx, esi
.text:00412074                 mov     dword ptr [eax+50h], 200h
.text:0041207B                 shr     ecx, 1Fh
.text:0041207E                 dec     ecx
.text:0041207F                 and     ecx, esi
.text:00412081                 test    ebp, ebp
.text:00412083                 mov     [eax+44h], ecx
.text:00412086                 mov     eax, edi
.text:00412088                 js      short loc_4120C2
.text:0041208A
.text:0041208A loc_41208A:                             ; CODE XREF: .text:004120CA↓j
.text:0041208A                 xor     esi, esi
.text:0041208C                 mov     ebp, edi
.text:0041208E                 mov     ecx, eax
.text:00412090                 shrd    ecx, edx, 9
.text:00412094                 mov     ebx, edx
.text:00412096                 and     ebp, 1FFh
.text:0041209C                 mov     eax, esi
.text:0041209E                 sar     ebx, 9
.text:004120A1                 or      eax, ebp
.text:004120A3                 jz      short loc_4120AB
.text:004120A5                 add     ecx, 1
.text:004120A8                 adc     ebx, 0
.text:004120AB
.text:004120AB loc_4120AB:                             ; CODE XREF: .text:004120A3↑j
.text:004120AB                 mov     edx, [esp+64h]
.text:004120AF                 mov     eax, 1
.text:004120B4                 mov     [edx+58h], ecx
.text:004120B7                 mov     [edx+5Ch], ebx
.text:004120BA                 add     esp, 1Ch
.text:004120BD                 pop     ebx
.text:004120BE                 pop     esi
.text:004120BF                 pop     edi
.text:004120C0                 pop     ebp
.text:004120C1                 retn
.text:004120C2 ; ---------------------------------------------------------------------------
.text:004120C2
.text:004120C2 loc_4120C2:                             ; CODE XREF: .text:00412088↑j
.text:004120C2                 add     eax, 1FFh
.text:004120C7                 adc     edx, 0
.text:004120CA                 jmp     short loc_41208A
.text:004120CA ; ---------------------------------------------------------------------------
.text:004120CC                 align 10h
.text:004120D0                 push    ebp
.text:004120D1                 push    edi
.text:004120D2                 xor     edi, edi
.text:004120D4                 push    esi
.text:004120D5                 xor     esi, esi
.text:004120D7                 push    ebx
.text:004120D8                 sub     esp, 0Ch
.text:004120DB                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:004120E2                 call    LoadLibraryA
.text:004120E7                 sub     esp, 4
.text:004120EA                 mov     ebp, eax
.text:004120EC                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:004120F4                 mov     [esp], eax
.text:004120F7                 call    GetProcAddress
.text:004120FC                 sub     esp, 8
.text:004120FF                 test    eax, eax
.text:00412101                 jz      short loc_412132
.text:00412103                 lea     ecx, [esp+8]
.text:00412107                 mov     [esp+4], ecx
.text:0041210B                 mov     ecx, [esp+20h]
.text:0041210F                 mov     [esp], ecx
.text:00412112                 call    eax
.text:00412114                 sub     esp, 8
.text:00412117                 mov     ebx, eax
.text:00412119                 cmp     eax, 0FFFFFFFFh
.text:0041211C                 jz      short loc_41214D
.text:0041211E
.text:0041211E loc_41211E:                             ; CODE XREF: .text:00412156↓j
.text:0041211E                 mov     esi, [esp+8]
.text:00412122                 mov     ecx, ebx
.text:00412124                 xor     edi, edi
.text:00412126                 xor     ebx, ebx
.text:00412128                 mov     edx, esi
.text:0041212A                 mov     esi, ecx
.text:0041212C                 or      esi, edi
.text:0041212E                 mov     edi, ebx
.text:00412130                 or      edi, edx
.text:00412132
.text:00412132 loc_412132:                             ; CODE XREF: .text:00412101↑j
.text:00412132                                         ; .text:00412154↓j
.text:00412132                 test    ebp, ebp
.text:00412134                 jz      short loc_412141
.text:00412136                 mov     [esp], ebp
.text:00412139                 call    FreeLibrary
.text:0041213E                 sub     esp, 4
.text:00412141
.text:00412141 loc_412141:                             ; CODE XREF: .text:00412134↑j
.text:00412141                 add     esp, 0Ch
.text:00412144                 mov     eax, esi
.text:00412146                 mov     edx, edi
.text:00412148                 pop     ebx
.text:00412149                 pop     esi
.text:0041214A                 pop     edi
.text:0041214B                 pop     ebp
.text:0041214C                 retn
.text:0041214D ; ---------------------------------------------------------------------------
.text:0041214D
.text:0041214D loc_41214D:                             ; CODE XREF: .text:0041211C↑j
.text:0041214D                 call    GetLastError
.text:00412152                 test    eax, eax
.text:00412154                 jnz     short loc_412132
.text:00412156                 jmp     short loc_41211E
.text:00412156 ; ---------------------------------------------------------------------------
.text:00412158                 align 10h
.text:00412160
.text:00412160 ; =============== S U B R O U T I N E =======================================
.text:00412160
.text:00412160
.text:00412160 ; int __cdecl sub_412160(LPCSTR lpFileName, int)
.text:00412160 sub_412160      proc near               ; CODE XREF: sub_410310+2391↓p
.text:00412160
.text:00412160 lpRootPathName  = dword ptr -8FCh
.text:00412160 lpVolumeNameBuffer= dword ptr -8F8h
.text:00412160 nVolumeNameSize = dword ptr -8F4h
.text:00412160 lpVolumeSerialNumber= dword ptr -8F0h
.text:00412160 lpMaximumComponentLength= dword ptr -8ECh
.text:00412160 lpFileSystemFlags= dword ptr -8E8h
.text:00412160 lpFileSystemNameBuffer= dword ptr -8E4h
.text:00412160 nFileSystemNameSize= dword ptr -8E0h
.text:00412160 VolumeSerialNumber= dword ptr -8D8h
.text:00412160 MaximumComponentLength= dword ptr -8D4h
.text:00412160 FileSystemFlags = dword ptr -8D0h
.text:00412160 var_8CC         = dword ptr -8CCh
.text:00412160 var_8C8         = dword ptr -8C8h
.text:00412160 var_8C4         = dword ptr -8C4h
.text:00412160 var_8C0         = dword ptr -8C0h
.text:00412160 var_8BC         = dword ptr -8BCh
.text:00412160 var_8B8         = dword ptr -8B8h
.text:00412160 var_8B4         = dword ptr -8B4h
.text:00412160 var_8B0         = dword ptr -8B0h
.text:00412160 var_8AC         = dword ptr -8ACh
.text:00412160 var_8A8         = dword ptr -8A8h
.text:00412160 var_8A4         = dword ptr -8A4h
.text:00412160 var_8A0         = dword ptr -8A0h
.text:00412160 var_89C         = dword ptr -89Ch
.text:00412160 FileSystemNameBuffer= byte ptr -88Ch
.text:00412160 VolumeNameBuffer= byte ptr -48Ch
.text:00412160 var_8C          = dword ptr -8Ch
.text:00412160 var_88          = dword ptr -88h
.text:00412160 var_84          = dword ptr -84h
.text:00412160 var_80          = dword ptr -80h
.text:00412160 var_7C          = dword ptr -7Ch
.text:00412160 var_78          = dword ptr -78h
.text:00412160 var_74          = dword ptr -74h
.text:00412160 var_70          = dword ptr -70h
.text:00412160 var_6C          = dword ptr -6Ch
.text:00412160 var_5C          = dword ptr -5Ch
.text:00412160 var_58          = dword ptr -58h
.text:00412160 var_54          = dword ptr -54h
.text:00412160 var_50          = dword ptr -50h
.text:00412160 var_4C          = dword ptr -4Ch
.text:00412160 var_48          = dword ptr -48h
.text:00412160 var_44          = dword ptr -44h
.text:00412160 var_3C          = dword ptr -3Ch
.text:00412160 var_38          = dword ptr -38h
.text:00412160 var_34          = dword ptr -34h
.text:00412160 lpFileName      = dword ptr  4
.text:00412160 arg_4           = dword ptr  8
.text:00412160
.text:00412160                 push    ebp
.text:00412161                 xor     eax, eax
.text:00412163                 mov     ecx, 0Dh
.text:00412168                 push    edi
.text:00412169                 push    esi
.text:0041216A                 push    ebx
.text:0041216B                 sub     esp, 8ECh
.text:00412171                 lea     edi, [esp+8FCh+var_5C]
.text:00412178                 cld
.text:00412179                 lea     edx, [esp+8FCh+var_8C]
.text:00412180                 rep stosd
.text:00412182                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:00412186                 lea     esi, [esp+8FCh+var_5C]
.text:0041218D                 mov     edx, [esp+8FCh+lpFileName]
.text:00412194                 mov     [esp+8FCh+lpRootPathName], edx ; lpFileName
.text:00412197                 call    sub_410BC0
.text:0041219C                 test    eax, eax
.text:0041219E                 mov     edx, 0FFFFFFFFh
.text:004121A3                 jz      loc_412534
.text:004121A9                 mov     edx, [esp+8FCh+var_88]
.text:004121B0                 mov     ebp, [esp+8FCh+var_84]
.text:004121B7                 mov     edi, [esp+8FCh+var_80]
.text:004121BE                 mov     [esp+8FCh+var_58], edx
.text:004121C5                 mov     ecx, [esp+8FCh+var_7C]
.text:004121CC                 mov     ebx, [esp+8FCh+var_8C]
.text:004121D3                 mov     [esp+8FCh+var_54], ebp
.text:004121DA                 mov     edx, [esp+8FCh+var_78]
.text:004121E1                 mov     ebp, [esp+8FCh+var_74]
.text:004121E8                 mov     [esp+8FCh+var_50], edi
.text:004121EF                 test    bl, 10h
.text:004121F2                 mov     edi, [esp+8FCh+var_70]
.text:004121F9                 mov     [esp+8FCh+var_4C], ecx
.text:00412200                 mov     ecx, [esp+8FCh+var_6C]
.text:00412207                 mov     [esp+8FCh+var_5C], ebx
.text:0041220E                 mov     [esp+8FCh+var_48], edx
.text:00412215                 mov     [esp+8FCh+var_44], ebp
.text:0041221C                 mov     [esp+8FCh+var_3C], edi
.text:00412223                 mov     [esp+8FCh+var_38], ecx
.text:0041222A                 jnz     loc_412550
.text:00412230                 mov     ebx, 1
.text:00412235                 mov     [esp+8FCh+var_34], ebx
.text:0041223C
.text:0041223C loc_41223C:                             ; CODE XREF: sub_412160+406↓j
.text:0041223C                 mov     eax, [esp+8FCh+lpFileName]
.text:00412243                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:00412247                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:0041224B                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:0041224E                 call    sub_413AE0
.text:00412253                 mov     [esp+8FCh+lpRootPathName], eax
.text:00412256                 call    sub_412DB0
.text:0041225B                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:0041225F                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:00412263                 mov     ebp, eax
.text:00412265                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00412269                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:0041226D                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:00412274                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:00412278                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:0041227C                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:00412280                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00412288                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00412290                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00412293                 call    GetVolumeInformationA
.text:00412298                 sub     esp, 20h
.text:0041229B                 test    eax, eax
.text:0041229D                 lea     edi, [esp+8FCh+var_8CC]
.text:004122A1                 setz    bl
.text:004122A4                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:004122A7                 xor     ebp, ebp
.text:004122A9                 movzx   edx, bl
.text:004122AC                 dec     edx
.text:004122AD                 xor     ebx, ebx
.text:004122AF                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:004122B3                 call    free
.text:004122B8                 cld
.text:004122B9                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004122BD                 mov     [esi+1Ch], ecx
.text:004122C0                 mov     ecx, 0Dh
.text:004122C5                 rep movsd
.text:004122C7                 mov     edi, [esp+8FCh+var_8A0]
.text:004122CB                 mov     edx, [esp+8FCh+var_89C]
.text:004122CF                 mov     ecx, [esp+8FCh+var_8CC]
.text:004122D3                 or      ebp, edi
.text:004122D5                 mov     esi, [esp+8FCh+var_8B0]
.text:004122D9                 mov     edi, [esp+8FCh+arg_4]
.text:004122E0                 or      edx, ebx
.text:004122E2                 mov     [edi+8], edx
.text:004122E5                 xor     edx, edx
.text:004122E7                 test    cl, 10h
.text:004122EA                 setz    dl
.text:004122ED                 mov     [edi+0Ch], ebp
.text:004122F0                 mov     [edi+10h], esi
.text:004122F3                 mov     dword ptr [edi+14h], 0
.text:004122FA                 dec     edx
.text:004122FB                 and     edx, 0FFFFC000h
.text:00412301                 add     edx, 8000h
.text:00412307                 or      edx, 124h
.text:0041230D                 test    cl, 1
.text:00412310                 movzx   eax, dx
.text:00412313                 jnz     short loc_41231A
.text:00412315                 or      eax, 92h
.text:0041231A
.text:0041231A loc_41231A:                             ; CODE XREF: sub_412160+1B3↑j
.text:0041231A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0041231E                 xor     edx, edx
.text:00412320                 xor     ebp, ebp
.text:00412322                 mov     edi, [esp+8FCh+var_8AC]
.text:00412326                 mov     ecx, [esp+8FCh+arg_4]
.text:0041232D                 mov     esi, edi
.text:0041232F                 or      [ecx], eax
.text:00412331                 mov     edi, ebx
.text:00412333                 or      edi, ebp
.text:00412335                 mov     ebp, edx
.text:00412337                 mov     ebx, [esp+8FCh+var_8A4]
.text:0041233B                 or      ebp, esi
.text:0041233D                 mov     esi, [esp+8FCh+arg_4]
.text:00412344                 mov     edx, [esp+8FCh+var_8BC]
.text:00412348                 mov     [esi+18h], ebx
.text:0041234B                 mov     ebx, [esp+8FCh+var_8C0]
.text:0041234F                 mov     ecx, edx
.text:00412351                 mov     [esi+30h], edi
.text:00412354                 xor     edx, edx
.text:00412356                 mov     [esi+34h], ebp
.text:00412359                 or      ebx, edx
.text:0041235B                 xor     esi, esi
.text:0041235D                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412365                 or      esi, ecx
.text:00412367                 mov     edx, ebx
.text:00412369                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00412371                 sub     edx, 0D53E8000h
.text:00412377                 mov     ecx, esi
.text:00412379                 sbb     ecx, 19DB1DEh
.text:0041237F                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00412383                 mov     [esp+8FCh+lpRootPathName], edx
.text:00412386                 call    sub_418680
.text:0041238B                 mov     edx, eax
.text:0041238D                 mov     ecx, [esp+8FCh+arg_4]
.text:00412394                 shr     eax, 1Fh
.text:00412397                 dec     eax
.text:00412398                 and     edx, eax
.text:0041239A                 mov     [ecx+38h], edx
.text:0041239D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004123A0                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004123A4                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004123AC                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004123B4                 call    sub_4187A0
.text:004123B9                 lea     ecx, [eax+eax*4]
.text:004123BC                 lea     ebx, [ecx+ecx*4]
.text:004123BF                 mov     eax, [esp+8FCh+arg_4]
.text:004123C6                 shl     ebx, 2
.text:004123C9                 mov     esi, ebx
.text:004123CB                 shr     esi, 1Fh
.text:004123CE                 dec     esi
.text:004123CF                 and     esi, ebx
.text:004123D1                 mov     [eax+3Ch], esi
.text:004123D4                 mov     edx, [esp+8FCh+var_8C4]
.text:004123D8                 xor     esi, esi
.text:004123DA                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004123E2                 mov     ebx, [esp+8FCh+var_8C8]
.text:004123E6                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004123EE                 mov     ecx, edx
.text:004123F0                 xor     edx, edx
.text:004123F2                 or      ebx, edx
.text:004123F4                 or      esi, ecx
.text:004123F6                 mov     edx, ebx
.text:004123F8                 sub     edx, 0D53E8000h
.text:004123FE                 mov     ecx, esi
.text:00412400                 sbb     ecx, 19DB1DEh
.text:00412406                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0041240A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0041240D                 call    sub_418680
.text:00412412                 mov     edx, eax
.text:00412414                 mov     ecx, [esp+8FCh+arg_4]
.text:0041241B                 shr     eax, 1Fh
.text:0041241E                 dec     eax
.text:0041241F                 and     edx, eax
.text:00412421                 mov     [ecx+48h], edx
.text:00412424                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00412427                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0041242B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412433                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0041243B                 call    sub_4187A0
.text:00412440                 lea     ecx, [eax+eax*4]
.text:00412443                 lea     ebx, [ecx+ecx*4]
.text:00412446                 mov     eax, [esp+8FCh+arg_4]
.text:0041244D                 shl     ebx, 2
.text:00412450                 mov     esi, ebx
.text:00412452                 shr     esi, 1Fh
.text:00412455                 dec     esi
.text:00412456                 and     esi, ebx
.text:00412458                 mov     [eax+4Ch], esi
.text:0041245B                 mov     edx, [esp+8FCh+var_8B4]
.text:0041245F                 xor     esi, esi
.text:00412461                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00412469                 mov     ebx, [esp+8FCh+var_8B8]
.text:0041246D                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00412475                 mov     ecx, edx
.text:00412477                 xor     edx, edx
.text:00412479                 or      ebx, edx
.text:0041247B                 or      esi, ecx
.text:0041247D                 mov     edx, ebx
.text:0041247F                 sub     edx, 0D53E8000h
.text:00412485                 mov     ecx, esi
.text:00412487                 sbb     ecx, 19DB1DEh
.text:0041248D                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00412491                 mov     [esp+8FCh+lpRootPathName], edx
.text:00412494                 call    sub_418680
.text:00412499                 mov     edx, eax
.text:0041249B                 mov     ecx, [esp+8FCh+arg_4]
.text:004124A2                 shr     eax, 1Fh
.text:004124A5                 dec     eax
.text:004124A6                 and     edx, eax
.text:004124A8                 mov     [ecx+40h], edx
.text:004124AB                 mov     [esp+8FCh+lpRootPathName], ebx
.text:004124AE                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:004124B2                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004124BA                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004124C2                 call    sub_4187A0
.text:004124C7                 lea     ebx, [eax+eax*4]
.text:004124CA                 mov     esi, [esp+8FCh+arg_4]
.text:004124D1                 lea     edx, [ebx+ebx*4]
.text:004124D4                 shl     edx, 2
.text:004124D7                 mov     eax, edi
.text:004124D9                 mov     ecx, edx
.text:004124DB                 mov     dword ptr [esi+50h], 200h
.text:004124E2                 shr     ecx, 1Fh
.text:004124E5                 dec     ecx
.text:004124E6                 and     ecx, edx
.text:004124E8                 test    ebp, ebp
.text:004124EA                 mov     edx, ebp
.text:004124EC                 mov     [esi+44h], ecx
.text:004124EF                 js      short loc_412541
.text:004124F1
.text:004124F1 loc_4124F1:                             ; CODE XREF: sub_412160+3E9↓j
.text:004124F1                 xor     esi, esi
.text:004124F3                 mov     ebp, edi
.text:004124F5                 mov     ecx, eax
.text:004124F7                 shrd    ecx, edx, 9
.text:004124FB                 mov     ebx, edx
.text:004124FD                 and     ebp, 1FFh
.text:00412503                 mov     eax, esi
.text:00412505                 sar     ebx, 9
.text:00412508                 or      eax, ebp
.text:0041250A                 jz      short loc_412512
.text:0041250C                 add     ecx, 1
.text:0041250F                 adc     ebx, 0
.text:00412512
.text:00412512 loc_412512:                             ; CODE XREF: sub_412160+3AA↑j
.text:00412512                 mov     edx, [esp+8FCh+arg_4]
.text:00412519                 mov     [edx+5Ch], ebx
.text:0041251C                 mov     ebx, [esp+8FCh+lpFileName]
.text:00412523                 mov     [edx+58h], ecx
.text:00412526                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0041252A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0041252D                 call    sub_411380
.text:00412532                 xor     edx, edx
.text:00412534
.text:00412534 loc_412534:                             ; CODE XREF: sub_412160+43↑j
.text:00412534                 add     esp, 8ECh
.text:0041253A                 mov     eax, edx
.text:0041253C                 pop     ebx
.text:0041253D                 pop     esi
.text:0041253E                 pop     edi
.text:0041253F                 pop     ebp
.text:00412540                 retn
.text:00412541 ; ---------------------------------------------------------------------------
.text:00412541
.text:00412541 loc_412541:                             ; CODE XREF: sub_412160+38F↑j
.text:00412541                 add     eax, 1FFh
.text:00412546                 adc     edx, 0
.text:00412549                 jmp     short loc_4124F1
.text:00412549 ; ---------------------------------------------------------------------------
.text:0041254B                 align 10h
.text:00412550
.text:00412550 loc_412550:                             ; CODE XREF: sub_412160+CA↑j
.text:00412550                 mov     eax, [esp+8FCh+lpFileName]
.text:00412557                 mov     [esp+8FCh+lpRootPathName], eax ; Str
.text:0041255A                 call    sub_410D30
.text:0041255F                 mov     [esp+8FCh+var_34], eax
.text:00412566                 jmp     loc_41223C
.text:00412566 sub_412160      endp
.text:00412566
.text:00412566 ; ---------------------------------------------------------------------------
.text:0041256B                 align 10h
.text:00412570 ; START OF FUNCTION CHUNK FOR sub_410310
.text:00412570
.text:00412570 loc_412570:                             ; CODE XREF: sub_410310+26↑j
.text:00412570                 cld
.text:00412571                 sub     esp, 2Ch
.text:00412574                 xor     eax, eax
.text:00412576                 mov     [esp+2Ch+var_10], ebx
.text:0041257A                 mov     ecx, 18h
.text:0041257F                 mov     ebx, [esp+2Ch+arg_0]
.text:00412583                 mov     [esp+2Ch+var_C], esi
.text:00412587                 mov     esi, [esp+2Ch+arg_4]
.text:0041258B                 test    ebx, ebx
.text:0041258D                 mov     [esp+2Ch+var_8], edi
.text:00412591                 mov     edi, esi
.text:00412593                 mov     [esp+2Ch+var_4], ebp
.text:00412597                 rep stosd
.text:00412599                 jz      short loc_4125A0
.text:0041259B                 cmp     byte ptr [ebx], 0
.text:0041259E                 jnz     short loc_4125B8
.text:004125A0
.text:004125A0 loc_4125A0:                             ; CODE XREF: sub_410310+2289↑j
.text:004125A0                 xor     edx, edx
.text:004125A2
.text:004125A2 loc_4125A2:                             ; CODE XREF: sub_410310+22BF↓j
.text:004125A2                                         ; sub_410310+2368↓j
.text:004125A2                 mov     ebx, [esp+2Ch+var_10]
.text:004125A6                 mov     eax, edx
.text:004125A8                 mov     esi, [esp+2Ch+var_C]
.text:004125AC                 mov     edi, [esp+2Ch+var_8]
.text:004125B0                 mov     ebp, [esp+2Ch+var_4]
.text:004125B4                 add     esp, 2Ch
.text:004125B7                 retn
.text:004125B8 ; ---------------------------------------------------------------------------
.text:004125B8
.text:004125B8 loc_4125B8:                             ; CODE XREF: sub_410310+228E↑j
.text:004125B8                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:004125C0                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:004125C3                 call    sub_410AB0
.text:004125C8                 test    eax, eax
.text:004125CA                 mov     edx, 0FFFFFFFFh
.text:004125CF                 jnz     short loc_4125A2
.text:004125D1                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:004125D4                 call    sub_4134C0
.text:004125D9                 mov     [esp+2Ch+lpFileName], eax
.text:004125DC                 call    sub_412DB0
.text:004125E1                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:004125E4                 mov     ebp, eax
.text:004125E6                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:004125EE                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:004125F6                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:004125FE                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00412606                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0041260E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00412616                 call    CreateFileA
.text:0041261B                 sub     esp, 1Ch
.text:0041261E                 mov     ebx, eax
.text:00412620                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00412624                 mov     [esp+2Ch+lpFileName], eax ; hNamedPipe
.text:00412627                 call    sub_410EB0
.text:0041262C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0041262F                 mov     edi, eax
.text:00412631                 call    CloseHandle
.text:00412636                 sub     esp, 4
.text:00412639                 cmp     edi, 0FFFFFFFFh
.text:0041263C                 jz      short loc_41269A
.text:0041263E                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:00412642                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:00412645                 call    sub_411380
.text:0041264A
.text:0041264A loc_41264A:                             ; CODE XREF: sub_410310+2398↓j
.text:0041264A                 mov     edx, [esi]
.text:0041264C                 and     edx, 0F000h
.text:00412652                 cmp     edx, 4000h
.text:00412658                 jz      short loc_41268D
.text:0041265A
.text:0041265A loc_41265A:                             ; CODE XREF: sub_410310+2388↓j
.text:0041265A                 cmp     edi, 0FFFFFFFFh
.text:0041265D                 jz      short loc_41267D
.text:0041265F
.text:0041265F loc_41265F:                             ; CODE XREF: sub_410310+237B↓j
.text:0041265F                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:00412666                 call    SetErrorMode
.text:0041266B                 sub     esp, 4
.text:0041266E                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:00412671                 call    free
.text:00412676                 mov     edx, edi
.text:00412678                 jmp     loc_4125A2
.text:0041267D ; ---------------------------------------------------------------------------
.text:0041267D
.text:0041267D loc_41267D:                             ; CODE XREF: sub_410310+234D↑j
.text:0041267D                 call    sub_412940
.text:00412682                 mov     esi, eax
.text:00412684                 call    _errno
.text:00412689                 mov     [eax], esi
.text:0041268B                 jmp     short loc_41265F
.text:0041268D ; ---------------------------------------------------------------------------
.text:0041268D
.text:0041268D loc_41268D:                             ; CODE XREF: sub_410310+2348↑j
.text:0041268D                 mov     [esp+2Ch+lpFileName], ebp ; Str
.text:00412690                 call    sub_410D30
.text:00412695                 mov     [esi+18h], eax
.text:00412698                 jmp     short loc_41265A
.text:0041269A ; ---------------------------------------------------------------------------
.text:0041269A
.text:0041269A loc_41269A:                             ; CODE XREF: sub_410310+232C↑j
.text:0041269A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0041269E                 mov     [esp+2Ch+lpFileName], ebp ; lpFileName
.text:004126A1                 call    sub_412160
.text:004126A6                 mov     edi, eax
.text:004126A8                 jmp     short loc_41264A
.text:004126A8 ; END OF FUNCTION CHUNK FOR sub_410310
.text:004126A8 ; ---------------------------------------------------------------------------
.text:004126AA                 align 10h
.text:004126B0
.text:004126B0 ; =============== S U B R O U T I N E =======================================
.text:004126B0
.text:004126B0 ; Attributes: info_from_lumina
.text:004126B0
.text:004126B0 ___get_errno    proc near               ; CODE XREF: sub_412940+B↓p
.text:004126B0
.text:004126B0 arg_0           = dword ptr  4
.text:004126B0
.text:004126B0                 mov     eax, [esp+arg_0]
.text:004126B4                 cmp     eax, 53h ; 'S'
.text:004126B7                 jg      loc_4127B0
.text:004126BD                 cmp     eax, 52h ; 'R'
.text:004126C0                 jge     short loc_412712
.text:004126C2                 cmp     eax, 0Fh
.text:004126C5                 jz      short loc_4126E0
.text:004126C7                 cmp     eax, 0Fh
.text:004126CA                 jg      short loc_412740
.text:004126CC                 cmp     eax, 9
.text:004126CF                 jg      short loc_412720
.text:004126D1                 cmp     eax, 7
.text:004126D4                 jge     short loc_412719
.text:004126D6                 cmp     eax, 3
.text:004126D9                 jg      short loc_4126FA
.text:004126DB                 cmp     eax, 2
.text:004126DE                 jl      short loc_4126F3
.text:004126E0
.text:004126E0 loc_4126E0:                             ; CODE XREF: ___get_errno+15↑j
.text:004126E0                                         ; ___get_errno+9D↓j ...
.text:004126E0                 mov     edx, 2
.text:004126E5                 lea     esi, [esi+0]
.text:004126E9                 lea     edi, [edi+0]
.text:004126F0
.text:004126F0 loc_4126F0:                             ; CODE XREF: ___get_errno+48↓j
.text:004126F0                                         ; ___get_errno+59↓j ...
.text:004126F0                 mov     eax, edx
.text:004126F2                 retn
.text:004126F3 ; ---------------------------------------------------------------------------
.text:004126F3
.text:004126F3 loc_4126F3:                             ; CODE XREF: ___get_errno+2E↑j
.text:004126F3                                         ; ___get_errno+78↓j ...
.text:004126F3                 mov     edx, 16h
.text:004126F8                 jmp     short loc_4126F0
.text:004126FA ; ---------------------------------------------------------------------------
.text:004126FA
.text:004126FA loc_4126FA:                             ; CODE XREF: ___get_errno+29↑j
.text:004126FA                 cmp     eax, 5
.text:004126FD                 jz      short loc_412712
.text:004126FF                 cmp     eax, 5
.text:00412702                 jg      short loc_41270B
.text:00412704                 mov     edx, 18h
.text:00412709                 jmp     short loc_4126F0
.text:0041270B ; ---------------------------------------------------------------------------
.text:0041270B
.text:0041270B loc_41270B:                             ; CODE XREF: ___get_errno+52↑j
.text:0041270B                                         ; ___get_errno+180↓j
.text:0041270B                 mov     edx, 9
.text:00412710                 jmp     short loc_4126F0
.text:00412712 ; ---------------------------------------------------------------------------
.text:00412712
.text:00412712 loc_412712:                             ; CODE XREF: ___get_errno+10↑j
.text:00412712                                         ; ___get_errno+4D↑j ...
.text:00412712                 mov     edx, 0Dh
.text:00412717                 jmp     short loc_4126F0
.text:00412719 ; ---------------------------------------------------------------------------
.text:00412719
.text:00412719 loc_412719:                             ; CODE XREF: ___get_errno+24↑j
.text:00412719                                         ; ___get_errno+73↓j ...
.text:00412719                 mov     edx, 0Ch
.text:0041271E                 jmp     short loc_4126F0
.text:00412720 ; ---------------------------------------------------------------------------
.text:00412720
.text:00412720 loc_412720:                             ; CODE XREF: ___get_errno+1F↑j
.text:00412720                 cmp     eax, 0Dh
.text:00412723                 jg      short loc_412719
.text:00412725                 cmp     eax, 0Ch
.text:00412728                 jge     short loc_4126F3
.text:0041272A                 cmp     eax, 0Ah
.text:0041272D                 mov     edx, 7
.text:00412732                 jz      short loc_4126F0
.text:00412734                 cmp     eax, 0Bh
.text:00412737                 jnz     short loc_4126F3
.text:00412739
.text:00412739 loc_412739:                             ; CODE XREF: ___get_errno+21A↓j
.text:00412739                 mov     edx, 8
.text:0041273E                 jmp     short loc_4126F0
.text:00412740 ; ---------------------------------------------------------------------------
.text:00412740
.text:00412740 loc_412740:                             ; CODE XREF: ___get_errno+1A↑j
.text:00412740                 cmp     eax, 22h ; '"'
.text:00412743                 jg      short loc_412774
.text:00412745                 cmp     eax, 16h
.text:00412748                 jge     short loc_412712
.text:0041274A                 cmp     eax, 12h
.text:0041274D                 jz      short loc_4126E0
.text:0041274F                 cmp     eax, 12h
.text:00412752                 jg      short loc_412765
.text:00412754                 cmp     eax, 10h
.text:00412757                 jz      short loc_412712
.text:00412759                 mov     edx, 12h
.text:0041275E                 cmp     eax, 11h
.text:00412761
.text:00412761 loc_412761:                             ; CODE XREF: ___get_errno+172↓j
.text:00412761                                         ; ___get_errno+24C↓j ...
.text:00412761                 jnz     short loc_4126F3
.text:00412763                 jmp     short loc_4126F0
.text:00412765 ; ---------------------------------------------------------------------------
.text:00412765
.text:00412765 loc_412765:                             ; CODE XREF: ___get_errno+A2↑j
.text:00412765                 cmp     eax, 14h
.text:00412768                 jle     short loc_412712
.text:0041276A
.text:0041276A loc_41276A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:0041276A                 mov     edx, 10h
.text:0041276F                 jmp     loc_4126F0
.text:00412774 ; ---------------------------------------------------------------------------
.text:00412774
.text:00412774 loc_412774:                             ; CODE XREF: ___get_errno+93↑j
.text:00412774                 cmp     eax, 41h ; 'A'
.text:00412777                 jz      short loc_412712
.text:00412779                 cmp     eax, 41h ; 'A'
.text:0041277C                 jg      short loc_412791
.text:0041277E                 cmp     eax, 24h ; '$'
.text:00412781                 jz      short loc_412712
.text:00412783                 cmp     eax, 35h ; '5'
.text:00412786                 jnz     loc_4126F3
.text:0041278C                 jmp     loc_4126E0
.text:00412791 ; ---------------------------------------------------------------------------
.text:00412791
.text:00412791 loc_412791:                             ; CODE XREF: ___get_errno+CC↑j
.text:00412791                 cmp     eax, 43h ; 'C'
.text:00412794                 jz      loc_4126E0
.text:0041279A                 cmp     eax, 50h ; 'P'
.text:0041279D                 jnz     loc_4126F3
.text:004127A3
.text:004127A3 loc_4127A3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:004127A3                 mov     edx, 11h
.text:004127A8                 jmp     loc_4126F0
.text:004127A8 ; ---------------------------------------------------------------------------
.text:004127AD                 align 10h
.text:004127B0
.text:004127B0 loc_4127B0:                             ; CODE XREF: ___get_errno+7↑j
.text:004127B0                 cmp     eax, 0A1h ; '¡'
.text:004127B5                 jz      loc_4126E0
.text:004127BB                 cmp     eax, 0A1h ; '¡'
.text:004127C0                 jg      loc_412870
.text:004127C6                 cmp     eax, 81h
.text:004127CB                 jg      short loc_412835
.text:004127CD                 cmp     eax, 80h ; '€'
.text:004127D2                 mov     edx, 0Ah
.text:004127D7                 jge     loc_4126F0
.text:004127DD                 cmp     eax, 6Ch ; 'l'
.text:004127E0                 jz      loc_412712
.text:004127E6                 cmp     eax, 6Ch ; 'l'
.text:004127E9                 jg      short loc_412807
.text:004127EB                 cmp     eax, 57h ; 'W'
.text:004127EE                 jz      loc_4126F3
.text:004127F4                 cmp     eax, 59h ; 'Y'
.text:004127F7                 jnz     loc_4126F3
.text:004127FD
.text:004127FD loc_4127FD:                             ; CODE XREF: ___get_errno+1E9↓j
.text:004127FD                                         ; ___get_errno+23C↓j
.text:004127FD                 mov     edx, 0Bh
.text:00412802                 jmp     loc_4126F0
.text:00412807 ; ---------------------------------------------------------------------------
.text:00412807
.text:00412807 loc_412807:                             ; CODE XREF: ___get_errno+139↑j
.text:00412807                 cmp     eax, 70h ; 'p'
.text:0041280A                 mov     edx, 1Ch
.text:0041280F                 jz      loc_4126F0
.text:00412815                 cmp     eax, 70h ; 'p'
.text:00412818                 jg      short loc_412827
.text:0041281A                 mov     edx, 20h ; ' '
.text:0041281F                 cmp     eax, 6Dh ; 'm'
.text:00412822                 jmp     loc_412761
.text:00412827 ; ---------------------------------------------------------------------------
.text:00412827
.text:00412827 loc_412827:                             ; CODE XREF: ___get_errno+168↑j
.text:00412827                 cmp     eax, 72h ; 'r'
.text:0041282A
.text:0041282A loc_41282A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0041282A                 jnz     loc_4126F3
.text:00412830                 jmp     loc_41270B
.text:00412835 ; ---------------------------------------------------------------------------
.text:00412835
.text:00412835 loc_412835:                             ; CODE XREF: ___get_errno+11B↑j
.text:00412835                 cmp     eax, 84h ; '„'
.text:0041283A                 jz      loc_412712
.text:00412840                 cmp     eax, 84h ; '„'
.text:00412845                 jg      short loc_41284E
.text:00412847                 cmp     eax, 82h ; '‚'
.text:0041284C                 jmp     short loc_41282A
.text:0041284E ; ---------------------------------------------------------------------------
.text:0041284E
.text:0041284E loc_41284E:                             ; CODE XREF: ___get_errno+195↑j
.text:0041284E                 cmp     eax, 91h ; '‘'
.text:00412853                 mov     edx, 29h ; ')'
.text:00412858                 jz      loc_4126F0
.text:0041285E                 cmp     eax, 9Eh ; 'ž'
.text:00412863
.text:00412863 loc_412863:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00412863                 jnz     loc_4126F3
.text:00412869                 jmp     loc_412712
.text:00412869 ; ---------------------------------------------------------------------------
.text:0041286E                 align 10h
.text:00412870
.text:00412870 loc_412870:                             ; CODE XREF: ___get_errno+110↑j
.text:00412870                 cmp     eax, 0CEh ; 'Î'
.text:00412875                 jz      loc_4126E0
.text:0041287B                 cmp     eax, 0CEh ; 'Î'
.text:00412880                 jg      short loc_4128D0
.text:00412882                 cmp     eax, 0AAh ; 'ª'
.text:00412887                 jz      loc_41276A
.text:0041288D                 cmp     eax, 0AAh ; 'ª'
.text:00412892                 jg      short loc_4128A6
.text:00412894                 cmp     eax, 0A4h ; '¤'
.text:00412899                 jz      loc_4127FD
.text:0041289F                 cmp     eax, 0A7h ; '§'
.text:004128A4                 jmp     short loc_412863
.text:004128A6 ; ---------------------------------------------------------------------------
.text:004128A6
.text:004128A6 loc_4128A6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004128A6                 cmp     eax, 0B7h ; '·'
.text:004128AB                 jz      loc_4127A3
.text:004128B1                 cmp     eax, 0B7h ; '·'
.text:004128B6                 jl      loc_4126F3
.text:004128BC                 sub     eax, 0BCh ; '¼'
.text:004128C1                 cmp     eax, 0Eh
.text:004128C4                 ja      loc_4126F3
.text:004128CA                 jmp     loc_412739
.text:004128CA ; ---------------------------------------------------------------------------
.text:004128CF                 align 10h
.text:004128D0
.text:004128D0 loc_4128D0:                             ; CODE XREF: ___get_errno+1D0↑j
.text:004128D0                 cmp     eax, 46Bh
.text:004128D5                 mov     edx, 24h ; '$'
.text:004128DA                 jz      loc_4126F0
.text:004128E0                 cmp     eax, 46Bh
.text:004128E5                 jg      short loc_412901
.text:004128E7                 cmp     eax, 0D7h ; '×'
.text:004128EC                 jz      loc_4127FD
.text:004128F2                 mov     edx, 5
.text:004128F7                 cmp     eax, 45Dh
.text:004128FC                 jmp     loc_412761
.text:00412901 ; ---------------------------------------------------------------------------
.text:00412901
.text:00412901 loc_412901:                             ; CODE XREF: ___get_errno+235↑j
.text:00412901                 cmp     eax, 4D5h
.text:00412906                 mov     edx, 4
.text:0041290B                 jz      loc_4126F0
.text:00412911                 cmp     eax, 4D5h
.text:00412916                 jg      short loc_412927
.text:00412918                 mov     edx, 13h
.text:0041291D                 cmp     eax, 4B0h
.text:00412922                 jmp     loc_412761
.text:00412927 ; ---------------------------------------------------------------------------
.text:00412927
.text:00412927 loc_412927:                             ; CODE XREF: ___get_errno+266↑j
.text:00412927                 cmp     eax, 718h
.text:0041292C                 jnz     loc_4126F3
.text:00412932                 jmp     loc_412719
.text:00412932 ___get_errno    endp
.text:00412932
.text:00412932 ; ---------------------------------------------------------------------------
.text:00412937                 align 10h
.text:00412940
.text:00412940 ; =============== S U B R O U T I N E =======================================
.text:00412940
.text:00412940
.text:00412940 sub_412940      proc near               ; CODE XREF: sub_410370:loc_4104A9↑p
.text:00412940                                         ; sub_410550:loc_4105BC↑p ...
.text:00412940
.text:00412940 var_C           = dword ptr -0Ch
.text:00412940
.text:00412940                 sub     esp, 0Ch
.text:00412943                 call    GetLastError
.text:00412948                 mov     [esp+0Ch+var_C], eax
.text:0041294B                 call    ___get_errno
.text:00412950                 add     esp, 0Ch
.text:00412953                 retn
.text:00412953 sub_412940      endp
.text:00412953
.text:00412953 ; ---------------------------------------------------------------------------
.text:00412954                 align 10h
.text:00412960
.text:00412960 ; =============== S U B R O U T I N E =======================================
.text:00412960
.text:00412960 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00412960
.text:00412960 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00412960 _win32_longpath proc near               ; CODE XREF: .text:00413124↓p
.text:00412960
.text:00412960 C               = dword ptr -278h
.text:00412960 lpFindFileData  = dword ptr -274h
.text:00412960 Destination     = byte ptr -268h
.text:00412960 var_267         = byte ptr -267h
.text:00412960 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00412960 lpFileName      = dword ptr  8
.text:00412960
.text:00412960                 push    ebp
.text:00412961                 xor     eax, eax
.text:00412963                 push    edi
.text:00412964                 push    esi
.text:00412965                 push    ebx
.text:00412966                 sub     esp, 26Ch
.text:0041296C                 mov     esi, [esp+278h+lpFileName]
.text:00412973                 lea     ebp, [esp+278h+Destination]
.text:00412977                 test    esi, esi
.text:00412979                 jz      loc_412AD7
.text:0041297F                 movsx   edx, byte ptr [esi]
.text:00412982                 mov     [esp+278h+C], edx ; C
.text:00412985                 call    isalpha
.text:0041298A                 test    eax, eax
.text:0041298C                 jz      short loc_41299F
.text:0041298E                 mov     eax, [esp+278h+lpFileName]
.text:00412995                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00412999                 jz      loc_412CDB
.text:0041299F
.text:0041299F loc_41299F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0041299F                 mov     edx, [esp+278h+lpFileName]
.text:004129A6                 movzx   eax, byte ptr [edx]
.text:004129A9                 cmp     al, 2Fh ; '/'
.text:004129AB                 jz      loc_412BBB
.text:004129B1                 cmp     al, 5Ch ; '\'
.text:004129B3                 jz      loc_412BBB
.text:004129B9
.text:004129B9 loc_4129B9:                             ; CODE XREF: _win32_longpath+26E↓j
.text:004129B9                                         ; _win32_longpath+2B1↓j ...
.text:004129B9                 mov     [ebp+268h+Destination], 0
.text:004129BD                 movzx   ebx, byte ptr [esi]
.text:004129C0                 test    bl, bl
.text:004129C2                 jz      loc_412AB9
.text:004129C8                 nop
.text:004129C9                 lea     esi, [esi+0]
.text:004129D0
.text:004129D0 loc_4129D0:                             ; CODE XREF: _win32_longpath+153↓j
.text:004129D0                 cmp     bl, 2Fh ; '/'
.text:004129D3                 jz      loc_412B70
.text:004129D9                 cmp     bl, 5Ch ; '\'
.text:004129DC                 jz      loc_412B70
.text:004129E2
.text:004129E2 loc_4129E2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004129E2                                         ; _win32_longpath+22C↓j ...
.text:004129E2                 cmp     bl, 2Eh ; '.'
.text:004129E5                 jz      loc_412B10
.text:004129EB
.text:004129EB loc_4129EB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004129EB                                         ; _win32_longpath+203↓j
.text:004129EB                 test    bl, bl
.text:004129ED                 jz      loc_412AB9
.text:004129F3                 cmp     bl, 2Fh ; '/'
.text:004129F6                 jz      short loc_412A12
.text:004129F8                 cmp     bl, 5Ch ; '\'
.text:004129FB                 jz      short loc_412A12
.text:004129FD                 lea     esi, [esi+0]
.text:00412A00
.text:00412A00 loc_412A00:                             ; CODE XREF: _win32_longpath+B0↓j
.text:00412A00                 inc     esi
.text:00412A01                 movzx   ebx, byte ptr [esi]
.text:00412A04                 test    bl, bl
.text:00412A06                 jz      short loc_412A12
.text:00412A08                 cmp     bl, 2Fh ; '/'
.text:00412A0B                 jz      short loc_412A12
.text:00412A0D                 cmp     bl, 5Ch ; '\'
.text:00412A10                 jnz     short loc_412A00
.text:00412A12
.text:00412A12 loc_412A12:                             ; CODE XREF: _win32_longpath+96↑j
.text:00412A12                                         ; _win32_longpath+9B↑j ...
.text:00412A12                 mov     byte ptr [esi], 0
.text:00412A15                 lea     edx, [esp+278h+FindFileData]
.text:00412A1C                 mov     eax, [esp+278h+lpFileName]
.text:00412A23                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:00412A27                 mov     [esp+278h+C], eax ; lpFileName
.text:00412A2A                 call    FindFirstFileA
.text:00412A2F                 mov     [esi], bl
.text:00412A31                 sub     esp, 8
.text:00412A34                 mov     edi, eax
.text:00412A36                 cmp     eax, 0FFFFFFFFh
.text:00412A39                 jz      loc_412AFC
.text:00412A3F                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00412A46                 mov     ecx, ebx
.text:00412A48                 nop
.text:00412A49                 lea     esi, [esi+0]
.text:00412A50
.text:00412A50 loc_412A50:                             ; CODE XREF: _win32_longpath+105↓j
.text:00412A50                 mov     eax, [ebx]
.text:00412A52                 add     ebx, 4
.text:00412A55                 lea     edx, [eax-1010101h]
.text:00412A5B                 not     eax
.text:00412A5D                 and     edx, eax
.text:00412A5F                 and     edx, 80808080h
.text:00412A65                 jz      short loc_412A50
.text:00412A67                 test    edx, 8080h
.text:00412A6D                 jnz     short loc_412A75
.text:00412A6F                 shr     edx, 10h
.text:00412A72                 add     ebx, 2
.text:00412A75
.text:00412A75 loc_412A75:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00412A75                 add     dl, dl
.text:00412A77                 sbb     ebx, 3
.text:00412A7A                 sub     ebx, ecx
.text:00412A7C                 lea     ecx, [esp+278h+Destination]
.text:00412A80                 sub     ecx, ebp
.text:00412A82                 add     ecx, 105h
.text:00412A88                 cmp     ecx, ebx
.text:00412A8A                 jle     short loc_412AE2
.text:00412A8C                 mov     [esp+278h+C], ebp ; Destination
.text:00412A8F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00412A96                 add     ebp, ebx
.text:00412A98                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00412A9C                 call    strcpy
.text:00412AA1                 mov     [esp+278h+C], edi ; hFindFile
.text:00412AA4                 call    FindClose
.text:00412AA9                 sub     esp, 4
.text:00412AAC
.text:00412AAC loc_412AAC:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00412AAC                 movzx   ecx, byte ptr [esi]
.text:00412AAF                 test    cl, cl
.text:00412AB1                 mov     bl, cl
.text:00412AB3                 jnz     loc_4129D0
.text:00412AB9
.text:00412AB9 loc_412AB9:                             ; CODE XREF: _win32_longpath+62↑j
.text:00412AB9                                         ; _win32_longpath+8D↑j
.text:00412AB9                 mov     esi, [esp+278h+lpFileName]
.text:00412AC0                 lea     ebp, [esp+278h+Destination]
.text:00412AC4                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00412AC8                 mov     [esp+278h+C], esi ; Destination
.text:00412ACB                 call    strcpy
.text:00412AD0                 mov     eax, [esp+278h+lpFileName]
.text:00412AD7
.text:00412AD7 loc_412AD7:                             ; CODE XREF: _win32_longpath+19↑j
.text:00412AD7                                         ; _win32_longpath+19A↓j
.text:00412AD7                 add     esp, 26Ch
.text:00412ADD                 pop     ebx
.text:00412ADE                 pop     esi
.text:00412ADF                 pop     edi
.text:00412AE0                 pop     ebp
.text:00412AE1                 retn
.text:00412AE2 ; ---------------------------------------------------------------------------
.text:00412AE2
.text:00412AE2 loc_412AE2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00412AE2                 mov     [esp+278h+C], edi ; hFindFile
.text:00412AE5                 call    FindClose
.text:00412AEA                 sub     esp, 4
.text:00412AED                 call    _errno
.text:00412AF2                 mov     dword ptr [eax], 22h ; '"'
.text:00412AF8
.text:00412AF8 loc_412AF8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00412AF8                 xor     eax, eax
.text:00412AFA                 jmp     short loc_412AD7
.text:00412AFC ; ---------------------------------------------------------------------------
.text:00412AFC
.text:00412AFC loc_412AFC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00412AFC                 call    _errno
.text:00412B01                 mov     dword ptr [eax], 16h
.text:00412B07                 jmp     short loc_412AF8
.text:00412B07 ; ---------------------------------------------------------------------------
.text:00412B09                 align 10h
.text:00412B10
.text:00412B10 loc_412B10:                             ; CODE XREF: _win32_longpath+85↑j
.text:00412B10                 movzx   eax, byte ptr [esi+1]
.text:00412B14                 test    al, al
.text:00412B16                 jnz     short loc_412B45
.text:00412B18
.text:00412B18 loc_412B18:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00412B18                                         ; _win32_longpath+1EB↓j ...
.text:00412B18                 test    bl, bl
.text:00412B1A                 jz      short loc_412B3C
.text:00412B1C                 cmp     bl, 2Fh ; '/'
.text:00412B1F                 jz      short loc_412B3C
.text:00412B21                 cmp     bl, 5Ch ; '\'
.text:00412B24                 jz      short loc_412B3C
.text:00412B26
.text:00412B26 loc_412B26:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00412B26                 mov     [ebp+268h+Destination], bl
.text:00412B29                 inc     esi
.text:00412B2A                 inc     ebp
.text:00412B2B                 movzx   ebx, byte ptr [esi]
.text:00412B2E                 test    bl, bl
.text:00412B30                 jz      short loc_412B3C
.text:00412B32                 cmp     bl, 2Fh ; '/'
.text:00412B35                 jz      short loc_412B3C
.text:00412B37                 cmp     bl, 5Ch ; '\'
.text:00412B3A                 jnz     short loc_412B26
.text:00412B3C
.text:00412B3C loc_412B3C:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00412B3C                                         ; _win32_longpath+1BF↑j ...
.text:00412B3C                 mov     [ebp+268h+Destination], 0
.text:00412B40                 jmp     loc_412AAC
.text:00412B45 ; ---------------------------------------------------------------------------
.text:00412B45
.text:00412B45 loc_412B45:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00412B45                 cmp     al, 2Fh ; '/'
.text:00412B47                 jz      short loc_412B18
.text:00412B49                 cmp     al, 5Ch ; '\'
.text:00412B4B                 jz      short loc_412B18
.text:00412B4D                 cmp     al, 2Eh ; '.'
.text:00412B4F                 jnz     loc_4129EB
.text:00412B55                 movzx   eax, byte ptr [esi+2]
.text:00412B59                 test    al, al
.text:00412B5B                 jz      short loc_412B18
.text:00412B5D                 cmp     al, 2Fh ; '/'
.text:00412B5F                 jz      short loc_412B18
.text:00412B61                 cmp     al, 5Ch ; '\'
.text:00412B63                 jnz     loc_4129EB
.text:00412B69                 jmp     short loc_412B18
.text:00412B69 ; ---------------------------------------------------------------------------
.text:00412B6B                 align 10h
.text:00412B70
.text:00412B70 loc_412B70:                             ; CODE XREF: _win32_longpath+73↑j
.text:00412B70                                         ; _win32_longpath+7C↑j
.text:00412B70                 mov     [ebp+268h+Destination], bl
.text:00412B73                 inc     esi
.text:00412B74                 inc     ebp
.text:00412B75                 mov     [ebp+268h+Destination], 0
.text:00412B79                 movzx   ebx, byte ptr [esi]
.text:00412B7C                 test    bl, bl
.text:00412B7E                 jz      loc_4129E2
.text:00412B84                 cmp     bl, 2Fh ; '/'
.text:00412B87                 jz      short loc_412BA0
.text:00412B89                 cmp     bl, 5Ch ; '\'
.text:00412B8C                 jnz     loc_4129E2
.text:00412B92                 lea     esi, [esi+0]
.text:00412B99                 lea     edi, [edi+0]
.text:00412BA0
.text:00412BA0 loc_412BA0:                             ; CODE XREF: _win32_longpath+227↑j
.text:00412BA0                                         ; _win32_longpath+24F↓j ...
.text:00412BA0                 inc     esi
.text:00412BA1                 movzx   ebx, byte ptr [esi]
.text:00412BA4                 test    bl, bl
.text:00412BA6                 jz      loc_4129E2
.text:00412BAC                 cmp     bl, 2Fh ; '/'
.text:00412BAF                 jz      short loc_412BA0
.text:00412BB1                 cmp     bl, 5Ch ; '\'
.text:00412BB4                 jz      short loc_412BA0
.text:00412BB6                 jmp     loc_4129E2
.text:00412BBB ; ---------------------------------------------------------------------------
.text:00412BBB
.text:00412BBB loc_412BBB:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00412BBB                                         ; _win32_longpath+53↑j
.text:00412BBB                 mov     edi, [esp+278h+lpFileName]
.text:00412BC2                 movzx   edx, byte ptr [edi+1]
.text:00412BC6                 cmp     dl, 2Fh ; '/'
.text:00412BC9                 jz      short loc_412BD4
.text:00412BCB                 cmp     dl, 5Ch ; '\'
.text:00412BCE                 jnz     loc_4129B9
.text:00412BD4
.text:00412BD4 loc_412BD4:                             ; CODE XREF: _win32_longpath+269↑j
.text:00412BD4                 mov     esi, [esp+278h+lpFileName]
.text:00412BDB                 mov     [ebp+268h+Destination], al
.text:00412BDE                 mov     ecx, [esp+278h+lpFileName]
.text:00412BE5                 inc     ebp
.text:00412BE6                 add     esi, 2
.text:00412BE9                 movzx   ebx, byte ptr [ecx+1]
.text:00412BED                 mov     [ebp+268h+Destination], bl
.text:00412BF0                 inc     ebp
.text:00412BF1                 movzx   eax, byte ptr [ecx+2]
.text:00412BF5                 test    al, al
.text:00412BF7                 jz      loc_412CD3
.text:00412BFD                 cmp     al, 2Fh ; '/'
.text:00412BFF                 jz      loc_412CB8
.text:00412C05                 cmp     al, 5Ch ; '\'
.text:00412C07                 mov     bl, al
.text:00412C09                 jz      loc_412CB8
.text:00412C0F
.text:00412C0F loc_412C0F:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00412C0F                                         ; _win32_longpath+376↓j
.text:00412C0F                 test    bl, bl
.text:00412C11                 jz      loc_4129B9
.text:00412C17                 cmp     bl, 2Fh ; '/'
.text:00412C1A                 jz      short loc_412C3B
.text:00412C1C                 cmp     bl, 5Ch ; '\'
.text:00412C1F                 jz      short loc_412C3B
.text:00412C21
.text:00412C21 loc_412C21:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00412C21                 mov     [ebp+268h+Destination], bl
.text:00412C24                 inc     esi
.text:00412C25                 inc     ebp
.text:00412C26                 movzx   ebx, byte ptr [esi]
.text:00412C29                 test    bl, bl
.text:00412C2B                 jz      loc_4129B9
.text:00412C31                 cmp     bl, 2Fh ; '/'
.text:00412C34                 jz      short loc_412C3B
.text:00412C36                 cmp     bl, 5Ch ; '\'
.text:00412C39                 jnz     short loc_412C21
.text:00412C3B
.text:00412C3B loc_412C3B:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00412C3B                                         ; _win32_longpath+2BF↑j ...
.text:00412C3B                 test    bl, bl
.text:00412C3D                 jz      loc_4129B9
.text:00412C43                 mov     [ebp+268h+Destination], bl
.text:00412C46                 inc     esi
.text:00412C47                 inc     ebp
.text:00412C48                 movzx   ebx, byte ptr [esi]
.text:00412C4B                 test    bl, bl
.text:00412C4D                 jz      loc_4129B9
.text:00412C53                 cmp     bl, 2Fh ; '/'
.text:00412C56                 jz      short loc_412CA0
.text:00412C58                 cmp     bl, 5Ch ; '\'
.text:00412C5B                 jz      short loc_412CA0
.text:00412C5D
.text:00412C5D loc_412C5D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00412C5D                 test    bl, bl
.text:00412C5F                 jz      loc_4129B9
.text:00412C65                 cmp     bl, 2Fh ; '/'
.text:00412C68                 jz      loc_4129B9
.text:00412C6E                 cmp     bl, 5Ch ; '\'
.text:00412C71                 jz      loc_4129B9
.text:00412C77
.text:00412C77 loc_412C77:                             ; CODE XREF: _win32_longpath+333↓j
.text:00412C77                 mov     [ebp+268h+Destination], bl
.text:00412C7A                 inc     esi
.text:00412C7B                 inc     ebp
.text:00412C7C                 movzx   ebx, byte ptr [esi]
.text:00412C7F                 test    bl, bl
.text:00412C81                 jz      loc_4129B9
.text:00412C87                 cmp     bl, 2Fh ; '/'
.text:00412C8A                 jz      loc_4129B9
.text:00412C90                 cmp     bl, 5Ch ; '\'
.text:00412C93                 jnz     short loc_412C77
.text:00412C95                 jmp     loc_4129B9
.text:00412C95 ; ---------------------------------------------------------------------------
.text:00412C9A                 align 10h
.text:00412CA0
.text:00412CA0 loc_412CA0:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00412CA0                                         ; _win32_longpath+2FB↑j ...
.text:00412CA0                 inc     esi
.text:00412CA1                 movzx   ebx, byte ptr [esi]
.text:00412CA4                 test    bl, bl
.text:00412CA6                 jz      loc_4129B9
.text:00412CAC                 cmp     bl, 2Fh ; '/'
.text:00412CAF                 jz      short loc_412CA0
.text:00412CB1                 cmp     bl, 5Ch ; '\'
.text:00412CB4                 jz      short loc_412CA0
.text:00412CB6                 jmp     short loc_412C5D
.text:00412CB8 ; ---------------------------------------------------------------------------
.text:00412CB8
.text:00412CB8 loc_412CB8:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00412CB8                                         ; _win32_longpath+2A9↑j ...
.text:00412CB8                 inc     esi
.text:00412CB9                 movzx   ebx, byte ptr [esi]
.text:00412CBC                 test    bl, bl
.text:00412CBE                 jz      loc_4129B9
.text:00412CC4                 cmp     bl, 2Fh ; '/'
.text:00412CC7                 jz      short loc_412CB8
.text:00412CC9                 cmp     bl, 5Ch ; '\'
.text:00412CCC                 jz      short loc_412CB8
.text:00412CCE                 jmp     loc_412C0F
.text:00412CD3 ; ---------------------------------------------------------------------------
.text:00412CD3
.text:00412CD3 loc_412CD3:                             ; CODE XREF: _win32_longpath+297↑j
.text:00412CD3                 movzx   ebx, byte ptr [esi]
.text:00412CD6                 jmp     loc_412C0F
.text:00412CDB ; ---------------------------------------------------------------------------
.text:00412CDB
.text:00412CDB loc_412CDB:                             ; CODE XREF: _win32_longpath+39↑j
.text:00412CDB                 movzx   ecx, byte ptr [eax]
.text:00412CDE                 mov     esi, eax
.text:00412CE0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00412CE5                 add     esi, 2
.text:00412CE8                 lea     ebp, [esp+12h]
.text:00412CEC                 mov     [esp+278h+Destination], cl
.text:00412CF0                 jmp     loc_4129B9
.text:00412CF0 _win32_longpath endp
.text:00412CF0
.text:00412CF0 ; ---------------------------------------------------------------------------
.text:00412CF5                 align 10h
.text:00412D00                 sub     esp, 0Ch
.text:00412D03                 mov     edx, [esp+10h]
.text:00412D07                 mov     dword ptr [esp+4], 0
.text:00412D0F                 mov     [esp], edx
.text:00412D12                 call    sub_410AB0
.text:00412D17                 inc     eax
.text:00412D18                 setnz   dl
.text:00412D1B                 add     esp, 0Ch
.text:00412D1E                 movzx   eax, dl
.text:00412D21                 retn
.text:00412D21 ; ---------------------------------------------------------------------------
.text:00412D22                 align 10h
.text:00412D30
.text:00412D30 ; =============== S U B R O U T I N E =======================================
.text:00412D30
.text:00412D30
.text:00412D30 sub_412D30      proc near               ; CODE XREF: sub_413350+B4↓p
.text:00412D30                                         ; sub_4134E0+AA↓p
.text:00412D30
.text:00412D30 arg_0           = dword ptr  4
.text:00412D30
.text:00412D30                 mov     ecx, [esp+arg_0]
.text:00412D34                 mov     edx, ecx
.text:00412D36                 movzx   eax, byte ptr [ecx]
.text:00412D39                 test    al, al
.text:00412D3B                 jz      short loc_412D4C
.text:00412D3D                 lea     esi, [esi+0]
.text:00412D40
.text:00412D40 loc_412D40:                             ; CODE XREF: sub_412D30+1A↓j
.text:00412D40                 cmp     al, 5Ch ; '\'
.text:00412D42                 jz      short loc_412D50
.text:00412D44
.text:00412D44 loc_412D44:                             ; CODE XREF: sub_412D30+23↓j
.text:00412D44                 inc     edx
.text:00412D45                 movzx   eax, byte ptr [edx]
.text:00412D48                 test    al, al
.text:00412D4A                 jnz     short loc_412D40
.text:00412D4C
.text:00412D4C loc_412D4C:                             ; CODE XREF: sub_412D30+B↑j
.text:00412D4C                 mov     eax, ecx
.text:00412D4E                 retn
.text:00412D4E ; ---------------------------------------------------------------------------
.text:00412D4F                 align 10h
.text:00412D50
.text:00412D50 loc_412D50:                             ; CODE XREF: sub_412D30+12↑j
.text:00412D50                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412D53                 jmp     short loc_412D44
.text:00412D53 sub_412D30      endp
.text:00412D53
.text:00412D53 ; ---------------------------------------------------------------------------
.text:00412D55                 align 10h
.text:00412D60                 push    ebx
.text:00412D61                 sub     esp, 8
.text:00412D64                 mov     ebx, [esp+14h]
.text:00412D68                 mov     edx, [esp+10h]
.text:00412D6C                 mov     [esp], ebx
.text:00412D6F                 mov     [esp+4], edx
.text:00412D73                 call    strcpy
.text:00412D78                 movzx   eax, byte ptr [ebx]
.text:00412D7B                 mov     edx, ebx
.text:00412D7D                 test    al, al
.text:00412D7F                 jz      short loc_412D9C
.text:00412D81                 jmp     short loc_412D90
.text:00412D81 ; ---------------------------------------------------------------------------
.text:00412D83                 align 10h
.text:00412D90
.text:00412D90 loc_412D90:                             ; CODE XREF: .text:00412D81↑j
.text:00412D90                                         ; .text:00412D9A↓j
.text:00412D90                 cmp     al, 5Ch ; '\'
.text:00412D92                 jz      short loc_412DA3
.text:00412D94
.text:00412D94 loc_412D94:                             ; CODE XREF: .text:00412DA6↓j
.text:00412D94                 inc     edx
.text:00412D95                 movzx   eax, byte ptr [edx]
.text:00412D98                 test    al, al
.text:00412D9A                 jnz     short loc_412D90
.text:00412D9C
.text:00412D9C loc_412D9C:                             ; CODE XREF: .text:00412D7F↑j
.text:00412D9C                 add     esp, 8
.text:00412D9F                 xor     eax, eax
.text:00412DA1                 pop     ebx
.text:00412DA2                 retn
.text:00412DA3 ; ---------------------------------------------------------------------------
.text:00412DA3
.text:00412DA3 loc_412DA3:                             ; CODE XREF: .text:00412D92↑j
.text:00412DA3                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412DA6                 jmp     short loc_412D94
.text:00412DA6 ; ---------------------------------------------------------------------------
.text:00412DA8                 align 10h
.text:00412DB0
.text:00412DB0 ; =============== S U B R O U T I N E =======================================
.text:00412DB0
.text:00412DB0
.text:00412DB0 sub_412DB0      proc near               ; CODE XREF: sub_410370+199↑p
.text:00412DB0                                         ; sub_410780+FB↑p ...
.text:00412DB0
.text:00412DB0 arg_0           = dword ptr  4
.text:00412DB0
.text:00412DB0                 mov     ecx, [esp+arg_0]
.text:00412DB4                 mov     edx, ecx
.text:00412DB6                 movzx   eax, byte ptr [ecx]
.text:00412DB9                 test    al, al
.text:00412DBB                 jz      short loc_412DCC
.text:00412DBD                 lea     esi, [esi+0]
.text:00412DC0
.text:00412DC0 loc_412DC0:                             ; CODE XREF: sub_412DB0+1A↓j
.text:00412DC0                 cmp     al, 2Fh ; '/'
.text:00412DC2                 jz      short loc_412DD0
.text:00412DC4
.text:00412DC4 loc_412DC4:                             ; CODE XREF: sub_412DB0+23↓j
.text:00412DC4                 inc     edx
.text:00412DC5                 movzx   eax, byte ptr [edx]
.text:00412DC8                 test    al, al
.text:00412DCA                 jnz     short loc_412DC0
.text:00412DCC
.text:00412DCC loc_412DCC:                             ; CODE XREF: sub_412DB0+B↑j
.text:00412DCC                 mov     eax, ecx
.text:00412DCE                 retn
.text:00412DCE ; ---------------------------------------------------------------------------
.text:00412DCF                 align 10h
.text:00412DD0
.text:00412DD0 loc_412DD0:                             ; CODE XREF: sub_412DB0+12↑j
.text:00412DD0                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412DD3                 jmp     short loc_412DC4
.text:00412DD3 sub_412DB0      endp
.text:00412DD3
.text:00412DD3 ; ---------------------------------------------------------------------------
.text:00412DD5                 align 10h
.text:00412DE0                 push    ebx
.text:00412DE1                 sub     esp, 8
.text:00412DE4                 mov     ebx, [esp+14h]
.text:00412DE8                 mov     edx, [esp+10h]
.text:00412DEC                 mov     [esp], ebx
.text:00412DEF                 mov     [esp+4], edx
.text:00412DF3                 call    strcpy
.text:00412DF8                 movzx   eax, byte ptr [ebx]
.text:00412DFB                 mov     edx, ebx
.text:00412DFD                 test    al, al
.text:00412DFF                 jz      short loc_412E1C
.text:00412E01                 jmp     short loc_412E10
.text:00412E01 ; ---------------------------------------------------------------------------
.text:00412E03                 align 10h
.text:00412E10
.text:00412E10 loc_412E10:                             ; CODE XREF: .text:00412E01↑j
.text:00412E10                                         ; .text:00412E1A↓j
.text:00412E10                 cmp     al, 2Fh ; '/'
.text:00412E12                 jz      short loc_412E23
.text:00412E14
.text:00412E14 loc_412E14:                             ; CODE XREF: .text:00412E26↓j
.text:00412E14                 inc     edx
.text:00412E15                 movzx   eax, byte ptr [edx]
.text:00412E18                 test    al, al
.text:00412E1A                 jnz     short loc_412E10
.text:00412E1C
.text:00412E1C loc_412E1C:                             ; CODE XREF: .text:00412DFF↑j
.text:00412E1C                 add     esp, 8
.text:00412E1F                 xor     eax, eax
.text:00412E21                 pop     ebx
.text:00412E22                 retn
.text:00412E23 ; ---------------------------------------------------------------------------
.text:00412E23
.text:00412E23 loc_412E23:                             ; CODE XREF: .text:00412E12↑j
.text:00412E23                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412E26                 jmp     short loc_412E14
.text:00412E26 ; ---------------------------------------------------------------------------
.text:00412E28                 align 10h
.text:00412E30                 push    ebx
.text:00412E31                 sub     esp, 8
.text:00412E34                 mov     ebx, [esp+14h]
.text:00412E38                 mov     edx, [esp+10h]
.text:00412E3C                 mov     [esp+4], ebx
.text:00412E40                 mov     [esp], edx
.text:00412E43                 call    sub_413490
.text:00412E48                 movzx   eax, byte ptr [ebx]
.text:00412E4B                 mov     edx, ebx
.text:00412E4D                 test    al, al
.text:00412E4F                 jz      short loc_412E6C
.text:00412E51                 jmp     short loc_412E60
.text:00412E51 ; ---------------------------------------------------------------------------
.text:00412E53                 align 10h
.text:00412E60
.text:00412E60 loc_412E60:                             ; CODE XREF: .text:00412E51↑j
.text:00412E60                                         ; .text:00412E6A↓j
.text:00412E60                 cmp     al, 2Fh ; '/'
.text:00412E62                 jz      short loc_412E73
.text:00412E64
.text:00412E64 loc_412E64:                             ; CODE XREF: .text:00412E76↓j
.text:00412E64                 inc     edx
.text:00412E65                 movzx   eax, byte ptr [edx]
.text:00412E68                 test    al, al
.text:00412E6A                 jnz     short loc_412E60
.text:00412E6C
.text:00412E6C loc_412E6C:                             ; CODE XREF: .text:00412E4F↑j
.text:00412E6C                 add     esp, 8
.text:00412E6F                 xor     eax, eax
.text:00412E71                 pop     ebx
.text:00412E72                 retn
.text:00412E73 ; ---------------------------------------------------------------------------
.text:00412E73
.text:00412E73 loc_412E73:                             ; CODE XREF: .text:00412E62↑j
.text:00412E73                 mov     byte ptr [edx], 5Ch ; '\'
.text:00412E76                 jmp     short loc_412E64
.text:00412E76 ; ---------------------------------------------------------------------------
.text:00412E78                 align 10h
.text:00412E80                 push    ebx
.text:00412E81                 sub     esp, 8
.text:00412E84                 mov     ebx, [esp+14h]
.text:00412E88                 mov     edx, [esp+10h]
.text:00412E8C                 mov     [esp], ebx
.text:00412E8F                 mov     [esp+4], edx
.text:00412E93                 call    sub_413490
.text:00412E98                 movzx   eax, byte ptr [ebx]
.text:00412E9B                 mov     edx, ebx
.text:00412E9D                 test    al, al
.text:00412E9F                 jz      short loc_412EBC
.text:00412EA1                 jmp     short loc_412EB0
.text:00412EA1 ; ---------------------------------------------------------------------------
.text:00412EA3                 align 10h
.text:00412EB0
.text:00412EB0 loc_412EB0:                             ; CODE XREF: .text:00412EA1↑j
.text:00412EB0                                         ; .text:00412EBA↓j
.text:00412EB0                 cmp     al, 5Ch ; '\'
.text:00412EB2                 jz      short loc_412EC1
.text:00412EB4
.text:00412EB4 loc_412EB4:                             ; CODE XREF: .text:00412EC4↓j
.text:00412EB4                 inc     edx
.text:00412EB5                 movzx   eax, byte ptr [edx]
.text:00412EB8                 test    al, al
.text:00412EBA                 jnz     short loc_412EB0
.text:00412EBC
.text:00412EBC loc_412EBC:                             ; CODE XREF: .text:00412E9F↑j
.text:00412EBC                 add     esp, 8
.text:00412EBF                 pop     ebx
.text:00412EC0                 retn
.text:00412EC1 ; ---------------------------------------------------------------------------
.text:00412EC1
.text:00412EC1 loc_412EC1:                             ; CODE XREF: .text:00412EB2↑j
.text:00412EC1                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412EC4                 jmp     short loc_412EB4
.text:00412EC4 ; ---------------------------------------------------------------------------
.text:00412EC6                 align 10h
.text:00412ED0
.text:00412ED0 ; =============== S U B R O U T I N E =======================================
.text:00412ED0
.text:00412ED0
.text:00412ED0 ; int __cdecl sub_412ED0(LPSTR)
.text:00412ED0 sub_412ED0      proc near               ; CODE XREF: .text:00412F5E↓p
.text:00412ED0                                         ; .text:00412F9E↓p ...
.text:00412ED0
.text:00412ED0 hModule         = dword ptr -1Ch
.text:00412ED0 lpFilename      = dword ptr -18h
.text:00412ED0 nSize           = dword ptr -14h
.text:00412ED0 arg_0           = dword ptr  4
.text:00412ED0
.text:00412ED0                 push    esi
.text:00412ED1                 push    ebx
.text:00412ED2                 sub     esp, 14h
.text:00412ED5                 mov     esi, [esp+1Ch+arg_0]
.text:00412ED9                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00412EE1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00412EE8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00412EEC                 call    GetModuleFileNameA
.text:00412EF1                 sub     esp, 0Ch
.text:00412EF4                 test    eax, eax
.text:00412EF6                 jz      short loc_412F38
.text:00412EF8                 cmp     eax, 104h
.text:00412EFD                 jg      short loc_412F29
.text:00412EFF
.text:00412EFF loc_412EFF:                             ; CODE XREF: sub_412ED0+66↓j
.text:00412EFF                                         ; sub_412ED0+78↓j
.text:00412EFF                 movzx   eax, byte ptr [esi]
.text:00412F02                 mov     edx, esi
.text:00412F04                 test    al, al
.text:00412F06                 jz      short loc_412F1C
.text:00412F08                 nop
.text:00412F09                 lea     esi, [esi+0]
.text:00412F10
.text:00412F10 loc_412F10:                             ; CODE XREF: sub_412ED0+4A↓j
.text:00412F10                 cmp     al, 5Ch ; '\'
.text:00412F12                 jz      short loc_412F24
.text:00412F14
.text:00412F14 loc_412F14:                             ; CODE XREF: sub_412ED0+57↓j
.text:00412F14                 inc     edx
.text:00412F15                 movzx   eax, byte ptr [edx]
.text:00412F18                 test    al, al
.text:00412F1A                 jnz     short loc_412F10
.text:00412F1C
.text:00412F1C loc_412F1C:                             ; CODE XREF: sub_412ED0+36↑j
.text:00412F1C                 add     esp, 14h
.text:00412F1F                 mov     eax, esi
.text:00412F21                 pop     ebx
.text:00412F22                 pop     esi
.text:00412F23                 retn
.text:00412F24 ; ---------------------------------------------------------------------------
.text:00412F24
.text:00412F24 loc_412F24:                             ; CODE XREF: sub_412ED0+42↑j
.text:00412F24                 mov     byte ptr [edx], 2Fh ; '/'
.text:00412F27                 jmp     short loc_412F14
.text:00412F29 ; ---------------------------------------------------------------------------
.text:00412F29
.text:00412F29 loc_412F29:                             ; CODE XREF: sub_412ED0+2D↑j
.text:00412F29                 call    _errno
.text:00412F2E                 mov     dword ptr [eax], 26h ; '&'
.text:00412F34                 xor     esi, esi
.text:00412F36                 jmp     short loc_412EFF
.text:00412F38 ; ---------------------------------------------------------------------------
.text:00412F38
.text:00412F38 loc_412F38:                             ; CODE XREF: sub_412ED0+26↑j
.text:00412F38                 call    sub_412940
.text:00412F3D                 mov     ebx, eax
.text:00412F3F                 xor     esi, esi
.text:00412F41                 call    _errno
.text:00412F46                 mov     [eax], ebx
.text:00412F48                 jmp     short loc_412EFF
.text:00412F48 sub_412ED0      endp
.text:00412F48
.text:00412F48 ; ---------------------------------------------------------------------------
.text:00412F4A                 align 10h
.text:00412F50                 sub     esp, 0Ch
.text:00412F53                 mov     [esp+8], ebx
.text:00412F57                 mov     ebx, [esp+10h]
.text:00412F5B                 mov     [esp], ebx
.text:00412F5E                 call    sub_412ED0
.text:00412F63                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412F6B                 mov     [esp], ebx
.text:00412F6E                 call    strrchr
.text:00412F73                 test    eax, eax
.text:00412F75                 jz      short loc_412F7A
.text:00412F77                 lea     ebx, [eax+1]
.text:00412F7A
.text:00412F7A loc_412F7A:                             ; CODE XREF: .text:00412F75↑j
.text:00412F7A                 mov     eax, ebx
.text:00412F7C                 mov     ebx, [esp+8]
.text:00412F80                 add     esp, 0Ch
.text:00412F83                 retn
.text:00412F83 ; ---------------------------------------------------------------------------
.text:00412F84                 align 10h
.text:00412F90                 sub     esp, 0Ch
.text:00412F93                 mov     [esp+8], ebx
.text:00412F97                 mov     ebx, [esp+10h]
.text:00412F9B                 mov     [esp], ebx
.text:00412F9E                 call    sub_412ED0
.text:00412FA3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412FAB                 mov     [esp], ebx
.text:00412FAE                 call    strrchr
.text:00412FB3                 test    eax, eax
.text:00412FB5                 jz      short loc_412FBA
.text:00412FB7                 mov     byte ptr [eax], 0
.text:00412FBA
.text:00412FBA loc_412FBA:                             ; CODE XREF: .text:00412FB5↑j
.text:00412FBA                 mov     eax, ebx
.text:00412FBC                 mov     ebx, [esp+8]
.text:00412FC0                 add     esp, 0Ch
.text:00412FC3                 retn
.text:00412FC3 ; ---------------------------------------------------------------------------
.text:00412FC4                 align 10h
.text:00412FD0                 sub     esp, 0Ch
.text:00412FD3                 mov     [esp+8], ebx
.text:00412FD7                 mov     ebx, [esp+10h]
.text:00412FDB                 mov     [esp], ebx
.text:00412FDE                 call    sub_412ED0
.text:00412FE3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00412FEB                 mov     [esp], ebx
.text:00412FEE                 call    strrchr
.text:00412FF3                 test    eax, eax
.text:00412FF5                 jz      short loc_412FFA
.text:00412FF7                 mov     byte ptr [eax], 0
.text:00412FFA
.text:00412FFA loc_412FFA:                             ; CODE XREF: .text:00412FF5↑j
.text:00412FFA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00413002                 mov     [esp], ebx
.text:00413005                 call    strrchr
.text:0041300A                 test    eax, eax
.text:0041300C                 jz      short loc_413011
.text:0041300E                 mov     byte ptr [eax], 0
.text:00413011
.text:00413011 loc_413011:                             ; CODE XREF: .text:0041300C↑j
.text:00413011                 mov     eax, ebx
.text:00413013                 mov     ebx, [esp+8]
.text:00413017                 add     esp, 0Ch
.text:0041301A                 retn
.text:0041301A ; ---------------------------------------------------------------------------
.text:0041301B                 align 10h
.text:00413020                 sub     esp, 1Ch
.text:00413023                 mov     edx, [esp+20h]
.text:00413027                 mov     [esp+10h], ebx
.text:0041302B                 xor     ebx, ebx
.text:0041302D                 mov     [esp+14h], esi
.text:00413031                 mov     [esp+18h], edi
.text:00413035                 mov     [esp], edx
.text:00413038                 call    sub_4134C0
.text:0041303D                 mov     edx, [esp+24h]
.text:00413041                 mov     edi, eax
.text:00413043                 mov     [esp], edx
.text:00413046                 call    sub_4134C0
.text:0041304B                 mov     [esp+4], eax
.text:0041304F                 mov     esi, eax
.text:00413051                 mov     [esp], edi
.text:00413054                 call    _stricmp_0
.text:00413059                 mov     [esp], edi
.text:0041305C                 test    eax, eax
.text:0041305E                 setz    bl
.text:00413061                 call    free
.text:00413066                 mov     [esp], esi
.text:00413069                 call    free
.text:0041306E                 mov     eax, ebx
.text:00413070                 mov     esi, [esp+14h]
.text:00413074                 mov     ebx, [esp+10h]
.text:00413078                 mov     edi, [esp+18h]
.text:0041307C                 add     esp, 1Ch
.text:0041307F                 retn
.text:00413080 ; ---------------------------------------------------------------------------
.text:00413080                 xor     eax, eax
.text:00413082                 retn
.text:00413082 ; ---------------------------------------------------------------------------
.text:00413083 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:004130B7↓o
.text:00413090 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:004130C6↓o
.text:004130A0 ; ---------------------------------------------------------------------------
.text:004130A0                 sub     esp, 1Ch
.text:004130A3                 mov     [esp+10h], ebx
.text:004130A7                 mov     ebx, [esp+20h]
.text:004130AB                 mov     [esp+18h], edi
.text:004130AF                 mov     edi, [esp+24h]
.text:004130B3                 mov     [esp+14h], esi
.text:004130B7                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:004130BE                 call    GetModuleHandleA
.text:004130C3                 sub     esp, 4
.text:004130C6                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:004130CE                 mov     [esp], eax
.text:004130D1                 call    GetProcAddress
.text:004130D6                 sub     esp, 8
.text:004130D9                 test    eax, eax
.text:004130DB                 jz      short loc_4130F3
.text:004130DD                 mov     dword ptr [esp+8], 104h
.text:004130E5                 mov     [esp+4], ebx
.text:004130E9                 mov     [esp], edi
.text:004130EC                 call    eax
.text:004130EE                 sub     esp, 0Ch
.text:004130F1                 mov     esi, eax
.text:004130F3
.text:004130F3 loc_4130F3:                             ; CODE XREF: .text:004130DB↑j
.text:004130F3                 test    esi, esi
.text:004130F5                 jz      short loc_413110
.text:004130F7
.text:004130F7 loc_4130F7:                             ; CODE XREF: .text:0041312B↓j
.text:004130F7                 mov     eax, ebx
.text:004130F9                 mov     esi, [esp+14h]
.text:004130FD                 mov     ebx, [esp+10h]
.text:00413101                 mov     edi, [esp+18h]
.text:00413105                 add     esp, 1Ch
.text:00413108                 retn
.text:00413108 ; ---------------------------------------------------------------------------
.text:00413109                 align 10h
.text:00413110
.text:00413110 loc_413110:                             ; CODE XREF: .text:004130F5↑j
.text:00413110                 call    sub_415010
.text:00413115                 mov     [esp], ebx
.text:00413118                 mov     [esp+4], edi
.text:0041311C                 call    strcpy
.text:00413121                 mov     [esp], ebx
.text:00413124                 call    _win32_longpath
.text:00413129                 mov     ebx, eax
.text:0041312B                 jmp     short loc_4130F7
.text:0041312B ; ---------------------------------------------------------------------------
.text:0041312D                 align 10h
.text:00413130                 sub     esp, 1Ch
.text:00413133                 mov     [esp+18h], edi
.text:00413137                 mov     edi, [esp+20h]
.text:0041313B                 mov     [esp+10h], ebx
.text:0041313F                 mov     [esp+14h], esi
.text:00413143                 mov     dword ptr [esp+8], 0
.text:0041314B                 mov     dword ptr [esp+4], 0
.text:00413153                 mov     [esp], edi
.text:00413156                 call    GetShortPathNameA
.text:0041315B                 sub     esp, 0Ch
.text:0041315E                 mov     ebx, eax
.text:00413160                 test    eax, eax
.text:00413162                 jz      short loc_4131B0
.text:00413164                 lea     edx, [eax+1]
.text:00413167                 mov     [esp], edx
.text:0041316A                 call    malloc
.text:0041316F                 test    eax, eax
.text:00413171                 mov     esi, eax
.text:00413173                 jz      short loc_4131B0
.text:00413175                 mov     [esp+8], ebx
.text:00413179                 mov     [esp+4], eax
.text:0041317D                 mov     [esp], edi
.text:00413180                 call    GetShortPathNameA
.text:00413185                 sub     esp, 0Ch
.text:00413188                 mov     edx, esi
.text:0041318A                 test    eax, eax
.text:0041318C                 jz      short loc_4131A2
.text:0041318E                 mov     esi, esi
.text:00413190
.text:00413190 loc_413190:                             ; CODE XREF: .text:004131C0↓j
.text:00413190                 mov     ebx, [esp+10h]
.text:00413194                 mov     eax, edx
.text:00413196                 mov     esi, [esp+14h]
.text:0041319A                 mov     edi, [esp+18h]
.text:0041319E                 add     esp, 1Ch
.text:004131A1                 retn
.text:004131A2 ; ---------------------------------------------------------------------------
.text:004131A2
.text:004131A2 loc_4131A2:                             ; CODE XREF: .text:0041318C↑j
.text:004131A2                 mov     [esp], esi
.text:004131A5                 call    free
.text:004131AA                 lea     esi, [esi+0]
.text:004131B0
.text:004131B0 loc_4131B0:                             ; CODE XREF: .text:00413162↑j
.text:004131B0                                         ; .text:00413173↑j
.text:004131B0                 call    sub_412940
.text:004131B5                 mov     esi, eax
.text:004131B7                 call    _errno
.text:004131BC                 mov     [eax], esi
.text:004131BE                 mov     edx, edi
.text:004131C0                 jmp     short loc_413190
.text:004131C0 ; ---------------------------------------------------------------------------
.text:004131C2                 align 10h
.text:004131D0
.text:004131D0 ; =============== S U B R O U T I N E =======================================
.text:004131D0
.text:004131D0
.text:004131D0 ; int __cdecl sub_4131D0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:004131D0 sub_4131D0      proc near               ; CODE XREF: sub_413350+93↓p
.text:004131D0
.text:004131D0 pvReserved      = dword ptr -35Ch
.text:004131D0 pUnkOuter       = dword ptr -358h
.text:004131D0 dwClsContext    = dword ptr -354h
.text:004131D0 riid            = dword ptr -350h
.text:004131D0 ppv             = dword ptr -34Ch
.text:004131D0 cchWideChar     = dword ptr -348h
.text:004131D0 var_334         = byte ptr -334h
.text:004131D0 var_330         = dword ptr -330h
.text:004131D0 String2         = byte ptr -32Ch
.text:004131D0 WideCharStr     = word ptr -21Ch
.text:004131D0 lpMultiByteStr  = dword ptr  4
.text:004131D0 lpString1       = dword ptr  8
.text:004131D0
.text:004131D0                 push    edi
.text:004131D1                 push    esi
.text:004131D2                 push    ebx
.text:004131D3                 sub     esp, 350h
.text:004131D9                 mov     edi, [esp+35Ch+lpString1]
.text:004131E0                 mov     byte ptr [edi], 0
.text:004131E3                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:004131EA                 call    OleInitialize
.text:004131EF                 sub     esp, 4
.text:004131F2                 cmp     eax, 1
.text:004131F5                 ja      loc_41332F
.text:004131FB                 mov     [esp+35Ch+riid], offset riid ; riid
.text:00413203                 lea     ecx, [esp+35Ch+var_330]
.text:00413207                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0041320B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:00413213                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0041321B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:00413222                 call    CoCreateInstance
.text:00413227                 sub     esp, 14h
.text:0041322A                 test    eax, eax
.text:0041322C                 js      loc_41332F
.text:00413232                 mov     ebx, [esp+35Ch+var_330]
.text:00413236                 lea     edx, [esp+35Ch+var_334]
.text:0041323A                 mov     esi, [ebx]
.text:0041323C                 mov     [esp+35Ch+dwClsContext], edx
.text:00413240                 mov     [esp+35Ch+pvReserved], ebx
.text:00413243                 xor     ebx, ebx
.text:00413245                 mov     [esp+35Ch+pUnkOuter], offset dword_417E10
.text:0041324D                 call    dword ptr [esi]
.text:0041324F                 sub     esp, 0Ch
.text:00413252                 lea     esi, [esp+35Ch+WideCharStr]
.text:00413259                 call    AreFileApisANSI
.text:0041325E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:00413266                 test    eax, eax
.text:00413268                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0041326F                 setz    bl
.text:00413272                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:00413276                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0041327E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:00413282                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0041328A                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0041328D                 call    MultiByteToWideChar
.text:00413292                 sub     esp, 18h
.text:00413295                 test    eax, eax
.text:00413297                 js      loc_41332F
.text:0041329D                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:004132A1                 mov     ebx, [edx]
.text:004132A3                 mov     [esp+35Ch+dwClsContext], 0
.text:004132AB                 mov     [esp+35Ch+pUnkOuter], esi
.text:004132AF                 mov     [esp+35Ch+pvReserved], edx
.text:004132B2                 call    dword ptr [ebx+14h]
.text:004132B5                 sub     esp, 0Ch
.text:004132B8                 test    eax, eax
.text:004132BA                 js      short loc_41332F
.text:004132BC                 mov     ebx, [esp+35Ch+var_330]
.text:004132C0                 lea     esi, [esp+35Ch+String2]
.text:004132C4                 mov     ecx, [ebx]
.text:004132C6                 mov     [esp+35Ch+pvReserved], ebx
.text:004132C9                 mov     [esp+35Ch+ppv], 0
.text:004132D1                 mov     [esp+35Ch+riid], 0
.text:004132D9                 mov     [esp+35Ch+dwClsContext], 104h
.text:004132E1                 mov     [esp+35Ch+pUnkOuter], esi
.text:004132E5                 call    dword ptr [ecx+0Ch]
.text:004132E8                 sub     esp, 14h
.text:004132EB                 mov     ebx, eax
.text:004132ED                 test    eax, eax
.text:004132EF                 js      short loc_41332F
.text:004132F1                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:004132F5                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:004132F8                 call    lstrcpyA
.text:004132FD                 sub     esp, 8
.text:00413300                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:00413304                 mov     ecx, [edi]
.text:00413306                 mov     [esp+35Ch+pvReserved], edi
.text:00413309                 call    dword ptr [ecx+8]
.text:0041330C                 sub     esp, 4
.text:0041330F                 mov     edx, [esp+35Ch+var_330]
.text:00413313                 mov     esi, [edx]
.text:00413315                 mov     [esp+35Ch+pvReserved], edx
.text:00413318                 call    dword ptr [esi+8]
.text:0041331B                 sub     esp, 4
.text:0041331E                 call    CoUninitialize
.text:00413323                 mov     eax, ebx
.text:00413325
.text:00413325 loc_413325:                             ; CODE XREF: sub_4131D0+177↓j
.text:00413325                 add     esp, 350h
.text:0041332B                 pop     ebx
.text:0041332C                 pop     esi
.text:0041332D                 pop     edi
.text:0041332E                 retn
.text:0041332F ; ---------------------------------------------------------------------------
.text:0041332F
.text:0041332F loc_41332F:                             ; CODE XREF: sub_4131D0+25↑j
.text:0041332F                                         ; sub_4131D0+5C↑j ...
.text:0041332F                 call    sub_412940
.text:00413334                 mov     edi, eax
.text:00413336                 call    _errno
.text:0041333B                 mov     [eax], edi
.text:0041333D                 call    CoUninitialize
.text:00413342                 mov     eax, 0FFFFFFFFh
.text:00413347                 jmp     short loc_413325
.text:00413347 sub_4131D0      endp
.text:00413347
.text:00413347 ; ---------------------------------------------------------------------------
.text:00413349 ; const char aLnk_0[]
.text:00413349 aLnk_0          db '.lnk',0             ; DATA XREF: sub_413350+53↓o
.text:00413349                                         ; sub_413350:loc_4133B5↓o
.text:0041334E                 align 10h
.text:00413350
.text:00413350 ; =============== S U B R O U T I N E =======================================
.text:00413350
.text:00413350
.text:00413350 ; int __cdecl sub_413350(char *, LPSTR lpString1)
.text:00413350 sub_413350      proc near               ; CODE XREF: sub_410600+96↑p
.text:00413350
.text:00413350 Str             = dword ptr -1Ch
.text:00413350 Source          = dword ptr -18h
.text:00413350 Destination     = dword ptr -14h
.text:00413350 arg_0           = dword ptr  4
.text:00413350 lpString1       = dword ptr  8
.text:00413350
.text:00413350                 push    ebp
.text:00413351                 push    edi
.text:00413352                 push    esi
.text:00413353                 push    ebx
.text:00413354                 sub     esp, 0Ch
.text:00413357                 mov     ebx, [esp+1Ch+arg_0]
.text:0041335B                 mov     ebp, [esp+1Ch+lpString1]
.text:0041335F                 mov     [esp+1Ch+Str], ebx ; Str
.text:00413362                 call    strlen
.text:00413367                 add     eax, 5
.text:0041336A                 mov     [esp+1Ch+Str], eax ; Size
.text:0041336D                 call    malloc
.text:00413372                 mov     [esp+1Ch+Destination], eax
.text:00413376                 test    eax, eax
.text:00413378                 jz      loc_413420
.text:0041337E                 mov     [esp+1Ch+Source], ebx ; Source
.text:00413382                 mov     [esp+1Ch+Str], eax ; Destination
.text:00413385                 call    strcpy
.text:0041338A                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:00413392                 mov     eax, [esp+1Ch+Destination]
.text:00413396                 mov     [esp+1Ch+Str], eax ; Str
.text:00413399                 call    strrchr
.text:0041339E                 test    eax, eax
.text:004133A0                 jz      short loc_4133B5
.text:004133A2                 cld
.text:004133A3                 mov     ebx, offset aLnk_0 ; ".lnk"
.text:004133A8                 mov     ecx, 5
.text:004133AD                 mov     esi, eax
.text:004133AF                 mov     edi, ebx
.text:004133B1                 repe cmpsb
.text:004133B3                 jz      short loc_4133C9
.text:004133B5
.text:004133B5 loc_4133B5:                             ; CODE XREF: sub_413350+50↑j
.text:004133B5                 mov     [esp+1Ch+Source], offset aLnk_0 ; ".lnk"
.text:004133BD                 mov     edx, [esp+1Ch+Destination]
.text:004133C1                 mov     [esp+1Ch+Str], edx ; Destination
.text:004133C4                 call    strcat
.text:004133C9
.text:004133C9 loc_4133C9:                             ; CODE XREF: sub_413350+63↑j
.text:004133C9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:004133D0                 call    SetErrorMode
.text:004133D5                 sub     esp, 4
.text:004133D8                 mov     ebx, [esp+1Ch+Destination]
.text:004133DC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:004133E0                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:004133E3                 call    sub_4131D0
.text:004133E8                 mov     [esp+1Ch+Str], ebx ; Block
.text:004133EB                 mov     esi, eax
.text:004133ED                 call    free
.text:004133F2                 mov     [esp+1Ch+Str], 0 ; uMode
.text:004133F9                 call    SetErrorMode
.text:004133FE                 sub     esp, 4
.text:00413401                 mov     [esp+1Ch+Str], ebp
.text:00413404                 call    sub_412D30
.text:00413409                 inc     esi
.text:0041340A                 jz      short loc_413420
.text:0041340C                 mov     [esp+1Ch+arg_0], ebp ; Str
.text:00413410                 add     esp, 0Ch
.text:00413413                 pop     ebx
.text:00413414                 pop     esi
.text:00413415                 pop     edi
.text:00413416                 pop     ebp
.text:00413417                 jmp     strlen
.text:00413417 ; ---------------------------------------------------------------------------
.text:0041341C                 align 10h
.text:00413420
.text:00413420 loc_413420:                             ; CODE XREF: sub_413350+28↑j
.text:00413420                                         ; sub_413350+BA↑j
.text:00413420                 add     esp, 0Ch
.text:00413423                 mov     eax, 0FFFFFFFFh
.text:00413428                 pop     ebx
.text:00413429                 pop     esi
.text:0041342A                 pop     edi
.text:0041342B                 pop     ebp
.text:0041342C                 retn
.text:0041342C sub_413350      endp
.text:0041342C
.text:0041342C ; ---------------------------------------------------------------------------
.text:0041342D                 align 10h
.text:00413430
.text:00413430 ; =============== S U B R O U T I N E =======================================
.text:00413430
.text:00413430
.text:00413430 sub_413430      proc near               ; CODE XREF: sub_410710+17↑p
.text:00413430
.text:00413430 hFindFile       = dword ptr -0Ch
.text:00413430 var_8           = dword ptr -8
.text:00413430 var_4           = dword ptr -4
.text:00413430 arg_0           = dword ptr  4
.text:00413430
.text:00413430                 sub     esp, 0Ch
.text:00413433                 mov     [esp+0Ch+var_4], esi
.text:00413437                 mov     esi, [esp+0Ch+arg_0]
.text:0041343B                 mov     [esp+0Ch+var_8], ebx
.text:0041343F                 test    esi, esi
.text:00413441                 jz      short loc_413482
.text:00413443                 mov     eax, [esi]
.text:00413445                 cmp     eax, 0FFFFFFFFh
.text:00413448                 jz      short loc_41345F
.text:0041344A                 mov     [esp+0Ch+hFindFile], eax ; hFindFile
.text:0041344D                 call    FindClose
.text:00413452                 sub     esp, 4
.text:00413455                 test    eax, eax
.text:00413457                 jz      short loc_413472
.text:00413459
.text:00413459 loc_413459:                             ; CODE XREF: sub_413430+50↓j
.text:00413459                 mov     dword ptr [esi], 0FFFFFFFFh
.text:0041345F
.text:0041345F loc_41345F:                             ; CODE XREF: sub_413430+18↑j
.text:0041345F                 mov     dword ptr [esi+14h], 1
.text:00413466
.text:00413466 loc_413466:                             ; CODE XREF: sub_413430+5D↓j
.text:00413466                 mov     ebx, [esp+0Ch+var_8]
.text:0041346A                 mov     esi, [esp+0Ch+var_4]
.text:0041346E                 add     esp, 0Ch
.text:00413471                 retn
.text:00413472 ; ---------------------------------------------------------------------------
.text:00413472
.text:00413472 loc_413472:                             ; CODE XREF: sub_413430+27↑j
.text:00413472                 call    sub_412940
.text:00413477                 mov     ebx, eax
.text:00413479                 call    _errno
.text:0041347E                 mov     [eax], ebx
.text:00413480                 jmp     short loc_413459
.text:00413482 ; ---------------------------------------------------------------------------
.text:00413482
.text:00413482 loc_413482:                             ; CODE XREF: sub_413430+11↑j
.text:00413482                 call    _errno
.text:00413487                 mov     dword ptr [eax], 16h
.text:0041348D                 jmp     short loc_413466
.text:0041348D sub_413430      endp
.text:0041348D
.text:0041348D ; ---------------------------------------------------------------------------
.text:0041348F                 align 10h
.text:00413490
.text:00413490 ; =============== S U B R O U T I N E =======================================
.text:00413490
.text:00413490
.text:00413490 sub_413490      proc near               ; CODE XREF: .text:00412E43↑p
.text:00413490                                         ; .text:00412E93↑p
.text:00413490
.text:00413490 arg_4           = dword ptr  8
.text:00413490
.text:00413490                 sub     esp, 0Ch
.text:00413493                 mov     edx, [esp+0Ch+arg_4]
.text:00413497                 test    edx, edx
.text:00413499                 jz      short loc_4134A0
.text:0041349B                 add     esp, 0Ch
.text:0041349E                 jmp     short sub_4134E0
.text:004134A0 ; ---------------------------------------------------------------------------
.text:004134A0
.text:004134A0 loc_4134A0:                             ; CODE XREF: sub_413490+9↑j
.text:004134A0                 call    _errno
.text:004134A5                 mov     dword ptr [eax], 16h
.text:004134AB                 xor     eax, eax
.text:004134AD                 add     esp, 0Ch
.text:004134B0                 retn
.text:004134B0 sub_413490      endp
.text:004134B0
.text:004134B1 ; ---------------------------------------------------------------------------
.text:004134B1                 jmp     short sub_4134C0
.text:004134B1 ; ---------------------------------------------------------------------------
.text:004134B3                 align 10h
.text:004134C0
.text:004134C0 ; =============== S U B R O U T I N E =======================================
.text:004134C0
.text:004134C0
.text:004134C0 ; int __cdecl sub_4134C0(LPCSTR)
.text:004134C0 sub_4134C0      proc near               ; CODE XREF: sub_410780+F3↑p
.text:004134C0                                         ; sub_410310+22C4↑p ...
.text:004134C0
.text:004134C0 lpFileName      = dword ptr -0Ch
.text:004134C0 Destination     = dword ptr -8
.text:004134C0 arg_0           = dword ptr  4
.text:004134C0
.text:004134C0                 sub     esp, 0Ch
.text:004134C3                 mov     edx, [esp+0Ch+arg_0]
.text:004134C7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:004134CF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:004134D2                 call    sub_4134E0
.text:004134D7                 add     esp, 0Ch
.text:004134DA                 retn
.text:004134DA sub_4134C0      endp
.text:004134DA
.text:004134DA ; ---------------------------------------------------------------------------
.text:004134DB                 align 10h
.text:004134E0
.text:004134E0 ; =============== S U B R O U T I N E =======================================
.text:004134E0
.text:004134E0
.text:004134E0 ; int __cdecl sub_4134E0(LPCSTR lpFileName, char *Destination)
.text:004134E0 sub_4134E0      proc near               ; CODE XREF: sub_413490+E↑j
.text:004134E0                                         ; sub_4134C0+12↑p
.text:004134E0
.text:004134E0 Size            = dword ptr -2Ch
.text:004134E0 nBufferLength   = dword ptr -28h
.text:004134E0 lpBuffer        = dword ptr -24h
.text:004134E0 lpFilePart      = dword ptr -20h
.text:004134E0 FilePart        = dword ptr -14h
.text:004134E0 lpFileName      = dword ptr  4
.text:004134E0 Destination     = dword ptr  8
.text:004134E0
.text:004134E0                 push    ebp
.text:004134E1                 push    edi
.text:004134E2                 push    esi
.text:004134E3                 push    ebx
.text:004134E4                 sub     esp, 1Ch
.text:004134E7                 mov     edi, [esp+2Ch+lpFileName]
.text:004134EB                 mov     ebp, [esp+2Ch+Destination]
.text:004134EF                 test    edi, edi
.text:004134F1                 jz      loc_4135F9
.text:004134F7                 cmp     byte ptr [edi], 0
.text:004134FA                 jz      loc_4135EC
.text:00413500                 mov     [esp+2Ch+Size], 104h ; Size
.text:00413507                 call    malloc
.text:0041350C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00413510                 lea     edx, [esp+2Ch+FilePart]
.text:00413514                 mov     ebx, eax
.text:00413516                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0041351A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00413522                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00413525                 call    GetFullPathNameA
.text:0041352A                 sub     esp, 10h
.text:0041352D                 mov     esi, eax
.text:0041352F                 test    eax, eax
.text:00413531                 jz      loc_4135DA
.text:00413537                 cmp     eax, 104h
.text:0041353C                 jle     short loc_41354D
.text:0041353E                 test    ebp, ebp
.text:00413540                 jz      short loc_4135A9
.text:00413542                 call    _errno
.text:00413547                 mov     dword ptr [eax], 26h ; '&'
.text:0041354D
.text:0041354D loc_41354D:                             ; CODE XREF: sub_4134E0+5C↑j
.text:0041354D                                         ; sub_4134E0+F5↓j
.text:0041354D                 call    _errno
.text:00413552                 mov     edi, [eax]
.text:00413554                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0041355C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0041355F                 call    sub_410AB0
.text:00413564                 test    eax, eax
.text:00413566                 jnz     short loc_413580
.text:00413568                 movzx   eax, byte ptr [esi+ebx-1]
.text:0041356D                 cmp     al, 2Fh ; '/'
.text:0041356F                 jz      short loc_413580
.text:00413571                 cmp     al, 5Ch ; '\'
.text:00413573                 jz      short loc_413580
.text:00413575                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00413579                 mov     byte ptr [esi+ebx+1], 0
.text:0041357E                 mov     esi, esi
.text:00413580
.text:00413580 loc_413580:                             ; CODE XREF: sub_4134E0+86↑j
.text:00413580                                         ; sub_4134E0+8F↑j ...
.text:00413580                 call    _errno
.text:00413585                 mov     [eax], edi
.text:00413587                 mov     [esp+2Ch+Size], ebx
.text:0041358A                 call    sub_412D30
.text:0041358F                 test    ebp, ebp
.text:00413591                 mov     eax, ebx
.text:00413593                 jz      short loc_4135A1
.text:00413595                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00413599                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0041359C                 call    strcpy
.text:004135A1
.text:004135A1 loc_4135A1:                             ; CODE XREF: sub_4134E0+B3↑j
.text:004135A1                                         ; sub_4134E0+10A↓j
.text:004135A1                 add     esp, 1Ch
.text:004135A4                 pop     ebx
.text:004135A5                 pop     esi
.text:004135A6                 pop     edi
.text:004135A7                 pop     ebp
.text:004135A8                 retn
.text:004135A9 ; ---------------------------------------------------------------------------
.text:004135A9
.text:004135A9 loc_4135A9:                             ; CODE XREF: sub_4134E0+60↑j
.text:004135A9                 mov     [esp+2Ch+Size], ebx ; Block
.text:004135AC                 lea     ecx, [eax+2]
.text:004135AF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:004135B3                 call    realloc
.text:004135B8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004135BC                 lea     edx, [esp+2Ch+FilePart]
.text:004135C0                 mov     ebx, eax
.text:004135C2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004135C6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:004135CA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004135CD                 call    GetFullPathNameA
.text:004135D2                 sub     esp, 10h
.text:004135D5                 jmp     loc_41354D
.text:004135DA ; ---------------------------------------------------------------------------
.text:004135DA
.text:004135DA loc_4135DA:                             ; CODE XREF: sub_4134E0+51↑j
.text:004135DA                 call    sub_412940
.text:004135DF                 mov     esi, eax
.text:004135E1                 call    _errno
.text:004135E6                 mov     [eax], esi
.text:004135E8
.text:004135E8 loc_4135E8:                             ; CODE XREF: sub_4134E0+117↓j
.text:004135E8                                         ; sub_4134E0+124↓j
.text:004135E8                 xor     eax, eax
.text:004135EA                 jmp     short loc_4135A1
.text:004135EC ; ---------------------------------------------------------------------------
.text:004135EC
.text:004135EC loc_4135EC:                             ; CODE XREF: sub_4134E0+1A↑j
.text:004135EC                 call    _errno
.text:004135F1                 mov     dword ptr [eax], 2
.text:004135F7                 jmp     short loc_4135E8
.text:004135F9 ; ---------------------------------------------------------------------------
.text:004135F9
.text:004135F9 loc_4135F9:                             ; CODE XREF: sub_4134E0+11↑j
.text:004135F9                 call    _errno
.text:004135FE                 mov     dword ptr [eax], 16h
.text:00413604                 jmp     short loc_4135E8
.text:00413604 sub_4134E0      endp
.text:00413604
.text:00413604 ; ---------------------------------------------------------------------------
.text:00413606                 align 10h
.text:00413610
.text:00413610 ; =============== S U B R O U T I N E =======================================
.text:00413610
.text:00413610
.text:00413610 sub_413610      proc near               ; CODE XREF: sub_410930+4F↑p
.text:00413610
.text:00413610 var_8           = dword ptr -8
.text:00413610 var_4           = dword ptr -4
.text:00413610 arg_0           = dword ptr  4
.text:00413610 arg_4           = dword ptr  8
.text:00413610 arg_8           = dword ptr  0Ch
.text:00413610
.text:00413610                 sub     esp, 8
.text:00413613                 mov     ecx, [esp+8+arg_0]
.text:00413617                 mov     [esp+8+var_8], ebx
.text:0041361A                 mov     ebx, [esp+8+arg_8]
.text:0041361E                 mov     [esp+8+var_4], esi
.text:00413622                 mov     edx, [esp+8+arg_4]
.text:00413626                 mov     eax, ebx
.text:00413628                 and     eax, 7
.text:0041362B                 cmp     eax, 7          ; switch 8 cases
.text:0041362E                 ja      short def_413630 ; jumptable 00413630 default case
.text:00413630                 jmp     ds:jpt_413630[eax*4] ; switch jump
.text:00413630 ; ---------------------------------------------------------------------------
.text:00413637                 align 4
.text:00413638 jpt_413630      dd offset loc_4136BA    ; DATA XREF: sub_413610+20↑r
.text:00413638                 dd offset loc_4136C1    ; jump table for switch statement
.text:00413638                 dd offset loc_413658
.text:00413638                 dd offset loc_4136C9
.text:00413638                 dd offset loc_4136D6
.text:00413638                 dd offset loc_4136E3
.text:00413638                 dd offset loc_4136F0
.text:00413638                 dd offset loc_4136FD
.text:00413658 ; ---------------------------------------------------------------------------
.text:00413658
.text:00413658 loc_413658:                             ; CODE XREF: sub_413610+20↑j
.text:00413658                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:00413658                 mov     eax, [edx]      ; jumptable 00413630 case 2
.text:0041365A                 sub     ecx, 1Ch
.text:0041365D                 add     ebx, 6
.text:00413660                 sub     edx, 18h
.text:00413663                 lea     esi, [esi+0]
.text:00413669                 lea     edi, [edi+0]
.text:00413670
.text:00413670 loc_413670:                             ; CODE XREF: sub_413610+A8↓j
.text:00413670                 mov     esi, [edx+1Ch]
.text:00413673                 add     edx, 20h ; ' '
.text:00413676                 mov     [ecx+1Ch], eax
.text:00413679                 add     ecx, 20h ; ' '
.text:0041367C                 sub     ebx, 8
.text:0041367F                 jnz     short def_413630 ; jumptable 00413630 default case
.text:00413681                 mov     [ecx], esi
.text:00413683                 mov     ebx, [esp+8+var_8]
.text:00413686                 mov     esi, [esp+8+var_4]
.text:0041368A                 add     esp, 8
.text:0041368D                 retn
.text:0041368D ; ---------------------------------------------------------------------------
.text:0041368E                 align 10h
.text:00413690
.text:00413690 def_413630:                             ; CODE XREF: sub_413610+1E↑j
.text:00413690                                         ; sub_413610+6F↑j ...
.text:00413690                 mov     eax, [edx]      ; jumptable 00413630 default case
.text:00413692                 mov     [ecx], esi
.text:00413694
.text:00413694 loc_413694:                             ; CODE XREF: sub_413610+AF↓j
.text:00413694                 mov     esi, [edx+4]
.text:00413697                 mov     [ecx+4], eax
.text:0041369A
.text:0041369A loc_41369A:                             ; CODE XREF: sub_413610+F6↓j
.text:0041369A                 mov     eax, [edx+8]
.text:0041369D                 mov     [ecx+8], esi
.text:004136A0
.text:004136A0 loc_4136A0:                             ; CODE XREF: sub_413610+EB↓j
.text:004136A0                 mov     esi, [edx+0Ch]
.text:004136A3                 mov     [ecx+0Ch], eax
.text:004136A6
.text:004136A6 loc_4136A6:                             ; CODE XREF: sub_413610+DE↓j
.text:004136A6                 mov     eax, [edx+10h]
.text:004136A9                 mov     [ecx+10h], esi
.text:004136AC
.text:004136AC loc_4136AC:                             ; CODE XREF: sub_413610+D1↓j
.text:004136AC                 mov     esi, [edx+14h]
.text:004136AF                 mov     [ecx+14h], eax
.text:004136B2
.text:004136B2 loc_4136B2:                             ; CODE XREF: sub_413610+C4↓j
.text:004136B2                 mov     eax, [edx+18h]
.text:004136B5                 mov     [ecx+18h], esi
.text:004136B8                 jmp     short loc_413670
.text:004136BA ; ---------------------------------------------------------------------------
.text:004136BA
.text:004136BA loc_4136BA:                             ; CODE XREF: sub_413610+20↑j
.text:004136BA                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136BA                 mov     eax, [edx]      ; jumptable 00413630 case 0
.text:004136BC                 sub     ecx, 4
.text:004136BF                 jmp     short loc_413694
.text:004136C1 ; ---------------------------------------------------------------------------
.text:004136C1
.text:004136C1 loc_4136C1:                             ; CODE XREF: sub_413610+20↑j
.text:004136C1                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136C1                 mov     esi, [edx]      ; jumptable 00413630 case 1
.text:004136C3                 dec     ebx
.text:004136C4                 add     edx, 4
.text:004136C7                 jmp     short def_413630 ; jumptable 00413630 default case
.text:004136C9 ; ---------------------------------------------------------------------------
.text:004136C9
.text:004136C9 loc_4136C9:                             ; CODE XREF: sub_413610+20↑j
.text:004136C9                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136C9                 mov     esi, [edx]      ; jumptable 00413630 case 3
.text:004136CB                 sub     ecx, 18h
.text:004136CE                 add     ebx, 5
.text:004136D1                 sub     edx, 14h
.text:004136D4                 jmp     short loc_4136B2
.text:004136D6 ; ---------------------------------------------------------------------------
.text:004136D6
.text:004136D6 loc_4136D6:                             ; CODE XREF: sub_413610+20↑j
.text:004136D6                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136D6                 mov     eax, [edx]      ; jumptable 00413630 case 4
.text:004136D8                 sub     ecx, 14h
.text:004136DB                 add     ebx, 4
.text:004136DE                 sub     edx, 10h
.text:004136E1                 jmp     short loc_4136AC
.text:004136E3 ; ---------------------------------------------------------------------------
.text:004136E3
.text:004136E3 loc_4136E3:                             ; CODE XREF: sub_413610+20↑j
.text:004136E3                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136E3                 mov     esi, [edx]      ; jumptable 00413630 case 5
.text:004136E5                 sub     ecx, 10h
.text:004136E8                 add     ebx, 3
.text:004136EB                 sub     edx, 0Ch
.text:004136EE                 jmp     short loc_4136A6
.text:004136F0 ; ---------------------------------------------------------------------------
.text:004136F0
.text:004136F0 loc_4136F0:                             ; CODE XREF: sub_413610+20↑j
.text:004136F0                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136F0                 mov     eax, [edx]      ; jumptable 00413630 case 6
.text:004136F2                 sub     ecx, 0Ch
.text:004136F5                 add     ebx, 2
.text:004136F8                 sub     edx, 8
.text:004136FB                 jmp     short loc_4136A0
.text:004136FD ; ---------------------------------------------------------------------------
.text:004136FD
.text:004136FD loc_4136FD:                             ; CODE XREF: sub_413610+20↑j
.text:004136FD                                         ; DATA XREF: sub_413610:jpt_413630↑o
.text:004136FD                 mov     esi, [edx]      ; jumptable 00413630 case 7
.text:004136FF                 sub     ecx, 8
.text:00413702                 inc     ebx
.text:00413703                 sub     edx, 4
.text:00413706                 jmp     short loc_41369A
.text:00413706 sub_413610      endp
.text:00413706
.text:00413706 ; ---------------------------------------------------------------------------
.text:00413708                 align 10h
.text:00413710
.text:00413710 ; =============== S U B R O U T I N E =======================================
.text:00413710
.text:00413710
.text:00413710 sub_413710      proc near               ; CODE XREF: sub_410930+93↑p
.text:00413710
.text:00413710 var_1C          = dword ptr -1Ch
.text:00413710 var_18          = dword ptr -18h
.text:00413710 var_14          = dword ptr -14h
.text:00413710 arg_0           = dword ptr  4
.text:00413710 arg_4           = dword ptr  8
.text:00413710 arg_8           = dword ptr  0Ch
.text:00413710
.text:00413710                 push    ebp
.text:00413711                 push    edi
.text:00413712                 push    esi
.text:00413713                 push    ebx
.text:00413714                 sub     esp, 0Ch
.text:00413717                 mov     edx, [esp+1Ch+arg_4]
.text:0041371B                 mov     [esp+1Ch+var_14], 20h ; ' '
.text:00413723                 mov     eax, [esp+1Ch+arg_8]
.text:00413727                 mov     esi, [esp+1Ch+arg_0]
.text:0041372B                 mov     ecx, edx
.text:0041372D                 and     ecx, 3
.text:00413730                 and     eax, 3
.text:00413733                 shl     ecx, 3
.text:00413736                 and     edx, 0FFFFFFFCh
.text:00413739                 sub     [esp+1Ch+var_14], ecx
.text:0041373D                 cmp     eax, 1
.text:00413740                 mov     [esp+1Ch+var_18], ecx
.text:00413744                 jz      loc_413830
.text:0041374A                 cmp     eax, 1
.text:0041374D                 jb      loc_413820
.text:00413753                 cmp     eax, 2
.text:00413756                 jz      loc_413804
.text:0041375C                 cmp     eax, 3
.text:0041375F                 jz      loc_4137F3
.text:00413765
.text:00413765 loc_413765:                             ; CODE XREF: sub_413710+C7↓j
.text:00413765                                         ; sub_413710+12C↓j
.text:00413765                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041376A                 mov     eax, edi
.text:0041376C                 mov     ebx, [edx]
.text:0041376E                 shr     ebp, cl
.text:00413770                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:00413775                 shl     eax, cl
.text:00413777                 or      ebp, eax
.text:00413779                 mov     [esi], ebp
.text:0041377B
.text:0041377B loc_41377B:                             ; CODE XREF: sub_413710+11B↓j
.text:0041377B                 mov     ecx, [edx+4]
.text:0041377E                 mov     ebp, ebx
.text:00413780                 mov     [esp+1Ch+var_1C], ecx
.text:00413783                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:00413788                 shr     edi, cl
.text:0041378A                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:0041378F                 shl     ebp, cl
.text:00413791                 or      edi, ebp
.text:00413793                 mov     [esi+4], edi
.text:00413796
.text:00413796 loc_413796:                             ; CODE XREF: sub_413710+F2↓j
.text:00413796                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:0041379B                 mov     edi, [esp+1Ch+var_1C]
.text:0041379E                 mov     ebp, [edx+8]
.text:004137A1                 shr     ebx, cl
.text:004137A3                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004137A8                 shl     edi, cl
.text:004137AA                 or      ebx, edi
.text:004137AC                 mov     [esi+8], ebx
.text:004137AF
.text:004137AF loc_4137AF:                             ; CODE XREF: sub_413710+107↓j
.text:004137AF                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004137B4                 mov     ebx, ebp
.text:004137B6                 mov     edi, [edx+0Ch]
.text:004137B9                 add     edx, 10h
.text:004137BC                 shr     [esp+1Ch+var_1C], cl
.text:004137BF                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004137C4                 shl     ebx, cl
.text:004137C6                 or      [esp+1Ch+var_1C], ebx
.text:004137C9                 mov     ebx, [esp+1Ch+var_1C]
.text:004137CC                 mov     [esi+0Ch], ebx
.text:004137CF                 add     esi, 10h
.text:004137D2                 sub     [esp+1Ch+arg_8], 4
.text:004137D7                 jnz     short loc_413765
.text:004137D9                 movzx   ecx, byte ptr [esp+1Ch+var_18]
.text:004137DE                 shr     ebp, cl
.text:004137E0                 movzx   ecx, byte ptr [esp+1Ch+var_14]
.text:004137E5                 shl     edi, cl
.text:004137E7                 or      ebp, edi
.text:004137E9                 mov     [esi], ebp
.text:004137EB                 add     esp, 0Ch
.text:004137EE                 pop     ebx
.text:004137EF                 pop     esi
.text:004137F0                 pop     edi
.text:004137F1                 pop     ebp
.text:004137F2                 retn
.text:004137F3 ; ---------------------------------------------------------------------------
.text:004137F3
.text:004137F3 loc_4137F3:                             ; CODE XREF: sub_413710+4F↑j
.text:004137F3                 inc     [esp+1Ch+arg_8]
.text:004137F7                 sub     esi, 8
.text:004137FA                 mov     eax, [edx+4]
.text:004137FD                 mov     ebx, [edx]
.text:004137FF                 mov     [esp+1Ch+var_1C], eax
.text:00413802                 jmp     short loc_413796
.text:00413804 ; ---------------------------------------------------------------------------
.text:00413804
.text:00413804 loc_413804:                             ; CODE XREF: sub_413710+46↑j
.text:00413804                 add     [esp+1Ch+arg_8], 2
.text:00413809                 sub     esi, 0Ch
.text:0041380C                 mov     ecx, [edx]
.text:0041380E                 mov     ebp, [edx+4]
.text:00413811                 sub     edx, 4
.text:00413814                 mov     [esp+1Ch+var_1C], ecx
.text:00413817                 jmp     short loc_4137AF
.text:00413817 ; ---------------------------------------------------------------------------
.text:00413819                 align 10h
.text:00413820
.text:00413820 loc_413820:                             ; CODE XREF: sub_413710+3D↑j
.text:00413820                 mov     edi, [edx]
.text:00413822                 sub     esi, 4
.text:00413825                 mov     ebx, [edx+4]
.text:00413828                 add     edx, 4
.text:0041382B                 jmp     loc_41377B
.text:00413830 ; ---------------------------------------------------------------------------
.text:00413830
.text:00413830 loc_413830:                             ; CODE XREF: sub_413710+34↑j
.text:00413830                 dec     [esp+1Ch+arg_8]
.text:00413834                 mov     ebp, [edx]
.text:00413836                 mov     edi, [edx+4]
.text:00413839                 add     edx, 8
.text:0041383C                 jmp     loc_413765
.text:0041383C sub_413710      endp
.text:0041383C
.text:00413841 ; ---------------------------------------------------------------------------
.text:00413841                 jmp     short loc_413850
.text:00413841 ; ---------------------------------------------------------------------------
.text:00413843                 align 10h
.text:00413850
.text:00413850 loc_413850:                             ; CODE XREF: .text:00413841↑j
.text:00413850                 sub     esp, 8
.text:00413853                 mov     ecx, [esp+0Ch]
.text:00413857                 mov     [esp+4], esi
.text:0041385B                 mov     esi, [esp+14h]
.text:0041385F                 mov     [esp], ebx
.text:00413862                 mov     edx, [esp+10h]
.text:00413866                 mov     eax, esi
.text:00413868                 and     eax, 7
.text:0041386B                 cmp     eax, 7          ; switch 8 cases
.text:0041386E                 ja      short def_413870 ; jumptable 00413870 default case
.text:00413870                 jmp     ds:jpt_413870[eax*4] ; switch jump
.text:00413870 ; ---------------------------------------------------------------------------
.text:00413877                 align 4
.text:00413878 jpt_413870      dd offset loc_4138FC    ; DATA XREF: .text:00413870↑r
.text:00413878                 dd offset loc_413907    ; jump table for switch statement
.text:00413878                 dd offset loc_413898
.text:00413878                 dd offset loc_413913
.text:00413878                 dd offset loc_413921
.text:00413878                 dd offset loc_41392F
.text:00413878                 dd offset loc_41393D
.text:00413878                 dd offset loc_41394B
.text:00413898 ; ---------------------------------------------------------------------------
.text:00413898
.text:00413898 loc_413898:                             ; CODE XREF: .text:00413870↑j
.text:00413898                                         ; DATA XREF: .text:jpt_413870↑o
.text:00413898                 sub     edx, 8          ; jumptable 00413870 case 2
.text:0041389B                 sub     ecx, 4
.text:0041389E                 mov     eax, [edx+4]
.text:004138A1                 add     esi, 6
.text:004138A4                 lea     esi, [esi+0]
.text:004138AA                 lea     edi, [edi+0]
.text:004138B0
.text:004138B0 loc_4138B0:                             ; CODE XREF: .text:004138FA↓j
.text:004138B0                 mov     ebx, [edx]
.text:004138B2                 sub     edx, 20h ; ' '
.text:004138B5                 mov     [ecx], eax
.text:004138B7                 sub     ecx, 20h ; ' '
.text:004138BA                 sub     esi, 8
.text:004138BD                 jnz     short def_413870 ; jumptable 00413870 default case
.text:004138BF                 mov     [ecx+1Ch], ebx
.text:004138C2                 mov     ebx, [esp]
.text:004138C5                 mov     esi, [esp+4]
.text:004138C9                 add     esp, 8
.text:004138CC                 retn
.text:004138CC ; ---------------------------------------------------------------------------
.text:004138CD                 align 10h
.text:004138D0
.text:004138D0 def_413870:                             ; CODE XREF: .text:0041386E↑j
.text:004138D0                                         ; .text:004138BD↑j ...
.text:004138D0                 mov     eax, [edx+1Ch]  ; jumptable 00413870 default case
.text:004138D3                 mov     [ecx+1Ch], ebx
.text:004138D6
.text:004138D6 loc_4138D6:                             ; CODE XREF: .text:00413905↓j
.text:004138D6                 mov     ebx, [edx+18h]
.text:004138D9                 mov     [ecx+18h], eax
.text:004138DC
.text:004138DC loc_4138DC:                             ; CODE XREF: .text:00413955↓j
.text:004138DC                 mov     eax, [edx+14h]
.text:004138DF                 mov     [ecx+14h], ebx
.text:004138E2
.text:004138E2 loc_4138E2:                             ; CODE XREF: .text:00413949↓j
.text:004138E2                 mov     ebx, [edx+10h]
.text:004138E5                 mov     [ecx+10h], eax
.text:004138E8
.text:004138E8 loc_4138E8:                             ; CODE XREF: .text:0041393B↓j
.text:004138E8                 mov     eax, [edx+0Ch]
.text:004138EB                 mov     [ecx+0Ch], ebx
.text:004138EE
.text:004138EE loc_4138EE:                             ; CODE XREF: .text:0041392D↓j
.text:004138EE                 mov     ebx, [edx+8]
.text:004138F1                 mov     [ecx+8], eax
.text:004138F4
.text:004138F4 loc_4138F4:                             ; CODE XREF: .text:0041391F↓j
.text:004138F4                 mov     eax, [edx+4]
.text:004138F7                 mov     [ecx+4], ebx
.text:004138FA                 jmp     short loc_4138B0
.text:004138FC ; ---------------------------------------------------------------------------
.text:004138FC
.text:004138FC loc_4138FC:                             ; CODE XREF: .text:00413870↑j
.text:004138FC                                         ; DATA XREF: .text:jpt_413870↑o
.text:004138FC                 sub     edx, 20h ; ' '  ; jumptable 00413870 case 0
.text:004138FF                 sub     ecx, 1Ch
.text:00413902                 mov     eax, [edx+1Ch]
.text:00413905                 jmp     short loc_4138D6
.text:00413907 ; ---------------------------------------------------------------------------
.text:00413907
.text:00413907 loc_413907:                             ; CODE XREF: .text:00413870↑j
.text:00413907                                         ; DATA XREF: .text:jpt_413870↑o
.text:00413907                 sub     edx, 24h ; '$'  ; jumptable 00413870 case 1
.text:0041390A                 sub     ecx, 20h ; ' '
.text:0041390D                 mov     ebx, [edx+20h]
.text:00413910                 dec     esi
.text:00413911                 jmp     short def_413870 ; jumptable 00413870 default case
.text:00413913 ; ---------------------------------------------------------------------------
.text:00413913
.text:00413913 loc_413913:                             ; CODE XREF: .text:00413870↑j
.text:00413913                                         ; DATA XREF: .text:jpt_413870↑o
.text:00413913                 sub     edx, 0Ch        ; jumptable 00413870 case 3
.text:00413916                 sub     ecx, 8
.text:00413919                 mov     ebx, [edx+8]
.text:0041391C                 add     esi, 5
.text:0041391F                 jmp     short loc_4138F4
.text:00413921 ; ---------------------------------------------------------------------------
.text:00413921
.text:00413921 loc_413921:                             ; CODE XREF: .text:00413870↑j
.text:00413921                                         ; DATA XREF: .text:jpt_413870↑o
.text:00413921                 sub     edx, 10h        ; jumptable 00413870 case 4
.text:00413924                 sub     ecx, 0Ch
.text:00413927                 mov     eax, [edx+0Ch]
.text:0041392A                 add     esi, 4
.text:0041392D                 jmp     short loc_4138EE
.text:0041392F ; ---------------------------------------------------------------------------
.text:0041392F
.text:0041392F loc_41392F:                             ; CODE XREF: .text:00413870↑j
.text:0041392F                                         ; DATA XREF: .text:jpt_413870↑o
.text:0041392F                 sub     edx, 14h        ; jumptable 00413870 case 5
.text:00413932                 sub     ecx, 10h
.text:00413935                 mov     ebx, [edx+10h]
.text:00413938                 add     esi, 3
.text:0041393B                 jmp     short loc_4138E8
.text:0041393D ; ---------------------------------------------------------------------------
.text:0041393D
.text:0041393D loc_41393D:                             ; CODE XREF: .text:00413870↑j
.text:0041393D                                         ; DATA XREF: .text:jpt_413870↑o
.text:0041393D                 sub     edx, 18h        ; jumptable 00413870 case 6
.text:00413940                 sub     ecx, 14h
.text:00413943                 mov     eax, [edx+14h]
.text:00413946                 add     esi, 2
.text:00413949                 jmp     short loc_4138E2
.text:0041394B ; ---------------------------------------------------------------------------
.text:0041394B
.text:0041394B loc_41394B:                             ; CODE XREF: .text:00413870↑j
.text:0041394B                                         ; DATA XREF: .text:jpt_413870↑o
.text:0041394B                 sub     edx, 1Ch        ; jumptable 00413870 case 7
.text:0041394E                 sub     ecx, 18h
.text:00413951                 mov     ebx, [edx+18h]
.text:00413954                 inc     esi
.text:00413955                 jmp     short loc_4138DC
.text:00413955 ; ---------------------------------------------------------------------------
.text:00413957                 align 10h
.text:00413960                 push    ebp
.text:00413961                 push    edi
.text:00413962                 push    esi
.text:00413963                 push    ebx
.text:00413964                 sub     esp, 8
.text:00413967                 mov     edx, [esp+20h]
.text:0041396B                 mov     dword ptr [esp+4], 20h ; ' '
.text:00413973                 mov     eax, [esp+24h]
.text:00413977                 mov     ecx, edx
.text:00413979                 and     ecx, 3
.text:0041397C                 and     eax, 3
.text:0041397F                 shl     ecx, 3
.text:00413982                 sub     [esp+4], ecx
.text:00413986                 and     edx, 0FFFFFFFCh
.text:00413989                 add     edx, 4
.text:0041398C                 mov     [esp], ecx
.text:0041398F                 cmp     eax, 1
.text:00413992                 jz      loc_413A88
.text:00413998                 cmp     eax, 1
.text:0041399B                 jb      loc_413A75
.text:004139A1                 cmp     eax, 2
.text:004139A4                 jz      loc_413A60
.text:004139AA                 cmp     eax, 3
.text:004139AD                 jz      loc_413A4C
.text:004139B3
.text:004139B3 loc_4139B3:                             ; CODE XREF: .text:00413A2C↓j
.text:004139B3                                         ; .text:00413A9A↓j
.text:004139B3                 movzx   ecx, byte ptr [esp]
.text:004139B7                 mov     eax, edi
.text:004139B9                 mov     ebx, [esp+1Ch]
.text:004139BD                 mov     esi, [edx+0Ch]
.text:004139C0                 shr     eax, cl
.text:004139C2                 movzx   ecx, byte ptr [esp+4]
.text:004139C7                 shl     ebp, cl
.text:004139C9                 or      eax, ebp
.text:004139CB                 mov     [ebx+0Ch], eax
.text:004139CE
.text:004139CE loc_4139CE:                             ; CODE XREF: .text:00413A83↓j
.text:004139CE                 movzx   ecx, byte ptr [esp]
.text:004139D2                 mov     ebp, esi
.text:004139D4                 mov     ebx, [edx+8]
.text:004139D7                 shr     ebp, cl
.text:004139D9                 movzx   ecx, byte ptr [esp+4]
.text:004139DE                 shl     edi, cl
.text:004139E0                 or      ebp, edi
.text:004139E2                 mov     edi, [esp+1Ch]
.text:004139E6                 mov     [edi+8], ebp
.text:004139E9
.text:004139E9 loc_4139E9:                             ; CODE XREF: .text:00413A5E↓j
.text:004139E9                 movzx   ecx, byte ptr [esp]
.text:004139ED                 mov     edi, ebx
.text:004139EF                 mov     ebp, [edx+4]
.text:004139F2                 shr     edi, cl
.text:004139F4                 movzx   ecx, byte ptr [esp+4]
.text:004139F9                 shl     esi, cl
.text:004139FB                 or      edi, esi
.text:004139FD                 mov     esi, [esp+1Ch]
.text:00413A01                 mov     [esi+4], edi
.text:00413A04
.text:00413A04 loc_413A04:                             ; CODE XREF: .text:00413A73↓j
.text:00413A04                 movzx   ecx, byte ptr [esp]
.text:00413A08                 mov     esi, ebp
.text:00413A0A                 mov     edi, [edx]
.text:00413A0C                 sub     edx, 10h
.text:00413A0F                 shr     esi, cl
.text:00413A11                 movzx   ecx, byte ptr [esp+4]
.text:00413A16                 shl     ebx, cl
.text:00413A18                 or      esi, ebx
.text:00413A1A                 mov     ebx, [esp+1Ch]
.text:00413A1E                 mov     [ebx], esi
.text:00413A20                 sub     ebx, 10h
.text:00413A23                 sub     dword ptr [esp+24h], 4
.text:00413A28                 mov     [esp+1Ch], ebx
.text:00413A2C                 jnz     short loc_4139B3
.text:00413A2E                 movzx   ecx, byte ptr [esp]
.text:00413A32                 mov     edx, [esp+1Ch]
.text:00413A36                 shr     edi, cl
.text:00413A38                 movzx   ecx, byte ptr [esp+4]
.text:00413A3D                 shl     ebp, cl
.text:00413A3F                 or      edi, ebp
.text:00413A41                 mov     [edx+0Ch], edi
.text:00413A44                 add     esp, 8
.text:00413A47                 pop     ebx
.text:00413A48                 pop     esi
.text:00413A49                 pop     edi
.text:00413A4A                 pop     ebp
.text:00413A4B                 retn
.text:00413A4C ; ---------------------------------------------------------------------------
.text:00413A4C
.text:00413A4C loc_413A4C:                             ; CODE XREF: .text:004139AD↑j
.text:00413A4C                 sub     dword ptr [esp+1Ch], 8
.text:00413A51                 sub     edx, 10h
.text:00413A54                 inc     dword ptr [esp+24h]
.text:00413A58                 mov     esi, [edx+0Ch]
.text:00413A5B                 mov     ebx, [edx+8]
.text:00413A5E                 jmp     short loc_4139E9
.text:00413A60 ; ---------------------------------------------------------------------------
.text:00413A60
.text:00413A60 loc_413A60:                             ; CODE XREF: .text:004139A4↑j
.text:00413A60                 sub     dword ptr [esp+1Ch], 4
.text:00413A65                 sub     edx, 0Ch
.text:00413A68                 add     dword ptr [esp+24h], 2
.text:00413A6D                 mov     ebx, [edx+8]
.text:00413A70                 mov     ebp, [edx+4]
.text:00413A73                 jmp     short loc_413A04
.text:00413A75 ; ---------------------------------------------------------------------------
.text:00413A75
.text:00413A75 loc_413A75:                             ; CODE XREF: .text:0041399B↑j
.text:00413A75                 sub     dword ptr [esp+1Ch], 0Ch
.text:00413A7A                 sub     edx, 14h
.text:00413A7D                 mov     edi, [edx+10h]
.text:00413A80                 mov     esi, [edx+0Ch]
.text:00413A83                 jmp     loc_4139CE
.text:00413A88 ; ---------------------------------------------------------------------------
.text:00413A88
.text:00413A88 loc_413A88:                             ; CODE XREF: .text:00413992↑j
.text:00413A88                 sub     dword ptr [esp+1Ch], 10h
.text:00413A8D                 sub     edx, 18h
.text:00413A90                 dec     dword ptr [esp+24h]
.text:00413A94                 mov     ebp, [edx+14h]
.text:00413A97                 mov     edi, [edx+10h]
.text:00413A9A                 jmp     loc_4139B3
.text:00413A9A ; ---------------------------------------------------------------------------
.text:00413A9F                 align 10h
.text:00413AA0
.text:00413AA0 ; =============== S U B R O U T I N E =======================================
.text:00413AA0
.text:00413AA0
.text:00413AA0 sub_413AA0      proc near               ; CODE XREF: .text:00410A1B↑p
.text:00413AA0                 xor     eax, eax
.text:00413AA2                 retn
.text:00413AA2 sub_413AA0      endp
.text:00413AA2
.text:00413AA2 ; ---------------------------------------------------------------------------
.text:00413AA3                 align 10h
.text:00413AB0
.text:00413AB0 ; =============== S U B R O U T I N E =======================================
.text:00413AB0
.text:00413AB0
.text:00413AB0 sub_413AB0      proc near               ; CODE XREF: .text:004109F4↑p
.text:00413AB0                 xor     eax, eax
.text:00413AB2                 retn
.text:00413AB2 sub_413AB0      endp
.text:00413AB2
.text:00413AB2 ; ---------------------------------------------------------------------------
.text:00413AB3                 align 10h
.text:00413AC0
.text:00413AC0 ; =============== S U B R O U T I N E =======================================
.text:00413AC0
.text:00413AC0
.text:00413AC0 sub_413AC0      proc near               ; CODE XREF: sub_410A30+28↑p
.text:00413AC0                 xor     eax, eax
.text:00413AC2                 retn
.text:00413AC2 sub_413AC0      endp
.text:00413AC2
.text:00413AC2 ; ---------------------------------------------------------------------------
.text:00413AC3                 align 10h
.text:00413AD0 ; const char String[4]
.text:00413AD0 String          db ' :/',0              ; DATA XREF: sub_413AE0+FA↓o
.text:00413AD4                 align 10h
.text:00413AE0
.text:00413AE0 ; =============== S U B R O U T I N E =======================================
.text:00413AE0
.text:00413AE0
.text:00413AE0 ; int __cdecl sub_413AE0(LPCSTR)
.text:00413AE0 sub_413AE0      proc near               ; CODE XREF: sub_411380+E↑p
.text:00413AE0                                         ; sub_411880+17↑p ...
.text:00413AE0
.text:00413AE0 Str             = dword ptr -1Ch
.text:00413AE0 Val             = dword ptr -18h
.text:00413AE0 Count           = dword ptr -14h
.text:00413AE0 var_10          = dword ptr -10h
.text:00413AE0 var_C           = dword ptr -0Ch
.text:00413AE0 var_8           = dword ptr -8
.text:00413AE0 var_4           = dword ptr -4
.text:00413AE0 arg_0           = dword ptr  4
.text:00413AE0
.text:00413AE0                 sub     esp, 1Ch
.text:00413AE3                 mov     edx, [esp+1Ch+arg_0]
.text:00413AE7                 mov     [esp+1Ch+var_8], edi
.text:00413AEB                 mov     [esp+1Ch+var_10], ebx
.text:00413AEF                 mov     [esp+1Ch+var_C], esi
.text:00413AF3                 mov     [esp+1Ch+var_4], ebp
.text:00413AF7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:00413AFA                 call    sub_4134C0
.text:00413AFF                 test    eax, eax
.text:00413B01                 mov     edi, eax
.text:00413B03                 jz      short loc_413B40
.text:00413B05                 mov     [esp+1Ch+Str], eax ; Str
.text:00413B08                 call    strlen
.text:00413B0D                 cmp     eax, 2
.text:00413B10                 jbe     short loc_413B1C
.text:00413B12                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:00413B16                 jz      loc_413BD0
.text:00413B1C
.text:00413B1C loc_413B1C:                             ; CODE XREF: sub_413AE0+30↑j
.text:00413B1C                                         ; sub_413AE0+F4↓j
.text:00413B1C                 test    edi, edi
.text:00413B1E                 jz      short loc_413B40
.text:00413B20                 mov     [esp+1Ch+Str], edi ; Str
.text:00413B23                 call    strlen
.text:00413B28                 cmp     eax, 4
.text:00413B2B                 mov     ebp, eax
.text:00413B2D                 jle     short loc_413B40
.text:00413B2F                 cmp     byte ptr [edi], 2Fh ; '/'
.text:00413B32                 jz      short loc_413B60
.text:00413B34                 lea     esi, [esi+0]
.text:00413B3A                 lea     edi, [edi+0]
.text:00413B40
.text:00413B40 loc_413B40:                             ; CODE XREF: sub_413AE0+23↑j
.text:00413B40                                         ; sub_413AE0+3E↑j ...
.text:00413B40                 xor     esi, esi
.text:00413B42
.text:00413B42 loc_413B42:                             ; CODE XREF: sub_413AE0+CD↓j
.text:00413B42                                         ; sub_413AE0+115↓j
.text:00413B42                 mov     [esp+1Ch+Str], edi ; Block
.text:00413B45                 call    free
.text:00413B4A                 mov     eax, esi
.text:00413B4C                 mov     ebx, [esp+1Ch+var_10]
.text:00413B50                 mov     esi, [esp+1Ch+var_C]
.text:00413B54                 mov     edi, [esp+1Ch+var_8]
.text:00413B58                 mov     ebp, [esp+1Ch+var_4]
.text:00413B5C                 add     esp, 1Ch
.text:00413B5F                 retn
.text:00413B60 ; ---------------------------------------------------------------------------
.text:00413B60
.text:00413B60 loc_413B60:                             ; CODE XREF: sub_413AE0+52↑j
.text:00413B60                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00413B64                 jnz     short loc_413B40
.text:00413B66                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00413B6E                 lea     ecx, [edi+2]
.text:00413B71                 mov     [esp+1Ch+Str], ecx ; Str
.text:00413B74                 call    strchr
.text:00413B79                 test    eax, eax
.text:00413B7B                 jnz     short loc_413BAF
.text:00413B7D
.text:00413B7D loc_413B7D:                             ; CODE XREF: sub_413AE0+E2↓j
.text:00413B7D                 inc     ebp
.text:00413B7E
.text:00413B7E loc_413B7E:                             ; CODE XREF: sub_413AE0+E9↓j
.text:00413B7E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00413B86                 lea     ebx, [ebp+1]
.text:00413B89                 mov     [esp+1Ch+Str], ebx ; Count
.text:00413B8C                 call    calloc
.text:00413B91                 mov     [esp+1Ch+Str], eax ; Destination
.text:00413B94                 mov     esi, eax
.text:00413B96                 mov     [esp+1Ch+Count], ebx ; Count
.text:00413B9A                 mov     [esp+1Ch+Val], edi ; Source
.text:00413B9E                 call    strncpy
.text:00413BA3                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00413BA8                 mov     byte ptr [ebp+esi+0], 0
.text:00413BAD                 jmp     short loc_413B42
.text:00413BAF ; ---------------------------------------------------------------------------
.text:00413BAF
.text:00413BAF loc_413BAF:                             ; CODE XREF: sub_413AE0+9B↑j
.text:00413BAF                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00413BB7                 inc     eax
.text:00413BB8                 mov     [esp+1Ch+Str], eax ; Str
.text:00413BBB                 call    strchr
.text:00413BC0                 test    eax, eax
.text:00413BC2                 jz      short loc_413B7D
.text:00413BC4                 sub     eax, edi
.text:00413BC6                 lea     ebp, [eax+1]
.text:00413BC9                 jmp     short loc_413B7E
.text:00413BC9 ; ---------------------------------------------------------------------------
.text:00413BCB                 align 10h
.text:00413BD0
.text:00413BD0 loc_413BD0:                             ; CODE XREF: sub_413AE0+36↑j
.text:00413BD0                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00413BD4                 jnz     loc_413B1C
.text:00413BDA                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:00413BE1                 call    _strdup
.text:00413BE6                 movsx   edx, byte ptr [edi]
.text:00413BE9                 mov     esi, eax
.text:00413BEB                 mov     [esp+1Ch+Str], edx ; C
.text:00413BEE                 call    toupper
.text:00413BF3                 mov     [esi], al
.text:00413BF5                 jmp     loc_413B42
.text:00413BF5 sub_413AE0      endp
.text:00413BF5
.text:00413BF5 ; ---------------------------------------------------------------------------
.text:00413BFA                 align 10h
.text:00413C00
.text:00413C00 ; =============== S U B R O U T I N E =======================================
.text:00413C00
.text:00413C00
.text:00413C00 sub_413C00      proc near               ; CODE XREF: .text:00413D54↓p
.text:00413C00                                         ; .text:00413E38↓p
.text:00413C00
.text:00413C00 Str             = dword ptr -2Ch
.text:00413C00 Val             = dword ptr -28h
.text:00413C00 var_18          = dword ptr -18h
.text:00413C00 var_11          = byte ptr -11h
.text:00413C00 arg_0           = dword ptr  4
.text:00413C00
.text:00413C00                 push    ebp
.text:00413C01                 push    edi
.text:00413C02                 push    esi
.text:00413C03                 push    ebx
.text:00413C04                 sub     esp, 1Ch
.text:00413C07                 mov     edx, [esp+2Ch+arg_0]
.text:00413C0B                 cmp     edx, ds:dword_41B5C0
.text:00413C11                 mov     [esp+2Ch+var_11], 0
.text:00413C16                 jz      loc_413D14
.text:00413C1C                 mov     ebx, ds:dword_41B5B0
.text:00413C22                 test    ebx, ebx
.text:00413C24                 jz      short loc_413C92
.text:00413C26
.text:00413C26 loc_413C26:                             ; CODE XREF: sub_413C00+10F↓j
.text:00413C26                 mov     ebx, [esp+2Ch+arg_0]
.text:00413C2A                 xor     edi, edi
.text:00413C2C                 xor     esi, esi
.text:00413C2E                 mov     ebp, offset dword_41B5D8
.text:00413C33                 lea     esi, [esi+0]
.text:00413C39                 lea     edi, [edi+0]
.text:00413C40
.text:00413C40 loc_413C40:                             ; CODE XREF: sub_413C00+60↓j
.text:00413C40                 mov     edx, [ebp+4]
.text:00413C43                 mov     ecx, edi
.text:00413C45                 mov     eax, [ebp+0]
.text:00413C48                 shl     ecx, 4
.text:00413C4B                 mov     [esp+2Ch+var_18], ecx
.text:00413C4F                 mov     ecx, edx
.text:00413C51                 xor     eax, ebx
.text:00413C53                 xor     ecx, esi
.text:00413C55                 or      ecx, eax
.text:00413C57                 jz      short loc_413C81
.text:00413C59                 inc     edi
.text:00413C5A                 add     ebp, 10h
.text:00413C5D                 cmp     edi, 20h ; ' '
.text:00413C60                 jle     short loc_413C40
.text:00413C62
.text:00413C62 loc_413C62:                             ; CODE XREF: sub_413C00+90↓j
.text:00413C62                 movzx   ebx, [esp+2Ch+var_11]
.text:00413C67                 mov     eax, [esp+2Ch+arg_0]
.text:00413C6B                 mov     byte_41A080, bl
.text:00413C71                 mov     ds:dword_41B5C0, eax
.text:00413C76                 movsx   eax, bl
.text:00413C79
.text:00413C79 loc_413C79:                             ; CODE XREF: sub_413C00+11B↓j
.text:00413C79                 add     esp, 1Ch
.text:00413C7C                 pop     ebx
.text:00413C7D                 pop     esi
.text:00413C7E                 pop     edi
.text:00413C7F                 pop     ebp
.text:00413C80                 retn
.text:00413C81 ; ---------------------------------------------------------------------------
.text:00413C81
.text:00413C81 loc_413C81:                             ; CODE XREF: sub_413C00+57↑j
.text:00413C81                 mov     edx, [esp+2Ch+var_18]
.text:00413C85                 movzx   eax, byte ptr ds:dword_41B5D0[edx]
.text:00413C8C                 mov     [esp+2Ch+var_11], al
.text:00413C90                 jmp     short loc_413C62
.text:00413C92 ; ---------------------------------------------------------------------------
.text:00413C92
.text:00413C92 loc_413C92:                             ; CODE XREF: sub_413C00+24↑j
.text:00413C92                 mov     [esp+2Ch+Str], 0
.text:00413C99                 call    sub_415DF0
.text:00413C9E                 test    eax, eax
.text:00413CA0                 mov     ebx, eax
.text:00413CA2                 jz      short loc_413CFC
.text:00413CA4                 movzx   ecx, byte ptr [eax]
.text:00413CA7                 mov     esi, 0FFFFFFF0h
.text:00413CAC                 test    cl, cl
.text:00413CAE                 jz      short loc_413CFC
.text:00413CB0
.text:00413CB0 loc_413CB0:                             ; CODE XREF: sub_413C00+FA↓j
.text:00413CB0                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00413CB3                 movsx   ebp, cl
.text:00413CB6                 add     esi, 10h
.text:00413CB9                 mov     ds:dword_41B5D0[esi], ebp
.text:00413CBF                 mov     edi, ebp
.text:00413CC1                 sar     edi, 1Fh
.text:00413CC4                 mov     ds:dword_41B5D4[esi], edi
.text:00413CCA                 call    sub_411880
.text:00413CCF                 mov     ds:dword_41B5D8[esi], eax
.text:00413CD5                 xor     ecx, ecx
.text:00413CD7                 mov     [esp+2Ch+Str], ebx ; Str
.text:00413CDA                 mov     ds:dword_41B5DC[esi], ecx
.text:00413CE0                 mov     [esp+2Ch+Val], 0 ; Val
.text:00413CE8                 call    strchr
.text:00413CED                 mov     ebx, eax
.text:00413CEF                 inc     ebx
.text:00413CF0                 jz      short loc_413CFC
.text:00413CF2                 movzx   edx, byte ptr [eax+1]
.text:00413CF6                 test    dl, dl
.text:00413CF8                 mov     cl, dl
.text:00413CFA                 jnz     short loc_413CB0
.text:00413CFC
.text:00413CFC loc_413CFC:                             ; CODE XREF: sub_413C00+A2↑j
.text:00413CFC                                         ; sub_413C00+AE↑j ...
.text:00413CFC                 mov     [esp+2Ch+Str], ebx ; Block
.text:00413CFF                 mov     esi, 1
.text:00413D04                 mov     ds:dword_41B5B0, esi
.text:00413D0A                 call    free
.text:00413D0F                 jmp     loc_413C26
.text:00413D14 ; ---------------------------------------------------------------------------
.text:00413D14
.text:00413D14 loc_413D14:                             ; CODE XREF: sub_413C00+16↑j
.text:00413D14                 movsx   eax, byte_41A080
.text:00413D1B                 jmp     loc_413C79
.text:00413D1B sub_413C00      endp
.text:00413D1B
.text:00413D1B ; ---------------------------------------------------------------------------
.text:00413D20 dword_413D20    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:00413D20                                         ; DATA XREF: .text:00413D43↓o
.text:00413D20                                         ; .text:00413E23↓o
.text:00413D30 ; ---------------------------------------------------------------------------
.text:00413D30                 sub     esp, 1Ch
.text:00413D33                 mov     [esp+14h], esi
.text:00413D37                 mov     esi, [esp+20h]
.text:00413D3B                 mov     [esp+18h], edi
.text:00413D3F                 mov     [esp+10h], ebx
.text:00413D43                 mov     dword ptr [esp], offset dword_413D20
.text:00413D4A                 call    _strdup
.text:00413D4F                 mov     [esp], esi
.text:00413D52                 mov     edi, eax
.text:00413D54                 call    sub_413C00
.text:00413D59                 mov     [edi], al
.text:00413D5B                 test    al, al
.text:00413D5D                 jz      short loc_413D71
.text:00413D5F                 mov     eax, edi
.text:00413D61                 mov     ebx, [esp+10h]
.text:00413D65                 mov     esi, [esp+14h]
.text:00413D69                 mov     edi, [esp+18h]
.text:00413D6D                 add     esp, 1Ch
.text:00413D70                 retn
.text:00413D71 ; ---------------------------------------------------------------------------
.text:00413D71
.text:00413D71 loc_413D71:                             ; CODE XREF: .text:00413D5D↑j
.text:00413D71                 mov     [esp], edi
.text:00413D74                 call    free
.text:00413D79                 mov     dword ptr [esp+4], 0
.text:00413D81                 mov     dword ptr [esp], 0
.text:00413D88                 call    GetCurrentDirectoryA
.text:00413D8D                 sub     esp, 8
.text:00413D90                 lea     esi, [eax+1]
.text:00413D93                 mov     [esp], esi
.text:00413D96                 call    malloc
.text:00413D9B                 mov     [esp+4], eax
.text:00413D9F                 mov     edi, eax
.text:00413DA1                 mov     [esp], esi
.text:00413DA4                 call    GetCurrentDirectoryA
.text:00413DA9                 sub     esp, 8
.text:00413DAC                 test    eax, eax
.text:00413DAE                 jnz     short loc_413DD0
.text:00413DB0                 mov     dword ptr [esp+20h], 413D24h
.text:00413DB8                 mov     ebx, [esp+10h]
.text:00413DBC                 mov     esi, [esp+14h]
.text:00413DC0                 mov     edi, [esp+18h]
.text:00413DC4                 add     esp, 1Ch
.text:00413DC7                 jmp     _strdup
.text:00413DC7 ; ---------------------------------------------------------------------------
.text:00413DCC                 align 10h
.text:00413DD0
.text:00413DD0 loc_413DD0:                             ; CODE XREF: .text:00413DAE↑j
.text:00413DD0                 mov     [esp+20h], edi
.text:00413DD4                 mov     ebx, [esp+10h]
.text:00413DD8                 mov     esi, [esp+14h]
.text:00413DDC                 mov     edi, [esp+18h]
.text:00413DE0                 add     esp, 1Ch
.text:00413DE3                 jmp     sub_413AE0
.text:00413DE3 ; ---------------------------------------------------------------------------
.text:00413DE8                 align 10h
.text:00413DF0                 sub     esp, 7Ch
.text:00413DF3                 lea     edx, [esp+10h]
.text:00413DF7                 mov     [esp+8], edx
.text:00413DFB                 mov     edx, [esp+80h]
.text:00413E02                 mov     [esp+70h], ebx
.text:00413E06                 mov     [esp+74h], esi
.text:00413E0A                 mov     [esp+4], edx
.text:00413E0E                 mov     [esp+78h], edi
.text:00413E12                 mov     dword ptr [esp], 0
.text:00413E19                 call    sub_416000
.text:00413E1E                 xor     edx, edx
.text:00413E20                 inc     eax
.text:00413E21                 jz      short loc_413E45
.text:00413E23                 mov     dword ptr [esp], offset dword_413D20
.text:00413E2A                 mov     esi, [esp+20h]
.text:00413E2E                 call    _strdup
.text:00413E33                 mov     edi, eax
.text:00413E35                 mov     [esp], esi
.text:00413E38                 call    sub_413C00
.text:00413E3D                 mov     [edi], al
.text:00413E3F                 test    al, al
.text:00413E41                 mov     edx, edi
.text:00413E43                 jz      short loc_413E57
.text:00413E45
.text:00413E45 loc_413E45:                             ; CODE XREF: .text:00413E21↑j
.text:00413E45                                         ; .text:00413EA4↓j
.text:00413E45                 mov     ebx, [esp+70h]
.text:00413E49                 mov     eax, edx
.text:00413E4B                 mov     esi, [esp+74h]
.text:00413E4F                 mov     edi, [esp+78h]
.text:00413E53                 add     esp, 7Ch
.text:00413E56                 retn
.text:00413E57 ; ---------------------------------------------------------------------------
.text:00413E57
.text:00413E57 loc_413E57:                             ; CODE XREF: .text:00413E43↑j
.text:00413E57                 mov     [esp], edi
.text:00413E5A                 call    free
.text:00413E5F                 mov     dword ptr [esp+4], 0
.text:00413E67                 mov     dword ptr [esp], 0
.text:00413E6E                 call    GetCurrentDirectoryA
.text:00413E73                 sub     esp, 8
.text:00413E76                 lea     esi, [eax+1]
.text:00413E79                 mov     [esp], esi
.text:00413E7C                 call    malloc
.text:00413E81                 mov     [esp+4], eax
.text:00413E85                 mov     edi, eax
.text:00413E87                 mov     [esp], esi
.text:00413E8A                 call    GetCurrentDirectoryA
.text:00413E8F                 sub     esp, 8
.text:00413E92                 test    eax, eax
.text:00413E94                 jnz     short loc_413EA6
.text:00413E96                 mov     dword ptr [esp], 413D24h
.text:00413E9D                 call    _strdup
.text:00413EA2
.text:00413EA2 loc_413EA2:                             ; CODE XREF: .text:00413EAE↓j
.text:00413EA2                 mov     edx, eax
.text:00413EA4                 jmp     short loc_413E45
.text:00413EA6 ; ---------------------------------------------------------------------------
.text:00413EA6
.text:00413EA6 loc_413EA6:                             ; CODE XREF: .text:00413E94↑j
.text:00413EA6                 mov     [esp], edi
.text:00413EA9                 call    sub_413AE0
.text:00413EAE                 jmp     short loc_413EA2
.text:00413EB0
.text:00413EB0 ; =============== S U B R O U T I N E =======================================
.text:00413EB0
.text:00413EB0
.text:00413EB0 ; int __cdecl sub_413EB0(LPCSTR)
.text:00413EB0 sub_413EB0      proc near               ; CODE XREF: sub_410D30+12F↑p
.text:00413EB0
.text:00413EB0 String1         = dword ptr -1Ch
.text:00413EB0 String2         = dword ptr -18h
.text:00413EB0 var_C           = dword ptr -0Ch
.text:00413EB0 var_8           = dword ptr -8
.text:00413EB0 var_4           = dword ptr -4
.text:00413EB0 arg_0           = dword ptr  4
.text:00413EB0
.text:00413EB0                 sub     esp, 1Ch
.text:00413EB3                 mov     [esp+1Ch+var_4], edi
.text:00413EB7                 mov     edi, [esp+1Ch+arg_0]
.text:00413EBB                 mov     [esp+1Ch+var_C], ebx
.text:00413EBF                 mov     [esp+1Ch+var_8], esi
.text:00413EC3                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00413EC6                 call    sub_4134C0
.text:00413ECB                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00413ECE                 mov     esi, eax
.text:00413ED0                 call    sub_413AE0
.text:00413ED5                 mov     [esp+1Ch+String2], eax ; String2
.text:00413ED9                 mov     ebx, eax
.text:00413EDB                 mov     [esp+1Ch+String1], esi ; String1
.text:00413EDE                 call    _stricmp
.text:00413EE3                 test    eax, eax
.text:00413EE5                 setz    dl
.text:00413EE8                 test    esi, esi
.text:00413EEA                 movzx   edi, dl
.text:00413EED                 jz      short loc_413EF7
.text:00413EEF                 mov     [esp+1Ch+String1], esi ; Block
.text:00413EF2                 call    free
.text:00413EF7
.text:00413EF7 loc_413EF7:                             ; CODE XREF: sub_413EB0+3D↑j
.text:00413EF7                 test    ebx, ebx
.text:00413EF9                 jz      short loc_413F03
.text:00413EFB                 mov     [esp+1Ch+String1], ebx ; Block
.text:00413EFE                 call    free
.text:00413F03
.text:00413F03 loc_413F03:                             ; CODE XREF: sub_413EB0+49↑j
.text:00413F03                 mov     eax, edi
.text:00413F05                 mov     ebx, [esp+1Ch+var_C]
.text:00413F09                 mov     esi, [esp+1Ch+var_8]
.text:00413F0D                 mov     edi, [esp+1Ch+var_4]
.text:00413F11                 add     esp, 1Ch
.text:00413F14                 retn
.text:00413F14 sub_413EB0      endp
.text:00413F14
.text:00413F14 ; ---------------------------------------------------------------------------
.text:00413F15                 align 10h
.text:00413F20 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00413F71↓o
.text:00413F29 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:00413F29                                         ; DATA XREF: .text:00413F82↓o
.text:00413F3D ; const CHAR FileName[]
.text:00413F3D FileName        db '\\.\vwin32',0       ; DATA XREF: .text:004140CC↓o
.text:00413F3D                                         ; sub_414500+17C↓o
.text:00413F48 ; ---------------------------------------------------------------------------
.text:00413F48
.text:00413F48 loc_413F48:                             ; DATA XREF: .text:004141E2↓o
.text:00413F48                 dec     esi
.text:00413F49                 push    esp
.text:00413F4A                 inc     esi
.text:00413F4B                 push    ebx
.text:00413F4C                 add     [esi+41h], al
.text:00413F4F                 push    esp
.text:00413F50                 xor     esi, [edx]
.text:00413F52                 add     [esi+41h], al
.text:00413F55                 push    esp
.text:00413F56                 add     [ebx+44h], al
.text:00413F59                 inc     esi
.text:00413F5A                 push    ebx
.text:00413F5B
.text:00413F5B loc_413F5B:                             ; CODE XREF: sub_414500+101↓p
.text:00413F5B                 add     [ebp+55002674h], cl
.text:00413F61                 push    edi
.text:00413F62                 push    esi
.text:00413F63                 push    ebx
.text:00413F64                 sub     esp, 8BCh
.text:00413F6A                 mov     ebp, [esp+8D0h]
.text:00413F71                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00413F78                 call    LoadLibraryA
.text:00413F7D                 sub     esp, 4
.text:00413F80                 mov     edi, eax
.text:00413F82                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:00413F8A                 mov     [esp], eax
.text:00413F8D                 call    GetProcAddress
.text:00413F92                 sub     esp, 8
.text:00413F95                 mov     esi, eax
.text:00413F97                 test    ebp, ebp
.text:00413F99                 mov     dword ptr [esp+20h], 0
.text:00413FA1                 jz      loc_4144E1
.text:00413FA7                 mov     [esp], ebp
.text:00413FAA                 call    sub_412DB0
.text:00413FAF                 mov     [esp], eax
.text:00413FB2                 mov     ebp, eax
.text:00413FB4                 call    strlen
.text:00413FB9                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:00413FBE                 mov     ebx, eax
.text:00413FC0                 jz      short loc_413FDC
.text:00413FC2                 mov     [esp], ebp
.text:00413FC5                 lea     edx, [eax+1]
.text:00413FC8                 mov     [esp+4], edx
.text:00413FCC                 call    realloc
.text:00413FD1                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00413FD5                 mov     ebp, eax
.text:00413FD7                 mov     byte ptr [ebx+eax+1], 0
.text:00413FDC
.text:00413FDC loc_413FDC:                             ; CODE XREF: .text:00413FC0↑j
.text:00413FDC                 mov     dword ptr [esp+1Ch], 400h
.text:00413FE4                 lea     edx, [esp+0B0h]
.text:00413FEB                 lea     ebx, [esp+5Ch]
.text:00413FEF                 mov     [esp+18h], edx
.text:00413FF3                 lea     ecx, [esp+58h]
.text:00413FF7                 lea     edx, [esp+54h]
.text:00413FFB                 mov     [esp+14h], ebx
.text:00413FFF                 lea     eax, [esp+4B0h]
.text:00414006                 mov     [esp+10h], ecx
.text:0041400A                 mov     [esp+0Ch], edx
.text:0041400E                 mov     dword ptr [esp+8], 400h
.text:00414016                 mov     [esp+4], eax
.text:0041401A                 mov     [esp], ebp
.text:0041401D                 call    GetVolumeInformationA
.text:00414022                 sub     esp, 20h
.text:00414025                 test    eax, eax
.text:00414027                 jz      loc_4144BE
.text:0041402D                 test    esi, esi
.text:0041402F                 jz      short loc_414055
.text:00414031                 mov     [esp], ebp
.text:00414034                 lea     edx, [esp+48h]
.text:00414038                 lea     ebx, [esp+40h]
.text:0041403C                 mov     [esp+0Ch], edx
.text:00414040                 lea     ecx, [esp+38h]
.text:00414044                 mov     [esp+8], ebx
.text:00414048                 mov     [esp+4], ecx
.text:0041404C                 call    esi
.text:0041404E                 sub     esp, 10h
.text:00414051                 mov     [esp+20h], eax
.text:00414055
.text:00414055 loc_414055:                             ; CODE XREF: .text:0041402F↑j
.text:00414055                 test    edi, edi
.text:00414057                 jz      short loc_414064
.text:00414059                 mov     [esp], edi
.text:0041405C                 call    FreeLibrary
.text:00414061                 sub     esp, 4
.text:00414064
.text:00414064 loc_414064:                             ; CODE XREF: .text:00414057↑j
.text:00414064                 call    sub_415010
.text:00414069                 test    eax, eax
.text:0041406B                 lea     esi, [esp+28h]
.text:0041406F                 jz      loc_4144A0
.text:00414075                 call    sub_415010
.text:0041407A                 test    eax, eax
.text:0041407C                 jz      short loc_41408C
.text:0041407E                 call    sub_414F60
.text:00414083                 cmp     eax, 0Bh
.text:00414086                 jle     loc_414474
.text:0041408C
.text:0041408C loc_41408C:                             ; CODE XREF: .text:0041407C↑j
.text:0041408C                 cld
.text:0041408D                 xor     eax, eax
.text:0041408F                 lea     ebx, [esp+60h]
.text:00414093                 mov     ecx, 7
.text:00414098                 mov     edi, ebx
.text:0041409A                 rep stosd
.text:0041409C                 mov     dword ptr [esp+18h], 0
.text:004140A4                 mov     dword ptr [esp+14h], 4000000h
.text:004140AC                 mov     dword ptr [esp+10h], 0
.text:004140B4                 mov     dword ptr [esp+0Ch], 0
.text:004140BC                 mov     dword ptr [esp+8], 0
.text:004140C4                 mov     dword ptr [esp+4], 0
.text:004140CC                 mov     dword ptr [esp], offset FileName ; "\\\\.\\vwin32"
.text:004140D3                 call    CreateFileA
.text:004140D8                 sub     esp, 1Ch
.text:004140DB                 mov     edi, eax
.text:004140DD                 cmp     eax, 0FFFFFFFFh
.text:004140E0                 jz      short loc_414160
.text:004140E2                 mov     [esp+10h], ebx
.text:004140E6                 lea     edx, [esp+80h]
.text:004140ED                 lea     ecx, [esp+24h]
.text:004140F1                 mov     [esp+70h], edx
.text:004140F5                 mov     [esp+18h], ecx
.text:004140F9                 mov     [esp+8], ebx
.text:004140FD                 mov     dword ptr [esp+6Ch], 7303h
.text:00414105                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:0041410D                 mov     [esp+64h], ebp
.text:00414111                 mov     dword ptr [esp+78h], 1
.text:00414119                 mov     dword ptr [esp+1Ch], 0
.text:00414121                 mov     dword ptr [esp+14h], 1Ch
.text:00414129                 mov     dword ptr [esp+0Ch], 1Ch
.text:00414131                 mov     dword ptr [esp+4], 6
.text:00414139                 mov     [esp], eax
.text:0041413C                 call    DeviceIoControl
.text:00414141                 sub     esp, 20h
.text:00414144                 mov     ebx, eax
.text:00414146                 mov     [esp], edi
.text:00414149                 call    CloseHandle
.text:0041414E                 sub     esp, 4
.text:00414151                 test    ebx, ebx
.text:00414153                 jz      short loc_414160
.text:00414155                 test    byte ptr [esp+78h], 1
.text:0041415A                 jz      loc_414440
.text:00414160
.text:00414160 loc_414160:                             ; CODE XREF: .text:004140E0↑j
.text:00414160                                         ; .text:00414153↑j
.text:00414160                 call    sub_412940
.text:00414165                 mov     edi, eax
.text:00414167                 call    _errno
.text:0041416C                 mov     [eax], edi
.text:0041416E                 xor     eax, eax
.text:00414170
.text:00414170 loc_414170:                             ; CODE XREF: .text:0041446F↓j
.text:00414170                                         ; .text:0041449B↓j
.text:00414170                 test    eax, eax
.text:00414172                 jnz     short loc_414194
.text:00414174                 mov     dword ptr [esp+34h], 1
.text:0041417C                 mov     dword ptr [esp+30h], 200h
.text:00414184                 mov     dword ptr [esp+2Ch], 0
.text:0041418C                 mov     dword ptr [esp+28h], 0
.text:00414194
.text:00414194 loc_414194:                             ; CODE XREF: .text:00414172↑j
.text:00414194                 mov     edx, [esp+30h]
.text:00414198                 mov     edi, [esp+34h]
.text:0041419C                 mov     ecx, [esp+20h]
.text:004141A0                 imul    edi, edx
.text:004141A3                 test    ecx, ecx
.text:004141A5                 jnz     short loc_4141CD
.text:004141A7                 mov     eax, [esp+28h]
.text:004141AB                 mul     edi
.text:004141AD                 mov     esi, eax
.text:004141AF                 mov     eax, [esp+2Ch]
.text:004141B3                 mov     [esp+44h], edx
.text:004141B7                 mov     [esp+40h], esi
.text:004141BB                 mul     edi
.text:004141BD                 mov     [esp+48h], eax
.text:004141C1                 mov     [esp+4Ch], edx
.text:004141C5                 mov     [esp+38h], eax
.text:004141C9                 mov     [esp+3Ch], edx
.text:004141CD
.text:004141CD loc_4141CD:                             ; CODE XREF: .text:004141A5↑j
.text:004141CD                 mov     ebx, [esp+5Ch]
.text:004141D1                 lea     edx, [esp+0B0h]
.text:004141D8                 mov     ecx, [esp+8D4h]
.text:004141DF                 mov     [ecx+48h], ebx
.text:004141E2                 mov     dword ptr [esp+4], offset loc_413F48
.text:004141EA                 mov     [esp], edx
.text:004141ED                 call    _stricmp
.text:004141F2                 test    eax, eax
.text:004141F4                 jnz     loc_4143B0
.text:004141FA                 mov     esi, [esp+8D4h]
.text:00414201                 mov     dword ptr [esi], 5346544Eh
.text:00414207
.text:00414207 loc_414207:                             ; CODE XREF: .text:004143D8↓j
.text:00414207                                         ; .text:00414405↓j ...
.text:00414207                 mov     ebx, [esp+30h]
.text:0041420B                 mov     esi, [esp+8D4h]
.text:00414212                 mov     [esi+4], ebx
.text:00414215                 mov     [esi+8], ebx
.text:00414218                 mov     ebx, [esi+8]
.text:0041421B                 mov     [esi+0Ch], edi
.text:0041421E                 mov     ecx, [esp+44h]
.text:00414222                 xor     esi, esi
.text:00414224                 mov     [esp+8], ebx
.text:00414228                 mov     edx, [esp+40h]
.text:0041422C                 mov     [esp+0Ch], esi
.text:00414230                 mov     [esp+4], ecx
.text:00414234                 mov     [esp], edx
.text:00414237                 call    sub_418680
.text:0041423C                 mov     ecx, [esp+8D4h]
.text:00414243                 mov     [ecx+10h], eax
.text:00414246                 mov     [ecx+14h], edx
.text:00414249                 mov     ecx, [esp+4Ch]
.text:0041424D                 mov     [esp+8], ebx
.text:00414251                 mov     edx, [esp+48h]
.text:00414255                 mov     [esp+0Ch], esi
.text:00414259                 mov     [esp+4], ecx
.text:0041425D                 mov     [esp], edx
.text:00414260                 call    sub_418680
.text:00414265                 mov     ecx, [esp+8D4h]
.text:0041426C                 mov     [ecx+18h], eax
.text:0041426F                 mov     [ecx+1Ch], edx
.text:00414272                 mov     ecx, [esp+38h]
.text:00414276                 mov     [esp+8], ebx
.text:0041427A                 mov     ebx, [esp+3Ch]
.text:0041427E                 mov     [esp+0Ch], esi
.text:00414282                 mov     [esp], ecx
.text:00414285                 mov     [esp+4], ebx
.text:00414289                 call    sub_418680
.text:0041428E                 mov     esi, [esp+8D4h]
.text:00414295                 mov     [esi+20h], eax
.text:00414298                 mov     [esi+24h], edx
.text:0041429B                 mov     ecx, [esp+44h]
.text:0041429F                 mov     esi, edi
.text:004142A1                 mov     [esp+8], esi
.text:004142A5                 mov     edx, [esp+40h]
.text:004142A9                 xor     edi, edi
.text:004142AB                 mov     [esp+0Ch], edi
.text:004142AF                 mov     [esp+4], ecx
.text:004142B3                 mov     [esp], edx
.text:004142B6                 call    sub_418680
.text:004142BB                 mov     ebx, [esp+8D4h]
.text:004142C2                 mov     [ebx+28h], eax
.text:004142C5                 mov     [ebx+2Ch], edx
.text:004142C8                 mov     ecx, [esp+4Ch]
.text:004142CC                 mov     [esp+8], esi
.text:004142D0                 mov     edx, [esp+48h]
.text:004142D4                 mov     [esp+0Ch], edi
.text:004142D8                 mov     [esp+4], ecx
.text:004142DC                 mov     [esp], edx
.text:004142DF                 call    sub_418680
.text:004142E4                 mov     ebx, [esp+8D4h]
.text:004142EB                 mov     [ebx+30h], eax
.text:004142EE                 mov     [ebx+34h], edx
.text:004142F1                 mov     ecx, [esp+3Ch]
.text:004142F5                 mov     [esp+8], esi
.text:004142F9                 mov     edx, [esp+38h]
.text:004142FD                 mov     [esp+0Ch], edi
.text:00414301                 mov     [esp+4], ecx
.text:00414305                 mov     [esp], edx
.text:00414308                 call    sub_418680
.text:0041430D                 mov     edx, [esp+8D4h]
.text:00414314                 lea     ecx, [esp+0B0h]
.text:0041431B                 mov     [edx+38h], eax
.text:0041431E                 mov     esi, [esp+58h]
.text:00414322                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:00414329                 mov     [edx+110h], esi
.text:0041432F                 mov     esi, edx
.text:00414331                 add     esi, 4Ch ; 'L'
.text:00414334                 movzx   ebx, word ptr [esp+56h]
.text:00414339                 movzx   edi, word ptr [esp+54h]
.text:0041433E                 mov     [edx+3Ch], ebx
.text:00414341                 lea     ebx, [esp+4B0h]
.text:00414348                 mov     [edx+40h], edi
.text:0041434B                 mov     [esp+4], ecx
.text:0041434F                 mov     dword ptr [esp+8], 10h
.text:00414357                 mov     [esp], esi
.text:0041435A                 call    strncpy
.text:0041435F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00414367                 mov     edi, [esp+8D4h]
.text:0041436E                 mov     [esp+4], ebx
.text:00414372                 add     edi, 5Ch ; '\'
.text:00414375                 mov     [esp], edi
.text:00414378                 call    strncpy
.text:0041437D                 mov     [esp+4], ebp
.text:00414381                 mov     ebp, [esp+8D4h]
.text:00414388                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00414390                 add     ebp, 0B6h ; '¶'
.text:00414396                 mov     [esp], ebp
.text:00414399                 call    strncpy
.text:0041439E                 xor     eax, eax
.text:004143A0
.text:004143A0 loc_4143A0:                             ; CODE XREF: .text:004144DC↓j
.text:004143A0                 add     esp, 8BCh
.text:004143A6                 pop     ebx
.text:004143A7                 pop     esi
.text:004143A8                 pop     edi
.text:004143A9                 pop     ebp
.text:004143AA                 retn
.text:004143AA ; ---------------------------------------------------------------------------
.text:004143AB                 align 10h
.text:004143B0
.text:004143B0 loc_4143B0:                             ; CODE XREF: .text:004141F4↑j
.text:004143B0                 mov     dword ptr [esp+4], 413F4Dh
.text:004143B8                 lea     eax, [esp+0B0h]
.text:004143BF                 mov     [esp], eax
.text:004143C2                 call    _stricmp
.text:004143C7                 test    eax, eax
.text:004143C9                 jnz     short loc_4143DD
.text:004143CB                 mov     edx, [esp+8D4h]
.text:004143D2                 mov     dword ptr [edx], 4008h
.text:004143D8                 jmp     loc_414207
.text:004143DD ; ---------------------------------------------------------------------------
.text:004143DD
.text:004143DD loc_4143DD:                             ; CODE XREF: .text:004143C9↑j
.text:004143DD                 mov     dword ptr [esp+4], 413F53h
.text:004143E5                 lea     ecx, [esp+0B0h]
.text:004143EC                 mov     [esp], ecx
.text:004143EF                 call    _stricmp
.text:004143F4                 test    eax, eax
.text:004143F6                 jnz     short loc_41440A
.text:004143F8                 mov     ebx, [esp+8D4h]
.text:004143FF                 mov     dword ptr [ebx], 4006h
.text:00414405                 jmp     loc_414207
.text:0041440A ; ---------------------------------------------------------------------------
.text:0041440A
.text:0041440A loc_41440A:                             ; CODE XREF: .text:004143F6↑j
.text:0041440A                 mov     dword ptr [esp+4], 413F57h
.text:00414412                 lea     eax, [esp+0B0h]
.text:00414419                 mov     [esp], eax
.text:0041441C                 call    _stricmp
.text:00414421                 test    eax, eax
.text:00414423                 mov     esi, [esp+8D4h]
.text:0041442A                 setnz   cl
.text:0041442D                 movzx   edx, cl
.text:00414430                 dec     edx
.text:00414431                 and     edx, 4000h
.text:00414437                 mov     [esi], edx
.text:00414439                 jmp     loc_414207
.text:00414439 ; ---------------------------------------------------------------------------
.text:0041443E                 align 10h
.text:00414440
.text:00414440 loc_414440:                             ; CODE XREF: .text:0041415A↑j
.text:00414440                 mov     edi, [esp+84h]
.text:00414447                 mov     eax, 1
.text:0041444C                 mov     edx, [esp+88h]
.text:00414453                 mov     ecx, [esp+8Ch]
.text:0041445A                 mov     ebx, [esp+90h]
.text:00414461                 mov     [esp+34h], edi
.text:00414465                 mov     [esp+30h], edx
.text:00414469                 mov     [esp+2Ch], ecx
.text:0041446D                 mov     [esi], ebx
.text:0041446F                 jmp     loc_414170
.text:00414474 ; ---------------------------------------------------------------------------
.text:00414474
.text:00414474 loc_414474:                             ; CODE XREF: .text:00414086↑j
.text:00414474                 mov     [esp+10h], esi
.text:00414478                 lea     eax, [esp+2Ch]
.text:0041447C                 lea     esi, [esp+30h]
.text:00414480                 mov     [esp+0Ch], eax
.text:00414484                 lea     edi, [esp+34h]
.text:00414488                 mov     [esp+8], esi
.text:0041448C                 mov     [esp+4], edi
.text:00414490
.text:00414490 loc_414490:                             ; CODE XREF: .text:004144BC↓j
.text:00414490                 mov     [esp], ebp
.text:00414493                 call    GetDiskFreeSpaceA
.text:00414498                 sub     esp, 14h
.text:0041449B                 jmp     loc_414170
.text:004144A0 ; ---------------------------------------------------------------------------
.text:004144A0
.text:004144A0 loc_4144A0:                             ; CODE XREF: .text:0041406F↑j
.text:004144A0                 mov     [esp+10h], esi
.text:004144A4                 lea     ebx, [esp+2Ch]
.text:004144A8                 lea     eax, [esp+30h]
.text:004144AC                 mov     [esp+0Ch], ebx
.text:004144B0                 lea     esi, [esp+34h]
.text:004144B4                 mov     [esp+8], eax
.text:004144B8                 mov     [esp+4], esi
.text:004144BC                 jmp     short loc_414490
.text:004144BE ; ---------------------------------------------------------------------------
.text:004144BE
.text:004144BE loc_4144BE:                             ; CODE XREF: .text:00414027↑j
.text:004144BE                 mov     [esp], edi
.text:004144C1                 call    FreeLibrary
.text:004144C6                 sub     esp, 4
.text:004144C9                 call    sub_412940
.text:004144CE                 mov     esi, eax
.text:004144D0                 call    _errno
.text:004144D5                 mov     [eax], esi
.text:004144D7
.text:004144D7 loc_4144D7:                             ; CODE XREF: .text:004144F7↓j
.text:004144D7                 mov     eax, 0FFFFFFFFh
.text:004144DC                 jmp     loc_4143A0
.text:004144E1 ; ---------------------------------------------------------------------------
.text:004144E1
.text:004144E1 loc_4144E1:                             ; CODE XREF: .text:00413FA1↑j
.text:004144E1                 mov     [esp], edi
.text:004144E4                 call    FreeLibrary
.text:004144E9                 sub     esp, 4
.text:004144EC                 call    _errno
.text:004144F1                 mov     dword ptr [eax], 2
.text:004144F7                 jmp     short loc_4144D7
.text:004144F7 ; ---------------------------------------------------------------------------
.text:004144F9                 align 10h
.text:00414500
.text:00414500 ; =============== S U B R O U T I N E =======================================
.text:00414500
.text:00414500
.text:00414500 ; int __cdecl sub_414500(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00414500 sub_414500      proc near               ; CODE XREF: sub_411380+2C7↑p
.text:00414500                                         ; .text:004119BA↑p
.text:00414500
.text:00414500 lpFileName      = dword ptr -9Ch
.text:00414500 dwDesiredAccess = dword ptr -98h
.text:00414500 dwShareMode     = dword ptr -94h
.text:00414500 lpSecurityAttributes= dword ptr -90h
.text:00414500 dwCreationDisposition= dword ptr -8Ch
.text:00414500 dwFlagsAndAttributes= dword ptr -88h
.text:00414500 hTemplateFile   = dword ptr -84h
.text:00414500 lpOverlapped    = dword ptr -80h
.text:00414500 BytesReturned   = dword ptr -70h
.text:00414500 InBuffer        = byte ptr -6Ch
.text:00414500 var_68          = dword ptr -68h
.text:00414500 var_64          = dword ptr -64h
.text:00414500 var_60          = dword ptr -60h
.text:00414500 var_5C          = dword ptr -5Ch
.text:00414500 var_54          = dword ptr -54h
.text:00414500 var_4C          = byte ptr -4Ch
.text:00414500 var_48          = dword ptr -48h
.text:00414500 var_44          = dword ptr -44h
.text:00414500 var_40          = dword ptr -40h
.text:00414500 var_3C          = dword ptr -3Ch
.text:00414500 lpRootPathName  = dword ptr -2Ch
.text:00414500 lpSectorsPerCluster= dword ptr -28h
.text:00414500 lpBytesPerSector= dword ptr -24h
.text:00414500 lpNumberOfFreeClusters= dword ptr -20h
.text:00414500 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00414500 var_18          = dword ptr -18h
.text:00414500 var_14          = dword ptr -14h
.text:00414500 var_10          = dword ptr -10h
.text:00414500 var_C           = dword ptr -0Ch
.text:00414500 var_8           = dword ptr -8
.text:00414500 var_4           = dword ptr -4
.text:00414500 arg_0           = dword ptr  4
.text:00414500 arg_4           = dword ptr  8
.text:00414500 arg_8           = dword ptr  0Ch
.text:00414500 arg_C           = dword ptr  10h
.text:00414500 arg_10          = dword ptr  14h
.text:00414500
.text:00414500                 sub     esp, 2Ch
.text:00414503                 mov     edx, [esp+2Ch+arg_0]
.text:00414507                 mov     [esp+2Ch+var_10], ebx
.text:0041450B                 mov     ebx, [esp+2Ch+arg_10]
.text:0041450F                 mov     [esp+2Ch+var_C], esi
.text:00414513                 mov     esi, [esp+2Ch+arg_C]
.text:00414517                 mov     [esp+2Ch+var_8], edi
.text:0041451B                 mov     edi, [esp+2Ch+arg_8]
.text:0041451F                 mov     [esp+2Ch+var_4], ebp
.text:00414523                 mov     ebp, [esp+2Ch+arg_4]
.text:00414527                 mov     [esp+2Ch+var_14], edx
.text:0041452B                 call    sub_415010
.text:00414530                 test    eax, eax
.text:00414532                 jz      short loc_414564
.text:00414534                 mov     [esp+2Ch+arg_10], ebx
.text:00414538                 mov     edx, [esp+2Ch+var_14]
.text:0041453C                 mov     ebx, [esp+2Ch+var_10]
.text:00414540                 mov     [esp+2Ch+arg_C], esi
.text:00414544                 mov     esi, [esp+2Ch+var_C]
.text:00414548                 mov     [esp+2Ch+arg_8], edi
.text:0041454C                 mov     edi, [esp+2Ch+var_8]
.text:00414550                 mov     [esp+2Ch+arg_4], ebp
.text:00414554                 mov     ebp, [esp+2Ch+var_4]
.text:00414558                 mov     [esp+2Ch+arg_0], edx
.text:0041455C                 add     esp, 2Ch
.text:0041455F                 jmp     loc_414610
.text:00414564 ; ---------------------------------------------------------------------------
.text:00414564
.text:00414564 loc_414564:                             ; CODE XREF: sub_414500+32↑j
.text:00414564                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00414568                 mov     ecx, [esp+2Ch+var_14]
.text:0041456C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00414570                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00414574                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00414578                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:0041457B                 call    GetDiskFreeSpaceA
.text:00414580                 sub     esp, 14h
.text:00414583                 mov     ebx, [esp+2Ch+var_10]
.text:00414587                 mov     esi, [esp+2Ch+var_C]
.text:0041458B                 mov     edi, [esp+2Ch+var_8]
.text:0041458F                 mov     ebp, [esp+2Ch+var_4]
.text:00414593                 add     esp, 2Ch
.text:00414596                 retn
.text:00414596 ; ---------------------------------------------------------------------------
.text:00414597                 align 10h
.text:004145A0
.text:004145A0 loc_4145A0:                             ; CODE XREF: .text:0041532D↓p
.text:004145A0                 sub     esp, 1Ch
.text:004145A3                 mov     [esp+1Ch+var_4], esi
.text:004145A7                 mov     esi, [esp+1Ch+arg_0]
.text:004145AB                 mov     [esp+1Ch+var_8], ebx
.text:004145AF                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:004145B2                 call    sub_413AE0
.text:004145B7                 test    eax, eax
.text:004145B9                 mov     ebx, eax
.text:004145BB                 jz      short loc_4145D0
.text:004145BD                 cmp     byte ptr [eax], 0
.text:004145C0                 jz      short loc_4145D0
.text:004145C2                 test    esi, esi
.text:004145C4                 jz      short loc_4145D0
.text:004145C6                 cmp     byte ptr [esi], 0
.text:004145C9                 jnz     short loc_4145F6
.text:004145CB                 nop
.text:004145CC                 lea     esi, [esi+0]
.text:004145D0
.text:004145D0 loc_4145D0:                             ; CODE XREF: sub_414500+BB↑j
.text:004145D0                                         ; sub_414500+C0↑j ...
.text:004145D0                 call    _errno
.text:004145D5                 mov     dword ptr [eax], 2
.text:004145DB                 mov     esi, 0FFFFFFFFh
.text:004145E0
.text:004145E0 loc_4145E0:                             ; CODE XREF: sub_414500+108↓j
.text:004145E0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:004145E3                 call    free
.text:004145E8                 mov     eax, esi
.text:004145EA                 mov     ebx, [esp+1Ch+var_8]
.text:004145EE                 mov     esi, [esp+1Ch+var_4]
.text:004145F2                 add     esp, 1Ch
.text:004145F5                 retn
.text:004145F6 ; ---------------------------------------------------------------------------
.text:004145F6
.text:004145F6 loc_4145F6:                             ; CODE XREF: sub_414500+C9↑j
.text:004145F6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:004145F9                 mov     edx, [esp+1Ch+arg_4]
.text:004145FD                 mov     [esp+1Ch+var_18], edx
.text:00414601                 call    near ptr loc_413F5B+5
.text:00414606                 mov     esi, eax
.text:00414608                 jmp     short loc_4145E0
.text:00414608 ; ---------------------------------------------------------------------------
.text:0041460A                 align 10h
.text:00414610
.text:00414610 loc_414610:                             ; CODE XREF: sub_414500+5F↑j
.text:00414610                 push    ebp
.text:00414611                 push    edi
.text:00414612                 push    esi
.text:00414613                 push    ebx
.text:00414614                 sub     esp, 8Ch
.text:0041461A                 mov     ebp, [esp+9Ch+arg_0]
.text:00414621                 call    sub_415010
.text:00414626                 test    eax, eax
.text:00414628                 jz      short loc_414638
.text:0041462A                 call    sub_414F60
.text:0041462F                 cmp     eax, 0Bh
.text:00414632                 jle     loc_414760
.text:00414638
.text:00414638 loc_414638:                             ; CODE XREF: sub_414500+128↑j
.text:00414638                 cld
.text:00414639                 xor     eax, eax
.text:0041463B                 lea     ebx, [esp+9Ch+InBuffer]
.text:0041463F                 mov     ecx, 7
.text:00414644                 mov     edi, ebx
.text:00414646                 lea     esi, [esp+9Ch+var_4C]
.text:0041464A                 rep stosd
.text:0041464C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00414654                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:0041465C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00414664                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0041466C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00414674                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:0041467C                 mov     [esp+9Ch+lpFileName], offset FileName ; "\\\\.\\vwin32"
.text:00414683                 call    CreateFileA
.text:00414688                 sub     esp, 1Ch
.text:0041468B                 mov     edi, eax
.text:0041468D                 cmp     eax, 0FFFFFFFFh
.text:00414690                 jz      short loc_414705
.text:00414692                 mov     [esp+9Ch+var_68], ebp
.text:00414696                 lea     ebp, [esp+9Ch+BytesReturned]
.text:0041469A                 mov     [esp+9Ch+var_5C], esi
.text:0041469E                 mov     [esp+9Ch+var_60], 7303h
.text:004146A6                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:004146AE                 mov     [esp+9Ch+var_54], 1
.text:004146B6                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:004146BE                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:004146C2                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:004146CA                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:004146CE                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:004146D6                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:004146DA                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:004146E2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:004146E5                 call    DeviceIoControl
.text:004146EA                 sub     esp, 20h
.text:004146ED                 mov     esi, eax
.text:004146EF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:004146F2                 call    CloseHandle
.text:004146F7                 sub     esp, 4
.text:004146FA                 test    esi, esi
.text:004146FC                 jz      short loc_414705
.text:004146FE                 test    byte ptr [esp+9Ch+var_54], 1
.text:00414703                 jz      short loc_414720
.text:00414705
.text:00414705 loc_414705:                             ; CODE XREF: sub_414500+190↑j
.text:00414705                                         ; sub_414500+1FC↑j
.text:00414705                 call    sub_412940
.text:0041470A                 mov     edi, eax
.text:0041470C                 call    _errno
.text:00414711                 mov     [eax], edi
.text:00414713                 xor     eax, eax
.text:00414715
.text:00414715 loc_414715:                             ; CODE XREF: sub_414500+25A↓j
.text:00414715                                         ; sub_414500+297↓j
.text:00414715                 add     esp, 8Ch
.text:0041471B                 pop     ebx
.text:0041471C                 pop     esi
.text:0041471D                 pop     edi
.text:0041471E                 pop     ebp
.text:0041471F                 retn
.text:00414720 ; ---------------------------------------------------------------------------
.text:00414720
.text:00414720 loc_414720:                             ; CODE XREF: sub_414500+203↑j
.text:00414720                 mov     edx, [esp+9Ch+var_48]
.text:00414724                 mov     eax, 1
.text:00414729                 mov     ebx, [esp+9Ch+arg_4]
.text:00414730                 mov     ebp, [esp+9Ch+arg_8]
.text:00414737                 mov     ecx, [esp+9Ch+arg_C]
.text:0041473E                 mov     [ebx], edx
.text:00414740                 mov     edi, [esp+9Ch+var_44]
.text:00414744                 mov     ebx, [esp+9Ch+arg_10]
.text:0041474B                 mov     [ebp+0], edi
.text:0041474E                 mov     esi, [esp+9Ch+var_40]
.text:00414752                 mov     [ecx], esi
.text:00414754                 mov     edx, [esp+9Ch+var_3C]
.text:00414758                 mov     [ebx], edx
.text:0041475A                 jmp     short loc_414715
.text:0041475A ; ---------------------------------------------------------------------------
.text:0041475C                 align 10h
.text:00414760
.text:00414760 loc_414760:                             ; CODE XREF: sub_414500+132↑j
.text:00414760                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00414763                 mov     eax, [esp+9Ch+arg_C]
.text:0041476A                 mov     ecx, [esp+9Ch+arg_10]
.text:00414771                 mov     edx, [esp+9Ch+arg_8]
.text:00414778                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:0041477C                 mov     eax, [esp+9Ch+arg_4]
.text:00414783                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00414787                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:0041478B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:0041478F                 call    GetDiskFreeSpaceA
.text:00414794                 sub     esp, 14h
.text:00414797                 jmp     loc_414715
.text:00414797 sub_414500      endp ; sp-analysis failed
.text:00414797
.text:00414797 ; ---------------------------------------------------------------------------
.text:0041479C                 align 10h
.text:004147A0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:004149BF↓o
.text:004147AC aLu             db '%lu',0              ; DATA XREF: .text:004149CF↓o
.text:004147B0 asc_4147B0      db ' ',0                ; DATA XREF: .text:loc_414AB8↓o
.text:004147B2                 align 10h
.text:004147C0 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:004147C0                                         ; DATA XREF: .text:00414AEF↓o
.text:004147E0 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_414AFD↓o
.text:004147EC aServer         db ' Server',0          ; DATA XREF: .text:00414B26↓o
.text:004147EC                                         ; .text:loc_414C9E↓o
.text:004147F4 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_414B38↓o
.text:00414805 aDatacenterServ db ' Datacenter Server',0
.text:00414805                                         ; DATA XREF: .text:loc_414B42↓o
.text:00414818 aStandardEditio db ' Standard Edition',0
.text:00414818                                         ; DATA XREF: .text:00414B6A↓o
.text:0041482A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_414B74↓o
.text:00414837 aEnterpriseEdit db ' Enterprise Edition',0
.text:00414837                                         ; DATA XREF: .text:loc_414B7E↓o
.text:0041484B aDatacenterEdit db ' Datacenter Edition',0
.text:0041484B                                         ; DATA XREF: .text:loc_414B88↓o
.text:0041485F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:00414B9B↓o
.text:0041486D aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_414BA5↓o
.text:0041486D                                         ; .text:loc_414CB0↓o
.text:0041487B                 align 10h
.text:00414880 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:00414880                                         ; DATA XREF: .text:00414BD2↓o
.text:004148B0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00414C19↓o
.text:004148BC aWinnt          db 'WINNT',0            ; DATA XREF: .text:00414C54↓o
.text:004148C2 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:00414C6B↓o
.text:004148CB aServernt       db 'SERVERNT',0         ; DATA XREF: .text:00414C82↓o
.text:004148D4                 align 10h
.text:004148E0 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:004148E0                                         ; DATA XREF: .text:00414DF7↓o
.text:00414903                 align 20h
.text:00414920 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00414920                                         ; DATA XREF: .text:00414E56↓o
.text:00414946 ; ---------------------------------------------------------------------------
.text:00414946
.text:00414946 loc_414946:                             ; DATA XREF: .text:loc_414EC1↓o
.text:00414946                 and     [ebx+45h], dl
.text:00414949                 add     [eax], ah
.text:0041494B                 push    ebx
.text:0041494C                 push    eax
.text:0041494D                 xor     [eax], eax
.text:0041494F
.text:0041494F loc_41494F:                             ; DATA XREF: .text:loc_414F3B↓o
.text:0041494F                 and     [edi+53h], cl
.text:00414952                 push    edx
.text:00414953                 xor     al, [eax]
.text:00414955                 lea     esi, [esi+0]
.text:00414959                 lea     edi, [edi+0]
.text:00414960                 push    edi
.text:00414961                 push    esi
.text:00414962                 push    ebx
.text:00414963                 sub     esp, 130h
.text:00414969                 mov     ebx, [esp+140h]
.text:00414970                 call    sub_415070
.text:00414975                 mov     eax, ds:VersionInformation.dwPlatformId
.text:0041497A                 cmp     eax, 1
.text:0041497D                 jz      loc_414E20
.text:00414983                 cmp     eax, 1
.text:00414986                 jb      loc_414DF6
.text:0041498C                 cmp     eax, 2
.text:0041498F                 jz      loc_414A40
.text:00414995                 cmp     eax, 3
.text:00414998                 jz      short loc_4149FF
.text:0041499A                 lea     esi, [esi+0]
.text:004149A0
.text:004149A0 loc_4149A0:                             ; CODE XREF: .text:00414A35↓j
.text:004149A0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004149A6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004149AC
.text:004149AC loc_4149AC:                             ; CODE XREF: .text:00414E3F↓j
.text:004149AC                 mov     [esp+10h], edx
.text:004149B0                 mov     ebx, [esp+144h]
.text:004149B7                 mov     [esp+0Ch], ecx
.text:004149BB                 mov     [esp+8], eax
.text:004149BF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:004149C7                 mov     [esp], ebx
.text:004149CA                 call    sprintf
.text:004149CF                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:004149D7                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:004149DD                 mov     ecx, [esp+148h]
.text:004149E4                 mov     [esp+8], edi
.text:004149E8                 mov     [esp], ecx
.text:004149EB                 call    sprintf
.text:004149F0                 mov     eax, 1
.text:004149F5
.text:004149F5 loc_4149F5:                             ; CODE XREF: .text:00414BEF↓j
.text:004149F5                                         ; .text:00414C3C↓j
.text:004149F5                 add     esp, 130h
.text:004149FB                 pop     ebx
.text:004149FC                 pop     esi
.text:004149FD                 pop     edi
.text:004149FE                 retn
.text:004149FF ; ---------------------------------------------------------------------------
.text:004149FF
.text:004149FF loc_4149FF:                             ; CODE XREF: .text:00414998↑j
.text:004149FF                 mov     dword ptr [ebx], 7263694Dh
.text:00414A05                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414A0C                 mov     dword ptr [ebx+8], 69572074h
.text:00414A13                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414A1A                 mov     dword ptr [ebx+10h], 45432073h
.text:00414A21                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00414A27                 mov     esi, esi
.text:00414A29                 lea     edi, [edi+0]
.text:00414A30
.text:00414A30 loc_414A30:                             ; CODE XREF: .text:00414AD8↓j
.text:00414A30                                         ; .text:00414E19↓j ...
.text:00414A30                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00414A35                 jmp     loc_4149A0
.text:00414A35 ; ---------------------------------------------------------------------------
.text:00414A3A                 align 10h
.text:00414A40
.text:00414A40 loc_414A40:                             ; CODE XREF: .text:0041498F↑j
.text:00414A40                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00414A46                 cmp     edx, 3
.text:00414A49                 mov     eax, edx
.text:00414A4B                 jz      loc_414DB5
.text:00414A51
.text:00414A51 loc_414A51:                             ; CODE XREF: .text:00414DBC↓j
.text:00414A51                 cmp     eax, 4
.text:00414A54                 jz      loc_414D75
.text:00414A5A
.text:00414A5A loc_414A5A:                             ; CODE XREF: .text:00414D7D↓j
.text:00414A5A                 cmp     eax, 4
.text:00414A5D                 ja      loc_414CC2
.text:00414A63                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00414A69                 test    ecx, ecx
.text:00414A6B                 jnz     loc_414CC2
.text:00414A71                 mov     dword ptr [ebx], 7263694Dh
.text:00414A77                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414A7E                 mov     dword ptr [ebx+8], 69572074h
.text:00414A85                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414A8C                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414A93
.text:00414A93 loc_414A93:                             ; CODE XREF: .text:00414D35↓j
.text:00414A93                 mov     byte ptr [ebx+14h], 0
.text:00414A97
.text:00414A97 loc_414A97:                             ; CODE XREF: .text:00414CC5↓j
.text:00414A97                                         ; .text:00414CDC↓j ...
.text:00414A97                 mov     esi, dword_41A090
.text:00414A9D                 test    esi, esi
.text:00414A9F                 jz      loc_414BB2
.text:00414AA5                 movzx   eax, ds:byte_41B87A
.text:00414AAC                 cmp     al, 1
.text:00414AAE                 jz      loc_414B92
.text:00414AB4                 cmp     al, 3
.text:00414AB6                 jz      short loc_414ADD
.text:00414AB8
.text:00414AB8 loc_414AB8:                             ; CODE XREF: .text:00414AFB↓j
.text:00414AB8                                         ; .text:00414B36↓j ...
.text:00414AB8                 mov     dword ptr [esp+4], offset asc_4147B0 ; " "
.text:00414AC0                 mov     [esp], ebx
.text:00414AC3                 call    strcat
.text:00414AC8                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00414AD0                 mov     [esp], ebx
.text:00414AD3                 call    strcat
.text:00414AD8                 jmp     loc_414A30
.text:00414ADD ; ---------------------------------------------------------------------------
.text:00414ADD
.text:00414ADD loc_414ADD:                             ; CODE XREF: .text:00414AB6↑j
.text:00414ADD                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00414AE4                 jz      short loc_414B06
.text:00414AE6
.text:00414AE6 loc_414AE6:                             ; CODE XREF: .text:00414B12↓j
.text:00414AE6                 test    byte ptr ds:word_41B878, 2
.text:00414AED                 jz      short loc_414AFD
.text:00414AEF                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00414AF6
.text:00414AF6 loc_414AF6:                             ; CODE XREF: .text:00414B04↓j
.text:00414AF6                 call    printf
.text:00414AFB                 jmp     short loc_414AB8
.text:00414AFD ; ---------------------------------------------------------------------------
.text:00414AFD
.text:00414AFD loc_414AFD:                             ; CODE XREF: .text:00414AED↑j
.text:00414AFD                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00414B04                 jmp     short loc_414AF6
.text:00414B06 ; ---------------------------------------------------------------------------
.text:00414B06
.text:00414B06 loc_414B06:                             ; CODE XREF: .text:00414AE4↑j
.text:00414B06                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414B0B                 cmp     eax, 2
.text:00414B0E                 jz      short loc_414B50
.text:00414B10                 test    eax, eax
.text:00414B12                 jnz     short loc_414AE6
.text:00414B14                 cmp     byte ptr ds:word_41B878, 0
.text:00414B1B                 js      short loc_414B42
.text:00414B1D                 test    byte ptr ds:word_41B878, 2
.text:00414B24                 jnz     short loc_414B38
.text:00414B26                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00414B2E
.text:00414B2E loc_414B2E:                             ; CODE XREF: .text:00414B40↓j
.text:00414B2E                                         ; .text:00414B4A↓j ...
.text:00414B2E                 mov     [esp], ebx
.text:00414B31                 call    strcat
.text:00414B36                 jmp     short loc_414AB8
.text:00414B38 ; ---------------------------------------------------------------------------
.text:00414B38
.text:00414B38 loc_414B38:                             ; CODE XREF: .text:00414B24↑j
.text:00414B38                                         ; .text:00414C99↓j
.text:00414B38                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00414B40                 jmp     short loc_414B2E
.text:00414B42 ; ---------------------------------------------------------------------------
.text:00414B42
.text:00414B42 loc_414B42:                             ; CODE XREF: .text:00414B1B↑j
.text:00414B42                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:00414B4A                 jmp     short loc_414B2E
.text:00414B4A ; ---------------------------------------------------------------------------
.text:00414B4C                 align 10h
.text:00414B50
.text:00414B50 loc_414B50:                             ; CODE XREF: .text:00414B0E↑j
.text:00414B50                 cmp     byte ptr ds:word_41B878, 0
.text:00414B57                 js      short loc_414B88
.text:00414B59                 movzx   eax, ds:word_41B878
.text:00414B60                 test    al, 2
.text:00414B62                 jnz     short loc_414B7E
.text:00414B64                 cmp     ax, 400h
.text:00414B68                 jz      short loc_414B74
.text:00414B6A                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:00414B72                 jmp     short loc_414B2E
.text:00414B74 ; ---------------------------------------------------------------------------
.text:00414B74
.text:00414B74 loc_414B74:                             ; CODE XREF: .text:00414B68↑j
.text:00414B74                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:00414B7C                 jmp     short loc_414B2E
.text:00414B7E ; ---------------------------------------------------------------------------
.text:00414B7E
.text:00414B7E loc_414B7E:                             ; CODE XREF: .text:00414B62↑j
.text:00414B7E                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:00414B86                 jmp     short loc_414B2E
.text:00414B88 ; ---------------------------------------------------------------------------
.text:00414B88
.text:00414B88 loc_414B88:                             ; CODE XREF: .text:00414B57↑j
.text:00414B88                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:00414B90                 jmp     short loc_414B2E
.text:00414B92 ; ---------------------------------------------------------------------------
.text:00414B92
.text:00414B92 loc_414B92:                             ; CODE XREF: .text:00414AAE↑j
.text:00414B92                 test    byte ptr ds:word_41B878+1, 2
.text:00414B99                 jz      short loc_414BA5
.text:00414B9B                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:00414BA3                 jmp     short loc_414B2E
.text:00414BA5 ; ---------------------------------------------------------------------------
.text:00414BA5
.text:00414BA5 loc_414BA5:                             ; CODE XREF: .text:00414B99↑j
.text:00414BA5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00414BAD                 jmp     loc_414B2E
.text:00414BB2 ; ---------------------------------------------------------------------------
.text:00414BB2
.text:00414BB2 loc_414BB2:                             ; CODE XREF: .text:00414A9F↑j
.text:00414BB2                 mov     dword ptr [esp+28h], 0FFh
.text:00414BBA                 lea     edx, [esp+2Ch]
.text:00414BBE                 mov     [esp+10h], edx
.text:00414BC2                 mov     dword ptr [esp+0Ch], 1
.text:00414BCA                 mov     dword ptr [esp+8], 0
.text:00414BD2                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:00414BDA                 mov     dword ptr [esp], 80000002h
.text:00414BE1                 call    RegOpenKeyExA
.text:00414BE6                 mov     edi, eax
.text:00414BE8                 sub     esp, 14h
.text:00414BEB                 xor     eax, eax
.text:00414BED                 test    edi, edi
.text:00414BEF                 jnz     loc_4149F5
.text:00414BF5                 mov     dword ptr [esp+0Ch], 0
.text:00414BFD                 mov     edi, [esp+2Ch]
.text:00414C01                 lea     esi, [esp+28h]
.text:00414C05                 mov     [esp+14h], esi
.text:00414C09                 lea     esi, [esp+30h]
.text:00414C0D                 mov     [esp+10h], esi
.text:00414C11                 mov     dword ptr [esp+8], 0
.text:00414C19                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00414C21                 mov     [esp], edi
.text:00414C24                 call    RegQueryValueExA
.text:00414C29                 sub     esp, 18h
.text:00414C2C                 test    eax, eax
.text:00414C2E                 jnz     short loc_414C3A
.text:00414C30                 cmp     dword ptr [esp+28h], 0FFh
.text:00414C38                 jbe     short loc_414C41
.text:00414C3A
.text:00414C3A loc_414C3A:                             ; CODE XREF: .text:00414C2E↑j
.text:00414C3A                 xor     eax, eax
.text:00414C3C                 jmp     loc_4149F5
.text:00414C41 ; ---------------------------------------------------------------------------
.text:00414C41
.text:00414C41 loc_414C41:                             ; CODE XREF: .text:00414C38↑j
.text:00414C41                 mov     edx, [esp+2Ch]
.text:00414C45                 mov     [esp], edx
.text:00414C48                 call    RegCloseKey
.text:00414C4D                 sub     esp, 4
.text:00414C50                 mov     [esp+4], esi
.text:00414C54                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:00414C5B                 call    lstrcmpiA
.text:00414C60                 sub     esp, 8
.text:00414C63                 test    eax, eax
.text:00414C65                 jz      short loc_414CB0
.text:00414C67
.text:00414C67 loc_414C67:                             ; CODE XREF: .text:00414CC0↓j
.text:00414C67                 mov     [esp+4], esi
.text:00414C6B                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:00414C72                 call    lstrcmpiA
.text:00414C77                 sub     esp, 8
.text:00414C7A                 test    eax, eax
.text:00414C7C                 jz      short loc_414C9E
.text:00414C7E
.text:00414C7E loc_414C7E:                             ; CODE XREF: .text:00414CAE↓j
.text:00414C7E                 mov     [esp+4], esi
.text:00414C82                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:00414C89                 call    lstrcmpiA
.text:00414C8E                 sub     esp, 8
.text:00414C91                 test    eax, eax
.text:00414C93                 jnz     loc_414AB8
.text:00414C99                 jmp     loc_414B38
.text:00414C9E ; ---------------------------------------------------------------------------
.text:00414C9E
.text:00414C9E loc_414C9E:                             ; CODE XREF: .text:00414C7C↑j
.text:00414C9E                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:00414CA6                 mov     [esp], ebx
.text:00414CA9                 call    strcat
.text:00414CAE                 jmp     short loc_414C7E
.text:00414CB0 ; ---------------------------------------------------------------------------
.text:00414CB0
.text:00414CB0 loc_414CB0:                             ; CODE XREF: .text:00414C65↑j
.text:00414CB0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:00414CB8                 mov     [esp], ebx
.text:00414CBB                 call    strcat
.text:00414CC0                 jmp     short loc_414C67
.text:00414CC2 ; ---------------------------------------------------------------------------
.text:00414CC2
.text:00414CC2 loc_414CC2:                             ; CODE XREF: .text:00414A5D↑j
.text:00414CC2                                         ; .text:00414A6B↑j
.text:00414CC2                 cmp     eax, 5
.text:00414CC5                 jnz     loc_414A97
.text:00414CCB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414CD0                 cmp     eax, 2
.text:00414CD3                 jz      short loc_414D3A
.text:00414CD5                 cmp     eax, 1
.text:00414CD8                 jz      short loc_414D13
.text:00414CDA                 test    eax, eax
.text:00414CDC                 jnz     loc_414A97
.text:00414CE2                 mov     dword ptr [ebx], 7263694Dh
.text:00414CE8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414CEF                 mov     dword ptr [ebx+8], 69572074h
.text:00414CF6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414CFD                 mov     dword ptr [ebx+10h], 30322073h
.text:00414D04                 mov     word ptr [ebx+14h], 3030h
.text:00414D0A                 mov     byte ptr [ebx+16h], 0
.text:00414D0E                 jmp     loc_414A97
.text:00414D13 ; ---------------------------------------------------------------------------
.text:00414D13
.text:00414D13 loc_414D13:                             ; CODE XREF: .text:00414CD8↑j
.text:00414D13                 mov     dword ptr [ebx], 7263694Dh
.text:00414D19                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414D20                 mov     dword ptr [ebx+8], 69572074h
.text:00414D27                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414D2E                 mov     dword ptr [ebx+10h], 50582073h
.text:00414D35                 jmp     loc_414A93
.text:00414D3A ; ---------------------------------------------------------------------------
.text:00414D3A
.text:00414D3A loc_414D3A:                             ; CODE XREF: .text:00414CD3↑j
.text:00414D3A                 mov     dword ptr [ebx], 7263694Dh
.text:00414D40                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414D47                 mov     dword ptr [ebx+8], 69572074h
.text:00414D4E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414D55                 mov     dword ptr [ebx+10h], 65532073h
.text:00414D5C                 mov     dword ptr [ebx+14h], 72657672h
.text:00414D63                 mov     dword ptr [ebx+18h], 30303220h
.text:00414D6A                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:00414D70                 jmp     loc_414A97
.text:00414D75 ; ---------------------------------------------------------------------------
.text:00414D75
.text:00414D75 loc_414D75:                             ; CODE XREF: .text:00414A54↑j
.text:00414D75                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414D7B                 test    edx, edx
.text:00414D7D                 jnz     loc_414A5A
.text:00414D83                 mov     dword ptr [ebx], 7263694Dh
.text:00414D89                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414D90                 mov     dword ptr [ebx+8], 69572074h
.text:00414D97                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414D9E                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414DA5                 mov     dword ptr [ebx+14h], 302E3420h
.text:00414DAC                 mov     byte ptr [ebx+18h], 0
.text:00414DB0                 jmp     loc_414A97
.text:00414DB5 ; ---------------------------------------------------------------------------
.text:00414DB5
.text:00414DB5 loc_414DB5:                             ; CODE XREF: .text:00414A4B↑j
.text:00414DB5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:00414DBC                 jnz     loc_414A51
.text:00414DC2                 mov     dword ptr [ebx], 7263694Dh
.text:00414DC8                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414DCF                 mov     dword ptr [ebx+8], 69572074h
.text:00414DD6                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414DDD                 mov     dword ptr [ebx+10h], 544E2073h
.text:00414DE4                 mov     dword ptr [ebx+14h], 352E3320h
.text:00414DEB                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00414DF1                 jmp     loc_414A97
.text:00414DF6 ; ---------------------------------------------------------------------------
.text:00414DF6
.text:00414DF6 loc_414DF6:                             ; CODE XREF: .text:00414986↑j
.text:00414DF6                 cld
.text:00414DF7                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00414DFC                 mov     ecx, 8
.text:00414E01                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00414E08                 mov     edi, ebx
.text:00414E0A                 rep movsd
.text:00414E0C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00414E13                 mov     [edi+2], dl
.text:00414E16                 mov     [edi], si
.text:00414E19                 jmp     loc_414A30
.text:00414E19 ; ---------------------------------------------------------------------------
.text:00414E1E                 align 10h
.text:00414E20
.text:00414E20 loc_414E20:                             ; CODE XREF: .text:0041497D↑j
.text:00414E20                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414E26                 cmp     ecx, 4
.text:00414E29                 jz      loc_414EE0
.text:00414E2F
.text:00414E2F loc_414E2F:                             ; CODE XREF: .text:00414F36↓j
.text:00414E2F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414E35
.text:00414E35 loc_414E35:                             ; CODE XREF: .text:00414EE8↓j
.text:00414E35                 cmp     ecx, 4
.text:00414E38                 jz      short loc_414E44
.text:00414E3A
.text:00414E3A loc_414E3A:                             ; CODE XREF: .text:00414E4C↓j
.text:00414E3A                                         ; .text:00414E51↓j
.text:00414E3A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00414E3F                 jmp     loc_4149AC
.text:00414E44 ; ---------------------------------------------------------------------------
.text:00414E44
.text:00414E44 loc_414E44:                             ; CODE XREF: .text:00414E38↑j
.text:00414E44                 cmp     edx, 0Ah
.text:00414E47                 jz      short loc_414E71
.text:00414E49
.text:00414E49 loc_414E49:                             ; CODE XREF: .text:00414EBF↓j
.text:00414E49                 cmp     ecx, 4
.text:00414E4C                 jnz     short loc_414E3A
.text:00414E4E                 cmp     edx, 5Ah ; 'Z'
.text:00414E51                 jnz     short loc_414E3A
.text:00414E53                 cld
.text:00414E54                 mov     edi, ebx
.text:00414E56                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00414E5B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00414E62                 mov     ecx, 9
.text:00414E67                 rep movsd
.text:00414E69                 mov     [edi], bx
.text:00414E6C                 jmp     loc_414A30
.text:00414E71 ; ---------------------------------------------------------------------------
.text:00414E71
.text:00414E71 loc_414E71:                             ; CODE XREF: .text:00414E47↑j
.text:00414E71                 mov     dword ptr [ebx], 7263694Dh
.text:00414E77                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414E7E                 mov     dword ptr [ebx+8], 69572074h
.text:00414E85                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414E8C                 mov     dword ptr [ebx+10h], 38392073h
.text:00414E93                 mov     byte ptr [ebx+14h], 0
.text:00414E97                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00414E9D                 lea     edi, [edx-7CFh]
.text:00414EA3                 cmp     edi, 0B7h ; '·'
.text:00414EA9                 jbe     short loc_414ED3
.text:00414EAB                 cmp     edx, 886h
.text:00414EB1                 ja      short loc_414EC1
.text:00414EB3
.text:00414EB3 loc_414EB3:                             ; CODE XREF: .text:00414ED1↓j
.text:00414EB3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414EB9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414EBF                 jmp     short loc_414E49
.text:00414EC1 ; ---------------------------------------------------------------------------
.text:00414EC1
.text:00414EC1 loc_414EC1:                             ; CODE XREF: .text:00414EB1↑j
.text:00414EC1                 mov     dword ptr [esp+4], offset loc_414946
.text:00414EC9
.text:00414EC9 loc_414EC9:                             ; CODE XREF: .text:00414EDB↓j
.text:00414EC9                 mov     [esp], ebx
.text:00414ECC                 call    strcat
.text:00414ED1                 jmp     short loc_414EB3
.text:00414ED3 ; ---------------------------------------------------------------------------
.text:00414ED3
.text:00414ED3 loc_414ED3:                             ; CODE XREF: .text:00414EA9↑j
.text:00414ED3                 mov     dword ptr [esp+4], 41494Ah
.text:00414EDB                 jmp     short loc_414EC9
.text:00414EDB ; ---------------------------------------------------------------------------
.text:00414EDD                 align 10h
.text:00414EE0
.text:00414EE0 loc_414EE0:                             ; CODE XREF: .text:00414E29↑j
.text:00414EE0                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00414EE6                 test    edx, edx
.text:00414EE8                 jnz     loc_414E35
.text:00414EEE                 mov     dword ptr [ebx], 7263694Dh
.text:00414EF4                 mov     dword ptr [ebx+4], 666F736Fh
.text:00414EFB                 mov     dword ptr [ebx+8], 69572074h
.text:00414F02                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00414F09                 mov     dword ptr [ebx+10h], 35392073h
.text:00414F10                 mov     byte ptr [ebx+14h], 0
.text:00414F14                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00414F1A                 lea     ecx, [edx-3B7h]
.text:00414F20                 cmp     ecx, 81h
.text:00414F26                 jbe     short loc_414F4D
.text:00414F28                 cmp     edx, 438h
.text:00414F2E                 ja      short loc_414F3B
.text:00414F30
.text:00414F30 loc_414F30:                             ; CODE XREF: .text:00414F4B↓j
.text:00414F30                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00414F36                 jmp     loc_414E2F
.text:00414F3B ; ---------------------------------------------------------------------------
.text:00414F3B
.text:00414F3B loc_414F3B:                             ; CODE XREF: .text:00414F2E↑j
.text:00414F3B                 mov     dword ptr [esp+4], offset loc_41494F
.text:00414F43
.text:00414F43 loc_414F43:                             ; CODE XREF: .text:00414F55↓j
.text:00414F43                 mov     [esp], ebx
.text:00414F46                 call    strcat
.text:00414F4B                 jmp     short loc_414F30
.text:00414F4D ; ---------------------------------------------------------------------------
.text:00414F4D
.text:00414F4D loc_414F4D:                             ; CODE XREF: .text:00414F26↑j
.text:00414F4D                 mov     dword ptr [esp+4], 41494Ah
.text:00414F55                 jmp     short loc_414F43
.text:00414F55 ; ---------------------------------------------------------------------------
.text:00414F57                 align 10h
.text:00414F60
.text:00414F60 ; =============== S U B R O U T I N E =======================================
.text:00414F60
.text:00414F60
.text:00414F60 sub_414F60      proc near               ; CODE XREF: .text:0041407E↑p
.text:00414F60                                         ; sub_414500+12A↑p
.text:00414F60                 sub     esp, 0Ch
.text:00414F63                 call    sub_415070
.text:00414F68                 mov     eax, ds:dword_41B7D0
.text:00414F6D                 add     esp, 0Ch
.text:00414F70                 retn
.text:00414F70 sub_414F60      endp
.text:00414F70
.text:00414F71 ; ---------------------------------------------------------------------------
.text:00414F71                 jmp     short loc_414F80
.text:00414F71 ; ---------------------------------------------------------------------------
.text:00414F73                 align 10h
.text:00414F80
.text:00414F80 loc_414F80:                             ; CODE XREF: .text:00414F71↑j
.text:00414F80                 sub     esp, 0Ch
.text:00414F83                 call    sub_415070
.text:00414F88                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00414F8D                 add     esp, 0Ch
.text:00414F90                 retn
.text:00414F91 ; ---------------------------------------------------------------------------
.text:00414F91                 jmp     short loc_414FA0
.text:00414F91 ; ---------------------------------------------------------------------------
.text:00414F93                 align 10h
.text:00414FA0
.text:00414FA0 loc_414FA0:                             ; CODE XREF: .text:00414F91↑j
.text:00414FA0                 sub     esp, 0Ch
.text:00414FA3                 call    sub_415070
.text:00414FA8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00414FAD                 add     esp, 0Ch
.text:00414FB0                 retn
.text:00414FB1 ; ---------------------------------------------------------------------------
.text:00414FB1                 jmp     short loc_414FC0
.text:00414FB1 ; ---------------------------------------------------------------------------
.text:00414FB3                 align 10h
.text:00414FC0
.text:00414FC0 loc_414FC0:                             ; CODE XREF: .text:00414FB1↑j
.text:00414FC0                 sub     esp, 0Ch
.text:00414FC3                 call    sub_415070
.text:00414FC8                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00414FCD                 add     esp, 0Ch
.text:00414FD0                 retn
.text:00414FD1 ; ---------------------------------------------------------------------------
.text:00414FD1                 jmp     short loc_414FE0
.text:00414FD1 ; ---------------------------------------------------------------------------
.text:00414FD3                 align 10h
.text:00414FE0
.text:00414FE0 loc_414FE0:                             ; CODE XREF: .text:00414FD1↑j
.text:00414FE0                 sub     esp, 0Ch
.text:00414FE3                 call    GetVersion
.text:00414FE8                 shr     eax, 10h
.text:00414FEB                 add     esp, 0Ch
.text:00414FEE                 retn
.text:00414FEE ; ---------------------------------------------------------------------------
.text:00414FEF                 align 10h
.text:00414FF0                 sub     esp, 0Ch
.text:00414FF3                 call    sub_415070
.text:00414FF8                 xor     eax, eax
.text:00414FFA                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00415001                 setz    al
.text:00415004                 add     esp, 0Ch
.text:00415007                 retn
.text:00415007 ; ---------------------------------------------------------------------------
.text:00415008                 align 10h
.text:00415010
.text:00415010 ; =============== S U B R O U T I N E =======================================
.text:00415010
.text:00415010
.text:00415010 sub_415010      proc near               ; CODE XREF: .text:loc_413110↑p
.text:00415010                                         ; .text:loc_414064↑p ...
.text:00415010                 sub     esp, 0Ch
.text:00415013                 call    sub_415070
.text:00415018                 xor     eax, eax
.text:0041501A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00415021                 setz    al
.text:00415024                 add     esp, 0Ch
.text:00415027                 retn
.text:00415027 sub_415010      endp
.text:00415027
.text:00415027 ; ---------------------------------------------------------------------------
.text:00415028                 align 10h
.text:00415030                 sub     esp, 0Ch
.text:00415033                 call    sub_415070
.text:00415038                 xor     eax, eax
.text:0041503A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00415041                 setz    al
.text:00415044                 add     esp, 0Ch
.text:00415047                 retn
.text:00415047 ; ---------------------------------------------------------------------------
.text:00415048                 align 10h
.text:00415050                 sub     esp, 0Ch
.text:00415053                 call    sub_415070
.text:00415058                 xor     eax, eax
.text:0041505A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00415061                 setz    al
.text:00415064                 add     esp, 0Ch
.text:00415067                 retn
.text:00415067 ; ---------------------------------------------------------------------------
.text:00415068                 align 10h
.text:00415070
.text:00415070 ; =============== S U B R O U T I N E =======================================
.text:00415070
.text:00415070
.text:00415070 sub_415070      proc near               ; CODE XREF: .text:00414970↑p
.text:00415070                                         ; sub_414F60+3↑p ...
.text:00415070
.text:00415070 lpVersionInformation= dword ptr -0BCh
.text:00415070 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00415070
.text:00415070                 sub     esp, 0BCh
.text:00415076                 mov     edx, ds:dword_41B880
.text:0041507C                 test    edx, edx
.text:0041507E                 jz      short loc_415090
.text:00415080
.text:00415080 loc_415080:                             ; CODE XREF: sub_415070+7B↓j
.text:00415080                 mov     edx, 1
.text:00415085
.text:00415085 loc_415085:                             ; CODE XREF: sub_415070+217↓j
.text:00415085                 mov     eax, edx
.text:00415087                 add     esp, 0BCh
.text:0041508D                 retn
.text:0041508D ; ---------------------------------------------------------------------------
.text:0041508E                 align 10h
.text:00415090
.text:00415090 loc_415090:                             ; CODE XREF: sub_415070+E↑j
.text:00415090                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00415097                 mov     edx, 9Ch ; 'œ'
.text:0041509C                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:004150A2                 call    GetVersionExA
.text:004150A7                 sub     esp, 4
.text:004150AA                 test    eax, eax
.text:004150AC                 jz      loc_415264
.text:004150B2
.text:004150B2 loc_4150B2:                             ; CODE XREF: sub_415070+245↓j
.text:004150B2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:004150B9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004150BE                 cmp     eax, 1
.text:004150C1                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004150C7                 jz      loc_4151B0
.text:004150CD                 cmp     eax, 1
.text:004150D0                 jb      loc_4151A0
.text:004150D6                 cmp     eax, 2
.text:004150D9                 jz      short loc_4150FA
.text:004150DB                 cmp     eax, 3
.text:004150DE                 jz      short loc_4150ED
.text:004150E0
.text:004150E0 loc_4150E0:                             ; CODE XREF: sub_415070+88↓j
.text:004150E0                                         ; sub_415070+C0↓j ...
.text:004150E0                 mov     edx, 1
.text:004150E5                 mov     ds:dword_41B880, edx
.text:004150EB                 jmp     short loc_415080
.text:004150ED ; ---------------------------------------------------------------------------
.text:004150ED
.text:004150ED loc_4150ED:                             ; CODE XREF: sub_415070+6E↑j
.text:004150ED                 mov     ecx, 17h
.text:004150F2
.text:004150F2 loc_4150F2:                             ; CODE XREF: sub_415070+1A7↓j
.text:004150F2                 mov     ds:dword_41B7D0, ecx
.text:004150F8                 jmp     short loc_4150E0
.text:004150FA ; ---------------------------------------------------------------------------
.text:004150FA
.text:004150FA loc_4150FA:                             ; CODE XREF: sub_415070+69↑j
.text:004150FA                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:004150FF                 cmp     eax, 3
.text:00415102                 jz      short loc_41517B
.text:00415104                 cmp     eax, 4
.text:00415107                 jz      short loc_41516A
.text:00415109
.text:00415109 loc_415109:                             ; CODE XREF: sub_415070+102↓j
.text:00415109                 cmp     eax, 4
.text:0041510C                 ja      short loc_415132
.text:0041510E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00415114                 test    ecx, ecx
.text:00415116                 jnz     short loc_415132
.text:00415118                 mov     edx, 1Eh
.text:0041511D
.text:0041511D loc_41511D:                             ; CODE XREF: sub_415070+DF↓j
.text:0041511D                 mov     ds:dword_41B7D0, edx
.text:00415123
.text:00415123 loc_415123:                             ; CODE XREF: sub_415070+C5↓j
.text:00415123                                         ; sub_415070+D8↓j ...
.text:00415123                 movzx   ecx, ds:word_41B874
.text:0041512A                 add     ds:dword_41B7D0, ecx
.text:00415130                 jmp     short loc_4150E0
.text:00415132 ; ---------------------------------------------------------------------------
.text:00415132
.text:00415132 loc_415132:                             ; CODE XREF: sub_415070+9C↑j
.text:00415132                                         ; sub_415070+A6↑j
.text:00415132                 cmp     eax, 5
.text:00415135                 jnz     short loc_415123
.text:00415137                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0041513C                 cmp     eax, 2
.text:0041513F                 jz      short loc_41515E
.text:00415141                 cmp     eax, 1
.text:00415144                 jz      short loc_415151
.text:00415146                 test    eax, eax
.text:00415148                 jnz     short loc_415123
.text:0041514A                 mov     edx, 32h ; '2'
.text:0041514F                 jmp     short loc_41511D
.text:00415151 ; ---------------------------------------------------------------------------
.text:00415151
.text:00415151 loc_415151:                             ; CODE XREF: sub_415070+D4↑j
.text:00415151                 mov     ecx, 3Ch ; '<'
.text:00415156
.text:00415156 loc_415156:                             ; CODE XREF: sub_415070+122↓j
.text:00415156                 mov     ds:dword_41B7D0, ecx
.text:0041515C                 jmp     short loc_415123
.text:0041515E ; ---------------------------------------------------------------------------
.text:0041515E
.text:0041515E loc_41515E:                             ; CODE XREF: sub_415070+CF↑j
.text:0041515E                 mov     eax, 46h ; 'F'
.text:00415163
.text:00415163 loc_415163:                             ; CODE XREF: sub_415070+109↓j
.text:00415163                                         ; sub_415070+129↓j
.text:00415163                 mov     ds:dword_41B7D0, eax
.text:00415168                 jmp     short loc_415123
.text:0041516A ; ---------------------------------------------------------------------------
.text:0041516A
.text:0041516A loc_41516A:                             ; CODE XREF: sub_415070+97↑j
.text:0041516A                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00415170                 test    ecx, ecx
.text:00415172                 jnz     short loc_415109
.text:00415174                 mov     eax, 28h ; '('
.text:00415179                 jmp     short loc_415163
.text:0041517B ; ---------------------------------------------------------------------------
.text:0041517B
.text:0041517B loc_41517B:                             ; CODE XREF: sub_415070+92↑j
.text:0041517B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00415180                 cmp     eax, 33h ; '3'
.text:00415183                 jz      short loc_415194
.text:00415185                 cmp     eax, 5
.text:00415188                 setz    cl
.text:0041518B                 movzx   edx, cl
.text:0041518E                 lea     ecx, [edx+edx*4+1Eh]
.text:00415192                 jmp     short loc_415156
.text:00415194 ; ---------------------------------------------------------------------------
.text:00415194
.text:00415194 loc_415194:                             ; CODE XREF: sub_415070+113↑j
.text:00415194                 mov     eax, 24h ; '$'
.text:00415199                 jmp     short loc_415163
.text:00415199 ; ---------------------------------------------------------------------------
.text:0041519B                 align 10h
.text:004151A0
.text:004151A0 loc_4151A0:                             ; CODE XREF: sub_415070+60↑j
.text:004151A0                 mov     edx, 2
.text:004151A5                 mov     ds:dword_41B7D0, edx
.text:004151AB                 jmp     loc_4150E0
.text:004151B0 ; ---------------------------------------------------------------------------
.text:004151B0
.text:004151B0 loc_4151B0:                             ; CODE XREF: sub_415070+57↑j
.text:004151B0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004151B6                 cmp     ecx, 4
.text:004151B9                 jnz     loc_4150E0
.text:004151BF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:004151C4                 test    eax, eax
.text:004151C6                 jnz     short loc_4151EA
.text:004151C8                 mov     eax, 0Ah
.text:004151CD                 mov     ds:dword_41B7D0, eax
.text:004151D2                 lea     eax, [edx-3B7h]
.text:004151D8                 cmp     eax, 81h
.text:004151DD                 ja      short loc_415255
.text:004151DF                 mov     edx, 0Bh
.text:004151E4
.text:004151E4 loc_4151E4:                             ; CODE XREF: sub_415070+1F2↓j
.text:004151E4                 mov     ds:dword_41B7D0, edx
.text:004151EA
.text:004151EA loc_4151EA:                             ; CODE XREF: sub_415070+156↑j
.text:004151EA                                         ; sub_415070+1EB↓j
.text:004151EA                 cmp     ecx, 4
.text:004151ED                 jnz     loc_4150E0
.text:004151F3                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:004151FA                 jz      short loc_41521C
.text:004151FC
.text:004151FC loc_4151FC:                             ; CODE XREF: sub_415070+1D4↓j
.text:004151FC                                         ; sub_415070+1DC↓j
.text:004151FC                 cmp     ecx, 4
.text:004151FF                 jnz     loc_4150E0
.text:00415205                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:0041520C                 jnz     loc_4150E0
.text:00415212                 mov     ecx, 12h
.text:00415217                 jmp     loc_4150F2
.text:0041521C ; ---------------------------------------------------------------------------
.text:0041521C
.text:0041521C loc_41521C:                             ; CODE XREF: sub_415070+18A↑j
.text:0041521C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00415222                 mov     eax, 0Eh
.text:00415227                 mov     ds:dword_41B7D0, eax
.text:0041522C                 lea     eax, [edx-7CFh]
.text:00415232                 cmp     eax, 0B7h ; '·'
.text:00415237                 ja      short loc_415246
.text:00415239                 mov     edx, 0Fh
.text:0041523E
.text:0041523E loc_41523E:                             ; CODE XREF: sub_415070+1E3↓j
.text:0041523E                 mov     ds:dword_41B7D0, edx
.text:00415244                 jmp     short loc_4151FC
.text:00415246 ; ---------------------------------------------------------------------------
.text:00415246
.text:00415246 loc_415246:                             ; CODE XREF: sub_415070+1C7↑j
.text:00415246                 cmp     edx, 886h
.text:0041524C                 jbe     short loc_4151FC
.text:0041524E                 mov     edx, 10h
.text:00415253                 jmp     short loc_41523E
.text:00415255 ; ---------------------------------------------------------------------------
.text:00415255
.text:00415255 loc_415255:                             ; CODE XREF: sub_415070+16D↑j
.text:00415255                 cmp     edx, 438h
.text:0041525B                 jbe     short loc_4151EA
.text:0041525D                 mov     edx, 0Ch
.text:00415262                 jmp     short loc_4151E4
.text:00415264 ; ---------------------------------------------------------------------------
.text:00415264
.text:00415264 loc_415264:                             ; CODE XREF: sub_415070+3C↑j
.text:00415264                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:0041526C                 xor     edx, edx
.text:0041526E                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00415272                 mov     dword_41A090, edx
.text:00415278                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:0041527B                 call    GetVersionExA
.text:00415280                 sub     esp, 4
.text:00415283                 xor     edx, edx
.text:00415285                 test    eax, eax
.text:00415287                 jz      loc_415085
.text:0041528D                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00415291                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00415295                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:0041529B                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:0041529F                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:004152A5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:004152A9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:004152AF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:004152B5                 jmp     loc_4150B2
.text:004152B5 sub_415070      endp
.text:004152B5
.text:004152B5 ; ---------------------------------------------------------------------------
.text:004152BA                 align 10h
.text:004152C0 aNotset         db 'notset',0           ; DATA XREF: .data:off_41A0A0↓o
.text:004152C0                                         ; .data:off_41A0A4↓o
.text:004152C7 ; ---------------------------------------------------------------------------
.text:004152C7
.text:004152C7 loc_4152C7:                             ; DATA XREF: .text:loc_415365↓o
.text:004152C7                 jb      short loc_415340
.text:004152C9                 add     [eax], ah
.text:004152CB                 or      [eax], eax
.text:004152CD
.text:004152CD loc_4152CD:                             ; DATA XREF: .text:004153B8↓o
.text:004152CD                                         ; .text:0041541E↓o ...
.text:004152CD                 add     [eax], ah
.text:004152CF                 and     eax, 64252064h
.text:004152D4                 and     [eax], al
.text:004152D6                 lea     esi, [esi+0]
.text:004152D9                 lea     edi, [edi+0]
.text:004152E0                 push    ebp
.text:004152E1                 push    edi
.text:004152E2                 push    esi
.text:004152E3                 push    ebx
.text:004152E4                 sub     esp, 14Ch
.text:004152EA                 mov     edx, off_41A0A0 ; "notset"
.text:004152F0                 mov     edi, [esp+164h]
.text:004152F7                 mov     ebp, [esp+168h]
.text:004152FE                 mov     [esp+4], edx
.text:00415302                 mov     edx, off_41A0A4 ; "notset"
.text:00415308                 mov     [esp], edx
.text:0041530B                 call    strcmp
.text:00415310                 test    eax, eax
.text:00415312                 jz      loc_415700
.text:00415318
.text:00415318 loc_415318:                             ; CODE XREF: .text:0041574C↓j
.text:00415318                 lea     ebx, [esp+20h]
.text:0041531C                 lea     esi, [esi+0]
.text:00415320
.text:00415320 loc_415320:                             ; CODE XREF: .text:00415356↓j
.text:00415320                 mov     [esp+4], ebx
.text:00415324                 mov     ecx, off_41A0A4 ; "notset"
.text:0041532A                 mov     [esp], ecx
.text:0041532D                 call    loc_4145A0
.text:00415332                 test    eax, eax
.text:00415334                 jns     short loc_415365
.text:00415336                 mov     eax, off_41A0A4 ; "notset"
.text:0041533B                 cmp     byte ptr [eax], 0
.text:0041533E                 jz      short loc_415358
.text:00415340
.text:00415340 loc_415340:                             ; CODE XREF: .text:loc_4152C7↑j
.text:00415340                 mov     dword ptr [esp+4], 0
.text:00415348                 mov     [esp], eax
.text:0041534B                 call    strchr
.text:00415350                 inc     eax
.text:00415351                 mov     off_41A0A4, eax ; "notset"
.text:00415356                 jmp     short loc_415320
.text:00415358 ; ---------------------------------------------------------------------------
.text:00415358
.text:00415358 loc_415358:                             ; CODE XREF: .text:0041533E↑j
.text:00415358                 xor     eax, eax
.text:0041535A
.text:0041535A loc_41535A:                             ; CODE XREF: .text:0041551C↓j
.text:0041535A                 add     esp, 14Ch
.text:00415360                 pop     ebx
.text:00415361                 pop     esi
.text:00415362                 pop     edi
.text:00415363                 pop     ebp
.text:00415364                 retn
.text:00415365 ; ---------------------------------------------------------------------------
.text:00415365
.text:00415365 loc_415365:                             ; CODE XREF: .text:00415334↑j
.text:00415365                 mov     dword ptr [edi+0Ch], offset loc_4152C7
.text:0041536C                 lea     ecx, [esp+0D6h]
.text:00415373                 lea     edx, [esp+6Ch]
.text:00415377                 mov     [edi+4], ecx
.text:0041537A                 lea     ebx, [esp+7Ch]
.text:0041537E                 mov     [edi+8], edx
.text:00415381                 mov     [edi], ebx
.text:00415383                 mov     [esp], ebp
.text:00415386                 mov     [esp+4], edi
.text:0041538A                 call    ___addmntentstr
.text:0041538F                 mov     [esp], ebp
.text:00415392                 mov     dword ptr [esp+4], 4152CAh
.text:0041539A                 call    strspn
.text:0041539F                 mov     dword ptr [esp+4], 0
.text:004153A7                 mov     ebx, off_41A0A4 ; "notset"
.text:004153AD                 lea     esi, [eax+ebp]
.text:004153B0                 mov     [esp+1Ch], esi
.text:004153B4                 lea     ebp, [esp+1Ch]
.text:004153B8                 mov     esi, offset loc_4152CD
.text:004153BD                 mov     [esp], ebx
.text:004153C0                 call    strchr
.text:004153C5                 mov     dword ptr [esp+4], 4152CAh
.text:004153CD                 inc     eax
.text:004153CE                 mov     off_41A0A4, eax ; "notset"
.text:004153D3                 mov     [esp], ebp
.text:004153D6                 call    sub_416120
.text:004153DB                 test    eax, eax
.text:004153DD                 mov     ebx, eax
.text:004153DF                 jz      short loc_415408
.text:004153E1                 mov     edx, eax
.text:004153E3                 mov     ecx, eax
.text:004153E5                 lea     esi, [esi+0]
.text:004153E9                 lea     edi, [edi+0]
.text:004153F0
.text:004153F0 loc_4153F0:                             ; CODE XREF: .text:00415406↓j
.text:004153F0                 movzx   eax, byte ptr [edx]
.text:004153F3                 cmp     al, 5Ch ; '\'
.text:004153F5                 jz      loc_4156A4
.text:004153FB
.text:004153FB loc_4153FB:                             ; CODE XREF: .text:004156AC↓j
.text:004153FB                                         ; .text:004156BA↓j ...
.text:004153FB                 mov     [ecx], al
.text:004153FD
.text:004153FD loc_4153FD:                             ; CODE XREF: .text:004156CE↓j
.text:004153FD                 inc     ecx
.text:004153FE
.text:004153FE loc_4153FE:                             ; CODE XREF: .text:004156E6↓j
.text:004153FE                 movzx   eax, byte ptr [edx]
.text:00415401                 mov     esi, ebx
.text:00415403                 inc     edx
.text:00415404                 test    al, al
.text:00415406                 jnz     short loc_4153F0
.text:00415408
.text:00415408 loc_415408:                             ; CODE XREF: .text:004153DF↑j
.text:00415408                 mov     [edi], esi
.text:0041540A                 mov     eax, [esp+1Ch]
.text:0041540E                 test    eax, eax
.text:00415410                 jnz     loc_41568B
.text:00415416
.text:00415416 loc_415416:                             ; CODE XREF: .text:0041569F↓j
.text:00415416                 mov     dword ptr [esp+4], 4152CAh
.text:0041541E                 mov     esi, offset loc_4152CD
.text:00415423                 mov     [esp], ebp
.text:00415426                 call    sub_416120
.text:0041542B                 test    eax, eax
.text:0041542D                 mov     ebx, eax
.text:0041542F                 jz      short loc_415458
.text:00415431                 mov     edx, eax
.text:00415433                 mov     ecx, eax
.text:00415435                 lea     esi, [esi+0]
.text:00415439                 lea     edi, [edi+0]
.text:00415440
.text:00415440 loc_415440:                             ; CODE XREF: .text:00415456↓j
.text:00415440                 movzx   eax, byte ptr [edx]
.text:00415443                 cmp     al, 5Ch ; '\'
.text:00415445                 jz      loc_415633
.text:0041544B
.text:0041544B loc_41544B:                             ; CODE XREF: .text:0041563B↓j
.text:0041544B                                         ; .text:00415649↓j ...
.text:0041544B                 mov     [ecx], al
.text:0041544D
.text:0041544D loc_41544D:                             ; CODE XREF: .text:0041565D↓j
.text:0041544D                 inc     ecx
.text:0041544E
.text:0041544E loc_41544E:                             ; CODE XREF: .text:00415675↓j
.text:0041544E                 movzx   eax, byte ptr [edx]
.text:00415451                 mov     esi, ebx
.text:00415453                 inc     edx
.text:00415454                 test    al, al
.text:00415456                 jnz     short loc_415440
.text:00415458
.text:00415458 loc_415458:                             ; CODE XREF: .text:0041542F↑j
.text:00415458                 mov     [edi+4], esi
.text:0041545B                 mov     eax, [esp+1Ch]
.text:0041545F                 test    eax, eax
.text:00415461                 jnz     loc_41561A
.text:00415467
.text:00415467 loc_415467:                             ; CODE XREF: .text:0041562E↓j
.text:00415467                 mov     dword ptr [esp+4], 4152CAh
.text:0041546F                 mov     esi, offset loc_4152CD
.text:00415474                 mov     [esp], ebp
.text:00415477                 call    sub_416120
.text:0041547C                 test    eax, eax
.text:0041547E                 mov     ebx, eax
.text:00415480                 jz      short loc_4154A8
.text:00415482                 mov     edx, eax
.text:00415484                 mov     ecx, eax
.text:00415486                 lea     esi, [esi+0]
.text:00415489                 lea     edi, [edi+0]
.text:00415490
.text:00415490 loc_415490:                             ; CODE XREF: .text:004154A6↓j
.text:00415490                 movzx   eax, byte ptr [edx]
.text:00415493                 cmp     al, 5Ch ; '\'
.text:00415495                 jz      loc_4155C2
.text:0041549B
.text:0041549B loc_41549B:                             ; CODE XREF: .text:004155CA↓j
.text:0041549B                                         ; .text:004155D8↓j ...
.text:0041549B                 mov     [ecx], al
.text:0041549D
.text:0041549D loc_41549D:                             ; CODE XREF: .text:004155EC↓j
.text:0041549D                 inc     ecx
.text:0041549E
.text:0041549E loc_41549E:                             ; CODE XREF: .text:00415604↓j
.text:0041549E                 movzx   eax, byte ptr [edx]
.text:004154A1                 mov     esi, ebx
.text:004154A3                 inc     edx
.text:004154A4                 test    al, al
.text:004154A6                 jnz     short loc_415490
.text:004154A8
.text:004154A8 loc_4154A8:                             ; CODE XREF: .text:00415480↑j
.text:004154A8                 mov     [edi+8], esi
.text:004154AB                 mov     eax, [esp+1Ch]
.text:004154AF                 test    eax, eax
.text:004154B1                 jnz     loc_4155A9
.text:004154B7
.text:004154B7 loc_4154B7:                             ; CODE XREF: .text:004155BD↓j
.text:004154B7                 mov     dword ptr [esp+4], 4152CAh
.text:004154BF                 mov     esi, offset loc_4152CD
.text:004154C4                 mov     [esp], ebp
.text:004154C7                 call    sub_416120
.text:004154CC                 test    eax, eax
.text:004154CE                 mov     ebx, eax
.text:004154D0                 jz      short loc_4154F4
.text:004154D2                 mov     edx, eax
.text:004154D4                 mov     ecx, eax
.text:004154D6                 lea     esi, [esi+0]
.text:004154D9                 lea     edi, [edi+0]
.text:004154E0
.text:004154E0 loc_4154E0:                             ; CODE XREF: .text:004154F2↓j
.text:004154E0                 movzx   eax, byte ptr [edx]
.text:004154E3                 cmp     al, 5Ch ; '\'
.text:004154E5                 jz      short loc_415555
.text:004154E7
.text:004154E7 loc_4154E7:                             ; CODE XREF: .text:0041555D↓j
.text:004154E7                                         ; .text:00415567↓j ...
.text:004154E7                 mov     [ecx], al
.text:004154E9
.text:004154E9 loc_4154E9:                             ; CODE XREF: .text:0041557B↓j
.text:004154E9                 inc     ecx
.text:004154EA
.text:004154EA loc_4154EA:                             ; CODE XREF: .text:00415593↓j
.text:004154EA                 movzx   eax, byte ptr [edx]
.text:004154ED                 mov     esi, ebx
.text:004154EF                 inc     edx
.text:004154F0                 test    al, al
.text:004154F2                 jnz     short loc_4154E0
.text:004154F4
.text:004154F4 loc_4154F4:                             ; CODE XREF: .text:004154D0↑j
.text:004154F4                 mov     [edi+0Ch], esi
.text:004154F7                 xor     eax, eax
.text:004154F9                 mov     edx, [esp+1Ch]
.text:004154FD                 test    edx, edx
.text:004154FF                 jnz     short loc_415535
.text:00415501
.text:00415501 loc_415501:                             ; CODE XREF: .text:00415553↓j
.text:00415501                 cmp     eax, 1
.text:00415504                 jz      short loc_41552C
.text:00415506                 cmp     eax, 1
.text:00415509                 jle     short loc_415521
.text:0041550B
.text:0041550B loc_41550B:                             ; CODE XREF: .text:00415523↓j
.text:0041550B                                         ; .text:00415533↓j
.text:0041550B                 mov     edx, [esp+160h]
.text:00415512                 mov     [esp], edx
.text:00415515                 call    sub_4160C0
.text:0041551A                 mov     eax, edi
.text:0041551C                 jmp     loc_41535A
.text:00415521 ; ---------------------------------------------------------------------------
.text:00415521
.text:00415521 loc_415521:                             ; CODE XREF: .text:00415509↑j
.text:00415521                 test    eax, eax
.text:00415523                 jnz     short loc_41550B
.text:00415525                 mov     dword ptr [edi+10h], 0
.text:0041552C
.text:0041552C loc_41552C:                             ; CODE XREF: .text:00415504↑j
.text:0041552C                 mov     dword ptr [edi+14h], 0
.text:00415533                 jmp     short loc_41550B
.text:00415535 ; ---------------------------------------------------------------------------
.text:00415535
.text:00415535 loc_415535:                             ; CODE XREF: .text:004154FF↑j
.text:00415535                 mov     dword ptr [esp+4], 4152CEh
.text:0041553D                 lea     esi, [edi+14h]
.text:00415540                 lea     ebp, [edi+10h]
.text:00415543                 mov     [esp+0Ch], esi
.text:00415547                 mov     [esp+8], ebp
.text:0041554B                 mov     [esp], edx
.text:0041554E                 call    sscanf
.text:00415553                 jmp     short loc_415501
.text:00415555 ; ---------------------------------------------------------------------------
.text:00415555
.text:00415555 loc_415555:                             ; CODE XREF: .text:004154E5↑j
.text:00415555                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415559                 jz      short loc_415598
.text:0041555B
.text:0041555B loc_41555B:                             ; CODE XREF: .text:0041559C↓j
.text:0041555B                                         ; .text:004155A2↓j
.text:0041555B                 cmp     al, 5Ch ; '\'
.text:0041555D                 jnz     short loc_4154E7
.text:0041555F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415563                 jz      short loc_415580
.text:00415565
.text:00415565 loc_415565:                             ; CODE XREF: .text:00415584↓j
.text:00415565                                         ; .text:0041558A↓j
.text:00415565                 cmp     al, 5Ch ; '\'
.text:00415567                 jnz     loc_4154E7
.text:0041556D                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00415571                 jnz     loc_4154E7
.text:00415577                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041557A                 inc     edx
.text:0041557B                 jmp     loc_4154E9
.text:00415580 ; ---------------------------------------------------------------------------
.text:00415580
.text:00415580 loc_415580:                             ; CODE XREF: .text:00415563↑j
.text:00415580                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00415584                 jnz     short loc_415565
.text:00415586                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041558A                 jnz     short loc_415565
.text:0041558C                 mov     byte ptr [ecx], 9
.text:0041558F
.text:0041558F loc_41558F:                             ; CODE XREF: .text:004155A7↓j
.text:0041558F                 inc     ecx
.text:00415590                 add     edx, 3
.text:00415593                 jmp     loc_4154EA
.text:00415598 ; ---------------------------------------------------------------------------
.text:00415598
.text:00415598 loc_415598:                             ; CODE XREF: .text:00415559↑j
.text:00415598                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041559C                 jnz     short loc_41555B
.text:0041559E                 cmp     byte ptr [edx+3], 30h ; '0'
.text:004155A2                 jnz     short loc_41555B
.text:004155A4                 mov     byte ptr [ecx], 20h ; ' '
.text:004155A7                 jmp     short loc_41558F
.text:004155A9 ; ---------------------------------------------------------------------------
.text:004155A9
.text:004155A9 loc_4155A9:                             ; CODE XREF: .text:004154B1↑j
.text:004155A9                 mov     dword ptr [esp+4], 4152CAh
.text:004155B1                 mov     [esp], eax
.text:004155B4                 call    strspn
.text:004155B9                 add     [esp+1Ch], eax
.text:004155BD                 jmp     loc_4154B7
.text:004155C2 ; ---------------------------------------------------------------------------
.text:004155C2
.text:004155C2 loc_4155C2:                             ; CODE XREF: .text:00415495↑j
.text:004155C2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004155C6                 jz      short loc_415609
.text:004155C8
.text:004155C8 loc_4155C8:                             ; CODE XREF: .text:0041560D↓j
.text:004155C8                                         ; .text:00415613↓j
.text:004155C8                 cmp     al, 5Ch ; '\'
.text:004155CA                 jnz     loc_41549B
.text:004155D0                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004155D4                 jz      short loc_4155F1
.text:004155D6
.text:004155D6 loc_4155D6:                             ; CODE XREF: .text:004155F5↓j
.text:004155D6                                         ; .text:004155FB↓j
.text:004155D6                 cmp     al, 5Ch ; '\'
.text:004155D8                 jnz     loc_41549B
.text:004155DE                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004155E2                 jnz     loc_41549B
.text:004155E8                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004155EB                 inc     edx
.text:004155EC                 jmp     loc_41549D
.text:004155F1 ; ---------------------------------------------------------------------------
.text:004155F1
.text:004155F1 loc_4155F1:                             ; CODE XREF: .text:004155D4↑j
.text:004155F1                 cmp     byte ptr [edx+2], 31h ; '1'
.text:004155F5                 jnz     short loc_4155D6
.text:004155F7                 cmp     byte ptr [edx+3], 32h ; '2'
.text:004155FB                 jnz     short loc_4155D6
.text:004155FD                 mov     byte ptr [ecx], 9
.text:00415600
.text:00415600 loc_415600:                             ; CODE XREF: .text:00415618↓j
.text:00415600                 inc     ecx
.text:00415601                 add     edx, 3
.text:00415604                 jmp     loc_41549E
.text:00415609 ; ---------------------------------------------------------------------------
.text:00415609
.text:00415609 loc_415609:                             ; CODE XREF: .text:004155C6↑j
.text:00415609                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041560D                 jnz     short loc_4155C8
.text:0041560F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415613                 jnz     short loc_4155C8
.text:00415615                 mov     byte ptr [ecx], 20h ; ' '
.text:00415618                 jmp     short loc_415600
.text:0041561A ; ---------------------------------------------------------------------------
.text:0041561A
.text:0041561A loc_41561A:                             ; CODE XREF: .text:00415461↑j
.text:0041561A                 mov     dword ptr [esp+4], 4152CAh
.text:00415622                 mov     [esp], eax
.text:00415625                 call    strspn
.text:0041562A                 add     [esp+1Ch], eax
.text:0041562E                 jmp     loc_415467
.text:00415633 ; ---------------------------------------------------------------------------
.text:00415633
.text:00415633 loc_415633:                             ; CODE XREF: .text:00415445↑j
.text:00415633                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415637                 jz      short loc_41567A
.text:00415639
.text:00415639 loc_415639:                             ; CODE XREF: .text:0041567E↓j
.text:00415639                                         ; .text:00415684↓j
.text:00415639                 cmp     al, 5Ch ; '\'
.text:0041563B                 jnz     loc_41544B
.text:00415641                 cmp     byte ptr [edx+1], 30h ; '0'
.text:00415645                 jz      short loc_415662
.text:00415647
.text:00415647 loc_415647:                             ; CODE XREF: .text:00415666↓j
.text:00415647                                         ; .text:0041566C↓j
.text:00415647                 cmp     al, 5Ch ; '\'
.text:00415649                 jnz     loc_41544B
.text:0041564F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:00415653                 jnz     loc_41544B
.text:00415659                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0041565C                 inc     edx
.text:0041565D                 jmp     loc_41544D
.text:00415662 ; ---------------------------------------------------------------------------
.text:00415662
.text:00415662 loc_415662:                             ; CODE XREF: .text:00415645↑j
.text:00415662                 cmp     byte ptr [edx+2], 31h ; '1'
.text:00415666                 jnz     short loc_415647
.text:00415668                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0041566C                 jnz     short loc_415647
.text:0041566E                 mov     byte ptr [ecx], 9
.text:00415671
.text:00415671 loc_415671:                             ; CODE XREF: .text:00415689↓j
.text:00415671                 inc     ecx
.text:00415672                 add     edx, 3
.text:00415675                 jmp     loc_41544E
.text:0041567A ; ---------------------------------------------------------------------------
.text:0041567A
.text:0041567A loc_41567A:                             ; CODE XREF: .text:00415637↑j
.text:0041567A                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0041567E                 jnz     short loc_415639
.text:00415680                 cmp     byte ptr [edx+3], 30h ; '0'
.text:00415684                 jnz     short loc_415639
.text:00415686                 mov     byte ptr [ecx], 20h ; ' '
.text:00415689                 jmp     short loc_415671
.text:0041568B ; ---------------------------------------------------------------------------
.text:0041568B
.text:0041568B loc_41568B:                             ; CODE XREF: .text:00415410↑j
.text:0041568B                 mov     dword ptr [esp+4], 4152CAh
.text:00415693                 mov     [esp], eax
.text:00415696                 call    strspn
.text:0041569B                 add     [esp+1Ch], eax
.text:0041569F                 jmp     loc_415416
.text:004156A4 ; ---------------------------------------------------------------------------
.text:004156A4
.text:004156A4 loc_4156A4:                             ; CODE XREF: .text:004153F5↑j
.text:004156A4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004156A8                 jz      short loc_4156EB
.text:004156AA
.text:004156AA loc_4156AA:                             ; CODE XREF: .text:004156EF↓j
.text:004156AA                                         ; .text:004156F5↓j
.text:004156AA                 cmp     al, 5Ch ; '\'
.text:004156AC                 jnz     loc_4153FB
.text:004156B2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:004156B6                 jz      short loc_4156D3
.text:004156B8
.text:004156B8 loc_4156B8:                             ; CODE XREF: .text:004156D7↓j
.text:004156B8                                         ; .text:004156DD↓j
.text:004156B8                 cmp     al, 5Ch ; '\'
.text:004156BA                 jnz     loc_4153FB
.text:004156C0                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:004156C4                 jnz     loc_4153FB
.text:004156CA                 mov     byte ptr [ecx], 5Ch ; '\'
.text:004156CD                 inc     edx
.text:004156CE                 jmp     loc_4153FD
.text:004156D3 ; ---------------------------------------------------------------------------
.text:004156D3
.text:004156D3 loc_4156D3:                             ; CODE XREF: .text:004156B6↑j
.text:004156D3                 cmp     byte ptr [edx+2], 31h ; '1'
.text:004156D7                 jnz     short loc_4156B8
.text:004156D9                 cmp     byte ptr [edx+3], 32h ; '2'
.text:004156DD                 jnz     short loc_4156B8
.text:004156DF                 mov     byte ptr [ecx], 9
.text:004156E2
.text:004156E2 loc_4156E2:                             ; CODE XREF: .text:004156FA↓j
.text:004156E2                 inc     ecx
.text:004156E3                 add     edx, 3
.text:004156E6                 jmp     loc_4153FE
.text:004156EB ; ---------------------------------------------------------------------------
.text:004156EB
.text:004156EB loc_4156EB:                             ; CODE XREF: .text:004156A8↑j
.text:004156EB                 cmp     byte ptr [edx+2], 34h ; '4'
.text:004156EF                 jnz     short loc_4156AA
.text:004156F1                 cmp     byte ptr [edx+3], 30h ; '0'
.text:004156F5                 jnz     short loc_4156AA
.text:004156F7                 mov     byte ptr [ecx], 20h ; ' '
.text:004156FA                 jmp     short loc_4156E2
.text:004156FA ; ---------------------------------------------------------------------------
.text:004156FC                 align 10h
.text:00415700
.text:00415700 loc_415700:                             ; CODE XREF: .text:00415312↑j
.text:00415700                 mov     dword ptr [esp+4], 0
.text:00415708                 mov     dword ptr [esp], 0
.text:0041570F                 call    GetLogicalDriveStringsA
.text:00415714                 sub     esp, 8
.text:00415717                 mov     ebx, eax
.text:00415719                 call    GetProcessHeap
.text:0041571E                 mov     [esp], eax
.text:00415721                 mov     [esp+8], ebx
.text:00415725                 mov     dword ptr [esp+4], 0
.text:0041572D                 call    HeapAlloc
.text:00415732                 sub     esp, 0Ch
.text:00415735                 mov     esi, eax
.text:00415737                 mov     [esp+4], eax
.text:0041573B                 mov     [esp], ebx
.text:0041573E                 call    GetLogicalDriveStringsA
.text:00415743                 mov     off_41A0A4, esi ; "notset"
.text:00415749                 sub     esp, 8
.text:0041574C                 jmp     loc_415318
.text:0041574C ; ---------------------------------------------------------------------------
.text:00415751 ; const char aSSSSDD[]
.text:00415751 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:00415751                                         ; DATA XREF: .text:00415890↓o
.text:00415751                                         ; ___addmntentstr+F0↓o
.text:00415764                 align 10h
.text:00415770                 push    esi
.text:00415771                 push    ebx
.text:00415772                 sub     esp, 44h
.text:00415775                 mov     ebx, [esp+54h]
.text:00415779                 mov     esi, [esp+50h]
.text:0041577D                 mov     edx, [ebx]
.text:0041577F                 mov     [esp+20h], edx
.text:00415783                 mov     ecx, [ebx+4]
.text:00415786                 mov     [esp+24h], ecx
.text:0041578A                 mov     edx, [ebx+8]
.text:0041578D                 mov     [esp+28h], edx
.text:00415791                 mov     ecx, [ebx+0Ch]
.text:00415794                 mov     [esp+2Ch], ecx
.text:00415798                 mov     edx, [ebx+10h]
.text:0041579B                 mov     [esp+30h], edx
.text:0041579F                 mov     ecx, [ebx+14h]
.text:004157A2                 mov     dword ptr [esp+8], 2
.text:004157AA                 mov     dword ptr [esp+4], 0
.text:004157B2                 mov     [esp+34h], ecx
.text:004157B6                 mov     [esp], esi
.text:004157B9                 call    sub_4160B0
.text:004157BE ; ---------------------------------------------------------------------------
.text:004157BE                 test    eax, eax
.text:004157C0                 mov     edx, 1
.text:004157C5                 jnz     loc_4158C5
.text:004157CB                 mov     ebx, [esp+20h]
.text:004157CF                 mov     edx, ebx
.text:004157D1                 movzx   eax, byte ptr [ebx]
.text:004157D4                 test    al, al
.text:004157D6                 jz      short loc_415800
.text:004157D8                 nop
.text:004157D9                 lea     esi, [esi+0]
.text:004157E0
.text:004157E0 loc_4157E0:                             ; CODE XREF: .text:004157FE↓j
.text:004157E0                 cmp     al, 20h ; ' '
.text:004157E2                 jz      loc_415A3A
.text:004157E8                 cmp     al, 9
.text:004157EA                 jz      loc_415A3A
.text:004157F0                 cmp     al, 5Ch ; '\'
.text:004157F2                 jz      loc_415A3A
.text:004157F8                 inc     ebx
.text:004157F9                 movzx   eax, byte ptr [ebx]
.text:004157FC                 test    al, al
.text:004157FE                 jnz     short loc_4157E0
.text:00415800
.text:00415800 loc_415800:                             ; CODE XREF: .text:004157D6↑j
.text:00415800                                         ; .text:00415A3C↓j ...
.text:00415800                 mov     ebx, [esp+24h]
.text:00415804                 mov     edx, ebx
.text:00415806                 movzx   eax, byte ptr [ebx]
.text:00415809                 test    al, al
.text:0041580B                 jz      short loc_415830
.text:0041580D                 lea     esi, [esi+0]
.text:00415810
.text:00415810 loc_415810:                             ; CODE XREF: .text:0041582E↓j
.text:00415810                 cmp     al, 20h ; ' '
.text:00415812                 jz      loc_4159BA
.text:00415818                 cmp     al, 9
.text:0041581A                 jz      loc_4159BA
.text:00415820                 cmp     al, 5Ch ; '\'
.text:00415822                 jz      loc_4159BA
.text:00415828                 inc     ebx
.text:00415829                 movzx   eax, byte ptr [ebx]
.text:0041582C                 test    al, al
.text:0041582E                 jnz     short loc_415810
.text:00415830
.text:00415830 loc_415830:                             ; CODE XREF: .text:0041580B↑j
.text:00415830                                         ; .text:004159BC↓j ...
.text:00415830                 mov     ebx, [esp+28h]
.text:00415834                 mov     edx, ebx
.text:00415836                 movzx   eax, byte ptr [ebx]
.text:00415839                 test    al, al
.text:0041583B                 jz      short loc_415860
.text:0041583D                 lea     esi, [esi+0]
.text:00415840
.text:00415840 loc_415840:                             ; CODE XREF: .text:0041585E↓j
.text:00415840                 cmp     al, 20h ; ' '
.text:00415842                 jz      loc_41593E
.text:00415848                 cmp     al, 9
.text:0041584A                 jz      loc_41593E
.text:00415850                 cmp     al, 5Ch ; '\'
.text:00415852                 jz      loc_41593E
.text:00415858                 inc     ebx
.text:00415859                 movzx   eax, byte ptr [ebx]
.text:0041585C                 test    al, al
.text:0041585E                 jnz     short loc_415840
.text:00415860
.text:00415860 loc_415860:                             ; CODE XREF: .text:0041583B↑j
.text:00415860                                         ; .text:00415940↓j ...
.text:00415860                 mov     edx, [esp+2Ch]
.text:00415864                 mov     ebx, edx
.text:00415866                 movzx   eax, byte ptr [edx]
.text:00415869                 test    al, al
.text:0041586B                 jz      short loc_415884
.text:0041586D                 lea     esi, [esi+0]
.text:00415870
.text:00415870 loc_415870:                             ; CODE XREF: .text:00415882↓j
.text:00415870                 cmp     al, 20h ; ' '
.text:00415872                 jz      short loc_4158CD
.text:00415874                 cmp     al, 9
.text:00415876                 jz      short loc_4158CD
.text:00415878                 cmp     al, 5Ch ; '\'
.text:0041587A                 jz      short loc_4158CD
.text:0041587C                 inc     ebx
.text:0041587D                 movzx   eax, byte ptr [ebx]
.text:00415880                 test    al, al
.text:00415882                 jnz     short loc_415870
.text:00415884
.text:00415884 loc_415884:                             ; CODE XREF: .text:0041586B↑j
.text:00415884                                         ; .text:004158CF↓j ...
.text:00415884                 mov     [esp+14h], edx
.text:00415888                 mov     ecx, [esp+34h]
.text:0041588C                 mov     ebx, [esp+30h]
.text:00415890                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00415898                 mov     edx, [esp+24h]
.text:0041589C                 mov     [esp+1Ch], ecx
.text:004158A0                 mov     ecx, [esp+28h]
.text:004158A4                 mov     [esp+18h], ebx
.text:004158A8                 mov     ebx, [esp+20h]
.text:004158AC                 mov     [esp+0Ch], edx
.text:004158B0                 mov     [esp+10h], ecx
.text:004158B4                 mov     [esp+8], ebx
.text:004158B8                 mov     [esp], esi
.text:004158BB                 call    fprintf
.text:004158C0                 mov     edx, eax
.text:004158C2                 shr     edx, 1Fh
.text:004158C5
.text:004158C5 loc_4158C5:                             ; CODE XREF: .text:004157C5↑j
.text:004158C5                 add     esp, 44h
.text:004158C8                 mov     eax, edx
.text:004158CA                 pop     ebx
.text:004158CB                 pop     esi
.text:004158CC                 retn
.text:004158CD ; ---------------------------------------------------------------------------
.text:004158CD
.text:004158CD loc_4158CD:                             ; CODE XREF: .text:00415872↑j
.text:004158CD                                         ; .text:00415876↑j ...
.text:004158CD                 test    al, al
.text:004158CF                 jz      short loc_415884
.text:004158D1                 mov     [esp], edx
.text:004158D4                 mov     ebx, edx
.text:004158D6                 call    strlen
.text:004158DB                 lea     edx, ds:1[eax*4]
.text:004158E2                 mov     [esp], edx
.text:004158E5                 call    malloc
.text:004158EA                 mov     [esp+2Ch], eax
.text:004158EE                 mov     edx, eax
.text:004158F0
.text:004158F0 loc_4158F0:                             ; CODE XREF: .text:00415908↓j
.text:004158F0                 movzx   eax, byte ptr [ebx]
.text:004158F3                 cmp     al, 20h ; ' '
.text:004158F5                 jz      short loc_41592D
.text:004158F7                 cmp     al, 9
.text:004158F9                 jz      short loc_41591C
.text:004158FB                 cmp     al, 5Ch ; '\'
.text:004158FD                 jz      short loc_415913
.text:004158FF                 mov     [edx], al
.text:00415901
.text:00415901 loc_415901:                             ; CODE XREF: .text:0041591A↓j
.text:00415901                                         ; .text:0041592B↓j ...
.text:00415901                 movzx   ecx, byte ptr [ebx]
.text:00415904                 inc     edx
.text:00415905                 inc     ebx
.text:00415906                 test    cl, cl
.text:00415908                 jnz     short loc_4158F0
.text:0041590A                 mov     edx, [esp+2Ch]
.text:0041590E                 jmp     loc_415884
.text:00415913 ; ---------------------------------------------------------------------------
.text:00415913
.text:00415913 loc_415913:                             ; CODE XREF: .text:004158FD↑j
.text:00415913                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415916                 inc     edx
.text:00415917                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041591A                 jmp     short loc_415901
.text:0041591C ; ---------------------------------------------------------------------------
.text:0041591C
.text:0041591C loc_41591C:                             ; CODE XREF: .text:004158F9↑j
.text:0041591C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041591F                 inc     edx
.text:00415920                 mov     byte ptr [edx], 30h ; '0'
.text:00415923                 inc     edx
.text:00415924                 mov     byte ptr [edx], 31h ; '1'
.text:00415927                 inc     edx
.text:00415928                 mov     byte ptr [edx], 32h ; '2'
.text:0041592B                 jmp     short loc_415901
.text:0041592D ; ---------------------------------------------------------------------------
.text:0041592D
.text:0041592D loc_41592D:                             ; CODE XREF: .text:004158F5↑j
.text:0041592D                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415930                 inc     edx
.text:00415931                 mov     byte ptr [edx], 30h ; '0'
.text:00415934                 inc     edx
.text:00415935                 mov     byte ptr [edx], 34h ; '4'
.text:00415938                 inc     edx
.text:00415939                 mov     byte ptr [edx], 30h ; '0'
.text:0041593C                 jmp     short loc_415901
.text:0041593E ; ---------------------------------------------------------------------------
.text:0041593E
.text:0041593E loc_41593E:                             ; CODE XREF: .text:00415842↑j
.text:0041593E                                         ; .text:0041584A↑j ...
.text:0041593E                 test    al, al
.text:00415940                 jz      loc_415860
.text:00415946                 mov     [esp], edx
.text:00415949                 mov     ebx, edx
.text:0041594B                 call    strlen
.text:00415950                 lea     edx, ds:1[eax*4]
.text:00415957                 mov     [esp], edx
.text:0041595A                 call    malloc
.text:0041595F                 mov     [esp+28h], eax
.text:00415963                 mov     edx, eax
.text:00415965                 lea     esi, [esi+0]
.text:00415969                 lea     edi, [edi+0]
.text:00415970
.text:00415970 loc_415970:                             ; CODE XREF: .text:00415988↓j
.text:00415970                 movzx   eax, byte ptr [ebx]
.text:00415973                 cmp     al, 20h ; ' '
.text:00415975                 jz      short loc_4159A9
.text:00415977                 cmp     al, 9
.text:00415979                 jz      short loc_415998
.text:0041597B                 cmp     al, 5Ch ; '\'
.text:0041597D                 jz      short loc_41598F
.text:0041597F                 mov     [edx], al
.text:00415981
.text:00415981 loc_415981:                             ; CODE XREF: .text:00415996↓j
.text:00415981                                         ; .text:004159A7↓j ...
.text:00415981                 movzx   ecx, byte ptr [ebx]
.text:00415984                 inc     edx
.text:00415985                 inc     ebx
.text:00415986                 test    cl, cl
.text:00415988                 jnz     short loc_415970
.text:0041598A                 jmp     loc_415860
.text:0041598F ; ---------------------------------------------------------------------------
.text:0041598F
.text:0041598F loc_41598F:                             ; CODE XREF: .text:0041597D↑j
.text:0041598F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415992                 inc     edx
.text:00415993                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415996                 jmp     short loc_415981
.text:00415998 ; ---------------------------------------------------------------------------
.text:00415998
.text:00415998 loc_415998:                             ; CODE XREF: .text:00415979↑j
.text:00415998                 mov     byte ptr [edx], 5Ch ; '\'
.text:0041599B                 inc     edx
.text:0041599C                 mov     byte ptr [edx], 30h ; '0'
.text:0041599F                 inc     edx
.text:004159A0                 mov     byte ptr [edx], 31h ; '1'
.text:004159A3                 inc     edx
.text:004159A4                 mov     byte ptr [edx], 32h ; '2'
.text:004159A7                 jmp     short loc_415981
.text:004159A9 ; ---------------------------------------------------------------------------
.text:004159A9
.text:004159A9 loc_4159A9:                             ; CODE XREF: .text:00415975↑j
.text:004159A9                 mov     byte ptr [edx], 5Ch ; '\'
.text:004159AC                 inc     edx
.text:004159AD                 mov     byte ptr [edx], 30h ; '0'
.text:004159B0                 inc     edx
.text:004159B1                 mov     byte ptr [edx], 34h ; '4'
.text:004159B4                 inc     edx
.text:004159B5                 mov     byte ptr [edx], 30h ; '0'
.text:004159B8                 jmp     short loc_415981
.text:004159BA ; ---------------------------------------------------------------------------
.text:004159BA
.text:004159BA loc_4159BA:                             ; CODE XREF: .text:00415812↑j
.text:004159BA                                         ; .text:0041581A↑j ...
.text:004159BA                 test    al, al
.text:004159BC                 jz      loc_415830
.text:004159C2                 mov     [esp], edx
.text:004159C5                 mov     ebx, edx
.text:004159C7                 call    strlen
.text:004159CC                 lea     edx, ds:1[eax*4]
.text:004159D3                 mov     [esp], edx
.text:004159D6                 call    malloc
.text:004159DB                 mov     [esp+24h], eax
.text:004159DF                 mov     edx, eax
.text:004159E1                 jmp     short loc_4159F0
.text:004159E1 ; ---------------------------------------------------------------------------
.text:004159E3                 align 10h
.text:004159F0
.text:004159F0 loc_4159F0:                             ; CODE XREF: .text:004159E1↑j
.text:004159F0                                         ; .text:00415A08↓j
.text:004159F0                 movzx   eax, byte ptr [ebx]
.text:004159F3                 cmp     al, 20h ; ' '
.text:004159F5                 jz      short loc_415A29
.text:004159F7                 cmp     al, 9
.text:004159F9                 jz      short loc_415A18
.text:004159FB                 cmp     al, 5Ch ; '\'
.text:004159FD                 jz      short loc_415A0F
.text:004159FF                 mov     [edx], al
.text:00415A01
.text:00415A01 loc_415A01:                             ; CODE XREF: .text:00415A16↓j
.text:00415A01                                         ; .text:00415A27↓j ...
.text:00415A01                 movzx   ecx, byte ptr [ebx]
.text:00415A04                 inc     edx
.text:00415A05                 inc     ebx
.text:00415A06                 test    cl, cl
.text:00415A08                 jnz     short loc_4159F0
.text:00415A0A                 jmp     loc_415830
.text:00415A0F ; ---------------------------------------------------------------------------
.text:00415A0F
.text:00415A0F loc_415A0F:                             ; CODE XREF: .text:004159FD↑j
.text:00415A0F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A12                 inc     edx
.text:00415A13                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A16                 jmp     short loc_415A01
.text:00415A18 ; ---------------------------------------------------------------------------
.text:00415A18
.text:00415A18 loc_415A18:                             ; CODE XREF: .text:004159F9↑j
.text:00415A18                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A1B                 inc     edx
.text:00415A1C                 mov     byte ptr [edx], 30h ; '0'
.text:00415A1F                 inc     edx
.text:00415A20                 mov     byte ptr [edx], 31h ; '1'
.text:00415A23                 inc     edx
.text:00415A24                 mov     byte ptr [edx], 32h ; '2'
.text:00415A27                 jmp     short loc_415A01
.text:00415A29 ; ---------------------------------------------------------------------------
.text:00415A29
.text:00415A29 loc_415A29:                             ; CODE XREF: .text:004159F5↑j
.text:00415A29                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A2C                 inc     edx
.text:00415A2D                 mov     byte ptr [edx], 30h ; '0'
.text:00415A30                 inc     edx
.text:00415A31                 mov     byte ptr [edx], 34h ; '4'
.text:00415A34                 inc     edx
.text:00415A35                 mov     byte ptr [edx], 30h ; '0'
.text:00415A38                 jmp     short loc_415A01
.text:00415A3A ; ---------------------------------------------------------------------------
.text:00415A3A
.text:00415A3A loc_415A3A:                             ; CODE XREF: .text:004157E2↑j
.text:00415A3A                                         ; .text:004157EA↑j ...
.text:00415A3A                 test    al, al
.text:00415A3C                 jz      loc_415800
.text:00415A42                 mov     [esp], edx
.text:00415A45                 mov     ebx, edx
.text:00415A47                 call    strlen
.text:00415A4C                 lea     ecx, ds:1[eax*4]
.text:00415A53                 mov     [esp], ecx
.text:00415A56                 call    malloc
.text:00415A5B                 mov     [esp+20h], eax
.text:00415A5F                 mov     edx, eax
.text:00415A61                 jmp     short loc_415A70
.text:00415A61 ; ---------------------------------------------------------------------------
.text:00415A63                 align 10h
.text:00415A70
.text:00415A70 loc_415A70:                             ; CODE XREF: .text:00415A61↑j
.text:00415A70                                         ; .text:00415A88↓j
.text:00415A70                 movzx   eax, byte ptr [ebx]
.text:00415A73                 cmp     al, 20h ; ' '
.text:00415A75                 jz      short loc_415AA9
.text:00415A77                 cmp     al, 9
.text:00415A79                 jz      short loc_415A98
.text:00415A7B                 cmp     al, 5Ch ; '\'
.text:00415A7D                 jz      short loc_415A8F
.text:00415A7F                 mov     [edx], al
.text:00415A81
.text:00415A81 loc_415A81:                             ; CODE XREF: .text:00415A96↓j
.text:00415A81                                         ; .text:00415AA7↓j ...
.text:00415A81                 movzx   ecx, byte ptr [ebx]
.text:00415A84                 inc     edx
.text:00415A85                 inc     ebx
.text:00415A86                 test    cl, cl
.text:00415A88                 jnz     short loc_415A70
.text:00415A8A                 jmp     loc_415800
.text:00415A8F ; ---------------------------------------------------------------------------
.text:00415A8F
.text:00415A8F loc_415A8F:                             ; CODE XREF: .text:00415A7D↑j
.text:00415A8F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A92                 inc     edx
.text:00415A93                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A96                 jmp     short loc_415A81
.text:00415A98 ; ---------------------------------------------------------------------------
.text:00415A98
.text:00415A98 loc_415A98:                             ; CODE XREF: .text:00415A79↑j
.text:00415A98                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415A9B                 inc     edx
.text:00415A9C                 mov     byte ptr [edx], 30h ; '0'
.text:00415A9F                 inc     edx
.text:00415AA0                 mov     byte ptr [edx], 31h ; '1'
.text:00415AA3                 inc     edx
.text:00415AA4                 mov     byte ptr [edx], 32h ; '2'
.text:00415AA7                 jmp     short loc_415A81
.text:00415AA9 ; ---------------------------------------------------------------------------
.text:00415AA9
.text:00415AA9 loc_415AA9:                             ; CODE XREF: .text:00415A75↑j
.text:00415AA9                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415AAC                 inc     edx
.text:00415AAD                 mov     byte ptr [edx], 30h ; '0'
.text:00415AB0                 inc     edx
.text:00415AB1                 mov     byte ptr [edx], 34h ; '4'
.text:00415AB4                 inc     edx
.text:00415AB5                 mov     byte ptr [edx], 30h ; '0'
.text:00415AB8                 jmp     short loc_415A81
.text:00415AB8 ; ---------------------------------------------------------------------------
.text:00415ABA                 align 10h
.text:00415AC0
.text:00415AC0 ; =============== S U B R O U T I N E =======================================
.text:00415AC0
.text:00415AC0 ; Attributes: info_from_lumina
.text:00415AC0
.text:00415AC0 ; int __cdecl __addmntentstr(char *, int)
.text:00415AC0 ___addmntentstr proc near               ; CODE XREF: .text:0041538A↑p
.text:00415AC0
.text:00415AC0 Buffer          = dword ptr -4Ch
.text:00415AC0 Format          = dword ptr -48h
.text:00415AC0 var_44          = dword ptr -44h
.text:00415AC0 var_40          = dword ptr -40h
.text:00415AC0 var_3C          = dword ptr -3Ch
.text:00415AC0 var_38          = dword ptr -38h
.text:00415AC0 var_34          = dword ptr -34h
.text:00415AC0 var_30          = dword ptr -30h
.text:00415AC0 var_2C          = dword ptr -2Ch
.text:00415AC0 var_28          = dword ptr -28h
.text:00415AC0 var_24          = dword ptr -24h
.text:00415AC0 Str             = dword ptr -20h
.text:00415AC0 var_1C          = dword ptr -1Ch
.text:00415AC0 var_18          = dword ptr -18h
.text:00415AC0 arg_0           = dword ptr  4
.text:00415AC0 arg_4           = dword ptr  8
.text:00415AC0
.text:00415AC0                 push    ebx
.text:00415AC1                 sub     esp, 48h
.text:00415AC4                 mov     edx, [esp+4Ch+arg_4]
.text:00415AC8                 mov     ecx, [edx]
.text:00415ACA                 mov     [esp+4Ch+var_2C], ecx
.text:00415ACE                 mov     ebx, [edx+4]
.text:00415AD1                 mov     [esp+4Ch+var_28], ebx
.text:00415AD5                 mov     ebx, [edx+8]
.text:00415AD8                 mov     [esp+4Ch+var_24], ebx
.text:00415ADC                 mov     ebx, [edx+0Ch]
.text:00415ADF                 mov     [esp+4Ch+Str], ebx
.text:00415AE3                 mov     ebx, [edx+10h]
.text:00415AE6                 mov     [esp+4Ch+var_1C], ebx
.text:00415AEA                 mov     ebx, [edx+14h]
.text:00415AED                 mov     [esp+4Ch+var_18], ebx
.text:00415AF1                 mov     ebx, ecx
.text:00415AF3                 movzx   eax, byte ptr [ecx]
.text:00415AF6                 test    al, al
.text:00415AF8                 jz      loc_415DE1
.text:00415AFE                 mov     esi, esi
.text:00415B00
.text:00415B00 loc_415B00:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:00415B00                 cmp     al, 20h ; ' '
.text:00415B02                 jz      loc_415D60
.text:00415B08                 cmp     al, 9
.text:00415B0A                 jz      loc_415D60
.text:00415B10                 cmp     al, 5Ch ; '\'
.text:00415B12                 jz      loc_415D60
.text:00415B18                 inc     ebx
.text:00415B19                 movzx   eax, byte ptr [ebx]
.text:00415B1C                 test    al, al
.text:00415B1E                 jnz     short loc_415B00
.text:00415B20
.text:00415B20 loc_415B20:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:00415B20                                         ; ___addmntentstr+2EA↓j
.text:00415B20                 mov     ebx, [esp+4Ch+var_28]
.text:00415B24                 mov     edx, ebx
.text:00415B26                 movzx   eax, byte ptr [ebx]
.text:00415B29                 test    al, al
.text:00415B2B                 jz      short loc_415B50
.text:00415B2D                 lea     esi, [esi+0]
.text:00415B30
.text:00415B30 loc_415B30:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:00415B30                 cmp     al, 20h ; ' '
.text:00415B32                 jz      loc_415CDA
.text:00415B38                 cmp     al, 9
.text:00415B3A                 jz      loc_415CDA
.text:00415B40                 cmp     al, 5Ch ; '\'
.text:00415B42                 jz      loc_415CDA
.text:00415B48                 inc     ebx
.text:00415B49                 movzx   eax, byte ptr [ebx]
.text:00415B4C                 test    al, al
.text:00415B4E                 jnz     short loc_415B30
.text:00415B50
.text:00415B50 loc_415B50:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:00415B50                                         ; ___addmntentstr+21C↓j ...
.text:00415B50                 mov     ebx, [esp+4Ch+var_24]
.text:00415B54                 mov     edx, ebx
.text:00415B56                 movzx   eax, byte ptr [ebx]
.text:00415B59                 test    al, al
.text:00415B5B                 jz      short loc_415B80
.text:00415B5D                 lea     esi, [esi+0]
.text:00415B60
.text:00415B60 loc_415B60:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:00415B60                 cmp     al, 20h ; ' '
.text:00415B62                 jz      loc_415C5E
.text:00415B68                 cmp     al, 9
.text:00415B6A                 jz      loc_415C5E
.text:00415B70                 cmp     al, 5Ch ; '\'
.text:00415B72                 jz      loc_415C5E
.text:00415B78                 inc     ebx
.text:00415B79                 movzx   eax, byte ptr [ebx]
.text:00415B7C                 test    al, al
.text:00415B7E                 jnz     short loc_415B60
.text:00415B80
.text:00415B80 loc_415B80:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:00415B80                                         ; ___addmntentstr+1A0↓j ...
.text:00415B80                 mov     edx, [esp+4Ch+Str]
.text:00415B84                 mov     ebx, edx
.text:00415B86                 movzx   eax, byte ptr [edx]
.text:00415B89                 test    al, al
.text:00415B8B                 jz      short loc_415BA4
.text:00415B8D                 lea     esi, [esi+0]
.text:00415B90
.text:00415B90 loc_415B90:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:00415B90                 cmp     al, 20h ; ' '
.text:00415B92                 jz      short loc_415BEC
.text:00415B94                 cmp     al, 9
.text:00415B96                 jz      short loc_415BEC
.text:00415B98                 cmp     al, 5Ch ; '\'
.text:00415B9A                 jz      short loc_415BEC
.text:00415B9C                 inc     ebx
.text:00415B9D                 movzx   eax, byte ptr [ebx]
.text:00415BA0                 test    al, al
.text:00415BA2                 jnz     short loc_415B90
.text:00415BA4
.text:00415BA4 loc_415BA4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:00415BA4                                         ; ___addmntentstr+12E↓j ...
.text:00415BA4                 mov     [esp+4Ch+var_38], edx
.text:00415BA8                 mov     ebx, [esp+4Ch+var_18]
.text:00415BAC                 mov     ecx, [esp+4Ch+var_1C]
.text:00415BB0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:00415BB8                 mov     edx, [esp+4Ch+var_2C]
.text:00415BBC                 mov     [esp+4Ch+var_30], ebx
.text:00415BC0                 mov     ebx, [esp+4Ch+var_24]
.text:00415BC4                 mov     [esp+4Ch+var_34], ecx
.text:00415BC8                 mov     ecx, [esp+4Ch+var_28]
.text:00415BCC                 mov     [esp+4Ch+var_3C], ebx
.text:00415BD0                 mov     ebx, [esp+4Ch+arg_0]
.text:00415BD4                 mov     [esp+4Ch+var_40], ecx
.text:00415BD8                 mov     [esp+4Ch+var_44], edx
.text:00415BDC                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:00415BDF                 call    sprintf
.text:00415BE4                 add     esp, 48h
.text:00415BE7                 shr     eax, 1Fh
.text:00415BEA                 pop     ebx
.text:00415BEB                 retn
.text:00415BEC ; ---------------------------------------------------------------------------
.text:00415BEC
.text:00415BEC loc_415BEC:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:00415BEC                                         ; ___addmntentstr+D6↑j ...
.text:00415BEC                 test    al, al
.text:00415BEE                 jz      short loc_415BA4
.text:00415BF0                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00415BF3                 mov     ebx, edx
.text:00415BF5                 call    strlen
.text:00415BFA                 lea     edx, ds:1[eax*4]
.text:00415C01                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415C04                 call    malloc
.text:00415C09                 mov     [esp+4Ch+Str], eax
.text:00415C0D                 mov     edx, eax
.text:00415C0F                 nop
.text:00415C10
.text:00415C10 loc_415C10:                             ; CODE XREF: ___addmntentstr+168↓j
.text:00415C10                 movzx   eax, byte ptr [ebx]
.text:00415C13                 cmp     al, 20h ; ' '
.text:00415C15                 jz      short loc_415C4D
.text:00415C17                 cmp     al, 9
.text:00415C19                 jz      short loc_415C3C
.text:00415C1B                 cmp     al, 5Ch ; '\'
.text:00415C1D                 jz      short loc_415C33
.text:00415C1F                 mov     [edx], al
.text:00415C21
.text:00415C21 loc_415C21:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:00415C21                                         ; ___addmntentstr+18B↓j ...
.text:00415C21                 movzx   ecx, byte ptr [ebx]
.text:00415C24                 inc     edx
.text:00415C25                 inc     ebx
.text:00415C26                 test    cl, cl
.text:00415C28                 jnz     short loc_415C10
.text:00415C2A                 mov     edx, [esp+4Ch+Str]
.text:00415C2E                 jmp     loc_415BA4
.text:00415C33 ; ---------------------------------------------------------------------------
.text:00415C33
.text:00415C33 loc_415C33:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:00415C33                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415C36                 inc     edx
.text:00415C37                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415C3A                 jmp     short loc_415C21
.text:00415C3C ; ---------------------------------------------------------------------------
.text:00415C3C
.text:00415C3C loc_415C3C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:00415C3C                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415C3F                 inc     edx
.text:00415C40                 mov     byte ptr [edx], 30h ; '0'
.text:00415C43                 inc     edx
.text:00415C44                 mov     byte ptr [edx], 31h ; '1'
.text:00415C47                 inc     edx
.text:00415C48                 mov     byte ptr [edx], 32h ; '2'
.text:00415C4B                 jmp     short loc_415C21
.text:00415C4D ; ---------------------------------------------------------------------------
.text:00415C4D
.text:00415C4D loc_415C4D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:00415C4D                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415C50                 inc     edx
.text:00415C51                 mov     byte ptr [edx], 30h ; '0'
.text:00415C54                 inc     edx
.text:00415C55                 mov     byte ptr [edx], 34h ; '4'
.text:00415C58                 inc     edx
.text:00415C59                 mov     byte ptr [edx], 30h ; '0'
.text:00415C5C                 jmp     short loc_415C21
.text:00415C5E ; ---------------------------------------------------------------------------
.text:00415C5E
.text:00415C5E loc_415C5E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:00415C5E                                         ; ___addmntentstr+AA↑j ...
.text:00415C5E                 test    al, al
.text:00415C60                 jz      loc_415B80
.text:00415C66                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00415C69                 mov     ebx, edx
.text:00415C6B                 call    strlen
.text:00415C70                 lea     edx, ds:1[eax*4]
.text:00415C77                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415C7A                 call    malloc
.text:00415C7F                 mov     [esp+4Ch+var_24], eax
.text:00415C83                 mov     edx, eax
.text:00415C85                 lea     esi, [esi+0]
.text:00415C89                 lea     edi, [edi+0]
.text:00415C90
.text:00415C90 loc_415C90:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:00415C90                 movzx   eax, byte ptr [ebx]
.text:00415C93                 cmp     al, 20h ; ' '
.text:00415C95                 jz      short loc_415CC9
.text:00415C97                 cmp     al, 9
.text:00415C99                 jz      short loc_415CB8
.text:00415C9B                 cmp     al, 5Ch ; '\'
.text:00415C9D                 jz      short loc_415CAF
.text:00415C9F                 mov     [edx], al
.text:00415CA1
.text:00415CA1 loc_415CA1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:00415CA1                                         ; ___addmntentstr+207↓j ...
.text:00415CA1                 movzx   ecx, byte ptr [ebx]
.text:00415CA4                 inc     edx
.text:00415CA5                 inc     ebx
.text:00415CA6                 test    cl, cl
.text:00415CA8                 jnz     short loc_415C90
.text:00415CAA                 jmp     loc_415B80
.text:00415CAF ; ---------------------------------------------------------------------------
.text:00415CAF
.text:00415CAF loc_415CAF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:00415CAF                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415CB2                 inc     edx
.text:00415CB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415CB6                 jmp     short loc_415CA1
.text:00415CB8 ; ---------------------------------------------------------------------------
.text:00415CB8
.text:00415CB8 loc_415CB8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:00415CB8                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415CBB                 inc     edx
.text:00415CBC                 mov     byte ptr [edx], 30h ; '0'
.text:00415CBF                 inc     edx
.text:00415CC0                 mov     byte ptr [edx], 31h ; '1'
.text:00415CC3                 inc     edx
.text:00415CC4                 mov     byte ptr [edx], 32h ; '2'
.text:00415CC7                 jmp     short loc_415CA1
.text:00415CC9 ; ---------------------------------------------------------------------------
.text:00415CC9
.text:00415CC9 loc_415CC9:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:00415CC9                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415CCC                 inc     edx
.text:00415CCD                 mov     byte ptr [edx], 30h ; '0'
.text:00415CD0                 inc     edx
.text:00415CD1                 mov     byte ptr [edx], 34h ; '4'
.text:00415CD4                 inc     edx
.text:00415CD5                 mov     byte ptr [edx], 30h ; '0'
.text:00415CD8                 jmp     short loc_415CA1
.text:00415CDA ; ---------------------------------------------------------------------------
.text:00415CDA
.text:00415CDA loc_415CDA:                             ; CODE XREF: ___addmntentstr+72↑j
.text:00415CDA                                         ; ___addmntentstr+7A↑j ...
.text:00415CDA                 test    al, al
.text:00415CDC                 jz      loc_415B50
.text:00415CE2                 mov     [esp+4Ch+Buffer], edx ; Str
.text:00415CE5                 mov     ebx, edx
.text:00415CE7                 call    strlen
.text:00415CEC                 lea     edx, ds:1[eax*4]
.text:00415CF3                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415CF6                 call    malloc
.text:00415CFB                 mov     [esp+4Ch+var_28], eax
.text:00415CFF                 mov     edx, eax
.text:00415D01                 jmp     short loc_415D10
.text:00415D01 ; ---------------------------------------------------------------------------
.text:00415D03                 align 10h
.text:00415D10
.text:00415D10 loc_415D10:                             ; CODE XREF: ___addmntentstr+241↑j
.text:00415D10                                         ; ___addmntentstr+268↓j
.text:00415D10                 movzx   eax, byte ptr [ebx]
.text:00415D13                 cmp     al, 20h ; ' '
.text:00415D15                 jz      short loc_415D49
.text:00415D17                 cmp     al, 9
.text:00415D19                 jz      short loc_415D38
.text:00415D1B                 cmp     al, 5Ch ; '\'
.text:00415D1D                 jz      short loc_415D2F
.text:00415D1F                 mov     [edx], al
.text:00415D21
.text:00415D21 loc_415D21:                             ; CODE XREF: ___addmntentstr+276↓j
.text:00415D21                                         ; ___addmntentstr+287↓j ...
.text:00415D21                 movzx   ecx, byte ptr [ebx]
.text:00415D24                 inc     edx
.text:00415D25                 inc     ebx
.text:00415D26                 test    cl, cl
.text:00415D28                 jnz     short loc_415D10
.text:00415D2A                 jmp     loc_415B50
.text:00415D2F ; ---------------------------------------------------------------------------
.text:00415D2F
.text:00415D2F loc_415D2F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:00415D2F                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415D32                 inc     edx
.text:00415D33                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415D36                 jmp     short loc_415D21
.text:00415D38 ; ---------------------------------------------------------------------------
.text:00415D38
.text:00415D38 loc_415D38:                             ; CODE XREF: ___addmntentstr+259↑j
.text:00415D38                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415D3B                 inc     edx
.text:00415D3C                 mov     byte ptr [edx], 30h ; '0'
.text:00415D3F                 inc     edx
.text:00415D40                 mov     byte ptr [edx], 31h ; '1'
.text:00415D43                 inc     edx
.text:00415D44                 mov     byte ptr [edx], 32h ; '2'
.text:00415D47                 jmp     short loc_415D21
.text:00415D49 ; ---------------------------------------------------------------------------
.text:00415D49
.text:00415D49 loc_415D49:                             ; CODE XREF: ___addmntentstr+255↑j
.text:00415D49                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415D4C                 inc     edx
.text:00415D4D                 mov     byte ptr [edx], 30h ; '0'
.text:00415D50                 inc     edx
.text:00415D51                 mov     byte ptr [edx], 34h ; '4'
.text:00415D54                 inc     edx
.text:00415D55                 mov     byte ptr [edx], 30h ; '0'
.text:00415D58                 jmp     short loc_415D21
.text:00415D58 ; ---------------------------------------------------------------------------
.text:00415D5A                 align 10h
.text:00415D60
.text:00415D60 loc_415D60:                             ; CODE XREF: ___addmntentstr+42↑j
.text:00415D60                                         ; ___addmntentstr+4A↑j ...
.text:00415D60                 test    al, al
.text:00415D62                 jz      loc_415B20
.text:00415D68                 mov     ebx, [esp+4Ch+var_2C]
.text:00415D6C                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:00415D6F                 call    strlen
.text:00415D74                 lea     edx, ds:1[eax*4]
.text:00415D7B                 mov     [esp+4Ch+Buffer], edx ; Size
.text:00415D7E                 call    malloc
.text:00415D83                 mov     [esp+4Ch+var_2C], eax
.text:00415D87                 mov     edx, eax
.text:00415D89                 lea     esi, [esi+0]
.text:00415D90
.text:00415D90 loc_415D90:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:00415D90                 movzx   eax, byte ptr [ebx]
.text:00415D93                 cmp     al, 20h ; ' '
.text:00415D95                 jz      short loc_415DD0
.text:00415D97                 cmp     al, 9
.text:00415D99                 jz      short loc_415DB8
.text:00415D9B                 cmp     al, 5Ch ; '\'
.text:00415D9D                 jz      short loc_415DAF
.text:00415D9F                 mov     [edx], al
.text:00415DA1
.text:00415DA1 loc_415DA1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:00415DA1                                         ; ___addmntentstr+307↓j ...
.text:00415DA1                 movzx   ecx, byte ptr [ebx]
.text:00415DA4                 inc     edx
.text:00415DA5                 inc     ebx
.text:00415DA6                 test    cl, cl
.text:00415DA8                 jnz     short loc_415D90
.text:00415DAA                 jmp     loc_415B20
.text:00415DAF ; ---------------------------------------------------------------------------
.text:00415DAF
.text:00415DAF loc_415DAF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:00415DAF                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415DB2                 inc     edx
.text:00415DB3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415DB6                 jmp     short loc_415DA1
.text:00415DB8 ; ---------------------------------------------------------------------------
.text:00415DB8
.text:00415DB8 loc_415DB8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:00415DB8                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415DBB                 inc     edx
.text:00415DBC                 mov     byte ptr [edx], 30h ; '0'
.text:00415DBF                 inc     edx
.text:00415DC0                 mov     byte ptr [edx], 31h ; '1'
.text:00415DC3                 inc     edx
.text:00415DC4                 mov     byte ptr [edx], 32h ; '2'
.text:00415DC7                 jmp     short loc_415DA1
.text:00415DC7 ; ---------------------------------------------------------------------------
.text:00415DC9                 align 10h
.text:00415DD0
.text:00415DD0 loc_415DD0:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:00415DD0                 mov     byte ptr [edx], 5Ch ; '\'
.text:00415DD3                 inc     edx
.text:00415DD4                 mov     byte ptr [edx], 30h ; '0'
.text:00415DD7                 inc     edx
.text:00415DD8                 mov     byte ptr [edx], 34h ; '4'
.text:00415DDB                 inc     edx
.text:00415DDC                 mov     byte ptr [edx], 30h ; '0'
.text:00415DDF                 jmp     short loc_415DA1
.text:00415DE1 ; ---------------------------------------------------------------------------
.text:00415DE1
.text:00415DE1 loc_415DE1:                             ; CODE XREF: ___addmntentstr+38↑j
.text:00415DE1                 movzx   eax, byte ptr [ecx]
.text:00415DE4                 jmp     loc_415D60
.text:00415DE4 ___addmntentstr endp
.text:00415DE4
.text:00415DE4 ; ---------------------------------------------------------------------------
.text:00415DE9                 align 10h
.text:00415DF0
.text:00415DF0 ; =============== S U B R O U T I N E =======================================
.text:00415DF0
.text:00415DF0
.text:00415DF0 sub_415DF0      proc near               ; CODE XREF: sub_413C00+99↑p
.text:00415DF0
.text:00415DF0 nBufferLength   = dword ptr -1Ch
.text:00415DF0 lpBuffer        = dword ptr -18h
.text:00415DF0 dwBytes         = dword ptr -14h
.text:00415DF0 var_8           = dword ptr -8
.text:00415DF0 var_4           = dword ptr -4
.text:00415DF0
.text:00415DF0                 sub     esp, 1Ch
.text:00415DF3                 mov     [esp+1Ch+var_8], ebx
.text:00415DF7                 mov     [esp+1Ch+var_4], esi
.text:00415DFB                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:00415E03                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:00415E0A                 call    GetLogicalDriveStringsA
.text:00415E0F                 sub     esp, 8
.text:00415E12                 mov     ebx, eax
.text:00415E14                 call    GetProcessHeap
.text:00415E19                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:00415E1C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:00415E20                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:00415E28                 call    HeapAlloc
.text:00415E2D                 sub     esp, 0Ch
.text:00415E30                 mov     esi, eax
.text:00415E32                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:00415E35                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:00415E39                 call    GetLogicalDriveStringsA
.text:00415E3E                 sub     esp, 8
.text:00415E41                 mov     eax, esi
.text:00415E43                 mov     ebx, [esp+1Ch+var_8]
.text:00415E47                 mov     esi, [esp+1Ch+var_4]
.text:00415E4B                 add     esp, 1Ch
.text:00415E4E                 retn
.text:00415E4E sub_415DF0      endp
.text:00415E4E
.text:00415E4F
.text:00415E4F ; =============== S U B R O U T I N E =======================================
.text:00415E4F
.text:00415E4F
.text:00415E4F ; int __cdecl sub_415E4F(char *, char *)
.text:00415E4F sub_415E4F      proc near               ; DATA XREF: sub_415E4F:loc_415EDD↓o
.text:00415E4F
.text:00415E4F FileName        = dword ptr -1Ch
.text:00415E4F Mode            = dword ptr -18h
.text:00415E4F dwBytes         = dword ptr -14h
.text:00415E4F arg_0           = dword ptr  4
.text:00415E4F arg_4           = dword ptr  8
.text:00415E4F
.text:00415E4F                 ja      short $+2
.text:00415E51
.text:00415E51 loc_415E51:                             ; CODE XREF: sub_415E4F↑j
.text:00415E51                 jmp     short loc_415E60
.text:00415E51 ; ---------------------------------------------------------------------------
.text:00415E53                 align 10h
.text:00415E60
.text:00415E60 loc_415E60:                             ; CODE XREF: sub_415E4F:loc_415E51↑j
.text:00415E60                 push    edi
.text:00415E61                 push    esi
.text:00415E62                 push    ebx
.text:00415E63                 sub     esp, 10h
.text:00415E66                 mov     ebx, [esp+1Ch+arg_0]
.text:00415E6A                 mov     edx, [esp+1Ch+arg_4]
.text:00415E6E                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00415E71                 mov     [esp+1Ch+Mode], edx ; Mode
.text:00415E75                 call    fopen
.text:00415E7A                 test    eax, eax
.text:00415E7C                 mov     edi, eax
.text:00415E7E                 jz      short loc_415EDD
.text:00415E80
.text:00415E80 loc_415E80:                             ; CODE XREF: sub_415E4F+A2↓j
.text:00415E80                                         ; sub_415E4F+AB↓j
.text:00415E80                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:00415E88                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:00415E8F                 call    GetLogicalDriveStringsA
.text:00415E94                 sub     esp, 8
.text:00415E97                 mov     esi, eax
.text:00415E99                 call    GetProcessHeap
.text:00415E9E                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:00415EA1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:00415EA5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:00415EAD                 call    HeapAlloc
.text:00415EB2                 sub     esp, 0Ch
.text:00415EB5                 mov     ebx, eax
.text:00415EB7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:00415EBA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:00415EBE                 call    GetLogicalDriveStringsA
.text:00415EC3                 mov     off_41A0A4, ebx ; "notset"
.text:00415EC9                 sub     esp, 8
.text:00415ECC                 xor     eax, eax
.text:00415ECE                 test    ebx, ebx
.text:00415ED0                 setz    al
.text:00415ED3                 add     esp, 10h
.text:00415ED6                 pop     ebx
.text:00415ED7                 dec     eax
.text:00415ED8                 and     eax, edi
.text:00415EDA                 pop     esi
.text:00415EDB                 pop     edi
.text:00415EDC                 retn
.text:00415EDD ; ---------------------------------------------------------------------------
.text:00415EDD
.text:00415EDD loc_415EDD:                             ; CODE XREF: sub_415E4F+2F↑j
.text:00415EDD                 mov     [esp+1Ch+Mode], offset sub_415E4F ; Mode
.text:00415EE5                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:00415EE8                 call    fopen
.text:00415EED                 test    eax, eax
.text:00415EEF                 mov     edi, eax
.text:00415EF1                 jnz     short loc_415E80
.text:00415EF3                 call    sub_4161C0
.text:00415EF8                 mov     edi, eax
.text:00415EFA                 jmp     short loc_415E80
.text:00415EFA sub_415E4F      endp
.text:00415EFA
.text:00415EFA ; ---------------------------------------------------------------------------
.text:00415EFC                 align 10h
.text:00415F00                 sub     esp, 0Ch
.text:00415F03                 mov     eax, [esp+10h]
.text:00415F07                 test    eax, eax
.text:00415F09                 jz      short loc_415F13
.text:00415F0B                 mov     [esp], eax
.text:00415F0E                 call    fclose
.text:00415F13
.text:00415F13 loc_415F13:                             ; CODE XREF: .text:00415F09↑j
.text:00415F13                 call    GetProcessHeap
.text:00415F18                 mov     [esp], eax
.text:00415F1B                 mov     ecx, off_41A0A4 ; "notset"
.text:00415F21                 mov     dword ptr [esp+4], 0
.text:00415F29                 mov     [esp+8], ecx
.text:00415F2D                 call    HeapFree
.text:00415F32                 mov     edx, off_41A0A0 ; "notset"
.text:00415F38                 sub     esp, 0Ch
.text:00415F3B                 mov     eax, 1
.text:00415F40                 mov     off_41A0A4, edx ; "notset"
.text:00415F46                 add     esp, 0Ch
.text:00415F49                 retn
.text:00415F49 ; ---------------------------------------------------------------------------
.text:00415F4A                 align 10h
.text:00415F50                 push    edi
.text:00415F51                 push    esi
.text:00415F52                 push    ebx
.text:00415F53                 sub     esp, 10h
.text:00415F56                 mov     edi, [esp+24h]
.text:00415F5A                 mov     [esp], edi
.text:00415F5D                 call    strlen
.text:00415F62                 mov     edx, [esp+20h]
.text:00415F66                 mov     esi, eax
.text:00415F68                 mov     ebx, [edx+0Ch]
.text:00415F6B                 nop
.text:00415F6C                 lea     esi, [esi+0]
.text:00415F70
.text:00415F70 loc_415F70:                             ; CODE XREF: .text:00415FA1↓j
.text:00415F70                 mov     [esp+4], edi
.text:00415F74                 mov     [esp], ebx
.text:00415F77                 call    strstr
.text:00415F7C                 test    eax, eax
.text:00415F7E                 jz      short loc_415FA3
.text:00415F80                 cmp     eax, ebx
.text:00415F82                 jz      short loc_415FA5
.text:00415F84                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:00415F88                 jz      short loc_415FB0
.text:00415F8A
.text:00415F8A loc_415F8A:                             ; CODE XREF: .text:00415FC0↓j
.text:00415F8A                 mov     [esp], ebx
.text:00415F8D                 mov     dword ptr [esp+4], 2Ch ; ','
.text:00415F95                 call    strchr
.text:00415F9A                 test    eax, eax
.text:00415F9C                 mov     ebx, eax
.text:00415F9E                 jz      short loc_415FA3
.text:00415FA0                 inc     ebx
.text:00415FA1                 jmp     short loc_415F70
.text:00415FA3 ; ---------------------------------------------------------------------------
.text:00415FA3
.text:00415FA3 loc_415FA3:                             ; CODE XREF: .text:00415F7E↑j
.text:00415FA3                                         ; .text:00415F9E↑j
.text:00415FA3                 xor     eax, eax
.text:00415FA5
.text:00415FA5 loc_415FA5:                             ; CODE XREF: .text:00415F82↑j
.text:00415FA5                                         ; .text:00415FB6↓j ...
.text:00415FA5                 add     esp, 10h
.text:00415FA8                 pop     ebx
.text:00415FA9                 pop     esi
.text:00415FAA                 pop     edi
.text:00415FAB                 retn
.text:00415FAB ; ---------------------------------------------------------------------------
.text:00415FAC                 align 10h
.text:00415FB0
.text:00415FB0 loc_415FB0:                             ; CODE XREF: .text:00415F88↑j
.text:00415FB0                 movzx   edx, byte ptr [esi+eax]
.text:00415FB4                 test    dl, dl
.text:00415FB6                 jz      short loc_415FA5
.text:00415FB8                 cmp     dl, 3Dh ; '='
.text:00415FBB                 jz      short loc_415FA5
.text:00415FBD                 cmp     dl, 2Ch ; ','
.text:00415FC0                 jnz     short loc_415F8A
.text:00415FC2                 jmp     short loc_415FA5
.text:00415FC2 ; ---------------------------------------------------------------------------
.text:00415FC4                 align 10h
.text:00415FD0 ; const char aFxstat64BadFil[]
.text:00415FD0 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00415FD0                                         ; DATA XREF: sub_416000+7B↓o
.text:00415FF4                 align 10h
.text:00416000
.text:00416000 ; =============== S U B R O U T I N E =======================================
.text:00416000
.text:00416000
.text:00416000 ; int __cdecl sub_416000(HANDLE hNamedPipe, int, int)
.text:00416000 sub_416000      proc near               ; CODE XREF: .text:00413E19↑p
.text:00416000
.text:00416000 FileHandle      = dword ptr -1Ch
.text:00416000 var_18          = dword ptr -18h
.text:00416000 var_C           = dword ptr -0Ch
.text:00416000 var_8           = dword ptr -8
.text:00416000 var_4           = dword ptr -4
.text:00416000 hNamedPipe      = dword ptr  4
.text:00416000 arg_4           = dword ptr  8
.text:00416000 arg_8           = dword ptr  0Ch
.text:00416000
.text:00416000                 sub     esp, 1Ch
.text:00416003                 mov     edx, [esp+1Ch+arg_4]
.text:00416007                 mov     [esp+1Ch+var_C], ebx
.text:0041600B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:0041600F                 mov     [esp+1Ch+var_8], esi
.text:00416013                 mov     esi, [esp+1Ch+arg_8]
.text:00416017                 test    ebx, ebx
.text:00416019                 mov     [esp+1Ch+var_4], edi
.text:0041601D                 jnz     short loc_416057
.text:0041601F                 test    edx, edx
.text:00416021                 js      short loc_416077
.text:00416023                 test    esi, esi
.text:00416025                 jz      short loc_416057
.text:00416027                 cld
.text:00416028                 mov     eax, ebx
.text:0041602A                 mov     edi, esi
.text:0041602C                 mov     ecx, 18h
.text:00416031                 rep stosd
.text:00416033                 mov     [esp+1Ch+arg_4], esi ; int
.text:00416037                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:0041603A                 call    _get_osfhandle
.text:0041603F                 mov     [esp+1Ch+hNamedPipe], eax ; hNamedPipe
.text:00416043                 mov     ebx, [esp+1Ch+var_C]
.text:00416047                 mov     esi, [esp+1Ch+var_8]
.text:0041604B                 mov     edi, [esp+1Ch+var_4]
.text:0041604F                 add     esp, 1Ch
.text:00416052                 jmp     sub_410EB0
.text:00416057 ; ---------------------------------------------------------------------------
.text:00416057
.text:00416057 loc_416057:                             ; CODE XREF: sub_416000+1D↑j
.text:00416057                                         ; sub_416000+25↑j
.text:00416057                 call    _errno
.text:0041605C                 mov     dword ptr [eax], 16h
.text:00416062
.text:00416062 loc_416062:                             ; CODE XREF: sub_416000+92↓j
.text:00416062                 mov     ebx, [esp+1Ch+var_C]
.text:00416066                 mov     eax, 0FFFFFFFFh
.text:0041606B                 mov     esi, [esp+1Ch+var_8]
.text:0041606F                 mov     edi, [esp+1Ch+var_4]
.text:00416073                 add     esp, 1Ch
.text:00416076                 retn
.text:00416077 ; ---------------------------------------------------------------------------
.text:00416077
.text:00416077 loc_416077:                             ; CODE XREF: sub_416000+21↑j
.text:00416077                 mov     [esp+1Ch+var_18], edx
.text:0041607B                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00416082                 call    printf
.text:00416087                 call    _errno
.text:0041608C                 mov     dword ptr [eax], 9
.text:00416092                 jmp     short loc_416062
.text:00416092 sub_416000      endp
.text:00416092
.text:00416092 ; ---------------------------------------------------------------------------
.text:00416094                 db 1Ch dup(90h)
.text:004160B0
.text:004160B0 ; =============== S U B R O U T I N E =======================================
.text:004160B0
.text:004160B0 ; Attributes: noreturn
.text:004160B0
.text:004160B0 sub_4160B0      proc near               ; CODE XREF: .text:004157B9↑p
.text:004160B0                                         ; sub_4160B0↓j
.text:004160B0                 jmp     short sub_4160B0
.text:004160B0 sub_4160B0      endp
.text:004160B0
.text:004160B0 ; ---------------------------------------------------------------------------
.text:004160B2                 align 10h
.text:004160C0
.text:004160C0 ; =============== S U B R O U T I N E =======================================
.text:004160C0
.text:004160C0
.text:004160C0 sub_4160C0      proc near               ; CODE XREF: .text:00415515↑p
.text:004160C0
.text:004160C0 FileHandle      = dword ptr -1Ch
.text:004160C0 dwFileOffsetLow = dword ptr -18h
.text:004160C0 dwFileOffsetHigh= dword ptr -14h
.text:004160C0 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:004160C0 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:004160C0 var_8           = dword ptr -8
.text:004160C0 var_4           = dword ptr -4
.text:004160C0 arg_0           = dword ptr  4
.text:004160C0
.text:004160C0                 sub     esp, 1Ch
.text:004160C3                 mov     edx, [esp+1Ch+arg_0]
.text:004160C7                 mov     [esp+1Ch+var_4], esi
.text:004160CB                 mov     [esp+1Ch+var_8], ebx
.text:004160CF                 mov     ebx, [edx+10h]
.text:004160D2                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004160D5                 call    _get_osfhandle
.text:004160DA                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:004160DD                 mov     esi, eax
.text:004160DF                 call    _filelengthi64
.text:004160E4                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:004160E8                 cdq
.text:004160E9                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:004160EC                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:004160F0                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:004160F8                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:00416100                 call    UnlockFile
.text:00416105                 sub     esp, 14h
.text:00416108                 mov     ebx, [esp+1Ch+var_8]
.text:0041610C                 mov     esi, [esp+1Ch+var_4]
.text:00416110                 add     esp, 1Ch
.text:00416113                 retn
.text:00416113 sub_4160C0      endp
.text:00416113
.text:00416113 ; ---------------------------------------------------------------------------
.text:00416114                 align 10h
.text:00416120
.text:00416120 ; =============== S U B R O U T I N E =======================================
.text:00416120
.text:00416120
.text:00416120 ; int __cdecl sub_416120(int, char *Control)
.text:00416120 sub_416120      proc near               ; CODE XREF: .text:004153D6↑p
.text:00416120                                         ; .text:00415426↑p ...
.text:00416120
.text:00416120 Str             = dword ptr -1Ch
.text:00416120 Val             = dword ptr -18h
.text:00416120 var_8           = dword ptr -8
.text:00416120 var_4           = dword ptr -4
.text:00416120 arg_0           = dword ptr  4
.text:00416120 Control         = dword ptr  8
.text:00416120
.text:00416120                 sub     esp, 1Ch
.text:00416123                 xor     eax, eax
.text:00416125                 mov     edx, [esp+1Ch+Control]
.text:00416129                 mov     [esp+1Ch+var_4], esi
.text:0041612D                 mov     esi, [esp+1Ch+arg_0]
.text:00416131                 mov     [esp+1Ch+var_8], ebx
.text:00416135                 mov     ebx, [esi]
.text:00416137                 test    ebx, ebx
.text:00416139                 jz      short loc_416168
.text:0041613B                 movzx   eax, byte ptr [edx]
.text:0041613E                 test    al, al
.text:00416140                 jz      short loc_416160
.text:00416142                 cmp     byte ptr [edx+1], 0
.text:00416146                 jnz     short loc_4161A0
.text:00416148                 movzx   ecx, byte ptr [ebx]
.text:0041614B                 mov     edx, ebx
.text:0041614D                 cmp     cl, al
.text:0041614F                 jz      short loc_416192
.text:00416151                 test    cl, cl
.text:00416153                 jnz     short loc_416174
.text:00416155                 lea     esi, [esi+0]
.text:00416159                 lea     edi, [edi+0]
.text:00416160
.text:00416160 loc_416160:                             ; CODE XREF: sub_416120+20↑j
.text:00416160                                         ; sub_416120+74↓j
.text:00416160                 mov     dword ptr [esi], 0
.text:00416166
.text:00416166 loc_416166:                             ; CODE XREF: sub_416120+7C↓j
.text:00416166                 mov     eax, ebx
.text:00416168
.text:00416168 loc_416168:                             ; CODE XREF: sub_416120+19↑j
.text:00416168                 mov     ebx, [esp+1Ch+var_8]
.text:0041616C                 mov     esi, [esp+1Ch+var_4]
.text:00416170                 add     esp, 1Ch
.text:00416173                 retn
.text:00416174 ; ---------------------------------------------------------------------------
.text:00416174
.text:00416174 loc_416174:                             ; CODE XREF: sub_416120+33↑j
.text:00416174                 movsx   edx, al
.text:00416177                 mov     [esp+1Ch+Val], edx ; Val
.text:0041617B                 lea     edx, [ebx+1]
.text:0041617E                 mov     [esp+1Ch+Str], edx ; Str
.text:00416181                 call    strchr
.text:00416186                 lea     esi, [esi+0]
.text:00416189                 lea     edi, [edi+0]
.text:00416190
.text:00416190 loc_416190:                             ; CODE XREF: sub_416120+8C↓j
.text:00416190                 mov     edx, eax
.text:00416192
.text:00416192 loc_416192:                             ; CODE XREF: sub_416120+2F↑j
.text:00416192                 test    edx, edx
.text:00416194                 jz      short loc_416160
.text:00416196                 mov     byte ptr [edx], 0
.text:00416199                 inc     edx
.text:0041619A                 mov     [esi], edx
.text:0041619C                 jmp     short loc_416166
.text:0041619C ; ---------------------------------------------------------------------------
.text:0041619E                 align 10h
.text:004161A0
.text:004161A0 loc_4161A0:                             ; CODE XREF: sub_416120+26↑j
.text:004161A0                 mov     [esp+1Ch+Val], edx ; Control
.text:004161A4                 mov     [esp+1Ch+Str], ebx ; Str
.text:004161A7                 call    strpbrk
.text:004161AC                 jmp     short loc_416190
.text:004161AC sub_416120      endp
.text:004161AC
.text:004161AC ; ---------------------------------------------------------------------------
.text:004161AE                 align 10h
.text:004161B0 ; const char aTmpf[]
.text:004161B0 aTmpf           db 'tmpf',0             ; DATA XREF: sub_4161C0+20↓o
.text:004161B5 ; const char aWBd[]
.text:004161B5 aWBd            db 'w+bD',0             ; DATA XREF: sub_4161C0+5E↓o
.text:004161BA                 align 10h
.text:004161C0
.text:004161C0 ; =============== S U B R O U T I N E =======================================
.text:004161C0
.text:004161C0
.text:004161C0 sub_4161C0      proc near               ; CODE XREF: sub_415E4F+A4↑p
.text:004161C0
.text:004161C0 FileHandle      = dword ptr -13Ch
.text:004161C0 Format          = dword ptr -138h
.text:004161C0 var_134         = dword ptr -134h
.text:004161C0 var_130         = dword ptr -130h
.text:004161C0 var_12C         = dword ptr -12Ch
.text:004161C0 Buffer          = byte ptr -11Ch
.text:004161C0 var_8           = dword ptr -8
.text:004161C0 var_4           = dword ptr -4
.text:004161C0
.text:004161C0                 sub     esp, 13Ch
.text:004161C6                 mov     [esp+13Ch+var_8], ebx
.text:004161CD                 lea     ebx, [esp+13Ch+Buffer]
.text:004161D1                 mov     [esp+13Ch+var_4], esi
.text:004161D8                 mov     [esp+13Ch+var_12C], 0 ; int
.text:004161E0                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:004161E8                 mov     [esp+13Ch+var_134], 0 ; char *
.text:004161F0                 mov     [esp+13Ch+Format], 104h ; int
.text:004161F8                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:004161FB                 call    sub_416290
.text:00416200                 xor     edx, edx
.text:00416202                 test    eax, eax
.text:00416204                 jnz     short loc_416236
.text:00416206                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:00416209                 mov     [esp+13Ch+Format], 0 ; int
.text:00416211                 call    sub_416610
.text:00416216                 xor     edx, edx
.text:00416218                 mov     ebx, eax
.text:0041621A                 test    eax, eax
.text:0041621C                 js      short loc_416236
.text:0041621E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:00416226                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:00416229                 call    _fdopen
.text:0041622E                 test    eax, eax
.text:00416230                 mov     esi, eax
.text:00416232                 jz      short loc_41624D
.text:00416234
.text:00416234 loc_416234:                             ; CODE XREF: sub_4161C0+95↓j
.text:00416234                 mov     edx, esi
.text:00416236
.text:00416236 loc_416236:                             ; CODE XREF: sub_4161C0+44↑j
.text:00416236                                         ; sub_4161C0+5C↑j
.text:00416236                 mov     ebx, [esp+13Ch+var_8]
.text:0041623D                 mov     eax, edx
.text:0041623F                 mov     esi, [esp+13Ch+var_4]
.text:00416246                 add     esp, 13Ch
.text:0041624C                 retn
.text:0041624D ; ---------------------------------------------------------------------------
.text:0041624D
.text:0041624D loc_41624D:                             ; CODE XREF: sub_4161C0+72↑j
.text:0041624D                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:00416250                 call    _close_0
.text:00416255                 jmp     short loc_416234
.text:00416255 sub_4161C0      endp
.text:00416255
.text:00416255 ; ---------------------------------------------------------------------------
.text:00416257                 align 10h
.text:00416260 aFile           db 'file',0             ; DATA XREF: sub_416290:loc_4162BC↓o
.text:00416265 ; const char aSSxxxxxx[]
.text:00416265 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_416290+9B↓o
.text:00416275 ; const char aTemp[]
.text:00416275 aTemp           db 'TEMP',0             ; DATA XREF: sub_416290:loc_416372↓o
.text:00416275                                         ; sub_416290:loc_4163B2↓o ...
.text:0041627A ; const char aTmp[]
.text:0041627A aTmp            db '/tmp',0             ; DATA XREF: sub_416290+12F↓o
.text:0041627A                                         ; sub_416290+141↓o ...
.text:0041627F aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_416290:loc_416430↓o
.text:00416286 aTmp_0          db 'TMP',0              ; DATA XREF: sub_416290:loc_4164C0↓o
.text:0041628A                 align 10h
.text:00416290
.text:00416290 ; =============== S U B R O U T I N E =======================================
.text:00416290
.text:00416290
.text:00416290 ; int __cdecl sub_416290(char *Buffer, int, char *, char *, int)
.text:00416290 sub_416290      proc near               ; CODE XREF: sub_4161C0+3B↑p
.text:00416290
.text:00416290 Str             = dword ptr -1BCh
.text:00416290 Format          = dword ptr -1B8h
.text:00416290 var_1B4         = dword ptr -1B4h
.text:00416290 var_1B0         = dword ptr -1B0h
.text:00416290 var_1AC         = dword ptr -1ACh
.text:00416290 var_1A8         = dword ptr -1A8h
.text:00416290 var_19C         = dword ptr -19Ch
.text:00416290 var_13C         = dword ptr -13Ch
.text:00416290 var_DC          = dword ptr -0DCh
.text:00416290 var_7C          = dword ptr -7Ch
.text:00416290 Buffer          = dword ptr  4
.text:00416290 arg_4           = dword ptr  8
.text:00416290 arg_8           = dword ptr  0Ch
.text:00416290 arg_C           = dword ptr  10h
.text:00416290 arg_10          = dword ptr  14h
.text:00416290
.text:00416290                 push    ebp
.text:00416291                 push    edi
.text:00416292                 push    esi
.text:00416293                 push    ebx
.text:00416294                 sub     esp, 1ACh
.text:0041629A                 mov     eax, [esp+1BCh+arg_C]
.text:004162A1                 mov     esi, [esp+1BCh+arg_8]
.text:004162A8                 test    eax, eax
.text:004162AA                 jz      short loc_4162BC
.text:004162AC                 mov     edx, [esp+1BCh+arg_C]
.text:004162B3                 cmp     byte ptr [edx], 0
.text:004162B6                 jnz     loc_4164F0
.text:004162BC
.text:004162BC loc_4162BC:                             ; CODE XREF: sub_416290+1A↑j
.text:004162BC                 mov     eax, offset aFile ; "file"
.text:004162C1                 mov     ebp, 4
.text:004162C6                 mov     [esp+1BCh+arg_C], eax
.text:004162CD
.text:004162CD loc_4162CD:                             ; CODE XREF: sub_416290+274↓j
.text:004162CD                                         ; sub_416290+27F↓j
.text:004162CD                 mov     ebx, [esp+1BCh+arg_10]
.text:004162D4                 test    ebx, ebx
.text:004162D6                 jnz     loc_416430
.text:004162DC
.text:004162DC loc_4162DC:                             ; CODE XREF: sub_416290+21C↓j
.text:004162DC                                         ; sub_416290+224↓j ...
.text:004162DC                 test    esi, esi
.text:004162DE                 jz      loc_416372
.text:004162E4
.text:004162E4 loc_4162E4:                             ; CODE XREF: sub_416290+176↓j
.text:004162E4                                         ; sub_416290+19A↓j
.text:004162E4                 mov     [esp+1BCh+Str], esi ; Str
.text:004162E7                 call    strlen
.text:004162EC                 test    eax, eax
.text:004162EE                 mov     edx, eax
.text:004162F0                 jz      short loc_416300
.text:004162F2                 movzx   eax, byte ptr [eax+esi-1]
.text:004162F7                 cmp     al, 2Fh ; '/'
.text:004162F9                 jz      short loc_416360
.text:004162FB                 cmp     al, 5Ch ; '\'
.text:004162FD                 jz      short loc_416360
.text:004162FF                 nop
.text:00416300
.text:00416300 loc_416300:                             ; CODE XREF: sub_416290+60↑j
.text:00416300                                         ; sub_416290+D1↓j ...
.text:00416300                 lea     edi, [ebp+edx+8]
.text:00416304                 cmp     [esp+1BCh+arg_4], edi
.text:0041630B                 jb      short loc_416348
.text:0041630D                 mov     [esp+1BCh+var_1AC], ebp
.text:00416311                 mov     ecx, [esp+1BCh+arg_C]
.text:00416318                 mov     ebp, [esp+1BCh+Buffer]
.text:0041631F                 mov     [esp+1BCh+var_1B0], esi
.text:00416323                 mov     [esp+1BCh+var_1A8], ecx
.text:00416327                 mov     [esp+1BCh+var_1B4], edx
.text:0041632B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:00416333                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:00416336                 call    sprintf
.text:0041633B                 xor     eax, eax
.text:0041633D
.text:0041633D loc_41633D:                             ; CODE XREF: sub_416290+C8↓j
.text:0041633D                 add     esp, 1ACh
.text:00416343                 pop     ebx
.text:00416344                 pop     esi
.text:00416345                 pop     edi
.text:00416346                 pop     ebp
.text:00416347                 retn
.text:00416348 ; ---------------------------------------------------------------------------
.text:00416348
.text:00416348 loc_416348:                             ; CODE XREF: sub_416290+7B↑j
.text:00416348                 call    _errno
.text:0041634D                 mov     dword ptr [eax], 16h
.text:00416353
.text:00416353 loc_416353:                             ; CODE XREF: sub_416290+187↓j
.text:00416353                 mov     eax, 0FFFFFFFFh
.text:00416358                 jmp     short loc_41633D
.text:00416358 ; ---------------------------------------------------------------------------
.text:0041635A                 align 10h
.text:00416360
.text:00416360 loc_416360:                             ; CODE XREF: sub_416290+69↑j
.text:00416360                                         ; sub_416290+6D↑j ...
.text:00416360                 dec     edx
.text:00416361                 jz      short loc_416300
.text:00416363                 movzx   eax, byte ptr [edx+esi-1]
.text:00416368                 cmp     al, 2Fh ; '/'
.text:0041636A                 jz      short loc_416360
.text:0041636C                 cmp     al, 5Ch ; '\'
.text:0041636E                 jz      short loc_416360
.text:00416370                 jmp     short loc_416300
.text:00416372 ; ---------------------------------------------------------------------------
.text:00416372
.text:00416372 loc_416372:                             ; CODE XREF: sub_416290+4E↑j
.text:00416372                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416379                 lea     esi, [esp+1BCh+var_13C]
.text:00416380                 call    getenv
.text:00416385                 mov     [esp+1BCh+Format], eax ; char *
.text:00416389                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0041638D                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416394                 call    sub_410600
.text:00416399                 test    eax, eax
.text:0041639B                 jnz     short loc_4163B2
.text:0041639D                 mov     edi, [esp+1BCh+var_13C]
.text:004163A4                 and     edi, 0F000h
.text:004163AA                 cmp     edi, 4000h
.text:004163B0                 jz      short loc_41641C
.text:004163B2
.text:004163B2 loc_4163B2:                             ; CODE XREF: sub_416290+10B↑j
.text:004163B2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004163B9                 call    getenv
.text:004163BE                 cld
.text:004163BF                 mov     edx, offset aTmp ; "/tmp"
.text:004163C4                 mov     esi, eax
.text:004163C6                 mov     ecx, 5
.text:004163CB                 mov     edi, edx
.text:004163CD                 repe cmpsb
.text:004163CF                 jz      short loc_41640C
.text:004163D1                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:004163D9                 lea     ecx, [esp+1BCh+var_19C]
.text:004163DD                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:004163E1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:004163E8                 call    sub_410600
.text:004163ED                 test    eax, eax
.text:004163EF                 jnz     short loc_41640C
.text:004163F1                 mov     ebx, [esp+1BCh+var_19C]
.text:004163F5                 mov     esi, offset aTmp ; "/tmp"
.text:004163FA                 and     ebx, 0F000h
.text:00416400                 cmp     ebx, 4000h
.text:00416406                 jz      loc_4162E4
.text:0041640C
.text:0041640C loc_41640C:                             ; CODE XREF: sub_416290+13F↑j
.text:0041640C                                         ; sub_416290+15F↑j
.text:0041640C                 call    _errno
.text:00416411                 mov     dword ptr [eax], 2
.text:00416417                 jmp     loc_416353
.text:0041641C ; ---------------------------------------------------------------------------
.text:0041641C
.text:0041641C loc_41641C:                             ; CODE XREF: sub_416290+120↑j
.text:0041641C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:00416423                 call    getenv
.text:00416428                 mov     esi, eax
.text:0041642A                 jmp     loc_4162E4
.text:0041642A ; ---------------------------------------------------------------------------
.text:0041642F                 align 10h
.text:00416430
.text:00416430 loc_416430:                             ; CODE XREF: sub_416290+46↑j
.text:00416430                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:00416437                 call    sub_416B20
.text:0041643C                 test    eax, eax
.text:0041643E                 mov     ebx, eax
.text:00416440                 jz      short loc_4164C0
.text:00416442
.text:00416442 loc_416442:                             ; CODE XREF: sub_416290+240↓j
.text:00416442                                         ; sub_416290+256↓j
.text:00416442                 mov     [esp+1BCh+Format], ebx ; char *
.text:00416446                 lea     edi, [esp+1BCh+var_7C]
.text:0041644D                 mov     [esp+1BCh+var_1B4], edi ; int
.text:00416451                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416458                 call    sub_410600
.text:0041645D                 test    eax, eax
.text:0041645F                 jnz     short loc_416476
.text:00416461                 mov     edx, [esp+1BCh+var_7C]
.text:00416468                 and     edx, 0F000h
.text:0041646E                 cmp     edx, 4000h
.text:00416474                 jz      short loc_4164B9
.text:00416476
.text:00416476 loc_416476:                             ; CODE XREF: sub_416290+1CF↑j
.text:00416476                                         ; sub_416290+25C↓j
.text:00416476                 test    esi, esi
.text:00416478                 jz      short loc_4164B2
.text:0041647A                 mov     [esp+1BCh+Format], esi ; char *
.text:0041647E                 lea     ecx, [esp+1BCh+var_DC]
.text:00416485                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:00416489                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:00416490                 call    sub_410600
.text:00416495                 test    eax, eax
.text:00416497                 jnz     short loc_4164B2
.text:00416499                 mov     ebx, [esp+1BCh+var_DC]
.text:004164A0                 and     ebx, 0F000h
.text:004164A6                 cmp     ebx, 4000h
.text:004164AC                 jz      loc_4162DC
.text:004164B2
.text:004164B2 loc_4164B2:                             ; CODE XREF: sub_416290+1E8↑j
.text:004164B2                                         ; sub_416290+207↑j
.text:004164B2                 xor     esi, esi
.text:004164B4                 jmp     loc_4162DC
.text:004164B9 ; ---------------------------------------------------------------------------
.text:004164B9
.text:004164B9 loc_4164B9:                             ; CODE XREF: sub_416290+1E4↑j
.text:004164B9                 mov     esi, ebx
.text:004164BB                 jmp     loc_4162DC
.text:004164C0 ; ---------------------------------------------------------------------------
.text:004164C0
.text:004164C0 loc_4164C0:                             ; CODE XREF: sub_416290+1B0↑j
.text:004164C0                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:004164C7                 call    sub_416B20
.text:004164CC                 test    eax, eax
.text:004164CE                 mov     ebx, eax
.text:004164D0                 jnz     loc_416442
.text:004164D6                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:004164DD                 call    sub_416B20
.text:004164E2                 test    eax, eax
.text:004164E4                 mov     ebx, eax
.text:004164E6                 jnz     loc_416442
.text:004164EC                 jmp     short loc_416476
.text:004164EC ; ---------------------------------------------------------------------------
.text:004164EE                 align 10h
.text:004164F0
.text:004164F0 loc_4164F0:                             ; CODE XREF: sub_416290+26↑j
.text:004164F0                 mov     ecx, [esp+1BCh+arg_C]
.text:004164F7                 mov     [esp+1BCh+Str], ecx ; Str
.text:004164FA                 call    strlen
.text:004164FF                 cmp     eax, 5
.text:00416502                 mov     ebp, eax
.text:00416504                 jbe     loc_4162CD
.text:0041650A                 mov     ebp, 5
.text:0041650F                 jmp     loc_4162CD
.text:0041650F sub_416290      endp
.text:0041650F
.text:0041650F ; ---------------------------------------------------------------------------
.text:00416514                 align 10h
.text:00416520 byte_416520     db 61h                  ; DATA XREF: sub_416610+DC↓r
.text:00416520                                         ; sub_416610+122↓r ...
.text:00416521 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0041655F aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_416610+39↓o
.text:00416566                 align 20h
.text:00416580 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:00416580                                         ; DATA XREF: sub_416610:loc_416888↓o
.text:0041659F                 align 10h
.text:004165A0 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:004165A0                                         ; DATA XREF: sub_416610+405↓o
.text:004165CB                 align 20h
.text:004165E0 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:004165E0                                         ; DATA XREF: sub_416610+40D↓o
.text:00416603                 align 10h
.text:00416610
.text:00416610 ; =============== S U B R O U T I N E =======================================
.text:00416610
.text:00416610
.text:00416610 ; int __cdecl sub_416610(char *FileName, int)
.text:00416610 sub_416610      proc near               ; CODE XREF: sub_4161C0+51↑p
.text:00416610
.text:00416610 Str             = dword ptr -9Ch
.text:00416610 OpenFlag        = dword ptr -98h
.text:00416610 var_94          = dword ptr -94h
.text:00416610 var_90          = dword ptr -90h
.text:00416610 var_8C          = dword ptr -8Ch
.text:00416610 var_88          = dword ptr -88h
.text:00416610 var_84          = dword ptr -84h
.text:00416610 var_80          = dword ptr -80h
.text:00416610 var_7C          = dword ptr -7Ch
.text:00416610 FileName        = dword ptr  4
.text:00416610 arg_4           = dword ptr  8
.text:00416610
.text:00416610                 push    ebp
.text:00416611                 push    edi
.text:00416612                 push    esi
.text:00416613                 push    ebx
.text:00416614                 sub     esp, 8Ch
.text:0041661A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:00416622                 call    _errno
.text:00416627                 mov     edx, [eax]
.text:00416629                 mov     [esp+9Ch+var_8C], edx
.text:0041662D                 mov     edx, [esp+9Ch+FileName]
.text:00416634                 mov     [esp+9Ch+Str], edx ; Str
.text:00416637                 call    strlen
.text:0041663C                 cmp     eax, 5
.text:0041663F                 jle     short loc_41665D
.text:00416641                 cld
.text:00416642                 mov     ecx, [esp+9Ch+FileName]
.text:00416649                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0041664E                 lea     esi, [eax+ecx-6]
.text:00416652                 mov     ecx, 7
.text:00416657                 mov     ebp, esi
.text:00416659                 repe cmpsb
.text:0041665B                 jz      short loc_416678
.text:0041665D
.text:0041665D loc_41665D:                             ; CODE XREF: sub_416610+2F↑j
.text:0041665D                 call    _errno
.text:00416662                 mov     dword ptr [eax], 16h
.text:00416668
.text:00416668 loc_416668:                             ; CODE XREF: sub_416610+295↓j
.text:00416668                                         ; sub_416610+2D8↓j ...
.text:00416668                 mov     eax, 0FFFFFFFFh
.text:0041666D
.text:0041666D loc_41666D:                             ; CODE XREF: sub_416610+2EF↓j
.text:0041666D                                         ; sub_416610+332↓j
.text:0041666D                 add     esp, 8Ch
.text:00416673                 pop     ebx
.text:00416674                 pop     esi
.text:00416675                 pop     edi
.text:00416676                 pop     ebp
.text:00416677                 retn
.text:00416678 ; ---------------------------------------------------------------------------
.text:00416678
.text:00416678 loc_416678:                             ; CODE XREF: sub_416610+4B↑j
.text:00416678                 mov     ecx, ds:dword_41B894
.text:0041667E                 mov     edi, ds:dword_41B890
.text:00416684                 mov     eax, ecx
.text:00416686                 or      eax, edi
.text:00416688                 jz      loc_4169C3
.text:0041668E
.text:0041668E loc_41668E:                             ; CODE XREF: sub_416610+3F8↓j
.text:0041668E                 rdtsc
.text:00416690                 mov     edi, edx
.text:00416692                 mov     esi, eax
.text:00416694                 call    _getpid
.text:00416699                 mov     ebx, eax
.text:0041669B                 mov     edx, esi
.text:0041669D                 sar     ebx, 1Fh
.text:004166A0                 xor     edx, eax
.text:004166A2                 mov     ecx, edi
.text:004166A4                 xor     ecx, ebx
.text:004166A6                 mov     ebx, edx
.text:004166A8                 mov     esi, ecx
.text:004166AA                 add     ebx, ds:dword_41B890
.text:004166B0                 adc     esi, ds:dword_41B894
.text:004166B6                 xor     edi, edi
.text:004166B8                 mov     ds:dword_41B890, ebx
.text:004166BE                 mov     ds:dword_41B894, esi
.text:004166C4                 lea     esi, [esi+0]
.text:004166CA                 lea     edi, [edi+0]
.text:004166D0
.text:004166D0 loc_4166D0:                             ; CODE XREF: sub_416610+2C7↓j
.text:004166D0                 mov     [esp+9Ch+Str], ebx
.text:004166D3                 mov     [esp+9Ch+OpenFlag], esi
.text:004166D7                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004166DF                 mov     [esp+9Ch+var_90], 0
.text:004166E7                 call    sub_4187A0
.text:004166EC                 movzx   ecx, ds:byte_416520[eax]
.text:004166F3                 mov     [ebp+0], cl
.text:004166F6                 mov     [esp+9Ch+Str], ebx
.text:004166F9                 mov     [esp+9Ch+OpenFlag], esi
.text:004166FD                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416705                 mov     [esp+9Ch+var_90], 0
.text:0041670D                 call    sub_418680
.text:00416712                 mov     [esp+9Ch+Str], eax
.text:00416715                 mov     ebx, eax
.text:00416717                 mov     esi, edx
.text:00416719                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416721                 mov     [esp+9Ch+var_90], 0
.text:00416729                 mov     [esp+9Ch+OpenFlag], edx
.text:0041672D                 call    sub_4187A0
.text:00416732                 movzx   edx, ds:byte_416520[eax]
.text:00416739                 mov     [ebp+1], dl
.text:0041673C                 mov     [esp+9Ch+Str], ebx
.text:0041673F                 mov     [esp+9Ch+OpenFlag], esi
.text:00416743                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0041674B                 mov     [esp+9Ch+var_90], 0
.text:00416753                 call    sub_418680
.text:00416758                 mov     [esp+9Ch+Str], eax
.text:0041675B                 mov     ebx, eax
.text:0041675D                 mov     esi, edx
.text:0041675F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416767                 mov     [esp+9Ch+var_90], 0
.text:0041676F                 mov     [esp+9Ch+OpenFlag], edx
.text:00416773                 call    sub_4187A0
.text:00416778                 movzx   ecx, ds:byte_416520[eax]
.text:0041677F                 mov     [ebp+2], cl
.text:00416782                 mov     [esp+9Ch+Str], ebx
.text:00416785                 mov     [esp+9Ch+OpenFlag], esi
.text:00416789                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416791                 mov     [esp+9Ch+var_90], 0
.text:00416799                 call    sub_418680
.text:0041679E                 mov     [esp+9Ch+Str], eax
.text:004167A1                 mov     ebx, eax
.text:004167A3                 mov     esi, edx
.text:004167A5                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004167AD                 mov     [esp+9Ch+var_90], 0
.text:004167B5                 mov     [esp+9Ch+OpenFlag], edx
.text:004167B9                 call    sub_4187A0
.text:004167BE                 movzx   edx, ds:byte_416520[eax]
.text:004167C5                 mov     [ebp+3], dl
.text:004167C8                 mov     [esp+9Ch+Str], ebx
.text:004167CB                 mov     [esp+9Ch+OpenFlag], esi
.text:004167CF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004167D7                 mov     [esp+9Ch+var_90], 0
.text:004167DF                 call    sub_418680
.text:004167E4                 mov     [esp+9Ch+Str], eax
.text:004167E7                 mov     ebx, eax
.text:004167E9                 mov     esi, edx
.text:004167EB                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:004167F3                 mov     [esp+9Ch+var_90], 0
.text:004167FB                 mov     [esp+9Ch+OpenFlag], edx
.text:004167FF                 call    sub_4187A0
.text:00416804                 movzx   ecx, ds:byte_416520[eax]
.text:0041680B                 mov     [ebp+4], cl
.text:0041680E                 mov     [esp+9Ch+Str], ebx
.text:00416811                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416819                 mov     [esp+9Ch+var_90], 0
.text:00416821                 mov     [esp+9Ch+OpenFlag], esi
.text:00416825                 call    sub_418680
.text:0041682A                 mov     [esp+9Ch+Str], eax
.text:0041682D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:00416835                 mov     [esp+9Ch+var_90], 0
.text:0041683D                 mov     [esp+9Ch+OpenFlag], edx
.text:00416841                 call    sub_4187A0
.text:00416846                 movzx   ebx, ds:byte_416520[eax]
.text:0041684D                 mov     [ebp+5], bl
.text:00416850                 cmp     [esp+9Ch+arg_4], 1
.text:00416858                 jz      loc_4169A7
.text:0041685E                 cmp     [esp+9Ch+arg_4], 1
.text:00416866                 jle     loc_416970
.text:0041686C                 cmp     [esp+9Ch+arg_4], 2
.text:00416874                 jz      loc_416947
.text:0041687A                 cmp     [esp+9Ch+arg_4], 3
.text:00416882                 jz      loc_416904
.text:00416888
.text:00416888 loc_416888:                             ; CODE XREF: sub_416610+369↓j
.text:00416888                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0041688D                 test    ebx, ebx
.text:0041688F                 jnz     loc_416A0D
.text:00416895
.text:00416895 loc_416895:                             ; CODE XREF: sub_416610+354↓j
.text:00416895                 mov     eax, [esp+9Ch+var_88]
.text:00416899                 test    eax, eax
.text:0041689B                 jns     short loc_4168F0
.text:0041689D                 call    _errno
.text:004168A2                 cmp     dword ptr [eax], 11h
.text:004168A5                 jnz     loc_416668
.text:004168AB
.text:004168AB loc_4168AB:                             ; CODE XREF: sub_416610+315↓j
.text:004168AB                 mov     edx, ds:dword_41B890
.text:004168B1                 mov     ecx, ds:dword_41B894
.text:004168B7                 add     edx, 1E61h
.text:004168BD                 adc     ecx, 0
.text:004168C0                 mov     ebx, edx
.text:004168C2                 inc     edi
.text:004168C3                 mov     ds:dword_41B890, edx
.text:004168C9                 cmp     edi, 3A2F8h
.text:004168CF                 mov     esi, ecx
.text:004168D1                 mov     ds:dword_41B894, ecx
.text:004168D7                 jb      loc_4166D0
.text:004168DD                 call    _errno
.text:004168E2                 mov     dword ptr [eax], 11h
.text:004168E8                 jmp     loc_416668
.text:004168E8 ; ---------------------------------------------------------------------------
.text:004168ED                 align 10h
.text:004168F0
.text:004168F0 loc_4168F0:                             ; CODE XREF: sub_416610+28B↑j
.text:004168F0                 call    _errno
.text:004168F5                 mov     esi, [esp+9Ch+var_8C]
.text:004168F9                 mov     [eax], esi
.text:004168FB                 mov     eax, [esp+9Ch+var_88]
.text:004168FF                 jmp     loc_41666D
.text:00416904 ; ---------------------------------------------------------------------------
.text:00416904
.text:00416904 loc_416904:                             ; CODE XREF: sub_416610+272↑j
.text:00416904                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0041690B                 mov     ecx, [esp+9Ch+FileName]
.text:00416912                 lea     esi, [esp+9Ch+var_7C]
.text:00416916                 mov     [esp+9Ch+var_94], esi ; int
.text:0041691A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0041691E                 call    sub_410310
.text:00416923                 test    eax, eax
.text:00416925                 jns     short loc_4168AB
.text:00416927                 call    _errno
.text:0041692C                 cmp     dword ptr [eax], 2
.text:0041692F                 jnz     loc_416668
.text:00416935                 call    _errno
.text:0041693A                 mov     ebx, [esp+9Ch+var_8C]
.text:0041693E                 mov     [eax], ebx
.text:00416940                 xor     eax, eax
.text:00416942                 jmp     loc_41666D
.text:00416947 ; ---------------------------------------------------------------------------
.text:00416947
.text:00416947 loc_416947:                             ; CODE XREF: sub_416610+264↑j
.text:00416947                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0041694F                 mov     edx, [esp+9Ch+FileName]
.text:00416956                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:00416959                 call    sub_416A40
.text:0041695E                 mov     esi, esi
.text:00416960
.text:00416960 loc_416960:                             ; CODE XREF: sub_416610+395↓j
.text:00416960                 mov     [esp+9Ch+var_88], eax
.text:00416964                 jmp     loc_416895
.text:00416964 ; ---------------------------------------------------------------------------
.text:00416969                 align 10h
.text:00416970
.text:00416970 loc_416970:                             ; CODE XREF: sub_416610+256↑j
.text:00416970                 mov     eax, [esp+9Ch+arg_4]
.text:00416977                 test    eax, eax
.text:00416979                 jnz     loc_416888
.text:0041697F                 mov     [esp+9Ch+var_94], 180h
.text:00416987                 mov     esi, [esp+9Ch+FileName]
.text:0041698E                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:00416996                 mov     [esp+9Ch+Str], esi ; FileName
.text:00416999                 lea     esi, [esi+0]
.text:004169A0
.text:004169A0 loc_4169A0:                             ; CODE XREF: sub_416610+3B1↓j
.text:004169A0                 call    _open_0
.text:004169A5                 jmp     short loc_416960
.text:004169A7 ; ---------------------------------------------------------------------------
.text:004169A7
.text:004169A7 loc_4169A7:                             ; CODE XREF: sub_416610+248↑j
.text:004169A7                 mov     [esp+9Ch+var_94], 180h
.text:004169AF                 mov     ebx, [esp+9Ch+FileName]
.text:004169B6                 mov     [esp+9Ch+OpenFlag], 8502h
.text:004169BE                 mov     [esp+9Ch+Str], ebx
.text:004169C1                 jmp     short loc_4169A0
.text:004169C3 ; ---------------------------------------------------------------------------
.text:004169C3
.text:004169C3 loc_4169C3:                             ; CODE XREF: sub_416610+78↑j
.text:004169C3                 mov     [esp+9Ch+OpenFlag], 0
.text:004169CB                 lea     ebx, [esp+9Ch+var_84]
.text:004169CF                 mov     [esp+9Ch+Str], ebx
.text:004169D2                 call    sub_416AC0
.text:004169D7                 mov     edi, [esp+9Ch+var_80]
.text:004169DB                 mov     edx, [esp+9Ch+var_84]
.text:004169DF                 mov     ecx, edi
.text:004169E1                 mov     ebx, edi
.text:004169E3                 shl     ecx, 10h
.text:004169E6                 sar     ebx, 1Fh
.text:004169E9                 shld    ebx, edi, 10h
.text:004169ED                 mov     esi, edx
.text:004169EF                 mov     edi, edx
.text:004169F1                 mov     edx, ecx
.text:004169F3                 sar     edi, 1Fh
.text:004169F6                 xor     edx, esi
.text:004169F8                 mov     ds:dword_41B890, edx
.text:004169FE                 mov     esi, ebx
.text:00416A00                 xor     esi, edi
.text:00416A02                 mov     ds:dword_41B894, esi
.text:00416A08                 jmp     loc_41668E
.text:00416A0D ; ---------------------------------------------------------------------------
.text:00416A0D
.text:00416A0D loc_416A0D:                             ; CODE XREF: sub_416610+27F↑j
.text:00416A0D                 mov     [esp+9Ch+var_94], 151h
.text:00416A15                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:00416A1D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:00416A24                 call    _assert
.text:00416A24 sub_416610      endp
.text:00416A24
.text:00416A24 ; ---------------------------------------------------------------------------
.text:00416A29                 align 20h
.text:00416A40
.text:00416A40 ; =============== S U B R O U T I N E =======================================
.text:00416A40
.text:00416A40
.text:00416A40 ; int __cdecl sub_416A40(LPCSTR, int AccessMode)
.text:00416A40 sub_416A40      proc near               ; CODE XREF: sub_416610+349↑p
.text:00416A40
.text:00416A40 lpPathName      = dword ptr -1Ch
.text:00416A40 lpSecurityAttributes= dword ptr -18h
.text:00416A40 var_8           = dword ptr -8
.text:00416A40 var_4           = dword ptr -4
.text:00416A40 arg_0           = dword ptr  4
.text:00416A40 AccessMode      = dword ptr  8
.text:00416A40
.text:00416A40                 sub     esp, 1Ch
.text:00416A43                 mov     [esp+1Ch+var_8], ebx
.text:00416A47                 mov     ebx, [esp+1Ch+arg_0]
.text:00416A4B                 mov     [esp+1Ch+var_4], esi
.text:00416A4F                 mov     esi, [esp+1Ch+AccessMode]
.text:00416A53                 test    ebx, ebx
.text:00416A55                 jz      short loc_416AA5
.text:00416A57                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00416A5F                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:00416A62                 call    CreateDirectoryA
.text:00416A67                 sub     esp, 8
.text:00416A6A                 test    eax, eax
.text:00416A6C                 jz      short loc_416A86
.text:00416A6E                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:00416A72                 mov     esi, [esp+1Ch+var_4]
.text:00416A76                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:00416A7A                 mov     ebx, [esp+1Ch+var_8]
.text:00416A7E                 add     esp, 1Ch
.text:00416A81                 jmp     _chmod
.text:00416A86 ; ---------------------------------------------------------------------------
.text:00416A86
.text:00416A86 loc_416A86:                             ; CODE XREF: sub_416A40+2C↑j
.text:00416A86                 call    sub_412940
.text:00416A8B                 mov     esi, eax
.text:00416A8D                 call    _errno
.text:00416A92                 mov     [eax], esi
.text:00416A94
.text:00416A94 loc_416A94:                             ; CODE XREF: sub_416A40+70↓j
.text:00416A94                 mov     ebx, [esp+1Ch+var_8]
.text:00416A98                 mov     eax, 0FFFFFFFFh
.text:00416A9D                 mov     esi, [esp+1Ch+var_4]
.text:00416AA1                 add     esp, 1Ch
.text:00416AA4                 retn
.text:00416AA5 ; ---------------------------------------------------------------------------
.text:00416AA5
.text:00416AA5 loc_416AA5:                             ; CODE XREF: sub_416A40+15↑j
.text:00416AA5                 call    _errno
.text:00416AAA                 mov     dword ptr [eax], 16h
.text:00416AB0                 jmp     short loc_416A94
.text:00416AB0 sub_416A40      endp
.text:00416AB0
.text:00416AB0 ; ---------------------------------------------------------------------------
.text:00416AB2                 align 10h
.text:00416AC0
.text:00416AC0 ; =============== S U B R O U T I N E =======================================
.text:00416AC0
.text:00416AC0
.text:00416AC0 sub_416AC0      proc near               ; CODE XREF: sub_416610+3C2↑p
.text:00416AC0
.text:00416AC0 var_1C          = dword ptr -1Ch
.text:00416AC0 var_18          = dword ptr -18h
.text:00416AC0 var_C           = dword ptr -0Ch
.text:00416AC0 var_8           = dword ptr -8
.text:00416AC0 var_4           = dword ptr -4
.text:00416AC0 arg_0           = dword ptr  4
.text:00416AC0 arg_4           = dword ptr  8
.text:00416AC0
.text:00416AC0                 sub     esp, 1Ch
.text:00416AC3                 mov     edx, [esp+1Ch+arg_4]
.text:00416AC7                 mov     [esp+1Ch+var_4], ebx
.text:00416ACB                 mov     ebx, [esp+1Ch+arg_0]
.text:00416ACF                 mov     [esp+1Ch+var_18], edx
.text:00416AD3                 lea     edx, [esp+1Ch+var_C]
.text:00416AD7                 mov     [esp+1Ch+var_1C], edx
.text:00416ADA                 call    sub_416B40
.text:00416ADF                 test    eax, eax
.text:00416AE1                 mov     edx, 0FFFFFFFFh
.text:00416AE6                 jnz     short loc_416B0A
.text:00416AE8                 mov     ecx, [esp+1Ch+var_C]
.text:00416AEC                 mov     edx, 10624DD3h
.text:00416AF1                 mov     [ebx], ecx
.text:00416AF3                 mov     ecx, [esp+1Ch+var_8]
.text:00416AF7                 mov     eax, ecx
.text:00416AF9                 imul    edx
.text:00416AFB                 mov     eax, ecx
.text:00416AFD                 sar     eax, 1Fh
.text:00416B00                 sar     edx, 6
.text:00416B03                 sub     edx, eax
.text:00416B05                 mov     [ebx+4], edx
.text:00416B08                 xor     edx, edx
.text:00416B0A
.text:00416B0A loc_416B0A:                             ; CODE XREF: sub_416AC0+26↑j
.text:00416B0A                 mov     ebx, [esp+1Ch+var_4]
.text:00416B0E                 mov     eax, edx
.text:00416B10                 add     esp, 1Ch
.text:00416B13                 retn
.text:00416B13 sub_416AC0      endp
.text:00416B13
.text:00416B13 ; ---------------------------------------------------------------------------
.text:00416B14                 align 10h
.text:00416B20
.text:00416B20 ; =============== S U B R O U T I N E =======================================
.text:00416B20
.text:00416B20
.text:00416B20 sub_416B20      proc near               ; CODE XREF: sub_416290+1A7↑p
.text:00416B20                                         ; sub_416290+237↑p ...
.text:00416B20                 mov     edx, ds:dword_41B580
.text:00416B26                 test    edx, edx
.text:00416B28                 jnz     short loc_416B30
.text:00416B2A                 jmp     getenv
.text:00416B2A ; ---------------------------------------------------------------------------
.text:00416B2F                 align 10h
.text:00416B30
.text:00416B30 loc_416B30:                             ; CODE XREF: sub_416B20+8↑j
.text:00416B30                 xor     eax, eax
.text:00416B32                 retn
.text:00416B32 sub_416B20      endp
.text:00416B32
.text:00416B32 ; ---------------------------------------------------------------------------
.text:00416B33                 align 10h
.text:00416B40
.text:00416B40 ; =============== S U B R O U T I N E =======================================
.text:00416B40
.text:00416B40
.text:00416B40 sub_416B40      proc near               ; CODE XREF: sub_416AC0+1A↑p
.text:00416B40
.text:00416B40 lpTimeZoneInformation= dword ptr -0DCh
.text:00416B40 var_D8          = dword ptr -0D8h
.text:00416B40 var_D4          = dword ptr -0D4h
.text:00416B40 var_D0          = dword ptr -0D0h
.text:00416B40 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:00416B40 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:00416B40 arg_0           = dword ptr  4
.text:00416B40 arg_4           = dword ptr  8
.text:00416B40
.text:00416B40                 push    edi
.text:00416B41                 push    esi
.text:00416B42                 push    ebx
.text:00416B43                 sub     esp, 0D0h
.text:00416B49                 mov     ebx, [esp+0DCh+arg_4]
.text:00416B50                 mov     edi, [esp+0DCh+arg_0]
.text:00416B57                 test    ebx, ebx
.text:00416B59                 jz      short loc_416B84
.text:00416B5B                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:00416B5F                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:00416B62                 call    GetTimeZoneInformation
.text:00416B67                 sub     esp, 4
.text:00416B6A                 cmp     eax, 0FFFFFFFFh
.text:00416B6D                 jz      loc_416C05
.text:00416B73                 xor     ecx, ecx
.text:00416B75                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:00416B79                 cmp     eax, 2
.text:00416B7C                 setz    cl
.text:00416B7F                 mov     [ebx], esi
.text:00416B81                 mov     [ebx+4], ecx
.text:00416B84
.text:00416B84 loc_416B84:                             ; CODE XREF: sub_416B40+19↑j
.text:00416B84                                         ; sub_416B40+E0↓j
.text:00416B84                 test    edi, edi
.text:00416B86                 jz      short loc_416BF9
.text:00416B88                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:00416B8C                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:00416B8F                 call    GetSystemTimeAsFileTime
.text:00416B94                 sub     esp, 4
.text:00416B97                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:00416B9B                 mov     [esp+0DCh+var_D4], 989680h
.text:00416BA3                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:00416BA7                 mov     [esp+0DCh+var_D0], 0
.text:00416BAF                 add     ebx, 2AC18000h
.text:00416BB5                 adc     esi, 0FE624E21h
.text:00416BBB                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:00416BBF                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00416BC2                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:00416BC6                 mov     [esp+0DCh+var_D8], esi
.text:00416BCA                 call    sub_418680
.text:00416BCF                 mov     [edi], eax
.text:00416BD1                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:00416BD4                 mov     [esp+0DCh+var_D4], 989680h
.text:00416BDC                 mov     [esp+0DCh+var_D0], 0
.text:00416BE4                 mov     [esp+0DCh+var_D8], esi
.text:00416BE8                 call    sub_4187A0
.text:00416BED                 lea     ebx, [eax+eax*4]
.text:00416BF0                 lea     edx, [ebx+ebx*4]
.text:00416BF3                 shl     edx, 2
.text:00416BF6                 mov     [edi+4], edx
.text:00416BF9
.text:00416BF9 loc_416BF9:                             ; CODE XREF: sub_416B40+46↑j
.text:00416BF9                 add     esp, 0D0h
.text:00416BFF                 xor     eax, eax
.text:00416C01                 pop     ebx
.text:00416C02                 pop     esi
.text:00416C03                 pop     edi
.text:00416C04                 retn
.text:00416C05 ; ---------------------------------------------------------------------------
.text:00416C05
.text:00416C05 loc_416C05:                             ; CODE XREF: sub_416B40+2D↑j
.text:00416C05                 mov     dword ptr [ebx], 0
.text:00416C0B                 mov     dword ptr [ebx+4], 0
.text:00416C12                 call    sub_412940
.text:00416C17                 mov     esi, eax
.text:00416C19                 call    _errno
.text:00416C1E                 mov     [eax], esi
.text:00416C20                 jmp     loc_416B84
.text:00416C20 sub_416B40      endp
.text:00416C20
.text:00416C20 ; ---------------------------------------------------------------------------
.text:00416C25                 align 10h
.text:00416C30
.text:00416C30 ; =============== S U B R O U T I N E =======================================
.text:00416C30
.text:00416C30 ; Attributes: bp-based frame
.text:00416C30
.text:00416C30 sub_416C30      proc near               ; CODE XREF: sub_401FE0+43↑p
.text:00416C30                                         ; sub_401FE0+6B↑p ...
.text:00416C30
.text:00416C30 arg_0           = dword ptr  8
.text:00416C30 arg_4           = dword ptr  0Ch
.text:00416C30 arg_8           = dword ptr  10h
.text:00416C30 arg_C           = dword ptr  14h
.text:00416C30 arg_10          = dword ptr  18h
.text:00416C30
.text:00416C30                 push    ebp
.text:00416C31                 mov     ebp, esp
.text:00416C33                 push    esi
.text:00416C34                 push    ebx
.text:00416C35                 mov     edx, [ebp+arg_8]
.text:00416C38                 mov     esi, [ebp+arg_0]
.text:00416C3B                 mov     ecx, [ebp+arg_4]
.text:00416C3E                 mov     ebx, [ebp+arg_C]
.text:00416C41                 test    edx, edx
.text:00416C43                 jnz     short loc_416C4A
.text:00416C45                 mov     edx, 8
.text:00416C4A
.text:00416C4A loc_416C4A:                             ; CODE XREF: sub_416C30+13↑j
.text:00416C4A                 test    ecx, ecx
.text:00416C4C                 jnz     short loc_416C53
.text:00416C4E                 mov     ecx, 0FE8h
.text:00416C53
.text:00416C53 loc_416C53:                             ; CODE XREF: sub_416C30+1C↑j
.text:00416C53                 mov     eax, [ebp+arg_10]
.text:00416C56                 sub     esp, 0Ch
.text:00416C59                 mov     [esi+20h], eax
.text:00416C5C                 mov     [esi+1Ch], ebx
.text:00416C5F                 lea     eax, [edx-1]
.text:00416C62                 mov     [esi], ecx
.text:00416C64                 mov     [esi+18h], eax
.text:00416C67                 mov     al, [esi+28h]
.text:00416C6A                 and     eax, 0FFFFFFFEh
.text:00416C6D                 mov     [esi+28h], al
.text:00416C70                 push    ecx
.text:00416C71                 call    ebx
.text:00416C73                 mov     ebx, eax
.text:00416C75                 add     esp, 10h
.text:00416C78                 mov     [esi+4], eax
.text:00416C7B                 test    eax, eax
.text:00416C7D                 jz      short loc_416CB0
.text:00416C7F
.text:00416C7F loc_416C7F:                             ; CODE XREF: .text:00416CB6↓j
.text:00416C7F                 lea     eax, [ebx+8]
.text:00416C82                 mov     edx, [esi]
.text:00416C84                 mov     [esi+8], eax
.text:00416C87                 mov     [esi+0Ch], eax
.text:00416C8A                 mov     eax, ebx
.text:00416C8C                 add     eax, edx
.text:00416C8E                 mov     [ebx], eax
.text:00416C90                 mov     [esi+10h], eax
.text:00416C93                 mov     dword ptr [ebx+4], 0
.text:00416C9A                 and     byte ptr [esi+28h], 0F9h
.text:00416C9E                 lea     esp, [ebp-8]
.text:00416CA1                 mov     eax, 1
.text:00416CA6                 pop     ebx
.text:00416CA7                 pop     esi
.text:00416CA8                 pop     ebp
.text:00416CA9                 retn
.text:00416CA9 ; ---------------------------------------------------------------------------
.text:00416CAA                 align 10h
.text:00416CB0
.text:00416CB0 loc_416CB0:                             ; CODE XREF: sub_416C30+4D↑j
.text:00416CB0                 call    off_41A0B0
.text:00416CB0 sub_416C30      endp
.text:00416CB0
.text:00416CB6 ; ---------------------------------------------------------------------------
.text:00416CB6                 jmp     short loc_416C7F
.text:00416CB6 ; ---------------------------------------------------------------------------
.text:00416CB8                 align 10h
.text:00416CC0                 push    ebp
.text:00416CC1                 mov     ebp, esp
.text:00416CC3                 push    edi
.text:00416CC4                 push    esi
.text:00416CC5                 push    ebx
.text:00416CC6                 sub     esp, 0Ch
.text:00416CC9                 mov     edx, [ebp+10h]
.text:00416CCC                 mov     esi, [ebp+8]
.text:00416CCF                 mov     ecx, [ebp+0Ch]
.text:00416CD2                 mov     ebx, [ebp+14h]
.text:00416CD5                 mov     edi, [ebp+1Ch]
.text:00416CD8                 test    edx, edx
.text:00416CDA                 jnz     short loc_416CE1
.text:00416CDC                 mov     edx, 8
.text:00416CE1
.text:00416CE1 loc_416CE1:                             ; CODE XREF: .text:00416CDA↑j
.text:00416CE1                 test    ecx, ecx
.text:00416CE3                 jnz     short loc_416CEA
.text:00416CE5                 mov     ecx, 0FE8h
.text:00416CEA
.text:00416CEA loc_416CEA:                             ; CODE XREF: .text:00416CE3↑j
.text:00416CEA                 mov     eax, [ebp+18h]
.text:00416CED                 mov     [esi+1Ch], ebx
.text:00416CF0                 mov     [esi+20h], eax
.text:00416CF3                 mov     [esi], ecx
.text:00416CF5                 lea     eax, [edx-1]
.text:00416CF8                 mov     [esi+24h], edi
.text:00416CFB                 mov     [esi+18h], eax
.text:00416CFE                 mov     al, [esi+28h]
.text:00416D01                 or      eax, 1
.text:00416D04                 mov     [esi+28h], al
.text:00416D07                 and     eax, 1
.text:00416D0A                 jz      short loc_416D58
.text:00416D0C                 push    eax
.text:00416D0D                 push    eax
.text:00416D0E                 push    ecx
.text:00416D0F                 push    edi
.text:00416D10
.text:00416D10 loc_416D10:                             ; CODE XREF: .text:00416D5C↓j
.text:00416D10                 call    ebx
.text:00416D12                 mov     ebx, eax
.text:00416D14                 add     esp, 10h
.text:00416D17                 mov     [esi+4], eax
.text:00416D1A                 test    eax, eax
.text:00416D1C                 jz      short loc_416D50
.text:00416D1E
.text:00416D1E loc_416D1E:                             ; CODE XREF: .text:00416D56↓j
.text:00416D1E                 lea     eax, [ebx+8]
.text:00416D21                 mov     ecx, [esi]
.text:00416D23                 mov     [esi+8], eax
.text:00416D26                 mov     [esi+0Ch], eax
.text:00416D29                 mov     eax, ebx
.text:00416D2B                 add     eax, ecx
.text:00416D2D                 mov     [ebx], eax
.text:00416D2F                 mov     [esi+10h], eax
.text:00416D32                 mov     dword ptr [ebx+4], 0
.text:00416D39                 and     byte ptr [esi+28h], 0F9h
.text:00416D3D                 lea     esp, [ebp-0Ch]
.text:00416D40                 mov     eax, 1
.text:00416D45                 pop     ebx
.text:00416D46                 pop     esi
.text:00416D47                 pop     edi
.text:00416D48                 pop     ebp
.text:00416D49                 retn
.text:00416D49 ; ---------------------------------------------------------------------------
.text:00416D4A                 align 10h
.text:00416D50
.text:00416D50 loc_416D50:                             ; CODE XREF: .text:00416D1C↑j
.text:00416D50                 call    off_41A0B0
.text:00416D56 ; ---------------------------------------------------------------------------
.text:00416D56                 jmp     short loc_416D1E
.text:00416D58 ; ---------------------------------------------------------------------------
.text:00416D58
.text:00416D58 loc_416D58:                             ; CODE XREF: .text:00416D0A↑j
.text:00416D58                 sub     esp, 0Ch
.text:00416D5B                 push    ecx
.text:00416D5C                 jmp     short loc_416D10
.text:00416D5C ; ---------------------------------------------------------------------------
.text:00416D5E                 align 10h
.text:00416D60
.text:00416D60 ; =============== S U B R O U T I N E =======================================
.text:00416D60
.text:00416D60 ; Attributes: bp-based frame
.text:00416D60
.text:00416D60 sub_416D60      proc near               ; CODE XREF: sub_4026E0+5EB↑p
.text:00416D60                                         ; sub_4026E0+884↑p ...
.text:00416D60
.text:00416D60 var_14          = dword ptr -14h
.text:00416D60 var_10          = dword ptr -10h
.text:00416D60 arg_0           = dword ptr  8
.text:00416D60 arg_4           = dword ptr  0Ch
.text:00416D60
.text:00416D60                 push    ebp
.text:00416D61                 mov     ebp, esp
.text:00416D63                 push    edi
.text:00416D64                 push    esi
.text:00416D65                 push    ebx
.text:00416D66                 sub     esp, 0Ch
.text:00416D69                 mov     esi, [ebp+arg_0]
.text:00416D6C                 mov     ebx, [ebp+arg_4]
.text:00416D6F                 mov     eax, [esi+4]
.text:00416D72                 mov     edi, [esi+0Ch]
.text:00416D75                 mov     [ebp+var_10], eax
.text:00416D78                 mov     eax, [esi+8]
.text:00416D7B                 sub     edi, eax
.text:00416D7D                 mov     edx, edi
.text:00416D7F                 mov     eax, edi
.text:00416D81                 sar     eax, 3
.text:00416D84                 add     edx, ebx
.text:00416D86                 lea     eax, [eax+edx+64h]
.text:00416D8A                 mov     [ebp+var_14], eax
.text:00416D8D                 mov     eax, [esi]
.text:00416D8F                 cmp     [ebp+var_14], eax
.text:00416D92                 jge     short loc_416D97
.text:00416D94                 mov     [ebp+var_14], eax
.text:00416D97
.text:00416D97 loc_416D97:                             ; CODE XREF: sub_416D60+32↑j
.text:00416D97                 test    byte ptr [esi+28h], 1
.text:00416D9B                 jz      loc_416E7E
.text:00416DA1                 mov     edx, [ebp+var_14]
.text:00416DA4                 push    ecx
.text:00416DA5                 push    ecx
.text:00416DA6                 push    edx
.text:00416DA7                 mov     eax, [esi+24h]
.text:00416DAA                 push    eax
.text:00416DAB
.text:00416DAB loc_416DAB:                             ; CODE XREF: sub_416D60+125↓j
.text:00416DAB                 call    dword ptr [esi+1Ch]
.text:00416DAE                 mov     ebx, eax
.text:00416DB0                 add     esp, 10h
.text:00416DB3                 test    eax, eax
.text:00416DB5                 jz      loc_416E73
.text:00416DBB
.text:00416DBB loc_416DBB:                             ; CODE XREF: sub_416D60+119↓j
.text:00416DBB                 mov     edx, [ebp+var_10]
.text:00416DBE                 mov     [esi+4], ebx
.text:00416DC1                 mov     [ebx+4], edx
.text:00416DC4                 mov     edx, [ebp+var_14]
.text:00416DC7                 lea     eax, [edx+ebx]
.text:00416DCA                 mov     [esi+10h], eax
.text:00416DCD                 mov     [ebx], eax
.text:00416DCF                 mov     eax, [esi+18h]
.text:00416DD2                 inc     eax
.text:00416DD3                 cmp     eax, 7
.text:00416DD6                 jle     loc_416E6C
.text:00416DDC                 mov     eax, edi
.text:00416DDE                 shr     eax, 2
.text:00416DE1                 mov     edx, eax
.text:00416DE3                 dec     edx
.text:00416DE4                 js      loc_416E67
.text:00416DEA                 mov     ecx, [esi+8]
.text:00416DED                 lea     esi, [esi+0]
.text:00416DF0
.text:00416DF0 loc_416DF0:                             ; CODE XREF: sub_416D60+98↓j
.text:00416DF0                 mov     eax, [ecx+edx*4]
.text:00416DF3                 mov     [ebx+edx*4+8], eax
.text:00416DF7                 dec     edx
.text:00416DF8                 jns     short loc_416DF0
.text:00416DFA
.text:00416DFA loc_416DFA:                             ; CODE XREF: sub_416D60+10A↓j
.text:00416DFA                 mov     eax, edi
.text:00416DFC                 and     eax, 0FFFFFFFCh
.text:00416DFF
.text:00416DFF loc_416DFF:                             ; CODE XREF: sub_416D60+111↓j
.text:00416DFF                 mov     edx, eax
.text:00416E01                 cmp     eax, edi
.text:00416E03                 jge     short loc_416E19
.text:00416E05
.text:00416E05 loc_416E05:                             ; CODE XREF: sub_416D60+B4↓j
.text:00416E05                 mov     al, [edx+ecx]
.text:00416E08                 mov     [ebx+edx+8], al
.text:00416E0C                 inc     edx
.text:00416E0D                 cmp     edx, edi
.text:00416E0F                 jge     short loc_416E16
.text:00416E11                 mov     ecx, [esi+8]
.text:00416E14                 jmp     short loc_416E05
.text:00416E16 ; ---------------------------------------------------------------------------
.text:00416E16
.text:00416E16 loc_416E16:                             ; CODE XREF: sub_416D60+AF↑j
.text:00416E16                 mov     ecx, [esi+8]
.text:00416E19
.text:00416E19 loc_416E19:                             ; CODE XREF: sub_416D60+A3↑j
.text:00416E19                 mov     eax, [ebp+var_10]
.text:00416E1C                 add     eax, 8
.text:00416E1F                 cmp     ecx, eax
.text:00416E21                 jz      short loc_416E3A
.text:00416E23
.text:00416E23 loc_416E23:                             ; CODE XREF: sub_416D60+DE↓j
.text:00416E23                                         ; sub_416D60+FC↓j
.text:00416E23                 and     byte ptr [esi+28h], 0FDh
.text:00416E27                 lea     eax, [ebx+8]
.text:00416E2A                 mov     [esi+8], eax
.text:00416E2D                 add     eax, edi
.text:00416E2F                 mov     [esi+0Ch], eax
.text:00416E32                 lea     esp, [ebp-0Ch]
.text:00416E35                 pop     ebx
.text:00416E36                 pop     esi
.text:00416E37                 pop     edi
.text:00416E38                 pop     ebp
.text:00416E39                 retn
.text:00416E3A ; ---------------------------------------------------------------------------
.text:00416E3A
.text:00416E3A loc_416E3A:                             ; CODE XREF: sub_416D60+C1↑j
.text:00416E3A                 test    byte ptr [esi+28h], 2
.text:00416E3E                 jnz     short loc_416E23
.text:00416E40                 mov     edx, [ebp+var_10]
.text:00416E43                 mov     eax, [edx+4]
.text:00416E46                 mov     [ebx+4], eax
.text:00416E49                 test    byte ptr [esi+28h], 1
.text:00416E4D                 jz      short loc_416E5E
.text:00416E4F                 push    eax
.text:00416E50                 push    eax
.text:00416E51                 push    edx
.text:00416E52                 mov     eax, [esi+24h]
.text:00416E55                 push    eax
.text:00416E56
.text:00416E56 loc_416E56:                             ; CODE XREF: sub_416D60+105↓j
.text:00416E56                 call    dword ptr [esi+20h]
.text:00416E59                 add     esp, 10h
.text:00416E5C                 jmp     short loc_416E23
.text:00416E5E ; ---------------------------------------------------------------------------
.text:00416E5E
.text:00416E5E loc_416E5E:                             ; CODE XREF: sub_416D60+ED↑j
.text:00416E5E                 sub     esp, 0Ch
.text:00416E61                 mov     eax, [ebp+var_10]
.text:00416E64                 push    eax
.text:00416E65                 jmp     short loc_416E56
.text:00416E67 ; ---------------------------------------------------------------------------
.text:00416E67
.text:00416E67 loc_416E67:                             ; CODE XREF: sub_416D60+84↑j
.text:00416E67                 mov     ecx, [esi+8]
.text:00416E6A                 jmp     short loc_416DFA
.text:00416E6C ; ---------------------------------------------------------------------------
.text:00416E6C
.text:00416E6C loc_416E6C:                             ; CODE XREF: sub_416D60+76↑j
.text:00416E6C                 xor     eax, eax
.text:00416E6E                 mov     ecx, [esi+8]
.text:00416E71                 jmp     short loc_416DFF
.text:00416E73 ; ---------------------------------------------------------------------------
.text:00416E73
.text:00416E73 loc_416E73:                             ; CODE XREF: sub_416D60+55↑j
.text:00416E73                 call    off_41A0B0
.text:00416E79 ; ---------------------------------------------------------------------------
.text:00416E79                 jmp     loc_416DBB
.text:00416E7E ; ---------------------------------------------------------------------------
.text:00416E7E
.text:00416E7E loc_416E7E:                             ; CODE XREF: sub_416D60+3B↑j
.text:00416E7E                 sub     esp, 0Ch
.text:00416E81                 mov     eax, [ebp+var_14]
.text:00416E84                 push    eax
.text:00416E85                 jmp     loc_416DAB
.text:00416E85 sub_416D60      endp ; sp-analysis failed
.text:00416E85
.text:00416E85 ; ---------------------------------------------------------------------------
.text:00416E8A                 align 10h
.text:00416E90                 push    ebp
.text:00416E91                 mov     ebp, esp
.text:00416E93                 mov     eax, [ebp+8]
.text:00416E96                 mov     edx, [ebp+0Ch]
.text:00416E99                 mov     eax, [eax+4]
.text:00416E9C                 test    eax, eax
.text:00416E9E                 jz      short loc_416EB3
.text:00416EA0                 cmp     eax, edx
.text:00416EA2                 jb      short loc_416EBF
.text:00416EA4
.text:00416EA4 loc_416EA4:                             ; CODE XREF: .text:00416EAD↓j
.text:00416EA4                                         ; .text:00416EB1↓j ...
.text:00416EA4                 mov     eax, [eax+4]
.text:00416EA7                 test    eax, eax
.text:00416EA9                 jz      short loc_416EB3
.text:00416EAB                 cmp     eax, edx
.text:00416EAD                 jnb     short loc_416EA4
.text:00416EAF                 cmp     [eax], edx
.text:00416EB1                 jb      short loc_416EA4
.text:00416EB3
.text:00416EB3 loc_416EB3:                             ; CODE XREF: .text:00416E9E↑j
.text:00416EB3                                         ; .text:00416EA9↑j ...
.text:00416EB3                 test    eax, eax
.text:00416EB5                 pop     ebp
.text:00416EB6                 setnz   al
.text:00416EB9                 and     eax, 0FFh
.text:00416EBE                 retn
.text:00416EBF ; ---------------------------------------------------------------------------
.text:00416EBF
.text:00416EBF loc_416EBF:                             ; CODE XREF: .text:00416EA2↑j
.text:00416EBF                 cmp     [eax], edx
.text:00416EC1                 jb      short loc_416EA4
.text:00416EC3                 jmp     short loc_416EB3
.text:00416EC3 ; ---------------------------------------------------------------------------
.text:00416EC5                 align 10h
.text:00416ED0                 push    ebp
.text:00416ED1                 mov     ebp, esp
.text:00416ED3                 push    edi
.text:00416ED4                 push    esi
.text:00416ED5                 push    ebx
.text:00416ED6                 sub     esp, 0Ch
.text:00416ED9                 mov     ebx, [ebp+8]
.text:00416EDC                 mov     edi, [ebp+0Ch]
.text:00416EDF                 mov     edx, [ebx+4]
.text:00416EE2                 test    edx, edx
.text:00416EE4                 jz      short loc_416F2E
.text:00416EE6                 cmp     edx, edi
.text:00416EE8                 jb      short loc_416F3A
.text:00416EEA                 lea     esi, [esi+0]
.text:00416EF0
.text:00416EF0 loc_416EF0:                             ; CODE XREF: .text:00416F12↓j
.text:00416EF0                                         ; .text:00416F16↓j ...
.text:00416EF0                 mov     esi, [edx+4]
.text:00416EF3                 test    byte ptr [ebx+28h], 1
.text:00416EF7                 jz      short loc_416F34
.text:00416EF9                 push    eax
.text:00416EFA                 push    eax
.text:00416EFB                 push    edx
.text:00416EFC                 mov     eax, [ebx+24h]
.text:00416EFF                 push    eax
.text:00416F00
.text:00416F00 loc_416F00:                             ; CODE XREF: .text:00416F38↓j
.text:00416F00                 call    dword ptr [ebx+20h]
.text:00416F03                 add     esp, 10h
.text:00416F06                 mov     edx, esi
.text:00416F08                 or      byte ptr [ebx+28h], 2
.text:00416F0C                 test    esi, esi
.text:00416F0E                 jz      short loc_416F2E
.text:00416F10                 cmp     esi, edi
.text:00416F12                 jnb     short loc_416EF0
.text:00416F14                 cmp     [esi], edi
.text:00416F16                 jb      short loc_416EF0
.text:00416F18
.text:00416F18 loc_416F18:                             ; CODE XREF: .text:00416F3E↓j
.text:00416F18                 mov     [ebx+0Ch], edi
.text:00416F1B                 mov     [ebx+8], edi
.text:00416F1E                 mov     eax, [edx]
.text:00416F20                 mov     [ebx+4], edx
.text:00416F23                 mov     [ebx+10h], eax
.text:00416F26
.text:00416F26 loc_416F26:                             ; CODE XREF: .text:00416F30↓j
.text:00416F26                 lea     esp, [ebp-0Ch]
.text:00416F29                 pop     ebx
.text:00416F2A                 pop     esi
.text:00416F2B                 pop     edi
.text:00416F2C                 pop     ebp
.text:00416F2D                 retn
.text:00416F2E ; ---------------------------------------------------------------------------
.text:00416F2E
.text:00416F2E loc_416F2E:                             ; CODE XREF: .text:00416EE4↑j
.text:00416F2E                                         ; .text:00416F0E↑j
.text:00416F2E                 test    edi, edi
.text:00416F30                 jz      short loc_416F26
.text:00416F32                 jmp     short loc_416F40
.text:00416F34 ; ---------------------------------------------------------------------------
.text:00416F34
.text:00416F34 loc_416F34:                             ; CODE XREF: .text:00416EF7↑j
.text:00416F34                 sub     esp, 0Ch
.text:00416F37                 push    edx
.text:00416F38                 jmp     short loc_416F00
.text:00416F3A ; ---------------------------------------------------------------------------
.text:00416F3A
.text:00416F3A loc_416F3A:                             ; CODE XREF: .text:00416EE8↑j
.text:00416F3A                 cmp     [edx], edi
.text:00416F3C                 jb      short loc_416EF0
.text:00416F3E                 jmp     short loc_416F18
.text:00416F40 ; ---------------------------------------------------------------------------
.text:00416F40
.text:00416F40 loc_416F40:                             ; CODE XREF: .text:00416F32↑j
.text:00416F40                 call    abort
.text:00416F40 ; ---------------------------------------------------------------------------
.text:00416F45                 align 10h
.text:00416F50
.text:00416F50 ; =============== S U B R O U T I N E =======================================
.text:00416F50
.text:00416F50 ; Attributes: bp-based frame
.text:00416F50
.text:00416F50 sub_416F50      proc near               ; CODE XREF: sub_4022E0+16↑p
.text:00416F50                                         ; sub_4022E0+29↑p ...
.text:00416F50
.text:00416F50 arg_0           = dword ptr  8
.text:00416F50 arg_4           = dword ptr  0Ch
.text:00416F50
.text:00416F50                 push    ebp
.text:00416F51                 mov     ebp, esp
.text:00416F53                 push    edi
.text:00416F54                 push    esi
.text:00416F55                 push    ebx
.text:00416F56                 sub     esp, 0Ch
.text:00416F59                 mov     ebx, [ebp+arg_0]
.text:00416F5C                 mov     edi, [ebp+arg_4]
.text:00416F5F                 mov     edx, [ebx+4]
.text:00416F62                 test    edx, edx
.text:00416F64                 jz      short loc_416FAE
.text:00416F66                 cmp     edx, edi
.text:00416F68                 jb      short loc_416FBA
.text:00416F6A                 lea     esi, [esi+0]
.text:00416F70
.text:00416F70 loc_416F70:                             ; CODE XREF: sub_416F50+42↓j
.text:00416F70                                         ; sub_416F50+46↓j ...
.text:00416F70                 mov     esi, [edx+4]
.text:00416F73                 test    byte ptr [ebx+28h], 1
.text:00416F77                 jz      short loc_416FB4
.text:00416F79                 push    eax
.text:00416F7A                 push    eax
.text:00416F7B                 push    edx
.text:00416F7C                 mov     eax, [ebx+24h]
.text:00416F7F                 push    eax
.text:00416F80
.text:00416F80 loc_416F80:                             ; CODE XREF: sub_416F50+68↓j
.text:00416F80                 call    dword ptr [ebx+20h]
.text:00416F83                 add     esp, 10h
.text:00416F86                 mov     edx, esi
.text:00416F88                 or      byte ptr [ebx+28h], 2
.text:00416F8C                 test    esi, esi
.text:00416F8E                 jz      short loc_416FAE
.text:00416F90                 cmp     esi, edi
.text:00416F92                 jnb     short loc_416F70
.text:00416F94                 cmp     [esi], edi
.text:00416F96                 jb      short loc_416F70
.text:00416F98
.text:00416F98 loc_416F98:                             ; CODE XREF: sub_416F50+6E↓j
.text:00416F98                 mov     [ebx+0Ch], edi
.text:00416F9B                 mov     [ebx+8], edi
.text:00416F9E                 mov     eax, [edx]
.text:00416FA0                 mov     [ebx+4], edx
.text:00416FA3                 mov     [ebx+10h], eax
.text:00416FA6
.text:00416FA6 loc_416FA6:                             ; CODE XREF: sub_416F50+60↓j
.text:00416FA6                 lea     esp, [ebp-0Ch]
.text:00416FA9                 pop     ebx
.text:00416FAA                 pop     esi
.text:00416FAB                 pop     edi
.text:00416FAC                 pop     ebp
.text:00416FAD                 retn
.text:00416FAE ; ---------------------------------------------------------------------------
.text:00416FAE
.text:00416FAE loc_416FAE:                             ; CODE XREF: sub_416F50+14↑j
.text:00416FAE                                         ; sub_416F50+3E↑j
.text:00416FAE                 test    edi, edi
.text:00416FB0                 jz      short loc_416FA6
.text:00416FB2                 jmp     short loc_416FC0
.text:00416FB4 ; ---------------------------------------------------------------------------
.text:00416FB4
.text:00416FB4 loc_416FB4:                             ; CODE XREF: sub_416F50+27↑j
.text:00416FB4                 sub     esp, 0Ch
.text:00416FB7                 push    edx
.text:00416FB8                 jmp     short loc_416F80
.text:00416FBA ; ---------------------------------------------------------------------------
.text:00416FBA
.text:00416FBA loc_416FBA:                             ; CODE XREF: sub_416F50+18↑j
.text:00416FBA                 cmp     [edx], edi
.text:00416FBC                 jb      short loc_416F70
.text:00416FBE                 jmp     short loc_416F98
.text:00416FC0 ; ---------------------------------------------------------------------------
.text:00416FC0
.text:00416FC0 loc_416FC0:                             ; CODE XREF: sub_416F50+62↑j
.text:00416FC0                 call    abort
.text:00416FC0 sub_416F50      endp
.text:00416FC0
.text:00416FC0 ; ---------------------------------------------------------------------------
.text:00416FC5                 align 10h
.text:00416FD0                 push    ebp
.text:00416FD1                 xor     ecx, ecx
.text:00416FD3                 mov     ebp, esp
.text:00416FD5                 mov     eax, [ebp+8]
.text:00416FD8                 mov     edx, [eax+4]
.text:00416FDB                 test    edx, edx
.text:00416FDD                 jz      short loc_416FED
.text:00416FDF                 nop
.text:00416FE0
.text:00416FE0 loc_416FE0:                             ; CODE XREF: .text:00416FEB↓j
.text:00416FE0                 mov     eax, [edx]
.text:00416FE2                 sub     eax, edx
.text:00416FE4                 mov     edx, [edx+4]
.text:00416FE7                 add     ecx, eax
.text:00416FE9                 test    edx, edx
.text:00416FEB                 jnz     short loc_416FE0
.text:00416FED
.text:00416FED loc_416FED:                             ; CODE XREF: .text:00416FDD↑j
.text:00416FED                 mov     eax, ecx
.text:00416FEF                 pop     ebp
.text:00416FF0                 retn
.text:00416FF0 ; ---------------------------------------------------------------------------
.text:00416FF1 aMemoryExhauste_0 db 'memory exhausted',0Ah,0
.text:00416FF1                                         ; DATA XREF: sub_417010+12↓o
.text:00417003                 align 10h
.text:00417010
.text:00417010 ; =============== S U B R O U T I N E =======================================
.text:00417010
.text:00417010 ; Attributes: noreturn bp-based frame
.text:00417010
.text:00417010 sub_417010      proc near               ; CODE XREF: sub_416C30:loc_416CB0↑p
.text:00417010                                         ; .text:loc_416D50↑p ...
.text:00417010                 push    ebp
.text:00417011                 mov     ebp, esp
.text:00417013                 push    ecx
.text:00417014                 push    ecx
.text:00417015                 mov     eax, ds:_iob
.text:0041701A                 add     eax, 40h ; '@'
.text:0041701D                 push    eax             ; Stream
.text:0041701E                 push    11h             ; ElementCount
.text:00417020                 push    1               ; ElementSize
.text:00417022                 push    offset aMemoryExhauste_0 ; "memory exhausted\n"
.text:00417027                 call    fwrite
.text:0041702C                 mov     eax, Code
.text:00417031                 pop     edx
.text:00417032                 push    eax             ; Code
.text:00417033                 call    exit
.text:00417033 sub_417010      endp
.text:00417033
.text:00417033 ; ---------------------------------------------------------------------------
.text:00417038                 align 10h
.text:00417040
.text:00417040 ; =============== S U B R O U T I N E =======================================
.text:00417040
.text:00417040 ; Attributes: thunk
.text:00417040
.text:00417040 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:00417040 OleInitialize   proc near               ; CODE XREF: sub_4131D0+1A↑p
.text:00417040                 jmp     ds:__imp_OleInitialize
.text:00417040 OleInitialize   endp
.text:00417040
.text:00417040 ; ---------------------------------------------------------------------------
.text:00417046                 align 10h
.text:00417050
.text:00417050 ; =============== S U B R O U T I N E =======================================
.text:00417050
.text:00417050 ; Attributes: thunk
.text:00417050
.text:00417050 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:00417050 CoCreateInstance proc near              ; CODE XREF: sub_4131D0+52↑p
.text:00417050
.text:00417050 rclsid          = dword ptr  4
.text:00417050 pUnkOuter       = dword ptr  8
.text:00417050 dwClsContext    = dword ptr  0Ch
.text:00417050 riid            = dword ptr  10h
.text:00417050 ppv             = dword ptr  14h
.text:00417050
.text:00417050                 jmp     ds:__imp_CoCreateInstance
.text:00417050 CoCreateInstance endp
.text:00417050
.text:00417050 ; ---------------------------------------------------------------------------
.text:00417056                 align 10h
.text:00417060
.text:00417060 ; =============== S U B R O U T I N E =======================================
.text:00417060
.text:00417060 ; Attributes: thunk
.text:00417060
.text:00417060 ; void __stdcall CoUninitialize()
.text:00417060 CoUninitialize  proc near               ; CODE XREF: sub_4131D0+14E↑p
.text:00417060                                         ; sub_4131D0+16D↑p
.text:00417060                 jmp     ds:__imp_CoUninitialize
.text:00417060 CoUninitialize  endp
.text:00417060
.text:00417060 ; ---------------------------------------------------------------------------
.text:00417066                 align 10h
.text:00417070                 add     al, 0BAh ; 'º'
.text:00417072                 retf
.text:00417072 ; ---------------------------------------------------------------------------
.text:00417073                 db 7Eh
.text:00417074                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:00417074                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:00417074                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:00417074                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:00417074                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:00417074                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:00417074                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:00417074                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:00417074                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:00417074                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:00417074                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:00417074                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:00417074                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:00417074                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:00417074                 dd 0C4426C00h, 330h, 0
.text:004171A8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004171A8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:004171A8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:004171A8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:004171F8                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004171F8                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:004171F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:004171F8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:004171F8                 dd 0BA94B00h, 1Bh, 0
.text:00417258                 dd 0C0h, 46000000h, 1Ch, 0
.text:00417268                 dd 0C0h, 46000000h, 331h, 0
.text:00417278                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417278                 dd 312h, 0
.text:00417298                 dd 0C0h, 46000000h, 30Eh, 0
.text:004172A8                 dd 0C0h, 46000000h, 30Dh, 0
.text:004172B8                 dd 0C0h, 46000000h, 311h, 0
.text:004172C8                 dd 0C0h, 46000000h, 313h, 0
.text:004172D8                 dd 0C0h, 46000000h, 30Ch, 0
.text:004172E8                 dd 0C0h, 46000000h, 30Fh, 0
.text:004172F8                 dd 0C0h, 46000000h, 310h, 0
.text:00417308                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417308                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:00417338                 dd 0C0h, 46000000h, 319h, 0
.text:00417348                 dd 0C0h, 46000000h, 315h, 0
.text:00417358                 dd 0C0h, 46000000h, 316h, 0
.text:00417368                 dd 0C0h, 46000000h, 315h, 0
.text:00417378                 dd 0C0h, 46000000h, 2E005h, 0
.text:00417388                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:00417388                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:00417388                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:004173C8                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:004173C8                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:004173C8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:004173C8                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:004173C8                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:004173C8                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:004173C8                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:004173C8                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:004173C8                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:004173C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:004173C8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:004173C8                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004173C8                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:004173C8                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:004173C8                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:004173C8                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:004173C8                 dd 2DE81h, 0
.text:00417518                 dd 0C0h, 46000000h, 4 dup(0)
.text:00417530                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:00417530                 dd 0
.text:00417548                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417548                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:00417548                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:00417548                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:00417548                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:00417548                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:00417548                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:00417548                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:00417548                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:00417548                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:00417548                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:00417548                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:00417548                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:00417548                 dd 10Fh, 0
.text:00417658                 dd 0C0h, 46000000h, 125h, 0
.text:00417668                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00417668                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:00417668                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:004176A8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:004176A8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:004176A8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:004176A8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:004176A8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:00417708                 dd 0C0h, 46000000h, 2E012h, 0
.text:00417718                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:00417718                 dd 140h, 0
.text:00417738                 dd 0C0h, 46000000h, 1, 0
.text:00417748                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:00417748                 dd 71D3400h, 13Dh, 0
.text:00417768                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00417768                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:00417768                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:00417768                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:004177B8                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:004177B8                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:004177B8                 dd 20405h, 0
.text:004177E8                 dd 0C0h, 46000000h, 2040Eh, 0
.text:004177F8                 dd 0C0h, 46000000h, 20406h, 0
.text:00417808                 dd 0C0h, 46000000h, 2040Fh, 0
.text:00417818                 dd 0C0h, 46000000h, 110h, 0
.text:00417828                 dd 0C0h, 46000000h, 10Eh, 0
.text:00417838                 dd 0C0h, 46000000h, 123h, 0
.text:00417848                 dd 0C0h, 46000000h, 124h, 0
.text:00417858                 dd 0C0h, 46000000h, 13h, 0
.text:00417868                 dd 0C0h, 46000000h, 14h, 0
.text:00417878                 dd 0C0h, 46000000h, 15h, 0
.text:00417888                 dd 0C0h, 46000000h, 20400h, 0
.text:00417898                 dd 0C0h, 46000000h, 121h, 0
.text:004178A8                 dd 0C0h, 46000000h, 122h, 0
.text:004178B8                 dd 0C0h, 46000000h, 2E011h, 0
.text:004178C8                 dd 0C0h, 46000000h, 108h, 0
.text:004178D8                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:004178D8                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:004178D8                 dd 103h, 0
.text:00417908                 dd 0C0h, 46000000h, 2E000h, 0
.text:00417918                 dd 0C0h, 46000000h, 106h, 0
.text:00417928                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417928                 dd 107h, 0
.text:00417948                 dd 0C0h, 46000000h, 102h, 0
.text:00417958                 dd 0C0h, 46000000h, 104h, 0
.text:00417968                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:00417968                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:00417968                 dd 105h, 0
.text:00417998                 dd 0C0h, 46000000h, 13Bh, 0
.text:004179A8                 dd 0C0h, 46000000h, 139h, 0
.text:004179B8                 dd 0C0h, 46000000h, 0Dh, 0
.text:004179C8                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004179C8                 dd 101h, 0
.text:004179E8                 dd 0C0h, 46000000h, 100h, 0
.text:004179F8                 dd 0C0h, 46000000h, 20404h, 0
.text:00417A08                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:00417A08                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:00417A38                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:00417A38                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:00417A38                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:00417A38                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:00417A88                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417A88                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:00417A88                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:00417A88                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:00417A88                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:00417A88                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:00417B08                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:00417B08                 dd 0Ah, 0
.text:00417B28                 dd 0C0h, 46000000h, 2, 0
.text:00417B38                 dd 0C0h, 46000000h, 1Dh, 0
.text:00417B48                 dd 0C0h, 46000000h, 3, 0
.text:00417B58                 dd 0C0h, 46000000h, 16h, 0
.text:00417B68                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:00417B68                 dd 1608D74Fh, 0Fh, 0
.text:00417B88                 dd 0C0h, 46000000h, 20h, 0
.text:00417B98                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:00417B98                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:00417B98                 dd 0
.text:00417BC8                 dd 0C0h, 46000000h, 11Eh, 0
.text:00417BD8                 dd 0C0h, 46000000h, 128h, 0
.text:00417BE8                 dd 0C0h, 46000000h, 129h, 0
.text:00417BF8                 dd 0C0h, 46000000h, 118h, 0
.text:00417C08                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:00417C08                 dd 70474000h, 11Bh, 0
.text:00417C28                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:00417C28                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00417C28                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:00417C28                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:00417C28                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:00417C88                 dd 0C0h, 46000000h, 116h, 0
.text:00417C98                 dd 0C0h, 46000000h, 113h, 0
.text:00417CA8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:00417CA8                 dd 119h, 0
.text:00417CC8                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:00417CC8                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:00417CC8                 dd 0
.text:00417CF8                 dd 0C0h, 46000000h, 11Ch, 0
.text:00417D08                 dd 0C0h, 46000000h, 11Dh, 0
.text:00417D18                 dd 0C0h, 46000000h, 11Fh, 0
.text:00417D28                 dd 0C0h, 46000000h, 112h, 0
.text:00417D38                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:00417D38                 dd 18E6000h, 120h, 0
.text:00417D58                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:00417D58                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:00417D58                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:00417D98                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:00417D98                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:00417DC8                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00417DC8                 dd 11Ah, 0
.text:00417DE8                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:00417DE8                 dd 10Ch, 0
.text:00417E08                 dd 0C0h, 46000000h
.text:00417E10 dword_417E10    dd 10Bh, 0              ; DATA XREF: sub_4131D0+75↑o
.text:00417E18                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:00417E18                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:00417E18                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:00417E18                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:00417E68                 dd 0C0h, 46000000h, 109h, 0
.text:00417E78                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:00417E78                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:00417E78                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:00417E78                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:00417E78                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:00417E78                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:00417E78                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:00417E78                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:00417E78                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:00417E78                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:00417E78                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:00417F58                 dd 0C0h, 46000000h, 138h, 0
.text:00417F68                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:00417F68                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:00417F68                 dd 27h, 0
.text:00417F98                 dd 0C0h, 46000000h, 8, 0
.text:00417FA8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:00417FA8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:00417FA8                 dd 20D00h, 0
.text:00417FD8                 dd 0C0h, 46000000h, 20D03h, 0
.text:00417FE8                 dd 0C0h, 46000000h, 12h, 0
.text:00417FF8                 dd 0C0h, 46000000h, 4, 0
.text:00418008                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00418008                 dd 7, 0
.text:00418028                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00418028                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:00418058                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:00418058                 dd 126h, 0
.text:00418078                 dd 0C0h, 46000000h, 10h, 0
.text:00418088                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:00418088                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:004180B8                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:004180B8                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:004180B8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:004180F8                 dd 0C0h, 46000000h, 0Bh, 0
.text:00418108                 dd 0C0h, 46000000h, 0Ch, 0
.text:00418118                 dd 0C0h, 46000000h, 26h, 0
.text:00418128                 dd 0C0h, 46000000h, 6, 0
.text:00418138                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:00418138                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:00418138                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:00418178                 dd 0C0h, 46000000h, 20403h, 0
.text:00418188                 dd 0C0h, 46000000h, 20401h, 0
.text:00418198                 dd 0C0h, 46000000h, 20412h, 0
.text:004181A8                 dd 0C0h, 46000000h, 20402h, 0
.text:004181B8                 dd 0C0h, 46000000h, 20411h, 0
.text:004181C8                 dd 0C0h, 46000000h, 2 dup(0)
.text:004181D8                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:004181D8                 dd 10Dh, 0
.text:004181F8                 dd 0C0h, 46000000h, 127h, 0
.text:00418208                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:00418208                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:00418208                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:00418248                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:00418248                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:00418248                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:00418288                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:00418298                 dd 0C0h, 46000000h, 2DE18h, 0
.text:004182A8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:004182B8                 dd 0C0h, 46000000h, 2DE19h, 0
.text:004182C8                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:004182D8                 dd 0C0h, 46000000h, 2DE12h, 0
.text:004182E8                 dd 0C0h, 46000000h, 2DE21h, 0
.text:004182F8                 dd 0C0h, 46000000h, 2DE01h, 0
.text:00418308                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:00418318                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:00418328                 dd 0C0h, 46000000h, 2DE02h, 0
.text:00418338                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:00418348                 dd 0C0h, 46000000h, 2DE04h, 0
.text:00418358                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:00418368                 dd 0C0h, 46000000h, 2DE05h, 0
.text:00418378                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:00418388                 dd 0C0h, 46000000h, 2DE06h, 0
.text:00418398                 dd 0C0h, 46000000h, 2DE13h, 0
.text:004183A8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:004183B8                 dd 0C0h, 46000000h, 2DE22h, 0
.text:004183C8                 dd 0C0h, 46000000h, 2DE09h, 0
.text:004183D8                 dd 0C0h, 46000000h, 2DE23h, 0
.text:004183E8                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:004183F8                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:00418408                 dd 0C0h, 46000000h, 2DE11h, 0
.text:00418418                 dd 0C0h, 46000000h, 2DE15h, 0
.text:00418428                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:00418438                 dd 0C0h, 46000000h, 2DE16h, 0
.text:00418448                 dd 0C0h, 46000000h, 2DE20h, 0
.text:00418458                 dd 0C0h, 46000000h, 2DE07h, 0
.text:00418468                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:00418478                 dd 0C0h, 46000000h, 2DE17h, 0
.text:00418488                 dd 0C0h, 46000000h, 2DE14h, 0
.text:00418498                 dd 0C0h, 46000000h, 2DE03h, 0
.text:004184A8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:004184B8                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:004184B8                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:004184E0
.text:004184E0 ; =============== S U B R O U T I N E =======================================
.text:004184E0
.text:004184E0 ; Attributes: thunk
.text:004184E0
.text:004184E0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:004184E0 mbrtowc         proc near               ; CODE XREF: sub_407500+757↑p
.text:004184E0
.text:004184E0 DstCh           = dword ptr  4
.text:004184E0 SrcCh           = dword ptr  8
.text:004184E0 SizeInBytes     = dword ptr  0Ch
.text:004184E0 State           = dword ptr  10h
.text:004184E0
.text:004184E0                 jmp     ds:__imp_mbrtowc
.text:004184E0 mbrtowc         endp
.text:004184E0
.text:004184E0 ; ---------------------------------------------------------------------------
.text:004184E6                 align 10h
.text:004184F0
.text:004184F0 ; =============== S U B R O U T I N E =======================================
.text:004184F0
.text:004184F0 ; Attributes: thunk
.text:004184F0
.text:004184F0 ; wint_t __cdecl btowc(int Ch)
.text:004184F0 btowc           proc near               ; CODE XREF: sub_40C4F0+1F73↑p
.text:004184F0                 jmp     ds:__imp_btowc
.text:004184F0 btowc           endp
.text:004184F0
.text:004184F0 ; ---------------------------------------------------------------------------
.text:004184F6                 align 10h
.text:00418500
.text:00418500 ; =============== S U B R O U T I N E =======================================
.text:00418500
.text:00418500 ; Attributes: thunk
.text:00418500
.text:00418500 ; wctype_t __cdecl wctype(const char *name)
.text:00418500 wctype          proc near               ; CODE XREF: sub_40C4F0+1F29↑p
.text:00418500
.text:00418500 name            = dword ptr  4
.text:00418500
.text:00418500                 jmp     ds:__imp_wctype
.text:00418500 wctype          endp
.text:00418500
.text:00418500 ; ---------------------------------------------------------------------------
.text:00418506                 align 10h
.text:00418510
.text:00418510 ; =============== S U B R O U T I N E =======================================
.text:00418510
.text:00418510 ; Attributes: bp-based frame
.text:00418510
.text:00418510 sub_418510      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00418510                 push    ebp
.text:00418511                 mov     ecx, offset unk_41B000
.text:00418516                 cmp     ecx, offset unk_41B000
.text:0041851C                 mov     ebp, esp
.text:0041851E                 jnb     short loc_418536
.text:00418520
.text:00418520 loc_418520:                             ; CODE XREF: sub_418510+24↓j
.text:00418520                 mov     edx, [ecx+4]
.text:00418523                 mov     eax, [ecx]
.text:00418525                 add     ecx, 8
.text:00418528                 add     [edx+400000h], eax
.text:0041852E                 cmp     ecx, offset unk_41B000
.text:00418534                 jb      short loc_418520
.text:00418536
.text:00418536 loc_418536:                             ; CODE XREF: sub_418510+E↑j
.text:00418536                 pop     ebp
.text:00418537                 retn
.text:00418537 sub_418510      endp
.text:00418537
.text:00418537 ; ---------------------------------------------------------------------------
.text:00418538                 align 10h
.text:00418540
.text:00418540 ; =============== S U B R O U T I N E =======================================
.text:00418540
.text:00418540 ; Attributes: bp-based frame
.text:00418540
.text:00418540 sub_418540      proc near               ; CODE XREF: sub_401080+16↑p
.text:00418540                                         ; TopLevelExceptionFilter+D7↑p
.text:00418540                 push    ebp
.text:00418541                 mov     ebp, esp
.text:00418543                 fninit
.text:00418545                 pop     ebp
.text:00418546                 retn
.text:00418546 sub_418540      endp
.text:00418546
.text:00418546 ; ---------------------------------------------------------------------------
.text:00418547                 align 10h
.text:00418550
.text:00418550 ; =============== S U B R O U T I N E =======================================
.text:00418550
.text:00418550 ; Attributes: bp-based frame
.text:00418550
.text:00418550 ; void __cdecl sub_418550()
.text:00418550 sub_418550      proc near               ; DATA XREF: .text:loc_418599↓o
.text:00418550                                         ; sub_4185E0:loc_41860E↓o
.text:00418550                 push    ebp
.text:00418551                 mov     ebp, esp
.text:00418553                 sub     esp, 8
.text:00418556                 mov     eax, off_41A0F4
.text:0041855B                 mov     edx, [eax]
.text:0041855D                 test    edx, edx
.text:0041855F                 jnz     short loc_418565
.text:00418561
.text:00418561 loc_418561:                             ; CODE XREF: sub_418550+2C↓j
.text:00418561                 mov     esp, ebp
.text:00418563                 pop     ebp
.text:00418564                 retn
.text:00418565 ; ---------------------------------------------------------------------------
.text:00418565
.text:00418565 loc_418565:                             ; CODE XREF: sub_418550+F↑j
.text:00418565                                         ; sub_418550+2A↓j
.text:00418565                 call    dword ptr [eax]
.text:00418567                 mov     edx, off_41A0F4
.text:0041856D                 mov     ecx, [edx+4]
.text:00418570                 lea     eax, [edx+4]
.text:00418573                 mov     off_41A0F4, eax
.text:00418578                 test    ecx, ecx
.text:0041857A                 jnz     short loc_418565
.text:0041857C                 jmp     short loc_418561
.text:0041857C sub_418550      endp
.text:0041857C
.text:0041857C ; ---------------------------------------------------------------------------
.text:0041857E                 align 10h
.text:00418580                 push    ebp
.text:00418581                 mov     ebp, esp
.text:00418583                 sub     esp, 8
.text:00418586                 mov     [ebp-4], ebx
.text:00418589                 mov     eax, ds:dword_4193E0
.text:0041858E                 cmp     eax, 0FFFFFFFFh
.text:00418591                 jz      short loc_4185BC
.text:00418593
.text:00418593 loc_418593:                             ; CODE XREF: .text:004185C6↓j
.text:00418593                                         ; .text:004185D9↓j
.text:00418593                 test    eax, eax
.text:00418595                 mov     ebx, eax
.text:00418597                 jnz     short loc_4185B0
.text:00418599
.text:00418599 loc_418599:                             ; CODE XREF: .text:004185BA↓j
.text:00418599                 mov     dword ptr [esp], offset sub_418550
.text:004185A0                 call    sub_401040
.text:004185A5                 mov     ebx, [ebp-4]
.text:004185A8                 mov     esp, ebp
.text:004185AA                 pop     ebp
.text:004185AB                 retn
.text:004185AB ; ---------------------------------------------------------------------------
.text:004185AC                 align 10h
.text:004185B0
.text:004185B0 loc_4185B0:                             ; CODE XREF: .text:00418597↑j
.text:004185B0                                         ; .text:004185B8↓j
.text:004185B0                 call    ds:dword_4193E0[ebx*4]
.text:004185B7                 dec     ebx
.text:004185B8                 jnz     short loc_4185B0
.text:004185BA                 jmp     short loc_418599
.text:004185BC ; ---------------------------------------------------------------------------
.text:004185BC
.text:004185BC loc_4185BC:                             ; CODE XREF: .text:00418591↑j
.text:004185BC                 mov     ecx, ds:dword_4193E4
.text:004185C2                 xor     eax, eax
.text:004185C4                 test    ecx, ecx
.text:004185C6                 jz      short loc_418593
.text:004185C8                 mov     edx, offset dword_4193E0
.text:004185CD                 lea     esi, [esi+0]
.text:004185D0
.text:004185D0 loc_4185D0:                             ; CODE XREF: .text:004185D7↓j
.text:004185D0                 inc     eax
.text:004185D1                 mov     ecx, [edx+eax*4+4]
.text:004185D5                 test    ecx, ecx
.text:004185D7                 jnz     short loc_4185D0
.text:004185D9                 jmp     short loc_418593
.text:004185D9 ; ---------------------------------------------------------------------------
.text:004185DB                 align 10h
.text:004185E0
.text:004185E0 ; =============== S U B R O U T I N E =======================================
.text:004185E0
.text:004185E0 ; Attributes: bp-based frame
.text:004185E0
.text:004185E0 sub_4185E0      proc near               ; CODE XREF: sub_4019A0+1B↑p
.text:004185E0
.text:004185E0 var_8           = dword ptr -8
.text:004185E0 var_4           = dword ptr -4
.text:004185E0
.text:004185E0                 push    ebp
.text:004185E1                 mov     ebp, esp
.text:004185E3                 sub     esp, 8
.text:004185E6                 mov     [ebp+var_4], ebx
.text:004185E9                 mov     edx, dword_41A0F0
.text:004185EF                 test    edx, edx
.text:004185F1                 jnz     short loc_41861A
.text:004185F3                 mov     eax, ds:dword_4193E0
.text:004185F8                 mov     edx, 1
.text:004185FD                 mov     dword_41A0F0, edx
.text:00418603                 cmp     eax, 0FFFFFFFFh
.text:00418606                 jz      short loc_41862D
.text:00418608
.text:00418608 loc_418608:                             ; CODE XREF: sub_4185E0+57↓j
.text:00418608                                         ; sub_4185E0+69↓j
.text:00418608                 test    eax, eax
.text:0041860A                 mov     ebx, eax
.text:0041860C                 jnz     short loc_418621
.text:0041860E
.text:0041860E loc_41860E:                             ; CODE XREF: sub_4185E0+4B↓j
.text:0041860E                 mov     [esp+8+var_8], offset sub_418550 ; void (__cdecl *)()
.text:00418615                 call    sub_401040
.text:0041861A
.text:0041861A loc_41861A:                             ; CODE XREF: sub_4185E0+11↑j
.text:0041861A                 mov     ebx, [ebp+var_4]
.text:0041861D                 mov     esp, ebp
.text:0041861F                 pop     ebp
.text:00418620                 retn
.text:00418621 ; ---------------------------------------------------------------------------
.text:00418621
.text:00418621 loc_418621:                             ; CODE XREF: sub_4185E0+2C↑j
.text:00418621                                         ; sub_4185E0+49↓j
.text:00418621                 call    ds:dword_4193E0[ebx*4]
.text:00418628                 dec     ebx
.text:00418629                 jnz     short loc_418621
.text:0041862B                 jmp     short loc_41860E
.text:0041862D ; ---------------------------------------------------------------------------
.text:0041862D
.text:0041862D loc_41862D:                             ; CODE XREF: sub_4185E0+26↑j
.text:0041862D                 mov     ecx, ds:dword_4193E4
.text:00418633                 xor     eax, eax
.text:00418635                 test    ecx, ecx
.text:00418637                 jz      short loc_418608
.text:00418639                 mov     edx, offset dword_4193E0
.text:0041863E                 mov     esi, esi
.text:00418640
.text:00418640 loc_418640:                             ; CODE XREF: sub_4185E0+67↓j
.text:00418640                 inc     eax
.text:00418641                 mov     ebx, [edx+eax*4+4]
.text:00418645                 test    ebx, ebx
.text:00418647                 jnz     short loc_418640
.text:00418649                 jmp     short loc_418608
.text:00418649 sub_4185E0      endp
.text:00418649
.text:00418649 ; ---------------------------------------------------------------------------
.text:0041864B                 align 10h
.text:00418650
.text:00418650 ; =============== S U B R O U T I N E =======================================
.text:00418650
.text:00418650 ; Attributes: info_from_lumina
.text:00418650
.text:00418650 ; void *__cdecl _alloca(size_t Size)
.text:00418650 __alloca        proc near               ; CODE XREF: sub_4019A0+16↑p
.text:00418650                 push    ecx
.text:00418651                 mov     ecx, esp
.text:00418653                 add     ecx, 8
.text:00418656
.text:00418656 loc_418656:                             ; CODE XREF: __alloca+1B↓j
.text:00418656                 cmp     eax, 1000h
.text:0041865B                 jb      short loc_41866D
.text:0041865D                 sub     ecx, 1000h
.text:00418663                 or      dword ptr [ecx], 0
.text:00418666                 sub     eax, 1000h
.text:0041866B                 jmp     short loc_418656
.text:0041866D ; ---------------------------------------------------------------------------
.text:0041866D
.text:0041866D loc_41866D:                             ; CODE XREF: __alloca+B↑j
.text:0041866D                 sub     ecx, eax
.text:0041866F                 or      dword ptr [ecx], 0
.text:00418672                 mov     eax, esp
.text:00418674                 mov     esp, ecx
.text:00418676                 mov     ecx, [eax]
.text:00418678                 mov     eax, [eax+4]
.text:0041867B                 jmp     eax
.text:0041867B __alloca        endp
.text:0041867B
.text:0041867B ; ---------------------------------------------------------------------------
.text:0041867D                 align 10h
.text:00418680
.text:00418680 ; =============== S U B R O U T I N E =======================================
.text:00418680
.text:00418680 ; Attributes: bp-based frame
.text:00418680
.text:00418680 sub_418680      proc near               ; CODE XREF: sub_410EB0+17E↑p
.text:00418680                                         ; sub_410EB0+1F5↑p ...
.text:00418680
.text:00418680 var_24          = dword ptr -24h
.text:00418680 var_20          = dword ptr -20h
.text:00418680 var_1C          = dword ptr -1Ch
.text:00418680 var_18          = dword ptr -18h
.text:00418680 var_14          = dword ptr -14h
.text:00418680 var_C           = dword ptr -0Ch
.text:00418680 var_8           = dword ptr -8
.text:00418680 var_4           = dword ptr -4
.text:00418680 arg_0           = dword ptr  8
.text:00418680 arg_4           = dword ptr  0Ch
.text:00418680 arg_8           = dword ptr  10h
.text:00418680 arg_C           = dword ptr  14h
.text:00418680
.text:00418680                 push    ebp
.text:00418681                 mov     ebp, esp
.text:00418683                 sub     esp, 28h
.text:00418686                 mov     [ebp+var_C], ebx
.text:00418689                 mov     edx, [ebp+arg_C]
.text:0041868C                 mov     ecx, [ebp+arg_0]
.text:0041868F                 mov     [ebp+var_8], esi
.text:00418692                 mov     eax, [ebp+arg_8]
.text:00418695                 test    edx, edx
.text:00418697                 mov     [ebp+var_4], edi
.text:0041869A                 mov     ebx, [ebp+arg_4]
.text:0041869D                 mov     esi, eax
.text:0041869F                 mov     [ebp+var_18], 0
.text:004186A6                 mov     [ebp+var_14], 0
.text:004186AD                 mov     [ebp+var_1C], ecx
.text:004186B0                 jnz     short loc_418702
.text:004186B2                 cmp     eax, ebx
.text:004186B4                 jbe     short loc_4186E0
.text:004186B6                 mov     eax, ecx
.text:004186B8                 mov     edx, ebx
.text:004186BA                 div     esi
.text:004186BC                 mov     edi, eax
.text:004186BE                 mov     esi, esi
.text:004186C0
.text:004186C0 loc_4186C0:                             ; CODE XREF: sub_418680+88↓j
.text:004186C0                                         ; sub_418680+A4↓j ...
.text:004186C0                 xor     ecx, ecx
.text:004186C2
.text:004186C2 loc_4186C2:                             ; CODE XREF: sub_418680+80↓j
.text:004186C2                 mov     [ebp+var_18], edi
.text:004186C5                 mov     ebx, [ebp+var_C]
.text:004186C8                 mov     eax, [ebp+var_18]
.text:004186CB                 mov     [ebp+var_14], ecx
.text:004186CE                 mov     esi, [ebp+var_8]
.text:004186D1                 mov     edx, [ebp+var_14]
.text:004186D4                 mov     edi, [ebp+var_4]
.text:004186D7                 mov     esp, ebp
.text:004186D9                 pop     ebp
.text:004186DA                 retn
.text:004186DA ; ---------------------------------------------------------------------------
.text:004186DB                 align 10h
.text:004186E0
.text:004186E0 loc_4186E0:                             ; CODE XREF: sub_418680+34↑j
.text:004186E0                 test    eax, eax
.text:004186E2                 jnz     short loc_4186F1
.text:004186E4                 mov     eax, 1
.text:004186E9                 xor     ecx, ecx
.text:004186EB                 xor     edx, edx
.text:004186ED                 div     ecx
.text:004186EF                 mov     esi, eax
.text:004186F1
.text:004186F1 loc_4186F1:                             ; CODE XREF: sub_418680+62↑j
.text:004186F1                 mov     eax, ebx
.text:004186F3                 xor     edx, edx
.text:004186F5                 div     esi
.text:004186F7                 mov     ecx, eax
.text:004186F9                 mov     eax, [ebp+var_1C]
.text:004186FC                 div     esi
.text:004186FE                 mov     edi, eax
.text:00418700                 jmp     short loc_4186C2
.text:00418702 ; ---------------------------------------------------------------------------
.text:00418702
.text:00418702 loc_418702:                             ; CODE XREF: sub_418680+30↑j
.text:00418702                 cmp     edx, ebx
.text:00418704                 jbe     short loc_418710
.text:00418706                 xor     edi, edi
.text:00418708                 jmp     short loc_4186C0
.text:00418708 ; ---------------------------------------------------------------------------
.text:0041870A                 align 10h
.text:00418710
.text:00418710 loc_418710:                             ; CODE XREF: sub_418680+84↑j
.text:00418710                 bsr     eax, edx
.text:00418713                 xor     eax, 1Fh
.text:00418716                 mov     [ebp+var_20], eax
.text:00418719                 jnz     short loc_418730
.text:0041871B                 cmp     ebx, edx
.text:0041871D                 ja      short loc_418726
.text:0041871F                 xor     edi, edi
.text:00418721                 cmp     [ebp+var_1C], esi
.text:00418724                 jb      short loc_4186C0
.text:00418726
.text:00418726 loc_418726:                             ; CODE XREF: sub_418680+9D↑j
.text:00418726                 mov     edi, 1
.text:0041872B                 jmp     short loc_4186C0
.text:0041872B ; ---------------------------------------------------------------------------
.text:0041872D                 align 10h
.text:00418730
.text:00418730 loc_418730:                             ; CODE XREF: sub_418680+99↑j
.text:00418730                 mov     eax, [ebp+var_20]
.text:00418733                 mov     ecx, 20h ; ' '
.text:00418738                 sub     ecx, eax
.text:0041873A                 mov     [ebp+var_24], ecx
.text:0041873D                 mov     eax, esi
.text:0041873F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418743                 shl     edx, cl
.text:00418745                 mov     edi, edx
.text:00418747                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041874B                 mov     edx, ebx
.text:0041874D                 shr     eax, cl
.text:0041874F                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418753                 or      edi, eax
.text:00418755                 mov     eax, [ebp+var_1C]
.text:00418758                 shl     esi, cl
.text:0041875A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041875E                 shr     edx, cl
.text:00418760                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418764                 shl     ebx, cl
.text:00418766                 movzx   ecx, byte ptr [ebp+var_24]
.text:0041876A                 shr     eax, cl
.text:0041876C                 or      ebx, eax
.text:0041876E                 movzx   ecx, byte ptr [ebp+var_20]
.text:00418772                 mov     eax, ebx
.text:00418774                 div     edi
.text:00418776                 mov     ebx, edx
.text:00418778                 mov     edi, eax
.text:0041877A                 shl     [ebp+var_1C], cl
.text:0041877D                 mul     esi
.text:0041877F                 cmp     edx, ebx
.text:00418781                 ja      short loc_418794
.text:00418783                 cmp     edx, ebx
.text:00418785                 jnz     loc_4186C0
.text:0041878B                 cmp     eax, [ebp+var_1C]
.text:0041878E                 jbe     loc_4186C0
.text:00418794
.text:00418794 loc_418794:                             ; CODE XREF: sub_418680+101↑j
.text:00418794                 dec     edi
.text:00418795                 jmp     loc_4186C0
.text:00418795 sub_418680      endp
.text:00418795
.text:00418795 ; ---------------------------------------------------------------------------
.text:0041879A                 align 10h
.text:004187A0
.text:004187A0 ; =============== S U B R O U T I N E =======================================
.text:004187A0
.text:004187A0 ; Attributes: bp-based frame
.text:004187A0
.text:004187A0 sub_4187A0      proc near               ; CODE XREF: sub_410EB0+1A5↑p
.text:004187A0                                         ; sub_410EB0+21E↑p ...
.text:004187A0
.text:004187A0 var_34          = dword ptr -34h
.text:004187A0 var_2C          = dword ptr -2Ch
.text:004187A0 var_28          = dword ptr -28h
.text:004187A0 var_24          = dword ptr -24h
.text:004187A0 var_20          = dword ptr -20h
.text:004187A0 var_1C          = dword ptr -1Ch
.text:004187A0 var_18          = dword ptr -18h
.text:004187A0 var_14          = dword ptr -14h
.text:004187A0 arg_0           = dword ptr  8
.text:004187A0 arg_4           = dword ptr  0Ch
.text:004187A0 arg_8           = dword ptr  10h
.text:004187A0 arg_C           = dword ptr  14h
.text:004187A0
.text:004187A0                 push    ebp
.text:004187A1                 mov     ebp, esp
.text:004187A3                 push    edi
.text:004187A4                 push    esi
.text:004187A5                 push    ebx
.text:004187A6                 sub     esp, 2Ch
.text:004187A9                 mov     edx, [ebp+arg_C]
.text:004187AC                 mov     [ebp+var_20], 0
.text:004187B3                 mov     ecx, [ebp+arg_0]
.text:004187B6                 mov     ebx, [ebp+arg_4]
.text:004187B9                 mov     [ebp+var_1C], 0
.text:004187C0                 mov     eax, [ebp+arg_8]
.text:004187C3                 test    edx, edx
.text:004187C5                 mov     [ebp+var_24], edx
.text:004187C8                 mov     edi, ebx
.text:004187CA                 mov     esi, eax
.text:004187CC                 mov     [ebp+var_28], ecx
.text:004187CF                 jnz     short loc_418830
.text:004187D1                 cmp     eax, ebx
.text:004187D3                 jbe     short loc_418810
.text:004187D5                 mov     eax, ecx
.text:004187D7                 mov     edx, ebx
.text:004187D9                 div     esi
.text:004187DB
.text:004187DB loc_4187DB:                             ; CODE XREF: sub_4187A0+8B↓j
.text:004187DB                 mov     [ebp+var_28], edx
.text:004187DE                 lea     ecx, [ebp+var_18]
.text:004187E1                 test    ecx, ecx
.text:004187E3                 jz      short loc_4187FE
.text:004187E5                 mov     [ebp+var_1C], 0
.text:004187EC
.text:004187EC loc_4187EC:                             ; CODE XREF: sub_4187A0+DA↓j
.text:004187EC                 mov     eax, [ebp+var_28]
.text:004187EF                 mov     [ebp+var_20], eax
.text:004187F2                 mov     edx, [ebp+var_20]
.text:004187F5                 mov     ecx, [ebp+var_1C]
.text:004187F8                 mov     [ebp+var_18], edx
.text:004187FB                 mov     [ebp+var_14], ecx
.text:004187FE
.text:004187FE loc_4187FE:                             ; CODE XREF: sub_4187A0+43↑j
.text:004187FE                                         ; sub_4187A0+A7↓j ...
.text:004187FE                 mov     eax, [ebp+var_18]
.text:00418801                 mov     edx, [ebp+var_14]
.text:00418804                 add     esp, 2Ch
.text:00418807                 pop     ebx
.text:00418808                 pop     esi
.text:00418809                 pop     edi
.text:0041880A                 pop     ebp
.text:0041880B                 retn
.text:0041880B ; ---------------------------------------------------------------------------
.text:0041880C                 align 10h
.text:00418810
.text:00418810 loc_418810:                             ; CODE XREF: sub_4187A0+33↑j
.text:00418810                 test    eax, eax
.text:00418812                 jnz     short loc_41881F
.text:00418814                 mov     eax, 1
.text:00418819                 xor     edx, edx
.text:0041881B                 div     esi
.text:0041881D                 mov     esi, eax
.text:0041881F
.text:0041881F loc_41881F:                             ; CODE XREF: sub_4187A0+72↑j
.text:0041881F                 mov     eax, edi
.text:00418821                 mov     edx, [ebp+var_24]
.text:00418824                 div     esi
.text:00418826                 mov     eax, [ebp+var_28]
.text:00418829                 div     esi
.text:0041882B                 jmp     short loc_4187DB
.text:0041882B ; ---------------------------------------------------------------------------
.text:0041882D                 align 10h
.text:00418830
.text:00418830 loc_418830:                             ; CODE XREF: sub_4187A0+2F↑j
.text:00418830                 cmp     [ebp+var_24], ebx
.text:00418833                 jbe     short loc_418850
.text:00418835                 mov     [ebp+var_20], ecx
.text:00418838
.text:00418838 loc_418838:                             ; CODE XREF: sub_4187A0+15B↓j
.text:00418838                 mov     [ebp+var_1C], edi
.text:0041883B                 mov     eax, [ebp+var_20]
.text:0041883E                 mov     edx, [ebp+var_1C]
.text:00418841                 mov     [ebp+var_18], eax
.text:00418844                 mov     [ebp+var_14], edx
.text:00418847                 jmp     short loc_4187FE
.text:00418847 ; ---------------------------------------------------------------------------
.text:00418849                 align 10h
.text:00418850
.text:00418850 loc_418850:                             ; CODE XREF: sub_4187A0+93↑j
.text:00418850                 bsr     eax, [ebp+var_24]
.text:00418854                 mov     ebx, eax
.text:00418856                 xor     ebx, 1Fh
.text:00418859                 jnz     short loc_418880
.text:0041885B                 cmp     edi, [ebp+var_24]
.text:0041885E                 ja      short loc_418865
.text:00418860                 cmp     [ebp+var_28], esi
.text:00418863                 jb      short loc_418870
.text:00418865
.text:00418865 loc_418865:                             ; CODE XREF: sub_4187A0+BE↑j
.text:00418865                 mov     edx, [ebp+var_28]
.text:00418868                 sub     edx, esi
.text:0041886A                 sbb     edi, [ebp+var_24]
.text:0041886D                 mov     [ebp+var_28], edx
.text:00418870
.text:00418870 loc_418870:                             ; CODE XREF: sub_4187A0+C3↑j
.text:00418870                 lea     ecx, [ebp+var_18]
.text:00418873                 test    ecx, ecx
.text:00418875                 jz      short loc_4187FE
.text:00418877                 mov     [ebp+var_1C], edi
.text:0041887A                 jmp     loc_4187EC
.text:0041887A ; ---------------------------------------------------------------------------
.text:0041887F                 align 10h
.text:00418880
.text:00418880 loc_418880:                             ; CODE XREF: sub_4187A0+B9↑j
.text:00418880                 mov     edx, [ebp+var_24]
.text:00418883                 mov     eax, 20h ; ' '
.text:00418888                 mov     cl, bl
.text:0041888A                 sub     eax, ebx
.text:0041888C                 mov     [ebp+var_2C], eax
.text:0041888F                 shl     edx, cl
.text:00418891                 mov     eax, esi
.text:00418893                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00418897                 shr     eax, cl
.text:00418899                 mov     cl, bl
.text:0041889B                 shl     esi, cl
.text:0041889D                 or      edx, eax
.text:0041889F                 mov     eax, [ebp+var_28]
.text:004188A2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004188A6                 mov     [ebp+var_24], edx
.text:004188A9                 mov     edx, edi
.text:004188AB                 shr     edx, cl
.text:004188AD                 mov     cl, bl
.text:004188AF                 shl     edi, cl
.text:004188B1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004188B5                 shr     eax, cl
.text:004188B7                 or      edi, eax
.text:004188B9                 mov     eax, edi
.text:004188BB                 mov     cl, bl
.text:004188BD                 div     [ebp+var_24]
.text:004188C0                 shl     [ebp+var_28], cl
.text:004188C3                 mov     edi, edx
.text:004188C5                 mul     esi
.text:004188C7                 mov     [ebp+var_34], eax
.text:004188CA                 cmp     edx, edi
.text:004188CC                 ja      short loc_418908
.text:004188CE                 cmp     edx, edi
.text:004188D0                 jz      short loc_418900
.text:004188D2
.text:004188D2 loc_4188D2:                             ; CODE XREF: sub_4187A0+166↓j
.text:004188D2                                         ; sub_4187A0+173↓j
.text:004188D2                 lea     eax, [ebp+var_18]
.text:004188D5                 test    eax, eax
.text:004188D7                 jz      loc_4187FE
.text:004188DD                 movzx   ecx, byte ptr [ebp+var_2C]
.text:004188E1                 mov     eax, [ebp+var_28]
.text:004188E4                 sub     eax, [ebp+var_34]
.text:004188E7                 sbb     edi, edx
.text:004188E9                 mov     [ebp+var_28], eax
.text:004188EC                 mov     edx, edi
.text:004188EE                 shl     edx, cl
.text:004188F0                 mov     cl, bl
.text:004188F2                 shr     eax, cl
.text:004188F4                 or      edx, eax
.text:004188F6                 mov     [ebp+var_20], edx
.text:004188F9                 shr     edi, cl
.text:004188FB                 jmp     loc_418838
.text:00418900 ; ---------------------------------------------------------------------------
.text:00418900
.text:00418900 loc_418900:                             ; CODE XREF: sub_4187A0+130↑j
.text:00418900                 mov     eax, [ebp+var_28]
.text:00418903                 cmp     [ebp+var_34], eax
.text:00418906                 jbe     short loc_4188D2
.text:00418908
.text:00418908 loc_418908:                             ; CODE XREF: sub_4187A0+12C↑j
.text:00418908                 mov     ecx, [ebp+var_34]
.text:0041890B                 sub     ecx, esi
.text:0041890D                 sbb     edx, [ebp+var_24]
.text:00418910                 mov     [ebp+var_34], ecx
.text:00418913                 jmp     short loc_4188D2
.text:00418913 sub_4187A0      endp
.text:00418913
.text:00418913 ; ---------------------------------------------------------------------------
.text:00418915                 align 10h
.text:00418920
.text:00418920 ; =============== S U B R O U T I N E =======================================
.text:00418920
.text:00418920 ; Attributes: thunk
.text:00418920
.text:00418920 ; int __cdecl isatty(int FileHandle)
.text:00418920 _isatty         proc near               ; CODE XREF: sub_4019A0+88↑p
.text:00418920
.text:00418920 FileHandle      = dword ptr  4
.text:00418920
.text:00418920                 jmp     ds:__imp__isatty
.text:00418920 _isatty         endp
.text:00418920
.text:00418920 ; ---------------------------------------------------------------------------
.text:00418926                 align 10h
.text:00418930
.text:00418930 ; =============== S U B R O U T I N E =======================================
.text:00418930
.text:00418930 ; Attributes: thunk
.text:00418930
.text:00418930 ; int __cdecl close(int FileHandle)
.text:00418930 _close          proc near               ; CODE XREF: sub_406110+14↑p
.text:00418930                                         ; sub_4088A0+1A5↑p ...
.text:00418930
.text:00418930 FileHandle      = dword ptr  4
.text:00418930
.text:00418930                 jmp     ds:__imp__close
.text:00418930 _close          endp
.text:00418930
.text:00418930 ; ---------------------------------------------------------------------------
.text:00418936                 align 10h
.text:00418940
.text:00418940 ; =============== S U B R O U T I N E =======================================
.text:00418940
.text:00418940 ; Attributes: thunk
.text:00418940
.text:00418940 ; int open(const char *FileName, int OpenFlag, ...)
.text:00418940 _open           proc near               ; CODE XREF: sub_409140+75↑p
.text:00418940                                         ; sub_409140+147↑p
.text:00418940
.text:00418940 FileName        = dword ptr  4
.text:00418940 OpenFlag        = dword ptr  8
.text:00418940
.text:00418940                 jmp     ds:__imp__open
.text:00418940 _open           endp
.text:00418940
.text:00418940 ; ---------------------------------------------------------------------------
.text:00418946                 align 10h
.text:00418950
.text:00418950 ; =============== S U B R O U T I N E =======================================
.text:00418950
.text:00418950 ; Attributes: thunk
.text:00418950
.text:00418950 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:00418950 _stricmp        proc near               ; CODE XREF: sub_411380+46F↑p
.text:00418950                                         ; sub_413EB0+2E↑p ...
.text:00418950
.text:00418950 String1         = dword ptr  4
.text:00418950 String2         = dword ptr  8
.text:00418950
.text:00418950                 jmp     ds:__imp__stricmp
.text:00418950 _stricmp        endp
.text:00418950
.text:00418950 ; ---------------------------------------------------------------------------
.text:00418956                 align 10h
.text:00418960
.text:00418960 ; =============== S U B R O U T I N E =======================================
.text:00418960
.text:00418960 ; Attributes: thunk
.text:00418960
.text:00418960 ; char *__cdecl strdup(const char *String)
.text:00418960 _strdup         proc near               ; CODE XREF: sub_413AE0+101↑p
.text:00418960                                         ; .text:00413D4A↑p ...
.text:00418960
.text:00418960 String          = dword ptr  4
.text:00418960
.text:00418960                 jmp     ds:__imp__strdup
.text:00418960 _strdup         endp
.text:00418960
.text:00418960 ; ---------------------------------------------------------------------------
.text:00418966                 align 10h
.text:00418970
.text:00418970 ; =============== S U B R O U T I N E =======================================
.text:00418970
.text:00418970 ; Attributes: thunk
.text:00418970
.text:00418970 ; int __cdecl getpid()
.text:00418970 _getpid         proc near               ; CODE XREF: sub_416610+84↑p
.text:00418970                 jmp     ds:__imp__getpid
.text:00418970 _getpid         endp
.text:00418970
.text:00418970 ; ---------------------------------------------------------------------------
.text:00418976                 align 10h
.text:00418980
.text:00418980 ; =============== S U B R O U T I N E =======================================
.text:00418980
.text:00418980 ; Attributes: thunk
.text:00418980
.text:00418980 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:00418980 _chmod          proc near               ; CODE XREF: sub_416A40+41↑j
.text:00418980
.text:00418980 FileName        = dword ptr  4
.text:00418980 AccessMode      = dword ptr  8
.text:00418980
.text:00418980                 jmp     ds:__imp__chmod
.text:00418980 _chmod          endp
.text:00418980
.text:00418980 ; ---------------------------------------------------------------------------
.text:00418986                 align 10h
.text:00418990                 jmp     ds:__set_app_type
.text:00418990 ; ---------------------------------------------------------------------------
.text:00418996                 align 10h
.text:004189A0
.text:004189A0 ; =============== S U B R O U T I N E =======================================
.text:004189A0
.text:004189A0 ; Attributes: thunk
.text:004189A0
.text:004189A0 ; void __cdecl cexit()
.text:004189A0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:004189A0                 jmp     ds:__imp__cexit
.text:004189A0 _cexit          endp
.text:004189A0
.text:004189A0 ; ---------------------------------------------------------------------------
.text:004189A6                 align 10h
.text:004189B0
.text:004189B0 ; =============== S U B R O U T I N E =======================================
.text:004189B0
.text:004189B0 ; Attributes: thunk
.text:004189B0
.text:004189B0 ; char ***__cdecl _p__environ()
.text:004189B0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:004189B0                 jmp     ds:__imp___p__environ
.text:004189B0 __p__environ    endp
.text:004189B0
.text:004189B0 ; ---------------------------------------------------------------------------
.text:004189B6                 align 10h
.text:004189C0
.text:004189C0 ; =============== S U B R O U T I N E =======================================
.text:004189C0
.text:004189C0 ; Attributes: thunk
.text:004189C0
.text:004189C0 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:004189C0 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:004189C0                                         ; TopLevelExceptionFilter+88↑p ...
.text:004189C0
.text:004189C0 Signal          = dword ptr  4
.text:004189C0 Function        = dword ptr  8
.text:004189C0
.text:004189C0                 jmp     ds:__imp_signal
.text:004189C0 signal          endp
.text:004189C0
.text:004189C0 ; ---------------------------------------------------------------------------
.text:004189C6                 align 10h
.text:004189D0
.text:004189D0 ; =============== S U B R O U T I N E =======================================
.text:004189D0
.text:004189D0 ; Attributes: thunk
.text:004189D0
.text:004189D0 ; int *__cdecl _p__fmode()
.text:004189D0 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:004189D0                 jmp     ds:__imp___p__fmode
.text:004189D0 __p__fmode      endp
.text:004189D0
.text:004189D0 ; ---------------------------------------------------------------------------
.text:004189D6                 align 10h
.text:004189E0
.text:004189E0 ; =============== S U B R O U T I N E =======================================
.text:004189E0
.text:004189E0 ; Attributes: thunk
.text:004189E0
.text:004189E0 ; int __cdecl setmode(int FileHandle, int Mode)
.text:004189E0 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:004189E0                                         ; sub_401080+90↑p ...
.text:004189E0
.text:004189E0 FileHandle      = dword ptr  4
.text:004189E0 Mode            = dword ptr  8
.text:004189E0
.text:004189E0                 jmp     ds:__imp__setmode
.text:004189E0 _setmode        endp
.text:004189E0
.text:004189E0 ; ---------------------------------------------------------------------------
.text:004189E6                 align 10h
.text:004189F0
.text:004189F0 ; =============== S U B R O U T I N E =======================================
.text:004189F0
.text:004189F0 ; Attributes: thunk
.text:004189F0
.text:004189F0 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:004189F0                 jmp     ds:__imp___getmainargs
.text:004189F0 __getmainargs   endp
.text:004189F0
.text:004189F0 ; ---------------------------------------------------------------------------
.text:004189F6                 align 10h
.text:00418A00
.text:00418A00 ; =============== S U B R O U T I N E =======================================
.text:00418A00
.text:00418A00 ; Attributes: noreturn thunk
.text:00418A00
.text:00418A00 _assert         proc near               ; CODE XREF: sub_4019A0+3B1↑p
.text:00418A00                                         ; sub_401FE0+2F3↑p ...
.text:00418A00                 jmp     ds:__imp__assert
.text:00418A00 _assert         endp
.text:00418A00
.text:00418A00 ; ---------------------------------------------------------------------------
.text:00418A06                 align 10h
.text:00418A10
.text:00418A10 ; =============== S U B R O U T I N E =======================================
.text:00418A10
.text:00418A10 ; Attributes: thunk
.text:00418A10
.text:00418A10 ; int *__cdecl errno()
.text:00418A10 _errno          proc near               ; CODE XREF: sub_4019A0+3FE↑p
.text:00418A10                                         ; sub_402370+A3↑p ...
.text:00418A10                 jmp     ds:__imp__errno
.text:00418A10 _errno          endp
.text:00418A10
.text:00418A10 ; ---------------------------------------------------------------------------
.text:00418A16                 align 10h
.text:00418A20
.text:00418A20 ; =============== S U B R O U T I N E =======================================
.text:00418A20
.text:00418A20 ; Attributes: thunk
.text:00418A20
.text:00418A20 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00418A20 setlocale       proc near               ; CODE XREF: sub_4019A0+37↑p
.text:00418A20
.text:00418A20 Category        = dword ptr  4
.text:00418A20 Locale          = dword ptr  8
.text:00418A20
.text:00418A20                 jmp     ds:__imp_setlocale
.text:00418A20 setlocale       endp
.text:00418A20
.text:00418A20 ; ---------------------------------------------------------------------------
.text:00418A26                 align 10h
.text:00418A30
.text:00418A30 ; =============== S U B R O U T I N E =======================================
.text:00418A30
.text:00418A30 ; Attributes: noreturn thunk
.text:00418A30
.text:00418A30 ; void __cdecl __noreturn exit(int Code)
.text:00418A30 exit            proc near               ; CODE XREF: sub_4019A0:loc_401AD4↑p
.text:00418A30                                         ; .text:00401E0C↑p ...
.text:00418A30
.text:00418A30 Code            = dword ptr  4
.text:00418A30
.text:00418A30                 jmp     ds:__imp_exit
.text:00418A30 exit            endp
.text:00418A30
.text:00418A30 ; ---------------------------------------------------------------------------
.text:00418A36                 align 10h
.text:00418A40
.text:00418A40 ; =============== S U B R O U T I N E =======================================
.text:00418A40
.text:00418A40 ; Attributes: thunk
.text:00418A40
.text:00418A40 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:00418A40 fputs           proc near               ; CODE XREF: sub_4019A0+1A0↑p
.text:00418A40                                         ; sub_4019A0+1C2↑p ...
.text:00418A40
.text:00418A40 Buffer          = dword ptr  4
.text:00418A40 Stream          = dword ptr  8
.text:00418A40
.text:00418A40                 jmp     ds:__imp_fputs
.text:00418A40 fputs           endp
.text:00418A40
.text:00418A40 ; ---------------------------------------------------------------------------
.text:00418A46                 align 10h
.text:00418A50
.text:00418A50 ; =============== S U B R O U T I N E =======================================
.text:00418A50
.text:00418A50 ; Attributes: thunk
.text:00418A50
.text:00418A50 ; int printf(const char *const Format, ...)
.text:00418A50 printf          proc near               ; CODE XREF: sub_4019A0+17E↑p
.text:00418A50                                         ; sub_4019A0+223↑p ...
.text:00418A50
.text:00418A50 Format          = dword ptr  4
.text:00418A50
.text:00418A50                 jmp     ds:__imp_printf
.text:00418A50 printf          endp
.text:00418A50
.text:00418A50 ; ---------------------------------------------------------------------------
.text:00418A56                 align 10h
.text:00418A60
.text:00418A60 ; =============== S U B R O U T I N E =======================================
.text:00418A60
.text:00418A60 ; Attributes: thunk
.text:00418A60
.text:00418A60 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:00418A60 fprintf         proc near               ; CODE XREF: sub_4019A0+128↑p
.text:00418A60                                         ; .text:00401E04↑p ...
.text:00418A60
.text:00418A60 Stream          = dword ptr  4
.text:00418A60 Format          = dword ptr  8
.text:00418A60
.text:00418A60                 jmp     ds:__imp_fprintf
.text:00418A60 fprintf         endp
.text:00418A60
.text:00418A60 ; ---------------------------------------------------------------------------
.text:00418A66                 align 10h
.text:00418A70
.text:00418A70 ; =============== S U B R O U T I N E =======================================
.text:00418A70
.text:00418A70 ; Attributes: thunk
.text:00418A70
.text:00418A70 ; int __cdecl setjmp(jmp_buf Buf)
.text:00418A70 _setjmp         proc near               ; CODE XREF: sub_401FE0+162↑p
.text:00418A70
.text:00418A70 Buf             = dword ptr  4
.text:00418A70
.text:00418A70                 jmp     ds:__imp__setjmp
.text:00418A70 _setjmp         endp
.text:00418A70
.text:00418A70 ; ---------------------------------------------------------------------------
.text:00418A76                 align 10h
.text:00418A80
.text:00418A80 ; =============== S U B R O U T I N E =======================================
.text:00418A80
.text:00418A80 ; Attributes: noreturn thunk
.text:00418A80
.text:00418A80 ; void __cdecl __noreturn longjmp(jmp_buf Buf, int Value)
.text:00418A80 longjmp         proc near               ; CODE XREF: sub_4026E0+CE↑p
.text:00418A80                                         ; sub_403D80+584↑p
.text:00418A80
.text:00418A80 Buf             = dword ptr  4
.text:00418A80 Value           = dword ptr  8
.text:00418A80
.text:00418A80                 jmp     ds:__imp_longjmp
.text:00418A80 longjmp         endp
.text:00418A80
.text:00418A80 ; ---------------------------------------------------------------------------
.text:00418A86                 align 10h
.text:00418A90
.text:00418A90 ; =============== S U B R O U T I N E =======================================
.text:00418A90
.text:00418A90 ; Attributes: thunk
.text:00418A90
.text:00418A90 ; void *__cdecl realloc(void *Block, size_t Size)
.text:00418A90 realloc         proc near               ; CODE XREF: sub_403390+BF↑p
.text:00418A90                                         ; .text:004071A0↑p ...
.text:00418A90
.text:00418A90 Block           = dword ptr  4
.text:00418A90 Size            = dword ptr  8
.text:00418A90
.text:00418A90                 jmp     ds:__imp_realloc
.text:00418A90 realloc         endp
.text:00418A90
.text:00418A90 ; ---------------------------------------------------------------------------
.text:00418A96                 align 10h
.text:00418AA0
.text:00418AA0 ; =============== S U B R O U T I N E =======================================
.text:00418AA0
.text:00418AA0 ; Attributes: thunk
.text:00418AA0
.text:00418AA0 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00418AA0 memcpy          proc near               ; CODE XREF: sub_4026E0+433↑p
.text:00418AA0                                         ; sub_403290+36↑p ...
.text:00418AA0
.text:00418AA0 Src             = dword ptr  8
.text:00418AA0 Size            = dword ptr  0Ch
.text:00418AA0
.text:00418AA0                 jmp     ds:__imp_memcpy
.text:00418AA0 memcpy          endp
.text:00418AA0
.text:00418AA0 ; ---------------------------------------------------------------------------
.text:00418AA6                 align 10h
.text:00418AB0
.text:00418AB0 ; =============== S U B R O U T I N E =======================================
.text:00418AB0
.text:00418AB0 ; Attributes: thunk
.text:00418AB0
.text:00418AB0 ; size_t __cdecl strlen(const char *Str)
.text:00418AB0 strlen          proc near               ; CODE XREF: sub_403290+11↑p
.text:00418AB0                                         ; sub_403390+1A↑p ...
.text:00418AB0
.text:00418AB0 Str             = dword ptr  4
.text:00418AB0
.text:00418AB0                 jmp     ds:__imp_strlen
.text:00418AB0 strlen          endp
.text:00418AB0
.text:00418AB0 ; ---------------------------------------------------------------------------
.text:00418AB6                 align 10h
.text:00418AC0
.text:00418AC0 ; =============== S U B R O U T I N E =======================================
.text:00418AC0
.text:00418AC0 ; Attributes: thunk
.text:00418AC0
.text:00418AC0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00418AC0 strcmp          proc near               ; CODE XREF: sub_403260+12↑p
.text:00418AC0                                         ; sub_410034+180↑p ...
.text:00418AC0
.text:00418AC0 Str1            = dword ptr  4
.text:00418AC0 Str2            = dword ptr  8
.text:00418AC0
.text:00418AC0                 jmp     ds:__imp_strcmp
.text:00418AC0 strcmp          endp
.text:00418AC0
.text:00418AC0 ; ---------------------------------------------------------------------------
.text:00418AC6                 align 10h
.text:00418AD0
.text:00418AD0 ; =============== S U B R O U T I N E =======================================
.text:00418AD0
.text:00418AD0 ; Attributes: thunk
.text:00418AD0
.text:00418AD0 ; void __cdecl free(void *Block)
.text:00418AD0 free            proc near               ; CODE XREF: sub_401FE0+F1↑p
.text:00418AD0                                         ; sub_4022E0+4C↑j ...
.text:00418AD0
.text:00418AD0 Block           = dword ptr  4
.text:00418AD0
.text:00418AD0                 jmp     ds:__imp_free
.text:00418AD0 free            endp
.text:00418AD0
.text:00418AD0 ; ---------------------------------------------------------------------------
.text:00418AD6                 align 10h
.text:00418AE0
.text:00418AE0 ; =============== S U B R O U T I N E =======================================
.text:00418AE0
.text:00418AE0 ; Attributes: thunk
.text:00418AE0
.text:00418AE0 ; void *__cdecl malloc(size_t Size)
.text:00418AE0 malloc          proc near               ; CODE XREF: sub_406250+36↑p
.text:00418AE0                                         ; sub_406620+133↑p ...
.text:00418AE0
.text:00418AE0 Size            = dword ptr  4
.text:00418AE0
.text:00418AE0                 jmp     ds:__imp_malloc
.text:00418AE0 malloc          endp
.text:00418AE0
.text:00418AE0 ; ---------------------------------------------------------------------------
.text:00418AE6                 align 10h
.text:00418AF0
.text:00418AF0 ; =============== S U B R O U T I N E =======================================
.text:00418AF0
.text:00418AF0 ; Attributes: thunk
.text:00418AF0
.text:00418AF0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00418AF0 strncmp         proc near               ; CODE XREF: sub_404A70+23F↑p
.text:00418AF0                                         ; sub_404A70+699↑p
.text:00418AF0
.text:00418AF0 Str1            = dword ptr  4
.text:00418AF0 Str2            = dword ptr  8
.text:00418AF0 MaxCount        = dword ptr  0Ch
.text:00418AF0
.text:00418AF0                 jmp     ds:__imp_strncmp
.text:00418AF0 strncmp         endp
.text:00418AF0
.text:00418AF0 ; ---------------------------------------------------------------------------
.text:00418AF6                 align 10h
.text:00418B00
.text:00418B00 ; =============== S U B R O U T I N E =======================================
.text:00418B00
.text:00418B00 ; Attributes: thunk
.text:00418B00
.text:00418B00 ; char *__cdecl getenv(const char *VarName)
.text:00418B00 getenv          proc near               ; CODE XREF: sub_404A70+B57↑p
.text:00418B00                                         ; sub_411380+3EE↑p ...
.text:00418B00
.text:00418B00 VarName         = dword ptr  4
.text:00418B00
.text:00418B00                 jmp     ds:__imp_getenv
.text:00418B00 getenv          endp
.text:00418B00
.text:00418B00 ; ---------------------------------------------------------------------------
.text:00418B06                 align 10h
.text:00418B10
.text:00418B10 ; =============== S U B R O U T I N E =======================================
.text:00418B10
.text:00418B10 ; Attributes: thunk
.text:00418B10
.text:00418B10 ; char *__cdecl strchr(const char *Str, int Val)
.text:00418B10 strchr          proc near               ; CODE XREF: sub_404A70+469↑p
.text:00418B10                                         ; sub_404A70+53A↑p ...
.text:00418B10
.text:00418B10 Str             = dword ptr  4
.text:00418B10 Val             = dword ptr  8
.text:00418B10
.text:00418B10                 jmp     ds:__imp_strchr
.text:00418B10 strchr          endp
.text:00418B10
.text:00418B10 ; ---------------------------------------------------------------------------
.text:00418B16                 align 10h
.text:00418B20
.text:00418B20 ; =============== S U B R O U T I N E =======================================
.text:00418B20
.text:00418B20 ; Attributes: thunk
.text:00418B20
.text:00418B20 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00418B20 vfprintf        proc near               ; CODE XREF: sub_405B90+C1↑p
.text:00418B20                                         ; sub_40FF30+49↑p ...
.text:00418B20
.text:00418B20 Stream          = dword ptr  4
.text:00418B20 Format          = dword ptr  8
.text:00418B20 ArgList         = dword ptr  0Ch
.text:00418B20
.text:00418B20                 jmp     ds:__imp_vfprintf
.text:00418B20 vfprintf        endp
.text:00418B20
.text:00418B20 ; ---------------------------------------------------------------------------
.text:00418B26                 align 10h
.text:00418B30
.text:00418B30 ; =============== S U B R O U T I N E =======================================
.text:00418B30
.text:00418B30 ; Attributes: noreturn thunk
.text:00418B30
.text:00418B30 ; void __cdecl __noreturn abort()
.text:00418B30 abort           proc near               ; CODE XREF: sub_405B90:loc_405C2C↑p
.text:00418B30                                         ; sub_4060E0:loc_4060FC↑p ...
.text:00418B30                 jmp     ds:__imp_abort
.text:00418B30 abort           endp
.text:00418B30
.text:00418B30 ; ---------------------------------------------------------------------------
.text:00418B36                 align 10h
.text:00418B40
.text:00418B40 ; =============== S U B R O U T I N E =======================================
.text:00418B40
.text:00418B40 ; Attributes: thunk
.text:00418B40
.text:00418B40 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00418B40 _flsbuf         proc near               ; CODE XREF: sub_405B90+128↑p
.text:00418B40                                         ; sub_405B90+13A↑p ...
.text:00418B40
.text:00418B40 File            = dword ptr  8
.text:00418B40
.text:00418B40                 jmp     ds:__imp__flsbuf
.text:00418B40 _flsbuf         endp
.text:00418B40
.text:00418B40 ; ---------------------------------------------------------------------------
.text:00418B46                 align 10h
.text:00418B50
.text:00418B50 ; =============== S U B R O U T I N E =======================================
.text:00418B50
.text:00418B50 ; Attributes: thunk
.text:00418B50
.text:00418B50 ; int __cdecl fclose(FILE *Stream)
.text:00418B50 fclose          proc near               ; CODE XREF: sub_405F10+27↑p
.text:00418B50                                         ; .text:00415F0E↑p
.text:00418B50
.text:00418B50 Stream          = dword ptr  4
.text:00418B50
.text:00418B50                 jmp     ds:__imp_fclose
.text:00418B50 fclose          endp
.text:00418B50
.text:00418B50 ; ---------------------------------------------------------------------------
.text:00418B56                 align 10h
.text:00418B60
.text:00418B60 ; =============== S U B R O U T I N E =======================================
.text:00418B60
.text:00418B60 ; Attributes: thunk
.text:00418B60
.text:00418B60 ; int __cdecl filbuf(FILE *File)
.text:00418B60 _filbuf         proc near               ; CODE XREF: sub_406150+B9↑p
.text:00418B60
.text:00418B60 File            = dword ptr  4
.text:00418B60
.text:00418B60                 jmp     ds:__imp__filbuf
.text:00418B60 _filbuf         endp
.text:00418B60
.text:00418B60 ; ---------------------------------------------------------------------------
.text:00418B66                 align 10h
.text:00418B70
.text:00418B70 ; =============== S U B R O U T I N E =======================================
.text:00418B70
.text:00418B70 ; Attributes: thunk
.text:00418B70
.text:00418B70 ; int __cdecl isctype(int C, int Type)
.text:00418B70 _isctype        proc near               ; CODE XREF: sub_406150+5F↑p
.text:00418B70                                         ; sub_407500+610↑p ...
.text:00418B70
.text:00418B70 C               = dword ptr  4
.text:00418B70 Type            = dword ptr  8
.text:00418B70
.text:00418B70                 jmp     ds:__imp__isctype
.text:00418B70 _isctype        endp
.text:00418B70
.text:00418B70 ; ---------------------------------------------------------------------------
.text:00418B76                 align 10h
.text:00418B80
.text:00418B80 ; =============== S U B R O U T I N E =======================================
.text:00418B80
.text:00418B80 ; Attributes: thunk
.text:00418B80
.text:00418B80 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:00418B80 calloc          proc near               ; CODE XREF: sub_406250+1D0↑p
.text:00418B80                                         ; .text:004072A3↑p ...
.text:00418B80
.text:00418B80 Count           = dword ptr  4
.text:00418B80 Size            = dword ptr  8
.text:00418B80
.text:00418B80                 jmp     ds:__imp_calloc
.text:00418B80 calloc          endp
.text:00418B80
.text:00418B80 ; ---------------------------------------------------------------------------
.text:00418B86                 align 10h
.text:00418B90
.text:00418B90 ; =============== S U B R O U T I N E =======================================
.text:00418B90
.text:00418B90 ; Attributes: thunk
.text:00418B90
.text:00418B90 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:00418B90 memset          proc near               ; CODE XREF: .text:00407266↑p
.text:00418B90                                         ; sub_40C4F0+330A↑p ...
.text:00418B90
.text:00418B90 Val             = dword ptr  8
.text:00418B90 Size            = dword ptr  0Ch
.text:00418B90
.text:00418B90                 jmp     ds:__imp_memset
.text:00418B90 memset          endp
.text:00418B90
.text:00418B90 ; ---------------------------------------------------------------------------
.text:00418B96                 align 10h
.text:00418BA0
.text:00418BA0 ; =============== S U B R O U T I N E =======================================
.text:00418BA0
.text:00418BA0 ; Attributes: thunk
.text:00418BA0
.text:00418BA0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:00418BA0 iswctype        proc near               ; CODE XREF: sub_407500+78B↑p
.text:00418BA0                                         ; sub_40C4F0+1F86↑p
.text:00418BA0
.text:00418BA0 C               = word ptr  4
.text:00418BA0 Type            = word ptr  8
.text:00418BA0
.text:00418BA0                 jmp     ds:__imp_iswctype
.text:00418BA0 iswctype        endp
.text:00418BA0
.text:00418BA0 ; ---------------------------------------------------------------------------
.text:00418BA6                 align 10h
.text:00418BB0
.text:00418BB0 ; =============== S U B R O U T I N E =======================================
.text:00418BB0
.text:00418BB0 ; Attributes: thunk
.text:00418BB0
.text:00418BB0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:00418BB0 strspn          proc near               ; CODE XREF: sub_4088A0+8B↑p
.text:00418BB0                                         ; .text:0041539A↑p ...
.text:00418BB0
.text:00418BB0 Str             = dword ptr  4
.text:00418BB0 Control         = dword ptr  8
.text:00418BB0
.text:00418BB0                 jmp     ds:__imp_strspn
.text:00418BB0 strspn          endp
.text:00418BB0
.text:00418BB0 ; ---------------------------------------------------------------------------
.text:00418BB6                 align 10h
.text:00418BC0
.text:00418BC0 ; =============== S U B R O U T I N E =======================================
.text:00418BC0
.text:00418BC0 ; Attributes: thunk
.text:00418BC0
.text:00418BC0 ; size_t __cdecl strcspn(const char *Str, const char *Control)
.text:00418BC0 strcspn         proc near               ; CODE XREF: sub_4088A0+D6↑p
.text:00418BC0                                         ; sub_4088A0+51F↑p
.text:00418BC0
.text:00418BC0 Str             = dword ptr  4
.text:00418BC0 Control         = dword ptr  8
.text:00418BC0
.text:00418BC0                 jmp     ds:__imp_strcspn
.text:00418BC0 strcspn         endp
.text:00418BC0
.text:00418BC0 ; ---------------------------------------------------------------------------
.text:00418BC6                 align 10h
.text:00418BD0
.text:00418BD0 ; =============== S U B R O U T I N E =======================================
.text:00418BD0
.text:00418BD0 ; Attributes: thunk
.text:00418BD0
.text:00418BD0 ; void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount)
.text:00418BD0 memchr          proc near               ; CODE XREF: sub_4088A0+BE↑p
.text:00418BD0
.text:00418BD0 Buf             = dword ptr  4
.text:00418BD0 Val             = dword ptr  8
.text:00418BD0 MaxCount        = dword ptr  0Ch
.text:00418BD0
.text:00418BD0                 jmp     ds:__imp_memchr
.text:00418BD0 memchr          endp
.text:00418BD0
.text:00418BD0 ; ---------------------------------------------------------------------------
.text:00418BD6                 align 10h
.text:00418BE0
.text:00418BE0 ; =============== S U B R O U T I N E =======================================
.text:00418BE0
.text:00418BE0 ; Attributes: thunk
.text:00418BE0
.text:00418BE0 ; int __cdecl tolower(int C)
.text:00418BE0 tolower         proc near               ; CODE XREF: sub_40BF20+158↑p
.text:00418BE0
.text:00418BE0 C               = dword ptr  4
.text:00418BE0
.text:00418BE0                 jmp     ds:__imp_tolower
.text:00418BE0 tolower         endp
.text:00418BE0
.text:00418BE0 ; ---------------------------------------------------------------------------
.text:00418BE6                 align 10h
.text:00418BF0
.text:00418BF0 ; =============== S U B R O U T I N E =======================================
.text:00418BF0
.text:00418BF0 ; Attributes: thunk
.text:00418BF0
.text:00418BF0 ; int __cdecl fflush(FILE *Stream)
.text:00418BF0 fflush          proc near               ; CODE XREF: sub_40FF30+19↑p
.text:00418BF0                                         ; sub_40FF30+81↑p ...
.text:00418BF0
.text:00418BF0 Stream          = dword ptr  4
.text:00418BF0
.text:00418BF0                 jmp     ds:__imp_fflush
.text:00418BF0 fflush          endp
.text:00418BF0
.text:00418BF0 ; ---------------------------------------------------------------------------
.text:00418BF6                 align 10h
.text:00418C00
.text:00418C00 ; =============== S U B R O U T I N E =======================================
.text:00418C00
.text:00418C00 ; Attributes: thunk
.text:00418C00
.text:00418C00 ; char *__cdecl strerror(int ErrorMessage)
.text:00418C00 strerror        proc near               ; CODE XREF: sub_40FF30+A5↑p
.text:00418C00                                         ; sub_410034+10F↑p
.text:00418C00
.text:00418C00 ErrorMessage    = dword ptr  4
.text:00418C00
.text:00418C00                 jmp     ds:__imp_strerror
.text:00418C00 strerror        endp
.text:00418C00
.text:00418C00 ; ---------------------------------------------------------------------------
.text:00418C06                 align 10h
.text:00418C10
.text:00418C10 ; =============== S U B R O U T I N E =======================================
.text:00418C10
.text:00418C10 ; Attributes: thunk
.text:00418C10
.text:00418C10 ; char *__cdecl strncat(char *Destination, const char *Source, size_t Count)
.text:00418C10 strncat         proc near               ; CODE XREF: sub_410370+75↑p
.text:00418C10
.text:00418C10 Destination     = dword ptr  4
.text:00418C10 Source          = dword ptr  8
.text:00418C10 Count           = dword ptr  0Ch
.text:00418C10
.text:00418C10                 jmp     ds:__imp_strncat
.text:00418C10 strncat         endp
.text:00418C10
.text:00418C10 ; ---------------------------------------------------------------------------
.text:00418C16                 align 10h
.text:00418C20
.text:00418C20 ; =============== S U B R O U T I N E =======================================
.text:00418C20
.text:00418C20 ; Attributes: thunk
.text:00418C20
.text:00418C20 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:00418C20 strncpy         proc near               ; CODE XREF: sub_410370+61↑p
.text:00418C20                                         ; sub_410370+118↑p ...
.text:00418C20
.text:00418C20 Destination     = dword ptr  4
.text:00418C20 Source          = dword ptr  8
.text:00418C20 Count           = dword ptr  0Ch
.text:00418C20
.text:00418C20                 jmp     ds:__imp_strncpy
.text:00418C20 strncpy         endp
.text:00418C20
.text:00418C20 ; ---------------------------------------------------------------------------
.text:00418C26                 align 10h
.text:00418C30
.text:00418C30 ; =============== S U B R O U T I N E =======================================
.text:00418C30
.text:00418C30 ; Attributes: thunk
.text:00418C30
.text:00418C30 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:00418C30 strcat          proc near               ; CODE XREF: sub_410370+191↑p
.text:00418C30                                         ; sub_410780+DD↑p ...
.text:00418C30
.text:00418C30 Destination     = dword ptr  4
.text:00418C30 Source          = dword ptr  8
.text:00418C30
.text:00418C30                 jmp     ds:__imp_strcat
.text:00418C30 strcat          endp
.text:00418C30
.text:00418C30 ; ---------------------------------------------------------------------------
.text:00418C36                 align 10h
.text:00418C40
.text:00418C40 ; =============== S U B R O U T I N E =======================================
.text:00418C40
.text:00418C40 ; Attributes: thunk
.text:00418C40
.text:00418C40 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:00418C40 strcpy          proc near               ; CODE XREF: sub_410370+164↑p
.text:00418C40                                         ; sub_410780+B1↑p ...
.text:00418C40
.text:00418C40 Destination     = dword ptr  4
.text:00418C40 Source          = dword ptr  8
.text:00418C40
.text:00418C40                 jmp     ds:__imp_strcpy
.text:00418C40 strcpy          endp
.text:00418C40
.text:00418C40 ; ---------------------------------------------------------------------------
.text:00418C46                 align 10h
.text:00418C50
.text:00418C50 ; =============== S U B R O U T I N E =======================================
.text:00418C50
.text:00418C50 ; Attributes: thunk
.text:00418C50
.text:00418C50 ; int __cdecl chmod_0(const char *FileName, int AccessMode)
.text:00418C50 _chmod_0        proc near               ; CODE XREF: sub_410550+9B↑p
.text:00418C50
.text:00418C50 FileName        = dword ptr  4
.text:00418C50 AccessMode      = dword ptr  8
.text:00418C50
.text:00418C50                 jmp     ds:__imp__chmod_0
.text:00418C50 _chmod_0        endp
.text:00418C50
.text:00418C50 ; ---------------------------------------------------------------------------
.text:00418C56                 align 10h
.text:00418C60
.text:00418C60 ; =============== S U B R O U T I N E =======================================
.text:00418C60
.text:00418C60 ; Attributes: thunk
.text:00418C60
.text:00418C60 ; char *__cdecl getcwd(char *DstBuf, int SizeInBytes)
.text:00418C60 _getcwd         proc near               ; CODE XREF: j__getcwd↑j
.text:00418C60
.text:00418C60 DstBuf          = dword ptr  4
.text:00418C60 SizeInBytes     = dword ptr  8
.text:00418C60
.text:00418C60                 jmp     ds:__imp__getcwd
.text:00418C60 _getcwd         endp
.text:00418C60
.text:00418C60 ; ---------------------------------------------------------------------------
.text:00418C66                 align 10h
.text:00418C70
.text:00418C70 ; =============== S U B R O U T I N E =======================================
.text:00418C70
.text:00418C70 ; Attributes: thunk
.text:00418C70
.text:00418C70 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:00418C70 strstr          proc near               ; CODE XREF: sub_411380+3BF↑p
.text:00418C70                                         ; sub_411380+3DC↑p ...
.text:00418C70
.text:00418C70 Str             = dword ptr  4
.text:00418C70 SubStr          = dword ptr  8
.text:00418C70
.text:00418C70                 jmp     ds:__imp_strstr
.text:00418C70 strstr          endp
.text:00418C70
.text:00418C70 ; ---------------------------------------------------------------------------
.text:00418C76                 align 10h
.text:00418C80
.text:00418C80 ; =============== S U B R O U T I N E =======================================
.text:00418C80
.text:00418C80 ; Attributes: thunk
.text:00418C80
.text:00418C80 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:00418C80 strrchr         proc near               ; CODE XREF: sub_411380+CB↑p
.text:00418C80                                         ; sub_411380+3A7↑p ...
.text:00418C80
.text:00418C80 Str             = dword ptr  4
.text:00418C80
.text:00418C80                 jmp     ds:__imp_strrchr
.text:00418C80 strrchr         endp
.text:00418C80
.text:00418C80 ; ---------------------------------------------------------------------------
.text:00418C86                 align 10h
.text:00418C90
.text:00418C90 ; =============== S U B R O U T I N E =======================================
.text:00418C90
.text:00418C90 ; Attributes: thunk
.text:00418C90
.text:00418C90 ; int __cdecl isalpha(int C)
.text:00418C90 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:00418C90
.text:00418C90 C               = dword ptr  4
.text:00418C90
.text:00418C90                 jmp     ds:__imp_isalpha
.text:00418C90 isalpha         endp
.text:00418C90
.text:00418C90 ; ---------------------------------------------------------------------------
.text:00418C96                 align 10h
.text:00418CA0
.text:00418CA0 ; =============== S U B R O U T I N E =======================================
.text:00418CA0
.text:00418CA0 ; Attributes: thunk
.text:00418CA0
.text:00418CA0 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:00418CA0 _stricmp_0      proc near               ; CODE XREF: .text:00413054↑p
.text:00418CA0
.text:00418CA0 String1         = dword ptr  4
.text:00418CA0 String2         = dword ptr  8
.text:00418CA0
.text:00418CA0                 jmp     ds:__imp__stricmp_0
.text:00418CA0 _stricmp_0      endp
.text:00418CA0
.text:00418CA0 ; ---------------------------------------------------------------------------
.text:00418CA6                 align 10h
.text:00418CB0
.text:00418CB0 ; =============== S U B R O U T I N E =======================================
.text:00418CB0
.text:00418CB0 ; Attributes: thunk
.text:00418CB0
.text:00418CB0 ; int __cdecl toupper(int C)
.text:00418CB0 toupper         proc near               ; CODE XREF: sub_413AE0+10E↑p
.text:00418CB0
.text:00418CB0 C               = dword ptr  4
.text:00418CB0
.text:00418CB0                 jmp     ds:__imp_toupper
.text:00418CB0 toupper         endp
.text:00418CB0
.text:00418CB0 ; ---------------------------------------------------------------------------
.text:00418CB6                 align 10h
.text:00418CC0
.text:00418CC0 ; =============== S U B R O U T I N E =======================================
.text:00418CC0
.text:00418CC0 ; Attributes: thunk
.text:00418CC0
.text:00418CC0 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:00418CC0 sprintf         proc near               ; CODE XREF: .text:004149CA↑p
.text:00418CC0                                         ; .text:004149EB↑p ...
.text:00418CC0
.text:00418CC0 Buffer          = dword ptr  4
.text:00418CC0 Format          = dword ptr  8
.text:00418CC0
.text:00418CC0                 jmp     ds:__imp_sprintf
.text:00418CC0 sprintf         endp
.text:00418CC0
.text:00418CC0 ; ---------------------------------------------------------------------------
.text:00418CC6                 align 10h
.text:00418CD0
.text:00418CD0 ; =============== S U B R O U T I N E =======================================
.text:00418CD0
.text:00418CD0 ; Attributes: thunk
.text:00418CD0
.text:00418CD0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:00418CD0 sscanf          proc near               ; CODE XREF: .text:0041554E↑p
.text:00418CD0
.text:00418CD0 Buffer          = dword ptr  4
.text:00418CD0 Format          = dword ptr  8
.text:00418CD0
.text:00418CD0                 jmp     ds:__imp_sscanf
.text:00418CD0 sscanf          endp
.text:00418CD0
.text:00418CD0 ; ---------------------------------------------------------------------------
.text:00418CD6                 align 10h
.text:00418CE0
.text:00418CE0 ; =============== S U B R O U T I N E =======================================
.text:00418CE0
.text:00418CE0 ; Attributes: thunk
.text:00418CE0
.text:00418CE0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:00418CE0 fopen           proc near               ; CODE XREF: sub_415E4F+26↑p
.text:00418CE0                                         ; sub_415E4F+99↑p
.text:00418CE0
.text:00418CE0 FileName        = dword ptr  4
.text:00418CE0 Mode            = dword ptr  8
.text:00418CE0
.text:00418CE0                 jmp     ds:__imp_fopen
.text:00418CE0 fopen           endp
.text:00418CE0
.text:00418CE0 ; ---------------------------------------------------------------------------
.text:00418CE6                 align 10h
.text:00418CF0
.text:00418CF0 ; =============== S U B R O U T I N E =======================================
.text:00418CF0
.text:00418CF0 ; Attributes: thunk
.text:00418CF0
.text:00418CF0 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:00418CF0 _get_osfhandle  proc near               ; CODE XREF: sub_416000+3A↑p
.text:00418CF0                                         ; sub_4160C0+15↑p
.text:00418CF0
.text:00418CF0 FileHandle      = dword ptr  4
.text:00418CF0
.text:00418CF0                 jmp     ds:__imp__get_osfhandle
.text:00418CF0 _get_osfhandle  endp
.text:00418CF0
.text:00418CF0 ; ---------------------------------------------------------------------------
.text:00418CF6                 align 10h
.text:00418D00
.text:00418D00 ; =============== S U B R O U T I N E =======================================
.text:00418D00
.text:00418D00 ; Attributes: thunk
.text:00418D00
.text:00418D00 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:00418D00 _filelengthi64  proc near               ; CODE XREF: sub_4160C0+1F↑p
.text:00418D00
.text:00418D00 FileHandle      = dword ptr  4
.text:00418D00
.text:00418D00                 jmp     ds:__imp__filelengthi64
.text:00418D00 _filelengthi64  endp
.text:00418D00
.text:00418D00 ; ---------------------------------------------------------------------------
.text:00418D06                 align 10h
.text:00418D10
.text:00418D10 ; =============== S U B R O U T I N E =======================================
.text:00418D10
.text:00418D10 ; Attributes: thunk
.text:00418D10
.text:00418D10 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:00418D10 strpbrk         proc near               ; CODE XREF: sub_416120+87↑p
.text:00418D10
.text:00418D10 Str             = dword ptr  4
.text:00418D10 Control         = dword ptr  8
.text:00418D10
.text:00418D10                 jmp     ds:__imp_strpbrk
.text:00418D10 strpbrk         endp
.text:00418D10
.text:00418D10 ; ---------------------------------------------------------------------------
.text:00418D16                 align 10h
.text:00418D20
.text:00418D20 ; =============== S U B R O U T I N E =======================================
.text:00418D20
.text:00418D20 ; Attributes: thunk
.text:00418D20
.text:00418D20 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:00418D20 _fdopen         proc near               ; CODE XREF: sub_4161C0+69↑p
.text:00418D20
.text:00418D20 FileHandle      = dword ptr  4
.text:00418D20 Format          = dword ptr  8
.text:00418D20
.text:00418D20                 jmp     ds:__imp__fdopen
.text:00418D20 _fdopen         endp
.text:00418D20
.text:00418D20 ; ---------------------------------------------------------------------------
.text:00418D26                 align 10h
.text:00418D30
.text:00418D30 ; =============== S U B R O U T I N E =======================================
.text:00418D30
.text:00418D30 ; Attributes: thunk
.text:00418D30
.text:00418D30 ; int __cdecl close_0(int FileHandle)
.text:00418D30 _close_0        proc near               ; CODE XREF: sub_4161C0+90↑p
.text:00418D30
.text:00418D30 FileHandle      = dword ptr  4
.text:00418D30
.text:00418D30                 jmp     ds:__imp__close_0
.text:00418D30 _close_0        endp
.text:00418D30
.text:00418D30 ; ---------------------------------------------------------------------------
.text:00418D36                 align 10h
.text:00418D40
.text:00418D40 ; =============== S U B R O U T I N E =======================================
.text:00418D40
.text:00418D40 ; Attributes: thunk
.text:00418D40
.text:00418D40 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:00418D40 _open_0         proc near               ; CODE XREF: sub_416610:loc_4169A0↑p
.text:00418D40
.text:00418D40 FileName        = dword ptr  4
.text:00418D40 OpenFlag        = dword ptr  8
.text:00418D40
.text:00418D40                 jmp     ds:__imp__open_0
.text:00418D40 _open_0         endp
.text:00418D40
.text:00418D40 ; ---------------------------------------------------------------------------
.text:00418D46                 align 10h
.text:00418D50
.text:00418D50 ; =============== S U B R O U T I N E =======================================
.text:00418D50
.text:00418D50 ; Attributes: thunk
.text:00418D50
.text:00418D50 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00418D50 fwrite          proc near               ; CODE XREF: sub_417010+17↑p
.text:00418D50
.text:00418D50 Buffer          = dword ptr  4
.text:00418D50 ElementSize     = dword ptr  8
.text:00418D50 ElementCount    = dword ptr  0Ch
.text:00418D50 Stream          = dword ptr  10h
.text:00418D50
.text:00418D50                 jmp     ds:__imp_fwrite
.text:00418D50 fwrite          endp
.text:00418D50
.text:00418D50 ; ---------------------------------------------------------------------------
.text:00418D56                 align 10h
.text:00418D60
.text:00418D60 ; =============== S U B R O U T I N E =======================================
.text:00418D60
.text:00418D60 ; Attributes: thunk
.text:00418D60
.text:00418D60 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00418D60 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00418D60
.text:00418D60 lpTopLevelExceptionFilter= dword ptr  4
.text:00418D60
.text:00418D60                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00418D60 SetUnhandledExceptionFilter endp
.text:00418D60
.text:00418D60 ; ---------------------------------------------------------------------------
.text:00418D66                 align 10h
.text:00418D70
.text:00418D70 ; =============== S U B R O U T I N E =======================================
.text:00418D70
.text:00418D70 ; Attributes: noreturn thunk
.text:00418D70
.text:00418D70 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00418D70 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00418D70
.text:00418D70 uExitCode       = dword ptr  4
.text:00418D70
.text:00418D70                 jmp     ds:__imp_ExitProcess
.text:00418D70 ExitProcess     endp
.text:00418D70
.text:00418D70 ; ---------------------------------------------------------------------------
.text:00418D76                 align 10h
.text:00418D80
.text:00418D80 ; =============== S U B R O U T I N E =======================================
.text:00418D80
.text:00418D80 ; Attributes: thunk
.text:00418D80
.text:00418D80 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:00418D80 FindNextFileA   proc near               ; CODE XREF: sub_410370+36↑p
.text:00418D80                                         ; sub_410D30+FF↑p
.text:00418D80
.text:00418D80 hFindFile       = dword ptr  4
.text:00418D80 lpFindFileData  = dword ptr  8
.text:00418D80
.text:00418D80                 jmp     ds:__imp_FindNextFileA
.text:00418D80 FindNextFileA   endp
.text:00418D80
.text:00418D80 ; ---------------------------------------------------------------------------
.text:00418D86                 align 10h
.text:00418D90
.text:00418D90 ; =============== S U B R O U T I N E =======================================
.text:00418D90
.text:00418D90 ; Attributes: thunk
.text:00418D90
.text:00418D90 ; DWORD __stdcall GetLastError()
.text:00418D90 GetLastError    proc near               ; CODE XREF: sub_410370:loc_4104BB↑p
.text:00418D90                                         ; sub_411380:loc_411609↑p ...
.text:00418D90                 jmp     ds:__imp_GetLastError
.text:00418D90 GetLastError    endp
.text:00418D90
.text:00418D90 ; ---------------------------------------------------------------------------
.text:00418D96                 align 10h
.text:00418DA0
.text:00418DA0 ; =============== S U B R O U T I N E =======================================
.text:00418DA0
.text:00418DA0 ; Attributes: thunk
.text:00418DA0
.text:00418DA0 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:00418DA0 FindFirstFileA  proc near               ; CODE XREF: sub_410370+1AC↑p
.text:00418DA0                                         ; sub_410BC0+CE↑p ...
.text:00418DA0
.text:00418DA0 lpFileName      = dword ptr  4
.text:00418DA0 lpFindFileData  = dword ptr  8
.text:00418DA0
.text:00418DA0                 jmp     ds:__imp_FindFirstFileA
.text:00418DA0 FindFirstFileA  endp
.text:00418DA0
.text:00418DA0 ; ---------------------------------------------------------------------------
.text:00418DA6                 align 10h
.text:00418DB0
.text:00418DB0 ; =============== S U B R O U T I N E =======================================
.text:00418DB0
.text:00418DB0 ; Attributes: thunk
.text:00418DB0
.text:00418DB0 ; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.text:00418DB0 DeleteFileA     proc near               ; CODE XREF: sub_410550+50↑p
.text:00418DB0
.text:00418DB0 lpFileName      = dword ptr  4
.text:00418DB0
.text:00418DB0                 jmp     ds:__imp_DeleteFileA
.text:00418DB0 DeleteFileA     endp
.text:00418DB0
.text:00418DB0 ; ---------------------------------------------------------------------------
.text:00418DB6                 align 10h
.text:00418DC0
.text:00418DC0 ; =============== S U B R O U T I N E =======================================
.text:00418DC0
.text:00418DC0 ; Attributes: thunk
.text:00418DC0
.text:00418DC0 ; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
.text:00418DC0 RemoveDirectoryA proc near              ; CODE XREF: sub_4106C0+12↑p
.text:00418DC0
.text:00418DC0 lpPathName      = dword ptr  4
.text:00418DC0
.text:00418DC0                 jmp     ds:__imp_RemoveDirectoryA
.text:00418DC0 RemoveDirectoryA endp
.text:00418DC0
.text:00418DC0 ; ---------------------------------------------------------------------------
.text:00418DC6                 align 10h
.text:00418DD0
.text:00418DD0 ; =============== S U B R O U T I N E =======================================
.text:00418DD0
.text:00418DD0 ; Attributes: thunk
.text:00418DD0
.text:00418DD0 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:00418DD0 GetFileAttributesA proc near            ; CODE XREF: sub_410780+65↑p
.text:00418DD0                                         ; sub_410AB0+62↑p ...
.text:00418DD0
.text:00418DD0 lpFileName      = dword ptr  4
.text:00418DD0
.text:00418DD0                 jmp     ds:__imp_GetFileAttributesA
.text:00418DD0 GetFileAttributesA endp
.text:00418DD0
.text:00418DD0 ; ---------------------------------------------------------------------------
.text:00418DD6                 align 10h
.text:00418DE0
.text:00418DE0 ; =============== S U B R O U T I N E =======================================
.text:00418DE0
.text:00418DE0 ; Attributes: thunk
.text:00418DE0
.text:00418DE0 ; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.text:00418DE0 SetCurrentDirectoryA proc near          ; CODE XREF: sub_4108E0+12↑p
.text:00418DE0
.text:00418DE0 lpPathName      = dword ptr  4
.text:00418DE0
.text:00418DE0                 jmp     ds:__imp_SetCurrentDirectoryA
.text:00418DE0 SetCurrentDirectoryA endp
.text:00418DE0
.text:00418DE0 ; ---------------------------------------------------------------------------
.text:00418DE6                 align 10h
.text:00418DF0
.text:00418DF0 ; =============== S U B R O U T I N E =======================================
.text:00418DF0
.text:00418DF0 ; Attributes: thunk
.text:00418DF0
.text:00418DF0 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:00418DF0 SetErrorMode    proc near               ; CODE XREF: sub_410AB0+57↑p
.text:00418DF0                                         ; sub_410AB0+78↑p ...
.text:00418DF0
.text:00418DF0 uMode           = dword ptr  4
.text:00418DF0
.text:00418DF0                 jmp     ds:__imp_SetErrorMode
.text:00418DF0 SetErrorMode    endp
.text:00418DF0
.text:00418DF0 ; ---------------------------------------------------------------------------
.text:00418DF6                 align 10h
.text:00418E00
.text:00418E00 ; =============== S U B R O U T I N E =======================================
.text:00418E00
.text:00418E00 ; Attributes: thunk
.text:00418E00
.text:00418E00 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:00418E00 GetModuleHandleA proc near              ; CODE XREF: sub_410BC0+18↑p
.text:00418E00                                         ; sub_411380+329↑p ...
.text:00418E00
.text:00418E00 lpModuleName    = dword ptr  4
.text:00418E00
.text:00418E00                 jmp     ds:__imp_GetModuleHandleA
.text:00418E00 GetModuleHandleA endp
.text:00418E00
.text:00418E00 ; ---------------------------------------------------------------------------
.text:00418E06                 align 10h
.text:00418E10
.text:00418E10 ; =============== S U B R O U T I N E =======================================
.text:00418E10
.text:00418E10 ; Attributes: thunk
.text:00418E10
.text:00418E10 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:00418E10 GetProcAddress  proc near               ; CODE XREF: sub_410BC0+33↑p
.text:00418E10                                         ; sub_410D30+2E↑p ...
.text:00418E10
.text:00418E10 hModule         = dword ptr  4
.text:00418E10 lpProcName      = dword ptr  8
.text:00418E10
.text:00418E10                 jmp     ds:__imp_GetProcAddress
.text:00418E10 GetProcAddress  endp
.text:00418E10
.text:00418E10 ; ---------------------------------------------------------------------------
.text:00418E16                 align 10h
.text:00418E20
.text:00418E20 ; =============== S U B R O U T I N E =======================================
.text:00418E20
.text:00418E20 ; Attributes: thunk
.text:00418E20
.text:00418E20 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:00418E20 FreeLibrary     proc near               ; CODE XREF: sub_410BC0+A4↑p
.text:00418E20                                         ; sub_410D30+11D↑p ...
.text:00418E20
.text:00418E20 hLibModule      = dword ptr  4
.text:00418E20
.text:00418E20                 jmp     ds:__imp_FreeLibrary
.text:00418E20 FreeLibrary     endp
.text:00418E20
.text:00418E20 ; ---------------------------------------------------------------------------
.text:00418E26                 align 10h
.text:00418E30
.text:00418E30 ; =============== S U B R O U T I N E =======================================
.text:00418E30
.text:00418E30 ; Attributes: thunk
.text:00418E30
.text:00418E30 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:00418E30 FindClose       proc near               ; CODE XREF: sub_410BC0+123↑p
.text:00418E30                                         ; sub_410D30+10E↑p ...
.text:00418E30
.text:00418E30 hFindFile       = dword ptr  4
.text:00418E30
.text:00418E30                 jmp     ds:__imp_FindClose
.text:00418E30 FindClose       endp
.text:00418E30
.text:00418E30 ; ---------------------------------------------------------------------------
.text:00418E36                 align 10h
.text:00418E40
.text:00418E40 ; =============== S U B R O U T I N E =======================================
.text:00418E40
.text:00418E40 ; Attributes: thunk
.text:00418E40
.text:00418E40 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:00418E40 LoadLibraryA    proc near               ; CODE XREF: sub_410D30+13↑p
.text:00418E40                                         ; sub_411380+134↑p ...
.text:00418E40
.text:00418E40 lpLibFileName   = dword ptr  4
.text:00418E40
.text:00418E40                 jmp     ds:__imp_LoadLibraryA
.text:00418E40 LoadLibraryA    endp
.text:00418E40
.text:00418E40 ; ---------------------------------------------------------------------------
.text:00418E46                 align 10h
.text:00418E50
.text:00418E50 ; =============== S U B R O U T I N E =======================================
.text:00418E50
.text:00418E50 ; Attributes: thunk
.text:00418E50
.text:00418E50 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:00418E50 GetFileType     proc near               ; CODE XREF: sub_410EB0+43↑p
.text:00418E50                                         ; .text:00411B6A↑p
.text:00418E50
.text:00418E50 hFile           = dword ptr  4
.text:00418E50
.text:00418E50                 jmp     ds:__imp_GetFileType
.text:00418E50 GetFileType     endp
.text:00418E50
.text:00418E50 ; ---------------------------------------------------------------------------
.text:00418E56                 align 10h
.text:00418E60
.text:00418E60 ; =============== S U B R O U T I N E =======================================
.text:00418E60
.text:00418E60 ; Attributes: thunk
.text:00418E60
.text:00418E60 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:00418E60 GetFileInformationByHandle proc near    ; CODE XREF: sub_410EB0+69↑p
.text:00418E60
.text:00418E60 hFile           = dword ptr  4
.text:00418E60 lpFileInformation= dword ptr  8
.text:00418E60
.text:00418E60                 jmp     ds:__imp_GetFileInformationByHandle
.text:00418E60 GetFileInformationByHandle endp
.text:00418E60
.text:00418E60 ; ---------------------------------------------------------------------------
.text:00418E66                 align 10h
.text:00418E70
.text:00418E70 ; =============== S U B R O U T I N E =======================================
.text:00418E70
.text:00418E70 ; Attributes: thunk
.text:00418E70
.text:00418E70 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:00418E70 GetFileSize     proc near               ; CODE XREF: sub_410EB0+3F2↑p
.text:00418E70
.text:00418E70 hFile           = dword ptr  4
.text:00418E70 lpFileSizeHigh  = dword ptr  8
.text:00418E70
.text:00418E70                 jmp     ds:__imp_GetFileSize
.text:00418E70 GetFileSize     endp
.text:00418E70
.text:00418E70 ; ---------------------------------------------------------------------------
.text:00418E76                 align 10h
.text:00418E80
.text:00418E80 ; =============== S U B R O U T I N E =======================================
.text:00418E80
.text:00418E80 ; Attributes: thunk
.text:00418E80
.text:00418E80 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:00418E80 PeekNamedPipe   proc near               ; CODE XREF: sub_410EB0+439↑p
.text:00418E80
.text:00418E80 hNamedPipe      = dword ptr  4
.text:00418E80 lpBuffer        = dword ptr  8
.text:00418E80 nBufferSize     = dword ptr  0Ch
.text:00418E80 lpBytesRead     = dword ptr  10h
.text:00418E80 lpTotalBytesAvail= dword ptr  14h
.text:00418E80 lpBytesLeftThisMessage= dword ptr  18h
.text:00418E80
.text:00418E80                 jmp     ds:__imp_PeekNamedPipe
.text:00418E80 PeekNamedPipe   endp
.text:00418E80
.text:00418E80 ; ---------------------------------------------------------------------------
.text:00418E86                 align 10h
.text:00418E90
.text:00418E90 ; =============== S U B R O U T I N E =======================================
.text:00418E90
.text:00418E90 ; Attributes: thunk
.text:00418E90
.text:00418E90 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:00418E90 GetDriveTypeA   proc near               ; CODE XREF: sub_411380+4C↑p
.text:00418E90
.text:00418E90 lpRootPathName  = dword ptr  4
.text:00418E90
.text:00418E90                 jmp     ds:__imp_GetDriveTypeA
.text:00418E90 GetDriveTypeA   endp
.text:00418E90
.text:00418E90 ; ---------------------------------------------------------------------------
.text:00418E96                 align 10h
.text:00418EA0
.text:00418EA0 ; =============== S U B R O U T I N E =======================================
.text:00418EA0
.text:00418EA0 ; Attributes: thunk
.text:00418EA0
.text:00418EA0 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:00418EA0 GetVolumeInformationA proc near         ; CODE XREF: sub_411880+64↑p
.text:00418EA0                                         ; .text:00411E2C↑p ...
.text:00418EA0
.text:00418EA0 lpRootPathName  = dword ptr  4
.text:00418EA0 lpVolumeNameBuffer= dword ptr  8
.text:00418EA0 nVolumeNameSize = dword ptr  0Ch
.text:00418EA0 lpVolumeSerialNumber= dword ptr  10h
.text:00418EA0 lpMaximumComponentLength= dword ptr  14h
.text:00418EA0 lpFileSystemFlags= dword ptr  18h
.text:00418EA0 lpFileSystemNameBuffer= dword ptr  1Ch
.text:00418EA0 nFileSystemNameSize= dword ptr  20h
.text:00418EA0
.text:00418EA0                 jmp     ds:__imp_GetVolumeInformationA
.text:00418EA0 GetVolumeInformationA endp
.text:00418EA0
.text:00418EA0 ; ---------------------------------------------------------------------------
.text:00418EA6                 align 10h
.text:00418EB0
.text:00418EB0 ; =============== S U B R O U T I N E =======================================
.text:00418EB0
.text:00418EB0 ; Attributes: thunk
.text:00418EB0
.text:00418EB0 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:00418EB0 CreateFileA     proc near               ; CODE XREF: sub_410310+2306↑p
.text:00418EB0                                         ; .text:004140D3↑p ...
.text:00418EB0
.text:00418EB0 lpFileName      = dword ptr  4
.text:00418EB0 dwDesiredAccess = dword ptr  8
.text:00418EB0 dwShareMode     = dword ptr  0Ch
.text:00418EB0 lpSecurityAttributes= dword ptr  10h
.text:00418EB0 dwCreationDisposition= dword ptr  14h
.text:00418EB0 dwFlagsAndAttributes= dword ptr  18h
.text:00418EB0 hTemplateFile   = dword ptr  1Ch
.text:00418EB0
.text:00418EB0                 jmp     ds:__imp_CreateFileA
.text:00418EB0 CreateFileA     endp
.text:00418EB0
.text:00418EB0 ; ---------------------------------------------------------------------------
.text:00418EB6                 align 10h
.text:00418EC0
.text:00418EC0 ; =============== S U B R O U T I N E =======================================
.text:00418EC0
.text:00418EC0 ; Attributes: thunk
.text:00418EC0
.text:00418EC0 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:00418EC0 CloseHandle     proc near               ; CODE XREF: sub_410310+2321↑p
.text:00418EC0                                         ; .text:00414149↑p ...
.text:00418EC0
.text:00418EC0 hObject         = dword ptr  4
.text:00418EC0
.text:00418EC0                 jmp     ds:__imp_CloseHandle
.text:00418EC0 CloseHandle     endp
.text:00418EC0
.text:00418EC0 ; ---------------------------------------------------------------------------
.text:00418EC6                 align 10h
.text:00418ED0
.text:00418ED0 ; =============== S U B R O U T I N E =======================================
.text:00418ED0
.text:00418ED0 ; Attributes: thunk
.text:00418ED0
.text:00418ED0 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:00418ED0 GetModuleFileNameA proc near            ; CODE XREF: sub_412ED0+1C↑p
.text:00418ED0
.text:00418ED0 hModule         = dword ptr  4
.text:00418ED0 lpFilename      = dword ptr  8
.text:00418ED0 nSize           = dword ptr  0Ch
.text:00418ED0
.text:00418ED0                 jmp     ds:__imp_GetModuleFileNameA
.text:00418ED0 GetModuleFileNameA endp
.text:00418ED0
.text:00418ED0 ; ---------------------------------------------------------------------------
.text:00418ED6                 align 10h
.text:00418EE0
.text:00418EE0 ; =============== S U B R O U T I N E =======================================
.text:00418EE0
.text:00418EE0 ; Attributes: thunk
.text:00418EE0
.text:00418EE0 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:00418EE0 GetShortPathNameA proc near             ; CODE XREF: .text:00413156↑p
.text:00418EE0                                         ; .text:00413180↑p
.text:00418EE0
.text:00418EE0 lpszLongPath    = dword ptr  4
.text:00418EE0 lpszShortPath   = dword ptr  8
.text:00418EE0 cchBuffer       = dword ptr  0Ch
.text:00418EE0
.text:00418EE0                 jmp     ds:__imp_GetShortPathNameA
.text:00418EE0 GetShortPathNameA endp
.text:00418EE0
.text:00418EE0 ; ---------------------------------------------------------------------------
.text:00418EE6                 align 10h
.text:00418EF0
.text:00418EF0 ; =============== S U B R O U T I N E =======================================
.text:00418EF0
.text:00418EF0 ; Attributes: thunk
.text:00418EF0
.text:00418EF0 ; BOOL __stdcall AreFileApisANSI()
.text:00418EF0 AreFileApisANSI proc near               ; CODE XREF: sub_4131D0+89↑p
.text:00418EF0                 jmp     ds:__imp_AreFileApisANSI
.text:00418EF0 AreFileApisANSI endp
.text:00418EF0
.text:00418EF0 ; ---------------------------------------------------------------------------
.text:00418EF6                 align 10h
.text:00418F00
.text:00418F00 ; =============== S U B R O U T I N E =======================================
.text:00418F00
.text:00418F00 ; Attributes: thunk
.text:00418F00
.text:00418F00 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:00418F00 MultiByteToWideChar proc near           ; CODE XREF: sub_4131D0+BD↑p
.text:00418F00
.text:00418F00 CodePage        = dword ptr  4
.text:00418F00 dwFlags         = dword ptr  8
.text:00418F00 lpMultiByteStr  = dword ptr  0Ch
.text:00418F00 cbMultiByte     = dword ptr  10h
.text:00418F00 lpWideCharStr   = dword ptr  14h
.text:00418F00 cchWideChar     = dword ptr  18h
.text:00418F00
.text:00418F00                 jmp     ds:__imp_MultiByteToWideChar
.text:00418F00 MultiByteToWideChar endp
.text:00418F00
.text:00418F00 ; ---------------------------------------------------------------------------
.text:00418F06                 align 10h
.text:00418F10
.text:00418F10 ; =============== S U B R O U T I N E =======================================
.text:00418F10
.text:00418F10 ; Attributes: thunk
.text:00418F10
.text:00418F10 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:00418F10 lstrcpyA        proc near               ; CODE XREF: sub_4131D0+128↑p
.text:00418F10
.text:00418F10 lpString1       = dword ptr  4
.text:00418F10 lpString2       = dword ptr  8
.text:00418F10
.text:00418F10                 jmp     ds:__imp_lstrcpyA
.text:00418F10 lstrcpyA        endp
.text:00418F10
.text:00418F10 ; ---------------------------------------------------------------------------
.text:00418F16                 align 10h
.text:00418F20
.text:00418F20 ; =============== S U B R O U T I N E =======================================
.text:00418F20
.text:00418F20 ; Attributes: thunk
.text:00418F20
.text:00418F20 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:00418F20 GetFullPathNameA proc near              ; CODE XREF: sub_4134E0+45↑p
.text:00418F20                                         ; sub_4134E0+ED↑p
.text:00418F20
.text:00418F20 lpFileName      = dword ptr  4
.text:00418F20 nBufferLength   = dword ptr  8
.text:00418F20 lpBuffer        = dword ptr  0Ch
.text:00418F20 lpFilePart      = dword ptr  10h
.text:00418F20
.text:00418F20                 jmp     ds:__imp_GetFullPathNameA
.text:00418F20 GetFullPathNameA endp
.text:00418F20
.text:00418F20 ; ---------------------------------------------------------------------------
.text:00418F26                 align 10h
.text:00418F30
.text:00418F30 ; =============== S U B R O U T I N E =======================================
.text:00418F30
.text:00418F30 ; Attributes: thunk
.text:00418F30
.text:00418F30 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00418F30 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00413D88↑p
.text:00418F30                                         ; .text:00413DA4↑p ...
.text:00418F30
.text:00418F30 nBufferLength   = dword ptr  4
.text:00418F30 lpBuffer        = dword ptr  8
.text:00418F30
.text:00418F30                 jmp     ds:__imp_GetCurrentDirectoryA
.text:00418F30 GetCurrentDirectoryA endp
.text:00418F30
.text:00418F30 ; ---------------------------------------------------------------------------
.text:00418F36                 align 10h
.text:00418F40
.text:00418F40 ; =============== S U B R O U T I N E =======================================
.text:00418F40
.text:00418F40 ; Attributes: thunk
.text:00418F40
.text:00418F40 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:00418F40 DeviceIoControl proc near               ; CODE XREF: .text:0041413C↑p
.text:00418F40                                         ; sub_414500+1E5↑p
.text:00418F40
.text:00418F40 hDevice         = dword ptr  4
.text:00418F40 dwIoControlCode = dword ptr  8
.text:00418F40 lpInBuffer      = dword ptr  0Ch
.text:00418F40 nInBufferSize   = dword ptr  10h
.text:00418F40 lpOutBuffer     = dword ptr  14h
.text:00418F40 nOutBufferSize  = dword ptr  18h
.text:00418F40 lpBytesReturned = dword ptr  1Ch
.text:00418F40 lpOverlapped    = dword ptr  20h
.text:00418F40
.text:00418F40                 jmp     ds:__imp_DeviceIoControl
.text:00418F40 DeviceIoControl endp
.text:00418F40
.text:00418F40 ; ---------------------------------------------------------------------------
.text:00418F46                 align 10h
.text:00418F50
.text:00418F50 ; =============== S U B R O U T I N E =======================================
.text:00418F50
.text:00418F50 ; Attributes: thunk
.text:00418F50
.text:00418F50 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:00418F50 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00414493↑p
.text:00418F50                                         ; sub_414500+7B↑p ...
.text:00418F50
.text:00418F50 lpRootPathName  = dword ptr  4
.text:00418F50 lpSectorsPerCluster= dword ptr  8
.text:00418F50 lpBytesPerSector= dword ptr  0Ch
.text:00418F50 lpNumberOfFreeClusters= dword ptr  10h
.text:00418F50 lpTotalNumberOfClusters= dword ptr  14h
.text:00418F50
.text:00418F50                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:00418F50 GetDiskFreeSpaceA endp
.text:00418F50
.text:00418F50 ; ---------------------------------------------------------------------------
.text:00418F56                 align 10h
.text:00418F60
.text:00418F60 ; =============== S U B R O U T I N E =======================================
.text:00418F60
.text:00418F60 ; Attributes: thunk
.text:00418F60
.text:00418F60 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:00418F60 lstrcmpiA       proc near               ; CODE XREF: .text:00414C5B↑p
.text:00418F60                                         ; .text:00414C72↑p ...
.text:00418F60
.text:00418F60 lpString1       = dword ptr  4
.text:00418F60 lpString2       = dword ptr  8
.text:00418F60
.text:00418F60                 jmp     ds:__imp_lstrcmpiA
.text:00418F60 lstrcmpiA       endp
.text:00418F60
.text:00418F60 ; ---------------------------------------------------------------------------
.text:00418F66                 align 10h
.text:00418F70
.text:00418F70 ; =============== S U B R O U T I N E =======================================
.text:00418F70
.text:00418F70 ; Attributes: thunk
.text:00418F70
.text:00418F70 ; DWORD __stdcall GetVersion()
.text:00418F70 GetVersion      proc near               ; CODE XREF: .text:00414FE3↑p
.text:00418F70                 jmp     ds:__imp_GetVersion
.text:00418F70 GetVersion      endp
.text:00418F70
.text:00418F70 ; ---------------------------------------------------------------------------
.text:00418F76                 align 10h
.text:00418F80
.text:00418F80 ; =============== S U B R O U T I N E =======================================
.text:00418F80
.text:00418F80 ; Attributes: thunk
.text:00418F80
.text:00418F80 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:00418F80 GetVersionExA   proc near               ; CODE XREF: sub_415070+32↑p
.text:00418F80                                         ; sub_415070+20B↑p
.text:00418F80
.text:00418F80 lpVersionInformation= dword ptr  4
.text:00418F80
.text:00418F80                 jmp     ds:__imp_GetVersionExA
.text:00418F80 GetVersionExA   endp
.text:00418F80
.text:00418F80 ; ---------------------------------------------------------------------------
.text:00418F86                 align 10h
.text:00418F90
.text:00418F90 ; =============== S U B R O U T I N E =======================================
.text:00418F90
.text:00418F90 ; Attributes: thunk
.text:00418F90
.text:00418F90 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:00418F90 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0041570F↑p
.text:00418F90                                         ; .text:0041573E↑p ...
.text:00418F90
.text:00418F90 nBufferLength   = dword ptr  4
.text:00418F90 lpBuffer        = dword ptr  8
.text:00418F90
.text:00418F90                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:00418F90 GetLogicalDriveStringsA endp
.text:00418F90
.text:00418F90 ; ---------------------------------------------------------------------------
.text:00418F96                 align 10h
.text:00418FA0
.text:00418FA0 ; =============== S U B R O U T I N E =======================================
.text:00418FA0
.text:00418FA0 ; Attributes: thunk
.text:00418FA0
.text:00418FA0 ; HANDLE __stdcall GetProcessHeap()
.text:00418FA0 GetProcessHeap  proc near               ; CODE XREF: .text:00415719↑p
.text:00418FA0                                         ; sub_415DF0+24↑p ...
.text:00418FA0                 jmp     ds:__imp_GetProcessHeap
.text:00418FA0 GetProcessHeap  endp
.text:00418FA0
.text:00418FA0 ; ---------------------------------------------------------------------------
.text:00418FA6                 align 10h
.text:00418FB0
.text:00418FB0 ; =============== S U B R O U T I N E =======================================
.text:00418FB0
.text:00418FB0 ; Attributes: thunk
.text:00418FB0
.text:00418FB0 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:00418FB0 HeapAlloc       proc near               ; CODE XREF: .text:0041572D↑p
.text:00418FB0                                         ; sub_415DF0+38↑p ...
.text:00418FB0
.text:00418FB0 hHeap           = dword ptr  4
.text:00418FB0 dwFlags         = dword ptr  8
.text:00418FB0 dwBytes         = dword ptr  0Ch
.text:00418FB0
.text:00418FB0                 jmp     ds:__imp_HeapAlloc
.text:00418FB0 HeapAlloc       endp
.text:00418FB0
.text:00418FB0 ; ---------------------------------------------------------------------------
.text:00418FB6                 align 10h
.text:00418FC0
.text:00418FC0 ; =============== S U B R O U T I N E =======================================
.text:00418FC0
.text:00418FC0 ; Attributes: thunk
.text:00418FC0
.text:00418FC0 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:00418FC0 HeapFree        proc near               ; CODE XREF: .text:00415F2D↑p
.text:00418FC0
.text:00418FC0 hHeap           = dword ptr  4
.text:00418FC0 dwFlags         = dword ptr  8
.text:00418FC0 lpMem           = dword ptr  0Ch
.text:00418FC0
.text:00418FC0                 jmp     ds:__imp_HeapFree
.text:00418FC0 HeapFree        endp
.text:00418FC0
.text:00418FC0 ; ---------------------------------------------------------------------------
.text:00418FC6                 align 10h
.text:00418FD0
.text:00418FD0 ; =============== S U B R O U T I N E =======================================
.text:00418FD0
.text:00418FD0 ; Attributes: thunk
.text:00418FD0
.text:00418FD0 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:00418FD0 UnlockFile      proc near               ; CODE XREF: sub_4160C0+40↑p
.text:00418FD0
.text:00418FD0 hFile           = dword ptr  4
.text:00418FD0 dwFileOffsetLow = dword ptr  8
.text:00418FD0 dwFileOffsetHigh= dword ptr  0Ch
.text:00418FD0 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:00418FD0 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:00418FD0
.text:00418FD0                 jmp     ds:__imp_UnlockFile
.text:00418FD0 UnlockFile      endp
.text:00418FD0
.text:00418FD0 ; ---------------------------------------------------------------------------
.text:00418FD6                 align 10h
.text:00418FE0
.text:00418FE0 ; =============== S U B R O U T I N E =======================================
.text:00418FE0
.text:00418FE0 ; Attributes: thunk
.text:00418FE0
.text:00418FE0 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:00418FE0 CreateDirectoryA proc near              ; CODE XREF: sub_416A40+22↑p
.text:00418FE0
.text:00418FE0 lpPathName      = dword ptr  4
.text:00418FE0 lpSecurityAttributes= dword ptr  8
.text:00418FE0
.text:00418FE0                 jmp     ds:__imp_CreateDirectoryA
.text:00418FE0 CreateDirectoryA endp
.text:00418FE0
.text:00418FE0 ; ---------------------------------------------------------------------------
.text:00418FE6                 align 10h
.text:00418FF0
.text:00418FF0 ; =============== S U B R O U T I N E =======================================
.text:00418FF0
.text:00418FF0 ; Attributes: thunk
.text:00418FF0
.text:00418FF0 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:00418FF0 GetTimeZoneInformation proc near        ; CODE XREF: sub_416B40+22↑p
.text:00418FF0
.text:00418FF0 lpTimeZoneInformation= dword ptr  4
.text:00418FF0
.text:00418FF0                 jmp     ds:__imp_GetTimeZoneInformation
.text:00418FF0 GetTimeZoneInformation endp
.text:00418FF0
.text:00418FF0 ; ---------------------------------------------------------------------------
.text:00418FF6                 align 10h
.text:00419000
.text:00419000 ; =============== S U B R O U T I N E =======================================
.text:00419000
.text:00419000 ; Attributes: thunk
.text:00419000
.text:00419000 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:00419000 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_416B40+4F↑p
.text:00419000
.text:00419000 lpSystemTimeAsFileTime= dword ptr  4
.text:00419000
.text:00419000                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:00419000 GetSystemTimeAsFileTime endp
.text:00419000
.text:00419000 ; ---------------------------------------------------------------------------
.text:00419006                 align 10h
.text:00419010
.text:00419010 ; =============== S U B R O U T I N E =======================================
.text:00419010
.text:00419010 ; Attributes: thunk
.text:00419010
.text:00419010 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:00419010 RegOpenKeyExA   proc near               ; CODE XREF: .text:00414BE1↑p
.text:00419010
.text:00419010 hKey            = dword ptr  4
.text:00419010 lpSubKey        = dword ptr  8
.text:00419010 ulOptions       = dword ptr  0Ch
.text:00419010 samDesired      = dword ptr  10h
.text:00419010 phkResult       = dword ptr  14h
.text:00419010
.text:00419010                 jmp     ds:__imp_RegOpenKeyExA
.text:00419010 RegOpenKeyExA   endp
.text:00419010
.text:00419010 ; ---------------------------------------------------------------------------
.text:00419016                 align 10h
.text:00419020
.text:00419020 ; =============== S U B R O U T I N E =======================================
.text:00419020
.text:00419020 ; Attributes: thunk
.text:00419020
.text:00419020 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:00419020 RegQueryValueExA proc near              ; CODE XREF: .text:00414C24↑p
.text:00419020
.text:00419020 hKey            = dword ptr  4
.text:00419020 lpValueName     = dword ptr  8
.text:00419020 lpReserved      = dword ptr  0Ch
.text:00419020 lpType          = dword ptr  10h
.text:00419020 lpData          = dword ptr  14h
.text:00419020 lpcbData        = dword ptr  18h
.text:00419020
.text:00419020                 jmp     ds:__imp_RegQueryValueExA
.text:00419020 RegQueryValueExA endp
.text:00419020
.text:00419020 ; ---------------------------------------------------------------------------
.text:00419026                 align 10h
.text:00419030
.text:00419030 ; =============== S U B R O U T I N E =======================================
.text:00419030
.text:00419030 ; Attributes: thunk
.text:00419030
.text:00419030 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:00419030 RegCloseKey     proc near               ; CODE XREF: .text:00414C48↑p
.text:00419030
.text:00419030 hKey            = dword ptr  4
.text:00419030
.text:00419030                 jmp     ds:__imp_RegCloseKey
.text:00419030 RegCloseKey     endp
.text:00419030
.text:00419030 ; ---------------------------------------------------------------------------
.text:00419036                 db 2 dup(90h)
.text:00419038                 dd 2 dup(0)
.text:00419040                 dd 21400h, 0
.text:00419048                 dd 0C0h, 46000000h
.text:00419050 ; const IID rclsid
.text:00419050 rclsid          dd 21401h               ; Data1
.text:00419050                                         ; DATA XREF: sub_4131D0+4B↑o
.text:00419050                 dw 0                    ; Data2
.text:00419050                 dw 0                    ; Data3
.text:00419050                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00419060                 dd 214A0h, 0
.text:00419068                 dd 0C0h, 46000000h, 214A1h, 0
.text:00419078                 dd 0C0h, 46000000h, 214D0h, 0
.text:00419088                 dd 0C0h, 46000000h, 214D1h, 0
.text:00419098                 dd 0C0h, 46000000h, 214D2h, 0
.text:004190A8                 dd 0C0h, 46000000h, 214E1h, 0
.text:004190B8                 dd 0C0h, 46000000h, 214E2h, 0
.text:004190C8                 dd 0C0h, 46000000h, 214E3h, 0
.text:004190D8                 dd 0C0h, 46000000h, 214E4h, 0
.text:004190E8                 dd 0C0h, 46000000h, 21500h, 0
.text:004190F8                 dd 0C0h, 46000000h, 214E5h, 0
.text:00419108                 dd 0C0h, 46000000h, 214E6h, 0
.text:00419118                 dd 0C0h, 46000000h, 214E8h, 0
.text:00419128                 dd 0C0h, 46000000h, 214E9h, 0
.text:00419138                 dd 0C0h, 46000000h, 214EAh, 0
.text:00419148                 dd 0C0h, 46000000h, 214EBh, 0
.text:00419158                 dd 0C0h, 46000000h
.text:00419160 ; const IID riid
.text:00419160 riid            dd 214EEh               ; Data1
.text:00419160                                         ; DATA XREF: sub_4131D0+2B↑o
.text:00419160                 dw 0                    ; Data2
.text:00419160                 dw 0                    ; Data3
.text:00419160                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:00419170                 dd 214EFh, 0
.text:00419178                 dd 0C0h, 46000000h, 214F0h, 0
.text:00419188                 dd 0C0h, 46000000h, 214F1h, 0
.text:00419198                 dd 0C0h, 46000000h, 214F2h, 0
.text:004191A8                 dd 0C0h, 46000000h, 214F3h, 0
.text:004191B8                 dd 0C0h, 46000000h, 214F4h, 0
.text:004191C8                 dd 0C0h, 46000000h, 214F5h, 0
.text:004191D8                 dd 0C0h, 46000000h, 214F6h, 0
.text:004191E8                 dd 0C0h, 46000000h, 214F7h, 0
.text:004191F8                 dd 0C0h, 46000000h, 214F8h, 0
.text:00419208                 dd 0C0h, 46000000h, 214F9h, 0
.text:00419218                 dd 0C0h, 46000000h, 214FAh, 0
.text:00419228                 dd 0C0h, 46000000h, 214FBh, 0
.text:00419238                 dd 0C0h, 46000000h, 214FCh, 0
.text:00419248                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:00419248                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:00419248                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:00419248                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:00419248                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00419248                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:00419248                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:00419248                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:00419248                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:00419248                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:00419318                 dd 0C0h, 46000000h, 2DF05h, 0
.text:00419328                 dd 0C0h, 46000000h, 2DF06h, 0
.text:00419338                 dd 0C0h, 46000000h, 2DF01h, 0
.text:00419348                 dd 0C0h, 46000000h, 2DF09h, 0
.text:00419358                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:00419358                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:00419358                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:00419358                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:00419358                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:00419358                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:00419358                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:004193E0 dword_4193E0    dd 0FFFFFFFFh           ; DATA XREF: .text:00418589↑r
.text:004193E0                                         ; .text:loc_4185B0↑r ...
.text:004193E4 dword_4193E4    dd 0                    ; DATA XREF: .text:loc_4185BC↑r
.text:004193E4                                         ; sub_4185E0:loc_41862D↑r
.text:004193E8                 dd 0FFFFFFFFh
.text:004193EC dword_4193EC    dd 5 dup(0)             ; DATA XREF: .data:off_41A0F4↓o
.text:00419400                 dd 300h dup(?)
.text:00419400 _text           ends
.text:00419400
.data:0041A000 ; Section 2. (virtual address 0001A000)
.data:0041A000 ; Virtual size                  : 00000110 (    272.)
.data:0041A000 ; Section size in file          : 00000200 (    512.)
.data:0041A000 ; Offset to raw data for section: 00018800
.data:0041A000 ; Flags C0000040: Data Readable Writable
.data:0041A000 ; Alignment     : default
.data:0041A000 ; ===========================================================================
.data:0041A000
.data:0041A000 ; Segment type: Pure data
.data:0041A000 ; Segment permissions: Read/Write
.data:0041A000 _data           segment para public 'DATA' use32
.data:0041A000                 assume cs:_data
.data:0041A000                 ;org 41A000h
.data:0041A000 dword_41A000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0041A000                                         ; sub_401080+CC↑r
.data:0041A004 dword_41A004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0041A004                                         ; sub_401080+D4↑r
.data:0041A008                 align 10h
.data:0041A010 dword_41A010    dd 2                    ; DATA XREF: sub_401FE0+F6↑r
.data:0041A010                                         ; sub_401FE0+13C↑w ...
.data:0041A014                 align 10h
.data:0041A020 dword_41A020    dd 1                    ; DATA XREF: sub_4019A0:loc_401CCD↑r
.data:0041A020                                         ; sub_4019A0:loc_401D79↑r ...
.data:0041A024 dword_41A024    dd 1                    ; DATA XREF: sub_405600+11↑r
.data:0041A024                                         ; .text:004056A1↑r
.data:0041A028 dword_41A028    dd 3Fh                  ; DATA XREF: sub_405600+7D↑w
.data:0041A028                                         ; .text:0040570D↑w
.data:0041A02C                 align 10h
.data:0041A030 ; char *Buffer
.data:0041A030 Buffer          dd offset aCopyrightC2005
.data:0041A030                                         ; DATA XREF: sub_405B90+DC↑r
.data:0041A030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0041A034                 align 10h
.data:0041A040 dword_41A040    dd 1                    ; DATA XREF: sub_408640+22↑r
.data:0041A040                                         ; sub_408640+65↑r ...
.data:0041A044 dword_41A044    dd 100h                 ; DATA XREF: sub_408640+3F↑o
.data:0041A044                                         ; sub_408640+1A2↑r ...
.data:0041A048 off_41A048      dd offset unk_41B280    ; DATA XREF: sub_408640+1AA↑r
.data:0041A04C ; void *off_41A04C
.data:0041A04C off_41A04C      dd offset dword_41A044  ; DATA XREF: sub_408640+39↑r
.data:0041A04C                                         ; sub_408640+60↑w ...
.data:0041A050 ; int dword_41A050
.data:0041A050 dword_41A050    dd 1                    ; DATA XREF: sub_405F10+6D↑r
.data:0041A050                                         ; sub_405F10+9A↑r ...
.data:0041A054                 align 10h
.data:0041A060 dword_41A060    dd 0FA0h                ; DATA XREF: sub_4095E0:loc_40A65B↑r
.data:0041A060                                         ; sub_4095E0:loc_40A809↑r ...
.data:0041A064                 align 10h
.data:0041A070 dword_41A070    dd 200h                 ; DATA XREF: sub_410EB0+2ED↑r
.data:0041A070                                         ; sub_410EB0+2F8↑r ...
.data:0041A074 ; char *off_41A074
.data:0041A074 off_41A074      dd offset aComExeBatCmd ; DATA XREF: sub_411380+3D3↑r
.data:0041A074                                         ; sub_411380+400↑r ...
.data:0041A074                                         ; ".com;.exe;.bat;.cmd"
.data:0041A078                 align 10h
.data:0041A080 byte_41A080     db 41h                  ; DATA XREF: sub_413C00+6B↑w
.data:0041A080                                         ; sub_413C00:loc_413D14↑r
.data:0041A081                 align 10h
.data:0041A090 dword_41A090    dd 1                    ; DATA XREF: .text:loc_414A97↑r
.data:0041A090                                         ; sub_415070+202↑w
.data:0041A094                 align 10h
.data:0041A0A0 off_41A0A0      dd offset aNotset       ; DATA XREF: .text:004152EA↑r
.data:0041A0A0                                         ; .text:00415F32↑r
.data:0041A0A0                                         ; "notset"
.data:0041A0A4 off_41A0A4      dd offset aNotset       ; DATA XREF: .text:00415302↑r
.data:0041A0A4                                         ; .text:00415324↑r ...
.data:0041A0A4                                         ; "notset"
.data:0041A0A8                 align 10h
.data:0041A0B0 off_41A0B0      dd offset sub_417010    ; DATA XREF: sub_416C30:loc_416CB0↑r
.data:0041A0B0                                         ; .text:loc_416D50↑r ...
.data:0041A0B4 ; int Code
.data:0041A0B4 Code            dd 1                    ; DATA XREF: sub_417010+1C↑r
.data:0041A0B8                 align 10h
.data:0041A0C0 dword_41A0C0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0041A0C4                 align 10h
.data:0041A0D0 ; int Mode
.data:0041A0D0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0041A0D0                                         ; sub_401080+80↑r ...
.data:0041A0D4                 align 10h
.data:0041A0E0 dword_41A0E0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0041A0E0                                         ; sub_401080+BA↑r
.data:0041A0E4                 align 10h
.data:0041A0F0 dword_41A0F0    dd 0                    ; DATA XREF: sub_4185E0+9↑r
.data:0041A0F0                                         ; sub_4185E0+1D↑w
.data:0041A0F4 off_41A0F4      dd offset dword_4193EC  ; DATA XREF: sub_418550+6↑r
.data:0041A0F4                                         ; sub_418550+17↑r ...
.data:0041A0F8                 align 1000h
.data:0041A0F8 _data           ends
.data:0041A0F8
.bss:0041B000 ; Section 3. (virtual address 0001B000)
.bss:0041B000 ; Virtual size                  : 00000960 (   2400.)
.bss:0041B000 ; Section size in file          : 00000000 (      0.)
.bss:0041B000 ; Offset to raw data for section: 00000000
.bss:0041B000 ; Flags C0000080: Bss Readable Writable
.bss:0041B000 ; Alignment     : default
.bss:0041B000 ; ===========================================================================
.bss:0041B000
.bss:0041B000 ; Segment type: Uninitialized
.bss:0041B000 ; Segment permissions: Read/Write
.bss:0041B000 _bss            segment para public 'BSS' use32
.bss:0041B000                 assume cs:_bss
.bss:0041B000                 ;org 41B000h
.bss:0041B000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0041B000 unk_41B000      db    ? ;               ; DATA XREF: sub_4019A0:loc_401D66↑o
.bss:0041B000                                         ; sub_418510+1↑o ...
.bss:0041B001                 db    ? ;
.bss:0041B002                 db    ? ;
.bss:0041B003                 db    ? ;
.bss:0041B004                 db    ? ;
.bss:0041B005                 db    ? ;
.bss:0041B006                 db    ? ;
.bss:0041B007                 db    ? ;
.bss:0041B008                 db    ? ;
.bss:0041B009                 db    ? ;
.bss:0041B00A                 db    ? ;
.bss:0041B00B                 db    ? ;
.bss:0041B00C                 db    ? ;
.bss:0041B00D                 db    ? ;
.bss:0041B00E                 db    ? ;
.bss:0041B00F                 db    ? ;
.bss:0041B010 ; char *Block
.bss:0041B010 Block           dd ?                    ; DATA XREF: sub_403390+3A↑r
.bss:0041B010                                         ; sub_403390+63↑r ...
.bss:0041B014                 align 10h
.bss:0041B020 dword_41B020    dd ?                    ; DATA XREF: sub_403390+25↑r
.bss:0041B020                                         ; sub_403390+C4↑w
.bss:0041B024                 align 10h
.bss:0041B030 dword_41B030    dd ?                    ; DATA XREF: sub_403390+100↑o
.bss:0041B030                                         ; sub_403390+12F↑o ...
.bss:0041B034 byte_41B034     db ?                    ; DATA XREF: sub_403390+150↑w
.bss:0041B035                 db    ? ;
.bss:0041B036                 db    ? ;
.bss:0041B037                 db    ? ;
.bss:0041B038                 db    ? ;
.bss:0041B039                 db    ? ;
.bss:0041B03A                 db    ? ;
.bss:0041B03B                 db    ? ;
.bss:0041B03C                 db    ? ;
.bss:0041B03D                 db    ? ;
.bss:0041B03E                 db    ? ;
.bss:0041B03F                 db    ? ;
.bss:0041B040                 db    ? ;
.bss:0041B041                 db    ? ;
.bss:0041B042                 db    ? ;
.bss:0041B043                 db    ? ;
.bss:0041B044                 db    ? ;
.bss:0041B045                 db    ? ;
.bss:0041B046                 db    ? ;
.bss:0041B047                 db    ? ;
.bss:0041B048                 db    ? ;
.bss:0041B049                 db    ? ;
.bss:0041B04A                 db    ? ;
.bss:0041B04B                 db    ? ;
.bss:0041B04C                 db    ? ;
.bss:0041B04D                 db    ? ;
.bss:0041B04E                 db    ? ;
.bss:0041B04F                 db    ? ;
.bss:0041B050                 db    ? ;
.bss:0041B051                 db    ? ;
.bss:0041B052                 db    ? ;
.bss:0041B053                 db    ? ;
.bss:0041B054                 db    ? ;
.bss:0041B055                 db    ? ;
.bss:0041B056                 db    ? ;
.bss:0041B057                 db    ? ;
.bss:0041B058                 db    ? ;
.bss:0041B059                 db    ? ;
.bss:0041B05A                 db    ? ;
.bss:0041B05B                 db    ? ;
.bss:0041B05C                 db    ? ;
.bss:0041B05D                 db    ? ;
.bss:0041B05E                 db    ? ;
.bss:0041B05F                 db    ? ;
.bss:0041B060                 db    ? ;
.bss:0041B061                 db    ? ;
.bss:0041B062                 db    ? ;
.bss:0041B063                 db    ? ;
.bss:0041B064                 db    ? ;
.bss:0041B065                 db    ? ;
.bss:0041B066                 db    ? ;
.bss:0041B067                 db    ? ;
.bss:0041B068                 db    ? ;
.bss:0041B069                 db    ? ;
.bss:0041B06A                 db    ? ;
.bss:0041B06B                 db    ? ;
.bss:0041B06C                 db    ? ;
.bss:0041B06D                 db    ? ;
.bss:0041B06E                 db    ? ;
.bss:0041B06F                 db    ? ;
.bss:0041B070                 db    ? ;
.bss:0041B071                 db    ? ;
.bss:0041B072                 db    ? ;
.bss:0041B073                 db    ? ;
.bss:0041B074                 db    ? ;
.bss:0041B075                 db    ? ;
.bss:0041B076                 db    ? ;
.bss:0041B077                 db    ? ;
.bss:0041B078                 db    ? ;
.bss:0041B079                 db    ? ;
.bss:0041B07A                 db    ? ;
.bss:0041B07B                 db    ? ;
.bss:0041B07C                 db    ? ;
.bss:0041B07D                 db    ? ;
.bss:0041B07E                 db    ? ;
.bss:0041B07F                 db    ? ;
.bss:0041B080                 db    ? ;
.bss:0041B081                 db    ? ;
.bss:0041B082                 db    ? ;
.bss:0041B083                 db    ? ;
.bss:0041B084                 db    ? ;
.bss:0041B085                 db    ? ;
.bss:0041B086                 db    ? ;
.bss:0041B087                 db    ? ;
.bss:0041B088                 db    ? ;
.bss:0041B089                 db    ? ;
.bss:0041B08A                 db    ? ;
.bss:0041B08B                 db    ? ;
.bss:0041B08C                 db    ? ;
.bss:0041B08D                 db    ? ;
.bss:0041B08E                 db    ? ;
.bss:0041B08F                 db    ? ;
.bss:0041B090                 db    ? ;
.bss:0041B091                 db    ? ;
.bss:0041B092                 db    ? ;
.bss:0041B093                 db    ? ;
.bss:0041B094                 db    ? ;
.bss:0041B095                 db    ? ;
.bss:0041B096                 db    ? ;
.bss:0041B097                 db    ? ;
.bss:0041B098                 db    ? ;
.bss:0041B099                 db    ? ;
.bss:0041B09A                 db    ? ;
.bss:0041B09B                 db    ? ;
.bss:0041B09C                 db    ? ;
.bss:0041B09D                 db    ? ;
.bss:0041B09E                 db    ? ;
.bss:0041B09F                 db    ? ;
.bss:0041B0A0                 db    ? ;
.bss:0041B0A1                 db    ? ;
.bss:0041B0A2                 db    ? ;
.bss:0041B0A3                 db    ? ;
.bss:0041B0A4                 db    ? ;
.bss:0041B0A5                 db    ? ;
.bss:0041B0A6                 db    ? ;
.bss:0041B0A7                 db    ? ;
.bss:0041B0A8                 db    ? ;
.bss:0041B0A9                 db    ? ;
.bss:0041B0AA                 db    ? ;
.bss:0041B0AB                 db    ? ;
.bss:0041B0AC                 db    ? ;
.bss:0041B0AD                 db    ? ;
.bss:0041B0AE                 db    ? ;
.bss:0041B0AF                 db    ? ;
.bss:0041B0B0                 db    ? ;
.bss:0041B0B1                 db    ? ;
.bss:0041B0B2                 db    ? ;
.bss:0041B0B3                 db    ? ;
.bss:0041B0B4                 db    ? ;
.bss:0041B0B5                 db    ? ;
.bss:0041B0B6                 db    ? ;
.bss:0041B0B7                 db    ? ;
.bss:0041B0B8                 db    ? ;
.bss:0041B0B9                 db    ? ;
.bss:0041B0BA                 db    ? ;
.bss:0041B0BB                 db    ? ;
.bss:0041B0BC                 db    ? ;
.bss:0041B0BD                 db    ? ;
.bss:0041B0BE                 db    ? ;
.bss:0041B0BF                 db    ? ;
.bss:0041B0C0                 db    ? ;
.bss:0041B0C1                 db    ? ;
.bss:0041B0C2                 db    ? ;
.bss:0041B0C3                 db    ? ;
.bss:0041B0C4                 db    ? ;
.bss:0041B0C5                 db    ? ;
.bss:0041B0C6                 db    ? ;
.bss:0041B0C7                 db    ? ;
.bss:0041B0C8                 db    ? ;
.bss:0041B0C9                 db    ? ;
.bss:0041B0CA                 db    ? ;
.bss:0041B0CB                 db    ? ;
.bss:0041B0CC                 db    ? ;
.bss:0041B0CD                 db    ? ;
.bss:0041B0CE                 db    ? ;
.bss:0041B0CF                 db    ? ;
.bss:0041B0D0                 db    ? ;
.bss:0041B0D1                 db    ? ;
.bss:0041B0D2                 db    ? ;
.bss:0041B0D3                 db    ? ;
.bss:0041B0D4                 db    ? ;
.bss:0041B0D5                 db    ? ;
.bss:0041B0D6                 db    ? ;
.bss:0041B0D7                 db    ? ;
.bss:0041B0D8                 db    ? ;
.bss:0041B0D9                 db    ? ;
.bss:0041B0DA                 db    ? ;
.bss:0041B0DB                 db    ? ;
.bss:0041B0DC                 db    ? ;
.bss:0041B0DD                 db    ? ;
.bss:0041B0DE                 db    ? ;
.bss:0041B0DF                 db    ? ;
.bss:0041B0E0                 db    ? ;
.bss:0041B0E1                 db    ? ;
.bss:0041B0E2                 db    ? ;
.bss:0041B0E3                 db    ? ;
.bss:0041B0E4                 db    ? ;
.bss:0041B0E5                 db    ? ;
.bss:0041B0E6                 db    ? ;
.bss:0041B0E7                 db    ? ;
.bss:0041B0E8                 db    ? ;
.bss:0041B0E9                 db    ? ;
.bss:0041B0EA                 db    ? ;
.bss:0041B0EB                 db    ? ;
.bss:0041B0EC                 db    ? ;
.bss:0041B0ED                 db    ? ;
.bss:0041B0EE                 db    ? ;
.bss:0041B0EF                 db    ? ;
.bss:0041B0F0                 db    ? ;
.bss:0041B0F1                 db    ? ;
.bss:0041B0F2                 db    ? ;
.bss:0041B0F3                 db    ? ;
.bss:0041B0F4                 db    ? ;
.bss:0041B0F5                 db    ? ;
.bss:0041B0F6                 db    ? ;
.bss:0041B0F7                 db    ? ;
.bss:0041B0F8                 db    ? ;
.bss:0041B0F9                 db    ? ;
.bss:0041B0FA                 db    ? ;
.bss:0041B0FB                 db    ? ;
.bss:0041B0FC                 db    ? ;
.bss:0041B0FD                 db    ? ;
.bss:0041B0FE                 db    ? ;
.bss:0041B0FF                 db    ? ;
.bss:0041B100                 db    ? ;
.bss:0041B101                 db    ? ;
.bss:0041B102                 db    ? ;
.bss:0041B103                 db    ? ;
.bss:0041B104                 db    ? ;
.bss:0041B105                 db    ? ;
.bss:0041B106                 db    ? ;
.bss:0041B107                 db    ? ;
.bss:0041B108                 db    ? ;
.bss:0041B109                 db    ? ;
.bss:0041B10A                 db    ? ;
.bss:0041B10B                 db    ? ;
.bss:0041B10C                 db    ? ;
.bss:0041B10D                 db    ? ;
.bss:0041B10E                 db    ? ;
.bss:0041B10F                 db    ? ;
.bss:0041B110                 db    ? ;
.bss:0041B111                 db    ? ;
.bss:0041B112                 db    ? ;
.bss:0041B113                 db    ? ;
.bss:0041B114                 db    ? ;
.bss:0041B115                 db    ? ;
.bss:0041B116                 db    ? ;
.bss:0041B117                 db    ? ;
.bss:0041B118                 db    ? ;
.bss:0041B119                 db    ? ;
.bss:0041B11A                 db    ? ;
.bss:0041B11B                 db    ? ;
.bss:0041B11C                 db    ? ;
.bss:0041B11D                 db    ? ;
.bss:0041B11E                 db    ? ;
.bss:0041B11F                 db    ? ;
.bss:0041B120                 db    ? ;
.bss:0041B121                 db    ? ;
.bss:0041B122                 db    ? ;
.bss:0041B123                 db    ? ;
.bss:0041B124                 db    ? ;
.bss:0041B125                 db    ? ;
.bss:0041B126                 db    ? ;
.bss:0041B127                 db    ? ;
.bss:0041B128                 db    ? ;
.bss:0041B129                 db    ? ;
.bss:0041B12A                 db    ? ;
.bss:0041B12B                 db    ? ;
.bss:0041B12C                 db    ? ;
.bss:0041B12D                 db    ? ;
.bss:0041B12E                 db    ? ;
.bss:0041B12F                 db    ? ;
.bss:0041B130                 db    ? ;
.bss:0041B131                 db    ? ;
.bss:0041B132                 db    ? ;
.bss:0041B133                 db    ? ;
.bss:0041B134                 db    ? ;
.bss:0041B135                 db    ? ;
.bss:0041B136                 db    ? ;
.bss:0041B137                 db    ? ;
.bss:0041B138                 db    ? ;
.bss:0041B139                 db    ? ;
.bss:0041B13A                 db    ? ;
.bss:0041B13B                 db    ? ;
.bss:0041B13C                 db    ? ;
.bss:0041B13D                 db    ? ;
.bss:0041B13E                 db    ? ;
.bss:0041B13F                 db    ? ;
.bss:0041B140                 db    ? ;
.bss:0041B141                 db    ? ;
.bss:0041B142                 db    ? ;
.bss:0041B143                 db    ? ;
.bss:0041B144                 db    ? ;
.bss:0041B145                 db    ? ;
.bss:0041B146                 db    ? ;
.bss:0041B147                 db    ? ;
.bss:0041B148                 db    ? ;
.bss:0041B149                 db    ? ;
.bss:0041B14A                 db    ? ;
.bss:0041B14B                 db    ? ;
.bss:0041B14C                 db    ? ;
.bss:0041B14D                 db    ? ;
.bss:0041B14E                 db    ? ;
.bss:0041B14F                 db    ? ;
.bss:0041B150                 db    ? ;
.bss:0041B151                 db    ? ;
.bss:0041B152                 db    ? ;
.bss:0041B153                 db    ? ;
.bss:0041B154                 db    ? ;
.bss:0041B155                 db    ? ;
.bss:0041B156                 db    ? ;
.bss:0041B157                 db    ? ;
.bss:0041B158                 db    ? ;
.bss:0041B159                 db    ? ;
.bss:0041B15A                 db    ? ;
.bss:0041B15B                 db    ? ;
.bss:0041B15C                 db    ? ;
.bss:0041B15D                 db    ? ;
.bss:0041B15E                 db    ? ;
.bss:0041B15F                 db    ? ;
.bss:0041B160                 db    ? ;
.bss:0041B161                 db    ? ;
.bss:0041B162                 db    ? ;
.bss:0041B163                 db    ? ;
.bss:0041B164                 db    ? ;
.bss:0041B165                 db    ? ;
.bss:0041B166                 db    ? ;
.bss:0041B167                 db    ? ;
.bss:0041B168                 db    ? ;
.bss:0041B169                 db    ? ;
.bss:0041B16A                 db    ? ;
.bss:0041B16B                 db    ? ;
.bss:0041B16C                 db    ? ;
.bss:0041B16D                 db    ? ;
.bss:0041B16E                 db    ? ;
.bss:0041B16F                 db    ? ;
.bss:0041B170                 db    ? ;
.bss:0041B171                 db    ? ;
.bss:0041B172                 db    ? ;
.bss:0041B173                 db    ? ;
.bss:0041B174                 db    ? ;
.bss:0041B175                 db    ? ;
.bss:0041B176                 db    ? ;
.bss:0041B177                 db    ? ;
.bss:0041B178                 db    ? ;
.bss:0041B179                 db    ? ;
.bss:0041B17A                 db    ? ;
.bss:0041B17B                 db    ? ;
.bss:0041B17C                 db    ? ;
.bss:0041B17D                 db    ? ;
.bss:0041B17E                 db    ? ;
.bss:0041B17F                 db    ? ;
.bss:0041B180                 db    ? ;
.bss:0041B181                 db    ? ;
.bss:0041B182                 db    ? ;
.bss:0041B183                 db    ? ;
.bss:0041B184                 db    ? ;
.bss:0041B185                 db    ? ;
.bss:0041B186                 db    ? ;
.bss:0041B187                 db    ? ;
.bss:0041B188                 db    ? ;
.bss:0041B189                 db    ? ;
.bss:0041B18A                 db    ? ;
.bss:0041B18B                 db    ? ;
.bss:0041B18C                 db    ? ;
.bss:0041B18D                 db    ? ;
.bss:0041B18E                 db    ? ;
.bss:0041B18F                 db    ? ;
.bss:0041B190                 db    ? ;
.bss:0041B191                 db    ? ;
.bss:0041B192                 db    ? ;
.bss:0041B193                 db    ? ;
.bss:0041B194                 db    ? ;
.bss:0041B195                 db    ? ;
.bss:0041B196                 db    ? ;
.bss:0041B197                 db    ? ;
.bss:0041B198                 db    ? ;
.bss:0041B199                 db    ? ;
.bss:0041B19A                 db    ? ;
.bss:0041B19B                 db    ? ;
.bss:0041B19C                 db    ? ;
.bss:0041B19D                 db    ? ;
.bss:0041B19E                 db    ? ;
.bss:0041B19F                 db    ? ;
.bss:0041B1A0                 db    ? ;
.bss:0041B1A1                 db    ? ;
.bss:0041B1A2                 db    ? ;
.bss:0041B1A3                 db    ? ;
.bss:0041B1A4                 db    ? ;
.bss:0041B1A5                 db    ? ;
.bss:0041B1A6                 db    ? ;
.bss:0041B1A7                 db    ? ;
.bss:0041B1A8                 db    ? ;
.bss:0041B1A9                 db    ? ;
.bss:0041B1AA                 db    ? ;
.bss:0041B1AB                 db    ? ;
.bss:0041B1AC                 db    ? ;
.bss:0041B1AD                 db    ? ;
.bss:0041B1AE                 db    ? ;
.bss:0041B1AF                 db    ? ;
.bss:0041B1B0                 db    ? ;
.bss:0041B1B1                 db    ? ;
.bss:0041B1B2                 db    ? ;
.bss:0041B1B3                 db    ? ;
.bss:0041B1B4                 db    ? ;
.bss:0041B1B5                 db    ? ;
.bss:0041B1B6                 db    ? ;
.bss:0041B1B7                 db    ? ;
.bss:0041B1B8                 db    ? ;
.bss:0041B1B9                 db    ? ;
.bss:0041B1BA                 db    ? ;
.bss:0041B1BB                 db    ? ;
.bss:0041B1BC                 db    ? ;
.bss:0041B1BD                 db    ? ;
.bss:0041B1BE                 db    ? ;
.bss:0041B1BF                 db    ? ;
.bss:0041B1C0                 db    ? ;
.bss:0041B1C1                 db    ? ;
.bss:0041B1C2                 db    ? ;
.bss:0041B1C3                 db    ? ;
.bss:0041B1C4                 db    ? ;
.bss:0041B1C5                 db    ? ;
.bss:0041B1C6                 db    ? ;
.bss:0041B1C7                 db    ? ;
.bss:0041B1C8                 db    ? ;
.bss:0041B1C9                 db    ? ;
.bss:0041B1CA                 db    ? ;
.bss:0041B1CB                 db    ? ;
.bss:0041B1CC                 db    ? ;
.bss:0041B1CD                 db    ? ;
.bss:0041B1CE                 db    ? ;
.bss:0041B1CF                 db    ? ;
.bss:0041B1D0                 db    ? ;
.bss:0041B1D1                 db    ? ;
.bss:0041B1D2                 db    ? ;
.bss:0041B1D3                 db    ? ;
.bss:0041B1D4                 db    ? ;
.bss:0041B1D5                 db    ? ;
.bss:0041B1D6                 db    ? ;
.bss:0041B1D7                 db    ? ;
.bss:0041B1D8                 db    ? ;
.bss:0041B1D9                 db    ? ;
.bss:0041B1DA                 db    ? ;
.bss:0041B1DB                 db    ? ;
.bss:0041B1DC                 db    ? ;
.bss:0041B1DD                 db    ? ;
.bss:0041B1DE                 db    ? ;
.bss:0041B1DF                 db    ? ;
.bss:0041B1E0                 db    ? ;
.bss:0041B1E1                 db    ? ;
.bss:0041B1E2                 db    ? ;
.bss:0041B1E3                 db    ? ;
.bss:0041B1E4                 db    ? ;
.bss:0041B1E5                 db    ? ;
.bss:0041B1E6                 db    ? ;
.bss:0041B1E7                 db    ? ;
.bss:0041B1E8                 db    ? ;
.bss:0041B1E9                 db    ? ;
.bss:0041B1EA                 db    ? ;
.bss:0041B1EB                 db    ? ;
.bss:0041B1EC                 db    ? ;
.bss:0041B1ED                 db    ? ;
.bss:0041B1EE                 db    ? ;
.bss:0041B1EF                 db    ? ;
.bss:0041B1F0                 db    ? ;
.bss:0041B1F1                 db    ? ;
.bss:0041B1F2                 db    ? ;
.bss:0041B1F3                 db    ? ;
.bss:0041B1F4                 db    ? ;
.bss:0041B1F5                 db    ? ;
.bss:0041B1F6                 db    ? ;
.bss:0041B1F7                 db    ? ;
.bss:0041B1F8                 db    ? ;
.bss:0041B1F9                 db    ? ;
.bss:0041B1FA                 db    ? ;
.bss:0041B1FB                 db    ? ;
.bss:0041B1FC                 db    ? ;
.bss:0041B1FD                 db    ? ;
.bss:0041B1FE                 db    ? ;
.bss:0041B1FF                 db    ? ;
.bss:0041B200                 db    ? ;
.bss:0041B201                 db    ? ;
.bss:0041B202                 db    ? ;
.bss:0041B203                 db    ? ;
.bss:0041B204                 db    ? ;
.bss:0041B205                 db    ? ;
.bss:0041B206                 db    ? ;
.bss:0041B207                 db    ? ;
.bss:0041B208                 db    ? ;
.bss:0041B209                 db    ? ;
.bss:0041B20A                 db    ? ;
.bss:0041B20B                 db    ? ;
.bss:0041B20C                 db    ? ;
.bss:0041B20D                 db    ? ;
.bss:0041B20E                 db    ? ;
.bss:0041B20F                 db    ? ;
.bss:0041B210                 db    ? ;
.bss:0041B211                 db    ? ;
.bss:0041B212                 db    ? ;
.bss:0041B213                 db    ? ;
.bss:0041B214                 db    ? ;
.bss:0041B215                 db    ? ;
.bss:0041B216                 db    ? ;
.bss:0041B217                 db    ? ;
.bss:0041B218                 db    ? ;
.bss:0041B219                 db    ? ;
.bss:0041B21A                 db    ? ;
.bss:0041B21B                 db    ? ;
.bss:0041B21C                 db    ? ;
.bss:0041B21D                 db    ? ;
.bss:0041B21E                 db    ? ;
.bss:0041B21F                 db    ? ;
.bss:0041B220                 db    ? ;
.bss:0041B221                 db    ? ;
.bss:0041B222                 db    ? ;
.bss:0041B223                 db    ? ;
.bss:0041B224                 db    ? ;
.bss:0041B225                 db    ? ;
.bss:0041B226                 db    ? ;
.bss:0041B227                 db    ? ;
.bss:0041B228                 db    ? ;
.bss:0041B229                 db    ? ;
.bss:0041B22A                 db    ? ;
.bss:0041B22B                 db    ? ;
.bss:0041B22C                 db    ? ;
.bss:0041B22D                 db    ? ;
.bss:0041B22E                 db    ? ;
.bss:0041B22F                 db    ? ;
.bss:0041B230 dword_41B230    dd ?                    ; DATA XREF: sub_401FE0+A1↑w
.bss:0041B230                                         ; sub_401FE0:loc_402166↑r ...
.bss:0041B234                 align 10h
.bss:0041B240 dword_41B240    dd ?                    ; DATA XREF: sub_405600+9↑o
.bss:0041B240                                         ; sub_405600+17↑w ...
.bss:0041B244 dword_41B244    dd ?                    ; DATA XREF: sub_405600+21↑w
.bss:0041B244                                         ; .text:004056B9↑w
.bss:0041B248 dword_41B248    dd ?                    ; DATA XREF: sub_405600+77↑r
.bss:0041B248                                         ; .text:00405707↑r
.bss:0041B24C dword_41B24C    dd ?                    ; DATA XREF: sub_405600+6B↑r
.bss:0041B24C                                         ; .text:004056FB↑r
.bss:0041B250                 db    ? ;
.bss:0041B251                 db    ? ;
.bss:0041B252                 db    ? ;
.bss:0041B253                 db    ? ;
.bss:0041B254                 db    ? ;
.bss:0041B255                 db    ? ;
.bss:0041B256                 db    ? ;
.bss:0041B257                 db    ? ;
.bss:0041B258                 db    ? ;
.bss:0041B259                 db    ? ;
.bss:0041B25A                 db    ? ;
.bss:0041B25B                 db    ? ;
.bss:0041B25C                 db    ? ;
.bss:0041B25D                 db    ? ;
.bss:0041B25E                 db    ? ;
.bss:0041B25F                 db    ? ;
.bss:0041B260                 db    ? ;
.bss:0041B261                 db    ? ;
.bss:0041B262                 db    ? ;
.bss:0041B263                 db    ? ;
.bss:0041B264                 db    ? ;
.bss:0041B265                 db    ? ;
.bss:0041B266                 db    ? ;
.bss:0041B267                 db    ? ;
.bss:0041B268                 db    ? ;
.bss:0041B269                 db    ? ;
.bss:0041B26A                 db    ? ;
.bss:0041B26B                 db    ? ;
.bss:0041B26C                 db    ? ;
.bss:0041B26D                 db    ? ;
.bss:0041B26E                 db    ? ;
.bss:0041B26F                 db    ? ;
.bss:0041B270 ; char *dword_41B270
.bss:0041B270 dword_41B270    dd ?                    ; DATA XREF: .text:00405EE4↑w
.bss:0041B270                                         ; sub_405F10+58↑r
.bss:0041B274                 align 10h
.bss:0041B280 unk_41B280      db    ? ;               ; DATA XREF: sub_408640+100↑o
.bss:0041B280                                         ; .data:off_41A048↑o
.bss:0041B281                 db    ? ;
.bss:0041B282                 db    ? ;
.bss:0041B283                 db    ? ;
.bss:0041B284                 db    ? ;
.bss:0041B285                 db    ? ;
.bss:0041B286                 db    ? ;
.bss:0041B287                 db    ? ;
.bss:0041B288                 db    ? ;
.bss:0041B289                 db    ? ;
.bss:0041B28A                 db    ? ;
.bss:0041B28B                 db    ? ;
.bss:0041B28C                 db    ? ;
.bss:0041B28D                 db    ? ;
.bss:0041B28E                 db    ? ;
.bss:0041B28F                 db    ? ;
.bss:0041B290                 db    ? ;
.bss:0041B291                 db    ? ;
.bss:0041B292                 db    ? ;
.bss:0041B293                 db    ? ;
.bss:0041B294                 db    ? ;
.bss:0041B295                 db    ? ;
.bss:0041B296                 db    ? ;
.bss:0041B297                 db    ? ;
.bss:0041B298                 db    ? ;
.bss:0041B299                 db    ? ;
.bss:0041B29A                 db    ? ;
.bss:0041B29B                 db    ? ;
.bss:0041B29C                 db    ? ;
.bss:0041B29D                 db    ? ;
.bss:0041B29E                 db    ? ;
.bss:0041B29F                 db    ? ;
.bss:0041B2A0                 db    ? ;
.bss:0041B2A1                 db    ? ;
.bss:0041B2A2                 db    ? ;
.bss:0041B2A3                 db    ? ;
.bss:0041B2A4                 db    ? ;
.bss:0041B2A5                 db    ? ;
.bss:0041B2A6                 db    ? ;
.bss:0041B2A7                 db    ? ;
.bss:0041B2A8                 db    ? ;
.bss:0041B2A9                 db    ? ;
.bss:0041B2AA                 db    ? ;
.bss:0041B2AB                 db    ? ;
.bss:0041B2AC                 db    ? ;
.bss:0041B2AD                 db    ? ;
.bss:0041B2AE                 db    ? ;
.bss:0041B2AF                 db    ? ;
.bss:0041B2B0                 db    ? ;
.bss:0041B2B1                 db    ? ;
.bss:0041B2B2                 db    ? ;
.bss:0041B2B3                 db    ? ;
.bss:0041B2B4                 db    ? ;
.bss:0041B2B5                 db    ? ;
.bss:0041B2B6                 db    ? ;
.bss:0041B2B7                 db    ? ;
.bss:0041B2B8                 db    ? ;
.bss:0041B2B9                 db    ? ;
.bss:0041B2BA                 db    ? ;
.bss:0041B2BB                 db    ? ;
.bss:0041B2BC                 db    ? ;
.bss:0041B2BD                 db    ? ;
.bss:0041B2BE                 db    ? ;
.bss:0041B2BF                 db    ? ;
.bss:0041B2C0                 db    ? ;
.bss:0041B2C1                 db    ? ;
.bss:0041B2C2                 db    ? ;
.bss:0041B2C3                 db    ? ;
.bss:0041B2C4                 db    ? ;
.bss:0041B2C5                 db    ? ;
.bss:0041B2C6                 db    ? ;
.bss:0041B2C7                 db    ? ;
.bss:0041B2C8                 db    ? ;
.bss:0041B2C9                 db    ? ;
.bss:0041B2CA                 db    ? ;
.bss:0041B2CB                 db    ? ;
.bss:0041B2CC                 db    ? ;
.bss:0041B2CD                 db    ? ;
.bss:0041B2CE                 db    ? ;
.bss:0041B2CF                 db    ? ;
.bss:0041B2D0                 db    ? ;
.bss:0041B2D1                 db    ? ;
.bss:0041B2D2                 db    ? ;
.bss:0041B2D3                 db    ? ;
.bss:0041B2D4                 db    ? ;
.bss:0041B2D5                 db    ? ;
.bss:0041B2D6                 db    ? ;
.bss:0041B2D7                 db    ? ;
.bss:0041B2D8                 db    ? ;
.bss:0041B2D9                 db    ? ;
.bss:0041B2DA                 db    ? ;
.bss:0041B2DB                 db    ? ;
.bss:0041B2DC                 db    ? ;
.bss:0041B2DD                 db    ? ;
.bss:0041B2DE                 db    ? ;
.bss:0041B2DF                 db    ? ;
.bss:0041B2E0                 db    ? ;
.bss:0041B2E1                 db    ? ;
.bss:0041B2E2                 db    ? ;
.bss:0041B2E3                 db    ? ;
.bss:0041B2E4                 db    ? ;
.bss:0041B2E5                 db    ? ;
.bss:0041B2E6                 db    ? ;
.bss:0041B2E7                 db    ? ;
.bss:0041B2E8                 db    ? ;
.bss:0041B2E9                 db    ? ;
.bss:0041B2EA                 db    ? ;
.bss:0041B2EB                 db    ? ;
.bss:0041B2EC                 db    ? ;
.bss:0041B2ED                 db    ? ;
.bss:0041B2EE                 db    ? ;
.bss:0041B2EF                 db    ? ;
.bss:0041B2F0                 db    ? ;
.bss:0041B2F1                 db    ? ;
.bss:0041B2F2                 db    ? ;
.bss:0041B2F3                 db    ? ;
.bss:0041B2F4                 db    ? ;
.bss:0041B2F5                 db    ? ;
.bss:0041B2F6                 db    ? ;
.bss:0041B2F7                 db    ? ;
.bss:0041B2F8                 db    ? ;
.bss:0041B2F9                 db    ? ;
.bss:0041B2FA                 db    ? ;
.bss:0041B2FB                 db    ? ;
.bss:0041B2FC                 db    ? ;
.bss:0041B2FD                 db    ? ;
.bss:0041B2FE                 db    ? ;
.bss:0041B2FF                 db    ? ;
.bss:0041B300                 db    ? ;
.bss:0041B301                 db    ? ;
.bss:0041B302                 db    ? ;
.bss:0041B303                 db    ? ;
.bss:0041B304                 db    ? ;
.bss:0041B305                 db    ? ;
.bss:0041B306                 db    ? ;
.bss:0041B307                 db    ? ;
.bss:0041B308                 db    ? ;
.bss:0041B309                 db    ? ;
.bss:0041B30A                 db    ? ;
.bss:0041B30B                 db    ? ;
.bss:0041B30C                 db    ? ;
.bss:0041B30D                 db    ? ;
.bss:0041B30E                 db    ? ;
.bss:0041B30F                 db    ? ;
.bss:0041B310                 db    ? ;
.bss:0041B311                 db    ? ;
.bss:0041B312                 db    ? ;
.bss:0041B313                 db    ? ;
.bss:0041B314                 db    ? ;
.bss:0041B315                 db    ? ;
.bss:0041B316                 db    ? ;
.bss:0041B317                 db    ? ;
.bss:0041B318                 db    ? ;
.bss:0041B319                 db    ? ;
.bss:0041B31A                 db    ? ;
.bss:0041B31B                 db    ? ;
.bss:0041B31C                 db    ? ;
.bss:0041B31D                 db    ? ;
.bss:0041B31E                 db    ? ;
.bss:0041B31F                 db    ? ;
.bss:0041B320                 db    ? ;
.bss:0041B321                 db    ? ;
.bss:0041B322                 db    ? ;
.bss:0041B323                 db    ? ;
.bss:0041B324                 db    ? ;
.bss:0041B325                 db    ? ;
.bss:0041B326                 db    ? ;
.bss:0041B327                 db    ? ;
.bss:0041B328                 db    ? ;
.bss:0041B329                 db    ? ;
.bss:0041B32A                 db    ? ;
.bss:0041B32B                 db    ? ;
.bss:0041B32C                 db    ? ;
.bss:0041B32D                 db    ? ;
.bss:0041B32E                 db    ? ;
.bss:0041B32F                 db    ? ;
.bss:0041B330                 db    ? ;
.bss:0041B331                 db    ? ;
.bss:0041B332                 db    ? ;
.bss:0041B333                 db    ? ;
.bss:0041B334                 db    ? ;
.bss:0041B335                 db    ? ;
.bss:0041B336                 db    ? ;
.bss:0041B337                 db    ? ;
.bss:0041B338                 db    ? ;
.bss:0041B339                 db    ? ;
.bss:0041B33A                 db    ? ;
.bss:0041B33B                 db    ? ;
.bss:0041B33C                 db    ? ;
.bss:0041B33D                 db    ? ;
.bss:0041B33E                 db    ? ;
.bss:0041B33F                 db    ? ;
.bss:0041B340                 db    ? ;
.bss:0041B341                 db    ? ;
.bss:0041B342                 db    ? ;
.bss:0041B343                 db    ? ;
.bss:0041B344                 db    ? ;
.bss:0041B345                 db    ? ;
.bss:0041B346                 db    ? ;
.bss:0041B347                 db    ? ;
.bss:0041B348                 db    ? ;
.bss:0041B349                 db    ? ;
.bss:0041B34A                 db    ? ;
.bss:0041B34B                 db    ? ;
.bss:0041B34C                 db    ? ;
.bss:0041B34D                 db    ? ;
.bss:0041B34E                 db    ? ;
.bss:0041B34F                 db    ? ;
.bss:0041B350                 db    ? ;
.bss:0041B351                 db    ? ;
.bss:0041B352                 db    ? ;
.bss:0041B353                 db    ? ;
.bss:0041B354                 db    ? ;
.bss:0041B355                 db    ? ;
.bss:0041B356                 db    ? ;
.bss:0041B357                 db    ? ;
.bss:0041B358                 db    ? ;
.bss:0041B359                 db    ? ;
.bss:0041B35A                 db    ? ;
.bss:0041B35B                 db    ? ;
.bss:0041B35C                 db    ? ;
.bss:0041B35D                 db    ? ;
.bss:0041B35E                 db    ? ;
.bss:0041B35F                 db    ? ;
.bss:0041B360                 db    ? ;
.bss:0041B361                 db    ? ;
.bss:0041B362                 db    ? ;
.bss:0041B363                 db    ? ;
.bss:0041B364                 db    ? ;
.bss:0041B365                 db    ? ;
.bss:0041B366                 db    ? ;
.bss:0041B367                 db    ? ;
.bss:0041B368                 db    ? ;
.bss:0041B369                 db    ? ;
.bss:0041B36A                 db    ? ;
.bss:0041B36B                 db    ? ;
.bss:0041B36C                 db    ? ;
.bss:0041B36D                 db    ? ;
.bss:0041B36E                 db    ? ;
.bss:0041B36F                 db    ? ;
.bss:0041B370                 db    ? ;
.bss:0041B371                 db    ? ;
.bss:0041B372                 db    ? ;
.bss:0041B373                 db    ? ;
.bss:0041B374                 db    ? ;
.bss:0041B375                 db    ? ;
.bss:0041B376                 db    ? ;
.bss:0041B377                 db    ? ;
.bss:0041B378                 db    ? ;
.bss:0041B379                 db    ? ;
.bss:0041B37A                 db    ? ;
.bss:0041B37B                 db    ? ;
.bss:0041B37C                 db    ? ;
.bss:0041B37D                 db    ? ;
.bss:0041B37E                 db    ? ;
.bss:0041B37F                 db    ? ;
.bss:0041B380 dword_41B380    dd ?                    ; DATA XREF: .text:loc_407FD1↑o
.bss:0041B380                                         ; .text:loc_407FF0↑o ...
.bss:0041B384 dword_41B384    dd ?                    ; DATA XREF: .text:loc_408070↑o
.bss:0041B384                                         ; .text:004084F8↑r ...
.bss:0041B388 dword_41B388    dd ?                    ; DATA XREF: .text:004084F2↑r
.bss:0041B388                                         ; sub_4085A0+2C↑r
.bss:0041B38C dword_41B38C    dd ?                    ; DATA XREF: .text:004084E6↑r
.bss:0041B38C                                         ; sub_4085A0+22↑r
.bss:0041B390 dword_41B390    dd ?                    ; DATA XREF: .text:00408502↑r
.bss:0041B390                                         ; sub_4085A0+36↑r
.bss:0041B394 dword_41B394    dd ?                    ; DATA XREF: .text:00408512↑r
.bss:0041B394                                         ; sub_4085A0+4E↑r
.bss:0041B398 dword_41B398    dd ?                    ; DATA XREF: .text:0040852F↑r
.bss:0041B398                                         ; sub_4085A0+62↑r
.bss:0041B39C dword_41B39C    dd ?                    ; DATA XREF: .text:00408525↑r
.bss:0041B39C                                         ; sub_4085A0+70↑r
.bss:0041B3A0 dword_41B3A0    dd ?                    ; DATA XREF: .text:00408508↑r
.bss:0041B3A0                                         ; sub_4085A0+7A↑r
.bss:0041B3A4                 align 10h
.bss:0041B3B0 dword_41B3B0    dd ?                    ; DATA XREF: .text:00408F98↑r
.bss:0041B3B0                                         ; .text:loc_408FCA↑w ...
.bss:0041B3B4                 align 10h
.bss:0041B3C0 dword_41B3C0    dd ?                    ; DATA XREF: .text:0040901F↑r
.bss:0041B3C0                                         ; .text:0040904D↑w ...
.bss:0041B3C4                 align 10h
.bss:0041B3D0 unk_41B3D0      db    ? ;               ; DATA XREF: .text:00408FB5↑o
.bss:0041B3D0                                         ; .text:00408FEC↑o ...
.bss:0041B3D1                 db    ? ;
.bss:0041B3D2                 db    ? ;
.bss:0041B3D3                 db    ? ;
.bss:0041B3D4                 db    ? ;
.bss:0041B3D5                 db    ? ;
.bss:0041B3D6                 db    ? ;
.bss:0041B3D7                 db    ? ;
.bss:0041B3D8                 db    ? ;
.bss:0041B3D9                 db    ? ;
.bss:0041B3DA                 db    ? ;
.bss:0041B3DB                 db    ? ;
.bss:0041B3DC                 db    ? ;
.bss:0041B3DD                 db    ? ;
.bss:0041B3DE                 db    ? ;
.bss:0041B3DF                 db    ? ;
.bss:0041B3E0                 db    ? ;
.bss:0041B3E1                 db    ? ;
.bss:0041B3E2                 db    ? ;
.bss:0041B3E3                 db    ? ;
.bss:0041B3E4                 db    ? ;
.bss:0041B3E5                 db    ? ;
.bss:0041B3E6                 db    ? ;
.bss:0041B3E7                 db    ? ;
.bss:0041B3E8                 db    ? ;
.bss:0041B3E9                 db    ? ;
.bss:0041B3EA                 db    ? ;
.bss:0041B3EB                 db    ? ;
.bss:0041B3EC                 db    ? ;
.bss:0041B3ED                 db    ? ;
.bss:0041B3EE                 db    ? ;
.bss:0041B3EF                 db    ? ;
.bss:0041B3F0 unk_41B3F0      db    ? ;               ; DATA XREF: .text:00409038↑o
.bss:0041B3F0                                         ; .text:0040906F↑o ...
.bss:0041B3F1                 db    ? ;
.bss:0041B3F2                 db    ? ;
.bss:0041B3F3                 db    ? ;
.bss:0041B3F4                 db    ? ;
.bss:0041B3F5                 db    ? ;
.bss:0041B3F6                 db    ? ;
.bss:0041B3F7                 db    ? ;
.bss:0041B3F8                 db    ? ;
.bss:0041B3F9                 db    ? ;
.bss:0041B3FA                 db    ? ;
.bss:0041B3FB                 db    ? ;
.bss:0041B3FC                 db    ? ;
.bss:0041B3FD                 db    ? ;
.bss:0041B3FE                 db    ? ;
.bss:0041B3FF                 db    ? ;
.bss:0041B400                 db    ? ;
.bss:0041B401                 db    ? ;
.bss:0041B402                 db    ? ;
.bss:0041B403                 db    ? ;
.bss:0041B404                 db    ? ;
.bss:0041B405                 db    ? ;
.bss:0041B406                 db    ? ;
.bss:0041B407                 db    ? ;
.bss:0041B408                 db    ? ;
.bss:0041B409                 db    ? ;
.bss:0041B40A                 db    ? ;
.bss:0041B40B                 db    ? ;
.bss:0041B40C                 db    ? ;
.bss:0041B40D                 db    ? ;
.bss:0041B40E                 db    ? ;
.bss:0041B40F                 db    ? ;
.bss:0041B410 dword_41B410    dd ?                    ; DATA XREF: sub_40C4F0+AB↑r
.bss:0041B410                                         ; sub_40C4F0+334B↑w
.bss:0041B414                 align 10h
.bss:0041B420 byte_41B420     db ?                    ; DATA XREF: sub_4095E0:loc_40A04C↑r
.bss:0041B420                                         ; sub_4095E0:loc_40A078↑r ...
.bss:0041B421                 db    ? ;
.bss:0041B422                 db    ? ;
.bss:0041B423                 db    ? ;
.bss:0041B424                 db    ? ;
.bss:0041B425                 db    ? ;
.bss:0041B426                 db    ? ;
.bss:0041B427                 db    ? ;
.bss:0041B428                 db    ? ;
.bss:0041B429                 db    ? ;
.bss:0041B42A                 db    ? ;
.bss:0041B42B                 db    ? ;
.bss:0041B42C                 db    ? ;
.bss:0041B42D                 db    ? ;
.bss:0041B42E                 db    ? ;
.bss:0041B42F                 db    ? ;
.bss:0041B430                 db    ? ;
.bss:0041B431                 db    ? ;
.bss:0041B432                 db    ? ;
.bss:0041B433                 db    ? ;
.bss:0041B434                 db    ? ;
.bss:0041B435                 db    ? ;
.bss:0041B436                 db    ? ;
.bss:0041B437                 db    ? ;
.bss:0041B438                 db    ? ;
.bss:0041B439                 db    ? ;
.bss:0041B43A                 db    ? ;
.bss:0041B43B                 db    ? ;
.bss:0041B43C                 db    ? ;
.bss:0041B43D                 db    ? ;
.bss:0041B43E                 db    ? ;
.bss:0041B43F                 db    ? ;
.bss:0041B440                 db    ? ;
.bss:0041B441                 db    ? ;
.bss:0041B442                 db    ? ;
.bss:0041B443                 db    ? ;
.bss:0041B444                 db    ? ;
.bss:0041B445                 db    ? ;
.bss:0041B446                 db    ? ;
.bss:0041B447                 db    ? ;
.bss:0041B448                 db    ? ;
.bss:0041B449                 db    ? ;
.bss:0041B44A                 db    ? ;
.bss:0041B44B                 db    ? ;
.bss:0041B44C                 db    ? ;
.bss:0041B44D                 db    ? ;
.bss:0041B44E                 db    ? ;
.bss:0041B44F                 db    ? ;
.bss:0041B450                 db    ? ;
.bss:0041B451                 db    ? ;
.bss:0041B452                 db    ? ;
.bss:0041B453                 db    ? ;
.bss:0041B454                 db    ? ;
.bss:0041B455                 db    ? ;
.bss:0041B456                 db    ? ;
.bss:0041B457                 db    ? ;
.bss:0041B458                 db    ? ;
.bss:0041B459                 db    ? ;
.bss:0041B45A                 db    ? ;
.bss:0041B45B                 db    ? ;
.bss:0041B45C                 db    ? ;
.bss:0041B45D                 db    ? ;
.bss:0041B45E                 db    ? ;
.bss:0041B45F                 db    ? ;
.bss:0041B460                 db    ? ;
.bss:0041B461                 db    ? ;
.bss:0041B462                 db    ? ;
.bss:0041B463                 db    ? ;
.bss:0041B464                 db    ? ;
.bss:0041B465                 db    ? ;
.bss:0041B466                 db    ? ;
.bss:0041B467                 db    ? ;
.bss:0041B468                 db    ? ;
.bss:0041B469                 db    ? ;
.bss:0041B46A                 db    ? ;
.bss:0041B46B                 db    ? ;
.bss:0041B46C                 db    ? ;
.bss:0041B46D                 db    ? ;
.bss:0041B46E                 db    ? ;
.bss:0041B46F                 db    ? ;
.bss:0041B470                 db    ? ;
.bss:0041B471                 db    ? ;
.bss:0041B472                 db    ? ;
.bss:0041B473                 db    ? ;
.bss:0041B474                 db    ? ;
.bss:0041B475                 db    ? ;
.bss:0041B476                 db    ? ;
.bss:0041B477                 db    ? ;
.bss:0041B478                 db    ? ;
.bss:0041B479                 db    ? ;
.bss:0041B47A                 db    ? ;
.bss:0041B47B                 db    ? ;
.bss:0041B47C                 db    ? ;
.bss:0041B47D                 db    ? ;
.bss:0041B47E                 db    ? ;
.bss:0041B47F byte_41B47F     db ?                    ; DATA XREF: sub_40C4F0+333F↑w
.bss:0041B480                 db    ? ;
.bss:0041B481                 db    ? ;
.bss:0041B482                 db    ? ;
.bss:0041B483                 db    ? ;
.bss:0041B484                 db    ? ;
.bss:0041B485                 db    ? ;
.bss:0041B486                 db    ? ;
.bss:0041B487                 db    ? ;
.bss:0041B488                 db    ? ;
.bss:0041B489                 db    ? ;
.bss:0041B48A                 db    ? ;
.bss:0041B48B                 db    ? ;
.bss:0041B48C                 db    ? ;
.bss:0041B48D                 db    ? ;
.bss:0041B48E                 db    ? ;
.bss:0041B48F                 db    ? ;
.bss:0041B490                 db    ? ;
.bss:0041B491                 db    ? ;
.bss:0041B492                 db    ? ;
.bss:0041B493                 db    ? ;
.bss:0041B494                 db    ? ;
.bss:0041B495                 db    ? ;
.bss:0041B496                 db    ? ;
.bss:0041B497                 db    ? ;
.bss:0041B498                 db    ? ;
.bss:0041B499                 db    ? ;
.bss:0041B49A                 db    ? ;
.bss:0041B49B                 db    ? ;
.bss:0041B49C                 db    ? ;
.bss:0041B49D                 db    ? ;
.bss:0041B49E                 db    ? ;
.bss:0041B49F                 db    ? ;
.bss:0041B4A0                 db    ? ;
.bss:0041B4A1                 db    ? ;
.bss:0041B4A2                 db    ? ;
.bss:0041B4A3                 db    ? ;
.bss:0041B4A4                 db    ? ;
.bss:0041B4A5                 db    ? ;
.bss:0041B4A6                 db    ? ;
.bss:0041B4A7                 db    ? ;
.bss:0041B4A8                 db    ? ;
.bss:0041B4A9                 db    ? ;
.bss:0041B4AA                 db    ? ;
.bss:0041B4AB                 db    ? ;
.bss:0041B4AC                 db    ? ;
.bss:0041B4AD                 db    ? ;
.bss:0041B4AE                 db    ? ;
.bss:0041B4AF                 db    ? ;
.bss:0041B4B0                 db    ? ;
.bss:0041B4B1                 db    ? ;
.bss:0041B4B2                 db    ? ;
.bss:0041B4B3                 db    ? ;
.bss:0041B4B4                 db    ? ;
.bss:0041B4B5                 db    ? ;
.bss:0041B4B6                 db    ? ;
.bss:0041B4B7                 db    ? ;
.bss:0041B4B8                 db    ? ;
.bss:0041B4B9                 db    ? ;
.bss:0041B4BA                 db    ? ;
.bss:0041B4BB                 db    ? ;
.bss:0041B4BC                 db    ? ;
.bss:0041B4BD                 db    ? ;
.bss:0041B4BE                 db    ? ;
.bss:0041B4BF                 db    ? ;
.bss:0041B4C0                 db    ? ;
.bss:0041B4C1                 db    ? ;
.bss:0041B4C2                 db    ? ;
.bss:0041B4C3                 db    ? ;
.bss:0041B4C4                 db    ? ;
.bss:0041B4C5                 db    ? ;
.bss:0041B4C6                 db    ? ;
.bss:0041B4C7                 db    ? ;
.bss:0041B4C8                 db    ? ;
.bss:0041B4C9                 db    ? ;
.bss:0041B4CA                 db    ? ;
.bss:0041B4CB                 db    ? ;
.bss:0041B4CC                 db    ? ;
.bss:0041B4CD                 db    ? ;
.bss:0041B4CE                 db    ? ;
.bss:0041B4CF                 db    ? ;
.bss:0041B4D0                 db    ? ;
.bss:0041B4D1                 db    ? ;
.bss:0041B4D2                 db    ? ;
.bss:0041B4D3                 db    ? ;
.bss:0041B4D4                 db    ? ;
.bss:0041B4D5                 db    ? ;
.bss:0041B4D6                 db    ? ;
.bss:0041B4D7                 db    ? ;
.bss:0041B4D8                 db    ? ;
.bss:0041B4D9                 db    ? ;
.bss:0041B4DA                 db    ? ;
.bss:0041B4DB                 db    ? ;
.bss:0041B4DC                 db    ? ;
.bss:0041B4DD                 db    ? ;
.bss:0041B4DE                 db    ? ;
.bss:0041B4DF                 db    ? ;
.bss:0041B4E0                 db    ? ;
.bss:0041B4E1                 db    ? ;
.bss:0041B4E2                 db    ? ;
.bss:0041B4E3                 db    ? ;
.bss:0041B4E4                 db    ? ;
.bss:0041B4E5                 db    ? ;
.bss:0041B4E6                 db    ? ;
.bss:0041B4E7                 db    ? ;
.bss:0041B4E8                 db    ? ;
.bss:0041B4E9                 db    ? ;
.bss:0041B4EA                 db    ? ;
.bss:0041B4EB                 db    ? ;
.bss:0041B4EC                 db    ? ;
.bss:0041B4ED                 db    ? ;
.bss:0041B4EE                 db    ? ;
.bss:0041B4EF                 db    ? ;
.bss:0041B4F0                 db    ? ;
.bss:0041B4F1                 db    ? ;
.bss:0041B4F2                 db    ? ;
.bss:0041B4F3                 db    ? ;
.bss:0041B4F4                 db    ? ;
.bss:0041B4F5                 db    ? ;
.bss:0041B4F6                 db    ? ;
.bss:0041B4F7                 db    ? ;
.bss:0041B4F8                 db    ? ;
.bss:0041B4F9                 db    ? ;
.bss:0041B4FA                 db    ? ;
.bss:0041B4FB                 db    ? ;
.bss:0041B4FC                 db    ? ;
.bss:0041B4FD                 db    ? ;
.bss:0041B4FE                 db    ? ;
.bss:0041B4FF                 db    ? ;
.bss:0041B500                 db    ? ;
.bss:0041B501                 db    ? ;
.bss:0041B502                 db    ? ;
.bss:0041B503                 db    ? ;
.bss:0041B504                 db    ? ;
.bss:0041B505                 db    ? ;
.bss:0041B506                 db    ? ;
.bss:0041B507                 db    ? ;
.bss:0041B508                 db    ? ;
.bss:0041B509                 db    ? ;
.bss:0041B50A                 db    ? ;
.bss:0041B50B                 db    ? ;
.bss:0041B50C                 db    ? ;
.bss:0041B50D                 db    ? ;
.bss:0041B50E                 db    ? ;
.bss:0041B50F                 db    ? ;
.bss:0041B510                 db    ? ;
.bss:0041B511                 db    ? ;
.bss:0041B512                 db    ? ;
.bss:0041B513                 db    ? ;
.bss:0041B514                 db    ? ;
.bss:0041B515                 db    ? ;
.bss:0041B516                 db    ? ;
.bss:0041B517                 db    ? ;
.bss:0041B518                 db    ? ;
.bss:0041B519                 db    ? ;
.bss:0041B51A                 db    ? ;
.bss:0041B51B                 db    ? ;
.bss:0041B51C                 db    ? ;
.bss:0041B51D                 db    ? ;
.bss:0041B51E                 db    ? ;
.bss:0041B51F                 db    ? ;
.bss:0041B520 unk_41B520      db    ? ;               ; DATA XREF: sub_4095E0+148↑o
.bss:0041B520                                         ; sub_4095E0+153↑o ...
.bss:0041B521                 db    ? ;
.bss:0041B522                 db    ? ;
.bss:0041B523                 db    ? ;
.bss:0041B524                 db    ? ;
.bss:0041B525                 db    ? ;
.bss:0041B526                 db    ? ;
.bss:0041B527                 db    ? ;
.bss:0041B528                 db    ? ;
.bss:0041B529                 db    ? ;
.bss:0041B52A                 db    ? ;
.bss:0041B52B                 db    ? ;
.bss:0041B52C                 db    ? ;
.bss:0041B52D                 db    ? ;
.bss:0041B52E                 db    ? ;
.bss:0041B52F                 db    ? ;
.bss:0041B530 ; char *Str1
.bss:0041B530 Str1            dd ?                    ; DATA XREF: sub_410034:loc_41006D↑w
.bss:0041B530                                         ; sub_410034:loc_4101A0↑r
.bss:0041B534                 align 10h
.bss:0041B540 dword_41B540    dd ?                    ; DATA XREF: sub_410034+2D↑r
.bss:0041B540                                         ; sub_410034+3F↑w
.bss:0041B544                 align 10h
.bss:0041B550 dword_41B550    dd ?                    ; DATA XREF: sub_4101D0:loc_41023B↑r
.bss:0041B550                                         ; sub_4101D0+F9↑w
.bss:0041B554                 align 10h
.bss:0041B560 dword_41B560    dd ?                    ; DATA XREF: sub_4101D0+8E↑r
.bss:0041B560                                         ; sub_4101D0+103↑w
.bss:0041B564                 align 10h
.bss:0041B570 dword_41B570    dd ?                    ; DATA XREF: sub_4101D0+5D↑r
.bss:0041B570                                         ; sub_4101D0+EE↑w
.bss:0041B574                 align 10h
.bss:0041B580 dword_41B580    dd ?                    ; DATA XREF: sub_4101D0+3↑r
.bss:0041B580                                         ; .text:loc_410A02↑w ...
.bss:0041B584                 align 10h
.bss:0041B590 dword_41B590    dd ?                    ; DATA XREF: sub_411380+100↑r
.bss:0041B590                                         ; sub_411380+308↑w
.bss:0041B594                 align 10h
.bss:0041B5A0 ; char *Str
.bss:0041B5A0 Str             dd ?                    ; DATA XREF: sub_411380:loc_4116E4↑r
.bss:0041B5A0                                         ; sub_411380+3B6↑r ...
.bss:0041B5A4                 align 10h
.bss:0041B5B0 dword_41B5B0    dd ?                    ; DATA XREF: sub_413C00+1C↑r
.bss:0041B5B0                                         ; sub_413C00+104↑w
.bss:0041B5B4                 align 10h
.bss:0041B5C0 dword_41B5C0    dd ?                    ; DATA XREF: sub_413C00+B↑r
.bss:0041B5C0                                         ; sub_413C00+71↑w
.bss:0041B5C4                 align 10h
.bss:0041B5D0 dword_41B5D0    dd ?                    ; DATA XREF: sub_413C00+85↑r
.bss:0041B5D0                                         ; sub_413C00+B9↑w
.bss:0041B5D4 dword_41B5D4    dd ?                    ; DATA XREF: sub_413C00+C4↑w
.bss:0041B5D8 dword_41B5D8    dd ?                    ; DATA XREF: sub_413C00+2E↑o
.bss:0041B5D8                                         ; sub_413C00+CF↑w
.bss:0041B5DC dword_41B5DC    dd ?                    ; DATA XREF: sub_413C00+DA↑w
.bss:0041B5E0                 db    ? ;
.bss:0041B5E1                 db    ? ;
.bss:0041B5E2                 db    ? ;
.bss:0041B5E3                 db    ? ;
.bss:0041B5E4                 db    ? ;
.bss:0041B5E5                 db    ? ;
.bss:0041B5E6                 db    ? ;
.bss:0041B5E7                 db    ? ;
.bss:0041B5E8                 db    ? ;
.bss:0041B5E9                 db    ? ;
.bss:0041B5EA                 db    ? ;
.bss:0041B5EB                 db    ? ;
.bss:0041B5EC                 db    ? ;
.bss:0041B5ED                 db    ? ;
.bss:0041B5EE                 db    ? ;
.bss:0041B5EF                 db    ? ;
.bss:0041B5F0                 db    ? ;
.bss:0041B5F1                 db    ? ;
.bss:0041B5F2                 db    ? ;
.bss:0041B5F3                 db    ? ;
.bss:0041B5F4                 db    ? ;
.bss:0041B5F5                 db    ? ;
.bss:0041B5F6                 db    ? ;
.bss:0041B5F7                 db    ? ;
.bss:0041B5F8                 db    ? ;
.bss:0041B5F9                 db    ? ;
.bss:0041B5FA                 db    ? ;
.bss:0041B5FB                 db    ? ;
.bss:0041B5FC                 db    ? ;
.bss:0041B5FD                 db    ? ;
.bss:0041B5FE                 db    ? ;
.bss:0041B5FF                 db    ? ;
.bss:0041B600                 db    ? ;
.bss:0041B601                 db    ? ;
.bss:0041B602                 db    ? ;
.bss:0041B603                 db    ? ;
.bss:0041B604                 db    ? ;
.bss:0041B605                 db    ? ;
.bss:0041B606                 db    ? ;
.bss:0041B607                 db    ? ;
.bss:0041B608                 db    ? ;
.bss:0041B609                 db    ? ;
.bss:0041B60A                 db    ? ;
.bss:0041B60B                 db    ? ;
.bss:0041B60C                 db    ? ;
.bss:0041B60D                 db    ? ;
.bss:0041B60E                 db    ? ;
.bss:0041B60F                 db    ? ;
.bss:0041B610                 db    ? ;
.bss:0041B611                 db    ? ;
.bss:0041B612                 db    ? ;
.bss:0041B613                 db    ? ;
.bss:0041B614                 db    ? ;
.bss:0041B615                 db    ? ;
.bss:0041B616                 db    ? ;
.bss:0041B617                 db    ? ;
.bss:0041B618                 db    ? ;
.bss:0041B619                 db    ? ;
.bss:0041B61A                 db    ? ;
.bss:0041B61B                 db    ? ;
.bss:0041B61C                 db    ? ;
.bss:0041B61D                 db    ? ;
.bss:0041B61E                 db    ? ;
.bss:0041B61F                 db    ? ;
.bss:0041B620                 db    ? ;
.bss:0041B621                 db    ? ;
.bss:0041B622                 db    ? ;
.bss:0041B623                 db    ? ;
.bss:0041B624                 db    ? ;
.bss:0041B625                 db    ? ;
.bss:0041B626                 db    ? ;
.bss:0041B627                 db    ? ;
.bss:0041B628                 db    ? ;
.bss:0041B629                 db    ? ;
.bss:0041B62A                 db    ? ;
.bss:0041B62B                 db    ? ;
.bss:0041B62C                 db    ? ;
.bss:0041B62D                 db    ? ;
.bss:0041B62E                 db    ? ;
.bss:0041B62F                 db    ? ;
.bss:0041B630                 db    ? ;
.bss:0041B631                 db    ? ;
.bss:0041B632                 db    ? ;
.bss:0041B633                 db    ? ;
.bss:0041B634                 db    ? ;
.bss:0041B635                 db    ? ;
.bss:0041B636                 db    ? ;
.bss:0041B637                 db    ? ;
.bss:0041B638                 db    ? ;
.bss:0041B639                 db    ? ;
.bss:0041B63A                 db    ? ;
.bss:0041B63B                 db    ? ;
.bss:0041B63C                 db    ? ;
.bss:0041B63D                 db    ? ;
.bss:0041B63E                 db    ? ;
.bss:0041B63F                 db    ? ;
.bss:0041B640                 db    ? ;
.bss:0041B641                 db    ? ;
.bss:0041B642                 db    ? ;
.bss:0041B643                 db    ? ;
.bss:0041B644                 db    ? ;
.bss:0041B645                 db    ? ;
.bss:0041B646                 db    ? ;
.bss:0041B647                 db    ? ;
.bss:0041B648                 db    ? ;
.bss:0041B649                 db    ? ;
.bss:0041B64A                 db    ? ;
.bss:0041B64B                 db    ? ;
.bss:0041B64C                 db    ? ;
.bss:0041B64D                 db    ? ;
.bss:0041B64E                 db    ? ;
.bss:0041B64F                 db    ? ;
.bss:0041B650                 db    ? ;
.bss:0041B651                 db    ? ;
.bss:0041B652                 db    ? ;
.bss:0041B653                 db    ? ;
.bss:0041B654                 db    ? ;
.bss:0041B655                 db    ? ;
.bss:0041B656                 db    ? ;
.bss:0041B657                 db    ? ;
.bss:0041B658                 db    ? ;
.bss:0041B659                 db    ? ;
.bss:0041B65A                 db    ? ;
.bss:0041B65B                 db    ? ;
.bss:0041B65C                 db    ? ;
.bss:0041B65D                 db    ? ;
.bss:0041B65E                 db    ? ;
.bss:0041B65F                 db    ? ;
.bss:0041B660                 db    ? ;
.bss:0041B661                 db    ? ;
.bss:0041B662                 db    ? ;
.bss:0041B663                 db    ? ;
.bss:0041B664                 db    ? ;
.bss:0041B665                 db    ? ;
.bss:0041B666                 db    ? ;
.bss:0041B667                 db    ? ;
.bss:0041B668                 db    ? ;
.bss:0041B669                 db    ? ;
.bss:0041B66A                 db    ? ;
.bss:0041B66B                 db    ? ;
.bss:0041B66C                 db    ? ;
.bss:0041B66D                 db    ? ;
.bss:0041B66E                 db    ? ;
.bss:0041B66F                 db    ? ;
.bss:0041B670                 db    ? ;
.bss:0041B671                 db    ? ;
.bss:0041B672                 db    ? ;
.bss:0041B673                 db    ? ;
.bss:0041B674                 db    ? ;
.bss:0041B675                 db    ? ;
.bss:0041B676                 db    ? ;
.bss:0041B677                 db    ? ;
.bss:0041B678                 db    ? ;
.bss:0041B679                 db    ? ;
.bss:0041B67A                 db    ? ;
.bss:0041B67B                 db    ? ;
.bss:0041B67C                 db    ? ;
.bss:0041B67D                 db    ? ;
.bss:0041B67E                 db    ? ;
.bss:0041B67F                 db    ? ;
.bss:0041B680                 db    ? ;
.bss:0041B681                 db    ? ;
.bss:0041B682                 db    ? ;
.bss:0041B683                 db    ? ;
.bss:0041B684                 db    ? ;
.bss:0041B685                 db    ? ;
.bss:0041B686                 db    ? ;
.bss:0041B687                 db    ? ;
.bss:0041B688                 db    ? ;
.bss:0041B689                 db    ? ;
.bss:0041B68A                 db    ? ;
.bss:0041B68B                 db    ? ;
.bss:0041B68C                 db    ? ;
.bss:0041B68D                 db    ? ;
.bss:0041B68E                 db    ? ;
.bss:0041B68F                 db    ? ;
.bss:0041B690                 db    ? ;
.bss:0041B691                 db    ? ;
.bss:0041B692                 db    ? ;
.bss:0041B693                 db    ? ;
.bss:0041B694                 db    ? ;
.bss:0041B695                 db    ? ;
.bss:0041B696                 db    ? ;
.bss:0041B697                 db    ? ;
.bss:0041B698                 db    ? ;
.bss:0041B699                 db    ? ;
.bss:0041B69A                 db    ? ;
.bss:0041B69B                 db    ? ;
.bss:0041B69C                 db    ? ;
.bss:0041B69D                 db    ? ;
.bss:0041B69E                 db    ? ;
.bss:0041B69F                 db    ? ;
.bss:0041B6A0                 db    ? ;
.bss:0041B6A1                 db    ? ;
.bss:0041B6A2                 db    ? ;
.bss:0041B6A3                 db    ? ;
.bss:0041B6A4                 db    ? ;
.bss:0041B6A5                 db    ? ;
.bss:0041B6A6                 db    ? ;
.bss:0041B6A7                 db    ? ;
.bss:0041B6A8                 db    ? ;
.bss:0041B6A9                 db    ? ;
.bss:0041B6AA                 db    ? ;
.bss:0041B6AB                 db    ? ;
.bss:0041B6AC                 db    ? ;
.bss:0041B6AD                 db    ? ;
.bss:0041B6AE                 db    ? ;
.bss:0041B6AF                 db    ? ;
.bss:0041B6B0                 db    ? ;
.bss:0041B6B1                 db    ? ;
.bss:0041B6B2                 db    ? ;
.bss:0041B6B3                 db    ? ;
.bss:0041B6B4                 db    ? ;
.bss:0041B6B5                 db    ? ;
.bss:0041B6B6                 db    ? ;
.bss:0041B6B7                 db    ? ;
.bss:0041B6B8                 db    ? ;
.bss:0041B6B9                 db    ? ;
.bss:0041B6BA                 db    ? ;
.bss:0041B6BB                 db    ? ;
.bss:0041B6BC                 db    ? ;
.bss:0041B6BD                 db    ? ;
.bss:0041B6BE                 db    ? ;
.bss:0041B6BF                 db    ? ;
.bss:0041B6C0                 db    ? ;
.bss:0041B6C1                 db    ? ;
.bss:0041B6C2                 db    ? ;
.bss:0041B6C3                 db    ? ;
.bss:0041B6C4                 db    ? ;
.bss:0041B6C5                 db    ? ;
.bss:0041B6C6                 db    ? ;
.bss:0041B6C7                 db    ? ;
.bss:0041B6C8                 db    ? ;
.bss:0041B6C9                 db    ? ;
.bss:0041B6CA                 db    ? ;
.bss:0041B6CB                 db    ? ;
.bss:0041B6CC                 db    ? ;
.bss:0041B6CD                 db    ? ;
.bss:0041B6CE                 db    ? ;
.bss:0041B6CF                 db    ? ;
.bss:0041B6D0                 db    ? ;
.bss:0041B6D1                 db    ? ;
.bss:0041B6D2                 db    ? ;
.bss:0041B6D3                 db    ? ;
.bss:0041B6D4                 db    ? ;
.bss:0041B6D5                 db    ? ;
.bss:0041B6D6                 db    ? ;
.bss:0041B6D7                 db    ? ;
.bss:0041B6D8                 db    ? ;
.bss:0041B6D9                 db    ? ;
.bss:0041B6DA                 db    ? ;
.bss:0041B6DB                 db    ? ;
.bss:0041B6DC                 db    ? ;
.bss:0041B6DD                 db    ? ;
.bss:0041B6DE                 db    ? ;
.bss:0041B6DF                 db    ? ;
.bss:0041B6E0                 db    ? ;
.bss:0041B6E1                 db    ? ;
.bss:0041B6E2                 db    ? ;
.bss:0041B6E3                 db    ? ;
.bss:0041B6E4                 db    ? ;
.bss:0041B6E5                 db    ? ;
.bss:0041B6E6                 db    ? ;
.bss:0041B6E7                 db    ? ;
.bss:0041B6E8                 db    ? ;
.bss:0041B6E9                 db    ? ;
.bss:0041B6EA                 db    ? ;
.bss:0041B6EB                 db    ? ;
.bss:0041B6EC                 db    ? ;
.bss:0041B6ED                 db    ? ;
.bss:0041B6EE                 db    ? ;
.bss:0041B6EF                 db    ? ;
.bss:0041B6F0                 db    ? ;
.bss:0041B6F1                 db    ? ;
.bss:0041B6F2                 db    ? ;
.bss:0041B6F3                 db    ? ;
.bss:0041B6F4                 db    ? ;
.bss:0041B6F5                 db    ? ;
.bss:0041B6F6                 db    ? ;
.bss:0041B6F7                 db    ? ;
.bss:0041B6F8                 db    ? ;
.bss:0041B6F9                 db    ? ;
.bss:0041B6FA                 db    ? ;
.bss:0041B6FB                 db    ? ;
.bss:0041B6FC                 db    ? ;
.bss:0041B6FD                 db    ? ;
.bss:0041B6FE                 db    ? ;
.bss:0041B6FF                 db    ? ;
.bss:0041B700                 db    ? ;
.bss:0041B701                 db    ? ;
.bss:0041B702                 db    ? ;
.bss:0041B703                 db    ? ;
.bss:0041B704                 db    ? ;
.bss:0041B705                 db    ? ;
.bss:0041B706                 db    ? ;
.bss:0041B707                 db    ? ;
.bss:0041B708                 db    ? ;
.bss:0041B709                 db    ? ;
.bss:0041B70A                 db    ? ;
.bss:0041B70B                 db    ? ;
.bss:0041B70C                 db    ? ;
.bss:0041B70D                 db    ? ;
.bss:0041B70E                 db    ? ;
.bss:0041B70F                 db    ? ;
.bss:0041B710                 db    ? ;
.bss:0041B711                 db    ? ;
.bss:0041B712                 db    ? ;
.bss:0041B713                 db    ? ;
.bss:0041B714                 db    ? ;
.bss:0041B715                 db    ? ;
.bss:0041B716                 db    ? ;
.bss:0041B717                 db    ? ;
.bss:0041B718                 db    ? ;
.bss:0041B719                 db    ? ;
.bss:0041B71A                 db    ? ;
.bss:0041B71B                 db    ? ;
.bss:0041B71C                 db    ? ;
.bss:0041B71D                 db    ? ;
.bss:0041B71E                 db    ? ;
.bss:0041B71F                 db    ? ;
.bss:0041B720                 db    ? ;
.bss:0041B721                 db    ? ;
.bss:0041B722                 db    ? ;
.bss:0041B723                 db    ? ;
.bss:0041B724                 db    ? ;
.bss:0041B725                 db    ? ;
.bss:0041B726                 db    ? ;
.bss:0041B727                 db    ? ;
.bss:0041B728                 db    ? ;
.bss:0041B729                 db    ? ;
.bss:0041B72A                 db    ? ;
.bss:0041B72B                 db    ? ;
.bss:0041B72C                 db    ? ;
.bss:0041B72D                 db    ? ;
.bss:0041B72E                 db    ? ;
.bss:0041B72F                 db    ? ;
.bss:0041B730                 db    ? ;
.bss:0041B731                 db    ? ;
.bss:0041B732                 db    ? ;
.bss:0041B733                 db    ? ;
.bss:0041B734                 db    ? ;
.bss:0041B735                 db    ? ;
.bss:0041B736                 db    ? ;
.bss:0041B737                 db    ? ;
.bss:0041B738                 db    ? ;
.bss:0041B739                 db    ? ;
.bss:0041B73A                 db    ? ;
.bss:0041B73B                 db    ? ;
.bss:0041B73C                 db    ? ;
.bss:0041B73D                 db    ? ;
.bss:0041B73E                 db    ? ;
.bss:0041B73F                 db    ? ;
.bss:0041B740                 db    ? ;
.bss:0041B741                 db    ? ;
.bss:0041B742                 db    ? ;
.bss:0041B743                 db    ? ;
.bss:0041B744                 db    ? ;
.bss:0041B745                 db    ? ;
.bss:0041B746                 db    ? ;
.bss:0041B747                 db    ? ;
.bss:0041B748                 db    ? ;
.bss:0041B749                 db    ? ;
.bss:0041B74A                 db    ? ;
.bss:0041B74B                 db    ? ;
.bss:0041B74C                 db    ? ;
.bss:0041B74D                 db    ? ;
.bss:0041B74E                 db    ? ;
.bss:0041B74F                 db    ? ;
.bss:0041B750                 db    ? ;
.bss:0041B751                 db    ? ;
.bss:0041B752                 db    ? ;
.bss:0041B753                 db    ? ;
.bss:0041B754                 db    ? ;
.bss:0041B755                 db    ? ;
.bss:0041B756                 db    ? ;
.bss:0041B757                 db    ? ;
.bss:0041B758                 db    ? ;
.bss:0041B759                 db    ? ;
.bss:0041B75A                 db    ? ;
.bss:0041B75B                 db    ? ;
.bss:0041B75C                 db    ? ;
.bss:0041B75D                 db    ? ;
.bss:0041B75E                 db    ? ;
.bss:0041B75F                 db    ? ;
.bss:0041B760                 db    ? ;
.bss:0041B761                 db    ? ;
.bss:0041B762                 db    ? ;
.bss:0041B763                 db    ? ;
.bss:0041B764                 db    ? ;
.bss:0041B765                 db    ? ;
.bss:0041B766                 db    ? ;
.bss:0041B767                 db    ? ;
.bss:0041B768                 db    ? ;
.bss:0041B769                 db    ? ;
.bss:0041B76A                 db    ? ;
.bss:0041B76B                 db    ? ;
.bss:0041B76C                 db    ? ;
.bss:0041B76D                 db    ? ;
.bss:0041B76E                 db    ? ;
.bss:0041B76F                 db    ? ;
.bss:0041B770                 db    ? ;
.bss:0041B771                 db    ? ;
.bss:0041B772                 db    ? ;
.bss:0041B773                 db    ? ;
.bss:0041B774                 db    ? ;
.bss:0041B775                 db    ? ;
.bss:0041B776                 db    ? ;
.bss:0041B777                 db    ? ;
.bss:0041B778                 db    ? ;
.bss:0041B779                 db    ? ;
.bss:0041B77A                 db    ? ;
.bss:0041B77B                 db    ? ;
.bss:0041B77C                 db    ? ;
.bss:0041B77D                 db    ? ;
.bss:0041B77E                 db    ? ;
.bss:0041B77F                 db    ? ;
.bss:0041B780                 db    ? ;
.bss:0041B781                 db    ? ;
.bss:0041B782                 db    ? ;
.bss:0041B783                 db    ? ;
.bss:0041B784                 db    ? ;
.bss:0041B785                 db    ? ;
.bss:0041B786                 db    ? ;
.bss:0041B787                 db    ? ;
.bss:0041B788                 db    ? ;
.bss:0041B789                 db    ? ;
.bss:0041B78A                 db    ? ;
.bss:0041B78B                 db    ? ;
.bss:0041B78C                 db    ? ;
.bss:0041B78D                 db    ? ;
.bss:0041B78E                 db    ? ;
.bss:0041B78F                 db    ? ;
.bss:0041B790                 db    ? ;
.bss:0041B791                 db    ? ;
.bss:0041B792                 db    ? ;
.bss:0041B793                 db    ? ;
.bss:0041B794                 db    ? ;
.bss:0041B795                 db    ? ;
.bss:0041B796                 db    ? ;
.bss:0041B797                 db    ? ;
.bss:0041B798                 db    ? ;
.bss:0041B799                 db    ? ;
.bss:0041B79A                 db    ? ;
.bss:0041B79B                 db    ? ;
.bss:0041B79C                 db    ? ;
.bss:0041B79D                 db    ? ;
.bss:0041B79E                 db    ? ;
.bss:0041B79F                 db    ? ;
.bss:0041B7A0                 db    ? ;
.bss:0041B7A1                 db    ? ;
.bss:0041B7A2                 db    ? ;
.bss:0041B7A3                 db    ? ;
.bss:0041B7A4                 db    ? ;
.bss:0041B7A5                 db    ? ;
.bss:0041B7A6                 db    ? ;
.bss:0041B7A7                 db    ? ;
.bss:0041B7A8                 db    ? ;
.bss:0041B7A9                 db    ? ;
.bss:0041B7AA                 db    ? ;
.bss:0041B7AB                 db    ? ;
.bss:0041B7AC                 db    ? ;
.bss:0041B7AD                 db    ? ;
.bss:0041B7AE                 db    ? ;
.bss:0041B7AF                 db    ? ;
.bss:0041B7B0                 db    ? ;
.bss:0041B7B1                 db    ? ;
.bss:0041B7B2                 db    ? ;
.bss:0041B7B3                 db    ? ;
.bss:0041B7B4                 db    ? ;
.bss:0041B7B5                 db    ? ;
.bss:0041B7B6                 db    ? ;
.bss:0041B7B7                 db    ? ;
.bss:0041B7B8                 db    ? ;
.bss:0041B7B9                 db    ? ;
.bss:0041B7BA                 db    ? ;
.bss:0041B7BB                 db    ? ;
.bss:0041B7BC                 db    ? ;
.bss:0041B7BD                 db    ? ;
.bss:0041B7BE                 db    ? ;
.bss:0041B7BF                 db    ? ;
.bss:0041B7C0                 db    ? ;
.bss:0041B7C1                 db    ? ;
.bss:0041B7C2                 db    ? ;
.bss:0041B7C3                 db    ? ;
.bss:0041B7C4                 db    ? ;
.bss:0041B7C5                 db    ? ;
.bss:0041B7C6                 db    ? ;
.bss:0041B7C7                 db    ? ;
.bss:0041B7C8                 db    ? ;
.bss:0041B7C9                 db    ? ;
.bss:0041B7CA                 db    ? ;
.bss:0041B7CB                 db    ? ;
.bss:0041B7CC                 db    ? ;
.bss:0041B7CD                 db    ? ;
.bss:0041B7CE                 db    ? ;
.bss:0041B7CF                 db    ? ;
.bss:0041B7D0 dword_41B7D0    dd ?                    ; DATA XREF: sub_414F60+8↑r
.bss:0041B7D0                                         ; sub_415070:loc_4150F2↑w ...
.bss:0041B7D4                 align 10h
.bss:0041B7E0 ; struct _OSVERSIONINFOA VersionInformation
.bss:0041B7E0 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_415070:loc_415090↑o
.bss:0041B7E0                                         ; sub_415070+2C↑w ...
.bss:0041B874 word_41B874     dw ?                    ; DATA XREF: sub_415070:loc_415123↑r
.bss:0041B876                 align 4
.bss:0041B878 word_41B878     dw ?                    ; DATA XREF: .text:loc_414AE6↑r
.bss:0041B878                                         ; .text:00414B14↑r ...
.bss:0041B87A byte_41B87A     db ?                    ; DATA XREF: .text:00414AA5↑r
.bss:0041B87B                 align 10h
.bss:0041B880 dword_41B880    dd ?                    ; DATA XREF: sub_415070+6↑r
.bss:0041B880                                         ; sub_415070+75↑w
.bss:0041B884                 align 10h
.bss:0041B890 dword_41B890    dd ?                    ; DATA XREF: sub_416610+6E↑r
.bss:0041B890                                         ; sub_416610+9A↑r ...
.bss:0041B894 dword_41B894    dd ?                    ; DATA XREF: sub_416610:loc_416678↑r
.bss:0041B894                                         ; sub_416610+A0↑r ...
.bss:0041B898                 align 10h
.bss:0041B8A0 dword_41B8A0    dd ?                    ; DATA XREF: sub_4019A0+31↑w
.bss:0041B8A0                                         ; sub_4019A0+114↑r ...
.bss:0041B8A4                 align 20h
.bss:0041B8C0 dword_41B8C0    dd ?                    ; DATA XREF: sub_405600+71↑w
.bss:0041B8C0                                         ; .text:00405701↑w
.bss:0041B8C4                 align 10h
.bss:0041B8D0 dword_41B8D0    dd ?                    ; DATA XREF: .text:0040C240↑r
.bss:0041B8D0                                         ; .text:0040C249↑w ...
.bss:0041B8D4                 align 10h
.bss:0041B8E0 dword_41B8E0    dd ?                    ; CODE XREF: sub_410034+63↑p
.bss:0041B8E0                                         ; DATA XREF: sub_40FF30+1E↑r ...
.bss:0041B8E4                 align 10h
.bss:0041B8F0 dword_41B8F0    dd ?                    ; DATA XREF: sub_40FF30+4E↑w
.bss:0041B8F0                                         ; sub_410034+AB↑w
.bss:0041B8F4                 db    ? ;
.bss:0041B8F5                 db    ? ;
.bss:0041B8F6                 db    ? ;
.bss:0041B8F7                 db    ? ;
.bss:0041B8F8                 db    ? ;
.bss:0041B8F9                 db    ? ;
.bss:0041B8FA                 db    ? ;
.bss:0041B8FB                 db    ? ;
.bss:0041B8FC                 db    ? ;
.bss:0041B8FD                 db    ? ;
.bss:0041B8FE                 db    ? ;
.bss:0041B8FF                 db    ? ;
.bss:0041B900                 db    ? ;
.bss:0041B901                 db    ? ;
.bss:0041B902                 db    ? ;
.bss:0041B903                 db    ? ;
.bss:0041B904                 db    ? ;
.bss:0041B905                 db    ? ;
.bss:0041B906                 db    ? ;
.bss:0041B907                 db    ? ;
.bss:0041B908                 db    ? ;
.bss:0041B909                 db    ? ;
.bss:0041B90A                 db    ? ;
.bss:0041B90B                 db    ? ;
.bss:0041B90C                 db    ? ;
.bss:0041B90D                 db    ? ;
.bss:0041B90E                 db    ? ;
.bss:0041B90F                 db    ? ;
.bss:0041B910                 db    ? ;
.bss:0041B911                 db    ? ;
.bss:0041B912                 db    ? ;
.bss:0041B913                 db    ? ;
.bss:0041B914                 db    ? ;
.bss:0041B915                 db    ? ;
.bss:0041B916                 db    ? ;
.bss:0041B917                 db    ? ;
.bss:0041B918                 db    ? ;
.bss:0041B919                 db    ? ;
.bss:0041B91A                 db    ? ;
.bss:0041B91B                 db    ? ;
.bss:0041B91C                 db    ? ;
.bss:0041B91D                 db    ? ;
.bss:0041B91E                 db    ? ;
.bss:0041B91F                 db    ? ;
.bss:0041B920 dword_41B920    dd ?                    ; DATA XREF: sub_410034+13↑r
.bss:0041B924                 align 800h
.bss:0041B924 _bss            ends
.bss:0041B924
.idata:0041C000 ; Section 4. (virtual address 0001C000)
.idata:0041C000 ; Virtual size                  : 00000EF4 (   3828.)
.idata:0041C000 ; Section size in file          : 00001000 (   4096.)
.idata:0041C000 ; Offset to raw data for section: 00018A00
.idata:0041C000 ; Flags C0000040: Data Readable Writable
.idata:0041C000 ; Alignment     : default
.idata:0041C000 ; ===========================================================================
.idata:0041C000
.idata:0041C000 ; Segment type: Externs
.idata:0041C000 ; _idata
.idata:0041C000
.idata:0041C001
.idata:0041C2DC ;
.idata:0041C2DC ; Imports from libintl3.dll
.idata:0041C2DC ;
.idata:0041C2DC                 extrn libintl_bindtextdomain:dword
.idata:0041C2DC                                         ; CODE XREF: sub_4019A0+4B↑p
.idata:0041C2DC                                         ; DATA XREF: sub_4019A0+4B↑r ...
.idata:0041C2E0                 extrn libintl_gettext:dword
.idata:0041C2E0                                         ; CODE XREF: sub_4019A0+108↑p
.idata:0041C2E0                                         ; sub_4019A0+16B↑p ...
.idata:0041C2E4                 extrn libintl_textdomain:dword
.idata:0041C2E4                                         ; CODE XREF: sub_4019A0+58↑p
.idata:0041C2E4                                         ; DATA XREF: sub_4019A0+58↑r ...
.idata:0041C2E8
.idata:0041C2F0 ;
.idata:0041C2F0 ; Imports from ADVAPI32.DLL
.idata:0041C2F0 ;
.idata:0041C2F0 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:0041C2F0                 extrn __imp_RegCloseKey:dword
.idata:0041C2F0                                         ; DATA XREF: RegCloseKey↑r
.idata:0041C2F4 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:0041C2F4                 extrn __imp_RegOpenKeyExA:dword
.idata:0041C2F4                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:0041C2F8 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:0041C2F8                 extrn __imp_RegQueryValueExA:dword
.idata:0041C2F8                                         ; DATA XREF: RegQueryValueExA↑r
.idata:0041C2FC
.idata:0041C304 ;
.idata:0041C304 ; Imports from KERNEL32.dll
.idata:0041C304 ;
.idata:0041C304 ; BOOL (__stdcall *AreFileApisANSI)()
.idata:0041C304                 extrn __imp_AreFileApisANSI:dword
.idata:0041C304                                         ; DATA XREF: AreFileApisANSI↑r
.idata:0041C308 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0041C308                 extrn __imp_CloseHandle:dword
.idata:0041C308                                         ; DATA XREF: CloseHandle↑r
.idata:0041C30C ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:0041C30C                 extrn __imp_CreateDirectoryA:dword
.idata:0041C30C                                         ; DATA XREF: CreateDirectoryA↑r
.idata:0041C310 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:0041C310                 extrn __imp_CreateFileA:dword
.idata:0041C310                                         ; DATA XREF: CreateFileA↑r
.idata:0041C314 ; BOOL (__stdcall *DeleteFileA)(LPCSTR lpFileName)
.idata:0041C314                 extrn __imp_DeleteFileA:dword
.idata:0041C314                                         ; DATA XREF: DeleteFileA↑r
.idata:0041C318 ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:0041C318                 extrn __imp_DeviceIoControl:dword
.idata:0041C318                                         ; DATA XREF: DeviceIoControl↑r
.idata:0041C31C ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:0041C31C                 extrn __imp_ExitProcess:dword
.idata:0041C31C                                         ; DATA XREF: ExitProcess↑r
.idata:0041C320 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:0041C320                 extrn __imp_FindClose:dword
.idata:0041C320                                         ; DATA XREF: FindClose↑r
.idata:0041C324 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C324                 extrn __imp_FindFirstFileA:dword
.idata:0041C324                                         ; DATA XREF: FindFirstFileA↑r
.idata:0041C328 ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:0041C328                 extrn __imp_FindNextFileA:dword
.idata:0041C328                                         ; DATA XREF: FindNextFileA↑r
.idata:0041C32C ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:0041C32C                 extrn __imp_FreeLibrary:dword
.idata:0041C32C                                         ; DATA XREF: FreeLibrary↑r
.idata:0041C330 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C330                 extrn __imp_GetCurrentDirectoryA:dword
.idata:0041C330                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:0041C334 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:0041C334                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:0041C334                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041C338 ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041C338                 extrn __imp_GetDriveTypeA:dword
.idata:0041C338                                         ; DATA XREF: GetDriveTypeA↑r
.idata:0041C33C ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:0041C33C                 extrn __imp_GetFileAttributesA:dword
.idata:0041C33C                                         ; DATA XREF: GetFileAttributesA↑r
.idata:0041C340 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:0041C340                 extrn __imp_GetFileInformationByHandle:dword
.idata:0041C340                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:0041C344 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:0041C344                 extrn __imp_GetFileSize:dword
.idata:0041C344                                         ; DATA XREF: GetFileSize↑r
.idata:0041C348 ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041C348                 extrn __imp_GetFileType:dword
.idata:0041C348                                         ; DATA XREF: GetFileType↑r
.idata:0041C34C ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:0041C34C                 extrn __imp_GetFullPathNameA:dword
.idata:0041C34C                                         ; DATA XREF: GetFullPathNameA↑r
.idata:0041C350 ; DWORD (__stdcall *GetLastError)()
.idata:0041C350                 extrn __imp_GetLastError:dword
.idata:0041C350                                         ; DATA XREF: GetLastError↑r
.idata:0041C354 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0041C354                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:0041C354                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041C358 ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041C358                 extrn __imp_GetModuleFileNameA:dword
.idata:0041C358                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:0041C35C ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:0041C35C                 extrn __imp_GetModuleHandleA:dword
.idata:0041C35C                                         ; DATA XREF: GetModuleHandleA↑r
.idata:0041C360 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:0041C360                 extrn __imp_GetProcAddress:dword
.idata:0041C360                                         ; DATA XREF: GetProcAddress↑r
.idata:0041C364 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:0041C364                 extrn __imp_GetProcessHeap:dword
.idata:0041C364                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041C368 ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041C368                 extrn __imp_GetShortPathNameA:dword
.idata:0041C368                                         ; DATA XREF: GetShortPathNameA↑r
.idata:0041C36C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0041C36C                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:0041C36C                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:0041C370 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:0041C370                 extrn __imp_GetTimeZoneInformation:dword
.idata:0041C370                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041C374 ; DWORD (__stdcall *GetVersion)()
.idata:0041C374                 extrn __imp_GetVersion:dword
.idata:0041C374                                         ; DATA XREF: GetVersion↑r
.idata:0041C378 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:0041C378                 extrn __imp_GetVersionExA:dword
.idata:0041C378                                         ; DATA XREF: GetVersionExA↑r
.idata:0041C37C ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:0041C37C                 extrn __imp_GetVolumeInformationA:dword
.idata:0041C37C                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:0041C380 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:0041C380                 extrn __imp_HeapAlloc:dword
.idata:0041C380                                         ; DATA XREF: HeapAlloc↑r
.idata:0041C384 ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041C384                 extrn __imp_HeapFree:dword
.idata:0041C384                                         ; DATA XREF: HeapFree↑r
.idata:0041C388 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:0041C388                 extrn __imp_LoadLibraryA:dword
.idata:0041C388                                         ; DATA XREF: LoadLibraryA↑r
.idata:0041C38C ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:0041C38C                 extrn __imp_MultiByteToWideChar:dword
.idata:0041C38C                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:0041C390 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:0041C390                 extrn __imp_PeekNamedPipe:dword
.idata:0041C390                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041C394 ; BOOL (__stdcall *RemoveDirectoryA)(LPCSTR lpPathName)
.idata:0041C394                 extrn __imp_RemoveDirectoryA:dword
.idata:0041C394                                         ; DATA XREF: RemoveDirectoryA↑r
.idata:0041C398 ; BOOL (__stdcall *SetCurrentDirectoryA)(LPCSTR lpPathName)
.idata:0041C398                 extrn __imp_SetCurrentDirectoryA:dword
.idata:0041C398                                         ; DATA XREF: SetCurrentDirectoryA↑r
.idata:0041C39C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041C39C                 extrn __imp_SetErrorMode:dword
.idata:0041C39C                                         ; DATA XREF: SetErrorMode↑r
.idata:0041C3A0 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0041C3A0                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:0041C3A0                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:0041C3A4 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:0041C3A4                 extrn __imp_UnlockFile:dword
.idata:0041C3A4                                         ; DATA XREF: UnlockFile↑r
.idata:0041C3A8 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:0041C3A8                 extrn __imp_lstrcmpiA:dword
.idata:0041C3A8                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041C3AC ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041C3AC                 extrn __imp_lstrcpyA:dword
.idata:0041C3AC                                         ; DATA XREF: lstrcpyA↑r
.idata:0041C3B0
.idata:0041C3B8 ;
.idata:0041C3B8 ; Imports from msvcrt.dll
.idata:0041C3B8 ;
.idata:0041C3B8 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:0041C3B8                 extrn __imp__chmod:dword
.idata:0041C3B8                                         ; DATA XREF: _chmod↑r
.idata:0041C3BC ; int (__cdecl *_close)(int FileHandle)
.idata:0041C3BC                 extrn __imp__close:dword
.idata:0041C3BC                                         ; DATA XREF: _close↑r
.idata:0041C3C0 ; int (__cdecl *_getpid)()
.idata:0041C3C0                 extrn __imp__getpid:dword
.idata:0041C3C0                                         ; DATA XREF: _getpid↑r
.idata:0041C3C4 ; int (__cdecl *_isatty)(int FileHandle)
.idata:0041C3C4                 extrn __imp__isatty:dword
.idata:0041C3C4                                         ; DATA XREF: _isatty↑r
.idata:0041C3C8 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:0041C3C8                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041C3CC ; char *(__cdecl *_strdup)(const char *String)
.idata:0041C3CC                 extrn __imp__strdup:dword
.idata:0041C3CC                                         ; DATA XREF: _strdup↑r
.idata:0041C3D0 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:0041C3D0                 extrn __imp__stricmp:dword
.idata:0041C3D0                                         ; DATA XREF: _stricmp↑r
.idata:0041C3D4
.idata:0041C3DC ;
.idata:0041C3DC ; Imports from MSVCP60.DLL
.idata:0041C3DC ;
.idata:0041C3DC ; wint_t (__cdecl *btowc)(int Ch)
.idata:0041C3DC                 extrn __imp_btowc:dword ; DATA XREF: btowc↑r
.idata:0041C3E0 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0041C3E0                 extrn __imp_mbrtowc:dword
.idata:0041C3E0                                         ; DATA XREF: mbrtowc↑r
.idata:0041C3E4 ; wctype_t (__cdecl *wctype)(const char *name)
.idata:0041C3E4                 extrn __imp_wctype:dword
.idata:0041C3E4                                         ; DATA XREF: wctype↑r
.idata:0041C3E8
.idata:0041C3F0 ;
.idata:0041C3F0 ; Imports from msvcrt.dll
.idata:0041C3F0 ;
.idata:0041C3F0                 extrn __imp___getmainargs:dword
.idata:0041C3F0                                         ; DATA XREF: __getmainargs↑r
.idata:0041C3F4 ; int _mb_cur_max
.idata:0041C3F4                 extrn __mb_cur_max:dword
.idata:0041C3F4                                         ; DATA XREF: sub_406150+49↑r
.idata:0041C3F4                                         ; sub_407500+7↑r ...
.idata:0041C3F8 ; char ***(__cdecl *__p__environ)()
.idata:0041C3F8                 extrn __imp___p__environ:dword
.idata:0041C3F8                                         ; DATA XREF: __p__environ↑r
.idata:0041C3FC ; int *(__cdecl *__p__fmode)()
.idata:0041C3FC                 extrn __imp___p__fmode:dword
.idata:0041C3FC                                         ; DATA XREF: __p__fmode↑r
.idata:0041C400 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:0041C400                 extrn __set_app_type:dword
.idata:0041C400                                         ; CODE XREF: start+D↑p
.idata:0041C400                                         ; .text:0040102D↑p
.idata:0041C400                                         ; DATA XREF: ...
.idata:0041C404                 extrn __imp__assert:dword
.idata:0041C404                                         ; DATA XREF: _assert↑r
.idata:0041C408 ; void (__cdecl *_cexit)()
.idata:0041C408                 extrn __imp__cexit:dword
.idata:0041C408                                         ; DATA XREF: _cexit↑r
.idata:0041C40C ; int (__cdecl *_chmod_0)(const char *FileName, int AccessMode)
.idata:0041C40C                 extrn __imp__chmod_0:dword
.idata:0041C40C                                         ; DATA XREF: _chmod_0↑r
.idata:0041C410 ; int (__cdecl *_close_0)(int FileHandle)
.idata:0041C410                 extrn __imp__close_0:dword
.idata:0041C410                                         ; DATA XREF: _close_0↑r
.idata:0041C414 ; int *(__cdecl *_errno)()
.idata:0041C414                 extrn __imp__errno:dword
.idata:0041C414                                         ; DATA XREF: _errno↑r
.idata:0041C418 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:0041C418                 extrn __imp__fdopen:dword
.idata:0041C418                                         ; DATA XREF: _fdopen↑r
.idata:0041C41C ; int (__cdecl *_filbuf)(FILE *File)
.idata:0041C41C                 extrn __imp__filbuf:dword
.idata:0041C41C                                         ; DATA XREF: _filbuf↑r
.idata:0041C420 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:0041C420                 extrn __imp__filelengthi64:dword
.idata:0041C420                                         ; DATA XREF: _filelengthi64↑r
.idata:0041C424 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:0041C424                 extrn __imp__flsbuf:dword
.idata:0041C424                                         ; DATA XREF: _flsbuf↑r
.idata:0041C428 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:0041C428                 extrn __imp__get_osfhandle:dword
.idata:0041C428                                         ; DATA XREF: _get_osfhandle↑r
.idata:0041C42C ; char *(__cdecl *_getcwd)(char *DstBuf, int SizeInBytes)
.idata:0041C42C                 extrn __imp__getcwd:dword
.idata:0041C42C                                         ; DATA XREF: _getcwd↑r
.idata:0041C430 ; FILE iob[]
.idata:0041C430                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:0041C430                                         ; sub_401080+75↑r ...
.idata:0041C434 ; int (__cdecl *_isctype)(int C, int Type)
.idata:0041C434                 extrn __imp__isctype:dword
.idata:0041C434                                         ; DATA XREF: _isctype↑r
.idata:0041C438 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:0041C438                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:0041C438                                         ; DATA XREF: .text:0040106C↑r
.idata:0041C43C ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:0041C43C                 extrn __imp__open_0:dword
.idata:0041C43C                                         ; DATA XREF: _open_0↑r
.idata:0041C440 ; const unsigned __int16 *pctype
.idata:0041C440                 extrn _pctype:dword     ; DATA XREF: sub_406150:loc_4061C7↑r
.idata:0041C440                                         ; sub_407500:loc_407BF4↑r ...
.idata:0041C444 ; int (__cdecl *_setjmp)(jmp_buf Buf)
.idata:0041C444                 extrn __imp__setjmp:dword
.idata:0041C444                                         ; DATA XREF: _setjmp↑r
.idata:0041C448 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:0041C448                 extrn __imp__setmode:dword
.idata:0041C448                                         ; DATA XREF: _setmode↑r
.idata:0041C44C ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041C44C                 extrn __imp__stricmp_0:dword
.idata:0041C44C                                         ; DATA XREF: _stricmp_0↑r
.idata:0041C450 ; void (__cdecl __noreturn *abort)()
.idata:0041C450                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:0041C454 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:0041C454                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:0041C454                                         ; DATA XREF: sub_401040+C↑r
.idata:0041C458 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:0041C458                 extrn __imp_calloc:dword
.idata:0041C458                                         ; DATA XREF: calloc↑r
.idata:0041C45C ; void (__cdecl __noreturn *exit)(int Code)
.idata:0041C45C                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:0041C460 ; int (__cdecl *fclose)(FILE *Stream)
.idata:0041C460                 extrn __imp_fclose:dword
.idata:0041C460                                         ; DATA XREF: fclose↑r
.idata:0041C464 ; int (__cdecl *fflush)(FILE *Stream)
.idata:0041C464                 extrn __imp_fflush:dword
.idata:0041C464                                         ; DATA XREF: fflush↑r
.idata:0041C468 ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041C468                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:0041C46C ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:0041C46C                 extrn __imp_fprintf:dword
.idata:0041C46C                                         ; DATA XREF: fprintf↑r
.idata:0041C470 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:0041C470                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:0041C474 ; void (__cdecl *free)(void *Block)
.idata:0041C474                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041C478 ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0041C478                 extrn __imp_fwrite:dword
.idata:0041C478                                         ; DATA XREF: fwrite↑r
.idata:0041C47C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041C47C                 extrn __imp_getenv:dword
.idata:0041C47C                                         ; DATA XREF: getenv↑r
.idata:0041C480 ; int (__cdecl *isalpha)(int C)
.idata:0041C480                 extrn __imp_isalpha:dword
.idata:0041C480                                         ; DATA XREF: isalpha↑r
.idata:0041C484 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:0041C484                 extrn __imp_iswctype:dword
.idata:0041C484                                         ; DATA XREF: iswctype↑r
.idata:0041C488 ; void (__cdecl __noreturn *longjmp)(jmp_buf Buf, int Value)
.idata:0041C488                 extrn __imp_longjmp:dword
.idata:0041C488                                         ; DATA XREF: longjmp↑r
.idata:0041C48C ; void *(__cdecl *malloc)(size_t Size)
.idata:0041C48C                 extrn __imp_malloc:dword
.idata:0041C48C                                         ; DATA XREF: malloc↑r
.idata:0041C490 ; void *(__cdecl *memchr)(const void *Buf, int Val, size_t MaxCount)
.idata:0041C490                 extrn __imp_memchr:dword
.idata:0041C490                                         ; DATA XREF: memchr↑r
.idata:0041C494 ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041C494                 extrn __imp_memcpy:dword
.idata:0041C494                                         ; DATA XREF: memcpy↑r
.idata:0041C498 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:0041C498                 extrn __imp_memset:dword
.idata:0041C498                                         ; DATA XREF: memset↑r
.idata:0041C49C ; int (*printf)(const char *const Format, ...)
.idata:0041C49C                 extrn __imp_printf:dword
.idata:0041C49C                                         ; DATA XREF: printf↑r
.idata:0041C4A0 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041C4A0                 extrn __imp_realloc:dword
.idata:0041C4A0                                         ; DATA XREF: realloc↑r
.idata:0041C4A4 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0041C4A4                 extrn __imp_setlocale:dword
.idata:0041C4A4                                         ; DATA XREF: setlocale↑r
.idata:0041C4A8 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:0041C4A8                 extrn __imp_signal:dword
.idata:0041C4A8                                         ; DATA XREF: signal↑r
.idata:0041C4AC ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:0041C4AC                 extrn __imp_sprintf:dword
.idata:0041C4AC                                         ; DATA XREF: sprintf↑r
.idata:0041C4B0 ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041C4B0                 extrn __imp_sscanf:dword
.idata:0041C4B0                                         ; DATA XREF: sscanf↑r
.idata:0041C4B4 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:0041C4B4                 extrn __imp_strcat:dword
.idata:0041C4B4                                         ; DATA XREF: strcat↑r
.idata:0041C4B8 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:0041C4B8                 extrn __imp_strchr:dword
.idata:0041C4B8                                         ; DATA XREF: strchr↑r
.idata:0041C4BC ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:0041C4BC                 extrn __imp_strcmp:dword
.idata:0041C4BC                                         ; DATA XREF: strcmp↑r
.idata:0041C4C0 ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041C4C0                 extrn __imp_strcpy:dword
.idata:0041C4C0                                         ; DATA XREF: strcpy↑r
.idata:0041C4C4 ; size_t (__cdecl *strcspn)(const char *Str, const char *Control)
.idata:0041C4C4                 extrn __imp_strcspn:dword
.idata:0041C4C4                                         ; DATA XREF: strcspn↑r
.idata:0041C4C8 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0041C4C8                 extrn __imp_strerror:dword
.idata:0041C4C8                                         ; DATA XREF: strerror↑r
.idata:0041C4CC ; size_t (__cdecl *strlen)(const char *Str)
.idata:0041C4CC                 extrn __imp_strlen:dword
.idata:0041C4CC                                         ; DATA XREF: strlen↑r
.idata:0041C4D0 ; char *(__cdecl *strncat)(char *Destination, const char *Source, size_t Count)
.idata:0041C4D0                 extrn __imp_strncat:dword
.idata:0041C4D0                                         ; DATA XREF: strncat↑r
.idata:0041C4D4 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:0041C4D4                 extrn __imp_strncmp:dword
.idata:0041C4D4                                         ; DATA XREF: strncmp↑r
.idata:0041C4D8 ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041C4D8                 extrn __imp_strncpy:dword
.idata:0041C4D8                                         ; DATA XREF: strncpy↑r
.idata:0041C4DC ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:0041C4DC                 extrn __imp_strpbrk:dword
.idata:0041C4DC                                         ; DATA XREF: strpbrk↑r
.idata:0041C4E0 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:0041C4E0                 extrn __imp_strrchr:dword
.idata:0041C4E0                                         ; DATA XREF: strrchr↑r
.idata:0041C4E4 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:0041C4E4                 extrn __imp_strspn:dword
.idata:0041C4E4                                         ; DATA XREF: strspn↑r
.idata:0041C4E8 ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041C4E8                 extrn __imp_strstr:dword
.idata:0041C4E8                                         ; DATA XREF: strstr↑r
.idata:0041C4EC ; int (__cdecl *tolower)(int C)
.idata:0041C4EC                 extrn __imp_tolower:dword
.idata:0041C4EC                                         ; DATA XREF: tolower↑r
.idata:0041C4F0 ; int (__cdecl *toupper)(int C)
.idata:0041C4F0                 extrn __imp_toupper:dword
.idata:0041C4F0                                         ; DATA XREF: toupper↑r
.idata:0041C4F4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:0041C4F4                 extrn __imp_vfprintf:dword
.idata:0041C4F4                                         ; DATA XREF: vfprintf↑r
.idata:0041C4F8
.idata:0041C500 ;
.idata:0041C500 ; Imports from OLE32.dll
.idata:0041C500 ;
.idata:0041C500 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:0041C500                 extrn __imp_CoCreateInstance:dword
.idata:0041C500                                         ; DATA XREF: CoCreateInstance↑r
.idata:0041C504 ; void (__stdcall *CoUninitialize)()
.idata:0041C504                 extrn __imp_CoUninitialize:dword
.idata:0041C504                                         ; DATA XREF: CoUninitialize↑r
.idata:0041C508 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:0041C508                 extrn __imp_OleInitialize:dword
.idata:0041C508                                         ; DATA XREF: OleInitialize↑r
.idata:0041C50C
.idata:0041C50C
.idata:0041C50C
.idata:0041C50C                 end start
