.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : B293EC7E3569B97DEC783BA198EFB4A3A742CE092C626A2B33101F8944CF719A
.text:00401000 ; Input MD5    : 405845363E299C47540DCB06CA93FA05
.text:00401000 ; Input CRC32  : F9A6F36B
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/unexpand.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A262 (Wed Apr 20 18:41:38 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 00005260 (  21088.)
.text:00401000 ; Section size in file          : 00005400 (  21504.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_401780+6C↓p
.text:00401040                                         ; .text:00405D60↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_405D00
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_407000
.text:004010A2                 mov     edx, dword_407060
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_407004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_407080, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_407080
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_405CD0
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_407000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_407004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_401780
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_405D00
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 ; const char byte_401280[]
.text:00401280 byte_401280     db 2Dh, 0               ; DATA XREF: sub_401780+572↓o
.text:00401280                                         ; .data:off_407010↓o
.text:00401282 aTabs           db 'tabs',0             ; DATA XREF: .text:off_4012C0↓o
.text:00401287 aAll            db 'all',0              ; DATA XREF: .text:004012D0↓o
.text:0040128B aFirstOnly      db 'first-only',0       ; DATA XREF: .text:004012E0↓o
.text:00401296 aHelp           db 'help',0             ; DATA XREF: .text:004012F0↓o
.text:0040129B aVersion        db 'version',0          ; DATA XREF: .text:00401300↓o
.text:004012A3                 align 20h
.text:004012C0 off_4012C0      dd offset aTabs         ; DATA XREF: sub_401780+AE↓o
.text:004012C0                                         ; "tabs"
.text:004012C4                 dd 1, 0
.text:004012CC                 dd 74h
.text:004012D0                 dd offset aAll          ; "all"
.text:004012D4                 dd 2 dup(0)
.text:004012DC                 dd 61h
.text:004012E0                 dd offset aFirstOnly    ; "first-only"
.text:004012E4                 dd 2 dup(0)
.text:004012EC                 dd 80h
.text:004012F0                 dd offset aHelp         ; "help"
.text:004012F4                 dd 2 dup(0)
.text:004012FC                 dd 0FFFFFF7Eh
.text:00401300                 dd offset aVersion      ; "version"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:00401320 ; const char Locale
.text:00401320 Locale          db 0                    ; DATA XREF: sub_401780+29↓o
.text:00401321                 align 20h
.text:00401340 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:00401340                                         ; DATA XREF: sub_401780+43↓o
.text:00401363 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_401780+4B↓o
.text:00401363                                         ; sub_401780+58↓o
.text:0040136D ; const char a0123456789at[]
.text:0040136D a0123456789at   db ',0123456789at:',0   ; DATA XREF: sub_401780+B9↓o
.text:0040137C aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: sub_401780+14E↓o
.text:0040138C a530            db '5.3.0',0            ; DATA XREF: sub_401780+156↓o
.text:00401392 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_401780+161↓o
.text:004013A0 ; const FILE stru_4013A0
.text:004013A0 stru_4013A0     FILE <78656E75h, 646E6170h, 62617400h, 72612073h, 6F742065h, \
.text:004013A0                                         ; DATA XREF: sub_401780+169↓o
.text:004013A0                                         ; sub_401780:loc_401993↓o ...
.text:004013A0                       6166206Fh, 70612072h, 747261h>
.text:004013C0 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.text:004013C0                                         ; DATA XREF: sub_401780:loc_4019F8↓o
.text:004013C0                                         ; .text:loc_401E70↓o
.text:004013E1                 align 20h
.text:00401400 aConvertBlanksI db 'Convert blanks in each FILE to tabs, writing to standard output.',0Ah
.text:00401400                                         ; DATA XREF: sub_401780+297↓o
.text:00401400                                         ; .text:00401E8F↓o
.text:00401400                 db 'With no FILE, or when FILE is -, read standard input.',0Ah
.text:00401400                 db 0Ah,0
.text:00401479                 align 10h
.text:00401480 aMandatoryArgum db 'Mandatory arguments to long options are mandatory for short optio'
.text:00401480                                         ; DATA XREF: sub_401780+2B9↓o
.text:00401480                                         ; .text:00401EB1↓o
.text:00401480                 db 'ns too.',0Ah,0
.text:004014CA                 align 20h
.text:004014E0 aAAllConvertAll db '  -a, --all        convert all blanks, instead of just initial bl'
.text:004014E0                                         ; DATA XREF: sub_401780+2DB↓o
.text:004014E0                                         ; .text:00401ED3↓o
.text:004014E0                 db 'anks',0Ah
.text:004014E0                 db '      --first-only convert only leading sequences of blanks (over'
.text:004014E0                 db 'rides -a)',0Ah
.text:004014E0                 db '  -t, --tabs=N     have tabs N characters apart instead of 8 (ena'
.text:004014E0                 db 'bles -a)',0Ah
.text:004014E0                 db '  -t, --tabs=LIST  use comma separated LIST of tab positions (ena'
.text:004014E0                 db 'bles -a)',0Ah,0
.text:00401606                 align 20h
.text:00401620 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:00401620                                         ; DATA XREF: sub_401780+2FD↓o
.text:00401620                                         ; .text:00401EF5↓o
.text:0040164D                 align 20h
.text:00401660 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401660                                         ; DATA XREF: sub_401780+31F↓o
.text:00401660                                         ; .text:00401F17↓o
.text:00401696 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_401780+341↓o
.text:00401696                                         ; .text:00401F39↓o
.text:00401696                 db 'Report bugs to <%s>.',0Ah,0
.text:004016AD aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004016AD                                         ; DATA XREF: sub_401780+34E↓o
.text:004016AD                                         ; .text:00401F46↓o
.text:004016C3                 align 20h
.text:004016E0 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:004016E0                                         ; DATA XREF: sub_401780:loc_401B31↓o
.text:004016E0                                         ; .text:00401E3C↓o
.text:00401707 aTabSizesMustBe db 'tab sizes must be ascending',0
.text:00401707                                         ; DATA XREF: sub_401780:loc_401C3E↓o
.text:00401723 aTabSizeCannotB db 'tab size cannot be 0',0
.text:00401723                                         ; DATA XREF: sub_401780:loc_401D31↓o
.text:00401738                 align 10h
.text:00401740 aListOptionIsOb db '`-LIST',27h,' option is obsolete; use `--first-only -t LIST',27h,0
.text:00401740                                         ; DATA XREF: sub_401780:loc_401DF7↓o
.text:00401777                 align 10h
.text:00401780
.text:00401780 ; =============== S U B R O U T I N E =======================================
.text:00401780
.text:00401780 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:00401780
.text:00401780 sub_401780      proc near               ; CODE XREF: sub_401080+E5↑p
.text:00401780
.text:00401780 Category        = dword ptr -58h
.text:00401780 Locale          = dword ptr -54h
.text:00401780 var_50          = dword ptr -50h
.text:00401780 var_4C          = byte ptr -4Ch
.text:00401780 var_48          = byte ptr -48h
.text:00401780 var_44          = dword ptr -44h
.text:00401780 var_34          = dword ptr -34h
.text:00401780 var_30          = dword ptr -30h
.text:00401780 var_2C          = dword ptr -2Ch
.text:00401780 var_28          = dword ptr -28h
.text:00401780 var_24          = dword ptr -24h
.text:00401780 var_20          = dword ptr -20h
.text:00401780 var_1C          = dword ptr -1Ch
.text:00401780 var_13          = byte ptr -13h
.text:00401780 var_12          = byte ptr -12h
.text:00401780 var_11          = byte ptr -11h
.text:00401780 arg_0           = dword ptr  8
.text:00401780 arg_4           = dword ptr  0Ch
.text:00401780
.text:00401780                 push    ebp
.text:00401781                 xor     eax, eax
.text:00401783                 mov     ebp, esp
.text:00401785                 push    edi
.text:00401786                 push    esi
.text:00401787                 push    ebx
.text:00401788                 sub     esp, 4Ch
.text:0040178B                 and     esp, 0FFFFFFF0h
.text:0040178E                 call    __alloca
.text:00401793                 call    sub_405DA0
.text:00401798                 mov     [ebp+var_11], 0
.text:0040179C                 mov     eax, [ebp+arg_4]
.text:0040179F                 mov     [ebp+var_12], 0
.text:004017A3                 mov     [ebp+var_13], 0
.text:004017A7                 mov     edi, [eax]
.text:004017A9                 mov     [esp+58h+Locale], offset Locale ; Locale
.text:004017B1                 mov     [esp+58h+Category], 0 ; Category
.text:004017B8                 mov     ds:dword_408230, edi
.text:004017BE                 call    setlocale
.text:004017C3                 mov     [esp+58h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:004017CB                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004017D2                 call    ds:__imp_libintl_bindtextdomain
.text:004017D8                 mov     [esp+58h+Category], offset aCoreutils ; "coreutils"
.text:004017DF                 call    ds:libintl_textdomain
.text:004017E5                 mov     [esp+58h+Category], offset sub_4040A0 ; void (__cdecl *)()
.text:004017EC                 call    sub_401040
.text:004017F1                 mov     ds:byte_408080, 0
.text:004017F8                 xor     ecx, ecx
.text:004017FA                 xor     edx, edx
.text:004017FC                 mov     ds:dword_408090, ecx
.text:00401802                 xor     eax, eax
.text:00401804                 mov     ds:byte_408010, 0
.text:0040180B                 mov     ds:dword_408040, edx
.text:00401811                 mov     ds:dword_408060, eax
.text:00401816                 lea     esi, [esi+0]
.text:00401819                 lea     edi, [edi+0]
.text:00401820
.text:00401820 loc_401820:                             ; CODE XREF: sub_401780+13B↓j
.text:00401820                                         ; sub_401780+37D↓j ...
.text:00401820                 mov     dword ptr [esp+58h+var_48], 0 ; int
.text:00401828                 mov     ecx, [ebp+arg_0]
.text:0040182B                 mov     eax, [ebp+arg_4]
.text:0040182E                 mov     dword ptr [esp+58h+var_4C], offset off_4012C0 ; char
.text:00401836                 mov     [esp+58h+Category], ecx ; int
.text:00401839                 mov     [esp+58h+var_50], offset a0123456789at ; ",0123456789at:"
.text:00401841                 mov     [esp+58h+Locale], eax ; int
.text:00401845                 call    sub_403F30
.text:0040184A                 cmp     eax, 0FFFFFFFFh
.text:0040184D                 mov     ecx, eax
.text:0040184F                 jz      loc_401B69
.text:00401855                 cmp     ecx, 3Fh ; '?'
.text:00401858                 jz      loc_401B31
.text:0040185E                 cmp     ecx, 3Fh ; '?'
.text:00401861                 jg      loc_401AE3
.text:00401867                 cmp     ecx, 0FFFFFF7Eh
.text:0040186D                 jz      loc_4019F8
.text:00401873                 cmp     ecx, 0FFFFFF7Eh
.text:00401879                 jg      loc_401905
.text:0040187F                 cmp     ecx, 0FFFFFF7Dh
.text:00401885                 jz      short loc_4018C0
.text:00401887
.text:00401887 loc_401887:                             ; CODE XREF: sub_401780+188↓j
.text:00401887                                         ; sub_401780+370↓j ...
.text:00401887                 cmp     [ebp+var_11], 0
.text:0040188B                 jnz     short loc_401895
.text:0040188D                 mov     [ebp+var_11], 1
.text:00401891                 xor     ebx, ebx
.text:00401893                 xor     esi, esi
.text:00401895
.text:00401895 loc_401895:                             ; CODE XREF: sub_401780+10B↑j
.text:00401895                 mov     edx, ebx
.text:00401897                 mov     edi, esi
.text:00401899                 shl     edx, 2
.text:0040189C                 shld    edi, ebx, 2
.text:004018A0                 mov     eax, ecx
.text:004018A2                 add     ebx, edx
.text:004018A4                 adc     esi, edi
.text:004018A6                 cdq
.text:004018A7                 shld    esi, ebx, 1
.text:004018AB                 add     ebx, ebx
.text:004018AD                 add     ebx, ecx
.text:004018AF                 adc     esi, edx
.text:004018B1                 add     ebx, 0FFFFFFD0h
.text:004018B4                 adc     esi, 0FFFFFFFFh
.text:004018B7
.text:004018B7 loc_4018B7:                             ; CODE XREF: sub_401780+20E↓j
.text:004018B7                 mov     [ebp+var_13], 1
.text:004018BB                 jmp     loc_401820
.text:004018C0 ; ---------------------------------------------------------------------------
.text:004018C0
.text:004018C0 loc_4018C0:                             ; CODE XREF: sub_401780+105↑j
.text:004018C0                 mov     [esp+58h+var_44], 0
.text:004018C8                 mov     edx, ds:_iob
.text:004018CE                 mov     dword ptr [esp+58h+var_48], offset aDavidMackenzie ; "David MacKenzie"
.text:004018D6                 mov     dword ptr [esp+58h+var_4C], offset a530 ; "5.3.0"
.text:004018DE                 add     edx, 20h ; ' '
.text:004018E1                 mov     [esp+58h+var_50], offset aGnuCoreutils ; "GNU coreutils"
.text:004018E9                 mov     [esp+58h+Locale], offset stru_4013A0 ; FILE *
.text:004018F1                 mov     [esp+58h+Category], edx ; FILE *
.text:004018F4                 call    sub_403EF0
.text:004018F9
.text:004018F9 loc_4018F9:                             ; CODE XREF: sub_401780+35E↓j
.text:004018F9                 mov     [esp+58h+Category], 0 ; Code
.text:00401900
.text:00401900 loc_401900:                             ; CODE XREF: sub_401780+3E4↓j
.text:00401900                                         ; sub_401780+556↓j
.text:00401900                 call    exit
.text:00401905 ; ---------------------------------------------------------------------------
.text:00401905
.text:00401905 loc_401905:                             ; CODE XREF: sub_401780+F9↑j
.text:00401905                 cmp     ecx, 2Ch ; ','
.text:00401908                 jnz     loc_401887
.text:0040190E                 cmp     [ebp+var_11], 0
.text:00401912                 jz      short loc_40198A
.text:00401914                 mov     [ebp+var_20], ebx
.text:00401917                 mov     ecx, ds:dword_408060
.text:0040191D                 mov     [ebp+var_1C], esi
.text:00401920                 test    ecx, ecx
.text:00401922                 mov     [ebp+var_2C], ecx
.text:00401925                 mov     [ebp+var_34], ecx
.text:00401928                 jz      loc_4019EA
.text:0040192E                 mov     edi, ds:dword_408040
.text:00401934                 mov     eax, ebx
.text:00401936                 mov     edx, esi
.text:00401938                 sub     eax, [edi+ecx*8-8]
.text:0040193C                 mov     [ebp+var_30], edi
.text:0040193F                 sbb     edx, [edi+ecx*8-4]
.text:00401943                 mov     [ebp+var_20], eax
.text:00401946                 mov     [ebp+var_1C], edx
.text:00401949
.text:00401949 loc_401949:                             ; CODE XREF: sub_401780+273↓j
.text:00401949                 mov     edi, [ebp+var_34]
.text:0040194C                 cmp     edi, ds:dword_408050
.text:00401952                 jz      short loc_4019BA
.text:00401954
.text:00401954 loc_401954:                             ; CODE XREF: sub_401780+265↓j
.text:00401954                 mov     edi, [ebp+var_2C]
.text:00401957                 xor     ecx, ecx
.text:00401959                 mov     eax, [ebp+var_30]
.text:0040195C                 mov     [eax+edi*8], ebx
.text:0040195F                 mov     [eax+edi*8+4], esi
.text:00401963                 inc     edi
.text:00401964                 mov     eax, ds:dword_408030
.text:00401969                 cmp     ecx, [ebp+var_1C]
.text:0040196C                 mov     ds:dword_408060, edi
.text:00401972                 ja      short loc_40198A
.text:00401974                 jb      short loc_40197B
.text:00401976                 cmp     eax, [ebp+var_20]
.text:00401979                 jnb     short loc_40198A
.text:0040197B
.text:0040197B loc_40197B:                             ; CODE XREF: sub_401780+1F4↑j
.text:0040197B                 cmp     [ebp+var_1C], 0
.text:0040197F                 ja      short loc_401993
.text:00401981
.text:00401981 loc_401981:                             ; CODE XREF: sub_401780+238↓j
.text:00401981                 mov     edx, [ebp+var_20]
.text:00401984                 mov     ds:dword_408030, edx
.text:0040198A
.text:0040198A loc_40198A:                             ; CODE XREF: sub_401780+192↑j
.text:0040198A                                         ; sub_401780+1F2↑j ...
.text:0040198A                 mov     [ebp+var_11], 0
.text:0040198E                 jmp     loc_4018B7
.text:00401993 ; ---------------------------------------------------------------------------
.text:00401993
.text:00401993 loc_401993:                             ; CODE XREF: sub_401780+1FF↑j
.text:00401993                 mov     [esp+58h+Category], (offset stru_4013A0._base+1)
.text:0040199A                 call    ds:libintl_gettext
.text:004019A0                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:004019A8                 mov     [esp+58h+Category], 1 ; Code
.text:004019AF                 mov     [esp+58h+var_50], eax ; char *
.text:004019B3                 call    sub_405930
.text:004019B8                 jmp     short loc_401981
.text:004019BA ; ---------------------------------------------------------------------------
.text:004019BA
.text:004019BA loc_4019BA:                             ; CODE XREF: sub_401780+1D2↑j
.text:004019BA                 mov     [esp+58h+var_50], 8 ; int
.text:004019C2                 mov     edx, [ebp+var_30]
.text:004019C5                 mov     [esp+58h+Locale], offset dword_408050 ; int
.text:004019CD                 mov     [esp+58h+Category], edx ; void *
.text:004019D0                 call    sub_404280
.text:004019D5                 mov     [ebp+var_30], eax
.text:004019D8                 mov     ds:dword_408040, eax
.text:004019DD                 mov     eax, ds:dword_408060
.text:004019E2                 mov     [ebp+var_2C], eax
.text:004019E5                 jmp     loc_401954
.text:004019EA ; ---------------------------------------------------------------------------
.text:004019EA
.text:004019EA loc_4019EA:                             ; CODE XREF: sub_401780+1A8↑j
.text:004019EA                 mov     ecx, ds:dword_408040
.text:004019F0                 mov     [ebp+var_30], ecx
.text:004019F3                 jmp     loc_401949
.text:004019F8 ; ---------------------------------------------------------------------------
.text:004019F8
.text:004019F8 loc_4019F8:                             ; CODE XREF: sub_401780+ED↑j
.text:004019F8                 mov     [esp+58h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:004019FF                 call    ds:libintl_gettext
.text:00401A05                 mov     esi, ds:dword_408230
.text:00401A0B                 mov     [esp+58h+Category], eax ; Format
.text:00401A0E                 mov     [esp+58h+Locale], esi
.text:00401A12                 call    printf
.text:00401A17                 mov     [esp+58h+Category], offset aConvertBlanksI ; "Convert blanks in each FILE to tabs, wr"...
.text:00401A1E                 call    ds:libintl_gettext
.text:00401A24                 mov     ebx, ds:_iob
.text:00401A2A                 add     ebx, 20h ; ' '
.text:00401A2D                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401A31                 mov     [esp+58h+Category], eax ; Buffer
.text:00401A34                 call    fputs
.text:00401A39                 mov     [esp+58h+Category], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401A40                 call    ds:libintl_gettext
.text:00401A46                 mov     edi, ds:_iob
.text:00401A4C                 add     edi, 20h ; ' '
.text:00401A4F                 mov     [esp+58h+Locale], edi ; Stream
.text:00401A53                 mov     [esp+58h+Category], eax ; Buffer
.text:00401A56                 call    fputs
.text:00401A5B                 mov     [esp+58h+Category], offset aAAllConvertAll ; "  -a, --all        convert all blanks, "...
.text:00401A62                 call    ds:libintl_gettext
.text:00401A68                 mov     ecx, ds:_iob
.text:00401A6E                 add     ecx, 20h ; ' '
.text:00401A71                 mov     [esp+58h+Locale], ecx ; Stream
.text:00401A75                 mov     [esp+58h+Category], eax ; Buffer
.text:00401A78                 call    fputs
.text:00401A7D                 mov     [esp+58h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401A84                 call    ds:libintl_gettext
.text:00401A8A                 mov     esi, ds:_iob
.text:00401A90                 add     esi, 20h ; ' '
.text:00401A93                 mov     [esp+58h+Locale], esi ; Stream
.text:00401A97                 mov     [esp+58h+Category], eax ; Buffer
.text:00401A9A                 call    fputs
.text:00401A9F                 mov     [esp+58h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AA6                 call    ds:libintl_gettext
.text:00401AAC                 mov     ebx, ds:_iob
.text:00401AB2                 add     ebx, 20h ; ' '
.text:00401AB5                 mov     [esp+58h+Locale], ebx ; Stream
.text:00401AB9                 mov     [esp+58h+Category], eax ; Buffer
.text:00401ABC                 call    fputs
.text:00401AC1                 mov     [esp+58h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401AC8                 call    ds:libintl_gettext
.text:00401ACE                 mov     [esp+58h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401AD6                 mov     [esp+58h+Category], eax ; Format
.text:00401AD9                 call    printf
.text:00401ADE                 jmp     loc_4018F9
.text:00401AE3 ; ---------------------------------------------------------------------------
.text:00401AE3
.text:00401AE3 loc_401AE3:                             ; CODE XREF: sub_401780+E1↑j
.text:00401AE3                 cmp     ecx, 74h ; 't'
.text:00401AE6                 jz      short loc_401B17
.text:00401AE8                 cmp     ecx, 74h ; 't'
.text:00401AEB                 jg      short loc_401B02
.text:00401AED                 cmp     ecx, 61h ; 'a'
.text:00401AF0                 jnz     loc_401887
.text:00401AF6                 mov     ds:byte_408010, 1
.text:00401AFD                 jmp     loc_401820
.text:00401B02 ; ---------------------------------------------------------------------------
.text:00401B02
.text:00401B02 loc_401B02:                             ; CODE XREF: sub_401780+36B↑j
.text:00401B02                 cmp     ecx, 80h ; '€'
.text:00401B08                 jnz     loc_401887
.text:00401B0E                 mov     [ebp+var_12], 1
.text:00401B12                 jmp     loc_401820
.text:00401B17 ; ---------------------------------------------------------------------------
.text:00401B17
.text:00401B17 loc_401B17:                             ; CODE XREF: sub_401780+366↑j
.text:00401B17                 mov     ds:byte_408010, 1
.text:00401B1E                 mov     edx, ds:dword_408250
.text:00401B24                 mov     [esp+58h+Category], edx ; char *
.text:00401B27                 call    sub_401FB0
.text:00401B2C                 jmp     loc_401820
.text:00401B31 ; ---------------------------------------------------------------------------
.text:00401B31
.text:00401B31 loc_401B31:                             ; CODE XREF: sub_401780+D8↑j
.text:00401B31                                         ; sub_401780+69C↓j
.text:00401B31                 mov     [esp+58h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401B38                 call    ds:libintl_gettext
.text:00401B3E                 mov     ebx, ds:_iob
.text:00401B44                 mov     esi, ds:dword_408230
.text:00401B4A                 add     ebx, 40h ; '@'
.text:00401B4D                 mov     [esp+58h+var_50], esi
.text:00401B51                 mov     [esp+58h+Locale], eax ; Format
.text:00401B55                 mov     [esp+58h+Category], ebx ; Stream
.text:00401B58                 call    fprintf
.text:00401B5D                 mov     [esp+58h+Category], 1
.text:00401B64                 jmp     loc_401900
.text:00401B69 ; ---------------------------------------------------------------------------
.text:00401B69
.text:00401B69 loc_401B69:                             ; CODE XREF: sub_401780+CF↑j
.text:00401B69                 cmp     [ebp+var_13], 0
.text:00401B6D                 jz      short loc_401B7F
.text:00401B6F                 call    sub_4039D0
.text:00401B74                 cmp     eax, 30DAFh
.text:00401B79                 jg      loc_401DF7
.text:00401B7F
.text:00401B7F loc_401B7F:                             ; CODE XREF: sub_401780+3ED↑j
.text:00401B7F                 cmp     [ebp+var_12], 0
.text:00401B83                 jz      short loc_401B8C
.text:00401B85                 mov     ds:byte_408010, 0
.text:00401B8C
.text:00401B8C loc_401B8C:                             ; CODE XREF: sub_401780+403↑j
.text:00401B8C                 cmp     [ebp+var_11], 0
.text:00401B90                 jz      loc_401DE0
.text:00401B96                 mov     [ebp+var_28], ebx
.text:00401B99                 mov     edi, ds:dword_408060
.text:00401B9F                 mov     [ebp+var_24], esi
.text:00401BA2                 test    edi, edi
.text:00401BA4                 mov     eax, edi
.text:00401BA6                 mov     [ebp+var_2C], edi
.text:00401BA9                 jz      loc_401DD2
.text:00401BAF                 mov     edx, ds:dword_408040
.text:00401BB5                 mov     [ebp+var_30], edx
.text:00401BB8                 mov     edx, [ebp+var_30]
.text:00401BBB                 lea     ecx, [edx+edi*8-8]
.text:00401BBF                 mov     edx, [ecx]
.text:00401BC1                 mov     edi, [ecx+4]
.text:00401BC4                 sub     [ebp+var_28], edx
.text:00401BC7                 sbb     [ebp+var_24], edi
.text:00401BCA
.text:00401BCA loc_401BCA:                             ; CODE XREF: sub_401780+65B↓j
.text:00401BCA                 cmp     eax, ds:dword_408050
.text:00401BD0                 jz      loc_401DA1
.text:00401BD6
.text:00401BD6 loc_401BD6:                             ; CODE XREF: sub_401780+64D↓j
.text:00401BD6                 mov     edi, [ebp+var_2C]
.text:00401BD9                 mov     edx, [ebp+var_30]
.text:00401BDC                 mov     eax, ds:dword_408030
.text:00401BE1                 mov     [edx+edi*8], ebx
.text:00401BE4                 xor     ebx, ebx
.text:00401BE6                 mov     [edx+edi*8+4], esi
.text:00401BEA                 inc     edi
.text:00401BEB                 cmp     ebx, [ebp+var_24]
.text:00401BEE                 mov     [ebp+var_2C], edi
.text:00401BF1                 mov     ds:dword_408060, edi
.text:00401BF7                 ja      short loc_401C12
.text:00401BF9                 jb      short loc_401C00
.text:00401BFB                 cmp     eax, [ebp+var_28]
.text:00401BFE                 jnb     short loc_401C12
.text:00401C00
.text:00401C00 loc_401C00:                             ; CODE XREF: sub_401780+479↑j
.text:00401C00                 cmp     [ebp+var_24], 0
.text:00401C04                 ja      loc_401D65
.text:00401C0A
.text:00401C0A loc_401C0A:                             ; CODE XREF: sub_401780+61C↓j
.text:00401C0A                 mov     eax, [ebp+var_28]
.text:00401C0D                 mov     ds:dword_408030, eax
.text:00401C12
.text:00401C12 loc_401C12:                             ; CODE XREF: sub_401780+477↑j
.text:00401C12                                         ; sub_401780+47E↑j ...
.text:00401C12                 xor     edi, edi
.text:00401C14                 xor     ebx, ebx
.text:00401C16                 xor     esi, esi
.text:00401C18                 cmp     edi, [ebp+var_2C]
.text:00401C1B                 jnb     short loc_401C83
.text:00401C1D                 lea     esi, [esi+0]
.text:00401C20
.text:00401C20 loc_401C20:                             ; CODE XREF: sub_401780+4F8↓j
.text:00401C20                 mov     ecx, [ebp+var_30]
.text:00401C23                 mov     edx, [ecx+edi*8+4]
.text:00401C27                 mov     eax, [ecx+edi*8]
.text:00401C2A                 mov     ecx, edx
.text:00401C2C                 or      ecx, eax
.text:00401C2E                 jz      loc_401D31
.text:00401C34
.text:00401C34 loc_401C34:                             ; CODE XREF: sub_401780+5E0↓j
.text:00401C34                 cmp     edx, esi
.text:00401C36                 ja      short loc_401C70
.text:00401C38                 jb      short loc_401C3E
.text:00401C3A                 cmp     eax, ebx
.text:00401C3C                 ja      short loc_401C70
.text:00401C3E
.text:00401C3E loc_401C3E:                             ; CODE XREF: sub_401780+4B8↑j
.text:00401C3E                 mov     [esp+58h+Category], offset aTabSizesMustBe ; "tab sizes must be ascending"
.text:00401C45                 call    ds:libintl_gettext
.text:00401C4B                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401C53                 mov     [esp+58h+Category], 1 ; Code
.text:00401C5A                 mov     [esp+58h+var_50], eax ; char *
.text:00401C5E                 call    sub_405930
.text:00401C63                 mov     esi, [ebp+var_30]
.text:00401C66                 mov     eax, [esi+edi*8]
.text:00401C69                 mov     edx, [esi+edi*8+4]
.text:00401C6D                 lea     esi, [esi+0]
.text:00401C70
.text:00401C70 loc_401C70:                             ; CODE XREF: sub_401780+4B6↑j
.text:00401C70                                         ; sub_401780+4BC↑j
.text:00401C70                 inc     edi
.text:00401C71                 mov     ebx, eax
.text:00401C73                 mov     esi, edx
.text:00401C75                 cmp     edi, [ebp+var_2C]
.text:00401C78                 jb      short loc_401C20
.text:00401C7A                 mov     edx, ds:dword_408060
.text:00401C80                 mov     [ebp+var_2C], edx
.text:00401C83
.text:00401C83 loc_401C83:                             ; CODE XREF: sub_401780+49B↑j
.text:00401C83                 mov     ecx, [ebp+var_2C]
.text:00401C86                 test    ecx, ecx
.text:00401C88                 jnz     loc_401D0E
.text:00401C8E                 mov     ebx, 8
.text:00401C93                 mov     eax, 8
.text:00401C98                 mov     ds:dword_408030, ebx
.text:00401C9E                 mov     ds:dword_408020, eax
.text:00401CA3
.text:00401CA3 loc_401CA3:                             ; CODE XREF: sub_401780+59C↓j
.text:00401CA3                                         ; sub_401780+5AC↓j
.text:00401CA3                 mov     ebx, dword_407020
.text:00401CA9                 mov     eax, [ebp+arg_4]
.text:00401CAC                 cmp     ebx, [ebp+arg_0]
.text:00401CAF                 lea     edx, [eax+ebx*4]
.text:00401CB2                 jl      short loc_401CB9
.text:00401CB4                 mov     edx, offset off_407010
.text:00401CB9
.text:00401CB9 loc_401CB9:                             ; CODE XREF: sub_401780+532↑j
.text:00401CB9                 mov     ds:dword_408070, edx
.text:00401CBF                 call    sub_402350
.text:00401CC4                 cmp     ds:byte_408080, 0
.text:00401CCB                 jnz     short loc_401CDB
.text:00401CCD
.text:00401CCD loc_401CCD:                             ; CODE XREF: sub_401780+56B↓j
.text:00401CCD                                         ; sub_401780+58C↓j
.text:00401CCD                 mov     esi, ds:dword_408090
.text:00401CD3                 mov     [esp+58h+Category], esi
.text:00401CD6                 jmp     loc_401900
.text:00401CDB ; ---------------------------------------------------------------------------
.text:00401CDB
.text:00401CDB loc_401CDB:                             ; CODE XREF: sub_401780+54B↑j
.text:00401CDB                 mov     ecx, ds:_iob
.text:00401CE1                 mov     [esp+58h+Category], ecx ; Stream
.text:00401CE4                 call    fclose
.text:00401CE9                 test    eax, eax
.text:00401CEB                 jz      short loc_401CCD
.text:00401CED                 call    _errno
.text:00401CF2                 mov     [esp+58h+var_50], offset byte_401280 ; char *
.text:00401CFA                 mov     edi, [eax]
.text:00401CFC                 mov     [esp+58h+Category], 1 ; Code
.text:00401D03                 mov     [esp+58h+Locale], edi ; ErrorMessage
.text:00401D07                 call    sub_405930
.text:00401D0C                 jmp     short loc_401CCD
.text:00401D0E ; ---------------------------------------------------------------------------
.text:00401D0E
.text:00401D0E loc_401D0E:                             ; CODE XREF: sub_401780+508↑j
.text:00401D0E                 cmp     [ebp+var_2C], 1
.text:00401D12                 jz      short loc_401D1E
.text:00401D14                 xor     edx, edx
.text:00401D16                 mov     ds:dword_408020, edx
.text:00401D1C                 jmp     short loc_401CA3
.text:00401D1E ; ---------------------------------------------------------------------------
.text:00401D1E
.text:00401D1E loc_401D1E:                             ; CODE XREF: sub_401780+592↑j
.text:00401D1E                 mov     esi, ds:dword_408040
.text:00401D24                 mov     edi, [esi]
.text:00401D26                 mov     ds:dword_408020, edi
.text:00401D2C                 jmp     loc_401CA3
.text:00401D31 ; ---------------------------------------------------------------------------
.text:00401D31
.text:00401D31 loc_401D31:                             ; CODE XREF: sub_401780+4AE↑j
.text:00401D31                 mov     [esp+58h+Category], offset aTabSizeCannotB ; "tab size cannot be 0"
.text:00401D38                 call    ds:libintl_gettext
.text:00401D3E                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401D46                 mov     [esp+58h+Category], 1 ; Code
.text:00401D4D                 mov     [esp+58h+var_50], eax ; char *
.text:00401D51                 call    sub_405930
.text:00401D56                 mov     ecx, [ebp+var_30]
.text:00401D59                 mov     eax, [ecx+edi*8]
.text:00401D5C                 mov     edx, [ecx+edi*8+4]
.text:00401D60                 jmp     loc_401C34
.text:00401D65 ; ---------------------------------------------------------------------------
.text:00401D65
.text:00401D65 loc_401D65:                             ; CODE XREF: sub_401780+484↑j
.text:00401D65                 mov     [esp+58h+Category], (offset stru_4013A0._base+1)
.text:00401D6C                 call    ds:libintl_gettext
.text:00401D72                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401D7A                 mov     [esp+58h+Category], 1 ; Code
.text:00401D81                 mov     [esp+58h+var_50], eax ; char *
.text:00401D85                 call    sub_405930
.text:00401D8A                 mov     ecx, ds:dword_408060
.text:00401D90                 mov     esi, ds:dword_408040
.text:00401D96                 mov     [ebp+var_2C], ecx
.text:00401D99                 mov     [ebp+var_30], esi
.text:00401D9C                 jmp     loc_401C0A
.text:00401DA1 ; ---------------------------------------------------------------------------
.text:00401DA1
.text:00401DA1 loc_401DA1:                             ; CODE XREF: sub_401780+450↑j
.text:00401DA1                 mov     [esp+58h+var_50], 8 ; int
.text:00401DA9                 mov     eax, [ebp+var_30]
.text:00401DAC                 mov     [esp+58h+Locale], offset dword_408050 ; int
.text:00401DB4                 mov     [esp+58h+Category], eax ; void *
.text:00401DB7                 call    sub_404280
.text:00401DBC                 mov     [ebp+var_30], eax
.text:00401DBF                 mov     ecx, ds:dword_408060
.text:00401DC5                 mov     ds:dword_408040, eax
.text:00401DCA                 mov     [ebp+var_2C], ecx
.text:00401DCD                 jmp     loc_401BD6
.text:00401DD2 ; ---------------------------------------------------------------------------
.text:00401DD2
.text:00401DD2 loc_401DD2:                             ; CODE XREF: sub_401780+429↑j
.text:00401DD2                 mov     edi, ds:dword_408040
.text:00401DD8                 mov     [ebp+var_30], edi
.text:00401DDB                 jmp     loc_401BCA
.text:00401DE0 ; ---------------------------------------------------------------------------
.text:00401DE0
.text:00401DE0 loc_401DE0:                             ; CODE XREF: sub_401780+410↑j
.text:00401DE0                 mov     edi, ds:dword_408060
.text:00401DE6                 mov     ebx, ds:dword_408040
.text:00401DEC                 mov     [ebp+var_2C], edi
.text:00401DEF                 mov     [ebp+var_30], ebx
.text:00401DF2                 jmp     loc_401C12
.text:00401DF7 ; ---------------------------------------------------------------------------
.text:00401DF7
.text:00401DF7 loc_401DF7:                             ; CODE XREF: sub_401780+3F9↑j
.text:00401DF7                 mov     [esp+58h+Category], offset aListOptionIsOb ; "`-LIST' option is obsolete; use `--firs"...
.text:00401DFE                 call    ds:libintl_gettext
.text:00401E04                 mov     [esp+58h+Locale], 0 ; ErrorMessage
.text:00401E0C                 mov     [esp+58h+Category], 0 ; Code
.text:00401E13                 mov     [esp+58h+var_50], eax ; char *
.text:00401E17                 call    sub_405930
.text:00401E1C                 jmp     loc_401B31
.text:00401E1C sub_401780      endp
.text:00401E1C
.text:00401E21 ; ---------------------------------------------------------------------------
.text:00401E21                 jmp     short loc_401E30
.text:00401E21 ; ---------------------------------------------------------------------------
.text:00401E23                 align 10h
.text:00401E30
.text:00401E30 loc_401E30:                             ; CODE XREF: .text:00401E21↑j
.text:00401E30                 push    ebx
.text:00401E31                 sub     esp, 18h
.text:00401E34                 mov     ebx, [esp+20h]
.text:00401E38                 test    ebx, ebx
.text:00401E3A                 jz      short loc_401E70
.text:00401E3C                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00401E43                 call    ds:libintl_gettext
.text:00401E49                 mov     edx, ds:_iob
.text:00401E4F                 mov     ecx, ds:dword_408230
.text:00401E55                 add     edx, 40h ; '@'
.text:00401E58                 mov     [esp+8], ecx
.text:00401E5C                 mov     [esp+4], eax
.text:00401E60                 mov     [esp], edx
.text:00401E63                 call    fprintf
.text:00401E68
.text:00401E68 loc_401E68:                             ; CODE XREF: .text:00401F56↓j
.text:00401E68                 mov     [esp], ebx
.text:00401E6B                 call    exit
.text:00401E70 ; ---------------------------------------------------------------------------
.text:00401E70
.text:00401E70 loc_401E70:                             ; CODE XREF: .text:00401E3A↑j
.text:00401E70                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:00401E77                 call    ds:libintl_gettext
.text:00401E7D                 mov     ecx, ds:dword_408230
.text:00401E83                 mov     [esp], eax
.text:00401E86                 mov     [esp+4], ecx
.text:00401E8A                 call    printf
.text:00401E8F                 mov     dword ptr [esp], offset aConvertBlanksI ; "Convert blanks in each FILE to tabs, wr"...
.text:00401E96                 call    ds:libintl_gettext
.text:00401E9C                 mov     ecx, ds:_iob
.text:00401EA2                 add     ecx, 20h ; ' '
.text:00401EA5                 mov     [esp+4], ecx
.text:00401EA9                 mov     [esp], eax
.text:00401EAC                 call    fputs
.text:00401EB1                 mov     dword ptr [esp], offset aMandatoryArgum ; "Mandatory arguments to long options are"...
.text:00401EB8                 call    ds:libintl_gettext
.text:00401EBE                 mov     ecx, ds:_iob
.text:00401EC4                 add     ecx, 20h ; ' '
.text:00401EC7                 mov     [esp+4], ecx
.text:00401ECB                 mov     [esp], eax
.text:00401ECE                 call    fputs
.text:00401ED3                 mov     dword ptr [esp], offset aAAllConvertAll ; "  -a, --all        convert all blanks, "...
.text:00401EDA                 call    ds:libintl_gettext
.text:00401EE0                 mov     ecx, ds:_iob
.text:00401EE6                 add     ecx, 20h ; ' '
.text:00401EE9                 mov     [esp+4], ecx
.text:00401EED                 mov     [esp], eax
.text:00401EF0                 call    fputs
.text:00401EF5                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401EFC                 call    ds:libintl_gettext
.text:00401F02                 mov     ecx, ds:_iob
.text:00401F08                 add     ecx, 20h ; ' '
.text:00401F0B                 mov     [esp+4], ecx
.text:00401F0F                 mov     [esp], eax
.text:00401F12                 call    fputs
.text:00401F17                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401F1E                 call    ds:libintl_gettext
.text:00401F24                 mov     ecx, ds:_iob
.text:00401F2A                 add     ecx, 20h ; ' '
.text:00401F2D                 mov     [esp+4], ecx
.text:00401F31                 mov     [esp], eax
.text:00401F34                 call    fputs
.text:00401F39                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401F40                 call    ds:libintl_gettext
.text:00401F46                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401F4E                 mov     [esp], eax
.text:00401F51                 call    printf
.text:00401F56                 jmp     loc_401E68
.text:00401F56 ; ---------------------------------------------------------------------------
.text:00401F5B ; const char Control[]
.text:00401F5B Control         db '0123456789',0       ; DATA XREF: sub_401FB0:loc_402080↓o
.text:00401F66 aTabStopIsTooLa db 'tab stop is too large %s',0
.text:00401F66                                         ; DATA XREF: sub_401FB0+104↓o
.text:00401F7F                 align 10h
.text:00401F80 aTabSizeContain db 'tab size contains invalid character(s): %s',0
.text:00401F80                                         ; DATA XREF: sub_401FB0+255↓o
.text:00401FAB                 align 10h
.text:00401FB0
.text:00401FB0 ; =============== S U B R O U T I N E =======================================
.text:00401FB0
.text:00401FB0
.text:00401FB0 ; int __cdecl sub_401FB0(char *)
.text:00401FB0 sub_401FB0      proc near               ; CODE XREF: sub_401780+3A7↑p
.text:00401FB0
.text:00401FB0 Str             = dword ptr -5Ch
.text:00401FB0 Control         = dword ptr -58h
.text:00401FB0 var_54          = dword ptr -54h
.text:00401FB0 var_50          = byte ptr -50h
.text:00401FB0 var_40          = dword ptr -40h
.text:00401FB0 var_38          = dword ptr -38h
.text:00401FB0 var_34          = dword ptr -34h
.text:00401FB0 var_30          = dword ptr -30h
.text:00401FB0 var_25          = byte ptr -25h
.text:00401FB0 var_24          = dword ptr -24h
.text:00401FB0 var_20          = dword ptr -20h
.text:00401FB0 var_15          = byte ptr -15h
.text:00401FB0 arg_0           = dword ptr  4
.text:00401FB0
.text:00401FB0                 push    ebp
.text:00401FB1                 push    edi
.text:00401FB2                 push    esi
.text:00401FB3                 push    ebx
.text:00401FB4                 sub     esp, 4Ch
.text:00401FB7                 mov     edi, [esp+5Ch+arg_0]
.text:00401FBB                 mov     [esp+5Ch+var_15], 0
.text:00401FC0                 mov     [esp+5Ch+var_25], 1
.text:00401FC5                 movzx   eax, byte ptr [edi]
.text:00401FC8                 test    al, al
.text:00401FCA                 jz      loc_402190
.text:00401FD0
.text:00401FD0 loc_401FD0:                             ; CODE XREF: sub_401FB0+152↓j
.text:00401FD0                 cmp     al, 2Ch ; ','
.text:00401FD2                 jz      loc_402240
.text:00401FD8                 movzx   edx, al
.text:00401FDB                 cmp     dl, 20h ; ' '
.text:00401FDE                 jz      loc_402240
.text:00401FE4                 cmp     dl, 9
.text:00401FE7                 jz      loc_402240
.text:00401FED                 movsx   esi, al
.text:00401FF0                 lea     edx, [esi-30h]
.text:00401FF3                 cmp     edx, 9
.text:00401FF6                 ja      loc_4021FD
.text:00401FFC                 cmp     [esp+5Ch+var_15], 0
.text:00402001                 jnz     short loc_40201C
.text:00402003                 mov     [esp+5Ch+var_24], 0
.text:0040200B                 mov     [esp+5Ch+var_20], 0
.text:00402013                 mov     [esp+5Ch+var_15], 1
.text:00402018                 mov     [esp+5Ch+var_40], edi
.text:0040201C
.text:0040201C loc_40201C:                             ; CODE XREF: sub_401FB0+51↑j
.text:0040201C                 mov     [esp+5Ch+var_34], esi
.text:00402020                 mov     ecx, [esp+5Ch+var_24]
.text:00402024                 mov     ebp, esi
.text:00402026                 mov     ebx, [esp+5Ch+var_20]
.text:0040202A                 shld    ebx, ecx, 2
.text:0040202E                 shl     ecx, 2
.text:00402031                 add     ecx, [esp+5Ch+var_24]
.text:00402035                 adc     ebx, [esp+5Ch+var_20]
.text:00402039                 sar     ebp, 1Fh
.text:0040203C                 mov     [esp+5Ch+var_30], ebp
.text:00402040                 shld    ebx, ecx, 1
.text:00402044                 add     ecx, ecx
.text:00402046                 add     [esp+5Ch+var_34], ecx
.text:0040204A                 adc     [esp+5Ch+var_30], ebx
.text:0040204E                 add     [esp+5Ch+var_34], 0FFFFFFD0h
.text:00402053                 adc     [esp+5Ch+var_30], 0FFFFFFFFh
.text:00402058                 cmp     [esp+5Ch+var_20], 19999999h
.text:00402060                 ja      short loc_402080
.text:00402062                 jb      short loc_40206E
.text:00402064                 cmp     [esp+5Ch+var_24], 99999999h
.text:0040206C                 ja      short loc_402080
.text:0040206E
.text:0040206E loc_40206E:                             ; CODE XREF: sub_401FB0+B2↑j
.text:0040206E                 cmp     [esp+5Ch+var_30], ebx
.text:00402072                 jb      short loc_402080
.text:00402074                 ja      short loc_4020EC
.text:00402076                 cmp     [esp+5Ch+var_34], ecx
.text:0040207A                 jnb     short loc_4020EC
.text:0040207C                 lea     esi, [esi+0]
.text:00402080
.text:00402080 loc_402080:                             ; CODE XREF: sub_401FB0+B0↑j
.text:00402080                                         ; sub_401FB0+BC↑j ...
.text:00402080                 mov     [esp+5Ch+Control], offset Control ; "0123456789"
.text:00402088                 mov     ebx, [esp+5Ch+var_40]
.text:0040208C                 mov     [esp+5Ch+Str], ebx ; Str
.text:0040208F                 call    strspn
.text:00402094                 mov     [esp+5Ch+Control], eax
.text:00402098                 mov     ebp, [esp+5Ch+var_40]
.text:0040209C                 mov     edi, eax
.text:0040209E                 mov     [esp+5Ch+Str], ebp
.text:004020A1                 lea     edi, [edi+ebp-1]
.text:004020A5                 call    loc_4044B0
.text:004020AA                 mov     [esp+5Ch+Str], eax ; char *
.text:004020AD                 mov     esi, eax
.text:004020AF                 call    sub_404480
.text:004020B4                 mov     [esp+5Ch+Str], offset aTabStopIsTooLa ; "tab stop is too large %s"
.text:004020BB                 mov     ebx, eax
.text:004020BD                 call    ds:libintl_gettext
.text:004020C3                 mov     dword ptr [esp+5Ch+var_50], ebx ; char
.text:004020C7                 mov     [esp+5Ch+Control], 0 ; ErrorMessage
.text:004020CF                 mov     [esp+5Ch+Str], 0 ; Code
.text:004020D6                 mov     [esp+5Ch+var_54], eax ; char *
.text:004020DA                 call    sub_405930
.text:004020DF                 mov     [esp+5Ch+Str], esi ; Block
.text:004020E2                 call    free
.text:004020E7                 mov     [esp+5Ch+var_25], 0
.text:004020EC
.text:004020EC loc_4020EC:                             ; CODE XREF: sub_401FB0+C4↑j
.text:004020EC                                         ; sub_401FB0+CA↑j
.text:004020EC                 mov     ecx, [esp+5Ch+var_34]
.text:004020F0                 mov     esi, [esp+5Ch+var_30]
.text:004020F4                 mov     [esp+5Ch+var_24], ecx
.text:004020F8                 mov     [esp+5Ch+var_20], esi
.text:004020FC
.text:004020FC loc_4020FC:                             ; CODE XREF: sub_401FB0+305↓j
.text:004020FC                 inc     edi
.text:004020FD                 movzx   eax, byte ptr [edi]
.text:00402100                 test    al, al
.text:00402102                 jnz     loc_401FD0
.text:00402108                 cmp     [esp+5Ch+var_25], 0
.text:0040210D                 jz      loc_402230
.text:00402113                 cmp     [esp+5Ch+var_15], 0
.text:00402118                 jz      short loc_402190
.text:0040211A                 mov     eax, ds:dword_408060
.text:0040211F                 mov     ebx, [esp+5Ch+var_24]
.text:00402123                 mov     esi, [esp+5Ch+var_20]
.text:00402127                 test    eax, eax
.text:00402129                 mov     ecx, eax
.text:0040212B                 jz      loc_4021EE
.text:00402131                 mov     edi, ds:dword_408040
.text:00402137                 sub     ebx, [edi+eax*8-8]
.text:0040213B                 mov     [esp+5Ch+var_38], edi
.text:0040213F                 sbb     esi, [edi+eax*8-4]
.text:00402143
.text:00402143 loc_402143:                             ; CODE XREF: sub_401FB0+248↓j
.text:00402143                 cmp     ecx, ds:dword_408050
.text:00402149                 jz      short loc_4021BF
.text:0040214B
.text:0040214B loc_40214B:                             ; CODE XREF: sub_401FB0+239↓j
.text:0040214B                 mov     ebp, [esp+5Ch+var_38]
.text:0040214F                 mov     ecx, [esp+5Ch+var_24]
.text:00402153                 mov     edi, [esp+5Ch+var_20]
.text:00402157                 mov     [ebp+eax*8+0], ecx
.text:0040215B                 mov     [ebp+eax*8+4], edi
.text:0040215F                 xor     ebp, ebp
.text:00402161                 inc     eax
.text:00402162                 mov     ds:dword_408060, eax
.text:00402167                 cmp     ebp, esi
.text:00402169                 mov     eax, ds:dword_408030
.text:0040216E                 ja      short loc_402190
.text:00402170                 jb      short loc_402176
.text:00402172                 cmp     eax, ebx
.text:00402174                 jnb     short loc_402190
.text:00402176
.text:00402176 loc_402176:                             ; CODE XREF: sub_401FB0+1C0↑j
.text:00402176                 cmp     esi, 0
.text:00402179                 ja      short loc_402198
.text:0040217B
.text:0040217B loc_40217B:                             ; CODE XREF: sub_401FB0+20D↓j
.text:0040217B                 mov     ds:dword_408030, ebx
.text:00402181                 jmp     short loc_402190
.text:00402181 ; ---------------------------------------------------------------------------
.text:00402183                 align 10h
.text:00402190
.text:00402190 loc_402190:                             ; CODE XREF: sub_401FB0+1A↑j
.text:00402190                                         ; sub_401FB0+168↑j ...
.text:00402190                 add     esp, 4Ch
.text:00402193                 pop     ebx
.text:00402194                 pop     esi
.text:00402195                 pop     edi
.text:00402196                 pop     ebp
.text:00402197                 retn
.text:00402198 ; ---------------------------------------------------------------------------
.text:00402198
.text:00402198 loc_402198:                             ; CODE XREF: sub_401FB0+1C9↑j
.text:00402198                 mov     [esp+5Ch+Str], (offset stru_4013A0._base+1)
.text:0040219F                 call    ds:libintl_gettext
.text:004021A5                 mov     [esp+5Ch+Control], 0 ; ErrorMessage
.text:004021AD                 mov     [esp+5Ch+Str], 1 ; Code
.text:004021B4                 mov     [esp+5Ch+var_54], eax ; char *
.text:004021B8                 call    sub_405930
.text:004021BD                 jmp     short loc_40217B
.text:004021BF ; ---------------------------------------------------------------------------
.text:004021BF
.text:004021BF loc_4021BF:                             ; CODE XREF: sub_401FB0+199↑j
.text:004021BF                 mov     [esp+5Ch+var_54], 8 ; int
.text:004021C7                 mov     ecx, [esp+5Ch+var_38]
.text:004021CB                 mov     [esp+5Ch+Control], offset dword_408050 ; int
.text:004021D3                 mov     [esp+5Ch+Str], ecx ; void *
.text:004021D6                 call    sub_404280
.text:004021DB                 mov     [esp+5Ch+var_38], eax
.text:004021DF                 mov     ds:dword_408040, eax
.text:004021E4                 mov     eax, ds:dword_408060
.text:004021E9                 jmp     loc_40214B
.text:004021EE ; ---------------------------------------------------------------------------
.text:004021EE
.text:004021EE loc_4021EE:                             ; CODE XREF: sub_401FB0+17B↑j
.text:004021EE                 mov     edx, ds:dword_408040
.text:004021F4                 mov     [esp+5Ch+var_38], edx
.text:004021F8                 jmp     loc_402143
.text:004021FD ; ---------------------------------------------------------------------------
.text:004021FD
.text:004021FD loc_4021FD:                             ; CODE XREF: sub_401FB0+46↑j
.text:004021FD                 mov     [esp+5Ch+Str], edi ; char *
.text:00402200                 call    sub_404480
.text:00402205                 mov     [esp+5Ch+Str], offset aTabSizeContain ; "tab size contains invalid character(s):"...
.text:0040220C                 mov     edi, eax
.text:0040220E                 call    ds:libintl_gettext
.text:00402214                 mov     dword ptr [esp+5Ch+var_50], edi ; char
.text:00402218                 mov     [esp+5Ch+Control], 0 ; ErrorMessage
.text:00402220                 mov     [esp+5Ch+Str], 0 ; Code
.text:00402227                 mov     [esp+5Ch+var_54], eax ; char *
.text:0040222B                 call    sub_405930
.text:00402230
.text:00402230 loc_402230:                             ; CODE XREF: sub_401FB0+15D↑j
.text:00402230                 mov     [esp+5Ch+Str], 1 ; Code
.text:00402237                 call    exit
.text:00402237 ; ---------------------------------------------------------------------------
.text:0040223C                 align 10h
.text:00402240
.text:00402240 loc_402240:                             ; CODE XREF: sub_401FB0+22↑j
.text:00402240                                         ; sub_401FB0+2E↑j ...
.text:00402240                 cmp     [esp+5Ch+var_15], 0
.text:00402245                 jz      short loc_4022B0
.text:00402247                 mov     eax, ds:dword_408060
.text:0040224C                 mov     ebx, [esp+5Ch+var_24]
.text:00402250                 mov     esi, [esp+5Ch+var_20]
.text:00402254                 test    eax, eax
.text:00402256                 mov     ecx, eax
.text:00402258                 jz      loc_402310
.text:0040225E                 mov     edx, ds:dword_408040
.text:00402264                 sub     ebx, [edx+eax*8-8]
.text:00402268                 mov     [esp+5Ch+var_38], edx
.text:0040226C                 sbb     esi, [edx+eax*8-4]
.text:00402270
.text:00402270 loc_402270:                             ; CODE XREF: sub_401FB0+36A↓j
.text:00402270                 cmp     ecx, ds:dword_408050
.text:00402276                 jz      short loc_4022E1
.text:00402278
.text:00402278 loc_402278:                             ; CODE XREF: sub_401FB0+35B↓j
.text:00402278                 mov     ecx, [esp+5Ch+var_20]
.text:0040227C                 mov     ebp, [esp+5Ch+var_38]
.text:00402280                 mov     edx, [esp+5Ch+var_24]
.text:00402284                 mov     [ebp+eax*8+4], ecx
.text:00402288                 xor     ecx, ecx
.text:0040228A                 mov     [ebp+eax*8+0], edx
.text:0040228E                 inc     eax
.text:0040228F                 cmp     ecx, esi
.text:00402291                 mov     ds:dword_408060, eax
.text:00402296                 mov     eax, ds:dword_408030
.text:0040229B                 ja      short loc_4022B0
.text:0040229D                 jb      short loc_4022A3
.text:0040229F                 cmp     eax, ebx
.text:004022A1                 jnb     short loc_4022B0
.text:004022A3
.text:004022A3 loc_4022A3:                             ; CODE XREF: sub_401FB0+2ED↑j
.text:004022A3                 cmp     esi, 0
.text:004022A6                 ja      short loc_4022BA
.text:004022A8
.text:004022A8 loc_4022A8:                             ; CODE XREF: sub_401FB0+32F↓j
.text:004022A8                 mov     ds:dword_408030, ebx
.text:004022AE                 mov     esi, esi
.text:004022B0
.text:004022B0 loc_4022B0:                             ; CODE XREF: sub_401FB0+295↑j
.text:004022B0                                         ; sub_401FB0+2EB↑j ...
.text:004022B0                 mov     [esp+5Ch+var_15], 0
.text:004022B5                 jmp     loc_4020FC
.text:004022BA ; ---------------------------------------------------------------------------
.text:004022BA
.text:004022BA loc_4022BA:                             ; CODE XREF: sub_401FB0+2F6↑j
.text:004022BA                 mov     [esp+5Ch+Str], (offset stru_4013A0._base+1)
.text:004022C1                 call    ds:libintl_gettext
.text:004022C7                 mov     [esp+5Ch+Control], 0 ; ErrorMessage
.text:004022CF                 mov     [esp+5Ch+Str], 1 ; Code
.text:004022D6                 mov     [esp+5Ch+var_54], eax ; char *
.text:004022DA                 call    sub_405930
.text:004022DF                 jmp     short loc_4022A8
.text:004022E1 ; ---------------------------------------------------------------------------
.text:004022E1
.text:004022E1 loc_4022E1:                             ; CODE XREF: sub_401FB0+2C6↑j
.text:004022E1                 mov     [esp+5Ch+var_54], 8 ; int
.text:004022E9                 mov     eax, [esp+5Ch+var_38]
.text:004022ED                 mov     [esp+5Ch+Control], offset dword_408050 ; int
.text:004022F5                 mov     [esp+5Ch+Str], eax ; void *
.text:004022F8                 call    sub_404280
.text:004022FD                 mov     [esp+5Ch+var_38], eax
.text:00402301                 mov     ds:dword_408040, eax
.text:00402306                 mov     eax, ds:dword_408060
.text:0040230B                 jmp     loc_402278
.text:00402310 ; ---------------------------------------------------------------------------
.text:00402310
.text:00402310 loc_402310:                             ; CODE XREF: sub_401FB0+2A8↑j
.text:00402310                 mov     ebp, ds:dword_408040
.text:00402316                 mov     [esp+5Ch+var_38], ebp
.text:0040231A                 jmp     loc_402270
.text:0040231A sub_401FB0      endp
.text:0040231A
.text:0040231A ; ---------------------------------------------------------------------------
.text:0040231F aInputLineIsToo db 'input line is too long',0
.text:0040231F                                         ; DATA XREF: sub_402350:loc_4024C1↓o
.text:0040231F                                         ; sub_402350+3ED↓o
.text:00402336 aWriteError     db 'write error',0      ; DATA XREF: sub_402350+2AF↓o
.text:00402336                                         ; sub_402350+321↓o
.text:00402342                 align 10h
.text:00402350
.text:00402350 ; =============== S U B R O U T I N E =======================================
.text:00402350
.text:00402350
.text:00402350 sub_402350      proc near               ; CODE XREF: sub_401780+53F↑p
.text:00402350
.text:00402350 FileHandle      = dword ptr -4Ch
.text:00402350 File            = dword ptr -48h
.text:00402350 ElementCount    = dword ptr -44h
.text:00402350 Stream          = dword ptr -40h
.text:00402350 var_39          = byte ptr -39h
.text:00402350 var_38          = dword ptr -38h
.text:00402350 var_32          = byte ptr -32h
.text:00402350 var_31          = byte ptr -31h
.text:00402350 var_30          = dword ptr -30h
.text:00402350 var_2C          = dword ptr -2Ch
.text:00402350 var_28          = dword ptr -28h
.text:00402350 var_24          = dword ptr -24h
.text:00402350 var_20          = dword ptr -20h
.text:00402350 var_19          = byte ptr -19h
.text:00402350 Block           = dword ptr -18h
.text:00402350
.text:00402350                 push    ebp
.text:00402351                 push    edi
.text:00402352                 push    esi
.text:00402353                 push    ebx
.text:00402354                 sub     esp, 3Ch
.text:00402357                 mov     [esp+4Ch+FileHandle], 0 ; FILE *
.text:0040235E                 call    sub_402870
.text:00402363                 test    eax, eax
.text:00402365                 mov     ebp, eax
.text:00402367                 jz      loc_40263A
.text:0040236D                 mov     edx, [eax+10h]
.text:00402370                 mov     [esp+4Ch+FileHandle], edx ; FileHandle
.text:00402373                 call    _isatty
.text:00402378                 test    eax, eax
.text:0040237A                 jz      loc_402824
.text:00402380
.text:00402380 loc_402380:                             ; CODE XREF: sub_402350+4F5↓j
.text:00402380                                         ; sub_402350+50F↓j
.text:00402380                 mov     ecx, ds:dword_408030
.text:00402386                 mov     [esp+4Ch+FileHandle], ecx ; size_t
.text:00402389                 call    sub_4041C0
.text:0040238E                 mov     [esp+4Ch+Block], eax
.text:00402392
.text:00402392 loc_402392:                             ; CODE XREF: sub_402350+1F9↓j
.text:00402392                 mov     [esp+4Ch+var_19], 1
.text:00402397                 mov     [esp+4Ch+var_24], 0
.text:0040239F                 mov     [esp+4Ch+var_20], 0
.text:004023A7                 mov     [esp+4Ch+var_2C], 0
.text:004023AF                 mov     [esp+4Ch+var_28], 0
.text:004023B7                 mov     [esp+4Ch+var_30], 0
.text:004023BF                 mov     [esp+4Ch+var_31], 0
.text:004023C4                 mov     [esp+4Ch+var_32], 1
.text:004023C9                 mov     [esp+4Ch+var_38], 0
.text:004023D1                 jmp     short loc_4023E0
.text:004023D1 ; ---------------------------------------------------------------------------
.text:004023D3                 align 10h
.text:004023E0
.text:004023E0 loc_4023E0:                             ; CODE XREF: sub_402350+81↑j
.text:004023E0                                         ; sub_402350+1F3↓j ...
.text:004023E0                 mov     edi, [ebp+4]
.text:004023E3                 dec     edi
.text:004023E4                 test    edi, edi
.text:004023E6                 mov     [ebp+4], edi
.text:004023E9                 js      loc_402815
.text:004023EF                 mov     edx, [ebp+0]
.text:004023F2                 movzx   edi, byte ptr [edx]
.text:004023F5                 inc     edx
.text:004023F6                 mov     [ebp+0], edx
.text:004023F9
.text:004023F9 loc_4023F9:                             ; CODE XREF: sub_402350+4CF↓j
.text:004023F9                 test    edi, edi
.text:004023FB                 js      loc_4027B0
.text:00402401
.text:00402401 loc_402401:                             ; CODE XREF: sub_402350+46C↓j
.text:00402401                 cmp     [esp+4Ch+var_19], 0
.text:00402406                 jz      loc_4025B8
.text:0040240C                 mov     [esp+4Ch+var_39], 0
.text:00402411                 cmp     edi, 20h ; ' '
.text:00402414                 jz      loc_4027A0
.text:0040241A                 cmp     edi, 9
.text:0040241D                 jz      loc_4027A0
.text:00402423
.text:00402423 loc_402423:                             ; CODE XREF: sub_402350+455↓j
.text:00402423                 cmp     [esp+4Ch+var_39], 0
.text:00402428                 jz      loc_402720
.text:0040242E                 mov     ecx, [esp+4Ch+var_20]
.text:00402432                 cmp     [esp+4Ch+var_28], ecx
.text:00402436                 ja      short loc_4024A0
.text:00402438                 jb      short loc_402444
.text:0040243A                 mov     eax, [esp+4Ch+var_24]
.text:0040243E                 cmp     [esp+4Ch+var_2C], eax
.text:00402442                 ja      short loc_4024A0
.text:00402444
.text:00402444 loc_402444:                             ; CODE XREF: sub_402350+E8↑j
.text:00402444                 mov     ebx, ds:dword_408020
.text:0040244A                 test    ebx, ebx
.text:0040244C                 jz      loc_4026D1
.text:00402452                 mov     ecx, [esp+4Ch+var_20]
.text:00402456                 xor     esi, esi
.text:00402458                 mov     ebx, ds:dword_408020
.text:0040245E                 mov     [esp+4Ch+Stream], esi ; char
.text:00402462                 mov     edx, [esp+4Ch+var_24]
.text:00402466                 mov     [esp+4Ch+File], ecx
.text:0040246A                 mov     [esp+4Ch+ElementCount], ebx
.text:0040246E                 mov     [esp+4Ch+FileHandle], edx
.text:00402471                 call    sub_405E10
.text:00402476                 sub     ebx, eax
.text:00402478                 mov     ecx, [esp+4Ch+var_24]
.text:0040247C                 mov     [esp+4Ch+var_2C], ebx
.text:00402480                 sbb     esi, edx
.text:00402482                 add     [esp+4Ch+var_2C], ecx
.text:00402486                 mov     [esp+4Ch+var_28], esi
.text:0040248A                 mov     esi, [esp+4Ch+var_20]
.text:0040248E                 adc     [esp+4Ch+var_28], esi
.text:00402492                 lea     esi, [esi+0]
.text:00402499                 lea     edi, [edi+0]
.text:004024A0
.text:004024A0 loc_4024A0:                             ; CODE XREF: sub_402350+E6↑j
.text:004024A0                                         ; sub_402350+F2↑j ...
.text:004024A0                 cmp     [esp+4Ch+var_19], 0
.text:004024A5                 jz      loc_402580
.text:004024AB                 mov     ebx, [esp+4Ch+var_20]
.text:004024AF                 cmp     [esp+4Ch+var_28], ebx
.text:004024B3                 ja      short loc_4024F0
.text:004024B5                 jb      short loc_4024C1
.text:004024B7                 mov     eax, [esp+4Ch+var_24]
.text:004024BB                 cmp     [esp+4Ch+var_2C], eax
.text:004024BF                 jnb     short loc_4024F0
.text:004024C1
.text:004024C1 loc_4024C1:                             ; CODE XREF: sub_402350+165↑j
.text:004024C1                 mov     [esp+4Ch+FileHandle], offset aInputLineIsToo ; "input line is too long"
.text:004024C8                 call    ds:libintl_gettext
.text:004024CE                 mov     [esp+4Ch+File], 0 ; ErrorMessage
.text:004024D6                 mov     [esp+4Ch+FileHandle], 1 ; Code
.text:004024DD                 mov     [esp+4Ch+ElementCount], eax ; char *
.text:004024E1                 call    sub_405930
.text:004024E6                 lea     esi, [esi+0]
.text:004024E9                 lea     edi, [edi+0]
.text:004024F0
.text:004024F0 loc_4024F0:                             ; CODE XREF: sub_402350+163↑j
.text:004024F0                                         ; sub_402350+16F↑j
.text:004024F0                 cmp     edi, 9
.text:004024F3                 jz      loc_4026AD
.text:004024F9                 add     [esp+4Ch+var_24], 1
.text:004024FE                 adc     [esp+4Ch+var_20], 0
.text:00402503                 cmp     [esp+4Ch+var_32], 0
.text:00402508                 jnz     short loc_40254E
.text:0040250A
.text:0040250A loc_40250A:                             ; CODE XREF: sub_402350+214↓j
.text:0040250A                 mov     eax, [esp+4Ch+var_20]
.text:0040250E                 mov     ecx, [esp+4Ch+var_28]
.text:00402512                 mov     ebx, [esp+4Ch+var_24]
.text:00402516                 mov     edx, [esp+4Ch+var_2C]
.text:0040251A                 xor     eax, ecx
.text:0040251C                 xor     ebx, edx
.text:0040251E                 or      eax, ebx
.text:00402520                 jnz     short loc_402527
.text:00402522                 mov     [esp+4Ch+var_31], 1
.text:00402527
.text:00402527 loc_402527:                             ; CODE XREF: sub_402350+1D0↑j
.text:00402527                 mov     ebx, [esp+4Ch+var_38]
.text:0040252B                 mov     eax, edi
.text:0040252D                 mov     esi, [esp+4Ch+Block]
.text:00402531                 mov     [ebx+esi], al
.text:00402534                 inc     ebx
.text:00402535                 mov     [esp+4Ch+var_38], ebx
.text:00402539                 mov     [esp+4Ch+var_32], 1
.text:0040253E                 mov     esi, esi
.text:00402540
.text:00402540 loc_402540:                             ; CODE XREF: sub_402350+28D↓j
.text:00402540                                         ; sub_402350+2A9↓j ...
.text:00402540                 cmp     edi, 0Ah
.text:00402543                 jnz     loc_4023E0
.text:00402549                 jmp     loc_402392
.text:0040254E ; ---------------------------------------------------------------------------
.text:0040254E
.text:0040254E loc_40254E:                             ; CODE XREF: sub_402350+1B8↑j
.text:0040254E                 mov     ecx, [esp+4Ch+var_20]
.text:00402552                 mov     esi, [esp+4Ch+var_28]
.text:00402556                 mov     ebx, [esp+4Ch+var_24]
.text:0040255A                 mov     edx, [esp+4Ch+var_2C]
.text:0040255E                 xor     ecx, esi
.text:00402560                 xor     ebx, edx
.text:00402562                 or      ecx, ebx
.text:00402564                 jnz     short loc_40250A
.text:00402566                 mov     edx, [esp+4Ch+Block]
.text:0040256A                 mov     edi, 9
.text:0040256F                 mov     byte ptr [edx], 9
.text:00402572                 movzx   ecx, [esp+4Ch+var_31]
.text:00402577                 mov     [esp+4Ch+var_38], ecx
.text:0040257B                 nop
.text:0040257C                 lea     esi, [esi+0]
.text:00402580
.text:00402580 loc_402580:                             ; CODE XREF: sub_402350+155↑j
.text:00402580                                         ; sub_402350+379↓j ...
.text:00402580                 mov     ebx, [esp+4Ch+var_38]
.text:00402584                 test    ebx, ebx
.text:00402586                 jnz     loc_402642
.text:0040258C
.text:0040258C loc_40258C:                             ; CODE XREF: sub_402350+358↓j
.text:0040258C                 movzx   ecx, [esp+4Ch+var_39]
.text:00402591                 xor     edx, edx
.text:00402593                 movzx   eax, [esp+4Ch+var_19]
.text:00402598                 mov     [esp+4Ch+var_32], cl
.text:0040259C                 cmp     [esp+4Ch+var_32], 0
.text:004025A1                 jnz     short loc_4025AC
.text:004025A3                 cmp     ds:byte_408010, 0
.text:004025AA                 jz      short loc_4025B1
.text:004025AC
.text:004025AC loc_4025AC:                             ; CODE XREF: sub_402350+251↑j
.text:004025AC                 mov     edx, 1
.text:004025B1
.text:004025B1 loc_4025B1:                             ; CODE XREF: sub_402350+25A↑j
.text:004025B1                 test    edx, eax
.text:004025B3                 setnz   [esp+4Ch+var_19]
.text:004025B8
.text:004025B8 loc_4025B8:                             ; CODE XREF: sub_402350+B6↑j
.text:004025B8                 test    edi, edi
.text:004025BA                 js      short loc_40262E
.text:004025BC                 mov     edx, ds:_iob
.text:004025C2                 mov     ebx, [edx+24h]
.text:004025C5                 dec     ebx
.text:004025C6                 mov     [edx+24h], ebx
.text:004025C9                 test    ebx, ebx
.text:004025CB                 js      short loc_4025E2
.text:004025CD                 mov     esi, ds:_iob
.text:004025D3                 mov     ebx, edi
.text:004025D5                 mov     eax, [esi+20h]
.text:004025D8                 mov     [eax], bl
.text:004025DA                 inc     dword ptr [esi+20h]
.text:004025DD                 jmp     loc_402540
.text:004025E2 ; ---------------------------------------------------------------------------
.text:004025E2
.text:004025E2 loc_4025E2:                             ; CODE XREF: sub_402350+27B↑j
.text:004025E2                 mov     [esp+4Ch+FileHandle], edi ; Ch
.text:004025E5                 mov     ecx, ds:_iob
.text:004025EB                 add     ecx, 20h ; ' '
.text:004025EE                 mov     [esp+4Ch+File], ecx ; File
.text:004025F2                 call    _flsbuf
.text:004025F7                 test    eax, eax
.text:004025F9                 jns     loc_402540
.text:004025FF                 mov     [esp+4Ch+FileHandle], offset aWriteError ; "write error"
.text:00402606                 call    ds:libintl_gettext
.text:0040260C                 mov     esi, eax
.text:0040260E                 call    _errno
.text:00402613                 mov     [esp+4Ch+ElementCount], esi ; char *
.text:00402617                 mov     edx, [eax]
.text:00402619                 mov     [esp+4Ch+FileHandle], 1 ; Code
.text:00402620                 mov     [esp+4Ch+File], edx ; ErrorMessage
.text:00402624                 call    sub_405930
.text:00402629                 jmp     loc_402540
.text:0040262E ; ---------------------------------------------------------------------------
.text:0040262E
.text:0040262E loc_40262E:                             ; CODE XREF: sub_402350+26A↑j
.text:0040262E                 mov     ebp, [esp+4Ch+Block]
.text:00402632                 mov     [esp+4Ch+FileHandle], ebp ; Block
.text:00402635                 call    free
.text:0040263A
.text:0040263A loc_40263A:                             ; CODE XREF: sub_402350+17↑j
.text:0040263A                 add     esp, 3Ch
.text:0040263D                 pop     ebx
.text:0040263E                 pop     esi
.text:0040263F                 pop     edi
.text:00402640                 pop     ebp
.text:00402641                 retn
.text:00402642 ; ---------------------------------------------------------------------------
.text:00402642
.text:00402642 loc_402642:                             ; CODE XREF: sub_402350+236↑j
.text:00402642                 mov     [esp+4Ch+File], 1 ; ElementSize
.text:0040264A                 mov     edx, ds:_iob
.text:00402650                 mov     esi, [esp+4Ch+var_38]
.text:00402654                 mov     ecx, [esp+4Ch+Block]
.text:00402658                 add     edx, 20h ; ' '
.text:0040265B                 mov     [esp+4Ch+Stream], edx ; char
.text:0040265F                 mov     [esp+4Ch+ElementCount], esi ; ElementCount
.text:00402663                 mov     [esp+4Ch+FileHandle], ecx ; Buffer
.text:00402666                 call    fwrite
.text:0040266B                 cmp     eax, [esp+4Ch+var_38]
.text:0040266F                 jz      short loc_40269B
.text:00402671                 mov     [esp+4Ch+FileHandle], offset aWriteError ; "write error"
.text:00402678                 call    ds:libintl_gettext
.text:0040267E                 mov     esi, eax
.text:00402680                 call    _errno
.text:00402685                 mov     [esp+4Ch+ElementCount], esi ; char *
.text:00402689                 mov     ebx, [eax]
.text:0040268B                 mov     [esp+4Ch+FileHandle], 1 ; Code
.text:00402692                 mov     [esp+4Ch+File], ebx ; ErrorMessage
.text:00402696                 call    sub_405930
.text:0040269B
.text:0040269B loc_40269B:                             ; CODE XREF: sub_402350+31F↑j
.text:0040269B                                         ; sub_402350+372↓j ...
.text:0040269B                 mov     [esp+4Ch+var_38], 0
.text:004026A3                 mov     [esp+4Ch+var_31], 0
.text:004026A8                 jmp     loc_40258C
.text:004026AD ; ---------------------------------------------------------------------------
.text:004026AD
.text:004026AD loc_4026AD:                             ; CODE XREF: sub_402350+1A3↑j
.text:004026AD                 cmp     [esp+4Ch+var_38], 1
.text:004026B2                 mov     ecx, [esp+4Ch+var_2C]
.text:004026B6                 mov     esi, [esp+4Ch+var_28]
.text:004026BA                 mov     [esp+4Ch+var_24], ecx
.text:004026BE                 mov     [esp+4Ch+var_20], esi
.text:004026C2                 jnz     short loc_40269B
.text:004026C4                 cmp     [esp+4Ch+var_31], 0
.text:004026C9                 jnz     loc_402580
.text:004026CF                 jmp     short loc_40269B
.text:004026D1 ; ---------------------------------------------------------------------------
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_402350+FC↑j
.text:004026D1                 mov     ebx, ds:dword_408060
.text:004026D7                 mov     ecx, ds:dword_408040
.text:004026DD                 lea     esi, [esi+0]
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_402350+3AA↓j
.text:004026E0                                         ; sub_402350+3B2↓j
.text:004026E0                 cmp     [esp+4Ch+var_30], ebx
.text:004026E4                 jz      short loc_402711
.text:004026E6                 mov     esi, [esp+4Ch+var_30]
.text:004026EA                 mov     edx, [ecx+esi*8+4]
.text:004026EE                 mov     eax, [ecx+esi*8]
.text:004026F1                 inc     esi
.text:004026F2                 cmp     [esp+4Ch+var_20], edx
.text:004026F6                 mov     [esp+4Ch+var_30], esi
.text:004026FA                 ja      short loc_4026E0
.text:004026FC                 jb      short loc_402704
.text:004026FE                 cmp     [esp+4Ch+var_24], eax
.text:00402702                 jnb     short loc_4026E0
.text:00402704
.text:00402704 loc_402704:                             ; CODE XREF: sub_402350+3AC↑j
.text:00402704                 mov     [esp+4Ch+var_2C], eax
.text:00402708                 mov     [esp+4Ch+var_28], edx
.text:0040270C                 jmp     loc_4024A0
.text:00402711 ; ---------------------------------------------------------------------------
.text:00402711
.text:00402711 loc_402711:                             ; CODE XREF: sub_402350+394↑j
.text:00402711                 mov     [esp+4Ch+var_19], 0
.text:00402716                 jmp     loc_402580
.text:00402716 ; ---------------------------------------------------------------------------
.text:0040271B                 align 10h
.text:00402720
.text:00402720 loc_402720:                             ; CODE XREF: sub_402350+D8↑j
.text:00402720                 cmp     edi, 8
.text:00402723                 jz      short loc_402767
.text:00402725                 add     [esp+4Ch+var_24], 1
.text:0040272A                 adc     [esp+4Ch+var_20], 0
.text:0040272F                 mov     eax, [esp+4Ch+var_20]
.text:00402733                 or      eax, [esp+4Ch+var_24]
.text:00402737                 jnz     loc_402580
.text:0040273D                 mov     [esp+4Ch+FileHandle], offset aInputLineIsToo ; "input line is too long"
.text:00402744                 call    ds:libintl_gettext
.text:0040274A                 mov     [esp+4Ch+File], 0 ; ErrorMessage
.text:00402752                 mov     [esp+4Ch+FileHandle], 1 ; Code
.text:00402759                 mov     [esp+4Ch+ElementCount], eax ; char *
.text:0040275D                 call    sub_405930
.text:00402762                 jmp     loc_402580
.text:00402767 ; ---------------------------------------------------------------------------
.text:00402767
.text:00402767 loc_402767:                             ; CODE XREF: sub_402350+3D3↑j
.text:00402767                 mov     ebx, [esp+4Ch+var_20]
.text:0040276B                 or      ebx, [esp+4Ch+var_24]
.text:0040276F                 jz      short loc_40277B
.text:00402771                 add     [esp+4Ch+var_24], 0FFFFFFFFh
.text:00402776                 adc     [esp+4Ch+var_20], 0FFFFFFFFh
.text:0040277B
.text:0040277B loc_40277B:                             ; CODE XREF: sub_402350+41F↑j
.text:0040277B                 mov     esi, [esp+4Ch+var_30]
.text:0040277F                 mov     edx, [esp+4Ch+var_24]
.text:00402783                 mov     ecx, [esp+4Ch+var_20]
.text:00402787                 test    esi, esi
.text:00402789                 mov     [esp+4Ch+var_2C], edx
.text:0040278D                 mov     [esp+4Ch+var_28], ecx
.text:00402791                 jz      loc_402580
.text:00402797                 dec     [esp+4Ch+var_30]
.text:0040279B                 jmp     loc_402580
.text:004027A0 ; ---------------------------------------------------------------------------
.text:004027A0
.text:004027A0 loc_4027A0:                             ; CODE XREF: sub_402350+C4↑j
.text:004027A0                                         ; sub_402350+CD↑j
.text:004027A0                 mov     [esp+4Ch+var_39], 1
.text:004027A5                 jmp     loc_402423
.text:004027A5 ; ---------------------------------------------------------------------------
.text:004027AA                 align 10h
.text:004027B0
.text:004027B0 loc_4027B0:                             ; CODE XREF: sub_402350+AB↑j
.text:004027B0                 mov     [esp+4Ch+FileHandle], ebp ; FILE *
.text:004027B3                 call    sub_402870
.text:004027B8                 test    eax, eax
.text:004027BA                 mov     ebp, eax
.text:004027BC                 jz      loc_402401
.text:004027C2                 mov     ebx, [ebp+10h]
.text:004027C5                 mov     [esp+4Ch+FileHandle], ebx ; FileHandle
.text:004027C8                 call    _isatty
.text:004027CD                 test    eax, eax
.text:004027CF                 jnz     loc_4023E0
.text:004027D5                 mov     [esp+4Ch+File], 8000h ; Mode
.text:004027DD                 mov     esi, [ebp+10h]
.text:004027E0                 mov     [esp+4Ch+FileHandle], esi ; FileHandle
.text:004027E3                 call    _setmode
.text:004027E8                 mov     [esp+4Ch+FileHandle], 1 ; FileHandle
.text:004027EF                 call    _isatty
.text:004027F4                 test    eax, eax
.text:004027F6                 jnz     loc_4023E0
.text:004027FC                 mov     [esp+4Ch+File], 8000h ; Mode
.text:00402804                 mov     [esp+4Ch+FileHandle], 1 ; FileHandle
.text:0040280B                 call    _setmode
.text:00402810                 jmp     loc_4023E0
.text:00402815 ; ---------------------------------------------------------------------------
.text:00402815
.text:00402815 loc_402815:                             ; CODE XREF: sub_402350+99↑j
.text:00402815                 mov     [esp+4Ch+FileHandle], ebp ; File
.text:00402818                 call    _filbuf
.text:0040281D                 mov     edi, eax
.text:0040281F                 jmp     loc_4023F9
.text:00402824 ; ---------------------------------------------------------------------------
.text:00402824
.text:00402824 loc_402824:                             ; CODE XREF: sub_402350+2A↑j
.text:00402824                 mov     [esp+4Ch+File], 8000h ; Mode
.text:0040282C                 mov     edx, [ebp+10h]
.text:0040282F                 mov     [esp+4Ch+FileHandle], edx ; FileHandle
.text:00402832                 call    _setmode
.text:00402837                 mov     [esp+4Ch+FileHandle], 1 ; FileHandle
.text:0040283E                 call    _isatty
.text:00402843                 test    eax, eax
.text:00402845                 jnz     loc_402380
.text:0040284B                 mov     [esp+4Ch+File], 8000h ; Mode
.text:00402853                 mov     [esp+4Ch+FileHandle], 1 ; FileHandle
.text:0040285A                 call    _setmode
.text:0040285F                 jmp     loc_402380
.text:0040285F sub_402350      endp
.text:0040285F
.text:0040285F ; ---------------------------------------------------------------------------
.text:00402864 ; const char aR[2]
.text:00402864 aR              db 'r',0                ; DATA XREF: sub_402870:loc_4028BD↓o
.text:00402866 ; const char aS_2[]
.text:00402866 aS_2            db '%s',0               ; DATA XREF: sub_402870:loc_4028F0↓o
.text:00402866                                         ; sub_402870+E8↓o
.text:00402869                 align 10h
.text:00402870
.text:00402870 ; =============== S U B R O U T I N E =======================================
.text:00402870
.text:00402870
.text:00402870 ; int __cdecl sub_402870(FILE *)
.text:00402870 sub_402870      proc near               ; CODE XREF: sub_402350+E↑p
.text:00402870                                         ; sub_402350+463↑p
.text:00402870
.text:00402870 Stream          = dword ptr -1Ch
.text:00402870 Mode            = dword ptr -18h
.text:00402870 var_14          = dword ptr -14h
.text:00402870 var_10          = byte ptr -10h
.text:00402870 arg_0           = dword ptr  4
.text:00402870
.text:00402870                 push    esi
.text:00402871                 push    ebx
.text:00402872                 sub     esp, 14h
.text:00402875                 mov     ebx, [esp+1Ch+arg_0]
.text:00402879                 test    ebx, ebx
.text:0040287B                 jz      short loc_4028A3
.text:0040287D                 test    byte ptr [ebx+0Ch], 20h
.text:00402881                 jnz     loc_402953
.text:00402887
.text:00402887 loc_402887:                             ; CODE XREF: sub_402870+117↓j
.text:00402887                 cmp     ebx, ds:_iob
.text:0040288D                 jz      loc_402946
.text:00402893                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00402896                 call    fclose
.text:0040289B                 test    eax, eax
.text:0040289D                 jnz     loc_402935
.text:004028A3
.text:004028A3 loc_4028A3:                             ; CODE XREF: sub_402870+B↑j
.text:004028A3                                         ; sub_402870+A5↓j ...
.text:004028A3                 mov     ecx, ds:dword_408070
.text:004028A9                 mov     esi, [ecx]
.text:004028AB                 add     ecx, 4
.text:004028AE                 mov     ds:dword_408070, ecx
.text:004028B4                 test    esi, esi
.text:004028B6                 jz      short loc_402931
.text:004028B8                 cmp     byte ptr [esi], 2Dh ; '-'
.text:004028BB                 jz      short loc_402917
.text:004028BD
.text:004028BD loc_4028BD:                             ; CODE XREF: sub_402870+AB↓j
.text:004028BD                 mov     [esp+1Ch+Mode], offset aR ; "r"
.text:004028C5                 mov     [esp+1Ch+Stream], esi ; FileName
.text:004028C8                 call    fopen
.text:004028CD                 test    eax, eax
.text:004028CF                 mov     ebx, eax
.text:004028D1                 jz      short loc_4028E1
.text:004028D3                 mov     ds:dword_408000, esi
.text:004028D9                 mov     eax, ebx
.text:004028DB
.text:004028DB loc_4028DB:                             ; CODE XREF: sub_402870+BF↓j
.text:004028DB                                         ; sub_402870+C3↓j
.text:004028DB                 add     esp, 14h
.text:004028DE                 pop     ebx
.text:004028DF                 pop     esi
.text:004028E0                 retn
.text:004028E1 ; ---------------------------------------------------------------------------
.text:004028E1
.text:004028E1 loc_4028E1:                             ; CODE XREF: sub_402870+61↑j
.text:004028E1                 call    _errno
.text:004028E6                 mov     dword ptr [esp+1Ch+var_10], esi ; char
.text:004028EA                 lea     esi, [esi+0]
.text:004028F0
.text:004028F0 loc_4028F0:                             ; CODE XREF: sub_402870+D4↓j
.text:004028F0                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:004028F8                 mov     esi, 1
.text:004028FD                 mov     edx, [eax]
.text:004028FF                 mov     [esp+1Ch+Stream], 0 ; Code
.text:00402906                 mov     [esp+1Ch+Mode], edx ; ErrorMessage
.text:0040290A                 call    sub_405930
.text:0040290F                 mov     ds:dword_408090, esi
.text:00402915                 jmp     short loc_4028A3
.text:00402917 ; ---------------------------------------------------------------------------
.text:00402917
.text:00402917 loc_402917:                             ; CODE XREF: sub_402870+4B↑j
.text:00402917                 cmp     byte ptr [esi+1], 0
.text:0040291B                 jnz     short loc_4028BD
.text:0040291D                 mov     ds:byte_408080, 1
.text:00402924                 mov     eax, ds:_iob
.text:00402929                 mov     ds:dword_408000, esi
.text:0040292F                 jmp     short loc_4028DB
.text:00402931 ; ---------------------------------------------------------------------------
.text:00402931
.text:00402931 loc_402931:                             ; CODE XREF: sub_402870+46↑j
.text:00402931                 xor     eax, eax
.text:00402933                 jmp     short loc_4028DB
.text:00402935 ; ---------------------------------------------------------------------------
.text:00402935
.text:00402935 loc_402935:                             ; CODE XREF: sub_402870+2D↑j
.text:00402935                 call    _errno
.text:0040293A                 mov     ebx, ds:dword_408000
.text:00402940                 mov     dword ptr [esp+1Ch+var_10], ebx
.text:00402944                 jmp     short loc_4028F0
.text:00402946 ; ---------------------------------------------------------------------------
.text:00402946
.text:00402946 loc_402946:                             ; CODE XREF: sub_402870+1D↑j
.text:00402946                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:00402949                 call    clearerr
.text:0040294E                 jmp     loc_4028A3
.text:00402953 ; ---------------------------------------------------------------------------
.text:00402953
.text:00402953 loc_402953:                             ; CODE XREF: sub_402870+11↑j
.text:00402953                 call    _errno
.text:00402958                 mov     [esp+1Ch+var_14], offset aS_2 ; "%s"
.text:00402960                 mov     ecx, ds:dword_408000
.text:00402966                 mov     dword ptr [esp+1Ch+var_10], ecx ; char
.text:0040296A                 mov     edx, [eax]
.text:0040296C                 mov     [esp+1Ch+Stream], 0 ; Code
.text:00402973                 mov     [esp+1Ch+Mode], edx ; ErrorMessage
.text:00402977                 call    sub_405930
.text:0040297C                 mov     edx, 1
.text:00402981                 mov     ds:dword_408090, edx
.text:00402987                 jmp     loc_402887
.text:00402987 sub_402870      endp
.text:00402987
.text:00402987 ; ---------------------------------------------------------------------------
.text:0040298C                 align 20h
.text:004029A0 dword_4029A0    dd 90002D2Dh, 7 dup(90909090h)
.text:004029A0                                         ; DATA XREF: sub_402BF0+E4↓o
.text:004029C0 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004029C0                                         ; DATA XREF: sub_402BF0+2FC↓o
.text:004029ED                 align 20h
.text:00402A00 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402A00                                         ; DATA XREF: sub_402BF0:loc_402F52↓o
.text:00402A2D                 align 20h
.text:00402A40 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402A40                                         ; DATA XREF: sub_402BF0:loc_402FF0↓o
.text:00402A40                                         ; sub_402BF0:loc_4033B7↓o
.text:00402A66                 align 20h
.text:00402A80 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402A80                                         ; DATA XREF: sub_402BF0+48E↓o
.text:00402AA0 dword_402AA0    dd 90909000h, 7 dup(90909090h)
.text:00402AA0                                         ; DATA XREF: sub_402BF0:loc_4030C1↓o
.text:00402AC0 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402AC0                                         ; DATA XREF: sub_402BF0:loc_4030DA↓o
.text:00402AE0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:00402AE0                                         ; DATA XREF: sub_402BF0:loc_4031BF↓o
.text:00402AE0                                         ; sub_402BF0:loc_4034EC↓o
.text:00402B07                 align 20h
.text:00402B20 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402B20                                         ; DATA XREF: sub_402BF0:loc_403333↓o
.text:00402B4E                 align 20h
.text:00402B60 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402B60                                         ; DATA XREF: sub_402BF0:loc_40341F↓o
.text:00402B81 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402B81                                         ; DATA XREF: sub_402BF0+93F↓o
.text:00402B9B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402B9B                                         ; DATA XREF: sub_402BF0:loc_403567↓o
.text:00402BB5 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402BB5                                         ; DATA XREF: sub_402BF0:loc_40358E↓o
.text:00402BD3 ; const char VarName[]
.text:00402BD3 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402BF0:loc_403740↓o
.text:00402BE3                 align 10h
.text:00402BF0
.text:00402BF0 ; =============== S U B R O U T I N E =======================================
.text:00402BF0
.text:00402BF0
.text:00402BF0 ; int __cdecl sub_402BF0(int, int, char *Str, int, int, int, int, int)
.text:00402BF0 sub_402BF0      proc near               ; CODE XREF: sub_403780+5A↓p
.text:00402BF0                                         ; .text:0040386A↓p ...
.text:00402BF0
.text:00402BF0 Str1            = dword ptr -5Ch
.text:00402BF0 Str2            = dword ptr -58h
.text:00402BF0 MaxCount        = dword ptr -54h
.text:00402BF0 var_50          = dword ptr -50h
.text:00402BF0 var_4C          = dword ptr -4Ch
.text:00402BF0 var_3C          = dword ptr -3Ch
.text:00402BF0 var_38          = dword ptr -38h
.text:00402BF0 var_34          = dword ptr -34h
.text:00402BF0 var_30          = dword ptr -30h
.text:00402BF0 var_2C          = dword ptr -2Ch
.text:00402BF0 var_28          = dword ptr -28h
.text:00402BF0 var_24          = dword ptr -24h
.text:00402BF0 var_20          = dword ptr -20h
.text:00402BF0 var_1C          = dword ptr -1Ch
.text:00402BF0 var_18          = dword ptr -18h
.text:00402BF0 var_14          = dword ptr -14h
.text:00402BF0 arg_0           = dword ptr  4
.text:00402BF0 arg_4           = dword ptr  8
.text:00402BF0 Str             = dword ptr  0Ch
.text:00402BF0 arg_C           = dword ptr  10h
.text:00402BF0 arg_10          = dword ptr  14h
.text:00402BF0 arg_14          = dword ptr  18h
.text:00402BF0 arg_18          = dword ptr  1Ch
.text:00402BF0 arg_1C          = dword ptr  20h
.text:00402BF0
.text:00402BF0                 push    ebp
.text:00402BF1                 mov     eax, 0FFFFFFFFh
.text:00402BF6                 push    edi
.text:00402BF7                 push    esi
.text:00402BF8                 push    ebx
.text:00402BF9                 sub     esp, 4Ch
.text:00402BFC                 mov     esi, [esp+5Ch+Str]
.text:00402C00                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402C04                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402C07                 mov     ebx, [ebp+4]
.text:00402C0A                 setz    dl
.text:00402C0D                 movzx   ecx, dl
.text:00402C10                 dec     ecx
.text:00402C11                 and     ecx, ebx
.text:00402C13                 mov     [esp+5Ch+var_14], ecx
.text:00402C17                 mov     ecx, [esp+5Ch+arg_0]
.text:00402C1B                 test    ecx, ecx
.text:00402C1D                 jle     loc_402D47
.text:00402C23                 mov     dword ptr [ebp+0Ch], 0
.text:00402C2A                 mov     ebx, [ebp+0]
.text:00402C2D                 test    ebx, ebx
.text:00402C2F                 jz      loc_403760
.text:00402C35                 mov     edi, [ebp+10h]
.text:00402C38                 test    edi, edi
.text:00402C3A                 jnz     short loc_402C93
.text:00402C3C                 lea     esi, [esi+0]
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402BF0+B7C↓j
.text:00402C40                 mov     [ebp+24h], ebx
.text:00402C43                 mov     esi, [esp+5Ch+Str]
.text:00402C47                 mov     [ebp+20h], ebx
.text:00402C4A                 mov     ecx, [esp+5Ch+arg_18]
.text:00402C4E                 xor     ebx, ebx
.text:00402C50                 mov     dword ptr [ebp+14h], 0
.text:00402C57                 test    ecx, ecx
.text:00402C59                 jz      loc_403740
.text:00402C5F
.text:00402C5F loc_402C5F:                             ; CODE XREF: sub_402BF0+B64↓j
.text:00402C5F                 mov     ebx, 1
.text:00402C64
.text:00402C64 loc_402C64:                             ; CODE XREF: sub_402BF0+B5E↓j
.text:00402C64                 mov     [ebp+1Ch], ebx
.text:00402C67                 mov     ecx, [esp+5Ch+Str]
.text:00402C6B                 movzx   eax, byte ptr [ecx]
.text:00402C6E                 cmp     al, 2Dh ; '-'
.text:00402C70                 jz      loc_403730
.text:00402C76                 cmp     al, 2Bh ; '+'
.text:00402C78                 jz      loc_403719
.text:00402C7E                 xor     edx, edx
.text:00402C80                 test    ebx, ebx
.text:00402C82                 setz    dl
.text:00402C85                 mov     [ebp+18h], edx
.text:00402C88
.text:00402C88 loc_402C88:                             ; CODE XREF: sub_402BF0+B35↓j
.text:00402C88                 mov     [esp+5Ch+Str], esi
.text:00402C8C                 mov     dword ptr [ebp+10h], 1
.text:00402C93
.text:00402C93 loc_402C93:                             ; CODE XREF: sub_402BF0+4A↑j
.text:00402C93                 mov     eax, [ebp+14h]
.text:00402C96                 test    eax, eax
.text:00402C98                 jz      short loc_402CA3
.text:00402C9A                 cmp     byte ptr [eax], 0
.text:00402C9D                 jnz     loc_402D80
.text:00402CA3
.text:00402CA3 loc_402CA3:                             ; CODE XREF: sub_402BF0+A8↑j
.text:00402CA3                 mov     ebx, [ebp+0]
.text:00402CA6                 cmp     [ebp+24h], ebx
.text:00402CA9                 jle     short loc_402CAE
.text:00402CAB                 mov     [ebp+24h], ebx
.text:00402CAE
.text:00402CAE loc_402CAE:                             ; CODE XREF: sub_402BF0+B9↑j
.text:00402CAE                 cmp     [ebp+20h], ebx
.text:00402CB1                 jle     short loc_402CB6
.text:00402CB3                 mov     [ebp+20h], ebx
.text:00402CB6
.text:00402CB6 loc_402CB6:                             ; CODE XREF: sub_402BF0+C1↑j
.text:00402CB6                 cmp     dword ptr [ebp+18h], 1
.text:00402CBA                 jz      loc_403690
.text:00402CC0
.text:00402CC0 loc_402CC0:                             ; CODE XREF: sub_402BF0+B13↓j
.text:00402CC0                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402CC4                 jz      loc_403674
.text:00402CCA                 cld
.text:00402CCB                 mov     ecx, [esp+5Ch+arg_4]
.text:00402CCF                 mov     edx, 3
.text:00402CD4                 mov     edi, offset dword_4029A0
.text:00402CD9                 mov     esi, [ecx+ebx*4]
.text:00402CDC                 mov     ecx, edx
.text:00402CDE                 repe cmpsb
.text:00402CE0                 jnz     short loc_402D1C
.text:00402CE2                 mov     edx, [ebp+24h]
.text:00402CE5                 lea     eax, [ebx+1]
.text:00402CE8                 cmp     [ebp+20h], edx
.text:00402CEB                 mov     [ebp+0], eax
.text:00402CEE                 jz      loc_403688
.text:00402CF4                 cmp     edx, eax
.text:00402CF6                 jz      short loc_402D10
.text:00402CF8                 mov     [esp+5Ch+Str2], ebp
.text:00402CFC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402D00                 mov     [esp+5Ch+Str1], ebx
.text:00402D03                 call    sub_4038A0
.text:00402D08                 nop
.text:00402D09                 lea     esi, [esi+0]
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402BF0+106↑j
.text:00402D10                                         ; sub_402BF0+A9B↓j
.text:00402D10                 mov     eax, [esp+5Ch+arg_0]
.text:00402D14                 mov     ebx, eax
.text:00402D16                 mov     [ebp+24h], eax
.text:00402D19                 mov     [ebp+0], eax
.text:00402D1C
.text:00402D1C loc_402D1C:                             ; CODE XREF: sub_402BF0+F0↑j
.text:00402D1C                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402D20                 jz      loc_403674
.text:00402D26                 mov     esi, [esp+5Ch+arg_4]
.text:00402D2A                 mov     eax, [esi+ebx*4]
.text:00402D2D                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402D30                 jz      short loc_402D57
.text:00402D32
.text:00402D32 loc_402D32:                             ; CODE XREF: sub_402BF0+16D↓j
.text:00402D32                 mov     edx, [ebp+18h]
.text:00402D35                 test    edx, edx
.text:00402D37                 jz      short loc_402D50
.text:00402D39                 mov     [ebp+0Ch], eax
.text:00402D3C                 lea     edi, [ebx+1]
.text:00402D3F                 mov     eax, 1
.text:00402D44                 mov     [ebp+0], edi
.text:00402D47
.text:00402D47 loc_402D47:                             ; CODE XREF: sub_402BF0+2D↑j
.text:00402D47                                         ; sub_402BF0+165↓j ...
.text:00402D47                 add     esp, 4Ch
.text:00402D4A                 pop     ebx
.text:00402D4B                 pop     esi
.text:00402D4C                 pop     edi
.text:00402D4D                 pop     ebp
.text:00402D4E                 retn
.text:00402D4E ; ---------------------------------------------------------------------------
.text:00402D4F                 align 10h
.text:00402D50
.text:00402D50 loc_402D50:                             ; CODE XREF: sub_402BF0+147↑j
.text:00402D50                                         ; sub_402BF0+A8A↓j ...
.text:00402D50                 mov     eax, 0FFFFFFFFh
.text:00402D55                 jmp     short loc_402D47
.text:00402D57 ; ---------------------------------------------------------------------------
.text:00402D57
.text:00402D57 loc_402D57:                             ; CODE XREF: sub_402BF0+140↑j
.text:00402D57                 movzx   edx, byte ptr [eax+1]
.text:00402D5B                 test    dl, dl
.text:00402D5D                 jz      short loc_402D32
.text:00402D5F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402D63                 xor     ecx, ecx
.text:00402D65                 test    ebx, ebx
.text:00402D67                 jz      short loc_402D72
.text:00402D69                 cmp     dl, 2Dh ; '-'
.text:00402D6C                 jz      loc_40366A
.text:00402D72
.text:00402D72 loc_402D72:                             ; CODE XREF: sub_402BF0+177↑j
.text:00402D72                                         ; sub_402BF0+A7F↓j
.text:00402D72                 lea     esi, [ecx+eax+1]
.text:00402D76                 mov     [ebp+14h], esi
.text:00402D79                 lea     esi, [esi+0]
.text:00402D80
.text:00402D80 loc_402D80:                             ; CODE XREF: sub_402BF0+AD↑j
.text:00402D80                 mov     ecx, [esp+5Ch+arg_C]
.text:00402D84                 test    ecx, ecx
.text:00402D86                 jz      loc_403110
.text:00402D8C                 mov     edx, [ebp+0]
.text:00402D8F                 mov     edi, [esp+5Ch+arg_4]
.text:00402D93                 mov     eax, [edi+edx*4]
.text:00402D96                 movzx   edx, byte ptr [eax+1]
.text:00402D9A                 cmp     dl, 2Dh ; '-'
.text:00402D9D                 jz      short loc_402DB5
.text:00402D9F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402DA3                 test    ebx, ebx
.text:00402DA5                 jz      loc_403110
.text:00402DAB                 cmp     byte ptr [eax+2], 0
.text:00402DAF                 jz      loc_40364A
.text:00402DB5
.text:00402DB5 loc_402DB5:                             ; CODE XREF: sub_402BF0+1AD↑j
.text:00402DB5                                         ; sub_402BF0+A75↓j
.text:00402DB5                 mov     [esp+5Ch+var_18], 0
.text:00402DBD                 mov     ecx, [ebp+14h]
.text:00402DC0                 mov     [esp+5Ch+var_1C], 0
.text:00402DC8                 mov     [esp+5Ch+var_20], 0
.text:00402DD0                 mov     edi, ecx
.text:00402DD2                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00402DDA                 movzx   eax, byte ptr [ecx]
.text:00402DDD                 test    al, al
.text:00402DDF                 jz      short loc_402DFC
.text:00402DE1                 cmp     al, 3Dh ; '='
.text:00402DE3                 jz      short loc_402DFC
.text:00402DE5                 lea     esi, [esi+0]
.text:00402DE9                 lea     edi, [edi+0]
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402BF0+20A↓j
.text:00402DF0                 inc     edi
.text:00402DF1                 movzx   eax, byte ptr [edi]
.text:00402DF4                 test    al, al
.text:00402DF6                 jz      short loc_402DFC
.text:00402DF8                 cmp     al, 3Dh ; '='
.text:00402DFA                 jnz     short loc_402DF0
.text:00402DFC
.text:00402DFC loc_402DFC:                             ; CODE XREF: sub_402BF0+1EF↑j
.text:00402DFC                                         ; sub_402BF0+1F3↑j ...
.text:00402DFC                 mov     [esp+5Ch+var_28], 0
.text:00402E04                 mov     esi, [esp+5Ch+arg_C]
.text:00402E08                 mov     ebx, [esi]
.text:00402E0A                 test    ebx, ebx
.text:00402E0C                 mov     edx, ebx
.text:00402E0E                 jz      loc_403030
.text:00402E14                 lea     esi, [esi+0]
.text:00402E1A                 lea     edi, [edi+0]
.text:00402E20
.text:00402E20 loc_402E20:                             ; CODE XREF: sub_402BF0+25E↓j
.text:00402E20                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402E24                 mov     ebx, edi
.text:00402E26                 sub     ebx, ecx
.text:00402E28                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402E2C                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402E2F                 call    strncmp
.text:00402E34                 test    eax, eax
.text:00402E36                 jz      loc_4035C6
.text:00402E3C
.text:00402E3C loc_402E3C:                             ; CODE XREF: sub_402BF0+A0F↓j
.text:00402E3C                                         ; sub_402BF0+A24↓j ...
.text:00402E3C                 inc     [esp+5Ch+var_28]
.text:00402E40                 add     esi, 10h
.text:00402E43                 mov     ecx, [esi]
.text:00402E45                 test    ecx, ecx
.text:00402E47                 mov     edx, ecx
.text:00402E49                 jz      short loc_402E50
.text:00402E4B                 mov     ecx, [ebp+14h]
.text:00402E4E                 jmp     short loc_402E20
.text:00402E50 ; ---------------------------------------------------------------------------
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402BF0+259↑j
.text:00402E50                                         ; sub_402BF0+A55↓j
.text:00402E50                 mov     esi, [esp+5Ch+var_20]
.text:00402E54                 test    esi, esi
.text:00402E56                 jz      short loc_402E64
.text:00402E58                 mov     edx, [esp+5Ch+var_1C]
.text:00402E5C                 test    edx, edx
.text:00402E5E                 jz      loc_403570
.text:00402E64
.text:00402E64 loc_402E64:                             ; CODE XREF: sub_402BF0+266↑j
.text:00402E64                 mov     eax, [esp+5Ch+var_18]
.text:00402E68                 test    eax, eax
.text:00402E6A                 jz      loc_403030
.text:00402E70                 mov     ecx, [ebp+0]
.text:00402E73                 lea     eax, [ecx+1]
.text:00402E76                 mov     [ebp+0], eax
.text:00402E79                 cmp     byte ptr [edi], 0
.text:00402E7C                 jz      loc_402F90
.text:00402E82                 mov     ecx, [esp+5Ch+var_18]
.text:00402E86                 mov     esi, [ecx+4]
.text:00402E89                 test    esi, esi
.text:00402E8B                 jz      short loc_402ED6
.text:00402E8D                 lea     ebx, [edi+1]
.text:00402E90                 mov     [ebp+0Ch], ebx
.text:00402E93
.text:00402E93 loc_402E93:                             ; CODE XREF: sub_402BF0+3A8↓j
.text:00402E93                                         ; sub_402BF0+3C4↓j
.text:00402E93                 mov     ebx, [ebp+14h]
.text:00402E96                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402E99                 call    strlen
.text:00402E9E                 add     [ebp+14h], eax
.text:00402EA1                 mov     esi, [esp+5Ch+arg_10]
.text:00402EA5                 test    esi, esi
.text:00402EA7                 jz      short loc_402EB3
.text:00402EA9                 mov     ebp, [esp+5Ch+var_24]
.text:00402EAD                 mov     ecx, [esp+5Ch+arg_10]
.text:00402EB1                 mov     [ecx], ebp
.text:00402EB3
.text:00402EB3 loc_402EB3:                             ; CODE XREF: sub_402BF0+2B7↑j
.text:00402EB3                 mov     eax, [esp+5Ch+var_18]
.text:00402EB7                 mov     ecx, [eax+8]
.text:00402EBA                 test    ecx, ecx
.text:00402EBC                 jnz     short loc_402ECA
.text:00402EBE                 mov     ecx, [esp+5Ch+var_18]
.text:00402EC2
.text:00402EC2 loc_402EC2:                             ; CODE XREF: sub_402BF0+723↓j
.text:00402EC2                 mov     eax, [ecx+0Ch]
.text:00402EC5                 jmp     loc_402D47
.text:00402ECA ; ---------------------------------------------------------------------------
.text:00402ECA
.text:00402ECA loc_402ECA:                             ; CODE XREF: sub_402BF0+2CC↑j
.text:00402ECA                                         ; sub_402BF0+719↓j
.text:00402ECA                 mov     esi, [eax+0Ch]
.text:00402ECD                 xor     eax, eax
.text:00402ECF                 mov     [ecx], esi
.text:00402ED1                 jmp     loc_402D47
.text:00402ED6 ; ---------------------------------------------------------------------------
.text:00402ED6
.text:00402ED6 loc_402ED6:                             ; CODE XREF: sub_402BF0+29B↑j
.text:00402ED6                 mov     edi, [esp+5Ch+var_14]
.text:00402EDA                 test    edi, edi
.text:00402EDC                 jz      short loc_402F30
.text:00402EDE                 mov     esi, [esp+5Ch+arg_4]
.text:00402EE2                 mov     edx, [esi+eax*4-4]
.text:00402EE6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402EEA                 jz      short loc_402F52
.text:00402EEC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402EF3                 call    ds:libintl_gettext
.text:00402EF9                 mov     edx, [esp+5Ch+var_18]
.text:00402EFD                 mov     edi, [edx]
.text:00402EFF                 mov     [esp+5Ch+var_4C], edi
.text:00402F03                 mov     ebx, [ebp+0]
.text:00402F06                 mov     edi, [esp+5Ch+arg_4]
.text:00402F0A                 mov     ecx, [edi+ebx*4-4]
.text:00402F0E                 movsx   esi, byte ptr [ecx]
.text:00402F11                 mov     ecx, ds:_iob
.text:00402F17                 add     ecx, 40h ; '@'
.text:00402F1A                 mov     [esp+5Ch+var_50], esi
.text:00402F1E                 mov     ebx, [edi]
.text:00402F20                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F24                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402F27                 mov     [esp+5Ch+MaxCount], ebx
.text:00402F2B                 call    fprintf
.text:00402F30
.text:00402F30 loc_402F30:                             ; CODE XREF: sub_402BF0+2EC↑j
.text:00402F30                                         ; sub_402BF0+398↓j
.text:00402F30                 mov     ecx, [ebp+14h]
.text:00402F33                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402F36                 call    strlen
.text:00402F3B                 add     [ebp+14h], eax
.text:00402F3E                 mov     eax, [esp+5Ch+var_18]
.text:00402F42                 mov     esi, [eax+0Ch]
.text:00402F45                 mov     [ebp+8], esi
.text:00402F48
.text:00402F48 loc_402F48:                             ; CODE XREF: sub_402BF0+4E5↓j
.text:00402F48                                         ; sub_402BF0+73E↓j ...
.text:00402F48                 mov     eax, 3Fh ; '?'
.text:00402F4D                 jmp     loc_402D47
.text:00402F52 ; ---------------------------------------------------------------------------
.text:00402F52
.text:00402F52 loc_402F52:                             ; CODE XREF: sub_402BF0+2FA↑j
.text:00402F52                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402F59                 call    ds:libintl_gettext
.text:00402F5F                 mov     edx, [esp+5Ch+var_18]
.text:00402F63                 mov     edi, [esp+5Ch+arg_4]
.text:00402F67                 mov     ecx, ds:_iob
.text:00402F6D                 mov     esi, [edx]
.text:00402F6F                 add     ecx, 40h ; '@'
.text:00402F72                 mov     [esp+5Ch+var_50], esi
.text:00402F76                 mov     ebx, [edi]
.text:00402F78                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F7C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402F7F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402F83                 call    fprintf
.text:00402F88                 jmp     short loc_402F30
.text:00402F88 ; ---------------------------------------------------------------------------
.text:00402F8A                 align 10h
.text:00402F90
.text:00402F90 loc_402F90:                             ; CODE XREF: sub_402BF0+28C↑j
.text:00402F90                 mov     ebx, [esp+5Ch+var_18]
.text:00402F94                 cmp     dword ptr [ebx+4], 1
.text:00402F98                 jnz     loc_402E93
.text:00402F9E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402FA2                 jge     short loc_402FB9
.text:00402FA4                 mov     ebx, [esp+5Ch+arg_4]
.text:00402FA8                 lea     edi, [ecx+2]
.text:00402FAB                 mov     [ebp+0], edi
.text:00402FAE                 mov     esi, [ebx+eax*4]
.text:00402FB1                 mov     [ebp+0Ch], esi
.text:00402FB4                 jmp     loc_402E93
.text:00402FB9 ; ---------------------------------------------------------------------------
.text:00402FB9
.text:00402FB9 loc_402FB9:                             ; CODE XREF: sub_402BF0+3B2↑j
.text:00402FB9                 mov     edx, [esp+5Ch+var_14]
.text:00402FBD                 test    edx, edx
.text:00402FBF                 jnz     short loc_402FF0
.text:00402FC1
.text:00402FC1 loc_402FC1:                             ; CODE XREF: sub_402BF0+437↓j
.text:00402FC1                 mov     edx, [ebp+14h]
.text:00402FC4                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402FC7                 call    strlen
.text:00402FCC                 add     [ebp+14h], eax
.text:00402FCF                 mov     eax, [esp+5Ch+var_18]
.text:00402FD3                 mov     edi, [eax+0Ch]
.text:00402FD6                 mov     [ebp+8], edi
.text:00402FD9
.text:00402FD9 loc_402FD9:                             ; CODE XREF: sub_402BF0+7C2↓j
.text:00402FD9                 mov     ebp, [esp+5Ch+Str]
.text:00402FDD                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402FE1                 setnz   bl
.text:00402FE4                 movzx   esi, bl
.text:00402FE7                 lea     eax, [esi+esi*4+3Ah]
.text:00402FEB                 jmp     loc_402D47
.text:00402FF0 ; ---------------------------------------------------------------------------
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402BF0+3CF↑j
.text:00402FF0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402FF7                 call    ds:libintl_gettext
.text:00402FFD                 mov     ecx, [ebp+0]
.text:00403000                 mov     esi, [esp+5Ch+arg_4]
.text:00403004                 mov     ebx, [esi+ecx*4-4]
.text:00403008                 mov     ecx, ds:_iob
.text:0040300E                 mov     [esp+5Ch+var_50], ebx
.text:00403012                 mov     edi, [esi]
.text:00403014                 add     ecx, 40h ; '@'
.text:00403017                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040301B                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040301E                 mov     [esp+5Ch+MaxCount], edi
.text:00403022                 call    fprintf
.text:00403027                 jmp     short loc_402FC1
.text:00403027 ; ---------------------------------------------------------------------------
.text:00403029                 align 10h
.text:00403030
.text:00403030 loc_403030:                             ; CODE XREF: sub_402BF0+21E↑j
.text:00403030                                         ; sub_402BF0+27A↑j
.text:00403030                 mov     eax, [esp+5Ch+arg_14]
.text:00403034                 test    eax, eax
.text:00403036                 jz      short loc_403066
.text:00403038                 mov     ebx, [ebp+0]
.text:0040303B                 mov     esi, [esp+5Ch+arg_4]
.text:0040303F                 mov     edi, [esi+ebx*4]
.text:00403042                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00403046                 jz      short loc_403069
.text:00403048                 mov     ecx, [ebp+14h]
.text:0040304B                 mov     edx, [esp+5Ch+Str]
.text:0040304F                 movsx   ebx, byte ptr [ecx]
.text:00403052                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403055                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00403059                 call    strchr
.text:0040305E                 test    eax, eax
.text:00403060                 jnz     loc_403110
.text:00403066
.text:00403066 loc_403066:                             ; CODE XREF: sub_402BF0+446↑j
.text:00403066                 mov     ebx, [ebp+0]
.text:00403069
.text:00403069 loc_403069:                             ; CODE XREF: sub_402BF0+456↑j
.text:00403069                 mov     eax, [esp+5Ch+var_14]
.text:0040306D                 test    eax, eax
.text:0040306F                 jz      short loc_4030C1
.text:00403071                 mov     esi, [esp+5Ch+arg_4]
.text:00403075                 mov     edi, [esi+ebx*4]
.text:00403078                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:0040307C                 jz      short loc_4030DA
.text:0040307E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00403085                 call    ds:libintl_gettext
.text:0040308B                 mov     edi, [ebp+14h]
.text:0040308E                 mov     [esp+5Ch+var_4C], edi
.text:00403092                 mov     ebx, [ebp+0]
.text:00403095                 mov     edi, [esp+5Ch+arg_4]
.text:00403099                 mov     esi, [edi+ebx*4]
.text:0040309C                 movsx   ecx, byte ptr [esi]
.text:0040309F                 mov     esi, ds:_iob
.text:004030A5                 add     esi, 40h ; '@'
.text:004030A8                 mov     [esp+5Ch+var_50], ecx
.text:004030AC                 mov     ebx, [edi]
.text:004030AE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030B2                 mov     [esp+5Ch+Str1], esi ; Stream
.text:004030B5                 mov     [esp+5Ch+MaxCount], ebx
.text:004030B9                 call    fprintf
.text:004030BE
.text:004030BE loc_4030BE:                             ; CODE XREF: sub_402BF0+51D↓j
.text:004030BE                 mov     ebx, [ebp+0]
.text:004030C1
.text:004030C1 loc_4030C1:                             ; CODE XREF: sub_402BF0+47F↑j
.text:004030C1                 mov     dword ptr [ebp+14h], offset dword_402AA0
.text:004030C8                 lea     edx, [ebx+1]
.text:004030CB                 mov     [ebp+0], edx
.text:004030CE
.text:004030CE loc_4030CE:                             ; CODE XREF: sub_402BF0+999↓j
.text:004030CE                 mov     dword ptr [ebp+8], 0
.text:004030D5                 jmp     loc_402F48
.text:004030DA ; ---------------------------------------------------------------------------
.text:004030DA
.text:004030DA loc_4030DA:                             ; CODE XREF: sub_402BF0+48C↑j
.text:004030DA                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:004030E1                 call    ds:libintl_gettext
.text:004030E7                 mov     ecx, [ebp+14h]
.text:004030EA                 mov     edi, [esp+5Ch+arg_4]
.text:004030EE                 mov     edx, ds:_iob
.text:004030F4                 mov     [esp+5Ch+var_50], ecx
.text:004030F8                 mov     ebx, [edi]
.text:004030FA                 add     edx, 40h ; '@'
.text:004030FD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403101                 mov     [esp+5Ch+MaxCount], ebx
.text:00403105                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00403108                 call    fprintf
.text:0040310D                 jmp     short loc_4030BE
.text:0040310D ; ---------------------------------------------------------------------------
.text:0040310F                 align 10h
.text:00403110
.text:00403110 loc_403110:                             ; CODE XREF: sub_402BF0+196↑j
.text:00403110                                         ; sub_402BF0+1B5↑j ...
.text:00403110                 mov     esi, [ebp+14h]
.text:00403113                 movzx   ebx, byte ptr [esi]
.text:00403116                 inc     esi
.text:00403117                 mov     [ebp+14h], esi
.text:0040311A                 mov     ecx, [esp+5Ch+Str]
.text:0040311E                 movsx   esi, bl
.text:00403121                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403125                 mov     edi, esi
.text:00403127                 mov     [esp+5Ch+Str1], ecx ; Str
.text:0040312A                 call    strchr
.text:0040312F                 mov     ecx, [ebp+14h]
.text:00403132                 cmp     byte ptr [ecx], 0
.text:00403135                 jnz     short loc_40313A
.text:00403137                 inc     dword ptr [ebp+0]
.text:0040313A
.text:0040313A loc_40313A:                             ; CODE XREF: sub_402BF0+545↑j
.text:0040313A                 test    eax, eax
.text:0040313C                 jz      loc_403520
.text:00403142                 cmp     bl, 3Ah ; ':'
.text:00403145                 jz      loc_403520
.text:0040314B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040314E                 jz      loc_403206
.text:00403154                 movzx   edx, byte ptr [eax+1]
.text:00403158
.text:00403158 loc_403158:                             ; CODE XREF: sub_402BF0+61D↓j
.text:00403158                 cmp     dl, 3Ah ; ':'
.text:0040315B                 jz      short loc_403164
.text:0040315D
.text:0040315D loc_40315D:                             ; CODE XREF: sub_402BF0+590↓j
.text:0040315D                 mov     eax, esi
.text:0040315F                 jmp     loc_402D47
.text:00403164 ; ---------------------------------------------------------------------------
.text:00403164
.text:00403164 loc_403164:                             ; CODE XREF: sub_402BF0+56B↑j
.text:00403164                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403168                 jz      loc_4031F1
.text:0040316E                 cmp     byte ptr [ecx], 0
.text:00403171                 jz      short loc_403182
.text:00403173
.text:00403173 loc_403173:                             ; CODE XREF: sub_402BF0+604↓j
.text:00403173                 inc     dword ptr [ebp+0]
.text:00403176                 mov     [ebp+0Ch], ecx
.text:00403179
.text:00403179 loc_403179:                             ; CODE XREF: sub_402BF0+5AB↓j
.text:00403179                                         ; sub_402BF0+5C6↓j ...
.text:00403179                 mov     dword ptr [ebp+14h], 0
.text:00403180                 jmp     short loc_40315D
.text:00403182 ; ---------------------------------------------------------------------------
.text:00403182
.text:00403182 loc_403182:                             ; CODE XREF: sub_402BF0+581↑j
.text:00403182                 mov     ecx, [ebp+0]
.text:00403185                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403189                 jz      short loc_40319D
.text:0040318B                 mov     eax, [esp+5Ch+arg_4]
.text:0040318F                 lea     edx, [ecx+1]
.text:00403192                 mov     [ebp+0], edx
.text:00403195                 mov     ebx, [eax+ecx*4]
.text:00403198                 mov     [ebp+0Ch], ebx
.text:0040319B                 jmp     short loc_403179
.text:0040319D ; ---------------------------------------------------------------------------
.text:0040319D
.text:0040319D loc_40319D:                             ; CODE XREF: sub_402BF0+599↑j
.text:0040319D                 mov     ecx, [esp+5Ch+var_14]
.text:004031A1                 test    ecx, ecx
.text:004031A3                 jnz     short loc_4031BF
.text:004031A5
.text:004031A5 loc_4031A5:                             ; CODE XREF: sub_402BF0+5FF↓j
.text:004031A5                 mov     [ebp+8], edi
.text:004031A8                 mov     edi, [esp+5Ch+Str]
.text:004031AC                 cmp     byte ptr [edi], 3Ah ; ':'
.text:004031AF                 jz      short loc_4031B8
.text:004031B1                 mov     esi, 3Fh ; '?'
.text:004031B6                 jmp     short loc_403179
.text:004031B8 ; ---------------------------------------------------------------------------
.text:004031B8
.text:004031B8 loc_4031B8:                             ; CODE XREF: sub_402BF0+5BF↑j
.text:004031B8                 mov     esi, 3Ah ; ':'
.text:004031BD                 jmp     short loc_403179
.text:004031BF ; ---------------------------------------------------------------------------
.text:004031BF
.text:004031BF loc_4031BF:                             ; CODE XREF: sub_402BF0+5B3↑j
.text:004031BF                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004031C6                 call    ds:libintl_gettext
.text:004031CC                 mov     [esp+5Ch+var_50], edi
.text:004031D0                 mov     ebx, [esp+5Ch+arg_4]
.text:004031D4                 mov     edx, ds:_iob
.text:004031DA                 mov     esi, [ebx]
.text:004031DC                 add     edx, 40h ; '@'
.text:004031DF                 mov     [esp+5Ch+Str2], eax ; Format
.text:004031E3                 mov     [esp+5Ch+MaxCount], esi
.text:004031E7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004031EA                 call    fprintf
.text:004031EF                 jmp     short loc_4031A5
.text:004031F1 ; ---------------------------------------------------------------------------
.text:004031F1
.text:004031F1 loc_4031F1:                             ; CODE XREF: sub_402BF0+578↑j
.text:004031F1                 cmp     byte ptr [ecx], 0
.text:004031F4                 jnz     loc_403173
.text:004031FA                 mov     dword ptr [ebp+0Ch], 0
.text:00403201                 jmp     loc_403179
.text:00403206 ; ---------------------------------------------------------------------------
.text:00403206
.text:00403206 loc_403206:                             ; CODE XREF: sub_402BF0+55E↑j
.text:00403206                 movzx   edx, byte ptr [eax+1]
.text:0040320A                 cmp     dl, 3Bh ; ';'
.text:0040320D                 jnz     loc_403158
.text:00403213                 mov     [esp+5Ch+var_2C], 0
.text:0040321B                 mov     [esp+5Ch+var_30], 0
.text:00403223                 mov     [esp+5Ch+var_34], 0
.text:0040322B                 mov     [esp+5Ch+var_38], 0
.text:00403233                 cmp     byte ptr [ecx], 0
.text:00403236                 jz      loc_4034AB
.text:0040323C                 inc     dword ptr [ebp+0]
.text:0040323F                 mov     [ebp+0Ch], ecx
.text:00403242
.text:00403242 loc_403242:                             ; CODE XREF: sub_402BF0+8D4↓j
.text:00403242                 mov     edi, [ebp+0Ch]
.text:00403245                 mov     [ebp+14h], edi
.text:00403248                 movzx   eax, byte ptr [edi]
.text:0040324B                 test    al, al
.text:0040324D                 jz      short loc_40325F
.text:0040324F                 cmp     al, 3Dh ; '='
.text:00403251                 jz      short loc_40325F
.text:00403253
.text:00403253 loc_403253:                             ; CODE XREF: sub_402BF0+66D↓j
.text:00403253                 inc     edi
.text:00403254                 movzx   eax, byte ptr [edi]
.text:00403257                 test    al, al
.text:00403259                 jz      short loc_40325F
.text:0040325B                 cmp     al, 3Dh ; '='
.text:0040325D                 jnz     short loc_403253
.text:0040325F
.text:0040325F loc_40325F:                             ; CODE XREF: sub_402BF0+65D↑j
.text:0040325F                                         ; sub_402BF0+661↑j ...
.text:0040325F                 mov     [esp+5Ch+var_3C], 0
.text:00403267                 mov     esi, [esp+5Ch+arg_C]
.text:0040326B                 mov     eax, [esi]
.text:0040326D                 test    eax, eax
.text:0040326F                 jz      loc_4033F0
.text:00403275                 mov     ecx, eax
.text:00403277
.text:00403277 loc_403277:                             ; CODE XREF: sub_402BF0+6B3↓j
.text:00403277                 mov     ebx, [ebp+14h]
.text:0040327A                 mov     eax, edi
.text:0040327C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040327F                 sub     eax, ebx
.text:00403281                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403285                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403289                 call    strncmp
.text:0040328E                 test    eax, eax
.text:00403290                 jz      loc_403457
.text:00403296
.text:00403296 loc_403296:                             ; CODE XREF: sub_402BF0+88C↓j
.text:00403296                                         ; sub_402BF0+89D↓j
.text:00403296                 inc     [esp+5Ch+var_3C]
.text:0040329A                 add     esi, 10h
.text:0040329D                 mov     edx, [esi]
.text:0040329F                 test    edx, edx
.text:004032A1                 mov     ecx, edx
.text:004032A3                 jnz     short loc_403277
.text:004032A5
.text:004032A5 loc_4032A5:                             ; CODE XREF: sub_402BF0+8B6↓j
.text:004032A5                 mov     esi, [esp+5Ch+var_34]
.text:004032A9                 test    esi, esi
.text:004032AB                 jz      short loc_4032B9
.text:004032AD                 mov     ebx, [esp+5Ch+var_30]
.text:004032B1                 test    ebx, ebx
.text:004032B3                 jz      loc_403401
.text:004032B9
.text:004032B9 loc_4032B9:                             ; CODE XREF: sub_402BF0+6BB↑j
.text:004032B9                 mov     esi, [esp+5Ch+var_2C]
.text:004032BD                 test    esi, esi
.text:004032BF                 jz      loc_4033F0
.text:004032C5                 cmp     byte ptr [edi], 0
.text:004032C8                 jz      loc_403370
.text:004032CE                 mov     ecx, [esp+5Ch+var_2C]
.text:004032D2                 mov     ebx, [ecx+4]
.text:004032D5                 test    ebx, ebx
.text:004032D7                 jz      short loc_403318
.text:004032D9                 lea     edx, [edi+1]
.text:004032DC                 mov     [ebp+0Ch], edx
.text:004032DF
.text:004032DF loc_4032DF:                             ; CODE XREF: sub_402BF0+788↓j
.text:004032DF                                         ; sub_402BF0+7A7↓j
.text:004032DF                 mov     edi, [ebp+14h]
.text:004032E2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004032E5                 call    strlen
.text:004032EA                 add     [ebp+14h], eax
.text:004032ED                 mov     eax, [esp+5Ch+arg_10]
.text:004032F1                 test    eax, eax
.text:004032F3                 jz      short loc_403300
.text:004032F5                 mov     edx, [esp+5Ch+var_38]
.text:004032F9                 mov     ebp, [esp+5Ch+arg_10]
.text:004032FD                 mov     [ebp+0], edx
.text:00403300
.text:00403300 loc_403300:                             ; CODE XREF: sub_402BF0+703↑j
.text:00403300                 mov     eax, [esp+5Ch+var_2C]
.text:00403304                 mov     ecx, [eax+8]
.text:00403307                 test    ecx, ecx
.text:00403309                 jnz     loc_402ECA
.text:0040330F                 mov     ecx, [esp+5Ch+var_2C]
.text:00403313                 jmp     loc_402EC2
.text:00403318 ; ---------------------------------------------------------------------------
.text:00403318
.text:00403318 loc_403318:                             ; CODE XREF: sub_402BF0+6E7↑j
.text:00403318                 mov     eax, [esp+5Ch+var_14]
.text:0040331C                 test    eax, eax
.text:0040331E                 jnz     short loc_403333
.text:00403320
.text:00403320 loc_403320:                             ; CODE XREF: sub_402BF0+779↓j
.text:00403320                 mov     ecx, [ebp+14h]
.text:00403323                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403326                 call    strlen
.text:0040332B                 add     [ebp+14h], eax
.text:0040332E                 jmp     loc_402F48
.text:00403333 ; ---------------------------------------------------------------------------
.text:00403333
.text:00403333 loc_403333:                             ; CODE XREF: sub_402BF0+72E↑j
.text:00403333                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:0040333A                 call    ds:libintl_gettext
.text:00403340                 mov     edx, [esp+5Ch+var_2C]
.text:00403344                 mov     ebx, [esp+5Ch+arg_4]
.text:00403348                 mov     edi, [edx]
.text:0040334A                 mov     [esp+5Ch+var_50], edi
.text:0040334E                 mov     edi, ds:_iob
.text:00403354                 mov     esi, [ebx]
.text:00403356                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040335A                 add     edi, 40h ; '@'
.text:0040335D                 mov     [esp+5Ch+MaxCount], esi
.text:00403361                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403364                 call    fprintf
.text:00403369                 jmp     short loc_403320
.text:00403369 ; ---------------------------------------------------------------------------
.text:0040336B                 align 10h
.text:00403370
.text:00403370 loc_403370:                             ; CODE XREF: sub_402BF0+6D8↑j
.text:00403370                 mov     esi, [esp+5Ch+var_2C]
.text:00403374                 cmp     dword ptr [esi+4], 1
.text:00403378                 jnz     loc_4032DF
.text:0040337E                 mov     ecx, [ebp+0]
.text:00403381                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403385                 jge     short loc_40339C
.text:00403387                 mov     eax, [esp+5Ch+arg_4]
.text:0040338B                 lea     ebx, [ecx+1]
.text:0040338E                 mov     [ebp+0], ebx
.text:00403391                 mov     edi, [eax+ecx*4]
.text:00403394                 mov     [ebp+0Ch], edi
.text:00403397                 jmp     loc_4032DF
.text:0040339C ; ---------------------------------------------------------------------------
.text:0040339C
.text:0040339C loc_40339C:                             ; CODE XREF: sub_402BF0+795↑j
.text:0040339C                 mov     edx, [esp+5Ch+var_14]
.text:004033A0                 test    edx, edx
.text:004033A2                 jnz     short loc_4033B7
.text:004033A4
.text:004033A4 loc_4033A4:                             ; CODE XREF: sub_402BF0+7FE↓j
.text:004033A4                 mov     edx, [ebp+14h]
.text:004033A7                 mov     [esp+5Ch+Str1], edx ; Str
.text:004033AA                 call    strlen
.text:004033AF                 add     [ebp+14h], eax
.text:004033B2                 jmp     loc_402FD9
.text:004033B7 ; ---------------------------------------------------------------------------
.text:004033B7
.text:004033B7 loc_4033B7:                             ; CODE XREF: sub_402BF0+7B2↑j
.text:004033B7                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:004033BE                 call    ds:libintl_gettext
.text:004033C4                 mov     ecx, [ebp+0]
.text:004033C7                 mov     ebx, [esp+5Ch+arg_4]
.text:004033CB                 mov     edi, [ebx+ecx*4-4]
.text:004033CF                 mov     ecx, ds:_iob
.text:004033D5                 mov     [esp+5Ch+var_50], edi
.text:004033D9                 mov     esi, [ebx]
.text:004033DB                 add     ecx, 40h ; '@'
.text:004033DE                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033E2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004033E5                 mov     [esp+5Ch+MaxCount], esi
.text:004033E9                 call    fprintf
.text:004033EE                 jmp     short loc_4033A4
.text:004033F0 ; ---------------------------------------------------------------------------
.text:004033F0
.text:004033F0 loc_4033F0:                             ; CODE XREF: sub_402BF0+67F↑j
.text:004033F0                                         ; sub_402BF0+6CF↑j
.text:004033F0                 mov     dword ptr [ebp+14h], 0
.text:004033F7                 mov     eax, 57h ; 'W'
.text:004033FC                 jmp     loc_402D47
.text:00403401 ; ---------------------------------------------------------------------------
.text:00403401
.text:00403401 loc_403401:                             ; CODE XREF: sub_402BF0+6C3↑j
.text:00403401                 mov     edi, [esp+5Ch+var_14]
.text:00403405                 test    edi, edi
.text:00403407                 jnz     short loc_40341F
.text:00403409
.text:00403409 loc_403409:                             ; CODE XREF: sub_402BF0+865↓j
.text:00403409                 mov     edx, [ebp+14h]
.text:0040340C                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040340F                 call    strlen
.text:00403414                 add     [ebp+14h], eax
.text:00403417                 inc     dword ptr [ebp+0]
.text:0040341A                 jmp     loc_402F48
.text:0040341F ; ---------------------------------------------------------------------------
.text:0040341F
.text:0040341F loc_40341F:                             ; CODE XREF: sub_402BF0+817↑j
.text:0040341F                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:00403426                 call    ds:libintl_gettext
.text:0040342C                 mov     ecx, [ebp+0]
.text:0040342F                 mov     ebx, [esp+5Ch+arg_4]
.text:00403433                 mov     edi, [ebx+ecx*4]
.text:00403436                 mov     ecx, ds:_iob
.text:0040343C                 mov     [esp+5Ch+var_50], edi
.text:00403440                 mov     esi, [ebx]
.text:00403442                 add     ecx, 40h ; '@'
.text:00403445                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403449                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040344C                 mov     [esp+5Ch+MaxCount], esi
.text:00403450                 call    fprintf
.text:00403455                 jmp     short loc_403409
.text:00403457 ; ---------------------------------------------------------------------------
.text:00403457
.text:00403457 loc_403457:                             ; CODE XREF: sub_402BF0+6A0↑j
.text:00403457                 mov     edx, [ebp+14h]
.text:0040345A                 mov     ebx, edi
.text:0040345C                 mov     ecx, [esi]
.text:0040345E                 sub     ebx, edx
.text:00403460                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403463                 call    strlen
.text:00403468                 cmp     ebx, eax
.text:0040346A                 jz      short loc_403492
.text:0040346C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403470                 test    ebx, ebx
.text:00403472                 jz      short loc_403481
.text:00403474                 mov     [esp+5Ch+var_34], 1
.text:0040347C                 jmp     loc_403296
.text:00403481 ; ---------------------------------------------------------------------------
.text:00403481
.text:00403481 loc_403481:                             ; CODE XREF: sub_402BF0+882↑j
.text:00403481                 mov     [esp+5Ch+var_2C], esi
.text:00403485                 mov     ecx, [esp+5Ch+var_3C]
.text:00403489                 mov     [esp+5Ch+var_38], ecx
.text:0040348D                 jmp     loc_403296
.text:00403492 ; ---------------------------------------------------------------------------
.text:00403492
.text:00403492 loc_403492:                             ; CODE XREF: sub_402BF0+87A↑j
.text:00403492                 mov     [esp+5Ch+var_2C], esi
.text:00403496                 mov     eax, [esp+5Ch+var_3C]
.text:0040349A                 mov     [esp+5Ch+var_30], 1
.text:004034A2                 mov     [esp+5Ch+var_38], eax
.text:004034A6                 jmp     loc_4032A5
.text:004034AB ; ---------------------------------------------------------------------------
.text:004034AB
.text:004034AB loc_4034AB:                             ; CODE XREF: sub_402BF0+646↑j
.text:004034AB                 mov     edx, [ebp+0]
.text:004034AE                 cmp     edx, [esp+5Ch+arg_0]
.text:004034B2                 jz      short loc_4034C9
.text:004034B4                 mov     ebx, [esp+5Ch+arg_4]
.text:004034B8                 lea     esi, [edx+1]
.text:004034BB                 mov     [ebp+0], esi
.text:004034BE                 mov     edi, [ebx+edx*4]
.text:004034C1                 mov     [ebp+0Ch], edi
.text:004034C4                 jmp     loc_403242
.text:004034C9 ; ---------------------------------------------------------------------------
.text:004034C9
.text:004034C9 loc_4034C9:                             ; CODE XREF: sub_402BF0+8C2↑j
.text:004034C9                 mov     edi, [esp+5Ch+var_14]
.text:004034CD                 test    edi, edi
.text:004034CF                 jnz     short loc_4034EC
.text:004034D1
.text:004034D1 loc_4034D1:                             ; CODE XREF: sub_402BF0+92C↓j
.text:004034D1                 mov     [ebp+8], esi
.text:004034D4                 mov     ebp, [esp+5Ch+Str]
.text:004034D8                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:004034DC                 jz      short loc_4034E8
.text:004034DE                 mov     bl, 3Fh ; '?'
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_402BF0+8FA↓j
.text:004034E0                 movsx   eax, bl
.text:004034E3                 jmp     loc_402D47
.text:004034E8 ; ---------------------------------------------------------------------------
.text:004034E8
.text:004034E8 loc_4034E8:                             ; CODE XREF: sub_402BF0+8EC↑j
.text:004034E8                 mov     bl, 3Ah ; ':'
.text:004034EA                 jmp     short loc_4034E0
.text:004034EC ; ---------------------------------------------------------------------------
.text:004034EC
.text:004034EC loc_4034EC:                             ; CODE XREF: sub_402BF0+8DF↑j
.text:004034EC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004034F3                 call    ds:libintl_gettext
.text:004034F9                 mov     [esp+5Ch+var_50], esi
.text:004034FD                 mov     edx, [esp+5Ch+arg_4]
.text:00403501                 mov     ecx, ds:_iob
.text:00403507                 mov     ebx, [edx]
.text:00403509                 add     ecx, 40h ; '@'
.text:0040350C                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403510                 mov     [esp+5Ch+MaxCount], ebx
.text:00403514                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00403517                 call    fprintf
.text:0040351C                 jmp     short loc_4034D1
.text:0040351C ; ---------------------------------------------------------------------------
.text:0040351E                 align 10h
.text:00403520
.text:00403520 loc_403520:                             ; CODE XREF: sub_402BF0+54C↑j
.text:00403520                                         ; sub_402BF0+555↑j
.text:00403520                 mov     eax, [esp+5Ch+var_14]
.text:00403524                 test    eax, eax
.text:00403526                 jz      short loc_40355F
.text:00403528                 mov     ebx, [ebp+1Ch]
.text:0040352B                 test    ebx, ebx
.text:0040352D                 jz      short loc_403567
.text:0040352F                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:00403536
.text:00403536 loc_403536:                             ; CODE XREF: sub_402BF0+97E↓j
.text:00403536                 call    ds:libintl_gettext
.text:0040353C                 mov     [esp+5Ch+var_50], esi
.text:00403540                 mov     ebx, [esp+5Ch+arg_4]
.text:00403544                 mov     edx, ds:_iob
.text:0040354A                 mov     esi, [ebx]
.text:0040354C                 add     edx, 40h ; '@'
.text:0040354F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403553                 mov     [esp+5Ch+MaxCount], esi
.text:00403557                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040355A                 call    fprintf
.text:0040355F
.text:0040355F loc_40355F:                             ; CODE XREF: sub_402BF0+936↑j
.text:0040355F                 mov     [ebp+8], edi
.text:00403562                 jmp     loc_402F48
.text:00403567 ; ---------------------------------------------------------------------------
.text:00403567
.text:00403567 loc_403567:                             ; CODE XREF: sub_402BF0+93D↑j
.text:00403567                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040356E                 jmp     short loc_403536
.text:00403570 ; ---------------------------------------------------------------------------
.text:00403570
.text:00403570 loc_403570:                             ; CODE XREF: sub_402BF0+26E↑j
.text:00403570                 mov     edi, [esp+5Ch+var_14]
.text:00403574                 test    edi, edi
.text:00403576                 jnz     short loc_40358E
.text:00403578
.text:00403578 loc_403578:                             ; CODE XREF: sub_402BF0+9D4↓j
.text:00403578                 mov     edx, [ebp+14h]
.text:0040357B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040357E                 call    strlen
.text:00403583                 add     [ebp+14h], eax
.text:00403586                 inc     dword ptr [ebp+0]
.text:00403589                 jmp     loc_4030CE
.text:0040358E ; ---------------------------------------------------------------------------
.text:0040358E
.text:0040358E loc_40358E:                             ; CODE XREF: sub_402BF0+986↑j
.text:0040358E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403595                 call    ds:libintl_gettext
.text:0040359B                 mov     ebx, [ebp+0]
.text:0040359E                 mov     edi, [esp+5Ch+arg_4]
.text:004035A2                 mov     ecx, [edi+ebx*4]
.text:004035A5                 mov     ebx, ds:_iob
.text:004035AB                 mov     [esp+5Ch+var_50], ecx
.text:004035AF                 mov     esi, [edi]
.text:004035B1                 add     ebx, 40h ; '@'
.text:004035B4                 mov     [esp+5Ch+Str2], eax ; Format
.text:004035B8                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:004035BB                 mov     [esp+5Ch+MaxCount], esi
.text:004035BF                 call    fprintf
.text:004035C4                 jmp     short loc_403578
.text:004035C6 ; ---------------------------------------------------------------------------
.text:004035C6
.text:004035C6 loc_4035C6:                             ; CODE XREF: sub_402BF0+246↑j
.text:004035C6                 mov     ecx, [ebp+14h]
.text:004035C9                 mov     ebx, edi
.text:004035CB                 mov     edx, [esi]
.text:004035CD                 sub     ebx, ecx
.text:004035CF                 mov     [esp+5Ch+Str1], edx ; Str
.text:004035D2                 call    strlen
.text:004035D7                 cmp     ebx, eax
.text:004035D9                 jz      short loc_403631
.text:004035DB                 mov     ebx, [esp+5Ch+var_18]
.text:004035DF                 test    ebx, ebx
.text:004035E1                 jz      short loc_403620
.text:004035E3                 mov     edx, [esp+5Ch+arg_14]
.text:004035E7                 test    edx, edx
.text:004035E9                 jnz     short loc_4035F7
.text:004035EB                 mov     ecx, [esp+5Ch+var_18]
.text:004035EF                 mov     ebx, [esi+4]
.text:004035F2                 cmp     [ecx+4], ebx
.text:004035F5                 jz      short loc_403604
.text:004035F7
.text:004035F7 loc_4035F7:                             ; CODE XREF: sub_402BF0+9F9↑j
.text:004035F7                                         ; sub_402BF0+A1A↓j ...
.text:004035F7                 mov     [esp+5Ch+var_20], 1
.text:004035FF                 jmp     loc_402E3C
.text:00403604 ; ---------------------------------------------------------------------------
.text:00403604
.text:00403604 loc_403604:                             ; CODE XREF: sub_402BF0+A05↑j
.text:00403604                 mov     edx, [esi+8]
.text:00403607                 cmp     [ecx+8], edx
.text:0040360A                 jnz     short loc_4035F7
.text:0040360C                 mov     ebx, [esi+0Ch]
.text:0040360F                 cmp     [ecx+0Ch], ebx
.text:00403612                 jnz     short loc_4035F7
.text:00403614                 jmp     loc_402E3C
.text:00403614 ; ---------------------------------------------------------------------------
.text:00403619                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_402BF0+9F1↑j
.text:00403620                 mov     [esp+5Ch+var_18], esi
.text:00403624                 mov     eax, [esp+5Ch+var_28]
.text:00403628                 mov     [esp+5Ch+var_24], eax
.text:0040362C                 jmp     loc_402E3C
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403631
.text:00403631 loc_403631:                             ; CODE XREF: sub_402BF0+9E9↑j
.text:00403631                 mov     [esp+5Ch+var_18], esi
.text:00403635                 mov     ecx, [esp+5Ch+var_28]
.text:00403639                 mov     [esp+5Ch+var_1C], 1
.text:00403641                 mov     [esp+5Ch+var_24], ecx
.text:00403645                 jmp     loc_402E50
.text:0040364A ; ---------------------------------------------------------------------------
.text:0040364A
.text:0040364A loc_40364A:                             ; CODE XREF: sub_402BF0+1BF↑j
.text:0040364A                 mov     eax, [esp+5Ch+Str]
.text:0040364E                 movsx   esi, dl
.text:00403651                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403655                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403658                 call    strchr
.text:0040365D                 test    eax, eax
.text:0040365F                 jnz     loc_403110
.text:00403665                 jmp     loc_402DB5
.text:0040366A ; ---------------------------------------------------------------------------
.text:0040366A
.text:0040366A loc_40366A:                             ; CODE XREF: sub_402BF0+17C↑j
.text:0040366A                 mov     ecx, 1
.text:0040366F                 jmp     loc_402D72
.text:00403674 ; ---------------------------------------------------------------------------
.text:00403674
.text:00403674 loc_403674:                             ; CODE XREF: sub_402BF0+D4↑j
.text:00403674                                         ; sub_402BF0+130↑j
.text:00403674                 mov     eax, [ebp+20h]
.text:00403677                 cmp     eax, [ebp+24h]
.text:0040367A                 jz      loc_402D50
.text:00403680                 mov     [ebp+0], eax
.text:00403683                 jmp     loc_402D50
.text:00403688 ; ---------------------------------------------------------------------------
.text:00403688
.text:00403688 loc_403688:                             ; CODE XREF: sub_402BF0+FE↑j
.text:00403688                 mov     [ebp+20h], eax
.text:0040368B                 jmp     loc_402D10
.text:00403690 ; ---------------------------------------------------------------------------
.text:00403690
.text:00403690 loc_403690:                             ; CODE XREF: sub_402BF0+CA↑j
.text:00403690                 mov     edx, [ebp+20h]
.text:00403693                 mov     eax, [ebp+24h]
.text:00403696                 cmp     edx, eax
.text:00403698                 jz      short loc_403710
.text:0040369A                 cmp     eax, ebx
.text:0040369C                 jz      short loc_4036B1
.text:0040369E                 mov     [esp+5Ch+Str2], ebp
.text:004036A2                 mov     ebx, [esp+5Ch+arg_4]
.text:004036A6                 mov     [esp+5Ch+Str1], ebx
.text:004036A9                 call    sub_4038A0
.text:004036AE                 mov     ebx, [ebp+0]
.text:004036B1
.text:004036B1 loc_4036B1:                             ; CODE XREF: sub_402BF0+AAC↑j
.text:004036B1                                         ; sub_402BF0+B22↓j ...
.text:004036B1                 cmp     ebx, [esp+5Ch+arg_0]
.text:004036B5                 jge     short loc_403700
.text:004036B7                 mov     esi, [esp+5Ch+arg_4]
.text:004036BB                 mov     eax, [esi+ebx*4]
.text:004036BE                 cmp     byte ptr [eax], 2Dh ; '-'
.text:004036C1                 jz      short loc_403708
.text:004036C3                 lea     esi, [esi+0]
.text:004036C9                 lea     edi, [edi+0]
.text:004036D0
.text:004036D0 loc_4036D0:                             ; CODE XREF: sub_402BF0+AFC↓j
.text:004036D0                                         ; sub_402BF0+B1C↓j
.text:004036D0                 lea     eax, [ebx+1]
.text:004036D3                 mov     ebx, eax
.text:004036D5                 mov     [ebp+0], eax
.text:004036D8                 cmp     eax, [esp+5Ch+arg_0]
.text:004036DC                 jge     short loc_403700
.text:004036DE                 mov     edi, [esp+5Ch+arg_4]
.text:004036E2                 mov     edx, [edi+eax*4]
.text:004036E5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004036E8                 jz      short loc_4036F0
.text:004036EA
.text:004036EA loc_4036EA:                             ; CODE XREF: sub_402BF0+B04↓j
.text:004036EA                 mov     ebx, eax
.text:004036EC                 jmp     short loc_4036D0
.text:004036EC ; ---------------------------------------------------------------------------
.text:004036EE                 align 10h
.text:004036F0
.text:004036F0 loc_4036F0:                             ; CODE XREF: sub_402BF0+AF8↑j
.text:004036F0                 cmp     byte ptr [edx+1], 0
.text:004036F4                 jz      short loc_4036EA
.text:004036F6                 lea     esi, [esi+0]
.text:004036F9                 lea     edi, [edi+0]
.text:00403700
.text:00403700 loc_403700:                             ; CODE XREF: sub_402BF0+AC5↑j
.text:00403700                                         ; sub_402BF0+AEC↑j ...
.text:00403700                 mov     [ebp+24h], ebx
.text:00403703                 jmp     loc_402CC0
.text:00403708 ; ---------------------------------------------------------------------------
.text:00403708
.text:00403708 loc_403708:                             ; CODE XREF: sub_402BF0+AD1↑j
.text:00403708                 cmp     byte ptr [eax+1], 0
.text:0040370C                 jz      short loc_4036D0
.text:0040370E                 jmp     short loc_403700
.text:00403710 ; ---------------------------------------------------------------------------
.text:00403710
.text:00403710 loc_403710:                             ; CODE XREF: sub_402BF0+AA8↑j
.text:00403710                 cmp     edx, ebx
.text:00403712                 jz      short loc_4036B1
.text:00403714                 mov     [ebp+20h], ebx
.text:00403717                 jmp     short loc_4036B1
.text:00403719 ; ---------------------------------------------------------------------------
.text:00403719
.text:00403719 loc_403719:                             ; CODE XREF: sub_402BF0+88↑j
.text:00403719                 mov     dword ptr [ebp+18h], 0
.text:00403720                 mov     esi, [esp+5Ch+Str]
.text:00403724
.text:00403724 loc_403724:                             ; CODE XREF: sub_402BF0+B49↓j
.text:00403724                 inc     esi
.text:00403725                 jmp     loc_402C88
.text:00403725 ; ---------------------------------------------------------------------------
.text:0040372A                 align 10h
.text:00403730
.text:00403730 loc_403730:                             ; CODE XREF: sub_402BF0+80↑j
.text:00403730                 mov     dword ptr [ebp+18h], 2
.text:00403737                 mov     esi, ecx
.text:00403739                 jmp     short loc_403724
.text:00403739 ; ---------------------------------------------------------------------------
.text:0040373B                 align 10h
.text:00403740
.text:00403740 loc_403740:                             ; CODE XREF: sub_402BF0+69↑j
.text:00403740                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403747                 call    getenv
.text:0040374C                 test    eax, eax
.text:0040374E                 jz      loc_402C64
.text:00403754                 jmp     loc_402C5F
.text:00403754 ; ---------------------------------------------------------------------------
.text:00403759                 align 10h
.text:00403760
.text:00403760 loc_403760:                             ; CODE XREF: sub_402BF0+3F↑j
.text:00403760                 mov     dword ptr [ebp+0], 1
.text:00403767                 mov     ebx, 1
.text:0040376C                 jmp     loc_402C40
.text:0040376C sub_402BF0      endp
.text:0040376C
.text:00403771 ; ---------------------------------------------------------------------------
.text:00403771                 jmp     short sub_403780
.text:00403771 ; ---------------------------------------------------------------------------
.text:00403773                 align 10h
.text:00403780
.text:00403780 ; =============== S U B R O U T I N E =======================================
.text:00403780
.text:00403780
.text:00403780 ; int __cdecl sub_403780(int, int, char *, int, int, int, int)
.text:00403780 sub_403780      proc near               ; CODE XREF: .text:00403771↑j
.text:00403780                                         ; sub_403F30+3A↓p ...
.text:00403780
.text:00403780 var_2C          = dword ptr -2Ch
.text:00403780 var_28          = dword ptr -28h
.text:00403780 Str             = dword ptr -24h
.text:00403780 var_20          = dword ptr -20h
.text:00403780 var_1C          = dword ptr -1Ch
.text:00403780 var_18          = dword ptr -18h
.text:00403780 var_14          = dword ptr -14h
.text:00403780 var_10          = dword ptr -10h
.text:00403780 arg_0           = dword ptr  4
.text:00403780 arg_4           = dword ptr  8
.text:00403780 arg_8           = dword ptr  0Ch
.text:00403780 arg_C           = dword ptr  10h
.text:00403780 arg_10          = dword ptr  14h
.text:00403780 arg_14          = dword ptr  18h
.text:00403780 arg_18          = dword ptr  1Ch
.text:00403780
.text:00403780                 sub     esp, 2Ch
.text:00403783                 mov     edx, dword_407020
.text:00403789                 mov     [esp+2Ch+var_10], offset dword_4080A0 ; int
.text:00403791                 mov     ecx, dword_407024
.text:00403797                 mov     ds:dword_4080A0, edx
.text:0040379D                 mov     edx, [esp+2Ch+arg_18]
.text:004037A1                 mov     ds:dword_4080A4, ecx
.text:004037A7                 mov     ecx, [esp+2Ch+arg_14]
.text:004037AB                 mov     [esp+2Ch+var_14], edx ; int
.text:004037AF                 mov     edx, [esp+2Ch+arg_10]
.text:004037B3                 mov     [esp+2Ch+var_18], ecx ; int
.text:004037B7                 mov     ecx, [esp+2Ch+arg_C]
.text:004037BB                 mov     [esp+2Ch+var_1C], edx ; int
.text:004037BF                 mov     edx, [esp+2Ch+arg_8]
.text:004037C3                 mov     [esp+2Ch+var_20], ecx ; int
.text:004037C7                 mov     ecx, [esp+2Ch+arg_4]
.text:004037CB                 mov     [esp+2Ch+Str], edx ; Str
.text:004037CF                 mov     edx, [esp+2Ch+arg_0]
.text:004037D3                 mov     [esp+2Ch+var_28], ecx ; int
.text:004037D7                 mov     [esp+2Ch+var_2C], edx ; int
.text:004037DA                 call    sub_402BF0
.text:004037DF                 mov     ecx, ds:dword_4080A0
.text:004037E5                 mov     dword_407020, ecx
.text:004037EB                 mov     ecx, ds:dword_4080AC
.text:004037F1                 mov     ds:dword_408250, ecx
.text:004037F7                 mov     ecx, ds:dword_4080A8
.text:004037FD                 mov     dword_407028, ecx
.text:00403803                 add     esp, 2Ch
.text:00403806                 retn
.text:00403806 sub_403780      endp
.text:00403806
.text:00403806 ; ---------------------------------------------------------------------------
.text:00403807                 align 10h
.text:00403810                 sub     esp, 2Ch
.text:00403813                 mov     edx, dword_407020
.text:00403819                 mov     dword ptr [esp+1Ch], offset dword_4080A0
.text:00403821                 mov     ecx, dword_407024
.text:00403827                 mov     dword ptr [esp+18h], 1
.text:0040382F                 mov     ds:dword_4080A0, edx
.text:00403835                 mov     edx, [esp+38h]
.text:00403839                 mov     ds:dword_4080A4, ecx
.text:0040383F                 mov     ecx, [esp+34h]
.text:00403843                 mov     [esp+8], edx
.text:00403847                 mov     edx, [esp+30h]
.text:0040384B                 mov     [esp+4], ecx
.text:0040384F                 mov     dword ptr [esp+14h], 0
.text:00403857                 mov     dword ptr [esp+10h], 0
.text:0040385F                 mov     dword ptr [esp+0Ch], 0
.text:00403867                 mov     [esp], edx
.text:0040386A                 call    sub_402BF0
.text:0040386F                 mov     ecx, ds:dword_4080A0
.text:00403875                 mov     dword_407020, ecx
.text:0040387B                 mov     ecx, ds:dword_4080AC
.text:00403881                 mov     ds:dword_408250, ecx
.text:00403887                 mov     ecx, ds:dword_4080A8
.text:0040388D                 mov     dword_407028, ecx
.text:00403893                 add     esp, 2Ch
.text:00403896                 retn
.text:00403896 ; ---------------------------------------------------------------------------
.text:00403897                 align 10h
.text:004038A0
.text:004038A0 ; =============== S U B R O U T I N E =======================================
.text:004038A0
.text:004038A0
.text:004038A0 sub_4038A0      proc near               ; CODE XREF: sub_402BF0+113↑p
.text:004038A0                                         ; sub_402BF0+AB9↑p
.text:004038A0
.text:004038A0 var_2C          = dword ptr -2Ch
.text:004038A0 var_28          = dword ptr -28h
.text:004038A0 var_24          = dword ptr -24h
.text:004038A0 var_20          = dword ptr -20h
.text:004038A0 var_1C          = dword ptr -1Ch
.text:004038A0 var_18          = dword ptr -18h
.text:004038A0 var_14          = dword ptr -14h
.text:004038A0 arg_0           = dword ptr  4
.text:004038A0 arg_4           = dword ptr  8
.text:004038A0
.text:004038A0                 push    ebp
.text:004038A1                 push    edi
.text:004038A2                 push    esi
.text:004038A3                 push    ebx
.text:004038A4                 sub     esp, 1Ch
.text:004038A7                 mov     ecx, [esp+2Ch+arg_4]
.text:004038AB                 mov     eax, [esp+2Ch+arg_4]
.text:004038AF                 mov     ebx, [esp+2Ch+arg_4]
.text:004038B3                 mov     edx, [ecx+20h]
.text:004038B6                 mov     edi, [esp+2Ch+arg_0]
.text:004038BA                 mov     ecx, [ebx]
.text:004038BC                 mov     [esp+2Ch+var_2C], edx
.text:004038BF                 mov     [esp+2Ch+var_14], edx
.text:004038C3                 mov     edx, [eax+24h]
.text:004038C6                 mov     [esp+2Ch+var_28], ecx
.text:004038CA                 mov     [esp+2Ch+var_1C], ecx
.text:004038CE                 cmp     ecx, edx
.text:004038D0                 mov     [esp+2Ch+var_18], edx
.text:004038D4                 jle     short loc_403950
.text:004038D6                 mov     esi, [esp+2Ch+var_2C]
.text:004038D9                 cmp     edx, esi
.text:004038DB                 jle     short loc_403950
.text:004038DD                 lea     esi, [esi+0]
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_4038A0+A1↓j
.text:004038E0                 mov     ebx, [esp+2Ch+var_1C]
.text:004038E4                 mov     edx, [esp+2Ch+var_18]
.text:004038E8                 mov     ebp, [esp+2Ch+var_18]
.text:004038EC                 mov     eax, [esp+2Ch+var_14]
.text:004038F0                 sub     ebx, edx
.text:004038F2                 mov     [esp+2Ch+var_20], ebx
.text:004038F6                 sub     ebp, eax
.text:004038F8                 cmp     ebx, ebp
.text:004038FA                 jle     short loc_403975
.text:004038FC                 xor     esi, esi
.text:004038FE                 cmp     esi, ebp
.text:00403900                 jge     short loc_40392D
.text:00403902                 mov     ecx, [esp+2Ch+var_1C]
.text:00403906                 sub     ecx, ebp
.text:00403908                 mov     [esp+2Ch+var_24], ecx
.text:0040390C                 lea     esi, [esi+0]
.text:00403910
.text:00403910 loc_403910:                             ; CODE XREF: sub_4038A0+8B↓j
.text:00403910                 mov     ecx, [esp+2Ch+var_14]
.text:00403914                 mov     edx, [esp+2Ch+var_24]
.text:00403918                 add     ecx, esi
.text:0040391A                 add     edx, esi
.text:0040391C                 mov     ebx, [edi+ecx*4]
.text:0040391F                 mov     eax, [edi+edx*4]
.text:00403922                 inc     esi
.text:00403923                 cmp     esi, ebp
.text:00403925                 mov     [edi+ecx*4], eax
.text:00403928                 mov     [edi+edx*4], ebx
.text:0040392B                 jl      short loc_403910
.text:0040392D
.text:0040392D loc_40392D:                             ; CODE XREF: sub_4038A0+60↑j
.text:0040392D                 sub     [esp+2Ch+var_1C], ebp
.text:00403931
.text:00403931 loc_403931:                             ; CODE XREF: sub_4038A0+107↓j
.text:00403931                 mov     eax, [esp+2Ch+var_18]
.text:00403935                 cmp     [esp+2Ch+var_1C], eax
.text:00403939                 jle     short loc_403950
.text:0040393B                 mov     ebp, [esp+2Ch+var_14]
.text:0040393F                 cmp     eax, ebp
.text:00403941                 jg      short loc_4038E0
.text:00403943                 lea     esi, [esi+0]
.text:00403949                 lea     edi, [edi+0]
.text:00403950
.text:00403950 loc_403950:                             ; CODE XREF: sub_4038A0+34↑j
.text:00403950                                         ; sub_4038A0+3B↑j ...
.text:00403950                 mov     esi, [esp+2Ch+var_28]
.text:00403954                 mov     ecx, [esp+2Ch+var_18]
.text:00403958                 mov     eax, [esp+2Ch+var_2C]
.text:0040395B                 mov     edi, [esp+2Ch+arg_4]
.text:0040395F                 mov     edx, [esp+2Ch+var_28]
.text:00403963                 sub     esi, ecx
.text:00403965                 add     esi, eax
.text:00403967                 mov     [edi+20h], esi
.text:0040396A                 mov     [edi+24h], edx
.text:0040396D                 add     esp, 1Ch
.text:00403970                 pop     ebx
.text:00403971                 pop     esi
.text:00403972                 pop     edi
.text:00403973                 pop     ebp
.text:00403974                 retn
.text:00403975 ; ---------------------------------------------------------------------------
.text:00403975
.text:00403975 loc_403975:                             ; CODE XREF: sub_4038A0+5A↑j
.text:00403975                 xor     esi, esi
.text:00403977                 cmp     esi, [esp+2Ch+var_20]
.text:0040397B                 jge     short loc_40399F
.text:0040397D                 lea     esi, [esi+0]
.text:00403980
.text:00403980 loc_403980:                             ; CODE XREF: sub_4038A0+FD↓j
.text:00403980                 mov     ebx, [esp+2Ch+var_14]
.text:00403984                 mov     ebp, [esp+2Ch+var_18]
.text:00403988                 add     ebx, esi
.text:0040398A                 add     ebp, esi
.text:0040398C                 mov     edx, [edi+ebx*4]
.text:0040398F                 inc     esi
.text:00403990                 cmp     esi, [esp+2Ch+var_20]
.text:00403994                 mov     ecx, [edi+ebp*4]
.text:00403997                 mov     [edi+ebx*4], ecx
.text:0040399A                 mov     [edi+ebp*4], edx
.text:0040399D                 jl      short loc_403980
.text:0040399F
.text:0040399F loc_40399F:                             ; CODE XREF: sub_4038A0+DB↑j
.text:0040399F                 mov     esi, [esp+2Ch+var_20]
.text:004039A3                 add     [esp+2Ch+var_14], esi
.text:004039A7                 jmp     short loc_403931
.text:004039A7 sub_4038A0      endp
.text:004039A7
.text:004039A7 ; ---------------------------------------------------------------------------
.text:004039A9                 align 20h
.text:004039C0 ; const char aPosix2Version[]
.text:004039C0 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: sub_4039D0+C↓o
.text:004039D0
.text:004039D0 ; =============== S U B R O U T I N E =======================================
.text:004039D0
.text:004039D0
.text:004039D0 sub_4039D0      proc near               ; CODE XREF: sub_401780+3EF↑p
.text:004039D0
.text:004039D0 VarName         = dword ptr -1Ch
.text:004039D0 EndPtr          = dword ptr -18h
.text:004039D0 Radix           = dword ptr -14h
.text:004039D0 var_8           = dword ptr -8
.text:004039D0 var_4           = dword ptr -4
.text:004039D0
.text:004039D0                 sub     esp, 1Ch
.text:004039D3                 mov     [esp+1Ch+var_4], ebx
.text:004039D7                 mov     ebx, 30A29h
.text:004039DC                 mov     [esp+1Ch+VarName], offset aPosix2Version ; "_POSIX2_VERSION"
.text:004039E3                 call    getenv
.text:004039E8                 test    eax, eax
.text:004039EA                 jz      short loc_4039F1
.text:004039EC                 cmp     byte ptr [eax], 0
.text:004039EF                 jnz     short loc_403A00
.text:004039F1
.text:004039F1 loc_4039F1:                             ; CODE XREF: sub_4039D0+1A↑j
.text:004039F1                                         ; sub_4039D0+4F↓j ...
.text:004039F1                 mov     eax, ebx
.text:004039F3                 mov     ebx, [esp+1Ch+var_4]
.text:004039F7                 add     esp, 1Ch
.text:004039FA                 retn
.text:004039FA ; ---------------------------------------------------------------------------
.text:004039FB                 align 10h
.text:00403A00
.text:00403A00 loc_403A00:                             ; CODE XREF: sub_4039D0+1F↑j
.text:00403A00                 mov     [esp+1Ch+Radix], 0Ah ; Radix
.text:00403A08                 lea     ecx, [esp+1Ch+var_8]
.text:00403A0C                 mov     [esp+1Ch+EndPtr], ecx ; EndPtr
.text:00403A10                 mov     [esp+1Ch+VarName], eax ; String
.text:00403A13                 call    strtol
.text:00403A18                 mov     ecx, [esp+1Ch+var_8]
.text:00403A1C                 cmp     byte ptr [ecx], 0
.text:00403A1F                 jnz     short loc_4039F1
.text:00403A21                 mov     ebx, eax
.text:00403A23                 jmp     short loc_4039F1
.text:00403A23 sub_4039D0      endp
.text:00403A23
.text:00403A23 ; ---------------------------------------------------------------------------
.text:00403A25                 align 10h
.text:00403A30 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403A30                                         ; DATA XREF: .data:Buffer↓o
.text:00403A62 ; const char Format[]
.text:00403A62 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403D20+50↓o
.text:00403A6E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403A6E                                         ; DATA XREF: sub_403D20:loc_403DC1↓o
.text:00403A7E                 db 12h dup(90h)
.text:00403A90 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403A90                                         ; DATA XREF: sub_403D20+100↓o
.text:00403A90                 db 'ere is NO',0Ah
.text:00403A90                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403A90                 db 'R PURPOSE.',0Ah,0
.text:00403B28 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403B28                                         ; DATA XREF: sub_403D20:loc_403E61↓o
.text:00403B3F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403B3F                                         ; DATA XREF: sub_403D20:loc_403E6D↓o
.text:00403B5B                 db 15h dup(90h)
.text:00403B70 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403B70                                         ; DATA XREF: sub_403D20:loc_403E79↓o
.text:00403B70                 db 'and %s.',0Ah,0
.text:00403B90 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403B90                                         ; DATA XREF: sub_403D20:loc_403E85↓o
.text:00403B90                 db '%s, and %s.',0Ah,0
.text:00403BB4                 db 1Ch dup(90h)
.text:00403BD0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403BD0                                         ; DATA XREF: sub_403D20:loc_403E91↓o
.text:00403BD0                 db '%s, %s, and %s.',0Ah,0
.text:00403BF8                 db 18h dup(90h)
.text:00403C10 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403C10                                         ; DATA XREF: sub_403D20:loc_403E9D↓o
.text:00403C10                 db '%s, %s, %s, and %s.',0Ah,0
.text:00403C3C                 db 14h dup(90h)
.text:00403C50 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403C50                                         ; DATA XREF: sub_403D20:loc_403EA9↓o
.text:00403C50                 db '%s, %s, %s, %s,',0Ah
.text:00403C50                 db 'and %s.',0Ah,0
.text:00403C80                 db 10h dup(90h)
.text:00403C90 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403C90                                         ; DATA XREF: sub_403D20:loc_403EB5↓o
.text:00403C90                 db '%s, %s, %s, %s,',0Ah
.text:00403C90                 db '%s, and %s.',0Ah,0
.text:00403CC4                 align 10h
.text:00403CD0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403CD0                                         ; DATA XREF: sub_403D20:def_403D8D↓o
.text:00403CD0                 db '%s, %s, %s, %s,',0Ah
.text:00403CD0                 db '%s, %s, and others.',0Ah,0
.text:00403D0C ; const char aSS[]
.text:00403D0C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403D20+1B5↓o
.text:00403D13                 align 10h
.text:00403D20
.text:00403D20 ; =============== S U B R O U T I N E =======================================
.text:00403D20
.text:00403D20
.text:00403D20 ; int __cdecl sub_403D20(FILE *, FILE *, int, int, va_list)
.text:00403D20 sub_403D20      proc near               ; CODE XREF: sub_403EF0+2A↓p
.text:00403D20
.text:00403D20 Stream          = dword ptr -2Ch
.text:00403D20 Format          = dword ptr -28h
.text:00403D20 ArgList         = dword ptr -24h
.text:00403D20 var_20          = dword ptr -20h
.text:00403D20 var_1C          = dword ptr -1Ch
.text:00403D20 var_14          = dword ptr -14h
.text:00403D20 arg_0           = dword ptr  4
.text:00403D20 arg_4           = dword ptr  8
.text:00403D20 arg_8           = dword ptr  0Ch
.text:00403D20 arg_C           = dword ptr  10h
.text:00403D20 arg_10          = dword ptr  14h
.text:00403D20
.text:00403D20                 push    ebp
.text:00403D21                 push    edi
.text:00403D22                 push    esi
.text:00403D23                 push    ebx
.text:00403D24                 sub     esp, 1Ch
.text:00403D27                 xor     ebx, ebx
.text:00403D29                 mov     edi, [esp+2Ch+arg_10]
.text:00403D2D                 mov     edx, [esp+2Ch+arg_8]
.text:00403D31                 mov     esi, [esp+2Ch+arg_0]
.text:00403D35                 mov     eax, [edi]
.text:00403D37                 mov     ecx, [esp+2Ch+arg_4]
.text:00403D3B                 mov     [esp+2Ch+var_14], edx
.text:00403D3F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403D43                 lea     edx, [edi+4]
.text:00403D46                 test    eax, eax
.text:00403D48                 jz      short loc_403D5C
.text:00403D4A                 lea     esi, [esi+0]
.text:00403D50
.text:00403D50 loc_403D50:                             ; CODE XREF: sub_403D20+3A↓j
.text:00403D50                 mov     eax, edx
.text:00403D52                 inc     ebx
.text:00403D53                 mov     eax, [eax]
.text:00403D55                 add     edx, 4
.text:00403D58                 test    eax, eax
.text:00403D5A                 jnz     short loc_403D50
.text:00403D5C
.text:00403D5C loc_403D5C:                             ; CODE XREF: sub_403D20+28↑j
.text:00403D5C                 test    ecx, ecx
.text:00403D5E                 jz      loc_403ECD
.text:00403D64                 mov     [esp+2Ch+var_1C], ebp
.text:00403D68                 mov     edx, [esp+2Ch+var_14]
.text:00403D6C                 mov     [esp+2Ch+ArgList], ecx
.text:00403D70                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403D78                 mov     [esp+2Ch+var_20], edx
.text:00403D7C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403D7F                 call    fprintf
.text:00403D84
.text:00403D84 loc_403D84:                             ; CODE XREF: sub_403D20+1C9↓j
.text:00403D84                 cmp     ebx, 9          ; switch 10 cases
.text:00403D87                 ja      def_403D8D      ; jumptable 00403D8D default case
.text:00403D8D                 jmp     ds:jpt_403D8D[ebx*4] ; switch jump
.text:00403D8D ; ---------------------------------------------------------------------------
.text:00403D94 jpt_403D8D      dd offset loc_403DBC    ; DATA XREF: sub_403D20+6D↑r
.text:00403D94                 dd offset loc_403DC1    ; jump table for switch statement
.text:00403D94                 dd offset loc_403E61
.text:00403D94                 dd offset loc_403E6D
.text:00403D94                 dd offset loc_403E79
.text:00403D94                 dd offset loc_403E85
.text:00403D94                 dd offset loc_403E91
.text:00403D94                 dd offset loc_403E9D
.text:00403D94                 dd offset loc_403EA9
.text:00403D94                 dd offset loc_403EB5
.text:00403DBC ; ---------------------------------------------------------------------------
.text:00403DBC
.text:00403DBC loc_403DBC:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403DBC                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403DBC                 call    abort           ; jumptable 00403D8D case 0
.text:00403DC1 ; ---------------------------------------------------------------------------
.text:00403DC1
.text:00403DC1 loc_403DC1:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403DC1                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403DC1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00403D8D case 1
.text:00403DC8                 nop
.text:00403DC9                 lea     esi, [esi+0]
.text:00403DD0
.text:00403DD0 loc_403DD0:                             ; CODE XREF: sub_403D20+148↓j
.text:00403DD0                                         ; sub_403D20+154↓j ...
.text:00403DD0                 call    ds:libintl_gettext
.text:00403DD6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403DDA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403DDD                 mov     [esp+2Ch+Format], eax ; Format
.text:00403DE1                 call    vfprintf
.text:00403DE6                 mov     ebx, [esi+4]
.text:00403DE9                 dec     ebx
.text:00403DEA                 test    ebx, ebx
.text:00403DEC                 mov     [esi+4], ebx
.text:00403DEF                 js      short loc_403E4F
.text:00403DF1                 mov     edi, [esi]
.text:00403DF3                 mov     byte ptr [edi], 0Ah
.text:00403DF6                 inc     dword ptr [esi]
.text:00403DF8
.text:00403DF8 loc_403DF8:                             ; CODE XREF: sub_403D20+13F↓j
.text:00403DF8                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403DFC                 mov     edx, Buffer
.text:00403E02                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403E05                 call    fputs
.text:00403E0A                 mov     ebp, [esi+4]
.text:00403E0D                 dec     ebp
.text:00403E0E                 test    ebp, ebp
.text:00403E10                 mov     [esi+4], ebp
.text:00403E13                 js      short loc_403E3D
.text:00403E15                 mov     ecx, [esi]
.text:00403E17                 mov     byte ptr [ecx], 0Ah
.text:00403E1A                 inc     dword ptr [esi]
.text:00403E1C
.text:00403E1C loc_403E1C:                             ; CODE XREF: sub_403D20+12D↓j
.text:00403E1C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403E20                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403E27                 call    ds:libintl_gettext
.text:00403E2D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403E31                 add     esp, 1Ch
.text:00403E34                 pop     ebx
.text:00403E35                 pop     esi
.text:00403E36                 pop     edi
.text:00403E37                 pop     ebp
.text:00403E38                 jmp     fputs
.text:00403E3D ; ---------------------------------------------------------------------------
.text:00403E3D
.text:00403E3D loc_403E3D:                             ; CODE XREF: sub_403D20+F3↑j
.text:00403E3D                 mov     [esp+2Ch+Format], esi ; File
.text:00403E41                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403E48                 call    _flsbuf
.text:00403E4D                 jmp     short loc_403E1C
.text:00403E4F ; ---------------------------------------------------------------------------
.text:00403E4F
.text:00403E4F loc_403E4F:                             ; CODE XREF: sub_403D20+CF↑j
.text:00403E4F                 mov     [esp+2Ch+Format], esi ; File
.text:00403E53                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403E5A                 call    _flsbuf
.text:00403E5F                 jmp     short loc_403DF8
.text:00403E61 ; ---------------------------------------------------------------------------
.text:00403E61
.text:00403E61 loc_403E61:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E61                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E61                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00403D8D case 2
.text:00403E68                 jmp     loc_403DD0
.text:00403E6D ; ---------------------------------------------------------------------------
.text:00403E6D
.text:00403E6D loc_403E6D:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E6D                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E6D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00403D8D case 3
.text:00403E74                 jmp     loc_403DD0
.text:00403E79 ; ---------------------------------------------------------------------------
.text:00403E79
.text:00403E79 loc_403E79:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E79                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E79                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00403D8D case 4
.text:00403E80                 jmp     loc_403DD0
.text:00403E85 ; ---------------------------------------------------------------------------
.text:00403E85
.text:00403E85 loc_403E85:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E85                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E85                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00403D8D case 5
.text:00403E8C                 jmp     loc_403DD0
.text:00403E91 ; ---------------------------------------------------------------------------
.text:00403E91
.text:00403E91 loc_403E91:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E91                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E91                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00403D8D case 6
.text:00403E98                 jmp     loc_403DD0
.text:00403E9D ; ---------------------------------------------------------------------------
.text:00403E9D
.text:00403E9D loc_403E9D:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403E9D                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403E9D                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00403D8D case 7
.text:00403EA4                 jmp     loc_403DD0
.text:00403EA9 ; ---------------------------------------------------------------------------
.text:00403EA9
.text:00403EA9 loc_403EA9:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403EA9                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403EA9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00403D8D case 8
.text:00403EB0                 jmp     loc_403DD0
.text:00403EB5 ; ---------------------------------------------------------------------------
.text:00403EB5
.text:00403EB5 loc_403EB5:                             ; CODE XREF: sub_403D20+6D↑j
.text:00403EB5                                         ; DATA XREF: sub_403D20:jpt_403D8D↑o
.text:00403EB5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00403D8D case 9
.text:00403EBC                 jmp     loc_403DD0
.text:00403EC1 ; ---------------------------------------------------------------------------
.text:00403EC1
.text:00403EC1 def_403D8D:                             ; CODE XREF: sub_403D20+67↑j
.text:00403EC1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00403D8D default case
.text:00403EC8                 jmp     loc_403DD0
.text:00403ECD ; ---------------------------------------------------------------------------
.text:00403ECD
.text:00403ECD loc_403ECD:                             ; CODE XREF: sub_403D20+3E↑j
.text:00403ECD                 mov     [esp+2Ch+var_20], ebp
.text:00403ED1                 mov     ecx, [esp+2Ch+var_14]
.text:00403ED5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00403EDD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403EE0                 mov     [esp+2Ch+ArgList], ecx
.text:00403EE4                 call    fprintf
.text:00403EE9                 jmp     loc_403D84
.text:00403EE9 sub_403D20      endp
.text:00403EE9
.text:00403EE9 ; ---------------------------------------------------------------------------
.text:00403EEE                 align 10h
.text:00403EF0
.text:00403EF0 ; =============== S U B R O U T I N E =======================================
.text:00403EF0
.text:00403EF0
.text:00403EF0 ; int __cdecl sub_403EF0(FILE *, FILE *, int, int, char)
.text:00403EF0 sub_403EF0      proc near               ; CODE XREF: sub_401780+174↑p
.text:00403EF0
.text:00403EF0 var_1C          = dword ptr -1Ch
.text:00403EF0 var_18          = dword ptr -18h
.text:00403EF0 var_14          = dword ptr -14h
.text:00403EF0 var_10          = dword ptr -10h
.text:00403EF0 var_C           = dword ptr -0Ch
.text:00403EF0 arg_0           = dword ptr  4
.text:00403EF0 arg_4           = dword ptr  8
.text:00403EF0 arg_8           = dword ptr  0Ch
.text:00403EF0 arg_C           = dword ptr  10h
.text:00403EF0 arg_10          = byte ptr  14h
.text:00403EF0
.text:00403EF0                 sub     esp, 1Ch
.text:00403EF3                 mov     edx, [esp+1Ch+arg_C]
.text:00403EF7                 lea     ecx, [esp+1Ch+arg_10]
.text:00403EFB                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:00403EFF                 mov     ecx, [esp+1Ch+arg_8]
.text:00403F03                 mov     [esp+1Ch+var_10], edx ; int
.text:00403F07                 mov     edx, [esp+1Ch+arg_4]
.text:00403F0B                 mov     [esp+1Ch+var_14], ecx ; int
.text:00403F0F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00403F13                 mov     edx, [esp+1Ch+arg_0]
.text:00403F17                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:00403F1A                 call    sub_403D20
.text:00403F1F                 add     esp, 1Ch
.text:00403F22                 retn
.text:00403F22 sub_403EF0      endp
.text:00403F22
.text:00403F22 ; ---------------------------------------------------------------------------
.text:00403F23                 align 10h
.text:00403F30
.text:00403F30 ; =============== S U B R O U T I N E =======================================
.text:00403F30
.text:00403F30
.text:00403F30 ; int __cdecl sub_403F30(int, int, char *, int, int)
.text:00403F30 sub_403F30      proc near               ; CODE XREF: sub_401780+C5↑p
.text:00403F30
.text:00403F30 var_1C          = dword ptr -1Ch
.text:00403F30 var_18          = dword ptr -18h
.text:00403F30 var_14          = dword ptr -14h
.text:00403F30 var_10          = dword ptr -10h
.text:00403F30 var_C           = dword ptr -0Ch
.text:00403F30 var_8           = dword ptr -8
.text:00403F30 var_4           = dword ptr -4
.text:00403F30 arg_0           = dword ptr  4
.text:00403F30 arg_4           = dword ptr  8
.text:00403F30 arg_8           = dword ptr  0Ch
.text:00403F30 arg_C           = dword ptr  10h
.text:00403F30 arg_10          = dword ptr  14h
.text:00403F30
.text:00403F30                 sub     esp, 1Ch
.text:00403F33                 mov     edx, [esp+1Ch+arg_C]
.text:00403F37                 mov     [esp+1Ch+var_4], 0 ; int
.text:00403F3F                 mov     ecx, [esp+1Ch+arg_10]
.text:00403F43                 mov     [esp+1Ch+var_8], 0 ; int
.text:00403F4B                 mov     [esp+1Ch+var_10], edx ; int
.text:00403F4F                 mov     edx, [esp+1Ch+arg_4]
.text:00403F53                 mov     [esp+1Ch+var_C], ecx ; int
.text:00403F57                 mov     ecx, [esp+1Ch+arg_8]
.text:00403F5B                 mov     [esp+1Ch+var_18], edx ; int
.text:00403F5F                 mov     edx, [esp+1Ch+arg_0]
.text:00403F63                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00403F67                 mov     [esp+1Ch+var_1C], edx ; int
.text:00403F6A                 call    sub_403780
.text:00403F6F                 add     esp, 1Ch
.text:00403F72                 retn
.text:00403F72 sub_403F30      endp
.text:00403F72
.text:00403F72 ; ---------------------------------------------------------------------------
.text:00403F73                 align 10h
.text:00403F80                 sub     esp, 2Ch
.text:00403F83                 mov     edx, [esp+44h]
.text:00403F87                 mov     dword ptr [esp+18h], 0
.text:00403F8F                 mov     ecx, [esp+40h]
.text:00403F93                 mov     dword ptr [esp+14h], 0
.text:00403F9B                 mov     [esp+1Ch], edx
.text:00403F9F                 mov     edx, [esp+3Ch]
.text:00403FA3                 mov     [esp+10h], ecx
.text:00403FA7                 mov     ecx, [esp+38h]
.text:00403FAB                 mov     [esp+0Ch], edx
.text:00403FAF                 mov     edx, [esp+34h]
.text:00403FB3                 mov     [esp+8], ecx
.text:00403FB7                 mov     [esp+4], edx
.text:00403FBB                 mov     edx, [esp+30h]
.text:00403FBF                 mov     [esp], edx
.text:00403FC2                 call    sub_402BF0
.text:00403FC7                 add     esp, 2Ch
.text:00403FCA                 retn
.text:00403FCA ; ---------------------------------------------------------------------------
.text:00403FCB                 align 10h
.text:00403FD0                 sub     esp, 1Ch
.text:00403FD3                 mov     edx, [esp+2Ch]
.text:00403FD7                 mov     dword ptr [esp+18h], 0
.text:00403FDF                 mov     ecx, [esp+30h]
.text:00403FE3                 mov     dword ptr [esp+14h], 1
.text:00403FEB                 mov     [esp+0Ch], edx
.text:00403FEF                 mov     edx, [esp+24h]
.text:00403FF3                 mov     [esp+10h], ecx
.text:00403FF7                 mov     ecx, [esp+28h]
.text:00403FFB                 mov     [esp+4], edx
.text:00403FFF                 mov     edx, [esp+20h]
.text:00404003                 mov     [esp+8], ecx
.text:00404007                 mov     [esp], edx
.text:0040400A                 call    sub_403780
.text:0040400F                 add     esp, 1Ch
.text:00404012                 retn
.text:00404012 ; ---------------------------------------------------------------------------
.text:00404013                 align 10h
.text:00404020                 sub     esp, 2Ch
.text:00404023                 mov     edx, [esp+44h]
.text:00404027                 mov     dword ptr [esp+18h], 0
.text:0040402F                 mov     ecx, [esp+40h]
.text:00404033                 mov     dword ptr [esp+14h], 1
.text:0040403B                 mov     [esp+1Ch], edx
.text:0040403F                 mov     edx, [esp+3Ch]
.text:00404043                 mov     [esp+10h], ecx
.text:00404047                 mov     ecx, [esp+38h]
.text:0040404B                 mov     [esp+0Ch], edx
.text:0040404F                 mov     edx, [esp+34h]
.text:00404053                 mov     [esp+8], ecx
.text:00404057                 mov     [esp+4], edx
.text:0040405B                 mov     edx, [esp+30h]
.text:0040405F                 mov     [esp], edx
.text:00404062                 call    sub_402BF0
.text:00404067                 add     esp, 2Ch
.text:0040406A                 retn
.text:0040406A ; ---------------------------------------------------------------------------
.text:0040406B                 align 10h
.text:00404070                 mov     edx, [esp+4]
.text:00404074                 mov     ds:dword_4080D0, edx
.text:0040407A                 retn
.text:0040407A ; ---------------------------------------------------------------------------
.text:0040407B aWriteError_0   db 'write error',0      ; DATA XREF: sub_4040A0:loc_4040E9↓o
.text:00404087 ; const char aSS_0[]
.text:00404087 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4040A0+77↓o
.text:0040408E ; const char aS_1[]
.text:0040408E aS_1            db '%s',0               ; DATA XREF: sub_4040A0+A0↓o
.text:00404091 ; ---------------------------------------------------------------------------
.text:00404091                 jmp     short sub_4040A0
.text:00404091 ; ---------------------------------------------------------------------------
.text:00404093                 align 10h
.text:004040A0
.text:004040A0 ; =============== S U B R O U T I N E =======================================
.text:004040A0
.text:004040A0
.text:004040A0 ; void __cdecl sub_4040A0()
.text:004040A0 sub_4040A0      proc near               ; CODE XREF: .text:00404091↑j
.text:004040A0                                         ; DATA XREF: sub_401780+65↑o
.text:004040A0
.text:004040A0 Stream          = dword ptr -2Ch
.text:004040A0 ErrorMessage    = dword ptr -28h
.text:004040A0 var_24          = dword ptr -24h
.text:004040A0 var_20          = byte ptr -20h
.text:004040A0 var_1C          = dword ptr -1Ch
.text:004040A0 var_9           = byte ptr -9
.text:004040A0
.text:004040A0                 push    esi
.text:004040A1                 push    ebx
.text:004040A2                 sub     esp, 24h
.text:004040A5                 mov     edx, ds:_iob
.text:004040AB                 mov     ecx, [edx+2Ch]
.text:004040AE                 lea     esi, [edx+20h]
.text:004040B1                 shr     ecx, 5
.text:004040B4                 mov     bl, cl
.text:004040B6                 mov     ecx, [edx+20h]
.text:004040B9                 and     bl, 1
.text:004040BC                 cmp     ecx, [esi+8]
.text:004040BF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004040C2                 setz    [esp+2Ch+var_9]
.text:004040C7                 call    fclose
.text:004040CC                 test    eax, eax
.text:004040CE                 setnz   al
.text:004040D1                 test    bl, bl
.text:004040D3                 jnz     loc_404163
.text:004040D9                 test    al, al
.text:004040DB                 jz      short loc_404130
.text:004040DD
.text:004040DD loc_4040DD:                             ; CODE XREF: sub_4040A0+CD↓j
.text:004040DD                 call    _errno
.text:004040E2                 mov     esi, [eax]
.text:004040E4
.text:004040E4 loc_4040E4:                             ; CODE XREF: sub_4040A0+C7↓j
.text:004040E4                 cmp     esi, 9
.text:004040E7                 jz      short loc_404156
.text:004040E9
.text:004040E9 loc_4040E9:                             ; CODE XREF: sub_4040A0+B8↓j
.text:004040E9                                         ; sub_4040A0+C1↓j
.text:004040E9                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:004040F0                 call    ds:libintl_gettext
.text:004040F6                 mov     ebx, eax
.text:004040F8                 mov     eax, ds:dword_4080D0
.text:004040FD                 test    eax, eax
.text:004040FF                 jz      short loc_404136
.text:00404101                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404104                 call    sub_405610
.text:00404109                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040410D                 mov     edx, Code
.text:00404113                 mov     [esp+2Ch+var_1C], ebx
.text:00404117                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040411F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404123                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404126                 call    sub_405930
.text:0040412B                 nop
.text:0040412C                 lea     esi, [esi+0]
.text:00404130
.text:00404130 loc_404130:                             ; CODE XREF: sub_4040A0+3B↑j
.text:00404130                                         ; sub_4040A0+B4↓j ...
.text:00404130                 add     esp, 24h
.text:00404133                 pop     ebx
.text:00404134                 pop     esi
.text:00404135                 retn
.text:00404136 ; ---------------------------------------------------------------------------
.text:00404136
.text:00404136 loc_404136:                             ; CODE XREF: sub_4040A0+5F↑j
.text:00404136                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040413A                 mov     ebx, Code
.text:00404140                 mov     [esp+2Ch+var_24], offset aS_1 ; "%s"
.text:00404148                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040414C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040414F                 call    sub_405930
.text:00404154                 jmp     short loc_404130
.text:00404156 ; ---------------------------------------------------------------------------
.text:00404156
.text:00404156 loc_404156:                             ; CODE XREF: sub_4040A0+47↑j
.text:00404156                 test    bl, bl
.text:00404158                 jnz     short loc_4040E9
.text:0040415A                 cmp     [esp+2Ch+var_9], 0
.text:0040415F                 jnz     short loc_404130
.text:00404161                 jmp     short loc_4040E9
.text:00404163 ; ---------------------------------------------------------------------------
.text:00404163
.text:00404163 loc_404163:                             ; CODE XREF: sub_4040A0+33↑j
.text:00404163                 xor     esi, esi
.text:00404165                 test    al, al
.text:00404167                 jz      loc_4040E4
.text:0040416D                 jmp     loc_4040DD
.text:0040416D sub_4040A0      endp
.text:0040416D
.text:0040416D ; ---------------------------------------------------------------------------
.text:00404172                 align 10h
.text:00404180                 sub     esp, 0Ch
.text:00404183                 xor     edx, edx
.text:00404185                 mov     ecx, [esp+14h]
.text:00404189                 mov     [esp+8], ebx
.text:0040418D                 mov     eax, 0FFFFFFFFh
.text:00404192                 mov     ebx, [esp+10h]
.text:00404196                 div     ecx
.text:00404198                 cmp     eax, ebx
.text:0040419A                 jb      short loc_4041B9
.text:0040419C                 mov     edx, ebx
.text:0040419E                 imul    edx, ecx
.text:004041A1                 mov     [esp], edx
.text:004041A4                 call    malloc
.text:004041A9                 test    eax, eax
.text:004041AB                 jz      short loc_4041B5
.text:004041AD
.text:004041AD loc_4041AD:                             ; CODE XREF: .text:004041B7↓j
.text:004041AD                 mov     ebx, [esp+8]
.text:004041B1                 add     esp, 0Ch
.text:004041B4                 retn
.text:004041B5 ; ---------------------------------------------------------------------------
.text:004041B5
.text:004041B5 loc_4041B5:                             ; CODE XREF: .text:004041AB↑j
.text:004041B5                 test    ebx, ebx
.text:004041B7                 jz      short loc_4041AD
.text:004041B9
.text:004041B9 loc_4041B9:                             ; CODE XREF: .text:0040419A↑j
.text:004041B9                 call    sub_4058A0
.text:004041B9 ; ---------------------------------------------------------------------------
.text:004041BE                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 ; int __cdecl sub_4041C0(size_t)
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: sub_402350+39↑p
.text:004041C0                                         ; .text:00404FE9↓p ...
.text:004041C0
.text:004041C0 Size            = dword ptr -0Ch
.text:004041C0 var_4           = dword ptr -4
.text:004041C0 arg_0           = dword ptr  4
.text:004041C0
.text:004041C0                 sub     esp, 0Ch
.text:004041C3                 mov     [esp+0Ch+var_4], ebx
.text:004041C7                 mov     ebx, [esp+0Ch+arg_0]
.text:004041CB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004041CE                 call    malloc
.text:004041D3                 test    eax, eax
.text:004041D5                 jz      short loc_4041E0
.text:004041D7
.text:004041D7 loc_4041D7:                             ; CODE XREF: sub_4041C0+22↓j
.text:004041D7                 mov     ebx, [esp+0Ch+var_4]
.text:004041DB                 add     esp, 0Ch
.text:004041DE                 retn
.text:004041DE ; ---------------------------------------------------------------------------
.text:004041DF                 align 10h
.text:004041E0
.text:004041E0 loc_4041E0:                             ; CODE XREF: sub_4041C0+15↑j
.text:004041E0                 test    ebx, ebx
.text:004041E2                 jz      short loc_4041D7
.text:004041E4                 call    sub_4058A0
.text:004041E4 sub_4041C0      endp
.text:004041E4
.text:004041E4 ; ---------------------------------------------------------------------------
.text:004041E9                 align 10h
.text:004041F0                 sub     esp, 1Ch
.text:004041F3                 xor     edx, edx
.text:004041F5                 mov     eax, 0FFFFFFFFh
.text:004041FA                 mov     [esp+14h], ebx
.text:004041FE                 mov     ecx, [esp+20h]
.text:00404202                 mov     ebx, [esp+28h]
.text:00404206                 mov     [esp+18h], esi
.text:0040420A                 mov     esi, [esp+24h]
.text:0040420E                 div     ebx
.text:00404210                 cmp     eax, esi
.text:00404212                 jb      short loc_404244
.text:00404214                 mov     [esp], ecx
.text:00404217                 mov     edx, esi
.text:00404219                 imul    edx, ebx
.text:0040421C                 mov     [esp+4], edx
.text:00404220                 call    realloc
.text:00404225                 test    eax, eax
.text:00404227                 mov     ecx, eax
.text:00404229                 jz      short loc_404240
.text:0040422B
.text:0040422B loc_40422B:                             ; CODE XREF: .text:00404242↓j
.text:0040422B                 mov     ebx, [esp+14h]
.text:0040422F                 mov     eax, ecx
.text:00404231                 mov     esi, [esp+18h]
.text:00404235                 add     esp, 1Ch
.text:00404238                 retn
.text:00404238 ; ---------------------------------------------------------------------------
.text:00404239                 align 10h
.text:00404240
.text:00404240 loc_404240:                             ; CODE XREF: .text:00404229↑j
.text:00404240                 test    esi, esi
.text:00404242                 jz      short loc_40422B
.text:00404244
.text:00404244 loc_404244:                             ; CODE XREF: .text:00404212↑j
.text:00404244                 call    sub_4058A0
.text:00404244 ; ---------------------------------------------------------------------------
.text:00404249                 align 10h
.text:00404250
.text:00404250 ; =============== S U B R O U T I N E =======================================
.text:00404250
.text:00404250
.text:00404250 ; int __cdecl sub_404250(void *, size_t)
.text:00404250 sub_404250      proc near               ; CODE XREF: sub_4056B0+5B↓p
.text:00404250
.text:00404250 Block           = dword ptr -0Ch
.text:00404250 Size            = dword ptr -8
.text:00404250 var_4           = dword ptr -4
.text:00404250 arg_0           = dword ptr  4
.text:00404250 arg_4           = dword ptr  8
.text:00404250
.text:00404250                 sub     esp, 0Ch
.text:00404253                 mov     edx, [esp+0Ch+arg_0]
.text:00404257                 mov     [esp+0Ch+var_4], ebx
.text:0040425B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040425F                 mov     [esp+0Ch+Block], edx ; Block
.text:00404262                 mov     [esp+0Ch+Size], ebx ; Size
.text:00404266                 call    realloc
.text:0040426B                 test    eax, eax
.text:0040426D                 jz      short loc_404277
.text:0040426F
.text:0040426F loc_40426F:                             ; CODE XREF: sub_404250+29↓j
.text:0040426F                 mov     ebx, [esp+0Ch+var_4]
.text:00404273                 add     esp, 0Ch
.text:00404276                 retn
.text:00404277 ; ---------------------------------------------------------------------------
.text:00404277
.text:00404277 loc_404277:                             ; CODE XREF: sub_404250+1D↑j
.text:00404277                 test    ebx, ebx
.text:00404279                 jz      short loc_40426F
.text:0040427B                 call    sub_4058A0
.text:0040427B sub_404250      endp
.text:0040427B
.text:00404280
.text:00404280 ; =============== S U B R O U T I N E =======================================
.text:00404280
.text:00404280 ; Attributes: thunk
.text:00404280
.text:00404280 ; int __cdecl sub_404280(void *, int, int)
.text:00404280 sub_404280      proc near               ; CODE XREF: sub_401780+250↑p
.text:00404280                                         ; sub_401780+637↑p ...
.text:00404280                 jmp     sub_4043D0
.text:00404280 sub_404280      endp
.text:00404280
.text:00404280 ; ---------------------------------------------------------------------------
.text:00404285                 align 10h
.text:00404290                 sub     esp, 0Ch
.text:00404293                 mov     edx, [esp+14h]
.text:00404297                 mov     dword ptr [esp+8], 1
.text:0040429F                 mov     [esp+4], edx
.text:004042A3                 mov     edx, [esp+10h]
.text:004042A7                 mov     [esp], edx
.text:004042AA                 call    sub_4043D0
.text:004042AF                 add     esp, 0Ch
.text:004042B2                 retn
.text:004042B2 ; ---------------------------------------------------------------------------
.text:004042B3                 align 10h
.text:004042C0                 sub     esp, 1Ch
.text:004042C3                 mov     [esp+18h], ebx
.text:004042C7                 mov     ebx, [esp+20h]
.text:004042CB                 mov     [esp], ebx
.text:004042CE                 call    malloc
.text:004042D3                 test    eax, eax
.text:004042D5                 jz      short loc_4042F3
.text:004042D7
.text:004042D7 loc_4042D7:                             ; CODE XREF: .text:004042F5↓j
.text:004042D7                 mov     [esp+8], ebx
.text:004042DB                 mov     dword ptr [esp+4], 0
.text:004042E3                 mov     [esp], eax
.text:004042E6                 call    memset
.text:004042EB                 mov     ebx, [esp+18h]
.text:004042EF                 add     esp, 1Ch
.text:004042F2                 retn
.text:004042F3 ; ---------------------------------------------------------------------------
.text:004042F3
.text:004042F3 loc_4042F3:                             ; CODE XREF: .text:004042D5↑j
.text:004042F3                 test    ebx, ebx
.text:004042F5                 jz      short loc_4042D7
.text:004042F7                 call    sub_4058A0
.text:004042F7 ; ---------------------------------------------------------------------------
.text:004042FC                 align 10h
.text:00404300                 sub     esp, 0Ch
.text:00404303                 xor     edx, edx
.text:00404305                 mov     ecx, [esp+14h]
.text:00404309                 mov     [esp+8], ebx
.text:0040430D                 mov     eax, 0FFFFFFFFh
.text:00404312                 mov     ebx, [esp+10h]
.text:00404316                 div     ecx
.text:00404318                 cmp     eax, ebx
.text:0040431A                 jb      short loc_404338
.text:0040431C                 mov     [esp+4], ecx
.text:00404320                 mov     [esp], ebx
.text:00404323                 call    calloc
.text:00404328                 test    eax, eax
.text:0040432A                 jz      short loc_404334
.text:0040432C
.text:0040432C loc_40432C:                             ; CODE XREF: .text:00404336↓j
.text:0040432C                 mov     ebx, [esp+8]
.text:00404330                 add     esp, 0Ch
.text:00404333                 retn
.text:00404334 ; ---------------------------------------------------------------------------
.text:00404334
.text:00404334 loc_404334:                             ; CODE XREF: .text:0040432A↑j
.text:00404334                 test    ebx, ebx
.text:00404336                 jz      short loc_40432C
.text:00404338
.text:00404338 loc_404338:                             ; CODE XREF: .text:0040431A↑j
.text:00404338                 call    sub_4058A0
.text:00404338 ; ---------------------------------------------------------------------------
.text:0040433D                 align 10h
.text:00404340                 sub     esp, 1Ch
.text:00404343                 mov     [esp+18h], ebx
.text:00404347                 mov     ebx, [esp+24h]
.text:0040434B                 mov     [esp], ebx
.text:0040434E                 call    malloc
.text:00404353                 test    eax, eax
.text:00404355                 mov     edx, eax
.text:00404357                 jz      short loc_404375
.text:00404359
.text:00404359 loc_404359:                             ; CODE XREF: .text:00404377↓j
.text:00404359                 mov     [esp+8], ebx
.text:0040435D                 mov     ecx, [esp+20h]
.text:00404361                 mov     [esp], edx
.text:00404364                 mov     [esp+4], ecx
.text:00404368                 call    memcpy
.text:0040436D                 mov     ebx, [esp+18h]
.text:00404371                 add     esp, 1Ch
.text:00404374                 retn
.text:00404375 ; ---------------------------------------------------------------------------
.text:00404375
.text:00404375 loc_404375:                             ; CODE XREF: .text:00404357↑j
.text:00404375                 test    ebx, ebx
.text:00404377                 jz      short loc_404359
.text:00404379                 call    sub_4058A0
.text:00404379 ; ---------------------------------------------------------------------------
.text:0040437E                 align 10h
.text:00404380                 sub     esp, 1Ch
.text:00404383                 mov     [esp+18h], esi
.text:00404387                 mov     esi, [esp+20h]
.text:0040438B                 mov     [esp+14h], ebx
.text:0040438F                 mov     [esp], esi
.text:00404392                 call    strlen
.text:00404397                 lea     ebx, [eax+1]
.text:0040439A                 mov     [esp], ebx
.text:0040439D                 call    malloc
.text:004043A2                 test    eax, eax
.text:004043A4                 jz      short loc_4043C2
.text:004043A6
.text:004043A6 loc_4043A6:                             ; CODE XREF: .text:004043C4↓j
.text:004043A6                 mov     [esp+8], ebx
.text:004043AA                 mov     [esp+4], esi
.text:004043AE                 mov     [esp], eax
.text:004043B1                 call    memcpy
.text:004043B6                 mov     ebx, [esp+14h]
.text:004043BA                 mov     esi, [esp+18h]
.text:004043BE                 add     esp, 1Ch
.text:004043C1                 retn
.text:004043C2 ; ---------------------------------------------------------------------------
.text:004043C2
.text:004043C2 loc_4043C2:                             ; CODE XREF: .text:004043A4↑j
.text:004043C2                 test    ebx, ebx
.text:004043C4                 jz      short loc_4043A6
.text:004043C6                 call    sub_4058A0
.text:004043C6 ; ---------------------------------------------------------------------------
.text:004043CB                 align 10h
.text:004043D0
.text:004043D0 ; =============== S U B R O U T I N E =======================================
.text:004043D0
.text:004043D0
.text:004043D0 ; int __cdecl sub_4043D0(void *, int, int)
.text:004043D0 sub_4043D0      proc near               ; CODE XREF: sub_404280↑j
.text:004043D0                                         ; .text:004042AA↑p
.text:004043D0
.text:004043D0 Block           = dword ptr -1Ch
.text:004043D0 Size            = dword ptr -18h
.text:004043D0 var_C           = dword ptr -0Ch
.text:004043D0 var_8           = dword ptr -8
.text:004043D0 var_4           = dword ptr -4
.text:004043D0 arg_0           = dword ptr  4
.text:004043D0 arg_4           = dword ptr  8
.text:004043D0 arg_8           = dword ptr  0Ch
.text:004043D0
.text:004043D0                 sub     esp, 1Ch
.text:004043D3                 mov     [esp+1Ch+var_8], esi
.text:004043D7                 mov     esi, [esp+1Ch+arg_0]
.text:004043DB                 mov     [esp+1Ch+var_4], edi
.text:004043DF                 mov     edi, [esp+1Ch+arg_4]
.text:004043E3                 test    esi, esi
.text:004043E5                 mov     [esp+1Ch+var_C], ebx
.text:004043E9                 mov     ecx, [edi]
.text:004043EB                 mov     ebx, [esp+1Ch+arg_8]
.text:004043EF                 jz      short loc_404430
.text:004043F1                 xor     edx, edx
.text:004043F3                 mov     eax, 7FFFFFFFh
.text:004043F8                 div     ebx
.text:004043FA                 cmp     eax, ecx
.text:004043FC                 jb      short loc_404429
.text:004043FE                 add     ecx, ecx
.text:00404400
.text:00404400 loc_404400:                             ; CODE XREF: sub_4043D0+62↓j
.text:00404400                                         ; sub_4043D0+71↓j ...
.text:00404400                 mov     [edi], ecx
.text:00404402                 imul    ebx, ecx
.text:00404405                 mov     [esp+1Ch+Block], esi ; Block
.text:00404408                 mov     [esp+1Ch+Size], ebx ; Size
.text:0040440C                 call    realloc
.text:00404411                 test    eax, eax
.text:00404413                 jz      short loc_404425
.text:00404415
.text:00404415 loc_404415:                             ; CODE XREF: sub_4043D0+57↓j
.text:00404415                 mov     ebx, [esp+1Ch+var_C]
.text:00404419                 mov     esi, [esp+1Ch+var_8]
.text:0040441D                 mov     edi, [esp+1Ch+var_4]
.text:00404421                 add     esp, 1Ch
.text:00404424                 retn
.text:00404425 ; ---------------------------------------------------------------------------
.text:00404425
.text:00404425 loc_404425:                             ; CODE XREF: sub_4043D0+43↑j
.text:00404425                 test    ebx, ebx
.text:00404427                 jz      short loc_404415
.text:00404429
.text:00404429 loc_404429:                             ; CODE XREF: sub_4043D0+2C↑j
.text:00404429                 call    sub_4058A0
.text:00404429 ; ---------------------------------------------------------------------------
.text:0040442E                 align 10h
.text:00404430
.text:00404430 loc_404430:                             ; CODE XREF: sub_4043D0+1F↑j
.text:00404430                 test    ecx, ecx
.text:00404432                 jnz     short loc_404400
.text:00404434                 xor     edx, edx
.text:00404436                 mov     eax, 40h ; '@'
.text:0040443B                 div     ebx
.text:0040443D                 test    eax, eax
.text:0040443F                 mov     ecx, eax
.text:00404441                 jnz     short loc_404400
.text:00404443                 mov     ecx, 1
.text:00404448                 jmp     short loc_404400
.text:00404448 sub_4043D0      endp
.text:00404448
.text:00404448 ; ---------------------------------------------------------------------------
.text:0040444A                 align 10h
.text:00404450                 sub     esp, 0Ch
.text:00404453                 mov     edx, [esp+14h]
.text:00404457                 mov     dword ptr [esp+4], 5
.text:0040445F                 mov     [esp+8], edx
.text:00404463                 mov     edx, [esp+10h]
.text:00404467                 mov     [esp], edx
.text:0040446A                 call    sub_4052A0
.text:0040446F                 add     esp, 0Ch
.text:00404472                 retn
.text:00404472 ; ---------------------------------------------------------------------------
.text:00404473                 align 10h
.text:00404480
.text:00404480 ; =============== S U B R O U T I N E =======================================
.text:00404480
.text:00404480
.text:00404480 ; int __cdecl sub_404480(char *)
.text:00404480 sub_404480      proc near               ; CODE XREF: sub_401FB0+FF↑p
.text:00404480                                         ; sub_401FB0+250↑p
.text:00404480
.text:00404480 var_C           = dword ptr -0Ch
.text:00404480 var_8           = dword ptr -8
.text:00404480 var_4           = dword ptr -4
.text:00404480 arg_0           = dword ptr  4
.text:00404480
.text:00404480                 sub     esp, 0Ch
.text:00404483                 mov     edx, [esp+0Ch+arg_0]
.text:00404487                 mov     [esp+0Ch+var_8], 5 ; int
.text:0040448F                 mov     [esp+0Ch+var_C], 0 ; int
.text:00404496                 mov     [esp+0Ch+var_4], edx ; char *
.text:0040449A                 call    sub_4052A0
.text:0040449F                 add     esp, 0Ch
.text:004044A2                 retn
.text:004044A2 sub_404480      endp
.text:004044A2
.text:004044A2 ; ---------------------------------------------------------------------------
.text:004044A3                 align 10h
.text:004044B0
.text:004044B0 loc_4044B0:                             ; CODE XREF: sub_401FB0+F5↑p
.text:004044B0                 sub     esp, 0Ch
.text:004044B3                 mov     edx, [esp+14h]
.text:004044B7                 mov     [esp+4], edx
.text:004044BB                 mov     edx, [esp+10h]
.text:004044BF                 mov     [esp], edx
.text:004044C2                 call    sub_405BD0
.text:004044C7                 test    eax, eax
.text:004044C9                 jz      short loc_4044CF
.text:004044CB                 add     esp, 0Ch
.text:004044CE                 retn
.text:004044CF ; ---------------------------------------------------------------------------
.text:004044CF
.text:004044CF loc_4044CF:                             ; CODE XREF: .text:004044C9↑j
.text:004044CF                 call    sub_4058A0
.text:004044CF ; ---------------------------------------------------------------------------
.text:004044D4                 align 10h
.text:004044E0 aLiteral        db 'literal',0          ; DATA XREF: .text:00404520↓o
.text:004044E8 aShell          db 'shell',0            ; DATA XREF: .text:00404524↓o
.text:004044EE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404528↓o
.text:004044FB aC              db 'c',0                ; DATA XREF: .text:0040452C↓o
.text:004044FD aEscape         db 'escape',0           ; DATA XREF: .text:00404530↓o
.text:00404504 aLocale         db 'locale',0           ; DATA XREF: .text:00404534↓o
.text:0040450B aClocale        db 'clocale',0          ; DATA XREF: .text:00404538↓o
.text:00404513                 align 10h
.text:00404520                 dd offset aLiteral      ; "literal"
.text:00404524                 dd offset aShell        ; "shell"
.text:00404528                 dd offset aShellAlways  ; "shell-always"
.text:0040452C                 dd offset aC            ; "c"
.text:00404530                 dd offset aEscape       ; "escape"
.text:00404534                 dd offset aLocale       ; "locale"
.text:00404538                 dd offset aClocale      ; "clocale"
.text:0040453C                 dd 2 dup(0)
.text:00404544                 dd 1, 2, 3, 4, 5, 6
.text:0040455C asc_40455C:                             ; DATA XREF: sub_404570+7E↓o
.text:0040455C                                         ; sub_404570+A39↓o ...
.text:0040455C                 text "UTF-16LE", '"',27h,'`'
.text:00404562                 align 10h
.text:00404570
.text:00404570 ; =============== S U B R O U T I N E =======================================
.text:00404570
.text:00404570
.text:00404570 ; int __cdecl sub_404570(int, int, char *Str, int, int, int)
.text:00404570 sub_404570      proc near               ; CODE XREF: sub_404570+43A↓p
.text:00404570                                         ; .text:00405133↓p ...
.text:00404570
.text:00404570 C               = dword ptr -4Ch
.text:00404570 Type            = dword ptr -48h
.text:00404570 SizeInBytes     = dword ptr -44h
.text:00404570 State           = dword ptr -40h
.text:00404570 var_3C          = dword ptr -3Ch
.text:00404570 var_38          = dword ptr -38h
.text:00404570 var_34          = dword ptr -34h
.text:00404570 var_30          = dword ptr -30h
.text:00404570 var_29          = byte ptr -29h
.text:00404570 var_28          = dword ptr -28h
.text:00404570 var_22          = byte ptr -22h
.text:00404570 var_21          = byte ptr -21h
.text:00404570 var_20          = dword ptr -20h
.text:00404570 var_1C          = dword ptr -1Ch
.text:00404570 var_18          = mbstate_t ptr -18h
.text:00404570 arg_0           = dword ptr  4
.text:00404570 arg_4           = dword ptr  8
.text:00404570 Str             = dword ptr  0Ch
.text:00404570 arg_C           = dword ptr  10h
.text:00404570 arg_10          = dword ptr  14h
.text:00404570 arg_14          = dword ptr  18h
.text:00404570
.text:00404570                 push    ebp
.text:00404571                 push    edi
.text:00404572                 push    esi
.text:00404573                 push    ebx
.text:00404574                 sub     esp, 3Ch
.text:00404577                 mov     edx, ds:__mb_cur_max
.text:0040457D                 mov     [esp+4Ch+var_34], 0
.text:00404585                 mov     [esp+4Ch+var_1C], 0
.text:0040458D                 cmp     dword ptr [edx], 1
.text:00404590                 mov     [esp+4Ch+var_20], 0
.text:00404598                 mov     [esp+4Ch+var_21], 0
.text:0040459D                 setz    [esp+4Ch+var_22]
.text:004045A2                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:004045A7                 ja      short def_4045AD ; jumptable 004045AD default case, cases 0,1
.text:004045A9                 mov     edx, [esp+4Ch+arg_10]
.text:004045AD                 jmp     ds:jpt_4045AD[edx*4] ; switch jump
.text:004045AD ; ---------------------------------------------------------------------------
.text:004045B4 jpt_4045AD      dd offset def_4045AD    ; DATA XREF: sub_404570+3D↑r
.text:004045B4                 dd offset def_4045AD    ; jump table for switch statement
.text:004045B4                 dd offset loc_404EF5
.text:004045B4                 dd offset loc_4045D0
.text:004045B4                 dd offset loc_404F1B
.text:004045B4                 dd offset loc_404F25
.text:004045B4                 dd offset loc_404F25
.text:004045D0 ; ---------------------------------------------------------------------------
.text:004045D0
.text:004045D0 loc_4045D0:                             ; CODE XREF: sub_404570+3D↑j
.text:004045D0                                         ; DATA XREF: sub_404570:jpt_4045AD↑o
.text:004045D0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 004045AD case 3
.text:004045D4                 cmp     [esp+4Ch+var_34], eax
.text:004045D8                 jnb     short loc_4045E1
.text:004045DA                 mov     ebx, [esp+4Ch+arg_0]
.text:004045DE                 mov     byte ptr [ebx], 22h ; '"'
.text:004045E1
.text:004045E1 loc_4045E1:                             ; CODE XREF: sub_404570+68↑j
.text:004045E1                 mov     [esp+4Ch+var_34], 1
.text:004045E9                 mov     [esp+4Ch+var_21], 1
.text:004045EE                 mov     [esp+4Ch+var_1C], offset asc_40455C ; "\"'`"
.text:004045F6
.text:004045F6 loc_4045F6:                             ; CODE XREF: sub_404570+9A6↓j
.text:004045F6                 mov     [esp+4Ch+var_20], 1
.text:004045FE
.text:004045FE def_4045AD:                             ; CODE XREF: sub_404570+37↑j
.text:004045FE                                         ; sub_404570+3D↑j ...
.text:004045FE                 xor     ebp, ebp        ; jumptable 004045AD default case, cases 0,1
.text:00404600
.text:00404600 loc_404600:                             ; CODE XREF: sub_404570+3DB↓j
.text:00404600                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404605                 jz      loc_404EE7
.text:0040460B                 cmp     ebp, [esp+4Ch+arg_C]
.text:0040460F
.text:0040460F loc_40460F:                             ; CODE XREF: sub_404570+980↓j
.text:0040460F                 jz      loc_404E7E
.text:00404615                 cmp     [esp+4Ch+var_21], 0
.text:0040461A                 jz      short loc_404660
.text:0040461C                 mov     esi, [esp+4Ch+var_20]
.text:00404620                 test    esi, esi
.text:00404622                 jz      short loc_404660
.text:00404624                 mov     ecx, [esp+4Ch+var_20]
.text:00404628                 lea     edi, [ecx+ebp]
.text:0040462B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040462F                 ja      short loc_404660
.text:00404631                 cld
.text:00404632                 mov     ebx, [esp+4Ch+Str]
.text:00404636                 mov     edi, [esp+4Ch+var_1C]
.text:0040463A                 add     ebx, ebp
.text:0040463C                 mov     esi, ebx
.text:0040463E                 cmp     ecx, ecx
.text:00404640                 repe cmpsb
.text:00404642                 jnz     short loc_404660
.text:00404644                 mov     edx, [esp+4Ch+arg_4]
.text:00404648                 cmp     [esp+4Ch+var_34], edx
.text:0040464C                 jnb     short loc_40465A
.text:0040464E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404652                 mov     eax, [esp+4Ch+var_34]
.text:00404656                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040465A
.text:0040465A loc_40465A:                             ; CODE XREF: sub_404570+DC↑j
.text:0040465A                 inc     [esp+4Ch+var_34]
.text:0040465E                 mov     esi, esi
.text:00404660
.text:00404660 loc_404660:                             ; CODE XREF: sub_404570+AA↑j
.text:00404660                                         ; sub_404570+B2↑j ...
.text:00404660                 mov     edi, [esp+4Ch+Str]
.text:00404664                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404669                 movzx   eax, bl
.text:0040466C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040466F                 ja      def_404675      ; jumptable 00404675 default case, cases 1-6,14-31,64
.text:00404675                 jmp     ds:jpt_404675[eax*4] ; switch jump
.text:00404675 ; ---------------------------------------------------------------------------
.text:0040467C jpt_404675      dd offset loc_404878, offset def_404675, offset def_404675
.text:0040467C                                         ; DATA XREF: sub_404570+105↑r
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675 ; jump table for switch statement
.text:0040467C                 dd offset def_404675, offset loc_404950, offset loc_40496E
.text:0040467C                 dd offset loc_404972, offset loc_4049B7, offset loc_4049BB
.text:0040467C                 dd offset loc_4049BF, offset loc_4049C3, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset def_404675
.text:0040467C                 dd offset def_404675, offset def_404675, offset loc_404E48
.text:0040467C                 dd offset loc_404E48, offset loc_404E48, offset loc_404E6A
.text:0040467C                 dd offset loc_404E48, offset def_404A72, offset loc_404E48
.text:0040467C                 dd offset loc_4049C7, offset loc_404E48, offset loc_404E48
.text:0040467C                 dd offset loc_404E48, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset loc_404E48
.text:0040467C                 dd offset loc_404E48, offset loc_404E48, offset loc_404E48
.text:0040467C                 dd offset loc_404A2C, offset def_404675, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset loc_404E48, offset loc_404E41
.text:0040467C                 dd offset def_404A72, offset loc_404E48, offset def_404A72
.text:0040467C                 dd offset loc_404E48, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset def_404A72, offset def_404A72, offset def_404A72
.text:0040467C                 dd offset loc_404E58, offset loc_404E48, offset loc_404E58
.text:0040467C                 dd offset loc_404E6A
.text:00404878 ; ---------------------------------------------------------------------------
.text:00404878
.text:00404878 loc_404878:                             ; CODE XREF: sub_404570+105↑j
.text:00404878                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404878                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404675 case 0
.text:0040487D                 lea     eax, [ebp+1]
.text:00404880                 jz      loc_404930
.text:00404886                 mov     esi, [esp+4Ch+arg_4]
.text:0040488A                 cmp     [esp+4Ch+var_34], esi
.text:0040488E                 jnb     short loc_40489C
.text:00404890                 mov     eax, [esp+4Ch+arg_0]
.text:00404894                 mov     ebx, [esp+4Ch+var_34]
.text:00404898                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040489C
.text:0040489C loc_40489C:                             ; CODE XREF: sub_404570+31E↑j
.text:0040489C                 inc     [esp+4Ch+var_34]
.text:004048A0                 mov     edx, [esp+4Ch+arg_4]
.text:004048A4                 cmp     [esp+4Ch+var_34], edx
.text:004048A8                 jnb     short loc_4048B6
.text:004048AA                 mov     edi, [esp+4Ch+arg_0]
.text:004048AE                 mov     ecx, [esp+4Ch+var_34]
.text:004048B2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004048B6
.text:004048B6 loc_4048B6:                             ; CODE XREF: sub_404570+338↑j
.text:004048B6                 inc     [esp+4Ch+var_34]
.text:004048BA                 mov     esi, [esp+4Ch+arg_4]
.text:004048BE                 cmp     [esp+4Ch+var_34], esi
.text:004048C2                 jnb     short loc_4048D0
.text:004048C4                 mov     ebx, [esp+4Ch+arg_0]
.text:004048C8                 mov     eax, [esp+4Ch+var_34]
.text:004048CC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004048D0
.text:004048D0 loc_4048D0:                             ; CODE XREF: sub_404570+352↑j
.text:004048D0                 inc     [esp+4Ch+var_34]
.text:004048D4                 mov     bl, 30h ; '0'
.text:004048D6                 lea     esi, [esi+0]
.text:004048D9                 lea     edi, [edi+0]
.text:004048E0
.text:004048E0 def_404A72:                             ; CODE XREF: sub_404570+105↑j
.text:004048E0                                         ; sub_404570+463↓j ...
.text:004048E0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:004048E0                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:004048E5                 lea     eax, [ebp+1]
.text:004048E8                 jz      short loc_404930
.text:004048EA                 mov     cl, bl
.text:004048EC                 mov     edi, [esp+4Ch+arg_14]
.text:004048F0                 mov     esi, 1
.text:004048F5                 shr     cl, 5
.text:004048F8                 movzx   edx, cl
.text:004048FB                 mov     ecx, ebx
.text:004048FD                 and     ecx, 1Fh
.text:00404900                 shl     esi, cl
.text:00404902                 test    [edi+edx*4+4], esi
.text:00404906                 jz      short loc_404922
.text:00404908
.text:00404908 loc_404908:                             ; CODE XREF: sub_404570+3FC↓j
.text:00404908                 mov     edx, [esp+4Ch+arg_4]
.text:0040490C                 cmp     [esp+4Ch+var_34], edx
.text:00404910                 jnb     short loc_40491E
.text:00404912                 mov     edi, [esp+4Ch+arg_0]
.text:00404916                 mov     esi, [esp+4Ch+var_34]
.text:0040491A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040491E
.text:0040491E loc_40491E:                             ; CODE XREF: sub_404570+3A0↑j
.text:0040491E                 inc     [esp+4Ch+var_34]
.text:00404922
.text:00404922 loc_404922:                             ; CODE XREF: sub_404570+396↑j
.text:00404922                 lea     eax, [ebp+1]
.text:00404925                 lea     esi, [esi+0]
.text:00404929                 lea     edi, [edi+0]
.text:00404930
.text:00404930 loc_404930:                             ; CODE XREF: sub_404570+310↑j
.text:00404930                                         ; sub_404570+378↑j ...
.text:00404930                 mov     ebp, [esp+4Ch+arg_4]
.text:00404934                 cmp     [esp+4Ch+var_34], ebp
.text:00404938                 jnb     short loc_404945
.text:0040493A                 mov     edx, [esp+4Ch+arg_0]
.text:0040493E                 mov     ecx, [esp+4Ch+var_34]
.text:00404942                 mov     [ecx+edx], bl
.text:00404945
.text:00404945 loc_404945:                             ; CODE XREF: sub_404570+3C8↑j
.text:00404945                 inc     [esp+4Ch+var_34]
.text:00404949                 mov     ebp, eax
.text:0040494B                 jmp     loc_404600
.text:00404950 ; ---------------------------------------------------------------------------
.text:00404950
.text:00404950 loc_404950:                             ; CODE XREF: sub_404570+105↑j
.text:00404950                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404950                 mov     dl, 61h ; 'a'   ; jumptable 00404675 case 7
.text:00404952                 lea     esi, [esi+0]
.text:00404959                 lea     edi, [edi+0]
.text:00404960
.text:00404960 loc_404960:                             ; CODE XREF: sub_404570+400↓j
.text:00404960                                         ; sub_404570+409↓j ...
.text:00404960                 cmp     [esp+4Ch+var_21], 0
.text:00404965                 lea     eax, [ebp+1]
.text:00404968                 jz      short loc_404930
.text:0040496A                 mov     bl, dl
.text:0040496C                 jmp     short loc_404908
.text:0040496E ; ---------------------------------------------------------------------------
.text:0040496E
.text:0040496E loc_40496E:                             ; CODE XREF: sub_404570+105↑j
.text:0040496E                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:0040496E                 mov     dl, 62h ; 'b'   ; jumptable 00404675 case 8
.text:00404970                 jmp     short loc_404960
.text:00404972 ; ---------------------------------------------------------------------------
.text:00404972
.text:00404972 loc_404972:                             ; CODE XREF: sub_404570+105↑j
.text:00404972                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404972                 mov     dl, 74h ; 't'   ; jumptable 00404675 case 9
.text:00404974
.text:00404974 loc_404974:                             ; CODE XREF: sub_404570+449↓j
.text:00404974                                         ; sub_404570+455↓j ...
.text:00404974                 cmp     [esp+4Ch+arg_10], 1
.text:00404979                 jnz     short loc_404960
.text:0040497B
.text:0040497B loc_40497B:                             ; CODE XREF: sub_404570+45C↓j
.text:0040497B                                         ; sub_404570+4C1↓j ...
.text:0040497B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404D42 cases 91,92,94,96,124
.text:00404983                 mov     eax, [esp+4Ch+arg_14]
.text:00404987                 mov     edx, [esp+4Ch+arg_C]
.text:0040498B                 mov     ecx, [esp+4Ch+Str]
.text:0040498F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404993                 mov     [esp+4Ch+var_38], eax ; int
.text:00404997                 mov     ebp, [esp+4Ch+arg_0]
.text:0040499B                 mov     [esp+4Ch+State], edx ; int
.text:0040499F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:004049A3                 mov     [esp+4Ch+Type], ebx ; int
.text:004049A7                 mov     [esp+4Ch+C], ebp ; int
.text:004049AA                 call    sub_404570
.text:004049AF
.text:004049AF loc_4049AF:                             ; CODE XREF: sub_404570+972↓j
.text:004049AF                 add     esp, 3Ch
.text:004049B2                 pop     ebx
.text:004049B3                 pop     esi
.text:004049B4                 pop     edi
.text:004049B5                 pop     ebp
.text:004049B6                 retn
.text:004049B7 ; ---------------------------------------------------------------------------
.text:004049B7
.text:004049B7 loc_4049B7:                             ; CODE XREF: sub_404570+105↑j
.text:004049B7                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:004049B7                 mov     dl, 6Eh ; 'n'   ; jumptable 00404675 case 10
.text:004049B9                 jmp     short loc_404974
.text:004049BB ; ---------------------------------------------------------------------------
.text:004049BB
.text:004049BB loc_4049BB:                             ; CODE XREF: sub_404570+105↑j
.text:004049BB                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:004049BB                 mov     dl, 76h ; 'v'   ; jumptable 00404675 case 11
.text:004049BD                 jmp     short loc_404960
.text:004049BF ; ---------------------------------------------------------------------------
.text:004049BF
.text:004049BF loc_4049BF:                             ; CODE XREF: sub_404570+105↑j
.text:004049BF                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:004049BF                 mov     dl, 66h ; 'f'   ; jumptable 00404675 case 12
.text:004049C1                 jmp     short loc_404960
.text:004049C3 ; ---------------------------------------------------------------------------
.text:004049C3
.text:004049C3 loc_4049C3:                             ; CODE XREF: sub_404570+105↑j
.text:004049C3                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:004049C3                 mov     dl, 72h ; 'r'   ; jumptable 00404675 case 13
.text:004049C5                 jmp     short loc_404974
.text:004049C7 ; ---------------------------------------------------------------------------
.text:004049C7
.text:004049C7 loc_4049C7:                             ; CODE XREF: sub_404570+105↑j
.text:004049C7                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:004049C7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404675 case 39
.text:004049CC                 jz      short loc_40497B ; jumptable 00404D42 cases 91,92,94,96,124
.text:004049CE                 cmp     [esp+4Ch+arg_10], 2
.text:004049D3                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:004049D3                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:004049D9                 mov     edx, [esp+4Ch+arg_4]
.text:004049DD                 cmp     [esp+4Ch+var_34], edx
.text:004049E1                 jnb     short loc_4049EF
.text:004049E3                 mov     ecx, [esp+4Ch+arg_0]
.text:004049E7                 mov     edi, [esp+4Ch+var_34]
.text:004049EB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004049EF
.text:004049EF loc_4049EF:                             ; CODE XREF: sub_404570+471↑j
.text:004049EF                 inc     [esp+4Ch+var_34]
.text:004049F3                 mov     eax, [esp+4Ch+arg_4]
.text:004049F7                 cmp     [esp+4Ch+var_34], eax
.text:004049FB                 jnb     short loc_404A09
.text:004049FD                 mov     esi, [esp+4Ch+arg_0]
.text:00404A01                 mov     edx, [esp+4Ch+var_34]
.text:00404A05                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:00404A09
.text:00404A09 loc_404A09:                             ; CODE XREF: sub_404570+48B↑j
.text:00404A09                 inc     [esp+4Ch+var_34]
.text:00404A0D                 mov     edi, [esp+4Ch+arg_4]
.text:00404A11                 cmp     [esp+4Ch+var_34], edi
.text:00404A15                 jnb     short loc_404A23
.text:00404A17                 mov     ecx, [esp+4Ch+arg_0]
.text:00404A1B                 mov     eax, [esp+4Ch+var_34]
.text:00404A1F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404A23
.text:00404A23 loc_404A23:                             ; CODE XREF: sub_404570+4A5↑j
.text:00404A23                                         ; sub_404570+5C4↓j ...
.text:00404A23                 inc     [esp+4Ch+var_34]
.text:00404A27                 jmp     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404A27                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404A2C ; ---------------------------------------------------------------------------
.text:00404A2C
.text:00404A2C loc_404A2C:                             ; CODE XREF: sub_404570+105↑j
.text:00404A2C                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404A2C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404675 case 63
.text:00404A31                 jz      loc_40497B      ; jumptable 00404D42 cases 91,92,94,96,124
.text:00404A37                 cmp     [esp+4Ch+arg_10], 3
.text:00404A3C                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404A3C                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404A42                 lea     edx, [ebp+2]
.text:00404A45                 cmp     edx, [esp+4Ch+arg_C]
.text:00404A49                 jnb     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404A49                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404A4F                 mov     esi, [esp+4Ch+Str]
.text:00404A53                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404A58                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404A58                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404A5E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404A63                 movsx   eax, cl
.text:00404A66                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404A69                 cmp     eax, 1Dh
.text:00404A6C                 ja      def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404A6C                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404A72                 jmp     ds:jpt_404A72[eax*4] ; switch jump
.text:00404A72 ; ---------------------------------------------------------------------------
.text:00404A79                 align 4
.text:00404A7C jpt_404A72      dd offset loc_404AF4    ; DATA XREF: sub_404570+502↑r
.text:00404A7C                 dd offset def_404A72    ; jump table for switch statement
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset def_404A72
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset loc_404AF4
.text:00404A7C                 dd offset loc_404AF4
.text:00404AF4 ; ---------------------------------------------------------------------------
.text:00404AF4
.text:00404AF4 loc_404AF4:                             ; CODE XREF: sub_404570+502↑j
.text:00404AF4                                         ; DATA XREF: sub_404570:jpt_404A72↑o
.text:00404AF4                 mov     ebp, edx        ; jumptable 00404A72 cases 33,39-41,45,47,60-62
.text:00404AF6                 mov     bl, cl
.text:00404AF8                 mov     edx, [esp+4Ch+arg_4]
.text:00404AFC                 cmp     [esp+4Ch+var_34], edx
.text:00404B00                 jnb     short loc_404B0E
.text:00404B02                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B06                 mov     edi, [esp+4Ch+var_34]
.text:00404B0A                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:00404B0E
.text:00404B0E loc_404B0E:                             ; CODE XREF: sub_404570+590↑j
.text:00404B0E                 inc     [esp+4Ch+var_34]
.text:00404B12                 mov     eax, [esp+4Ch+arg_4]
.text:00404B16                 cmp     [esp+4Ch+var_34], eax
.text:00404B1A                 jnb     short loc_404B28
.text:00404B1C                 mov     edx, [esp+4Ch+arg_0]
.text:00404B20                 mov     esi, [esp+4Ch+var_34]
.text:00404B24                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404B28
.text:00404B28 loc_404B28:                             ; CODE XREF: sub_404570+5AA↑j
.text:00404B28                 inc     [esp+4Ch+var_34]
.text:00404B2C                 mov     edi, [esp+4Ch+arg_4]
.text:00404B30                 cmp     [esp+4Ch+var_34], edi
.text:00404B34                 jnb     loc_404A23
.text:00404B3A                 mov     eax, [esp+4Ch+arg_0]
.text:00404B3E                 mov     ecx, [esp+4Ch+var_34]
.text:00404B42                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404B46                 jmp     loc_404A23
.text:00404B46 ; ---------------------------------------------------------------------------
.text:00404B4B                 align 10h
.text:00404B50
.text:00404B50 def_404675:                             ; CODE XREF: sub_404570+FF↑j
.text:00404B50                                         ; sub_404570+105↑j
.text:00404B50                                         ; DATA XREF: ...
.text:00404B50                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404675 default case, cases 1-6,14-31,64
.text:00404B55                 jz      loc_404C80
.text:00404B5B                 mov     [esp+4Ch+var_28], 1
.text:00404B63                 mov     esi, ds:__mb_cur_max
.text:00404B69                 movzx   edx, bl
.text:00404B6C                 cmp     dword ptr [esi], 1
.text:00404B6F                 jz      loc_404C64
.text:00404B75                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404B7D                 mov     [esp+4Ch+C], edx ; C
.text:00404B80                 call    _isctype
.text:00404B85
.text:00404B85 loc_404B85:                             ; CODE XREF: sub_404570+705↓j
.text:00404B85                 test    eax, eax
.text:00404B87                 setnz   [esp+4Ch+var_29]
.text:00404B8C
.text:00404B8C loc_404B8C:                             ; CODE XREF: sub_404570+7A5↓j
.text:00404B8C                 cmp     [esp+4Ch+var_21], 0
.text:00404B91                 lea     eax, [ebp+1]
.text:00404B94                 jz      loc_404930
.text:00404B9A                 cmp     [esp+4Ch+var_29], 0
.text:00404B9F                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404B9F                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404BA5
.text:00404BA5 loc_404BA5:                             ; CODE XREF: sub_404570+7AB↓j
.text:00404BA5                 mov     eax, [esp+4Ch+var_28]
.text:00404BA9                 lea     edx, [eax+ebp]
.text:00404BAC                 lea     esi, [esi+0]
.text:00404BB0
.text:00404BB0 loc_404BB0:                             ; CODE XREF: sub_404570+6EF↓j
.text:00404BB0                 cmp     [esp+4Ch+var_21], 0
.text:00404BB5                 jz      short loc_404C30
.text:00404BB7                 cmp     [esp+4Ch+var_29], 0
.text:00404BBC                 jnz     short loc_404C30
.text:00404BBE                 mov     edi, [esp+4Ch+arg_4]
.text:00404BC2                 cmp     [esp+4Ch+var_34], edi
.text:00404BC6                 jnb     short loc_404BD4
.text:00404BC8                 mov     esi, [esp+4Ch+arg_0]
.text:00404BCC                 mov     eax, [esp+4Ch+var_34]
.text:00404BD0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404BD4
.text:00404BD4 loc_404BD4:                             ; CODE XREF: sub_404570+656↑j
.text:00404BD4                 inc     [esp+4Ch+var_34]
.text:00404BD8                 mov     ecx, [esp+4Ch+arg_4]
.text:00404BDC                 cmp     [esp+4Ch+var_34], ecx
.text:00404BE0                 jnb     short loc_404BF5
.text:00404BE2                 mov     cl, bl
.text:00404BE4                 mov     esi, [esp+4Ch+arg_0]
.text:00404BE8                 mov     edi, [esp+4Ch+var_34]
.text:00404BEC                 shr     cl, 6
.text:00404BEF                 add     cl, 30h ; '0'
.text:00404BF2                 mov     [edi+esi], cl
.text:00404BF5
.text:00404BF5 loc_404BF5:                             ; CODE XREF: sub_404570+670↑j
.text:00404BF5                 inc     [esp+4Ch+var_34]
.text:00404BF9                 mov     edi, [esp+4Ch+arg_4]
.text:00404BFD                 cmp     [esp+4Ch+var_34], edi
.text:00404C01                 jnb     short loc_404C19
.text:00404C03                 mov     cl, bl
.text:00404C05                 mov     esi, [esp+4Ch+arg_0]
.text:00404C09                 shr     cl, 3
.text:00404C0C                 mov     edi, [esp+4Ch+var_34]
.text:00404C10                 and     cl, 7
.text:00404C13                 add     cl, 30h ; '0'
.text:00404C16                 mov     [edi+esi], cl
.text:00404C19
.text:00404C19 loc_404C19:                             ; CODE XREF: sub_404570+691↑j
.text:00404C19                 inc     [esp+4Ch+var_34]
.text:00404C1D                 and     bl, 7
.text:00404C20                 add     bl, 30h ; '0'
.text:00404C23                 lea     esi, [esi+0]
.text:00404C29                 lea     edi, [edi+0]
.text:00404C30
.text:00404C30 loc_404C30:                             ; CODE XREF: sub_404570+645↑j
.text:00404C30                                         ; sub_404570+64C↑j
.text:00404C30                 lea     eax, [ebp+1]
.text:00404C33                 cmp     edx, eax
.text:00404C35                 jbe     loc_404930
.text:00404C3B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404C3F                 cmp     [esp+4Ch+var_34], ebp
.text:00404C43                 jnb     short loc_404C50
.text:00404C45                 mov     ecx, [esp+4Ch+arg_0]
.text:00404C49                 mov     edi, [esp+4Ch+var_34]
.text:00404C4D                 mov     [edi+ecx], bl
.text:00404C50
.text:00404C50 loc_404C50:                             ; CODE XREF: sub_404570+6D3↑j
.text:00404C50                 inc     [esp+4Ch+var_34]
.text:00404C54                 mov     ebp, eax
.text:00404C56                 mov     eax, [esp+4Ch+Str]
.text:00404C5A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404C5F                 jmp     loc_404BB0
.text:00404C64 ; ---------------------------------------------------------------------------
.text:00404C64
.text:00404C64 loc_404C64:                             ; CODE XREF: sub_404570+5FF↑j
.text:00404C64                 mov     ecx, ds:_pctype
.text:00404C6A                 mov     edi, [ecx]
.text:00404C6C                 movzx   eax, word ptr [edi+edx*2]
.text:00404C70                 and     eax, 157h
.text:00404C75                 jmp     loc_404B85
.text:00404C75 ; ---------------------------------------------------------------------------
.text:00404C7A                 align 10h
.text:00404C80
.text:00404C80 loc_404C80:                             ; CODE XREF: sub_404570+5E5↑j
.text:00404C80                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404C85                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404C8D                 mov     [esp+4Ch+var_28], 0
.text:00404C95                 mov     [esp+4Ch+var_29], 1
.text:00404C9A                 jz      loc_404E2C
.text:00404CA0
.text:00404CA0 loc_404CA0:                             ; CODE XREF: sub_404570+8CC↓j
.text:00404CA0                 mov     ecx, [esp+4Ch+arg_C]
.text:00404CA4                 lea     edx, [esp+4Ch+var_18]
.text:00404CA8                 mov     edi, [esp+4Ch+Str]
.text:00404CAC                 mov     [esp+4Ch+State], edx ; State
.text:00404CB0                 lea     esi, [esp+4Ch+var_18._State]
.text:00404CB4                 sub     ecx, ebp
.text:00404CB6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404CBA                 add     edi, ebp
.text:00404CBC                 mov     [esp+4Ch+var_30], edi
.text:00404CC0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404CC4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404CC7                 call    mbrtowc
.text:00404CCC                 test    eax, eax
.text:00404CCE                 mov     edi, eax
.text:00404CD0                 jz      short loc_404D10
.text:00404CD2                 cmp     eax, 0FFFFFFFFh
.text:00404CD5                 jz      loc_404E22
.text:00404CDB                 cmp     eax, 0FFFFFFFEh
.text:00404CDE                 jz      loc_404DE2
.text:00404CE4                 cmp     [esp+4Ch+arg_10], 1
.text:00404CE9                 jz      short loc_404D20
.text:00404CEB
.text:00404CEB loc_404CEB:                             ; CODE XREF: sub_404570+7B9↓j
.text:00404CEB                                         ; sub_404570+86D↓j
.text:00404CEB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404CF0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404CF8                 mov     [esp+4Ch+C], ecx ; C
.text:00404CFB                 call    iswctype
.text:00404D00                 test    eax, eax
.text:00404D02                 jnz     short loc_404D09
.text:00404D04                 mov     [esp+4Ch+var_29], 0
.text:00404D09
.text:00404D09 loc_404D09:                             ; CODE XREF: sub_404570+792↑j
.text:00404D09                 mov     [esp+4Ch+var_28], edi
.text:00404D0D                 lea     esi, [esi+0]
.text:00404D10
.text:00404D10 loc_404D10:                             ; CODE XREF: sub_404570+760↑j
.text:00404D10                                         ; sub_404570+87B↓j ...
.text:00404D10                 cmp     [esp+4Ch+var_28], 1
.text:00404D15                 jbe     loc_404B8C
.text:00404D1B                 jmp     loc_404BA5
.text:00404D20 ; ---------------------------------------------------------------------------
.text:00404D20
.text:00404D20 loc_404D20:                             ; CODE XREF: sub_404570+779↑j
.text:00404D20                 cmp     [esp+4Ch+arg_10], eax
.text:00404D24                 mov     edx, 1
.text:00404D29                 jnb     short loc_404CEB
.text:00404D2B
.text:00404D2B loc_404D2B:                             ; CODE XREF: sub_404570+867↓j
.text:00404D2B                 mov     ecx, [esp+4Ch+Str]
.text:00404D2F                 lea     esi, [edx+ebp]
.text:00404D32                 movsx   eax, byte ptr [esi+ecx]
.text:00404D36                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404D39                 cmp     eax, 21h
.text:00404D3C                 ja      def_404D42      ; jumptable 00404D42 default case, cases 93,95,97-123
.text:00404D42                 jmp     ds:jpt_404D42[eax*4] ; switch jump
.text:00404D42 ; ---------------------------------------------------------------------------
.text:00404D49                 align 4
.text:00404D4C jpt_404D42      dd offset loc_40497B    ; DATA XREF: sub_404570+7D2↑r
.text:00404D4C                 dd offset loc_40497B    ; jump table for switch statement
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset loc_40497B
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset loc_40497B
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset def_404D42
.text:00404D4C                 dd offset loc_40497B
.text:00404DD4 ; ---------------------------------------------------------------------------
.text:00404DD4
.text:00404DD4 def_404D42:                             ; CODE XREF: sub_404570+7CC↑j
.text:00404DD4                                         ; sub_404570+7D2↑j
.text:00404DD4                                         ; DATA XREF: ...
.text:00404DD4                 inc     edx             ; jumptable 00404D42 default case, cases 93,95,97-123
.text:00404DD5                 cmp     edx, edi
.text:00404DD7                 jb      loc_404D2B
.text:00404DDD                 jmp     loc_404CEB
.text:00404DE2 ; ---------------------------------------------------------------------------
.text:00404DE2
.text:00404DE2 loc_404DE2:                             ; CODE XREF: sub_404570+76E↑j
.text:00404DE2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404DE6                 mov     [esp+4Ch+var_29], 0
.text:00404DEB                 jnb     loc_404D10
.text:00404DF1                 mov     eax, [esp+4Ch+var_30]
.text:00404DF5                 cmp     byte ptr [eax], 0
.text:00404DF8                 jz      loc_404D10
.text:00404DFE
.text:00404DFE loc_404DFE:                             ; CODE XREF: sub_404570+8AB↓j
.text:00404DFE                 inc     [esp+4Ch+var_28]
.text:00404E02                 mov     esi, [esp+4Ch+var_28]
.text:00404E06                 lea     eax, [esi+ebp]
.text:00404E09                 cmp     eax, [esp+4Ch+arg_C]
.text:00404E0D                 jnb     loc_404D10
.text:00404E13                 mov     edi, [esp+4Ch+Str]
.text:00404E17                 cmp     byte ptr [eax+edi], 0
.text:00404E1B                 jnz     short loc_404DFE
.text:00404E1D                 jmp     loc_404D10
.text:00404E22 ; ---------------------------------------------------------------------------
.text:00404E22
.text:00404E22 loc_404E22:                             ; CODE XREF: sub_404570+765↑j
.text:00404E22                 mov     [esp+4Ch+var_29], 0
.text:00404E27                 jmp     loc_404D10
.text:00404E2C ; ---------------------------------------------------------------------------
.text:00404E2C
.text:00404E2C loc_404E2C:                             ; CODE XREF: sub_404570+72A↑j
.text:00404E2C                 mov     edx, [esp+4Ch+Str]
.text:00404E30                 mov     [esp+4Ch+C], edx ; Str
.text:00404E33                 call    strlen
.text:00404E38                 mov     [esp+4Ch+arg_C], eax
.text:00404E3C                 jmp     loc_404CA0
.text:00404E41 ; ---------------------------------------------------------------------------
.text:00404E41
.text:00404E41 loc_404E41:                             ; CODE XREF: sub_404570+105↑j
.text:00404E41                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404E41                 mov     dl, bl          ; jumptable 00404675 case 92
.text:00404E43                 jmp     loc_404974
.text:00404E48 ; ---------------------------------------------------------------------------
.text:00404E48
.text:00404E48 loc_404E48:                             ; CODE XREF: sub_404570+105↑j
.text:00404E48                                         ; sub_404570+902↓j
.text:00404E48                                         ; DATA XREF: ...
.text:00404E48                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404675 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404E4D                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404E4D                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404E53                 jmp     loc_40497B      ; jumptable 00404D42 cases 91,92,94,96,124
.text:00404E58 ; ---------------------------------------------------------------------------
.text:00404E58
.text:00404E58 loc_404E58:                             ; CODE XREF: sub_404570+105↑j
.text:00404E58                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404E58                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404675 cases 123,125
.text:00404E5D                 jz      short loc_404E74
.text:00404E5F                 cmp     [esp+4Ch+arg_C], 1
.text:00404E64
.text:00404E64 loc_404E64:                             ; CODE XREF: sub_404570+90C↓j
.text:00404E64                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404E64                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404E6A
.text:00404E6A loc_404E6A:                             ; CODE XREF: sub_404570+105↑j
.text:00404E6A                                         ; DATA XREF: sub_404570:jpt_404675↑o
.text:00404E6A                 test    ebp, ebp        ; jumptable 00404675 cases 35,126
.text:00404E6C                 jnz     def_404A72      ; jumptable 00404675 cases 37,43-58,65-90,93,95,97-122
.text:00404E6C                                         ; jumptable 00404A72 default case, cases 34-38,42-44,46,48-59
.text:00404E72                 jmp     short loc_404E48 ; jumptable 00404675 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404E74 ; ---------------------------------------------------------------------------
.text:00404E74
.text:00404E74 loc_404E74:                             ; CODE XREF: sub_404570+8ED↑j
.text:00404E74                 mov     esi, [esp+4Ch+Str]
.text:00404E78                 cmp     byte ptr [esi+1], 0
.text:00404E7C                 jmp     short loc_404E64
.text:00404E7E ; ---------------------------------------------------------------------------
.text:00404E7E
.text:00404E7E loc_404E7E:                             ; CODE XREF: sub_404570:loc_40460F↑j
.text:00404E7E                 test    ebp, ebp
.text:00404E80                 jnz     short loc_404E8D
.text:00404E82                 cmp     [esp+4Ch+arg_10], 1
.text:00404E87                 jz      loc_40497B      ; jumptable 00404D42 cases 91,92,94,96,124
.text:00404E8D
.text:00404E8D loc_404E8D:                             ; CODE XREF: sub_404570+910↑j
.text:00404E8D                 mov     esi, [esp+4Ch+var_1C]
.text:00404E91                 test    esi, esi
.text:00404E93                 jz      short loc_404EC8
.text:00404E95                 mov     edi, [esp+4Ch+var_1C]
.text:00404E99                 movzx   eax, byte ptr [edi]
.text:00404E9C                 test    al, al
.text:00404E9E                 jz      short loc_404EC8
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_404570+956↓j
.text:00404EA0                 mov     ebp, [esp+4Ch+arg_4]
.text:00404EA4                 cmp     [esp+4Ch+var_34], ebp
.text:00404EA8                 jnb     short loc_404EB5
.text:00404EAA                 mov     ecx, [esp+4Ch+arg_0]
.text:00404EAE                 mov     ebx, [esp+4Ch+var_34]
.text:00404EB2                 mov     [ebx+ecx], al
.text:00404EB5
.text:00404EB5 loc_404EB5:                             ; CODE XREF: sub_404570+938↑j
.text:00404EB5                 inc     [esp+4Ch+var_1C]
.text:00404EB9                 inc     [esp+4Ch+var_34]
.text:00404EBD                 mov     edx, [esp+4Ch+var_1C]
.text:00404EC1                 movzx   eax, byte ptr [edx]
.text:00404EC4                 test    al, al
.text:00404EC6                 jnz     short loc_404EA0
.text:00404EC8
.text:00404EC8 loc_404EC8:                             ; CODE XREF: sub_404570+923↑j
.text:00404EC8                                         ; sub_404570+92E↑j
.text:00404EC8                 mov     eax, [esp+4Ch+arg_4]
.text:00404ECC                 cmp     [esp+4Ch+var_34], eax
.text:00404ED0                 jnb     short loc_404EDE
.text:00404ED2                 mov     edi, [esp+4Ch+arg_0]
.text:00404ED6                 mov     esi, [esp+4Ch+var_34]
.text:00404EDA                 mov     byte ptr [esi+edi], 0
.text:00404EDE
.text:00404EDE loc_404EDE:                             ; CODE XREF: sub_404570+960↑j
.text:00404EDE                 mov     eax, [esp+4Ch+var_34]
.text:00404EE2                 jmp     loc_4049AF
.text:00404EE7 ; ---------------------------------------------------------------------------
.text:00404EE7
.text:00404EE7 loc_404EE7:                             ; CODE XREF: sub_404570+95↑j
.text:00404EE7                 mov     ebx, [esp+4Ch+Str]
.text:00404EEB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404EF0                 jmp     loc_40460F
.text:00404EF5 ; ---------------------------------------------------------------------------
.text:00404EF5
.text:00404EF5 loc_404EF5:                             ; CODE XREF: sub_404570+3D↑j
.text:00404EF5                                         ; DATA XREF: sub_404570:jpt_4045AD↑o
.text:00404EF5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 004045AD case 2
.text:00404EF9                 cmp     [esp+4Ch+var_34], edx
.text:00404EFD                 jnb     short loc_404F06
.text:00404EFF                 mov     ecx, [esp+4Ch+arg_0]
.text:00404F03                 mov     byte ptr [ecx], 27h ; '''
.text:00404F06
.text:00404F06 loc_404F06:                             ; CODE XREF: sub_404570+98D↑j
.text:00404F06                 mov     [esp+4Ch+var_34], 1
.text:00404F0E                 mov     [esp+4Ch+var_1C], 40455Eh
.text:00404F16                 jmp     loc_4045F6
.text:00404F1B ; ---------------------------------------------------------------------------
.text:00404F1B
.text:00404F1B loc_404F1B:                             ; CODE XREF: sub_404570+3D↑j
.text:00404F1B                                         ; DATA XREF: sub_404570:jpt_4045AD↑o
.text:00404F1B                 mov     [esp+4Ch+var_21], 1 ; jumptable 004045AD case 4
.text:00404F20                 jmp     def_4045AD      ; jumptable 004045AD default case, cases 0,1
.text:00404F25 ; ---------------------------------------------------------------------------
.text:00404F25
.text:00404F25 loc_404F25:                             ; CODE XREF: sub_404570+3D↑j
.text:00404F25                                         ; DATA XREF: sub_404570:jpt_4045AD↑o
.text:00404F25                 mov     [esp+4Ch+C], 404560h ; jumptable 004045AD cases 5,6
.text:00404F2C                 call    ds:libintl_gettext
.text:00404F32                 cmp     eax, 404560h
.text:00404F37                 mov     edi, eax
.text:00404F39                 jz      short loc_404FB0
.text:00404F3B
.text:00404F3B loc_404F3B:                             ; CODE XREF: sub_404570+A45↓j
.text:00404F3B                                         ; sub_404570+A4C↓j
.text:00404F3B                 mov     [esp+4Ch+C], 40455Eh
.text:00404F42                 call    ds:libintl_gettext
.text:00404F48                 cmp     eax, 40455Eh
.text:00404F4D                 mov     edx, eax
.text:00404F4F                 jz      short loc_404FA2
.text:00404F51
.text:00404F51 loc_404F51:                             ; CODE XREF: sub_404570+A37↓j
.text:00404F51                                         ; sub_404570+A3E↓j
.text:00404F51                 mov     [esp+4Ch+var_1C], edi
.text:00404F55                 cmp     byte ptr [edi], 0
.text:00404F58                 jz      short loc_404F88
.text:00404F5A
.text:00404F5A loc_404F5A:                             ; CODE XREF: sub_404570+A16↓j
.text:00404F5A                 mov     ecx, [esp+4Ch+arg_4]
.text:00404F5E                 cmp     [esp+4Ch+var_34], ecx
.text:00404F62                 jnb     short loc_404F77
.text:00404F64                 mov     ebp, [esp+4Ch+var_1C]
.text:00404F68                 mov     edi, [esp+4Ch+arg_0]
.text:00404F6C                 mov     esi, [esp+4Ch+var_34]
.text:00404F70                 movzx   ebx, byte ptr [ebp+0]
.text:00404F74                 mov     [esi+edi], bl
.text:00404F77
.text:00404F77 loc_404F77:                             ; CODE XREF: sub_404570+9F2↑j
.text:00404F77                 inc     [esp+4Ch+var_1C]
.text:00404F7B                 inc     [esp+4Ch+var_34]
.text:00404F7F                 mov     eax, [esp+4Ch+var_1C]
.text:00404F83                 cmp     byte ptr [eax], 0
.text:00404F86                 jnz     short loc_404F5A
.text:00404F88
.text:00404F88 loc_404F88:                             ; CODE XREF: sub_404570+9E8↑j
.text:00404F88                 mov     [esp+4Ch+var_21], 1
.text:00404F8D                 mov     [esp+4Ch+var_1C], edx
.text:00404F91                 mov     [esp+4Ch+C], edx ; Str
.text:00404F94                 call    strlen
.text:00404F99                 mov     [esp+4Ch+var_20], eax
.text:00404F9D                 jmp     def_4045AD      ; jumptable 004045AD default case, cases 0,1
.text:00404FA2 ; ---------------------------------------------------------------------------
.text:00404FA2
.text:00404FA2 loc_404FA2:                             ; CODE XREF: sub_404570+9DF↑j
.text:00404FA2                 cmp     [esp+4Ch+arg_10], 6
.text:00404FA7                 jnz     short loc_404F51
.text:00404FA9                 mov     edx, offset asc_40455C ; "\"'`"
.text:00404FAE                 jmp     short loc_404F51
.text:00404FB0 ; ---------------------------------------------------------------------------
.text:00404FB0
.text:00404FB0 loc_404FB0:                             ; CODE XREF: sub_404570+9C9↑j
.text:00404FB0                 cmp     [esp+4Ch+arg_10], 6
.text:00404FB5                 jnz     short loc_404F3B
.text:00404FB7                 mov     edi, offset asc_40455C ; "\"'`"
.text:00404FBC                 jmp     loc_404F3B
.text:00404FBC sub_404570      endp
.text:00404FBC
.text:00404FC1 ; ---------------------------------------------------------------------------
.text:00404FC1                 jmp     short loc_404FD0
.text:00404FC1 ; ---------------------------------------------------------------------------
.text:00404FC3                 align 10h
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: .text:00404FC1↑j
.text:00404FD0                 sub     esp, 0Ch
.text:00404FD3                 mov     [esp+4], ebx
.text:00404FD7                 mov     [esp+8], esi
.text:00404FDB                 call    _errno
.text:00404FE0                 mov     esi, [eax]
.text:00404FE2                 mov     dword ptr [esp], 24h ; '$'
.text:00404FE9                 call    sub_4041C0
.text:00404FEE                 mov     edx, [esp+10h]
.text:00404FF2                 mov     ebx, eax
.text:00404FF4                 test    edx, edx
.text:00404FF6                 jz      short loc_405041
.text:00404FF8
.text:00404FF8 loc_404FF8:                             ; CODE XREF: .text:00405046↓j
.text:00404FF8                 mov     ecx, [edx]
.text:00404FFA                 mov     [ebx], ecx
.text:00404FFC                 mov     ecx, [edx+4]
.text:00404FFF                 mov     [ebx+4], ecx
.text:00405002                 mov     ecx, [edx+8]
.text:00405005                 mov     [ebx+8], ecx
.text:00405008                 mov     ecx, [edx+0Ch]
.text:0040500B                 mov     [ebx+0Ch], ecx
.text:0040500E                 mov     ecx, [edx+10h]
.text:00405011                 mov     [ebx+10h], ecx
.text:00405014                 mov     ecx, [edx+14h]
.text:00405017                 mov     [ebx+14h], ecx
.text:0040501A                 mov     ecx, [edx+18h]
.text:0040501D                 mov     [ebx+18h], ecx
.text:00405020                 mov     ecx, [edx+1Ch]
.text:00405023                 mov     [ebx+1Ch], ecx
.text:00405026                 mov     ecx, [edx+20h]
.text:00405029                 mov     [ebx+20h], ecx
.text:0040502C                 call    _errno
.text:00405031                 mov     [eax], esi
.text:00405033                 mov     esi, [esp+8]
.text:00405037                 mov     eax, ebx
.text:00405039                 mov     ebx, [esp+4]
.text:0040503D                 add     esp, 0Ch
.text:00405040                 retn
.text:00405041 ; ---------------------------------------------------------------------------
.text:00405041
.text:00405041 loc_405041:                             ; CODE XREF: .text:00404FF6↑j
.text:00405041                 mov     edx, offset dword_4081E0
.text:00405046                 jmp     short loc_404FF8
.text:00405046 ; ---------------------------------------------------------------------------
.text:00405048                 align 10h
.text:00405050                 mov     eax, [esp+4]
.text:00405054                 test    eax, eax
.text:00405056                 jz      short loc_405060
.text:00405058
.text:00405058 loc_405058:                             ; CODE XREF: .text:00405065↓j
.text:00405058                 mov     eax, [eax]
.text:0040505A                 retn
.text:0040505A ; ---------------------------------------------------------------------------
.text:0040505B                 align 10h
.text:00405060
.text:00405060 loc_405060:                             ; CODE XREF: .text:00405056↑j
.text:00405060                 mov     eax, offset dword_4081E0
.text:00405065                 jmp     short loc_405058
.text:00405065 ; ---------------------------------------------------------------------------
.text:00405067                 align 10h
.text:00405070                 mov     edx, [esp+4]
.text:00405074                 test    edx, edx
.text:00405076                 jz      short loc_405080
.text:00405078
.text:00405078 loc_405078:                             ; CODE XREF: .text:00405085↓j
.text:00405078                 mov     ecx, [esp+8]
.text:0040507C                 mov     [edx], ecx
.text:0040507E                 retn
.text:0040507E ; ---------------------------------------------------------------------------
.text:0040507F                 align 10h
.text:00405080
.text:00405080 loc_405080:                             ; CODE XREF: .text:00405076↑j
.text:00405080                 mov     edx, offset dword_4081E0
.text:00405085                 jmp     short loc_405078
.text:00405085 ; ---------------------------------------------------------------------------
.text:00405087                 align 10h
.text:00405090                 sub     esp, 8
.text:00405093                 mov     eax, [esp+0Ch]
.text:00405097                 movzx   ecx, byte ptr [esp+10h]
.text:0040509C                 mov     [esp], ebx
.text:0040509F                 mov     ebx, [esp+14h]
.text:004050A3                 mov     [esp+4], esi
.text:004050A7                 mov     dl, cl
.text:004050A9                 shr     dl, 5
.text:004050AC                 movzx   edx, dl
.text:004050AF                 shl     edx, 2
.text:004050B2                 test    eax, eax
.text:004050B4                 lea     esi, [edx+eax+4]
.text:004050B8                 jz      short loc_4050E0
.text:004050BA
.text:004050BA loc_4050BA:                             ; CODE XREF: .text:004050E6↓j
.text:004050BA                 mov     edx, [esi]
.text:004050BC                 and     ecx, 1Fh
.text:004050BF                 and     ebx, 1
.text:004050C2                 mov     eax, edx
.text:004050C4                 shr     eax, cl
.text:004050C6                 and     eax, 1
.text:004050C9                 xor     ebx, eax
.text:004050CB                 shl     ebx, cl
.text:004050CD                 xor     edx, ebx
.text:004050CF                 mov     [esi], edx
.text:004050D1                 mov     ebx, [esp]
.text:004050D4                 mov     esi, [esp+4]
.text:004050D8                 add     esp, 8
.text:004050DB                 retn
.text:004050DB ; ---------------------------------------------------------------------------
.text:004050DC                 align 10h
.text:004050E0
.text:004050E0 loc_4050E0:                             ; CODE XREF: .text:004050B8↑j
.text:004050E0                 lea     esi, dword_4081E4[edx]
.text:004050E6                 jmp     short loc_4050BA
.text:004050E6 ; ---------------------------------------------------------------------------
.text:004050E8                 align 10h
.text:004050F0                 sub     esp, 2Ch
.text:004050F3                 mov     [esp+24h], ebx
.text:004050F7                 mov     ebx, [esp+40h]
.text:004050FB                 mov     [esp+28h], esi
.text:004050FF                 test    ebx, ebx
.text:00405101                 jz      short loc_405150
.text:00405103
.text:00405103 loc_405103:                             ; CODE XREF: .text:00405155↓j
.text:00405103                 call    _errno
.text:00405108                 mov     esi, [eax]
.text:0040510A                 mov     [esp+14h], ebx
.text:0040510E                 mov     edx, [ebx]
.text:00405110                 mov     ecx, [esp+38h]
.text:00405114                 mov     ebx, [esp+3Ch]
.text:00405118                 mov     [esp+10h], edx
.text:0040511C                 mov     edx, [esp+34h]
.text:00405120                 mov     [esp+0Ch], ebx
.text:00405124                 mov     [esp+8], ecx
.text:00405128                 mov     [esp+4], edx
.text:0040512C                 mov     edx, [esp+30h]
.text:00405130                 mov     [esp], edx
.text:00405133                 call    sub_404570
.text:00405138                 mov     ebx, eax
.text:0040513A                 call    _errno
.text:0040513F                 mov     [eax], esi
.text:00405141                 mov     esi, [esp+28h]
.text:00405145                 mov     eax, ebx
.text:00405147                 mov     ebx, [esp+24h]
.text:0040514B                 add     esp, 2Ch
.text:0040514E                 retn
.text:0040514E ; ---------------------------------------------------------------------------
.text:0040514F                 align 10h
.text:00405150
.text:00405150 loc_405150:                             ; CODE XREF: .text:00405101↑j
.text:00405150                 mov     ebx, offset dword_4081E0
.text:00405155                 jmp     short loc_405103
.text:00405155 ; ---------------------------------------------------------------------------
.text:00405157                 align 10h
.text:00405160                 push    ebp
.text:00405161                 push    edi
.text:00405162                 push    esi
.text:00405163                 push    ebx
.text:00405164                 sub     esp, 2Ch
.text:00405167                 mov     ebp, [esp+48h]
.text:0040516B                 call    _errno
.text:00405170                 mov     edx, [eax]
.text:00405172                 test    ebp, ebp
.text:00405174                 mov     ebx, ebp
.text:00405176                 mov     [esp+28h], edx
.text:0040517A                 jz      loc_405230
.text:00405180
.text:00405180 loc_405180:                             ; CODE XREF: .text:00405235↓j
.text:00405180                 call    _errno
.text:00405185                 mov     edi, [eax]
.text:00405187                 mov     esi, ebp
.text:00405189                 mov     [esp+14h], ebx
.text:0040518D                 mov     ecx, [ebx]
.text:0040518F                 mov     dword ptr [esp], 0
.text:00405196                 mov     edx, [esp+44h]
.text:0040519A                 mov     dword ptr [esp+4], 0
.text:004051A2                 mov     eax, [esp+40h]
.text:004051A6                 mov     [esp+10h], ecx
.text:004051AA                 mov     [esp+0Ch], edx
.text:004051AE                 mov     [esp+8], eax
.text:004051B2                 call    sub_404570
.text:004051B7                 mov     ebx, eax
.text:004051B9                 call    _errno
.text:004051BE                 mov     [eax], edi
.text:004051C0                 lea     edi, [ebx+1]
.text:004051C3                 mov     [esp], edi
.text:004051C6                 call    sub_4041C0
.text:004051CB                 mov     [esp+24h], eax
.text:004051CF                 test    ebp, ebp
.text:004051D1                 jz      short loc_405222
.text:004051D3
.text:004051D3 loc_4051D3:                             ; CODE XREF: .text:00405227↓j
.text:004051D3                 call    _errno
.text:004051D8                 mov     ebp, [eax]
.text:004051DA                 mov     [esp+14h], esi
.text:004051DE                 mov     ecx, [esi]
.text:004051E0                 mov     [esp+4], edi
.text:004051E4                 mov     edx, [esp+44h]
.text:004051E8                 mov     esi, [esp+24h]
.text:004051EC                 mov     [esp+10h], ecx
.text:004051F0                 mov     eax, [esp+40h]
.text:004051F4                 mov     [esp+0Ch], edx
.text:004051F8                 mov     [esp], esi
.text:004051FB                 mov     [esp+8], eax
.text:004051FF                 call    sub_404570
.text:00405204                 call    _errno
.text:00405209                 mov     [eax], ebp
.text:0040520B                 call    _errno
.text:00405210                 mov     ebx, [esp+28h]
.text:00405214                 mov     [eax], ebx
.text:00405216                 mov     eax, [esp+24h]
.text:0040521A                 add     esp, 2Ch
.text:0040521D                 pop     ebx
.text:0040521E                 pop     esi
.text:0040521F                 pop     edi
.text:00405220                 pop     ebp
.text:00405221                 retn
.text:00405222 ; ---------------------------------------------------------------------------
.text:00405222
.text:00405222 loc_405222:                             ; CODE XREF: .text:004051D1↑j
.text:00405222                 mov     esi, offset dword_4081E0
.text:00405227                 jmp     short loc_4051D3
.text:00405227 ; ---------------------------------------------------------------------------
.text:00405229                 align 10h
.text:00405230
.text:00405230 loc_405230:                             ; CODE XREF: .text:0040517A↑j
.text:00405230                 mov     ebx, offset dword_4081E0
.text:00405235                 jmp     loc_405180
.text:00405235 ; ---------------------------------------------------------------------------
.text:0040523A                 align 10h
.text:00405240                 sub     esp, 1Ch
.text:00405243                 mov     edx, [esp+24h]
.text:00405247                 mov     dword ptr [esp+0Ch], offset dword_4081E0
.text:0040524F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405257                 mov     [esp+4], edx
.text:0040525B                 mov     edx, [esp+20h]
.text:0040525F                 mov     [esp], edx
.text:00405262                 call    sub_4056B0
.text:00405267                 add     esp, 1Ch
.text:0040526A                 retn
.text:0040526A ; ---------------------------------------------------------------------------
.text:0040526B                 align 10h
.text:00405270                 sub     esp, 1Ch
.text:00405273                 mov     edx, [esp+20h]
.text:00405277                 mov     dword ptr [esp+0Ch], offset dword_4081E0
.text:0040527F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405287                 mov     [esp+4], edx
.text:0040528B                 mov     dword ptr [esp], 0
.text:00405292                 call    sub_4056B0
.text:00405297                 add     esp, 1Ch
.text:0040529A                 retn
.text:0040529A ; ---------------------------------------------------------------------------
.text:0040529B                 align 10h
.text:004052A0
.text:004052A0 ; =============== S U B R O U T I N E =======================================
.text:004052A0
.text:004052A0
.text:004052A0 ; int __cdecl sub_4052A0(int, int, char *)
.text:004052A0 sub_4052A0      proc near               ; CODE XREF: .text:0040446A↑p
.text:004052A0                                         ; sub_404480+1A↑p
.text:004052A0
.text:004052A0 var_BC          = dword ptr -0BCh
.text:004052A0 var_B8          = dword ptr -0B8h
.text:004052A0 var_B4          = dword ptr -0B4h
.text:004052A0 var_B0          = dword ptr -0B0h
.text:004052A0 var_AC          = dword ptr -0ACh
.text:004052A0 var_A8          = dword ptr -0A8h
.text:004052A0 var_A4          = dword ptr -0A4h
.text:004052A0 var_A0          = dword ptr -0A0h
.text:004052A0 var_9C          = dword ptr -9Ch
.text:004052A0 var_98          = dword ptr -98h
.text:004052A0 var_94          = dword ptr -94h
.text:004052A0 var_90          = dword ptr -90h
.text:004052A0 var_8C          = dword ptr -8Ch
.text:004052A0 var_7C          = dword ptr -7Ch
.text:004052A0 var_78          = dword ptr -78h
.text:004052A0 var_74          = dword ptr -74h
.text:004052A0 var_70          = dword ptr -70h
.text:004052A0 var_6C          = dword ptr -6Ch
.text:004052A0 var_68          = dword ptr -68h
.text:004052A0 var_64          = dword ptr -64h
.text:004052A0 var_60          = dword ptr -60h
.text:004052A0 var_5C          = dword ptr -5Ch
.text:004052A0 var_4C          = dword ptr -4Ch
.text:004052A0 var_48          = dword ptr -48h
.text:004052A0 var_44          = dword ptr -44h
.text:004052A0 var_40          = dword ptr -40h
.text:004052A0 var_3C          = dword ptr -3Ch
.text:004052A0 var_38          = dword ptr -38h
.text:004052A0 var_34          = dword ptr -34h
.text:004052A0 var_30          = dword ptr -30h
.text:004052A0 var_2C          = dword ptr -2Ch
.text:004052A0 arg_0           = dword ptr  4
.text:004052A0 arg_4           = dword ptr  8
.text:004052A0 arg_8           = dword ptr  0Ch
.text:004052A0
.text:004052A0                 push    ebp
.text:004052A1                 xor     eax, eax
.text:004052A3                 mov     ecx, 8
.text:004052A8                 push    edi
.text:004052A9                 push    esi
.text:004052AA                 push    ebx
.text:004052AB                 sub     esp, 0ACh
.text:004052B1                 mov     ebp, [esp+0BCh+arg_4]
.text:004052B8                 cld
.text:004052B9                 lea     edi, [esp+0BCh+var_A8]
.text:004052BD                 mov     [esp+0BCh+var_AC], ebp
.text:004052C1                 rep stosd
.text:004052C3                 mov     eax, [esp+0BCh+var_8C]
.text:004052C7                 mov     edi, [esp+0BCh+var_AC]
.text:004052CB                 mov     esi, [esp+0BCh+var_A8]
.text:004052CF                 mov     [esp+0BCh+var_5C], eax
.text:004052D3                 mov     ebp, [esp+0BCh+var_A4]
.text:004052D7                 mov     eax, [esp+0BCh+var_AC]
.text:004052DB                 mov     [esp+0BCh+var_7C], edi
.text:004052DF                 mov     ecx, [esp+0BCh+var_94]
.text:004052E3                 mov     edi, [esp+0BCh+var_A0]
.text:004052E7                 mov     [esp+0BCh+var_78], esi
.text:004052EB                 mov     edx, [esp+0BCh+var_90]
.text:004052EF                 mov     esi, [esp+0BCh+var_9C]
.text:004052F3                 mov     [esp+0BCh+var_4C], eax
.text:004052F7                 mov     ebx, [esp+0BCh+var_98]
.text:004052FB                 mov     eax, [esp+0BCh+var_A8]
.text:004052FF                 mov     [esp+0BCh+var_74], ebp
.text:00405303                 mov     [esp+0BCh+var_70], edi
.text:00405307                 mov     [esp+0BCh+var_6C], esi
.text:0040530B                 mov     [esp+0BCh+var_68], ebx
.text:0040530F                 mov     [esp+0BCh+var_64], ecx
.text:00405313                 mov     [esp+0BCh+var_60], edx
.text:00405317                 mov     [esp+0BCh+var_48], eax
.text:0040531B                 mov     [esp+0BCh+var_44], ebp
.text:0040531F                 mov     [esp+0BCh+var_40], edi
.text:00405323                 mov     [esp+0BCh+var_3C], esi
.text:0040532A                 mov     [esp+0BCh+var_38], ebx
.text:00405331                 mov     ebx, [esp+0BCh+var_8C]
.text:00405335                 mov     [esp+0BCh+var_30], edx
.text:0040533C                 mov     edx, [esp+0BCh+arg_8]
.text:00405343                 mov     [esp+0BCh+var_34], ecx
.text:0040534A                 lea     ecx, [esp+0BCh+var_4C]
.text:0040534E                 mov     [esp+0BCh+var_B8], edx ; char *
.text:00405352                 mov     edx, [esp+0BCh+arg_0]
.text:00405359                 mov     [esp+0BCh+var_2C], ebx
.text:00405360                 mov     [esp+0BCh+var_B0], ecx ; int
.text:00405364                 mov     [esp+0BCh+var_B4], 0FFFFFFFFh ; int
.text:0040536C                 mov     [esp+0BCh+var_BC], edx ; int
.text:0040536F                 call    sub_4056B0
.text:00405374                 add     esp, 0ACh
.text:0040537A                 pop     ebx
.text:0040537B                 pop     esi
.text:0040537C                 pop     edi
.text:0040537D                 pop     ebp
.text:0040537E                 retn
.text:0040537E sub_4052A0      endp
.text:0040537E
.text:0040537E ; ---------------------------------------------------------------------------
.text:0040537F                 align 10h
.text:00405380                 push    ebp
.text:00405381                 xor     eax, eax
.text:00405383                 mov     ecx, 8
.text:00405388                 push    edi
.text:00405389                 push    esi
.text:0040538A                 push    ebx
.text:0040538B                 sub     esp, 0ACh
.text:00405391                 mov     edx, [esp+0C4h]
.text:00405398                 cld
.text:00405399                 lea     edi, [esp+14h]
.text:0040539D                 mov     [esp+10h], edx
.text:004053A1                 rep stosd
.text:004053A3                 mov     eax, [esp+30h]
.text:004053A7                 mov     ebp, [esp+10h]
.text:004053AB                 mov     edi, [esp+14h]
.text:004053AF                 mov     [esp+60h], eax
.text:004053B3                 mov     esi, [esp+20h]
.text:004053B7                 mov     eax, [esp+10h]
.text:004053BB                 mov     [esp+40h], ebp
.text:004053BF                 mov     ecx, [esp+28h]
.text:004053C3                 mov     ebp, [esp+18h]
.text:004053C7                 mov     [esp+44h], edi
.text:004053CB                 mov     edx, [esp+2Ch]
.text:004053CF                 mov     edi, [esp+1Ch]
.text:004053D3                 mov     [esp+70h], eax
.text:004053D7                 mov     ebx, [esp+24h]
.text:004053DB                 mov     eax, [esp+14h]
.text:004053DF                 mov     [esp+48h], ebp
.text:004053E3                 mov     [esp+4Ch], edi
.text:004053E7                 mov     [esp+50h], esi
.text:004053EB                 mov     [esp+54h], ebx
.text:004053EF                 mov     [esp+58h], ecx
.text:004053F3                 mov     [esp+5Ch], edx
.text:004053F7                 mov     [esp+74h], eax
.text:004053FB                 mov     [esp+78h], ebp
.text:004053FF                 mov     [esp+7Ch], edi
.text:00405403                 mov     [esp+80h], esi
.text:0040540A                 mov     [esp+84h], ebx
.text:00405411                 mov     esi, [esp+30h]
.text:00405415                 lea     ebx, [esp+70h]
.text:00405419                 mov     [esp+8Ch], edx
.text:00405420                 mov     edx, [esp+0C8h]
.text:00405427                 mov     [esp+88h], ecx
.text:0040542E                 mov     ecx, [esp+0CCh]
.text:00405435                 mov     [esp+4], edx
.text:00405439                 mov     edx, [esp+0C0h]
.text:00405440                 mov     [esp+90h], esi
.text:00405447                 mov     [esp+0Ch], ebx
.text:0040544B                 mov     [esp+8], ecx
.text:0040544F                 mov     [esp], edx
.text:00405452                 call    sub_4056B0
.text:00405457                 add     esp, 0ACh
.text:0040545D                 pop     ebx
.text:0040545E                 pop     esi
.text:0040545F                 pop     edi
.text:00405460                 pop     ebp
.text:00405461                 retn
.text:00405461 ; ---------------------------------------------------------------------------
.text:00405462                 align 10h
.text:00405470                 push    ebp
.text:00405471                 xor     eax, eax
.text:00405473                 mov     ecx, 8
.text:00405478                 push    edi
.text:00405479                 push    esi
.text:0040547A                 push    ebx
.text:0040547B                 sub     esp, 0ACh
.text:00405481                 mov     edi, [esp+0C0h]
.text:00405488                 cld
.text:00405489                 mov     [esp+10h], edi
.text:0040548D                 lea     edi, [esp+14h]
.text:00405491                 rep stosd
.text:00405493                 mov     eax, [esp+30h]
.text:00405497                 mov     esi, [esp+10h]
.text:0040549B                 mov     ebx, [esp+14h]
.text:0040549F                 mov     [esp+60h], eax
.text:004054A3                 mov     ebp, [esp+18h]
.text:004054A7                 mov     eax, [esp+10h]
.text:004054AB                 mov     [esp+40h], esi
.text:004054AF                 mov     edi, [esp+1Ch]
.text:004054B3                 mov     esi, [esp+20h]
.text:004054B7                 mov     [esp+44h], ebx
.text:004054BB                 mov     ecx, [esp+28h]
.text:004054BF                 mov     edx, [esp+2Ch]
.text:004054C3                 mov     [esp+70h], eax
.text:004054C7                 mov     ebx, [esp+24h]
.text:004054CB                 mov     eax, [esp+14h]
.text:004054CF                 mov     [esp+48h], ebp
.text:004054D3                 mov     [esp+4Ch], edi
.text:004054D7                 mov     [esp+50h], esi
.text:004054DB                 mov     [esp+54h], ebx
.text:004054DF                 mov     [esp+58h], ecx
.text:004054E3                 mov     [esp+5Ch], edx
.text:004054E7                 mov     [esp+74h], eax
.text:004054EB                 mov     [esp+78h], ebp
.text:004054EF                 mov     [esp+7Ch], edi
.text:004054F3                 mov     [esp+80h], esi
.text:004054FA                 mov     [esp+84h], ebx
.text:00405501                 mov     [esp+8Ch], edx
.text:00405508                 lea     edx, [esp+70h]
.text:0040550C                 mov     [esp+88h], ecx
.text:00405513                 mov     ecx, [esp+30h]
.text:00405517                 mov     [esp+0Ch], edx
.text:0040551B                 mov     edx, [esp+0C4h]
.text:00405522                 mov     [esp+90h], ecx
.text:00405529                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405531                 mov     [esp+4], edx
.text:00405535                 mov     dword ptr [esp], 0
.text:0040553C                 call    sub_4056B0
.text:00405541                 add     esp, 0ACh
.text:00405547                 pop     ebx
.text:00405548                 pop     esi
.text:00405549                 pop     edi
.text:0040554A                 pop     ebp
.text:0040554B                 retn
.text:0040554B ; ---------------------------------------------------------------------------
.text:0040554C                 align 10h
.text:00405550                 push    edi
.text:00405551                 push    esi
.text:00405552                 push    ebx
.text:00405553                 sub     esp, 40h
.text:00405556                 mov     edx, ds:dword_4081EC
.text:0040555C                 mov     ebx, ds:dword_4081E0
.text:00405562                 mov     esi, ds:dword_4081E8
.text:00405568                 mov     edi, ds:dword_4081E4
.text:0040556E                 mov     [esp+1Ch], edx
.text:00405572                 mov     ecx, ds:dword_4081F0
.text:00405578                 mov     edx, ds:dword_408200
.text:0040557E                 mov     [esp+10h], ebx
.text:00405582                 mov     ebx, ds:dword_4081F4
.text:00405588                 mov     [esp+30h], edx
.text:0040558C                 movzx   edx, byte ptr [esp+54h]
.text:00405591                 mov     [esp+18h], esi
.text:00405595                 mov     esi, ds:dword_4081FC
.text:0040559B                 mov     [esp+14h], edi
.text:0040559F                 mov     edi, ds:dword_4081F8
.text:004055A5                 mov     [esp+20h], ecx
.text:004055A9                 mov     cl, dl
.text:004055AB                 shr     cl, 5
.text:004055AE                 mov     [esp+24h], ebx
.text:004055B2                 movzx   ebx, cl
.text:004055B5                 mov     [esp+2Ch], esi
.text:004055B9                 lea     esi, [esp+10h]
.text:004055BD                 mov     [esp+28h], edi
.text:004055C1                 lea     edi, [esi+ebx*4]
.text:004055C4                 mov     ebx, edx
.text:004055C6                 mov     edx, [edi+4]
.text:004055C9                 and     ebx, 1Fh
.text:004055CC                 mov     cl, bl
.text:004055CE                 mov     eax, edx
.text:004055D0                 shr     eax, cl
.text:004055D2                 and     eax, 1
.text:004055D5                 xor     eax, 1
.text:004055D8                 shl     eax, cl
.text:004055DA                 xor     edx, eax
.text:004055DC                 mov     [edi+4], edx
.text:004055DF                 mov     edx, [esp+50h]
.text:004055E3                 mov     [esp+0Ch], esi
.text:004055E7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004055EF                 mov     [esp+4], edx
.text:004055F3                 mov     dword ptr [esp], 0
.text:004055FA                 call    sub_4056B0
.text:004055FF                 add     esp, 40h
.text:00405602                 pop     ebx
.text:00405603                 pop     esi
.text:00405604                 pop     edi
.text:00405605                 retn
.text:00405605 ; ---------------------------------------------------------------------------
.text:00405606                 align 10h
.text:00405610
.text:00405610 ; =============== S U B R O U T I N E =======================================
.text:00405610
.text:00405610
.text:00405610 ; int __cdecl sub_405610(char *)
.text:00405610 sub_405610      proc near               ; CODE XREF: sub_4040A0+64↑p
.text:00405610
.text:00405610 var_4C          = dword ptr -4Ch
.text:00405610 var_48          = dword ptr -48h
.text:00405610 var_44          = dword ptr -44h
.text:00405610 var_40          = dword ptr -40h
.text:00405610 var_3C          = dword ptr -3Ch
.text:00405610 var_38          = dword ptr -38h
.text:00405610 var_34          = dword ptr -34h
.text:00405610 var_30          = dword ptr -30h
.text:00405610 var_2C          = dword ptr -2Ch
.text:00405610 var_28          = dword ptr -28h
.text:00405610 var_24          = dword ptr -24h
.text:00405610 var_20          = dword ptr -20h
.text:00405610 var_1C          = dword ptr -1Ch
.text:00405610 arg_0           = dword ptr  4
.text:00405610
.text:00405610                 sub     esp, 4Ch
.text:00405613                 mov     ecx, ds:dword_4081E0
.text:00405619                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405621                 mov     edx, ds:dword_4081E4
.text:00405627                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040562E                 mov     [esp+4Ch+var_3C], ecx
.text:00405632                 mov     ecx, ds:dword_4081EC
.text:00405638                 mov     [esp+4Ch+var_38], edx
.text:0040563C                 mov     edx, ds:dword_4081E8
.text:00405642                 mov     [esp+4Ch+var_30], ecx
.text:00405646                 mov     ecx, ds:dword_4081F0
.text:0040564C                 mov     eax, edx
.text:0040564E                 shr     eax, 1Ah
.text:00405651                 and     eax, 1
.text:00405654                 xor     eax, 1
.text:00405657                 mov     [esp+4Ch+var_2C], ecx
.text:0040565B                 shl     eax, 1Ah
.text:0040565E                 mov     ecx, ds:dword_4081F4
.text:00405664                 xor     edx, eax
.text:00405666                 mov     [esp+4Ch+var_34], edx
.text:0040566A                 mov     edx, [esp+4Ch+arg_0]
.text:0040566E                 mov     [esp+4Ch+var_28], ecx
.text:00405672                 mov     ecx, ds:dword_4081F8
.text:00405678                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040567C                 mov     [esp+4Ch+var_24], ecx
.text:00405680                 mov     ecx, ds:dword_4081FC
.text:00405686                 mov     [esp+4Ch+var_20], ecx
.text:0040568A                 mov     ecx, ds:dword_408200
.text:00405690                 mov     [esp+4Ch+var_1C], ecx
.text:00405694                 lea     ecx, [esp+4Ch+var_3C]
.text:00405698                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040569C                 call    sub_4056B0
.text:004056A1                 add     esp, 4Ch
.text:004056A4                 retn
.text:004056A4 sub_405610      endp
.text:004056A4
.text:004056A4 ; ---------------------------------------------------------------------------
.text:004056A5                 align 10h
.text:004056B0
.text:004056B0 ; =============== S U B R O U T I N E =======================================
.text:004056B0
.text:004056B0
.text:004056B0 ; int __cdecl sub_4056B0(int, char *, int, int)
.text:004056B0 sub_4056B0      proc near               ; CODE XREF: .text:00405262↑p
.text:004056B0                                         ; .text:00405292↑p ...
.text:004056B0
.text:004056B0 Block           = dword ptr -2Ch
.text:004056B0 var_28          = dword ptr -28h
.text:004056B0 Str             = dword ptr -24h
.text:004056B0 var_20          = dword ptr -20h
.text:004056B0 var_1C          = dword ptr -1Ch
.text:004056B0 var_18          = dword ptr -18h
.text:004056B0 var_14          = dword ptr -14h
.text:004056B0 arg_0           = dword ptr  4
.text:004056B0 arg_4           = dword ptr  8
.text:004056B0 arg_8           = dword ptr  0Ch
.text:004056B0 arg_C           = dword ptr  10h
.text:004056B0
.text:004056B0                 push    ebp
.text:004056B1                 push    edi
.text:004056B2                 push    esi
.text:004056B3                 push    ebx
.text:004056B4                 sub     esp, 1Ch
.text:004056B7                 call    _errno
.text:004056BC                 mov     edx, [eax]
.text:004056BE                 mov     eax, [esp+2Ch+arg_0]
.text:004056C2                 mov     [esp+2Ch+var_14], edx
.text:004056C6                 test    eax, eax
.text:004056C8                 js      loc_40586A
.text:004056CE                 mov     eax, [esp+2Ch+arg_0]
.text:004056D2                 cmp     dword_407050, eax
.text:004056D8                 ja      short loc_405750
.text:004056DA                 mov     esi, eax
.text:004056DC                 inc     esi
.text:004056DD                 cmp     esi, 1FFFFFFFh
.text:004056E3                 ja      loc_40586F
.text:004056E9                 mov     ebx, off_40705C
.text:004056EF                 cmp     ebx, offset dword_407054
.text:004056F5                 jz      loc_405841
.text:004056FB
.text:004056FB loc_4056FB:                             ; CODE XREF: sub_4056B0+1B5↓j
.text:004056FB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004056FE                 lea     ecx, ds:0[esi*8]
.text:00405705                 mov     ebp, esi
.text:00405707                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:0040570B                 call    sub_404250
.text:00405710                 mov     off_40705C, eax
.text:00405715                 mov     ebx, dword_407050
.text:0040571B                 sub     ebp, ebx
.text:0040571D                 lea     edi, [eax+ebx*8]
.text:00405720                 lea     eax, ds:0[ebp*8]
.text:00405727                 cmp     eax, 7
.text:0040572A                 jbe     short loc_405740
.text:0040572C                 test    edi, 4
.text:00405732                 jz      short loc_405740
.text:00405734                 mov     dword ptr [edi], 0
.text:0040573A                 sub     eax, 4
.text:0040573D                 add     edi, 4
.text:00405740
.text:00405740 loc_405740:                             ; CODE XREF: sub_4056B0+7A↑j
.text:00405740                                         ; sub_4056B0+82↑j
.text:00405740                 cld
.text:00405741                 mov     ecx, eax
.text:00405743                 shr     ecx, 2
.text:00405746                 xor     eax, eax
.text:00405748                 rep stosd
.text:0040574A                 mov     dword_407050, esi
.text:00405750
.text:00405750 loc_405750:                             ; CODE XREF: sub_4056B0+28↑j
.text:00405750                 mov     esi, off_40705C
.text:00405756                 mov     eax, [esp+2Ch+arg_0]
.text:0040575A                 mov     ebp, [esi+eax*8]
.text:0040575D                 mov     edi, [esi+eax*8+4]
.text:00405761                 mov     esi, [esp+2Ch+arg_C]
.text:00405765                 test    esi, esi
.text:00405767                 jz      loc_405837
.text:0040576D
.text:0040576D loc_40576D:                             ; CODE XREF: sub_4056B0+18C↓j
.text:0040576D                 call    _errno
.text:00405772                 mov     ebx, [eax]
.text:00405774                 mov     [esp+2Ch+var_18], esi ; int
.text:00405778                 mov     ecx, [esi]
.text:0040577A                 mov     [esp+2Ch+Block], edi ; int
.text:0040577D                 mov     edx, [esp+2Ch+arg_8]
.text:00405781                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405785                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405789                 mov     ecx, [esp+2Ch+arg_4]
.text:0040578D                 mov     [esp+2Ch+var_20], edx ; int
.text:00405791                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405795                 call    sub_404570
.text:0040579A                 mov     esi, eax
.text:0040579C                 call    _errno
.text:004057A1                 mov     [eax], ebx
.text:004057A3                 cmp     ebp, esi
.text:004057A5                 ja      short loc_40581B
.text:004057A7                 lea     ebp, [esi+1]
.text:004057AA                 mov     ebx, off_40705C
.text:004057B0                 cmp     edi, offset unk_4080E0
.text:004057B6                 mov     esi, [esp+2Ch+arg_0]
.text:004057BA                 mov     [ebx+esi*8], ebp
.text:004057BD                 jz      short loc_4057CD
.text:004057BF                 mov     [esp+2Ch+Block], edi ; Block
.text:004057C2                 call    free
.text:004057C7                 mov     ebx, off_40705C
.text:004057CD
.text:004057CD loc_4057CD:                             ; CODE XREF: sub_4056B0+10D↑j
.text:004057CD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004057D0                 call    sub_4041C0
.text:004057D5                 mov     esi, [esp+2Ch+arg_C]
.text:004057D9                 mov     edi, eax
.text:004057DB                 mov     eax, [esp+2Ch+arg_0]
.text:004057DF                 test    esi, esi
.text:004057E1                 mov     [ebx+eax*8+4], edi
.text:004057E5                 jz      short loc_405830
.text:004057E7
.text:004057E7 loc_4057E7:                             ; CODE XREF: sub_4056B0+185↓j
.text:004057E7                 call    _errno
.text:004057EC                 mov     ebx, [eax]
.text:004057EE                 mov     [esp+2Ch+var_18], esi ; int
.text:004057F2                 mov     ecx, [esi]
.text:004057F4                 mov     [esp+2Ch+Block], edi ; int
.text:004057F7                 mov     edx, [esp+2Ch+arg_8]
.text:004057FB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004057FF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405803                 mov     ecx, [esp+2Ch+arg_4]
.text:00405807                 mov     [esp+2Ch+var_20], edx ; int
.text:0040580B                 mov     [esp+2Ch+Str], ecx ; Str
.text:0040580F                 call    sub_404570
.text:00405814                 call    _errno
.text:00405819                 mov     [eax], ebx
.text:0040581B
.text:0040581B loc_40581B:                             ; CODE XREF: sub_4056B0+F5↑j
.text:0040581B                 call    _errno
.text:00405820                 mov     ebp, [esp+2Ch+var_14]
.text:00405824                 mov     [eax], ebp
.text:00405826                 add     esp, 1Ch
.text:00405829                 mov     eax, edi
.text:0040582B                 pop     ebx
.text:0040582C                 pop     esi
.text:0040582D                 pop     edi
.text:0040582E                 pop     ebp
.text:0040582F                 retn
.text:00405830 ; ---------------------------------------------------------------------------
.text:00405830
.text:00405830 loc_405830:                             ; CODE XREF: sub_4056B0+135↑j
.text:00405830                 mov     esi, offset dword_4081E0
.text:00405835                 jmp     short loc_4057E7
.text:00405837 ; ---------------------------------------------------------------------------
.text:00405837
.text:00405837 loc_405837:                             ; CODE XREF: sub_4056B0+B7↑j
.text:00405837                 mov     esi, offset dword_4081E0
.text:0040583C                 jmp     loc_40576D
.text:00405841 ; ---------------------------------------------------------------------------
.text:00405841
.text:00405841 loc_405841:                             ; CODE XREF: sub_4056B0+45↑j
.text:00405841                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405848                 call    sub_4041C0
.text:0040584D                 mov     off_40705C, eax
.text:00405852                 mov     edi, dword_407054
.text:00405858                 mov     ebx, eax
.text:0040585A                 mov     ecx, off_407058
.text:00405860                 mov     [eax], edi
.text:00405862                 mov     [eax+4], ecx
.text:00405865                 jmp     loc_4056FB
.text:0040586A ; ---------------------------------------------------------------------------
.text:0040586A
.text:0040586A loc_40586A:                             ; CODE XREF: sub_4056B0+18↑j
.text:0040586A                 call    abort
.text:0040586F ; ---------------------------------------------------------------------------
.text:0040586F
.text:0040586F loc_40586F:                             ; CODE XREF: sub_4056B0+33↑j
.text:0040586F                 call    sub_4058A0
.text:0040586F sub_4056B0      endp
.text:0040586F
.text:0040586F ; ---------------------------------------------------------------------------
.text:00405874                 align 10h
.text:00405880
.text:00405880 loc_405880:                             ; DATA XREF: sub_4058A0+3↓o
.text:00405880                 insd
.text:00405881                 db      65h
.text:00405881                 insd
.text:00405883                 outsd
.text:00405884                 jb      short loc_4058FF
.text:00405886                 and     [ebp+78h], ah
.text:00405889                 push    74737561h
.text:0040588E
.text:0040588E loc_40588E:                             ; DATA XREF: sub_4058A0+10↓o
.text:0040588E                 db      65h
.text:0040588E                 add     fs:0B68D0073h, ah
.text:0040588E ; ---------------------------------------------------------------------------
.text:00405896                 dw 0
.text:00405898                 align 10h
.text:004058A0
.text:004058A0 ; =============== S U B R O U T I N E =======================================
.text:004058A0
.text:004058A0 ; Attributes: noreturn
.text:004058A0
.text:004058A0 sub_4058A0      proc near               ; CODE XREF: .text:loc_4041B9↑p
.text:004058A0                                         ; sub_4041C0+24↑p ...
.text:004058A0
.text:004058A0 Code            = dword ptr -1Ch
.text:004058A0 ErrorMessage    = dword ptr -18h
.text:004058A0 var_14          = dword ptr -14h
.text:004058A0 var_10          = byte ptr -10h
.text:004058A0
.text:004058A0                 sub     esp, 1Ch
.text:004058A3                 mov     [esp+1Ch+Code], offset loc_405880
.text:004058AA                 call    ds:libintl_gettext
.text:004058B0                 mov     [esp+1Ch+var_14], (offset loc_40588E+3) ; char *
.text:004058B8                 mov     edx, Code
.text:004058BE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004058C6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004058CA                 mov     [esp+1Ch+Code], edx ; Code
.text:004058CD                 call    sub_405930
.text:004058D2                 call    abort
.text:004058D2 sub_4058A0      endp
.text:004058D2
.text:004058D2 ; ---------------------------------------------------------------------------
.text:004058D7                 align 10h
.text:004058E0
.text:004058E0 ; =============== S U B R O U T I N E =======================================
.text:004058E0
.text:004058E0 ; Attributes: thunk
.text:004058E0
.text:004058E0 libintl_bindtextdomain proc near
.text:004058E0                 jmp     ds:__imp_libintl_bindtextdomain
.text:004058E0 libintl_bindtextdomain endp
.text:004058E0
.text:004058E0 ; ---------------------------------------------------------------------------
.text:004058E6                 align 10h
.text:004058F0                 jmp     ds:libintl_textdomain
.text:004058F0 ; ---------------------------------------------------------------------------
.text:004058F6                 db 2 dup(90h)
.text:004058F8                 dd 0
.text:004058FC                 db 3 dup(0)
.text:004058FF ; ---------------------------------------------------------------------------
.text:004058FF
.text:004058FF loc_4058FF:                             ; CODE XREF: .text:00405884↑j
.text:004058FF                 add     bh, bh
.text:00405901                 and     eax, offset libintl_gettext
.text:00405906                 nop
.text:00405907                 nop
.text:00405907 ; ---------------------------------------------------------------------------
.text:00405908                 dd 2 dup(0)
.text:00405910 ; const char aS[]
.text:00405910 aS              db ': %s',0             ; DATA XREF: sub_405930+B8↓o
.text:00405910                                         ; sub_405A34+122↓o
.text:00405915 aUnknownSystemE db 'Unknown system error',0
.text:00405915                                         ; DATA XREF: sub_405930:loc_4059FD↓o
.text:00405915                                         ; sub_405A34:loc_405B6E↓o
.text:0040592A ; const char aS_0[]
.text:0040592A aS_0            db '%s: ',0             ; DATA XREF: sub_405930:loc_405A04↓o
.text:0040592F                 align 10h
.text:00405930
.text:00405930 ; =============== S U B R O U T I N E =======================================
.text:00405930
.text:00405930
.text:00405930 ; int __cdecl sub_405930(int Code, int ErrorMessage, char *, char)
.text:00405930 sub_405930      proc near               ; CODE XREF: sub_401780+233↑p
.text:00405930                                         ; sub_401780+4DE↑p ...
.text:00405930
.text:00405930 Stream          = dword ptr -1Ch
.text:00405930 Format          = dword ptr -18h
.text:00405930 ArgList         = dword ptr -14h
.text:00405930 Code            = dword ptr  4
.text:00405930 ErrorMessage    = dword ptr  8
.text:00405930 arg_8           = dword ptr  0Ch
.text:00405930 arg_C           = byte ptr  10h
.text:00405930
.text:00405930                 push    esi
.text:00405931                 push    ebx
.text:00405932                 sub     esp, 14h
.text:00405935                 mov     edx, ds:_iob
.text:0040593B                 mov     esi, [esp+1Ch+Code]
.text:0040593F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405943                 add     edx, 20h ; ' '
.text:00405946                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405949                 call    fflush
.text:0040594E                 mov     eax, ds:dword_408260
.text:00405953                 test    eax, eax
.text:00405955                 jz      loc_405A04
.text:0040595B                 call    eax ; dword_408260
.text:0040595D
.text:0040595D loc_40595D:                             ; CODE XREF: sub_405930+F7↓j
.text:0040595D                 lea     edx, [esp+1Ch+arg_C]
.text:00405961                 mov     ecx, [esp+1Ch+arg_8]
.text:00405965                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405969                 mov     edx, ds:_iob
.text:0040596F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405973                 add     edx, 40h ; '@'
.text:00405976                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405979                 call    vfprintf
.text:0040597E                 inc     ds:dword_408270
.text:00405984                 test    ebx, ebx
.text:00405986                 jnz     short loc_4059D2
.text:00405988
.text:00405988 loc_405988:                             ; CODE XREF: sub_405930+CB↓j
.text:00405988                 mov     edx, ds:_iob
.text:0040598E                 lea     ecx, [edx+40h]
.text:00405991                 mov     ebx, [ecx+4]
.text:00405994                 dec     ebx
.text:00405995                 test    ebx, ebx
.text:00405997                 mov     [ecx+4], ebx
.text:0040599A                 js      short loc_4059C0
.text:0040599C                 mov     ecx, [edx+40h]
.text:0040599F                 mov     byte ptr [ecx], 0Ah
.text:004059A2                 inc     dword ptr [edx+40h]
.text:004059A5
.text:004059A5 loc_4059A5:                             ; CODE XREF: sub_405930+A0↓j
.text:004059A5                 mov     edx, ds:_iob
.text:004059AB                 add     edx, 40h ; '@'
.text:004059AE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004059B1                 call    fflush
.text:004059B6                 test    esi, esi
.text:004059B8                 jnz     short loc_405A2C
.text:004059BA                 add     esp, 14h
.text:004059BD                 pop     ebx
.text:004059BE                 pop     esi
.text:004059BF                 retn
.text:004059C0 ; ---------------------------------------------------------------------------
.text:004059C0
.text:004059C0 loc_4059C0:                             ; CODE XREF: sub_405930+6A↑j
.text:004059C0                 mov     [esp+1Ch+Format], ecx ; File
.text:004059C4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004059CB                 call    _flsbuf
.text:004059D0                 jmp     short loc_4059A5
.text:004059D2 ; ---------------------------------------------------------------------------
.text:004059D2
.text:004059D2 loc_4059D2:                             ; CODE XREF: sub_405930+56↑j
.text:004059D2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004059D5                 call    strerror
.text:004059DA                 test    eax, eax
.text:004059DC                 jz      short loc_4059FD
.text:004059DE
.text:004059DE loc_4059DE:                             ; CODE XREF: sub_405930+D2↓j
.text:004059DE                 mov     [esp+1Ch+ArgList], eax
.text:004059E2                 mov     ebx, ds:_iob
.text:004059E8                 mov     [esp+1Ch+Format], offset aS ; ": %s"
.text:004059F0                 add     ebx, 40h ; '@'
.text:004059F3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004059F6                 call    fprintf
.text:004059FB                 jmp     short loc_405988
.text:004059FD ; ---------------------------------------------------------------------------
.text:004059FD
.text:004059FD loc_4059FD:                             ; CODE XREF: sub_405930+AC↑j
.text:004059FD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405A02                 jmp     short loc_4059DE
.text:00405A04 ; ---------------------------------------------------------------------------
.text:00405A04
.text:00405A04 loc_405A04:                             ; CODE XREF: sub_405930+25↑j
.text:00405A04                 mov     [esp+1Ch+Format], offset aS_0 ; "%s: "
.text:00405A0C                 mov     edx, ds:_iob
.text:00405A12                 mov     ecx, ds:dword_408230
.text:00405A18                 add     edx, 40h ; '@'
.text:00405A1B                 mov     [esp+1Ch+ArgList], ecx
.text:00405A1F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405A22                 call    fprintf
.text:00405A27                 jmp     loc_40595D
.text:00405A2C ; ---------------------------------------------------------------------------
.text:00405A2C
.text:00405A2C loc_405A2C:                             ; CODE XREF: sub_405930+88↑j
.text:00405A2C                 mov     [esp+1Ch+Stream], esi ; Code
.text:00405A2F                 call    exit
.text:00405A2F sub_405930      endp
.text:00405A2F
.text:00405A34
.text:00405A34 ; =============== S U B R O U T I N E =======================================
.text:00405A34
.text:00405A34
.text:00405A34 ; int __cdecl sub_405A34(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405A34 sub_405A34      proc near               ; DATA XREF: sub_405A34+77↓o
.text:00405A34
.text:00405A34 Stream          = dword ptr -28h
.text:00405A34 Format          = dword ptr -24h
.text:00405A34 ArgList         = dword ptr -20h
.text:00405A34 var_1C          = dword ptr -1Ch
.text:00405A34 Code            = dword ptr  8
.text:00405A34 ErrorMessage    = dword ptr  0Ch
.text:00405A34 Str2            = dword ptr  10h
.text:00405A34 arg_10          = dword ptr  14h
.text:00405A34 arg_14          = dword ptr  18h
.text:00405A34 arg_18          = byte ptr  1Ch
.text:00405A34
.text:00405A34                 and     eax, 64253A73h
.text:00405A39                 cmp     ah, [eax]
.text:00405A3B
.text:00405A3B loc_405A3B:                             ; DATA XREF: sub_405A34:loc_405B75↓o
.text:00405A3B                 add     ds:55003A73h, ah
.text:00405A41                 push    edi
.text:00405A42                 push    esi
.text:00405A43                 push    ebx
.text:00405A44                 sub     esp, 1Ch
.text:00405A47                 mov     edx, ds:dword_4082A0
.text:00405A4D                 mov     ebp, [esp+28h+Code]
.text:00405A51                 mov     edi, [esp+28h+ErrorMessage]
.text:00405A55                 test    edx, edx
.text:00405A57                 mov     ebx, [esp+28h+Str2]
.text:00405A5B                 mov     esi, [esp+28h+arg_10]
.text:00405A5F                 jz      short loc_405A79
.text:00405A61                 cmp     ds:dword_408220, esi
.text:00405A67                 jz      loc_405BA0
.text:00405A6D
.text:00405A6D loc_405A6D:                             ; CODE XREF: sub_405A34+18D↓j
.text:00405A6D                 mov     ds:Str1, ebx
.text:00405A73                 mov     ds:dword_408220, esi
.text:00405A79
.text:00405A79 loc_405A79:                             ; CODE XREF: sub_405A34+2B↑j
.text:00405A79                 mov     edx, ds:_iob
.text:00405A7F                 add     edx, 20h ; ' '
.text:00405A82                 mov     [esp+28h+Stream], edx ; Stream
.text:00405A85                 call    fflush
.text:00405A8A                 mov     eax, ds:dword_408260
.text:00405A8F                 test    eax, eax
.text:00405A91                 jz      loc_405B75
.text:00405A97                 call    eax ; dword_408260
.text:00405A99
.text:00405A99 loc_405A99:                             ; CODE XREF: sub_405A34+164↓j
.text:00405A99                 test    ebx, ebx
.text:00405A9B                 jz      short loc_405ABE
.text:00405A9D                 mov     [esp+28h+ArgList], ebx
.text:00405AA1                 mov     ebx, ds:_iob
.text:00405AA7                 mov     [esp+28h+var_1C], esi
.text:00405AAB                 mov     [esp+28h+Format], offset sub_405A34 ; Format
.text:00405AB3                 add     ebx, 40h ; '@'
.text:00405AB6                 mov     [esp+28h+Stream], ebx ; Stream
.text:00405AB9                 call    fprintf
.text:00405ABE
.text:00405ABE loc_405ABE:                             ; CODE XREF: sub_405A34+67↑j
.text:00405ABE                 mov     esi, ds:_iob
.text:00405AC4                 lea     edx, [esp+28h+arg_18]
.text:00405AC8                 mov     ecx, [esp+28h+arg_14]
.text:00405ACC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:00405AD0                 add     esi, 40h ; '@'
.text:00405AD3                 mov     [esp+28h+Format], ecx ; Format
.text:00405AD7                 mov     [esp+28h+Stream], esi ; Stream
.text:00405ADA                 call    vfprintf
.text:00405ADF                 inc     ds:dword_408270
.text:00405AE5                 test    edi, edi
.text:00405AE7                 jnz     short loc_405B40
.text:00405AE9
.text:00405AE9 loc_405AE9:                             ; CODE XREF: sub_405A34+135↓j
.text:00405AE9                 mov     edx, ds:_iob
.text:00405AEF                 lea     ecx, [edx+40h]
.text:00405AF2                 mov     ebx, [ecx+4]
.text:00405AF5                 dec     ebx
.text:00405AF6                 test    ebx, ebx
.text:00405AF8                 mov     [ecx+4], ebx
.text:00405AFB                 js      short loc_405B27
.text:00405AFD                 mov     esi, [edx+40h]
.text:00405B00                 mov     byte ptr [esi], 0Ah
.text:00405B03                 inc     dword ptr [edx+40h]
.text:00405B06
.text:00405B06 loc_405B06:                             ; CODE XREF: sub_405A34+103↓j
.text:00405B06                 mov     ecx, ds:_iob
.text:00405B0C                 add     ecx, 40h ; '@'
.text:00405B0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405B12                 call    fflush
.text:00405B17                 test    ebp, ebp
.text:00405B19                 jnz     loc_405BC6
.text:00405B1F
.text:00405B1F loc_405B1F:                             ; CODE XREF: sub_405A34+173↓j
.text:00405B1F                                         ; sub_405A34+187↓j
.text:00405B1F                 add     esp, 1Ch
.text:00405B22                 pop     ebx
.text:00405B23                 pop     esi
.text:00405B24                 pop     edi
.text:00405B25                 pop     ebp
.text:00405B26                 retn
.text:00405B27 ; ---------------------------------------------------------------------------
.text:00405B27
.text:00405B27 loc_405B27:                             ; CODE XREF: sub_405A34+C7↑j
.text:00405B27                 mov     [esp+28h+Format], ecx ; File
.text:00405B2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405B32                 call    _flsbuf
.text:00405B37                 jmp     short loc_405B06
.text:00405B37 ; ---------------------------------------------------------------------------
.text:00405B39                 align 10h
.text:00405B40
.text:00405B40 loc_405B40:                             ; CODE XREF: sub_405A34+B3↑j
.text:00405B40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405B43                 call    strerror
.text:00405B48                 test    eax, eax
.text:00405B4A                 jz      short loc_405B6E
.text:00405B4C
.text:00405B4C loc_405B4C:                             ; CODE XREF: sub_405A34+13F↓j
.text:00405B4C                 mov     [esp+28h+ArgList], eax
.text:00405B50                 mov     edi, ds:_iob
.text:00405B56                 mov     [esp+28h+Format], offset aS ; ": %s"
.text:00405B5E                 add     edi, 40h ; '@'
.text:00405B61                 mov     [esp+28h+Stream], edi ; Stream
.text:00405B64                 call    fprintf
.text:00405B69                 jmp     loc_405AE9
.text:00405B6E ; ---------------------------------------------------------------------------
.text:00405B6E
.text:00405B6E loc_405B6E:                             ; CODE XREF: sub_405A34+116↑j
.text:00405B6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405B73                 jmp     short loc_405B4C
.text:00405B75 ; ---------------------------------------------------------------------------
.text:00405B75
.text:00405B75 loc_405B75:                             ; CODE XREF: sub_405A34+5D↑j
.text:00405B75                 mov     [esp+28h+Format], (offset loc_405A3B+1) ; Format
.text:00405B7D                 mov     ecx, ds:_iob
.text:00405B83                 mov     edx, ds:dword_408230
.text:00405B89                 add     ecx, 40h ; '@'
.text:00405B8C                 mov     [esp+28h+ArgList], edx
.text:00405B90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405B93                 call    fprintf
.text:00405B98                 jmp     loc_405A99
.text:00405B98 ; ---------------------------------------------------------------------------
.text:00405B9D                 align 10h
.text:00405BA0
.text:00405BA0 loc_405BA0:                             ; CODE XREF: sub_405A34+33↑j
.text:00405BA0                 mov     eax, ds:Str1
.text:00405BA5                 cmp     ebx, eax
.text:00405BA7                 jz      loc_405B1F
.text:00405BAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00405BB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00405BB4                 call    strcmp
.text:00405BB9                 test    eax, eax
.text:00405BBB                 jz      loc_405B1F
.text:00405BC1                 jmp     loc_405A6D
.text:00405BC6 ; ---------------------------------------------------------------------------
.text:00405BC6
.text:00405BC6 loc_405BC6:                             ; CODE XREF: sub_405A34+E5↑j
.text:00405BC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00405BC9                 call    exit
.text:00405BC9 sub_405A34      endp ; sp-analysis failed
.text:00405BC9
.text:00405BC9 ; ---------------------------------------------------------------------------
.text:00405BCE                 align 10h
.text:00405BD0
.text:00405BD0 ; =============== S U B R O U T I N E =======================================
.text:00405BD0
.text:00405BD0
.text:00405BD0 ; int __cdecl sub_405BD0(void *, int)
.text:00405BD0 sub_405BD0      proc near               ; CODE XREF: .text:004044C2↑p
.text:00405BD0
.text:00405BD0 Size            = dword ptr -1Ch
.text:00405BD0 Src             = dword ptr -18h
.text:00405BD0 var_14          = dword ptr -14h
.text:00405BD0 var_8           = dword ptr -8
.text:00405BD0 var_4           = dword ptr -4
.text:00405BD0 arg_0           = dword ptr  4
.text:00405BD0 arg_4           = dword ptr  8
.text:00405BD0
.text:00405BD0                 sub     esp, 1Ch
.text:00405BD3                 mov     edx, [esp+1Ch+arg_4]
.text:00405BD7                 mov     [esp+1Ch+var_4], esi
.text:00405BDB                 mov     esi, [esp+1Ch+arg_0]
.text:00405BDF                 mov     [esp+1Ch+var_8], ebx
.text:00405BE3                 mov     [esp+1Ch+Src], edx
.text:00405BE7                 mov     [esp+1Ch+Size], esi
.text:00405BEA                 call    sub_405C30
.text:00405BEF                 lea     edx, [eax+1]
.text:00405BF2                 mov     ebx, eax
.text:00405BF4                 mov     [esp+1Ch+Size], edx ; Size
.text:00405BF7                 call    malloc
.text:00405BFC                 xor     edx, edx
.text:00405BFE                 test    eax, eax
.text:00405C00                 jz      short loc_405C18
.text:00405C02                 mov     byte ptr [ebx+eax], 0
.text:00405C06                 mov     [esp+1Ch+var_14], ebx ; Size
.text:00405C0A                 mov     [esp+1Ch+Src], esi ; Src
.text:00405C0E                 mov     [esp+1Ch+Size], eax ; void *
.text:00405C11                 call    memcpy
.text:00405C16                 mov     edx, eax
.text:00405C18
.text:00405C18 loc_405C18:                             ; CODE XREF: sub_405BD0+30↑j
.text:00405C18                 mov     ebx, [esp+1Ch+var_8]
.text:00405C1C                 mov     eax, edx
.text:00405C1E                 mov     esi, [esp+1Ch+var_4]
.text:00405C22                 add     esp, 1Ch
.text:00405C25                 retn
.text:00405C25 sub_405BD0      endp
.text:00405C25
.text:00405C25 ; ---------------------------------------------------------------------------
.text:00405C26                 align 10h
.text:00405C30
.text:00405C30 ; =============== S U B R O U T I N E =======================================
.text:00405C30
.text:00405C30
.text:00405C30 sub_405C30      proc near               ; CODE XREF: sub_405BD0+1A↑p
.text:00405C30
.text:00405C30 arg_0           = dword ptr  4
.text:00405C30 arg_4           = dword ptr  8
.text:00405C30
.text:00405C30                 push    esi
.text:00405C31                 xor     edx, edx
.text:00405C33                 push    ebx
.text:00405C34                 mov     ecx, [esp+8+arg_4]
.text:00405C38                 mov     esi, [esp+8+arg_0]
.text:00405C3C                 test    ecx, ecx
.text:00405C3E                 lea     ebx, [ecx+esi]
.text:00405C41                 jz      short loc_405CB7
.text:00405C43                 cmp     ebx, esi
.text:00405C45                 mov     eax, esi
.text:00405C47                 sbb     edx, edx
.text:00405C49                 or      ebx, edx
.text:00405C4B                 test    esi, 3
.text:00405C51                 jz      short loc_405C6A
.text:00405C53                 lea     esi, [esi+0]
.text:00405C59                 lea     edi, [edi+0]
.text:00405C60
.text:00405C60 loc_405C60:                             ; CODE XREF: sub_405C30+38↓j
.text:00405C60                 cmp     byte ptr [eax], 0
.text:00405C63                 jz      short loc_405CAD
.text:00405C65                 inc     eax
.text:00405C66                 test    al, 3
.text:00405C68                 jnz     short loc_405C60
.text:00405C6A
.text:00405C6A loc_405C6A:                             ; CODE XREF: sub_405C30+21↑j
.text:00405C6A                 cmp     eax, ebx
.text:00405C6C                 mov     edx, eax
.text:00405C6E                 jnb     short loc_405CAD
.text:00405C70
.text:00405C70 loc_405C70:                             ; CODE XREF: sub_405C30+7B↓j
.text:00405C70                 mov     eax, [edx]
.text:00405C72                 add     edx, 4
.text:00405C75                 sub     eax, 1010101h
.text:00405C7A                 test    eax, 80808080h
.text:00405C7F                 jz      short loc_405CA7
.text:00405C81                 cmp     byte ptr [edx-4], 0
.text:00405C85                 lea     ecx, [edx-4]
.text:00405C88                 mov     eax, ecx
.text:00405C8A                 jz      short loc_405CAD
.text:00405C8C                 cmp     byte ptr [ecx+1], 0
.text:00405C90                 lea     eax, [edx-3]
.text:00405C93                 jz      short loc_405CAD
.text:00405C95                 cmp     byte ptr [ecx+2], 0
.text:00405C99                 lea     eax, [edx-2]
.text:00405C9C                 jz      short loc_405CAD
.text:00405C9E                 cmp     byte ptr [ecx+3], 0
.text:00405CA2                 lea     eax, [edx-1]
.text:00405CA5                 jz      short loc_405CAD
.text:00405CA7
.text:00405CA7 loc_405CA7:                             ; CODE XREF: sub_405C30+4F↑j
.text:00405CA7                 cmp     edx, ebx
.text:00405CA9                 mov     eax, ebx
.text:00405CAB                 jb      short loc_405C70
.text:00405CAD
.text:00405CAD loc_405CAD:                             ; CODE XREF: sub_405C30+33↑j
.text:00405CAD                                         ; sub_405C30+3E↑j ...
.text:00405CAD                 cmp     eax, ebx
.text:00405CAF                 jbe     short loc_405CB3
.text:00405CB1                 mov     eax, ebx
.text:00405CB3
.text:00405CB3 loc_405CB3:                             ; CODE XREF: sub_405C30+7F↑j
.text:00405CB3                 mov     edx, eax
.text:00405CB5                 sub     edx, esi
.text:00405CB7
.text:00405CB7 loc_405CB7:                             ; CODE XREF: sub_405C30+11↑j
.text:00405CB7                 pop     ebx
.text:00405CB8                 mov     eax, edx
.text:00405CBA                 pop     esi
.text:00405CBB                 retn
.text:00405CBB sub_405C30      endp
.text:00405CBB
.text:00405CBB ; ---------------------------------------------------------------------------
.text:00405CBC                 align 10h
.text:00405CC0
.text:00405CC0 ; =============== S U B R O U T I N E =======================================
.text:00405CC0
.text:00405CC0 ; Attributes: thunk
.text:00405CC0
.text:00405CC0 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:00405CC0 mbrtowc         proc near               ; CODE XREF: sub_404570+757↑p
.text:00405CC0
.text:00405CC0 DstCh           = dword ptr  4
.text:00405CC0 SrcCh           = dword ptr  8
.text:00405CC0 SizeInBytes     = dword ptr  0Ch
.text:00405CC0 State           = dword ptr  10h
.text:00405CC0
.text:00405CC0                 jmp     ds:__imp_mbrtowc
.text:00405CC0 mbrtowc         endp
.text:00405CC0
.text:00405CC0 ; ---------------------------------------------------------------------------
.text:00405CC6                 align 10h
.text:00405CD0
.text:00405CD0 ; =============== S U B R O U T I N E =======================================
.text:00405CD0
.text:00405CD0 ; Attributes: bp-based frame
.text:00405CD0
.text:00405CD0 sub_405CD0      proc near               ; CODE XREF: sub_401080+C2↑p
.text:00405CD0                 push    ebp
.text:00405CD1                 mov     ecx, offset dword_408000
.text:00405CD6                 cmp     ecx, offset dword_408000
.text:00405CDC                 mov     ebp, esp
.text:00405CDE                 jnb     short loc_405CF6
.text:00405CE0
.text:00405CE0 loc_405CE0:                             ; CODE XREF: sub_405CD0+24↓j
.text:00405CE0                 mov     edx, [ecx+4]
.text:00405CE3                 mov     eax, [ecx]
.text:00405CE5                 add     ecx, 8
.text:00405CE8                 add     [edx+400000h], eax
.text:00405CEE                 cmp     ecx, offset dword_408000
.text:00405CF4                 jb      short loc_405CE0
.text:00405CF6
.text:00405CF6 loc_405CF6:                             ; CODE XREF: sub_405CD0+E↑j
.text:00405CF6                 pop     ebp
.text:00405CF7                 retn
.text:00405CF7 sub_405CD0      endp
.text:00405CF7
.text:00405CF7 ; ---------------------------------------------------------------------------
.text:00405CF8                 align 10h
.text:00405D00
.text:00405D00 ; =============== S U B R O U T I N E =======================================
.text:00405D00
.text:00405D00 ; Attributes: bp-based frame
.text:00405D00
.text:00405D00 sub_405D00      proc near               ; CODE XREF: sub_401080+16↑p
.text:00405D00                                         ; TopLevelExceptionFilter+D7↑p
.text:00405D00                 push    ebp
.text:00405D01                 mov     ebp, esp
.text:00405D03                 fninit
.text:00405D05                 pop     ebp
.text:00405D06                 retn
.text:00405D06 sub_405D00      endp
.text:00405D06
.text:00405D06 ; ---------------------------------------------------------------------------
.text:00405D07                 align 10h
.text:00405D10
.text:00405D10 ; =============== S U B R O U T I N E =======================================
.text:00405D10
.text:00405D10 ; Attributes: bp-based frame
.text:00405D10
.text:00405D10 ; void __cdecl sub_405D10()
.text:00405D10 sub_405D10      proc near               ; DATA XREF: .text:loc_405D59↓o
.text:00405D10                                         ; sub_405DA0:loc_405DCE↓o
.text:00405D10                 push    ebp
.text:00405D11                 mov     ebp, esp
.text:00405D13                 sub     esp, 8
.text:00405D16                 mov     eax, off_407094
.text:00405D1B                 mov     edx, [eax]
.text:00405D1D                 test    edx, edx
.text:00405D1F                 jnz     short loc_405D25
.text:00405D21
.text:00405D21 loc_405D21:                             ; CODE XREF: sub_405D10+2C↓j
.text:00405D21                 mov     esp, ebp
.text:00405D23                 pop     ebp
.text:00405D24                 retn
.text:00405D25 ; ---------------------------------------------------------------------------
.text:00405D25
.text:00405D25 loc_405D25:                             ; CODE XREF: sub_405D10+F↑j
.text:00405D25                                         ; sub_405D10+2A↓j
.text:00405D25                 call    dword ptr [eax]
.text:00405D27                 mov     edx, off_407094
.text:00405D2D                 mov     ecx, [edx+4]
.text:00405D30                 lea     eax, [edx+4]
.text:00405D33                 mov     off_407094, eax
.text:00405D38                 test    ecx, ecx
.text:00405D3A                 jnz     short loc_405D25
.text:00405D3C                 jmp     short loc_405D21
.text:00405D3C sub_405D10      endp
.text:00405D3C
.text:00405D3C ; ---------------------------------------------------------------------------
.text:00405D3E                 align 10h
.text:00405D40                 push    ebp
.text:00405D41                 mov     ebp, esp
.text:00405D43                 sub     esp, 8
.text:00405D46                 mov     [ebp-4], ebx
.text:00405D49                 mov     eax, ds:dword_406250
.text:00405D4E                 cmp     eax, 0FFFFFFFFh
.text:00405D51                 jz      short loc_405D7C
.text:00405D53
.text:00405D53 loc_405D53:                             ; CODE XREF: .text:00405D86↓j
.text:00405D53                                         ; .text:00405D99↓j
.text:00405D53                 test    eax, eax
.text:00405D55                 mov     ebx, eax
.text:00405D57                 jnz     short loc_405D70
.text:00405D59
.text:00405D59 loc_405D59:                             ; CODE XREF: .text:00405D7A↓j
.text:00405D59                 mov     dword ptr [esp], offset sub_405D10
.text:00405D60                 call    sub_401040
.text:00405D65                 mov     ebx, [ebp-4]
.text:00405D68                 mov     esp, ebp
.text:00405D6A                 pop     ebp
.text:00405D6B                 retn
.text:00405D6B ; ---------------------------------------------------------------------------
.text:00405D6C                 align 10h
.text:00405D70
.text:00405D70 loc_405D70:                             ; CODE XREF: .text:00405D57↑j
.text:00405D70                                         ; .text:00405D78↓j
.text:00405D70                 call    ds:dword_406250[ebx*4]
.text:00405D77                 dec     ebx
.text:00405D78                 jnz     short loc_405D70
.text:00405D7A                 jmp     short loc_405D59
.text:00405D7C ; ---------------------------------------------------------------------------
.text:00405D7C
.text:00405D7C loc_405D7C:                             ; CODE XREF: .text:00405D51↑j
.text:00405D7C                 mov     ecx, ds:dword_406254
.text:00405D82                 xor     eax, eax
.text:00405D84                 test    ecx, ecx
.text:00405D86                 jz      short loc_405D53
.text:00405D88                 mov     edx, offset dword_406250
.text:00405D8D                 lea     esi, [esi+0]
.text:00405D90
.text:00405D90 loc_405D90:                             ; CODE XREF: .text:00405D97↓j
.text:00405D90                 inc     eax
.text:00405D91                 mov     ecx, [edx+eax*4+4]
.text:00405D95                 test    ecx, ecx
.text:00405D97                 jnz     short loc_405D90
.text:00405D99                 jmp     short loc_405D53
.text:00405D99 ; ---------------------------------------------------------------------------
.text:00405D9B                 align 10h
.text:00405DA0
.text:00405DA0 ; =============== S U B R O U T I N E =======================================
.text:00405DA0
.text:00405DA0 ; Attributes: bp-based frame
.text:00405DA0
.text:00405DA0 sub_405DA0      proc near               ; CODE XREF: sub_401780+13↑p
.text:00405DA0
.text:00405DA0 var_8           = dword ptr -8
.text:00405DA0 var_4           = dword ptr -4
.text:00405DA0
.text:00405DA0                 push    ebp
.text:00405DA1                 mov     ebp, esp
.text:00405DA3                 sub     esp, 8
.text:00405DA6                 mov     [ebp+var_4], ebx
.text:00405DA9                 mov     edx, dword_407090
.text:00405DAF                 test    edx, edx
.text:00405DB1                 jnz     short loc_405DDA
.text:00405DB3                 mov     eax, ds:dword_406250
.text:00405DB8                 mov     edx, 1
.text:00405DBD                 mov     dword_407090, edx
.text:00405DC3                 cmp     eax, 0FFFFFFFFh
.text:00405DC6                 jz      short loc_405DED
.text:00405DC8
.text:00405DC8 loc_405DC8:                             ; CODE XREF: sub_405DA0+57↓j
.text:00405DC8                                         ; sub_405DA0+69↓j
.text:00405DC8                 test    eax, eax
.text:00405DCA                 mov     ebx, eax
.text:00405DCC                 jnz     short loc_405DE1
.text:00405DCE
.text:00405DCE loc_405DCE:                             ; CODE XREF: sub_405DA0+4B↓j
.text:00405DCE                 mov     [esp+8+var_8], offset sub_405D10 ; void (__cdecl *)()
.text:00405DD5                 call    sub_401040
.text:00405DDA
.text:00405DDA loc_405DDA:                             ; CODE XREF: sub_405DA0+11↑j
.text:00405DDA                 mov     ebx, [ebp+var_4]
.text:00405DDD                 mov     esp, ebp
.text:00405DDF                 pop     ebp
.text:00405DE0                 retn
.text:00405DE1 ; ---------------------------------------------------------------------------
.text:00405DE1
.text:00405DE1 loc_405DE1:                             ; CODE XREF: sub_405DA0+2C↑j
.text:00405DE1                                         ; sub_405DA0+49↓j
.text:00405DE1                 call    ds:dword_406250[ebx*4]
.text:00405DE8                 dec     ebx
.text:00405DE9                 jnz     short loc_405DE1
.text:00405DEB                 jmp     short loc_405DCE
.text:00405DED ; ---------------------------------------------------------------------------
.text:00405DED
.text:00405DED loc_405DED:                             ; CODE XREF: sub_405DA0+26↑j
.text:00405DED                 mov     ecx, ds:dword_406254
.text:00405DF3                 xor     eax, eax
.text:00405DF5                 test    ecx, ecx
.text:00405DF7                 jz      short loc_405DC8
.text:00405DF9                 mov     edx, offset dword_406250
.text:00405DFE                 mov     esi, esi
.text:00405E00
.text:00405E00 loc_405E00:                             ; CODE XREF: sub_405DA0+67↓j
.text:00405E00                 inc     eax
.text:00405E01                 mov     ebx, [edx+eax*4+4]
.text:00405E05                 test    ebx, ebx
.text:00405E07                 jnz     short loc_405E00
.text:00405E09                 jmp     short loc_405DC8
.text:00405E09 sub_405DA0      endp
.text:00405E09
.text:00405E09 ; ---------------------------------------------------------------------------
.text:00405E0B                 align 10h
.text:00405E10
.text:00405E10 ; =============== S U B R O U T I N E =======================================
.text:00405E10
.text:00405E10 ; Attributes: bp-based frame
.text:00405E10
.text:00405E10 sub_405E10      proc near               ; CODE XREF: sub_402350+121↑p
.text:00405E10
.text:00405E10 var_34          = dword ptr -34h
.text:00405E10 var_2C          = dword ptr -2Ch
.text:00405E10 var_28          = dword ptr -28h
.text:00405E10 var_24          = dword ptr -24h
.text:00405E10 var_20          = dword ptr -20h
.text:00405E10 var_1C          = dword ptr -1Ch
.text:00405E10 var_18          = dword ptr -18h
.text:00405E10 var_14          = dword ptr -14h
.text:00405E10 arg_0           = dword ptr  8
.text:00405E10 arg_4           = dword ptr  0Ch
.text:00405E10 arg_8           = dword ptr  10h
.text:00405E10 arg_C           = dword ptr  14h
.text:00405E10
.text:00405E10                 push    ebp
.text:00405E11                 mov     ebp, esp
.text:00405E13                 push    edi
.text:00405E14                 push    esi
.text:00405E15                 push    ebx
.text:00405E16                 sub     esp, 2Ch
.text:00405E19                 mov     edx, [ebp+arg_C]
.text:00405E1C                 mov     [ebp+var_20], 0
.text:00405E23                 mov     ecx, [ebp+arg_0]
.text:00405E26                 mov     ebx, [ebp+arg_4]
.text:00405E29                 mov     [ebp+var_1C], 0
.text:00405E30                 mov     eax, [ebp+arg_8]
.text:00405E33                 test    edx, edx
.text:00405E35                 mov     [ebp+var_24], edx
.text:00405E38                 mov     edi, ebx
.text:00405E3A                 mov     esi, eax
.text:00405E3C                 mov     [ebp+var_28], ecx
.text:00405E3F                 jnz     short loc_405EA0
.text:00405E41                 cmp     eax, ebx
.text:00405E43                 jbe     short loc_405E80
.text:00405E45                 mov     eax, ecx
.text:00405E47                 mov     edx, ebx
.text:00405E49                 div     esi
.text:00405E4B
.text:00405E4B loc_405E4B:                             ; CODE XREF: sub_405E10+8B↓j
.text:00405E4B                 mov     [ebp+var_28], edx
.text:00405E4E                 lea     ecx, [ebp+var_18]
.text:00405E51                 test    ecx, ecx
.text:00405E53                 jz      short loc_405E6E
.text:00405E55                 mov     [ebp+var_1C], 0
.text:00405E5C
.text:00405E5C loc_405E5C:                             ; CODE XREF: sub_405E10+DA↓j
.text:00405E5C                 mov     eax, [ebp+var_28]
.text:00405E5F                 mov     [ebp+var_20], eax
.text:00405E62                 mov     edx, [ebp+var_20]
.text:00405E65                 mov     ecx, [ebp+var_1C]
.text:00405E68                 mov     [ebp+var_18], edx
.text:00405E6B                 mov     [ebp+var_14], ecx
.text:00405E6E
.text:00405E6E loc_405E6E:                             ; CODE XREF: sub_405E10+43↑j
.text:00405E6E                                         ; sub_405E10+A7↓j ...
.text:00405E6E                 mov     eax, [ebp+var_18]
.text:00405E71                 mov     edx, [ebp+var_14]
.text:00405E74                 add     esp, 2Ch
.text:00405E77                 pop     ebx
.text:00405E78                 pop     esi
.text:00405E79                 pop     edi
.text:00405E7A                 pop     ebp
.text:00405E7B                 retn
.text:00405E7B ; ---------------------------------------------------------------------------
.text:00405E7C                 align 10h
.text:00405E80
.text:00405E80 loc_405E80:                             ; CODE XREF: sub_405E10+33↑j
.text:00405E80                 test    eax, eax
.text:00405E82                 jnz     short loc_405E8F
.text:00405E84                 mov     eax, 1
.text:00405E89                 xor     edx, edx
.text:00405E8B                 div     esi
.text:00405E8D                 mov     esi, eax
.text:00405E8F
.text:00405E8F loc_405E8F:                             ; CODE XREF: sub_405E10+72↑j
.text:00405E8F                 mov     eax, edi
.text:00405E91                 mov     edx, [ebp+var_24]
.text:00405E94                 div     esi
.text:00405E96                 mov     eax, [ebp+var_28]
.text:00405E99                 div     esi
.text:00405E9B                 jmp     short loc_405E4B
.text:00405E9B ; ---------------------------------------------------------------------------
.text:00405E9D                 align 10h
.text:00405EA0
.text:00405EA0 loc_405EA0:                             ; CODE XREF: sub_405E10+2F↑j
.text:00405EA0                 cmp     [ebp+var_24], ebx
.text:00405EA3                 jbe     short loc_405EC0
.text:00405EA5                 mov     [ebp+var_20], ecx
.text:00405EA8
.text:00405EA8 loc_405EA8:                             ; CODE XREF: sub_405E10+15B↓j
.text:00405EA8                 mov     [ebp+var_1C], edi
.text:00405EAB                 mov     eax, [ebp+var_20]
.text:00405EAE                 mov     edx, [ebp+var_1C]
.text:00405EB1                 mov     [ebp+var_18], eax
.text:00405EB4                 mov     [ebp+var_14], edx
.text:00405EB7                 jmp     short loc_405E6E
.text:00405EB7 ; ---------------------------------------------------------------------------
.text:00405EB9                 align 10h
.text:00405EC0
.text:00405EC0 loc_405EC0:                             ; CODE XREF: sub_405E10+93↑j
.text:00405EC0                 bsr     eax, [ebp+var_24]
.text:00405EC4                 mov     ebx, eax
.text:00405EC6                 xor     ebx, 1Fh
.text:00405EC9                 jnz     short loc_405EF0
.text:00405ECB                 cmp     edi, [ebp+var_24]
.text:00405ECE                 ja      short loc_405ED5
.text:00405ED0                 cmp     [ebp+var_28], esi
.text:00405ED3                 jb      short loc_405EE0
.text:00405ED5
.text:00405ED5 loc_405ED5:                             ; CODE XREF: sub_405E10+BE↑j
.text:00405ED5                 mov     edx, [ebp+var_28]
.text:00405ED8                 sub     edx, esi
.text:00405EDA                 sbb     edi, [ebp+var_24]
.text:00405EDD                 mov     [ebp+var_28], edx
.text:00405EE0
.text:00405EE0 loc_405EE0:                             ; CODE XREF: sub_405E10+C3↑j
.text:00405EE0                 lea     ecx, [ebp+var_18]
.text:00405EE3                 test    ecx, ecx
.text:00405EE5                 jz      short loc_405E6E
.text:00405EE7                 mov     [ebp+var_1C], edi
.text:00405EEA                 jmp     loc_405E5C
.text:00405EEA ; ---------------------------------------------------------------------------
.text:00405EEF                 align 10h
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: sub_405E10+B9↑j
.text:00405EF0                 mov     edx, [ebp+var_24]
.text:00405EF3                 mov     eax, 20h ; ' '
.text:00405EF8                 mov     cl, bl
.text:00405EFA                 sub     eax, ebx
.text:00405EFC                 mov     [ebp+var_2C], eax
.text:00405EFF                 shl     edx, cl
.text:00405F01                 mov     eax, esi
.text:00405F03                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405F07                 shr     eax, cl
.text:00405F09                 mov     cl, bl
.text:00405F0B                 shl     esi, cl
.text:00405F0D                 or      edx, eax
.text:00405F0F                 mov     eax, [ebp+var_28]
.text:00405F12                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405F16                 mov     [ebp+var_24], edx
.text:00405F19                 mov     edx, edi
.text:00405F1B                 shr     edx, cl
.text:00405F1D                 mov     cl, bl
.text:00405F1F                 shl     edi, cl
.text:00405F21                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405F25                 shr     eax, cl
.text:00405F27                 or      edi, eax
.text:00405F29                 mov     eax, edi
.text:00405F2B                 mov     cl, bl
.text:00405F2D                 div     [ebp+var_24]
.text:00405F30                 shl     [ebp+var_28], cl
.text:00405F33                 mov     edi, edx
.text:00405F35                 mul     esi
.text:00405F37                 mov     [ebp+var_34], eax
.text:00405F3A                 cmp     edx, edi
.text:00405F3C                 ja      short loc_405F78
.text:00405F3E                 cmp     edx, edi
.text:00405F40                 jz      short loc_405F70
.text:00405F42
.text:00405F42 loc_405F42:                             ; CODE XREF: sub_405E10+166↓j
.text:00405F42                                         ; sub_405E10+173↓j
.text:00405F42                 lea     eax, [ebp+var_18]
.text:00405F45                 test    eax, eax
.text:00405F47                 jz      loc_405E6E
.text:00405F4D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:00405F51                 mov     eax, [ebp+var_28]
.text:00405F54                 sub     eax, [ebp+var_34]
.text:00405F57                 sbb     edi, edx
.text:00405F59                 mov     [ebp+var_28], eax
.text:00405F5C                 mov     edx, edi
.text:00405F5E                 shl     edx, cl
.text:00405F60                 mov     cl, bl
.text:00405F62                 shr     eax, cl
.text:00405F64                 or      edx, eax
.text:00405F66                 mov     [ebp+var_20], edx
.text:00405F69                 shr     edi, cl
.text:00405F6B                 jmp     loc_405EA8
.text:00405F70 ; ---------------------------------------------------------------------------
.text:00405F70
.text:00405F70 loc_405F70:                             ; CODE XREF: sub_405E10+130↑j
.text:00405F70                 mov     eax, [ebp+var_28]
.text:00405F73                 cmp     [ebp+var_34], eax
.text:00405F76                 jbe     short loc_405F42
.text:00405F78
.text:00405F78 loc_405F78:                             ; CODE XREF: sub_405E10+12C↑j
.text:00405F78                 mov     ecx, [ebp+var_34]
.text:00405F7B                 sub     ecx, esi
.text:00405F7D                 sbb     edx, [ebp+var_24]
.text:00405F80                 mov     [ebp+var_34], ecx
.text:00405F83                 jmp     short loc_405F42
.text:00405F83 sub_405E10      endp
.text:00405F83
.text:00405F83 ; ---------------------------------------------------------------------------
.text:00405F85                 align 10h
.text:00405F90
.text:00405F90 ; =============== S U B R O U T I N E =======================================
.text:00405F90
.text:00405F90 ; Attributes: info_from_lumina
.text:00405F90
.text:00405F90 ; void *__cdecl _alloca(size_t Size)
.text:00405F90 __alloca        proc near               ; CODE XREF: sub_401780+E↑p
.text:00405F90                 push    ecx
.text:00405F91                 mov     ecx, esp
.text:00405F93                 add     ecx, 8
.text:00405F96
.text:00405F96 loc_405F96:                             ; CODE XREF: __alloca+1B↓j
.text:00405F96                 cmp     eax, 1000h
.text:00405F9B                 jb      short loc_405FAD
.text:00405F9D                 sub     ecx, 1000h
.text:00405FA3                 or      dword ptr [ecx], 0
.text:00405FA6                 sub     eax, 1000h
.text:00405FAB                 jmp     short loc_405F96
.text:00405FAD ; ---------------------------------------------------------------------------
.text:00405FAD
.text:00405FAD loc_405FAD:                             ; CODE XREF: __alloca+B↑j
.text:00405FAD                 sub     ecx, eax
.text:00405FAF                 or      dword ptr [ecx], 0
.text:00405FB2                 mov     eax, esp
.text:00405FB4                 mov     esp, ecx
.text:00405FB6                 mov     ecx, [eax]
.text:00405FB8                 mov     eax, [eax+4]
.text:00405FBB                 jmp     eax
.text:00405FBB __alloca        endp
.text:00405FBB
.text:00405FBB ; ---------------------------------------------------------------------------
.text:00405FBD                 align 10h
.text:00405FC0
.text:00405FC0 ; =============== S U B R O U T I N E =======================================
.text:00405FC0
.text:00405FC0 ; Attributes: thunk
.text:00405FC0
.text:00405FC0 ; int __cdecl isatty(int FileHandle)
.text:00405FC0 _isatty         proc near               ; CODE XREF: sub_402350+23↑p
.text:00405FC0                                         ; sub_402350+478↑p ...
.text:00405FC0
.text:00405FC0 FileHandle      = dword ptr  4
.text:00405FC0
.text:00405FC0                 jmp     ds:__imp__isatty
.text:00405FC0 _isatty         endp
.text:00405FC0
.text:00405FC0 ; ---------------------------------------------------------------------------
.text:00405FC6                 align 10h
.text:00405FD0                 jmp     ds:__set_app_type
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD6                 align 10h
.text:00405FE0
.text:00405FE0 ; =============== S U B R O U T I N E =======================================
.text:00405FE0
.text:00405FE0 ; Attributes: thunk
.text:00405FE0
.text:00405FE0 ; void __cdecl cexit()
.text:00405FE0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:00405FE0                 jmp     ds:__imp__cexit
.text:00405FE0 _cexit          endp
.text:00405FE0
.text:00405FE0 ; ---------------------------------------------------------------------------
.text:00405FE6                 align 10h
.text:00405FF0
.text:00405FF0 ; =============== S U B R O U T I N E =======================================
.text:00405FF0
.text:00405FF0 ; Attributes: thunk
.text:00405FF0
.text:00405FF0 ; char ***__cdecl _p__environ()
.text:00405FF0 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:00405FF0                 jmp     ds:__imp___p__environ
.text:00405FF0 __p__environ    endp
.text:00405FF0
.text:00405FF0 ; ---------------------------------------------------------------------------
.text:00405FF6                 align 10h
.text:00406000
.text:00406000 ; =============== S U B R O U T I N E =======================================
.text:00406000
.text:00406000 ; Attributes: thunk
.text:00406000
.text:00406000 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:00406000 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:00406000                                         ; TopLevelExceptionFilter+88↑p ...
.text:00406000
.text:00406000 Signal          = dword ptr  4
.text:00406000 Function        = dword ptr  8
.text:00406000
.text:00406000                 jmp     ds:__imp_signal
.text:00406000 signal          endp
.text:00406000
.text:00406000 ; ---------------------------------------------------------------------------
.text:00406006                 align 10h
.text:00406010
.text:00406010 ; =============== S U B R O U T I N E =======================================
.text:00406010
.text:00406010 ; Attributes: thunk
.text:00406010
.text:00406010 ; int *__cdecl _p__fmode()
.text:00406010 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:00406010                 jmp     ds:__imp___p__fmode
.text:00406010 __p__fmode      endp
.text:00406010
.text:00406010 ; ---------------------------------------------------------------------------
.text:00406016                 align 10h
.text:00406020
.text:00406020 ; =============== S U B R O U T I N E =======================================
.text:00406020
.text:00406020 ; Attributes: thunk
.text:00406020
.text:00406020 ; int __cdecl setmode(int FileHandle, int Mode)
.text:00406020 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:00406020                                         ; sub_401080+90↑p ...
.text:00406020
.text:00406020 FileHandle      = dword ptr  4
.text:00406020 Mode            = dword ptr  8
.text:00406020
.text:00406020                 jmp     ds:__imp__setmode
.text:00406020 _setmode        endp
.text:00406020
.text:00406020 ; ---------------------------------------------------------------------------
.text:00406026                 align 10h
.text:00406030
.text:00406030 ; =============== S U B R O U T I N E =======================================
.text:00406030
.text:00406030 ; Attributes: thunk
.text:00406030
.text:00406030 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:00406030                 jmp     ds:__imp___getmainargs
.text:00406030 __getmainargs   endp
.text:00406030
.text:00406030 ; ---------------------------------------------------------------------------
.text:00406036                 align 10h
.text:00406040
.text:00406040 ; =============== S U B R O U T I N E =======================================
.text:00406040
.text:00406040 ; Attributes: thunk
.text:00406040
.text:00406040 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:00406040 setlocale       proc near               ; CODE XREF: sub_401780+3E↑p
.text:00406040
.text:00406040 Category        = dword ptr  4
.text:00406040 Locale          = dword ptr  8
.text:00406040
.text:00406040                 jmp     ds:__imp_setlocale
.text:00406040 setlocale       endp
.text:00406040
.text:00406040 ; ---------------------------------------------------------------------------
.text:00406046                 align 10h
.text:00406050
.text:00406050 ; =============== S U B R O U T I N E =======================================
.text:00406050
.text:00406050 ; Attributes: thunk
.text:00406050
.text:00406050 ; size_t __cdecl fwrite(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.text:00406050 fwrite          proc near               ; CODE XREF: sub_402350+316↑p
.text:00406050
.text:00406050 Buffer          = dword ptr  4
.text:00406050 ElementSize     = dword ptr  8
.text:00406050 ElementCount    = dword ptr  0Ch
.text:00406050 Stream          = dword ptr  10h
.text:00406050
.text:00406050                 jmp     ds:__imp_fwrite
.text:00406050 fwrite          endp
.text:00406050
.text:00406050 ; ---------------------------------------------------------------------------
.text:00406056                 align 10h
.text:00406060
.text:00406060 ; =============== S U B R O U T I N E =======================================
.text:00406060
.text:00406060 ; Attributes: thunk
.text:00406060
.text:00406060 ; int __cdecl fclose(FILE *Stream)
.text:00406060 fclose          proc near               ; CODE XREF: sub_401780+564↑p
.text:00406060                                         ; sub_402870+26↑p ...
.text:00406060
.text:00406060 Stream          = dword ptr  4
.text:00406060
.text:00406060                 jmp     ds:__imp_fclose
.text:00406060 fclose          endp
.text:00406060
.text:00406060 ; ---------------------------------------------------------------------------
.text:00406066                 align 10h
.text:00406070
.text:00406070 ; =============== S U B R O U T I N E =======================================
.text:00406070
.text:00406070 ; Attributes: thunk
.text:00406070
.text:00406070 ; void __cdecl clearerr(FILE *Stream)
.text:00406070 clearerr        proc near               ; CODE XREF: sub_402870+D9↑p
.text:00406070
.text:00406070 Stream          = dword ptr  4
.text:00406070
.text:00406070                 jmp     ds:__imp_clearerr
.text:00406070 clearerr        endp
.text:00406070
.text:00406070 ; ---------------------------------------------------------------------------
.text:00406076                 align 10h
.text:00406080
.text:00406080 ; =============== S U B R O U T I N E =======================================
.text:00406080
.text:00406080 ; Attributes: thunk
.text:00406080
.text:00406080 ; int *__cdecl errno()
.text:00406080 _errno          proc near               ; CODE XREF: sub_401780+56D↑p
.text:00406080                                         ; sub_402350+2BE↑p ...
.text:00406080                 jmp     ds:__imp__errno
.text:00406080 _errno          endp
.text:00406080
.text:00406080 ; ---------------------------------------------------------------------------
.text:00406086                 align 10h
.text:00406090
.text:00406090 ; =============== S U B R O U T I N E =======================================
.text:00406090
.text:00406090 ; Attributes: thunk
.text:00406090
.text:00406090 ; void __cdecl free(void *Block)
.text:00406090 free            proc near               ; CODE XREF: sub_401FB0+132↑p
.text:00406090                                         ; sub_402350+2E5↑p ...
.text:00406090
.text:00406090 Block           = dword ptr  4
.text:00406090
.text:00406090                 jmp     ds:__imp_free
.text:00406090 free            endp
.text:00406090
.text:00406090 ; ---------------------------------------------------------------------------
.text:00406096                 align 10h
.text:004060A0
.text:004060A0 ; =============== S U B R O U T I N E =======================================
.text:004060A0
.text:004060A0 ; Attributes: thunk
.text:004060A0
.text:004060A0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:004060A0 strspn          proc near               ; CODE XREF: sub_401FB0+DF↑p
.text:004060A0
.text:004060A0 Str             = dword ptr  4
.text:004060A0 Control         = dword ptr  8
.text:004060A0
.text:004060A0                 jmp     ds:__imp_strspn
.text:004060A0 strspn          endp
.text:004060A0
.text:004060A0 ; ---------------------------------------------------------------------------
.text:004060A6                 align 10h
.text:004060B0
.text:004060B0 ; =============== S U B R O U T I N E =======================================
.text:004060B0
.text:004060B0 ; Attributes: noreturn thunk
.text:004060B0
.text:004060B0 ; void __cdecl __noreturn exit(int Code)
.text:004060B0 exit            proc near               ; CODE XREF: sub_401780:loc_401900↑p
.text:004060B0                                         ; .text:00401E6B↑p ...
.text:004060B0
.text:004060B0 Code            = dword ptr  4
.text:004060B0
.text:004060B0                 jmp     ds:__imp_exit
.text:004060B0 exit            endp
.text:004060B0
.text:004060B0 ; ---------------------------------------------------------------------------
.text:004060B6                 align 10h
.text:004060C0
.text:004060C0 ; =============== S U B R O U T I N E =======================================
.text:004060C0
.text:004060C0 ; Attributes: thunk
.text:004060C0
.text:004060C0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:004060C0 fputs           proc near               ; CODE XREF: sub_401780+2B4↑p
.text:004060C0                                         ; sub_401780+2D6↑p ...
.text:004060C0
.text:004060C0 Buffer          = dword ptr  4
.text:004060C0 Stream          = dword ptr  8
.text:004060C0
.text:004060C0                 jmp     ds:__imp_fputs
.text:004060C0 fputs           endp
.text:004060C0
.text:004060C0 ; ---------------------------------------------------------------------------
.text:004060C6                 align 10h
.text:004060D0
.text:004060D0 ; =============== S U B R O U T I N E =======================================
.text:004060D0
.text:004060D0 ; Attributes: thunk
.text:004060D0
.text:004060D0 ; int printf(const char *const Format, ...)
.text:004060D0 printf          proc near               ; CODE XREF: sub_401780+292↑p
.text:004060D0                                         ; sub_401780+359↑p ...
.text:004060D0
.text:004060D0 Format          = dword ptr  4
.text:004060D0
.text:004060D0                 jmp     ds:__imp_printf
.text:004060D0 printf          endp
.text:004060D0
.text:004060D0 ; ---------------------------------------------------------------------------
.text:004060D6                 align 10h
.text:004060E0
.text:004060E0 ; =============== S U B R O U T I N E =======================================
.text:004060E0
.text:004060E0 ; Attributes: thunk
.text:004060E0
.text:004060E0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:004060E0 fprintf         proc near               ; CODE XREF: sub_401780+3D8↑p
.text:004060E0                                         ; .text:00401E63↑p ...
.text:004060E0
.text:004060E0 Stream          = dword ptr  4
.text:004060E0 Format          = dword ptr  8
.text:004060E0
.text:004060E0                 jmp     ds:__imp_fprintf
.text:004060E0 fprintf         endp
.text:004060E0
.text:004060E0 ; ---------------------------------------------------------------------------
.text:004060E6                 align 10h
.text:004060F0
.text:004060F0 ; =============== S U B R O U T I N E =======================================
.text:004060F0
.text:004060F0 ; Attributes: thunk
.text:004060F0
.text:004060F0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:004060F0 fopen           proc near               ; CODE XREF: sub_402870+58↑p
.text:004060F0
.text:004060F0 FileName        = dword ptr  4
.text:004060F0 Mode            = dword ptr  8
.text:004060F0
.text:004060F0                 jmp     ds:__imp_fopen
.text:004060F0 fopen           endp
.text:004060F0
.text:004060F0 ; ---------------------------------------------------------------------------
.text:004060F6                 align 10h
.text:00406100
.text:00406100 ; =============== S U B R O U T I N E =======================================
.text:00406100
.text:00406100 ; Attributes: thunk
.text:00406100
.text:00406100 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:00406100 _flsbuf         proc near               ; CODE XREF: sub_402350+2A2↑p
.text:00406100                                         ; sub_403D20+128↑p ...
.text:00406100
.text:00406100 File            = dword ptr  8
.text:00406100
.text:00406100                 jmp     ds:__imp__flsbuf
.text:00406100 _flsbuf         endp
.text:00406100
.text:00406100 ; ---------------------------------------------------------------------------
.text:00406106                 align 10h
.text:00406110
.text:00406110 ; =============== S U B R O U T I N E =======================================
.text:00406110
.text:00406110 ; Attributes: thunk
.text:00406110
.text:00406110 ; int __cdecl filbuf(FILE *File)
.text:00406110 _filbuf         proc near               ; CODE XREF: sub_402350+4C8↑p
.text:00406110
.text:00406110 File            = dword ptr  4
.text:00406110
.text:00406110                 jmp     ds:__imp__filbuf
.text:00406110 _filbuf         endp
.text:00406110
.text:00406110 ; ---------------------------------------------------------------------------
.text:00406116                 align 10h
.text:00406120
.text:00406120 ; =============== S U B R O U T I N E =======================================
.text:00406120
.text:00406120 ; Attributes: thunk
.text:00406120
.text:00406120 ; size_t __cdecl strlen(const char *Str)
.text:00406120 strlen          proc near               ; CODE XREF: sub_402BF0+2A9↑p
.text:00406120                                         ; sub_402BF0+346↑p ...
.text:00406120
.text:00406120 Str             = dword ptr  4
.text:00406120
.text:00406120                 jmp     ds:__imp_strlen
.text:00406120 strlen          endp
.text:00406120
.text:00406120 ; ---------------------------------------------------------------------------
.text:00406126                 align 10h
.text:00406130
.text:00406130 ; =============== S U B R O U T I N E =======================================
.text:00406130
.text:00406130 ; Attributes: thunk
.text:00406130
.text:00406130 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:00406130 strncmp         proc near               ; CODE XREF: sub_402BF0+23F↑p
.text:00406130                                         ; sub_402BF0+699↑p
.text:00406130
.text:00406130 Str1            = dword ptr  4
.text:00406130 Str2            = dword ptr  8
.text:00406130 MaxCount        = dword ptr  0Ch
.text:00406130
.text:00406130                 jmp     ds:__imp_strncmp
.text:00406130 strncmp         endp
.text:00406130
.text:00406130 ; ---------------------------------------------------------------------------
.text:00406136                 align 10h
.text:00406140
.text:00406140 ; =============== S U B R O U T I N E =======================================
.text:00406140
.text:00406140 ; Attributes: thunk
.text:00406140
.text:00406140 ; char *__cdecl getenv(const char *VarName)
.text:00406140 getenv          proc near               ; CODE XREF: sub_402BF0+B57↑p
.text:00406140                                         ; sub_4039D0+13↑p
.text:00406140
.text:00406140 VarName         = dword ptr  4
.text:00406140
.text:00406140                 jmp     ds:__imp_getenv
.text:00406140 getenv          endp
.text:00406140
.text:00406140 ; ---------------------------------------------------------------------------
.text:00406146                 align 10h
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150 ; Attributes: thunk
.text:00406150
.text:00406150 ; char *__cdecl strchr(const char *Str, int Val)
.text:00406150 strchr          proc near               ; CODE XREF: sub_402BF0+469↑p
.text:00406150                                         ; sub_402BF0+53A↑p ...
.text:00406150
.text:00406150 Str             = dword ptr  4
.text:00406150 Val             = dword ptr  8
.text:00406150
.text:00406150                 jmp     ds:__imp_strchr
.text:00406150 strchr          endp
.text:00406150
.text:00406150 ; ---------------------------------------------------------------------------
.text:00406156                 align 10h
.text:00406160
.text:00406160 ; =============== S U B R O U T I N E =======================================
.text:00406160
.text:00406160 ; Attributes: thunk
.text:00406160
.text:00406160 ; int __cdecl strtol(const char *String, char **EndPtr, int Radix)
.text:00406160 strtol          proc near               ; CODE XREF: sub_4039D0+43↑p
.text:00406160
.text:00406160 String          = dword ptr  4
.text:00406160 EndPtr          = dword ptr  8
.text:00406160 Radix           = dword ptr  0Ch
.text:00406160
.text:00406160                 jmp     ds:__imp_strtol
.text:00406160 strtol          endp
.text:00406160
.text:00406160 ; ---------------------------------------------------------------------------
.text:00406166                 align 10h
.text:00406170
.text:00406170 ; =============== S U B R O U T I N E =======================================
.text:00406170
.text:00406170 ; Attributes: thunk
.text:00406170
.text:00406170 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:00406170 vfprintf        proc near               ; CODE XREF: sub_403D20+C1↑p
.text:00406170                                         ; sub_405930+49↑p ...
.text:00406170
.text:00406170 Stream          = dword ptr  4
.text:00406170 Format          = dword ptr  8
.text:00406170 ArgList         = dword ptr  0Ch
.text:00406170
.text:00406170                 jmp     ds:__imp_vfprintf
.text:00406170 vfprintf        endp
.text:00406170
.text:00406170 ; ---------------------------------------------------------------------------
.text:00406176                 align 10h
.text:00406180
.text:00406180 ; =============== S U B R O U T I N E =======================================
.text:00406180
.text:00406180 ; Attributes: noreturn thunk
.text:00406180
.text:00406180 ; void __cdecl __noreturn abort()
.text:00406180 abort           proc near               ; CODE XREF: sub_403D20:loc_403DBC↑p
.text:00406180                                         ; sub_4056B0:loc_40586A↑p ...
.text:00406180                 jmp     ds:__imp_abort
.text:00406180 abort           endp
.text:00406180
.text:00406180 ; ---------------------------------------------------------------------------
.text:00406186                 align 10h
.text:00406190
.text:00406190 ; =============== S U B R O U T I N E =======================================
.text:00406190
.text:00406190 ; Attributes: thunk
.text:00406190
.text:00406190 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:00406190 memcpy          proc near               ; CODE XREF: .text:00404368↑p
.text:00406190                                         ; .text:004043B1↑p ...
.text:00406190
.text:00406190 Src             = dword ptr  8
.text:00406190 Size            = dword ptr  0Ch
.text:00406190
.text:00406190                 jmp     ds:__imp_memcpy
.text:00406190 memcpy          endp
.text:00406190
.text:00406190 ; ---------------------------------------------------------------------------
.text:00406196                 align 10h
.text:004061A0
.text:004061A0 ; =============== S U B R O U T I N E =======================================
.text:004061A0
.text:004061A0 ; Attributes: thunk
.text:004061A0
.text:004061A0 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:004061A0 memset          proc near               ; CODE XREF: .text:004042E6↑p
.text:004061A0
.text:004061A0 Val             = dword ptr  8
.text:004061A0 Size            = dword ptr  0Ch
.text:004061A0
.text:004061A0                 jmp     ds:__imp_memset
.text:004061A0 memset          endp
.text:004061A0
.text:004061A0 ; ---------------------------------------------------------------------------
.text:004061A6                 align 10h
.text:004061B0
.text:004061B0 ; =============== S U B R O U T I N E =======================================
.text:004061B0
.text:004061B0 ; Attributes: thunk
.text:004061B0
.text:004061B0 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:004061B0 calloc          proc near               ; CODE XREF: .text:00404323↑p
.text:004061B0
.text:004061B0 Count           = dword ptr  4
.text:004061B0 Size            = dword ptr  8
.text:004061B0
.text:004061B0                 jmp     ds:__imp_calloc
.text:004061B0 calloc          endp
.text:004061B0
.text:004061B0 ; ---------------------------------------------------------------------------
.text:004061B6                 align 10h
.text:004061C0
.text:004061C0 ; =============== S U B R O U T I N E =======================================
.text:004061C0
.text:004061C0 ; Attributes: thunk
.text:004061C0
.text:004061C0 ; void *__cdecl realloc(void *Block, size_t Size)
.text:004061C0 realloc         proc near               ; CODE XREF: .text:00404220↑p
.text:004061C0                                         ; sub_404250+16↑p ...
.text:004061C0
.text:004061C0 Block           = dword ptr  4
.text:004061C0 Size            = dword ptr  8
.text:004061C0
.text:004061C0                 jmp     ds:__imp_realloc
.text:004061C0 realloc         endp
.text:004061C0
.text:004061C0 ; ---------------------------------------------------------------------------
.text:004061C6                 align 10h
.text:004061D0
.text:004061D0 ; =============== S U B R O U T I N E =======================================
.text:004061D0
.text:004061D0 ; Attributes: thunk
.text:004061D0
.text:004061D0 ; void *__cdecl malloc(size_t Size)
.text:004061D0 malloc          proc near               ; CODE XREF: .text:004041A4↑p
.text:004061D0                                         ; sub_4041C0+E↑p ...
.text:004061D0
.text:004061D0 Size            = dword ptr  4
.text:004061D0
.text:004061D0                 jmp     ds:__imp_malloc
.text:004061D0 malloc          endp
.text:004061D0
.text:004061D0 ; ---------------------------------------------------------------------------
.text:004061D6                 align 10h
.text:004061E0
.text:004061E0 ; =============== S U B R O U T I N E =======================================
.text:004061E0
.text:004061E0 ; Attributes: thunk
.text:004061E0
.text:004061E0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:004061E0 iswctype        proc near               ; CODE XREF: sub_404570+78B↑p
.text:004061E0
.text:004061E0 C               = word ptr  4
.text:004061E0 Type            = word ptr  8
.text:004061E0
.text:004061E0                 jmp     ds:__imp_iswctype
.text:004061E0 iswctype        endp
.text:004061E0
.text:004061E0 ; ---------------------------------------------------------------------------
.text:004061E6                 align 10h
.text:004061F0
.text:004061F0 ; =============== S U B R O U T I N E =======================================
.text:004061F0
.text:004061F0 ; Attributes: thunk
.text:004061F0
.text:004061F0 ; int __cdecl isctype(int C, int Type)
.text:004061F0 _isctype        proc near               ; CODE XREF: sub_404570+610↑p
.text:004061F0
.text:004061F0 C               = dword ptr  4
.text:004061F0 Type            = dword ptr  8
.text:004061F0
.text:004061F0                 jmp     ds:__imp__isctype
.text:004061F0 _isctype        endp
.text:004061F0
.text:004061F0 ; ---------------------------------------------------------------------------
.text:004061F6                 align 10h
.text:00406200
.text:00406200 ; =============== S U B R O U T I N E =======================================
.text:00406200
.text:00406200 ; Attributes: thunk
.text:00406200
.text:00406200 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:00406200 strcmp          proc near               ; CODE XREF: sub_405A34+180↑p
.text:00406200
.text:00406200 Str1            = dword ptr  4
.text:00406200 Str2            = dword ptr  8
.text:00406200
.text:00406200                 jmp     ds:__imp_strcmp
.text:00406200 strcmp          endp
.text:00406200
.text:00406200 ; ---------------------------------------------------------------------------
.text:00406206                 align 10h
.text:00406210
.text:00406210 ; =============== S U B R O U T I N E =======================================
.text:00406210
.text:00406210 ; Attributes: thunk
.text:00406210
.text:00406210 ; int __cdecl fflush(FILE *Stream)
.text:00406210 fflush          proc near               ; CODE XREF: sub_405930+19↑p
.text:00406210                                         ; sub_405930+81↑p ...
.text:00406210
.text:00406210 Stream          = dword ptr  4
.text:00406210
.text:00406210                 jmp     ds:__imp_fflush
.text:00406210 fflush          endp
.text:00406210
.text:00406210 ; ---------------------------------------------------------------------------
.text:00406216                 align 10h
.text:00406220
.text:00406220 ; =============== S U B R O U T I N E =======================================
.text:00406220
.text:00406220 ; Attributes: thunk
.text:00406220
.text:00406220 ; char *__cdecl strerror(int ErrorMessage)
.text:00406220 strerror        proc near               ; CODE XREF: sub_405930+A5↑p
.text:00406220                                         ; sub_405A34+10F↑p
.text:00406220
.text:00406220 ErrorMessage    = dword ptr  4
.text:00406220
.text:00406220                 jmp     ds:__imp_strerror
.text:00406220 strerror        endp
.text:00406220
.text:00406220 ; ---------------------------------------------------------------------------
.text:00406226                 align 10h
.text:00406230
.text:00406230 ; =============== S U B R O U T I N E =======================================
.text:00406230
.text:00406230 ; Attributes: thunk
.text:00406230
.text:00406230 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:00406230 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:00406230
.text:00406230 lpTopLevelExceptionFilter= dword ptr  4
.text:00406230
.text:00406230                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:00406230 SetUnhandledExceptionFilter endp
.text:00406230
.text:00406230 ; ---------------------------------------------------------------------------
.text:00406236                 align 10h
.text:00406240
.text:00406240 ; =============== S U B R O U T I N E =======================================
.text:00406240
.text:00406240 ; Attributes: noreturn thunk
.text:00406240
.text:00406240 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:00406240 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:00406240
.text:00406240 uExitCode       = dword ptr  4
.text:00406240
.text:00406240                 jmp     ds:__imp_ExitProcess
.text:00406240 ExitProcess     endp
.text:00406240
.text:00406240 ; ---------------------------------------------------------------------------
.text:00406246                 align 10h
.text:00406250 dword_406250    dd 0FFFFFFFFh           ; DATA XREF: .text:00405D49↑r
.text:00406250                                         ; .text:loc_405D70↑r ...
.text:00406254 dword_406254    dd 0                    ; DATA XREF: .text:loc_405D7C↑r
.text:00406254                                         ; sub_405DA0:loc_405DED↑r
.text:00406258                 dd 0FFFFFFFFh
.text:0040625C dword_40625C    dd 69h dup(0)           ; DATA XREF: .data:off_407094↓o
.text:00406400                 dd 300h dup(?)
.text:00406400 _text           ends
.text:00406400
.data:00407000 ; Section 2. (virtual address 00007000)
.data:00407000 ; Virtual size                  : 000000B0 (    176.)
.data:00407000 ; Section size in file          : 00000200 (    512.)
.data:00407000 ; Offset to raw data for section: 00005800
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data           segment para public 'DATA' use32
.data:00407000                 assume cs:_data
.data:00407000                 ;org 407000h
.data:00407000 dword_407000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:00407000                                         ; sub_401080+CC↑r
.data:00407004 dword_407004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:00407004                                         ; sub_401080+D4↑r
.data:00407008                 align 10h
.data:00407010 off_407010      dd offset byte_401280   ; DATA XREF: sub_401780+534↑o
.data:00407014                 align 10h
.data:00407020 dword_407020    dd 1                    ; DATA XREF: sub_401780:loc_401CA3↑r
.data:00407020                                         ; sub_403780+3↑r ...
.data:00407024 dword_407024    dd 1                    ; DATA XREF: sub_403780+11↑r
.data:00407024                                         ; .text:00403821↑r
.data:00407028 dword_407028    dd 3Fh                  ; DATA XREF: sub_403780+7D↑w
.data:00407028                                         ; .text:0040388D↑w
.data:0040702C                 align 10h
.data:00407030 ; char *Buffer
.data:00407030 Buffer          dd offset aCopyrightC2005
.data:00407030                                         ; DATA XREF: sub_403D20+DC↑r
.data:00407030                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:00407034                 align 10h
.data:00407040 ; int Code
.data:00407040 Code            dd 1                    ; DATA XREF: sub_4040A0+6D↑r
.data:00407040                                         ; sub_4040A0+9A↑r ...
.data:00407044                 align 10h
.data:00407050 dword_407050    dd 1                    ; DATA XREF: sub_4056B0+22↑r
.data:00407050                                         ; sub_4056B0+65↑r ...
.data:00407054 dword_407054    dd 100h                 ; DATA XREF: sub_4056B0+3F↑o
.data:00407054                                         ; sub_4056B0+1A2↑r ...
.data:00407058 off_407058      dd offset unk_4080E0    ; DATA XREF: sub_4056B0+1AA↑r
.data:0040705C ; void *off_40705C
.data:0040705C off_40705C      dd offset dword_407054  ; DATA XREF: sub_4056B0+39↑r
.data:0040705C                                         ; sub_4056B0+60↑w ...
.data:00407060 dword_407060    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:00407064                 align 10h
.data:00407070 ; int Mode
.data:00407070 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:00407070                                         ; sub_401080+80↑r ...
.data:00407074                 align 10h
.data:00407080 dword_407080    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:00407080                                         ; sub_401080+BA↑r
.data:00407084                 align 10h
.data:00407090 dword_407090    dd 0                    ; DATA XREF: sub_405DA0+9↑r
.data:00407090                                         ; sub_405DA0+1D↑w
.data:00407094 off_407094      dd offset dword_40625C  ; DATA XREF: sub_405D10+6↑r
.data:00407094                                         ; sub_405D10+17↑r ...
.data:00407098                 align 1000h
.data:00407098 _data           ends
.data:00407098
.bss:00408000 ; Section 3. (virtual address 00008000)
.bss:00408000 ; Virtual size                  : 000002D0 (    720.)
.bss:00408000 ; Section size in file          : 00000000 (      0.)
.bss:00408000 ; Offset to raw data for section: 00000000
.bss:00408000 ; Flags C0000080: Bss Readable Writable
.bss:00408000 ; Alignment     : default
.bss:00408000 ; ===========================================================================
.bss:00408000
.bss:00408000 ; Segment type: Uninitialized
.bss:00408000 ; Segment permissions: Read/Write
.bss:00408000 _bss            segment para public 'BSS' use32
.bss:00408000                 assume cs:_bss
.bss:00408000                 ;org 408000h
.bss:00408000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00408000 ; char dword_408000[]
.bss:00408000 dword_408000    dd ?                    ; DATA XREF: sub_402870+63↑w
.bss:00408000                                         ; sub_402870+B9↑w ...
.bss:00408004                 align 10h
.bss:00408010 byte_408010     db ?                    ; DATA XREF: sub_401780+84↑w
.bss:00408010                                         ; sub_401780+376↑w ...
.bss:00408011                 align 10h
.bss:00408020 dword_408020    dd ?                    ; DATA XREF: sub_401780+51E↑w
.bss:00408020                                         ; sub_401780+596↑w ...
.bss:00408024                 align 10h
.bss:00408030 ; size_t dword_408030
.bss:00408030 dword_408030    dd ?                    ; DATA XREF: sub_401780+1E4↑r
.bss:00408030                                         ; sub_401780+204↑w ...
.bss:00408034                 align 10h
.bss:00408040 dword_408040    dd ?                    ; DATA XREF: sub_401780+8B↑w
.bss:00408040                                         ; sub_401780+1AE↑r ...
.bss:00408044                 align 10h
.bss:00408050 dword_408050    dd ?                    ; DATA XREF: sub_401780+1CC↑r
.bss:00408050                                         ; sub_401780+245↑o ...
.bss:00408054                 align 10h
.bss:00408060 dword_408060    dd ?                    ; DATA XREF: sub_401780+91↑w
.bss:00408060                                         ; sub_401780+197↑r ...
.bss:00408064                 align 10h
.bss:00408070 dword_408070    dd ?                    ; DATA XREF: sub_401780:loc_401CB9↑w
.bss:00408070                                         ; sub_402870:loc_4028A3↑r ...
.bss:00408074                 align 10h
.bss:00408080 byte_408080     db ?                    ; DATA XREF: sub_401780+71↑w
.bss:00408080                                         ; sub_401780+544↑r ...
.bss:00408081                 align 10h
.bss:00408090 dword_408090    dd ?                    ; DATA XREF: sub_401780+7C↑w
.bss:00408090                                         ; sub_401780:loc_401CCD↑r ...
.bss:00408094                 align 10h
.bss:004080A0 dword_4080A0    dd ?                    ; DATA XREF: sub_403780+9↑o
.bss:004080A0                                         ; sub_403780+17↑w ...
.bss:004080A4 dword_4080A4    dd ?                    ; DATA XREF: sub_403780+21↑w
.bss:004080A4                                         ; .text:00403839↑w
.bss:004080A8 dword_4080A8    dd ?                    ; DATA XREF: sub_403780+77↑r
.bss:004080A8                                         ; .text:00403887↑r
.bss:004080AC dword_4080AC    dd ?                    ; DATA XREF: sub_403780+6B↑r
.bss:004080AC                                         ; .text:0040387B↑r
.bss:004080B0                 db    ? ;
.bss:004080B1                 db    ? ;
.bss:004080B2                 db    ? ;
.bss:004080B3                 db    ? ;
.bss:004080B4                 db    ? ;
.bss:004080B5                 db    ? ;
.bss:004080B6                 db    ? ;
.bss:004080B7                 db    ? ;
.bss:004080B8                 db    ? ;
.bss:004080B9                 db    ? ;
.bss:004080BA                 db    ? ;
.bss:004080BB                 db    ? ;
.bss:004080BC                 db    ? ;
.bss:004080BD                 db    ? ;
.bss:004080BE                 db    ? ;
.bss:004080BF                 db    ? ;
.bss:004080C0                 db    ? ;
.bss:004080C1                 db    ? ;
.bss:004080C2                 db    ? ;
.bss:004080C3                 db    ? ;
.bss:004080C4                 db    ? ;
.bss:004080C5                 db    ? ;
.bss:004080C6                 db    ? ;
.bss:004080C7                 db    ? ;
.bss:004080C8                 db    ? ;
.bss:004080C9                 db    ? ;
.bss:004080CA                 db    ? ;
.bss:004080CB                 db    ? ;
.bss:004080CC                 db    ? ;
.bss:004080CD                 db    ? ;
.bss:004080CE                 db    ? ;
.bss:004080CF                 db    ? ;
.bss:004080D0 ; char *dword_4080D0
.bss:004080D0 dword_4080D0    dd ?                    ; DATA XREF: .text:00404074↑w
.bss:004080D0                                         ; sub_4040A0+58↑r
.bss:004080D4                 align 10h
.bss:004080E0 unk_4080E0      db    ? ;               ; DATA XREF: sub_4056B0+100↑o
.bss:004080E0                                         ; .data:off_407058↑o
.bss:004080E1                 db    ? ;
.bss:004080E2                 db    ? ;
.bss:004080E3                 db    ? ;
.bss:004080E4                 db    ? ;
.bss:004080E5                 db    ? ;
.bss:004080E6                 db    ? ;
.bss:004080E7                 db    ? ;
.bss:004080E8                 db    ? ;
.bss:004080E9                 db    ? ;
.bss:004080EA                 db    ? ;
.bss:004080EB                 db    ? ;
.bss:004080EC                 db    ? ;
.bss:004080ED                 db    ? ;
.bss:004080EE                 db    ? ;
.bss:004080EF                 db    ? ;
.bss:004080F0                 db    ? ;
.bss:004080F1                 db    ? ;
.bss:004080F2                 db    ? ;
.bss:004080F3                 db    ? ;
.bss:004080F4                 db    ? ;
.bss:004080F5                 db    ? ;
.bss:004080F6                 db    ? ;
.bss:004080F7                 db    ? ;
.bss:004080F8                 db    ? ;
.bss:004080F9                 db    ? ;
.bss:004080FA                 db    ? ;
.bss:004080FB                 db    ? ;
.bss:004080FC                 db    ? ;
.bss:004080FD                 db    ? ;
.bss:004080FE                 db    ? ;
.bss:004080FF                 db    ? ;
.bss:00408100                 db    ? ;
.bss:00408101                 db    ? ;
.bss:00408102                 db    ? ;
.bss:00408103                 db    ? ;
.bss:00408104                 db    ? ;
.bss:00408105                 db    ? ;
.bss:00408106                 db    ? ;
.bss:00408107                 db    ? ;
.bss:00408108                 db    ? ;
.bss:00408109                 db    ? ;
.bss:0040810A                 db    ? ;
.bss:0040810B                 db    ? ;
.bss:0040810C                 db    ? ;
.bss:0040810D                 db    ? ;
.bss:0040810E                 db    ? ;
.bss:0040810F                 db    ? ;
.bss:00408110                 db    ? ;
.bss:00408111                 db    ? ;
.bss:00408112                 db    ? ;
.bss:00408113                 db    ? ;
.bss:00408114                 db    ? ;
.bss:00408115                 db    ? ;
.bss:00408116                 db    ? ;
.bss:00408117                 db    ? ;
.bss:00408118                 db    ? ;
.bss:00408119                 db    ? ;
.bss:0040811A                 db    ? ;
.bss:0040811B                 db    ? ;
.bss:0040811C                 db    ? ;
.bss:0040811D                 db    ? ;
.bss:0040811E                 db    ? ;
.bss:0040811F                 db    ? ;
.bss:00408120                 db    ? ;
.bss:00408121                 db    ? ;
.bss:00408122                 db    ? ;
.bss:00408123                 db    ? ;
.bss:00408124                 db    ? ;
.bss:00408125                 db    ? ;
.bss:00408126                 db    ? ;
.bss:00408127                 db    ? ;
.bss:00408128                 db    ? ;
.bss:00408129                 db    ? ;
.bss:0040812A                 db    ? ;
.bss:0040812B                 db    ? ;
.bss:0040812C                 db    ? ;
.bss:0040812D                 db    ? ;
.bss:0040812E                 db    ? ;
.bss:0040812F                 db    ? ;
.bss:00408130                 db    ? ;
.bss:00408131                 db    ? ;
.bss:00408132                 db    ? ;
.bss:00408133                 db    ? ;
.bss:00408134                 db    ? ;
.bss:00408135                 db    ? ;
.bss:00408136                 db    ? ;
.bss:00408137                 db    ? ;
.bss:00408138                 db    ? ;
.bss:00408139                 db    ? ;
.bss:0040813A                 db    ? ;
.bss:0040813B                 db    ? ;
.bss:0040813C                 db    ? ;
.bss:0040813D                 db    ? ;
.bss:0040813E                 db    ? ;
.bss:0040813F                 db    ? ;
.bss:00408140                 db    ? ;
.bss:00408141                 db    ? ;
.bss:00408142                 db    ? ;
.bss:00408143                 db    ? ;
.bss:00408144                 db    ? ;
.bss:00408145                 db    ? ;
.bss:00408146                 db    ? ;
.bss:00408147                 db    ? ;
.bss:00408148                 db    ? ;
.bss:00408149                 db    ? ;
.bss:0040814A                 db    ? ;
.bss:0040814B                 db    ? ;
.bss:0040814C                 db    ? ;
.bss:0040814D                 db    ? ;
.bss:0040814E                 db    ? ;
.bss:0040814F                 db    ? ;
.bss:00408150                 db    ? ;
.bss:00408151                 db    ? ;
.bss:00408152                 db    ? ;
.bss:00408153                 db    ? ;
.bss:00408154                 db    ? ;
.bss:00408155                 db    ? ;
.bss:00408156                 db    ? ;
.bss:00408157                 db    ? ;
.bss:00408158                 db    ? ;
.bss:00408159                 db    ? ;
.bss:0040815A                 db    ? ;
.bss:0040815B                 db    ? ;
.bss:0040815C                 db    ? ;
.bss:0040815D                 db    ? ;
.bss:0040815E                 db    ? ;
.bss:0040815F                 db    ? ;
.bss:00408160                 db    ? ;
.bss:00408161                 db    ? ;
.bss:00408162                 db    ? ;
.bss:00408163                 db    ? ;
.bss:00408164                 db    ? ;
.bss:00408165                 db    ? ;
.bss:00408166                 db    ? ;
.bss:00408167                 db    ? ;
.bss:00408168                 db    ? ;
.bss:00408169                 db    ? ;
.bss:0040816A                 db    ? ;
.bss:0040816B                 db    ? ;
.bss:0040816C                 db    ? ;
.bss:0040816D                 db    ? ;
.bss:0040816E                 db    ? ;
.bss:0040816F                 db    ? ;
.bss:00408170                 db    ? ;
.bss:00408171                 db    ? ;
.bss:00408172                 db    ? ;
.bss:00408173                 db    ? ;
.bss:00408174                 db    ? ;
.bss:00408175                 db    ? ;
.bss:00408176                 db    ? ;
.bss:00408177                 db    ? ;
.bss:00408178                 db    ? ;
.bss:00408179                 db    ? ;
.bss:0040817A                 db    ? ;
.bss:0040817B                 db    ? ;
.bss:0040817C                 db    ? ;
.bss:0040817D                 db    ? ;
.bss:0040817E                 db    ? ;
.bss:0040817F                 db    ? ;
.bss:00408180                 db    ? ;
.bss:00408181                 db    ? ;
.bss:00408182                 db    ? ;
.bss:00408183                 db    ? ;
.bss:00408184                 db    ? ;
.bss:00408185                 db    ? ;
.bss:00408186                 db    ? ;
.bss:00408187                 db    ? ;
.bss:00408188                 db    ? ;
.bss:00408189                 db    ? ;
.bss:0040818A                 db    ? ;
.bss:0040818B                 db    ? ;
.bss:0040818C                 db    ? ;
.bss:0040818D                 db    ? ;
.bss:0040818E                 db    ? ;
.bss:0040818F                 db    ? ;
.bss:00408190                 db    ? ;
.bss:00408191                 db    ? ;
.bss:00408192                 db    ? ;
.bss:00408193                 db    ? ;
.bss:00408194                 db    ? ;
.bss:00408195                 db    ? ;
.bss:00408196                 db    ? ;
.bss:00408197                 db    ? ;
.bss:00408198                 db    ? ;
.bss:00408199                 db    ? ;
.bss:0040819A                 db    ? ;
.bss:0040819B                 db    ? ;
.bss:0040819C                 db    ? ;
.bss:0040819D                 db    ? ;
.bss:0040819E                 db    ? ;
.bss:0040819F                 db    ? ;
.bss:004081A0                 db    ? ;
.bss:004081A1                 db    ? ;
.bss:004081A2                 db    ? ;
.bss:004081A3                 db    ? ;
.bss:004081A4                 db    ? ;
.bss:004081A5                 db    ? ;
.bss:004081A6                 db    ? ;
.bss:004081A7                 db    ? ;
.bss:004081A8                 db    ? ;
.bss:004081A9                 db    ? ;
.bss:004081AA                 db    ? ;
.bss:004081AB                 db    ? ;
.bss:004081AC                 db    ? ;
.bss:004081AD                 db    ? ;
.bss:004081AE                 db    ? ;
.bss:004081AF                 db    ? ;
.bss:004081B0                 db    ? ;
.bss:004081B1                 db    ? ;
.bss:004081B2                 db    ? ;
.bss:004081B3                 db    ? ;
.bss:004081B4                 db    ? ;
.bss:004081B5                 db    ? ;
.bss:004081B6                 db    ? ;
.bss:004081B7                 db    ? ;
.bss:004081B8                 db    ? ;
.bss:004081B9                 db    ? ;
.bss:004081BA                 db    ? ;
.bss:004081BB                 db    ? ;
.bss:004081BC                 db    ? ;
.bss:004081BD                 db    ? ;
.bss:004081BE                 db    ? ;
.bss:004081BF                 db    ? ;
.bss:004081C0                 db    ? ;
.bss:004081C1                 db    ? ;
.bss:004081C2                 db    ? ;
.bss:004081C3                 db    ? ;
.bss:004081C4                 db    ? ;
.bss:004081C5                 db    ? ;
.bss:004081C6                 db    ? ;
.bss:004081C7                 db    ? ;
.bss:004081C8                 db    ? ;
.bss:004081C9                 db    ? ;
.bss:004081CA                 db    ? ;
.bss:004081CB                 db    ? ;
.bss:004081CC                 db    ? ;
.bss:004081CD                 db    ? ;
.bss:004081CE                 db    ? ;
.bss:004081CF                 db    ? ;
.bss:004081D0                 db    ? ;
.bss:004081D1                 db    ? ;
.bss:004081D2                 db    ? ;
.bss:004081D3                 db    ? ;
.bss:004081D4                 db    ? ;
.bss:004081D5                 db    ? ;
.bss:004081D6                 db    ? ;
.bss:004081D7                 db    ? ;
.bss:004081D8                 db    ? ;
.bss:004081D9                 db    ? ;
.bss:004081DA                 db    ? ;
.bss:004081DB                 db    ? ;
.bss:004081DC                 db    ? ;
.bss:004081DD                 db    ? ;
.bss:004081DE                 db    ? ;
.bss:004081DF                 db    ? ;
.bss:004081E0 dword_4081E0    dd ?                    ; DATA XREF: .text:loc_405041↑o
.bss:004081E0                                         ; .text:loc_405060↑o ...
.bss:004081E4 dword_4081E4    dd ?                    ; DATA XREF: .text:loc_4050E0↑o
.bss:004081E4                                         ; .text:00405568↑r ...
.bss:004081E8 dword_4081E8    dd ?                    ; DATA XREF: .text:00405562↑r
.bss:004081E8                                         ; sub_405610+2C↑r
.bss:004081EC dword_4081EC    dd ?                    ; DATA XREF: .text:00405556↑r
.bss:004081EC                                         ; sub_405610+22↑r
.bss:004081F0 dword_4081F0    dd ?                    ; DATA XREF: .text:00405572↑r
.bss:004081F0                                         ; sub_405610+36↑r
.bss:004081F4 dword_4081F4    dd ?                    ; DATA XREF: .text:00405582↑r
.bss:004081F4                                         ; sub_405610+4E↑r
.bss:004081F8 dword_4081F8    dd ?                    ; DATA XREF: .text:0040559F↑r
.bss:004081F8                                         ; sub_405610+62↑r
.bss:004081FC dword_4081FC    dd ?                    ; DATA XREF: .text:00405595↑r
.bss:004081FC                                         ; sub_405610+70↑r
.bss:00408200 dword_408200    dd ?                    ; DATA XREF: .text:00405578↑r
.bss:00408200                                         ; sub_405610+7A↑r
.bss:00408204                 align 10h
.bss:00408210 ; char *Str1
.bss:00408210 Str1            dd ?                    ; DATA XREF: sub_405A34:loc_405A6D↑w
.bss:00408210                                         ; sub_405A34:loc_405BA0↑r
.bss:00408214                 align 10h
.bss:00408220 dword_408220    dd ?                    ; DATA XREF: sub_405A34+2D↑r
.bss:00408220                                         ; sub_405A34+3F↑w
.bss:00408224                 align 10h
.bss:00408230 dword_408230    dd ?                    ; DATA XREF: sub_401780+38↑w
.bss:00408230                                         ; sub_401780+285↑r ...
.bss:00408234                 db    ? ;
.bss:00408235                 db    ? ;
.bss:00408236                 db    ? ;
.bss:00408237                 db    ? ;
.bss:00408238                 db    ? ;
.bss:00408239                 db    ? ;
.bss:0040823A                 db    ? ;
.bss:0040823B                 db    ? ;
.bss:0040823C                 db    ? ;
.bss:0040823D                 db    ? ;
.bss:0040823E                 db    ? ;
.bss:0040823F                 db    ? ;
.bss:00408240                 db    ? ;
.bss:00408241                 db    ? ;
.bss:00408242                 db    ? ;
.bss:00408243                 db    ? ;
.bss:00408244                 db    ? ;
.bss:00408245                 db    ? ;
.bss:00408246                 db    ? ;
.bss:00408247                 db    ? ;
.bss:00408248                 db    ? ;
.bss:00408249                 db    ? ;
.bss:0040824A                 db    ? ;
.bss:0040824B                 db    ? ;
.bss:0040824C                 db    ? ;
.bss:0040824D                 db    ? ;
.bss:0040824E                 db    ? ;
.bss:0040824F                 db    ? ;
.bss:00408250 ; char *dword_408250
.bss:00408250 dword_408250    dd ?                    ; DATA XREF: sub_401780+39E↑r
.bss:00408250                                         ; sub_403780+71↑w ...
.bss:00408254                 align 10h
.bss:00408260 dword_408260    dd ?                    ; CODE XREF: sub_405A34+63↑p
.bss:00408260                                         ; DATA XREF: sub_405930+1E↑r ...
.bss:00408264                 align 10h
.bss:00408270 dword_408270    dd ?                    ; DATA XREF: sub_405930+4E↑w
.bss:00408270                                         ; sub_405A34+AB↑w
.bss:00408274                 db    ? ;
.bss:00408275                 db    ? ;
.bss:00408276                 db    ? ;
.bss:00408277                 db    ? ;
.bss:00408278                 db    ? ;
.bss:00408279                 db    ? ;
.bss:0040827A                 db    ? ;
.bss:0040827B                 db    ? ;
.bss:0040827C                 db    ? ;
.bss:0040827D                 db    ? ;
.bss:0040827E                 db    ? ;
.bss:0040827F                 db    ? ;
.bss:00408280                 db    ? ;
.bss:00408281                 db    ? ;
.bss:00408282                 db    ? ;
.bss:00408283                 db    ? ;
.bss:00408284                 db    ? ;
.bss:00408285                 db    ? ;
.bss:00408286                 db    ? ;
.bss:00408287                 db    ? ;
.bss:00408288                 db    ? ;
.bss:00408289                 db    ? ;
.bss:0040828A                 db    ? ;
.bss:0040828B                 db    ? ;
.bss:0040828C                 db    ? ;
.bss:0040828D                 db    ? ;
.bss:0040828E                 db    ? ;
.bss:0040828F                 db    ? ;
.bss:00408290                 db    ? ;
.bss:00408291                 db    ? ;
.bss:00408292                 db    ? ;
.bss:00408293                 db    ? ;
.bss:00408294                 db    ? ;
.bss:00408295                 db    ? ;
.bss:00408296                 db    ? ;
.bss:00408297                 db    ? ;
.bss:00408298                 db    ? ;
.bss:00408299                 db    ? ;
.bss:0040829A                 db    ? ;
.bss:0040829B                 db    ? ;
.bss:0040829C                 db    ? ;
.bss:0040829D                 db    ? ;
.bss:0040829E                 db    ? ;
.bss:0040829F                 db    ? ;
.bss:004082A0 dword_4082A0    dd ?                    ; DATA XREF: sub_405A34+13↑r
.bss:004082A4                 align 1000h
.bss:004082A4 _bss            ends
.bss:004082A4
.idata:00409000 ; Section 4. (virtual address 00009000)
.idata:00409000 ; Virtual size                  : 000005F8 (   1528.)
.idata:00409000 ; Section size in file          : 00000600 (   1536.)
.idata:00409000 ; Offset to raw data for section: 00005A00
.idata:00409000 ; Flags C0000040: Data Readable Writable
.idata:00409000 ; Alignment     : default
.idata:00409000 ; ===========================================================================
.idata:00409000
.idata:00409000 ; Segment type: Externs
.idata:00409000 ; _idata
.idata:00409000
.idata:00409001
.idata:0040916C ;
.idata:0040916C ; Imports from libintl3.dll
.idata:0040916C ;
.idata:0040916C                 extrn __imp_libintl_bindtextdomain:dword
.idata:0040916C                                         ; CODE XREF: sub_401780+52↑p
.idata:0040916C                                         ; DATA XREF: sub_401780+52↑r ...
.idata:00409170                 extrn libintl_gettext:dword
.idata:00409170                                         ; CODE XREF: sub_401780+21A↑p
.idata:00409170                                         ; sub_401780+27F↑p ...
.idata:00409174                 extrn libintl_textdomain:dword
.idata:00409174                                         ; CODE XREF: sub_401780+5F↑p
.idata:00409174                                         ; DATA XREF: sub_401780+5F↑r ...
.idata:00409178
.idata:00409180 ;
.idata:00409180 ; Imports from KERNEL32.dll
.idata:00409180 ;
.idata:00409180 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:00409180                 extrn __imp_ExitProcess:dword
.idata:00409180                                         ; DATA XREF: ExitProcess↑r
.idata:00409184 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00409184                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00409184                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00409188
.idata:00409190 ;
.idata:00409190 ; Imports from msvcrt.dll
.idata:00409190 ;
.idata:00409190 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00409190                 extrn __imp__isatty:dword
.idata:00409190                                         ; DATA XREF: _isatty↑r
.idata:00409194
.idata:0040919C ;
.idata:0040919C ; Imports from MSVCP60.DLL
.idata:0040919C ;
.idata:0040919C ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:0040919C                 extrn __imp_mbrtowc:dword
.idata:0040919C                                         ; DATA XREF: mbrtowc↑r
.idata:004091A0
.idata:004091A8 ;
.idata:004091A8 ; Imports from msvcrt.dll
.idata:004091A8 ;
.idata:004091A8                 extrn __imp___getmainargs:dword
.idata:004091A8                                         ; DATA XREF: __getmainargs↑r
.idata:004091AC ; int _mb_cur_max
.idata:004091AC                 extrn __mb_cur_max:dword
.idata:004091AC                                         ; DATA XREF: sub_404570+7↑r
.idata:004091AC                                         ; sub_404570+5F3↑r
.idata:004091B0 ; char ***(__cdecl *__p__environ)()
.idata:004091B0                 extrn __imp___p__environ:dword
.idata:004091B0                                         ; DATA XREF: __p__environ↑r
.idata:004091B4 ; int *(__cdecl *__p__fmode)()
.idata:004091B4                 extrn __imp___p__fmode:dword
.idata:004091B4                                         ; DATA XREF: __p__fmode↑r
.idata:004091B8 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004091B8                 extrn __set_app_type:dword
.idata:004091B8                                         ; CODE XREF: start+D↑p
.idata:004091B8                                         ; .text:0040102D↑p
.idata:004091B8                                         ; DATA XREF: ...
.idata:004091BC ; void (__cdecl *_cexit)()
.idata:004091BC                 extrn __imp__cexit:dword
.idata:004091BC                                         ; DATA XREF: _cexit↑r
.idata:004091C0 ; int *(__cdecl *_errno)()
.idata:004091C0                 extrn __imp__errno:dword
.idata:004091C0                                         ; DATA XREF: _errno↑r
.idata:004091C4 ; int (__cdecl *_filbuf)(FILE *File)
.idata:004091C4                 extrn __imp__filbuf:dword
.idata:004091C4                                         ; DATA XREF: _filbuf↑r
.idata:004091C8 ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004091C8                 extrn __imp__flsbuf:dword
.idata:004091C8                                         ; DATA XREF: _flsbuf↑r
.idata:004091CC ; FILE iob[]
.idata:004091CC                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004091CC                                         ; sub_401080+75↑r ...
.idata:004091D0 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004091D0                 extrn __imp__isctype:dword
.idata:004091D0                                         ; DATA XREF: _isctype↑r
.idata:004091D4 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004091D4                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004091D4                                         ; DATA XREF: .text:0040106C↑r
.idata:004091D8 ; const unsigned __int16 *pctype
.idata:004091D8                 extrn _pctype:dword     ; DATA XREF: sub_404570:loc_404C64↑r
.idata:004091DC ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:004091DC                 extrn __imp__setmode:dword
.idata:004091DC                                         ; DATA XREF: _setmode↑r
.idata:004091E0 ; void (__cdecl __noreturn *abort)()
.idata:004091E0                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:004091E4 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:004091E4                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:004091E4                                         ; DATA XREF: sub_401040+C↑r
.idata:004091E8 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:004091E8                 extrn __imp_calloc:dword
.idata:004091E8                                         ; DATA XREF: calloc↑r
.idata:004091EC ; void (__cdecl *clearerr)(FILE *Stream)
.idata:004091EC                 extrn __imp_clearerr:dword
.idata:004091EC                                         ; DATA XREF: clearerr↑r
.idata:004091F0 ; void (__cdecl __noreturn *exit)(int Code)
.idata:004091F0                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:004091F4 ; int (__cdecl *fclose)(FILE *Stream)
.idata:004091F4                 extrn __imp_fclose:dword
.idata:004091F4                                         ; DATA XREF: fclose↑r
.idata:004091F8 ; int (__cdecl *fflush)(FILE *Stream)
.idata:004091F8                 extrn __imp_fflush:dword
.idata:004091F8                                         ; DATA XREF: fflush↑r
.idata:004091FC ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:004091FC                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00409200 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00409200                 extrn __imp_fprintf:dword
.idata:00409200                                         ; DATA XREF: fprintf↑r
.idata:00409204 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00409204                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00409208 ; void (__cdecl *free)(void *Block)
.idata:00409208                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0040920C ; size_t (__cdecl *fwrite)(const void *Buffer, size_t ElementSize, size_t ElementCount, FILE *Stream)
.idata:0040920C                 extrn __imp_fwrite:dword
.idata:0040920C                                         ; DATA XREF: fwrite↑r
.idata:00409210 ; char *(__cdecl *getenv)(const char *VarName)
.idata:00409210                 extrn __imp_getenv:dword
.idata:00409210                                         ; DATA XREF: getenv↑r
.idata:00409214 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00409214                 extrn __imp_iswctype:dword
.idata:00409214                                         ; DATA XREF: iswctype↑r
.idata:00409218 ; void *(__cdecl *malloc)(size_t Size)
.idata:00409218                 extrn __imp_malloc:dword
.idata:00409218                                         ; DATA XREF: malloc↑r
.idata:0040921C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0040921C                 extrn __imp_memcpy:dword
.idata:0040921C                                         ; DATA XREF: memcpy↑r
.idata:00409220 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00409220                 extrn __imp_memset:dword
.idata:00409220                                         ; DATA XREF: memset↑r
.idata:00409224 ; int (*printf)(const char *const Format, ...)
.idata:00409224                 extrn __imp_printf:dword
.idata:00409224                                         ; DATA XREF: printf↑r
.idata:00409228 ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:00409228                 extrn __imp_realloc:dword
.idata:00409228                                         ; DATA XREF: realloc↑r
.idata:0040922C ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:0040922C                 extrn __imp_setlocale:dword
.idata:0040922C                                         ; DATA XREF: setlocale↑r
.idata:00409230 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00409230                 extrn __imp_signal:dword
.idata:00409230                                         ; DATA XREF: signal↑r
.idata:00409234 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00409234                 extrn __imp_strchr:dword
.idata:00409234                                         ; DATA XREF: strchr↑r
.idata:00409238 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00409238                 extrn __imp_strcmp:dword
.idata:00409238                                         ; DATA XREF: strcmp↑r
.idata:0040923C ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:0040923C                 extrn __imp_strerror:dword
.idata:0040923C                                         ; DATA XREF: strerror↑r
.idata:00409240 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00409240                 extrn __imp_strlen:dword
.idata:00409240                                         ; DATA XREF: strlen↑r
.idata:00409244 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00409244                 extrn __imp_strncmp:dword
.idata:00409244                                         ; DATA XREF: strncmp↑r
.idata:00409248 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00409248                 extrn __imp_strspn:dword
.idata:00409248                                         ; DATA XREF: strspn↑r
.idata:0040924C ; int (__cdecl *strtol)(const char *String, char **EndPtr, int Radix)
.idata:0040924C                 extrn __imp_strtol:dword
.idata:0040924C                                         ; DATA XREF: strtol↑r
.idata:00409250 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:00409250                 extrn __imp_vfprintf:dword
.idata:00409250                                         ; DATA XREF: vfprintf↑r
.idata:00409254
.idata:00409254
.idata:00409254
.idata:00409254                 end start
