.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:00401000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:00401000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:00401000 ; |                              Virginia Tech                              |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input SHA256 : 6EF5B1E33EB2E6A8B5D84B35B11E4FE97753AF6FB88A5156B645ACC69346C305
.text:00401000 ; Input MD5    : 3613BB23EC931A174CECC15241F8E48D
.text:00401000 ; Input CRC32  : 8568967B
.text:00401000
.text:00401000 ; File Name   : /home/cindy/Documents/Projects/binary_cmc/benchmark/coreutils-5.3.0-bin/bin/cat.exe
.text:00401000 ; Format      : Portable executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Timestamp   : 4266A251 (Wed Apr 20 18:41:21 2005)
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size                  : 0000CEA0 (  52896.)
.text:00401000 ; Section size in file          : 0000D000 (  53248.)
.text:00401000 ; Offset to raw data for section: 00000400
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000
.text:00401000                 .686p
.text:00401000                 .mmx
.text:00401000                 .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text           segment para public 'CODE' use32
.text:00401000                 assume cs:_text
.text:00401000                 ;org 401000h
.text:00401000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: noreturn bp-based frame
.text:00401000
.text:00401000                 public start
.text:00401000 start           proc near
.text:00401000
.text:00401000 Type            = dword ptr -8
.text:00401000
.text:00401000                 push    ebp
.text:00401001                 mov     ebp, esp
.text:00401003                 sub     esp, 8
.text:00401006                 mov     [esp+8+Type], 1 ; Type
.text:0040100D                 call    ds:__set_app_type
.text:00401013                 call    sub_401080
.text:00401013 start           endp
.text:00401013
.text:00401018 ; ---------------------------------------------------------------------------
.text:00401018                 mov     esp, ebp
.text:0040101A                 xor     eax, eax
.text:0040101C                 pop     ebp
.text:0040101D                 retn
.text:0040101D ; ---------------------------------------------------------------------------
.text:0040101E                 align 10h
.text:00401020                 push    ebp
.text:00401021                 mov     ebp, esp
.text:00401023                 sub     esp, 8
.text:00401026                 mov     dword ptr [esp], 2
.text:0040102D                 call    ds:__set_app_type
.text:00401033                 call    sub_401080
.text:00401038 ; ---------------------------------------------------------------------------
.text:00401038                 mov     esp, ebp
.text:0040103A                 xor     eax, eax
.text:0040103C                 pop     ebp
.text:0040103D                 retn
.text:0040103D ; ---------------------------------------------------------------------------
.text:0040103E                 align 10h
.text:00401040
.text:00401040 ; =============== S U B R O U T I N E =======================================
.text:00401040
.text:00401040 ; Attributes: bp-based frame
.text:00401040
.text:00401040 ; int __cdecl sub_401040(void (__cdecl *)())
.text:00401040 sub_401040      proc near               ; CODE XREF: sub_4018A0+C3↓p
.text:00401040                                         ; .text:0040D0D0↓p ...
.text:00401040
.text:00401040 var_8           = dword ptr -8
.text:00401040 arg_0           = dword ptr  8
.text:00401040
.text:00401040                 push    ebp
.text:00401041                 mov     ebp, esp
.text:00401043                 sub     esp, 8
.text:00401046                 mov     edx, [ebp+arg_0]
.text:00401049                 mov     [esp+8+var_8], edx ; void (__cdecl *)()
.text:0040104C                 call    ds:atexit
.text:00401052                 mov     esp, ebp
.text:00401054                 pop     ebp
.text:00401055                 retn
.text:00401055 sub_401040      endp
.text:00401055
.text:00401055 ; ---------------------------------------------------------------------------
.text:00401056                 align 10h
.text:00401060                 push    ebp
.text:00401061                 mov     ebp, esp
.text:00401063                 sub     esp, 8
.text:00401066                 mov     edx, [ebp+8]
.text:00401069                 mov     [esp], edx
.text:0040106C                 call    ds:_onexit
.text:00401072                 mov     esp, ebp
.text:00401074                 pop     ebp
.text:00401075                 retn
.text:00401075 ; ---------------------------------------------------------------------------
.text:00401076                 align 10h
.text:00401080
.text:00401080 ; =============== S U B R O U T I N E =======================================
.text:00401080
.text:00401080 ; Attributes: noreturn bp-based frame
.text:00401080
.text:00401080 sub_401080      proc near               ; CODE XREF: start+13↑p
.text:00401080                                         ; .text:00401033↑p
.text:00401080
.text:00401080 lpTopLevelExceptionFilter= dword ptr -28h
.text:00401080 Mode            = dword ptr -24h
.text:00401080 var_20          = dword ptr -20h
.text:00401080 var_1C          = dword ptr -1Ch
.text:00401080 var_18          = dword ptr -18h
.text:00401080 var_C           = byte ptr -0Ch
.text:00401080 var_8           = dword ptr -8
.text:00401080
.text:00401080                 push    ebp
.text:00401081                 mov     ebp, esp
.text:00401083                 push    ebx
.text:00401084                 sub     esp, 24h
.text:00401087                 mov     [esp+28h+lpTopLevelExceptionFilter], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
.text:0040108E                 call    SetUnhandledExceptionFilter
.text:00401093                 sub     esp, 4
.text:00401096                 call    sub_40D070
.text:0040109B                 mov     [esp+28h+lpTopLevelExceptionFilter], offset dword_40E000
.text:004010A2                 mov     edx, dword_40E0C0
.text:004010A8                 lea     ecx, [ebp+var_8]
.text:004010AB                 mov     [ebp+var_8], 0
.text:004010B2                 mov     [esp+28h+var_18], ecx
.text:004010B6                 mov     [esp+28h+var_1C], edx
.text:004010BA                 lea     edx, [ebp+var_C]
.text:004010BD                 mov     [esp+28h+var_20], edx
.text:004010C1                 mov     [esp+28h+Mode], offset dword_40E004
.text:004010C9                 call    __getmainargs
.text:004010CE                 mov     eax, Mode
.text:004010D3                 test    eax, eax
.text:004010D5                 jz      short loc_401135
.text:004010D7                 mov     dword_40E0E0, eax
.text:004010DC                 mov     edx, ds:_iob
.text:004010E2                 test    edx, edx
.text:004010E4                 jz      short loc_4010FB
.text:004010E6                 mov     [esp+28h+Mode], eax ; Mode
.text:004010EA                 mov     ebx, [edx+10h]
.text:004010ED                 mov     [esp+28h+lpTopLevelExceptionFilter], ebx ; FileHandle
.text:004010F0                 call    _setmode
.text:004010F5                 mov     edx, ds:_iob
.text:004010FB
.text:004010FB loc_4010FB:                             ; CODE XREF: sub_401080+64↑j
.text:004010FB                 cmp     edx, 0FFFFFFE0h
.text:004010FE                 jz      short loc_40111B
.text:00401100                 mov     ebx, Mode
.text:00401106                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040110A                 mov     ecx, [edx+30h]
.text:0040110D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401110                 call    _setmode
.text:00401115                 mov     edx, ds:_iob
.text:0040111B
.text:0040111B loc_40111B:                             ; CODE XREF: sub_401080+7E↑j
.text:0040111B                 cmp     edx, 0FFFFFFC0h
.text:0040111E                 jz      short loc_401135
.text:00401120                 mov     ebx, Mode
.text:00401126                 mov     [esp+28h+Mode], ebx ; Mode
.text:0040112A                 mov     ecx, [edx+50h]
.text:0040112D                 mov     [esp+28h+lpTopLevelExceptionFilter], ecx ; FileHandle
.text:00401130                 call    _setmode
.text:00401135
.text:00401135 loc_401135:                             ; CODE XREF: sub_401080+55↑j
.text:00401135                                         ; sub_401080+9E↑j
.text:00401135                 call    __p__fmode
.text:0040113A                 mov     ecx, dword_40E0E0
.text:00401140                 mov     [eax], ecx
.text:00401142                 call    sub_40D040
.text:00401147                 call    __p__environ
.text:0040114C                 mov     edx, dword_40E000
.text:00401152                 mov     ebx, [eax]
.text:00401154                 mov     ecx, dword_40E004
.text:0040115A                 mov     [esp+28h+lpTopLevelExceptionFilter], edx
.text:0040115D                 mov     [esp+28h+var_20], ebx
.text:00401161                 mov     [esp+28h+Mode], ecx
.text:00401165                 call    sub_4018A0
.text:00401165 sub_401080      endp
.text:00401165
.text:0040116A ; ---------------------------------------------------------------------------
.text:0040116A                 mov     ebx, eax
.text:0040116C                 call    _cexit
.text:00401171                 mov     [esp], ebx
.text:00401174                 call    ExitProcess
.text:00401174 ; ---------------------------------------------------------------------------
.text:00401179                 align 10h
.text:00401180
.text:00401180 ; =============== S U B R O U T I N E =======================================
.text:00401180
.text:00401180 ; Attributes: bp-based frame
.text:00401180
.text:00401180 ; LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.text:00401180 TopLevelExceptionFilter proc near       ; DATA XREF: sub_401080+7↑o
.text:00401180
.text:00401180 Signal          = dword ptr -18h
.text:00401180 Function        = dword ptr -14h
.text:00401180 var_8           = dword ptr -8
.text:00401180 var_4           = dword ptr -4
.text:00401180 ExceptionInfo   = dword ptr  8
.text:00401180
.text:00401180                 push    ebp
.text:00401181                 mov     ebp, esp
.text:00401183                 sub     esp, 18h
.text:00401186                 mov     [ebp+var_8], ebx
.text:00401189                 mov     ecx, [ebp+ExceptionInfo]
.text:0040118C                 xor     ebx, ebx
.text:0040118E                 mov     [ebp+var_4], esi
.text:00401191                 xor     esi, esi
.text:00401193                 mov     edx, [ecx]
.text:00401195                 mov     eax, [edx]
.text:00401197                 cmp     eax, 0C0000091h
.text:0040119C                 ja      loc_401260
.text:004011A2                 cmp     eax, 0C000008Dh
.text:004011A7                 jnb     short loc_401210
.text:004011A9                 cmp     eax, 0C0000005h
.text:004011AE                 jz      short loc_4011BE
.text:004011B0
.text:004011B0 loc_4011B0:                             ; CODE XREF: TopLevelExceptionFilter+59↓j
.text:004011B0                                         ; TopLevelExceptionFilter+77↓j ...
.text:004011B0                 mov     eax, ebx
.text:004011B2                 mov     esi, [ebp+var_4]
.text:004011B5                 mov     ebx, [ebp+var_8]
.text:004011B8                 mov     esp, ebp
.text:004011BA                 pop     ebp
.text:004011BB                 retn    4
.text:004011BE ; ---------------------------------------------------------------------------
.text:004011BE
.text:004011BE loc_4011BE:                             ; CODE XREF: TopLevelExceptionFilter+2E↑j
.text:004011BE                 mov     [esp+18h+Function], 0 ; Function
.text:004011C6                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:004011CD                 call    signal
.text:004011D2                 cmp     eax, 1
.text:004011D5                 jz      short loc_4011F9
.text:004011D7                 test    eax, eax
.text:004011D9                 jz      short loc_4011B0
.text:004011DB                 mov     [esp+18h+Signal], 0Bh
.text:004011E2                 lea     esi, [esi+0]
.text:004011E9                 lea     edi, [edi+0]
.text:004011F0
.text:004011F0 loc_4011F0:                             ; CODE XREF: TopLevelExceptionFilter+BD↓j
.text:004011F0                 call    eax
.text:004011F2
.text:004011F2 loc_4011F2:                             ; CODE XREF: TopLevelExceptionFilter+8D↓j
.text:004011F2                                         ; TopLevelExceptionFilter+D5↓j ...
.text:004011F2                 mov     ebx, 0FFFFFFFFh
.text:004011F7                 jmp     short loc_4011B0
.text:004011F9 ; ---------------------------------------------------------------------------
.text:004011F9
.text:004011F9 loc_4011F9:                             ; CODE XREF: TopLevelExceptionFilter+55↑j
.text:004011F9                 mov     [esp+18h+Function], 1 ; Function
.text:00401201                 mov     [esp+18h+Signal], 0Bh ; Signal
.text:00401208                 call    signal
.text:0040120D                 jmp     short loc_4011F2
.text:0040120D ; ---------------------------------------------------------------------------
.text:0040120F                 align 10h
.text:00401210
.text:00401210 loc_401210:                             ; CODE XREF: TopLevelExceptionFilter+27↑j
.text:00401210                                         ; TopLevelExceptionFilter+E5↓j
.text:00401210                 mov     esi, 1
.text:00401215
.text:00401215 loc_401215:                             ; CODE XREF: TopLevelExceptionFilter+EC↓j
.text:00401215                 mov     [esp+18h+Function], 0 ; Function
.text:0040121D                 mov     [esp+18h+Signal], 8 ; Signal
.text:00401224                 call    signal
.text:00401229                 cmp     eax, 1
.text:0040122C                 jz      short loc_40123F
.text:0040122E                 test    eax, eax
.text:00401230                 jz      loc_4011B0
.text:00401236                 mov     [esp+18h+Signal], 8
.text:0040123D                 jmp     short loc_4011F0
.text:0040123F ; ---------------------------------------------------------------------------
.text:0040123F
.text:0040123F loc_40123F:                             ; CODE XREF: TopLevelExceptionFilter+AC↑j
.text:0040123F                 mov     [esp+18h+Function], 1 ; Function
.text:00401247                 mov     [esp+18h+Signal], 8 ; Signal
.text:0040124E                 call    signal
.text:00401253                 test    esi, esi
.text:00401255                 jz      short loc_4011F2
.text:00401257                 call    sub_40D070
.text:0040125C                 jmp     short loc_4011F2
.text:0040125C ; ---------------------------------------------------------------------------
.text:0040125E                 align 10h
.text:00401260
.text:00401260 loc_401260:                             ; CODE XREF: TopLevelExceptionFilter+1C↑j
.text:00401260                 cmp     eax, 0C0000093h
.text:00401265                 jz      short loc_401210
.text:00401267                 cmp     eax, 0C0000094h
.text:0040126C                 jz      short loc_401215
.text:0040126E                 jmp     loc_4011B0
.text:0040126E TopLevelExceptionFilter endp
.text:0040126E
.text:0040126E ; ---------------------------------------------------------------------------
.text:00401273                 align 10h
.text:00401280 aNumberNonblank db 'number-nonblank',0  ; DATA XREF: .text:off_401300↓o
.text:00401290 aNumber         db 'number',0           ; DATA XREF: .text:00401310↓o
.text:00401297 aSqueezeBlank   db 'squeeze-blank',0    ; DATA XREF: .text:00401320↓o
.text:004012A5 aShowNonprintin db 'show-nonprinting',0 ; DATA XREF: .text:00401330↓o
.text:004012B6 aShowEnds       db 'show-ends',0        ; DATA XREF: .text:00401340↓o
.text:004012C0 aShowTabs       db 'show-tabs',0        ; DATA XREF: .text:00401350↓o
.text:004012CA aShowAll        db 'show-all',0         ; DATA XREF: .text:00401360↓o
.text:004012D3 aBinary         db 'binary',0           ; DATA XREF: .text:00401370↓o
.text:004012DA aHelp           db 'help',0             ; DATA XREF: .text:00401380↓o
.text:004012DF aVersion        db 'version',0          ; DATA XREF: .text:00401390↓o
.text:004012E7                 align 20h
.text:00401300 off_401300      dd offset aNumberNonblank
.text:00401300                                         ; DATA XREF: sub_4018A0+DE↓o
.text:00401300                                         ; "number-nonblank"
.text:00401304                 dd 2 dup(0)
.text:0040130C                 dd 62h
.text:00401310                 dd offset aNumber       ; "number"
.text:00401314                 dd 2 dup(0)
.text:0040131C                 dd 6Eh
.text:00401320                 dd offset aSqueezeBlank ; "squeeze-blank"
.text:00401324                 dd 2 dup(0)
.text:0040132C                 dd 73h
.text:00401330                 dd offset aShowNonprintin ; "show-nonprinting"
.text:00401334                 dd 2 dup(0)
.text:0040133C                 dd 76h
.text:00401340                 dd offset aShowEnds     ; "show-ends"
.text:00401344                 dd 2 dup(0)
.text:0040134C                 dd 45h
.text:00401350                 dd offset aShowTabs     ; "show-tabs"
.text:00401354                 dd 2 dup(0)
.text:0040135C                 dd 54h
.text:00401360                 dd offset aShowAll      ; "show-all"
.text:00401364                 dd 2 dup(0)
.text:0040136C                 dd 41h
.text:00401370                 dd offset aBinary       ; "binary"
.text:00401374                 dd 2 dup(0)
.text:0040137C                 dd 42h
.text:00401380                 dd offset aHelp         ; "help"
.text:00401384                 dd 2 dup(0)
.text:0040138C                 dd 0FFFFFF7Eh
.text:00401390                 dd offset aVersion      ; "version"
.text:00401394                 dd 2 dup(0)
.text:0040139C                 dd 0FFFFFF7Dh, 4 dup(0)
.text:004013B0 ; const char Locale
.text:004013B0 Locale          db 0                    ; DATA XREF: sub_4018A0+86↓o
.text:004013B1                 db 0EBh, 0Dh, 90h
.text:004013B4                 align 10h
.text:004013C0 aCProgra1Coreut db 'c:/progra~1/CoreUtils/share/locale',0
.text:004013C0                                         ; DATA XREF: sub_4018A0+9A↓o
.text:004013E3 aCoreutils      db 'coreutils',0        ; DATA XREF: sub_4018A0+A2↓o
.text:004013E3                                         ; sub_4018A0+AF↓o
.text:004013ED ; const char aBenstuvabet[]
.text:004013ED aBenstuvabet    db 'benstuvABET',0      ; DATA XREF: sub_4018A0+E6↓o
.text:004013F9                 align 10h
.text:00401400 aTrySHelpForMor db 'Try `%s --help',27h,' for more information.',0Ah,0
.text:00401400                                         ; DATA XREF: sub_4018A0:loc_4019E2↓o
.text:00401400                                         ; .text:004022FC↓o
.text:00401427 aUsageSOptionFi db 'Usage: %s [OPTION] [FILE]...',0Ah,0
.text:00401427                                         ; DATA XREF: sub_4018A0+1A4↓o
.text:00401427                                         ; .text:loc_402330↓o
.text:00401445                 align 20h
.text:00401460 aConcatenateFil db 'Concatenate FILE(s), or standard input, to standard output.',0Ah
.text:00401460                                         ; DATA XREF: sub_4018A0+1C3↓o
.text:00401460                                         ; .text:0040234F↓o
.text:00401460                 db 0Ah
.text:00401460                 db '  -A, --show-all           equivalent to -vET',0Ah
.text:00401460                 db '  -b, --number-nonblank    number nonblank output lines',0Ah
.text:00401460                 db '  -e                       equivalent to -vE',0Ah
.text:00401460                 db '  -E, --show-ends          display $ at end of each line',0Ah
.text:00401460                 db '  -n, --number             number all output lines',0Ah
.text:00401460                 db '  -s, --squeeze-blank      never more than one single blank line',0Ah
.text:00401460                 db 0
.text:004015DE                 align 10h
.text:004015E0 aTEquivalentToV db '  -t                       equivalent to -vT',0Ah
.text:004015E0                                         ; DATA XREF: sub_4018A0+1E5↓o
.text:004015E0                                         ; .text:00402371↓o
.text:004015E0                 db '  -T, --show-tabs          display TAB characters as ^I',0Ah
.text:004015E0                 db '  -u                       (ignored)',0Ah
.text:004015E0                 db '  -v, --show-nonprinting   use ^ and M- notation, except for LFD '
.text:004015E0                 db 'and TAB',0Ah,0
.text:004016B4                 align 10h
.text:004016C0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.text:004016C0                                         ; DATA XREF: sub_4018A0+207↓o
.text:004016C0                                         ; .text:00402393↓o
.text:004016ED                 align 20h
.text:00401700 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.text:00401700                                         ; DATA XREF: sub_4018A0+229↓o
.text:00401700                                         ; .text:004023B5↓o
.text:00401736                 align 10h
.text:00401740 aWithNoFileOrWh db 0Ah                  ; DATA XREF: sub_4018A0+24B↓o
.text:00401740                                         ; .text:004023D7↓o
.text:00401740                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.text:00401778                 align 10h
.text:00401780 aBBinaryUseBina db 0Ah                  ; DATA XREF: sub_4018A0+26D↓o
.text:00401780                                         ; .text:004023F9↓o
.text:00401780                 db '  -B, --binary             use binary writes to the console devic'
.text:00401780                 db 'e.',0Ah
.text:00401780                 db 0Ah,0
.text:004017C7 aReportBugsToS  db 0Ah                  ; DATA XREF: sub_4018A0+28F↓o
.text:004017C7                                         ; .text:0040241B↓o
.text:004017C7                 db 'Report bugs to <%s>.',0Ah,0
.text:004017DE aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.text:004017DE                                         ; DATA XREF: sub_4018A0+29C↓o
.text:004017DE                                         ; .text:00402428↓o
.text:004017F4 aRichardMStallm db 'Richard M. Stallman',0
.text:004017F4                                         ; DATA XREF: sub_4018A0+2C6↓o
.text:00401808 aTorbjornGranlu db 'Torbjorn Granlund',0
.text:00401808                                         ; DATA XREF: sub_4018A0+2CE↓o
.text:0040181A a530            db '5.3.0',0            ; DATA XREF: sub_4018A0+2D9↓o
.text:00401820 aGnuCoreutils   db 'GNU coreutils',0    ; DATA XREF: sub_4018A0+2E1↓o
.text:0040182E ; const FILE stru_40182E
.text:0040182E stru_40182E     FILE <746163h, 7277002Dh, 20657469h, 6F727265h, 6C630072h, 6E69736Fh, \
.text:0040182E                                         ; DATA XREF: sub_4018A0+2E9↓o
.text:0040182E                                         ; sub_4018A0+441↓o ...
.text:0040182E                       74732067h, 61646E61h>
.text:0040184E                 db  72h ; r
.text:0040184F                 db  64h ; d
.text:00401850                 db  20h
.text:00401851                 db  6Fh ; o
.text:00401852                 db  75h ; u
.text:00401853                 db  74h ; t
.text:00401854                 db  70h ; p
.text:00401855                 db  75h ; u
.text:00401856                 db  74h ; t
.text:00401857                 db    0
.text:00401858 aClosingStandar_0 db 'closing standard input',0
.text:00401858                                         ; DATA XREF: sub_4018A0+6C8↓o
.text:0040186F ; const char aS[]
.text:0040186F aS              db '%s',0               ; DATA XREF: sub_4018A0+712↓o
.text:0040186F                                         ; sub_4018A0+747↓o ...
.text:00401872 aSInputFileIsOu db '%s: input file is output file',0
.text:00401872                                         ; DATA XREF: sub_4018A0:loc_402108↓o
.text:00401890 aStandardOutput db 'standard output',0  ; DATA XREF: sub_4018A0:loc_4022BD↓o
.text:004018A0
.text:004018A0 ; =============== S U B R O U T I N E =======================================
.text:004018A0
.text:004018A0 ; Attributes: noreturn bp-based frame fuzzy-sp
.text:004018A0
.text:004018A0 sub_4018A0      proc near               ; CODE XREF: sub_401080+E5↑p
.text:004018A0
.text:004018A0 Category        = dword ptr -108h
.text:004018A0 Locale          = dword ptr -104h
.text:004018A0 var_100         = dword ptr -100h
.text:004018A0 var_FC          = byte ptr -0FCh
.text:004018A0 var_F8          = byte ptr -0F8h
.text:004018A0 var_F4          = byte ptr -0F4h
.text:004018A0 var_F0          = byte ptr -0F0h
.text:004018A0 var_EC          = byte ptr -0ECh
.text:004018A0 var_E8          = byte ptr -0E8h
.text:004018A0 var_E4          = byte ptr -0E4h
.text:004018A0 var_CA          = byte ptr -0CAh
.text:004018A0 var_C9          = byte ptr -0C9h
.text:004018A0 var_C8          = byte ptr -0C8h
.text:004018A0 var_C4          = byte ptr -0C4h
.text:004018A0 OpenFlag        = dword ptr -0C0h
.text:004018A0 var_BA          = byte ptr -0BAh
.text:004018A0 var_B9          = byte ptr -0B9h
.text:004018A0 var_B8          = byte ptr -0B8h
.text:004018A0 var_B7          = byte ptr -0B7h
.text:004018A0 var_B6          = byte ptr -0B6h
.text:004018A0 var_B5          = byte ptr -0B5h
.text:004018A0 var_B4          = byte ptr -0B4h
.text:004018A0 var_B3          = byte ptr -0B3h
.text:004018A0 var_B2          = byte ptr -0B2h
.text:004018A0 var_B1          = byte ptr -0B1h
.text:004018A0 var_B0          = dword ptr -0B0h
.text:004018A0 var_AC          = dword ptr -0ACh
.text:004018A0 var_A8          = dword ptr -0A8h
.text:004018A0 var_A4          = dword ptr -0A4h
.text:004018A0 var_A0          = dword ptr -0A0h
.text:004018A0 var_99          = byte ptr -99h
.text:004018A0 var_98          = dword ptr -98h
.text:004018A0 Block           = dword ptr -94h
.text:004018A0 var_90          = dword ptr -90h
.text:004018A0 var_8C          = dword ptr -8Ch
.text:004018A0 var_88          = dword ptr -88h
.text:004018A0 var_80          = dword ptr -80h
.text:004018A0 var_7C          = dword ptr -7Ch
.text:004018A0 var_78          = dword ptr -78h
.text:004018A0 var_74          = dword ptr -74h
.text:004018A0 var_38          = dword ptr -38h
.text:004018A0 arg_0           = dword ptr  8
.text:004018A0 arg_4           = dword ptr  0Ch
.text:004018A0
.text:004018A0                 push    ebp
.text:004018A1                 xor     eax, eax
.text:004018A3                 mov     ebp, esp
.text:004018A5                 push    edi
.text:004018A6                 push    esi
.text:004018A7                 push    ebx
.text:004018A8                 sub     esp, 0FCh
.text:004018AE                 and     esp, 0FFFFFFF0h
.text:004018B1                 call    __alloca
.text:004018B6                 call    sub_40D110
.text:004018BB                 call    sub_408E60
.text:004018C0                 mov     [ebp+var_90], eax
.text:004018C6                 xor     edx, edx
.text:004018C8                 mov     eax, [ebp+arg_4]
.text:004018CB                 mov     [ebp+OpenFlag], edx
.text:004018D1                 mov     [ebp+var_99], 1
.text:004018D8                 mov     ecx, [eax]
.text:004018DA                 mov     [ebp+var_B1], 1
.text:004018E1                 mov     [ebp+var_B2], 0
.text:004018E8                 mov     ds:dword_40F520, ecx
.text:004018EE                 mov     [ebp+var_B3], 0
.text:004018F5                 mov     [ebp+var_B4], 0
.text:004018FC                 mov     [ebp+var_B5], 0
.text:00401903                 mov     [ebp+var_B6], 0
.text:0040190A                 mov     [ebp+var_B7], 0
.text:00401911                 mov     [ebp+var_B8], 0
.text:00401918                 mov     [ebp+var_B9], 0
.text:0040191F                 mov     [ebp+var_BA], 0
.text:00401926                 mov     [esp+108h+Locale], offset Locale ; Locale
.text:0040192E                 mov     [esp+108h+Category], 0 ; Category
.text:00401935                 call    setlocale
.text:0040193A                 mov     [esp+108h+Locale], offset aCProgra1Coreut ; "c:/progra~1/CoreUtils/share/locale"
.text:00401942                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:00401949                 call    ds:libintl_bindtextdomain
.text:0040194F                 mov     [esp+108h+Category], offset aCoreutils ; "coreutils"
.text:00401956                 call    ds:libintl_textdomain
.text:0040195C                 mov     [esp+108h+Category], offset sub_402830 ; void (__cdecl *)()
.text:00401963                 call    sub_401040
.text:00401968                 nop
.text:00401969                 lea     esi, [esi+0]
.text:00401970
.text:00401970 loc_401970:                             ; CODE XREF: sub_4018A0:loc_4019E0↓j
.text:00401970                                         ; sub_4018A0+18D↓j ...
.text:00401970                 mov     dword ptr [esp+108h+var_F8], 0 ; int
.text:00401978                 mov     eax, [ebp+arg_4]
.text:0040197B                 mov     ebx, [ebp+arg_0]
.text:0040197E                 mov     dword ptr [esp+108h+var_FC], offset off_401300 ; char
.text:00401986                 mov     [esp+108h+var_100], offset aBenstuvabet ; "benstuvABET"
.text:0040198E                 mov     [esp+108h+Locale], eax ; int
.text:00401992                 mov     [esp+108h+Category], ebx ; int
.text:00401995                 call    sub_404050
.text:0040199A                 cmp     eax, 0FFFFFFFFh
.text:0040199D                 jz      loc_401C36
.text:004019A3                 cmp     eax, 62h ; 'b'
.text:004019A6                 jz      loc_401C23
.text:004019AC                 cmp     eax, 62h ; 'b'
.text:004019AF                 jg      loc_401BC0
.text:004019B5                 cmp     eax, 41h ; 'A'
.text:004019B8                 jz      loc_401BA0
.text:004019BE                 cmp     eax, 41h ; 'A'
.text:004019C1                 jle     short loc_401A32
.text:004019C3                 cmp     eax, 45h ; 'E'
.text:004019C6                 jz      short loc_401A26
.text:004019C8                 cmp     eax, 45h ; 'E'
.text:004019CB                 jg      short loc_401A1A
.text:004019CD                 mov     [ebp+var_B9], 1
.text:004019D4                 cmp     eax, 42h ; 'B'
.text:004019D7                 mov     esi, esi
.text:004019D9                 lea     edi, [edi+0]
.text:004019E0
.text:004019E0 loc_4019E0:                             ; CODE XREF: sub_4018A0+184↓j
.text:004019E0                                         ; sub_4018A0+339↓j ...
.text:004019E0                 jz      short loc_401970
.text:004019E2
.text:004019E2 loc_4019E2:                             ; CODE XREF: sub_4018A0+1A2↓j
.text:004019E2                 mov     [esp+108h+Category], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:004019E9                 call    ds:libintl_gettext
.text:004019EF                 mov     edi, ds:_iob
.text:004019F5                 mov     ecx, ds:dword_40F520
.text:004019FB                 add     edi, 40h ; '@'
.text:004019FE                 mov     [esp+108h+var_100], ecx
.text:00401A02                 mov     [esp+108h+Locale], eax ; Format
.text:00401A06                 mov     [esp+108h+Category], edi ; Stream
.text:00401A09                 call    fprintf
.text:00401A0E                 mov     [esp+108h+Category], 1 ; Code
.text:00401A15
.text:00401A15 loc_401A15:                             ; CODE XREF: sub_4018A0+2B3↓j
.text:00401A15                                         ; sub_4018A0+687↓j
.text:00401A15                 call    exit
.text:00401A1A ; ---------------------------------------------------------------------------
.text:00401A1A
.text:00401A1A loc_401A1A:                             ; CODE XREF: sub_4018A0+12B↑j
.text:00401A1A                 mov     [ebp+var_B8], 1
.text:00401A21                 cmp     eax, 54h ; 'T'
.text:00401A24                 jmp     short loc_4019E0
.text:00401A26 ; ---------------------------------------------------------------------------
.text:00401A26
.text:00401A26 loc_401A26:                             ; CODE XREF: sub_4018A0+126↑j
.text:00401A26                 mov     [ebp+var_B6], 1
.text:00401A2D                 jmp     loc_401970
.text:00401A32 ; ---------------------------------------------------------------------------
.text:00401A32
.text:00401A32 loc_401A32:                             ; CODE XREF: sub_4018A0+121↑j
.text:00401A32                 cmp     eax, 0FFFFFF7Dh
.text:00401A37                 jz      loc_401B58
.text:00401A3D                 cmp     eax, 0FFFFFF7Eh
.text:00401A42                 jnz     short loc_4019E2
.text:00401A44                 mov     [esp+108h+Category], offset aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]...\n"
.text:00401A4B                 call    ds:libintl_gettext
.text:00401A51                 mov     esi, ds:dword_40F520
.text:00401A57                 mov     [esp+108h+Category], eax ; Format
.text:00401A5A                 mov     [esp+108h+Locale], esi
.text:00401A5E                 call    printf
.text:00401A63                 mov     [esp+108h+Category], offset aConcatenateFil ; "Concatenate FILE(s), or standard input,"...
.text:00401A6A                 call    ds:libintl_gettext
.text:00401A70                 mov     ebx, ds:_iob
.text:00401A76                 add     ebx, 20h ; ' '
.text:00401A79                 mov     [esp+108h+Locale], ebx ; Stream
.text:00401A7D                 mov     [esp+108h+Category], eax ; Buffer
.text:00401A80                 call    fputs
.text:00401A85                 mov     [esp+108h+Category], offset aTEquivalentToV ; "  -t                       equivalent t"...
.text:00401A8C                 call    ds:libintl_gettext
.text:00401A92                 mov     ecx, ds:_iob
.text:00401A98                 add     ecx, 20h ; ' '
.text:00401A9B                 mov     [esp+108h+Locale], ecx ; Stream
.text:00401A9F                 mov     [esp+108h+Category], eax ; Buffer
.text:00401AA2                 call    fputs
.text:00401AA7                 mov     [esp+108h+Category], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:00401AAE                 call    ds:libintl_gettext
.text:00401AB4                 mov     edi, ds:_iob
.text:00401ABA                 add     edi, 20h ; ' '
.text:00401ABD                 mov     [esp+108h+Locale], edi ; Stream
.text:00401AC1                 mov     [esp+108h+Category], eax ; Buffer
.text:00401AC4                 call    fputs
.text:00401AC9                 mov     [esp+108h+Category], offset aVersionOutputV ; "      --version  output version informa"...
.text:00401AD0                 call    ds:libintl_gettext
.text:00401AD6                 mov     esi, ds:_iob
.text:00401ADC                 add     esi, 20h ; ' '
.text:00401ADF                 mov     [esp+108h+Locale], esi ; Stream
.text:00401AE3                 mov     [esp+108h+Category], eax ; Buffer
.text:00401AE6                 call    fputs
.text:00401AEB                 mov     [esp+108h+Category], offset aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:00401AF2                 call    ds:libintl_gettext
.text:00401AF8                 mov     ebx, ds:_iob
.text:00401AFE                 add     ebx, 20h ; ' '
.text:00401B01                 mov     [esp+108h+Locale], ebx ; Stream
.text:00401B05                 mov     [esp+108h+Category], eax ; Buffer
.text:00401B08                 call    fputs
.text:00401B0D                 mov     [esp+108h+Category], offset aBBinaryUseBina ; "\n  -B, --binary             use binary"...
.text:00401B14                 call    ds:libintl_gettext
.text:00401B1A                 mov     ecx, ds:_iob
.text:00401B20                 add     ecx, 20h ; ' '
.text:00401B23                 mov     [esp+108h+Locale], ecx ; Stream
.text:00401B27                 mov     [esp+108h+Category], eax ; Buffer
.text:00401B2A                 call    fputs
.text:00401B2F                 mov     [esp+108h+Category], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00401B36                 call    ds:libintl_gettext
.text:00401B3C                 mov     [esp+108h+Locale], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00401B44                 mov     [esp+108h+Category], eax ; Format
.text:00401B47                 call    printf
.text:00401B4C
.text:00401B4C loc_401B4C:                             ; CODE XREF: sub_4018A0+2F9↓j
.text:00401B4C                 mov     [esp+108h+Category], 0
.text:00401B53                 jmp     loc_401A15
.text:00401B58 ; ---------------------------------------------------------------------------
.text:00401B58
.text:00401B58 loc_401B58:                             ; CODE XREF: sub_4018A0+197↑j
.text:00401B58                 mov     dword ptr [esp+108h+var_F0], 0
.text:00401B60                 mov     edx, ds:_iob
.text:00401B66                 mov     dword ptr [esp+108h+var_F4], offset aRichardMStallm ; "Richard M. Stallman"
.text:00401B6E                 mov     dword ptr [esp+108h+var_F8], offset aTorbjornGranlu ; "Torbjorn Granlund"
.text:00401B76                 add     edx, 20h ; ' '
.text:00401B79                 mov     dword ptr [esp+108h+var_FC], offset a530 ; "5.3.0"
.text:00401B81                 mov     [esp+108h+var_100], offset aGnuCoreutils ; "GNU coreutils"
.text:00401B89                 mov     [esp+108h+Locale], offset stru_40182E ; FILE *
.text:00401B91                 mov     [esp+108h+Category], edx ; FILE *
.text:00401B94                 call    sub_404010
.text:00401B99                 jmp     short loc_401B4C
.text:00401B99 ; ---------------------------------------------------------------------------
.text:00401B9B                 align 10h
.text:00401BA0
.text:00401BA0 loc_401BA0:                             ; CODE XREF: sub_4018A0+118↑j
.text:00401BA0                 mov     [ebp+var_B7], 1
.text:00401BA7                 mov     [ebp+var_B6], 1
.text:00401BAE                 mov     [ebp+var_B8], 1
.text:00401BB5                 jmp     loc_401970
.text:00401BB5 ; ---------------------------------------------------------------------------
.text:00401BBA                 align 10h
.text:00401BC0
.text:00401BC0 loc_401BC0:                             ; CODE XREF: sub_4018A0+10F↑j
.text:00401BC0                 cmp     eax, 73h ; 's'
.text:00401BC3                 jz      short loc_401C17
.text:00401BC5                 cmp     eax, 73h ; 's'
.text:00401BC8                 jg      short loc_401BF1
.text:00401BCA                 cmp     eax, 65h ; 'e'
.text:00401BCD                 jz      short loc_401BDE
.text:00401BCF                 mov     [ebp+var_B3], 1
.text:00401BD6                 cmp     eax, 6Eh ; 'n'
.text:00401BD9                 jmp     loc_4019E0
.text:00401BDE ; ---------------------------------------------------------------------------
.text:00401BDE
.text:00401BDE loc_401BDE:                             ; CODE XREF: sub_4018A0+32D↑j
.text:00401BDE                 mov     [ebp+var_B6], 1
.text:00401BE5
.text:00401BE5 loc_401BE5:                             ; CODE XREF: sub_4018A0+375↓j
.text:00401BE5                 mov     [ebp+var_B7], 1
.text:00401BEC                 jmp     loc_401970
.text:00401BF1 ; ---------------------------------------------------------------------------
.text:00401BF1
.text:00401BF1 loc_401BF1:                             ; CODE XREF: sub_4018A0+328↑j
.text:00401BF1                 cmp     eax, 75h ; 'u'
.text:00401BF4                 jz      loc_401970
.text:00401BFA                 cmp     eax, 75h ; 'u'
.text:00401BFD                 jl      short loc_401C0E
.text:00401BFF                 mov     [ebp+var_B7], 1
.text:00401C06                 cmp     eax, 76h ; 'v'
.text:00401C09                 jmp     loc_4019E0
.text:00401C0E ; ---------------------------------------------------------------------------
.text:00401C0E
.text:00401C0E loc_401C0E:                             ; CODE XREF: sub_4018A0+35D↑j
.text:00401C0E                 mov     [ebp+var_B8], 1
.text:00401C15                 jmp     short loc_401BE5
.text:00401C17 ; ---------------------------------------------------------------------------
.text:00401C17
.text:00401C17 loc_401C17:                             ; CODE XREF: sub_4018A0+323↑j
.text:00401C17                 mov     [ebp+var_B5], 1
.text:00401C1E                 jmp     loc_401970
.text:00401C23 ; ---------------------------------------------------------------------------
.text:00401C23
.text:00401C23 loc_401C23:                             ; CODE XREF: sub_4018A0+106↑j
.text:00401C23                 mov     [ebp+var_B3], 1
.text:00401C2A                 mov     [ebp+var_B4], 1
.text:00401C31                 jmp     loc_401970
.text:00401C36 ; ---------------------------------------------------------------------------
.text:00401C36
.text:00401C36 loc_401C36:                             ; CODE XREF: sub_4018A0+FD↑j
.text:00401C36                 mov     [esp+108h+Category], 1 ; char *
.text:00401C3D                 xor     edx, edx
.text:00401C3F                 lea     esi, [ebp+var_88]
.text:00401C45                 mov     off_40E030, edx
.text:00401C4B                 mov     [esp+108h+Locale], esi ; int
.text:00401C4F                 call    sub_405AD0
.text:00401C54                 test    eax, eax
.text:00401C56                 js      loc_4022BD
.text:00401C5C
.text:00401C5C loc_401C5C:                             ; CODE XREF: sub_4018A0+A47↓j
.text:00401C5C                 mov     ebx, [ebp+var_38]
.text:00401C5F                 lea     ecx, [ebx-1]
.text:00401C62                 cmp     ecx, 3FFFFFh
.text:00401C68                 mov     [ebp+var_8C], ebx
.text:00401C6E                 jbe     short loc_401C7B
.text:00401C70                 mov     edx, 200h
.text:00401C75                 mov     [ebp+var_8C], edx
.text:00401C7B
.text:00401C7B loc_401C7B:                             ; CODE XREF: sub_4018A0+3CE↑j
.text:00401C7B                 mov     edi, [ebp+var_88]
.text:00401C81                 and     edi, 0F000h
.text:00401C87                 cmp     edi, 8000h
.text:00401C8D                 jz      loc_402294
.text:00401C93                 mov     [ebp+var_B1], 0
.text:00401C9A
.text:00401C9A loc_401C9A:                             ; CODE XREF: sub_4018A0+A18↓j
.text:00401C9A                 cmp     [ebp+var_B9], 0
.text:00401CA1                 jnz     loc_402257
.text:00401CA7                 xor     edx, edx
.text:00401CA9                 cmp     [ebp+var_B5], 0
.text:00401CB0                 jnz     short loc_401CBB
.text:00401CB2                 cmp     [ebp+var_B3], 0
.text:00401CB9                 jz      short loc_401CC0
.text:00401CBB
.text:00401CBB loc_401CBB:                             ; CODE XREF: sub_4018A0+410↑j
.text:00401CBB                 mov     edx, 1
.text:00401CC0
.text:00401CC0 loc_401CC0:                             ; CODE XREF: sub_4018A0+419↑j
.text:00401CC0                 movzx   edi, [ebp+var_B6]
.text:00401CC7                 or      edx, edi
.text:00401CC9                 jz      loc_402243
.text:00401CCF
.text:00401CCF loc_401CCF:                             ; CODE XREF: sub_4018A0+9B1↓j
.text:00401CCF                 cmp     [ebp+var_B7], 0
.text:00401CD6                 jnz     loc_4021E5
.text:00401CDC
.text:00401CDC loc_401CDC:                             ; CODE XREF: sub_4018A0+96E↓j
.text:00401CDC                                         ; sub_4018A0+988↓j ...
.text:00401CDC                 mov     eax, dword_40E040
.text:00401CE1                 mov     ecx, offset stru_40182E._cnt
.text:00401CE6                 mov     ds:FileName, ecx
.text:00401CEC                 mov     [ebp+var_A0], eax
.text:00401CF2                 mov     ebx, [ebp+arg_0]
.text:00401CF5                 cmp     eax, ebx
.text:00401CF7                 jge     short loc_401D0B
.text:00401CF9
.text:00401CF9 loc_401CF9:                             ; CODE XREF: sub_4018A0+659↓j
.text:00401CF9                 mov     ebx, [ebp+var_A0]
.text:00401CFF                 mov     esi, [ebp+arg_4]
.text:00401D02                 mov     edi, [esi+ebx*4]
.text:00401D05                 mov     ds:FileName, edi
.text:00401D0B
.text:00401D0B loc_401D0B:                             ; CODE XREF: sub_4018A0+457↑j
.text:00401D0B                 mov     eax, ds:FileName
.text:00401D10                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00401D13                 jz      loc_402162
.text:00401D19
.text:00401D19 loc_401D19:                             ; CODE XREF: sub_4018A0+8C6↓j
.text:00401D19                 mov     [esp+108h+Category], eax ; FileName
.text:00401D1C                 mov     ebx, [ebp+OpenFlag]
.text:00401D22                 mov     [esp+108h+Locale], ebx ; OpenFlag
.text:00401D26                 call    _open
.text:00401D2B                 mov     ds:FileHandle, eax
.text:00401D30                 test    eax, eax
.text:00401D32                 js      loc_401FAD
.text:00401D38
.text:00401D38 loc_401D38:                             ; CODE XREF: sub_4018A0+8E2↓j
.text:00401D38                                         ; sub_4018A0+913↓j ...
.text:00401D38                 mov     edx, ds:FileHandle
.text:00401D3E                 lea     eax, [ebp+var_88]
.text:00401D44                 mov     [esp+108h+Locale], eax ; int
.text:00401D48                 mov     [esp+108h+Category], edx ; char *
.text:00401D4B                 call    sub_405AD0
.text:00401D50                 test    eax, eax
.text:00401D52                 js      loc_402143
.text:00401D58                 mov     edx, [ebp+var_38]
.text:00401D5B                 lea     ebx, [edx-1]
.text:00401D5E                 mov     esi, edx
.text:00401D60                 cmp     ebx, 3FFFFFh
.text:00401D66                 jbe     short loc_401D6D
.text:00401D68                 mov     esi, 200h
.text:00401D6D
.text:00401D6D loc_401D6D:                             ; CODE XREF: sub_4018A0+4C6↑j
.text:00401D6D                 cmp     [ebp+var_B1], 0
.text:00401D74                 jz      short loc_401DB8
.text:00401D76                 mov     edi, [ebp+var_78]
.text:00401D79                 mov     ebx, [ebp+var_74]
.text:00401D7C                 mov     eax, [ebp+var_A4]
.text:00401D82                 mov     ecx, [ebp+var_A8]
.text:00401D88                 xor     eax, ebx
.text:00401D8A                 xor     edi, ecx
.text:00401D8C                 or      eax, edi
.text:00401D8E                 jnz     short loc_401DB8
.text:00401D90                 mov     edi, [ebp+var_80]
.text:00401D93                 mov     ebx, [ebp+var_7C]
.text:00401D96                 mov     eax, [ebp+var_AC]
.text:00401D9C                 mov     ecx, [ebp+var_B0]
.text:00401DA2                 xor     eax, ebx
.text:00401DA4                 xor     edi, ecx
.text:00401DA6                 or      eax, edi
.text:00401DA8                 jnz     short loc_401DB8
.text:00401DAA                 mov     edx, ds:FileHandle
.text:00401DB0                 test    edx, edx
.text:00401DB2                 jnz     loc_402108
.text:00401DB8
.text:00401DB8 loc_401DB8:                             ; CODE XREF: sub_4018A0+4D4↑j
.text:00401DB8                                         ; sub_4018A0+4EE↑j ...
.text:00401DB8                 xor     eax, eax
.text:00401DBA                 cmp     [ebp+var_B6], 0
.text:00401DC1                 jnz     short loc_401DCC
.text:00401DC3                 cmp     [ebp+var_B3], 0
.text:00401DCA                 jz      short loc_401DD1
.text:00401DCC
.text:00401DCC loc_401DCC:                             ; CODE XREF: sub_4018A0+521↑j
.text:00401DCC                 mov     eax, 1
.text:00401DD1
.text:00401DD1 loc_401DD1:                             ; CODE XREF: sub_4018A0+52A↑j
.text:00401DD1                 movzx   edi, [ebp+var_B7]
.text:00401DD8                 movzx   ebx, [ebp+var_B8]
.text:00401DDF                 or      eax, edi
.text:00401DE1                 or      eax, ebx
.text:00401DE3                 mov     dword ptr [ebp+var_C4], edi
.text:00401DE9                 movzx   edi, [ebp+var_B5]
.text:00401DF0                 mov     dword ptr [ebp+var_C8], ebx
.text:00401DF6                 or      eax, edi
.text:00401DF8                 jnz     loc_402010
.text:00401DFE                 mov     edi, [ebp+var_8C]
.text:00401E04                 cmp     edi, esi
.text:00401E06                 jnb     short loc_401E0A
.text:00401E08                 mov     edi, esi
.text:00401E0A
.text:00401E0A loc_401E0A:                             ; CODE XREF: sub_4018A0+566↑j
.text:00401E0A                 mov     eax, [ebp+var_90]
.text:00401E10                 lea     ecx, [eax+edi-1]
.text:00401E14                 mov     [esp+108h+Category], ecx ; size_t
.text:00401E17                 call    sub_4038C0
.text:00401E1C                 mov     [ebp+Block], eax
.text:00401E22                 mov     esi, [ebp+var_90]
.text:00401E28                 xor     edx, edx
.text:00401E2A                 mov     [ebp+var_C9], 0
.text:00401E31                 lea     ebx, [esi+eax-1]
.text:00401E35                 mov     eax, ebx
.text:00401E37                 div     esi
.text:00401E39                 mov     esi, ebx
.text:00401E3B                 sub     esi, edx
.text:00401E3D
.text:00401E3D loc_401E3D:                             ; CODE XREF: sub_4018A0+5D8↓j
.text:00401E3D                                         ; sub_4018A0+604↓j
.text:00401E3D                 mov     [esp+108h+var_100], edi
.text:00401E41                 mov     edx, ds:FileHandle
.text:00401E47                 mov     [esp+108h+Locale], esi
.text:00401E4B                 mov     [esp+108h+Category], edx
.text:00401E4E                 call    sub_404300
.text:00401E53                 cmp     eax, 0FFFFFFFFh
.text:00401E56                 mov     ebx, eax
.text:00401E58                 jz      loc_401FE2
.text:00401E5E                 test    eax, eax
.text:00401E60                 jz      short loc_401EA6
.text:00401E62                 mov     [esp+108h+var_100], eax
.text:00401E66                 mov     [esp+108h+Locale], esi
.text:00401E6A                 mov     [esp+108h+Category], 1
.text:00401E71                 call    sub_4042A0
.text:00401E76                 cmp     eax, ebx
.text:00401E78                 jz      short loc_401E3D
.text:00401E7A                 mov     [esp+108h+Category], (offset stru_40182E._cnt+2)
.text:00401E81                 call    ds:libintl_gettext
.text:00401E87                 mov     ebx, eax
.text:00401E89                 call    _errno
.text:00401E8E                 mov     [esp+108h+var_100], ebx ; char *
.text:00401E92                 mov     ebx, [eax]
.text:00401E94                 mov     [esp+108h+Category], 1 ; Code
.text:00401E9B                 mov     [esp+108h+Locale], ebx ; ErrorMessage
.text:00401E9F                 call    sub_405830
.text:00401EA4                 jmp     short loc_401E3D
.text:00401EA6 ; ---------------------------------------------------------------------------
.text:00401EA6
.text:00401EA6 loc_401EA6:                             ; CODE XREF: sub_4018A0+5C0↑j
.text:00401EA6                 cmp     [ebp+var_99], 0
.text:00401EAD                 jz      short loc_401EB6
.text:00401EAF                 mov     [ebp+var_C9], 1
.text:00401EB6
.text:00401EB6 loc_401EB6:                             ; CODE XREF: sub_4018A0+60D↑j
.text:00401EB6                                         ; sub_4018A0+76B↓j
.text:00401EB6                 movzx   ecx, [ebp+var_C9]
.text:00401EBD                 mov     [ebp+var_99], cl
.text:00401EC3
.text:00401EC3 loc_401EC3:                             ; CODE XREF: sub_4018A0+863↓j
.text:00401EC3                 mov     edi, [ebp+Block]
.text:00401EC9                 mov     [esp+108h+Category], edi ; Block
.text:00401ECC                 call    free
.text:00401ED1
.text:00401ED1 loc_401ED1:                             ; CODE XREF: sub_4018A0+89E↓j
.text:00401ED1                 cld
.text:00401ED2                 mov     esi, ds:FileName
.text:00401ED8                 mov     edi, offset stru_40182E._cnt
.text:00401EDD                 mov     ecx, 2
.text:00401EE2                 repe cmpsb
.text:00401EE4                 jnz     loc_401F97
.text:00401EEA
.text:00401EEA loc_401EEA:                             ; CODE XREF: sub_4018A0+707↓j
.text:00401EEA                                         ; sub_4018A0+73D↓j
.text:00401EEA                 inc     [ebp+var_A0]
.text:00401EF0                 mov     eax, [ebp+arg_0]
.text:00401EF3                 cmp     [ebp+var_A0], eax
.text:00401EF9                 jl      loc_401CF9
.text:00401EFF                 cmp     [ebp+var_B2], 0
.text:00401F06                 jnz     short loc_401F58
.text:00401F08
.text:00401F08 loc_401F08:                             ; CODE XREF: sub_4018A0+6C6↓j
.text:00401F08                                         ; sub_4018A0+6F2↓j
.text:00401F08                 mov     [esp+108h+Category], 1 ; FileHandle
.text:00401F0F                 call    _close
.text:00401F14                 test    eax, eax
.text:00401F16                 js      short loc_401F2C
.text:00401F18
.text:00401F18 loc_401F18:                             ; CODE XREF: sub_4018A0+6B6↓j
.text:00401F18                 xor     ebx, ebx
.text:00401F1A                 cmp     [ebp+var_99], 0
.text:00401F21                 setz    bl
.text:00401F24                 mov     [esp+108h+Category], ebx
.text:00401F27                 jmp     loc_401A15
.text:00401F2C ; ---------------------------------------------------------------------------
.text:00401F2C
.text:00401F2C loc_401F2C:                             ; CODE XREF: sub_4018A0+676↑j
.text:00401F2C                 mov     [esp+108h+Category], (offset stru_40182E._file+2)
.text:00401F33                 call    ds:libintl_gettext
.text:00401F39                 mov     esi, eax
.text:00401F3B                 call    _errno
.text:00401F40                 mov     [esp+108h+var_100], esi ; char *
.text:00401F44                 mov     edx, [eax]
.text:00401F46                 mov     [esp+108h+Category], 1 ; Code
.text:00401F4D                 mov     [esp+108h+Locale], edx ; ErrorMessage
.text:00401F51                 call    sub_405830
.text:00401F56                 jmp     short loc_401F18
.text:00401F58 ; ---------------------------------------------------------------------------
.text:00401F58
.text:00401F58 loc_401F58:                             ; CODE XREF: sub_4018A0+666↑j
.text:00401F58                 mov     [esp+108h+Category], 0 ; FileHandle
.text:00401F5F                 call    _close
.text:00401F64                 test    eax, eax
.text:00401F66                 jns     short loc_401F08
.text:00401F68                 mov     [esp+108h+Category], offset aClosingStandar_0 ; "closing standard input"
.text:00401F6F                 call    ds:libintl_gettext
.text:00401F75                 mov     edi, eax
.text:00401F77                 call    _errno
.text:00401F7C                 mov     [esp+108h+var_100], edi ; char *
.text:00401F80                 mov     ecx, [eax]
.text:00401F82                 mov     [esp+108h+Category], 1 ; Code
.text:00401F89                 mov     [esp+108h+Locale], ecx ; ErrorMessage
.text:00401F8D                 call    sub_405830
.text:00401F92                 jmp     loc_401F08
.text:00401F97 ; ---------------------------------------------------------------------------
.text:00401F97
.text:00401F97 loc_401F97:                             ; CODE XREF: sub_4018A0+644↑j
.text:00401F97                 mov     edx, ds:FileHandle
.text:00401F9D                 mov     [esp+108h+Category], edx ; FileHandle
.text:00401FA0                 call    _close
.text:00401FA5                 test    eax, eax
.text:00401FA7                 jns     loc_401EEA
.text:00401FAD
.text:00401FAD loc_401FAD:                             ; CODE XREF: sub_4018A0+492↑j
.text:00401FAD                 call    _errno
.text:00401FB2                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:00401FBA                 mov     esi, ds:FileName
.text:00401FC0                 mov     dword ptr [esp+108h+var_FC], esi ; char
.text:00401FC4                 mov     ebx, [eax]
.text:00401FC6                 mov     [esp+108h+Category], 0 ; Code
.text:00401FCD                 mov     [esp+108h+Locale], ebx ; ErrorMessage
.text:00401FD1                 call    sub_405830
.text:00401FD6                 mov     [ebp+var_99], 0
.text:00401FDD                 jmp     loc_401EEA
.text:00401FE2 ; ---------------------------------------------------------------------------
.text:00401FE2
.text:00401FE2 loc_401FE2:                             ; CODE XREF: sub_4018A0+5B8↑j
.text:00401FE2                 call    _errno
.text:00401FE7                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:00401FEF                 mov     ecx, ds:FileName
.text:00401FF5                 mov     dword ptr [esp+108h+var_FC], ecx ; char
.text:00401FF9                 mov     edi, [eax]
.text:00401FFB                 mov     [esp+108h+Category], 0 ; Code
.text:00402002                 mov     [esp+108h+Locale], edi ; ErrorMessage
.text:00402006                 call    sub_405830
.text:0040200B                 jmp     loc_401EB6
.text:00402010 ; ---------------------------------------------------------------------------
.text:00402010
.text:00402010 loc_402010:                             ; CODE XREF: sub_4018A0+558↑j
.text:00402010                 mov     eax, [ebp+var_90]
.text:00402016                 lea     ebx, [eax+esi]
.text:00402019                 mov     [esp+108h+Category], ebx ; size_t
.text:0040201C                 call    sub_4038C0
.text:00402021                 mov     [ebp+Block], eax
.text:00402027                 mov     ecx, [ebp+var_8C]
.text:0040202D                 mov     edx, [ebp+var_90]
.text:00402033                 lea     eax, [ecx+esi*4]
.text:00402036                 lea     ebx, [edx+eax+12h]
.text:0040203A                 mov     [esp+108h+Category], ebx ; size_t
.text:0040203D                 call    sub_4038C0
.text:00402042                 mov     [ebp+var_98], eax
.text:00402048                 mov     ecx, [ebp+var_90]
.text:0040204E                 xor     edx, edx
.text:00402050                 mov     dword ptr [esp+108h+var_E4], edi ; char
.text:00402054                 movzx   edi, [ebp+var_B6]
.text:0040205B                 lea     ebx, [ecx+eax-1]
.text:0040205F                 mov     eax, ebx
.text:00402061                 div     [ebp+var_90]
.text:00402067                 mov     eax, [ebp+Block]
.text:0040206D                 mov     dword ptr [esp+108h+var_E8], edi ; char
.text:00402071                 movzx   edi, [ebp+var_B3]
.text:00402078                 mov     [ebp+var_CA], 0
.text:0040207F                 mov     [esp+108h+Locale], esi ; int
.text:00402083                 mov     dword ptr [esp+108h+var_F0], edi ; char
.text:00402087                 mov     edi, [ebp+var_8C]
.text:0040208D                 mov     dword ptr [esp+108h+var_FC], edi ; int
.text:00402091                 sub     ebx, edx
.text:00402093                 mov     edx, [ebp+var_90]
.text:00402099                 mov     [esp+108h+var_100], ebx ; void *
.text:0040209D                 lea     ecx, [edx+eax-1]
.text:004020A1                 mov     eax, ecx
.text:004020A3                 xor     edx, edx
.text:004020A5                 div     [ebp+var_90]
.text:004020AB                 mov     eax, dword ptr [ebp+var_C4]
.text:004020B1                 mov     dword ptr [esp+108h+var_F8], eax ; char
.text:004020B5                 sub     ecx, edx
.text:004020B7                 movzx   edx, [ebp+var_B4]
.text:004020BE                 mov     [esp+108h+Category], ecx ; int
.text:004020C1                 mov     dword ptr [esp+108h+var_EC], edx ; char
.text:004020C5                 mov     edx, dword ptr [ebp+var_C8]
.text:004020CB                 mov     dword ptr [esp+108h+var_F4], edx ; char
.text:004020CF                 call    sub_402440
.text:004020D4                 test    al, al
.text:004020D6                 jz      short loc_4020E8
.text:004020D8                 cmp     [ebp+var_99], 0
.text:004020DF                 jz      short loc_4020E8
.text:004020E1                 mov     [ebp+var_CA], 1
.text:004020E8
.text:004020E8 loc_4020E8:                             ; CODE XREF: sub_4018A0+836↑j
.text:004020E8                                         ; sub_4018A0+83F↑j
.text:004020E8                 movzx   ecx, [ebp+var_CA]
.text:004020EF                 mov     esi, [ebp+var_98]
.text:004020F5                 mov     [ebp+var_99], cl
.text:004020FB                 mov     [esp+108h+Category], esi ; Block
.text:004020FE                 call    free
.text:00402103                 jmp     loc_401EC3
.text:00402108 ; ---------------------------------------------------------------------------
.text:00402108
.text:00402108 loc_402108:                             ; CODE XREF: sub_4018A0+512↑j
.text:00402108                 mov     [esp+108h+Category], offset aSInputFileIsOu ; "%s: input file is output file"
.text:0040210F                 call    ds:libintl_gettext
.text:00402115                 mov     [esp+108h+Locale], 0 ; ErrorMessage
.text:0040211D                 mov     esi, ds:FileName
.text:00402123                 mov     [esp+108h+var_100], eax ; char *
.text:00402127                 mov     dword ptr [esp+108h+var_FC], esi ; char
.text:0040212B
.text:0040212B loc_40212B:                             ; CODE XREF: sub_4018A0+8C0↓j
.text:0040212B                 mov     [esp+108h+Category], 0 ; Code
.text:00402132                 call    sub_405830
.text:00402137                 mov     [ebp+var_99], 0
.text:0040213E                 jmp     loc_401ED1
.text:00402143 ; ---------------------------------------------------------------------------
.text:00402143
.text:00402143 loc_402143:                             ; CODE XREF: sub_4018A0+4B2↑j
.text:00402143                 call    _errno
.text:00402148                 mov     [esp+108h+var_100], offset aS ; "%s"
.text:00402150                 mov     edi, ds:FileName
.text:00402156                 mov     dword ptr [esp+108h+var_FC], edi
.text:0040215A                 mov     ecx, [eax]
.text:0040215C                 mov     [esp+108h+Locale], ecx
.text:00402160                 jmp     short loc_40212B
.text:00402162 ; ---------------------------------------------------------------------------
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: sub_4018A0+473↑j
.text:00402162                 cmp     byte ptr [eax+1], 0
.text:00402166                 jnz     loc_401D19
.text:0040216C                 mov     [ebp+var_B2], 1
.text:00402173                 xor     edx, edx
.text:00402175                 cmp     [ebp+var_BA], 0
.text:0040217C                 mov     ds:FileHandle, edx
.text:00402182                 jz      loc_401D38
.text:00402188                 mov     [esp+108h+Category], 0 ; FileHandle
.text:0040218F                 call    _isatty
.text:00402194                 test    eax, eax
.text:00402196                 jz      short loc_4021A3
.text:00402198                 mov     ecx, [ebp+arg_0]
.text:0040219B                 cmp     dword_40E040, ecx
.text:004021A1                 jle     short loc_4021D4
.text:004021A3
.text:004021A3 loc_4021A3:                             ; CODE XREF: sub_4018A0+8F6↑j
.text:004021A3                 mov     edi, ds:FileHandle
.text:004021A9                 mov     [esp+108h+Category], edi ; FileHandle
.text:004021AC                 call    _isatty
.text:004021B1                 test    eax, eax
.text:004021B3                 jnz     loc_401D38
.text:004021B9                 mov     [esp+108h+Locale], 8000h ; Mode
.text:004021C1                 mov     esi, ds:FileHandle
.text:004021C7                 mov     [esp+108h+Category], esi ; FileHandle
.text:004021CA
.text:004021CA loc_4021CA:                             ; CODE XREF: sub_4018A0+943↓j
.text:004021CA                 call    _setmode
.text:004021CF                 jmp     loc_401D38
.text:004021D4 ; ---------------------------------------------------------------------------
.text:004021D4
.text:004021D4 loc_4021D4:                             ; CODE XREF: sub_4018A0+901↑j
.text:004021D4                 mov     [esp+108h+Locale], 4000h
.text:004021DC                 mov     [esp+108h+Category], 1
.text:004021E3                 jmp     short loc_4021CA
.text:004021E5 ; ---------------------------------------------------------------------------
.text:004021E5
.text:004021E5 loc_4021E5:                             ; CODE XREF: sub_4018A0+436↑j
.text:004021E5                 mov     [esp+108h+Category], 0 ; FileHandle
.text:004021EC                 mov     esi, 8000h
.text:004021F1                 mov     [ebp+OpenFlag], esi
.text:004021F7                 call    _isatty
.text:004021FC                 test    eax, eax
.text:004021FE                 jz      short loc_40222D
.text:00402200
.text:00402200 loc_402200:                             ; CODE XREF: sub_4018A0+9A1↓j
.text:00402200                 mov     [esp+108h+Category], 1 ; FileHandle
.text:00402207                 call    _isatty
.text:0040220C                 test    eax, eax
.text:0040220E                 jz      loc_401CDC
.text:00402214                 mov     [esp+108h+Locale], 4000h ; Mode
.text:0040221C                 mov     [esp+108h+Category], 1 ; FileHandle
.text:00402223                 call    _setmode
.text:00402228                 jmp     loc_401CDC
.text:0040222D ; ---------------------------------------------------------------------------
.text:0040222D
.text:0040222D loc_40222D:                             ; CODE XREF: sub_4018A0+95E↑j
.text:0040222D                 mov     [esp+108h+Locale], 8000h ; Mode
.text:00402235                 mov     [esp+108h+Category], 0 ; FileHandle
.text:0040223C                 call    _setmode
.text:00402241                 jmp     short loc_402200
.text:00402243 ; ---------------------------------------------------------------------------
.text:00402243
.text:00402243 loc_402243:                             ; CODE XREF: sub_4018A0+429↑j
.text:00402243                 mov     [esp+108h+Category], 1 ; FileHandle
.text:0040224A                 call    _isatty
.text:0040224F                 test    eax, eax
.text:00402251                 jnz     loc_401CCF
.text:00402257
.text:00402257 loc_402257:                             ; CODE XREF: sub_4018A0+401↑j
.text:00402257                 mov     [ebp+var_BA], 1
.text:0040225E                 mov     [esp+108h+Category], 1 ; FileHandle
.text:00402265                 call    _isatty
.text:0040226A                 test    eax, eax
.text:0040226C                 jz      short loc_40227E
.text:0040226E
.text:0040226E loc_40226E:                             ; CODE XREF: sub_4018A0+9F2↓j
.text:0040226E                 mov     edx, 8000h
.text:00402273                 mov     [ebp+OpenFlag], edx
.text:00402279                 jmp     loc_401CDC
.text:0040227E ; ---------------------------------------------------------------------------
.text:0040227E
.text:0040227E loc_40227E:                             ; CODE XREF: sub_4018A0+9CC↑j
.text:0040227E                 mov     [esp+108h+Locale], 8000h ; Mode
.text:00402286                 mov     [esp+108h+Category], 1 ; FileHandle
.text:0040228D                 call    _setmode
.text:00402292                 jmp     short loc_40226E
.text:00402294 ; ---------------------------------------------------------------------------
.text:00402294
.text:00402294 loc_402294:                             ; CODE XREF: sub_4018A0+3ED↑j
.text:00402294                 mov     ebx, [ebp+var_78]
.text:00402297                 mov     ecx, [ebp+var_74]
.text:0040229A                 mov     esi, [ebp+var_80]
.text:0040229D                 mov     [ebp+var_A8], ebx
.text:004022A3                 mov     eax, [ebp+var_7C]
.text:004022A6                 mov     [ebp+var_A4], ecx
.text:004022AC                 mov     [ebp+var_B0], esi
.text:004022B2                 mov     [ebp+var_AC], eax
.text:004022B8                 jmp     loc_401C9A
.text:004022BD ; ---------------------------------------------------------------------------
.text:004022BD
.text:004022BD loc_4022BD:                             ; CODE XREF: sub_4018A0+3B6↑j
.text:004022BD                 mov     [esp+108h+Category], offset aStandardOutput ; "standard output"
.text:004022C4                 call    ds:libintl_gettext
.text:004022CA                 mov     esi, eax
.text:004022CC                 call    _errno
.text:004022D1                 mov     [esp+108h+var_100], esi ; char *
.text:004022D5                 mov     edi, [eax]
.text:004022D7                 mov     [esp+108h+Category], 1 ; Code
.text:004022DE                 mov     [esp+108h+Locale], edi ; ErrorMessage
.text:004022E2                 call    sub_405830
.text:004022E7                 jmp     loc_401C5C
.text:004022E7 sub_4018A0      endp
.text:004022E7
.text:004022E7 ; ---------------------------------------------------------------------------
.text:004022EC                 align 10h
.text:004022F0                 push    ebx
.text:004022F1                 sub     esp, 18h
.text:004022F4                 mov     ebx, [esp+20h]
.text:004022F8                 test    ebx, ebx
.text:004022FA                 jz      short loc_402330
.text:004022FC                 mov     dword ptr [esp], offset aTrySHelpForMor ; "Try `%s --help' for more information.\n"
.text:00402303                 call    ds:libintl_gettext
.text:00402309                 mov     edx, ds:_iob
.text:0040230F                 mov     ecx, ds:dword_40F520
.text:00402315                 add     edx, 40h ; '@'
.text:00402318                 mov     [esp+8], ecx
.text:0040231C                 mov     [esp+4], eax
.text:00402320                 mov     [esp], edx
.text:00402323                 call    fprintf
.text:00402328
.text:00402328 loc_402328:                             ; CODE XREF: .text:00402438↓j
.text:00402328                 mov     [esp], ebx
.text:0040232B                 call    exit
.text:00402330 ; ---------------------------------------------------------------------------
.text:00402330
.text:00402330 loc_402330:                             ; CODE XREF: .text:004022FA↑j
.text:00402330                 mov     dword ptr [esp], offset aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]...\n"
.text:00402337                 call    ds:libintl_gettext
.text:0040233D                 mov     ecx, ds:dword_40F520
.text:00402343                 mov     [esp], eax
.text:00402346                 mov     [esp+4], ecx
.text:0040234A                 call    printf
.text:0040234F                 mov     dword ptr [esp], offset aConcatenateFil ; "Concatenate FILE(s), or standard input,"...
.text:00402356                 call    ds:libintl_gettext
.text:0040235C                 mov     ecx, ds:_iob
.text:00402362                 add     ecx, 20h ; ' '
.text:00402365                 mov     [esp+4], ecx
.text:00402369                 mov     [esp], eax
.text:0040236C                 call    fputs
.text:00402371                 mov     dword ptr [esp], offset aTEquivalentToV ; "  -t                       equivalent t"...
.text:00402378                 call    ds:libintl_gettext
.text:0040237E                 mov     ecx, ds:_iob
.text:00402384                 add     ecx, 20h ; ' '
.text:00402387                 mov     [esp+4], ecx
.text:0040238B                 mov     [esp], eax
.text:0040238E                 call    fputs
.text:00402393                 mov     dword ptr [esp], offset aHelpDisplayThi ; "      --help     display this help and "...
.text:0040239A                 call    ds:libintl_gettext
.text:004023A0                 mov     ecx, ds:_iob
.text:004023A6                 add     ecx, 20h ; ' '
.text:004023A9                 mov     [esp+4], ecx
.text:004023AD                 mov     [esp], eax
.text:004023B0                 call    fputs
.text:004023B5                 mov     dword ptr [esp], offset aVersionOutputV ; "      --version  output version informa"...
.text:004023BC                 call    ds:libintl_gettext
.text:004023C2                 mov     ecx, ds:_iob
.text:004023C8                 add     ecx, 20h ; ' '
.text:004023CB                 mov     [esp+4], ecx
.text:004023CF                 mov     [esp], eax
.text:004023D2                 call    fputs
.text:004023D7                 mov     dword ptr [esp], offset aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:004023DE                 call    ds:libintl_gettext
.text:004023E4                 mov     ecx, ds:_iob
.text:004023EA                 add     ecx, 20h ; ' '
.text:004023ED                 mov     [esp+4], ecx
.text:004023F1                 mov     [esp], eax
.text:004023F4                 call    fputs
.text:004023F9                 mov     dword ptr [esp], offset aBBinaryUseBina ; "\n  -B, --binary             use binary"...
.text:00402400                 call    ds:libintl_gettext
.text:00402406                 mov     ecx, ds:_iob
.text:0040240C                 add     ecx, 20h ; ' '
.text:0040240F                 mov     [esp+4], ecx
.text:00402413                 mov     [esp], eax
.text:00402416                 call    fputs
.text:0040241B                 mov     dword ptr [esp], offset aReportBugsToS ; "\nReport bugs to <%s>.\n"
.text:00402422                 call    ds:libintl_gettext
.text:00402428                 mov     dword ptr [esp+4], offset aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00402430                 mov     [esp], eax
.text:00402433                 call    printf
.text:00402438                 jmp     loc_402328
.text:00402438 ; ---------------------------------------------------------------------------
.text:0040243D                 align 10h
.text:00402440
.text:00402440 ; =============== S U B R O U T I N E =======================================
.text:00402440
.text:00402440
.text:00402440 ; int __cdecl sub_402440(int, int, void *, int, char, char, char, char, char, char)
.text:00402440 sub_402440      proc near               ; CODE XREF: sub_4018A0+82F↑p
.text:00402440
.text:00402440 var_3C          = dword ptr -3Ch
.text:00402440 Src             = dword ptr -38h
.text:00402440 Size            = dword ptr -34h
.text:00402440 var_30          = byte ptr -30h
.text:00402440 var_24          = dword ptr -24h
.text:00402440 var_20          = dword ptr -20h
.text:00402440 var_1C          = dword ptr -1Ch
.text:00402440 var_16          = byte ptr -16h
.text:00402440 var_15          = byte ptr -15h
.text:00402440 var_14          = byte ptr -14h
.text:00402440 var_13          = byte ptr -13h
.text:00402440 var_12          = byte ptr -12h
.text:00402440 var_11          = byte ptr -11h
.text:00402440 arg_0           = dword ptr  4
.text:00402440 arg_4           = dword ptr  8
.text:00402440 arg_8           = dword ptr  0Ch
.text:00402440 arg_C           = dword ptr  10h
.text:00402440 arg_10          = byte ptr  14h
.text:00402440 arg_14          = byte ptr  18h
.text:00402440 arg_18          = byte ptr  1Ch
.text:00402440 arg_1C          = byte ptr  20h
.text:00402440 arg_20          = byte ptr  24h
.text:00402440 arg_24          = byte ptr  28h
.text:00402440
.text:00402440                 push    ebp
.text:00402441                 push    edi
.text:00402442                 push    esi
.text:00402443                 push    ebx
.text:00402444                 sub     esp, 2Ch
.text:00402447                 mov     esi, [esp+3Ch+arg_8]
.text:0040244B                 movzx   edx, [esp+3Ch+arg_14]
.text:00402450                 movzx   ecx, [esp+3Ch+arg_18]
.text:00402455                 movzx   ebx, [esp+3Ch+arg_10]
.text:0040245A                 mov     [esp+3Ch+var_12], dl
.text:0040245E                 mov     [esp+3Ch+var_13], cl
.text:00402462                 movzx   edx, [esp+3Ch+arg_20]
.text:00402467                 movzx   ecx, [esp+3Ch+arg_24]
.text:0040246C                 mov     [esp+3Ch+var_11], bl
.text:00402470                 movzx   ebx, [esp+3Ch+arg_1C]
.text:00402475                 mov     [esp+3Ch+var_15], dl
.text:00402479                 mov     edx, [esp+3Ch+arg_0]
.text:0040247D                 mov     [esp+3Ch+var_16], cl
.text:00402481                 mov     ecx, [esp+3Ch+arg_C]
.text:00402485                 mov     ebp, edx
.text:00402487                 mov     [esp+3Ch+var_14], bl
.text:0040248B                 inc     ebp
.text:0040248C                 mov     ebx, ds:dword_40F000
.text:00402492                 mov     [esp+3Ch+var_1C], edx
.text:00402496                 lea     edx, [ecx+esi]
.text:00402499                 mov     [esp+3Ch+var_20], ebx
.text:0040249D                 mov     [esp+3Ch+var_24], edx
.text:004024A1                 jmp     short loc_4024B0
.text:004024A1 ; ---------------------------------------------------------------------------
.text:004024A3                 align 10h
.text:004024B0
.text:004024B0 loc_4024B0:                             ; CODE XREF: sub_402440+61↑j
.text:004024B0                                         ; sub_402440+193↓j ...
.text:004024B0                 cmp     [esp+3Ch+var_24], esi
.text:004024B4                 ja      short loc_402532
.text:004024B6                 mov     edi, [esp+3Ch+arg_8]
.text:004024BA                 lea     esi, [esi+0]
.text:004024C0
.text:004024C0 loc_4024C0:                             ; CODE XREF: sub_402440+D6↓j
.text:004024C0                 mov     [esp+3Ch+Src], edi
.text:004024C4                 mov     ecx, [esp+3Ch+arg_C]
.text:004024C8                 mov     [esp+3Ch+var_3C], 1
.text:004024CF                 mov     [esp+3Ch+Size], ecx
.text:004024D3                 call    sub_4042A0
.text:004024D8                 cmp     eax, [esp+3Ch+arg_C]
.text:004024DC                 jz      short loc_402508
.text:004024DE                 mov     [esp+3Ch+var_3C], (offset stru_40182E._cnt+2)
.text:004024E5                 call    ds:libintl_gettext
.text:004024EB                 mov     ebx, eax
.text:004024ED                 call    _errno
.text:004024F2                 mov     [esp+3Ch+Size], ebx ; char *
.text:004024F6                 mov     edx, [eax]
.text:004024F8                 mov     [esp+3Ch+var_3C], 1 ; Code
.text:004024FF                 mov     [esp+3Ch+Src], edx ; ErrorMessage
.text:00402503                 call    sub_405830
.text:00402508
.text:00402508 loc_402508:                             ; CODE XREF: sub_402440+9C↑j
.text:00402508                 mov     eax, [esp+3Ch+arg_C]
.text:0040250C                 mov     ebx, esi
.text:0040250E                 add     edi, eax
.text:00402510                 sub     ebx, edi
.text:00402512                 cmp     [esp+3Ch+arg_C], ebx
.text:00402516                 jbe     short loc_4024C0
.text:00402518                 mov     [esp+3Ch+Size], ebx ; Size
.text:0040251C                 mov     esi, [esp+3Ch+arg_8]
.text:00402520                 mov     [esp+3Ch+Src], edi ; Src
.text:00402524                 mov     [esp+3Ch+var_3C], esi ; void *
.text:00402527                 call    memmove
.text:0040252C                 mov     esi, [esp+3Ch+arg_8]
.text:00402530                 add     esi, ebx
.text:00402532
.text:00402532 loc_402532:                             ; CODE XREF: sub_402440+74↑j
.text:00402532                 cmp     ebp, [esp+3Ch+var_1C]
.text:00402536                 jbe     loc_402775
.text:0040253C                 mov     [esp+3Ch+var_3C], 1
.text:00402543                 mov     ebx, [esp+3Ch+arg_8]
.text:00402547                 mov     edi, esi
.text:00402549                 mov     ebp, [esp+3Ch+arg_8]
.text:0040254D                 sub     edi, ebx
.text:0040254F                 mov     [esp+3Ch+Size], edi
.text:00402553                 mov     [esp+3Ch+Src], ebp
.text:00402557                 call    sub_4042A0
.text:0040255C                 cmp     eax, edi
.text:0040255E                 jz      short loc_40258A
.text:00402560                 mov     [esp+3Ch+var_3C], (offset stru_40182E._cnt+2)
.text:00402567                 call    ds:libintl_gettext
.text:0040256D                 mov     esi, eax
.text:0040256F                 call    _errno
.text:00402574                 mov     [esp+3Ch+Size], esi ; char *
.text:00402578                 mov     ecx, [eax]
.text:0040257A                 mov     [esp+3Ch+var_3C], 1 ; Code
.text:00402581                 mov     [esp+3Ch+Src], ecx ; ErrorMessage
.text:00402585                 call    sub_405830
.text:0040258A
.text:0040258A loc_40258A:                             ; CODE XREF: sub_402440+11E↑j
.text:0040258A                 mov     ebp, [esp+3Ch+arg_4]
.text:0040258E                 mov     edi, [esp+3Ch+arg_0]
.text:00402592                 mov     edx, ds:FileHandle
.text:00402598                 mov     [esp+3Ch+Size], ebp
.text:0040259C                 mov     esi, [esp+3Ch+arg_8]
.text:004025A0                 mov     [esp+3Ch+Src], edi
.text:004025A4                 mov     [esp+3Ch+var_3C], edx
.text:004025A7                 call    sub_404300
.text:004025AC                 cmp     eax, 0FFFFFFFFh
.text:004025AF                 jz      loc_40273E
.text:004025B5                 test    eax, eax
.text:004025B7                 jz      loc_402727
.text:004025BD                 mov     ebp, [esp+3Ch+arg_0]
.text:004025C1                 lea     edi, [eax+ebp]
.text:004025C4                 mov     [esp+3Ch+var_1C], edi
.text:004025C8                 mov     byte ptr [edi], 0Ah
.text:004025CB
.text:004025CB loc_4025CB:                             ; CODE XREF: sub_402440+359↓j
.text:004025CB                                         ; sub_402440+3D4↓j
.text:004025CB                 movzx   ebx, byte ptr [ebp+0]
.text:004025CF                 inc     ebp
.text:004025D0                 cmp     bl, 0Ah
.text:004025D3                 jz      loc_4024B0
.text:004025D9                 mov     ecx, [esp+3Ch+var_20]
.text:004025DD                 test    ecx, ecx
.text:004025DF                 js      short loc_40264A
.text:004025E1                 cmp     [esp+3Ch+var_13], 0
.text:004025E6                 jz      short loc_40264A
.text:004025E8                 mov     ecx, off_40E02C ; "0\t"
.text:004025EE                 mov     esi, esi
.text:004025F0
.text:004025F0 loc_4025F0:                             ; CODE XREF: sub_402440+1CF↓j
.text:004025F0                 movzx   edx, byte ptr [ecx]
.text:004025F3                 mov     al, dl
.text:004025F5                 inc     al
.text:004025F7                 mov     [ecx], al
.text:004025F9                 cmp     dl, 38h ; '8'
.text:004025FC                 jle     loc_40271C
.text:00402602                 mov     byte ptr [ecx], 30h ; '0'
.text:00402605                 mov     eax, off_40E028 ; "0\t"
.text:0040260A                 dec     ecx
.text:0040260B                 cmp     ecx, eax
.text:0040260D                 mov     edx, eax
.text:0040260F                 jnb     short loc_4025F0
.text:00402611                 cmp     eax, offset a0  ; "                 0\t"
.text:00402616                 jbe     loc_402710
.text:0040261C                 dec     eax
.text:0040261D                 mov     off_40E028, eax ; "0\t"
.text:00402622                 mov     byte ptr [edx-1], 31h ; '1'
.text:00402626                 mov     eax, off_40E028 ; "0\t"
.text:0040262B
.text:0040262B loc_40262B:                             ; CODE XREF: sub_402440+2D7↓j
.text:0040262B                 mov     edx, dword_40E024
.text:00402631                 cmp     eax, edx
.text:00402633                 jnb     short loc_40263C
.text:00402635                 dec     edx
.text:00402636                 mov     dword_40E024, edx
.text:0040263C
.text:0040263C loc_40263C:                             ; CODE XREF: sub_402440+1F3↑j
.text:0040263C                                         ; sub_402440+2E2↓j
.text:0040263C                 mov     [esp+3Ch+var_3C], esi
.text:0040263F                 mov     [esp+3Ch+Src], edx
.text:00402643                 call    sub_408EB0
.text:00402648                 mov     esi, eax
.text:0040264A
.text:0040264A loc_40264A:                             ; CODE XREF: sub_402440+19F↑j
.text:0040264A                                         ; sub_402440+1A6↑j
.text:0040264A                 cmp     [esp+3Ch+var_11], 0
.text:0040264F                 jz      loc_4026E0
.text:00402655                 lea     esi, [esi+0]
.text:00402659                 lea     edi, [edi+0]
.text:00402660
.text:00402660 loc_402660:                             ; CODE XREF: sub_402440+258↓j
.text:00402660                 cmp     bl, 1Fh
.text:00402663                 jbe     short loc_4026B3
.text:00402665                 cmp     bl, 7Eh ; '~'
.text:00402668                 jbe     short loc_402690
.text:0040266A                 cmp     bl, 7Fh
.text:0040266D                 jz      short loc_40269A
.text:0040266F                 mov     byte ptr [esi], 4Dh ; 'M'
.text:00402672                 inc     esi
.text:00402673                 mov     byte ptr [esi], 2Dh ; '-'
.text:00402676                 inc     esi
.text:00402677                 cmp     bl, 9Fh ; 'Ÿ'
.text:0040267A                 jbe     short loc_4026A3
.text:0040267C                 cmp     bl, 0FFh
.text:0040267F                 jz      short loc_40269A
.text:00402681                 add     bl, 80h ; '€'
.text:00402684                 lea     esi, [esi+0]
.text:0040268A                 lea     edi, [edi+0]
.text:00402690
.text:00402690 loc_402690:                             ; CODE XREF: sub_402440+228↑j
.text:00402690                                         ; sub_402440+271↓j
.text:00402690                 mov     [esi], bl
.text:00402692
.text:00402692 loc_402692:                             ; CODE XREF: sub_402440+261↓j
.text:00402692                                         ; sub_402440+29B↓j
.text:00402692                 movzx   ebx, byte ptr [ebp+0]
.text:00402696                 inc     esi
.text:00402697                 inc     ebp
.text:00402698                 jmp     short loc_402660
.text:0040269A ; ---------------------------------------------------------------------------
.text:0040269A
.text:0040269A loc_40269A:                             ; CODE XREF: sub_402440+22D↑j
.text:0040269A                                         ; sub_402440+23F↑j
.text:0040269A                 mov     byte ptr [esi], 5Eh ; '^'
.text:0040269D                 inc     esi
.text:0040269E                 mov     byte ptr [esi], 3Fh ; '?'
.text:004026A1                 jmp     short loc_402692
.text:004026A3 ; ---------------------------------------------------------------------------
.text:004026A3
.text:004026A3 loc_4026A3:                             ; CODE XREF: sub_402440+23A↑j
.text:004026A3                 mov     byte ptr [esi], 5Eh ; '^'
.text:004026A6                 sub     bl, 40h ; '@'
.text:004026A9                 lea     esi, [esi+0]
.text:004026B0
.text:004026B0 loc_4026B0:                             ; CODE XREF: sub_402440+28F↓j
.text:004026B0                 inc     esi
.text:004026B1                 jmp     short loc_402690
.text:004026B3 ; ---------------------------------------------------------------------------
.text:004026B3
.text:004026B3 loc_4026B3:                             ; CODE XREF: sub_402440+223↑j
.text:004026B3                 cmp     bl, 9
.text:004026B6                 jz      short loc_4026D1
.text:004026B8
.text:004026B8 loc_4026B8:                             ; CODE XREF: sub_402440+296↓j
.text:004026B8                 mov     [esp+3Ch+var_20], 0FFFFFFFFh
.text:004026C0                 cmp     bl, 0Ah
.text:004026C3                 jz      loc_4024B0
.text:004026C9                 mov     byte ptr [esi], 5Eh ; '^'
.text:004026CC                 add     bl, 40h ; '@'
.text:004026CF                 jmp     short loc_4026B0
.text:004026D1 ; ---------------------------------------------------------------------------
.text:004026D1
.text:004026D1 loc_4026D1:                             ; CODE XREF: sub_402440+276↑j
.text:004026D1                 cmp     [esp+3Ch+var_12], 0
.text:004026D6                 jnz     short loc_4026B8
.text:004026D8                 mov     byte ptr [esi], 9
.text:004026DB                 jmp     short loc_402692
.text:004026DB ; ---------------------------------------------------------------------------
.text:004026DD                 align 10h
.text:004026E0
.text:004026E0 loc_4026E0:                             ; CODE XREF: sub_402440+20F↑j
.text:004026E0                                         ; sub_402440+2BE↓j
.text:004026E0                 cmp     bl, 9
.text:004026E3                 jz      short loc_402700
.text:004026E5
.text:004026E5 loc_4026E5:                             ; CODE XREF: sub_402440+2C5↓j
.text:004026E5                 mov     [esp+3Ch+var_20], 0FFFFFFFFh
.text:004026ED                 cmp     bl, 0Ah
.text:004026F0                 jz      loc_4024B0
.text:004026F6                 mov     [esi], bl
.text:004026F8
.text:004026F8 loc_4026F8:                             ; CODE XREF: sub_402440+2CE↓j
.text:004026F8                 movzx   ebx, byte ptr [ebp+0]
.text:004026FC                 inc     esi
.text:004026FD                 inc     ebp
.text:004026FE                 jmp     short loc_4026E0
.text:00402700 ; ---------------------------------------------------------------------------
.text:00402700
.text:00402700 loc_402700:                             ; CODE XREF: sub_402440+2A3↑j
.text:00402700                 cmp     [esp+3Ch+var_12], 0
.text:00402705                 jz      short loc_4026E5
.text:00402707                 mov     byte ptr [esi], 5Eh ; '^'
.text:0040270A                 inc     esi
.text:0040270B                 mov     byte ptr [esi], 49h ; 'I'
.text:0040270E                 jmp     short loc_4026F8
.text:00402710 ; ---------------------------------------------------------------------------
.text:00402710
.text:00402710 loc_402710:                             ; CODE XREF: sub_402440+1D6↑j
.text:00402710                 mov     byte ptr a0, 3Eh ; '>' ; "                 0\t"
.text:00402717                 jmp     loc_40262B
.text:0040271C ; ---------------------------------------------------------------------------
.text:0040271C
.text:0040271C loc_40271C:                             ; CODE XREF: sub_402440+1BC↑j
.text:0040271C                 mov     edx, dword_40E024
.text:00402722                 jmp     loc_40263C
.text:00402727 ; ---------------------------------------------------------------------------
.text:00402727
.text:00402727 loc_402727:                             ; CODE XREF: sub_402440+177↑j
.text:00402727                 mov     edx, [esp+3Ch+var_20]
.text:0040272B                 mov     eax, 1
.text:00402730                 mov     ds:dword_40F000, edx
.text:00402736
.text:00402736 loc_402736:                             ; CODE XREF: sub_402440+333↓j
.text:00402736                 add     esp, 2Ch
.text:00402739                 pop     ebx
.text:0040273A                 pop     esi
.text:0040273B                 pop     edi
.text:0040273C                 pop     ebp
.text:0040273D                 retn
.text:0040273E ; ---------------------------------------------------------------------------
.text:0040273E
.text:0040273E loc_40273E:                             ; CODE XREF: sub_402440+16F↑j
.text:0040273E                 call    _errno
.text:00402743                 mov     [esp+3Ch+Size], offset aS ; "%s"
.text:0040274B                 mov     esi, ds:FileName
.text:00402751                 mov     dword ptr [esp+3Ch+var_30], esi ; char
.text:00402755                 mov     ecx, [eax]
.text:00402757                 mov     [esp+3Ch+var_3C], 0 ; Code
.text:0040275E                 mov     [esp+3Ch+Src], ecx ; ErrorMessage
.text:00402762                 call    sub_405830
.text:00402767                 mov     ebx, [esp+3Ch+var_20]
.text:0040276B                 xor     eax, eax
.text:0040276D                 mov     ds:dword_40F000, ebx
.text:00402773                 jmp     short loc_402736
.text:00402775 ; ---------------------------------------------------------------------------
.text:00402775
.text:00402775 loc_402775:                             ; CODE XREF: sub_402440+F6↑j
.text:00402775                 inc     [esp+3Ch+var_20]
.text:00402779                 mov     eax, [esp+3Ch+var_20]
.text:0040277D                 test    eax, eax
.text:0040277F                 jle     loc_402805
.text:00402785                 cmp     [esp+3Ch+var_20], 1
.text:0040278A                 jle     short loc_40279F
.text:0040278C                 cmp     [esp+3Ch+var_16], 0
.text:00402791                 mov     [esp+3Ch+var_20], 2
.text:00402799                 jnz     loc_4025CB
.text:0040279F
.text:0040279F loc_40279F:                             ; CODE XREF: sub_402440+34A↑j
.text:0040279F                 cmp     [esp+3Ch+var_14], 0
.text:004027A4                 jnz     short loc_402805
.text:004027A6                 cmp     [esp+3Ch+var_13], 0
.text:004027AB                 jz      short loc_402805
.text:004027AD                 mov     ecx, off_40E02C ; "0\t"
.text:004027B3
.text:004027B3 loc_4027B3:                             ; CODE XREF: sub_402440+38E↓j
.text:004027B3                 movzx   ebx, byte ptr [ecx]
.text:004027B6                 mov     dl, bl
.text:004027B8                 inc     dl
.text:004027BA                 mov     [ecx], dl
.text:004027BC                 cmp     bl, 38h ; '8'
.text:004027BF                 jle     short loc_402822
.text:004027C1                 mov     byte ptr [ecx], 30h ; '0'
.text:004027C4                 mov     eax, off_40E028 ; "0\t"
.text:004027C9                 dec     ecx
.text:004027CA                 cmp     ecx, eax
.text:004027CC                 mov     edx, eax
.text:004027CE                 jnb     short loc_4027B3
.text:004027D0                 cmp     eax, offset a0  ; "                 0\t"
.text:004027D5                 jbe     short loc_402819
.text:004027D7                 dec     eax
.text:004027D8                 mov     off_40E028, eax ; "0\t"
.text:004027DD                 mov     byte ptr [edx-1], 31h ; '1'
.text:004027E1                 mov     eax, off_40E028 ; "0\t"
.text:004027E6
.text:004027E6 loc_4027E6:                             ; CODE XREF: sub_402440+3E0↓j
.text:004027E6                 mov     edx, dword_40E024
.text:004027EC                 cmp     eax, edx
.text:004027EE                 jnb     short loc_4027F7
.text:004027F0                 dec     edx
.text:004027F1                 mov     dword_40E024, edx
.text:004027F7
.text:004027F7 loc_4027F7:                             ; CODE XREF: sub_402440+3AE↑j
.text:004027F7                                         ; sub_402440+3E8↓j
.text:004027F7                 mov     [esp+3Ch+var_3C], esi
.text:004027FA                 mov     [esp+3Ch+Src], edx
.text:004027FE                 call    sub_408EB0
.text:00402803                 mov     esi, eax
.text:00402805
.text:00402805 loc_402805:                             ; CODE XREF: sub_402440+33F↑j
.text:00402805                                         ; sub_402440+364↑j ...
.text:00402805                 cmp     [esp+3Ch+var_15], 0
.text:0040280A                 jz      short loc_402810
.text:0040280C                 mov     byte ptr [esi], 24h ; '$'
.text:0040280F                 inc     esi
.text:00402810
.text:00402810 loc_402810:                             ; CODE XREF: sub_402440+3CA↑j
.text:00402810                 mov     byte ptr [esi], 0Ah
.text:00402813                 inc     esi
.text:00402814                 jmp     loc_4025CB
.text:00402819 ; ---------------------------------------------------------------------------
.text:00402819
.text:00402819 loc_402819:                             ; CODE XREF: sub_402440+395↑j
.text:00402819                 mov     byte ptr a0, 3Eh ; '>' ; "                 0\t"
.text:00402820                 jmp     short loc_4027E6
.text:00402822 ; ---------------------------------------------------------------------------
.text:00402822
.text:00402822 loc_402822:                             ; CODE XREF: sub_402440+37F↑j
.text:00402822                 mov     edx, dword_40E024
.text:00402828                 jmp     short loc_4027F7
.text:00402828 sub_402440      endp
.text:00402828
.text:00402828 ; ---------------------------------------------------------------------------
.text:0040282A                 align 10h
.text:00402830
.text:00402830 ; =============== S U B R O U T I N E =======================================
.text:00402830
.text:00402830
.text:00402830 ; void __cdecl sub_402830()
.text:00402830 sub_402830      proc near               ; DATA XREF: sub_4018A0+BC↑o
.text:00402830                 sub     esp, 0Ch
.text:00402833                 mov     eax, off_40E030
.text:00402838                 test    eax, eax
.text:0040283A                 jnz     short loc_402840
.text:0040283C
.text:0040283C loc_40283C:                             ; CODE XREF: sub_402830+12↓j
.text:0040283C                 add     esp, 0Ch
.text:0040283F                 retn
.text:00402840 ; ---------------------------------------------------------------------------
.text:00402840
.text:00402840 loc_402840:                             ; CODE XREF: sub_402830+A↑j
.text:00402840                 call    eax ; sub_4041C0
.text:00402842                 jmp     short loc_40283C
.text:00402842 sub_402830      endp
.text:00402842
.text:00402842 ; ---------------------------------------------------------------------------
.text:00402844                 align 20h
.text:00402860 dword_402860    dd 90002D2Dh, 7 dup(90909090h)
.text:00402860                                         ; DATA XREF: sub_402AB0+E4↓o
.text:00402880 aSOptionCSDoesn db '%s: option `%c%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:00402880                                         ; DATA XREF: sub_402AB0+2FC↓o
.text:004028AD                 align 20h
.text:004028C0 aSOptionSDoesnT db '%s: option `--%s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004028C0                                         ; DATA XREF: sub_402AB0:loc_402E12↓o
.text:004028ED                 align 20h
.text:00402900 aSOptionSRequir db '%s: option `%s',27h,' requires an argument',0Ah,0
.text:00402900                                         ; DATA XREF: sub_402AB0:loc_402EB0↓o
.text:00402900                                         ; sub_402AB0:loc_403277↓o
.text:00402926                 align 20h
.text:00402940 aSUnrecognizedO db '%s: unrecognized option `%c%s',27h,0Ah,0
.text:00402940                                         ; DATA XREF: sub_402AB0+48E↓o
.text:00402960 dword_402960    dd 90909000h, 7 dup(90909090h)
.text:00402960                                         ; DATA XREF: sub_402AB0:loc_402F81↓o
.text:00402980 aSUnrecognizedO_0 db '%s: unrecognized option `--%s',27h,0Ah,0
.text:00402980                                         ; DATA XREF: sub_402AB0:loc_402F9A↓o
.text:004029A0 aSOptionRequire db '%s: option requires an argument -- %c',0Ah,0
.text:004029A0                                         ; DATA XREF: sub_402AB0:loc_40307F↓o
.text:004029A0                                         ; sub_402AB0:loc_4033AC↓o
.text:004029C7                 align 20h
.text:004029E0 aSOptionWSDoesn db '%s: option `-W %s',27h,' doesn',27h,'t allow an argument',0Ah,0
.text:004029E0                                         ; DATA XREF: sub_402AB0:loc_4031F3↓o
.text:00402A0E                 align 20h
.text:00402A20 aSOptionWSIsAmb db '%s: option `-W %s',27h,' is ambiguous',0Ah,0
.text:00402A20                                         ; DATA XREF: sub_402AB0:loc_4032DF↓o
.text:00402A41 aSIllegalOption db '%s: illegal option -- %c',0Ah,0
.text:00402A41                                         ; DATA XREF: sub_402AB0+93F↓o
.text:00402A5B aSInvalidOption db '%s: invalid option -- %c',0Ah,0
.text:00402A5B                                         ; DATA XREF: sub_402AB0:loc_403427↓o
.text:00402A75 aSOptionSIsAmbi db '%s: option `%s',27h,' is ambiguous',0Ah,0
.text:00402A75                                         ; DATA XREF: sub_402AB0:loc_40344E↓o
.text:00402A93 ; const char VarName[]
.text:00402A93 VarName         db 'POSIXLY_CORRECT',0  ; DATA XREF: sub_402AB0:loc_403600↓o
.text:00402AA3                 align 10h
.text:00402AB0
.text:00402AB0 ; =============== S U B R O U T I N E =======================================
.text:00402AB0
.text:00402AB0
.text:00402AB0 ; int __cdecl sub_402AB0(int, int, char *Str, int, int, int, int, int)
.text:00402AB0 sub_402AB0      proc near               ; CODE XREF: sub_403640+5A↓p
.text:00402AB0                                         ; .text:0040372A↓p ...
.text:00402AB0
.text:00402AB0 Str1            = dword ptr -5Ch
.text:00402AB0 Str2            = dword ptr -58h
.text:00402AB0 MaxCount        = dword ptr -54h
.text:00402AB0 var_50          = dword ptr -50h
.text:00402AB0 var_4C          = dword ptr -4Ch
.text:00402AB0 var_3C          = dword ptr -3Ch
.text:00402AB0 var_38          = dword ptr -38h
.text:00402AB0 var_34          = dword ptr -34h
.text:00402AB0 var_30          = dword ptr -30h
.text:00402AB0 var_2C          = dword ptr -2Ch
.text:00402AB0 var_28          = dword ptr -28h
.text:00402AB0 var_24          = dword ptr -24h
.text:00402AB0 var_20          = dword ptr -20h
.text:00402AB0 var_1C          = dword ptr -1Ch
.text:00402AB0 var_18          = dword ptr -18h
.text:00402AB0 var_14          = dword ptr -14h
.text:00402AB0 arg_0           = dword ptr  4
.text:00402AB0 arg_4           = dword ptr  8
.text:00402AB0 Str             = dword ptr  0Ch
.text:00402AB0 arg_C           = dword ptr  10h
.text:00402AB0 arg_10          = dword ptr  14h
.text:00402AB0 arg_14          = dword ptr  18h
.text:00402AB0 arg_18          = dword ptr  1Ch
.text:00402AB0 arg_1C          = dword ptr  20h
.text:00402AB0
.text:00402AB0                 push    ebp
.text:00402AB1                 mov     eax, 0FFFFFFFFh
.text:00402AB6                 push    edi
.text:00402AB7                 push    esi
.text:00402AB8                 push    ebx
.text:00402AB9                 sub     esp, 4Ch
.text:00402ABC                 mov     esi, [esp+5Ch+Str]
.text:00402AC0                 mov     ebp, [esp+5Ch+arg_1C]
.text:00402AC4                 cmp     byte ptr [esi], 3Ah ; ':'
.text:00402AC7                 mov     ebx, [ebp+4]
.text:00402ACA                 setz    dl
.text:00402ACD                 movzx   ecx, dl
.text:00402AD0                 dec     ecx
.text:00402AD1                 and     ecx, ebx
.text:00402AD3                 mov     [esp+5Ch+var_14], ecx
.text:00402AD7                 mov     ecx, [esp+5Ch+arg_0]
.text:00402ADB                 test    ecx, ecx
.text:00402ADD                 jle     loc_402C07
.text:00402AE3                 mov     dword ptr [ebp+0Ch], 0
.text:00402AEA                 mov     ebx, [ebp+0]
.text:00402AED                 test    ebx, ebx
.text:00402AEF                 jz      loc_403620
.text:00402AF5                 mov     edi, [ebp+10h]
.text:00402AF8                 test    edi, edi
.text:00402AFA                 jnz     short loc_402B53
.text:00402AFC                 lea     esi, [esi+0]
.text:00402B00
.text:00402B00 loc_402B00:                             ; CODE XREF: sub_402AB0+B7C↓j
.text:00402B00                 mov     [ebp+24h], ebx
.text:00402B03                 mov     esi, [esp+5Ch+Str]
.text:00402B07                 mov     [ebp+20h], ebx
.text:00402B0A                 mov     ecx, [esp+5Ch+arg_18]
.text:00402B0E                 xor     ebx, ebx
.text:00402B10                 mov     dword ptr [ebp+14h], 0
.text:00402B17                 test    ecx, ecx
.text:00402B19                 jz      loc_403600
.text:00402B1F
.text:00402B1F loc_402B1F:                             ; CODE XREF: sub_402AB0+B64↓j
.text:00402B1F                 mov     ebx, 1
.text:00402B24
.text:00402B24 loc_402B24:                             ; CODE XREF: sub_402AB0+B5E↓j
.text:00402B24                 mov     [ebp+1Ch], ebx
.text:00402B27                 mov     ecx, [esp+5Ch+Str]
.text:00402B2B                 movzx   eax, byte ptr [ecx]
.text:00402B2E                 cmp     al, 2Dh ; '-'
.text:00402B30                 jz      loc_4035F0
.text:00402B36                 cmp     al, 2Bh ; '+'
.text:00402B38                 jz      loc_4035D9
.text:00402B3E                 xor     edx, edx
.text:00402B40                 test    ebx, ebx
.text:00402B42                 setz    dl
.text:00402B45                 mov     [ebp+18h], edx
.text:00402B48
.text:00402B48 loc_402B48:                             ; CODE XREF: sub_402AB0+B35↓j
.text:00402B48                 mov     [esp+5Ch+Str], esi
.text:00402B4C                 mov     dword ptr [ebp+10h], 1
.text:00402B53
.text:00402B53 loc_402B53:                             ; CODE XREF: sub_402AB0+4A↑j
.text:00402B53                 mov     eax, [ebp+14h]
.text:00402B56                 test    eax, eax
.text:00402B58                 jz      short loc_402B63
.text:00402B5A                 cmp     byte ptr [eax], 0
.text:00402B5D                 jnz     loc_402C40
.text:00402B63
.text:00402B63 loc_402B63:                             ; CODE XREF: sub_402AB0+A8↑j
.text:00402B63                 mov     ebx, [ebp+0]
.text:00402B66                 cmp     [ebp+24h], ebx
.text:00402B69                 jle     short loc_402B6E
.text:00402B6B                 mov     [ebp+24h], ebx
.text:00402B6E
.text:00402B6E loc_402B6E:                             ; CODE XREF: sub_402AB0+B9↑j
.text:00402B6E                 cmp     [ebp+20h], ebx
.text:00402B71                 jle     short loc_402B76
.text:00402B73                 mov     [ebp+20h], ebx
.text:00402B76
.text:00402B76 loc_402B76:                             ; CODE XREF: sub_402AB0+C1↑j
.text:00402B76                 cmp     dword ptr [ebp+18h], 1
.text:00402B7A                 jz      loc_403550
.text:00402B80
.text:00402B80 loc_402B80:                             ; CODE XREF: sub_402AB0+B13↓j
.text:00402B80                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402B84                 jz      loc_403534
.text:00402B8A                 cld
.text:00402B8B                 mov     ecx, [esp+5Ch+arg_4]
.text:00402B8F                 mov     edx, 3
.text:00402B94                 mov     edi, offset dword_402860
.text:00402B99                 mov     esi, [ecx+ebx*4]
.text:00402B9C                 mov     ecx, edx
.text:00402B9E                 repe cmpsb
.text:00402BA0                 jnz     short loc_402BDC
.text:00402BA2                 mov     edx, [ebp+24h]
.text:00402BA5                 lea     eax, [ebx+1]
.text:00402BA8                 cmp     [ebp+20h], edx
.text:00402BAB                 mov     [ebp+0], eax
.text:00402BAE                 jz      loc_403548
.text:00402BB4                 cmp     edx, eax
.text:00402BB6                 jz      short loc_402BD0
.text:00402BB8                 mov     [esp+5Ch+Str2], ebp
.text:00402BBC                 mov     ebx, [esp+5Ch+arg_4]
.text:00402BC0                 mov     [esp+5Ch+Str1], ebx
.text:00402BC3                 call    sub_403760
.text:00402BC8                 nop
.text:00402BC9                 lea     esi, [esi+0]
.text:00402BD0
.text:00402BD0 loc_402BD0:                             ; CODE XREF: sub_402AB0+106↑j
.text:00402BD0                                         ; sub_402AB0+A9B↓j
.text:00402BD0                 mov     eax, [esp+5Ch+arg_0]
.text:00402BD4                 mov     ebx, eax
.text:00402BD6                 mov     [ebp+24h], eax
.text:00402BD9                 mov     [ebp+0], eax
.text:00402BDC
.text:00402BDC loc_402BDC:                             ; CODE XREF: sub_402AB0+F0↑j
.text:00402BDC                 cmp     ebx, [esp+5Ch+arg_0]
.text:00402BE0                 jz      loc_403534
.text:00402BE6                 mov     esi, [esp+5Ch+arg_4]
.text:00402BEA                 mov     eax, [esi+ebx*4]
.text:00402BED                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00402BF0                 jz      short loc_402C17
.text:00402BF2
.text:00402BF2 loc_402BF2:                             ; CODE XREF: sub_402AB0+16D↓j
.text:00402BF2                 mov     edx, [ebp+18h]
.text:00402BF5                 test    edx, edx
.text:00402BF7                 jz      short loc_402C10
.text:00402BF9                 mov     [ebp+0Ch], eax
.text:00402BFC                 lea     edi, [ebx+1]
.text:00402BFF                 mov     eax, 1
.text:00402C04                 mov     [ebp+0], edi
.text:00402C07
.text:00402C07 loc_402C07:                             ; CODE XREF: sub_402AB0+2D↑j
.text:00402C07                                         ; sub_402AB0+165↓j ...
.text:00402C07                 add     esp, 4Ch
.text:00402C0A                 pop     ebx
.text:00402C0B                 pop     esi
.text:00402C0C                 pop     edi
.text:00402C0D                 pop     ebp
.text:00402C0E                 retn
.text:00402C0E ; ---------------------------------------------------------------------------
.text:00402C0F                 align 10h
.text:00402C10
.text:00402C10 loc_402C10:                             ; CODE XREF: sub_402AB0+147↑j
.text:00402C10                                         ; sub_402AB0+A8A↓j ...
.text:00402C10                 mov     eax, 0FFFFFFFFh
.text:00402C15                 jmp     short loc_402C07
.text:00402C17 ; ---------------------------------------------------------------------------
.text:00402C17
.text:00402C17 loc_402C17:                             ; CODE XREF: sub_402AB0+140↑j
.text:00402C17                 movzx   edx, byte ptr [eax+1]
.text:00402C1B                 test    dl, dl
.text:00402C1D                 jz      short loc_402BF2
.text:00402C1F                 mov     ebx, [esp+5Ch+arg_C]
.text:00402C23                 xor     ecx, ecx
.text:00402C25                 test    ebx, ebx
.text:00402C27                 jz      short loc_402C32
.text:00402C29                 cmp     dl, 2Dh ; '-'
.text:00402C2C                 jz      loc_40352A
.text:00402C32
.text:00402C32 loc_402C32:                             ; CODE XREF: sub_402AB0+177↑j
.text:00402C32                                         ; sub_402AB0+A7F↓j
.text:00402C32                 lea     esi, [ecx+eax+1]
.text:00402C36                 mov     [ebp+14h], esi
.text:00402C39                 lea     esi, [esi+0]
.text:00402C40
.text:00402C40 loc_402C40:                             ; CODE XREF: sub_402AB0+AD↑j
.text:00402C40                 mov     ecx, [esp+5Ch+arg_C]
.text:00402C44                 test    ecx, ecx
.text:00402C46                 jz      loc_402FD0
.text:00402C4C                 mov     edx, [ebp+0]
.text:00402C4F                 mov     edi, [esp+5Ch+arg_4]
.text:00402C53                 mov     eax, [edi+edx*4]
.text:00402C56                 movzx   edx, byte ptr [eax+1]
.text:00402C5A                 cmp     dl, 2Dh ; '-'
.text:00402C5D                 jz      short loc_402C75
.text:00402C5F                 mov     ebx, [esp+5Ch+arg_14]
.text:00402C63                 test    ebx, ebx
.text:00402C65                 jz      loc_402FD0
.text:00402C6B                 cmp     byte ptr [eax+2], 0
.text:00402C6F                 jz      loc_40350A
.text:00402C75
.text:00402C75 loc_402C75:                             ; CODE XREF: sub_402AB0+1AD↑j
.text:00402C75                                         ; sub_402AB0+A75↓j
.text:00402C75                 mov     [esp+5Ch+var_18], 0
.text:00402C7D                 mov     ecx, [ebp+14h]
.text:00402C80                 mov     [esp+5Ch+var_1C], 0
.text:00402C88                 mov     [esp+5Ch+var_20], 0
.text:00402C90                 mov     edi, ecx
.text:00402C92                 mov     [esp+5Ch+var_24], 0FFFFFFFFh
.text:00402C9A                 movzx   eax, byte ptr [ecx]
.text:00402C9D                 test    al, al
.text:00402C9F                 jz      short loc_402CBC
.text:00402CA1                 cmp     al, 3Dh ; '='
.text:00402CA3                 jz      short loc_402CBC
.text:00402CA5                 lea     esi, [esi+0]
.text:00402CA9                 lea     edi, [edi+0]
.text:00402CB0
.text:00402CB0 loc_402CB0:                             ; CODE XREF: sub_402AB0+20A↓j
.text:00402CB0                 inc     edi
.text:00402CB1                 movzx   eax, byte ptr [edi]
.text:00402CB4                 test    al, al
.text:00402CB6                 jz      short loc_402CBC
.text:00402CB8                 cmp     al, 3Dh ; '='
.text:00402CBA                 jnz     short loc_402CB0
.text:00402CBC
.text:00402CBC loc_402CBC:                             ; CODE XREF: sub_402AB0+1EF↑j
.text:00402CBC                                         ; sub_402AB0+1F3↑j ...
.text:00402CBC                 mov     [esp+5Ch+var_28], 0
.text:00402CC4                 mov     esi, [esp+5Ch+arg_C]
.text:00402CC8                 mov     ebx, [esi]
.text:00402CCA                 test    ebx, ebx
.text:00402CCC                 mov     edx, ebx
.text:00402CCE                 jz      loc_402EF0
.text:00402CD4                 lea     esi, [esi+0]
.text:00402CDA                 lea     edi, [edi+0]
.text:00402CE0
.text:00402CE0 loc_402CE0:                             ; CODE XREF: sub_402AB0+25E↓j
.text:00402CE0                 mov     [esp+5Ch+Str2], ecx ; Str2
.text:00402CE4                 mov     ebx, edi
.text:00402CE6                 sub     ebx, ecx
.text:00402CE8                 mov     [esp+5Ch+MaxCount], ebx ; MaxCount
.text:00402CEC                 mov     [esp+5Ch+Str1], edx ; Str1
.text:00402CEF                 call    strncmp
.text:00402CF4                 test    eax, eax
.text:00402CF6                 jz      loc_403486
.text:00402CFC
.text:00402CFC loc_402CFC:                             ; CODE XREF: sub_402AB0+A0F↓j
.text:00402CFC                                         ; sub_402AB0+A24↓j ...
.text:00402CFC                 inc     [esp+5Ch+var_28]
.text:00402D00                 add     esi, 10h
.text:00402D03                 mov     ecx, [esi]
.text:00402D05                 test    ecx, ecx
.text:00402D07                 mov     edx, ecx
.text:00402D09                 jz      short loc_402D10
.text:00402D0B                 mov     ecx, [ebp+14h]
.text:00402D0E                 jmp     short loc_402CE0
.text:00402D10 ; ---------------------------------------------------------------------------
.text:00402D10
.text:00402D10 loc_402D10:                             ; CODE XREF: sub_402AB0+259↑j
.text:00402D10                                         ; sub_402AB0+A55↓j
.text:00402D10                 mov     esi, [esp+5Ch+var_20]
.text:00402D14                 test    esi, esi
.text:00402D16                 jz      short loc_402D24
.text:00402D18                 mov     edx, [esp+5Ch+var_1C]
.text:00402D1C                 test    edx, edx
.text:00402D1E                 jz      loc_403430
.text:00402D24
.text:00402D24 loc_402D24:                             ; CODE XREF: sub_402AB0+266↑j
.text:00402D24                 mov     eax, [esp+5Ch+var_18]
.text:00402D28                 test    eax, eax
.text:00402D2A                 jz      loc_402EF0
.text:00402D30                 mov     ecx, [ebp+0]
.text:00402D33                 lea     eax, [ecx+1]
.text:00402D36                 mov     [ebp+0], eax
.text:00402D39                 cmp     byte ptr [edi], 0
.text:00402D3C                 jz      loc_402E50
.text:00402D42                 mov     ecx, [esp+5Ch+var_18]
.text:00402D46                 mov     esi, [ecx+4]
.text:00402D49                 test    esi, esi
.text:00402D4B                 jz      short loc_402D96
.text:00402D4D                 lea     ebx, [edi+1]
.text:00402D50                 mov     [ebp+0Ch], ebx
.text:00402D53
.text:00402D53 loc_402D53:                             ; CODE XREF: sub_402AB0+3A8↓j
.text:00402D53                                         ; sub_402AB0+3C4↓j
.text:00402D53                 mov     ebx, [ebp+14h]
.text:00402D56                 mov     [esp+5Ch+Str1], ebx ; Str
.text:00402D59                 call    strlen
.text:00402D5E                 add     [ebp+14h], eax
.text:00402D61                 mov     esi, [esp+5Ch+arg_10]
.text:00402D65                 test    esi, esi
.text:00402D67                 jz      short loc_402D73
.text:00402D69                 mov     ebp, [esp+5Ch+var_24]
.text:00402D6D                 mov     ecx, [esp+5Ch+arg_10]
.text:00402D71                 mov     [ecx], ebp
.text:00402D73
.text:00402D73 loc_402D73:                             ; CODE XREF: sub_402AB0+2B7↑j
.text:00402D73                 mov     eax, [esp+5Ch+var_18]
.text:00402D77                 mov     ecx, [eax+8]
.text:00402D7A                 test    ecx, ecx
.text:00402D7C                 jnz     short loc_402D8A
.text:00402D7E                 mov     ecx, [esp+5Ch+var_18]
.text:00402D82
.text:00402D82 loc_402D82:                             ; CODE XREF: sub_402AB0+723↓j
.text:00402D82                 mov     eax, [ecx+0Ch]
.text:00402D85                 jmp     loc_402C07
.text:00402D8A ; ---------------------------------------------------------------------------
.text:00402D8A
.text:00402D8A loc_402D8A:                             ; CODE XREF: sub_402AB0+2CC↑j
.text:00402D8A                                         ; sub_402AB0+719↓j
.text:00402D8A                 mov     esi, [eax+0Ch]
.text:00402D8D                 xor     eax, eax
.text:00402D8F                 mov     [ecx], esi
.text:00402D91                 jmp     loc_402C07
.text:00402D96 ; ---------------------------------------------------------------------------
.text:00402D96
.text:00402D96 loc_402D96:                             ; CODE XREF: sub_402AB0+29B↑j
.text:00402D96                 mov     edi, [esp+5Ch+var_14]
.text:00402D9A                 test    edi, edi
.text:00402D9C                 jz      short loc_402DF0
.text:00402D9E                 mov     esi, [esp+5Ch+arg_4]
.text:00402DA2                 mov     edx, [esi+eax*4-4]
.text:00402DA6                 cmp     byte ptr [edx+1], 2Dh ; '-'
.text:00402DAA                 jz      short loc_402E12
.text:00402DAC                 mov     [esp+5Ch+Str1], offset aSOptionCSDoesn ; "%s: option `%c%s' doesn't allow an argu"...
.text:00402DB3                 call    ds:libintl_gettext
.text:00402DB9                 mov     edx, [esp+5Ch+var_18]
.text:00402DBD                 mov     edi, [edx]
.text:00402DBF                 mov     [esp+5Ch+var_4C], edi
.text:00402DC3                 mov     ebx, [ebp+0]
.text:00402DC6                 mov     edi, [esp+5Ch+arg_4]
.text:00402DCA                 mov     ecx, [edi+ebx*4-4]
.text:00402DCE                 movsx   esi, byte ptr [ecx]
.text:00402DD1                 mov     ecx, ds:_iob
.text:00402DD7                 add     ecx, 40h ; '@'
.text:00402DDA                 mov     [esp+5Ch+var_50], esi
.text:00402DDE                 mov     ebx, [edi]
.text:00402DE0                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402DE4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402DE7                 mov     [esp+5Ch+MaxCount], ebx
.text:00402DEB                 call    fprintf
.text:00402DF0
.text:00402DF0 loc_402DF0:                             ; CODE XREF: sub_402AB0+2EC↑j
.text:00402DF0                                         ; sub_402AB0+398↓j
.text:00402DF0                 mov     ecx, [ebp+14h]
.text:00402DF3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402DF6                 call    strlen
.text:00402DFB                 add     [ebp+14h], eax
.text:00402DFE                 mov     eax, [esp+5Ch+var_18]
.text:00402E02                 mov     esi, [eax+0Ch]
.text:00402E05                 mov     [ebp+8], esi
.text:00402E08
.text:00402E08 loc_402E08:                             ; CODE XREF: sub_402AB0+4E5↓j
.text:00402E08                                         ; sub_402AB0+73E↓j ...
.text:00402E08                 mov     eax, 3Fh ; '?'
.text:00402E0D                 jmp     loc_402C07
.text:00402E12 ; ---------------------------------------------------------------------------
.text:00402E12
.text:00402E12 loc_402E12:                             ; CODE XREF: sub_402AB0+2FA↑j
.text:00402E12                 mov     [esp+5Ch+Str1], offset aSOptionSDoesnT ; "%s: option `--%s' doesn't allow an argu"...
.text:00402E19                 call    ds:libintl_gettext
.text:00402E1F                 mov     edx, [esp+5Ch+var_18]
.text:00402E23                 mov     edi, [esp+5Ch+arg_4]
.text:00402E27                 mov     ecx, ds:_iob
.text:00402E2D                 mov     esi, [edx]
.text:00402E2F                 add     ecx, 40h ; '@'
.text:00402E32                 mov     [esp+5Ch+var_50], esi
.text:00402E36                 mov     ebx, [edi]
.text:00402E38                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402E3C                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402E3F                 mov     [esp+5Ch+MaxCount], ebx
.text:00402E43                 call    fprintf
.text:00402E48                 jmp     short loc_402DF0
.text:00402E48 ; ---------------------------------------------------------------------------
.text:00402E4A                 align 10h
.text:00402E50
.text:00402E50 loc_402E50:                             ; CODE XREF: sub_402AB0+28C↑j
.text:00402E50                 mov     ebx, [esp+5Ch+var_18]
.text:00402E54                 cmp     dword ptr [ebx+4], 1
.text:00402E58                 jnz     loc_402D53
.text:00402E5E                 cmp     eax, [esp+5Ch+arg_0]
.text:00402E62                 jge     short loc_402E79
.text:00402E64                 mov     ebx, [esp+5Ch+arg_4]
.text:00402E68                 lea     edi, [ecx+2]
.text:00402E6B                 mov     [ebp+0], edi
.text:00402E6E                 mov     esi, [ebx+eax*4]
.text:00402E71                 mov     [ebp+0Ch], esi
.text:00402E74                 jmp     loc_402D53
.text:00402E79 ; ---------------------------------------------------------------------------
.text:00402E79
.text:00402E79 loc_402E79:                             ; CODE XREF: sub_402AB0+3B2↑j
.text:00402E79                 mov     edx, [esp+5Ch+var_14]
.text:00402E7D                 test    edx, edx
.text:00402E7F                 jnz     short loc_402EB0
.text:00402E81
.text:00402E81 loc_402E81:                             ; CODE XREF: sub_402AB0+437↓j
.text:00402E81                 mov     edx, [ebp+14h]
.text:00402E84                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402E87                 call    strlen
.text:00402E8C                 add     [ebp+14h], eax
.text:00402E8F                 mov     eax, [esp+5Ch+var_18]
.text:00402E93                 mov     edi, [eax+0Ch]
.text:00402E96                 mov     [ebp+8], edi
.text:00402E99
.text:00402E99 loc_402E99:                             ; CODE XREF: sub_402AB0+7C2↓j
.text:00402E99                 mov     ebp, [esp+5Ch+Str]
.text:00402E9D                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:00402EA1                 setnz   bl
.text:00402EA4                 movzx   esi, bl
.text:00402EA7                 lea     eax, [esi+esi*4+3Ah]
.text:00402EAB                 jmp     loc_402C07
.text:00402EB0 ; ---------------------------------------------------------------------------
.text:00402EB0
.text:00402EB0 loc_402EB0:                             ; CODE XREF: sub_402AB0+3CF↑j
.text:00402EB0                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:00402EB7                 call    ds:libintl_gettext
.text:00402EBD                 mov     ecx, [ebp+0]
.text:00402EC0                 mov     esi, [esp+5Ch+arg_4]
.text:00402EC4                 mov     ebx, [esi+ecx*4-4]
.text:00402EC8                 mov     ecx, ds:_iob
.text:00402ECE                 mov     [esp+5Ch+var_50], ebx
.text:00402ED2                 mov     edi, [esi]
.text:00402ED4                 add     ecx, 40h ; '@'
.text:00402ED7                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402EDB                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:00402EDE                 mov     [esp+5Ch+MaxCount], edi
.text:00402EE2                 call    fprintf
.text:00402EE7                 jmp     short loc_402E81
.text:00402EE7 ; ---------------------------------------------------------------------------
.text:00402EE9                 align 10h
.text:00402EF0
.text:00402EF0 loc_402EF0:                             ; CODE XREF: sub_402AB0+21E↑j
.text:00402EF0                                         ; sub_402AB0+27A↑j
.text:00402EF0                 mov     eax, [esp+5Ch+arg_14]
.text:00402EF4                 test    eax, eax
.text:00402EF6                 jz      short loc_402F26
.text:00402EF8                 mov     ebx, [ebp+0]
.text:00402EFB                 mov     esi, [esp+5Ch+arg_4]
.text:00402EFF                 mov     edi, [esi+ebx*4]
.text:00402F02                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402F06                 jz      short loc_402F29
.text:00402F08                 mov     ecx, [ebp+14h]
.text:00402F0B                 mov     edx, [esp+5Ch+Str]
.text:00402F0F                 movsx   ebx, byte ptr [ecx]
.text:00402F12                 mov     [esp+5Ch+Str1], edx ; Str
.text:00402F15                 mov     [esp+5Ch+Str2], ebx ; Val
.text:00402F19                 call    strchr
.text:00402F1E                 test    eax, eax
.text:00402F20                 jnz     loc_402FD0
.text:00402F26
.text:00402F26 loc_402F26:                             ; CODE XREF: sub_402AB0+446↑j
.text:00402F26                 mov     ebx, [ebp+0]
.text:00402F29
.text:00402F29 loc_402F29:                             ; CODE XREF: sub_402AB0+456↑j
.text:00402F29                 mov     eax, [esp+5Ch+var_14]
.text:00402F2D                 test    eax, eax
.text:00402F2F                 jz      short loc_402F81
.text:00402F31                 mov     esi, [esp+5Ch+arg_4]
.text:00402F35                 mov     edi, [esi+ebx*4]
.text:00402F38                 cmp     byte ptr [edi+1], 2Dh ; '-'
.text:00402F3C                 jz      short loc_402F9A
.text:00402F3E                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO ; "%s: unrecognized option `%c%s'\n"
.text:00402F45                 call    ds:libintl_gettext
.text:00402F4B                 mov     edi, [ebp+14h]
.text:00402F4E                 mov     [esp+5Ch+var_4C], edi
.text:00402F52                 mov     ebx, [ebp+0]
.text:00402F55                 mov     edi, [esp+5Ch+arg_4]
.text:00402F59                 mov     esi, [edi+ebx*4]
.text:00402F5C                 movsx   ecx, byte ptr [esi]
.text:00402F5F                 mov     esi, ds:_iob
.text:00402F65                 add     esi, 40h ; '@'
.text:00402F68                 mov     [esp+5Ch+var_50], ecx
.text:00402F6C                 mov     ebx, [edi]
.text:00402F6E                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402F72                 mov     [esp+5Ch+Str1], esi ; Stream
.text:00402F75                 mov     [esp+5Ch+MaxCount], ebx
.text:00402F79                 call    fprintf
.text:00402F7E
.text:00402F7E loc_402F7E:                             ; CODE XREF: sub_402AB0+51D↓j
.text:00402F7E                 mov     ebx, [ebp+0]
.text:00402F81
.text:00402F81 loc_402F81:                             ; CODE XREF: sub_402AB0+47F↑j
.text:00402F81                 mov     dword ptr [ebp+14h], offset dword_402960
.text:00402F88                 lea     edx, [ebx+1]
.text:00402F8B                 mov     [ebp+0], edx
.text:00402F8E
.text:00402F8E loc_402F8E:                             ; CODE XREF: sub_402AB0+999↓j
.text:00402F8E                 mov     dword ptr [ebp+8], 0
.text:00402F95                 jmp     loc_402E08
.text:00402F9A ; ---------------------------------------------------------------------------
.text:00402F9A
.text:00402F9A loc_402F9A:                             ; CODE XREF: sub_402AB0+48C↑j
.text:00402F9A                 mov     [esp+5Ch+Str1], offset aSUnrecognizedO_0 ; "%s: unrecognized option `--%s'\n"
.text:00402FA1                 call    ds:libintl_gettext
.text:00402FA7                 mov     ecx, [ebp+14h]
.text:00402FAA                 mov     edi, [esp+5Ch+arg_4]
.text:00402FAE                 mov     edx, ds:_iob
.text:00402FB4                 mov     [esp+5Ch+var_50], ecx
.text:00402FB8                 mov     ebx, [edi]
.text:00402FBA                 add     edx, 40h ; '@'
.text:00402FBD                 mov     [esp+5Ch+Str2], eax ; Format
.text:00402FC1                 mov     [esp+5Ch+MaxCount], ebx
.text:00402FC5                 mov     [esp+5Ch+Str1], edx ; Stream
.text:00402FC8                 call    fprintf
.text:00402FCD                 jmp     short loc_402F7E
.text:00402FCD ; ---------------------------------------------------------------------------
.text:00402FCF                 align 10h
.text:00402FD0
.text:00402FD0 loc_402FD0:                             ; CODE XREF: sub_402AB0+196↑j
.text:00402FD0                                         ; sub_402AB0+1B5↑j ...
.text:00402FD0                 mov     esi, [ebp+14h]
.text:00402FD3                 movzx   ebx, byte ptr [esi]
.text:00402FD6                 inc     esi
.text:00402FD7                 mov     [ebp+14h], esi
.text:00402FDA                 mov     ecx, [esp+5Ch+Str]
.text:00402FDE                 movsx   esi, bl
.text:00402FE1                 mov     [esp+5Ch+Str2], esi ; Val
.text:00402FE5                 mov     edi, esi
.text:00402FE7                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00402FEA                 call    strchr
.text:00402FEF                 mov     ecx, [ebp+14h]
.text:00402FF2                 cmp     byte ptr [ecx], 0
.text:00402FF5                 jnz     short loc_402FFA
.text:00402FF7                 inc     dword ptr [ebp+0]
.text:00402FFA
.text:00402FFA loc_402FFA:                             ; CODE XREF: sub_402AB0+545↑j
.text:00402FFA                 test    eax, eax
.text:00402FFC                 jz      loc_4033E0
.text:00403002                 cmp     bl, 3Ah ; ':'
.text:00403005                 jz      loc_4033E0
.text:0040300B                 cmp     byte ptr [eax], 57h ; 'W'
.text:0040300E                 jz      loc_4030C6
.text:00403014                 movzx   edx, byte ptr [eax+1]
.text:00403018
.text:00403018 loc_403018:                             ; CODE XREF: sub_402AB0+61D↓j
.text:00403018                 cmp     dl, 3Ah ; ':'
.text:0040301B                 jz      short loc_403024
.text:0040301D
.text:0040301D loc_40301D:                             ; CODE XREF: sub_402AB0+590↓j
.text:0040301D                 mov     eax, esi
.text:0040301F                 jmp     loc_402C07
.text:00403024 ; ---------------------------------------------------------------------------
.text:00403024
.text:00403024 loc_403024:                             ; CODE XREF: sub_402AB0+56B↑j
.text:00403024                 cmp     byte ptr [eax+2], 3Ah ; ':'
.text:00403028                 jz      loc_4030B1
.text:0040302E                 cmp     byte ptr [ecx], 0
.text:00403031                 jz      short loc_403042
.text:00403033
.text:00403033 loc_403033:                             ; CODE XREF: sub_402AB0+604↓j
.text:00403033                 inc     dword ptr [ebp+0]
.text:00403036                 mov     [ebp+0Ch], ecx
.text:00403039
.text:00403039 loc_403039:                             ; CODE XREF: sub_402AB0+5AB↓j
.text:00403039                                         ; sub_402AB0+5C6↓j ...
.text:00403039                 mov     dword ptr [ebp+14h], 0
.text:00403040                 jmp     short loc_40301D
.text:00403042 ; ---------------------------------------------------------------------------
.text:00403042
.text:00403042 loc_403042:                             ; CODE XREF: sub_402AB0+581↑j
.text:00403042                 mov     ecx, [ebp+0]
.text:00403045                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403049                 jz      short loc_40305D
.text:0040304B                 mov     eax, [esp+5Ch+arg_4]
.text:0040304F                 lea     edx, [ecx+1]
.text:00403052                 mov     [ebp+0], edx
.text:00403055                 mov     ebx, [eax+ecx*4]
.text:00403058                 mov     [ebp+0Ch], ebx
.text:0040305B                 jmp     short loc_403039
.text:0040305D ; ---------------------------------------------------------------------------
.text:0040305D
.text:0040305D loc_40305D:                             ; CODE XREF: sub_402AB0+599↑j
.text:0040305D                 mov     ecx, [esp+5Ch+var_14]
.text:00403061                 test    ecx, ecx
.text:00403063                 jnz     short loc_40307F
.text:00403065
.text:00403065 loc_403065:                             ; CODE XREF: sub_402AB0+5FF↓j
.text:00403065                 mov     [ebp+8], edi
.text:00403068                 mov     edi, [esp+5Ch+Str]
.text:0040306C                 cmp     byte ptr [edi], 3Ah ; ':'
.text:0040306F                 jz      short loc_403078
.text:00403071                 mov     esi, 3Fh ; '?'
.text:00403076                 jmp     short loc_403039
.text:00403078 ; ---------------------------------------------------------------------------
.text:00403078
.text:00403078 loc_403078:                             ; CODE XREF: sub_402AB0+5BF↑j
.text:00403078                 mov     esi, 3Ah ; ':'
.text:0040307D                 jmp     short loc_403039
.text:0040307F ; ---------------------------------------------------------------------------
.text:0040307F
.text:0040307F loc_40307F:                             ; CODE XREF: sub_402AB0+5B3↑j
.text:0040307F                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:00403086                 call    ds:libintl_gettext
.text:0040308C                 mov     [esp+5Ch+var_50], edi
.text:00403090                 mov     ebx, [esp+5Ch+arg_4]
.text:00403094                 mov     edx, ds:_iob
.text:0040309A                 mov     esi, [ebx]
.text:0040309C                 add     edx, 40h ; '@'
.text:0040309F                 mov     [esp+5Ch+Str2], eax ; Format
.text:004030A3                 mov     [esp+5Ch+MaxCount], esi
.text:004030A7                 mov     [esp+5Ch+Str1], edx ; Stream
.text:004030AA                 call    fprintf
.text:004030AF                 jmp     short loc_403065
.text:004030B1 ; ---------------------------------------------------------------------------
.text:004030B1
.text:004030B1 loc_4030B1:                             ; CODE XREF: sub_402AB0+578↑j
.text:004030B1                 cmp     byte ptr [ecx], 0
.text:004030B4                 jnz     loc_403033
.text:004030BA                 mov     dword ptr [ebp+0Ch], 0
.text:004030C1                 jmp     loc_403039
.text:004030C6 ; ---------------------------------------------------------------------------
.text:004030C6
.text:004030C6 loc_4030C6:                             ; CODE XREF: sub_402AB0+55E↑j
.text:004030C6                 movzx   edx, byte ptr [eax+1]
.text:004030CA                 cmp     dl, 3Bh ; ';'
.text:004030CD                 jnz     loc_403018
.text:004030D3                 mov     [esp+5Ch+var_2C], 0
.text:004030DB                 mov     [esp+5Ch+var_30], 0
.text:004030E3                 mov     [esp+5Ch+var_34], 0
.text:004030EB                 mov     [esp+5Ch+var_38], 0
.text:004030F3                 cmp     byte ptr [ecx], 0
.text:004030F6                 jz      loc_40336B
.text:004030FC                 inc     dword ptr [ebp+0]
.text:004030FF                 mov     [ebp+0Ch], ecx
.text:00403102
.text:00403102 loc_403102:                             ; CODE XREF: sub_402AB0+8D4↓j
.text:00403102                 mov     edi, [ebp+0Ch]
.text:00403105                 mov     [ebp+14h], edi
.text:00403108                 movzx   eax, byte ptr [edi]
.text:0040310B                 test    al, al
.text:0040310D                 jz      short loc_40311F
.text:0040310F                 cmp     al, 3Dh ; '='
.text:00403111                 jz      short loc_40311F
.text:00403113
.text:00403113 loc_403113:                             ; CODE XREF: sub_402AB0+66D↓j
.text:00403113                 inc     edi
.text:00403114                 movzx   eax, byte ptr [edi]
.text:00403117                 test    al, al
.text:00403119                 jz      short loc_40311F
.text:0040311B                 cmp     al, 3Dh ; '='
.text:0040311D                 jnz     short loc_403113
.text:0040311F
.text:0040311F loc_40311F:                             ; CODE XREF: sub_402AB0+65D↑j
.text:0040311F                                         ; sub_402AB0+661↑j ...
.text:0040311F                 mov     [esp+5Ch+var_3C], 0
.text:00403127                 mov     esi, [esp+5Ch+arg_C]
.text:0040312B                 mov     eax, [esi]
.text:0040312D                 test    eax, eax
.text:0040312F                 jz      loc_4032B0
.text:00403135                 mov     ecx, eax
.text:00403137
.text:00403137 loc_403137:                             ; CODE XREF: sub_402AB0+6B3↓j
.text:00403137                 mov     ebx, [ebp+14h]
.text:0040313A                 mov     eax, edi
.text:0040313C                 mov     [esp+5Ch+Str1], ecx ; Str1
.text:0040313F                 sub     eax, ebx
.text:00403141                 mov     [esp+5Ch+MaxCount], eax ; MaxCount
.text:00403145                 mov     [esp+5Ch+Str2], ebx ; Str2
.text:00403149                 call    strncmp
.text:0040314E                 test    eax, eax
.text:00403150                 jz      loc_403317
.text:00403156
.text:00403156 loc_403156:                             ; CODE XREF: sub_402AB0+88C↓j
.text:00403156                                         ; sub_402AB0+89D↓j
.text:00403156                 inc     [esp+5Ch+var_3C]
.text:0040315A                 add     esi, 10h
.text:0040315D                 mov     edx, [esi]
.text:0040315F                 test    edx, edx
.text:00403161                 mov     ecx, edx
.text:00403163                 jnz     short loc_403137
.text:00403165
.text:00403165 loc_403165:                             ; CODE XREF: sub_402AB0+8B6↓j
.text:00403165                 mov     esi, [esp+5Ch+var_34]
.text:00403169                 test    esi, esi
.text:0040316B                 jz      short loc_403179
.text:0040316D                 mov     ebx, [esp+5Ch+var_30]
.text:00403171                 test    ebx, ebx
.text:00403173                 jz      loc_4032C1
.text:00403179
.text:00403179 loc_403179:                             ; CODE XREF: sub_402AB0+6BB↑j
.text:00403179                 mov     esi, [esp+5Ch+var_2C]
.text:0040317D                 test    esi, esi
.text:0040317F                 jz      loc_4032B0
.text:00403185                 cmp     byte ptr [edi], 0
.text:00403188                 jz      loc_403230
.text:0040318E                 mov     ecx, [esp+5Ch+var_2C]
.text:00403192                 mov     ebx, [ecx+4]
.text:00403195                 test    ebx, ebx
.text:00403197                 jz      short loc_4031D8
.text:00403199                 lea     edx, [edi+1]
.text:0040319C                 mov     [ebp+0Ch], edx
.text:0040319F
.text:0040319F loc_40319F:                             ; CODE XREF: sub_402AB0+788↓j
.text:0040319F                                         ; sub_402AB0+7A7↓j
.text:0040319F                 mov     edi, [ebp+14h]
.text:004031A2                 mov     [esp+5Ch+Str1], edi ; Str
.text:004031A5                 call    strlen
.text:004031AA                 add     [ebp+14h], eax
.text:004031AD                 mov     eax, [esp+5Ch+arg_10]
.text:004031B1                 test    eax, eax
.text:004031B3                 jz      short loc_4031C0
.text:004031B5                 mov     edx, [esp+5Ch+var_38]
.text:004031B9                 mov     ebp, [esp+5Ch+arg_10]
.text:004031BD                 mov     [ebp+0], edx
.text:004031C0
.text:004031C0 loc_4031C0:                             ; CODE XREF: sub_402AB0+703↑j
.text:004031C0                 mov     eax, [esp+5Ch+var_2C]
.text:004031C4                 mov     ecx, [eax+8]
.text:004031C7                 test    ecx, ecx
.text:004031C9                 jnz     loc_402D8A
.text:004031CF                 mov     ecx, [esp+5Ch+var_2C]
.text:004031D3                 jmp     loc_402D82
.text:004031D8 ; ---------------------------------------------------------------------------
.text:004031D8
.text:004031D8 loc_4031D8:                             ; CODE XREF: sub_402AB0+6E7↑j
.text:004031D8                 mov     eax, [esp+5Ch+var_14]
.text:004031DC                 test    eax, eax
.text:004031DE                 jnz     short loc_4031F3
.text:004031E0
.text:004031E0 loc_4031E0:                             ; CODE XREF: sub_402AB0+779↓j
.text:004031E0                 mov     ecx, [ebp+14h]
.text:004031E3                 mov     [esp+5Ch+Str1], ecx ; Str
.text:004031E6                 call    strlen
.text:004031EB                 add     [ebp+14h], eax
.text:004031EE                 jmp     loc_402E08
.text:004031F3 ; ---------------------------------------------------------------------------
.text:004031F3
.text:004031F3 loc_4031F3:                             ; CODE XREF: sub_402AB0+72E↑j
.text:004031F3                 mov     [esp+5Ch+Str1], offset aSOptionWSDoesn ; "%s: option `-W %s' doesn't allow an arg"...
.text:004031FA                 call    ds:libintl_gettext
.text:00403200                 mov     edx, [esp+5Ch+var_2C]
.text:00403204                 mov     ebx, [esp+5Ch+arg_4]
.text:00403208                 mov     edi, [edx]
.text:0040320A                 mov     [esp+5Ch+var_50], edi
.text:0040320E                 mov     edi, ds:_iob
.text:00403214                 mov     esi, [ebx]
.text:00403216                 mov     [esp+5Ch+Str2], eax ; Format
.text:0040321A                 add     edi, 40h ; '@'
.text:0040321D                 mov     [esp+5Ch+MaxCount], esi
.text:00403221                 mov     [esp+5Ch+Str1], edi ; Stream
.text:00403224                 call    fprintf
.text:00403229                 jmp     short loc_4031E0
.text:00403229 ; ---------------------------------------------------------------------------
.text:0040322B                 align 10h
.text:00403230
.text:00403230 loc_403230:                             ; CODE XREF: sub_402AB0+6D8↑j
.text:00403230                 mov     esi, [esp+5Ch+var_2C]
.text:00403234                 cmp     dword ptr [esi+4], 1
.text:00403238                 jnz     loc_40319F
.text:0040323E                 mov     ecx, [ebp+0]
.text:00403241                 cmp     ecx, [esp+5Ch+arg_0]
.text:00403245                 jge     short loc_40325C
.text:00403247                 mov     eax, [esp+5Ch+arg_4]
.text:0040324B                 lea     ebx, [ecx+1]
.text:0040324E                 mov     [ebp+0], ebx
.text:00403251                 mov     edi, [eax+ecx*4]
.text:00403254                 mov     [ebp+0Ch], edi
.text:00403257                 jmp     loc_40319F
.text:0040325C ; ---------------------------------------------------------------------------
.text:0040325C
.text:0040325C loc_40325C:                             ; CODE XREF: sub_402AB0+795↑j
.text:0040325C                 mov     edx, [esp+5Ch+var_14]
.text:00403260                 test    edx, edx
.text:00403262                 jnz     short loc_403277
.text:00403264
.text:00403264 loc_403264:                             ; CODE XREF: sub_402AB0+7FE↓j
.text:00403264                 mov     edx, [ebp+14h]
.text:00403267                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040326A                 call    strlen
.text:0040326F                 add     [ebp+14h], eax
.text:00403272                 jmp     loc_402E99
.text:00403277 ; ---------------------------------------------------------------------------
.text:00403277
.text:00403277 loc_403277:                             ; CODE XREF: sub_402AB0+7B2↑j
.text:00403277                 mov     [esp+5Ch+Str1], offset aSOptionSRequir ; "%s: option `%s' requires an argument\n"
.text:0040327E                 call    ds:libintl_gettext
.text:00403284                 mov     ecx, [ebp+0]
.text:00403287                 mov     ebx, [esp+5Ch+arg_4]
.text:0040328B                 mov     edi, [ebx+ecx*4-4]
.text:0040328F                 mov     ecx, ds:_iob
.text:00403295                 mov     [esp+5Ch+var_50], edi
.text:00403299                 mov     esi, [ebx]
.text:0040329B                 add     ecx, 40h ; '@'
.text:0040329E                 mov     [esp+5Ch+Str2], eax ; Format
.text:004032A2                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004032A5                 mov     [esp+5Ch+MaxCount], esi
.text:004032A9                 call    fprintf
.text:004032AE                 jmp     short loc_403264
.text:004032B0 ; ---------------------------------------------------------------------------
.text:004032B0
.text:004032B0 loc_4032B0:                             ; CODE XREF: sub_402AB0+67F↑j
.text:004032B0                                         ; sub_402AB0+6CF↑j
.text:004032B0                 mov     dword ptr [ebp+14h], 0
.text:004032B7                 mov     eax, 57h ; 'W'
.text:004032BC                 jmp     loc_402C07
.text:004032C1 ; ---------------------------------------------------------------------------
.text:004032C1
.text:004032C1 loc_4032C1:                             ; CODE XREF: sub_402AB0+6C3↑j
.text:004032C1                 mov     edi, [esp+5Ch+var_14]
.text:004032C5                 test    edi, edi
.text:004032C7                 jnz     short loc_4032DF
.text:004032C9
.text:004032C9 loc_4032C9:                             ; CODE XREF: sub_402AB0+865↓j
.text:004032C9                 mov     edx, [ebp+14h]
.text:004032CC                 mov     [esp+5Ch+Str1], edx ; Str
.text:004032CF                 call    strlen
.text:004032D4                 add     [ebp+14h], eax
.text:004032D7                 inc     dword ptr [ebp+0]
.text:004032DA                 jmp     loc_402E08
.text:004032DF ; ---------------------------------------------------------------------------
.text:004032DF
.text:004032DF loc_4032DF:                             ; CODE XREF: sub_402AB0+817↑j
.text:004032DF                 mov     [esp+5Ch+Str1], offset aSOptionWSIsAmb ; "%s: option `-W %s' is ambiguous\n"
.text:004032E6                 call    ds:libintl_gettext
.text:004032EC                 mov     ecx, [ebp+0]
.text:004032EF                 mov     ebx, [esp+5Ch+arg_4]
.text:004032F3                 mov     edi, [ebx+ecx*4]
.text:004032F6                 mov     ecx, ds:_iob
.text:004032FC                 mov     [esp+5Ch+var_50], edi
.text:00403300                 mov     esi, [ebx]
.text:00403302                 add     ecx, 40h ; '@'
.text:00403305                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403309                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:0040330C                 mov     [esp+5Ch+MaxCount], esi
.text:00403310                 call    fprintf
.text:00403315                 jmp     short loc_4032C9
.text:00403317 ; ---------------------------------------------------------------------------
.text:00403317
.text:00403317 loc_403317:                             ; CODE XREF: sub_402AB0+6A0↑j
.text:00403317                 mov     edx, [ebp+14h]
.text:0040331A                 mov     ebx, edi
.text:0040331C                 mov     ecx, [esi]
.text:0040331E                 sub     ebx, edx
.text:00403320                 mov     [esp+5Ch+Str1], ecx ; Str
.text:00403323                 call    strlen
.text:00403328                 cmp     ebx, eax
.text:0040332A                 jz      short loc_403352
.text:0040332C                 mov     ebx, [esp+5Ch+var_2C]
.text:00403330                 test    ebx, ebx
.text:00403332                 jz      short loc_403341
.text:00403334                 mov     [esp+5Ch+var_34], 1
.text:0040333C                 jmp     loc_403156
.text:00403341 ; ---------------------------------------------------------------------------
.text:00403341
.text:00403341 loc_403341:                             ; CODE XREF: sub_402AB0+882↑j
.text:00403341                 mov     [esp+5Ch+var_2C], esi
.text:00403345                 mov     ecx, [esp+5Ch+var_3C]
.text:00403349                 mov     [esp+5Ch+var_38], ecx
.text:0040334D                 jmp     loc_403156
.text:00403352 ; ---------------------------------------------------------------------------
.text:00403352
.text:00403352 loc_403352:                             ; CODE XREF: sub_402AB0+87A↑j
.text:00403352                 mov     [esp+5Ch+var_2C], esi
.text:00403356                 mov     eax, [esp+5Ch+var_3C]
.text:0040335A                 mov     [esp+5Ch+var_30], 1
.text:00403362                 mov     [esp+5Ch+var_38], eax
.text:00403366                 jmp     loc_403165
.text:0040336B ; ---------------------------------------------------------------------------
.text:0040336B
.text:0040336B loc_40336B:                             ; CODE XREF: sub_402AB0+646↑j
.text:0040336B                 mov     edx, [ebp+0]
.text:0040336E                 cmp     edx, [esp+5Ch+arg_0]
.text:00403372                 jz      short loc_403389
.text:00403374                 mov     ebx, [esp+5Ch+arg_4]
.text:00403378                 lea     esi, [edx+1]
.text:0040337B                 mov     [ebp+0], esi
.text:0040337E                 mov     edi, [ebx+edx*4]
.text:00403381                 mov     [ebp+0Ch], edi
.text:00403384                 jmp     loc_403102
.text:00403389 ; ---------------------------------------------------------------------------
.text:00403389
.text:00403389 loc_403389:                             ; CODE XREF: sub_402AB0+8C2↑j
.text:00403389                 mov     edi, [esp+5Ch+var_14]
.text:0040338D                 test    edi, edi
.text:0040338F                 jnz     short loc_4033AC
.text:00403391
.text:00403391 loc_403391:                             ; CODE XREF: sub_402AB0+92C↓j
.text:00403391                 mov     [ebp+8], esi
.text:00403394                 mov     ebp, [esp+5Ch+Str]
.text:00403398                 cmp     byte ptr [ebp+0], 3Ah ; ':'
.text:0040339C                 jz      short loc_4033A8
.text:0040339E                 mov     bl, 3Fh ; '?'
.text:004033A0
.text:004033A0 loc_4033A0:                             ; CODE XREF: sub_402AB0+8FA↓j
.text:004033A0                 movsx   eax, bl
.text:004033A3                 jmp     loc_402C07
.text:004033A8 ; ---------------------------------------------------------------------------
.text:004033A8
.text:004033A8 loc_4033A8:                             ; CODE XREF: sub_402AB0+8EC↑j
.text:004033A8                 mov     bl, 3Ah ; ':'
.text:004033AA                 jmp     short loc_4033A0
.text:004033AC ; ---------------------------------------------------------------------------
.text:004033AC
.text:004033AC loc_4033AC:                             ; CODE XREF: sub_402AB0+8DF↑j
.text:004033AC                 mov     [esp+5Ch+Str1], offset aSOptionRequire ; "%s: option requires an argument -- %c\n"
.text:004033B3                 call    ds:libintl_gettext
.text:004033B9                 mov     [esp+5Ch+var_50], esi
.text:004033BD                 mov     edx, [esp+5Ch+arg_4]
.text:004033C1                 mov     ecx, ds:_iob
.text:004033C7                 mov     ebx, [edx]
.text:004033C9                 add     ecx, 40h ; '@'
.text:004033CC                 mov     [esp+5Ch+Str2], eax ; Format
.text:004033D0                 mov     [esp+5Ch+MaxCount], ebx
.text:004033D4                 mov     [esp+5Ch+Str1], ecx ; Stream
.text:004033D7                 call    fprintf
.text:004033DC                 jmp     short loc_403391
.text:004033DC ; ---------------------------------------------------------------------------
.text:004033DE                 align 10h
.text:004033E0
.text:004033E0 loc_4033E0:                             ; CODE XREF: sub_402AB0+54C↑j
.text:004033E0                                         ; sub_402AB0+555↑j
.text:004033E0                 mov     eax, [esp+5Ch+var_14]
.text:004033E4                 test    eax, eax
.text:004033E6                 jz      short loc_40341F
.text:004033E8                 mov     ebx, [ebp+1Ch]
.text:004033EB                 test    ebx, ebx
.text:004033ED                 jz      short loc_403427
.text:004033EF                 mov     [esp+5Ch+Str1], offset aSIllegalOption ; "%s: illegal option -- %c\n"
.text:004033F6
.text:004033F6 loc_4033F6:                             ; CODE XREF: sub_402AB0+97E↓j
.text:004033F6                 call    ds:libintl_gettext
.text:004033FC                 mov     [esp+5Ch+var_50], esi
.text:00403400                 mov     ebx, [esp+5Ch+arg_4]
.text:00403404                 mov     edx, ds:_iob
.text:0040340A                 mov     esi, [ebx]
.text:0040340C                 add     edx, 40h ; '@'
.text:0040340F                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403413                 mov     [esp+5Ch+MaxCount], esi
.text:00403417                 mov     [esp+5Ch+Str1], edx ; Stream
.text:0040341A                 call    fprintf
.text:0040341F
.text:0040341F loc_40341F:                             ; CODE XREF: sub_402AB0+936↑j
.text:0040341F                 mov     [ebp+8], edi
.text:00403422                 jmp     loc_402E08
.text:00403427 ; ---------------------------------------------------------------------------
.text:00403427
.text:00403427 loc_403427:                             ; CODE XREF: sub_402AB0+93D↑j
.text:00403427                 mov     [esp+5Ch+Str1], offset aSInvalidOption ; "%s: invalid option -- %c\n"
.text:0040342E                 jmp     short loc_4033F6
.text:00403430 ; ---------------------------------------------------------------------------
.text:00403430
.text:00403430 loc_403430:                             ; CODE XREF: sub_402AB0+26E↑j
.text:00403430                 mov     edi, [esp+5Ch+var_14]
.text:00403434                 test    edi, edi
.text:00403436                 jnz     short loc_40344E
.text:00403438
.text:00403438 loc_403438:                             ; CODE XREF: sub_402AB0+9D4↓j
.text:00403438                 mov     edx, [ebp+14h]
.text:0040343B                 mov     [esp+5Ch+Str1], edx ; Str
.text:0040343E                 call    strlen
.text:00403443                 add     [ebp+14h], eax
.text:00403446                 inc     dword ptr [ebp+0]
.text:00403449                 jmp     loc_402F8E
.text:0040344E ; ---------------------------------------------------------------------------
.text:0040344E
.text:0040344E loc_40344E:                             ; CODE XREF: sub_402AB0+986↑j
.text:0040344E                 mov     [esp+5Ch+Str1], offset aSOptionSIsAmbi ; "%s: option `%s' is ambiguous\n"
.text:00403455                 call    ds:libintl_gettext
.text:0040345B                 mov     ebx, [ebp+0]
.text:0040345E                 mov     edi, [esp+5Ch+arg_4]
.text:00403462                 mov     ecx, [edi+ebx*4]
.text:00403465                 mov     ebx, ds:_iob
.text:0040346B                 mov     [esp+5Ch+var_50], ecx
.text:0040346F                 mov     esi, [edi]
.text:00403471                 add     ebx, 40h ; '@'
.text:00403474                 mov     [esp+5Ch+Str2], eax ; Format
.text:00403478                 mov     [esp+5Ch+Str1], ebx ; Stream
.text:0040347B                 mov     [esp+5Ch+MaxCount], esi
.text:0040347F                 call    fprintf
.text:00403484                 jmp     short loc_403438
.text:00403486 ; ---------------------------------------------------------------------------
.text:00403486
.text:00403486 loc_403486:                             ; CODE XREF: sub_402AB0+246↑j
.text:00403486                 mov     ecx, [ebp+14h]
.text:00403489                 mov     ebx, edi
.text:0040348B                 mov     edx, [esi]
.text:0040348D                 sub     ebx, ecx
.text:0040348F                 mov     [esp+5Ch+Str1], edx ; Str
.text:00403492                 call    strlen
.text:00403497                 cmp     ebx, eax
.text:00403499                 jz      short loc_4034F1
.text:0040349B                 mov     ebx, [esp+5Ch+var_18]
.text:0040349F                 test    ebx, ebx
.text:004034A1                 jz      short loc_4034E0
.text:004034A3                 mov     edx, [esp+5Ch+arg_14]
.text:004034A7                 test    edx, edx
.text:004034A9                 jnz     short loc_4034B7
.text:004034AB                 mov     ecx, [esp+5Ch+var_18]
.text:004034AF                 mov     ebx, [esi+4]
.text:004034B2                 cmp     [ecx+4], ebx
.text:004034B5                 jz      short loc_4034C4
.text:004034B7
.text:004034B7 loc_4034B7:                             ; CODE XREF: sub_402AB0+9F9↑j
.text:004034B7                                         ; sub_402AB0+A1A↓j ...
.text:004034B7                 mov     [esp+5Ch+var_20], 1
.text:004034BF                 jmp     loc_402CFC
.text:004034C4 ; ---------------------------------------------------------------------------
.text:004034C4
.text:004034C4 loc_4034C4:                             ; CODE XREF: sub_402AB0+A05↑j
.text:004034C4                 mov     edx, [esi+8]
.text:004034C7                 cmp     [ecx+8], edx
.text:004034CA                 jnz     short loc_4034B7
.text:004034CC                 mov     ebx, [esi+0Ch]
.text:004034CF                 cmp     [ecx+0Ch], ebx
.text:004034D2                 jnz     short loc_4034B7
.text:004034D4                 jmp     loc_402CFC
.text:004034D4 ; ---------------------------------------------------------------------------
.text:004034D9                 align 10h
.text:004034E0
.text:004034E0 loc_4034E0:                             ; CODE XREF: sub_402AB0+9F1↑j
.text:004034E0                 mov     [esp+5Ch+var_18], esi
.text:004034E4                 mov     eax, [esp+5Ch+var_28]
.text:004034E8                 mov     [esp+5Ch+var_24], eax
.text:004034EC                 jmp     loc_402CFC
.text:004034F1 ; ---------------------------------------------------------------------------
.text:004034F1
.text:004034F1 loc_4034F1:                             ; CODE XREF: sub_402AB0+9E9↑j
.text:004034F1                 mov     [esp+5Ch+var_18], esi
.text:004034F5                 mov     ecx, [esp+5Ch+var_28]
.text:004034F9                 mov     [esp+5Ch+var_1C], 1
.text:00403501                 mov     [esp+5Ch+var_24], ecx
.text:00403505                 jmp     loc_402D10
.text:0040350A ; ---------------------------------------------------------------------------
.text:0040350A
.text:0040350A loc_40350A:                             ; CODE XREF: sub_402AB0+1BF↑j
.text:0040350A                 mov     eax, [esp+5Ch+Str]
.text:0040350E                 movsx   esi, dl
.text:00403511                 mov     [esp+5Ch+Str2], esi ; Val
.text:00403515                 mov     [esp+5Ch+Str1], eax ; Str
.text:00403518                 call    strchr
.text:0040351D                 test    eax, eax
.text:0040351F                 jnz     loc_402FD0
.text:00403525                 jmp     loc_402C75
.text:0040352A ; ---------------------------------------------------------------------------
.text:0040352A
.text:0040352A loc_40352A:                             ; CODE XREF: sub_402AB0+17C↑j
.text:0040352A                 mov     ecx, 1
.text:0040352F                 jmp     loc_402C32
.text:00403534 ; ---------------------------------------------------------------------------
.text:00403534
.text:00403534 loc_403534:                             ; CODE XREF: sub_402AB0+D4↑j
.text:00403534                                         ; sub_402AB0+130↑j
.text:00403534                 mov     eax, [ebp+20h]
.text:00403537                 cmp     eax, [ebp+24h]
.text:0040353A                 jz      loc_402C10
.text:00403540                 mov     [ebp+0], eax
.text:00403543                 jmp     loc_402C10
.text:00403548 ; ---------------------------------------------------------------------------
.text:00403548
.text:00403548 loc_403548:                             ; CODE XREF: sub_402AB0+FE↑j
.text:00403548                 mov     [ebp+20h], eax
.text:0040354B                 jmp     loc_402BD0
.text:00403550 ; ---------------------------------------------------------------------------
.text:00403550
.text:00403550 loc_403550:                             ; CODE XREF: sub_402AB0+CA↑j
.text:00403550                 mov     edx, [ebp+20h]
.text:00403553                 mov     eax, [ebp+24h]
.text:00403556                 cmp     edx, eax
.text:00403558                 jz      short loc_4035D0
.text:0040355A                 cmp     eax, ebx
.text:0040355C                 jz      short loc_403571
.text:0040355E                 mov     [esp+5Ch+Str2], ebp
.text:00403562                 mov     ebx, [esp+5Ch+arg_4]
.text:00403566                 mov     [esp+5Ch+Str1], ebx
.text:00403569                 call    sub_403760
.text:0040356E                 mov     ebx, [ebp+0]
.text:00403571
.text:00403571 loc_403571:                             ; CODE XREF: sub_402AB0+AAC↑j
.text:00403571                                         ; sub_402AB0+B22↓j ...
.text:00403571                 cmp     ebx, [esp+5Ch+arg_0]
.text:00403575                 jge     short loc_4035C0
.text:00403577                 mov     esi, [esp+5Ch+arg_4]
.text:0040357B                 mov     eax, [esi+ebx*4]
.text:0040357E                 cmp     byte ptr [eax], 2Dh ; '-'
.text:00403581                 jz      short loc_4035C8
.text:00403583                 lea     esi, [esi+0]
.text:00403589                 lea     edi, [edi+0]
.text:00403590
.text:00403590 loc_403590:                             ; CODE XREF: sub_402AB0+AFC↓j
.text:00403590                                         ; sub_402AB0+B1C↓j
.text:00403590                 lea     eax, [ebx+1]
.text:00403593                 mov     ebx, eax
.text:00403595                 mov     [ebp+0], eax
.text:00403598                 cmp     eax, [esp+5Ch+arg_0]
.text:0040359C                 jge     short loc_4035C0
.text:0040359E                 mov     edi, [esp+5Ch+arg_4]
.text:004035A2                 mov     edx, [edi+eax*4]
.text:004035A5                 cmp     byte ptr [edx], 2Dh ; '-'
.text:004035A8                 jz      short loc_4035B0
.text:004035AA
.text:004035AA loc_4035AA:                             ; CODE XREF: sub_402AB0+B04↓j
.text:004035AA                 mov     ebx, eax
.text:004035AC                 jmp     short loc_403590
.text:004035AC ; ---------------------------------------------------------------------------
.text:004035AE                 align 10h
.text:004035B0
.text:004035B0 loc_4035B0:                             ; CODE XREF: sub_402AB0+AF8↑j
.text:004035B0                 cmp     byte ptr [edx+1], 0
.text:004035B4                 jz      short loc_4035AA
.text:004035B6                 lea     esi, [esi+0]
.text:004035B9                 lea     edi, [edi+0]
.text:004035C0
.text:004035C0 loc_4035C0:                             ; CODE XREF: sub_402AB0+AC5↑j
.text:004035C0                                         ; sub_402AB0+AEC↑j ...
.text:004035C0                 mov     [ebp+24h], ebx
.text:004035C3                 jmp     loc_402B80
.text:004035C8 ; ---------------------------------------------------------------------------
.text:004035C8
.text:004035C8 loc_4035C8:                             ; CODE XREF: sub_402AB0+AD1↑j
.text:004035C8                 cmp     byte ptr [eax+1], 0
.text:004035CC                 jz      short loc_403590
.text:004035CE                 jmp     short loc_4035C0
.text:004035D0 ; ---------------------------------------------------------------------------
.text:004035D0
.text:004035D0 loc_4035D0:                             ; CODE XREF: sub_402AB0+AA8↑j
.text:004035D0                 cmp     edx, ebx
.text:004035D2                 jz      short loc_403571
.text:004035D4                 mov     [ebp+20h], ebx
.text:004035D7                 jmp     short loc_403571
.text:004035D9 ; ---------------------------------------------------------------------------
.text:004035D9
.text:004035D9 loc_4035D9:                             ; CODE XREF: sub_402AB0+88↑j
.text:004035D9                 mov     dword ptr [ebp+18h], 0
.text:004035E0                 mov     esi, [esp+5Ch+Str]
.text:004035E4
.text:004035E4 loc_4035E4:                             ; CODE XREF: sub_402AB0+B49↓j
.text:004035E4                 inc     esi
.text:004035E5                 jmp     loc_402B48
.text:004035E5 ; ---------------------------------------------------------------------------
.text:004035EA                 align 10h
.text:004035F0
.text:004035F0 loc_4035F0:                             ; CODE XREF: sub_402AB0+80↑j
.text:004035F0                 mov     dword ptr [ebp+18h], 2
.text:004035F7                 mov     esi, ecx
.text:004035F9                 jmp     short loc_4035E4
.text:004035F9 ; ---------------------------------------------------------------------------
.text:004035FB                 align 10h
.text:00403600
.text:00403600 loc_403600:                             ; CODE XREF: sub_402AB0+69↑j
.text:00403600                 mov     [esp+5Ch+Str1], offset VarName ; "POSIXLY_CORRECT"
.text:00403607                 call    getenv
.text:0040360C                 test    eax, eax
.text:0040360E                 jz      loc_402B24
.text:00403614                 jmp     loc_402B1F
.text:00403614 ; ---------------------------------------------------------------------------
.text:00403619                 align 10h
.text:00403620
.text:00403620 loc_403620:                             ; CODE XREF: sub_402AB0+3F↑j
.text:00403620                 mov     dword ptr [ebp+0], 1
.text:00403627                 mov     ebx, 1
.text:0040362C                 jmp     loc_402B00
.text:0040362C sub_402AB0      endp
.text:0040362C
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403631                 jmp     short sub_403640
.text:00403631 ; ---------------------------------------------------------------------------
.text:00403633                 align 10h
.text:00403640
.text:00403640 ; =============== S U B R O U T I N E =======================================
.text:00403640
.text:00403640
.text:00403640 ; int __cdecl sub_403640(int, int, char *, int, int, int, int)
.text:00403640 sub_403640      proc near               ; CODE XREF: .text:00403631↑j
.text:00403640                                         ; sub_404050+3A↓p ...
.text:00403640
.text:00403640 var_2C          = dword ptr -2Ch
.text:00403640 var_28          = dword ptr -28h
.text:00403640 Str             = dword ptr -24h
.text:00403640 var_20          = dword ptr -20h
.text:00403640 var_1C          = dword ptr -1Ch
.text:00403640 var_18          = dword ptr -18h
.text:00403640 var_14          = dword ptr -14h
.text:00403640 var_10          = dword ptr -10h
.text:00403640 arg_0           = dword ptr  4
.text:00403640 arg_4           = dword ptr  8
.text:00403640 arg_8           = dword ptr  0Ch
.text:00403640 arg_C           = dword ptr  10h
.text:00403640 arg_10          = dword ptr  14h
.text:00403640 arg_14          = dword ptr  18h
.text:00403640 arg_18          = dword ptr  1Ch
.text:00403640
.text:00403640                 sub     esp, 2Ch
.text:00403643                 mov     edx, dword_40E040
.text:00403649                 mov     [esp+2Ch+var_10], offset dword_40F030 ; int
.text:00403651                 mov     ecx, dword_40E044
.text:00403657                 mov     ds:dword_40F030, edx
.text:0040365D                 mov     edx, [esp+2Ch+arg_18]
.text:00403661                 mov     ds:dword_40F034, ecx
.text:00403667                 mov     ecx, [esp+2Ch+arg_14]
.text:0040366B                 mov     [esp+2Ch+var_14], edx ; int
.text:0040366F                 mov     edx, [esp+2Ch+arg_10]
.text:00403673                 mov     [esp+2Ch+var_18], ecx ; int
.text:00403677                 mov     ecx, [esp+2Ch+arg_C]
.text:0040367B                 mov     [esp+2Ch+var_1C], edx ; int
.text:0040367F                 mov     edx, [esp+2Ch+arg_8]
.text:00403683                 mov     [esp+2Ch+var_20], ecx ; int
.text:00403687                 mov     ecx, [esp+2Ch+arg_4]
.text:0040368B                 mov     [esp+2Ch+Str], edx ; Str
.text:0040368F                 mov     edx, [esp+2Ch+arg_0]
.text:00403693                 mov     [esp+2Ch+var_28], ecx ; int
.text:00403697                 mov     [esp+2Ch+var_2C], edx ; int
.text:0040369A                 call    sub_402AB0
.text:0040369F                 mov     ecx, ds:dword_40F030
.text:004036A5                 mov     dword_40E040, ecx
.text:004036AB                 mov     ecx, ds:dword_40F03C
.text:004036B1                 mov     ds:dword_40F540, ecx
.text:004036B7                 mov     ecx, ds:dword_40F038
.text:004036BD                 mov     dword_40E048, ecx
.text:004036C3                 add     esp, 2Ch
.text:004036C6                 retn
.text:004036C6 sub_403640      endp
.text:004036C6
.text:004036C6 ; ---------------------------------------------------------------------------
.text:004036C7                 align 10h
.text:004036D0                 sub     esp, 2Ch
.text:004036D3                 mov     edx, dword_40E040
.text:004036D9                 mov     dword ptr [esp+1Ch], offset dword_40F030
.text:004036E1                 mov     ecx, dword_40E044
.text:004036E7                 mov     dword ptr [esp+18h], 1
.text:004036EF                 mov     ds:dword_40F030, edx
.text:004036F5                 mov     edx, [esp+38h]
.text:004036F9                 mov     ds:dword_40F034, ecx
.text:004036FF                 mov     ecx, [esp+34h]
.text:00403703                 mov     [esp+8], edx
.text:00403707                 mov     edx, [esp+30h]
.text:0040370B                 mov     [esp+4], ecx
.text:0040370F                 mov     dword ptr [esp+14h], 0
.text:00403717                 mov     dword ptr [esp+10h], 0
.text:0040371F                 mov     dword ptr [esp+0Ch], 0
.text:00403727                 mov     [esp], edx
.text:0040372A                 call    sub_402AB0
.text:0040372F                 mov     ecx, ds:dword_40F030
.text:00403735                 mov     dword_40E040, ecx
.text:0040373B                 mov     ecx, ds:dword_40F03C
.text:00403741                 mov     ds:dword_40F540, ecx
.text:00403747                 mov     ecx, ds:dword_40F038
.text:0040374D                 mov     dword_40E048, ecx
.text:00403753                 add     esp, 2Ch
.text:00403756                 retn
.text:00403756 ; ---------------------------------------------------------------------------
.text:00403757                 align 10h
.text:00403760
.text:00403760 ; =============== S U B R O U T I N E =======================================
.text:00403760
.text:00403760
.text:00403760 sub_403760      proc near               ; CODE XREF: sub_402AB0+113↑p
.text:00403760                                         ; sub_402AB0+AB9↑p
.text:00403760
.text:00403760 var_2C          = dword ptr -2Ch
.text:00403760 var_28          = dword ptr -28h
.text:00403760 var_24          = dword ptr -24h
.text:00403760 var_20          = dword ptr -20h
.text:00403760 var_1C          = dword ptr -1Ch
.text:00403760 var_18          = dword ptr -18h
.text:00403760 var_14          = dword ptr -14h
.text:00403760 arg_0           = dword ptr  4
.text:00403760 arg_4           = dword ptr  8
.text:00403760
.text:00403760                 push    ebp
.text:00403761                 push    edi
.text:00403762                 push    esi
.text:00403763                 push    ebx
.text:00403764                 sub     esp, 1Ch
.text:00403767                 mov     ecx, [esp+2Ch+arg_4]
.text:0040376B                 mov     eax, [esp+2Ch+arg_4]
.text:0040376F                 mov     ebx, [esp+2Ch+arg_4]
.text:00403773                 mov     edx, [ecx+20h]
.text:00403776                 mov     edi, [esp+2Ch+arg_0]
.text:0040377A                 mov     ecx, [ebx]
.text:0040377C                 mov     [esp+2Ch+var_2C], edx
.text:0040377F                 mov     [esp+2Ch+var_14], edx
.text:00403783                 mov     edx, [eax+24h]
.text:00403786                 mov     [esp+2Ch+var_28], ecx
.text:0040378A                 mov     [esp+2Ch+var_1C], ecx
.text:0040378E                 cmp     ecx, edx
.text:00403790                 mov     [esp+2Ch+var_18], edx
.text:00403794                 jle     short loc_403810
.text:00403796                 mov     esi, [esp+2Ch+var_2C]
.text:00403799                 cmp     edx, esi
.text:0040379B                 jle     short loc_403810
.text:0040379D                 lea     esi, [esi+0]
.text:004037A0
.text:004037A0 loc_4037A0:                             ; CODE XREF: sub_403760+A1↓j
.text:004037A0                 mov     ebx, [esp+2Ch+var_1C]
.text:004037A4                 mov     edx, [esp+2Ch+var_18]
.text:004037A8                 mov     ebp, [esp+2Ch+var_18]
.text:004037AC                 mov     eax, [esp+2Ch+var_14]
.text:004037B0                 sub     ebx, edx
.text:004037B2                 mov     [esp+2Ch+var_20], ebx
.text:004037B6                 sub     ebp, eax
.text:004037B8                 cmp     ebx, ebp
.text:004037BA                 jle     short loc_403835
.text:004037BC                 xor     esi, esi
.text:004037BE                 cmp     esi, ebp
.text:004037C0                 jge     short loc_4037ED
.text:004037C2                 mov     ecx, [esp+2Ch+var_1C]
.text:004037C6                 sub     ecx, ebp
.text:004037C8                 mov     [esp+2Ch+var_24], ecx
.text:004037CC                 lea     esi, [esi+0]
.text:004037D0
.text:004037D0 loc_4037D0:                             ; CODE XREF: sub_403760+8B↓j
.text:004037D0                 mov     ecx, [esp+2Ch+var_14]
.text:004037D4                 mov     edx, [esp+2Ch+var_24]
.text:004037D8                 add     ecx, esi
.text:004037DA                 add     edx, esi
.text:004037DC                 mov     ebx, [edi+ecx*4]
.text:004037DF                 mov     eax, [edi+edx*4]
.text:004037E2                 inc     esi
.text:004037E3                 cmp     esi, ebp
.text:004037E5                 mov     [edi+ecx*4], eax
.text:004037E8                 mov     [edi+edx*4], ebx
.text:004037EB                 jl      short loc_4037D0
.text:004037ED
.text:004037ED loc_4037ED:                             ; CODE XREF: sub_403760+60↑j
.text:004037ED                 sub     [esp+2Ch+var_1C], ebp
.text:004037F1
.text:004037F1 loc_4037F1:                             ; CODE XREF: sub_403760+107↓j
.text:004037F1                 mov     eax, [esp+2Ch+var_18]
.text:004037F5                 cmp     [esp+2Ch+var_1C], eax
.text:004037F9                 jle     short loc_403810
.text:004037FB                 mov     ebp, [esp+2Ch+var_14]
.text:004037FF                 cmp     eax, ebp
.text:00403801                 jg      short loc_4037A0
.text:00403803                 lea     esi, [esi+0]
.text:00403809                 lea     edi, [edi+0]
.text:00403810
.text:00403810 loc_403810:                             ; CODE XREF: sub_403760+34↑j
.text:00403810                                         ; sub_403760+3B↑j ...
.text:00403810                 mov     esi, [esp+2Ch+var_28]
.text:00403814                 mov     ecx, [esp+2Ch+var_18]
.text:00403818                 mov     eax, [esp+2Ch+var_2C]
.text:0040381B                 mov     edi, [esp+2Ch+arg_4]
.text:0040381F                 mov     edx, [esp+2Ch+var_28]
.text:00403823                 sub     esi, ecx
.text:00403825                 add     esi, eax
.text:00403827                 mov     [edi+20h], esi
.text:0040382A                 mov     [edi+24h], edx
.text:0040382D                 add     esp, 1Ch
.text:00403830                 pop     ebx
.text:00403831                 pop     esi
.text:00403832                 pop     edi
.text:00403833                 pop     ebp
.text:00403834                 retn
.text:00403835 ; ---------------------------------------------------------------------------
.text:00403835
.text:00403835 loc_403835:                             ; CODE XREF: sub_403760+5A↑j
.text:00403835                 xor     esi, esi
.text:00403837                 cmp     esi, [esp+2Ch+var_20]
.text:0040383B                 jge     short loc_40385F
.text:0040383D                 lea     esi, [esi+0]
.text:00403840
.text:00403840 loc_403840:                             ; CODE XREF: sub_403760+FD↓j
.text:00403840                 mov     ebx, [esp+2Ch+var_14]
.text:00403844                 mov     ebp, [esp+2Ch+var_18]
.text:00403848                 add     ebx, esi
.text:0040384A                 add     ebp, esi
.text:0040384C                 mov     edx, [edi+ebx*4]
.text:0040384F                 inc     esi
.text:00403850                 cmp     esi, [esp+2Ch+var_20]
.text:00403854                 mov     ecx, [edi+ebp*4]
.text:00403857                 mov     [edi+ebx*4], ecx
.text:0040385A                 mov     [edi+ebp*4], edx
.text:0040385D                 jl      short loc_403840
.text:0040385F
.text:0040385F loc_40385F:                             ; CODE XREF: sub_403760+DB↑j
.text:0040385F                 mov     esi, [esp+2Ch+var_20]
.text:00403863                 add     [esp+2Ch+var_14], esi
.text:00403867                 jmp     short loc_4037F1
.text:00403867 sub_403760      endp
.text:00403867
.text:00403867 ; ---------------------------------------------------------------------------
.text:00403869                 align 20h
.text:00403880                 sub     esp, 0Ch
.text:00403883                 xor     edx, edx
.text:00403885                 mov     ecx, [esp+14h]
.text:00403889                 mov     [esp+8], ebx
.text:0040388D                 mov     eax, 0FFFFFFFFh
.text:00403892                 mov     ebx, [esp+10h]
.text:00403896                 div     ecx
.text:00403898                 cmp     eax, ebx
.text:0040389A                 jb      short loc_4038B9
.text:0040389C                 mov     edx, ebx
.text:0040389E                 imul    edx, ecx
.text:004038A1                 mov     [esp], edx
.text:004038A4                 call    malloc
.text:004038A9                 test    eax, eax
.text:004038AB                 jz      short loc_4038B5
.text:004038AD
.text:004038AD loc_4038AD:                             ; CODE XREF: .text:004038B7↓j
.text:004038AD                 mov     ebx, [esp+8]
.text:004038B1                 add     esp, 0Ch
.text:004038B4                 retn
.text:004038B5 ; ---------------------------------------------------------------------------
.text:004038B5
.text:004038B5 loc_4038B5:                             ; CODE XREF: .text:004038AB↑j
.text:004038B5                 test    ebx, ebx
.text:004038B7                 jz      short loc_4038AD
.text:004038B9
.text:004038B9 loc_4038B9:                             ; CODE XREF: .text:0040389A↑j
.text:004038B9                 call    sub_404390
.text:004038B9 ; ---------------------------------------------------------------------------
.text:004038BE                 align 10h
.text:004038C0
.text:004038C0 ; =============== S U B R O U T I N E =======================================
.text:004038C0
.text:004038C0
.text:004038C0 ; int __cdecl sub_4038C0(size_t)
.text:004038C0 sub_4038C0      proc near               ; CODE XREF: sub_4018A0+577↑p
.text:004038C0                                         ; sub_4018A0+77C↑p ...
.text:004038C0
.text:004038C0 Size            = dword ptr -0Ch
.text:004038C0 var_4           = dword ptr -4
.text:004038C0 arg_0           = dword ptr  4
.text:004038C0
.text:004038C0                 sub     esp, 0Ch
.text:004038C3                 mov     [esp+0Ch+var_4], ebx
.text:004038C7                 mov     ebx, [esp+0Ch+arg_0]
.text:004038CB                 mov     [esp+0Ch+Size], ebx ; Size
.text:004038CE                 call    malloc
.text:004038D3                 test    eax, eax
.text:004038D5                 jz      short loc_4038E0
.text:004038D7
.text:004038D7 loc_4038D7:                             ; CODE XREF: sub_4038C0+22↓j
.text:004038D7                 mov     ebx, [esp+0Ch+var_4]
.text:004038DB                 add     esp, 0Ch
.text:004038DE                 retn
.text:004038DE ; ---------------------------------------------------------------------------
.text:004038DF                 align 10h
.text:004038E0
.text:004038E0 loc_4038E0:                             ; CODE XREF: sub_4038C0+15↑j
.text:004038E0                 test    ebx, ebx
.text:004038E2                 jz      short loc_4038D7
.text:004038E4                 call    sub_404390
.text:004038E4 sub_4038C0      endp
.text:004038E4
.text:004038E4 ; ---------------------------------------------------------------------------
.text:004038E9                 align 10h
.text:004038F0                 sub     esp, 1Ch
.text:004038F3                 xor     edx, edx
.text:004038F5                 mov     eax, 0FFFFFFFFh
.text:004038FA                 mov     [esp+14h], ebx
.text:004038FE                 mov     ecx, [esp+20h]
.text:00403902                 mov     ebx, [esp+28h]
.text:00403906                 mov     [esp+18h], esi
.text:0040390A                 mov     esi, [esp+24h]
.text:0040390E                 div     ebx
.text:00403910                 cmp     eax, esi
.text:00403912                 jb      short loc_403944
.text:00403914                 mov     [esp], ecx
.text:00403917                 mov     edx, esi
.text:00403919                 imul    edx, ebx
.text:0040391C                 mov     [esp+4], edx
.text:00403920                 call    realloc
.text:00403925                 test    eax, eax
.text:00403927                 mov     ecx, eax
.text:00403929                 jz      short loc_403940
.text:0040392B
.text:0040392B loc_40392B:                             ; CODE XREF: .text:00403942↓j
.text:0040392B                 mov     ebx, [esp+14h]
.text:0040392F                 mov     eax, ecx
.text:00403931                 mov     esi, [esp+18h]
.text:00403935                 add     esp, 1Ch
.text:00403938                 retn
.text:00403938 ; ---------------------------------------------------------------------------
.text:00403939                 align 10h
.text:00403940
.text:00403940 loc_403940:                             ; CODE XREF: .text:00403929↑j
.text:00403940                 test    esi, esi
.text:00403942                 jz      short loc_40392B
.text:00403944
.text:00403944 loc_403944:                             ; CODE XREF: .text:00403912↑j
.text:00403944                 call    sub_404390
.text:00403944 ; ---------------------------------------------------------------------------
.text:00403949                 align 10h
.text:00403950
.text:00403950 ; =============== S U B R O U T I N E =======================================
.text:00403950
.text:00403950
.text:00403950 ; int __cdecl sub_403950(void *, size_t)
.text:00403950 sub_403950      proc near               ; CODE XREF: sub_4055A0+5B↓p
.text:00403950
.text:00403950 Block           = dword ptr -0Ch
.text:00403950 Size            = dword ptr -8
.text:00403950 var_4           = dword ptr -4
.text:00403950 arg_0           = dword ptr  4
.text:00403950 arg_4           = dword ptr  8
.text:00403950
.text:00403950                 sub     esp, 0Ch
.text:00403953                 mov     edx, [esp+0Ch+arg_0]
.text:00403957                 mov     [esp+0Ch+var_4], ebx
.text:0040395B                 mov     ebx, [esp+0Ch+arg_4]
.text:0040395F                 mov     [esp+0Ch+Block], edx ; Block
.text:00403962                 mov     [esp+0Ch+Size], ebx ; Size
.text:00403966                 call    realloc
.text:0040396B                 test    eax, eax
.text:0040396D                 jz      short loc_403977
.text:0040396F
.text:0040396F loc_40396F:                             ; CODE XREF: sub_403950+29↓j
.text:0040396F                 mov     ebx, [esp+0Ch+var_4]
.text:00403973                 add     esp, 0Ch
.text:00403976                 retn
.text:00403977 ; ---------------------------------------------------------------------------
.text:00403977
.text:00403977 loc_403977:                             ; CODE XREF: sub_403950+1D↑j
.text:00403977                 test    ebx, ebx
.text:00403979                 jz      short loc_40396F
.text:0040397B                 call    sub_404390
.text:0040397B sub_403950      endp
.text:0040397B
.text:00403980 ; ---------------------------------------------------------------------------
.text:00403980                 jmp     sub_403AD0
.text:00403980 ; ---------------------------------------------------------------------------
.text:00403985                 align 10h
.text:00403990                 sub     esp, 0Ch
.text:00403993                 mov     edx, [esp+14h]
.text:00403997                 mov     dword ptr [esp+8], 1
.text:0040399F                 mov     [esp+4], edx
.text:004039A3                 mov     edx, [esp+10h]
.text:004039A7                 mov     [esp], edx
.text:004039AA                 call    sub_403AD0
.text:004039AF                 add     esp, 0Ch
.text:004039B2                 retn
.text:004039B2 ; ---------------------------------------------------------------------------
.text:004039B3                 align 10h
.text:004039C0                 sub     esp, 1Ch
.text:004039C3                 mov     [esp+18h], ebx
.text:004039C7                 mov     ebx, [esp+20h]
.text:004039CB                 mov     [esp], ebx
.text:004039CE                 call    malloc
.text:004039D3                 test    eax, eax
.text:004039D5                 jz      short loc_4039F3
.text:004039D7
.text:004039D7 loc_4039D7:                             ; CODE XREF: .text:004039F5↓j
.text:004039D7                 mov     [esp+8], ebx
.text:004039DB                 mov     dword ptr [esp+4], 0
.text:004039E3                 mov     [esp], eax
.text:004039E6                 call    memset
.text:004039EB                 mov     ebx, [esp+18h]
.text:004039EF                 add     esp, 1Ch
.text:004039F2                 retn
.text:004039F3 ; ---------------------------------------------------------------------------
.text:004039F3
.text:004039F3 loc_4039F3:                             ; CODE XREF: .text:004039D5↑j
.text:004039F3                 test    ebx, ebx
.text:004039F5                 jz      short loc_4039D7
.text:004039F7                 call    sub_404390
.text:004039F7 ; ---------------------------------------------------------------------------
.text:004039FC                 align 10h
.text:00403A00                 sub     esp, 0Ch
.text:00403A03                 xor     edx, edx
.text:00403A05                 mov     ecx, [esp+14h]
.text:00403A09                 mov     [esp+8], ebx
.text:00403A0D                 mov     eax, 0FFFFFFFFh
.text:00403A12                 mov     ebx, [esp+10h]
.text:00403A16                 div     ecx
.text:00403A18                 cmp     eax, ebx
.text:00403A1A                 jb      short loc_403A38
.text:00403A1C                 mov     [esp+4], ecx
.text:00403A20                 mov     [esp], ebx
.text:00403A23                 call    calloc
.text:00403A28                 test    eax, eax
.text:00403A2A                 jz      short loc_403A34
.text:00403A2C
.text:00403A2C loc_403A2C:                             ; CODE XREF: .text:00403A36↓j
.text:00403A2C                 mov     ebx, [esp+8]
.text:00403A30                 add     esp, 0Ch
.text:00403A33                 retn
.text:00403A34 ; ---------------------------------------------------------------------------
.text:00403A34
.text:00403A34 loc_403A34:                             ; CODE XREF: .text:00403A2A↑j
.text:00403A34                 test    ebx, ebx
.text:00403A36                 jz      short loc_403A2C
.text:00403A38
.text:00403A38 loc_403A38:                             ; CODE XREF: .text:00403A1A↑j
.text:00403A38                 call    sub_404390
.text:00403A38 ; ---------------------------------------------------------------------------
.text:00403A3D                 align 10h
.text:00403A40                 sub     esp, 1Ch
.text:00403A43                 mov     [esp+18h], ebx
.text:00403A47                 mov     ebx, [esp+24h]
.text:00403A4B                 mov     [esp], ebx
.text:00403A4E                 call    malloc
.text:00403A53                 test    eax, eax
.text:00403A55                 mov     edx, eax
.text:00403A57                 jz      short loc_403A75
.text:00403A59
.text:00403A59 loc_403A59:                             ; CODE XREF: .text:00403A77↓j
.text:00403A59                 mov     [esp+8], ebx
.text:00403A5D                 mov     ecx, [esp+20h]
.text:00403A61                 mov     [esp], edx
.text:00403A64                 mov     [esp+4], ecx
.text:00403A68                 call    memcpy
.text:00403A6D                 mov     ebx, [esp+18h]
.text:00403A71                 add     esp, 1Ch
.text:00403A74                 retn
.text:00403A75 ; ---------------------------------------------------------------------------
.text:00403A75
.text:00403A75 loc_403A75:                             ; CODE XREF: .text:00403A57↑j
.text:00403A75                 test    ebx, ebx
.text:00403A77                 jz      short loc_403A59
.text:00403A79                 call    sub_404390
.text:00403A79 ; ---------------------------------------------------------------------------
.text:00403A7E                 align 10h
.text:00403A80                 sub     esp, 1Ch
.text:00403A83                 mov     [esp+18h], esi
.text:00403A87                 mov     esi, [esp+20h]
.text:00403A8B                 mov     [esp+14h], ebx
.text:00403A8F                 mov     [esp], esi
.text:00403A92                 call    strlen
.text:00403A97                 lea     ebx, [eax+1]
.text:00403A9A                 mov     [esp], ebx
.text:00403A9D                 call    malloc
.text:00403AA2                 test    eax, eax
.text:00403AA4                 jz      short loc_403AC2
.text:00403AA6
.text:00403AA6 loc_403AA6:                             ; CODE XREF: .text:00403AC4↓j
.text:00403AA6                 mov     [esp+8], ebx
.text:00403AAA                 mov     [esp+4], esi
.text:00403AAE                 mov     [esp], eax
.text:00403AB1                 call    memcpy
.text:00403AB6                 mov     ebx, [esp+14h]
.text:00403ABA                 mov     esi, [esp+18h]
.text:00403ABE                 add     esp, 1Ch
.text:00403AC1                 retn
.text:00403AC2 ; ---------------------------------------------------------------------------
.text:00403AC2
.text:00403AC2 loc_403AC2:                             ; CODE XREF: .text:00403AA4↑j
.text:00403AC2                 test    ebx, ebx
.text:00403AC4                 jz      short loc_403AA6
.text:00403AC6                 call    sub_404390
.text:00403AC6 ; ---------------------------------------------------------------------------
.text:00403ACB                 align 10h
.text:00403AD0
.text:00403AD0 ; =============== S U B R O U T I N E =======================================
.text:00403AD0
.text:00403AD0
.text:00403AD0 ; int __cdecl sub_403AD0(void *, int, int)
.text:00403AD0 sub_403AD0      proc near               ; CODE XREF: .text:00403980↑j
.text:00403AD0                                         ; .text:004039AA↑p
.text:00403AD0
.text:00403AD0 Block           = dword ptr -1Ch
.text:00403AD0 Size            = dword ptr -18h
.text:00403AD0 var_C           = dword ptr -0Ch
.text:00403AD0 var_8           = dword ptr -8
.text:00403AD0 var_4           = dword ptr -4
.text:00403AD0 arg_0           = dword ptr  4
.text:00403AD0 arg_4           = dword ptr  8
.text:00403AD0 arg_8           = dword ptr  0Ch
.text:00403AD0
.text:00403AD0                 sub     esp, 1Ch
.text:00403AD3                 mov     [esp+1Ch+var_8], esi
.text:00403AD7                 mov     esi, [esp+1Ch+arg_0]
.text:00403ADB                 mov     [esp+1Ch+var_4], edi
.text:00403ADF                 mov     edi, [esp+1Ch+arg_4]
.text:00403AE3                 test    esi, esi
.text:00403AE5                 mov     [esp+1Ch+var_C], ebx
.text:00403AE9                 mov     ecx, [edi]
.text:00403AEB                 mov     ebx, [esp+1Ch+arg_8]
.text:00403AEF                 jz      short loc_403B30
.text:00403AF1                 xor     edx, edx
.text:00403AF3                 mov     eax, 7FFFFFFFh
.text:00403AF8                 div     ebx
.text:00403AFA                 cmp     eax, ecx
.text:00403AFC                 jb      short loc_403B29
.text:00403AFE                 add     ecx, ecx
.text:00403B00
.text:00403B00 loc_403B00:                             ; CODE XREF: sub_403AD0+62↓j
.text:00403B00                                         ; sub_403AD0+71↓j ...
.text:00403B00                 mov     [edi], ecx
.text:00403B02                 imul    ebx, ecx
.text:00403B05                 mov     [esp+1Ch+Block], esi ; Block
.text:00403B08                 mov     [esp+1Ch+Size], ebx ; Size
.text:00403B0C                 call    realloc
.text:00403B11                 test    eax, eax
.text:00403B13                 jz      short loc_403B25
.text:00403B15
.text:00403B15 loc_403B15:                             ; CODE XREF: sub_403AD0+57↓j
.text:00403B15                 mov     ebx, [esp+1Ch+var_C]
.text:00403B19                 mov     esi, [esp+1Ch+var_8]
.text:00403B1D                 mov     edi, [esp+1Ch+var_4]
.text:00403B21                 add     esp, 1Ch
.text:00403B24                 retn
.text:00403B25 ; ---------------------------------------------------------------------------
.text:00403B25
.text:00403B25 loc_403B25:                             ; CODE XREF: sub_403AD0+43↑j
.text:00403B25                 test    ebx, ebx
.text:00403B27                 jz      short loc_403B15
.text:00403B29
.text:00403B29 loc_403B29:                             ; CODE XREF: sub_403AD0+2C↑j
.text:00403B29                 call    sub_404390
.text:00403B29 ; ---------------------------------------------------------------------------
.text:00403B2E                 align 10h
.text:00403B30
.text:00403B30 loc_403B30:                             ; CODE XREF: sub_403AD0+1F↑j
.text:00403B30                 test    ecx, ecx
.text:00403B32                 jnz     short loc_403B00
.text:00403B34                 xor     edx, edx
.text:00403B36                 mov     eax, 40h ; '@'
.text:00403B3B                 div     ebx
.text:00403B3D                 test    eax, eax
.text:00403B3F                 mov     ecx, eax
.text:00403B41                 jnz     short loc_403B00
.text:00403B43                 mov     ecx, 1
.text:00403B48                 jmp     short loc_403B00
.text:00403B48 sub_403AD0      endp
.text:00403B48
.text:00403B48 ; ---------------------------------------------------------------------------
.text:00403B4A                 align 10h
.text:00403B50 aCopyrightC2005 db 'Copyright (C) 2005 Free Software Foundation, Inc.',0
.text:00403B50                                         ; DATA XREF: .data:Buffer↓o
.text:00403B82 ; const char Format[]
.text:00403B82 Format          db '%s (%s) %s',0Ah,0   ; DATA XREF: sub_403E40+50↓o
.text:00403B8E aWrittenByS     db 'Written by %s.',0Ah,0
.text:00403B8E                                         ; DATA XREF: sub_403E40:loc_403EE1↓o
.text:00403B9E                 db 12h dup(90h)
.text:00403BB0 aThisIsFreeSoft db 'This is free software; see the source for copying conditions.  Th'
.text:00403BB0                                         ; DATA XREF: sub_403E40+100↓o
.text:00403BB0                 db 'ere is NO',0Ah
.text:00403BB0                 db 'warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULA'
.text:00403BB0                 db 'R PURPOSE.',0Ah,0
.text:00403C48 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.text:00403C48                                         ; DATA XREF: sub_403E40:loc_403F81↓o
.text:00403C5F aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.text:00403C5F                                         ; DATA XREF: sub_403E40:loc_403F8D↓o
.text:00403C7B                 db 15h dup(90h)
.text:00403C90 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.text:00403C90                                         ; DATA XREF: sub_403E40:loc_403F99↓o
.text:00403C90                 db 'and %s.',0Ah,0
.text:00403CB0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.text:00403CB0                                         ; DATA XREF: sub_403E40:loc_403FA5↓o
.text:00403CB0                 db '%s, and %s.',0Ah,0
.text:00403CD4                 db 1Ch dup(90h)
.text:00403CF0 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.text:00403CF0                                         ; DATA XREF: sub_403E40:loc_403FB1↓o
.text:00403CF0                 db '%s, %s, and %s.',0Ah,0
.text:00403D18                 db 18h dup(90h)
.text:00403D30 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.text:00403D30                                         ; DATA XREF: sub_403E40:loc_403FBD↓o
.text:00403D30                 db '%s, %s, %s, and %s.',0Ah,0
.text:00403D5C                 db 14h dup(90h)
.text:00403D70 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.text:00403D70                                         ; DATA XREF: sub_403E40:loc_403FC9↓o
.text:00403D70                 db '%s, %s, %s, %s,',0Ah
.text:00403D70                 db 'and %s.',0Ah,0
.text:00403DA0                 db 10h dup(90h)
.text:00403DB0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.text:00403DB0                                         ; DATA XREF: sub_403E40:loc_403FD5↓o
.text:00403DB0                 db '%s, %s, %s, %s,',0Ah
.text:00403DB0                 db '%s, and %s.',0Ah,0
.text:00403DE4                 align 10h
.text:00403DF0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.text:00403DF0                                         ; DATA XREF: sub_403E40:def_403EAD↓o
.text:00403DF0                 db '%s, %s, %s, %s,',0Ah
.text:00403DF0                 db '%s, %s, and others.',0Ah,0
.text:00403E2C ; const char aSS[]
.text:00403E2C aSS             db '%s %s',0Ah,0        ; DATA XREF: sub_403E40+1B5↓o
.text:00403E33                 align 10h
.text:00403E40
.text:00403E40 ; =============== S U B R O U T I N E =======================================
.text:00403E40
.text:00403E40
.text:00403E40 ; int __cdecl sub_403E40(FILE *, FILE *, int, int, va_list)
.text:00403E40 sub_403E40      proc near               ; CODE XREF: sub_404010+2A↓p
.text:00403E40
.text:00403E40 Stream          = dword ptr -2Ch
.text:00403E40 Format          = dword ptr -28h
.text:00403E40 ArgList         = dword ptr -24h
.text:00403E40 var_20          = dword ptr -20h
.text:00403E40 var_1C          = dword ptr -1Ch
.text:00403E40 var_14          = dword ptr -14h
.text:00403E40 arg_0           = dword ptr  4
.text:00403E40 arg_4           = dword ptr  8
.text:00403E40 arg_8           = dword ptr  0Ch
.text:00403E40 arg_C           = dword ptr  10h
.text:00403E40 arg_10          = dword ptr  14h
.text:00403E40
.text:00403E40                 push    ebp
.text:00403E41                 push    edi
.text:00403E42                 push    esi
.text:00403E43                 push    ebx
.text:00403E44                 sub     esp, 1Ch
.text:00403E47                 xor     ebx, ebx
.text:00403E49                 mov     edi, [esp+2Ch+arg_10]
.text:00403E4D                 mov     edx, [esp+2Ch+arg_8]
.text:00403E51                 mov     esi, [esp+2Ch+arg_0]
.text:00403E55                 mov     eax, [edi]
.text:00403E57                 mov     ecx, [esp+2Ch+arg_4]
.text:00403E5B                 mov     [esp+2Ch+var_14], edx
.text:00403E5F                 mov     ebp, [esp+2Ch+arg_C]
.text:00403E63                 lea     edx, [edi+4]
.text:00403E66                 test    eax, eax
.text:00403E68                 jz      short loc_403E7C
.text:00403E6A                 lea     esi, [esi+0]
.text:00403E70
.text:00403E70 loc_403E70:                             ; CODE XREF: sub_403E40+3A↓j
.text:00403E70                 mov     eax, edx
.text:00403E72                 inc     ebx
.text:00403E73                 mov     eax, [eax]
.text:00403E75                 add     edx, 4
.text:00403E78                 test    eax, eax
.text:00403E7A                 jnz     short loc_403E70
.text:00403E7C
.text:00403E7C loc_403E7C:                             ; CODE XREF: sub_403E40+28↑j
.text:00403E7C                 test    ecx, ecx
.text:00403E7E                 jz      loc_403FED
.text:00403E84                 mov     [esp+2Ch+var_1C], ebp
.text:00403E88                 mov     edx, [esp+2Ch+var_14]
.text:00403E8C                 mov     [esp+2Ch+ArgList], ecx
.text:00403E90                 mov     [esp+2Ch+Format], offset Format ; "%s (%s) %s\n"
.text:00403E98                 mov     [esp+2Ch+var_20], edx
.text:00403E9C                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403E9F                 call    fprintf
.text:00403EA4
.text:00403EA4 loc_403EA4:                             ; CODE XREF: sub_403E40+1C9↓j
.text:00403EA4                 cmp     ebx, 9          ; switch 10 cases
.text:00403EA7                 ja      def_403EAD      ; jumptable 00403EAD default case
.text:00403EAD                 jmp     ds:jpt_403EAD[ebx*4] ; switch jump
.text:00403EAD ; ---------------------------------------------------------------------------
.text:00403EB4 jpt_403EAD      dd offset loc_403EDC    ; DATA XREF: sub_403E40+6D↑r
.text:00403EB4                 dd offset loc_403EE1    ; jump table for switch statement
.text:00403EB4                 dd offset loc_403F81
.text:00403EB4                 dd offset loc_403F8D
.text:00403EB4                 dd offset loc_403F99
.text:00403EB4                 dd offset loc_403FA5
.text:00403EB4                 dd offset loc_403FB1
.text:00403EB4                 dd offset loc_403FBD
.text:00403EB4                 dd offset loc_403FC9
.text:00403EB4                 dd offset loc_403FD5
.text:00403EDC ; ---------------------------------------------------------------------------
.text:00403EDC
.text:00403EDC loc_403EDC:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403EDC                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403EDC                 call    abort           ; jumptable 00403EAD case 0
.text:00403EE1 ; ---------------------------------------------------------------------------
.text:00403EE1
.text:00403EE1 loc_403EE1:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403EE1                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403EE1                 mov     [esp+2Ch+Stream], offset aWrittenByS ; jumptable 00403EAD case 1
.text:00403EE8                 nop
.text:00403EE9                 lea     esi, [esi+0]
.text:00403EF0
.text:00403EF0 loc_403EF0:                             ; CODE XREF: sub_403E40+148↓j
.text:00403EF0                                         ; sub_403E40+154↓j ...
.text:00403EF0                 call    ds:libintl_gettext
.text:00403EF6                 mov     [esp+2Ch+ArgList], edi ; ArgList
.text:00403EFA                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00403EFD                 mov     [esp+2Ch+Format], eax ; Format
.text:00403F01                 call    vfprintf
.text:00403F06                 mov     ebx, [esi+4]
.text:00403F09                 dec     ebx
.text:00403F0A                 test    ebx, ebx
.text:00403F0C                 mov     [esi+4], ebx
.text:00403F0F                 js      short loc_403F6F
.text:00403F11                 mov     edi, [esi]
.text:00403F13                 mov     byte ptr [edi], 0Ah
.text:00403F16                 inc     dword ptr [esi]
.text:00403F18
.text:00403F18 loc_403F18:                             ; CODE XREF: sub_403E40+13F↓j
.text:00403F18                 mov     [esp+2Ch+Format], esi ; Stream
.text:00403F1C                 mov     edx, Buffer
.text:00403F22                 mov     [esp+2Ch+Stream], edx ; Buffer
.text:00403F25                 call    fputs
.text:00403F2A                 mov     ebp, [esi+4]
.text:00403F2D                 dec     ebp
.text:00403F2E                 test    ebp, ebp
.text:00403F30                 mov     [esi+4], ebp
.text:00403F33                 js      short loc_403F5D
.text:00403F35                 mov     ecx, [esi]
.text:00403F37                 mov     byte ptr [ecx], 0Ah
.text:00403F3A                 inc     dword ptr [esi]
.text:00403F3C
.text:00403F3C loc_403F3C:                             ; CODE XREF: sub_403E40+12D↓j
.text:00403F3C                 mov     [esp+2Ch+arg_4], esi ; Stream
.text:00403F40                 mov     [esp+2Ch+Stream], offset aThisIsFreeSoft ; "This is free software; see the source f"...
.text:00403F47                 call    ds:libintl_gettext
.text:00403F4D                 mov     [esp+2Ch+arg_0], eax ; Buffer
.text:00403F51                 add     esp, 1Ch
.text:00403F54                 pop     ebx
.text:00403F55                 pop     esi
.text:00403F56                 pop     edi
.text:00403F57                 pop     ebp
.text:00403F58                 jmp     fputs
.text:00403F5D ; ---------------------------------------------------------------------------
.text:00403F5D
.text:00403F5D loc_403F5D:                             ; CODE XREF: sub_403E40+F3↑j
.text:00403F5D                 mov     [esp+2Ch+Format], esi ; File
.text:00403F61                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403F68                 call    _flsbuf
.text:00403F6D                 jmp     short loc_403F3C
.text:00403F6F ; ---------------------------------------------------------------------------
.text:00403F6F
.text:00403F6F loc_403F6F:                             ; CODE XREF: sub_403E40+CF↑j
.text:00403F6F                 mov     [esp+2Ch+Format], esi ; File
.text:00403F73                 mov     [esp+2Ch+Stream], 0Ah ; Ch
.text:00403F7A                 call    _flsbuf
.text:00403F7F                 jmp     short loc_403F18
.text:00403F81 ; ---------------------------------------------------------------------------
.text:00403F81
.text:00403F81 loc_403F81:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403F81                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403F81                 mov     [esp+2Ch+Stream], offset aWrittenBySAndS ; jumptable 00403EAD case 2
.text:00403F88                 jmp     loc_403EF0
.text:00403F8D ; ---------------------------------------------------------------------------
.text:00403F8D
.text:00403F8D loc_403F8D:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403F8D                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403F8D                 mov     [esp+2Ch+Stream], offset aWrittenBySSAnd ; jumptable 00403EAD case 3
.text:00403F94                 jmp     loc_403EF0
.text:00403F99 ; ---------------------------------------------------------------------------
.text:00403F99
.text:00403F99 loc_403F99:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403F99                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403F99                 mov     [esp+2Ch+Stream], offset aWrittenBySSSAn ; jumptable 00403EAD case 4
.text:00403FA0                 jmp     loc_403EF0
.text:00403FA5 ; ---------------------------------------------------------------------------
.text:00403FA5
.text:00403FA5 loc_403FA5:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403FA5                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403FA5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSA ; jumptable 00403EAD case 5
.text:00403FAC                 jmp     loc_403EF0
.text:00403FB1 ; ---------------------------------------------------------------------------
.text:00403FB1
.text:00403FB1 loc_403FB1:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403FB1                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403FB1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_0 ; jumptable 00403EAD case 6
.text:00403FB8                 jmp     loc_403EF0
.text:00403FBD ; ---------------------------------------------------------------------------
.text:00403FBD
.text:00403FBD loc_403FBD:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403FBD                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403FBD                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_1 ; jumptable 00403EAD case 7
.text:00403FC4                 jmp     loc_403EF0
.text:00403FC9 ; ---------------------------------------------------------------------------
.text:00403FC9
.text:00403FC9 loc_403FC9:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403FC9                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403FC9                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_2 ; jumptable 00403EAD case 8
.text:00403FD0                 jmp     loc_403EF0
.text:00403FD5 ; ---------------------------------------------------------------------------
.text:00403FD5
.text:00403FD5 loc_403FD5:                             ; CODE XREF: sub_403E40+6D↑j
.text:00403FD5                                         ; DATA XREF: sub_403E40:jpt_403EAD↑o
.text:00403FD5                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS_3 ; jumptable 00403EAD case 9
.text:00403FDC                 jmp     loc_403EF0
.text:00403FE1 ; ---------------------------------------------------------------------------
.text:00403FE1
.text:00403FE1 def_403EAD:                             ; CODE XREF: sub_403E40+67↑j
.text:00403FE1                 mov     [esp+2Ch+Stream], offset aWrittenBySSSSS ; jumptable 00403EAD default case
.text:00403FE8                 jmp     loc_403EF0
.text:00403FED ; ---------------------------------------------------------------------------
.text:00403FED
.text:00403FED loc_403FED:                             ; CODE XREF: sub_403E40+3E↑j
.text:00403FED                 mov     [esp+2Ch+var_20], ebp
.text:00403FF1                 mov     ecx, [esp+2Ch+var_14]
.text:00403FF5                 mov     [esp+2Ch+Format], offset aSS ; "%s %s\n"
.text:00403FFD                 mov     [esp+2Ch+Stream], esi ; Stream
.text:00404000                 mov     [esp+2Ch+ArgList], ecx
.text:00404004                 call    fprintf
.text:00404009                 jmp     loc_403EA4
.text:00404009 sub_403E40      endp
.text:00404009
.text:00404009 ; ---------------------------------------------------------------------------
.text:0040400E                 align 10h
.text:00404010
.text:00404010 ; =============== S U B R O U T I N E =======================================
.text:00404010
.text:00404010
.text:00404010 ; int __cdecl sub_404010(FILE *, FILE *, int, int, char)
.text:00404010 sub_404010      proc near               ; CODE XREF: sub_4018A0+2F4↑p
.text:00404010
.text:00404010 var_1C          = dword ptr -1Ch
.text:00404010 var_18          = dword ptr -18h
.text:00404010 var_14          = dword ptr -14h
.text:00404010 var_10          = dword ptr -10h
.text:00404010 var_C           = dword ptr -0Ch
.text:00404010 arg_0           = dword ptr  4
.text:00404010 arg_4           = dword ptr  8
.text:00404010 arg_8           = dword ptr  0Ch
.text:00404010 arg_C           = dword ptr  10h
.text:00404010 arg_10          = byte ptr  14h
.text:00404010
.text:00404010                 sub     esp, 1Ch
.text:00404013                 mov     edx, [esp+1Ch+arg_C]
.text:00404017                 lea     ecx, [esp+1Ch+arg_10]
.text:0040401B                 mov     [esp+1Ch+var_C], ecx ; va_list
.text:0040401F                 mov     ecx, [esp+1Ch+arg_8]
.text:00404023                 mov     [esp+1Ch+var_10], edx ; int
.text:00404027                 mov     edx, [esp+1Ch+arg_4]
.text:0040402B                 mov     [esp+1Ch+var_14], ecx ; int
.text:0040402F                 mov     [esp+1Ch+var_18], edx ; FILE *
.text:00404033                 mov     edx, [esp+1Ch+arg_0]
.text:00404037                 mov     [esp+1Ch+var_1C], edx ; FILE *
.text:0040403A                 call    sub_403E40
.text:0040403F                 add     esp, 1Ch
.text:00404042                 retn
.text:00404042 sub_404010      endp
.text:00404042
.text:00404042 ; ---------------------------------------------------------------------------
.text:00404043                 align 10h
.text:00404050
.text:00404050 ; =============== S U B R O U T I N E =======================================
.text:00404050
.text:00404050
.text:00404050 ; int __cdecl sub_404050(int, int, char *, int, int)
.text:00404050 sub_404050      proc near               ; CODE XREF: sub_4018A0+F5↑p
.text:00404050
.text:00404050 var_1C          = dword ptr -1Ch
.text:00404050 var_18          = dword ptr -18h
.text:00404050 var_14          = dword ptr -14h
.text:00404050 var_10          = dword ptr -10h
.text:00404050 var_C           = dword ptr -0Ch
.text:00404050 var_8           = dword ptr -8
.text:00404050 var_4           = dword ptr -4
.text:00404050 arg_0           = dword ptr  4
.text:00404050 arg_4           = dword ptr  8
.text:00404050 arg_8           = dword ptr  0Ch
.text:00404050 arg_C           = dword ptr  10h
.text:00404050 arg_10          = dword ptr  14h
.text:00404050
.text:00404050                 sub     esp, 1Ch
.text:00404053                 mov     edx, [esp+1Ch+arg_C]
.text:00404057                 mov     [esp+1Ch+var_4], 0 ; int
.text:0040405F                 mov     ecx, [esp+1Ch+arg_10]
.text:00404063                 mov     [esp+1Ch+var_8], 0 ; int
.text:0040406B                 mov     [esp+1Ch+var_10], edx ; int
.text:0040406F                 mov     edx, [esp+1Ch+arg_4]
.text:00404073                 mov     [esp+1Ch+var_C], ecx ; int
.text:00404077                 mov     ecx, [esp+1Ch+arg_8]
.text:0040407B                 mov     [esp+1Ch+var_18], edx ; int
.text:0040407F                 mov     edx, [esp+1Ch+arg_0]
.text:00404083                 mov     [esp+1Ch+var_14], ecx ; char *
.text:00404087                 mov     [esp+1Ch+var_1C], edx ; int
.text:0040408A                 call    sub_403640
.text:0040408F                 add     esp, 1Ch
.text:00404092                 retn
.text:00404092 sub_404050      endp
.text:00404092
.text:00404092 ; ---------------------------------------------------------------------------
.text:00404093                 align 10h
.text:004040A0                 sub     esp, 2Ch
.text:004040A3                 mov     edx, [esp+44h]
.text:004040A7                 mov     dword ptr [esp+18h], 0
.text:004040AF                 mov     ecx, [esp+40h]
.text:004040B3                 mov     dword ptr [esp+14h], 0
.text:004040BB                 mov     [esp+1Ch], edx
.text:004040BF                 mov     edx, [esp+3Ch]
.text:004040C3                 mov     [esp+10h], ecx
.text:004040C7                 mov     ecx, [esp+38h]
.text:004040CB                 mov     [esp+0Ch], edx
.text:004040CF                 mov     edx, [esp+34h]
.text:004040D3                 mov     [esp+8], ecx
.text:004040D7                 mov     [esp+4], edx
.text:004040DB                 mov     edx, [esp+30h]
.text:004040DF                 mov     [esp], edx
.text:004040E2                 call    sub_402AB0
.text:004040E7                 add     esp, 2Ch
.text:004040EA                 retn
.text:004040EA ; ---------------------------------------------------------------------------
.text:004040EB                 align 10h
.text:004040F0                 sub     esp, 1Ch
.text:004040F3                 mov     edx, [esp+2Ch]
.text:004040F7                 mov     dword ptr [esp+18h], 0
.text:004040FF                 mov     ecx, [esp+30h]
.text:00404103                 mov     dword ptr [esp+14h], 1
.text:0040410B                 mov     [esp+0Ch], edx
.text:0040410F                 mov     edx, [esp+24h]
.text:00404113                 mov     [esp+10h], ecx
.text:00404117                 mov     ecx, [esp+28h]
.text:0040411B                 mov     [esp+4], edx
.text:0040411F                 mov     edx, [esp+20h]
.text:00404123                 mov     [esp+8], ecx
.text:00404127                 mov     [esp], edx
.text:0040412A                 call    sub_403640
.text:0040412F                 add     esp, 1Ch
.text:00404132                 retn
.text:00404132 ; ---------------------------------------------------------------------------
.text:00404133                 align 10h
.text:00404140                 sub     esp, 2Ch
.text:00404143                 mov     edx, [esp+44h]
.text:00404147                 mov     dword ptr [esp+18h], 0
.text:0040414F                 mov     ecx, [esp+40h]
.text:00404153                 mov     dword ptr [esp+14h], 1
.text:0040415B                 mov     [esp+1Ch], edx
.text:0040415F                 mov     edx, [esp+3Ch]
.text:00404163                 mov     [esp+10h], ecx
.text:00404167                 mov     ecx, [esp+38h]
.text:0040416B                 mov     [esp+0Ch], edx
.text:0040416F                 mov     edx, [esp+34h]
.text:00404173                 mov     [esp+8], ecx
.text:00404177                 mov     [esp+4], edx
.text:0040417B                 mov     edx, [esp+30h]
.text:0040417F                 mov     [esp], edx
.text:00404182                 call    sub_402AB0
.text:00404187                 add     esp, 2Ch
.text:0040418A                 retn
.text:0040418A ; ---------------------------------------------------------------------------
.text:0040418B                 align 10h
.text:00404190                 mov     edx, [esp+4]
.text:00404194                 mov     ds:dword_40F060, edx
.text:0040419A                 retn
.text:0040419A ; ---------------------------------------------------------------------------
.text:0040419B aWriteError_0   db 'write error',0      ; DATA XREF: sub_4041C0:loc_404209↓o
.text:004041A7 ; const char aSS_0[]
.text:004041A7 aSS_0           db '%s: %s',0           ; DATA XREF: sub_4041C0+77↓o
.text:004041AE ; const char aS_3[]
.text:004041AE aS_3            db '%s',0               ; DATA XREF: sub_4041C0+A0↓o
.text:004041B1 ; ---------------------------------------------------------------------------
.text:004041B1                 jmp     short sub_4041C0
.text:004041B1 ; ---------------------------------------------------------------------------
.text:004041B3                 align 10h
.text:004041C0
.text:004041C0 ; =============== S U B R O U T I N E =======================================
.text:004041C0
.text:004041C0
.text:004041C0 sub_4041C0      proc near               ; CODE XREF: sub_402830:loc_402840↑p
.text:004041C0                                         ; .text:004041B1↑j
.text:004041C0                                         ; DATA XREF: ...
.text:004041C0
.text:004041C0 Stream          = dword ptr -2Ch
.text:004041C0 ErrorMessage    = dword ptr -28h
.text:004041C0 var_24          = dword ptr -24h
.text:004041C0 var_20          = byte ptr -20h
.text:004041C0 var_1C          = dword ptr -1Ch
.text:004041C0 var_9           = byte ptr -9
.text:004041C0
.text:004041C0                 push    esi
.text:004041C1                 push    ebx
.text:004041C2                 sub     esp, 24h
.text:004041C5                 mov     edx, ds:_iob
.text:004041CB                 mov     ecx, [edx+2Ch]
.text:004041CE                 lea     esi, [edx+20h]
.text:004041D1                 shr     ecx, 5
.text:004041D4                 mov     bl, cl
.text:004041D6                 mov     ecx, [edx+20h]
.text:004041D9                 and     bl, 1
.text:004041DC                 cmp     ecx, [esi+8]
.text:004041DF                 mov     [esp+2Ch+Stream], esi ; Stream
.text:004041E2                 setz    [esp+2Ch+var_9]
.text:004041E7                 call    fclose
.text:004041EC                 test    eax, eax
.text:004041EE                 setnz   al
.text:004041F1                 test    bl, bl
.text:004041F3                 jnz     loc_404283
.text:004041F9                 test    al, al
.text:004041FB                 jz      short loc_404250
.text:004041FD
.text:004041FD loc_4041FD:                             ; CODE XREF: sub_4041C0+CD↓j
.text:004041FD                 call    _errno
.text:00404202                 mov     esi, [eax]
.text:00404204
.text:00404204 loc_404204:                             ; CODE XREF: sub_4041C0+C7↓j
.text:00404204                 cmp     esi, 9
.text:00404207                 jz      short loc_404276
.text:00404209
.text:00404209 loc_404209:                             ; CODE XREF: sub_4041C0+B8↓j
.text:00404209                                         ; sub_4041C0+C1↓j
.text:00404209                 mov     [esp+2Ch+Stream], offset aWriteError_0 ; "write error"
.text:00404210                 call    ds:libintl_gettext
.text:00404216                 mov     ebx, eax
.text:00404218                 mov     eax, ds:dword_40F060
.text:0040421D                 test    eax, eax
.text:0040421F                 jz      short loc_404256
.text:00404221                 mov     [esp+2Ch+Stream], eax ; char *
.text:00404224                 call    sub_405500
.text:00404229                 mov     dword ptr [esp+2Ch+var_20], eax ; char
.text:0040422D                 mov     edx, Code
.text:00404233                 mov     [esp+2Ch+var_1C], ebx
.text:00404237                 mov     [esp+2Ch+var_24], offset aSS_0 ; "%s: %s"
.text:0040423F                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:00404243                 mov     [esp+2Ch+Stream], edx ; Code
.text:00404246                 call    sub_405830
.text:0040424B                 nop
.text:0040424C                 lea     esi, [esi+0]
.text:00404250
.text:00404250 loc_404250:                             ; CODE XREF: sub_4041C0+3B↑j
.text:00404250                                         ; sub_4041C0+B4↓j ...
.text:00404250                 add     esp, 24h
.text:00404253                 pop     ebx
.text:00404254                 pop     esi
.text:00404255                 retn
.text:00404256 ; ---------------------------------------------------------------------------
.text:00404256
.text:00404256 loc_404256:                             ; CODE XREF: sub_4041C0+5F↑j
.text:00404256                 mov     dword ptr [esp+2Ch+var_20], ebx ; char
.text:0040425A                 mov     ebx, Code
.text:00404260                 mov     [esp+2Ch+var_24], offset aS_3 ; "%s"
.text:00404268                 mov     [esp+2Ch+ErrorMessage], esi ; ErrorMessage
.text:0040426C                 mov     [esp+2Ch+Stream], ebx ; Code
.text:0040426F                 call    sub_405830
.text:00404274                 jmp     short loc_404250
.text:00404276 ; ---------------------------------------------------------------------------
.text:00404276
.text:00404276 loc_404276:                             ; CODE XREF: sub_4041C0+47↑j
.text:00404276                 test    bl, bl
.text:00404278                 jnz     short loc_404209
.text:0040427A                 cmp     [esp+2Ch+var_9], 0
.text:0040427F                 jnz     short loc_404250
.text:00404281                 jmp     short loc_404209
.text:00404283 ; ---------------------------------------------------------------------------
.text:00404283
.text:00404283 loc_404283:                             ; CODE XREF: sub_4041C0+33↑j
.text:00404283                 xor     esi, esi
.text:00404285                 test    al, al
.text:00404287                 jz      loc_404204
.text:0040428D                 jmp     loc_4041FD
.text:0040428D sub_4041C0      endp
.text:0040428D
.text:0040428D ; ---------------------------------------------------------------------------
.text:00404292                 align 10h
.text:004042A0
.text:004042A0 ; =============== S U B R O U T I N E =======================================
.text:004042A0
.text:004042A0
.text:004042A0 sub_4042A0      proc near               ; CODE XREF: sub_4018A0+5D1↑p
.text:004042A0                                         ; sub_402440+93↑p ...
.text:004042A0
.text:004042A0 var_1C          = dword ptr -1Ch
.text:004042A0 var_18          = dword ptr -18h
.text:004042A0 var_14          = dword ptr -14h
.text:004042A0 arg_0           = dword ptr  4
.text:004042A0 arg_4           = dword ptr  8
.text:004042A0 arg_8           = dword ptr  0Ch
.text:004042A0
.text:004042A0                 push    ebp
.text:004042A1                 push    edi
.text:004042A2                 xor     edi, edi
.text:004042A4                 push    esi
.text:004042A5                 push    ebx
.text:004042A6                 sub     esp, 0Ch
.text:004042A9                 mov     ebx, [esp+1Ch+arg_8]
.text:004042AD                 mov     ebp, [esp+1Ch+arg_0]
.text:004042B1                 mov     esi, [esp+1Ch+arg_4]
.text:004042B5                 test    ebx, ebx
.text:004042B7                 jnz     short loc_4042C3
.text:004042B9
.text:004042B9 loc_4042B9:                             ; CODE XREF: sub_4042A0+36↓j
.text:004042B9                                         ; sub_4042A0+44↓j ...
.text:004042B9                 add     esp, 0Ch
.text:004042BC                 mov     eax, edi
.text:004042BE                 pop     ebx
.text:004042BF                 pop     esi
.text:004042C0                 pop     edi
.text:004042C1                 pop     ebp
.text:004042C2                 retn
.text:004042C3 ; ---------------------------------------------------------------------------
.text:004042C3
.text:004042C3 loc_4042C3:                             ; CODE XREF: sub_4042A0+17↑j
.text:004042C3                                         ; sub_4042A0+42↓j
.text:004042C3                 mov     [esp+1Ch+var_14], ebx
.text:004042C7                 mov     [esp+1Ch+var_18], esi
.text:004042CB                 mov     [esp+1Ch+var_1C], ebp
.text:004042CE                 call    sub_405770
.text:004042D3                 cmp     eax, 0FFFFFFFFh
.text:004042D6                 jz      short loc_4042B9
.text:004042D8                 test    eax, eax
.text:004042DA                 jz      short loc_4042E6
.text:004042DC                 add     edi, eax
.text:004042DE                 add     esi, eax
.text:004042E0                 sub     ebx, eax
.text:004042E2                 jnz     short loc_4042C3
.text:004042E4                 jmp     short loc_4042B9
.text:004042E6 ; ---------------------------------------------------------------------------
.text:004042E6
.text:004042E6 loc_4042E6:                             ; CODE XREF: sub_4042A0+3A↑j
.text:004042E6                 call    _errno
.text:004042EB                 mov     dword ptr [eax], 1Ch
.text:004042F1                 jmp     short loc_4042B9
.text:004042F1 sub_4042A0      endp
.text:004042F1
.text:004042F1 ; ---------------------------------------------------------------------------
.text:004042F3                 align 10h
.text:00404300
.text:00404300 ; =============== S U B R O U T I N E =======================================
.text:00404300
.text:00404300
.text:00404300 sub_404300      proc near               ; CODE XREF: sub_4018A0+5AE↑p
.text:00404300                                         ; sub_402440+167↑p
.text:00404300
.text:00404300 FileHandle      = dword ptr -1Ch
.text:00404300 DstBuf          = dword ptr -18h
.text:00404300 MaxCharCount    = dword ptr -14h
.text:00404300 arg_0           = dword ptr  4
.text:00404300 arg_4           = dword ptr  8
.text:00404300 arg_8           = dword ptr  0Ch
.text:00404300
.text:00404300                 push    ebp
.text:00404301                 push    edi
.text:00404302                 push    esi
.text:00404303                 push    ebx
.text:00404304                 sub     esp, 0Ch
.text:00404307                 mov     ebp, [esp+1Ch+arg_0]
.text:0040430B                 mov     edi, [esp+1Ch+arg_4]
.text:0040430F                 mov     ebx, [esp+1Ch+arg_8]
.text:00404313                 lea     esi, [esi+0]
.text:00404319                 lea     edi, [edi+0]
.text:00404320
.text:00404320 loc_404320:                             ; CODE XREF: sub_404300+3E↓j
.text:00404320                                         ; sub_404300+57↓j
.text:00404320                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00404324                 mov     [esp+1Ch+DstBuf], edi ; DstBuf
.text:00404328                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040432B                 call    _read
.text:00404330                 test    eax, eax
.text:00404332                 mov     esi, eax
.text:00404334                 jns     short loc_404359
.text:00404336                 call    _errno
.text:0040433B                 cmp     dword ptr [eax], 4
.text:0040433E                 jz      short loc_404320
.text:00404340                 call    _errno
.text:00404345                 cmp     dword ptr [eax], 16h
.text:00404348                 jnz     short loc_404359
.text:0040434A                 cmp     ebx, 7FFFE000h
.text:00404350                 jbe     short loc_404359
.text:00404352                 mov     ebx, 7FFFE000h
.text:00404357                 jmp     short loc_404320
.text:00404359 ; ---------------------------------------------------------------------------
.text:00404359
.text:00404359 loc_404359:                             ; CODE XREF: sub_404300+34↑j
.text:00404359                                         ; sub_404300+48↑j ...
.text:00404359                 add     esp, 0Ch
.text:0040435C                 mov     eax, esi
.text:0040435E                 pop     ebx
.text:0040435F                 pop     esi
.text:00404360                 pop     edi
.text:00404361                 pop     ebp
.text:00404362                 retn
.text:00404362 sub_404300      endp
.text:00404362
.text:00404362 ; ---------------------------------------------------------------------------
.text:00404363                 align 10h
.text:00404370 aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: sub_404390+3↓o
.text:00404381 ; const char aS_0[]
.text:00404381 aS_0            db '%s',0               ; DATA XREF: sub_404390+10↓o
.text:00404384                 align 10h
.text:00404390
.text:00404390 ; =============== S U B R O U T I N E =======================================
.text:00404390
.text:00404390 ; Attributes: noreturn
.text:00404390
.text:00404390 sub_404390      proc near               ; CODE XREF: .text:loc_4038B9↑p
.text:00404390                                         ; sub_4038C0+24↑p ...
.text:00404390
.text:00404390 Code            = dword ptr -1Ch
.text:00404390 ErrorMessage    = dword ptr -18h
.text:00404390 var_14          = dword ptr -14h
.text:00404390 var_10          = byte ptr -10h
.text:00404390
.text:00404390                 sub     esp, 1Ch
.text:00404393                 mov     [esp+1Ch+Code], offset aMemoryExhauste ; "memory exhausted"
.text:0040439A                 call    ds:libintl_gettext
.text:004043A0                 mov     [esp+1Ch+var_14], offset aS_0 ; "%s"
.text:004043A8                 mov     edx, Code
.text:004043AE                 mov     [esp+1Ch+ErrorMessage], 0 ; ErrorMessage
.text:004043B6                 mov     dword ptr [esp+1Ch+var_10], eax ; char
.text:004043BA                 mov     [esp+1Ch+Code], edx ; Code
.text:004043BD                 call    sub_405830
.text:004043C2                 call    abort
.text:004043C2 sub_404390      endp
.text:004043C2
.text:004043C2 ; ---------------------------------------------------------------------------
.text:004043C7                 align 10h
.text:004043D0 aLiteral        db 'literal',0          ; DATA XREF: .text:00404410↓o
.text:004043D8 aShell          db 'shell',0            ; DATA XREF: .text:00404414↓o
.text:004043DE aShellAlways    db 'shell-always',0     ; DATA XREF: .text:00404418↓o
.text:004043EB aC              db 'c',0
.text:004043ED aEscape         db 'escape',0           ; DATA XREF: .text:00404420↓o
.text:004043F4 aLocale         db 'locale',0           ; DATA XREF: .text:00404424↓o
.text:004043FB aClocale        db 'clocale',0          ; DATA XREF: .text:00404428↓o
.text:00404403                 align 10h
.text:00404410                 dd offset aLiteral      ; "literal"
.text:00404414                 dd offset aShell        ; "shell"
.text:00404418                 dd offset aShellAlways  ; "shell-always"
.text:0040441C ; ---------------------------------------------------------------------------
.text:0040441C                 jmp     short loc_404461
.text:0040441C ; ---------------------------------------------------------------------------
.text:0040441E                 dw 40h
.text:00404420                 dd offset aEscape       ; "escape"
.text:00404424                 dd offset aLocale       ; "locale"
.text:00404428                 dd offset aClocale      ; "clocale"
.text:0040442C                 dd 2 dup(0)
.text:00404434                 dd 1, 2, 3, 4, 5, 6
.text:0040444C asc_40444C:                             ; DATA XREF: sub_404460+7E↓o
.text:0040444C                                         ; sub_404460+A39↓o ...
.text:0040444C                 text "UTF-16LE", '"',27h,'`'
.text:00404452                 align 10h
.text:00404460
.text:00404460 ; =============== S U B R O U T I N E =======================================
.text:00404460
.text:00404460
.text:00404460 ; int __cdecl sub_404460(int, int, char *Str, int, int, int)
.text:00404460 sub_404460      proc near               ; CODE XREF: sub_404460+43A↓p
.text:00404460                                         ; .text:00405023↓p ...
.text:00404460
.text:00404460 C               = dword ptr -4Ch
.text:00404460 Type            = dword ptr -48h
.text:00404460 SizeInBytes     = dword ptr -44h
.text:00404460 State           = dword ptr -40h
.text:00404460 var_3C          = dword ptr -3Ch
.text:00404460 var_38          = dword ptr -38h
.text:00404460 var_34          = dword ptr -34h
.text:00404460 var_30          = dword ptr -30h
.text:00404460 var_29          = byte ptr -29h
.text:00404460 var_28          = dword ptr -28h
.text:00404460 var_22          = byte ptr -22h
.text:00404460 var_21          = byte ptr -21h
.text:00404460 var_20          = dword ptr -20h
.text:00404460 var_1C          = dword ptr -1Ch
.text:00404460 var_18          = mbstate_t ptr -18h
.text:00404460 arg_0           = dword ptr  4
.text:00404460 arg_4           = dword ptr  8
.text:00404460 Str             = dword ptr  0Ch
.text:00404460 arg_C           = dword ptr  10h
.text:00404460 arg_10          = dword ptr  14h
.text:00404460 arg_14          = dword ptr  18h
.text:00404460
.text:00404460                 push    ebp
.text:00404461
.text:00404461 loc_404461:                             ; CODE XREF: .text:0040441C↑j
.text:00404461                 push    edi
.text:00404462                 push    esi
.text:00404463                 push    ebx
.text:00404464                 sub     esp, 3Ch
.text:00404467                 mov     edx, ds:__mb_cur_max
.text:0040446D                 mov     [esp+4Ch+var_34], 0
.text:00404475                 mov     [esp+4Ch+var_1C], 0
.text:0040447D                 cmp     dword ptr [edx], 1
.text:00404480                 mov     [esp+4Ch+var_20], 0
.text:00404488                 mov     [esp+4Ch+var_21], 0
.text:0040448D                 setz    [esp+4Ch+var_22]
.text:00404492                 cmp     [esp+4Ch+arg_10], 6 ; switch 7 cases
.text:00404497                 ja      short def_40449D ; jumptable 0040449D default case, cases 0,1
.text:00404499                 mov     edx, [esp+4Ch+arg_10]
.text:0040449D                 jmp     ds:jpt_40449D[edx*4] ; switch jump
.text:0040449D ; ---------------------------------------------------------------------------
.text:004044A4 jpt_40449D      dd offset def_40449D    ; DATA XREF: sub_404460+3D↑r
.text:004044A4                 dd offset def_40449D    ; jump table for switch statement
.text:004044A4                 dd offset loc_404DE5
.text:004044A4                 dd offset loc_4044C0
.text:004044A4                 dd offset loc_404E0B
.text:004044A4                 dd offset loc_404E15
.text:004044A4                 dd offset loc_404E15
.text:004044C0 ; ---------------------------------------------------------------------------
.text:004044C0
.text:004044C0 loc_4044C0:                             ; CODE XREF: sub_404460+3D↑j
.text:004044C0                                         ; DATA XREF: sub_404460:jpt_40449D↑o
.text:004044C0                 mov     eax, [esp+4Ch+arg_4] ; jumptable 0040449D case 3
.text:004044C4                 cmp     [esp+4Ch+var_34], eax
.text:004044C8                 jnb     short loc_4044D1
.text:004044CA                 mov     ebx, [esp+4Ch+arg_0]
.text:004044CE                 mov     byte ptr [ebx], 22h ; '"'
.text:004044D1
.text:004044D1 loc_4044D1:                             ; CODE XREF: sub_404460+68↑j
.text:004044D1                 mov     [esp+4Ch+var_34], 1
.text:004044D9                 mov     [esp+4Ch+var_21], 1
.text:004044DE                 mov     [esp+4Ch+var_1C], offset asc_40444C ; "\"'`"
.text:004044E6
.text:004044E6 loc_4044E6:                             ; CODE XREF: sub_404460+9A6↓j
.text:004044E6                 mov     [esp+4Ch+var_20], 1
.text:004044EE
.text:004044EE def_40449D:                             ; CODE XREF: sub_404460+37↑j
.text:004044EE                                         ; sub_404460+3D↑j ...
.text:004044EE                 xor     ebp, ebp        ; jumptable 0040449D default case, cases 0,1
.text:004044F0
.text:004044F0 loc_4044F0:                             ; CODE XREF: sub_404460+3DB↓j
.text:004044F0                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:004044F5                 jz      loc_404DD7
.text:004044FB                 cmp     ebp, [esp+4Ch+arg_C]
.text:004044FF
.text:004044FF loc_4044FF:                             ; CODE XREF: sub_404460+980↓j
.text:004044FF                 jz      loc_404D6E
.text:00404505                 cmp     [esp+4Ch+var_21], 0
.text:0040450A                 jz      short loc_404550
.text:0040450C                 mov     esi, [esp+4Ch+var_20]
.text:00404510                 test    esi, esi
.text:00404512                 jz      short loc_404550
.text:00404514                 mov     ecx, [esp+4Ch+var_20]
.text:00404518                 lea     edi, [ecx+ebp]
.text:0040451B                 cmp     edi, [esp+4Ch+arg_C]
.text:0040451F                 ja      short loc_404550
.text:00404521                 cld
.text:00404522                 mov     ebx, [esp+4Ch+Str]
.text:00404526                 mov     edi, [esp+4Ch+var_1C]
.text:0040452A                 add     ebx, ebp
.text:0040452C                 mov     esi, ebx
.text:0040452E                 cmp     ecx, ecx
.text:00404530                 repe cmpsb
.text:00404532                 jnz     short loc_404550
.text:00404534                 mov     edx, [esp+4Ch+arg_4]
.text:00404538                 cmp     [esp+4Ch+var_34], edx
.text:0040453C                 jnb     short loc_40454A
.text:0040453E                 mov     ecx, [esp+4Ch+arg_0]
.text:00404542                 mov     eax, [esp+4Ch+var_34]
.text:00404546                 mov     byte ptr [eax+ecx], 5Ch ; '\'
.text:0040454A
.text:0040454A loc_40454A:                             ; CODE XREF: sub_404460+DC↑j
.text:0040454A                 inc     [esp+4Ch+var_34]
.text:0040454E                 mov     esi, esi
.text:00404550
.text:00404550 loc_404550:                             ; CODE XREF: sub_404460+AA↑j
.text:00404550                                         ; sub_404460+B2↑j ...
.text:00404550                 mov     edi, [esp+4Ch+Str]
.text:00404554                 movzx   ebx, byte ptr [ebp+edi+0]
.text:00404559                 movzx   eax, bl
.text:0040455C                 cmp     eax, 7Eh        ; switch 127 cases
.text:0040455F                 ja      def_404565      ; jumptable 00404565 default case, cases 1-6,14-31,64
.text:00404565                 jmp     ds:jpt_404565[eax*4] ; switch jump
.text:00404565 ; ---------------------------------------------------------------------------
.text:0040456C jpt_404565      dd offset loc_404768, offset def_404565, offset def_404565
.text:0040456C                                         ; DATA XREF: sub_404460+105↑r
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565 ; jump table for switch statement
.text:0040456C                 dd offset def_404565, offset loc_404840, offset loc_40485E
.text:0040456C                 dd offset loc_404862, offset loc_4048A7, offset loc_4048AB
.text:0040456C                 dd offset loc_4048AF, offset loc_4048B3, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset def_404565
.text:0040456C                 dd offset def_404565, offset def_404565, offset loc_404D38
.text:0040456C                 dd offset loc_404D38, offset loc_404D38, offset loc_404D5A
.text:0040456C                 dd offset loc_404D38, offset def_404962, offset loc_404D38
.text:0040456C                 dd offset loc_4048B7, offset loc_404D38, offset loc_404D38
.text:0040456C                 dd offset loc_404D38, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset loc_404D38
.text:0040456C                 dd offset loc_404D38, offset loc_404D38, offset loc_404D38
.text:0040456C                 dd offset loc_40491C, offset def_404565, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset loc_404D38, offset loc_404D31
.text:0040456C                 dd offset def_404962, offset loc_404D38, offset def_404962
.text:0040456C                 dd offset loc_404D38, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset def_404962, offset def_404962, offset def_404962
.text:0040456C                 dd offset loc_404D48, offset loc_404D38, offset loc_404D48
.text:0040456C                 dd offset loc_404D5A
.text:00404768 ; ---------------------------------------------------------------------------
.text:00404768
.text:00404768 loc_404768:                             ; CODE XREF: sub_404460+105↑j
.text:00404768                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404768                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404565 case 0
.text:0040476D                 lea     eax, [ebp+1]
.text:00404770                 jz      loc_404820
.text:00404776                 mov     esi, [esp+4Ch+arg_4]
.text:0040477A                 cmp     [esp+4Ch+var_34], esi
.text:0040477E                 jnb     short loc_40478C
.text:00404780                 mov     eax, [esp+4Ch+arg_0]
.text:00404784                 mov     ebx, [esp+4Ch+var_34]
.text:00404788                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:0040478C
.text:0040478C loc_40478C:                             ; CODE XREF: sub_404460+31E↑j
.text:0040478C                 inc     [esp+4Ch+var_34]
.text:00404790                 mov     edx, [esp+4Ch+arg_4]
.text:00404794                 cmp     [esp+4Ch+var_34], edx
.text:00404798                 jnb     short loc_4047A6
.text:0040479A                 mov     edi, [esp+4Ch+arg_0]
.text:0040479E                 mov     ecx, [esp+4Ch+var_34]
.text:004047A2                 mov     byte ptr [ecx+edi], 30h ; '0'
.text:004047A6
.text:004047A6 loc_4047A6:                             ; CODE XREF: sub_404460+338↑j
.text:004047A6                 inc     [esp+4Ch+var_34]
.text:004047AA                 mov     esi, [esp+4Ch+arg_4]
.text:004047AE                 cmp     [esp+4Ch+var_34], esi
.text:004047B2                 jnb     short loc_4047C0
.text:004047B4                 mov     ebx, [esp+4Ch+arg_0]
.text:004047B8                 mov     eax, [esp+4Ch+var_34]
.text:004047BC                 mov     byte ptr [eax+ebx], 30h ; '0'
.text:004047C0
.text:004047C0 loc_4047C0:                             ; CODE XREF: sub_404460+352↑j
.text:004047C0                 inc     [esp+4Ch+var_34]
.text:004047C4                 mov     bl, 30h ; '0'
.text:004047C6                 lea     esi, [esi+0]
.text:004047C9                 lea     edi, [edi+0]
.text:004047D0
.text:004047D0 def_404962:                             ; CODE XREF: sub_404460+105↑j
.text:004047D0                                         ; sub_404460+463↓j ...
.text:004047D0                 cmp     [esp+4Ch+var_21], 0 ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:004047D0                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:004047D5                 lea     eax, [ebp+1]
.text:004047D8                 jz      short loc_404820
.text:004047DA                 mov     cl, bl
.text:004047DC                 mov     edi, [esp+4Ch+arg_14]
.text:004047E0                 mov     esi, 1
.text:004047E5                 shr     cl, 5
.text:004047E8                 movzx   edx, cl
.text:004047EB                 mov     ecx, ebx
.text:004047ED                 and     ecx, 1Fh
.text:004047F0                 shl     esi, cl
.text:004047F2                 test    [edi+edx*4+4], esi
.text:004047F6                 jz      short loc_404812
.text:004047F8
.text:004047F8 loc_4047F8:                             ; CODE XREF: sub_404460+3FC↓j
.text:004047F8                 mov     edx, [esp+4Ch+arg_4]
.text:004047FC                 cmp     [esp+4Ch+var_34], edx
.text:00404800                 jnb     short loc_40480E
.text:00404802                 mov     edi, [esp+4Ch+arg_0]
.text:00404806                 mov     esi, [esp+4Ch+var_34]
.text:0040480A                 mov     byte ptr [esi+edi], 5Ch ; '\'
.text:0040480E
.text:0040480E loc_40480E:                             ; CODE XREF: sub_404460+3A0↑j
.text:0040480E                 inc     [esp+4Ch+var_34]
.text:00404812
.text:00404812 loc_404812:                             ; CODE XREF: sub_404460+396↑j
.text:00404812                 lea     eax, [ebp+1]
.text:00404815                 lea     esi, [esi+0]
.text:00404819                 lea     edi, [edi+0]
.text:00404820
.text:00404820 loc_404820:                             ; CODE XREF: sub_404460+310↑j
.text:00404820                                         ; sub_404460+378↑j ...
.text:00404820                 mov     ebp, [esp+4Ch+arg_4]
.text:00404824                 cmp     [esp+4Ch+var_34], ebp
.text:00404828                 jnb     short loc_404835
.text:0040482A                 mov     edx, [esp+4Ch+arg_0]
.text:0040482E                 mov     ecx, [esp+4Ch+var_34]
.text:00404832                 mov     [ecx+edx], bl
.text:00404835
.text:00404835 loc_404835:                             ; CODE XREF: sub_404460+3C8↑j
.text:00404835                 inc     [esp+4Ch+var_34]
.text:00404839                 mov     ebp, eax
.text:0040483B                 jmp     loc_4044F0
.text:00404840 ; ---------------------------------------------------------------------------
.text:00404840
.text:00404840 loc_404840:                             ; CODE XREF: sub_404460+105↑j
.text:00404840                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404840                 mov     dl, 61h ; 'a'   ; jumptable 00404565 case 7
.text:00404842                 lea     esi, [esi+0]
.text:00404849                 lea     edi, [edi+0]
.text:00404850
.text:00404850 loc_404850:                             ; CODE XREF: sub_404460+400↓j
.text:00404850                                         ; sub_404460+409↓j ...
.text:00404850                 cmp     [esp+4Ch+var_21], 0
.text:00404855                 lea     eax, [ebp+1]
.text:00404858                 jz      short loc_404820
.text:0040485A                 mov     bl, dl
.text:0040485C                 jmp     short loc_4047F8
.text:0040485E ; ---------------------------------------------------------------------------
.text:0040485E
.text:0040485E loc_40485E:                             ; CODE XREF: sub_404460+105↑j
.text:0040485E                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:0040485E                 mov     dl, 62h ; 'b'   ; jumptable 00404565 case 8
.text:00404860                 jmp     short loc_404850
.text:00404862 ; ---------------------------------------------------------------------------
.text:00404862
.text:00404862 loc_404862:                             ; CODE XREF: sub_404460+105↑j
.text:00404862                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404862                 mov     dl, 74h ; 't'   ; jumptable 00404565 case 9
.text:00404864
.text:00404864 loc_404864:                             ; CODE XREF: sub_404460+449↓j
.text:00404864                                         ; sub_404460+455↓j ...
.text:00404864                 cmp     [esp+4Ch+arg_10], 1
.text:00404869                 jnz     short loc_404850
.text:0040486B
.text:0040486B loc_40486B:                             ; CODE XREF: sub_404460+45C↓j
.text:0040486B                                         ; sub_404460+4C1↓j ...
.text:0040486B                 mov     [esp+4Ch+var_3C], 2 ; jumptable 00404C32 cases 91,92,94,96,124
.text:00404873                 mov     eax, [esp+4Ch+arg_14]
.text:00404877                 mov     edx, [esp+4Ch+arg_C]
.text:0040487B                 mov     ecx, [esp+4Ch+Str]
.text:0040487F                 mov     ebx, [esp+4Ch+arg_4]
.text:00404883                 mov     [esp+4Ch+var_38], eax ; int
.text:00404887                 mov     ebp, [esp+4Ch+arg_0]
.text:0040488B                 mov     [esp+4Ch+State], edx ; int
.text:0040488F                 mov     [esp+4Ch+SizeInBytes], ecx ; Str
.text:00404893                 mov     [esp+4Ch+Type], ebx ; int
.text:00404897                 mov     [esp+4Ch+C], ebp ; int
.text:0040489A                 call    sub_404460
.text:0040489F
.text:0040489F loc_40489F:                             ; CODE XREF: sub_404460+972↓j
.text:0040489F                 add     esp, 3Ch
.text:004048A2                 pop     ebx
.text:004048A3                 pop     esi
.text:004048A4                 pop     edi
.text:004048A5                 pop     ebp
.text:004048A6                 retn
.text:004048A7 ; ---------------------------------------------------------------------------
.text:004048A7
.text:004048A7 loc_4048A7:                             ; CODE XREF: sub_404460+105↑j
.text:004048A7                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:004048A7                 mov     dl, 6Eh ; 'n'   ; jumptable 00404565 case 10
.text:004048A9                 jmp     short loc_404864
.text:004048AB ; ---------------------------------------------------------------------------
.text:004048AB
.text:004048AB loc_4048AB:                             ; CODE XREF: sub_404460+105↑j
.text:004048AB                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:004048AB                 mov     dl, 76h ; 'v'   ; jumptable 00404565 case 11
.text:004048AD                 jmp     short loc_404850
.text:004048AF ; ---------------------------------------------------------------------------
.text:004048AF
.text:004048AF loc_4048AF:                             ; CODE XREF: sub_404460+105↑j
.text:004048AF                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:004048AF                 mov     dl, 66h ; 'f'   ; jumptable 00404565 case 12
.text:004048B1                 jmp     short loc_404850
.text:004048B3 ; ---------------------------------------------------------------------------
.text:004048B3
.text:004048B3 loc_4048B3:                             ; CODE XREF: sub_404460+105↑j
.text:004048B3                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:004048B3                 mov     dl, 72h ; 'r'   ; jumptable 00404565 case 13
.text:004048B5                 jmp     short loc_404864
.text:004048B7 ; ---------------------------------------------------------------------------
.text:004048B7
.text:004048B7 loc_4048B7:                             ; CODE XREF: sub_404460+105↑j
.text:004048B7                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:004048B7                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404565 case 39
.text:004048BC                 jz      short loc_40486B ; jumptable 00404C32 cases 91,92,94,96,124
.text:004048BE                 cmp     [esp+4Ch+arg_10], 2
.text:004048C3                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:004048C3                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:004048C9                 mov     edx, [esp+4Ch+arg_4]
.text:004048CD                 cmp     [esp+4Ch+var_34], edx
.text:004048D1                 jnb     short loc_4048DF
.text:004048D3                 mov     ecx, [esp+4Ch+arg_0]
.text:004048D7                 mov     edi, [esp+4Ch+var_34]
.text:004048DB                 mov     byte ptr [edi+ecx], 27h ; '''
.text:004048DF
.text:004048DF loc_4048DF:                             ; CODE XREF: sub_404460+471↑j
.text:004048DF                 inc     [esp+4Ch+var_34]
.text:004048E3                 mov     eax, [esp+4Ch+arg_4]
.text:004048E7                 cmp     [esp+4Ch+var_34], eax
.text:004048EB                 jnb     short loc_4048F9
.text:004048ED                 mov     esi, [esp+4Ch+arg_0]
.text:004048F1                 mov     edx, [esp+4Ch+var_34]
.text:004048F5                 mov     byte ptr [edx+esi], 5Ch ; '\'
.text:004048F9
.text:004048F9 loc_4048F9:                             ; CODE XREF: sub_404460+48B↑j
.text:004048F9                 inc     [esp+4Ch+var_34]
.text:004048FD                 mov     edi, [esp+4Ch+arg_4]
.text:00404901                 cmp     [esp+4Ch+var_34], edi
.text:00404905                 jnb     short loc_404913
.text:00404907                 mov     ecx, [esp+4Ch+arg_0]
.text:0040490B                 mov     eax, [esp+4Ch+var_34]
.text:0040490F                 mov     byte ptr [eax+ecx], 27h ; '''
.text:00404913
.text:00404913 loc_404913:                             ; CODE XREF: sub_404460+4A5↑j
.text:00404913                                         ; sub_404460+5C4↓j ...
.text:00404913                 inc     [esp+4Ch+var_34]
.text:00404917                 jmp     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404917                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:0040491C ; ---------------------------------------------------------------------------
.text:0040491C
.text:0040491C loc_40491C:                             ; CODE XREF: sub_404460+105↑j
.text:0040491C                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:0040491C                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404565 case 63
.text:00404921                 jz      loc_40486B      ; jumptable 00404C32 cases 91,92,94,96,124
.text:00404927                 cmp     [esp+4Ch+arg_10], 3
.text:0040492C                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:0040492C                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404932                 lea     edx, [ebp+2]
.text:00404935                 cmp     edx, [esp+4Ch+arg_C]
.text:00404939                 jnb     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404939                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:0040493F                 mov     esi, [esp+4Ch+Str]
.text:00404943                 cmp     byte ptr [ebp+esi+1], 3Fh ; '?'
.text:00404948                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404948                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:0040494E                 movzx   ecx, byte ptr [ebp+esi+2]
.text:00404953                 movsx   eax, cl
.text:00404956                 sub     eax, 21h ; '!'  ; switch 30 cases
.text:00404959                 cmp     eax, 1Dh
.text:0040495C                 ja      def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:0040495C                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404962                 jmp     ds:jpt_404962[eax*4] ; switch jump
.text:00404962 ; ---------------------------------------------------------------------------
.text:00404969                 align 4
.text:0040496C jpt_404962      dd offset loc_4049E4    ; DATA XREF: sub_404460+502↑r
.text:0040496C                 dd offset def_404962    ; jump table for switch statement
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset def_404962
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset loc_4049E4
.text:0040496C                 dd offset loc_4049E4
.text:004049E4 ; ---------------------------------------------------------------------------
.text:004049E4
.text:004049E4 loc_4049E4:                             ; CODE XREF: sub_404460+502↑j
.text:004049E4                                         ; DATA XREF: sub_404460:jpt_404962↑o
.text:004049E4                 mov     ebp, edx        ; jumptable 00404962 cases 33,39-41,45,47,60-62
.text:004049E6                 mov     bl, cl
.text:004049E8                 mov     edx, [esp+4Ch+arg_4]
.text:004049EC                 cmp     [esp+4Ch+var_34], edx
.text:004049F0                 jnb     short loc_4049FE
.text:004049F2                 mov     ecx, [esp+4Ch+arg_0]
.text:004049F6                 mov     edi, [esp+4Ch+var_34]
.text:004049FA                 mov     byte ptr [edi+ecx], 3Fh ; '?'
.text:004049FE
.text:004049FE loc_4049FE:                             ; CODE XREF: sub_404460+590↑j
.text:004049FE                 inc     [esp+4Ch+var_34]
.text:00404A02                 mov     eax, [esp+4Ch+arg_4]
.text:00404A06                 cmp     [esp+4Ch+var_34], eax
.text:00404A0A                 jnb     short loc_404A18
.text:00404A0C                 mov     edx, [esp+4Ch+arg_0]
.text:00404A10                 mov     esi, [esp+4Ch+var_34]
.text:00404A14                 mov     byte ptr [esi+edx], 5Ch ; '\'
.text:00404A18
.text:00404A18 loc_404A18:                             ; CODE XREF: sub_404460+5AA↑j
.text:00404A18                 inc     [esp+4Ch+var_34]
.text:00404A1C                 mov     edi, [esp+4Ch+arg_4]
.text:00404A20                 cmp     [esp+4Ch+var_34], edi
.text:00404A24                 jnb     loc_404913
.text:00404A2A                 mov     eax, [esp+4Ch+arg_0]
.text:00404A2E                 mov     ecx, [esp+4Ch+var_34]
.text:00404A32                 mov     byte ptr [ecx+eax], 3Fh ; '?'
.text:00404A36                 jmp     loc_404913
.text:00404A36 ; ---------------------------------------------------------------------------
.text:00404A3B                 align 10h
.text:00404A40
.text:00404A40 def_404565:                             ; CODE XREF: sub_404460+FF↑j
.text:00404A40                                         ; sub_404460+105↑j
.text:00404A40                                         ; DATA XREF: ...
.text:00404A40                 cmp     [esp+4Ch+var_22], 0 ; jumptable 00404565 default case, cases 1-6,14-31,64
.text:00404A45                 jz      loc_404B70
.text:00404A4B                 mov     [esp+4Ch+var_28], 1
.text:00404A53                 mov     esi, ds:__mb_cur_max
.text:00404A59                 movzx   edx, bl
.text:00404A5C                 cmp     dword ptr [esi], 1
.text:00404A5F                 jz      loc_404B54
.text:00404A65                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404A6D                 mov     [esp+4Ch+C], edx ; C
.text:00404A70                 call    _isctype
.text:00404A75
.text:00404A75 loc_404A75:                             ; CODE XREF: sub_404460+705↓j
.text:00404A75                 test    eax, eax
.text:00404A77                 setnz   [esp+4Ch+var_29]
.text:00404A7C
.text:00404A7C loc_404A7C:                             ; CODE XREF: sub_404460+7A5↓j
.text:00404A7C                 cmp     [esp+4Ch+var_21], 0
.text:00404A81                 lea     eax, [ebp+1]
.text:00404A84                 jz      loc_404820
.text:00404A8A                 cmp     [esp+4Ch+var_29], 0
.text:00404A8F                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404A8F                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404A95
.text:00404A95 loc_404A95:                             ; CODE XREF: sub_404460+7AB↓j
.text:00404A95                 mov     eax, [esp+4Ch+var_28]
.text:00404A99                 lea     edx, [eax+ebp]
.text:00404A9C                 lea     esi, [esi+0]
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_404460+6EF↓j
.text:00404AA0                 cmp     [esp+4Ch+var_21], 0
.text:00404AA5                 jz      short loc_404B20
.text:00404AA7                 cmp     [esp+4Ch+var_29], 0
.text:00404AAC                 jnz     short loc_404B20
.text:00404AAE                 mov     edi, [esp+4Ch+arg_4]
.text:00404AB2                 cmp     [esp+4Ch+var_34], edi
.text:00404AB6                 jnb     short loc_404AC4
.text:00404AB8                 mov     esi, [esp+4Ch+arg_0]
.text:00404ABC                 mov     eax, [esp+4Ch+var_34]
.text:00404AC0                 mov     byte ptr [eax+esi], 5Ch ; '\'
.text:00404AC4
.text:00404AC4 loc_404AC4:                             ; CODE XREF: sub_404460+656↑j
.text:00404AC4                 inc     [esp+4Ch+var_34]
.text:00404AC8                 mov     ecx, [esp+4Ch+arg_4]
.text:00404ACC                 cmp     [esp+4Ch+var_34], ecx
.text:00404AD0                 jnb     short loc_404AE5
.text:00404AD2                 mov     cl, bl
.text:00404AD4                 mov     esi, [esp+4Ch+arg_0]
.text:00404AD8                 mov     edi, [esp+4Ch+var_34]
.text:00404ADC                 shr     cl, 6
.text:00404ADF                 add     cl, 30h ; '0'
.text:00404AE2                 mov     [edi+esi], cl
.text:00404AE5
.text:00404AE5 loc_404AE5:                             ; CODE XREF: sub_404460+670↑j
.text:00404AE5                 inc     [esp+4Ch+var_34]
.text:00404AE9                 mov     edi, [esp+4Ch+arg_4]
.text:00404AED                 cmp     [esp+4Ch+var_34], edi
.text:00404AF1                 jnb     short loc_404B09
.text:00404AF3                 mov     cl, bl
.text:00404AF5                 mov     esi, [esp+4Ch+arg_0]
.text:00404AF9                 shr     cl, 3
.text:00404AFC                 mov     edi, [esp+4Ch+var_34]
.text:00404B00                 and     cl, 7
.text:00404B03                 add     cl, 30h ; '0'
.text:00404B06                 mov     [edi+esi], cl
.text:00404B09
.text:00404B09 loc_404B09:                             ; CODE XREF: sub_404460+691↑j
.text:00404B09                 inc     [esp+4Ch+var_34]
.text:00404B0D                 and     bl, 7
.text:00404B10                 add     bl, 30h ; '0'
.text:00404B13                 lea     esi, [esi+0]
.text:00404B19                 lea     edi, [edi+0]
.text:00404B20
.text:00404B20 loc_404B20:                             ; CODE XREF: sub_404460+645↑j
.text:00404B20                                         ; sub_404460+64C↑j
.text:00404B20                 lea     eax, [ebp+1]
.text:00404B23                 cmp     edx, eax
.text:00404B25                 jbe     loc_404820
.text:00404B2B                 mov     ebp, [esp+4Ch+arg_4]
.text:00404B2F                 cmp     [esp+4Ch+var_34], ebp
.text:00404B33                 jnb     short loc_404B40
.text:00404B35                 mov     ecx, [esp+4Ch+arg_0]
.text:00404B39                 mov     edi, [esp+4Ch+var_34]
.text:00404B3D                 mov     [edi+ecx], bl
.text:00404B40
.text:00404B40 loc_404B40:                             ; CODE XREF: sub_404460+6D3↑j
.text:00404B40                 inc     [esp+4Ch+var_34]
.text:00404B44                 mov     ebp, eax
.text:00404B46                 mov     eax, [esp+4Ch+Str]
.text:00404B4A                 movzx   ebx, byte ptr [ebp+eax+0]
.text:00404B4F                 jmp     loc_404AA0
.text:00404B54 ; ---------------------------------------------------------------------------
.text:00404B54
.text:00404B54 loc_404B54:                             ; CODE XREF: sub_404460+5FF↑j
.text:00404B54                 mov     ecx, ds:_pctype
.text:00404B5A                 mov     edi, [ecx]
.text:00404B5C                 movzx   eax, word ptr [edi+edx*2]
.text:00404B60                 and     eax, 157h
.text:00404B65                 jmp     loc_404A75
.text:00404B65 ; ---------------------------------------------------------------------------
.text:00404B6A                 align 10h
.text:00404B70
.text:00404B70 loc_404B70:                             ; CODE XREF: sub_404460+5E5↑j
.text:00404B70                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh
.text:00404B75                 mov     [esp+4Ch+var_18._Wchar], 0
.text:00404B7D                 mov     [esp+4Ch+var_28], 0
.text:00404B85                 mov     [esp+4Ch+var_29], 1
.text:00404B8A                 jz      loc_404D1C
.text:00404B90
.text:00404B90 loc_404B90:                             ; CODE XREF: sub_404460+8CC↓j
.text:00404B90                 mov     ecx, [esp+4Ch+arg_C]
.text:00404B94                 lea     edx, [esp+4Ch+var_18]
.text:00404B98                 mov     edi, [esp+4Ch+Str]
.text:00404B9C                 mov     [esp+4Ch+State], edx ; State
.text:00404BA0                 lea     esi, [esp+4Ch+var_18._State]
.text:00404BA4                 sub     ecx, ebp
.text:00404BA6                 mov     [esp+4Ch+SizeInBytes], ecx ; SizeInBytes
.text:00404BAA                 add     edi, ebp
.text:00404BAC                 mov     [esp+4Ch+var_30], edi
.text:00404BB0                 mov     [esp+4Ch+Type], edi ; SrcCh
.text:00404BB4                 mov     [esp+4Ch+C], esi ; DstCh
.text:00404BB7                 call    mbrtowc
.text:00404BBC                 test    eax, eax
.text:00404BBE                 mov     edi, eax
.text:00404BC0                 jz      short loc_404C00
.text:00404BC2                 cmp     eax, 0FFFFFFFFh
.text:00404BC5                 jz      loc_404D12
.text:00404BCB                 cmp     eax, 0FFFFFFFEh
.text:00404BCE                 jz      loc_404CD2
.text:00404BD4                 cmp     [esp+4Ch+arg_10], 1
.text:00404BD9                 jz      short loc_404C10
.text:00404BDB
.text:00404BDB loc_404BDB:                             ; CODE XREF: sub_404460+7B9↓j
.text:00404BDB                                         ; sub_404460+86D↓j
.text:00404BDB                 movzx   ecx, [esp+4Ch+var_18._State]
.text:00404BE0                 mov     [esp+4Ch+Type], 157h ; Type
.text:00404BE8                 mov     [esp+4Ch+C], ecx ; C
.text:00404BEB                 call    iswctype
.text:00404BF0                 test    eax, eax
.text:00404BF2                 jnz     short loc_404BF9
.text:00404BF4                 mov     [esp+4Ch+var_29], 0
.text:00404BF9
.text:00404BF9 loc_404BF9:                             ; CODE XREF: sub_404460+792↑j
.text:00404BF9                 mov     [esp+4Ch+var_28], edi
.text:00404BFD                 lea     esi, [esi+0]
.text:00404C00
.text:00404C00 loc_404C00:                             ; CODE XREF: sub_404460+760↑j
.text:00404C00                                         ; sub_404460+87B↓j ...
.text:00404C00                 cmp     [esp+4Ch+var_28], 1
.text:00404C05                 jbe     loc_404A7C
.text:00404C0B                 jmp     loc_404A95
.text:00404C10 ; ---------------------------------------------------------------------------
.text:00404C10
.text:00404C10 loc_404C10:                             ; CODE XREF: sub_404460+779↑j
.text:00404C10                 cmp     [esp+4Ch+arg_10], eax
.text:00404C14                 mov     edx, 1
.text:00404C19                 jnb     short loc_404BDB
.text:00404C1B
.text:00404C1B loc_404C1B:                             ; CODE XREF: sub_404460+867↓j
.text:00404C1B                 mov     ecx, [esp+4Ch+Str]
.text:00404C1F                 lea     esi, [edx+ebp]
.text:00404C22                 movsx   eax, byte ptr [esi+ecx]
.text:00404C26                 sub     eax, 5Bh ; '['  ; switch 34 cases
.text:00404C29                 cmp     eax, 21h
.text:00404C2C                 ja      def_404C32      ; jumptable 00404C32 default case, cases 93,95,97-123
.text:00404C32                 jmp     ds:jpt_404C32[eax*4] ; switch jump
.text:00404C32 ; ---------------------------------------------------------------------------
.text:00404C39                 align 4
.text:00404C3C jpt_404C32      dd offset loc_40486B    ; DATA XREF: sub_404460+7D2↑r
.text:00404C3C                 dd offset loc_40486B    ; jump table for switch statement
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset loc_40486B
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset loc_40486B
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset def_404C32
.text:00404C3C                 dd offset loc_40486B
.text:00404CC4 ; ---------------------------------------------------------------------------
.text:00404CC4
.text:00404CC4 def_404C32:                             ; CODE XREF: sub_404460+7CC↑j
.text:00404CC4                                         ; sub_404460+7D2↑j
.text:00404CC4                                         ; DATA XREF: ...
.text:00404CC4                 inc     edx             ; jumptable 00404C32 default case, cases 93,95,97-123
.text:00404CC5                 cmp     edx, edi
.text:00404CC7                 jb      loc_404C1B
.text:00404CCD                 jmp     loc_404BDB
.text:00404CD2 ; ---------------------------------------------------------------------------
.text:00404CD2
.text:00404CD2 loc_404CD2:                             ; CODE XREF: sub_404460+76E↑j
.text:00404CD2                 cmp     ebp, [esp+4Ch+arg_C]
.text:00404CD6                 mov     [esp+4Ch+var_29], 0
.text:00404CDB                 jnb     loc_404C00
.text:00404CE1                 mov     eax, [esp+4Ch+var_30]
.text:00404CE5                 cmp     byte ptr [eax], 0
.text:00404CE8                 jz      loc_404C00
.text:00404CEE
.text:00404CEE loc_404CEE:                             ; CODE XREF: sub_404460+8AB↓j
.text:00404CEE                 inc     [esp+4Ch+var_28]
.text:00404CF2                 mov     esi, [esp+4Ch+var_28]
.text:00404CF6                 lea     eax, [esi+ebp]
.text:00404CF9                 cmp     eax, [esp+4Ch+arg_C]
.text:00404CFD                 jnb     loc_404C00
.text:00404D03                 mov     edi, [esp+4Ch+Str]
.text:00404D07                 cmp     byte ptr [eax+edi], 0
.text:00404D0B                 jnz     short loc_404CEE
.text:00404D0D                 jmp     loc_404C00
.text:00404D12 ; ---------------------------------------------------------------------------
.text:00404D12
.text:00404D12 loc_404D12:                             ; CODE XREF: sub_404460+765↑j
.text:00404D12                 mov     [esp+4Ch+var_29], 0
.text:00404D17                 jmp     loc_404C00
.text:00404D1C ; ---------------------------------------------------------------------------
.text:00404D1C
.text:00404D1C loc_404D1C:                             ; CODE XREF: sub_404460+72A↑j
.text:00404D1C                 mov     edx, [esp+4Ch+Str]
.text:00404D20                 mov     [esp+4Ch+C], edx ; Str
.text:00404D23                 call    strlen
.text:00404D28                 mov     [esp+4Ch+arg_C], eax
.text:00404D2C                 jmp     loc_404B90
.text:00404D31 ; ---------------------------------------------------------------------------
.text:00404D31
.text:00404D31 loc_404D31:                             ; CODE XREF: sub_404460+105↑j
.text:00404D31                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404D31                 mov     dl, bl          ; jumptable 00404565 case 92
.text:00404D33                 jmp     loc_404864
.text:00404D38 ; ---------------------------------------------------------------------------
.text:00404D38
.text:00404D38 loc_404D38:                             ; CODE XREF: sub_404460+105↑j
.text:00404D38                                         ; sub_404460+902↓j
.text:00404D38                                         ; DATA XREF: ...
.text:00404D38                 cmp     [esp+4Ch+arg_10], 1 ; jumptable 00404565 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404D3D                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404D3D                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404D43                 jmp     loc_40486B      ; jumptable 00404C32 cases 91,92,94,96,124
.text:00404D48 ; ---------------------------------------------------------------------------
.text:00404D48
.text:00404D48 loc_404D48:                             ; CODE XREF: sub_404460+105↑j
.text:00404D48                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404D48                 cmp     [esp+4Ch+arg_C], 0FFFFFFFFh ; jumptable 00404565 cases 123,125
.text:00404D4D                 jz      short loc_404D64
.text:00404D4F                 cmp     [esp+4Ch+arg_C], 1
.text:00404D54
.text:00404D54 loc_404D54:                             ; CODE XREF: sub_404460+90C↓j
.text:00404D54                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404D54                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404D5A
.text:00404D5A loc_404D5A:                             ; CODE XREF: sub_404460+105↑j
.text:00404D5A                                         ; DATA XREF: sub_404460:jpt_404565↑o
.text:00404D5A                 test    ebp, ebp        ; jumptable 00404565 cases 35,126
.text:00404D5C                 jnz     def_404962      ; jumptable 00404565 cases 37,43-58,65-90,93,95,97-122
.text:00404D5C                                         ; jumptable 00404962 default case, cases 34-38,42-44,46,48-59
.text:00404D62                 jmp     short loc_404D38 ; jumptable 00404565 cases 32-34,36,38,40-42,59-62,91,94,96,124
.text:00404D64 ; ---------------------------------------------------------------------------
.text:00404D64
.text:00404D64 loc_404D64:                             ; CODE XREF: sub_404460+8ED↑j
.text:00404D64                 mov     esi, [esp+4Ch+Str]
.text:00404D68                 cmp     byte ptr [esi+1], 0
.text:00404D6C                 jmp     short loc_404D54
.text:00404D6E ; ---------------------------------------------------------------------------
.text:00404D6E
.text:00404D6E loc_404D6E:                             ; CODE XREF: sub_404460:loc_4044FF↑j
.text:00404D6E                 test    ebp, ebp
.text:00404D70                 jnz     short loc_404D7D
.text:00404D72                 cmp     [esp+4Ch+arg_10], 1
.text:00404D77                 jz      loc_40486B      ; jumptable 00404C32 cases 91,92,94,96,124
.text:00404D7D
.text:00404D7D loc_404D7D:                             ; CODE XREF: sub_404460+910↑j
.text:00404D7D                 mov     esi, [esp+4Ch+var_1C]
.text:00404D81                 test    esi, esi
.text:00404D83                 jz      short loc_404DB8
.text:00404D85                 mov     edi, [esp+4Ch+var_1C]
.text:00404D89                 movzx   eax, byte ptr [edi]
.text:00404D8C                 test    al, al
.text:00404D8E                 jz      short loc_404DB8
.text:00404D90
.text:00404D90 loc_404D90:                             ; CODE XREF: sub_404460+956↓j
.text:00404D90                 mov     ebp, [esp+4Ch+arg_4]
.text:00404D94                 cmp     [esp+4Ch+var_34], ebp
.text:00404D98                 jnb     short loc_404DA5
.text:00404D9A                 mov     ecx, [esp+4Ch+arg_0]
.text:00404D9E                 mov     ebx, [esp+4Ch+var_34]
.text:00404DA2                 mov     [ebx+ecx], al
.text:00404DA5
.text:00404DA5 loc_404DA5:                             ; CODE XREF: sub_404460+938↑j
.text:00404DA5                 inc     [esp+4Ch+var_1C]
.text:00404DA9                 inc     [esp+4Ch+var_34]
.text:00404DAD                 mov     edx, [esp+4Ch+var_1C]
.text:00404DB1                 movzx   eax, byte ptr [edx]
.text:00404DB4                 test    al, al
.text:00404DB6                 jnz     short loc_404D90
.text:00404DB8
.text:00404DB8 loc_404DB8:                             ; CODE XREF: sub_404460+923↑j
.text:00404DB8                                         ; sub_404460+92E↑j
.text:00404DB8                 mov     eax, [esp+4Ch+arg_4]
.text:00404DBC                 cmp     [esp+4Ch+var_34], eax
.text:00404DC0                 jnb     short loc_404DCE
.text:00404DC2                 mov     edi, [esp+4Ch+arg_0]
.text:00404DC6                 mov     esi, [esp+4Ch+var_34]
.text:00404DCA                 mov     byte ptr [esi+edi], 0
.text:00404DCE
.text:00404DCE loc_404DCE:                             ; CODE XREF: sub_404460+960↑j
.text:00404DCE                 mov     eax, [esp+4Ch+var_34]
.text:00404DD2                 jmp     loc_40489F
.text:00404DD7 ; ---------------------------------------------------------------------------
.text:00404DD7
.text:00404DD7 loc_404DD7:                             ; CODE XREF: sub_404460+95↑j
.text:00404DD7                 mov     ebx, [esp+4Ch+Str]
.text:00404DDB                 cmp     byte ptr [ebp+ebx+0], 0
.text:00404DE0                 jmp     loc_4044FF
.text:00404DE5 ; ---------------------------------------------------------------------------
.text:00404DE5
.text:00404DE5 loc_404DE5:                             ; CODE XREF: sub_404460+3D↑j
.text:00404DE5                                         ; DATA XREF: sub_404460:jpt_40449D↑o
.text:00404DE5                 mov     edx, [esp+4Ch+arg_4] ; jumptable 0040449D case 2
.text:00404DE9                 cmp     [esp+4Ch+var_34], edx
.text:00404DED                 jnb     short loc_404DF6
.text:00404DEF                 mov     ecx, [esp+4Ch+arg_0]
.text:00404DF3                 mov     byte ptr [ecx], 27h ; '''
.text:00404DF6
.text:00404DF6 loc_404DF6:                             ; CODE XREF: sub_404460+98D↑j
.text:00404DF6                 mov     [esp+4Ch+var_34], 1
.text:00404DFE                 mov     [esp+4Ch+var_1C], 40444Eh
.text:00404E06                 jmp     loc_4044E6
.text:00404E0B ; ---------------------------------------------------------------------------
.text:00404E0B
.text:00404E0B loc_404E0B:                             ; CODE XREF: sub_404460+3D↑j
.text:00404E0B                                         ; DATA XREF: sub_404460:jpt_40449D↑o
.text:00404E0B                 mov     [esp+4Ch+var_21], 1 ; jumptable 0040449D case 4
.text:00404E10                 jmp     def_40449D      ; jumptable 0040449D default case, cases 0,1
.text:00404E15 ; ---------------------------------------------------------------------------
.text:00404E15
.text:00404E15 loc_404E15:                             ; CODE XREF: sub_404460+3D↑j
.text:00404E15                                         ; DATA XREF: sub_404460:jpt_40449D↑o
.text:00404E15                 mov     [esp+4Ch+C], 404450h ; jumptable 0040449D cases 5,6
.text:00404E1C                 call    ds:libintl_gettext
.text:00404E22                 cmp     eax, 404450h
.text:00404E27                 mov     edi, eax
.text:00404E29                 jz      short loc_404EA0
.text:00404E2B
.text:00404E2B loc_404E2B:                             ; CODE XREF: sub_404460+A45↓j
.text:00404E2B                                         ; sub_404460+A4C↓j
.text:00404E2B                 mov     [esp+4Ch+C], 40444Eh
.text:00404E32                 call    ds:libintl_gettext
.text:00404E38                 cmp     eax, 40444Eh
.text:00404E3D                 mov     edx, eax
.text:00404E3F                 jz      short loc_404E92
.text:00404E41
.text:00404E41 loc_404E41:                             ; CODE XREF: sub_404460+A37↓j
.text:00404E41                                         ; sub_404460+A3E↓j
.text:00404E41                 mov     [esp+4Ch+var_1C], edi
.text:00404E45                 cmp     byte ptr [edi], 0
.text:00404E48                 jz      short loc_404E78
.text:00404E4A
.text:00404E4A loc_404E4A:                             ; CODE XREF: sub_404460+A16↓j
.text:00404E4A                 mov     ecx, [esp+4Ch+arg_4]
.text:00404E4E                 cmp     [esp+4Ch+var_34], ecx
.text:00404E52                 jnb     short loc_404E67
.text:00404E54                 mov     ebp, [esp+4Ch+var_1C]
.text:00404E58                 mov     edi, [esp+4Ch+arg_0]
.text:00404E5C                 mov     esi, [esp+4Ch+var_34]
.text:00404E60                 movzx   ebx, byte ptr [ebp+0]
.text:00404E64                 mov     [esi+edi], bl
.text:00404E67
.text:00404E67 loc_404E67:                             ; CODE XREF: sub_404460+9F2↑j
.text:00404E67                 inc     [esp+4Ch+var_1C]
.text:00404E6B                 inc     [esp+4Ch+var_34]
.text:00404E6F                 mov     eax, [esp+4Ch+var_1C]
.text:00404E73                 cmp     byte ptr [eax], 0
.text:00404E76                 jnz     short loc_404E4A
.text:00404E78
.text:00404E78 loc_404E78:                             ; CODE XREF: sub_404460+9E8↑j
.text:00404E78                 mov     [esp+4Ch+var_21], 1
.text:00404E7D                 mov     [esp+4Ch+var_1C], edx
.text:00404E81                 mov     [esp+4Ch+C], edx ; Str
.text:00404E84                 call    strlen
.text:00404E89                 mov     [esp+4Ch+var_20], eax
.text:00404E8D                 jmp     def_40449D      ; jumptable 0040449D default case, cases 0,1
.text:00404E92 ; ---------------------------------------------------------------------------
.text:00404E92
.text:00404E92 loc_404E92:                             ; CODE XREF: sub_404460+9DF↑j
.text:00404E92                 cmp     [esp+4Ch+arg_10], 6
.text:00404E97                 jnz     short loc_404E41
.text:00404E99                 mov     edx, offset asc_40444C ; "\"'`"
.text:00404E9E                 jmp     short loc_404E41
.text:00404EA0 ; ---------------------------------------------------------------------------
.text:00404EA0
.text:00404EA0 loc_404EA0:                             ; CODE XREF: sub_404460+9C9↑j
.text:00404EA0                 cmp     [esp+4Ch+arg_10], 6
.text:00404EA5                 jnz     short loc_404E2B
.text:00404EA7                 mov     edi, offset asc_40444C ; "\"'`"
.text:00404EAC                 jmp     loc_404E2B
.text:00404EAC sub_404460      endp
.text:00404EAC
.text:00404EB1 ; ---------------------------------------------------------------------------
.text:00404EB1                 jmp     short loc_404EC0
.text:00404EB1 ; ---------------------------------------------------------------------------
.text:00404EB3                 align 10h
.text:00404EC0
.text:00404EC0 loc_404EC0:                             ; CODE XREF: .text:00404EB1↑j
.text:00404EC0                 sub     esp, 0Ch
.text:00404EC3                 mov     [esp+4], ebx
.text:00404EC7                 mov     [esp+8], esi
.text:00404ECB                 call    _errno
.text:00404ED0                 mov     esi, [eax]
.text:00404ED2                 mov     dword ptr [esp], 24h ; '$'
.text:00404ED9                 call    sub_4038C0
.text:00404EDE                 mov     edx, [esp+10h]
.text:00404EE2                 mov     ebx, eax
.text:00404EE4                 test    edx, edx
.text:00404EE6                 jz      short loc_404F31
.text:00404EE8
.text:00404EE8 loc_404EE8:                             ; CODE XREF: .text:00404F36↓j
.text:00404EE8                 mov     ecx, [edx]
.text:00404EEA                 mov     [ebx], ecx
.text:00404EEC                 mov     ecx, [edx+4]
.text:00404EEF                 mov     [ebx+4], ecx
.text:00404EF2                 mov     ecx, [edx+8]
.text:00404EF5                 mov     [ebx+8], ecx
.text:00404EF8                 mov     ecx, [edx+0Ch]
.text:00404EFB                 mov     [ebx+0Ch], ecx
.text:00404EFE                 mov     ecx, [edx+10h]
.text:00404F01                 mov     [ebx+10h], ecx
.text:00404F04                 mov     ecx, [edx+14h]
.text:00404F07                 mov     [ebx+14h], ecx
.text:00404F0A                 mov     ecx, [edx+18h]
.text:00404F0D                 mov     [ebx+18h], ecx
.text:00404F10                 mov     ecx, [edx+1Ch]
.text:00404F13                 mov     [ebx+1Ch], ecx
.text:00404F16                 mov     ecx, [edx+20h]
.text:00404F19                 mov     [ebx+20h], ecx
.text:00404F1C                 call    _errno
.text:00404F21                 mov     [eax], esi
.text:00404F23                 mov     esi, [esp+8]
.text:00404F27                 mov     eax, ebx
.text:00404F29                 mov     ebx, [esp+4]
.text:00404F2D                 add     esp, 0Ch
.text:00404F30                 retn
.text:00404F31 ; ---------------------------------------------------------------------------
.text:00404F31
.text:00404F31 loc_404F31:                             ; CODE XREF: .text:00404EE6↑j
.text:00404F31                 mov     edx, offset dword_40F170
.text:00404F36                 jmp     short loc_404EE8
.text:00404F36 ; ---------------------------------------------------------------------------
.text:00404F38                 align 10h
.text:00404F40                 mov     eax, [esp+4]
.text:00404F44                 test    eax, eax
.text:00404F46                 jz      short loc_404F50
.text:00404F48
.text:00404F48 loc_404F48:                             ; CODE XREF: .text:00404F55↓j
.text:00404F48                 mov     eax, [eax]
.text:00404F4A                 retn
.text:00404F4A ; ---------------------------------------------------------------------------
.text:00404F4B                 align 10h
.text:00404F50
.text:00404F50 loc_404F50:                             ; CODE XREF: .text:00404F46↑j
.text:00404F50                 mov     eax, offset dword_40F170
.text:00404F55                 jmp     short loc_404F48
.text:00404F55 ; ---------------------------------------------------------------------------
.text:00404F57                 align 10h
.text:00404F60                 mov     edx, [esp+4]
.text:00404F64                 test    edx, edx
.text:00404F66                 jz      short loc_404F70
.text:00404F68
.text:00404F68 loc_404F68:                             ; CODE XREF: .text:00404F75↓j
.text:00404F68                 mov     ecx, [esp+8]
.text:00404F6C                 mov     [edx], ecx
.text:00404F6E                 retn
.text:00404F6E ; ---------------------------------------------------------------------------
.text:00404F6F                 align 10h
.text:00404F70
.text:00404F70 loc_404F70:                             ; CODE XREF: .text:00404F66↑j
.text:00404F70                 mov     edx, offset dword_40F170
.text:00404F75                 jmp     short loc_404F68
.text:00404F75 ; ---------------------------------------------------------------------------
.text:00404F77                 align 10h
.text:00404F80                 sub     esp, 8
.text:00404F83                 mov     eax, [esp+0Ch]
.text:00404F87                 movzx   ecx, byte ptr [esp+10h]
.text:00404F8C                 mov     [esp], ebx
.text:00404F8F                 mov     ebx, [esp+14h]
.text:00404F93                 mov     [esp+4], esi
.text:00404F97                 mov     dl, cl
.text:00404F99                 shr     dl, 5
.text:00404F9C                 movzx   edx, dl
.text:00404F9F                 shl     edx, 2
.text:00404FA2                 test    eax, eax
.text:00404FA4                 lea     esi, [edx+eax+4]
.text:00404FA8                 jz      short loc_404FD0
.text:00404FAA
.text:00404FAA loc_404FAA:                             ; CODE XREF: .text:00404FD6↓j
.text:00404FAA                 mov     edx, [esi]
.text:00404FAC                 and     ecx, 1Fh
.text:00404FAF                 and     ebx, 1
.text:00404FB2                 mov     eax, edx
.text:00404FB4                 shr     eax, cl
.text:00404FB6                 and     eax, 1
.text:00404FB9                 xor     ebx, eax
.text:00404FBB                 shl     ebx, cl
.text:00404FBD                 xor     edx, ebx
.text:00404FBF                 mov     [esi], edx
.text:00404FC1                 mov     ebx, [esp]
.text:00404FC4                 mov     esi, [esp+4]
.text:00404FC8                 add     esp, 8
.text:00404FCB                 retn
.text:00404FCB ; ---------------------------------------------------------------------------
.text:00404FCC                 align 10h
.text:00404FD0
.text:00404FD0 loc_404FD0:                             ; CODE XREF: .text:00404FA8↑j
.text:00404FD0                 lea     esi, dword_40F174[edx]
.text:00404FD6                 jmp     short loc_404FAA
.text:00404FD6 ; ---------------------------------------------------------------------------
.text:00404FD8                 align 10h
.text:00404FE0                 sub     esp, 2Ch
.text:00404FE3                 mov     [esp+24h], ebx
.text:00404FE7                 mov     ebx, [esp+40h]
.text:00404FEB                 mov     [esp+28h], esi
.text:00404FEF                 test    ebx, ebx
.text:00404FF1                 jz      short loc_405040
.text:00404FF3
.text:00404FF3 loc_404FF3:                             ; CODE XREF: .text:00405045↓j
.text:00404FF3                 call    _errno
.text:00404FF8                 mov     esi, [eax]
.text:00404FFA                 mov     [esp+14h], ebx
.text:00404FFE                 mov     edx, [ebx]
.text:00405000                 mov     ecx, [esp+38h]
.text:00405004                 mov     ebx, [esp+3Ch]
.text:00405008                 mov     [esp+10h], edx
.text:0040500C                 mov     edx, [esp+34h]
.text:00405010                 mov     [esp+0Ch], ebx
.text:00405014                 mov     [esp+8], ecx
.text:00405018                 mov     [esp+4], edx
.text:0040501C                 mov     edx, [esp+30h]
.text:00405020                 mov     [esp], edx
.text:00405023                 call    sub_404460
.text:00405028                 mov     ebx, eax
.text:0040502A                 call    _errno
.text:0040502F                 mov     [eax], esi
.text:00405031                 mov     esi, [esp+28h]
.text:00405035                 mov     eax, ebx
.text:00405037                 mov     ebx, [esp+24h]
.text:0040503B                 add     esp, 2Ch
.text:0040503E                 retn
.text:0040503E ; ---------------------------------------------------------------------------
.text:0040503F                 align 10h
.text:00405040
.text:00405040 loc_405040:                             ; CODE XREF: .text:00404FF1↑j
.text:00405040                 mov     ebx, offset dword_40F170
.text:00405045                 jmp     short loc_404FF3
.text:00405045 ; ---------------------------------------------------------------------------
.text:00405047                 align 10h
.text:00405050                 push    ebp
.text:00405051                 push    edi
.text:00405052                 push    esi
.text:00405053                 push    ebx
.text:00405054                 sub     esp, 2Ch
.text:00405057                 mov     ebp, [esp+48h]
.text:0040505B                 call    _errno
.text:00405060                 mov     edx, [eax]
.text:00405062                 test    ebp, ebp
.text:00405064                 mov     ebx, ebp
.text:00405066                 mov     [esp+28h], edx
.text:0040506A                 jz      loc_405120
.text:00405070
.text:00405070 loc_405070:                             ; CODE XREF: .text:00405125↓j
.text:00405070                 call    _errno
.text:00405075                 mov     edi, [eax]
.text:00405077                 mov     esi, ebp
.text:00405079                 mov     [esp+14h], ebx
.text:0040507D                 mov     ecx, [ebx]
.text:0040507F                 mov     dword ptr [esp], 0
.text:00405086                 mov     edx, [esp+44h]
.text:0040508A                 mov     dword ptr [esp+4], 0
.text:00405092                 mov     eax, [esp+40h]
.text:00405096                 mov     [esp+10h], ecx
.text:0040509A                 mov     [esp+0Ch], edx
.text:0040509E                 mov     [esp+8], eax
.text:004050A2                 call    sub_404460
.text:004050A7                 mov     ebx, eax
.text:004050A9                 call    _errno
.text:004050AE                 mov     [eax], edi
.text:004050B0                 lea     edi, [ebx+1]
.text:004050B3                 mov     [esp], edi
.text:004050B6                 call    sub_4038C0
.text:004050BB                 mov     [esp+24h], eax
.text:004050BF                 test    ebp, ebp
.text:004050C1                 jz      short loc_405112
.text:004050C3
.text:004050C3 loc_4050C3:                             ; CODE XREF: .text:00405117↓j
.text:004050C3                 call    _errno
.text:004050C8                 mov     ebp, [eax]
.text:004050CA                 mov     [esp+14h], esi
.text:004050CE                 mov     ecx, [esi]
.text:004050D0                 mov     [esp+4], edi
.text:004050D4                 mov     edx, [esp+44h]
.text:004050D8                 mov     esi, [esp+24h]
.text:004050DC                 mov     [esp+10h], ecx
.text:004050E0                 mov     eax, [esp+40h]
.text:004050E4                 mov     [esp+0Ch], edx
.text:004050E8                 mov     [esp], esi
.text:004050EB                 mov     [esp+8], eax
.text:004050EF                 call    sub_404460
.text:004050F4                 call    _errno
.text:004050F9                 mov     [eax], ebp
.text:004050FB                 call    _errno
.text:00405100                 mov     ebx, [esp+28h]
.text:00405104                 mov     [eax], ebx
.text:00405106                 mov     eax, [esp+24h]
.text:0040510A                 add     esp, 2Ch
.text:0040510D                 pop     ebx
.text:0040510E                 pop     esi
.text:0040510F                 pop     edi
.text:00405110                 pop     ebp
.text:00405111                 retn
.text:00405112 ; ---------------------------------------------------------------------------
.text:00405112
.text:00405112 loc_405112:                             ; CODE XREF: .text:004050C1↑j
.text:00405112                 mov     esi, offset dword_40F170
.text:00405117                 jmp     short loc_4050C3
.text:00405117 ; ---------------------------------------------------------------------------
.text:00405119                 align 10h
.text:00405120
.text:00405120 loc_405120:                             ; CODE XREF: .text:0040506A↑j
.text:00405120                 mov     ebx, offset dword_40F170
.text:00405125                 jmp     loc_405070
.text:00405125 ; ---------------------------------------------------------------------------
.text:0040512A                 align 10h
.text:00405130                 sub     esp, 1Ch
.text:00405133                 mov     edx, [esp+24h]
.text:00405137                 mov     dword ptr [esp+0Ch], offset dword_40F170
.text:0040513F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405147                 mov     [esp+4], edx
.text:0040514B                 mov     edx, [esp+20h]
.text:0040514F                 mov     [esp], edx
.text:00405152                 call    sub_4055A0
.text:00405157                 add     esp, 1Ch
.text:0040515A                 retn
.text:0040515A ; ---------------------------------------------------------------------------
.text:0040515B                 align 10h
.text:00405160                 sub     esp, 1Ch
.text:00405163                 mov     edx, [esp+20h]
.text:00405167                 mov     dword ptr [esp+0Ch], offset dword_40F170
.text:0040516F                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405177                 mov     [esp+4], edx
.text:0040517B                 mov     dword ptr [esp], 0
.text:00405182                 call    sub_4055A0
.text:00405187                 add     esp, 1Ch
.text:0040518A                 retn
.text:0040518A ; ---------------------------------------------------------------------------
.text:0040518B                 align 10h
.text:00405190                 push    ebp
.text:00405191                 xor     eax, eax
.text:00405193                 mov     ecx, 8
.text:00405198                 push    edi
.text:00405199                 push    esi
.text:0040519A                 push    ebx
.text:0040519B                 sub     esp, 0ACh
.text:004051A1                 mov     ebp, [esp+0C4h]
.text:004051A8                 cld
.text:004051A9                 lea     edi, [esp+14h]
.text:004051AD                 mov     [esp+10h], ebp
.text:004051B1                 rep stosd
.text:004051B3                 mov     eax, [esp+30h]
.text:004051B7                 mov     edi, [esp+10h]
.text:004051BB                 mov     esi, [esp+14h]
.text:004051BF                 mov     [esp+60h], eax
.text:004051C3                 mov     ebp, [esp+18h]
.text:004051C7                 mov     eax, [esp+10h]
.text:004051CB                 mov     [esp+40h], edi
.text:004051CF                 mov     ecx, [esp+28h]
.text:004051D3                 mov     edi, [esp+1Ch]
.text:004051D7                 mov     [esp+44h], esi
.text:004051DB                 mov     edx, [esp+2Ch]
.text:004051DF                 mov     esi, [esp+20h]
.text:004051E3                 mov     [esp+70h], eax
.text:004051E7                 mov     ebx, [esp+24h]
.text:004051EB                 mov     eax, [esp+14h]
.text:004051EF                 mov     [esp+48h], ebp
.text:004051F3                 mov     [esp+4Ch], edi
.text:004051F7                 mov     [esp+50h], esi
.text:004051FB                 mov     [esp+54h], ebx
.text:004051FF                 mov     [esp+58h], ecx
.text:00405203                 mov     [esp+5Ch], edx
.text:00405207                 mov     [esp+74h], eax
.text:0040520B                 mov     [esp+78h], ebp
.text:0040520F                 mov     [esp+7Ch], edi
.text:00405213                 mov     [esp+80h], esi
.text:0040521A                 mov     [esp+84h], ebx
.text:00405221                 mov     ebx, [esp+30h]
.text:00405225                 mov     [esp+8Ch], edx
.text:0040522C                 mov     edx, [esp+0C8h]
.text:00405233                 mov     [esp+88h], ecx
.text:0040523A                 lea     ecx, [esp+70h]
.text:0040523E                 mov     [esp+4], edx
.text:00405242                 mov     edx, [esp+0C0h]
.text:00405249                 mov     [esp+90h], ebx
.text:00405250                 mov     [esp+0Ch], ecx
.text:00405254                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:0040525C                 mov     [esp], edx
.text:0040525F                 call    sub_4055A0
.text:00405264                 add     esp, 0ACh
.text:0040526A                 pop     ebx
.text:0040526B                 pop     esi
.text:0040526C                 pop     edi
.text:0040526D                 pop     ebp
.text:0040526E                 retn
.text:0040526E ; ---------------------------------------------------------------------------
.text:0040526F                 align 10h
.text:00405270                 push    ebp
.text:00405271                 xor     eax, eax
.text:00405273                 mov     ecx, 8
.text:00405278                 push    edi
.text:00405279                 push    esi
.text:0040527A                 push    ebx
.text:0040527B                 sub     esp, 0ACh
.text:00405281                 mov     edx, [esp+0C4h]
.text:00405288                 cld
.text:00405289                 lea     edi, [esp+14h]
.text:0040528D                 mov     [esp+10h], edx
.text:00405291                 rep stosd
.text:00405293                 mov     eax, [esp+30h]
.text:00405297                 mov     ebp, [esp+10h]
.text:0040529B                 mov     edi, [esp+14h]
.text:0040529F                 mov     [esp+60h], eax
.text:004052A3                 mov     esi, [esp+20h]
.text:004052A7                 mov     eax, [esp+10h]
.text:004052AB                 mov     [esp+40h], ebp
.text:004052AF                 mov     ecx, [esp+28h]
.text:004052B3                 mov     ebp, [esp+18h]
.text:004052B7                 mov     [esp+44h], edi
.text:004052BB                 mov     edx, [esp+2Ch]
.text:004052BF                 mov     edi, [esp+1Ch]
.text:004052C3                 mov     [esp+70h], eax
.text:004052C7                 mov     ebx, [esp+24h]
.text:004052CB                 mov     eax, [esp+14h]
.text:004052CF                 mov     [esp+48h], ebp
.text:004052D3                 mov     [esp+4Ch], edi
.text:004052D7                 mov     [esp+50h], esi
.text:004052DB                 mov     [esp+54h], ebx
.text:004052DF                 mov     [esp+58h], ecx
.text:004052E3                 mov     [esp+5Ch], edx
.text:004052E7                 mov     [esp+74h], eax
.text:004052EB                 mov     [esp+78h], ebp
.text:004052EF                 mov     [esp+7Ch], edi
.text:004052F3                 mov     [esp+80h], esi
.text:004052FA                 mov     [esp+84h], ebx
.text:00405301                 mov     esi, [esp+30h]
.text:00405305                 lea     ebx, [esp+70h]
.text:00405309                 mov     [esp+8Ch], edx
.text:00405310                 mov     edx, [esp+0C8h]
.text:00405317                 mov     [esp+88h], ecx
.text:0040531E                 mov     ecx, [esp+0CCh]
.text:00405325                 mov     [esp+4], edx
.text:00405329                 mov     edx, [esp+0C0h]
.text:00405330                 mov     [esp+90h], esi
.text:00405337                 mov     [esp+0Ch], ebx
.text:0040533B                 mov     [esp+8], ecx
.text:0040533F                 mov     [esp], edx
.text:00405342                 call    sub_4055A0
.text:00405347                 add     esp, 0ACh
.text:0040534D                 pop     ebx
.text:0040534E                 pop     esi
.text:0040534F                 pop     edi
.text:00405350                 pop     ebp
.text:00405351                 retn
.text:00405351 ; ---------------------------------------------------------------------------
.text:00405352                 align 10h
.text:00405360                 push    ebp
.text:00405361                 xor     eax, eax
.text:00405363                 mov     ecx, 8
.text:00405368                 push    edi
.text:00405369                 push    esi
.text:0040536A                 push    ebx
.text:0040536B                 sub     esp, 0ACh
.text:00405371                 mov     edi, [esp+0C0h]
.text:00405378                 cld
.text:00405379                 mov     [esp+10h], edi
.text:0040537D                 lea     edi, [esp+14h]
.text:00405381                 rep stosd
.text:00405383                 mov     eax, [esp+30h]
.text:00405387                 mov     esi, [esp+10h]
.text:0040538B                 mov     ebx, [esp+14h]
.text:0040538F                 mov     [esp+60h], eax
.text:00405393                 mov     ebp, [esp+18h]
.text:00405397                 mov     eax, [esp+10h]
.text:0040539B                 mov     [esp+40h], esi
.text:0040539F                 mov     edi, [esp+1Ch]
.text:004053A3                 mov     esi, [esp+20h]
.text:004053A7                 mov     [esp+44h], ebx
.text:004053AB                 mov     ecx, [esp+28h]
.text:004053AF                 mov     edx, [esp+2Ch]
.text:004053B3                 mov     [esp+70h], eax
.text:004053B7                 mov     ebx, [esp+24h]
.text:004053BB                 mov     eax, [esp+14h]
.text:004053BF                 mov     [esp+48h], ebp
.text:004053C3                 mov     [esp+4Ch], edi
.text:004053C7                 mov     [esp+50h], esi
.text:004053CB                 mov     [esp+54h], ebx
.text:004053CF                 mov     [esp+58h], ecx
.text:004053D3                 mov     [esp+5Ch], edx
.text:004053D7                 mov     [esp+74h], eax
.text:004053DB                 mov     [esp+78h], ebp
.text:004053DF                 mov     [esp+7Ch], edi
.text:004053E3                 mov     [esp+80h], esi
.text:004053EA                 mov     [esp+84h], ebx
.text:004053F1                 mov     [esp+8Ch], edx
.text:004053F8                 lea     edx, [esp+70h]
.text:004053FC                 mov     [esp+88h], ecx
.text:00405403                 mov     ecx, [esp+30h]
.text:00405407                 mov     [esp+0Ch], edx
.text:0040540B                 mov     edx, [esp+0C4h]
.text:00405412                 mov     [esp+90h], ecx
.text:00405419                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:00405421                 mov     [esp+4], edx
.text:00405425                 mov     dword ptr [esp], 0
.text:0040542C                 call    sub_4055A0
.text:00405431                 add     esp, 0ACh
.text:00405437                 pop     ebx
.text:00405438                 pop     esi
.text:00405439                 pop     edi
.text:0040543A                 pop     ebp
.text:0040543B                 retn
.text:0040543B ; ---------------------------------------------------------------------------
.text:0040543C                 align 10h
.text:00405440                 push    edi
.text:00405441                 push    esi
.text:00405442                 push    ebx
.text:00405443                 sub     esp, 40h
.text:00405446                 mov     edx, ds:dword_40F17C
.text:0040544C                 mov     ebx, ds:dword_40F170
.text:00405452                 mov     esi, ds:dword_40F178
.text:00405458                 mov     edi, ds:dword_40F174
.text:0040545E                 mov     [esp+1Ch], edx
.text:00405462                 mov     ecx, ds:dword_40F180
.text:00405468                 mov     edx, ds:dword_40F190
.text:0040546E                 mov     [esp+10h], ebx
.text:00405472                 mov     ebx, ds:dword_40F184
.text:00405478                 mov     [esp+30h], edx
.text:0040547C                 movzx   edx, byte ptr [esp+54h]
.text:00405481                 mov     [esp+18h], esi
.text:00405485                 mov     esi, ds:dword_40F18C
.text:0040548B                 mov     [esp+14h], edi
.text:0040548F                 mov     edi, ds:dword_40F188
.text:00405495                 mov     [esp+20h], ecx
.text:00405499                 mov     cl, dl
.text:0040549B                 shr     cl, 5
.text:0040549E                 mov     [esp+24h], ebx
.text:004054A2                 movzx   ebx, cl
.text:004054A5                 mov     [esp+2Ch], esi
.text:004054A9                 lea     esi, [esp+10h]
.text:004054AD                 mov     [esp+28h], edi
.text:004054B1                 lea     edi, [esi+ebx*4]
.text:004054B4                 mov     ebx, edx
.text:004054B6                 mov     edx, [edi+4]
.text:004054B9                 and     ebx, 1Fh
.text:004054BC                 mov     cl, bl
.text:004054BE                 mov     eax, edx
.text:004054C0                 shr     eax, cl
.text:004054C2                 and     eax, 1
.text:004054C5                 xor     eax, 1
.text:004054C8                 shl     eax, cl
.text:004054CA                 xor     edx, eax
.text:004054CC                 mov     [edi+4], edx
.text:004054CF                 mov     edx, [esp+50h]
.text:004054D3                 mov     [esp+0Ch], esi
.text:004054D7                 mov     dword ptr [esp+8], 0FFFFFFFFh
.text:004054DF                 mov     [esp+4], edx
.text:004054E3                 mov     dword ptr [esp], 0
.text:004054EA                 call    sub_4055A0
.text:004054EF                 add     esp, 40h
.text:004054F2                 pop     ebx
.text:004054F3                 pop     esi
.text:004054F4                 pop     edi
.text:004054F5                 retn
.text:004054F5 ; ---------------------------------------------------------------------------
.text:004054F6                 align 10h
.text:00405500
.text:00405500 ; =============== S U B R O U T I N E =======================================
.text:00405500
.text:00405500
.text:00405500 ; int __cdecl sub_405500(char *)
.text:00405500 sub_405500      proc near               ; CODE XREF: sub_4041C0+64↑p
.text:00405500
.text:00405500 var_4C          = dword ptr -4Ch
.text:00405500 var_48          = dword ptr -48h
.text:00405500 var_44          = dword ptr -44h
.text:00405500 var_40          = dword ptr -40h
.text:00405500 var_3C          = dword ptr -3Ch
.text:00405500 var_38          = dword ptr -38h
.text:00405500 var_34          = dword ptr -34h
.text:00405500 var_30          = dword ptr -30h
.text:00405500 var_2C          = dword ptr -2Ch
.text:00405500 var_28          = dword ptr -28h
.text:00405500 var_24          = dword ptr -24h
.text:00405500 var_20          = dword ptr -20h
.text:00405500 var_1C          = dword ptr -1Ch
.text:00405500 arg_0           = dword ptr  4
.text:00405500
.text:00405500                 sub     esp, 4Ch
.text:00405503                 mov     ecx, ds:dword_40F170
.text:00405509                 mov     [esp+4Ch+var_44], 0FFFFFFFFh ; int
.text:00405511                 mov     edx, ds:dword_40F174
.text:00405517                 mov     [esp+4Ch+var_4C], 0 ; int
.text:0040551E                 mov     [esp+4Ch+var_3C], ecx
.text:00405522                 mov     ecx, ds:dword_40F17C
.text:00405528                 mov     [esp+4Ch+var_38], edx
.text:0040552C                 mov     edx, ds:dword_40F178
.text:00405532                 mov     [esp+4Ch+var_30], ecx
.text:00405536                 mov     ecx, ds:dword_40F180
.text:0040553C                 mov     eax, edx
.text:0040553E                 shr     eax, 1Ah
.text:00405541                 and     eax, 1
.text:00405544                 xor     eax, 1
.text:00405547                 mov     [esp+4Ch+var_2C], ecx
.text:0040554B                 shl     eax, 1Ah
.text:0040554E                 mov     ecx, ds:dword_40F184
.text:00405554                 xor     edx, eax
.text:00405556                 mov     [esp+4Ch+var_34], edx
.text:0040555A                 mov     edx, [esp+4Ch+arg_0]
.text:0040555E                 mov     [esp+4Ch+var_28], ecx
.text:00405562                 mov     ecx, ds:dword_40F188
.text:00405568                 mov     [esp+4Ch+var_48], edx ; char *
.text:0040556C                 mov     [esp+4Ch+var_24], ecx
.text:00405570                 mov     ecx, ds:dword_40F18C
.text:00405576                 mov     [esp+4Ch+var_20], ecx
.text:0040557A                 mov     ecx, ds:dword_40F190
.text:00405580                 mov     [esp+4Ch+var_1C], ecx
.text:00405584                 lea     ecx, [esp+4Ch+var_3C]
.text:00405588                 mov     [esp+4Ch+var_40], ecx ; int
.text:0040558C                 call    sub_4055A0
.text:00405591                 add     esp, 4Ch
.text:00405594                 retn
.text:00405594 sub_405500      endp
.text:00405594
.text:00405594 ; ---------------------------------------------------------------------------
.text:00405595                 align 10h
.text:004055A0
.text:004055A0 ; =============== S U B R O U T I N E =======================================
.text:004055A0
.text:004055A0
.text:004055A0 ; int __cdecl sub_4055A0(int, char *, int, int)
.text:004055A0 sub_4055A0      proc near               ; CODE XREF: .text:00405152↑p
.text:004055A0                                         ; .text:00405182↑p ...
.text:004055A0
.text:004055A0 Block           = dword ptr -2Ch
.text:004055A0 var_28          = dword ptr -28h
.text:004055A0 Str             = dword ptr -24h
.text:004055A0 var_20          = dword ptr -20h
.text:004055A0 var_1C          = dword ptr -1Ch
.text:004055A0 var_18          = dword ptr -18h
.text:004055A0 var_14          = dword ptr -14h
.text:004055A0 arg_0           = dword ptr  4
.text:004055A0 arg_4           = dword ptr  8
.text:004055A0 arg_8           = dword ptr  0Ch
.text:004055A0 arg_C           = dword ptr  10h
.text:004055A0
.text:004055A0                 push    ebp
.text:004055A1                 push    edi
.text:004055A2                 push    esi
.text:004055A3                 push    ebx
.text:004055A4                 sub     esp, 1Ch
.text:004055A7                 call    _errno
.text:004055AC                 mov     edx, [eax]
.text:004055AE                 mov     eax, [esp+2Ch+arg_0]
.text:004055B2                 mov     [esp+2Ch+var_14], edx
.text:004055B6                 test    eax, eax
.text:004055B8                 js      loc_40575A
.text:004055BE                 mov     eax, [esp+2Ch+arg_0]
.text:004055C2                 cmp     dword_40E070, eax
.text:004055C8                 ja      short loc_405640
.text:004055CA                 mov     esi, eax
.text:004055CC                 inc     esi
.text:004055CD                 cmp     esi, 1FFFFFFFh
.text:004055D3                 ja      loc_40575F
.text:004055D9                 mov     ebx, off_40E07C
.text:004055DF                 cmp     ebx, offset dword_40E074
.text:004055E5                 jz      loc_405731
.text:004055EB
.text:004055EB loc_4055EB:                             ; CODE XREF: sub_4055A0+1B5↓j
.text:004055EB                 mov     [esp+2Ch+Block], ebx ; void *
.text:004055EE                 lea     ecx, ds:0[esi*8]
.text:004055F5                 mov     ebp, esi
.text:004055F7                 mov     [esp+2Ch+var_28], ecx ; size_t
.text:004055FB                 call    sub_403950
.text:00405600                 mov     off_40E07C, eax
.text:00405605                 mov     ebx, dword_40E070
.text:0040560B                 sub     ebp, ebx
.text:0040560D                 lea     edi, [eax+ebx*8]
.text:00405610                 lea     eax, ds:0[ebp*8]
.text:00405617                 cmp     eax, 7
.text:0040561A                 jbe     short loc_405630
.text:0040561C                 test    edi, 4
.text:00405622                 jz      short loc_405630
.text:00405624                 mov     dword ptr [edi], 0
.text:0040562A                 sub     eax, 4
.text:0040562D                 add     edi, 4
.text:00405630
.text:00405630 loc_405630:                             ; CODE XREF: sub_4055A0+7A↑j
.text:00405630                                         ; sub_4055A0+82↑j
.text:00405630                 cld
.text:00405631                 mov     ecx, eax
.text:00405633                 shr     ecx, 2
.text:00405636                 xor     eax, eax
.text:00405638                 rep stosd
.text:0040563A                 mov     dword_40E070, esi
.text:00405640
.text:00405640 loc_405640:                             ; CODE XREF: sub_4055A0+28↑j
.text:00405640                 mov     esi, off_40E07C
.text:00405646                 mov     eax, [esp+2Ch+arg_0]
.text:0040564A                 mov     ebp, [esi+eax*8]
.text:0040564D                 mov     edi, [esi+eax*8+4]
.text:00405651                 mov     esi, [esp+2Ch+arg_C]
.text:00405655                 test    esi, esi
.text:00405657                 jz      loc_405727
.text:0040565D
.text:0040565D loc_40565D:                             ; CODE XREF: sub_4055A0+18C↓j
.text:0040565D                 call    _errno
.text:00405662                 mov     ebx, [eax]
.text:00405664                 mov     [esp+2Ch+var_18], esi ; int
.text:00405668                 mov     ecx, [esi]
.text:0040566A                 mov     [esp+2Ch+Block], edi ; int
.text:0040566D                 mov     edx, [esp+2Ch+arg_8]
.text:00405671                 mov     [esp+2Ch+var_28], ebp ; int
.text:00405675                 mov     [esp+2Ch+var_1C], ecx ; int
.text:00405679                 mov     ecx, [esp+2Ch+arg_4]
.text:0040567D                 mov     [esp+2Ch+var_20], edx ; int
.text:00405681                 mov     [esp+2Ch+Str], ecx ; Str
.text:00405685                 call    sub_404460
.text:0040568A                 mov     esi, eax
.text:0040568C                 call    _errno
.text:00405691                 mov     [eax], ebx
.text:00405693                 cmp     ebp, esi
.text:00405695                 ja      short loc_40570B
.text:00405697                 lea     ebp, [esi+1]
.text:0040569A                 mov     ebx, off_40E07C
.text:004056A0                 cmp     edi, offset unk_40F070
.text:004056A6                 mov     esi, [esp+2Ch+arg_0]
.text:004056AA                 mov     [ebx+esi*8], ebp
.text:004056AD                 jz      short loc_4056BD
.text:004056AF                 mov     [esp+2Ch+Block], edi ; Block
.text:004056B2                 call    free
.text:004056B7                 mov     ebx, off_40E07C
.text:004056BD
.text:004056BD loc_4056BD:                             ; CODE XREF: sub_4055A0+10D↑j
.text:004056BD                 mov     [esp+2Ch+Block], ebp ; size_t
.text:004056C0                 call    sub_4038C0
.text:004056C5                 mov     esi, [esp+2Ch+arg_C]
.text:004056C9                 mov     edi, eax
.text:004056CB                 mov     eax, [esp+2Ch+arg_0]
.text:004056CF                 test    esi, esi
.text:004056D1                 mov     [ebx+eax*8+4], edi
.text:004056D5                 jz      short loc_405720
.text:004056D7
.text:004056D7 loc_4056D7:                             ; CODE XREF: sub_4055A0+185↓j
.text:004056D7                 call    _errno
.text:004056DC                 mov     ebx, [eax]
.text:004056DE                 mov     [esp+2Ch+var_18], esi ; int
.text:004056E2                 mov     ecx, [esi]
.text:004056E4                 mov     [esp+2Ch+Block], edi ; int
.text:004056E7                 mov     edx, [esp+2Ch+arg_8]
.text:004056EB                 mov     [esp+2Ch+var_28], ebp ; int
.text:004056EF                 mov     [esp+2Ch+var_1C], ecx ; int
.text:004056F3                 mov     ecx, [esp+2Ch+arg_4]
.text:004056F7                 mov     [esp+2Ch+var_20], edx ; int
.text:004056FB                 mov     [esp+2Ch+Str], ecx ; Str
.text:004056FF                 call    sub_404460
.text:00405704                 call    _errno
.text:00405709                 mov     [eax], ebx
.text:0040570B
.text:0040570B loc_40570B:                             ; CODE XREF: sub_4055A0+F5↑j
.text:0040570B                 call    _errno
.text:00405710                 mov     ebp, [esp+2Ch+var_14]
.text:00405714                 mov     [eax], ebp
.text:00405716                 add     esp, 1Ch
.text:00405719                 mov     eax, edi
.text:0040571B                 pop     ebx
.text:0040571C                 pop     esi
.text:0040571D                 pop     edi
.text:0040571E                 pop     ebp
.text:0040571F                 retn
.text:00405720 ; ---------------------------------------------------------------------------
.text:00405720
.text:00405720 loc_405720:                             ; CODE XREF: sub_4055A0+135↑j
.text:00405720                 mov     esi, offset dword_40F170
.text:00405725                 jmp     short loc_4056D7
.text:00405727 ; ---------------------------------------------------------------------------
.text:00405727
.text:00405727 loc_405727:                             ; CODE XREF: sub_4055A0+B7↑j
.text:00405727                 mov     esi, offset dword_40F170
.text:0040572C                 jmp     loc_40565D
.text:00405731 ; ---------------------------------------------------------------------------
.text:00405731
.text:00405731 loc_405731:                             ; CODE XREF: sub_4055A0+45↑j
.text:00405731                 mov     [esp+2Ch+Block], 8 ; size_t
.text:00405738                 call    sub_4038C0
.text:0040573D                 mov     off_40E07C, eax
.text:00405742                 mov     edi, dword_40E074
.text:00405748                 mov     ebx, eax
.text:0040574A                 mov     ecx, off_40E078
.text:00405750                 mov     [eax], edi
.text:00405752                 mov     [eax+4], ecx
.text:00405755                 jmp     loc_4055EB
.text:0040575A ; ---------------------------------------------------------------------------
.text:0040575A
.text:0040575A loc_40575A:                             ; CODE XREF: sub_4055A0+18↑j
.text:0040575A                 call    abort
.text:0040575F ; ---------------------------------------------------------------------------
.text:0040575F
.text:0040575F loc_40575F:                             ; CODE XREF: sub_4055A0+33↑j
.text:0040575F                 call    sub_404390
.text:0040575F sub_4055A0      endp
.text:0040575F
.text:0040575F ; ---------------------------------------------------------------------------
.text:00405764                 align 10h
.text:00405770
.text:00405770 ; =============== S U B R O U T I N E =======================================
.text:00405770
.text:00405770
.text:00405770 sub_405770      proc near               ; CODE XREF: sub_4042A0+2E↑p
.text:00405770
.text:00405770 FileHandle      = dword ptr -1Ch
.text:00405770 Buf             = dword ptr -18h
.text:00405770 MaxCharCount    = dword ptr -14h
.text:00405770 arg_0           = dword ptr  4
.text:00405770 arg_4           = dword ptr  8
.text:00405770 arg_8           = dword ptr  0Ch
.text:00405770
.text:00405770                 push    ebp
.text:00405771                 push    edi
.text:00405772                 push    esi
.text:00405773                 push    ebx
.text:00405774                 sub     esp, 0Ch
.text:00405777                 mov     ebp, [esp+1Ch+arg_0]
.text:0040577B                 mov     edi, [esp+1Ch+arg_4]
.text:0040577F                 mov     ebx, [esp+1Ch+arg_8]
.text:00405783                 lea     esi, [esi+0]
.text:00405789                 lea     edi, [edi+0]
.text:00405790
.text:00405790 loc_405790:                             ; CODE XREF: sub_405770+3E↓j
.text:00405790                                         ; sub_405770+57↓j
.text:00405790                 mov     [esp+1Ch+MaxCharCount], ebx ; MaxCharCount
.text:00405794                 mov     [esp+1Ch+Buf], edi ; Buf
.text:00405798                 mov     [esp+1Ch+FileHandle], ebp ; FileHandle
.text:0040579B                 call    _write
.text:004057A0                 test    eax, eax
.text:004057A2                 mov     esi, eax
.text:004057A4                 jns     short loc_4057C9
.text:004057A6                 call    _errno
.text:004057AB                 cmp     dword ptr [eax], 4
.text:004057AE                 jz      short loc_405790
.text:004057B0                 call    _errno
.text:004057B5                 cmp     dword ptr [eax], 16h
.text:004057B8                 jnz     short loc_4057C9
.text:004057BA                 cmp     ebx, 7FFFE000h
.text:004057C0                 jbe     short loc_4057C9
.text:004057C2                 mov     ebx, 7FFFE000h
.text:004057C7                 jmp     short loc_405790
.text:004057C9 ; ---------------------------------------------------------------------------
.text:004057C9
.text:004057C9 loc_4057C9:                             ; CODE XREF: sub_405770+34↑j
.text:004057C9                                         ; sub_405770+48↑j ...
.text:004057C9                 add     esp, 0Ch
.text:004057CC                 mov     eax, esi
.text:004057CE                 pop     ebx
.text:004057CF                 pop     esi
.text:004057D0                 pop     edi
.text:004057D1                 pop     ebp
.text:004057D2                 retn
.text:004057D2 sub_405770      endp
.text:004057D2
.text:004057D2 ; ---------------------------------------------------------------------------
.text:004057D3                 align 10h
.text:004057E0                 jmp     ds:libintl_bindtextdomain
.text:004057E0 ; ---------------------------------------------------------------------------
.text:004057E6                 align 10h
.text:004057F0                 jmp     ds:libintl_textdomain
.text:004057F0 ; ---------------------------------------------------------------------------
.text:004057F6                 align 10h
.text:00405800                 jmp     ds:libintl_gettext
.text:00405800 ; ---------------------------------------------------------------------------
.text:00405806                 align 10h
.text:00405810 ; const char aS_1[]
.text:00405810 aS_1            db ': %s',0             ; DATA XREF: sub_405830+B8↓o
.text:00405810                                         ; sub_405934+122↓o
.text:00405815 aUnknownSystemE db 'Unknown system error',0
.text:00405815                                         ; DATA XREF: sub_405830:loc_4058FD↓o
.text:00405815                                         ; sub_405934:loc_405A6E↓o
.text:0040582A ; const char aS_2[]
.text:0040582A aS_2            db '%s: ',0             ; DATA XREF: sub_405830:loc_405904↓o
.text:0040582F                 align 10h
.text:00405830
.text:00405830 ; =============== S U B R O U T I N E =======================================
.text:00405830
.text:00405830
.text:00405830 ; int __cdecl sub_405830(int Code, int ErrorMessage, char *, char)
.text:00405830 sub_405830      proc near               ; CODE XREF: sub_4018A0+5FF↑p
.text:00405830                                         ; sub_4018A0+6B1↑p ...
.text:00405830
.text:00405830 Stream          = dword ptr -1Ch
.text:00405830 Format          = dword ptr -18h
.text:00405830 ArgList         = dword ptr -14h
.text:00405830 Code            = dword ptr  4
.text:00405830 ErrorMessage    = dword ptr  8
.text:00405830 arg_8           = dword ptr  0Ch
.text:00405830 arg_C           = byte ptr  10h
.text:00405830
.text:00405830                 push    esi
.text:00405831                 push    ebx
.text:00405832                 sub     esp, 14h
.text:00405835                 mov     edx, ds:_iob
.text:0040583B                 mov     esi, [esp+1Ch+Code]
.text:0040583F                 mov     ebx, [esp+1Ch+ErrorMessage]
.text:00405843                 add     edx, 20h ; ' '
.text:00405846                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405849                 call    fflush
.text:0040584E                 mov     eax, ds:dword_40F550
.text:00405853                 test    eax, eax
.text:00405855                 jz      loc_405904
.text:0040585B                 call    eax ; dword_40F550
.text:0040585D
.text:0040585D loc_40585D:                             ; CODE XREF: sub_405830+F7↓j
.text:0040585D                 lea     edx, [esp+1Ch+arg_C]
.text:00405861                 mov     ecx, [esp+1Ch+arg_8]
.text:00405865                 mov     [esp+1Ch+ArgList], edx ; ArgList
.text:00405869                 mov     edx, ds:_iob
.text:0040586F                 mov     [esp+1Ch+Format], ecx ; Format
.text:00405873                 add     edx, 40h ; '@'
.text:00405876                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405879                 call    vfprintf
.text:0040587E                 inc     ds:dword_40F560
.text:00405884                 test    ebx, ebx
.text:00405886                 jnz     short loc_4058D2
.text:00405888
.text:00405888 loc_405888:                             ; CODE XREF: sub_405830+CB↓j
.text:00405888                 mov     edx, ds:_iob
.text:0040588E                 lea     ecx, [edx+40h]
.text:00405891                 mov     ebx, [ecx+4]
.text:00405894                 dec     ebx
.text:00405895                 test    ebx, ebx
.text:00405897                 mov     [ecx+4], ebx
.text:0040589A                 js      short loc_4058C0
.text:0040589C                 mov     ecx, [edx+40h]
.text:0040589F                 mov     byte ptr [ecx], 0Ah
.text:004058A2                 inc     dword ptr [edx+40h]
.text:004058A5
.text:004058A5 loc_4058A5:                             ; CODE XREF: sub_405830+A0↓j
.text:004058A5                 mov     edx, ds:_iob
.text:004058AB                 add     edx, 40h ; '@'
.text:004058AE                 mov     [esp+1Ch+Stream], edx ; Stream
.text:004058B1                 call    fflush
.text:004058B6                 test    esi, esi
.text:004058B8                 jnz     short loc_40592C
.text:004058BA                 add     esp, 14h
.text:004058BD                 pop     ebx
.text:004058BE                 pop     esi
.text:004058BF                 retn
.text:004058C0 ; ---------------------------------------------------------------------------
.text:004058C0
.text:004058C0 loc_4058C0:                             ; CODE XREF: sub_405830+6A↑j
.text:004058C0                 mov     [esp+1Ch+Format], ecx ; File
.text:004058C4                 mov     [esp+1Ch+Stream], 0Ah ; Ch
.text:004058CB                 call    _flsbuf
.text:004058D0                 jmp     short loc_4058A5
.text:004058D2 ; ---------------------------------------------------------------------------
.text:004058D2
.text:004058D2 loc_4058D2:                             ; CODE XREF: sub_405830+56↑j
.text:004058D2                 mov     [esp+1Ch+Stream], ebx ; ErrorMessage
.text:004058D5                 call    strerror
.text:004058DA                 test    eax, eax
.text:004058DC                 jz      short loc_4058FD
.text:004058DE
.text:004058DE loc_4058DE:                             ; CODE XREF: sub_405830+D2↓j
.text:004058DE                 mov     [esp+1Ch+ArgList], eax
.text:004058E2                 mov     ebx, ds:_iob
.text:004058E8                 mov     [esp+1Ch+Format], offset aS_1 ; ": %s"
.text:004058F0                 add     ebx, 40h ; '@'
.text:004058F3                 mov     [esp+1Ch+Stream], ebx ; Stream
.text:004058F6                 call    fprintf
.text:004058FB                 jmp     short loc_405888
.text:004058FD ; ---------------------------------------------------------------------------
.text:004058FD
.text:004058FD loc_4058FD:                             ; CODE XREF: sub_405830+AC↑j
.text:004058FD                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405902                 jmp     short loc_4058DE
.text:00405904 ; ---------------------------------------------------------------------------
.text:00405904
.text:00405904 loc_405904:                             ; CODE XREF: sub_405830+25↑j
.text:00405904                 mov     [esp+1Ch+Format], offset aS_2 ; "%s: "
.text:0040590C                 mov     edx, ds:_iob
.text:00405912                 mov     ecx, ds:dword_40F520
.text:00405918                 add     edx, 40h ; '@'
.text:0040591B                 mov     [esp+1Ch+ArgList], ecx
.text:0040591F                 mov     [esp+1Ch+Stream], edx ; Stream
.text:00405922                 call    fprintf
.text:00405927                 jmp     loc_40585D
.text:0040592C ; ---------------------------------------------------------------------------
.text:0040592C
.text:0040592C loc_40592C:                             ; CODE XREF: sub_405830+88↑j
.text:0040592C                 mov     [esp+1Ch+Stream], esi ; Code
.text:0040592F                 call    exit
.text:0040592F sub_405830      endp
.text:0040592F
.text:00405934
.text:00405934 ; =============== S U B R O U T I N E =======================================
.text:00405934
.text:00405934
.text:00405934 ; int __cdecl sub_405934(int, int Code, int ErrorMessage, char *Str2, int, char *, char)
.text:00405934 sub_405934      proc near               ; DATA XREF: sub_405934+77↓o
.text:00405934
.text:00405934 Stream          = dword ptr -28h
.text:00405934 Format          = dword ptr -24h
.text:00405934 ArgList         = dword ptr -20h
.text:00405934 var_1C          = dword ptr -1Ch
.text:00405934 Code            = dword ptr  8
.text:00405934 ErrorMessage    = dword ptr  0Ch
.text:00405934 Str2            = dword ptr  10h
.text:00405934 arg_10          = dword ptr  14h
.text:00405934 arg_14          = dword ptr  18h
.text:00405934 arg_18          = byte ptr  1Ch
.text:00405934
.text:00405934                 and     eax, 64253A73h
.text:00405939                 cmp     ah, [eax]
.text:0040593B
.text:0040593B loc_40593B:                             ; DATA XREF: sub_405934:loc_405A75↓o
.text:0040593B                 add     ds:55003A73h, ah
.text:00405941                 push    edi
.text:00405942                 push    esi
.text:00405943                 push    ebx
.text:00405944                 sub     esp, 1Ch
.text:00405947                 mov     edx, ds:dword_40F590
.text:0040594D                 mov     ebp, [esp+28h+Code]
.text:00405951                 mov     edi, [esp+28h+ErrorMessage]
.text:00405955                 test    edx, edx
.text:00405957                 mov     ebx, [esp+28h+Str2]
.text:0040595B                 mov     esi, [esp+28h+arg_10]
.text:0040595F                 jz      short loc_405979
.text:00405961                 cmp     ds:dword_40F1B0, esi
.text:00405967                 jz      loc_405AA0
.text:0040596D
.text:0040596D loc_40596D:                             ; CODE XREF: sub_405934+18D↓j
.text:0040596D                 mov     ds:Str1, ebx
.text:00405973                 mov     ds:dword_40F1B0, esi
.text:00405979
.text:00405979 loc_405979:                             ; CODE XREF: sub_405934+2B↑j
.text:00405979                 mov     edx, ds:_iob
.text:0040597F                 add     edx, 20h ; ' '
.text:00405982                 mov     [esp+28h+Stream], edx ; Stream
.text:00405985                 call    fflush
.text:0040598A                 mov     eax, ds:dword_40F550
.text:0040598F                 test    eax, eax
.text:00405991                 jz      loc_405A75
.text:00405997                 call    eax ; dword_40F550
.text:00405999
.text:00405999 loc_405999:                             ; CODE XREF: sub_405934+164↓j
.text:00405999                 test    ebx, ebx
.text:0040599B                 jz      short loc_4059BE
.text:0040599D                 mov     [esp+28h+ArgList], ebx
.text:004059A1                 mov     ebx, ds:_iob
.text:004059A7                 mov     [esp+28h+var_1C], esi
.text:004059AB                 mov     [esp+28h+Format], offset sub_405934 ; Format
.text:004059B3                 add     ebx, 40h ; '@'
.text:004059B6                 mov     [esp+28h+Stream], ebx ; Stream
.text:004059B9                 call    fprintf
.text:004059BE
.text:004059BE loc_4059BE:                             ; CODE XREF: sub_405934+67↑j
.text:004059BE                 mov     esi, ds:_iob
.text:004059C4                 lea     edx, [esp+28h+arg_18]
.text:004059C8                 mov     ecx, [esp+28h+arg_14]
.text:004059CC                 mov     [esp+28h+ArgList], edx ; ArgList
.text:004059D0                 add     esi, 40h ; '@'
.text:004059D3                 mov     [esp+28h+Format], ecx ; Format
.text:004059D7                 mov     [esp+28h+Stream], esi ; Stream
.text:004059DA                 call    vfprintf
.text:004059DF                 inc     ds:dword_40F560
.text:004059E5                 test    edi, edi
.text:004059E7                 jnz     short loc_405A40
.text:004059E9
.text:004059E9 loc_4059E9:                             ; CODE XREF: sub_405934+135↓j
.text:004059E9                 mov     edx, ds:_iob
.text:004059EF                 lea     ecx, [edx+40h]
.text:004059F2                 mov     ebx, [ecx+4]
.text:004059F5                 dec     ebx
.text:004059F6                 test    ebx, ebx
.text:004059F8                 mov     [ecx+4], ebx
.text:004059FB                 js      short loc_405A27
.text:004059FD                 mov     esi, [edx+40h]
.text:00405A00                 mov     byte ptr [esi], 0Ah
.text:00405A03                 inc     dword ptr [edx+40h]
.text:00405A06
.text:00405A06 loc_405A06:                             ; CODE XREF: sub_405934+103↓j
.text:00405A06                 mov     ecx, ds:_iob
.text:00405A0C                 add     ecx, 40h ; '@'
.text:00405A0F                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405A12                 call    fflush
.text:00405A17                 test    ebp, ebp
.text:00405A19                 jnz     loc_405AC6
.text:00405A1F
.text:00405A1F loc_405A1F:                             ; CODE XREF: sub_405934+173↓j
.text:00405A1F                                         ; sub_405934+187↓j
.text:00405A1F                 add     esp, 1Ch
.text:00405A22                 pop     ebx
.text:00405A23                 pop     esi
.text:00405A24                 pop     edi
.text:00405A25                 pop     ebp
.text:00405A26                 retn
.text:00405A27 ; ---------------------------------------------------------------------------
.text:00405A27
.text:00405A27 loc_405A27:                             ; CODE XREF: sub_405934+C7↑j
.text:00405A27                 mov     [esp+28h+Format], ecx ; File
.text:00405A2B                 mov     [esp+28h+Stream], 0Ah ; Ch
.text:00405A32                 call    _flsbuf
.text:00405A37                 jmp     short loc_405A06
.text:00405A37 ; ---------------------------------------------------------------------------
.text:00405A39                 align 10h
.text:00405A40
.text:00405A40 loc_405A40:                             ; CODE XREF: sub_405934+B3↑j
.text:00405A40                 mov     [esp+28h+Stream], edi ; ErrorMessage
.text:00405A43                 call    strerror
.text:00405A48                 test    eax, eax
.text:00405A4A                 jz      short loc_405A6E
.text:00405A4C
.text:00405A4C loc_405A4C:                             ; CODE XREF: sub_405934+13F↓j
.text:00405A4C                 mov     [esp+28h+ArgList], eax
.text:00405A50                 mov     edi, ds:_iob
.text:00405A56                 mov     [esp+28h+Format], offset aS_1 ; ": %s"
.text:00405A5E                 add     edi, 40h ; '@'
.text:00405A61                 mov     [esp+28h+Stream], edi ; Stream
.text:00405A64                 call    fprintf
.text:00405A69                 jmp     loc_4059E9
.text:00405A6E ; ---------------------------------------------------------------------------
.text:00405A6E
.text:00405A6E loc_405A6E:                             ; CODE XREF: sub_405934+116↑j
.text:00405A6E                 mov     eax, offset aUnknownSystemE ; "Unknown system error"
.text:00405A73                 jmp     short loc_405A4C
.text:00405A75 ; ---------------------------------------------------------------------------
.text:00405A75
.text:00405A75 loc_405A75:                             ; CODE XREF: sub_405934+5D↑j
.text:00405A75                 mov     [esp+28h+Format], (offset loc_40593B+1) ; Format
.text:00405A7D                 mov     ecx, ds:_iob
.text:00405A83                 mov     edx, ds:dword_40F520
.text:00405A89                 add     ecx, 40h ; '@'
.text:00405A8C                 mov     [esp+28h+ArgList], edx
.text:00405A90                 mov     [esp+28h+Stream], ecx ; Stream
.text:00405A93                 call    fprintf
.text:00405A98                 jmp     loc_405999
.text:00405A98 ; ---------------------------------------------------------------------------
.text:00405A9D                 align 10h
.text:00405AA0
.text:00405AA0 loc_405AA0:                             ; CODE XREF: sub_405934+33↑j
.text:00405AA0                 mov     eax, ds:Str1
.text:00405AA5                 cmp     ebx, eax
.text:00405AA7                 jz      loc_405A1F
.text:00405AAD                 mov     [esp+28h+Format], ebx ; Str2
.text:00405AB1                 mov     [esp+28h+Stream], eax ; Str1
.text:00405AB4                 call    strcmp
.text:00405AB9                 test    eax, eax
.text:00405ABB                 jz      loc_405A1F
.text:00405AC1                 jmp     loc_40596D
.text:00405AC6 ; ---------------------------------------------------------------------------
.text:00405AC6
.text:00405AC6 loc_405AC6:                             ; CODE XREF: sub_405934+E5↑j
.text:00405AC6                 mov     [esp+28h+Stream], ebp ; Code
.text:00405AC9                 call    exit
.text:00405AC9 sub_405934      endp ; sp-analysis failed
.text:00405AC9
.text:00405AC9 ; ---------------------------------------------------------------------------
.text:00405ACE                 align 10h
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0
.text:00405AD0 ; int __cdecl sub_405AD0(char *, int)
.text:00405AD0 sub_405AD0      proc near               ; CODE XREF: sub_4018A0+3AF↑p
.text:00405AD0                                         ; sub_4018A0+4AB↑p
.text:00405AD0
.text:00405AD0 hNamedPipe      = dword ptr -0Ch
.text:00405AD0 Str             = dword ptr -8
.text:00405AD0 var_4           = dword ptr -4
.text:00405AD0 arg_0           = dword ptr  4
.text:00405AD0 arg_4           = dword ptr  8
.text:00405AD0
.text:00405AD0                 sub     esp, 0Ch
.text:00405AD3                 mov     edx, [esp+0Ch+arg_4]
.text:00405AD7                 mov     [esp+0Ch+hNamedPipe], 0 ; hNamedPipe
.text:00405ADE                 mov     [esp+0Ch+var_4], edx ; int
.text:00405AE2                 mov     edx, [esp+0Ch+arg_0]
.text:00405AE6                 mov     [esp+0Ch+Str], edx ; Str
.text:00405AEA                 call    sub_405D40
.text:00405AEF                 add     esp, 0Ch
.text:00405AF2                 retn
.text:00405AF2 sub_405AD0      endp
.text:00405AF2
.text:00405AF2 ; ---------------------------------------------------------------------------
.text:00405AF3 aInoI64x        db 'ino:       %#I64X',0Ah,0
.text:00405AF3                                         ; DATA XREF: .text:00405BDE↓o
.text:00405B06 aModeO          db 'mode:      %#o',0Ah,0
.text:00405B06                                         ; DATA XREF: .text:00405BF4↓o
.text:00405B16 aUidLd          db 'uid:       %ld',0Ah,0
.text:00405B16                                         ; DATA XREF: .text:00405C07↓o
.text:00405B26 aGidLd          db 'gid:       %ld',0Ah,0
.text:00405B26                                         ; DATA XREF: .text:00405C1A↓o
.text:00405B36 aDevLu          db 'dev:       %lu',0Ah,0
.text:00405B36                                         ; DATA XREF: .text:00405C2D↓o
.text:00405B46 aNlinkLd        db 'nlink:     %ld',0Ah,0
.text:00405B46                                         ; DATA XREF: .text:00405C40↓o
.text:00405B56 aSizeI64d       db 'size:      %I64d',0Ah,0
.text:00405B56                                         ; DATA XREF: .text:00405C56↓o
.text:00405B68 aBlocksizeD     db 'blocksize: %d',0Ah,0
.text:00405B68                                         ; DATA XREF: .text:00405C6D↓o
.text:00405B77 aBlocksI64d     db 'blocks:    %I64d',0Ah,0
.text:00405B77                                         ; DATA XREF: .text:00405C83↓o
.text:00405B89 aAtimeLdS       db 'atime:     %ld: %s',0
.text:00405B89                                         ; DATA XREF: .text:00405CA9↓o
.text:00405B9C aMtimeLdS       db 'mtime:     %ld: %s',0
.text:00405B9C                                         ; DATA XREF: .text:00405CCB↓o
.text:00405BAF aCtimeLdS       db 'ctime:     %ld: %s',0Ah,0
.text:00405BAF                                         ; DATA XREF: .text:00405CED↓o
.text:00405BC3                 align 10h
.text:00405BD0                 push    ebx
.text:00405BD1                 sub     esp, 18h
.text:00405BD4                 mov     ebx, [esp+20h]
.text:00405BD8                 mov     edx, [ebx+8]
.text:00405BDB                 mov     ecx, [ebx+0Ch]
.text:00405BDE                 mov     dword ptr [esp], offset aInoI64x ; "ino:       %#I64X\n"
.text:00405BE5                 mov     [esp+4], edx
.text:00405BE9                 mov     [esp+8], ecx
.text:00405BED                 call    printf
.text:00405BF2                 mov     ecx, [ebx]
.text:00405BF4                 mov     dword ptr [esp], offset aModeO ; "mode:      %#o\n"
.text:00405BFB                 mov     [esp+4], ecx
.text:00405BFF                 call    printf
.text:00405C04                 mov     edx, [ebx+1Ch]
.text:00405C07                 mov     dword ptr [esp], offset aUidLd ; "uid:       %ld\n"
.text:00405C0E                 mov     [esp+4], edx
.text:00405C12                 call    printf
.text:00405C17                 mov     ecx, [ebx+20h]
.text:00405C1A                 mov     dword ptr [esp], offset aGidLd ; "gid:       %ld\n"
.text:00405C21                 mov     [esp+4], ecx
.text:00405C25                 call    printf
.text:00405C2A                 mov     edx, [ebx+10h]
.text:00405C2D                 mov     dword ptr [esp], offset aDevLu ; "dev:       %lu\n"
.text:00405C34                 mov     [esp+4], edx
.text:00405C38                 call    printf
.text:00405C3D                 mov     ecx, [ebx+18h]
.text:00405C40                 mov     dword ptr [esp], offset aNlinkLd ; "nlink:     %ld\n"
.text:00405C47                 mov     [esp+4], ecx
.text:00405C4B                 call    printf
.text:00405C50                 mov     edx, [ebx+30h]
.text:00405C53                 mov     ecx, [ebx+34h]
.text:00405C56                 mov     dword ptr [esp], offset aSizeI64d ; "size:      %I64d\n"
.text:00405C5D                 mov     [esp+4], edx
.text:00405C61                 mov     [esp+8], ecx
.text:00405C65                 call    printf
.text:00405C6A                 mov     ecx, [ebx+50h]
.text:00405C6D                 mov     dword ptr [esp], offset aBlocksizeD ; "blocksize: %d\n"
.text:00405C74                 mov     [esp+4], ecx
.text:00405C78                 call    printf
.text:00405C7D                 mov     ecx, [ebx+5Ch]
.text:00405C80                 mov     edx, [ebx+58h]
.text:00405C83                 mov     dword ptr [esp], offset aBlocksI64d ; "blocks:    %I64d\n"
.text:00405C8A                 mov     [esp+8], ecx
.text:00405C8E                 mov     [esp+4], edx
.text:00405C92                 call    printf
.text:00405C97                 lea     edx, [ebx+38h]
.text:00405C9A                 mov     [esp], edx
.text:00405C9D                 call    ctime
.text:00405CA2                 mov     [esp+8], eax
.text:00405CA6                 mov     ecx, [ebx+38h]
.text:00405CA9                 mov     dword ptr [esp], offset aAtimeLdS ; "atime:     %ld: %s"
.text:00405CB0                 mov     [esp+4], ecx
.text:00405CB4                 call    printf
.text:00405CB9                 lea     edx, [ebx+40h]
.text:00405CBC                 mov     [esp], edx
.text:00405CBF                 call    ctime
.text:00405CC4                 mov     [esp+8], eax
.text:00405CC8                 mov     ecx, [ebx+40h]
.text:00405CCB                 mov     dword ptr [esp], offset aMtimeLdS ; "mtime:     %ld: %s"
.text:00405CD2                 mov     [esp+4], ecx
.text:00405CD6                 call    printf
.text:00405CDB                 lea     edx, [ebx+48h]
.text:00405CDE                 mov     [esp], edx
.text:00405CE1                 call    ctime
.text:00405CE6                 mov     [esp+8], eax
.text:00405CEA                 mov     edx, [ebx+48h]
.text:00405CED                 mov     dword ptr [esp], offset aCtimeLdS ; "ctime:     %ld: %s\n"
.text:00405CF4                 mov     [esp+4], edx
.text:00405CF8                 call    printf
.text:00405CFD                 add     esp, 18h
.text:00405D00                 xor     eax, eax
.text:00405D02                 pop     ebx
.text:00405D03                 retn
.text:00405D03 ; ---------------------------------------------------------------------------
.text:00405D04                 align 10h
.text:00405D10 ; const char aFxstat64BadFil[]
.text:00405D10 aFxstat64BadFil db '__fxstat64: bad file descriptor %d',0Ah,0
.text:00405D10                                         ; DATA XREF: sub_405D40+7B↓o
.text:00405D34                 align 10h
.text:00405D40
.text:00405D40 ; =============== S U B R O U T I N E =======================================
.text:00405D40
.text:00405D40
.text:00405D40 ; int __cdecl sub_405D40(HANDLE hNamedPipe, char *Str, int)
.text:00405D40 sub_405D40      proc near               ; CODE XREF: sub_405AD0+1A↑p
.text:00405D40                                         ; .text:004084D9↓p
.text:00405D40
.text:00405D40 hFindFile       = dword ptr -1A0h
.text:00405D40 var_19C         = dword ptr -19Ch
.text:00405D40 hLibModule      = dword ptr -198h
.text:00405D40 lpFindFileData  = dword ptr -194h
.text:00405D40 lpModuleName    = dword ptr -18Ch
.text:00405D40 lpProcName      = dword ptr -188h
.text:00405D40 var_184         = dword ptr -184h
.text:00405D40 var_180         = dword ptr -180h
.text:00405D40 var_17C         = dword ptr -17Ch
.text:00405D40 var_178         = dword ptr -178h
.text:00405D40 var_174         = dword ptr -174h
.text:00405D40 var_170         = dword ptr -170h
.text:00405D40 var_16C         = dword ptr -16Ch
.text:00405D40 var_168         = dword ptr -168h
.text:00405D40 var_164         = dword ptr -164h
.text:00405D40 hModule         = dword ptr -160h
.text:00405D40 FindFileData    = _WIN32_FIND_DATAA ptr -15Ch
.text:00405D40 FileHandle      = dword ptr -1Ch
.text:00405D40 var_18          = dword ptr -18h
.text:00405D40 var_10          = dword ptr -10h
.text:00405D40 var_C           = dword ptr -0Ch
.text:00405D40 lpFileName      = dword ptr -8
.text:00405D40 var_4           = dword ptr -4
.text:00405D40 hNamedPipe      = dword ptr  4
.text:00405D40 Str             = dword ptr  8
.text:00405D40 arg_8           = dword ptr  0Ch
.text:00405D40
.text:00405D40                 sub     esp, 1Ch
.text:00405D43                 mov     edx, [esp+1Ch+Str]
.text:00405D47                 mov     [esp+1Ch+var_C], ebx
.text:00405D4B                 mov     ebx, [esp+1Ch+hNamedPipe]
.text:00405D4F                 mov     [esp+1Ch+lpFileName], esi
.text:00405D53                 mov     esi, [esp+1Ch+arg_8]
.text:00405D57                 test    ebx, ebx
.text:00405D59                 mov     [esp+1Ch+var_4], edi
.text:00405D5D                 jnz     short loc_405D97
.text:00405D5F                 test    edx, edx
.text:00405D61                 js      short loc_405DB7
.text:00405D63                 test    esi, esi
.text:00405D65                 jz      short loc_405D97
.text:00405D67                 cld
.text:00405D68                 mov     eax, ebx
.text:00405D6A                 mov     edi, esi
.text:00405D6C                 mov     ecx, 18h
.text:00405D71                 rep stosd
.text:00405D73                 mov     [esp+1Ch+Str], esi
.text:00405D77                 mov     [esp+1Ch+FileHandle], edx ; FileHandle
.text:00405D7A                 call    _get_osfhandle
.text:00405D7F                 mov     [esp+1Ch+hNamedPipe], eax
.text:00405D83                 mov     ebx, [esp+1Ch+var_C]
.text:00405D87                 mov     esi, [esp+1Ch+lpFileName]
.text:00405D8B                 mov     edi, [esp+1Ch+var_4]
.text:00405D8F                 add     esp, 1Ch
.text:00405D92                 jmp     loc_406120
.text:00405D97 ; ---------------------------------------------------------------------------
.text:00405D97
.text:00405D97 loc_405D97:                             ; CODE XREF: sub_405D40+1D↑j
.text:00405D97                                         ; sub_405D40+25↑j
.text:00405D97                 call    _errno
.text:00405D9C                 mov     dword ptr [eax], 16h
.text:00405DA2
.text:00405DA2 loc_405DA2:                             ; CODE XREF: sub_405D40+92↓j
.text:00405DA2                 mov     ebx, [esp+1Ch+var_C]
.text:00405DA6                 mov     eax, 0FFFFFFFFh
.text:00405DAB                 mov     esi, [esp+1Ch+lpFileName]
.text:00405DAF                 mov     edi, [esp+1Ch+var_4]
.text:00405DB3                 add     esp, 1Ch
.text:00405DB6                 retn
.text:00405DB7 ; ---------------------------------------------------------------------------
.text:00405DB7
.text:00405DB7 loc_405DB7:                             ; CODE XREF: sub_405D40+21↑j
.text:00405DB7                 mov     [esp+1Ch+var_18], edx
.text:00405DBB                 mov     [esp+1Ch+FileHandle], offset aFxstat64BadFil ; "__fxstat64: bad file descriptor %d\n"
.text:00405DC2                 call    printf
.text:00405DC7                 call    _errno
.text:00405DCC                 mov     dword ptr [eax], 9
.text:00405DD2                 jmp     short loc_405DA2
.text:00405DD2 ; ---------------------------------------------------------------------------
.text:00405DD4                 db 1Ch dup(90h)
.text:00405DF0 aComExeBatCmd   db '.com;.exe;.bat;.cmd',0
.text:00405DF0                                         ; DATA XREF: .data:off_40E084↓o
.text:00405E04 ; const CHAR ModuleName[]
.text:00405E04 ModuleName      db 'KERNEL32.DLL',0     ; DATA XREF: sub_405D40+101↓o
.text:00405E04                                         ; sub_405D40+26C↓o ...
.text:00405E11 ; const CHAR ProcName[]
.text:00405E11 ProcName        db 'GetFileAttributesExA',0
.text:00405E11                                         ; DATA XREF: sub_405D40+118↓o
.text:00405E26                 align 10h
.text:00405E30
.text:00405E30 loc_405E30:                             ; CODE XREF: .text:00406FD4↓p
.text:00405E30                                         ; sub_4073D0+37↓p
.text:00405E30                 push    ebp
.text:00405E31                 push    edi
.text:00405E32                 push    esi
.text:00405E33                 push    ebx
.text:00405E34                 sub     esp, 17Ch
.text:00405E3A                 mov     ebx, [esp+18Ch+Str]
.text:00405E41                 mov     [esp+18Ch+lpModuleName], offset ModuleName ; "KERNEL32.DLL"
.text:00405E48                 call    GetModuleHandleA
.text:00405E4D                 sub     esp, 4
.text:00405E50                 mov     [esp+18Ch+hModule], eax
.text:00405E54                 mov     edx, [esp+18Ch+hModule]
.text:00405E58                 mov     [esp+18Ch+lpProcName], offset ProcName ; "GetFileAttributesExA"
.text:00405E60                 mov     [esp+18Ch+lpModuleName], edx ; hModule
.text:00405E63                 call    GetProcAddress
.text:00405E68                 sub     esp, 8
.text:00405E6B                 mov     ebp, eax
.text:00405E6D                 mov     eax, [esp+18Ch+hNamedPipe]
.text:00405E74                 mov     [esp+18Ch+lpModuleName], eax ; lpFileName
.text:00405E77                 call    GetFileAttributesA
.text:00405E7C                 sub     esp, 4
.text:00405E7F                 mov     [esp+18Ch+var_164], eax
.text:00405E83                 xor     eax, eax
.text:00405E85                 cmp     [esp+18Ch+var_164], 0FFFFFFFFh
.text:00405E8A                 jz      short loc_405EE1
.text:00405E8C                 cld
.text:00405E8D                 mov     ecx, 50h ; 'P'
.text:00405E92                 lea     esi, [esp+18Ch+FindFileData]
.text:00405E96                 mov     edi, esi
.text:00405E98                 test    ebp, ebp
.text:00405E9A                 rep stosd
.text:00405E9C                 mov     [esp+18Ch+var_170], 0
.text:00405EA4                 jz      short loc_405EC5
.text:00405EA6                 mov     [esp+18Ch+var_184], ebx
.text:00405EAA                 mov     ecx, [esp+18Ch+hNamedPipe]
.text:00405EB1                 mov     [esp+18Ch+lpProcName], 0
.text:00405EB9                 mov     [esp+18Ch+lpModuleName], ecx
.text:00405EBC                 call    ebp
.text:00405EBE                 sub     esp, 0Ch
.text:00405EC1                 mov     [esp+198h+var_17C], eax
.text:00405EC5
.text:00405EC5 loc_405EC5:                             ; CODE XREF: sub_405D40+164↑j
.text:00405EC5                 mov     eax, [esp+198h+var_17C]
.text:00405EC9                 test    eax, eax
.text:00405ECB                 jz      short loc_405EF0
.text:00405ECD
.text:00405ECD loc_405ECD:                             ; CODE XREF: sub_405D40+221↓j
.text:00405ECD                                         ; sub_405D40+23B↓j
.text:00405ECD                 mov     ebx, [esp+198h+var_16C]
.text:00405ED1                 mov     [esp+198h+hLibModule], ebx ; hLibModule
.text:00405ED4                 call    FreeLibrary
.text:00405ED9                 sub     esp, 4
.text:00405EDC                 mov     eax, 1
.text:00405EE1
.text:00405EE1 loc_405EE1:                             ; CODE XREF: sub_405D40+14A↑j
.text:00405EE1                 add     esp, 17Ch
.text:00405EE7                 pop     ebx
.text:00405EE8                 pop     esi
.text:00405EE9                 pop     edi
.text:00405EEA                 pop     ebp
.text:00405EEB                 retn
.text:00405EEB ; ---------------------------------------------------------------------------
.text:00405EEC                 align 10h
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: sub_405D40+18B↑j
.text:00405EF0                 mov     [esp+198h+lpFindFileData], esi ; lpFindFileData
.text:00405EF4                 mov     edx, [esp+198h+lpFileName]
.text:00405EFB                 mov     [esp+198h+hLibModule], edx ; lpFileName
.text:00405EFE                 call    FindFirstFileA
.text:00405F03                 sub     esp, 8
.text:00405F06                 xor     ecx, ecx
.text:00405F08                 cmp     eax, 0FFFFFFFFh
.text:00405F0B                 setnz   cl
.text:00405F0E                 mov     edi, [esp+198h+var_168]
.text:00405F12                 mov     [ebx], edi
.text:00405F14                 mov     esi, [esp+198h+hModule]
.text:00405F18                 mov     [esp+198h+var_17C], ecx
.text:00405F1C                 mov     ecx, [esp+198h+var_164]
.text:00405F20                 mov     [ebx+8], esi
.text:00405F23                 mov     [ebx+4], ecx
.text:00405F26                 mov     ebp, [esp+198h+FindFileData.dwFileAttributes]
.text:00405F2A                 mov     edi, [esp+198h+FindFileData.ftCreationTime.dwLowDateTime]
.text:00405F2E                 mov     [ebx+0Ch], ebp
.text:00405F31                 mov     [ebx+10h], edi
.text:00405F34                 mov     esi, [esp+198h+FindFileData.ftLastAccessTime.dwLowDateTime]
.text:00405F38                 mov     ecx, [esp+198h+FindFileData.ftCreationTime.dwHighDateTime]
.text:00405F3C                 mov     [ebx+18h], esi
.text:00405F3F                 mov     [ebx+14h], ecx
.text:00405F42                 mov     ebp, [esp+198h+FindFileData.ftLastAccessTime.dwHighDateTime]
.text:00405F46                 mov     [ebx+1Ch], ebp
.text:00405F49                 mov     edi, [esp+198h+FindFileData.ftLastWriteTime.dwLowDateTime]
.text:00405F4D                 mov     [ebx+20h], edi
.text:00405F50                 mov     [esp+198h+hLibModule], eax ; hFindFile
.text:00405F53                 call    FindClose
.text:00405F58                 sub     esp, 4
.text:00405F5B                 mov     esi, [esp+198h+var_17C]
.text:00405F5F                 test    esi, esi
.text:00405F61                 jnz     loc_405ECD
.text:00405F67                 cld
.text:00405F68                 mov     eax, [esp+198h+var_17C]
.text:00405F6C                 mov     ecx, 9
.text:00405F71                 mov     edi, ebx
.text:00405F73                 rep stosd
.text:00405F75                 mov     ebp, [esp+198h+var_170]
.text:00405F79                 mov     [ebx], ebp
.text:00405F7B                 jmp     loc_405ECD
.text:00405F7B ; ---------------------------------------------------------------------------
.text:00405F80 ; const CHAR aFindfirstfilee[]
.text:00405F80 aFindfirstfilee db 'FindFirstFileExA',0 ; DATA XREF: sub_405D40+283↓o
.text:00405F91 ; ---------------------------------------------------------------------------
.text:00405F91
.text:00405F91 loc_405F91:                             ; DATA XREF: sub_405D40:loc_40602D↓o
.text:00405F91                 pop     esp
.text:00405F92                 sub     al, [eax]
.text:00405F94                 lea     esi, [esi+0]
.text:00405F9A                 lea     edi, [edi+0]
.text:00405FA0
.text:00405FA0 loc_405FA0:                             ; CODE XREF: .text:004070D3↓p
.text:00405FA0                                         ; sub_4073D0+3FA↓p ...
.text:00405FA0                 push    ebp
.text:00405FA1                 push    edi
.text:00405FA2                 xor     edi, edi
.text:00405FA4                 push    esi
.text:00405FA5                 push    ebx
.text:00405FA6                 sub     esp, 17Ch
.text:00405FAC                 mov     [esp+188h+lpProcName], offset ModuleName ; "KERNEL32.DLL"
.text:00405FB3                 call    LoadLibraryA
.text:00405FB8                 sub     esp, 4
.text:00405FBB                 mov     [esp+188h+FindFileData.dwFileAttributes], eax
.text:00405FBF                 mov     ecx, [esp+188h+FindFileData.dwFileAttributes]
.text:00405FC3                 mov     [esp+188h+var_184], offset aFindfirstfilee ; "FindFirstFileExA"
.text:00405FCB                 mov     [esp+188h+lpProcName], ecx ; hModule
.text:00405FCE                 call    GetProcAddress
.text:00405FD3                 sub     esp, 8
.text:00405FD6                 mov     edx, [esp+188h+Str]
.text:00405FDD                 mov     [esp+188h+hModule], eax
.text:00405FE1                 mov     [esp+188h+lpProcName], edx ; Str
.text:00405FE4                 call    strlen
.text:00405FE9                 lea     edx, [eax+5]
.text:00405FEC                 mov     ebx, eax
.text:00405FEE                 mov     [esp+188h+lpProcName], edx ; Size
.text:00405FF1                 call    malloc
.text:00405FF6                 mov     esi, eax
.text:00405FF8                 test    esi, esi
.text:00405FFA                 mov     eax, 1
.text:00405FFF                 jz      loc_4060DD
.text:00406005                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00406008                 mov     ebp, [esp+188h+Str]
.text:0040600F                 mov     [esp+188h+var_184], ebp ; Source
.text:00406013                 call    strcpy
.text:00406018                 movzx   eax, byte ptr [ebx+esi-1]
.text:0040601D                 cmp     al, 2Fh ; '/'
.text:0040601F                 jz      loc_40610B
.text:00406025                 cmp     al, 5Ch ; '\'
.text:00406027                 jz      loc_40610B
.text:0040602D
.text:0040602D loc_40602D:                             ; CODE XREF: sub_405D40+3D0↓j
.text:0040602D                 mov     [esp+188h+var_184], offset loc_405F91 ; Source
.text:00406035                 mov     [esp+188h+lpProcName], esi ; Destination
.text:00406038                 call    strcat
.text:0040603D                 mov     eax, [esp+188h+hModule]
.text:00406041                 test    eax, eax
.text:00406043                 jz      loc_406105
.text:00406049                 mov     [esp+188h+var_174], 0
.text:00406051                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00406055                 mov     [esp+188h+var_178], 0
.text:0040605D                 mov     [esp+188h+var_17C], 1
.text:00406065                 mov     [esp+188h+var_180], ebp
.text:00406069                 mov     [esp+188h+var_184], 0
.text:00406071                 mov     [esp+188h+lpProcName], esi
.text:00406074                 call    [esp+188h+hModule]
.text:00406078                 sub     esp, 18h
.text:0040607B                 mov     ebx, eax
.text:0040607D                 cmp     eax, 0FFFFFFFFh
.text:00406080                 jz      short loc_4060E8
.text:00406082                 lea     esi, [esi+0]
.text:00406089                 lea     edi, [edi+0]
.text:00406090
.text:00406090 loc_406090:                             ; CODE XREF: sub_405D40+369↓j
.text:00406090                                         ; sub_405D40+3C1↓j
.text:00406090                 test    byte ptr [esp+1A0h+var_170], 10h
.text:00406095                 jz      short loc_406098
.text:00406097                 inc     edi
.text:00406098
.text:00406098 loc_406098:                             ; CODE XREF: sub_405D40+355↑j
.text:00406098                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:0040609C                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:0040609F                 call    FindNextFileA
.text:004060A4                 sub     esp, 8
.text:004060A7                 test    eax, eax
.text:004060A9                 jnz     short loc_406090
.text:004060AB                 mov     [esp+1A0h+hFindFile], ebx ; hFindFile
.text:004060AE                 call    FindClose
.text:004060B3                 sub     esp, 4
.text:004060B6                 mov     esi, [esp+1A0h+var_174]
.text:004060BA                 mov     [esp+1A0h+hFindFile], esi ; hLibModule
.text:004060BD                 call    FreeLibrary
.text:004060C2                 sub     esp, 4
.text:004060C5                 mov     ebx, [esp+1A0h+var_10]
.text:004060CC                 mov     [esp+1A0h+hFindFile], ebx ; LPCSTR
.text:004060CF                 call    sub_408570
.text:004060D4                 test    eax, eax
.text:004060D6                 jz      short loc_4060DB
.text:004060D8                 add     edi, 2
.text:004060DB
.text:004060DB loc_4060DB:                             ; CODE XREF: sub_405D40+396↑j
.text:004060DB                 mov     eax, edi
.text:004060DD
.text:004060DD loc_4060DD:                             ; CODE XREF: sub_405D40+2BF↑j
.text:004060DD                                         ; sub_405D40+3C3↓j
.text:004060DD                 add     esp, 17Ch
.text:004060E3                 pop     ebx
.text:004060E4                 pop     esi
.text:004060E5                 pop     edi
.text:004060E6                 pop     ebp
.text:004060E7                 retn
.text:004060E8 ; ---------------------------------------------------------------------------
.text:004060E8
.text:004060E8 loc_4060E8:                             ; CODE XREF: sub_405D40+340↑j
.text:004060E8                                         ; sub_405D40+3C9↓j
.text:004060E8                 mov     [esp+1A0h+var_19C], ebp ; lpFindFileData
.text:004060EC                 mov     [esp+1A0h+hFindFile], esi ; lpFileName
.text:004060EF                 call    FindFirstFileA
.text:004060F4                 mov     ebx, eax
.text:004060F6                 sub     esp, 8
.text:004060F9                 cmp     ebx, 0FFFFFFFFh
.text:004060FC                 mov     eax, 2
.text:00406101                 jnz     short loc_406090
.text:00406103                 jmp     short loc_4060DD
.text:00406105 ; ---------------------------------------------------------------------------
.text:00406105
.text:00406105 loc_406105:                             ; CODE XREF: sub_405D40+303↑j
.text:00406105                 lea     ebp, [esp+188h+FindFileData.ftCreationTime]
.text:00406109                 jmp     short loc_4060E8
.text:0040610B ; ---------------------------------------------------------------------------
.text:0040610B
.text:0040610B loc_40610B:                             ; CODE XREF: sub_405D40+2DF↑j
.text:0040610B                                         ; sub_405D40+2E7↑j
.text:0040610B                 mov     byte ptr [ebx+esi-1], 0
.text:00406110                 jmp     loc_40602D
.text:00406110 ; ---------------------------------------------------------------------------
.text:00406115                 align 10h
.text:00406120
.text:00406120 loc_406120:                             ; CODE XREF: sub_405D40+52↑j
.text:00406120                                         ; sub_40B6A0-3E09↓p
.text:00406120                 push    ebp
.text:00406121                 mov     eax, 0FFFFFFFFh
.text:00406126                 push    edi
.text:00406127                 push    esi
.text:00406128                 push    ebx
.text:00406129                 sub     esp, 0DCh
.text:0040612F                 mov     esi, [esp+0ECh+hNamedPipe]
.text:00406136                 mov     ebp, [esp+0ECh+Str]
.text:0040613D                 cmp     esi, 0FFFFFFFFh
.text:00406140                 jz      loc_4064C1
.text:00406146                 cld
.text:00406147                 xor     eax, eax
.text:00406149                 lea     ebx, [esp+0ECh+FindFileData.cFileName+0D4h]
.text:00406150                 mov     ecx, 0Dh
.text:00406155                 mov     edi, ebx
.text:00406157                 rep stosd
.text:00406159                 mov     dword ptr [ebp+18h], 1
.text:00406160                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00406163                 call    GetFileType
.text:00406168                 sub     esp, 4
.text:0040616B                 xor     edx, edx
.text:0040616D                 cmp     eax, 2
.text:00406170                 jz      loc_4065A0
.text:00406176                 cmp     eax, 3
.text:00406179                 jz      loc_406590
.text:0040617F
.text:0040617F loc_40617F:                             ; CODE XREF: sub_405D40+855↓j
.text:0040617F                                         ; sub_405D40+865↓j
.text:0040617F                 or      [ebp+0], edx
.text:00406182                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx ; lpFileInformation
.text:00406186                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00406189                 call    GetFileInformationByHandle
.text:0040618E                 sub     esp, 8
.text:00406191                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00406198                 test    ecx, ecx
.text:0040619A                 jnz     short loc_4061D0
.text:0040619C                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:004061A3                 test    edx, edx
.text:004061A5                 jnz     short loc_4061D0
.text:004061A7                 mov     edx, [ebp+0]
.text:004061AA                 and     edx, 0F000h
.text:004061B0                 cmp     edx, 1000h
.text:004061B6                 jz      loc_406526
.text:004061BC
.text:004061BC loc_4061BC:                             ; CODE XREF: sub_405D40+839↓j
.text:004061BC                                         ; sub_405D40+845↓j
.text:004061BC                 test    ecx, ecx
.text:004061BE                 jnz     short loc_4061D0
.text:004061C0                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0F4h]
.text:004061C7                 test    edx, edx
.text:004061C9                 jz      loc_406504
.text:004061CF                 nop
.text:004061D0
.text:004061D0 loc_4061D0:                             ; CODE XREF: sub_405D40+45A↑j
.text:004061D0                                         ; sub_405D40+465↑j ...
.text:004061D0                 cld
.text:004061D1                 mov     esi, ebx
.text:004061D3                 mov     dword ptr [ebp+14h], 0
.text:004061DA                 lea     edi, [esp+0ECh+FindFileData.cFileName+94h]
.text:004061DE                 mov     ecx, 0Dh
.text:004061E3                 rep movsd
.text:004061E5                 xor     ebx, ebx
.text:004061E7                 xor     edi, edi
.text:004061E9                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0C4h]
.text:004061F0                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0C0h]
.text:004061F4                 or      edx, ebx
.text:004061F6                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+94h]
.text:004061FA                 mov     [ebp+8], edx
.text:004061FD                 or      edi, esi
.text:004061FF                 xor     edx, edx
.text:00406201                 mov     [ebp+0Ch], edi
.text:00406204                 test    bl, 10h
.text:00406207                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0B0h]
.text:0040620B                 setz    dl
.text:0040620E                 mov     [ebp+10h], esi
.text:00406211                 dec     edx
.text:00406212                 and     edx, 0FFFFC000h
.text:00406218                 add     edx, 8000h
.text:0040621E                 or      edx, 124h
.text:00406224                 test    bl, 1
.text:00406227                 movzx   eax, dx
.text:0040622A                 jnz     short loc_406231
.text:0040622C                 or      eax, 92h
.text:00406231
.text:00406231 loc_406231:                             ; CODE XREF: sub_405D40+4EA↑j
.text:00406231                 or      [ebp+0], eax
.text:00406234                 xor     edx, edx
.text:00406236                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+0B4h]
.text:0040623A                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0B8h]
.text:0040623E                 mov     eax, edx
.text:00406240                 xor     esi, esi
.text:00406242                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0A4h]
.text:00406246                 mov     edi, ebx
.text:00406248                 or      eax, edi
.text:0040624A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+88h], eax
.text:0040624E                 mov     ebx, ecx
.text:00406250                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+0BCh]
.text:00406254                 or      ebx, esi
.text:00406256                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040625A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+84h], ebx
.text:0040625E                 xor     ebx, ebx
.text:00406260                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00406264                 mov     [ebp+34h], esi
.text:00406267                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A0h]
.text:0040626B                 mov     [ebp+18h], edi
.text:0040626E                 xor     edi, edi
.text:00406270                 or      esi, ebx
.text:00406272                 mov     [ebp+30h], ecx
.text:00406275                 or      edi, edx
.text:00406277                 mov     edx, esi
.text:00406279                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00406281                 sub     edx, 0D53E8000h
.text:00406287                 mov     ebx, edi
.text:00406289                 sbb     ebx, 19DB1DEh
.text:0040628F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00406293                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040629B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040629E                 call    sub_40D1B0
.text:004062A3                 mov     ecx, eax
.text:004062A5                 shr     eax, 1Fh
.text:004062A8                 dec     eax
.text:004062A9                 and     ecx, eax
.text:004062AB                 mov     [ebp+38h], ecx
.text:004062AE                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:004062B1                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:004062B5                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004062BD                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004062C5                 call    sub_40D2D0
.text:004062CA                 lea     ebx, [eax+eax*4]
.text:004062CD                 xor     ecx, ecx
.text:004062CF                 lea     esi, [ebx+ebx*4]
.text:004062D2                 shl     esi, 2
.text:004062D5                 mov     edi, esi
.text:004062D7                 shr     edi, 1Fh
.text:004062DA                 dec     edi
.text:004062DB                 and     edi, esi
.text:004062DD                 mov     [ebp+3Ch], edi
.text:004062E0                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+98h]
.text:004062E4                 xor     edi, edi
.text:004062E6                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004062EE                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+9Ch]
.text:004062F2                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004062FA                 or      esi, ecx
.text:004062FC                 or      edi, edx
.text:004062FE                 mov     edx, esi
.text:00406300                 mov     ecx, edi
.text:00406302                 sub     edx, 0D53E8000h
.text:00406308                 sbb     ecx, 19DB1DEh
.text:0040630E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00406312                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:00406315                 call    sub_40D1B0
.text:0040631A                 mov     ebx, eax
.text:0040631C                 shr     eax, 1Fh
.text:0040631F                 dec     eax
.text:00406320                 and     ebx, eax
.text:00406322                 mov     [ebp+48h], ebx
.text:00406325                 xor     ebx, ebx
.text:00406327                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:0040632A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040632E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00406336                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:0040633E                 call    sub_40D2D0
.text:00406343                 lea     ecx, [eax+eax*4]
.text:00406346                 lea     esi, [ecx+ecx*4]
.text:00406349                 shl     esi, 2
.text:0040634C                 mov     edi, esi
.text:0040634E                 shr     edi, 1Fh
.text:00406351                 dec     edi
.text:00406352                 and     edi, esi
.text:00406354                 mov     [ebp+4Ch], edi
.text:00406357                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+0A8h]
.text:0040635B                 xor     edi, edi
.text:0040635D                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:00406365                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+0ACh]
.text:00406369                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:00406371                 or      esi, ebx
.text:00406373                 or      edi, edx
.text:00406375                 mov     edx, esi
.text:00406377                 mov     ebx, edi
.text:00406379                 sub     edx, 0D53E8000h
.text:0040637F                 sbb     ebx, 19DB1DEh
.text:00406385                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ebx
.text:00406389                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040638C                 call    sub_40D1B0
.text:00406391                 mov     ecx, eax
.text:00406393                 shr     eax, 1Fh
.text:00406396                 dec     eax
.text:00406397                 and     ecx, eax
.text:00406399                 mov     [ebp+40h], ecx
.text:0040639C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:004063A0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 989680h
.text:004063A8                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0
.text:004063B0                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi
.text:004063B3                 call    sub_40D2D0
.text:004063B8                 mov     dword ptr [ebp+50h], 200h
.text:004063BF                 lea     ebx, [eax+eax*4]
.text:004063C2                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004063C6                 lea     edx, [ebx+ebx*4]
.text:004063C9                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004063CD                 shl     edx, 2
.text:004063D0                 mov     ecx, edx
.text:004063D2                 shr     ecx, 1Fh
.text:004063D5                 dec     ecx
.text:004063D6                 and     ecx, edx
.text:004063D8                 test    edi, edi
.text:004063DA                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:004063DE                 mov     [ebp+44h], ecx
.text:004063E1                 js      loc_4064F7
.text:004063E7
.text:004063E7 loc_4063E7:                             ; CODE XREF: sub_405D40+7BF↓j
.text:004063E7                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:004063EB                 xor     esi, esi
.text:004063ED                 mov     ecx, eax
.text:004063EF                 shrd    ecx, edx, 9
.text:004063F3                 mov     ebx, edx
.text:004063F5                 mov     eax, esi
.text:004063F7                 and     edi, 1FFh
.text:004063FD                 sar     ebx, 9
.text:00406400                 or      eax, edi
.text:00406402                 jz      short loc_40640A
.text:00406404                 add     ecx, 1
.text:00406407                 adc     ebx, 0
.text:0040640A
.text:0040640A loc_40640A:                             ; CODE XREF: sub_405D40+6C2↑j
.text:0040640A                 mov     [ebp+5Ch], ebx
.text:0040640D                 mov     esi, dword_40E080
.text:00406413                 xor     edi, edi
.text:00406415                 mov     [ebp+58h], ecx
.text:00406418                 mov     ebx, dword_40E080
.text:0040641E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:00406422                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00406426                 mov     [ebp+50h], ebx
.text:00406429                 shr     ebx, 9
.text:0040642C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00406430                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx
.text:00406434                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00406438                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], edx
.text:0040643B                 call    sub_40D1B0
.text:00406440                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], edi
.text:00406444                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+84h]
.text:00406448                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+88h]
.text:0040644C                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+74h], ebx
.text:00406450                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+7Ch], eax
.text:00406454                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+80h], edx
.text:00406458                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+78h], 0
.text:00406460                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], esi
.text:00406464                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], ecx
.text:00406467                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], edi
.text:0040646B                 call    sub_40D2D0
.text:00406470                 mov     ebx, edx
.text:00406472                 or      ebx, eax
.text:00406474                 jz      short loc_4064D0
.text:00406476                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:0040647A                 mov     esi, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:0040647E                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:00406482                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], edi
.text:00406486                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:0040648A                 add     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch], 1
.text:0040648F                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+70h], esi
.text:00406493                 adc     dword ptr [esp+0ECh+FindFileData.cFileName+70h], 0
.text:00406498                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:0040649C                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+70h]
.text:004064A0                 mov     ebx, edx
.text:004064A2                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+6Ch]
.text:004064A6                 mov     esi, eax
.text:004064A8                 mov     eax, ebx
.text:004064AA                 imul    ecx, edx
.text:004064AD                 mov     edx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004064B1                 imul    edx, edi
.text:004064B4                 add     eax, ecx
.text:004064B6                 lea     edi, [edx+eax]
.text:004064B9
.text:004064B9 loc_4064B9:                             ; CODE XREF: sub_405D40+7B5↓j
.text:004064B9                 mov     [ebp+58h], esi
.text:004064BC                 xor     eax, eax
.text:004064BE                 mov     [ebp+5Ch], edi
.text:004064C1
.text:004064C1 loc_4064C1:                             ; CODE XREF: sub_405D40+400↑j
.text:004064C1                 add     esp, 0DCh
.text:004064C7                 pop     ebx
.text:004064C8                 pop     esi
.text:004064C9                 pop     edi
.text:004064CA                 pop     ebp
.text:004064CB                 retn
.text:004064CB ; ---------------------------------------------------------------------------
.text:004064CC                 align 10h
.text:004064D0
.text:004064D0 loc_4064D0:                             ; CODE XREF: sub_405D40+734↑j
.text:004064D0                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:004064D4                 mov     edi, dword ptr [esp+0ECh+FindFileData.cFileName+78h]
.text:004064D8                 mov     ebx, dword ptr [esp+0ECh+FindFileData.cFileName+7Ch]
.text:004064DC                 mul     dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004064E0                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+74h]
.text:004064E4                 imul    ebx, edi
.text:004064E7                 mov     esi, eax
.text:004064E9                 mov     eax, dword ptr [esp+0ECh+FindFileData.cFileName+80h]
.text:004064ED                 add     edx, ebx
.text:004064EF                 imul    ecx, eax
.text:004064F2                 lea     edi, [ecx+edx]
.text:004064F5                 jmp     short loc_4064B9
.text:004064F7 ; ---------------------------------------------------------------------------
.text:004064F7
.text:004064F7 loc_4064F7:                             ; CODE XREF: sub_405D40+6A1↑j
.text:004064F7                 add     eax, 1FFh
.text:004064FC                 adc     edx, 0
.text:004064FF                 jmp     loc_4063E7
.text:00406504 ; ---------------------------------------------------------------------------
.text:00406504
.text:00406504 loc_406504:                             ; CODE XREF: sub_405D40+489↑j
.text:00406504                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hFile
.text:00406507                 lea     ecx, [esp+0ECh+FindFileData.cFileName+0F4h]
.text:0040650E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], ecx ; lpFileSizeHigh
.text:00406512                 call    GetFileSize
.text:00406517                 sub     esp, 8
.text:0040651A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], eax
.text:00406521                 jmp     loc_4061D0
.text:00406526 ; ---------------------------------------------------------------------------
.text:00406526
.text:00406526 loc_406526:                             ; CODE XREF: sub_405D40+476↑j
.text:00406526                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+90h], 0
.text:0040652E                 lea     ecx, [esp+0ECh+FindFileData.cFileName+90h]
.text:00406532                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+58h], 0 ; lpBytesLeftThisMessage
.text:0040653A                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+54h], ecx ; lpTotalBytesAvail
.text:0040653E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+50h], 0 ; lpBytesRead
.text:00406546                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+4Ch], 0 ; nBufferSize
.text:0040654E                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+48h], 0 ; lpBuffer
.text:00406556                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+44h], esi ; hNamedPipe
.text:00406559                 call    PeekNamedPipe
.text:0040655E                 sub     esp, 18h
.text:00406561                 test    eax, eax
.text:00406563                 jz      short loc_40657E
.text:00406565                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+90h]
.text:00406569                 xor     eax, eax
.text:0040656B                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F4h], eax
.text:00406572                 mov     dword ptr [esp+0ECh+FindFileData.cFileName+0F8h], ecx
.text:00406579                 jmp     loc_4061BC
.text:0040657E ; ---------------------------------------------------------------------------
.text:0040657E
.text:0040657E loc_40657E:                             ; CODE XREF: sub_405D40+823↑j
.text:0040657E                 mov     ecx, dword ptr [esp+0ECh+FindFileData.cFileName+0F8h]
.text:00406585                 jmp     loc_4061BC
.text:00406585 ; ---------------------------------------------------------------------------
.text:0040658A                 align 10h
.text:00406590
.text:00406590 loc_406590:                             ; CODE XREF: sub_405D40+439↑j
.text:00406590                 mov     edx, 1000h
.text:00406595                 jmp     loc_40617F
.text:00406595 ; ---------------------------------------------------------------------------
.text:0040659A                 align 10h
.text:004065A0
.text:004065A0 loc_4065A0:                             ; CODE XREF: sub_405D40+430↑j
.text:004065A0                 mov     edx, 2000h
.text:004065A5                 jmp     loc_40617F
.text:004065A5 sub_405D40      endp ; sp-analysis failed
.text:004065A5
.text:004065A5 ; ---------------------------------------------------------------------------
.text:004065AA aLnk            db '.lnk',0             ; DATA XREF: sub_4065F0+E0↓o
.text:004065AA                                         ; .text:00406C9A↓o ...
.text:004065AF ; const CHAR aKernel32[]
.text:004065AF aKernel32       db 'KERNEL32',0         ; DATA XREF: sub_4065F0+12D↓o
.text:004065AF                                         ; .text:0040734B↓o
.text:004065B8 ; const CHAR aGetcompressedf[]
.text:004065B8 aGetcompressedf db 'GetCompressedFileSizeA',0
.text:004065B8                                         ; DATA XREF: sub_4065F0+13E↓o
.text:004065B8                                         ; .text:0040735C↓o
.text:004065CF ; const CHAR aGetbinarytypea[]
.text:004065CF aGetbinarytypea db 'GetBinaryTypeA',0   ; DATA XREF: sub_4065F0+333↓o
.text:004065CF                                         ; .text:00406CF6↓o ...
.text:004065DE ; const char aPathext[]
.text:004065DE aPathext        db 'PATHEXT',0          ; DATA XREF: sub_4065F0:loc_4069D7↓o
.text:004065DE                                         ; .text:loc_406DA0↓o ...
.text:004065E6                 align 10h
.text:004065F0
.text:004065F0 ; =============== S U B R O U T I N E =======================================
.text:004065F0
.text:004065F0
.text:004065F0 ; int __cdecl sub_4065F0(char *String1, int)
.text:004065F0 sub_4065F0      proc near               ; CODE XREF: sub_4073D0+3CD↓p
.text:004065F0                                         ; sub_40B6A0-3DEB↓p
.text:004065F0
.text:004065F0 Str             = dword ptr -6Ch
.text:004065F0 lpProcName      = dword ptr -68h
.text:004065F0 var_64          = dword ptr -64h
.text:004065F0 var_60          = dword ptr -60h
.text:004065F0 var_5C          = dword ptr -5Ch
.text:004065F0 var_4C          = dword ptr -4Ch
.text:004065F0 var_48          = dword ptr -48h
.text:004065F0 var_44          = dword ptr -44h
.text:004065F0 var_40          = dword ptr -40h
.text:004065F0 var_3C          = dword ptr -3Ch
.text:004065F0 var_38          = dword ptr -38h
.text:004065F0 lpRootPathName  = dword ptr -30h
.text:004065F0 var_2C          = byte ptr -2Ch
.text:004065F0 var_28          = dword ptr -28h
.text:004065F0 var_24          = dword ptr -24h
.text:004065F0 var_20          = dword ptr -20h
.text:004065F0 var_1C          = dword ptr -1Ch
.text:004065F0 var_18          = byte ptr -18h
.text:004065F0 String1         = dword ptr  4
.text:004065F0 arg_4           = dword ptr  8
.text:004065F0
.text:004065F0                 push    ebp
.text:004065F1                 push    edi
.text:004065F2                 push    esi
.text:004065F3                 push    ebx
.text:004065F4                 sub     esp, 5Ch
.text:004065F7                 mov     edx, [esp+6Ch+String1]
.text:004065FB                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004065FE                 call    sub_4081A0
.text:00406603                 mov     [esp+6Ch+Str], eax
.text:00406606                 call    sub_407D70
.text:0040660B                 mov     [esp+6Ch+lpRootPathName], eax
.text:0040660F                 test    eax, eax
.text:00406611                 jz      loc_406843
.text:00406617                 mov     [esp+6Ch+Str], eax ; Str
.text:0040661A                 call    strlen
.text:0040661F                 mov     edx, [esp+6Ch+arg_4]
.text:00406623                 mov     ebx, eax
.text:00406625                 mov     esi, [edx+0Ch]
.text:00406628                 mov     edi, [edx+8]
.text:0040662B                 mov     eax, esi
.text:0040662D                 or      eax, edi
.text:0040662F                 jz      loc_406A50
.text:00406635                 mov     ecx, [esp+6Ch+lpRootPathName]
.text:00406639                 mov     [esp+6Ch+Str], ecx ; lpRootPathName
.text:0040663C                 call    GetDriveTypeA
.text:00406641                 sub     esp, 4
.text:00406644                 cmp     eax, 4
.text:00406647                 jz      loc_406A50
.text:0040664D
.text:0040664D loc_40664D:                             ; CODE XREF: sub_4065F0+48A↓j
.text:0040664D                                         ; sub_4065F0+4B2↓j
.text:0040664D                 mov     edx, [esp+6Ch+arg_4]
.text:00406651                 mov     esi, [edx+14h]
.text:00406654                 mov     edi, [edx+10h]
.text:00406657                 mov     ecx, esi
.text:00406659                 or      ecx, edi
.text:0040665B                 jnz     short loc_406685
.text:0040665D                 mov     ebp, [esp+6Ch+lpRootPathName]
.text:00406661                 xor     esi, esi
.text:00406663                 xor     edi, edi
.text:00406665                 test    ebp, ebp
.text:00406667                 jz      short loc_406677
.text:00406669                 movzx   ebx, byte ptr [ebp+0]
.text:0040666D                 test    bl, bl
.text:0040666F                 mov     cl, bl
.text:00406671                 jnz     loc_406A01
.text:00406677
.text:00406677 loc_406677:                             ; CODE XREF: sub_4065F0+77↑j
.text:00406677                 xor     eax, eax
.text:00406679                 xor     edx, edx
.text:0040667B
.text:0040667B loc_40667B:                             ; CODE XREF: sub_4065F0+458↓j
.text:0040667B                 mov     ebp, [esp+6Ch+arg_4]
.text:0040667F                 mov     [ebp+10h], eax
.text:00406682                 mov     [ebp+14h], edx
.text:00406685
.text:00406685 loc_406685:                             ; CODE XREF: sub_4065F0+6B↑j
.text:00406685                 mov     edi, [esp+6Ch+String1]
.text:00406689                 xor     ebx, ebx
.text:0040668B                 test    edi, edi
.text:0040668D                 jz      loc_406903
.text:00406693                 mov     esi, [esp+6Ch+String1]
.text:00406697                 cmp     byte ptr [esi], 0
.text:0040669A                 jnz     loc_406910
.text:004066A0
.text:004066A0 loc_4066A0:                             ; CODE XREF: sub_4065F0+38C↓j
.text:004066A0                                         ; sub_4065F0+397↓j
.text:004066A0                 mov     ebp, [esp+6Ch+String1]
.text:004066A4                 test    ebp, ebp
.text:004066A6                 jz      loc_406903
.text:004066AC                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:004066B4                 mov     edi, [esp+6Ch+String1]
.text:004066B8                 mov     [esp+6Ch+Str], edi ; Str
.text:004066BB                 call    strrchr
.text:004066C0                 test    eax, eax
.text:004066C2                 jz      loc_406903
.text:004066C8                 cld
.text:004066C9                 mov     ecx, 5
.text:004066CE                 mov     esi, eax
.text:004066D0                 mov     edi, offset aLnk ; ".lnk"
.text:004066D5                 repe cmpsb
.text:004066D7                 setz    cl
.text:004066DA                 movzx   eax, cl
.text:004066DD                 lea     esi, [esi+0]
.text:004066E0
.text:004066E0 loc_4066E0:                             ; CODE XREF: sub_4065F0+315↓j
.text:004066E0                 test    eax, eax
.text:004066E2                 jz      short loc_4066EA
.text:004066E4                 or      ebx, 0A000h
.text:004066EA
.text:004066EA loc_4066EA:                             ; CODE XREF: sub_4065F0+F2↑j
.text:004066EA                 mov     esi, [esp+6Ch+arg_4]
.text:004066EE                 xor     ecx, ecx
.text:004066F0                 mov     edi, ds:dword_40F1C0
.text:004066F6                 or      [esi], ebx
.text:004066F8                 mov     ebx, [esi+14h]
.text:004066FB                 mov     ebp, [esi+10h]
.text:004066FE                 mov     eax, ebx
.text:00406700                 xor     eax, ecx
.text:00406702                 xor     ebp, edi
.text:00406704                 or      eax, ebp
.text:00406706                 jnz     loc_406890
.text:0040670C
.text:0040670C loc_40670C:                             ; CODE XREF: sub_4065F0+30E↓j
.text:0040670C                 mov     ecx, dword_40E080
.text:00406712                 xor     esi, esi
.text:00406714                 xor     edi, edi
.text:00406716                 mov     edx, [esp+6Ch+arg_4]
.text:0040671A                 mov     [edx+50h], ecx
.text:0040671D                 mov     [esp+6Ch+Str], offset aKernel32 ; "KERNEL32"
.text:00406724                 call    LoadLibraryA
.text:00406729                 sub     esp, 4
.text:0040672C                 mov     ebp, eax
.text:0040672E                 mov     [esp+6Ch+lpProcName], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00406736                 mov     [esp+6Ch+Str], eax ; hModule
.text:00406739                 call    GetProcAddress
.text:0040673E                 sub     esp, 8
.text:00406741                 test    eax, eax
.text:00406743                 jz      short loc_406778
.text:00406745                 mov     ebx, [esp+6Ch+String1]
.text:00406749                 lea     esi, [esp+6Ch+var_2C]
.text:0040674D                 mov     [esp+6Ch+lpProcName], esi
.text:00406751                 mov     [esp+6Ch+Str], ebx
.text:00406754                 call    eax
.text:00406756                 sub     esp, 8
.text:00406759                 mov     ebx, eax
.text:0040675B                 cmp     eax, 0FFFFFFFFh
.text:0040675E                 jz      loc_406879
.text:00406764
.text:00406764 loc_406764:                             ; CODE XREF: sub_4065F0+29A↓j
.text:00406764                 mov     esi, dword ptr [esp+6Ch+var_2C]
.text:00406768                 mov     ecx, ebx
.text:0040676A                 xor     edi, edi
.text:0040676C                 xor     ebx, ebx
.text:0040676E                 mov     edx, esi
.text:00406770                 mov     esi, ecx
.text:00406772                 or      esi, edi
.text:00406774                 mov     edi, ebx
.text:00406776                 or      edi, edx
.text:00406778
.text:00406778 loc_406778:                             ; CODE XREF: sub_4065F0+153↑j
.text:00406778                                         ; sub_4065F0+294↓j
.text:00406778                 test    ebp, ebp
.text:0040677A                 jz      short loc_406787
.text:0040677C                 mov     [esp+6Ch+Str], ebp ; hLibModule
.text:0040677F                 call    FreeLibrary
.text:00406784                 sub     esp, 4
.text:00406787
.text:00406787 loc_406787:                             ; CODE XREF: sub_4065F0+18A↑j
.text:00406787                 mov     ebp, edi
.text:00406789                 mov     edx, ebp
.text:0040678B                 mov     edi, esi
.text:0040678D                 or      edx, esi
.text:0040678F                 jnz     short loc_40679B
.text:00406791                 mov     eax, [esp+6Ch+arg_4]
.text:00406795                 mov     edi, [eax+30h]
.text:00406798                 mov     ebp, [eax+34h]
.text:0040679B
.text:0040679B loc_40679B:                             ; CODE XREF: sub_4065F0+19F↑j
.text:0040679B                 mov     [esp+6Ch+lpProcName], ebp
.text:0040679F                 mov     ebx, dword_40E080
.text:004067A5                 xor     esi, esi
.text:004067A7                 mov     [esp+6Ch+var_60], esi
.text:004067AB                 mov     [esp+6Ch+Str], edi
.text:004067AE                 mov     [esp+6Ch+var_64], ebx
.text:004067B2                 call    sub_40D1B0
.text:004067B7                 mov     [esp+6Ch+var_3C], eax
.text:004067BB                 mov     ecx, dword_40E080
.text:004067C1                 mov     [esp+6Ch+lpProcName], ebp
.text:004067C5                 mov     [esp+6Ch+var_38], edx
.text:004067C9                 shr     ecx, 9
.text:004067CC                 mov     [esp+6Ch+var_44], ecx
.text:004067D0                 mov     [esp+6Ch+var_40], 0
.text:004067D8                 mov     [esp+6Ch+var_64], ebx
.text:004067DC                 mov     [esp+6Ch+var_60], esi
.text:004067E0                 mov     [esp+6Ch+Str], edi
.text:004067E3                 call    sub_40D2D0
.text:004067E8                 mov     ebp, edx
.text:004067EA                 or      ebp, eax
.text:004067EC                 jz      short loc_406850
.text:004067EE                 mov     ebp, [esp+6Ch+var_3C]
.text:004067F2                 mov     esi, [esp+6Ch+var_38]
.text:004067F6                 mov     eax, [esp+6Ch+var_44]
.text:004067FA                 mov     [esp+6Ch+var_4C], ebp
.text:004067FE                 mov     ecx, [esp+6Ch+var_40]
.text:00406802                 mov     ebx, [esp+6Ch+var_44]
.text:00406806                 add     [esp+6Ch+var_4C], 1
.text:0040680B                 mov     [esp+6Ch+var_48], esi
.text:0040680F                 mov     edi, [esp+6Ch+var_4C]
.text:00406813                 adc     [esp+6Ch+var_48], 0
.text:00406818                 mul     [esp+6Ch+var_4C]
.text:0040681C                 imul    ecx, edi
.text:0040681F                 mov     esi, eax
.text:00406821                 mov     eax, [esp+6Ch+var_48]
.text:00406825                 add     edx, ecx
.text:00406827                 imul    ebx, eax
.text:0040682A                 lea     edi, [ebx+edx]
.text:0040682D
.text:0040682D loc_40682D:                             ; CODE XREF: sub_4065F0+287↓j
.text:0040682D                 mov     ebx, [esp+6Ch+arg_4]
.text:00406831                 mov     [ebx+58h], esi
.text:00406834                 mov     esi, [esp+6Ch+lpRootPathName]
.text:00406838                 mov     [ebx+5Ch], edi
.text:0040683B                 mov     [esp+6Ch+Str], esi ; Block
.text:0040683E                 call    free
.text:00406843
.text:00406843 loc_406843:                             ; CODE XREF: sub_4065F0+21↑j
.text:00406843                 add     esp, 5Ch
.text:00406846                 xor     eax, eax
.text:00406848                 pop     ebx
.text:00406849                 pop     esi
.text:0040684A                 pop     edi
.text:0040684B                 pop     ebp
.text:0040684C                 retn
.text:0040684C ; ---------------------------------------------------------------------------
.text:0040684D                 align 10h
.text:00406850
.text:00406850 loc_406850:                             ; CODE XREF: sub_4065F0+1FC↑j
.text:00406850                 mov     eax, [esp+6Ch+var_3C]
.text:00406854                 mov     edi, [esp+6Ch+var_40]
.text:00406858                 mov     ecx, [esp+6Ch+var_3C]
.text:0040685C                 mul     [esp+6Ch+var_44]
.text:00406860                 mov     ebx, [esp+6Ch+var_44]
.text:00406864                 imul    ecx, edi
.text:00406867                 mov     ebp, edx
.text:00406869                 mov     esi, eax
.text:0040686B                 mov     edx, [esp+6Ch+var_38]
.text:0040686F                 add     ebp, ecx
.text:00406871                 imul    ebx, edx
.text:00406874                 lea     edi, [ebx+ebp]
.text:00406877                 jmp     short loc_40682D
.text:00406879 ; ---------------------------------------------------------------------------
.text:00406879
.text:00406879 loc_406879:                             ; CODE XREF: sub_4065F0+16E↑j
.text:00406879                 call    GetLastError
.text:0040687E                 xor     esi, esi
.text:00406880                 xor     edi, edi
.text:00406882                 test    eax, eax
.text:00406884                 jnz     loc_406778
.text:0040688A                 jmp     loc_406764
.text:0040688A ; ---------------------------------------------------------------------------
.text:0040688F                 align 10h
.text:00406890
.text:00406890 loc_406890:                             ; CODE XREF: sub_4065F0+116↑j
.text:00406890                 mov     edx, [esp+6Ch+lpRootPathName]
.text:00406894                 lea     ecx, [esp+6Ch+var_20]
.text:00406898                 lea     ebx, [esp+6Ch+var_1C]
.text:0040689C                 mov     [esp+6Ch+var_5C], ebx ; LPDWORD
.text:004068A0                 lea     edi, [esp+6Ch+var_24]
.text:004068A4                 lea     ebp, [esp+6Ch+var_28]
.text:004068A8                 mov     [esp+6Ch+var_60], ecx ; LPDWORD
.text:004068AC                 mov     [esp+6Ch+var_64], edi ; LPDWORD
.text:004068B0                 mov     [esp+6Ch+lpProcName], ebp ; LPDWORD
.text:004068B4                 mov     [esp+6Ch+Str], edx ; LPCSTR
.text:004068B7                 call    sub_408BC0
.text:004068BC                 test    eax, eax
.text:004068BE                 jnz     short loc_4068E0
.text:004068C0                 mov     [esp+6Ch+var_28], 1
.text:004068C8                 mov     [esp+6Ch+var_24], 200h
.text:004068D0                 mov     [esp+6Ch+var_20], 0
.text:004068D8                 mov     [esp+6Ch+var_1C], 0
.text:004068E0
.text:004068E0 loc_4068E0:                             ; CODE XREF: sub_4065F0+2CE↑j
.text:004068E0                 mov     ebp, [esp+6Ch+var_24]
.text:004068E4                 mov     edi, [esp+6Ch+var_28]
.text:004068E8                 mov     eax, [esp+6Ch+arg_4]
.text:004068EC                 imul    ebp, edi
.text:004068EF                 mov     esi, [eax+10h]
.text:004068F2                 mov     dword_40E080, ebp
.text:004068F8                 mov     ds:dword_40F1C0, esi
.text:004068FE                 jmp     loc_40670C
.text:00406903 ; ---------------------------------------------------------------------------
.text:00406903
.text:00406903 loc_406903:                             ; CODE XREF: sub_4065F0+9D↑j
.text:00406903                                         ; sub_4065F0+B6↑j ...
.text:00406903                 xor     eax, eax
.text:00406905                 jmp     loc_4066E0
.text:00406905 ; ---------------------------------------------------------------------------
.text:0040690A                 align 10h
.text:00406910
.text:00406910 loc_406910:                             ; CODE XREF: sub_4065F0+AA↑j
.text:00406910                 mov     [esp+6Ch+Str], offset ModuleName ; "KERNEL32.DLL"
.text:00406917                 xor     ebp, ebp
.text:00406919                 call    GetModuleHandleA
.text:0040691E                 sub     esp, 4
.text:00406921                 mov     edi, eax
.text:00406923                 mov     [esp+6Ch+lpProcName], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:0040692B                 mov     [esp+6Ch+Str], eax ; hModule
.text:0040692E                 call    GetProcAddress
.text:00406933                 sub     esp, 8
.text:00406936                 mov     edx, eax
.text:00406938                 test    eax, eax
.text:0040693A                 jz      short loc_406954
.text:0040693C                 mov     eax, [esp+6Ch+String1]
.text:00406940                 lea     ecx, [esp+6Ch+var_18]
.text:00406944                 mov     [esp+6Ch+lpProcName], ecx
.text:00406948                 mov     [esp+6Ch+Str], eax
.text:0040694B                 call    edx
.text:0040694D                 sub     esp, 8
.text:00406950                 test    eax, eax
.text:00406952                 jnz     short loc_4069B8
.text:00406954
.text:00406954 loc_406954:                             ; CODE XREF: sub_4065F0+34A↑j
.text:00406954                 mov     edx, ds:Str
.text:0040695A                 test    edx, edx
.text:0040695C                 jz      short loc_4069D7
.text:0040695E
.text:0040695E loc_40695E:                             ; CODE XREF: sub_4065F0+3FA↓j
.text:0040695E                                         ; sub_4065F0+40C↓j
.text:0040695E                 mov     eax, [esp+6Ch+String1]
.text:00406962                 test    eax, eax
.text:00406964                 jz      short loc_40696F
.text:00406966                 mov     esi, [esp+6Ch+String1]
.text:0040696A                 cmp     byte ptr [esi], 0
.text:0040696D                 jnz     short loc_40698C
.text:0040696F
.text:0040696F loc_40696F:                             ; CODE XREF: sub_4065F0+374↑j
.text:0040696F                                         ; sub_4065F0+3B0↓j ...
.text:0040696F                 mov     [esp+6Ch+Str], edi ; hLibModule
.text:00406972                 call    FreeLibrary
.text:00406977                 sub     esp, 4
.text:0040697A                 test    ebp, ebp
.text:0040697C                 jz      loc_4066A0
.text:00406982                 mov     ebx, 49h ; 'I'
.text:00406987                 jmp     loc_4066A0
.text:0040698C ; ---------------------------------------------------------------------------
.text:0040698C
.text:0040698C loc_40698C:                             ; CODE XREF: sub_4065F0+37D↑j
.text:0040698C                 mov     [esp+6Ch+Str], esi ; Str
.text:0040698F                 mov     [esp+6Ch+lpProcName], 2Eh ; '.' ; Ch
.text:00406997                 call    strrchr
.text:0040699C                 test    eax, eax
.text:0040699E                 mov     esi, eax
.text:004069A0                 jz      short loc_40696F
.text:004069A2                 mov     [esp+6Ch+lpProcName], eax ; SubStr
.text:004069A6                 mov     ecx, ds:Str
.text:004069AC                 mov     [esp+6Ch+Str], ecx ; Str
.text:004069AF                 call    strstr
.text:004069B4                 test    eax, eax
.text:004069B6                 jz      short loc_4069BF
.text:004069B8
.text:004069B8 loc_4069B8:                             ; CODE XREF: sub_4065F0+362↑j
.text:004069B8                                         ; sub_4065F0+3E5↓j
.text:004069B8                 mov     ebp, 1
.text:004069BD                 jmp     short loc_40696F
.text:004069BF ; ---------------------------------------------------------------------------
.text:004069BF
.text:004069BF loc_4069BF:                             ; CODE XREF: sub_4065F0+3C6↑j
.text:004069BF                 mov     [esp+6Ch+lpProcName], esi ; SubStr
.text:004069C3                 mov     edx, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:004069C9                 mov     [esp+6Ch+Str], edx ; Str
.text:004069CC                 call    strstr
.text:004069D1                 test    eax, eax
.text:004069D3                 jz      short loc_40696F
.text:004069D5                 jmp     short loc_4069B8
.text:004069D7 ; ---------------------------------------------------------------------------
.text:004069D7
.text:004069D7 loc_4069D7:                             ; CODE XREF: sub_4065F0+36C↑j
.text:004069D7                 mov     [esp+6Ch+Str], offset aPathext ; "PATHEXT"
.text:004069DE                 call    getenv
.text:004069E3                 mov     ds:Str, eax
.text:004069E8                 test    eax, eax
.text:004069EA                 jnz     loc_40695E
.text:004069F0                 mov     esi, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:004069F6                 mov     ds:Str, esi
.text:004069FC                 jmp     loc_40695E
.text:00406A01 ; ---------------------------------------------------------------------------
.text:00406A01
.text:00406A01 loc_406A01:                             ; CODE XREF: sub_4065F0+81↑j
.text:00406A01                                         ; sub_4065F0+452↓j
.text:00406A01                 shld    edi, esi, 8
.text:00406A05                 movsx   eax, cl
.text:00406A08                 shl     esi, 8
.text:00406A0B                 cdq
.text:00406A0C                 add     esi, eax
.text:00406A0E                 adc     edi, edx
.text:00406A10                 mov     edx, edi
.text:00406A12                 xor     ebx, ebx
.text:00406A14                 and     edx, 0FF000000h
.text:00406A1A                 mov     eax, edx
.text:00406A1C                 or      eax, ebx
.text:00406A1E                 jz      short loc_406A39
.text:00406A20                 mov     ecx, edx
.text:00406A22                 xor     eax, eax
.text:00406A24                 shr     ecx, 10h
.text:00406A27                 mov     edx, esi
.text:00406A29                 xor     edx, ecx
.text:00406A2B                 mov     ecx, edi
.text:00406A2D                 xor     ecx, eax
.text:00406A2F                 mov     esi, edx
.text:00406A31                 mov     edi, ecx
.text:00406A33                 and     edi, 0FFFFFFh
.text:00406A39
.text:00406A39 loc_406A39:                             ; CODE XREF: sub_4065F0+42E↑j
.text:00406A39                 inc     ebp
.text:00406A3A                 movzx   ebx, byte ptr [ebp+0]
.text:00406A3E                 test    bl, bl
.text:00406A40                 mov     cl, bl
.text:00406A42                 jnz     short loc_406A01
.text:00406A44                 mov     eax, esi
.text:00406A46                 mov     edx, edi
.text:00406A48                 jmp     loc_40667B
.text:00406A48 ; ---------------------------------------------------------------------------
.text:00406A4D                 align 10h
.text:00406A50
.text:00406A50 loc_406A50:                             ; CODE XREF: sub_4065F0+3F↑j
.text:00406A50                                         ; sub_4065F0+57↑j
.text:00406A50                 mov     edi, [esp+6Ch+lpRootPathName]
.text:00406A54                 mov     ebp, [esp+6Ch+String1]
.text:00406A58                 mov     [esp+6Ch+lpProcName], edi ; String2
.text:00406A5C                 mov     [esp+6Ch+Str], ebp ; String1
.text:00406A5F                 call    _stricmp
.text:00406A64                 test    eax, eax
.text:00406A66                 jnz     short loc_406A80
.text:00406A68                 mov     ebx, [esp+6Ch+arg_4]
.text:00406A6C                 mov     dword ptr [ebx+8], 5
.text:00406A73                 mov     dword ptr [ebx+0Ch], 50000h
.text:00406A7A                 jmp     loc_40664D
.text:00406A7A ; ---------------------------------------------------------------------------
.text:00406A7F                 align 10h
.text:00406A80
.text:00406A80 loc_406A80:                             ; CODE XREF: sub_4065F0+476↑j
.text:00406A80                 mov     ebp, [esp+6Ch+String1]
.text:00406A84                 xor     esi, esi
.text:00406A86                 xor     edi, edi
.text:00406A88                 add     ebp, ebx
.text:00406A8A                 jz      short loc_406A94
.text:00406A8C                 movzx   ecx, byte ptr [ebp+0]
.text:00406A90                 test    cl, cl
.text:00406A92                 jnz     short loc_406AA7
.text:00406A94
.text:00406A94 loc_406A94:                             ; CODE XREF: sub_4065F0+49A↑j
.text:00406A94                 xor     eax, eax
.text:00406A96                 xor     edx, edx
.text:00406A98
.text:00406A98 loc_406A98:                             ; CODE XREF: sub_4065F0+4FE↓j
.text:00406A98                 mov     ebp, [esp+6Ch+arg_4]
.text:00406A9C                 mov     [ebp+8], eax
.text:00406A9F                 mov     [ebp+0Ch], edx
.text:00406AA2                 jmp     loc_40664D
.text:00406AA7 ; ---------------------------------------------------------------------------
.text:00406AA7
.text:00406AA7 loc_406AA7:                             ; CODE XREF: sub_4065F0+4A2↑j
.text:00406AA7                                         ; sub_4065F0+4F8↓j
.text:00406AA7                 shld    edi, esi, 8
.text:00406AAB                 movsx   eax, cl
.text:00406AAE                 shl     esi, 8
.text:00406AB1                 cdq
.text:00406AB2                 add     esi, eax
.text:00406AB4                 adc     edi, edx
.text:00406AB6                 mov     edx, edi
.text:00406AB8                 xor     ebx, ebx
.text:00406ABA                 and     edx, 0FF000000h
.text:00406AC0                 mov     eax, edx
.text:00406AC2                 or      eax, ebx
.text:00406AC4                 jz      short loc_406ADF
.text:00406AC6                 mov     ecx, edx
.text:00406AC8                 xor     eax, eax
.text:00406ACA                 shr     ecx, 10h
.text:00406ACD                 mov     edx, esi
.text:00406ACF                 xor     edx, ecx
.text:00406AD1                 mov     ecx, edi
.text:00406AD3                 xor     ecx, eax
.text:00406AD5                 mov     esi, edx
.text:00406AD7                 mov     edi, ecx
.text:00406AD9                 and     edi, 0FFFFFFh
.text:00406ADF
.text:00406ADF loc_406ADF:                             ; CODE XREF: sub_4065F0+4D4↑j
.text:00406ADF                 inc     ebp
.text:00406AE0                 movzx   ebx, byte ptr [ebp+0]
.text:00406AE4                 test    bl, bl
.text:00406AE6                 mov     cl, bl
.text:00406AE8                 jnz     short loc_406AA7
.text:00406AEA                 mov     eax, esi
.text:00406AEC                 mov     edx, edi
.text:00406AEE                 jmp     short loc_406A98
.text:00406AEE sub_4065F0      endp
.text:00406AEE
.text:00406AF0
.text:00406AF0 ; =============== S U B R O U T I N E =======================================
.text:00406AF0
.text:00406AF0
.text:00406AF0 ; int __cdecl sub_406AF0(LPCSTR)
.text:00406AF0 sub_406AF0      proc near               ; CODE XREF: sub_4082C0+CA↓p
.text:00406AF0
.text:00406AF0 lpRootPathName  = dword ptr -83Ch
.text:00406AF0 lpVolumeNameBuffer= dword ptr -838h
.text:00406AF0 nVolumeNameSize = dword ptr -834h
.text:00406AF0 lpVolumeSerialNumber= dword ptr -830h
.text:00406AF0 lpMaximumComponentLength= dword ptr -82Ch
.text:00406AF0 lpFileSystemFlags= dword ptr -828h
.text:00406AF0 lpFileSystemNameBuffer= dword ptr -824h
.text:00406AF0 nFileSystemNameSize= dword ptr -820h
.text:00406AF0 VolumeSerialNumber= dword ptr -818h
.text:00406AF0 MaximumComponentLength= dword ptr -814h
.text:00406AF0 FileSystemFlags = dword ptr -810h
.text:00406AF0 FileSystemNameBuffer= byte ptr -80Ch
.text:00406AF0 VolumeNameBuffer= byte ptr -40Ch
.text:00406AF0 var_4           = dword ptr -4
.text:00406AF0 arg_0           = dword ptr  4
.text:00406AF0
.text:00406AF0                 sub     esp, 83Ch
.text:00406AF6                 mov     [esp+83Ch+var_4], ebx
.text:00406AFD                 mov     ebx, [esp+83Ch+arg_0]
.text:00406B04                 mov     [esp+83Ch+lpRootPathName], ebx ; LPCSTR
.text:00406B07                 call    sub_4081A0
.text:00406B0C                 mov     [esp+83Ch+lpRootPathName], eax
.text:00406B0F                 call    sub_407D70
.text:00406B14                 mov     [esp+83Ch+lpRootPathName], eax ; lpRootPathName
.text:00406B17                 lea     edx, [esp+83Ch+FileSystemNameBuffer]
.text:00406B1B                 mov     ebx, eax
.text:00406B1D                 mov     [esp+83Ch+lpFileSystemNameBuffer], edx ; lpFileSystemNameBuffer
.text:00406B21                 lea     ecx, [esp+83Ch+FileSystemFlags]
.text:00406B25                 lea     edx, [esp+83Ch+MaximumComponentLength]
.text:00406B29                 mov     [esp+83Ch+lpFileSystemFlags], ecx ; lpFileSystemFlags
.text:00406B2D                 lea     ecx, [esp+83Ch+VolumeSerialNumber]
.text:00406B31                 mov     [esp+83Ch+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:00406B35                 lea     edx, [esp+83Ch+VolumeNameBuffer]
.text:00406B3C                 mov     [esp+83Ch+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:00406B40                 mov     [esp+83Ch+lpVolumeNameBuffer], edx ; lpVolumeNameBuffer
.text:00406B44                 mov     [esp+83Ch+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:00406B4C                 mov     [esp+83Ch+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00406B54                 call    GetVolumeInformationA
.text:00406B59                 sub     esp, 20h
.text:00406B5C                 test    eax, eax
.text:00406B5E                 setz    cl
.text:00406B61                 mov     [esp+83Ch+lpRootPathName], ebx ; Block
.text:00406B64                 movzx   edx, cl
.text:00406B67                 dec     edx
.text:00406B68                 and     [esp+83Ch+VolumeSerialNumber], edx
.text:00406B6C                 call    free
.text:00406B71                 mov     eax, [esp+83Ch+VolumeSerialNumber]
.text:00406B75                 mov     ebx, [esp+83Ch+var_4]
.text:00406B7C                 add     esp, 83Ch
.text:00406B82                 retn
.text:00406B82 sub_406AF0      endp
.text:00406B82
.text:00406B82 ; ---------------------------------------------------------------------------
.text:00406B83                 align 10h
.text:00406B90                 push    ebp
.text:00406B91                 push    edi
.text:00406B92                 xor     edi, edi
.text:00406B94                 push    esi
.text:00406B95                 xor     esi, esi
.text:00406B97                 push    ebx
.text:00406B98                 mov     ebp, [esp+14h]
.text:00406B9C                 test    ebp, ebp
.text:00406B9E                 jz      short loc_406BA8
.text:00406BA0                 movzx   ecx, byte ptr [ebp+0]
.text:00406BA4                 test    cl, cl
.text:00406BA6                 jnz     short loc_406BB1
.text:00406BA8
.text:00406BA8 loc_406BA8:                             ; CODE XREF: .text:00406B9E↑j
.text:00406BA8                 xor     eax, eax
.text:00406BAA                 xor     edx, edx
.text:00406BAC
.text:00406BAC loc_406BAC:                             ; CODE XREF: .text:00406BF8↓j
.text:00406BAC                 pop     ebx
.text:00406BAD                 pop     esi
.text:00406BAE                 pop     edi
.text:00406BAF                 pop     ebp
.text:00406BB0                 retn
.text:00406BB1 ; ---------------------------------------------------------------------------
.text:00406BB1
.text:00406BB1 loc_406BB1:                             ; CODE XREF: .text:00406BA6↑j
.text:00406BB1                                         ; .text:00406BF2↓j
.text:00406BB1                 shld    edi, esi, 8
.text:00406BB5                 movsx   eax, cl
.text:00406BB8                 shl     esi, 8
.text:00406BBB                 cdq
.text:00406BBC                 add     esi, eax
.text:00406BBE                 adc     edi, edx
.text:00406BC0                 mov     edx, edi
.text:00406BC2                 xor     ebx, ebx
.text:00406BC4                 and     edx, 0FF000000h
.text:00406BCA                 mov     eax, edx
.text:00406BCC                 or      eax, ebx
.text:00406BCE                 jz      short loc_406BE9
.text:00406BD0                 mov     ecx, edx
.text:00406BD2                 xor     eax, eax
.text:00406BD4                 shr     ecx, 10h
.text:00406BD7                 mov     edx, esi
.text:00406BD9                 xor     edx, ecx
.text:00406BDB                 mov     ecx, edi
.text:00406BDD                 xor     ecx, eax
.text:00406BDF                 mov     esi, edx
.text:00406BE1                 mov     edi, ecx
.text:00406BE3                 and     edi, 0FFFFFFh
.text:00406BE9
.text:00406BE9 loc_406BE9:                             ; CODE XREF: .text:00406BCE↑j
.text:00406BE9                 inc     ebp
.text:00406BEA                 movzx   ebx, byte ptr [ebp+0]
.text:00406BEE                 test    bl, bl
.text:00406BF0                 mov     cl, bl
.text:00406BF2                 jnz     short loc_406BB1
.text:00406BF4                 mov     eax, esi
.text:00406BF6                 mov     edx, edi
.text:00406BF8                 jmp     short loc_406BAC
.text:00406BF8 ; ---------------------------------------------------------------------------
.text:00406BFA                 align 10h
.text:00406C00                 sub     esp, 2Ch
.text:00406C03                 lea     edx, [esp+24h]
.text:00406C07                 lea     ecx, [esp+28h]
.text:00406C0B                 mov     [esp+0Ch], edx
.text:00406C0F                 lea     edx, [esp+1Ch]
.text:00406C13                 mov     [esp+4], edx
.text:00406C17                 mov     edx, [esp+30h]
.text:00406C1B                 mov     [esp+10h], ecx
.text:00406C1F                 lea     ecx, [esp+20h]
.text:00406C23                 mov     [esp+8], ecx
.text:00406C27                 mov     [esp], edx
.text:00406C2A                 call    sub_408BC0
.text:00406C2F                 test    eax, eax
.text:00406C31                 jnz     short loc_406C53
.text:00406C33                 mov     dword ptr [esp+1Ch], 1
.text:00406C3B                 mov     dword ptr [esp+20h], 200h
.text:00406C43                 mov     dword ptr [esp+24h], 0
.text:00406C4B                 mov     dword ptr [esp+28h], 0
.text:00406C53
.text:00406C53 loc_406C53:                             ; CODE XREF: .text:00406C31↑j
.text:00406C53                 mov     eax, [esp+20h]
.text:00406C57                 mov     ecx, [esp+1Ch]
.text:00406C5B                 add     esp, 2Ch
.text:00406C5E                 imul    eax, ecx
.text:00406C61                 retn
.text:00406C61 ; ---------------------------------------------------------------------------
.text:00406C62                 align 10h
.text:00406C70                 sub     esp, 1Ch
.text:00406C73                 mov     eax, [esp+20h]
.text:00406C77                 mov     [esp+14h], esi
.text:00406C7B                 mov     [esp+18h], edi
.text:00406C7F                 test    eax, eax
.text:00406C81                 jz      short loc_406CC0
.text:00406C83                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406C8B                 mov     [esp], eax
.text:00406C8E                 call    strrchr
.text:00406C93                 test    eax, eax
.text:00406C95                 jz      short loc_406CC0
.text:00406C97                 cld
.text:00406C98                 mov     esi, eax
.text:00406C9A                 mov     edi, offset aLnk ; ".lnk"
.text:00406C9F                 mov     ecx, 5
.text:00406CA4                 repe cmpsb
.text:00406CA6                 setz    dl
.text:00406CA9                 movzx   eax, dl
.text:00406CAC                 lea     esi, [esi+0]
.text:00406CB0
.text:00406CB0 loc_406CB0:                             ; CODE XREF: .text:00406CC2↓j
.text:00406CB0                 mov     esi, [esp+14h]
.text:00406CB4                 mov     edi, [esp+18h]
.text:00406CB8                 add     esp, 1Ch
.text:00406CBB                 retn
.text:00406CBB ; ---------------------------------------------------------------------------
.text:00406CBC                 align 10h
.text:00406CC0
.text:00406CC0 loc_406CC0:                             ; CODE XREF: .text:00406C81↑j
.text:00406CC0                                         ; .text:00406C95↑j
.text:00406CC0                 xor     eax, eax
.text:00406CC2                 jmp     short loc_406CB0
.text:00406CC2 ; ---------------------------------------------------------------------------
.text:00406CC4                 align 10h
.text:00406CD0                 sub     esp, 1Ch
.text:00406CD3                 mov     [esp+10h], ebx
.text:00406CD7                 mov     ebx, [esp+20h]
.text:00406CDB                 mov     [esp+14h], esi
.text:00406CDF                 mov     [esp+18h], edi
.text:00406CE3                 xor     edi, edi
.text:00406CE5                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00406CEC                 call    GetModuleHandleA
.text:00406CF1                 sub     esp, 4
.text:00406CF4                 mov     esi, eax
.text:00406CF6                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00406CFE                 mov     [esp], eax
.text:00406D01                 call    GetProcAddress
.text:00406D06                 sub     esp, 8
.text:00406D09                 test    eax, eax
.text:00406D0B                 jz      short loc_406D21
.text:00406D0D                 mov     [esp], ebx
.text:00406D10                 lea     ecx, [esp+0Ch]
.text:00406D14                 mov     [esp+4], ecx
.text:00406D18                 call    eax
.text:00406D1A                 sub     esp, 8
.text:00406D1D                 test    eax, eax
.text:00406D1F                 jnz     short loc_406D80
.text:00406D21
.text:00406D21 loc_406D21:                             ; CODE XREF: .text:00406D0B↑j
.text:00406D21                 mov     eax, ds:Str
.text:00406D26                 test    eax, eax
.text:00406D28                 jz      short loc_406DA0
.text:00406D2A
.text:00406D2A loc_406D2A:                             ; CODE XREF: .text:00406DB3↓j
.text:00406D2A                                         ; .text:00406DC5↓j
.text:00406D2A                 test    ebx, ebx
.text:00406D2C                 jz      short loc_406D33
.text:00406D2E                 cmp     byte ptr [ebx], 0
.text:00406D31                 jnz     short loc_406D50
.text:00406D33
.text:00406D33 loc_406D33:                             ; CODE XREF: .text:00406D2C↑j
.text:00406D33                                         ; .text:00406D64↓j ...
.text:00406D33                 mov     [esp], esi
.text:00406D36                 call    FreeLibrary
.text:00406D3B                 sub     esp, 4
.text:00406D3E                 mov     eax, edi
.text:00406D40                 mov     ebx, [esp+10h]
.text:00406D44                 mov     esi, [esp+14h]
.text:00406D48                 mov     edi, [esp+18h]
.text:00406D4C                 add     esp, 1Ch
.text:00406D4F                 retn
.text:00406D50 ; ---------------------------------------------------------------------------
.text:00406D50
.text:00406D50 loc_406D50:                             ; CODE XREF: .text:00406D31↑j
.text:00406D50                 mov     [esp], ebx
.text:00406D53                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406D5B                 call    strrchr
.text:00406D60                 test    eax, eax
.text:00406D62                 mov     ebx, eax
.text:00406D64                 jz      short loc_406D33
.text:00406D66                 mov     [esp+4], eax
.text:00406D6A                 mov     ecx, ds:Str
.text:00406D70                 mov     [esp], ecx
.text:00406D73                 call    strstr
.text:00406D78                 test    eax, eax
.text:00406D7A                 jz      short loc_406D87
.text:00406D7C                 lea     esi, [esi+0]
.text:00406D80
.text:00406D80 loc_406D80:                             ; CODE XREF: .text:00406D1F↑j
.text:00406D80                                         ; .text:00406D9D↓j
.text:00406D80                 mov     edi, 1
.text:00406D85                 jmp     short loc_406D33
.text:00406D87 ; ---------------------------------------------------------------------------
.text:00406D87
.text:00406D87 loc_406D87:                             ; CODE XREF: .text:00406D7A↑j
.text:00406D87                 mov     [esp+4], ebx
.text:00406D8B                 mov     ebx, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:00406D91                 mov     [esp], ebx
.text:00406D94                 call    strstr
.text:00406D99                 test    eax, eax
.text:00406D9B                 jz      short loc_406D33
.text:00406D9D                 jmp     short loc_406D80
.text:00406D9D ; ---------------------------------------------------------------------------
.text:00406D9F                 align 10h
.text:00406DA0
.text:00406DA0 loc_406DA0:                             ; CODE XREF: .text:00406D28↑j
.text:00406DA0                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00406DA7                 call    getenv
.text:00406DAC                 mov     ds:Str, eax
.text:00406DB1                 test    eax, eax
.text:00406DB3                 jnz     loc_406D2A
.text:00406DB9                 mov     edx, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:00406DBF                 mov     ds:Str, edx
.text:00406DC5                 jmp     loc_406D2A
.text:00406DC5 ; ---------------------------------------------------------------------------
.text:00406DCA                 align 10h
.text:00406DD0                 sub     esp, 0Ch
.text:00406DD3                 mov     edx, [esp+10h]
.text:00406DD7                 mov     [esp], edx
.text:00406DDA                 call    GetFileType
.text:00406DDF                 sub     esp, 4
.text:00406DE2                 xor     edx, edx
.text:00406DE4                 cmp     eax, 2
.text:00406DE7                 jz      short loc_406E00
.text:00406DE9                 cmp     eax, 3
.text:00406DEC                 jz      short loc_406DF4
.text:00406DEE
.text:00406DEE loc_406DEE:                             ; CODE XREF: .text:00406DF9↓j
.text:00406DEE                                         ; .text:00406E05↓j
.text:00406DEE                 mov     eax, edx
.text:00406DF0                 add     esp, 0Ch
.text:00406DF3                 retn
.text:00406DF4 ; ---------------------------------------------------------------------------
.text:00406DF4
.text:00406DF4 loc_406DF4:                             ; CODE XREF: .text:00406DEC↑j
.text:00406DF4                 mov     edx, 1000h
.text:00406DF9                 jmp     short loc_406DEE
.text:00406DF9 ; ---------------------------------------------------------------------------
.text:00406DFB                 align 10h
.text:00406E00
.text:00406E00 loc_406E00:                             ; CODE XREF: .text:00406DE7↑j
.text:00406E00                 mov     edx, 2000h
.text:00406E05                 jmp     short loc_406DEE
.text:00406E05 ; ---------------------------------------------------------------------------
.text:00406E07                 align 10h
.text:00406E10                 mov     ecx, [esp+4]
.text:00406E14                 xor     edx, edx
.text:00406E16                 test    cl, 10h
.text:00406E19                 setz    dl
.text:00406E1C                 dec     edx
.text:00406E1D                 and     edx, 0FFFFC000h
.text:00406E23                 add     edx, 8000h
.text:00406E29                 or      edx, 124h
.text:00406E2F                 test    cl, 1
.text:00406E32                 movzx   eax, dx
.text:00406E35                 jnz     short locret_406E3C
.text:00406E37                 or      eax, 92h
.text:00406E3C
.text:00406E3C locret_406E3C:                          ; CODE XREF: .text:00406E35↑j
.text:00406E3C                 retn
.text:00406E3C ; ---------------------------------------------------------------------------
.text:00406E3D                 align 10h
.text:00406E40                 sub     esp, 2Ch
.text:00406E43                 mov     [esp+20h], esi
.text:00406E47                 mov     esi, [esp+30h]
.text:00406E4B                 mov     [esp+1Ch], ebx
.text:00406E4F                 xor     ebx, ebx
.text:00406E51                 test    esi, esi
.text:00406E53                 mov     [esp+24h], edi
.text:00406E57                 mov     [esp+28h], ebp
.text:00406E5B                 jz      short loc_406EB0
.text:00406E5D                 cmp     byte ptr [esi], 0
.text:00406E60                 jnz     short loc_406EB4
.text:00406E62
.text:00406E62 loc_406E62:                             ; CODE XREF: .text:00406F1C↓j
.text:00406E62                                         ; .text:00406F27↓j
.text:00406E62                 test    esi, esi
.text:00406E64                 jz      short loc_406EB0
.text:00406E66                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406E6E                 mov     [esp], esi
.text:00406E71                 call    strrchr
.text:00406E76                 test    eax, eax
.text:00406E78                 jz      short loc_406EB0
.text:00406E7A                 cld
.text:00406E7B                 mov     ecx, 5
.text:00406E80                 mov     esi, eax
.text:00406E82                 mov     edi, offset aLnk ; ".lnk"
.text:00406E87                 repe cmpsb
.text:00406E89                 setz    cl
.text:00406E8C                 movzx   eax, cl
.text:00406E8F                 nop
.text:00406E90
.text:00406E90 loc_406E90:                             ; CODE XREF: .text:00406EB2↓j
.text:00406E90                 test    eax, eax
.text:00406E92                 jz      short loc_406E9A
.text:00406E94                 or      ebx, 0A000h
.text:00406E9A
.text:00406E9A loc_406E9A:                             ; CODE XREF: .text:00406E92↑j
.text:00406E9A                 mov     eax, ebx
.text:00406E9C                 mov     esi, [esp+20h]
.text:00406EA0                 mov     ebx, [esp+1Ch]
.text:00406EA4                 mov     edi, [esp+24h]
.text:00406EA8                 mov     ebp, [esp+28h]
.text:00406EAC                 add     esp, 2Ch
.text:00406EAF                 retn
.text:00406EB0 ; ---------------------------------------------------------------------------
.text:00406EB0
.text:00406EB0 loc_406EB0:                             ; CODE XREF: .text:00406E5B↑j
.text:00406EB0                                         ; .text:00406E64↑j ...
.text:00406EB0                 xor     eax, eax
.text:00406EB2                 jmp     short loc_406E90
.text:00406EB4 ; ---------------------------------------------------------------------------
.text:00406EB4
.text:00406EB4 loc_406EB4:                             ; CODE XREF: .text:00406E60↑j
.text:00406EB4                 mov     dword ptr [esp], offset ModuleName ; "KERNEL32.DLL"
.text:00406EBB                 call    GetModuleHandleA
.text:00406EC0                 sub     esp, 4
.text:00406EC3                 mov     ebp, eax
.text:00406EC5                 mov     dword ptr [esp+4], offset aGetbinarytypea ; "GetBinaryTypeA"
.text:00406ECD                 mov     [esp], eax
.text:00406ED0                 call    GetProcAddress
.text:00406ED5                 sub     esp, 8
.text:00406ED8                 test    eax, eax
.text:00406EDA                 mov     dword ptr [esp+14h], 0
.text:00406EE2                 jz      short loc_406EF8
.text:00406EE4                 mov     [esp], esi
.text:00406EE7                 lea     ecx, [esp+18h]
.text:00406EEB                 mov     [esp+4], ecx
.text:00406EEF                 call    eax
.text:00406EF1                 sub     esp, 8
.text:00406EF4                 test    eax, eax
.text:00406EF6                 jnz     short loc_406F58
.text:00406EF8
.text:00406EF8 loc_406EF8:                             ; CODE XREF: .text:00406EE2↑j
.text:00406EF8                 mov     edx, ds:Str
.text:00406EFE                 test    edx, edx
.text:00406F00                 jz      short loc_406F80
.text:00406F02
.text:00406F02 loc_406F02:                             ; CODE XREF: .text:00406F93↓j
.text:00406F02                                         ; .text:00406FA5↓j
.text:00406F02                 test    esi, esi
.text:00406F04                 jz      short loc_406F0B
.text:00406F06                 cmp     byte ptr [esi], 0
.text:00406F09                 jnz     short loc_406F2C
.text:00406F0B
.text:00406F0B loc_406F0B:                             ; CODE XREF: .text:00406F04↑j
.text:00406F0B                                         ; .text:00406F40↓j ...
.text:00406F0B                 mov     [esp], ebp
.text:00406F0E                 call    FreeLibrary
.text:00406F13                 sub     esp, 4
.text:00406F16                 mov     eax, [esp+14h]
.text:00406F1A                 test    eax, eax
.text:00406F1C                 jz      loc_406E62
.text:00406F22                 mov     ebx, 49h ; 'I'
.text:00406F27                 jmp     loc_406E62
.text:00406F2C ; ---------------------------------------------------------------------------
.text:00406F2C
.text:00406F2C loc_406F2C:                             ; CODE XREF: .text:00406F09↑j
.text:00406F2C                 mov     dword ptr [esp+4], 2Eh ; '.'
.text:00406F34                 mov     [esp], esi
.text:00406F37                 call    strrchr
.text:00406F3C                 test    eax, eax
.text:00406F3E                 mov     edi, eax
.text:00406F40                 jz      short loc_406F0B
.text:00406F42                 mov     [esp+4], eax
.text:00406F46                 mov     edx, ds:Str
.text:00406F4C                 mov     [esp], edx
.text:00406F4F                 call    strstr
.text:00406F54                 test    eax, eax
.text:00406F56                 jz      short loc_406F62
.text:00406F58
.text:00406F58 loc_406F58:                             ; CODE XREF: .text:00406EF6↑j
.text:00406F58                                         ; .text:00406F78↓j
.text:00406F58                 mov     dword ptr [esp+14h], 1
.text:00406F60                 jmp     short loc_406F0B
.text:00406F62 ; ---------------------------------------------------------------------------
.text:00406F62
.text:00406F62 loc_406F62:                             ; CODE XREF: .text:00406F56↑j
.text:00406F62                 mov     [esp+4], edi
.text:00406F66                 mov     edi, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:00406F6C                 mov     [esp], edi
.text:00406F6F                 call    strstr
.text:00406F74                 test    eax, eax
.text:00406F76                 jz      short loc_406F0B
.text:00406F78                 jmp     short loc_406F58
.text:00406F78 ; ---------------------------------------------------------------------------
.text:00406F7A                 align 10h
.text:00406F80
.text:00406F80 loc_406F80:                             ; CODE XREF: .text:00406F00↑j
.text:00406F80                 mov     dword ptr [esp], offset aPathext ; "PATHEXT"
.text:00406F87                 call    getenv
.text:00406F8C                 mov     ds:Str, eax
.text:00406F91                 test    eax, eax
.text:00406F93                 jnz     loc_406F02
.text:00406F99                 mov     ecx, off_40E084 ; ".com;.exe;.bat;.cmd"
.text:00406F9F                 mov     ds:Str, ecx
.text:00406FA5                 jmp     loc_406F02
.text:00406FA5 ; ---------------------------------------------------------------------------
.text:00406FAA                 align 10h
.text:00406FB0                 push    esi
.text:00406FB1                 push    ebx
.text:00406FB2                 sub     esp, 864h
.text:00406FB8                 mov     ebx, [esp+870h]
.text:00406FBF                 lea     edx, [esp+830h]
.text:00406FC6                 mov     esi, [esp+874h]
.text:00406FCD                 mov     [esp+4], edx
.text:00406FD1                 mov     [esp], ebx
.text:00406FD4                 call    loc_405E30
.text:00406FD9                 xor     edx, edx
.text:00406FDB                 test    eax, eax
.text:00406FDD                 jz      loc_4070C5
.text:00406FE3                 mov     ecx, [esp+830h]
.text:00406FEA                 test    cl, 10h
.text:00406FED                 mov     [esi], ecx
.text:00406FEF                 mov     eax, [esp+834h]
.text:00406FF6                 mov     edx, [esp+838h]
.text:00406FFD                 mov     [esi+4], eax
.text:00407000                 mov     [esi+8], edx
.text:00407003                 mov     eax, [esp+83Ch]
.text:0040700A                 mov     edx, [esp+840h]
.text:00407011                 mov     [esi+0Ch], eax
.text:00407014                 mov     [esi+10h], edx
.text:00407017                 mov     edx, [esp+848h]
.text:0040701E                 mov     eax, [esp+844h]
.text:00407025                 mov     [esi+18h], edx
.text:00407028                 mov     [esi+14h], eax
.text:0040702B                 mov     edx, [esp+84Ch]
.text:00407032                 mov     [esi+20h], edx
.text:00407035                 mov     edx, [esp+850h]
.text:0040703C                 mov     [esi+24h], edx
.text:0040703F                 jnz     loc_4070D0
.text:00407045                 mov     dword ptr [esi+28h], 1
.text:0040704C
.text:0040704C loc_40704C:                             ; CODE XREF: .text:004070DB↓j
.text:0040704C                 mov     [esp], ebx
.text:0040704F                 call    sub_4081A0
.text:00407054                 mov     [esp], eax
.text:00407057                 call    sub_407D70
.text:0040705C                 mov     [esp], eax
.text:0040705F                 lea     edx, [esp+30h]
.text:00407063                 mov     ebx, eax
.text:00407065                 mov     [esp+18h], edx
.text:00407069                 lea     ecx, [esp+2Ch]
.text:0040706D                 lea     edx, [esp+28h]
.text:00407071                 mov     [esp+14h], ecx
.text:00407075                 lea     ecx, [esp+24h]
.text:00407079                 mov     [esp+10h], edx
.text:0040707D                 lea     edx, [esp+430h]
.text:00407084                 mov     [esp+0Ch], ecx
.text:00407088                 mov     [esp+4], edx
.text:0040708C                 mov     dword ptr [esp+1Ch], 400h
.text:00407094                 mov     dword ptr [esp+8], 400h
.text:0040709C                 call    GetVolumeInformationA
.text:004070A1                 sub     esp, 20h
.text:004070A4                 test    eax, eax
.text:004070A6                 setz    cl
.text:004070A9                 mov     [esp], ebx
.text:004070AC                 movzx   edx, cl
.text:004070AF                 dec     edx
.text:004070B0                 and     [esp+24h], edx
.text:004070B4                 call    free
.text:004070B9                 mov     ecx, [esp+24h]
.text:004070BD                 mov     edx, 1
.text:004070C2                 mov     [esi+1Ch], ecx
.text:004070C5
.text:004070C5 loc_4070C5:                             ; CODE XREF: .text:00406FDD↑j
.text:004070C5                 add     esp, 864h
.text:004070CB                 mov     eax, edx
.text:004070CD                 pop     ebx
.text:004070CE                 pop     esi
.text:004070CF                 retn
.text:004070D0 ; ---------------------------------------------------------------------------
.text:004070D0
.text:004070D0 loc_4070D0:                             ; CODE XREF: .text:0040703F↑j
.text:004070D0                 mov     [esp], ebx
.text:004070D3                 call    loc_405FA0
.text:004070D8                 mov     [esi+28h], eax
.text:004070DB                 jmp     loc_40704C
.text:004070E0 ; ---------------------------------------------------------------------------
.text:004070E0                 push    ebp
.text:004070E1                 xor     edx, edx
.text:004070E3                 push    edi
.text:004070E4                 push    esi
.text:004070E5                 xor     esi, esi
.text:004070E7                 push    ebx
.text:004070E8                 sub     esp, 1Ch
.text:004070EB                 mov     ebx, [esp+5Ch]
.text:004070EF                 mov     ecx, [esp+30h]
.text:004070F3                 mov     edi, [esp+60h]
.text:004070F7                 or      esi, ebx
.text:004070F9                 mov     eax, [esp+4Ch]
.text:004070FD                 or      edi, edx
.text:004070FF                 mov     ebx, [esp+64h]
.text:00407103                 xor     edx, edx
.text:00407105                 test    cl, 10h
.text:00407108                 setz    dl
.text:0040710B                 mov     [ebx+10h], eax
.text:0040710E                 mov     [ebx+8], edi
.text:00407111                 mov     [ebx+0Ch], esi
.text:00407114                 dec     edx
.text:00407115                 and     edx, 0FFFFC000h
.text:0040711B                 mov     dword ptr [ebx+14h], 0
.text:00407122                 add     edx, 8000h
.text:00407128                 or      edx, 124h
.text:0040712E                 test    cl, 1
.text:00407131                 movzx   eax, dx
.text:00407134                 jnz     short loc_40713B
.text:00407136                 or      eax, 92h
.text:0040713B
.text:0040713B loc_40713B:                             ; CODE XREF: .text:00407134↑j
.text:0040713B                 mov     ebx, [esp+54h]
.text:0040713F                 xor     edx, edx
.text:00407141                 xor     ebp, ebp
.text:00407143                 mov     edi, [esp+50h]
.text:00407147                 mov     ecx, [esp+64h]
.text:0040714B                 mov     esi, edi
.text:0040714D                 or      [ecx], eax
.text:0040714F                 mov     edi, ebx
.text:00407151                 or      edi, ebp
.text:00407153                 mov     ebp, edx
.text:00407155                 mov     ebx, [esp+64h]
.text:00407159                 or      ebp, esi
.text:0040715B                 mov     esi, [esp+58h]
.text:0040715F                 mov     edx, [esp+40h]
.text:00407163                 mov     [ebx+30h], edi
.text:00407166                 mov     [ebx+18h], esi
.text:00407169                 mov     ecx, edx
.text:0040716B                 xor     esi, esi
.text:0040716D                 mov     [ebx+34h], ebp
.text:00407170                 xor     edx, edx
.text:00407172                 or      esi, ecx
.text:00407174                 mov     dword ptr [esp+8], 989680h
.text:0040717C                 mov     ebx, [esp+3Ch]
.text:00407180                 mov     ecx, esi
.text:00407182                 mov     dword ptr [esp+0Ch], 0
.text:0040718A                 or      ebx, edx
.text:0040718C                 mov     edx, ebx
.text:0040718E                 sub     edx, 0D53E8000h
.text:00407194                 sbb     ecx, 19DB1DEh
.text:0040719A                 mov     [esp+4], ecx
.text:0040719E                 mov     [esp], edx
.text:004071A1                 call    sub_40D1B0
.text:004071A6                 mov     edx, eax
.text:004071A8                 mov     ecx, [esp+64h]
.text:004071AC                 shr     eax, 1Fh
.text:004071AF                 dec     eax
.text:004071B0                 and     edx, eax
.text:004071B2                 mov     [ecx+38h], edx
.text:004071B5                 mov     [esp], ebx
.text:004071B8                 mov     [esp+4], esi
.text:004071BC                 mov     dword ptr [esp+8], 989680h
.text:004071C4                 mov     dword ptr [esp+0Ch], 0
.text:004071CC                 call    sub_40D2D0
.text:004071D1                 lea     ecx, [eax+eax*4]
.text:004071D4                 lea     esi, [ecx+ecx*4]
.text:004071D7                 mov     eax, [esp+64h]
.text:004071DB                 shl     esi, 2
.text:004071DE                 mov     ebx, esi
.text:004071E0                 shr     ebx, 1Fh
.text:004071E3                 dec     ebx
.text:004071E4                 and     ebx, esi
.text:004071E6                 xor     esi, esi
.text:004071E8                 mov     [eax+3Ch], ebx
.text:004071EB                 mov     edx, [esp+38h]
.text:004071EF                 mov     dword ptr [esp+8], 989680h
.text:004071F7                 mov     ebx, [esp+34h]
.text:004071FB                 mov     dword ptr [esp+0Ch], 0
.text:00407203                 mov     ecx, edx
.text:00407205                 xor     edx, edx
.text:00407207                 or      ebx, edx
.text:00407209                 or      esi, ecx
.text:0040720B                 mov     edx, ebx
.text:0040720D                 sub     edx, 0D53E8000h
.text:00407213                 mov     ecx, esi
.text:00407215                 sbb     ecx, 19DB1DEh
.text:0040721B                 mov     [esp+4], ecx
.text:0040721F                 mov     [esp], edx
.text:00407222                 call    sub_40D1B0
.text:00407227                 mov     edx, eax
.text:00407229                 mov     ecx, [esp+64h]
.text:0040722D                 shr     eax, 1Fh
.text:00407230                 dec     eax
.text:00407231                 and     edx, eax
.text:00407233                 mov     [ecx+48h], edx
.text:00407236                 mov     [esp], ebx
.text:00407239                 mov     [esp+4], esi
.text:0040723D                 mov     dword ptr [esp+8], 989680h
.text:00407245                 mov     dword ptr [esp+0Ch], 0
.text:0040724D                 call    sub_40D2D0
.text:00407252                 lea     edx, [eax+eax*4]
.text:00407255                 mov     ebx, [esp+64h]
.text:00407259                 lea     ecx, [edx+edx*4]
.text:0040725C                 shl     ecx, 2
.text:0040725F                 mov     esi, ecx
.text:00407261                 shr     esi, 1Fh
.text:00407264                 dec     esi
.text:00407265                 and     esi, ecx
.text:00407267                 mov     [ebx+4Ch], esi
.text:0040726A                 mov     edx, [esp+48h]
.text:0040726E                 xor     esi, esi
.text:00407270                 mov     dword ptr [esp+8], 989680h
.text:00407278                 mov     ebx, [esp+44h]
.text:0040727C                 mov     dword ptr [esp+0Ch], 0
.text:00407284                 mov     ecx, edx
.text:00407286                 xor     edx, edx
.text:00407288                 or      ebx, edx
.text:0040728A                 or      esi, ecx
.text:0040728C                 mov     edx, ebx
.text:0040728E                 sub     edx, 0D53E8000h
.text:00407294                 mov     ecx, esi
.text:00407296                 sbb     ecx, 19DB1DEh
.text:0040729C                 mov     [esp+4], ecx
.text:004072A0                 mov     [esp], edx
.text:004072A3                 call    sub_40D1B0
.text:004072A8                 mov     edx, eax
.text:004072AA                 mov     ecx, [esp+64h]
.text:004072AE                 shr     eax, 1Fh
.text:004072B1                 dec     eax
.text:004072B2                 and     edx, eax
.text:004072B4                 mov     [ecx+40h], edx
.text:004072B7                 mov     [esp+4], esi
.text:004072BB                 mov     dword ptr [esp+8], 989680h
.text:004072C3                 mov     dword ptr [esp+0Ch], 0
.text:004072CB                 mov     [esp], ebx
.text:004072CE                 call    sub_40D2D0
.text:004072D3                 lea     edx, [eax+eax*4]
.text:004072D6                 lea     esi, [edx+edx*4]
.text:004072D9                 mov     eax, [esp+64h]
.text:004072DD                 shl     esi, 2
.text:004072E0                 mov     edx, ebp
.text:004072E2                 mov     ecx, esi
.text:004072E4                 mov     dword ptr [eax+50h], 200h
.text:004072EB                 shr     ecx, 1Fh
.text:004072EE                 dec     ecx
.text:004072EF                 and     ecx, esi
.text:004072F1                 test    ebp, ebp
.text:004072F3                 mov     [eax+44h], ecx
.text:004072F6                 mov     eax, edi
.text:004072F8                 js      short loc_407332
.text:004072FA
.text:004072FA loc_4072FA:                             ; CODE XREF: .text:0040733A↓j
.text:004072FA                 xor     esi, esi
.text:004072FC                 mov     ebp, edi
.text:004072FE                 mov     ecx, eax
.text:00407300                 shrd    ecx, edx, 9
.text:00407304                 mov     ebx, edx
.text:00407306                 and     ebp, 1FFh
.text:0040730C                 mov     eax, esi
.text:0040730E                 sar     ebx, 9
.text:00407311                 or      eax, ebp
.text:00407313                 jz      short loc_40731B
.text:00407315                 add     ecx, 1
.text:00407318                 adc     ebx, 0
.text:0040731B
.text:0040731B loc_40731B:                             ; CODE XREF: .text:00407313↑j
.text:0040731B                 mov     edx, [esp+64h]
.text:0040731F                 mov     eax, 1
.text:00407324                 mov     [edx+58h], ecx
.text:00407327                 mov     [edx+5Ch], ebx
.text:0040732A                 add     esp, 1Ch
.text:0040732D                 pop     ebx
.text:0040732E                 pop     esi
.text:0040732F                 pop     edi
.text:00407330                 pop     ebp
.text:00407331                 retn
.text:00407332 ; ---------------------------------------------------------------------------
.text:00407332
.text:00407332 loc_407332:                             ; CODE XREF: .text:004072F8↑j
.text:00407332                 add     eax, 1FFh
.text:00407337                 adc     edx, 0
.text:0040733A                 jmp     short loc_4072FA
.text:0040733A ; ---------------------------------------------------------------------------
.text:0040733C                 align 10h
.text:00407340                 push    ebp
.text:00407341                 push    edi
.text:00407342                 xor     edi, edi
.text:00407344                 push    esi
.text:00407345                 xor     esi, esi
.text:00407347                 push    ebx
.text:00407348                 sub     esp, 0Ch
.text:0040734B                 mov     dword ptr [esp], offset aKernel32 ; "KERNEL32"
.text:00407352                 call    LoadLibraryA
.text:00407357                 sub     esp, 4
.text:0040735A                 mov     ebp, eax
.text:0040735C                 mov     dword ptr [esp+4], offset aGetcompressedf ; "GetCompressedFileSizeA"
.text:00407364                 mov     [esp], eax
.text:00407367                 call    GetProcAddress
.text:0040736C                 sub     esp, 8
.text:0040736F                 test    eax, eax
.text:00407371                 jz      short loc_4073A2
.text:00407373                 lea     ecx, [esp+8]
.text:00407377                 mov     [esp+4], ecx
.text:0040737B                 mov     ecx, [esp+20h]
.text:0040737F                 mov     [esp], ecx
.text:00407382                 call    eax
.text:00407384                 sub     esp, 8
.text:00407387                 mov     ebx, eax
.text:00407389                 cmp     eax, 0FFFFFFFFh
.text:0040738C                 jz      short loc_4073BD
.text:0040738E
.text:0040738E loc_40738E:                             ; CODE XREF: .text:004073C6↓j
.text:0040738E                 mov     esi, [esp+8]
.text:00407392                 mov     ecx, ebx
.text:00407394                 xor     edi, edi
.text:00407396                 xor     ebx, ebx
.text:00407398                 mov     edx, esi
.text:0040739A                 mov     esi, ecx
.text:0040739C                 or      esi, edi
.text:0040739E                 mov     edi, ebx
.text:004073A0                 or      edi, edx
.text:004073A2
.text:004073A2 loc_4073A2:                             ; CODE XREF: .text:00407371↑j
.text:004073A2                                         ; .text:004073C4↓j
.text:004073A2                 test    ebp, ebp
.text:004073A4                 jz      short loc_4073B1
.text:004073A6                 mov     [esp], ebp
.text:004073A9                 call    FreeLibrary
.text:004073AE                 sub     esp, 4
.text:004073B1
.text:004073B1 loc_4073B1:                             ; CODE XREF: .text:004073A4↑j
.text:004073B1                 add     esp, 0Ch
.text:004073B4                 mov     eax, esi
.text:004073B6                 mov     edx, edi
.text:004073B8                 pop     ebx
.text:004073B9                 pop     esi
.text:004073BA                 pop     edi
.text:004073BB                 pop     ebp
.text:004073BC                 retn
.text:004073BD ; ---------------------------------------------------------------------------
.text:004073BD
.text:004073BD loc_4073BD:                             ; CODE XREF: .text:0040738C↑j
.text:004073BD                 call    GetLastError
.text:004073C2                 test    eax, eax
.text:004073C4                 jnz     short loc_4073A2
.text:004073C6                 jmp     short loc_40738E
.text:004073C6 ; ---------------------------------------------------------------------------
.text:004073C8                 align 10h
.text:004073D0
.text:004073D0 ; =============== S U B R O U T I N E =======================================
.text:004073D0
.text:004073D0
.text:004073D0 ; int __cdecl sub_4073D0(LPCSTR, int)
.text:004073D0 sub_4073D0      proc near               ; CODE XREF: sub_40B6A0-3D8F↓p
.text:004073D0
.text:004073D0 lpRootPathName  = dword ptr -8FCh
.text:004073D0 lpVolumeNameBuffer= dword ptr -8F8h
.text:004073D0 nVolumeNameSize = dword ptr -8F4h
.text:004073D0 lpVolumeSerialNumber= dword ptr -8F0h
.text:004073D0 lpMaximumComponentLength= dword ptr -8ECh
.text:004073D0 lpFileSystemFlags= dword ptr -8E8h
.text:004073D0 lpFileSystemNameBuffer= dword ptr -8E4h
.text:004073D0 nFileSystemNameSize= dword ptr -8E0h
.text:004073D0 VolumeSerialNumber= dword ptr -8D8h
.text:004073D0 MaximumComponentLength= dword ptr -8D4h
.text:004073D0 FileSystemFlags = dword ptr -8D0h
.text:004073D0 var_8CC         = dword ptr -8CCh
.text:004073D0 var_8C8         = dword ptr -8C8h
.text:004073D0 var_8C4         = dword ptr -8C4h
.text:004073D0 var_8C0         = dword ptr -8C0h
.text:004073D0 var_8BC         = dword ptr -8BCh
.text:004073D0 var_8B8         = dword ptr -8B8h
.text:004073D0 var_8B4         = dword ptr -8B4h
.text:004073D0 var_8B0         = dword ptr -8B0h
.text:004073D0 var_8AC         = dword ptr -8ACh
.text:004073D0 var_8A8         = dword ptr -8A8h
.text:004073D0 var_8A4         = dword ptr -8A4h
.text:004073D0 var_8A0         = dword ptr -8A0h
.text:004073D0 var_89C         = dword ptr -89Ch
.text:004073D0 FileSystemNameBuffer= byte ptr -88Ch
.text:004073D0 VolumeNameBuffer= byte ptr -48Ch
.text:004073D0 var_8C          = dword ptr -8Ch
.text:004073D0 var_88          = dword ptr -88h
.text:004073D0 var_84          = dword ptr -84h
.text:004073D0 var_80          = dword ptr -80h
.text:004073D0 var_7C          = dword ptr -7Ch
.text:004073D0 var_78          = dword ptr -78h
.text:004073D0 var_74          = dword ptr -74h
.text:004073D0 var_70          = dword ptr -70h
.text:004073D0 var_6C          = dword ptr -6Ch
.text:004073D0 var_5C          = dword ptr -5Ch
.text:004073D0 var_58          = dword ptr -58h
.text:004073D0 var_54          = dword ptr -54h
.text:004073D0 var_50          = dword ptr -50h
.text:004073D0 var_4C          = dword ptr -4Ch
.text:004073D0 var_48          = dword ptr -48h
.text:004073D0 var_44          = dword ptr -44h
.text:004073D0 var_3C          = dword ptr -3Ch
.text:004073D0 var_38          = dword ptr -38h
.text:004073D0 var_34          = dword ptr -34h
.text:004073D0 arg_0           = dword ptr  4
.text:004073D0 arg_4           = dword ptr  8
.text:004073D0
.text:004073D0                 push    ebp
.text:004073D1                 xor     eax, eax
.text:004073D3                 mov     ecx, 0Dh
.text:004073D8                 push    edi
.text:004073D9                 push    esi
.text:004073DA                 push    ebx
.text:004073DB                 sub     esp, 8ECh
.text:004073E1                 lea     edi, [esp+8FCh+var_5C]
.text:004073E8                 cld
.text:004073E9                 lea     edx, [esp+8FCh+var_8C]
.text:004073F0                 rep stosd
.text:004073F2                 mov     [esp+8FCh+lpVolumeNameBuffer], edx
.text:004073F6                 lea     esi, [esp+8FCh+var_5C]
.text:004073FD                 mov     edx, [esp+8FCh+arg_0]
.text:00407404                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407407                 call    loc_405E30
.text:0040740C                 test    eax, eax
.text:0040740E                 mov     edx, 0FFFFFFFFh
.text:00407413                 jz      loc_4077A4
.text:00407419                 mov     edx, [esp+8FCh+var_88]
.text:00407420                 mov     ebp, [esp+8FCh+var_84]
.text:00407427                 mov     edi, [esp+8FCh+var_80]
.text:0040742E                 mov     [esp+8FCh+var_58], edx
.text:00407435                 mov     ecx, [esp+8FCh+var_7C]
.text:0040743C                 mov     ebx, [esp+8FCh+var_8C]
.text:00407443                 mov     [esp+8FCh+var_54], ebp
.text:0040744A                 mov     edx, [esp+8FCh+var_78]
.text:00407451                 mov     ebp, [esp+8FCh+var_74]
.text:00407458                 mov     [esp+8FCh+var_50], edi
.text:0040745F                 test    bl, 10h
.text:00407462                 mov     edi, [esp+8FCh+var_70]
.text:00407469                 mov     [esp+8FCh+var_4C], ecx
.text:00407470                 mov     ecx, [esp+8FCh+var_6C]
.text:00407477                 mov     [esp+8FCh+var_5C], ebx
.text:0040747E                 mov     [esp+8FCh+var_48], edx
.text:00407485                 mov     [esp+8FCh+var_44], ebp
.text:0040748C                 mov     [esp+8FCh+var_3C], edi
.text:00407493                 mov     [esp+8FCh+var_38], ecx
.text:0040749A                 jnz     loc_4077C0
.text:004074A0                 mov     ebx, 1
.text:004074A5                 mov     [esp+8FCh+var_34], ebx
.text:004074AC
.text:004074AC loc_4074AC:                             ; CODE XREF: sub_4073D0+406↓j
.text:004074AC                 mov     eax, [esp+8FCh+arg_0]
.text:004074B3                 lea     edi, [esp+8FCh+FileSystemNameBuffer]
.text:004074B7                 lea     ebx, [esp+8FCh+FileSystemFlags]
.text:004074BB                 mov     [esp+8FCh+lpRootPathName], eax ; LPCSTR
.text:004074BE                 call    sub_4081A0
.text:004074C3                 mov     [esp+8FCh+lpRootPathName], eax
.text:004074C6                 call    sub_407D70
.text:004074CB                 mov     [esp+8FCh+lpFileSystemNameBuffer], edi ; lpFileSystemNameBuffer
.text:004074CF                 lea     ecx, [esp+8FCh+VolumeSerialNumber]
.text:004074D3                 mov     ebp, eax
.text:004074D5                 mov     [esp+8FCh+lpVolumeSerialNumber], ecx ; lpVolumeSerialNumber
.text:004074D9                 lea     edx, [esp+8FCh+MaximumComponentLength]
.text:004074DD                 lea     edi, [esp+8FCh+VolumeNameBuffer]
.text:004074E4                 mov     [esp+8FCh+lpFileSystemFlags], ebx ; lpFileSystemFlags
.text:004074E8                 mov     [esp+8FCh+lpMaximumComponentLength], edx ; lpMaximumComponentLength
.text:004074EC                 mov     [esp+8FCh+lpVolumeNameBuffer], edi ; lpVolumeNameBuffer
.text:004074F0                 mov     [esp+8FCh+nFileSystemNameSize], 400h ; nFileSystemNameSize
.text:004074F8                 mov     [esp+8FCh+nVolumeNameSize], 400h ; nVolumeNameSize
.text:00407500                 mov     [esp+8FCh+lpRootPathName], eax ; lpRootPathName
.text:00407503                 call    GetVolumeInformationA
.text:00407508                 sub     esp, 20h
.text:0040750B                 test    eax, eax
.text:0040750D                 lea     edi, [esp+8FCh+var_8CC]
.text:00407511                 setz    bl
.text:00407514                 mov     [esp+8FCh+lpRootPathName], ebp ; Block
.text:00407517                 xor     ebp, ebp
.text:00407519                 movzx   edx, bl
.text:0040751C                 dec     edx
.text:0040751D                 xor     ebx, ebx
.text:0040751F                 and     [esp+8FCh+VolumeSerialNumber], edx
.text:00407523                 call    free
.text:00407528                 cld
.text:00407529                 mov     ecx, [esp+8FCh+VolumeSerialNumber]
.text:0040752D                 mov     [esi+1Ch], ecx
.text:00407530                 mov     ecx, 0Dh
.text:00407535                 rep movsd
.text:00407537                 mov     edi, [esp+8FCh+var_8A0]
.text:0040753B                 mov     edx, [esp+8FCh+var_89C]
.text:0040753F                 mov     ecx, [esp+8FCh+var_8CC]
.text:00407543                 or      ebp, edi
.text:00407545                 mov     esi, [esp+8FCh+var_8B0]
.text:00407549                 mov     edi, [esp+8FCh+arg_4]
.text:00407550                 or      edx, ebx
.text:00407552                 mov     [edi+8], edx
.text:00407555                 xor     edx, edx
.text:00407557                 test    cl, 10h
.text:0040755A                 setz    dl
.text:0040755D                 mov     [edi+0Ch], ebp
.text:00407560                 mov     [edi+10h], esi
.text:00407563                 mov     dword ptr [edi+14h], 0
.text:0040756A                 dec     edx
.text:0040756B                 and     edx, 0FFFFC000h
.text:00407571                 add     edx, 8000h
.text:00407577                 or      edx, 124h
.text:0040757D                 test    cl, 1
.text:00407580                 movzx   eax, dx
.text:00407583                 jnz     short loc_40758A
.text:00407585                 or      eax, 92h
.text:0040758A
.text:0040758A loc_40758A:                             ; CODE XREF: sub_4073D0+1B3↑j
.text:0040758A                 mov     ebx, [esp+8FCh+var_8A8]
.text:0040758E                 xor     edx, edx
.text:00407590                 xor     ebp, ebp
.text:00407592                 mov     edi, [esp+8FCh+var_8AC]
.text:00407596                 mov     ecx, [esp+8FCh+arg_4]
.text:0040759D                 mov     esi, edi
.text:0040759F                 or      [ecx], eax
.text:004075A1                 mov     edi, ebx
.text:004075A3                 or      edi, ebp
.text:004075A5                 mov     ebp, edx
.text:004075A7                 mov     ebx, [esp+8FCh+var_8A4]
.text:004075AB                 or      ebp, esi
.text:004075AD                 mov     esi, [esp+8FCh+arg_4]
.text:004075B4                 mov     edx, [esp+8FCh+var_8BC]
.text:004075B8                 mov     [esi+18h], ebx
.text:004075BB                 mov     ebx, [esp+8FCh+var_8C0]
.text:004075BF                 mov     ecx, edx
.text:004075C1                 mov     [esi+30h], edi
.text:004075C4                 xor     edx, edx
.text:004075C6                 mov     [esi+34h], ebp
.text:004075C9                 or      ebx, edx
.text:004075CB                 xor     esi, esi
.text:004075CD                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004075D5                 or      esi, ecx
.text:004075D7                 mov     edx, ebx
.text:004075D9                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004075E1                 sub     edx, 0D53E8000h
.text:004075E7                 mov     ecx, esi
.text:004075E9                 sbb     ecx, 19DB1DEh
.text:004075EF                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:004075F3                 mov     [esp+8FCh+lpRootPathName], edx
.text:004075F6                 call    sub_40D1B0
.text:004075FB                 mov     edx, eax
.text:004075FD                 mov     ecx, [esp+8FCh+arg_4]
.text:00407604                 shr     eax, 1Fh
.text:00407607                 dec     eax
.text:00407608                 and     edx, eax
.text:0040760A                 mov     [ecx+38h], edx
.text:0040760D                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407610                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407614                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040761C                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407624                 call    sub_40D2D0
.text:00407629                 lea     ecx, [eax+eax*4]
.text:0040762C                 lea     ebx, [ecx+ecx*4]
.text:0040762F                 mov     eax, [esp+8FCh+arg_4]
.text:00407636                 shl     ebx, 2
.text:00407639                 mov     esi, ebx
.text:0040763B                 shr     esi, 1Fh
.text:0040763E                 dec     esi
.text:0040763F                 and     esi, ebx
.text:00407641                 mov     [eax+3Ch], esi
.text:00407644                 mov     edx, [esp+8FCh+var_8C4]
.text:00407648                 xor     esi, esi
.text:0040764A                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:00407652                 mov     ebx, [esp+8FCh+var_8C8]
.text:00407656                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:0040765E                 mov     ecx, edx
.text:00407660                 xor     edx, edx
.text:00407662                 or      ebx, edx
.text:00407664                 or      esi, ecx
.text:00407666                 mov     edx, ebx
.text:00407668                 sub     edx, 0D53E8000h
.text:0040766E                 mov     ecx, esi
.text:00407670                 sbb     ecx, 19DB1DEh
.text:00407676                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:0040767A                 mov     [esp+8FCh+lpRootPathName], edx
.text:0040767D                 call    sub_40D1B0
.text:00407682                 mov     edx, eax
.text:00407684                 mov     ecx, [esp+8FCh+arg_4]
.text:0040768B                 shr     eax, 1Fh
.text:0040768E                 dec     eax
.text:0040768F                 and     edx, eax
.text:00407691                 mov     [ecx+48h], edx
.text:00407694                 mov     [esp+8FCh+lpRootPathName], ebx
.text:00407697                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:0040769B                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004076A3                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004076AB                 call    sub_40D2D0
.text:004076B0                 lea     ecx, [eax+eax*4]
.text:004076B3                 lea     ebx, [ecx+ecx*4]
.text:004076B6                 mov     eax, [esp+8FCh+arg_4]
.text:004076BD                 shl     ebx, 2
.text:004076C0                 mov     esi, ebx
.text:004076C2                 shr     esi, 1Fh
.text:004076C5                 dec     esi
.text:004076C6                 and     esi, ebx
.text:004076C8                 mov     [eax+4Ch], esi
.text:004076CB                 mov     edx, [esp+8FCh+var_8B4]
.text:004076CF                 xor     esi, esi
.text:004076D1                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:004076D9                 mov     ebx, [esp+8FCh+var_8B8]
.text:004076DD                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:004076E5                 mov     ecx, edx
.text:004076E7                 xor     edx, edx
.text:004076E9                 or      ebx, edx
.text:004076EB                 or      esi, ecx
.text:004076ED                 mov     edx, ebx
.text:004076EF                 sub     edx, 0D53E8000h
.text:004076F5                 mov     ecx, esi
.text:004076F7                 sbb     ecx, 19DB1DEh
.text:004076FD                 mov     [esp+8FCh+lpVolumeNameBuffer], ecx
.text:00407701                 mov     [esp+8FCh+lpRootPathName], edx
.text:00407704                 call    sub_40D1B0
.text:00407709                 mov     edx, eax
.text:0040770B                 mov     ecx, [esp+8FCh+arg_4]
.text:00407712                 shr     eax, 1Fh
.text:00407715                 dec     eax
.text:00407716                 and     edx, eax
.text:00407718                 mov     [ecx+40h], edx
.text:0040771B                 mov     [esp+8FCh+lpRootPathName], ebx
.text:0040771E                 mov     [esp+8FCh+lpVolumeNameBuffer], esi
.text:00407722                 mov     [esp+8FCh+nVolumeNameSize], 989680h
.text:0040772A                 mov     [esp+8FCh+lpVolumeSerialNumber], 0
.text:00407732                 call    sub_40D2D0
.text:00407737                 lea     ebx, [eax+eax*4]
.text:0040773A                 mov     esi, [esp+8FCh+arg_4]
.text:00407741                 lea     edx, [ebx+ebx*4]
.text:00407744                 shl     edx, 2
.text:00407747                 mov     eax, edi
.text:00407749                 mov     ecx, edx
.text:0040774B                 mov     dword ptr [esi+50h], 200h
.text:00407752                 shr     ecx, 1Fh
.text:00407755                 dec     ecx
.text:00407756                 and     ecx, edx
.text:00407758                 test    ebp, ebp
.text:0040775A                 mov     edx, ebp
.text:0040775C                 mov     [esi+44h], ecx
.text:0040775F                 js      short loc_4077B1
.text:00407761
.text:00407761 loc_407761:                             ; CODE XREF: sub_4073D0+3E9↓j
.text:00407761                 xor     esi, esi
.text:00407763                 mov     ebp, edi
.text:00407765                 mov     ecx, eax
.text:00407767                 shrd    ecx, edx, 9
.text:0040776B                 mov     ebx, edx
.text:0040776D                 and     ebp, 1FFh
.text:00407773                 mov     eax, esi
.text:00407775                 sar     ebx, 9
.text:00407778                 or      eax, ebp
.text:0040777A                 jz      short loc_407782
.text:0040777C                 add     ecx, 1
.text:0040777F                 adc     ebx, 0
.text:00407782
.text:00407782 loc_407782:                             ; CODE XREF: sub_4073D0+3AA↑j
.text:00407782                 mov     edx, [esp+8FCh+arg_4]
.text:00407789                 mov     [edx+5Ch], ebx
.text:0040778C                 mov     ebx, [esp+8FCh+arg_0]
.text:00407793                 mov     [edx+58h], ecx
.text:00407796                 mov     [esp+8FCh+lpVolumeNameBuffer], edx ; int
.text:0040779A                 mov     [esp+8FCh+lpRootPathName], ebx ; String1
.text:0040779D                 call    sub_4065F0
.text:004077A2                 xor     edx, edx
.text:004077A4
.text:004077A4 loc_4077A4:                             ; CODE XREF: sub_4073D0+43↑j
.text:004077A4                 add     esp, 8ECh
.text:004077AA                 mov     eax, edx
.text:004077AC                 pop     ebx
.text:004077AD                 pop     esi
.text:004077AE                 pop     edi
.text:004077AF                 pop     ebp
.text:004077B0                 retn
.text:004077B1 ; ---------------------------------------------------------------------------
.text:004077B1
.text:004077B1 loc_4077B1:                             ; CODE XREF: sub_4073D0+38F↑j
.text:004077B1                 add     eax, 1FFh
.text:004077B6                 adc     edx, 0
.text:004077B9                 jmp     short loc_407761
.text:004077B9 ; ---------------------------------------------------------------------------
.text:004077BB                 align 10h
.text:004077C0
.text:004077C0 loc_4077C0:                             ; CODE XREF: sub_4073D0+CA↑j
.text:004077C0                 mov     eax, [esp+8FCh+arg_0]
.text:004077C7                 mov     [esp+8FCh+lpRootPathName], eax
.text:004077CA                 call    loc_405FA0
.text:004077CF                 mov     [esp+8FCh+var_34], eax
.text:004077D6                 jmp     loc_4074AC
.text:004077D6 sub_4073D0      endp
.text:004077D6
.text:004077D6 ; ---------------------------------------------------------------------------
.text:004077DB                 align 10h
.text:004077E0 ; START OF FUNCTION CHUNK FOR sub_40B6A0
.text:004077E0
.text:004077E0 loc_4077E0:                             ; CODE XREF: sub_40B6A0+26↓j
.text:004077E0                 cld
.text:004077E1                 sub     esp, 2Ch
.text:004077E4                 xor     eax, eax
.text:004077E6                 mov     [esp+2Ch+var_10], ebx
.text:004077EA                 mov     ecx, 18h
.text:004077EF                 mov     ebx, [esp+2Ch+arg_0]
.text:004077F3                 mov     [esp+2Ch+var_C], esi
.text:004077F7                 mov     esi, [esp+2Ch+arg_4]
.text:004077FB                 test    ebx, ebx
.text:004077FD                 mov     [esp+2Ch+var_8], edi
.text:00407801                 mov     edi, esi
.text:00407803                 mov     [esp+2Ch+var_4], ebp
.text:00407807                 rep stosd
.text:00407809                 jz      short loc_407810
.text:0040780B                 cmp     byte ptr [ebx], 0
.text:0040780E                 jnz     short loc_407828
.text:00407810
.text:00407810 loc_407810:                             ; CODE XREF: sub_40B6A0-3E97↑j
.text:00407810                 xor     edx, edx
.text:00407812
.text:00407812 loc_407812:                             ; CODE XREF: sub_40B6A0-3E61↓j
.text:00407812                                         ; sub_40B6A0-3DB8↓j
.text:00407812                 mov     ebx, [esp+2Ch+var_10]
.text:00407816                 mov     eax, edx
.text:00407818                 mov     esi, [esp+2Ch+var_C]
.text:0040781C                 mov     edi, [esp+2Ch+var_8]
.text:00407820                 mov     ebp, [esp+2Ch+var_4]
.text:00407824                 add     esp, 2Ch
.text:00407827                 retn
.text:00407828 ; ---------------------------------------------------------------------------
.text:00407828
.text:00407828 loc_407828:                             ; CODE XREF: sub_40B6A0-3E92↑j
.text:00407828                 mov     [esp+2Ch+dwDesiredAccess], 0 ; int
.text:00407830                 mov     [esp+2Ch+lpFileName], ebx ; lpFileName
.text:00407833                 call    sub_409310
.text:00407838                 test    eax, eax
.text:0040783A                 mov     edx, 0FFFFFFFFh
.text:0040783F                 jnz     short loc_407812
.text:00407841                 mov     [esp+2Ch+lpFileName], ebx ; LPCSTR
.text:00407844                 call    sub_4091C0
.text:00407849                 mov     [esp+2Ch+lpFileName], eax
.text:0040784C                 call    sub_407D70
.text:00407851                 mov     [esp+2Ch+lpFileName], eax ; lpFileName
.text:00407854                 mov     ebp, eax
.text:00407856                 mov     [esp+2Ch+hTemplateFile], 0 ; hTemplateFile
.text:0040785E                 mov     [esp+2Ch+dwFlagsAndAttributes], 2000001h ; dwFlagsAndAttributes
.text:00407866                 mov     [esp+2Ch+dwCreationDisposition], 3 ; dwCreationDisposition
.text:0040786E                 mov     [esp+2Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00407876                 mov     [esp+2Ch+dwShareMode], 0 ; dwShareMode
.text:0040787E                 mov     [esp+2Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00407886                 call    CreateFileA
.text:0040788B                 sub     esp, 1Ch
.text:0040788E                 mov     ebx, eax
.text:00407890                 mov     [esp+2Ch+dwDesiredAccess], esi
.text:00407894                 mov     [esp+2Ch+lpFileName], eax
.text:00407897                 call    loc_406120
.text:0040789C                 mov     [esp+2Ch+lpFileName], ebx ; hObject
.text:0040789F                 mov     edi, eax
.text:004078A1                 call    CloseHandle
.text:004078A6                 sub     esp, 4
.text:004078A9                 cmp     edi, 0FFFFFFFFh
.text:004078AC                 jz      short loc_40790A
.text:004078AE                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:004078B2                 mov     [esp+2Ch+lpFileName], ebp ; String1
.text:004078B5                 call    sub_4065F0
.text:004078BA
.text:004078BA loc_4078BA:                             ; CODE XREF: sub_40B6A0-3D88↓j
.text:004078BA                 mov     edx, [esi]
.text:004078BC                 and     edx, 0F000h
.text:004078C2                 cmp     edx, 4000h
.text:004078C8                 jz      short loc_4078FD
.text:004078CA
.text:004078CA loc_4078CA:                             ; CODE XREF: sub_40B6A0-3D98↓j
.text:004078CA                 cmp     edi, 0FFFFFFFFh
.text:004078CD                 jz      short loc_4078ED
.text:004078CF
.text:004078CF loc_4078CF:                             ; CODE XREF: sub_40B6A0-3DA5↓j
.text:004078CF                 mov     [esp+2Ch+lpFileName], 0 ; uMode
.text:004078D6                 call    SetErrorMode
.text:004078DB                 sub     esp, 4
.text:004078DE                 mov     [esp+2Ch+lpFileName], ebp ; Block
.text:004078E1                 call    free
.text:004078E6                 mov     edx, edi
.text:004078E8                 jmp     loc_407812
.text:004078ED ; ---------------------------------------------------------------------------
.text:004078ED
.text:004078ED loc_4078ED:                             ; CODE XREF: sub_40B6A0-3DD3↑j
.text:004078ED                 call    sub_409170
.text:004078F2                 mov     esi, eax
.text:004078F4                 call    _errno
.text:004078F9                 mov     [eax], esi
.text:004078FB                 jmp     short loc_4078CF
.text:004078FD ; ---------------------------------------------------------------------------
.text:004078FD
.text:004078FD loc_4078FD:                             ; CODE XREF: sub_40B6A0-3DD8↑j
.text:004078FD                 mov     [esp+2Ch+lpFileName], ebp
.text:00407900                 call    loc_405FA0
.text:00407905                 mov     [esi+18h], eax
.text:00407908                 jmp     short loc_4078CA
.text:0040790A ; ---------------------------------------------------------------------------
.text:0040790A
.text:0040790A loc_40790A:                             ; CODE XREF: sub_40B6A0-3DF4↑j
.text:0040790A                 mov     [esp+2Ch+dwDesiredAccess], esi ; int
.text:0040790E                 mov     [esp+2Ch+lpFileName], ebp ; LPCSTR
.text:00407911                 call    sub_4073D0
.text:00407916                 mov     edi, eax
.text:00407918                 jmp     short loc_4078BA
.text:00407918 ; END OF FUNCTION CHUNK FOR sub_40B6A0
.text:00407918 ; ---------------------------------------------------------------------------
.text:0040791A                 align 10h
.text:00407920
.text:00407920 ; =============== S U B R O U T I N E =======================================
.text:00407920
.text:00407920 ; Attributes: bp-based frame info_from_lumina fpd=268h
.text:00407920
.text:00407920 ; int __cdecl win32_longpath(LPCSTR lpFileName)
.text:00407920 _win32_longpath proc near               ; CODE XREF: .text:004080E4↓p
.text:00407920
.text:00407920 C               = dword ptr -278h
.text:00407920 lpFindFileData  = dword ptr -274h
.text:00407920 Destination     = byte ptr -268h
.text:00407920 var_267         = byte ptr -267h
.text:00407920 FindFileData    = _WIN32_FIND_DATAA ptr -158h
.text:00407920 lpFileName      = dword ptr  8
.text:00407920
.text:00407920                 push    ebp
.text:00407921                 xor     eax, eax
.text:00407923                 push    edi
.text:00407924                 push    esi
.text:00407925                 push    ebx
.text:00407926                 sub     esp, 26Ch
.text:0040792C                 mov     esi, [esp+278h+lpFileName]
.text:00407933                 lea     ebp, [esp+278h+Destination]
.text:00407937                 test    esi, esi
.text:00407939                 jz      loc_407A97
.text:0040793F                 movsx   edx, byte ptr [esi]
.text:00407942                 mov     [esp+278h+C], edx ; C
.text:00407945                 call    isalpha
.text:0040794A                 test    eax, eax
.text:0040794C                 jz      short loc_40795F
.text:0040794E                 mov     eax, [esp+278h+lpFileName]
.text:00407955                 cmp     byte ptr [eax+1], 3Ah ; ':'
.text:00407959                 jz      loc_407C9B
.text:0040795F
.text:0040795F loc_40795F:                             ; CODE XREF: _win32_longpath+2C↑j
.text:0040795F                 mov     edx, [esp+278h+lpFileName]
.text:00407966                 movzx   eax, byte ptr [edx]
.text:00407969                 cmp     al, 2Fh ; '/'
.text:0040796B                 jz      loc_407B7B
.text:00407971                 cmp     al, 5Ch ; '\'
.text:00407973                 jz      loc_407B7B
.text:00407979
.text:00407979 loc_407979:                             ; CODE XREF: _win32_longpath+26E↓j
.text:00407979                                         ; _win32_longpath+2B1↓j ...
.text:00407979                 mov     [ebp+268h+Destination], 0
.text:0040797D                 movzx   ebx, byte ptr [esi]
.text:00407980                 test    bl, bl
.text:00407982                 jz      loc_407A79
.text:00407988                 nop
.text:00407989                 lea     esi, [esi+0]
.text:00407990
.text:00407990 loc_407990:                             ; CODE XREF: _win32_longpath+153↓j
.text:00407990                 cmp     bl, 2Fh ; '/'
.text:00407993                 jz      loc_407B30
.text:00407999                 cmp     bl, 5Ch ; '\'
.text:0040799C                 jz      loc_407B30
.text:004079A2
.text:004079A2 loc_4079A2:                             ; CODE XREF: _win32_longpath+21E↓j
.text:004079A2                                         ; _win32_longpath+22C↓j ...
.text:004079A2                 cmp     bl, 2Eh ; '.'
.text:004079A5                 jz      loc_407AD0
.text:004079AB
.text:004079AB loc_4079AB:                             ; CODE XREF: _win32_longpath+1EF↓j
.text:004079AB                                         ; _win32_longpath+203↓j
.text:004079AB                 test    bl, bl
.text:004079AD                 jz      loc_407A79
.text:004079B3                 cmp     bl, 2Fh ; '/'
.text:004079B6                 jz      short loc_4079D2
.text:004079B8                 cmp     bl, 5Ch ; '\'
.text:004079BB                 jz      short loc_4079D2
.text:004079BD                 lea     esi, [esi+0]
.text:004079C0
.text:004079C0 loc_4079C0:                             ; CODE XREF: _win32_longpath+B0↓j
.text:004079C0                 inc     esi
.text:004079C1                 movzx   ebx, byte ptr [esi]
.text:004079C4                 test    bl, bl
.text:004079C6                 jz      short loc_4079D2
.text:004079C8                 cmp     bl, 2Fh ; '/'
.text:004079CB                 jz      short loc_4079D2
.text:004079CD                 cmp     bl, 5Ch ; '\'
.text:004079D0                 jnz     short loc_4079C0
.text:004079D2
.text:004079D2 loc_4079D2:                             ; CODE XREF: _win32_longpath+96↑j
.text:004079D2                                         ; _win32_longpath+9B↑j ...
.text:004079D2                 mov     byte ptr [esi], 0
.text:004079D5                 lea     edx, [esp+278h+FindFileData]
.text:004079DC                 mov     eax, [esp+278h+lpFileName]
.text:004079E3                 mov     [esp+278h+lpFindFileData], edx ; lpFindFileData
.text:004079E7                 mov     [esp+278h+C], eax ; lpFileName
.text:004079EA                 call    FindFirstFileA
.text:004079EF                 mov     [esi], bl
.text:004079F1                 sub     esp, 8
.text:004079F4                 mov     edi, eax
.text:004079F6                 cmp     eax, 0FFFFFFFFh
.text:004079F9                 jz      loc_407ABC
.text:004079FF                 lea     ebx, [esp+278h+FindFileData.cFileName]
.text:00407A06                 mov     ecx, ebx
.text:00407A08                 nop
.text:00407A09                 lea     esi, [esi+0]
.text:00407A10
.text:00407A10 loc_407A10:                             ; CODE XREF: _win32_longpath+105↓j
.text:00407A10                 mov     eax, [ebx]
.text:00407A12                 add     ebx, 4
.text:00407A15                 lea     edx, [eax-1010101h]
.text:00407A1B                 not     eax
.text:00407A1D                 and     edx, eax
.text:00407A1F                 and     edx, 80808080h
.text:00407A25                 jz      short loc_407A10
.text:00407A27                 test    edx, 8080h
.text:00407A2D                 jnz     short loc_407A35
.text:00407A2F                 shr     edx, 10h
.text:00407A32                 add     ebx, 2
.text:00407A35
.text:00407A35 loc_407A35:                             ; CODE XREF: _win32_longpath+10D↑j
.text:00407A35                 add     dl, dl
.text:00407A37                 sbb     ebx, 3
.text:00407A3A                 sub     ebx, ecx
.text:00407A3C                 lea     ecx, [esp+278h+Destination]
.text:00407A40                 sub     ecx, ebp
.text:00407A42                 add     ecx, 105h
.text:00407A48                 cmp     ecx, ebx
.text:00407A4A                 jle     short loc_407AA2
.text:00407A4C                 mov     [esp+278h+C], ebp ; Destination
.text:00407A4F                 lea     edx, [esp+278h+FindFileData.cFileName]
.text:00407A56                 add     ebp, ebx
.text:00407A58                 mov     [esp+278h+lpFindFileData], edx ; Source
.text:00407A5C                 call    strcpy
.text:00407A61                 mov     [esp+278h+C], edi ; hFindFile
.text:00407A64                 call    FindClose
.text:00407A69                 sub     esp, 4
.text:00407A6C
.text:00407A6C loc_407A6C:                             ; CODE XREF: _win32_longpath+1E0↓j
.text:00407A6C                 movzx   ecx, byte ptr [esi]
.text:00407A6F                 test    cl, cl
.text:00407A71                 mov     bl, cl
.text:00407A73                 jnz     loc_407990
.text:00407A79
.text:00407A79 loc_407A79:                             ; CODE XREF: _win32_longpath+62↑j
.text:00407A79                                         ; _win32_longpath+8D↑j
.text:00407A79                 mov     esi, [esp+278h+lpFileName]
.text:00407A80                 lea     ebp, [esp+278h+Destination]
.text:00407A84                 mov     [esp+278h+lpFindFileData], ebp ; Source
.text:00407A88                 mov     [esp+278h+C], esi ; Destination
.text:00407A8B                 call    strcpy
.text:00407A90                 mov     eax, [esp+278h+lpFileName]
.text:00407A97
.text:00407A97 loc_407A97:                             ; CODE XREF: _win32_longpath+19↑j
.text:00407A97                                         ; _win32_longpath+19A↓j
.text:00407A97                 add     esp, 26Ch
.text:00407A9D                 pop     ebx
.text:00407A9E                 pop     esi
.text:00407A9F                 pop     edi
.text:00407AA0                 pop     ebp
.text:00407AA1                 retn
.text:00407AA2 ; ---------------------------------------------------------------------------
.text:00407AA2
.text:00407AA2 loc_407AA2:                             ; CODE XREF: _win32_longpath+12A↑j
.text:00407AA2                 mov     [esp+278h+C], edi ; hFindFile
.text:00407AA5                 call    FindClose
.text:00407AAA                 sub     esp, 4
.text:00407AAD                 call    _errno
.text:00407AB2                 mov     dword ptr [eax], 22h ; '"'
.text:00407AB8
.text:00407AB8 loc_407AB8:                             ; CODE XREF: _win32_longpath+1A7↓j
.text:00407AB8                 xor     eax, eax
.text:00407ABA                 jmp     short loc_407A97
.text:00407ABC ; ---------------------------------------------------------------------------
.text:00407ABC
.text:00407ABC loc_407ABC:                             ; CODE XREF: _win32_longpath+D9↑j
.text:00407ABC                 call    _errno
.text:00407AC1                 mov     dword ptr [eax], 16h
.text:00407AC7                 jmp     short loc_407AB8
.text:00407AC7 ; ---------------------------------------------------------------------------
.text:00407AC9                 align 10h
.text:00407AD0
.text:00407AD0 loc_407AD0:                             ; CODE XREF: _win32_longpath+85↑j
.text:00407AD0                 movzx   eax, byte ptr [esi+1]
.text:00407AD4                 test    al, al
.text:00407AD6                 jnz     short loc_407B05
.text:00407AD8
.text:00407AD8 loc_407AD8:                             ; CODE XREF: _win32_longpath+1E7↓j
.text:00407AD8                                         ; _win32_longpath+1EB↓j ...
.text:00407AD8                 test    bl, bl
.text:00407ADA                 jz      short loc_407AFC
.text:00407ADC                 cmp     bl, 2Fh ; '/'
.text:00407ADF                 jz      short loc_407AFC
.text:00407AE1                 cmp     bl, 5Ch ; '\'
.text:00407AE4                 jz      short loc_407AFC
.text:00407AE6
.text:00407AE6 loc_407AE6:                             ; CODE XREF: _win32_longpath+1DA↓j
.text:00407AE6                 mov     [ebp+268h+Destination], bl
.text:00407AE9                 inc     esi
.text:00407AEA                 inc     ebp
.text:00407AEB                 movzx   ebx, byte ptr [esi]
.text:00407AEE                 test    bl, bl
.text:00407AF0                 jz      short loc_407AFC
.text:00407AF2                 cmp     bl, 2Fh ; '/'
.text:00407AF5                 jz      short loc_407AFC
.text:00407AF7                 cmp     bl, 5Ch ; '\'
.text:00407AFA                 jnz     short loc_407AE6
.text:00407AFC
.text:00407AFC loc_407AFC:                             ; CODE XREF: _win32_longpath+1BA↑j
.text:00407AFC                                         ; _win32_longpath+1BF↑j ...
.text:00407AFC                 mov     [ebp+268h+Destination], 0
.text:00407B00                 jmp     loc_407A6C
.text:00407B05 ; ---------------------------------------------------------------------------
.text:00407B05
.text:00407B05 loc_407B05:                             ; CODE XREF: _win32_longpath+1B6↑j
.text:00407B05                 cmp     al, 2Fh ; '/'
.text:00407B07                 jz      short loc_407AD8
.text:00407B09                 cmp     al, 5Ch ; '\'
.text:00407B0B                 jz      short loc_407AD8
.text:00407B0D                 cmp     al, 2Eh ; '.'
.text:00407B0F                 jnz     loc_4079AB
.text:00407B15                 movzx   eax, byte ptr [esi+2]
.text:00407B19                 test    al, al
.text:00407B1B                 jz      short loc_407AD8
.text:00407B1D                 cmp     al, 2Fh ; '/'
.text:00407B1F                 jz      short loc_407AD8
.text:00407B21                 cmp     al, 5Ch ; '\'
.text:00407B23                 jnz     loc_4079AB
.text:00407B29                 jmp     short loc_407AD8
.text:00407B29 ; ---------------------------------------------------------------------------
.text:00407B2B                 align 10h
.text:00407B30
.text:00407B30 loc_407B30:                             ; CODE XREF: _win32_longpath+73↑j
.text:00407B30                                         ; _win32_longpath+7C↑j
.text:00407B30                 mov     [ebp+268h+Destination], bl
.text:00407B33                 inc     esi
.text:00407B34                 inc     ebp
.text:00407B35                 mov     [ebp+268h+Destination], 0
.text:00407B39                 movzx   ebx, byte ptr [esi]
.text:00407B3C                 test    bl, bl
.text:00407B3E                 jz      loc_4079A2
.text:00407B44                 cmp     bl, 2Fh ; '/'
.text:00407B47                 jz      short loc_407B60
.text:00407B49                 cmp     bl, 5Ch ; '\'
.text:00407B4C                 jnz     loc_4079A2
.text:00407B52                 lea     esi, [esi+0]
.text:00407B59                 lea     edi, [edi+0]
.text:00407B60
.text:00407B60 loc_407B60:                             ; CODE XREF: _win32_longpath+227↑j
.text:00407B60                                         ; _win32_longpath+24F↓j ...
.text:00407B60                 inc     esi
.text:00407B61                 movzx   ebx, byte ptr [esi]
.text:00407B64                 test    bl, bl
.text:00407B66                 jz      loc_4079A2
.text:00407B6C                 cmp     bl, 2Fh ; '/'
.text:00407B6F                 jz      short loc_407B60
.text:00407B71                 cmp     bl, 5Ch ; '\'
.text:00407B74                 jz      short loc_407B60
.text:00407B76                 jmp     loc_4079A2
.text:00407B7B ; ---------------------------------------------------------------------------
.text:00407B7B
.text:00407B7B loc_407B7B:                             ; CODE XREF: _win32_longpath+4B↑j
.text:00407B7B                                         ; _win32_longpath+53↑j
.text:00407B7B                 mov     edi, [esp+278h+lpFileName]
.text:00407B82                 movzx   edx, byte ptr [edi+1]
.text:00407B86                 cmp     dl, 2Fh ; '/'
.text:00407B89                 jz      short loc_407B94
.text:00407B8B                 cmp     dl, 5Ch ; '\'
.text:00407B8E                 jnz     loc_407979
.text:00407B94
.text:00407B94 loc_407B94:                             ; CODE XREF: _win32_longpath+269↑j
.text:00407B94                 mov     esi, [esp+278h+lpFileName]
.text:00407B9B                 mov     [ebp+268h+Destination], al
.text:00407B9E                 mov     ecx, [esp+278h+lpFileName]
.text:00407BA5                 inc     ebp
.text:00407BA6                 add     esi, 2
.text:00407BA9                 movzx   ebx, byte ptr [ecx+1]
.text:00407BAD                 mov     [ebp+268h+Destination], bl
.text:00407BB0                 inc     ebp
.text:00407BB1                 movzx   eax, byte ptr [ecx+2]
.text:00407BB5                 test    al, al
.text:00407BB7                 jz      loc_407C93
.text:00407BBD                 cmp     al, 2Fh ; '/'
.text:00407BBF                 jz      loc_407C78
.text:00407BC5                 cmp     al, 5Ch ; '\'
.text:00407BC7                 mov     bl, al
.text:00407BC9                 jz      loc_407C78
.text:00407BCF
.text:00407BCF loc_407BCF:                             ; CODE XREF: _win32_longpath+36E↓j
.text:00407BCF                                         ; _win32_longpath+376↓j
.text:00407BCF                 test    bl, bl
.text:00407BD1                 jz      loc_407979
.text:00407BD7                 cmp     bl, 2Fh ; '/'
.text:00407BDA                 jz      short loc_407BFB
.text:00407BDC                 cmp     bl, 5Ch ; '\'
.text:00407BDF                 jz      short loc_407BFB
.text:00407BE1
.text:00407BE1 loc_407BE1:                             ; CODE XREF: _win32_longpath+2D9↓j
.text:00407BE1                 mov     [ebp+268h+Destination], bl
.text:00407BE4                 inc     esi
.text:00407BE5                 inc     ebp
.text:00407BE6                 movzx   ebx, byte ptr [esi]
.text:00407BE9                 test    bl, bl
.text:00407BEB                 jz      loc_407979
.text:00407BF1                 cmp     bl, 2Fh ; '/'
.text:00407BF4                 jz      short loc_407BFB
.text:00407BF6                 cmp     bl, 5Ch ; '\'
.text:00407BF9                 jnz     short loc_407BE1
.text:00407BFB
.text:00407BFB loc_407BFB:                             ; CODE XREF: _win32_longpath+2BA↑j
.text:00407BFB                                         ; _win32_longpath+2BF↑j ...
.text:00407BFB                 test    bl, bl
.text:00407BFD                 jz      loc_407979
.text:00407C03                 mov     [ebp+268h+Destination], bl
.text:00407C06                 inc     esi
.text:00407C07                 inc     ebp
.text:00407C08                 movzx   ebx, byte ptr [esi]
.text:00407C0B                 test    bl, bl
.text:00407C0D                 jz      loc_407979
.text:00407C13                 cmp     bl, 2Fh ; '/'
.text:00407C16                 jz      short loc_407C60
.text:00407C18                 cmp     bl, 5Ch ; '\'
.text:00407C1B                 jz      short loc_407C60
.text:00407C1D
.text:00407C1D loc_407C1D:                             ; CODE XREF: _win32_longpath+356↓j
.text:00407C1D                 test    bl, bl
.text:00407C1F                 jz      loc_407979
.text:00407C25                 cmp     bl, 2Fh ; '/'
.text:00407C28                 jz      loc_407979
.text:00407C2E                 cmp     bl, 5Ch ; '\'
.text:00407C31                 jz      loc_407979
.text:00407C37
.text:00407C37 loc_407C37:                             ; CODE XREF: _win32_longpath+333↓j
.text:00407C37                 mov     [ebp+268h+Destination], bl
.text:00407C3A                 inc     esi
.text:00407C3B                 inc     ebp
.text:00407C3C                 movzx   ebx, byte ptr [esi]
.text:00407C3F                 test    bl, bl
.text:00407C41                 jz      loc_407979
.text:00407C47                 cmp     bl, 2Fh ; '/'
.text:00407C4A                 jz      loc_407979
.text:00407C50                 cmp     bl, 5Ch ; '\'
.text:00407C53                 jnz     short loc_407C37
.text:00407C55                 jmp     loc_407979
.text:00407C55 ; ---------------------------------------------------------------------------
.text:00407C5A                 align 10h
.text:00407C60
.text:00407C60 loc_407C60:                             ; CODE XREF: _win32_longpath+2F6↑j
.text:00407C60                                         ; _win32_longpath+2FB↑j ...
.text:00407C60                 inc     esi
.text:00407C61                 movzx   ebx, byte ptr [esi]
.text:00407C64                 test    bl, bl
.text:00407C66                 jz      loc_407979
.text:00407C6C                 cmp     bl, 2Fh ; '/'
.text:00407C6F                 jz      short loc_407C60
.text:00407C71                 cmp     bl, 5Ch ; '\'
.text:00407C74                 jz      short loc_407C60
.text:00407C76                 jmp     short loc_407C1D
.text:00407C78 ; ---------------------------------------------------------------------------
.text:00407C78
.text:00407C78 loc_407C78:                             ; CODE XREF: _win32_longpath+29F↑j
.text:00407C78                                         ; _win32_longpath+2A9↑j ...
.text:00407C78                 inc     esi
.text:00407C79                 movzx   ebx, byte ptr [esi]
.text:00407C7C                 test    bl, bl
.text:00407C7E                 jz      loc_407979
.text:00407C84                 cmp     bl, 2Fh ; '/'
.text:00407C87                 jz      short loc_407C78
.text:00407C89                 cmp     bl, 5Ch ; '\'
.text:00407C8C                 jz      short loc_407C78
.text:00407C8E                 jmp     loc_407BCF
.text:00407C93 ; ---------------------------------------------------------------------------
.text:00407C93
.text:00407C93 loc_407C93:                             ; CODE XREF: _win32_longpath+297↑j
.text:00407C93                 movzx   ebx, byte ptr [esi]
.text:00407C96                 jmp     loc_407BCF
.text:00407C9B ; ---------------------------------------------------------------------------
.text:00407C9B
.text:00407C9B loc_407C9B:                             ; CODE XREF: _win32_longpath+39↑j
.text:00407C9B                 movzx   ecx, byte ptr [eax]
.text:00407C9E                 mov     esi, eax
.text:00407CA0                 mov     [esp+278h+var_267], 3Ah ; ':'
.text:00407CA5                 add     esi, 2
.text:00407CA8                 lea     ebp, [esp+12h]
.text:00407CAC                 mov     [esp+278h+Destination], cl
.text:00407CB0                 jmp     loc_407979
.text:00407CB0 _win32_longpath endp
.text:00407CB0
.text:00407CB0 ; ---------------------------------------------------------------------------
.text:00407CB5                 align 10h
.text:00407CC0                 sub     esp, 0Ch
.text:00407CC3                 mov     edx, [esp+10h]
.text:00407CC7                 mov     dword ptr [esp+4], 0
.text:00407CCF                 mov     [esp], edx
.text:00407CD2                 call    sub_409310
.text:00407CD7                 inc     eax
.text:00407CD8                 setnz   dl
.text:00407CDB                 add     esp, 0Ch
.text:00407CDE                 movzx   eax, dl
.text:00407CE1                 retn
.text:00407CE1 ; ---------------------------------------------------------------------------
.text:00407CE2                 align 10h
.text:00407CF0
.text:00407CF0 ; =============== S U B R O U T I N E =======================================
.text:00407CF0
.text:00407CF0
.text:00407CF0 sub_407CF0      proc near               ; CODE XREF: sub_4091E0+AA↓p
.text:00407CF0                                         ; sub_40BA70+B4↓p
.text:00407CF0
.text:00407CF0 arg_0           = dword ptr  4
.text:00407CF0
.text:00407CF0                 mov     ecx, [esp+arg_0]
.text:00407CF4                 mov     edx, ecx
.text:00407CF6                 movzx   eax, byte ptr [ecx]
.text:00407CF9                 test    al, al
.text:00407CFB                 jz      short loc_407D0C
.text:00407CFD                 lea     esi, [esi+0]
.text:00407D00
.text:00407D00 loc_407D00:                             ; CODE XREF: sub_407CF0+1A↓j
.text:00407D00                 cmp     al, 5Ch ; '\'
.text:00407D02                 jz      short loc_407D10
.text:00407D04
.text:00407D04 loc_407D04:                             ; CODE XREF: sub_407CF0+23↓j
.text:00407D04                 inc     edx
.text:00407D05                 movzx   eax, byte ptr [edx]
.text:00407D08                 test    al, al
.text:00407D0A                 jnz     short loc_407D00
.text:00407D0C
.text:00407D0C loc_407D0C:                             ; CODE XREF: sub_407CF0+B↑j
.text:00407D0C                 mov     eax, ecx
.text:00407D0E                 retn
.text:00407D0E ; ---------------------------------------------------------------------------
.text:00407D0F                 align 10h
.text:00407D10
.text:00407D10 loc_407D10:                             ; CODE XREF: sub_407CF0+12↑j
.text:00407D10                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407D13                 jmp     short loc_407D04
.text:00407D13 sub_407CF0      endp
.text:00407D13
.text:00407D13 ; ---------------------------------------------------------------------------
.text:00407D15                 align 10h
.text:00407D20                 push    ebx
.text:00407D21                 sub     esp, 8
.text:00407D24                 mov     ebx, [esp+14h]
.text:00407D28                 mov     edx, [esp+10h]
.text:00407D2C                 mov     [esp], ebx
.text:00407D2F                 mov     [esp+4], edx
.text:00407D33                 call    strcpy
.text:00407D38                 movzx   eax, byte ptr [ebx]
.text:00407D3B                 mov     edx, ebx
.text:00407D3D                 test    al, al
.text:00407D3F                 jz      short loc_407D5C
.text:00407D41                 jmp     short loc_407D50
.text:00407D41 ; ---------------------------------------------------------------------------
.text:00407D43                 align 10h
.text:00407D50
.text:00407D50 loc_407D50:                             ; CODE XREF: .text:00407D41↑j
.text:00407D50                                         ; .text:00407D5A↓j
.text:00407D50                 cmp     al, 5Ch ; '\'
.text:00407D52                 jz      short loc_407D63
.text:00407D54
.text:00407D54 loc_407D54:                             ; CODE XREF: .text:00407D66↓j
.text:00407D54                 inc     edx
.text:00407D55                 movzx   eax, byte ptr [edx]
.text:00407D58                 test    al, al
.text:00407D5A                 jnz     short loc_407D50
.text:00407D5C
.text:00407D5C loc_407D5C:                             ; CODE XREF: .text:00407D3F↑j
.text:00407D5C                 add     esp, 8
.text:00407D5F                 xor     eax, eax
.text:00407D61                 pop     ebx
.text:00407D62                 retn
.text:00407D63 ; ---------------------------------------------------------------------------
.text:00407D63
.text:00407D63 loc_407D63:                             ; CODE XREF: .text:00407D52↑j
.text:00407D63                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407D66                 jmp     short loc_407D54
.text:00407D66 ; ---------------------------------------------------------------------------
.text:00407D68                 align 10h
.text:00407D70
.text:00407D70 ; =============== S U B R O U T I N E =======================================
.text:00407D70
.text:00407D70
.text:00407D70 sub_407D70      proc near               ; CODE XREF: sub_4065F0+16↑p
.text:00407D70                                         ; sub_406AF0+1F↑p ...
.text:00407D70
.text:00407D70 arg_0           = dword ptr  4
.text:00407D70
.text:00407D70                 mov     ecx, [esp+arg_0]
.text:00407D74                 mov     edx, ecx
.text:00407D76                 movzx   eax, byte ptr [ecx]
.text:00407D79                 test    al, al
.text:00407D7B                 jz      short loc_407D8C
.text:00407D7D                 lea     esi, [esi+0]
.text:00407D80
.text:00407D80 loc_407D80:                             ; CODE XREF: sub_407D70+1A↓j
.text:00407D80                 cmp     al, 2Fh ; '/'
.text:00407D82                 jz      short loc_407D90
.text:00407D84
.text:00407D84 loc_407D84:                             ; CODE XREF: sub_407D70+23↓j
.text:00407D84                 inc     edx
.text:00407D85                 movzx   eax, byte ptr [edx]
.text:00407D88                 test    al, al
.text:00407D8A                 jnz     short loc_407D80
.text:00407D8C
.text:00407D8C loc_407D8C:                             ; CODE XREF: sub_407D70+B↑j
.text:00407D8C                 mov     eax, ecx
.text:00407D8E                 retn
.text:00407D8E ; ---------------------------------------------------------------------------
.text:00407D8F                 align 10h
.text:00407D90
.text:00407D90 loc_407D90:                             ; CODE XREF: sub_407D70+12↑j
.text:00407D90                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407D93                 jmp     short loc_407D84
.text:00407D93 sub_407D70      endp
.text:00407D93
.text:00407D93 ; ---------------------------------------------------------------------------
.text:00407D95                 align 10h
.text:00407DA0                 push    ebx
.text:00407DA1                 sub     esp, 8
.text:00407DA4                 mov     ebx, [esp+14h]
.text:00407DA8                 mov     edx, [esp+10h]
.text:00407DAC                 mov     [esp], ebx
.text:00407DAF                 mov     [esp+4], edx
.text:00407DB3                 call    strcpy
.text:00407DB8                 movzx   eax, byte ptr [ebx]
.text:00407DBB                 mov     edx, ebx
.text:00407DBD                 test    al, al
.text:00407DBF                 jz      short loc_407DDC
.text:00407DC1                 jmp     short loc_407DD0
.text:00407DC1 ; ---------------------------------------------------------------------------
.text:00407DC3                 align 10h
.text:00407DD0
.text:00407DD0 loc_407DD0:                             ; CODE XREF: .text:00407DC1↑j
.text:00407DD0                                         ; .text:00407DDA↓j
.text:00407DD0                 cmp     al, 2Fh ; '/'
.text:00407DD2                 jz      short loc_407DE3
.text:00407DD4
.text:00407DD4 loc_407DD4:                             ; CODE XREF: .text:00407DE6↓j
.text:00407DD4                 inc     edx
.text:00407DD5                 movzx   eax, byte ptr [edx]
.text:00407DD8                 test    al, al
.text:00407DDA                 jnz     short loc_407DD0
.text:00407DDC
.text:00407DDC loc_407DDC:                             ; CODE XREF: .text:00407DBF↑j
.text:00407DDC                 add     esp, 8
.text:00407DDF                 xor     eax, eax
.text:00407DE1                 pop     ebx
.text:00407DE2                 retn
.text:00407DE3 ; ---------------------------------------------------------------------------
.text:00407DE3
.text:00407DE3 loc_407DE3:                             ; CODE XREF: .text:00407DD2↑j
.text:00407DE3                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407DE6                 jmp     short loc_407DD4
.text:00407DE6 ; ---------------------------------------------------------------------------
.text:00407DE8                 align 10h
.text:00407DF0                 push    ebx
.text:00407DF1                 sub     esp, 8
.text:00407DF4                 mov     ebx, [esp+14h]
.text:00407DF8                 mov     edx, [esp+10h]
.text:00407DFC                 mov     [esp+4], ebx
.text:00407E00                 mov     [esp], edx
.text:00407E03                 call    sub_409190
.text:00407E08                 movzx   eax, byte ptr [ebx]
.text:00407E0B                 mov     edx, ebx
.text:00407E0D                 test    al, al
.text:00407E0F                 jz      short loc_407E2C
.text:00407E11                 jmp     short loc_407E20
.text:00407E11 ; ---------------------------------------------------------------------------
.text:00407E13                 align 10h
.text:00407E20
.text:00407E20 loc_407E20:                             ; CODE XREF: .text:00407E11↑j
.text:00407E20                                         ; .text:00407E2A↓j
.text:00407E20                 cmp     al, 2Fh ; '/'
.text:00407E22                 jz      short loc_407E33
.text:00407E24
.text:00407E24 loc_407E24:                             ; CODE XREF: .text:00407E36↓j
.text:00407E24                 inc     edx
.text:00407E25                 movzx   eax, byte ptr [edx]
.text:00407E28                 test    al, al
.text:00407E2A                 jnz     short loc_407E20
.text:00407E2C
.text:00407E2C loc_407E2C:                             ; CODE XREF: .text:00407E0F↑j
.text:00407E2C                 add     esp, 8
.text:00407E2F                 xor     eax, eax
.text:00407E31                 pop     ebx
.text:00407E32                 retn
.text:00407E33 ; ---------------------------------------------------------------------------
.text:00407E33
.text:00407E33 loc_407E33:                             ; CODE XREF: .text:00407E22↑j
.text:00407E33                 mov     byte ptr [edx], 5Ch ; '\'
.text:00407E36                 jmp     short loc_407E24
.text:00407E36 ; ---------------------------------------------------------------------------
.text:00407E38                 align 10h
.text:00407E40                 push    ebx
.text:00407E41                 sub     esp, 8
.text:00407E44                 mov     ebx, [esp+14h]
.text:00407E48                 mov     edx, [esp+10h]
.text:00407E4C                 mov     [esp], ebx
.text:00407E4F                 mov     [esp+4], edx
.text:00407E53                 call    sub_409190
.text:00407E58                 movzx   eax, byte ptr [ebx]
.text:00407E5B                 mov     edx, ebx
.text:00407E5D                 test    al, al
.text:00407E5F                 jz      short loc_407E7C
.text:00407E61                 jmp     short loc_407E70
.text:00407E61 ; ---------------------------------------------------------------------------
.text:00407E63                 align 10h
.text:00407E70
.text:00407E70 loc_407E70:                             ; CODE XREF: .text:00407E61↑j
.text:00407E70                                         ; .text:00407E7A↓j
.text:00407E70                 cmp     al, 5Ch ; '\'
.text:00407E72                 jz      short loc_407E81
.text:00407E74
.text:00407E74 loc_407E74:                             ; CODE XREF: .text:00407E84↓j
.text:00407E74                 inc     edx
.text:00407E75                 movzx   eax, byte ptr [edx]
.text:00407E78                 test    al, al
.text:00407E7A                 jnz     short loc_407E70
.text:00407E7C
.text:00407E7C loc_407E7C:                             ; CODE XREF: .text:00407E5F↑j
.text:00407E7C                 add     esp, 8
.text:00407E7F                 pop     ebx
.text:00407E80                 retn
.text:00407E81 ; ---------------------------------------------------------------------------
.text:00407E81
.text:00407E81 loc_407E81:                             ; CODE XREF: .text:00407E72↑j
.text:00407E81                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407E84                 jmp     short loc_407E74
.text:00407E84 ; ---------------------------------------------------------------------------
.text:00407E86                 align 10h
.text:00407E90
.text:00407E90 ; =============== S U B R O U T I N E =======================================
.text:00407E90
.text:00407E90
.text:00407E90 ; int __cdecl sub_407E90(LPSTR)
.text:00407E90 sub_407E90      proc near               ; CODE XREF: .text:00407F1E↓p
.text:00407E90                                         ; .text:00407F5E↓p ...
.text:00407E90
.text:00407E90 hModule         = dword ptr -1Ch
.text:00407E90 lpFilename      = dword ptr -18h
.text:00407E90 nSize           = dword ptr -14h
.text:00407E90 arg_0           = dword ptr  4
.text:00407E90
.text:00407E90                 push    esi
.text:00407E91                 push    ebx
.text:00407E92                 sub     esp, 14h
.text:00407E95                 mov     esi, [esp+1Ch+arg_0]
.text:00407E99                 mov     [esp+1Ch+nSize], 104h ; nSize
.text:00407EA1                 mov     [esp+1Ch+hModule], 0 ; hModule
.text:00407EA8                 mov     [esp+1Ch+lpFilename], esi ; lpFilename
.text:00407EAC                 call    GetModuleFileNameA
.text:00407EB1                 sub     esp, 0Ch
.text:00407EB4                 test    eax, eax
.text:00407EB6                 jz      short loc_407EF8
.text:00407EB8                 cmp     eax, 104h
.text:00407EBD                 jg      short loc_407EE9
.text:00407EBF
.text:00407EBF loc_407EBF:                             ; CODE XREF: sub_407E90+66↓j
.text:00407EBF                                         ; sub_407E90+78↓j
.text:00407EBF                 movzx   eax, byte ptr [esi]
.text:00407EC2                 mov     edx, esi
.text:00407EC4                 test    al, al
.text:00407EC6                 jz      short loc_407EDC
.text:00407EC8                 nop
.text:00407EC9                 lea     esi, [esi+0]
.text:00407ED0
.text:00407ED0 loc_407ED0:                             ; CODE XREF: sub_407E90+4A↓j
.text:00407ED0                 cmp     al, 5Ch ; '\'
.text:00407ED2                 jz      short loc_407EE4
.text:00407ED4
.text:00407ED4 loc_407ED4:                             ; CODE XREF: sub_407E90+57↓j
.text:00407ED4                 inc     edx
.text:00407ED5                 movzx   eax, byte ptr [edx]
.text:00407ED8                 test    al, al
.text:00407EDA                 jnz     short loc_407ED0
.text:00407EDC
.text:00407EDC loc_407EDC:                             ; CODE XREF: sub_407E90+36↑j
.text:00407EDC                 add     esp, 14h
.text:00407EDF                 mov     eax, esi
.text:00407EE1                 pop     ebx
.text:00407EE2                 pop     esi
.text:00407EE3                 retn
.text:00407EE4 ; ---------------------------------------------------------------------------
.text:00407EE4
.text:00407EE4 loc_407EE4:                             ; CODE XREF: sub_407E90+42↑j
.text:00407EE4                 mov     byte ptr [edx], 2Fh ; '/'
.text:00407EE7                 jmp     short loc_407ED4
.text:00407EE9 ; ---------------------------------------------------------------------------
.text:00407EE9
.text:00407EE9 loc_407EE9:                             ; CODE XREF: sub_407E90+2D↑j
.text:00407EE9                 call    _errno
.text:00407EEE                 mov     dword ptr [eax], 26h ; '&'
.text:00407EF4                 xor     esi, esi
.text:00407EF6                 jmp     short loc_407EBF
.text:00407EF8 ; ---------------------------------------------------------------------------
.text:00407EF8
.text:00407EF8 loc_407EF8:                             ; CODE XREF: sub_407E90+26↑j
.text:00407EF8                 call    sub_409170
.text:00407EFD                 mov     ebx, eax
.text:00407EFF                 xor     esi, esi
.text:00407F01                 call    _errno
.text:00407F06                 mov     [eax], ebx
.text:00407F08                 jmp     short loc_407EBF
.text:00407F08 sub_407E90      endp
.text:00407F08
.text:00407F08 ; ---------------------------------------------------------------------------
.text:00407F0A                 align 10h
.text:00407F10                 sub     esp, 0Ch
.text:00407F13                 mov     [esp+8], ebx
.text:00407F17                 mov     ebx, [esp+10h]
.text:00407F1B                 mov     [esp], ebx
.text:00407F1E                 call    sub_407E90
.text:00407F23                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407F2B                 mov     [esp], ebx
.text:00407F2E                 call    strrchr
.text:00407F33                 test    eax, eax
.text:00407F35                 jz      short loc_407F3A
.text:00407F37                 lea     ebx, [eax+1]
.text:00407F3A
.text:00407F3A loc_407F3A:                             ; CODE XREF: .text:00407F35↑j
.text:00407F3A                 mov     eax, ebx
.text:00407F3C                 mov     ebx, [esp+8]
.text:00407F40                 add     esp, 0Ch
.text:00407F43                 retn
.text:00407F43 ; ---------------------------------------------------------------------------
.text:00407F44                 align 10h
.text:00407F50                 sub     esp, 0Ch
.text:00407F53                 mov     [esp+8], ebx
.text:00407F57                 mov     ebx, [esp+10h]
.text:00407F5B                 mov     [esp], ebx
.text:00407F5E                 call    sub_407E90
.text:00407F63                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407F6B                 mov     [esp], ebx
.text:00407F6E                 call    strrchr
.text:00407F73                 test    eax, eax
.text:00407F75                 jz      short loc_407F7A
.text:00407F77                 mov     byte ptr [eax], 0
.text:00407F7A
.text:00407F7A loc_407F7A:                             ; CODE XREF: .text:00407F75↑j
.text:00407F7A                 mov     eax, ebx
.text:00407F7C                 mov     ebx, [esp+8]
.text:00407F80                 add     esp, 0Ch
.text:00407F83                 retn
.text:00407F83 ; ---------------------------------------------------------------------------
.text:00407F84                 align 10h
.text:00407F90                 sub     esp, 0Ch
.text:00407F93                 mov     [esp+8], ebx
.text:00407F97                 mov     ebx, [esp+10h]
.text:00407F9B                 mov     [esp], ebx
.text:00407F9E                 call    sub_407E90
.text:00407FA3                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407FAB                 mov     [esp], ebx
.text:00407FAE                 call    strrchr
.text:00407FB3                 test    eax, eax
.text:00407FB5                 jz      short loc_407FBA
.text:00407FB7                 mov     byte ptr [eax], 0
.text:00407FBA
.text:00407FBA loc_407FBA:                             ; CODE XREF: .text:00407FB5↑j
.text:00407FBA                 mov     dword ptr [esp+4], 2Fh ; '/'
.text:00407FC2                 mov     [esp], ebx
.text:00407FC5                 call    strrchr
.text:00407FCA                 test    eax, eax
.text:00407FCC                 jz      short loc_407FD1
.text:00407FCE                 mov     byte ptr [eax], 0
.text:00407FD1
.text:00407FD1 loc_407FD1:                             ; CODE XREF: .text:00407FCC↑j
.text:00407FD1                 mov     eax, ebx
.text:00407FD3                 mov     ebx, [esp+8]
.text:00407FD7                 add     esp, 0Ch
.text:00407FDA                 retn
.text:00407FDA ; ---------------------------------------------------------------------------
.text:00407FDB                 align 10h
.text:00407FE0                 sub     esp, 1Ch
.text:00407FE3                 mov     edx, [esp+20h]
.text:00407FE7                 mov     [esp+10h], ebx
.text:00407FEB                 xor     ebx, ebx
.text:00407FED                 mov     [esp+14h], esi
.text:00407FF1                 mov     [esp+18h], edi
.text:00407FF5                 mov     [esp], edx
.text:00407FF8                 call    sub_4091C0
.text:00407FFD                 mov     edx, [esp+24h]
.text:00408001                 mov     edi, eax
.text:00408003                 mov     [esp], edx
.text:00408006                 call    sub_4091C0
.text:0040800B                 mov     [esp+4], eax
.text:0040800F                 mov     esi, eax
.text:00408011                 mov     [esp], edi
.text:00408014                 call    _stricmp_0
.text:00408019                 mov     [esp], edi
.text:0040801C                 test    eax, eax
.text:0040801E                 setz    bl
.text:00408021                 call    free
.text:00408026                 mov     [esp], esi
.text:00408029                 call    free
.text:0040802E                 mov     eax, ebx
.text:00408030                 mov     esi, [esp+14h]
.text:00408034                 mov     ebx, [esp+10h]
.text:00408038                 mov     edi, [esp+18h]
.text:0040803C                 add     esp, 1Ch
.text:0040803F                 retn
.text:00408040 ; ---------------------------------------------------------------------------
.text:00408040                 xor     eax, eax
.text:00408042                 retn
.text:00408042 ; ---------------------------------------------------------------------------
.text:00408043 aKernel32Dll    db 'kernel32.dll',0     ; DATA XREF: .text:00408077↓o
.text:00408050 aGetlongpathnam db 'GetLongPathName',0  ; DATA XREF: .text:00408086↓o
.text:00408060 ; ---------------------------------------------------------------------------
.text:00408060                 sub     esp, 1Ch
.text:00408063                 mov     [esp+10h], ebx
.text:00408067                 mov     ebx, [esp+20h]
.text:0040806B                 mov     [esp+18h], edi
.text:0040806F                 mov     edi, [esp+24h]
.text:00408073                 mov     [esp+14h], esi
.text:00408077                 mov     dword ptr [esp], offset aKernel32Dll ; "kernel32.dll"
.text:0040807E                 call    GetModuleHandleA
.text:00408083                 sub     esp, 4
.text:00408086                 mov     dword ptr [esp+4], offset aGetlongpathnam ; "GetLongPathName"
.text:0040808E                 mov     [esp], eax
.text:00408091                 call    GetProcAddress
.text:00408096                 sub     esp, 8
.text:00408099                 test    eax, eax
.text:0040809B                 jz      short loc_4080B3
.text:0040809D                 mov     dword ptr [esp+8], 104h
.text:004080A5                 mov     [esp+4], ebx
.text:004080A9                 mov     [esp], edi
.text:004080AC                 call    eax
.text:004080AE                 sub     esp, 0Ch
.text:004080B1                 mov     esi, eax
.text:004080B3
.text:004080B3 loc_4080B3:                             ; CODE XREF: .text:0040809B↑j
.text:004080B3                 test    esi, esi
.text:004080B5                 jz      short loc_4080D0
.text:004080B7
.text:004080B7 loc_4080B7:                             ; CODE XREF: .text:004080EB↓j
.text:004080B7                 mov     eax, ebx
.text:004080B9                 mov     esi, [esp+14h]
.text:004080BD                 mov     ebx, [esp+10h]
.text:004080C1                 mov     edi, [esp+18h]
.text:004080C5                 add     esp, 1Ch
.text:004080C8                 retn
.text:004080C8 ; ---------------------------------------------------------------------------
.text:004080C9                 align 10h
.text:004080D0
.text:004080D0 loc_4080D0:                             ; CODE XREF: .text:004080B5↑j
.text:004080D0                 call    sub_409C50
.text:004080D5                 mov     [esp], ebx
.text:004080D8                 mov     [esp+4], edi
.text:004080DC                 call    strcpy
.text:004080E1                 mov     [esp], ebx
.text:004080E4                 call    _win32_longpath
.text:004080E9                 mov     ebx, eax
.text:004080EB                 jmp     short loc_4080B7
.text:004080EB ; ---------------------------------------------------------------------------
.text:004080ED                 align 10h
.text:004080F0                 sub     esp, 1Ch
.text:004080F3                 mov     [esp+18h], edi
.text:004080F7                 mov     edi, [esp+20h]
.text:004080FB                 mov     [esp+10h], ebx
.text:004080FF                 mov     [esp+14h], esi
.text:00408103                 mov     dword ptr [esp+8], 0
.text:0040810B                 mov     dword ptr [esp+4], 0
.text:00408113                 mov     [esp], edi
.text:00408116                 call    GetShortPathNameA
.text:0040811B                 sub     esp, 0Ch
.text:0040811E                 mov     ebx, eax
.text:00408120                 test    eax, eax
.text:00408122                 jz      short loc_408170
.text:00408124                 lea     edx, [eax+1]
.text:00408127                 mov     [esp], edx
.text:0040812A                 call    malloc
.text:0040812F                 test    eax, eax
.text:00408131                 mov     esi, eax
.text:00408133                 jz      short loc_408170
.text:00408135                 mov     [esp+8], ebx
.text:00408139                 mov     [esp+4], eax
.text:0040813D                 mov     [esp], edi
.text:00408140                 call    GetShortPathNameA
.text:00408145                 sub     esp, 0Ch
.text:00408148                 mov     edx, esi
.text:0040814A                 test    eax, eax
.text:0040814C                 jz      short loc_408162
.text:0040814E                 mov     esi, esi
.text:00408150
.text:00408150 loc_408150:                             ; CODE XREF: .text:00408180↓j
.text:00408150                 mov     ebx, [esp+10h]
.text:00408154                 mov     eax, edx
.text:00408156                 mov     esi, [esp+14h]
.text:0040815A                 mov     edi, [esp+18h]
.text:0040815E                 add     esp, 1Ch
.text:00408161                 retn
.text:00408162 ; ---------------------------------------------------------------------------
.text:00408162
.text:00408162 loc_408162:                             ; CODE XREF: .text:0040814C↑j
.text:00408162                 mov     [esp], esi
.text:00408165                 call    free
.text:0040816A                 lea     esi, [esi+0]
.text:00408170
.text:00408170 loc_408170:                             ; CODE XREF: .text:00408122↑j
.text:00408170                                         ; .text:00408133↑j
.text:00408170                 call    sub_409170
.text:00408175                 mov     esi, eax
.text:00408177                 call    _errno
.text:0040817C                 mov     [eax], esi
.text:0040817E                 mov     edx, edi
.text:00408180                 jmp     short loc_408150
.text:00408180 ; ---------------------------------------------------------------------------
.text:00408182                 align 10h
.text:00408190 ; const char String[4]
.text:00408190 String          db ' :/',0              ; DATA XREF: sub_4081A0+FA↓o
.text:00408194                 align 10h
.text:004081A0
.text:004081A0 ; =============== S U B R O U T I N E =======================================
.text:004081A0
.text:004081A0
.text:004081A0 ; int __cdecl sub_4081A0(LPCSTR)
.text:004081A0 sub_4081A0      proc near               ; CODE XREF: sub_4065F0+E↑p
.text:004081A0                                         ; sub_406AF0+17↑p ...
.text:004081A0
.text:004081A0 Str             = dword ptr -1Ch
.text:004081A0 Val             = dword ptr -18h
.text:004081A0 Count           = dword ptr -14h
.text:004081A0 var_10          = dword ptr -10h
.text:004081A0 var_C           = dword ptr -0Ch
.text:004081A0 var_8           = dword ptr -8
.text:004081A0 var_4           = dword ptr -4
.text:004081A0 arg_0           = dword ptr  4
.text:004081A0
.text:004081A0                 sub     esp, 1Ch
.text:004081A3                 mov     edx, [esp+1Ch+arg_0]
.text:004081A7                 mov     [esp+1Ch+var_8], edi
.text:004081AB                 mov     [esp+1Ch+var_10], ebx
.text:004081AF                 mov     [esp+1Ch+var_C], esi
.text:004081B3                 mov     [esp+1Ch+var_4], ebp
.text:004081B7                 mov     [esp+1Ch+Str], edx ; LPCSTR
.text:004081BA                 call    sub_4091C0
.text:004081BF                 test    eax, eax
.text:004081C1                 mov     edi, eax
.text:004081C3                 jz      short loc_408200
.text:004081C5                 mov     [esp+1Ch+Str], eax ; Str
.text:004081C8                 call    strlen
.text:004081CD                 cmp     eax, 2
.text:004081D0                 jbe     short loc_4081DC
.text:004081D2                 cmp     byte ptr [edi+1], 3Ah ; ':'
.text:004081D6                 jz      loc_408290
.text:004081DC
.text:004081DC loc_4081DC:                             ; CODE XREF: sub_4081A0+30↑j
.text:004081DC                                         ; sub_4081A0+F4↓j
.text:004081DC                 test    edi, edi
.text:004081DE                 jz      short loc_408200
.text:004081E0                 mov     [esp+1Ch+Str], edi ; Str
.text:004081E3                 call    strlen
.text:004081E8                 cmp     eax, 4
.text:004081EB                 mov     ebp, eax
.text:004081ED                 jle     short loc_408200
.text:004081EF                 cmp     byte ptr [edi], 2Fh ; '/'
.text:004081F2                 jz      short loc_408220
.text:004081F4                 lea     esi, [esi+0]
.text:004081FA                 lea     edi, [edi+0]
.text:00408200
.text:00408200 loc_408200:                             ; CODE XREF: sub_4081A0+23↑j
.text:00408200                                         ; sub_4081A0+3E↑j ...
.text:00408200                 xor     esi, esi
.text:00408202
.text:00408202 loc_408202:                             ; CODE XREF: sub_4081A0+CD↓j
.text:00408202                                         ; sub_4081A0+115↓j
.text:00408202                 mov     [esp+1Ch+Str], edi ; Block
.text:00408205                 call    free
.text:0040820A                 mov     eax, esi
.text:0040820C                 mov     ebx, [esp+1Ch+var_10]
.text:00408210                 mov     esi, [esp+1Ch+var_C]
.text:00408214                 mov     edi, [esp+1Ch+var_8]
.text:00408218                 mov     ebp, [esp+1Ch+var_4]
.text:0040821C                 add     esp, 1Ch
.text:0040821F                 retn
.text:00408220 ; ---------------------------------------------------------------------------
.text:00408220
.text:00408220 loc_408220:                             ; CODE XREF: sub_4081A0+52↑j
.text:00408220                 cmp     byte ptr [edi+1], 2Fh ; '/'
.text:00408224                 jnz     short loc_408200
.text:00408226                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:0040822E                 lea     ecx, [edi+2]
.text:00408231                 mov     [esp+1Ch+Str], ecx ; Str
.text:00408234                 call    strchr
.text:00408239                 test    eax, eax
.text:0040823B                 jnz     short loc_40826F
.text:0040823D
.text:0040823D loc_40823D:                             ; CODE XREF: sub_4081A0+E2↓j
.text:0040823D                 inc     ebp
.text:0040823E
.text:0040823E loc_40823E:                             ; CODE XREF: sub_4081A0+E9↓j
.text:0040823E                 mov     [esp+1Ch+Val], 1 ; Size
.text:00408246                 lea     ebx, [ebp+1]
.text:00408249                 mov     [esp+1Ch+Str], ebx ; Count
.text:0040824C                 call    calloc
.text:00408251                 mov     [esp+1Ch+Str], eax ; Destination
.text:00408254                 mov     esi, eax
.text:00408256                 mov     [esp+1Ch+Count], ebx ; Count
.text:0040825A                 mov     [esp+1Ch+Val], edi ; Source
.text:0040825E                 call    strncpy
.text:00408263                 mov     byte ptr [ebp+esi-1], 2Fh ; '/'
.text:00408268                 mov     byte ptr [ebp+esi+0], 0
.text:0040826D                 jmp     short loc_408202
.text:0040826F ; ---------------------------------------------------------------------------
.text:0040826F
.text:0040826F loc_40826F:                             ; CODE XREF: sub_4081A0+9B↑j
.text:0040826F                 mov     [esp+1Ch+Val], 2Fh ; '/' ; Val
.text:00408277                 inc     eax
.text:00408278                 mov     [esp+1Ch+Str], eax ; Str
.text:0040827B                 call    strchr
.text:00408280                 test    eax, eax
.text:00408282                 jz      short loc_40823D
.text:00408284                 sub     eax, edi
.text:00408286                 lea     ebp, [eax+1]
.text:00408289                 jmp     short loc_40823E
.text:00408289 ; ---------------------------------------------------------------------------
.text:0040828B                 align 10h
.text:00408290
.text:00408290 loc_408290:                             ; CODE XREF: sub_4081A0+36↑j
.text:00408290                 cmp     byte ptr [edi+2], 2Fh ; '/'
.text:00408294                 jnz     loc_4081DC
.text:0040829A                 mov     [esp+1Ch+Str], offset String ; " :/"
.text:004082A1                 call    _strdup
.text:004082A6                 movsx   edx, byte ptr [edi]
.text:004082A9                 mov     esi, eax
.text:004082AB                 mov     [esp+1Ch+Str], edx ; C
.text:004082AE                 call    toupper
.text:004082B3                 mov     [esi], al
.text:004082B5                 jmp     loc_408202
.text:004082B5 sub_4081A0      endp
.text:004082B5
.text:004082B5 ; ---------------------------------------------------------------------------
.text:004082BA                 align 10h
.text:004082C0
.text:004082C0 ; =============== S U B R O U T I N E =======================================
.text:004082C0
.text:004082C0
.text:004082C0 sub_4082C0      proc near               ; CODE XREF: .text:00408414↓p
.text:004082C0                                         ; .text:004084F8↓p
.text:004082C0
.text:004082C0 Str             = dword ptr -2Ch
.text:004082C0 Val             = dword ptr -28h
.text:004082C0 var_18          = dword ptr -18h
.text:004082C0 var_11          = byte ptr -11h
.text:004082C0 arg_0           = dword ptr  4
.text:004082C0
.text:004082C0                 push    ebp
.text:004082C1                 push    edi
.text:004082C2                 push    esi
.text:004082C3                 push    ebx
.text:004082C4                 sub     esp, 1Ch
.text:004082C7                 mov     edx, [esp+2Ch+arg_0]
.text:004082CB                 cmp     edx, ds:dword_40F1F0
.text:004082D1                 mov     [esp+2Ch+var_11], 0
.text:004082D6                 jz      loc_4083D4
.text:004082DC                 mov     ebx, ds:dword_40F1E0
.text:004082E2                 test    ebx, ebx
.text:004082E4                 jz      short loc_408352
.text:004082E6
.text:004082E6 loc_4082E6:                             ; CODE XREF: sub_4082C0+10F↓j
.text:004082E6                 mov     ebx, [esp+2Ch+arg_0]
.text:004082EA                 xor     edi, edi
.text:004082EC                 xor     esi, esi
.text:004082EE                 mov     ebp, offset dword_40F208
.text:004082F3                 lea     esi, [esi+0]
.text:004082F9                 lea     edi, [edi+0]
.text:00408300
.text:00408300 loc_408300:                             ; CODE XREF: sub_4082C0+60↓j
.text:00408300                 mov     edx, [ebp+4]
.text:00408303                 mov     ecx, edi
.text:00408305                 mov     eax, [ebp+0]
.text:00408308                 shl     ecx, 4
.text:0040830B                 mov     [esp+2Ch+var_18], ecx
.text:0040830F                 mov     ecx, edx
.text:00408311                 xor     eax, ebx
.text:00408313                 xor     ecx, esi
.text:00408315                 or      ecx, eax
.text:00408317                 jz      short loc_408341
.text:00408319                 inc     edi
.text:0040831A                 add     ebp, 10h
.text:0040831D                 cmp     edi, 20h ; ' '
.text:00408320                 jle     short loc_408300
.text:00408322
.text:00408322 loc_408322:                             ; CODE XREF: sub_4082C0+90↓j
.text:00408322                 movzx   ebx, [esp+2Ch+var_11]
.text:00408327                 mov     eax, [esp+2Ch+arg_0]
.text:0040832B                 mov     byte_40E090, bl
.text:00408331                 mov     ds:dword_40F1F0, eax
.text:00408336                 movsx   eax, bl
.text:00408339
.text:00408339 loc_408339:                             ; CODE XREF: sub_4082C0+11B↓j
.text:00408339                 add     esp, 1Ch
.text:0040833C                 pop     ebx
.text:0040833D                 pop     esi
.text:0040833E                 pop     edi
.text:0040833F                 pop     ebp
.text:00408340                 retn
.text:00408341 ; ---------------------------------------------------------------------------
.text:00408341
.text:00408341 loc_408341:                             ; CODE XREF: sub_4082C0+57↑j
.text:00408341                 mov     edx, [esp+2Ch+var_18]
.text:00408345                 movzx   eax, byte ptr ds:dword_40F200[edx]
.text:0040834C                 mov     [esp+2Ch+var_11], al
.text:00408350                 jmp     short loc_408322
.text:00408352 ; ---------------------------------------------------------------------------
.text:00408352
.text:00408352 loc_408352:                             ; CODE XREF: sub_4082C0+24↑j
.text:00408352                 mov     [esp+2Ch+Str], 0
.text:00408359                 call    sub_40AA30
.text:0040835E                 test    eax, eax
.text:00408360                 mov     ebx, eax
.text:00408362                 jz      short loc_4083BC
.text:00408364                 movzx   ecx, byte ptr [eax]
.text:00408367                 mov     esi, 0FFFFFFF0h
.text:0040836C                 test    cl, cl
.text:0040836E                 jz      short loc_4083BC
.text:00408370
.text:00408370 loc_408370:                             ; CODE XREF: sub_4082C0+FA↓j
.text:00408370                 mov     [esp+2Ch+Str], ebx ; LPCSTR
.text:00408373                 movsx   ebp, cl
.text:00408376                 add     esi, 10h
.text:00408379                 mov     ds:dword_40F200[esi], ebp
.text:0040837F                 mov     edi, ebp
.text:00408381                 sar     edi, 1Fh
.text:00408384                 mov     ds:dword_40F204[esi], edi
.text:0040838A                 call    sub_406AF0
.text:0040838F                 mov     ds:dword_40F208[esi], eax
.text:00408395                 xor     ecx, ecx
.text:00408397                 mov     [esp+2Ch+Str], ebx ; Str
.text:0040839A                 mov     ds:dword_40F20C[esi], ecx
.text:004083A0                 mov     [esp+2Ch+Val], 0 ; Val
.text:004083A8                 call    strchr
.text:004083AD                 mov     ebx, eax
.text:004083AF                 inc     ebx
.text:004083B0                 jz      short loc_4083BC
.text:004083B2                 movzx   edx, byte ptr [eax+1]
.text:004083B6                 test    dl, dl
.text:004083B8                 mov     cl, dl
.text:004083BA                 jnz     short loc_408370
.text:004083BC
.text:004083BC loc_4083BC:                             ; CODE XREF: sub_4082C0+A2↑j
.text:004083BC                                         ; sub_4082C0+AE↑j ...
.text:004083BC                 mov     [esp+2Ch+Str], ebx ; Block
.text:004083BF                 mov     esi, 1
.text:004083C4                 mov     ds:dword_40F1E0, esi
.text:004083CA                 call    free
.text:004083CF                 jmp     loc_4082E6
.text:004083D4 ; ---------------------------------------------------------------------------
.text:004083D4
.text:004083D4 loc_4083D4:                             ; CODE XREF: sub_4082C0+16↑j
.text:004083D4                 movsx   eax, byte_40E090
.text:004083DB                 jmp     loc_408339
.text:004083DB sub_4082C0      endp
.text:004083DB
.text:004083DB ; ---------------------------------------------------------------------------
.text:004083E0 dword_4083E0    dd 5C3A20h, 5C3A43h, 26B48D90h, 0
.text:004083E0                                         ; DATA XREF: .text:00408403↓o
.text:004083E0                                         ; .text:004084E3↓o
.text:004083F0 ; ---------------------------------------------------------------------------
.text:004083F0                 sub     esp, 1Ch
.text:004083F3                 mov     [esp+14h], esi
.text:004083F7                 mov     esi, [esp+20h]
.text:004083FB                 mov     [esp+18h], edi
.text:004083FF                 mov     [esp+10h], ebx
.text:00408403                 mov     dword ptr [esp], offset dword_4083E0
.text:0040840A                 call    _strdup
.text:0040840F                 mov     [esp], esi
.text:00408412                 mov     edi, eax
.text:00408414                 call    sub_4082C0
.text:00408419                 mov     [edi], al
.text:0040841B                 test    al, al
.text:0040841D                 jz      short loc_408431
.text:0040841F                 mov     eax, edi
.text:00408421                 mov     ebx, [esp+10h]
.text:00408425                 mov     esi, [esp+14h]
.text:00408429                 mov     edi, [esp+18h]
.text:0040842D                 add     esp, 1Ch
.text:00408430                 retn
.text:00408431 ; ---------------------------------------------------------------------------
.text:00408431
.text:00408431 loc_408431:                             ; CODE XREF: .text:0040841D↑j
.text:00408431                 mov     [esp], edi
.text:00408434                 call    free
.text:00408439                 mov     dword ptr [esp+4], 0
.text:00408441                 mov     dword ptr [esp], 0
.text:00408448                 call    GetCurrentDirectoryA
.text:0040844D                 sub     esp, 8
.text:00408450                 lea     esi, [eax+1]
.text:00408453                 mov     [esp], esi
.text:00408456                 call    malloc
.text:0040845B                 mov     [esp+4], eax
.text:0040845F                 mov     edi, eax
.text:00408461                 mov     [esp], esi
.text:00408464                 call    GetCurrentDirectoryA
.text:00408469                 sub     esp, 8
.text:0040846C                 test    eax, eax
.text:0040846E                 jnz     short loc_408490
.text:00408470                 mov     dword ptr [esp+20h], 4083E4h
.text:00408478                 mov     ebx, [esp+10h]
.text:0040847C                 mov     esi, [esp+14h]
.text:00408480                 mov     edi, [esp+18h]
.text:00408484                 add     esp, 1Ch
.text:00408487                 jmp     _strdup
.text:00408487 ; ---------------------------------------------------------------------------
.text:0040848C                 align 10h
.text:00408490
.text:00408490 loc_408490:                             ; CODE XREF: .text:0040846E↑j
.text:00408490                 mov     [esp+20h], edi
.text:00408494                 mov     ebx, [esp+10h]
.text:00408498                 mov     esi, [esp+14h]
.text:0040849C                 mov     edi, [esp+18h]
.text:004084A0                 add     esp, 1Ch
.text:004084A3                 jmp     sub_4081A0
.text:004084A3 ; ---------------------------------------------------------------------------
.text:004084A8                 align 10h
.text:004084B0                 sub     esp, 7Ch
.text:004084B3                 lea     edx, [esp+10h]
.text:004084B7                 mov     [esp+8], edx
.text:004084BB                 mov     edx, [esp+80h]
.text:004084C2                 mov     [esp+70h], ebx
.text:004084C6                 mov     [esp+74h], esi
.text:004084CA                 mov     [esp+4], edx
.text:004084CE                 mov     [esp+78h], edi
.text:004084D2                 mov     dword ptr [esp], 0
.text:004084D9                 call    sub_405D40
.text:004084DE                 xor     edx, edx
.text:004084E0                 inc     eax
.text:004084E1                 jz      short loc_408505
.text:004084E3                 mov     dword ptr [esp], offset dword_4083E0
.text:004084EA                 mov     esi, [esp+20h]
.text:004084EE                 call    _strdup
.text:004084F3                 mov     edi, eax
.text:004084F5                 mov     [esp], esi
.text:004084F8                 call    sub_4082C0
.text:004084FD                 mov     [edi], al
.text:004084FF                 test    al, al
.text:00408501                 mov     edx, edi
.text:00408503                 jz      short loc_408517
.text:00408505
.text:00408505 loc_408505:                             ; CODE XREF: .text:004084E1↑j
.text:00408505                                         ; .text:00408564↓j
.text:00408505                 mov     ebx, [esp+70h]
.text:00408509                 mov     eax, edx
.text:0040850B                 mov     esi, [esp+74h]
.text:0040850F                 mov     edi, [esp+78h]
.text:00408513                 add     esp, 7Ch
.text:00408516                 retn
.text:00408517 ; ---------------------------------------------------------------------------
.text:00408517
.text:00408517 loc_408517:                             ; CODE XREF: .text:00408503↑j
.text:00408517                 mov     [esp], edi
.text:0040851A                 call    free
.text:0040851F                 mov     dword ptr [esp+4], 0
.text:00408527                 mov     dword ptr [esp], 0
.text:0040852E                 call    GetCurrentDirectoryA
.text:00408533                 sub     esp, 8
.text:00408536                 lea     esi, [eax+1]
.text:00408539                 mov     [esp], esi
.text:0040853C                 call    malloc
.text:00408541                 mov     [esp+4], eax
.text:00408545                 mov     edi, eax
.text:00408547                 mov     [esp], esi
.text:0040854A                 call    GetCurrentDirectoryA
.text:0040854F                 sub     esp, 8
.text:00408552                 test    eax, eax
.text:00408554                 jnz     short loc_408566
.text:00408556                 mov     dword ptr [esp], 4083E4h
.text:0040855D                 call    _strdup
.text:00408562
.text:00408562 loc_408562:                             ; CODE XREF: .text:0040856E↓j
.text:00408562                 mov     edx, eax
.text:00408564                 jmp     short loc_408505
.text:00408566 ; ---------------------------------------------------------------------------
.text:00408566
.text:00408566 loc_408566:                             ; CODE XREF: .text:00408554↑j
.text:00408566                 mov     [esp], edi
.text:00408569                 call    sub_4081A0
.text:0040856E                 jmp     short loc_408562
.text:00408570
.text:00408570 ; =============== S U B R O U T I N E =======================================
.text:00408570
.text:00408570
.text:00408570 ; int __cdecl sub_408570(LPCSTR)
.text:00408570 sub_408570      proc near               ; CODE XREF: sub_405D40+38F↑p
.text:00408570
.text:00408570 String1         = dword ptr -1Ch
.text:00408570 String2         = dword ptr -18h
.text:00408570 var_C           = dword ptr -0Ch
.text:00408570 var_8           = dword ptr -8
.text:00408570 var_4           = dword ptr -4
.text:00408570 arg_0           = dword ptr  4
.text:00408570
.text:00408570                 sub     esp, 1Ch
.text:00408573                 mov     [esp+1Ch+var_4], edi
.text:00408577                 mov     edi, [esp+1Ch+arg_0]
.text:0040857B                 mov     [esp+1Ch+var_C], ebx
.text:0040857F                 mov     [esp+1Ch+var_8], esi
.text:00408583                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:00408586                 call    sub_4091C0
.text:0040858B                 mov     [esp+1Ch+String1], edi ; LPCSTR
.text:0040858E                 mov     esi, eax
.text:00408590                 call    sub_4081A0
.text:00408595                 mov     [esp+1Ch+String2], eax ; String2
.text:00408599                 mov     ebx, eax
.text:0040859B                 mov     [esp+1Ch+String1], esi ; String1
.text:0040859E                 call    _stricmp
.text:004085A3                 test    eax, eax
.text:004085A5                 setz    dl
.text:004085A8                 test    esi, esi
.text:004085AA                 movzx   edi, dl
.text:004085AD                 jz      short loc_4085B7
.text:004085AF                 mov     [esp+1Ch+String1], esi ; Block
.text:004085B2                 call    free
.text:004085B7
.text:004085B7 loc_4085B7:                             ; CODE XREF: sub_408570+3D↑j
.text:004085B7                 test    ebx, ebx
.text:004085B9                 jz      short loc_4085C3
.text:004085BB                 mov     [esp+1Ch+String1], ebx ; Block
.text:004085BE                 call    free
.text:004085C3
.text:004085C3 loc_4085C3:                             ; CODE XREF: sub_408570+49↑j
.text:004085C3                 mov     eax, edi
.text:004085C5                 mov     ebx, [esp+1Ch+var_C]
.text:004085C9                 mov     esi, [esp+1Ch+var_8]
.text:004085CD                 mov     edi, [esp+1Ch+var_4]
.text:004085D1                 add     esp, 1Ch
.text:004085D4                 retn
.text:004085D4 sub_408570      endp
.text:004085D4
.text:004085D4 ; ---------------------------------------------------------------------------
.text:004085D5                 align 10h
.text:004085E0 aKernel32_0     db 'KERNEL32',0         ; DATA XREF: .text:00408631↓o
.text:004085E9 aGetdiskfreespa db 'GetDiskFreeSpaceExA',0
.text:004085E9                                         ; DATA XREF: .text:00408642↓o
.text:004085FD ; const CHAR aVwin32[]
.text:004085FD aVwin32         db '\\.\vwin32',0       ; DATA XREF: .text:0040878C↓o
.text:004085FD                                         ; sub_408BC0+17C↓o
.text:00408608 ; ---------------------------------------------------------------------------
.text:00408608
.text:00408608 loc_408608:                             ; DATA XREF: .text:004088A2↓o
.text:00408608                 dec     esi
.text:00408609                 push    esp
.text:0040860A                 inc     esi
.text:0040860B                 push    ebx
.text:0040860C                 add     [esi+41h], al
.text:0040860F                 push    esp
.text:00408610                 xor     esi, [edx]
.text:00408612                 add     [esi+41h], al
.text:00408615                 push    esp
.text:00408616                 add     [ebx+44h], al
.text:00408619                 inc     esi
.text:0040861A                 push    ebx
.text:0040861B
.text:0040861B loc_40861B:                             ; CODE XREF: sub_408BC0+101↓p
.text:0040861B                 add     [ebp+55002674h], cl
.text:00408621                 push    edi
.text:00408622                 push    esi
.text:00408623                 push    ebx
.text:00408624                 sub     esp, 8BCh
.text:0040862A                 mov     ebp, [esp+8D0h]
.text:00408631                 mov     dword ptr [esp], offset aKernel32_0 ; "KERNEL32"
.text:00408638                 call    LoadLibraryA
.text:0040863D                 sub     esp, 4
.text:00408640                 mov     edi, eax
.text:00408642                 mov     dword ptr [esp+4], offset aGetdiskfreespa ; "GetDiskFreeSpaceExA"
.text:0040864A                 mov     [esp], eax
.text:0040864D                 call    GetProcAddress
.text:00408652                 sub     esp, 8
.text:00408655                 mov     esi, eax
.text:00408657                 test    ebp, ebp
.text:00408659                 mov     dword ptr [esp+20h], 0
.text:00408661                 jz      loc_408BA1
.text:00408667                 mov     [esp], ebp
.text:0040866A                 call    sub_407D70
.text:0040866F                 mov     [esp], eax
.text:00408672                 mov     ebp, eax
.text:00408674                 call    strlen
.text:00408679                 cmp     byte ptr [eax+ebp-1], 5Ch ; '\'
.text:0040867E                 mov     ebx, eax
.text:00408680                 jz      short loc_40869C
.text:00408682                 mov     [esp], ebp
.text:00408685                 lea     edx, [eax+1]
.text:00408688                 mov     [esp+4], edx
.text:0040868C                 call    realloc
.text:00408691                 mov     byte ptr [ebx+eax], 5Ch ; '\'
.text:00408695                 mov     ebp, eax
.text:00408697                 mov     byte ptr [ebx+eax+1], 0
.text:0040869C
.text:0040869C loc_40869C:                             ; CODE XREF: .text:00408680↑j
.text:0040869C                 mov     dword ptr [esp+1Ch], 400h
.text:004086A4                 lea     edx, [esp+0B0h]
.text:004086AB                 lea     ebx, [esp+5Ch]
.text:004086AF                 mov     [esp+18h], edx
.text:004086B3                 lea     ecx, [esp+58h]
.text:004086B7                 lea     edx, [esp+54h]
.text:004086BB                 mov     [esp+14h], ebx
.text:004086BF                 lea     eax, [esp+4B0h]
.text:004086C6                 mov     [esp+10h], ecx
.text:004086CA                 mov     [esp+0Ch], edx
.text:004086CE                 mov     dword ptr [esp+8], 400h
.text:004086D6                 mov     [esp+4], eax
.text:004086DA                 mov     [esp], ebp
.text:004086DD                 call    GetVolumeInformationA
.text:004086E2                 sub     esp, 20h
.text:004086E5                 test    eax, eax
.text:004086E7                 jz      loc_408B7E
.text:004086ED                 test    esi, esi
.text:004086EF                 jz      short loc_408715
.text:004086F1                 mov     [esp], ebp
.text:004086F4                 lea     edx, [esp+48h]
.text:004086F8                 lea     ebx, [esp+40h]
.text:004086FC                 mov     [esp+0Ch], edx
.text:00408700                 lea     ecx, [esp+38h]
.text:00408704                 mov     [esp+8], ebx
.text:00408708                 mov     [esp+4], ecx
.text:0040870C                 call    esi
.text:0040870E                 sub     esp, 10h
.text:00408711                 mov     [esp+20h], eax
.text:00408715
.text:00408715 loc_408715:                             ; CODE XREF: .text:004086EF↑j
.text:00408715                 test    edi, edi
.text:00408717                 jz      short loc_408724
.text:00408719                 mov     [esp], edi
.text:0040871C                 call    FreeLibrary
.text:00408721                 sub     esp, 4
.text:00408724
.text:00408724 loc_408724:                             ; CODE XREF: .text:00408717↑j
.text:00408724                 call    sub_409C50
.text:00408729                 test    eax, eax
.text:0040872B                 lea     esi, [esp+28h]
.text:0040872F                 jz      loc_408B60
.text:00408735                 call    sub_409C50
.text:0040873A                 test    eax, eax
.text:0040873C                 jz      short loc_40874C
.text:0040873E                 call    sub_409BA0
.text:00408743                 cmp     eax, 0Bh
.text:00408746                 jle     loc_408B34
.text:0040874C
.text:0040874C loc_40874C:                             ; CODE XREF: .text:0040873C↑j
.text:0040874C                 cld
.text:0040874D                 xor     eax, eax
.text:0040874F                 lea     ebx, [esp+60h]
.text:00408753                 mov     ecx, 7
.text:00408758                 mov     edi, ebx
.text:0040875A                 rep stosd
.text:0040875C                 mov     dword ptr [esp+18h], 0
.text:00408764                 mov     dword ptr [esp+14h], 4000000h
.text:0040876C                 mov     dword ptr [esp+10h], 0
.text:00408774                 mov     dword ptr [esp+0Ch], 0
.text:0040877C                 mov     dword ptr [esp+8], 0
.text:00408784                 mov     dword ptr [esp+4], 0
.text:0040878C                 mov     dword ptr [esp], offset aVwin32 ; "\\\\.\\vwin32"
.text:00408793                 call    CreateFileA
.text:00408798                 sub     esp, 1Ch
.text:0040879B                 mov     edi, eax
.text:0040879D                 cmp     eax, 0FFFFFFFFh
.text:004087A0                 jz      short loc_408820
.text:004087A2                 mov     [esp+10h], ebx
.text:004087A6                 lea     edx, [esp+80h]
.text:004087AD                 lea     ecx, [esp+24h]
.text:004087B1                 mov     [esp+70h], edx
.text:004087B5                 mov     [esp+18h], ecx
.text:004087B9                 mov     [esp+8], ebx
.text:004087BD                 mov     dword ptr [esp+6Ch], 7303h
.text:004087C5                 mov     dword ptr [esp+68h], 2Ch ; ','
.text:004087CD                 mov     [esp+64h], ebp
.text:004087D1                 mov     dword ptr [esp+78h], 1
.text:004087D9                 mov     dword ptr [esp+1Ch], 0
.text:004087E1                 mov     dword ptr [esp+14h], 1Ch
.text:004087E9                 mov     dword ptr [esp+0Ch], 1Ch
.text:004087F1                 mov     dword ptr [esp+4], 6
.text:004087F9                 mov     [esp], eax
.text:004087FC                 call    DeviceIoControl
.text:00408801                 sub     esp, 20h
.text:00408804                 mov     ebx, eax
.text:00408806                 mov     [esp], edi
.text:00408809                 call    CloseHandle
.text:0040880E                 sub     esp, 4
.text:00408811                 test    ebx, ebx
.text:00408813                 jz      short loc_408820
.text:00408815                 test    byte ptr [esp+78h], 1
.text:0040881A                 jz      loc_408B00
.text:00408820
.text:00408820 loc_408820:                             ; CODE XREF: .text:004087A0↑j
.text:00408820                                         ; .text:00408813↑j
.text:00408820                 call    sub_409170
.text:00408825                 mov     edi, eax
.text:00408827                 call    _errno
.text:0040882C                 mov     [eax], edi
.text:0040882E                 xor     eax, eax
.text:00408830
.text:00408830 loc_408830:                             ; CODE XREF: .text:00408B2F↓j
.text:00408830                                         ; .text:00408B5B↓j
.text:00408830                 test    eax, eax
.text:00408832                 jnz     short loc_408854
.text:00408834                 mov     dword ptr [esp+34h], 1
.text:0040883C                 mov     dword ptr [esp+30h], 200h
.text:00408844                 mov     dword ptr [esp+2Ch], 0
.text:0040884C                 mov     dword ptr [esp+28h], 0
.text:00408854
.text:00408854 loc_408854:                             ; CODE XREF: .text:00408832↑j
.text:00408854                 mov     edx, [esp+30h]
.text:00408858                 mov     edi, [esp+34h]
.text:0040885C                 mov     ecx, [esp+20h]
.text:00408860                 imul    edi, edx
.text:00408863                 test    ecx, ecx
.text:00408865                 jnz     short loc_40888D
.text:00408867                 mov     eax, [esp+28h]
.text:0040886B                 mul     edi
.text:0040886D                 mov     esi, eax
.text:0040886F                 mov     eax, [esp+2Ch]
.text:00408873                 mov     [esp+44h], edx
.text:00408877                 mov     [esp+40h], esi
.text:0040887B                 mul     edi
.text:0040887D                 mov     [esp+48h], eax
.text:00408881                 mov     [esp+4Ch], edx
.text:00408885                 mov     [esp+38h], eax
.text:00408889                 mov     [esp+3Ch], edx
.text:0040888D
.text:0040888D loc_40888D:                             ; CODE XREF: .text:00408865↑j
.text:0040888D                 mov     ebx, [esp+5Ch]
.text:00408891                 lea     edx, [esp+0B0h]
.text:00408898                 mov     ecx, [esp+8D4h]
.text:0040889F                 mov     [ecx+48h], ebx
.text:004088A2                 mov     dword ptr [esp+4], offset loc_408608
.text:004088AA                 mov     [esp], edx
.text:004088AD                 call    _stricmp
.text:004088B2                 test    eax, eax
.text:004088B4                 jnz     loc_408A70
.text:004088BA                 mov     esi, [esp+8D4h]
.text:004088C1                 mov     dword ptr [esi], 5346544Eh
.text:004088C7
.text:004088C7 loc_4088C7:                             ; CODE XREF: .text:00408A98↓j
.text:004088C7                                         ; .text:00408AC5↓j ...
.text:004088C7                 mov     ebx, [esp+30h]
.text:004088CB                 mov     esi, [esp+8D4h]
.text:004088D2                 mov     [esi+4], ebx
.text:004088D5                 mov     [esi+8], ebx
.text:004088D8                 mov     ebx, [esi+8]
.text:004088DB                 mov     [esi+0Ch], edi
.text:004088DE                 mov     ecx, [esp+44h]
.text:004088E2                 xor     esi, esi
.text:004088E4                 mov     [esp+8], ebx
.text:004088E8                 mov     edx, [esp+40h]
.text:004088EC                 mov     [esp+0Ch], esi
.text:004088F0                 mov     [esp+4], ecx
.text:004088F4                 mov     [esp], edx
.text:004088F7                 call    sub_40D1B0
.text:004088FC                 mov     ecx, [esp+8D4h]
.text:00408903                 mov     [ecx+10h], eax
.text:00408906                 mov     [ecx+14h], edx
.text:00408909                 mov     ecx, [esp+4Ch]
.text:0040890D                 mov     [esp+8], ebx
.text:00408911                 mov     edx, [esp+48h]
.text:00408915                 mov     [esp+0Ch], esi
.text:00408919                 mov     [esp+4], ecx
.text:0040891D                 mov     [esp], edx
.text:00408920                 call    sub_40D1B0
.text:00408925                 mov     ecx, [esp+8D4h]
.text:0040892C                 mov     [ecx+18h], eax
.text:0040892F                 mov     [ecx+1Ch], edx
.text:00408932                 mov     ecx, [esp+38h]
.text:00408936                 mov     [esp+8], ebx
.text:0040893A                 mov     ebx, [esp+3Ch]
.text:0040893E                 mov     [esp+0Ch], esi
.text:00408942                 mov     [esp], ecx
.text:00408945                 mov     [esp+4], ebx
.text:00408949                 call    sub_40D1B0
.text:0040894E                 mov     esi, [esp+8D4h]
.text:00408955                 mov     [esi+20h], eax
.text:00408958                 mov     [esi+24h], edx
.text:0040895B                 mov     ecx, [esp+44h]
.text:0040895F                 mov     esi, edi
.text:00408961                 mov     [esp+8], esi
.text:00408965                 mov     edx, [esp+40h]
.text:00408969                 xor     edi, edi
.text:0040896B                 mov     [esp+0Ch], edi
.text:0040896F                 mov     [esp+4], ecx
.text:00408973                 mov     [esp], edx
.text:00408976                 call    sub_40D1B0
.text:0040897B                 mov     ebx, [esp+8D4h]
.text:00408982                 mov     [ebx+28h], eax
.text:00408985                 mov     [ebx+2Ch], edx
.text:00408988                 mov     ecx, [esp+4Ch]
.text:0040898C                 mov     [esp+8], esi
.text:00408990                 mov     edx, [esp+48h]
.text:00408994                 mov     [esp+0Ch], edi
.text:00408998                 mov     [esp+4], ecx
.text:0040899C                 mov     [esp], edx
.text:0040899F                 call    sub_40D1B0
.text:004089A4                 mov     ebx, [esp+8D4h]
.text:004089AB                 mov     [ebx+30h], eax
.text:004089AE                 mov     [ebx+34h], edx
.text:004089B1                 mov     ecx, [esp+3Ch]
.text:004089B5                 mov     [esp+8], esi
.text:004089B9                 mov     edx, [esp+38h]
.text:004089BD                 mov     [esp+0Ch], edi
.text:004089C1                 mov     [esp+4], ecx
.text:004089C5                 mov     [esp], edx
.text:004089C8                 call    sub_40D1B0
.text:004089CD                 mov     edx, [esp+8D4h]
.text:004089D4                 lea     ecx, [esp+0B0h]
.text:004089DB                 mov     [edx+38h], eax
.text:004089DE                 mov     esi, [esp+58h]
.text:004089E2                 mov     dword ptr [edx+44h], 0FFFFFFFFh
.text:004089E9                 mov     [edx+110h], esi
.text:004089EF                 mov     esi, edx
.text:004089F1                 add     esi, 4Ch ; 'L'
.text:004089F4                 movzx   ebx, word ptr [esp+56h]
.text:004089F9                 movzx   edi, word ptr [esp+54h]
.text:004089FE                 mov     [edx+3Ch], ebx
.text:00408A01                 lea     ebx, [esp+4B0h]
.text:00408A08                 mov     [edx+40h], edi
.text:00408A0B                 mov     [esp+4], ecx
.text:00408A0F                 mov     dword ptr [esp+8], 10h
.text:00408A17                 mov     [esp], esi
.text:00408A1A                 call    strncpy
.text:00408A1F                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408A27                 mov     edi, [esp+8D4h]
.text:00408A2E                 mov     [esp+4], ebx
.text:00408A32                 add     edi, 5Ch ; '\'
.text:00408A35                 mov     [esp], edi
.text:00408A38                 call    strncpy
.text:00408A3D                 mov     [esp+4], ebp
.text:00408A41                 mov     ebp, [esp+8D4h]
.text:00408A48                 mov     dword ptr [esp+8], 5Ah ; 'Z'
.text:00408A50                 add     ebp, 0B6h ; '¶'
.text:00408A56                 mov     [esp], ebp
.text:00408A59                 call    strncpy
.text:00408A5E                 xor     eax, eax
.text:00408A60
.text:00408A60 loc_408A60:                             ; CODE XREF: .text:00408B9C↓j
.text:00408A60                 add     esp, 8BCh
.text:00408A66                 pop     ebx
.text:00408A67                 pop     esi
.text:00408A68                 pop     edi
.text:00408A69                 pop     ebp
.text:00408A6A                 retn
.text:00408A6A ; ---------------------------------------------------------------------------
.text:00408A6B                 align 10h
.text:00408A70
.text:00408A70 loc_408A70:                             ; CODE XREF: .text:004088B4↑j
.text:00408A70                 mov     dword ptr [esp+4], 40860Dh
.text:00408A78                 lea     eax, [esp+0B0h]
.text:00408A7F                 mov     [esp], eax
.text:00408A82                 call    _stricmp
.text:00408A87                 test    eax, eax
.text:00408A89                 jnz     short loc_408A9D
.text:00408A8B                 mov     edx, [esp+8D4h]
.text:00408A92                 mov     dword ptr [edx], 4008h
.text:00408A98                 jmp     loc_4088C7
.text:00408A9D ; ---------------------------------------------------------------------------
.text:00408A9D
.text:00408A9D loc_408A9D:                             ; CODE XREF: .text:00408A89↑j
.text:00408A9D                 mov     dword ptr [esp+4], 408613h
.text:00408AA5                 lea     ecx, [esp+0B0h]
.text:00408AAC                 mov     [esp], ecx
.text:00408AAF                 call    _stricmp
.text:00408AB4                 test    eax, eax
.text:00408AB6                 jnz     short loc_408ACA
.text:00408AB8                 mov     ebx, [esp+8D4h]
.text:00408ABF                 mov     dword ptr [ebx], 4006h
.text:00408AC5                 jmp     loc_4088C7
.text:00408ACA ; ---------------------------------------------------------------------------
.text:00408ACA
.text:00408ACA loc_408ACA:                             ; CODE XREF: .text:00408AB6↑j
.text:00408ACA                 mov     dword ptr [esp+4], 408617h
.text:00408AD2                 lea     eax, [esp+0B0h]
.text:00408AD9                 mov     [esp], eax
.text:00408ADC                 call    _stricmp
.text:00408AE1                 test    eax, eax
.text:00408AE3                 mov     esi, [esp+8D4h]
.text:00408AEA                 setnz   cl
.text:00408AED                 movzx   edx, cl
.text:00408AF0                 dec     edx
.text:00408AF1                 and     edx, 4000h
.text:00408AF7                 mov     [esi], edx
.text:00408AF9                 jmp     loc_4088C7
.text:00408AF9 ; ---------------------------------------------------------------------------
.text:00408AFE                 align 10h
.text:00408B00
.text:00408B00 loc_408B00:                             ; CODE XREF: .text:0040881A↑j
.text:00408B00                 mov     edi, [esp+84h]
.text:00408B07                 mov     eax, 1
.text:00408B0C                 mov     edx, [esp+88h]
.text:00408B13                 mov     ecx, [esp+8Ch]
.text:00408B1A                 mov     ebx, [esp+90h]
.text:00408B21                 mov     [esp+34h], edi
.text:00408B25                 mov     [esp+30h], edx
.text:00408B29                 mov     [esp+2Ch], ecx
.text:00408B2D                 mov     [esi], ebx
.text:00408B2F                 jmp     loc_408830
.text:00408B34 ; ---------------------------------------------------------------------------
.text:00408B34
.text:00408B34 loc_408B34:                             ; CODE XREF: .text:00408746↑j
.text:00408B34                 mov     [esp+10h], esi
.text:00408B38                 lea     eax, [esp+2Ch]
.text:00408B3C                 lea     esi, [esp+30h]
.text:00408B40                 mov     [esp+0Ch], eax
.text:00408B44                 lea     edi, [esp+34h]
.text:00408B48                 mov     [esp+8], esi
.text:00408B4C                 mov     [esp+4], edi
.text:00408B50
.text:00408B50 loc_408B50:                             ; CODE XREF: .text:00408B7C↓j
.text:00408B50                 mov     [esp], ebp
.text:00408B53                 call    GetDiskFreeSpaceA
.text:00408B58                 sub     esp, 14h
.text:00408B5B                 jmp     loc_408830
.text:00408B60 ; ---------------------------------------------------------------------------
.text:00408B60
.text:00408B60 loc_408B60:                             ; CODE XREF: .text:0040872F↑j
.text:00408B60                 mov     [esp+10h], esi
.text:00408B64                 lea     ebx, [esp+2Ch]
.text:00408B68                 lea     eax, [esp+30h]
.text:00408B6C                 mov     [esp+0Ch], ebx
.text:00408B70                 lea     esi, [esp+34h]
.text:00408B74                 mov     [esp+8], eax
.text:00408B78                 mov     [esp+4], esi
.text:00408B7C                 jmp     short loc_408B50
.text:00408B7E ; ---------------------------------------------------------------------------
.text:00408B7E
.text:00408B7E loc_408B7E:                             ; CODE XREF: .text:004086E7↑j
.text:00408B7E                 mov     [esp], edi
.text:00408B81                 call    FreeLibrary
.text:00408B86                 sub     esp, 4
.text:00408B89                 call    sub_409170
.text:00408B8E                 mov     esi, eax
.text:00408B90                 call    _errno
.text:00408B95                 mov     [eax], esi
.text:00408B97
.text:00408B97 loc_408B97:                             ; CODE XREF: .text:00408BB7↓j
.text:00408B97                 mov     eax, 0FFFFFFFFh
.text:00408B9C                 jmp     loc_408A60
.text:00408BA1 ; ---------------------------------------------------------------------------
.text:00408BA1
.text:00408BA1 loc_408BA1:                             ; CODE XREF: .text:00408661↑j
.text:00408BA1                 mov     [esp], edi
.text:00408BA4                 call    FreeLibrary
.text:00408BA9                 sub     esp, 4
.text:00408BAC                 call    _errno
.text:00408BB1                 mov     dword ptr [eax], 2
.text:00408BB7                 jmp     short loc_408B97
.text:00408BB7 ; ---------------------------------------------------------------------------
.text:00408BB9                 align 10h
.text:00408BC0
.text:00408BC0 ; =============== S U B R O U T I N E =======================================
.text:00408BC0
.text:00408BC0
.text:00408BC0 ; int __cdecl sub_408BC0(LPCSTR, LPDWORD, LPDWORD, LPDWORD, LPDWORD)
.text:00408BC0 sub_408BC0      proc near               ; CODE XREF: sub_4065F0+2C7↑p
.text:00408BC0                                         ; .text:00406C2A↑p
.text:00408BC0
.text:00408BC0 lpFileName      = dword ptr -9Ch
.text:00408BC0 dwDesiredAccess = dword ptr -98h
.text:00408BC0 dwShareMode     = dword ptr -94h
.text:00408BC0 lpSecurityAttributes= dword ptr -90h
.text:00408BC0 dwCreationDisposition= dword ptr -8Ch
.text:00408BC0 dwFlagsAndAttributes= dword ptr -88h
.text:00408BC0 hTemplateFile   = dword ptr -84h
.text:00408BC0 lpOverlapped    = dword ptr -80h
.text:00408BC0 BytesReturned   = dword ptr -70h
.text:00408BC0 InBuffer        = byte ptr -6Ch
.text:00408BC0 var_68          = dword ptr -68h
.text:00408BC0 var_64          = dword ptr -64h
.text:00408BC0 var_60          = dword ptr -60h
.text:00408BC0 var_5C          = dword ptr -5Ch
.text:00408BC0 var_54          = dword ptr -54h
.text:00408BC0 var_4C          = byte ptr -4Ch
.text:00408BC0 var_48          = dword ptr -48h
.text:00408BC0 var_44          = dword ptr -44h
.text:00408BC0 var_40          = dword ptr -40h
.text:00408BC0 var_3C          = dword ptr -3Ch
.text:00408BC0 lpRootPathName  = dword ptr -2Ch
.text:00408BC0 lpSectorsPerCluster= dword ptr -28h
.text:00408BC0 lpBytesPerSector= dword ptr -24h
.text:00408BC0 lpNumberOfFreeClusters= dword ptr -20h
.text:00408BC0 lpTotalNumberOfClusters= dword ptr -1Ch
.text:00408BC0 var_18          = dword ptr -18h
.text:00408BC0 var_14          = dword ptr -14h
.text:00408BC0 var_10          = dword ptr -10h
.text:00408BC0 var_C           = dword ptr -0Ch
.text:00408BC0 var_8           = dword ptr -8
.text:00408BC0 var_4           = dword ptr -4
.text:00408BC0 arg_0           = dword ptr  4
.text:00408BC0 arg_4           = dword ptr  8
.text:00408BC0 arg_8           = dword ptr  0Ch
.text:00408BC0 arg_C           = dword ptr  10h
.text:00408BC0 arg_10          = dword ptr  14h
.text:00408BC0
.text:00408BC0                 sub     esp, 2Ch
.text:00408BC3                 mov     edx, [esp+2Ch+arg_0]
.text:00408BC7                 mov     [esp+2Ch+var_10], ebx
.text:00408BCB                 mov     ebx, [esp+2Ch+arg_10]
.text:00408BCF                 mov     [esp+2Ch+var_C], esi
.text:00408BD3                 mov     esi, [esp+2Ch+arg_C]
.text:00408BD7                 mov     [esp+2Ch+var_8], edi
.text:00408BDB                 mov     edi, [esp+2Ch+arg_8]
.text:00408BDF                 mov     [esp+2Ch+var_4], ebp
.text:00408BE3                 mov     ebp, [esp+2Ch+arg_4]
.text:00408BE7                 mov     [esp+2Ch+var_14], edx
.text:00408BEB                 call    sub_409C50
.text:00408BF0                 test    eax, eax
.text:00408BF2                 jz      short loc_408C24
.text:00408BF4                 mov     [esp+2Ch+arg_10], ebx
.text:00408BF8                 mov     edx, [esp+2Ch+var_14]
.text:00408BFC                 mov     ebx, [esp+2Ch+var_10]
.text:00408C00                 mov     [esp+2Ch+arg_C], esi
.text:00408C04                 mov     esi, [esp+2Ch+var_C]
.text:00408C08                 mov     [esp+2Ch+arg_8], edi
.text:00408C0C                 mov     edi, [esp+2Ch+var_8]
.text:00408C10                 mov     [esp+2Ch+arg_4], ebp
.text:00408C14                 mov     ebp, [esp+2Ch+var_4]
.text:00408C18                 mov     [esp+2Ch+arg_0], edx
.text:00408C1C                 add     esp, 2Ch
.text:00408C1F                 jmp     loc_408CD0
.text:00408C24 ; ---------------------------------------------------------------------------
.text:00408C24
.text:00408C24 loc_408C24:                             ; CODE XREF: sub_408BC0+32↑j
.text:00408C24                 mov     [esp+2Ch+lpTotalNumberOfClusters], ebx ; lpTotalNumberOfClusters
.text:00408C28                 mov     ecx, [esp+2Ch+var_14]
.text:00408C2C                 mov     [esp+2Ch+lpNumberOfFreeClusters], esi ; lpNumberOfFreeClusters
.text:00408C30                 mov     [esp+2Ch+lpBytesPerSector], edi ; lpBytesPerSector
.text:00408C34                 mov     [esp+2Ch+lpSectorsPerCluster], ebp ; lpSectorsPerCluster
.text:00408C38                 mov     [esp+2Ch+lpRootPathName], ecx ; lpRootPathName
.text:00408C3B                 call    GetDiskFreeSpaceA
.text:00408C40                 sub     esp, 14h
.text:00408C43                 mov     ebx, [esp+2Ch+var_10]
.text:00408C47                 mov     esi, [esp+2Ch+var_C]
.text:00408C4B                 mov     edi, [esp+2Ch+var_8]
.text:00408C4F                 mov     ebp, [esp+2Ch+var_4]
.text:00408C53                 add     esp, 2Ch
.text:00408C56                 retn
.text:00408C56 ; ---------------------------------------------------------------------------
.text:00408C57                 align 10h
.text:00408C60
.text:00408C60 loc_408C60:                             ; CODE XREF: .text:00409F6D↓p
.text:00408C60                 sub     esp, 1Ch
.text:00408C63                 mov     [esp+1Ch+var_4], esi
.text:00408C67                 mov     esi, [esp+1Ch+arg_0]
.text:00408C6B                 mov     [esp+1Ch+var_8], ebx
.text:00408C6F                 mov     [esp+1Ch+lpTotalNumberOfClusters], esi ; LPCSTR
.text:00408C72                 call    sub_4081A0
.text:00408C77                 test    eax, eax
.text:00408C79                 mov     ebx, eax
.text:00408C7B                 jz      short loc_408C90
.text:00408C7D                 cmp     byte ptr [eax], 0
.text:00408C80                 jz      short loc_408C90
.text:00408C82                 test    esi, esi
.text:00408C84                 jz      short loc_408C90
.text:00408C86                 cmp     byte ptr [esi], 0
.text:00408C89                 jnz     short loc_408CB6
.text:00408C8B                 nop
.text:00408C8C                 lea     esi, [esi+0]
.text:00408C90
.text:00408C90 loc_408C90:                             ; CODE XREF: sub_408BC0+BB↑j
.text:00408C90                                         ; sub_408BC0+C0↑j ...
.text:00408C90                 call    _errno
.text:00408C95                 mov     dword ptr [eax], 2
.text:00408C9B                 mov     esi, 0FFFFFFFFh
.text:00408CA0
.text:00408CA0 loc_408CA0:                             ; CODE XREF: sub_408BC0+108↓j
.text:00408CA0                 mov     [esp+1Ch+lpTotalNumberOfClusters], ebx ; Block
.text:00408CA3                 call    free
.text:00408CA8                 mov     eax, esi
.text:00408CAA                 mov     ebx, [esp+1Ch+var_8]
.text:00408CAE                 mov     esi, [esp+1Ch+var_4]
.text:00408CB2                 add     esp, 1Ch
.text:00408CB5                 retn
.text:00408CB6 ; ---------------------------------------------------------------------------
.text:00408CB6
.text:00408CB6 loc_408CB6:                             ; CODE XREF: sub_408BC0+C9↑j
.text:00408CB6                 mov     [esp+1Ch+lpTotalNumberOfClusters], eax
.text:00408CB9                 mov     edx, [esp+1Ch+arg_4]
.text:00408CBD                 mov     [esp+1Ch+var_18], edx
.text:00408CC1                 call    near ptr loc_40861B+5
.text:00408CC6                 mov     esi, eax
.text:00408CC8                 jmp     short loc_408CA0
.text:00408CC8 ; ---------------------------------------------------------------------------
.text:00408CCA                 align 10h
.text:00408CD0
.text:00408CD0 loc_408CD0:                             ; CODE XREF: sub_408BC0+5F↑j
.text:00408CD0                 push    ebp
.text:00408CD1                 push    edi
.text:00408CD2                 push    esi
.text:00408CD3                 push    ebx
.text:00408CD4                 sub     esp, 8Ch
.text:00408CDA                 mov     ebp, [esp+9Ch+arg_0]
.text:00408CE1                 call    sub_409C50
.text:00408CE6                 test    eax, eax
.text:00408CE8                 jz      short loc_408CF8
.text:00408CEA                 call    sub_409BA0
.text:00408CEF                 cmp     eax, 0Bh
.text:00408CF2                 jle     loc_408E20
.text:00408CF8
.text:00408CF8 loc_408CF8:                             ; CODE XREF: sub_408BC0+128↑j
.text:00408CF8                 cld
.text:00408CF9                 xor     eax, eax
.text:00408CFB                 lea     ebx, [esp+9Ch+InBuffer]
.text:00408CFF                 mov     ecx, 7
.text:00408D04                 mov     edi, ebx
.text:00408D06                 lea     esi, [esp+9Ch+var_4C]
.text:00408D0A                 rep stosd
.text:00408D0C                 mov     [esp+9Ch+hTemplateFile], 0 ; hTemplateFile
.text:00408D14                 mov     [esp+9Ch+dwFlagsAndAttributes], 4000000h ; dwFlagsAndAttributes
.text:00408D1C                 mov     [esp+9Ch+dwCreationDisposition], 0 ; dwCreationDisposition
.text:00408D24                 mov     [esp+9Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:00408D2C                 mov     [esp+9Ch+dwShareMode], 0 ; dwShareMode
.text:00408D34                 mov     [esp+9Ch+dwDesiredAccess], 0 ; dwDesiredAccess
.text:00408D3C                 mov     [esp+9Ch+lpFileName], offset aVwin32 ; "\\\\.\\vwin32"
.text:00408D43                 call    CreateFileA
.text:00408D48                 sub     esp, 1Ch
.text:00408D4B                 mov     edi, eax
.text:00408D4D                 cmp     eax, 0FFFFFFFFh
.text:00408D50                 jz      short loc_408DC5
.text:00408D52                 mov     [esp+9Ch+var_68], ebp
.text:00408D56                 lea     ebp, [esp+9Ch+BytesReturned]
.text:00408D5A                 mov     [esp+9Ch+var_5C], esi
.text:00408D5E                 mov     [esp+9Ch+var_60], 7303h
.text:00408D66                 mov     [esp+9Ch+var_64], 2Ch ; ','
.text:00408D6E                 mov     [esp+9Ch+var_54], 1
.text:00408D76                 mov     [esp+9Ch+lpOverlapped], 0 ; lpOverlapped
.text:00408D7E                 mov     [esp+9Ch+hTemplateFile], ebp ; lpBytesReturned
.text:00408D82                 mov     [esp+9Ch+dwFlagsAndAttributes], 1Ch ; nOutBufferSize
.text:00408D8A                 mov     [esp+9Ch+dwCreationDisposition], ebx ; lpOutBuffer
.text:00408D8E                 mov     [esp+9Ch+lpSecurityAttributes], 1Ch ; nInBufferSize
.text:00408D96                 mov     [esp+9Ch+dwShareMode], ebx ; lpInBuffer
.text:00408D9A                 mov     [esp+9Ch+dwDesiredAccess], 6 ; dwIoControlCode
.text:00408DA2                 mov     [esp+9Ch+lpFileName], eax ; hDevice
.text:00408DA5                 call    DeviceIoControl
.text:00408DAA                 sub     esp, 20h
.text:00408DAD                 mov     esi, eax
.text:00408DAF                 mov     [esp+9Ch+lpFileName], edi ; hObject
.text:00408DB2                 call    CloseHandle
.text:00408DB7                 sub     esp, 4
.text:00408DBA                 test    esi, esi
.text:00408DBC                 jz      short loc_408DC5
.text:00408DBE                 test    byte ptr [esp+9Ch+var_54], 1
.text:00408DC3                 jz      short loc_408DE0
.text:00408DC5
.text:00408DC5 loc_408DC5:                             ; CODE XREF: sub_408BC0+190↑j
.text:00408DC5                                         ; sub_408BC0+1FC↑j
.text:00408DC5                 call    sub_409170
.text:00408DCA                 mov     edi, eax
.text:00408DCC                 call    _errno
.text:00408DD1                 mov     [eax], edi
.text:00408DD3                 xor     eax, eax
.text:00408DD5
.text:00408DD5 loc_408DD5:                             ; CODE XREF: sub_408BC0+25A↓j
.text:00408DD5                                         ; sub_408BC0+297↓j
.text:00408DD5                 add     esp, 8Ch
.text:00408DDB                 pop     ebx
.text:00408DDC                 pop     esi
.text:00408DDD                 pop     edi
.text:00408DDE                 pop     ebp
.text:00408DDF                 retn
.text:00408DE0 ; ---------------------------------------------------------------------------
.text:00408DE0
.text:00408DE0 loc_408DE0:                             ; CODE XREF: sub_408BC0+203↑j
.text:00408DE0                 mov     edx, [esp+9Ch+var_48]
.text:00408DE4                 mov     eax, 1
.text:00408DE9                 mov     ebx, [esp+9Ch+arg_4]
.text:00408DF0                 mov     ebp, [esp+9Ch+arg_8]
.text:00408DF7                 mov     ecx, [esp+9Ch+arg_C]
.text:00408DFE                 mov     [ebx], edx
.text:00408E00                 mov     edi, [esp+9Ch+var_44]
.text:00408E04                 mov     ebx, [esp+9Ch+arg_10]
.text:00408E0B                 mov     [ebp+0], edi
.text:00408E0E                 mov     esi, [esp+9Ch+var_40]
.text:00408E12                 mov     [ecx], esi
.text:00408E14                 mov     edx, [esp+9Ch+var_3C]
.text:00408E18                 mov     [ebx], edx
.text:00408E1A                 jmp     short loc_408DD5
.text:00408E1A ; ---------------------------------------------------------------------------
.text:00408E1C                 align 10h
.text:00408E20
.text:00408E20 loc_408E20:                             ; CODE XREF: sub_408BC0+132↑j
.text:00408E20                 mov     [esp+9Ch+lpFileName], ebp ; lpRootPathName
.text:00408E23                 mov     eax, [esp+9Ch+arg_C]
.text:00408E2A                 mov     ecx, [esp+9Ch+arg_10]
.text:00408E31                 mov     edx, [esp+9Ch+arg_8]
.text:00408E38                 mov     [esp+9Ch+lpSecurityAttributes], eax ; lpNumberOfFreeClusters
.text:00408E3C                 mov     eax, [esp+9Ch+arg_4]
.text:00408E43                 mov     [esp+9Ch+dwCreationDisposition], ecx ; lpTotalNumberOfClusters
.text:00408E47                 mov     [esp+9Ch+dwShareMode], edx ; lpBytesPerSector
.text:00408E4B                 mov     [esp+9Ch+dwDesiredAccess], eax ; lpSectorsPerCluster
.text:00408E4F                 call    GetDiskFreeSpaceA
.text:00408E54                 sub     esp, 14h
.text:00408E57                 jmp     loc_408DD5
.text:00408E57 sub_408BC0      endp ; sp-analysis failed
.text:00408E57
.text:00408E57 ; ---------------------------------------------------------------------------
.text:00408E5C                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60
.text:00408E60 sub_408E60      proc near               ; CODE XREF: sub_4018A0+1B↑p
.text:00408E60
.text:00408E60 lpSystemInfo    = dword ptr -0Ch
.text:00408E60 var_4           = dword ptr -4
.text:00408E60
.text:00408E60                 sub     esp, 0Ch
.text:00408E63                 mov     [esp+0Ch+var_4], edi
.text:00408E67                 mov     edi, ds:dword_40F400
.text:00408E6D                 test    edi, edi
.text:00408E6F                 mov     eax, edi
.text:00408E71                 jz      short loc_408E80
.text:00408E73
.text:00408E73 loc_408E73:                             ; CODE XREF: sub_408E60+48↓j
.text:00408E73                 mov     eax, [edi+4]
.text:00408E76                 mov     edi, [esp+0Ch+var_4]
.text:00408E7A                 add     esp, 0Ch
.text:00408E7D                 retn
.text:00408E7D ; ---------------------------------------------------------------------------
.text:00408E7E                 align 10h
.text:00408E80
.text:00408E80 loc_408E80:                             ; CODE XREF: sub_408E60+11↑j
.text:00408E80                 cld
.text:00408E81                 mov     edi, offset SystemInfo
.text:00408E86                 mov     ecx, 9
.text:00408E8B                 mov     ds:dword_40F400, edi
.text:00408E91                 rep stosd
.text:00408E93                 mov     [esp+0Ch+lpSystemInfo], offset SystemInfo ; lpSystemInfo
.text:00408E9A                 call    GetSystemInfo
.text:00408E9F                 mov     edi, ds:dword_40F400
.text:00408EA5                 sub     esp, 4
.text:00408EA8                 jmp     short loc_408E73
.text:00408EA8 sub_408E60      endp
.text:00408EA8
.text:00408EA8 ; ---------------------------------------------------------------------------
.text:00408EAA                 align 10h
.text:00408EB0
.text:00408EB0 ; =============== S U B R O U T I N E =======================================
.text:00408EB0
.text:00408EB0
.text:00408EB0 sub_408EB0      proc near               ; CODE XREF: sub_402440+203↑p
.text:00408EB0                                         ; sub_402440+3BE↑p
.text:00408EB0
.text:00408EB0 arg_0           = dword ptr  4
.text:00408EB0 arg_4           = dword ptr  8
.text:00408EB0
.text:00408EB0                 mov     ecx, [esp+arg_0]
.text:00408EB4                 mov     edx, [esp+arg_4]
.text:00408EB8                 nop
.text:00408EB9                 lea     esi, [esi+0]
.text:00408EC0
.text:00408EC0 loc_408EC0:                             ; CODE XREF: sub_408EB0+1C↓j
.text:00408EC0                 movzx   eax, byte ptr [edx]
.text:00408EC3                 mov     [ecx], al
.text:00408EC5                 inc     ecx
.text:00408EC6                 movzx   eax, byte ptr [edx]
.text:00408EC9                 inc     edx
.text:00408ECA                 test    al, al
.text:00408ECC                 jnz     short loc_408EC0
.text:00408ECE                 lea     eax, [ecx-1]
.text:00408ED1                 retn
.text:00408ED1 sub_408EB0      endp
.text:00408ED1
.text:00408ED1 ; ---------------------------------------------------------------------------
.text:00408ED2                 align 10h
.text:00408EE0
.text:00408EE0 ; =============== S U B R O U T I N E =======================================
.text:00408EE0
.text:00408EE0 ; Attributes: info_from_lumina
.text:00408EE0
.text:00408EE0 ___get_errno    proc near               ; CODE XREF: sub_409170+B↓p
.text:00408EE0
.text:00408EE0 arg_0           = dword ptr  4
.text:00408EE0
.text:00408EE0                 mov     eax, [esp+arg_0]
.text:00408EE4                 cmp     eax, 53h ; 'S'
.text:00408EE7                 jg      loc_408FE0
.text:00408EED                 cmp     eax, 52h ; 'R'
.text:00408EF0                 jge     short loc_408F42
.text:00408EF2                 cmp     eax, 0Fh
.text:00408EF5                 jz      short loc_408F10
.text:00408EF7                 cmp     eax, 0Fh
.text:00408EFA                 jg      short loc_408F70
.text:00408EFC                 cmp     eax, 9
.text:00408EFF                 jg      short loc_408F50
.text:00408F01                 cmp     eax, 7
.text:00408F04                 jge     short loc_408F49
.text:00408F06                 cmp     eax, 3
.text:00408F09                 jg      short loc_408F2A
.text:00408F0B                 cmp     eax, 2
.text:00408F0E                 jl      short loc_408F23
.text:00408F10
.text:00408F10 loc_408F10:                             ; CODE XREF: ___get_errno+15↑j
.text:00408F10                                         ; ___get_errno+9D↓j ...
.text:00408F10                 mov     edx, 2
.text:00408F15                 lea     esi, [esi+0]
.text:00408F19                 lea     edi, [edi+0]
.text:00408F20
.text:00408F20 loc_408F20:                             ; CODE XREF: ___get_errno+48↓j
.text:00408F20                                         ; ___get_errno+59↓j ...
.text:00408F20                 mov     eax, edx
.text:00408F22                 retn
.text:00408F23 ; ---------------------------------------------------------------------------
.text:00408F23
.text:00408F23 loc_408F23:                             ; CODE XREF: ___get_errno+2E↑j
.text:00408F23                                         ; ___get_errno+78↓j ...
.text:00408F23                 mov     edx, 16h
.text:00408F28                 jmp     short loc_408F20
.text:00408F2A ; ---------------------------------------------------------------------------
.text:00408F2A
.text:00408F2A loc_408F2A:                             ; CODE XREF: ___get_errno+29↑j
.text:00408F2A                 cmp     eax, 5
.text:00408F2D                 jz      short loc_408F42
.text:00408F2F                 cmp     eax, 5
.text:00408F32                 jg      short loc_408F3B
.text:00408F34                 mov     edx, 18h
.text:00408F39                 jmp     short loc_408F20
.text:00408F3B ; ---------------------------------------------------------------------------
.text:00408F3B
.text:00408F3B loc_408F3B:                             ; CODE XREF: ___get_errno+52↑j
.text:00408F3B                                         ; ___get_errno+180↓j
.text:00408F3B                 mov     edx, 9
.text:00408F40                 jmp     short loc_408F20
.text:00408F42 ; ---------------------------------------------------------------------------
.text:00408F42
.text:00408F42 loc_408F42:                             ; CODE XREF: ___get_errno+10↑j
.text:00408F42                                         ; ___get_errno+4D↑j ...
.text:00408F42                 mov     edx, 0Dh
.text:00408F47                 jmp     short loc_408F20
.text:00408F49 ; ---------------------------------------------------------------------------
.text:00408F49
.text:00408F49 loc_408F49:                             ; CODE XREF: ___get_errno+24↑j
.text:00408F49                                         ; ___get_errno+73↓j ...
.text:00408F49                 mov     edx, 0Ch
.text:00408F4E                 jmp     short loc_408F20
.text:00408F50 ; ---------------------------------------------------------------------------
.text:00408F50
.text:00408F50 loc_408F50:                             ; CODE XREF: ___get_errno+1F↑j
.text:00408F50                 cmp     eax, 0Dh
.text:00408F53                 jg      short loc_408F49
.text:00408F55                 cmp     eax, 0Ch
.text:00408F58                 jge     short loc_408F23
.text:00408F5A                 cmp     eax, 0Ah
.text:00408F5D                 mov     edx, 7
.text:00408F62                 jz      short loc_408F20
.text:00408F64                 cmp     eax, 0Bh
.text:00408F67                 jnz     short loc_408F23
.text:00408F69
.text:00408F69 loc_408F69:                             ; CODE XREF: ___get_errno+21A↓j
.text:00408F69                 mov     edx, 8
.text:00408F6E                 jmp     short loc_408F20
.text:00408F70 ; ---------------------------------------------------------------------------
.text:00408F70
.text:00408F70 loc_408F70:                             ; CODE XREF: ___get_errno+1A↑j
.text:00408F70                 cmp     eax, 22h ; '"'
.text:00408F73                 jg      short loc_408FA4
.text:00408F75                 cmp     eax, 16h
.text:00408F78                 jge     short loc_408F42
.text:00408F7A                 cmp     eax, 12h
.text:00408F7D                 jz      short loc_408F10
.text:00408F7F                 cmp     eax, 12h
.text:00408F82                 jg      short loc_408F95
.text:00408F84                 cmp     eax, 10h
.text:00408F87                 jz      short loc_408F42
.text:00408F89                 mov     edx, 12h
.text:00408F8E                 cmp     eax, 11h
.text:00408F91
.text:00408F91 loc_408F91:                             ; CODE XREF: ___get_errno+172↓j
.text:00408F91                                         ; ___get_errno+24C↓j ...
.text:00408F91                 jnz     short loc_408F23
.text:00408F93                 jmp     short loc_408F20
.text:00408F95 ; ---------------------------------------------------------------------------
.text:00408F95
.text:00408F95 loc_408F95:                             ; CODE XREF: ___get_errno+A2↑j
.text:00408F95                 cmp     eax, 14h
.text:00408F98                 jle     short loc_408F42
.text:00408F9A
.text:00408F9A loc_408F9A:                             ; CODE XREF: ___get_errno+1D7↓j
.text:00408F9A                 mov     edx, 10h
.text:00408F9F                 jmp     loc_408F20
.text:00408FA4 ; ---------------------------------------------------------------------------
.text:00408FA4
.text:00408FA4 loc_408FA4:                             ; CODE XREF: ___get_errno+93↑j
.text:00408FA4                 cmp     eax, 41h ; 'A'
.text:00408FA7                 jz      short loc_408F42
.text:00408FA9                 cmp     eax, 41h ; 'A'
.text:00408FAC                 jg      short loc_408FC1
.text:00408FAE                 cmp     eax, 24h ; '$'
.text:00408FB1                 jz      short loc_408F42
.text:00408FB3                 cmp     eax, 35h ; '5'
.text:00408FB6                 jnz     loc_408F23
.text:00408FBC                 jmp     loc_408F10
.text:00408FC1 ; ---------------------------------------------------------------------------
.text:00408FC1
.text:00408FC1 loc_408FC1:                             ; CODE XREF: ___get_errno+CC↑j
.text:00408FC1                 cmp     eax, 43h ; 'C'
.text:00408FC4                 jz      loc_408F10
.text:00408FCA                 cmp     eax, 50h ; 'P'
.text:00408FCD                 jnz     loc_408F23
.text:00408FD3
.text:00408FD3 loc_408FD3:                             ; CODE XREF: ___get_errno+1FB↓j
.text:00408FD3                 mov     edx, 11h
.text:00408FD8                 jmp     loc_408F20
.text:00408FD8 ; ---------------------------------------------------------------------------
.text:00408FDD                 align 10h
.text:00408FE0
.text:00408FE0 loc_408FE0:                             ; CODE XREF: ___get_errno+7↑j
.text:00408FE0                 cmp     eax, 0A1h ; '¡'
.text:00408FE5                 jz      loc_408F10
.text:00408FEB                 cmp     eax, 0A1h ; '¡'
.text:00408FF0                 jg      loc_4090A0
.text:00408FF6                 cmp     eax, 81h
.text:00408FFB                 jg      short loc_409065
.text:00408FFD                 cmp     eax, 80h ; '€'
.text:00409002                 mov     edx, 0Ah
.text:00409007                 jge     loc_408F20
.text:0040900D                 cmp     eax, 6Ch ; 'l'
.text:00409010                 jz      loc_408F42
.text:00409016                 cmp     eax, 6Ch ; 'l'
.text:00409019                 jg      short loc_409037
.text:0040901B                 cmp     eax, 57h ; 'W'
.text:0040901E                 jz      loc_408F23
.text:00409024                 cmp     eax, 59h ; 'Y'
.text:00409027                 jnz     loc_408F23
.text:0040902D
.text:0040902D loc_40902D:                             ; CODE XREF: ___get_errno+1E9↓j
.text:0040902D                                         ; ___get_errno+23C↓j
.text:0040902D                 mov     edx, 0Bh
.text:00409032                 jmp     loc_408F20
.text:00409037 ; ---------------------------------------------------------------------------
.text:00409037
.text:00409037 loc_409037:                             ; CODE XREF: ___get_errno+139↑j
.text:00409037                 cmp     eax, 70h ; 'p'
.text:0040903A                 mov     edx, 1Ch
.text:0040903F                 jz      loc_408F20
.text:00409045                 cmp     eax, 70h ; 'p'
.text:00409048                 jg      short loc_409057
.text:0040904A                 mov     edx, 20h ; ' '
.text:0040904F                 cmp     eax, 6Dh ; 'm'
.text:00409052                 jmp     loc_408F91
.text:00409057 ; ---------------------------------------------------------------------------
.text:00409057
.text:00409057 loc_409057:                             ; CODE XREF: ___get_errno+168↑j
.text:00409057                 cmp     eax, 72h ; 'r'
.text:0040905A
.text:0040905A loc_40905A:                             ; CODE XREF: ___get_errno+19C↓j
.text:0040905A                 jnz     loc_408F23
.text:00409060                 jmp     loc_408F3B
.text:00409065 ; ---------------------------------------------------------------------------
.text:00409065
.text:00409065 loc_409065:                             ; CODE XREF: ___get_errno+11B↑j
.text:00409065                 cmp     eax, 84h ; '„'
.text:0040906A                 jz      loc_408F42
.text:00409070                 cmp     eax, 84h ; '„'
.text:00409075                 jg      short loc_40907E
.text:00409077                 cmp     eax, 82h ; '‚'
.text:0040907C                 jmp     short loc_40905A
.text:0040907E ; ---------------------------------------------------------------------------
.text:0040907E
.text:0040907E loc_40907E:                             ; CODE XREF: ___get_errno+195↑j
.text:0040907E                 cmp     eax, 91h ; '‘'
.text:00409083                 mov     edx, 29h ; ')'
.text:00409088                 jz      loc_408F20
.text:0040908E                 cmp     eax, 9Eh ; 'ž'
.text:00409093
.text:00409093 loc_409093:                             ; CODE XREF: ___get_errno+1F4↓j
.text:00409093                 jnz     loc_408F23
.text:00409099                 jmp     loc_408F42
.text:00409099 ; ---------------------------------------------------------------------------
.text:0040909E                 align 10h
.text:004090A0
.text:004090A0 loc_4090A0:                             ; CODE XREF: ___get_errno+110↑j
.text:004090A0                 cmp     eax, 0CEh ; 'Î'
.text:004090A5                 jz      loc_408F10
.text:004090AB                 cmp     eax, 0CEh ; 'Î'
.text:004090B0                 jg      short loc_409100
.text:004090B2                 cmp     eax, 0AAh ; 'ª'
.text:004090B7                 jz      loc_408F9A
.text:004090BD                 cmp     eax, 0AAh ; 'ª'
.text:004090C2                 jg      short loc_4090D6
.text:004090C4                 cmp     eax, 0A4h ; '¤'
.text:004090C9                 jz      loc_40902D
.text:004090CF                 cmp     eax, 0A7h ; '§'
.text:004090D4                 jmp     short loc_409093
.text:004090D6 ; ---------------------------------------------------------------------------
.text:004090D6
.text:004090D6 loc_4090D6:                             ; CODE XREF: ___get_errno+1E2↑j
.text:004090D6                 cmp     eax, 0B7h ; '·'
.text:004090DB                 jz      loc_408FD3
.text:004090E1                 cmp     eax, 0B7h ; '·'
.text:004090E6                 jl      loc_408F23
.text:004090EC                 sub     eax, 0BCh ; '¼'
.text:004090F1                 cmp     eax, 0Eh
.text:004090F4                 ja      loc_408F23
.text:004090FA                 jmp     loc_408F69
.text:004090FA ; ---------------------------------------------------------------------------
.text:004090FF                 align 10h
.text:00409100
.text:00409100 loc_409100:                             ; CODE XREF: ___get_errno+1D0↑j
.text:00409100                 cmp     eax, 46Bh
.text:00409105                 mov     edx, 24h ; '$'
.text:0040910A                 jz      loc_408F20
.text:00409110                 cmp     eax, 46Bh
.text:00409115                 jg      short loc_409131
.text:00409117                 cmp     eax, 0D7h ; '×'
.text:0040911C                 jz      loc_40902D
.text:00409122                 mov     edx, 5
.text:00409127                 cmp     eax, 45Dh
.text:0040912C                 jmp     loc_408F91
.text:00409131 ; ---------------------------------------------------------------------------
.text:00409131
.text:00409131 loc_409131:                             ; CODE XREF: ___get_errno+235↑j
.text:00409131                 cmp     eax, 4D5h
.text:00409136                 mov     edx, 4
.text:0040913B                 jz      loc_408F20
.text:00409141                 cmp     eax, 4D5h
.text:00409146                 jg      short loc_409157
.text:00409148                 mov     edx, 13h
.text:0040914D                 cmp     eax, 4B0h
.text:00409152                 jmp     loc_408F91
.text:00409157 ; ---------------------------------------------------------------------------
.text:00409157
.text:00409157 loc_409157:                             ; CODE XREF: ___get_errno+266↑j
.text:00409157                 cmp     eax, 718h
.text:0040915C                 jnz     loc_408F23
.text:00409162                 jmp     loc_408F49
.text:00409162 ___get_errno    endp
.text:00409162
.text:00409162 ; ---------------------------------------------------------------------------
.text:00409167                 align 10h
.text:00409170
.text:00409170 ; =============== S U B R O U T I N E =======================================
.text:00409170
.text:00409170
.text:00409170 sub_409170      proc near               ; CODE XREF: sub_40B6A0:loc_4078ED↑p
.text:00409170                                         ; sub_407E90:loc_407EF8↑p ...
.text:00409170
.text:00409170 var_C           = dword ptr -0Ch
.text:00409170
.text:00409170                 sub     esp, 0Ch
.text:00409173                 call    GetLastError
.text:00409178                 mov     [esp+0Ch+var_C], eax
.text:0040917B                 call    ___get_errno
.text:00409180                 add     esp, 0Ch
.text:00409183                 retn
.text:00409183 sub_409170      endp
.text:00409183
.text:00409183 ; ---------------------------------------------------------------------------
.text:00409184                 align 10h
.text:00409190
.text:00409190 ; =============== S U B R O U T I N E =======================================
.text:00409190
.text:00409190
.text:00409190 sub_409190      proc near               ; CODE XREF: .text:00407E03↑p
.text:00409190                                         ; .text:00407E53↑p
.text:00409190
.text:00409190 arg_4           = dword ptr  8
.text:00409190
.text:00409190                 sub     esp, 0Ch
.text:00409193                 mov     edx, [esp+0Ch+arg_4]
.text:00409197                 test    edx, edx
.text:00409199                 jz      short loc_4091A0
.text:0040919B                 add     esp, 0Ch
.text:0040919E                 jmp     short sub_4091E0
.text:004091A0 ; ---------------------------------------------------------------------------
.text:004091A0
.text:004091A0 loc_4091A0:                             ; CODE XREF: sub_409190+9↑j
.text:004091A0                 call    _errno
.text:004091A5                 mov     dword ptr [eax], 16h
.text:004091AB                 xor     eax, eax
.text:004091AD                 add     esp, 0Ch
.text:004091B0                 retn
.text:004091B0 sub_409190      endp
.text:004091B0
.text:004091B1 ; ---------------------------------------------------------------------------
.text:004091B1                 jmp     short sub_4091C0
.text:004091B1 ; ---------------------------------------------------------------------------
.text:004091B3                 align 10h
.text:004091C0
.text:004091C0 ; =============== S U B R O U T I N E =======================================
.text:004091C0
.text:004091C0
.text:004091C0 ; int __cdecl sub_4091C0(LPCSTR)
.text:004091C0 sub_4091C0      proc near               ; CODE XREF: sub_40B6A0-3E5C↑p
.text:004091C0                                         ; .text:00407FF8↑p ...
.text:004091C0
.text:004091C0 lpFileName      = dword ptr -0Ch
.text:004091C0 Destination     = dword ptr -8
.text:004091C0 arg_0           = dword ptr  4
.text:004091C0
.text:004091C0                 sub     esp, 0Ch
.text:004091C3                 mov     edx, [esp+0Ch+arg_0]
.text:004091C7                 mov     [esp+0Ch+Destination], 0 ; Destination
.text:004091CF                 mov     [esp+0Ch+lpFileName], edx ; lpFileName
.text:004091D2                 call    sub_4091E0
.text:004091D7                 add     esp, 0Ch
.text:004091DA                 retn
.text:004091DA sub_4091C0      endp
.text:004091DA
.text:004091DA ; ---------------------------------------------------------------------------
.text:004091DB                 align 10h
.text:004091E0
.text:004091E0 ; =============== S U B R O U T I N E =======================================
.text:004091E0
.text:004091E0
.text:004091E0 ; int __cdecl sub_4091E0(LPCSTR lpFileName, char *Destination)
.text:004091E0 sub_4091E0      proc near               ; CODE XREF: sub_409190+E↑j
.text:004091E0                                         ; sub_4091C0+12↑p
.text:004091E0
.text:004091E0 Size            = dword ptr -2Ch
.text:004091E0 nBufferLength   = dword ptr -28h
.text:004091E0 lpBuffer        = dword ptr -24h
.text:004091E0 lpFilePart      = dword ptr -20h
.text:004091E0 FilePart        = dword ptr -14h
.text:004091E0 lpFileName      = dword ptr  4
.text:004091E0 Destination     = dword ptr  8
.text:004091E0
.text:004091E0                 push    ebp
.text:004091E1                 push    edi
.text:004091E2                 push    esi
.text:004091E3                 push    ebx
.text:004091E4                 sub     esp, 1Ch
.text:004091E7                 mov     edi, [esp+2Ch+lpFileName]
.text:004091EB                 mov     ebp, [esp+2Ch+Destination]
.text:004091EF                 test    edi, edi
.text:004091F1                 jz      loc_4092F9
.text:004091F7                 cmp     byte ptr [edi], 0
.text:004091FA                 jz      loc_4092EC
.text:00409200                 mov     [esp+2Ch+Size], 104h ; Size
.text:00409207                 call    malloc
.text:0040920C                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:00409210                 lea     edx, [esp+2Ch+FilePart]
.text:00409214                 mov     ebx, eax
.text:00409216                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:0040921A                 mov     [esp+2Ch+nBufferLength], 104h ; nBufferLength
.text:00409222                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:00409225                 call    GetFullPathNameA
.text:0040922A                 sub     esp, 10h
.text:0040922D                 mov     esi, eax
.text:0040922F                 test    eax, eax
.text:00409231                 jz      loc_4092DA
.text:00409237                 cmp     eax, 104h
.text:0040923C                 jle     short loc_40924D
.text:0040923E                 test    ebp, ebp
.text:00409240                 jz      short loc_4092A9
.text:00409242                 call    _errno
.text:00409247                 mov     dword ptr [eax], 26h ; '&'
.text:0040924D
.text:0040924D loc_40924D:                             ; CODE XREF: sub_4091E0+5C↑j
.text:0040924D                                         ; sub_4091E0+F5↓j
.text:0040924D                 call    _errno
.text:00409252                 mov     edi, [eax]
.text:00409254                 mov     [esp+2Ch+nBufferLength], 10h ; int
.text:0040925C                 mov     [esp+2Ch+Size], ebx ; lpFileName
.text:0040925F                 call    sub_409310
.text:00409264                 test    eax, eax
.text:00409266                 jnz     short loc_409280
.text:00409268                 movzx   eax, byte ptr [esi+ebx-1]
.text:0040926D                 cmp     al, 2Fh ; '/'
.text:0040926F                 jz      short loc_409280
.text:00409271                 cmp     al, 5Ch ; '\'
.text:00409273                 jz      short loc_409280
.text:00409275                 mov     byte ptr [esi+ebx], 5Ch ; '\'
.text:00409279                 mov     byte ptr [esi+ebx+1], 0
.text:0040927E                 mov     esi, esi
.text:00409280
.text:00409280 loc_409280:                             ; CODE XREF: sub_4091E0+86↑j
.text:00409280                                         ; sub_4091E0+8F↑j ...
.text:00409280                 call    _errno
.text:00409285                 mov     [eax], edi
.text:00409287                 mov     [esp+2Ch+Size], ebx
.text:0040928A                 call    sub_407CF0
.text:0040928F                 test    ebp, ebp
.text:00409291                 mov     eax, ebx
.text:00409293                 jz      short loc_4092A1
.text:00409295                 mov     [esp+2Ch+nBufferLength], ebx ; Source
.text:00409299                 mov     [esp+2Ch+Size], ebp ; Destination
.text:0040929C                 call    strcpy
.text:004092A1
.text:004092A1 loc_4092A1:                             ; CODE XREF: sub_4091E0+B3↑j
.text:004092A1                                         ; sub_4091E0+10A↓j
.text:004092A1                 add     esp, 1Ch
.text:004092A4                 pop     ebx
.text:004092A5                 pop     esi
.text:004092A6                 pop     edi
.text:004092A7                 pop     ebp
.text:004092A8                 retn
.text:004092A9 ; ---------------------------------------------------------------------------
.text:004092A9
.text:004092A9 loc_4092A9:                             ; CODE XREF: sub_4091E0+60↑j
.text:004092A9                 mov     [esp+2Ch+Size], ebx ; Block
.text:004092AC                 lea     ecx, [eax+2]
.text:004092AF                 mov     [esp+2Ch+nBufferLength], ecx ; Size
.text:004092B3                 call    realloc
.text:004092B8                 mov     [esp+2Ch+lpBuffer], eax ; lpBuffer
.text:004092BC                 lea     edx, [esp+2Ch+FilePart]
.text:004092C0                 mov     ebx, eax
.text:004092C2                 mov     [esp+2Ch+lpFilePart], edx ; lpFilePart
.text:004092C6                 mov     [esp+2Ch+nBufferLength], esi ; nBufferLength
.text:004092CA                 mov     [esp+2Ch+Size], edi ; lpFileName
.text:004092CD                 call    GetFullPathNameA
.text:004092D2                 sub     esp, 10h
.text:004092D5                 jmp     loc_40924D
.text:004092DA ; ---------------------------------------------------------------------------
.text:004092DA
.text:004092DA loc_4092DA:                             ; CODE XREF: sub_4091E0+51↑j
.text:004092DA                 call    sub_409170
.text:004092DF                 mov     esi, eax
.text:004092E1                 call    _errno
.text:004092E6                 mov     [eax], esi
.text:004092E8
.text:004092E8 loc_4092E8:                             ; CODE XREF: sub_4091E0+117↓j
.text:004092E8                                         ; sub_4091E0+124↓j
.text:004092E8                 xor     eax, eax
.text:004092EA                 jmp     short loc_4092A1
.text:004092EC ; ---------------------------------------------------------------------------
.text:004092EC
.text:004092EC loc_4092EC:                             ; CODE XREF: sub_4091E0+1A↑j
.text:004092EC                 call    _errno
.text:004092F1                 mov     dword ptr [eax], 2
.text:004092F7                 jmp     short loc_4092E8
.text:004092F9 ; ---------------------------------------------------------------------------
.text:004092F9
.text:004092F9 loc_4092F9:                             ; CODE XREF: sub_4091E0+11↑j
.text:004092F9                 call    _errno
.text:004092FE                 mov     dword ptr [eax], 16h
.text:00409304                 jmp     short loc_4092E8
.text:00409304 sub_4091E0      endp
.text:00409304
.text:00409304 ; ---------------------------------------------------------------------------
.text:00409306                 align 10h
.text:00409310
.text:00409310 ; =============== S U B R O U T I N E =======================================
.text:00409310
.text:00409310
.text:00409310 ; int __cdecl sub_409310(LPCSTR lpFileName, int)
.text:00409310 sub_409310      proc near               ; CODE XREF: sub_40B6A0-3E6D↑p
.text:00409310                                         ; .text:00407CD2↑p ...
.text:00409310
.text:00409310 uMode           = dword ptr -1Ch
.text:00409310 var_10          = dword ptr -10h
.text:00409310 var_C           = dword ptr -0Ch
.text:00409310 var_8           = dword ptr -8
.text:00409310 var_4           = dword ptr -4
.text:00409310 lpFileName      = dword ptr  4
.text:00409310 arg_4           = dword ptr  8
.text:00409310
.text:00409310                 sub     esp, 1Ch
.text:00409313                 mov     [esp+1Ch+var_10], ebx
.text:00409317                 mov     ebx, [esp+1Ch+lpFileName]
.text:0040931B                 mov     [esp+1Ch+var_4], ebp
.text:0040931F                 xor     ebp, ebp
.text:00409321                 test    ebx, ebx
.text:00409323                 mov     [esp+1Ch+var_C], esi
.text:00409327                 mov     esi, [esp+1Ch+arg_4]
.text:0040932B                 mov     [esp+1Ch+var_8], edi
.text:0040932F                 jz      short loc_409339
.text:00409331                 test    esi, 0FFFFFFE8h
.text:00409337                 jz      short loc_409360
.text:00409339
.text:00409339 loc_409339:                             ; CODE XREF: sub_409310+1F↑j
.text:00409339                 call    _errno
.text:0040933E                 mov     dword ptr [eax], 16h
.text:00409344
.text:00409344 loc_409344:                             ; CODE XREF: sub_409310+B1↓j
.text:00409344                 mov     eax, 0FFFFFFFFh
.text:00409349
.text:00409349 loc_409349:                             ; CODE XREF: sub_409310+86↓j
.text:00409349                                         ; sub_409310+A4↓j
.text:00409349                 mov     ebx, [esp+1Ch+var_10]
.text:0040934D                 mov     esi, [esp+1Ch+var_C]
.text:00409351                 mov     edi, [esp+1Ch+var_8]
.text:00409355                 mov     ebp, [esp+1Ch+var_4]
.text:00409359                 add     esp, 1Ch
.text:0040935C                 retn
.text:0040935C ; ---------------------------------------------------------------------------
.text:0040935D                 align 10h
.text:00409360
.text:00409360 loc_409360:                             ; CODE XREF: sub_409310+27↑j
.text:00409360                 mov     [esp+1Ch+uMode], 8001h ; uMode
.text:00409367                 call    SetErrorMode
.text:0040936C                 sub     esp, 4
.text:0040936F                 mov     [esp+1Ch+uMode], ebx ; lpFileName
.text:00409372                 call    GetFileAttributesA
.text:00409377                 sub     esp, 4
.text:0040937A                 mov     edi, eax
.text:0040937C                 cmp     eax, 0FFFFFFFFh
.text:0040937F                 jz      short loc_4093C3
.text:00409381
.text:00409381 loc_409381:                             ; CODE XREF: sub_409310+C6↓j
.text:00409381                 mov     [esp+1Ch+uMode], 0 ; uMode
.text:00409388                 call    SetErrorMode
.text:0040938D                 sub     esp, 4
.text:00409390                 mov     eax, 0FFFFFFFFh
.text:00409395                 inc     ebp
.text:00409396                 jz      short loc_409349
.text:00409398                 test    esi, 10h
.text:0040939E                 jz      short loc_4093A8
.text:004093A0                 test    edi, 10h
.text:004093A6                 jz      short loc_4093B6
.text:004093A8
.text:004093A8 loc_4093A8:                             ; CODE XREF: sub_409310+8E↑j
.text:004093A8                 and     esi, 2
.text:004093AB                 jz      short loc_4093B2
.text:004093AD                 and     edi, 1
.text:004093B0                 jnz     short loc_4093B6
.text:004093B2
.text:004093B2 loc_4093B2:                             ; CODE XREF: sub_409310+9B↑j
.text:004093B2                 xor     eax, eax
.text:004093B4                 jmp     short loc_409349
.text:004093B6 ; ---------------------------------------------------------------------------
.text:004093B6
.text:004093B6 loc_4093B6:                             ; CODE XREF: sub_409310+96↑j
.text:004093B6                                         ; sub_409310+A0↑j
.text:004093B6                 call    _errno
.text:004093BB                 mov     dword ptr [eax], 0Dh
.text:004093C1                 jmp     short loc_409344
.text:004093C3 ; ---------------------------------------------------------------------------
.text:004093C3
.text:004093C3 loc_4093C3:                             ; CODE XREF: sub_409310+6F↑j
.text:004093C3                 call    sub_409170
.text:004093C8                 mov     ebp, eax
.text:004093CA                 call    _errno
.text:004093CF                 mov     [eax], ebp
.text:004093D1                 mov     ebp, 0FFFFFFFFh
.text:004093D6                 jmp     short loc_409381
.text:004093D6 sub_409310      endp
.text:004093D6
.text:004093D6 ; ---------------------------------------------------------------------------
.text:004093D8                 align 10h
.text:004093E0 aLuLuLu         db '%lu.%lu.%lu',0      ; DATA XREF: .text:004095FF↓o
.text:004093EC aLu             db '%lu',0              ; DATA XREF: .text:0040960F↓o
.text:004093F0 asc_4093F0      db ' ',0                ; DATA XREF: .text:loc_4096F8↓o
.text:004093F2                 align 10h
.text:00409400 aServer40Enterp db 'Server 4.0, Enterprise Edition ',0
.text:00409400                                         ; DATA XREF: .text:0040972F↓o
.text:00409420 aServer40       db 'Server 4.0 ',0      ; DATA XREF: .text:loc_40973D↓o
.text:0040942C aServer         db ' Server',0          ; DATA XREF: .text:00409766↓o
.text:0040942C                                         ; .text:loc_4098DE↓o
.text:00409434 aAdvancedServer db ' Advanced Server',0 ; DATA XREF: .text:loc_409778↓o
.text:00409445 aDatacenterServ db ' Datacenter Server',0
.text:00409445                                         ; DATA XREF: .text:loc_409782↓o
.text:00409458 aStandardEditio db ' Standard Edition',0
.text:00409458                                         ; DATA XREF: .text:004097AA↓o
.text:0040946A aWebEdition     db ' Web Edition',0     ; DATA XREF: .text:loc_4097B4↓o
.text:00409477 aEnterpriseEdit db ' Enterprise Edition',0
.text:00409477                                         ; DATA XREF: .text:loc_4097BE↓o
.text:0040948B aDatacenterEdit db ' Datacenter Edition',0
.text:0040948B                                         ; DATA XREF: .text:loc_4097C8↓o
.text:0040949F aHomeEdition    db ' Home Edition',0    ; DATA XREF: .text:004097DB↓o
.text:004094AD aProfessional   db ' Professional',0    ; DATA XREF: .text:loc_4097E5↓o
.text:004094AD                                         ; .text:loc_4098F0↓o
.text:004094BB                 align 10h
.text:004094C0 aSystemCurrentc db 'SYSTEM\CurrentControlSet\Control\ProductOptions',0
.text:004094C0                                         ; DATA XREF: .text:00409812↓o
.text:004094F0 aProducttype    db 'ProductType',0      ; DATA XREF: .text:00409859↓o
.text:004094FC aWinnt          db 'WINNT',0            ; DATA XREF: .text:00409894↓o
.text:00409502 aLanmannt       db 'LANMANNT',0         ; DATA XREF: .text:004098AB↓o
.text:0040950B aServernt       db 'SERVERNT',0         ; DATA XREF: .text:004098C2↓o
.text:00409514                 align 10h
.text:00409520 aMicrosoftWindo db 'Microsoft Windows 3.1 with Win32s ',0
.text:00409520                                         ; DATA XREF: .text:00409A37↓o
.text:00409543                 align 20h
.text:00409560 aMicrosoftWindo_0 db 'Microsoft Windows Millennium Edition ',0
.text:00409560                                         ; DATA XREF: .text:00409A96↓o
.text:00409586 ; ---------------------------------------------------------------------------
.text:00409586
.text:00409586 loc_409586:                             ; DATA XREF: .text:loc_409B01↓o
.text:00409586                 and     [ebx+45h], dl
.text:00409589                 add     [eax], ah
.text:0040958B                 push    ebx
.text:0040958C                 push    eax
.text:0040958D                 xor     [eax], eax
.text:0040958F
.text:0040958F loc_40958F:                             ; DATA XREF: .text:loc_409B7B↓o
.text:0040958F                 and     [edi+53h], cl
.text:00409592                 push    edx
.text:00409593                 xor     al, [eax]
.text:00409595                 lea     esi, [esi+0]
.text:00409599                 lea     edi, [edi+0]
.text:004095A0                 push    edi
.text:004095A1                 push    esi
.text:004095A2                 push    ebx
.text:004095A3                 sub     esp, 130h
.text:004095A9                 mov     ebx, [esp+140h]
.text:004095B0                 call    sub_409CB0
.text:004095B5                 mov     eax, ds:VersionInformation.dwPlatformId
.text:004095BA                 cmp     eax, 1
.text:004095BD                 jz      loc_409A60
.text:004095C3                 cmp     eax, 1
.text:004095C6                 jb      loc_409A36
.text:004095CC                 cmp     eax, 2
.text:004095CF                 jz      loc_409680
.text:004095D5                 cmp     eax, 3
.text:004095D8                 jz      short loc_40963F
.text:004095DA                 lea     esi, [esi+0]
.text:004095E0
.text:004095E0 loc_4095E0:                             ; CODE XREF: .text:00409675↓j
.text:004095E0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:004095E6                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004095EC
.text:004095EC loc_4095EC:                             ; CODE XREF: .text:00409A7F↓j
.text:004095EC                 mov     [esp+10h], edx
.text:004095F0                 mov     ebx, [esp+144h]
.text:004095F7                 mov     [esp+0Ch], ecx
.text:004095FB                 mov     [esp+8], eax
.text:004095FF                 mov     dword ptr [esp+4], offset aLuLuLu ; "%lu.%lu.%lu"
.text:00409607                 mov     [esp], ebx
.text:0040960A                 call    sprintf
.text:0040960F                 mov     dword ptr [esp+4], offset aLu ; "%lu"
.text:00409617                 mov     edi, ds:VersionInformation.dwBuildNumber
.text:0040961D                 mov     ecx, [esp+148h]
.text:00409624                 mov     [esp+8], edi
.text:00409628                 mov     [esp], ecx
.text:0040962B                 call    sprintf
.text:00409630                 mov     eax, 1
.text:00409635
.text:00409635 loc_409635:                             ; CODE XREF: .text:0040982F↓j
.text:00409635                                         ; .text:0040987C↓j
.text:00409635                 add     esp, 130h
.text:0040963B                 pop     ebx
.text:0040963C                 pop     esi
.text:0040963D                 pop     edi
.text:0040963E                 retn
.text:0040963F ; ---------------------------------------------------------------------------
.text:0040963F
.text:0040963F loc_40963F:                             ; CODE XREF: .text:004095D8↑j
.text:0040963F                 mov     dword ptr [ebx], 7263694Dh
.text:00409645                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040964C                 mov     dword ptr [ebx+8], 69572074h
.text:00409653                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040965A                 mov     dword ptr [ebx+10h], 45432073h
.text:00409661                 mov     word ptr [ebx+14h], 20h ; ' '
.text:00409667                 mov     esi, esi
.text:00409669                 lea     edi, [edi+0]
.text:00409670
.text:00409670 loc_409670:                             ; CODE XREF: .text:00409718↓j
.text:00409670                                         ; .text:00409A59↓j ...
.text:00409670                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409675                 jmp     loc_4095E0
.text:00409675 ; ---------------------------------------------------------------------------
.text:0040967A                 align 10h
.text:00409680
.text:00409680 loc_409680:                             ; CODE XREF: .text:004095CF↑j
.text:00409680                 mov     edx, ds:VersionInformation.dwMajorVersion
.text:00409686                 cmp     edx, 3
.text:00409689                 mov     eax, edx
.text:0040968B                 jz      loc_4099F5
.text:00409691
.text:00409691 loc_409691:                             ; CODE XREF: .text:004099FC↓j
.text:00409691                 cmp     eax, 4
.text:00409694                 jz      loc_4099B5
.text:0040969A
.text:0040969A loc_40969A:                             ; CODE XREF: .text:004099BD↓j
.text:0040969A                 cmp     eax, 4
.text:0040969D                 ja      loc_409902
.text:004096A3                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:004096A9                 test    ecx, ecx
.text:004096AB                 jnz     loc_409902
.text:004096B1                 mov     dword ptr [ebx], 7263694Dh
.text:004096B7                 mov     dword ptr [ebx+4], 666F736Fh
.text:004096BE                 mov     dword ptr [ebx+8], 69572074h
.text:004096C5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004096CC                 mov     dword ptr [ebx+10h], 544E2073h
.text:004096D3
.text:004096D3 loc_4096D3:                             ; CODE XREF: .text:00409975↓j
.text:004096D3                 mov     byte ptr [ebx+14h], 0
.text:004096D7
.text:004096D7 loc_4096D7:                             ; CODE XREF: .text:00409905↓j
.text:004096D7                                         ; .text:0040991C↓j ...
.text:004096D7                 mov     esi, dword_40E0A0
.text:004096DD                 test    esi, esi
.text:004096DF                 jz      loc_4097F2
.text:004096E5                 movzx   eax, ds:byte_40F4EA
.text:004096EC                 cmp     al, 1
.text:004096EE                 jz      loc_4097D2
.text:004096F4                 cmp     al, 3
.text:004096F6                 jz      short loc_40971D
.text:004096F8
.text:004096F8 loc_4096F8:                             ; CODE XREF: .text:0040973B↓j
.text:004096F8                                         ; .text:00409776↓j ...
.text:004096F8                 mov     dword ptr [esp+4], offset asc_4093F0 ; " "
.text:00409700                 mov     [esp], ebx
.text:00409703                 call    strcat
.text:00409708                 mov     dword ptr [esp+4], offset VersionInformation.szCSDVersion
.text:00409710                 mov     [esp], ebx
.text:00409713                 call    strcat
.text:00409718                 jmp     loc_409670
.text:0040971D ; ---------------------------------------------------------------------------
.text:0040971D
.text:0040971D loc_40971D:                             ; CODE XREF: .text:004096F6↑j
.text:0040971D                 cmp     ds:VersionInformation.dwMajorVersion, 5
.text:00409724                 jz      short loc_409746
.text:00409726
.text:00409726 loc_409726:                             ; CODE XREF: .text:00409752↓j
.text:00409726                 test    byte ptr ds:word_40F4E8, 2
.text:0040972D                 jz      short loc_40973D
.text:0040972F                 mov     dword ptr [esp], offset aServer40Enterp ; "Server 4.0, Enterprise Edition "
.text:00409736
.text:00409736 loc_409736:                             ; CODE XREF: .text:00409744↓j
.text:00409736                 call    printf
.text:0040973B                 jmp     short loc_4096F8
.text:0040973D ; ---------------------------------------------------------------------------
.text:0040973D
.text:0040973D loc_40973D:                             ; CODE XREF: .text:0040972D↑j
.text:0040973D                 mov     dword ptr [esp], offset aServer40 ; "Server 4.0 "
.text:00409744                 jmp     short loc_409736
.text:00409746 ; ---------------------------------------------------------------------------
.text:00409746
.text:00409746 loc_409746:                             ; CODE XREF: .text:00409724↑j
.text:00409746                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:0040974B                 cmp     eax, 2
.text:0040974E                 jz      short loc_409790
.text:00409750                 test    eax, eax
.text:00409752                 jnz     short loc_409726
.text:00409754                 cmp     byte ptr ds:word_40F4E8, 0
.text:0040975B                 js      short loc_409782
.text:0040975D                 test    byte ptr ds:word_40F4E8, 2
.text:00409764                 jnz     short loc_409778
.text:00409766                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:0040976E
.text:0040976E loc_40976E:                             ; CODE XREF: .text:00409780↓j
.text:0040976E                                         ; .text:0040978A↓j ...
.text:0040976E                 mov     [esp], ebx
.text:00409771                 call    strcat
.text:00409776                 jmp     short loc_4096F8
.text:00409778 ; ---------------------------------------------------------------------------
.text:00409778
.text:00409778 loc_409778:                             ; CODE XREF: .text:00409764↑j
.text:00409778                                         ; .text:004098D9↓j
.text:00409778                 mov     dword ptr [esp+4], offset aAdvancedServer ; " Advanced Server"
.text:00409780                 jmp     short loc_40976E
.text:00409782 ; ---------------------------------------------------------------------------
.text:00409782
.text:00409782 loc_409782:                             ; CODE XREF: .text:0040975B↑j
.text:00409782                 mov     dword ptr [esp+4], offset aDatacenterServ ; " Datacenter Server"
.text:0040978A                 jmp     short loc_40976E
.text:0040978A ; ---------------------------------------------------------------------------
.text:0040978C                 align 10h
.text:00409790
.text:00409790 loc_409790:                             ; CODE XREF: .text:0040974E↑j
.text:00409790                 cmp     byte ptr ds:word_40F4E8, 0
.text:00409797                 js      short loc_4097C8
.text:00409799                 movzx   eax, ds:word_40F4E8
.text:004097A0                 test    al, 2
.text:004097A2                 jnz     short loc_4097BE
.text:004097A4                 cmp     ax, 400h
.text:004097A8                 jz      short loc_4097B4
.text:004097AA                 mov     dword ptr [esp+4], offset aStandardEditio ; " Standard Edition"
.text:004097B2                 jmp     short loc_40976E
.text:004097B4 ; ---------------------------------------------------------------------------
.text:004097B4
.text:004097B4 loc_4097B4:                             ; CODE XREF: .text:004097A8↑j
.text:004097B4                 mov     dword ptr [esp+4], offset aWebEdition ; " Web Edition"
.text:004097BC                 jmp     short loc_40976E
.text:004097BE ; ---------------------------------------------------------------------------
.text:004097BE
.text:004097BE loc_4097BE:                             ; CODE XREF: .text:004097A2↑j
.text:004097BE                 mov     dword ptr [esp+4], offset aEnterpriseEdit ; " Enterprise Edition"
.text:004097C6                 jmp     short loc_40976E
.text:004097C8 ; ---------------------------------------------------------------------------
.text:004097C8
.text:004097C8 loc_4097C8:                             ; CODE XREF: .text:00409797↑j
.text:004097C8                 mov     dword ptr [esp+4], offset aDatacenterEdit ; " Datacenter Edition"
.text:004097D0                 jmp     short loc_40976E
.text:004097D2 ; ---------------------------------------------------------------------------
.text:004097D2
.text:004097D2 loc_4097D2:                             ; CODE XREF: .text:004096EE↑j
.text:004097D2                 test    byte ptr ds:word_40F4E8+1, 2
.text:004097D9                 jz      short loc_4097E5
.text:004097DB                 mov     dword ptr [esp+4], offset aHomeEdition ; " Home Edition"
.text:004097E3                 jmp     short loc_40976E
.text:004097E5 ; ---------------------------------------------------------------------------
.text:004097E5
.text:004097E5 loc_4097E5:                             ; CODE XREF: .text:004097D9↑j
.text:004097E5                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:004097ED                 jmp     loc_40976E
.text:004097F2 ; ---------------------------------------------------------------------------
.text:004097F2
.text:004097F2 loc_4097F2:                             ; CODE XREF: .text:004096DF↑j
.text:004097F2                 mov     dword ptr [esp+28h], 0FFh
.text:004097FA                 lea     edx, [esp+2Ch]
.text:004097FE                 mov     [esp+10h], edx
.text:00409802                 mov     dword ptr [esp+0Ch], 1
.text:0040980A                 mov     dword ptr [esp+8], 0
.text:00409812                 mov     dword ptr [esp+4], offset aSystemCurrentc ; "SYSTEM\\CurrentControlSet\\Control\\Pro"...
.text:0040981A                 mov     dword ptr [esp], 80000002h
.text:00409821                 call    RegOpenKeyExA
.text:00409826                 mov     edi, eax
.text:00409828                 sub     esp, 14h
.text:0040982B                 xor     eax, eax
.text:0040982D                 test    edi, edi
.text:0040982F                 jnz     loc_409635
.text:00409835                 mov     dword ptr [esp+0Ch], 0
.text:0040983D                 mov     edi, [esp+2Ch]
.text:00409841                 lea     esi, [esp+28h]
.text:00409845                 mov     [esp+14h], esi
.text:00409849                 lea     esi, [esp+30h]
.text:0040984D                 mov     [esp+10h], esi
.text:00409851                 mov     dword ptr [esp+8], 0
.text:00409859                 mov     dword ptr [esp+4], offset aProducttype ; "ProductType"
.text:00409861                 mov     [esp], edi
.text:00409864                 call    RegQueryValueExA
.text:00409869                 sub     esp, 18h
.text:0040986C                 test    eax, eax
.text:0040986E                 jnz     short loc_40987A
.text:00409870                 cmp     dword ptr [esp+28h], 0FFh
.text:00409878                 jbe     short loc_409881
.text:0040987A
.text:0040987A loc_40987A:                             ; CODE XREF: .text:0040986E↑j
.text:0040987A                 xor     eax, eax
.text:0040987C                 jmp     loc_409635
.text:00409881 ; ---------------------------------------------------------------------------
.text:00409881
.text:00409881 loc_409881:                             ; CODE XREF: .text:00409878↑j
.text:00409881                 mov     edx, [esp+2Ch]
.text:00409885                 mov     [esp], edx
.text:00409888                 call    RegCloseKey
.text:0040988D                 sub     esp, 4
.text:00409890                 mov     [esp+4], esi
.text:00409894                 mov     dword ptr [esp], offset aWinnt ; "WINNT"
.text:0040989B                 call    lstrcmpiA
.text:004098A0                 sub     esp, 8
.text:004098A3                 test    eax, eax
.text:004098A5                 jz      short loc_4098F0
.text:004098A7
.text:004098A7 loc_4098A7:                             ; CODE XREF: .text:00409900↓j
.text:004098A7                 mov     [esp+4], esi
.text:004098AB                 mov     dword ptr [esp], offset aLanmannt ; "LANMANNT"
.text:004098B2                 call    lstrcmpiA
.text:004098B7                 sub     esp, 8
.text:004098BA                 test    eax, eax
.text:004098BC                 jz      short loc_4098DE
.text:004098BE
.text:004098BE loc_4098BE:                             ; CODE XREF: .text:004098EE↓j
.text:004098BE                 mov     [esp+4], esi
.text:004098C2                 mov     dword ptr [esp], offset aServernt ; "SERVERNT"
.text:004098C9                 call    lstrcmpiA
.text:004098CE                 sub     esp, 8
.text:004098D1                 test    eax, eax
.text:004098D3                 jnz     loc_4096F8
.text:004098D9                 jmp     loc_409778
.text:004098DE ; ---------------------------------------------------------------------------
.text:004098DE
.text:004098DE loc_4098DE:                             ; CODE XREF: .text:004098BC↑j
.text:004098DE                 mov     dword ptr [esp+4], offset aServer ; " Server"
.text:004098E6                 mov     [esp], ebx
.text:004098E9                 call    strcat
.text:004098EE                 jmp     short loc_4098BE
.text:004098F0 ; ---------------------------------------------------------------------------
.text:004098F0
.text:004098F0 loc_4098F0:                             ; CODE XREF: .text:004098A5↑j
.text:004098F0                 mov     dword ptr [esp+4], offset aProfessional ; " Professional"
.text:004098F8                 mov     [esp], ebx
.text:004098FB                 call    strcat
.text:00409900                 jmp     short loc_4098A7
.text:00409902 ; ---------------------------------------------------------------------------
.text:00409902
.text:00409902 loc_409902:                             ; CODE XREF: .text:0040969D↑j
.text:00409902                                         ; .text:004096AB↑j
.text:00409902                 cmp     eax, 5
.text:00409905                 jnz     loc_4096D7
.text:0040990B                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409910                 cmp     eax, 2
.text:00409913                 jz      short loc_40997A
.text:00409915                 cmp     eax, 1
.text:00409918                 jz      short loc_409953
.text:0040991A                 test    eax, eax
.text:0040991C                 jnz     loc_4096D7
.text:00409922                 mov     dword ptr [ebx], 7263694Dh
.text:00409928                 mov     dword ptr [ebx+4], 666F736Fh
.text:0040992F                 mov     dword ptr [ebx+8], 69572074h
.text:00409936                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040993D                 mov     dword ptr [ebx+10h], 30322073h
.text:00409944                 mov     word ptr [ebx+14h], 3030h
.text:0040994A                 mov     byte ptr [ebx+16h], 0
.text:0040994E                 jmp     loc_4096D7
.text:00409953 ; ---------------------------------------------------------------------------
.text:00409953
.text:00409953 loc_409953:                             ; CODE XREF: .text:00409918↑j
.text:00409953                 mov     dword ptr [ebx], 7263694Dh
.text:00409959                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409960                 mov     dword ptr [ebx+8], 69572074h
.text:00409967                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:0040996E                 mov     dword ptr [ebx+10h], 50582073h
.text:00409975                 jmp     loc_4096D3
.text:0040997A ; ---------------------------------------------------------------------------
.text:0040997A
.text:0040997A loc_40997A:                             ; CODE XREF: .text:00409913↑j
.text:0040997A                 mov     dword ptr [ebx], 7263694Dh
.text:00409980                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409987                 mov     dword ptr [ebx+8], 69572074h
.text:0040998E                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409995                 mov     dword ptr [ebx+10h], 65532073h
.text:0040999C                 mov     dword ptr [ebx+14h], 72657672h
.text:004099A3                 mov     dword ptr [ebx+18h], 30303220h
.text:004099AA                 mov     word ptr [ebx+1Ch], 33h ; '3'
.text:004099B0                 jmp     loc_4096D7
.text:004099B5 ; ---------------------------------------------------------------------------
.text:004099B5
.text:004099B5 loc_4099B5:                             ; CODE XREF: .text:00409694↑j
.text:004099B5                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:004099BB                 test    edx, edx
.text:004099BD                 jnz     loc_40969A
.text:004099C3                 mov     dword ptr [ebx], 7263694Dh
.text:004099C9                 mov     dword ptr [ebx+4], 666F736Fh
.text:004099D0                 mov     dword ptr [ebx+8], 69572074h
.text:004099D7                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:004099DE                 mov     dword ptr [ebx+10h], 544E2073h
.text:004099E5                 mov     dword ptr [ebx+14h], 302E3420h
.text:004099EC                 mov     byte ptr [ebx+18h], 0
.text:004099F0                 jmp     loc_4096D7
.text:004099F5 ; ---------------------------------------------------------------------------
.text:004099F5
.text:004099F5 loc_4099F5:                             ; CODE XREF: .text:0040968B↑j
.text:004099F5                 cmp     ds:VersionInformation.dwMinorVersion, 33h ; '3'
.text:004099FC                 jnz     loc_409691
.text:00409A02                 mov     dword ptr [ebx], 7263694Dh
.text:00409A08                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409A0F                 mov     dword ptr [ebx+8], 69572074h
.text:00409A16                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409A1D                 mov     dword ptr [ebx+10h], 544E2073h
.text:00409A24                 mov     dword ptr [ebx+14h], 352E3320h
.text:00409A2B                 mov     word ptr [ebx+18h], 31h ; '1'
.text:00409A31                 jmp     loc_4096D7
.text:00409A36 ; ---------------------------------------------------------------------------
.text:00409A36
.text:00409A36 loc_409A36:                             ; CODE XREF: .text:004095C6↑j
.text:00409A36                 cld
.text:00409A37                 mov     esi, offset aMicrosoftWindo ; "Microsoft Windows 3.1 with Win32s "
.text:00409A3C                 mov     ecx, 8
.text:00409A41                 movzx   edx, byte ptr ds:aMicrosoftWindo+22h ; ""
.text:00409A48                 mov     edi, ebx
.text:00409A4A                 rep movsd
.text:00409A4C                 movzx   esi, word ptr ds:aMicrosoftWindo+20h ; "s "
.text:00409A53                 mov     [edi+2], dl
.text:00409A56                 mov     [edi], si
.text:00409A59                 jmp     loc_409670
.text:00409A59 ; ---------------------------------------------------------------------------
.text:00409A5E                 align 10h
.text:00409A60
.text:00409A60 loc_409A60:                             ; CODE XREF: .text:004095BD↑j
.text:00409A60                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409A66                 cmp     ecx, 4
.text:00409A69                 jz      loc_409B20
.text:00409A6F
.text:00409A6F loc_409A6F:                             ; CODE XREF: .text:00409B76↓j
.text:00409A6F                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409A75
.text:00409A75 loc_409A75:                             ; CODE XREF: .text:00409B28↓j
.text:00409A75                 cmp     ecx, 4
.text:00409A78                 jz      short loc_409A84
.text:00409A7A
.text:00409A7A loc_409A7A:                             ; CODE XREF: .text:00409A8C↓j
.text:00409A7A                                         ; .text:00409A91↓j
.text:00409A7A                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409A7F                 jmp     loc_4095EC
.text:00409A84 ; ---------------------------------------------------------------------------
.text:00409A84
.text:00409A84 loc_409A84:                             ; CODE XREF: .text:00409A78↑j
.text:00409A84                 cmp     edx, 0Ah
.text:00409A87                 jz      short loc_409AB1
.text:00409A89
.text:00409A89 loc_409A89:                             ; CODE XREF: .text:00409AFF↓j
.text:00409A89                 cmp     ecx, 4
.text:00409A8C                 jnz     short loc_409A7A
.text:00409A8E                 cmp     edx, 5Ah ; 'Z'
.text:00409A91                 jnz     short loc_409A7A
.text:00409A93                 cld
.text:00409A94                 mov     edi, ebx
.text:00409A96                 mov     esi, offset aMicrosoftWindo_0 ; "Microsoft Windows Millennium Edition "
.text:00409A9B                 movzx   ebx, word ptr ds:aMicrosoftWindo_0+24h ; " "
.text:00409AA2                 mov     ecx, 9
.text:00409AA7                 rep movsd
.text:00409AA9                 mov     [edi], bx
.text:00409AAC                 jmp     loc_409670
.text:00409AB1 ; ---------------------------------------------------------------------------
.text:00409AB1
.text:00409AB1 loc_409AB1:                             ; CODE XREF: .text:00409A87↑j
.text:00409AB1                 mov     dword ptr [ebx], 7263694Dh
.text:00409AB7                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409ABE                 mov     dword ptr [ebx+8], 69572074h
.text:00409AC5                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409ACC                 mov     dword ptr [ebx+10h], 38392073h
.text:00409AD3                 mov     byte ptr [ebx+14h], 0
.text:00409AD7                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409ADD                 lea     edi, [edx-7CFh]
.text:00409AE3                 cmp     edi, 0B7h ; '·'
.text:00409AE9                 jbe     short loc_409B13
.text:00409AEB                 cmp     edx, 886h
.text:00409AF1                 ja      short loc_409B01
.text:00409AF3
.text:00409AF3 loc_409AF3:                             ; CODE XREF: .text:00409B11↓j
.text:00409AF3                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409AF9                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409AFF                 jmp     short loc_409A89
.text:00409B01 ; ---------------------------------------------------------------------------
.text:00409B01
.text:00409B01 loc_409B01:                             ; CODE XREF: .text:00409AF1↑j
.text:00409B01                 mov     dword ptr [esp+4], offset loc_409586
.text:00409B09
.text:00409B09 loc_409B09:                             ; CODE XREF: .text:00409B1B↓j
.text:00409B09                 mov     [esp], ebx
.text:00409B0C                 call    strcat
.text:00409B11                 jmp     short loc_409AF3
.text:00409B13 ; ---------------------------------------------------------------------------
.text:00409B13
.text:00409B13 loc_409B13:                             ; CODE XREF: .text:00409AE9↑j
.text:00409B13                 mov     dword ptr [esp+4], 40958Ah
.text:00409B1B                 jmp     short loc_409B09
.text:00409B1B ; ---------------------------------------------------------------------------
.text:00409B1D                 align 10h
.text:00409B20
.text:00409B20 loc_409B20:                             ; CODE XREF: .text:00409A69↑j
.text:00409B20                 mov     edx, ds:VersionInformation.dwMinorVersion
.text:00409B26                 test    edx, edx
.text:00409B28                 jnz     loc_409A75
.text:00409B2E                 mov     dword ptr [ebx], 7263694Dh
.text:00409B34                 mov     dword ptr [ebx+4], 666F736Fh
.text:00409B3B                 mov     dword ptr [ebx+8], 69572074h
.text:00409B42                 mov     dword ptr [ebx+0Ch], 776F646Eh
.text:00409B49                 mov     dword ptr [ebx+10h], 35392073h
.text:00409B50                 mov     byte ptr [ebx+14h], 0
.text:00409B54                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409B5A                 lea     ecx, [edx-3B7h]
.text:00409B60                 cmp     ecx, 81h
.text:00409B66                 jbe     short loc_409B8D
.text:00409B68                 cmp     edx, 438h
.text:00409B6E                 ja      short loc_409B7B
.text:00409B70
.text:00409B70 loc_409B70:                             ; CODE XREF: .text:00409B8B↓j
.text:00409B70                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409B76                 jmp     loc_409A6F
.text:00409B7B ; ---------------------------------------------------------------------------
.text:00409B7B
.text:00409B7B loc_409B7B:                             ; CODE XREF: .text:00409B6E↑j
.text:00409B7B                 mov     dword ptr [esp+4], offset loc_40958F
.text:00409B83
.text:00409B83 loc_409B83:                             ; CODE XREF: .text:00409B95↓j
.text:00409B83                 mov     [esp], ebx
.text:00409B86                 call    strcat
.text:00409B8B                 jmp     short loc_409B70
.text:00409B8D ; ---------------------------------------------------------------------------
.text:00409B8D
.text:00409B8D loc_409B8D:                             ; CODE XREF: .text:00409B66↑j
.text:00409B8D                 mov     dword ptr [esp+4], 40958Ah
.text:00409B95                 jmp     short loc_409B83
.text:00409B95 ; ---------------------------------------------------------------------------
.text:00409B97                 align 10h
.text:00409BA0
.text:00409BA0 ; =============== S U B R O U T I N E =======================================
.text:00409BA0
.text:00409BA0
.text:00409BA0 sub_409BA0      proc near               ; CODE XREF: .text:0040873E↑p
.text:00409BA0                                         ; sub_408BC0+12A↑p
.text:00409BA0                 sub     esp, 0Ch
.text:00409BA3                 call    sub_409CB0
.text:00409BA8                 mov     eax, ds:dword_40F440
.text:00409BAD                 add     esp, 0Ch
.text:00409BB0                 retn
.text:00409BB0 sub_409BA0      endp
.text:00409BB0
.text:00409BB1 ; ---------------------------------------------------------------------------
.text:00409BB1                 jmp     short loc_409BC0
.text:00409BB1 ; ---------------------------------------------------------------------------
.text:00409BB3                 align 10h
.text:00409BC0
.text:00409BC0 loc_409BC0:                             ; CODE XREF: .text:00409BB1↑j
.text:00409BC0                 sub     esp, 0Ch
.text:00409BC3                 call    sub_409CB0
.text:00409BC8                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409BCD                 add     esp, 0Ch
.text:00409BD0                 retn
.text:00409BD1 ; ---------------------------------------------------------------------------
.text:00409BD1                 jmp     short loc_409BE0
.text:00409BD1 ; ---------------------------------------------------------------------------
.text:00409BD3                 align 10h
.text:00409BE0
.text:00409BE0 loc_409BE0:                             ; CODE XREF: .text:00409BD1↑j
.text:00409BE0                 sub     esp, 0Ch
.text:00409BE3                 call    sub_409CB0
.text:00409BE8                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409BED                 add     esp, 0Ch
.text:00409BF0                 retn
.text:00409BF1 ; ---------------------------------------------------------------------------
.text:00409BF1                 jmp     short loc_409C00
.text:00409BF1 ; ---------------------------------------------------------------------------
.text:00409BF3                 align 10h
.text:00409C00
.text:00409C00 loc_409C00:                             ; CODE XREF: .text:00409BF1↑j
.text:00409C00                 sub     esp, 0Ch
.text:00409C03                 call    sub_409CB0
.text:00409C08                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409C0D                 add     esp, 0Ch
.text:00409C10                 retn
.text:00409C11 ; ---------------------------------------------------------------------------
.text:00409C11                 jmp     short loc_409C20
.text:00409C11 ; ---------------------------------------------------------------------------
.text:00409C13                 align 10h
.text:00409C20
.text:00409C20 loc_409C20:                             ; CODE XREF: .text:00409C11↑j
.text:00409C20                 sub     esp, 0Ch
.text:00409C23                 call    GetVersion
.text:00409C28                 shr     eax, 10h
.text:00409C2B                 add     esp, 0Ch
.text:00409C2E                 retn
.text:00409C2E ; ---------------------------------------------------------------------------
.text:00409C2F                 align 10h
.text:00409C30                 sub     esp, 0Ch
.text:00409C33                 call    sub_409CB0
.text:00409C38                 xor     eax, eax
.text:00409C3A                 cmp     ds:VersionInformation.dwPlatformId, 2
.text:00409C41                 setz    al
.text:00409C44                 add     esp, 0Ch
.text:00409C47                 retn
.text:00409C47 ; ---------------------------------------------------------------------------
.text:00409C48                 align 10h
.text:00409C50
.text:00409C50 ; =============== S U B R O U T I N E =======================================
.text:00409C50
.text:00409C50
.text:00409C50 sub_409C50      proc near               ; CODE XREF: .text:loc_4080D0↑p
.text:00409C50                                         ; .text:loc_408724↑p ...
.text:00409C50                 sub     esp, 0Ch
.text:00409C53                 call    sub_409CB0
.text:00409C58                 xor     eax, eax
.text:00409C5A                 cmp     ds:VersionInformation.dwPlatformId, 1
.text:00409C61                 setz    al
.text:00409C64                 add     esp, 0Ch
.text:00409C67                 retn
.text:00409C67 sub_409C50      endp
.text:00409C67
.text:00409C67 ; ---------------------------------------------------------------------------
.text:00409C68                 align 10h
.text:00409C70                 sub     esp, 0Ch
.text:00409C73                 call    sub_409CB0
.text:00409C78                 xor     eax, eax
.text:00409C7A                 cmp     ds:VersionInformation.dwPlatformId, 0
.text:00409C81                 setz    al
.text:00409C84                 add     esp, 0Ch
.text:00409C87                 retn
.text:00409C87 ; ---------------------------------------------------------------------------
.text:00409C88                 align 10h
.text:00409C90                 sub     esp, 0Ch
.text:00409C93                 call    sub_409CB0
.text:00409C98                 xor     eax, eax
.text:00409C9A                 cmp     ds:VersionInformation.dwPlatformId, 3
.text:00409CA1                 setz    al
.text:00409CA4                 add     esp, 0Ch
.text:00409CA7                 retn
.text:00409CA7 ; ---------------------------------------------------------------------------
.text:00409CA8                 align 10h
.text:00409CB0
.text:00409CB0 ; =============== S U B R O U T I N E =======================================
.text:00409CB0
.text:00409CB0
.text:00409CB0 sub_409CB0      proc near               ; CODE XREF: .text:004095B0↑p
.text:00409CB0                                         ; sub_409BA0+3↑p ...
.text:00409CB0
.text:00409CB0 lpVersionInformation= dword ptr -0BCh
.text:00409CB0 VersionInformation= _OSVERSIONINFOA ptr -0ACh
.text:00409CB0
.text:00409CB0                 sub     esp, 0BCh
.text:00409CB6                 mov     edx, ds:dword_40F4F0
.text:00409CBC                 test    edx, edx
.text:00409CBE                 jz      short loc_409CD0
.text:00409CC0
.text:00409CC0 loc_409CC0:                             ; CODE XREF: sub_409CB0+7B↓j
.text:00409CC0                 mov     edx, 1
.text:00409CC5
.text:00409CC5 loc_409CC5:                             ; CODE XREF: sub_409CB0+217↓j
.text:00409CC5                 mov     eax, edx
.text:00409CC7                 add     esp, 0BCh
.text:00409CCD                 retn
.text:00409CCD ; ---------------------------------------------------------------------------
.text:00409CCE                 align 10h
.text:00409CD0
.text:00409CD0 loc_409CD0:                             ; CODE XREF: sub_409CB0+E↑j
.text:00409CD0                 mov     [esp+0BCh+lpVersionInformation], offset VersionInformation ; lpVersionInformation
.text:00409CD7                 mov     edx, 9Ch ; 'œ'
.text:00409CDC                 mov     ds:VersionInformation.dwOSVersionInfoSize, edx
.text:00409CE2                 call    GetVersionExA
.text:00409CE7                 sub     esp, 4
.text:00409CEA                 test    eax, eax
.text:00409CEC                 jz      loc_409EA4
.text:00409CF2
.text:00409CF2 loc_409CF2:                             ; CODE XREF: sub_409CB0+245↓j
.text:00409CF2                 movzx   edx, word ptr ds:VersionInformation.dwBuildNumber
.text:00409CF9                 mov     eax, ds:VersionInformation.dwPlatformId
.text:00409CFE                 cmp     eax, 1
.text:00409D01                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409D07                 jz      loc_409DF0
.text:00409D0D                 cmp     eax, 1
.text:00409D10                 jb      loc_409DE0
.text:00409D16                 cmp     eax, 2
.text:00409D19                 jz      short loc_409D3A
.text:00409D1B                 cmp     eax, 3
.text:00409D1E                 jz      short loc_409D2D
.text:00409D20
.text:00409D20 loc_409D20:                             ; CODE XREF: sub_409CB0+88↓j
.text:00409D20                                         ; sub_409CB0+C0↓j ...
.text:00409D20                 mov     edx, 1
.text:00409D25                 mov     ds:dword_40F4F0, edx
.text:00409D2B                 jmp     short loc_409CC0
.text:00409D2D ; ---------------------------------------------------------------------------
.text:00409D2D
.text:00409D2D loc_409D2D:                             ; CODE XREF: sub_409CB0+6E↑j
.text:00409D2D                 mov     ecx, 17h
.text:00409D32
.text:00409D32 loc_409D32:                             ; CODE XREF: sub_409CB0+1A7↓j
.text:00409D32                 mov     ds:dword_40F440, ecx
.text:00409D38                 jmp     short loc_409D20
.text:00409D3A ; ---------------------------------------------------------------------------
.text:00409D3A
.text:00409D3A loc_409D3A:                             ; CODE XREF: sub_409CB0+69↑j
.text:00409D3A                 mov     eax, ds:VersionInformation.dwMajorVersion
.text:00409D3F                 cmp     eax, 3
.text:00409D42                 jz      short loc_409DBB
.text:00409D44                 cmp     eax, 4
.text:00409D47                 jz      short loc_409DAA
.text:00409D49
.text:00409D49 loc_409D49:                             ; CODE XREF: sub_409CB0+102↓j
.text:00409D49                 cmp     eax, 4
.text:00409D4C                 ja      short loc_409D72
.text:00409D4E                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409D54                 test    ecx, ecx
.text:00409D56                 jnz     short loc_409D72
.text:00409D58                 mov     edx, 1Eh
.text:00409D5D
.text:00409D5D loc_409D5D:                             ; CODE XREF: sub_409CB0+DF↓j
.text:00409D5D                 mov     ds:dword_40F440, edx
.text:00409D63
.text:00409D63 loc_409D63:                             ; CODE XREF: sub_409CB0+C5↓j
.text:00409D63                                         ; sub_409CB0+D8↓j ...
.text:00409D63                 movzx   ecx, ds:word_40F4E4
.text:00409D6A                 add     ds:dword_40F440, ecx
.text:00409D70                 jmp     short loc_409D20
.text:00409D72 ; ---------------------------------------------------------------------------
.text:00409D72
.text:00409D72 loc_409D72:                             ; CODE XREF: sub_409CB0+9C↑j
.text:00409D72                                         ; sub_409CB0+A6↑j
.text:00409D72                 cmp     eax, 5
.text:00409D75                 jnz     short loc_409D63
.text:00409D77                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409D7C                 cmp     eax, 2
.text:00409D7F                 jz      short loc_409D9E
.text:00409D81                 cmp     eax, 1
.text:00409D84                 jz      short loc_409D91
.text:00409D86                 test    eax, eax
.text:00409D88                 jnz     short loc_409D63
.text:00409D8A                 mov     edx, 32h ; '2'
.text:00409D8F                 jmp     short loc_409D5D
.text:00409D91 ; ---------------------------------------------------------------------------
.text:00409D91
.text:00409D91 loc_409D91:                             ; CODE XREF: sub_409CB0+D4↑j
.text:00409D91                 mov     ecx, 3Ch ; '<'
.text:00409D96
.text:00409D96 loc_409D96:                             ; CODE XREF: sub_409CB0+122↓j
.text:00409D96                 mov     ds:dword_40F440, ecx
.text:00409D9C                 jmp     short loc_409D63
.text:00409D9E ; ---------------------------------------------------------------------------
.text:00409D9E
.text:00409D9E loc_409D9E:                             ; CODE XREF: sub_409CB0+CF↑j
.text:00409D9E                 mov     eax, 46h ; 'F'
.text:00409DA3
.text:00409DA3 loc_409DA3:                             ; CODE XREF: sub_409CB0+109↓j
.text:00409DA3                                         ; sub_409CB0+129↓j
.text:00409DA3                 mov     ds:dword_40F440, eax
.text:00409DA8                 jmp     short loc_409D63
.text:00409DAA ; ---------------------------------------------------------------------------
.text:00409DAA
.text:00409DAA loc_409DAA:                             ; CODE XREF: sub_409CB0+97↑j
.text:00409DAA                 mov     ecx, ds:VersionInformation.dwMinorVersion
.text:00409DB0                 test    ecx, ecx
.text:00409DB2                 jnz     short loc_409D49
.text:00409DB4                 mov     eax, 28h ; '('
.text:00409DB9                 jmp     short loc_409DA3
.text:00409DBB ; ---------------------------------------------------------------------------
.text:00409DBB
.text:00409DBB loc_409DBB:                             ; CODE XREF: sub_409CB0+92↑j
.text:00409DBB                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409DC0                 cmp     eax, 33h ; '3'
.text:00409DC3                 jz      short loc_409DD4
.text:00409DC5                 cmp     eax, 5
.text:00409DC8                 setz    cl
.text:00409DCB                 movzx   edx, cl
.text:00409DCE                 lea     ecx, [edx+edx*4+1Eh]
.text:00409DD2                 jmp     short loc_409D96
.text:00409DD4 ; ---------------------------------------------------------------------------
.text:00409DD4
.text:00409DD4 loc_409DD4:                             ; CODE XREF: sub_409CB0+113↑j
.text:00409DD4                 mov     eax, 24h ; '$'
.text:00409DD9                 jmp     short loc_409DA3
.text:00409DD9 ; ---------------------------------------------------------------------------
.text:00409DDB                 align 10h
.text:00409DE0
.text:00409DE0 loc_409DE0:                             ; CODE XREF: sub_409CB0+60↑j
.text:00409DE0                 mov     edx, 2
.text:00409DE5                 mov     ds:dword_40F440, edx
.text:00409DEB                 jmp     loc_409D20
.text:00409DF0 ; ---------------------------------------------------------------------------
.text:00409DF0
.text:00409DF0 loc_409DF0:                             ; CODE XREF: sub_409CB0+57↑j
.text:00409DF0                 mov     ecx, ds:VersionInformation.dwMajorVersion
.text:00409DF6                 cmp     ecx, 4
.text:00409DF9                 jnz     loc_409D20
.text:00409DFF                 mov     eax, ds:VersionInformation.dwMinorVersion
.text:00409E04                 test    eax, eax
.text:00409E06                 jnz     short loc_409E2A
.text:00409E08                 mov     eax, 0Ah
.text:00409E0D                 mov     ds:dword_40F440, eax
.text:00409E12                 lea     eax, [edx-3B7h]
.text:00409E18                 cmp     eax, 81h
.text:00409E1D                 ja      short loc_409E95
.text:00409E1F                 mov     edx, 0Bh
.text:00409E24
.text:00409E24 loc_409E24:                             ; CODE XREF: sub_409CB0+1F2↓j
.text:00409E24                 mov     ds:dword_40F440, edx
.text:00409E2A
.text:00409E2A loc_409E2A:                             ; CODE XREF: sub_409CB0+156↑j
.text:00409E2A                                         ; sub_409CB0+1EB↓j
.text:00409E2A                 cmp     ecx, 4
.text:00409E2D                 jnz     loc_409D20
.text:00409E33                 cmp     ds:VersionInformation.dwMinorVersion, 0Ah
.text:00409E3A                 jz      short loc_409E5C
.text:00409E3C
.text:00409E3C loc_409E3C:                             ; CODE XREF: sub_409CB0+1D4↓j
.text:00409E3C                                         ; sub_409CB0+1DC↓j
.text:00409E3C                 cmp     ecx, 4
.text:00409E3F                 jnz     loc_409D20
.text:00409E45                 cmp     ds:VersionInformation.dwMinorVersion, 5Ah ; 'Z'
.text:00409E4C                 jnz     loc_409D20
.text:00409E52                 mov     ecx, 12h
.text:00409E57                 jmp     loc_409D32
.text:00409E5C ; ---------------------------------------------------------------------------
.text:00409E5C
.text:00409E5C loc_409E5C:                             ; CODE XREF: sub_409CB0+18A↑j
.text:00409E5C                 mov     edx, ds:VersionInformation.dwBuildNumber
.text:00409E62                 mov     eax, 0Eh
.text:00409E67                 mov     ds:dword_40F440, eax
.text:00409E6C                 lea     eax, [edx-7CFh]
.text:00409E72                 cmp     eax, 0B7h ; '·'
.text:00409E77                 ja      short loc_409E86
.text:00409E79                 mov     edx, 0Fh
.text:00409E7E
.text:00409E7E loc_409E7E:                             ; CODE XREF: sub_409CB0+1E3↓j
.text:00409E7E                 mov     ds:dword_40F440, edx
.text:00409E84                 jmp     short loc_409E3C
.text:00409E86 ; ---------------------------------------------------------------------------
.text:00409E86
.text:00409E86 loc_409E86:                             ; CODE XREF: sub_409CB0+1C7↑j
.text:00409E86                 cmp     edx, 886h
.text:00409E8C                 jbe     short loc_409E3C
.text:00409E8E                 mov     edx, 10h
.text:00409E93                 jmp     short loc_409E7E
.text:00409E95 ; ---------------------------------------------------------------------------
.text:00409E95
.text:00409E95 loc_409E95:                             ; CODE XREF: sub_409CB0+16D↑j
.text:00409E95                 cmp     edx, 438h
.text:00409E9B                 jbe     short loc_409E2A
.text:00409E9D                 mov     edx, 0Ch
.text:00409EA2                 jmp     short loc_409E24
.text:00409EA4 ; ---------------------------------------------------------------------------
.text:00409EA4
.text:00409EA4 loc_409EA4:                             ; CODE XREF: sub_409CB0+3C↑j
.text:00409EA4                 mov     [esp+0BCh+VersionInformation.dwOSVersionInfoSize], 94h ; '”'
.text:00409EAC                 xor     edx, edx
.text:00409EAE                 lea     ecx, [esp+0BCh+VersionInformation]
.text:00409EB2                 mov     dword_40E0A0, edx
.text:00409EB8                 mov     [esp+0BCh+lpVersionInformation], ecx ; lpVersionInformation
.text:00409EBB                 call    GetVersionExA
.text:00409EC0                 sub     esp, 4
.text:00409EC3                 xor     edx, edx
.text:00409EC5                 test    eax, eax
.text:00409EC7                 jz      loc_409CC5
.text:00409ECD                 mov     edx, [esp+0BCh+VersionInformation.dwMajorVersion]
.text:00409ED1                 mov     ecx, [esp+0BCh+VersionInformation.dwMinorVersion]
.text:00409ED5                 mov     ds:VersionInformation.dwMajorVersion, edx
.text:00409EDB                 mov     edx, [esp+0BCh+VersionInformation.dwBuildNumber]
.text:00409EDF                 mov     ds:VersionInformation.dwMinorVersion, ecx
.text:00409EE5                 mov     ecx, [esp+0BCh+VersionInformation.dwPlatformId]
.text:00409EE9                 mov     ds:VersionInformation.dwBuildNumber, edx
.text:00409EEF                 mov     ds:VersionInformation.dwPlatformId, ecx
.text:00409EF5                 jmp     loc_409CF2
.text:00409EF5 sub_409CB0      endp
.text:00409EF5
.text:00409EF5 ; ---------------------------------------------------------------------------
.text:00409EFA                 align 10h
.text:00409F00 aNotset         db 'notset',0           ; DATA XREF: .data:off_40E0B0↓o
.text:00409F00                                         ; .data:off_40E0B4↓o
.text:00409F07 ; ---------------------------------------------------------------------------
.text:00409F07
.text:00409F07 loc_409F07:                             ; DATA XREF: .text:loc_409FA5↓o
.text:00409F07                 jb      short loc_409F80
.text:00409F09                 add     [eax], ah
.text:00409F0B                 or      [eax], eax
.text:00409F0D
.text:00409F0D loc_409F0D:                             ; DATA XREF: .text:00409FF8↓o
.text:00409F0D                                         ; .text:0040A05E↓o ...
.text:00409F0D                 add     [eax], ah
.text:00409F0F                 and     eax, 64252064h
.text:00409F14                 and     [eax], al
.text:00409F16                 lea     esi, [esi+0]
.text:00409F19                 lea     edi, [edi+0]
.text:00409F20                 push    ebp
.text:00409F21                 push    edi
.text:00409F22                 push    esi
.text:00409F23                 push    ebx
.text:00409F24                 sub     esp, 14Ch
.text:00409F2A                 mov     edx, off_40E0B0 ; "notset"
.text:00409F30                 mov     edi, [esp+164h]
.text:00409F37                 mov     ebp, [esp+168h]
.text:00409F3E                 mov     [esp+4], edx
.text:00409F42                 mov     edx, off_40E0B4 ; "notset"
.text:00409F48                 mov     [esp], edx
.text:00409F4B                 call    strcmp
.text:00409F50                 test    eax, eax
.text:00409F52                 jz      loc_40A340
.text:00409F58
.text:00409F58 loc_409F58:                             ; CODE XREF: .text:0040A38C↓j
.text:00409F58                 lea     ebx, [esp+20h]
.text:00409F5C                 lea     esi, [esi+0]
.text:00409F60
.text:00409F60 loc_409F60:                             ; CODE XREF: .text:00409F96↓j
.text:00409F60                 mov     [esp+4], ebx
.text:00409F64                 mov     ecx, off_40E0B4 ; "notset"
.text:00409F6A                 mov     [esp], ecx
.text:00409F6D                 call    loc_408C60
.text:00409F72                 test    eax, eax
.text:00409F74                 jns     short loc_409FA5
.text:00409F76                 mov     eax, off_40E0B4 ; "notset"
.text:00409F7B                 cmp     byte ptr [eax], 0
.text:00409F7E                 jz      short loc_409F98
.text:00409F80
.text:00409F80 loc_409F80:                             ; CODE XREF: .text:loc_409F07↑j
.text:00409F80                 mov     dword ptr [esp+4], 0
.text:00409F88                 mov     [esp], eax
.text:00409F8B                 call    strchr
.text:00409F90                 inc     eax
.text:00409F91                 mov     off_40E0B4, eax ; "notset"
.text:00409F96                 jmp     short loc_409F60
.text:00409F98 ; ---------------------------------------------------------------------------
.text:00409F98
.text:00409F98 loc_409F98:                             ; CODE XREF: .text:00409F7E↑j
.text:00409F98                 xor     eax, eax
.text:00409F9A
.text:00409F9A loc_409F9A:                             ; CODE XREF: .text:0040A15C↓j
.text:00409F9A                 add     esp, 14Ch
.text:00409FA0                 pop     ebx
.text:00409FA1                 pop     esi
.text:00409FA2                 pop     edi
.text:00409FA3                 pop     ebp
.text:00409FA4                 retn
.text:00409FA5 ; ---------------------------------------------------------------------------
.text:00409FA5
.text:00409FA5 loc_409FA5:                             ; CODE XREF: .text:00409F74↑j
.text:00409FA5                 mov     dword ptr [edi+0Ch], offset loc_409F07
.text:00409FAC                 lea     ecx, [esp+0D6h]
.text:00409FB3                 lea     edx, [esp+6Ch]
.text:00409FB7                 mov     [edi+4], ecx
.text:00409FBA                 lea     ebx, [esp+7Ch]
.text:00409FBE                 mov     [edi+8], edx
.text:00409FC1                 mov     [edi], ebx
.text:00409FC3                 mov     [esp], ebp
.text:00409FC6                 mov     [esp+4], edi
.text:00409FCA                 call    ___addmntentstr
.text:00409FCF                 mov     [esp], ebp
.text:00409FD2                 mov     dword ptr [esp+4], 409F0Ah
.text:00409FDA                 call    strspn
.text:00409FDF                 mov     dword ptr [esp+4], 0
.text:00409FE7                 mov     ebx, off_40E0B4 ; "notset"
.text:00409FED                 lea     esi, [eax+ebp]
.text:00409FF0                 mov     [esp+1Ch], esi
.text:00409FF4                 lea     ebp, [esp+1Ch]
.text:00409FF8                 mov     esi, offset loc_409F0D
.text:00409FFD                 mov     [esp], ebx
.text:0040A000                 call    strchr
.text:0040A005                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A00D                 inc     eax
.text:0040A00E                 mov     off_40E0B4, eax ; "notset"
.text:0040A013                 mov     [esp], ebp
.text:0040A016                 call    sub_40AC80
.text:0040A01B                 test    eax, eax
.text:0040A01D                 mov     ebx, eax
.text:0040A01F                 jz      short loc_40A048
.text:0040A021                 mov     edx, eax
.text:0040A023                 mov     ecx, eax
.text:0040A025                 lea     esi, [esi+0]
.text:0040A029                 lea     edi, [edi+0]
.text:0040A030
.text:0040A030 loc_40A030:                             ; CODE XREF: .text:0040A046↓j
.text:0040A030                 movzx   eax, byte ptr [edx]
.text:0040A033                 cmp     al, 5Ch ; '\'
.text:0040A035                 jz      loc_40A2E4
.text:0040A03B
.text:0040A03B loc_40A03B:                             ; CODE XREF: .text:0040A2EC↓j
.text:0040A03B                                         ; .text:0040A2FA↓j ...
.text:0040A03B                 mov     [ecx], al
.text:0040A03D
.text:0040A03D loc_40A03D:                             ; CODE XREF: .text:0040A30E↓j
.text:0040A03D                 inc     ecx
.text:0040A03E
.text:0040A03E loc_40A03E:                             ; CODE XREF: .text:0040A326↓j
.text:0040A03E                 movzx   eax, byte ptr [edx]
.text:0040A041                 mov     esi, ebx
.text:0040A043                 inc     edx
.text:0040A044                 test    al, al
.text:0040A046                 jnz     short loc_40A030
.text:0040A048
.text:0040A048 loc_40A048:                             ; CODE XREF: .text:0040A01F↑j
.text:0040A048                 mov     [edi], esi
.text:0040A04A                 mov     eax, [esp+1Ch]
.text:0040A04E                 test    eax, eax
.text:0040A050                 jnz     loc_40A2CB
.text:0040A056
.text:0040A056 loc_40A056:                             ; CODE XREF: .text:0040A2DF↓j
.text:0040A056                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A05E                 mov     esi, offset loc_409F0D
.text:0040A063                 mov     [esp], ebp
.text:0040A066                 call    sub_40AC80
.text:0040A06B                 test    eax, eax
.text:0040A06D                 mov     ebx, eax
.text:0040A06F                 jz      short loc_40A098
.text:0040A071                 mov     edx, eax
.text:0040A073                 mov     ecx, eax
.text:0040A075                 lea     esi, [esi+0]
.text:0040A079                 lea     edi, [edi+0]
.text:0040A080
.text:0040A080 loc_40A080:                             ; CODE XREF: .text:0040A096↓j
.text:0040A080                 movzx   eax, byte ptr [edx]
.text:0040A083                 cmp     al, 5Ch ; '\'
.text:0040A085                 jz      loc_40A273
.text:0040A08B
.text:0040A08B loc_40A08B:                             ; CODE XREF: .text:0040A27B↓j
.text:0040A08B                                         ; .text:0040A289↓j ...
.text:0040A08B                 mov     [ecx], al
.text:0040A08D
.text:0040A08D loc_40A08D:                             ; CODE XREF: .text:0040A29D↓j
.text:0040A08D                 inc     ecx
.text:0040A08E
.text:0040A08E loc_40A08E:                             ; CODE XREF: .text:0040A2B5↓j
.text:0040A08E                 movzx   eax, byte ptr [edx]
.text:0040A091                 mov     esi, ebx
.text:0040A093                 inc     edx
.text:0040A094                 test    al, al
.text:0040A096                 jnz     short loc_40A080
.text:0040A098
.text:0040A098 loc_40A098:                             ; CODE XREF: .text:0040A06F↑j
.text:0040A098                 mov     [edi+4], esi
.text:0040A09B                 mov     eax, [esp+1Ch]
.text:0040A09F                 test    eax, eax
.text:0040A0A1                 jnz     loc_40A25A
.text:0040A0A7
.text:0040A0A7 loc_40A0A7:                             ; CODE XREF: .text:0040A26E↓j
.text:0040A0A7                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A0AF                 mov     esi, offset loc_409F0D
.text:0040A0B4                 mov     [esp], ebp
.text:0040A0B7                 call    sub_40AC80
.text:0040A0BC                 test    eax, eax
.text:0040A0BE                 mov     ebx, eax
.text:0040A0C0                 jz      short loc_40A0E8
.text:0040A0C2                 mov     edx, eax
.text:0040A0C4                 mov     ecx, eax
.text:0040A0C6                 lea     esi, [esi+0]
.text:0040A0C9                 lea     edi, [edi+0]
.text:0040A0D0
.text:0040A0D0 loc_40A0D0:                             ; CODE XREF: .text:0040A0E6↓j
.text:0040A0D0                 movzx   eax, byte ptr [edx]
.text:0040A0D3                 cmp     al, 5Ch ; '\'
.text:0040A0D5                 jz      loc_40A202
.text:0040A0DB
.text:0040A0DB loc_40A0DB:                             ; CODE XREF: .text:0040A20A↓j
.text:0040A0DB                                         ; .text:0040A218↓j ...
.text:0040A0DB                 mov     [ecx], al
.text:0040A0DD
.text:0040A0DD loc_40A0DD:                             ; CODE XREF: .text:0040A22C↓j
.text:0040A0DD                 inc     ecx
.text:0040A0DE
.text:0040A0DE loc_40A0DE:                             ; CODE XREF: .text:0040A244↓j
.text:0040A0DE                 movzx   eax, byte ptr [edx]
.text:0040A0E1                 mov     esi, ebx
.text:0040A0E3                 inc     edx
.text:0040A0E4                 test    al, al
.text:0040A0E6                 jnz     short loc_40A0D0
.text:0040A0E8
.text:0040A0E8 loc_40A0E8:                             ; CODE XREF: .text:0040A0C0↑j
.text:0040A0E8                 mov     [edi+8], esi
.text:0040A0EB                 mov     eax, [esp+1Ch]
.text:0040A0EF                 test    eax, eax
.text:0040A0F1                 jnz     loc_40A1E9
.text:0040A0F7
.text:0040A0F7 loc_40A0F7:                             ; CODE XREF: .text:0040A1FD↓j
.text:0040A0F7                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A0FF                 mov     esi, offset loc_409F0D
.text:0040A104                 mov     [esp], ebp
.text:0040A107                 call    sub_40AC80
.text:0040A10C                 test    eax, eax
.text:0040A10E                 mov     ebx, eax
.text:0040A110                 jz      short loc_40A134
.text:0040A112                 mov     edx, eax
.text:0040A114                 mov     ecx, eax
.text:0040A116                 lea     esi, [esi+0]
.text:0040A119                 lea     edi, [edi+0]
.text:0040A120
.text:0040A120 loc_40A120:                             ; CODE XREF: .text:0040A132↓j
.text:0040A120                 movzx   eax, byte ptr [edx]
.text:0040A123                 cmp     al, 5Ch ; '\'
.text:0040A125                 jz      short loc_40A195
.text:0040A127
.text:0040A127 loc_40A127:                             ; CODE XREF: .text:0040A19D↓j
.text:0040A127                                         ; .text:0040A1A7↓j ...
.text:0040A127                 mov     [ecx], al
.text:0040A129
.text:0040A129 loc_40A129:                             ; CODE XREF: .text:0040A1BB↓j
.text:0040A129                 inc     ecx
.text:0040A12A
.text:0040A12A loc_40A12A:                             ; CODE XREF: .text:0040A1D3↓j
.text:0040A12A                 movzx   eax, byte ptr [edx]
.text:0040A12D                 mov     esi, ebx
.text:0040A12F                 inc     edx
.text:0040A130                 test    al, al
.text:0040A132                 jnz     short loc_40A120
.text:0040A134
.text:0040A134 loc_40A134:                             ; CODE XREF: .text:0040A110↑j
.text:0040A134                 mov     [edi+0Ch], esi
.text:0040A137                 xor     eax, eax
.text:0040A139                 mov     edx, [esp+1Ch]
.text:0040A13D                 test    edx, edx
.text:0040A13F                 jnz     short loc_40A175
.text:0040A141
.text:0040A141 loc_40A141:                             ; CODE XREF: .text:0040A193↓j
.text:0040A141                 cmp     eax, 1
.text:0040A144                 jz      short loc_40A16C
.text:0040A146                 cmp     eax, 1
.text:0040A149                 jle     short loc_40A161
.text:0040A14B
.text:0040A14B loc_40A14B:                             ; CODE XREF: .text:0040A163↓j
.text:0040A14B                                         ; .text:0040A173↓j
.text:0040A14B                 mov     edx, [esp+160h]
.text:0040A152                 mov     [esp], edx
.text:0040A155                 call    sub_40AC20
.text:0040A15A                 mov     eax, edi
.text:0040A15C                 jmp     loc_409F9A
.text:0040A161 ; ---------------------------------------------------------------------------
.text:0040A161
.text:0040A161 loc_40A161:                             ; CODE XREF: .text:0040A149↑j
.text:0040A161                 test    eax, eax
.text:0040A163                 jnz     short loc_40A14B
.text:0040A165                 mov     dword ptr [edi+10h], 0
.text:0040A16C
.text:0040A16C loc_40A16C:                             ; CODE XREF: .text:0040A144↑j
.text:0040A16C                 mov     dword ptr [edi+14h], 0
.text:0040A173                 jmp     short loc_40A14B
.text:0040A175 ; ---------------------------------------------------------------------------
.text:0040A175
.text:0040A175 loc_40A175:                             ; CODE XREF: .text:0040A13F↑j
.text:0040A175                 mov     dword ptr [esp+4], 409F0Eh
.text:0040A17D                 lea     esi, [edi+14h]
.text:0040A180                 lea     ebp, [edi+10h]
.text:0040A183                 mov     [esp+0Ch], esi
.text:0040A187                 mov     [esp+8], ebp
.text:0040A18B                 mov     [esp], edx
.text:0040A18E                 call    sscanf
.text:0040A193                 jmp     short loc_40A141
.text:0040A195 ; ---------------------------------------------------------------------------
.text:0040A195
.text:0040A195 loc_40A195:                             ; CODE XREF: .text:0040A125↑j
.text:0040A195                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A199                 jz      short loc_40A1D8
.text:0040A19B
.text:0040A19B loc_40A19B:                             ; CODE XREF: .text:0040A1DC↓j
.text:0040A19B                                         ; .text:0040A1E2↓j
.text:0040A19B                 cmp     al, 5Ch ; '\'
.text:0040A19D                 jnz     short loc_40A127
.text:0040A19F                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A1A3                 jz      short loc_40A1C0
.text:0040A1A5
.text:0040A1A5 loc_40A1A5:                             ; CODE XREF: .text:0040A1C4↓j
.text:0040A1A5                                         ; .text:0040A1CA↓j
.text:0040A1A5                 cmp     al, 5Ch ; '\'
.text:0040A1A7                 jnz     loc_40A127
.text:0040A1AD                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A1B1                 jnz     loc_40A127
.text:0040A1B7                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A1BA                 inc     edx
.text:0040A1BB                 jmp     loc_40A129
.text:0040A1C0 ; ---------------------------------------------------------------------------
.text:0040A1C0
.text:0040A1C0 loc_40A1C0:                             ; CODE XREF: .text:0040A1A3↑j
.text:0040A1C0                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A1C4                 jnz     short loc_40A1A5
.text:0040A1C6                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A1CA                 jnz     short loc_40A1A5
.text:0040A1CC                 mov     byte ptr [ecx], 9
.text:0040A1CF
.text:0040A1CF loc_40A1CF:                             ; CODE XREF: .text:0040A1E7↓j
.text:0040A1CF                 inc     ecx
.text:0040A1D0                 add     edx, 3
.text:0040A1D3                 jmp     loc_40A12A
.text:0040A1D8 ; ---------------------------------------------------------------------------
.text:0040A1D8
.text:0040A1D8 loc_40A1D8:                             ; CODE XREF: .text:0040A199↑j
.text:0040A1D8                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A1DC                 jnz     short loc_40A19B
.text:0040A1DE                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A1E2                 jnz     short loc_40A19B
.text:0040A1E4                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A1E7                 jmp     short loc_40A1CF
.text:0040A1E9 ; ---------------------------------------------------------------------------
.text:0040A1E9
.text:0040A1E9 loc_40A1E9:                             ; CODE XREF: .text:0040A0F1↑j
.text:0040A1E9                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A1F1                 mov     [esp], eax
.text:0040A1F4                 call    strspn
.text:0040A1F9                 add     [esp+1Ch], eax
.text:0040A1FD                 jmp     loc_40A0F7
.text:0040A202 ; ---------------------------------------------------------------------------
.text:0040A202
.text:0040A202 loc_40A202:                             ; CODE XREF: .text:0040A0D5↑j
.text:0040A202                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A206                 jz      short loc_40A249
.text:0040A208
.text:0040A208 loc_40A208:                             ; CODE XREF: .text:0040A24D↓j
.text:0040A208                                         ; .text:0040A253↓j
.text:0040A208                 cmp     al, 5Ch ; '\'
.text:0040A20A                 jnz     loc_40A0DB
.text:0040A210                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A214                 jz      short loc_40A231
.text:0040A216
.text:0040A216 loc_40A216:                             ; CODE XREF: .text:0040A235↓j
.text:0040A216                                         ; .text:0040A23B↓j
.text:0040A216                 cmp     al, 5Ch ; '\'
.text:0040A218                 jnz     loc_40A0DB
.text:0040A21E                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A222                 jnz     loc_40A0DB
.text:0040A228                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A22B                 inc     edx
.text:0040A22C                 jmp     loc_40A0DD
.text:0040A231 ; ---------------------------------------------------------------------------
.text:0040A231
.text:0040A231 loc_40A231:                             ; CODE XREF: .text:0040A214↑j
.text:0040A231                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A235                 jnz     short loc_40A216
.text:0040A237                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A23B                 jnz     short loc_40A216
.text:0040A23D                 mov     byte ptr [ecx], 9
.text:0040A240
.text:0040A240 loc_40A240:                             ; CODE XREF: .text:0040A258↓j
.text:0040A240                 inc     ecx
.text:0040A241                 add     edx, 3
.text:0040A244                 jmp     loc_40A0DE
.text:0040A249 ; ---------------------------------------------------------------------------
.text:0040A249
.text:0040A249 loc_40A249:                             ; CODE XREF: .text:0040A206↑j
.text:0040A249                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A24D                 jnz     short loc_40A208
.text:0040A24F                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A253                 jnz     short loc_40A208
.text:0040A255                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A258                 jmp     short loc_40A240
.text:0040A25A ; ---------------------------------------------------------------------------
.text:0040A25A
.text:0040A25A loc_40A25A:                             ; CODE XREF: .text:0040A0A1↑j
.text:0040A25A                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A262                 mov     [esp], eax
.text:0040A265                 call    strspn
.text:0040A26A                 add     [esp+1Ch], eax
.text:0040A26E                 jmp     loc_40A0A7
.text:0040A273 ; ---------------------------------------------------------------------------
.text:0040A273
.text:0040A273 loc_40A273:                             ; CODE XREF: .text:0040A085↑j
.text:0040A273                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A277                 jz      short loc_40A2BA
.text:0040A279
.text:0040A279 loc_40A279:                             ; CODE XREF: .text:0040A2BE↓j
.text:0040A279                                         ; .text:0040A2C4↓j
.text:0040A279                 cmp     al, 5Ch ; '\'
.text:0040A27B                 jnz     loc_40A08B
.text:0040A281                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A285                 jz      short loc_40A2A2
.text:0040A287
.text:0040A287 loc_40A287:                             ; CODE XREF: .text:0040A2A6↓j
.text:0040A287                                         ; .text:0040A2AC↓j
.text:0040A287                 cmp     al, 5Ch ; '\'
.text:0040A289                 jnz     loc_40A08B
.text:0040A28F                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A293                 jnz     loc_40A08B
.text:0040A299                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A29C                 inc     edx
.text:0040A29D                 jmp     loc_40A08D
.text:0040A2A2 ; ---------------------------------------------------------------------------
.text:0040A2A2
.text:0040A2A2 loc_40A2A2:                             ; CODE XREF: .text:0040A285↑j
.text:0040A2A2                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A2A6                 jnz     short loc_40A287
.text:0040A2A8                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A2AC                 jnz     short loc_40A287
.text:0040A2AE                 mov     byte ptr [ecx], 9
.text:0040A2B1
.text:0040A2B1 loc_40A2B1:                             ; CODE XREF: .text:0040A2C9↓j
.text:0040A2B1                 inc     ecx
.text:0040A2B2                 add     edx, 3
.text:0040A2B5                 jmp     loc_40A08E
.text:0040A2BA ; ---------------------------------------------------------------------------
.text:0040A2BA
.text:0040A2BA loc_40A2BA:                             ; CODE XREF: .text:0040A277↑j
.text:0040A2BA                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A2BE                 jnz     short loc_40A279
.text:0040A2C0                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A2C4                 jnz     short loc_40A279
.text:0040A2C6                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A2C9                 jmp     short loc_40A2B1
.text:0040A2CB ; ---------------------------------------------------------------------------
.text:0040A2CB
.text:0040A2CB loc_40A2CB:                             ; CODE XREF: .text:0040A050↑j
.text:0040A2CB                 mov     dword ptr [esp+4], 409F0Ah
.text:0040A2D3                 mov     [esp], eax
.text:0040A2D6                 call    strspn
.text:0040A2DB                 add     [esp+1Ch], eax
.text:0040A2DF                 jmp     loc_40A056
.text:0040A2E4 ; ---------------------------------------------------------------------------
.text:0040A2E4
.text:0040A2E4 loc_40A2E4:                             ; CODE XREF: .text:0040A035↑j
.text:0040A2E4                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A2E8                 jz      short loc_40A32B
.text:0040A2EA
.text:0040A2EA loc_40A2EA:                             ; CODE XREF: .text:0040A32F↓j
.text:0040A2EA                                         ; .text:0040A335↓j
.text:0040A2EA                 cmp     al, 5Ch ; '\'
.text:0040A2EC                 jnz     loc_40A03B
.text:0040A2F2                 cmp     byte ptr [edx+1], 30h ; '0'
.text:0040A2F6                 jz      short loc_40A313
.text:0040A2F8
.text:0040A2F8 loc_40A2F8:                             ; CODE XREF: .text:0040A317↓j
.text:0040A2F8                                         ; .text:0040A31D↓j
.text:0040A2F8                 cmp     al, 5Ch ; '\'
.text:0040A2FA                 jnz     loc_40A03B
.text:0040A300                 cmp     byte ptr [edx+1], 5Ch ; '\'
.text:0040A304                 jnz     loc_40A03B
.text:0040A30A                 mov     byte ptr [ecx], 5Ch ; '\'
.text:0040A30D                 inc     edx
.text:0040A30E                 jmp     loc_40A03D
.text:0040A313 ; ---------------------------------------------------------------------------
.text:0040A313
.text:0040A313 loc_40A313:                             ; CODE XREF: .text:0040A2F6↑j
.text:0040A313                 cmp     byte ptr [edx+2], 31h ; '1'
.text:0040A317                 jnz     short loc_40A2F8
.text:0040A319                 cmp     byte ptr [edx+3], 32h ; '2'
.text:0040A31D                 jnz     short loc_40A2F8
.text:0040A31F                 mov     byte ptr [ecx], 9
.text:0040A322
.text:0040A322 loc_40A322:                             ; CODE XREF: .text:0040A33A↓j
.text:0040A322                 inc     ecx
.text:0040A323                 add     edx, 3
.text:0040A326                 jmp     loc_40A03E
.text:0040A32B ; ---------------------------------------------------------------------------
.text:0040A32B
.text:0040A32B loc_40A32B:                             ; CODE XREF: .text:0040A2E8↑j
.text:0040A32B                 cmp     byte ptr [edx+2], 34h ; '4'
.text:0040A32F                 jnz     short loc_40A2EA
.text:0040A331                 cmp     byte ptr [edx+3], 30h ; '0'
.text:0040A335                 jnz     short loc_40A2EA
.text:0040A337                 mov     byte ptr [ecx], 20h ; ' '
.text:0040A33A                 jmp     short loc_40A322
.text:0040A33A ; ---------------------------------------------------------------------------
.text:0040A33C                 align 10h
.text:0040A340
.text:0040A340 loc_40A340:                             ; CODE XREF: .text:00409F52↑j
.text:0040A340                 mov     dword ptr [esp+4], 0
.text:0040A348                 mov     dword ptr [esp], 0
.text:0040A34F                 call    GetLogicalDriveStringsA
.text:0040A354                 sub     esp, 8
.text:0040A357                 mov     ebx, eax
.text:0040A359                 call    GetProcessHeap
.text:0040A35E                 mov     [esp], eax
.text:0040A361                 mov     [esp+8], ebx
.text:0040A365                 mov     dword ptr [esp+4], 0
.text:0040A36D                 call    HeapAlloc
.text:0040A372                 sub     esp, 0Ch
.text:0040A375                 mov     esi, eax
.text:0040A377                 mov     [esp+4], eax
.text:0040A37B                 mov     [esp], ebx
.text:0040A37E                 call    GetLogicalDriveStringsA
.text:0040A383                 mov     off_40E0B4, esi ; "notset"
.text:0040A389                 sub     esp, 8
.text:0040A38C                 jmp     loc_409F58
.text:0040A38C ; ---------------------------------------------------------------------------
.text:0040A391 ; const char aSSSSDD[]
.text:0040A391 aSSSSDD         db '%s %s %s %s %d %d',0Ah,0
.text:0040A391                                         ; DATA XREF: .text:0040A4D0↓o
.text:0040A391                                         ; ___addmntentstr+F0↓o
.text:0040A3A4                 align 10h
.text:0040A3B0                 push    esi
.text:0040A3B1                 push    ebx
.text:0040A3B2                 sub     esp, 44h
.text:0040A3B5                 mov     ebx, [esp+54h]
.text:0040A3B9                 mov     esi, [esp+50h]
.text:0040A3BD                 mov     edx, [ebx]
.text:0040A3BF                 mov     [esp+20h], edx
.text:0040A3C3                 mov     ecx, [ebx+4]
.text:0040A3C6                 mov     [esp+24h], ecx
.text:0040A3CA                 mov     edx, [ebx+8]
.text:0040A3CD                 mov     [esp+28h], edx
.text:0040A3D1                 mov     ecx, [ebx+0Ch]
.text:0040A3D4                 mov     [esp+2Ch], ecx
.text:0040A3D8                 mov     edx, [ebx+10h]
.text:0040A3DB                 mov     [esp+30h], edx
.text:0040A3DF                 mov     ecx, [ebx+14h]
.text:0040A3E2                 mov     dword ptr [esp+8], 2
.text:0040A3EA                 mov     dword ptr [esp+4], 0
.text:0040A3F2                 mov     [esp+34h], ecx
.text:0040A3F6                 mov     [esp], esi
.text:0040A3F9                 call    sub_40AC10
.text:0040A3FE ; ---------------------------------------------------------------------------
.text:0040A3FE                 test    eax, eax
.text:0040A400                 mov     edx, 1
.text:0040A405                 jnz     loc_40A505
.text:0040A40B                 mov     ebx, [esp+20h]
.text:0040A40F                 mov     edx, ebx
.text:0040A411                 movzx   eax, byte ptr [ebx]
.text:0040A414                 test    al, al
.text:0040A416                 jz      short loc_40A440
.text:0040A418                 nop
.text:0040A419                 lea     esi, [esi+0]
.text:0040A420
.text:0040A420 loc_40A420:                             ; CODE XREF: .text:0040A43E↓j
.text:0040A420                 cmp     al, 20h ; ' '
.text:0040A422                 jz      loc_40A67A
.text:0040A428                 cmp     al, 9
.text:0040A42A                 jz      loc_40A67A
.text:0040A430                 cmp     al, 5Ch ; '\'
.text:0040A432                 jz      loc_40A67A
.text:0040A438                 inc     ebx
.text:0040A439                 movzx   eax, byte ptr [ebx]
.text:0040A43C                 test    al, al
.text:0040A43E                 jnz     short loc_40A420
.text:0040A440
.text:0040A440 loc_40A440:                             ; CODE XREF: .text:0040A416↑j
.text:0040A440                                         ; .text:0040A67C↓j ...
.text:0040A440                 mov     ebx, [esp+24h]
.text:0040A444                 mov     edx, ebx
.text:0040A446                 movzx   eax, byte ptr [ebx]
.text:0040A449                 test    al, al
.text:0040A44B                 jz      short loc_40A470
.text:0040A44D                 lea     esi, [esi+0]
.text:0040A450
.text:0040A450 loc_40A450:                             ; CODE XREF: .text:0040A46E↓j
.text:0040A450                 cmp     al, 20h ; ' '
.text:0040A452                 jz      loc_40A5FA
.text:0040A458                 cmp     al, 9
.text:0040A45A                 jz      loc_40A5FA
.text:0040A460                 cmp     al, 5Ch ; '\'
.text:0040A462                 jz      loc_40A5FA
.text:0040A468                 inc     ebx
.text:0040A469                 movzx   eax, byte ptr [ebx]
.text:0040A46C                 test    al, al
.text:0040A46E                 jnz     short loc_40A450
.text:0040A470
.text:0040A470 loc_40A470:                             ; CODE XREF: .text:0040A44B↑j
.text:0040A470                                         ; .text:0040A5FC↓j ...
.text:0040A470                 mov     ebx, [esp+28h]
.text:0040A474                 mov     edx, ebx
.text:0040A476                 movzx   eax, byte ptr [ebx]
.text:0040A479                 test    al, al
.text:0040A47B                 jz      short loc_40A4A0
.text:0040A47D                 lea     esi, [esi+0]
.text:0040A480
.text:0040A480 loc_40A480:                             ; CODE XREF: .text:0040A49E↓j
.text:0040A480                 cmp     al, 20h ; ' '
.text:0040A482                 jz      loc_40A57E
.text:0040A488                 cmp     al, 9
.text:0040A48A                 jz      loc_40A57E
.text:0040A490                 cmp     al, 5Ch ; '\'
.text:0040A492                 jz      loc_40A57E
.text:0040A498                 inc     ebx
.text:0040A499                 movzx   eax, byte ptr [ebx]
.text:0040A49C                 test    al, al
.text:0040A49E                 jnz     short loc_40A480
.text:0040A4A0
.text:0040A4A0 loc_40A4A0:                             ; CODE XREF: .text:0040A47B↑j
.text:0040A4A0                                         ; .text:0040A580↓j ...
.text:0040A4A0                 mov     edx, [esp+2Ch]
.text:0040A4A4                 mov     ebx, edx
.text:0040A4A6                 movzx   eax, byte ptr [edx]
.text:0040A4A9                 test    al, al
.text:0040A4AB                 jz      short loc_40A4C4
.text:0040A4AD                 lea     esi, [esi+0]
.text:0040A4B0
.text:0040A4B0 loc_40A4B0:                             ; CODE XREF: .text:0040A4C2↓j
.text:0040A4B0                 cmp     al, 20h ; ' '
.text:0040A4B2                 jz      short loc_40A50D
.text:0040A4B4                 cmp     al, 9
.text:0040A4B6                 jz      short loc_40A50D
.text:0040A4B8                 cmp     al, 5Ch ; '\'
.text:0040A4BA                 jz      short loc_40A50D
.text:0040A4BC                 inc     ebx
.text:0040A4BD                 movzx   eax, byte ptr [ebx]
.text:0040A4C0                 test    al, al
.text:0040A4C2                 jnz     short loc_40A4B0
.text:0040A4C4
.text:0040A4C4 loc_40A4C4:                             ; CODE XREF: .text:0040A4AB↑j
.text:0040A4C4                                         ; .text:0040A50F↓j ...
.text:0040A4C4                 mov     [esp+14h], edx
.text:0040A4C8                 mov     ecx, [esp+34h]
.text:0040A4CC                 mov     ebx, [esp+30h]
.text:0040A4D0                 mov     dword ptr [esp+4], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A4D8                 mov     edx, [esp+24h]
.text:0040A4DC                 mov     [esp+1Ch], ecx
.text:0040A4E0                 mov     ecx, [esp+28h]
.text:0040A4E4                 mov     [esp+18h], ebx
.text:0040A4E8                 mov     ebx, [esp+20h]
.text:0040A4EC                 mov     [esp+0Ch], edx
.text:0040A4F0                 mov     [esp+10h], ecx
.text:0040A4F4                 mov     [esp+8], ebx
.text:0040A4F8                 mov     [esp], esi
.text:0040A4FB                 call    fprintf
.text:0040A500                 mov     edx, eax
.text:0040A502                 shr     edx, 1Fh
.text:0040A505
.text:0040A505 loc_40A505:                             ; CODE XREF: .text:0040A405↑j
.text:0040A505                 add     esp, 44h
.text:0040A508                 mov     eax, edx
.text:0040A50A                 pop     ebx
.text:0040A50B                 pop     esi
.text:0040A50C                 retn
.text:0040A50D ; ---------------------------------------------------------------------------
.text:0040A50D
.text:0040A50D loc_40A50D:                             ; CODE XREF: .text:0040A4B2↑j
.text:0040A50D                                         ; .text:0040A4B6↑j ...
.text:0040A50D                 test    al, al
.text:0040A50F                 jz      short loc_40A4C4
.text:0040A511                 mov     [esp], edx
.text:0040A514                 mov     ebx, edx
.text:0040A516                 call    strlen
.text:0040A51B                 lea     edx, ds:1[eax*4]
.text:0040A522                 mov     [esp], edx
.text:0040A525                 call    malloc
.text:0040A52A                 mov     [esp+2Ch], eax
.text:0040A52E                 mov     edx, eax
.text:0040A530
.text:0040A530 loc_40A530:                             ; CODE XREF: .text:0040A548↓j
.text:0040A530                 movzx   eax, byte ptr [ebx]
.text:0040A533                 cmp     al, 20h ; ' '
.text:0040A535                 jz      short loc_40A56D
.text:0040A537                 cmp     al, 9
.text:0040A539                 jz      short loc_40A55C
.text:0040A53B                 cmp     al, 5Ch ; '\'
.text:0040A53D                 jz      short loc_40A553
.text:0040A53F                 mov     [edx], al
.text:0040A541
.text:0040A541 loc_40A541:                             ; CODE XREF: .text:0040A55A↓j
.text:0040A541                                         ; .text:0040A56B↓j ...
.text:0040A541                 movzx   ecx, byte ptr [ebx]
.text:0040A544                 inc     edx
.text:0040A545                 inc     ebx
.text:0040A546                 test    cl, cl
.text:0040A548                 jnz     short loc_40A530
.text:0040A54A                 mov     edx, [esp+2Ch]
.text:0040A54E                 jmp     loc_40A4C4
.text:0040A553 ; ---------------------------------------------------------------------------
.text:0040A553
.text:0040A553 loc_40A553:                             ; CODE XREF: .text:0040A53D↑j
.text:0040A553                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A556                 inc     edx
.text:0040A557                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A55A                 jmp     short loc_40A541
.text:0040A55C ; ---------------------------------------------------------------------------
.text:0040A55C
.text:0040A55C loc_40A55C:                             ; CODE XREF: .text:0040A539↑j
.text:0040A55C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A55F                 inc     edx
.text:0040A560                 mov     byte ptr [edx], 30h ; '0'
.text:0040A563                 inc     edx
.text:0040A564                 mov     byte ptr [edx], 31h ; '1'
.text:0040A567                 inc     edx
.text:0040A568                 mov     byte ptr [edx], 32h ; '2'
.text:0040A56B                 jmp     short loc_40A541
.text:0040A56D ; ---------------------------------------------------------------------------
.text:0040A56D
.text:0040A56D loc_40A56D:                             ; CODE XREF: .text:0040A535↑j
.text:0040A56D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A570                 inc     edx
.text:0040A571                 mov     byte ptr [edx], 30h ; '0'
.text:0040A574                 inc     edx
.text:0040A575                 mov     byte ptr [edx], 34h ; '4'
.text:0040A578                 inc     edx
.text:0040A579                 mov     byte ptr [edx], 30h ; '0'
.text:0040A57C                 jmp     short loc_40A541
.text:0040A57E ; ---------------------------------------------------------------------------
.text:0040A57E
.text:0040A57E loc_40A57E:                             ; CODE XREF: .text:0040A482↑j
.text:0040A57E                                         ; .text:0040A48A↑j ...
.text:0040A57E                 test    al, al
.text:0040A580                 jz      loc_40A4A0
.text:0040A586                 mov     [esp], edx
.text:0040A589                 mov     ebx, edx
.text:0040A58B                 call    strlen
.text:0040A590                 lea     edx, ds:1[eax*4]
.text:0040A597                 mov     [esp], edx
.text:0040A59A                 call    malloc
.text:0040A59F                 mov     [esp+28h], eax
.text:0040A5A3                 mov     edx, eax
.text:0040A5A5                 lea     esi, [esi+0]
.text:0040A5A9                 lea     edi, [edi+0]
.text:0040A5B0
.text:0040A5B0 loc_40A5B0:                             ; CODE XREF: .text:0040A5C8↓j
.text:0040A5B0                 movzx   eax, byte ptr [ebx]
.text:0040A5B3                 cmp     al, 20h ; ' '
.text:0040A5B5                 jz      short loc_40A5E9
.text:0040A5B7                 cmp     al, 9
.text:0040A5B9                 jz      short loc_40A5D8
.text:0040A5BB                 cmp     al, 5Ch ; '\'
.text:0040A5BD                 jz      short loc_40A5CF
.text:0040A5BF                 mov     [edx], al
.text:0040A5C1
.text:0040A5C1 loc_40A5C1:                             ; CODE XREF: .text:0040A5D6↓j
.text:0040A5C1                                         ; .text:0040A5E7↓j ...
.text:0040A5C1                 movzx   ecx, byte ptr [ebx]
.text:0040A5C4                 inc     edx
.text:0040A5C5                 inc     ebx
.text:0040A5C6                 test    cl, cl
.text:0040A5C8                 jnz     short loc_40A5B0
.text:0040A5CA                 jmp     loc_40A4A0
.text:0040A5CF ; ---------------------------------------------------------------------------
.text:0040A5CF
.text:0040A5CF loc_40A5CF:                             ; CODE XREF: .text:0040A5BD↑j
.text:0040A5CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5D2                 inc     edx
.text:0040A5D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5D6                 jmp     short loc_40A5C1
.text:0040A5D8 ; ---------------------------------------------------------------------------
.text:0040A5D8
.text:0040A5D8 loc_40A5D8:                             ; CODE XREF: .text:0040A5B9↑j
.text:0040A5D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5DB                 inc     edx
.text:0040A5DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5DF                 inc     edx
.text:0040A5E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A5E3                 inc     edx
.text:0040A5E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A5E7                 jmp     short loc_40A5C1
.text:0040A5E9 ; ---------------------------------------------------------------------------
.text:0040A5E9
.text:0040A5E9 loc_40A5E9:                             ; CODE XREF: .text:0040A5B5↑j
.text:0040A5E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A5EC                 inc     edx
.text:0040A5ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5F0                 inc     edx
.text:0040A5F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A5F4                 inc     edx
.text:0040A5F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A5F8                 jmp     short loc_40A5C1
.text:0040A5FA ; ---------------------------------------------------------------------------
.text:0040A5FA
.text:0040A5FA loc_40A5FA:                             ; CODE XREF: .text:0040A452↑j
.text:0040A5FA                                         ; .text:0040A45A↑j ...
.text:0040A5FA                 test    al, al
.text:0040A5FC                 jz      loc_40A470
.text:0040A602                 mov     [esp], edx
.text:0040A605                 mov     ebx, edx
.text:0040A607                 call    strlen
.text:0040A60C                 lea     edx, ds:1[eax*4]
.text:0040A613                 mov     [esp], edx
.text:0040A616                 call    malloc
.text:0040A61B                 mov     [esp+24h], eax
.text:0040A61F                 mov     edx, eax
.text:0040A621                 jmp     short loc_40A630
.text:0040A621 ; ---------------------------------------------------------------------------
.text:0040A623                 align 10h
.text:0040A630
.text:0040A630 loc_40A630:                             ; CODE XREF: .text:0040A621↑j
.text:0040A630                                         ; .text:0040A648↓j
.text:0040A630                 movzx   eax, byte ptr [ebx]
.text:0040A633                 cmp     al, 20h ; ' '
.text:0040A635                 jz      short loc_40A669
.text:0040A637                 cmp     al, 9
.text:0040A639                 jz      short loc_40A658
.text:0040A63B                 cmp     al, 5Ch ; '\'
.text:0040A63D                 jz      short loc_40A64F
.text:0040A63F                 mov     [edx], al
.text:0040A641
.text:0040A641 loc_40A641:                             ; CODE XREF: .text:0040A656↓j
.text:0040A641                                         ; .text:0040A667↓j ...
.text:0040A641                 movzx   ecx, byte ptr [ebx]
.text:0040A644                 inc     edx
.text:0040A645                 inc     ebx
.text:0040A646                 test    cl, cl
.text:0040A648                 jnz     short loc_40A630
.text:0040A64A                 jmp     loc_40A470
.text:0040A64F ; ---------------------------------------------------------------------------
.text:0040A64F
.text:0040A64F loc_40A64F:                             ; CODE XREF: .text:0040A63D↑j
.text:0040A64F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A652                 inc     edx
.text:0040A653                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A656                 jmp     short loc_40A641
.text:0040A658 ; ---------------------------------------------------------------------------
.text:0040A658
.text:0040A658 loc_40A658:                             ; CODE XREF: .text:0040A639↑j
.text:0040A658                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A65B                 inc     edx
.text:0040A65C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A65F                 inc     edx
.text:0040A660                 mov     byte ptr [edx], 31h ; '1'
.text:0040A663                 inc     edx
.text:0040A664                 mov     byte ptr [edx], 32h ; '2'
.text:0040A667                 jmp     short loc_40A641
.text:0040A669 ; ---------------------------------------------------------------------------
.text:0040A669
.text:0040A669 loc_40A669:                             ; CODE XREF: .text:0040A635↑j
.text:0040A669                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A66C                 inc     edx
.text:0040A66D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A670                 inc     edx
.text:0040A671                 mov     byte ptr [edx], 34h ; '4'
.text:0040A674                 inc     edx
.text:0040A675                 mov     byte ptr [edx], 30h ; '0'
.text:0040A678                 jmp     short loc_40A641
.text:0040A67A ; ---------------------------------------------------------------------------
.text:0040A67A
.text:0040A67A loc_40A67A:                             ; CODE XREF: .text:0040A422↑j
.text:0040A67A                                         ; .text:0040A42A↑j ...
.text:0040A67A                 test    al, al
.text:0040A67C                 jz      loc_40A440
.text:0040A682                 mov     [esp], edx
.text:0040A685                 mov     ebx, edx
.text:0040A687                 call    strlen
.text:0040A68C                 lea     ecx, ds:1[eax*4]
.text:0040A693                 mov     [esp], ecx
.text:0040A696                 call    malloc
.text:0040A69B                 mov     [esp+20h], eax
.text:0040A69F                 mov     edx, eax
.text:0040A6A1                 jmp     short loc_40A6B0
.text:0040A6A1 ; ---------------------------------------------------------------------------
.text:0040A6A3                 align 10h
.text:0040A6B0
.text:0040A6B0 loc_40A6B0:                             ; CODE XREF: .text:0040A6A1↑j
.text:0040A6B0                                         ; .text:0040A6C8↓j
.text:0040A6B0                 movzx   eax, byte ptr [ebx]
.text:0040A6B3                 cmp     al, 20h ; ' '
.text:0040A6B5                 jz      short loc_40A6E9
.text:0040A6B7                 cmp     al, 9
.text:0040A6B9                 jz      short loc_40A6D8
.text:0040A6BB                 cmp     al, 5Ch ; '\'
.text:0040A6BD                 jz      short loc_40A6CF
.text:0040A6BF                 mov     [edx], al
.text:0040A6C1
.text:0040A6C1 loc_40A6C1:                             ; CODE XREF: .text:0040A6D6↓j
.text:0040A6C1                                         ; .text:0040A6E7↓j ...
.text:0040A6C1                 movzx   ecx, byte ptr [ebx]
.text:0040A6C4                 inc     edx
.text:0040A6C5                 inc     ebx
.text:0040A6C6                 test    cl, cl
.text:0040A6C8                 jnz     short loc_40A6B0
.text:0040A6CA                 jmp     loc_40A440
.text:0040A6CF ; ---------------------------------------------------------------------------
.text:0040A6CF
.text:0040A6CF loc_40A6CF:                             ; CODE XREF: .text:0040A6BD↑j
.text:0040A6CF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6D2                 inc     edx
.text:0040A6D3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6D6                 jmp     short loc_40A6C1
.text:0040A6D8 ; ---------------------------------------------------------------------------
.text:0040A6D8
.text:0040A6D8 loc_40A6D8:                             ; CODE XREF: .text:0040A6B9↑j
.text:0040A6D8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6DB                 inc     edx
.text:0040A6DC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6DF                 inc     edx
.text:0040A6E0                 mov     byte ptr [edx], 31h ; '1'
.text:0040A6E3                 inc     edx
.text:0040A6E4                 mov     byte ptr [edx], 32h ; '2'
.text:0040A6E7                 jmp     short loc_40A6C1
.text:0040A6E9 ; ---------------------------------------------------------------------------
.text:0040A6E9
.text:0040A6E9 loc_40A6E9:                             ; CODE XREF: .text:0040A6B5↑j
.text:0040A6E9                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A6EC                 inc     edx
.text:0040A6ED                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6F0                 inc     edx
.text:0040A6F1                 mov     byte ptr [edx], 34h ; '4'
.text:0040A6F4                 inc     edx
.text:0040A6F5                 mov     byte ptr [edx], 30h ; '0'
.text:0040A6F8                 jmp     short loc_40A6C1
.text:0040A6F8 ; ---------------------------------------------------------------------------
.text:0040A6FA                 align 10h
.text:0040A700
.text:0040A700 ; =============== S U B R O U T I N E =======================================
.text:0040A700
.text:0040A700 ; Attributes: info_from_lumina
.text:0040A700
.text:0040A700 ; int __cdecl __addmntentstr(char *, int)
.text:0040A700 ___addmntentstr proc near               ; CODE XREF: .text:00409FCA↑p
.text:0040A700
.text:0040A700 Buffer          = dword ptr -4Ch
.text:0040A700 Format          = dword ptr -48h
.text:0040A700 var_44          = dword ptr -44h
.text:0040A700 var_40          = dword ptr -40h
.text:0040A700 var_3C          = dword ptr -3Ch
.text:0040A700 var_38          = dword ptr -38h
.text:0040A700 var_34          = dword ptr -34h
.text:0040A700 var_30          = dword ptr -30h
.text:0040A700 var_2C          = dword ptr -2Ch
.text:0040A700 var_28          = dword ptr -28h
.text:0040A700 var_24          = dword ptr -24h
.text:0040A700 Str             = dword ptr -20h
.text:0040A700 var_1C          = dword ptr -1Ch
.text:0040A700 var_18          = dword ptr -18h
.text:0040A700 arg_0           = dword ptr  4
.text:0040A700 arg_4           = dword ptr  8
.text:0040A700
.text:0040A700                 push    ebx
.text:0040A701                 sub     esp, 48h
.text:0040A704                 mov     edx, [esp+4Ch+arg_4]
.text:0040A708                 mov     ecx, [edx]
.text:0040A70A                 mov     [esp+4Ch+var_2C], ecx
.text:0040A70E                 mov     ebx, [edx+4]
.text:0040A711                 mov     [esp+4Ch+var_28], ebx
.text:0040A715                 mov     ebx, [edx+8]
.text:0040A718                 mov     [esp+4Ch+var_24], ebx
.text:0040A71C                 mov     ebx, [edx+0Ch]
.text:0040A71F                 mov     [esp+4Ch+Str], ebx
.text:0040A723                 mov     ebx, [edx+10h]
.text:0040A726                 mov     [esp+4Ch+var_1C], ebx
.text:0040A72A                 mov     ebx, [edx+14h]
.text:0040A72D                 mov     [esp+4Ch+var_18], ebx
.text:0040A731                 mov     ebx, ecx
.text:0040A733                 movzx   eax, byte ptr [ecx]
.text:0040A736                 test    al, al
.text:0040A738                 jz      loc_40AA21
.text:0040A73E                 mov     esi, esi
.text:0040A740
.text:0040A740 loc_40A740:                             ; CODE XREF: ___addmntentstr+5E↓j
.text:0040A740                 cmp     al, 20h ; ' '
.text:0040A742                 jz      loc_40A9A0
.text:0040A748                 cmp     al, 9
.text:0040A74A                 jz      loc_40A9A0
.text:0040A750                 cmp     al, 5Ch ; '\'
.text:0040A752                 jz      loc_40A9A0
.text:0040A758                 inc     ebx
.text:0040A759                 movzx   eax, byte ptr [ebx]
.text:0040A75C                 test    al, al
.text:0040A75E                 jnz     short loc_40A740
.text:0040A760
.text:0040A760 loc_40A760:                             ; CODE XREF: ___addmntentstr+2A2↓j
.text:0040A760                                         ; ___addmntentstr+2EA↓j
.text:0040A760                 mov     ebx, [esp+4Ch+var_28]
.text:0040A764                 mov     edx, ebx
.text:0040A766                 movzx   eax, byte ptr [ebx]
.text:0040A769                 test    al, al
.text:0040A76B                 jz      short loc_40A790
.text:0040A76D                 lea     esi, [esi+0]
.text:0040A770
.text:0040A770 loc_40A770:                             ; CODE XREF: ___addmntentstr+8E↓j
.text:0040A770                 cmp     al, 20h ; ' '
.text:0040A772                 jz      loc_40A91A
.text:0040A778                 cmp     al, 9
.text:0040A77A                 jz      loc_40A91A
.text:0040A780                 cmp     al, 5Ch ; '\'
.text:0040A782                 jz      loc_40A91A
.text:0040A788                 inc     ebx
.text:0040A789                 movzx   eax, byte ptr [ebx]
.text:0040A78C                 test    al, al
.text:0040A78E                 jnz     short loc_40A770
.text:0040A790
.text:0040A790 loc_40A790:                             ; CODE XREF: ___addmntentstr+6B↑j
.text:0040A790                                         ; ___addmntentstr+21C↓j ...
.text:0040A790                 mov     ebx, [esp+4Ch+var_24]
.text:0040A794                 mov     edx, ebx
.text:0040A796                 movzx   eax, byte ptr [ebx]
.text:0040A799                 test    al, al
.text:0040A79B                 jz      short loc_40A7C0
.text:0040A79D                 lea     esi, [esi+0]
.text:0040A7A0
.text:0040A7A0 loc_40A7A0:                             ; CODE XREF: ___addmntentstr+BE↓j
.text:0040A7A0                 cmp     al, 20h ; ' '
.text:0040A7A2                 jz      loc_40A89E
.text:0040A7A8                 cmp     al, 9
.text:0040A7AA                 jz      loc_40A89E
.text:0040A7B0                 cmp     al, 5Ch ; '\'
.text:0040A7B2                 jz      loc_40A89E
.text:0040A7B8                 inc     ebx
.text:0040A7B9                 movzx   eax, byte ptr [ebx]
.text:0040A7BC                 test    al, al
.text:0040A7BE                 jnz     short loc_40A7A0
.text:0040A7C0
.text:0040A7C0 loc_40A7C0:                             ; CODE XREF: ___addmntentstr+9B↑j
.text:0040A7C0                                         ; ___addmntentstr+1A0↓j ...
.text:0040A7C0                 mov     edx, [esp+4Ch+Str]
.text:0040A7C4                 mov     ebx, edx
.text:0040A7C6                 movzx   eax, byte ptr [edx]
.text:0040A7C9                 test    al, al
.text:0040A7CB                 jz      short loc_40A7E4
.text:0040A7CD                 lea     esi, [esi+0]
.text:0040A7D0
.text:0040A7D0 loc_40A7D0:                             ; CODE XREF: ___addmntentstr+E2↓j
.text:0040A7D0                 cmp     al, 20h ; ' '
.text:0040A7D2                 jz      short loc_40A82C
.text:0040A7D4                 cmp     al, 9
.text:0040A7D6                 jz      short loc_40A82C
.text:0040A7D8                 cmp     al, 5Ch ; '\'
.text:0040A7DA                 jz      short loc_40A82C
.text:0040A7DC                 inc     ebx
.text:0040A7DD                 movzx   eax, byte ptr [ebx]
.text:0040A7E0                 test    al, al
.text:0040A7E2                 jnz     short loc_40A7D0
.text:0040A7E4
.text:0040A7E4 loc_40A7E4:                             ; CODE XREF: ___addmntentstr+CB↑j
.text:0040A7E4                                         ; ___addmntentstr+12E↓j ...
.text:0040A7E4                 mov     [esp+4Ch+var_38], edx
.text:0040A7E8                 mov     ebx, [esp+4Ch+var_18]
.text:0040A7EC                 mov     ecx, [esp+4Ch+var_1C]
.text:0040A7F0                 mov     [esp+4Ch+Format], offset aSSSSDD ; "%s %s %s %s %d %d\n"
.text:0040A7F8                 mov     edx, [esp+4Ch+var_2C]
.text:0040A7FC                 mov     [esp+4Ch+var_30], ebx
.text:0040A800                 mov     ebx, [esp+4Ch+var_24]
.text:0040A804                 mov     [esp+4Ch+var_34], ecx
.text:0040A808                 mov     ecx, [esp+4Ch+var_28]
.text:0040A80C                 mov     [esp+4Ch+var_3C], ebx
.text:0040A810                 mov     ebx, [esp+4Ch+arg_0]
.text:0040A814                 mov     [esp+4Ch+var_40], ecx
.text:0040A818                 mov     [esp+4Ch+var_44], edx
.text:0040A81C                 mov     [esp+4Ch+Buffer], ebx ; Buffer
.text:0040A81F                 call    sprintf
.text:0040A824                 add     esp, 48h
.text:0040A827                 shr     eax, 1Fh
.text:0040A82A                 pop     ebx
.text:0040A82B                 retn
.text:0040A82C ; ---------------------------------------------------------------------------
.text:0040A82C
.text:0040A82C loc_40A82C:                             ; CODE XREF: ___addmntentstr+D2↑j
.text:0040A82C                                         ; ___addmntentstr+D6↑j ...
.text:0040A82C                 test    al, al
.text:0040A82E                 jz      short loc_40A7E4
.text:0040A830                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A833                 mov     ebx, edx
.text:0040A835                 call    strlen
.text:0040A83A                 lea     edx, ds:1[eax*4]
.text:0040A841                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A844                 call    malloc
.text:0040A849                 mov     [esp+4Ch+Str], eax
.text:0040A84D                 mov     edx, eax
.text:0040A84F                 nop
.text:0040A850
.text:0040A850 loc_40A850:                             ; CODE XREF: ___addmntentstr+168↓j
.text:0040A850                 movzx   eax, byte ptr [ebx]
.text:0040A853                 cmp     al, 20h ; ' '
.text:0040A855                 jz      short loc_40A88D
.text:0040A857                 cmp     al, 9
.text:0040A859                 jz      short loc_40A87C
.text:0040A85B                 cmp     al, 5Ch ; '\'
.text:0040A85D                 jz      short loc_40A873
.text:0040A85F                 mov     [edx], al
.text:0040A861
.text:0040A861 loc_40A861:                             ; CODE XREF: ___addmntentstr+17A↓j
.text:0040A861                                         ; ___addmntentstr+18B↓j ...
.text:0040A861                 movzx   ecx, byte ptr [ebx]
.text:0040A864                 inc     edx
.text:0040A865                 inc     ebx
.text:0040A866                 test    cl, cl
.text:0040A868                 jnz     short loc_40A850
.text:0040A86A                 mov     edx, [esp+4Ch+Str]
.text:0040A86E                 jmp     loc_40A7E4
.text:0040A873 ; ---------------------------------------------------------------------------
.text:0040A873
.text:0040A873 loc_40A873:                             ; CODE XREF: ___addmntentstr+15D↑j
.text:0040A873                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A876                 inc     edx
.text:0040A877                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A87A                 jmp     short loc_40A861
.text:0040A87C ; ---------------------------------------------------------------------------
.text:0040A87C
.text:0040A87C loc_40A87C:                             ; CODE XREF: ___addmntentstr+159↑j
.text:0040A87C                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A87F                 inc     edx
.text:0040A880                 mov     byte ptr [edx], 30h ; '0'
.text:0040A883                 inc     edx
.text:0040A884                 mov     byte ptr [edx], 31h ; '1'
.text:0040A887                 inc     edx
.text:0040A888                 mov     byte ptr [edx], 32h ; '2'
.text:0040A88B                 jmp     short loc_40A861
.text:0040A88D ; ---------------------------------------------------------------------------
.text:0040A88D
.text:0040A88D loc_40A88D:                             ; CODE XREF: ___addmntentstr+155↑j
.text:0040A88D                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A890                 inc     edx
.text:0040A891                 mov     byte ptr [edx], 30h ; '0'
.text:0040A894                 inc     edx
.text:0040A895                 mov     byte ptr [edx], 34h ; '4'
.text:0040A898                 inc     edx
.text:0040A899                 mov     byte ptr [edx], 30h ; '0'
.text:0040A89C                 jmp     short loc_40A861
.text:0040A89E ; ---------------------------------------------------------------------------
.text:0040A89E
.text:0040A89E loc_40A89E:                             ; CODE XREF: ___addmntentstr+A2↑j
.text:0040A89E                                         ; ___addmntentstr+AA↑j ...
.text:0040A89E                 test    al, al
.text:0040A8A0                 jz      loc_40A7C0
.text:0040A8A6                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A8A9                 mov     ebx, edx
.text:0040A8AB                 call    strlen
.text:0040A8B0                 lea     edx, ds:1[eax*4]
.text:0040A8B7                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A8BA                 call    malloc
.text:0040A8BF                 mov     [esp+4Ch+var_24], eax
.text:0040A8C3                 mov     edx, eax
.text:0040A8C5                 lea     esi, [esi+0]
.text:0040A8C9                 lea     edi, [edi+0]
.text:0040A8D0
.text:0040A8D0 loc_40A8D0:                             ; CODE XREF: ___addmntentstr+1E8↓j
.text:0040A8D0                 movzx   eax, byte ptr [ebx]
.text:0040A8D3                 cmp     al, 20h ; ' '
.text:0040A8D5                 jz      short loc_40A909
.text:0040A8D7                 cmp     al, 9
.text:0040A8D9                 jz      short loc_40A8F8
.text:0040A8DB                 cmp     al, 5Ch ; '\'
.text:0040A8DD                 jz      short loc_40A8EF
.text:0040A8DF                 mov     [edx], al
.text:0040A8E1
.text:0040A8E1 loc_40A8E1:                             ; CODE XREF: ___addmntentstr+1F6↓j
.text:0040A8E1                                         ; ___addmntentstr+207↓j ...
.text:0040A8E1                 movzx   ecx, byte ptr [ebx]
.text:0040A8E4                 inc     edx
.text:0040A8E5                 inc     ebx
.text:0040A8E6                 test    cl, cl
.text:0040A8E8                 jnz     short loc_40A8D0
.text:0040A8EA                 jmp     loc_40A7C0
.text:0040A8EF ; ---------------------------------------------------------------------------
.text:0040A8EF
.text:0040A8EF loc_40A8EF:                             ; CODE XREF: ___addmntentstr+1DD↑j
.text:0040A8EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8F2                 inc     edx
.text:0040A8F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8F6                 jmp     short loc_40A8E1
.text:0040A8F8 ; ---------------------------------------------------------------------------
.text:0040A8F8
.text:0040A8F8 loc_40A8F8:                             ; CODE XREF: ___addmntentstr+1D9↑j
.text:0040A8F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A8FB                 inc     edx
.text:0040A8FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A8FF                 inc     edx
.text:0040A900                 mov     byte ptr [edx], 31h ; '1'
.text:0040A903                 inc     edx
.text:0040A904                 mov     byte ptr [edx], 32h ; '2'
.text:0040A907                 jmp     short loc_40A8E1
.text:0040A909 ; ---------------------------------------------------------------------------
.text:0040A909
.text:0040A909 loc_40A909:                             ; CODE XREF: ___addmntentstr+1D5↑j
.text:0040A909                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A90C                 inc     edx
.text:0040A90D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A910                 inc     edx
.text:0040A911                 mov     byte ptr [edx], 34h ; '4'
.text:0040A914                 inc     edx
.text:0040A915                 mov     byte ptr [edx], 30h ; '0'
.text:0040A918                 jmp     short loc_40A8E1
.text:0040A91A ; ---------------------------------------------------------------------------
.text:0040A91A
.text:0040A91A loc_40A91A:                             ; CODE XREF: ___addmntentstr+72↑j
.text:0040A91A                                         ; ___addmntentstr+7A↑j ...
.text:0040A91A                 test    al, al
.text:0040A91C                 jz      loc_40A790
.text:0040A922                 mov     [esp+4Ch+Buffer], edx ; Str
.text:0040A925                 mov     ebx, edx
.text:0040A927                 call    strlen
.text:0040A92C                 lea     edx, ds:1[eax*4]
.text:0040A933                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A936                 call    malloc
.text:0040A93B                 mov     [esp+4Ch+var_28], eax
.text:0040A93F                 mov     edx, eax
.text:0040A941                 jmp     short loc_40A950
.text:0040A941 ; ---------------------------------------------------------------------------
.text:0040A943                 align 10h
.text:0040A950
.text:0040A950 loc_40A950:                             ; CODE XREF: ___addmntentstr+241↑j
.text:0040A950                                         ; ___addmntentstr+268↓j
.text:0040A950                 movzx   eax, byte ptr [ebx]
.text:0040A953                 cmp     al, 20h ; ' '
.text:0040A955                 jz      short loc_40A989
.text:0040A957                 cmp     al, 9
.text:0040A959                 jz      short loc_40A978
.text:0040A95B                 cmp     al, 5Ch ; '\'
.text:0040A95D                 jz      short loc_40A96F
.text:0040A95F                 mov     [edx], al
.text:0040A961
.text:0040A961 loc_40A961:                             ; CODE XREF: ___addmntentstr+276↓j
.text:0040A961                                         ; ___addmntentstr+287↓j ...
.text:0040A961                 movzx   ecx, byte ptr [ebx]
.text:0040A964                 inc     edx
.text:0040A965                 inc     ebx
.text:0040A966                 test    cl, cl
.text:0040A968                 jnz     short loc_40A950
.text:0040A96A                 jmp     loc_40A790
.text:0040A96F ; ---------------------------------------------------------------------------
.text:0040A96F
.text:0040A96F loc_40A96F:                             ; CODE XREF: ___addmntentstr+25D↑j
.text:0040A96F                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A972                 inc     edx
.text:0040A973                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A976                 jmp     short loc_40A961
.text:0040A978 ; ---------------------------------------------------------------------------
.text:0040A978
.text:0040A978 loc_40A978:                             ; CODE XREF: ___addmntentstr+259↑j
.text:0040A978                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A97B                 inc     edx
.text:0040A97C                 mov     byte ptr [edx], 30h ; '0'
.text:0040A97F                 inc     edx
.text:0040A980                 mov     byte ptr [edx], 31h ; '1'
.text:0040A983                 inc     edx
.text:0040A984                 mov     byte ptr [edx], 32h ; '2'
.text:0040A987                 jmp     short loc_40A961
.text:0040A989 ; ---------------------------------------------------------------------------
.text:0040A989
.text:0040A989 loc_40A989:                             ; CODE XREF: ___addmntentstr+255↑j
.text:0040A989                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A98C                 inc     edx
.text:0040A98D                 mov     byte ptr [edx], 30h ; '0'
.text:0040A990                 inc     edx
.text:0040A991                 mov     byte ptr [edx], 34h ; '4'
.text:0040A994                 inc     edx
.text:0040A995                 mov     byte ptr [edx], 30h ; '0'
.text:0040A998                 jmp     short loc_40A961
.text:0040A998 ; ---------------------------------------------------------------------------
.text:0040A99A                 align 10h
.text:0040A9A0
.text:0040A9A0 loc_40A9A0:                             ; CODE XREF: ___addmntentstr+42↑j
.text:0040A9A0                                         ; ___addmntentstr+4A↑j ...
.text:0040A9A0                 test    al, al
.text:0040A9A2                 jz      loc_40A760
.text:0040A9A8                 mov     ebx, [esp+4Ch+var_2C]
.text:0040A9AC                 mov     [esp+4Ch+Buffer], ebx ; Str
.text:0040A9AF                 call    strlen
.text:0040A9B4                 lea     edx, ds:1[eax*4]
.text:0040A9BB                 mov     [esp+4Ch+Buffer], edx ; Size
.text:0040A9BE                 call    malloc
.text:0040A9C3                 mov     [esp+4Ch+var_2C], eax
.text:0040A9C7                 mov     edx, eax
.text:0040A9C9                 lea     esi, [esi+0]
.text:0040A9D0
.text:0040A9D0 loc_40A9D0:                             ; CODE XREF: ___addmntentstr+2E8↓j
.text:0040A9D0                 movzx   eax, byte ptr [ebx]
.text:0040A9D3                 cmp     al, 20h ; ' '
.text:0040A9D5                 jz      short loc_40AA10
.text:0040A9D7                 cmp     al, 9
.text:0040A9D9                 jz      short loc_40A9F8
.text:0040A9DB                 cmp     al, 5Ch ; '\'
.text:0040A9DD                 jz      short loc_40A9EF
.text:0040A9DF                 mov     [edx], al
.text:0040A9E1
.text:0040A9E1 loc_40A9E1:                             ; CODE XREF: ___addmntentstr+2F6↓j
.text:0040A9E1                                         ; ___addmntentstr+307↓j ...
.text:0040A9E1                 movzx   ecx, byte ptr [ebx]
.text:0040A9E4                 inc     edx
.text:0040A9E5                 inc     ebx
.text:0040A9E6                 test    cl, cl
.text:0040A9E8                 jnz     short loc_40A9D0
.text:0040A9EA                 jmp     loc_40A760
.text:0040A9EF ; ---------------------------------------------------------------------------
.text:0040A9EF
.text:0040A9EF loc_40A9EF:                             ; CODE XREF: ___addmntentstr+2DD↑j
.text:0040A9EF                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9F2                 inc     edx
.text:0040A9F3                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9F6                 jmp     short loc_40A9E1
.text:0040A9F8 ; ---------------------------------------------------------------------------
.text:0040A9F8
.text:0040A9F8 loc_40A9F8:                             ; CODE XREF: ___addmntentstr+2D9↑j
.text:0040A9F8                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040A9FB                 inc     edx
.text:0040A9FC                 mov     byte ptr [edx], 30h ; '0'
.text:0040A9FF                 inc     edx
.text:0040AA00                 mov     byte ptr [edx], 31h ; '1'
.text:0040AA03                 inc     edx
.text:0040AA04                 mov     byte ptr [edx], 32h ; '2'
.text:0040AA07                 jmp     short loc_40A9E1
.text:0040AA07 ; ---------------------------------------------------------------------------
.text:0040AA09                 align 10h
.text:0040AA10
.text:0040AA10 loc_40AA10:                             ; CODE XREF: ___addmntentstr+2D5↑j
.text:0040AA10                 mov     byte ptr [edx], 5Ch ; '\'
.text:0040AA13                 inc     edx
.text:0040AA14                 mov     byte ptr [edx], 30h ; '0'
.text:0040AA17                 inc     edx
.text:0040AA18                 mov     byte ptr [edx], 34h ; '4'
.text:0040AA1B                 inc     edx
.text:0040AA1C                 mov     byte ptr [edx], 30h ; '0'
.text:0040AA1F                 jmp     short loc_40A9E1
.text:0040AA21 ; ---------------------------------------------------------------------------
.text:0040AA21
.text:0040AA21 loc_40AA21:                             ; CODE XREF: ___addmntentstr+38↑j
.text:0040AA21                 movzx   eax, byte ptr [ecx]
.text:0040AA24                 jmp     loc_40A9A0
.text:0040AA24 ___addmntentstr endp
.text:0040AA24
.text:0040AA24 ; ---------------------------------------------------------------------------
.text:0040AA29                 align 10h
.text:0040AA30
.text:0040AA30 ; =============== S U B R O U T I N E =======================================
.text:0040AA30
.text:0040AA30
.text:0040AA30 sub_40AA30      proc near               ; CODE XREF: sub_4082C0+99↑p
.text:0040AA30
.text:0040AA30 nBufferLength   = dword ptr -1Ch
.text:0040AA30 lpBuffer        = dword ptr -18h
.text:0040AA30 dwBytes         = dword ptr -14h
.text:0040AA30 var_8           = dword ptr -8
.text:0040AA30 var_4           = dword ptr -4
.text:0040AA30
.text:0040AA30                 sub     esp, 1Ch
.text:0040AA33                 mov     [esp+1Ch+var_8], ebx
.text:0040AA37                 mov     [esp+1Ch+var_4], esi
.text:0040AA3B                 mov     [esp+1Ch+lpBuffer], 0 ; lpBuffer
.text:0040AA43                 mov     [esp+1Ch+nBufferLength], 0 ; nBufferLength
.text:0040AA4A                 call    GetLogicalDriveStringsA
.text:0040AA4F                 sub     esp, 8
.text:0040AA52                 mov     ebx, eax
.text:0040AA54                 call    GetProcessHeap
.text:0040AA59                 mov     [esp+1Ch+nBufferLength], eax ; hHeap
.text:0040AA5C                 mov     [esp+1Ch+dwBytes], ebx ; dwBytes
.text:0040AA60                 mov     [esp+1Ch+lpBuffer], 0 ; dwFlags
.text:0040AA68                 call    HeapAlloc
.text:0040AA6D                 sub     esp, 0Ch
.text:0040AA70                 mov     esi, eax
.text:0040AA72                 mov     [esp+1Ch+nBufferLength], ebx ; nBufferLength
.text:0040AA75                 mov     [esp+1Ch+lpBuffer], eax ; lpBuffer
.text:0040AA79                 call    GetLogicalDriveStringsA
.text:0040AA7E                 sub     esp, 8
.text:0040AA81                 mov     eax, esi
.text:0040AA83                 mov     ebx, [esp+1Ch+var_8]
.text:0040AA87                 mov     esi, [esp+1Ch+var_4]
.text:0040AA8B                 add     esp, 1Ch
.text:0040AA8E                 retn
.text:0040AA8E sub_40AA30      endp
.text:0040AA8E
.text:0040AA8F
.text:0040AA8F ; =============== S U B R O U T I N E =======================================
.text:0040AA8F
.text:0040AA8F
.text:0040AA8F ; int __cdecl sub_40AA8F(char *, char *)
.text:0040AA8F sub_40AA8F      proc near               ; DATA XREF: sub_40AA8F:loc_40AB1D↓o
.text:0040AA8F
.text:0040AA8F FileName        = dword ptr -1Ch
.text:0040AA8F Mode            = dword ptr -18h
.text:0040AA8F dwBytes         = dword ptr -14h
.text:0040AA8F arg_0           = dword ptr  4
.text:0040AA8F arg_4           = dword ptr  8
.text:0040AA8F
.text:0040AA8F                 ja      short $+2
.text:0040AA91
.text:0040AA91 loc_40AA91:                             ; CODE XREF: sub_40AA8F↑j
.text:0040AA91                 jmp     short loc_40AAA0
.text:0040AA91 ; ---------------------------------------------------------------------------
.text:0040AA93                 align 10h
.text:0040AAA0
.text:0040AAA0 loc_40AAA0:                             ; CODE XREF: sub_40AA8F:loc_40AA91↑j
.text:0040AAA0                 push    edi
.text:0040AAA1                 push    esi
.text:0040AAA2                 push    ebx
.text:0040AAA3                 sub     esp, 10h
.text:0040AAA6                 mov     ebx, [esp+1Ch+arg_0]
.text:0040AAAA                 mov     edx, [esp+1Ch+arg_4]
.text:0040AAAE                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AAB1                 mov     [esp+1Ch+Mode], edx ; Mode
.text:0040AAB5                 call    fopen
.text:0040AABA                 test    eax, eax
.text:0040AABC                 mov     edi, eax
.text:0040AABE                 jz      short loc_40AB1D
.text:0040AAC0
.text:0040AAC0 loc_40AAC0:                             ; CODE XREF: sub_40AA8F+A2↓j
.text:0040AAC0                                         ; sub_40AA8F+AB↓j
.text:0040AAC0                 mov     [esp+1Ch+Mode], 0 ; lpBuffer
.text:0040AAC8                 mov     [esp+1Ch+FileName], 0 ; nBufferLength
.text:0040AACF                 call    GetLogicalDriveStringsA
.text:0040AAD4                 sub     esp, 8
.text:0040AAD7                 mov     esi, eax
.text:0040AAD9                 call    GetProcessHeap
.text:0040AADE                 mov     [esp+1Ch+FileName], eax ; hHeap
.text:0040AAE1                 mov     [esp+1Ch+dwBytes], esi ; dwBytes
.text:0040AAE5                 mov     [esp+1Ch+Mode], 0 ; dwFlags
.text:0040AAED                 call    HeapAlloc
.text:0040AAF2                 sub     esp, 0Ch
.text:0040AAF5                 mov     ebx, eax
.text:0040AAF7                 mov     [esp+1Ch+FileName], esi ; nBufferLength
.text:0040AAFA                 mov     [esp+1Ch+Mode], eax ; lpBuffer
.text:0040AAFE                 call    GetLogicalDriveStringsA
.text:0040AB03                 mov     off_40E0B4, ebx ; "notset"
.text:0040AB09                 sub     esp, 8
.text:0040AB0C                 xor     eax, eax
.text:0040AB0E                 test    ebx, ebx
.text:0040AB10                 setz    al
.text:0040AB13                 add     esp, 10h
.text:0040AB16                 pop     ebx
.text:0040AB17                 dec     eax
.text:0040AB18                 and     eax, edi
.text:0040AB1A                 pop     esi
.text:0040AB1B                 pop     edi
.text:0040AB1C                 retn
.text:0040AB1D ; ---------------------------------------------------------------------------
.text:0040AB1D
.text:0040AB1D loc_40AB1D:                             ; CODE XREF: sub_40AA8F+2F↑j
.text:0040AB1D                 mov     [esp+1Ch+Mode], offset sub_40AA8F ; Mode
.text:0040AB25                 mov     [esp+1Ch+FileName], ebx ; FileName
.text:0040AB28                 call    fopen
.text:0040AB2D                 test    eax, eax
.text:0040AB2F                 mov     edi, eax
.text:0040AB31                 jnz     short loc_40AAC0
.text:0040AB33                 call    sub_40AD20
.text:0040AB38                 mov     edi, eax
.text:0040AB3A                 jmp     short loc_40AAC0
.text:0040AB3A sub_40AA8F      endp
.text:0040AB3A
.text:0040AB3A ; ---------------------------------------------------------------------------
.text:0040AB3C                 align 10h
.text:0040AB40                 sub     esp, 0Ch
.text:0040AB43                 mov     eax, [esp+10h]
.text:0040AB47                 test    eax, eax
.text:0040AB49                 jz      short loc_40AB53
.text:0040AB4B                 mov     [esp], eax
.text:0040AB4E                 call    fclose
.text:0040AB53
.text:0040AB53 loc_40AB53:                             ; CODE XREF: .text:0040AB49↑j
.text:0040AB53                 call    GetProcessHeap
.text:0040AB58                 mov     [esp], eax
.text:0040AB5B                 mov     ecx, off_40E0B4 ; "notset"
.text:0040AB61                 mov     dword ptr [esp+4], 0
.text:0040AB69                 mov     [esp+8], ecx
.text:0040AB6D                 call    HeapFree
.text:0040AB72                 mov     edx, off_40E0B0 ; "notset"
.text:0040AB78                 sub     esp, 0Ch
.text:0040AB7B                 mov     eax, 1
.text:0040AB80                 mov     off_40E0B4, edx ; "notset"
.text:0040AB86                 add     esp, 0Ch
.text:0040AB89                 retn
.text:0040AB89 ; ---------------------------------------------------------------------------
.text:0040AB8A                 align 10h
.text:0040AB90                 push    edi
.text:0040AB91                 push    esi
.text:0040AB92                 push    ebx
.text:0040AB93                 sub     esp, 10h
.text:0040AB96                 mov     edi, [esp+24h]
.text:0040AB9A                 mov     [esp], edi
.text:0040AB9D                 call    strlen
.text:0040ABA2                 mov     edx, [esp+20h]
.text:0040ABA6                 mov     esi, eax
.text:0040ABA8                 mov     ebx, [edx+0Ch]
.text:0040ABAB                 nop
.text:0040ABAC                 lea     esi, [esi+0]
.text:0040ABB0
.text:0040ABB0 loc_40ABB0:                             ; CODE XREF: .text:0040ABE1↓j
.text:0040ABB0                 mov     [esp+4], edi
.text:0040ABB4                 mov     [esp], ebx
.text:0040ABB7                 call    strstr
.text:0040ABBC                 test    eax, eax
.text:0040ABBE                 jz      short loc_40ABE3
.text:0040ABC0                 cmp     eax, ebx
.text:0040ABC2                 jz      short loc_40ABE5
.text:0040ABC4                 cmp     byte ptr [eax-1], 2Ch ; ','
.text:0040ABC8                 jz      short loc_40ABF0
.text:0040ABCA
.text:0040ABCA loc_40ABCA:                             ; CODE XREF: .text:0040AC00↓j
.text:0040ABCA                 mov     [esp], ebx
.text:0040ABCD                 mov     dword ptr [esp+4], 2Ch ; ','
.text:0040ABD5                 call    strchr
.text:0040ABDA                 test    eax, eax
.text:0040ABDC                 mov     ebx, eax
.text:0040ABDE                 jz      short loc_40ABE3
.text:0040ABE0                 inc     ebx
.text:0040ABE1                 jmp     short loc_40ABB0
.text:0040ABE3 ; ---------------------------------------------------------------------------
.text:0040ABE3
.text:0040ABE3 loc_40ABE3:                             ; CODE XREF: .text:0040ABBE↑j
.text:0040ABE3                                         ; .text:0040ABDE↑j
.text:0040ABE3                 xor     eax, eax
.text:0040ABE5
.text:0040ABE5 loc_40ABE5:                             ; CODE XREF: .text:0040ABC2↑j
.text:0040ABE5                                         ; .text:0040ABF6↓j ...
.text:0040ABE5                 add     esp, 10h
.text:0040ABE8                 pop     ebx
.text:0040ABE9                 pop     esi
.text:0040ABEA                 pop     edi
.text:0040ABEB                 retn
.text:0040ABEB ; ---------------------------------------------------------------------------
.text:0040ABEC                 align 10h
.text:0040ABF0
.text:0040ABF0 loc_40ABF0:                             ; CODE XREF: .text:0040ABC8↑j
.text:0040ABF0                 movzx   edx, byte ptr [esi+eax]
.text:0040ABF4                 test    dl, dl
.text:0040ABF6                 jz      short loc_40ABE5
.text:0040ABF8                 cmp     dl, 3Dh ; '='
.text:0040ABFB                 jz      short loc_40ABE5
.text:0040ABFD                 cmp     dl, 2Ch ; ','
.text:0040AC00                 jnz     short loc_40ABCA
.text:0040AC02                 jmp     short loc_40ABE5
.text:0040AC02 ; ---------------------------------------------------------------------------
.text:0040AC04                 align 10h
.text:0040AC10
.text:0040AC10 ; =============== S U B R O U T I N E =======================================
.text:0040AC10
.text:0040AC10 ; Attributes: noreturn
.text:0040AC10
.text:0040AC10 sub_40AC10      proc near               ; CODE XREF: .text:0040A3F9↑p
.text:0040AC10                                         ; sub_40AC10↓j
.text:0040AC10                 jmp     short sub_40AC10
.text:0040AC10 sub_40AC10      endp
.text:0040AC10
.text:0040AC10 ; ---------------------------------------------------------------------------
.text:0040AC12                 align 10h
.text:0040AC20
.text:0040AC20 ; =============== S U B R O U T I N E =======================================
.text:0040AC20
.text:0040AC20
.text:0040AC20 sub_40AC20      proc near               ; CODE XREF: .text:0040A155↑p
.text:0040AC20
.text:0040AC20 FileHandle      = dword ptr -1Ch
.text:0040AC20 dwFileOffsetLow = dword ptr -18h
.text:0040AC20 dwFileOffsetHigh= dword ptr -14h
.text:0040AC20 nNumberOfBytesToUnlockLow= dword ptr -10h
.text:0040AC20 nNumberOfBytesToUnlockHigh= dword ptr -0Ch
.text:0040AC20 var_8           = dword ptr -8
.text:0040AC20 var_4           = dword ptr -4
.text:0040AC20 arg_0           = dword ptr  4
.text:0040AC20
.text:0040AC20                 sub     esp, 1Ch
.text:0040AC23                 mov     edx, [esp+1Ch+arg_0]
.text:0040AC27                 mov     [esp+1Ch+var_4], esi
.text:0040AC2B                 mov     [esp+1Ch+var_8], ebx
.text:0040AC2F                 mov     ebx, [edx+10h]
.text:0040AC32                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AC35                 call    _get_osfhandle
.text:0040AC3A                 mov     [esp+1Ch+FileHandle], ebx ; FileHandle
.text:0040AC3D                 mov     esi, eax
.text:0040AC3F                 call    _filelengthi64
.text:0040AC44                 mov     [esp+1Ch+nNumberOfBytesToUnlockLow], eax ; nNumberOfBytesToUnlockLow
.text:0040AC48                 cdq
.text:0040AC49                 mov     [esp+1Ch+FileHandle], esi ; hFile
.text:0040AC4C                 mov     [esp+1Ch+nNumberOfBytesToUnlockHigh], edx ; nNumberOfBytesToUnlockHigh
.text:0040AC50                 mov     [esp+1Ch+dwFileOffsetHigh], 0 ; dwFileOffsetHigh
.text:0040AC58                 mov     [esp+1Ch+dwFileOffsetLow], 0 ; dwFileOffsetLow
.text:0040AC60                 call    UnlockFile
.text:0040AC65                 sub     esp, 14h
.text:0040AC68                 mov     ebx, [esp+1Ch+var_8]
.text:0040AC6C                 mov     esi, [esp+1Ch+var_4]
.text:0040AC70                 add     esp, 1Ch
.text:0040AC73                 retn
.text:0040AC73 sub_40AC20      endp
.text:0040AC73
.text:0040AC73 ; ---------------------------------------------------------------------------
.text:0040AC74                 align 10h
.text:0040AC80
.text:0040AC80 ; =============== S U B R O U T I N E =======================================
.text:0040AC80
.text:0040AC80
.text:0040AC80 ; int __cdecl sub_40AC80(int, char *Control)
.text:0040AC80 sub_40AC80      proc near               ; CODE XREF: .text:0040A016↑p
.text:0040AC80                                         ; .text:0040A066↑p ...
.text:0040AC80
.text:0040AC80 Str             = dword ptr -1Ch
.text:0040AC80 Val             = dword ptr -18h
.text:0040AC80 var_8           = dword ptr -8
.text:0040AC80 var_4           = dword ptr -4
.text:0040AC80 arg_0           = dword ptr  4
.text:0040AC80 Control         = dword ptr  8
.text:0040AC80
.text:0040AC80                 sub     esp, 1Ch
.text:0040AC83                 xor     eax, eax
.text:0040AC85                 mov     edx, [esp+1Ch+Control]
.text:0040AC89                 mov     [esp+1Ch+var_4], esi
.text:0040AC8D                 mov     esi, [esp+1Ch+arg_0]
.text:0040AC91                 mov     [esp+1Ch+var_8], ebx
.text:0040AC95                 mov     ebx, [esi]
.text:0040AC97                 test    ebx, ebx
.text:0040AC99                 jz      short loc_40ACC8
.text:0040AC9B                 movzx   eax, byte ptr [edx]
.text:0040AC9E                 test    al, al
.text:0040ACA0                 jz      short loc_40ACC0
.text:0040ACA2                 cmp     byte ptr [edx+1], 0
.text:0040ACA6                 jnz     short loc_40AD00
.text:0040ACA8                 movzx   ecx, byte ptr [ebx]
.text:0040ACAB                 mov     edx, ebx
.text:0040ACAD                 cmp     cl, al
.text:0040ACAF                 jz      short loc_40ACF2
.text:0040ACB1                 test    cl, cl
.text:0040ACB3                 jnz     short loc_40ACD4
.text:0040ACB5                 lea     esi, [esi+0]
.text:0040ACB9                 lea     edi, [edi+0]
.text:0040ACC0
.text:0040ACC0 loc_40ACC0:                             ; CODE XREF: sub_40AC80+20↑j
.text:0040ACC0                                         ; sub_40AC80+74↓j
.text:0040ACC0                 mov     dword ptr [esi], 0
.text:0040ACC6
.text:0040ACC6 loc_40ACC6:                             ; CODE XREF: sub_40AC80+7C↓j
.text:0040ACC6                 mov     eax, ebx
.text:0040ACC8
.text:0040ACC8 loc_40ACC8:                             ; CODE XREF: sub_40AC80+19↑j
.text:0040ACC8                 mov     ebx, [esp+1Ch+var_8]
.text:0040ACCC                 mov     esi, [esp+1Ch+var_4]
.text:0040ACD0                 add     esp, 1Ch
.text:0040ACD3                 retn
.text:0040ACD4 ; ---------------------------------------------------------------------------
.text:0040ACD4
.text:0040ACD4 loc_40ACD4:                             ; CODE XREF: sub_40AC80+33↑j
.text:0040ACD4                 movsx   edx, al
.text:0040ACD7                 mov     [esp+1Ch+Val], edx ; Val
.text:0040ACDB                 lea     edx, [ebx+1]
.text:0040ACDE                 mov     [esp+1Ch+Str], edx ; Str
.text:0040ACE1                 call    strchr
.text:0040ACE6                 lea     esi, [esi+0]
.text:0040ACE9                 lea     edi, [edi+0]
.text:0040ACF0
.text:0040ACF0 loc_40ACF0:                             ; CODE XREF: sub_40AC80+8C↓j
.text:0040ACF0                 mov     edx, eax
.text:0040ACF2
.text:0040ACF2 loc_40ACF2:                             ; CODE XREF: sub_40AC80+2F↑j
.text:0040ACF2                 test    edx, edx
.text:0040ACF4                 jz      short loc_40ACC0
.text:0040ACF6                 mov     byte ptr [edx], 0
.text:0040ACF9                 inc     edx
.text:0040ACFA                 mov     [esi], edx
.text:0040ACFC                 jmp     short loc_40ACC6
.text:0040ACFC ; ---------------------------------------------------------------------------
.text:0040ACFE                 align 10h
.text:0040AD00
.text:0040AD00 loc_40AD00:                             ; CODE XREF: sub_40AC80+26↑j
.text:0040AD00                 mov     [esp+1Ch+Val], edx ; Control
.text:0040AD04                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040AD07                 call    strpbrk
.text:0040AD0C                 jmp     short loc_40ACF0
.text:0040AD0C sub_40AC80      endp
.text:0040AD0C
.text:0040AD0C ; ---------------------------------------------------------------------------
.text:0040AD0E                 align 10h
.text:0040AD10 ; const char aTmpf[]
.text:0040AD10 aTmpf           db 'tmpf',0             ; DATA XREF: sub_40AD20+20↓o
.text:0040AD15 ; const char aWBd[]
.text:0040AD15 aWBd            db 'w+bD',0             ; DATA XREF: sub_40AD20+5E↓o
.text:0040AD1A                 align 10h
.text:0040AD20
.text:0040AD20 ; =============== S U B R O U T I N E =======================================
.text:0040AD20
.text:0040AD20
.text:0040AD20 sub_40AD20      proc near               ; CODE XREF: sub_40AA8F+A4↑p
.text:0040AD20
.text:0040AD20 FileHandle      = dword ptr -13Ch
.text:0040AD20 Format          = dword ptr -138h
.text:0040AD20 var_134         = dword ptr -134h
.text:0040AD20 var_130         = dword ptr -130h
.text:0040AD20 var_12C         = dword ptr -12Ch
.text:0040AD20 Buffer          = byte ptr -11Ch
.text:0040AD20 var_8           = dword ptr -8
.text:0040AD20 var_4           = dword ptr -4
.text:0040AD20
.text:0040AD20                 sub     esp, 13Ch
.text:0040AD26                 mov     [esp+13Ch+var_8], ebx
.text:0040AD2D                 lea     ebx, [esp+13Ch+Buffer]
.text:0040AD31                 mov     [esp+13Ch+var_4], esi
.text:0040AD38                 mov     [esp+13Ch+var_12C], 0 ; int
.text:0040AD40                 mov     [esp+13Ch+var_130], offset aTmpf ; "tmpf"
.text:0040AD48                 mov     [esp+13Ch+var_134], 0 ; char *
.text:0040AD50                 mov     [esp+13Ch+Format], 104h ; int
.text:0040AD58                 mov     [esp+13Ch+FileHandle], ebx ; Buffer
.text:0040AD5B                 call    sub_40ADF0
.text:0040AD60                 xor     edx, edx
.text:0040AD62                 test    eax, eax
.text:0040AD64                 jnz     short loc_40AD96
.text:0040AD66                 mov     [esp+13Ch+FileHandle], ebx ; FileName
.text:0040AD69                 mov     [esp+13Ch+Format], 0 ; int
.text:0040AD71                 call    sub_40B170
.text:0040AD76                 xor     edx, edx
.text:0040AD78                 mov     ebx, eax
.text:0040AD7A                 test    eax, eax
.text:0040AD7C                 js      short loc_40AD96
.text:0040AD7E                 mov     [esp+13Ch+Format], offset aWBd ; "w+bD"
.text:0040AD86                 mov     [esp+13Ch+FileHandle], eax ; FileHandle
.text:0040AD89                 call    _fdopen
.text:0040AD8E                 test    eax, eax
.text:0040AD90                 mov     esi, eax
.text:0040AD92                 jz      short loc_40ADAD
.text:0040AD94
.text:0040AD94 loc_40AD94:                             ; CODE XREF: sub_40AD20+95↓j
.text:0040AD94                 mov     edx, esi
.text:0040AD96
.text:0040AD96 loc_40AD96:                             ; CODE XREF: sub_40AD20+44↑j
.text:0040AD96                                         ; sub_40AD20+5C↑j
.text:0040AD96                 mov     ebx, [esp+13Ch+var_8]
.text:0040AD9D                 mov     eax, edx
.text:0040AD9F                 mov     esi, [esp+13Ch+var_4]
.text:0040ADA6                 add     esp, 13Ch
.text:0040ADAC                 retn
.text:0040ADAD ; ---------------------------------------------------------------------------
.text:0040ADAD
.text:0040ADAD loc_40ADAD:                             ; CODE XREF: sub_40AD20+72↑j
.text:0040ADAD                 mov     [esp+13Ch+FileHandle], ebx ; FileHandle
.text:0040ADB0                 call    _close_0
.text:0040ADB5                 jmp     short loc_40AD94
.text:0040ADB5 sub_40AD20      endp
.text:0040ADB5
.text:0040ADB5 ; ---------------------------------------------------------------------------
.text:0040ADB7                 align 10h
.text:0040ADC0 aFile           db 'file',0             ; DATA XREF: sub_40ADF0:loc_40AE1C↓o
.text:0040ADC5 ; const char aSSxxxxxx[]
.text:0040ADC5 aSSxxxxxx       db '%.*s/%.*sXXXXXX',0  ; DATA XREF: sub_40ADF0+9B↓o
.text:0040ADD5 ; const char aTemp[]
.text:0040ADD5 aTemp           db 'TEMP',0             ; DATA XREF: sub_40ADF0:loc_40AED2↓o
.text:0040ADD5                                         ; sub_40ADF0:loc_40AF12↓o ...
.text:0040ADDA ; const char aTmp[]
.text:0040ADDA aTmp            db '/tmp',0             ; DATA XREF: sub_40ADF0+12F↓o
.text:0040ADDA                                         ; sub_40ADF0+141↓o ...
.text:0040ADDF aTmpdir         db 'TMPDIR',0           ; DATA XREF: sub_40ADF0:loc_40AF90↓o
.text:0040ADE6 aTmp_0          db 'TMP',0              ; DATA XREF: sub_40ADF0:loc_40B020↓o
.text:0040ADEA                 align 10h
.text:0040ADF0
.text:0040ADF0 ; =============== S U B R O U T I N E =======================================
.text:0040ADF0
.text:0040ADF0
.text:0040ADF0 ; int __cdecl sub_40ADF0(char *Buffer, int, char *, char *, int)
.text:0040ADF0 sub_40ADF0      proc near               ; CODE XREF: sub_40AD20+3B↑p
.text:0040ADF0
.text:0040ADF0 Str             = dword ptr -1BCh
.text:0040ADF0 Format          = dword ptr -1B8h
.text:0040ADF0 var_1B4         = dword ptr -1B4h
.text:0040ADF0 var_1B0         = dword ptr -1B0h
.text:0040ADF0 var_1AC         = dword ptr -1ACh
.text:0040ADF0 var_1A8         = dword ptr -1A8h
.text:0040ADF0 var_19C         = dword ptr -19Ch
.text:0040ADF0 var_13C         = dword ptr -13Ch
.text:0040ADF0 var_DC          = dword ptr -0DCh
.text:0040ADF0 var_7C          = dword ptr -7Ch
.text:0040ADF0 Buffer          = dword ptr  4
.text:0040ADF0 arg_4           = dword ptr  8
.text:0040ADF0 arg_8           = dword ptr  0Ch
.text:0040ADF0 arg_C           = dword ptr  10h
.text:0040ADF0 arg_10          = dword ptr  14h
.text:0040ADF0
.text:0040ADF0                 push    ebp
.text:0040ADF1                 push    edi
.text:0040ADF2                 push    esi
.text:0040ADF3                 push    ebx
.text:0040ADF4                 sub     esp, 1ACh
.text:0040ADFA                 mov     eax, [esp+1BCh+arg_C]
.text:0040AE01                 mov     esi, [esp+1BCh+arg_8]
.text:0040AE08                 test    eax, eax
.text:0040AE0A                 jz      short loc_40AE1C
.text:0040AE0C                 mov     edx, [esp+1BCh+arg_C]
.text:0040AE13                 cmp     byte ptr [edx], 0
.text:0040AE16                 jnz     loc_40B050
.text:0040AE1C
.text:0040AE1C loc_40AE1C:                             ; CODE XREF: sub_40ADF0+1A↑j
.text:0040AE1C                 mov     eax, offset aFile ; "file"
.text:0040AE21                 mov     ebp, 4
.text:0040AE26                 mov     [esp+1BCh+arg_C], eax
.text:0040AE2D
.text:0040AE2D loc_40AE2D:                             ; CODE XREF: sub_40ADF0+274↓j
.text:0040AE2D                                         ; sub_40ADF0+27F↓j
.text:0040AE2D                 mov     ebx, [esp+1BCh+arg_10]
.text:0040AE34                 test    ebx, ebx
.text:0040AE36                 jnz     loc_40AF90
.text:0040AE3C
.text:0040AE3C loc_40AE3C:                             ; CODE XREF: sub_40ADF0+21C↓j
.text:0040AE3C                                         ; sub_40ADF0+224↓j ...
.text:0040AE3C                 test    esi, esi
.text:0040AE3E                 jz      loc_40AED2
.text:0040AE44
.text:0040AE44 loc_40AE44:                             ; CODE XREF: sub_40ADF0+176↓j
.text:0040AE44                                         ; sub_40ADF0+19A↓j
.text:0040AE44                 mov     [esp+1BCh+Str], esi ; Str
.text:0040AE47                 call    strlen
.text:0040AE4C                 test    eax, eax
.text:0040AE4E                 mov     edx, eax
.text:0040AE50                 jz      short loc_40AE60
.text:0040AE52                 movzx   eax, byte ptr [eax+esi-1]
.text:0040AE57                 cmp     al, 2Fh ; '/'
.text:0040AE59                 jz      short loc_40AEC0
.text:0040AE5B                 cmp     al, 5Ch ; '\'
.text:0040AE5D                 jz      short loc_40AEC0
.text:0040AE5F                 nop
.text:0040AE60
.text:0040AE60 loc_40AE60:                             ; CODE XREF: sub_40ADF0+60↑j
.text:0040AE60                                         ; sub_40ADF0+D1↓j ...
.text:0040AE60                 lea     edi, [ebp+edx+8]
.text:0040AE64                 cmp     [esp+1BCh+arg_4], edi
.text:0040AE6B                 jb      short loc_40AEA8
.text:0040AE6D                 mov     [esp+1BCh+var_1AC], ebp
.text:0040AE71                 mov     ecx, [esp+1BCh+arg_C]
.text:0040AE78                 mov     ebp, [esp+1BCh+Buffer]
.text:0040AE7F                 mov     [esp+1BCh+var_1B0], esi
.text:0040AE83                 mov     [esp+1BCh+var_1A8], ecx
.text:0040AE87                 mov     [esp+1BCh+var_1B4], edx
.text:0040AE8B                 mov     [esp+1BCh+Format], offset aSSxxxxxx ; "%.*s/%.*sXXXXXX"
.text:0040AE93                 mov     [esp+1BCh+Str], ebp ; Buffer
.text:0040AE96                 call    sprintf
.text:0040AE9B                 xor     eax, eax
.text:0040AE9D
.text:0040AE9D loc_40AE9D:                             ; CODE XREF: sub_40ADF0+C8↓j
.text:0040AE9D                 add     esp, 1ACh
.text:0040AEA3                 pop     ebx
.text:0040AEA4                 pop     esi
.text:0040AEA5                 pop     edi
.text:0040AEA6                 pop     ebp
.text:0040AEA7                 retn
.text:0040AEA8 ; ---------------------------------------------------------------------------
.text:0040AEA8
.text:0040AEA8 loc_40AEA8:                             ; CODE XREF: sub_40ADF0+7B↑j
.text:0040AEA8                 call    _errno
.text:0040AEAD                 mov     dword ptr [eax], 16h
.text:0040AEB3
.text:0040AEB3 loc_40AEB3:                             ; CODE XREF: sub_40ADF0+187↓j
.text:0040AEB3                 mov     eax, 0FFFFFFFFh
.text:0040AEB8                 jmp     short loc_40AE9D
.text:0040AEB8 ; ---------------------------------------------------------------------------
.text:0040AEBA                 align 10h
.text:0040AEC0
.text:0040AEC0 loc_40AEC0:                             ; CODE XREF: sub_40ADF0+69↑j
.text:0040AEC0                                         ; sub_40ADF0+6D↑j ...
.text:0040AEC0                 dec     edx
.text:0040AEC1                 jz      short loc_40AE60
.text:0040AEC3                 movzx   eax, byte ptr [edx+esi-1]
.text:0040AEC8                 cmp     al, 2Fh ; '/'
.text:0040AECA                 jz      short loc_40AEC0
.text:0040AECC                 cmp     al, 5Ch ; '\'
.text:0040AECE                 jz      short loc_40AEC0
.text:0040AED0                 jmp     short loc_40AE60
.text:0040AED2 ; ---------------------------------------------------------------------------
.text:0040AED2
.text:0040AED2 loc_40AED2:                             ; CODE XREF: sub_40ADF0+4E↑j
.text:0040AED2                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AED9                 lea     esi, [esp+1BCh+var_13C]
.text:0040AEE0                 call    getenv
.text:0040AEE5                 mov     [esp+1BCh+Format], eax ; char *
.text:0040AEE9                 mov     [esp+1BCh+var_1B4], esi ; int
.text:0040AEED                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AEF4                 call    sub_40B6F0
.text:0040AEF9                 test    eax, eax
.text:0040AEFB                 jnz     short loc_40AF12
.text:0040AEFD                 mov     edi, [esp+1BCh+var_13C]
.text:0040AF04                 and     edi, 0F000h
.text:0040AF0A                 cmp     edi, 4000h
.text:0040AF10                 jz      short loc_40AF7C
.text:0040AF12
.text:0040AF12 loc_40AF12:                             ; CODE XREF: sub_40ADF0+10B↑j
.text:0040AF12                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AF19                 call    getenv
.text:0040AF1E                 cld
.text:0040AF1F                 mov     edx, offset aTmp ; "/tmp"
.text:0040AF24                 mov     esi, eax
.text:0040AF26                 mov     ecx, 5
.text:0040AF2B                 mov     edi, edx
.text:0040AF2D                 repe cmpsb
.text:0040AF2F                 jz      short loc_40AF6C
.text:0040AF31                 mov     [esp+1BCh+Format], offset aTmp ; "/tmp"
.text:0040AF39                 lea     ecx, [esp+1BCh+var_19C]
.text:0040AF3D                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AF41                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AF48                 call    sub_40B6F0
.text:0040AF4D                 test    eax, eax
.text:0040AF4F                 jnz     short loc_40AF6C
.text:0040AF51                 mov     ebx, [esp+1BCh+var_19C]
.text:0040AF55                 mov     esi, offset aTmp ; "/tmp"
.text:0040AF5A                 and     ebx, 0F000h
.text:0040AF60                 cmp     ebx, 4000h
.text:0040AF66                 jz      loc_40AE44
.text:0040AF6C
.text:0040AF6C loc_40AF6C:                             ; CODE XREF: sub_40ADF0+13F↑j
.text:0040AF6C                                         ; sub_40ADF0+15F↑j
.text:0040AF6C                 call    _errno
.text:0040AF71                 mov     dword ptr [eax], 2
.text:0040AF77                 jmp     loc_40AEB3
.text:0040AF7C ; ---------------------------------------------------------------------------
.text:0040AF7C
.text:0040AF7C loc_40AF7C:                             ; CODE XREF: sub_40ADF0+120↑j
.text:0040AF7C                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040AF83                 call    getenv
.text:0040AF88                 mov     esi, eax
.text:0040AF8A                 jmp     loc_40AE44
.text:0040AF8A ; ---------------------------------------------------------------------------
.text:0040AF8F                 align 10h
.text:0040AF90
.text:0040AF90 loc_40AF90:                             ; CODE XREF: sub_40ADF0+46↑j
.text:0040AF90                 mov     [esp+1BCh+Str], offset aTmpdir ; "TMPDIR"
.text:0040AF97                 call    sub_40B680
.text:0040AF9C                 test    eax, eax
.text:0040AF9E                 mov     ebx, eax
.text:0040AFA0                 jz      short loc_40B020
.text:0040AFA2
.text:0040AFA2 loc_40AFA2:                             ; CODE XREF: sub_40ADF0+240↓j
.text:0040AFA2                                         ; sub_40ADF0+256↓j
.text:0040AFA2                 mov     [esp+1BCh+Format], ebx ; char *
.text:0040AFA6                 lea     edi, [esp+1BCh+var_7C]
.text:0040AFAD                 mov     [esp+1BCh+var_1B4], edi ; int
.text:0040AFB1                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AFB8                 call    sub_40B6F0
.text:0040AFBD                 test    eax, eax
.text:0040AFBF                 jnz     short loc_40AFD6
.text:0040AFC1                 mov     edx, [esp+1BCh+var_7C]
.text:0040AFC8                 and     edx, 0F000h
.text:0040AFCE                 cmp     edx, 4000h
.text:0040AFD4                 jz      short loc_40B019
.text:0040AFD6
.text:0040AFD6 loc_40AFD6:                             ; CODE XREF: sub_40ADF0+1CF↑j
.text:0040AFD6                                         ; sub_40ADF0+25C↓j
.text:0040AFD6                 test    esi, esi
.text:0040AFD8                 jz      short loc_40B012
.text:0040AFDA                 mov     [esp+1BCh+Format], esi ; char *
.text:0040AFDE                 lea     ecx, [esp+1BCh+var_DC]
.text:0040AFE5                 mov     [esp+1BCh+var_1B4], ecx ; int
.text:0040AFE9                 mov     [esp+1BCh+Str], 0 ; LPCSTR
.text:0040AFF0                 call    sub_40B6F0
.text:0040AFF5                 test    eax, eax
.text:0040AFF7                 jnz     short loc_40B012
.text:0040AFF9                 mov     ebx, [esp+1BCh+var_DC]
.text:0040B000                 and     ebx, 0F000h
.text:0040B006                 cmp     ebx, 4000h
.text:0040B00C                 jz      loc_40AE3C
.text:0040B012
.text:0040B012 loc_40B012:                             ; CODE XREF: sub_40ADF0+1E8↑j
.text:0040B012                                         ; sub_40ADF0+207↑j
.text:0040B012                 xor     esi, esi
.text:0040B014                 jmp     loc_40AE3C
.text:0040B019 ; ---------------------------------------------------------------------------
.text:0040B019
.text:0040B019 loc_40B019:                             ; CODE XREF: sub_40ADF0+1E4↑j
.text:0040B019                 mov     esi, ebx
.text:0040B01B                 jmp     loc_40AE3C
.text:0040B020 ; ---------------------------------------------------------------------------
.text:0040B020
.text:0040B020 loc_40B020:                             ; CODE XREF: sub_40ADF0+1B0↑j
.text:0040B020                 mov     [esp+1BCh+Str], offset aTmp_0 ; "TMP"
.text:0040B027                 call    sub_40B680
.text:0040B02C                 test    eax, eax
.text:0040B02E                 mov     ebx, eax
.text:0040B030                 jnz     loc_40AFA2
.text:0040B036                 mov     [esp+1BCh+Str], offset aTemp ; "TEMP"
.text:0040B03D                 call    sub_40B680
.text:0040B042                 test    eax, eax
.text:0040B044                 mov     ebx, eax
.text:0040B046                 jnz     loc_40AFA2
.text:0040B04C                 jmp     short loc_40AFD6
.text:0040B04C ; ---------------------------------------------------------------------------
.text:0040B04E                 align 10h
.text:0040B050
.text:0040B050 loc_40B050:                             ; CODE XREF: sub_40ADF0+26↑j
.text:0040B050                 mov     ecx, [esp+1BCh+arg_C]
.text:0040B057                 mov     [esp+1BCh+Str], ecx ; Str
.text:0040B05A                 call    strlen
.text:0040B05F                 cmp     eax, 5
.text:0040B062                 mov     ebp, eax
.text:0040B064                 jbe     loc_40AE2D
.text:0040B06A                 mov     ebp, 5
.text:0040B06F                 jmp     loc_40AE2D
.text:0040B06F sub_40ADF0      endp
.text:0040B06F
.text:0040B06F ; ---------------------------------------------------------------------------
.text:0040B074                 align 10h
.text:0040B080 byte_40B080     db 61h                  ; DATA XREF: sub_40B170+DC↓r
.text:0040B080                                         ; sub_40B170+122↓r ...
.text:0040B081 aBcdefghijklmno db 'bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.text:0040B0BF aXxxxxx         db 'XXXXXX',0           ; DATA XREF: sub_40B170+39↓o
.text:0040B0C6                 align 20h
.text:0040B0E0 aInvalidKindInG db 'invalid KIND in __gen_tempname',0
.text:0040B0E0                                         ; DATA XREF: sub_40B170:loc_40B3E8↓o
.text:0040B0FF                 align 10h
.text:0040B100 aLibc05SrcStdio db '../../libc-0.5-src/stdio-common/tempname.c',0
.text:0040B100                                         ; DATA XREF: sub_40B170+405↓o
.text:0040B12B                 align 20h
.text:0040B140 aInvalidKindInG_0 db '! "invalid KIND in __gen_tempname"',0
.text:0040B140                                         ; DATA XREF: sub_40B170+40D↓o
.text:0040B163                 align 10h
.text:0040B170
.text:0040B170 ; =============== S U B R O U T I N E =======================================
.text:0040B170
.text:0040B170
.text:0040B170 ; int __cdecl sub_40B170(char *FileName, int)
.text:0040B170 sub_40B170      proc near               ; CODE XREF: sub_40AD20+51↑p
.text:0040B170
.text:0040B170 Str             = dword ptr -9Ch
.text:0040B170 OpenFlag        = dword ptr -98h
.text:0040B170 var_94          = dword ptr -94h
.text:0040B170 var_90          = dword ptr -90h
.text:0040B170 var_8C          = dword ptr -8Ch
.text:0040B170 var_88          = dword ptr -88h
.text:0040B170 var_84          = dword ptr -84h
.text:0040B170 var_80          = dword ptr -80h
.text:0040B170 var_7C          = dword ptr -7Ch
.text:0040B170 FileName        = dword ptr  4
.text:0040B170 arg_4           = dword ptr  8
.text:0040B170
.text:0040B170                 push    ebp
.text:0040B171                 push    edi
.text:0040B172                 push    esi
.text:0040B173                 push    ebx
.text:0040B174                 sub     esp, 8Ch
.text:0040B17A                 mov     [esp+9Ch+var_88], 0FFFFFFFFh
.text:0040B182                 call    _errno
.text:0040B187                 mov     edx, [eax]
.text:0040B189                 mov     [esp+9Ch+var_8C], edx
.text:0040B18D                 mov     edx, [esp+9Ch+FileName]
.text:0040B194                 mov     [esp+9Ch+Str], edx ; Str
.text:0040B197                 call    strlen
.text:0040B19C                 cmp     eax, 5
.text:0040B19F                 jle     short loc_40B1BD
.text:0040B1A1                 cld
.text:0040B1A2                 mov     ecx, [esp+9Ch+FileName]
.text:0040B1A9                 mov     edi, offset aXxxxxx ; "XXXXXX"
.text:0040B1AE                 lea     esi, [eax+ecx-6]
.text:0040B1B2                 mov     ecx, 7
.text:0040B1B7                 mov     ebp, esi
.text:0040B1B9                 repe cmpsb
.text:0040B1BB                 jz      short loc_40B1D8
.text:0040B1BD
.text:0040B1BD loc_40B1BD:                             ; CODE XREF: sub_40B170+2F↑j
.text:0040B1BD                 call    _errno
.text:0040B1C2                 mov     dword ptr [eax], 16h
.text:0040B1C8
.text:0040B1C8 loc_40B1C8:                             ; CODE XREF: sub_40B170+295↓j
.text:0040B1C8                                         ; sub_40B170+2D8↓j ...
.text:0040B1C8                 mov     eax, 0FFFFFFFFh
.text:0040B1CD
.text:0040B1CD loc_40B1CD:                             ; CODE XREF: sub_40B170+2EF↓j
.text:0040B1CD                                         ; sub_40B170+332↓j
.text:0040B1CD                 add     esp, 8Ch
.text:0040B1D3                 pop     ebx
.text:0040B1D4                 pop     esi
.text:0040B1D5                 pop     edi
.text:0040B1D6                 pop     ebp
.text:0040B1D7                 retn
.text:0040B1D8 ; ---------------------------------------------------------------------------
.text:0040B1D8
.text:0040B1D8 loc_40B1D8:                             ; CODE XREF: sub_40B170+4B↑j
.text:0040B1D8                 mov     ecx, ds:dword_40F504
.text:0040B1DE                 mov     edi, ds:dword_40F500
.text:0040B1E4                 mov     eax, ecx
.text:0040B1E6                 or      eax, edi
.text:0040B1E8                 jz      loc_40B523
.text:0040B1EE
.text:0040B1EE loc_40B1EE:                             ; CODE XREF: sub_40B170+3F8↓j
.text:0040B1EE                 rdtsc
.text:0040B1F0                 mov     edi, edx
.text:0040B1F2                 mov     esi, eax
.text:0040B1F4                 call    _getpid
.text:0040B1F9                 mov     ebx, eax
.text:0040B1FB                 mov     edx, esi
.text:0040B1FD                 sar     ebx, 1Fh
.text:0040B200                 xor     edx, eax
.text:0040B202                 mov     ecx, edi
.text:0040B204                 xor     ecx, ebx
.text:0040B206                 mov     ebx, edx
.text:0040B208                 mov     esi, ecx
.text:0040B20A                 add     ebx, ds:dword_40F500
.text:0040B210                 adc     esi, ds:dword_40F504
.text:0040B216                 xor     edi, edi
.text:0040B218                 mov     ds:dword_40F500, ebx
.text:0040B21E                 mov     ds:dword_40F504, esi
.text:0040B224                 lea     esi, [esi+0]
.text:0040B22A                 lea     edi, [edi+0]
.text:0040B230
.text:0040B230 loc_40B230:                             ; CODE XREF: sub_40B170+2C7↓j
.text:0040B230                 mov     [esp+9Ch+Str], ebx
.text:0040B233                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B237                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B23F                 mov     [esp+9Ch+var_90], 0
.text:0040B247                 call    sub_40D2D0
.text:0040B24C                 movzx   ecx, ds:byte_40B080[eax]
.text:0040B253                 mov     [ebp+0], cl
.text:0040B256                 mov     [esp+9Ch+Str], ebx
.text:0040B259                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B25D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B265                 mov     [esp+9Ch+var_90], 0
.text:0040B26D                 call    sub_40D1B0
.text:0040B272                 mov     [esp+9Ch+Str], eax
.text:0040B275                 mov     ebx, eax
.text:0040B277                 mov     esi, edx
.text:0040B279                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B281                 mov     [esp+9Ch+var_90], 0
.text:0040B289                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B28D                 call    sub_40D2D0
.text:0040B292                 movzx   edx, ds:byte_40B080[eax]
.text:0040B299                 mov     [ebp+1], dl
.text:0040B29C                 mov     [esp+9Ch+Str], ebx
.text:0040B29F                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B2A3                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2AB                 mov     [esp+9Ch+var_90], 0
.text:0040B2B3                 call    sub_40D1B0
.text:0040B2B8                 mov     [esp+9Ch+Str], eax
.text:0040B2BB                 mov     ebx, eax
.text:0040B2BD                 mov     esi, edx
.text:0040B2BF                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2C7                 mov     [esp+9Ch+var_90], 0
.text:0040B2CF                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B2D3                 call    sub_40D2D0
.text:0040B2D8                 movzx   ecx, ds:byte_40B080[eax]
.text:0040B2DF                 mov     [ebp+2], cl
.text:0040B2E2                 mov     [esp+9Ch+Str], ebx
.text:0040B2E5                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B2E9                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B2F1                 mov     [esp+9Ch+var_90], 0
.text:0040B2F9                 call    sub_40D1B0
.text:0040B2FE                 mov     [esp+9Ch+Str], eax
.text:0040B301                 mov     ebx, eax
.text:0040B303                 mov     esi, edx
.text:0040B305                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B30D                 mov     [esp+9Ch+var_90], 0
.text:0040B315                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B319                 call    sub_40D2D0
.text:0040B31E                 movzx   edx, ds:byte_40B080[eax]
.text:0040B325                 mov     [ebp+3], dl
.text:0040B328                 mov     [esp+9Ch+Str], ebx
.text:0040B32B                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B32F                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B337                 mov     [esp+9Ch+var_90], 0
.text:0040B33F                 call    sub_40D1B0
.text:0040B344                 mov     [esp+9Ch+Str], eax
.text:0040B347                 mov     ebx, eax
.text:0040B349                 mov     esi, edx
.text:0040B34B                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B353                 mov     [esp+9Ch+var_90], 0
.text:0040B35B                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B35F                 call    sub_40D2D0
.text:0040B364                 movzx   ecx, ds:byte_40B080[eax]
.text:0040B36B                 mov     [ebp+4], cl
.text:0040B36E                 mov     [esp+9Ch+Str], ebx
.text:0040B371                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B379                 mov     [esp+9Ch+var_90], 0
.text:0040B381                 mov     [esp+9Ch+OpenFlag], esi
.text:0040B385                 call    sub_40D1B0
.text:0040B38A                 mov     [esp+9Ch+Str], eax
.text:0040B38D                 mov     [esp+9Ch+var_94], 3Eh ; '>'
.text:0040B395                 mov     [esp+9Ch+var_90], 0
.text:0040B39D                 mov     [esp+9Ch+OpenFlag], edx
.text:0040B3A1                 call    sub_40D2D0
.text:0040B3A6                 movzx   ebx, ds:byte_40B080[eax]
.text:0040B3AD                 mov     [ebp+5], bl
.text:0040B3B0                 cmp     [esp+9Ch+arg_4], 1
.text:0040B3B8                 jz      loc_40B507
.text:0040B3BE                 cmp     [esp+9Ch+arg_4], 1
.text:0040B3C6                 jle     loc_40B4D0
.text:0040B3CC                 cmp     [esp+9Ch+arg_4], 2
.text:0040B3D4                 jz      loc_40B4A7
.text:0040B3DA                 cmp     [esp+9Ch+arg_4], 3
.text:0040B3E2                 jz      loc_40B464
.text:0040B3E8
.text:0040B3E8 loc_40B3E8:                             ; CODE XREF: sub_40B170+369↓j
.text:0040B3E8                 mov     ebx, offset aInvalidKindInG ; "invalid KIND in __gen_tempname"
.text:0040B3ED                 test    ebx, ebx
.text:0040B3EF                 jnz     loc_40B56D
.text:0040B3F5
.text:0040B3F5 loc_40B3F5:                             ; CODE XREF: sub_40B170+354↓j
.text:0040B3F5                 mov     eax, [esp+9Ch+var_88]
.text:0040B3F9                 test    eax, eax
.text:0040B3FB                 jns     short loc_40B450
.text:0040B3FD                 call    _errno
.text:0040B402                 cmp     dword ptr [eax], 11h
.text:0040B405                 jnz     loc_40B1C8
.text:0040B40B
.text:0040B40B loc_40B40B:                             ; CODE XREF: sub_40B170+315↓j
.text:0040B40B                 mov     edx, ds:dword_40F500
.text:0040B411                 mov     ecx, ds:dword_40F504
.text:0040B417                 add     edx, 1E61h
.text:0040B41D                 adc     ecx, 0
.text:0040B420                 mov     ebx, edx
.text:0040B422                 inc     edi
.text:0040B423                 mov     ds:dword_40F500, edx
.text:0040B429                 cmp     edi, 3A2F8h
.text:0040B42F                 mov     esi, ecx
.text:0040B431                 mov     ds:dword_40F504, ecx
.text:0040B437                 jb      loc_40B230
.text:0040B43D                 call    _errno
.text:0040B442                 mov     dword ptr [eax], 11h
.text:0040B448                 jmp     loc_40B1C8
.text:0040B448 ; ---------------------------------------------------------------------------
.text:0040B44D                 align 10h
.text:0040B450
.text:0040B450 loc_40B450:                             ; CODE XREF: sub_40B170+28B↑j
.text:0040B450                 call    _errno
.text:0040B455                 mov     esi, [esp+9Ch+var_8C]
.text:0040B459                 mov     [eax], esi
.text:0040B45B                 mov     eax, [esp+9Ch+var_88]
.text:0040B45F                 jmp     loc_40B1CD
.text:0040B464 ; ---------------------------------------------------------------------------
.text:0040B464
.text:0040B464 loc_40B464:                             ; CODE XREF: sub_40B170+272↑j
.text:0040B464                 mov     [esp+9Ch+Str], 0 ; LPCSTR
.text:0040B46B                 mov     ecx, [esp+9Ch+FileName]
.text:0040B472                 lea     esi, [esp+9Ch+var_7C]
.text:0040B476                 mov     [esp+9Ch+var_94], esi ; int
.text:0040B47A                 mov     [esp+9Ch+OpenFlag], ecx ; int
.text:0040B47E                 call    sub_40B6A0
.text:0040B483                 test    eax, eax
.text:0040B485                 jns     short loc_40B40B
.text:0040B487                 call    _errno
.text:0040B48C                 cmp     dword ptr [eax], 2
.text:0040B48F                 jnz     loc_40B1C8
.text:0040B495                 call    _errno
.text:0040B49A                 mov     ebx, [esp+9Ch+var_8C]
.text:0040B49E                 mov     [eax], ebx
.text:0040B4A0                 xor     eax, eax
.text:0040B4A2                 jmp     loc_40B1CD
.text:0040B4A7 ; ---------------------------------------------------------------------------
.text:0040B4A7
.text:0040B4A7 loc_40B4A7:                             ; CODE XREF: sub_40B170+264↑j
.text:0040B4A7                 mov     [esp+9Ch+OpenFlag], 1C0h ; AccessMode
.text:0040B4AF                 mov     edx, [esp+9Ch+FileName]
.text:0040B4B6                 mov     [esp+9Ch+Str], edx ; LPCSTR
.text:0040B4B9                 call    sub_40B5A0
.text:0040B4BE                 mov     esi, esi
.text:0040B4C0
.text:0040B4C0 loc_40B4C0:                             ; CODE XREF: sub_40B170+395↓j
.text:0040B4C0                 mov     [esp+9Ch+var_88], eax
.text:0040B4C4                 jmp     loc_40B3F5
.text:0040B4C4 ; ---------------------------------------------------------------------------
.text:0040B4C9                 align 10h
.text:0040B4D0
.text:0040B4D0 loc_40B4D0:                             ; CODE XREF: sub_40B170+256↑j
.text:0040B4D0                 mov     eax, [esp+9Ch+arg_4]
.text:0040B4D7                 test    eax, eax
.text:0040B4D9                 jnz     loc_40B3E8
.text:0040B4DF                 mov     [esp+9Ch+var_94], 180h
.text:0040B4E7                 mov     esi, [esp+9Ch+FileName]
.text:0040B4EE                 mov     [esp+9Ch+OpenFlag], 8502h ; OpenFlag
.text:0040B4F6                 mov     [esp+9Ch+Str], esi ; FileName
.text:0040B4F9                 lea     esi, [esi+0]
.text:0040B500
.text:0040B500 loc_40B500:                             ; CODE XREF: sub_40B170+3B1↓j
.text:0040B500                 call    _open_0
.text:0040B505                 jmp     short loc_40B4C0
.text:0040B507 ; ---------------------------------------------------------------------------
.text:0040B507
.text:0040B507 loc_40B507:                             ; CODE XREF: sub_40B170+248↑j
.text:0040B507                 mov     [esp+9Ch+var_94], 180h
.text:0040B50F                 mov     ebx, [esp+9Ch+FileName]
.text:0040B516                 mov     [esp+9Ch+OpenFlag], 8502h
.text:0040B51E                 mov     [esp+9Ch+Str], ebx
.text:0040B521                 jmp     short loc_40B500
.text:0040B523 ; ---------------------------------------------------------------------------
.text:0040B523
.text:0040B523 loc_40B523:                             ; CODE XREF: sub_40B170+78↑j
.text:0040B523                 mov     [esp+9Ch+OpenFlag], 0
.text:0040B52B                 lea     ebx, [esp+9Ch+var_84]
.text:0040B52F                 mov     [esp+9Ch+Str], ebx
.text:0040B532                 call    sub_40B620
.text:0040B537                 mov     edi, [esp+9Ch+var_80]
.text:0040B53B                 mov     edx, [esp+9Ch+var_84]
.text:0040B53F                 mov     ecx, edi
.text:0040B541                 mov     ebx, edi
.text:0040B543                 shl     ecx, 10h
.text:0040B546                 sar     ebx, 1Fh
.text:0040B549                 shld    ebx, edi, 10h
.text:0040B54D                 mov     esi, edx
.text:0040B54F                 mov     edi, edx
.text:0040B551                 mov     edx, ecx
.text:0040B553                 sar     edi, 1Fh
.text:0040B556                 xor     edx, esi
.text:0040B558                 mov     ds:dword_40F500, edx
.text:0040B55E                 mov     esi, ebx
.text:0040B560                 xor     esi, edi
.text:0040B562                 mov     ds:dword_40F504, esi
.text:0040B568                 jmp     loc_40B1EE
.text:0040B56D ; ---------------------------------------------------------------------------
.text:0040B56D
.text:0040B56D loc_40B56D:                             ; CODE XREF: sub_40B170+27F↑j
.text:0040B56D                 mov     [esp+9Ch+var_94], 151h
.text:0040B575                 mov     [esp+9Ch+OpenFlag], offset aLibc05SrcStdio ; "../../libc-0.5-src/stdio-common/tempnam"...
.text:0040B57D                 mov     [esp+9Ch+Str], offset aInvalidKindInG_0 ; "! \"invalid KIND in __gen_tempname\""
.text:0040B584                 call    _assert
.text:0040B584 sub_40B170      endp
.text:0040B584
.text:0040B584 ; ---------------------------------------------------------------------------
.text:0040B589                 align 20h
.text:0040B5A0
.text:0040B5A0 ; =============== S U B R O U T I N E =======================================
.text:0040B5A0
.text:0040B5A0
.text:0040B5A0 ; int __cdecl sub_40B5A0(LPCSTR, int AccessMode)
.text:0040B5A0 sub_40B5A0      proc near               ; CODE XREF: sub_40B170+349↑p
.text:0040B5A0
.text:0040B5A0 lpPathName      = dword ptr -1Ch
.text:0040B5A0 lpSecurityAttributes= dword ptr -18h
.text:0040B5A0 var_8           = dword ptr -8
.text:0040B5A0 var_4           = dword ptr -4
.text:0040B5A0 arg_0           = dword ptr  4
.text:0040B5A0 AccessMode      = dword ptr  8
.text:0040B5A0
.text:0040B5A0                 sub     esp, 1Ch
.text:0040B5A3                 mov     [esp+1Ch+var_8], ebx
.text:0040B5A7                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B5AB                 mov     [esp+1Ch+var_4], esi
.text:0040B5AF                 mov     esi, [esp+1Ch+AccessMode]
.text:0040B5B3                 test    ebx, ebx
.text:0040B5B5                 jz      short loc_40B605
.text:0040B5B7                 mov     [esp+1Ch+lpSecurityAttributes], 0 ; lpSecurityAttributes
.text:0040B5BF                 mov     [esp+1Ch+lpPathName], ebx ; lpPathName
.text:0040B5C2                 call    CreateDirectoryA
.text:0040B5C7                 sub     esp, 8
.text:0040B5CA                 test    eax, eax
.text:0040B5CC                 jz      short loc_40B5E6
.text:0040B5CE                 mov     [esp+1Ch+AccessMode], esi ; AccessMode
.text:0040B5D2                 mov     esi, [esp+1Ch+var_4]
.text:0040B5D6                 mov     [esp+1Ch+arg_0], ebx ; FileName
.text:0040B5DA                 mov     ebx, [esp+1Ch+var_8]
.text:0040B5DE                 add     esp, 1Ch
.text:0040B5E1                 jmp     _chmod
.text:0040B5E6 ; ---------------------------------------------------------------------------
.text:0040B5E6
.text:0040B5E6 loc_40B5E6:                             ; CODE XREF: sub_40B5A0+2C↑j
.text:0040B5E6                 call    sub_409170
.text:0040B5EB                 mov     esi, eax
.text:0040B5ED                 call    _errno
.text:0040B5F2                 mov     [eax], esi
.text:0040B5F4
.text:0040B5F4 loc_40B5F4:                             ; CODE XREF: sub_40B5A0+70↓j
.text:0040B5F4                 mov     ebx, [esp+1Ch+var_8]
.text:0040B5F8                 mov     eax, 0FFFFFFFFh
.text:0040B5FD                 mov     esi, [esp+1Ch+var_4]
.text:0040B601                 add     esp, 1Ch
.text:0040B604                 retn
.text:0040B605 ; ---------------------------------------------------------------------------
.text:0040B605
.text:0040B605 loc_40B605:                             ; CODE XREF: sub_40B5A0+15↑j
.text:0040B605                 call    _errno
.text:0040B60A                 mov     dword ptr [eax], 16h
.text:0040B610                 jmp     short loc_40B5F4
.text:0040B610 sub_40B5A0      endp
.text:0040B610
.text:0040B610 ; ---------------------------------------------------------------------------
.text:0040B612                 align 10h
.text:0040B620
.text:0040B620 ; =============== S U B R O U T I N E =======================================
.text:0040B620
.text:0040B620
.text:0040B620 sub_40B620      proc near               ; CODE XREF: sub_40B170+3C2↑p
.text:0040B620
.text:0040B620 var_1C          = dword ptr -1Ch
.text:0040B620 var_18          = dword ptr -18h
.text:0040B620 var_C           = dword ptr -0Ch
.text:0040B620 var_8           = dword ptr -8
.text:0040B620 var_4           = dword ptr -4
.text:0040B620 arg_0           = dword ptr  4
.text:0040B620 arg_4           = dword ptr  8
.text:0040B620
.text:0040B620                 sub     esp, 1Ch
.text:0040B623                 mov     edx, [esp+1Ch+arg_4]
.text:0040B627                 mov     [esp+1Ch+var_4], ebx
.text:0040B62B                 mov     ebx, [esp+1Ch+arg_0]
.text:0040B62F                 mov     [esp+1Ch+var_18], edx
.text:0040B633                 lea     edx, [esp+1Ch+var_C]
.text:0040B637                 mov     [esp+1Ch+var_1C], edx
.text:0040B63A                 call    sub_40B7B0
.text:0040B63F                 test    eax, eax
.text:0040B641                 mov     edx, 0FFFFFFFFh
.text:0040B646                 jnz     short loc_40B66A
.text:0040B648                 mov     ecx, [esp+1Ch+var_C]
.text:0040B64C                 mov     edx, 10624DD3h
.text:0040B651                 mov     [ebx], ecx
.text:0040B653                 mov     ecx, [esp+1Ch+var_8]
.text:0040B657                 mov     eax, ecx
.text:0040B659                 imul    edx
.text:0040B65B                 mov     eax, ecx
.text:0040B65D                 sar     eax, 1Fh
.text:0040B660                 sar     edx, 6
.text:0040B663                 sub     edx, eax
.text:0040B665                 mov     [ebx+4], edx
.text:0040B668                 xor     edx, edx
.text:0040B66A
.text:0040B66A loc_40B66A:                             ; CODE XREF: sub_40B620+26↑j
.text:0040B66A                 mov     ebx, [esp+1Ch+var_4]
.text:0040B66E                 mov     eax, edx
.text:0040B670                 add     esp, 1Ch
.text:0040B673                 retn
.text:0040B673 sub_40B620      endp
.text:0040B673
.text:0040B673 ; ---------------------------------------------------------------------------
.text:0040B674                 align 10h
.text:0040B680
.text:0040B680 ; =============== S U B R O U T I N E =======================================
.text:0040B680
.text:0040B680
.text:0040B680 sub_40B680      proc near               ; CODE XREF: sub_40ADF0+1A7↑p
.text:0040B680                                         ; sub_40ADF0+237↑p ...
.text:0040B680                 mov     edx, ds:dword_40F510
.text:0040B686                 test    edx, edx
.text:0040B688                 jnz     short loc_40B690
.text:0040B68A                 jmp     getenv
.text:0040B68A ; ---------------------------------------------------------------------------
.text:0040B68F                 align 10h
.text:0040B690
.text:0040B690 loc_40B690:                             ; CODE XREF: sub_40B680+8↑j
.text:0040B690                 xor     eax, eax
.text:0040B692                 retn
.text:0040B692 sub_40B680      endp
.text:0040B692
.text:0040B692 ; ---------------------------------------------------------------------------
.text:0040B693                 align 10h
.text:0040B6A0
.text:0040B6A0 ; =============== S U B R O U T I N E =======================================
.text:0040B6A0
.text:0040B6A0
.text:0040B6A0 ; int __cdecl sub_40B6A0(LPCSTR, int, int)
.text:0040B6A0 sub_40B6A0      proc near               ; CODE XREF: sub_40B170+30E↑p
.text:0040B6A0                                         ; sub_40B6F0+42↓p ...
.text:0040B6A0
.text:0040B6A0 lpFileName      = dword ptr -2Ch
.text:0040B6A0 dwDesiredAccess = dword ptr -28h
.text:0040B6A0 dwShareMode     = dword ptr -24h
.text:0040B6A0 lpSecurityAttributes= dword ptr -20h
.text:0040B6A0 dwCreationDisposition= dword ptr -1Ch
.text:0040B6A0 dwFlagsAndAttributes= dword ptr -18h
.text:0040B6A0 hTemplateFile   = dword ptr -14h
.text:0040B6A0 var_10          = dword ptr -10h
.text:0040B6A0 var_C           = dword ptr -0Ch
.text:0040B6A0 var_8           = dword ptr -8
.text:0040B6A0 var_4           = dword ptr -4
.text:0040B6A0 arg_0           = dword ptr  4
.text:0040B6A0 arg_4           = dword ptr  8
.text:0040B6A0 arg_8           = dword ptr  0Ch
.text:0040B6A0
.text:0040B6A0 ; FUNCTION CHUNK AT .text:004077E0 SIZE 0000013A BYTES
.text:0040B6A0
.text:0040B6A0                 sub     esp, 0Ch
.text:0040B6A3                 mov     ecx, [esp+0Ch+arg_0]
.text:0040B6A7                 mov     edx, [esp+0Ch+arg_4]
.text:0040B6AB                 mov     eax, [esp+0Ch+arg_8]
.text:0040B6AF                 test    ecx, ecx
.text:0040B6B1                 jnz     short loc_40B6D0
.text:0040B6B3                 test    edx, edx
.text:0040B6B5                 jz      short loc_40B6D0
.text:0040B6B7                 test    eax, eax
.text:0040B6B9                 jz      short loc_40B6D0
.text:0040B6BB                 mov     [esp+0Ch+arg_4], eax
.text:0040B6BF                 mov     [esp+0Ch+arg_0], edx
.text:0040B6C3                 add     esp, 0Ch
.text:0040B6C6                 jmp     loc_4077E0
.text:0040B6C6 ; ---------------------------------------------------------------------------
.text:0040B6CB                 align 10h
.text:0040B6D0
.text:0040B6D0 loc_40B6D0:                             ; CODE XREF: sub_40B6A0+11↑j
.text:0040B6D0                                         ; sub_40B6A0+15↑j ...
.text:0040B6D0                 call    _errno
.text:0040B6D5                 mov     dword ptr [eax], 16h
.text:0040B6DB                 mov     eax, 0FFFFFFFFh
.text:0040B6E0                 add     esp, 0Ch
.text:0040B6E3                 retn
.text:0040B6E3 sub_40B6A0      endp
.text:0040B6E3
.text:0040B6E3 ; ---------------------------------------------------------------------------
.text:0040B6E4                 align 10h
.text:0040B6F0
.text:0040B6F0 ; =============== S U B R O U T I N E =======================================
.text:0040B6F0
.text:0040B6F0
.text:0040B6F0 ; int __cdecl sub_40B6F0(LPCSTR, char *, int)
.text:0040B6F0 sub_40B6F0      proc near               ; CODE XREF: sub_40ADF0+104↑p
.text:0040B6F0                                         ; sub_40ADF0+158↑p ...
.text:0040B6F0
.text:0040B6F0 var_13C         = dword ptr -13Ch
.text:0040B6F0 lpString1       = dword ptr -138h
.text:0040B6F0 var_134         = dword ptr -134h
.text:0040B6F0 String1         = byte ptr -12Ch
.text:0040B6F0 var_10          = dword ptr -10h
.text:0040B6F0 var_C           = dword ptr -0Ch
.text:0040B6F0 var_8           = dword ptr -8
.text:0040B6F0 var_4           = dword ptr -4
.text:0040B6F0 arg_0           = dword ptr  4
.text:0040B6F0 arg_4           = dword ptr  8
.text:0040B6F0 arg_8           = dword ptr  0Ch
.text:0040B6F0
.text:0040B6F0                 sub     esp, 13Ch
.text:0040B6F6                 mov     [esp+13Ch+var_10], ebx
.text:0040B6FD                 mov     ebx, [esp+13Ch+arg_8]
.text:0040B704                 mov     [esp+13Ch+var_C], esi
.text:0040B70B                 mov     esi, [esp+13Ch+arg_4]
.text:0040B712                 mov     [esp+13Ch+var_8], edi
.text:0040B719                 mov     edi, [esp+13Ch+arg_0]
.text:0040B720                 mov     [esp+13Ch+var_4], ebp
.text:0040B727                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040B72B                 mov     [esp+13Ch+lpString1], esi ; int
.text:0040B72F                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040B732                 call    sub_40B6A0
.text:0040B737                 cmp     eax, 0FFFFFFFFh
.text:0040B73A                 mov     edx, eax
.text:0040B73C                 jz      short loc_40B74E
.text:0040B73E                 mov     ecx, [ebx]
.text:0040B740                 and     ecx, 0F000h
.text:0040B746                 cmp     ecx, 0A000h
.text:0040B74C                 jz      short loc_40B773
.text:0040B74E
.text:0040B74E loc_40B74E:                             ; CODE XREF: sub_40B6F0+4C↑j
.text:0040B74E                                         ; sub_40B6F0+A1↓j ...
.text:0040B74E                 mov     ebx, [esp+13Ch+var_10]
.text:0040B755                 mov     eax, edx
.text:0040B757                 mov     esi, [esp+13Ch+var_C]
.text:0040B75E                 mov     edi, [esp+13Ch+var_8]
.text:0040B765                 mov     ebp, [esp+13Ch+var_4]
.text:0040B76C                 add     esp, 13Ch
.text:0040B772                 retn
.text:0040B773 ; ---------------------------------------------------------------------------
.text:0040B773
.text:0040B773 loc_40B773:                             ; CODE XREF: sub_40B6F0+5C↑j
.text:0040B773                 mov     [esp+13Ch+var_134], 104h
.text:0040B77B                 lea     ebp, [esp+13Ch+String1]
.text:0040B77F                 mov     [esp+13Ch+lpString1], ebp ; lpString1
.text:0040B783                 mov     [esp+13Ch+var_13C], esi ; char *
.text:0040B786                 call    sub_40BA70
.text:0040B78B                 inc     eax
.text:0040B78C                 mov     edx, 0FFFFFFFFh
.text:0040B791                 jz      short loc_40B74E
.text:0040B793                 mov     [esp+13Ch+var_134], ebx ; int
.text:0040B797                 mov     [esp+13Ch+lpString1], ebp ; int
.text:0040B79B                 mov     [esp+13Ch+var_13C], edi ; LPCSTR
.text:0040B79E                 call    sub_40B6A0
.text:0040B7A3                 mov     edx, eax
.text:0040B7A5                 jmp     short loc_40B74E
.text:0040B7A5 sub_40B6F0      endp
.text:0040B7A5
.text:0040B7A5 ; ---------------------------------------------------------------------------
.text:0040B7A7                 align 10h
.text:0040B7B0
.text:0040B7B0 ; =============== S U B R O U T I N E =======================================
.text:0040B7B0
.text:0040B7B0
.text:0040B7B0 sub_40B7B0      proc near               ; CODE XREF: sub_40B620+1A↑p
.text:0040B7B0
.text:0040B7B0 lpTimeZoneInformation= dword ptr -0DCh
.text:0040B7B0 var_D8          = dword ptr -0D8h
.text:0040B7B0 var_D4          = dword ptr -0D4h
.text:0040B7B0 var_D0          = dword ptr -0D0h
.text:0040B7B0 SystemTimeAsFileTime= _FILETIME ptr -0C4h
.text:0040B7B0 TimeZoneInformation= _TIME_ZONE_INFORMATION ptr -0BCh
.text:0040B7B0 arg_0           = dword ptr  4
.text:0040B7B0 arg_4           = dword ptr  8
.text:0040B7B0
.text:0040B7B0                 push    edi
.text:0040B7B1                 push    esi
.text:0040B7B2                 push    ebx
.text:0040B7B3                 sub     esp, 0D0h
.text:0040B7B9                 mov     ebx, [esp+0DCh+arg_4]
.text:0040B7C0                 mov     edi, [esp+0DCh+arg_0]
.text:0040B7C7                 test    ebx, ebx
.text:0040B7C9                 jz      short loc_40B7F4
.text:0040B7CB                 lea     edx, [esp+0DCh+TimeZoneInformation]
.text:0040B7CF                 mov     [esp+0DCh+lpTimeZoneInformation], edx ; lpTimeZoneInformation
.text:0040B7D2                 call    GetTimeZoneInformation
.text:0040B7D7                 sub     esp, 4
.text:0040B7DA                 cmp     eax, 0FFFFFFFFh
.text:0040B7DD                 jz      loc_40B875
.text:0040B7E3                 xor     ecx, ecx
.text:0040B7E5                 mov     esi, [esp+0DCh+TimeZoneInformation.Bias]
.text:0040B7E9                 cmp     eax, 2
.text:0040B7EC                 setz    cl
.text:0040B7EF                 mov     [ebx], esi
.text:0040B7F1                 mov     [ebx+4], ecx
.text:0040B7F4
.text:0040B7F4 loc_40B7F4:                             ; CODE XREF: sub_40B7B0+19↑j
.text:0040B7F4                                         ; sub_40B7B0+E0↓j
.text:0040B7F4                 test    edi, edi
.text:0040B7F6                 jz      short loc_40B869
.text:0040B7F8                 lea     ecx, [esp+0DCh+SystemTimeAsFileTime]
.text:0040B7FC                 mov     [esp+0DCh+lpTimeZoneInformation], ecx ; lpSystemTimeAsFileTime
.text:0040B7FF                 call    GetSystemTimeAsFileTime
.text:0040B804                 sub     esp, 4
.text:0040B807                 mov     ebx, [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime]
.text:0040B80B                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B813                 mov     esi, [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime]
.text:0040B817                 mov     [esp+0DCh+var_D0], 0
.text:0040B81F                 add     ebx, 2AC18000h
.text:0040B825                 adc     esi, 0FE624E21h
.text:0040B82B                 mov     [esp+0DCh+SystemTimeAsFileTime.dwLowDateTime], ebx
.text:0040B82F                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B832                 mov     [esp+0DCh+SystemTimeAsFileTime.dwHighDateTime], esi
.text:0040B836                 mov     [esp+0DCh+var_D8], esi
.text:0040B83A                 call    sub_40D1B0
.text:0040B83F                 mov     [edi], eax
.text:0040B841                 mov     [esp+0DCh+lpTimeZoneInformation], ebx
.text:0040B844                 mov     [esp+0DCh+var_D4], 989680h
.text:0040B84C                 mov     [esp+0DCh+var_D0], 0
.text:0040B854                 mov     [esp+0DCh+var_D8], esi
.text:0040B858                 call    sub_40D2D0
.text:0040B85D                 lea     ebx, [eax+eax*4]
.text:0040B860                 lea     edx, [ebx+ebx*4]
.text:0040B863                 shl     edx, 2
.text:0040B866                 mov     [edi+4], edx
.text:0040B869
.text:0040B869 loc_40B869:                             ; CODE XREF: sub_40B7B0+46↑j
.text:0040B869                 add     esp, 0D0h
.text:0040B86F                 xor     eax, eax
.text:0040B871                 pop     ebx
.text:0040B872                 pop     esi
.text:0040B873                 pop     edi
.text:0040B874                 retn
.text:0040B875 ; ---------------------------------------------------------------------------
.text:0040B875
.text:0040B875 loc_40B875:                             ; CODE XREF: sub_40B7B0+2D↑j
.text:0040B875                 mov     dword ptr [ebx], 0
.text:0040B87B                 mov     dword ptr [ebx+4], 0
.text:0040B882                 call    sub_409170
.text:0040B887                 mov     esi, eax
.text:0040B889                 call    _errno
.text:0040B88E                 mov     [eax], esi
.text:0040B890                 jmp     loc_40B7F4
.text:0040B890 sub_40B7B0      endp
.text:0040B890
.text:0040B890 ; ---------------------------------------------------------------------------
.text:0040B895                 align 10h
.text:0040B8A0                 sub     esp, 0Ch
.text:0040B8A3                 mov     [esp+4], ebx
.text:0040B8A7                 mov     [esp+8], esi
.text:0040B8AB                 xor     esi, esi
.text:0040B8AD                 call    sub_40BB80
.text:0040B8B2                 mov     ebx, eax
.text:0040B8B4                 call    sub_40BB70
.text:0040B8B9                 cmp     ebx, eax
.text:0040B8BB                 jz      short loc_40B8D4
.text:0040B8BD
.text:0040B8BD loc_40B8BD:                             ; CODE XREF: .text:0040B8E2↓j
.text:0040B8BD                 mov     esi, 1
.text:0040B8C2
.text:0040B8C2 loc_40B8C2:                             ; CODE XREF: .text:0040B8E4↓j
.text:0040B8C2                 mov     ds:dword_40F510, esi
.text:0040B8C8                 mov     ebx, [esp+4]
.text:0040B8CC                 mov     esi, [esp+8]
.text:0040B8D0                 add     esp, 0Ch
.text:0040B8D3                 retn
.text:0040B8D4 ; ---------------------------------------------------------------------------
.text:0040B8D4
.text:0040B8D4 loc_40B8D4:                             ; CODE XREF: .text:0040B8BB↑j
.text:0040B8D4                 call    sub_40BB60
.text:0040B8D9                 mov     ebx, eax
.text:0040B8DB                 call    sub_40BB50
.text:0040B8E0                 cmp     ebx, eax
.text:0040B8E2                 jnz     short loc_40B8BD
.text:0040B8E4                 jmp     short loc_40B8C2
.text:0040B8E4 ; ---------------------------------------------------------------------------
.text:0040B8E6                 align 10h
.text:0040B8F0
.text:0040B8F0 ; =============== S U B R O U T I N E =======================================
.text:0040B8F0
.text:0040B8F0
.text:0040B8F0 ; int __cdecl sub_40B8F0(LPCCH lpMultiByteStr, LPSTR lpString1)
.text:0040B8F0 sub_40B8F0      proc near               ; CODE XREF: sub_40BA70+93↓p
.text:0040B8F0
.text:0040B8F0 pvReserved      = dword ptr -35Ch
.text:0040B8F0 pUnkOuter       = dword ptr -358h
.text:0040B8F0 dwClsContext    = dword ptr -354h
.text:0040B8F0 riid            = dword ptr -350h
.text:0040B8F0 ppv             = dword ptr -34Ch
.text:0040B8F0 cchWideChar     = dword ptr -348h
.text:0040B8F0 var_334         = byte ptr -334h
.text:0040B8F0 var_330         = dword ptr -330h
.text:0040B8F0 String2         = byte ptr -32Ch
.text:0040B8F0 WideCharStr     = word ptr -21Ch
.text:0040B8F0 lpMultiByteStr  = dword ptr  4
.text:0040B8F0 lpString1       = dword ptr  8
.text:0040B8F0
.text:0040B8F0                 push    edi
.text:0040B8F1                 push    esi
.text:0040B8F2                 push    ebx
.text:0040B8F3                 sub     esp, 350h
.text:0040B8F9                 mov     edi, [esp+35Ch+lpString1]
.text:0040B900                 mov     byte ptr [edi], 0
.text:0040B903                 mov     [esp+35Ch+pvReserved], 0 ; pvReserved
.text:0040B90A                 call    OleInitialize
.text:0040B90F                 sub     esp, 4
.text:0040B912                 cmp     eax, 1
.text:0040B915                 ja      loc_40BA4F
.text:0040B91B                 mov     [esp+35Ch+riid], offset riid ; riid
.text:0040B923                 lea     ecx, [esp+35Ch+var_330]
.text:0040B927                 mov     [esp+35Ch+ppv], ecx ; ppv
.text:0040B92B                 mov     [esp+35Ch+dwClsContext], 1 ; dwClsContext
.text:0040B933                 mov     [esp+35Ch+pUnkOuter], 0 ; pUnkOuter
.text:0040B93B                 mov     [esp+35Ch+pvReserved], offset rclsid ; rclsid
.text:0040B942                 call    CoCreateInstance
.text:0040B947                 sub     esp, 14h
.text:0040B94A                 test    eax, eax
.text:0040B94C                 js      loc_40BA4F
.text:0040B952                 mov     ebx, [esp+35Ch+var_330]
.text:0040B956                 lea     edx, [esp+35Ch+var_334]
.text:0040B95A                 mov     esi, [ebx]
.text:0040B95C                 mov     [esp+35Ch+dwClsContext], edx
.text:0040B960                 mov     [esp+35Ch+pvReserved], ebx
.text:0040B963                 xor     ebx, ebx
.text:0040B965                 mov     [esp+35Ch+pUnkOuter], offset dword_40C960
.text:0040B96D                 call    dword ptr [esi]
.text:0040B96F                 sub     esp, 0Ch
.text:0040B972                 lea     esi, [esp+35Ch+WideCharStr]
.text:0040B979                 call    AreFileApisANSI
.text:0040B97E                 mov     [esp+35Ch+cchWideChar], 104h ; cchWideChar
.text:0040B986                 test    eax, eax
.text:0040B988                 mov     ecx, [esp+35Ch+lpMultiByteStr]
.text:0040B98F                 setz    bl
.text:0040B992                 mov     [esp+35Ch+ppv], esi ; lpWideCharStr
.text:0040B996                 mov     [esp+35Ch+riid], 0FFFFFFFFh ; cbMultiByte
.text:0040B99E                 mov     [esp+35Ch+dwClsContext], ecx ; lpMultiByteStr
.text:0040B9A2                 mov     [esp+35Ch+pUnkOuter], 0 ; dwFlags
.text:0040B9AA                 mov     [esp+35Ch+pvReserved], ebx ; CodePage
.text:0040B9AD                 call    MultiByteToWideChar
.text:0040B9B2                 sub     esp, 18h
.text:0040B9B5                 test    eax, eax
.text:0040B9B7                 js      loc_40BA4F
.text:0040B9BD                 mov     edx, dword ptr [esp+35Ch+var_334]
.text:0040B9C1                 mov     ebx, [edx]
.text:0040B9C3                 mov     [esp+35Ch+dwClsContext], 0
.text:0040B9CB                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040B9CF                 mov     [esp+35Ch+pvReserved], edx
.text:0040B9D2                 call    dword ptr [ebx+14h]
.text:0040B9D5                 sub     esp, 0Ch
.text:0040B9D8                 test    eax, eax
.text:0040B9DA                 js      short loc_40BA4F
.text:0040B9DC                 mov     ebx, [esp+35Ch+var_330]
.text:0040B9E0                 lea     esi, [esp+35Ch+String2]
.text:0040B9E4                 mov     ecx, [ebx]
.text:0040B9E6                 mov     [esp+35Ch+pvReserved], ebx
.text:0040B9E9                 mov     [esp+35Ch+ppv], 0
.text:0040B9F1                 mov     [esp+35Ch+riid], 0
.text:0040B9F9                 mov     [esp+35Ch+dwClsContext], 104h
.text:0040BA01                 mov     [esp+35Ch+pUnkOuter], esi
.text:0040BA05                 call    dword ptr [ecx+0Ch]
.text:0040BA08                 sub     esp, 14h
.text:0040BA0B                 mov     ebx, eax
.text:0040BA0D                 test    eax, eax
.text:0040BA0F                 js      short loc_40BA4F
.text:0040BA11                 mov     [esp+35Ch+pUnkOuter], esi ; lpString2
.text:0040BA15                 mov     [esp+35Ch+pvReserved], edi ; lpString1
.text:0040BA18                 call    lstrcpyA
.text:0040BA1D                 sub     esp, 8
.text:0040BA20                 mov     edi, dword ptr [esp+35Ch+var_334]
.text:0040BA24                 mov     ecx, [edi]
.text:0040BA26                 mov     [esp+35Ch+pvReserved], edi
.text:0040BA29                 call    dword ptr [ecx+8]
.text:0040BA2C                 sub     esp, 4
.text:0040BA2F                 mov     edx, [esp+35Ch+var_330]
.text:0040BA33                 mov     esi, [edx]
.text:0040BA35                 mov     [esp+35Ch+pvReserved], edx
.text:0040BA38                 call    dword ptr [esi+8]
.text:0040BA3B                 sub     esp, 4
.text:0040BA3E                 call    CoUninitialize
.text:0040BA43                 mov     eax, ebx
.text:0040BA45
.text:0040BA45 loc_40BA45:                             ; CODE XREF: sub_40B8F0+177↓j
.text:0040BA45                 add     esp, 350h
.text:0040BA4B                 pop     ebx
.text:0040BA4C                 pop     esi
.text:0040BA4D                 pop     edi
.text:0040BA4E                 retn
.text:0040BA4F ; ---------------------------------------------------------------------------
.text:0040BA4F
.text:0040BA4F loc_40BA4F:                             ; CODE XREF: sub_40B8F0+25↑j
.text:0040BA4F                                         ; sub_40B8F0+5C↑j ...
.text:0040BA4F                 call    sub_409170
.text:0040BA54                 mov     edi, eax
.text:0040BA56                 call    _errno
.text:0040BA5B                 mov     [eax], edi
.text:0040BA5D                 call    CoUninitialize
.text:0040BA62                 mov     eax, 0FFFFFFFFh
.text:0040BA67                 jmp     short loc_40BA45
.text:0040BA67 sub_40B8F0      endp
.text:0040BA67
.text:0040BA67 ; ---------------------------------------------------------------------------
.text:0040BA69 ; const char Source[]
.text:0040BA69 Source          db '.lnk',0             ; DATA XREF: sub_40BA70+53↓o
.text:0040BA69                                         ; sub_40BA70:loc_40BAD5↓o
.text:0040BA6E                 align 10h
.text:0040BA70
.text:0040BA70 ; =============== S U B R O U T I N E =======================================
.text:0040BA70
.text:0040BA70
.text:0040BA70 ; int __cdecl sub_40BA70(char *, LPSTR lpString1)
.text:0040BA70 sub_40BA70      proc near               ; CODE XREF: sub_40B6F0+96↑p
.text:0040BA70
.text:0040BA70 Str             = dword ptr -1Ch
.text:0040BA70 Source          = dword ptr -18h
.text:0040BA70 Destination     = dword ptr -14h
.text:0040BA70 arg_0           = dword ptr  4
.text:0040BA70 lpString1       = dword ptr  8
.text:0040BA70
.text:0040BA70                 push    ebp
.text:0040BA71                 push    edi
.text:0040BA72                 push    esi
.text:0040BA73                 push    ebx
.text:0040BA74                 sub     esp, 0Ch
.text:0040BA77                 mov     ebx, [esp+1Ch+arg_0]
.text:0040BA7B                 mov     ebp, [esp+1Ch+lpString1]
.text:0040BA7F                 mov     [esp+1Ch+Str], ebx ; Str
.text:0040BA82                 call    strlen
.text:0040BA87                 add     eax, 5
.text:0040BA8A                 mov     [esp+1Ch+Str], eax ; Size
.text:0040BA8D                 call    malloc
.text:0040BA92                 mov     [esp+1Ch+Destination], eax
.text:0040BA96                 test    eax, eax
.text:0040BA98                 jz      loc_40BB40
.text:0040BA9E                 mov     [esp+1Ch+Source], ebx ; Source
.text:0040BAA2                 mov     [esp+1Ch+Str], eax ; Destination
.text:0040BAA5                 call    strcpy
.text:0040BAAA                 mov     [esp+1Ch+Source], 2Eh ; '.' ; Ch
.text:0040BAB2                 mov     eax, [esp+1Ch+Destination]
.text:0040BAB6                 mov     [esp+1Ch+Str], eax ; Str
.text:0040BAB9                 call    strrchr
.text:0040BABE                 test    eax, eax
.text:0040BAC0                 jz      short loc_40BAD5
.text:0040BAC2                 cld
.text:0040BAC3                 mov     ebx, offset Source ; ".lnk"
.text:0040BAC8                 mov     ecx, 5
.text:0040BACD                 mov     esi, eax
.text:0040BACF                 mov     edi, ebx
.text:0040BAD1                 repe cmpsb
.text:0040BAD3                 jz      short loc_40BAE9
.text:0040BAD5
.text:0040BAD5 loc_40BAD5:                             ; CODE XREF: sub_40BA70+50↑j
.text:0040BAD5                 mov     [esp+1Ch+Source], offset Source ; ".lnk"
.text:0040BADD                 mov     edx, [esp+1Ch+Destination]
.text:0040BAE1                 mov     [esp+1Ch+Str], edx ; Destination
.text:0040BAE4                 call    strcat
.text:0040BAE9
.text:0040BAE9 loc_40BAE9:                             ; CODE XREF: sub_40BA70+63↑j
.text:0040BAE9                 mov     [esp+1Ch+Str], 8001h ; uMode
.text:0040BAF0                 call    SetErrorMode
.text:0040BAF5                 sub     esp, 4
.text:0040BAF8                 mov     ebx, [esp+1Ch+Destination]
.text:0040BAFC                 mov     [esp+1Ch+Source], ebp ; lpString1
.text:0040BB00                 mov     [esp+1Ch+Str], ebx ; lpMultiByteStr
.text:0040BB03                 call    sub_40B8F0
.text:0040BB08                 mov     [esp+1Ch+Str], ebx ; Block
.text:0040BB0B                 mov     esi, eax
.text:0040BB0D                 call    free
.text:0040BB12                 mov     [esp+1Ch+Str], 0 ; uMode
.text:0040BB19                 call    SetErrorMode
.text:0040BB1E                 sub     esp, 4
.text:0040BB21                 mov     [esp+1Ch+Str], ebp
.text:0040BB24                 call    sub_407CF0
.text:0040BB29                 inc     esi
.text:0040BB2A                 jz      short loc_40BB40
.text:0040BB2C                 mov     [esp+1Ch+arg_0], ebp
.text:0040BB30                 add     esp, 0Ch
.text:0040BB33                 pop     ebx
.text:0040BB34                 pop     esi
.text:0040BB35                 pop     edi
.text:0040BB36                 pop     ebp
.text:0040BB37                 jmp     strlen
.text:0040BB37 ; ---------------------------------------------------------------------------
.text:0040BB3C                 align 10h
.text:0040BB40
.text:0040BB40 loc_40BB40:                             ; CODE XREF: sub_40BA70+28↑j
.text:0040BB40                                         ; sub_40BA70+BA↑j
.text:0040BB40                 add     esp, 0Ch
.text:0040BB43                 mov     eax, 0FFFFFFFFh
.text:0040BB48                 pop     ebx
.text:0040BB49                 pop     esi
.text:0040BB4A                 pop     edi
.text:0040BB4B                 pop     ebp
.text:0040BB4C                 retn
.text:0040BB4C sub_40BA70      endp
.text:0040BB4C
.text:0040BB4C ; ---------------------------------------------------------------------------
.text:0040BB4D                 align 10h
.text:0040BB50
.text:0040BB50 ; =============== S U B R O U T I N E =======================================
.text:0040BB50
.text:0040BB50
.text:0040BB50 sub_40BB50      proc near               ; CODE XREF: .text:0040B8DB↑p
.text:0040BB50                 xor     eax, eax
.text:0040BB52                 retn
.text:0040BB52 sub_40BB50      endp
.text:0040BB52
.text:0040BB52 ; ---------------------------------------------------------------------------
.text:0040BB53                 align 10h
.text:0040BB60
.text:0040BB60 ; =============== S U B R O U T I N E =======================================
.text:0040BB60
.text:0040BB60
.text:0040BB60 sub_40BB60      proc near               ; CODE XREF: .text:loc_40B8D4↑p
.text:0040BB60                 xor     eax, eax
.text:0040BB62                 retn
.text:0040BB62 sub_40BB60      endp
.text:0040BB62
.text:0040BB62 ; ---------------------------------------------------------------------------
.text:0040BB63                 align 10h
.text:0040BB70
.text:0040BB70 ; =============== S U B R O U T I N E =======================================
.text:0040BB70
.text:0040BB70
.text:0040BB70 sub_40BB70      proc near               ; CODE XREF: .text:0040B8B4↑p
.text:0040BB70                 xor     eax, eax
.text:0040BB72                 retn
.text:0040BB72 sub_40BB70      endp
.text:0040BB72
.text:0040BB72 ; ---------------------------------------------------------------------------
.text:0040BB73                 align 10h
.text:0040BB80
.text:0040BB80 ; =============== S U B R O U T I N E =======================================
.text:0040BB80
.text:0040BB80
.text:0040BB80 sub_40BB80      proc near               ; CODE XREF: .text:0040B8AD↑p
.text:0040BB80                 xor     eax, eax
.text:0040BB82                 retn
.text:0040BB82 sub_40BB80      endp
.text:0040BB82
.text:0040BB82 ; ---------------------------------------------------------------------------
.text:0040BB83                 align 10h
.text:0040BB90
.text:0040BB90 ; =============== S U B R O U T I N E =======================================
.text:0040BB90
.text:0040BB90 ; Attributes: thunk
.text:0040BB90
.text:0040BB90 ; HRESULT __stdcall OleInitialize(LPVOID pvReserved)
.text:0040BB90 OleInitialize   proc near               ; CODE XREF: sub_40B8F0+1A↑p
.text:0040BB90
.text:0040BB90 pvReserved      = dword ptr  4
.text:0040BB90
.text:0040BB90                 jmp     ds:__imp_OleInitialize
.text:0040BB90 OleInitialize   endp
.text:0040BB90
.text:0040BB90 ; ---------------------------------------------------------------------------
.text:0040BB96                 align 10h
.text:0040BBA0
.text:0040BBA0 ; =============== S U B R O U T I N E =======================================
.text:0040BBA0
.text:0040BBA0 ; Attributes: thunk
.text:0040BBA0
.text:0040BBA0 ; HRESULT __stdcall CoCreateInstance(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.text:0040BBA0 CoCreateInstance proc near              ; CODE XREF: sub_40B8F0+52↑p
.text:0040BBA0
.text:0040BBA0 rclsid          = dword ptr  4
.text:0040BBA0 pUnkOuter       = dword ptr  8
.text:0040BBA0 dwClsContext    = dword ptr  0Ch
.text:0040BBA0 riid            = dword ptr  10h
.text:0040BBA0 ppv             = dword ptr  14h
.text:0040BBA0
.text:0040BBA0                 jmp     ds:__imp_CoCreateInstance
.text:0040BBA0 CoCreateInstance endp
.text:0040BBA0
.text:0040BBA0 ; ---------------------------------------------------------------------------
.text:0040BBA6                 align 10h
.text:0040BBB0
.text:0040BBB0 ; =============== S U B R O U T I N E =======================================
.text:0040BBB0
.text:0040BBB0 ; Attributes: thunk
.text:0040BBB0
.text:0040BBB0 ; void __stdcall CoUninitialize()
.text:0040BBB0 CoUninitialize  proc near               ; CODE XREF: sub_40B8F0+14E↑p
.text:0040BBB0                                         ; sub_40B8F0+16D↑p
.text:0040BBB0                 jmp     ds:__imp_CoUninitialize
.text:0040BBB0 CoUninitialize  endp
.text:0040BBB0
.text:0040BBB0 ; ---------------------------------------------------------------------------
.text:0040BBB6                 align 10h
.text:0040BBC0                 add     al, 0BAh ; 'º'
.text:0040BBC2                 retf
.text:0040BBC2 ; ---------------------------------------------------------------------------
.text:0040BBC3                 db 7Eh
.text:0040BBC4                 dd 11CF2D97h, 0AA0029A2h, 52733D00h, 40FC6ED4h, 11CF2438h
.text:0040BBC4                 dd 8DBA3h, 225F136h, 40FC6ED8h, 11CF2438h, 8DBA3h, 225F136h
.text:0040BBC4                 dd 40FC6ED3h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A58h, 11CF2BAAh
.text:0040BBC4                 dd 0AA0029A2h, 52733D00h, 40FC6ED6h, 11CF2438h, 8DBA3h
.text:0040BBC4                 dd 225F136h, 40FC6ED7h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A56h
.text:0040BBC4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A55h, 11CF2BAAh
.text:0040BBC4                 dd 0AA0029A2h, 52733D00h, 0DE86A51h, 11CF2BAAh, 0AA0029A2h
.text:0040BBC4                 dd 52733D00h, 0DE86A57h, 11CF2BAAh, 0AA0029A2h, 52733D00h
.text:0040BBC4                 dd 0DE86A52h, 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A54h
.text:0040BBC4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 0DE86A53h, 11CF2BAAh
.text:0040BBC4                 dd 0AA0029A2h, 52733D00h, 40FC6ED9h, 11CF2438h, 8DBA3h
.text:0040BBC4                 dd 225F136h, 40FC6ED5h, 11CF2438h, 8DBA3h, 225F136h, 0DE86A50h
.text:0040BBC4                 dd 11CF2BAAh, 0AA0029A2h, 52733D00h, 7DD95802h, 11CF9882h
.text:0040BBC4                 dd 0AA00A99Fh, 0C4426C00h, 7DD95801h, 11CF9882h, 0AA00A99Fh
.text:0040BBC4                 dd 0C4426C00h, 330h, 0
.text:0040BCF8                 dd 0C0h, 46000000h, 0BE35201h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BCF8                 dd 0BE35200h, 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0BE35202h
.text:0040BCF8                 dd 11CE8F91h, 0AA00E39Dh, 51B84B00h, 0FB8F0822h, 101B0164h
.text:0040BCF8                 dd 8ED84h, 13C72E2Bh, 332h, 0
.text:0040BD48                 dd 0C0h, 46000000h, 79EAC9E7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BD48                 dd 79EAC9E3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E4h
.text:0040BD48                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E2h, 11CEBAF9h
.text:0040BD48                 dd 0AA00828Ch, 0BA94B00h, 79EAC9E5h, 11CEBAF9h, 0AA00828Ch
.text:0040BD48                 dd 0BA94B00h, 1Bh, 0
.text:0040BDA8                 dd 0C0h, 46000000h, 1Ch, 0
.text:0040BDB8                 dd 0C0h, 46000000h, 331h, 0
.text:0040BDC8                 dd 0C0h, 46000000h, 79EAC9E6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BDC8                 dd 312h, 0
.text:0040BDE8                 dd 0C0h, 46000000h, 30Eh, 0
.text:0040BDF8                 dd 0C0h, 46000000h, 30Dh, 0
.text:0040BE08                 dd 0C0h, 46000000h, 311h, 0
.text:0040BE18                 dd 0C0h, 46000000h, 313h, 0
.text:0040BE28                 dd 0C0h, 46000000h, 30Ch, 0
.text:0040BE38                 dd 0C0h, 46000000h, 30Fh, 0
.text:0040BE48                 dd 0C0h, 46000000h, 310h, 0
.text:0040BE58                 dd 0C0h, 46000000h, 79EAC9F1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040BE58                 dd 0FB8F0821h, 101B0164h, 8ED84h, 13C72E2Bh, 316h, 0
.text:0040BE88                 dd 0C0h, 46000000h, 319h, 0
.text:0040BE98                 dd 0C0h, 46000000h, 315h, 0
.text:0040BEA8                 dd 0C0h, 46000000h, 316h, 0
.text:0040BEB8                 dd 0C0h, 46000000h, 315h, 0
.text:0040BEC8                 dd 0C0h, 46000000h, 2E005h, 0
.text:0040BED8                 dd 0C0h, 46000000h, 0BE35203h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BED8                 dd 79EAC9D0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D1h
.text:0040BED8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 17h, 0
.text:0040BF18                 dd 0C0h, 46000000h, 0BE35204h, 11CE8F91h, 0AA00E39Dh, 51B84B00h
.text:0040BF18                 dd 79EAC9E0h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9E1h
.text:0040BF18                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 8856F961h, 11D0340Ah
.text:0040BF18                 dd 0C0006BA9h, 0A205D74Fh, 0EAB22AC2h, 11CF30C1h, 0EBA7h
.text:0040BF18                 dd 0BAE5BC0h, 34A715A0h, 11D06587h, 20004A92h, 4DACC7AFh
.text:0040BF18                 dd 96300DA0h, 11CF2BABh, 0AA0029A2h, 52733D00h, 0D5CDD502h
.text:0040BF18                 dd 101B2E9Ch, 89793h, 0AEF92C2Bh, 0F29F85E0h, 10684FF9h
.text:0040BF18                 dd 891ABh, 0D9B3272Bh, 0D5CDD505h, 101B2E9Ch, 89793h, 0AEF92C2Bh
.text:0040BF18                 dd 6650430Ch, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504301h
.text:0040BF18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 6650430Fh, 101ABE0Fh
.text:0040BF18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504310h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BF18                 dd 0AB0C3000h, 6650430Dh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BF18                 dd 6650430Eh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504312h
.text:0040BF18                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504311h, 101ABE0Fh
.text:0040BF18                 dd 0AA00BB8Bh, 0AB0C3000h, 66504313h, 101ABE0Fh, 0AA00BB8Bh
.text:0040BF18                 dd 0AB0C3000h, 66504300h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040BF18                 dd 2DE81h, 0
.text:0040C068                 dd 0C0h, 46000000h, 4 dup(0)
.text:0040C080                 dd 6650430Bh, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 2DE80h
.text:0040C080                 dd 0
.text:0040C098                 dd 0C0h, 46000000h, 6650430Ah, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C098                 dd 66504306h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504302h
.text:0040C098                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504308h, 101ABE0Fh
.text:0040C098                 dd 0AA00BB8Bh, 0AB0C3000h, 66504304h, 101ABE0Fh, 0AA00BB8Bh
.text:0040C098                 dd 0AB0C3000h, 66504307h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h
.text:0040C098                 dd 66504303h, 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504309h
.text:0040C098                 dd 101ABE0Fh, 0AA00BB8Bh, 0AB0C3000h, 66504305h, 101ABE0Fh
.text:0040C098                 dd 0AA00BB8Bh, 0AB0C3000h, 618736E0h, 11CF3C3Dh, 0AA000C81h
.text:0040C098                 dd 719B3800h, 1EA4DBF0h, 11CF3C3Bh, 0AA000C81h, 719B3800h
.text:0040C098                 dd 0BB1A2AE1h, 11CFA4F9h, 8000208Fh, 64D02C5Fh, 0EAE1BA61h
.text:0040C098                 dd 11CFA4EDh, 8000208Fh, 64D02C5Fh, 0BB1A2AE2h, 11CFA4F9h
.text:0040C098                 dd 8000208Fh, 64D02C5Fh, 0DB01A1E3h, 11CFA42Bh, 8000208Fh
.text:0040C098                 dd 64D02C5Fh, 0D10F6761h, 11CF83E9h, 8000208Fh, 64D02C5Fh
.text:0040C098                 dd 10Fh, 0
.text:0040C1A8                 dd 0C0h, 46000000h, 125h, 0
.text:0040C1B8                 dd 0C0h, 46000000h, 3AF24290h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040C1B8                 dd 79EAC9D3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9D0h
.text:0040C1B8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0Eh, 0
.text:0040C1F8                 dd 0C0h, 46000000h, 0FC4801A1h, 11CF2BA9h, 0AA0029A2h
.text:0040C1F8                 dd 52733D00h, 79EAC9CDh, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C1F8                 dd 79EAC9C1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9CBh
.text:0040C1F8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C0h, 11CEBAF9h
.text:0040C1F8                 dd 0AA00828Ch, 0BA94B00h, 2E013h, 0
.text:0040C258                 dd 0C0h, 46000000h, 2E012h, 0
.text:0040C268                 dd 0C0h, 46000000h, 1008C4A0h, 11CF7613h, 2000F19Ah, 0F4726EAFh
.text:0040C268                 dd 140h, 0
.text:0040C288                 dd 0C0h, 46000000h, 1, 0
.text:0040C298                 dd 0C0h, 46000000h, 0B196B28Fh, 101ABAB4h, 0AA009CB6h
.text:0040C298                 dd 71D3400h, 13Dh, 0
.text:0040C2B8                 dd 0C0h, 46000000h, 0F4F569D1h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C2B8                 dd 79EAC9D1h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 0B196B286h
.text:0040C2B8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 0B196B284h, 101ABAB4h
.text:0040C2B8                 dd 0AA009CB6h, 71D3400h, 12Ah, 0
.text:0040C308                 dd 0C0h, 46000000h, 0B722BCCAh, 101B4E68h, 0AA00BCA2h
.text:0040C308                 dd 70474000h, 22F03340h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C308                 dd 20405h, 0
.text:0040C338                 dd 0C0h, 46000000h, 2040Eh, 0
.text:0040C348                 dd 0C0h, 46000000h, 20406h, 0
.text:0040C358                 dd 0C0h, 46000000h, 2040Fh, 0
.text:0040C368                 dd 0C0h, 46000000h, 110h, 0
.text:0040C378                 dd 0C0h, 46000000h, 10Eh, 0
.text:0040C388                 dd 0C0h, 46000000h, 123h, 0
.text:0040C398                 dd 0C0h, 46000000h, 124h, 0
.text:0040C3A8                 dd 0C0h, 46000000h, 13h, 0
.text:0040C3B8                 dd 0C0h, 46000000h, 14h, 0
.text:0040C3C8                 dd 0C0h, 46000000h, 15h, 0
.text:0040C3D8                 dd 0C0h, 46000000h, 20400h, 0
.text:0040C3E8                 dd 0C0h, 46000000h, 121h, 0
.text:0040C3F8                 dd 0C0h, 46000000h, 122h, 0
.text:0040C408                 dd 0C0h, 46000000h, 2E011h, 0
.text:0040C418                 dd 0C0h, 46000000h, 108h, 0
.text:0040C428                 dd 0C0h, 46000000h, 0B196B285h, 101ABAB4h, 0AA009CB6h
.text:0040C428                 dd 71D3400h, 0B196B287h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C428                 dd 103h, 0
.text:0040C458                 dd 0C0h, 46000000h, 2E000h, 0
.text:0040C468                 dd 0C0h, 46000000h, 106h, 0
.text:0040C478                 dd 0C0h, 46000000h, 79EAC9C6h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C478                 dd 107h, 0
.text:0040C498                 dd 0C0h, 46000000h, 102h, 0
.text:0040C4A8                 dd 0C0h, 46000000h, 104h, 0
.text:0040C4B8                 dd 0C0h, 46000000h, 0B722BCC8h, 101B4E68h, 0AA00BCA2h
.text:0040C4B8                 dd 70474000h, 0B3E7C340h, 11CEEF97h, 0AA00C99Bh, 18E6000h
.text:0040C4B8                 dd 105h, 0
.text:0040C4E8                 dd 0C0h, 46000000h, 13Bh, 0
.text:0040C4F8                 dd 0C0h, 46000000h, 139h, 0
.text:0040C508                 dd 0C0h, 46000000h, 0Dh, 0
.text:0040C518                 dd 0C0h, 46000000h, 3C374A42h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040C518                 dd 101h, 0
.text:0040C538                 dd 0C0h, 46000000h, 100h, 0
.text:0040C548                 dd 0C0h, 46000000h, 20404h, 0
.text:0040C558                 dd 0C0h, 46000000h, 1CF2B120h, 101B547Dh, 8658Eh, 19D12B2Bh
.text:0040C558                 dd 3127CA40h, 11CE446Eh, 0AA003581h, 51B84B00h, 19h, 0
.text:0040C588                 dd 0C0h, 46000000h, 99CAF010h, 11CF415Eh, 0AA001488h, 0F569B500h
.text:0040C588                 dd 89BCB740h, 101A6119h, 0DD00B7BCh, 0AF550601h, 0BEF6E002h
.text:0040C588                 dd 101AA874h, 0AA00BA8Bh, 0AB0C3000h, 0BEF6E003h, 101AA874h
.text:0040C588                 dd 0AA00BA8Bh, 0AB0C3000h, 146h, 0
.text:0040C5D8                 dd 0C0h, 46000000h, 79EAC9C3h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C5D8                 dd 79EAC9C7h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C5h
.text:0040C5D8                 dd 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 79EAC9C2h, 11CEBAF9h
.text:0040C5D8                 dd 0AA00828Ch, 0BA94B00h, 79EAC9C4h, 11CEBAF9h, 0AA00828Ch
.text:0040C5D8                 dd 0BA94B00h, 79EAC9D2h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h
.text:0040C5D8                 dd 79EAC9D7h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 11h, 0
.text:0040C658                 dd 0C0h, 46000000h, 0E6D4D90h, 11CF6738h, 0AA000896h, 0B40D6800h
.text:0040C658                 dd 0Ah, 0
.text:0040C678                 dd 0C0h, 46000000h, 2, 0
.text:0040C688                 dd 0C0h, 46000000h, 1Dh, 0
.text:0040C698                 dd 0C0h, 46000000h, 3, 0
.text:0040C6A8                 dd 0C0h, 46000000h, 16h, 0
.text:0040C6B8                 dd 0C0h, 46000000h, 0F77459A0h, 11CFBF9Ah, 0C0004EBAh
.text:0040C6B8                 dd 1608D74Fh, 0Fh, 0
.text:0040C6D8                 dd 0C0h, 46000000h, 20h, 0
.text:0040C6E8                 dd 0C0h, 46000000h, 0CB5BDC81h, 11CF93C1h, 8000208Fh, 64D02C5Fh
.text:0040C6E8                 dd 0FC4801A3h, 11CF2BA9h, 0AA0029A2h, 52733D00h, 111h
.text:0040C6E8                 dd 0
.text:0040C718                 dd 0C0h, 46000000h, 11Eh, 0
.text:0040C728                 dd 0C0h, 46000000h, 128h, 0
.text:0040C738                 dd 0C0h, 46000000h, 129h, 0
.text:0040C748                 dd 0C0h, 46000000h, 118h, 0
.text:0040C758                 dd 0C0h, 46000000h, 0B722BCCBh, 101B4E68h, 0AA00BCA2h
.text:0040C758                 dd 70474000h, 11Bh, 0
.text:0040C778                 dd 0C0h, 46000000h, 0B196B288h, 101ABAB4h, 0AA009CB6h
.text:0040C778                 dd 71D3400h, 0B196B289h, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C778                 dd 0B722BCC5h, 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC7h
.text:0040C778                 dd 101B4E68h, 0AA00BCA2h, 70474000h, 0B722BCC6h, 101B4E68h
.text:0040C778                 dd 0AA00BCA2h, 70474000h, 117h, 0
.text:0040C7D8                 dd 0C0h, 46000000h, 116h, 0
.text:0040C7E8                 dd 0C0h, 46000000h, 113h, 0
.text:0040C7F8                 dd 0C0h, 46000000h, 1C2056CCh, 101B5EF4h, 0AA00C88Bh, 293B3E00h
.text:0040C7F8                 dd 119h, 0
.text:0040C818                 dd 0C0h, 46000000h, 9C2CAD80h, 11CF3424h, 0AA0070B6h, 0D8D64C00h
.text:0040C818                 dd 922EADA0h, 11CF3424h, 0AA0070B6h, 0D8D64C00h, 115h
.text:0040C818                 dd 0
.text:0040C848                 dd 0C0h, 46000000h, 11Ch, 0
.text:0040C858                 dd 0C0h, 46000000h, 11Dh, 0
.text:0040C868                 dd 0C0h, 46000000h, 11Fh, 0
.text:0040C878                 dd 0C0h, 46000000h, 112h, 0
.text:0040C888                 dd 0C0h, 46000000h, 0A1FAF330h, 11CEEF97h, 0AA00C99Bh
.text:0040C888                 dd 18E6000h, 120h, 0
.text:0040C8A8                 dd 0C0h, 46000000h, 97D001F2h, 9B11CEEFh, 0AA00C9h, 18E60h
.text:0040C8A8                 dd 0D001F200h, 11CEEF97h, 0AA00C99Bh, 18E6000h, 894AD3B0h
.text:0040C8A8                 dd 11CEEF97h, 0AA00C99Bh, 18E6000h, 114h, 0
.text:0040C8E8                 dd 0C0h, 46000000h, 521A28F0h, 11CEE40Bh, 0AA00C9B2h, 37096800h
.text:0040C8E8                 dd 49384070h, 11CEE40Ah, 0AA00C9B2h, 37096800h, 9, 0
.text:0040C918                 dd 0C0h, 46000000h, 0D5F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040C918                 dd 11Ah, 0
.text:0040C938                 dd 0C0h, 46000000h, 376BD3AAh, 101B3845h, 8ED84h, 13C72E2Bh
.text:0040C938                 dd 10Ch, 0
.text:0040C958                 dd 0C0h, 46000000h
.text:0040C960 dword_40C960    dd 10Bh, 0              ; DATA XREF: sub_40B8F0+75↑o
.text:0040C968                 dd 0C0h, 46000000h, 0BD1AE5E0h, 11CEA6AEh, 425037BDh, 0C100h
.text:0040C968                 dd 79EAC9C9h, 11CEBAF9h, 0AA00828Ch, 0BA94B00h, 37D84F60h
.text:0040C968                 dd 11CE42CBh, 0AA003581h, 51B84B00h, 22F55881h, 11D0280Bh
.text:0040C968                 dd 0A000A9A8h, 4200CC9h, 10Ah, 0
.text:0040C9B8                 dd 0C0h, 46000000h, 109h, 0
.text:0040C9C8                 dd 0C0h, 46000000h, 7FD52380h, 101B4E07h, 82DAEh, 13C72E2Bh
.text:0040C9C8                 dd 7BF80980h, 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 7BF80981h
.text:0040C9C8                 dd 101ABF32h, 0AA00BB8Bh, 0AB0C3000h, 55980BA0h, 11CF35AAh
.text:0040C9C8                 dd 0AA0071B6h, 0D8D64C00h, 0B722BCC9h, 101B4E68h, 0AA00BCA2h
.text:0040C9C8                 dd 70474000h, 0A9D758A0h, 11CF4617h, 0AA00FC95h, 0B40D6800h
.text:0040C9C8                 dd 55272A00h, 11CE42CBh, 0AA003581h, 51B84B00h, 22F55882h
.text:0040C9C8                 dd 11D0280Bh, 0A000A9A8h, 4200CC9h, 0B196B28Ah, 101ABAB4h
.text:0040C9C8                 dd 0AA009CB6h, 71D3400h, 9BFBBC02h, 101AEFF1h, 0AA00ED84h
.text:0040C9C8                 dd 71D3400h, 0B196B28Dh, 101ABAB4h, 0AA009CB6h, 71D3400h
.text:0040C9C8                 dd 1E44665h, 101B24ACh, 8ED84h, 13C72E2Bh, 0B196B28Ch
.text:0040C9C8                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 13Ah, 0
.text:0040CAA8                 dd 0C0h, 46000000h, 138h, 0
.text:0040CAB8                 dd 0C0h, 46000000h, 0B196B283h, 101ABAB4h, 0AA009CB6h
.text:0040CAB8                 dd 71D3400h, 0A6BC3AC0h, 11CEDBAAh, 0AA00E39Dh, 51B84B00h
.text:0040CAB8                 dd 27h, 0
.text:0040CAE8                 dd 0C0h, 46000000h, 8, 0
.text:0040CAF8                 dd 0C0h, 46000000h, 0CF51ED10h, 11CF62FEh, 0A00086BFh
.text:0040CAF8                 dd 364803C9h, 0F29F6BC0h, 11CE5021h, 15AAh, 3F290169h
.text:0040CAF8                 dd 20D00h, 0
.text:0040CB28                 dd 0C0h, 46000000h, 20D03h, 0
.text:0040CB38                 dd 0C0h, 46000000h, 12h, 0
.text:0040CB48                 dd 0C0h, 46000000h, 4, 0
.text:0040CB58                 dd 0C0h, 46000000h, 0D5F56B60h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CB58                 dd 7, 0
.text:0040CB78                 dd 0C0h, 46000000h, 0D5F56A34h, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CB78                 dd 3BD5F56Ah, 0B5101A59h, 2B000869h, 7ABF2Dh, 5, 0
.text:0040CBA8                 dd 0C0h, 46000000h, 0D5F56AFCh, 101A593Bh, 869B5h, 7ABF2D2Bh
.text:0040CBA8                 dd 126h, 0
.text:0040CBC8                 dd 0C0h, 46000000h, 10h, 0
.text:0040CBD8                 dd 0C0h, 46000000h, 0C733A30h, 11CE2A1Ch, 0AA00E5ADh, 3D774400h
.text:0040CBD8                 dd 0F4F569D0h, 101A593Bh, 869B5h, 7ABF2D2Bh, 13Eh, 0
.text:0040CC08                 dd 0C0h, 46000000h, 6D5140C1h, 11CE7436h, 0AA003480h, 0FA096000h
.text:0040CC08                 dd 742B0E01h, 101B14E6h, 0AA004E91h, 0AB0C3000h, 0B196B28Bh
.text:0040CC08                 dd 101ABAB4h, 0AA009CB6h, 71D3400h, 18h, 0
.text:0040CC48                 dd 0C0h, 46000000h, 0Bh, 0
.text:0040CC58                 dd 0C0h, 46000000h, 0Ch, 0
.text:0040CC68                 dd 0C0h, 46000000h, 26h, 0
.text:0040CC78                 dd 0C0h, 46000000h, 6, 0
.text:0040CC88                 dd 0C0h, 46000000h, 0DF0B3D60h, 101B548Fh, 8658Eh, 19D12B2Bh
.text:0040CC88                 dd 548793C0h, 11CF9E74h, 0A0005596h, 234903C9h, 0D5F78C80h
.text:0040CC88                 dd 11CF5252h, 0AA00FA90h, 6E104200h, 20410h, 0
.text:0040CCC8                 dd 0C0h, 46000000h, 20403h, 0
.text:0040CCD8                 dd 0C0h, 46000000h, 20401h, 0
.text:0040CCE8                 dd 0C0h, 46000000h, 20412h, 0
.text:0040CCF8                 dd 0C0h, 46000000h, 20402h, 0
.text:0040CD08                 dd 0C0h, 46000000h, 20411h, 0
.text:0040CD18                 dd 0C0h, 46000000h, 2 dup(0)
.text:0040CD28                 dd 0C0h, 46000000h, 3C374A41h, 11CFBAE4h, 0AA007DBFh, 0EE466900h
.text:0040CD28                 dd 10Dh, 0
.text:0040CD48                 dd 0C0h, 46000000h, 127h, 0
.text:0040CD58                 dd 0C0h, 46000000h, 3AF24292h, 11CE0C96h, 0AA00CFA0h, 0B80A6000h
.text:0040CD58                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0D30C1661h
.text:0040CD58                 dd 11D0CDAFh, 0C0003E8Ah, 6EE2C94Fh, 2DF05h, 0
.text:0040CD98                 dd 0C0h, 46000000h, 79EAC9D8h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h
.text:0040CD98                 dd 79EAC9D6h, 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 79EAC9D5h
.text:0040CD98                 dd 11CEBAFAh, 0AA00828Ch, 0BA94B00h, 20430h, 0
.text:0040CDD8                 dd 0C0h, 46000000h, 2DE0Eh, 0
.text:0040CDE8                 dd 0C0h, 46000000h, 2DE18h, 0
.text:0040CDF8                 dd 0C0h, 46000000h, 2DE1Eh, 0
.text:0040CE08                 dd 0C0h, 46000000h, 2DE19h, 0
.text:0040CE18                 dd 0C0h, 46000000h, 2DE0Fh, 0
.text:0040CE28                 dd 0C0h, 46000000h, 2DE12h, 0
.text:0040CE38                 dd 0C0h, 46000000h, 2DE21h, 0
.text:0040CE48                 dd 0C0h, 46000000h, 2DE01h, 0
.text:0040CE58                 dd 0C0h, 46000000h, 2DE0Bh, 0
.text:0040CE68                 dd 0C0h, 46000000h, 2DE0Dh, 0
.text:0040CE78                 dd 0C0h, 46000000h, 2DE02h, 0
.text:0040CE88                 dd 0C0h, 46000000h, 2DE1Fh, 0
.text:0040CE98                 dd 0C0h, 46000000h, 2DE04h, 0
.text:0040CEA8                 dd 0C0h, 46000000h, 2DE0Ch, 0
.text:0040CEB8                 dd 0C0h, 46000000h, 2DE05h, 0
.text:0040CEC8                 dd 0C0h, 46000000h, 2DE1Ch, 0
.text:0040CED8                 dd 0C0h, 46000000h, 2DE06h, 0
.text:0040CEE8                 dd 0C0h, 46000000h, 2DE13h, 0
.text:0040CEF8                 dd 0C0h, 46000000h, 2DE10h, 0
.text:0040CF08                 dd 0C0h, 46000000h, 2DE22h, 0
.text:0040CF18                 dd 0C0h, 46000000h, 2DE09h, 0
.text:0040CF28                 dd 0C0h, 46000000h, 2DE23h, 0
.text:0040CF38                 dd 0C0h, 46000000h, 2DE0Ah, 0
.text:0040CF48                 dd 0C0h, 46000000h, 2DE1Dh, 0
.text:0040CF58                 dd 0C0h, 46000000h, 2DE11h, 0
.text:0040CF68                 dd 0C0h, 46000000h, 2DE15h, 0
.text:0040CF78                 dd 0C0h, 46000000h, 2DE1Bh, 0
.text:0040CF88                 dd 0C0h, 46000000h, 2DE16h, 0
.text:0040CF98                 dd 0C0h, 46000000h, 2DE20h, 0
.text:0040CFA8                 dd 0C0h, 46000000h, 2DE07h, 0
.text:0040CFB8                 dd 0C0h, 46000000h, 2DE1Ah, 0
.text:0040CFC8                 dd 0C0h, 46000000h, 2DE17h, 0
.text:0040CFD8                 dd 0C0h, 46000000h, 2DE14h, 0
.text:0040CFE8                 dd 0C0h, 46000000h, 2DE03h, 0
.text:0040CFF8                 dd 0C0h, 46000000h, 2DE08h, 0
.text:0040D008                 dd 0C0h, 46000000h, 0B722BE00h, 101B4E68h, 0AA00BCA2h
.text:0040D008                 dd 70474000h, 0FC4801A5h, 11CF2BA9h, 0AA0029A2h, 52733D00h
.text:0040D030
.text:0040D030 ; =============== S U B R O U T I N E =======================================
.text:0040D030
.text:0040D030 ; Attributes: thunk
.text:0040D030
.text:0040D030 ; size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.text:0040D030 mbrtowc         proc near               ; CODE XREF: sub_404460+757↑p
.text:0040D030
.text:0040D030 DstCh           = dword ptr  4
.text:0040D030 SrcCh           = dword ptr  8
.text:0040D030 SizeInBytes     = dword ptr  0Ch
.text:0040D030 State           = dword ptr  10h
.text:0040D030
.text:0040D030                 jmp     ds:__imp_mbrtowc
.text:0040D030 mbrtowc         endp
.text:0040D030
.text:0040D030 ; ---------------------------------------------------------------------------
.text:0040D036                 align 10h
.text:0040D040
.text:0040D040 ; =============== S U B R O U T I N E =======================================
.text:0040D040
.text:0040D040 ; Attributes: bp-based frame
.text:0040D040
.text:0040D040 sub_40D040      proc near               ; CODE XREF: sub_401080+C2↑p
.text:0040D040                 push    ebp
.text:0040D041                 mov     ecx, offset dword_40F000
.text:0040D046                 cmp     ecx, offset dword_40F000
.text:0040D04C                 mov     ebp, esp
.text:0040D04E                 jnb     short loc_40D066
.text:0040D050
.text:0040D050 loc_40D050:                             ; CODE XREF: sub_40D040+24↓j
.text:0040D050                 mov     edx, [ecx+4]
.text:0040D053                 mov     eax, [ecx]
.text:0040D055                 add     ecx, 8
.text:0040D058                 add     [edx+400000h], eax
.text:0040D05E                 cmp     ecx, offset dword_40F000
.text:0040D064                 jb      short loc_40D050
.text:0040D066
.text:0040D066 loc_40D066:                             ; CODE XREF: sub_40D040+E↑j
.text:0040D066                 pop     ebp
.text:0040D067                 retn
.text:0040D067 sub_40D040      endp
.text:0040D067
.text:0040D067 ; ---------------------------------------------------------------------------
.text:0040D068                 align 10h
.text:0040D070
.text:0040D070 ; =============== S U B R O U T I N E =======================================
.text:0040D070
.text:0040D070 ; Attributes: bp-based frame
.text:0040D070
.text:0040D070 sub_40D070      proc near               ; CODE XREF: sub_401080+16↑p
.text:0040D070                                         ; TopLevelExceptionFilter+D7↑p
.text:0040D070                 push    ebp
.text:0040D071                 mov     ebp, esp
.text:0040D073                 fninit
.text:0040D075                 pop     ebp
.text:0040D076                 retn
.text:0040D076 sub_40D070      endp
.text:0040D076
.text:0040D076 ; ---------------------------------------------------------------------------
.text:0040D077                 align 10h
.text:0040D080
.text:0040D080 ; =============== S U B R O U T I N E =======================================
.text:0040D080
.text:0040D080 ; Attributes: bp-based frame
.text:0040D080
.text:0040D080 ; void __cdecl sub_40D080()
.text:0040D080 sub_40D080      proc near               ; DATA XREF: .text:loc_40D0C9↓o
.text:0040D080                                         ; sub_40D110:loc_40D13E↓o
.text:0040D080                 push    ebp
.text:0040D081                 mov     ebp, esp
.text:0040D083                 sub     esp, 8
.text:0040D086                 mov     eax, off_40E0F4
.text:0040D08B                 mov     edx, [eax]
.text:0040D08D                 test    edx, edx
.text:0040D08F                 jnz     short loc_40D095
.text:0040D091
.text:0040D091 loc_40D091:                             ; CODE XREF: sub_40D080+2C↓j
.text:0040D091                 mov     esp, ebp
.text:0040D093                 pop     ebp
.text:0040D094                 retn
.text:0040D095 ; ---------------------------------------------------------------------------
.text:0040D095
.text:0040D095 loc_40D095:                             ; CODE XREF: sub_40D080+F↑j
.text:0040D095                                         ; sub_40D080+2A↓j
.text:0040D095                 call    dword ptr [eax]
.text:0040D097                 mov     edx, off_40E0F4
.text:0040D09D                 mov     ecx, [edx+4]
.text:0040D0A0                 lea     eax, [edx+4]
.text:0040D0A3                 mov     off_40E0F4, eax
.text:0040D0A8                 test    ecx, ecx
.text:0040D0AA                 jnz     short loc_40D095
.text:0040D0AC                 jmp     short loc_40D091
.text:0040D0AC sub_40D080      endp
.text:0040D0AC
.text:0040D0AC ; ---------------------------------------------------------------------------
.text:0040D0AE                 align 10h
.text:0040D0B0                 push    ebp
.text:0040D0B1                 mov     ebp, esp
.text:0040D0B3                 sub     esp, 8
.text:0040D0B6                 mov     [ebp-4], ebx
.text:0040D0B9                 mov     eax, ds:dword_40DE90
.text:0040D0BE                 cmp     eax, 0FFFFFFFFh
.text:0040D0C1                 jz      short loc_40D0EC
.text:0040D0C3
.text:0040D0C3 loc_40D0C3:                             ; CODE XREF: .text:0040D0F6↓j
.text:0040D0C3                                         ; .text:0040D109↓j
.text:0040D0C3                 test    eax, eax
.text:0040D0C5                 mov     ebx, eax
.text:0040D0C7                 jnz     short loc_40D0E0
.text:0040D0C9
.text:0040D0C9 loc_40D0C9:                             ; CODE XREF: .text:0040D0EA↓j
.text:0040D0C9                 mov     dword ptr [esp], offset sub_40D080
.text:0040D0D0                 call    sub_401040
.text:0040D0D5                 mov     ebx, [ebp-4]
.text:0040D0D8                 mov     esp, ebp
.text:0040D0DA                 pop     ebp
.text:0040D0DB                 retn
.text:0040D0DB ; ---------------------------------------------------------------------------
.text:0040D0DC                 align 10h
.text:0040D0E0
.text:0040D0E0 loc_40D0E0:                             ; CODE XREF: .text:0040D0C7↑j
.text:0040D0E0                                         ; .text:0040D0E8↓j
.text:0040D0E0                 call    ds:dword_40DE90[ebx*4]
.text:0040D0E7                 dec     ebx
.text:0040D0E8                 jnz     short loc_40D0E0
.text:0040D0EA                 jmp     short loc_40D0C9
.text:0040D0EC ; ---------------------------------------------------------------------------
.text:0040D0EC
.text:0040D0EC loc_40D0EC:                             ; CODE XREF: .text:0040D0C1↑j
.text:0040D0EC                 mov     ecx, ds:dword_40DE94
.text:0040D0F2                 xor     eax, eax
.text:0040D0F4                 test    ecx, ecx
.text:0040D0F6                 jz      short loc_40D0C3
.text:0040D0F8                 mov     edx, offset dword_40DE90
.text:0040D0FD                 lea     esi, [esi+0]
.text:0040D100
.text:0040D100 loc_40D100:                             ; CODE XREF: .text:0040D107↓j
.text:0040D100                 inc     eax
.text:0040D101                 mov     ecx, [edx+eax*4+4]
.text:0040D105                 test    ecx, ecx
.text:0040D107                 jnz     short loc_40D100
.text:0040D109                 jmp     short loc_40D0C3
.text:0040D109 ; ---------------------------------------------------------------------------
.text:0040D10B                 align 10h
.text:0040D110
.text:0040D110 ; =============== S U B R O U T I N E =======================================
.text:0040D110
.text:0040D110 ; Attributes: bp-based frame
.text:0040D110
.text:0040D110 sub_40D110      proc near               ; CODE XREF: sub_4018A0+16↑p
.text:0040D110
.text:0040D110 var_8           = dword ptr -8
.text:0040D110 var_4           = dword ptr -4
.text:0040D110
.text:0040D110                 push    ebp
.text:0040D111                 mov     ebp, esp
.text:0040D113                 sub     esp, 8
.text:0040D116                 mov     [ebp+var_4], ebx
.text:0040D119                 mov     edx, dword_40E0F0
.text:0040D11F                 test    edx, edx
.text:0040D121                 jnz     short loc_40D14A
.text:0040D123                 mov     eax, ds:dword_40DE90
.text:0040D128                 mov     edx, 1
.text:0040D12D                 mov     dword_40E0F0, edx
.text:0040D133                 cmp     eax, 0FFFFFFFFh
.text:0040D136                 jz      short loc_40D15D
.text:0040D138
.text:0040D138 loc_40D138:                             ; CODE XREF: sub_40D110+57↓j
.text:0040D138                                         ; sub_40D110+69↓j
.text:0040D138                 test    eax, eax
.text:0040D13A                 mov     ebx, eax
.text:0040D13C                 jnz     short loc_40D151
.text:0040D13E
.text:0040D13E loc_40D13E:                             ; CODE XREF: sub_40D110+4B↓j
.text:0040D13E                 mov     [esp+8+var_8], offset sub_40D080 ; void (__cdecl *)()
.text:0040D145                 call    sub_401040
.text:0040D14A
.text:0040D14A loc_40D14A:                             ; CODE XREF: sub_40D110+11↑j
.text:0040D14A                 mov     ebx, [ebp+var_4]
.text:0040D14D                 mov     esp, ebp
.text:0040D14F                 pop     ebp
.text:0040D150                 retn
.text:0040D151 ; ---------------------------------------------------------------------------
.text:0040D151
.text:0040D151 loc_40D151:                             ; CODE XREF: sub_40D110+2C↑j
.text:0040D151                                         ; sub_40D110+49↓j
.text:0040D151                 call    ds:dword_40DE90[ebx*4]
.text:0040D158                 dec     ebx
.text:0040D159                 jnz     short loc_40D151
.text:0040D15B                 jmp     short loc_40D13E
.text:0040D15D ; ---------------------------------------------------------------------------
.text:0040D15D
.text:0040D15D loc_40D15D:                             ; CODE XREF: sub_40D110+26↑j
.text:0040D15D                 mov     ecx, ds:dword_40DE94
.text:0040D163                 xor     eax, eax
.text:0040D165                 test    ecx, ecx
.text:0040D167                 jz      short loc_40D138
.text:0040D169                 mov     edx, offset dword_40DE90
.text:0040D16E                 mov     esi, esi
.text:0040D170
.text:0040D170 loc_40D170:                             ; CODE XREF: sub_40D110+67↓j
.text:0040D170                 inc     eax
.text:0040D171                 mov     ebx, [edx+eax*4+4]
.text:0040D175                 test    ebx, ebx
.text:0040D177                 jnz     short loc_40D170
.text:0040D179                 jmp     short loc_40D138
.text:0040D179 sub_40D110      endp
.text:0040D179
.text:0040D179 ; ---------------------------------------------------------------------------
.text:0040D17B                 align 10h
.text:0040D180
.text:0040D180 ; =============== S U B R O U T I N E =======================================
.text:0040D180
.text:0040D180 ; Attributes: info_from_lumina
.text:0040D180
.text:0040D180 ; void *__cdecl _alloca(size_t Size)
.text:0040D180 __alloca        proc near               ; CODE XREF: sub_4018A0+11↑p
.text:0040D180                 push    ecx
.text:0040D181                 mov     ecx, esp
.text:0040D183                 add     ecx, 8
.text:0040D186
.text:0040D186 loc_40D186:                             ; CODE XREF: __alloca+1B↓j
.text:0040D186                 cmp     eax, 1000h
.text:0040D18B                 jb      short loc_40D19D
.text:0040D18D                 sub     ecx, 1000h
.text:0040D193                 or      dword ptr [ecx], 0
.text:0040D196                 sub     eax, 1000h
.text:0040D19B                 jmp     short loc_40D186
.text:0040D19D ; ---------------------------------------------------------------------------
.text:0040D19D
.text:0040D19D loc_40D19D:                             ; CODE XREF: __alloca+B↑j
.text:0040D19D                 sub     ecx, eax
.text:0040D19F                 or      dword ptr [ecx], 0
.text:0040D1A2                 mov     eax, esp
.text:0040D1A4                 mov     esp, ecx
.text:0040D1A6                 mov     ecx, [eax]
.text:0040D1A8                 mov     eax, [eax+4]
.text:0040D1AB                 jmp     eax
.text:0040D1AB __alloca        endp
.text:0040D1AB
.text:0040D1AB ; ---------------------------------------------------------------------------
.text:0040D1AD                 align 10h
.text:0040D1B0
.text:0040D1B0 ; =============== S U B R O U T I N E =======================================
.text:0040D1B0
.text:0040D1B0 ; Attributes: bp-based frame
.text:0040D1B0
.text:0040D1B0 sub_40D1B0      proc near               ; CODE XREF: sub_405D40+55E↑p
.text:0040D1B0                                         ; sub_405D40+5D5↑p ...
.text:0040D1B0
.text:0040D1B0 var_24          = dword ptr -24h
.text:0040D1B0 var_20          = dword ptr -20h
.text:0040D1B0 var_1C          = dword ptr -1Ch
.text:0040D1B0 var_18          = dword ptr -18h
.text:0040D1B0 var_14          = dword ptr -14h
.text:0040D1B0 var_C           = dword ptr -0Ch
.text:0040D1B0 var_8           = dword ptr -8
.text:0040D1B0 var_4           = dword ptr -4
.text:0040D1B0 arg_0           = dword ptr  8
.text:0040D1B0 arg_4           = dword ptr  0Ch
.text:0040D1B0 arg_8           = dword ptr  10h
.text:0040D1B0 arg_C           = dword ptr  14h
.text:0040D1B0
.text:0040D1B0                 push    ebp
.text:0040D1B1                 mov     ebp, esp
.text:0040D1B3                 sub     esp, 28h
.text:0040D1B6                 mov     [ebp+var_C], ebx
.text:0040D1B9                 mov     edx, [ebp+arg_C]
.text:0040D1BC                 mov     ecx, [ebp+arg_0]
.text:0040D1BF                 mov     [ebp+var_8], esi
.text:0040D1C2                 mov     eax, [ebp+arg_8]
.text:0040D1C5                 test    edx, edx
.text:0040D1C7                 mov     [ebp+var_4], edi
.text:0040D1CA                 mov     ebx, [ebp+arg_4]
.text:0040D1CD                 mov     esi, eax
.text:0040D1CF                 mov     [ebp+var_18], 0
.text:0040D1D6                 mov     [ebp+var_14], 0
.text:0040D1DD                 mov     [ebp+var_1C], ecx
.text:0040D1E0                 jnz     short loc_40D232
.text:0040D1E2                 cmp     eax, ebx
.text:0040D1E4                 jbe     short loc_40D210
.text:0040D1E6                 mov     eax, ecx
.text:0040D1E8                 mov     edx, ebx
.text:0040D1EA                 div     esi
.text:0040D1EC                 mov     edi, eax
.text:0040D1EE                 mov     esi, esi
.text:0040D1F0
.text:0040D1F0 loc_40D1F0:                             ; CODE XREF: sub_40D1B0+88↓j
.text:0040D1F0                                         ; sub_40D1B0+A4↓j ...
.text:0040D1F0                 xor     ecx, ecx
.text:0040D1F2
.text:0040D1F2 loc_40D1F2:                             ; CODE XREF: sub_40D1B0+80↓j
.text:0040D1F2                 mov     [ebp+var_18], edi
.text:0040D1F5                 mov     ebx, [ebp+var_C]
.text:0040D1F8                 mov     eax, [ebp+var_18]
.text:0040D1FB                 mov     [ebp+var_14], ecx
.text:0040D1FE                 mov     esi, [ebp+var_8]
.text:0040D201                 mov     edx, [ebp+var_14]
.text:0040D204                 mov     edi, [ebp+var_4]
.text:0040D207                 mov     esp, ebp
.text:0040D209                 pop     ebp
.text:0040D20A                 retn
.text:0040D20A ; ---------------------------------------------------------------------------
.text:0040D20B                 align 10h
.text:0040D210
.text:0040D210 loc_40D210:                             ; CODE XREF: sub_40D1B0+34↑j
.text:0040D210                 test    eax, eax
.text:0040D212                 jnz     short loc_40D221
.text:0040D214                 mov     eax, 1
.text:0040D219                 xor     ecx, ecx
.text:0040D21B                 xor     edx, edx
.text:0040D21D                 div     ecx
.text:0040D21F                 mov     esi, eax
.text:0040D221
.text:0040D221 loc_40D221:                             ; CODE XREF: sub_40D1B0+62↑j
.text:0040D221                 mov     eax, ebx
.text:0040D223                 xor     edx, edx
.text:0040D225                 div     esi
.text:0040D227                 mov     ecx, eax
.text:0040D229                 mov     eax, [ebp+var_1C]
.text:0040D22C                 div     esi
.text:0040D22E                 mov     edi, eax
.text:0040D230                 jmp     short loc_40D1F2
.text:0040D232 ; ---------------------------------------------------------------------------
.text:0040D232
.text:0040D232 loc_40D232:                             ; CODE XREF: sub_40D1B0+30↑j
.text:0040D232                 cmp     edx, ebx
.text:0040D234                 jbe     short loc_40D240
.text:0040D236                 xor     edi, edi
.text:0040D238                 jmp     short loc_40D1F0
.text:0040D238 ; ---------------------------------------------------------------------------
.text:0040D23A                 align 10h
.text:0040D240
.text:0040D240 loc_40D240:                             ; CODE XREF: sub_40D1B0+84↑j
.text:0040D240                 bsr     eax, edx
.text:0040D243                 xor     eax, 1Fh
.text:0040D246                 mov     [ebp+var_20], eax
.text:0040D249                 jnz     short loc_40D260
.text:0040D24B                 cmp     ebx, edx
.text:0040D24D                 ja      short loc_40D256
.text:0040D24F                 xor     edi, edi
.text:0040D251                 cmp     [ebp+var_1C], esi
.text:0040D254                 jb      short loc_40D1F0
.text:0040D256
.text:0040D256 loc_40D256:                             ; CODE XREF: sub_40D1B0+9D↑j
.text:0040D256                 mov     edi, 1
.text:0040D25B                 jmp     short loc_40D1F0
.text:0040D25B ; ---------------------------------------------------------------------------
.text:0040D25D                 align 10h
.text:0040D260
.text:0040D260 loc_40D260:                             ; CODE XREF: sub_40D1B0+99↑j
.text:0040D260                 mov     eax, [ebp+var_20]
.text:0040D263                 mov     ecx, 20h ; ' '
.text:0040D268                 sub     ecx, eax
.text:0040D26A                 mov     [ebp+var_24], ecx
.text:0040D26D                 mov     eax, esi
.text:0040D26F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D273                 shl     edx, cl
.text:0040D275                 mov     edi, edx
.text:0040D277                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D27B                 mov     edx, ebx
.text:0040D27D                 shr     eax, cl
.text:0040D27F                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D283                 or      edi, eax
.text:0040D285                 mov     eax, [ebp+var_1C]
.text:0040D288                 shl     esi, cl
.text:0040D28A                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D28E                 shr     edx, cl
.text:0040D290                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D294                 shl     ebx, cl
.text:0040D296                 movzx   ecx, byte ptr [ebp+var_24]
.text:0040D29A                 shr     eax, cl
.text:0040D29C                 or      ebx, eax
.text:0040D29E                 movzx   ecx, byte ptr [ebp+var_20]
.text:0040D2A2                 mov     eax, ebx
.text:0040D2A4                 div     edi
.text:0040D2A6                 mov     ebx, edx
.text:0040D2A8                 mov     edi, eax
.text:0040D2AA                 shl     [ebp+var_1C], cl
.text:0040D2AD                 mul     esi
.text:0040D2AF                 cmp     edx, ebx
.text:0040D2B1                 ja      short loc_40D2C4
.text:0040D2B3                 cmp     edx, ebx
.text:0040D2B5                 jnz     loc_40D1F0
.text:0040D2BB                 cmp     eax, [ebp+var_1C]
.text:0040D2BE                 jbe     loc_40D1F0
.text:0040D2C4
.text:0040D2C4 loc_40D2C4:                             ; CODE XREF: sub_40D1B0+101↑j
.text:0040D2C4                 dec     edi
.text:0040D2C5                 jmp     loc_40D1F0
.text:0040D2C5 sub_40D1B0      endp
.text:0040D2C5
.text:0040D2C5 ; ---------------------------------------------------------------------------
.text:0040D2CA                 align 10h
.text:0040D2D0
.text:0040D2D0 ; =============== S U B R O U T I N E =======================================
.text:0040D2D0
.text:0040D2D0 ; Attributes: bp-based frame
.text:0040D2D0
.text:0040D2D0 sub_40D2D0      proc near               ; CODE XREF: sub_405D40+585↑p
.text:0040D2D0                                         ; sub_405D40+5FE↑p ...
.text:0040D2D0
.text:0040D2D0 var_34          = dword ptr -34h
.text:0040D2D0 var_2C          = dword ptr -2Ch
.text:0040D2D0 var_28          = dword ptr -28h
.text:0040D2D0 var_24          = dword ptr -24h
.text:0040D2D0 var_20          = dword ptr -20h
.text:0040D2D0 var_1C          = dword ptr -1Ch
.text:0040D2D0 var_18          = dword ptr -18h
.text:0040D2D0 var_14          = dword ptr -14h
.text:0040D2D0 arg_0           = dword ptr  8
.text:0040D2D0 arg_4           = dword ptr  0Ch
.text:0040D2D0 arg_8           = dword ptr  10h
.text:0040D2D0 arg_C           = dword ptr  14h
.text:0040D2D0
.text:0040D2D0                 push    ebp
.text:0040D2D1                 mov     ebp, esp
.text:0040D2D3                 push    edi
.text:0040D2D4                 push    esi
.text:0040D2D5                 push    ebx
.text:0040D2D6                 sub     esp, 2Ch
.text:0040D2D9                 mov     edx, [ebp+arg_C]
.text:0040D2DC                 mov     [ebp+var_20], 0
.text:0040D2E3                 mov     ecx, [ebp+arg_0]
.text:0040D2E6                 mov     ebx, [ebp+arg_4]
.text:0040D2E9                 mov     [ebp+var_1C], 0
.text:0040D2F0                 mov     eax, [ebp+arg_8]
.text:0040D2F3                 test    edx, edx
.text:0040D2F5                 mov     [ebp+var_24], edx
.text:0040D2F8                 mov     edi, ebx
.text:0040D2FA                 mov     esi, eax
.text:0040D2FC                 mov     [ebp+var_28], ecx
.text:0040D2FF                 jnz     short loc_40D360
.text:0040D301                 cmp     eax, ebx
.text:0040D303                 jbe     short loc_40D340
.text:0040D305                 mov     eax, ecx
.text:0040D307                 mov     edx, ebx
.text:0040D309                 div     esi
.text:0040D30B
.text:0040D30B loc_40D30B:                             ; CODE XREF: sub_40D2D0+8B↓j
.text:0040D30B                 mov     [ebp+var_28], edx
.text:0040D30E                 lea     ecx, [ebp+var_18]
.text:0040D311                 test    ecx, ecx
.text:0040D313                 jz      short loc_40D32E
.text:0040D315                 mov     [ebp+var_1C], 0
.text:0040D31C
.text:0040D31C loc_40D31C:                             ; CODE XREF: sub_40D2D0+DA↓j
.text:0040D31C                 mov     eax, [ebp+var_28]
.text:0040D31F                 mov     [ebp+var_20], eax
.text:0040D322                 mov     edx, [ebp+var_20]
.text:0040D325                 mov     ecx, [ebp+var_1C]
.text:0040D328                 mov     [ebp+var_18], edx
.text:0040D32B                 mov     [ebp+var_14], ecx
.text:0040D32E
.text:0040D32E loc_40D32E:                             ; CODE XREF: sub_40D2D0+43↑j
.text:0040D32E                                         ; sub_40D2D0+A7↓j ...
.text:0040D32E                 mov     eax, [ebp+var_18]
.text:0040D331                 mov     edx, [ebp+var_14]
.text:0040D334                 add     esp, 2Ch
.text:0040D337                 pop     ebx
.text:0040D338                 pop     esi
.text:0040D339                 pop     edi
.text:0040D33A                 pop     ebp
.text:0040D33B                 retn
.text:0040D33B ; ---------------------------------------------------------------------------
.text:0040D33C                 align 10h
.text:0040D340
.text:0040D340 loc_40D340:                             ; CODE XREF: sub_40D2D0+33↑j
.text:0040D340                 test    eax, eax
.text:0040D342                 jnz     short loc_40D34F
.text:0040D344                 mov     eax, 1
.text:0040D349                 xor     edx, edx
.text:0040D34B                 div     esi
.text:0040D34D                 mov     esi, eax
.text:0040D34F
.text:0040D34F loc_40D34F:                             ; CODE XREF: sub_40D2D0+72↑j
.text:0040D34F                 mov     eax, edi
.text:0040D351                 mov     edx, [ebp+var_24]
.text:0040D354                 div     esi
.text:0040D356                 mov     eax, [ebp+var_28]
.text:0040D359                 div     esi
.text:0040D35B                 jmp     short loc_40D30B
.text:0040D35B ; ---------------------------------------------------------------------------
.text:0040D35D                 align 10h
.text:0040D360
.text:0040D360 loc_40D360:                             ; CODE XREF: sub_40D2D0+2F↑j
.text:0040D360                 cmp     [ebp+var_24], ebx
.text:0040D363                 jbe     short loc_40D380
.text:0040D365                 mov     [ebp+var_20], ecx
.text:0040D368
.text:0040D368 loc_40D368:                             ; CODE XREF: sub_40D2D0+15B↓j
.text:0040D368                 mov     [ebp+var_1C], edi
.text:0040D36B                 mov     eax, [ebp+var_20]
.text:0040D36E                 mov     edx, [ebp+var_1C]
.text:0040D371                 mov     [ebp+var_18], eax
.text:0040D374                 mov     [ebp+var_14], edx
.text:0040D377                 jmp     short loc_40D32E
.text:0040D377 ; ---------------------------------------------------------------------------
.text:0040D379                 align 10h
.text:0040D380
.text:0040D380 loc_40D380:                             ; CODE XREF: sub_40D2D0+93↑j
.text:0040D380                 bsr     eax, [ebp+var_24]
.text:0040D384                 mov     ebx, eax
.text:0040D386                 xor     ebx, 1Fh
.text:0040D389                 jnz     short loc_40D3B0
.text:0040D38B                 cmp     edi, [ebp+var_24]
.text:0040D38E                 ja      short loc_40D395
.text:0040D390                 cmp     [ebp+var_28], esi
.text:0040D393                 jb      short loc_40D3A0
.text:0040D395
.text:0040D395 loc_40D395:                             ; CODE XREF: sub_40D2D0+BE↑j
.text:0040D395                 mov     edx, [ebp+var_28]
.text:0040D398                 sub     edx, esi
.text:0040D39A                 sbb     edi, [ebp+var_24]
.text:0040D39D                 mov     [ebp+var_28], edx
.text:0040D3A0
.text:0040D3A0 loc_40D3A0:                             ; CODE XREF: sub_40D2D0+C3↑j
.text:0040D3A0                 lea     ecx, [ebp+var_18]
.text:0040D3A3                 test    ecx, ecx
.text:0040D3A5                 jz      short loc_40D32E
.text:0040D3A7                 mov     [ebp+var_1C], edi
.text:0040D3AA                 jmp     loc_40D31C
.text:0040D3AA ; ---------------------------------------------------------------------------
.text:0040D3AF                 align 10h
.text:0040D3B0
.text:0040D3B0 loc_40D3B0:                             ; CODE XREF: sub_40D2D0+B9↑j
.text:0040D3B0                 mov     edx, [ebp+var_24]
.text:0040D3B3                 mov     eax, 20h ; ' '
.text:0040D3B8                 mov     cl, bl
.text:0040D3BA                 sub     eax, ebx
.text:0040D3BC                 mov     [ebp+var_2C], eax
.text:0040D3BF                 shl     edx, cl
.text:0040D3C1                 mov     eax, esi
.text:0040D3C3                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D3C7                 shr     eax, cl
.text:0040D3C9                 mov     cl, bl
.text:0040D3CB                 shl     esi, cl
.text:0040D3CD                 or      edx, eax
.text:0040D3CF                 mov     eax, [ebp+var_28]
.text:0040D3D2                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D3D6                 mov     [ebp+var_24], edx
.text:0040D3D9                 mov     edx, edi
.text:0040D3DB                 shr     edx, cl
.text:0040D3DD                 mov     cl, bl
.text:0040D3DF                 shl     edi, cl
.text:0040D3E1                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D3E5                 shr     eax, cl
.text:0040D3E7                 or      edi, eax
.text:0040D3E9                 mov     eax, edi
.text:0040D3EB                 mov     cl, bl
.text:0040D3ED                 div     [ebp+var_24]
.text:0040D3F0                 shl     [ebp+var_28], cl
.text:0040D3F3                 mov     edi, edx
.text:0040D3F5                 mul     esi
.text:0040D3F7                 mov     [ebp+var_34], eax
.text:0040D3FA                 cmp     edx, edi
.text:0040D3FC                 ja      short loc_40D438
.text:0040D3FE                 cmp     edx, edi
.text:0040D400                 jz      short loc_40D430
.text:0040D402
.text:0040D402 loc_40D402:                             ; CODE XREF: sub_40D2D0+166↓j
.text:0040D402                                         ; sub_40D2D0+173↓j
.text:0040D402                 lea     eax, [ebp+var_18]
.text:0040D405                 test    eax, eax
.text:0040D407                 jz      loc_40D32E
.text:0040D40D                 movzx   ecx, byte ptr [ebp+var_2C]
.text:0040D411                 mov     eax, [ebp+var_28]
.text:0040D414                 sub     eax, [ebp+var_34]
.text:0040D417                 sbb     edi, edx
.text:0040D419                 mov     [ebp+var_28], eax
.text:0040D41C                 mov     edx, edi
.text:0040D41E                 shl     edx, cl
.text:0040D420                 mov     cl, bl
.text:0040D422                 shr     eax, cl
.text:0040D424                 or      edx, eax
.text:0040D426                 mov     [ebp+var_20], edx
.text:0040D429                 shr     edi, cl
.text:0040D42B                 jmp     loc_40D368
.text:0040D430 ; ---------------------------------------------------------------------------
.text:0040D430
.text:0040D430 loc_40D430:                             ; CODE XREF: sub_40D2D0+130↑j
.text:0040D430                 mov     eax, [ebp+var_28]
.text:0040D433                 cmp     [ebp+var_34], eax
.text:0040D436                 jbe     short loc_40D402
.text:0040D438
.text:0040D438 loc_40D438:                             ; CODE XREF: sub_40D2D0+12C↑j
.text:0040D438                 mov     ecx, [ebp+var_34]
.text:0040D43B                 sub     ecx, esi
.text:0040D43D                 sbb     edx, [ebp+var_24]
.text:0040D440                 mov     [ebp+var_34], ecx
.text:0040D443                 jmp     short loc_40D402
.text:0040D443 sub_40D2D0      endp
.text:0040D443
.text:0040D443 ; ---------------------------------------------------------------------------
.text:0040D445                 align 10h
.text:0040D450
.text:0040D450 ; =============== S U B R O U T I N E =======================================
.text:0040D450
.text:0040D450 ; Attributes: thunk
.text:0040D450
.text:0040D450 ; int __cdecl close(int FileHandle)
.text:0040D450 _close          proc near               ; CODE XREF: sub_4018A0+66F↑p
.text:0040D450                                         ; sub_4018A0+6BF↑p ...
.text:0040D450
.text:0040D450 FileHandle      = dword ptr  4
.text:0040D450
.text:0040D450                 jmp     ds:__imp__close
.text:0040D450 _close          endp
.text:0040D450
.text:0040D450 ; ---------------------------------------------------------------------------
.text:0040D456                 align 10h
.text:0040D460
.text:0040D460 ; =============== S U B R O U T I N E =======================================
.text:0040D460
.text:0040D460 ; Attributes: thunk
.text:0040D460
.text:0040D460 ; int open(const char *FileName, int OpenFlag, ...)
.text:0040D460 _open           proc near               ; CODE XREF: sub_4018A0+486↑p
.text:0040D460
.text:0040D460 FileName        = dword ptr  4
.text:0040D460 OpenFlag        = dword ptr  8
.text:0040D460
.text:0040D460                 jmp     ds:__imp__open
.text:0040D460 _open           endp
.text:0040D460
.text:0040D460 ; ---------------------------------------------------------------------------
.text:0040D466                 align 10h
.text:0040D470
.text:0040D470 ; =============== S U B R O U T I N E =======================================
.text:0040D470
.text:0040D470 ; Attributes: thunk
.text:0040D470
.text:0040D470 ; int __cdecl isatty(int FileHandle)
.text:0040D470 _isatty         proc near               ; CODE XREF: sub_4018A0+8EF↑p
.text:0040D470                                         ; sub_4018A0+90C↑p ...
.text:0040D470
.text:0040D470 FileHandle      = dword ptr  4
.text:0040D470
.text:0040D470                 jmp     ds:__imp__isatty
.text:0040D470 _isatty         endp
.text:0040D470
.text:0040D470 ; ---------------------------------------------------------------------------
.text:0040D476                 align 10h
.text:0040D480
.text:0040D480 ; =============== S U B R O U T I N E =======================================
.text:0040D480
.text:0040D480 ; Attributes: thunk
.text:0040D480
.text:0040D480 ; int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.text:0040D480 _read           proc near               ; CODE XREF: sub_404300+2B↑p
.text:0040D480
.text:0040D480 FileHandle      = dword ptr  4
.text:0040D480 DstBuf          = dword ptr  8
.text:0040D480 MaxCharCount    = dword ptr  0Ch
.text:0040D480
.text:0040D480                 jmp     ds:__imp__read
.text:0040D480 _read           endp
.text:0040D480
.text:0040D480 ; ---------------------------------------------------------------------------
.text:0040D486                 align 10h
.text:0040D490
.text:0040D490 ; =============== S U B R O U T I N E =======================================
.text:0040D490
.text:0040D490 ; Attributes: thunk
.text:0040D490
.text:0040D490 ; int __cdecl write(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.text:0040D490 _write          proc near               ; CODE XREF: sub_405770+2B↑p
.text:0040D490
.text:0040D490 FileHandle      = dword ptr  4
.text:0040D490 Buf             = dword ptr  8
.text:0040D490 MaxCharCount    = dword ptr  0Ch
.text:0040D490
.text:0040D490                 jmp     ds:__imp__write
.text:0040D490 _write          endp
.text:0040D490
.text:0040D490 ; ---------------------------------------------------------------------------
.text:0040D496                 align 10h
.text:0040D4A0
.text:0040D4A0 ; =============== S U B R O U T I N E =======================================
.text:0040D4A0
.text:0040D4A0 ; Attributes: thunk
.text:0040D4A0
.text:0040D4A0 ; int __cdecl stricmp(const char *String1, const char *String2)
.text:0040D4A0 _stricmp        proc near               ; CODE XREF: sub_4065F0+46F↑p
.text:0040D4A0                                         ; sub_408570+2E↑p ...
.text:0040D4A0
.text:0040D4A0 String1         = dword ptr  4
.text:0040D4A0 String2         = dword ptr  8
.text:0040D4A0
.text:0040D4A0                 jmp     ds:__imp__stricmp
.text:0040D4A0 _stricmp        endp
.text:0040D4A0
.text:0040D4A0 ; ---------------------------------------------------------------------------
.text:0040D4A6                 align 10h
.text:0040D4B0
.text:0040D4B0 ; =============== S U B R O U T I N E =======================================
.text:0040D4B0
.text:0040D4B0 ; Attributes: thunk
.text:0040D4B0
.text:0040D4B0 ; char *__cdecl strdup(const char *String)
.text:0040D4B0 _strdup         proc near               ; CODE XREF: sub_4081A0+101↑p
.text:0040D4B0                                         ; .text:0040840A↑p ...
.text:0040D4B0
.text:0040D4B0 String          = dword ptr  4
.text:0040D4B0
.text:0040D4B0                 jmp     ds:__imp__strdup
.text:0040D4B0 _strdup         endp
.text:0040D4B0
.text:0040D4B0 ; ---------------------------------------------------------------------------
.text:0040D4B6                 align 10h
.text:0040D4C0
.text:0040D4C0 ; =============== S U B R O U T I N E =======================================
.text:0040D4C0
.text:0040D4C0 ; Attributes: thunk
.text:0040D4C0
.text:0040D4C0 ; int __cdecl getpid()
.text:0040D4C0 _getpid         proc near               ; CODE XREF: sub_40B170+84↑p
.text:0040D4C0                 jmp     ds:__imp__getpid
.text:0040D4C0 _getpid         endp
.text:0040D4C0
.text:0040D4C0 ; ---------------------------------------------------------------------------
.text:0040D4C6                 align 10h
.text:0040D4D0
.text:0040D4D0 ; =============== S U B R O U T I N E =======================================
.text:0040D4D0
.text:0040D4D0 ; Attributes: thunk
.text:0040D4D0
.text:0040D4D0 ; int __cdecl chmod(const char *FileName, int AccessMode)
.text:0040D4D0 _chmod          proc near               ; CODE XREF: sub_40B5A0+41↑j
.text:0040D4D0
.text:0040D4D0 FileName        = dword ptr  4
.text:0040D4D0 AccessMode      = dword ptr  8
.text:0040D4D0
.text:0040D4D0                 jmp     ds:__imp__chmod
.text:0040D4D0 _chmod          endp
.text:0040D4D0
.text:0040D4D0 ; ---------------------------------------------------------------------------
.text:0040D4D6                 align 10h
.text:0040D4E0                 jmp     ds:__set_app_type
.text:0040D4E0 ; ---------------------------------------------------------------------------
.text:0040D4E6                 align 10h
.text:0040D4F0
.text:0040D4F0 ; =============== S U B R O U T I N E =======================================
.text:0040D4F0
.text:0040D4F0 ; Attributes: thunk
.text:0040D4F0
.text:0040D4F0 ; void __cdecl cexit()
.text:0040D4F0 _cexit          proc near               ; CODE XREF: .text:0040116C↑p
.text:0040D4F0                 jmp     ds:__imp__cexit
.text:0040D4F0 _cexit          endp
.text:0040D4F0
.text:0040D4F0 ; ---------------------------------------------------------------------------
.text:0040D4F6                 align 10h
.text:0040D500
.text:0040D500 ; =============== S U B R O U T I N E =======================================
.text:0040D500
.text:0040D500 ; Attributes: thunk
.text:0040D500
.text:0040D500 ; char ***__cdecl _p__environ()
.text:0040D500 __p__environ    proc near               ; CODE XREF: sub_401080+C7↑p
.text:0040D500                 jmp     ds:__imp___p__environ
.text:0040D500 __p__environ    endp
.text:0040D500
.text:0040D500 ; ---------------------------------------------------------------------------
.text:0040D506                 align 10h
.text:0040D510
.text:0040D510 ; =============== S U B R O U T I N E =======================================
.text:0040D510
.text:0040D510 ; Attributes: thunk
.text:0040D510
.text:0040D510 ; _crt_signal_t __cdecl signal(int Signal, _crt_signal_t Function)
.text:0040D510 signal          proc near               ; CODE XREF: TopLevelExceptionFilter+4D↑p
.text:0040D510                                         ; TopLevelExceptionFilter+88↑p ...
.text:0040D510
.text:0040D510 Signal          = dword ptr  4
.text:0040D510 Function        = dword ptr  8
.text:0040D510
.text:0040D510                 jmp     ds:__imp_signal
.text:0040D510 signal          endp
.text:0040D510
.text:0040D510 ; ---------------------------------------------------------------------------
.text:0040D516                 align 10h
.text:0040D520
.text:0040D520 ; =============== S U B R O U T I N E =======================================
.text:0040D520
.text:0040D520 ; Attributes: thunk
.text:0040D520
.text:0040D520 ; int *__cdecl _p__fmode()
.text:0040D520 __p__fmode      proc near               ; CODE XREF: sub_401080:loc_401135↑p
.text:0040D520                 jmp     ds:__imp___p__fmode
.text:0040D520 __p__fmode      endp
.text:0040D520
.text:0040D520 ; ---------------------------------------------------------------------------
.text:0040D526                 align 10h
.text:0040D530
.text:0040D530 ; =============== S U B R O U T I N E =======================================
.text:0040D530
.text:0040D530 ; Attributes: thunk
.text:0040D530
.text:0040D530 ; int __cdecl setmode(int FileHandle, int Mode)
.text:0040D530 _setmode        proc near               ; CODE XREF: sub_401080+70↑p
.text:0040D530                                         ; sub_401080+90↑p ...
.text:0040D530
.text:0040D530 FileHandle      = dword ptr  4
.text:0040D530 Mode            = dword ptr  8
.text:0040D530
.text:0040D530                 jmp     ds:__imp__setmode
.text:0040D530 _setmode        endp
.text:0040D530
.text:0040D530 ; ---------------------------------------------------------------------------
.text:0040D536                 align 10h
.text:0040D540
.text:0040D540 ; =============== S U B R O U T I N E =======================================
.text:0040D540
.text:0040D540 ; Attributes: thunk
.text:0040D540
.text:0040D540 __getmainargs   proc near               ; CODE XREF: sub_401080+49↑p
.text:0040D540                 jmp     ds:__imp___getmainargs
.text:0040D540 __getmainargs   endp
.text:0040D540
.text:0040D540 ; ---------------------------------------------------------------------------
.text:0040D546                 align 10h
.text:0040D550
.text:0040D550 ; =============== S U B R O U T I N E =======================================
.text:0040D550
.text:0040D550 ; Attributes: thunk
.text:0040D550
.text:0040D550 ; void __cdecl free(void *Block)
.text:0040D550 free            proc near               ; CODE XREF: sub_4018A0+62C↑p
.text:0040D550                                         ; sub_4018A0+85E↑p ...
.text:0040D550
.text:0040D550 Block           = dword ptr  4
.text:0040D550
.text:0040D550                 jmp     ds:__imp_free
.text:0040D550 free            endp
.text:0040D550
.text:0040D550 ; ---------------------------------------------------------------------------
.text:0040D556                 align 10h
.text:0040D560
.text:0040D560 ; =============== S U B R O U T I N E =======================================
.text:0040D560
.text:0040D560 ; Attributes: thunk
.text:0040D560
.text:0040D560 ; char *__cdecl setlocale(int Category, const char *Locale)
.text:0040D560 setlocale       proc near               ; CODE XREF: sub_4018A0+95↑p
.text:0040D560
.text:0040D560 Category        = dword ptr  4
.text:0040D560 Locale          = dword ptr  8
.text:0040D560
.text:0040D560                 jmp     ds:__imp_setlocale
.text:0040D560 setlocale       endp
.text:0040D560
.text:0040D560 ; ---------------------------------------------------------------------------
.text:0040D566                 align 10h
.text:0040D570
.text:0040D570 ; =============== S U B R O U T I N E =======================================
.text:0040D570
.text:0040D570 ; Attributes: thunk
.text:0040D570
.text:0040D570 ; void *__cdecl memmove(void *, const void *Src, size_t Size)
.text:0040D570 memmove         proc near               ; CODE XREF: sub_402440+E7↑p
.text:0040D570
.text:0040D570 Src             = dword ptr  8
.text:0040D570 Size            = dword ptr  0Ch
.text:0040D570
.text:0040D570                 jmp     ds:__imp_memmove
.text:0040D570 memmove         endp
.text:0040D570
.text:0040D570 ; ---------------------------------------------------------------------------
.text:0040D576                 align 10h
.text:0040D580
.text:0040D580 ; =============== S U B R O U T I N E =======================================
.text:0040D580
.text:0040D580 ; Attributes: thunk
.text:0040D580
.text:0040D580 ; int *__cdecl errno()
.text:0040D580 _errno          proc near               ; CODE XREF: sub_4018A0+5E9↑p
.text:0040D580                                         ; sub_4018A0+69B↑p ...
.text:0040D580                 jmp     ds:__imp__errno
.text:0040D580 _errno          endp
.text:0040D580
.text:0040D580 ; ---------------------------------------------------------------------------
.text:0040D586                 align 10h
.text:0040D590
.text:0040D590 ; =============== S U B R O U T I N E =======================================
.text:0040D590
.text:0040D590 ; Attributes: noreturn thunk
.text:0040D590
.text:0040D590 ; void __cdecl __noreturn exit(int Code)
.text:0040D590 exit            proc near               ; CODE XREF: sub_4018A0:loc_401A15↑p
.text:0040D590                                         ; .text:0040232B↑p ...
.text:0040D590
.text:0040D590 Code            = dword ptr  4
.text:0040D590
.text:0040D590                 jmp     ds:__imp_exit
.text:0040D590 exit            endp
.text:0040D590
.text:0040D590 ; ---------------------------------------------------------------------------
.text:0040D596                 align 10h
.text:0040D5A0
.text:0040D5A0 ; =============== S U B R O U T I N E =======================================
.text:0040D5A0
.text:0040D5A0 ; Attributes: thunk
.text:0040D5A0
.text:0040D5A0 ; int __cdecl fputs(const char *Buffer, FILE *Stream)
.text:0040D5A0 fputs           proc near               ; CODE XREF: sub_4018A0+1E0↑p
.text:0040D5A0                                         ; sub_4018A0+202↑p ...
.text:0040D5A0
.text:0040D5A0 Buffer          = dword ptr  4
.text:0040D5A0 Stream          = dword ptr  8
.text:0040D5A0
.text:0040D5A0                 jmp     ds:__imp_fputs
.text:0040D5A0 fputs           endp
.text:0040D5A0
.text:0040D5A0 ; ---------------------------------------------------------------------------
.text:0040D5A6                 align 10h
.text:0040D5B0
.text:0040D5B0 ; =============== S U B R O U T I N E =======================================
.text:0040D5B0
.text:0040D5B0 ; Attributes: thunk
.text:0040D5B0
.text:0040D5B0 ; int printf(const char *const Format, ...)
.text:0040D5B0 printf          proc near               ; CODE XREF: sub_4018A0+1BE↑p
.text:0040D5B0                                         ; sub_4018A0+2A7↑p ...
.text:0040D5B0
.text:0040D5B0 Format          = dword ptr  4
.text:0040D5B0
.text:0040D5B0                 jmp     ds:__imp_printf
.text:0040D5B0 printf          endp
.text:0040D5B0
.text:0040D5B0 ; ---------------------------------------------------------------------------
.text:0040D5B6                 align 10h
.text:0040D5C0
.text:0040D5C0 ; =============== S U B R O U T I N E =======================================
.text:0040D5C0
.text:0040D5C0 ; Attributes: thunk
.text:0040D5C0
.text:0040D5C0 ; int fprintf(FILE *const Stream, const char *const Format, ...)
.text:0040D5C0 fprintf         proc near               ; CODE XREF: sub_4018A0+169↑p
.text:0040D5C0                                         ; .text:00402323↑p ...
.text:0040D5C0
.text:0040D5C0 Stream          = dword ptr  4
.text:0040D5C0 Format          = dword ptr  8
.text:0040D5C0
.text:0040D5C0                 jmp     ds:__imp_fprintf
.text:0040D5C0 fprintf         endp
.text:0040D5C0
.text:0040D5C0 ; ---------------------------------------------------------------------------
.text:0040D5C6                 align 10h
.text:0040D5D0
.text:0040D5D0 ; =============== S U B R O U T I N E =======================================
.text:0040D5D0
.text:0040D5D0 ; Attributes: thunk
.text:0040D5D0
.text:0040D5D0 ; size_t __cdecl strlen(const char *Str)
.text:0040D5D0 strlen          proc near               ; CODE XREF: sub_402AB0+2A9↑p
.text:0040D5D0                                         ; sub_402AB0+346↑p ...
.text:0040D5D0
.text:0040D5D0 Str             = dword ptr  4
.text:0040D5D0
.text:0040D5D0                 jmp     ds:__imp_strlen
.text:0040D5D0 strlen          endp
.text:0040D5D0
.text:0040D5D0 ; ---------------------------------------------------------------------------
.text:0040D5D6                 align 10h
.text:0040D5E0
.text:0040D5E0 ; =============== S U B R O U T I N E =======================================
.text:0040D5E0
.text:0040D5E0 ; Attributes: thunk
.text:0040D5E0
.text:0040D5E0 ; int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount)
.text:0040D5E0 strncmp         proc near               ; CODE XREF: sub_402AB0+23F↑p
.text:0040D5E0                                         ; sub_402AB0+699↑p
.text:0040D5E0
.text:0040D5E0 Str1            = dword ptr  4
.text:0040D5E0 Str2            = dword ptr  8
.text:0040D5E0 MaxCount        = dword ptr  0Ch
.text:0040D5E0
.text:0040D5E0                 jmp     ds:__imp_strncmp
.text:0040D5E0 strncmp         endp
.text:0040D5E0
.text:0040D5E0 ; ---------------------------------------------------------------------------
.text:0040D5E6                 align 10h
.text:0040D5F0
.text:0040D5F0 ; =============== S U B R O U T I N E =======================================
.text:0040D5F0
.text:0040D5F0 ; Attributes: thunk
.text:0040D5F0
.text:0040D5F0 ; char *__cdecl getenv(const char *VarName)
.text:0040D5F0 getenv          proc near               ; CODE XREF: sub_402AB0+B57↑p
.text:0040D5F0                                         ; sub_4065F0+3EE↑p ...
.text:0040D5F0
.text:0040D5F0 VarName         = dword ptr  4
.text:0040D5F0
.text:0040D5F0                 jmp     ds:__imp_getenv
.text:0040D5F0 getenv          endp
.text:0040D5F0
.text:0040D5F0 ; ---------------------------------------------------------------------------
.text:0040D5F6                 align 10h
.text:0040D600
.text:0040D600 ; =============== S U B R O U T I N E =======================================
.text:0040D600
.text:0040D600 ; Attributes: thunk
.text:0040D600
.text:0040D600 ; char *__cdecl strchr(const char *Str, int Val)
.text:0040D600 strchr          proc near               ; CODE XREF: sub_402AB0+469↑p
.text:0040D600                                         ; sub_402AB0+53A↑p ...
.text:0040D600
.text:0040D600 Str             = dword ptr  4
.text:0040D600 Val             = dword ptr  8
.text:0040D600
.text:0040D600                 jmp     ds:__imp_strchr
.text:0040D600 strchr          endp
.text:0040D600
.text:0040D600 ; ---------------------------------------------------------------------------
.text:0040D606                 align 10h
.text:0040D610
.text:0040D610 ; =============== S U B R O U T I N E =======================================
.text:0040D610
.text:0040D610 ; Attributes: thunk
.text:0040D610
.text:0040D610 ; void *__cdecl memcpy(void *, const void *Src, size_t Size)
.text:0040D610 memcpy          proc near               ; CODE XREF: .text:00403A68↑p
.text:0040D610                                         ; .text:00403AB1↑p
.text:0040D610
.text:0040D610 Src             = dword ptr  8
.text:0040D610 Size            = dword ptr  0Ch
.text:0040D610
.text:0040D610                 jmp     ds:__imp_memcpy
.text:0040D610 memcpy          endp
.text:0040D610
.text:0040D610 ; ---------------------------------------------------------------------------
.text:0040D616                 align 10h
.text:0040D620
.text:0040D620 ; =============== S U B R O U T I N E =======================================
.text:0040D620
.text:0040D620 ; Attributes: thunk
.text:0040D620
.text:0040D620 ; void *__cdecl memset(void *, int Val, size_t Size)
.text:0040D620 memset          proc near               ; CODE XREF: .text:004039E6↑p
.text:0040D620
.text:0040D620 Val             = dword ptr  8
.text:0040D620 Size            = dword ptr  0Ch
.text:0040D620
.text:0040D620                 jmp     ds:__imp_memset
.text:0040D620 memset          endp
.text:0040D620
.text:0040D620 ; ---------------------------------------------------------------------------
.text:0040D626                 align 10h
.text:0040D630
.text:0040D630 ; =============== S U B R O U T I N E =======================================
.text:0040D630
.text:0040D630 ; Attributes: thunk
.text:0040D630
.text:0040D630 ; void *__cdecl calloc(size_t Count, size_t Size)
.text:0040D630 calloc          proc near               ; CODE XREF: .text:00403A23↑p
.text:0040D630                                         ; sub_4081A0+AC↑p
.text:0040D630
.text:0040D630 Count           = dword ptr  4
.text:0040D630 Size            = dword ptr  8
.text:0040D630
.text:0040D630                 jmp     ds:__imp_calloc
.text:0040D630 calloc          endp
.text:0040D630
.text:0040D630 ; ---------------------------------------------------------------------------
.text:0040D636                 align 10h
.text:0040D640
.text:0040D640 ; =============== S U B R O U T I N E =======================================
.text:0040D640
.text:0040D640 ; Attributes: thunk
.text:0040D640
.text:0040D640 ; void *__cdecl realloc(void *Block, size_t Size)
.text:0040D640 realloc         proc near               ; CODE XREF: .text:00403920↑p
.text:0040D640                                         ; sub_403950+16↑p ...
.text:0040D640
.text:0040D640 Block           = dword ptr  4
.text:0040D640 Size            = dword ptr  8
.text:0040D640
.text:0040D640                 jmp     ds:__imp_realloc
.text:0040D640 realloc         endp
.text:0040D640
.text:0040D640 ; ---------------------------------------------------------------------------
.text:0040D646                 align 10h
.text:0040D650
.text:0040D650 ; =============== S U B R O U T I N E =======================================
.text:0040D650
.text:0040D650 ; Attributes: thunk
.text:0040D650
.text:0040D650 ; void *__cdecl malloc(size_t Size)
.text:0040D650 malloc          proc near               ; CODE XREF: .text:004038A4↑p
.text:0040D650                                         ; sub_4038C0+E↑p ...
.text:0040D650
.text:0040D650 Size            = dword ptr  4
.text:0040D650
.text:0040D650                 jmp     ds:__imp_malloc
.text:0040D650 malloc          endp
.text:0040D650
.text:0040D650 ; ---------------------------------------------------------------------------
.text:0040D656                 align 10h
.text:0040D660
.text:0040D660 ; =============== S U B R O U T I N E =======================================
.text:0040D660
.text:0040D660 ; Attributes: thunk
.text:0040D660
.text:0040D660 ; int __cdecl vfprintf(FILE *const Stream, const char *const Format, va_list ArgList)
.text:0040D660 vfprintf        proc near               ; CODE XREF: sub_403E40+C1↑p
.text:0040D660                                         ; sub_405830+49↑p ...
.text:0040D660
.text:0040D660 Stream          = dword ptr  4
.text:0040D660 Format          = dword ptr  8
.text:0040D660 ArgList         = dword ptr  0Ch
.text:0040D660
.text:0040D660                 jmp     ds:__imp_vfprintf
.text:0040D660 vfprintf        endp
.text:0040D660
.text:0040D660 ; ---------------------------------------------------------------------------
.text:0040D666                 align 10h
.text:0040D670
.text:0040D670 ; =============== S U B R O U T I N E =======================================
.text:0040D670
.text:0040D670 ; Attributes: noreturn thunk
.text:0040D670
.text:0040D670 ; void __cdecl __noreturn abort()
.text:0040D670 abort           proc near               ; CODE XREF: sub_403E40:loc_403EDC↑p
.text:0040D670                                         ; sub_404390+32↑p ...
.text:0040D670                 jmp     ds:__imp_abort
.text:0040D670 abort           endp
.text:0040D670
.text:0040D670 ; ---------------------------------------------------------------------------
.text:0040D676                 align 10h
.text:0040D680
.text:0040D680 ; =============== S U B R O U T I N E =======================================
.text:0040D680
.text:0040D680 ; Attributes: thunk
.text:0040D680
.text:0040D680 ; int __cdecl flsbuf(int Ch, FILE *File)
.text:0040D680 _flsbuf         proc near               ; CODE XREF: sub_403E40+128↑p
.text:0040D680                                         ; sub_403E40+13A↑p ...
.text:0040D680
.text:0040D680 File            = dword ptr  8
.text:0040D680
.text:0040D680                 jmp     ds:__imp__flsbuf
.text:0040D680 _flsbuf         endp
.text:0040D680
.text:0040D680 ; ---------------------------------------------------------------------------
.text:0040D686                 align 10h
.text:0040D690
.text:0040D690 ; =============== S U B R O U T I N E =======================================
.text:0040D690
.text:0040D690 ; Attributes: thunk
.text:0040D690
.text:0040D690 ; int __cdecl fclose(FILE *Stream)
.text:0040D690 fclose          proc near               ; CODE XREF: sub_4041C0+27↑p
.text:0040D690                                         ; .text:0040AB4E↑p
.text:0040D690
.text:0040D690 Stream          = dword ptr  4
.text:0040D690
.text:0040D690                 jmp     ds:__imp_fclose
.text:0040D690 fclose          endp
.text:0040D690
.text:0040D690 ; ---------------------------------------------------------------------------
.text:0040D696                 align 10h
.text:0040D6A0
.text:0040D6A0 ; =============== S U B R O U T I N E =======================================
.text:0040D6A0
.text:0040D6A0 ; Attributes: thunk
.text:0040D6A0
.text:0040D6A0 ; int __cdecl iswctype(wint_t C, wctype_t Type)
.text:0040D6A0 iswctype        proc near               ; CODE XREF: sub_404460+78B↑p
.text:0040D6A0
.text:0040D6A0 C               = word ptr  4
.text:0040D6A0 Type            = word ptr  8
.text:0040D6A0
.text:0040D6A0                 jmp     ds:__imp_iswctype
.text:0040D6A0 iswctype        endp
.text:0040D6A0
.text:0040D6A0 ; ---------------------------------------------------------------------------
.text:0040D6A6                 align 10h
.text:0040D6B0
.text:0040D6B0 ; =============== S U B R O U T I N E =======================================
.text:0040D6B0
.text:0040D6B0 ; Attributes: thunk
.text:0040D6B0
.text:0040D6B0 ; int __cdecl isctype(int C, int Type)
.text:0040D6B0 _isctype        proc near               ; CODE XREF: sub_404460+610↑p
.text:0040D6B0
.text:0040D6B0 C               = dword ptr  4
.text:0040D6B0 Type            = dword ptr  8
.text:0040D6B0
.text:0040D6B0                 jmp     ds:__imp__isctype
.text:0040D6B0 _isctype        endp
.text:0040D6B0
.text:0040D6B0 ; ---------------------------------------------------------------------------
.text:0040D6B6                 align 10h
.text:0040D6C0
.text:0040D6C0 ; =============== S U B R O U T I N E =======================================
.text:0040D6C0
.text:0040D6C0 ; Attributes: thunk
.text:0040D6C0
.text:0040D6C0 ; int __cdecl strcmp(const char *Str1, const char *Str2)
.text:0040D6C0 strcmp          proc near               ; CODE XREF: sub_405934+180↑p
.text:0040D6C0                                         ; .text:00409F4B↑p
.text:0040D6C0
.text:0040D6C0 Str1            = dword ptr  4
.text:0040D6C0 Str2            = dword ptr  8
.text:0040D6C0
.text:0040D6C0                 jmp     ds:__imp_strcmp
.text:0040D6C0 strcmp          endp
.text:0040D6C0
.text:0040D6C0 ; ---------------------------------------------------------------------------
.text:0040D6C6                 align 10h
.text:0040D6D0
.text:0040D6D0 ; =============== S U B R O U T I N E =======================================
.text:0040D6D0
.text:0040D6D0 ; Attributes: thunk
.text:0040D6D0
.text:0040D6D0 ; int __cdecl fflush(FILE *Stream)
.text:0040D6D0 fflush          proc near               ; CODE XREF: sub_405830+19↑p
.text:0040D6D0                                         ; sub_405830+81↑p ...
.text:0040D6D0
.text:0040D6D0 Stream          = dword ptr  4
.text:0040D6D0
.text:0040D6D0                 jmp     ds:__imp_fflush
.text:0040D6D0 fflush          endp
.text:0040D6D0
.text:0040D6D0 ; ---------------------------------------------------------------------------
.text:0040D6D6                 align 10h
.text:0040D6E0
.text:0040D6E0 ; =============== S U B R O U T I N E =======================================
.text:0040D6E0
.text:0040D6E0 ; Attributes: thunk
.text:0040D6E0
.text:0040D6E0 ; char *__cdecl strerror(int ErrorMessage)
.text:0040D6E0 strerror        proc near               ; CODE XREF: sub_405830+A5↑p
.text:0040D6E0                                         ; sub_405934+10F↑p
.text:0040D6E0
.text:0040D6E0 ErrorMessage    = dword ptr  4
.text:0040D6E0
.text:0040D6E0                 jmp     ds:__imp_strerror
.text:0040D6E0 strerror        endp
.text:0040D6E0
.text:0040D6E0 ; ---------------------------------------------------------------------------
.text:0040D6E6                 align 10h
.text:0040D6F0
.text:0040D6F0 ; =============== S U B R O U T I N E =======================================
.text:0040D6F0
.text:0040D6F0 ; Attributes: thunk
.text:0040D6F0
.text:0040D6F0 ; char *__cdecl ctime(const __time32_t *const Time)
.text:0040D6F0 ctime           proc near               ; CODE XREF: .text:00405C9D↑p
.text:0040D6F0                                         ; .text:00405CBF↑p ...
.text:0040D6F0
.text:0040D6F0 Time            = dword ptr  4
.text:0040D6F0
.text:0040D6F0                 jmp     ds:__imp_ctime
.text:0040D6F0 ctime           endp
.text:0040D6F0
.text:0040D6F0 ; ---------------------------------------------------------------------------
.text:0040D6F6                 align 10h
.text:0040D700
.text:0040D700 ; =============== S U B R O U T I N E =======================================
.text:0040D700
.text:0040D700 ; Attributes: thunk
.text:0040D700
.text:0040D700 ; intptr_t __cdecl get_osfhandle(int FileHandle)
.text:0040D700 _get_osfhandle  proc near               ; CODE XREF: sub_405D40+3A↑p
.text:0040D700                                         ; sub_40AC20+15↑p
.text:0040D700
.text:0040D700 FileHandle      = dword ptr  4
.text:0040D700
.text:0040D700                 jmp     ds:__imp__get_osfhandle
.text:0040D700 _get_osfhandle  endp
.text:0040D700
.text:0040D700 ; ---------------------------------------------------------------------------
.text:0040D706                 align 10h
.text:0040D710
.text:0040D710 ; =============== S U B R O U T I N E =======================================
.text:0040D710
.text:0040D710 ; Attributes: thunk
.text:0040D710
.text:0040D710 ; char *__cdecl strcat(char *Destination, const char *Source)
.text:0040D710 strcat          proc near               ; CODE XREF: sub_405D40+2F8↑p
.text:0040D710                                         ; .text:00409703↑p ...
.text:0040D710
.text:0040D710 Destination     = dword ptr  4
.text:0040D710 Source          = dword ptr  8
.text:0040D710
.text:0040D710                 jmp     ds:__imp_strcat
.text:0040D710 strcat          endp
.text:0040D710
.text:0040D710 ; ---------------------------------------------------------------------------
.text:0040D716                 align 10h
.text:0040D720
.text:0040D720 ; =============== S U B R O U T I N E =======================================
.text:0040D720
.text:0040D720 ; Attributes: thunk
.text:0040D720
.text:0040D720 ; char *__cdecl strcpy(char *Destination, const char *Source)
.text:0040D720 strcpy          proc near               ; CODE XREF: sub_405D40+2D3↑p
.text:0040D720                                         ; _win32_longpath+13C↑p ...
.text:0040D720
.text:0040D720 Destination     = dword ptr  4
.text:0040D720 Source          = dword ptr  8
.text:0040D720
.text:0040D720                 jmp     ds:__imp_strcpy
.text:0040D720 strcpy          endp
.text:0040D720
.text:0040D720 ; ---------------------------------------------------------------------------
.text:0040D726                 align 10h
.text:0040D730
.text:0040D730 ; =============== S U B R O U T I N E =======================================
.text:0040D730
.text:0040D730 ; Attributes: thunk
.text:0040D730
.text:0040D730 ; char *__cdecl strstr(const char *Str, const char *SubStr)
.text:0040D730 strstr          proc near               ; CODE XREF: sub_4065F0+3BF↑p
.text:0040D730                                         ; sub_4065F0+3DC↑p ...
.text:0040D730
.text:0040D730 Str             = dword ptr  4
.text:0040D730 SubStr          = dword ptr  8
.text:0040D730
.text:0040D730                 jmp     ds:__imp_strstr
.text:0040D730 strstr          endp
.text:0040D730
.text:0040D730 ; ---------------------------------------------------------------------------
.text:0040D736                 align 10h
.text:0040D740
.text:0040D740 ; =============== S U B R O U T I N E =======================================
.text:0040D740
.text:0040D740 ; Attributes: thunk
.text:0040D740
.text:0040D740 ; char *__cdecl strrchr(const char *Str, int Ch)
.text:0040D740 strrchr         proc near               ; CODE XREF: sub_4065F0+CB↑p
.text:0040D740                                         ; sub_4065F0+3A7↑p ...
.text:0040D740
.text:0040D740 Str             = dword ptr  4
.text:0040D740
.text:0040D740                 jmp     ds:__imp_strrchr
.text:0040D740 strrchr         endp
.text:0040D740
.text:0040D740 ; ---------------------------------------------------------------------------
.text:0040D746                 align 10h
.text:0040D750
.text:0040D750 ; =============== S U B R O U T I N E =======================================
.text:0040D750
.text:0040D750 ; Attributes: thunk
.text:0040D750
.text:0040D750 ; int __cdecl isalpha(int C)
.text:0040D750 isalpha         proc near               ; CODE XREF: _win32_longpath+25↑p
.text:0040D750
.text:0040D750 C               = dword ptr  4
.text:0040D750
.text:0040D750                 jmp     ds:__imp_isalpha
.text:0040D750 isalpha         endp
.text:0040D750
.text:0040D750 ; ---------------------------------------------------------------------------
.text:0040D756                 align 10h
.text:0040D760
.text:0040D760 ; =============== S U B R O U T I N E =======================================
.text:0040D760
.text:0040D760 ; Attributes: thunk
.text:0040D760
.text:0040D760 ; int __cdecl stricmp_0(const char *String1, const char *String2)
.text:0040D760 _stricmp_0      proc near               ; CODE XREF: .text:00408014↑p
.text:0040D760
.text:0040D760 String1         = dword ptr  4
.text:0040D760 String2         = dword ptr  8
.text:0040D760
.text:0040D760                 jmp     ds:__imp__stricmp_0
.text:0040D760 _stricmp_0      endp
.text:0040D760
.text:0040D760 ; ---------------------------------------------------------------------------
.text:0040D766                 align 10h
.text:0040D770
.text:0040D770 ; =============== S U B R O U T I N E =======================================
.text:0040D770
.text:0040D770 ; Attributes: thunk
.text:0040D770
.text:0040D770 ; char *__cdecl strncpy(char *Destination, const char *Source, size_t Count)
.text:0040D770 strncpy         proc near               ; CODE XREF: sub_4081A0+BE↑p
.text:0040D770                                         ; .text:00408A1A↑p ...
.text:0040D770
.text:0040D770 Destination     = dword ptr  4
.text:0040D770 Source          = dword ptr  8
.text:0040D770 Count           = dword ptr  0Ch
.text:0040D770
.text:0040D770                 jmp     ds:__imp_strncpy
.text:0040D770 strncpy         endp
.text:0040D770
.text:0040D770 ; ---------------------------------------------------------------------------
.text:0040D776                 align 10h
.text:0040D780
.text:0040D780 ; =============== S U B R O U T I N E =======================================
.text:0040D780
.text:0040D780 ; Attributes: thunk
.text:0040D780
.text:0040D780 ; int __cdecl toupper(int C)
.text:0040D780 toupper         proc near               ; CODE XREF: sub_4081A0+10E↑p
.text:0040D780
.text:0040D780 C               = dword ptr  4
.text:0040D780
.text:0040D780                 jmp     ds:__imp_toupper
.text:0040D780 toupper         endp
.text:0040D780
.text:0040D780 ; ---------------------------------------------------------------------------
.text:0040D786                 align 10h
.text:0040D790
.text:0040D790 ; =============== S U B R O U T I N E =======================================
.text:0040D790
.text:0040D790 ; Attributes: thunk
.text:0040D790
.text:0040D790 ; int sprintf(char *const Buffer, const char *const Format, ...)
.text:0040D790 sprintf         proc near               ; CODE XREF: .text:0040960A↑p
.text:0040D790                                         ; .text:0040962B↑p ...
.text:0040D790
.text:0040D790 Buffer          = dword ptr  4
.text:0040D790 Format          = dword ptr  8
.text:0040D790
.text:0040D790                 jmp     ds:__imp_sprintf
.text:0040D790 sprintf         endp
.text:0040D790
.text:0040D790 ; ---------------------------------------------------------------------------
.text:0040D796                 align 10h
.text:0040D7A0
.text:0040D7A0 ; =============== S U B R O U T I N E =======================================
.text:0040D7A0
.text:0040D7A0 ; Attributes: thunk
.text:0040D7A0
.text:0040D7A0 ; int sscanf(const char *const Buffer, const char *const Format, ...)
.text:0040D7A0 sscanf          proc near               ; CODE XREF: .text:0040A18E↑p
.text:0040D7A0
.text:0040D7A0 Buffer          = dword ptr  4
.text:0040D7A0 Format          = dword ptr  8
.text:0040D7A0
.text:0040D7A0                 jmp     ds:__imp_sscanf
.text:0040D7A0 sscanf          endp
.text:0040D7A0
.text:0040D7A0 ; ---------------------------------------------------------------------------
.text:0040D7A6                 align 10h
.text:0040D7B0
.text:0040D7B0 ; =============== S U B R O U T I N E =======================================
.text:0040D7B0
.text:0040D7B0 ; Attributes: thunk
.text:0040D7B0
.text:0040D7B0 ; size_t __cdecl strspn(const char *Str, const char *Control)
.text:0040D7B0 strspn          proc near               ; CODE XREF: .text:00409FDA↑p
.text:0040D7B0                                         ; .text:0040A1F4↑p ...
.text:0040D7B0
.text:0040D7B0 Str             = dword ptr  4
.text:0040D7B0 Control         = dword ptr  8
.text:0040D7B0
.text:0040D7B0                 jmp     ds:__imp_strspn
.text:0040D7B0 strspn          endp
.text:0040D7B0
.text:0040D7B0 ; ---------------------------------------------------------------------------
.text:0040D7B6                 align 10h
.text:0040D7C0
.text:0040D7C0 ; =============== S U B R O U T I N E =======================================
.text:0040D7C0
.text:0040D7C0 ; Attributes: thunk
.text:0040D7C0
.text:0040D7C0 ; FILE *__cdecl fopen(const char *FileName, const char *Mode)
.text:0040D7C0 fopen           proc near               ; CODE XREF: sub_40AA8F+26↑p
.text:0040D7C0                                         ; sub_40AA8F+99↑p
.text:0040D7C0
.text:0040D7C0 FileName        = dword ptr  4
.text:0040D7C0 Mode            = dword ptr  8
.text:0040D7C0
.text:0040D7C0                 jmp     ds:__imp_fopen
.text:0040D7C0 fopen           endp
.text:0040D7C0
.text:0040D7C0 ; ---------------------------------------------------------------------------
.text:0040D7C6                 align 10h
.text:0040D7D0
.text:0040D7D0 ; =============== S U B R O U T I N E =======================================
.text:0040D7D0
.text:0040D7D0 ; Attributes: thunk
.text:0040D7D0
.text:0040D7D0 ; __int64 __cdecl filelengthi64(int FileHandle)
.text:0040D7D0 _filelengthi64  proc near               ; CODE XREF: sub_40AC20+1F↑p
.text:0040D7D0
.text:0040D7D0 FileHandle      = dword ptr  4
.text:0040D7D0
.text:0040D7D0                 jmp     ds:__imp__filelengthi64
.text:0040D7D0 _filelengthi64  endp
.text:0040D7D0
.text:0040D7D0 ; ---------------------------------------------------------------------------
.text:0040D7D6                 align 10h
.text:0040D7E0
.text:0040D7E0 ; =============== S U B R O U T I N E =======================================
.text:0040D7E0
.text:0040D7E0 ; Attributes: thunk
.text:0040D7E0
.text:0040D7E0 ; char *__cdecl strpbrk(const char *Str, const char *Control)
.text:0040D7E0 strpbrk         proc near               ; CODE XREF: sub_40AC80+87↑p
.text:0040D7E0
.text:0040D7E0 Str             = dword ptr  4
.text:0040D7E0 Control         = dword ptr  8
.text:0040D7E0
.text:0040D7E0                 jmp     ds:__imp_strpbrk
.text:0040D7E0 strpbrk         endp
.text:0040D7E0
.text:0040D7E0 ; ---------------------------------------------------------------------------
.text:0040D7E6                 align 10h
.text:0040D7F0
.text:0040D7F0 ; =============== S U B R O U T I N E =======================================
.text:0040D7F0
.text:0040D7F0 ; Attributes: thunk
.text:0040D7F0
.text:0040D7F0 ; FILE *__cdecl fdopen(int FileHandle, const char *Format)
.text:0040D7F0 _fdopen         proc near               ; CODE XREF: sub_40AD20+69↑p
.text:0040D7F0
.text:0040D7F0 FileHandle      = dword ptr  4
.text:0040D7F0 Format          = dword ptr  8
.text:0040D7F0
.text:0040D7F0                 jmp     ds:__imp__fdopen
.text:0040D7F0 _fdopen         endp
.text:0040D7F0
.text:0040D7F0 ; ---------------------------------------------------------------------------
.text:0040D7F6                 align 10h
.text:0040D800
.text:0040D800 ; =============== S U B R O U T I N E =======================================
.text:0040D800
.text:0040D800 ; Attributes: thunk
.text:0040D800
.text:0040D800 ; int __cdecl close_0(int FileHandle)
.text:0040D800 _close_0        proc near               ; CODE XREF: sub_40AD20+90↑p
.text:0040D800
.text:0040D800 FileHandle      = dword ptr  4
.text:0040D800
.text:0040D800                 jmp     ds:__imp__close_0
.text:0040D800 _close_0        endp
.text:0040D800
.text:0040D800 ; ---------------------------------------------------------------------------
.text:0040D806                 align 10h
.text:0040D810
.text:0040D810 ; =============== S U B R O U T I N E =======================================
.text:0040D810
.text:0040D810 ; Attributes: thunk
.text:0040D810
.text:0040D810 ; int open_0(const char *FileName, int OpenFlag, ...)
.text:0040D810 _open_0         proc near               ; CODE XREF: sub_40B170:loc_40B500↑p
.text:0040D810
.text:0040D810 FileName        = dword ptr  4
.text:0040D810 OpenFlag        = dword ptr  8
.text:0040D810
.text:0040D810                 jmp     ds:__imp__open_0
.text:0040D810 _open_0         endp
.text:0040D810
.text:0040D810 ; ---------------------------------------------------------------------------
.text:0040D816                 align 10h
.text:0040D820
.text:0040D820 ; =============== S U B R O U T I N E =======================================
.text:0040D820
.text:0040D820 ; Attributes: noreturn thunk
.text:0040D820
.text:0040D820 _assert         proc near               ; CODE XREF: sub_40B170+414↑p
.text:0040D820                 jmp     ds:__imp__assert
.text:0040D820 _assert         endp
.text:0040D820
.text:0040D820 ; ---------------------------------------------------------------------------
.text:0040D826                 align 10h
.text:0040D830
.text:0040D830 ; =============== S U B R O U T I N E =======================================
.text:0040D830
.text:0040D830 ; Attributes: thunk
.text:0040D830
.text:0040D830 ; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.text:0040D830 SetUnhandledExceptionFilter proc near   ; CODE XREF: sub_401080+E↑p
.text:0040D830
.text:0040D830 lpTopLevelExceptionFilter= dword ptr  4
.text:0040D830
.text:0040D830                 jmp     ds:__imp_SetUnhandledExceptionFilter
.text:0040D830 SetUnhandledExceptionFilter endp
.text:0040D830
.text:0040D830 ; ---------------------------------------------------------------------------
.text:0040D836                 align 10h
.text:0040D840
.text:0040D840 ; =============== S U B R O U T I N E =======================================
.text:0040D840
.text:0040D840 ; Attributes: noreturn thunk
.text:0040D840
.text:0040D840 ; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.text:0040D840 ExitProcess     proc near               ; CODE XREF: .text:00401174↑p
.text:0040D840
.text:0040D840 uExitCode       = dword ptr  4
.text:0040D840
.text:0040D840                 jmp     ds:__imp_ExitProcess
.text:0040D840 ExitProcess     endp
.text:0040D840
.text:0040D840 ; ---------------------------------------------------------------------------
.text:0040D846                 align 10h
.text:0040D850
.text:0040D850 ; =============== S U B R O U T I N E =======================================
.text:0040D850
.text:0040D850 ; Attributes: thunk
.text:0040D850
.text:0040D850 ; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.text:0040D850 GetModuleHandleA proc near              ; CODE XREF: sub_405D40+108↑p
.text:0040D850                                         ; sub_4065F0+329↑p ...
.text:0040D850
.text:0040D850 lpModuleName    = dword ptr  4
.text:0040D850
.text:0040D850                 jmp     ds:__imp_GetModuleHandleA
.text:0040D850 GetModuleHandleA endp
.text:0040D850
.text:0040D850 ; ---------------------------------------------------------------------------
.text:0040D856                 align 10h
.text:0040D860
.text:0040D860 ; =============== S U B R O U T I N E =======================================
.text:0040D860
.text:0040D860 ; Attributes: thunk
.text:0040D860
.text:0040D860 ; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.text:0040D860 GetProcAddress  proc near               ; CODE XREF: sub_405D40+123↑p
.text:0040D860                                         ; sub_405D40+28E↑p ...
.text:0040D860
.text:0040D860 hModule         = dword ptr  4
.text:0040D860 lpProcName      = dword ptr  8
.text:0040D860
.text:0040D860                 jmp     ds:__imp_GetProcAddress
.text:0040D860 GetProcAddress  endp
.text:0040D860
.text:0040D860 ; ---------------------------------------------------------------------------
.text:0040D866                 align 10h
.text:0040D870
.text:0040D870 ; =============== S U B R O U T I N E =======================================
.text:0040D870
.text:0040D870 ; Attributes: thunk
.text:0040D870
.text:0040D870 ; DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName)
.text:0040D870 GetFileAttributesA proc near            ; CODE XREF: sub_405D40+137↑p
.text:0040D870                                         ; sub_409310+62↑p
.text:0040D870
.text:0040D870 lpFileName      = dword ptr  4
.text:0040D870
.text:0040D870                 jmp     ds:__imp_GetFileAttributesA
.text:0040D870 GetFileAttributesA endp
.text:0040D870
.text:0040D870 ; ---------------------------------------------------------------------------
.text:0040D876                 align 10h
.text:0040D880
.text:0040D880 ; =============== S U B R O U T I N E =======================================
.text:0040D880
.text:0040D880 ; Attributes: thunk
.text:0040D880
.text:0040D880 ; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
.text:0040D880 FreeLibrary     proc near               ; CODE XREF: sub_405D40+194↑p
.text:0040D880                                         ; sub_405D40+37D↑p ...
.text:0040D880
.text:0040D880 hLibModule      = dword ptr  4
.text:0040D880
.text:0040D880                 jmp     ds:__imp_FreeLibrary
.text:0040D880 FreeLibrary     endp
.text:0040D880
.text:0040D880 ; ---------------------------------------------------------------------------
.text:0040D886                 align 10h
.text:0040D890
.text:0040D890 ; =============== S U B R O U T I N E =======================================
.text:0040D890
.text:0040D890 ; Attributes: thunk
.text:0040D890
.text:0040D890 ; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D890 FindFirstFileA  proc near               ; CODE XREF: sub_405D40+1BE↑p
.text:0040D890                                         ; sub_405D40+3AF↑p ...
.text:0040D890
.text:0040D890 lpFileName      = dword ptr  4
.text:0040D890 lpFindFileData  = dword ptr  8
.text:0040D890
.text:0040D890                 jmp     ds:__imp_FindFirstFileA
.text:0040D890 FindFirstFileA  endp
.text:0040D890
.text:0040D890 ; ---------------------------------------------------------------------------
.text:0040D896                 align 10h
.text:0040D8A0
.text:0040D8A0 ; =============== S U B R O U T I N E =======================================
.text:0040D8A0
.text:0040D8A0 ; Attributes: thunk
.text:0040D8A0
.text:0040D8A0 ; BOOL __stdcall FindClose(HANDLE hFindFile)
.text:0040D8A0 FindClose       proc near               ; CODE XREF: sub_405D40+213↑p
.text:0040D8A0                                         ; sub_405D40+36E↑p ...
.text:0040D8A0
.text:0040D8A0 hFindFile       = dword ptr  4
.text:0040D8A0
.text:0040D8A0                 jmp     ds:__imp_FindClose
.text:0040D8A0 FindClose       endp
.text:0040D8A0
.text:0040D8A0 ; ---------------------------------------------------------------------------
.text:0040D8A6                 align 10h
.text:0040D8B0
.text:0040D8B0 ; =============== S U B R O U T I N E =======================================
.text:0040D8B0
.text:0040D8B0 ; Attributes: thunk
.text:0040D8B0
.text:0040D8B0 ; HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName)
.text:0040D8B0 LoadLibraryA    proc near               ; CODE XREF: sub_405D40+273↑p
.text:0040D8B0                                         ; sub_4065F0+134↑p ...
.text:0040D8B0
.text:0040D8B0 lpLibFileName   = dword ptr  4
.text:0040D8B0
.text:0040D8B0                 jmp     ds:__imp_LoadLibraryA
.text:0040D8B0 LoadLibraryA    endp
.text:0040D8B0
.text:0040D8B0 ; ---------------------------------------------------------------------------
.text:0040D8B6                 align 10h
.text:0040D8C0
.text:0040D8C0 ; =============== S U B R O U T I N E =======================================
.text:0040D8C0
.text:0040D8C0 ; Attributes: thunk
.text:0040D8C0
.text:0040D8C0 ; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.text:0040D8C0 FindNextFileA   proc near               ; CODE XREF: sub_405D40+35F↑p
.text:0040D8C0
.text:0040D8C0 hFindFile       = dword ptr  4
.text:0040D8C0 lpFindFileData  = dword ptr  8
.text:0040D8C0
.text:0040D8C0                 jmp     ds:__imp_FindNextFileA
.text:0040D8C0 FindNextFileA   endp
.text:0040D8C0
.text:0040D8C0 ; ---------------------------------------------------------------------------
.text:0040D8C6                 align 10h
.text:0040D8D0
.text:0040D8D0 ; =============== S U B R O U T I N E =======================================
.text:0040D8D0
.text:0040D8D0 ; Attributes: thunk
.text:0040D8D0
.text:0040D8D0 ; DWORD __stdcall GetFileType(HANDLE hFile)
.text:0040D8D0 GetFileType     proc near               ; CODE XREF: sub_405D40+423↑p
.text:0040D8D0                                         ; .text:00406DDA↑p
.text:0040D8D0
.text:0040D8D0 hFile           = dword ptr  4
.text:0040D8D0
.text:0040D8D0                 jmp     ds:__imp_GetFileType
.text:0040D8D0 GetFileType     endp
.text:0040D8D0
.text:0040D8D0 ; ---------------------------------------------------------------------------
.text:0040D8D6                 align 10h
.text:0040D8E0
.text:0040D8E0 ; =============== S U B R O U T I N E =======================================
.text:0040D8E0
.text:0040D8E0 ; Attributes: thunk
.text:0040D8E0
.text:0040D8E0 ; BOOL __stdcall GetFileInformationByHandle(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.text:0040D8E0 GetFileInformationByHandle proc near    ; CODE XREF: sub_405D40+449↑p
.text:0040D8E0
.text:0040D8E0 hFile           = dword ptr  4
.text:0040D8E0 lpFileInformation= dword ptr  8
.text:0040D8E0
.text:0040D8E0                 jmp     ds:__imp_GetFileInformationByHandle
.text:0040D8E0 GetFileInformationByHandle endp
.text:0040D8E0
.text:0040D8E0 ; ---------------------------------------------------------------------------
.text:0040D8E6                 align 10h
.text:0040D8F0
.text:0040D8F0 ; =============== S U B R O U T I N E =======================================
.text:0040D8F0
.text:0040D8F0 ; Attributes: thunk
.text:0040D8F0
.text:0040D8F0 ; DWORD __stdcall GetFileSize(HANDLE hFile, LPDWORD lpFileSizeHigh)
.text:0040D8F0 GetFileSize     proc near               ; CODE XREF: sub_405D40+7D2↑p
.text:0040D8F0
.text:0040D8F0 hFile           = dword ptr  4
.text:0040D8F0 lpFileSizeHigh  = dword ptr  8
.text:0040D8F0
.text:0040D8F0                 jmp     ds:__imp_GetFileSize
.text:0040D8F0 GetFileSize     endp
.text:0040D8F0
.text:0040D8F0 ; ---------------------------------------------------------------------------
.text:0040D8F6                 align 10h
.text:0040D900
.text:0040D900 ; =============== S U B R O U T I N E =======================================
.text:0040D900
.text:0040D900 ; Attributes: thunk
.text:0040D900
.text:0040D900 ; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.text:0040D900 PeekNamedPipe   proc near               ; CODE XREF: sub_405D40+819↑p
.text:0040D900
.text:0040D900 hNamedPipe      = dword ptr  4
.text:0040D900 lpBuffer        = dword ptr  8
.text:0040D900 nBufferSize     = dword ptr  0Ch
.text:0040D900 lpBytesRead     = dword ptr  10h
.text:0040D900 lpTotalBytesAvail= dword ptr  14h
.text:0040D900 lpBytesLeftThisMessage= dword ptr  18h
.text:0040D900
.text:0040D900                 jmp     ds:__imp_PeekNamedPipe
.text:0040D900 PeekNamedPipe   endp
.text:0040D900
.text:0040D900 ; ---------------------------------------------------------------------------
.text:0040D906                 align 10h
.text:0040D910
.text:0040D910 ; =============== S U B R O U T I N E =======================================
.text:0040D910
.text:0040D910 ; Attributes: thunk
.text:0040D910
.text:0040D910 ; UINT __stdcall GetDriveTypeA(LPCSTR lpRootPathName)
.text:0040D910 GetDriveTypeA   proc near               ; CODE XREF: sub_4065F0+4C↑p
.text:0040D910
.text:0040D910 lpRootPathName  = dword ptr  4
.text:0040D910
.text:0040D910                 jmp     ds:__imp_GetDriveTypeA
.text:0040D910 GetDriveTypeA   endp
.text:0040D910
.text:0040D910 ; ---------------------------------------------------------------------------
.text:0040D916                 align 10h
.text:0040D920
.text:0040D920 ; =============== S U B R O U T I N E =======================================
.text:0040D920
.text:0040D920 ; Attributes: thunk
.text:0040D920
.text:0040D920 ; DWORD __stdcall GetLastError()
.text:0040D920 GetLastError    proc near               ; CODE XREF: sub_4065F0:loc_406879↑p
.text:0040D920                                         ; .text:loc_4073BD↑p ...
.text:0040D920                 jmp     ds:__imp_GetLastError
.text:0040D920 GetLastError    endp
.text:0040D920
.text:0040D920 ; ---------------------------------------------------------------------------
.text:0040D926                 align 10h
.text:0040D930
.text:0040D930 ; =============== S U B R O U T I N E =======================================
.text:0040D930
.text:0040D930 ; Attributes: thunk
.text:0040D930
.text:0040D930 ; BOOL __stdcall GetVolumeInformationA(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.text:0040D930 GetVolumeInformationA proc near         ; CODE XREF: sub_406AF0+64↑p
.text:0040D930                                         ; .text:0040709C↑p ...
.text:0040D930
.text:0040D930 lpRootPathName  = dword ptr  4
.text:0040D930 lpVolumeNameBuffer= dword ptr  8
.text:0040D930 nVolumeNameSize = dword ptr  0Ch
.text:0040D930 lpVolumeSerialNumber= dword ptr  10h
.text:0040D930 lpMaximumComponentLength= dword ptr  14h
.text:0040D930 lpFileSystemFlags= dword ptr  18h
.text:0040D930 lpFileSystemNameBuffer= dword ptr  1Ch
.text:0040D930 nFileSystemNameSize= dword ptr  20h
.text:0040D930
.text:0040D930                 jmp     ds:__imp_GetVolumeInformationA
.text:0040D930 GetVolumeInformationA endp
.text:0040D930
.text:0040D930 ; ---------------------------------------------------------------------------
.text:0040D936                 align 10h
.text:0040D940
.text:0040D940 ; =============== S U B R O U T I N E =======================================
.text:0040D940
.text:0040D940 ; Attributes: thunk
.text:0040D940
.text:0040D940 ; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.text:0040D940 CreateFileA     proc near               ; CODE XREF: sub_40B6A0-3E1A↑p
.text:0040D940                                         ; .text:00408793↑p ...
.text:0040D940
.text:0040D940 lpFileName      = dword ptr  4
.text:0040D940 dwDesiredAccess = dword ptr  8
.text:0040D940 dwShareMode     = dword ptr  0Ch
.text:0040D940 lpSecurityAttributes= dword ptr  10h
.text:0040D940 dwCreationDisposition= dword ptr  14h
.text:0040D940 dwFlagsAndAttributes= dword ptr  18h
.text:0040D940 hTemplateFile   = dword ptr  1Ch
.text:0040D940
.text:0040D940                 jmp     ds:__imp_CreateFileA
.text:0040D940 CreateFileA     endp
.text:0040D940
.text:0040D940 ; ---------------------------------------------------------------------------
.text:0040D946                 align 10h
.text:0040D950
.text:0040D950 ; =============== S U B R O U T I N E =======================================
.text:0040D950
.text:0040D950 ; Attributes: thunk
.text:0040D950
.text:0040D950 ; BOOL __stdcall CloseHandle(HANDLE hObject)
.text:0040D950 CloseHandle     proc near               ; CODE XREF: sub_40B6A0-3DFF↑p
.text:0040D950                                         ; .text:00408809↑p ...
.text:0040D950
.text:0040D950 hObject         = dword ptr  4
.text:0040D950
.text:0040D950                 jmp     ds:__imp_CloseHandle
.text:0040D950 CloseHandle     endp
.text:0040D950
.text:0040D950 ; ---------------------------------------------------------------------------
.text:0040D956                 align 10h
.text:0040D960
.text:0040D960 ; =============== S U B R O U T I N E =======================================
.text:0040D960
.text:0040D960 ; Attributes: thunk
.text:0040D960
.text:0040D960 ; UINT __stdcall SetErrorMode(UINT uMode)
.text:0040D960 SetErrorMode    proc near               ; CODE XREF: sub_40B6A0-3DCA↑p
.text:0040D960                                         ; sub_409310+57↑p ...
.text:0040D960
.text:0040D960 uMode           = dword ptr  4
.text:0040D960
.text:0040D960                 jmp     ds:__imp_SetErrorMode
.text:0040D960 SetErrorMode    endp
.text:0040D960
.text:0040D960 ; ---------------------------------------------------------------------------
.text:0040D966                 align 10h
.text:0040D970
.text:0040D970 ; =============== S U B R O U T I N E =======================================
.text:0040D970
.text:0040D970 ; Attributes: thunk
.text:0040D970
.text:0040D970 ; DWORD __stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.text:0040D970 GetModuleFileNameA proc near            ; CODE XREF: sub_407E90+1C↑p
.text:0040D970
.text:0040D970 hModule         = dword ptr  4
.text:0040D970 lpFilename      = dword ptr  8
.text:0040D970 nSize           = dword ptr  0Ch
.text:0040D970
.text:0040D970                 jmp     ds:__imp_GetModuleFileNameA
.text:0040D970 GetModuleFileNameA endp
.text:0040D970
.text:0040D970 ; ---------------------------------------------------------------------------
.text:0040D976                 align 10h
.text:0040D980
.text:0040D980 ; =============== S U B R O U T I N E =======================================
.text:0040D980
.text:0040D980 ; Attributes: thunk
.text:0040D980
.text:0040D980 ; DWORD __stdcall GetShortPathNameA(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.text:0040D980 GetShortPathNameA proc near             ; CODE XREF: .text:00408116↑p
.text:0040D980                                         ; .text:00408140↑p
.text:0040D980
.text:0040D980 lpszLongPath    = dword ptr  4
.text:0040D980 lpszShortPath   = dword ptr  8
.text:0040D980 cchBuffer       = dword ptr  0Ch
.text:0040D980
.text:0040D980                 jmp     ds:__imp_GetShortPathNameA
.text:0040D980 GetShortPathNameA endp
.text:0040D980
.text:0040D980 ; ---------------------------------------------------------------------------
.text:0040D986                 align 10h
.text:0040D990
.text:0040D990 ; =============== S U B R O U T I N E =======================================
.text:0040D990
.text:0040D990 ; Attributes: thunk
.text:0040D990
.text:0040D990 ; DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040D990 GetCurrentDirectoryA proc near          ; CODE XREF: .text:00408448↑p
.text:0040D990                                         ; .text:00408464↑p ...
.text:0040D990
.text:0040D990 nBufferLength   = dword ptr  4
.text:0040D990 lpBuffer        = dword ptr  8
.text:0040D990
.text:0040D990                 jmp     ds:__imp_GetCurrentDirectoryA
.text:0040D990 GetCurrentDirectoryA endp
.text:0040D990
.text:0040D990 ; ---------------------------------------------------------------------------
.text:0040D996                 align 10h
.text:0040D9A0
.text:0040D9A0 ; =============== S U B R O U T I N E =======================================
.text:0040D9A0
.text:0040D9A0 ; Attributes: thunk
.text:0040D9A0
.text:0040D9A0 ; BOOL __stdcall DeviceIoControl(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.text:0040D9A0 DeviceIoControl proc near               ; CODE XREF: .text:004087FC↑p
.text:0040D9A0                                         ; sub_408BC0+1E5↑p
.text:0040D9A0
.text:0040D9A0 hDevice         = dword ptr  4
.text:0040D9A0 dwIoControlCode = dword ptr  8
.text:0040D9A0 lpInBuffer      = dword ptr  0Ch
.text:0040D9A0 nInBufferSize   = dword ptr  10h
.text:0040D9A0 lpOutBuffer     = dword ptr  14h
.text:0040D9A0 nOutBufferSize  = dword ptr  18h
.text:0040D9A0 lpBytesReturned = dword ptr  1Ch
.text:0040D9A0 lpOverlapped    = dword ptr  20h
.text:0040D9A0
.text:0040D9A0                 jmp     ds:__imp_DeviceIoControl
.text:0040D9A0 DeviceIoControl endp
.text:0040D9A0
.text:0040D9A0 ; ---------------------------------------------------------------------------
.text:0040D9A6                 align 10h
.text:0040D9B0
.text:0040D9B0 ; =============== S U B R O U T I N E =======================================
.text:0040D9B0
.text:0040D9B0 ; Attributes: thunk
.text:0040D9B0
.text:0040D9B0 ; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.text:0040D9B0 GetDiskFreeSpaceA proc near             ; CODE XREF: .text:00408B53↑p
.text:0040D9B0                                         ; sub_408BC0+7B↑p ...
.text:0040D9B0
.text:0040D9B0 lpRootPathName  = dword ptr  4
.text:0040D9B0 lpSectorsPerCluster= dword ptr  8
.text:0040D9B0 lpBytesPerSector= dword ptr  0Ch
.text:0040D9B0 lpNumberOfFreeClusters= dword ptr  10h
.text:0040D9B0 lpTotalNumberOfClusters= dword ptr  14h
.text:0040D9B0
.text:0040D9B0                 jmp     ds:__imp_GetDiskFreeSpaceA
.text:0040D9B0 GetDiskFreeSpaceA endp
.text:0040D9B0
.text:0040D9B0 ; ---------------------------------------------------------------------------
.text:0040D9B6                 align 10h
.text:0040D9C0
.text:0040D9C0 ; =============== S U B R O U T I N E =======================================
.text:0040D9C0
.text:0040D9C0 ; Attributes: thunk
.text:0040D9C0
.text:0040D9C0 ; void __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)
.text:0040D9C0 GetSystemInfo   proc near               ; CODE XREF: sub_408E60+3A↑p
.text:0040D9C0
.text:0040D9C0 lpSystemInfo    = dword ptr  4
.text:0040D9C0
.text:0040D9C0                 jmp     ds:__imp_GetSystemInfo
.text:0040D9C0 GetSystemInfo   endp
.text:0040D9C0
.text:0040D9C0 ; ---------------------------------------------------------------------------
.text:0040D9C6                 align 10h
.text:0040D9D0
.text:0040D9D0 ; =============== S U B R O U T I N E =======================================
.text:0040D9D0
.text:0040D9D0 ; Attributes: thunk
.text:0040D9D0
.text:0040D9D0 ; DWORD __stdcall GetFullPathNameA(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.text:0040D9D0 GetFullPathNameA proc near              ; CODE XREF: sub_4091E0+45↑p
.text:0040D9D0                                         ; sub_4091E0+ED↑p
.text:0040D9D0
.text:0040D9D0 lpFileName      = dword ptr  4
.text:0040D9D0 nBufferLength   = dword ptr  8
.text:0040D9D0 lpBuffer        = dword ptr  0Ch
.text:0040D9D0 lpFilePart      = dword ptr  10h
.text:0040D9D0
.text:0040D9D0                 jmp     ds:__imp_GetFullPathNameA
.text:0040D9D0 GetFullPathNameA endp
.text:0040D9D0
.text:0040D9D0 ; ---------------------------------------------------------------------------
.text:0040D9D6                 align 10h
.text:0040D9E0
.text:0040D9E0 ; =============== S U B R O U T I N E =======================================
.text:0040D9E0
.text:0040D9E0 ; Attributes: thunk
.text:0040D9E0
.text:0040D9E0 ; int __stdcall lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.text:0040D9E0 lstrcmpiA       proc near               ; CODE XREF: .text:0040989B↑p
.text:0040D9E0                                         ; .text:004098B2↑p ...
.text:0040D9E0
.text:0040D9E0 lpString1       = dword ptr  4
.text:0040D9E0 lpString2       = dword ptr  8
.text:0040D9E0
.text:0040D9E0                 jmp     ds:__imp_lstrcmpiA
.text:0040D9E0 lstrcmpiA       endp
.text:0040D9E0
.text:0040D9E0 ; ---------------------------------------------------------------------------
.text:0040D9E6                 align 10h
.text:0040D9F0
.text:0040D9F0 ; =============== S U B R O U T I N E =======================================
.text:0040D9F0
.text:0040D9F0 ; Attributes: thunk
.text:0040D9F0
.text:0040D9F0 ; DWORD __stdcall GetVersion()
.text:0040D9F0 GetVersion      proc near               ; CODE XREF: .text:00409C23↑p
.text:0040D9F0                 jmp     ds:__imp_GetVersion
.text:0040D9F0 GetVersion      endp
.text:0040D9F0
.text:0040D9F0 ; ---------------------------------------------------------------------------
.text:0040D9F6                 align 10h
.text:0040DA00
.text:0040DA00 ; =============== S U B R O U T I N E =======================================
.text:0040DA00
.text:0040DA00 ; Attributes: thunk
.text:0040DA00
.text:0040DA00 ; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA lpVersionInformation)
.text:0040DA00 GetVersionExA   proc near               ; CODE XREF: sub_409CB0+32↑p
.text:0040DA00                                         ; sub_409CB0+20B↑p
.text:0040DA00
.text:0040DA00 lpVersionInformation= dword ptr  4
.text:0040DA00
.text:0040DA00                 jmp     ds:__imp_GetVersionExA
.text:0040DA00 GetVersionExA   endp
.text:0040DA00
.text:0040DA00 ; ---------------------------------------------------------------------------
.text:0040DA06                 align 10h
.text:0040DA10
.text:0040DA10 ; =============== S U B R O U T I N E =======================================
.text:0040DA10
.text:0040DA10 ; Attributes: thunk
.text:0040DA10
.text:0040DA10 ; DWORD __stdcall GetLogicalDriveStringsA(DWORD nBufferLength, LPSTR lpBuffer)
.text:0040DA10 GetLogicalDriveStringsA proc near       ; CODE XREF: .text:0040A34F↑p
.text:0040DA10                                         ; .text:0040A37E↑p ...
.text:0040DA10
.text:0040DA10 nBufferLength   = dword ptr  4
.text:0040DA10 lpBuffer        = dword ptr  8
.text:0040DA10
.text:0040DA10                 jmp     ds:__imp_GetLogicalDriveStringsA
.text:0040DA10 GetLogicalDriveStringsA endp
.text:0040DA10
.text:0040DA10 ; ---------------------------------------------------------------------------
.text:0040DA16                 align 10h
.text:0040DA20
.text:0040DA20 ; =============== S U B R O U T I N E =======================================
.text:0040DA20
.text:0040DA20 ; Attributes: thunk
.text:0040DA20
.text:0040DA20 ; HANDLE __stdcall GetProcessHeap()
.text:0040DA20 GetProcessHeap  proc near               ; CODE XREF: .text:0040A359↑p
.text:0040DA20                                         ; sub_40AA30+24↑p ...
.text:0040DA20                 jmp     ds:__imp_GetProcessHeap
.text:0040DA20 GetProcessHeap  endp
.text:0040DA20
.text:0040DA20 ; ---------------------------------------------------------------------------
.text:0040DA26                 align 10h
.text:0040DA30
.text:0040DA30 ; =============== S U B R O U T I N E =======================================
.text:0040DA30
.text:0040DA30 ; Attributes: thunk
.text:0040DA30
.text:0040DA30 ; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.text:0040DA30 HeapAlloc       proc near               ; CODE XREF: .text:0040A36D↑p
.text:0040DA30                                         ; sub_40AA30+38↑p ...
.text:0040DA30
.text:0040DA30 hHeap           = dword ptr  4
.text:0040DA30 dwFlags         = dword ptr  8
.text:0040DA30 dwBytes         = dword ptr  0Ch
.text:0040DA30
.text:0040DA30                 jmp     ds:__imp_HeapAlloc
.text:0040DA30 HeapAlloc       endp
.text:0040DA30
.text:0040DA30 ; ---------------------------------------------------------------------------
.text:0040DA36                 align 10h
.text:0040DA40
.text:0040DA40 ; =============== S U B R O U T I N E =======================================
.text:0040DA40
.text:0040DA40 ; Attributes: thunk
.text:0040DA40
.text:0040DA40 ; BOOL __stdcall HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.text:0040DA40 HeapFree        proc near               ; CODE XREF: .text:0040AB6D↑p
.text:0040DA40
.text:0040DA40 hHeap           = dword ptr  4
.text:0040DA40 dwFlags         = dword ptr  8
.text:0040DA40 lpMem           = dword ptr  0Ch
.text:0040DA40
.text:0040DA40                 jmp     ds:__imp_HeapFree
.text:0040DA40 HeapFree        endp
.text:0040DA40
.text:0040DA40 ; ---------------------------------------------------------------------------
.text:0040DA46                 align 10h
.text:0040DA50
.text:0040DA50 ; =============== S U B R O U T I N E =======================================
.text:0040DA50
.text:0040DA50 ; Attributes: thunk
.text:0040DA50
.text:0040DA50 ; BOOL __stdcall UnlockFile(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.text:0040DA50 UnlockFile      proc near               ; CODE XREF: sub_40AC20+40↑p
.text:0040DA50
.text:0040DA50 hFile           = dword ptr  4
.text:0040DA50 dwFileOffsetLow = dword ptr  8
.text:0040DA50 dwFileOffsetHigh= dword ptr  0Ch
.text:0040DA50 nNumberOfBytesToUnlockLow= dword ptr  10h
.text:0040DA50 nNumberOfBytesToUnlockHigh= dword ptr  14h
.text:0040DA50
.text:0040DA50                 jmp     ds:__imp_UnlockFile
.text:0040DA50 UnlockFile      endp
.text:0040DA50
.text:0040DA50 ; ---------------------------------------------------------------------------
.text:0040DA56                 align 10h
.text:0040DA60
.text:0040DA60 ; =============== S U B R O U T I N E =======================================
.text:0040DA60
.text:0040DA60 ; Attributes: thunk
.text:0040DA60
.text:0040DA60 ; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.text:0040DA60 CreateDirectoryA proc near              ; CODE XREF: sub_40B5A0+22↑p
.text:0040DA60
.text:0040DA60 lpPathName      = dword ptr  4
.text:0040DA60 lpSecurityAttributes= dword ptr  8
.text:0040DA60
.text:0040DA60                 jmp     ds:__imp_CreateDirectoryA
.text:0040DA60 CreateDirectoryA endp
.text:0040DA60
.text:0040DA60 ; ---------------------------------------------------------------------------
.text:0040DA66                 align 10h
.text:0040DA70
.text:0040DA70 ; =============== S U B R O U T I N E =======================================
.text:0040DA70
.text:0040DA70 ; Attributes: thunk
.text:0040DA70
.text:0040DA70 ; DWORD __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.text:0040DA70 GetTimeZoneInformation proc near        ; CODE XREF: sub_40B7B0+22↑p
.text:0040DA70
.text:0040DA70 lpTimeZoneInformation= dword ptr  4
.text:0040DA70
.text:0040DA70                 jmp     ds:__imp_GetTimeZoneInformation
.text:0040DA70 GetTimeZoneInformation endp
.text:0040DA70
.text:0040DA70 ; ---------------------------------------------------------------------------
.text:0040DA76                 align 10h
.text:0040DA80
.text:0040DA80 ; =============== S U B R O U T I N E =======================================
.text:0040DA80
.text:0040DA80 ; Attributes: thunk
.text:0040DA80
.text:0040DA80 ; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
.text:0040DA80 GetSystemTimeAsFileTime proc near       ; CODE XREF: sub_40B7B0+4F↑p
.text:0040DA80
.text:0040DA80 lpSystemTimeAsFileTime= dword ptr  4
.text:0040DA80
.text:0040DA80                 jmp     ds:__imp_GetSystemTimeAsFileTime
.text:0040DA80 GetSystemTimeAsFileTime endp
.text:0040DA80
.text:0040DA80 ; ---------------------------------------------------------------------------
.text:0040DA86                 align 10h
.text:0040DA90
.text:0040DA90 ; =============== S U B R O U T I N E =======================================
.text:0040DA90
.text:0040DA90 ; Attributes: thunk
.text:0040DA90
.text:0040DA90 ; BOOL __stdcall AreFileApisANSI()
.text:0040DA90 AreFileApisANSI proc near               ; CODE XREF: sub_40B8F0+89↑p
.text:0040DA90                 jmp     ds:__imp_AreFileApisANSI
.text:0040DA90 AreFileApisANSI endp
.text:0040DA90
.text:0040DA90 ; ---------------------------------------------------------------------------
.text:0040DA96                 align 10h
.text:0040DAA0
.text:0040DAA0 ; =============== S U B R O U T I N E =======================================
.text:0040DAA0
.text:0040DAA0 ; Attributes: thunk
.text:0040DAA0
.text:0040DAA0 ; int __stdcall MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.text:0040DAA0 MultiByteToWideChar proc near           ; CODE XREF: sub_40B8F0+BD↑p
.text:0040DAA0
.text:0040DAA0 CodePage        = dword ptr  4
.text:0040DAA0 dwFlags         = dword ptr  8
.text:0040DAA0 lpMultiByteStr  = dword ptr  0Ch
.text:0040DAA0 cbMultiByte     = dword ptr  10h
.text:0040DAA0 lpWideCharStr   = dword ptr  14h
.text:0040DAA0 cchWideChar     = dword ptr  18h
.text:0040DAA0
.text:0040DAA0                 jmp     ds:__imp_MultiByteToWideChar
.text:0040DAA0 MultiByteToWideChar endp
.text:0040DAA0
.text:0040DAA0 ; ---------------------------------------------------------------------------
.text:0040DAA6                 align 10h
.text:0040DAB0
.text:0040DAB0 ; =============== S U B R O U T I N E =======================================
.text:0040DAB0
.text:0040DAB0 ; Attributes: thunk
.text:0040DAB0
.text:0040DAB0 ; LPSTR __stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.text:0040DAB0 lstrcpyA        proc near               ; CODE XREF: sub_40B8F0+128↑p
.text:0040DAB0
.text:0040DAB0 lpString1       = dword ptr  4
.text:0040DAB0 lpString2       = dword ptr  8
.text:0040DAB0
.text:0040DAB0                 jmp     ds:__imp_lstrcpyA
.text:0040DAB0 lstrcpyA        endp
.text:0040DAB0
.text:0040DAB0 ; ---------------------------------------------------------------------------
.text:0040DAB6                 align 10h
.text:0040DAC0
.text:0040DAC0 ; =============== S U B R O U T I N E =======================================
.text:0040DAC0
.text:0040DAC0 ; Attributes: thunk
.text:0040DAC0
.text:0040DAC0 ; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.text:0040DAC0 RegOpenKeyExA   proc near               ; CODE XREF: .text:00409821↑p
.text:0040DAC0
.text:0040DAC0 hKey            = dword ptr  4
.text:0040DAC0 lpSubKey        = dword ptr  8
.text:0040DAC0 ulOptions       = dword ptr  0Ch
.text:0040DAC0 samDesired      = dword ptr  10h
.text:0040DAC0 phkResult       = dword ptr  14h
.text:0040DAC0
.text:0040DAC0                 jmp     ds:__imp_RegOpenKeyExA
.text:0040DAC0 RegOpenKeyExA   endp
.text:0040DAC0
.text:0040DAC0 ; ---------------------------------------------------------------------------
.text:0040DAC6                 align 10h
.text:0040DAD0
.text:0040DAD0 ; =============== S U B R O U T I N E =======================================
.text:0040DAD0
.text:0040DAD0 ; Attributes: thunk
.text:0040DAD0
.text:0040DAD0 ; LSTATUS __stdcall RegQueryValueExA(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.text:0040DAD0 RegQueryValueExA proc near              ; CODE XREF: .text:00409864↑p
.text:0040DAD0
.text:0040DAD0 hKey            = dword ptr  4
.text:0040DAD0 lpValueName     = dword ptr  8
.text:0040DAD0 lpReserved      = dword ptr  0Ch
.text:0040DAD0 lpType          = dword ptr  10h
.text:0040DAD0 lpData          = dword ptr  14h
.text:0040DAD0 lpcbData        = dword ptr  18h
.text:0040DAD0
.text:0040DAD0                 jmp     ds:__imp_RegQueryValueExA
.text:0040DAD0 RegQueryValueExA endp
.text:0040DAD0
.text:0040DAD0 ; ---------------------------------------------------------------------------
.text:0040DAD6                 align 10h
.text:0040DAE0
.text:0040DAE0 ; =============== S U B R O U T I N E =======================================
.text:0040DAE0
.text:0040DAE0 ; Attributes: thunk
.text:0040DAE0
.text:0040DAE0 ; LSTATUS __stdcall RegCloseKey(HKEY hKey)
.text:0040DAE0 RegCloseKey     proc near               ; CODE XREF: .text:00409888↑p
.text:0040DAE0
.text:0040DAE0 hKey            = dword ptr  4
.text:0040DAE0
.text:0040DAE0                 jmp     ds:__imp_RegCloseKey
.text:0040DAE0 RegCloseKey     endp
.text:0040DAE0
.text:0040DAE0 ; ---------------------------------------------------------------------------
.text:0040DAE6                 db 2 dup(90h)
.text:0040DAE8                 dd 2 dup(0)
.text:0040DAF0                 dd 21400h, 0
.text:0040DAF8                 dd 0C0h, 46000000h
.text:0040DB00 ; const IID rclsid
.text:0040DB00 rclsid          dd 21401h               ; Data1
.text:0040DB00                                         ; DATA XREF: sub_40B8F0+4B↑o
.text:0040DB00                 dw 0                    ; Data2
.text:0040DB00                 dw 0                    ; Data3
.text:0040DB00                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040DB10                 dd 214A0h, 0
.text:0040DB18                 dd 0C0h, 46000000h, 214A1h, 0
.text:0040DB28                 dd 0C0h, 46000000h, 214D0h, 0
.text:0040DB38                 dd 0C0h, 46000000h, 214D1h, 0
.text:0040DB48                 dd 0C0h, 46000000h, 214D2h, 0
.text:0040DB58                 dd 0C0h, 46000000h, 214E1h, 0
.text:0040DB68                 dd 0C0h, 46000000h, 214E2h, 0
.text:0040DB78                 dd 0C0h, 46000000h, 214E3h, 0
.text:0040DB88                 dd 0C0h, 46000000h, 214E4h, 0
.text:0040DB98                 dd 0C0h, 46000000h, 21500h, 0
.text:0040DBA8                 dd 0C0h, 46000000h, 214E5h, 0
.text:0040DBB8                 dd 0C0h, 46000000h, 214E6h, 0
.text:0040DBC8                 dd 0C0h, 46000000h, 214E8h, 0
.text:0040DBD8                 dd 0C0h, 46000000h, 214E9h, 0
.text:0040DBE8                 dd 0C0h, 46000000h, 214EAh, 0
.text:0040DBF8                 dd 0C0h, 46000000h, 214EBh, 0
.text:0040DC08                 dd 0C0h, 46000000h
.text:0040DC10 ; const IID riid
.text:0040DC10 riid            dd 214EEh               ; Data1
.text:0040DC10                                         ; DATA XREF: sub_40B8F0+2B↑o
.text:0040DC10                 dw 0                    ; Data2
.text:0040DC10                 dw 0                    ; Data3
.text:0040DC10                 db 0C0h, 6 dup(0), 46h  ; Data4
.text:0040DC20                 dd 214EFh, 0
.text:0040DC28                 dd 0C0h, 46000000h, 214F0h, 0
.text:0040DC38                 dd 0C0h, 46000000h, 214F1h, 0
.text:0040DC48                 dd 0C0h, 46000000h, 214F2h, 0
.text:0040DC58                 dd 0C0h, 46000000h, 214F3h, 0
.text:0040DC68                 dd 0C0h, 46000000h, 214F4h, 0
.text:0040DC78                 dd 0C0h, 46000000h, 214F5h, 0
.text:0040DC88                 dd 0C0h, 46000000h, 214F6h, 0
.text:0040DC98                 dd 0C0h, 46000000h, 214F7h, 0
.text:0040DCA8                 dd 0C0h, 46000000h, 214F8h, 0
.text:0040DCB8                 dd 0C0h, 46000000h, 214F9h, 0
.text:0040DCC8                 dd 0C0h, 46000000h, 214FAh, 0
.text:0040DCD8                 dd 0C0h, 46000000h, 214FBh, 0
.text:0040DCE8                 dd 0C0h, 46000000h, 214FCh, 0
.text:0040DCF8                 dd 0C0h, 46000000h, 88E39E80h, 11CF3578h, 869AEh, 62122E2Bh
.text:0040DCF8                 dd 93F2F68Ch, 11D31D1Bh, 0C0000EA3h, 0D1AB794Fh, 1AC3D9F0h
.text:0040DCF8                 dd 11D1175Ch, 6000BE95h, 4FEA9797h, 0CEF04FDFh, 11D2FE72h
.text:0040DCF8                 dd 0C000A587h, 0CF37684Fh, 1E18D10h, 11D24D8Bh, 60005D85h
.text:0040DCF8                 dd 67930508h, 0EAB22AC0h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040DCF8                 dd 0EAB22AC1h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC2h
.text:0040DCF8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC3h, 11CF30C1h
.text:0040DCF8                 dd 0EBA7h, 0BAE5BC0h, 0EAB22AC4h, 11CF30C1h, 0EBA7h, 0BAE5BC0h
.text:0040DCF8                 dd 0EAB22AC5h, 11CF30C1h, 0EBA7h, 0BAE5BC0h, 0EAB22AC6h
.text:0040DCF8                 dd 11CF30C1h, 0EBA7h, 0BAE5BC0h, 2DF07h, 0
.text:0040DDC8                 dd 0C0h, 46000000h, 2DF05h, 0
.text:0040DDD8                 dd 0C0h, 46000000h, 2DF06h, 0
.text:0040DDE8                 dd 0C0h, 46000000h, 2DF01h, 0
.text:0040DDF8                 dd 0C0h, 46000000h, 2DF09h, 0
.text:0040DE08                 dd 0C0h, 46000000h, 0B091E540h, 11CF83E3h, 200013A7h, 6297D7AFh
.text:0040DE08                 dd 0FBF23B40h, 101BE3F0h, 0AA008884h, 0F8563E00h, 0FBF23B80h
.text:0040DE08                 dd 101BE3F0h, 0AA008884h, 0F8563E00h, 4657278Ah, 11D2411Bh
.text:0040DE08                 dd 0C0009A83h, 0D018D94Fh, 4657278Bh, 11D2411Bh, 0C0009A83h
.text:0040DE08                 dd 0D018D94Fh, 0DE5BF786h, 11D2477Ah, 0C0009D83h, 0D018D94Fh
.text:0040DE08                 dd 0E8025004h, 11D21C42h, 0A0002CBEh, 0A13DA8C9h, 0C6C4200h
.text:0040DE08                 dd 11D0C589h, 0C0009A99h, 0E155D64Fh
.text:0040DE90 dword_40DE90    dd 0FFFFFFFFh           ; DATA XREF: .text:0040D0B9↑r
.text:0040DE90                                         ; .text:loc_40D0E0↑r ...
.text:0040DE94 dword_40DE94    dd 0                    ; DATA XREF: .text:loc_40D0EC↑r
.text:0040DE94                                         ; sub_40D110:loc_40D15D↑r
.text:0040DE98                 dd 0FFFFFFFFh
.text:0040DE9C dword_40DE9C    dd 59h dup(0)           ; DATA XREF: .data:off_40E0F4↓o
.text:0040DE9C _text           ends
.text:0040DE9C
.data:0040E000 ; Section 2. (virtual address 0000E000)
.data:0040E000 ; Virtual size                  : 00000110 (    272.)
.data:0040E000 ; Section size in file          : 00000200 (    512.)
.data:0040E000 ; Offset to raw data for section: 0000D400
.data:0040E000 ; Flags C0000040: Data Readable Writable
.data:0040E000 ; Alignment     : default
.data:0040E000 ; ===========================================================================
.data:0040E000
.data:0040E000 ; Segment type: Pure data
.data:0040E000 ; Segment permissions: Read/Write
.data:0040E000 _data           segment para public 'DATA' use32
.data:0040E000                 assume cs:_data
.data:0040E000                 ;org 40E000h
.data:0040E000 dword_40E000    dd 0                    ; DATA XREF: sub_401080+1B↑o
.data:0040E000                                         ; sub_401080+CC↑r
.data:0040E004 dword_40E004    dd 0                    ; DATA XREF: sub_401080+41↑o
.data:0040E004                                         ; sub_401080+D4↑r
.data:0040E008                 align 10h
.data:0040E010 a0              db '                 0',9,0
.data:0040E010                                         ; DATA XREF: sub_402440+1D1↑o
.data:0040E010                                         ; sub_402440:loc_402710↑w ...
.data:0040E024 dword_40E024    dd 40E01Ch              ; DATA XREF: sub_402440:loc_40262B↑r
.data:0040E024                                         ; sub_402440+1F6↑w ...
.data:0040E028 off_40E028      dd offset a0+11h        ; DATA XREF: sub_402440+1C5↑r
.data:0040E028                                         ; sub_402440+1DD↑w ...
.data:0040E028                                         ; "0\t"
.data:0040E02C off_40E02C      dd offset a0+11h        ; DATA XREF: sub_402440+1A8↑r
.data:0040E02C                                         ; sub_402440+36D↑r
.data:0040E02C                                         ; "0\t"
.data:0040E030 off_40E030      dd offset sub_4041C0    ; DATA XREF: sub_4018A0+3A5↑w
.data:0040E030                                         ; sub_402830+3↑r
.data:0040E034                 align 10h
.data:0040E040 dword_40E040    dd 1                    ; DATA XREF: sub_4018A0:loc_401CDC↑r
.data:0040E040                                         ; sub_4018A0+8FB↑r ...
.data:0040E044 dword_40E044    dd 1                    ; DATA XREF: sub_403640+11↑r
.data:0040E044                                         ; .text:004036E1↑r
.data:0040E048 dword_40E048    dd 3Fh                  ; DATA XREF: sub_403640+7D↑w
.data:0040E048                                         ; .text:0040374D↑w
.data:0040E04C                 align 10h
.data:0040E050 ; char *Buffer
.data:0040E050 Buffer          dd offset aCopyrightC2005
.data:0040E050                                         ; DATA XREF: sub_403E40+DC↑r
.data:0040E050                                         ; "Copyright (C) 2005 Free Software Founda"...
.data:0040E054                 align 10h
.data:0040E060 ; int Code
.data:0040E060 Code            dd 1                    ; DATA XREF: sub_4041C0+6D↑r
.data:0040E060                                         ; sub_4041C0+9A↑r ...
.data:0040E064                 align 10h
.data:0040E070 dword_40E070    dd 1                    ; DATA XREF: sub_4055A0+22↑r
.data:0040E070                                         ; sub_4055A0+65↑r ...
.data:0040E074 dword_40E074    dd 100h                 ; DATA XREF: sub_4055A0+3F↑o
.data:0040E074                                         ; sub_4055A0+1A2↑r ...
.data:0040E078 off_40E078      dd offset unk_40F070    ; DATA XREF: sub_4055A0+1AA↑r
.data:0040E07C ; void *off_40E07C
.data:0040E07C off_40E07C      dd offset dword_40E074  ; DATA XREF: sub_4055A0+39↑r
.data:0040E07C                                         ; sub_4055A0+60↑w ...
.data:0040E080 dword_40E080    dd 200h                 ; DATA XREF: sub_405D40+6CD↑r
.data:0040E080                                         ; sub_405D40+6D8↑r ...
.data:0040E084 ; char *off_40E084
.data:0040E084 off_40E084      dd offset aComExeBatCmd ; DATA XREF: sub_4065F0+3D3↑r
.data:0040E084                                         ; sub_4065F0+400↑r ...
.data:0040E084                                         ; ".com;.exe;.bat;.cmd"
.data:0040E088                 align 10h
.data:0040E090 byte_40E090     db 41h                  ; DATA XREF: sub_4082C0+6B↑w
.data:0040E090                                         ; sub_4082C0:loc_4083D4↑r
.data:0040E091                 align 10h
.data:0040E0A0 dword_40E0A0    dd 1                    ; DATA XREF: .text:loc_4096D7↑r
.data:0040E0A0                                         ; sub_409CB0+202↑w
.data:0040E0A4                 align 10h
.data:0040E0B0 off_40E0B0      dd offset aNotset       ; DATA XREF: .text:00409F2A↑r
.data:0040E0B0                                         ; .text:0040AB72↑r
.data:0040E0B0                                         ; "notset"
.data:0040E0B4 off_40E0B4      dd offset aNotset       ; DATA XREF: .text:00409F42↑r
.data:0040E0B4                                         ; .text:00409F64↑r ...
.data:0040E0B4                                         ; "notset"
.data:0040E0B8                 align 10h
.data:0040E0C0 dword_40E0C0    dd 0FFFFFFFFh           ; DATA XREF: sub_401080+22↑r
.data:0040E0C4                 align 10h
.data:0040E0D0 ; int Mode
.data:0040E0D0 Mode            dd 0                    ; DATA XREF: sub_401080+4E↑r
.data:0040E0D0                                         ; sub_401080+80↑r ...
.data:0040E0D4                 align 10h
.data:0040E0E0 dword_40E0E0    dd 4000h                ; DATA XREF: sub_401080+57↑w
.data:0040E0E0                                         ; sub_401080+BA↑r
.data:0040E0E4                 align 10h
.data:0040E0F0 dword_40E0F0    dd 0                    ; DATA XREF: sub_40D110+9↑r
.data:0040E0F0                                         ; sub_40D110+1D↑w
.data:0040E0F4 off_40E0F4      dd offset dword_40DE9C  ; DATA XREF: sub_40D080+6↑r
.data:0040E0F4                                         ; sub_40D080+17↑r ...
.data:0040E0F8                 align 1000h
.data:0040E0F8 _data           ends
.data:0040E0F8
.bss:0040F000 ; Section 3. (virtual address 0000F000)
.bss:0040F000 ; Virtual size                  : 000005C0 (   1472.)
.bss:0040F000 ; Section size in file          : 00000000 (      0.)
.bss:0040F000 ; Offset to raw data for section: 00000000
.bss:0040F000 ; Flags C0000080: Bss Readable Writable
.bss:0040F000 ; Alignment     : default
.bss:0040F000 ; ===========================================================================
.bss:0040F000
.bss:0040F000 ; Segment type: Uninitialized
.bss:0040F000 ; Segment permissions: Read/Write
.bss:0040F000 _bss            segment para public 'BSS' use32
.bss:0040F000                 assume cs:_bss
.bss:0040F000                 ;org 40F000h
.bss:0040F000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0040F000 dword_40F000    dd ?                    ; DATA XREF: sub_402440+4C↑r
.bss:0040F000                                         ; sub_402440+2F0↑w ...
.bss:0040F004                 align 10h
.bss:0040F010 ; char *FileName
.bss:0040F010 FileName        dd ?                    ; DATA XREF: sub_4018A0+446↑w
.bss:0040F010                                         ; sub_4018A0+465↑w ...
.bss:0040F014                 align 10h
.bss:0040F020 ; char *FileHandle
.bss:0040F020 FileHandle      dd ?                    ; DATA XREF: sub_4018A0+48B↑w
.bss:0040F020                                         ; sub_4018A0:loc_401D38↑r ...
.bss:0040F024                 align 10h
.bss:0040F030 dword_40F030    dd ?                    ; DATA XREF: sub_403640+9↑o
.bss:0040F030                                         ; sub_403640+17↑w ...
.bss:0040F034 dword_40F034    dd ?                    ; DATA XREF: sub_403640+21↑w
.bss:0040F034                                         ; .text:004036F9↑w
.bss:0040F038 dword_40F038    dd ?                    ; DATA XREF: sub_403640+77↑r
.bss:0040F038                                         ; .text:00403747↑r
.bss:0040F03C dword_40F03C    dd ?                    ; DATA XREF: sub_403640+6B↑r
.bss:0040F03C                                         ; .text:0040373B↑r
.bss:0040F040                 db    ? ;
.bss:0040F041                 db    ? ;
.bss:0040F042                 db    ? ;
.bss:0040F043                 db    ? ;
.bss:0040F044                 db    ? ;
.bss:0040F045                 db    ? ;
.bss:0040F046                 db    ? ;
.bss:0040F047                 db    ? ;
.bss:0040F048                 db    ? ;
.bss:0040F049                 db    ? ;
.bss:0040F04A                 db    ? ;
.bss:0040F04B                 db    ? ;
.bss:0040F04C                 db    ? ;
.bss:0040F04D                 db    ? ;
.bss:0040F04E                 db    ? ;
.bss:0040F04F                 db    ? ;
.bss:0040F050                 db    ? ;
.bss:0040F051                 db    ? ;
.bss:0040F052                 db    ? ;
.bss:0040F053                 db    ? ;
.bss:0040F054                 db    ? ;
.bss:0040F055                 db    ? ;
.bss:0040F056                 db    ? ;
.bss:0040F057                 db    ? ;
.bss:0040F058                 db    ? ;
.bss:0040F059                 db    ? ;
.bss:0040F05A                 db    ? ;
.bss:0040F05B                 db    ? ;
.bss:0040F05C                 db    ? ;
.bss:0040F05D                 db    ? ;
.bss:0040F05E                 db    ? ;
.bss:0040F05F                 db    ? ;
.bss:0040F060 ; char *dword_40F060
.bss:0040F060 dword_40F060    dd ?                    ; DATA XREF: .text:00404194↑w
.bss:0040F060                                         ; sub_4041C0+58↑r
.bss:0040F064                 align 10h
.bss:0040F070 unk_40F070      db    ? ;               ; DATA XREF: sub_4055A0+100↑o
.bss:0040F070                                         ; .data:off_40E078↑o
.bss:0040F071                 db    ? ;
.bss:0040F072                 db    ? ;
.bss:0040F073                 db    ? ;
.bss:0040F074                 db    ? ;
.bss:0040F075                 db    ? ;
.bss:0040F076                 db    ? ;
.bss:0040F077                 db    ? ;
.bss:0040F078                 db    ? ;
.bss:0040F079                 db    ? ;
.bss:0040F07A                 db    ? ;
.bss:0040F07B                 db    ? ;
.bss:0040F07C                 db    ? ;
.bss:0040F07D                 db    ? ;
.bss:0040F07E                 db    ? ;
.bss:0040F07F                 db    ? ;
.bss:0040F080                 db    ? ;
.bss:0040F081                 db    ? ;
.bss:0040F082                 db    ? ;
.bss:0040F083                 db    ? ;
.bss:0040F084                 db    ? ;
.bss:0040F085                 db    ? ;
.bss:0040F086                 db    ? ;
.bss:0040F087                 db    ? ;
.bss:0040F088                 db    ? ;
.bss:0040F089                 db    ? ;
.bss:0040F08A                 db    ? ;
.bss:0040F08B                 db    ? ;
.bss:0040F08C                 db    ? ;
.bss:0040F08D                 db    ? ;
.bss:0040F08E                 db    ? ;
.bss:0040F08F                 db    ? ;
.bss:0040F090                 db    ? ;
.bss:0040F091                 db    ? ;
.bss:0040F092                 db    ? ;
.bss:0040F093                 db    ? ;
.bss:0040F094                 db    ? ;
.bss:0040F095                 db    ? ;
.bss:0040F096                 db    ? ;
.bss:0040F097                 db    ? ;
.bss:0040F098                 db    ? ;
.bss:0040F099                 db    ? ;
.bss:0040F09A                 db    ? ;
.bss:0040F09B                 db    ? ;
.bss:0040F09C                 db    ? ;
.bss:0040F09D                 db    ? ;
.bss:0040F09E                 db    ? ;
.bss:0040F09F                 db    ? ;
.bss:0040F0A0                 db    ? ;
.bss:0040F0A1                 db    ? ;
.bss:0040F0A2                 db    ? ;
.bss:0040F0A3                 db    ? ;
.bss:0040F0A4                 db    ? ;
.bss:0040F0A5                 db    ? ;
.bss:0040F0A6                 db    ? ;
.bss:0040F0A7                 db    ? ;
.bss:0040F0A8                 db    ? ;
.bss:0040F0A9                 db    ? ;
.bss:0040F0AA                 db    ? ;
.bss:0040F0AB                 db    ? ;
.bss:0040F0AC                 db    ? ;
.bss:0040F0AD                 db    ? ;
.bss:0040F0AE                 db    ? ;
.bss:0040F0AF                 db    ? ;
.bss:0040F0B0                 db    ? ;
.bss:0040F0B1                 db    ? ;
.bss:0040F0B2                 db    ? ;
.bss:0040F0B3                 db    ? ;
.bss:0040F0B4                 db    ? ;
.bss:0040F0B5                 db    ? ;
.bss:0040F0B6                 db    ? ;
.bss:0040F0B7                 db    ? ;
.bss:0040F0B8                 db    ? ;
.bss:0040F0B9                 db    ? ;
.bss:0040F0BA                 db    ? ;
.bss:0040F0BB                 db    ? ;
.bss:0040F0BC                 db    ? ;
.bss:0040F0BD                 db    ? ;
.bss:0040F0BE                 db    ? ;
.bss:0040F0BF                 db    ? ;
.bss:0040F0C0                 db    ? ;
.bss:0040F0C1                 db    ? ;
.bss:0040F0C2                 db    ? ;
.bss:0040F0C3                 db    ? ;
.bss:0040F0C4                 db    ? ;
.bss:0040F0C5                 db    ? ;
.bss:0040F0C6                 db    ? ;
.bss:0040F0C7                 db    ? ;
.bss:0040F0C8                 db    ? ;
.bss:0040F0C9                 db    ? ;
.bss:0040F0CA                 db    ? ;
.bss:0040F0CB                 db    ? ;
.bss:0040F0CC                 db    ? ;
.bss:0040F0CD                 db    ? ;
.bss:0040F0CE                 db    ? ;
.bss:0040F0CF                 db    ? ;
.bss:0040F0D0                 db    ? ;
.bss:0040F0D1                 db    ? ;
.bss:0040F0D2                 db    ? ;
.bss:0040F0D3                 db    ? ;
.bss:0040F0D4                 db    ? ;
.bss:0040F0D5                 db    ? ;
.bss:0040F0D6                 db    ? ;
.bss:0040F0D7                 db    ? ;
.bss:0040F0D8                 db    ? ;
.bss:0040F0D9                 db    ? ;
.bss:0040F0DA                 db    ? ;
.bss:0040F0DB                 db    ? ;
.bss:0040F0DC                 db    ? ;
.bss:0040F0DD                 db    ? ;
.bss:0040F0DE                 db    ? ;
.bss:0040F0DF                 db    ? ;
.bss:0040F0E0                 db    ? ;
.bss:0040F0E1                 db    ? ;
.bss:0040F0E2                 db    ? ;
.bss:0040F0E3                 db    ? ;
.bss:0040F0E4                 db    ? ;
.bss:0040F0E5                 db    ? ;
.bss:0040F0E6                 db    ? ;
.bss:0040F0E7                 db    ? ;
.bss:0040F0E8                 db    ? ;
.bss:0040F0E9                 db    ? ;
.bss:0040F0EA                 db    ? ;
.bss:0040F0EB                 db    ? ;
.bss:0040F0EC                 db    ? ;
.bss:0040F0ED                 db    ? ;
.bss:0040F0EE                 db    ? ;
.bss:0040F0EF                 db    ? ;
.bss:0040F0F0                 db    ? ;
.bss:0040F0F1                 db    ? ;
.bss:0040F0F2                 db    ? ;
.bss:0040F0F3                 db    ? ;
.bss:0040F0F4                 db    ? ;
.bss:0040F0F5                 db    ? ;
.bss:0040F0F6                 db    ? ;
.bss:0040F0F7                 db    ? ;
.bss:0040F0F8                 db    ? ;
.bss:0040F0F9                 db    ? ;
.bss:0040F0FA                 db    ? ;
.bss:0040F0FB                 db    ? ;
.bss:0040F0FC                 db    ? ;
.bss:0040F0FD                 db    ? ;
.bss:0040F0FE                 db    ? ;
.bss:0040F0FF                 db    ? ;
.bss:0040F100                 db    ? ;
.bss:0040F101                 db    ? ;
.bss:0040F102                 db    ? ;
.bss:0040F103                 db    ? ;
.bss:0040F104                 db    ? ;
.bss:0040F105                 db    ? ;
.bss:0040F106                 db    ? ;
.bss:0040F107                 db    ? ;
.bss:0040F108                 db    ? ;
.bss:0040F109                 db    ? ;
.bss:0040F10A                 db    ? ;
.bss:0040F10B                 db    ? ;
.bss:0040F10C                 db    ? ;
.bss:0040F10D                 db    ? ;
.bss:0040F10E                 db    ? ;
.bss:0040F10F                 db    ? ;
.bss:0040F110                 db    ? ;
.bss:0040F111                 db    ? ;
.bss:0040F112                 db    ? ;
.bss:0040F113                 db    ? ;
.bss:0040F114                 db    ? ;
.bss:0040F115                 db    ? ;
.bss:0040F116                 db    ? ;
.bss:0040F117                 db    ? ;
.bss:0040F118                 db    ? ;
.bss:0040F119                 db    ? ;
.bss:0040F11A                 db    ? ;
.bss:0040F11B                 db    ? ;
.bss:0040F11C                 db    ? ;
.bss:0040F11D                 db    ? ;
.bss:0040F11E                 db    ? ;
.bss:0040F11F                 db    ? ;
.bss:0040F120                 db    ? ;
.bss:0040F121                 db    ? ;
.bss:0040F122                 db    ? ;
.bss:0040F123                 db    ? ;
.bss:0040F124                 db    ? ;
.bss:0040F125                 db    ? ;
.bss:0040F126                 db    ? ;
.bss:0040F127                 db    ? ;
.bss:0040F128                 db    ? ;
.bss:0040F129                 db    ? ;
.bss:0040F12A                 db    ? ;
.bss:0040F12B                 db    ? ;
.bss:0040F12C                 db    ? ;
.bss:0040F12D                 db    ? ;
.bss:0040F12E                 db    ? ;
.bss:0040F12F                 db    ? ;
.bss:0040F130                 db    ? ;
.bss:0040F131                 db    ? ;
.bss:0040F132                 db    ? ;
.bss:0040F133                 db    ? ;
.bss:0040F134                 db    ? ;
.bss:0040F135                 db    ? ;
.bss:0040F136                 db    ? ;
.bss:0040F137                 db    ? ;
.bss:0040F138                 db    ? ;
.bss:0040F139                 db    ? ;
.bss:0040F13A                 db    ? ;
.bss:0040F13B                 db    ? ;
.bss:0040F13C                 db    ? ;
.bss:0040F13D                 db    ? ;
.bss:0040F13E                 db    ? ;
.bss:0040F13F                 db    ? ;
.bss:0040F140                 db    ? ;
.bss:0040F141                 db    ? ;
.bss:0040F142                 db    ? ;
.bss:0040F143                 db    ? ;
.bss:0040F144                 db    ? ;
.bss:0040F145                 db    ? ;
.bss:0040F146                 db    ? ;
.bss:0040F147                 db    ? ;
.bss:0040F148                 db    ? ;
.bss:0040F149                 db    ? ;
.bss:0040F14A                 db    ? ;
.bss:0040F14B                 db    ? ;
.bss:0040F14C                 db    ? ;
.bss:0040F14D                 db    ? ;
.bss:0040F14E                 db    ? ;
.bss:0040F14F                 db    ? ;
.bss:0040F150                 db    ? ;
.bss:0040F151                 db    ? ;
.bss:0040F152                 db    ? ;
.bss:0040F153                 db    ? ;
.bss:0040F154                 db    ? ;
.bss:0040F155                 db    ? ;
.bss:0040F156                 db    ? ;
.bss:0040F157                 db    ? ;
.bss:0040F158                 db    ? ;
.bss:0040F159                 db    ? ;
.bss:0040F15A                 db    ? ;
.bss:0040F15B                 db    ? ;
.bss:0040F15C                 db    ? ;
.bss:0040F15D                 db    ? ;
.bss:0040F15E                 db    ? ;
.bss:0040F15F                 db    ? ;
.bss:0040F160                 db    ? ;
.bss:0040F161                 db    ? ;
.bss:0040F162                 db    ? ;
.bss:0040F163                 db    ? ;
.bss:0040F164                 db    ? ;
.bss:0040F165                 db    ? ;
.bss:0040F166                 db    ? ;
.bss:0040F167                 db    ? ;
.bss:0040F168                 db    ? ;
.bss:0040F169                 db    ? ;
.bss:0040F16A                 db    ? ;
.bss:0040F16B                 db    ? ;
.bss:0040F16C                 db    ? ;
.bss:0040F16D                 db    ? ;
.bss:0040F16E                 db    ? ;
.bss:0040F16F                 db    ? ;
.bss:0040F170 dword_40F170    dd ?                    ; DATA XREF: .text:loc_404F31↑o
.bss:0040F170                                         ; .text:loc_404F50↑o ...
.bss:0040F174 dword_40F174    dd ?                    ; DATA XREF: .text:loc_404FD0↑o
.bss:0040F174                                         ; .text:00405458↑r ...
.bss:0040F178 dword_40F178    dd ?                    ; DATA XREF: .text:00405452↑r
.bss:0040F178                                         ; sub_405500+2C↑r
.bss:0040F17C dword_40F17C    dd ?                    ; DATA XREF: .text:00405446↑r
.bss:0040F17C                                         ; sub_405500+22↑r
.bss:0040F180 dword_40F180    dd ?                    ; DATA XREF: .text:00405462↑r
.bss:0040F180                                         ; sub_405500+36↑r
.bss:0040F184 dword_40F184    dd ?                    ; DATA XREF: .text:00405472↑r
.bss:0040F184                                         ; sub_405500+4E↑r
.bss:0040F188 dword_40F188    dd ?                    ; DATA XREF: .text:0040548F↑r
.bss:0040F188                                         ; sub_405500+62↑r
.bss:0040F18C dword_40F18C    dd ?                    ; DATA XREF: .text:00405485↑r
.bss:0040F18C                                         ; sub_405500+70↑r
.bss:0040F190 dword_40F190    dd ?                    ; DATA XREF: .text:00405468↑r
.bss:0040F190                                         ; sub_405500+7A↑r
.bss:0040F194                 align 10h
.bss:0040F1A0 ; char *Str1
.bss:0040F1A0 Str1            dd ?                    ; DATA XREF: sub_405934:loc_40596D↑w
.bss:0040F1A0                                         ; sub_405934:loc_405AA0↑r
.bss:0040F1A4                 align 10h
.bss:0040F1B0 dword_40F1B0    dd ?                    ; DATA XREF: sub_405934+2D↑r
.bss:0040F1B0                                         ; sub_405934+3F↑w
.bss:0040F1B4                 align 10h
.bss:0040F1C0 dword_40F1C0    dd ?                    ; DATA XREF: sub_4065F0+100↑r
.bss:0040F1C0                                         ; sub_4065F0+308↑w
.bss:0040F1C4                 align 10h
.bss:0040F1D0 ; char *Str
.bss:0040F1D0 Str             dd ?                    ; DATA XREF: sub_4065F0:loc_406954↑r
.bss:0040F1D0                                         ; sub_4065F0+3B6↑r ...
.bss:0040F1D4                 align 10h
.bss:0040F1E0 dword_40F1E0    dd ?                    ; DATA XREF: sub_4082C0+1C↑r
.bss:0040F1E0                                         ; sub_4082C0+104↑w
.bss:0040F1E4                 align 10h
.bss:0040F1F0 dword_40F1F0    dd ?                    ; DATA XREF: sub_4082C0+B↑r
.bss:0040F1F0                                         ; sub_4082C0+71↑w
.bss:0040F1F4                 align 10h
.bss:0040F200 dword_40F200    dd ?                    ; DATA XREF: sub_4082C0+85↑r
.bss:0040F200                                         ; sub_4082C0+B9↑w
.bss:0040F204 dword_40F204    dd ?                    ; DATA XREF: sub_4082C0+C4↑w
.bss:0040F208 dword_40F208    dd ?                    ; DATA XREF: sub_4082C0+2E↑o
.bss:0040F208                                         ; sub_4082C0+CF↑w
.bss:0040F20C dword_40F20C    dd ?                    ; DATA XREF: sub_4082C0+DA↑w
.bss:0040F210                 align 200h
.bss:0040F400 dword_40F400    dd ?                    ; DATA XREF: sub_408E60+7↑r
.bss:0040F400                                         ; sub_408E60+2B↑w ...
.bss:0040F404                 align 10h
.bss:0040F410 ; struct _SYSTEM_INFO SystemInfo
.bss:0040F410 SystemInfo      _SYSTEM_INFO <?>        ; DATA XREF: sub_408E60+21↑o
.bss:0040F410                                         ; sub_408E60+33↑o
.bss:0040F434                 align 10h
.bss:0040F440 dword_40F440    dd ?                    ; DATA XREF: sub_409BA0+8↑r
.bss:0040F440                                         ; sub_409CB0:loc_409D32↑w ...
.bss:0040F444                 align 10h
.bss:0040F450 ; struct _OSVERSIONINFOA VersionInformation
.bss:0040F450 VersionInformation _OSVERSIONINFOA <?>  ; DATA XREF: sub_409CB0:loc_409CD0↑o
.bss:0040F450                                         ; sub_409CB0+2C↑w ...
.bss:0040F4E4 word_40F4E4     dw ?                    ; DATA XREF: sub_409CB0:loc_409D63↑r
.bss:0040F4E6                 align 4
.bss:0040F4E8 word_40F4E8     dw ?                    ; DATA XREF: .text:loc_409726↑r
.bss:0040F4E8                                         ; .text:00409754↑r ...
.bss:0040F4EA byte_40F4EA     db ?                    ; DATA XREF: .text:004096E5↑r
.bss:0040F4EB                 align 10h
.bss:0040F4F0 dword_40F4F0    dd ?                    ; DATA XREF: sub_409CB0+6↑r
.bss:0040F4F0                                         ; sub_409CB0+75↑w
.bss:0040F4F4                 align 10h
.bss:0040F500 dword_40F500    dd ?                    ; DATA XREF: sub_40B170+6E↑r
.bss:0040F500                                         ; sub_40B170+9A↑r ...
.bss:0040F504 dword_40F504    dd ?                    ; DATA XREF: sub_40B170:loc_40B1D8↑r
.bss:0040F504                                         ; sub_40B170+A0↑r ...
.bss:0040F508                 align 10h
.bss:0040F510 dword_40F510    dd ?                    ; DATA XREF: sub_40B680↑r
.bss:0040F510                                         ; .text:loc_40B8C2↑w
.bss:0040F514                 align 10h
.bss:0040F520 dword_40F520    dd ?                    ; DATA XREF: sub_4018A0+48↑w
.bss:0040F520                                         ; sub_4018A0+155↑r ...
.bss:0040F524                 align 20h
.bss:0040F540 dword_40F540    dd ?                    ; DATA XREF: sub_403640+71↑w
.bss:0040F540                                         ; .text:00403741↑w
.bss:0040F544                 align 10h
.bss:0040F550 dword_40F550    dd ?                    ; CODE XREF: sub_405934+63↑p
.bss:0040F550                                         ; DATA XREF: sub_405830+1E↑r ...
.bss:0040F554                 align 10h
.bss:0040F560 dword_40F560    dd ?                    ; DATA XREF: sub_405830+4E↑w
.bss:0040F560                                         ; sub_405934+AB↑w
.bss:0040F564                 db    ? ;
.bss:0040F565                 db    ? ;
.bss:0040F566                 db    ? ;
.bss:0040F567                 db    ? ;
.bss:0040F568                 db    ? ;
.bss:0040F569                 db    ? ;
.bss:0040F56A                 db    ? ;
.bss:0040F56B                 db    ? ;
.bss:0040F56C                 db    ? ;
.bss:0040F56D                 db    ? ;
.bss:0040F56E                 db    ? ;
.bss:0040F56F                 db    ? ;
.bss:0040F570                 db    ? ;
.bss:0040F571                 db    ? ;
.bss:0040F572                 db    ? ;
.bss:0040F573                 db    ? ;
.bss:0040F574                 db    ? ;
.bss:0040F575                 db    ? ;
.bss:0040F576                 db    ? ;
.bss:0040F577                 db    ? ;
.bss:0040F578                 db    ? ;
.bss:0040F579                 db    ? ;
.bss:0040F57A                 db    ? ;
.bss:0040F57B                 db    ? ;
.bss:0040F57C                 db    ? ;
.bss:0040F57D                 db    ? ;
.bss:0040F57E                 db    ? ;
.bss:0040F57F                 db    ? ;
.bss:0040F580                 db    ? ;
.bss:0040F581                 db    ? ;
.bss:0040F582                 db    ? ;
.bss:0040F583                 db    ? ;
.bss:0040F584                 db    ? ;
.bss:0040F585                 db    ? ;
.bss:0040F586                 db    ? ;
.bss:0040F587                 db    ? ;
.bss:0040F588                 db    ? ;
.bss:0040F589                 db    ? ;
.bss:0040F58A                 db    ? ;
.bss:0040F58B                 db    ? ;
.bss:0040F58C                 db    ? ;
.bss:0040F58D                 db    ? ;
.bss:0040F58E                 db    ? ;
.bss:0040F58F                 db    ? ;
.bss:0040F590 dword_40F590    dd ?                    ; DATA XREF: sub_405934+13↑r
.bss:0040F594                 align 1000h
.bss:0040F594 _bss            ends
.bss:0040F594
.idata:00410000 ; Section 4. (virtual address 00010000)
.idata:00410000 ; Virtual size                  : 00000DEC (   3564.)
.idata:00410000 ; Section size in file          : 00000E00 (   3584.)
.idata:00410000 ; Offset to raw data for section: 0000D600
.idata:00410000 ; Flags C0000040: Data Readable Writable
.idata:00410000 ; Alignment     : default
.idata:00410000 ; ===========================================================================
.idata:00410000
.idata:00410000 ; Segment type: Externs
.idata:00410000 ; _idata
.idata:00410000
.idata:00410001
.idata:004102B4 ;
.idata:004102B4 ; Imports from libintl3.dll
.idata:004102B4 ;
.idata:004102B4                 extrn libintl_bindtextdomain:dword
.idata:004102B4                                         ; CODE XREF: sub_4018A0+A9↑p
.idata:004102B4                                         ; DATA XREF: sub_4018A0+A9↑r ...
.idata:004102B8                 extrn libintl_gettext:dword
.idata:004102B8                                         ; CODE XREF: sub_4018A0+149↑p
.idata:004102B8                                         ; sub_4018A0+1AB↑p ...
.idata:004102BC                 extrn libintl_textdomain:dword
.idata:004102BC                                         ; CODE XREF: sub_4018A0+B6↑p
.idata:004102BC                                         ; DATA XREF: sub_4018A0+B6↑r ...
.idata:004102C0
.idata:004102C8 ;
.idata:004102C8 ; Imports from ADVAPI32.DLL
.idata:004102C8 ;
.idata:004102C8 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:004102C8                 extrn __imp_RegCloseKey:dword
.idata:004102C8                                         ; DATA XREF: RegCloseKey↑r
.idata:004102CC ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:004102CC                 extrn __imp_RegOpenKeyExA:dword
.idata:004102CC                                         ; DATA XREF: RegOpenKeyExA↑r
.idata:004102D0 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:004102D0                 extrn __imp_RegQueryValueExA:dword
.idata:004102D0                                         ; DATA XREF: RegQueryValueExA↑r
.idata:004102D4
.idata:004102DC ;
.idata:004102DC ; Imports from KERNEL32.dll
.idata:004102DC ;
.idata:004102DC ; BOOL (__stdcall *AreFileApisANSI)()
.idata:004102DC                 extrn __imp_AreFileApisANSI:dword
.idata:004102DC                                         ; DATA XREF: AreFileApisANSI↑r
.idata:004102E0 ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:004102E0                 extrn __imp_CloseHandle:dword
.idata:004102E0                                         ; DATA XREF: CloseHandle↑r
.idata:004102E4 ; BOOL (__stdcall *CreateDirectoryA)(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:004102E4                 extrn __imp_CreateDirectoryA:dword
.idata:004102E4                                         ; DATA XREF: CreateDirectoryA↑r
.idata:004102E8 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:004102E8                 extrn __imp_CreateFileA:dword
.idata:004102E8                                         ; DATA XREF: CreateFileA↑r
.idata:004102EC ; BOOL (__stdcall *DeviceIoControl)(HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped)
.idata:004102EC                 extrn __imp_DeviceIoControl:dword
.idata:004102EC                                         ; DATA XREF: DeviceIoControl↑r
.idata:004102F0 ; void (__stdcall __noreturn *ExitProcess)(UINT uExitCode)
.idata:004102F0                 extrn __imp_ExitProcess:dword
.idata:004102F0                                         ; DATA XREF: ExitProcess↑r
.idata:004102F4 ; BOOL (__stdcall *FindClose)(HANDLE hFindFile)
.idata:004102F4                 extrn __imp_FindClose:dword
.idata:004102F4                                         ; DATA XREF: FindClose↑r
.idata:004102F8 ; HANDLE (__stdcall *FindFirstFileA)(LPCSTR lpFileName, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102F8                 extrn __imp_FindFirstFileA:dword
.idata:004102F8                                         ; DATA XREF: FindFirstFileA↑r
.idata:004102FC ; BOOL (__stdcall *FindNextFileA)(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
.idata:004102FC                 extrn __imp_FindNextFileA:dword
.idata:004102FC                                         ; DATA XREF: FindNextFileA↑r
.idata:00410300 ; BOOL (__stdcall *FreeLibrary)(HMODULE hLibModule)
.idata:00410300                 extrn __imp_FreeLibrary:dword
.idata:00410300                                         ; DATA XREF: FreeLibrary↑r
.idata:00410304 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00410304                 extrn __imp_GetCurrentDirectoryA:dword
.idata:00410304                                         ; DATA XREF: GetCurrentDirectoryA↑r
.idata:00410308 ; BOOL (__stdcall *GetDiskFreeSpaceA)(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00410308                 extrn __imp_GetDiskFreeSpaceA:dword
.idata:00410308                                         ; DATA XREF: GetDiskFreeSpaceA↑r
.idata:0041030C ; UINT (__stdcall *GetDriveTypeA)(LPCSTR lpRootPathName)
.idata:0041030C                 extrn __imp_GetDriveTypeA:dword
.idata:0041030C                                         ; DATA XREF: GetDriveTypeA↑r
.idata:00410310 ; DWORD (__stdcall *GetFileAttributesA)(LPCSTR lpFileName)
.idata:00410310                 extrn __imp_GetFileAttributesA:dword
.idata:00410310                                         ; DATA XREF: GetFileAttributesA↑r
.idata:00410314 ; BOOL (__stdcall *GetFileInformationByHandle)(HANDLE hFile, LPBY_HANDLE_FILE_INFORMATION lpFileInformation)
.idata:00410314                 extrn __imp_GetFileInformationByHandle:dword
.idata:00410314                                         ; DATA XREF: GetFileInformationByHandle↑r
.idata:00410318 ; DWORD (__stdcall *GetFileSize)(HANDLE hFile, LPDWORD lpFileSizeHigh)
.idata:00410318                 extrn __imp_GetFileSize:dword
.idata:00410318                                         ; DATA XREF: GetFileSize↑r
.idata:0041031C ; DWORD (__stdcall *GetFileType)(HANDLE hFile)
.idata:0041031C                 extrn __imp_GetFileType:dword
.idata:0041031C                                         ; DATA XREF: GetFileType↑r
.idata:00410320 ; DWORD (__stdcall *GetFullPathNameA)(LPCSTR lpFileName, DWORD nBufferLength, LPSTR lpBuffer, LPSTR *lpFilePart)
.idata:00410320                 extrn __imp_GetFullPathNameA:dword
.idata:00410320                                         ; DATA XREF: GetFullPathNameA↑r
.idata:00410324 ; DWORD (__stdcall *GetLastError)()
.idata:00410324                 extrn __imp_GetLastError:dword
.idata:00410324                                         ; DATA XREF: GetLastError↑r
.idata:00410328 ; DWORD (__stdcall *GetLogicalDriveStringsA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00410328                 extrn __imp_GetLogicalDriveStringsA:dword
.idata:00410328                                         ; DATA XREF: GetLogicalDriveStringsA↑r
.idata:0041032C ; DWORD (__stdcall *GetModuleFileNameA)(HMODULE hModule, LPSTR lpFilename, DWORD nSize)
.idata:0041032C                 extrn __imp_GetModuleFileNameA:dword
.idata:0041032C                                         ; DATA XREF: GetModuleFileNameA↑r
.idata:00410330 ; HMODULE (__stdcall *GetModuleHandleA)(LPCSTR lpModuleName)
.idata:00410330                 extrn __imp_GetModuleHandleA:dword
.idata:00410330                                         ; DATA XREF: GetModuleHandleA↑r
.idata:00410334 ; FARPROC (__stdcall *GetProcAddress)(HMODULE hModule, LPCSTR lpProcName)
.idata:00410334                 extrn __imp_GetProcAddress:dword
.idata:00410334                                         ; DATA XREF: GetProcAddress↑r
.idata:00410338 ; HANDLE (__stdcall *GetProcessHeap)()
.idata:00410338                 extrn __imp_GetProcessHeap:dword
.idata:00410338                                         ; DATA XREF: GetProcessHeap↑r
.idata:0041033C ; DWORD (__stdcall *GetShortPathNameA)(LPCSTR lpszLongPath, LPSTR lpszShortPath, DWORD cchBuffer)
.idata:0041033C                 extrn __imp_GetShortPathNameA:dword
.idata:0041033C                                         ; DATA XREF: GetShortPathNameA↑r
.idata:00410340 ; void (__stdcall *GetSystemInfo)(LPSYSTEM_INFO lpSystemInfo)
.idata:00410340                 extrn __imp_GetSystemInfo:dword
.idata:00410340                                         ; DATA XREF: GetSystemInfo↑r
.idata:00410344 ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:00410344                 extrn __imp_GetSystemTimeAsFileTime:dword
.idata:00410344                                         ; DATA XREF: GetSystemTimeAsFileTime↑r
.idata:00410348 ; DWORD (__stdcall *GetTimeZoneInformation)(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)
.idata:00410348                 extrn __imp_GetTimeZoneInformation:dword
.idata:00410348                                         ; DATA XREF: GetTimeZoneInformation↑r
.idata:0041034C ; DWORD (__stdcall *GetVersion)()
.idata:0041034C                 extrn __imp_GetVersion:dword
.idata:0041034C                                         ; DATA XREF: GetVersion↑r
.idata:00410350 ; BOOL (__stdcall *GetVersionExA)(LPOSVERSIONINFOA lpVersionInformation)
.idata:00410350                 extrn __imp_GetVersionExA:dword
.idata:00410350                                         ; DATA XREF: GetVersionExA↑r
.idata:00410354 ; BOOL (__stdcall *GetVolumeInformationA)(LPCSTR lpRootPathName, LPSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize)
.idata:00410354                 extrn __imp_GetVolumeInformationA:dword
.idata:00410354                                         ; DATA XREF: GetVolumeInformationA↑r
.idata:00410358 ; LPVOID (__stdcall *HeapAlloc)(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00410358                 extrn __imp_HeapAlloc:dword
.idata:00410358                                         ; DATA XREF: HeapAlloc↑r
.idata:0041035C ; BOOL (__stdcall *HeapFree)(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem)
.idata:0041035C                 extrn __imp_HeapFree:dword
.idata:0041035C                                         ; DATA XREF: HeapFree↑r
.idata:00410360 ; HMODULE (__stdcall *LoadLibraryA)(LPCSTR lpLibFileName)
.idata:00410360                 extrn __imp_LoadLibraryA:dword
.idata:00410360                                         ; DATA XREF: LoadLibraryA↑r
.idata:00410364 ; int (__stdcall *MultiByteToWideChar)(UINT CodePage, DWORD dwFlags, LPCCH lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr, int cchWideChar)
.idata:00410364                 extrn __imp_MultiByteToWideChar:dword
.idata:00410364                                         ; DATA XREF: MultiByteToWideChar↑r
.idata:00410368 ; BOOL (__stdcall *PeekNamedPipe)(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
.idata:00410368                 extrn __imp_PeekNamedPipe:dword
.idata:00410368                                         ; DATA XREF: PeekNamedPipe↑r
.idata:0041036C ; UINT (__stdcall *SetErrorMode)(UINT uMode)
.idata:0041036C                 extrn __imp_SetErrorMode:dword
.idata:0041036C                                         ; DATA XREF: SetErrorMode↑r
.idata:00410370 ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:00410370                 extrn __imp_SetUnhandledExceptionFilter:dword
.idata:00410370                                         ; DATA XREF: SetUnhandledExceptionFilter↑r
.idata:00410374 ; BOOL (__stdcall *UnlockFile)(HANDLE hFile, DWORD dwFileOffsetLow, DWORD dwFileOffsetHigh, DWORD nNumberOfBytesToUnlockLow, DWORD nNumberOfBytesToUnlockHigh)
.idata:00410374                 extrn __imp_UnlockFile:dword
.idata:00410374                                         ; DATA XREF: UnlockFile↑r
.idata:00410378 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00410378                 extrn __imp_lstrcmpiA:dword
.idata:00410378                                         ; DATA XREF: lstrcmpiA↑r
.idata:0041037C ; LPSTR (__stdcall *lstrcpyA)(LPSTR lpString1, LPCSTR lpString2)
.idata:0041037C                 extrn __imp_lstrcpyA:dword
.idata:0041037C                                         ; DATA XREF: lstrcpyA↑r
.idata:00410380
.idata:00410388 ;
.idata:00410388 ; Imports from msvcrt.dll
.idata:00410388 ;
.idata:00410388 ; int (__cdecl *_chmod)(const char *FileName, int AccessMode)
.idata:00410388                 extrn __imp__chmod:dword
.idata:00410388                                         ; DATA XREF: _chmod↑r
.idata:0041038C ; int (__cdecl *_close)(int FileHandle)
.idata:0041038C                 extrn __imp__close:dword
.idata:0041038C                                         ; DATA XREF: _close↑r
.idata:00410390 ; int (__cdecl *_getpid)()
.idata:00410390                 extrn __imp__getpid:dword
.idata:00410390                                         ; DATA XREF: _getpid↑r
.idata:00410394 ; int (__cdecl *_isatty)(int FileHandle)
.idata:00410394                 extrn __imp__isatty:dword
.idata:00410394                                         ; DATA XREF: _isatty↑r
.idata:00410398 ; int (*_open)(const char *FileName, int OpenFlag, ...)
.idata:00410398                 extrn __imp__open:dword ; DATA XREF: _open↑r
.idata:0041039C ; int (__cdecl *_read)(int FileHandle, void *DstBuf, unsigned int MaxCharCount)
.idata:0041039C                 extrn __imp__read:dword ; DATA XREF: _read↑r
.idata:004103A0 ; char *(__cdecl *_strdup)(const char *String)
.idata:004103A0                 extrn __imp__strdup:dword
.idata:004103A0                                         ; DATA XREF: _strdup↑r
.idata:004103A4 ; int (__cdecl *_stricmp)(const char *String1, const char *String2)
.idata:004103A4                 extrn __imp__stricmp:dword
.idata:004103A4                                         ; DATA XREF: _stricmp↑r
.idata:004103A8 ; int (__cdecl *_write)(int FileHandle, const void *Buf, unsigned int MaxCharCount)
.idata:004103A8                 extrn __imp__write:dword
.idata:004103A8                                         ; DATA XREF: _write↑r
.idata:004103AC
.idata:004103B4 ;
.idata:004103B4 ; Imports from MSVCP60.DLL
.idata:004103B4 ;
.idata:004103B4 ; size_t (__cdecl *mbrtowc)(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State)
.idata:004103B4                 extrn __imp_mbrtowc:dword
.idata:004103B4                                         ; DATA XREF: mbrtowc↑r
.idata:004103B8
.idata:004103C0 ;
.idata:004103C0 ; Imports from msvcrt.dll
.idata:004103C0 ;
.idata:004103C0                 extrn __imp___getmainargs:dword
.idata:004103C0                                         ; DATA XREF: __getmainargs↑r
.idata:004103C4 ; int _mb_cur_max
.idata:004103C4                 extrn __mb_cur_max:dword
.idata:004103C4                                         ; DATA XREF: sub_404460+7↑r
.idata:004103C4                                         ; sub_404460+5F3↑r
.idata:004103C8 ; char ***(__cdecl *__p__environ)()
.idata:004103C8                 extrn __imp___p__environ:dword
.idata:004103C8                                         ; DATA XREF: __p__environ↑r
.idata:004103CC ; int *(__cdecl *__p__fmode)()
.idata:004103CC                 extrn __imp___p__fmode:dword
.idata:004103CC                                         ; DATA XREF: __p__fmode↑r
.idata:004103D0 ; void (__cdecl *_set_app_type)(_crt_app_type Type)
.idata:004103D0                 extrn __set_app_type:dword
.idata:004103D0                                         ; CODE XREF: start+D↑p
.idata:004103D0                                         ; .text:0040102D↑p
.idata:004103D0                                         ; DATA XREF: ...
.idata:004103D4                 extrn __imp__assert:dword
.idata:004103D4                                         ; DATA XREF: _assert↑r
.idata:004103D8 ; void (__cdecl *_cexit)()
.idata:004103D8                 extrn __imp__cexit:dword
.idata:004103D8                                         ; DATA XREF: _cexit↑r
.idata:004103DC ; int (__cdecl *_close_0)(int FileHandle)
.idata:004103DC                 extrn __imp__close_0:dword
.idata:004103DC                                         ; DATA XREF: _close_0↑r
.idata:004103E0 ; int *(__cdecl *_errno)()
.idata:004103E0                 extrn __imp__errno:dword
.idata:004103E0                                         ; DATA XREF: _errno↑r
.idata:004103E4 ; FILE *(__cdecl *_fdopen)(int FileHandle, const char *Format)
.idata:004103E4                 extrn __imp__fdopen:dword
.idata:004103E4                                         ; DATA XREF: _fdopen↑r
.idata:004103E8 ; __int64 (__cdecl *_filelengthi64)(int FileHandle)
.idata:004103E8                 extrn __imp__filelengthi64:dword
.idata:004103E8                                         ; DATA XREF: _filelengthi64↑r
.idata:004103EC ; int (__cdecl *_flsbuf)(int Ch, FILE *File)
.idata:004103EC                 extrn __imp__flsbuf:dword
.idata:004103EC                                         ; DATA XREF: _flsbuf↑r
.idata:004103F0 ; intptr_t (__cdecl *_get_osfhandle)(int FileHandle)
.idata:004103F0                 extrn __imp__get_osfhandle:dword
.idata:004103F0                                         ; DATA XREF: _get_osfhandle↑r
.idata:004103F4 ; FILE iob[]
.idata:004103F4                 extrn _iob:dword        ; DATA XREF: sub_401080+5C↑r
.idata:004103F4                                         ; sub_401080+75↑r ...
.idata:004103F8 ; int (__cdecl *_isctype)(int C, int Type)
.idata:004103F8                 extrn __imp__isctype:dword
.idata:004103F8                                         ; DATA XREF: _isctype↑r
.idata:004103FC ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004103FC                 extrn _onexit:dword     ; CODE XREF: .text:0040106C↑p
.idata:004103FC                                         ; DATA XREF: .text:0040106C↑r
.idata:00410400 ; int (*_open_0)(const char *FileName, int OpenFlag, ...)
.idata:00410400                 extrn __imp__open_0:dword
.idata:00410400                                         ; DATA XREF: _open_0↑r
.idata:00410404 ; const unsigned __int16 *pctype
.idata:00410404                 extrn _pctype:dword     ; DATA XREF: sub_404460:loc_404B54↑r
.idata:00410408 ; int (__cdecl *_setmode)(int FileHandle, int Mode)
.idata:00410408                 extrn __imp__setmode:dword
.idata:00410408                                         ; DATA XREF: _setmode↑r
.idata:0041040C ; int (__cdecl *_stricmp_0)(const char *String1, const char *String2)
.idata:0041040C                 extrn __imp__stricmp_0:dword
.idata:0041040C                                         ; DATA XREF: _stricmp_0↑r
.idata:00410410 ; void (__cdecl __noreturn *abort)()
.idata:00410410                 extrn __imp_abort:dword ; DATA XREF: abort↑r
.idata:00410414 ; int (__cdecl *atexit)(void (__cdecl *)())
.idata:00410414                 extrn atexit:dword      ; CODE XREF: sub_401040+C↑p
.idata:00410414                                         ; DATA XREF: sub_401040+C↑r
.idata:00410418 ; void *(__cdecl *calloc)(size_t Count, size_t Size)
.idata:00410418                 extrn __imp_calloc:dword
.idata:00410418                                         ; DATA XREF: calloc↑r
.idata:0041041C ; char *(__cdecl *ctime)(const __time32_t *const Time)
.idata:0041041C                 extrn __imp_ctime:dword ; DATA XREF: ctime↑r
.idata:00410420 ; void (__cdecl __noreturn *exit)(int Code)
.idata:00410420                 extrn __imp_exit:dword  ; DATA XREF: exit↑r
.idata:00410424 ; int (__cdecl *fclose)(FILE *Stream)
.idata:00410424                 extrn __imp_fclose:dword
.idata:00410424                                         ; DATA XREF: fclose↑r
.idata:00410428 ; int (__cdecl *fflush)(FILE *Stream)
.idata:00410428                 extrn __imp_fflush:dword
.idata:00410428                                         ; DATA XREF: fflush↑r
.idata:0041042C ; FILE *(__cdecl *fopen)(const char *FileName, const char *Mode)
.idata:0041042C                 extrn __imp_fopen:dword ; DATA XREF: fopen↑r
.idata:00410430 ; int (*fprintf)(FILE *const Stream, const char *const Format, ...)
.idata:00410430                 extrn __imp_fprintf:dword
.idata:00410430                                         ; DATA XREF: fprintf↑r
.idata:00410434 ; int (__cdecl *fputs)(const char *Buffer, FILE *Stream)
.idata:00410434                 extrn __imp_fputs:dword ; DATA XREF: fputs↑r
.idata:00410438 ; void (__cdecl *free)(void *Block)
.idata:00410438                 extrn __imp_free:dword  ; DATA XREF: free↑r
.idata:0041043C ; char *(__cdecl *getenv)(const char *VarName)
.idata:0041043C                 extrn __imp_getenv:dword
.idata:0041043C                                         ; DATA XREF: getenv↑r
.idata:00410440 ; int (__cdecl *isalpha)(int C)
.idata:00410440                 extrn __imp_isalpha:dword
.idata:00410440                                         ; DATA XREF: isalpha↑r
.idata:00410444 ; int (__cdecl *iswctype)(wint_t C, wctype_t Type)
.idata:00410444                 extrn __imp_iswctype:dword
.idata:00410444                                         ; DATA XREF: iswctype↑r
.idata:00410448 ; void *(__cdecl *malloc)(size_t Size)
.idata:00410448                 extrn __imp_malloc:dword
.idata:00410448                                         ; DATA XREF: malloc↑r
.idata:0041044C ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:0041044C                 extrn __imp_memcpy:dword
.idata:0041044C                                         ; DATA XREF: memcpy↑r
.idata:00410450 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00410450                 extrn __imp_memmove:dword
.idata:00410450                                         ; DATA XREF: memmove↑r
.idata:00410454 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:00410454                 extrn __imp_memset:dword
.idata:00410454                                         ; DATA XREF: memset↑r
.idata:00410458 ; int (*printf)(const char *const Format, ...)
.idata:00410458                 extrn __imp_printf:dword
.idata:00410458                                         ; DATA XREF: printf↑r
.idata:0041045C ; void *(__cdecl *realloc)(void *Block, size_t Size)
.idata:0041045C                 extrn __imp_realloc:dword
.idata:0041045C                                         ; DATA XREF: realloc↑r
.idata:00410460 ; char *(__cdecl *setlocale)(int Category, const char *Locale)
.idata:00410460                 extrn __imp_setlocale:dword
.idata:00410460                                         ; DATA XREF: setlocale↑r
.idata:00410464 ; _crt_signal_t (__cdecl *signal)(int Signal, _crt_signal_t Function)
.idata:00410464                 extrn __imp_signal:dword
.idata:00410464                                         ; DATA XREF: signal↑r
.idata:00410468 ; int (*sprintf)(char *const Buffer, const char *const Format, ...)
.idata:00410468                 extrn __imp_sprintf:dword
.idata:00410468                                         ; DATA XREF: sprintf↑r
.idata:0041046C ; int (*sscanf)(const char *const Buffer, const char *const Format, ...)
.idata:0041046C                 extrn __imp_sscanf:dword
.idata:0041046C                                         ; DATA XREF: sscanf↑r
.idata:00410470 ; char *(__cdecl *strcat)(char *Destination, const char *Source)
.idata:00410470                 extrn __imp_strcat:dword
.idata:00410470                                         ; DATA XREF: strcat↑r
.idata:00410474 ; char *(__cdecl *strchr)(const char *Str, int Val)
.idata:00410474                 extrn __imp_strchr:dword
.idata:00410474                                         ; DATA XREF: strchr↑r
.idata:00410478 ; int (__cdecl *strcmp)(const char *Str1, const char *Str2)
.idata:00410478                 extrn __imp_strcmp:dword
.idata:00410478                                         ; DATA XREF: strcmp↑r
.idata:0041047C ; char *(__cdecl *strcpy)(char *Destination, const char *Source)
.idata:0041047C                 extrn __imp_strcpy:dword
.idata:0041047C                                         ; DATA XREF: strcpy↑r
.idata:00410480 ; char *(__cdecl *strerror)(int ErrorMessage)
.idata:00410480                 extrn __imp_strerror:dword
.idata:00410480                                         ; DATA XREF: strerror↑r
.idata:00410484 ; size_t (__cdecl *strlen)(const char *Str)
.idata:00410484                 extrn __imp_strlen:dword
.idata:00410484                                         ; DATA XREF: strlen↑r
.idata:00410488 ; int (__cdecl *strncmp)(const char *Str1, const char *Str2, size_t MaxCount)
.idata:00410488                 extrn __imp_strncmp:dword
.idata:00410488                                         ; DATA XREF: strncmp↑r
.idata:0041048C ; char *(__cdecl *strncpy)(char *Destination, const char *Source, size_t Count)
.idata:0041048C                 extrn __imp_strncpy:dword
.idata:0041048C                                         ; DATA XREF: strncpy↑r
.idata:00410490 ; char *(__cdecl *strpbrk)(const char *Str, const char *Control)
.idata:00410490                 extrn __imp_strpbrk:dword
.idata:00410490                                         ; DATA XREF: strpbrk↑r
.idata:00410494 ; char *(__cdecl *strrchr)(const char *Str, int Ch)
.idata:00410494                 extrn __imp_strrchr:dword
.idata:00410494                                         ; DATA XREF: strrchr↑r
.idata:00410498 ; size_t (__cdecl *strspn)(const char *Str, const char *Control)
.idata:00410498                 extrn __imp_strspn:dword
.idata:00410498                                         ; DATA XREF: strspn↑r
.idata:0041049C ; char *(__cdecl *strstr)(const char *Str, const char *SubStr)
.idata:0041049C                 extrn __imp_strstr:dword
.idata:0041049C                                         ; DATA XREF: strstr↑r
.idata:004104A0 ; int (__cdecl *toupper)(int C)
.idata:004104A0                 extrn __imp_toupper:dword
.idata:004104A0                                         ; DATA XREF: toupper↑r
.idata:004104A4 ; int (__cdecl *vfprintf)(FILE *const Stream, const char *const Format, va_list ArgList)
.idata:004104A4                 extrn __imp_vfprintf:dword
.idata:004104A4                                         ; DATA XREF: vfprintf↑r
.idata:004104A8
.idata:004104B0 ;
.idata:004104B0 ; Imports from OLE32.dll
.idata:004104B0 ;
.idata:004104B0 ; HRESULT (__stdcall *CoCreateInstance)(const IID *const rclsid, LPUNKNOWN pUnkOuter, DWORD dwClsContext, const IID *const riid, LPVOID *ppv)
.idata:004104B0                 extrn __imp_CoCreateInstance:dword
.idata:004104B0                                         ; DATA XREF: CoCreateInstance↑r
.idata:004104B4 ; void (__stdcall *CoUninitialize)()
.idata:004104B4                 extrn __imp_CoUninitialize:dword
.idata:004104B4                                         ; DATA XREF: CoUninitialize↑r
.idata:004104B8 ; HRESULT (__stdcall *OleInitialize)(LPVOID pvReserved)
.idata:004104B8                 extrn __imp_OleInitialize:dword
.idata:004104B8                                         ; DATA XREF: OleInitialize↑r
.idata:004104BC
.idata:004104BC
.idata:004104BC
.idata:004104BC                 end start
